
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_start>:
    1000:	20007320 	.word	0x20007320
    1004:	00007d31 	.word	0x00007d31
    1008:	00029829 	.word	0x00029829
    100c:	00007d61 	.word	0x00007d61
    1010:	00007d61 	.word	0x00007d61
    1014:	00007d61 	.word	0x00007d61
    1018:	00007d61 	.word	0x00007d61
	...
    102c:	00007a7d 	.word	0x00007a7d
    1030:	00007d61 	.word	0x00007d61
    1034:	00000000 	.word	0x00000000
    1038:	00007a25 	.word	0x00007a25
    103c:	000072d1 	.word	0x000072d1

00001040 <_irq_vector_table>:
    1040:	00007cf1 0002ce29 00007cf1 00007cf1     .|..)....|...|..
    1050:	00007cf1 00007cf1 00007cf1 00007cf1     .|...|...|...|..
    1060:	00007cf1 00007cf1 00007cf1 00007cf1     .|...|...|...|..
    1070:	00007cf1 00007cf1 00007cf1 00007cf1     .|...|...|...|..
    1080:	00007cf1 00007cf1 00007cf1 00007cf1     .|...|...|...|..
    1090:	00007cf1 00007cf1 00007cf1 00007cf1     .|...|...|...|..
    10a0:	00007cf1 00007cf1 00007cf1 00007cf1     .|...|...|...|..
    10b0:	00007cf1 00007cf1 00007cf1 00007cf1     .|...|...|...|..
    10c0:	00007cf1 00007cf1 00007cf1 00007cf1     .|...|...|...|..
    10d0:	00007cf1 00007cf1 00007cf1 00007cf1     .|...|...|...|..
    10e0:	00007cf1 00007cf1 00007cf1 00007cf1     .|...|...|...|..
    10f0:	00007cf1 00007cf1 00007cf1 00007cf1     .|...|...|...|..

Disassembly of section text:

00001100 <__aeabi_drsub>:
    1100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    1104:	e002      	b.n	110c <__adddf3>
    1106:	bf00      	nop

00001108 <__aeabi_dsub>:
    1108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000110c <__adddf3>:
    110c:	b530      	push	{r4, r5, lr}
    110e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    1112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    1116:	ea94 0f05 	teq	r4, r5
    111a:	bf08      	it	eq
    111c:	ea90 0f02 	teqeq	r0, r2
    1120:	bf1f      	itttt	ne
    1122:	ea54 0c00 	orrsne.w	ip, r4, r0
    1126:	ea55 0c02 	orrsne.w	ip, r5, r2
    112a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    112e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1132:	f000 80e2 	beq.w	12fa <__adddf3+0x1ee>
    1136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    113a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    113e:	bfb8      	it	lt
    1140:	426d      	neglt	r5, r5
    1142:	dd0c      	ble.n	115e <__adddf3+0x52>
    1144:	442c      	add	r4, r5
    1146:	ea80 0202 	eor.w	r2, r0, r2
    114a:	ea81 0303 	eor.w	r3, r1, r3
    114e:	ea82 0000 	eor.w	r0, r2, r0
    1152:	ea83 0101 	eor.w	r1, r3, r1
    1156:	ea80 0202 	eor.w	r2, r0, r2
    115a:	ea81 0303 	eor.w	r3, r1, r3
    115e:	2d36      	cmp	r5, #54	; 0x36
    1160:	bf88      	it	hi
    1162:	bd30      	pophi	{r4, r5, pc}
    1164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    116c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    1170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    1174:	d002      	beq.n	117c <__adddf3+0x70>
    1176:	4240      	negs	r0, r0
    1178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    117c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    1180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    1188:	d002      	beq.n	1190 <__adddf3+0x84>
    118a:	4252      	negs	r2, r2
    118c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1190:	ea94 0f05 	teq	r4, r5
    1194:	f000 80a7 	beq.w	12e6 <__adddf3+0x1da>
    1198:	f1a4 0401 	sub.w	r4, r4, #1
    119c:	f1d5 0e20 	rsbs	lr, r5, #32
    11a0:	db0d      	blt.n	11be <__adddf3+0xb2>
    11a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    11a6:	fa22 f205 	lsr.w	r2, r2, r5
    11aa:	1880      	adds	r0, r0, r2
    11ac:	f141 0100 	adc.w	r1, r1, #0
    11b0:	fa03 f20e 	lsl.w	r2, r3, lr
    11b4:	1880      	adds	r0, r0, r2
    11b6:	fa43 f305 	asr.w	r3, r3, r5
    11ba:	4159      	adcs	r1, r3
    11bc:	e00e      	b.n	11dc <__adddf3+0xd0>
    11be:	f1a5 0520 	sub.w	r5, r5, #32
    11c2:	f10e 0e20 	add.w	lr, lr, #32
    11c6:	2a01      	cmp	r2, #1
    11c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    11cc:	bf28      	it	cs
    11ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    11d2:	fa43 f305 	asr.w	r3, r3, r5
    11d6:	18c0      	adds	r0, r0, r3
    11d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    11dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    11e0:	d507      	bpl.n	11f2 <__adddf3+0xe6>
    11e2:	f04f 0e00 	mov.w	lr, #0
    11e6:	f1dc 0c00 	rsbs	ip, ip, #0
    11ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    11ee:	eb6e 0101 	sbc.w	r1, lr, r1
    11f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    11f6:	d31b      	bcc.n	1230 <__adddf3+0x124>
    11f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    11fc:	d30c      	bcc.n	1218 <__adddf3+0x10c>
    11fe:	0849      	lsrs	r1, r1, #1
    1200:	ea5f 0030 	movs.w	r0, r0, rrx
    1204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    1208:	f104 0401 	add.w	r4, r4, #1
    120c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    1210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    1214:	f080 809a 	bcs.w	134c <__adddf3+0x240>
    1218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    121c:	bf08      	it	eq
    121e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1222:	f150 0000 	adcs.w	r0, r0, #0
    1226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    122a:	ea41 0105 	orr.w	r1, r1, r5
    122e:	bd30      	pop	{r4, r5, pc}
    1230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    1234:	4140      	adcs	r0, r0
    1236:	eb41 0101 	adc.w	r1, r1, r1
    123a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    123e:	f1a4 0401 	sub.w	r4, r4, #1
    1242:	d1e9      	bne.n	1218 <__adddf3+0x10c>
    1244:	f091 0f00 	teq	r1, #0
    1248:	bf04      	itt	eq
    124a:	4601      	moveq	r1, r0
    124c:	2000      	moveq	r0, #0
    124e:	fab1 f381 	clz	r3, r1
    1252:	bf08      	it	eq
    1254:	3320      	addeq	r3, #32
    1256:	f1a3 030b 	sub.w	r3, r3, #11
    125a:	f1b3 0220 	subs.w	r2, r3, #32
    125e:	da0c      	bge.n	127a <__adddf3+0x16e>
    1260:	320c      	adds	r2, #12
    1262:	dd08      	ble.n	1276 <__adddf3+0x16a>
    1264:	f102 0c14 	add.w	ip, r2, #20
    1268:	f1c2 020c 	rsb	r2, r2, #12
    126c:	fa01 f00c 	lsl.w	r0, r1, ip
    1270:	fa21 f102 	lsr.w	r1, r1, r2
    1274:	e00c      	b.n	1290 <__adddf3+0x184>
    1276:	f102 0214 	add.w	r2, r2, #20
    127a:	bfd8      	it	le
    127c:	f1c2 0c20 	rsble	ip, r2, #32
    1280:	fa01 f102 	lsl.w	r1, r1, r2
    1284:	fa20 fc0c 	lsr.w	ip, r0, ip
    1288:	bfdc      	itt	le
    128a:	ea41 010c 	orrle.w	r1, r1, ip
    128e:	4090      	lslle	r0, r2
    1290:	1ae4      	subs	r4, r4, r3
    1292:	bfa2      	ittt	ge
    1294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    1298:	4329      	orrge	r1, r5
    129a:	bd30      	popge	{r4, r5, pc}
    129c:	ea6f 0404 	mvn.w	r4, r4
    12a0:	3c1f      	subs	r4, #31
    12a2:	da1c      	bge.n	12de <__adddf3+0x1d2>
    12a4:	340c      	adds	r4, #12
    12a6:	dc0e      	bgt.n	12c6 <__adddf3+0x1ba>
    12a8:	f104 0414 	add.w	r4, r4, #20
    12ac:	f1c4 0220 	rsb	r2, r4, #32
    12b0:	fa20 f004 	lsr.w	r0, r0, r4
    12b4:	fa01 f302 	lsl.w	r3, r1, r2
    12b8:	ea40 0003 	orr.w	r0, r0, r3
    12bc:	fa21 f304 	lsr.w	r3, r1, r4
    12c0:	ea45 0103 	orr.w	r1, r5, r3
    12c4:	bd30      	pop	{r4, r5, pc}
    12c6:	f1c4 040c 	rsb	r4, r4, #12
    12ca:	f1c4 0220 	rsb	r2, r4, #32
    12ce:	fa20 f002 	lsr.w	r0, r0, r2
    12d2:	fa01 f304 	lsl.w	r3, r1, r4
    12d6:	ea40 0003 	orr.w	r0, r0, r3
    12da:	4629      	mov	r1, r5
    12dc:	bd30      	pop	{r4, r5, pc}
    12de:	fa21 f004 	lsr.w	r0, r1, r4
    12e2:	4629      	mov	r1, r5
    12e4:	bd30      	pop	{r4, r5, pc}
    12e6:	f094 0f00 	teq	r4, #0
    12ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    12ee:	bf06      	itte	eq
    12f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    12f4:	3401      	addeq	r4, #1
    12f6:	3d01      	subne	r5, #1
    12f8:	e74e      	b.n	1198 <__adddf3+0x8c>
    12fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    12fe:	bf18      	it	ne
    1300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1304:	d029      	beq.n	135a <__adddf3+0x24e>
    1306:	ea94 0f05 	teq	r4, r5
    130a:	bf08      	it	eq
    130c:	ea90 0f02 	teqeq	r0, r2
    1310:	d005      	beq.n	131e <__adddf3+0x212>
    1312:	ea54 0c00 	orrs.w	ip, r4, r0
    1316:	bf04      	itt	eq
    1318:	4619      	moveq	r1, r3
    131a:	4610      	moveq	r0, r2
    131c:	bd30      	pop	{r4, r5, pc}
    131e:	ea91 0f03 	teq	r1, r3
    1322:	bf1e      	ittt	ne
    1324:	2100      	movne	r1, #0
    1326:	2000      	movne	r0, #0
    1328:	bd30      	popne	{r4, r5, pc}
    132a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    132e:	d105      	bne.n	133c <__adddf3+0x230>
    1330:	0040      	lsls	r0, r0, #1
    1332:	4149      	adcs	r1, r1
    1334:	bf28      	it	cs
    1336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    133a:	bd30      	pop	{r4, r5, pc}
    133c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    1340:	bf3c      	itt	cc
    1342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    1346:	bd30      	popcc	{r4, r5, pc}
    1348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    134c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    1350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1354:	f04f 0000 	mov.w	r0, #0
    1358:	bd30      	pop	{r4, r5, pc}
    135a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    135e:	bf1a      	itte	ne
    1360:	4619      	movne	r1, r3
    1362:	4610      	movne	r0, r2
    1364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    1368:	bf1c      	itt	ne
    136a:	460b      	movne	r3, r1
    136c:	4602      	movne	r2, r0
    136e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1372:	bf06      	itte	eq
    1374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    1378:	ea91 0f03 	teqeq	r1, r3
    137c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    1380:	bd30      	pop	{r4, r5, pc}
    1382:	bf00      	nop

00001384 <__aeabi_ui2d>:
    1384:	f090 0f00 	teq	r0, #0
    1388:	bf04      	itt	eq
    138a:	2100      	moveq	r1, #0
    138c:	4770      	bxeq	lr
    138e:	b530      	push	{r4, r5, lr}
    1390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1398:	f04f 0500 	mov.w	r5, #0
    139c:	f04f 0100 	mov.w	r1, #0
    13a0:	e750      	b.n	1244 <__adddf3+0x138>
    13a2:	bf00      	nop

000013a4 <__aeabi_i2d>:
    13a4:	f090 0f00 	teq	r0, #0
    13a8:	bf04      	itt	eq
    13aa:	2100      	moveq	r1, #0
    13ac:	4770      	bxeq	lr
    13ae:	b530      	push	{r4, r5, lr}
    13b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    13b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    13b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    13bc:	bf48      	it	mi
    13be:	4240      	negmi	r0, r0
    13c0:	f04f 0100 	mov.w	r1, #0
    13c4:	e73e      	b.n	1244 <__adddf3+0x138>
    13c6:	bf00      	nop

000013c8 <__aeabi_f2d>:
    13c8:	0042      	lsls	r2, r0, #1
    13ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    13ce:	ea4f 0131 	mov.w	r1, r1, rrx
    13d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    13d6:	bf1f      	itttt	ne
    13d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    13dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    13e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    13e4:	4770      	bxne	lr
    13e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    13ea:	bf08      	it	eq
    13ec:	4770      	bxeq	lr
    13ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    13f2:	bf04      	itt	eq
    13f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    13f8:	4770      	bxeq	lr
    13fa:	b530      	push	{r4, r5, lr}
    13fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    1400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1408:	e71c      	b.n	1244 <__adddf3+0x138>
    140a:	bf00      	nop

0000140c <__aeabi_ul2d>:
    140c:	ea50 0201 	orrs.w	r2, r0, r1
    1410:	bf08      	it	eq
    1412:	4770      	bxeq	lr
    1414:	b530      	push	{r4, r5, lr}
    1416:	f04f 0500 	mov.w	r5, #0
    141a:	e00a      	b.n	1432 <__aeabi_l2d+0x16>

0000141c <__aeabi_l2d>:
    141c:	ea50 0201 	orrs.w	r2, r0, r1
    1420:	bf08      	it	eq
    1422:	4770      	bxeq	lr
    1424:	b530      	push	{r4, r5, lr}
    1426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    142a:	d502      	bpl.n	1432 <__aeabi_l2d+0x16>
    142c:	4240      	negs	r0, r0
    142e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    143a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    143e:	f43f aed8 	beq.w	11f2 <__adddf3+0xe6>
    1442:	f04f 0203 	mov.w	r2, #3
    1446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    144a:	bf18      	it	ne
    144c:	3203      	addne	r2, #3
    144e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1452:	bf18      	it	ne
    1454:	3203      	addne	r2, #3
    1456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    145a:	f1c2 0320 	rsb	r3, r2, #32
    145e:	fa00 fc03 	lsl.w	ip, r0, r3
    1462:	fa20 f002 	lsr.w	r0, r0, r2
    1466:	fa01 fe03 	lsl.w	lr, r1, r3
    146a:	ea40 000e 	orr.w	r0, r0, lr
    146e:	fa21 f102 	lsr.w	r1, r1, r2
    1472:	4414      	add	r4, r2
    1474:	e6bd      	b.n	11f2 <__adddf3+0xe6>
    1476:	bf00      	nop

00001478 <__aeabi_dmul>:
    1478:	b570      	push	{r4, r5, r6, lr}
    147a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    147e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1486:	bf1d      	ittte	ne
    1488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    148c:	ea94 0f0c 	teqne	r4, ip
    1490:	ea95 0f0c 	teqne	r5, ip
    1494:	f000 f8de 	bleq	1654 <__aeabi_dmul+0x1dc>
    1498:	442c      	add	r4, r5
    149a:	ea81 0603 	eor.w	r6, r1, r3
    149e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    14a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    14a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    14aa:	bf18      	it	ne
    14ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    14b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    14b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    14b8:	d038      	beq.n	152c <__aeabi_dmul+0xb4>
    14ba:	fba0 ce02 	umull	ip, lr, r0, r2
    14be:	f04f 0500 	mov.w	r5, #0
    14c2:	fbe1 e502 	umlal	lr, r5, r1, r2
    14c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    14ca:	fbe0 e503 	umlal	lr, r5, r0, r3
    14ce:	f04f 0600 	mov.w	r6, #0
    14d2:	fbe1 5603 	umlal	r5, r6, r1, r3
    14d6:	f09c 0f00 	teq	ip, #0
    14da:	bf18      	it	ne
    14dc:	f04e 0e01 	orrne.w	lr, lr, #1
    14e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    14e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    14e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    14ec:	d204      	bcs.n	14f8 <__aeabi_dmul+0x80>
    14ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    14f2:	416d      	adcs	r5, r5
    14f4:	eb46 0606 	adc.w	r6, r6, r6
    14f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    14fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    1500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    1504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    1508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    150c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    1510:	bf88      	it	hi
    1512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1516:	d81e      	bhi.n	1556 <__aeabi_dmul+0xde>
    1518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    151c:	bf08      	it	eq
    151e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    1522:	f150 0000 	adcs.w	r0, r0, #0
    1526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    152a:	bd70      	pop	{r4, r5, r6, pc}
    152c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    1530:	ea46 0101 	orr.w	r1, r6, r1
    1534:	ea40 0002 	orr.w	r0, r0, r2
    1538:	ea81 0103 	eor.w	r1, r1, r3
    153c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    1540:	bfc2      	ittt	gt
    1542:	ebd4 050c 	rsbsgt	r5, r4, ip
    1546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    154a:	bd70      	popgt	{r4, r5, r6, pc}
    154c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1550:	f04f 0e00 	mov.w	lr, #0
    1554:	3c01      	subs	r4, #1
    1556:	f300 80ab 	bgt.w	16b0 <__aeabi_dmul+0x238>
    155a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    155e:	bfde      	ittt	le
    1560:	2000      	movle	r0, #0
    1562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    1566:	bd70      	pople	{r4, r5, r6, pc}
    1568:	f1c4 0400 	rsb	r4, r4, #0
    156c:	3c20      	subs	r4, #32
    156e:	da35      	bge.n	15dc <__aeabi_dmul+0x164>
    1570:	340c      	adds	r4, #12
    1572:	dc1b      	bgt.n	15ac <__aeabi_dmul+0x134>
    1574:	f104 0414 	add.w	r4, r4, #20
    1578:	f1c4 0520 	rsb	r5, r4, #32
    157c:	fa00 f305 	lsl.w	r3, r0, r5
    1580:	fa20 f004 	lsr.w	r0, r0, r4
    1584:	fa01 f205 	lsl.w	r2, r1, r5
    1588:	ea40 0002 	orr.w	r0, r0, r2
    158c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    1590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1598:	fa21 f604 	lsr.w	r6, r1, r4
    159c:	eb42 0106 	adc.w	r1, r2, r6
    15a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    15a4:	bf08      	it	eq
    15a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    15aa:	bd70      	pop	{r4, r5, r6, pc}
    15ac:	f1c4 040c 	rsb	r4, r4, #12
    15b0:	f1c4 0520 	rsb	r5, r4, #32
    15b4:	fa00 f304 	lsl.w	r3, r0, r4
    15b8:	fa20 f005 	lsr.w	r0, r0, r5
    15bc:	fa01 f204 	lsl.w	r2, r1, r4
    15c0:	ea40 0002 	orr.w	r0, r0, r2
    15c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    15c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    15cc:	f141 0100 	adc.w	r1, r1, #0
    15d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    15d4:	bf08      	it	eq
    15d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    15da:	bd70      	pop	{r4, r5, r6, pc}
    15dc:	f1c4 0520 	rsb	r5, r4, #32
    15e0:	fa00 f205 	lsl.w	r2, r0, r5
    15e4:	ea4e 0e02 	orr.w	lr, lr, r2
    15e8:	fa20 f304 	lsr.w	r3, r0, r4
    15ec:	fa01 f205 	lsl.w	r2, r1, r5
    15f0:	ea43 0302 	orr.w	r3, r3, r2
    15f4:	fa21 f004 	lsr.w	r0, r1, r4
    15f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    15fc:	fa21 f204 	lsr.w	r2, r1, r4
    1600:	ea20 0002 	bic.w	r0, r0, r2
    1604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    1608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    160c:	bf08      	it	eq
    160e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1612:	bd70      	pop	{r4, r5, r6, pc}
    1614:	f094 0f00 	teq	r4, #0
    1618:	d10f      	bne.n	163a <__aeabi_dmul+0x1c2>
    161a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    161e:	0040      	lsls	r0, r0, #1
    1620:	eb41 0101 	adc.w	r1, r1, r1
    1624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1628:	bf08      	it	eq
    162a:	3c01      	subeq	r4, #1
    162c:	d0f7      	beq.n	161e <__aeabi_dmul+0x1a6>
    162e:	ea41 0106 	orr.w	r1, r1, r6
    1632:	f095 0f00 	teq	r5, #0
    1636:	bf18      	it	ne
    1638:	4770      	bxne	lr
    163a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    163e:	0052      	lsls	r2, r2, #1
    1640:	eb43 0303 	adc.w	r3, r3, r3
    1644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    1648:	bf08      	it	eq
    164a:	3d01      	subeq	r5, #1
    164c:	d0f7      	beq.n	163e <__aeabi_dmul+0x1c6>
    164e:	ea43 0306 	orr.w	r3, r3, r6
    1652:	4770      	bx	lr
    1654:	ea94 0f0c 	teq	r4, ip
    1658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    165c:	bf18      	it	ne
    165e:	ea95 0f0c 	teqne	r5, ip
    1662:	d00c      	beq.n	167e <__aeabi_dmul+0x206>
    1664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1668:	bf18      	it	ne
    166a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    166e:	d1d1      	bne.n	1614 <__aeabi_dmul+0x19c>
    1670:	ea81 0103 	eor.w	r1, r1, r3
    1674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1678:	f04f 0000 	mov.w	r0, #0
    167c:	bd70      	pop	{r4, r5, r6, pc}
    167e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1682:	bf06      	itte	eq
    1684:	4610      	moveq	r0, r2
    1686:	4619      	moveq	r1, r3
    1688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    168c:	d019      	beq.n	16c2 <__aeabi_dmul+0x24a>
    168e:	ea94 0f0c 	teq	r4, ip
    1692:	d102      	bne.n	169a <__aeabi_dmul+0x222>
    1694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    1698:	d113      	bne.n	16c2 <__aeabi_dmul+0x24a>
    169a:	ea95 0f0c 	teq	r5, ip
    169e:	d105      	bne.n	16ac <__aeabi_dmul+0x234>
    16a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    16a4:	bf1c      	itt	ne
    16a6:	4610      	movne	r0, r2
    16a8:	4619      	movne	r1, r3
    16aa:	d10a      	bne.n	16c2 <__aeabi_dmul+0x24a>
    16ac:	ea81 0103 	eor.w	r1, r1, r3
    16b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    16b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    16b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    16bc:	f04f 0000 	mov.w	r0, #0
    16c0:	bd70      	pop	{r4, r5, r6, pc}
    16c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    16c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    16ca:	bd70      	pop	{r4, r5, r6, pc}

000016cc <__aeabi_ddiv>:
    16cc:	b570      	push	{r4, r5, r6, lr}
    16ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
    16d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    16d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    16da:	bf1d      	ittte	ne
    16dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    16e0:	ea94 0f0c 	teqne	r4, ip
    16e4:	ea95 0f0c 	teqne	r5, ip
    16e8:	f000 f8a7 	bleq	183a <__aeabi_ddiv+0x16e>
    16ec:	eba4 0405 	sub.w	r4, r4, r5
    16f0:	ea81 0e03 	eor.w	lr, r1, r3
    16f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    16f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    16fc:	f000 8088 	beq.w	1810 <__aeabi_ddiv+0x144>
    1700:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    1708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    170c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    1710:	ea4f 2202 	mov.w	r2, r2, lsl #8
    1714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    1718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    171c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    1720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    1724:	429d      	cmp	r5, r3
    1726:	bf08      	it	eq
    1728:	4296      	cmpeq	r6, r2
    172a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    172e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    1732:	d202      	bcs.n	173a <__aeabi_ddiv+0x6e>
    1734:	085b      	lsrs	r3, r3, #1
    1736:	ea4f 0232 	mov.w	r2, r2, rrx
    173a:	1ab6      	subs	r6, r6, r2
    173c:	eb65 0503 	sbc.w	r5, r5, r3
    1740:	085b      	lsrs	r3, r3, #1
    1742:	ea4f 0232 	mov.w	r2, r2, rrx
    1746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    174a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    174e:	ebb6 0e02 	subs.w	lr, r6, r2
    1752:	eb75 0e03 	sbcs.w	lr, r5, r3
    1756:	bf22      	ittt	cs
    1758:	1ab6      	subcs	r6, r6, r2
    175a:	4675      	movcs	r5, lr
    175c:	ea40 000c 	orrcs.w	r0, r0, ip
    1760:	085b      	lsrs	r3, r3, #1
    1762:	ea4f 0232 	mov.w	r2, r2, rrx
    1766:	ebb6 0e02 	subs.w	lr, r6, r2
    176a:	eb75 0e03 	sbcs.w	lr, r5, r3
    176e:	bf22      	ittt	cs
    1770:	1ab6      	subcs	r6, r6, r2
    1772:	4675      	movcs	r5, lr
    1774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1778:	085b      	lsrs	r3, r3, #1
    177a:	ea4f 0232 	mov.w	r2, r2, rrx
    177e:	ebb6 0e02 	subs.w	lr, r6, r2
    1782:	eb75 0e03 	sbcs.w	lr, r5, r3
    1786:	bf22      	ittt	cs
    1788:	1ab6      	subcs	r6, r6, r2
    178a:	4675      	movcs	r5, lr
    178c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1790:	085b      	lsrs	r3, r3, #1
    1792:	ea4f 0232 	mov.w	r2, r2, rrx
    1796:	ebb6 0e02 	subs.w	lr, r6, r2
    179a:	eb75 0e03 	sbcs.w	lr, r5, r3
    179e:	bf22      	ittt	cs
    17a0:	1ab6      	subcs	r6, r6, r2
    17a2:	4675      	movcs	r5, lr
    17a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    17a8:	ea55 0e06 	orrs.w	lr, r5, r6
    17ac:	d018      	beq.n	17e0 <__aeabi_ddiv+0x114>
    17ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
    17b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    17b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    17ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    17be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    17c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    17c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    17ca:	d1c0      	bne.n	174e <__aeabi_ddiv+0x82>
    17cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    17d0:	d10b      	bne.n	17ea <__aeabi_ddiv+0x11e>
    17d2:	ea41 0100 	orr.w	r1, r1, r0
    17d6:	f04f 0000 	mov.w	r0, #0
    17da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    17de:	e7b6      	b.n	174e <__aeabi_ddiv+0x82>
    17e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    17e4:	bf04      	itt	eq
    17e6:	4301      	orreq	r1, r0
    17e8:	2000      	moveq	r0, #0
    17ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    17ee:	bf88      	it	hi
    17f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    17f4:	f63f aeaf 	bhi.w	1556 <__aeabi_dmul+0xde>
    17f8:	ebb5 0c03 	subs.w	ip, r5, r3
    17fc:	bf04      	itt	eq
    17fe:	ebb6 0c02 	subseq.w	ip, r6, r2
    1802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1806:	f150 0000 	adcs.w	r0, r0, #0
    180a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    180e:	bd70      	pop	{r4, r5, r6, pc}
    1810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    1814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    1818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    181c:	bfc2      	ittt	gt
    181e:	ebd4 050c 	rsbsgt	r5, r4, ip
    1822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    1826:	bd70      	popgt	{r4, r5, r6, pc}
    1828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    182c:	f04f 0e00 	mov.w	lr, #0
    1830:	3c01      	subs	r4, #1
    1832:	e690      	b.n	1556 <__aeabi_dmul+0xde>
    1834:	ea45 0e06 	orr.w	lr, r5, r6
    1838:	e68d      	b.n	1556 <__aeabi_dmul+0xde>
    183a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    183e:	ea94 0f0c 	teq	r4, ip
    1842:	bf08      	it	eq
    1844:	ea95 0f0c 	teqeq	r5, ip
    1848:	f43f af3b 	beq.w	16c2 <__aeabi_dmul+0x24a>
    184c:	ea94 0f0c 	teq	r4, ip
    1850:	d10a      	bne.n	1868 <__aeabi_ddiv+0x19c>
    1852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1856:	f47f af34 	bne.w	16c2 <__aeabi_dmul+0x24a>
    185a:	ea95 0f0c 	teq	r5, ip
    185e:	f47f af25 	bne.w	16ac <__aeabi_dmul+0x234>
    1862:	4610      	mov	r0, r2
    1864:	4619      	mov	r1, r3
    1866:	e72c      	b.n	16c2 <__aeabi_dmul+0x24a>
    1868:	ea95 0f0c 	teq	r5, ip
    186c:	d106      	bne.n	187c <__aeabi_ddiv+0x1b0>
    186e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1872:	f43f aefd 	beq.w	1670 <__aeabi_dmul+0x1f8>
    1876:	4610      	mov	r0, r2
    1878:	4619      	mov	r1, r3
    187a:	e722      	b.n	16c2 <__aeabi_dmul+0x24a>
    187c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1880:	bf18      	it	ne
    1882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1886:	f47f aec5 	bne.w	1614 <__aeabi_dmul+0x19c>
    188a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    188e:	f47f af0d 	bne.w	16ac <__aeabi_dmul+0x234>
    1892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    1896:	f47f aeeb 	bne.w	1670 <__aeabi_dmul+0x1f8>
    189a:	e712      	b.n	16c2 <__aeabi_dmul+0x24a>

0000189c <__aeabi_d2iz>:
    189c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    18a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    18a4:	d215      	bcs.n	18d2 <__aeabi_d2iz+0x36>
    18a6:	d511      	bpl.n	18cc <__aeabi_d2iz+0x30>
    18a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    18ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    18b0:	d912      	bls.n	18d8 <__aeabi_d2iz+0x3c>
    18b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    18b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    18ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    18be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    18c2:	fa23 f002 	lsr.w	r0, r3, r2
    18c6:	bf18      	it	ne
    18c8:	4240      	negne	r0, r0
    18ca:	4770      	bx	lr
    18cc:	f04f 0000 	mov.w	r0, #0
    18d0:	4770      	bx	lr
    18d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    18d6:	d105      	bne.n	18e4 <__aeabi_d2iz+0x48>
    18d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    18dc:	bf08      	it	eq
    18de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    18e2:	4770      	bx	lr
    18e4:	f04f 0000 	mov.w	r0, #0
    18e8:	4770      	bx	lr
    18ea:	bf00      	nop

000018ec <__aeabi_ldivmod>:
    18ec:	b97b      	cbnz	r3, 190e <__aeabi_ldivmod+0x22>
    18ee:	b972      	cbnz	r2, 190e <__aeabi_ldivmod+0x22>
    18f0:	2900      	cmp	r1, #0
    18f2:	bfbe      	ittt	lt
    18f4:	2000      	movlt	r0, #0
    18f6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    18fa:	e006      	blt.n	190a <__aeabi_ldivmod+0x1e>
    18fc:	bf08      	it	eq
    18fe:	2800      	cmpeq	r0, #0
    1900:	bf1c      	itt	ne
    1902:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    1906:	f04f 30ff 	movne.w	r0, #4294967295
    190a:	f000 b9d3 	b.w	1cb4 <__aeabi_idiv0>
    190e:	f1ad 0c08 	sub.w	ip, sp, #8
    1912:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1916:	2900      	cmp	r1, #0
    1918:	db09      	blt.n	192e <__aeabi_ldivmod+0x42>
    191a:	2b00      	cmp	r3, #0
    191c:	db1a      	blt.n	1954 <__aeabi_ldivmod+0x68>
    191e:	f000 f861 	bl	19e4 <__udivmoddi4>
    1922:	f8dd e004 	ldr.w	lr, [sp, #4]
    1926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    192a:	b004      	add	sp, #16
    192c:	4770      	bx	lr
    192e:	4240      	negs	r0, r0
    1930:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1934:	2b00      	cmp	r3, #0
    1936:	db1b      	blt.n	1970 <__aeabi_ldivmod+0x84>
    1938:	f000 f854 	bl	19e4 <__udivmoddi4>
    193c:	f8dd e004 	ldr.w	lr, [sp, #4]
    1940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1944:	b004      	add	sp, #16
    1946:	4240      	negs	r0, r0
    1948:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    194c:	4252      	negs	r2, r2
    194e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1952:	4770      	bx	lr
    1954:	4252      	negs	r2, r2
    1956:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    195a:	f000 f843 	bl	19e4 <__udivmoddi4>
    195e:	f8dd e004 	ldr.w	lr, [sp, #4]
    1962:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1966:	b004      	add	sp, #16
    1968:	4240      	negs	r0, r0
    196a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    196e:	4770      	bx	lr
    1970:	4252      	negs	r2, r2
    1972:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1976:	f000 f835 	bl	19e4 <__udivmoddi4>
    197a:	f8dd e004 	ldr.w	lr, [sp, #4]
    197e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1982:	b004      	add	sp, #16
    1984:	4252      	negs	r2, r2
    1986:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    198a:	4770      	bx	lr

0000198c <__aeabi_uldivmod>:
    198c:	b953      	cbnz	r3, 19a4 <__aeabi_uldivmod+0x18>
    198e:	b94a      	cbnz	r2, 19a4 <__aeabi_uldivmod+0x18>
    1990:	2900      	cmp	r1, #0
    1992:	bf08      	it	eq
    1994:	2800      	cmpeq	r0, #0
    1996:	bf1c      	itt	ne
    1998:	f04f 31ff 	movne.w	r1, #4294967295
    199c:	f04f 30ff 	movne.w	r0, #4294967295
    19a0:	f000 b988 	b.w	1cb4 <__aeabi_idiv0>
    19a4:	f1ad 0c08 	sub.w	ip, sp, #8
    19a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    19ac:	f000 f81a 	bl	19e4 <__udivmoddi4>
    19b0:	f8dd e004 	ldr.w	lr, [sp, #4]
    19b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    19b8:	b004      	add	sp, #16
    19ba:	4770      	bx	lr

000019bc <__popcountsi2>:
    19bc:	0843      	lsrs	r3, r0, #1
    19be:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    19c2:	1ac0      	subs	r0, r0, r3
    19c4:	0883      	lsrs	r3, r0, #2
    19c6:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    19ca:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    19ce:	4418      	add	r0, r3
    19d0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    19d4:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    19d8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    19dc:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    19e0:	0e00      	lsrs	r0, r0, #24
    19e2:	4770      	bx	lr

000019e4 <__udivmoddi4>:
    19e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19e8:	9e08      	ldr	r6, [sp, #32]
    19ea:	4604      	mov	r4, r0
    19ec:	4688      	mov	r8, r1
    19ee:	2b00      	cmp	r3, #0
    19f0:	f040 8085 	bne.w	1afe <__udivmoddi4+0x11a>
    19f4:	428a      	cmp	r2, r1
    19f6:	4615      	mov	r5, r2
    19f8:	d948      	bls.n	1a8c <__udivmoddi4+0xa8>
    19fa:	fab2 f282 	clz	r2, r2
    19fe:	b14a      	cbz	r2, 1a14 <__udivmoddi4+0x30>
    1a00:	f1c2 0720 	rsb	r7, r2, #32
    1a04:	fa01 f302 	lsl.w	r3, r1, r2
    1a08:	fa20 f707 	lsr.w	r7, r0, r7
    1a0c:	4095      	lsls	r5, r2
    1a0e:	ea47 0803 	orr.w	r8, r7, r3
    1a12:	4094      	lsls	r4, r2
    1a14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1a18:	0c23      	lsrs	r3, r4, #16
    1a1a:	fbb8 f7fe 	udiv	r7, r8, lr
    1a1e:	fa1f fc85 	uxth.w	ip, r5
    1a22:	fb0e 8817 	mls	r8, lr, r7, r8
    1a26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    1a2a:	fb07 f10c 	mul.w	r1, r7, ip
    1a2e:	4299      	cmp	r1, r3
    1a30:	d909      	bls.n	1a46 <__udivmoddi4+0x62>
    1a32:	18eb      	adds	r3, r5, r3
    1a34:	f107 30ff 	add.w	r0, r7, #4294967295
    1a38:	f080 80e3 	bcs.w	1c02 <__udivmoddi4+0x21e>
    1a3c:	4299      	cmp	r1, r3
    1a3e:	f240 80e0 	bls.w	1c02 <__udivmoddi4+0x21e>
    1a42:	3f02      	subs	r7, #2
    1a44:	442b      	add	r3, r5
    1a46:	1a5b      	subs	r3, r3, r1
    1a48:	b2a4      	uxth	r4, r4
    1a4a:	fbb3 f0fe 	udiv	r0, r3, lr
    1a4e:	fb0e 3310 	mls	r3, lr, r0, r3
    1a52:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1a56:	fb00 fc0c 	mul.w	ip, r0, ip
    1a5a:	45a4      	cmp	ip, r4
    1a5c:	d909      	bls.n	1a72 <__udivmoddi4+0x8e>
    1a5e:	192c      	adds	r4, r5, r4
    1a60:	f100 33ff 	add.w	r3, r0, #4294967295
    1a64:	f080 80cb 	bcs.w	1bfe <__udivmoddi4+0x21a>
    1a68:	45a4      	cmp	ip, r4
    1a6a:	f240 80c8 	bls.w	1bfe <__udivmoddi4+0x21a>
    1a6e:	3802      	subs	r0, #2
    1a70:	442c      	add	r4, r5
    1a72:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    1a76:	eba4 040c 	sub.w	r4, r4, ip
    1a7a:	2700      	movs	r7, #0
    1a7c:	b11e      	cbz	r6, 1a86 <__udivmoddi4+0xa2>
    1a7e:	40d4      	lsrs	r4, r2
    1a80:	2300      	movs	r3, #0
    1a82:	e9c6 4300 	strd	r4, r3, [r6]
    1a86:	4639      	mov	r1, r7
    1a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a8c:	2a00      	cmp	r2, #0
    1a8e:	d053      	beq.n	1b38 <__udivmoddi4+0x154>
    1a90:	fab2 f282 	clz	r2, r2
    1a94:	2a00      	cmp	r2, #0
    1a96:	f040 80b6 	bne.w	1c06 <__udivmoddi4+0x222>
    1a9a:	1b49      	subs	r1, r1, r5
    1a9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1aa0:	fa1f f885 	uxth.w	r8, r5
    1aa4:	2701      	movs	r7, #1
    1aa6:	fbb1 fcfe 	udiv	ip, r1, lr
    1aaa:	0c23      	lsrs	r3, r4, #16
    1aac:	fb0e 111c 	mls	r1, lr, ip, r1
    1ab0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    1ab4:	fb08 f10c 	mul.w	r1, r8, ip
    1ab8:	4299      	cmp	r1, r3
    1aba:	d907      	bls.n	1acc <__udivmoddi4+0xe8>
    1abc:	18eb      	adds	r3, r5, r3
    1abe:	f10c 30ff 	add.w	r0, ip, #4294967295
    1ac2:	d202      	bcs.n	1aca <__udivmoddi4+0xe6>
    1ac4:	4299      	cmp	r1, r3
    1ac6:	f200 80ec 	bhi.w	1ca2 <__udivmoddi4+0x2be>
    1aca:	4684      	mov	ip, r0
    1acc:	1a59      	subs	r1, r3, r1
    1ace:	b2a3      	uxth	r3, r4
    1ad0:	fbb1 f0fe 	udiv	r0, r1, lr
    1ad4:	fb0e 1410 	mls	r4, lr, r0, r1
    1ad8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    1adc:	fb08 f800 	mul.w	r8, r8, r0
    1ae0:	45a0      	cmp	r8, r4
    1ae2:	d907      	bls.n	1af4 <__udivmoddi4+0x110>
    1ae4:	192c      	adds	r4, r5, r4
    1ae6:	f100 33ff 	add.w	r3, r0, #4294967295
    1aea:	d202      	bcs.n	1af2 <__udivmoddi4+0x10e>
    1aec:	45a0      	cmp	r8, r4
    1aee:	f200 80dc 	bhi.w	1caa <__udivmoddi4+0x2c6>
    1af2:	4618      	mov	r0, r3
    1af4:	eba4 0408 	sub.w	r4, r4, r8
    1af8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1afc:	e7be      	b.n	1a7c <__udivmoddi4+0x98>
    1afe:	428b      	cmp	r3, r1
    1b00:	d908      	bls.n	1b14 <__udivmoddi4+0x130>
    1b02:	2e00      	cmp	r6, #0
    1b04:	d078      	beq.n	1bf8 <__udivmoddi4+0x214>
    1b06:	2700      	movs	r7, #0
    1b08:	e9c6 0100 	strd	r0, r1, [r6]
    1b0c:	4638      	mov	r0, r7
    1b0e:	4639      	mov	r1, r7
    1b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1b14:	fab3 f783 	clz	r7, r3
    1b18:	b97f      	cbnz	r7, 1b3a <__udivmoddi4+0x156>
    1b1a:	428b      	cmp	r3, r1
    1b1c:	d302      	bcc.n	1b24 <__udivmoddi4+0x140>
    1b1e:	4282      	cmp	r2, r0
    1b20:	f200 80bd 	bhi.w	1c9e <__udivmoddi4+0x2ba>
    1b24:	1a84      	subs	r4, r0, r2
    1b26:	eb61 0303 	sbc.w	r3, r1, r3
    1b2a:	2001      	movs	r0, #1
    1b2c:	4698      	mov	r8, r3
    1b2e:	2e00      	cmp	r6, #0
    1b30:	d0a9      	beq.n	1a86 <__udivmoddi4+0xa2>
    1b32:	e9c6 4800 	strd	r4, r8, [r6]
    1b36:	e7a6      	b.n	1a86 <__udivmoddi4+0xa2>
    1b38:	deff      	udf	#255	; 0xff
    1b3a:	f1c7 0520 	rsb	r5, r7, #32
    1b3e:	40bb      	lsls	r3, r7
    1b40:	fa22 fc05 	lsr.w	ip, r2, r5
    1b44:	ea4c 0c03 	orr.w	ip, ip, r3
    1b48:	fa01 f407 	lsl.w	r4, r1, r7
    1b4c:	fa20 f805 	lsr.w	r8, r0, r5
    1b50:	fa21 f305 	lsr.w	r3, r1, r5
    1b54:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    1b58:	ea48 0404 	orr.w	r4, r8, r4
    1b5c:	fbb3 f9fe 	udiv	r9, r3, lr
    1b60:	0c21      	lsrs	r1, r4, #16
    1b62:	fb0e 3319 	mls	r3, lr, r9, r3
    1b66:	fa1f f88c 	uxth.w	r8, ip
    1b6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    1b6e:	fb09 fa08 	mul.w	sl, r9, r8
    1b72:	459a      	cmp	sl, r3
    1b74:	fa02 f207 	lsl.w	r2, r2, r7
    1b78:	fa00 f107 	lsl.w	r1, r0, r7
    1b7c:	d90b      	bls.n	1b96 <__udivmoddi4+0x1b2>
    1b7e:	eb1c 0303 	adds.w	r3, ip, r3
    1b82:	f109 30ff 	add.w	r0, r9, #4294967295
    1b86:	f080 8088 	bcs.w	1c9a <__udivmoddi4+0x2b6>
    1b8a:	459a      	cmp	sl, r3
    1b8c:	f240 8085 	bls.w	1c9a <__udivmoddi4+0x2b6>
    1b90:	f1a9 0902 	sub.w	r9, r9, #2
    1b94:	4463      	add	r3, ip
    1b96:	eba3 030a 	sub.w	r3, r3, sl
    1b9a:	b2a4      	uxth	r4, r4
    1b9c:	fbb3 f0fe 	udiv	r0, r3, lr
    1ba0:	fb0e 3310 	mls	r3, lr, r0, r3
    1ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1ba8:	fb00 f808 	mul.w	r8, r0, r8
    1bac:	45a0      	cmp	r8, r4
    1bae:	d908      	bls.n	1bc2 <__udivmoddi4+0x1de>
    1bb0:	eb1c 0404 	adds.w	r4, ip, r4
    1bb4:	f100 33ff 	add.w	r3, r0, #4294967295
    1bb8:	d26b      	bcs.n	1c92 <__udivmoddi4+0x2ae>
    1bba:	45a0      	cmp	r8, r4
    1bbc:	d969      	bls.n	1c92 <__udivmoddi4+0x2ae>
    1bbe:	3802      	subs	r0, #2
    1bc0:	4464      	add	r4, ip
    1bc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    1bc6:	eba4 0408 	sub.w	r4, r4, r8
    1bca:	fba0 8902 	umull	r8, r9, r0, r2
    1bce:	454c      	cmp	r4, r9
    1bd0:	46c6      	mov	lr, r8
    1bd2:	464b      	mov	r3, r9
    1bd4:	d354      	bcc.n	1c80 <__udivmoddi4+0x29c>
    1bd6:	d051      	beq.n	1c7c <__udivmoddi4+0x298>
    1bd8:	2e00      	cmp	r6, #0
    1bda:	d069      	beq.n	1cb0 <__udivmoddi4+0x2cc>
    1bdc:	ebb1 020e 	subs.w	r2, r1, lr
    1be0:	eb64 0403 	sbc.w	r4, r4, r3
    1be4:	fa04 f505 	lsl.w	r5, r4, r5
    1be8:	fa22 f307 	lsr.w	r3, r2, r7
    1bec:	40fc      	lsrs	r4, r7
    1bee:	431d      	orrs	r5, r3
    1bf0:	e9c6 5400 	strd	r5, r4, [r6]
    1bf4:	2700      	movs	r7, #0
    1bf6:	e746      	b.n	1a86 <__udivmoddi4+0xa2>
    1bf8:	4637      	mov	r7, r6
    1bfa:	4630      	mov	r0, r6
    1bfc:	e743      	b.n	1a86 <__udivmoddi4+0xa2>
    1bfe:	4618      	mov	r0, r3
    1c00:	e737      	b.n	1a72 <__udivmoddi4+0x8e>
    1c02:	4607      	mov	r7, r0
    1c04:	e71f      	b.n	1a46 <__udivmoddi4+0x62>
    1c06:	f1c2 0320 	rsb	r3, r2, #32
    1c0a:	fa20 f703 	lsr.w	r7, r0, r3
    1c0e:	4095      	lsls	r5, r2
    1c10:	fa01 f002 	lsl.w	r0, r1, r2
    1c14:	fa21 f303 	lsr.w	r3, r1, r3
    1c18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1c1c:	4338      	orrs	r0, r7
    1c1e:	0c01      	lsrs	r1, r0, #16
    1c20:	fbb3 f7fe 	udiv	r7, r3, lr
    1c24:	fa1f f885 	uxth.w	r8, r5
    1c28:	fb0e 3317 	mls	r3, lr, r7, r3
    1c2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    1c30:	fb07 f308 	mul.w	r3, r7, r8
    1c34:	428b      	cmp	r3, r1
    1c36:	fa04 f402 	lsl.w	r4, r4, r2
    1c3a:	d907      	bls.n	1c4c <__udivmoddi4+0x268>
    1c3c:	1869      	adds	r1, r5, r1
    1c3e:	f107 3cff 	add.w	ip, r7, #4294967295
    1c42:	d228      	bcs.n	1c96 <__udivmoddi4+0x2b2>
    1c44:	428b      	cmp	r3, r1
    1c46:	d926      	bls.n	1c96 <__udivmoddi4+0x2b2>
    1c48:	3f02      	subs	r7, #2
    1c4a:	4429      	add	r1, r5
    1c4c:	1acb      	subs	r3, r1, r3
    1c4e:	b281      	uxth	r1, r0
    1c50:	fbb3 f0fe 	udiv	r0, r3, lr
    1c54:	fb0e 3310 	mls	r3, lr, r0, r3
    1c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    1c5c:	fb00 f308 	mul.w	r3, r0, r8
    1c60:	428b      	cmp	r3, r1
    1c62:	d907      	bls.n	1c74 <__udivmoddi4+0x290>
    1c64:	1869      	adds	r1, r5, r1
    1c66:	f100 3cff 	add.w	ip, r0, #4294967295
    1c6a:	d210      	bcs.n	1c8e <__udivmoddi4+0x2aa>
    1c6c:	428b      	cmp	r3, r1
    1c6e:	d90e      	bls.n	1c8e <__udivmoddi4+0x2aa>
    1c70:	3802      	subs	r0, #2
    1c72:	4429      	add	r1, r5
    1c74:	1ac9      	subs	r1, r1, r3
    1c76:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    1c7a:	e714      	b.n	1aa6 <__udivmoddi4+0xc2>
    1c7c:	4541      	cmp	r1, r8
    1c7e:	d2ab      	bcs.n	1bd8 <__udivmoddi4+0x1f4>
    1c80:	ebb8 0e02 	subs.w	lr, r8, r2
    1c84:	eb69 020c 	sbc.w	r2, r9, ip
    1c88:	3801      	subs	r0, #1
    1c8a:	4613      	mov	r3, r2
    1c8c:	e7a4      	b.n	1bd8 <__udivmoddi4+0x1f4>
    1c8e:	4660      	mov	r0, ip
    1c90:	e7f0      	b.n	1c74 <__udivmoddi4+0x290>
    1c92:	4618      	mov	r0, r3
    1c94:	e795      	b.n	1bc2 <__udivmoddi4+0x1de>
    1c96:	4667      	mov	r7, ip
    1c98:	e7d8      	b.n	1c4c <__udivmoddi4+0x268>
    1c9a:	4681      	mov	r9, r0
    1c9c:	e77b      	b.n	1b96 <__udivmoddi4+0x1b2>
    1c9e:	4638      	mov	r0, r7
    1ca0:	e745      	b.n	1b2e <__udivmoddi4+0x14a>
    1ca2:	f1ac 0c02 	sub.w	ip, ip, #2
    1ca6:	442b      	add	r3, r5
    1ca8:	e710      	b.n	1acc <__udivmoddi4+0xe8>
    1caa:	3802      	subs	r0, #2
    1cac:	442c      	add	r4, r5
    1cae:	e721      	b.n	1af4 <__udivmoddi4+0x110>
    1cb0:	4637      	mov	r7, r6
    1cb2:	e6e8      	b.n	1a86 <__udivmoddi4+0xa2>

00001cb4 <__aeabi_idiv0>:
    1cb4:	4770      	bx	lr
    1cb6:	bf00      	nop

00001cb8 <__gedf2>:
    1cb8:	f04f 3cff 	mov.w	ip, #4294967295
    1cbc:	e006      	b.n	1ccc <__cmpdf2+0x4>
    1cbe:	bf00      	nop

00001cc0 <__ledf2>:
    1cc0:	f04f 0c01 	mov.w	ip, #1
    1cc4:	e002      	b.n	1ccc <__cmpdf2+0x4>
    1cc6:	bf00      	nop

00001cc8 <__cmpdf2>:
    1cc8:	f04f 0c01 	mov.w	ip, #1
    1ccc:	f84d cd04 	str.w	ip, [sp, #-4]!
    1cd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1cd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1cd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1cdc:	bf18      	it	ne
    1cde:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    1ce2:	d01b      	beq.n	1d1c <__cmpdf2+0x54>
    1ce4:	b001      	add	sp, #4
    1ce6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    1cea:	bf0c      	ite	eq
    1cec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    1cf0:	ea91 0f03 	teqne	r1, r3
    1cf4:	bf02      	ittt	eq
    1cf6:	ea90 0f02 	teqeq	r0, r2
    1cfa:	2000      	moveq	r0, #0
    1cfc:	4770      	bxeq	lr
    1cfe:	f110 0f00 	cmn.w	r0, #0
    1d02:	ea91 0f03 	teq	r1, r3
    1d06:	bf58      	it	pl
    1d08:	4299      	cmppl	r1, r3
    1d0a:	bf08      	it	eq
    1d0c:	4290      	cmpeq	r0, r2
    1d0e:	bf2c      	ite	cs
    1d10:	17d8      	asrcs	r0, r3, #31
    1d12:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    1d16:	f040 0001 	orr.w	r0, r0, #1
    1d1a:	4770      	bx	lr
    1d1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1d20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1d24:	d102      	bne.n	1d2c <__cmpdf2+0x64>
    1d26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    1d2a:	d107      	bne.n	1d3c <__cmpdf2+0x74>
    1d2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1d30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1d34:	d1d6      	bne.n	1ce4 <__cmpdf2+0x1c>
    1d36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    1d3a:	d0d3      	beq.n	1ce4 <__cmpdf2+0x1c>
    1d3c:	f85d 0b04 	ldr.w	r0, [sp], #4
    1d40:	4770      	bx	lr
    1d42:	bf00      	nop

00001d44 <__aeabi_cdrcmple>:
    1d44:	4684      	mov	ip, r0
    1d46:	4610      	mov	r0, r2
    1d48:	4662      	mov	r2, ip
    1d4a:	468c      	mov	ip, r1
    1d4c:	4619      	mov	r1, r3
    1d4e:	4663      	mov	r3, ip
    1d50:	e000      	b.n	1d54 <__aeabi_cdcmpeq>
    1d52:	bf00      	nop

00001d54 <__aeabi_cdcmpeq>:
    1d54:	b501      	push	{r0, lr}
    1d56:	f7ff ffb7 	bl	1cc8 <__cmpdf2>
    1d5a:	2800      	cmp	r0, #0
    1d5c:	bf48      	it	mi
    1d5e:	f110 0f00 	cmnmi.w	r0, #0
    1d62:	bd01      	pop	{r0, pc}

00001d64 <__aeabi_dcmpeq>:
    1d64:	f84d ed08 	str.w	lr, [sp, #-8]!
    1d68:	f7ff fff4 	bl	1d54 <__aeabi_cdcmpeq>
    1d6c:	bf0c      	ite	eq
    1d6e:	2001      	moveq	r0, #1
    1d70:	2000      	movne	r0, #0
    1d72:	f85d fb08 	ldr.w	pc, [sp], #8
    1d76:	bf00      	nop

00001d78 <__aeabi_dcmplt>:
    1d78:	f84d ed08 	str.w	lr, [sp, #-8]!
    1d7c:	f7ff ffea 	bl	1d54 <__aeabi_cdcmpeq>
    1d80:	bf34      	ite	cc
    1d82:	2001      	movcc	r0, #1
    1d84:	2000      	movcs	r0, #0
    1d86:	f85d fb08 	ldr.w	pc, [sp], #8
    1d8a:	bf00      	nop

00001d8c <__aeabi_dcmple>:
    1d8c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1d90:	f7ff ffe0 	bl	1d54 <__aeabi_cdcmpeq>
    1d94:	bf94      	ite	ls
    1d96:	2001      	movls	r0, #1
    1d98:	2000      	movhi	r0, #0
    1d9a:	f85d fb08 	ldr.w	pc, [sp], #8
    1d9e:	bf00      	nop

00001da0 <__aeabi_dcmpge>:
    1da0:	f84d ed08 	str.w	lr, [sp, #-8]!
    1da4:	f7ff ffce 	bl	1d44 <__aeabi_cdrcmple>
    1da8:	bf94      	ite	ls
    1daa:	2001      	movls	r0, #1
    1dac:	2000      	movhi	r0, #0
    1dae:	f85d fb08 	ldr.w	pc, [sp], #8
    1db2:	bf00      	nop

00001db4 <__aeabi_dcmpgt>:
    1db4:	f84d ed08 	str.w	lr, [sp, #-8]!
    1db8:	f7ff ffc4 	bl	1d44 <__aeabi_cdrcmple>
    1dbc:	bf34      	ite	cc
    1dbe:	2001      	movcc	r0, #1
    1dc0:	2000      	movcs	r0, #0
    1dc2:	f85d fb08 	ldr.w	pc, [sp], #8
    1dc6:	bf00      	nop

00001dc8 <__aeabi_dcmpun>:
    1dc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1dcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1dd0:	d102      	bne.n	1dd8 <__aeabi_dcmpun+0x10>
    1dd2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    1dd6:	d10a      	bne.n	1dee <__aeabi_dcmpun+0x26>
    1dd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1ddc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1de0:	d102      	bne.n	1de8 <__aeabi_dcmpun+0x20>
    1de2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    1de6:	d102      	bne.n	1dee <__aeabi_dcmpun+0x26>
    1de8:	f04f 0000 	mov.w	r0, #0
    1dec:	4770      	bx	lr
    1dee:	f04f 0001 	mov.w	r0, #1
    1df2:	4770      	bx	lr

00001df4 <strcmp>:
    1df4:	f810 2b01 	ldrb.w	r2, [r0], #1
    1df8:	f811 3b01 	ldrb.w	r3, [r1], #1
    1dfc:	2a01      	cmp	r2, #1
    1dfe:	bf28      	it	cs
    1e00:	429a      	cmpcs	r2, r3
    1e02:	d0f7      	beq.n	1df4 <strcmp>
    1e04:	1ad0      	subs	r0, r2, r3
    1e06:	4770      	bx	lr

00001e08 <strlen>:
    1e08:	4603      	mov	r3, r0
    1e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
    1e0e:	2a00      	cmp	r2, #0
    1e10:	d1fb      	bne.n	1e0a <strlen+0x2>
    1e12:	1a18      	subs	r0, r3, r0
    1e14:	3801      	subs	r0, #1
    1e16:	4770      	bx	lr

00001e18 <doubleToSensorValue>:
static struct bt_mesh_prop_srv prop_srv_adm = BT_MESH_PROP_SRV_ADMIN_INIT(props, get, set);

/* -------------------- Sensor Server Stuff ---------------------------*/

void doubleToSensorValue(double d, struct sensor_value *val)
{
    1e18:	b5d0      	push	{r4, r6, r7, lr}
    1e1a:	4614      	mov	r4, r2
    1e1c:	460f      	mov	r7, r1
    1e1e:	4606      	mov	r6, r0
	val->val1 = (int)d;
    1e20:	f7ff fd3c 	bl	189c <__aeabi_d2iz>
    1e24:	6020      	str	r0, [r4, #0]
	val->val2 = (d - val->val1) * 1000000;
    1e26:	f7ff fabd 	bl	13a4 <__aeabi_i2d>
    1e2a:	4602      	mov	r2, r0
    1e2c:	460b      	mov	r3, r1
    1e2e:	4630      	mov	r0, r6
    1e30:	4639      	mov	r1, r7
    1e32:	f7ff f969 	bl	1108 <__aeabi_dsub>
    1e36:	a304      	add	r3, pc, #16	; (adr r3, 1e48 <doubleToSensorValue+0x30>)
    1e38:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e3c:	f7ff fb1c 	bl	1478 <__aeabi_dmul>
    1e40:	f7ff fd2c 	bl	189c <__aeabi_d2iz>
    1e44:	6060      	str	r0, [r4, #4]
}
    1e46:	bdd0      	pop	{r4, r6, r7, pc}
    1e48:	00000000 	.word	0x00000000
    1e4c:	412e8480 	.word	0x412e8480

00001e50 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    1e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e54:	4689      	mov	r9, r1
	uint32_t window_widening_event_us;
	uint32_t preamble_to_addr_us;

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
    1e56:	e9d0 710a 	ldrd	r7, r1, [r0, #40]	; 0x28
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    1e5a:	6b06      	ldr	r6, [r0, #48]	; 0x30
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
    1e5c:	4d16      	ldr	r5, [pc, #88]	; (1eb8 <ull_drift_ticks_get+0x68>)
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    1e5e:	198c      	adds	r4, r1, r6
	start_to_address_expected_us = EVENT_JITTER_US +
    1e60:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1e62:	42a7      	cmp	r7, r4
{
    1e64:	4690      	mov	r8, r2
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1e66:	a312      	add	r3, pc, #72	; (adr r3, 1eb0 <ull_drift_ticks_get+0x60>)
    1e68:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1e6c:	d815      	bhi.n	1e9a <ull_drift_ticks_get+0x4a>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1e6e:	fba1 0105 	umull	r0, r1, r1, r5
    1e72:	f7ff fd8b 	bl	198c <__aeabi_uldivmod>
    1e76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1e7a:	f8c9 0000 	str.w	r0, [r9]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1e7e:	1be0      	subs	r0, r4, r7
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1e80:	a30b      	add	r3, pc, #44	; (adr r3, 1eb0 <ull_drift_ticks_get+0x60>)
    1e82:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e86:	fba0 0105 	umull	r0, r1, r0, r5
    1e8a:	f7ff fd7f 	bl	198c <__aeabi_uldivmod>
    1e8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    1e92:	f8c8 0000 	str.w	r0, [r8]
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    1e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1e9a:	fba7 0105 	umull	r0, r1, r7, r5
    1e9e:	f7ff fd75 	bl	198c <__aeabi_uldivmod>
    1ea2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1ea6:	f8c9 0000 	str.w	r0, [r9]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1eaa:	f106 0030 	add.w	r0, r6, #48	; 0x30
    1eae:	e7e7      	b.n	1e80 <ull_drift_ticks_get+0x30>
    1eb0:	1afd498d 	.word	0x1afd498d
    1eb4:	00000007 	.word	0x00000007
    1eb8:	3b9aca00 	.word	0x3b9aca00
    1ebc:	00000000 	.word	0x00000000

00001ec0 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    1ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ec4:	b08d      	sub	sp, #52	; 0x34
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
    1ec6:	b930      	cbnz	r0, 1ed6 <ll_adv_enable+0x16>
		return disable(handle);
    1ec8:	f019 fe8a 	bl	1bbe0 <disable.constprop.6>
    1ecc:	4606      	mov	r6, r0
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
    1ece:	4630      	mov	r0, r6
    1ed0:	b00d      	add	sp, #52	; 0x34
    1ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    1ed6:	4bca      	ldr	r3, [pc, #808]	; (2200 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x200>)
    1ed8:	f893 604e 	ldrb.w	r6, [r3, #78]	; 0x4e
    1edc:	f016 0601 	ands.w	r6, r6, #1
    1ee0:	461d      	mov	r5, r3
    1ee2:	d001      	beq.n	1ee8 <ll_adv_enable+0x28>
	return BT_HCI_ERR_CMD_DISALLOWED;
    1ee4:	260c      	movs	r6, #12
    1ee6:	e7f2      	b.n	1ece <ll_adv_enable+0xe>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1ee8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
    1eec:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    1ef0:	6b17      	ldr	r7, [r2, #48]	; 0x30
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1ef2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
    1ef6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1efa:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
	if (pdu_adv_to_update) {
    1efe:	b147      	cbz	r7, 1f12 <ll_adv_enable+0x52>
	adv_addr = adva_update(adv, pdu);
    1f00:	4638      	mov	r0, r7
    1f02:	f02a fd2f 	bl	2c964 <adva_update.isra.4>
		if (pdu_adv_to_update->tx_addr &&
    1f06:	783b      	ldrb	r3, [r7, #0]
    1f08:	065a      	lsls	r2, r3, #25
    1f0a:	d417      	bmi.n	1f3c <ll_adv_enable+0x7c>
	adv_addr = adva_update(adv, pdu);
    1f0c:	4640      	mov	r0, r8
    1f0e:	f02a fd29 	bl	2c964 <adva_update.isra.4>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    1f12:	783b      	ldrb	r3, [r7, #0]
    1f14:	f013 0f0e 	tst.w	r3, #14
    1f18:	f040 8098 	bne.w	204c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4c>
		if (lll->conn) {
    1f1c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1f1e:	2b00      	cmp	r3, #0
    1f20:	d1e0      	bne.n	1ee4 <ll_adv_enable+0x24>
		link = ll_rx_link_alloc();
    1f22:	f019 f8c7 	bl	1b0b4 <ll_rx_link_alloc>
		if (!link) {
    1f26:	4681      	mov	r9, r0
    1f28:	b130      	cbz	r0, 1f38 <ll_adv_enable+0x78>
		node_rx = ll_rx_alloc();
    1f2a:	f019 f8cf 	bl	1b0cc <ll_rx_alloc>
		if (!node_rx) {
    1f2e:	4682      	mov	sl, r0
    1f30:	b958      	cbnz	r0, 1f4a <ll_adv_enable+0x8a>
			ll_rx_link_release(link);
    1f32:	4648      	mov	r0, r9
    1f34:	f019 f8c4 	bl	1b0c0 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1f38:	2607      	movs	r6, #7
    1f3a:	e7c8      	b.n	1ece <ll_adv_enable+0xe>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    1f3c:	2106      	movs	r1, #6
    1f3e:	f02a f9de 	bl	2c2fe <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    1f42:	2800      	cmp	r0, #0
    1f44:	d1e2      	bne.n	1f0c <ll_adv_enable+0x4c>
			return BT_HCI_ERR_INVALID_PARAM;
    1f46:	2612      	movs	r6, #18
    1f48:	e7c1      	b.n	1ece <ll_adv_enable+0xe>
		conn = ll_conn_acquire();
    1f4a:	f01a f8f1 	bl	1c130 <ll_conn_acquire>
		if (!conn) {
    1f4e:	4604      	mov	r4, r0
    1f50:	b918      	cbnz	r0, 1f5a <ll_adv_enable+0x9a>
			ll_rx_release(node_rx);
    1f52:	4650      	mov	r0, sl
    1f54:	f019 f8c0 	bl	1b0d8 <ll_rx_release>
    1f58:	e7eb      	b.n	1f32 <ll_adv_enable+0x72>
		conn_lll->handle = 0xFFFF;
    1f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1f5e:	8583      	strh	r3, [r0, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
    1f60:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
		conn_lll = &conn->lll;
    1f62:	f100 0b1c 	add.w	fp, r0, #28
		if (!conn_lll->link_tx_free) {
    1f66:	b913      	cbnz	r3, 1f6e <ll_adv_enable+0xae>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    1f68:	f100 0364 	add.w	r3, r0, #100	; 0x64
    1f6c:	66c3      	str	r3, [r0, #108]	; 0x6c
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    1f6e:	f104 0260 	add.w	r2, r4, #96	; 0x60
    1f72:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    1f76:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    1f78:	f02a f9cc 	bl	2c314 <memq_init>
		conn_lll->sn = 0;
    1f7c:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
		conn->llcp_terminate.node_rx.hdr.link = link;
    1f80:	f8c4 90cc 	str.w	r9, [r4, #204]	; 0xcc
		conn_lll->sn = 0;
    1f84:	f022 0207 	bic.w	r2, r2, #7
    1f88:	f884 2072 	strb.w	r2, [r4, #114]	; 0x72
		conn_lll->data_chan_sel = 0;
    1f8c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    1f90:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    1f94:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1f98:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		conn_lll->slave.latency_enabled = 0;
    1f9c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
		conn_lll->link_tx_free = NULL;
    1fa0:	2300      	movs	r3, #0
		conn_lll->slave.latency_enabled = 0;
    1fa2:	f363 0200 	bfi	r2, r3, #0, #1
    1fa6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
		conn->connect_expire = 6;
    1faa:	2206      	movs	r2, #6
    1fac:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
		conn->common.fex_valid = 0;
    1fb0:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
		conn_lll->link_tx_free = NULL;
    1fb4:	66e3      	str	r3, [r4, #108]	; 0x6c
		conn->common.fex_valid = 0;
    1fb6:	f022 0203 	bic.w	r2, r2, #3
    1fba:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
		conn->llcp_feature.features_conn = LL_FEAT;
    1fbe:	228e      	movs	r2, #142	; 0x8e
		conn->llcp_feature.features_peer = 0;
    1fc0:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1fc4:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		conn_lll->packet_tx_head_len = 0;
    1fc8:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1fcc:	f022 0203 	bic.w	r2, r2, #3
		conn_lll->data_chan_use = 0;
    1fd0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
    1fd4:	8663      	strh	r3, [r4, #50]	; 0x32
		conn_lll->latency_event = 0;
    1fd6:	6363      	str	r3, [r4, #52]	; 0x34
		conn_lll->slave.window_widening_event_us = 0;
    1fd8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		conn_lll->slave.window_size_prepare_us = 0;
    1fdc:	6563      	str	r3, [r4, #84]	; 0x54
		conn->supervision_expire = 0;
    1fde:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
		conn->procedure_expire = 0;
    1fe2:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1fe6:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    1fea:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
		conn->llcp_rx = NULL;
    1fee:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    1ff2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    1ff6:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    1ffa:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1ffe:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp_terminate.reason_peer = 0;
    2002:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
		conn->llcp_conn_param.req = 0;
    2006:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
		conn->llcp_conn_param.disabled = 0;
    200a:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
		lll->conn = conn_lll;
    200e:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
		adv->node_rx_cc_free = node_rx;
    2012:	e9c5 9a11 	strd	r9, sl, [r5, #68]	; 0x44
		conn->llcp_conn_param.disabled = 0;
    2016:	f363 1204 	bfi	r2, r3, #4, #1
    201a:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
    201e:	f894 2020 	ldrb.w	r2, [r4, #32]
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    2022:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    2026:	f363 0200 	bfi	r2, r3, #0, #1
		conn->tx_data = conn->tx_data_last = 0;
    202a:	e9c4 3348 	strd	r3, r3, [r4, #288]	; 0x120
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    202e:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    2032:	e9c4 3305 	strd	r3, r3, [r4, #20]
	hdr->parent = parent;
    2036:	61e4      	str	r4, [r4, #28]
	hdr->is_stop = 0U;
    2038:	f884 2020 	strb.w	r2, [r4, #32]
		err = lll_clock_wait();
    203c:	f01b fd8c 	bl	1db58 <lll_clock_wait>
		if (err) {
    2040:	b120      	cbz	r0, 204c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4c>
			conn_release(adv);
    2042:	486f      	ldr	r0, [pc, #444]	; (2200 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x200>)
    2044:	f019 fc12 	bl	1b86c <conn_release>
			return BT_HCI_ERR_HW_FAILURE;
    2048:	2603      	movs	r6, #3
    204a:	e740      	b.n	1ece <ll_adv_enable+0xe>
	uint8_t ch_map = lll->chan_map;
    204c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    2050:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    2052:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    2056:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
	uint8_t ch_map = lll->chan_map;
    205a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    205e:	f02a f985 	bl	2c36c <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    2062:	2800      	cmp	r0, #0
    2064:	f000 80bf 	beq.w	21e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e6>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    2068:	783a      	ldrb	r2, [r7, #0]
    206a:	f002 020f 	and.w	r2, r2, #15
    206e:	2a02      	cmp	r2, #2
    2070:	f100 34ff 	add.w	r4, r0, #4294967295
    2074:	d172      	bne.n	215c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x15c>
			adv_size += pdu_adv->len;
    2076:	787a      	ldrb	r2, [r7, #1]
    2078:	3210      	adds	r2, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    207a:	00d2      	lsls	r2, r2, #3
    207c:	4350      	muls	r0, r2
    207e:	f500 72aa 	add.w	r2, r0, #340	; 0x154
    2082:	2064      	movs	r0, #100	; 0x64
    2084:	fb00 2004 	mla	r0, r0, r4, r2
    2088:	f895 3020 	ldrb.w	r3, [r5, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    208c:	495d      	ldr	r1, [pc, #372]	; (2204 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x204>)
	hdr->parent = parent;
    208e:	61ed      	str	r5, [r5, #28]
    2090:	2400      	movs	r4, #0
	hdr->is_stop = 0U;
    2092:	f364 0300 	bfi	r3, r4, #0, #1
    2096:	f885 3020 	strb.w	r3, [r5, #32]
	adv->evt.ticks_xtal_to_start =
    209a:	2331      	movs	r3, #49	; 0x31
    209c:	602b      	str	r3, [r5, #0]
    209e:	e9c5 4405 	strd	r4, r4, [r5, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    20a2:	a355      	add	r3, pc, #340	; (adr r3, 21f8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f8>)
    20a4:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_active_to_start = 0;
    20a8:	606c      	str	r4, [r5, #4]
	adv->evt.ticks_preempt_to_start =
    20aa:	60ac      	str	r4, [r5, #8]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    20ac:	fba0 0101 	umull	r0, r1, r0, r1
    20b0:	f7ff fc6c 	bl	198c <__aeabi_uldivmod>
    20b4:	60e8      	str	r0, [r5, #12]
	uint16_t interval = adv->interval;
    20b6:	f8b5 804c 	ldrh.w	r8, [r5, #76]	; 0x4c
	ticks_anchor = ticker_ticks_now_get();
    20ba:	f02a fbbf 	bl	2c83c <ticker_ticks_now_get>
    20be:	4681      	mov	r9, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    20c0:	f1b8 0f00 	cmp.w	r8, #0
    20c4:	d105      	bne.n	20d2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd2>
    20c6:	783c      	ldrb	r4, [r7, #0]
    20c8:	f004 040f 	and.w	r4, r4, #15
    20cc:	1e63      	subs	r3, r4, #1
    20ce:	425c      	negs	r4, r3
    20d0:	415c      	adcs	r4, r3
    20d2:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    20d6:	68eb      	ldr	r3, [r5, #12]
    20d8:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2218 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x218>
    20dc:	f364 0200 	bfi	r2, r4, #0, #1
	if (lll->is_hdcd) {
    20e0:	f012 0401 	ands.w	r4, r2, #1
    20e4:	f04f 0a02 	mov.w	sl, #2
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    20e8:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
	if (lll->is_hdcd) {
    20ec:	af0b      	add	r7, sp, #44	; 0x2c
    20ee:	4a46      	ldr	r2, [pc, #280]	; (2208 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x208>)
		ret_cb = TICKER_STATUS_BUSY;
    20f0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	if (lll->is_hdcd) {
    20f4:	d053      	beq.n	219e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x19e>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    20f6:	2000      	movs	r0, #0
    20f8:	e9cd 2505 	strd	r2, r5, [sp, #20]
    20fc:	9304      	str	r3, [sp, #16]
    20fe:	e9cd 0300 	strd	r0, r3, [sp]
    2102:	2103      	movs	r1, #3
    2104:	e9cd b707 	strd	fp, r7, [sp, #28]
    2108:	e9cd 0002 	strd	r0, r0, [sp, #8]
    210c:	464b      	mov	r3, r9
    210e:	4652      	mov	r2, sl
    2110:	f02a fb61 	bl	2c7d6 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    2114:	4639      	mov	r1, r7
    2116:	f019 f86b 	bl	1b1f0 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    211a:	2800      	cmp	r0, #0
    211c:	d163      	bne.n	21e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e6>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    211e:	4a3b      	ldr	r2, [pc, #236]	; (220c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20c>)
    2120:	9506      	str	r5, [sp, #24]
    2122:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
    2126:	e9cd 0204 	strd	r0, r2, [sp, #16]
    212a:	9300      	str	r3, [sp, #0]
    212c:	e9cd b707 	strd	fp, r7, [sp, #28]
    2130:	e9cd 0002 	strd	r0, r0, [sp, #8]
    2134:	9001      	str	r0, [sp, #4]
    2136:	464b      	mov	r3, r9
    2138:	2201      	movs	r2, #1
    213a:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    213c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2140:	f02a fb49 	bl	2c7d6 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    2144:	4639      	mov	r1, r7
    2146:	f019 f853 	bl	1b1f0 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    214a:	2800      	cmp	r0, #0
    214c:	d14b      	bne.n	21e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e6>
	adv->is_enabled = 1;
    214e:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    2152:	f043 0301 	orr.w	r3, r3, #1
    2156:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
	return 0;
    215a:	e6b8      	b.n	1ece <ll_adv_enable+0xe>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    215c:	2a01      	cmp	r2, #1
    215e:	d016      	beq.n	218e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x18e>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    2160:	f898 3001 	ldrb.w	r3, [r8, #1]
    2164:	3310      	adds	r3, #16
		const uint16_t scan_rsp_us =
    2166:	00db      	lsls	r3, r3, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
    2168:	b95a      	cbnz	r2, 2182 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x182>
				adv_size += pdu_adv->len;
    216a:	787a      	ldrb	r2, [r7, #1]
    216c:	3210      	adds	r2, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
    216e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    2172:	00d2      	lsls	r2, r2, #3
    2174:	3398      	adds	r3, #152	; 0x98
    2176:	4413      	add	r3, r2
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    2178:	f502 729a 	add.w	r2, r2, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    217c:	fb04 3002 	mla	r0, r4, r2, r3
    2180:	e782      	b.n	2088 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x88>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
    2182:	2a06      	cmp	r2, #6
    2184:	d107      	bne.n	2196 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x196>
				adv_size += pdu_adv->len;
    2186:	7879      	ldrb	r1, [r7, #1]
    2188:	f101 0210 	add.w	r2, r1, #16
    218c:	e7ef      	b.n	216e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16e>
				adv_size += TARGETA_SIZE;
    218e:	2216      	movs	r2, #22
				slot_us += conn_ind_us;
    2190:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    2194:	e7ed      	b.n	2172 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x172>
		uint32_t adv_size		= PDU_OVERHEAD_SIZE(phy) +
    2196:	2210      	movs	r2, #16
	uint32_t slot_us = EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
    2198:	f44f 73aa 	mov.w	r3, #340	; 0x154
    219c:	e7e9      	b.n	2172 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x172>
		ll_adv_ticker_ext[handle].ticks_slot_window =
    219e:	491c      	ldr	r1, [pc, #112]	; (2210 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x210>)
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    21a0:	f203 1047 	addw	r0, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
    21a4:	6008      	str	r0, [r1, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    21a6:	481b      	ldr	r0, [pc, #108]	; (2214 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x214>)
		ret = ticker_start_ext(
    21a8:	e9cd 3204 	strd	r3, r2, [sp, #16]
    21ac:	e9cd 5b06 	strd	r5, fp, [sp, #24]
    21b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    21b4:	fa1f fb88 	uxth.w	fp, r8
		ret = ticker_start_ext(
    21b8:	e9cd 7108 	strd	r7, r1, [sp, #32]
    21bc:	e9cd 4302 	strd	r4, r3, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    21c0:	fbab 0100 	umull	r0, r1, fp, r0
    21c4:	2391      	movs	r3, #145	; 0x91
    21c6:	fb03 110b 	mla	r1, r3, fp, r1
    21ca:	a30b      	add	r3, pc, #44	; (adr r3, 21f8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f8>)
    21cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    21d0:	f7ff fbdc 	bl	198c <__aeabi_uldivmod>
		ret = ticker_start_ext(
    21d4:	464b      	mov	r3, r9
    21d6:	e9cd 4000 	strd	r4, r0, [sp]
    21da:	4652      	mov	r2, sl
    21dc:	2103      	movs	r1, #3
    21de:	4620      	mov	r0, r4
    21e0:	f017 fb46 	bl	19870 <ticker_start_ext>
    21e4:	e7ae      	b.n	2144 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x144>
	if (adv->lll.conn) {
    21e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    21e8:	2b00      	cmp	r3, #0
    21ea:	f43f ae7b 	beq.w	1ee4 <ll_adv_enable+0x24>
		conn_release(adv);
    21ee:	4804      	ldr	r0, [pc, #16]	; (2200 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x200>)
    21f0:	f019 fb3c 	bl	1b86c <conn_release>
    21f4:	e676      	b.n	1ee4 <ll_adv_enable+0x24>
    21f6:	bf00      	nop
    21f8:	1afd498d 	.word	0x1afd498d
    21fc:	00000007 	.word	0x00000007
    2200:	200049e8 	.word	0x200049e8
    2204:	3b9aca00 	.word	0x3b9aca00
    2208:	0001b77d 	.word	0x0001b77d
    220c:	0001ba39 	.word	0x0001ba39
    2210:	20004a38 	.word	0x20004a38
    2214:	84e72a00 	.word	0x84e72a00
    2218:	0001ab19 	.word	0x0001ab19
    221c:	00000000 	.word	0x00000000

00002220 <ull_scan_enable>:
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
						   SCAN_INT_UNIT_US);
}

uint8_t ull_scan_enable(struct ll_scan_set *scan)
{
    2220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t volatile ret_cb;
	uint32_t ticks_interval;
	uint32_t ticks_anchor;
	uint32_t ret;

	lll->chan = 0;
    2224:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	ll_addr_get(lll->init_addr_type, lll->init_addr);

	ull_hdr_init(&scan->ull);
	lll_hdr_init(lll, scan);

	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    2228:	4f41      	ldr	r7, [pc, #260]	; (2330 <ull_scan_enable+0x110>)
{
    222a:	4604      	mov	r4, r0
	lll->init_addr_type = scan->own_addr_type;
    222c:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
    2230:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    2234:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2238:	f360 1386 	bfi	r3, r0, #6, #1
{
    223c:	b08d      	sub	sp, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
    223e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    2242:	f104 0125 	add.w	r1, r4, #37	; 0x25
    2246:	f017 fbe3 	bl	19a10 <ll_addr_get>
    224a:	f894 3020 	ldrb.w	r3, [r4, #32]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    224e:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
	hdr->parent = parent;
    2252:	61e4      	str	r4, [r4, #28]
    2254:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
    2256:	f365 0300 	bfi	r3, r5, #0, #1
    225a:	fba8 0107 	umull	r0, r1, r8, r7
    225e:	f884 3020 	strb.w	r3, [r4, #32]
    2262:	2391      	movs	r3, #145	; 0x91
    2264:	fb03 1108 	mla	r1, r3, r8, r1
    2268:	e9c4 5505 	strd	r5, r5, [r4, #20]
    226c:	a32e      	add	r3, pc, #184	; (adr r3, 2328 <ull_scan_enable+0x108>)
    226e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2272:	f7ff fb8b 	bl	198c <__aeabi_uldivmod>
						SCAN_INT_UNIT_US);

	/* TODO: active_to_start feature port */
	scan->evt.ticks_active_to_start = 0U;
	scan->evt.ticks_xtal_to_start =
    2276:	2331      	movs	r3, #49	; 0x31
    2278:	6023      	str	r3, [r4, #0]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	scan->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	if ((lll->ticks_window +
    227a:	6b63      	ldr	r3, [r4, #52]	; 0x34
	scan->evt.ticks_active_to_start = 0U;
    227c:	6065      	str	r5, [r4, #4]
	if ((lll->ticks_window +
    227e:	3309      	adds	r3, #9
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) <
	    (ticks_interval -
    2280:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    2284:	4293      	cmp	r3, r2
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US))) {
		scan->evt.ticks_slot =
    2286:	bf32      	itee	cc
    2288:	60e3      	strcc	r3, [r4, #12]
			(lll->ticks_window +
			 HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US));
	} else {
		if (IS_ENABLED(CONFIG_BT_CTLR_SCAN_UNRESERVED)) {
			scan->evt.ticks_slot = 0U;
    228a:	60e5      	strcs	r5, [r4, #12]
		} else {
			scan->evt.ticks_slot = ticks_interval -
				HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
		}

		lll->ticks_window = 0U;
    228c:	6365      	strcs	r5, [r4, #52]	; 0x34
	scan->evt.ticks_preempt_to_start =
    228e:	60a5      	str	r5, [r4, #8]
	return &ll_scan[handle];
}

uint8_t ull_scan_handle_get(struct ll_scan_set *scan)
{
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    2290:	4d28      	ldr	r5, [pc, #160]	; (2334 <ull_scan_enable+0x114>)
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    2292:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    2294:	f02a fad2 	bl	2c83c <ticker_ticks_now_get>
	ret_cb = TICKER_STATUS_BUSY;
    2298:	2302      	movs	r3, #2
    229a:	930b      	str	r3, [sp, #44]	; 0x2c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    229c:	1b65      	subs	r5, r4, r5
    229e:	233c      	movs	r3, #60	; 0x3c
    22a0:	fbb5 f5f3 	udiv	r5, r5, r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22a4:	4b24      	ldr	r3, [pc, #144]	; (2338 <ull_scan_enable+0x118>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    22a6:	f8b4 b032 	ldrh.w	fp, [r4, #50]	; 0x32
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22aa:	e9cd 4306 	strd	r4, r3, [sp, #24]
    22ae:	4b23      	ldr	r3, [pc, #140]	; (233c <ull_scan_enable+0x11c>)
    22b0:	9305      	str	r3, [sp, #20]
    22b2:	46ba      	mov	sl, r7
    22b4:	68e3      	ldr	r3, [r4, #12]
    22b6:	9304      	str	r3, [sp, #16]
	ticks_anchor = ticker_ticks_now_get();
    22b8:	4607      	mov	r7, r0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    22ba:	2391      	movs	r3, #145	; 0x91
    22bc:	fbab 010a 	umull	r0, r1, fp, sl
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22c0:	f04f 0800 	mov.w	r8, #0
    22c4:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    22c8:	fb03 110b 	mla	r1, r3, fp, r1
    22cc:	a316      	add	r3, pc, #88	; (adr r3, 2328 <ull_scan_enable+0x108>)
    22ce:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22d2:	f8cd 9020 	str.w	r9, [sp, #32]
    22d6:	f8cd 800c 	str.w	r8, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    22da:	f7ff fb57 	bl	198c <__aeabi_uldivmod>
    22de:	4610      	mov	r0, r2
    22e0:	4619      	mov	r1, r3
    22e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    22e6:	2300      	movs	r3, #0
    22e8:	f7ff fb50 	bl	198c <__aeabi_uldivmod>
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
    22ec:	3504      	adds	r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22ee:	b2ed      	uxtb	r5, r5
    22f0:	e9cd 6001 	strd	r6, r0, [sp, #4]
    22f4:	2103      	movs	r1, #3
    22f6:	f8cd 8000 	str.w	r8, [sp]
    22fa:	463b      	mov	r3, r7
    22fc:	462a      	mov	r2, r5
    22fe:	4640      	mov	r0, r8
    2300:	f02a fa69 	bl	2c7d6 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    2304:	4649      	mov	r1, r9
    2306:	f018 ff73 	bl	1b1f0 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    230a:	b940      	cbnz	r0, 231e <ull_scan_enable+0xfe>
	scan->is_enabled = 1U;
    230c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    2310:	f043 0301 	orr.w	r3, r3, #1
    2314:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
    2318:	b00d      	add	sp, #52	; 0x34
    231a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    231e:	200c      	movs	r0, #12
    2320:	e7fa      	b.n	2318 <ull_scan_enable+0xf8>
    2322:	bf00      	nop
    2324:	f3af 8000 	nop.w
    2328:	1afd498d 	.word	0x1afd498d
    232c:	00000007 	.word	0x00000007
    2330:	84e72a00 	.word	0x84e72a00
    2334:	20004a5c 	.word	0x20004a5c
    2338:	0001ab19 	.word	0x0001ab19
    233c:	0001bdd5 	.word	0x0001bdd5

00002340 <ll_scan_params_set>:
{
    2340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2342:	4606      	mov	r6, r0
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    2344:	2000      	movs	r0, #0
{
    2346:	4615      	mov	r5, r2
    2348:	461f      	mov	r7, r3
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    234a:	f019 fdb1 	bl	1beb0 <ull_scan_is_disabled_get>
	if (!scan) {
    234e:	4604      	mov	r4, r0
    2350:	b1f8      	cbz	r0, 2392 <ll_scan_params_set+0x52>
	scan->own_addr_type = own_addr_type;
    2352:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
	lll->type = type;
    2356:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	lll->interval = interval;
    235a:	8641      	strh	r1, [r0, #50]	; 0x32
	scan->own_addr_type = own_addr_type;
    235c:	f367 0242 	bfi	r2, r7, #1, #2
    2360:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	lll->filter_policy = filter_policy;
    2364:	f89d 2018 	ldrb.w	r2, [sp, #24]
	lll->type = type;
    2368:	f366 13c7 	bfi	r3, r6, #7, #1
	lll->filter_policy = filter_policy;
    236c:	f362 03c4 	bfi	r3, r2, #3, #2
    2370:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    2374:	480a      	ldr	r0, [pc, #40]	; (23a0 <ll_scan_params_set+0x60>)
    2376:	b2ad      	uxth	r5, r5
    2378:	fba5 0100 	umull	r0, r1, r5, r0
    237c:	2391      	movs	r3, #145	; 0x91
    237e:	fb03 1105 	mla	r1, r3, r5, r1
    2382:	a305      	add	r3, pc, #20	; (adr r3, 2398 <ll_scan_params_set+0x58>)
    2384:	e9d3 2300 	ldrd	r2, r3, [r3]
    2388:	f7ff fb00 	bl	198c <__aeabi_uldivmod>
    238c:	6360      	str	r0, [r4, #52]	; 0x34
	return 0;
    238e:	2000      	movs	r0, #0
}
    2390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    2392:	200c      	movs	r0, #12
    2394:	e7fc      	b.n	2390 <ll_scan_params_set+0x50>
    2396:	bf00      	nop
    2398:	1afd498d 	.word	0x1afd498d
    239c:	00000007 	.word	0x00000007
    23a0:	84e72a00 	.word	0x84e72a00
    23a4:	00000000 	.word	0x00000000

000023a8 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    23a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23ac:	4693      	mov	fp, r2
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    23ae:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    23b2:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    23b6:	4293      	cmp	r3, r2
{
    23b8:	b08d      	sub	sp, #52	; 0x34
    23ba:	4604      	mov	r4, r0
    23bc:	4688      	mov	r8, r1
	if ((conn->llcp_ack == conn->llcp_req) &&
    23be:	d10b      	bne.n	23d8 <ull_conn_llcp+0x30>
#endif /* !CONFIG_BT_CTLR_LE_ENC */

		/* TODO: Optimize the checks below, maybe have common flag */

		/* check if connection update procedure is requested */
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    23c0:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    23c4:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    23c8:	4291      	cmp	r1, r2
    23ca:	d024      	beq.n	2416 <ull_conn_llcp+0x6e>
			/* switch to LLCP_CONN_UPD state machine */
			conn->llcp_type = LLCP_CONN_UPD;
    23cc:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
    23ce:	3b02      	subs	r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
    23d0:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
			conn->llcp_ack -= 2U;
    23d4:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    23d8:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    23dc:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    23e0:	1ad3      	subs	r3, r2, r3
    23e2:	f003 0303 	and.w	r3, r3, #3
    23e6:	2b02      	cmp	r3, #2
    23e8:	f040 825d 	bne.w	28a6 <ull_conn_llcp+0x4fe>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Process procedures with instants or encryption setup */
		/* FIXME: Make LE Ping cacheable */
		switch (conn->llcp_type) {
    23ec:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    23f0:	2b01      	cmp	r3, #1
    23f2:	f000 8206 	beq.w	2802 <ull_conn_llcp+0x45a>
    23f6:	2b02      	cmp	r3, #2
    23f8:	f000 8410 	beq.w	2c1c <ull_conn_llcp+0x874>
		}
		break;
#endif /* CONFIG_BT_CTLR_PHY */

		default:
			LL_ASSERT(0);
    23fc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
    2400:	49c6      	ldr	r1, [pc, #792]	; (271c <ull_conn_llcp+0x374>)
    2402:	48c7      	ldr	r0, [pc, #796]	; (2720 <ull_conn_llcp+0x378>)
    2404:	f025 fa65 	bl	278d2 <printk>
    2408:	4040      	eors	r0, r0
    240a:	f380 8811 	msr	BASEPRI, r0
    240e:	f04f 0003 	mov.w	r0, #3
    2412:	df02      	svc	2
			break;
    2414:	e247      	b.n	28a6 <ull_conn_llcp+0x4fe>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    2416:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
    241a:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    241e:	428b      	cmp	r3, r1
    2420:	d05c      	beq.n	24dc <ull_conn_llcp+0x134>
static inline void event_fex_prep(struct ll_conn *conn)
{
	struct node_tx *tx;

	/* If waiting for response, do nothing */
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    2422:	1a5b      	subs	r3, r3, r1
    2424:	07de      	lsls	r6, r3, #31
    2426:	d5d7      	bpl.n	23d8 <ull_conn_llcp+0x30>
		return;
	}

	if (conn->common.fex_valid) {
    2428:	f890 5080 	ldrb.w	r5, [r0, #128]	; 0x80
    242c:	f015 0501 	ands.w	r5, r5, #1
    2430:	d027      	beq.n	2482 <ull_conn_llcp+0xda>
		struct node_rx_pdu *rx;
		struct pdu_data *pdu;

		/* get a rx node for ULL->LL */
		rx = ll_pdu_rx_alloc();
    2432:	f018 fe7f 	bl	1b134 <ll_pdu_rx_alloc>
		if (!rx) {
    2436:	4601      	mov	r1, r0
    2438:	2800      	cmp	r0, #0
    243a:	d0cd      	beq.n	23d8 <ull_conn_llcp+0x30>
			return;
		}

		/* procedure request acked */
		conn->llcp_feature.ack = conn->llcp_feature.req;
    243c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
    2440:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5

		/* prepare feature rsp structure */
		rx->hdr.handle = conn->lll.handle;
    2444:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2446:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2448:	2303      	movs	r3, #3
    244a:	7103      	strb	r3, [r0, #4]
		pdu = (void *)rx->pdu;
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    244c:	7f03      	ldrb	r3, [r0, #28]
    244e:	f043 0303 	orr.w	r3, r3, #3
    2452:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    2454:	2309      	movs	r3, #9
    2456:	7743      	strb	r3, [r0, #29]
			   sizeof(struct pdu_data_llctrl_feature_rsp);
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    2458:	77c3      	strb	r3, [r0, #31]

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    245a:	2300      	movs	r3, #0
    245c:	6203      	str	r3, [r0, #32]
    245e:	6243      	str	r3, [r0, #36]	; 0x24
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
			sizeof(pdu->llctrl.feature_rsp.features));
		sys_put_le24(conn->llcp_feature.features_peer,
    2460:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2464:	f880 3020 	strb.w	r3, [r0, #32]
	dst[1] = val >> 8;
    2468:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le24(uint32_t val, uint8_t dst[3])
{
	sys_put_le16(val, dst);
	dst[2] = val >> 16;
    246c:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    246e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
	dst[2] = val >> 16;
    2472:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
			sys_cpu_to_le16(conn->llcp_version.company_id);
		pdu->llctrl.version_ind.sub_version_number =
			sys_cpu_to_le16(conn->llcp_version.sub_version_number);

		/* enqueue version ind structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
    2476:	6808      	ldr	r0, [r1, #0]
    2478:	f018 fe34 	bl	1b0e4 <ll_rx_put>
		ll_rx_sched();
    247c:	f018 fe3c 	bl	1b0f8 <ll_rx_sched>
    2480:	e7aa      	b.n	23d8 <ull_conn_llcp+0x30>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2482:	48a8      	ldr	r0, [pc, #672]	; (2724 <ull_conn_llcp+0x37c>)
    2484:	f029 ff02 	bl	2c28c <mem_acquire>
	if (tx) {
    2488:	4601      	mov	r1, r0
    248a:	2800      	cmp	r0, #0
    248c:	d0a4      	beq.n	23d8 <ull_conn_llcp+0x30>
		conn->llcp_feature.ack--;
    248e:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
    2492:	3b01      	subs	r3, #1
    2494:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
		conn->llcp_feature.features_conn = LL_FEAT;
    2498:	238e      	movs	r3, #142	; 0x8e
    249a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    249e:	7903      	ldrb	r3, [r0, #4]
    24a0:	f043 0303 	orr.w	r3, r3, #3
    24a4:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    24a6:	2309      	movs	r3, #9
    24a8:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    24aa:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    24ae:	6085      	str	r5, [r0, #8]
    24b0:	2b00      	cmp	r3, #0
    24b2:	bfac      	ite	ge
    24b4:	2308      	movge	r3, #8
    24b6:	230e      	movlt	r3, #14
    24b8:	60c5      	str	r5, [r0, #12]
    24ba:	71c3      	strb	r3, [r0, #7]
		sys_put_le24(conn->llcp_feature.features_conn,
    24bc:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	dst[0] = val;
    24c0:	7203      	strb	r3, [r0, #8]
	dst[1] = val >> 8;
    24c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    24c6:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    24c8:	7242      	strb	r2, [r0, #9]
	dst[2] = val >> 16;
    24ca:	7283      	strb	r3, [r0, #10]
			ctrl_tx_enqueue(conn, tx);
    24cc:	4620      	mov	r0, r4
    24ce:	f02a fb3a 	bl	2cb46 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    24d2:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    24d6:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    24da:	e77d      	b.n	23d8 <ull_conn_llcp+0x30>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    24dc:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    24e0:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    24e4:	428b      	cmp	r3, r1
    24e6:	d05e      	beq.n	25a6 <ull_conn_llcp+0x1fe>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    24e8:	1a5b      	subs	r3, r3, r1
    24ea:	07dd      	lsls	r5, r3, #31
    24ec:	f57f af74 	bpl.w	23d8 <ull_conn_llcp+0x30>
	if (conn->llcp_version.tx == 0U) {
    24f0:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    24f4:	f013 0501 	ands.w	r5, r3, #1
    24f8:	d123      	bne.n	2542 <ull_conn_llcp+0x19a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    24fa:	488a      	ldr	r0, [pc, #552]	; (2724 <ull_conn_llcp+0x37c>)
    24fc:	f029 fec6 	bl	2c28c <mem_acquire>
		if (tx) {
    2500:	4601      	mov	r1, r0
    2502:	2800      	cmp	r0, #0
    2504:	f43f af68 	beq.w	23d8 <ull_conn_llcp+0x30>
			conn->llcp_version.ack--;
    2508:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
    250c:	3b01      	subs	r3, #1
    250e:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
			conn->llcp_version.tx = 1U;
    2512:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    2516:	f043 0301 	orr.w	r3, r3, #1
    251a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    251e:	7903      	ldrb	r3, [r0, #4]
			pdu->llctrl.version_ind.company_id = cid;
    2520:	7285      	strb	r5, [r0, #10]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2522:	f043 0303 	orr.w	r3, r3, #3
    2526:	7103      	strb	r3, [r0, #4]
			pdu->len =
    2528:	2306      	movs	r3, #6
    252a:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    252c:	230c      	movs	r3, #12
    252e:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    2530:	230b      	movs	r3, #11
    2532:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    2534:	2359      	movs	r3, #89	; 0x59
    2536:	7243      	strb	r3, [r0, #9]
			pdu->llctrl.version_ind.sub_version_number = svn;
    2538:	f04f 33ff 	mov.w	r3, #4294967295
    253c:	72c3      	strb	r3, [r0, #11]
    253e:	7303      	strb	r3, [r0, #12]
    2540:	e7c4      	b.n	24cc <ull_conn_llcp+0x124>
	} else if (conn->llcp_version.rx) {
    2542:	0798      	lsls	r0, r3, #30
    2544:	d522      	bpl.n	258c <ull_conn_llcp+0x1e4>
		rx = ll_pdu_rx_alloc();
    2546:	f018 fdf5 	bl	1b134 <ll_pdu_rx_alloc>
		if (!rx) {
    254a:	4601      	mov	r1, r0
    254c:	2800      	cmp	r0, #0
    254e:	f43f af43 	beq.w	23d8 <ull_conn_llcp+0x30>
		conn->llcp_version.ack = conn->llcp_version.req;
    2552:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    2556:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		rx->hdr.handle = conn->lll.handle;
    255a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    255c:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    255e:	2303      	movs	r3, #3
    2560:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2562:	7f03      	ldrb	r3, [r0, #28]
    2564:	f043 0303 	orr.w	r3, r3, #3
    2568:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    256a:	2306      	movs	r3, #6
    256c:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    256e:	230c      	movs	r3, #12
    2570:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    2572:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    2576:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    257a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    257e:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    2582:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    2586:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
    258a:	e774      	b.n	2476 <ull_conn_llcp+0xce>
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
    258c:	f640 327a 	movw	r2, #2938	; 0xb7a
	case LLCP_CPR_STATE_UPD:
		/* Do nothing */
		break;

	default:
		LL_ASSERT(0);
    2590:	4962      	ldr	r1, [pc, #392]	; (271c <ull_conn_llcp+0x374>)
    2592:	4863      	ldr	r0, [pc, #396]	; (2720 <ull_conn_llcp+0x378>)
    2594:	f025 f99d 	bl	278d2 <printk>
    2598:	4040      	eors	r0, r0
    259a:	f380 8811 	msr	BASEPRI, r0
    259e:	f04f 0003 	mov.w	r0, #3
    25a2:	df02      	svc	2
		break;
    25a4:	e718      	b.n	23d8 <ull_conn_llcp+0x30>
		} else if (conn->llcp_conn_param.ack !=
    25a6:	f890 10ed 	ldrb.w	r1, [r0, #237]	; 0xed
    25aa:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
    25ae:	4299      	cmp	r1, r3
    25b0:	f43f af12 	beq.w	23d8 <ull_conn_llcp+0x30>
	conn_upd = conn_upd_curr;
    25b4:	4d5c      	ldr	r5, [pc, #368]	; (2728 <ull_conn_llcp+0x380>)
    25b6:	682b      	ldr	r3, [r5, #0]
	if (conn_upd && (conn_upd != conn)) {
    25b8:	b113      	cbz	r3, 25c0 <ull_conn_llcp+0x218>
    25ba:	4298      	cmp	r0, r3
    25bc:	f47f af0c 	bne.w	23d8 <ull_conn_llcp+0x30>
	switch (conn->llcp_conn_param.state) {
    25c0:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
    25c4:	f003 0307 	and.w	r3, r3, #7
    25c8:	2b05      	cmp	r3, #5
    25ca:	f200 8117 	bhi.w	27fc <ull_conn_llcp+0x454>
    25ce:	a101      	add	r1, pc, #4	; (adr r1, 25d4 <ull_conn_llcp+0x22c>)
    25d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    25d4:	000025ed 	.word	0x000025ed
    25d8:	00002667 	.word	0x00002667
    25dc:	000027b3 	.word	0x000027b3
    25e0:	000023d9 	.word	0x000023d9
    25e4:	000023d9 	.word	0x000023d9
    25e8:	000023d9 	.word	0x000023d9
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    25ec:	484d      	ldr	r0, [pc, #308]	; (2724 <ull_conn_llcp+0x37c>)
			event_counter = lll->event_counter +
    25ee:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    25f0:	8e67      	ldrh	r7, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    25f2:	f029 fe4b 	bl	2c28c <mem_acquire>
	if (!tx) {
    25f6:	4601      	mov	r1, r0
    25f8:	2800      	cmp	r0, #0
    25fa:	f43f aeed 	beq.w	23d8 <ull_conn_llcp+0x30>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    25fe:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
    2602:	2204      	movs	r2, #4
    2604:	f362 0302 	bfi	r3, r2, #0, #3
    2608:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    260c:	7903      	ldrb	r3, [r0, #4]
    260e:	f043 0303 	orr.w	r3, r3, #3
    2612:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2614:	2318      	movs	r3, #24
    2616:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2618:	230f      	movs	r3, #15
    261a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    261c:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    2620:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2622:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    2626:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2628:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    262c:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    262e:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    2632:	81c3      	strh	r3, [r0, #14]
			event_counter = lll->event_counter +
    2634:	443e      	add	r6, r7
	p->preferred_periodicity = 0U;
    2636:	2300      	movs	r3, #0
    2638:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    263a:	74c3      	strb	r3, [r0, #19]
    263c:	7503      	strb	r3, [r0, #20]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    263e:	445e      	add	r6, fp
	p->offset1 = sys_cpu_to_le16(0xffff);
    2640:	f04f 33ff 	mov.w	r3, #4294967295
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    2644:	f8a0 6011 	strh.w	r6, [r0, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
    2648:	7543      	strb	r3, [r0, #21]
    264a:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    264c:	75c3      	strb	r3, [r0, #23]
    264e:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    2650:	7643      	strb	r3, [r0, #25]
    2652:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    2654:	76c3      	strb	r3, [r0, #27]
    2656:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    2658:	7743      	strb	r3, [r0, #29]
    265a:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, tx);
    265c:	4620      	mov	r0, r4
    265e:	f02a fa72 	bl	2cb46 <ctrl_tx_enqueue>
	conn_upd_curr = conn;
    2662:	602c      	str	r4, [r5, #0]
	conn->procedure_expire = conn->procedure_reload;
    2664:	e735      	b.n	24d2 <ull_conn_llcp+0x12a>
	if (conn->llcp_conn_param.status) {
    2666:	f894 60ef 	ldrb.w	r6, [r4, #239]	; 0xef
    266a:	b1ee      	cbz	r6, 26a8 <ull_conn_llcp+0x300>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    266c:	482d      	ldr	r0, [pc, #180]	; (2724 <ull_conn_llcp+0x37c>)
    266e:	f029 fe0d 	bl	2c28c <mem_acquire>
		if (!tx) {
    2672:	4601      	mov	r1, r0
    2674:	2800      	cmp	r0, #0
    2676:	f43f aeaf 	beq.w	23d8 <ull_conn_llcp+0x30>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    267a:	7903      	ldrb	r3, [r0, #4]
    267c:	f043 0303 	orr.w	r3, r3, #3
    2680:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2682:	2311      	movs	r3, #17
    2684:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2686:	2303      	movs	r3, #3
    2688:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    268a:	230f      	movs	r3, #15
    268c:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    268e:	f894 30ef 	ldrb.w	r3, [r4, #239]	; 0xef
    2692:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, tx);
    2694:	4620      	mov	r0, r4
    2696:	f02a fa56 	bl	2cb46 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    269a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    269e:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn_upd_curr = NULL;
    26a2:	2300      	movs	r3, #0
    26a4:	602b      	str	r3, [r5, #0]
		return;
    26a6:	e697      	b.n	23d8 <ull_conn_llcp+0x30>
	if (!conn->lll.role) {
    26a8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    26ac:	2b00      	cmp	r3, #0
    26ae:	db3d      	blt.n	272c <ull_conn_llcp+0x384>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    26b0:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
		conn->llcp_cu.win_offset_us = 0U;
    26b4:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    26b8:	2105      	movs	r1, #5
    26ba:	f361 0302 	bfi	r3, r1, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    26be:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    26c2:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
		conn->llcp_cu.win_size = 1U;
    26c6:	2301      	movs	r3, #1
    26c8:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		if (conn->llcp_conn_param.preferred_periodicity) {
    26cc:	b311      	cbz	r1, 2714 <ull_conn_llcp+0x36c>
				((conn->llcp_conn_param.interval_min /
    26ce:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    26d2:	fbb3 f3f1 	udiv	r3, r3, r1
				  conn->llcp_conn_param.preferred_periodicity) +
    26d6:	3301      	adds	r3, #1
			conn->llcp_cu.interval =
    26d8:	fb13 f301 	smulbb	r3, r3, r1
    26dc:	b29b      	uxth	r3, r3
    26de:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    26e2:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    26e6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    26ea:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    26ee:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    26f2:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
    26f6:	2102      	movs	r1, #2
    26f8:	f361 0301 	bfi	r3, r1, #0, #2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    26fc:	f894 10ee 	ldrb.w	r1, [r4, #238]	; 0xee
    2700:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    2704:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_cu.ack--;
    2708:	3a01      	subs	r2, #1
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    270a:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.ack--;
    270e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
		return;
    2712:	e661      	b.n	23d8 <ull_conn_llcp+0x30>
				conn->llcp_conn_param.interval_max;
    2714:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    2718:	e7e1      	b.n	26de <ull_conn_llcp+0x336>
    271a:	bf00      	nop
    271c:	00035ed5 	.word	0x00035ed5
    2720:	0003067f 	.word	0x0003067f
    2724:	20004eb4 	.word	0x20004eb4
    2728:	20004e30 	.word	0x20004e30
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    272c:	4863      	ldr	r0, [pc, #396]	; (28bc <ull_conn_llcp+0x514>)
    272e:	f029 fdad 	bl	2c28c <mem_acquire>
	if (!tx) {
    2732:	4601      	mov	r1, r0
    2734:	2800      	cmp	r0, #0
    2736:	f43f ae4f 	beq.w	23d8 <ull_conn_llcp+0x30>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    273a:	7903      	ldrb	r3, [r0, #4]
    273c:	f043 0303 	orr.w	r3, r3, #3
    2740:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2742:	2318      	movs	r3, #24
    2744:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2746:	2310      	movs	r3, #16
    2748:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min =
    274a:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    274e:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
    2750:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    2754:	8143      	strh	r3, [r0, #10]
	rsp->latency =
    2756:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    275a:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
    275c:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    2760:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    2762:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    2766:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    2768:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
    276c:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2770:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
    2774:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2778:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
    277c:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2780:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
    2784:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2788:	f8b4 3102 	ldrh.w	r3, [r4, #258]	; 0x102
    278c:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2790:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
    2794:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    2798:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
    279c:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, tx);
    27a0:	4620      	mov	r0, r4
    27a2:	f02a f9d0 	bl	2cb46 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    27a6:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    27aa:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn_upd_curr = NULL;
    27ae:	602e      	str	r6, [r5, #0]
    27b0:	e612      	b.n	23d8 <ull_conn_llcp+0x30>
	rx = ll_pdu_rx_alloc();
    27b2:	f018 fcbf 	bl	1b134 <ll_pdu_rx_alloc>
	if (!rx) {
    27b6:	4601      	mov	r1, r0
    27b8:	2800      	cmp	r0, #0
    27ba:	f43f ae0d 	beq.w	23d8 <ull_conn_llcp+0x30>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    27be:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
    27c2:	2303      	movs	r3, #3
    27c4:	f363 0202 	bfi	r2, r3, #0, #3
    27c8:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
	rx->hdr.handle = conn->lll.handle;
    27cc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    27ce:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    27d0:	7f03      	ldrb	r3, [r0, #28]
	rx->hdr.handle = conn->lll.handle;
    27d2:	80c2      	strh	r2, [r0, #6]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    27d4:	f043 0303 	orr.w	r3, r3, #3
    27d8:	7703      	strb	r3, [r0, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    27da:	2318      	movs	r3, #24
    27dc:	7743      	strb	r3, [r0, #29]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    27de:	230f      	movs	r3, #15
    27e0:	77c3      	strb	r3, [r0, #31]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    27e2:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    27e6:	8403      	strh	r3, [r0, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    27e8:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    27ec:	8443      	strh	r3, [r0, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    27ee:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    27f2:	8483      	strh	r3, [r0, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    27f4:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    27f8:	84c3      	strh	r3, [r0, #38]	; 0x26
	ll_rx_put(rx->hdr.link, rx);
    27fa:	e63c      	b.n	2476 <ull_conn_llcp+0xce>
		LL_ASSERT(0);
    27fc:	f640 4287 	movw	r2, #3207	; 0xc87
    2800:	e6c6      	b.n	2590 <ull_conn_llcp+0x1e8>
	conn_upd = conn_upd_curr;
    2802:	4b2f      	ldr	r3, [pc, #188]	; (28c0 <ull_conn_llcp+0x518>)
	if (!conn_upd) {
    2804:	6819      	ldr	r1, [r3, #0]
    2806:	b901      	cbnz	r1, 280a <ull_conn_llcp+0x462>
		conn_upd_curr = conn;
    2808:	601c      	str	r4, [r3, #0]
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    280a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    280c:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
    280e:	440e      	add	r6, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    2810:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    2814:	445e      	add	r6, fp
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    2816:	f011 0003 	ands.w	r0, r1, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    281a:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    281c:	d052      	beq.n	28c4 <ull_conn_llcp+0x51c>
		rx = ll_pdu_rx_alloc_peek(1);
    281e:	2001      	movs	r0, #1
    2820:	f018 fc70 	bl	1b104 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    2824:	4607      	mov	r7, r0
    2826:	2800      	cmp	r0, #0
    2828:	d03d      	beq.n	28a6 <ull_conn_llcp+0x4fe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    282a:	4824      	ldr	r0, [pc, #144]	; (28bc <ull_conn_llcp+0x514>)
    282c:	f029 fd2e 	bl	2c28c <mem_acquire>
		if (!tx) {
    2830:	4605      	mov	r5, r0
    2832:	b3c0      	cbz	r0, 28a6 <ull_conn_llcp+0x4fe>
		(void)ll_pdu_rx_alloc();
    2834:	f018 fc7e 	bl	1b134 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    2838:	683b      	ldr	r3, [r7, #0]
    283a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    283e:	605a      	str	r2, [r3, #4]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2840:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_rx = rx;
    2844:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2848:	f36f 0301 	bfc	r3, #0, #2
    284c:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    2850:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2852:	441e      	add	r6, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2854:	792b      	ldrb	r3, [r5, #4]
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    2856:	3606      	adds	r6, #6
    2858:	b2b6      	uxth	r6, r6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    285a:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    285e:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2862:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    2864:	230c      	movs	r3, #12
    2866:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    2868:	2300      	movs	r3, #0
    286a:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    286c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    2870:	722b      	strb	r3, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    2872:	f240 42e2 	movw	r2, #1250	; 0x4e2
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2876:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    287a:	fbb3 f3f2 	udiv	r3, r3, r2
    287e:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    2882:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    2886:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    288a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    288e:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    2892:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    2896:	f8a5 300f 	strh.w	r3, [r5, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    289a:	f8a5 6011 	strh.w	r6, [r5, #17]
		ctrl_tx_enqueue(conn, tx);
    289e:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, tx);
    28a0:	4620      	mov	r0, r4
    28a2:	f02a f950 	bl	2cb46 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    28a6:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
    28aa:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    28ae:	429a      	cmp	r2, r3
    28b0:	f040 8203 	bne.w	2cba <ull_conn_llcp+0x912>
	return 0;
    28b4:	2000      	movs	r0, #0
}
    28b6:	b00d      	add	sp, #52	; 0x34
    28b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28bc:	20004eb4 	.word	0x20004eb4
    28c0:	20004e30 	.word	0x20004e30
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    28c4:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
    28c8:	910a      	str	r1, [sp, #40]	; 0x28
    28ca:	1a77      	subs	r7, r6, r1
    28cc:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    28ce:	0439      	lsls	r1, r7, #16
    28d0:	d4e9      	bmi.n	28a6 <ull_conn_llcp+0x4fe>
		conn->llcp_cu.ack = conn->llcp_cu.req;
    28d2:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
    28d6:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
		conn->llcp_ack = conn->llcp_req;
    28da:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    28de:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    28e2:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
    28e6:	428a      	cmp	r2, r1
    28e8:	d009      	beq.n	28fe <ull_conn_llcp+0x556>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    28ea:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    28ee:	f002 0207 	and.w	r2, r2, #7
    28f2:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    28f4:	bf04      	itt	eq
    28f6:	f884 10ed 	strbeq.w	r1, [r4, #237]	; 0xed
			conn->procedure_expire = 0U;
    28fa:	f8a4 007c 	strheq.w	r0, [r4, #124]	; 0x7c
		if (conn_upd_curr == conn) {
    28fe:	681a      	ldr	r2, [r3, #0]
		rx = conn->llcp_rx;
    2900:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
		if (conn_upd_curr == conn) {
    2904:	4294      	cmp	r4, r2
	conn_upd_curr = NULL;
    2906:	bf04      	itt	eq
    2908:	2200      	moveq	r2, #0
    290a:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    290c:	b10d      	cbz	r5, 2912 <ull_conn_llcp+0x56a>
    290e:	682b      	ldr	r3, [r5, #0]
    2910:	b95b      	cbnz	r3, 292a <ull_conn_llcp+0x582>
    2912:	f640 120e 	movw	r2, #2318	; 0x90e
    2916:	49b8      	ldr	r1, [pc, #736]	; (2bf8 <ull_conn_llcp+0x850>)
    2918:	48b8      	ldr	r0, [pc, #736]	; (2bfc <ull_conn_llcp+0x854>)
    291a:	f024 ffda 	bl	278d2 <printk>
    291e:	4040      	eors	r0, r0
    2920:	f380 8811 	msr	BASEPRI, r0
    2924:	f04f 0003 	mov.w	r0, #3
    2928:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    292a:	6828      	ldr	r0, [r5, #0]
		if ((conn->llcp_cu.interval != lll->interval) ||
    292c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
		conn->llcp_rx = rx->hdr.link->mem;
    2930:	6843      	ldr	r3, [r0, #4]
    2932:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		if ((conn->llcp_cu.interval != lll->interval) ||
    2936:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    2938:	f8b4 c0a6 	ldrh.w	ip, [r4, #166]	; 0xa6
    293c:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
    2940:	429a      	cmp	r2, r3
    2942:	d113      	bne.n	296c <ull_conn_llcp+0x5c4>
    2944:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2946:	4563      	cmp	r3, ip
    2948:	d110      	bne.n	296c <ull_conn_llcp+0x5c4>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    294a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    294e:	fb03 fe02 	mul.w	lr, r3, r2
    2952:	f242 7310 	movw	r3, #10000	; 0x2710
    2956:	fb03 e301 	mla	r3, r3, r1, lr
    295a:	3b01      	subs	r3, #1
    295c:	fbb3 f3fe 	udiv	r3, r3, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    2960:	f8b4 e076 	ldrh.w	lr, [r4, #118]	; 0x76
    2964:	b29b      	uxth	r3, r3
    2966:	459e      	cmp	lr, r3
    2968:	f000 8120 	beq.w	2bac <ull_conn_llcp+0x804>
			rx->hdr.handle = lll->handle;
    296c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    296e:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    2970:	2315      	movs	r3, #21
    2972:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    2974:	2300      	movs	r3, #0
    2976:	772b      	strb	r3, [r5, #28]
			cu->interval = conn->llcp_cu.interval;
    2978:	83ea      	strh	r2, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
    297a:	f8a5 c020 	strh.w	ip, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    297e:	8469      	strh	r1, [r5, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    2980:	4629      	mov	r1, r5
    2982:	f018 fbaf 	bl	1b0e4 <ll_rx_put>
		ll_rx_sched();
    2986:	f018 fbb7 	bl	1b0f8 <ll_rx_sched>
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    298a:	6823      	ldr	r3, [r4, #0]
    298c:	2b00      	cmp	r3, #0
    298e:	da0a      	bge.n	29a6 <ull_conn_llcp+0x5fe>
			uint32_t ticks_prepare_to_start =
    2990:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    2994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    2998:	4290      	cmp	r0, r2
    299a:	bf2c      	ite	cs
    299c:	4480      	addcs	r8, r0
    299e:	4490      	addcc	r8, r2
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    29a0:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    29a2:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * lll->interval;
    29a6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    29a8:	f8b4 50a4 	ldrh.w	r5, [r4, #164]	; 0xa4
    29ac:	f8df a268 	ldr.w	sl, [pc, #616]	; 2c18 <ull_conn_llcp+0x870>
		conn_interval_old = instant_latency * lll->interval;
    29b0:	fb13 f307 	smulbb	r3, r3, r7
    29b4:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    29b6:	fbb3 f1f5 	udiv	r1, r3, r5
    29ba:	fa1f f981 	uxth.w	r9, r1
		conn_interval_new = latency * conn->llcp_cu.interval;
    29be:	fb15 f209 	smulbb	r2, r5, r9
    29c2:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    29c4:	4293      	cmp	r3, r2
    29c6:	f240 40e2 	movw	r0, #1250	; 0x4e2
    29ca:	f080 80f2 	bcs.w	2bb2 <ull_conn_llcp+0x80a>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    29ce:	1ad3      	subs	r3, r2, r3
    29d0:	4358      	muls	r0, r3
    29d2:	fba0 010a 	umull	r0, r1, r0, sl
    29d6:	a386      	add	r3, pc, #536	; (adr r3, 2bf0 <ull_conn_llcp+0x848>)
    29d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    29dc:	f7fe ffd6 	bl	198c <__aeabi_uldivmod>
    29e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    29e4:	4480      	add	r8, r0
		lll->latency_prepare += lazy;
    29e6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    29e8:	449b      	add	fp, r3
		lll->latency_prepare -= (instant_latency - latency);
    29ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    29ec:	1b9e      	subs	r6, r3, r6
		} else if (lll->role) {
    29ee:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    29f2:	444e      	add	r6, r9
    29f4:	445e      	add	r6, fp
		} else if (lll->role) {
    29f6:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
    29f8:	f240 4be2 	movw	fp, #1250	; 0x4e2
		lll->latency_prepare -= (instant_latency - latency);
    29fc:	8666      	strh	r6, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval *
    29fe:	fb0b f505 	mul.w	r5, fp, r5
		} else if (lll->role) {
    2a02:	f280 80e4 	bge.w	2bce <ull_conn_llcp+0x826>
			lll->slave.window_widening_prepare_us -=
    2a06:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    2a08:	6c63      	ldr	r3, [r4, #68]	; 0x44
			lll->slave.window_widening_prepare_us -=
    2a0a:	fb03 2717 	mls	r7, r3, r7, r2
    2a0e:	64e7      	str	r7, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
    2a10:	f02a fa78 	bl	2cf04 <lll_clock_ppm_local_get>
    2a14:	4606      	mov	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    2a16:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
    2a1a:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2a1e:	f01b f8e9 	bl	1dbf4 <lll_clock_ppm_get>
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    2a22:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
				(((lll_clock_ppm_local_get() +
    2a26:	4406      	add	r6, r0
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    2a28:	fb0b f202 	mul.w	r2, fp, r2
			lll->slave.window_size_prepare_us =
    2a2c:	6562      	str	r2, [r4, #84]	; 0x54
				   lll_clock_ppm_get(conn->slave.sca)) *
    2a2e:	436e      	muls	r6, r5
			conn->slave.ticks_to_offset = 0U;
    2a30:	2200      	movs	r2, #0
    2a32:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2a36:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
			lll->slave.window_widening_prepare_us +=
    2a3a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2a3c:	4870      	ldr	r0, [pc, #448]	; (2c00 <ull_conn_llcp+0x858>)
    2a3e:	f206 263f 	addw	r6, r6, #575	; 0x23f
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2a42:	086b      	lsrs	r3, r5, #1
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2a44:	fbb6 f6f0 	udiv	r6, r6, r0
				lll->slave.window_widening_periodic_us *
    2a48:	fb06 f009 	mul.w	r0, r6, r9
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2a4c:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    2a4e:	4402      	add	r2, r0
			lll->slave.window_widening_max_us =
    2a50:	64a3      	str	r3, [r4, #72]	; 0x48
			lll->slave.window_widening_prepare_us +=
    2a52:	429a      	cmp	r2, r3
    2a54:	bf94      	ite	ls
    2a56:	64e2      	strls	r2, [r4, #76]	; 0x4c
    2a58:	64e3      	strhi	r3, [r4, #76]	; 0x4c
			lll->slave.window_widening_periodic_us =
    2a5a:	6466      	str	r6, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2a5c:	a364      	add	r3, pc, #400	; (adr r3, 2bf0 <ull_conn_llcp+0x848>)
    2a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a62:	fba0 010a 	umull	r0, r1, r0, sl
    2a66:	f7fe ff91 	bl	198c <__aeabi_uldivmod>
    2a6a:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2a6e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    2a72:	fbb0 f0fb 	udiv	r0, r0, fp
    2a76:	fb0b f000 	mul.w	r0, fp, r0
    2a7a:	a35d      	add	r3, pc, #372	; (adr r3, 2bf0 <ull_conn_llcp+0x848>)
    2a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a80:	fba0 010a 	umull	r0, r1, r0, sl
    2a84:	f7fe ff82 	bl	198c <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    2a88:	eba5 0906 	sub.w	r9, r5, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2a8c:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		lll->interval = conn->llcp_cu.interval;
    2a90:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    2a94:	85e3      	strh	r3, [r4, #46]	; 0x2e
		lll->latency = conn->llcp_cu.latency;
    2a96:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    2a9a:	8623      	strh	r3, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    2a9c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    2aa0:	f242 7210 	movw	r2, #10000	; 0x2710
    2aa4:	fb02 5303 	mla	r3, r2, r3, r5
    2aa8:	3b01      	subs	r3, #1
    2aaa:	fbb3 f3f5 	udiv	r3, r3, r5
    2aae:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2ab2:	4b54      	ldr	r3, [pc, #336]	; (2c04 <ull_conn_llcp+0x85c>)
    2ab4:	442b      	add	r3, r5
    2ab6:	fbb3 f5f5 	udiv	r5, r3, r5
		if (conn->llcp_cu.cmd) {
    2aba:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2abe:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
		if (conn->llcp_cu.cmd) {
    2ac2:	075a      	lsls	r2, r3, #29
			conn->supervision_expire = 0U;
    2ac4:	bf44      	itt	mi
    2ac6:	2300      	movmi	r3, #0
    2ac8:	f8a4 3078 	strhmi.w	r3, [r4, #120]	; 0x78
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    2acc:	2102      	movs	r1, #2
    2ace:	2001      	movs	r0, #1
    2ad0:	f01c fe40 	bl	1f754 <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    2ad4:	2200      	movs	r2, #0
    2ad6:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    2ad8:	4606      	mov	r6, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    2ada:	2001      	movs	r0, #1
    2adc:	f016 f960 	bl	18da0 <mayfly_enable>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2ae0:	4620      	mov	r0, r4
    2ae2:	f019 fb31 	bl	1c148 <ll_conn_handle_get>
    2ae6:	3005      	adds	r0, #5
    2ae8:	b2c5      	uxtb	r5, r0
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2aea:	4b47      	ldr	r3, [pc, #284]	; (2c08 <ull_conn_llcp+0x860>)
    2aec:	9400      	str	r4, [sp, #0]
    2aee:	462a      	mov	r2, r5
    2af0:	2101      	movs	r1, #1
    2af2:	2000      	movs	r0, #0
    2af4:	f016 ff52 	bl	1999c <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2af8:	f030 0302 	bics.w	r3, r0, #2
    2afc:	d00b      	beq.n	2b16 <ull_conn_llcp+0x76e>
    2afe:	f640 12b7 	movw	r2, #2487	; 0x9b7
    2b02:	493d      	ldr	r1, [pc, #244]	; (2bf8 <ull_conn_llcp+0x850>)
    2b04:	483d      	ldr	r0, [pc, #244]	; (2bfc <ull_conn_llcp+0x854>)
    2b06:	f024 fee4 	bl	278d2 <printk>
    2b0a:	4040      	eors	r0, r0
    2b0c:	f380 8811 	msr	BASEPRI, r0
    2b10:	f04f 0003 	mov.w	r0, #3
    2b14:	df02      	svc	2
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    2b16:	fba9 230a 	umull	r2, r3, r9, sl
    2b1a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    2b1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    2b22:	a333      	add	r3, pc, #204	; (adr r3, 2bf0 <ull_conn_llcp+0x848>)
    2b24:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b28:	f7fe ff30 	bl	198c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2b2c:	4b37      	ldr	r3, [pc, #220]	; (2c0c <ull_conn_llcp+0x864>)
    2b2e:	9408      	str	r4, [sp, #32]
    2b30:	e9cd 4306 	strd	r4, r3, [sp, #24]
    2b34:	4b36      	ldr	r3, [pc, #216]	; (2c10 <ull_conn_llcp+0x868>)
    2b36:	9305      	str	r3, [sp, #20]
    2b38:	68e3      	ldr	r3, [r4, #12]
    2b3a:	9304      	str	r3, [sp, #16]
    2b3c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    2b40:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    2b42:	4b34      	ldr	r3, [pc, #208]	; (2c14 <ull_conn_llcp+0x86c>)
    2b44:	990a      	ldr	r1, [sp, #40]	; 0x28
    2b46:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    2b4a:	fba4 ab03 	umull	sl, fp, r4, r3
    2b4e:	ebb1 000a 	subs.w	r0, r1, sl
    2b52:	f04f 0307 	mov.w	r3, #7
    2b56:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2b58:	fb03 bb04 	mla	fp, r3, r4, fp
    2b5c:	eb61 010b 	sbc.w	r1, r1, fp
    2b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2b64:	2300      	movs	r3, #0
    2b66:	f7fe ff11 	bl	198c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2b6a:	4643      	mov	r3, r8
    2b6c:	e9cd 4001 	strd	r4, r0, [sp, #4]
    2b70:	9700      	str	r7, [sp, #0]
    2b72:	462a      	mov	r2, r5
    2b74:	2101      	movs	r1, #1
    2b76:	2000      	movs	r0, #0
    2b78:	f029 fe2d 	bl	2c7d6 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2b7c:	f030 0302 	bics.w	r3, r0, #2
    2b80:	d00b      	beq.n	2b9a <ull_conn_llcp+0x7f2>
    2b82:	f640 12d1 	movw	r2, #2513	; 0x9d1
    2b86:	491c      	ldr	r1, [pc, #112]	; (2bf8 <ull_conn_llcp+0x850>)
    2b88:	481c      	ldr	r0, [pc, #112]	; (2bfc <ull_conn_llcp+0x854>)
    2b8a:	f024 fea2 	bl	278d2 <printk>
    2b8e:	4040      	eors	r0, r0
    2b90:	f380 8811 	msr	BASEPRI, r0
    2b94:	f04f 0003 	mov.w	r0, #3
    2b98:	df02      	svc	2
		if (mayfly_was_enabled) {
    2b9a:	b126      	cbz	r6, 2ba6 <ull_conn_llcp+0x7fe>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    2b9c:	2201      	movs	r2, #1
    2b9e:	2102      	movs	r1, #2
    2ba0:	4610      	mov	r0, r2
    2ba2:	f016 f8fd 	bl	18da0 <mayfly_enable>
				return -ECANCELED;
    2ba6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    2baa:	e684      	b.n	28b6 <ull_conn_llcp+0x50e>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2bac:	2301      	movs	r3, #1
    2bae:	712b      	strb	r3, [r5, #4]
    2bb0:	e6e6      	b.n	2980 <ull_conn_llcp+0x5d8>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2bb2:	fb05 3111 	mls	r1, r5, r1, r3
    2bb6:	b289      	uxth	r1, r1
    2bb8:	4348      	muls	r0, r1
    2bba:	a30d      	add	r3, pc, #52	; (adr r3, 2bf0 <ull_conn_llcp+0x848>)
    2bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
    2bc0:	fba0 010a 	umull	r0, r1, r0, sl
    2bc4:	f7fe fee2 	bl	198c <__aeabi_uldivmod>
    2bc8:	eba8 0800 	sub.w	r8, r8, r0
    2bcc:	e70b      	b.n	29e6 <ull_conn_llcp+0x63e>
			LL_ASSERT(0);
    2bce:	f640 1287 	movw	r2, #2439	; 0x987
    2bd2:	4909      	ldr	r1, [pc, #36]	; (2bf8 <ull_conn_llcp+0x850>)
    2bd4:	4809      	ldr	r0, [pc, #36]	; (2bfc <ull_conn_llcp+0x854>)
    2bd6:	f024 fe7c 	bl	278d2 <printk>
    2bda:	4040      	eors	r0, r0
    2bdc:	f380 8811 	msr	BASEPRI, r0
    2be0:	f04f 0003 	mov.w	r0, #3
    2be4:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    2be6:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    2be8:	46a9      	mov	r9, r5
    2bea:	e751      	b.n	2a90 <ull_conn_llcp+0x6e8>
    2bec:	f3af 8000 	nop.w
    2bf0:	1afd498d 	.word	0x1afd498d
    2bf4:	00000007 	.word	0x00000007
    2bf8:	00035ed5 	.word	0x00035ed5
    2bfc:	0003067f 	.word	0x0003067f
    2c00:	000f4240 	.word	0x000f4240
    2c04:	026259ff 	.word	0x026259ff
    2c08:	0001bff1 	.word	0x0001bff1
    2c0c:	0001bfa5 	.word	0x0001bfa5
    2c10:	0001d2c9 	.word	0x0001d2c9
    2c14:	1afd498d 	.word	0x1afd498d
    2c18:	3b9aca00 	.word	0x3b9aca00
			event_counter = lll->event_counter +
    2c1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    2c1e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    2c20:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
    2c22:	449b      	add	fp, r3
	if (conn->llcp.chan_map.initiate) {
    2c24:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    2c28:	07db      	lsls	r3, r3, #31
			event_counter = lll->event_counter +
    2c2a:	fa1f fb8b 	uxth.w	fp, fp
	if (conn->llcp.chan_map.initiate) {
    2c2e:	d525      	bpl.n	2c7c <ull_conn_llcp+0x8d4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2c30:	4835      	ldr	r0, [pc, #212]	; (2d08 <ull_conn_llcp+0x960>)
    2c32:	f029 fb2b 	bl	2c28c <mem_acquire>
		if (tx) {
    2c36:	4601      	mov	r1, r0
    2c38:	2800      	cmp	r0, #0
    2c3a:	f43f ae34 	beq.w	28a6 <ull_conn_llcp+0x4fe>
			conn->llcp.chan_map.initiate = 0U;
    2c3e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    2c42:	f36f 0300 	bfc	r3, #0, #1
    2c46:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			conn->llcp.chan_map.instant = event_counter +
    2c4a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2c4c:	449b      	add	fp, r3
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2c4e:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    2c50:	f10b 0b06 	add.w	fp, fp, #6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2c54:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.instant = event_counter +
    2c58:	f8a4 b096 	strh.w	fp, [r4, #150]	; 0x96
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2c5c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2c5e:	2308      	movs	r3, #8
    2c60:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    2c62:	2301      	movs	r3, #1
    2c64:	71c3      	strb	r3, [r0, #7]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2c66:	4623      	mov	r3, r4
    2c68:	f853 0f91 	ldr.w	r0, [r3, #145]!
    2c6c:	6088      	str	r0, [r1, #8]
    2c6e:	791b      	ldrb	r3, [r3, #4]
    2c70:	730b      	strb	r3, [r1, #12]
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    2c72:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    2c76:	f8a1 300d 	strh.w	r3, [r1, #13]
    2c7a:	e611      	b.n	28a0 <ull_conn_llcp+0x4f8>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    2c7c:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    2c80:	ebab 0b03 	sub.w	fp, fp, r3
    2c84:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
    2c88:	f47f ae0d 	bne.w	28a6 <ull_conn_llcp+0x4fe>
    2c8c:	4623      	mov	r3, r4
		conn->llcp_ack = conn->llcp_req;
    2c8e:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
    2c92:	f853 2f91 	ldr.w	r2, [r3, #145]!
    2c96:	63a2      	str	r2, [r4, #56]	; 0x38
		memcpy(&lll->data_chan_map[0],
    2c98:	f104 0038 	add.w	r0, r4, #56	; 0x38
    2c9c:	791b      	ldrb	r3, [r3, #4]
    2c9e:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
    2ca0:	2105      	movs	r1, #5
    2ca2:	f029 fb63 	bl	2c36c <util_ones_count_get>
		lll->data_chan_count =
    2ca6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    2caa:	f360 0305 	bfi	r3, r0, #0, #6
    2cae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    2cb2:	2301      	movs	r3, #1
    2cb4:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    2cb8:	e5f5      	b.n	28a6 <ull_conn_llcp+0x4fe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2cba:	4813      	ldr	r0, [pc, #76]	; (2d08 <ull_conn_llcp+0x960>)
    2cbc:	f029 fae6 	bl	2c28c <mem_acquire>
		if (tx) {
    2cc0:	4601      	mov	r1, r0
    2cc2:	b180      	cbz	r0, 2ce6 <ull_conn_llcp+0x93e>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    2cc4:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    2cc8:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ccc:	7903      	ldrb	r3, [r0, #4]
    2cce:	f043 0303 	orr.w	r3, r3, #3
    2cd2:	7103      	strb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    2cd4:	2302      	movs	r3, #2
    2cd6:	7143      	strb	r3, [r0, #5]
			pdu_tx->llctrl.opcode =
    2cd8:	71c3      	strb	r3, [r0, #7]
			pdu_tx->llctrl.terminate_ind.error_code =
    2cda:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    2cde:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, tx);
    2ce0:	4620      	mov	r0, r4
    2ce2:	f029 ff30 	bl	2cb46 <ctrl_tx_enqueue>
		if (!conn->procedure_expire) {
    2ce6:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    2cea:	2800      	cmp	r0, #0
    2cec:	f47f ade2 	bne.w	28b4 <ull_conn_llcp+0x50c>
			conn->procedure_expire = conn->supervision_reload;
    2cf0:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
			if (conn->procedure_expire <= 1U) {
    2cf4:	2b01      	cmp	r3, #1
    2cf6:	d902      	bls.n	2cfe <ull_conn_llcp+0x956>
			conn->procedure_expire = conn->supervision_reload;
    2cf8:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    2cfc:	e5da      	b.n	28b4 <ull_conn_llcp+0x50c>
				conn->procedure_expire++;
    2cfe:	3301      	adds	r3, #1
    2d00:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    2d04:	e5d7      	b.n	28b6 <ull_conn_llcp+0x50e>
    2d06:	bf00      	nop
    2d08:	20004eb4 	.word	0x20004eb4
    2d0c:	00000000 	.word	0x00000000

00002d10 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    2d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d14:	461d      	mov	r5, r3
	uint16_t win_delay_us;
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2d16:	6813      	ldr	r3, [r2, #0]
{
    2d18:	4691      	mov	r9, r2
    2d1a:	460a      	mov	r2, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2d1c:	f8d3 a000 	ldr.w	sl, [r3]
	conn = lll->hdr.parent;
    2d20:	462b      	mov	r3, r5
{
    2d22:	460c      	mov	r4, r1
    2d24:	f832 1f2e 	ldrh.w	r1, [r2, #46]!
	conn = lll->hdr.parent;
    2d28:	f853 6b0c 	ldr.w	r6, [r3], #12
    2d2c:	81a9      	strh	r1, [r5, #12]
    2d2e:	7892      	ldrb	r2, [r2, #2]
    2d30:	709a      	strb	r2, [r3, #2]
    2d32:	f8d4 302a 	ldr.w	r3, [r4, #42]	; 0x2a
    2d36:	60ab      	str	r3, [r5, #8]
    2d38:	4623      	mov	r3, r4
{
    2d3a:	4683      	mov	fp, r0
    2d3c:	f853 2f3a 	ldr.w	r2, [r3, #58]!
    2d40:	61ea      	str	r2, [r5, #28]

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2d42:	f105 001c 	add.w	r0, r5, #28
    2d46:	791b      	ldrb	r3, [r3, #4]
    2d48:	7103      	strb	r3, [r0, #4]
{
    2d4a:	b091      	sub	sp, #68	; 0x44
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2d4c:	2105      	movs	r1, #5
    2d4e:	f029 fb0d 	bl	2c36c <util_ones_count_get>
    2d52:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    2d56:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2d5a:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    2d5e:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2d60:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    2d64:	f240 812b 	bls.w	2fbe <ull_slave_setup+0x2ae>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2d68:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    2d6c:	f3c3 0304 	ubfx	r3, r3, #0, #5
    2d70:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2d74:	3b05      	subs	r3, #5
    2d76:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    2d7a:	2b0b      	cmp	r3, #11
    2d7c:	f200 811f 	bhi.w	2fbe <ull_slave_setup+0x2ae>
		return;
	}

	((struct lll_adv *)ftr->param)->conn = NULL;
    2d80:	f8d9 3000 	ldr.w	r3, [r9]
    2d84:	f04f 0800 	mov.w	r8, #0
    2d88:	f8c3 8008 	str.w	r8, [r3, #8]

	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2d8c:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
	lll->interval = interval;
    2d8e:	826f      	strh	r7, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2d90:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
    2d94:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    2d98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d9c:	82ab      	strh	r3, [r5, #20]

	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2d9e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2da0:	930a      	str	r3, [sp, #40]	; 0x28
	conn_interval_us = interval * CONN_INT_UNIT_US;
    2da2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2da6:	435f      	muls	r7, r3
	} else {
		win_delay_us = WIN_DELAY_LEGACY;
	}

	/* calculate the window widening */
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2da8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    2dac:	f896 2080 	ldrb.w	r2, [r6, #128]	; 0x80
    2db0:	095b      	lsrs	r3, r3, #5
    2db2:	f363 0284 	bfi	r2, r3, #2, #3
    2db6:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
	lll->slave.window_widening_periodic_us =
		(((lll_clock_ppm_local_get() +
    2dba:	f02a f8a3 	bl	2cf04 <lll_clock_ppm_local_get>
    2dbe:	900d      	str	r0, [sp, #52]	; 0x34
		   lll_clock_ppm_get(conn->slave.sca)) *
    2dc0:	f896 0080 	ldrb.w	r0, [r6, #128]	; 0x80
    2dc4:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2dc8:	f01a ff14 	bl	1dbf4 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    2dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2dce:	4418      	add	r0, r3
		   lll_clock_ppm_get(conn->slave.sca)) *
    2dd0:	4378      	muls	r0, r7
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2dd2:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2dd6:	4b7e      	ldr	r3, [pc, #504]	; (2fd0 <ull_slave_setup+0x2c0>)
    2dd8:	f200 203f 	addw	r0, r0, #575	; 0x23f
    2ddc:	fbb0 f0f3 	udiv	r0, r0, r3
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2de0:	087b      	lsrs	r3, r7, #1
    2de2:	3b96      	subs	r3, #150	; 0x96
    2de4:	62eb      	str	r3, [r5, #44]	; 0x2c
					    EVENT_IFS_US;
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    2de6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
	lll->slave.window_widening_periodic_us =
    2dea:	62a8      	str	r0, [r5, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    2dec:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2df0:	4353      	muls	r3, r2
    2df2:	63eb      	str	r3, [r5, #60]	; 0x3c
		CONN_INT_UNIT_US;

	/* procedure timeouts */
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2df4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
	conn->supervision_reload =
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2df6:	f242 7310 	movw	r3, #10000	; 0x2710
    2dfa:	fb03 7302 	mla	r3, r3, r2, r7
    2dfe:	3b01      	subs	r3, #1
    2e00:	fbb3 f3f7 	udiv	r3, r3, r7
    2e04:	f8a6 3076 	strh.w	r3, [r6, #118]	; 0x76
	conn->procedure_reload =
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2e08:	4b72      	ldr	r3, [pc, #456]	; (2fd4 <ull_slave_setup+0x2c4>)
    2e0a:	443b      	add	r3, r7
    2e0c:	fbb3 f3f7 	udiv	r3, r3, r7
    2e10:	f8a6 307a 	strh.w	r3, [r6, #122]	; 0x7a
    2e14:	68ab      	ldr	r3, [r5, #8]
    2e16:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84

	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
	       sizeof(conn->slave.force));

	peer_addr_type = pdu_adv->tx_addr;
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2e1a:	4621      	mov	r1, r4
	peer_addr_type = pdu_adv->tx_addr;
    2e1c:	7f23      	ldrb	r3, [r4, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2e1e:	f851 0f1e 	ldr.w	r0, [r1, #30]!
    2e22:	900e      	str	r0, [sp, #56]	; 0x38
    2e24:	8889      	ldrh	r1, [r1, #4]
    2e26:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
	peer_addr_type = pdu_adv->tx_addr;
    2e2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	} else {
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = peer_addr_type;
    2e2e:	77a3      	strb	r3, [r4, #30]
	cc->status = 0U;
    2e30:	f44f 7180 	mov.w	r1, #256	; 0x100
    2e34:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    2e38:	83a1      	strh	r1, [r4, #28]
    2e3a:	f8c4 001f 	str.w	r0, [r4, #31]
    2e3e:	f8a4 3023 	strh.w	r3, [r4, #35]	; 0x23
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
	}

	cc->interval = lll->interval;
    2e42:	8a6b      	ldrh	r3, [r5, #18]
    2e44:	84e3      	strh	r3, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    2e46:	8aab      	ldrh	r3, [r5, #20]
    2e48:	8523      	strh	r3, [r4, #40]	; 0x28
	cc->timeout = timeout;
	cc->sca = conn->slave.sca;
    2e4a:	f896 3080 	ldrb.w	r3, [r6, #128]	; 0x80
	cc->timeout = timeout;
    2e4e:	8562      	strh	r2, [r4, #42]	; 0x2a
	cc->sca = conn->slave.sca;
    2e50:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2e54:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	lll->handle = ll_conn_handle_get(conn);
    2e58:	4630      	mov	r0, r6
    2e5a:	f019 f975 	bl	1c148 <ll_conn_handle_get>
		rx->rx_ftr.param_adv_term.conn_handle = lll->handle;
		rx->rx_ftr.param_adv_term.num_events = 0U;
	}
#endif

	ll_rx_put(link, rx);
    2e5e:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    2e60:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    2e62:	80e0      	strh	r0, [r4, #6]
	ll_rx_put(link, rx);
    2e64:	4658      	mov	r0, fp
    2e66:	f018 f93d 	bl	1b0e4 <ll_rx_put>
	ll_rx_sched();
    2e6a:	f018 f945 	bl	1b0f8 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
#else
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    2e6e:	4641      	mov	r1, r8
    2e70:	4640      	mov	r0, r8
    2e72:	f02a f81b 	bl	2ceac <lll_radio_rx_ready_delay_get>
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2e76:	f8df b178 	ldr.w	fp, [pc, #376]	; 2ff0 <ull_slave_setup+0x2e0>
	conn->evt.ticks_active_to_start = 0U;
    2e7a:	f8c6 8004 	str.w	r8, [r6, #4]
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    2e7e:	4604      	mov	r4, r0
	conn->evt.ticks_xtal_to_start =
    2e80:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2e82:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    2e86:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    2e88:	f8c6 8008 	str.w	r8, [r6, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2e8c:	a34e      	add	r3, pc, #312	; (adr r3, 2fc8 <ull_slave_setup+0x2b8>)
    2e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e92:	fba0 010b 	umull	r0, r1, r0, fp
    2e96:	f7fe fd79 	bl	198c <__aeabi_uldivmod>
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2e9a:	6aab      	ldr	r3, [r5, #40]	; 0x28

	conn_offset_us = ftr->radio_end_us;
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2e9c:	990a      	ldr	r1, [sp, #40]	; 0x28
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2e9e:	1aff      	subs	r7, r7, r3
	conn_offset_us = ftr->radio_end_us;
    2ea0:	f8d9 300c 	ldr.w	r3, [r9, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2ea4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2ea8:	fb02 3301 	mla	r3, r2, r1, r3
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2eac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_delay_us;
	conn_offset_us -= EVENT_OVERHEAD_START_US;
	conn_offset_us -= EVENT_TICKER_RES_MARGIN_US;
	conn_offset_us -= EVENT_JITTER_US;
    2eb0:	f203 3386 	addw	r3, r3, #902	; 0x386

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2eb4:	4642      	mov	r2, r8
    2eb6:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    2eb8:	60f0      	str	r0, [r6, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2eba:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    2ebc:	1b1c      	subs	r4, r3, r4
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2ebe:	f015 ff6f 	bl	18da0 <mayfly_enable>
		aux->is_started = 0U;
	}
#endif

	/* Stop Advertiser */
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    2ec2:	4650      	mov	r0, sl
    2ec4:	f018 fe6a 	bl	1bb9c <ull_adv_handle_get>
    2ec8:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2eca:	4b43      	ldr	r3, [pc, #268]	; (2fd8 <ull_slave_setup+0x2c8>)
    2ecc:	f8cd a000 	str.w	sl, [sp]
    2ed0:	b2d2      	uxtb	r2, r2
    2ed2:	2101      	movs	r1, #1
    2ed4:	4640      	mov	r0, r8
    2ed6:	f016 fd61 	bl	1999c <ticker_stop>
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_adv, ticker_op_stop_adv_cb, adv);
	ticker_op_stop_adv_cb(ticker_status, adv);
    2eda:	4651      	mov	r1, sl
    2edc:	f01a f9da 	bl	1d294 <ticker_op_stop_adv_cb>

	/* Stop Direct Adv Stop */
	if (adv->lll.is_hdcd) {
    2ee0:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    2ee4:	f013 0f01 	tst.w	r3, #1
    2ee8:	465d      	mov	r5, fp
    2eea:	d007      	beq.n	2efc <ull_slave_setup+0x1ec>
		/* Advertiser stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    2eec:	2201      	movs	r2, #1
    2eee:	f8cd 8000 	str.w	r8, [sp]
    2ef2:	4643      	mov	r3, r8
    2ef4:	4611      	mov	r1, r2
    2ef6:	4640      	mov	r0, r8
    2ef8:	f016 fd50 	bl	1999c <ticker_stop>
			    TICKER_ID_ADV_STOP, NULL, NULL);
	}

	/* Start Slave */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2efc:	4630      	mov	r0, r6
    2efe:	f019 f923 	bl	1c148 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2f02:	fba7 2305 	umull	r2, r3, r7, r5
    2f06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2f0a:	4680      	mov	r8, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2f0c:	a32e      	add	r3, pc, #184	; (adr r3, 2fc8 <ull_slave_setup+0x2b8>)
    2f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    2f16:	f7fe fd39 	bl	198c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2f1a:	f8d9 3008 	ldr.w	r3, [r9, #8]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2f1e:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2f20:	f1a3 0931 	sub.w	r9, r3, #49	; 0x31
    2f24:	f44f 73b6 	mov.w	r3, #364	; 0x16c
    2f28:	9308      	str	r3, [sp, #32]
    2f2a:	4b2c      	ldr	r3, [pc, #176]	; (2fdc <ull_slave_setup+0x2cc>)
    2f2c:	e9cd 6306 	strd	r6, r3, [sp, #24]
    2f30:	4b2b      	ldr	r3, [pc, #172]	; (2fe0 <ull_slave_setup+0x2d0>)
    2f32:	9305      	str	r3, [sp, #20]
    2f34:	68f3      	ldr	r3, [r6, #12]
    2f36:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2f38:	4b2a      	ldr	r3, [pc, #168]	; (2fe4 <ull_slave_setup+0x2d4>)
    2f3a:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    2f3e:	fba6 ab03 	umull	sl, fp, r6, r3
    2f42:	ebb1 000a 	subs.w	r0, r1, sl
    2f46:	f04f 0307 	mov.w	r3, #7
    2f4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2f4c:	fb03 bb06 	mla	fp, r3, r6, fp
    2f50:	eb61 010b 	sbc.w	r1, r1, fp
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2f54:	f108 0705 	add.w	r7, r8, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2f5c:	f04f 0800 	mov.w	r8, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2f60:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2f62:	f8cd 800c 	str.w	r8, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2f66:	f7fe fd11 	bl	198c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2f6a:	a317      	add	r3, pc, #92	; (adr r3, 2fc8 <ull_slave_setup+0x2b8>)
    2f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2f70:	e9cd 6001 	strd	r6, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2f74:	fba4 0105 	umull	r0, r1, r4, r5
    2f78:	f7fe fd08 	bl	198c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2f7c:	b2ff      	uxtb	r7, r7
    2f7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f82:	9000      	str	r0, [sp, #0]
    2f84:	464b      	mov	r3, r9
    2f86:	463a      	mov	r2, r7
    2f88:	2101      	movs	r1, #1
    2f8a:	4640      	mov	r0, r8
    2f8c:	f029 fc23 	bl	2c7d6 <ticker_start>
				     TICKER_NULL_LAZY,
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_slave_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2f90:	f030 0302 	bics.w	r3, r0, #2
    2f94:	d00b      	beq.n	2fae <ull_slave_setup+0x29e>
    2f96:	f44f 72b7 	mov.w	r2, #366	; 0x16e
    2f9a:	4913      	ldr	r1, [pc, #76]	; (2fe8 <ull_slave_setup+0x2d8>)
    2f9c:	4813      	ldr	r0, [pc, #76]	; (2fec <ull_slave_setup+0x2dc>)
    2f9e:	f024 fc98 	bl	278d2 <printk>
    2fa2:	4040      	eors	r0, r0
    2fa4:	f380 8811 	msr	BASEPRI, r0
    2fa8:	f04f 0003 	mov.w	r0, #3
    2fac:	df02      	svc	2

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2fae:	2201      	movs	r2, #1
    2fb0:	2102      	movs	r1, #2
    2fb2:	4610      	mov	r0, r2
#endif
}
    2fb4:	b011      	add	sp, #68	; 0x44
    2fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2fba:	f015 bef1 	b.w	18da0 <mayfly_enable>
}
    2fbe:	b011      	add	sp, #68	; 0x44
    2fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fc4:	f3af 8000 	nop.w
    2fc8:	1afd498d 	.word	0x1afd498d
    2fcc:	00000007 	.word	0x00000007
    2fd0:	000f4240 	.word	0x000f4240
    2fd4:	026259ff 	.word	0x026259ff
    2fd8:	0001d295 	.word	0x0001d295
    2fdc:	0001d26d 	.word	0x0001d26d
    2fe0:	0001d2c9 	.word	0x0001d2c9
    2fe4:	1afd498d 	.word	0x1afd498d
    2fe8:	00035f27 	.word	0x00035f27
    2fec:	0003067f 	.word	0x0003067f
    2ff0:	3b9aca00 	.word	0x3b9aca00
    2ff4:	00000000 	.word	0x00000000

00002ff8 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    2ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ffc:	b08f      	sub	sp, #60	; 0x3c
    2ffe:	4683      	mov	fp, r0
	uint8_t instance_index;
	uint8_t ticker_id;
	int result;
	uint32_t err;

	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    3000:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    3004:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    3008:	f029 fca5 	bl	2c956 <ll_timeslice_ticker_id_get>
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    300c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 30e8 <nrf_flash_sync_exe+0xf0>
	err = ticker_start(instance_index,
    3010:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    3014:	930a      	str	r3, [sp, #40]	; 0x28
    3016:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    301a:	930b      	str	r3, [sp, #44]	; 0x2c
			   HAL_TICKER_US_TO_TICKS(
    301c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 30ec <nrf_flash_sync_exe+0xf4>
	err = ticker_start(instance_index,
    3020:	f029 fc0c 	bl	2c83c <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    3024:	f8d8 4000 	ldr.w	r4, [r8]
    3028:	fba4 4509 	umull	r4, r5, r4, r9
    302c:	a328      	add	r3, pc, #160	; (adr r3, 30d0 <nrf_flash_sync_exe+0xd8>)
    302e:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    3032:	4682      	mov	sl, r0
			   HAL_TICKER_US_TO_TICKS(
    3034:	4629      	mov	r1, r5
    3036:	4620      	mov	r0, r4
    3038:	f7fe fca8 	bl	198c <__aeabi_uldivmod>
    303c:	4606      	mov	r6, r0
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    303e:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    3042:	4b25      	ldr	r3, [pc, #148]	; (30d8 <nrf_flash_sync_exe+0xe0>)
    3044:	9305      	str	r3, [sp, #20]
    3046:	2700      	movs	r7, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    3048:	a321      	add	r3, pc, #132	; (adr r3, 30d0 <nrf_flash_sync_exe+0xd8>)
    304a:	e9d3 2300 	ldrd	r2, r3, [r3]
    304e:	fba0 0109 	umull	r0, r1, r0, r9
	err = ticker_start(instance_index,
    3052:	f8cd b018 	str.w	fp, [sp, #24]
    3056:	e9cd 7707 	strd	r7, r7, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    305a:	f7fe fc97 	bl	198c <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    305e:	4b1f      	ldr	r3, [pc, #124]	; (30dc <nrf_flash_sync_exe+0xe4>)
    3060:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    3064:	fba6 bc03 	umull	fp, ip, r6, r3
	err = ticker_start(instance_index,
    3068:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    306c:	2307      	movs	r3, #7
    306e:	fb03 cc06 	mla	ip, r3, r6, ip
	err = ticker_start(instance_index,
    3072:	e9cd 7003 	strd	r7, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    3076:	ebb4 000b 	subs.w	r0, r4, fp
    307a:	eb65 010c 	sbc.w	r1, r5, ip
    307e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3082:	2300      	movs	r3, #0
    3084:	f7fe fc82 	bl	198c <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    3088:	4653      	mov	r3, sl
    308a:	e9cd 6001 	strd	r6, r0, [sp, #4]
    308e:	9700      	str	r7, [sp, #0]
    3090:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3092:	980a      	ldr	r0, [sp, #40]	; 0x28
    3094:	2103      	movs	r1, #3
    3096:	f029 fb9e 	bl	2c7d6 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    309a:	f030 0302 	bics.w	r3, r0, #2
    309e:	d114      	bne.n	30ca <nrf_flash_sync_exe+0xd2>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    30a0:	4a0f      	ldr	r2, [pc, #60]	; (30e0 <nrf_flash_sync_exe+0xe8>)
    30a2:	4810      	ldr	r0, [pc, #64]	; (30e4 <nrf_flash_sync_exe+0xec>)
    30a4:	2300      	movs	r3, #0
    30a6:	f021 ffc5 	bl	25034 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    30aa:	b158      	cbz	r0, 30c4 <nrf_flash_sync_exe+0xcc>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);
    30ac:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    30b0:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    30b4:	2103      	movs	r1, #3
    30b6:	f01d fe0d 	bl	20cd4 <_ticker_stop>

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    30ba:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    30be:	b00f      	add	sp, #60	; 0x3c
    30c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    30c4:	f8d8 000c 	ldr.w	r0, [r8, #12]
    30c8:	e7f9      	b.n	30be <nrf_flash_sync_exe+0xc6>
		result = -ECANCELED;
    30ca:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
    30ce:	e7f6      	b.n	30be <nrf_flash_sync_exe+0xc6>
    30d0:	1afd498d 	.word	0x1afd498d
    30d4:	00000007 	.word	0x00000007
    30d8:	00020d79 	.word	0x00020d79
    30dc:	1afd498d 	.word	0x1afd498d
    30e0:	000b7b44 	.word	0x000b7b44
    30e4:	20005388 	.word	0x20005388
    30e8:	20005378 	.word	0x20005378
    30ec:	3b9aca00 	.word	0x3b9aca00

000030f0 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    30f0:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    30f2:	4d0f      	ldr	r5, [pc, #60]	; (3130 <nrf_flash_sync_check_time_limit+0x40>)
{
    30f4:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    30f6:	f029 fba1 	bl	2c83c <ticker_ticks_now_get>
    30fa:	68a9      	ldr	r1, [r5, #8]
    30fc:	f029 fba0 	bl	2c840 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    3100:	490c      	ldr	r1, [pc, #48]	; (3134 <nrf_flash_sync_check_time_limit+0x44>)
	if (ticks_diff + ticks_diff/iteration >
    3102:	fbb0 f4f4 	udiv	r4, r0, r4
    3106:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    3108:	6868      	ldr	r0, [r5, #4]
    310a:	a307      	add	r3, pc, #28	; (adr r3, 3128 <nrf_flash_sync_check_time_limit+0x38>)
    310c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3110:	fba0 0101 	umull	r0, r1, r0, r1
    3114:	f7fe fc3a 	bl	198c <__aeabi_uldivmod>
    3118:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    311c:	4284      	cmp	r4, r0
    311e:	bf94      	ite	ls
    3120:	2000      	movls	r0, #0
    3122:	2001      	movhi	r0, #1
    3124:	bd38      	pop	{r3, r4, r5, pc}
    3126:	bf00      	nop
    3128:	1afd498d 	.word	0x1afd498d
    312c:	00000007 	.word	0x00000007
    3130:	20005378 	.word	0x20005378
    3134:	3b9aca00 	.word	0x3b9aca00

00003138 <bt_mesh_sensor_delta_threshold>:
bool bt_mesh_sensor_delta_threshold(const struct bt_mesh_sensor *sensor,
				    const struct sensor_value *curr)
{
	struct sensor_value delta = {
		curr->val1 - sensor->state.prev.val1,
		curr->val2 - sensor->state.prev.val2,
    3138:	e9d0 2c13 	ldrd	r2, ip, [r0, #76]	; 0x4c
{
    313c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		curr->val2 - sensor->state.prev.val2,
    3140:	684e      	ldr	r6, [r1, #4]
		curr->val1 - sensor->state.prev.val1,
    3142:	680c      	ldr	r4, [r1, #0]
	};
	int64_t delta_mill = SENSOR_MILL(&delta);
    3144:	491e      	ldr	r1, [pc, #120]	; (31c0 <bt_mesh_sensor_delta_threshold+0x88>)
		curr->val2 - sensor->state.prev.val2,
    3146:	eba6 060c 	sub.w	r6, r6, ip
		curr->val1 - sensor->state.prev.val1,
    314a:	1aa4      	subs	r4, r4, r2
	int64_t delta_mill = SENSOR_MILL(&delta);
    314c:	17f7      	asrs	r7, r6, #31
    314e:	fbc1 6704 	smlal	r6, r7, r1, r4
	int64_t thrsh_mill;

	if (delta_mill < 0) {
    3152:	2e00      	cmp	r6, #0
    3154:	f177 0300 	sbcs.w	r3, r7, #0
    3158:	da28      	bge.n	31ac <bt_mesh_sensor_delta_threshold+0x74>
		delta_mill = -delta_mill;
		thrsh_mill = SENSOR_MILL(&sensor->state.threshold.delta.down);
    315a:	6b04      	ldr	r4, [r0, #48]	; 0x30
    315c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		delta_mill = -delta_mill;
    315e:	4276      	negs	r6, r6
    3160:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
		thrsh_mill = SENSOR_MILL(&sensor->state.threshold.delta.down);
    3164:	17e5      	asrs	r5, r4, #31
	} else {
		thrsh_mill = SENSOR_MILL(&sensor->state.threshold.delta.up);
    3166:	fbc1 4503 	smlal	r4, r5, r1, r3
	}

	/* If the threshold value is a perentage, we should calculate the actual
	 * threshold value relative to the previous value.
	 */
	if (sensor->state.threshold.delta.type ==
    316a:	f890 1020 	ldrb.w	r1, [r0, #32]
    316e:	2901      	cmp	r1, #1
    3170:	d114      	bne.n	319c <bt_mesh_sensor_delta_threshold+0x64>
	    BT_MESH_SENSOR_DELTA_PERCENT) {
		int64_t prev_mill = abs(SENSOR_MILL(&sensor->state.prev));
    3172:	4813      	ldr	r0, [pc, #76]	; (31c0 <bt_mesh_sensor_delta_threshold+0x88>)
    3174:	fb00 c002 	mla	r0, r0, r2, ip
    3178:	f02b f885 	bl	2e286 <abs>

		thrsh_mill = (prev_mill * thrsh_mill) / (100LL * 1000000LL);
    317c:	fb00 f305 	mul.w	r3, r0, r5
		int64_t prev_mill = abs(SENSOR_MILL(&sensor->state.prev));
    3180:	ea4f 79e0 	mov.w	r9, r0, asr #31
		thrsh_mill = (prev_mill * thrsh_mill) / (100LL * 1000000LL);
    3184:	fb04 3309 	mla	r3, r4, r9, r3
    3188:	fba0 0104 	umull	r0, r1, r0, r4
    318c:	4419      	add	r1, r3
    318e:	a30a      	add	r3, pc, #40	; (adr r3, 31b8 <bt_mesh_sensor_delta_threshold+0x80>)
    3190:	e9d3 2300 	ldrd	r2, r3, [r3]
    3194:	f7fe fbaa 	bl	18ec <__aeabi_ldivmod>
    3198:	4604      	mov	r4, r0
    319a:	460d      	mov	r5, r1

	BT_DBG("Delta: %u (%d - %d) thrsh: %u", (uint32_t)(delta_mill / 1000000L),
	       (int32_t)curr->val1, (int32_t)sensor->state.prev.val1,
	       (uint32_t)(thrsh_mill / 1000000L));

	return (delta_mill > thrsh_mill);
    319c:	42b4      	cmp	r4, r6
    319e:	eb75 0307 	sbcs.w	r3, r5, r7
}
    31a2:	bfb4      	ite	lt
    31a4:	2001      	movlt	r0, #1
    31a6:	2000      	movge	r0, #0
    31a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		thrsh_mill = SENSOR_MILL(&sensor->state.threshold.delta.up);
    31ac:	6a84      	ldr	r4, [r0, #40]	; 0x28
    31ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
    31b0:	17e5      	asrs	r5, r4, #31
    31b2:	e7d8      	b.n	3166 <bt_mesh_sensor_delta_threshold+0x2e>
    31b4:	f3af 8000 	nop.w
    31b8:	05f5e100 	.word	0x05f5e100
    31bc:	00000000 	.word	0x00000000
    31c0:	000f4240 	.word	0x000f4240
    31c4:	00000000 	.word	0x00000000

000031c8 <sensor_descriptor_encode>:
		sensor_powtime_decode(net_buf_simple_pull_u8(buf));
}

void sensor_descriptor_encode(struct net_buf_simple *buf,
				     struct bt_mesh_sensor *sensor)
{
    31c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	net_buf_simple_add_le16(buf, sensor->type->id);
    31cc:	680b      	ldr	r3, [r1, #0]
{
    31ce:	b08b      	sub	sp, #44	; 0x2c
    31d0:	460c      	mov	r4, r1
	net_buf_simple_add_le16(buf, sensor->type->id);
    31d2:	8819      	ldrh	r1, [r3, #0]
{
    31d4:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, sensor->type->id);
    31d6:	f02a fa04 	bl	2d5e2 <net_buf_simple_add_le16>

	const struct bt_mesh_sensor_descriptor dummy = { 0 };
    31da:	466b      	mov	r3, sp
    31dc:	2228      	movs	r2, #40	; 0x28
    31de:	2100      	movs	r1, #0
    31e0:	4618      	mov	r0, r3
    31e2:	f02b f89d 	bl	2e320 <memset>
	const struct bt_mesh_sensor_descriptor *d =
		sensor->descriptor ? sensor->descriptor : &dummy;
    31e6:	6864      	ldr	r4, [r4, #4]
	uint64_t tol_mill = 1000000L * tol->val1 + tol->val2;
    31e8:	4a37      	ldr	r2, [pc, #220]	; (32c8 <sensor_descriptor_encode+0x100>)
		sensor->descriptor ? sensor->descriptor : &dummy;
    31ea:	2c00      	cmp	r4, #0
    31ec:	bf08      	it	eq
    31ee:	4604      	moveq	r4, r0
	uint64_t tol_mill = 1000000L * tol->val1 + tol->val2;
    31f0:	e9d4 1300 	ldrd	r1, r3, [r4]
	if (tol_mill > (1000000L * 100L)) {
    31f4:	a730      	add	r7, pc, #192	; (adr r7, 32b8 <sensor_descriptor_encode+0xf0>)
    31f6:	e9d7 6700 	ldrd	r6, r7, [r7]
	uint64_t tol_mill = 1000000L * tol->val1 + tol->val2;
    31fa:	fb02 3101 	mla	r1, r2, r1, r3
    31fe:	17cb      	asrs	r3, r1, #31
	if (tol_mill > (1000000L * 100L)) {
    3200:	429f      	cmp	r7, r3
    3202:	bf08      	it	eq
    3204:	428e      	cmpeq	r6, r1
    3206:	d34f      	bcc.n	32a8 <sensor_descriptor_encode+0xe0>
	return (tol_mill * 4095L + (1000000L * 50L)) / (1000000L * 100L);
    3208:	f20f 09b4 	addw	r9, pc, #180	; 0xb4
    320c:	e9d9 8900 	ldrd	r8, r9, [r9]
    3210:	f640 70ff 	movw	r0, #4095	; 0xfff
    3214:	fbc0 8901 	smlal	r8, r9, r0, r1
    3218:	4640      	mov	r0, r8
    321a:	4632      	mov	r2, r6
    321c:	463b      	mov	r3, r7
    321e:	4649      	mov	r1, r9
    3220:	f7fe fbb4 	bl	198c <__aeabi_uldivmod>
    3224:	fa1f f880 	uxth.w	r8, r0
	uint64_t tol_mill = 1000000L * tol->val1 + tol->val2;
    3228:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    322c:	4926      	ldr	r1, [pc, #152]	; (32c8 <sensor_descriptor_encode+0x100>)
    322e:	fb01 2c03 	mla	ip, r1, r3, r2
    3232:	4662      	mov	r2, ip
    3234:	17d3      	asrs	r3, r2, #31
	if (tol_mill > (1000000L * 100L)) {
    3236:	429f      	cmp	r7, r3
    3238:	bf08      	it	eq
    323a:	4566      	cmpeq	r6, ip
    323c:	d337      	bcc.n	32ae <sensor_descriptor_encode+0xe6>
	return (tol_mill * 4095L + (1000000L * 50L)) / (1000000L * 100L);
    323e:	a120      	add	r1, pc, #128	; (adr r1, 32c0 <sensor_descriptor_encode+0xf8>)
    3240:	e9d1 0100 	ldrd	r0, r1, [r1]
    3244:	f640 76ff 	movw	r6, #4095	; 0xfff
    3248:	fbc6 010c 	smlal	r0, r1, r6, ip
    324c:	a31a      	add	r3, pc, #104	; (adr r3, 32b8 <sensor_descriptor_encode+0xf0>)
    324e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3252:	f7fe fb9b 	bl	198c <__aeabi_uldivmod>
    3256:	b286      	uxth	r6, r0

	uint16_t tol_pos = tolerance_encode(&d->tolerance.positive);
	uint16_t tol_neg = tolerance_encode(&d->tolerance.negative);

	net_buf_simple_add_u8(buf, tol_pos & 0xff);
    3258:	fa5f f188 	uxtb.w	r1, r8
    325c:	4628      	mov	r0, r5
    325e:	f02a f9b9 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf,
			      ((tol_pos >> 8) & BIT_MASK(4)) | (tol_neg << 4));
    3262:	0131      	lsls	r1, r6, #4
	net_buf_simple_add_u8(buf,
    3264:	ea41 2118 	orr.w	r1, r1, r8, lsr #8
    3268:	b2c9      	uxtb	r1, r1
    326a:	4628      	mov	r0, r5
    326c:	f02a f9b2 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, tol_neg >> 4);
    3270:	f3c6 1107 	ubfx	r1, r6, #4, #8
    3274:	4628      	mov	r0, r5
    3276:	f02a f9ad 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, d->sampling_type);
    327a:	7c21      	ldrb	r1, [r4, #16]
    327c:	4628      	mov	r0, r5
    327e:	f02a f9a9 	bl	2d5d4 <net_buf_simple_add_u8>

	net_buf_simple_add_u8(buf, sensor_powtime_encode(d->period));
    3282:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
    3286:	f01f f98b 	bl	225a0 <sensor_powtime_encode>
    328a:	4601      	mov	r1, r0
    328c:	4628      	mov	r0, r5
    328e:	f02a f9a1 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, sensor_powtime_encode(d->update_interval));
    3292:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
    3296:	f01f f983 	bl	225a0 <sensor_powtime_encode>
    329a:	4601      	mov	r1, r0
    329c:	4628      	mov	r0, r5
}
    329e:	b00b      	add	sp, #44	; 0x2c
    32a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	net_buf_simple_add_u8(buf, sensor_powtime_encode(d->update_interval));
    32a4:	f02a b996 	b.w	2d5d4 <net_buf_simple_add_u8>
		return 0;
    32a8:	f04f 0800 	mov.w	r8, #0
    32ac:	e7bc      	b.n	3228 <sensor_descriptor_encode+0x60>
    32ae:	2600      	movs	r6, #0
    32b0:	e7d2      	b.n	3258 <sensor_descriptor_encode+0x90>
    32b2:	bf00      	nop
    32b4:	f3af 8000 	nop.w
    32b8:	05f5e100 	.word	0x05f5e100
    32bc:	00000000 	.word	0x00000000
    32c0:	02faf080 	.word	0x02faf080
    32c4:	00000000 	.word	0x00000000
    32c8:	000f4240 	.word	0x000f4240
    32cc:	00000000 	.word	0x00000000

000032d0 <_dtoa_r>:
    32d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32d4:	6a47      	ldr	r7, [r0, #36]	; 0x24
    32d6:	b097      	sub	sp, #92	; 0x5c
    32d8:	4680      	mov	r8, r0
    32da:	461d      	mov	r5, r3
    32dc:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    32de:	4692      	mov	sl, r2
    32e0:	469b      	mov	fp, r3
    32e2:	b947      	cbnz	r7, 32f6 <_dtoa_r+0x26>
    32e4:	2010      	movs	r0, #16
    32e6:	f023 fee3 	bl	270b0 <malloc>
    32ea:	e9c0 7701 	strd	r7, r7, [r0, #4]
    32ee:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    32f2:	6007      	str	r7, [r0, #0]
    32f4:	60c7      	str	r7, [r0, #12]
    32f6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    32fa:	6819      	ldr	r1, [r3, #0]
    32fc:	b159      	cbz	r1, 3316 <_dtoa_r+0x46>
    32fe:	685a      	ldr	r2, [r3, #4]
    3300:	604a      	str	r2, [r1, #4]
    3302:	2301      	movs	r3, #1
    3304:	4093      	lsls	r3, r2
    3306:	608b      	str	r3, [r1, #8]
    3308:	4640      	mov	r0, r8
    330a:	f02b fa3b 	bl	2e784 <_Bfree>
    330e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    3312:	2200      	movs	r2, #0
    3314:	601a      	str	r2, [r3, #0]
    3316:	1e2b      	subs	r3, r5, #0
    3318:	bfaa      	itet	ge
    331a:	2300      	movge	r3, #0
    331c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
    3320:	6033      	strge	r3, [r6, #0]
    3322:	4ba7      	ldr	r3, [pc, #668]	; (35c0 <_dtoa_r+0x2f0>)
    3324:	bfbc      	itt	lt
    3326:	2201      	movlt	r2, #1
    3328:	6032      	strlt	r2, [r6, #0]
    332a:	ea33 030b 	bics.w	r3, r3, fp
    332e:	465c      	mov	r4, fp
    3330:	d11a      	bne.n	3368 <_dtoa_r+0x98>
    3332:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3334:	f242 730f 	movw	r3, #9999	; 0x270f
    3338:	6013      	str	r3, [r2, #0]
    333a:	f3cb 0313 	ubfx	r3, fp, #0, #20
    333e:	ea53 030a 	orrs.w	r3, r3, sl
    3342:	f000 855e 	beq.w	3e02 <_dtoa_r+0xb32>
    3346:	9b24      	ldr	r3, [sp, #144]	; 0x90
    3348:	b953      	cbnz	r3, 3360 <_dtoa_r+0x90>
    334a:	4b9e      	ldr	r3, [pc, #632]	; (35c4 <_dtoa_r+0x2f4>)
    334c:	e021      	b.n	3392 <_dtoa_r+0xc2>
    334e:	4b9e      	ldr	r3, [pc, #632]	; (35c8 <_dtoa_r+0x2f8>)
    3350:	9305      	str	r3, [sp, #20]
    3352:	3308      	adds	r3, #8
    3354:	9a24      	ldr	r2, [sp, #144]	; 0x90
    3356:	6013      	str	r3, [r2, #0]
    3358:	9805      	ldr	r0, [sp, #20]
    335a:	b017      	add	sp, #92	; 0x5c
    335c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3360:	4b98      	ldr	r3, [pc, #608]	; (35c4 <_dtoa_r+0x2f4>)
    3362:	9305      	str	r3, [sp, #20]
    3364:	3303      	adds	r3, #3
    3366:	e7f5      	b.n	3354 <_dtoa_r+0x84>
    3368:	2200      	movs	r2, #0
    336a:	2300      	movs	r3, #0
    336c:	4650      	mov	r0, sl
    336e:	4659      	mov	r1, fp
    3370:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
    3374:	f7fe fcf6 	bl	1d64 <__aeabi_dcmpeq>
    3378:	4607      	mov	r7, r0
    337a:	b160      	cbz	r0, 3396 <_dtoa_r+0xc6>
    337c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    337e:	2301      	movs	r3, #1
    3380:	6013      	str	r3, [r2, #0]
    3382:	9b24      	ldr	r3, [sp, #144]	; 0x90
    3384:	2b00      	cmp	r3, #0
    3386:	f000 8539 	beq.w	3dfc <_dtoa_r+0xb2c>
    338a:	4b90      	ldr	r3, [pc, #576]	; (35cc <_dtoa_r+0x2fc>)
    338c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    338e:	6013      	str	r3, [r2, #0]
    3390:	3b01      	subs	r3, #1
    3392:	9305      	str	r3, [sp, #20]
    3394:	e7e0      	b.n	3358 <_dtoa_r+0x88>
    3396:	ab14      	add	r3, sp, #80	; 0x50
    3398:	9301      	str	r3, [sp, #4]
    339a:	ab15      	add	r3, sp, #84	; 0x54
    339c:	9300      	str	r3, [sp, #0]
    339e:	4640      	mov	r0, r8
    33a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    33a4:	f02b fbf3 	bl	2eb8e <__d2b>
    33a8:	f3cb 560a 	ubfx	r6, fp, #20, #11
    33ac:	9003      	str	r0, [sp, #12]
    33ae:	2e00      	cmp	r6, #0
    33b0:	d07f      	beq.n	34b2 <_dtoa_r+0x1e2>
    33b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    33b4:	9712      	str	r7, [sp, #72]	; 0x48
    33b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    33ba:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
    33be:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
    33c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    33c6:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    33ca:	2200      	movs	r2, #0
    33cc:	4b80      	ldr	r3, [pc, #512]	; (35d0 <_dtoa_r+0x300>)
    33ce:	4620      	mov	r0, r4
    33d0:	4629      	mov	r1, r5
    33d2:	f7fd fe99 	bl	1108 <__aeabi_dsub>
    33d6:	a374      	add	r3, pc, #464	; (adr r3, 35a8 <_dtoa_r+0x2d8>)
    33d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    33dc:	f7fe f84c 	bl	1478 <__aeabi_dmul>
    33e0:	a373      	add	r3, pc, #460	; (adr r3, 35b0 <_dtoa_r+0x2e0>)
    33e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    33e6:	f7fd fe91 	bl	110c <__adddf3>
    33ea:	4604      	mov	r4, r0
    33ec:	4630      	mov	r0, r6
    33ee:	460d      	mov	r5, r1
    33f0:	f7fd ffd8 	bl	13a4 <__aeabi_i2d>
    33f4:	a370      	add	r3, pc, #448	; (adr r3, 35b8 <_dtoa_r+0x2e8>)
    33f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    33fa:	f7fe f83d 	bl	1478 <__aeabi_dmul>
    33fe:	4602      	mov	r2, r0
    3400:	460b      	mov	r3, r1
    3402:	4620      	mov	r0, r4
    3404:	4629      	mov	r1, r5
    3406:	f7fd fe81 	bl	110c <__adddf3>
    340a:	4604      	mov	r4, r0
    340c:	460d      	mov	r5, r1
    340e:	f7fe fa45 	bl	189c <__aeabi_d2iz>
    3412:	2200      	movs	r2, #0
    3414:	4681      	mov	r9, r0
    3416:	2300      	movs	r3, #0
    3418:	4620      	mov	r0, r4
    341a:	4629      	mov	r1, r5
    341c:	f7fe fcac 	bl	1d78 <__aeabi_dcmplt>
    3420:	b148      	cbz	r0, 3436 <_dtoa_r+0x166>
    3422:	4648      	mov	r0, r9
    3424:	f7fd ffbe 	bl	13a4 <__aeabi_i2d>
    3428:	4622      	mov	r2, r4
    342a:	462b      	mov	r3, r5
    342c:	f7fe fc9a 	bl	1d64 <__aeabi_dcmpeq>
    3430:	b908      	cbnz	r0, 3436 <_dtoa_r+0x166>
    3432:	f109 39ff 	add.w	r9, r9, #4294967295
    3436:	f1b9 0f16 	cmp.w	r9, #22
    343a:	d857      	bhi.n	34ec <_dtoa_r+0x21c>
    343c:	4b65      	ldr	r3, [pc, #404]	; (35d4 <_dtoa_r+0x304>)
    343e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    3442:	e9d3 2300 	ldrd	r2, r3, [r3]
    3446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    344a:	f7fe fc95 	bl	1d78 <__aeabi_dcmplt>
    344e:	2800      	cmp	r0, #0
    3450:	d04e      	beq.n	34f0 <_dtoa_r+0x220>
    3452:	f109 39ff 	add.w	r9, r9, #4294967295
    3456:	2300      	movs	r3, #0
    3458:	9311      	str	r3, [sp, #68]	; 0x44
    345a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    345c:	1b9e      	subs	r6, r3, r6
    345e:	1e73      	subs	r3, r6, #1
    3460:	9309      	str	r3, [sp, #36]	; 0x24
    3462:	bf45      	ittet	mi
    3464:	f1c6 0301 	rsbmi	r3, r6, #1
    3468:	9308      	strmi	r3, [sp, #32]
    346a:	2300      	movpl	r3, #0
    346c:	2300      	movmi	r3, #0
    346e:	bf4c      	ite	mi
    3470:	9309      	strmi	r3, [sp, #36]	; 0x24
    3472:	9308      	strpl	r3, [sp, #32]
    3474:	f1b9 0f00 	cmp.w	r9, #0
    3478:	db3c      	blt.n	34f4 <_dtoa_r+0x224>
    347a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    347c:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    3480:	444b      	add	r3, r9
    3482:	9309      	str	r3, [sp, #36]	; 0x24
    3484:	2300      	movs	r3, #0
    3486:	930a      	str	r3, [sp, #40]	; 0x28
    3488:	9b20      	ldr	r3, [sp, #128]	; 0x80
    348a:	2b09      	cmp	r3, #9
    348c:	f200 80a6 	bhi.w	35dc <_dtoa_r+0x30c>
    3490:	2b05      	cmp	r3, #5
    3492:	bfc4      	itt	gt
    3494:	3b04      	subgt	r3, #4
    3496:	9320      	strgt	r3, [sp, #128]	; 0x80
    3498:	9b20      	ldr	r3, [sp, #128]	; 0x80
    349a:	f1a3 0302 	sub.w	r3, r3, #2
    349e:	bfcc      	ite	gt
    34a0:	2400      	movgt	r4, #0
    34a2:	2401      	movle	r4, #1
    34a4:	2b03      	cmp	r3, #3
    34a6:	f200 80a4 	bhi.w	35f2 <_dtoa_r+0x322>
    34aa:	e8df f003 	tbb	[pc, r3]
    34ae:	3a2d      	.short	0x3a2d
    34b0:	7b38      	.short	0x7b38
    34b2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    34b6:	441e      	add	r6, r3
    34b8:	f206 4032 	addw	r0, r6, #1074	; 0x432
    34bc:	2820      	cmp	r0, #32
    34be:	bfc1      	itttt	gt
    34c0:	f1c0 0040 	rsbgt	r0, r0, #64	; 0x40
    34c4:	4084      	lslgt	r4, r0
    34c6:	f206 4012 	addwgt	r0, r6, #1042	; 0x412
    34ca:	fa2a f000 	lsrgt.w	r0, sl, r0
    34ce:	bfd6      	itet	le
    34d0:	f1c0 0020 	rsble	r0, r0, #32
    34d4:	4320      	orrgt	r0, r4
    34d6:	fa0a f000 	lslle.w	r0, sl, r0
    34da:	f7fd ff53 	bl	1384 <__aeabi_ui2d>
    34de:	2301      	movs	r3, #1
    34e0:	4604      	mov	r4, r0
    34e2:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
    34e6:	3e01      	subs	r6, #1
    34e8:	9312      	str	r3, [sp, #72]	; 0x48
    34ea:	e76e      	b.n	33ca <_dtoa_r+0xfa>
    34ec:	2301      	movs	r3, #1
    34ee:	e7b3      	b.n	3458 <_dtoa_r+0x188>
    34f0:	9011      	str	r0, [sp, #68]	; 0x44
    34f2:	e7b2      	b.n	345a <_dtoa_r+0x18a>
    34f4:	9b08      	ldr	r3, [sp, #32]
    34f6:	eba3 0309 	sub.w	r3, r3, r9
    34fa:	9308      	str	r3, [sp, #32]
    34fc:	f1c9 0300 	rsb	r3, r9, #0
    3500:	930a      	str	r3, [sp, #40]	; 0x28
    3502:	2300      	movs	r3, #0
    3504:	9310      	str	r3, [sp, #64]	; 0x40
    3506:	e7bf      	b.n	3488 <_dtoa_r+0x1b8>
    3508:	2300      	movs	r3, #0
    350a:	930b      	str	r3, [sp, #44]	; 0x2c
    350c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    350e:	2b00      	cmp	r3, #0
    3510:	dc72      	bgt.n	35f8 <_dtoa_r+0x328>
    3512:	2301      	movs	r3, #1
    3514:	9306      	str	r3, [sp, #24]
    3516:	9304      	str	r3, [sp, #16]
    3518:	461a      	mov	r2, r3
    351a:	9221      	str	r2, [sp, #132]	; 0x84
    351c:	e00b      	b.n	3536 <_dtoa_r+0x266>
    351e:	2301      	movs	r3, #1
    3520:	e7f3      	b.n	350a <_dtoa_r+0x23a>
    3522:	2300      	movs	r3, #0
    3524:	930b      	str	r3, [sp, #44]	; 0x2c
    3526:	9b21      	ldr	r3, [sp, #132]	; 0x84
    3528:	444b      	add	r3, r9
    352a:	9306      	str	r3, [sp, #24]
    352c:	3301      	adds	r3, #1
    352e:	2b01      	cmp	r3, #1
    3530:	9304      	str	r3, [sp, #16]
    3532:	bfb8      	it	lt
    3534:	2301      	movlt	r3, #1
    3536:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
    353a:	2200      	movs	r2, #0
    353c:	606a      	str	r2, [r5, #4]
    353e:	2204      	movs	r2, #4
    3540:	f102 0014 	add.w	r0, r2, #20
    3544:	4298      	cmp	r0, r3
    3546:	6869      	ldr	r1, [r5, #4]
    3548:	d95a      	bls.n	3600 <_dtoa_r+0x330>
    354a:	4640      	mov	r0, r8
    354c:	f02b f8e6 	bl	2e71c <_Balloc>
    3550:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    3554:	6028      	str	r0, [r5, #0]
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	9305      	str	r3, [sp, #20]
    355a:	9b04      	ldr	r3, [sp, #16]
    355c:	2b0e      	cmp	r3, #14
    355e:	f200 80d2 	bhi.w	3706 <_dtoa_r+0x436>
    3562:	2c00      	cmp	r4, #0
    3564:	f000 80cf 	beq.w	3706 <_dtoa_r+0x436>
    3568:	f1b9 0f00 	cmp.w	r9, #0
    356c:	dd66      	ble.n	363c <_dtoa_r+0x36c>
    356e:	4a19      	ldr	r2, [pc, #100]	; (35d4 <_dtoa_r+0x304>)
    3570:	f009 030f 	and.w	r3, r9, #15
    3574:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3578:	e9d3 3400 	ldrd	r3, r4, [r3]
    357c:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    3580:	ea4f 1429 	mov.w	r4, r9, asr #4
    3584:	06e0      	lsls	r0, r4, #27
    3586:	d557      	bpl.n	3638 <_dtoa_r+0x368>
    3588:	4b13      	ldr	r3, [pc, #76]	; (35d8 <_dtoa_r+0x308>)
    358a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    358e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    3592:	f7fe f89b 	bl	16cc <__aeabi_ddiv>
    3596:	f004 040f 	and.w	r4, r4, #15
    359a:	4682      	mov	sl, r0
    359c:	468b      	mov	fp, r1
    359e:	2703      	movs	r7, #3
    35a0:	4d0d      	ldr	r5, [pc, #52]	; (35d8 <_dtoa_r+0x308>)
    35a2:	e03e      	b.n	3622 <_dtoa_r+0x352>
    35a4:	2301      	movs	r3, #1
    35a6:	e7bd      	b.n	3524 <_dtoa_r+0x254>
    35a8:	636f4361 	.word	0x636f4361
    35ac:	3fd287a7 	.word	0x3fd287a7
    35b0:	8b60c8b3 	.word	0x8b60c8b3
    35b4:	3fc68a28 	.word	0x3fc68a28
    35b8:	509f79fb 	.word	0x509f79fb
    35bc:	3fd34413 	.word	0x3fd34413
    35c0:	7ff00000 	.word	0x7ff00000
    35c4:	00036e7d 	.word	0x00036e7d
    35c8:	00036e74 	.word	0x00036e74
    35cc:	00031490 	.word	0x00031490
    35d0:	3ff80000 	.word	0x3ff80000
    35d4:	0002f400 	.word	0x0002f400
    35d8:	0002f3d8 	.word	0x0002f3d8
    35dc:	2401      	movs	r4, #1
    35de:	2300      	movs	r3, #0
    35e0:	9320      	str	r3, [sp, #128]	; 0x80
    35e2:	940b      	str	r4, [sp, #44]	; 0x2c
    35e4:	f04f 33ff 	mov.w	r3, #4294967295
    35e8:	9306      	str	r3, [sp, #24]
    35ea:	9304      	str	r3, [sp, #16]
    35ec:	2200      	movs	r2, #0
    35ee:	2312      	movs	r3, #18
    35f0:	e793      	b.n	351a <_dtoa_r+0x24a>
    35f2:	2301      	movs	r3, #1
    35f4:	930b      	str	r3, [sp, #44]	; 0x2c
    35f6:	e7f5      	b.n	35e4 <_dtoa_r+0x314>
    35f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    35fa:	9306      	str	r3, [sp, #24]
    35fc:	9304      	str	r3, [sp, #16]
    35fe:	e79a      	b.n	3536 <_dtoa_r+0x266>
    3600:	3101      	adds	r1, #1
    3602:	6069      	str	r1, [r5, #4]
    3604:	0052      	lsls	r2, r2, #1
    3606:	e79b      	b.n	3540 <_dtoa_r+0x270>
    3608:	07e1      	lsls	r1, r4, #31
    360a:	d508      	bpl.n	361e <_dtoa_r+0x34e>
    360c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3610:	e9d5 2300 	ldrd	r2, r3, [r5]
    3614:	f7fd ff30 	bl	1478 <__aeabi_dmul>
    3618:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    361c:	3701      	adds	r7, #1
    361e:	1064      	asrs	r4, r4, #1
    3620:	3508      	adds	r5, #8
    3622:	2c00      	cmp	r4, #0
    3624:	d1f0      	bne.n	3608 <_dtoa_r+0x338>
    3626:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    362a:	4650      	mov	r0, sl
    362c:	4659      	mov	r1, fp
    362e:	f7fe f84d 	bl	16cc <__aeabi_ddiv>
    3632:	4682      	mov	sl, r0
    3634:	468b      	mov	fp, r1
    3636:	e01a      	b.n	366e <_dtoa_r+0x39e>
    3638:	2702      	movs	r7, #2
    363a:	e7b1      	b.n	35a0 <_dtoa_r+0x2d0>
    363c:	f000 809d 	beq.w	377a <_dtoa_r+0x4aa>
    3640:	f1c9 0400 	rsb	r4, r9, #0
    3644:	4b9c      	ldr	r3, [pc, #624]	; (38b8 <_dtoa_r+0x5e8>)
    3646:	4d9d      	ldr	r5, [pc, #628]	; (38bc <_dtoa_r+0x5ec>)
    3648:	f004 020f 	and.w	r2, r4, #15
    364c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3650:	e9d3 2300 	ldrd	r2, r3, [r3]
    3654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3658:	f7fd ff0e 	bl	1478 <__aeabi_dmul>
    365c:	1124      	asrs	r4, r4, #4
    365e:	4682      	mov	sl, r0
    3660:	468b      	mov	fp, r1
    3662:	2300      	movs	r3, #0
    3664:	2702      	movs	r7, #2
    3666:	2c00      	cmp	r4, #0
    3668:	d17c      	bne.n	3764 <_dtoa_r+0x494>
    366a:	2b00      	cmp	r3, #0
    366c:	d1e1      	bne.n	3632 <_dtoa_r+0x362>
    366e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3670:	2b00      	cmp	r3, #0
    3672:	f000 8084 	beq.w	377e <_dtoa_r+0x4ae>
    3676:	2200      	movs	r2, #0
    3678:	4b91      	ldr	r3, [pc, #580]	; (38c0 <_dtoa_r+0x5f0>)
    367a:	4650      	mov	r0, sl
    367c:	4659      	mov	r1, fp
    367e:	465d      	mov	r5, fp
    3680:	f7fe fb7a 	bl	1d78 <__aeabi_dcmplt>
    3684:	2800      	cmp	r0, #0
    3686:	d07a      	beq.n	377e <_dtoa_r+0x4ae>
    3688:	9b04      	ldr	r3, [sp, #16]
    368a:	2b00      	cmp	r3, #0
    368c:	d077      	beq.n	377e <_dtoa_r+0x4ae>
    368e:	9b06      	ldr	r3, [sp, #24]
    3690:	2b00      	cmp	r3, #0
    3692:	dd36      	ble.n	3702 <_dtoa_r+0x432>
    3694:	4650      	mov	r0, sl
    3696:	4659      	mov	r1, fp
    3698:	2200      	movs	r2, #0
    369a:	4b8a      	ldr	r3, [pc, #552]	; (38c4 <_dtoa_r+0x5f4>)
    369c:	f7fd feec 	bl	1478 <__aeabi_dmul>
    36a0:	9c06      	ldr	r4, [sp, #24]
    36a2:	f109 36ff 	add.w	r6, r9, #4294967295
    36a6:	4682      	mov	sl, r0
    36a8:	468b      	mov	fp, r1
    36aa:	3701      	adds	r7, #1
    36ac:	4638      	mov	r0, r7
    36ae:	f7fd fe79 	bl	13a4 <__aeabi_i2d>
    36b2:	4652      	mov	r2, sl
    36b4:	465b      	mov	r3, fp
    36b6:	f7fd fedf 	bl	1478 <__aeabi_dmul>
    36ba:	2200      	movs	r2, #0
    36bc:	4b82      	ldr	r3, [pc, #520]	; (38c8 <_dtoa_r+0x5f8>)
    36be:	f7fd fd25 	bl	110c <__adddf3>
    36c2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    36c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    36ca:	950f      	str	r5, [sp, #60]	; 0x3c
    36cc:	2c00      	cmp	r4, #0
    36ce:	d159      	bne.n	3784 <_dtoa_r+0x4b4>
    36d0:	2200      	movs	r2, #0
    36d2:	4b7e      	ldr	r3, [pc, #504]	; (38cc <_dtoa_r+0x5fc>)
    36d4:	4650      	mov	r0, sl
    36d6:	4659      	mov	r1, fp
    36d8:	f7fd fd16 	bl	1108 <__aeabi_dsub>
    36dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    36de:	462b      	mov	r3, r5
    36e0:	4682      	mov	sl, r0
    36e2:	468b      	mov	fp, r1
    36e4:	f7fe fb66 	bl	1db4 <__aeabi_dcmpgt>
    36e8:	2800      	cmp	r0, #0
    36ea:	f040 8288 	bne.w	3bfe <_dtoa_r+0x92e>
    36ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    36f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    36f4:	4650      	mov	r0, sl
    36f6:	4659      	mov	r1, fp
    36f8:	f7fe fb3e 	bl	1d78 <__aeabi_dcmplt>
    36fc:	2800      	cmp	r0, #0
    36fe:	f040 827c 	bne.w	3bfa <_dtoa_r+0x92a>
    3702:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
    3706:	9b15      	ldr	r3, [sp, #84]	; 0x54
    3708:	2b00      	cmp	r3, #0
    370a:	f2c0 814d 	blt.w	39a8 <_dtoa_r+0x6d8>
    370e:	f1b9 0f0e 	cmp.w	r9, #14
    3712:	f300 8149 	bgt.w	39a8 <_dtoa_r+0x6d8>
    3716:	4b68      	ldr	r3, [pc, #416]	; (38b8 <_dtoa_r+0x5e8>)
    3718:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    371c:	e9d3 3400 	ldrd	r3, r4, [r3]
    3720:	e9cd 3406 	strd	r3, r4, [sp, #24]
    3724:	9b21      	ldr	r3, [sp, #132]	; 0x84
    3726:	2b00      	cmp	r3, #0
    3728:	f280 80d4 	bge.w	38d4 <_dtoa_r+0x604>
    372c:	9b04      	ldr	r3, [sp, #16]
    372e:	2b00      	cmp	r3, #0
    3730:	f300 80d0 	bgt.w	38d4 <_dtoa_r+0x604>
    3734:	f040 8260 	bne.w	3bf8 <_dtoa_r+0x928>
    3738:	2200      	movs	r2, #0
    373a:	4b64      	ldr	r3, [pc, #400]	; (38cc <_dtoa_r+0x5fc>)
    373c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3740:	f7fd fe9a 	bl	1478 <__aeabi_dmul>
    3744:	4652      	mov	r2, sl
    3746:	465b      	mov	r3, fp
    3748:	f7fe fb2a 	bl	1da0 <__aeabi_dcmpge>
    374c:	9c04      	ldr	r4, [sp, #16]
    374e:	4626      	mov	r6, r4
    3750:	2800      	cmp	r0, #0
    3752:	f040 8239 	bne.w	3bc8 <_dtoa_r+0x8f8>
    3756:	9d05      	ldr	r5, [sp, #20]
    3758:	2331      	movs	r3, #49	; 0x31
    375a:	f805 3b01 	strb.w	r3, [r5], #1
    375e:	f109 0901 	add.w	r9, r9, #1
    3762:	e235      	b.n	3bd0 <_dtoa_r+0x900>
    3764:	07e2      	lsls	r2, r4, #31
    3766:	d505      	bpl.n	3774 <_dtoa_r+0x4a4>
    3768:	e9d5 2300 	ldrd	r2, r3, [r5]
    376c:	f7fd fe84 	bl	1478 <__aeabi_dmul>
    3770:	3701      	adds	r7, #1
    3772:	2301      	movs	r3, #1
    3774:	1064      	asrs	r4, r4, #1
    3776:	3508      	adds	r5, #8
    3778:	e775      	b.n	3666 <_dtoa_r+0x396>
    377a:	2702      	movs	r7, #2
    377c:	e777      	b.n	366e <_dtoa_r+0x39e>
    377e:	464e      	mov	r6, r9
    3780:	9c04      	ldr	r4, [sp, #16]
    3782:	e793      	b.n	36ac <_dtoa_r+0x3dc>
    3784:	4b4c      	ldr	r3, [pc, #304]	; (38b8 <_dtoa_r+0x5e8>)
    3786:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    378a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    378e:	9b05      	ldr	r3, [sp, #20]
    3790:	441c      	add	r4, r3
    3792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3794:	2b00      	cmp	r3, #0
    3796:	d044      	beq.n	3822 <_dtoa_r+0x552>
    3798:	4602      	mov	r2, r0
    379a:	460b      	mov	r3, r1
    379c:	2000      	movs	r0, #0
    379e:	494c      	ldr	r1, [pc, #304]	; (38d0 <_dtoa_r+0x600>)
    37a0:	f7fd ff94 	bl	16cc <__aeabi_ddiv>
    37a4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    37a8:	f7fd fcae 	bl	1108 <__aeabi_dsub>
    37ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    37b0:	9d05      	ldr	r5, [sp, #20]
    37b2:	4659      	mov	r1, fp
    37b4:	4650      	mov	r0, sl
    37b6:	f7fe f871 	bl	189c <__aeabi_d2iz>
    37ba:	4607      	mov	r7, r0
    37bc:	f7fd fdf2 	bl	13a4 <__aeabi_i2d>
    37c0:	4602      	mov	r2, r0
    37c2:	460b      	mov	r3, r1
    37c4:	4650      	mov	r0, sl
    37c6:	4659      	mov	r1, fp
    37c8:	f7fd fc9e 	bl	1108 <__aeabi_dsub>
    37cc:	3730      	adds	r7, #48	; 0x30
    37ce:	f805 7b01 	strb.w	r7, [r5], #1
    37d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    37d6:	4682      	mov	sl, r0
    37d8:	468b      	mov	fp, r1
    37da:	f7fe facd 	bl	1d78 <__aeabi_dcmplt>
    37de:	2800      	cmp	r0, #0
    37e0:	d160      	bne.n	38a4 <_dtoa_r+0x5d4>
    37e2:	4652      	mov	r2, sl
    37e4:	465b      	mov	r3, fp
    37e6:	2000      	movs	r0, #0
    37e8:	4935      	ldr	r1, [pc, #212]	; (38c0 <_dtoa_r+0x5f0>)
    37ea:	f7fd fc8d 	bl	1108 <__aeabi_dsub>
    37ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    37f2:	f7fe fac1 	bl	1d78 <__aeabi_dcmplt>
    37f6:	2800      	cmp	r0, #0
    37f8:	f040 80b6 	bne.w	3968 <_dtoa_r+0x698>
    37fc:	42a5      	cmp	r5, r4
    37fe:	d080      	beq.n	3702 <_dtoa_r+0x432>
    3800:	2200      	movs	r2, #0
    3802:	4b30      	ldr	r3, [pc, #192]	; (38c4 <_dtoa_r+0x5f4>)
    3804:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3808:	f7fd fe36 	bl	1478 <__aeabi_dmul>
    380c:	2200      	movs	r2, #0
    380e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    3812:	4b2c      	ldr	r3, [pc, #176]	; (38c4 <_dtoa_r+0x5f4>)
    3814:	4650      	mov	r0, sl
    3816:	4659      	mov	r1, fp
    3818:	f7fd fe2e 	bl	1478 <__aeabi_dmul>
    381c:	4682      	mov	sl, r0
    381e:	468b      	mov	fp, r1
    3820:	e7c7      	b.n	37b2 <_dtoa_r+0x4e2>
    3822:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    3826:	f7fd fe27 	bl	1478 <__aeabi_dmul>
    382a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    382e:	9f05      	ldr	r7, [sp, #20]
    3830:	4625      	mov	r5, r4
    3832:	4659      	mov	r1, fp
    3834:	4650      	mov	r0, sl
    3836:	f7fe f831 	bl	189c <__aeabi_d2iz>
    383a:	9013      	str	r0, [sp, #76]	; 0x4c
    383c:	f7fd fdb2 	bl	13a4 <__aeabi_i2d>
    3840:	4602      	mov	r2, r0
    3842:	460b      	mov	r3, r1
    3844:	4650      	mov	r0, sl
    3846:	4659      	mov	r1, fp
    3848:	f7fd fc5e 	bl	1108 <__aeabi_dsub>
    384c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    384e:	3330      	adds	r3, #48	; 0x30
    3850:	f807 3b01 	strb.w	r3, [r7], #1
    3854:	42a7      	cmp	r7, r4
    3856:	4682      	mov	sl, r0
    3858:	468b      	mov	fp, r1
    385a:	f04f 0200 	mov.w	r2, #0
    385e:	d125      	bne.n	38ac <_dtoa_r+0x5dc>
    3860:	4b1b      	ldr	r3, [pc, #108]	; (38d0 <_dtoa_r+0x600>)
    3862:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3866:	f7fd fc51 	bl	110c <__adddf3>
    386a:	4602      	mov	r2, r0
    386c:	460b      	mov	r3, r1
    386e:	4650      	mov	r0, sl
    3870:	4659      	mov	r1, fp
    3872:	f7fe fa9f 	bl	1db4 <__aeabi_dcmpgt>
    3876:	2800      	cmp	r0, #0
    3878:	d176      	bne.n	3968 <_dtoa_r+0x698>
    387a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    387e:	2000      	movs	r0, #0
    3880:	4913      	ldr	r1, [pc, #76]	; (38d0 <_dtoa_r+0x600>)
    3882:	f7fd fc41 	bl	1108 <__aeabi_dsub>
    3886:	4602      	mov	r2, r0
    3888:	460b      	mov	r3, r1
    388a:	4650      	mov	r0, sl
    388c:	4659      	mov	r1, fp
    388e:	f7fe fa73 	bl	1d78 <__aeabi_dcmplt>
    3892:	2800      	cmp	r0, #0
    3894:	f43f af35 	beq.w	3702 <_dtoa_r+0x432>
    3898:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    389c:	2b30      	cmp	r3, #48	; 0x30
    389e:	f105 32ff 	add.w	r2, r5, #4294967295
    38a2:	d001      	beq.n	38a8 <_dtoa_r+0x5d8>
    38a4:	46b1      	mov	r9, r6
    38a6:	e04e      	b.n	3946 <_dtoa_r+0x676>
    38a8:	4615      	mov	r5, r2
    38aa:	e7f5      	b.n	3898 <_dtoa_r+0x5c8>
    38ac:	4b05      	ldr	r3, [pc, #20]	; (38c4 <_dtoa_r+0x5f4>)
    38ae:	f7fd fde3 	bl	1478 <__aeabi_dmul>
    38b2:	4682      	mov	sl, r0
    38b4:	468b      	mov	fp, r1
    38b6:	e7bc      	b.n	3832 <_dtoa_r+0x562>
    38b8:	0002f400 	.word	0x0002f400
    38bc:	0002f3d8 	.word	0x0002f3d8
    38c0:	3ff00000 	.word	0x3ff00000
    38c4:	40240000 	.word	0x40240000
    38c8:	401c0000 	.word	0x401c0000
    38cc:	40140000 	.word	0x40140000
    38d0:	3fe00000 	.word	0x3fe00000
    38d4:	465f      	mov	r7, fp
    38d6:	9d05      	ldr	r5, [sp, #20]
    38d8:	f8df b54c 	ldr.w	fp, [pc, #1356]	; 3e28 <_dtoa_r+0xb58>
    38dc:	4656      	mov	r6, sl
    38de:	f04f 0a00 	mov.w	sl, #0
    38e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    38e6:	4630      	mov	r0, r6
    38e8:	4639      	mov	r1, r7
    38ea:	f7fd feef 	bl	16cc <__aeabi_ddiv>
    38ee:	f7fd ffd5 	bl	189c <__aeabi_d2iz>
    38f2:	4604      	mov	r4, r0
    38f4:	f7fd fd56 	bl	13a4 <__aeabi_i2d>
    38f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    38fc:	f7fd fdbc 	bl	1478 <__aeabi_dmul>
    3900:	4602      	mov	r2, r0
    3902:	460b      	mov	r3, r1
    3904:	4630      	mov	r0, r6
    3906:	4639      	mov	r1, r7
    3908:	f104 0630 	add.w	r6, r4, #48	; 0x30
    390c:	f7fd fbfc 	bl	1108 <__aeabi_dsub>
    3910:	f805 6b01 	strb.w	r6, [r5], #1
    3914:	9e05      	ldr	r6, [sp, #20]
    3916:	9f04      	ldr	r7, [sp, #16]
    3918:	1bae      	subs	r6, r5, r6
    391a:	42b7      	cmp	r7, r6
    391c:	4602      	mov	r2, r0
    391e:	460b      	mov	r3, r1
    3920:	d135      	bne.n	398e <_dtoa_r+0x6be>
    3922:	f7fd fbf3 	bl	110c <__adddf3>
    3926:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    392a:	4606      	mov	r6, r0
    392c:	460f      	mov	r7, r1
    392e:	f7fe fa41 	bl	1db4 <__aeabi_dcmpgt>
    3932:	b9c0      	cbnz	r0, 3966 <_dtoa_r+0x696>
    3934:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    3938:	4630      	mov	r0, r6
    393a:	4639      	mov	r1, r7
    393c:	f7fe fa12 	bl	1d64 <__aeabi_dcmpeq>
    3940:	b108      	cbz	r0, 3946 <_dtoa_r+0x676>
    3942:	07e3      	lsls	r3, r4, #31
    3944:	d40f      	bmi.n	3966 <_dtoa_r+0x696>
    3946:	9903      	ldr	r1, [sp, #12]
    3948:	4640      	mov	r0, r8
    394a:	f02a ff1b 	bl	2e784 <_Bfree>
    394e:	2300      	movs	r3, #0
    3950:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3952:	702b      	strb	r3, [r5, #0]
    3954:	f109 0301 	add.w	r3, r9, #1
    3958:	6013      	str	r3, [r2, #0]
    395a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    395c:	2b00      	cmp	r3, #0
    395e:	f43f acfb 	beq.w	3358 <_dtoa_r+0x88>
    3962:	601d      	str	r5, [r3, #0]
    3964:	e4f8      	b.n	3358 <_dtoa_r+0x88>
    3966:	464e      	mov	r6, r9
    3968:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    396c:	2a39      	cmp	r2, #57	; 0x39
    396e:	f105 33ff 	add.w	r3, r5, #4294967295
    3972:	d106      	bne.n	3982 <_dtoa_r+0x6b2>
    3974:	9a05      	ldr	r2, [sp, #20]
    3976:	429a      	cmp	r2, r3
    3978:	d107      	bne.n	398a <_dtoa_r+0x6ba>
    397a:	9905      	ldr	r1, [sp, #20]
    397c:	2230      	movs	r2, #48	; 0x30
    397e:	3601      	adds	r6, #1
    3980:	700a      	strb	r2, [r1, #0]
    3982:	781a      	ldrb	r2, [r3, #0]
    3984:	3201      	adds	r2, #1
    3986:	701a      	strb	r2, [r3, #0]
    3988:	e78c      	b.n	38a4 <_dtoa_r+0x5d4>
    398a:	461d      	mov	r5, r3
    398c:	e7ec      	b.n	3968 <_dtoa_r+0x698>
    398e:	4652      	mov	r2, sl
    3990:	465b      	mov	r3, fp
    3992:	f7fd fd71 	bl	1478 <__aeabi_dmul>
    3996:	2200      	movs	r2, #0
    3998:	2300      	movs	r3, #0
    399a:	4606      	mov	r6, r0
    399c:	460f      	mov	r7, r1
    399e:	f7fe f9e1 	bl	1d64 <__aeabi_dcmpeq>
    39a2:	2800      	cmp	r0, #0
    39a4:	d09d      	beq.n	38e2 <_dtoa_r+0x612>
    39a6:	e7ce      	b.n	3946 <_dtoa_r+0x676>
    39a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    39aa:	2a00      	cmp	r2, #0
    39ac:	f000 80cc 	beq.w	3b48 <_dtoa_r+0x878>
    39b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
    39b2:	2a01      	cmp	r2, #1
    39b4:	f300 80ae 	bgt.w	3b14 <_dtoa_r+0x844>
    39b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    39ba:	2a00      	cmp	r2, #0
    39bc:	f000 80a6 	beq.w	3b0c <_dtoa_r+0x83c>
    39c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
    39c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    39c6:	9d08      	ldr	r5, [sp, #32]
    39c8:	9a08      	ldr	r2, [sp, #32]
    39ca:	441a      	add	r2, r3
    39cc:	9208      	str	r2, [sp, #32]
    39ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    39d0:	2101      	movs	r1, #1
    39d2:	441a      	add	r2, r3
    39d4:	4640      	mov	r0, r8
    39d6:	9209      	str	r2, [sp, #36]	; 0x24
    39d8:	f02a ff76 	bl	2e8c8 <__i2b>
    39dc:	4606      	mov	r6, r0
    39de:	2d00      	cmp	r5, #0
    39e0:	dd0c      	ble.n	39fc <_dtoa_r+0x72c>
    39e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    39e4:	2b00      	cmp	r3, #0
    39e6:	dd09      	ble.n	39fc <_dtoa_r+0x72c>
    39e8:	42ab      	cmp	r3, r5
    39ea:	9a08      	ldr	r2, [sp, #32]
    39ec:	bfa8      	it	ge
    39ee:	462b      	movge	r3, r5
    39f0:	1ad2      	subs	r2, r2, r3
    39f2:	9208      	str	r2, [sp, #32]
    39f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    39f6:	1aed      	subs	r5, r5, r3
    39f8:	1ad3      	subs	r3, r2, r3
    39fa:	9309      	str	r3, [sp, #36]	; 0x24
    39fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    39fe:	b1f3      	cbz	r3, 3a3e <_dtoa_r+0x76e>
    3a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3a02:	2b00      	cmp	r3, #0
    3a04:	f000 80a4 	beq.w	3b50 <_dtoa_r+0x880>
    3a08:	2c00      	cmp	r4, #0
    3a0a:	dd10      	ble.n	3a2e <_dtoa_r+0x75e>
    3a0c:	4631      	mov	r1, r6
    3a0e:	4622      	mov	r2, r4
    3a10:	4640      	mov	r0, r8
    3a12:	f023 fe6d 	bl	276f0 <__pow5mult>
    3a16:	9a03      	ldr	r2, [sp, #12]
    3a18:	4601      	mov	r1, r0
    3a1a:	4606      	mov	r6, r0
    3a1c:	4640      	mov	r0, r8
    3a1e:	f02a ff5c 	bl	2e8da <__multiply>
    3a22:	9903      	ldr	r1, [sp, #12]
    3a24:	4607      	mov	r7, r0
    3a26:	4640      	mov	r0, r8
    3a28:	f02a feac 	bl	2e784 <_Bfree>
    3a2c:	9703      	str	r7, [sp, #12]
    3a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3a30:	1b1a      	subs	r2, r3, r4
    3a32:	d004      	beq.n	3a3e <_dtoa_r+0x76e>
    3a34:	9903      	ldr	r1, [sp, #12]
    3a36:	4640      	mov	r0, r8
    3a38:	f023 fe5a 	bl	276f0 <__pow5mult>
    3a3c:	9003      	str	r0, [sp, #12]
    3a3e:	2101      	movs	r1, #1
    3a40:	4640      	mov	r0, r8
    3a42:	f02a ff41 	bl	2e8c8 <__i2b>
    3a46:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3a48:	2b00      	cmp	r3, #0
    3a4a:	4604      	mov	r4, r0
    3a4c:	f340 8082 	ble.w	3b54 <_dtoa_r+0x884>
    3a50:	461a      	mov	r2, r3
    3a52:	4601      	mov	r1, r0
    3a54:	4640      	mov	r0, r8
    3a56:	f023 fe4b 	bl	276f0 <__pow5mult>
    3a5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3a5c:	2b01      	cmp	r3, #1
    3a5e:	4604      	mov	r4, r0
    3a60:	dd7b      	ble.n	3b5a <_dtoa_r+0x88a>
    3a62:	2700      	movs	r7, #0
    3a64:	6923      	ldr	r3, [r4, #16]
    3a66:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    3a6a:	6918      	ldr	r0, [r3, #16]
    3a6c:	f02a fedc 	bl	2e828 <__hi0bits>
    3a70:	f1c0 0020 	rsb	r0, r0, #32
    3a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a76:	4418      	add	r0, r3
    3a78:	f010 001f 	ands.w	r0, r0, #31
    3a7c:	f000 808b 	beq.w	3b96 <_dtoa_r+0x8c6>
    3a80:	f1c0 0320 	rsb	r3, r0, #32
    3a84:	2b04      	cmp	r3, #4
    3a86:	f340 8084 	ble.w	3b92 <_dtoa_r+0x8c2>
    3a8a:	f1c0 001c 	rsb	r0, r0, #28
    3a8e:	9b08      	ldr	r3, [sp, #32]
    3a90:	4403      	add	r3, r0
    3a92:	9308      	str	r3, [sp, #32]
    3a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a96:	4403      	add	r3, r0
    3a98:	4405      	add	r5, r0
    3a9a:	9309      	str	r3, [sp, #36]	; 0x24
    3a9c:	9b08      	ldr	r3, [sp, #32]
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	dd05      	ble.n	3aae <_dtoa_r+0x7de>
    3aa2:	461a      	mov	r2, r3
    3aa4:	9903      	ldr	r1, [sp, #12]
    3aa6:	4640      	mov	r0, r8
    3aa8:	f02a ffa7 	bl	2e9fa <__lshift>
    3aac:	9003      	str	r0, [sp, #12]
    3aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	dd05      	ble.n	3ac0 <_dtoa_r+0x7f0>
    3ab4:	4621      	mov	r1, r4
    3ab6:	461a      	mov	r2, r3
    3ab8:	4640      	mov	r0, r8
    3aba:	f02a ff9e 	bl	2e9fa <__lshift>
    3abe:	4604      	mov	r4, r0
    3ac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d069      	beq.n	3b9a <_dtoa_r+0x8ca>
    3ac6:	4621      	mov	r1, r4
    3ac8:	9803      	ldr	r0, [sp, #12]
    3aca:	f02a ffe9 	bl	2eaa0 <__mcmp>
    3ace:	2800      	cmp	r0, #0
    3ad0:	da63      	bge.n	3b9a <_dtoa_r+0x8ca>
    3ad2:	2300      	movs	r3, #0
    3ad4:	220a      	movs	r2, #10
    3ad6:	9903      	ldr	r1, [sp, #12]
    3ad8:	4640      	mov	r0, r8
    3ada:	f02a fe6a 	bl	2e7b2 <__multadd>
    3ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3ae0:	9003      	str	r0, [sp, #12]
    3ae2:	f109 39ff 	add.w	r9, r9, #4294967295
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	f000 8192 	beq.w	3e10 <_dtoa_r+0xb40>
    3aec:	2300      	movs	r3, #0
    3aee:	4631      	mov	r1, r6
    3af0:	220a      	movs	r2, #10
    3af2:	4640      	mov	r0, r8
    3af4:	f02a fe5d 	bl	2e7b2 <__multadd>
    3af8:	9b06      	ldr	r3, [sp, #24]
    3afa:	2b00      	cmp	r3, #0
    3afc:	4606      	mov	r6, r0
    3afe:	f300 8087 	bgt.w	3c10 <_dtoa_r+0x940>
    3b02:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3b04:	2b02      	cmp	r3, #2
    3b06:	f340 8083 	ble.w	3c10 <_dtoa_r+0x940>
    3b0a:	e04e      	b.n	3baa <_dtoa_r+0x8da>
    3b0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3b0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    3b12:	e757      	b.n	39c4 <_dtoa_r+0x6f4>
    3b14:	9b04      	ldr	r3, [sp, #16]
    3b16:	1e5c      	subs	r4, r3, #1
    3b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3b1a:	42a3      	cmp	r3, r4
    3b1c:	bfbf      	itttt	lt
    3b1e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    3b20:	940a      	strlt	r4, [sp, #40]	; 0x28
    3b22:	1ae2      	sublt	r2, r4, r3
    3b24:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
    3b26:	bfb6      	itet	lt
    3b28:	189b      	addlt	r3, r3, r2
    3b2a:	1b1c      	subge	r4, r3, r4
    3b2c:	9310      	strlt	r3, [sp, #64]	; 0x40
    3b2e:	9b04      	ldr	r3, [sp, #16]
    3b30:	bfb8      	it	lt
    3b32:	2400      	movlt	r4, #0
    3b34:	2b00      	cmp	r3, #0
    3b36:	bfb9      	ittee	lt
    3b38:	9b08      	ldrlt	r3, [sp, #32]
    3b3a:	9a04      	ldrlt	r2, [sp, #16]
    3b3c:	9d08      	ldrge	r5, [sp, #32]
    3b3e:	9b04      	ldrge	r3, [sp, #16]
    3b40:	bfbc      	itt	lt
    3b42:	1a9d      	sublt	r5, r3, r2
    3b44:	2300      	movlt	r3, #0
    3b46:	e73f      	b.n	39c8 <_dtoa_r+0x6f8>
    3b48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    3b4a:	9d08      	ldr	r5, [sp, #32]
    3b4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3b4e:	e746      	b.n	39de <_dtoa_r+0x70e>
    3b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3b52:	e76f      	b.n	3a34 <_dtoa_r+0x764>
    3b54:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3b56:	2b01      	cmp	r3, #1
    3b58:	dc17      	bgt.n	3b8a <_dtoa_r+0x8ba>
    3b5a:	f1ba 0f00 	cmp.w	sl, #0
    3b5e:	d114      	bne.n	3b8a <_dtoa_r+0x8ba>
    3b60:	f3cb 0313 	ubfx	r3, fp, #0, #20
    3b64:	b99b      	cbnz	r3, 3b8e <_dtoa_r+0x8be>
    3b66:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
    3b6a:	0d3f      	lsrs	r7, r7, #20
    3b6c:	053f      	lsls	r7, r7, #20
    3b6e:	b137      	cbz	r7, 3b7e <_dtoa_r+0x8ae>
    3b70:	9b08      	ldr	r3, [sp, #32]
    3b72:	3301      	adds	r3, #1
    3b74:	9308      	str	r3, [sp, #32]
    3b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b78:	3301      	adds	r3, #1
    3b7a:	9309      	str	r3, [sp, #36]	; 0x24
    3b7c:	2701      	movs	r7, #1
    3b7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3b80:	2b00      	cmp	r3, #0
    3b82:	f47f af6f 	bne.w	3a64 <_dtoa_r+0x794>
    3b86:	2001      	movs	r0, #1
    3b88:	e774      	b.n	3a74 <_dtoa_r+0x7a4>
    3b8a:	2700      	movs	r7, #0
    3b8c:	e7f7      	b.n	3b7e <_dtoa_r+0x8ae>
    3b8e:	4657      	mov	r7, sl
    3b90:	e7f5      	b.n	3b7e <_dtoa_r+0x8ae>
    3b92:	d083      	beq.n	3a9c <_dtoa_r+0x7cc>
    3b94:	4618      	mov	r0, r3
    3b96:	301c      	adds	r0, #28
    3b98:	e779      	b.n	3a8e <_dtoa_r+0x7be>
    3b9a:	9b04      	ldr	r3, [sp, #16]
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	dc31      	bgt.n	3c04 <_dtoa_r+0x934>
    3ba0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3ba2:	2b02      	cmp	r3, #2
    3ba4:	dd2e      	ble.n	3c04 <_dtoa_r+0x934>
    3ba6:	9b04      	ldr	r3, [sp, #16]
    3ba8:	9306      	str	r3, [sp, #24]
    3baa:	9b06      	ldr	r3, [sp, #24]
    3bac:	b963      	cbnz	r3, 3bc8 <_dtoa_r+0x8f8>
    3bae:	4621      	mov	r1, r4
    3bb0:	2205      	movs	r2, #5
    3bb2:	4640      	mov	r0, r8
    3bb4:	f02a fdfd 	bl	2e7b2 <__multadd>
    3bb8:	4601      	mov	r1, r0
    3bba:	4604      	mov	r4, r0
    3bbc:	9803      	ldr	r0, [sp, #12]
    3bbe:	f02a ff6f 	bl	2eaa0 <__mcmp>
    3bc2:	2800      	cmp	r0, #0
    3bc4:	f73f adc7 	bgt.w	3756 <_dtoa_r+0x486>
    3bc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    3bca:	9d05      	ldr	r5, [sp, #20]
    3bcc:	ea6f 0903 	mvn.w	r9, r3
    3bd0:	2700      	movs	r7, #0
    3bd2:	4621      	mov	r1, r4
    3bd4:	4640      	mov	r0, r8
    3bd6:	f02a fdd5 	bl	2e784 <_Bfree>
    3bda:	2e00      	cmp	r6, #0
    3bdc:	f43f aeb3 	beq.w	3946 <_dtoa_r+0x676>
    3be0:	b12f      	cbz	r7, 3bee <_dtoa_r+0x91e>
    3be2:	42b7      	cmp	r7, r6
    3be4:	d003      	beq.n	3bee <_dtoa_r+0x91e>
    3be6:	4639      	mov	r1, r7
    3be8:	4640      	mov	r0, r8
    3bea:	f02a fdcb 	bl	2e784 <_Bfree>
    3bee:	4631      	mov	r1, r6
    3bf0:	4640      	mov	r0, r8
    3bf2:	f02a fdc7 	bl	2e784 <_Bfree>
    3bf6:	e6a6      	b.n	3946 <_dtoa_r+0x676>
    3bf8:	2400      	movs	r4, #0
    3bfa:	4626      	mov	r6, r4
    3bfc:	e7e4      	b.n	3bc8 <_dtoa_r+0x8f8>
    3bfe:	46b1      	mov	r9, r6
    3c00:	4626      	mov	r6, r4
    3c02:	e5a8      	b.n	3756 <_dtoa_r+0x486>
    3c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3c06:	2b00      	cmp	r3, #0
    3c08:	f000 80bc 	beq.w	3d84 <_dtoa_r+0xab4>
    3c0c:	9b04      	ldr	r3, [sp, #16]
    3c0e:	9306      	str	r3, [sp, #24]
    3c10:	2d00      	cmp	r5, #0
    3c12:	dd05      	ble.n	3c20 <_dtoa_r+0x950>
    3c14:	4631      	mov	r1, r6
    3c16:	462a      	mov	r2, r5
    3c18:	4640      	mov	r0, r8
    3c1a:	f02a feee 	bl	2e9fa <__lshift>
    3c1e:	4606      	mov	r6, r0
    3c20:	2f00      	cmp	r7, #0
    3c22:	d052      	beq.n	3cca <_dtoa_r+0x9fa>
    3c24:	6871      	ldr	r1, [r6, #4]
    3c26:	4640      	mov	r0, r8
    3c28:	f02a fd78 	bl	2e71c <_Balloc>
    3c2c:	6932      	ldr	r2, [r6, #16]
    3c2e:	3202      	adds	r2, #2
    3c30:	4605      	mov	r5, r0
    3c32:	0092      	lsls	r2, r2, #2
    3c34:	f106 010c 	add.w	r1, r6, #12
    3c38:	300c      	adds	r0, #12
    3c3a:	f02a fb36 	bl	2e2aa <memcpy>
    3c3e:	2201      	movs	r2, #1
    3c40:	4629      	mov	r1, r5
    3c42:	4640      	mov	r0, r8
    3c44:	f02a fed9 	bl	2e9fa <__lshift>
    3c48:	9b05      	ldr	r3, [sp, #20]
    3c4a:	3301      	adds	r3, #1
    3c4c:	9304      	str	r3, [sp, #16]
    3c4e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    3c52:	4413      	add	r3, r2
    3c54:	930a      	str	r3, [sp, #40]	; 0x28
    3c56:	f00a 0301 	and.w	r3, sl, #1
    3c5a:	4637      	mov	r7, r6
    3c5c:	9309      	str	r3, [sp, #36]	; 0x24
    3c5e:	4606      	mov	r6, r0
    3c60:	9b04      	ldr	r3, [sp, #16]
    3c62:	9803      	ldr	r0, [sp, #12]
    3c64:	4621      	mov	r1, r4
    3c66:	f103 3aff 	add.w	sl, r3, #4294967295
    3c6a:	f02a fcce 	bl	2e60a <quorem>
    3c6e:	4639      	mov	r1, r7
    3c70:	9006      	str	r0, [sp, #24]
    3c72:	f100 0b30 	add.w	fp, r0, #48	; 0x30
    3c76:	9803      	ldr	r0, [sp, #12]
    3c78:	f02a ff12 	bl	2eaa0 <__mcmp>
    3c7c:	4632      	mov	r2, r6
    3c7e:	9008      	str	r0, [sp, #32]
    3c80:	4621      	mov	r1, r4
    3c82:	4640      	mov	r0, r8
    3c84:	f02a ff26 	bl	2ead4 <__mdiff>
    3c88:	68c2      	ldr	r2, [r0, #12]
    3c8a:	4605      	mov	r5, r0
    3c8c:	b9fa      	cbnz	r2, 3cce <_dtoa_r+0x9fe>
    3c8e:	4601      	mov	r1, r0
    3c90:	9803      	ldr	r0, [sp, #12]
    3c92:	f02a ff05 	bl	2eaa0 <__mcmp>
    3c96:	4602      	mov	r2, r0
    3c98:	4629      	mov	r1, r5
    3c9a:	4640      	mov	r0, r8
    3c9c:	920b      	str	r2, [sp, #44]	; 0x2c
    3c9e:	f02a fd71 	bl	2e784 <_Bfree>
    3ca2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3ca4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3ca6:	9d04      	ldr	r5, [sp, #16]
    3ca8:	ea43 0102 	orr.w	r1, r3, r2
    3cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3cae:	430b      	orrs	r3, r1
    3cb0:	d10f      	bne.n	3cd2 <_dtoa_r+0xa02>
    3cb2:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
    3cb6:	d028      	beq.n	3d0a <_dtoa_r+0xa3a>
    3cb8:	9b08      	ldr	r3, [sp, #32]
    3cba:	2b00      	cmp	r3, #0
    3cbc:	dd02      	ble.n	3cc4 <_dtoa_r+0x9f4>
    3cbe:	9b06      	ldr	r3, [sp, #24]
    3cc0:	f103 0b31 	add.w	fp, r3, #49	; 0x31
    3cc4:	f88a b000 	strb.w	fp, [sl]
    3cc8:	e783      	b.n	3bd2 <_dtoa_r+0x902>
    3cca:	4630      	mov	r0, r6
    3ccc:	e7bc      	b.n	3c48 <_dtoa_r+0x978>
    3cce:	2201      	movs	r2, #1
    3cd0:	e7e2      	b.n	3c98 <_dtoa_r+0x9c8>
    3cd2:	9b08      	ldr	r3, [sp, #32]
    3cd4:	2b00      	cmp	r3, #0
    3cd6:	db04      	blt.n	3ce2 <_dtoa_r+0xa12>
    3cd8:	9920      	ldr	r1, [sp, #128]	; 0x80
    3cda:	430b      	orrs	r3, r1
    3cdc:	9909      	ldr	r1, [sp, #36]	; 0x24
    3cde:	430b      	orrs	r3, r1
    3ce0:	d11e      	bne.n	3d20 <_dtoa_r+0xa50>
    3ce2:	2a00      	cmp	r2, #0
    3ce4:	ddee      	ble.n	3cc4 <_dtoa_r+0x9f4>
    3ce6:	2201      	movs	r2, #1
    3ce8:	9903      	ldr	r1, [sp, #12]
    3cea:	4640      	mov	r0, r8
    3cec:	f02a fe85 	bl	2e9fa <__lshift>
    3cf0:	4621      	mov	r1, r4
    3cf2:	9003      	str	r0, [sp, #12]
    3cf4:	f02a fed4 	bl	2eaa0 <__mcmp>
    3cf8:	2800      	cmp	r0, #0
    3cfa:	dc03      	bgt.n	3d04 <_dtoa_r+0xa34>
    3cfc:	d1e2      	bne.n	3cc4 <_dtoa_r+0x9f4>
    3cfe:	f01b 0f01 	tst.w	fp, #1
    3d02:	d0df      	beq.n	3cc4 <_dtoa_r+0x9f4>
    3d04:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
    3d08:	d1d9      	bne.n	3cbe <_dtoa_r+0x9ee>
    3d0a:	2339      	movs	r3, #57	; 0x39
    3d0c:	f88a 3000 	strb.w	r3, [sl]
    3d10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    3d14:	2b39      	cmp	r3, #57	; 0x39
    3d16:	f105 32ff 	add.w	r2, r5, #4294967295
    3d1a:	d064      	beq.n	3de6 <_dtoa_r+0xb16>
    3d1c:	3301      	adds	r3, #1
    3d1e:	e069      	b.n	3df4 <_dtoa_r+0xb24>
    3d20:	2a00      	cmp	r2, #0
    3d22:	dd07      	ble.n	3d34 <_dtoa_r+0xa64>
    3d24:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
    3d28:	d0ef      	beq.n	3d0a <_dtoa_r+0xa3a>
    3d2a:	f10b 0301 	add.w	r3, fp, #1
    3d2e:	f88a 3000 	strb.w	r3, [sl]
    3d32:	e74e      	b.n	3bd2 <_dtoa_r+0x902>
    3d34:	9b04      	ldr	r3, [sp, #16]
    3d36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3d38:	f803 bc01 	strb.w	fp, [r3, #-1]
    3d3c:	4293      	cmp	r3, r2
    3d3e:	d03a      	beq.n	3db6 <_dtoa_r+0xae6>
    3d40:	2300      	movs	r3, #0
    3d42:	220a      	movs	r2, #10
    3d44:	9903      	ldr	r1, [sp, #12]
    3d46:	4640      	mov	r0, r8
    3d48:	f02a fd33 	bl	2e7b2 <__multadd>
    3d4c:	42b7      	cmp	r7, r6
    3d4e:	9003      	str	r0, [sp, #12]
    3d50:	f04f 0300 	mov.w	r3, #0
    3d54:	f04f 020a 	mov.w	r2, #10
    3d58:	4639      	mov	r1, r7
    3d5a:	4640      	mov	r0, r8
    3d5c:	d107      	bne.n	3d6e <_dtoa_r+0xa9e>
    3d5e:	f02a fd28 	bl	2e7b2 <__multadd>
    3d62:	4607      	mov	r7, r0
    3d64:	4606      	mov	r6, r0
    3d66:	9b04      	ldr	r3, [sp, #16]
    3d68:	3301      	adds	r3, #1
    3d6a:	9304      	str	r3, [sp, #16]
    3d6c:	e778      	b.n	3c60 <_dtoa_r+0x990>
    3d6e:	f02a fd20 	bl	2e7b2 <__multadd>
    3d72:	4631      	mov	r1, r6
    3d74:	4607      	mov	r7, r0
    3d76:	2300      	movs	r3, #0
    3d78:	220a      	movs	r2, #10
    3d7a:	4640      	mov	r0, r8
    3d7c:	f02a fd19 	bl	2e7b2 <__multadd>
    3d80:	4606      	mov	r6, r0
    3d82:	e7f0      	b.n	3d66 <_dtoa_r+0xa96>
    3d84:	9b04      	ldr	r3, [sp, #16]
    3d86:	9306      	str	r3, [sp, #24]
    3d88:	9d05      	ldr	r5, [sp, #20]
    3d8a:	9803      	ldr	r0, [sp, #12]
    3d8c:	4621      	mov	r1, r4
    3d8e:	f02a fc3c 	bl	2e60a <quorem>
    3d92:	f100 0b30 	add.w	fp, r0, #48	; 0x30
    3d96:	9b05      	ldr	r3, [sp, #20]
    3d98:	f805 bb01 	strb.w	fp, [r5], #1
    3d9c:	1aea      	subs	r2, r5, r3
    3d9e:	9b06      	ldr	r3, [sp, #24]
    3da0:	4293      	cmp	r3, r2
    3da2:	dd07      	ble.n	3db4 <_dtoa_r+0xae4>
    3da4:	2300      	movs	r3, #0
    3da6:	220a      	movs	r2, #10
    3da8:	9903      	ldr	r1, [sp, #12]
    3daa:	4640      	mov	r0, r8
    3dac:	f02a fd01 	bl	2e7b2 <__multadd>
    3db0:	9003      	str	r0, [sp, #12]
    3db2:	e7ea      	b.n	3d8a <_dtoa_r+0xaba>
    3db4:	2700      	movs	r7, #0
    3db6:	2201      	movs	r2, #1
    3db8:	9903      	ldr	r1, [sp, #12]
    3dba:	4640      	mov	r0, r8
    3dbc:	f02a fe1d 	bl	2e9fa <__lshift>
    3dc0:	4621      	mov	r1, r4
    3dc2:	9003      	str	r0, [sp, #12]
    3dc4:	f02a fe6c 	bl	2eaa0 <__mcmp>
    3dc8:	2800      	cmp	r0, #0
    3dca:	dca1      	bgt.n	3d10 <_dtoa_r+0xa40>
    3dcc:	d102      	bne.n	3dd4 <_dtoa_r+0xb04>
    3dce:	f01b 0f01 	tst.w	fp, #1
    3dd2:	d19d      	bne.n	3d10 <_dtoa_r+0xa40>
    3dd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    3dd8:	2b30      	cmp	r3, #48	; 0x30
    3dda:	f105 32ff 	add.w	r2, r5, #4294967295
    3dde:	f47f aef8 	bne.w	3bd2 <_dtoa_r+0x902>
    3de2:	4615      	mov	r5, r2
    3de4:	e7f6      	b.n	3dd4 <_dtoa_r+0xb04>
    3de6:	9b05      	ldr	r3, [sp, #20]
    3de8:	4293      	cmp	r3, r2
    3dea:	d105      	bne.n	3df8 <_dtoa_r+0xb28>
    3dec:	9a05      	ldr	r2, [sp, #20]
    3dee:	f109 0901 	add.w	r9, r9, #1
    3df2:	2331      	movs	r3, #49	; 0x31
    3df4:	7013      	strb	r3, [r2, #0]
    3df6:	e6ec      	b.n	3bd2 <_dtoa_r+0x902>
    3df8:	4615      	mov	r5, r2
    3dfa:	e789      	b.n	3d10 <_dtoa_r+0xa40>
    3dfc:	4b08      	ldr	r3, [pc, #32]	; (3e20 <_dtoa_r+0xb50>)
    3dfe:	f7ff bac8 	b.w	3392 <_dtoa_r+0xc2>
    3e02:	9b24      	ldr	r3, [sp, #144]	; 0x90
    3e04:	2b00      	cmp	r3, #0
    3e06:	f47f aaa2 	bne.w	334e <_dtoa_r+0x7e>
    3e0a:	4b06      	ldr	r3, [pc, #24]	; (3e24 <_dtoa_r+0xb54>)
    3e0c:	f7ff bac1 	b.w	3392 <_dtoa_r+0xc2>
    3e10:	9b06      	ldr	r3, [sp, #24]
    3e12:	2b00      	cmp	r3, #0
    3e14:	dcb8      	bgt.n	3d88 <_dtoa_r+0xab8>
    3e16:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3e18:	2b02      	cmp	r3, #2
    3e1a:	f73f aec6 	bgt.w	3baa <_dtoa_r+0x8da>
    3e1e:	e7b3      	b.n	3d88 <_dtoa_r+0xab8>
    3e20:	0003148f 	.word	0x0003148f
    3e24:	00036e74 	.word	0x00036e74
    3e28:	40240000 	.word	0x40240000

00003e2c <prov_complete>:

static bool initialized=false; // Flag if the Stack is initialized

static void prov_complete(uint16_t net_idx, uint16_t src)
{
	printk("Prov complete! Addr: 0x%04x\n", src);
    3e2c:	4801      	ldr	r0, [pc, #4]	; (3e34 <prov_complete+0x8>)
    3e2e:	f023 bd50 	b.w	278d2 <printk>
    3e32:	bf00      	nop
    3e34:	00030400 	.word	0x00030400

00003e38 <input_complete>:
	return 0;
}

static void input_complete(void)
{
	printk("Input Complete");
    3e38:	4801      	ldr	r0, [pc, #4]	; (3e40 <input_complete+0x8>)
    3e3a:	f023 bd4a 	b.w	278d2 <printk>
    3e3e:	bf00      	nop
    3e40:	000303bf 	.word	0x000303bf

00003e44 <input>:
{
    3e44:	b508      	push	{r3, lr}
	printk("Press a button to set the right number.");
    3e46:	4802      	ldr	r0, [pc, #8]	; (3e50 <input+0xc>)
    3e48:	f023 fd43 	bl	278d2 <printk>
}
    3e4c:	2000      	movs	r0, #0
    3e4e:	bd08      	pop	{r3, pc}
    3e50:	00030397 	.word	0x00030397

00003e54 <output_string>:

	return -ENOTSUP;
}

static int output_string(const char *string)
{
    3e54:	b508      	push	{r3, lr}
	printk("OOB String: %s\n", string);
    3e56:	4601      	mov	r1, r0
    3e58:	4802      	ldr	r0, [pc, #8]	; (3e64 <output_string+0x10>)
    3e5a:	f023 fd3a 	bl	278d2 <printk>
	return 0;
}
    3e5e:	2000      	movs	r0, #0
    3e60:	bd08      	pop	{r3, pc}
    3e62:	bf00      	nop
    3e64:	000303f0 	.word	0x000303f0

00003e68 <output_number>:
	if (action == BT_MESH_DISPLAY_NUMBER) {
    3e68:	2808      	cmp	r0, #8
{
    3e6a:	b508      	push	{r3, lr}
	if (action == BT_MESH_DISPLAY_NUMBER) {
    3e6c:	d104      	bne.n	3e78 <output_number+0x10>
		printk("OOB Number: %u\n", number);
    3e6e:	4806      	ldr	r0, [pc, #24]	; (3e88 <output_number+0x20>)
		printk("Blinking %u times", number);
    3e70:	f023 fd2f 	bl	278d2 <printk>
		return 0;
    3e74:	2000      	movs	r0, #0
}
    3e76:	bd08      	pop	{r3, pc}
	if (action == BT_MESH_BLINK) {
    3e78:	2801      	cmp	r0, #1
    3e7a:	d101      	bne.n	3e80 <output_number+0x18>
		printk("Blinking %u times", number);
    3e7c:	4803      	ldr	r0, [pc, #12]	; (3e8c <output_number+0x24>)
    3e7e:	e7f7      	b.n	3e70 <output_number+0x8>
	return -ENOTSUP;
    3e80:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e84:	e7f7      	b.n	3e76 <output_number+0xe>
    3e86:	bf00      	nop
    3e88:	000303ce 	.word	0x000303ce
    3e8c:	000303de 	.word	0x000303de

00003e90 <bt_ready>:
	.input_complete = input_complete,
	.reset = prov_reset
	};

// Init the rest while Bluetooth is enabled
static void bt_ready(int err){
    3e90:	b510      	push	{r4, lr}

	/* --------------- Init Mesh ------------*/
	printk("Init Mesh...\n");
    3e92:	4822      	ldr	r0, [pc, #136]	; (3f1c <bt_ready+0x8c>)
    3e94:	f023 fd1d 	bl	278d2 <printk>
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    3e98:	4c21      	ldr	r4, [pc, #132]	; (3f20 <bt_ready+0x90>)
    3e9a:	2110      	movs	r1, #16
    3e9c:	4620      	mov	r0, r4
    3e9e:	f024 fbbe 	bl	2861e <z_impl_hwinfo_get_device_id>
	
	hwinfo_get_device_id(dev_uuid, sizeof(dev_uuid));
	// Do catch for nrf53 -> no HWINFO set (0xFFFF)
	if (dev_uuid[0] == 0xFF && dev_uuid[1] == 0xFF && dev_uuid[5] == 0xFF){
    3ea2:	7862      	ldrb	r2, [r4, #1]
    3ea4:	7823      	ldrb	r3, [r4, #0]
    3ea6:	4013      	ands	r3, r2
    3ea8:	7962      	ldrb	r2, [r4, #5]
    3eaa:	4013      	ands	r3, r2
    3eac:	2bff      	cmp	r3, #255	; 0xff
    3eae:	d10d      	bne.n	3ecc <bt_ready+0x3c>
		uint8_t *p0 = (uint8_t*)&NRF_FICR->DEVICEADDR[0]; // Use MAC Address for UUID
		dev_uuid[0] = p0[0];
    3eb0:	4b1c      	ldr	r3, [pc, #112]	; (3f24 <bt_ready+0x94>)
    3eb2:	781a      	ldrb	r2, [r3, #0]
    3eb4:	7022      	strb	r2, [r4, #0]
		dev_uuid[1] = p0[1];
    3eb6:	785a      	ldrb	r2, [r3, #1]
    3eb8:	7062      	strb	r2, [r4, #1]
		dev_uuid[2] = p0[2];
    3eba:	789a      	ldrb	r2, [r3, #2]
    3ebc:	70a2      	strb	r2, [r4, #2]
		dev_uuid[3] = p0[3];
    3ebe:	78db      	ldrb	r3, [r3, #3]
    3ec0:	70e3      	strb	r3, [r4, #3]
		uint8_t *p1 = (uint8_t*)&NRF_FICR->DEVICEADDR[1]; // Use MAC Address for UUID
		dev_uuid[4] = p1[0];
    3ec2:	4b19      	ldr	r3, [pc, #100]	; (3f28 <bt_ready+0x98>)
    3ec4:	781a      	ldrb	r2, [r3, #0]
    3ec6:	7122      	strb	r2, [r4, #4]
		dev_uuid[5] = p1[1];
    3ec8:	785b      	ldrb	r3, [r3, #1]
    3eca:	7163      	strb	r3, [r4, #5]
	}

	err = bt_mesh_init(&prov, bm_blemesh_model_handler_init());
    3ecc:	f000 fa5a 	bl	4384 <bm_blemesh_model_handler_init>
    3ed0:	4601      	mov	r1, r0
    3ed2:	4816      	ldr	r0, [pc, #88]	; (3f2c <bt_ready+0x9c>)
    3ed4:	f026 ffb7 	bl	2ae46 <bt_mesh_init>
	if (err)
    3ed8:	4601      	mov	r1, r0
    3eda:	b120      	cbz	r0, 3ee6 <bt_ready+0x56>
	{
		printk("Initializing mesh failed (err %d)\n", err);
    3edc:	4814      	ldr	r0, [pc, #80]	; (3f30 <bt_ready+0xa0>)
		printk("Provisioning completed\n");
	}
	/* ===================================*/

	initialized = true;
}
    3ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Provisioning failed (err %d)\n", err);
    3ee2:	f023 bcf6 	b.w	278d2 <printk>
	printk("Mesh initialized\n");
    3ee6:	4813      	ldr	r0, [pc, #76]	; (3f34 <bt_ready+0xa4>)
    3ee8:	f023 fcf3 	bl	278d2 <printk>
	printk("Provisioning...\n");
    3eec:	4812      	ldr	r0, [pc, #72]	; (3f38 <bt_ready+0xa8>)
    3eee:	f023 fcf0 	bl	278d2 <printk>
		settings_load();
    3ef2:	f024 f8f4 	bl	280de <settings_load>
	err = bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
    3ef6:	2003      	movs	r0, #3
    3ef8:	f013 fa98 	bl	1742c <bt_mesh_prov_enable>
	if (err == -EALREADY)
    3efc:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
    3f00:	4601      	mov	r1, r0
	if (err == -EALREADY)
    3f02:	d106      	bne.n	3f12 <bt_ready+0x82>
		printk("Already Provisioned (Restored Settings)\n");
    3f04:	480d      	ldr	r0, [pc, #52]	; (3f3c <bt_ready+0xac>)
		printk("Provisioning completed\n");
    3f06:	f023 fce4 	bl	278d2 <printk>
	initialized = true;
    3f0a:	4b0d      	ldr	r3, [pc, #52]	; (3f40 <bt_ready+0xb0>)
    3f0c:	2201      	movs	r2, #1
    3f0e:	701a      	strb	r2, [r3, #0]
}
    3f10:	bd10      	pop	{r4, pc}
	else if (err)
    3f12:	b108      	cbz	r0, 3f18 <bt_ready+0x88>
		printk("Provisioning failed (err %d)\n", err);
    3f14:	480b      	ldr	r0, [pc, #44]	; (3f44 <bt_ready+0xb4>)
    3f16:	e7e2      	b.n	3ede <bt_ready+0x4e>
		printk("Provisioning completed\n");
    3f18:	480b      	ldr	r0, [pc, #44]	; (3f48 <bt_ready+0xb8>)
    3f1a:	e7f4      	b.n	3f06 <bt_ready+0x76>
    3f1c:	000302e4 	.word	0x000302e4
    3f20:	200056dc 	.word	0x200056dc
    3f24:	100000a4 	.word	0x100000a4
    3f28:	100000a8 	.word	0x100000a8
    3f2c:	20000d90 	.word	0x20000d90
    3f30:	000302f2 	.word	0x000302f2
    3f34:	00030315 	.word	0x00030315
    3f38:	00030327 	.word	0x00030327
    3f3c:	00030338 	.word	0x00030338
    3f40:	200056ec 	.word	0x200056ec
    3f44:	00030361 	.word	0x00030361
    3f48:	0003037f 	.word	0x0003037f

00003f4c <bm_blemesh_enable>:

void bm_blemesh_enable(void)
{
    3f4c:	b538      	push	{r3, r4, r5, lr}
	int err;



	/* ---------- Init Bluetooth ---------- */
	printk("Enabling Bluetooth...\n");
    3f4e:	4810      	ldr	r0, [pc, #64]	; (3f90 <bm_blemesh_enable+0x44>)
	err = bt_enable(bt_ready);
	while (initialized == false){
    3f50:	4d10      	ldr	r5, [pc, #64]	; (3f94 <bm_blemesh_enable+0x48>)
	printk("Enabling Bluetooth...\n");
    3f52:	f023 fcbe 	bl	278d2 <printk>
	err = bt_enable(bt_ready);
    3f56:	4810      	ldr	r0, [pc, #64]	; (3f98 <bm_blemesh_enable+0x4c>)
    3f58:	f006 f9f6 	bl	a348 <bt_enable>
    3f5c:	4604      	mov	r4, r0
	while (initialized == false){
    3f5e:	782b      	ldrb	r3, [r5, #0]
    3f60:	b133      	cbz	r3, 3f70 <bm_blemesh_enable+0x24>
		k_sleep(K_MSEC(10));
	}
	if (err)
    3f62:	b15c      	cbz	r4, 3f7c <bm_blemesh_enable+0x30>
	{
		printk("Bluetooth init failed (err %d)\n", err);
    3f64:	4621      	mov	r1, r4
    3f66:	480d      	ldr	r0, [pc, #52]	; (3f9c <bm_blemesh_enable+0x50>)
	/* ===================================*/	

	bm_can_init();

	//bt_mesh_reset();
}
    3f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    3f6c:	f023 bcb1 	b.w	278d2 <printk>
	return z_impl_k_sleep(timeout);
    3f70:	2100      	movs	r1, #0
    3f72:	f44f 70a4 	mov.w	r0, #328	; 0x148
    3f76:	f020 ffcf 	bl	24f18 <z_impl_k_sleep>
    3f7a:	e7f0      	b.n	3f5e <bm_blemesh_enable+0x12>
	printk("Bluetooth initialized\n");
    3f7c:	4808      	ldr	r0, [pc, #32]	; (3fa0 <bm_blemesh_enable+0x54>)
    3f7e:	f023 fca8 	bl	278d2 <printk>
	printk("Configuring done\n");
    3f82:	4808      	ldr	r0, [pc, #32]	; (3fa4 <bm_blemesh_enable+0x58>)
    3f84:	f023 fca5 	bl	278d2 <printk>
}
    3f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bm_can_init();
    3f8c:	f000 b8da 	b.w	4144 <bm_can_init>
    3f90:	00030284 	.word	0x00030284
    3f94:	200056ec 	.word	0x200056ec
    3f98:	00003e91 	.word	0x00003e91
    3f9c:	0003029b 	.word	0x0003029b
    3fa0:	000302bb 	.word	0x000302bb
    3fa4:	000302d2 	.word	0x000302d2

00003fa8 <rx_callback_function>:
	if (buf_prop_val->meta.id == id)
    3fa8:	4a08      	ldr	r2, [pc, #32]	; (3fcc <rx_callback_function+0x24>)
	uint16_t id = frame->data[4] | (frame->data[3] << 8);
    3faa:	7b03      	ldrb	r3, [r0, #12]
	if (buf_prop_val->meta.id == id)
    3fac:	6811      	ldr	r1, [r2, #0]
{
    3fae:	b530      	push	{r4, r5, lr}
	uint16_t id = frame->data[4] | (frame->data[3] << 8);
    3fb0:	7ac5      	ldrb	r5, [r0, #11]
	if (buf_prop_val->meta.id == id)
    3fb2:	880c      	ldrh	r4, [r1, #0]
    3fb4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    3fb8:	429c      	cmp	r4, r3
    3fba:	d106      	bne.n	3fca <rx_callback_function+0x22>
		buf_prop_val->value[0] = frame->data[6];
    3fbc:	688b      	ldr	r3, [r1, #8]
    3fbe:	7b81      	ldrb	r1, [r0, #14]
    3fc0:	7019      	strb	r1, [r3, #0]
		buf_prop_val->value[1] = frame->data[5];
    3fc2:	6813      	ldr	r3, [r2, #0]
    3fc4:	7b42      	ldrb	r2, [r0, #13]
    3fc6:	689b      	ldr	r3, [r3, #8]
    3fc8:	705a      	strb	r2, [r3, #1]
}
    3fca:	bd30      	pop	{r4, r5, pc}
    3fcc:	200030e0 	.word	0x200030e0

00003fd0 <attention_off>:
	printk("attention_off()\n");
    3fd0:	4801      	ldr	r0, [pc, #4]	; (3fd8 <attention_off+0x8>)
    3fd2:	f023 bc7e 	b.w	278d2 <printk>
    3fd6:	bf00      	nop
    3fd8:	0003041d 	.word	0x0003041d

00003fdc <attention_on>:
	printk("attention_on()\n");
    3fdc:	4801      	ldr	r0, [pc, #4]	; (3fe4 <attention_on+0x8>)
    3fde:	f023 bc78 	b.w	278d2 <printk>
    3fe2:	bf00      	nop
    3fe4:	0003042e 	.word	0x0003042e

00003fe8 <state_change_callback_function>:
{
    3fe8:	b513      	push	{r0, r1, r4, lr}
	printk("State Change ISR\nstate: %u\n"
    3fea:	b2cb      	uxtb	r3, r1
{
    3fec:	4604      	mov	r4, r0
    3fee:	f8ad 1004 	strh.w	r1, [sp, #4]
	printk("State Change ISR\nstate: %u\n"
    3ff2:	f3c1 2207 	ubfx	r2, r1, #8, #8
    3ff6:	4601      	mov	r1, r0
    3ff8:	4805      	ldr	r0, [pc, #20]	; (4010 <state_change_callback_function+0x28>)
    3ffa:	f023 fc6a 	bl	278d2 <printk>
	if (state == CAN_ERROR_ACTIVE)
    3ffe:	b92c      	cbnz	r4, 400c <state_change_callback_function+0x24>
		bm_led1_set(false);
    4000:	4620      	mov	r0, r4
}
    4002:	b002      	add	sp, #8
    4004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bm_led1_set(true);
    4008:	f000 bb7a 	b.w	4700 <bm_led1_set>
    400c:	2001      	movs	r0, #1
    400e:	e7f8      	b.n	4002 <state_change_callback_function+0x1a>
    4010:	0003046c 	.word	0x0003046c

00004014 <get_elsterid_canbus>:
{
    4014:	b530      	push	{r4, r5, lr}
    4016:	4604      	mov	r4, r0
    4018:	b087      	sub	sp, #28
	bm_led3_set(true);
    401a:	2001      	movs	r0, #1
    401c:	f000 fb80 	bl	4720 <bm_led3_set>
	return z_impl_k_sem_take(sem, timeout);
    4020:	4d1f      	ldr	r5, [pc, #124]	; (40a0 <get_elsterid_canbus+0x8c>)
    4022:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    4026:	2300      	movs	r3, #0
    4028:	4628      	mov	r0, r5
    402a:	f021 f803 	bl	25034 <z_impl_k_sem_take>
	if(k_sem_take(&prop_get_sem, K_MSEC(1500)) != 0){
    402e:	b108      	cbz	r0, 4034 <get_elsterid_canbus+0x20>
/**
 * @internal
 */
static inline void z_impl_k_sem_reset(struct k_sem *sem)
{
	sem->count = 0U;
    4030:	2300      	movs	r3, #0
    4032:	60ab      	str	r3, [r5, #8]
	struct zcan_frame frame = {
    4034:	2100      	movs	r1, #0
    4036:	2210      	movs	r2, #16
    4038:	a802      	add	r0, sp, #8
    403a:	f02a f971 	bl	2e320 <memset>
    403e:	f44f 63d0 	mov.w	r3, #1664	; 0x680
    4042:	9302      	str	r3, [sp, #8]
    4044:	2305      	movs	r3, #5
    4046:	f88d 300c 	strb.w	r3, [sp, #12]
	frame.data[0] = 0x31;
    404a:	2331      	movs	r3, #49	; 0x31
    404c:	f88d 3010 	strb.w	r3, [sp, #16]
	frame.data[2] = 0xFA;
    4050:	23fa      	movs	r3, #250	; 0xfa
    4052:	f88d 3012 	strb.w	r3, [sp, #18]
	frame.data[3] = (uint8_t)(prop_val->meta.id >> 8);
    4056:	8823      	ldrh	r3, [r4, #0]
	frame.data[4] = (uint8_t)prop_val->meta.id & 0xff;
    4058:	f88d 3014 	strb.w	r3, [sp, #20]
	frame.data[3] = (uint8_t)(prop_val->meta.id >> 8);
    405c:	0a1a      	lsrs	r2, r3, #8
	buf_prop_val = prop_val;
    405e:	4b11      	ldr	r3, [pc, #68]	; (40a4 <get_elsterid_canbus+0x90>)
	printk("Sending...\n");	
    4060:	4811      	ldr	r0, [pc, #68]	; (40a8 <get_elsterid_canbus+0x94>)
	buf_prop_val = prop_val;
    4062:	601c      	str	r4, [r3, #0]
	frame.data[3] = (uint8_t)(prop_val->meta.id >> 8);
    4064:	f88d 2013 	strb.w	r2, [sp, #19]
	printk("Sending...\n");	
    4068:	f023 fc33 	bl	278d2 <printk>
	can_send(can_dev, &frame, K_MSEC(1000), NULL, NULL);
    406c:	4b0f      	ldr	r3, [pc, #60]	; (40ac <get_elsterid_canbus+0x98>)
    406e:	6818      	ldr	r0, [r3, #0]
				  void *callback_arg)
{
	const struct can_driver_api *api =
		(const struct can_driver_api *)dev->api;

	return api->send(dev, msg, timeout, callback_isr, callback_arg);
    4070:	2400      	movs	r4, #0
    4072:	6883      	ldr	r3, [r0, #8]
    4074:	e9cd 4400 	strd	r4, r4, [sp]
    4078:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    407c:	689d      	ldr	r5, [r3, #8]
    407e:	a902      	add	r1, sp, #8
    4080:	2300      	movs	r3, #0
    4082:	47a8      	blx	r5
	k_sleep(K_MSEC(1000));
    4084:	2100      	movs	r1, #0
    4086:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    408a:	f023 fb82 	bl	27792 <k_sleep>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    408e:	4804      	ldr	r0, [pc, #16]	; (40a0 <get_elsterid_canbus+0x8c>)
    4090:	f020 ff94 	bl	24fbc <z_impl_k_sem_give>
	bm_led3_set(false);
    4094:	4620      	mov	r0, r4
    4096:	f000 fb43 	bl	4720 <bm_led3_set>
}
    409a:	b007      	add	sp, #28
    409c:	bd30      	pop	{r4, r5, pc}
    409e:	bf00      	nop
    40a0:	20001ea8 	.word	0x20001ea8
    40a4:	200030e0 	.word	0x200030e0
    40a8:	00030460 	.word	0x00030460
    40ac:	200030e4 	.word	0x200030e4

000040b0 <set_elsterid_canbus>:
{
    40b0:	b510      	push	{r4, lr}
    40b2:	b086      	sub	sp, #24
    40b4:	4604      	mov	r4, r0
	struct zcan_frame frame = {
    40b6:	2100      	movs	r1, #0
    40b8:	2210      	movs	r2, #16
    40ba:	a802      	add	r0, sp, #8
    40bc:	f02a f930 	bl	2e320 <memset>
    40c0:	f44f 63d0 	mov.w	r3, #1664	; 0x680
    40c4:	9302      	str	r3, [sp, #8]
    40c6:	2307      	movs	r3, #7
    40c8:	f88d 300c 	strb.w	r3, [sp, #12]
	frame.data[0] = 0x32;
    40cc:	2332      	movs	r3, #50	; 0x32
    40ce:	f88d 3010 	strb.w	r3, [sp, #16]
	frame.data[2] = 0xFA;
    40d2:	23fa      	movs	r3, #250	; 0xfa
    40d4:	f88d 3012 	strb.w	r3, [sp, #18]
	frame.data[3] = (uint8_t)(prop_val->meta.id >> 8);
    40d8:	8823      	ldrh	r3, [r4, #0]
	frame.data[4] = (uint8_t)prop_val->meta.id & 0xff;
    40da:	f88d 3014 	strb.w	r3, [sp, #20]
	frame.data[3] = (uint8_t)(prop_val->meta.id >> 8);
    40de:	0a1a      	lsrs	r2, r3, #8
	frame.data[5] = prop_val->value[0];
    40e0:	68a3      	ldr	r3, [r4, #8]
	frame.data[3] = (uint8_t)(prop_val->meta.id >> 8);
    40e2:	f88d 2013 	strb.w	r2, [sp, #19]
	frame.data[5] = prop_val->value[0];
    40e6:	781a      	ldrb	r2, [r3, #0]
    40e8:	f88d 2015 	strb.w	r2, [sp, #21]
	frame.data[6] = prop_val->value[1];
    40ec:	785b      	ldrb	r3, [r3, #1]
	printk("Sending...\n");
    40ee:	480b      	ldr	r0, [pc, #44]	; (411c <set_elsterid_canbus+0x6c>)
	frame.data[6] = prop_val->value[1];
    40f0:	f88d 3016 	strb.w	r3, [sp, #22]
	printk("Sending...\n");
    40f4:	f023 fbed 	bl	278d2 <printk>
	can_send(can_dev, &frame, K_MSEC(1000), NULL,NULL);
    40f8:	4b09      	ldr	r3, [pc, #36]	; (4120 <set_elsterid_canbus+0x70>)
    40fa:	6818      	ldr	r0, [r3, #0]
    40fc:	2300      	movs	r3, #0
    40fe:	6882      	ldr	r2, [r0, #8]
    4100:	e9cd 3300 	strd	r3, r3, [sp]
    4104:	a902      	add	r1, sp, #8
    4106:	6894      	ldr	r4, [r2, #8]
    4108:	2300      	movs	r3, #0
    410a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    410e:	47a0      	blx	r4
    4110:	4804      	ldr	r0, [pc, #16]	; (4124 <set_elsterid_canbus+0x74>)
    4112:	f020 ff53 	bl	24fbc <z_impl_k_sem_give>
}
    4116:	b006      	add	sp, #24
    4118:	bd10      	pop	{r4, pc}
    411a:	bf00      	nop
    411c:	00030460 	.word	0x00030460
    4120:	200030e4 	.word	0x200030e4
    4124:	20001ec0 	.word	0x20001ec0

00004128 <set>:
{
    4128:	b510      	push	{r4, lr}
	set_elsterid_canbus(val);
    412a:	4610      	mov	r0, r2
    412c:	f7ff ffc0 	bl	40b0 <set_elsterid_canbus>
	return z_impl_k_sem_take(sem, timeout);
    4130:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    4134:	2300      	movs	r3, #0
    4136:	4802      	ldr	r0, [pc, #8]	; (4140 <set+0x18>)
}
    4138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    413c:	f020 bf7a 	b.w	25034 <z_impl_k_sem_take>
    4140:	20001ec0 	.word	0x20001ec0

00004144 <bm_can_init>:
{
    4144:	b538      	push	{r3, r4, r5, lr}
	k_sleep(K_MSEC(3000));
    4146:	2100      	movs	r1, #0
    4148:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
    414c:	f023 fb21 	bl	27792 <k_sleep>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    4150:	482b      	ldr	r0, [pc, #172]	; (4200 <bm_can_init+0xbc>)
	can_dev = device_get_binding("CAN_1");
    4152:	4c2c      	ldr	r4, [pc, #176]	; (4204 <bm_can_init+0xc0>)
    4154:	f01f f8ee 	bl	23334 <z_impl_device_get_binding>
	k_sleep(K_MSEC(500));
    4158:	2100      	movs	r1, #0
	can_dev = device_get_binding("CAN_1");
    415a:	6020      	str	r0, [r4, #0]
	k_sleep(K_MSEC(500));
    415c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4160:	f023 fb17 	bl	27792 <k_sleep>
	printk("1");
    4164:	4828      	ldr	r0, [pc, #160]	; (4208 <bm_can_init+0xc4>)
    4166:	f023 fbb4 	bl	278d2 <printk>
	filter_id = can_attach_isr(can_dev, rx_callback_function, NULL, &my_filter);
    416a:	6820      	ldr	r0, [r4, #0]
				       const struct zcan_filter *filter)
{
	const struct can_driver_api *api =
		(const struct can_driver_api *)dev->api;

	return api->attach_isr(dev, isr, callback_arg, filter);
    416c:	4927      	ldr	r1, [pc, #156]	; (420c <bm_can_init+0xc8>)
    416e:	6883      	ldr	r3, [r0, #8]
    4170:	2200      	movs	r2, #0
    4172:	68dd      	ldr	r5, [r3, #12]
    4174:	4b26      	ldr	r3, [pc, #152]	; (4210 <bm_can_init+0xcc>)
    4176:	47a8      	blx	r5
    4178:	4b26      	ldr	r3, [pc, #152]	; (4214 <bm_can_init+0xd0>)
	if (filter_id < 0)
    417a:	2800      	cmp	r0, #0
    417c:	4601      	mov	r1, r0
	filter_id = can_attach_isr(can_dev, rx_callback_function, NULL, &my_filter);
    417e:	6018      	str	r0, [r3, #0]
	if (filter_id < 0)
    4180:	da02      	bge.n	4188 <bm_can_init+0x44>
		printk("Unable to attach isr [%d]", filter_id);
    4182:	4825      	ldr	r0, [pc, #148]	; (4218 <bm_can_init+0xd4>)
    4184:	f023 fba5 	bl	278d2 <printk>
	printk("2");
    4188:	4824      	ldr	r0, [pc, #144]	; (421c <bm_can_init+0xd8>)
	timing.phase_seg1 = 0x8;
    418a:	4d25      	ldr	r5, [pc, #148]	; (4220 <bm_can_init+0xdc>)
	printk("2");
    418c:	f023 fba1 	bl	278d2 <printk>
	k_sleep(K_MSEC(500));
    4190:	2100      	movs	r1, #0
    4192:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4196:	f023 fafc 	bl	27792 <k_sleep>
	can_register_state_change_isr(can_dev, state_change_callback_function);
    419a:	6820      	ldr	r0, [r4, #0]
				   can_state_change_isr_t isr)
{
	const struct can_driver_api *api =
		(const struct can_driver_api *)dev->api;

	return api->register_state_change_isr(dev, isr);
    419c:	4921      	ldr	r1, [pc, #132]	; (4224 <bm_can_init+0xe0>)
    419e:	6883      	ldr	r3, [r0, #8]
    41a0:	699b      	ldr	r3, [r3, #24]
    41a2:	4798      	blx	r3
	timing.sjw = 0x1;
    41a4:	2201      	movs	r2, #1
	timing.phase_seg1 = 0x8;
    41a6:	2308      	movs	r3, #8
	timing.sjw = 0x1;
    41a8:	802a      	strh	r2, [r5, #0]
	k_sleep(K_MSEC(500));
    41aa:	2100      	movs	r1, #0
	timing.prescaler = 0x7; // Choose this prescaler
    41ac:	2207      	movs	r2, #7
	k_sleep(K_MSEC(500));
    41ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
	timing.phase_seg1 = 0x8;
    41b2:	80ab      	strh	r3, [r5, #4]
	timing.phase_seg2 = 0x8;
    41b4:	80eb      	strh	r3, [r5, #6]
	timing.prescaler = 0x7; // Choose this prescaler
    41b6:	812a      	strh	r2, [r5, #8]
	timing.prop_seg = 0x8;
    41b8:	806b      	strh	r3, [r5, #2]
	k_sleep(K_MSEC(500));
    41ba:	f023 faea 	bl	27792 <k_sleep>
	printk("3");
    41be:	481a      	ldr	r0, [pc, #104]	; (4228 <bm_can_init+0xe4>)
    41c0:	f023 fb87 	bl	278d2 <printk>
	can_set_timing(can_dev, &timing, &timing);
    41c4:	6820      	ldr	r0, [r4, #0]
	return api->set_timing(dev, timing, timing_data);
    41c6:	6883      	ldr	r3, [r0, #8]
    41c8:	462a      	mov	r2, r5
    41ca:	685b      	ldr	r3, [r3, #4]
    41cc:	4629      	mov	r1, r5
    41ce:	4798      	blx	r3
	k_sleep(K_MSEC(500));
    41d0:	2100      	movs	r1, #0
    41d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    41d6:	f023 fadc 	bl	27792 <k_sleep>
	printk("4");
    41da:	4814      	ldr	r0, [pc, #80]	; (422c <bm_can_init+0xe8>)
    41dc:	f023 fb79 	bl	278d2 <printk>
	can_set_mode(can_dev, CAN_NORMAL_MODE);
    41e0:	6820      	ldr	r0, [r4, #0]
	return api->set_mode(dev, mode);
    41e2:	6883      	ldr	r3, [r0, #8]
    41e4:	2100      	movs	r1, #0
    41e6:	681b      	ldr	r3, [r3, #0]
    41e8:	4798      	blx	r3
	k_sleep(K_MSEC(500));
    41ea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    41ee:	2100      	movs	r1, #0
    41f0:	f023 facf 	bl	27792 <k_sleep>
	printk("5");
    41f4:	480e      	ldr	r0, [pc, #56]	; (4230 <bm_can_init+0xec>)
}
    41f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printk("5");
    41fa:	f023 bb6a 	b.w	278d2 <printk>
    41fe:	bf00      	nop
    4200:	0003043e 	.word	0x0003043e
    4204:	200030e4 	.word	0x200030e4
    4208:	00030d3f 	.word	0x00030d3f
    420c:	00003fa9 	.word	0x00003fa9
    4210:	0002f4f0 	.word	0x0002f4f0
    4214:	200030e8 	.word	0x200030e8
    4218:	00030444 	.word	0x00030444
    421c:	00033abb 	.word	0x00033abb
    4220:	2000560c 	.word	0x2000560c
    4224:	00003fe9 	.word	0x00003fe9
    4228:	00033ac0 	.word	0x00033ac0
    422c:	00033ac5 	.word	0x00033ac5
    4230:	0003045e 	.word	0x0003045e

00004234 <vorlaufsolltemp_get>:
	return 0;
}

static int vorlaufsolltemp_get(struct bt_mesh_sensor *sensor,
					struct bt_mesh_msg_ctx *ctx, struct sensor_value *rsp)
{
    4234:	b538      	push	{r3, r4, r5, lr}
	get_elsterid_canbus(&propsval[15]);
    4236:	4c0b      	ldr	r4, [pc, #44]	; (4264 <vorlaufsolltemp_get+0x30>)
    4238:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
{
    423c:	4615      	mov	r5, r2
	get_elsterid_canbus(&propsval[15]);
    423e:	f7ff fee9 	bl	4014 <get_elsterid_canbus>
	uint16_t temp = propsval[15].value[0] | (propsval[15].value[1] << 8);
    4242:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    4246:	7858      	ldrb	r0, [r3, #1]
    4248:	781b      	ldrb	r3, [r3, #0]
	doubleToSensorValue((double)temp/10, rsp);
    424a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    424e:	f7fd f899 	bl	1384 <__aeabi_ui2d>
    4252:	4b05      	ldr	r3, [pc, #20]	; (4268 <vorlaufsolltemp_get+0x34>)
    4254:	2200      	movs	r2, #0
    4256:	f7fd fa39 	bl	16cc <__aeabi_ddiv>
    425a:	462a      	mov	r2, r5
    425c:	f7fd fddc 	bl	1e18 <doubleToSensorValue>
	return 0;
}
    4260:	2000      	movs	r0, #0
    4262:	bd38      	pop	{r3, r4, r5, pc}
    4264:	200030ec 	.word	0x200030ec
    4268:	40240000 	.word	0x40240000

0000426c <verdampfertemp_get>:
{
    426c:	b538      	push	{r3, r4, r5, lr}
	get_elsterid_canbus(&propsval[14]);
    426e:	4c0b      	ldr	r4, [pc, #44]	; (429c <verdampfertemp_get+0x30>)
    4270:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
{
    4274:	4615      	mov	r5, r2
	get_elsterid_canbus(&propsval[14]);
    4276:	f7ff fecd 	bl	4014 <get_elsterid_canbus>
	uint16_t temp = propsval[14].value[0] | (propsval[14].value[1] << 8);
    427a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    427e:	7858      	ldrb	r0, [r3, #1]
    4280:	781b      	ldrb	r3, [r3, #0]
	doubleToSensorValue((double)temp / 10, rsp);
    4282:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    4286:	f7fd f87d 	bl	1384 <__aeabi_ui2d>
    428a:	4b05      	ldr	r3, [pc, #20]	; (42a0 <verdampfertemp_get+0x34>)
    428c:	2200      	movs	r2, #0
    428e:	f7fd fa1d 	bl	16cc <__aeabi_ddiv>
    4292:	462a      	mov	r2, r5
    4294:	f7fd fdc0 	bl	1e18 <doubleToSensorValue>
}
    4298:	2000      	movs	r0, #0
    429a:	bd38      	pop	{r3, r4, r5, pc}
    429c:	200030ec 	.word	0x200030ec
    42a0:	40240000 	.word	0x40240000

000042a4 <vorlaufisttemp_get>:
{
    42a4:	b538      	push	{r3, r4, r5, lr}
	get_elsterid_canbus(&propsval[10]);
    42a6:	4c0b      	ldr	r4, [pc, #44]	; (42d4 <vorlaufisttemp_get+0x30>)
    42a8:	f104 0078 	add.w	r0, r4, #120	; 0x78
{
    42ac:	4615      	mov	r5, r2
	get_elsterid_canbus(&propsval[10]);
    42ae:	f7ff feb1 	bl	4014 <get_elsterid_canbus>
	uint16_t temp = propsval[10].value[0] | (propsval[10].value[1] << 8);
    42b2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    42b6:	7858      	ldrb	r0, [r3, #1]
    42b8:	781b      	ldrb	r3, [r3, #0]
	doubleToSensorValue((double)temp / 10, rsp);
    42ba:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    42be:	f7fd f861 	bl	1384 <__aeabi_ui2d>
    42c2:	4b05      	ldr	r3, [pc, #20]	; (42d8 <vorlaufisttemp_get+0x34>)
    42c4:	2200      	movs	r2, #0
    42c6:	f7fd fa01 	bl	16cc <__aeabi_ddiv>
    42ca:	462a      	mov	r2, r5
    42cc:	f7fd fda4 	bl	1e18 <doubleToSensorValue>
}
    42d0:	2000      	movs	r0, #0
    42d2:	bd38      	pop	{r3, r4, r5, pc}
    42d4:	200030ec 	.word	0x200030ec
    42d8:	40240000 	.word	0x40240000

000042dc <speichersoll_get>:
{
    42dc:	b538      	push	{r3, r4, r5, lr}
	get_elsterid_canbus(&propsval[7]);
    42de:	4c0b      	ldr	r4, [pc, #44]	; (430c <speichersoll_get+0x30>)
    42e0:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    42e4:	4615      	mov	r5, r2
	get_elsterid_canbus(&propsval[7]);
    42e6:	f7ff fe95 	bl	4014 <get_elsterid_canbus>
	uint16_t temp = propsval[7].value[0] | (propsval[7].value[1] << 8);
    42ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    42ec:	7858      	ldrb	r0, [r3, #1]
    42ee:	781b      	ldrb	r3, [r3, #0]
	doubleToSensorValue((double)temp/10, rsp);
    42f0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    42f4:	f7fd f846 	bl	1384 <__aeabi_ui2d>
    42f8:	4b05      	ldr	r3, [pc, #20]	; (4310 <speichersoll_get+0x34>)
    42fa:	2200      	movs	r2, #0
    42fc:	f7fd f9e6 	bl	16cc <__aeabi_ddiv>
    4300:	462a      	mov	r2, r5
    4302:	f7fd fd89 	bl	1e18 <doubleToSensorValue>
}
    4306:	2000      	movs	r0, #0
    4308:	bd38      	pop	{r3, r4, r5, pc}
    430a:	bf00      	nop
    430c:	200030ec 	.word	0x200030ec
    4310:	40240000 	.word	0x40240000

00004314 <speicheristtemp_get>:
{
    4314:	b538      	push	{r3, r4, r5, lr}
	get_elsterid_canbus(&propsval[2]);
    4316:	4c0b      	ldr	r4, [pc, #44]	; (4344 <speicheristtemp_get+0x30>)
    4318:	f104 0018 	add.w	r0, r4, #24
{
    431c:	4615      	mov	r5, r2
	get_elsterid_canbus(&propsval[2]);
    431e:	f7ff fe79 	bl	4014 <get_elsterid_canbus>
	uint16_t temp = propsval[2].value[0] | (propsval[2].value[1] << 8);
    4322:	6a23      	ldr	r3, [r4, #32]
    4324:	7858      	ldrb	r0, [r3, #1]
    4326:	781b      	ldrb	r3, [r3, #0]
	doubleToSensorValue((double)temp / 10, rsp);
    4328:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    432c:	f7fd f82a 	bl	1384 <__aeabi_ui2d>
    4330:	4b05      	ldr	r3, [pc, #20]	; (4348 <speicheristtemp_get+0x34>)
    4332:	2200      	movs	r2, #0
    4334:	f7fd f9ca 	bl	16cc <__aeabi_ddiv>
    4338:	462a      	mov	r2, r5
    433a:	f7fd fd6d 	bl	1e18 <doubleToSensorValue>
}
    433e:	2000      	movs	r0, #0
    4340:	bd38      	pop	{r3, r4, r5, pc}
    4342:	bf00      	nop
    4344:	200030ec 	.word	0x200030ec
    4348:	40240000 	.word	0x40240000

0000434c <outsidetemp_get>:
{
    434c:	b538      	push	{r3, r4, r5, lr}
	get_elsterid_canbus(&propsval[1]);
    434e:	4c0b      	ldr	r4, [pc, #44]	; (437c <outsidetemp_get+0x30>)
    4350:	f104 000c 	add.w	r0, r4, #12
{
    4354:	4615      	mov	r5, r2
	get_elsterid_canbus(&propsval[1]);
    4356:	f7ff fe5d 	bl	4014 <get_elsterid_canbus>
	uint16_t temp = propsval[1].value[0] | (propsval[1].value[1] << 8);
    435a:	6963      	ldr	r3, [r4, #20]
    435c:	7858      	ldrb	r0, [r3, #1]
    435e:	781b      	ldrb	r3, [r3, #0]
	doubleToSensorValue((double)temp / 10, rsp);
    4360:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    4364:	f7fd f80e 	bl	1384 <__aeabi_ui2d>
    4368:	4b05      	ldr	r3, [pc, #20]	; (4380 <outsidetemp_get+0x34>)
    436a:	2200      	movs	r2, #0
    436c:	f7fd f9ae 	bl	16cc <__aeabi_ddiv>
    4370:	462a      	mov	r2, r5
    4372:	f7fd fd51 	bl	1e18 <doubleToSensorValue>
}
    4376:	2000      	movs	r0, #0
    4378:	bd38      	pop	{r3, r4, r5, pc}
    437a:	bf00      	nop
    437c:	200030ec 	.word	0x200030ec
    4380:	40240000 	.word	0x40240000

00004384 <bm_blemesh_model_handler_init>:


const struct bt_mesh_comp *bm_blemesh_model_handler_init(void)
{
	// Init the Properties
	props[0].id = 0x0003;
    4384:	4a57      	ldr	r2, [pc, #348]	; (44e4 <bm_blemesh_model_handler_init+0x160>)
    4386:	2103      	movs	r1, #3
{
    4388:	b530      	push	{r4, r5, lr}
	props[0].id = 0x0003;
    438a:	8011      	strh	r1, [r2, #0]
	props[1].id = 0x000c;
	props[1].user_access = BT_MESH_PROP_ACCESS_READ; // Aussentemp
	props[2].id = 0x000e;
	props[2].user_access = BT_MESH_PROP_ACCESS_READ; // Speicheristtemp
	props[3].id = 0x0013;
	props[3].user_access = BT_MESH_PROP_ACCESS_READ_WRITE; // EINSTELL_SPEICHERSOLLTEMP
    438c:	7391      	strb	r1, [r2, #14]
	props[4].id = 0x0022;
	props[4].user_access = BT_MESH_PROP_ACCESS_READ_WRITE; // HYSTERESEZEIT
    438e:	7491      	strb	r1, [r2, #18]
	props[5].id = 0x010e;
	props[5].user_access = BT_MESH_PROP_ACCESS_READ_WRITE; // HEIZKURVE
    4390:	7591      	strb	r1, [r2, #22]
	props[6].id = 0x0112;
	props[6].user_access = BT_MESH_PROP_ACCESS_READ_WRITE; // PROGRAMMSCHALTER
    4392:	7691      	strb	r1, [r2, #26]
	props[7].id = 0x0003;
    4394:	8391      	strh	r1, [r2, #28]
	props[7].user_access = BT_MESH_PROP_ACCESS_READ_WRITE; // SPEICHERSOLLTEMP
    4396:	7791      	strb	r1, [r2, #30]
	props[8].id = 0x01c4;
    4398:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    439c:	8411      	strh	r1, [r2, #32]
	props[8].user_access = BT_MESH_PROP_ACCESS_READ; //  LAUFZEIT_WP1
	props[9].id = 0x01c5;
    439e:	f240 11c5 	movw	r1, #453	; 0x1c5
    43a2:	8491      	strh	r1, [r2, #36]	; 0x24
	props[1].id = 0x000c;
    43a4:	200c      	movs	r0, #12
	props[9].user_access = BT_MESH_PROP_ACCESS_READ; // LAUFZEIT_WP2
	props[10].id = 0x01d6;
    43a6:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
	props[1].id = 0x000c;
    43aa:	8090      	strh	r0, [r2, #4]
	props[10].id = 0x01d6;
    43ac:	8511      	strh	r1, [r2, #40]	; 0x28
	props[2].id = 0x000e;
    43ae:	200e      	movs	r0, #14
	props[10].user_access = BT_MESH_PROP_ACCESS_READ; // WPVORLAUFIST
	props[11].id = 0x0259;
    43b0:	f240 2159 	movw	r1, #601	; 0x259
	props[2].id = 0x000e;
    43b4:	8110      	strh	r0, [r2, #8]
	props[11].id = 0x0259;
    43b6:	8591      	strh	r1, [r2, #44]	; 0x2c
	props[3].id = 0x0013;
    43b8:	2013      	movs	r0, #19
	props[11].user_access = BT_MESH_PROP_ACCESS_READ; // LAUFZEIT_DHC1
	props[12].id = 0x025a;
    43ba:	f240 215a 	movw	r1, #602	; 0x25a
	props[3].id = 0x0013;
    43be:	8190      	strh	r0, [r2, #12]
	props[12].id = 0x025a;
    43c0:	8611      	strh	r1, [r2, #48]	; 0x30
	props[4].id = 0x0022;
    43c2:	2022      	movs	r0, #34	; 0x22
	props[12].user_access = BT_MESH_PROP_ACCESS_READ; // LAUFZEIT_DHC2
	props[13].id = 0x0331;
    43c4:	f240 3131 	movw	r1, #817	; 0x331
	props[4].id = 0x0022;
    43c8:	8210      	strh	r0, [r2, #16]
	props[13].id = 0x0331;
    43ca:	8691      	strh	r1, [r2, #52]	; 0x34
	props[14].id = 0x0333;
	props[14].user_access = BT_MESH_PROP_ACCESS_READ; // Verdampfertemp
	props[15].id = 0x01bf;
	props[15].user_access = BT_MESH_PROP_ACCESS_READ; // Vorlaufsolltemp
	// Init the Properties Values
	propsval[0].meta = props[0];
    43cc:	4615      	mov	r5, r2
	props[5].id = 0x010e;
    43ce:	f44f 7087 	mov.w	r0, #270	; 0x10e
	props[14].id = 0x0333;
    43d2:	f240 3133 	movw	r1, #819	; 0x333
	props[0].user_access = BT_MESH_PROP_ACCESS_READ; // Speichersolltemp
    43d6:	2301      	movs	r3, #1
	props[5].id = 0x010e;
    43d8:	8290      	strh	r0, [r2, #20]
	props[14].id = 0x0333;
    43da:	8711      	strh	r1, [r2, #56]	; 0x38
	props[6].id = 0x0112;
    43dc:	f44f 7089 	mov.w	r0, #274	; 0x112
	props[15].id = 0x01bf;
    43e0:	f240 11bf 	movw	r1, #447	; 0x1bf
	props[0].user_access = BT_MESH_PROP_ACCESS_READ; // Speichersolltemp
    43e4:	7093      	strb	r3, [r2, #2]
	props[1].user_access = BT_MESH_PROP_ACCESS_READ; // Aussentemp
    43e6:	7193      	strb	r3, [r2, #6]
	props[2].user_access = BT_MESH_PROP_ACCESS_READ; // Speicheristtemp
    43e8:	7293      	strb	r3, [r2, #10]
	props[6].id = 0x0112;
    43ea:	8310      	strh	r0, [r2, #24]
	props[8].user_access = BT_MESH_PROP_ACCESS_READ; //  LAUFZEIT_WP1
    43ec:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
	props[9].user_access = BT_MESH_PROP_ACCESS_READ; // LAUFZEIT_WP2
    43f0:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	props[10].user_access = BT_MESH_PROP_ACCESS_READ; // WPVORLAUFIST
    43f4:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
	props[11].user_access = BT_MESH_PROP_ACCESS_READ; // LAUFZEIT_DHC1
    43f8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	props[12].user_access = BT_MESH_PROP_ACCESS_READ; // LAUFZEIT_DHC2
    43fc:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	props[13].user_access = BT_MESH_PROP_ACCESS_READ; // WARTEZEIT_DHC
    4400:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	props[14].user_access = BT_MESH_PROP_ACCESS_READ; // Verdampfertemp
    4404:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
	props[15].id = 0x01bf;
    4408:	8791      	strh	r1, [r2, #60]	; 0x3c
	props[15].user_access = BT_MESH_PROP_ACCESS_READ; // Vorlaufsolltemp
    440a:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
	propsval[0].meta = props[0];
    440e:	4b36      	ldr	r3, [pc, #216]	; (44e8 <bm_blemesh_model_handler_init+0x164>)
    4410:	f855 0b04 	ldr.w	r0, [r5], #4
	propsval[0].size = 2;
	propsval[0].value = (uint8_t *)&values_16[0];
    4414:	4935      	ldr	r1, [pc, #212]	; (44ec <bm_blemesh_model_handler_init+0x168>)
	propsval[0].meta = props[0];
    4416:	6018      	str	r0, [r3, #0]
	propsval[1].meta = props[1];
    4418:	6828      	ldr	r0, [r5, #0]
	propsval[0].value = (uint8_t *)&values_16[0];
    441a:	6099      	str	r1, [r3, #8]
	propsval[0].size = 2;
    441c:	2402      	movs	r4, #2
	propsval[1].size = 2;
    441e:	e9c3 0403 	strd	r0, r4, [r3, #12]
	propsval[1].value = (uint8_t *)&values_16[1];
    4422:	1908      	adds	r0, r1, r4
    4424:	6158      	str	r0, [r3, #20]
	propsval[2].meta = props[2];
    4426:	6890      	ldr	r0, [r2, #8]
	propsval[0].size = 2;
    4428:	605c      	str	r4, [r3, #4]
	propsval[2].size = 2;
    442a:	e9c3 0406 	strd	r0, r4, [r3, #24]
	propsval[2].value = (uint8_t *)&values_16[2];
    442e:	1d08      	adds	r0, r1, #4
    4430:	6218      	str	r0, [r3, #32]
	propsval[3].meta = props[3];
    4432:	68d0      	ldr	r0, [r2, #12]
	propsval[3].size = 2;
    4434:	e9c3 0409 	strd	r0, r4, [r3, #36]	; 0x24
	propsval[3].value = (uint8_t *)&values_16[3];
    4438:	1d88      	adds	r0, r1, #6
    443a:	62d8      	str	r0, [r3, #44]	; 0x2c
	propsval[4].meta = props[4];
    443c:	6910      	ldr	r0, [r2, #16]
	propsval[4].size = 2;
    443e:	e9c3 040c 	strd	r0, r4, [r3, #48]	; 0x30
	propsval[4].value = (uint8_t *)&values_16[4];
    4442:	f101 0008 	add.w	r0, r1, #8
    4446:	6398      	str	r0, [r3, #56]	; 0x38
	propsval[5].meta = props[5];
    4448:	6950      	ldr	r0, [r2, #20]
	propsval[5].size = 2;
    444a:	e9c3 040f 	strd	r0, r4, [r3, #60]	; 0x3c
	propsval[5].value = (uint8_t *)&values_16[5];
    444e:	f101 000a 	add.w	r0, r1, #10
    4452:	6458      	str	r0, [r3, #68]	; 0x44
	propsval[6].meta = props[6];
    4454:	6990      	ldr	r0, [r2, #24]
	propsval[6].size = 2;
    4456:	e9c3 0412 	strd	r0, r4, [r3, #72]	; 0x48
	propsval[6].value = (uint8_t *)&values_16[6];
    445a:	f101 000c 	add.w	r0, r1, #12
    445e:	6518      	str	r0, [r3, #80]	; 0x50
	propsval[7].meta = props[7];
    4460:	69d0      	ldr	r0, [r2, #28]
	propsval[7].size = 2;
    4462:	e9c3 0415 	strd	r0, r4, [r3, #84]	; 0x54
	propsval[7].value = (uint8_t *)&values_16[7];
    4466:	f101 000e 	add.w	r0, r1, #14
    446a:	65d8      	str	r0, [r3, #92]	; 0x5c
	propsval[8].meta = props[8];
    446c:	6a10      	ldr	r0, [r2, #32]
	propsval[8].size = 2;
    446e:	e9c3 0418 	strd	r0, r4, [r3, #96]	; 0x60
	propsval[8].value = (uint8_t *)&values_16[8];
    4472:	f101 0010 	add.w	r0, r1, #16
    4476:	6698      	str	r0, [r3, #104]	; 0x68
	propsval[9].meta = props[9];
    4478:	6a50      	ldr	r0, [r2, #36]	; 0x24
	propsval[9].size = 2;
    447a:	e9c3 041b 	strd	r0, r4, [r3, #108]	; 0x6c
	propsval[9].value = (uint8_t *)&values_16[9];
    447e:	f101 0012 	add.w	r0, r1, #18
    4482:	6758      	str	r0, [r3, #116]	; 0x74
	propsval[10].meta = props[10];
    4484:	6a90      	ldr	r0, [r2, #40]	; 0x28
	propsval[10].size = 2;
    4486:	e9c3 041e 	strd	r0, r4, [r3, #120]	; 0x78
	propsval[10].value = (uint8_t *)&values_16[10];
    448a:	f101 0014 	add.w	r0, r1, #20
    448e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
	propsval[11].meta = props[11];
    4492:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	propsval[11].size = 2;
    4494:	e9c3 0421 	strd	r0, r4, [r3, #132]	; 0x84
	propsval[11].value = (uint8_t *)&values_16[11];
    4498:	f101 0016 	add.w	r0, r1, #22
    449c:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
	propsval[12].meta = props[12];
    44a0:	6b10      	ldr	r0, [r2, #48]	; 0x30
	propsval[12].size = 2;
    44a2:	e9c3 0424 	strd	r0, r4, [r3, #144]	; 0x90
	propsval[12].value = (uint8_t *)&values_16[12];
    44a6:	f101 0018 	add.w	r0, r1, #24
    44aa:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	propsval[13].meta = props[13];
    44ae:	6b50      	ldr	r0, [r2, #52]	; 0x34
	propsval[13].size = 2;
    44b0:	e9c3 0427 	strd	r0, r4, [r3, #156]	; 0x9c
	propsval[13].value = (uint8_t *)&values_16[13];
    44b4:	f101 001a 	add.w	r0, r1, #26
    44b8:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
	propsval[14].meta = props[14];
    44bc:	6b90      	ldr	r0, [r2, #56]	; 0x38
	propsval[14].size = 2;
    44be:	e9c3 042a 	strd	r0, r4, [r3, #168]	; 0xa8
	propsval[14].value = (uint8_t *)&values_16[14];
    44c2:	f101 001c 	add.w	r0, r1, #28
    44c6:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
	propsval[15].meta = props[15];
    44ca:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
	propsval[15].size = 2;
	propsval[15].value = (uint8_t *)&values_16[15];
    44cc:	311e      	adds	r1, #30
	propsval[15].size = 2;
    44ce:	e9c3 042d 	strd	r0, r4, [r3, #180]	; 0xb4
	propsval[15].value = (uint8_t *)&values_16[15];
    44d2:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    44d6:	4a06      	ldr	r2, [pc, #24]	; (44f0 <bm_blemesh_model_handler_init+0x16c>)
    44d8:	2300      	movs	r3, #0
    44da:	6093      	str	r3, [r2, #8]
    44dc:	4a05      	ldr	r2, [pc, #20]	; (44f4 <bm_blemesh_model_handler_init+0x170>)
	// Submit the Worker
	//k_delayed_work_submit(&publicita_work, K_MSEC(5000));


	return &comp;
}
    44de:	4806      	ldr	r0, [pc, #24]	; (44f8 <bm_blemesh_model_handler_init+0x174>)
    44e0:	6093      	str	r3, [r2, #8]
    44e2:	bd30      	pop	{r4, r5, pc}
    44e4:	2000550c 	.word	0x2000550c
    44e8:	200030ec 	.word	0x200030ec
    44ec:	20005616 	.word	0x20005616
    44f0:	20001ea8 	.word	0x20001ea8
    44f4:	20001ec0 	.word	0x20001ec0
    44f8:	0002f4c8 	.word	0x0002f4c8

000044fc <gpio_pin_configure>:
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_configure(const struct device *port,
				     gpio_pin_t pin,
				     gpio_flags_t flags)
{
    44fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    4500:	f412 6540 	ands.w	r5, r2, #3072	; 0xc00
{
    4504:	4606      	mov	r6, r0
    4506:	4688      	mov	r8, r1
    4508:	4614      	mov	r4, r2
	const struct gpio_driver_config *const cfg =
    450a:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct gpio_driver_data *data =
    450e:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    4510:	d00c      	beq.n	452c <gpio_pin_configure+0x30>
    4512:	0593      	lsls	r3, r2, #22
    4514:	d40a      	bmi.n	452c <gpio_pin_configure+0x30>
    4516:	4919      	ldr	r1, [pc, #100]	; (457c <gpio_pin_configure+0x80>)
    4518:	4819      	ldr	r0, [pc, #100]	; (4580 <gpio_pin_configure+0x84>)
    451a:	f240 2236 	movw	r2, #566	; 0x236
    451e:	f023 f9d8 	bl	278d2 <printk>
    4522:	f240 2136 	movw	r1, #566	; 0x236
    4526:	4815      	ldr	r0, [pc, #84]	; (457c <gpio_pin_configure+0x80>)
    4528:	f023 fc4c 	bl	27dc4 <assert_post_action>

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    452c:	04e0      	lsls	r0, r4, #19
    452e:	d504      	bpl.n	453a <gpio_pin_configure+0x3e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    4530:	b11d      	cbz	r5, 453a <gpio_pin_configure+0x3e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4532:	07e1      	lsls	r1, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
    4534:	bf48      	it	mi
    4536:	f484 54e0 	eormi.w	r4, r4, #7168	; 0x1c00
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    453a:	2301      	movs	r3, #1
    453c:	fa03 f508 	lsl.w	r5, r3, r8
    4540:	f8d9 3000 	ldr.w	r3, [r9]
    4544:	421d      	tst	r5, r3
    4546:	d10a      	bne.n	455e <gpio_pin_configure+0x62>
    4548:	490c      	ldr	r1, [pc, #48]	; (457c <gpio_pin_configure+0x80>)
    454a:	480d      	ldr	r0, [pc, #52]	; (4580 <gpio_pin_configure+0x84>)
    454c:	f240 2245 	movw	r2, #581	; 0x245
    4550:	f023 f9bf 	bl	278d2 <printk>
    4554:	f240 2145 	movw	r1, #581	; 0x245
    4558:	4808      	ldr	r0, [pc, #32]	; (457c <gpio_pin_configure+0x80>)
    455a:	f023 fc33 	bl	27dc4 <assert_post_action>
	return api->pin_configure(port, pin, flags);
    455e:	68b3      	ldr	r3, [r6, #8]
    4560:	4622      	mov	r2, r4
    4562:	681b      	ldr	r3, [r3, #0]
    4564:	4641      	mov	r1, r8
    4566:	4630      	mov	r0, r6
    4568:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    456a:	b928      	cbnz	r0, 4578 <gpio_pin_configure+0x7c>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    456c:	683b      	ldr	r3, [r7, #0]
    456e:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4570:	bf4c      	ite	mi
    4572:	432b      	orrmi	r3, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4574:	43ab      	bicpl	r3, r5
    4576:	603b      	str	r3, [r7, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
    4578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    457c:	00030655 	.word	0x00030655
    4580:	0003067f 	.word	0x0003067f

00004584 <gpio_pin_set>:
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    4584:	6843      	ldr	r3, [r0, #4]
{
    4586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    458a:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
    458c:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    458e:	2501      	movs	r5, #1
    4590:	408d      	lsls	r5, r1
    4592:	421d      	tst	r5, r3
{
    4594:	4604      	mov	r4, r0
    4596:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    4598:	d10a      	bne.n	45b0 <gpio_pin_set+0x2c>
    459a:	4915      	ldr	r1, [pc, #84]	; (45f0 <gpio_pin_set+0x6c>)
    459c:	4815      	ldr	r0, [pc, #84]	; (45f4 <gpio_pin_set+0x70>)
    459e:	f240 32eb 	movw	r2, #1003	; 0x3eb
    45a2:	f023 f996 	bl	278d2 <printk>
    45a6:	f240 31eb 	movw	r1, #1003	; 0x3eb
    45aa:	4811      	ldr	r0, [pc, #68]	; (45f0 <gpio_pin_set+0x6c>)
    45ac:	f023 fc0a 	bl	27dc4 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    45b0:	683b      	ldr	r3, [r7, #0]
    45b2:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    45b4:	6863      	ldr	r3, [r4, #4]
    45b6:	681b      	ldr	r3, [r3, #0]
    45b8:	bf18      	it	ne
    45ba:	f086 0601 	eorne.w	r6, r6, #1
    45be:	421d      	tst	r5, r3
    45c0:	d10a      	bne.n	45d8 <gpio_pin_set+0x54>
    45c2:	490b      	ldr	r1, [pc, #44]	; (45f0 <gpio_pin_set+0x6c>)
    45c4:	480b      	ldr	r0, [pc, #44]	; (45f4 <gpio_pin_set+0x70>)
    45c6:	f240 32c1 	movw	r2, #961	; 0x3c1
    45ca:	f023 f982 	bl	278d2 <printk>
    45ce:	f240 31c1 	movw	r1, #961	; 0x3c1
    45d2:	4807      	ldr	r0, [pc, #28]	; (45f0 <gpio_pin_set+0x6c>)
    45d4:	f023 fbf6 	bl	27dc4 <assert_post_action>
	if (value != 0)	{
    45d8:	b136      	cbz	r6, 45e8 <gpio_pin_set+0x64>
	return api->port_set_bits_raw(port, pins);
    45da:	68a3      	ldr	r3, [r4, #8]
    45dc:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    45de:	4629      	mov	r1, r5
    45e0:	4620      	mov	r0, r4
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
    45e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
    45e6:	4718      	bx	r3
    45e8:	68a3      	ldr	r3, [r4, #8]
    45ea:	691b      	ldr	r3, [r3, #16]
    45ec:	e7f7      	b.n	45de <gpio_pin_set+0x5a>
    45ee:	bf00      	nop
    45f0:	00030655 	.word	0x00030655
    45f4:	0003067f 	.word	0x0003067f

000045f8 <bm_init_leds>:
  k_delayed_work_init(&buttons_debounce, buttons_debounce_fn);
}


/* Init the Leds */
void bm_init_leds() {
    45f8:	b510      	push	{r4, lr}
    45fa:	482a      	ldr	r0, [pc, #168]	; (46a4 <bm_init_leds+0xac>)
    45fc:	f01e fe9a 	bl	23334 <z_impl_device_get_binding>
  dev_led0 = device_get_binding(LED0);
    4600:	4a29      	ldr	r2, [pc, #164]	; (46a8 <bm_init_leds+0xb0>)
    4602:	6010      	str	r0, [r2, #0]
  if (dev_led0 == NULL) {
    4604:	b920      	cbnz	r0, 4610 <bm_init_leds+0x18>
    printk("Error no LED0 found");
    4606:	4829      	ldr	r0, [pc, #164]	; (46ac <bm_init_leds+0xb4>)
  ret = gpio_pin_configure(dev_led3, PIN_LED3, GPIO_OUTPUT_INACTIVE | FLAGS_LED3);
  if (ret < 0) {
    printk("Error in configuration of led3 pin (err %d)", ret);
    return;
  }
}
    4608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("Error no LED1 found");
    460c:	f023 b961 	b.w	278d2 <printk>
  ret = gpio_pin_configure(dev_led0, PIN_LED0, GPIO_OUTPUT_INACTIVE | FLAGS_LED0);
    4610:	2106      	movs	r1, #6
    4612:	f241 6201 	movw	r2, #5633	; 0x1601
    4616:	f7ff ff71 	bl	44fc <gpio_pin_configure>
    461a:	4c25      	ldr	r4, [pc, #148]	; (46b0 <bm_init_leds+0xb8>)
  if (ret < 0) {
    461c:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led0, PIN_LED0, GPIO_OUTPUT_INACTIVE | FLAGS_LED0);
    461e:	4601      	mov	r1, r0
    4620:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    4622:	da04      	bge.n	462e <bm_init_leds+0x36>
    printk("Error in configuration of led0 pin (err %d)", ret);
    4624:	4823      	ldr	r0, [pc, #140]	; (46b4 <bm_init_leds+0xbc>)
}
    4626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("Error in configuration of led3 pin (err %d)", ret);
    462a:	f023 b952 	b.w	278d2 <printk>
    462e:	481d      	ldr	r0, [pc, #116]	; (46a4 <bm_init_leds+0xac>)
    4630:	f01e fe80 	bl	23334 <z_impl_device_get_binding>
  dev_led1 = device_get_binding(LED1);
    4634:	4a20      	ldr	r2, [pc, #128]	; (46b8 <bm_init_leds+0xc0>)
    4636:	6010      	str	r0, [r2, #0]
  if (dev_led1 == NULL) {
    4638:	b908      	cbnz	r0, 463e <bm_init_leds+0x46>
    printk("Error no LED1 found");
    463a:	4820      	ldr	r0, [pc, #128]	; (46bc <bm_init_leds+0xc4>)
    463c:	e7e4      	b.n	4608 <bm_init_leds+0x10>
  ret = gpio_pin_configure(dev_led1, PIN_LED1, GPIO_OUTPUT_INACTIVE | FLAGS_LED1);
    463e:	2108      	movs	r1, #8
    4640:	f241 6201 	movw	r2, #5633	; 0x1601
    4644:	f7ff ff5a 	bl	44fc <gpio_pin_configure>
  if (ret < 0) {
    4648:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led1, PIN_LED1, GPIO_OUTPUT_INACTIVE | FLAGS_LED1);
    464a:	4601      	mov	r1, r0
    464c:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    464e:	da01      	bge.n	4654 <bm_init_leds+0x5c>
    printk("Error in configuration of led1 pin (err %d)", ret);
    4650:	481b      	ldr	r0, [pc, #108]	; (46c0 <bm_init_leds+0xc8>)
    4652:	e7e8      	b.n	4626 <bm_init_leds+0x2e>
    4654:	481b      	ldr	r0, [pc, #108]	; (46c4 <bm_init_leds+0xcc>)
    4656:	f01e fe6d 	bl	23334 <z_impl_device_get_binding>
  dev_led2 = device_get_binding(LED2);
    465a:	4a1b      	ldr	r2, [pc, #108]	; (46c8 <bm_init_leds+0xd0>)
    465c:	6010      	str	r0, [r2, #0]
  if (dev_led2 == NULL) {
    465e:	b908      	cbnz	r0, 4664 <bm_init_leds+0x6c>
    printk("Error no LED2 found");
    4660:	481a      	ldr	r0, [pc, #104]	; (46cc <bm_init_leds+0xd4>)
    4662:	e7d1      	b.n	4608 <bm_init_leds+0x10>
  ret = gpio_pin_configure(dev_led2, PIN_LED2, GPIO_OUTPUT_INACTIVE | FLAGS_LED2);
    4664:	2109      	movs	r1, #9
    4666:	f241 6201 	movw	r2, #5633	; 0x1601
    466a:	f7ff ff47 	bl	44fc <gpio_pin_configure>
  if (ret < 0) {
    466e:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led2, PIN_LED2, GPIO_OUTPUT_INACTIVE | FLAGS_LED2);
    4670:	4601      	mov	r1, r0
    4672:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    4674:	da01      	bge.n	467a <bm_init_leds+0x82>
    printk("Error in configuration of led2 pin (err %d)", ret);
    4676:	4816      	ldr	r0, [pc, #88]	; (46d0 <bm_init_leds+0xd8>)
    4678:	e7d5      	b.n	4626 <bm_init_leds+0x2e>
    467a:	480a      	ldr	r0, [pc, #40]	; (46a4 <bm_init_leds+0xac>)
    467c:	f01e fe5a 	bl	23334 <z_impl_device_get_binding>
  dev_led3 = device_get_binding(LED3);
    4680:	4a14      	ldr	r2, [pc, #80]	; (46d4 <bm_init_leds+0xdc>)
    4682:	6010      	str	r0, [r2, #0]
  if (dev_led3 == NULL) {
    4684:	b908      	cbnz	r0, 468a <bm_init_leds+0x92>
    printk("Error no LED3 found");
    4686:	4814      	ldr	r0, [pc, #80]	; (46d8 <bm_init_leds+0xe0>)
    4688:	e7be      	b.n	4608 <bm_init_leds+0x10>
  ret = gpio_pin_configure(dev_led3, PIN_LED3, GPIO_OUTPUT_INACTIVE | FLAGS_LED3);
    468a:	210c      	movs	r1, #12
    468c:	f241 6201 	movw	r2, #5633	; 0x1601
    4690:	f7ff ff34 	bl	44fc <gpio_pin_configure>
  if (ret < 0) {
    4694:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led3, PIN_LED3, GPIO_OUTPUT_INACTIVE | FLAGS_LED3);
    4696:	4601      	mov	r1, r0
    4698:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    469a:	da01      	bge.n	46a0 <bm_init_leds+0xa8>
    printk("Error in configuration of led3 pin (err %d)", ret);
    469c:	480f      	ldr	r0, [pc, #60]	; (46dc <bm_init_leds+0xe4>)
    469e:	e7c2      	b.n	4626 <bm_init_leds+0x2e>
}
    46a0:	bd10      	pop	{r4, pc}
    46a2:	bf00      	nop
    46a4:	0003054e 	.word	0x0003054e
    46a8:	200033ec 	.word	0x200033ec
    46ac:	00030555 	.word	0x00030555
    46b0:	200033fc 	.word	0x200033fc
    46b4:	00030569 	.word	0x00030569
    46b8:	200033f0 	.word	0x200033f0
    46bc:	00030595 	.word	0x00030595
    46c0:	000305a9 	.word	0x000305a9
    46c4:	000304ae 	.word	0x000304ae
    46c8:	200033f4 	.word	0x200033f4
    46cc:	000305d5 	.word	0x000305d5
    46d0:	000305e9 	.word	0x000305e9
    46d4:	200033f8 	.word	0x200033f8
    46d8:	00030615 	.word	0x00030615
    46dc:	00030629 	.word	0x00030629

000046e0 <bm_led0_set>:



/* Set LED0. pca10059 -> Green LED */
void bm_led0_set(bool state) {
  gpio_pin_set(dev_led0, PIN_LED0, (int)state);
    46e0:	4b05      	ldr	r3, [pc, #20]	; (46f8 <bm_led0_set+0x18>)
void bm_led0_set(bool state) {
    46e2:	b510      	push	{r4, lr}
  gpio_pin_set(dev_led0, PIN_LED0, (int)state);
    46e4:	4602      	mov	r2, r0
void bm_led0_set(bool state) {
    46e6:	4604      	mov	r4, r0
  gpio_pin_set(dev_led0, PIN_LED0, (int)state);
    46e8:	2106      	movs	r1, #6
    46ea:	6818      	ldr	r0, [r3, #0]
    46ec:	f7ff ff4a 	bl	4584 <gpio_pin_set>
  led0_is_on = state;
    46f0:	4b02      	ldr	r3, [pc, #8]	; (46fc <bm_led0_set+0x1c>)
    46f2:	701c      	strb	r4, [r3, #0]
}
    46f4:	bd10      	pop	{r4, pc}
    46f6:	bf00      	nop
    46f8:	200033ec 	.word	0x200033ec
    46fc:	200056ed 	.word	0x200056ed

00004700 <bm_led1_set>:
  return led0_is_on;
}

/* Set LED1. pca10059 -> Red LED (RGB) */
void bm_led1_set(bool state) {
  gpio_pin_set(dev_led1, PIN_LED1, (int)state);
    4700:	4b05      	ldr	r3, [pc, #20]	; (4718 <bm_led1_set+0x18>)
void bm_led1_set(bool state) {
    4702:	b510      	push	{r4, lr}
  gpio_pin_set(dev_led1, PIN_LED1, (int)state);
    4704:	4602      	mov	r2, r0
void bm_led1_set(bool state) {
    4706:	4604      	mov	r4, r0
  gpio_pin_set(dev_led1, PIN_LED1, (int)state);
    4708:	2108      	movs	r1, #8
    470a:	6818      	ldr	r0, [r3, #0]
    470c:	f7ff ff3a 	bl	4584 <gpio_pin_set>
  led1_is_on = state;
    4710:	4b02      	ldr	r3, [pc, #8]	; (471c <bm_led1_set+0x1c>)
    4712:	701c      	strb	r4, [r3, #0]
}
    4714:	bd10      	pop	{r4, pc}
    4716:	bf00      	nop
    4718:	200033f0 	.word	0x200033f0
    471c:	200056ee 	.word	0x200056ee

00004720 <bm_led3_set>:
  return led2_is_on;
}

/* Set LED3. pca10059 -> Blue LED (RGB)  */
void bm_led3_set(bool state) {
  gpio_pin_set(dev_led3, PIN_LED3, (int)state);
    4720:	4b05      	ldr	r3, [pc, #20]	; (4738 <bm_led3_set+0x18>)
void bm_led3_set(bool state) {
    4722:	b510      	push	{r4, lr}
  gpio_pin_set(dev_led3, PIN_LED3, (int)state);
    4724:	4602      	mov	r2, r0
void bm_led3_set(bool state) {
    4726:	4604      	mov	r4, r0
  gpio_pin_set(dev_led3, PIN_LED3, (int)state);
    4728:	210c      	movs	r1, #12
    472a:	6818      	ldr	r0, [r3, #0]
    472c:	f7ff ff2a 	bl	4584 <gpio_pin_set>
  led3_is_on = state;
    4730:	4b02      	ldr	r3, [pc, #8]	; (473c <bm_led3_set+0x1c>)
    4732:	701c      	strb	r4, [r3, #0]
}
    4734:	bd10      	pop	{r4, pc}
    4736:	bf00      	nop
    4738:	200033f8 	.word	0x200033f8
    473c:	20001cbc 	.word	0x20001cbc

00004740 <main>:
#include "bm_simple_buttons_and_leds.h"
#include <zephyr.h>

/**@brief Function for application main entry.
 */
void main(void) {
    4740:	b508      	push	{r3, lr}
  // Start Application
  printk("Starting Application...\n");
    4742:	4811      	ldr	r0, [pc, #68]	; (4788 <main+0x48>)
    4744:	f023 f8c5 	bl	278d2 <printk>
  // Init MAC Address
  uint32_t LSB_MAC_Address = NRF_FICR->DEVICEADDR[0];
    4748:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  printk("Preprogrammed Randomly Static MAC-Address (LSB): 0x%x, %u \n", LSB_MAC_Address, LSB_MAC_Address);
    474c:	480f      	ldr	r0, [pc, #60]	; (478c <main+0x4c>)
  uint32_t LSB_MAC_Address = NRF_FICR->DEVICEADDR[0];
    474e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  printk("Preprogrammed Randomly Static MAC-Address (LSB): 0x%x, %u \n", LSB_MAC_Address, LSB_MAC_Address);
    4752:	4611      	mov	r1, r2
    4754:	f023 f8bd 	bl	278d2 <printk>
  /* --------------- Init Board ------------*/
	printk("Init Buttons and LEDs...\n");
    4758:	480d      	ldr	r0, [pc, #52]	; (4790 <main+0x50>)
    475a:	f023 f8ba 	bl	278d2 <printk>
	bm_init_leds();
    475e:	f7ff ff4b 	bl	45f8 <bm_init_leds>
	printk("Buttons and LEDs initialized\n");
    4762:	480c      	ldr	r0, [pc, #48]	; (4794 <main+0x54>)
    4764:	f023 f8b5 	bl	278d2 <printk>


	/* ===================================*/

  // Start Mesh Operation
  bm_blemesh_enable(); // Will return faster than the Stack is realy ready... keep on waiting in the transition.
    4768:	f7ff fbf0 	bl	3f4c <bm_blemesh_enable>

  bm_led0_set(true);
    476c:	2001      	movs	r0, #1
    476e:	f7ff ffb7 	bl	46e0 <bm_led0_set>
	return z_impl_k_sleep(timeout);
    4772:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4776:	2100      	movs	r1, #0
    4778:	f020 fbce 	bl	24f18 <z_impl_k_sleep>

  k_sleep(K_MSEC(500));

  bm_led0_set(false);
    477c:	2000      	movs	r0, #0




    477e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  bm_led0_set(false);
    4782:	f7ff bfad 	b.w	46e0 <bm_led0_set>
    4786:	bf00      	nop
    4788:	00030697 	.word	0x00030697
    478c:	000306b0 	.word	0x000306b0
    4790:	000306ec 	.word	0x000306ec
    4794:	00030706 	.word	0x00030706

00004798 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    4798:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    479a:	4c09      	ldr	r4, [pc, #36]	; (47c0 <crc8_ccitt+0x28>)
    479c:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    479e:	4291      	cmp	r1, r2
    47a0:	d100      	bne.n	47a4 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    47a2:	bd10      	pop	{r4, pc}
		val ^= p[i];
    47a4:	f811 3b01 	ldrb.w	r3, [r1], #1
    47a8:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    47aa:	0918      	lsrs	r0, r3, #4
    47ac:	5c20      	ldrb	r0, [r4, r0]
    47ae:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    47b2:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    47b4:	0918      	lsrs	r0, r3, #4
    47b6:	5c20      	ldrb	r0, [r4, r0]
    47b8:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    47bc:	b2c0      	uxtb	r0, r0
    47be:	e7ee      	b.n	479e <crc8_ccitt+0x6>
    47c0:	00030724 	.word	0x00030724

000047c4 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    47c4:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    47c6:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    47c8:	f003 0303 	and.w	r3, r3, #3
    47cc:	4605      	mov	r5, r0

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    47ce:	2b02      	cmp	r3, #2
{
    47d0:	460e      	mov	r6, r1
	notify->result = res;
    47d2:	60a9      	str	r1, [r5, #8]
	switch (method) {
    47d4:	d010      	beq.n	47f8 <sys_notify_finalize+0x34>
    47d6:	2b03      	cmp	r3, #3
    47d8:	d004      	beq.n	47e4 <sys_notify_finalize+0x20>
    47da:	2b01      	cmp	r3, #1
    47dc:	d10f      	bne.n	47fe <sys_notify_finalize+0x3a>
	sys_notify_generic_callback rv = 0;
    47de:	2400      	movs	r4, #0
	struct k_poll_signal *sig = NULL;
    47e0:	4620      	mov	r0, r4
    47e2:	e001      	b.n	47e8 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    47e4:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    47e6:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    47e8:	2300      	movs	r3, #0
    47ea:	606b      	str	r3, [r5, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    47ec:	b110      	cbz	r0, 47f4 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    47ee:	4631      	mov	r1, r6
    47f0:	f021 fd10 	bl	26214 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    47f4:	4620      	mov	r0, r4
    47f6:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
    47f8:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    47fa:	2400      	movs	r4, #0
		break;
    47fc:	e7f4      	b.n	47e8 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    47fe:	2245      	movs	r2, #69	; 0x45
    4800:	4904      	ldr	r1, [pc, #16]	; (4814 <sys_notify_finalize+0x50>)
    4802:	4805      	ldr	r0, [pc, #20]	; (4818 <sys_notify_finalize+0x54>)
    4804:	f023 f865 	bl	278d2 <printk>
    4808:	2145      	movs	r1, #69	; 0x45
    480a:	4802      	ldr	r0, [pc, #8]	; (4814 <sys_notify_finalize+0x50>)
    480c:	f023 fada 	bl	27dc4 <assert_post_action>
	sys_notify_generic_callback rv = 0;
    4810:	2400      	movs	r4, #0
    4812:	e7e8      	b.n	47e6 <sys_notify_finalize+0x22>
    4814:	00030734 	.word	0x00030734
    4818:	0003067f 	.word	0x0003067f

0000481c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    481c:	680b      	ldr	r3, [r1, #0]
    481e:	3301      	adds	r3, #1
    4820:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    4822:	4b01      	ldr	r3, [pc, #4]	; (4828 <char_out+0xc>)
    4824:	681b      	ldr	r3, [r3, #0]
    4826:	4718      	bx	r3
    4828:	200011f4 	.word	0x200011f4

0000482c <__printk_hook_install>:
	_char_out = fn;
    482c:	4b01      	ldr	r3, [pc, #4]	; (4834 <__printk_hook_install+0x8>)
    482e:	6018      	str	r0, [r3, #0]
}
    4830:	4770      	bx	lr
    4832:	bf00      	nop
    4834:	200011f4 	.word	0x200011f4

00004838 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    4838:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
    483a:	2300      	movs	r3, #0
    483c:	9301      	str	r3, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    483e:	4602      	mov	r2, r0
    4840:	460b      	mov	r3, r1
    4842:	4803      	ldr	r0, [pc, #12]	; (4850 <vprintk+0x18>)
    4844:	a901      	add	r1, sp, #4
    4846:	f000 fcad 	bl	51a4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    484a:	b003      	add	sp, #12
    484c:	f85d fb04 	ldr.w	pc, [sp], #4
    4850:	0000481d 	.word	0x0000481d

00004854 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    4854:	b530      	push	{r4, r5, lr}
    4856:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    4858:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    485c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    485e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    4860:	a901      	add	r1, sp, #4
    4862:	4805      	ldr	r0, [pc, #20]	; (4878 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    4864:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    4866:	f000 fc9d 	bl	51a4 <cbvprintf>

	if (ctx.count < ctx.max) {
    486a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    486e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4870:	bfb8      	it	lt
    4872:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    4874:	b005      	add	sp, #20
    4876:	bd30      	pop	{r4, r5, pc}
    4878:	000278ad 	.word	0x000278ad

0000487c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    487c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4880:	f8b0 801c 	ldrh.w	r8, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    4884:	f018 0f08 	tst.w	r8, #8
{
    4888:	4604      	mov	r4, r0
    488a:	4693      	mov	fp, r2
	if (processing) {
    488c:	d01c      	beq.n	48c8 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    488e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4890:	bf0c      	ite	eq
    4892:	f048 0810 	orreq.w	r8, r8, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    4896:	f048 0820 	orrne.w	r8, r8, #32
    489a:	f8a0 801c 	strh.w	r8, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    489e:	f104 0014 	add.w	r0, r4, #20
    48a2:	f020 fd8f 	bl	253c4 <z_spin_unlock_valid>
    48a6:	b940      	cbnz	r0, 48ba <process_event+0x3e>
    48a8:	49b9      	ldr	r1, [pc, #740]	; (4b90 <process_event+0x314>)
    48aa:	48ba      	ldr	r0, [pc, #744]	; (4b94 <process_event+0x318>)
    48ac:	22a7      	movs	r2, #167	; 0xa7
    48ae:	f023 f810 	bl	278d2 <printk>
    48b2:	21a7      	movs	r1, #167	; 0xa7
    48b4:	48b6      	ldr	r0, [pc, #728]	; (4b90 <process_event+0x314>)
    48b6:	f023 fa85 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    48ba:	f38b 8811 	msr	BASEPRI, fp
    48be:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    48c2:	b003      	add	sp, #12
    48c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    48c8:	4eb3      	ldr	r6, [pc, #716]	; (4b98 <process_event+0x31c>)
    48ca:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 4b94 <process_event+0x318>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    48ce:	f008 0807 	and.w	r8, r8, #7
		if (evt == EVT_RECHECK) {
    48d2:	2902      	cmp	r1, #2
    48d4:	d106      	bne.n	48e4 <process_event+0x68>
			evt = process_recheck(mgr);
    48d6:	4620      	mov	r0, r4
    48d8:	f023 f815 	bl	27906 <process_recheck>
		if (evt == EVT_NOP) {
    48dc:	2800      	cmp	r0, #0
    48de:	d0de      	beq.n	489e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    48e0:	2801      	cmp	r0, #1
    48e2:	d161      	bne.n	49a8 <process_event+0x12c>
			res = mgr->last_res;
    48e4:	f8d4 a018 	ldr.w	sl, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    48e8:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    48ea:	f1ba 0f00 	cmp.w	sl, #0
    48ee:	da19      	bge.n	4924 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    48f0:	2700      	movs	r7, #0
		*clients = mgr->clients;
    48f2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    48f4:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    48f8:	e9c4 7700 	strd	r7, r7, [r4]
    48fc:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4900:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4902:	8ba3      	ldrh	r3, [r4, #28]
    4904:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    4908:	4542      	cmp	r2, r8
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    490a:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    490c:	d003      	beq.n	4916 <process_event+0x9a>
		if (do_monitors
    490e:	68a2      	ldr	r2, [r4, #8]
    4910:	2a00      	cmp	r2, #0
    4912:	f040 80ef 	bne.w	4af4 <process_event+0x278>
		    || !sys_slist_is_empty(&clients)
    4916:	b915      	cbnz	r5, 491e <process_event+0xa2>
		    || (transit != NULL)) {
    4918:	2f00      	cmp	r7, #0
    491a:	f000 8129 	beq.w	4b70 <process_event+0x2f4>
    491e:	f04f 0800 	mov.w	r8, #0
    4922:	e0e9      	b.n	4af8 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4924:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4928:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    492a:	2901      	cmp	r1, #1
    492c:	d81e      	bhi.n	496c <process_event+0xf0>
	list->head = NULL;
    492e:	2100      	movs	r1, #0
    4930:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    4934:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    4936:	6825      	ldr	r5, [r4, #0]
    4938:	b29b      	uxth	r3, r3
	list->tail = NULL;
    493a:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    493e:	d10a      	bne.n	4956 <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4940:	b13d      	cbz	r5, 4952 <process_event+0xd6>
    4942:	8be2      	ldrh	r2, [r4, #30]
    4944:	4629      	mov	r1, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4946:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    4948:	3201      	adds	r2, #1
    494a:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    494c:	2900      	cmp	r1, #0
    494e:	d1fa      	bne.n	4946 <process_event+0xca>
    4950:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4952:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    4956:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    4958:	4620      	mov	r0, r4
    495a:	f022 ffd4 	bl	27906 <process_recheck>
    495e:	b118      	cbz	r0, 4968 <process_event+0xec>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4960:	8ba3      	ldrh	r3, [r4, #28]
    4962:	f043 0320 	orr.w	r3, r3, #32
    4966:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    4968:	2700      	movs	r7, #0
    496a:	e7ca      	b.n	4902 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    496c:	2a04      	cmp	r2, #4
    496e:	d10f      	bne.n	4990 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4970:	f023 0307 	bic.w	r3, r3, #7
    4974:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    4976:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    4978:	4620      	mov	r0, r4
    497a:	f022 ffc4 	bl	27906 <process_recheck>
    497e:	2800      	cmp	r0, #0
    4980:	f000 80b6 	beq.w	4af0 <process_event+0x274>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4984:	f042 0220 	orr.w	r2, r2, #32
    4988:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    498a:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    498c:	462f      	mov	r7, r5
    498e:	e7b8      	b.n	4902 <process_event+0x86>
		__ASSERT_NO_MSG(false);
    4990:	4631      	mov	r1, r6
    4992:	4648      	mov	r0, r9
    4994:	f240 1219 	movw	r2, #281	; 0x119
    4998:	f022 ff9b 	bl	278d2 <printk>
    499c:	f240 1119 	movw	r1, #281	; 0x119
    49a0:	4630      	mov	r0, r6
    49a2:	f023 fa0f 	bl	27dc4 <assert_post_action>
    49a6:	e7f0      	b.n	498a <process_event+0x10e>
		} else if (evt == EVT_START) {
    49a8:	2803      	cmp	r0, #3
    49aa:	d131      	bne.n	4a10 <process_event+0x194>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    49ac:	f1b8 0f00 	cmp.w	r8, #0
    49b0:	d00a      	beq.n	49c8 <process_event+0x14c>
    49b2:	4631      	mov	r1, r6
    49b4:	4648      	mov	r0, r9
    49b6:	f44f 72aa 	mov.w	r2, #340	; 0x154
    49ba:	f022 ff8a 	bl	278d2 <printk>
    49be:	f44f 71aa 	mov.w	r1, #340	; 0x154
    49c2:	4630      	mov	r0, r6
    49c4:	f023 f9fe 	bl	27dc4 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    49c8:	6823      	ldr	r3, [r4, #0]
    49ca:	b953      	cbnz	r3, 49e2 <process_event+0x166>
    49cc:	4631      	mov	r1, r6
    49ce:	4648      	mov	r0, r9
    49d0:	f240 1255 	movw	r2, #341	; 0x155
    49d4:	f022 ff7d 	bl	278d2 <printk>
    49d8:	f240 1155 	movw	r1, #341	; 0x155
    49dc:	4630      	mov	r0, r6
    49de:	f023 f9f1 	bl	27dc4 <assert_post_action>
			transit = mgr->transitions->start;
    49e2:	6923      	ldr	r3, [r4, #16]
    49e4:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    49e6:	b957      	cbnz	r7, 49fe <process_event+0x182>
    49e8:	4631      	mov	r1, r6
    49ea:	4648      	mov	r0, r9
    49ec:	f44f 72ac 	mov.w	r2, #344	; 0x158
    49f0:	f022 ff6f 	bl	278d2 <printk>
    49f4:	f44f 71ac 	mov.w	r1, #344	; 0x158
    49f8:	4630      	mov	r0, r6
    49fa:	f023 f9e3 	bl	27dc4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    49fe:	8ba3      	ldrh	r3, [r4, #28]
    4a00:	f023 0307 	bic.w	r3, r3, #7
    4a04:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    4a08:	83a3      	strh	r3, [r4, #28]
    4a0a:	2500      	movs	r5, #0
		res = 0;
    4a0c:	46aa      	mov	sl, r5
    4a0e:	e778      	b.n	4902 <process_event+0x86>
		} else if (evt == EVT_STOP) {
    4a10:	2804      	cmp	r0, #4
    4a12:	d12e      	bne.n	4a72 <process_event+0x1f6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    4a14:	f1b8 0f02 	cmp.w	r8, #2
    4a18:	d00a      	beq.n	4a30 <process_event+0x1b4>
    4a1a:	4631      	mov	r1, r6
    4a1c:	4648      	mov	r0, r9
    4a1e:	f240 125b 	movw	r2, #347	; 0x15b
    4a22:	f022 ff56 	bl	278d2 <printk>
    4a26:	f240 115b 	movw	r1, #347	; 0x15b
    4a2a:	4630      	mov	r0, r6
    4a2c:	f023 f9ca 	bl	27dc4 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    4a30:	8be3      	ldrh	r3, [r4, #30]
    4a32:	b153      	cbz	r3, 4a4a <process_event+0x1ce>
    4a34:	4631      	mov	r1, r6
    4a36:	4648      	mov	r0, r9
    4a38:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    4a3c:	f022 ff49 	bl	278d2 <printk>
    4a40:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    4a44:	4630      	mov	r0, r6
    4a46:	f023 f9bd 	bl	27dc4 <assert_post_action>
			transit = mgr->transitions->stop;
    4a4a:	6923      	ldr	r3, [r4, #16]
    4a4c:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    4a4e:	b957      	cbnz	r7, 4a66 <process_event+0x1ea>
    4a50:	4631      	mov	r1, r6
    4a52:	4648      	mov	r0, r9
    4a54:	f240 125f 	movw	r2, #351	; 0x15f
    4a58:	f022 ff3b 	bl	278d2 <printk>
    4a5c:	f240 115f 	movw	r1, #351	; 0x15f
    4a60:	4630      	mov	r0, r6
    4a62:	f023 f9af 	bl	27dc4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4a66:	8ba3      	ldrh	r3, [r4, #28]
    4a68:	f023 0307 	bic.w	r3, r3, #7
    4a6c:	f043 0304 	orr.w	r3, r3, #4
    4a70:	e7ca      	b.n	4a08 <process_event+0x18c>
		} else if (evt == EVT_RESET) {
    4a72:	2805      	cmp	r0, #5
    4a74:	d12e      	bne.n	4ad4 <process_event+0x258>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    4a76:	f1b8 0f01 	cmp.w	r8, #1
    4a7a:	d00a      	beq.n	4a92 <process_event+0x216>
    4a7c:	4631      	mov	r1, r6
    4a7e:	4648      	mov	r0, r9
    4a80:	f44f 72b1 	mov.w	r2, #354	; 0x162
    4a84:	f022 ff25 	bl	278d2 <printk>
    4a88:	f44f 71b1 	mov.w	r1, #354	; 0x162
    4a8c:	4630      	mov	r0, r6
    4a8e:	f023 f999 	bl	27dc4 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    4a92:	6823      	ldr	r3, [r4, #0]
    4a94:	b953      	cbnz	r3, 4aac <process_event+0x230>
    4a96:	4631      	mov	r1, r6
    4a98:	4648      	mov	r0, r9
    4a9a:	f240 1263 	movw	r2, #355	; 0x163
    4a9e:	f022 ff18 	bl	278d2 <printk>
    4aa2:	f240 1163 	movw	r1, #355	; 0x163
    4aa6:	4630      	mov	r0, r6
    4aa8:	f023 f98c 	bl	27dc4 <assert_post_action>
			transit = mgr->transitions->reset;
    4aac:	6923      	ldr	r3, [r4, #16]
    4aae:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    4ab0:	b957      	cbnz	r7, 4ac8 <process_event+0x24c>
    4ab2:	4631      	mov	r1, r6
    4ab4:	4648      	mov	r0, r9
    4ab6:	f44f 72b3 	mov.w	r2, #358	; 0x166
    4aba:	f022 ff0a 	bl	278d2 <printk>
    4abe:	f44f 71b3 	mov.w	r1, #358	; 0x166
    4ac2:	4630      	mov	r0, r6
    4ac4:	f023 f97e 	bl	27dc4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4ac8:	8ba3      	ldrh	r3, [r4, #28]
    4aca:	f023 0307 	bic.w	r3, r3, #7
    4ace:	f043 0305 	orr.w	r3, r3, #5
    4ad2:	e799      	b.n	4a08 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    4ad4:	f240 1269 	movw	r2, #361	; 0x169
    4ad8:	4631      	mov	r1, r6
    4ada:	4648      	mov	r0, r9
    4adc:	f022 fef9 	bl	278d2 <printk>
    4ae0:	2500      	movs	r5, #0
    4ae2:	f240 1169 	movw	r1, #361	; 0x169
    4ae6:	4630      	mov	r0, r6
    4ae8:	f023 f96c 	bl	27dc4 <assert_post_action>
		onoff_transition_fn transit = NULL;
    4aec:	462f      	mov	r7, r5
    4aee:	e78d      	b.n	4a0c <process_event+0x190>
		if (process_recheck(mgr) != EVT_NOP) {
    4af0:	4605      	mov	r5, r0
    4af2:	e74b      	b.n	498c <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    4af4:	f04f 0801 	mov.w	r8, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    4af8:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    4afc:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    4afe:	f104 0314 	add.w	r3, r4, #20
    4b02:	4618      	mov	r0, r3
    4b04:	9301      	str	r3, [sp, #4]
    4b06:	f020 fc5d 	bl	253c4 <z_spin_unlock_valid>
    4b0a:	b940      	cbnz	r0, 4b1e <process_event+0x2a2>
    4b0c:	4920      	ldr	r1, [pc, #128]	; (4b90 <process_event+0x314>)
    4b0e:	4648      	mov	r0, r9
    4b10:	22a7      	movs	r2, #167	; 0xa7
    4b12:	f022 fede 	bl	278d2 <printk>
    4b16:	21a7      	movs	r1, #167	; 0xa7
    4b18:	481d      	ldr	r0, [pc, #116]	; (4b90 <process_event+0x314>)
    4b1a:	f023 f953 	bl	27dc4 <assert_post_action>
    4b1e:	f38b 8811 	msr	BASEPRI, fp
    4b22:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    4b26:	f1b8 0f00 	cmp.w	r8, #0
    4b2a:	d139      	bne.n	4ba0 <process_event+0x324>
	while (!sys_slist_is_empty(list)) {
    4b2c:	2d00      	cmp	r5, #0
    4b2e:	d149      	bne.n	4bc4 <process_event+0x348>
			if (transit != NULL) {
    4b30:	b117      	cbz	r7, 4b38 <process_event+0x2bc>
				transit(mgr, transition_complete);
    4b32:	491a      	ldr	r1, [pc, #104]	; (4b9c <process_event+0x320>)
    4b34:	4620      	mov	r0, r4
    4b36:	47b8      	blx	r7
	__asm__ volatile(
    4b38:	f04f 0320 	mov.w	r3, #32
    4b3c:	f3ef 8b11 	mrs	fp, BASEPRI
    4b40:	f383 8811 	msr	BASEPRI, r3
    4b44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4b48:	9801      	ldr	r0, [sp, #4]
    4b4a:	f020 fc2d 	bl	253a8 <z_spin_lock_valid>
    4b4e:	b940      	cbnz	r0, 4b62 <process_event+0x2e6>
    4b50:	490f      	ldr	r1, [pc, #60]	; (4b90 <process_event+0x314>)
    4b52:	4648      	mov	r0, r9
    4b54:	227c      	movs	r2, #124	; 0x7c
    4b56:	f022 febc 	bl	278d2 <printk>
    4b5a:	217c      	movs	r1, #124	; 0x7c
    4b5c:	480c      	ldr	r0, [pc, #48]	; (4b90 <process_event+0x314>)
    4b5e:	f023 f931 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4b62:	9801      	ldr	r0, [sp, #4]
    4b64:	f020 fc3e 	bl	253e4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    4b68:	8ba3      	ldrh	r3, [r4, #28]
    4b6a:	f023 0308 	bic.w	r3, r3, #8
    4b6e:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    4b70:	8ba3      	ldrh	r3, [r4, #28]
    4b72:	06da      	lsls	r2, r3, #27
    4b74:	d530      	bpl.n	4bd8 <process_event+0x35c>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    4b76:	f023 0310 	bic.w	r3, r3, #16
    4b7a:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    4b7c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    4b7e:	f8b4 801c 	ldrh.w	r8, [r4, #28]
    4b82:	f008 0807 	and.w	r8, r8, #7
	} while (evt != EVT_NOP);
    4b86:	2900      	cmp	r1, #0
    4b88:	f47f aea3 	bne.w	48d2 <process_event+0x56>
out:
    4b8c:	e687      	b.n	489e <process_event+0x22>
    4b8e:	bf00      	nop
    4b90:	00030779 	.word	0x00030779
    4b94:	0003067f 	.word	0x0003067f
    4b98:	00030757 	.word	0x00030757
    4b9c:	00004be9 	.word	0x00004be9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4ba0:	68a1      	ldr	r1, [r4, #8]
    4ba2:	2900      	cmp	r1, #0
    4ba4:	d0c2      	beq.n	4b2c <process_event+0x2b0>
    4ba6:	f8d1 8000 	ldr.w	r8, [r1]
		mon->callback(mgr, mon, state, res);
    4baa:	f8d1 b004 	ldr.w	fp, [r1, #4]
    4bae:	9a00      	ldr	r2, [sp, #0]
    4bb0:	4653      	mov	r3, sl
    4bb2:	4620      	mov	r0, r4
    4bb4:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4bb6:	f1b8 0f00 	cmp.w	r8, #0
    4bba:	d0b7      	beq.n	4b2c <process_event+0x2b0>
    4bbc:	4641      	mov	r1, r8
    4bbe:	f8d8 8000 	ldr.w	r8, [r8]
    4bc2:	e7f2      	b.n	4baa <process_event+0x32e>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4bc4:	f8d5 8000 	ldr.w	r8, [r5]
		notify_one(mgr, cli, state, res);
    4bc8:	9a00      	ldr	r2, [sp, #0]
    4bca:	4629      	mov	r1, r5
    4bcc:	4653      	mov	r3, sl
    4bce:	4620      	mov	r0, r4
    4bd0:	f022 feb5 	bl	2793e <notify_one>
	while (!sys_slist_is_empty(list)) {
    4bd4:	4645      	mov	r5, r8
    4bd6:	e7a9      	b.n	4b2c <process_event+0x2b0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    4bd8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    4bdc:	bf1e      	ittt	ne
    4bde:	f023 0320 	bicne.w	r3, r3, #32
    4be2:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    4be4:	2102      	movne	r1, #2
    4be6:	e7ca      	b.n	4b7e <process_event+0x302>

00004be8 <transition_complete>:
{
    4be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bea:	4604      	mov	r4, r0
    4bec:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    4bee:	f100 0514 	add.w	r5, r0, #20
    4bf2:	f04f 0320 	mov.w	r3, #32
    4bf6:	f3ef 8611 	mrs	r6, BASEPRI
    4bfa:	f383 8811 	msr	BASEPRI, r3
    4bfe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4c02:	4628      	mov	r0, r5
    4c04:	f020 fbd0 	bl	253a8 <z_spin_lock_valid>
    4c08:	b940      	cbnz	r0, 4c1c <transition_complete+0x34>
    4c0a:	490a      	ldr	r1, [pc, #40]	; (4c34 <transition_complete+0x4c>)
    4c0c:	480a      	ldr	r0, [pc, #40]	; (4c38 <transition_complete+0x50>)
    4c0e:	227c      	movs	r2, #124	; 0x7c
    4c10:	f022 fe5f 	bl	278d2 <printk>
    4c14:	217c      	movs	r1, #124	; 0x7c
    4c16:	4807      	ldr	r0, [pc, #28]	; (4c34 <transition_complete+0x4c>)
    4c18:	f023 f8d4 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4c1c:	4628      	mov	r0, r5
    4c1e:	f020 fbe1 	bl	253e4 <z_spin_lock_set_owner>
	mgr->last_res = res;
    4c22:	61a7      	str	r7, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    4c24:	4632      	mov	r2, r6
    4c26:	4620      	mov	r0, r4
    4c28:	2101      	movs	r1, #1
}
    4c2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    4c2e:	f7ff be25 	b.w	487c <process_event>
    4c32:	bf00      	nop
    4c34:	00030779 	.word	0x00030779
    4c38:	0003067f 	.word	0x0003067f

00004c3c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c40:	4604      	mov	r4, r0
    4c42:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4c44:	f022 fe91 	bl	2796a <validate_args>

	if (rv < 0) {
    4c48:	1e06      	subs	r6, r0, #0
    4c4a:	db52      	blt.n	4cf2 <onoff_request+0xb6>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    4c4c:	f104 0914 	add.w	r9, r4, #20
    4c50:	f04f 0320 	mov.w	r3, #32
    4c54:	f3ef 8a11 	mrs	sl, BASEPRI
    4c58:	f383 8811 	msr	BASEPRI, r3
    4c5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4c60:	4648      	mov	r0, r9
    4c62:	f020 fba1 	bl	253a8 <z_spin_lock_valid>
    4c66:	b940      	cbnz	r0, 4c7a <onoff_request+0x3e>
    4c68:	4932      	ldr	r1, [pc, #200]	; (4d34 <onoff_request+0xf8>)
    4c6a:	4833      	ldr	r0, [pc, #204]	; (4d38 <onoff_request+0xfc>)
    4c6c:	227c      	movs	r2, #124	; 0x7c
    4c6e:	f022 fe30 	bl	278d2 <printk>
    4c72:	217c      	movs	r1, #124	; 0x7c
    4c74:	482f      	ldr	r0, [pc, #188]	; (4d34 <onoff_request+0xf8>)
    4c76:	f023 f8a5 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4c7a:	4648      	mov	r0, r9
    4c7c:	f020 fbb2 	bl	253e4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4c80:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4c82:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    4c84:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4c88:	428b      	cmp	r3, r1
    4c8a:	f002 0507 	and.w	r5, r2, #7
    4c8e:	d04a      	beq.n	4d26 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    4c90:	2d02      	cmp	r5, #2
    4c92:	d11c      	bne.n	4cce <onoff_request+0x92>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    4c94:	3301      	adds	r3, #1
    4c96:	83e3      	strh	r3, [r4, #30]
	rv = state;
    4c98:	462e      	mov	r6, r5
		notify = true;
    4c9a:	2701      	movs	r7, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c9c:	4648      	mov	r0, r9
    4c9e:	f020 fb91 	bl	253c4 <z_spin_unlock_valid>
    4ca2:	b940      	cbnz	r0, 4cb6 <onoff_request+0x7a>
    4ca4:	4923      	ldr	r1, [pc, #140]	; (4d34 <onoff_request+0xf8>)
    4ca6:	4824      	ldr	r0, [pc, #144]	; (4d38 <onoff_request+0xfc>)
    4ca8:	22a7      	movs	r2, #167	; 0xa7
    4caa:	f022 fe12 	bl	278d2 <printk>
    4cae:	21a7      	movs	r1, #167	; 0xa7
    4cb0:	4820      	ldr	r0, [pc, #128]	; (4d34 <onoff_request+0xf8>)
    4cb2:	f023 f887 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
    4cb6:	f38a 8811 	msr	BASEPRI, sl
    4cba:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4cbe:	b1c7      	cbz	r7, 4cf2 <onoff_request+0xb6>
			notify_one(mgr, cli, state, 0);
    4cc0:	2300      	movs	r3, #0
    4cc2:	462a      	mov	r2, r5
    4cc4:	4641      	mov	r1, r8
    4cc6:	4620      	mov	r0, r4
    4cc8:	f022 fe39 	bl	2793e <notify_one>
    4ccc:	e011      	b.n	4cf2 <onoff_request+0xb6>
	} else if ((state == ONOFF_STATE_OFF)
    4cce:	0793      	lsls	r3, r2, #30
    4cd0:	d001      	beq.n	4cd6 <onoff_request+0x9a>
		   || (state == ONOFF_STATE_TO_ON)) {
    4cd2:	2d06      	cmp	r5, #6
    4cd4:	d110      	bne.n	4cf8 <onoff_request+0xbc>
	parent->next = child;
    4cd6:	2300      	movs	r3, #0
    4cd8:	f8c8 3000 	str.w	r3, [r8]
Z_GENLIST_APPEND(slist, snode)
    4cdc:	6863      	ldr	r3, [r4, #4]
    4cde:	b9eb      	cbnz	r3, 4d1c <onoff_request+0xe0>
	list->head = node;
    4ce0:	e9c4 8800 	strd	r8, r8, [r4]
	if (start) {
    4ce4:	462e      	mov	r6, r5
    4ce6:	bb05      	cbnz	r5, 4d2a <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    4ce8:	4652      	mov	r2, sl
    4cea:	2102      	movs	r1, #2
    4cec:	4620      	mov	r0, r4
    4cee:	f7ff fdc5 	bl	487c <process_event>
		}
	}

	return rv;
}
    4cf2:	4630      	mov	r0, r6
    4cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    4cf8:	2d05      	cmp	r5, #5
    4cfa:	d018      	beq.n	4d2e <onoff_request+0xf2>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    4cfc:	2d01      	cmp	r5, #1
    4cfe:	d00a      	beq.n	4d16 <onoff_request+0xda>
    4d00:	490e      	ldr	r1, [pc, #56]	; (4d3c <onoff_request+0x100>)
    4d02:	480d      	ldr	r0, [pc, #52]	; (4d38 <onoff_request+0xfc>)
    4d04:	f240 12c5 	movw	r2, #453	; 0x1c5
    4d08:	f022 fde3 	bl	278d2 <printk>
    4d0c:	f240 11c5 	movw	r1, #453	; 0x1c5
    4d10:	480a      	ldr	r0, [pc, #40]	; (4d3c <onoff_request+0x100>)
    4d12:	f023 f857 	bl	27dc4 <assert_post_action>
		rv = -EIO;
    4d16:	f06f 0604 	mvn.w	r6, #4
    4d1a:	e006      	b.n	4d2a <onoff_request+0xee>
	parent->next = child;
    4d1c:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
    4d20:	f8c4 8004 	str.w	r8, [r4, #4]
    4d24:	e7de      	b.n	4ce4 <onoff_request+0xa8>
		rv = -EAGAIN;
    4d26:	f06f 060a 	mvn.w	r6, #10
    4d2a:	2700      	movs	r7, #0
    4d2c:	e7b6      	b.n	4c9c <onoff_request+0x60>
		rv = -ENOTSUP;
    4d2e:	f06f 0685 	mvn.w	r6, #133	; 0x85
    4d32:	e7fa      	b.n	4d2a <onoff_request+0xee>
    4d34:	00030779 	.word	0x00030779
    4d38:	0003067f 	.word	0x0003067f
    4d3c:	00030757 	.word	0x00030757

00004d40 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    4d40:	b570      	push	{r4, r5, r6, lr}
    4d42:	4604      	mov	r4, r0
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    4d44:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    4d48:	f04f 0320 	mov.w	r3, #32
    4d4c:	f3ef 8611 	mrs	r6, BASEPRI
    4d50:	f383 8811 	msr	BASEPRI, r3
    4d54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d58:	4628      	mov	r0, r5
    4d5a:	f020 fb25 	bl	253a8 <z_spin_lock_valid>
    4d5e:	b940      	cbnz	r0, 4d72 <onoff_release+0x32>
    4d60:	4922      	ldr	r1, [pc, #136]	; (4dec <onoff_release+0xac>)
    4d62:	4823      	ldr	r0, [pc, #140]	; (4df0 <onoff_release+0xb0>)
    4d64:	227c      	movs	r2, #124	; 0x7c
    4d66:	f022 fdb4 	bl	278d2 <printk>
    4d6a:	217c      	movs	r1, #124	; 0x7c
    4d6c:	481f      	ldr	r0, [pc, #124]	; (4dec <onoff_release+0xac>)
    4d6e:	f023 f829 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4d72:	4628      	mov	r0, r5
    4d74:	f020 fb36 	bl	253e4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4d78:	8ba3      	ldrh	r3, [r4, #28]
    4d7a:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    4d7e:	2b02      	cmp	r3, #2
    4d80:	d017      	beq.n	4db2 <onoff_release+0x72>
		if (state == ONOFF_STATE_ERROR) {
    4d82:	2b01      	cmp	r3, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    4d84:	bf0c      	ite	eq
    4d86:	f06f 0404 	mvneq.w	r4, #4
    4d8a:	f06f 0485 	mvnne.w	r4, #133	; 0x85
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d8e:	4628      	mov	r0, r5
    4d90:	f020 fb18 	bl	253c4 <z_spin_unlock_valid>
    4d94:	b940      	cbnz	r0, 4da8 <onoff_release+0x68>
    4d96:	4915      	ldr	r1, [pc, #84]	; (4dec <onoff_release+0xac>)
    4d98:	4815      	ldr	r0, [pc, #84]	; (4df0 <onoff_release+0xb0>)
    4d9a:	22a7      	movs	r2, #167	; 0xa7
    4d9c:	f022 fd99 	bl	278d2 <printk>
    4da0:	21a7      	movs	r1, #167	; 0xa7
    4da2:	4812      	ldr	r0, [pc, #72]	; (4dec <onoff_release+0xac>)
    4da4:	f023 f80e 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
    4da8:	f386 8811 	msr	BASEPRI, r6
    4dac:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    4db0:	e017      	b.n	4de2 <onoff_release+0xa2>
	__ASSERT_NO_MSG(mgr->refs > 0);
    4db2:	8be3      	ldrh	r3, [r4, #30]
    4db4:	b953      	cbnz	r3, 4dcc <onoff_release+0x8c>
    4db6:	490f      	ldr	r1, [pc, #60]	; (4df4 <onoff_release+0xb4>)
    4db8:	480d      	ldr	r0, [pc, #52]	; (4df0 <onoff_release+0xb0>)
    4dba:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
    4dbe:	f022 fd88 	bl	278d2 <printk>
    4dc2:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    4dc6:	480b      	ldr	r0, [pc, #44]	; (4df4 <onoff_release+0xb4>)
    4dc8:	f022 fffc 	bl	27dc4 <assert_post_action>
	mgr->refs -= 1U;
    4dcc:	8be3      	ldrh	r3, [r4, #30]
    4dce:	3b01      	subs	r3, #1
    4dd0:	b29b      	uxth	r3, r3
    4dd2:	83e3      	strh	r3, [r4, #30]
	if (stop) {
    4dd4:	b93b      	cbnz	r3, 4de6 <onoff_release+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    4dd6:	4620      	mov	r0, r4
    4dd8:	4632      	mov	r2, r6
    4dda:	2102      	movs	r1, #2
    4ddc:	f7ff fd4e 	bl	487c <process_event>
	int rv = state;
    4de0:	2402      	movs	r4, #2
}
    4de2:	4620      	mov	r0, r4
    4de4:	bd70      	pop	{r4, r5, r6, pc}
	int rv = state;
    4de6:	2402      	movs	r4, #2
    4de8:	e7d1      	b.n	4d8e <onoff_release+0x4e>
    4dea:	bf00      	nop
    4dec:	00030779 	.word	0x00030779
    4df0:	0003067f 	.word	0x0003067f
    4df4:	00030757 	.word	0x00030757

00004df8 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    4df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    4dfc:	4d16      	ldr	r5, [pc, #88]	; (4e58 <z_work_q_main+0x60>)
    4dfe:	f8df 805c 	ldr.w	r8, [pc, #92]	; 4e5c <z_work_q_main+0x64>
{
    4e02:	4607      	mov	r7, r0
	return z_impl_k_queue_get(queue, timeout);
    4e04:	f04f 32ff 	mov.w	r2, #4294967295
    4e08:	f04f 33ff 	mov.w	r3, #4294967295
    4e0c:	4638      	mov	r0, r7
    4e0e:	f01f f847 	bl	23ea0 <z_impl_k_queue_get>
		if (work == NULL) {
    4e12:	4604      	mov	r4, r0
    4e14:	2800      	cmp	r0, #0
    4e16:	d0f5      	beq.n	4e04 <z_work_q_main+0xc>
		handler = work->handler;
    4e18:	6846      	ldr	r6, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    4e1a:	b946      	cbnz	r6, 4e2e <z_work_q_main+0x36>
    4e1c:	4629      	mov	r1, r5
    4e1e:	4640      	mov	r0, r8
    4e20:	221c      	movs	r2, #28
    4e22:	f022 fd56 	bl	278d2 <printk>
    4e26:	211c      	movs	r1, #28
    4e28:	4628      	mov	r0, r5
    4e2a:	f022 ffcb 	bl	27dc4 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4e2e:	f3bf 8f5b 	dmb	ish
    4e32:	f104 0308 	add.w	r3, r4, #8
    4e36:	e853 2f00 	ldrex	r2, [r3]
    4e3a:	f022 0101 	bic.w	r1, r2, #1
    4e3e:	e843 1000 	strex	r0, r1, [r3]
    4e42:	2800      	cmp	r0, #0
    4e44:	d1f7      	bne.n	4e36 <z_work_q_main+0x3e>
    4e46:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    4e4a:	07d3      	lsls	r3, r2, #31
    4e4c:	d501      	bpl.n	4e52 <z_work_q_main+0x5a>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    4e4e:	4620      	mov	r0, r4
    4e50:	47b0      	blx	r6
	z_impl_k_yield();
    4e52:	f01f ff53 	bl	24cfc <z_impl_k_yield>
    4e56:	e7d5      	b.n	4e04 <z_work_q_main+0xc>
    4e58:	0003079f 	.word	0x0003079f
    4e5c:	0003067f 	.word	0x0003067f

00004e60 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    4e60:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    4e62:	2900      	cmp	r1, #0
    4e64:	d037      	beq.n	4ed6 <sys_heap_free+0x76>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    4e66:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    4e68:	68ab      	ldr	r3, [r5, #8]
    4e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4e6e:	bf2c      	ite	cs
    4e70:	2408      	movcs	r4, #8
    4e72:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    4e74:	1b0c      	subs	r4, r1, r4
    4e76:	1b64      	subs	r4, r4, r5
    4e78:	08e4      	lsrs	r4, r4, #3

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    4e7a:	4621      	mov	r1, r4
    4e7c:	4628      	mov	r0, r5
    4e7e:	f022 fdca 	bl	27a16 <chunk_used>
    4e82:	b940      	cbnz	r0, 4e96 <sys_heap_free+0x36>
    4e84:	4914      	ldr	r1, [pc, #80]	; (4ed8 <sys_heap_free+0x78>)
    4e86:	4815      	ldr	r0, [pc, #84]	; (4edc <sys_heap_free+0x7c>)
    4e88:	229b      	movs	r2, #155	; 0x9b
    4e8a:	f022 fd22 	bl	278d2 <printk>
    4e8e:	219b      	movs	r1, #155	; 0x9b
    4e90:	4811      	ldr	r0, [pc, #68]	; (4ed8 <sys_heap_free+0x78>)
    4e92:	f022 ff97 	bl	27dc4 <assert_post_action>
	return c + chunk_size(h, c);
    4e96:	4621      	mov	r1, r4
    4e98:	4628      	mov	r0, r5
    4e9a:	f022 fdc3 	bl	27a24 <chunk_size>
    4e9e:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    4ea0:	2200      	movs	r2, #0
    4ea2:	4631      	mov	r1, r6
    4ea4:	4628      	mov	r0, r5
    4ea6:	f022 fda0 	bl	279ea <chunk_field>
    4eaa:	1a30      	subs	r0, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    4eac:	4284      	cmp	r4, r0
    4eae:	d008      	beq.n	4ec2 <sys_heap_free+0x62>
    4eb0:	4909      	ldr	r1, [pc, #36]	; (4ed8 <sys_heap_free+0x78>)
    4eb2:	480a      	ldr	r0, [pc, #40]	; (4edc <sys_heap_free+0x7c>)
    4eb4:	22a4      	movs	r2, #164	; 0xa4
    4eb6:	f022 fd0c 	bl	278d2 <printk>
    4eba:	21a4      	movs	r1, #164	; 0xa4
    4ebc:	4806      	ldr	r0, [pc, #24]	; (4ed8 <sys_heap_free+0x78>)
    4ebe:	f022 ff81 	bl	27dc4 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    4ec2:	4621      	mov	r1, r4
    4ec4:	4628      	mov	r0, r5
    4ec6:	2200      	movs	r2, #0
    4ec8:	f022 fdb2 	bl	27a30 <set_chunk_used>
	free_chunk(h, c);
    4ecc:	4621      	mov	r1, r4
}
    4ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    4ed2:	f022 bef0 	b.w	27cb6 <free_chunk>
}
    4ed6:	bd70      	pop	{r4, r5, r6, pc}
    4ed8:	000307c2 	.word	0x000307c2
    4edc:	0003067f 	.word	0x0003067f

00004ee0 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    4ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    4ee4:	f101 3aff 	add.w	sl, r1, #4294967295
    4ee8:	ea1a 0f01 	tst.w	sl, r1
{
    4eec:	4606      	mov	r6, r0
    4eee:	4689      	mov	r9, r1
    4ef0:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    4ef2:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    4ef4:	d008      	beq.n	4f08 <sys_heap_aligned_alloc+0x28>
    4ef6:	4932      	ldr	r1, [pc, #200]	; (4fc0 <sys_heap_aligned_alloc+0xe0>)
    4ef8:	4832      	ldr	r0, [pc, #200]	; (4fc4 <sys_heap_aligned_alloc+0xe4>)
    4efa:	22fc      	movs	r2, #252	; 0xfc
    4efc:	f022 fce9 	bl	278d2 <printk>
    4f00:	21fc      	movs	r1, #252	; 0xfc
    4f02:	482f      	ldr	r0, [pc, #188]	; (4fc0 <sys_heap_aligned_alloc+0xe0>)
    4f04:	f022 ff5e 	bl	27dc4 <assert_post_action>
	return big_heap(h) ? 8 : 4;
    4f08:	68aa      	ldr	r2, [r5, #8]
    4f0a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    4f0e:	bf2c      	ite	cs
    4f10:	2308      	movcs	r3, #8
    4f12:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    4f14:	4599      	cmp	r9, r3
    4f16:	d805      	bhi.n	4f24 <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    4f18:	4621      	mov	r1, r4
    4f1a:	4630      	mov	r0, r6
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    4f1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sys_heap_alloc(heap, bytes);
    4f20:	f022 bf07 	b.w	27d32 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    4f24:	b91c      	cbnz	r4, 4f2e <sys_heap_aligned_alloc+0x4e>
		return NULL;
    4f26:	2700      	movs	r7, #0
}
    4f28:	4638      	mov	r0, r7
    4f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    4f2e:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
    4f32:	d9f8      	bls.n	4f26 <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    4f34:	eb09 0104 	add.w	r1, r9, r4
    4f38:	1ac9      	subs	r1, r1, r3
    4f3a:	4628      	mov	r0, r5
    4f3c:	f022 fd94 	bl	27a68 <bytes_to_chunksz>
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    4f40:	4601      	mov	r1, r0
    4f42:	4628      	mov	r0, r5
    4f44:	f022 fe31 	bl	27baa <alloc_chunk>
	if (c0 == 0) {
    4f48:	4680      	mov	r8, r0
    4f4a:	2800      	cmp	r0, #0
    4f4c:	d0eb      	beq.n	4f26 <sys_heap_aligned_alloc+0x46>
    4f4e:	68ab      	ldr	r3, [r5, #8]
    4f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4f54:	bf2c      	ite	cs
    4f56:	2608      	movcs	r6, #8
    4f58:	2604      	movcc	r6, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    4f5a:	eb06 07c0 	add.w	r7, r6, r0, lsl #3
    4f5e:	442f      	add	r7, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    4f60:	4457      	add	r7, sl
    4f62:	f1c9 0900 	rsb	r9, r9, #0
    4f66:	ea07 0709 	and.w	r7, r7, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    4f6a:	1bbe      	subs	r6, r7, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    4f6c:	443c      	add	r4, r7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    4f6e:	1b76      	subs	r6, r6, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    4f70:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    4f72:	08f6      	lsrs	r6, r6, #3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    4f74:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    4f78:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    4f7a:	42b0      	cmp	r0, r6
	chunkid_t c_end = end - chunk_buf(h);
    4f7c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    4f80:	d208      	bcs.n	4f94 <sys_heap_aligned_alloc+0xb4>
		split_chunks(h, c0, c);
    4f82:	4601      	mov	r1, r0
    4f84:	4632      	mov	r2, r6
    4f86:	4628      	mov	r0, r5
    4f88:	f022 fda2 	bl	27ad0 <split_chunks>
		free_list_add(h, c0);
    4f8c:	4641      	mov	r1, r8
    4f8e:	4628      	mov	r0, r5
    4f90:	f022 fe4c 	bl	27c2c <free_list_add>
	return c + chunk_size(h, c);
    4f94:	4631      	mov	r1, r6
    4f96:	4628      	mov	r0, r5
    4f98:	f022 fd44 	bl	27a24 <chunk_size>
    4f9c:	4430      	add	r0, r6
	if (right_chunk(h, c) > c_end) {
    4f9e:	4284      	cmp	r4, r0
    4fa0:	d208      	bcs.n	4fb4 <sys_heap_aligned_alloc+0xd4>
		split_chunks(h, c, c_end);
    4fa2:	4631      	mov	r1, r6
    4fa4:	4628      	mov	r0, r5
    4fa6:	4622      	mov	r2, r4
    4fa8:	f022 fd92 	bl	27ad0 <split_chunks>
		free_list_add(h, c_end);
    4fac:	4621      	mov	r1, r4
    4fae:	4628      	mov	r0, r5
    4fb0:	f022 fe3c 	bl	27c2c <free_list_add>
	set_chunk_used(h, c, true);
    4fb4:	2201      	movs	r2, #1
    4fb6:	4631      	mov	r1, r6
    4fb8:	4628      	mov	r0, r5
    4fba:	f022 fd39 	bl	27a30 <set_chunk_used>
	return mem;
    4fbe:	e7b3      	b.n	4f28 <sys_heap_aligned_alloc+0x48>
    4fc0:	000307c2 	.word	0x000307c2
    4fc4:	0003067f 	.word	0x0003067f

00004fc8 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    4fc8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    4fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fce:	4607      	mov	r7, r0
    4fd0:	460d      	mov	r5, r1
    4fd2:	4616      	mov	r6, r2
    4fd4:	d20e      	bcs.n	4ff4 <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    4fd6:	2a04      	cmp	r2, #4
    4fd8:	d80a      	bhi.n	4ff0 <sys_heap_init+0x28>
    4fda:	493d      	ldr	r1, [pc, #244]	; (50d0 <sys_heap_init+0x108>)
    4fdc:	483d      	ldr	r0, [pc, #244]	; (50d4 <sys_heap_init+0x10c>)
    4fde:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    4fe2:	f022 fc76 	bl	278d2 <printk>
    4fe6:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    4fea:	4839      	ldr	r0, [pc, #228]	; (50d0 <sys_heap_init+0x108>)
    4fec:	f022 feea 	bl	27dc4 <assert_post_action>
    4ff0:	2304      	movs	r3, #4
    4ff2:	e000      	b.n	4ff6 <sys_heap_init+0x2e>
    4ff4:	2308      	movs	r3, #8
	bytes -= heap_footer_bytes(bytes);
    4ff6:	1af6      	subs	r6, r6, r3

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    4ff8:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4ffa:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    4ffc:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    5000:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    5004:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    5006:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    5008:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    500c:	d80a      	bhi.n	5024 <sys_heap_init+0x5c>
    500e:	4930      	ldr	r1, [pc, #192]	; (50d0 <sys_heap_init+0x108>)
    5010:	4830      	ldr	r0, [pc, #192]	; (50d4 <sys_heap_init+0x10c>)
    5012:	f240 1275 	movw	r2, #373	; 0x175
    5016:	f022 fc5c 	bl	278d2 <printk>
    501a:	f240 1175 	movw	r1, #373	; 0x175
    501e:	482c      	ldr	r0, [pc, #176]	; (50d0 <sys_heap_init+0x108>)
    5020:	f022 fed0 	bl	27dc4 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    5024:	2200      	movs	r2, #0
    5026:	2300      	movs	r3, #0
	heap->heap = h;
    5028:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
    502a:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    502e:	2300      	movs	r3, #0
    5030:	60e3      	str	r3, [r4, #12]

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5032:	4631      	mov	r1, r6
	h->len = buf_sz;
    5034:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5036:	4620      	mov	r0, r4
    5038:	f022 fd20 	bl	27a7c <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
    503c:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    503e:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5040:	1c47      	adds	r7, r0, #1
    5042:	4620      	mov	r0, r4
    5044:	f022 fd10 	bl	27a68 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    5048:	351b      	adds	r5, #27
    504a:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    504c:	4428      	add	r0, r5
    504e:	42b0      	cmp	r0, r6
    5050:	d30a      	bcc.n	5068 <sys_heap_init+0xa0>
    5052:	491f      	ldr	r1, [pc, #124]	; (50d0 <sys_heap_init+0x108>)
    5054:	481f      	ldr	r0, [pc, #124]	; (50d4 <sys_heap_init+0x10c>)
    5056:	f240 1281 	movw	r2, #385	; 0x181
    505a:	f022 fc3a 	bl	278d2 <printk>
    505e:	f240 1181 	movw	r1, #385	; 0x181
    5062:	481b      	ldr	r0, [pc, #108]	; (50d0 <sys_heap_init+0x108>)
    5064:	f022 feae 	bl	27dc4 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    5068:	2300      	movs	r3, #0
    506a:	f104 0210 	add.w	r2, r4, #16

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    506e:	4619      	mov	r1, r3
	for (int i = 0; i < nb_buckets; i++) {
    5070:	42bb      	cmp	r3, r7
    5072:	db29      	blt.n	50c8 <sys_heap_init+0x100>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    5074:	462a      	mov	r2, r5
    5076:	4620      	mov	r0, r4
    5078:	2100      	movs	r1, #0
    507a:	f022 fcf1 	bl	27a60 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    507e:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
    5080:	4620      	mov	r0, r4
    5082:	2201      	movs	r2, #1
    5084:	2100      	movs	r1, #0
    5086:	f022 fcd3 	bl	27a30 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    508a:	463a      	mov	r2, r7
    508c:	4629      	mov	r1, r5
    508e:	f022 fce7 	bl	27a60 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    5092:	462b      	mov	r3, r5
    5094:	4629      	mov	r1, r5
    5096:	4620      	mov	r0, r4
    5098:	2200      	movs	r2, #0
    509a:	f022 fcb1 	bl	27a00 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    509e:	4631      	mov	r1, r6
    50a0:	4620      	mov	r0, r4
    50a2:	2200      	movs	r2, #0
    50a4:	f022 fcdc 	bl	27a60 <set_chunk_size>
    50a8:	463b      	mov	r3, r7
    50aa:	4631      	mov	r1, r6
    50ac:	4620      	mov	r0, r4
    50ae:	2200      	movs	r2, #0
    50b0:	f022 fca6 	bl	27a00 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    50b4:	4631      	mov	r1, r6
    50b6:	4620      	mov	r0, r4
    50b8:	2201      	movs	r2, #1
    50ba:	f022 fcb9 	bl	27a30 <set_chunk_used>

	free_list_add(h, chunk0_size);
    50be:	4629      	mov	r1, r5
}
    50c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    50c4:	f022 bdb2 	b.w	27c2c <free_list_add>
		h->buckets[i].next = 0;
    50c8:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    50cc:	3301      	adds	r3, #1
    50ce:	e7cf      	b.n	5070 <sys_heap_init+0xa8>
    50d0:	000307c2 	.word	0x000307c2
    50d4:	0003067f 	.word	0x0003067f

000050d8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    50d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    50da:	6802      	ldr	r2, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    50dc:	4e07      	ldr	r6, [pc, #28]	; (50fc <extract_decimal+0x24>)
	size_t val = 0;
    50de:	2300      	movs	r3, #0
		val = 10U * val + *sp++ - '0';
    50e0:	270a      	movs	r7, #10
    50e2:	4611      	mov	r1, r2
    50e4:	3201      	adds	r2, #1
	while (isdigit((int)(unsigned char)*sp)) {
    50e6:	780c      	ldrb	r4, [r1, #0]
    50e8:	5da5      	ldrb	r5, [r4, r6]
    50ea:	076d      	lsls	r5, r5, #29
    50ec:	d402      	bmi.n	50f4 <extract_decimal+0x1c>
	}
	*str = sp;
    50ee:	6001      	str	r1, [r0, #0]
	return val;
}
    50f0:	4618      	mov	r0, r3
    50f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    50f4:	fb07 4303 	mla	r3, r7, r3, r4
    50f8:	3b30      	subs	r3, #48	; 0x30
    50fa:	e7f2      	b.n	50e2 <extract_decimal+0xa>
    50fc:	00036d64 	.word	0x00036d64

00005100 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    5100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5104:	4614      	mov	r4, r2
    5106:	9301      	str	r3, [sp, #4]
	bool upcase = isupper((int)conv->specifier);
    5108:	78d3      	ldrb	r3, [r2, #3]
    510a:	4a25      	ldr	r2, [pc, #148]	; (51a0 <encode_uint+0xa0>)
    510c:	f813 9002 	ldrb.w	r9, [r3, r2]
	switch (specifier) {
    5110:	2b6f      	cmp	r3, #111	; 0x6f
{
    5112:	4606      	mov	r6, r0
    5114:	460f      	mov	r7, r1
    5116:	f009 0903 	and.w	r9, r9, #3
	switch (specifier) {
    511a:	d02e      	beq.n	517a <encode_uint+0x7a>
    511c:	d829      	bhi.n	5172 <encode_uint+0x72>
		return 10;
    511e:	2b58      	cmp	r3, #88	; 0x58
    5120:	bf0c      	ite	eq
    5122:	2510      	moveq	r5, #16
    5124:	250a      	movne	r5, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    5126:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    512a:	46aa      	mov	sl, r5
    512c:	f04f 0b00 	mov.w	fp, #0
    5130:	4652      	mov	r2, sl
    5132:	465b      	mov	r3, fp
    5134:	4630      	mov	r0, r6
    5136:	4639      	mov	r1, r7
    5138:	f7fc fc28 	bl	198c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    513c:	2a09      	cmp	r2, #9
    513e:	b2d3      	uxtb	r3, r2
    5140:	d822      	bhi.n	5188 <encode_uint+0x88>
    5142:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    5144:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5146:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    5148:	bf08      	it	eq
    514a:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    514c:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    5150:	d302      	bcc.n	5158 <encode_uint+0x58>
    5152:	9b01      	ldr	r3, [sp, #4]
    5154:	4598      	cmp	r8, r3
    5156:	d814      	bhi.n	5182 <encode_uint+0x82>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    5158:	7823      	ldrb	r3, [r4, #0]
    515a:	069b      	lsls	r3, r3, #26
    515c:	d505      	bpl.n	516a <encode_uint+0x6a>
		if (radix == 8) {
    515e:	2d08      	cmp	r5, #8
    5160:	d118      	bne.n	5194 <encode_uint+0x94>
			conv->altform_0 = true;
    5162:	78a3      	ldrb	r3, [r4, #2]
    5164:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    5168:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
    516a:	4640      	mov	r0, r8
    516c:	b003      	add	sp, #12
    516e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    5172:	2b70      	cmp	r3, #112	; 0x70
    5174:	d003      	beq.n	517e <encode_uint+0x7e>
		return 10;
    5176:	2b78      	cmp	r3, #120	; 0x78
    5178:	e7d2      	b.n	5120 <encode_uint+0x20>
		return 8;
    517a:	2508      	movs	r5, #8
    517c:	e7d3      	b.n	5126 <encode_uint+0x26>
		return 16;
    517e:	2510      	movs	r5, #16
    5180:	e7d1      	b.n	5126 <encode_uint+0x26>
		value /= radix;
    5182:	4606      	mov	r6, r0
    5184:	460f      	mov	r7, r1
    5186:	e7d3      	b.n	5130 <encode_uint+0x30>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5188:	f1b9 0f01 	cmp.w	r9, #1
    518c:	bf0c      	ite	eq
    518e:	3337      	addeq	r3, #55	; 0x37
    5190:	3357      	addne	r3, #87	; 0x57
    5192:	e7d7      	b.n	5144 <encode_uint+0x44>
		} else if (radix == 16) {
    5194:	2d10      	cmp	r5, #16
    5196:	d1e8      	bne.n	516a <encode_uint+0x6a>
			conv->altform_0c = true;
    5198:	78a3      	ldrb	r3, [r4, #2]
    519a:	f043 0310 	orr.w	r3, r3, #16
    519e:	e7e3      	b.n	5168 <encode_uint+0x68>
    51a0:	00036d64 	.word	0x00036d64

000051a4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    51a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51a8:	4681      	mov	r9, r0
    51aa:	b093      	sub	sp, #76	; 0x4c
    51ac:	468a      	mov	sl, r1
    51ae:	4693      	mov	fp, r2
    51b0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    51b2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    51b4:	f89b 0000 	ldrb.w	r0, [fp]
    51b8:	b908      	cbnz	r0, 51be <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    51ba:	4628      	mov	r0, r5
    51bc:	e2d9      	b.n	5772 <cbvprintf+0x5ce>
		if (*fp != '%') {
    51be:	f10b 0301 	add.w	r3, fp, #1
    51c2:	2825      	cmp	r0, #37	; 0x25
    51c4:	9302      	str	r3, [sp, #8]
    51c6:	d006      	beq.n	51d6 <cbvprintf+0x32>
			OUTC('%');
    51c8:	4651      	mov	r1, sl
    51ca:	47c8      	blx	r9
    51cc:	2800      	cmp	r0, #0
    51ce:	f2c0 82d0 	blt.w	5772 <cbvprintf+0x5ce>
    51d2:	3501      	adds	r5, #1
			break;
    51d4:	e1b2      	b.n	553c <cbvprintf+0x398>
		} state = {
    51d6:	2218      	movs	r2, #24
    51d8:	2100      	movs	r1, #0
    51da:	a80c      	add	r0, sp, #48	; 0x30
    51dc:	f029 f8a0 	bl	2e320 <memset>
	if (*sp == '%') {
    51e0:	f89b 3001 	ldrb.w	r3, [fp, #1]
    51e4:	2b25      	cmp	r3, #37	; 0x25
    51e6:	d055      	beq.n	5294 <cbvprintf+0xf0>
    51e8:	9a02      	ldr	r2, [sp, #8]
    51ea:	4616      	mov	r6, r2
		switch (*sp) {
    51ec:	f812 3b01 	ldrb.w	r3, [r2], #1
    51f0:	2b2b      	cmp	r3, #43	; 0x2b
    51f2:	f000 8087 	beq.w	5304 <cbvprintf+0x160>
    51f6:	d875      	bhi.n	52e4 <cbvprintf+0x140>
    51f8:	2b20      	cmp	r3, #32
    51fa:	f000 8088 	beq.w	530e <cbvprintf+0x16a>
    51fe:	2b23      	cmp	r3, #35	; 0x23
    5200:	f000 808a 	beq.w	5318 <cbvprintf+0x174>
	if (conv->flag_zero && conv->flag_dash) {
    5204:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5208:	f003 0244 	and.w	r2, r3, #68	; 0x44
    520c:	2a44      	cmp	r2, #68	; 0x44
    520e:	d103      	bne.n	5218 <cbvprintf+0x74>
		conv->flag_zero = false;
    5210:	f36f 1386 	bfc	r3, #6, #1
    5214:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    5218:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    521c:	9605      	str	r6, [sp, #20]
    521e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5222:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    5226:	7833      	ldrb	r3, [r6, #0]
    5228:	2b2a      	cmp	r3, #42	; 0x2a
    522a:	d17a      	bne.n	5322 <cbvprintf+0x17e>
		conv->width_star = true;
    522c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5230:	f043 0301 	orr.w	r3, r3, #1
    5234:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    5238:	1c72      	adds	r2, r6, #1
	sp = extract_prec(conv, sp);
    523a:	9205      	str	r2, [sp, #20]
	conv->prec_present = (*sp == '.');
    523c:	7813      	ldrb	r3, [r2, #0]
    523e:	2b2e      	cmp	r3, #46	; 0x2e
    5240:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5244:	bf0c      	ite	eq
    5246:	2101      	moveq	r1, #1
    5248:	2100      	movne	r1, #0
    524a:	f361 0341 	bfi	r3, r1, #1, #1
    524e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    5252:	d10b      	bne.n	526c <cbvprintf+0xc8>
	++sp;
    5254:	1c53      	adds	r3, r2, #1
    5256:	9305      	str	r3, [sp, #20]
	if (*sp == '*') {
    5258:	7853      	ldrb	r3, [r2, #1]
    525a:	2b2a      	cmp	r3, #42	; 0x2a
    525c:	d175      	bne.n	534a <cbvprintf+0x1a6>
		conv->prec_star = true;
    525e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5262:	f043 0304 	orr.w	r3, r3, #4
    5266:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    526a:	3202      	adds	r2, #2
	switch (*sp) {
    526c:	4611      	mov	r1, r2
    526e:	f811 0b01 	ldrb.w	r0, [r1], #1
    5272:	286a      	cmp	r0, #106	; 0x6a
    5274:	f000 80b6 	beq.w	53e4 <cbvprintf+0x240>
    5278:	d877      	bhi.n	536a <cbvprintf+0x1c6>
    527a:	284c      	cmp	r0, #76	; 0x4c
    527c:	f000 80ba 	beq.w	53f4 <cbvprintf+0x250>
    5280:	2868      	cmp	r0, #104	; 0x68
    5282:	d07f      	beq.n	5384 <cbvprintf+0x1e0>
		conv->length_mod = LENGTH_NONE;
    5284:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5288:	f36f 03c6 	bfc	r3, #3, #4
    528c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    5290:	4611      	mov	r1, r2
    5292:	e082      	b.n	539a <cbvprintf+0x1f6>
		conv->specifier = *sp++;
    5294:	f10b 0202 	add.w	r2, fp, #2
    5298:	9202      	str	r2, [sp, #8]
    529a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    529e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    52a2:	07d9      	lsls	r1, r3, #31
    52a4:	f140 810e 	bpl.w	54c4 <cbvprintf+0x320>
			width = va_arg(ap, int);
    52a8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    52ac:	f1b8 0f00 	cmp.w	r8, #0
    52b0:	da07      	bge.n	52c2 <cbvprintf+0x11e>
				conv->flag_dash = true;
    52b2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    52b6:	f042 0204 	orr.w	r2, r2, #4
    52ba:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    52be:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    52c2:	075a      	lsls	r2, r3, #29
    52c4:	f140 8107 	bpl.w	54d6 <cbvprintf+0x332>
			int arg = va_arg(ap, int);
    52c8:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    52cc:	2f00      	cmp	r7, #0
    52ce:	f280 8106 	bge.w	54de <cbvprintf+0x33a>
				conv->prec_present = false;
    52d2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    52d6:	f36f 0341 	bfc	r3, #1, #1
    52da:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    52de:	f04f 37ff 	mov.w	r7, #4294967295
    52e2:	e0fc      	b.n	54de <cbvprintf+0x33a>
		switch (*sp) {
    52e4:	2b2d      	cmp	r3, #45	; 0x2d
    52e6:	d006      	beq.n	52f6 <cbvprintf+0x152>
    52e8:	2b30      	cmp	r3, #48	; 0x30
    52ea:	d18b      	bne.n	5204 <cbvprintf+0x60>
			conv->flag_zero = true;
    52ec:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    52f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    52f4:	e003      	b.n	52fe <cbvprintf+0x15a>
			conv->flag_dash = true;
    52f6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    52fa:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    52fe:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			++sp;
    5302:	e772      	b.n	51ea <cbvprintf+0x46>
			conv->flag_plus = true;
    5304:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5308:	f043 0308 	orr.w	r3, r3, #8
    530c:	e7f7      	b.n	52fe <cbvprintf+0x15a>
			conv->flag_space = true;
    530e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5312:	f043 0310 	orr.w	r3, r3, #16
    5316:	e7f2      	b.n	52fe <cbvprintf+0x15a>
			conv->flag_hash = true;
    5318:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    531c:	f043 0320 	orr.w	r3, r3, #32
    5320:	e7ed      	b.n	52fe <cbvprintf+0x15a>
	size_t width = extract_decimal(&sp);
    5322:	a805      	add	r0, sp, #20
    5324:	f7ff fed8 	bl	50d8 <extract_decimal>
	if (sp != wp) {
    5328:	9a05      	ldr	r2, [sp, #20]
    532a:	42b2      	cmp	r2, r6
    532c:	d085      	beq.n	523a <cbvprintf+0x96>
		conv->width_present = true;
    532e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
		conv->width_value = width;
    5332:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    5334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5338:	f3c3 0140 	ubfx	r1, r3, #1, #1
    533c:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
    5340:	f361 0341 	bfi	r3, r1, #1, #1
    5344:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    5348:	e777      	b.n	523a <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
    534a:	a805      	add	r0, sp, #20
    534c:	f7ff fec4 	bl	50d8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    5350:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    5354:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    5356:	f3c3 0240 	ubfx	r2, r3, #1, #1
    535a:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    535e:	f362 0341 	bfi	r3, r2, #1, #1
    5362:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    5366:	9a05      	ldr	r2, [sp, #20]
    5368:	e780      	b.n	526c <cbvprintf+0xc8>
	switch (*sp) {
    536a:	2874      	cmp	r0, #116	; 0x74
    536c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5370:	d03e      	beq.n	53f0 <cbvprintf+0x24c>
    5372:	287a      	cmp	r0, #122	; 0x7a
    5374:	d03a      	beq.n	53ec <cbvprintf+0x248>
    5376:	286c      	cmp	r0, #108	; 0x6c
    5378:	d184      	bne.n	5284 <cbvprintf+0xe0>
		if (*++sp == 'l') {
    537a:	7850      	ldrb	r0, [r2, #1]
    537c:	286c      	cmp	r0, #108	; 0x6c
    537e:	d12f      	bne.n	53e0 <cbvprintf+0x23c>
			conv->length_mod = LENGTH_LL;
    5380:	2104      	movs	r1, #4
    5382:	e005      	b.n	5390 <cbvprintf+0x1ec>
		if (*++sp == 'h') {
    5384:	7853      	ldrb	r3, [r2, #1]
    5386:	2b68      	cmp	r3, #104	; 0x68
    5388:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    538c:	d122      	bne.n	53d4 <cbvprintf+0x230>
			conv->length_mod = LENGTH_HH;
    538e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    5390:	f361 03c6 	bfi	r3, r1, #3, #4
    5394:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
			++sp;
    5398:	1c91      	adds	r1, r2, #2
	conv->specifier = *sp++;
    539a:	460b      	mov	r3, r1
    539c:	f813 2b01 	ldrb.w	r2, [r3], #1
    53a0:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    53a2:	2a67      	cmp	r2, #103	; 0x67
	conv->specifier = *sp++;
    53a4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    53a8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    53ac:	d83d      	bhi.n	542a <cbvprintf+0x286>
    53ae:	2a65      	cmp	r2, #101	; 0x65
    53b0:	d232      	bcs.n	5418 <cbvprintf+0x274>
    53b2:	2a58      	cmp	r2, #88	; 0x58
    53b4:	d074      	beq.n	54a0 <cbvprintf+0x2fc>
    53b6:	d82a      	bhi.n	540e <cbvprintf+0x26a>
    53b8:	2a41      	cmp	r2, #65	; 0x41
    53ba:	d02d      	beq.n	5418 <cbvprintf+0x274>
    53bc:	d302      	bcc.n	53c4 <cbvprintf+0x220>
    53be:	3a45      	subs	r2, #69	; 0x45
    53c0:	2a02      	cmp	r2, #2
    53c2:	d929      	bls.n	5418 <cbvprintf+0x274>
		conv->invalid = true;
    53c4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    53c8:	f043 0301 	orr.w	r3, r3, #1
    53cc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    53d0:	2300      	movs	r3, #0
    53d2:	e048      	b.n	5466 <cbvprintf+0x2c2>
			conv->length_mod = LENGTH_H;
    53d4:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    53d6:	f362 03c6 	bfi	r3, r2, #3, #4
    53da:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    53de:	e7dc      	b.n	539a <cbvprintf+0x1f6>
    53e0:	2203      	movs	r2, #3
    53e2:	e7f8      	b.n	53d6 <cbvprintf+0x232>
		conv->length_mod = LENGTH_J;
    53e4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    53e8:	2205      	movs	r2, #5
    53ea:	e7f4      	b.n	53d6 <cbvprintf+0x232>
		conv->length_mod = LENGTH_Z;
    53ec:	2206      	movs	r2, #6
    53ee:	e7f2      	b.n	53d6 <cbvprintf+0x232>
		conv->length_mod = LENGTH_T;
    53f0:	2207      	movs	r2, #7
    53f2:	e7f0      	b.n	53d6 <cbvprintf+0x232>
		conv->unsupported = true;
    53f4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    53f8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    53fc:	f023 0302 	bic.w	r3, r3, #2
    5400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    5404:	f043 0302 	orr.w	r3, r3, #2
    5408:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    540c:	e7c5      	b.n	539a <cbvprintf+0x1f6>
	switch (conv->specifier) {
    540e:	2a63      	cmp	r2, #99	; 0x63
    5410:	d046      	beq.n	54a0 <cbvprintf+0x2fc>
    5412:	d812      	bhi.n	543a <cbvprintf+0x296>
    5414:	2a61      	cmp	r2, #97	; 0x61
    5416:	d1d5      	bne.n	53c4 <cbvprintf+0x220>
		conv->specifier_cat = SPECIFIER_FP;
    5418:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    541c:	2204      	movs	r2, #4
    541e:	f362 0302 	bfi	r3, r2, #0, #3
    5422:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    5426:	2301      	movs	r3, #1
    5428:	e01d      	b.n	5466 <cbvprintf+0x2c2>
	switch (conv->specifier) {
    542a:	2a70      	cmp	r2, #112	; 0x70
    542c:	d02b      	beq.n	5486 <cbvprintf+0x2e2>
    542e:	d824      	bhi.n	547a <cbvprintf+0x2d6>
    5430:	2a6e      	cmp	r2, #110	; 0x6e
    5432:	d039      	beq.n	54a8 <cbvprintf+0x304>
    5434:	d834      	bhi.n	54a0 <cbvprintf+0x2fc>
    5436:	2a69      	cmp	r2, #105	; 0x69
    5438:	d1c4      	bne.n	53c4 <cbvprintf+0x220>
		conv->specifier_cat = SPECIFIER_SINT;
    543a:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    543e:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    5440:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    5444:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    5448:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    544a:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    544e:	bf02      	ittt	eq
    5450:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    5454:	f041 0101 	orreq.w	r1, r1, #1
    5458:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    545c:	2a63      	cmp	r2, #99	; 0x63
    545e:	d1b7      	bne.n	53d0 <cbvprintf+0x22c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    5460:	3300      	adds	r3, #0
    5462:	bf18      	it	ne
    5464:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    5466:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    546a:	f3c2 0140 	ubfx	r1, r2, #1, #1
    546e:	430b      	orrs	r3, r1
    5470:	f363 0241 	bfi	r2, r3, #1, #1
    5474:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    5478:	e711      	b.n	529e <cbvprintf+0xfa>
	switch (conv->specifier) {
    547a:	2a75      	cmp	r2, #117	; 0x75
    547c:	d010      	beq.n	54a0 <cbvprintf+0x2fc>
    547e:	2a78      	cmp	r2, #120	; 0x78
    5480:	d00e      	beq.n	54a0 <cbvprintf+0x2fc>
    5482:	2a73      	cmp	r2, #115	; 0x73
    5484:	d19e      	bne.n	53c4 <cbvprintf+0x220>
		conv->specifier_cat = SPECIFIER_PTR;
    5486:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    548a:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    548c:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    5490:	f361 0202 	bfi	r2, r1, #0, #3
    5494:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    5498:	bf14      	ite	ne
    549a:	2301      	movne	r3, #1
    549c:	2300      	moveq	r3, #0
    549e:	e7e2      	b.n	5466 <cbvprintf+0x2c2>
		conv->specifier_cat = SPECIFIER_UINT;
    54a0:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    54a4:	2002      	movs	r0, #2
    54a6:	e7cb      	b.n	5440 <cbvprintf+0x29c>
		conv->specifier_cat = SPECIFIER_PTR;
    54a8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    54ac:	f003 0378 	and.w	r3, r3, #120	; 0x78
    54b0:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    54b4:	2103      	movs	r1, #3
    54b6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    54ba:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    54bc:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    54c0:	4143      	adcs	r3, r0
    54c2:	e7d0      	b.n	5466 <cbvprintf+0x2c2>
		} else if (conv->width_present) {
    54c4:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    54c8:	2a00      	cmp	r2, #0
			width = conv->width_value;
    54ca:	bfb4      	ite	lt
    54cc:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    54d0:	f04f 38ff 	movge.w	r8, #4294967295
    54d4:	e6f5      	b.n	52c2 <cbvprintf+0x11e>
		} else if (conv->prec_present) {
    54d6:	079f      	lsls	r7, r3, #30
    54d8:	f57f af01 	bpl.w	52de <cbvprintf+0x13a>
			precision = conv->prec_value;
    54dc:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum specifier_cat_enum)conv->specifier_cat;
    54de:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		conv->pad0_value = 0;
    54e2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    54e4:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		enum specifier_cat_enum specifier_cat
    54e8:	f002 0207 	and.w	r2, r2, #7
			= (enum length_mod_enum)conv->length_mod;
    54ec:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
		if (specifier_cat == SPECIFIER_SINT) {
    54f0:	2a01      	cmp	r2, #1
			= (enum length_mod_enum)conv->length_mod;
    54f2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    54f6:	d137      	bne.n	5568 <cbvprintf+0x3c4>
			switch (length_mod) {
    54f8:	1eda      	subs	r2, r3, #3
    54fa:	2a04      	cmp	r2, #4
    54fc:	d821      	bhi.n	5542 <cbvprintf+0x39e>
    54fe:	e8df f002 	tbb	[pc, r2]
    5502:	0703      	.short	0x0703
    5504:	2007      	.short	0x2007
    5506:	20          	.byte	0x20
    5507:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    5508:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    550c:	17c1      	asrs	r1, r0, #31
    550e:	e004      	b.n	551a <cbvprintf+0x376>
					(sint_value_type)va_arg(ap, intmax_t);
    5510:	3407      	adds	r4, #7
    5512:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    5516:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    551a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    551e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    5522:	f012 0603 	ands.w	r6, r2, #3
    5526:	d055      	beq.n	55d4 <cbvprintf+0x430>
			OUTS(sp, fp);
    5528:	9b02      	ldr	r3, [sp, #8]
    552a:	465a      	mov	r2, fp
    552c:	4651      	mov	r1, sl
    552e:	4648      	mov	r0, r9
    5530:	f022 fc32 	bl	27d98 <outs>
    5534:	2800      	cmp	r0, #0
    5536:	f2c0 811c 	blt.w	5772 <cbvprintf+0x5ce>
    553a:	4405      	add	r5, r0
			OUTS(bps, bpe);
    553c:	f8dd b008 	ldr.w	fp, [sp, #8]
    5540:	e638      	b.n	51b4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    5542:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    5546:	2b01      	cmp	r3, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    5548:	ea4f 71e0 	mov.w	r1, r0, asr #31
    554c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    5550:	d105      	bne.n	555e <cbvprintf+0x3ba>
				value->uint = (unsigned char)value->uint;
    5552:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    5556:	920c      	str	r2, [sp, #48]	; 0x30
    5558:	2200      	movs	r2, #0
    555a:	920d      	str	r2, [sp, #52]	; 0x34
    555c:	e7df      	b.n	551e <cbvprintf+0x37a>
			} else if (length_mod == LENGTH_H) {
    555e:	2b02      	cmp	r3, #2
    5560:	d1dd      	bne.n	551e <cbvprintf+0x37a>
				value->sint = (short)value->sint;
    5562:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
    5566:	e7d1      	b.n	550c <cbvprintf+0x368>
		} else if (specifier_cat == SPECIFIER_UINT) {
    5568:	2a02      	cmp	r2, #2
    556a:	d123      	bne.n	55b4 <cbvprintf+0x410>
			switch (length_mod) {
    556c:	1eda      	subs	r2, r3, #3
    556e:	2a04      	cmp	r2, #4
    5570:	d813      	bhi.n	559a <cbvprintf+0x3f6>
    5572:	e8df f002 	tbb	[pc, r2]
    5576:	0a03      	.short	0x0a03
    5578:	120a      	.short	0x120a
    557a:	12          	.byte	0x12
    557b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    557c:	6820      	ldr	r0, [r4, #0]
    557e:	900c      	str	r0, [sp, #48]	; 0x30
    5580:	2100      	movs	r1, #0
    5582:	1d22      	adds	r2, r4, #4
    5584:	910d      	str	r1, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    5586:	4614      	mov	r4, r2
    5588:	e7c9      	b.n	551e <cbvprintf+0x37a>
					(uint_value_type)va_arg(ap,
    558a:	3407      	adds	r4, #7
    558c:	f024 0207 	bic.w	r2, r4, #7
				value->uint =
    5590:	e8f2 0102 	ldrd	r0, r1, [r2], #8
    5594:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
				break;
    5598:	e7f5      	b.n	5586 <cbvprintf+0x3e2>
					(uint_value_type)va_arg(ap, size_t);
    559a:	f854 2b04 	ldr.w	r2, [r4], #4
    559e:	920c      	str	r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    55a0:	2b01      	cmp	r3, #1
					(uint_value_type)va_arg(ap, size_t);
    55a2:	f04f 0200 	mov.w	r2, #0
    55a6:	920d      	str	r2, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    55a8:	d0d3      	beq.n	5552 <cbvprintf+0x3ae>
			} else if (length_mod == LENGTH_H) {
    55aa:	2b02      	cmp	r3, #2
    55ac:	d1b7      	bne.n	551e <cbvprintf+0x37a>
				value->uint = (unsigned short)value->uint;
    55ae:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    55b2:	e7d0      	b.n	5556 <cbvprintf+0x3b2>
		} else if (specifier_cat == SPECIFIER_FP) {
    55b4:	2a04      	cmp	r2, #4
    55b6:	d107      	bne.n	55c8 <cbvprintf+0x424>
			if (length_mod == LENGTH_UPPER_L) {
    55b8:	3407      	adds	r4, #7
    55ba:	f024 0407 	bic.w	r4, r4, #7
    55be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    55c2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    55c6:	e7aa      	b.n	551e <cbvprintf+0x37a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    55c8:	2a03      	cmp	r2, #3
			value->ptr = va_arg(ap, void *);
    55ca:	bf04      	itt	eq
    55cc:	f854 2b04 	ldreq.w	r2, [r4], #4
    55d0:	920c      	streq	r2, [sp, #48]	; 0x30
    55d2:	e7a4      	b.n	551e <cbvprintf+0x37a>
		switch (conv->specifier) {
    55d4:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    55d8:	286e      	cmp	r0, #110	; 0x6e
    55da:	f000 80a4 	beq.w	5726 <cbvprintf+0x582>
    55de:	d83a      	bhi.n	5656 <cbvprintf+0x4b2>
    55e0:	2863      	cmp	r0, #99	; 0x63
    55e2:	d06e      	beq.n	56c2 <cbvprintf+0x51e>
    55e4:	d820      	bhi.n	5628 <cbvprintf+0x484>
    55e6:	2825      	cmp	r0, #37	; 0x25
    55e8:	f43f adee 	beq.w	51c8 <cbvprintf+0x24>
    55ec:	2858      	cmp	r0, #88	; 0x58
    55ee:	d1a5      	bne.n	553c <cbvprintf+0x398>
			bps = encode_uint(value->uint, conv, buf, bpe);
    55f0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    55f4:	9300      	str	r3, [sp, #0]
    55f6:	aa0e      	add	r2, sp, #56	; 0x38
    55f8:	ab06      	add	r3, sp, #24
    55fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    55fe:	f7ff fd7f 	bl	5100 <encode_uint>
    5602:	4683      	mov	fp, r0
			if (precision >= 0) {
    5604:	2f00      	cmp	r7, #0
    5606:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    560a:	db0b      	blt.n	5624 <cbvprintf+0x480>
				conv->flag_zero = false;
    560c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    5610:	eba0 030b 	sub.w	r3, r0, fp
				conv->flag_zero = false;
    5614:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    5618:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    561a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    561e:	d901      	bls.n	5624 <cbvprintf+0x480>
					conv->pad0_value = precision - (int)len;
    5620:	1aff      	subs	r7, r7, r3
    5622:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    5624:	4607      	mov	r7, r0
    5626:	e044      	b.n	56b2 <cbvprintf+0x50e>
		switch (conv->specifier) {
    5628:	2864      	cmp	r0, #100	; 0x64
    562a:	d001      	beq.n	5630 <cbvprintf+0x48c>
    562c:	2869      	cmp	r0, #105	; 0x69
    562e:	d185      	bne.n	553c <cbvprintf+0x398>
			if (conv->flag_plus) {
    5630:	0716      	lsls	r6, r2, #28
    5632:	d476      	bmi.n	5722 <cbvprintf+0x57e>
				sign = ' ';
    5634:	f012 0610 	ands.w	r6, r2, #16
    5638:	bf18      	it	ne
    563a:	2620      	movne	r6, #32
			if (value->sint < 0) {
    563c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    5640:	2a00      	cmp	r2, #0
    5642:	f173 0100 	sbcs.w	r1, r3, #0
    5646:	dad3      	bge.n	55f0 <cbvprintf+0x44c>
				value->uint = (uint_value_type)-value->sint;
    5648:	4252      	negs	r2, r2
    564a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    564e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    5652:	262d      	movs	r6, #45	; 0x2d
    5654:	e7cc      	b.n	55f0 <cbvprintf+0x44c>
		switch (conv->specifier) {
    5656:	2873      	cmp	r0, #115	; 0x73
    5658:	d020      	beq.n	569c <cbvprintf+0x4f8>
    565a:	d81b      	bhi.n	5694 <cbvprintf+0x4f0>
    565c:	286f      	cmp	r0, #111	; 0x6f
    565e:	d0c7      	beq.n	55f0 <cbvprintf+0x44c>
    5660:	2870      	cmp	r0, #112	; 0x70
    5662:	f47f af6b 	bne.w	553c <cbvprintf+0x398>
			if (value->ptr != NULL) {
    5666:	980c      	ldr	r0, [sp, #48]	; 0x30
    5668:	2800      	cmp	r0, #0
    566a:	d071      	beq.n	5750 <cbvprintf+0x5ac>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    566c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    5670:	9300      	str	r3, [sp, #0]
    5672:	aa0e      	add	r2, sp, #56	; 0x38
    5674:	ab06      	add	r3, sp, #24
    5676:	4631      	mov	r1, r6
    5678:	f7ff fd42 	bl	5100 <encode_uint>
				conv->altform_0c = true;
    567c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    5680:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    5684:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    5688:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    568c:	4683      	mov	fp, r0
				conv->altform_0c = true;
    568e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
    5692:	e7b7      	b.n	5604 <cbvprintf+0x460>
		switch (conv->specifier) {
    5694:	2875      	cmp	r0, #117	; 0x75
    5696:	d0ab      	beq.n	55f0 <cbvprintf+0x44c>
    5698:	2878      	cmp	r0, #120	; 0x78
    569a:	e7a8      	b.n	55ee <cbvprintf+0x44a>
			if (precision >= 0) {
    569c:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    569e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
			if (precision >= 0) {
    56a2:	db0a      	blt.n	56ba <cbvprintf+0x516>
				len = strnlen(bps, precision);
    56a4:	4639      	mov	r1, r7
    56a6:	4658      	mov	r0, fp
    56a8:	f028 ffa3 	bl	2e5f2 <strnlen>
			bpe = bps + len;
    56ac:	eb0b 0700 	add.w	r7, fp, r0
		char sign = 0;
    56b0:	2600      	movs	r6, #0
		if (bps == NULL) {
    56b2:	f1bb 0f00 	cmp.w	fp, #0
    56b6:	d10b      	bne.n	56d0 <cbvprintf+0x52c>
    56b8:	e740      	b.n	553c <cbvprintf+0x398>
				len = strlen(bps);
    56ba:	4658      	mov	r0, fp
    56bc:	f7fc fba4 	bl	1e08 <strlen>
    56c0:	e7f4      	b.n	56ac <cbvprintf+0x508>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    56c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    56c4:	f88d 3018 	strb.w	r3, [sp, #24]
			bpe = buf + 1;
    56c8:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
    56cc:	f10d 0b18 	add.w	fp, sp, #24
		size_t nj_len = (bpe - bps);
    56d0:	eba7 030b 	sub.w	r3, r7, fp
		if (sign != 0) {
    56d4:	b106      	cbz	r6, 56d8 <cbvprintf+0x534>
			nj_len += 1U;
    56d6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    56d8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    56dc:	06d0      	lsls	r0, r2, #27
    56de:	d53c      	bpl.n	575a <cbvprintf+0x5b6>
			nj_len += 2U;
    56e0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    56e2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    56e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    56e6:	bf48      	it	mi
    56e8:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    56ea:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    56ec:	bf48      	it	mi
    56ee:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    56f0:	f1b8 0f00 	cmp.w	r8, #0
    56f4:	dd4a      	ble.n	578c <cbvprintf+0x5e8>
			if (!conv->flag_dash) {
    56f6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    56fa:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    56fe:	f3c2 0380 	ubfx	r3, r2, #2, #1
    5702:	9303      	str	r3, [sp, #12]
    5704:	2b00      	cmp	r3, #0
    5706:	d141      	bne.n	578c <cbvprintf+0x5e8>
				if (conv->flag_zero) {
    5708:	0650      	lsls	r0, r2, #25
    570a:	d535      	bpl.n	5778 <cbvprintf+0x5d4>
					if (sign != 0) {
    570c:	b13e      	cbz	r6, 571e <cbvprintf+0x57a>
						OUTC(sign);
    570e:	4651      	mov	r1, sl
    5710:	4630      	mov	r0, r6
    5712:	47c8      	blx	r9
    5714:	2800      	cmp	r0, #0
    5716:	db2c      	blt.n	5772 <cbvprintf+0x5ce>
						sign = 0;
    5718:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    571a:	3501      	adds	r5, #1
						sign = 0;
    571c:	461e      	mov	r6, r3
					pad = '0';
    571e:	2330      	movs	r3, #48	; 0x30
    5720:	e02b      	b.n	577a <cbvprintf+0x5d6>
				sign = '+';
    5722:	262b      	movs	r6, #43	; 0x2b
    5724:	e78a      	b.n	563c <cbvprintf+0x498>
				store_count(conv, value->ptr, count);
    5726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    5728:	2b07      	cmp	r3, #7
    572a:	f63f af07 	bhi.w	553c <cbvprintf+0x398>
    572e:	e8df f003 	tbb	[pc, r3]
    5732:	040d      	.short	0x040d
    5734:	08080d06 	.word	0x08080d06
    5738:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    573a:	7015      	strb	r5, [r2, #0]
		break;
    573c:	e6fe      	b.n	553c <cbvprintf+0x398>
		*(short *)dp = (short)count;
    573e:	8015      	strh	r5, [r2, #0]
		break;
    5740:	e6fc      	b.n	553c <cbvprintf+0x398>
		*(intmax_t *)dp = (intmax_t)count;
    5742:	4628      	mov	r0, r5
    5744:	17e9      	asrs	r1, r5, #31
    5746:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    574a:	e6f7      	b.n	553c <cbvprintf+0x398>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    574c:	6015      	str	r5, [r2, #0]
		break;
    574e:	e6f5      	b.n	553c <cbvprintf+0x398>
			bpe = bps + 5;
    5750:	4f2e      	ldr	r7, [pc, #184]	; (580c <cbvprintf+0x668>)
    5752:	4606      	mov	r6, r0
			bps = "(nil)";
    5754:	f1a7 0b05 	sub.w	fp, r7, #5
    5758:	e7ba      	b.n	56d0 <cbvprintf+0x52c>
		} else if (conv->altform_0) {
    575a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    575c:	bf48      	it	mi
    575e:	3301      	addmi	r3, #1
    5760:	e7bf      	b.n	56e2 <cbvprintf+0x53e>
					OUTC(pad);
    5762:	4618      	mov	r0, r3
    5764:	4651      	mov	r1, sl
    5766:	9303      	str	r3, [sp, #12]
    5768:	47c8      	blx	r9
    576a:	2800      	cmp	r0, #0
				while (width-- > 0) {
    576c:	4642      	mov	r2, r8
					OUTC(pad);
    576e:	9b03      	ldr	r3, [sp, #12]
    5770:	da05      	bge.n	577e <cbvprintf+0x5da>
#undef OUTS
#undef OUTC
}
    5772:	b013      	add	sp, #76	; 0x4c
    5774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    5778:	2320      	movs	r3, #32
					pad = '0';
    577a:	4642      	mov	r2, r8
    577c:	4445      	add	r5, r8
				while (width-- > 0) {
    577e:	2a00      	cmp	r2, #0
    5780:	eba5 0102 	sub.w	r1, r5, r2
    5784:	f102 38ff 	add.w	r8, r2, #4294967295
    5788:	dceb      	bgt.n	5762 <cbvprintf+0x5be>
    578a:	460d      	mov	r5, r1
		if (sign != 0) {
    578c:	b12e      	cbz	r6, 579a <cbvprintf+0x5f6>
			OUTC(sign);
    578e:	4651      	mov	r1, sl
    5790:	4630      	mov	r0, r6
    5792:	47c8      	blx	r9
    5794:	2800      	cmp	r0, #0
    5796:	dbec      	blt.n	5772 <cbvprintf+0x5ce>
    5798:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    579a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    579e:	06d9      	lsls	r1, r3, #27
    57a0:	d401      	bmi.n	57a6 <cbvprintf+0x602>
    57a2:	071a      	lsls	r2, r3, #28
    57a4:	d505      	bpl.n	57b2 <cbvprintf+0x60e>
				OUTC('0');
    57a6:	4651      	mov	r1, sl
    57a8:	2030      	movs	r0, #48	; 0x30
    57aa:	47c8      	blx	r9
    57ac:	2800      	cmp	r0, #0
    57ae:	dbe0      	blt.n	5772 <cbvprintf+0x5ce>
    57b0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    57b2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    57b6:	06db      	lsls	r3, r3, #27
    57b8:	d506      	bpl.n	57c8 <cbvprintf+0x624>
				OUTC(conv->specifier);
    57ba:	4651      	mov	r1, sl
    57bc:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    57c0:	47c8      	blx	r9
    57c2:	2800      	cmp	r0, #0
    57c4:	dbd5      	blt.n	5772 <cbvprintf+0x5ce>
    57c6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    57c8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    57ca:	442e      	add	r6, r5
    57cc:	1b73      	subs	r3, r6, r5
    57ce:	2b00      	cmp	r3, #0
    57d0:	dc15      	bgt.n	57fe <cbvprintf+0x65a>
			OUTS(bps, bpe);
    57d2:	463b      	mov	r3, r7
    57d4:	465a      	mov	r2, fp
    57d6:	4651      	mov	r1, sl
    57d8:	4648      	mov	r0, r9
    57da:	f022 fadd 	bl	27d98 <outs>
    57de:	2800      	cmp	r0, #0
    57e0:	dbc7      	blt.n	5772 <cbvprintf+0x5ce>
    57e2:	4405      	add	r5, r0
		while (width > 0) {
    57e4:	44a8      	add	r8, r5
    57e6:	eba8 0305 	sub.w	r3, r8, r5
    57ea:	2b00      	cmp	r3, #0
    57ec:	f77f aea6 	ble.w	553c <cbvprintf+0x398>
			OUTC(' ');
    57f0:	4651      	mov	r1, sl
    57f2:	2020      	movs	r0, #32
    57f4:	47c8      	blx	r9
    57f6:	2800      	cmp	r0, #0
    57f8:	dbbb      	blt.n	5772 <cbvprintf+0x5ce>
    57fa:	3501      	adds	r5, #1
			--width;
    57fc:	e7f3      	b.n	57e6 <cbvprintf+0x642>
				OUTC('0');
    57fe:	4651      	mov	r1, sl
    5800:	2030      	movs	r0, #48	; 0x30
    5802:	47c8      	blx	r9
    5804:	2800      	cmp	r0, #0
    5806:	dbb4      	blt.n	5772 <cbvprintf+0x5ce>
    5808:	3501      	adds	r5, #1
    580a:	e7df      	b.n	57cc <cbvprintf+0x628>
    580c:	000307e8 	.word	0x000307e8

00005810 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    5810:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5814:	460f      	mov	r7, r1
    5816:	4681      	mov	r9, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5818:	2108      	movs	r1, #8
    581a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    581c:	4e12      	ldr	r6, [pc, #72]	; (5868 <nvs_recover_last_ate+0x58>)
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    581e:	f022 fb4d 	bl	27ebc <nvs_al_size.isra.0>
	*addr -= ate_size;
    5822:	683c      	ldr	r4, [r7, #0]
    5824:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5826:	4680      	mov	r8, r0
	*addr -= ate_size;
    5828:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    582a:	ea04 0506 	and.w	r5, r4, r6
	while (ate_end_addr > data_end_addr) {
    582e:	42ac      	cmp	r4, r5
    5830:	d803      	bhi.n	583a <nvs_recover_last_ate+0x2a>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    5832:	2000      	movs	r0, #0
}
    5834:	b003      	add	sp, #12
    5836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    583a:	2308      	movs	r3, #8
    583c:	466a      	mov	r2, sp
    583e:	4621      	mov	r1, r4
    5840:	4648      	mov	r0, r9
    5842:	f022 faca 	bl	27dda <nvs_flash_rd>
		if (rc) {
    5846:	2800      	cmp	r0, #0
    5848:	d1f4      	bne.n	5834 <nvs_recover_last_ate+0x24>
		if (!nvs_ate_crc8_check(&end_ate)) {
    584a:	4668      	mov	r0, sp
    584c:	f022 fb21 	bl	27e92 <nvs_ate_crc8_check>
    5850:	b938      	cbnz	r0, 5862 <nvs_recover_last_ate+0x52>
			data_end_addr += end_ate.offset + end_ate.len;
    5852:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    5856:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    585a:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
    585c:	4035      	ands	r5, r6
			data_end_addr += end_ate.offset + end_ate.len;
    585e:	4413      	add	r3, r2
    5860:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
    5862:	eba4 0408 	sub.w	r4, r4, r8
    5866:	e7e2      	b.n	582e <nvs_recover_last_ate+0x1e>
    5868:	ffff0000 	.word	0xffff0000

0000586c <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5870:	4604      	mov	r4, r0
    5872:	b093      	sub	sp, #76	; 0x4c
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5874:	2108      	movs	r1, #8
    5876:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    5878:	f022 fb20 	bl	27ebc <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    587c:	6863      	ldr	r3, [r4, #4]
    587e:	0c1b      	lsrs	r3, r3, #16
    5880:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5882:	4681      	mov	r9, r0
	nvs_sector_advance(fs, &sec_addr);
    5884:	a901      	add	r1, sp, #4
    5886:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    5888:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
    588a:	f022 fb21 	bl	27ed0 <nvs_sector_advance.isra.1>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    588e:	9b01      	ldr	r3, [sp, #4]
    5890:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    5892:	ad04      	add	r5, sp, #16
	gc_addr = sec_addr + fs->sector_size - ate_size;
    5894:	4419      	add	r1, r3
    5896:	eba1 0109 	sub.w	r1, r1, r9
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    589a:	462a      	mov	r2, r5
    589c:	2308      	movs	r3, #8
    589e:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    58a0:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    58a2:	f022 fa9a 	bl	27dda <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    58a6:	1e02      	subs	r2, r0, #0
    58a8:	f2c0 8095 	blt.w	59d6 <nvs_gc+0x16a>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    58ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    58ae:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    58b0:	2300      	movs	r3, #0
		if (data8[i] != value) {
    58b2:	5ce9      	ldrb	r1, [r5, r3]
    58b4:	4291      	cmp	r1, r2
    58b6:	d17f      	bne.n	59b8 <nvs_gc+0x14c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    58b8:	3301      	adds	r3, #1
    58ba:	2b08      	cmp	r3, #8
    58bc:	d1f9      	bne.n	58b2 <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    58be:	9901      	ldr	r1, [sp, #4]
    58c0:	4620      	mov	r0, r4
    58c2:	f022 fb0f 	bl	27ee4 <nvs_flash_erase_sector>
    58c6:	4602      	mov	r2, r0
		if (rc) {
    58c8:	e085      	b.n	59d6 <nvs_gc+0x16a>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
    58ca:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
    58cc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
    58d0:	0c1b      	lsrs	r3, r3, #16
    58d2:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    58d4:	4413      	add	r3, r2
    58d6:	9302      	str	r3, [sp, #8]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    58d8:	f8df b104 	ldr.w	fp, [pc, #260]	; 59e0 <nvs_gc+0x174>
		gc_prev_addr = gc_addr;
    58dc:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    58e0:	aa06      	add	r2, sp, #24
    58e2:	a902      	add	r1, sp, #8
    58e4:	4620      	mov	r0, r4
    58e6:	f022 fb25 	bl	27f34 <nvs_prev_ate>
		if (rc) {
    58ea:	4602      	mov	r2, r0
    58ec:	2800      	cmp	r0, #0
    58ee:	d172      	bne.n	59d6 <nvs_gc+0x16a>
		if (nvs_ate_crc8_check(&gc_ate)) {
    58f0:	a806      	add	r0, sp, #24
    58f2:	f022 face 	bl	27e92 <nvs_ate_crc8_check>
    58f6:	2800      	cmp	r0, #0
    58f8:	d135      	bne.n	5966 <nvs_gc+0xfa>
		wlk_addr = fs->ate_wra;
    58fa:	6863      	ldr	r3, [r4, #4]
    58fc:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    58fe:	aa08      	add	r2, sp, #32
    5900:	a903      	add	r1, sp, #12
    5902:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
    5904:	9d03      	ldr	r5, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5906:	f022 fb15 	bl	27f34 <nvs_prev_ate>
			if (rc) {
    590a:	4602      	mov	r2, r0
    590c:	2800      	cmp	r0, #0
    590e:	d162      	bne.n	59d6 <nvs_gc+0x16a>
			if ((wlk_ate.id == gc_ate.id) &&
    5910:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    5914:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    5918:	429a      	cmp	r2, r3
    591a:	d027      	beq.n	596c <nvs_gc+0x100>
		} while (wlk_addr != fs->ate_wra);
    591c:	6862      	ldr	r2, [r4, #4]
    591e:	9b03      	ldr	r3, [sp, #12]
    5920:	429a      	cmp	r2, r3
    5922:	d1ec      	bne.n	58fe <nvs_gc+0x92>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    5924:	4555      	cmp	r5, sl
    5926:	d11e      	bne.n	5966 <nvs_gc+0xfa>
    5928:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    592c:	b1db      	cbz	r3, 5966 <nvs_gc+0xfa>
			data_addr += gc_ate.offset;
    592e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    5932:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
    5936:	441f      	add	r7, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
			nvs_ate_crc8_update(&gc_ate);
    5938:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    593a:	68a3      	ldr	r3, [r4, #8]
    593c:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
    5940:	f022 fab3 	bl	27eaa <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    5944:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    5946:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    594a:	681e      	ldr	r6, [r3, #0]
    594c:	4276      	negs	r6, r6
	block_size =
    594e:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    5952:	f1b8 0f00 	cmp.w	r8, #0
    5956:	d10f      	bne.n	5978 <nvs_gc+0x10c>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    5958:	a906      	add	r1, sp, #24
    595a:	4620      	mov	r0, r4
    595c:	f022 fb83 	bl	28066 <nvs_flash_ate_wrt>
			if (rc) {
    5960:	4602      	mov	r2, r0
    5962:	2800      	cmp	r0, #0
    5964:	d137      	bne.n	59d6 <nvs_gc+0x16a>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
    5966:	45ca      	cmp	sl, r9
    5968:	d1b8      	bne.n	58dc <nvs_gc+0x70>
    596a:	e7a8      	b.n	58be <nvs_gc+0x52>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    596c:	a808      	add	r0, sp, #32
    596e:	f022 fa90 	bl	27e92 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    5972:	2800      	cmp	r0, #0
    5974:	d1d2      	bne.n	591c <nvs_gc+0xb0>
    5976:	e7d5      	b.n	5924 <nvs_gc+0xb8>
		bytes_to_copy = MIN(block_size, len);
    5978:	4546      	cmp	r6, r8
    597a:	4635      	mov	r5, r6
    597c:	bf28      	it	cs
    597e:	4645      	movcs	r5, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    5980:	aa0a      	add	r2, sp, #40	; 0x28
    5982:	462b      	mov	r3, r5
    5984:	4639      	mov	r1, r7
    5986:	4620      	mov	r0, r4
    5988:	f022 fa27 	bl	27dda <nvs_flash_rd>
		if (rc) {
    598c:	4602      	mov	r2, r0
    598e:	bb10      	cbnz	r0, 59d6 <nvs_gc+0x16a>
	if (!len) {
    5990:	b135      	cbz	r5, 59a0 <nvs_gc+0x134>
    5992:	aa0a      	add	r2, sp, #40	; 0x28
    5994:	462b      	mov	r3, r5
    5996:	68a1      	ldr	r1, [r4, #8]
    5998:	4620      	mov	r0, r4
    599a:	f022 fb1b 	bl	27fd4 <nvs_flash_al_wrt.part.3>
    599e:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    59a0:	4629      	mov	r1, r5
    59a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    59a4:	f022 fa8a 	bl	27ebc <nvs_al_size.isra.0>
    59a8:	68a3      	ldr	r3, [r4, #8]
    59aa:	4418      	add	r0, r3
    59ac:	60a0      	str	r0, [r4, #8]
		if (rc) {
    59ae:	b992      	cbnz	r2, 59d6 <nvs_gc+0x16a>
		len -= bytes_to_copy;
    59b0:	eba8 0805 	sub.w	r8, r8, r5
		addr += bytes_to_copy;
    59b4:	442f      	add	r7, r5
    59b6:	e7cc      	b.n	5952 <nvs_gc+0xe6>
	stop_addr = gc_addr - ate_size;
    59b8:	9b02      	ldr	r3, [sp, #8]
	if (!nvs_ate_crc8_check(&close_ate)) {
    59ba:	4628      	mov	r0, r5
	stop_addr = gc_addr - ate_size;
    59bc:	eba3 0909 	sub.w	r9, r3, r9
	if (!nvs_ate_crc8_check(&close_ate)) {
    59c0:	f022 fa67 	bl	27e92 <nvs_ate_crc8_check>
    59c4:	2800      	cmp	r0, #0
    59c6:	d080      	beq.n	58ca <nvs_gc+0x5e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    59c8:	a902      	add	r1, sp, #8
    59ca:	4620      	mov	r0, r4
    59cc:	f7ff ff20 	bl	5810 <nvs_recover_last_ate>
		if (rc) {
    59d0:	4602      	mov	r2, r0
    59d2:	2800      	cmp	r0, #0
    59d4:	d080      	beq.n	58d8 <nvs_gc+0x6c>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    59d6:	4610      	mov	r0, r2
    59d8:	b013      	add	sp, #76	; 0x4c
    59da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59de:	bf00      	nop
    59e0:	ffff0000 	.word	0xffff0000

000059e4 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    59e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59e8:	4604      	mov	r4, r0
    59ea:	b086      	sub	sp, #24
    59ec:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    59ee:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    59f2:	4630      	mov	r0, r6
    59f4:	f028 faac 	bl	2df50 <z_impl_k_mutex_init>
    59f8:	4628      	mov	r0, r5
    59fa:	f01d fc9b 	bl	23334 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    59fe:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    5a00:	b948      	cbnz	r0, 5a16 <nvs_init+0x32>
		LOG_ERR("No valid flash device found");
    5a02:	2145      	movs	r1, #69	; 0x45
    5a04:	4888      	ldr	r0, [pc, #544]	; (5c28 <nvs_init+0x244>)
    5a06:	f021 ff64 	bl	278d2 <printk>
		return -ENXIO;
    5a0a:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    5a0e:	4628      	mov	r0, r5
    5a10:	b006      	add	sp, #24
    5a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    5a16:	6883      	ldr	r3, [r0, #8]
    5a18:	691b      	ldr	r3, [r3, #16]
    5a1a:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    5a1c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    5a1e:	b930      	cbnz	r0, 5a2e <nvs_init+0x4a>
		LOG_ERR("Could not obtain flash parameters");
    5a20:	4882      	ldr	r0, [pc, #520]	; (5c2c <nvs_init+0x248>)
    5a22:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Configuration error - sector count");
    5a24:	f021 ff55 	bl	278d2 <printk>
		return -EINVAL;
    5a28:	f06f 0515 	mvn.w	r5, #21
    5a2c:	e7ef      	b.n	5a0e <nvs_init+0x2a>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    5a2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    5a30:	6883      	ldr	r3, [r0, #8]
    5a32:	691b      	ldr	r3, [r3, #16]
    5a34:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    5a36:	6803      	ldr	r3, [r0, #0]
    5a38:	3b01      	subs	r3, #1
    5a3a:	2b1f      	cmp	r3, #31
    5a3c:	d902      	bls.n	5a44 <nvs_init+0x60>
		LOG_ERR("Unsupported write block size");
    5a3e:	2145      	movs	r1, #69	; 0x45
    5a40:	487b      	ldr	r0, [pc, #492]	; (5c30 <nvs_init+0x24c>)
    5a42:	e7ef      	b.n	5a24 <nvs_init+0x40>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    5a44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5a46:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    5a48:	aa03      	add	r2, sp, #12
    5a4a:	f027 ff2d 	bl	2d8a8 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    5a4e:	b110      	cbz	r0, 5a56 <nvs_init+0x72>
		LOG_ERR("Unable to get page info");
    5a50:	2145      	movs	r1, #69	; 0x45
    5a52:	4878      	ldr	r0, [pc, #480]	; (5c34 <nvs_init+0x250>)
    5a54:	e7e6      	b.n	5a24 <nvs_init+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    5a56:	89a3      	ldrh	r3, [r4, #12]
    5a58:	b12b      	cbz	r3, 5a66 <nvs_init+0x82>
    5a5a:	9a04      	ldr	r2, [sp, #16]
    5a5c:	fbb3 f5f2 	udiv	r5, r3, r2
    5a60:	fb02 3515 	mls	r5, r2, r5, r3
    5a64:	b115      	cbz	r5, 5a6c <nvs_init+0x88>
		LOG_ERR("Invalid sector size");
    5a66:	2145      	movs	r1, #69	; 0x45
    5a68:	4873      	ldr	r0, [pc, #460]	; (5c38 <nvs_init+0x254>)
    5a6a:	e7db      	b.n	5a24 <nvs_init+0x40>
	if (fs->sector_count < 2) {
    5a6c:	89e3      	ldrh	r3, [r4, #14]
    5a6e:	2b01      	cmp	r3, #1
    5a70:	d802      	bhi.n	5a78 <nvs_init+0x94>
		LOG_ERR("Configuration error - sector count");
    5a72:	2145      	movs	r1, #69	; 0x45
    5a74:	4871      	ldr	r0, [pc, #452]	; (5c3c <nvs_init+0x258>)
    5a76:	e7d5      	b.n	5a24 <nvs_init+0x40>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    5a78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    5a7a:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    5a7c:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    5a80:	f04f 32ff 	mov.w	r2, #4294967295
    5a84:	f04f 33ff 	mov.w	r3, #4294967295
    5a88:	4630      	mov	r0, r6
    5a8a:	f01d ff7f 	bl	2398c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5a8e:	2108      	movs	r1, #8
    5a90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5a92:	f022 fa13 	bl	27ebc <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    5a96:	462f      	mov	r7, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5a98:	4680      	mov	r8, r0
	for (i = 0; i < fs->sector_count; i++) {
    5a9a:	89e3      	ldrh	r3, [r4, #14]
    5a9c:	fa1f fa85 	uxth.w	sl, r5
    5aa0:	4553      	cmp	r3, sl
    5aa2:	d865      	bhi.n	5b70 <nvs_init+0x18c>
	if (closed_sectors == fs->sector_count) {
    5aa4:	89e3      	ldrh	r3, [r4, #14]
    5aa6:	42bb      	cmp	r3, r7
    5aa8:	f000 80a2 	beq.w	5bf0 <nvs_init+0x20c>
	if (i == fs->sector_count) {
    5aac:	4553      	cmp	r3, sl
    5aae:	d10c      	bne.n	5aca <nvs_init+0xe6>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    5ab0:	9900      	ldr	r1, [sp, #0]
    5ab2:	2308      	movs	r3, #8
    5ab4:	464a      	mov	r2, r9
    5ab6:	eba1 0108 	sub.w	r1, r1, r8
    5aba:	4620      	mov	r0, r4
    5abc:	f022 f9c4 	bl	27e48 <nvs_flash_cmp_const>
		if (!rc) {
    5ac0:	b918      	cbnz	r0, 5aca <nvs_init+0xe6>
			nvs_sector_advance(fs, &addr);
    5ac2:	4669      	mov	r1, sp
    5ac4:	89e0      	ldrh	r0, [r4, #14]
    5ac6:	f022 fa03 	bl	27ed0 <nvs_sector_advance.isra.1>
	fs->ate_wra = addr - ate_size;
    5aca:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    5acc:	4f5c      	ldr	r7, [pc, #368]	; (5c40 <nvs_init+0x25c>)
	fs->ate_wra = addr - ate_size;
    5ace:	eba3 0208 	sub.w	r2, r3, r8
	fs->data_wra = addr & ADDR_SECT_MASK;
    5ad2:	403b      	ands	r3, r7
	fs->ate_wra = addr - ate_size;
    5ad4:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    5ad6:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    5ad8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    5adc:	4299      	cmp	r1, r3
    5ade:	d30e      	bcc.n	5afe <nvs_init+0x11a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    5ae0:	2308      	movs	r3, #8
    5ae2:	aa01      	add	r2, sp, #4
    5ae4:	4620      	mov	r0, r4
    5ae6:	f022 f978 	bl	27dda <nvs_flash_rd>
		if (rc) {
    5aea:	4605      	mov	r5, r0
    5aec:	bb18      	cbnz	r0, 5b36 <nvs_init+0x152>
    5aee:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    5af0:	f813 2b01 	ldrb.w	r2, [r3], #1
    5af4:	4591      	cmp	r9, r2
    5af6:	d17e      	bne.n	5bf6 <nvs_init+0x212>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    5af8:	3501      	adds	r5, #1
    5afa:	2d08      	cmp	r5, #8
    5afc:	d1f8      	bne.n	5af0 <nvs_init+0x10c>
	while (fs->ate_wra > fs->data_wra) {
    5afe:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    5b02:	428b      	cmp	r3, r1
    5b04:	d907      	bls.n	5b16 <nvs_init+0x132>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    5b06:	1a5b      	subs	r3, r3, r1
    5b08:	464a      	mov	r2, r9
    5b0a:	4620      	mov	r0, r4
    5b0c:	f022 f99c 	bl	27e48 <nvs_flash_cmp_const>
		if (rc < 0) {
    5b10:	1e05      	subs	r5, r0, #0
    5b12:	db10      	blt.n	5b36 <nvs_init+0x152>
		if (!rc) {
    5b14:	d150      	bne.n	5bb8 <nvs_init+0x1d4>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    5b16:	6863      	ldr	r3, [r4, #4]
    5b18:	4f49      	ldr	r7, [pc, #292]	; (5c40 <nvs_init+0x25c>)
	nvs_sector_advance(fs, &addr);
    5b1a:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    5b1c:	403b      	ands	r3, r7
	nvs_sector_advance(fs, &addr);
    5b1e:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    5b20:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    5b22:	f022 f9d5 	bl	27ed0 <nvs_sector_advance.isra.1>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    5b26:	89a3      	ldrh	r3, [r4, #12]
    5b28:	9900      	ldr	r1, [sp, #0]
    5b2a:	464a      	mov	r2, r9
    5b2c:	4620      	mov	r0, r4
    5b2e:	f022 f98b 	bl	27e48 <nvs_flash_cmp_const>
	if (rc < 0) {
    5b32:	1e05      	subs	r5, r0, #0
    5b34:	da46      	bge.n	5bc4 <nvs_init+0x1e0>
	return z_impl_k_mutex_unlock(mutex);
    5b36:	4630      	mov	r0, r6
    5b38:	f01d fffc 	bl	23b34 <z_impl_k_mutex_unlock>
	if (rc) {
    5b3c:	2d00      	cmp	r5, #0
    5b3e:	f47f af66 	bne.w	5a0e <nvs_init+0x2a>
	fs->ready = true;
    5b42:	2301      	movs	r3, #1
    5b44:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    5b46:	89e2      	ldrh	r2, [r4, #14]
    5b48:	89a3      	ldrh	r3, [r4, #12]
    5b4a:	483e      	ldr	r0, [pc, #248]	; (5c44 <nvs_init+0x260>)
    5b4c:	2149      	movs	r1, #73	; 0x49
    5b4e:	f021 fec0 	bl	278d2 <printk>
	LOG_INF("alloc wra: %d, %x",
    5b52:	6862      	ldr	r2, [r4, #4]
    5b54:	483c      	ldr	r0, [pc, #240]	; (5c48 <nvs_init+0x264>)
    5b56:	b293      	uxth	r3, r2
    5b58:	2149      	movs	r1, #73	; 0x49
    5b5a:	0c12      	lsrs	r2, r2, #16
    5b5c:	f021 feb9 	bl	278d2 <printk>
	LOG_INF("data wra: %d, %x",
    5b60:	68a2      	ldr	r2, [r4, #8]
    5b62:	483a      	ldr	r0, [pc, #232]	; (5c4c <nvs_init+0x268>)
    5b64:	b293      	uxth	r3, r2
    5b66:	2149      	movs	r1, #73	; 0x49
    5b68:	0c12      	lsrs	r2, r2, #16
    5b6a:	f021 feb2 	bl	278d2 <printk>
	return 0;
    5b6e:	e74e      	b.n	5a0e <nvs_init+0x2a>
		       (uint16_t)(fs->sector_size - ate_size);
    5b70:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    5b72:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    5b74:	eba1 0108 	sub.w	r1, r1, r8
		addr = (i << ADDR_SECT_SHIFT) +
    5b78:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    5b7c:	464a      	mov	r2, r9
    5b7e:	2308      	movs	r3, #8
    5b80:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    5b82:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    5b84:	f022 f960 	bl	27e48 <nvs_flash_cmp_const>
		if (rc) {
    5b88:	b170      	cbz	r0, 5ba8 <nvs_init+0x1c4>
			nvs_sector_advance(fs, &addr);
    5b8a:	4669      	mov	r1, sp
    5b8c:	89e0      	ldrh	r0, [r4, #14]
    5b8e:	f022 f99f 	bl	27ed0 <nvs_sector_advance.isra.1>
			closed_sectors++;
    5b92:	3701      	adds	r7, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    5b94:	2308      	movs	r3, #8
    5b96:	464a      	mov	r2, r9
    5b98:	9900      	ldr	r1, [sp, #0]
    5b9a:	4620      	mov	r0, r4
			closed_sectors++;
    5b9c:	b2bf      	uxth	r7, r7
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    5b9e:	f022 f953 	bl	27e48 <nvs_flash_cmp_const>
			if (!rc) {
    5ba2:	2800      	cmp	r0, #0
    5ba4:	f43f af7e 	beq.w	5aa4 <nvs_init+0xc0>
    5ba8:	3501      	adds	r5, #1
    5baa:	e776      	b.n	5a9a <nvs_init+0xb6>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    5bac:	f1ba 0f00 	cmp.w	sl, #0
    5bb0:	d036      	beq.n	5c20 <nvs_init+0x23c>
				rc = -ESPIPE;
    5bb2:	f06f 051c 	mvn.w	r5, #28
    5bb6:	e7be      	b.n	5b36 <nvs_init+0x152>
		fs->data_wra += fs->flash_parameters->write_block_size;
    5bb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5bba:	68a3      	ldr	r3, [r4, #8]
    5bbc:	6812      	ldr	r2, [r2, #0]
    5bbe:	4413      	add	r3, r2
    5bc0:	60a3      	str	r3, [r4, #8]
    5bc2:	e79c      	b.n	5afe <nvs_init+0x11a>
	if (rc) {
    5bc4:	d0b7      	beq.n	5b36 <nvs_init+0x152>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    5bc6:	6861      	ldr	r1, [r4, #4]
    5bc8:	4620      	mov	r0, r4
    5bca:	f022 f98b 	bl	27ee4 <nvs_flash_erase_sector>
		if (rc) {
    5bce:	4605      	mov	r5, r0
    5bd0:	2800      	cmp	r0, #0
    5bd2:	d1b0      	bne.n	5b36 <nvs_init+0x152>
		fs->ate_wra &= ADDR_SECT_MASK;
    5bd4:	6860      	ldr	r0, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    5bd6:	89a3      	ldrh	r3, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    5bd8:	4038      	ands	r0, r7
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    5bda:	4418      	add	r0, r3
    5bdc:	eba0 0048 	sub.w	r0, r0, r8, lsl #1
    5be0:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    5be2:	4038      	ands	r0, r7
    5be4:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    5be6:	4620      	mov	r0, r4
    5be8:	f7ff fe40 	bl	586c <nvs_gc>
    5bec:	4605      	mov	r5, r0
		if (rc) {
    5bee:	e7a2      	b.n	5b36 <nvs_init+0x152>
		rc = -EDEADLK;
    5bf0:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    5bf4:	e79f      	b.n	5b36 <nvs_init+0x152>
		if (!nvs_ate_crc8_check(&last_ate)) {
    5bf6:	a801      	add	r0, sp, #4
    5bf8:	f022 f94b 	bl	27e92 <nvs_ate_crc8_check>
    5bfc:	6865      	ldr	r5, [r4, #4]
    5bfe:	b978      	cbnz	r0, 5c20 <nvs_init+0x23c>
			fs->data_wra = addr & ADDR_SECT_MASK;
    5c00:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += last_ate.offset;
    5c02:	f8bd 0006 	ldrh.w	r0, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    5c06:	f8bd a008 	ldrh.w	sl, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    5c0a:	403a      	ands	r2, r7
			fs->data_wra += last_ate.offset;
    5c0c:	4402      	add	r2, r0
    5c0e:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    5c10:	4651      	mov	r1, sl
    5c12:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5c14:	f022 f952 	bl	27ebc <nvs_al_size.isra.0>
    5c18:	4410      	add	r0, r2
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    5c1a:	42a8      	cmp	r0, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    5c1c:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    5c1e:	d0c5      	beq.n	5bac <nvs_init+0x1c8>
		fs->ate_wra -= ate_size;
    5c20:	eba5 0508 	sub.w	r5, r5, r8
    5c24:	6065      	str	r5, [r4, #4]
    5c26:	e757      	b.n	5ad8 <nvs_init+0xf4>
    5c28:	00030802 	.word	0x00030802
    5c2c:	00030823 	.word	0x00030823
    5c30:	0003084a 	.word	0x0003084a
    5c34:	0003086c 	.word	0x0003086c
    5c38:	00030889 	.word	0x00030889
    5c3c:	000308a2 	.word	0x000308a2
    5c40:	ffff0000 	.word	0xffff0000
    5c44:	000308ca 	.word	0x000308ca
    5c48:	000308e6 	.word	0x000308e6
    5c4c:	000308fd 	.word	0x000308fd

00005c50 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    5c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c54:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    5c56:	7c03      	ldrb	r3, [r0, #16]
{
    5c58:	b089      	sub	sp, #36	; 0x24
    5c5a:	4604      	mov	r4, r0
    5c5c:	4689      	mov	r9, r1
    5c5e:	4690      	mov	r8, r2
	if (!fs->ready) {
    5c60:	b94b      	cbnz	r3, 5c76 <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
    5c62:	2145      	movs	r1, #69	; 0x45
    5c64:	4865      	ldr	r0, [pc, #404]	; (5dfc <nvs_write+0x1ac>)
    5c66:	f021 fe34 	bl	278d2 <printk>
		return -EACCES;
    5c6a:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    5c6e:	4628      	mov	r0, r5
    5c70:	b009      	add	sp, #36	; 0x24
    5c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5c76:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    5c78:	2108      	movs	r1, #8
    5c7a:	4610      	mov	r0, r2
    5c7c:	f022 f91e 	bl	27ebc <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    5c80:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5c82:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    5c84:	4610      	mov	r0, r2
    5c86:	f022 f919 	bl	27ebc <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    5c8a:	89a3      	ldrh	r3, [r4, #12]
    5c8c:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    5c90:	1a9b      	subs	r3, r3, r2
    5c92:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    5c94:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    5c96:	f0c0 80ab 	bcc.w	5df0 <nvs_write+0x1a0>
    5c9a:	b11e      	cbz	r6, 5ca4 <nvs_write+0x54>
	    ((len > 0) && (data == NULL))) {
    5c9c:	f1b8 0f00 	cmp.w	r8, #0
    5ca0:	f000 80a6 	beq.w	5df0 <nvs_write+0x1a0>
	wlk_addr = fs->ate_wra;
    5ca4:	6863      	ldr	r3, [r4, #4]
    5ca6:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5ca8:	aa04      	add	r2, sp, #16
    5caa:	a903      	add	r1, sp, #12
    5cac:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    5cae:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5cb2:	f022 f93f 	bl	27f34 <nvs_prev_ate>
		if (rc) {
    5cb6:	4605      	mov	r5, r0
    5cb8:	2800      	cmp	r0, #0
    5cba:	d1d8      	bne.n	5c6e <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    5cbc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    5cc0:	454b      	cmp	r3, r9
    5cc2:	d005      	beq.n	5cd0 <nvs_write+0x80>
		if (wlk_addr == fs->ate_wra) {
    5cc4:	6862      	ldr	r2, [r4, #4]
    5cc6:	9b03      	ldr	r3, [sp, #12]
    5cc8:	429a      	cmp	r2, r3
    5cca:	d1ed      	bne.n	5ca8 <nvs_write+0x58>
		if (len == 0) {
    5ccc:	b9de      	cbnz	r6, 5d06 <nvs_write+0xb6>
    5cce:	e7ce      	b.n	5c6e <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    5cd0:	a804      	add	r0, sp, #16
    5cd2:	f022 f8de 	bl	27e92 <nvs_ate_crc8_check>
    5cd6:	2800      	cmp	r0, #0
    5cd8:	d1f4      	bne.n	5cc4 <nvs_write+0x74>
		if (len == 0) {
    5cda:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5cde:	b186      	cbz	r6, 5d02 <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
    5ce0:	42b3      	cmp	r3, r6
    5ce2:	d110      	bne.n	5d06 <nvs_write+0xb6>
		rd_addr += wlk_ate.offset;
    5ce4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    5ce8:	ea4f 411b 	mov.w	r1, fp, lsr #16
    5cec:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    5cee:	4401      	add	r1, r0
    5cf0:	4633      	mov	r3, r6
    5cf2:	4642      	mov	r2, r8
    5cf4:	4620      	mov	r0, r4
    5cf6:	f022 f87e 	bl	27df6 <nvs_flash_block_cmp>
			if (rc <= 0) {
    5cfa:	2800      	cmp	r0, #0
    5cfc:	dc03      	bgt.n	5d06 <nvs_write+0xb6>
    5cfe:	4605      	mov	r5, r0
    5d00:	e7b5      	b.n	5c6e <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
    5d02:	2b00      	cmp	r3, #0
    5d04:	d0b3      	beq.n	5c6e <nvs_write+0x1e>
	if (data_size) {
    5d06:	2f00      	cmp	r7, #0
    5d08:	d13f      	bne.n	5d8a <nvs_write+0x13a>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    5d0a:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    5d0e:	f04f 33ff 	mov.w	r3, #4294967295
    5d12:	f04f 32ff 	mov.w	r2, #4294967295
    5d16:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
    5d18:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 5e00 <nvs_write+0x1b0>
    5d1c:	f01d fe36 	bl	2398c <z_impl_k_mutex_lock>
	gc_count = 0;
    5d20:	2300      	movs	r3, #0
		if (gc_count == fs->sector_count) {
    5d22:	89e2      	ldrh	r2, [r4, #14]
    5d24:	4293      	cmp	r3, r2
    5d26:	d060      	beq.n	5dea <nvs_write+0x19a>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    5d28:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    5d2c:	1878      	adds	r0, r7, r1
    5d2e:	4282      	cmp	r2, r0
    5d30:	d32e      	bcc.n	5d90 <nvs_write+0x140>
	entry.part = 0xff;
    5d32:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    5d34:	a806      	add	r0, sp, #24
	entry.id = id;
    5d36:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    5d3a:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
    5d3e:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
    5d42:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
    5d46:	f022 f8b0 	bl	27eaa <nvs_ate_crc8_update>
	if (!len) {
    5d4a:	b136      	cbz	r6, 5d5a <nvs_write+0x10a>
    5d4c:	4633      	mov	r3, r6
    5d4e:	4642      	mov	r2, r8
    5d50:	68a1      	ldr	r1, [r4, #8]
    5d52:	4620      	mov	r0, r4
    5d54:	f022 f93e 	bl	27fd4 <nvs_flash_al_wrt.part.3>
    5d58:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
    5d5a:	4631      	mov	r1, r6
    5d5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5d5e:	f022 f8ad 	bl	27ebc <nvs_al_size.isra.0>
    5d62:	68a3      	ldr	r3, [r4, #8]
    5d64:	4418      	add	r0, r3
    5d66:	60a0      	str	r0, [r4, #8]
	if (rc) {
    5d68:	2d00      	cmp	r5, #0
    5d6a:	d144      	bne.n	5df6 <nvs_write+0x1a6>
	rc = nvs_flash_ate_wrt(fs, &entry);
    5d6c:	a906      	add	r1, sp, #24
    5d6e:	4620      	mov	r0, r4
    5d70:	f022 f979 	bl	28066 <nvs_flash_ate_wrt>
	if (rc) {
    5d74:	4605      	mov	r5, r0
    5d76:	2800      	cmp	r0, #0
    5d78:	d13d      	bne.n	5df6 <nvs_write+0x1a6>
	rc = len;
    5d7a:	4632      	mov	r2, r6
    5d7c:	9201      	str	r2, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    5d7e:	4650      	mov	r0, sl
    5d80:	f01d fed8 	bl	23b34 <z_impl_k_mutex_unlock>
	return rc;
    5d84:	9a01      	ldr	r2, [sp, #4]
    5d86:	4615      	mov	r5, r2
    5d88:	e771      	b.n	5c6e <nvs_write+0x1e>
		required_space = data_size + ate_size;
    5d8a:	4457      	add	r7, sl
    5d8c:	b2bf      	uxth	r7, r7
    5d8e:	e7bc      	b.n	5d0a <nvs_write+0xba>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5d90:	2108      	movs	r1, #8
    5d92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5d94:	9301      	str	r3, [sp, #4]
    5d96:	f022 f891 	bl	27ebc <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    5d9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5d9e:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
    5da2:	2100      	movs	r1, #0
    5da4:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    5da8:	1811      	adds	r1, r2, r0
    5daa:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    5dae:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    5db0:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    5db4:	440a      	add	r2, r1
    5db6:	1a12      	subs	r2, r2, r0
    5db8:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    5dba:	a806      	add	r0, sp, #24
    5dbc:	f022 f875 	bl	27eaa <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    5dc0:	a906      	add	r1, sp, #24
    5dc2:	4620      	mov	r0, r4
    5dc4:	f022 f94f 	bl	28066 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    5dc8:	1d21      	adds	r1, r4, #4
    5dca:	89e0      	ldrh	r0, [r4, #14]
    5dcc:	f022 f880 	bl	27ed0 <nvs_sector_advance.isra.1>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    5dd0:	6862      	ldr	r2, [r4, #4]
    5dd2:	ea02 020b 	and.w	r2, r2, fp
    5dd6:	60a2      	str	r2, [r4, #8]
		rc = nvs_gc(fs);
    5dd8:	4620      	mov	r0, r4
    5dda:	f7ff fd47 	bl	586c <nvs_gc>
		if (rc) {
    5dde:	4602      	mov	r2, r0
    5de0:	2800      	cmp	r0, #0
    5de2:	d1cb      	bne.n	5d7c <nvs_write+0x12c>
		gc_count++;
    5de4:	9b01      	ldr	r3, [sp, #4]
    5de6:	3301      	adds	r3, #1
		if (gc_count == fs->sector_count) {
    5de8:	e79b      	b.n	5d22 <nvs_write+0xd2>
			rc = -ENOSPC;
    5dea:	f06f 021b 	mvn.w	r2, #27
    5dee:	e7c5      	b.n	5d7c <nvs_write+0x12c>
		return -EINVAL;
    5df0:	f06f 0515 	mvn.w	r5, #21
    5df4:	e73b      	b.n	5c6e <nvs_write+0x1e>
			if (rc) {
    5df6:	462a      	mov	r2, r5
    5df8:	e7c0      	b.n	5d7c <nvs_write+0x12c>
    5dfa:	bf00      	nop
    5dfc:	000307e9 	.word	0x000307e9
    5e00:	ffff0000 	.word	0xffff0000

00005e04 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    5e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5e08:	461f      	mov	r7, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    5e0a:	7c03      	ldrb	r3, [r0, #16]
{
    5e0c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
    5e10:	4604      	mov	r4, r0
    5e12:	468a      	mov	sl, r1
    5e14:	4691      	mov	r9, r2
	if (!fs->ready) {
    5e16:	b943      	cbnz	r3, 5e2a <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
    5e18:	4826      	ldr	r0, [pc, #152]	; (5eb4 <nvs_read_hist+0xb0>)
    5e1a:	2145      	movs	r1, #69	; 0x45
    5e1c:	f021 fd59 	bl	278d2 <printk>
		return -EACCES;
    5e20:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    5e24:	b004      	add	sp, #16
    5e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5e2a:	2108      	movs	r1, #8
    5e2c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    5e2e:	f022 f845 	bl	27ebc <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    5e32:	89a3      	ldrh	r3, [r4, #12]
    5e34:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
    5e38:	42b8      	cmp	r0, r7
    5e3a:	d338      	bcc.n	5eae <nvs_read_hist+0xaa>
	wlk_addr = fs->ate_wra;
    5e3c:	6863      	ldr	r3, [r4, #4]
    5e3e:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    5e40:	2500      	movs	r5, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5e42:	aa02      	add	r2, sp, #8
    5e44:	a901      	add	r1, sp, #4
    5e46:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    5e48:	9e01      	ldr	r6, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5e4a:	f022 f873 	bl	27f34 <nvs_prev_ate>
		if (rc) {
    5e4e:	2800      	cmp	r0, #0
    5e50:	d1e8      	bne.n	5e24 <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    5e52:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5e56:	4553      	cmp	r3, sl
    5e58:	d105      	bne.n	5e66 <nvs_read_hist+0x62>
    5e5a:	a802      	add	r0, sp, #8
    5e5c:	f022 f819 	bl	27e92 <nvs_ate_crc8_check>
    5e60:	b908      	cbnz	r0, 5e66 <nvs_read_hist+0x62>
			cnt_his++;
    5e62:	3501      	adds	r5, #1
    5e64:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    5e66:	6862      	ldr	r2, [r4, #4]
    5e68:	9b01      	ldr	r3, [sp, #4]
    5e6a:	429a      	cmp	r2, r3
    5e6c:	d018      	beq.n	5ea0 <nvs_read_hist+0x9c>
	while (cnt_his <= cnt) {
    5e6e:	4545      	cmp	r5, r8
    5e70:	d9e7      	bls.n	5e42 <nvs_read_hist+0x3e>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    5e72:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    5e76:	b1bb      	cbz	r3, 5ea8 <nvs_read_hist+0xa4>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    5e78:	4545      	cmp	r5, r8
    5e7a:	d315      	bcc.n	5ea8 <nvs_read_hist+0xa4>
	rd_addr += wlk_ate.offset;
    5e7c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    5e80:	0c31      	lsrs	r1, r6, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    5e82:	42bb      	cmp	r3, r7
	rd_addr &= ADDR_SECT_MASK;
    5e84:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    5e88:	bf28      	it	cs
    5e8a:	463b      	movcs	r3, r7
    5e8c:	4401      	add	r1, r0
    5e8e:	464a      	mov	r2, r9
    5e90:	4620      	mov	r0, r4
    5e92:	f021 ffa2 	bl	27dda <nvs_flash_rd>
	if (rc) {
    5e96:	2800      	cmp	r0, #0
    5e98:	d1c4      	bne.n	5e24 <nvs_read_hist+0x20>
	return wlk_ate.len;
    5e9a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    5e9e:	e7c1      	b.n	5e24 <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    5ea0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5ea4:	4553      	cmp	r3, sl
    5ea6:	d0e4      	beq.n	5e72 <nvs_read_hist+0x6e>
		return -ENOENT;
    5ea8:	f06f 0001 	mvn.w	r0, #1
    5eac:	e7ba      	b.n	5e24 <nvs_read_hist+0x20>
		return -EINVAL;
    5eae:	f06f 0015 	mvn.w	r0, #21
    5eb2:	e7b7      	b.n	5e24 <nvs_read_hist+0x20>
    5eb4:	000307e9 	.word	0x000307e9

00005eb8 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    5eb8:	4b08      	ldr	r3, [pc, #32]	; (5edc <get_flash_area_from_id+0x24>)
{
    5eba:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    5ebc:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    5ebe:	4b08      	ldr	r3, [pc, #32]	; (5ee0 <get_flash_area_from_id+0x28>)
    5ec0:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    5ec2:	2300      	movs	r3, #0
    5ec4:	429d      	cmp	r5, r3
    5ec6:	dc02      	bgt.n	5ece <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    5ec8:	2200      	movs	r2, #0
}
    5eca:	4610      	mov	r0, r2
    5ecc:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    5ece:	011c      	lsls	r4, r3, #4
    5ed0:	190a      	adds	r2, r1, r4
    5ed2:	5d0c      	ldrb	r4, [r1, r4]
    5ed4:	4284      	cmp	r4, r0
    5ed6:	d0f8      	beq.n	5eca <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
    5ed8:	3301      	adds	r3, #1
    5eda:	e7f3      	b.n	5ec4 <get_flash_area_from_id+0xc>
    5edc:	0002f560 	.word	0x0002f560
    5ee0:	200011f8 	.word	0x200011f8

00005ee4 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    5ee4:	4b08      	ldr	r3, [pc, #32]	; (5f08 <flash_area_open+0x24>)
    5ee6:	681b      	ldr	r3, [r3, #0]
{
    5ee8:	b510      	push	{r4, lr}
    5eea:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    5eec:	b12b      	cbz	r3, 5efa <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    5eee:	f7ff ffe3 	bl	5eb8 <get_flash_area_from_id>
	if (area == NULL) {
    5ef2:	b128      	cbz	r0, 5f00 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    5ef4:	6020      	str	r0, [r4, #0]
	return 0;
    5ef6:	2000      	movs	r0, #0
}
    5ef8:	bd10      	pop	{r4, pc}
		return -EACCES;
    5efa:	f06f 000c 	mvn.w	r0, #12
    5efe:	e7fb      	b.n	5ef8 <flash_area_open+0x14>
		return -ENOENT;
    5f00:	f06f 0001 	mvn.w	r0, #1
    5f04:	e7f8      	b.n	5ef8 <flash_area_open+0x14>
    5f06:	bf00      	nop
    5f08:	200011f8 	.word	0x200011f8

00005f0c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    5f0c:	b530      	push	{r4, r5, lr}
    5f0e:	b089      	sub	sp, #36	; 0x24
    5f10:	460c      	mov	r4, r1
    5f12:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    5f14:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    5f16:	f7ff ffcf 	bl	5eb8 <get_flash_area_from_id>
	if (fa == NULL) {
    5f1a:	b1b8      	cbz	r0, 5f4c <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    5f1c:	6843      	ldr	r3, [r0, #4]
    5f1e:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    5f20:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    5f22:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    5f24:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    5f26:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    5f2a:	2300      	movs	r3, #0
    5f2c:	9305      	str	r3, [sp, #20]
	cb_data->status = 0;
    5f2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
    5f32:	f022 f8b4 	bl	2809e <device_get_binding>
	if (flash_dev == NULL) {
    5f36:	b160      	cbz	r0, 5f52 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    5f38:	aa01      	add	r2, sp, #4
    5f3a:	4907      	ldr	r1, [pc, #28]	; (5f58 <flash_area_get_sectors+0x4c>)
    5f3c:	f027 fcb8 	bl	2d8b0 <flash_page_foreach>
	if (cb_data->status == 0) {
    5f40:	9807      	ldr	r0, [sp, #28]
    5f42:	b908      	cbnz	r0, 5f48 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    5f44:	9b05      	ldr	r3, [sp, #20]
    5f46:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    5f48:	b009      	add	sp, #36	; 0x24
    5f4a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    5f4c:	f06f 0015 	mvn.w	r0, #21
    5f50:	e7fa      	b.n	5f48 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    5f52:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    5f56:	e7f7      	b.n	5f48 <flash_area_get_sectors+0x3c>
    5f58:	000280a3 	.word	0x000280a3

00005f5c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    5f5c:	4b0f      	ldr	r3, [pc, #60]	; (5f9c <settings_save_one+0x40>)
{
    5f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    5f62:	681c      	ldr	r4, [r3, #0]
{
    5f64:	4606      	mov	r6, r0
    5f66:	460f      	mov	r7, r1
    5f68:	4690      	mov	r8, r2
	if (!cs) {
    5f6a:	b1a4      	cbz	r4, 5f96 <settings_save_one+0x3a>
	return z_impl_k_mutex_lock(mutex, timeout);
    5f6c:	f04f 32ff 	mov.w	r2, #4294967295
    5f70:	f04f 33ff 	mov.w	r3, #4294967295
    5f74:	480a      	ldr	r0, [pc, #40]	; (5fa0 <settings_save_one+0x44>)
    5f76:	f01d fd09 	bl	2398c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    5f7a:	6863      	ldr	r3, [r4, #4]
    5f7c:	463a      	mov	r2, r7
    5f7e:	689d      	ldr	r5, [r3, #8]
    5f80:	4631      	mov	r1, r6
    5f82:	4643      	mov	r3, r8
    5f84:	4620      	mov	r0, r4
    5f86:	47a8      	blx	r5
    5f88:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    5f8a:	4805      	ldr	r0, [pc, #20]	; (5fa0 <settings_save_one+0x44>)
    5f8c:	f01d fdd2 	bl	23b34 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    5f90:	4620      	mov	r0, r4
    5f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    5f96:	f06f 0401 	mvn.w	r4, #1
    5f9a:	e7f9      	b.n	5f90 <settings_save_one+0x34>
    5f9c:	20003408 	.word	0x20003408
    5fa0:	20001e50 	.word	0x20001e50

00005fa4 <settings_src_register>:
	parent->next = child;
    5fa4:	2300      	movs	r3, #0
    5fa6:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    5fa8:	4b04      	ldr	r3, [pc, #16]	; (5fbc <settings_src_register+0x18>)
    5faa:	685a      	ldr	r2, [r3, #4]
    5fac:	b912      	cbnz	r2, 5fb4 <settings_src_register+0x10>
	list->head = node;
    5fae:	e9c3 0000 	strd	r0, r0, [r3]
    5fb2:	4770      	bx	lr
	parent->next = child;
    5fb4:	6010      	str	r0, [r2, #0]
	list->tail = node;
    5fb6:	6058      	str	r0, [r3, #4]
}
    5fb8:	4770      	bx	lr
    5fba:	bf00      	nop
    5fbc:	20003400 	.word	0x20003400

00005fc0 <settings_dst_register>:
	settings_save_dst = cs;
    5fc0:	4b01      	ldr	r3, [pc, #4]	; (5fc8 <settings_dst_register+0x8>)
    5fc2:	6018      	str	r0, [r3, #0]
}
    5fc4:	4770      	bx	lr
    5fc6:	bf00      	nop
    5fc8:	20003408 	.word	0x20003408

00005fcc <settings_load_subtree>:
{
    5fcc:	b530      	push	{r4, r5, lr}
    5fce:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    5fd0:	2300      	movs	r3, #0
{
    5fd2:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    5fd4:	e9cd 3302 	strd	r3, r3, [sp, #8]
    5fd8:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    5fda:	f04f 33ff 	mov.w	r3, #4294967295
    5fde:	f04f 32ff 	mov.w	r2, #4294967295
    5fe2:	480b      	ldr	r0, [pc, #44]	; (6010 <settings_load_subtree+0x44>)
    5fe4:	f01d fcd2 	bl	2398c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    5fe8:	4b0a      	ldr	r3, [pc, #40]	; (6014 <settings_load_subtree+0x48>)
    5fea:	681c      	ldr	r4, [r3, #0]
    5fec:	b134      	cbz	r4, 5ffc <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    5fee:	6863      	ldr	r3, [r4, #4]
    5ff0:	4620      	mov	r0, r4
    5ff2:	681b      	ldr	r3, [r3, #0]
    5ff4:	a901      	add	r1, sp, #4
    5ff6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5ff8:	6824      	ldr	r4, [r4, #0]
	return node->next;
    5ffa:	e7f7      	b.n	5fec <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    5ffc:	4628      	mov	r0, r5
    5ffe:	f000 f8cb 	bl	6198 <settings_commit_subtree>
    6002:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    6004:	4802      	ldr	r0, [pc, #8]	; (6010 <settings_load_subtree+0x44>)
    6006:	f01d fd95 	bl	23b34 <z_impl_k_mutex_unlock>
}
    600a:	4620      	mov	r0, r4
    600c:	b005      	add	sp, #20
    600e:	bd30      	pop	{r4, r5, pc}
    6010:	20001e50 	.word	0x20001e50
    6014:	20003400 	.word	0x20003400

00006018 <settings_load_subtree_direct>:
{
    6018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    601a:	e9cd 0101 	strd	r0, r1, [sp, #4]
    601e:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    6020:	f04f 33ff 	mov.w	r3, #4294967295
    6024:	f04f 32ff 	mov.w	r2, #4294967295
    6028:	4809      	ldr	r0, [pc, #36]	; (6050 <settings_load_subtree_direct+0x38>)
    602a:	f01d fcaf 	bl	2398c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    602e:	4b09      	ldr	r3, [pc, #36]	; (6054 <settings_load_subtree_direct+0x3c>)
    6030:	681c      	ldr	r4, [r3, #0]
    6032:	b134      	cbz	r4, 6042 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    6034:	6863      	ldr	r3, [r4, #4]
    6036:	4620      	mov	r0, r4
    6038:	681b      	ldr	r3, [r3, #0]
    603a:	a901      	add	r1, sp, #4
    603c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    603e:	6824      	ldr	r4, [r4, #0]
	return node->next;
    6040:	e7f7      	b.n	6032 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    6042:	4803      	ldr	r0, [pc, #12]	; (6050 <settings_load_subtree_direct+0x38>)
    6044:	f01d fd76 	bl	23b34 <z_impl_k_mutex_unlock>
}
    6048:	2000      	movs	r0, #0
    604a:	b004      	add	sp, #16
    604c:	bd10      	pop	{r4, pc}
    604e:	bf00      	nop
    6050:	20001e50 	.word	0x20001e50
    6054:	20003400 	.word	0x20003400

00006058 <settings_store_init>:
	list->head = NULL;
    6058:	4b02      	ldr	r3, [pc, #8]	; (6064 <settings_store_init+0xc>)
    605a:	2200      	movs	r2, #0
	list->tail = NULL;
    605c:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    6060:	4770      	bx	lr
    6062:	bf00      	nop
    6064:	20003400 	.word	0x20003400

00006068 <settings_init>:
	list->head = NULL;
    6068:	4b02      	ldr	r3, [pc, #8]	; (6074 <settings_init+0xc>)
    606a:	2200      	movs	r2, #0
	list->tail = NULL;
    606c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    6070:	f7ff bff2 	b.w	6058 <settings_store_init>
    6074:	2000340c 	.word	0x2000340c

00006078 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    6078:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    607c:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    607e:	460e      	mov	r6, r1
    6080:	b109      	cbz	r1, 6086 <settings_parse_and_lookup+0xe>
		*next = NULL;
    6082:	2300      	movs	r3, #0
    6084:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    6086:	f8df 8098 	ldr.w	r8, [pc, #152]	; 6120 <settings_parse_and_lookup+0xa8>
    608a:	4c22      	ldr	r4, [pc, #136]	; (6114 <settings_parse_and_lookup+0x9c>)
    608c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 6124 <settings_parse_and_lookup+0xac>
    6090:	2500      	movs	r5, #0
    6092:	46c2      	mov	sl, r8
    6094:	4544      	cmp	r4, r8
    6096:	d908      	bls.n	60aa <settings_parse_and_lookup+0x32>
    6098:	4649      	mov	r1, r9
    609a:	481f      	ldr	r0, [pc, #124]	; (6118 <settings_parse_and_lookup+0xa0>)
    609c:	2294      	movs	r2, #148	; 0x94
    609e:	f021 fc18 	bl	278d2 <printk>
    60a2:	2194      	movs	r1, #148	; 0x94
    60a4:	4648      	mov	r0, r9
    60a6:	f021 fe8d 	bl	27dc4 <assert_post_action>
    60aa:	4554      	cmp	r4, sl
    60ac:	d308      	bcc.n	60c0 <settings_parse_and_lookup+0x48>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    60ae:	4b1b      	ldr	r3, [pc, #108]	; (611c <settings_parse_and_lookup+0xa4>)
    60b0:	681c      	ldr	r4, [r3, #0]
    60b2:	b10c      	cbz	r4, 60b8 <settings_parse_and_lookup+0x40>
    60b4:	3c14      	subs	r4, #20
    60b6:	b9c4      	cbnz	r4, 60ea <settings_parse_and_lookup+0x72>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    60b8:	4628      	mov	r0, r5
    60ba:	b002      	add	sp, #8
    60bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    60c0:	aa01      	add	r2, sp, #4
    60c2:	6821      	ldr	r1, [r4, #0]
    60c4:	4638      	mov	r0, r7
    60c6:	f022 f811 	bl	280ec <settings_name_steq>
    60ca:	b160      	cbz	r0, 60e6 <settings_parse_and_lookup+0x6e>
		if (!bestmatch) {
    60cc:	b925      	cbnz	r5, 60d8 <settings_parse_and_lookup+0x60>
			if (next) {
    60ce:	b10e      	cbz	r6, 60d4 <settings_parse_and_lookup+0x5c>
				*next = tmpnext;
    60d0:	9b01      	ldr	r3, [sp, #4]
    60d2:	6033      	str	r3, [r6, #0]
    60d4:	4625      	mov	r5, r4
    60d6:	e006      	b.n	60e6 <settings_parse_and_lookup+0x6e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    60d8:	2200      	movs	r2, #0
    60da:	6829      	ldr	r1, [r5, #0]
    60dc:	6820      	ldr	r0, [r4, #0]
    60de:	f022 f805 	bl	280ec <settings_name_steq>
    60e2:	2800      	cmp	r0, #0
    60e4:	d1f3      	bne.n	60ce <settings_parse_and_lookup+0x56>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    60e6:	3414      	adds	r4, #20
    60e8:	e7d4      	b.n	6094 <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    60ea:	aa01      	add	r2, sp, #4
    60ec:	6821      	ldr	r1, [r4, #0]
    60ee:	4638      	mov	r0, r7
    60f0:	f021 fffc 	bl	280ec <settings_name_steq>
    60f4:	b160      	cbz	r0, 6110 <settings_parse_and_lookup+0x98>
		if (!bestmatch) {
    60f6:	b925      	cbnz	r5, 6102 <settings_parse_and_lookup+0x8a>
			if (next) {
    60f8:	b10e      	cbz	r6, 60fe <settings_parse_and_lookup+0x86>
				*next = tmpnext;
    60fa:	9b01      	ldr	r3, [sp, #4]
    60fc:	6033      	str	r3, [r6, #0]
    60fe:	4625      	mov	r5, r4
    6100:	e006      	b.n	6110 <settings_parse_and_lookup+0x98>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    6102:	2200      	movs	r2, #0
    6104:	6829      	ldr	r1, [r5, #0]
    6106:	6820      	ldr	r0, [r4, #0]
    6108:	f021 fff0 	bl	280ec <settings_name_steq>
    610c:	2800      	cmp	r0, #0
    610e:	d1f3      	bne.n	60f8 <settings_parse_and_lookup+0x80>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6110:	6964      	ldr	r4, [r4, #20]
    6112:	e7ce      	b.n	60b2 <settings_parse_and_lookup+0x3a>
    6114:	0002eef0 	.word	0x0002eef0
    6118:	0003067f 	.word	0x0003067f
    611c:	2000340c 	.word	0x2000340c
    6120:	0002f044 	.word	0x0002f044
    6124:	00030957 	.word	0x00030957

00006128 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    6128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    612c:	b085      	sub	sp, #20
    612e:	4605      	mov	r5, r0
    6130:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
    6132:	9003      	str	r0, [sp, #12]
{
    6134:	460e      	mov	r6, r1
    6136:	4617      	mov	r7, r2
    6138:	4698      	mov	r8, r3

	if (load_arg && load_arg->subtree &&
    613a:	b1b4      	cbz	r4, 616a <settings_call_set_handler+0x42>
    613c:	6821      	ldr	r1, [r4, #0]
    613e:	b179      	cbz	r1, 6160 <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    6140:	aa03      	add	r2, sp, #12
    6142:	f021 ffd3 	bl	280ec <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    6146:	b958      	cbnz	r0, 6160 <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    6148:	2000      	movs	r0, #0
    614a:	e006      	b.n	615a <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    614c:	68a3      	ldr	r3, [r4, #8]
    614e:	9300      	str	r3, [sp, #0]
    6150:	463a      	mov	r2, r7
    6152:	4643      	mov	r3, r8
    6154:	4631      	mov	r1, r6
    6156:	9803      	ldr	r0, [sp, #12]
    6158:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    615a:	b005      	add	sp, #20
    615c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    6160:	f8d4 9004 	ldr.w	r9, [r4, #4]
    6164:	f1b9 0f00 	cmp.w	r9, #0
    6168:	d1f0      	bne.n	614c <settings_call_set_handler+0x24>
		ch = settings_parse_and_lookup(name, &name_key);
    616a:	a903      	add	r1, sp, #12
    616c:	4628      	mov	r0, r5
    616e:	f7ff ff83 	bl	6078 <settings_parse_and_lookup>
		if (!ch) {
    6172:	2800      	cmp	r0, #0
    6174:	d0e8      	beq.n	6148 <settings_call_set_handler+0x20>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    6176:	6884      	ldr	r4, [r0, #8]
    6178:	9803      	ldr	r0, [sp, #12]
    617a:	4643      	mov	r3, r8
    617c:	463a      	mov	r2, r7
    617e:	4631      	mov	r1, r6
    6180:	47a0      	blx	r4
		if (rc != 0) {
    6182:	4603      	mov	r3, r0
    6184:	2800      	cmp	r0, #0
    6186:	d0df      	beq.n	6148 <settings_call_set_handler+0x20>
			LOG_ERR("set-value failure. key: %s error(%d)",
    6188:	462a      	mov	r2, r5
    618a:	2145      	movs	r1, #69	; 0x45
    618c:	4801      	ldr	r0, [pc, #4]	; (6194 <settings_call_set_handler+0x6c>)
    618e:	f021 fba0 	bl	278d2 <printk>
    6192:	e7d9      	b.n	6148 <settings_call_set_handler+0x20>
    6194:	0003092d 	.word	0x0003092d

00006198 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    6198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    619c:	4f1f      	ldr	r7, [pc, #124]	; (621c <settings_commit_subtree+0x84>)
    619e:	4c20      	ldr	r4, [pc, #128]	; (6220 <settings_commit_subtree+0x88>)
    61a0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 622c <settings_commit_subtree+0x94>
{
    61a4:	4606      	mov	r6, r0
	rc = 0;
    61a6:	2500      	movs	r5, #0
    61a8:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    61aa:	42bc      	cmp	r4, r7
    61ac:	d908      	bls.n	61c0 <settings_commit_subtree+0x28>
    61ae:	4641      	mov	r1, r8
    61b0:	481c      	ldr	r0, [pc, #112]	; (6224 <settings_commit_subtree+0x8c>)
    61b2:	22f4      	movs	r2, #244	; 0xf4
    61b4:	f021 fb8d 	bl	278d2 <printk>
    61b8:	21f4      	movs	r1, #244	; 0xf4
    61ba:	4640      	mov	r0, r8
    61bc:	f021 fe02 	bl	27dc4 <assert_post_action>
    61c0:	454c      	cmp	r4, r9
    61c2:	d307      	bcc.n	61d4 <settings_commit_subtree+0x3c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    61c4:	4b18      	ldr	r3, [pc, #96]	; (6228 <settings_commit_subtree+0x90>)
    61c6:	681c      	ldr	r4, [r3, #0]
    61c8:	b10c      	cbz	r4, 61ce <settings_commit_subtree+0x36>
    61ca:	3c14      	subs	r4, #20
    61cc:	b9a4      	cbnz	r4, 61f8 <settings_commit_subtree+0x60>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    61ce:	4628      	mov	r0, r5
    61d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    61d4:	b91e      	cbnz	r6, 61de <settings_commit_subtree+0x46>
		if (ch->h_commit) {
    61d6:	68e3      	ldr	r3, [r4, #12]
    61d8:	b94b      	cbnz	r3, 61ee <settings_commit_subtree+0x56>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    61da:	3414      	adds	r4, #20
    61dc:	e7e5      	b.n	61aa <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    61de:	2200      	movs	r2, #0
    61e0:	4631      	mov	r1, r6
    61e2:	6820      	ldr	r0, [r4, #0]
    61e4:	f021 ff82 	bl	280ec <settings_name_steq>
    61e8:	2800      	cmp	r0, #0
    61ea:	d1f4      	bne.n	61d6 <settings_commit_subtree+0x3e>
    61ec:	e7f5      	b.n	61da <settings_commit_subtree+0x42>
			rc2 = ch->h_commit();
    61ee:	4798      	blx	r3
				rc = rc2;
    61f0:	2d00      	cmp	r5, #0
    61f2:	bf08      	it	eq
    61f4:	4605      	moveq	r5, r0
    61f6:	e7f0      	b.n	61da <settings_commit_subtree+0x42>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    61f8:	b91e      	cbnz	r6, 6202 <settings_commit_subtree+0x6a>
		if (ch->h_commit) {
    61fa:	68e3      	ldr	r3, [r4, #12]
    61fc:	b94b      	cbnz	r3, 6212 <settings_commit_subtree+0x7a>
    61fe:	6964      	ldr	r4, [r4, #20]
    6200:	e7e2      	b.n	61c8 <settings_commit_subtree+0x30>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    6202:	2200      	movs	r2, #0
    6204:	4631      	mov	r1, r6
    6206:	6820      	ldr	r0, [r4, #0]
    6208:	f021 ff70 	bl	280ec <settings_name_steq>
    620c:	2800      	cmp	r0, #0
    620e:	d1f4      	bne.n	61fa <settings_commit_subtree+0x62>
    6210:	e7f5      	b.n	61fe <settings_commit_subtree+0x66>
			rc2 = ch->h_commit();
    6212:	4798      	blx	r3
				rc = rc2;
    6214:	2d00      	cmp	r5, #0
    6216:	bf08      	it	eq
    6218:	4605      	moveq	r5, r0
    621a:	e7f0      	b.n	61fe <settings_commit_subtree+0x66>
    621c:	0002f044 	.word	0x0002f044
    6220:	0002eef0 	.word	0x0002eef0
    6224:	0003067f 	.word	0x0003067f
    6228:	2000340c 	.word	0x2000340c
    622c:	00030957 	.word	0x00030957

00006230 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    6230:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    6232:	4c06      	ldr	r4, [pc, #24]	; (624c <settings_subsys_init+0x1c>)
    6234:	7823      	ldrb	r3, [r4, #0]
    6236:	b93b      	cbnz	r3, 6248 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    6238:	f7ff ff16 	bl	6068 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    623c:	f000 f864 	bl	6308 <settings_backend_init>

	if (!err) {
    6240:	b908      	cbnz	r0, 6246 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    6242:	2301      	movs	r3, #1
    6244:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    6246:	bd10      	pop	{r4, pc}
		return 0;
    6248:	2000      	movs	r0, #0
    624a:	e7fc      	b.n	6246 <settings_subsys_init+0x16>
    624c:	200056ef 	.word	0x200056ef

00006250 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    6250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    6254:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    6256:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 6304 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    625a:	3401      	adds	r4, #1
{
    625c:	b098      	sub	sp, #96	; 0x60
    625e:	4680      	mov	r8, r0
    6260:	468a      	mov	sl, r1
	name_id = cf->last_name_id + 1;
    6262:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    6264:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    6268:	1e65      	subs	r5, r4, #1
    626a:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    626c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    6270:	d045      	beq.n	62fe <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    6272:	234a      	movs	r3, #74	; 0x4a
    6274:	aa05      	add	r2, sp, #20
    6276:	4629      	mov	r1, r5
    6278:	4630      	mov	r0, r6
    627a:	f021 ff09 	bl	28090 <nvs_read>
    627e:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    6282:	343f      	adds	r4, #63	; 0x3f
    6284:	b2a4      	uxth	r4, r4
    6286:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    6288:	4621      	mov	r1, r4
    628a:	2301      	movs	r3, #1
    628c:	f10d 020b 	add.w	r2, sp, #11
    6290:	4630      	mov	r0, r6
    6292:	f021 fefd 	bl	28090 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    6296:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    6298:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    629a:	dc03      	bgt.n	62a4 <settings_nvs_load+0x54>
    629c:	2800      	cmp	r0, #0
    629e:	dc03      	bgt.n	62a8 <settings_nvs_load+0x58>
{
    62a0:	462c      	mov	r4, r5
    62a2:	e7e1      	b.n	6268 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    62a4:	2800      	cmp	r0, #0
    62a6:	dc16      	bgt.n	62d6 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    62a8:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    62ac:	42ab      	cmp	r3, r5
    62ae:	d109      	bne.n	62c4 <settings_nvs_load+0x74>
				cf->last_name_id--;
    62b0:	4642      	mov	r2, r8
    62b2:	1e6b      	subs	r3, r5, #1
    62b4:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    62b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    62bc:	2302      	movs	r3, #2
    62be:	4630      	mov	r0, r6
    62c0:	f7ff fcc6 	bl	5c50 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    62c4:	4629      	mov	r1, r5
    62c6:	4630      	mov	r0, r6
    62c8:	f021 fede 	bl	28088 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    62cc:	4621      	mov	r1, r4
    62ce:	4630      	mov	r0, r6
    62d0:	f021 feda 	bl	28088 <nvs_delete>
			continue;
    62d4:	e7e4      	b.n	62a0 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    62d6:	ab18      	add	r3, sp, #96	; 0x60
    62d8:	441f      	add	r7, r3
    62da:	2300      	movs	r3, #0
    62dc:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    62e0:	464a      	mov	r2, r9
    62e2:	f8cd a000 	str.w	sl, [sp]
    62e6:	ab03      	add	r3, sp, #12
    62e8:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    62ea:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    62ec:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    62f0:	f7ff ff1a 	bl	6128 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    62f4:	2800      	cmp	r0, #0
    62f6:	d0d3      	beq.n	62a0 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    62f8:	b018      	add	sp, #96	; 0x60
    62fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    62fe:	2000      	movs	r0, #0
	return ret;
    6300:	e7fa      	b.n	62f8 <settings_nvs_load+0xa8>
    6302:	bf00      	nop
    6304:	00028159 	.word	0x00028159

00006308 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    6308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    630a:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    630c:	4669      	mov	r1, sp
    630e:	2003      	movs	r0, #3
	uint32_t sector_cnt = 1;
    6310:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    6312:	f7ff fde7 	bl	5ee4 <flash_area_open>
	if (rc) {
    6316:	4604      	mov	r4, r0
    6318:	2800      	cmp	r0, #0
    631a:	d137      	bne.n	638c <settings_backend_init+0x84>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    631c:	aa02      	add	r2, sp, #8
    631e:	a901      	add	r1, sp, #4
    6320:	2003      	movs	r0, #3
    6322:	f7ff fdf3 	bl	5f0c <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    6326:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    632a:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    632c:	d02e      	beq.n	638c <settings_backend_init+0x84>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    632e:	b140      	cbz	r0, 6342 <settings_backend_init+0x3a>
    6330:	f110 040c 	adds.w	r4, r0, #12
    6334:	d005      	beq.n	6342 <settings_backend_init+0x3a>
		k_panic();
    6336:	4040      	eors	r0, r0
    6338:	f380 8811 	msr	BASEPRI, r0
    633c:	f04f 0004 	mov.w	r0, #4
    6340:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    6342:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    6344:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    6348:	d223      	bcs.n	6392 <settings_backend_init+0x8a>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    634a:	9a00      	ldr	r2, [sp, #0]
    634c:	2300      	movs	r3, #0
    634e:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    6350:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    6352:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    6354:	4285      	cmp	r5, r0
    6356:	b29c      	uxth	r4, r3
    6358:	d303      	bcc.n	6362 <settings_backend_init+0x5a>
			break;
		}
		cnt++;
    635a:	3301      	adds	r3, #1
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    635c:	2b08      	cmp	r3, #8
    635e:	d1f8      	bne.n	6352 <settings_backend_init+0x4a>
    6360:	461c      	mov	r4, r3
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    6362:	4d0d      	ldr	r5, [pc, #52]	; (6398 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    6364:	6853      	ldr	r3, [r2, #4]
    6366:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    6368:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    636a:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    636c:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    636e:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    6370:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    6372:	f021 ff88 	bl	28286 <settings_nvs_backend_init>
	if (rc) {
    6376:	4604      	mov	r4, r0
    6378:	b940      	cbnz	r0, 638c <settings_backend_init+0x84>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    637a:	4e08      	ldr	r6, [pc, #32]	; (639c <settings_backend_init+0x94>)
    637c:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    637e:	4628      	mov	r0, r5
    6380:	f7ff fe10 	bl	5fa4 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    6384:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    6386:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    6388:	f7ff fe1a 	bl	5fc0 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    638c:	4620      	mov	r0, r4
    638e:	b004      	add	sp, #16
    6390:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    6392:	f06f 0420 	mvn.w	r4, #32
    6396:	e7f9      	b.n	638c <settings_backend_init+0x84>
    6398:	20003414 	.word	0x20003414
    639c:	200011fc 	.word	0x200011fc

000063a0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    63a0:	b508      	push	{r3, lr}
    63a2:	4604      	mov	r4, r0
	__asm__ volatile(
    63a4:	f04f 0220 	mov.w	r2, #32
    63a8:	f3ef 8311 	mrs	r3, BASEPRI
    63ac:	f382 8811 	msr	BASEPRI, r2
    63b0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    63b4:	f022 f964 	bl	28680 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    63b8:	4620      	mov	r0, r4
    63ba:	f002 f883 	bl	84c4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    63be:	4803      	ldr	r0, [pc, #12]	; (63cc <sys_reboot+0x2c>)
    63c0:	f021 fa87 	bl	278d2 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    63c4:	f001 fc28 	bl	7c18 <arch_cpu_idle>
    63c8:	e7fc      	b.n	63c4 <sys_reboot+0x24>
    63ca:	bf00      	nop
    63cc:	0003098f 	.word	0x0003098f

000063d0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    63d0:	b510      	push	{r4, lr}
    63d2:	4807      	ldr	r0, [pc, #28]	; (63f0 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    63d4:	4c07      	ldr	r4, [pc, #28]	; (63f4 <uart_console_init+0x24>)
    63d6:	f01c ffad 	bl	23334 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    63da:	4b07      	ldr	r3, [pc, #28]	; (63f8 <uart_console_init+0x28>)
    63dc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    63de:	4620      	mov	r0, r4
    63e0:	f002 f80a 	bl	83f8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    63e4:	4620      	mov	r0, r4
    63e6:	f7fe fa21 	bl	482c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    63ea:	2000      	movs	r0, #0
    63ec:	bd10      	pop	{r4, pc}
    63ee:	bf00      	nop
    63f0:	000309b8 	.word	0x000309b8
    63f4:	000063fd 	.word	0x000063fd
    63f8:	20003454 	.word	0x20003454

000063fc <console_out>:
	if ('\n' == c) {
    63fc:	280a      	cmp	r0, #10
{
    63fe:	b538      	push	{r3, r4, r5, lr}
    6400:	4604      	mov	r4, r0
    6402:	4d07      	ldr	r5, [pc, #28]	; (6420 <console_out+0x24>)
	if ('\n' == c) {
    6404:	d104      	bne.n	6410 <console_out+0x14>
    6406:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    6408:	6883      	ldr	r3, [r0, #8]
    640a:	210d      	movs	r1, #13
    640c:	685b      	ldr	r3, [r3, #4]
    640e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    6410:	6828      	ldr	r0, [r5, #0]
    6412:	6883      	ldr	r3, [r0, #8]
    6414:	b2e1      	uxtb	r1, r4
    6416:	685b      	ldr	r3, [r3, #4]
    6418:	4798      	blx	r3
}
    641a:	4620      	mov	r0, r4
    641c:	bd38      	pop	{r3, r4, r5, pc}
    641e:	bf00      	nop
    6420:	20003454 	.word	0x20003454

00006424 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    6428:	4c0e      	ldr	r4, [pc, #56]	; (6464 <onoff_start+0x40>)
    642a:	1b05      	subs	r5, r0, r4
    642c:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    6430:	250c      	movs	r5, #12
    6432:	435d      	muls	r5, r3
{
    6434:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    6436:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
    643a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    643c:	4420      	add	r0, r4
    643e:	2140      	movs	r1, #64	; 0x40
    6440:	f021 ff3d 	bl	282be <set_starting_state>
	if (err < 0) {
    6444:	1e01      	subs	r1, r0, #0
    6446:	db08      	blt.n	645a <onoff_start+0x36>
	subdata->cb = cb;
    6448:	4b07      	ldr	r3, [pc, #28]	; (6468 <onoff_start+0x44>)
    644a:	442c      	add	r4, r5
	subdata->user_data = user_data;
    644c:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    6450:	4b06      	ldr	r3, [pc, #24]	; (646c <onoff_start+0x48>)
    6452:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    6454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    6458:	4718      	bx	r3
		notify(mgr, err);
    645a:	4638      	mov	r0, r7
    645c:	4633      	mov	r3, r6
}
    645e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    6462:	4718      	bx	r3
    6464:	20003468 	.word	0x20003468
    6468:	00028321 	.word	0x00028321
    646c:	0002f578 	.word	0x0002f578

00006470 <get_status>:
{
    6470:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6472:	b2cc      	uxtb	r4, r1
    6474:	2c01      	cmp	r4, #1
{
    6476:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6478:	d908      	bls.n	648c <get_status+0x1c>
    647a:	4908      	ldr	r1, [pc, #32]	; (649c <get_status+0x2c>)
    647c:	4808      	ldr	r0, [pc, #32]	; (64a0 <get_status+0x30>)
    647e:	227e      	movs	r2, #126	; 0x7e
    6480:	f021 fa27 	bl	278d2 <printk>
    6484:	217e      	movs	r1, #126	; 0x7e
    6486:	4805      	ldr	r0, [pc, #20]	; (649c <get_status+0x2c>)
    6488:	f021 fc9c 	bl	27dc4 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    648c:	68eb      	ldr	r3, [r5, #12]
    648e:	210c      	movs	r1, #12
    6490:	fb04 3101 	mla	r1, r4, r1, r3
    6494:	6c88      	ldr	r0, [r1, #72]	; 0x48
}
    6496:	f000 0007 	and.w	r0, r0, #7
    649a:	bd38      	pop	{r3, r4, r5, pc}
    649c:	000309bf 	.word	0x000309bf
    64a0:	0003067f 	.word	0x0003067f

000064a4 <stop>:
{
    64a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64a6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    64a8:	2c01      	cmp	r4, #1
{
    64aa:	4605      	mov	r5, r0
    64ac:	4617      	mov	r7, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    64ae:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    64b0:	d90a      	bls.n	64c8 <stop+0x24>
    64b2:	4918      	ldr	r1, [pc, #96]	; (6514 <stop+0x70>)
    64b4:	4818      	ldr	r0, [pc, #96]	; (6518 <stop+0x74>)
    64b6:	f240 1253 	movw	r2, #339	; 0x153
    64ba:	f021 fa0a 	bl	278d2 <printk>
    64be:	f240 1153 	movw	r1, #339	; 0x153
    64c2:	4814      	ldr	r0, [pc, #80]	; (6514 <stop+0x70>)
    64c4:	f021 fc7e 	bl	27dc4 <assert_post_action>
    64c8:	f04f 0320 	mov.w	r3, #32
    64cc:	f3ef 8111 	mrs	r1, BASEPRI
    64d0:	f383 8811 	msr	BASEPRI, r3
    64d4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    64d8:	230c      	movs	r3, #12
    64da:	fb03 6204 	mla	r2, r3, r4, r6
    64de:	6c92      	ldr	r2, [r2, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    64e0:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    64e4:	d001      	beq.n	64ea <stop+0x46>
    64e6:	4297      	cmp	r7, r2
    64e8:	d111      	bne.n	650e <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    64ea:	fb03 6304 	mla	r3, r3, r4, r6
    64ee:	2201      	movs	r2, #1
    64f0:	649a      	str	r2, [r3, #72]	; 0x48
	int err = 0;
    64f2:	2000      	movs	r0, #0
	__asm__ volatile(
    64f4:	f381 8811 	msr	BASEPRI, r1
    64f8:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    64fc:	b930      	cbnz	r0, 650c <stop+0x68>
	get_sub_config(dev, type)->stop();
    64fe:	686b      	ldr	r3, [r5, #4]
    6500:	220c      	movs	r2, #12
    6502:	fb02 3404 	mla	r4, r2, r4, r3
    6506:	6863      	ldr	r3, [r4, #4]
    6508:	4798      	blx	r3
	return 0;
    650a:	2000      	movs	r0, #0
}
    650c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    650e:	f04f 30ff 	mov.w	r0, #4294967295
    6512:	e7ef      	b.n	64f4 <stop+0x50>
    6514:	000309bf 	.word	0x000309bf
    6518:	0003067f 	.word	0x0003067f

0000651c <onoff_stop>:
{
    651c:	b570      	push	{r4, r5, r6, lr}
    651e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    6520:	4906      	ldr	r1, [pc, #24]	; (653c <onoff_stop+0x20>)
    6522:	1a41      	subs	r1, r0, r1
{
    6524:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6526:	1149      	asrs	r1, r1, #5
    6528:	2240      	movs	r2, #64	; 0x40
    652a:	4805      	ldr	r0, [pc, #20]	; (6540 <onoff_stop+0x24>)
    652c:	f7ff ffba 	bl	64a4 <stop>
	notify(mgr, res);
    6530:	462b      	mov	r3, r5
    6532:	4601      	mov	r1, r0
    6534:	4620      	mov	r0, r4
}
    6536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    653a:	4718      	bx	r3
    653c:	20003468 	.word	0x20003468
    6540:	20001cf0 	.word	0x20001cf0

00006544 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6544:	2200      	movs	r2, #0
{
    6546:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6548:	2101      	movs	r1, #1
{
    654a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    654c:	4610      	mov	r0, r2
    654e:	f001 fad7 	bl	7b00 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    6552:	2000      	movs	r0, #0
    6554:	f001 faa2 	bl	7a9c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    6558:	480f      	ldr	r0, [pc, #60]	; (6598 <clk_init+0x54>)
    655a:	f01c faad 	bl	22ab8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    655e:	4b0f      	ldr	r3, [pc, #60]	; (659c <clk_init+0x58>)
    6560:	4298      	cmp	r0, r3
    6562:	d115      	bne.n	6590 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    6564:	f01c fac8 	bl	22af8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    6568:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    656a:	490d      	ldr	r1, [pc, #52]	; (65a0 <clk_init+0x5c>)
    656c:	4630      	mov	r0, r6
    656e:	f021 fa0b 	bl	27988 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    6572:	2800      	cmp	r0, #0
    6574:	db0b      	blt.n	658e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6576:	2501      	movs	r5, #1
    6578:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    657a:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    657c:	4908      	ldr	r1, [pc, #32]	; (65a0 <clk_init+0x5c>)
    657e:	f104 0020 	add.w	r0, r4, #32
    6582:	f021 fa01 	bl	27988 <onoff_manager_init>
		if (err < 0) {
    6586:	2800      	cmp	r0, #0
    6588:	db01      	blt.n	658e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    658a:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    658c:	2000      	movs	r0, #0
}
    658e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6590:	f06f 0004 	mvn.w	r0, #4
    6594:	e7fb      	b.n	658e <clk_init+0x4a>
    6596:	bf00      	nop
    6598:	000065d9 	.word	0x000065d9
    659c:	0bad0000 	.word	0x0bad0000
    65a0:	0002f590 	.word	0x0002f590

000065a4 <clkstarted_handle.constprop.13>:
static void clkstarted_handle(const struct device *dev,
    65a4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    65a6:	230c      	movs	r3, #12
    65a8:	4809      	ldr	r0, [pc, #36]	; (65d0 <clkstarted_handle.constprop.13+0x2c>)
    65aa:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    65ac:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    65ae:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    65b0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    65b4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    65b6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    65b8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    65ba:	4418      	add	r0, r3
    65bc:	f021 fe9d 	bl	282fa <set_on_state>
	if (callback) {
    65c0:	b12d      	cbz	r5, 65ce <clkstarted_handle.constprop.13+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    65c2:	4632      	mov	r2, r6
    65c4:	462b      	mov	r3, r5
    65c6:	4803      	ldr	r0, [pc, #12]	; (65d4 <clkstarted_handle.constprop.13+0x30>)
}
    65c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    65cc:	4718      	bx	r3
}
    65ce:	bd70      	pop	{r4, r5, r6, pc}
    65d0:	20003468 	.word	0x20003468
    65d4:	20001cf0 	.word	0x20001cf0

000065d8 <clock_event_handler>:
	switch (event) {
    65d8:	2801      	cmp	r0, #1
{
    65da:	b508      	push	{r3, lr}
	switch (event) {
    65dc:	d010      	beq.n	6600 <clock_event_handler+0x28>
    65de:	b150      	cbz	r0, 65f6 <clock_event_handler+0x1e>
    65e0:	2803      	cmp	r0, #3
    65e2:	d011      	beq.n	6608 <clock_event_handler+0x30>
		__ASSERT_NO_MSG(0);
    65e4:	490f      	ldr	r1, [pc, #60]	; (6624 <clock_event_handler+0x4c>)
    65e6:	4810      	ldr	r0, [pc, #64]	; (6628 <clock_event_handler+0x50>)
    65e8:	f240 226a 	movw	r2, #618	; 0x26a
    65ec:	f021 f971 	bl	278d2 <printk>
    65f0:	f240 216a 	movw	r1, #618	; 0x26a
    65f4:	e010      	b.n	6618 <clock_event_handler+0x40>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    65f6:	4b0d      	ldr	r3, [pc, #52]	; (662c <clock_event_handler+0x54>)
    65f8:	6c98      	ldr	r0, [r3, #72]	; 0x48
    65fa:	f010 0007 	ands.w	r0, r0, #7
    65fe:	d110      	bne.n	6622 <clock_event_handler+0x4a>
}
    6600:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6604:	f7ff bfce 	b.w	65a4 <clkstarted_handle.constprop.13>
			__ASSERT_NO_MSG(false);
    6608:	4906      	ldr	r1, [pc, #24]	; (6624 <clock_event_handler+0x4c>)
    660a:	4807      	ldr	r0, [pc, #28]	; (6628 <clock_event_handler+0x50>)
    660c:	f240 2266 	movw	r2, #614	; 0x266
    6610:	f021 f95f 	bl	278d2 <printk>
    6614:	f240 2166 	movw	r1, #614	; 0x266
		__ASSERT_NO_MSG(0);
    6618:	4802      	ldr	r0, [pc, #8]	; (6624 <clock_event_handler+0x4c>)
}
    661a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    661e:	f021 bbd1 	b.w	27dc4 <assert_post_action>
}
    6622:	bd08      	pop	{r3, pc}
    6624:	000309bf 	.word	0x000309bf
    6628:	0003067f 	.word	0x0003067f
    662c:	20003468 	.word	0x20003468

00006630 <generic_hfclk_start>:
{
    6630:	b508      	push	{r3, lr}
	__asm__ volatile(
    6632:	f04f 0320 	mov.w	r3, #32
    6636:	f3ef 8111 	mrs	r1, BASEPRI
    663a:	f383 8811 	msr	BASEPRI, r3
    663e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    6642:	4a12      	ldr	r2, [pc, #72]	; (668c <generic_hfclk_start+0x5c>)
    6644:	6813      	ldr	r3, [r2, #0]
    6646:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    664a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    664e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    6650:	d00c      	beq.n	666c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6656:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    665a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    665e:	f013 0301 	ands.w	r3, r3, #1
    6662:	d003      	beq.n	666c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    6664:	480a      	ldr	r0, [pc, #40]	; (6690 <generic_hfclk_start+0x60>)
    6666:	f021 fe48 	bl	282fa <set_on_state>
			already_started = true;
    666a:	2301      	movs	r3, #1
	__asm__ volatile(
    666c:	f381 8811 	msr	BASEPRI, r1
    6670:	f3bf 8f6f 	isb	sy
	if (already_started) {
    6674:	b123      	cbz	r3, 6680 <generic_hfclk_start+0x50>
		clkstarted_handle(CLOCK_DEVICE,
    6676:	2000      	movs	r0, #0
}
    6678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    667c:	f7ff bf92 	b.w	65a4 <clkstarted_handle.constprop.13>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6680:	2001      	movs	r0, #1
}
    6682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6686:	f01c ba53 	b.w	22b30 <nrfx_clock_start>
    668a:	bf00      	nop
    668c:	200034c0 	.word	0x200034c0
    6690:	200034b0 	.word	0x200034b0

00006694 <generic_hfclk_stop>:
    6694:	4b09      	ldr	r3, [pc, #36]	; (66bc <generic_hfclk_stop+0x28>)
    6696:	f3bf 8f5b 	dmb	ish
    669a:	e853 2f00 	ldrex	r2, [r3]
    669e:	f022 0102 	bic.w	r1, r2, #2
    66a2:	e843 1000 	strex	r0, r1, [r3]
    66a6:	2800      	cmp	r0, #0
    66a8:	d1f7      	bne.n	669a <generic_hfclk_stop+0x6>
    66aa:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    66ae:	07d3      	lsls	r3, r2, #31
    66b0:	d402      	bmi.n	66b8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    66b2:	2001      	movs	r0, #1
    66b4:	f01c ba8a 	b.w	22bcc <nrfx_clock_stop>
}
    66b8:	4770      	bx	lr
    66ba:	bf00      	nop
    66bc:	200034c0 	.word	0x200034c0

000066c0 <api_blocking_start>:
{
    66c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    66c2:	2200      	movs	r2, #0
    66c4:	2301      	movs	r3, #1
    66c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    66ca:	ab04      	add	r3, sp, #16
    66cc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    66d0:	4a09      	ldr	r2, [pc, #36]	; (66f8 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    66d2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    66d6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    66d8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    66dc:	f021 fe32 	bl	28344 <api_start>
	if (err < 0) {
    66e0:	2800      	cmp	r0, #0
    66e2:	db05      	blt.n	66f0 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    66e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    66e8:	2300      	movs	r3, #0
    66ea:	4668      	mov	r0, sp
    66ec:	f01e fca2 	bl	25034 <z_impl_k_sem_take>
}
    66f0:	b007      	add	sp, #28
    66f2:	f85d fb04 	ldr.w	pc, [sp], #4
    66f6:	bf00      	nop
    66f8:	0002833f 	.word	0x0002833f

000066fc <z_nrf_clock_control_get_onoff>:
}
    66fc:	4b02      	ldr	r3, [pc, #8]	; (6708 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    66fe:	b2c0      	uxtb	r0, r0
}
    6700:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6704:	4770      	bx	lr
    6706:	bf00      	nop
    6708:	20003468 	.word	0x20003468

0000670c <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    670c:	4b09      	ldr	r3, [pc, #36]	; (6734 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    670e:	f3bf 8f5b 	dmb	ish
    6712:	e853 2f00 	ldrex	r2, [r3]
    6716:	f042 0101 	orr.w	r1, r2, #1
    671a:	e843 1000 	strex	r0, r1, [r3]
    671e:	2800      	cmp	r0, #0
    6720:	d1f7      	bne.n	6712 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    6722:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    6726:	0793      	lsls	r3, r2, #30
    6728:	d402      	bmi.n	6730 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    672a:	2001      	movs	r0, #1
    672c:	f01c ba00 	b.w	22b30 <nrfx_clock_start>
}
    6730:	4770      	bx	lr
    6732:	bf00      	nop
    6734:	200034c0 	.word	0x200034c0

00006738 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6738:	4b09      	ldr	r3, [pc, #36]	; (6760 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    673a:	f3bf 8f5b 	dmb	ish
    673e:	e853 2f00 	ldrex	r2, [r3]
    6742:	f022 0101 	bic.w	r1, r2, #1
    6746:	e843 1000 	strex	r0, r1, [r3]
    674a:	2800      	cmp	r0, #0
    674c:	d1f7      	bne.n	673e <z_nrf_clock_bt_ctlr_hf_release+0x6>
    674e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    6752:	0793      	lsls	r3, r2, #30
    6754:	d402      	bmi.n	675c <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6756:	2001      	movs	r0, #1
    6758:	f01c ba38 	b.w	22bcc <nrfx_clock_stop>
}
    675c:	4770      	bx	lr
    675e:	bf00      	nop
    6760:	200034c0 	.word	0x200034c0

00006764 <z_nrf_clock_control_lf_on>:
{
    6764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6768:	4947      	ldr	r1, [pc, #284]	; (6888 <z_nrf_clock_control_lf_on+0x124>)
    676a:	f3bf 8f5b 	dmb	ish
    676e:	4605      	mov	r5, r0
    6770:	2201      	movs	r2, #1
    6772:	e851 3f00 	ldrex	r3, [r1]
    6776:	e841 2000 	strex	r0, r2, [r1]
    677a:	2800      	cmp	r0, #0
    677c:	d1f9      	bne.n	6772 <z_nrf_clock_control_lf_on+0xe>
    677e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    6782:	b99b      	cbnz	r3, 67ac <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    6784:	4941      	ldr	r1, [pc, #260]	; (688c <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    6786:	4842      	ldr	r0, [pc, #264]	; (6890 <z_nrf_clock_control_lf_on+0x12c>)
    6788:	604b      	str	r3, [r1, #4]
    678a:	60cb      	str	r3, [r1, #12]
    678c:	608a      	str	r2, [r1, #8]
    678e:	f7fe fa55 	bl	4c3c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    6792:	2800      	cmp	r0, #0
    6794:	da0a      	bge.n	67ac <z_nrf_clock_control_lf_on+0x48>
    6796:	493f      	ldr	r1, [pc, #252]	; (6894 <z_nrf_clock_control_lf_on+0x130>)
    6798:	483f      	ldr	r0, [pc, #252]	; (6898 <z_nrf_clock_control_lf_on+0x134>)
    679a:	f240 2226 	movw	r2, #550	; 0x226
    679e:	f021 f898 	bl	278d2 <printk>
    67a2:	f240 2126 	movw	r1, #550	; 0x226
    67a6:	483b      	ldr	r0, [pc, #236]	; (6894 <z_nrf_clock_control_lf_on+0x130>)
    67a8:	f021 fb0c 	bl	27dc4 <assert_post_action>
	switch (start_mode) {
    67ac:	b395      	cbz	r5, 6814 <z_nrf_clock_control_lf_on+0xb0>
    67ae:	2d02      	cmp	r5, #2
    67b0:	d854      	bhi.n	685c <z_nrf_clock_control_lf_on+0xf8>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    67b2:	2d01      	cmp	r5, #1
    67b4:	d107      	bne.n	67c6 <z_nrf_clock_control_lf_on+0x62>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    67b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    67ba:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    67be:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    67c2:	2b01      	cmp	r3, #1
    67c4:	d026      	beq.n	6814 <z_nrf_clock_control_lf_on+0xb0>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    67c6:	f027 fc4c 	bl	2e062 <k_is_in_isr>
    67ca:	b918      	cbnz	r0, 67d4 <z_nrf_clock_control_lf_on+0x70>
	return !z_sys_post_kernel;
    67cc:	4b33      	ldr	r3, [pc, #204]	; (689c <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
    67ce:	781b      	ldrb	r3, [r3, #0]
    67d0:	2b00      	cmp	r3, #0
    67d2:	d150      	bne.n	6876 <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
    67d4:	f04f 0320 	mov.w	r3, #32
    67d8:	f3ef 8911 	mrs	r9, BASEPRI
    67dc:	f383 8811 	msr	BASEPRI, r3
    67e0:	f3bf 8f6f 	isb	sy
    67e4:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    67e6:	4e2e      	ldr	r6, [pc, #184]	; (68a0 <z_nrf_clock_control_lf_on+0x13c>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    67e8:	4f2e      	ldr	r7, [pc, #184]	; (68a4 <z_nrf_clock_control_lf_on+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    67ea:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 68a8 <z_nrf_clock_control_lf_on+0x144>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    67ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    67f2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    67f6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    67fa:	03d2      	lsls	r2, r2, #15
    67fc:	d50c      	bpl.n	6818 <z_nrf_clock_control_lf_on+0xb4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    67fe:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    6802:	2b01      	cmp	r3, #1
    6804:	d001      	beq.n	680a <z_nrf_clock_control_lf_on+0xa6>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    6806:	2d01      	cmp	r5, #1
    6808:	d106      	bne.n	6818 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
    680a:	b30c      	cbz	r4, 6850 <z_nrf_clock_control_lf_on+0xec>
	__asm__ volatile(
    680c:	f389 8811 	msr	BASEPRI, r9
    6810:	f3bf 8f6f 	isb	sy
}
    6814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    6818:	b1ac      	cbz	r4, 6846 <z_nrf_clock_control_lf_on+0xe2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    681a:	4648      	mov	r0, r9
    681c:	f001 fa0a 	bl	7c34 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    6820:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6824:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    6828:	2b00      	cmp	r3, #0
    682a:	d1e0      	bne.n	67ee <z_nrf_clock_control_lf_on+0x8a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    682c:	6831      	ldr	r1, [r6, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    682e:	2900      	cmp	r1, #0
    6830:	d0dd      	beq.n	67ee <z_nrf_clock_control_lf_on+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6832:	6033      	str	r3, [r6, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    6834:	6833      	ldr	r3, [r6, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    6836:	2301      	movs	r3, #1
    6838:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    683c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6840:	f8c8 3000 	str.w	r3, [r8]
    6844:	e7d3      	b.n	67ee <z_nrf_clock_control_lf_on+0x8a>
	return z_impl_k_sleep(timeout);
    6846:	2100      	movs	r1, #0
    6848:	2021      	movs	r0, #33	; 0x21
    684a:	f01e fb65 	bl	24f18 <z_impl_k_sleep>
    684e:	e7e7      	b.n	6820 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
    6850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6854:	2202      	movs	r2, #2
    6856:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    685a:	e7db      	b.n	6814 <z_nrf_clock_control_lf_on+0xb0>
		__ASSERT_NO_MSG(false);
    685c:	490d      	ldr	r1, [pc, #52]	; (6894 <z_nrf_clock_control_lf_on+0x130>)
    685e:	480e      	ldr	r0, [pc, #56]	; (6898 <z_nrf_clock_control_lf_on+0x134>)
    6860:	f44f 720e 	mov.w	r2, #568	; 0x238
    6864:	f021 f835 	bl	278d2 <printk>
    6868:	f44f 710e 	mov.w	r1, #568	; 0x238
    686c:	4809      	ldr	r0, [pc, #36]	; (6894 <z_nrf_clock_control_lf_on+0x130>)
}
    686e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    6872:	f021 baa7 	b.w	27dc4 <assert_post_action>
    p_reg->INTENCLR = mask;
    6876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    687a:	2202      	movs	r2, #2
    687c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6880:	4604      	mov	r4, r0
	int key = isr_mode ? irq_lock() : 0;
    6882:	4681      	mov	r9, r0
    6884:	e7af      	b.n	67e6 <z_nrf_clock_control_lf_on+0x82>
    6886:	bf00      	nop
    6888:	200034c4 	.word	0x200034c4
    688c:	20003458 	.word	0x20003458
    6890:	20003488 	.word	0x20003488
    6894:	000309bf 	.word	0x000309bf
    6898:	0003067f 	.word	0x0003067f
    689c:	2000589e 	.word	0x2000589e
    68a0:	40000104 	.word	0x40000104
    68a4:	e000e100 	.word	0xe000e100
    68a8:	40000008 	.word	0x40000008

000068ac <z_impl_gpio_pin_interrupt_configure>:
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
    68ac:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
    68b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
    68b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68b8:	4605      	mov	r5, r0
    68ba:	460f      	mov	r7, r1
    68bc:	4614      	mov	r4, r2
	const struct gpio_driver_config *const cfg =
    68be:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
	const struct gpio_driver_data *const data =
    68c2:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
    68c6:	d14f      	bne.n	6968 <z_impl_gpio_pin_interrupt_configure+0xbc>
    68c8:	492d      	ldr	r1, [pc, #180]	; (6980 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    68ca:	482e      	ldr	r0, [pc, #184]	; (6984 <z_impl_gpio_pin_interrupt_configure+0xd8>)
    68cc:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
    68d0:	f020 ffff 	bl	278d2 <printk>
    68d4:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
    68d8:	4829      	ldr	r0, [pc, #164]	; (6980 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    68da:	f021 fa73 	bl	27dc4 <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
    68de:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
    68e2:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
    68e6:	d10a      	bne.n	68fe <z_impl_gpio_pin_interrupt_configure+0x52>
    68e8:	4925      	ldr	r1, [pc, #148]	; (6980 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    68ea:	4826      	ldr	r0, [pc, #152]	; (6984 <z_impl_gpio_pin_interrupt_configure+0xd8>)
    68ec:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
    68f0:	f020 ffef 	bl	278d2 <printk>
    68f4:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    68f8:	4821      	ldr	r0, [pc, #132]	; (6980 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    68fa:	f021 fa63 	bl	27dc4 <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
    68fe:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
    6902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    6906:	d10a      	bne.n	691e <z_impl_gpio_pin_interrupt_configure+0x72>
    6908:	491d      	ldr	r1, [pc, #116]	; (6980 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    690a:	481e      	ldr	r0, [pc, #120]	; (6984 <z_impl_gpio_pin_interrupt_configure+0xd8>)
    690c:	f240 12fb 	movw	r2, #507	; 0x1fb
    6910:	f020 ffdf 	bl	278d2 <printk>
    6914:	f240 11fb 	movw	r1, #507	; 0x1fb
    6918:	4819      	ldr	r0, [pc, #100]	; (6980 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    691a:	f021 fa53 	bl	27dc4 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    691e:	2601      	movs	r6, #1
    6920:	f8da 3000 	ldr.w	r3, [sl]
    6924:	40be      	lsls	r6, r7
    6926:	421e      	tst	r6, r3
    6928:	d10a      	bne.n	6940 <z_impl_gpio_pin_interrupt_configure+0x94>
    692a:	4915      	ldr	r1, [pc, #84]	; (6980 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    692c:	4815      	ldr	r0, [pc, #84]	; (6984 <z_impl_gpio_pin_interrupt_configure+0xd8>)
    692e:	f240 12ff 	movw	r2, #511	; 0x1ff
    6932:	f020 ffce 	bl	278d2 <printk>
    6936:	f240 11ff 	movw	r1, #511	; 0x1ff
    693a:	4811      	ldr	r0, [pc, #68]	; (6980 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    693c:	f021 fa42 	bl	27dc4 <assert_post_action>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6940:	0423      	lsls	r3, r4, #16
    6942:	d505      	bpl.n	6950 <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    6944:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6948:	421e      	tst	r6, r3
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    694a:	bf18      	it	ne
    694c:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    6950:	f8d8 6018 	ldr.w	r6, [r8, #24]
    6954:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
    6958:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
    695c:	4639      	mov	r1, r7
    695e:	4628      	mov	r0, r5
    6960:	46b4      	mov	ip, r6
}
    6962:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    6966:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
    6968:	2b00      	cmp	r3, #0
    696a:	d1b8      	bne.n	68de <z_impl_gpio_pin_interrupt_configure+0x32>
    696c:	4904      	ldr	r1, [pc, #16]	; (6980 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    696e:	4805      	ldr	r0, [pc, #20]	; (6984 <z_impl_gpio_pin_interrupt_configure+0xd8>)
    6970:	f240 12ef 	movw	r2, #495	; 0x1ef
    6974:	f020 ffad 	bl	278d2 <printk>
    6978:	f240 11ef 	movw	r1, #495	; 0x1ef
    697c:	e7ac      	b.n	68d8 <z_impl_gpio_pin_interrupt_configure+0x2c>
    697e:	bf00      	nop
    6980:	00030655 	.word	0x00030655
    6984:	0003067f 	.word	0x0003067f

00006988 <mcp2515_cmd_read_rx_buffer.isra.7.constprop.19>:
 *   0: Receive Buffer 0, Start at RXB0SIDH (0x61)
 *   1: Receive Buffer 0, Start at RXB0D0 (0x66)
 *   2: Receive Buffer 1, Start at RXB1SIDH (0x71)
 *   3: Receive Buffer 1, Start at RXB1D0 (0x76)
 */
static int mcp2515_cmd_read_rx_buffer(const struct device *dev, uint8_t nm,
    6988:	b570      	push	{r4, r5, r6, lr}
				      uint8_t *buf_data, uint8_t buf_len)
{
	__ASSERT(nm <= 0x03, "nm <= 0x03");
    698a:	2903      	cmp	r1, #3
static int mcp2515_cmd_read_rx_buffer(const struct device *dev, uint8_t nm,
    698c:	b08e      	sub	sp, #56	; 0x38
    698e:	4605      	mov	r5, r0
    6990:	460c      	mov	r4, r1
    6992:	4616      	mov	r6, r2
	__ASSERT(nm <= 0x03, "nm <= 0x03");
    6994:	d908      	bls.n	69a8 <mcp2515_cmd_read_rx_buffer.isra.7.constprop.19+0x20>
    6996:	4915      	ldr	r1, [pc, #84]	; (69ec <mcp2515_cmd_read_rx_buffer.isra.7.constprop.19+0x64>)
    6998:	4815      	ldr	r0, [pc, #84]	; (69f0 <mcp2515_cmd_read_rx_buffer.isra.7.constprop.19+0x68>)
    699a:	22b0      	movs	r2, #176	; 0xb0
    699c:	f020 ff99 	bl	278d2 <printk>
    69a0:	21b0      	movs	r1, #176	; 0xb0
    69a2:	4812      	ldr	r0, [pc, #72]	; (69ec <mcp2515_cmd_read_rx_buffer.isra.7.constprop.19+0x64>)
    69a4:	f021 fa0e 	bl	27dc4 <assert_post_action>

	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };

	struct spi_buf tx_buf[] = {
    69a8:	ab01      	add	r3, sp, #4
    69aa:	2101      	movs	r1, #1
    69ac:	2000      	movs	r0, #0
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };
    69ae:	0064      	lsls	r4, r4, #1
	struct spi_buf tx_buf[] = {
    69b0:	e9cd 1007 	strd	r1, r0, [sp, #28]
    69b4:	220d      	movs	r2, #13
		{ .buf = NULL, .len = buf_len }
	};
	const struct spi_buf_set tx = {
		.buffers = tx_buf, .count = ARRAY_SIZE(tx_buf)
	};
	struct spi_buf rx_buf[] = {
    69b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };
    69ba:	f064 046f 	orn	r4, r4, #111	; 0x6f
	struct spi_buf tx_buf[] = {
    69be:	9306      	str	r3, [sp, #24]
	};
	const struct spi_buf_set rx = {
		.buffers = rx_buf, .count = ARRAY_SIZE(rx_buf)
	};

	return spi_transceive(DEV_DATA(dev)->spi, &DEV_DATA(dev)->spi_cfg,
    69c0:	6829      	ldr	r1, [r5, #0]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };
    69c2:	f88d 4004 	strb.w	r4, [sp, #4]
	const struct spi_buf_set tx = {
    69c6:	ab06      	add	r3, sp, #24
	struct spi_buf tx_buf[] = {
    69c8:	9209      	str	r2, [sp, #36]	; 0x24
	const struct spi_buf_set tx = {
    69ca:	9302      	str	r3, [sp, #8]
	struct spi_buf rx_buf[] = {
    69cc:	e9cd 620c 	strd	r6, r2, [sp, #48]	; 0x30
	const struct spi_buf_set tx = {
    69d0:	2302      	movs	r3, #2
	const struct spi_buf_set rx = {
    69d2:	aa0a      	add	r2, sp, #40	; 0x28
	const struct spi_buf_set tx = {
    69d4:	9303      	str	r3, [sp, #12]
	const struct spi_buf_set rx = {
    69d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
	return spi_transceive(DEV_DATA(dev)->spi, &DEV_DATA(dev)->spi_cfg,
    69da:	f851 0b04 	ldr.w	r0, [r1], #4
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&config, *(uintptr_t *)&tx_bufs, *(uintptr_t *)&rx_bufs, K_SYSCALL_SPI_TRANSCEIVE);
	}
#endif
	compiler_barrier();
	return z_impl_spi_transceive(dev, config, tx_bufs, rx_bufs);
    69de:	ab04      	add	r3, sp, #16
    69e0:	aa02      	add	r2, sp, #8
    69e2:	f021 fce9 	bl	283b8 <z_impl_spi_transceive>
			      &tx, &rx);
}
    69e6:	b00e      	add	sp, #56	; 0x38
    69e8:	bd70      	pop	{r4, r5, r6, pc}
    69ea:	bf00      	nop
    69ec:	00030a2a 	.word	0x00030a2a
    69f0:	0003067f 	.word	0x0003067f

000069f4 <mcp2515_attach_isr>:

static int mcp2515_attach_isr(const struct device *dev,
			      can_rx_callback_t rx_cb,
			      void *cb_arg,
			      const struct zcan_filter *filter)
{
    69f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    69f8:	4690      	mov	r8, r2
    69fa:	4699      	mov	r9, r3
	struct mcp2515_data *dev_data = DEV_DATA(dev);
    69fc:	68c5      	ldr	r5, [r0, #12]
	int filter_idx = 0;

	__ASSERT(rx_cb != NULL, "response_ptr can not be null");
    69fe:	460f      	mov	r7, r1
    6a00:	b951      	cbnz	r1, 6a18 <mcp2515_attach_isr+0x24>
    6a02:	491e      	ldr	r1, [pc, #120]	; (6a7c <mcp2515_attach_isr+0x88>)
    6a04:	481e      	ldr	r0, [pc, #120]	; (6a80 <mcp2515_attach_isr+0x8c>)
    6a06:	f240 2209 	movw	r2, #521	; 0x209
    6a0a:	f020 ff62 	bl	278d2 <printk>
    6a0e:	f240 2109 	movw	r1, #521	; 0x209
    6a12:	481a      	ldr	r0, [pc, #104]	; (6a7c <mcp2515_attach_isr+0x88>)
    6a14:	f021 f9d6 	bl	27dc4 <assert_post_action>

	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    6a18:	f505 76d8 	add.w	r6, r5, #432	; 0x1b0
    6a1c:	f04f 32ff 	mov.w	r2, #4294967295
    6a20:	f04f 33ff 	mov.w	r3, #4294967295
    6a24:	4630      	mov	r0, r6
    6a26:	f021 fd16 	bl	28456 <k_mutex_lock.constprop.20>

	/* find free filter */
	while ((BIT(filter_idx) & dev_data->filter_usage)
    6a2a:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
	int filter_idx = 0;
    6a2e:	2400      	movs	r4, #0
	while ((BIT(filter_idx) & dev_data->filter_usage)
    6a30:	fa22 f304 	lsr.w	r3, r2, r4
    6a34:	07db      	lsls	r3, r3, #31
    6a36:	d506      	bpl.n	6a46 <mcp2515_attach_isr+0x52>
	       && (filter_idx < CONFIG_CAN_MAX_FILTER)) {
    6a38:	2c05      	cmp	r4, #5
    6a3a:	d102      	bne.n	6a42 <mcp2515_attach_isr+0x4e>
		dev_data->filter[filter_idx] = *filter;
		dev_data->rx_cb[filter_idx] = rx_cb;
		dev_data->cb_arg[filter_idx] = cb_arg;

	} else {
		filter_idx = CAN_NO_FREE_FILTER;
    6a3c:	f04f 34ff 	mov.w	r4, #4294967295
    6a40:	e016      	b.n	6a70 <mcp2515_attach_isr+0x7c>
		filter_idx++;
    6a42:	3401      	adds	r4, #1
    6a44:	e7f4      	b.n	6a30 <mcp2515_attach_isr+0x3c>
	if (filter_idx < CONFIG_CAN_MAX_FILTER) {
    6a46:	2c05      	cmp	r4, #5
    6a48:	d0f8      	beq.n	6a3c <mcp2515_attach_isr+0x48>
		dev_data->filter_usage |= BIT(filter_idx);
    6a4a:	2301      	movs	r3, #1
    6a4c:	40a3      	lsls	r3, r4
		dev_data->filter[filter_idx] = *filter;
    6a4e:	e899 0003 	ldmia.w	r9, {r0, r1}
		dev_data->filter_usage |= BIT(filter_idx);
    6a52:	4313      	orrs	r3, r2
    6a54:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
		dev_data->filter[filter_idx] = *filter;
    6a58:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
    6a5c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    6a60:	f503 73c2 	add.w	r3, r3, #388	; 0x184
    6a64:	e883 0003 	stmia.w	r3, {r0, r1}
		dev_data->rx_cb[filter_idx] = rx_cb;
    6a68:	f8c5 715c 	str.w	r7, [r5, #348]	; 0x15c
		dev_data->cb_arg[filter_idx] = cb_arg;
    6a6c:	f8c5 8170 	str.w	r8, [r5, #368]	; 0x170
	}

	k_mutex_unlock(&dev_data->mutex);
    6a70:	4630      	mov	r0, r6
    6a72:	f021 fcec 	bl	2844e <k_mutex_unlock>

	return filter_idx;
}
    6a76:	4620      	mov	r0, r4
    6a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6a7c:	00030a2a 	.word	0x00030a2a
    6a80:	0003067f 	.word	0x0003067f

00006a84 <mcp2515_get_state>:
	k_sem_give(&dev_data->tx_sem);
}

static enum can_state mcp2515_get_state(const struct device *dev,
					struct can_bus_err_cnt *err_cnt)
{
    6a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t eflg;
	uint8_t err_cnt_buf[2];
	int ret;

	ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_EFLG, &eflg, sizeof(eflg));
    6a86:	2301      	movs	r3, #1
    6a88:	f10d 0203 	add.w	r2, sp, #3
{
    6a8c:	4605      	mov	r5, r0
    6a8e:	460c      	mov	r4, r1
	ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_EFLG, &eflg, sizeof(eflg));
    6a90:	68c0      	ldr	r0, [r0, #12]
    6a92:	212d      	movs	r1, #45	; 0x2d
    6a94:	f021 fd45 	bl	28522 <mcp2515_cmd_read_reg.isra.3>
	if (ret < 0) {
    6a98:	1e02      	subs	r2, r0, #0
    6a9a:	da06      	bge.n	6aaa <mcp2515_get_state+0x26>
		LOG_ERR("Failed to read error register [%d]", ret);
    6a9c:	4812      	ldr	r0, [pc, #72]	; (6ae8 <mcp2515_get_state+0x64>)
    6a9e:	2145      	movs	r1, #69	; 0x45

	if (err_cnt) {
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_TEC, err_cnt_buf,
					   sizeof(err_cnt_buf));
		if (ret < 0) {
			LOG_ERR("Failed to read error counters [%d]", ret);
    6aa0:	f020 ff17 	bl	278d2 <printk>
			return CAN_BUS_UNKNOWN;
    6aa4:	2003      	movs	r0, #3
	if ((eflg & MCP2515_EFLG_RXEP) || (eflg & MCP2515_EFLG_TXEP)) {
		return CAN_ERROR_PASSIVE;
	}

	return CAN_ERROR_ACTIVE;
}
    6aa6:	b003      	add	sp, #12
    6aa8:	bd30      	pop	{r4, r5, pc}
	if (err_cnt) {
    6aaa:	b184      	cbz	r4, 6ace <mcp2515_get_state+0x4a>
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_TEC, err_cnt_buf,
    6aac:	aa01      	add	r2, sp, #4
    6aae:	2302      	movs	r3, #2
    6ab0:	211c      	movs	r1, #28
    6ab2:	68e8      	ldr	r0, [r5, #12]
    6ab4:	f021 fd35 	bl	28522 <mcp2515_cmd_read_reg.isra.3>
		if (ret < 0) {
    6ab8:	1e02      	subs	r2, r0, #0
    6aba:	da02      	bge.n	6ac2 <mcp2515_get_state+0x3e>
			LOG_ERR("Failed to read error counters [%d]", ret);
    6abc:	2145      	movs	r1, #69	; 0x45
    6abe:	480b      	ldr	r0, [pc, #44]	; (6aec <mcp2515_get_state+0x68>)
    6ac0:	e7ee      	b.n	6aa0 <mcp2515_get_state+0x1c>
		err_cnt->tx_err_cnt = err_cnt_buf[0];
    6ac2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6ac6:	7023      	strb	r3, [r4, #0]
		err_cnt->rx_err_cnt = err_cnt_buf[1];
    6ac8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6acc:	7063      	strb	r3, [r4, #1]
	if (eflg & MCP2515_EFLG_TXBO) {
    6ace:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6ad2:	069a      	lsls	r2, r3, #26
    6ad4:	d405      	bmi.n	6ae2 <mcp2515_get_state+0x5e>
	if ((eflg & MCP2515_EFLG_RXEP) || (eflg & MCP2515_EFLG_TXEP)) {
    6ad6:	f013 0f18 	tst.w	r3, #24
		return CAN_BUS_UNKNOWN;
    6ada:	bf14      	ite	ne
    6adc:	2001      	movne	r0, #1
    6ade:	2000      	moveq	r0, #0
    6ae0:	e7e1      	b.n	6aa6 <mcp2515_get_state+0x22>
		return CAN_BUS_OFF;
    6ae2:	2002      	movs	r0, #2
    6ae4:	e7df      	b.n	6aa6 <mcp2515_get_state+0x22>
    6ae6:	bf00      	nop
    6ae8:	00030a57 	.word	0x00030a57
    6aec:	00030a7f 	.word	0x00030a7f

00006af0 <mcp2515_int_thread>:
		}
	}
}

static void mcp2515_int_thread(const struct device *dev)
{
    6af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6af4:	b08f      	sub	sp, #60	; 0x3c
	struct mcp2515_data *dev_data = DEV_DATA(dev);
    6af6:	68c3      	ldr	r3, [r0, #12]
			LOG_ERR("Couldn't read INT pin");
    6af8:	f8df a178 	ldr.w	sl, [pc, #376]	; 6c74 <mcp2515_int_thread+0x184>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    6afc:	f8df 8178 	ldr.w	r8, [pc, #376]	; 6c78 <mcp2515_int_thread+0x188>
    6b00:	f8df b178 	ldr.w	fp, [pc, #376]	; 6c7c <mcp2515_int_thread+0x18c>
	struct mcp2515_data *dev_data = DEV_DATA(dev);
    6b04:	9301      	str	r3, [sp, #4]
{
    6b06:	4604      	mov	r4, r0
	return z_impl_k_sem_take(sem, timeout);
    6b08:	9901      	ldr	r1, [sp, #4]
    6b0a:	f04f 33ff 	mov.w	r3, #4294967295
    6b0e:	f04f 32ff 	mov.w	r2, #4294967295
    6b12:	f101 00c4 	add.w	r0, r1, #196	; 0xc4
    6b16:	f01e fa8d 	bl	25034 <z_impl_k_sem_take>
	const struct mcp2515_config *dev_cfg = DEV_CFG(dev);
    6b1a:	6863      	ldr	r3, [r4, #4]
	struct mcp2515_data *dev_data = DEV_DATA(dev);
    6b1c:	f8d4 900c 	ldr.w	r9, [r4, #12]
	const struct mcp2515_config *dev_cfg = DEV_CFG(dev);
    6b20:	9302      	str	r3, [sp, #8]
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANINTF,
    6b22:	212c      	movs	r1, #44	; 0x2c
    6b24:	2301      	movs	r3, #1
    6b26:	f10d 0217 	add.w	r2, sp, #23
    6b2a:	68e0      	ldr	r0, [r4, #12]
    6b2c:	f021 fcf9 	bl	28522 <mcp2515_cmd_read_reg.isra.3>
		if (ret != 0) {
    6b30:	4601      	mov	r1, r0
    6b32:	b128      	cbz	r0, 6b40 <mcp2515_int_thread+0x50>
			LOG_ERR("Couldn't read INTF register %d", ret);
    6b34:	4602      	mov	r2, r0
    6b36:	2145      	movs	r1, #69	; 0x45
    6b38:	484d      	ldr	r0, [pc, #308]	; (6c70 <mcp2515_int_thread+0x180>)
    6b3a:	f020 feca 	bl	278d2 <printk>
			continue;
    6b3e:	e7f0      	b.n	6b22 <mcp2515_int_thread+0x32>
		if (canintf == 0) {
    6b40:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6b44:	2b00      	cmp	r3, #0
    6b46:	d0df      	beq.n	6b08 <mcp2515_int_thread+0x18>
		if (canintf & MCP2515_CANINTF_RX0IF) {
    6b48:	f013 0f01 	tst.w	r3, #1
    6b4c:	ad0a      	add	r5, sp, #40	; 0x28
    6b4e:	d012      	beq.n	6b76 <mcp2515_int_thread+0x86>
	mcp2515_cmd_read_rx_buffer(dev, nm, rx_frame, sizeof(rx_frame));
    6b50:	aa06      	add	r2, sp, #24
    6b52:	f104 000c 	add.w	r0, r4, #12
    6b56:	f7ff ff17 	bl	6988 <mcp2515_cmd_read_rx_buffer.isra.7.constprop.19>
	mcp2515_convert_mcp2515frame_to_zcanframe(rx_frame, &msg);
    6b5a:	4629      	mov	r1, r5
    6b5c:	a806      	add	r0, sp, #24
    6b5e:	f021 fc31 	bl	283c4 <mcp2515_convert_mcp2515frame_to_zcanframe>
	mcp2515_rx_filter(dev, &msg);
    6b62:	4629      	mov	r1, r5
    6b64:	68e0      	ldr	r0, [r4, #12]
    6b66:	f021 fc78 	bl	2845a <mcp2515_rx_filter.isra.4>
			canintf &= ~MCP2515_CANINTF_RX0IF;
    6b6a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6b6e:	f023 0301 	bic.w	r3, r3, #1
    6b72:	f88d 3017 	strb.w	r3, [sp, #23]
		if (canintf & MCP2515_CANINTF_RX1IF) {
    6b76:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6b7a:	079f      	lsls	r7, r3, #30
    6b7c:	d513      	bpl.n	6ba6 <mcp2515_int_thread+0xb6>
	mcp2515_cmd_read_rx_buffer(dev, nm, rx_frame, sizeof(rx_frame));
    6b7e:	aa06      	add	r2, sp, #24
    6b80:	2102      	movs	r1, #2
    6b82:	f104 000c 	add.w	r0, r4, #12
    6b86:	f7ff feff 	bl	6988 <mcp2515_cmd_read_rx_buffer.isra.7.constprop.19>
	mcp2515_convert_mcp2515frame_to_zcanframe(rx_frame, &msg);
    6b8a:	4629      	mov	r1, r5
    6b8c:	a806      	add	r0, sp, #24
    6b8e:	f021 fc19 	bl	283c4 <mcp2515_convert_mcp2515frame_to_zcanframe>
	mcp2515_rx_filter(dev, &msg);
    6b92:	4629      	mov	r1, r5
    6b94:	68e0      	ldr	r0, [r4, #12]
    6b96:	f021 fc60 	bl	2845a <mcp2515_rx_filter.isra.4>
			canintf &= ~MCP2515_CANINTF_RX1IF;
    6b9a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6b9e:	f023 0302 	bic.w	r3, r3, #2
    6ba2:	f88d 3017 	strb.w	r3, [sp, #23]
		if (canintf & MCP2515_CANINTF_TX0IF) {
    6ba6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6baa:	075e      	lsls	r6, r3, #29
    6bac:	d503      	bpl.n	6bb6 <mcp2515_int_thread+0xc6>
			mcp2515_tx_done(dev, 0);
    6bae:	2100      	movs	r1, #0
    6bb0:	68e0      	ldr	r0, [r4, #12]
    6bb2:	f021 fcec 	bl	2858e <mcp2515_tx_done.isra.8>
		if (canintf & MCP2515_CANINTF_TX1IF) {
    6bb6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6bba:	0718      	lsls	r0, r3, #28
    6bbc:	d503      	bpl.n	6bc6 <mcp2515_int_thread+0xd6>
			mcp2515_tx_done(dev, 1);
    6bbe:	2101      	movs	r1, #1
    6bc0:	68e0      	ldr	r0, [r4, #12]
    6bc2:	f021 fce4 	bl	2858e <mcp2515_tx_done.isra.8>
		if (canintf & MCP2515_CANINTF_TX2IF) {
    6bc6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6bca:	06da      	lsls	r2, r3, #27
    6bcc:	d503      	bpl.n	6bd6 <mcp2515_int_thread+0xe6>
			mcp2515_tx_done(dev, 2);
    6bce:	2102      	movs	r1, #2
    6bd0:	68e0      	ldr	r0, [r4, #12]
    6bd2:	f021 fcdc 	bl	2858e <mcp2515_tx_done.isra.8>
		if (canintf & MCP2515_CANINTF_ERRIF) {
    6bd6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6bda:	069b      	lsls	r3, r3, #26
    6bdc:	d512      	bpl.n	6c04 <mcp2515_int_thread+0x114>
	struct mcp2515_data *dev_data = DEV_DATA(dev);
    6bde:	68e7      	ldr	r7, [r4, #12]
	can_state_change_isr_t state_change_isr = dev_data->state_change_isr;
    6be0:	f8d7 61ac 	ldr.w	r6, [r7, #428]	; 0x1ac
	state = mcp2515_get_state(dev, state_change_isr ? &err_cnt : NULL);
    6be4:	2e00      	cmp	r6, #0
    6be6:	bf14      	ite	ne
    6be8:	4629      	movne	r1, r5
    6bea:	2100      	moveq	r1, #0
    6bec:	4620      	mov	r0, r4
    6bee:	f7ff ff49 	bl	6a84 <mcp2515_get_state>
	if (state_change_isr && dev_data->old_state != state) {
    6bf2:	b13e      	cbz	r6, 6c04 <mcp2515_int_thread+0x114>
    6bf4:	f897 21c4 	ldrb.w	r2, [r7, #452]	; 0x1c4
    6bf8:	4282      	cmp	r2, r0
    6bfa:	d003      	beq.n	6c04 <mcp2515_int_thread+0x114>
		dev_data->old_state = state;
    6bfc:	f887 01c4 	strb.w	r0, [r7, #452]	; 0x1c4
		state_change_isr(state, err_cnt);
    6c00:	990a      	ldr	r1, [sp, #40]	; 0x28
    6c02:	47b0      	blx	r6
		if (canintf != 0) {
    6c04:	f89d 2017 	ldrb.w	r2, [sp, #23]
    6c08:	b12a      	cbz	r2, 6c16 <mcp2515_int_thread+0x126>
			mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANINTF,
    6c0a:	43d3      	mvns	r3, r2
    6c0c:	b2db      	uxtb	r3, r3
    6c0e:	212c      	movs	r1, #44	; 0x2c
    6c10:	68e0      	ldr	r0, [r4, #12]
    6c12:	f021 fce8 	bl	285e6 <mcp2515_cmd_bit_modify.isra.1>
    6c16:	9b02      	ldr	r3, [sp, #8]
		ret = gpio_pin_get(dev_data->int_gpio, dev_cfg->int_pin);
    6c18:	f8d9 701c 	ldr.w	r7, [r9, #28]
    6c1c:	7c5b      	ldrb	r3, [r3, #17]
    6c1e:	2601      	movs	r6, #1
    6c20:	409e      	lsls	r6, r3
    6c22:	687b      	ldr	r3, [r7, #4]
    6c24:	681b      	ldr	r3, [r3, #0]
    6c26:	421e      	tst	r6, r3
    6c28:	d10a      	bne.n	6c40 <mcp2515_int_thread+0x150>
    6c2a:	4641      	mov	r1, r8
    6c2c:	4658      	mov	r0, fp
    6c2e:	f240 329f 	movw	r2, #927	; 0x39f
    6c32:	f020 fe4e 	bl	278d2 <printk>
    6c36:	f240 319f 	movw	r1, #927	; 0x39f
    6c3a:	4640      	mov	r0, r8
    6c3c:	f021 f8c2 	bl	27dc4 <assert_post_action>
	const struct gpio_driver_data *const data =
    6c40:	68fb      	ldr	r3, [r7, #12]
    6c42:	9303      	str	r3, [sp, #12]
	return api->port_get_raw(port, value);
    6c44:	68ba      	ldr	r2, [r7, #8]
    6c46:	4629      	mov	r1, r5
    6c48:	6852      	ldr	r2, [r2, #4]
    6c4a:	4638      	mov	r0, r7
    6c4c:	4790      	blx	r2
	if (ret == 0) {
    6c4e:	2800      	cmp	r0, #0
    6c50:	d107      	bne.n	6c62 <mcp2515_int_thread+0x172>
		*value ^= data->invert;
    6c52:	9b03      	ldr	r3, [sp, #12]
    6c54:	681a      	ldr	r2, [r3, #0]
    6c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6c58:	4053      	eors	r3, r2
		} else if (ret == 0) {
    6c5a:	4233      	tst	r3, r6
    6c5c:	f47f af61 	bne.w	6b22 <mcp2515_int_thread+0x32>
    6c60:	e752      	b.n	6b08 <mcp2515_int_thread+0x18>
		if (ret < 0) {
    6c62:	f6bf af5e 	bge.w	6b22 <mcp2515_int_thread+0x32>
			LOG_ERR("Couldn't read INT pin");
    6c66:	2145      	movs	r1, #69	; 0x45
    6c68:	4650      	mov	r0, sl
    6c6a:	f020 fe32 	bl	278d2 <printk>
    6c6e:	e758      	b.n	6b22 <mcp2515_int_thread+0x32>
    6c70:	00030b5e 	.word	0x00030b5e
    6c74:	00030b82 	.word	0x00030b82
    6c78:	00030655 	.word	0x00030655
    6c7c:	0003067f 	.word	0x0003067f

00006c80 <mcp2515_send>:
{
    6c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c84:	460f      	mov	r7, r1
	if (msg->dlc > CAN_MAX_DLC) {
    6c86:	7909      	ldrb	r1, [r1, #4]
	struct mcp2515_data *dev_data = DEV_DATA(dev);
    6c88:	68c5      	ldr	r5, [r0, #12]
	if (msg->dlc > CAN_MAX_DLC) {
    6c8a:	2908      	cmp	r1, #8
{
    6c8c:	b08d      	sub	sp, #52	; 0x34
    6c8e:	4681      	mov	r9, r0
	if (msg->dlc > CAN_MAX_DLC) {
    6c90:	d90b      	bls.n	6caa <mcp2515_send+0x2a>
		LOG_ERR("DLC of %d exceeds maximum (%d)",
    6c92:	460a      	mov	r2, r1
    6c94:	2308      	movs	r3, #8
    6c96:	2145      	movs	r1, #69	; 0x45
    6c98:	4859      	ldr	r0, [pc, #356]	; (6e00 <mcp2515_send+0x180>)
    6c9a:	f020 fe1a 	bl	278d2 <printk>
		return CAN_TX_EINVAL;
    6c9e:	f06f 0615 	mvn.w	r6, #21
}
    6ca2:	4630      	mov	r0, r6
    6ca4:	b00d      	add	sp, #52	; 0x34
    6ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6caa:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
    6cae:	f01e f9c1 	bl	25034 <z_impl_k_sem_take>
	if (k_sem_take(&dev_data->tx_sem, timeout) != 0) {
    6cb2:	4606      	mov	r6, r0
    6cb4:	2800      	cmp	r0, #0
    6cb6:	f040 80a0 	bne.w	6dfa <mcp2515_send+0x17a>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    6cba:	f505 78d8 	add.w	r8, r5, #432	; 0x1b0
    6cbe:	f04f 33ff 	mov.w	r3, #4294967295
    6cc2:	f04f 32ff 	mov.w	r2, #4294967295
    6cc6:	4640      	mov	r0, r8
    6cc8:	f021 fbc5 	bl	28456 <k_mutex_lock.constprop.20>
		if ((BIT(tx_idx) & dev_data->tx_busy_map) == 0) {
    6ccc:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    6cd0:	f013 0401 	ands.w	r4, r3, #1
    6cd4:	d004      	beq.n	6ce0 <mcp2515_send+0x60>
    6cd6:	079c      	lsls	r4, r3, #30
    6cd8:	d513      	bpl.n	6d02 <mcp2515_send+0x82>
    6cda:	0758      	lsls	r0, r3, #29
    6cdc:	d413      	bmi.n	6d06 <mcp2515_send+0x86>
	for (; tx_idx < MCP2515_TX_CNT; tx_idx++) {
    6cde:	2402      	movs	r4, #2
			dev_data->tx_busy_map |= BIT(tx_idx);
    6ce0:	2201      	movs	r2, #1
    6ce2:	40a2      	lsls	r2, r4
    6ce4:	4313      	orrs	r3, r2
    6ce6:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	k_mutex_unlock(&dev_data->mutex);
    6cea:	4640      	mov	r0, r8
    6cec:	f021 fbaf 	bl	2844e <k_mutex_unlock>
	if (tx_idx == MCP2515_TX_CNT) {
    6cf0:	2c03      	cmp	r4, #3
    6cf2:	d10a      	bne.n	6d0a <mcp2515_send+0x8a>
		LOG_WRN("no free tx slot available");
    6cf4:	2157      	movs	r1, #87	; 0x57
    6cf6:	4843      	ldr	r0, [pc, #268]	; (6e04 <mcp2515_send+0x184>)
    6cf8:	f020 fdeb 	bl	278d2 <printk>
		return CAN_TX_ERR;
    6cfc:	f06f 0601 	mvn.w	r6, #1
    6d00:	e7cf      	b.n	6ca2 <mcp2515_send+0x22>
	for (; tx_idx < MCP2515_TX_CNT; tx_idx++) {
    6d02:	2401      	movs	r4, #1
    6d04:	e7ec      	b.n	6ce0 <mcp2515_send+0x60>
    6d06:	2403      	movs	r4, #3
    6d08:	e7ef      	b.n	6cea <mcp2515_send+0x6a>
	dev_data->tx_cb[tx_idx].cb = callback;
    6d0a:	eb05 1344 	add.w	r3, r5, r4, lsl #5
    6d0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6d10:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	dev_data->tx_cb[tx_idx].cb_arg = callback_arg;
    6d14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    6d16:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if (source->id_type == CAN_STANDARD_IDENTIFIER) {
    6d1a:	78fa      	ldrb	r2, [r7, #3]
    6d1c:	683b      	ldr	r3, [r7, #0]
    6d1e:	0611      	lsls	r1, r2, #24
    6d20:	f3c3 031c 	ubfx	r3, r3, #0, #29
    6d24:	d457      	bmi.n	6dd6 <mcp2515_send+0x156>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 3;
    6d26:	10d9      	asrs	r1, r3, #3
			(source->id & 0x07) << 5;
    6d28:	015b      	lsls	r3, r3, #5
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 3;
    6d2a:	f88d 1010 	strb.w	r1, [sp, #16]
		target[MCP2515_FRAME_OFFSET_SIDL] =
    6d2e:	f88d 3011 	strb.w	r3, [sp, #17]
	dlc = (source->dlc) & 0x0F;
    6d32:	793b      	ldrb	r3, [r7, #4]
	rtr = (source->rtr == CAN_REMOTEREQUEST) ? BIT(6) : 0;
    6d34:	f002 0240 	and.w	r2, r2, #64	; 0x40
	dlc = (source->dlc) & 0x0F;
    6d38:	f003 010f 	and.w	r1, r3, #15
	target[MCP2515_FRAME_OFFSET_DLC] = rtr | dlc;
    6d3c:	430a      	orrs	r2, r1
    6d3e:	f88d 2014 	strb.w	r2, [sp, #20]
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
    6d42:	a905      	add	r1, sp, #20
    6d44:	f107 0208 	add.w	r2, r7, #8
    6d48:	3710      	adds	r7, #16
			source->data[data_idx];
    6d4a:	f812 0b01 	ldrb.w	r0, [r2], #1
		target[MCP2515_FRAME_OFFSET_D0 + data_idx] =
    6d4e:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
    6d52:	4297      	cmp	r7, r2
    6d54:	d1f9      	bne.n	6d4a <mcp2515_send+0xca>
	abc = 2 * tx_idx;
    6d56:	0062      	lsls	r2, r4, #1
	len = sizeof(tx_frame) - CAN_MAX_DLC + msg->dlc;
    6d58:	3305      	adds	r3, #5
	uint8_t cmd_buf[] = { MCP2515_OPCODE_LOAD_TX_BUFFER | abc };
    6d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	struct spi_buf tx_buf[] = {
    6d5e:	b2db      	uxtb	r3, r3
	return spi_write(DEV_DATA(dev)->spi, &DEV_DATA(dev)->spi_cfg, &tx);
    6d60:	f8d9 100c 	ldr.w	r1, [r9, #12]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_LOAD_TX_BUFFER | abc };
    6d64:	f88d 2004 	strb.w	r2, [sp, #4]
	struct spi_buf tx_buf[] = {
    6d68:	af01      	add	r7, sp, #4
    6d6a:	f04f 0801 	mov.w	r8, #1
    6d6e:	aa04      	add	r2, sp, #16
    6d70:	930b      	str	r3, [sp, #44]	; 0x2c
	const struct spi_buf_set tx = {
    6d72:	f10d 0a20 	add.w	sl, sp, #32
    6d76:	2302      	movs	r3, #2
	struct spi_buf tx_buf[] = {
    6d78:	9708      	str	r7, [sp, #32]
    6d7a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    6d7e:	920a      	str	r2, [sp, #40]	; 0x28
	const struct spi_buf_set tx = {
    6d80:	f8cd a008 	str.w	sl, [sp, #8]
    6d84:	9303      	str	r3, [sp, #12]
	return spi_write(DEV_DATA(dev)->spi, &DEV_DATA(dev)->spi_cfg, &tx);
    6d86:	f851 0b04 	ldr.w	r0, [r1], #4
    6d8a:	f10d 0b08 	add.w	fp, sp, #8
    6d8e:	2300      	movs	r3, #0
    6d90:	465a      	mov	r2, fp
    6d92:	f021 fb11 	bl	283b8 <z_impl_spi_transceive>
	nnn = BIT(tx_idx);
    6d96:	fa08 f304 	lsl.w	r3, r8, r4
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RTS | nnn };
    6d9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
	return spi_write(DEV_DATA(dev)->spi, &DEV_DATA(dev)->spi_cfg, &tx);
    6d9e:	f8d9 100c 	ldr.w	r1, [r9, #12]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RTS | nnn };
    6da2:	f88d 3004 	strb.w	r3, [sp, #4]
	struct spi_buf tx_buf[] = {
    6da6:	e9cd 7802 	strd	r7, r8, [sp, #8]
	const struct spi_buf_set tx = {
    6daa:	e9cd b808 	strd	fp, r8, [sp, #32]
	return spi_write(DEV_DATA(dev)->spi, &DEV_DATA(dev)->spi_cfg, &tx);
    6dae:	f851 0b04 	ldr.w	r0, [r1], #4
    6db2:	2300      	movs	r3, #0
    6db4:	4652      	mov	r2, sl
    6db6:	f021 faff 	bl	283b8 <z_impl_spi_transceive>
	if (callback == NULL) {
    6dba:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6dbc:	2b00      	cmp	r3, #0
    6dbe:	f47f af70 	bne.w	6ca2 <mcp2515_send+0x22>
		k_sem_take(&dev_data->tx_cb[tx_idx].sem, K_FOREVER);
    6dc2:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    6dc6:	f04f 32ff 	mov.w	r2, #4294967295
    6dca:	f04f 33ff 	mov.w	r3, #4294967295
    6dce:	30f4      	adds	r0, #244	; 0xf4
    6dd0:	f01e f930 	bl	25034 <z_impl_k_sem_take>
    6dd4:	e765      	b.n	6ca2 <mcp2515_send+0x22>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 21;
    6dd6:	1559      	asrs	r1, r3, #21
    6dd8:	f88d 1010 	strb.w	r1, [sp, #16]
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
    6ddc:	1498      	asrs	r0, r3, #18
			((source->id >> 16) & 0x03);
    6dde:	f3c3 4101 	ubfx	r1, r3, #16, #2
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
    6de2:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    6de6:	f041 0108 	orr.w	r1, r1, #8
		target[MCP2515_FRAME_OFFSET_SIDL] =
    6dea:	f88d 1011 	strb.w	r1, [sp, #17]
		target[MCP2515_FRAME_OFFSET_EID8] = source->id >> 8;
    6dee:	1219      	asrs	r1, r3, #8
    6df0:	f88d 1012 	strb.w	r1, [sp, #18]
		target[MCP2515_FRAME_OFFSET_EID0] = source->id;
    6df4:	f88d 3013 	strb.w	r3, [sp, #19]
    6df8:	e79b      	b.n	6d32 <mcp2515_send+0xb2>
		return CAN_TIMEOUT;
    6dfa:	f04f 36ff 	mov.w	r6, #4294967295
    6dfe:	e750      	b.n	6ca2 <mcp2515_send+0x22>
    6e00:	00030b9d 	.word	0x00030b9d
    6e04:	00030bc1 	.word	0x00030bc1

00006e08 <mcp2515_init>:
	}
};


static int mcp2515_init(const struct device *dev)
{
    6e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct mcp2515_config *dev_cfg = DEV_CFG(dev);
	struct mcp2515_data *dev_data = DEV_DATA(dev);
    6e0c:	68c4      	ldr	r4, [r0, #12]
	const struct mcp2515_config *dev_cfg = DEV_CFG(dev);
    6e0e:	6845      	ldr	r5, [r0, #4]
{
    6e10:	b08c      	sub	sp, #48	; 0x30
    6e12:	4606      	mov	r6, r0
	int ret;
	struct can_timing timing;

	k_sem_init(&dev_data->int_sem, 0, 1);
    6e14:	2201      	movs	r2, #1
    6e16:	2100      	movs	r1, #0
    6e18:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    6e1c:	f021 fb19 	bl	28452 <k_sem_init>
	return z_impl_k_mutex_init(mutex);
    6e20:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
    6e24:	f027 f894 	bl	2df50 <z_impl_k_mutex_init>
	k_mutex_init(&dev_data->mutex);
	k_sem_init(&dev_data->tx_sem, MCP2515_TX_CNT, MCP2515_TX_CNT);
    6e28:	2203      	movs	r2, #3
    6e2a:	4611      	mov	r1, r2
    6e2c:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
    6e30:	f021 fb0f 	bl	28452 <k_sem_init>
	k_sem_init(&dev_data->tx_cb[0].sem, 0, 1);
    6e34:	2201      	movs	r2, #1
    6e36:	2100      	movs	r1, #0
    6e38:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    6e3c:	f021 fb09 	bl	28452 <k_sem_init>
	k_sem_init(&dev_data->tx_cb[1].sem, 0, 1);
    6e40:	2201      	movs	r2, #1
    6e42:	2100      	movs	r1, #0
    6e44:	f504 708a 	add.w	r0, r4, #276	; 0x114
    6e48:	f021 fb03 	bl	28452 <k_sem_init>
	k_sem_init(&dev_data->tx_cb[2].sem, 0, 1);
    6e4c:	2201      	movs	r2, #1
    6e4e:	2100      	movs	r1, #0
    6e50:	f504 709a 	add.w	r0, r4, #308	; 0x134
    6e54:	f021 fafd 	bl	28452 <k_sem_init>

	/* SPI config */
	dev_data->spi_cfg.operation = SPI_WORD_SET(8);
    6e58:	f44f 7380 	mov.w	r3, #256	; 0x100
    6e5c:	8123      	strh	r3, [r4, #8]
	dev_data->spi_cfg.frequency = dev_cfg->spi_freq;
    6e5e:	68eb      	ldr	r3, [r5, #12]
    6e60:	6063      	str	r3, [r4, #4]
	dev_data->spi_cfg.slave = dev_cfg->spi_slave;
    6e62:	7c2b      	ldrb	r3, [r5, #16]
    6e64:	8163      	strh	r3, [r4, #10]

	dev_data->spi = device_get_binding(dev_cfg->spi_port);
    6e66:	6828      	ldr	r0, [r5, #0]
    6e68:	f01c fa64 	bl	23334 <z_impl_device_get_binding>
    6e6c:	6020      	str	r0, [r4, #0]
	if (!dev_data->spi) {
    6e6e:	b938      	cbnz	r0, 6e80 <mcp2515_init+0x78>
		LOG_ERR("SPI master port %s not found", dev_cfg->spi_port);
    6e70:	682a      	ldr	r2, [r5, #0]
    6e72:	4862      	ldr	r0, [pc, #392]	; (6ffc <mcp2515_init+0x1f4>)
    6e74:	2145      	movs	r1, #69	; 0x45
	}

	/* Initialize interrupt handling  */
	dev_data->int_gpio = device_get_binding(dev_cfg->int_port);
	if (dev_data->int_gpio == NULL) {
		LOG_ERR("GPIO port %s not found", dev_cfg->int_port);
    6e76:	f020 fd2c 	bl	278d2 <printk>
		return -EINVAL;
    6e7a:	f06f 0015 	mvn.w	r0, #21
    6e7e:	e00a      	b.n	6e96 <mcp2515_init+0x8e>
		device_get_binding(dev_cfg->spi_cs_port);
    6e80:	68a8      	ldr	r0, [r5, #8]
    6e82:	f01c fa57 	bl	23334 <z_impl_device_get_binding>
	dev_data->spi_cs_ctrl.gpio_dev =
    6e86:	6120      	str	r0, [r4, #16]
	if (!dev_data->spi_cs_ctrl.gpio_dev) {
    6e88:	b940      	cbnz	r0, 6e9c <mcp2515_init+0x94>
		LOG_ERR("Unable to get GPIO SPI CS device");
    6e8a:	485d      	ldr	r0, [pc, #372]	; (7000 <mcp2515_init+0x1f8>)
    6e8c:	2145      	movs	r1, #69	; 0x45
    6e8e:	f020 fd20 	bl	278d2 <printk>
		return -ENODEV;
    6e92:	f06f 0012 	mvn.w	r0, #18
	}

	ret = can_set_mode(dev, CAN_NORMAL_MODE);

	return ret;
}
    6e96:	b00c      	add	sp, #48	; 0x30
    6e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	dev_data->spi_cs_ctrl.gpio_pin = dev_cfg->spi_cs_pin;
    6e9c:	792b      	ldrb	r3, [r5, #4]
    6e9e:	7623      	strb	r3, [r4, #24]
	dev_data->spi_cs_ctrl.gpio_dt_flags = dev_cfg->spi_cs_flags;
    6ea0:	796b      	ldrb	r3, [r5, #5]
    6ea2:	7663      	strb	r3, [r4, #25]
	dev_data->spi_cs_ctrl.delay = 0U;
    6ea4:	2300      	movs	r3, #0
    6ea6:	6163      	str	r3, [r4, #20]
	dev_data->spi_cfg.cs = &dev_data->spi_cs_ctrl;
    6ea8:	f104 0310 	add.w	r3, r4, #16
    6eac:	60e3      	str	r3, [r4, #12]
	if (mcp2515_cmd_soft_reset(dev)) {
    6eae:	68f0      	ldr	r0, [r6, #12]
    6eb0:	f021 fb58 	bl	28564 <mcp2515_cmd_soft_reset.isra.0>
    6eb4:	b130      	cbz	r0, 6ec4 <mcp2515_init+0xbc>
		LOG_ERR("Soft-reset failed");
    6eb6:	4853      	ldr	r0, [pc, #332]	; (7004 <mcp2515_init+0x1fc>)
    6eb8:	2145      	movs	r1, #69	; 0x45
    6eba:	f020 fd0a 	bl	278d2 <printk>
		return -EIO;
    6ebe:	f06f 0004 	mvn.w	r0, #4
    6ec2:	e7e8      	b.n	6e96 <mcp2515_init+0x8e>
	dev_data->int_gpio = device_get_binding(dev_cfg->int_port);
    6ec4:	6968      	ldr	r0, [r5, #20]
    6ec6:	f01c fa35 	bl	23334 <z_impl_device_get_binding>
    6eca:	4607      	mov	r7, r0
    6ecc:	61e0      	str	r0, [r4, #28]
	if (dev_data->int_gpio == NULL) {
    6ece:	b918      	cbnz	r0, 6ed8 <mcp2515_init+0xd0>
		LOG_ERR("GPIO port %s not found", dev_cfg->int_port);
    6ed0:	696a      	ldr	r2, [r5, #20]
    6ed2:	484d      	ldr	r0, [pc, #308]	; (7008 <mcp2515_init+0x200>)
    6ed4:	2145      	movs	r1, #69	; 0x45
    6ed6:	e7ce      	b.n	6e76 <mcp2515_init+0x6e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    6ed8:	6843      	ldr	r3, [r0, #4]
	if (gpio_pin_configure(dev_data->int_gpio, dev_cfg->int_pin,
    6eda:	f895 a011 	ldrb.w	sl, [r5, #17]
    6ede:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
    6ee0:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    6ee4:	f04f 0801 	mov.w	r8, #1
    6ee8:	fa08 f80a 	lsl.w	r8, r8, sl
    6eec:	ea18 0f03 	tst.w	r8, r3
    6ef0:	d10a      	bne.n	6f08 <mcp2515_init+0x100>
    6ef2:	4946      	ldr	r1, [pc, #280]	; (700c <mcp2515_init+0x204>)
    6ef4:	4846      	ldr	r0, [pc, #280]	; (7010 <mcp2515_init+0x208>)
    6ef6:	f240 2245 	movw	r2, #581	; 0x245
    6efa:	f020 fcea 	bl	278d2 <printk>
    6efe:	f240 2145 	movw	r1, #581	; 0x245
    6f02:	4842      	ldr	r0, [pc, #264]	; (700c <mcp2515_init+0x204>)
    6f04:	f020 ff5e 	bl	27dc4 <assert_post_action>
	return api->pin_configure(port, pin, flags);
    6f08:	68bb      	ldr	r3, [r7, #8]
    6f0a:	f240 1201 	movw	r2, #257	; 0x101
    6f0e:	681b      	ldr	r3, [r3, #0]
    6f10:	4651      	mov	r1, sl
    6f12:	4638      	mov	r0, r7
    6f14:	4798      	blx	r3
	if (ret != 0) {
    6f16:	2800      	cmp	r0, #0
    6f18:	d16b      	bne.n	6ff2 <mcp2515_init+0x1ea>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6f1a:	f8d9 3000 	ldr.w	r3, [r9]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    6f1e:	483d      	ldr	r0, [pc, #244]	; (7014 <mcp2515_init+0x20c>)
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6f20:	ea43 0308 	orr.w	r3, r3, r8
    6f24:	f8c9 3000 	str.w	r3, [r9]
			   BIT(dev_cfg->int_pin));
    6f28:	7c6b      	ldrb	r3, [r5, #17]
    6f2a:	2201      	movs	r2, #1
    6f2c:	fa02 f303 	lsl.w	r3, r2, r3
	callback->pin_mask = pin_mask;
    6f30:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
	if (gpio_add_callback(dev_data->int_gpio, &(dev_data->int_gpio_cb))) {
    6f34:	69e0      	ldr	r0, [r4, #28]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    6f36:	6883      	ldr	r3, [r0, #8]
    6f38:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&(dev_data->int_gpio_cb), mcp2515_int_gpio_callback,
    6f3a:	f104 0120 	add.w	r1, r4, #32
    6f3e:	2b00      	cmp	r3, #0
    6f40:	d09b      	beq.n	6e7a <mcp2515_init+0x72>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    6f42:	4798      	blx	r3
	if (gpio_add_callback(dev_data->int_gpio, &(dev_data->int_gpio_cb))) {
    6f44:	2800      	cmp	r0, #0
    6f46:	d198      	bne.n	6e7a <mcp2515_init+0x72>
	if (gpio_pin_interrupt_configure(dev_data->int_gpio, dev_cfg->int_pin,
    6f48:	69e0      	ldr	r0, [r4, #28]
    6f4a:	7c69      	ldrb	r1, [r5, #17]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    6f4c:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
    6f50:	f7ff fcac 	bl	68ac <z_impl_gpio_pin_interrupt_configure>
    6f54:	4607      	mov	r7, r0
    6f56:	2800      	cmp	r0, #0
    6f58:	d18f      	bne.n	6e7a <mcp2515_init+0x72>
	k_thread_create(&dev_data->int_thread, dev_data->int_thread_stack,
    6f5a:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
    6f5e:	f8d4 c0c0 	ldr.w	ip, [r4, #192]	; 0xc0
    6f62:	3b10      	subs	r3, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6f64:	2000      	movs	r0, #0
    6f66:	2100      	movs	r1, #0
    6f68:	e9cd 0106 	strd	r0, r1, [sp, #24]
    6f6c:	e9cd 3703 	strd	r3, r7, [sp, #12]
    6f70:	4661      	mov	r1, ip
    6f72:	4b29      	ldr	r3, [pc, #164]	; (7018 <mcp2515_init+0x210>)
    6f74:	9600      	str	r6, [sp, #0]
    6f76:	e9cd 7701 	strd	r7, r7, [sp, #4]
    6f7a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    6f7e:	f01e f94d 	bl	2521c <z_impl_k_thread_create>
__ssp_bos_icheck3(memset, void *, int)
    6f82:	2214      	movs	r2, #20
    6f84:	4639      	mov	r1, r7
    6f86:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
    6f8a:	f027 f9c9 	bl	2e320 <memset>
    6f8e:	2228      	movs	r2, #40	; 0x28
    6f90:	4639      	mov	r1, r7
    6f92:	f504 70c2 	add.w	r0, r4, #388	; 0x184
    6f96:	f027 f9c3 	bl	2e320 <memset>
	dev_data->old_state = CAN_ERROR_ACTIVE;
    6f9a:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
	timing.sjw = dev_cfg->tq_sjw;
    6f9e:	f895 3020 	ldrb.w	r3, [r5, #32]
    6fa2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		timing.prop_seg = dev_cfg->tq_prop;
    6fa6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    6faa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
		timing.phase_seg1 = dev_cfg->tq_bs1;
    6fae:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
    6fb2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		ret = can_calc_prescaler(dev, &timing, dev_cfg->bus_speed);
    6fb6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
		timing.phase_seg2 = dev_cfg->tq_bs2;
    6fb8:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    6fbc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		ret = can_calc_prescaler(dev, &timing, dev_cfg->bus_speed);
    6fc0:	a909      	add	r1, sp, #36	; 0x24
    6fc2:	4630      	mov	r0, r6
    6fc4:	f021 f9d8 	bl	28378 <can_calc_prescaler>
		if (ret) {
    6fc8:	4602      	mov	r2, r0
    6fca:	b118      	cbz	r0, 6fd4 <mcp2515_init+0x1cc>
			LOG_WRN("Bitrate error: %d", ret);
    6fcc:	2157      	movs	r1, #87	; 0x57
    6fce:	4813      	ldr	r0, [pc, #76]	; (701c <mcp2515_init+0x214>)
    6fd0:	f020 fc7f 	bl	278d2 <printk>
	return api->set_timing(dev, timing, timing_data);
    6fd4:	68b3      	ldr	r3, [r6, #8]
    6fd6:	2200      	movs	r2, #0
    6fd8:	685b      	ldr	r3, [r3, #4]
    6fda:	a909      	add	r1, sp, #36	; 0x24
    6fdc:	4630      	mov	r0, r6
    6fde:	4798      	blx	r3
	if (ret) {
    6fe0:	2800      	cmp	r0, #0
    6fe2:	f47f af58 	bne.w	6e96 <mcp2515_init+0x8e>
	return api->set_mode(dev, mode);
    6fe6:	68b3      	ldr	r3, [r6, #8]
    6fe8:	4601      	mov	r1, r0
    6fea:	681b      	ldr	r3, [r3, #0]
    6fec:	4630      	mov	r0, r6
    6fee:	4798      	blx	r3
	return ret;
    6ff0:	e751      	b.n	6e96 <mcp2515_init+0x8e>
		LOG_ERR("Unable to configure GPIO pin %u", dev_cfg->int_pin);
    6ff2:	7c6a      	ldrb	r2, [r5, #17]
    6ff4:	480a      	ldr	r0, [pc, #40]	; (7020 <mcp2515_init+0x218>)
    6ff6:	2145      	movs	r1, #69	; 0x45
    6ff8:	e73d      	b.n	6e76 <mcp2515_init+0x6e>
    6ffa:	bf00      	nop
    6ffc:	00030aa7 	.word	0x00030aa7
    7000:	00030ac9 	.word	0x00030ac9
    7004:	00030aef 	.word	0x00030aef
    7008:	00030b06 	.word	0x00030b06
    700c:	00030655 	.word	0x00030655
    7010:	0003067f 	.word	0x0003067f
    7014:	0002851b 	.word	0x0002851b
    7018:	00006af1 	.word	0x00006af1
    701c:	00030b47 	.word	0x00030b47
    7020:	00030b22 	.word	0x00030b22

00007024 <mcp2515_set_timing>:
{
    7024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7028:	4606      	mov	r6, r0
    702a:	b089      	sub	sp, #36	; 0x24
	struct mcp2515_data *dev_data = DEV_DATA(dev);
    702c:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (!timing) {
    7030:	460c      	mov	r4, r1
    7032:	2900      	cmp	r1, #0
    7034:	f000 80e5 	beq.w	7202 <mcp2515_set_timing+0x1de>
	const uint8_t phseg1 = (timing->phase_seg1 - 1) << 3;
    7038:	790d      	ldrb	r5, [r1, #4]
	const uint8_t sjw = (timing->sjw - 1) << 6;
    703a:	880b      	ldrh	r3, [r1, #0]
	uint8_t cnf1 = sjw | brp;
    703c:	7a0f      	ldrb	r7, [r1, #8]
	const uint8_t phseg2 = (timing->phase_seg2 - 1);
    703e:	f891 9006 	ldrb.w	r9, [r1, #6]
	const uint8_t phseg1 = (timing->phase_seg1 - 1) << 3;
    7042:	1e6a      	subs	r2, r5, #1
	const uint8_t prseg = (timing->prop_seg - 1);
    7044:	788d      	ldrb	r5, [r1, #2]
	const uint8_t sjw = (timing->sjw - 1) << 6;
    7046:	3b01      	subs	r3, #1
	const uint8_t prseg = (timing->prop_seg - 1);
    7048:	3d01      	subs	r5, #1
	uint8_t cnf1 = sjw | brp;
    704a:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
	const uint8_t cnf2 = btlmode | sam | phseg1 | prseg;
    704e:	ea45 05c2 	orr.w	r5, r5, r2, lsl #3
	__ASSERT((timing->sjw >= 1) && (timing->sjw <= 4),
    7052:	b29b      	uxth	r3, r3
	const uint8_t cnf2 = btlmode | sam | phseg1 | prseg;
    7054:	f065 057f 	orn	r5, r5, #127	; 0x7f
	const uint8_t phseg2 = (timing->phase_seg2 - 1);
    7058:	f109 39ff 	add.w	r9, r9, #4294967295
	__ASSERT((timing->sjw >= 1) && (timing->sjw <= 4),
    705c:	2b03      	cmp	r3, #3
	uint8_t cnf1 = sjw | brp;
    705e:	b2ff      	uxtb	r7, r7
	const uint8_t cnf2 = btlmode | sam | phseg1 | prseg;
    7060:	b2ed      	uxtb	r5, r5
	const uint8_t phseg2 = (timing->phase_seg2 - 1);
    7062:	fa5f f989 	uxtb.w	r9, r9
	__ASSERT((timing->sjw >= 1) && (timing->sjw <= 4),
    7066:	d90a      	bls.n	707e <mcp2515_set_timing+0x5a>
    7068:	4967      	ldr	r1, [pc, #412]	; (7208 <mcp2515_set_timing+0x1e4>)
    706a:	4868      	ldr	r0, [pc, #416]	; (720c <mcp2515_set_timing+0x1e8>)
    706c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
    7070:	f020 fc2f 	bl	278d2 <printk>
    7074:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    7078:	4863      	ldr	r0, [pc, #396]	; (7208 <mcp2515_set_timing+0x1e4>)
    707a:	f020 fea3 	bl	27dc4 <assert_post_action>
	__ASSERT((timing->prop_seg >= 1) && (timing->prop_seg <= 8),
    707e:	8863      	ldrh	r3, [r4, #2]
    7080:	3b01      	subs	r3, #1
    7082:	2b07      	cmp	r3, #7
    7084:	d90a      	bls.n	709c <mcp2515_set_timing+0x78>
    7086:	4960      	ldr	r1, [pc, #384]	; (7208 <mcp2515_set_timing+0x1e4>)
    7088:	4860      	ldr	r0, [pc, #384]	; (720c <mcp2515_set_timing+0x1e8>)
    708a:	f44f 72b8 	mov.w	r2, #368	; 0x170
    708e:	f020 fc20 	bl	278d2 <printk>
    7092:	f44f 71b8 	mov.w	r1, #368	; 0x170
    7096:	485c      	ldr	r0, [pc, #368]	; (7208 <mcp2515_set_timing+0x1e4>)
    7098:	f020 fe94 	bl	27dc4 <assert_post_action>
	__ASSERT((timing->phase_seg1 >= 1) && (timing->phase_seg1 <= 8),
    709c:	88a3      	ldrh	r3, [r4, #4]
    709e:	3b01      	subs	r3, #1
    70a0:	2b07      	cmp	r3, #7
    70a2:	d90a      	bls.n	70ba <mcp2515_set_timing+0x96>
    70a4:	4958      	ldr	r1, [pc, #352]	; (7208 <mcp2515_set_timing+0x1e4>)
    70a6:	4859      	ldr	r0, [pc, #356]	; (720c <mcp2515_set_timing+0x1e8>)
    70a8:	f44f 72b9 	mov.w	r2, #370	; 0x172
    70ac:	f020 fc11 	bl	278d2 <printk>
    70b0:	f44f 71b9 	mov.w	r1, #370	; 0x172
    70b4:	4854      	ldr	r0, [pc, #336]	; (7208 <mcp2515_set_timing+0x1e4>)
    70b6:	f020 fe85 	bl	27dc4 <assert_post_action>
	__ASSERT((timing->phase_seg2 >= 2) && (timing->phase_seg2 <= 8),
    70ba:	88e3      	ldrh	r3, [r4, #6]
    70bc:	3b02      	subs	r3, #2
    70be:	2b06      	cmp	r3, #6
    70c0:	d90a      	bls.n	70d8 <mcp2515_set_timing+0xb4>
    70c2:	4951      	ldr	r1, [pc, #324]	; (7208 <mcp2515_set_timing+0x1e4>)
    70c4:	4851      	ldr	r0, [pc, #324]	; (720c <mcp2515_set_timing+0x1e8>)
    70c6:	f44f 72ba 	mov.w	r2, #372	; 0x174
    70ca:	f020 fc02 	bl	278d2 <printk>
    70ce:	f44f 71ba 	mov.w	r1, #372	; 0x174
    70d2:	484d      	ldr	r0, [pc, #308]	; (7208 <mcp2515_set_timing+0x1e4>)
    70d4:	f020 fe76 	bl	27dc4 <assert_post_action>
	__ASSERT(timing->prop_seg + timing->phase_seg1 >= timing->phase_seg2,
    70d8:	88a2      	ldrh	r2, [r4, #4]
    70da:	8863      	ldrh	r3, [r4, #2]
    70dc:	4413      	add	r3, r2
    70de:	88e2      	ldrh	r2, [r4, #6]
    70e0:	4293      	cmp	r3, r2
    70e2:	da0a      	bge.n	70fa <mcp2515_set_timing+0xd6>
    70e4:	4948      	ldr	r1, [pc, #288]	; (7208 <mcp2515_set_timing+0x1e4>)
    70e6:	4849      	ldr	r0, [pc, #292]	; (720c <mcp2515_set_timing+0x1e8>)
    70e8:	f44f 72bb 	mov.w	r2, #374	; 0x176
    70ec:	f020 fbf1 	bl	278d2 <printk>
    70f0:	f44f 71bb 	mov.w	r1, #374	; 0x176
    70f4:	4844      	ldr	r0, [pc, #272]	; (7208 <mcp2515_set_timing+0x1e4>)
    70f6:	f020 fe65 	bl	27dc4 <assert_post_action>
	__ASSERT(timing->phase_seg2 > timing->sjw, "BS2 > SJW");
    70fa:	88e2      	ldrh	r2, [r4, #6]
    70fc:	8823      	ldrh	r3, [r4, #0]
    70fe:	429a      	cmp	r2, r3
    7100:	d80a      	bhi.n	7118 <mcp2515_set_timing+0xf4>
    7102:	4941      	ldr	r1, [pc, #260]	; (7208 <mcp2515_set_timing+0x1e4>)
    7104:	4841      	ldr	r0, [pc, #260]	; (720c <mcp2515_set_timing+0x1e8>)
    7106:	f240 1277 	movw	r2, #375	; 0x177
    710a:	f020 fbe2 	bl	278d2 <printk>
    710e:	f240 1177 	movw	r1, #375	; 0x177
    7112:	483d      	ldr	r0, [pc, #244]	; (7208 <mcp2515_set_timing+0x1e4>)
    7114:	f020 fe56 	bl	27dc4 <assert_post_action>
	config_buf[3] = caninte;
    7118:	233f      	movs	r3, #63	; 0x3f
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    711a:	f508 78d8 	add.w	r8, r8, #432	; 0x1b0
	config_buf[3] = caninte;
    711e:	f88d 3007 	strb.w	r3, [sp, #7]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    7122:	f04f 32ff 	mov.w	r2, #4294967295
    7126:	f04f 33ff 	mov.w	r3, #4294967295
    712a:	4640      	mov	r0, r8
	config_buf[0] = cnf3;
    712c:	f88d 9004 	strb.w	r9, [sp, #4]
	config_buf[1] = cnf2;
    7130:	f88d 5005 	strb.w	r5, [sp, #5]
	config_buf[2] = cnf1;
    7134:	f88d 7006 	strb.w	r7, [sp, #6]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    7138:	f021 f98d 	bl	28456 <k_mutex_lock.constprop.20>
	return z_impl_k_usleep(us);
    713c:	2080      	movs	r0, #128	; 0x80
    713e:	f01d ff1b 	bl	24f78 <z_impl_k_usleep>
	ret = mcp2515_cmd_soft_reset(dev);
    7142:	68f0      	ldr	r0, [r6, #12]
    7144:	f021 fa0e 	bl	28564 <mcp2515_cmd_soft_reset.isra.0>
	if (ret < 0) {
    7148:	1e04      	subs	r4, r0, #0
    714a:	da05      	bge.n	7158 <mcp2515_set_timing+0x134>
		LOG_ERR("Failed to reset the device [%d]", ret);
    714c:	4830      	ldr	r0, [pc, #192]	; (7210 <mcp2515_set_timing+0x1ec>)
    714e:	4622      	mov	r2, r4
    7150:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to write RXB1CTRL [%d]", ret);
    7152:	f020 fbbe 	bl	278d2 <printk>
    7156:	e04a      	b.n	71ee <mcp2515_set_timing+0x1ca>
    7158:	2080      	movs	r0, #128	; 0x80
	if (mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1)) {
    715a:	ac04      	add	r4, sp, #16
    715c:	f01d ff0c 	bl	24f78 <z_impl_k_usleep>
    7160:	2301      	movs	r3, #1
    7162:	4622      	mov	r2, r4
    7164:	210e      	movs	r1, #14
    7166:	68f0      	ldr	r0, [r6, #12]
    7168:	f021 f9db 	bl	28522 <mcp2515_cmd_read_reg.isra.3>
    716c:	4603      	mov	r3, r0
    716e:	2800      	cmp	r0, #0
    7170:	d135      	bne.n	71de <mcp2515_set_timing+0x1ba>
		>> MCP2515_CANSTAT_MODE_POS;
    7172:	f89d 2010 	ldrb.w	r2, [sp, #16]
    7176:	0952      	lsrs	r2, r2, #5
	if (reset_mode != MCP2515_MODE_CONFIGURATION) {
    7178:	2a04      	cmp	r2, #4
    717a:	d13f      	bne.n	71fc <mcp2515_set_timing+0x1d8>
	uint8_t cmd_buf[] = { MCP2515_OPCODE_WRITE, reg_addr };
    717c:	f642 0102 	movw	r1, #10242	; 0x2802
    7180:	f8ad 1000 	strh.w	r1, [sp]
	struct spi_buf tx_buf[] = {
    7184:	2102      	movs	r1, #2
    7186:	9105      	str	r1, [sp, #20]
	const struct spi_buf_set tx = {
    7188:	e9cd 4102 	strd	r4, r1, [sp, #8]
	return spi_write(DEV_DATA(dev)->spi, &DEV_DATA(dev)->spi_cfg, &tx);
    718c:	68f1      	ldr	r1, [r6, #12]
	struct spi_buf tx_buf[] = {
    718e:	f8cd d010 	str.w	sp, [sp, #16]
    7192:	a801      	add	r0, sp, #4
    7194:	e9cd 0206 	strd	r0, r2, [sp, #24]
	return spi_write(DEV_DATA(dev)->spi, &DEV_DATA(dev)->spi_cfg, &tx);
    7198:	f851 0b04 	ldr.w	r0, [r1], #4
    719c:	aa02      	add	r2, sp, #8
    719e:	f021 f90b 	bl	283b8 <z_impl_spi_transceive>
	if (ret < 0) {
    71a2:	1e02      	subs	r2, r0, #0
    71a4:	da03      	bge.n	71ae <mcp2515_set_timing+0x18a>
		LOG_ERR("Failed to write the configuration [%d]", ret);
    71a6:	2145      	movs	r1, #69	; 0x45
    71a8:	481a      	ldr	r0, [pc, #104]	; (7214 <mcp2515_set_timing+0x1f0>)
    71aa:	f020 fb92 	bl	278d2 <printk>
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB0CTRL, rx0_ctrl,
    71ae:	2364      	movs	r3, #100	; 0x64
    71b0:	461a      	mov	r2, r3
    71b2:	2160      	movs	r1, #96	; 0x60
    71b4:	68f0      	ldr	r0, [r6, #12]
    71b6:	f021 fa16 	bl	285e6 <mcp2515_cmd_bit_modify.isra.1>
	if (ret < 0) {
    71ba:	1e02      	subs	r2, r0, #0
    71bc:	da03      	bge.n	71c6 <mcp2515_set_timing+0x1a2>
		LOG_ERR("Failed to write RXB0CTRL [%d]", ret);
    71be:	2145      	movs	r1, #69	; 0x45
    71c0:	4815      	ldr	r0, [pc, #84]	; (7218 <mcp2515_set_timing+0x1f4>)
    71c2:	f020 fb86 	bl	278d2 <printk>
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB1CTRL, rx1_ctrl,
    71c6:	2360      	movs	r3, #96	; 0x60
    71c8:	461a      	mov	r2, r3
    71ca:	2170      	movs	r1, #112	; 0x70
    71cc:	68f0      	ldr	r0, [r6, #12]
    71ce:	f021 fa0a 	bl	285e6 <mcp2515_cmd_bit_modify.isra.1>
	if (ret < 0) {
    71d2:	1e04      	subs	r4, r0, #0
    71d4:	da0b      	bge.n	71ee <mcp2515_set_timing+0x1ca>
		LOG_ERR("Failed to write RXB1CTRL [%d]", ret);
    71d6:	4622      	mov	r2, r4
    71d8:	2145      	movs	r1, #69	; 0x45
    71da:	4810      	ldr	r0, [pc, #64]	; (721c <mcp2515_set_timing+0x1f8>)
    71dc:	e7b9      	b.n	7152 <mcp2515_set_timing+0x12e>
		LOG_ERR("Failed to read device mode [%d]",
    71de:	4810      	ldr	r0, [pc, #64]	; (7220 <mcp2515_set_timing+0x1fc>)
    71e0:	f06f 0204 	mvn.w	r2, #4
    71e4:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Device did not reset into configuration mode [%d]",
    71e6:	f020 fb74 	bl	278d2 <printk>
		ret = -EIO;
    71ea:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&dev_data->mutex);
    71ee:	4640      	mov	r0, r8
    71f0:	f021 f92d 	bl	2844e <k_mutex_unlock>
}
    71f4:	4620      	mov	r0, r4
    71f6:	b009      	add	sp, #36	; 0x24
    71f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Device did not reset into configuration mode [%d]",
    71fc:	2145      	movs	r1, #69	; 0x45
    71fe:	4809      	ldr	r0, [pc, #36]	; (7224 <mcp2515_set_timing+0x200>)
    7200:	e7f1      	b.n	71e6 <mcp2515_set_timing+0x1c2>
		return -EINVAL;
    7202:	f06f 0415 	mvn.w	r4, #21
    7206:	e7f5      	b.n	71f4 <mcp2515_set_timing+0x1d0>
    7208:	00030a2a 	.word	0x00030a2a
    720c:	0003067f 	.word	0x0003067f
    7210:	00030c48 	.word	0x00030c48
    7214:	00030cc9 	.word	0x00030cc9
    7218:	00030cf5 	.word	0x00030cf5
    721c:	00030d18 	.word	0x00030d18
    7220:	00030c6d 	.word	0x00030c6d
    7224:	00030c92 	.word	0x00030c92

00007228 <mcp2515_set_mode_int>:
{
    7228:	b537      	push	{r0, r1, r2, r4, r5, lr}
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANCTRL,
    722a:	014b      	lsls	r3, r1, #5
{
    722c:	4605      	mov	r5, r0
    722e:	460c      	mov	r4, r1
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANCTRL,
    7230:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    7234:	22e0      	movs	r2, #224	; 0xe0
    7236:	210f      	movs	r1, #15
    7238:	68c0      	ldr	r0, [r0, #12]
    723a:	f021 f9d4 	bl	285e6 <mcp2515_cmd_bit_modify.isra.1>
	mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1);
    723e:	2301      	movs	r3, #1
    7240:	f10d 0207 	add.w	r2, sp, #7
    7244:	210e      	movs	r1, #14
    7246:	68e8      	ldr	r0, [r5, #12]
    7248:	f021 f96b 	bl	28522 <mcp2515_cmd_read_reg.isra.3>
	if (((canstat & MCP2515_CANSTAT_MODE_MASK) >> MCP2515_CANSTAT_MODE_POS)
    724c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7250:	ebb4 1f53 	cmp.w	r4, r3, lsr #5
    7254:	d007      	beq.n	7266 <mcp2515_set_mode_int+0x3e>
		LOG_ERR("Failed to set MCP2515 operation mode");
    7256:	4805      	ldr	r0, [pc, #20]	; (726c <mcp2515_set_mode_int+0x44>)
    7258:	2145      	movs	r1, #69	; 0x45
    725a:	f020 fb3a 	bl	278d2 <printk>
    725e:	f06f 0004 	mvn.w	r0, #4
}
    7262:	b003      	add	sp, #12
    7264:	bd30      	pop	{r4, r5, pc}
	return 0;
    7266:	2000      	movs	r0, #0
    7268:	e7fb      	b.n	7262 <mcp2515_set_mode_int+0x3a>
    726a:	bf00      	nop
    726c:	00030c1e 	.word	0x00030c1e

00007270 <mcp2515_set_mode>:
{
    7270:	b570      	push	{r4, r5, r6, lr}
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    7272:	68c4      	ldr	r4, [r0, #12]
    7274:	f504 74d8 	add.w	r4, r4, #432	; 0x1b0
{
    7278:	4606      	mov	r6, r0
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    727a:	f04f 32ff 	mov.w	r2, #4294967295
    727e:	f04f 33ff 	mov.w	r3, #4294967295
    7282:	4620      	mov	r0, r4
{
    7284:	460d      	mov	r5, r1
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    7286:	f021 f8e6 	bl	28456 <k_mutex_lock.constprop.20>
    728a:	2080      	movs	r0, #128	; 0x80
    728c:	f01d fe74 	bl	24f78 <z_impl_k_usleep>
	switch (mode) {
    7290:	2d02      	cmp	r5, #2
    7292:	d810      	bhi.n	72b6 <mcp2515_set_mode+0x46>
    7294:	4b0b      	ldr	r3, [pc, #44]	; (72c4 <mcp2515_set_mode+0x54>)
    7296:	5d59      	ldrb	r1, [r3, r5]
	ret = mcp2515_set_mode_int(dev,
    7298:	4630      	mov	r0, r6
    729a:	f7ff ffc5 	bl	7228 <mcp2515_set_mode_int>
	if (ret < 0) {
    729e:	1e05      	subs	r5, r0, #0
    72a0:	da04      	bge.n	72ac <mcp2515_set_mode+0x3c>
		LOG_ERR("Failed to set the mode [%d]", ret);
    72a2:	462a      	mov	r2, r5
    72a4:	2145      	movs	r1, #69	; 0x45
    72a6:	4808      	ldr	r0, [pc, #32]	; (72c8 <mcp2515_set_mode+0x58>)
    72a8:	f020 fb13 	bl	278d2 <printk>
	k_mutex_unlock(&dev_data->mutex);
    72ac:	4620      	mov	r0, r4
    72ae:	f021 f8ce 	bl	2844e <k_mutex_unlock>
}
    72b2:	4628      	mov	r0, r5
    72b4:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Unsupported CAN Mode %u", mode);
    72b6:	2145      	movs	r1, #69	; 0x45
    72b8:	462a      	mov	r2, r5
    72ba:	4804      	ldr	r0, [pc, #16]	; (72cc <mcp2515_set_mode+0x5c>)
    72bc:	f020 fb09 	bl	278d2 <printk>
		return MCP2515_MODE_SILENT;
    72c0:	2103      	movs	r1, #3
    72c2:	e7e9      	b.n	7298 <mcp2515_set_mode+0x28>
    72c4:	00030a27 	.word	0x00030a27
    72c8:	00030bfd 	.word	0x00030bfd
    72cc:	00030be0 	.word	0x00030be0

000072d0 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    72d0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    72d2:	4c06      	ldr	r4, [pc, #24]	; (72ec <z_clock_isr+0x1c>)
    72d4:	4806      	ldr	r0, [pc, #24]	; (72f0 <z_clock_isr+0x20>)
    72d6:	4621      	mov	r1, r4
    72d8:	2217      	movs	r2, #23
    72da:	f020 fafa 	bl	278d2 <printk>
    72de:	4620      	mov	r0, r4
    72e0:	2117      	movs	r1, #23
}
    72e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    72e6:	f020 bd6d 	b.w	27dc4 <assert_post_action>
    72ea:	bf00      	nop
    72ec:	00030d57 	.word	0x00030d57
    72f0:	0003067f 	.word	0x0003067f

000072f4 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    72f4:	4a04      	ldr	r2, [pc, #16]	; (7308 <sys_clock_timeout_handler+0x14>)
    72f6:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    72f8:	1ac9      	subs	r1, r1, r3
    72fa:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    72fe:	4403      	add	r3, r0
    7300:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    7302:	f01e bbbf 	b.w	25a84 <z_clock_announce>
    7306:	bf00      	nop
    7308:	200034d4 	.word	0x200034d4

0000730c <set_absolute_alarm>:
{
    730c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7310:	0085      	lsls	r5, r0, #2
    7312:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7316:	f100 0450 	add.w	r4, r0, #80	; 0x50
    731a:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
    731e:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7320:	b2a4      	uxth	r4, r4
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    7322:	f8df 807c 	ldr.w	r8, [pc, #124]	; 73a0 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    7326:	f8d5 2540 	ldr.w	r2, [r5, #1344]	; 0x540
			cc_val = now + 2;
    732a:	f8df a078 	ldr.w	sl, [pc, #120]	; 73a4 <set_absolute_alarm+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    732e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7332:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    7336:	f021 467f 	bic.w	r6, r1, #4278190080	; 0xff000000
    733a:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    733e:	4087      	lsls	r7, r0
    7340:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    7342:	f8d8 b504 	ldr.w	fp, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    7346:	eba2 020b 	sub.w	r2, r2, fp
    734a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    734e:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    7352:	2a01      	cmp	r2, #1
    p_reg->CC[ch] = cc_val;
    7354:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    7358:	d102      	bne.n	7360 <set_absolute_alarm+0x54>
	z_impl_k_busy_wait(usec_to_wait);
    735a:	2013      	movs	r0, #19
    735c:	f026 fe87 	bl	2e06e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    7360:	f10b 0202 	add.w	r2, fp, #2
	return (a - b) & COUNTER_MAX;
    7364:	1ab3      	subs	r3, r6, r2
    7366:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    736a:	4553      	cmp	r3, sl
    736c:	bf28      	it	cs
    736e:	4616      	movcs	r6, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7370:	2300      	movs	r3, #0
    7372:	6023      	str	r3, [r4, #0]
    7374:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    7376:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    737a:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    737e:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
    7382:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    7386:	459b      	cmp	fp, r3
    7388:	d007      	beq.n	739a <set_absolute_alarm+0x8e>
	return (a - b) & COUNTER_MAX;
    738a:	1af3      	subs	r3, r6, r3
    738c:	3b02      	subs	r3, #2
    738e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    7392:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
		prev_cc = cc_val;
    7396:	4632      	mov	r2, r6
	} while ((now2 != now) &&
    7398:	d8d3      	bhi.n	7342 <set_absolute_alarm+0x36>
}
    739a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    739e:	bf00      	nop
    73a0:	40011000 	.word	0x40011000
    73a4:	00800001 	.word	0x00800001

000073a8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    73a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    73aa:	4e10      	ldr	r6, [pc, #64]	; (73ec <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    73ac:	4f10      	ldr	r7, [pc, #64]	; (73f0 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    73ae:	2500      	movs	r5, #0
    73b0:	4b10      	ldr	r3, [pc, #64]	; (73f4 <rtc_nrf_isr+0x4c>)
    73b2:	2000      	movs	r0, #0
    73b4:	681c      	ldr	r4, [r3, #0]
    73b6:	461a      	mov	r2, r3
    73b8:	b105      	cbz	r5, 73bc <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    73ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    73bc:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    73c0:	03c9      	lsls	r1, r1, #15
    73c2:	d5fa      	bpl.n	73ba <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    73c4:	6839      	ldr	r1, [r7, #0]
    73c6:	2900      	cmp	r1, #0
    73c8:	d0f7      	beq.n	73ba <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    73ca:	603d      	str	r5, [r7, #0]
    73cc:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    73ce:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    73d2:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    73d6:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    73da:	2501      	movs	r5, #1
			if (handler) {
    73dc:	b11c      	cbz	r4, 73e6 <rtc_nrf_isr+0x3e>
    73de:	6018      	str	r0, [r3, #0]
				handler(chan, cc_val,
    73e0:	685a      	ldr	r2, [r3, #4]
    73e2:	47a0      	blx	r4
    73e4:	e7e4      	b.n	73b0 <rtc_nrf_isr+0x8>
    73e6:	6014      	str	r4, [r2, #0]
}
    73e8:	e7e7      	b.n	73ba <rtc_nrf_isr+0x12>
    73ea:	bf00      	nop
    73ec:	40011000 	.word	0x40011000
    73f0:	40011140 	.word	0x40011140
    73f4:	200034c8 	.word	0x200034c8

000073f8 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    73f8:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    73fa:	4d10      	ldr	r5, [pc, #64]	; (743c <z_clock_driver_init+0x44>)
    73fc:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    73fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    7402:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    7406:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    740a:	4b0d      	ldr	r3, [pc, #52]	; (7440 <z_clock_driver_init+0x48>)
    740c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7410:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    7414:	2101      	movs	r1, #1
    7416:	4622      	mov	r2, r4
    7418:	2011      	movs	r0, #17
    741a:	f000 fb71 	bl	7b00 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    741e:	2011      	movs	r0, #17
    7420:	f000 fb3c 	bl	7a9c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7424:	4a07      	ldr	r2, [pc, #28]	; (7444 <z_clock_driver_init+0x4c>)
    7426:	2301      	movs	r3, #1
    7428:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    742a:	4a07      	ldr	r2, [pc, #28]	; (7448 <z_clock_driver_init+0x50>)
    742c:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    742e:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    7430:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    7432:	f7ff f997 	bl	6764 <z_nrf_clock_control_lf_on>

	return 0;
}
    7436:	4620      	mov	r0, r4
    7438:	bd38      	pop	{r3, r4, r5, pc}
    743a:	bf00      	nop
    743c:	40011000 	.word	0x40011000
    7440:	e000e100 	.word	0xe000e100
    7444:	40011008 	.word	0x40011008
    7448:	200034d0 	.word	0x200034d0

0000744c <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    744c:	4b13      	ldr	r3, [pc, #76]	; (749c <z_clock_set_timeout+0x50>)
    744e:	f1b0 3fff 	cmp.w	r0, #4294967295
    7452:	bf08      	it	eq
    7454:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    7456:	3801      	subs	r0, #1
    7458:	2800      	cmp	r0, #0
    745a:	dd1c      	ble.n	7496 <z_clock_set_timeout+0x4a>
    745c:	4298      	cmp	r0, r3
    745e:	bfa8      	it	ge
    7460:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    7462:	4b0f      	ldr	r3, [pc, #60]	; (74a0 <z_clock_set_timeout+0x54>)
    7464:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    7468:	4b0e      	ldr	r3, [pc, #56]	; (74a4 <z_clock_set_timeout+0x58>)
    746a:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    746c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    746e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    7472:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    7476:	bf18      	it	ne
    7478:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    747a:	4a0b      	ldr	r2, [pc, #44]	; (74a8 <z_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    747c:	3301      	adds	r3, #1
    747e:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    7480:	480a      	ldr	r0, [pc, #40]	; (74ac <z_clock_set_timeout+0x60>)
    7482:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    7484:	2000      	movs	r0, #0
    7486:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    7488:	4a04      	ldr	r2, [pc, #16]	; (749c <z_clock_set_timeout+0x50>)
    748a:	4293      	cmp	r3, r2
    748c:	bf94      	ite	ls
    748e:	18c9      	addls	r1, r1, r3
    7490:	1889      	addhi	r1, r1, r2
    7492:	f7ff bf3b 	b.w	730c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    7496:	2000      	movs	r0, #0
    7498:	e7e3      	b.n	7462 <z_clock_set_timeout+0x16>
    749a:	bf00      	nop
    749c:	007fffff 	.word	0x007fffff
    74a0:	40011000 	.word	0x40011000
    74a4:	200034d4 	.word	0x200034d4
    74a8:	200034c8 	.word	0x200034c8
    74ac:	000072f5 	.word	0x000072f5

000074b0 <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    74b0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    74b2:	f04f 0320 	mov.w	r3, #32
    74b6:	f3ef 8511 	mrs	r5, BASEPRI
    74ba:	f383 8811 	msr	BASEPRI, r3
    74be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    74c2:	4815      	ldr	r0, [pc, #84]	; (7518 <z_clock_elapsed+0x68>)
    74c4:	f01d ff70 	bl	253a8 <z_spin_lock_valid>
    74c8:	b940      	cbnz	r0, 74dc <z_clock_elapsed+0x2c>
    74ca:	4914      	ldr	r1, [pc, #80]	; (751c <z_clock_elapsed+0x6c>)
    74cc:	4814      	ldr	r0, [pc, #80]	; (7520 <z_clock_elapsed+0x70>)
    74ce:	227c      	movs	r2, #124	; 0x7c
    74d0:	f020 f9ff 	bl	278d2 <printk>
    74d4:	217c      	movs	r1, #124	; 0x7c
    74d6:	4811      	ldr	r0, [pc, #68]	; (751c <z_clock_elapsed+0x6c>)
    74d8:	f020 fc74 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
    74dc:	480e      	ldr	r0, [pc, #56]	; (7518 <z_clock_elapsed+0x68>)
    74de:	f01d ff81 	bl	253e4 <z_spin_lock_set_owner>
    74e2:	4b10      	ldr	r3, [pc, #64]	; (7524 <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    74e4:	480c      	ldr	r0, [pc, #48]	; (7518 <z_clock_elapsed+0x68>)
    74e6:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    74ea:	4b0f      	ldr	r3, [pc, #60]	; (7528 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    74ec:	681b      	ldr	r3, [r3, #0]
    74ee:	1ae4      	subs	r4, r4, r3
    74f0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    74f4:	f01d ff66 	bl	253c4 <z_spin_unlock_valid>
    74f8:	b940      	cbnz	r0, 750c <z_clock_elapsed+0x5c>
    74fa:	4908      	ldr	r1, [pc, #32]	; (751c <z_clock_elapsed+0x6c>)
    74fc:	4808      	ldr	r0, [pc, #32]	; (7520 <z_clock_elapsed+0x70>)
    74fe:	22a7      	movs	r2, #167	; 0xa7
    7500:	f020 f9e7 	bl	278d2 <printk>
    7504:	21a7      	movs	r1, #167	; 0xa7
    7506:	4805      	ldr	r0, [pc, #20]	; (751c <z_clock_elapsed+0x6c>)
    7508:	f020 fc5c 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
    750c:	f385 8811 	msr	BASEPRI, r5
    7510:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    7514:	4620      	mov	r0, r4
    7516:	bd38      	pop	{r3, r4, r5, pc}
    7518:	200034d8 	.word	0x200034d8
    751c:	00030779 	.word	0x00030779
    7520:	0003067f 	.word	0x0003067f
    7524:	40011000 	.word	0x40011000
    7528:	200034d4 	.word	0x200034d4

0000752c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    752c:	4801      	ldr	r0, [pc, #4]	; (7534 <nrf_cc3xx_platform_abort_init+0x8>)
    752e:	f01e bf39 	b.w	263a4 <nrf_cc3xx_platform_set_abort>
    7532:	bf00      	nop
    7534:	0002f600 	.word	0x0002f600

00007538 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    7538:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    753a:	b1d0      	cbz	r0, 7572 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    753c:	6843      	ldr	r3, [r0, #4]
    753e:	2b04      	cmp	r3, #4
    7540:	d111      	bne.n	7566 <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7542:	2200      	movs	r2, #0
    7544:	6803      	ldr	r3, [r0, #0]
    7546:	f3bf 8f5b 	dmb	ish
    754a:	e853 1f00 	ldrex	r1, [r3]
    754e:	2901      	cmp	r1, #1
    7550:	d103      	bne.n	755a <mutex_unlock_platform+0x22>
    7552:	e843 2000 	strex	r0, r2, [r3]
    7556:	2800      	cmp	r0, #0
    7558:	d1f7      	bne.n	754a <mutex_unlock_platform+0x12>
    755a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    755e:	4807      	ldr	r0, [pc, #28]	; (757c <mutex_unlock_platform+0x44>)
    7560:	bf08      	it	eq
    7562:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    7564:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    7566:	b13b      	cbz	r3, 7578 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    7568:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    756a:	f01c fae3 	bl	23b34 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    756e:	2000      	movs	r0, #0
    7570:	e7f8      	b.n	7564 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    7572:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7576:	e7f5      	b.n	7564 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    7578:	4801      	ldr	r0, [pc, #4]	; (7580 <mutex_unlock_platform+0x48>)
    757a:	e7f3      	b.n	7564 <mutex_unlock_platform+0x2c>
    757c:	ffff8fe9 	.word	0xffff8fe9
    7580:	ffff8fea 	.word	0xffff8fea

00007584 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    7584:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    7586:	4604      	mov	r4, r0
    7588:	b918      	cbnz	r0, 7592 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    758a:	4b0d      	ldr	r3, [pc, #52]	; (75c0 <mutex_free_platform+0x3c>)
    758c:	480d      	ldr	r0, [pc, #52]	; (75c4 <mutex_free_platform+0x40>)
    758e:	685b      	ldr	r3, [r3, #4]
    7590:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    7592:	6861      	ldr	r1, [r4, #4]
    7594:	2908      	cmp	r1, #8
    7596:	d00d      	beq.n	75b4 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    7598:	f031 0304 	bics.w	r3, r1, #4
    759c:	d00a      	beq.n	75b4 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    759e:	f011 0102 	ands.w	r1, r1, #2
    75a2:	d008      	beq.n	75b6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    75a4:	4621      	mov	r1, r4
    75a6:	4808      	ldr	r0, [pc, #32]	; (75c8 <mutex_free_platform+0x44>)
    75a8:	f01c f9a2 	bl	238f0 <k_mem_slab_free>
        mutex->mutex = NULL;
    75ac:	2300      	movs	r3, #0
    75ae:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    75b0:	2300      	movs	r3, #0
    75b2:	6063      	str	r3, [r4, #4]
}
    75b4:	bd10      	pop	{r4, pc}
    75b6:	2214      	movs	r2, #20
    75b8:	6820      	ldr	r0, [r4, #0]
    75ba:	f026 feb1 	bl	2e320 <memset>
    75be:	e7f7      	b.n	75b0 <mutex_free_platform+0x2c>
    75c0:	200019c0 	.word	0x200019c0
    75c4:	00030dba 	.word	0x00030dba
    75c8:	200034dc 	.word	0x200034dc

000075cc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    75cc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    75ce:	4604      	mov	r4, r0
    75d0:	b918      	cbnz	r0, 75da <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    75d2:	4b16      	ldr	r3, [pc, #88]	; (762c <mutex_init_platform+0x60>)
    75d4:	4816      	ldr	r0, [pc, #88]	; (7630 <mutex_init_platform+0x64>)
    75d6:	685b      	ldr	r3, [r3, #4]
    75d8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    75da:	6863      	ldr	r3, [r4, #4]
    75dc:	2b04      	cmp	r3, #4
    75de:	d023      	beq.n	7628 <mutex_init_platform+0x5c>
    75e0:	2b08      	cmp	r3, #8
    75e2:	d021      	beq.n	7628 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    75e4:	b9cb      	cbnz	r3, 761a <mutex_init_platform+0x4e>
    75e6:	6823      	ldr	r3, [r4, #0]
    75e8:	b9bb      	cbnz	r3, 761a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    75ea:	f04f 32ff 	mov.w	r2, #4294967295
    75ee:	f04f 33ff 	mov.w	r3, #4294967295
    75f2:	4621      	mov	r1, r4
    75f4:	480f      	ldr	r0, [pc, #60]	; (7634 <mutex_init_platform+0x68>)
    75f6:	f01c f921 	bl	2383c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    75fa:	b908      	cbnz	r0, 7600 <mutex_init_platform+0x34>
    75fc:	6823      	ldr	r3, [r4, #0]
    75fe:	b91b      	cbnz	r3, 7608 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    7600:	4b0a      	ldr	r3, [pc, #40]	; (762c <mutex_init_platform+0x60>)
    7602:	480d      	ldr	r0, [pc, #52]	; (7638 <mutex_init_platform+0x6c>)
    7604:	685b      	ldr	r3, [r3, #4]
    7606:	4798      	blx	r3
    7608:	2214      	movs	r2, #20
    760a:	2100      	movs	r1, #0
    760c:	6820      	ldr	r0, [r4, #0]
    760e:	f026 fe87 	bl	2e320 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    7612:	6863      	ldr	r3, [r4, #4]
    7614:	f043 0302 	orr.w	r3, r3, #2
    7618:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    761a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    761c:	f026 fc98 	bl	2df50 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    7620:	6863      	ldr	r3, [r4, #4]
    7622:	f043 0301 	orr.w	r3, r3, #1
    7626:	6063      	str	r3, [r4, #4]
}
    7628:	bd10      	pop	{r4, pc}
    762a:	bf00      	nop
    762c:	200019c0 	.word	0x200019c0
    7630:	00030dba 	.word	0x00030dba
    7634:	200034dc 	.word	0x200034dc
    7638:	00030de0 	.word	0x00030de0

0000763c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    763c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    763e:	b1f8      	cbz	r0, 7680 <mutex_lock_platform+0x44>
    switch (mutex->flags) {
    7640:	6843      	ldr	r3, [r0, #4]
    7642:	2b04      	cmp	r3, #4
    7644:	d110      	bne.n	7668 <mutex_lock_platform+0x2c>
    7646:	2201      	movs	r2, #1
    7648:	6803      	ldr	r3, [r0, #0]
    764a:	f3bf 8f5b 	dmb	ish
    764e:	e853 1f00 	ldrex	r1, [r3]
    7652:	2900      	cmp	r1, #0
    7654:	d103      	bne.n	765e <mutex_lock_platform+0x22>
    7656:	e843 2000 	strex	r0, r2, [r3]
    765a:	2800      	cmp	r0, #0
    765c:	d1f7      	bne.n	764e <mutex_lock_platform+0x12>
    765e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    7662:	d10b      	bne.n	767c <mutex_lock_platform+0x40>
    7664:	2000      	movs	r0, #0
}
    7666:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    7668:	b16b      	cbz	r3, 7686 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    766a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    766c:	f04f 32ff 	mov.w	r2, #4294967295
    7670:	f04f 33ff 	mov.w	r3, #4294967295
    7674:	f01c f98a 	bl	2398c <z_impl_k_mutex_lock>
        if (ret == 0) {
    7678:	2800      	cmp	r0, #0
    767a:	d0f3      	beq.n	7664 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    767c:	4803      	ldr	r0, [pc, #12]	; (768c <mutex_lock_platform+0x50>)
    767e:	e7f2      	b.n	7666 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    7680:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7684:	e7ef      	b.n	7666 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    7686:	4802      	ldr	r0, [pc, #8]	; (7690 <mutex_lock_platform+0x54>)
    7688:	e7ed      	b.n	7666 <mutex_lock_platform+0x2a>
    768a:	bf00      	nop
    768c:	ffff8fe9 	.word	0xffff8fe9
    7690:	ffff8fea 	.word	0xffff8fea

00007694 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    7694:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    7696:	4906      	ldr	r1, [pc, #24]	; (76b0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    7698:	4806      	ldr	r0, [pc, #24]	; (76b4 <nrf_cc3xx_platform_mutex_init+0x20>)
    769a:	2340      	movs	r3, #64	; 0x40
    769c:	2214      	movs	r2, #20
    769e:	f026 fc3c 	bl	2df1a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    76a2:	4905      	ldr	r1, [pc, #20]	; (76b8 <nrf_cc3xx_platform_mutex_init+0x24>)
    76a4:	4805      	ldr	r0, [pc, #20]	; (76bc <nrf_cc3xx_platform_mutex_init+0x28>)
}
    76a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    76aa:	f01e bef9 	b.w	264a0 <nrf_cc3xx_platform_set_mutexes>
    76ae:	bf00      	nop
    76b0:	200034f8 	.word	0x200034f8
    76b4:	200034dc 	.word	0x200034dc
    76b8:	0002f618 	.word	0x0002f618
    76bc:	0002f608 	.word	0x0002f608

000076c0 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    76c0:	4b01      	ldr	r3, [pc, #4]	; (76c8 <uECC_get_rng+0x8>)
    76c2:	6818      	ldr	r0, [r3, #0]
    76c4:	4770      	bx	lr
    76c6:	bf00      	nop
    76c8:	2000122c 	.word	0x2000122c

000076cc <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    76cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    76ce:	2208      	movs	r2, #8
{
    76d0:	b089      	sub	sp, #36	; 0x24
    76d2:	460c      	mov	r4, r1
    76d4:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    76d6:	f021 f997 	bl	28a08 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    76da:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    76dc:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    76de:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    76e0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    76e2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    76e4:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    76e6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    76e8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    76ea:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    76ec:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    76ee:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    76f0:	2308      	movs	r3, #8
    76f2:	466a      	mov	r2, sp
    76f4:	4669      	mov	r1, sp
    76f6:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    76f8:	e9cd 7701 	strd	r7, r7, [sp, #4]
    76fc:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    76fe:	f021 f888 	bl	28812 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7702:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7704:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7706:	466a      	mov	r2, sp
    7708:	4631      	mov	r1, r6
    770a:	4630      	mov	r0, r6
    770c:	f021 f881 	bl	28812 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    7710:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7712:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    7714:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7716:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    7718:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    771a:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    771c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    771e:	4405      	add	r5, r0
	tmp[7] = 0;
    7720:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7724:	466a      	mov	r2, sp
    7726:	2308      	movs	r3, #8
    7728:	4669      	mov	r1, sp
    772a:	4668      	mov	r0, sp
    772c:	f021 f871 	bl	28812 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7730:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7732:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7734:	2308      	movs	r3, #8
    7736:	466a      	mov	r2, sp
    7738:	4630      	mov	r0, r6
    773a:	f021 f86a 	bl	28812 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    773e:	6a23      	ldr	r3, [r4, #32]
    7740:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    7742:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7744:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    7746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7748:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    774a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    774c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    774e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7750:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7752:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7754:	2308      	movs	r3, #8
    7756:	466a      	mov	r2, sp
    7758:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    775a:	e9cd 7704 	strd	r7, r7, [sp, #16]
    775e:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7760:	f021 f857 	bl	28812 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    7764:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7766:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    7768:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    776a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    776c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    776e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7770:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    7772:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    7774:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    7776:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    7778:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    777a:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    777e:	6a23      	ldr	r3, [r4, #32]
    7780:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7782:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7784:	2308      	movs	r3, #8
    7786:	466a      	mov	r2, sp
    7788:	4630      	mov	r0, r6
    778a:	f021 f842 	bl	28812 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    778e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7790:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    7792:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7794:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    7796:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7798:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    779a:	6a23      	ldr	r3, [r4, #32]
    779c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    779e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    77a0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    77a2:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    77a4:	2308      	movs	r3, #8
    77a6:	466a      	mov	r2, sp
    77a8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    77aa:	e9cd 7704 	strd	r7, r7, [sp, #16]
    77ae:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    77b0:	f021 f960 	bl	28a74 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    77b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    77b6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    77b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    77ba:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    77bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    77be:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    77c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    77c2:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    77c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    77c6:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    77c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    77ca:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    77cc:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    77ce:	2308      	movs	r3, #8
    77d0:	466a      	mov	r2, sp
    77d2:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    77d4:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    77d8:	f021 f94c 	bl	28a74 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    77dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    77de:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    77e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    77e2:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    77e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    77e6:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    77e8:	6a23      	ldr	r3, [r4, #32]
    77ea:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    77ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    77ee:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    77f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    77f2:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    77f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    77f8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    77fa:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    77fc:	2308      	movs	r3, #8
    77fe:	466a      	mov	r2, sp
    7800:	4630      	mov	r0, r6
    7802:	f021 f937 	bl	28a74 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    7806:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7808:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    780a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    780c:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    7810:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7812:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    7814:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7816:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    7818:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    781a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    781e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7820:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7822:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7824:	2308      	movs	r3, #8
    7826:	466a      	mov	r2, sp
    7828:	4630      	mov	r0, r6
    782a:	f021 f923 	bl	28a74 <uECC_vli_sub>

	if (carry < 0) {
    782e:	1a2d      	subs	r5, r5, r0
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    7830:	4c0d      	ldr	r4, [pc, #52]	; (7868 <vli_mmod_fast_secp256r1+0x19c>)
	if (carry < 0) {
    7832:	d40f      	bmi.n	7854 <vli_mmod_fast_secp256r1+0x188>
		}
		while (carry < 0);
	} else  {
		while (carry || 
    7834:	b935      	cbnz	r5, 7844 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    7836:	2208      	movs	r2, #8
    7838:	4631      	mov	r1, r6
    783a:	4620      	mov	r0, r4
    783c:	f021 f8f0 	bl	28a20 <uECC_vli_cmp_unsafe>
		while (carry || 
    7840:	2801      	cmp	r0, #1
    7842:	d00f      	beq.n	7864 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    7844:	2308      	movs	r3, #8
    7846:	4622      	mov	r2, r4
    7848:	4631      	mov	r1, r6
    784a:	4630      	mov	r0, r6
    784c:	f021 f912 	bl	28a74 <uECC_vli_sub>
    7850:	1a2d      	subs	r5, r5, r0
    7852:	e7ef      	b.n	7834 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    7854:	2308      	movs	r3, #8
    7856:	4622      	mov	r2, r4
    7858:	4631      	mov	r1, r6
    785a:	4630      	mov	r0, r6
    785c:	f020 ffd9 	bl	28812 <uECC_vli_add>
		while (carry < 0);
    7860:	182d      	adds	r5, r5, r0
    7862:	d4f7      	bmi.n	7854 <vli_mmod_fast_secp256r1+0x188>
		}
	}
}
    7864:	b009      	add	sp, #36	; 0x24
    7866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7868:	0002f630 	.word	0x0002f630

0000786c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    786c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    786e:	4e28      	ldr	r6, [pc, #160]	; (7910 <tc_aes128_set_encrypt_key+0xa4>)
{
    7870:	4607      	mov	r7, r0
    7872:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    7874:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    7876:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    7878:	ad01      	add	r5, sp, #4
    787a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    787c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    787e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    7880:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    7884:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    7888:	2f00      	cmp	r7, #0
    788a:	d03c      	beq.n	7906 <tc_aes128_set_encrypt_key+0x9a>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    788c:	2c00      	cmp	r4, #0
    788e:	d03c      	beq.n	790a <tc_aes128_set_encrypt_key+0x9e>
    7890:	1f38      	subs	r0, r7, #4
    7892:	4621      	mov	r1, r4
    7894:	4602      	mov	r2, r0
    7896:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    7898:	784b      	ldrb	r3, [r1, #1]
    789a:	780d      	ldrb	r5, [r1, #0]
    789c:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    789e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    78a2:	78cd      	ldrb	r5, [r1, #3]
    78a4:	432b      	orrs	r3, r5
    78a6:	788d      	ldrb	r5, [r1, #2]
    78a8:	3104      	adds	r1, #4
    78aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    78ae:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    78b0:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    78b4:	d1f0      	bne.n	7898 <tc_aes128_set_encrypt_key+0x2c>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    78b6:	4c17      	ldr	r4, [pc, #92]	; (7914 <tc_aes128_set_encrypt_key+0xa8>)
    78b8:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    78ba:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    78bc:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    78be:	d118      	bne.n	78f2 <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    78c0:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    78c4:	0e1a      	lsrs	r2, r3, #24
    78c6:	5ca5      	ldrb	r5, [r4, r2]
    78c8:	b2da      	uxtb	r2, r3
    78ca:	5ca2      	ldrb	r2, [r4, r2]
    78cc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    78d0:	f3c3 4507 	ubfx	r5, r3, #16, #8
    78d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    78d8:	5d65      	ldrb	r5, [r4, r5]
    78da:	5ce3      	ldrb	r3, [r4, r3]
    78dc:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    78e0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    78e4:	ad0c      	add	r5, sp, #48	; 0x30
    78e6:	f021 0303 	bic.w	r3, r1, #3
    78ea:	442b      	add	r3, r5
    78ec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    78f0:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    78f2:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    78f6:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    78f8:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    78fa:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    78fc:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    78fe:	d1dc      	bne.n	78ba <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    7900:	2001      	movs	r0, #1
}
    7902:	b00d      	add	sp, #52	; 0x34
    7904:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    7906:	4638      	mov	r0, r7
    7908:	e7fb      	b.n	7902 <tc_aes128_set_encrypt_key+0x96>
    790a:	4620      	mov	r0, r4
    790c:	e7f9      	b.n	7902 <tc_aes128_set_encrypt_key+0x96>
    790e:	bf00      	nop
    7910:	0002f290 	.word	0x0002f290
    7914:	00030e0d 	.word	0x00030e0d

00007918 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    7918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    791c:	4615      	mov	r5, r2
    791e:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    7920:	4607      	mov	r7, r0
    7922:	2800      	cmp	r0, #0
    7924:	d059      	beq.n	79da <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    7926:	2900      	cmp	r1, #0
    7928:	d05a      	beq.n	79e0 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    792a:	2a00      	cmp	r2, #0
    792c:	d05a      	beq.n	79e4 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    792e:	2310      	movs	r3, #16
    7930:	460a      	mov	r2, r1
    7932:	4668      	mov	r0, sp
    7934:	4619      	mov	r1, r3
    7936:	f020 fea7 	bl	28688 <_copy>
	add_round_key(state, s->words);
    793a:	4629      	mov	r1, r5
    793c:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    793e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 79e8 <tc_aes_encrypt+0xd0>
	add_round_key(state, s->words);
    7942:	f021 fdae 	bl	294a2 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    7946:	f105 0610 	add.w	r6, r5, #16
    794a:	46c8      	mov	r8, r9
    794c:	35a0      	adds	r5, #160	; 0xa0
    794e:	466c      	mov	r4, sp
{
    7950:	466a      	mov	r2, sp
    7952:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    7954:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    7956:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    7958:	f819 1001 	ldrb.w	r1, [r9, r1]
    795c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    7960:	d1f8      	bne.n	7954 <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
    7962:	4668      	mov	r0, sp
    7964:	f021 fde2 	bl	2952c <shift_rows>
	mult_row_column(t, s);
    7968:	4669      	mov	r1, sp
    796a:	a804      	add	r0, sp, #16
    796c:	f021 fe17 	bl	2959e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    7970:	a901      	add	r1, sp, #4
    7972:	a805      	add	r0, sp, #20
    7974:	f021 fe13 	bl	2959e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    7978:	a902      	add	r1, sp, #8
    797a:	a806      	add	r0, sp, #24
    797c:	f021 fe0f 	bl	2959e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    7980:	a903      	add	r1, sp, #12
    7982:	a807      	add	r0, sp, #28
    7984:	f021 fe0b 	bl	2959e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    7988:	2310      	movs	r3, #16
    798a:	4619      	mov	r1, r3
    798c:	eb0d 0203 	add.w	r2, sp, r3
    7990:	4668      	mov	r0, sp
    7992:	f020 fe79 	bl	28688 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    7996:	4631      	mov	r1, r6
    7998:	4668      	mov	r0, sp
    799a:	3610      	adds	r6, #16
    799c:	f021 fd81 	bl	294a2 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    79a0:	42ae      	cmp	r6, r5
    79a2:	d1d4      	bne.n	794e <tc_aes_encrypt+0x36>
    79a4:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
    79a6:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    79a8:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
    79aa:	f818 3003 	ldrb.w	r3, [r8, r3]
    79ae:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    79b2:	d1f8      	bne.n	79a6 <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
    79b4:	4668      	mov	r0, sp
    79b6:	f021 fdb9 	bl	2952c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    79ba:	4629      	mov	r1, r5
    79bc:	4668      	mov	r0, sp
    79be:	f021 fd70 	bl	294a2 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    79c2:	2310      	movs	r3, #16
    79c4:	4619      	mov	r1, r3
    79c6:	466a      	mov	r2, sp
    79c8:	4638      	mov	r0, r7
    79ca:	f020 fe5d 	bl	28688 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    79ce:	4668      	mov	r0, sp
    79d0:	2210      	movs	r2, #16
    79d2:	4631      	mov	r1, r6
    79d4:	f020 fe65 	bl	286a2 <_set>

	return TC_CRYPTO_SUCCESS;
    79d8:	2001      	movs	r0, #1
}
    79da:	b009      	add	sp, #36	; 0x24
    79dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    79e0:	4608      	mov	r0, r1
    79e2:	e7fa      	b.n	79da <tc_aes_encrypt+0xc2>
    79e4:	4610      	mov	r0, r2
    79e6:	e7f8      	b.n	79da <tc_aes_encrypt+0xc2>
    79e8:	00030e0d 	.word	0x00030e0d

000079ec <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    79ec:	4a0a      	ldr	r2, [pc, #40]	; (7a18 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    79ee:	490b      	ldr	r1, [pc, #44]	; (7a1c <arch_swap+0x30>)
	_current->arch.basepri = key;
    79f0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    79f2:	6809      	ldr	r1, [r1, #0]
    79f4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    79f8:	4909      	ldr	r1, [pc, #36]	; (7a20 <arch_swap+0x34>)
	_current->arch.basepri = key;
    79fa:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    79fe:	684b      	ldr	r3, [r1, #4]
    7a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7a04:	604b      	str	r3, [r1, #4]
    7a06:	2300      	movs	r3, #0
    7a08:	f383 8811 	msr	BASEPRI, r3
    7a0c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    7a10:	6893      	ldr	r3, [r2, #8]
}
    7a12:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    7a16:	4770      	bx	lr
    7a18:	20005490 	.word	0x20005490
    7a1c:	00030158 	.word	0x00030158
    7a20:	e000ed00 	.word	0xe000ed00

00007a24 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    7a24:	4913      	ldr	r1, [pc, #76]	; (7a74 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    7a26:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    7a28:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    7a2c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    7a2e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    7a32:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7a36:	2020      	movs	r0, #32
    msr BASEPRI, r0
    7a38:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    7a3c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    7a40:	4f0d      	ldr	r7, [pc, #52]	; (7a78 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    7a42:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    7a46:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    7a48:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    7a4a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    7a4c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    7a50:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    7a52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    7a56:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    7a5a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    7a5c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    7a5e:	f000 fbcb 	bl	81f8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    7a62:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    7a66:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    7a6a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    7a6e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    7a72:	4770      	bx	lr
    ldr r1, =_kernel
    7a74:	20005490 	.word	0x20005490
    ldr v4, =_SCS_ICSR
    7a78:	e000ed04 	.word	0xe000ed04

00007a7c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    7a7c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    7a80:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    7a82:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    7a86:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    7a8a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    7a8c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    7a90:	2902      	cmp	r1, #2
    beq _oops
    7a92:	d0ff      	beq.n	7a94 <_oops>

00007a94 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    7a94:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    7a96:	f021 fec3 	bl	29820 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    7a9a:	bd01      	pop	{r0, pc}

00007a9c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    7a9c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    7a9e:	2b00      	cmp	r3, #0
    7aa0:	db08      	blt.n	7ab4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7aa2:	2201      	movs	r2, #1
    7aa4:	f000 001f 	and.w	r0, r0, #31
    7aa8:	fa02 f000 	lsl.w	r0, r2, r0
    7aac:	095b      	lsrs	r3, r3, #5
    7aae:	4a02      	ldr	r2, [pc, #8]	; (7ab8 <arch_irq_enable+0x1c>)
    7ab0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    7ab4:	4770      	bx	lr
    7ab6:	bf00      	nop
    7ab8:	e000e100 	.word	0xe000e100

00007abc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    7abc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    7abe:	2b00      	cmp	r3, #0
    7ac0:	db0d      	blt.n	7ade <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ac2:	2201      	movs	r2, #1
    7ac4:	095b      	lsrs	r3, r3, #5
    7ac6:	f000 001f 	and.w	r0, r0, #31
    7aca:	fa02 f000 	lsl.w	r0, r2, r0
    7ace:	3320      	adds	r3, #32
    7ad0:	4a03      	ldr	r2, [pc, #12]	; (7ae0 <arch_irq_disable+0x24>)
    7ad2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7ad6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ada:	f3bf 8f6f 	isb	sy
}
    7ade:	4770      	bx	lr
    7ae0:	e000e100 	.word	0xe000e100

00007ae4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    7ae4:	0942      	lsrs	r2, r0, #5
    7ae6:	4b05      	ldr	r3, [pc, #20]	; (7afc <arch_irq_is_enabled+0x18>)
    7ae8:	f000 001f 	and.w	r0, r0, #31
    7aec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    7af0:	2301      	movs	r3, #1
    7af2:	fa03 f000 	lsl.w	r0, r3, r0
}
    7af6:	4010      	ands	r0, r2
    7af8:	4770      	bx	lr
    7afa:	bf00      	nop
    7afc:	e000e100 	.word	0xe000e100

00007b00 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    7b00:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    7b02:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    7b04:	2c07      	cmp	r4, #7
{
    7b06:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    7b08:	d908      	bls.n	7b1c <z_arm_irq_priority_set+0x1c>
    7b0a:	490e      	ldr	r1, [pc, #56]	; (7b44 <z_arm_irq_priority_set+0x44>)
    7b0c:	480e      	ldr	r0, [pc, #56]	; (7b48 <z_arm_irq_priority_set+0x48>)
    7b0e:	225f      	movs	r2, #95	; 0x5f
    7b10:	f01f fedf 	bl	278d2 <printk>
    7b14:	215f      	movs	r1, #95	; 0x5f
    7b16:	480b      	ldr	r0, [pc, #44]	; (7b44 <z_arm_irq_priority_set+0x44>)
    7b18:	f020 f954 	bl	27dc4 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    7b1c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    7b1e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7b20:	bfa8      	it	ge
    7b22:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    7b26:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7b2a:	bfbc      	itt	lt
    7b2c:	f005 050f 	andlt.w	r5, r5, #15
    7b30:	4b06      	ldrlt	r3, [pc, #24]	; (7b4c <z_arm_irq_priority_set+0x4c>)
    7b32:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7b34:	bfaa      	itet	ge
    7b36:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7b3a:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7b3c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    7b40:	bd38      	pop	{r3, r4, r5, pc}
    7b42:	bf00      	nop
    7b44:	00030f0d 	.word	0x00030f0d
    7b48:	0003067f 	.word	0x0003067f
    7b4c:	e000ed14 	.word	0xe000ed14

00007b50 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    7b50:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    7b52:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    7b54:	4b04      	ldr	r3, [pc, #16]	; (7b68 <_arch_isr_direct_pm+0x18>)
    7b56:	6a58      	ldr	r0, [r3, #36]	; 0x24
    7b58:	b118      	cbz	r0, 7b62 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    7b5a:	2200      	movs	r2, #0
    7b5c:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
    7b5e:	f026 f9d2 	bl	2df06 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    7b62:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    7b64:	bd08      	pop	{r3, pc}
    7b66:	bf00      	nop
    7b68:	20005490 	.word	0x20005490

00007b6c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    7b6c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    7b70:	9b00      	ldr	r3, [sp, #0]
    7b72:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    7b76:	490a      	ldr	r1, [pc, #40]	; (7ba0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    7b78:	9b01      	ldr	r3, [sp, #4]
    7b7a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    7b7e:	9b02      	ldr	r3, [sp, #8]
    7b80:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    7b84:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    7b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    7b8c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    7b90:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    7b94:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    7b96:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    7b98:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    7b9a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    7b9e:	4770      	bx	lr
    7ba0:	000279d7 	.word	0x000279d7

00007ba4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    7ba4:	4b0b      	ldr	r3, [pc, #44]	; (7bd4 <z_check_thread_stack_fail+0x30>)
{
    7ba6:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
    7ba8:	6898      	ldr	r0, [r3, #8]

	if (!thread) {
    7baa:	b190      	cbz	r0, 7bd2 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    7bac:	f112 0f16 	cmn.w	r2, #22
    7bb0:	6f40      	ldr	r0, [r0, #116]	; 0x74
    7bb2:	d005      	beq.n	7bc0 <z_check_thread_stack_fail+0x1c>
    7bb4:	f1a0 0320 	sub.w	r3, r0, #32
    7bb8:	4293      	cmp	r3, r2
    7bba:	d806      	bhi.n	7bca <z_check_thread_stack_fail+0x26>
    7bbc:	4282      	cmp	r2, r0
    7bbe:	d204      	bcs.n	7bca <z_check_thread_stack_fail+0x26>
    7bc0:	4281      	cmp	r1, r0
    7bc2:	bf2c      	ite	cs
    7bc4:	2100      	movcs	r1, #0
    7bc6:	2101      	movcc	r1, #1
    7bc8:	e000      	b.n	7bcc <z_check_thread_stack_fail+0x28>
    7bca:	2100      	movs	r1, #0
    7bcc:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    7bce:	bf08      	it	eq
    7bd0:	2000      	moveq	r0, #0
}
    7bd2:	4770      	bx	lr
    7bd4:	20005490 	.word	0x20005490

00007bd8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    7bd8:	b508      	push	{r3, lr}
    7bda:	4604      	mov	r4, r0
    7bdc:	460e      	mov	r6, r1
    7bde:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    7be0:	f000 fafe 	bl	81e0 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    7be4:	4b08      	ldr	r3, [pc, #32]	; (7c08 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    7be6:	4620      	mov	r0, r4
	_current = main_thread;
    7be8:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    7bea:	f000 fb05 	bl	81f8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    7bee:	4628      	mov	r0, r5
    7bf0:	f386 8809 	msr	PSP, r6
    7bf4:	2100      	movs	r1, #0
    7bf6:	b663      	cpsie	if
    7bf8:	f381 8811 	msr	BASEPRI, r1
    7bfc:	f3bf 8f6f 	isb	sy
    7c00:	2200      	movs	r2, #0
    7c02:	2300      	movs	r3, #0
    7c04:	f01f fee7 	bl	279d6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    7c08:	20005490 	.word	0x20005490

00007c0c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    7c0c:	4901      	ldr	r1, [pc, #4]	; (7c14 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    7c0e:	2210      	movs	r2, #16
	str	r2, [r1]
    7c10:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    7c12:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    7c14:	e000ed10 	.word	0xe000ed10

00007c18 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    7c18:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    7c1a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    7c1c:	f380 8811 	msr	BASEPRI, r0
	isb
    7c20:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    7c24:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    7c28:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    7c2a:	b662      	cpsie	i
	isb
    7c2c:	f3bf 8f6f 	isb	sy

	bx	lr
    7c30:	4770      	bx	lr
    7c32:	bf00      	nop

00007c34 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    7c34:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    7c36:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    7c38:	f381 8811 	msr	BASEPRI, r1

	wfe
    7c3c:	bf20      	wfe

	msr	BASEPRI, r0
    7c3e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    7c42:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    7c44:	4770      	bx	lr
    7c46:	bf00      	nop

00007c48 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7c4a:	4605      	mov	r5, r0

	if (esf != NULL) {
    7c4c:	460c      	mov	r4, r1
    7c4e:	b1c9      	cbz	r1, 7c84 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    7c50:	688b      	ldr	r3, [r1, #8]
    7c52:	9300      	str	r3, [sp, #0]
    7c54:	e9d1 2300 	ldrd	r2, r3, [r1]
    7c58:	480e      	ldr	r0, [pc, #56]	; (7c94 <z_arm_fatal_error+0x4c>)
    7c5a:	2145      	movs	r1, #69	; 0x45
    7c5c:	f01f fe39 	bl	278d2 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    7c60:	6963      	ldr	r3, [r4, #20]
    7c62:	9300      	str	r3, [sp, #0]
    7c64:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    7c68:	2145      	movs	r1, #69	; 0x45
    7c6a:	480b      	ldr	r0, [pc, #44]	; (7c98 <z_arm_fatal_error+0x50>)
    7c6c:	f01f fe31 	bl	278d2 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    7c70:	69e2      	ldr	r2, [r4, #28]
    7c72:	480a      	ldr	r0, [pc, #40]	; (7c9c <z_arm_fatal_error+0x54>)
    7c74:	2145      	movs	r1, #69	; 0x45
    7c76:	f01f fe2c 	bl	278d2 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    7c7a:	69a2      	ldr	r2, [r4, #24]
    7c7c:	4808      	ldr	r0, [pc, #32]	; (7ca0 <z_arm_fatal_error+0x58>)
    7c7e:	2145      	movs	r1, #69	; 0x45
    7c80:	f01f fe27 	bl	278d2 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    7c84:	4621      	mov	r1, r4
    7c86:	4628      	mov	r0, r5
}
    7c88:	b003      	add	sp, #12
    7c8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    7c8e:	f01b bb79 	b.w	23384 <z_fatal_error>
    7c92:	bf00      	nop
    7c94:	00030f43 	.word	0x00030f43
    7c98:	00030f77 	.word	0x00030f77
    7c9c:	00030fab 	.word	0x00030fab
    7ca0:	00030fbf 	.word	0x00030fbf

00007ca4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    7ca4:	bf30      	wfi
    b z_SysNmiOnReset
    7ca6:	f7ff bffd 	b.w	7ca4 <z_SysNmiOnReset>
    7caa:	bf00      	nop

00007cac <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7cac:	4a0e      	ldr	r2, [pc, #56]	; (7ce8 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    7cae:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7cb0:	4b0e      	ldr	r3, [pc, #56]	; (7cec <z_arm_prep_c+0x40>)
    7cb2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    7cb6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    7cb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7cbc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    7cc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    7cc4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    7cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    7ccc:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    7cd0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    7cd4:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    7cd8:	f01b fbe0 	bl	2349c <z_bss_zero>
	z_data_copy();
    7cdc:	f01d fc94 	bl	25608 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    7ce0:	f000 fa50 	bl	8184 <z_arm_interrupt_init>
	z_cstart();
    7ce4:	f01b fbfe 	bl	234e4 <z_cstart>
    7ce8:	00001000 	.word	0x00001000
    7cec:	e000ed00 	.word	0xe000ed00

00007cf0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    7cf0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    7cf2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    7cf4:	4a0b      	ldr	r2, [pc, #44]	; (7d24 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    7cf6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    7cf8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    7cfa:	bf1e      	ittt	ne
	movne	r1, #0
    7cfc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    7cfe:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    7d00:	f026 f901 	blne	2df06 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    7d04:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    7d06:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    7d0a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    7d0e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    7d12:	4905      	ldr	r1, [pc, #20]	; (7d28 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    7d14:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    7d16:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    7d18:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    7d1a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    7d1e:	4903      	ldr	r1, [pc, #12]	; (7d2c <_isr_wrapper+0x3c>)
	bx r1
    7d20:	4708      	bx	r1
    7d22:	0000      	.short	0x0000
	ldr r2, =_kernel
    7d24:	20005490 	.word	0x20005490
	ldr r1, =_sw_isr_table
    7d28:	0002ed28 	.word	0x0002ed28
	ldr r1, =z_arm_int_exit
    7d2c:	00008169 	.word	0x00008169

00007d30 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    7d30:	f021 fd84 	bl	2983c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7d34:	2020      	movs	r0, #32
    msr BASEPRI, r0
    7d36:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    7d3a:	4808      	ldr	r0, [pc, #32]	; (7d5c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    7d3c:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    7d40:	1840      	adds	r0, r0, r1
    msr PSP, r0
    7d42:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    7d46:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    7d4a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    7d4c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    7d4e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    7d52:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    7d56:	f7ff ffa9 	bl	7cac <z_arm_prep_c>
    7d5a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    7d5c:	200074a0 	.word	0x200074a0

00007d60 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    7d60:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    7d64:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    7d68:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    7d6a:	4672      	mov	r2, lr
	bl z_arm_fault
    7d6c:	f000 f92c 	bl	7fc8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    7d70:	bd01      	pop	{r0, pc}
    7d72:	bf00      	nop

00007d74 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    7d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    7d78:	4c36      	ldr	r4, [pc, #216]	; (7e54 <mem_manage_fault+0xe0>)
{
    7d7a:	4605      	mov	r5, r0
    7d7c:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    7d7e:	4836      	ldr	r0, [pc, #216]	; (7e58 <mem_manage_fault+0xe4>)
    7d80:	2145      	movs	r1, #69	; 0x45
{
    7d82:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    7d84:	f01f fda5 	bl	278d2 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    7d88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    7d8a:	06d7      	lsls	r7, r2, #27
    7d8c:	d503      	bpl.n	7d96 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
    7d8e:	2145      	movs	r1, #69	; 0x45
    7d90:	4832      	ldr	r0, [pc, #200]	; (7e5c <mem_manage_fault+0xe8>)
    7d92:	f01f fd9e 	bl	278d2 <printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    7d96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7d98:	0718      	lsls	r0, r3, #28
    7d9a:	d503      	bpl.n	7da4 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
    7d9c:	2145      	movs	r1, #69	; 0x45
    7d9e:	4830      	ldr	r0, [pc, #192]	; (7e60 <mem_manage_fault+0xec>)
    7da0:	f01f fd97 	bl	278d2 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    7da4:	4c2b      	ldr	r4, [pc, #172]	; (7e54 <mem_manage_fault+0xe0>)
    7da6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7da8:	0799      	lsls	r1, r3, #30
    7daa:	d422      	bmi.n	7df2 <mem_manage_fault+0x7e>
	uint32_t mmfar = -EINVAL;
    7dac:	f06f 0715 	mvn.w	r7, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    7db0:	4c28      	ldr	r4, [pc, #160]	; (7e54 <mem_manage_fault+0xe0>)
    7db2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    7db4:	07d3      	lsls	r3, r2, #31
    7db6:	d503      	bpl.n	7dc0 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
    7db8:	2145      	movs	r1, #69	; 0x45
    7dba:	482a      	ldr	r0, [pc, #168]	; (7e64 <mem_manage_fault+0xf0>)
    7dbc:	f01f fd89 	bl	278d2 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    7dc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7dc2:	069c      	lsls	r4, r3, #26
    7dc4:	d503      	bpl.n	7dce <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
    7dc6:	2145      	movs	r1, #69	; 0x45
    7dc8:	4827      	ldr	r0, [pc, #156]	; (7e68 <mem_manage_fault+0xf4>)
    7dca:	f01f fd82 	bl	278d2 <printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    7dce:	4c21      	ldr	r4, [pc, #132]	; (7e54 <mem_manage_fault+0xe0>)
    7dd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7dd2:	06d8      	lsls	r0, r3, #27
    7dd4:	d422      	bmi.n	7e1c <mem_manage_fault+0xa8>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    7dd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    7dd8:	0799      	lsls	r1, r3, #30
    7dda:	d41f      	bmi.n	7e1c <mem_manage_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7ddc:	2500      	movs	r5, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    7dde:	4a1d      	ldr	r2, [pc, #116]	; (7e54 <mem_manage_fault+0xe0>)
    7de0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7de2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    7de6:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    7de8:	2300      	movs	r3, #0
    7dea:	7033      	strb	r3, [r6, #0]

	return reason;
}
    7dec:	4628      	mov	r0, r5
    7dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    7df2:	2145      	movs	r1, #69	; 0x45
    7df4:	481d      	ldr	r0, [pc, #116]	; (7e6c <mem_manage_fault+0xf8>)
    7df6:	f01f fd6c 	bl	278d2 <printk>
		uint32_t temp = SCB->MMFAR;
    7dfa:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    7dfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7dfe:	061a      	lsls	r2, r3, #24
    7e00:	d5d4      	bpl.n	7dac <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    7e02:	463a      	mov	r2, r7
    7e04:	2145      	movs	r1, #69	; 0x45
    7e06:	481a      	ldr	r0, [pc, #104]	; (7e70 <mem_manage_fault+0xfc>)
    7e08:	f01f fd63 	bl	278d2 <printk>
			if (from_hard_fault) {
    7e0c:	f1b8 0f00 	cmp.w	r8, #0
    7e10:	d0ce      	beq.n	7db0 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    7e12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7e18:	62a3      	str	r3, [r4, #40]	; 0x28
    7e1a:	e7c9      	b.n	7db0 <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    7e1c:	6863      	ldr	r3, [r4, #4]
    7e1e:	051a      	lsls	r2, r3, #20
    7e20:	d5dc      	bpl.n	7ddc <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    7e22:	4629      	mov	r1, r5
    7e24:	4638      	mov	r0, r7
    7e26:	f7ff febd 	bl	7ba4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    7e2a:	4605      	mov	r5, r0
    7e2c:	b118      	cbz	r0, 7e36 <mem_manage_fault+0xc2>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    7e2e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    7e32:	2502      	movs	r5, #2
    7e34:	e7d3      	b.n	7dde <mem_manage_fault+0x6a>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    7e36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7e38:	06db      	lsls	r3, r3, #27
    7e3a:	d5cf      	bpl.n	7ddc <mem_manage_fault+0x68>
    7e3c:	f44f 72a1 	mov.w	r2, #322	; 0x142
    7e40:	490c      	ldr	r1, [pc, #48]	; (7e74 <mem_manage_fault+0x100>)
    7e42:	480d      	ldr	r0, [pc, #52]	; (7e78 <mem_manage_fault+0x104>)
    7e44:	f01f fd45 	bl	278d2 <printk>
    7e48:	f44f 71a1 	mov.w	r1, #322	; 0x142
    7e4c:	4809      	ldr	r0, [pc, #36]	; (7e74 <mem_manage_fault+0x100>)
    7e4e:	f01f ffb9 	bl	27dc4 <assert_post_action>
    7e52:	e7c4      	b.n	7dde <mem_manage_fault+0x6a>
    7e54:	e000ed00 	.word	0xe000ed00
    7e58:	00031098 	.word	0x00031098
    7e5c:	000310b3 	.word	0x000310b3
    7e60:	000310eb 	.word	0x000310eb
    7e64:	0003113b 	.word	0x0003113b
    7e68:	0003115f 	.word	0x0003115f
    7e6c:	00031103 	.word	0x00031103
    7e70:	00031120 	.word	0x00031120
    7e74:	00031193 	.word	0x00031193
    7e78:	0003067f 	.word	0x0003067f

00007e7c <bus_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7e7c:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7e7e:	4c23      	ldr	r4, [pc, #140]	; (7f0c <bus_fault.isra.2+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7e80:	4606      	mov	r6, r0
    7e82:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    7e84:	4822      	ldr	r0, [pc, #136]	; (7f10 <bus_fault.isra.2+0x94>)
    7e86:	2145      	movs	r1, #69	; 0x45
    7e88:	f01f fd23 	bl	278d2 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7e8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    7e8e:	04d1      	lsls	r1, r2, #19
    7e90:	d503      	bpl.n	7e9a <bus_fault.isra.2+0x1e>
		PR_FAULT_INFO("  Stacking error");
    7e92:	2145      	movs	r1, #69	; 0x45
    7e94:	481f      	ldr	r0, [pc, #124]	; (7f14 <bus_fault.isra.2+0x98>)
    7e96:	f01f fd1c 	bl	278d2 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    7e9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7e9c:	051a      	lsls	r2, r3, #20
    7e9e:	d503      	bpl.n	7ea8 <bus_fault.isra.2+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    7ea0:	2145      	movs	r1, #69	; 0x45
    7ea2:	481d      	ldr	r0, [pc, #116]	; (7f18 <bus_fault.isra.2+0x9c>)
    7ea4:	f01f fd15 	bl	278d2 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    7ea8:	4c18      	ldr	r4, [pc, #96]	; (7f0c <bus_fault.isra.2+0x90>)
    7eaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7eac:	059b      	lsls	r3, r3, #22
    7eae:	d510      	bpl.n	7ed2 <bus_fault.isra.2+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    7eb0:	481a      	ldr	r0, [pc, #104]	; (7f1c <bus_fault.isra.2+0xa0>)
    7eb2:	2145      	movs	r1, #69	; 0x45
    7eb4:	f01f fd0d 	bl	278d2 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    7eb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    7eba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7ebc:	0418      	lsls	r0, r3, #16
    7ebe:	d508      	bpl.n	7ed2 <bus_fault.isra.2+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    7ec0:	2145      	movs	r1, #69	; 0x45
    7ec2:	4817      	ldr	r0, [pc, #92]	; (7f20 <bus_fault.isra.2+0xa4>)
    7ec4:	f01f fd05 	bl	278d2 <printk>
			if (from_hard_fault) {
    7ec8:	b11e      	cbz	r6, 7ed2 <bus_fault.isra.2+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    7eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7ecc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    7ed0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    7ed2:	4c0e      	ldr	r4, [pc, #56]	; (7f0c <bus_fault.isra.2+0x90>)
    7ed4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7ed6:	0559      	lsls	r1, r3, #21
    7ed8:	d503      	bpl.n	7ee2 <bus_fault.isra.2+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    7eda:	2145      	movs	r1, #69	; 0x45
    7edc:	4811      	ldr	r0, [pc, #68]	; (7f24 <bus_fault.isra.2+0xa8>)
    7ede:	f01f fcf8 	bl	278d2 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    7ee2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7ee4:	05da      	lsls	r2, r3, #23
    7ee6:	d50b      	bpl.n	7f00 <bus_fault.isra.2+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    7ee8:	480f      	ldr	r0, [pc, #60]	; (7f28 <bus_fault.isra.2+0xac>)
    7eea:	2145      	movs	r1, #69	; 0x45
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7eec:	f01f fcf1 	bl	278d2 <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7ef0:	4a06      	ldr	r2, [pc, #24]	; (7f0c <bus_fault.isra.2+0x90>)
    7ef2:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    7ef4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7ef6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    7efa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7efc:	7028      	strb	r0, [r5, #0]

	return reason;
}
    7efe:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    7f00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7f02:	049b      	lsls	r3, r3, #18
    7f04:	d5f4      	bpl.n	7ef0 <bus_fault.isra.2+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7f06:	2145      	movs	r1, #69	; 0x45
    7f08:	4808      	ldr	r0, [pc, #32]	; (7f2c <bus_fault.isra.2+0xb0>)
    7f0a:	e7ef      	b.n	7eec <bus_fault.isra.2+0x70>
    7f0c:	e000ed00 	.word	0xe000ed00
    7f10:	00030ff2 	.word	0x00030ff2
    7f14:	0003100d 	.word	0x0003100d
    7f18:	000310eb 	.word	0x000310eb
    7f1c:	00031023 	.word	0x00031023
    7f20:	00031041 	.word	0x00031041
    7f24:	0003105b 	.word	0x0003105b
    7f28:	0003107b 	.word	0x0003107b
    7f2c:	0003115f 	.word	0x0003115f

00007f30 <usage_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    7f30:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7f32:	4c1d      	ldr	r4, [pc, #116]	; (7fa8 <usage_fault.isra.3+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    7f34:	481d      	ldr	r0, [pc, #116]	; (7fac <usage_fault.isra.3+0x7c>)
    7f36:	2145      	movs	r1, #69	; 0x45
    7f38:	f01f fccb 	bl	278d2 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7f3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    7f3e:	0193      	lsls	r3, r2, #6
    7f40:	d503      	bpl.n	7f4a <usage_fault.isra.3+0x1a>
		PR_FAULT_INFO("  Division by zero");
    7f42:	2145      	movs	r1, #69	; 0x45
    7f44:	481a      	ldr	r0, [pc, #104]	; (7fb0 <usage_fault.isra.3+0x80>)
    7f46:	f01f fcc4 	bl	278d2 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    7f4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7f4c:	01dc      	lsls	r4, r3, #7
    7f4e:	d503      	bpl.n	7f58 <usage_fault.isra.3+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    7f50:	2145      	movs	r1, #69	; 0x45
    7f52:	4818      	ldr	r0, [pc, #96]	; (7fb4 <usage_fault.isra.3+0x84>)
    7f54:	f01f fcbd 	bl	278d2 <printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    7f58:	4c13      	ldr	r4, [pc, #76]	; (7fa8 <usage_fault.isra.3+0x78>)
    7f5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    7f5c:	0310      	lsls	r0, r2, #12
    7f5e:	d503      	bpl.n	7f68 <usage_fault.isra.3+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
    7f60:	2145      	movs	r1, #69	; 0x45
    7f62:	4815      	ldr	r0, [pc, #84]	; (7fb8 <usage_fault.isra.3+0x88>)
    7f64:	f01f fcb5 	bl	278d2 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    7f68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7f6a:	0359      	lsls	r1, r3, #13
    7f6c:	d503      	bpl.n	7f76 <usage_fault.isra.3+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    7f6e:	2145      	movs	r1, #69	; 0x45
    7f70:	4812      	ldr	r0, [pc, #72]	; (7fbc <usage_fault.isra.3+0x8c>)
    7f72:	f01f fcae 	bl	278d2 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    7f76:	4c0c      	ldr	r4, [pc, #48]	; (7fa8 <usage_fault.isra.3+0x78>)
    7f78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    7f7a:	0392      	lsls	r2, r2, #14
    7f7c:	d503      	bpl.n	7f86 <usage_fault.isra.3+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    7f7e:	2145      	movs	r1, #69	; 0x45
    7f80:	480f      	ldr	r0, [pc, #60]	; (7fc0 <usage_fault.isra.3+0x90>)
    7f82:	f01f fca6 	bl	278d2 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    7f86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7f88:	03db      	lsls	r3, r3, #15
    7f8a:	d503      	bpl.n	7f94 <usage_fault.isra.3+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    7f8c:	2145      	movs	r1, #69	; 0x45
    7f8e:	480d      	ldr	r0, [pc, #52]	; (7fc4 <usage_fault.isra.3+0x94>)
    7f90:	f01f fc9f 	bl	278d2 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    7f94:	4a04      	ldr	r2, [pc, #16]	; (7fa8 <usage_fault.isra.3+0x78>)
    7f96:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7f98:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    7f9c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    7fa0:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    7fa2:	2000      	movs	r0, #0
    7fa4:	bd10      	pop	{r4, pc}
    7fa6:	bf00      	nop
    7fa8:	e000ed00 	.word	0xe000ed00
    7fac:	000311cd 	.word	0x000311cd
    7fb0:	000311ea 	.word	0x000311ea
    7fb4:	00031202 	.word	0x00031202
    7fb8:	00031221 	.word	0x00031221
    7fbc:	00031244 	.word	0x00031244
    7fc0:	0003126e 	.word	0x0003126e
    7fc4:	0003128d 	.word	0x0003128d

00007fc8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    7fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7fcc:	4b54      	ldr	r3, [pc, #336]	; (8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
    7fce:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    7fd2:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7fd4:	f3c8 0708 	ubfx	r7, r8, #0, #9
    7fd8:	2600      	movs	r6, #0
    7fda:	f386 8811 	msr	BASEPRI, r6
    7fde:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    7fe2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    7fe6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    7fea:	d107      	bne.n	7ffc <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    7fec:	f002 030c 	and.w	r3, r2, #12
    7ff0:	2b08      	cmp	r3, #8
    7ff2:	d110      	bne.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    7ff4:	2145      	movs	r1, #69	; 0x45
    7ff6:	484b      	ldr	r0, [pc, #300]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    7ff8:	f01f fc6b 	bl	278d2 <printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    7ffc:	f240 32c5 	movw	r2, #965	; 0x3c5
    8000:	4949      	ldr	r1, [pc, #292]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    8002:	484a      	ldr	r0, [pc, #296]	; (812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>)
    8004:	f01f fc65 	bl	278d2 <printk>
    8008:	f240 31c5 	movw	r1, #965	; 0x3c5
    800c:	4846      	ldr	r0, [pc, #280]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    800e:	f01f fed9 	bl	27dc4 <assert_post_action>
    8012:	2400      	movs	r4, #0
    8014:	e006      	b.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    8016:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    8018:	bf4e      	itee	mi
    801a:	460c      	movmi	r4, r1
			ptr_esf = (z_arch_esf_t *)msp;
    801c:	4604      	movpl	r4, r0
			*nested_exc = true;
    801e:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
    8020:	2c00      	cmp	r4, #0
    8022:	d0eb      	beq.n	7ffc <z_arm_fault+0x34>
	*recoverable = false;
    8024:	2300      	movs	r3, #0
	switch (fault) {
    8026:	1efa      	subs	r2, r7, #3
	*recoverable = false;
    8028:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    802c:	461d      	mov	r5, r3
    802e:	4613      	mov	r3, r2
    8030:	2b09      	cmp	r3, #9
    8032:	d862      	bhi.n	80fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfa>
    8034:	e8df f003 	tbb	[pc, r3]
    8038:	345a5605 	.word	0x345a5605
    803c:	61616161 	.word	0x61616161
    8040:	5e61      	.short	0x5e61
	PR_FAULT_INFO("***** HARD FAULT *****");
    8042:	2145      	movs	r1, #69	; 0x45
    8044:	483a      	ldr	r0, [pc, #232]	; (8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>)
    8046:	f01f fc44 	bl	278d2 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    804a:	4b35      	ldr	r3, [pc, #212]	; (8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
	*recoverable = false;
    804c:	f88d 5007 	strb.w	r5, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    8050:	6add      	ldr	r5, [r3, #44]	; 0x2c
    8052:	f015 0502 	ands.w	r5, r5, #2
    8056:	d005      	beq.n	8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
		PR_EXC("  Bus fault on vector table read");
    8058:	4836      	ldr	r0, [pc, #216]	; (8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>)
    805a:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
    805c:	f01f fc39 	bl	278d2 <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    8060:	2500      	movs	r5, #0
    8062:	e020      	b.n	80a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    8064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8066:	005b      	lsls	r3, r3, #1
    8068:	d51d      	bpl.n	80a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa6>
		PR_EXC("  Fault escalation (see below)");
    806a:	2145      	movs	r1, #69	; 0x45
    806c:	4832      	ldr	r0, [pc, #200]	; (8138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>)
    806e:	f01f fc30 	bl	278d2 <printk>
		if (SCB_MMFSR != 0) {
    8072:	4b32      	ldr	r3, [pc, #200]	; (813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>)
    8074:	781b      	ldrb	r3, [r3, #0]
    8076:	b133      	cbz	r3, 8086 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x86>
			reason = mem_manage_fault(esf, 1, recoverable);
    8078:	f10d 0207 	add.w	r2, sp, #7
    807c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    807e:	4620      	mov	r0, r4
    8080:	f7ff fe78 	bl	7d74 <mem_manage_fault>
    8084:	e00e      	b.n	80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>
		} else if (SCB_BFSR != 0) {
    8086:	4b2e      	ldr	r3, [pc, #184]	; (8140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>)
    8088:	781b      	ldrb	r3, [r3, #0]
    808a:	b12b      	cbz	r3, 8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>
			reason = bus_fault(esf, 1, recoverable);
    808c:	f10d 0107 	add.w	r1, sp, #7
    8090:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    8092:	f7ff fef3 	bl	7e7c <bus_fault.isra.2>
    8096:	e005      	b.n	80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>
		} else if (SCB_UFSR != 0) {
    8098:	4b2a      	ldr	r3, [pc, #168]	; (8144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>)
    809a:	881b      	ldrh	r3, [r3, #0]
    809c:	b29b      	uxth	r3, r3
    809e:	b113      	cbz	r3, 80a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa6>
			reason = usage_fault(esf);
    80a0:	f7ff ff46 	bl	7f30 <usage_fault.isra.3>
    80a4:	4605      	mov	r5, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    80a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80aa:	b9c3      	cbnz	r3, 80de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xde>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    80ac:	aa02      	add	r2, sp, #8
    80ae:	f104 0720 	add.w	r7, r4, #32
    80b2:	6820      	ldr	r0, [r4, #0]
    80b4:	6861      	ldr	r1, [r4, #4]
    80b6:	4613      	mov	r3, r2
    80b8:	c303      	stmia	r3!, {r0, r1}
    80ba:	3408      	adds	r4, #8
    80bc:	42bc      	cmp	r4, r7
    80be:	461a      	mov	r2, r3
    80c0:	d1f7      	bne.n	80b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb2>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    80c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    80c4:	b336      	cbz	r6, 8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    80c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
    80ca:	b922      	cbnz	r2, 80d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    80cc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    80d0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    80d4:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    80d6:	a902      	add	r1, sp, #8
    80d8:	4628      	mov	r0, r5
    80da:	f7ff fdb5 	bl	7c48 <z_arm_fatal_error>
}
    80de:	b00a      	add	sp, #40	; 0x28
    80e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    80e4:	f10d 0207 	add.w	r2, sp, #7
    80e8:	2100      	movs	r1, #0
    80ea:	e7c8      	b.n	807e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e>
		reason = bus_fault(esf, 0, recoverable);
    80ec:	f10d 0107 	add.w	r1, sp, #7
    80f0:	2000      	movs	r0, #0
    80f2:	e7ce      	b.n	8092 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x92>
	PR_FAULT_INFO(
    80f4:	2145      	movs	r1, #69	; 0x45
    80f6:	4814      	ldr	r0, [pc, #80]	; (8148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x148>)
    80f8:	e7b0      	b.n	805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>
	PR_FAULT_INFO("***** %s %d) *****",
    80fa:	4914      	ldr	r1, [pc, #80]	; (814c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>)
    80fc:	4a14      	ldr	r2, [pc, #80]	; (8150 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x150>)
    80fe:	4815      	ldr	r0, [pc, #84]	; (8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>)
    8100:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    8104:	bf08      	it	eq
    8106:	460a      	moveq	r2, r1
    8108:	f1a7 0310 	sub.w	r3, r7, #16
    810c:	2145      	movs	r1, #69	; 0x45
    810e:	f01f fbe0 	bl	278d2 <printk>
    8112:	e7a5      	b.n	8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    8114:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    8118:	f023 0301 	bic.w	r3, r3, #1
    811c:	e7da      	b.n	80d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>
    811e:	bf00      	nop
    8120:	e000ed00 	.word	0xe000ed00
    8124:	000312eb 	.word	0x000312eb
    8128:	00031193 	.word	0x00031193
    812c:	0003067f 	.word	0x0003067f
    8130:	0003131b 	.word	0x0003131b
    8134:	00031337 	.word	0x00031337
    8138:	0003135d 	.word	0x0003135d
    813c:	e000ed28 	.word	0xe000ed28
    8140:	e000ed29 	.word	0xe000ed29
    8144:	e000ed2a 	.word	0xe000ed2a
    8148:	00031381 	.word	0x00031381
    814c:	000312bd 	.word	0x000312bd
    8150:	000312d2 	.word	0x000312d2
    8154:	000313bc 	.word	0x000313bc

00008158 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    8158:	4a02      	ldr	r2, [pc, #8]	; (8164 <z_arm_fault_init+0xc>)
    815a:	6953      	ldr	r3, [r2, #20]
    815c:	f043 0310 	orr.w	r3, r3, #16
    8160:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    8162:	4770      	bx	lr
    8164:	e000ed00 	.word	0xe000ed00

00008168 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    8168:	4b04      	ldr	r3, [pc, #16]	; (817c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    816a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    816c:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    816e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    8170:	d003      	beq.n	817a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    8172:	4903      	ldr	r1, [pc, #12]	; (8180 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    8174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    8178:	600a      	str	r2, [r1, #0]

0000817a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    817a:	4770      	bx	lr
	ldr r3, =_kernel
    817c:	20005490 	.word	0x20005490
	ldr r1, =_SCS_ICSR
    8180:	e000ed04 	.word	0xe000ed04

00008184 <z_arm_interrupt_init>:
    8184:	4804      	ldr	r0, [pc, #16]	; (8198 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    8186:	2300      	movs	r3, #0
    8188:	2120      	movs	r1, #32
    818a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    818c:	3301      	adds	r3, #1
    818e:	2b30      	cmp	r3, #48	; 0x30
    8190:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    8194:	d1f9      	bne.n	818a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    8196:	4770      	bx	lr
    8198:	e000e100 	.word	0xe000e100

0000819c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    819c:	b508      	push	{r3, lr}
	if (_current == thread) {
    819e:	4b0e      	ldr	r3, [pc, #56]	; (81d8 <z_impl_k_thread_abort+0x3c>)
    81a0:	689b      	ldr	r3, [r3, #8]
    81a2:	4283      	cmp	r3, r0
    81a4:	d107      	bne.n	81b6 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    81a6:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    81aa:	b193      	cbz	r3, 81d2 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    81ac:	4a0b      	ldr	r2, [pc, #44]	; (81dc <z_impl_k_thread_abort+0x40>)
    81ae:	6853      	ldr	r3, [r2, #4]
    81b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    81b4:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    81b6:	f01c fadf 	bl	24778 <z_thread_single_abort>
	__asm__ volatile(
    81ba:	f04f 0320 	mov.w	r3, #32
    81be:	f3ef 8011 	mrs	r0, BASEPRI
    81c2:	f383 8811 	msr	BASEPRI, r3
    81c6:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    81ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    81ce:	f025 befd 	b.w	2dfcc <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    81d2:	f01d f90f 	bl	253f4 <z_self_abort>
    81d6:	bf00      	nop
    81d8:	20005490 	.word	0x20005490
    81dc:	e000ed00 	.word	0xe000ed00

000081e0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    81e0:	4b02      	ldr	r3, [pc, #8]	; (81ec <z_arm_configure_static_mpu_regions+0xc>)
    81e2:	4a03      	ldr	r2, [pc, #12]	; (81f0 <z_arm_configure_static_mpu_regions+0x10>)
    81e4:	4803      	ldr	r0, [pc, #12]	; (81f4 <z_arm_configure_static_mpu_regions+0x14>)
    81e6:	2101      	movs	r1, #1
    81e8:	f000 b8c0 	b.w	836c <arm_core_mpu_configure_static_mpu_regions>
    81ec:	20040000 	.word	0x20040000
    81f0:	20000000 	.word	0x20000000
    81f4:	0002f6dc 	.word	0x0002f6dc

000081f8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    81f8:	6f42      	ldr	r2, [r0, #116]	; 0x74
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    81fa:	4b05      	ldr	r3, [pc, #20]	; (8210 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    81fc:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    81fe:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    8200:	4a04      	ldr	r2, [pc, #16]	; (8214 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    8202:	2120      	movs	r1, #32
    8204:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    8208:	4618      	mov	r0, r3
    820a:	2101      	movs	r1, #1
    820c:	f000 b8cc 	b.w	83a8 <arm_core_mpu_configure_dynamic_mpu_regions>
    8210:	200039f8 	.word	0x200039f8
    8214:	150b0000 	.word	0x150b0000

00008218 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    8218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    821a:	4f22      	ldr	r7, [pc, #136]	; (82a4 <mpu_configure_regions+0x8c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    821c:	2600      	movs	r6, #0
    821e:	428e      	cmp	r6, r1
    8220:	da0f      	bge.n	8242 <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
    8222:	6844      	ldr	r4, [r0, #4]
    8224:	2c00      	cmp	r4, #0
    8226:	d039      	beq.n	829c <mpu_configure_regions+0x84>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    8228:	b19b      	cbz	r3, 8252 <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    822a:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    822e:	ea14 0f0c 	tst.w	r4, ip
    8232:	d008      	beq.n	8246 <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    8234:	481c      	ldr	r0, [pc, #112]	; (82a8 <mpu_configure_regions+0x90>)
    8236:	4632      	mov	r2, r6
    8238:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    823a:	f01f fb4a 	bl	278d2 <printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    823e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    8242:	4610      	mov	r0, r2
    8244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    8246:	2c1f      	cmp	r4, #31
    8248:	d9f4      	bls.n	8234 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
    824a:	6805      	ldr	r5, [r0, #0]
		&&
    824c:	ea1c 0f05 	tst.w	ip, r5
    8250:	d1f0      	bne.n	8234 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    8252:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    8254:	b2d2      	uxtb	r2, r2
	region_conf.base = new_region->start;
    8256:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    8258:	f8d0 c008 	ldr.w	ip, [r0, #8]
    825c:	d90f      	bls.n	827e <mpu_configure_regions+0x66>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    825e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    8262:	d80e      	bhi.n	8282 <mpu_configure_regions+0x6a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    8264:	3c01      	subs	r4, #1
    8266:	fab4 f484 	clz	r4, r4
    826a:	f1c4 041f 	rsb	r4, r4, #31
    826e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    8270:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    8272:	ea4c 0404 	orr.w	r4, ip, r4
    8276:	d906      	bls.n	8286 <mpu_configure_regions+0x6e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    8278:	2145      	movs	r1, #69	; 0x45
    827a:	480c      	ldr	r0, [pc, #48]	; (82ac <mpu_configure_regions+0x94>)
    827c:	e7dd      	b.n	823a <mpu_configure_regions+0x22>
		return REGION_32B;
    827e:	2408      	movs	r4, #8
    8280:	e7f6      	b.n	8270 <mpu_configure_regions+0x58>
		return REGION_4G;
    8282:	243e      	movs	r4, #62	; 0x3e
    8284:	e7f4      	b.n	8270 <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8286:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    828a:	4315      	orrs	r5, r2
    828c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    8290:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    8294:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8296:	60fd      	str	r5, [r7, #12]
		reg_index++;
    8298:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    829a:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    829c:	3601      	adds	r6, #1
    829e:	300c      	adds	r0, #12
    82a0:	e7bd      	b.n	821e <mpu_configure_regions+0x6>
    82a2:	bf00      	nop
    82a4:	e000ed90 	.word	0xe000ed90
    82a8:	00031418 	.word	0x00031418
    82ac:	00031440 	.word	0x00031440

000082b0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    82b0:	4b03      	ldr	r3, [pc, #12]	; (82c0 <arm_core_mpu_enable+0x10>)
    82b2:	2205      	movs	r2, #5
    82b4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    82b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    82ba:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    82be:	4770      	bx	lr
    82c0:	e000ed90 	.word	0xe000ed90

000082c4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    82c4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    82c8:	4b01      	ldr	r3, [pc, #4]	; (82d0 <arm_core_mpu_disable+0xc>)
    82ca:	2200      	movs	r2, #0
    82cc:	605a      	str	r2, [r3, #4]
}
    82ce:	4770      	bx	lr
    82d0:	e000ed90 	.word	0xe000ed90

000082d4 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    82d4:	4920      	ldr	r1, [pc, #128]	; (8358 <arm_mpu_init+0x84>)
{
    82d6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    82d8:	680c      	ldr	r4, [r1, #0]
    82da:	2c08      	cmp	r4, #8
    82dc:	d90d      	bls.n	82fa <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    82de:	f240 123f 	movw	r2, #319	; 0x13f
    82e2:	491e      	ldr	r1, [pc, #120]	; (835c <arm_mpu_init+0x88>)
    82e4:	481e      	ldr	r0, [pc, #120]	; (8360 <arm_mpu_init+0x8c>)
    82e6:	f01f faf4 	bl	278d2 <printk>
    82ea:	481c      	ldr	r0, [pc, #112]	; (835c <arm_mpu_init+0x88>)
    82ec:	f240 113f 	movw	r1, #319	; 0x13f
    82f0:	f01f fd68 	bl	27dc4 <assert_post_action>
    82f4:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    82f8:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    82fa:	f7ff ffe3 	bl	82c4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    82fe:	6848      	ldr	r0, [r1, #4]
    8300:	4918      	ldr	r1, [pc, #96]	; (8364 <arm_mpu_init+0x90>)
    8302:	2200      	movs	r2, #0
    8304:	4294      	cmp	r4, r2
    8306:	f100 000c 	add.w	r0, r0, #12
    830a:	d115      	bne.n	8338 <arm_mpu_init+0x64>
	static_regions_num = mpu_config.num_regions;
    830c:	4b16      	ldr	r3, [pc, #88]	; (8368 <arm_mpu_init+0x94>)
    830e:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    8310:	f7ff ffce 	bl	82b0 <arm_core_mpu_enable>
	__ASSERT(
    8314:	680b      	ldr	r3, [r1, #0]
    8316:	f3c3 2307 	ubfx	r3, r3, #8, #8
    831a:	2b08      	cmp	r3, #8
    831c:	d00a      	beq.n	8334 <arm_mpu_init+0x60>
    831e:	490f      	ldr	r1, [pc, #60]	; (835c <arm_mpu_init+0x88>)
    8320:	480f      	ldr	r0, [pc, #60]	; (8360 <arm_mpu_init+0x8c>)
    8322:	f44f 72b2 	mov.w	r2, #356	; 0x164
    8326:	f01f fad4 	bl	278d2 <printk>
    832a:	f44f 71b2 	mov.w	r1, #356	; 0x164
    832e:	480b      	ldr	r0, [pc, #44]	; (835c <arm_mpu_init+0x88>)
    8330:	f01f fd48 	bl	27dc4 <assert_post_action>
	return 0;
    8334:	2000      	movs	r0, #0
    8336:	e7df      	b.n	82f8 <arm_mpu_init+0x24>
	MPU->RNR = index;
    8338:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    833a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    833e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    8342:	4313      	orrs	r3, r2
    8344:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8348:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    834a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    834e:	f043 0301 	orr.w	r3, r3, #1
    8352:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    8354:	3201      	adds	r2, #1
    8356:	e7d5      	b.n	8304 <arm_mpu_init+0x30>
    8358:	0002f6e8 	.word	0x0002f6e8
    835c:	000313d8 	.word	0x000313d8
    8360:	0003067f 	.word	0x0003067f
    8364:	e000ed90 	.word	0xe000ed90
    8368:	200056f0 	.word	0x200056f0

0000836c <arm_core_mpu_configure_static_mpu_regions>:
{
    836c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    836e:	4c0b      	ldr	r4, [pc, #44]	; (839c <arm_core_mpu_configure_static_mpu_regions+0x30>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    8370:	2301      	movs	r3, #1
    8372:	7822      	ldrb	r2, [r4, #0]
    8374:	f7ff ff50 	bl	8218 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    8378:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    837a:	3016      	adds	r0, #22
    837c:	d10c      	bne.n	8398 <arm_core_mpu_configure_static_mpu_regions+0x2c>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    837e:	4908      	ldr	r1, [pc, #32]	; (83a0 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    8380:	4808      	ldr	r0, [pc, #32]	; (83a4 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    8382:	f240 1205 	movw	r2, #261	; 0x105
    8386:	f01f faa4 	bl	278d2 <printk>
    838a:	f240 1105 	movw	r1, #261	; 0x105
    838e:	4804      	ldr	r0, [pc, #16]	; (83a0 <arm_core_mpu_configure_static_mpu_regions+0x34>)
}
    8390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    8394:	f01f bd16 	b.w	27dc4 <assert_post_action>
}
    8398:	bd10      	pop	{r4, pc}
    839a:	bf00      	nop
    839c:	200056f0 	.word	0x200056f0
    83a0:	000313d8 	.word	0x000313d8
    83a4:	0003067f 	.word	0x0003067f

000083a8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    83a8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    83aa:	4a0f      	ldr	r2, [pc, #60]	; (83e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    83ac:	2300      	movs	r3, #0
    83ae:	7812      	ldrb	r2, [r2, #0]
    83b0:	f7ff ff32 	bl	8218 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    83b4:	f110 0f16 	cmn.w	r0, #22
    83b8:	d008      	beq.n	83cc <arm_core_mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    83ba:	4b0c      	ldr	r3, [pc, #48]	; (83ec <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
    83bc:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    83be:	2807      	cmp	r0, #7
    83c0:	dd00      	ble.n	83c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    83c2:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    83c4:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    83c6:	611a      	str	r2, [r3, #16]
    83c8:	3001      	adds	r0, #1
    83ca:	e7f8      	b.n	83be <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    83cc:	4908      	ldr	r1, [pc, #32]	; (83f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
    83ce:	4809      	ldr	r0, [pc, #36]	; (83f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    83d0:	f44f 7292 	mov.w	r2, #292	; 0x124
    83d4:	f01f fa7d 	bl	278d2 <printk>
    83d8:	f44f 7192 	mov.w	r1, #292	; 0x124
    83dc:	4804      	ldr	r0, [pc, #16]	; (83f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
}
    83de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    83e2:	f01f bcef 	b.w	27dc4 <assert_post_action>
    83e6:	bf00      	nop
    83e8:	200056f0 	.word	0x200056f0
    83ec:	e000ed90 	.word	0xe000ed90
    83f0:	000313d8 	.word	0x000313d8
    83f4:	0003067f 	.word	0x0003067f

000083f8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    83f8:	4b01      	ldr	r3, [pc, #4]	; (8400 <__stdout_hook_install+0x8>)
    83fa:	6018      	str	r0, [r3, #0]
}
    83fc:	4770      	bx	lr
    83fe:	bf00      	nop
    8400:	20001230 	.word	0x20001230

00008404 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    8404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8406:	4f0a      	ldr	r7, [pc, #40]	; (8430 <z_impl_zephyr_write_stdout+0x2c>)
    8408:	460e      	mov	r6, r1
    840a:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    840c:	f1c0 0501 	rsb	r5, r0, #1
    8410:	192b      	adds	r3, r5, r4
    8412:	429e      	cmp	r6, r3
    8414:	dc01      	bgt.n	841a <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    8416:	4630      	mov	r0, r6
    8418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    841a:	7863      	ldrb	r3, [r4, #1]
    841c:	2b0a      	cmp	r3, #10
    841e:	d102      	bne.n	8426 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    8420:	683b      	ldr	r3, [r7, #0]
    8422:	200d      	movs	r0, #13
    8424:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    8426:	683b      	ldr	r3, [r7, #0]
    8428:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    842c:	4798      	blx	r3
    842e:	e7ef      	b.n	8410 <z_impl_zephyr_write_stdout+0xc>
    8430:	20001230 	.word	0x20001230

00008434 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
    8434:	b538      	push	{r3, r4, r5, lr}
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
    8436:	f04f 32ff 	mov.w	r2, #4294967295
{
    843a:	4605      	mov	r5, r0
	sys_sem_take(&heap_sem, K_FOREVER);
    843c:	f04f 33ff 	mov.w	r3, #4294967295
    8440:	480a      	ldr	r0, [pc, #40]	; (846c <_sbrk+0x38>)
    8442:	f01f fab9 	bl	279b8 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
    8446:	4a0a      	ldr	r2, [pc, #40]	; (8470 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    8448:	490a      	ldr	r1, [pc, #40]	; (8474 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
    844a:	6814      	ldr	r4, [r2, #0]
	} else {
		ret = (void *)-1;
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
    844c:	4807      	ldr	r0, [pc, #28]	; (846c <_sbrk+0x38>)
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    844e:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
    8452:	4425      	add	r5, r4
    8454:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    8458:	429d      	cmp	r5, r3
	ptr = ((char *)HEAP_BASE) + heap_sz;
    845a:	bf36      	itet	cc
    845c:	1864      	addcc	r4, r4, r1
		ret = (void *)-1;
    845e:	f04f 34ff 	movcs.w	r4, #4294967295
		heap_sz += count;
    8462:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
    8464:	f01f faa3 	bl	279ae <sys_sem_give>

	return ret;
}
    8468:	4620      	mov	r0, r4
    846a:	bd38      	pop	{r3, r4, r5, pc}
    846c:	20001e90 	.word	0x20001e90
    8470:	20003a04 	.word	0x20003a04
    8474:	2000ab98 	.word	0x2000ab98

00008478 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    8478:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
    847a:	211d      	movs	r1, #29
    847c:	4804      	ldr	r0, [pc, #16]	; (8490 <__chk_fail+0x18>)
    847e:	f7ff ffc1 	bl	8404 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    8482:	4040      	eors	r0, r0
    8484:	f380 8811 	msr	BASEPRI, r0
    8488:	f04f 0003 	mov.w	r0, #3
    848c:	df02      	svc	2
	CODE_UNREACHABLE;
    848e:	bf00      	nop
    8490:	0003146b 	.word	0x0003146b

00008494 <nordicsemi_nrf52_init>:
    8494:	f04f 0320 	mov.w	r3, #32
    8498:	f3ef 8211 	mrs	r2, BASEPRI
    849c:	f383 8811 	msr	BASEPRI, r3
    84a0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    84a4:	4906      	ldr	r1, [pc, #24]	; (84c0 <nordicsemi_nrf52_init+0x2c>)
    84a6:	2301      	movs	r3, #1
    84a8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    84ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    84b0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    84b4:	f382 8811 	msr	BASEPRI, r2
    84b8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    84bc:	2000      	movs	r0, #0
    84be:	4770      	bx	lr
    84c0:	4001e000 	.word	0x4001e000

000084c4 <sys_arch_reboot>:
    *p_gpregret = val;
    84c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84c8:	b2c0      	uxtb	r0, r0
    84ca:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    84ce:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    84d2:	4905      	ldr	r1, [pc, #20]	; (84e8 <sys_arch_reboot+0x24>)
    84d4:	4b05      	ldr	r3, [pc, #20]	; (84ec <sys_arch_reboot+0x28>)
    84d6:	68ca      	ldr	r2, [r1, #12]
    84d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    84dc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    84de:	60cb      	str	r3, [r1, #12]
    84e0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    84e4:	bf00      	nop
    84e6:	e7fd      	b.n	84e4 <sys_arch_reboot+0x20>
    84e8:	e000ed00 	.word	0xe000ed00
    84ec:	05fa0004 	.word	0x05fa0004

000084f0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    84f0:	b120      	cbz	r0, 84fc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    84f2:	4b03      	ldr	r3, [pc, #12]	; (8500 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    84f4:	0180      	lsls	r0, r0, #6
    84f6:	f043 0301 	orr.w	r3, r3, #1
    84fa:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    84fc:	4770      	bx	lr
    84fe:	bf00      	nop
    8500:	0002f320 	.word	0x0002f320

00008504 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    8504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8508:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    850c:	07db      	lsls	r3, r3, #31
    850e:	d52e      	bpl.n	856e <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    8510:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8514:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    8518:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    851c:	2b07      	cmp	r3, #7
    851e:	d126      	bne.n	856e <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8520:	4b14      	ldr	r3, [pc, #80]	; (8574 <board_nrf52840dongle_nrf52840_init+0x70>)
    8522:	2201      	movs	r2, #1
    8524:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    8528:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    852c:	2a00      	cmp	r2, #0
    852e:	d0fb      	beq.n	8528 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    8530:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    8534:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    8538:	f022 0207 	bic.w	r2, r2, #7
    853c:	f042 0204 	orr.w	r2, r2, #4
		NRF_UICR->REGOUT0 =
    8540:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    8544:	2200      	movs	r2, #0
    8546:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    854a:	4a0a      	ldr	r2, [pc, #40]	; (8574 <board_nrf52840dongle_nrf52840_init+0x70>)
    854c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    8550:	2b00      	cmp	r3, #0
    8552:	d0fb      	beq.n	854c <board_nrf52840dongle_nrf52840_init+0x48>
    8554:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8558:	4907      	ldr	r1, [pc, #28]	; (8578 <board_nrf52840dongle_nrf52840_init+0x74>)
    855a:	4b08      	ldr	r3, [pc, #32]	; (857c <board_nrf52840dongle_nrf52840_init+0x78>)
    855c:	68ca      	ldr	r2, [r1, #12]
    855e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8562:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8564:	60cb      	str	r3, [r1, #12]
    8566:	f3bf 8f4f 	dsb	sy
    __NOP();
    856a:	bf00      	nop
    856c:	e7fd      	b.n	856a <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    856e:	2000      	movs	r0, #0
    8570:	4770      	bx	lr
    8572:	bf00      	nop
    8574:	4001e000 	.word	0x4001e000
    8578:	e000ed00 	.word	0xe000ed00
    857c:	05fa0004 	.word	0x05fa0004

00008580 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    8580:	2940      	cmp	r1, #64	; 0x40
    8582:	4b0e      	ldr	r3, [pc, #56]	; (85bc <bt_hex_real+0x3c>)
{
    8584:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    8586:	bf28      	it	cs
    8588:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    858a:	4c0d      	ldr	r4, [pc, #52]	; (85c0 <bt_hex_real+0x40>)
    858c:	1846      	adds	r6, r0, r1
    858e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    8590:	42b0      	cmp	r0, r6
    8592:	f103 0302 	add.w	r3, r3, #2
    8596:	d104      	bne.n	85a2 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    8598:	2300      	movs	r3, #0
    859a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    859e:	4807      	ldr	r0, [pc, #28]	; (85bc <bt_hex_real+0x3c>)
    85a0:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    85a2:	7802      	ldrb	r2, [r0, #0]
    85a4:	0912      	lsrs	r2, r2, #4
    85a6:	5ca2      	ldrb	r2, [r4, r2]
    85a8:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    85ac:	f810 2b01 	ldrb.w	r2, [r0], #1
    85b0:	f002 020f 	and.w	r2, r2, #15
    85b4:	5ca2      	ldrb	r2, [r4, r2]
    85b6:	f803 2c01 	strb.w	r2, [r3, #-1]
    85ba:	e7e9      	b.n	8590 <bt_hex_real+0x10>
    85bc:	200056f1 	.word	0x200056f1
    85c0:	000314e8 	.word	0x000314e8

000085c4 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    85c4:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    85c6:	7803      	ldrb	r3, [r0, #0]
    85c8:	b08b      	sub	sp, #44	; 0x2c
    85ca:	4604      	mov	r4, r0
    85cc:	ad07      	add	r5, sp, #28
    85ce:	2b03      	cmp	r3, #3
    85d0:	d821      	bhi.n	8616 <bt_addr_le_str_real+0x52>
    85d2:	e8df f003 	tbb	[pc, r3]
    85d6:	1a02      	.short	0x1a02
    85d8:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    85da:	4912      	ldr	r1, [pc, #72]	; (8624 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    85dc:	4628      	mov	r0, r5
    85de:	f025 ffcd 	bl	2e57c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    85e2:	7863      	ldrb	r3, [r4, #1]
    85e4:	9304      	str	r3, [sp, #16]
    85e6:	78a3      	ldrb	r3, [r4, #2]
    85e8:	9303      	str	r3, [sp, #12]
    85ea:	78e3      	ldrb	r3, [r4, #3]
    85ec:	9302      	str	r3, [sp, #8]
    85ee:	7923      	ldrb	r3, [r4, #4]
    85f0:	9301      	str	r3, [sp, #4]
    85f2:	7963      	ldrb	r3, [r4, #5]
    85f4:	9300      	str	r3, [sp, #0]
    85f6:	9505      	str	r5, [sp, #20]
    85f8:	79a3      	ldrb	r3, [r4, #6]
    85fa:	4a0b      	ldr	r2, [pc, #44]	; (8628 <bt_addr_le_str_real+0x64>)
    85fc:	480b      	ldr	r0, [pc, #44]	; (862c <bt_addr_le_str_real+0x68>)
    85fe:	211e      	movs	r1, #30
    8600:	f01f f974 	bl	278ec <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    8604:	4809      	ldr	r0, [pc, #36]	; (862c <bt_addr_le_str_real+0x68>)
    8606:	b00b      	add	sp, #44	; 0x2c
    8608:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    860a:	4909      	ldr	r1, [pc, #36]	; (8630 <bt_addr_le_str_real+0x6c>)
    860c:	e7e6      	b.n	85dc <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    860e:	4909      	ldr	r1, [pc, #36]	; (8634 <bt_addr_le_str_real+0x70>)
    8610:	e7e4      	b.n	85dc <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    8612:	4909      	ldr	r1, [pc, #36]	; (8638 <bt_addr_le_str_real+0x74>)
    8614:	e7e2      	b.n	85dc <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    8616:	4a09      	ldr	r2, [pc, #36]	; (863c <bt_addr_le_str_real+0x78>)
    8618:	210a      	movs	r1, #10
    861a:	4628      	mov	r0, r5
    861c:	f01f f966 	bl	278ec <snprintk>
		break;
    8620:	e7df      	b.n	85e2 <bt_addr_le_str_real+0x1e>
    8622:	bf00      	nop
    8624:	0003149c 	.word	0x0003149c
    8628:	000314c5 	.word	0x000314c5
    862c:	20005772 	.word	0x20005772
    8630:	000314a3 	.word	0x000314a3
    8634:	000314aa 	.word	0x000314aa
    8638:	000314b4 	.word	0x000314b4
    863c:	000314be 	.word	0x000314be

00008640 <sys_memcpy_swap.constprop.2>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    8640:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
    8642:	b570      	push	{r4, r5, r6, lr}
    8644:	4604      	mov	r4, r0
    8646:	460e      	mov	r6, r1
    8648:	f101 0520 	add.w	r5, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    864c:	d915      	bls.n	867a <sys_memcpy_swap.constprop.2+0x3a>
    864e:	42a8      	cmp	r0, r5
    8650:	d20a      	bcs.n	8668 <sys_memcpy_swap.constprop.2+0x28>
    8652:	490c      	ldr	r1, [pc, #48]	; (8684 <sys_memcpy_swap.constprop.2+0x44>)
    8654:	480c      	ldr	r0, [pc, #48]	; (8688 <sys_memcpy_swap.constprop.2+0x48>)
    8656:	f240 2219 	movw	r2, #537	; 0x219
    865a:	f01f f93a 	bl	278d2 <printk>
    865e:	f240 2119 	movw	r1, #537	; 0x219
    8662:	4808      	ldr	r0, [pc, #32]	; (8684 <sys_memcpy_swap.constprop.2+0x44>)
    8664:	f01f fbae 	bl	27dc4 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
    8668:	462b      	mov	r3, r5
    866a:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
    866c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    8670:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
    8674:	42b3      	cmp	r3, r6
    8676:	d1f9      	bne.n	866c <sys_memcpy_swap.constprop.2+0x2c>
	}
}
    8678:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    867a:	d0ea      	beq.n	8652 <sys_memcpy_swap.constprop.2+0x12>
    867c:	f100 0320 	add.w	r3, r0, #32
    8680:	4299      	cmp	r1, r3
    8682:	e7e5      	b.n	8650 <sys_memcpy_swap.constprop.2+0x10>
    8684:	000315b2 	.word	0x000315b2
    8688:	0003067f 	.word	0x0003067f

0000868c <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    868c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8690:	4e60      	ldr	r6, [pc, #384]	; (8814 <ecc_thread+0x188>)
	return z_impl_k_sem_take(sem, timeout);
    8692:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 883c <ecc_thread+0x1b0>
    8696:	4635      	mov	r5, r6
    8698:	f04f 32ff 	mov.w	r2, #4294967295
    869c:	f04f 33ff 	mov.w	r3, #4294967295
    86a0:	4640      	mov	r0, r8
    86a2:	f01c fcc7 	bl	25034 <z_impl_k_sem_take>
    86a6:	f3bf 8f5b 	dmb	ish
    86aa:	6834      	ldr	r4, [r6, #0]
    86ac:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    86b0:	f014 0401 	ands.w	r4, r4, #1
    86b4:	d054      	beq.n	8760 <ecc_thread+0xd4>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    86b6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 882c <ecc_thread+0x1a0>
    86ba:	4c57      	ldr	r4, [pc, #348]	; (8818 <ecc_thread+0x18c>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    86bc:	4f57      	ldr	r7, [pc, #348]	; (881c <ecc_thread+0x190>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    86be:	4858      	ldr	r0, [pc, #352]	; (8820 <ecc_thread+0x194>)
    86c0:	464a      	mov	r2, r9
    86c2:	4621      	mov	r1, r4
    86c4:	f01f fffe 	bl	286c4 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    86c8:	bbc0      	cbnz	r0, 873c <ecc_thread+0xb0>
			BT_ERR("Failed to create ECC public/private pair");
    86ca:	2145      	movs	r1, #69	; 0x45
    86cc:	4855      	ldr	r0, [pc, #340]	; (8824 <ecc_thread+0x198>)
    86ce:	f01f f900 	bl	278d2 <printk>
			return BT_HCI_ERR_UNSPECIFIED;
    86d2:	241f      	movs	r4, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    86d4:	f04f 32ff 	mov.w	r2, #4294967295
    86d8:	f04f 33ff 	mov.w	r3, #4294967295
    86dc:	2001      	movs	r0, #1
    86de:	f000 fa97 	bl	8c10 <bt_buf_get_rx>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    86e2:	f100 0708 	add.w	r7, r0, #8
    86e6:	2102      	movs	r1, #2
    86e8:	4681      	mov	r9, r0
    86ea:	4638      	mov	r0, r7
    86ec:	f017 fc58 	bl	1ffa0 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    86f0:	233e      	movs	r3, #62	; 0x3e
    86f2:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    86f4:	2342      	movs	r3, #66	; 0x42
    86f6:	7043      	strb	r3, [r0, #1]
    86f8:	2101      	movs	r1, #1
    86fa:	4638      	mov	r0, r7
    86fc:	f017 fc50 	bl	1ffa0 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    8700:	2308      	movs	r3, #8
    8702:	7003      	strb	r3, [r0, #0]
    8704:	2141      	movs	r1, #65	; 0x41
    8706:	4638      	mov	r0, r7
    8708:	f017 fc4a 	bl	1ffa0 <net_buf_simple_add>
    870c:	4607      	mov	r7, r0
	evt->status = status;
    870e:	f800 4b01 	strb.w	r4, [r0], #1
	if (status) {
    8712:	b1e4      	cbz	r4, 874e <ecc_thread+0xc2>
    8714:	2240      	movs	r2, #64	; 0x40
    8716:	2100      	movs	r1, #0
    8718:	f025 fe02 	bl	2e320 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    871c:	f3bf 8f5b 	dmb	ish
    8720:	e855 3f00 	ldrex	r3, [r5]
    8724:	f023 0301 	bic.w	r3, r3, #1
    8728:	e845 3200 	strex	r2, r3, [r5]
    872c:	2a00      	cmp	r2, #0
    872e:	d1f7      	bne.n	8720 <ecc_thread+0x94>
    8730:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    8734:	4648      	mov	r0, r9
    8736:	f001 fb61 	bl	9dfc <bt_recv>
    873a:	e7ad      	b.n	8698 <ecc_thread+0xc>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    873c:	2220      	movs	r2, #32
    873e:	4639      	mov	r1, r7
    8740:	4620      	mov	r0, r4
    8742:	f025 fda4 	bl	2e28e <memcmp>
    8746:	2800      	cmp	r0, #0
    8748:	d0b9      	beq.n	86be <ecc_thread+0x32>
	return 0;
    874a:	2400      	movs	r4, #0
    874c:	e7c2      	b.n	86d4 <ecc_thread+0x48>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    874e:	4934      	ldr	r1, [pc, #208]	; (8820 <ecc_thread+0x194>)
    8750:	f7ff ff76 	bl	8640 <sys_memcpy_swap.constprop.2>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    8754:	4934      	ldr	r1, [pc, #208]	; (8828 <ecc_thread+0x19c>)
    8756:	f107 0021 	add.w	r0, r7, #33	; 0x21
    875a:	f7ff ff71 	bl	8640 <sys_memcpy_swap.constprop.2>
    875e:	e7dd      	b.n	871c <ecc_thread+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8760:	f3bf 8f5b 	dmb	ish
    8764:	6833      	ldr	r3, [r6, #0]
    8766:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    876a:	079b      	lsls	r3, r3, #30
    876c:	d548      	bpl.n	8800 <ecc_thread+0x174>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    876e:	492f      	ldr	r1, [pc, #188]	; (882c <ecc_thread+0x1a0>)
    8770:	482b      	ldr	r0, [pc, #172]	; (8820 <ecc_thread+0x194>)
    8772:	f020 fe73 	bl	2945c <uECC_valid_public_key>
	if (ret < 0) {
    8776:	1e02      	subs	r2, r0, #0
    8778:	da33      	bge.n	87e2 <ecc_thread+0x156>
		BT_ERR("public key is not valid (ret %d)", ret);
    877a:	2145      	movs	r1, #69	; 0x45
    877c:	482c      	ldr	r0, [pc, #176]	; (8830 <ecc_thread+0x1a4>)
    877e:	f01f f8a8 	bl	278d2 <printk>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8782:	f04f 32ff 	mov.w	r2, #4294967295
    8786:	f04f 33ff 	mov.w	r3, #4294967295
    878a:	2001      	movs	r0, #1
    878c:	f000 fa40 	bl	8c10 <bt_buf_get_rx>
    8790:	f100 0708 	add.w	r7, r0, #8
    8794:	2102      	movs	r1, #2
    8796:	4681      	mov	r9, r0
    8798:	4638      	mov	r0, r7
    879a:	f017 fc01 	bl	1ffa0 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    879e:	233e      	movs	r3, #62	; 0x3e
    87a0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    87a2:	2322      	movs	r3, #34	; 0x22
    87a4:	7043      	strb	r3, [r0, #1]
    87a6:	2101      	movs	r1, #1
    87a8:	4638      	mov	r0, r7
    87aa:	f017 fbf9 	bl	1ffa0 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    87ae:	2309      	movs	r3, #9
    87b0:	7003      	strb	r3, [r0, #0]
    87b2:	2121      	movs	r1, #33	; 0x21
    87b4:	4638      	mov	r0, r7
    87b6:	f017 fbf3 	bl	1ffa0 <net_buf_simple_add>
    87ba:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    87bc:	3001      	adds	r0, #1
    87be:	b9cc      	cbnz	r4, 87f4 <ecc_thread+0x168>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    87c0:	221f      	movs	r2, #31
    87c2:	701a      	strb	r2, [r3, #0]
    87c4:	21ff      	movs	r1, #255	; 0xff
    87c6:	2220      	movs	r2, #32
    87c8:	f025 fdaa 	bl	2e320 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    87cc:	f3bf 8f5b 	dmb	ish
    87d0:	e855 3f00 	ldrex	r3, [r5]
    87d4:	f023 0302 	bic.w	r3, r3, #2
    87d8:	e845 3200 	strex	r2, r3, [r5]
    87dc:	2a00      	cmp	r2, #0
    87de:	d0a7      	beq.n	8730 <ecc_thread+0xa4>
    87e0:	e7f6      	b.n	87d0 <ecc_thread+0x144>
		ret = uECC_shared_secret(ecc.public_key_be, ecc.private_key_be,
    87e2:	4a0f      	ldr	r2, [pc, #60]	; (8820 <ecc_thread+0x194>)
    87e4:	4b11      	ldr	r3, [pc, #68]	; (882c <ecc_thread+0x1a0>)
    87e6:	f1a2 0120 	sub.w	r1, r2, #32
    87ea:	4610      	mov	r0, r2
    87ec:	f01f ffb7 	bl	2875e <uECC_shared_secret>
    87f0:	4604      	mov	r4, r0
    87f2:	e7c6      	b.n	8782 <ecc_thread+0xf6>
		evt->status = 0U;
    87f4:	2200      	movs	r2, #0
    87f6:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    87f8:	4909      	ldr	r1, [pc, #36]	; (8820 <ecc_thread+0x194>)
    87fa:	f7ff ff21 	bl	8640 <sys_memcpy_swap.constprop.2>
    87fe:	e7e5      	b.n	87cc <ecc_thread+0x140>
			emulate_le_generate_dhkey();
		} else {
			__ASSERT(0, "Unhandled ECC command");
    8800:	22e0      	movs	r2, #224	; 0xe0
    8802:	490c      	ldr	r1, [pc, #48]	; (8834 <ecc_thread+0x1a8>)
    8804:	480c      	ldr	r0, [pc, #48]	; (8838 <ecc_thread+0x1ac>)
    8806:	f01f f864 	bl	278d2 <printk>
    880a:	21e0      	movs	r1, #224	; 0xe0
    880c:	4809      	ldr	r0, [pc, #36]	; (8834 <ecc_thread+0x1a8>)
    880e:	f01f fad9 	bl	27dc4 <assert_post_action>
    8812:	e741      	b.n	8698 <ecc_thread+0xc>
    8814:	20003a08 	.word	0x20003a08
    8818:	20005790 	.word	0x20005790
    881c:	00031500 	.word	0x00031500
    8820:	200057b0 	.word	0x200057b0
    8824:	00031520 	.word	0x00031520
    8828:	200057d0 	.word	0x200057d0
    882c:	0002f708 	.word	0x0002f708
    8830:	0003154e 	.word	0x0003154e
    8834:	00031574 	.word	0x00031574
    8838:	0003067f 	.word	0x0003067f
    883c:	20001e78 	.word	0x20001e78

00008840 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    8840:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    8842:	7d05      	ldrb	r5, [r0, #20]
    8844:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    8846:	b9ad      	cbnz	r5, 8874 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    8848:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    884a:	881a      	ldrh	r2, [r3, #0]
    884c:	f242 0125 	movw	r1, #8229	; 0x2025
    8850:	428a      	cmp	r2, r1
    8852:	d017      	beq.n	8884 <bt_hci_ecc_send+0x44>
    8854:	f242 0126 	movw	r1, #8230	; 0x2026
    8858:	428a      	cmp	r2, r1
    885a:	d03c      	beq.n	88d6 <bt_hci_ecc_send+0x96>
    885c:	f242 0101 	movw	r1, #8193	; 0x2001
    8860:	428a      	cmp	r2, r1
    8862:	d107      	bne.n	8874 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    8864:	78da      	ldrb	r2, [r3, #3]
    8866:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    886a:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    886c:	791a      	ldrb	r2, [r3, #4]
    886e:	f022 0201 	bic.w	r2, r2, #1
    8872:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    8874:	4b32      	ldr	r3, [pc, #200]	; (8940 <bt_hci_ecc_send+0x100>)
    8876:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    887a:	4620      	mov	r0, r4
    887c:	691b      	ldr	r3, [r3, #16]
}
    887e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    8882:	4718      	bx	r3
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    8884:	2103      	movs	r1, #3
    8886:	3008      	adds	r0, #8
    8888:	f017 fb50 	bl	1ff2c <net_buf_simple_pull>
	net_buf_unref(buf);
    888c:	4620      	mov	r0, r4
    888e:	f017 fa37 	bl	1fd00 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8892:	f3bf 8f5b 	dmb	ish
    8896:	4b2b      	ldr	r3, [pc, #172]	; (8944 <bt_hci_ecc_send+0x104>)
    8898:	681a      	ldr	r2, [r3, #0]
    889a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    889e:	0790      	lsls	r0, r2, #30
    88a0:	d507      	bpl.n	88b2 <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    88a2:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    88a4:	4629      	mov	r1, r5
    88a6:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    88aa:	f020 ffc9 	bl	29840 <send_cmd_status>
}
    88ae:	2000      	movs	r0, #0
    88b0:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    88b2:	f3bf 8f5b 	dmb	ish
    88b6:	e853 2f00 	ldrex	r2, [r3]
    88ba:	f042 0101 	orr.w	r1, r2, #1
    88be:	e843 1000 	strex	r0, r1, [r3]
    88c2:	2800      	cmp	r0, #0
    88c4:	d1f7      	bne.n	88b6 <bt_hci_ecc_send+0x76>
    88c6:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    88ca:	07d1      	lsls	r1, r2, #31
    88cc:	d4e9      	bmi.n	88a2 <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    88ce:	481e      	ldr	r0, [pc, #120]	; (8948 <bt_hci_ecc_send+0x108>)
    88d0:	f01c fb74 	bl	24fbc <z_impl_k_sem_give>
    88d4:	e7e6      	b.n	88a4 <bt_hci_ecc_send+0x64>
    88d6:	2103      	movs	r1, #3
    88d8:	3008      	adds	r0, #8
    88da:	f017 fb27 	bl	1ff2c <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    88de:	f3bf 8f5b 	dmb	ish
    88e2:	4b18      	ldr	r3, [pc, #96]	; (8944 <bt_hci_ecc_send+0x104>)
    88e4:	681a      	ldr	r2, [r3, #0]
    88e6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    88ea:	07d2      	lsls	r2, r2, #31
    88ec:	d507      	bpl.n	88fe <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    88ee:	250c      	movs	r5, #12
	net_buf_unref(buf);
    88f0:	4620      	mov	r0, r4
    88f2:	f017 fa05 	bl	1fd00 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    88f6:	4629      	mov	r1, r5
    88f8:	f242 0026 	movw	r0, #8230	; 0x2026
    88fc:	e7d5      	b.n	88aa <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    88fe:	89a2      	ldrh	r2, [r4, #12]
    8900:	2a3f      	cmp	r2, #63	; 0x3f
    8902:	d91b      	bls.n	893c <bt_hci_ecc_send+0xfc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8904:	f3bf 8f5b 	dmb	ish
    8908:	e853 2f00 	ldrex	r2, [r3]
    890c:	f042 0102 	orr.w	r1, r2, #2
    8910:	e843 1000 	strex	r0, r1, [r3]
    8914:	2800      	cmp	r0, #0
    8916:	d1f7      	bne.n	8908 <bt_hci_ecc_send+0xc8>
    8918:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    891c:	0793      	lsls	r3, r2, #30
    891e:	d4e6      	bmi.n	88ee <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    8920:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.public_key_be, cmd->key, 32);
    8922:	480a      	ldr	r0, [pc, #40]	; (894c <bt_hci_ecc_send+0x10c>)
    8924:	4631      	mov	r1, r6
    8926:	f7ff fe8b 	bl	8640 <sys_memcpy_swap.constprop.2>
	sys_memcpy_swap(&ecc.public_key_be[32], &cmd->key[32], 32);
    892a:	f106 0120 	add.w	r1, r6, #32
    892e:	4808      	ldr	r0, [pc, #32]	; (8950 <bt_hci_ecc_send+0x110>)
    8930:	f7ff fe86 	bl	8640 <sys_memcpy_swap.constprop.2>
    8934:	4804      	ldr	r0, [pc, #16]	; (8948 <bt_hci_ecc_send+0x108>)
    8936:	f01c fb41 	bl	24fbc <z_impl_k_sem_give>
    893a:	e7d9      	b.n	88f0 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    893c:	2512      	movs	r5, #18
    893e:	e7d7      	b.n	88f0 <bt_hci_ecc_send+0xb0>
    8940:	20000ac0 	.word	0x20000ac0
    8944:	20003a08 	.word	0x20003a08
    8948:	20001e78 	.word	0x20001e78
    894c:	200057b0 	.word	0x200057b0
    8950:	200057d0 	.word	0x200057d0

00008954 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    8954:	b510      	push	{r4, lr}
    8956:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8958:	4c0c      	ldr	r4, [pc, #48]	; (898c <bt_hci_ecc_init+0x38>)
    895a:	490d      	ldr	r1, [pc, #52]	; (8990 <bt_hci_ecc_init+0x3c>)
    895c:	2200      	movs	r2, #0
    895e:	2300      	movs	r3, #0
    8960:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8964:	2300      	movs	r3, #0
    8966:	220a      	movs	r2, #10
    8968:	e9cd 2303 	strd	r2, r3, [sp, #12]
    896c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    8970:	9300      	str	r3, [sp, #0]
    8972:	f44f 628a 	mov.w	r2, #1104	; 0x450
    8976:	4b07      	ldr	r3, [pc, #28]	; (8994 <bt_hci_ecc_init+0x40>)
    8978:	4620      	mov	r0, r4
    897a:	f01c fc4f 	bl	2521c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    897e:	4906      	ldr	r1, [pc, #24]	; (8998 <bt_hci_ecc_init+0x44>)
    8980:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    8982:	b008      	add	sp, #32
    8984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8988:	f025 bb75 	b.w	2e076 <z_impl_k_thread_name_set>
    898c:	200020d0 	.word	0x200020d0
    8990:	20005ae0 	.word	0x20005ae0
    8994:	0000868d 	.word	0x0000868d
    8998:	000314f9 	.word	0x000314f9

0000899c <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    899c:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
    899e:	2149      	movs	r1, #73	; 0x49
    89a0:	4809      	ldr	r0, [pc, #36]	; (89c8 <save_id+0x2c>)
    89a2:	f01e ff96 	bl	278d2 <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    89a6:	4909      	ldr	r1, [pc, #36]	; (89cc <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    89a8:	4809      	ldr	r0, [pc, #36]	; (89d0 <save_id+0x34>)
    89aa:	79ca      	ldrb	r2, [r1, #7]
    89ac:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    89b0:	f7fd fad4 	bl	5f5c <settings_save_one>
	if (err) {
    89b4:	4602      	mov	r2, r0
    89b6:	b128      	cbz	r0, 89c4 <save_id+0x28>
		BT_ERR("Failed to save ID (err %d)", err);
    89b8:	2145      	movs	r1, #69	; 0x45
    89ba:	4806      	ldr	r0, [pc, #24]	; (89d4 <save_id+0x38>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    89bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    89c0:	f01e bf87 	b.w	278d2 <printk>
}
    89c4:	bd08      	pop	{r3, pc}
    89c6:	bf00      	nop
    89c8:	00031675 	.word	0x00031675
    89cc:	20000ac0 	.word	0x20000ac0
    89d0:	00031684 	.word	0x00031684
    89d4:	0003168a 	.word	0x0003168a

000089d8 <set>:
{
    89d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    89dc:	4617      	mov	r7, r2
    89de:	4698      	mov	r8, r3
	if (!name) {
    89e0:	4604      	mov	r4, r0
    89e2:	b930      	cbnz	r0, 89f2 <set+0x1a>
		BT_ERR("Insufficient number of arguments");
    89e4:	2145      	movs	r1, #69	; 0x45
    89e6:	481d      	ldr	r0, [pc, #116]	; (8a5c <set+0x84>)
    89e8:	f01e ff73 	bl	278d2 <printk>
	return -ENOENT;
    89ec:	f06f 0401 	mvn.w	r4, #1
    89f0:	e018      	b.n	8a24 <set+0x4c>
	len = settings_name_next(name, &next);
    89f2:	a901      	add	r1, sp, #4
    89f4:	f01f fb9a 	bl	2812c <settings_name_next>
	if (!strncmp(name, "id", len)) {
    89f8:	4919      	ldr	r1, [pc, #100]	; (8a60 <set+0x88>)
    89fa:	4602      	mov	r2, r0
    89fc:	4620      	mov	r0, r4
    89fe:	f025 fde6 	bl	2e5ce <strncmp>
    8a02:	4605      	mov	r5, r0
    8a04:	2800      	cmp	r0, #0
    8a06:	d1f1      	bne.n	89ec <set+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8a08:	f3bf 8f5b 	dmb	ish
    8a0c:	4e15      	ldr	r6, [pc, #84]	; (8a64 <set+0x8c>)
    8a0e:	6834      	ldr	r4, [r6, #0]
    8a10:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8a14:	f3c4 0480 	ubfx	r4, r4, #2, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    8a18:	b144      	cbz	r4, 8a2c <set+0x54>
			BT_WARN("Ignoring identities stored in flash");
    8a1a:	2157      	movs	r1, #87	; 0x57
    8a1c:	4812      	ldr	r0, [pc, #72]	; (8a68 <set+0x90>)
    8a1e:	f01e ff58 	bl	278d2 <printk>
			return 0;
    8a22:	462c      	mov	r4, r5
}
    8a24:	4620      	mov	r0, r4
    8a26:	b002      	add	sp, #8
    8a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    8a2c:	f1a6 0594 	sub.w	r5, r6, #148	; 0x94
    8a30:	2207      	movs	r2, #7
    8a32:	4629      	mov	r1, r5
    8a34:	4640      	mov	r0, r8
    8a36:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
    8a38:	2806      	cmp	r0, #6
    8a3a:	d809      	bhi.n	8a50 <set+0x78>
				BT_ERR("Invalid length ID address in storage");
    8a3c:	2145      	movs	r1, #69	; 0x45
    8a3e:	480b      	ldr	r0, [pc, #44]	; (8a6c <set+0x94>)
    8a40:	f01e ff47 	bl	278d2 <printk>
			(void)memset(bt_dev.id_addr, 0,
    8a44:	f846 4c94 	str.w	r4, [r6, #-148]
			bt_dev.id_count = 0U;
    8a48:	71ec      	strb	r4, [r5, #7]
			(void)memset(bt_dev.id_addr, 0,
    8a4a:	f8c5 4003 	str.w	r4, [r5, #3]
			bt_dev.id_count = 0U;
    8a4e:	e7e9      	b.n	8a24 <set+0x4c>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    8a50:	2307      	movs	r3, #7
    8a52:	fbb0 f0f3 	udiv	r0, r0, r3
    8a56:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    8a58:	e7e4      	b.n	8a24 <set+0x4c>
    8a5a:	bf00      	nop
    8a5c:	000316aa 	.word	0x000316aa
    8a60:	000314b1 	.word	0x000314b1
    8a64:	20000b54 	.word	0x20000b54
    8a68:	000316d0 	.word	0x000316d0
    8a6c:	000316f9 	.word	0x000316f9

00008a70 <bt_settings_encode_key>:
{
    8a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a74:	b088      	sub	sp, #32
    8a76:	799c      	ldrb	r4, [r3, #6]
    8a78:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    8a7c:	795d      	ldrb	r5, [r3, #5]
    8a7e:	791e      	ldrb	r6, [r3, #4]
    8a80:	78df      	ldrb	r7, [r3, #3]
    8a82:	f893 c002 	ldrb.w	ip, [r3, #2]
    8a86:	f893 e001 	ldrb.w	lr, [r3, #1]
    8a8a:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    8a8c:	f1b8 0f00 	cmp.w	r8, #0
    8a90:	d00e      	beq.n	8ab0 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    8a92:	e9cd 3806 	strd	r3, r8, [sp, #24]
    8a96:	e9cd ce04 	strd	ip, lr, [sp, #16]
    8a9a:	4613      	mov	r3, r2
    8a9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    8aa0:	e9cd 4500 	strd	r4, r5, [sp]
    8aa4:	4a08      	ldr	r2, [pc, #32]	; (8ac8 <bt_settings_encode_key+0x58>)
    8aa6:	f01e ff21 	bl	278ec <snprintk>
}
    8aaa:	b008      	add	sp, #32
    8aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    8ab0:	e9cd e305 	strd	lr, r3, [sp, #20]
    8ab4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    8ab8:	4613      	mov	r3, r2
    8aba:	e9cd 5601 	strd	r5, r6, [sp, #4]
    8abe:	9400      	str	r4, [sp, #0]
    8ac0:	4a02      	ldr	r2, [pc, #8]	; (8acc <bt_settings_encode_key+0x5c>)
    8ac2:	f01e ff13 	bl	278ec <snprintk>
}
    8ac6:	e7f0      	b.n	8aaa <bt_settings_encode_key+0x3a>
    8ac8:	000315dd 	.word	0x000315dd
    8acc:	00031601 	.word	0x00031601

00008ad0 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8ad0:	4909      	ldr	r1, [pc, #36]	; (8af8 <bt_settings_save_id+0x28>)
    8ad2:	f3bf 8f5b 	dmb	ish
    8ad6:	e851 3f00 	ldrex	r3, [r1]
    8ada:	f043 0201 	orr.w	r2, r3, #1
    8ade:	e841 2000 	strex	r0, r2, [r1]
    8ae2:	2800      	cmp	r0, #0
    8ae4:	d1f7      	bne.n	8ad6 <bt_settings_save_id+0x6>
    8ae6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8aea:	07db      	lsls	r3, r3, #31
    8aec:	d403      	bmi.n	8af6 <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    8aee:	3908      	subs	r1, #8
    8af0:	4802      	ldr	r0, [pc, #8]	; (8afc <bt_settings_save_id+0x2c>)
    8af2:	f025 ba4d 	b.w	2df90 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    8af6:	4770      	bx	lr
    8af8:	2000123c 	.word	0x2000123c
    8afc:	20003028 	.word	0x20003028

00008b00 <commit>:

static int commit(void)
{
    8b00:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    8b02:	4c17      	ldr	r4, [pc, #92]	; (8b60 <commit+0x60>)
    8b04:	79e3      	ldrb	r3, [r4, #7]
    8b06:	b96b      	cbnz	r3, 8b24 <commit+0x24>
		bt_setup_public_id_addr();
    8b08:	f001 fcc6 	bl	a498 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    8b0c:	79e3      	ldrb	r3, [r4, #7]
    8b0e:	b94b      	cbnz	r3, 8b24 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    8b10:	f001 fd50 	bl	a5b4 <bt_setup_random_id_addr>
		if (err) {
    8b14:	4604      	mov	r4, r0
    8b16:	b128      	cbz	r0, 8b24 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    8b18:	2145      	movs	r1, #69	; 0x45
    8b1a:	4812      	ldr	r0, [pc, #72]	; (8b64 <commit+0x64>)
    8b1c:	f01e fed9 	bl	278d2 <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    8b20:	4620      	mov	r0, r4
    8b22:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8b24:	4d10      	ldr	r5, [pc, #64]	; (8b68 <commit+0x68>)
    8b26:	f3bf 8f5b 	dmb	ish
    8b2a:	682b      	ldr	r3, [r5, #0]
    8b2c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8b30:	079b      	lsls	r3, r3, #30
    8b32:	d401      	bmi.n	8b38 <commit+0x38>
		bt_finalize_init();
    8b34:	f001 fa26 	bl	9f84 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8b38:	f3bf 8f5b 	dmb	ish
    8b3c:	e855 4f00 	ldrex	r4, [r5]
    8b40:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    8b44:	e845 3200 	strex	r2, r3, [r5]
    8b48:	2a00      	cmp	r2, #0
    8b4a:	d1f7      	bne.n	8b3c <commit+0x3c>
    8b4c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    8b50:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    8b54:	d0e4      	beq.n	8b20 <commit+0x20>
		bt_settings_save_id();
    8b56:	f7ff ffbb 	bl	8ad0 <bt_settings_save_id>
	return 0;
    8b5a:	2400      	movs	r4, #0
    8b5c:	e7e0      	b.n	8b20 <commit+0x20>
    8b5e:	bf00      	nop
    8b60:	20000ac0 	.word	0x20000ac0
    8b64:	0003164c 	.word	0x0003164c
    8b68:	20000b54 	.word	0x20000b54

00008b6c <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    8b6c:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    8b6e:	f7fd fb5f 	bl	6230 <settings_subsys_init>
	if (err) {
    8b72:	4604      	mov	r4, r0
    8b74:	b120      	cbz	r0, 8b80 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    8b76:	4602      	mov	r2, r0
    8b78:	2145      	movs	r1, #69	; 0x45
    8b7a:	4802      	ldr	r0, [pc, #8]	; (8b84 <bt_settings_init+0x18>)
    8b7c:	f01e fea9 	bl	278d2 <printk>
		return err;
	}

	return 0;
}
    8b80:	4620      	mov	r0, r4
    8b82:	bd10      	pop	{r4, pc}
    8b84:	00031622 	.word	0x00031622

00008b88 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    8b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b8a:	460b      	mov	r3, r1
	switch (src->type) {
    8b8c:	7801      	ldrb	r1, [r0, #0]
    8b8e:	2901      	cmp	r1, #1
{
    8b90:	4602      	mov	r2, r0
	switch (src->type) {
    8b92:	d016      	beq.n	8bc2 <uuid_to_uuid128+0x3a>
    8b94:	b111      	cbz	r1, 8b9c <uuid_to_uuid128+0x14>
    8b96:	2902      	cmp	r1, #2
    8b98:	d02b      	beq.n	8bf2 <uuid_to_uuid128+0x6a>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    8b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
    8b9c:	4c1b      	ldr	r4, [pc, #108]	; (8c0c <uuid_to_uuid128+0x84>)
    8b9e:	461d      	mov	r5, r3
    8ba0:	f104 0710 	add.w	r7, r4, #16
    8ba4:	6820      	ldr	r0, [r4, #0]
    8ba6:	6861      	ldr	r1, [r4, #4]
    8ba8:	462e      	mov	r6, r5
    8baa:	c603      	stmia	r6!, {r0, r1}
    8bac:	3408      	adds	r4, #8
    8bae:	42bc      	cmp	r4, r7
    8bb0:	4635      	mov	r5, r6
    8bb2:	d1f7      	bne.n	8ba4 <uuid_to_uuid128+0x1c>
		sys_put_le16(BT_UUID_16(src)->val,
    8bb4:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
    8bb6:	7821      	ldrb	r1, [r4, #0]
    8bb8:	7031      	strb	r1, [r6, #0]
	dst[0] = val;
    8bba:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    8bbc:	0a12      	lsrs	r2, r2, #8
    8bbe:	739a      	strb	r2, [r3, #14]
    8bc0:	e7eb      	b.n	8b9a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    8bc2:	4c12      	ldr	r4, [pc, #72]	; (8c0c <uuid_to_uuid128+0x84>)
    8bc4:	461d      	mov	r5, r3
    8bc6:	f104 0710 	add.w	r7, r4, #16
    8bca:	6820      	ldr	r0, [r4, #0]
    8bcc:	6861      	ldr	r1, [r4, #4]
    8bce:	462e      	mov	r6, r5
    8bd0:	c603      	stmia	r6!, {r0, r1}
    8bd2:	3408      	adds	r4, #8
    8bd4:	42bc      	cmp	r4, r7
    8bd6:	4635      	mov	r5, r6
    8bd8:	d1f7      	bne.n	8bca <uuid_to_uuid128+0x42>
		sys_put_le32(BT_UUID_32(src)->val,
    8bda:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
    8bdc:	7821      	ldrb	r1, [r4, #0]
    8bde:	7031      	strb	r1, [r6, #0]
    8be0:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    8be4:	735a      	strb	r2, [r3, #13]
	sys_put_le16(val >> 16, &dst[2]);
    8be6:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    8be8:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    8bea:	0a12      	lsrs	r2, r2, #8
    8bec:	7399      	strb	r1, [r3, #14]
    8bee:	741a      	strb	r2, [r3, #16]
    8bf0:	e7d3      	b.n	8b9a <uuid_to_uuid128+0x12>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    8bf2:	f100 0510 	add.w	r5, r0, #16
    8bf6:	6810      	ldr	r0, [r2, #0]
    8bf8:	6851      	ldr	r1, [r2, #4]
    8bfa:	461c      	mov	r4, r3
    8bfc:	c403      	stmia	r4!, {r0, r1}
    8bfe:	3208      	adds	r2, #8
    8c00:	42aa      	cmp	r2, r5
    8c02:	4623      	mov	r3, r4
    8c04:	d1f7      	bne.n	8bf6 <uuid_to_uuid128+0x6e>
    8c06:	7812      	ldrb	r2, [r2, #0]
    8c08:	7022      	strb	r2, [r4, #0]
    8c0a:	e7c6      	b.n	8b9a <uuid_to_uuid128+0x12>
    8c0c:	0003173d 	.word	0x0003173d

00008c10 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    8c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c12:	461f      	mov	r7, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    8c14:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    8c18:	2b01      	cmp	r3, #1
{
    8c1a:	4605      	mov	r5, r0
    8c1c:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    8c1e:	d00a      	beq.n	8c36 <bt_buf_get_rx+0x26>
    8c20:	2805      	cmp	r0, #5
    8c22:	d008      	beq.n	8c36 <bt_buf_get_rx+0x26>
    8c24:	490b      	ldr	r1, [pc, #44]	; (8c54 <bt_buf_get_rx+0x44>)
    8c26:	480c      	ldr	r0, [pc, #48]	; (8c58 <bt_buf_get_rx+0x48>)
    8c28:	2234      	movs	r2, #52	; 0x34
    8c2a:	f01e fe52 	bl	278d2 <printk>
    8c2e:	2134      	movs	r1, #52	; 0x34
    8c30:	4808      	ldr	r0, [pc, #32]	; (8c54 <bt_buf_get_rx+0x44>)
    8c32:	f01f f8c7 	bl	27dc4 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    8c36:	4632      	mov	r2, r6
    8c38:	463b      	mov	r3, r7
    8c3a:	4808      	ldr	r0, [pc, #32]	; (8c5c <bt_buf_get_rx+0x4c>)
    8c3c:	f024 fc4a 	bl	2d4d4 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    8c40:	4604      	mov	r4, r0
    8c42:	b120      	cbz	r0, 8c4e <bt_buf_get_rx+0x3e>
	net_buf_simple_reserve(&buf->b, reserve);
    8c44:	2100      	movs	r1, #0
    8c46:	3008      	adds	r0, #8
    8c48:	f016 ff70 	bl	1fb2c <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    8c4c:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    8c4e:	4620      	mov	r0, r4
    8c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c52:	bf00      	nop
    8c54:	0003174e 	.word	0x0003174e
    8c58:	0003067f 	.word	0x0003067f
    8c5c:	2000204c 	.word	0x2000204c

00008c60 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    8c60:	b5d0      	push	{r4, r6, r7, lr}
    8c62:	460f      	mov	r7, r1
	__asm__ volatile(
    8c64:	f04f 0320 	mov.w	r3, #32
    8c68:	f3ef 8211 	mrs	r2, BASEPRI
    8c6c:	f383 8811 	msr	BASEPRI, r3
    8c70:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    8c74:	4b0d      	ldr	r3, [pc, #52]	; (8cac <bt_buf_get_cmd_complete+0x4c>)
	bt_dev.sent_cmd = NULL;
    8c76:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    8c78:	f8d3 40f8 	ldr.w	r4, [r3, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    8c7c:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
	__asm__ volatile(
    8c80:	f382 8811 	msr	BASEPRI, r2
    8c84:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    8c88:	b934      	cbnz	r4, 8c98 <bt_buf_get_cmd_complete+0x38>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8c8a:	4602      	mov	r2, r0
    8c8c:	463b      	mov	r3, r7
    8c8e:	2001      	movs	r0, #1
}
    8c90:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8c94:	f7ff bfbc 	b.w	8c10 <bt_buf_get_rx>
    8c98:	2301      	movs	r3, #1
    8c9a:	f104 0008 	add.w	r0, r4, #8
    8c9e:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    8ca0:	81a1      	strh	r1, [r4, #12]
    8ca2:	f016 ff43 	bl	1fb2c <net_buf_simple_reserve>
}
    8ca6:	4620      	mov	r0, r4
    8ca8:	bdd0      	pop	{r4, r6, r7, pc}
    8caa:	bf00      	nop
    8cac:	20000ac0 	.word	0x20000ac0

00008cb0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    8cb0:	b570      	push	{r4, r5, r6, lr}
    8cb2:	4604      	mov	r4, r0
	switch (evt) {
    8cb4:	2c0e      	cmp	r4, #14
{
    8cb6:	460d      	mov	r5, r1
    8cb8:	4610      	mov	r0, r2
    8cba:	4619      	mov	r1, r3
	switch (evt) {
    8cbc:	d314      	bcc.n	8ce8 <bt_buf_get_evt+0x38>
    8cbe:	2c0f      	cmp	r4, #15
    8cc0:	d90e      	bls.n	8ce0 <bt_buf_get_evt+0x30>
    8cc2:	2c13      	cmp	r4, #19
    8cc4:	d110      	bne.n	8ce8 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    8cc6:	480d      	ldr	r0, [pc, #52]	; (8cfc <bt_buf_get_evt+0x4c>)
    8cc8:	f024 fc04 	bl	2d4d4 <net_buf_alloc_fixed>
#if defined(CONFIG_BT_DISCARDABLE_BUF_COUNT)
		if (discardable) {
			struct net_buf *buf;

			buf = net_buf_alloc(&discardable_pool, timeout);
			if (buf) {
    8ccc:	4604      	mov	r4, r0
    8cce:	b128      	cbz	r0, 8cdc <bt_buf_get_evt+0x2c>
	net_buf_simple_reserve(&buf->b, reserve);
    8cd0:	2100      	movs	r1, #0
    8cd2:	3008      	adds	r0, #8
    8cd4:	f016 ff2a 	bl	1fb2c <net_buf_simple_reserve>
    8cd8:	2301      	movs	r3, #1
    8cda:	7523      	strb	r3, [r4, #20]
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    8cdc:	4620      	mov	r0, r4
    8cde:	bd70      	pop	{r4, r5, r6, pc}
    8ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    8ce4:	f7ff bfbc 	b.w	8c60 <bt_buf_get_cmd_complete>
	return net_buf_alloc_fixed(pool, timeout);
    8ce8:	4602      	mov	r2, r0
    8cea:	460b      	mov	r3, r1
		if (discardable) {
    8cec:	b10d      	cbz	r5, 8cf2 <bt_buf_get_evt+0x42>
    8cee:	4804      	ldr	r0, [pc, #16]	; (8d00 <bt_buf_get_evt+0x50>)
    8cf0:	e7ea      	b.n	8cc8 <bt_buf_get_evt+0x18>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8cf2:	2001      	movs	r0, #1
}
    8cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8cf8:	f7ff bf8a 	b.w	8c10 <bt_buf_get_rx>
    8cfc:	200020a4 	.word	0x200020a4
    8d00:	20001f9c 	.word	0x20001f9c

00008d04 <le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    8d04:	4905      	ldr	r1, [pc, #20]	; (8d1c <le_dhkey_complete+0x18>)
    8d06:	680b      	ldr	r3, [r1, #0]
    8d08:	b133      	cbz	r3, 8d18 <le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    8d0a:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    8d0c:	2000      	movs	r0, #0
    8d0e:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    8d10:	7811      	ldrb	r1, [r2, #0]
    8d12:	b901      	cbnz	r1, 8d16 <le_dhkey_complete+0x12>
    8d14:	1c50      	adds	r0, r2, #1
    8d16:	4718      	bx	r3
	}
}
    8d18:	4770      	bx	lr
    8d1a:	bf00      	nop
    8d1c:	20003a24 	.word	0x20003a24

00008d20 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    8d20:	6883      	ldr	r3, [r0, #8]
    8d22:	4802      	ldr	r0, [pc, #8]	; (8d2c <hci_data_buf_overflow+0xc>)
    8d24:	781a      	ldrb	r2, [r3, #0]
    8d26:	2157      	movs	r1, #87	; 0x57
    8d28:	f01e bdd3 	b.w	278d2 <printk>
    8d2c:	00031be0 	.word	0x00031be0

00008d30 <hci_disconn_complete_prio>:
{
    8d30:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8d32:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    8d34:	781a      	ldrb	r2, [r3, #0]
    8d36:	b9aa      	cbnz	r2, 8d64 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8d38:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    8d3c:	4620      	mov	r0, r4
    8d3e:	f002 faf9 	bl	b334 <bt_conn_lookup_handle>
	if (!conn) {
    8d42:	4605      	mov	r5, r0
    8d44:	b930      	cbnz	r0, 8d54 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    8d46:	4622      	mov	r2, r4
    8d48:	2145      	movs	r1, #69	; 0x45
    8d4a:	4807      	ldr	r0, [pc, #28]	; (8d68 <hci_disconn_complete_prio+0x38>)
}
    8d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8d50:	f01e bdbf 	b.w	278d2 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    8d54:	2101      	movs	r1, #1
    8d56:	f002 faf5 	bl	b344 <bt_conn_set_state>
	bt_conn_unref(conn);
    8d5a:	4628      	mov	r0, r5
}
    8d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    8d60:	f002 babc 	b.w	b2dc <bt_conn_unref>
}
    8d64:	bd38      	pop	{r3, r4, r5, pc}
    8d66:	bf00      	nop
    8d68:	00031c0d 	.word	0x00031c0d

00008d6c <hci_disconn_complete>:
{
    8d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8d6e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    8d70:	7835      	ldrb	r5, [r6, #0]
    8d72:	b9c5      	cbnz	r5, 8da6 <hci_disconn_complete+0x3a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8d74:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8d78:	4638      	mov	r0, r7
    8d7a:	f002 fadb 	bl	b334 <bt_conn_lookup_handle>
	if (!conn) {
    8d7e:	4604      	mov	r4, r0
    8d80:	b930      	cbnz	r0, 8d90 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    8d82:	463a      	mov	r2, r7
    8d84:	2145      	movs	r1, #69	; 0x45
    8d86:	4808      	ldr	r0, [pc, #32]	; (8da8 <hci_disconn_complete+0x3c>)
}
    8d88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8d8c:	f01e bda1 	b.w	278d2 <printk>
	conn->err = evt->reason;
    8d90:	78f3      	ldrb	r3, [r6, #3]
    8d92:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8d94:	4629      	mov	r1, r5
    8d96:	f002 fad5 	bl	b344 <bt_conn_set_state>
	conn->handle = 0U;
    8d9a:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    8d9c:	4620      	mov	r0, r4
}
    8d9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    8da2:	f002 ba9b 	b.w	b2dc <bt_conn_unref>
}
    8da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8da8:	00031c0d 	.word	0x00031c0d

00008dac <le_pkey_complete>:
{
    8dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    8dae:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8db0:	4811      	ldr	r0, [pc, #68]	; (8df8 <le_pkey_complete+0x4c>)
    8db2:	f06f 0110 	mvn.w	r1, #16
    8db6:	f020 ffe1 	bl	29d7c <atomic_and>
	if (!evt->status) {
    8dba:	7833      	ldrb	r3, [r6, #0]
    8dbc:	b96b      	cbnz	r3, 8dda <le_pkey_complete+0x2e>
		memcpy(pub_key, evt->key, 64);
    8dbe:	4a0f      	ldr	r2, [pc, #60]	; (8dfc <le_pkey_complete+0x50>)
    8dc0:	1c73      	adds	r3, r6, #1
    8dc2:	f106 0141 	add.w	r1, r6, #65	; 0x41
    8dc6:	f853 0b04 	ldr.w	r0, [r3], #4
    8dca:	f842 0b04 	str.w	r0, [r2], #4
    8dce:	428b      	cmp	r3, r1
    8dd0:	d1f9      	bne.n	8dc6 <le_pkey_complete+0x1a>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8dd2:	2108      	movs	r1, #8
    8dd4:	4808      	ldr	r0, [pc, #32]	; (8df8 <le_pkey_complete+0x4c>)
    8dd6:	f020 ffb7 	bl	29d48 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8dda:	4d09      	ldr	r5, [pc, #36]	; (8e00 <le_pkey_complete+0x54>)
		cb->func(evt->status ? NULL : pub_key);
    8ddc:	4f07      	ldr	r7, [pc, #28]	; (8dfc <le_pkey_complete+0x50>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8dde:	682c      	ldr	r4, [r5, #0]
    8de0:	b90c      	cbnz	r4, 8de6 <le_pkey_complete+0x3a>
	pub_key_cb = NULL;
    8de2:	602c      	str	r4, [r5, #0]
}
    8de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    8de6:	7832      	ldrb	r2, [r6, #0]
    8de8:	6823      	ldr	r3, [r4, #0]
    8dea:	2a00      	cmp	r2, #0
    8dec:	bf0c      	ite	eq
    8dee:	4638      	moveq	r0, r7
    8df0:	2000      	movne	r0, #0
    8df2:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8df4:	6864      	ldr	r4, [r4, #4]
    8df6:	e7f3      	b.n	8de0 <le_pkey_complete+0x34>
    8df8:	20000b54 	.word	0x20000b54
    8dfc:	200057f0 	.word	0x200057f0
    8e00:	20003a28 	.word	0x20003a28

00008e04 <hci_hardware_error>:
{
    8e04:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    8e06:	2101      	movs	r1, #1
    8e08:	3008      	adds	r0, #8
    8e0a:	f017 f8ab 	bl	1ff64 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    8e0e:	2145      	movs	r1, #69	; 0x45
    8e10:	7802      	ldrb	r2, [r0, #0]
    8e12:	4802      	ldr	r0, [pc, #8]	; (8e1c <hci_hardware_error+0x18>)
}
    8e14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    8e18:	f01e bd5b 	b.w	278d2 <printk>
    8e1c:	00031c38 	.word	0x00031c38

00008e20 <hci_vendor_event>:
	return 0;
}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

static void hci_vendor_event(struct net_buf *buf)
{
    8e20:	b508      	push	{r3, lr}
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
    8e22:	8981      	ldrh	r1, [r0, #12]
    8e24:	6880      	ldr	r0, [r0, #8]
    8e26:	f7ff fbab 	bl	8580 <bt_hex_real>
    8e2a:	2157      	movs	r1, #87	; 0x57
    8e2c:	4602      	mov	r2, r0
			bt_hex(buf->data, buf->len));
	}
}
    8e2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    8e32:	4801      	ldr	r0, [pc, #4]	; (8e38 <hci_vendor_event+0x18>)
    8e34:	f01e bd4d 	b.w	278d2 <printk>
    8e38:	00031d5b 	.word	0x00031d5b

00008e3c <le_conn_update_complete>:
{
    8e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    8e3e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8e40:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8e44:	4630      	mov	r0, r6
    8e46:	f002 fa75 	bl	b334 <bt_conn_lookup_handle>
	if (!conn) {
    8e4a:	4604      	mov	r4, r0
    8e4c:	b930      	cbnz	r0, 8e5c <le_conn_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8e4e:	4632      	mov	r2, r6
    8e50:	2145      	movs	r1, #69	; 0x45
    8e52:	481a      	ldr	r0, [pc, #104]	; (8ebc <le_conn_update_complete+0x80>)
    8e54:	f01e fd3d 	bl	278d2 <printk>
}
    8e58:	b002      	add	sp, #8
    8e5a:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    8e5c:	782b      	ldrb	r3, [r5, #0]
    8e5e:	b9bb      	cbnz	r3, 8e90 <le_conn_update_complete+0x54>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    8e60:	792a      	ldrb	r2, [r5, #4]
    8e62:	78eb      	ldrb	r3, [r5, #3]
    8e64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8e68:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    8e6c:	79aa      	ldrb	r2, [r5, #6]
    8e6e:	796b      	ldrb	r3, [r5, #5]
    8e70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8e74:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8e78:	79eb      	ldrb	r3, [r5, #7]
    8e7a:	7a2a      	ldrb	r2, [r5, #8]
    8e7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8e80:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    8e84:	f002 f858 	bl	af38 <notify_le_param_updated>
	bt_conn_unref(conn);
    8e88:	4620      	mov	r0, r4
    8e8a:	f002 fa27 	bl	b2dc <bt_conn_unref>
    8e8e:	e7e3      	b.n	8e58 <le_conn_update_complete+0x1c>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    8e90:	2b1a      	cmp	r3, #26
    8e92:	d1f9      	bne.n	8e88 <le_conn_update_complete+0x4c>
    8e94:	78c3      	ldrb	r3, [r0, #3]
    8e96:	2b01      	cmp	r3, #1
    8e98:	d1f6      	bne.n	8e88 <le_conn_update_complete+0x4c>
		   !atomic_test_and_set_bit(conn->flags,
    8e9a:	210a      	movs	r1, #10
    8e9c:	3004      	adds	r0, #4
    8e9e:	f020 ff62 	bl	29d66 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    8ea2:	2800      	cmp	r0, #0
    8ea4:	d1f0      	bne.n	8e88 <le_conn_update_complete+0x4c>
		param.interval_min = conn->le.interval_min;
    8ea6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8eaa:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    8eac:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    8eae:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    8eb2:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    8eb4:	4620      	mov	r0, r4
    8eb6:	f002 fe85 	bl	bbc4 <bt_l2cap_update_conn_param>
    8eba:	e7e5      	b.n	8e88 <le_conn_update_complete+0x4c>
    8ebc:	00031dcf 	.word	0x00031dcf

00008ec0 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    8ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    8ec2:	4e0a      	ldr	r6, [pc, #40]	; (8eec <id_find+0x2c>)
{
    8ec4:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    8ec6:	2500      	movs	r5, #0
    8ec8:	79f3      	ldrb	r3, [r6, #7]
    8eca:	b2ec      	uxtb	r4, r5
    8ecc:	42a3      	cmp	r3, r4
    8ece:	d802      	bhi.n	8ed6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    8ed0:	f06f 0401 	mvn.w	r4, #1
    8ed4:	e008      	b.n	8ee8 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    8ed6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    8eda:	4431      	add	r1, r6
    8edc:	4638      	mov	r0, r7
    8ede:	f020 ff6d 	bl	29dbc <bt_addr_le_cmp>
    8ee2:	3501      	adds	r5, #1
    8ee4:	2800      	cmp	r0, #0
    8ee6:	d1ef      	bne.n	8ec8 <id_find+0x8>
}
    8ee8:	4620      	mov	r0, r4
    8eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8eec:	20000ac0 	.word	0x20000ac0

00008ef0 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    8ef0:	6843      	ldr	r3, [r0, #4]
{
    8ef2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8ef4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    8ef6:	0558      	lsls	r0, r3, #21
    8ef8:	d502      	bpl.n	8f00 <valid_adv_param+0x10>
		return false;
    8efa:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    8efc:	b003      	add	sp, #12
    8efe:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    8f00:	6922      	ldr	r2, [r4, #16]
    8f02:	b10a      	cbz	r2, 8f08 <valid_adv_param+0x18>
    8f04:	07d9      	lsls	r1, r3, #31
    8f06:	d5f8      	bpl.n	8efa <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    8f08:	4d1a      	ldr	r5, [pc, #104]	; (8f74 <valid_adv_param+0x84>)
    8f0a:	7820      	ldrb	r0, [r4, #0]
    8f0c:	79eb      	ldrb	r3, [r5, #7]
    8f0e:	4283      	cmp	r3, r0
    8f10:	d9f3      	bls.n	8efa <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    8f12:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8f16:	2300      	movs	r3, #0
    8f18:	4669      	mov	r1, sp
    8f1a:	4428      	add	r0, r5
    8f1c:	9300      	str	r3, [sp, #0]
    8f1e:	f8cd 3003 	str.w	r3, [sp, #3]
    8f22:	f020 ff4b 	bl	29dbc <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    8f26:	2800      	cmp	r0, #0
    8f28:	d0e7      	beq.n	8efa <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    8f2a:	6860      	ldr	r0, [r4, #4]
    8f2c:	07c2      	lsls	r2, r0, #31
    8f2e:	d406      	bmi.n	8f3e <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    8f30:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    8f34:	2b08      	cmp	r3, #8
    8f36:	d802      	bhi.n	8f3e <valid_adv_param+0x4e>
    8f38:	68a3      	ldr	r3, [r4, #8]
    8f3a:	2b9f      	cmp	r3, #159	; 0x9f
    8f3c:	d9dd      	bls.n	8efa <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    8f3e:	f010 0f30 	tst.w	r0, #48	; 0x30
    8f42:	d002      	beq.n	8f4a <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    8f44:	6923      	ldr	r3, [r4, #16]
    8f46:	2b00      	cmp	r3, #0
    8f48:	d0d7      	beq.n	8efa <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    8f4a:	06c3      	lsls	r3, r0, #27
    8f4c:	d401      	bmi.n	8f52 <valid_adv_param+0x62>
    8f4e:	6923      	ldr	r3, [r4, #16]
    8f50:	b943      	cbnz	r3, 8f64 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    8f52:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    8f56:	429a      	cmp	r2, r3
    8f58:	d8cf      	bhi.n	8efa <valid_adv_param+0xa>
    8f5a:	2a1f      	cmp	r2, #31
    8f5c:	d9cd      	bls.n	8efa <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    8f5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    8f62:	d8ca      	bhi.n	8efa <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    8f64:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    8f68:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    8f6c:	bf18      	it	ne
    8f6e:	2001      	movne	r0, #1
    8f70:	e7c4      	b.n	8efc <valid_adv_param+0xc>
    8f72:	bf00      	nop
    8f74:	20000ac0 	.word	0x20000ac0

00008f78 <hci_cmd_done>:
{
    8f78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8f7c:	4680      	mov	r8, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8f7e:	7990      	ldrb	r0, [r2, #6]
    8f80:	4e2b      	ldr	r6, [pc, #172]	; (9030 <hci_cmd_done+0xb8>)
{
    8f82:	460f      	mov	r7, r1
    8f84:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8f86:	f016 fca7 	bl	1f8d8 <net_buf_pool_get>
    8f8a:	4286      	cmp	r6, r0
    8f8c:	d00e      	beq.n	8fac <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    8f8e:	79ac      	ldrb	r4, [r5, #6]
    8f90:	4620      	mov	r0, r4
    8f92:	f016 fca1 	bl	1f8d8 <net_buf_pool_get>
    8f96:	4623      	mov	r3, r4
    8f98:	e9cd 0600 	strd	r0, r6, [sp]
    8f9c:	4642      	mov	r2, r8
    8f9e:	2157      	movs	r1, #87	; 0x57
    8fa0:	4824      	ldr	r0, [pc, #144]	; (9034 <hci_cmd_done+0xbc>)
    8fa2:	f01e fc96 	bl	278d2 <printk>
}
    8fa6:	b002      	add	sp, #8
    8fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    8fac:	4628      	mov	r0, r5
    8fae:	f016 fc9b 	bl	1f8e8 <net_buf_id>
    8fb2:	4c21      	ldr	r4, [pc, #132]	; (9038 <hci_cmd_done+0xc0>)
    8fb4:	260c      	movs	r6, #12
    8fb6:	fb06 4000 	mla	r0, r6, r0, r4
    8fba:	8843      	ldrh	r3, [r0, #2]
    8fbc:	4543      	cmp	r3, r8
    8fbe:	d00a      	beq.n	8fd6 <hci_cmd_done+0x5e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    8fc0:	4628      	mov	r0, r5
    8fc2:	f016 fc91 	bl	1f8e8 <net_buf_id>
    8fc6:	fb06 4000 	mla	r0, r6, r0, r4
    8fca:	4642      	mov	r2, r8
    8fcc:	8843      	ldrh	r3, [r0, #2]
    8fce:	481b      	ldr	r0, [pc, #108]	; (903c <hci_cmd_done+0xc4>)
    8fd0:	2157      	movs	r1, #87	; 0x57
    8fd2:	f01e fc7e 	bl	278d2 <printk>
	if (cmd(buf)->state && !status) {
    8fd6:	4628      	mov	r0, r5
    8fd8:	f016 fc86 	bl	1f8e8 <net_buf_id>
    8fdc:	260c      	movs	r6, #12
    8fde:	fb06 4000 	mla	r0, r6, r0, r4
    8fe2:	6843      	ldr	r3, [r0, #4]
    8fe4:	b15b      	cbz	r3, 8ffe <hci_cmd_done+0x86>
    8fe6:	b957      	cbnz	r7, 8ffe <hci_cmd_done+0x86>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    8fe8:	4628      	mov	r0, r5
    8fea:	f016 fc7d 	bl	1f8e8 <net_buf_id>
    8fee:	fb06 4000 	mla	r0, r6, r0, r4
    8ff2:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    8ff4:	7a1a      	ldrb	r2, [r3, #8]
    8ff6:	e9d3 0100 	ldrd	r0, r1, [r3]
    8ffa:	f020 fece 	bl	29d9a <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    8ffe:	4628      	mov	r0, r5
    9000:	f016 fc72 	bl	1f8e8 <net_buf_id>
    9004:	260c      	movs	r6, #12
    9006:	fb06 4000 	mla	r0, r6, r0, r4
    900a:	6883      	ldr	r3, [r0, #8]
    900c:	2b00      	cmp	r3, #0
    900e:	d0ca      	beq.n	8fa6 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    9010:	4628      	mov	r0, r5
    9012:	f016 fc69 	bl	1f8e8 <net_buf_id>
    9016:	4370      	muls	r0, r6
    9018:	5427      	strb	r7, [r4, r0]
		k_sem_give(cmd(buf)->sync);
    901a:	4628      	mov	r0, r5
    901c:	f016 fc64 	bl	1f8e8 <net_buf_id>
    9020:	fb06 4000 	mla	r0, r6, r0, r4
    9024:	6880      	ldr	r0, [r0, #8]
}
    9026:	b002      	add	sp, #8
    9028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    902c:	f01b bfc6 	b.w	24fbc <z_impl_k_sem_give>
    9030:	20002020 	.word	0x20002020
    9034:	00031b6e 	.word	0x00031b6e
    9038:	20003a0c 	.word	0x20003a0c
    903c:	00031ba8 	.word	0x00031ba8

00009040 <handle_event>:
{
    9040:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9042:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9046:	4604      	mov	r4, r0
    9048:	4608      	mov	r0, r1
		if (handler->event != event) {
    904a:	7811      	ldrb	r1, [r2, #0]
    904c:	42a1      	cmp	r1, r4
    904e:	d010      	beq.n	9072 <handle_event+0x32>
			continue;
    9050:	3208      	adds	r2, #8
	for (i = 0; i < num_handlers; i++) {
    9052:	429a      	cmp	r2, r3
    9054:	d1f9      	bne.n	904a <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    9056:	8985      	ldrh	r5, [r0, #12]
    9058:	6880      	ldr	r0, [r0, #8]
    905a:	4629      	mov	r1, r5
    905c:	f7ff fa90 	bl	8580 <bt_hex_real>
    9060:	462b      	mov	r3, r5
    9062:	9000      	str	r0, [sp, #0]
    9064:	4622      	mov	r2, r4
    9066:	2157      	movs	r1, #87	; 0x57
    9068:	480b      	ldr	r0, [pc, #44]	; (9098 <handle_event+0x58>)
    906a:	f01e fc32 	bl	278d2 <printk>
}
    906e:	b003      	add	sp, #12
    9070:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    9072:	8981      	ldrh	r1, [r0, #12]
    9074:	7853      	ldrb	r3, [r2, #1]
    9076:	428b      	cmp	r3, r1
    9078:	d908      	bls.n	908c <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    907a:	4808      	ldr	r0, [pc, #32]	; (909c <handle_event+0x5c>)
    907c:	460a      	mov	r2, r1
    907e:	4623      	mov	r3, r4
    9080:	2145      	movs	r1, #69	; 0x45
}
    9082:	b003      	add	sp, #12
    9084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    9088:	f01e bc23 	b.w	278d2 <printk>
		handler->handler(buf);
    908c:	6853      	ldr	r3, [r2, #4]
}
    908e:	b003      	add	sp, #12
    9090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    9094:	4718      	bx	r3
    9096:	bf00      	nop
    9098:	00031b47 	.word	0x00031b47
    909c:	00031b20 	.word	0x00031b20

000090a0 <hci_le_meta_event>:
{
    90a0:	b510      	push	{r4, lr}
    90a2:	2101      	movs	r1, #1
    90a4:	4604      	mov	r4, r0
    90a6:	3008      	adds	r0, #8
    90a8:	f016 ff5c 	bl	1ff64 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    90ac:	4621      	mov	r1, r4
    90ae:	2308      	movs	r3, #8
    90b0:	4a02      	ldr	r2, [pc, #8]	; (90bc <hci_le_meta_event+0x1c>)
    90b2:	7800      	ldrb	r0, [r0, #0]
}
    90b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    90b8:	f7ff bfc2 	b.w	9040 <handle_event>
    90bc:	0002f7e8 	.word	0x0002f7e8

000090c0 <find_pending_connect.part.21>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    90c0:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    90c2:	4c0c      	ldr	r4, [pc, #48]	; (90f4 <find_pending_connect.part.21+0x34>)
    90c4:	4601      	mov	r1, r0
    90c6:	2205      	movs	r2, #5
    90c8:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    90cc:	f002 fa50 	bl	b570 <bt_conn_lookup_state_le>
		if (!conn) {
    90d0:	b970      	cbnz	r0, 90f0 <find_pending_connect.part.21+0x30>
						       BT_ADDR_LE_NONE,
    90d2:	4b09      	ldr	r3, [pc, #36]	; (90f8 <find_pending_connect.part.21+0x38>)
    90d4:	6818      	ldr	r0, [r3, #0]
    90d6:	889a      	ldrh	r2, [r3, #4]
    90d8:	9000      	str	r0, [sp, #0]
    90da:	799b      	ldrb	r3, [r3, #6]
    90dc:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    90e0:	4669      	mov	r1, sp
    90e2:	2204      	movs	r2, #4
    90e4:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    90e8:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    90ec:	f002 fa40 	bl	b570 <bt_conn_lookup_state_le>
}
    90f0:	b002      	add	sp, #8
    90f2:	bd10      	pop	{r4, pc}
    90f4:	20000ac0 	.word	0x20000ac0
    90f8:	0002f2e4 	.word	0x0002f2e4

000090fc <hci_tx_thread>:
{
    90fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    9100:	f8df 8128 	ldr.w	r8, [pc, #296]	; 922c <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
    9104:	f8df 9148 	ldr.w	r9, [pc, #328]	; 9250 <hci_tx_thread+0x154>
			ev_count += bt_conn_prepare_events(&events[1]);
    9108:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    910c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    9110:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    9112:	f36f 3310 	bfc	r3, #12, #5
    9116:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    911a:	f002 f865 	bl	b1e8 <bt_conn_prepare_events>
    911e:	1c47      	adds	r7, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    9120:	f04f 32ff 	mov.w	r2, #4294967295
    9124:	f04f 33ff 	mov.w	r3, #4294967295
    9128:	4639      	mov	r1, r7
    912a:	4840      	ldr	r0, [pc, #256]	; (922c <hci_tx_thread+0x130>)
    912c:	f01c ff9c 	bl	26068 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    9130:	b158      	cbz	r0, 914a <hci_tx_thread+0x4e>
    9132:	f241 4271 	movw	r2, #5233	; 0x1471
    9136:	4649      	mov	r1, r9
    9138:	483d      	ldr	r0, [pc, #244]	; (9230 <hci_tx_thread+0x134>)
    913a:	f01e fbca 	bl	278d2 <printk>
    913e:	4040      	eors	r0, r0
    9140:	f380 8811 	msr	BASEPRI, r0
    9144:	f04f 0003 	mov.w	r0, #3
    9148:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    914a:	4c3a      	ldr	r4, [pc, #232]	; (9234 <hci_tx_thread+0x138>)
{
    914c:	4e37      	ldr	r6, [pc, #220]	; (922c <hci_tx_thread+0x130>)
    914e:	f104 0be0 	add.w	fp, r4, #224	; 0xe0
	for (; count; ev++, count--) {
    9152:	b917      	cbnz	r7, 915a <hci_tx_thread+0x5e>
	z_impl_k_yield();
    9154:	f01b fdd2 	bl	24cfc <z_impl_k_yield>
    9158:	e7d8      	b.n	910c <hci_tx_thread+0x10>
		switch (ev->state) {
    915a:	68f2      	ldr	r2, [r6, #12]
    915c:	f3c2 3204 	ubfx	r2, r2, #12, #5
    9160:	2a01      	cmp	r2, #1
    9162:	d953      	bls.n	920c <hci_tx_thread+0x110>
    9164:	2a04      	cmp	r2, #4
    9166:	d15b      	bne.n	9220 <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
    9168:	7b33      	ldrb	r3, [r6, #12]
    916a:	2b00      	cmp	r3, #0
    916c:	d151      	bne.n	9212 <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    916e:	2200      	movs	r2, #0
    9170:	2300      	movs	r3, #0
    9172:	4831      	ldr	r0, [pc, #196]	; (9238 <hci_tx_thread+0x13c>)
    9174:	f016 fcaa 	bl	1facc <net_buf_get>
	BT_ASSERT(buf);
    9178:	4605      	mov	r5, r0
    917a:	b958      	cbnz	r0, 9194 <hci_tx_thread+0x98>
    917c:	f241 420e 	movw	r2, #5134	; 0x140e
    9180:	4649      	mov	r1, r9
    9182:	482b      	ldr	r0, [pc, #172]	; (9230 <hci_tx_thread+0x134>)
    9184:	f01e fba5 	bl	278d2 <printk>
    9188:	4040      	eors	r0, r0
    918a:	f380 8811 	msr	BASEPRI, r0
    918e:	f04f 0003 	mov.w	r0, #3
    9192:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    9194:	f04f 33ff 	mov.w	r3, #4294967295
    9198:	f04f 32ff 	mov.w	r2, #4294967295
    919c:	4658      	mov	r0, fp
    919e:	f01b ff49 	bl	25034 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    91a2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    91a6:	b153      	cbz	r3, 91be <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
    91a8:	2145      	movs	r1, #69	; 0x45
    91aa:	4824      	ldr	r0, [pc, #144]	; (923c <hci_tx_thread+0x140>)
    91ac:	f01e fb91 	bl	278d2 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    91b0:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
    91b4:	f016 fda4 	bl	1fd00 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    91b8:	2300      	movs	r3, #0
    91ba:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    91be:	4628      	mov	r0, r5
    91c0:	f016 fde2 	bl	1fd88 <net_buf_ref>
    91c4:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
		return bt_hci_ecc_send(buf);
    91c8:	4628      	mov	r0, r5
    91ca:	f7ff fb39 	bl	8840 <bt_hci_ecc_send>
	if (err) {
    91ce:	4602      	mov	r2, r0
    91d0:	b1e0      	cbz	r0, 920c <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    91d2:	2145      	movs	r1, #69	; 0x45
    91d4:	481a      	ldr	r0, [pc, #104]	; (9240 <hci_tx_thread+0x144>)
    91d6:	f01e fb7c 	bl	278d2 <printk>
	z_impl_k_sem_give(sem);
    91da:	481a      	ldr	r0, [pc, #104]	; (9244 <hci_tx_thread+0x148>)
    91dc:	f01b feee 	bl	24fbc <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    91e0:	4628      	mov	r0, r5
    91e2:	f016 fb81 	bl	1f8e8 <net_buf_id>
    91e6:	4a18      	ldr	r2, [pc, #96]	; (9248 <hci_tx_thread+0x14c>)
    91e8:	230c      	movs	r3, #12
    91ea:	fb03 2000 	mla	r0, r3, r0, r2
    91ee:	211f      	movs	r1, #31
    91f0:	462a      	mov	r2, r5
    91f2:	8840      	ldrh	r0, [r0, #2]
    91f4:	f7ff fec0 	bl	8f78 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    91f8:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
    91fc:	f016 fd80 	bl	1fd00 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    9200:	2300      	movs	r3, #0
		net_buf_unref(buf);
    9202:	4628      	mov	r0, r5
		bt_dev.sent_cmd = NULL;
    9204:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		net_buf_unref(buf);
    9208:	f016 fd7a 	bl	1fd00 <net_buf_unref>
	for (; count; ev++, count--) {
    920c:	3614      	adds	r6, #20
    920e:	3f01      	subs	r7, #1
    9210:	e79f      	b.n	9152 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    9212:	2b01      	cmp	r3, #1
    9214:	d1fa      	bne.n	920c <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    9216:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    9218:	3834      	subs	r0, #52	; 0x34
    921a:	f002 faf5 	bl	b808 <bt_conn_process_tx>
    921e:	e7f5      	b.n	920c <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    9220:	2157      	movs	r1, #87	; 0x57
    9222:	480a      	ldr	r0, [pc, #40]	; (924c <hci_tx_thread+0x150>)
    9224:	f01e fb55 	bl	278d2 <printk>
    9228:	e7f0      	b.n	920c <hci_tx_thread+0x110>
    922a:	bf00      	nop
    922c:	20001240 	.word	0x20001240
    9230:	0003067f 	.word	0x0003067f
    9234:	20000ac0 	.word	0x20000ac0
    9238:	20000bbc 	.word	0x20000bbc
    923c:	00031cee 	.word	0x00031cee
    9240:	00031d0e 	.word	0x00031d0e
    9244:	20000ba0 	.word	0x20000ba0
    9248:	20003a0c 	.word	0x20003a0c
    924c:	00031d35 	.word	0x00031d35
    9250:	00031cba 	.word	0x00031cba

00009254 <hci_num_completed_packets>:
{
    9254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    9258:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    925a:	6887      	ldr	r7, [r0, #8]
    925c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 9344 <hci_num_completed_packets+0xf0>
			tx->pending_no_cb = 0U;
    9260:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
    9262:	783b      	ldrb	r3, [r7, #0]
    9264:	429d      	cmp	r5, r3
    9266:	db01      	blt.n	926c <hci_num_completed_packets+0x18>
}
    9268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    926c:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    9270:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    9274:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    9278:	4650      	mov	r0, sl
    927a:	f002 f85b 	bl	b334 <bt_conn_lookup_handle>
		if (!conn) {
    927e:	4604      	mov	r4, r0
    9280:	b1d0      	cbz	r0, 92b8 <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    9282:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    9286:	b37e      	cbz	r6, 92e8 <hci_num_completed_packets+0x94>
	__asm__ volatile(
    9288:	f04f 0320 	mov.w	r3, #32
    928c:	f3ef 8211 	mrs	r2, BASEPRI
    9290:	f383 8811 	msr	BASEPRI, r3
    9294:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    9298:	69e3      	ldr	r3, [r4, #28]
    929a:	b1a3      	cbz	r3, 92c6 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    929c:	3b01      	subs	r3, #1
    929e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    92a0:	f382 8811 	msr	BASEPRI, r2
    92a4:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    92a8:	4620      	mov	r0, r4
    92aa:	f001 fe41 	bl	af30 <bt_conn_get_pkts>
    92ae:	3e01      	subs	r6, #1
    92b0:	f01b fe84 	bl	24fbc <z_impl_k_sem_give>
    92b4:	b2b6      	uxth	r6, r6
    92b6:	e7e6      	b.n	9286 <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    92b8:	4652      	mov	r2, sl
    92ba:	2145      	movs	r1, #69	; 0x45
    92bc:	481f      	ldr	r0, [pc, #124]	; (933c <hci_num_completed_packets+0xe8>)
    92be:	f01e fb08 	bl	278d2 <printk>
	for (i = 0; i < evt->num_handles; i++) {
    92c2:	3501      	adds	r5, #1
    92c4:	e7cd      	b.n	9262 <hci_num_completed_packets+0xe>
Z_GENLIST_IS_EMPTY(slist)
    92c6:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    92c8:	b12b      	cbz	r3, 92d6 <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    92ca:	69a1      	ldr	r1, [r4, #24]
    92cc:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    92ce:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    92d0:	428b      	cmp	r3, r1
	list->tail = node;
    92d2:	bf08      	it	eq
    92d4:	61a0      	streq	r0, [r4, #24]
    92d6:	f382 8811 	msr	BASEPRI, r2
    92da:	f3bf 8f6f 	isb	sy
			if (!node) {
    92de:	b93b      	cbnz	r3, 92f0 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    92e0:	2145      	movs	r1, #69	; 0x45
    92e2:	4817      	ldr	r0, [pc, #92]	; (9340 <hci_num_completed_packets+0xec>)
    92e4:	f01e faf5 	bl	278d2 <printk>
		bt_conn_unref(conn);
    92e8:	4620      	mov	r0, r4
    92ea:	f001 fff7 	bl	b2dc <bt_conn_unref>
    92ee:	e7e8      	b.n	92c2 <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    92f0:	f04f 0220 	mov.w	r2, #32
    92f4:	f3ef 8111 	mrs	r1, BASEPRI
    92f8:	f382 8811 	msr	BASEPRI, r2
    92fc:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    9300:	68da      	ldr	r2, [r3, #12]
    9302:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    9304:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    9308:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    930a:	f8c3 800c 	str.w	r8, [r3, #12]
    930e:	b98a      	cbnz	r2, 9334 <hci_num_completed_packets+0xe0>
	list->head = node;
    9310:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    9314:	f381 8811 	msr	BASEPRI, r1
    9318:	f3bf 8f6f 	isb	sy
    931c:	2100      	movs	r1, #0
    931e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    9322:	f020 fd20 	bl	29d66 <atomic_test_and_set_bit>
    9326:	2800      	cmp	r0, #0
    9328:	d1be      	bne.n	92a8 <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    932a:	4651      	mov	r1, sl
    932c:	4648      	mov	r0, r9
    932e:	f024 fe2f 	bl	2df90 <k_queue_append>
    9332:	e7b9      	b.n	92a8 <hci_num_completed_packets+0x54>
	parent->next = child;
    9334:	6013      	str	r3, [r2, #0]
	list->tail = node;
    9336:	6263      	str	r3, [r4, #36]	; 0x24
    9338:	e7ec      	b.n	9314 <hci_num_completed_packets+0xc0>
    933a:	bf00      	nop
    933c:	00031c5f 	.word	0x00031c5f
    9340:	00031c80 	.word	0x00031c80
    9344:	20003028 	.word	0x20003028

00009348 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    9348:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    934a:	4b28      	ldr	r3, [pc, #160]	; (93ec <le_adv_start_add_conn+0xa4>)
	struct adv_id_check_data check_data = {
		.id = adv->id,
    934c:	7804      	ldrb	r4, [r0, #0]
{
    934e:	b085      	sub	sp, #20
    9350:	4606      	mov	r6, r0
    9352:	460f      	mov	r7, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    9354:	f103 0028 	add.w	r0, r3, #40	; 0x28
    9358:	2106      	movs	r1, #6
    935a:	f020 fd3e 	bl	29dda <atomic_test_bit>
    935e:	461a      	mov	r2, r3
    9360:	b140      	cbz	r0, 9374 <le_adv_start_add_conn+0x2c>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    9362:	2108      	movs	r1, #8
    9364:	f103 0028 	add.w	r0, r3, #40	; 0x28
    9368:	f020 fd37 	bl	29dda <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    936c:	b110      	cbz	r0, 9374 <le_adv_start_add_conn+0x2c>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    936e:	7e1b      	ldrb	r3, [r3, #24]
    9370:	42a3      	cmp	r3, r4
    9372:	d134      	bne.n	93de <le_adv_start_add_conn+0x96>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    9374:	4635      	mov	r5, r6

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    9376:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    9378:	f815 3b09 	ldrb.w	r3, [r5], #9
    937c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    9380:	4628      	mov	r0, r5
    9382:	2300      	movs	r3, #0
    9384:	9300      	str	r3, [sp, #0]
    9386:	f8cd 3003 	str.w	r3, [sp, #3]
    938a:	f020 fd17 	bl	29dbc <bt_addr_le_cmp>
    938e:	4604      	mov	r4, r0
    9390:	7830      	ldrb	r0, [r6, #0]
    9392:	b164      	cbz	r4, 93ae <le_adv_start_add_conn+0x66>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    9394:	4629      	mov	r1, r5
    9396:	f002 f8cf 	bl	b538 <bt_conn_exists_le>
    939a:	4604      	mov	r4, r0
    939c:	bb10      	cbnz	r0, 93e4 <le_adv_start_add_conn+0x9c>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    939e:	4629      	mov	r1, r5
    93a0:	7830      	ldrb	r0, [r6, #0]
    93a2:	f001 ff6d 	bl	b280 <bt_conn_add_le>
	if (!conn) {
    93a6:	4605      	mov	r5, r0
    93a8:	b178      	cbz	r0, 93ca <le_adv_start_add_conn+0x82>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    93aa:	2105      	movs	r1, #5
    93ac:	e013      	b.n	93d6 <le_adv_start_add_conn+0x8e>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    93ae:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    93b2:	9302      	str	r3, [sp, #8]
    93b4:	a902      	add	r1, sp, #8
    93b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    93ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    93be:	f88d 300e 	strb.w	r3, [sp, #14]
    93c2:	f001 ff5d 	bl	b280 <bt_conn_add_le>
		if (!conn) {
    93c6:	4605      	mov	r5, r0
    93c8:	b920      	cbnz	r0, 93d4 <le_adv_start_add_conn+0x8c>
			return -ENOMEM;
    93ca:	f06f 040b 	mvn.w	r4, #11
	*out_conn = conn;
	return 0;
}
    93ce:	4620      	mov	r0, r4
    93d0:	b005      	add	sp, #20
    93d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    93d4:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    93d6:	f001 ffb5 	bl	b344 <bt_conn_set_state>
	*out_conn = conn;
    93da:	603d      	str	r5, [r7, #0]
	return 0;
    93dc:	e7f7      	b.n	93ce <le_adv_start_add_conn+0x86>
		return -ENOTSUP;
    93de:	f06f 0485 	mvn.w	r4, #133	; 0x85
    93e2:	e7f4      	b.n	93ce <le_adv_start_add_conn+0x86>
		return -EINVAL;
    93e4:	f06f 0415 	mvn.w	r4, #21
    93e8:	e7f1      	b.n	93ce <le_adv_start_add_conn+0x86>
    93ea:	bf00      	nop
    93ec:	20000ac0 	.word	0x20000ac0

000093f0 <id_create.isra.22>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    93f0:	b530      	push	{r4, r5, lr}
    93f2:	4d17      	ldr	r5, [pc, #92]	; (9450 <id_create.isra.22+0x60>)
    93f4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    93f8:	b085      	sub	sp, #20
    93fa:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    93fc:	460c      	mov	r4, r1
    93fe:	b1a9      	cbz	r1, 942c <id_create.isra.22+0x3c>
    9400:	2300      	movs	r3, #0
    9402:	a902      	add	r1, sp, #8
    9404:	4620      	mov	r0, r4
    9406:	9302      	str	r3, [sp, #8]
    9408:	f8cd 300b 	str.w	r3, [sp, #11]
    940c:	f020 fcd6 	bl	29dbc <bt_addr_le_cmp>
    9410:	b160      	cbz	r0, 942c <id_create.isra.22+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    9412:	4621      	mov	r1, r4
    9414:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9416:	f020 fcd9 	bl	29dcc <bt_addr_le_copy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    941a:	2101      	movs	r1, #1
    941c:	480d      	ldr	r0, [pc, #52]	; (9454 <id_create.isra.22+0x64>)
    941e:	f020 fcdc 	bl	29dda <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    9422:	b108      	cbz	r0, 9428 <id_create.isra.22+0x38>
		bt_settings_save_id();
    9424:	f7ff fb54 	bl	8ad0 <bt_settings_save_id>
}
    9428:	b005      	add	sp, #20
    942a:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    942c:	4668      	mov	r0, sp
    942e:	f020 fc6e 	bl	29d0e <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    9432:	4668      	mov	r0, sp
    9434:	f7ff fd44 	bl	8ec0 <id_find>
    9438:	2800      	cmp	r0, #0
    943a:	daf7      	bge.n	942c <id_create.isra.22+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    943c:	4669      	mov	r1, sp
    943e:	4628      	mov	r0, r5
    9440:	f020 fcc4 	bl	29dcc <bt_addr_le_copy>
		if (addr) {
    9444:	2c00      	cmp	r4, #0
    9446:	d0e8      	beq.n	941a <id_create.isra.22+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9448:	4629      	mov	r1, r5
    944a:	4620      	mov	r0, r4
    944c:	e7e3      	b.n	9416 <id_create.isra.22+0x26>
    944e:	bf00      	nop
    9450:	20000ac0 	.word	0x20000ac0
    9454:	20000b54 	.word	0x20000b54

00009458 <le_adv_report>:
{
    9458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    945c:	f100 0508 	add.w	r5, r0, #8
    9460:	b08b      	sub	sp, #44	; 0x2c
    9462:	4604      	mov	r4, r0
    9464:	4628      	mov	r0, r5
    9466:	f024 f863 	bl	2d530 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    946a:	f8df b154 	ldr.w	fp, [pc, #340]	; 95c0 <le_adv_report+0x168>
    946e:	4680      	mov	r8, r0
	while (num_reports--) {
    9470:	f1b8 0f00 	cmp.w	r8, #0
    9474:	d006      	beq.n	9484 <le_adv_report+0x2c>
		if (buf->len < sizeof(*evt)) {
    9476:	89a3      	ldrh	r3, [r4, #12]
    9478:	2b08      	cmp	r3, #8
    947a:	d806      	bhi.n	948a <le_adv_report+0x32>
			BT_ERR("Unexpected end of buffer");
    947c:	2145      	movs	r1, #69	; 0x45
    947e:	484c      	ldr	r0, [pc, #304]	; (95b0 <le_adv_report+0x158>)
    9480:	f01e fa27 	bl	278d2 <printk>
}
    9484:	b00b      	add	sp, #44	; 0x2c
    9486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    948a:	2109      	movs	r1, #9
    948c:	4628      	mov	r0, r5
    948e:	f016 fd69 	bl	1ff64 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    9492:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    9496:	237f      	movs	r3, #127	; 0x7f
    9498:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
    949c:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    94a0:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    94a2:	7a5b      	ldrb	r3, [r3, #9]
    94a4:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
    94a8:	23ff      	movs	r3, #255	; 0xff
    94aa:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
    94ae:	2300      	movs	r3, #0
    94b0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    94b4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
		adv_info.adv_type = evt->evt_type;
    94b8:	7802      	ldrb	r2, [r0, #0]
    94ba:	f88d 201f 	strb.w	r2, [sp, #31]
    94be:	2a04      	cmp	r2, #4
    94c0:	bf9c      	itt	ls
    94c2:	4b3c      	ldrls	r3, [pc, #240]	; (95b4 <le_adv_report+0x15c>)
    94c4:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    94c6:	f8ad 3020 	strh.w	r3, [sp, #32]
    94ca:	4606      	mov	r6, r0
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    94cc:	1c43      	adds	r3, r0, #1
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    94ce:	2106      	movs	r1, #6
    94d0:	4839      	ldr	r0, [pc, #228]	; (95b8 <le_adv_report+0x160>)
    94d2:	f020 fc82 	bl	29dda <atomic_test_bit>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    94d6:	b168      	cbz	r0, 94f4 <le_adv_report+0x9c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    94d8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    94dc:	0752      	lsls	r2, r2, #29
    94de:	d509      	bpl.n	94f4 <le_adv_report+0x9c>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    94e0:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    94e2:	4628      	mov	r0, r5
    94e4:	3101      	adds	r1, #1
    94e6:	f108 38ff 	add.w	r8, r8, #4294967295
    94ea:	f016 fd1f 	bl	1ff2c <net_buf_simple_pull>
    94ee:	fa5f f888 	uxtb.w	r8, r8
    94f2:	e7bd      	b.n	9470 <le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    94f4:	7872      	ldrb	r2, [r6, #1]
    94f6:	1e91      	subs	r1, r2, #2
    94f8:	2901      	cmp	r1, #1
    94fa:	d84c      	bhi.n	9596 <le_adv_report+0x13e>
		bt_addr_le_copy(&id_addr, addr);
    94fc:	4619      	mov	r1, r3
    94fe:	a802      	add	r0, sp, #8
    9500:	f020 fc64 	bl	29dcc <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9504:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9508:	3b02      	subs	r3, #2
    950a:	f88d 3008 	strb.w	r3, [sp, #8]
	info->addr = &id_addr;
    950e:	ab02      	add	r3, sp, #8
    9510:	9306      	str	r3, [sp, #24]
	if (scan_dev_found_cb) {
    9512:	f8db 3000 	ldr.w	r3, [fp]
    9516:	b1b3      	cbz	r3, 9546 <le_adv_report+0xee>
	state->offset = net_buf_simple_headroom(buf);
    9518:	4628      	mov	r0, r5
    951a:	f024 f843 	bl	2d5a4 <net_buf_simple_headroom>
	state->len = buf->len;
    951e:	89a3      	ldrh	r3, [r4, #12]
    9520:	9300      	str	r3, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    9522:	4682      	mov	sl, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    9524:	462b      	mov	r3, r5
		buf->len = len;
    9526:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    952a:	f89d 201f 	ldrb.w	r2, [sp, #31]
    952e:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    9532:	f8db 7000 	ldr.w	r7, [fp]
    9536:	a802      	add	r0, sp, #8
    9538:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    953a:	6923      	ldr	r3, [r4, #16]
    953c:	fa13 f38a 	uxtah	r3, r3, sl
    9540:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    9542:	9b00      	ldr	r3, [sp, #0]
    9544:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    9546:	4b1d      	ldr	r3, [pc, #116]	; (95bc <le_adv_report+0x164>)
    9548:	681b      	ldr	r3, [r3, #0]
    954a:	2b00      	cmp	r3, #0
    954c:	d0c8      	beq.n	94e0 <le_adv_report+0x88>
    954e:	f1b3 0208 	subs.w	r2, r3, #8
    9552:	d0c5      	beq.n	94e0 <le_adv_report+0x88>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9554:	681f      	ldr	r7, [r3, #0]
    9556:	b107      	cbz	r7, 955a <le_adv_report+0x102>
    9558:	3f08      	subs	r7, #8
		if (listener->recv) {
    955a:	6813      	ldr	r3, [r2, #0]
    955c:	9201      	str	r2, [sp, #4]
    955e:	b193      	cbz	r3, 9586 <le_adv_report+0x12e>
	state->offset = net_buf_simple_headroom(buf);
    9560:	4628      	mov	r0, r5
    9562:	f024 f81f 	bl	2d5a4 <net_buf_simple_headroom>
			listener->recv(info, &buf->b);
    9566:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
    9568:	89a3      	ldrh	r3, [r4, #12]
    956a:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
    956c:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    9570:	4682      	mov	sl, r0
			listener->recv(info, &buf->b);
    9572:	4629      	mov	r1, r5
    9574:	a806      	add	r0, sp, #24
	state->len = buf->len;
    9576:	9300      	str	r3, [sp, #0]
    9578:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    957a:	6922      	ldr	r2, [r4, #16]
	buf->len = state->len;
    957c:	9b00      	ldr	r3, [sp, #0]
    957e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    9580:	fa12 f28a 	uxtah	r2, r2, sl
    9584:	60a2      	str	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    9586:	2f00      	cmp	r7, #0
    9588:	d0aa      	beq.n	94e0 <le_adv_report+0x88>
    958a:	68bb      	ldr	r3, [r7, #8]
    958c:	b103      	cbz	r3, 9590 <le_adv_report+0x138>
    958e:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    9590:	463a      	mov	r2, r7
    9592:	461f      	mov	r7, r3
    9594:	e7e1      	b.n	955a <le_adv_report+0x102>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    9596:	2aff      	cmp	r2, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    9598:	bf06      	itte	eq
    959a:	2300      	moveq	r3, #0
    959c:	a904      	addeq	r1, sp, #16
		bt_addr_le_copy(&id_addr,
    959e:	4619      	movne	r1, r3
    95a0:	a802      	add	r0, sp, #8
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    95a2:	bf04      	itt	eq
    95a4:	9304      	streq	r3, [sp, #16]
    95a6:	f8cd 3013 	streq.w	r3, [sp, #19]
		bt_addr_le_copy(&id_addr,
    95aa:	f020 fc0f 	bl	29dcc <bt_addr_le_copy>
    95ae:	e7ae      	b.n	950e <le_adv_report+0xb6>
    95b0:	00031d84 	.word	0x00031d84
    95b4:	00031784 	.word	0x00031784
    95b8:	20000b54 	.word	0x20000b54
    95bc:	20003a30 	.word	0x20003a30
    95c0:	20003a38 	.word	0x20003a38

000095c4 <hci_cmd_status>:
{
    95c4:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
    95c6:	2104      	movs	r1, #4
    95c8:	4604      	mov	r4, r0
    95ca:	3008      	adds	r0, #8
    95cc:	f016 fcca 	bl	1ff64 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    95d0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    95d2:	7801      	ldrb	r1, [r0, #0]
    95d4:	8840      	ldrh	r0, [r0, #2]
    95d6:	4622      	mov	r2, r4
    95d8:	f7ff fcce 	bl	8f78 <hci_cmd_done>
	if (ncmd) {
    95dc:	b125      	cbz	r5, 95e8 <hci_cmd_status+0x24>
    95de:	4803      	ldr	r0, [pc, #12]	; (95ec <hci_cmd_status+0x28>)
}
    95e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    95e4:	f01b bcea 	b.w	24fbc <z_impl_k_sem_give>
    95e8:	bd38      	pop	{r3, r4, r5, pc}
    95ea:	bf00      	nop
    95ec:	20000ba0 	.word	0x20000ba0

000095f0 <hci_cmd_complete>:
{
    95f0:	b538      	push	{r3, r4, r5, lr}
    95f2:	2103      	movs	r1, #3
    95f4:	4604      	mov	r4, r0
    95f6:	3008      	adds	r0, #8
    95f8:	f016 fcb4 	bl	1ff64 <net_buf_simple_pull_mem>
	status = buf->data[0];
    95fc:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    95fe:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    9600:	7819      	ldrb	r1, [r3, #0]
    9602:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    9606:	4622      	mov	r2, r4
    9608:	f7ff fcb6 	bl	8f78 <hci_cmd_done>
	if (ncmd) {
    960c:	b125      	cbz	r5, 9618 <hci_cmd_complete+0x28>
    960e:	4803      	ldr	r0, [pc, #12]	; (961c <hci_cmd_complete+0x2c>)
}
    9610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9614:	f01b bcd2 	b.w	24fbc <z_impl_k_sem_give>
    9618:	bd38      	pop	{r3, r4, r5, pc}
    961a:	bf00      	nop
    961c:	20000ba0 	.word	0x20000ba0

00009620 <bt_hci_cmd_create>:
{
    9620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    9624:	f04f 32ff 	mov.w	r2, #4294967295
    9628:	4682      	mov	sl, r0
    962a:	f04f 33ff 	mov.w	r3, #4294967295
    962e:	481c      	ldr	r0, [pc, #112]	; (96a0 <bt_hci_cmd_create+0x80>)
    9630:	4689      	mov	r9, r1
    9632:	f023 ff4f 	bl	2d4d4 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    9636:	4604      	mov	r4, r0
    9638:	b950      	cbnz	r0, 9650 <bt_hci_cmd_create+0x30>
    963a:	491a      	ldr	r1, [pc, #104]	; (96a4 <bt_hci_cmd_create+0x84>)
    963c:	481a      	ldr	r0, [pc, #104]	; (96a8 <bt_hci_cmd_create+0x88>)
    963e:	f44f 7281 	mov.w	r2, #258	; 0x102
    9642:	f01e f946 	bl	278d2 <printk>
    9646:	f44f 7181 	mov.w	r1, #258	; 0x102
    964a:	4816      	ldr	r0, [pc, #88]	; (96a4 <bt_hci_cmd_create+0x84>)
    964c:	f01e fbba 	bl	27dc4 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
    9650:	f104 0808 	add.w	r8, r4, #8
    9654:	2100      	movs	r1, #0
    9656:	2600      	movs	r6, #0
    9658:	4640      	mov	r0, r8
    965a:	f016 fa67 	bl	1fb2c <net_buf_simple_reserve>
    965e:	7526      	strb	r6, [r4, #20]
	cmd(buf)->opcode = opcode;
    9660:	4620      	mov	r0, r4
    9662:	f016 f941 	bl	1f8e8 <net_buf_id>
    9666:	4f11      	ldr	r7, [pc, #68]	; (96ac <bt_hci_cmd_create+0x8c>)
    9668:	250c      	movs	r5, #12
    966a:	fb05 7000 	mla	r0, r5, r0, r7
    966e:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
    9672:	4620      	mov	r0, r4
    9674:	f016 f938 	bl	1f8e8 <net_buf_id>
    9678:	fb05 7000 	mla	r0, r5, r0, r7
    967c:	6086      	str	r6, [r0, #8]
	cmd(buf)->state = NULL;
    967e:	4620      	mov	r0, r4
    9680:	f016 f932 	bl	1f8e8 <net_buf_id>
    9684:	fb05 7000 	mla	r0, r5, r0, r7
	return net_buf_simple_add(&buf->b, len);
    9688:	2103      	movs	r1, #3
    968a:	6046      	str	r6, [r0, #4]
    968c:	4640      	mov	r0, r8
    968e:	f016 fc87 	bl	1ffa0 <net_buf_simple_add>
	hdr->param_len = param_len;
    9692:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    9696:	f8a0 a000 	strh.w	sl, [r0]
}
    969a:	4620      	mov	r0, r4
    969c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96a0:	20002020 	.word	0x20002020
    96a4:	00031cba 	.word	0x00031cba
    96a8:	0003067f 	.word	0x0003067f
    96ac:	20003a0c 	.word	0x20003a0c

000096b0 <bt_hci_cmd_send>:
{
    96b0:	b538      	push	{r3, r4, r5, lr}
    96b2:	4604      	mov	r4, r0
	if (!buf) {
    96b4:	460d      	mov	r5, r1
    96b6:	b919      	cbnz	r1, 96c0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    96b8:	f7ff ffb2 	bl	9620 <bt_hci_cmd_create>
		if (!buf) {
    96bc:	4605      	mov	r5, r0
    96be:	b1c0      	cbz	r0, 96f2 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    96c0:	f640 4335 	movw	r3, #3125	; 0xc35
    96c4:	429c      	cmp	r4, r3
    96c6:	d10e      	bne.n	96e6 <bt_hci_cmd_send+0x36>
		return bt_hci_ecc_send(buf);
    96c8:	4628      	mov	r0, r5
    96ca:	f7ff f8b9 	bl	8840 <bt_hci_ecc_send>
		if (err) {
    96ce:	4604      	mov	r4, r0
    96d0:	b138      	cbz	r0, 96e2 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    96d2:	4602      	mov	r2, r0
    96d4:	2145      	movs	r1, #69	; 0x45
    96d6:	4808      	ldr	r0, [pc, #32]	; (96f8 <bt_hci_cmd_send+0x48>)
    96d8:	f01e f8fb 	bl	278d2 <printk>
			net_buf_unref(buf);
    96dc:	4628      	mov	r0, r5
    96de:	f016 fb0f 	bl	1fd00 <net_buf_unref>
}
    96e2:	4620      	mov	r0, r4
    96e4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    96e6:	4629      	mov	r1, r5
    96e8:	4804      	ldr	r0, [pc, #16]	; (96fc <bt_hci_cmd_send+0x4c>)
    96ea:	f016 fadb 	bl	1fca4 <net_buf_put>
	return 0;
    96ee:	2400      	movs	r4, #0
    96f0:	e7f7      	b.n	96e2 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    96f2:	f06f 0468 	mvn.w	r4, #104	; 0x68
    96f6:	e7f4      	b.n	96e2 <bt_hci_cmd_send+0x32>
    96f8:	00031d0e 	.word	0x00031d0e
    96fc:	20000bbc 	.word	0x20000bbc

00009700 <le_conn_param_neg_reply>:
{
    9700:	b570      	push	{r4, r5, r6, lr}
    9702:	4606      	mov	r6, r0
    9704:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    9706:	f242 0021 	movw	r0, #8225	; 0x2021
    970a:	2103      	movs	r1, #3
    970c:	f7ff ff88 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
    9710:	4604      	mov	r4, r0
    9712:	b928      	cbnz	r0, 9720 <le_conn_param_neg_reply+0x20>
		BT_ERR("Unable to allocate buffer");
    9714:	2145      	movs	r1, #69	; 0x45
    9716:	4809      	ldr	r0, [pc, #36]	; (973c <le_conn_param_neg_reply+0x3c>)
}
    9718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    971c:	f01e b8d9 	b.w	278d2 <printk>
    9720:	2103      	movs	r1, #3
    9722:	3008      	adds	r0, #8
    9724:	f016 fc3c 	bl	1ffa0 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    9728:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    972a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    972c:	4621      	mov	r1, r4
    972e:	f242 0021 	movw	r0, #8225	; 0x2021
}
    9732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    9736:	f7ff bfbb 	b.w	96b0 <bt_hci_cmd_send>
    973a:	bf00      	nop
    973c:	00031db0 	.word	0x00031db0

00009740 <le_conn_param_req>:
{
    9740:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    9742:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    9744:	78d9      	ldrb	r1, [r3, #3]
    9746:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    9748:	881d      	ldrh	r5, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    974a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    974e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    9752:	7959      	ldrb	r1, [r3, #5]
    9754:	791a      	ldrb	r2, [r3, #4]
    9756:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    975a:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    975e:	799a      	ldrb	r2, [r3, #6]
    9760:	79d9      	ldrb	r1, [r3, #7]
    9762:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9766:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    976a:	7a1a      	ldrb	r2, [r3, #8]
    976c:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    976e:	b2ac      	uxth	r4, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9770:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    9774:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9776:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    977a:	f001 fddb 	bl	b334 <bt_conn_lookup_handle>
	if (!conn) {
    977e:	4606      	mov	r6, r0
    9780:	b950      	cbnz	r0, 9798 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9782:	2145      	movs	r1, #69	; 0x45
    9784:	481c      	ldr	r0, [pc, #112]	; (97f8 <le_conn_param_req+0xb8>)
    9786:	4622      	mov	r2, r4
    9788:	f01e f8a3 	bl	278d2 <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    978c:	2102      	movs	r1, #2
    978e:	4620      	mov	r0, r4
    9790:	f7ff ffb6 	bl	9700 <le_conn_param_neg_reply>
}
    9794:	b002      	add	sp, #8
    9796:	bd70      	pop	{r4, r5, r6, pc}
	if (!le_param_req(conn, &param)) {
    9798:	4669      	mov	r1, sp
    979a:	f001 fc01 	bl	afa0 <le_param_req>
    979e:	b938      	cbnz	r0, 97b0 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    97a0:	211e      	movs	r1, #30
    97a2:	4620      	mov	r0, r4
    97a4:	f7ff ffac 	bl	9700 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    97a8:	4630      	mov	r0, r6
    97aa:	f001 fd97 	bl	b2dc <bt_conn_unref>
    97ae:	e7f1      	b.n	9794 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    97b0:	210e      	movs	r1, #14
    97b2:	f242 0020 	movw	r0, #8224	; 0x2020
    97b6:	f7ff ff33 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
    97ba:	4604      	mov	r4, r0
    97bc:	2800      	cmp	r0, #0
    97be:	d0f3      	beq.n	97a8 <le_conn_param_req+0x68>
    97c0:	210e      	movs	r1, #14
    97c2:	3008      	adds	r0, #8
    97c4:	f016 fbec 	bl	1ffa0 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    97c8:	2300      	movs	r3, #0
    97ca:	6043      	str	r3, [r0, #4]
    97cc:	6083      	str	r3, [r0, #8]
    97ce:	8183      	strh	r3, [r0, #12]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    97d0:	f8bd 3000 	ldrh.w	r3, [sp]
    97d4:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    97d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    97da:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    97dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    97e0:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    97e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    97e6:	8005      	strh	r5, [r0, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    97e8:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    97ea:	4621      	mov	r1, r4
    97ec:	f242 0020 	movw	r0, #8224	; 0x2020
    97f0:	f7ff ff5e 	bl	96b0 <bt_hci_cmd_send>
    97f4:	e7d8      	b.n	97a8 <le_conn_param_req+0x68>
    97f6:	bf00      	nop
    97f8:	00031dcf 	.word	0x00031dcf

000097fc <conn_auto_initiate>:
{
    97fc:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    97fe:	7a83      	ldrb	r3, [r0, #10]
    9800:	2b07      	cmp	r3, #7
{
    9802:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    9804:	d11f      	bne.n	9846 <conn_auto_initiate+0x4a>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    9806:	210d      	movs	r1, #13
    9808:	3004      	adds	r0, #4
    980a:	f020 fae6 	bl	29dda <atomic_test_bit>
    980e:	b9d0      	cbnz	r0, 9846 <conn_auto_initiate+0x4a>
    9810:	78e3      	ldrb	r3, [r4, #3]
    9812:	b123      	cbz	r3, 981e <conn_auto_initiate+0x22>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    9814:	4b0c      	ldr	r3, [pc, #48]	; (9848 <conn_auto_initiate+0x4c>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    9816:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    981a:	071b      	lsls	r3, r3, #28
    981c:	d513      	bpl.n	9846 <conn_auto_initiate+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    981e:	2102      	movs	r1, #2
    9820:	f242 0016 	movw	r0, #8214	; 0x2016
    9824:	f7ff fefc 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
    9828:	4605      	mov	r5, r0
    982a:	b160      	cbz	r0, 9846 <conn_auto_initiate+0x4a>
    982c:	2102      	movs	r1, #2
    982e:	3008      	adds	r0, #8
    9830:	f016 fbb6 	bl	1ffa0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    9834:	8823      	ldrh	r3, [r4, #0]
    9836:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9838:	4629      	mov	r1, r5
    983a:	f242 0016 	movw	r0, #8214	; 0x2016
}
    983e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9842:	f7ff bf35 	b.w	96b0 <bt_hci_cmd_send>
}
    9846:	bd38      	pop	{r3, r4, r5, pc}
    9848:	20000ac0 	.word	0x20000ac0

0000984c <le_remote_feat_complete>:
{
    984c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    984e:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9850:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
    9854:	4630      	mov	r0, r6
    9856:	f001 fd6d 	bl	b334 <bt_conn_lookup_handle>
	if (!conn) {
    985a:	4605      	mov	r5, r0
    985c:	b930      	cbnz	r0, 986c <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    985e:	4632      	mov	r2, r6
    9860:	2145      	movs	r1, #69	; 0x45
    9862:	480d      	ldr	r0, [pc, #52]	; (9898 <le_remote_feat_complete+0x4c>)
}
    9864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9868:	f01e b833 	b.w	278d2 <printk>
	if (!evt->status) {
    986c:	7823      	ldrb	r3, [r4, #0]
    986e:	b933      	cbnz	r3, 987e <le_remote_feat_complete+0x32>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    9870:	f854 3f03 	ldr.w	r3, [r4, #3]!
    9874:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    9878:	6863      	ldr	r3, [r4, #4]
    987a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    987e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    9882:	1d28      	adds	r0, r5, #4
    9884:	f020 fa60 	bl	29d48 <atomic_or>
	conn_auto_initiate(conn);
    9888:	4628      	mov	r0, r5
    988a:	f7ff ffb7 	bl	97fc <conn_auto_initiate>
	bt_conn_unref(conn);
    988e:	4628      	mov	r0, r5
}
    9890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    9894:	f001 bd22 	b.w	b2dc <bt_conn_unref>
    9898:	00031dcf 	.word	0x00031dcf

0000989c <bt_hci_cmd_send_sync>:
{
    989c:	b5f0      	push	{r4, r5, r6, r7, lr}
    989e:	4607      	mov	r7, r0
    98a0:	b087      	sub	sp, #28
    98a2:	4615      	mov	r5, r2
	if (!buf) {
    98a4:	460c      	mov	r4, r1
    98a6:	b921      	cbnz	r1, 98b2 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    98a8:	f7ff feba 	bl	9620 <bt_hci_cmd_create>
		if (!buf) {
    98ac:	4604      	mov	r4, r0
    98ae:	2800      	cmp	r0, #0
    98b0:	d048      	beq.n	9944 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    98b2:	2201      	movs	r2, #1
    98b4:	2100      	movs	r1, #0
    98b6:	4668      	mov	r0, sp
    98b8:	f024 fbc3 	bl	2e042 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    98bc:	4620      	mov	r0, r4
    98be:	f016 f813 	bl	1f8e8 <net_buf_id>
    98c2:	4e22      	ldr	r6, [pc, #136]	; (994c <bt_hci_cmd_send_sync+0xb0>)
    98c4:	230c      	movs	r3, #12
    98c6:	fb03 6000 	mla	r0, r3, r0, r6
    98ca:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    98ce:	4620      	mov	r0, r4
    98d0:	f016 fa5a 	bl	1fd88 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    98d4:	4621      	mov	r1, r4
    98d6:	481e      	ldr	r0, [pc, #120]	; (9950 <bt_hci_cmd_send_sync+0xb4>)
    98d8:	f016 f9e4 	bl	1fca4 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    98dc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    98e0:	2300      	movs	r3, #0
    98e2:	4668      	mov	r0, sp
    98e4:	f01b fba6 	bl	25034 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    98e8:	b158      	cbz	r0, 9902 <bt_hci_cmd_send_sync+0x66>
    98ea:	f240 124d 	movw	r2, #333	; 0x14d
    98ee:	4919      	ldr	r1, [pc, #100]	; (9954 <bt_hci_cmd_send_sync+0xb8>)
    98f0:	4819      	ldr	r0, [pc, #100]	; (9958 <bt_hci_cmd_send_sync+0xbc>)
    98f2:	f01d ffee 	bl	278d2 <printk>
    98f6:	4040      	eors	r0, r0
    98f8:	f380 8811 	msr	BASEPRI, r0
    98fc:	f04f 0003 	mov.w	r0, #3
    9900:	df02      	svc	2
	status = cmd(buf)->status;
    9902:	4620      	mov	r0, r4
    9904:	f015 fff0 	bl	1f8e8 <net_buf_id>
    9908:	230c      	movs	r3, #12
    990a:	4358      	muls	r0, r3
    990c:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    990e:	b186      	cbz	r6, 9932 <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    9910:	4633      	mov	r3, r6
    9912:	463a      	mov	r2, r7
    9914:	2157      	movs	r1, #87	; 0x57
    9916:	4811      	ldr	r0, [pc, #68]	; (995c <bt_hci_cmd_send_sync+0xc0>)
    9918:	f01d ffdb 	bl	278d2 <printk>
		net_buf_unref(buf);
    991c:	4620      	mov	r0, r4
    991e:	f016 f9ef 	bl	1fd00 <net_buf_unref>
			return -EIO;
    9922:	2e09      	cmp	r6, #9
    9924:	bf0c      	ite	eq
    9926:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    992a:	f06f 0004 	mvnne.w	r0, #4
}
    992e:	b007      	add	sp, #28
    9930:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    9932:	b115      	cbz	r5, 993a <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
    9934:	602c      	str	r4, [r5, #0]
	return 0;
    9936:	4630      	mov	r0, r6
    9938:	e7f9      	b.n	992e <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    993a:	4620      	mov	r0, r4
    993c:	f016 f9e0 	bl	1fd00 <net_buf_unref>
	return 0;
    9940:	4628      	mov	r0, r5
    9942:	e7f4      	b.n	992e <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    9944:	f06f 0068 	mvn.w	r0, #104	; 0x68
    9948:	e7f1      	b.n	992e <bt_hci_cmd_send_sync+0x92>
    994a:	bf00      	nop
    994c:	20003a0c 	.word	0x20003a0c
    9950:	20000bbc 	.word	0x20000bbc
    9954:	00031cba 	.word	0x00031cba
    9958:	0003067f 	.word	0x0003067f
    995c:	000317ce 	.word	0x000317ce

00009960 <set_le_scan_enable_legacy>:
{
    9960:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    9962:	2102      	movs	r1, #2
{
    9964:	b085      	sub	sp, #20
    9966:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    9968:	f242 000c 	movw	r0, #8204	; 0x200c
    996c:	f7ff fe58 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
    9970:	4605      	mov	r5, r0
    9972:	b340      	cbz	r0, 99c6 <set_le_scan_enable_legacy+0x66>
    9974:	2102      	movs	r1, #2
    9976:	3008      	adds	r0, #8
    9978:	f016 fb12 	bl	1ffa0 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    997c:	2c01      	cmp	r4, #1
    997e:	4603      	mov	r3, r0
    9980:	d11e      	bne.n	99c0 <set_le_scan_enable_legacy+0x60>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    9982:	2108      	movs	r1, #8
    9984:	4811      	ldr	r0, [pc, #68]	; (99cc <set_le_scan_enable_legacy+0x6c>)
    9986:	f020 fa28 	bl	29dda <atomic_test_bit>
    998a:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    998c:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    998e:	4b0f      	ldr	r3, [pc, #60]	; (99cc <set_le_scan_enable_legacy+0x6c>)
    9990:	9301      	str	r3, [sp, #4]
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    9992:	f004 0401 	and.w	r4, r4, #1
	state->bit = bit;
    9996:	2305      	movs	r3, #5
	cmd(buf)->state = &state;
    9998:	4628      	mov	r0, r5
    999a:	9302      	str	r3, [sp, #8]
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    999c:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    99a0:	f015 ffa2 	bl	1f8e8 <net_buf_id>
    99a4:	4a0a      	ldr	r2, [pc, #40]	; (99d0 <set_le_scan_enable_legacy+0x70>)
    99a6:	230c      	movs	r3, #12
    99a8:	fb03 2000 	mla	r0, r3, r0, r2
    99ac:	ab01      	add	r3, sp, #4
    99ae:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    99b0:	2200      	movs	r2, #0
    99b2:	4629      	mov	r1, r5
    99b4:	f242 000c 	movw	r0, #8204	; 0x200c
    99b8:	f7ff ff70 	bl	989c <bt_hci_cmd_send_sync>
}
    99bc:	b005      	add	sp, #20
    99be:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    99c0:	2200      	movs	r2, #0
    99c2:	7042      	strb	r2, [r0, #1]
    99c4:	e7e2      	b.n	998c <set_le_scan_enable_legacy+0x2c>
		return -ENOBUFS;
    99c6:	f06f 0068 	mvn.w	r0, #104	; 0x68
    99ca:	e7f7      	b.n	99bc <set_le_scan_enable_legacy+0x5c>
    99cc:	20000b54 	.word	0x20000b54
    99d0:	20003a0c 	.word	0x20003a0c

000099d4 <hci_set_ad>:
{
    99d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99d8:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    99da:	2120      	movs	r1, #32
{
    99dc:	4683      	mov	fp, r0
    99de:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    99e0:	f7ff fe1e 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
    99e4:	4607      	mov	r7, r0
    99e6:	2800      	cmp	r0, #0
    99e8:	d053      	beq.n	9a92 <hci_set_ad+0xbe>
    99ea:	2120      	movs	r1, #32
    99ec:	3008      	adds	r0, #8
    99ee:	f016 fad7 	bl	1ffa0 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    99f2:	2100      	movs	r1, #0
    99f4:	2220      	movs	r2, #32
    99f6:	4682      	mov	sl, r0
    99f8:	f024 fc92 	bl	2e320 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    99fc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    9a00:	f10a 0901 	add.w	r9, sl, #1
static int set_data_add(uint8_t *set_data, uint8_t set_data_len_max,
    9a04:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    9a06:	2100      	movs	r1, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    9a08:	6825      	ldr	r5, [r4, #0]
    9a0a:	2300      	movs	r3, #0
    9a0c:	6862      	ldr	r2, [r4, #4]
    9a0e:	4293      	cmp	r3, r2
    9a10:	d30d      	bcc.n	9a2e <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
    9a12:	9b00      	ldr	r3, [sp, #0]
    9a14:	3408      	adds	r4, #8
    9a16:	429c      	cmp	r4, r3
    9a18:	d1f6      	bne.n	9a08 <hci_set_ad+0x34>
	*data_len = set_data_len;
    9a1a:	f88a 1000 	strb.w	r1, [sl]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9a1e:	2200      	movs	r2, #0
    9a20:	4639      	mov	r1, r7
    9a22:	4658      	mov	r0, fp
}
    9a24:	b003      	add	sp, #12
    9a26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9a2a:	f7ff bf37 	b.w	989c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    9a2e:	786a      	ldrb	r2, [r5, #1]
			uint8_t type = data[j].type;
    9a30:	7828      	ldrb	r0, [r5, #0]
			if ((set_data_len + len + 2) > set_data_len_max) {
    9a32:	1c8e      	adds	r6, r1, #2
    9a34:	eb06 0c02 	add.w	ip, r6, r2
    9a38:	f1bc 0f1f 	cmp.w	ip, #31
    9a3c:	d912      	bls.n	9a64 <hci_set_ad+0x90>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9a3e:	2809      	cmp	r0, #9
				ssize_t shortened_len = set_data_len_max -
    9a40:	f1c1 021d 	rsb	r2, r1, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9a44:	d101      	bne.n	9a4a <hci_set_ad+0x76>
    9a46:	2a00      	cmp	r2, #0
    9a48:	dc0b      	bgt.n	9a62 <hci_set_ad+0x8e>
					BT_ERR("Too big advertising data");
    9a4a:	2145      	movs	r1, #69	; 0x45
    9a4c:	4812      	ldr	r0, [pc, #72]	; (9a98 <hci_set_ad+0xc4>)
    9a4e:	f01d ff40 	bl	278d2 <printk>
		net_buf_unref(buf);
    9a52:	4638      	mov	r0, r7
    9a54:	f016 f954 	bl	1fd00 <net_buf_unref>
					return -EINVAL;
    9a58:	f06f 0015 	mvn.w	r0, #21
}
    9a5c:	b003      	add	sp, #12
    9a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    9a62:	2008      	movs	r0, #8
			set_data[set_data_len++] = len + 1;
    9a64:	fa5f f882 	uxtb.w	r8, r2
    9a68:	f108 0c01 	add.w	ip, r8, #1
    9a6c:	f809 c001 	strb.w	ip, [r9, r1]
    9a70:	3101      	adds	r1, #1
			set_data[set_data_len++] = type;
    9a72:	b2c9      	uxtb	r1, r1
    9a74:	b2f6      	uxtb	r6, r6
    9a76:	f809 0001 	strb.w	r0, [r9, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    9a7a:	eb09 0006 	add.w	r0, r9, r6
    9a7e:	6869      	ldr	r1, [r5, #4]
    9a80:	9301      	str	r3, [sp, #4]
    9a82:	f024 fc12 	bl	2e2aa <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    9a86:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    9a88:	4446      	add	r6, r8
    9a8a:	b2f1      	uxtb	r1, r6
		for (size_t j = 0; j < ad[i].len; j++) {
    9a8c:	3301      	adds	r3, #1
    9a8e:	3508      	adds	r5, #8
    9a90:	e7bc      	b.n	9a0c <hci_set_ad+0x38>
		return -ENOBUFS;
    9a92:	f06f 0068 	mvn.w	r0, #104	; 0x68
    9a96:	e7e1      	b.n	9a5c <hci_set_ad+0x88>
    9a98:	00031c9c 	.word	0x00031c9c

00009a9c <le_adv_update.constprop.37>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    9a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9aa0:	b087      	sub	sp, #28
    9aa2:	4607      	mov	r7, r0
    9aa4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
    9aa8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    9aac:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    9ab0:	460c      	mov	r4, r1
    9ab2:	4692      	mov	sl, r2
	struct bt_ad d[2] = {};
    9ab4:	2100      	movs	r1, #0
    9ab6:	2210      	movs	r2, #16
    9ab8:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    9aba:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
    9abc:	f024 fc30 	bl	2e320 <memset>
	if (use_name) {
    9ac0:	b175      	cbz	r5, 9ae0 <le_adv_update.constprop.37+0x44>
		if ((ad && ad_has_name(ad, ad_len)) ||
    9ac2:	bba4      	cbnz	r4, 9b2e <le_adv_update.constprop.37+0x92>
    9ac4:	2e00      	cmp	r6, #0
    9ac6:	d13d      	bne.n	9b44 <le_adv_update.constprop.37+0xa8>
		data = (struct bt_data)BT_DATA(
    9ac8:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 9b74 <le_adv_update.constprop.37+0xd8>
    9acc:	4658      	mov	r0, fp
    9ace:	f7f8 f99b 	bl	1e08 <strlen>
    9ad2:	2309      	movs	r3, #9
    9ad4:	f88d 3000 	strb.w	r3, [sp]
    9ad8:	f88d 0001 	strb.w	r0, [sp, #1]
    9adc:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    9ae0:	e9cd 4a02 	strd	r4, sl, [sp, #8]
		if (use_name && !scannable) {
    9ae4:	b385      	cbz	r5, 9b48 <le_adv_update.constprop.37+0xac>
    9ae6:	f1b9 0f00 	cmp.w	r9, #0
    9aea:	d12d      	bne.n	9b48 <le_adv_update.constprop.37+0xac>
			d[1].len = 1;
    9aec:	2301      	movs	r3, #1
			d[1].data = &data;
    9aee:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    9af2:	9305      	str	r3, [sp, #20]
			d_len = 2;
    9af4:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    9af6:	a902      	add	r1, sp, #8
    9af8:	f242 0008 	movw	r0, #8200	; 0x2008
    9afc:	f7ff ff6a 	bl	99d4 <hci_set_ad>
		if (err) {
    9b00:	4604      	mov	r4, r0
    9b02:	b938      	cbnz	r0, 9b14 <le_adv_update.constprop.37+0x78>
	if (scannable) {
    9b04:	f1b9 0f00 	cmp.w	r9, #0
    9b08:	d120      	bne.n	9b4c <le_adv_update.constprop.37+0xb0>
    9b0a:	2104      	movs	r1, #4
    9b0c:	f107 0010 	add.w	r0, r7, #16
    9b10:	f020 f91a 	bl	29d48 <atomic_or>
}
    9b14:	4620      	mov	r0, r4
    9b16:	b007      	add	sp, #28
    9b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    9b1c:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    9b20:	3a08      	subs	r2, #8
    9b22:	2a01      	cmp	r2, #1
    9b24:	d923      	bls.n	9b6e <le_adv_update.constprop.37+0xd2>
	for (i = 0; i < ad_len; i++) {
    9b26:	3301      	adds	r3, #1
    9b28:	459a      	cmp	sl, r3
    9b2a:	d1f7      	bne.n	9b1c <le_adv_update.constprop.37+0x80>
    9b2c:	e7ca      	b.n	9ac4 <le_adv_update.constprop.37+0x28>
    9b2e:	2300      	movs	r3, #0
    9b30:	e7fa      	b.n	9b28 <le_adv_update.constprop.37+0x8c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    9b32:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
    9b36:	3a08      	subs	r2, #8
    9b38:	2a01      	cmp	r2, #1
    9b3a:	d918      	bls.n	9b6e <le_adv_update.constprop.37+0xd2>
	for (i = 0; i < ad_len; i++) {
    9b3c:	3301      	adds	r3, #1
    9b3e:	4598      	cmp	r8, r3
    9b40:	d1f7      	bne.n	9b32 <le_adv_update.constprop.37+0x96>
    9b42:	e7c1      	b.n	9ac8 <le_adv_update.constprop.37+0x2c>
    9b44:	2300      	movs	r3, #0
    9b46:	e7fa      	b.n	9b3e <le_adv_update.constprop.37+0xa2>
		d_len = 1;
    9b48:	2201      	movs	r2, #1
    9b4a:	e7d4      	b.n	9af6 <le_adv_update.constprop.37+0x5a>
		d[0].len = sd_len;
    9b4c:	e9cd 6802 	strd	r6, r8, [sp, #8]
		if (use_name) {
    9b50:	2201      	movs	r2, #1
    9b52:	b11d      	cbz	r5, 9b5c <le_adv_update.constprop.37+0xc0>
			d[1].len = 1;
    9b54:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    9b56:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    9b5a:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    9b5c:	a902      	add	r1, sp, #8
    9b5e:	f242 0009 	movw	r0, #8201	; 0x2009
    9b62:	f7ff ff37 	bl	99d4 <hci_set_ad>
		if (err) {
    9b66:	2800      	cmp	r0, #0
    9b68:	d0cf      	beq.n	9b0a <le_adv_update.constprop.37+0x6e>
    9b6a:	4604      	mov	r4, r0
    9b6c:	e7d2      	b.n	9b14 <le_adv_update.constprop.37+0x78>
			return -EINVAL;
    9b6e:	f06f 0415 	mvn.w	r4, #21
    9b72:	e7cf      	b.n	9b14 <le_adv_update.constprop.37+0x78>
    9b74:	00031da2 	.word	0x00031da2

00009b78 <set_random_address>:
{
    9b78:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    9b7a:	4c15      	ldr	r4, [pc, #84]	; (9bd0 <set_random_address+0x58>)
    9b7c:	2206      	movs	r2, #6
    9b7e:	f104 012d 	add.w	r1, r4, #45	; 0x2d
    9b82:	4606      	mov	r6, r0
    9b84:	f024 fb83 	bl	2e28e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    9b88:	4602      	mov	r2, r0
    9b8a:	b1d8      	cbz	r0, 9bc4 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    9b8c:	2106      	movs	r1, #6
    9b8e:	f242 0005 	movw	r0, #8197	; 0x2005
    9b92:	f7ff fd45 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
    9b96:	4605      	mov	r5, r0
    9b98:	b1b0      	cbz	r0, 9bc8 <set_random_address+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9b9a:	2206      	movs	r2, #6
    9b9c:	4631      	mov	r1, r6
    9b9e:	3008      	adds	r0, #8
    9ba0:	f023 fd0c 	bl	2d5bc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    9ba4:	2200      	movs	r2, #0
    9ba6:	4629      	mov	r1, r5
    9ba8:	f242 0005 	movw	r0, #8197	; 0x2005
    9bac:	f7ff fe76 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    9bb0:	4602      	mov	r2, r0
    9bb2:	b938      	cbnz	r0, 9bc4 <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    9bb4:	4631      	mov	r1, r6
    9bb6:	f104 002d 	add.w	r0, r4, #45	; 0x2d
    9bba:	f020 f902 	bl	29dc2 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    9bbe:	2301      	movs	r3, #1
    9bc0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
    9bc4:	4610      	mov	r0, r2
    9bc6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    9bc8:	f06f 0268 	mvn.w	r2, #104	; 0x68
    9bcc:	e7fa      	b.n	9bc4 <set_random_address+0x4c>
    9bce:	bf00      	nop
    9bd0:	20000ac0 	.word	0x20000ac0

00009bd4 <le_adv_set_random_addr.isra.28>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    9bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    9bd8:	f011 0401 	ands.w	r4, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    9bdc:	4606      	mov	r6, r0
    9bde:	460d      	mov	r5, r1
    9be0:	4692      	mov	sl, r2
    9be2:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    9be4:	d02b      	beq.n	9c3e <le_adv_set_random_addr.isra.28+0x6a>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    9be6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9ca8 <le_adv_set_random_addr.isra.28+0xd4>
    9bea:	b12a      	cbz	r2, 9bf8 <le_adv_set_random_addr.isra.28+0x24>
    9bec:	0688      	lsls	r0, r1, #26
    9bee:	d503      	bpl.n	9bf8 <le_adv_set_random_addr.isra.28+0x24>
    9bf0:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    9bf4:	0659      	lsls	r1, r3, #25
    9bf6:	d554      	bpl.n	9ca2 <le_adv_set_random_addr.isra.28+0xce>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9bf8:	ea4f 09c6 	mov.w	r9, r6, lsl #3
    9bfc:	eba9 0306 	sub.w	r3, r9, r6
    9c00:	f818 3003 	ldrb.w	r3, [r8, r3]
    9c04:	2b01      	cmp	r3, #1
    9c06:	d009      	beq.n	9c1c <le_adv_set_random_addr.isra.28+0x48>
			*own_addr_type = id_addr->type;
    9c08:	eba9 0606 	sub.w	r6, r9, r6
    9c0c:	f818 3006 	ldrb.w	r3, [r8, r6]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    9c10:	f1ba 0f00 	cmp.w	sl, #0
    9c14:	d10e      	bne.n	9c34 <le_adv_set_random_addr.isra.28+0x60>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    9c16:	703b      	strb	r3, [r7, #0]
	return 0;
    9c18:	2400      	movs	r4, #0
    9c1a:	e008      	b.n	9c2e <le_adv_set_random_addr.isra.28+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    9c1c:	2007      	movs	r0, #7
    9c1e:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    9c22:	4440      	add	r0, r8
    9c24:	f7ff ffa8 	bl	9b78 <set_random_address>
				if (err) {
    9c28:	4604      	mov	r4, r0
    9c2a:	2800      	cmp	r0, #0
    9c2c:	d0ec      	beq.n	9c08 <le_adv_set_random_addr.isra.28+0x34>
}
    9c2e:	4620      	mov	r0, r4
    9c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    9c34:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    9c36:	bf48      	it	mi
    9c38:	f043 0302 	orrmi.w	r3, r3, #2
    9c3c:	e7eb      	b.n	9c16 <le_adv_set_random_addr.isra.28+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    9c3e:	f011 0504 	ands.w	r5, r1, #4
    9c42:	d013      	beq.n	9c6c <le_adv_set_random_addr.isra.28+0x98>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9c44:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    9c48:	4d17      	ldr	r5, [pc, #92]	; (9ca8 <le_adv_set_random_addr.isra.28+0xd4>)
    9c4a:	eba8 0300 	sub.w	r3, r8, r0
    9c4e:	5ceb      	ldrb	r3, [r5, r3]
    9c50:	2b01      	cmp	r3, #1
    9c52:	d106      	bne.n	9c62 <le_adv_set_random_addr.isra.28+0x8e>
				err = set_adv_random_address(adv, &id_addr->a);
    9c54:	2007      	movs	r0, #7
    9c56:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    9c5a:	4428      	add	r0, r5
    9c5c:	f7ff ff8c 	bl	9b78 <set_random_address>
    9c60:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    9c62:	eba8 0606 	sub.w	r6, r8, r6
    9c66:	5dab      	ldrb	r3, [r5, r6]
    9c68:	703b      	strb	r3, [r7, #0]
    9c6a:	e7e0      	b.n	9c2e <le_adv_set_random_addr.isra.28+0x5a>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    9c6c:	2105      	movs	r1, #5
    9c6e:	480f      	ldr	r0, [pc, #60]	; (9cac <le_adv_set_random_addr.isra.28+0xd8>)
    9c70:	f020 f8b3 	bl	29dda <atomic_test_bit>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    9c74:	b950      	cbnz	r0, 9c8c <le_adv_set_random_addr.isra.28+0xb8>
			bool scan_enabled = false;
    9c76:	2600      	movs	r6, #0
			err = le_adv_set_private_addr(adv);
    9c78:	f020 f8b8 	bl	29dec <le_adv_set_private_addr.isra.27>
    9c7c:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    9c7e:	2001      	movs	r0, #1
    9c80:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    9c82:	2e00      	cmp	r6, #0
    9c84:	d0d3      	beq.n	9c2e <le_adv_set_random_addr.isra.28+0x5a>
	return set_le_scan_enable_legacy(enable);
    9c86:	f7ff fe6b 	bl	9960 <set_le_scan_enable_legacy>
		if (err) {
    9c8a:	e7d0      	b.n	9c2e <le_adv_set_random_addr.isra.28+0x5a>
			    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    9c8c:	2107      	movs	r1, #7
    9c8e:	4807      	ldr	r0, [pc, #28]	; (9cac <le_adv_set_random_addr.isra.28+0xd8>)
    9c90:	f020 f8a3 	bl	29dda <atomic_test_bit>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    9c94:	4606      	mov	r6, r0
    9c96:	2800      	cmp	r0, #0
    9c98:	d0ed      	beq.n	9c76 <le_adv_set_random_addr.isra.28+0xa2>
	return set_le_scan_enable_legacy(enable);
    9c9a:	4628      	mov	r0, r5
    9c9c:	f7ff fe60 	bl	9960 <set_le_scan_enable_legacy>
    9ca0:	e7ea      	b.n	9c78 <le_adv_set_random_addr.isra.28+0xa4>
			return -ENOTSUP;
    9ca2:	f06f 0485 	mvn.w	r4, #133	; 0x85
    9ca6:	e7c2      	b.n	9c2e <le_adv_set_random_addr.isra.28+0x5a>
    9ca8:	20000ac0 	.word	0x20000ac0
    9cac:	20000b54 	.word	0x20000b54

00009cb0 <set_le_adv_enable_legacy>:
{
    9cb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9cb2:	4606      	mov	r6, r0
    9cb4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    9cb6:	f242 000a 	movw	r0, #8202	; 0x200a
    9cba:	2101      	movs	r1, #1
    9cbc:	f7ff fcb0 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
    9cc0:	4604      	mov	r4, r0
    9cc2:	b1e8      	cbz	r0, 9d00 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    9cc4:	3008      	adds	r0, #8
    9cc6:	b1cd      	cbz	r5, 9cfc <set_le_adv_enable_legacy+0x4c>
	return net_buf_simple_add_u8(&buf->b, val);
    9cc8:	2101      	movs	r1, #1
    9cca:	f023 fc83 	bl	2d5d4 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    9cce:	3610      	adds	r6, #16
    9cd0:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    9cd2:	4620      	mov	r0, r4
    9cd4:	9302      	str	r3, [sp, #8]
	state->target = target;
    9cd6:	9601      	str	r6, [sp, #4]
	state->val = val;
    9cd8:	f88d 500c 	strb.w	r5, [sp, #12]
    9cdc:	f015 fe04 	bl	1f8e8 <net_buf_id>
    9ce0:	4a09      	ldr	r2, [pc, #36]	; (9d08 <set_le_adv_enable_legacy+0x58>)
    9ce2:	230c      	movs	r3, #12
    9ce4:	fb03 2000 	mla	r0, r3, r0, r2
    9ce8:	ab01      	add	r3, sp, #4
    9cea:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    9cec:	2200      	movs	r2, #0
    9cee:	4621      	mov	r1, r4
    9cf0:	f242 000a 	movw	r0, #8202	; 0x200a
    9cf4:	f7ff fdd2 	bl	989c <bt_hci_cmd_send_sync>
}
    9cf8:	b004      	add	sp, #16
    9cfa:	bd70      	pop	{r4, r5, r6, pc}
    9cfc:	4629      	mov	r1, r5
    9cfe:	e7e4      	b.n	9cca <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    9d00:	f06f 0068 	mvn.w	r0, #104	; 0x68
    9d04:	e7f8      	b.n	9cf8 <set_le_adv_enable_legacy+0x48>
    9d06:	bf00      	nop
    9d08:	20003a0c 	.word	0x20003a0c

00009d0c <bt_le_scan_random_addr_check>:
{
    9d0c:	b508      	push	{r3, lr}
	    !atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    9d0e:	2106      	movs	r1, #6
    9d10:	4802      	ldr	r0, [pc, #8]	; (9d1c <bt_le_scan_random_addr_check+0x10>)
    9d12:	f020 f862 	bl	29dda <atomic_test_bit>
}
    9d16:	2001      	movs	r0, #1
    9d18:	bd08      	pop	{r3, pc}
    9d1a:	bf00      	nop
    9d1c:	20000ae8 	.word	0x20000ae8

00009d20 <bt_le_scan_update>:
{
    9d20:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    9d22:	2106      	movs	r1, #6
    9d24:	4808      	ldr	r0, [pc, #32]	; (9d48 <bt_le_scan_update+0x28>)
    9d26:	f020 f858 	bl	29dda <atomic_test_bit>
    9d2a:	4603      	mov	r3, r0
    9d2c:	b948      	cbnz	r0, 9d42 <bt_le_scan_update+0x22>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    9d2e:	2105      	movs	r1, #5
    9d30:	4805      	ldr	r0, [pc, #20]	; (9d48 <bt_le_scan_update+0x28>)
    9d32:	f020 f852 	bl	29dda <atomic_test_bit>
    9d36:	b120      	cbz	r0, 9d42 <bt_le_scan_update+0x22>
	return set_le_scan_enable_legacy(enable);
    9d38:	4618      	mov	r0, r3
}
    9d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return set_le_scan_enable_legacy(enable);
    9d3e:	f7ff be0f 	b.w	9960 <set_le_scan_enable_legacy>
}
    9d42:	2000      	movs	r0, #0
    9d44:	bd08      	pop	{r3, pc}
    9d46:	bf00      	nop
    9d48:	20000b54 	.word	0x20000b54

00009d4c <hci_event_prio>:
{
    9d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d50:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    9d52:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    9d56:	4628      	mov	r0, r5
    9d58:	f023 fc24 	bl	2d5a4 <net_buf_simple_headroom>
	state->len = buf->len;
    9d5c:	89a7      	ldrh	r7, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9d5e:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
    9d60:	4606      	mov	r6, r0
    9d62:	d80b      	bhi.n	9d7c <hci_event_prio+0x30>
    9d64:	f641 02ae 	movw	r2, #6318	; 0x18ae
    9d68:	4920      	ldr	r1, [pc, #128]	; (9dec <hci_event_prio+0xa0>)
    9d6a:	4821      	ldr	r0, [pc, #132]	; (9df0 <hci_event_prio+0xa4>)
    9d6c:	f01d fdb1 	bl	278d2 <printk>
    9d70:	4040      	eors	r0, r0
    9d72:	f380 8811 	msr	BASEPRI, r0
    9d76:	f04f 0003 	mov.w	r0, #3
    9d7a:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    9d7c:	2102      	movs	r1, #2
    9d7e:	4628      	mov	r0, r5
    9d80:	f016 f8f0 	bl	1ff64 <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    9d84:	7803      	ldrb	r3, [r0, #0]
    9d86:	2b1a      	cmp	r3, #26
    9d88:	4680      	mov	r8, r0
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    9d8a:	d828      	bhi.n	9dde <hci_event_prio+0x92>
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
    9d8c:	2501      	movs	r5, #1
    9d8e:	4a19      	ldr	r2, [pc, #100]	; (9df4 <hci_event_prio+0xa8>)
    9d90:	fa05 f303 	lsl.w	r3, r5, r3
    9d94:	4213      	tst	r3, r2
    9d96:	d104      	bne.n	9da2 <hci_event_prio+0x56>
    9d98:	f013 0f20 	tst.w	r3, #32
#endif /* defined(CONFIG_BT_CONN) */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
    9d9c:	bf14      	ite	ne
    9d9e:	2503      	movne	r5, #3
    9da0:	2502      	moveq	r5, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    9da2:	07ea      	lsls	r2, r5, #31
    9da4:	d40b      	bmi.n	9dbe <hci_event_prio+0x72>
    9da6:	f641 02b2 	movw	r2, #6322	; 0x18b2
    9daa:	4910      	ldr	r1, [pc, #64]	; (9dec <hci_event_prio+0xa0>)
    9dac:	4810      	ldr	r0, [pc, #64]	; (9df0 <hci_event_prio+0xa4>)
    9dae:	f01d fd90 	bl	278d2 <printk>
    9db2:	4040      	eors	r0, r0
    9db4:	f380 8811 	msr	BASEPRI, r0
    9db8:	f04f 0003 	mov.w	r0, #3
    9dbc:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    9dbe:	2305      	movs	r3, #5
    9dc0:	4a0d      	ldr	r2, [pc, #52]	; (9df8 <hci_event_prio+0xac>)
    9dc2:	f898 0000 	ldrb.w	r0, [r8]
    9dc6:	4621      	mov	r1, r4
    9dc8:	f7ff f93a 	bl	9040 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    9dcc:	07ab      	lsls	r3, r5, #30
    9dce:	d508      	bpl.n	9de2 <hci_event_prio+0x96>
	buf->data = buf->__buf + state->offset;
    9dd0:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    9dd2:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    9dd4:	fa13 f686 	uxtah	r6, r3, r6
    9dd8:	60a6      	str	r6, [r4, #8]
}
    9dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9dde:	2502      	movs	r5, #2
    9de0:	e7df      	b.n	9da2 <hci_event_prio+0x56>
		net_buf_unref(buf);
    9de2:	4620      	mov	r0, r4
}
    9de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    9de8:	f015 bf8a 	b.w	1fd00 <net_buf_unref>
    9dec:	00031cba 	.word	0x00031cba
    9df0:	0003067f 	.word	0x0003067f
    9df4:	0408c000 	.word	0x0408c000
    9df8:	0002f858 	.word	0x0002f858

00009dfc <bt_recv>:
{
    9dfc:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    9dfe:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    9e00:	2d01      	cmp	r5, #1
{
    9e02:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    9e04:	d03e      	beq.n	9e84 <bt_recv+0x88>
    9e06:	2d03      	cmp	r5, #3
    9e08:	d175      	bne.n	9ef6 <bt_recv+0xfa>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9e0a:	8983      	ldrh	r3, [r0, #12]
    9e0c:	2b03      	cmp	r3, #3
    9e0e:	d80b      	bhi.n	9e28 <bt_recv+0x2c>
    9e10:	f240 42ac 	movw	r2, #1196	; 0x4ac
    9e14:	493d      	ldr	r1, [pc, #244]	; (9f0c <bt_recv+0x110>)
    9e16:	483e      	ldr	r0, [pc, #248]	; (9f10 <bt_recv+0x114>)
    9e18:	f01d fd5b 	bl	278d2 <printk>
    9e1c:	4040      	eors	r0, r0
    9e1e:	f380 8811 	msr	BASEPRI, r0
    9e22:	f04f 0003 	mov.w	r0, #3
    9e26:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    9e28:	2104      	movs	r1, #4
    9e2a:	f104 0008 	add.w	r0, r4, #8
    9e2e:	f016 f899 	bl	1ff64 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9e32:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    9e34:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    9e36:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9e38:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    9e3a:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    9e3c:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    9e40:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    9e42:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    9e44:	d007      	beq.n	9e56 <bt_recv+0x5a>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    9e46:	2145      	movs	r1, #69	; 0x45
    9e48:	4832      	ldr	r0, [pc, #200]	; (9f14 <bt_recv+0x118>)
    9e4a:	f01d fd42 	bl	278d2 <printk>
	net_buf_unref(buf);
    9e4e:	4620      	mov	r0, r4
    9e50:	f015 ff56 	bl	1fd00 <net_buf_unref>
    9e54:	e014      	b.n	9e80 <bt_recv+0x84>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    9e56:	f001 fa6d 	bl	b334 <bt_conn_lookup_handle>
	if (!conn) {
    9e5a:	4605      	mov	r5, r0
    9e5c:	b928      	cbnz	r0, 9e6a <bt_recv+0x6e>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    9e5e:	8ae2      	ldrh	r2, [r4, #22]
    9e60:	482d      	ldr	r0, [pc, #180]	; (9f18 <bt_recv+0x11c>)
    9e62:	2145      	movs	r1, #69	; 0x45
    9e64:	f01d fd35 	bl	278d2 <printk>
		net_buf_unref(buf);
    9e68:	e7f1      	b.n	9e4e <bt_recv+0x52>
	acl(buf)->index = bt_conn_index(conn);
    9e6a:	f001 fd33 	bl	b8d4 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    9e6e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    9e70:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    9e72:	4621      	mov	r1, r4
    9e74:	4628      	mov	r0, r5
    9e76:	f001 f8fb 	bl	b070 <bt_conn_recv>
	bt_conn_unref(conn);
    9e7a:	4628      	mov	r0, r5
    9e7c:	f001 fa2e 	bl	b2dc <bt_conn_unref>
		return 0;
    9e80:	2000      	movs	r0, #0
}
    9e82:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9e84:	8983      	ldrh	r3, [r0, #12]
    9e86:	2b01      	cmp	r3, #1
    9e88:	d80b      	bhi.n	9ea2 <bt_recv+0xa6>
    9e8a:	f241 32fb 	movw	r2, #5115	; 0x13fb
    9e8e:	491f      	ldr	r1, [pc, #124]	; (9f0c <bt_recv+0x110>)
    9e90:	481f      	ldr	r0, [pc, #124]	; (9f10 <bt_recv+0x114>)
    9e92:	f01d fd1e 	bl	278d2 <printk>
    9e96:	4040      	eors	r0, r0
    9e98:	f380 8811 	msr	BASEPRI, r0
    9e9c:	f04f 0003 	mov.w	r0, #3
    9ea0:	df02      	svc	2
    9ea2:	2102      	movs	r1, #2
    9ea4:	f104 0008 	add.w	r0, r4, #8
    9ea8:	f016 f85c 	bl	1ff64 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    9eac:	7802      	ldrb	r2, [r0, #0]
    9eae:	2a1a      	cmp	r2, #26
    9eb0:	4606      	mov	r6, r0
	switch (evt) {
    9eb2:	d81e      	bhi.n	9ef2 <bt_recv+0xf6>
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
    9eb4:	2301      	movs	r3, #1
    9eb6:	4093      	lsls	r3, r2
    9eb8:	4a18      	ldr	r2, [pc, #96]	; (9f1c <bt_recv+0x120>)
    9eba:	4213      	tst	r3, r2
    9ebc:	d104      	bne.n	9ec8 <bt_recv+0xcc>
    9ebe:	f013 0f20 	tst.w	r3, #32
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    9ec2:	bf0c      	ite	eq
    9ec4:	2502      	moveq	r5, #2
    9ec6:	2503      	movne	r5, #3
    9ec8:	07ab      	lsls	r3, r5, #30
    9eca:	d40b      	bmi.n	9ee4 <bt_recv+0xe8>
    9ecc:	f241 32ff 	movw	r2, #5119	; 0x13ff
    9ed0:	490e      	ldr	r1, [pc, #56]	; (9f0c <bt_recv+0x110>)
    9ed2:	480f      	ldr	r0, [pc, #60]	; (9f10 <bt_recv+0x114>)
    9ed4:	f01d fcfd 	bl	278d2 <printk>
    9ed8:	4040      	eors	r0, r0
    9eda:	f380 8811 	msr	BASEPRI, r0
    9ede:	f04f 0003 	mov.w	r0, #3
    9ee2:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    9ee4:	2304      	movs	r3, #4
    9ee6:	4a0e      	ldr	r2, [pc, #56]	; (9f20 <bt_recv+0x124>)
    9ee8:	7830      	ldrb	r0, [r6, #0]
    9eea:	4621      	mov	r1, r4
    9eec:	f7ff f8a8 	bl	9040 <handle_event>
    9ef0:	e7ad      	b.n	9e4e <bt_recv+0x52>
		return BT_HCI_EVT_FLAG_RECV;
    9ef2:	2502      	movs	r5, #2
    9ef4:	e7e8      	b.n	9ec8 <bt_recv+0xcc>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    9ef6:	462a      	mov	r2, r5
    9ef8:	2145      	movs	r1, #69	; 0x45
    9efa:	480a      	ldr	r0, [pc, #40]	; (9f24 <bt_recv+0x128>)
    9efc:	f01d fce9 	bl	278d2 <printk>
		net_buf_unref(buf);
    9f00:	4620      	mov	r0, r4
    9f02:	f015 fefd 	bl	1fd00 <net_buf_unref>
		return -EINVAL;
    9f06:	f06f 0015 	mvn.w	r0, #21
    9f0a:	e7ba      	b.n	9e82 <bt_recv+0x86>
    9f0c:	00031cba 	.word	0x00031cba
    9f10:	0003067f 	.word	0x0003067f
    9f14:	00031a34 	.word	0x00031a34
    9f18:	00031a5d 	.word	0x00031a5d
    9f1c:	0408c000 	.word	0x0408c000
    9f20:	0002f838 	.word	0x0002f838
    9f24:	00031a84 	.word	0x00031a84

00009f28 <bt_recv_prio>:
{
    9f28:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9f2a:	7d03      	ldrb	r3, [r0, #20]
    9f2c:	2b01      	cmp	r3, #1
{
    9f2e:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9f30:	d00b      	beq.n	9f4a <bt_recv_prio+0x22>
    9f32:	f641 02f5 	movw	r2, #6389	; 0x18f5
    9f36:	4907      	ldr	r1, [pc, #28]	; (9f54 <bt_recv_prio+0x2c>)
    9f38:	4807      	ldr	r0, [pc, #28]	; (9f58 <bt_recv_prio+0x30>)
    9f3a:	f01d fcca 	bl	278d2 <printk>
    9f3e:	4040      	eors	r0, r0
    9f40:	f380 8811 	msr	BASEPRI, r0
    9f44:	f04f 0003 	mov.w	r0, #3
    9f48:	df02      	svc	2
	hci_event_prio(buf);
    9f4a:	4620      	mov	r0, r4
    9f4c:	f7ff fefe 	bl	9d4c <hci_event_prio>
}
    9f50:	2000      	movs	r0, #0
    9f52:	bd10      	pop	{r4, pc}
    9f54:	00031cba 	.word	0x00031cba
    9f58:	0003067f 	.word	0x0003067f

00009f5c <bt_hci_driver_register>:
	if (bt_dev.drv) {
    9f5c:	4a08      	ldr	r2, [pc, #32]	; (9f80 <bt_hci_driver_register+0x24>)
    9f5e:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    9f62:	b93b      	cbnz	r3, 9f74 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    9f64:	68c1      	ldr	r1, [r0, #12]
    9f66:	b141      	cbz	r1, 9f7a <bt_hci_driver_register+0x1e>
    9f68:	6901      	ldr	r1, [r0, #16]
    9f6a:	b131      	cbz	r1, 9f7a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    9f6c:	f8c2 0118 	str.w	r0, [r2, #280]	; 0x118
	return 0;
    9f70:	4618      	mov	r0, r3
    9f72:	4770      	bx	lr
		return -EALREADY;
    9f74:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9f78:	4770      	bx	lr
		return -EINVAL;
    9f7a:	f06f 0015 	mvn.w	r0, #21
}
    9f7e:	4770      	bx	lr
    9f80:	20000ac0 	.word	0x20000ac0

00009f84 <bt_finalize_init>:
{
    9f84:	b508      	push	{r3, lr}
    9f86:	2102      	movs	r1, #2
    9f88:	4803      	ldr	r0, [pc, #12]	; (9f98 <bt_finalize_init+0x14>)
    9f8a:	f01f fedd 	bl	29d48 <atomic_or>
		bt_le_scan_update(false);
    9f8e:	2000      	movs	r0, #0
}
    9f90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    9f94:	f7ff bec4 	b.w	9d20 <bt_le_scan_update>
    9f98:	20000b54 	.word	0x20000b54

00009f9c <bt_init>:
{
    9f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9f9e:	4dbf      	ldr	r5, [pc, #764]	; (a29c <bt_init+0x300>)
    9fa0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    9fa4:	6899      	ldr	r1, [r3, #8]
    9fa6:	f011 0101 	ands.w	r1, r1, #1
    9faa:	d123      	bne.n	9ff4 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9fac:	aa01      	add	r2, sp, #4
    9fae:	f640 4003 	movw	r0, #3075	; 0xc03
    9fb2:	f7ff fc73 	bl	989c <bt_hci_cmd_send_sync>
		if (err) {
    9fb6:	4604      	mov	r4, r0
    9fb8:	2800      	cmp	r0, #0
    9fba:	d177      	bne.n	a0ac <bt_init+0x110>
		hci_reset_complete(rsp);
    9fbc:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
    9fbe:	689b      	ldr	r3, [r3, #8]
	if (status) {
    9fc0:	781b      	ldrb	r3, [r3, #0]
    9fc2:	b9a3      	cbnz	r3, 9fee <bt_init+0x52>
	scan_dev_found_cb = NULL;
    9fc4:	4ab6      	ldr	r2, [pc, #728]	; (a2a0 <bt_init+0x304>)
    9fc6:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9fc8:	462b      	mov	r3, r5
    9fca:	f3bf 8f5b 	dmb	ish
    9fce:	f853 2f94 	ldr.w	r2, [r3, #148]!
    9fd2:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    9fd6:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9fda:	f3bf 8f5b 	dmb	ish
    9fde:	e853 1f00 	ldrex	r1, [r3]
    9fe2:	e843 2000 	strex	r0, r2, [r3]
    9fe6:	2800      	cmp	r0, #0
    9fe8:	d1f9      	bne.n	9fde <bt_init+0x42>
    9fea:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    9fee:	9801      	ldr	r0, [sp, #4]
    9ff0:	f015 fe86 	bl	1fd00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    9ff4:	aa01      	add	r2, sp, #4
    9ff6:	2100      	movs	r1, #0
    9ff8:	f241 0003 	movw	r0, #4099	; 0x1003
    9ffc:	f7ff fc4e 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    a000:	4604      	mov	r4, r0
    a002:	2800      	cmp	r0, #0
    a004:	d152      	bne.n	a0ac <bt_init+0x110>
	read_local_features_complete(rsp);
    a006:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    a008:	4ea6      	ldr	r6, [pc, #664]	; (a2a4 <bt_init+0x308>)
    a00a:	6893      	ldr	r3, [r2, #8]
    a00c:	f853 0f01 	ldr.w	r0, [r3, #1]!
    a010:	6859      	ldr	r1, [r3, #4]
    a012:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    a014:	4610      	mov	r0, r2
    a016:	f015 fe73 	bl	1fd00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    a01a:	4621      	mov	r1, r4
    a01c:	aa01      	add	r2, sp, #4
    a01e:	f241 0001 	movw	r0, #4097	; 0x1001
    a022:	f7ff fc3b 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    a026:	4604      	mov	r4, r0
    a028:	2800      	cmp	r0, #0
    a02a:	d13f      	bne.n	a0ac <bt_init+0x110>
	read_local_ver_complete(rsp);
    a02c:	9801      	ldr	r0, [sp, #4]
    a02e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    a030:	785a      	ldrb	r2, [r3, #1]
    a032:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    a036:	78d9      	ldrb	r1, [r3, #3]
    a038:	789a      	ldrb	r2, [r3, #2]
    a03a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    a03e:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    a040:	791a      	ldrb	r2, [r3, #4]
    a042:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    a046:	7a19      	ldrb	r1, [r3, #8]
    a048:	79da      	ldrb	r2, [r3, #7]
    a04a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    a04e:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    a050:	795a      	ldrb	r2, [r3, #5]
    a052:	799b      	ldrb	r3, [r3, #6]
    a054:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    a058:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    a05a:	f015 fe51 	bl	1fd00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    a05e:	4621      	mov	r1, r4
    a060:	aa01      	add	r2, sp, #4
    a062:	f241 0002 	movw	r0, #4098	; 0x1002
    a066:	f7ff fc19 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    a06a:	4604      	mov	r4, r0
    a06c:	b9f0      	cbnz	r0, a0ac <bt_init+0x110>
	read_supported_commands_complete(rsp);
    a06e:	9f01      	ldr	r7, [sp, #4]
    a070:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    a072:	1c53      	adds	r3, r2, #1
    a074:	3241      	adds	r2, #65	; 0x41
    a076:	6818      	ldr	r0, [r3, #0]
    a078:	6859      	ldr	r1, [r3, #4]
    a07a:	4634      	mov	r4, r6
    a07c:	c403      	stmia	r4!, {r0, r1}
    a07e:	3308      	adds	r3, #8
    a080:	4293      	cmp	r3, r2
    a082:	4626      	mov	r6, r4
    a084:	d1f7      	bne.n	a076 <bt_init+0xda>
		bt_dev.supported_commands[34] |= 0x04;
    a086:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    a08a:	4638      	mov	r0, r7
		bt_dev.supported_commands[34] |= 0x04;
    a08c:	f043 0306 	orr.w	r3, r3, #6
    a090:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    a094:	f015 fe34 	bl	1fd00 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    a098:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    a09c:	0658      	lsls	r0, r3, #25
    a09e:	d408      	bmi.n	a0b2 <bt_init+0x116>
		BT_ERR("Non-LE capable controller detected!");
    a0a0:	2145      	movs	r1, #69	; 0x45
    a0a2:	4881      	ldr	r0, [pc, #516]	; (a2a8 <bt_init+0x30c>)
    a0a4:	f01d fc15 	bl	278d2 <printk>
		return -ENODEV;
    a0a8:	f06f 0412 	mvn.w	r4, #18
}
    a0ac:	4620      	mov	r0, r4
    a0ae:	b003      	add	sp, #12
    a0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    a0b2:	aa01      	add	r2, sp, #4
    a0b4:	2100      	movs	r1, #0
    a0b6:	f242 0003 	movw	r0, #8195	; 0x2003
    a0ba:	f7ff fbef 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    a0be:	4604      	mov	r4, r0
    a0c0:	2800      	cmp	r0, #0
    a0c2:	d1f3      	bne.n	a0ac <bt_init+0x110>
	read_le_features_complete(rsp);
    a0c4:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    a0c6:	4e79      	ldr	r6, [pc, #484]	; (a2ac <bt_init+0x310>)
    a0c8:	6893      	ldr	r3, [r2, #8]
    a0ca:	f853 0f01 	ldr.w	r0, [r3, #1]!
    a0ce:	6859      	ldr	r1, [r3, #4]
    a0d0:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    a0d2:	4610      	mov	r0, r2
    a0d4:	f015 fe14 	bl	1fd00 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    a0d8:	4621      	mov	r1, r4
    a0da:	aa01      	add	r2, sp, #4
    a0dc:	f242 0002 	movw	r0, #8194	; 0x2002
    a0e0:	f7ff fbdc 	bl	989c <bt_hci_cmd_send_sync>
		if (err) {
    a0e4:	4604      	mov	r4, r0
    a0e6:	2800      	cmp	r0, #0
    a0e8:	d1e0      	bne.n	a0ac <bt_init+0x110>
		le_read_buffer_size_complete(rsp);
    a0ea:	9b01      	ldr	r3, [sp, #4]
    a0ec:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    a0ee:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    a0f2:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
    a0f6:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    a0f8:	b129      	cbz	r1, a106 <bt_init+0x16a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    a0fa:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    a0fc:	4611      	mov	r1, r2
    a0fe:	f106 0028 	add.w	r0, r6, #40	; 0x28
    a102:	f023 ff9e 	bl	2e042 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    a106:	9801      	ldr	r0, [sp, #4]
    a108:	f015 fdfa 	bl	1fd00 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    a10c:	f895 4040 	ldrb.w	r4, [r5, #64]	; 0x40
    a110:	f014 0420 	ands.w	r4, r4, #32
    a114:	f000 8092 	beq.w	a23c <bt_init+0x2a0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    a118:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    a11c:	0719      	lsls	r1, r3, #28
    a11e:	f100 80a9 	bmi.w	a274 <bt_init+0x2d8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    a122:	2108      	movs	r1, #8
    a124:	f242 0001 	movw	r0, #8193	; 0x2001
    a128:	f7ff fa7a 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
    a12c:	4604      	mov	r4, r0
    a12e:	2800      	cmp	r0, #0
    a130:	f000 808b 	beq.w	a24a <bt_init+0x2ae>
	return net_buf_simple_add(&buf->b, len);
    a134:	2108      	movs	r1, #8
    a136:	4408      	add	r0, r1
    a138:	f015 ff32 	bl	1ffa0 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    a13c:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    a140:	f895 2066 	ldrb.w	r2, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    a144:	f013 0f02 	tst.w	r3, #2
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    a148:	f002 0206 	and.w	r2, r2, #6
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    a14c:	bf0c      	ite	eq
    a14e:	230f      	moveq	r3, #15
    a150:	232f      	movne	r3, #47	; 0x2f
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    a152:	2a06      	cmp	r2, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    a154:	bf08      	it	eq
    a156:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	dst[0] = val;
    a15a:	2200      	movs	r2, #0
    a15c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    a15e:	0a1b      	lsrs	r3, r3, #8
    a160:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    a162:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    a164:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    a166:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    a168:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    a16a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    a16c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    a16e:	4621      	mov	r1, r4
    a170:	f242 0001 	movw	r0, #8193	; 0x2001
    a174:	f7ff fb92 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    a178:	4604      	mov	r4, r0
    a17a:	2800      	cmp	r0, #0
    a17c:	d196      	bne.n	a0ac <bt_init+0x110>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    a17e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    a182:	069a      	lsls	r2, r3, #26
    a184:	d41d      	bmi.n	a1c2 <bt_init+0x226>
	if (bt_dev.le.acl_mtu) {
    a186:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    a18a:	b9d1      	cbnz	r1, a1c2 <bt_init+0x226>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    a18c:	aa01      	add	r2, sp, #4
    a18e:	f241 0005 	movw	r0, #4101	; 0x1005
    a192:	f7ff fb83 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    a196:	4604      	mov	r4, r0
    a198:	2800      	cmp	r0, #0
    a19a:	d187      	bne.n	a0ac <bt_init+0x110>
	if (bt_dev.le.acl_mtu) {
    a19c:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    a1a0:	b963      	cbnz	r3, a1bc <bt_init+0x220>
	read_buffer_size_complete(rsp);
    a1a2:	9b01      	ldr	r3, [sp, #4]
    a1a4:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    a1a6:	785a      	ldrb	r2, [r3, #1]
    a1a8:	7899      	ldrb	r1, [r3, #2]
    a1aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    a1ae:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    a1b2:	889a      	ldrh	r2, [r3, #4]
    a1b4:	483e      	ldr	r0, [pc, #248]	; (a2b0 <bt_init+0x314>)
    a1b6:	4611      	mov	r1, r2
    a1b8:	f023 ff43 	bl	2e042 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    a1bc:	9801      	ldr	r0, [sp, #4]
    a1be:	f015 fd9f 	bl	1fd00 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    a1c2:	2108      	movs	r1, #8
    a1c4:	f640 4001 	movw	r0, #3073	; 0xc01
    a1c8:	f7ff fa2a 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
    a1cc:	4604      	mov	r4, r0
    a1ce:	2800      	cmp	r0, #0
    a1d0:	d03b      	beq.n	a24a <bt_init+0x2ae>
    a1d2:	2108      	movs	r1, #8
    a1d4:	4408      	add	r0, r1
    a1d6:	f015 fee3 	bl	1ffa0 <net_buf_simple_add>
	dst[0] = val;
    a1da:	2310      	movs	r3, #16
    a1dc:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    a1de:	2388      	movs	r3, #136	; 0x88
    a1e0:	7043      	strb	r3, [r0, #1]
    a1e2:	2302      	movs	r3, #2
	dst[0] = val;
    a1e4:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    a1e6:	70c3      	strb	r3, [r0, #3]
    a1e8:	2320      	movs	r3, #32
	dst[0] = val;
    a1ea:	7082      	strb	r2, [r0, #2]
    a1ec:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    a1ee:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    a1f0:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    a1f2:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    a1f4:	4621      	mov	r1, r4
    a1f6:	f640 4001 	movw	r0, #3073	; 0xc01
    a1fa:	f7ff fb4f 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    a1fe:	4604      	mov	r4, r0
    a200:	2800      	cmp	r0, #0
    a202:	f47f af53 	bne.w	a0ac <bt_init+0x110>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    a206:	4601      	mov	r1, r0
    a208:	aa01      	add	r2, sp, #4
    a20a:	f64f 4001 	movw	r0, #64513	; 0xfc01
    a20e:	f7ff fb45 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    a212:	4604      	mov	r4, r0
    a214:	2800      	cmp	r0, #0
    a216:	d051      	beq.n	a2bc <bt_init+0x320>
		BT_WARN("Vendor HCI extensions not available");
    a218:	4826      	ldr	r0, [pc, #152]	; (a2b4 <bt_init+0x318>)
    a21a:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed to read supported vendor features");
    a21c:	f01d fb59 	bl	278d2 <printk>
		err = bt_conn_init();
    a220:	f001 fb76 	bl	b910 <bt_conn_init>
		if (err) {
    a224:	4604      	mov	r4, r0
    a226:	2800      	cmp	r0, #0
    a228:	f47f af40 	bne.w	a0ac <bt_init+0x110>
		if (!bt_dev.id_count) {
    a22c:	79eb      	ldrb	r3, [r5, #7]
    a22e:	2b00      	cmp	r3, #0
    a230:	d170      	bne.n	a314 <bt_init+0x378>
			BT_INFO("No ID address. App must call settings_load()");
    a232:	2149      	movs	r1, #73	; 0x49
    a234:	4820      	ldr	r0, [pc, #128]	; (a2b8 <bt_init+0x31c>)
    a236:	f01d fb4c 	bl	278d2 <printk>
			return 0;
    a23a:	e737      	b.n	a0ac <bt_init+0x110>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    a23c:	2102      	movs	r1, #2
    a23e:	f640 406d 	movw	r0, #3181	; 0xc6d
    a242:	f7ff f9ed 	bl	9620 <bt_hci_cmd_create>
		if (!buf) {
    a246:	4606      	mov	r6, r0
    a248:	b910      	cbnz	r0, a250 <bt_init+0x2b4>
		return -ENOBUFS;
    a24a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    a24e:	e72d      	b.n	a0ac <bt_init+0x110>
    a250:	2102      	movs	r1, #2
    a252:	3008      	adds	r0, #8
    a254:	f015 fea4 	bl	1ffa0 <net_buf_simple_add>
		cp_le->le = 0x01;
    a258:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    a25a:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    a25c:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    a25e:	4622      	mov	r2, r4
    a260:	4631      	mov	r1, r6
    a262:	f640 406d 	movw	r0, #3181	; 0xc6d
    a266:	f7ff fb19 	bl	989c <bt_hci_cmd_send_sync>
		if (err) {
    a26a:	4604      	mov	r4, r0
    a26c:	2800      	cmp	r0, #0
    a26e:	f43f af53 	beq.w	a118 <bt_init+0x17c>
    a272:	e71b      	b.n	a0ac <bt_init+0x110>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    a274:	aa01      	add	r2, sp, #4
    a276:	2100      	movs	r1, #0
    a278:	f242 001c 	movw	r0, #8220	; 0x201c
    a27c:	f7ff fb0e 	bl	989c <bt_hci_cmd_send_sync>
		if (err) {
    a280:	4604      	mov	r4, r0
    a282:	2800      	cmp	r0, #0
    a284:	f47f af12 	bne.w	a0ac <bt_init+0x110>
		le_read_supp_states_complete(rsp);
    a288:	9801      	ldr	r0, [sp, #4]
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    a28a:	6883      	ldr	r3, [r0, #8]
    a28c:	f853 2f01 	ldr.w	r2, [r3, #1]!
    a290:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    a292:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    a296:	f015 fd33 	bl	1fd00 <net_buf_unref>
    a29a:	e742      	b.n	a122 <bt_init+0x186>
    a29c:	20000ac0 	.word	0x20000ac0
    a2a0:	20003a38 	.word	0x20003a38
    a2a4:	20000afc 	.word	0x20000afc
    a2a8:	00031822 	.word	0x00031822
    a2ac:	20000b58 	.word	0x20000b58
    a2b0:	20000b88 	.word	0x20000b88
    a2b4:	0003184b 	.word	0x0003184b
    a2b8:	000318d0 	.word	0x000318d0
	net_buf_unref(rsp);
    a2bc:	9801      	ldr	r0, [sp, #4]
    a2be:	f015 fd1f 	bl	1fd00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    a2c2:	4621      	mov	r1, r4
    a2c4:	aa01      	add	r2, sp, #4
    a2c6:	f64f 4002 	movw	r0, #64514	; 0xfc02
    a2ca:	f7ff fae7 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    a2ce:	4604      	mov	r4, r0
    a2d0:	b110      	cbz	r0, a2d8 <bt_init+0x33c>
		BT_WARN("Failed to read supported vendor commands");
    a2d2:	2157      	movs	r1, #87	; 0x57
    a2d4:	4813      	ldr	r0, [pc, #76]	; (a324 <bt_init+0x388>)
    a2d6:	e7a1      	b.n	a21c <bt_init+0x280>
	rp.cmds = (void *)rsp->data;
    a2d8:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    a2da:	6883      	ldr	r3, [r0, #8]
    a2dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    a2e0:	f8a5 3085 	strh.w	r3, [r5, #133]	; 0x85
	net_buf_unref(rsp);
    a2e4:	f015 fd0c 	bl	1fd00 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    a2e8:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    a2ec:	075b      	lsls	r3, r3, #29
    a2ee:	d597      	bpl.n	a220 <bt_init+0x284>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    a2f0:	aa01      	add	r2, sp, #4
    a2f2:	4621      	mov	r1, r4
    a2f4:	f64f 4003 	movw	r0, #64515	; 0xfc03
    a2f8:	f7ff fad0 	bl	989c <bt_hci_cmd_send_sync>
		if (err) {
    a2fc:	b110      	cbz	r0, a304 <bt_init+0x368>
			BT_WARN("Failed to read supported vendor features");
    a2fe:	2157      	movs	r1, #87	; 0x57
    a300:	4809      	ldr	r0, [pc, #36]	; (a328 <bt_init+0x38c>)
    a302:	e78b      	b.n	a21c <bt_init+0x280>
		rp.feat = (void *)rsp->data;
    a304:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    a306:	6883      	ldr	r3, [r0, #8]
    a308:	785b      	ldrb	r3, [r3, #1]
    a30a:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
		net_buf_unref(rsp);
    a30e:	f015 fcf7 	bl	1fd00 <net_buf_unref>
    a312:	e785      	b.n	a220 <bt_init+0x284>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a314:	2104      	movs	r1, #4
    a316:	4805      	ldr	r0, [pc, #20]	; (a32c <bt_init+0x390>)
    a318:	f01f fd16 	bl	29d48 <atomic_or>
	bt_finalize_init();
    a31c:	f7ff fe32 	bl	9f84 <bt_finalize_init>
	return 0;
    a320:	e6c4      	b.n	a0ac <bt_init+0x110>
    a322:	bf00      	nop
    a324:	00031874 	.word	0x00031874
    a328:	000318a2 	.word	0x000318a2
    a32c:	20000b54 	.word	0x20000b54

0000a330 <init_work>:
{
    a330:	b510      	push	{r4, lr}
	err = bt_init();
    a332:	f7ff fe33 	bl	9f9c <bt_init>
	if (ready_cb) {
    a336:	4b03      	ldr	r3, [pc, #12]	; (a344 <init_work+0x14>)
    a338:	681b      	ldr	r3, [r3, #0]
    a33a:	b113      	cbz	r3, a342 <init_work+0x12>
}
    a33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    a340:	4718      	bx	r3
}
    a342:	bd10      	pop	{r4, pc}
    a344:	20003a2c 	.word	0x20003a2c

0000a348 <bt_enable>:
{
    a348:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    a34a:	4d2b      	ldr	r5, [pc, #172]	; (a3f8 <bt_enable+0xb0>)
    a34c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
{
    a350:	b088      	sub	sp, #32
    a352:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    a354:	b943      	cbnz	r3, a368 <bt_enable+0x20>
		BT_ERR("No HCI driver registered");
    a356:	2145      	movs	r1, #69	; 0x45
    a358:	4828      	ldr	r0, [pc, #160]	; (a3fc <bt_enable+0xb4>)
    a35a:	f01d faba 	bl	278d2 <printk>
		return -ENODEV;
    a35e:	f06f 0412 	mvn.w	r4, #18
}
    a362:	4620      	mov	r0, r4
    a364:	b008      	add	sp, #32
    a366:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a368:	2100      	movs	r1, #0
    a36a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a36e:	f01f fcfa 	bl	29d66 <atomic_test_and_set_bit>
    a372:	2800      	cmp	r0, #0
    a374:	d13d      	bne.n	a3f2 <bt_enable+0xaa>
		err = bt_settings_init();
    a376:	f7fe fbf9 	bl	8b6c <bt_settings_init>
		if (err) {
    a37a:	4604      	mov	r4, r0
    a37c:	2800      	cmp	r0, #0
    a37e:	d1f0      	bne.n	a362 <bt_enable+0x1a>
	ready_cb = cb;
    a380:	4b1f      	ldr	r3, [pc, #124]	; (a400 <bt_enable+0xb8>)
    a382:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a384:	2200      	movs	r2, #0
    a386:	2300      	movs	r3, #0
    a388:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a38c:	f06f 0308 	mvn.w	r3, #8
    a390:	e9cd 0302 	strd	r0, r3, [sp, #8]
    a394:	9004      	str	r0, [sp, #16]
    a396:	e9cd 0000 	strd	r0, r0, [sp]
    a39a:	4b1a      	ldr	r3, [pc, #104]	; (a404 <bt_enable+0xbc>)
    a39c:	491a      	ldr	r1, [pc, #104]	; (a408 <bt_enable+0xc0>)
    a39e:	481b      	ldr	r0, [pc, #108]	; (a40c <bt_enable+0xc4>)
    a3a0:	f44f 7220 	mov.w	r2, #640	; 0x280
    a3a4:	f01a ff3a 	bl	2521c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    a3a8:	4919      	ldr	r1, [pc, #100]	; (a410 <bt_enable+0xc8>)
    a3aa:	4818      	ldr	r0, [pc, #96]	; (a40c <bt_enable+0xc4>)
    a3ac:	f023 fe63 	bl	2e076 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    a3b0:	f7fe fad0 	bl	8954 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    a3b4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    a3b8:	68db      	ldr	r3, [r3, #12]
    a3ba:	4798      	blx	r3
	if (err) {
    a3bc:	4604      	mov	r4, r0
    a3be:	b128      	cbz	r0, a3cc <bt_enable+0x84>
		BT_ERR("HCI driver open failed (%d)", err);
    a3c0:	4602      	mov	r2, r0
    a3c2:	2145      	movs	r1, #69	; 0x45
    a3c4:	4813      	ldr	r0, [pc, #76]	; (a414 <bt_enable+0xcc>)
    a3c6:	f01d fa84 	bl	278d2 <printk>
		return err;
    a3ca:	e7ca      	b.n	a362 <bt_enable+0x1a>
	if (!cb) {
    a3cc:	b926      	cbnz	r6, a3d8 <bt_enable+0x90>
}
    a3ce:	b008      	add	sp, #32
    a3d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    a3d4:	f7ff bde2 	b.w	9f9c <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    a3d8:	4601      	mov	r1, r0
    a3da:	f105 0090 	add.w	r0, r5, #144	; 0x90
    a3de:	f01f fcc2 	bl	29d66 <atomic_test_and_set_bit>
    a3e2:	2800      	cmp	r0, #0
    a3e4:	d1bd      	bne.n	a362 <bt_enable+0x1a>
		k_queue_append(&work_q->queue, work);
    a3e6:	f105 0188 	add.w	r1, r5, #136	; 0x88
    a3ea:	480b      	ldr	r0, [pc, #44]	; (a418 <bt_enable+0xd0>)
    a3ec:	f023 fdd0 	bl	2df90 <k_queue_append>
    a3f0:	e7b7      	b.n	a362 <bt_enable+0x1a>
		return -EALREADY;
    a3f2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    a3f6:	e7b4      	b.n	a362 <bt_enable+0x1a>
    a3f8:	20000ac0 	.word	0x20000ac0
    a3fc:	00031789 	.word	0x00031789
    a400:	20003a2c 	.word	0x20003a2c
    a404:	000090fd 	.word	0x000090fd
    a408:	20005f60 	.word	0x20005f60
    a40c:	20002160 	.word	0x20002160
    a410:	000317a7 	.word	0x000317a7
    a414:	000317ad 	.word	0x000317ad
    a418:	20003028 	.word	0x20003028

0000a41c <bt_get_name>:
}
    a41c:	4800      	ldr	r0, [pc, #0]	; (a420 <bt_get_name+0x4>)
    a41e:	4770      	bx	lr
    a420:	00031da2 	.word	0x00031da2

0000a424 <bt_id_create>:
{
    a424:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a426:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    a428:	4605      	mov	r5, r0
    a42a:	b918      	cbnz	r0, a434 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    a42c:	b304      	cbz	r4, a470 <bt_id_create+0x4c>
		return -EINVAL;
    a42e:	f06f 0415 	mvn.w	r4, #21
    a432:	e027      	b.n	a484 <bt_id_create+0x60>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    a434:	2300      	movs	r3, #0
    a436:	4669      	mov	r1, sp
    a438:	9300      	str	r3, [sp, #0]
    a43a:	f8cd 3003 	str.w	r3, [sp, #3]
    a43e:	f01f fcbd 	bl	29dbc <bt_addr_le_cmp>
    a442:	2800      	cmp	r0, #0
    a444:	d0f2      	beq.n	a42c <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    a446:	782b      	ldrb	r3, [r5, #0]
    a448:	2b01      	cmp	r3, #1
    a44a:	d104      	bne.n	a456 <bt_id_create+0x32>
    a44c:	79ab      	ldrb	r3, [r5, #6]
    a44e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a452:	2bc0      	cmp	r3, #192	; 0xc0
    a454:	d004      	beq.n	a460 <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
    a456:	2145      	movs	r1, #69	; 0x45
    a458:	480d      	ldr	r0, [pc, #52]	; (a490 <bt_id_create+0x6c>)
    a45a:	f01d fa3a 	bl	278d2 <printk>
			return -EINVAL;
    a45e:	e7e6      	b.n	a42e <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    a460:	4628      	mov	r0, r5
    a462:	f7fe fd2d 	bl	8ec0 <id_find>
    a466:	2800      	cmp	r0, #0
    a468:	dbe0      	blt.n	a42c <bt_id_create+0x8>
			return -EALREADY;
    a46a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    a46e:	e009      	b.n	a484 <bt_id_create+0x60>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    a470:	4b08      	ldr	r3, [pc, #32]	; (a494 <bt_id_create+0x70>)
    a472:	79dc      	ldrb	r4, [r3, #7]
    a474:	2c01      	cmp	r4, #1
    a476:	d008      	beq.n	a48a <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
    a478:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    a47a:	4629      	mov	r1, r5
    a47c:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    a47e:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    a480:	f7fe ffb6 	bl	93f0 <id_create.isra.22>
}
    a484:	4620      	mov	r0, r4
    a486:	b003      	add	sp, #12
    a488:	bd30      	pop	{r4, r5, pc}
		return -ENOMEM;
    a48a:	f06f 040b 	mvn.w	r4, #11
    a48e:	e7f9      	b.n	a484 <bt_id_create+0x60>
    a490:	000317ef 	.word	0x000317ef
    a494:	20000ac0 	.word	0x20000ac0

0000a498 <bt_setup_public_id_addr>:
{
    a498:	b570      	push	{r4, r5, r6, lr}
    a49a:	b088      	sub	sp, #32
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    a49c:	aa01      	add	r2, sp, #4
    a49e:	2100      	movs	r1, #0
    a4a0:	f241 0009 	movw	r0, #4105	; 0x1009
    a4a4:	f7ff f9fa 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    a4a8:	4e1c      	ldr	r6, [pc, #112]	; (a51c <bt_setup_public_id_addr+0x84>)
    a4aa:	4604      	mov	r4, r0
    a4ac:	b138      	cbz	r0, a4be <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
    a4ae:	2157      	movs	r1, #87	; 0x57
    a4b0:	481b      	ldr	r0, [pc, #108]	; (a520 <bt_setup_public_id_addr+0x88>)
    a4b2:	f01d fa0e 	bl	278d2 <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
    a4b6:	2300      	movs	r3, #0
    a4b8:	71f3      	strb	r3, [r6, #7]
}
    a4ba:	b008      	add	sp, #32
    a4bc:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    a4be:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a4c0:	9004      	str	r0, [sp, #16]
    a4c2:	689d      	ldr	r5, [r3, #8]
    a4c4:	f8ad 0014 	strh.w	r0, [sp, #20]
    a4c8:	3501      	adds	r5, #1
    a4ca:	2206      	movs	r2, #6
    a4cc:	a904      	add	r1, sp, #16
    a4ce:	4628      	mov	r0, r5
    a4d0:	f023 fedd 	bl	2e28e <memcmp>
    a4d4:	b918      	cbnz	r0, a4de <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
    a4d6:	9801      	ldr	r0, [sp, #4]
    a4d8:	f015 fc12 	bl	1fd00 <net_buf_unref>
    a4dc:	e7eb      	b.n	a4b6 <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    a4de:	4b11      	ldr	r3, [pc, #68]	; (a524 <bt_setup_public_id_addr+0x8c>)
    a4e0:	6818      	ldr	r0, [r3, #0]
    a4e2:	9002      	str	r0, [sp, #8]
    a4e4:	889b      	ldrh	r3, [r3, #4]
    a4e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    a4ea:	2206      	movs	r2, #6
    a4ec:	a902      	add	r1, sp, #8
    a4ee:	4628      	mov	r0, r5
    a4f0:	f023 fecd 	bl	2e28e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a4f4:	2800      	cmp	r0, #0
    a4f6:	d0ee      	beq.n	a4d6 <bt_setup_public_id_addr+0x3e>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    a4f8:	4629      	mov	r1, r5
    a4fa:	f10d 0019 	add.w	r0, sp, #25
    a4fe:	f01f fc60 	bl	29dc2 <bt_addr_copy>
	net_buf_unref(rsp);
    a502:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    a504:	f88d 4018 	strb.w	r4, [sp, #24]
	net_buf_unref(rsp);
    a508:	f015 fbfa 	bl	1fd00 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    a50c:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    a50e:	a906      	add	r1, sp, #24
    a510:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    a512:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    a514:	f7fe ff6c 	bl	93f0 <id_create.isra.22>
    a518:	e7cf      	b.n	a4ba <bt_setup_public_id_addr+0x22>
    a51a:	bf00      	nop
    a51c:	20000ac0 	.word	0x20000ac0
    a520:	00031a9d 	.word	0x00031a9d
    a524:	0002f2eb 	.word	0x0002f2eb

0000a528 <bt_read_static_addr>:
{
    a528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a52a:	4b1e      	ldr	r3, [pc, #120]	; (a5a4 <bt_read_static_addr+0x7c>)
    a52c:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    a530:	f014 0401 	ands.w	r4, r4, #1
{
    a534:	4607      	mov	r7, r0
    a536:	460d      	mov	r5, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a538:	d104      	bne.n	a544 <bt_read_static_addr+0x1c>
		BT_WARN("Read Static Addresses command not available");
    a53a:	481b      	ldr	r0, [pc, #108]	; (a5a8 <bt_read_static_addr+0x80>)
    a53c:	2157      	movs	r1, #87	; 0x57
		BT_WARN("No static addresses stored in controller");
    a53e:	f01d f9c8 	bl	278d2 <printk>
    a542:	e00c      	b.n	a55e <bt_read_static_addr+0x36>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    a544:	aa01      	add	r2, sp, #4
    a546:	2100      	movs	r1, #0
    a548:	f64f 4009 	movw	r0, #64521	; 0xfc09
    a54c:	f7ff f9a6 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    a550:	4603      	mov	r3, r0
    a552:	b138      	cbz	r0, a564 <bt_read_static_addr+0x3c>
		BT_WARN("Failed to read static addresses");
    a554:	2157      	movs	r1, #87	; 0x57
    a556:	4815      	ldr	r0, [pc, #84]	; (a5ac <bt_read_static_addr+0x84>)
    a558:	f01d f9bb 	bl	278d2 <printk>
		return 0;
    a55c:	2400      	movs	r4, #0
}
    a55e:	4620      	mov	r0, r4
    a560:	b003      	add	sp, #12
    a562:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    a564:	9801      	ldr	r0, [sp, #4]
    a566:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
    a568:	7854      	ldrb	r4, [r2, #1]
    a56a:	f04f 0c16 	mov.w	ip, #22
    a56e:	42ac      	cmp	r4, r5
    a570:	bf28      	it	cs
    a572:	462c      	movcs	r4, r5
    a574:	eb02 060c 	add.w	r6, r2, ip
	for (i = 0; i < cnt; i++) {
    a578:	42a3      	cmp	r3, r4
    a57a:	db06      	blt.n	a58a <bt_read_static_addr+0x62>
	net_buf_unref(rsp);
    a57c:	f015 fbc0 	bl	1fd00 <net_buf_unref>
	if (!cnt) {
    a580:	2c00      	cmp	r4, #0
    a582:	d1ec      	bne.n	a55e <bt_read_static_addr+0x36>
		BT_WARN("No static addresses stored in controller");
    a584:	2157      	movs	r1, #87	; 0x57
    a586:	480a      	ldr	r0, [pc, #40]	; (a5b0 <bt_read_static_addr+0x88>)
    a588:	e7d9      	b.n	a53e <bt_read_static_addr+0x16>
    a58a:	1c95      	adds	r5, r2, #2
    a58c:	fb0c 7103 	mla	r1, ip, r3, r7
    a590:	f855 eb04 	ldr.w	lr, [r5], #4
    a594:	f841 eb04 	str.w	lr, [r1], #4
    a598:	42b5      	cmp	r5, r6
    a59a:	d1f9      	bne.n	a590 <bt_read_static_addr+0x68>
    a59c:	8835      	ldrh	r5, [r6, #0]
    a59e:	800d      	strh	r5, [r1, #0]
	for (i = 0; i < cnt; i++) {
    a5a0:	3301      	adds	r3, #1
    a5a2:	e7e9      	b.n	a578 <bt_read_static_addr+0x50>
    a5a4:	20000ac0 	.word	0x20000ac0
    a5a8:	000319b0 	.word	0x000319b0
    a5ac:	000319e1 	.word	0x000319e1
    a5b0:	00031a06 	.word	0x00031a06

0000a5b4 <bt_setup_random_id_addr>:
{
    a5b4:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.id_count) {
    a5b6:	4d13      	ldr	r5, [pc, #76]	; (a604 <bt_setup_random_id_addr+0x50>)
    a5b8:	79ec      	ldrb	r4, [r5, #7]
{
    a5ba:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    a5bc:	b9ec      	cbnz	r4, a5fa <bt_setup_random_id_addr+0x46>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    a5be:	2101      	movs	r1, #1
    a5c0:	a802      	add	r0, sp, #8
    a5c2:	f7ff ffb1 	bl	a528 <bt_read_static_addr>
    a5c6:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    a5c8:	b1b8      	cbz	r0, a5fa <bt_setup_random_id_addr+0x46>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    a5ca:	2616      	movs	r6, #22
    a5cc:	e00e      	b.n	a5ec <bt_setup_random_id_addr+0x38>
    a5ce:	ab02      	add	r3, sp, #8
    a5d0:	fb06 3102 	mla	r1, r6, r2, r3
    a5d4:	f10d 0001 	add.w	r0, sp, #1
    a5d8:	f01f fbf3 	bl	29dc2 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    a5dc:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    a5de:	4669      	mov	r1, sp
    a5e0:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
    a5e2:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    a5e6:	f7fe ff03 	bl	93f0 <id_create.isra.22>
    a5ea:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    a5ec:	79eb      	ldrb	r3, [r5, #7]
    a5ee:	b2e2      	uxtb	r2, r4
    a5f0:	4293      	cmp	r3, r2
    a5f2:	d8ec      	bhi.n	a5ce <bt_setup_random_id_addr+0x1a>
			return 0;
    a5f4:	2000      	movs	r0, #0
}
    a5f6:	b008      	add	sp, #32
    a5f8:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
    a5fa:	2100      	movs	r1, #0
    a5fc:	4608      	mov	r0, r1
    a5fe:	f7ff ff11 	bl	a424 <bt_id_create>
    a602:	e7f8      	b.n	a5f6 <bt_setup_random_id_addr+0x42>
    a604:	20000ac0 	.word	0x20000ac0

0000a608 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    a60c:	690d      	ldr	r5, [r1, #16]
{
    a60e:	b08d      	sub	sp, #52	; 0x34
    a610:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    a612:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    a614:	ebb5 0b03 	subs.w	fp, r5, r3
{
    a618:	4606      	mov	r6, r0
    a61a:	460c      	mov	r4, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a61c:	4884      	ldr	r0, [pc, #528]	; (a830 <bt_le_adv_start_legacy+0x228>)
	struct bt_conn *conn = NULL;
    a61e:	9305      	str	r3, [sp, #20]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a620:	f04f 0101 	mov.w	r1, #1
	bool dir_adv = (param->peer != NULL), scannable;
    a624:	bf18      	it	ne
    a626:	f04f 0b01 	movne.w	fp, #1
{
    a62a:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a62c:	f01f fbd5 	bl	29dda <atomic_test_bit>
    a630:	2800      	cmp	r0, #0
    a632:	f000 80ef 	beq.w	a814 <bt_le_adv_start_legacy+0x20c>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    a636:	4620      	mov	r0, r4
    a638:	f7fe fc5a 	bl	8ef0 <valid_adv_param>
    a63c:	4680      	mov	r8, r0
    a63e:	2800      	cmp	r0, #0
    a640:	f000 80eb 	beq.w	a81a <bt_le_adv_start_legacy+0x212>
	    !(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    a644:	210b      	movs	r1, #11
    a646:	487a      	ldr	r0, [pc, #488]	; (a830 <bt_le_adv_start_legacy+0x228>)
    a648:	f01f fbc7 	bl	29dda <atomic_test_bit>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
    a64c:	b918      	cbnz	r0, a656 <bt_le_adv_start_legacy+0x4e>
	      atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING))) {
    a64e:	2105      	movs	r1, #5
    a650:	4877      	ldr	r0, [pc, #476]	; (a830 <bt_le_adv_start_legacy+0x228>)
    a652:	f01f fbc2 	bl	29dda <atomic_test_bit>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    a656:	f106 0710 	add.w	r7, r6, #16
    a65a:	2106      	movs	r1, #6
    a65c:	4638      	mov	r0, r7
    a65e:	f01f fbbc 	bl	29dda <atomic_test_bit>
    a662:	2800      	cmp	r0, #0
    a664:	f040 80dc 	bne.w	a820 <bt_le_adv_start_legacy+0x218>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    a668:	68a3      	ldr	r3, [r4, #8]
    a66a:	f8ad 3020 	strh.w	r3, [sp, #32]
	(void)memset(&set_param, 0, sizeof(set_param));
    a66e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    a672:	68e3      	ldr	r3, [r4, #12]
	(void)memset(&set_param, 0, sizeof(set_param));
    a674:	f8cd 002b 	str.w	r0, [sp, #43]	; 0x2b
	set_param.channel_map  = get_adv_channel_map(param->options);
    a678:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    a67a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    a67e:	f01f fb54 	bl	29d2a <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    a682:	7832      	ldrb	r2, [r6, #0]
    a684:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    a686:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    a68a:	429a      	cmp	r2, r3
    a68c:	d004      	beq.n	a698 <bt_le_adv_start_legacy+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a68e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    a692:	4867      	ldr	r0, [pc, #412]	; (a830 <bt_le_adv_start_legacy+0x228>)
    a694:	f01f fb72 	bl	29d7c <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
    a698:	4b66      	ldr	r3, [pc, #408]	; (a834 <bt_le_adv_start_legacy+0x22c>)
	adv->id = param->id;
    a69a:	7820      	ldrb	r0, [r4, #0]
    a69c:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    a69e:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    a6a2:	465a      	mov	r2, fp
    a6a4:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    a6a8:	6861      	ldr	r1, [r4, #4]
    a6aa:	f7ff fa93 	bl	9bd4 <le_adv_set_random_addr.isra.28>
				     &set_param.own_addr_type);
	if (err) {
    a6ae:	4683      	mov	fp, r0
    a6b0:	2800      	cmp	r0, #0
    a6b2:	d16d      	bne.n	a790 <bt_le_adv_start_legacy+0x188>
		return err;
	}

	if (dir_adv) {
    a6b4:	f106 0009 	add.w	r0, r6, #9
    a6b8:	2d00      	cmp	r5, #0
    a6ba:	d042      	beq.n	a742 <bt_le_adv_start_legacy+0x13a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    a6bc:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    a6be:	f01f fb85 	bl	29dcc <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a6c2:	6863      	ldr	r3, [r4, #4]
    a6c4:	07d9      	lsls	r1, r3, #31
    a6c6:	d544      	bpl.n	a752 <bt_le_adv_start_legacy+0x14a>
		scannable = true;

		if (dir_adv) {
    a6c8:	2d00      	cmp	r5, #0
    a6ca:	d03f      	beq.n	a74c <bt_le_adv_start_legacy+0x144>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    a6cc:	f013 0f10 	tst.w	r3, #16
    a6d0:	bf14      	ite	ne
    a6d2:	2304      	movne	r3, #4
    a6d4:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    a6d6:	6921      	ldr	r1, [r4, #16]
    a6d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    a6dc:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    a6e0:	f01f fb74 	bl	29dcc <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    a6e4:	210f      	movs	r1, #15
    a6e6:	f242 0006 	movw	r0, #8198	; 0x2006
    a6ea:	f7fe ff99 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
    a6ee:	4683      	mov	fp, r0
    a6f0:	2800      	cmp	r0, #0
    a6f2:	f000 8098 	beq.w	a826 <bt_le_adv_start_legacy+0x21e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a6f6:	220f      	movs	r2, #15
    a6f8:	a908      	add	r1, sp, #32
    a6fa:	3008      	adds	r0, #8
    a6fc:	f022 ff5e 	bl	2d5bc <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    a700:	2200      	movs	r2, #0
    a702:	4659      	mov	r1, fp
    a704:	f242 0006 	movw	r0, #8198	; 0x2006
    a708:	f7ff f8c8 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    a70c:	2800      	cmp	r0, #0
    a70e:	f040 808d 	bne.w	a82c <bt_le_adv_start_legacy+0x224>
		return err;
	}

	if (!dir_adv) {
    a712:	b36d      	cbz	r5, a770 <bt_le_adv_start_legacy+0x168>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    a714:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a716:	07da      	lsls	r2, r3, #31
    a718:	d43e      	bmi.n	a798 <bt_le_adv_start_legacy+0x190>
	return set_le_adv_enable_legacy(adv, enable);
    a71a:	2101      	movs	r1, #1
    a71c:	4630      	mov	r0, r6
    a71e:	f7ff fac7 	bl	9cb0 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    a722:	4683      	mov	fp, r0
    a724:	2800      	cmp	r0, #0
    a726:	d06e      	beq.n	a806 <bt_le_adv_start_legacy+0x1fe>
		BT_ERR("Failed to start advertiser");
    a728:	4843      	ldr	r0, [pc, #268]	; (a838 <bt_le_adv_start_legacy+0x230>)
    a72a:	2145      	movs	r1, #69	; 0x45
    a72c:	f01d f8d1 	bl	278d2 <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    a730:	9805      	ldr	r0, [sp, #20]
    a732:	b368      	cbz	r0, a790 <bt_le_adv_start_legacy+0x188>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a734:	2100      	movs	r1, #0
    a736:	f000 fe05 	bl	b344 <bt_conn_set_state>
			bt_conn_unref(conn);
    a73a:	9805      	ldr	r0, [sp, #20]
    a73c:	f000 fdce 	bl	b2dc <bt_conn_unref>
    a740:	e026      	b.n	a790 <bt_le_adv_start_legacy+0x188>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    a742:	9506      	str	r5, [sp, #24]
    a744:	a906      	add	r1, sp, #24
    a746:	f8cd 501b 	str.w	r5, [sp, #27]
    a74a:	e7b8      	b.n	a6be <bt_le_adv_start_legacy+0xb6>
			set_param.type = BT_HCI_ADV_IND;
    a74c:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    a750:	e7c8      	b.n	a6e4 <bt_le_adv_start_legacy+0xdc>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    a752:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a754:	b952      	cbnz	r2, a76c <bt_le_adv_start_legacy+0x164>
    a756:	f003 0308 	and.w	r3, r3, #8
    a75a:	2b00      	cmp	r3, #0
    a75c:	bf0a      	itet	eq
    a75e:	f04f 0800 	moveq.w	r8, #0
    a762:	2302      	movne	r3, #2
    a764:	2303      	moveq	r3, #3
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    a766:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    a76a:	e7bb      	b.n	a6e4 <bt_le_adv_start_legacy+0xdc>
    a76c:	2302      	movs	r3, #2
    a76e:	e7fa      	b.n	a766 <bt_le_adv_start_legacy+0x15e>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    a770:	6863      	ldr	r3, [r4, #4]
    a772:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    a776:	e9cd 8301 	strd	r8, r3, [sp, #4]
    a77a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a77c:	9300      	str	r3, [sp, #0]
    a77e:	4652      	mov	r2, sl
    a780:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a782:	4649      	mov	r1, r9
    a784:	4630      	mov	r0, r6
    a786:	f7ff f989 	bl	9a9c <le_adv_update.constprop.37>
		if (err) {
    a78a:	4683      	mov	fp, r0
    a78c:	2800      	cmp	r0, #0
    a78e:	d0c1      	beq.n	a714 <bt_le_adv_start_legacy+0x10c>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    a790:	4658      	mov	r0, fp
    a792:	b00d      	add	sp, #52	; 0x34
    a794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    a798:	a905      	add	r1, sp, #20
    a79a:	4630      	mov	r0, r6
    a79c:	f7fe fdd4 	bl	9348 <le_adv_start_add_conn>
		if (err) {
    a7a0:	4683      	mov	fp, r0
    a7a2:	2800      	cmp	r0, #0
    a7a4:	d0b9      	beq.n	a71a <bt_le_adv_start_legacy+0x112>
			if (err == -ENOMEM && !dir_adv &&
    a7a6:	f110 0f0c 	cmn.w	r0, #12
    a7aa:	d1f1      	bne.n	a790 <bt_le_adv_start_legacy+0x188>
    a7ac:	2d00      	cmp	r5, #0
    a7ae:	d1ef      	bne.n	a790 <bt_le_adv_start_legacy+0x188>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    a7b0:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    a7b2:	079b      	lsls	r3, r3, #30
    a7b4:	d4ec      	bmi.n	a790 <bt_le_adv_start_legacy+0x188>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    a7b6:	6860      	ldr	r0, [r4, #4]
    a7b8:	f080 0002 	eor.w	r0, r0, #2
    a7bc:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    a7c0:	f00b 0201 	and.w	r2, fp, #1
    a7c4:	210c      	movs	r1, #12
    a7c6:	4638      	mov	r0, r7
    a7c8:	f01f fae7 	bl	29d9a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    a7cc:	6862      	ldr	r2, [r4, #4]
    a7ce:	2107      	movs	r1, #7
    a7d0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    a7d4:	4638      	mov	r0, r7
    a7d6:	f01f fae0 	bl	29d9a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    a7da:	6862      	ldr	r2, [r4, #4]
    a7dc:	2108      	movs	r1, #8
    a7de:	f002 0201 	and.w	r2, r2, #1
    a7e2:	4638      	mov	r0, r7
    a7e4:	f01f fad9 	bl	29d9a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    a7e8:	4642      	mov	r2, r8
    a7ea:	2109      	movs	r1, #9
    a7ec:	4638      	mov	r0, r7
    a7ee:	f01f fad4 	bl	29d9a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    a7f2:	6862      	ldr	r2, [r4, #4]
    a7f4:	210b      	movs	r1, #11
    a7f6:	f3c2 0280 	ubfx	r2, r2, #2, #1
    a7fa:	4638      	mov	r0, r7
    a7fc:	f01f facd 	bl	29d9a <atomic_set_bit_to>
	return 0;
    a800:	f04f 0b00 	mov.w	fp, #0
    a804:	e7c4      	b.n	a790 <bt_le_adv_start_legacy+0x188>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    a806:	9805      	ldr	r0, [sp, #20]
    a808:	b108      	cbz	r0, a80e <bt_le_adv_start_legacy+0x206>
		bt_conn_unref(conn);
    a80a:	f000 fd67 	bl	b2dc <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    a80e:	2d00      	cmp	r5, #0
    a810:	d1d6      	bne.n	a7c0 <bt_le_adv_start_legacy+0x1b8>
    a812:	e7d0      	b.n	a7b6 <bt_le_adv_start_legacy+0x1ae>
		return -EAGAIN;
    a814:	f06f 0b0a 	mvn.w	fp, #10
    a818:	e7ba      	b.n	a790 <bt_le_adv_start_legacy+0x188>
		return -EINVAL;
    a81a:	f06f 0b15 	mvn.w	fp, #21
    a81e:	e7b7      	b.n	a790 <bt_le_adv_start_legacy+0x188>
		return -EALREADY;
    a820:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    a824:	e7b4      	b.n	a790 <bt_le_adv_start_legacy+0x188>
		return -ENOBUFS;
    a826:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    a82a:	e7b1      	b.n	a790 <bt_le_adv_start_legacy+0x188>
    a82c:	4683      	mov	fp, r0
    a82e:	e7af      	b.n	a790 <bt_le_adv_start_legacy+0x188>
    a830:	20000b54 	.word	0x20000b54
    a834:	20000ac0 	.word	0x20000ac0
    a838:	00031902 	.word	0x00031902

0000a83c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    a83c:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    a83e:	9c04      	ldr	r4, [sp, #16]
    a840:	e9cd 3400 	strd	r3, r4, [sp]
    a844:	4613      	mov	r3, r2
    a846:	460a      	mov	r2, r1
    a848:	4601      	mov	r1, r0
    a84a:	4802      	ldr	r0, [pc, #8]	; (a854 <bt_le_adv_start+0x18>)
    a84c:	f7ff fedc 	bl	a608 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    a850:	b002      	add	sp, #8
    a852:	bd10      	pop	{r4, pc}
    a854:	20000ad8 	.word	0x20000ad8

0000a858 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    a858:	b530      	push	{r4, r5, lr}
    a85a:	4c2a      	ldr	r4, [pc, #168]	; (a904 <bt_le_adv_stop+0xac>)
    a85c:	b085      	sub	sp, #20
    a85e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    a862:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a866:	f01f fa89 	bl	29d7c <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    a86a:	2106      	movs	r1, #6
    a86c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a870:	f01f fab3 	bl	29dda <atomic_test_bit>
    a874:	b918      	cbnz	r0, a87e <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
    a876:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    a878:	4620      	mov	r0, r4
    a87a:	b005      	add	sp, #20
    a87c:	bd30      	pop	{r4, r5, pc}
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    a87e:	2108      	movs	r1, #8
    a880:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a884:	f01f faa9 	bl	29dda <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a888:	b308      	cbz	r0, a8ce <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    a88a:	2300      	movs	r3, #0
    a88c:	4669      	mov	r1, sp
    a88e:	f104 0021 	add.w	r0, r4, #33	; 0x21
    a892:	9300      	str	r3, [sp, #0]
    a894:	f8cd 3003 	str.w	r3, [sp, #3]
    a898:	f01f fa90 	bl	29dbc <bt_addr_le_cmp>
    a89c:	7e25      	ldrb	r5, [r4, #24]
    a89e:	bb60      	cbnz	r0, a8fa <bt_le_adv_stop+0xa2>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    a8a0:	4b19      	ldr	r3, [pc, #100]	; (a908 <bt_le_adv_stop+0xb0>)
    a8a2:	889a      	ldrh	r2, [r3, #4]
    a8a4:	6818      	ldr	r0, [r3, #0]
    a8a6:	799b      	ldrb	r3, [r3, #6]
    a8a8:	f8ad 200c 	strh.w	r2, [sp, #12]
    a8ac:	9002      	str	r0, [sp, #8]
    a8ae:	f88d 300e 	strb.w	r3, [sp, #14]
    a8b2:	2204      	movs	r2, #4
    a8b4:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    a8b6:	4628      	mov	r0, r5
    a8b8:	f000 fe5a 	bl	b570 <bt_conn_lookup_state_le>
    a8bc:	4604      	mov	r4, r0
	if (conn) {
    a8be:	b130      	cbz	r0, a8ce <bt_le_adv_stop+0x76>
		conn->err = status;
    a8c0:	2100      	movs	r1, #0
    a8c2:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a8c4:	f000 fd3e 	bl	b344 <bt_conn_set_state>
		bt_conn_unref(conn);
    a8c8:	4620      	mov	r0, r4
    a8ca:	f000 fd07 	bl	b2dc <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
    a8ce:	2100      	movs	r1, #0
    a8d0:	480e      	ldr	r0, [pc, #56]	; (a90c <bt_le_adv_stop+0xb4>)
    a8d2:	f7ff f9ed 	bl	9cb0 <set_le_adv_enable_legacy>
		if (err) {
    a8d6:	4604      	mov	r4, r0
    a8d8:	2800      	cmp	r0, #0
    a8da:	d1cd      	bne.n	a878 <bt_le_adv_stop+0x20>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    a8dc:	2105      	movs	r1, #5
    a8de:	480c      	ldr	r0, [pc, #48]	; (a910 <bt_le_adv_stop+0xb8>)
    a8e0:	f01f fa7b 	bl	29dda <atomic_test_bit>
    a8e4:	2800      	cmp	r0, #0
    a8e6:	d0c6      	beq.n	a876 <bt_le_adv_stop+0x1e>
	return set_le_scan_enable_legacy(enable);
    a8e8:	4620      	mov	r0, r4
    a8ea:	f7ff f839 	bl	9960 <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
    a8ee:	f01f fa7d 	bl	29dec <le_adv_set_private_addr.isra.27>
	return set_le_scan_enable_legacy(enable);
    a8f2:	2001      	movs	r0, #1
    a8f4:	f7ff f834 	bl	9960 <set_le_scan_enable_legacy>
    a8f8:	e7be      	b.n	a878 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    a8fa:	2205      	movs	r2, #5
    a8fc:	f104 0121 	add.w	r1, r4, #33	; 0x21
    a900:	e7d9      	b.n	a8b6 <bt_le_adv_stop+0x5e>
    a902:	bf00      	nop
    a904:	20000ac0 	.word	0x20000ac0
    a908:	0002f2e4 	.word	0x0002f2e4
    a90c:	20000ad8 	.word	0x20000ad8
    a910:	20000b54 	.word	0x20000b54

0000a914 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    a914:	b513      	push	{r0, r1, r4, lr}
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    a916:	210c      	movs	r1, #12
    a918:	4817      	ldr	r0, [pc, #92]	; (a978 <bt_le_adv_resume+0x64>)
    a91a:	f01f fa5e 	bl	29dda <atomic_test_bit>
    a91e:	b340      	cbz	r0, a972 <bt_le_adv_resume+0x5e>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
    a920:	2106      	movs	r1, #6
    a922:	4815      	ldr	r0, [pc, #84]	; (a978 <bt_le_adv_resume+0x64>)
    a924:	f01f fa59 	bl	29dda <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    a928:	4604      	mov	r4, r0
    a92a:	bb10      	cbnz	r0, a972 <bt_le_adv_resume+0x5e>
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    a92c:	2108      	movs	r1, #8
    a92e:	4812      	ldr	r0, [pc, #72]	; (a978 <bt_le_adv_resume+0x64>)
    a930:	f01f fa53 	bl	29dda <atomic_test_bit>
    a934:	b1e8      	cbz	r0, a972 <bt_le_adv_resume+0x5e>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    a936:	a901      	add	r1, sp, #4
    a938:	4810      	ldr	r0, [pc, #64]	; (a97c <bt_le_adv_resume+0x68>)
    a93a:	f7fe fd05 	bl	9348 <le_adv_start_add_conn>
	if (err) {
    a93e:	b9c0      	cbnz	r0, a972 <bt_le_adv_resume+0x5e>
	return set_le_adv_enable_legacy(adv, enable);
    a940:	2101      	movs	r1, #1
    a942:	480e      	ldr	r0, [pc, #56]	; (a97c <bt_le_adv_resume+0x68>)
    a944:	f7ff f9b4 	bl	9cb0 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    a948:	b150      	cbz	r0, a960 <bt_le_adv_resume+0x4c>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a94a:	4621      	mov	r1, r4
    a94c:	9801      	ldr	r0, [sp, #4]
    a94e:	f000 fcf9 	bl	b344 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a952:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    a956:	4808      	ldr	r0, [pc, #32]	; (a978 <bt_le_adv_resume+0x64>)
    a958:	f01f fa10 	bl	29d7c <atomic_and>
	return (old & mask) != 0;
    a95c:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    a960:	9801      	ldr	r0, [sp, #4]
    a962:	f000 fcbb 	bl	b2dc <bt_conn_unref>
	if (persist_paused) {
    a966:	b124      	cbz	r4, a972 <bt_le_adv_resume+0x5e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    a96c:	4802      	ldr	r0, [pc, #8]	; (a978 <bt_le_adv_resume+0x64>)
    a96e:	f01f f9eb 	bl	29d48 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    a972:	b002      	add	sp, #8
    a974:	bd10      	pop	{r4, pc}
    a976:	bf00      	nop
    a978:	20000ae8 	.word	0x20000ae8
    a97c:	20000ad8 	.word	0x20000ad8

0000a980 <enh_conn_complete>:
{
    a980:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    a984:	7805      	ldrb	r5, [r0, #0]
{
    a986:	4604      	mov	r4, r0
	if (evt->status) {
    a988:	b305      	cbz	r5, a9cc <enh_conn_complete+0x4c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a98a:	2d3c      	cmp	r5, #60	; 0x3c
    a98c:	d118      	bne.n	a9c0 <enh_conn_complete+0x40>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a98e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    a992:	484c      	ldr	r0, [pc, #304]	; (aac4 <enh_conn_complete+0x144>)
    a994:	f01f f9f2 	bl	29d7c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    a998:	2000      	movs	r0, #0
    a99a:	f7fe fb91 	bl	90c0 <find_pending_connect.part.21>
		if (!conn) {
    a99e:	4604      	mov	r4, r0
    a9a0:	b930      	cbnz	r0, a9b0 <enh_conn_complete+0x30>
			BT_ERR("No pending slave connection");
    a9a2:	2145      	movs	r1, #69	; 0x45
    a9a4:	4848      	ldr	r0, [pc, #288]	; (aac8 <enh_conn_complete+0x148>)
    a9a6:	f01c ff94 	bl	278d2 <printk>
}
    a9aa:	b004      	add	sp, #16
    a9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    a9b0:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a9b2:	2100      	movs	r1, #0
    a9b4:	f000 fcc6 	bl	b344 <bt_conn_set_state>
		bt_conn_unref(conn);
    a9b8:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    a9ba:	f000 fc8f 	bl	b2dc <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a9be:	e7f4      	b.n	a9aa <enh_conn_complete+0x2a>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    a9c0:	462a      	mov	r2, r5
    a9c2:	2157      	movs	r1, #87	; 0x57
    a9c4:	4841      	ldr	r0, [pc, #260]	; (aacc <enh_conn_complete+0x14c>)
    a9c6:	f01c ff84 	bl	278d2 <printk>
		return;
    a9ca:	e7ee      	b.n	a9aa <enh_conn_complete+0x2a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    a9cc:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a9ce:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    a9d2:	3b02      	subs	r3, #2
    a9d4:	1d06      	adds	r6, r0, #4
    a9d6:	2b01      	cmp	r3, #1
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a9d8:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    a9dc:	4631      	mov	r1, r6
    a9de:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    a9e0:	d82c      	bhi.n	aa3c <enh_conn_complete+0xbc>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    a9e2:	f01f f9f3 	bl	29dcc <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    a9e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    a9ea:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    a9ee:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    a9f0:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    a9f4:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    a9f8:	f01f f9e3 	bl	29dc2 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    a9fc:	2301      	movs	r3, #1
    a9fe:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    aa02:	78e3      	ldrb	r3, [r4, #3]
    aa04:	2b01      	cmp	r3, #1
    aa06:	d10c      	bne.n	aa22 <enh_conn_complete+0xa2>
    aa08:	a802      	add	r0, sp, #8
    aa0a:	f7fe fb59 	bl	90c0 <find_pending_connect.part.21>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    aa0e:	78e3      	ldrb	r3, [r4, #3]
    aa10:	2b01      	cmp	r3, #1
    aa12:	4605      	mov	r5, r0
    aa14:	d104      	bne.n	aa20 <enh_conn_complete+0xa0>
    aa16:	f06f 0140 	mvn.w	r1, #64	; 0x40
    aa1a:	482a      	ldr	r0, [pc, #168]	; (aac4 <enh_conn_complete+0x144>)
    aa1c:	f01f f9ae 	bl	29d7c <atomic_and>
	if (!conn) {
    aa20:	b995      	cbnz	r5, aa48 <enh_conn_complete+0xc8>
		BT_ERR("No pending conn for peer %s",
    aa22:	4630      	mov	r0, r6
    aa24:	f7fd fdce 	bl	85c4 <bt_addr_le_str_real>
    aa28:	2145      	movs	r1, #69	; 0x45
    aa2a:	4602      	mov	r2, r0
    aa2c:	4828      	ldr	r0, [pc, #160]	; (aad0 <enh_conn_complete+0x150>)
    aa2e:	f01c ff50 	bl	278d2 <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    aa32:	211f      	movs	r1, #31
    aa34:	4640      	mov	r0, r8
    aa36:	f01f f9eb 	bl	29e10 <bt_hci_disconnect>
		return;
    aa3a:	e7b6      	b.n	a9aa <enh_conn_complete+0x2a>
		bt_addr_le_copy(&id_addr,
    aa3c:	f01f f9c6 	bl	29dcc <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    aa40:	4668      	mov	r0, sp
    aa42:	f01f f9c3 	bl	29dcc <bt_addr_le_copy>
    aa46:	e7dc      	b.n	aa02 <enh_conn_complete+0x82>
	conn->handle = handle;
    aa48:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    aa4a:	a902      	add	r1, sp, #8
	conn->handle = handle;
    aa4c:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    aa50:	f01f f9bc 	bl	29dcc <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    aa54:	7e22      	ldrb	r2, [r4, #24]
    aa56:	7de3      	ldrb	r3, [r4, #23]
    aa58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    aa5c:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    aa60:	7ea2      	ldrb	r2, [r4, #26]
    aa62:	7e63      	ldrb	r3, [r4, #25]
    aa64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    aa68:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    aa6c:	7ee3      	ldrb	r3, [r4, #27]
    aa6e:	7f22      	ldrb	r2, [r4, #28]
    aa70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    aa74:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    aa78:	78e3      	ldrb	r3, [r4, #3]
    aa7a:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    aa7c:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    aa7e:	2b01      	cmp	r3, #1
	conn->err = 0U;
    aa80:	726c      	strb	r4, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    aa82:	d116      	bne.n	aab2 <enh_conn_complete+0x132>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    aa84:	4669      	mov	r1, sp
    aa86:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    aa8a:	f01f f99f 	bl	29dcc <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    aa8e:	7a29      	ldrb	r1, [r5, #8]
    aa90:	4a10      	ldr	r2, [pc, #64]	; (aad4 <enh_conn_complete+0x154>)
    aa92:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    aa96:	4411      	add	r1, r2
    aa98:	f105 0096 	add.w	r0, r5, #150	; 0x96
    aa9c:	f01f f996 	bl	29dcc <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    aaa0:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    aaa4:	4622      	mov	r2, r4
    aaa6:	f001 0340 	and.w	r3, r1, #64	; 0x40
    aaaa:	4313      	orrs	r3, r2
    aaac:	d001      	beq.n	aab2 <enh_conn_complete+0x132>
			bt_le_adv_resume();
    aaae:	f7ff ff31 	bl	a914 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    aab2:	2107      	movs	r1, #7
    aab4:	4628      	mov	r0, r5
    aab6:	f000 fc45 	bl	b344 <bt_conn_set_state>
	conn_auto_initiate(conn);
    aaba:	4628      	mov	r0, r5
    aabc:	f7fe fe9e 	bl	97fc <conn_auto_initiate>
	bt_conn_unref(conn);
    aac0:	4628      	mov	r0, r5
    aac2:	e77a      	b.n	a9ba <enh_conn_complete+0x3a>
    aac4:	20000ae8 	.word	0x20000ae8
    aac8:	00031ac0 	.word	0x00031ac0
    aacc:	00031ae1 	.word	0x00031ae1
    aad0:	00031aff 	.word	0x00031aff
    aad4:	20000ac0 	.word	0x20000ac0

0000aad8 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    aad8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    aadc:	4605      	mov	r5, r0
    aade:	4688      	mov	r8, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    aae0:	4855      	ldr	r0, [pc, #340]	; (ac38 <bt_le_scan_start+0x160>)
    aae2:	2101      	movs	r1, #1
    aae4:	f01f f979 	bl	29dda <atomic_test_bit>
    aae8:	2800      	cmp	r0, #0
    aaea:	f000 80a1 	beq.w	ac30 <bt_le_scan_start+0x158>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    aaee:	782a      	ldrb	r2, [r5, #0]
    aaf0:	2a01      	cmp	r2, #1
    aaf2:	d905      	bls.n	ab00 <bt_le_scan_start+0x28>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    aaf4:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    aaf8:	4620      	mov	r0, r4
    aafa:	b002      	add	sp, #8
    aafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    ab00:	686b      	ldr	r3, [r5, #4]
    ab02:	f033 030f 	bics.w	r3, r3, #15
    ab06:	d1f5      	bne.n	aaf4 <bt_le_scan_start+0x1c>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    ab08:	8928      	ldrh	r0, [r5, #8]
    ab0a:	1f03      	subs	r3, r0, #4
    ab0c:	b29b      	uxth	r3, r3
    ab0e:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    ab12:	42a3      	cmp	r3, r4
    ab14:	d8ee      	bhi.n	aaf4 <bt_le_scan_start+0x1c>
	if (param->window < 0x0004 || param->window > 0x4000) {
    ab16:	8969      	ldrh	r1, [r5, #10]
    ab18:	1f0b      	subs	r3, r1, #4
    ab1a:	b29b      	uxth	r3, r3
    ab1c:	42a3      	cmp	r3, r4
    ab1e:	d8e9      	bhi.n	aaf4 <bt_le_scan_start+0x1c>
	if (param->window > param->interval) {
    ab20:	4288      	cmp	r0, r1
    ab22:	d3e7      	bcc.n	aaf4 <bt_le_scan_start+0x1c>
	if (param->type && !bt_le_scan_random_addr_check()) {
    ab24:	b942      	cbnz	r2, ab38 <bt_le_scan_start+0x60>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ab26:	2106      	movs	r1, #6
    ab28:	4843      	ldr	r0, [pc, #268]	; (ac38 <bt_le_scan_start+0x160>)
    ab2a:	f01f f91c 	bl	29d66 <atomic_test_and_set_bit>
    ab2e:	4603      	mov	r3, r0
    ab30:	b138      	cbz	r0, ab42 <bt_le_scan_start+0x6a>
		return -EALREADY;
    ab32:	f06f 0477 	mvn.w	r4, #119	; 0x77
    ab36:	e7df      	b.n	aaf8 <bt_le_scan_start+0x20>
	if (param->type && !bt_le_scan_random_addr_check()) {
    ab38:	f7ff f8e8 	bl	9d0c <bt_le_scan_random_addr_check>
    ab3c:	2800      	cmp	r0, #0
    ab3e:	d1f2      	bne.n	ab26 <bt_le_scan_start+0x4e>
    ab40:	e7d8      	b.n	aaf4 <bt_le_scan_start+0x1c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    ab42:	2105      	movs	r1, #5
    ab44:	483c      	ldr	r0, [pc, #240]	; (ac38 <bt_le_scan_start+0x160>)
    ab46:	f01f f948 	bl	29dda <atomic_test_bit>
    ab4a:	b150      	cbz	r0, ab62 <bt_le_scan_start+0x8a>
	return set_le_scan_enable_legacy(enable);
    ab4c:	4618      	mov	r0, r3
    ab4e:	f7fe ff07 	bl	9960 <set_le_scan_enable_legacy>
		if (err) {
    ab52:	4604      	mov	r4, r0
    ab54:	b128      	cbz	r0, ab62 <bt_le_scan_start+0x8a>
    ab56:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ab5a:	4837      	ldr	r0, [pc, #220]	; (ac38 <bt_le_scan_start+0x160>)
    ab5c:	f01f f90e 	bl	29d7c <atomic_and>
		return err;
    ab60:	e7ca      	b.n	aaf8 <bt_le_scan_start+0x20>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    ab62:	686a      	ldr	r2, [r5, #4]
    ab64:	4e35      	ldr	r6, [pc, #212]	; (ac3c <bt_le_scan_start+0x164>)
    ab66:	f002 0201 	and.w	r2, r2, #1
    ab6a:	2108      	movs	r1, #8
    ab6c:	f106 0094 	add.w	r0, r6, #148	; 0x94
    ab70:	f01f f913 	bl	29d9a <atomic_set_bit_to>
		if (param->timeout) {
    ab74:	89ab      	ldrh	r3, [r5, #12]
    ab76:	b143      	cbz	r3, ab8a <bt_le_scan_start+0xb2>
    ab78:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ab7c:	f106 0094 	add.w	r0, r6, #148	; 0x94
    ab80:	f01f f8fc 	bl	29d7c <atomic_and>
			return -ENOTSUP;
    ab84:	f06f 0485 	mvn.w	r4, #133	; 0x85
    ab88:	e7b6      	b.n	aaf8 <bt_le_scan_start+0x20>
		err = start_le_scan_legacy(param->type, param->interval,
    ab8a:	782f      	ldrb	r7, [r5, #0]
	(void)memset(&set_param, 0, sizeof(set_param));
    ab8c:	f88d 3006 	strb.w	r3, [sp, #6]
	set_param.interval = sys_cpu_to_le16(interval);
    ab90:	892b      	ldrh	r3, [r5, #8]
    ab92:	f8ad 3001 	strh.w	r3, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    ab96:	896b      	ldrh	r3, [r5, #10]
    ab98:	f8ad 3003 	strh.w	r3, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    ab9c:	4630      	mov	r0, r6
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
    ab9e:	1e7b      	subs	r3, r7, #1
    aba0:	425d      	negs	r5, r3
    aba2:	415d      	adcs	r5, r3
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
    aba4:	2106      	movs	r1, #6
		*own_addr_type = bt_dev.id_addr[0].type;
    aba6:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    abaa:	f88d 7000 	strb.w	r7, [sp]
		*own_addr_type = bt_dev.id_addr[0].type;
    abae:	f88d 3005 	strb.w	r3, [sp, #5]
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
    abb2:	f01f f912 	bl	29dda <atomic_test_bit>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    abb6:	b9a0      	cbnz	r0, abe2 <bt_le_scan_start+0x10a>
			err = le_set_private_addr(BT_ID_DEFAULT);
    abb8:	f01f f918 	bl	29dec <le_adv_set_private_addr.isra.27>
			if (err) {
    abbc:	4604      	mov	r4, r0
    abbe:	b168      	cbz	r0, abdc <bt_le_scan_start+0x104>
				if (active_scan || !is_adv_using_rand_addr()) {
    abc0:	2f01      	cmp	r7, #1
    abc2:	d0c8      	beq.n	ab56 <bt_le_scan_start+0x7e>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
    abc4:	2106      	movs	r1, #6
    abc6:	f106 0028 	add.w	r0, r6, #40	; 0x28
    abca:	f01f f906 	bl	29dda <atomic_test_bit>
				if (active_scan || !is_adv_using_rand_addr()) {
    abce:	2800      	cmp	r0, #0
    abd0:	d0c1      	beq.n	ab56 <bt_le_scan_start+0x7e>
					BT_WARN("Ignoring failure to set "
    abd2:	4622      	mov	r2, r4
    abd4:	2157      	movs	r1, #87	; 0x57
    abd6:	481a      	ldr	r0, [pc, #104]	; (ac40 <bt_le_scan_start+0x168>)
    abd8:	f01c fe7b 	bl	278d2 <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    abdc:	2301      	movs	r3, #1
    abde:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    abe2:	2107      	movs	r1, #7
    abe4:	f242 000b 	movw	r0, #8203	; 0x200b
    abe8:	f7fe fd1a 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
    abec:	4604      	mov	r4, r0
    abee:	b1e0      	cbz	r0, ac2a <bt_le_scan_start+0x152>
    abf0:	2207      	movs	r2, #7
    abf2:	4669      	mov	r1, sp
    abf4:	3008      	adds	r0, #8
    abf6:	f022 fce1 	bl	2d5bc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    abfa:	4621      	mov	r1, r4
    abfc:	2200      	movs	r2, #0
    abfe:	f242 000b 	movw	r0, #8203	; 0x200b
    ac02:	f7fe fe4b 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    ac06:	4604      	mov	r4, r0
    ac08:	2800      	cmp	r0, #0
    ac0a:	d1a4      	bne.n	ab56 <bt_le_scan_start+0x7e>
	return set_le_scan_enable_legacy(enable);
    ac0c:	2001      	movs	r0, #1
    ac0e:	f7fe fea7 	bl	9960 <set_le_scan_enable_legacy>
	if (err) {
    ac12:	4604      	mov	r4, r0
    ac14:	2800      	cmp	r0, #0
    ac16:	d19e      	bne.n	ab56 <bt_le_scan_start+0x7e>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    ac18:	462a      	mov	r2, r5
    ac1a:	2107      	movs	r1, #7
    ac1c:	4806      	ldr	r0, [pc, #24]	; (ac38 <bt_le_scan_start+0x160>)
    ac1e:	f01f f8bc 	bl	29d9a <atomic_set_bit_to>
	scan_dev_found_cb = cb;
    ac22:	4b08      	ldr	r3, [pc, #32]	; (ac44 <bt_le_scan_start+0x16c>)
    ac24:	f8c3 8000 	str.w	r8, [r3]
	return 0;
    ac28:	e766      	b.n	aaf8 <bt_le_scan_start+0x20>
		return -ENOBUFS;
    ac2a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    ac2e:	e792      	b.n	ab56 <bt_le_scan_start+0x7e>
		return -EAGAIN;
    ac30:	f06f 040a 	mvn.w	r4, #10
    ac34:	e760      	b.n	aaf8 <bt_le_scan_start+0x20>
    ac36:	bf00      	nop
    ac38:	20000b54 	.word	0x20000b54
    ac3c:	20000ac0 	.word	0x20000ac0
    ac40:	00031922 	.word	0x00031922
    ac44:	20003a38 	.word	0x20003a38

0000ac48 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    ac48:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ac4a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ac4e:	4807      	ldr	r0, [pc, #28]	; (ac6c <bt_le_scan_stop+0x24>)
    ac50:	f01f f894 	bl	29d7c <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ac54:	0643      	lsls	r3, r0, #25
    ac56:	d506      	bpl.n	ac66 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    ac58:	4b05      	ldr	r3, [pc, #20]	; (ac70 <bt_le_scan_stop+0x28>)
    ac5a:	2000      	movs	r0, #0
    ac5c:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    ac5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    ac62:	f7ff b85d 	b.w	9d20 <bt_le_scan_update>
}
    ac66:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ac6a:	bd08      	pop	{r3, pc}
    ac6c:	20000b54 	.word	0x20000b54
    ac70:	20003a38 	.word	0x20003a38

0000ac74 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    ac76:	4e1b      	ldr	r6, [pc, #108]	; (ace4 <bt_pub_key_gen+0x70>)
    ac78:	f896 3066 	ldrb.w	r3, [r6, #102]	; 0x66
    ac7c:	f003 0306 	and.w	r3, r3, #6
    ac80:	2b06      	cmp	r3, #6
    ac82:	d007      	beq.n	ac94 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    ac84:	2157      	movs	r1, #87	; 0x57
    ac86:	4818      	ldr	r0, [pc, #96]	; (ace8 <bt_pub_key_gen+0x74>)
    ac88:	f01c fe23 	bl	278d2 <printk>
		return -ENOTSUP;
    ac8c:	f06f 0485 	mvn.w	r4, #133	; 0x85
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    ac90:	4620      	mov	r0, r4
    ac92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    ac94:	4f15      	ldr	r7, [pc, #84]	; (acec <bt_pub_key_gen+0x78>)
    ac96:	683b      	ldr	r3, [r7, #0]
    ac98:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    ac9a:	6038      	str	r0, [r7, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    ac9c:	2104      	movs	r1, #4
    ac9e:	f106 0094 	add.w	r0, r6, #148	; 0x94
    aca2:	f01f f860 	bl	29d66 <atomic_test_and_set_bit>
    aca6:	4605      	mov	r5, r0
    aca8:	b9d0      	cbnz	r0, ace0 <bt_pub_key_gen+0x6c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    acaa:	f06f 0108 	mvn.w	r1, #8
    acae:	f106 0094 	add.w	r0, r6, #148	; 0x94
    acb2:	f01f f863 	bl	29d7c <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    acb6:	462a      	mov	r2, r5
    acb8:	4629      	mov	r1, r5
    acba:	f242 0025 	movw	r0, #8229	; 0x2025
    acbe:	f7fe fded 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    acc2:	4604      	mov	r4, r0
    acc4:	2800      	cmp	r0, #0
    acc6:	d0e3      	beq.n	ac90 <bt_pub_key_gen+0x1c>
		BT_ERR("Sending LE P256 Public Key command failed");
    acc8:	2145      	movs	r1, #69	; 0x45
    acca:	4809      	ldr	r0, [pc, #36]	; (acf0 <bt_pub_key_gen+0x7c>)
    accc:	f01c fe01 	bl	278d2 <printk>
    acd0:	f06f 0110 	mvn.w	r1, #16
    acd4:	f106 0094 	add.w	r0, r6, #148	; 0x94
    acd8:	f01f f850 	bl	29d7c <atomic_and>
		pub_key_cb = NULL;
    acdc:	603d      	str	r5, [r7, #0]
		return err;
    acde:	e7d7      	b.n	ac90 <bt_pub_key_gen+0x1c>
		return 0;
    ace0:	2400      	movs	r4, #0
    ace2:	e7d5      	b.n	ac90 <bt_pub_key_gen+0x1c>
    ace4:	20000ac0 	.word	0x20000ac0
    ace8:	0003195d 	.word	0x0003195d
    acec:	20003a28 	.word	0x20003a28
    acf0:	00031981 	.word	0x00031981

0000acf4 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    acf4:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    acf6:	2103      	movs	r1, #3
    acf8:	4803      	ldr	r0, [pc, #12]	; (ad08 <bt_pub_key_get+0x14>)
    acfa:	f01f f86e 	bl	29dda <atomic_test_bit>
    acfe:	2800      	cmp	r0, #0
		return pub_key;
	}

	return NULL;
}
    ad00:	4802      	ldr	r0, [pc, #8]	; (ad0c <bt_pub_key_get+0x18>)
    ad02:	bf08      	it	eq
    ad04:	2000      	moveq	r0, #0
    ad06:	bd08      	pop	{r3, pc}
    ad08:	20000b54 	.word	0x20000b54
    ad0c:	200057f0 	.word	0x200057f0

0000ad10 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    ad10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb == cb) {
    ad12:	4e20      	ldr	r6, [pc, #128]	; (ad94 <bt_dh_key_gen+0x84>)
    ad14:	6832      	ldr	r2, [r6, #0]
    ad16:	428a      	cmp	r2, r1
{
    ad18:	4604      	mov	r4, r0
    ad1a:	460b      	mov	r3, r1
    ad1c:	4637      	mov	r7, r6
	if (dh_key_cb == cb) {
    ad1e:	d032      	beq.n	ad86 <bt_dh_key_gen+0x76>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    ad20:	b112      	cbz	r2, ad28 <bt_dh_key_gen+0x18>
		return -EBUSY;
    ad22:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    ad26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    ad28:	2104      	movs	r1, #4
    ad2a:	481b      	ldr	r0, [pc, #108]	; (ad98 <bt_dh_key_gen+0x88>)
    ad2c:	f01f f855 	bl	29dda <atomic_test_bit>
    ad30:	2800      	cmp	r0, #0
    ad32:	d1f6      	bne.n	ad22 <bt_dh_key_gen+0x12>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    ad34:	2103      	movs	r1, #3
    ad36:	4818      	ldr	r0, [pc, #96]	; (ad98 <bt_dh_key_gen+0x88>)
    ad38:	f01f f84f 	bl	29dda <atomic_test_bit>
    ad3c:	b330      	cbz	r0, ad8c <bt_dh_key_gen+0x7c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    ad3e:	2140      	movs	r1, #64	; 0x40
    ad40:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    ad44:	6033      	str	r3, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    ad46:	f7fe fc6b 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
    ad4a:	4605      	mov	r5, r0
    ad4c:	b918      	cbnz	r0, ad56 <bt_dh_key_gen+0x46>
		dh_key_cb = NULL;
    ad4e:	6030      	str	r0, [r6, #0]
		return -ENOBUFS;
    ad50:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ad54:	e7e7      	b.n	ad26 <bt_dh_key_gen+0x16>
	return net_buf_simple_add(&buf->b, len);
    ad56:	2140      	movs	r1, #64	; 0x40
    ad58:	3008      	adds	r0, #8
    ad5a:	f015 f921 	bl	1ffa0 <net_buf_simple_add>
    ad5e:	4623      	mov	r3, r4
    ad60:	f104 0240 	add.w	r2, r4, #64	; 0x40
    ad64:	f853 1b04 	ldr.w	r1, [r3], #4
    ad68:	f840 1b04 	str.w	r1, [r0], #4
    ad6c:	4293      	cmp	r3, r2
    ad6e:	d1f9      	bne.n	ad64 <bt_dh_key_gen+0x54>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    ad70:	2200      	movs	r2, #0
    ad72:	4629      	mov	r1, r5
    ad74:	f242 0026 	movw	r0, #8230	; 0x2026
    ad78:	f7fe fd90 	bl	989c <bt_hci_cmd_send_sync>
	if (err) {
    ad7c:	2800      	cmp	r0, #0
    ad7e:	d0d2      	beq.n	ad26 <bt_dh_key_gen+0x16>
		dh_key_cb = NULL;
    ad80:	2300      	movs	r3, #0
    ad82:	603b      	str	r3, [r7, #0]
		return err;
    ad84:	e7cf      	b.n	ad26 <bt_dh_key_gen+0x16>
		return -EALREADY;
    ad86:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ad8a:	e7cc      	b.n	ad26 <bt_dh_key_gen+0x16>
		return -EADDRNOTAVAIL;
    ad8c:	f06f 007c 	mvn.w	r0, #124	; 0x7c
    ad90:	e7c9      	b.n	ad26 <bt_dh_key_gen+0x16>
    ad92:	bf00      	nop
    ad94:	20003a24 	.word	0x20003a24
    ad98:	20000b54 	.word	0x20000b54

0000ad9c <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    ad9c:	2300      	movs	r3, #0
{
    ad9e:	4601      	mov	r1, r0
	tx->user_data = NULL;
    ada0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
    ada4:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    ada6:	4801      	ldr	r0, [pc, #4]	; (adac <tx_free+0x10>)
    ada8:	f023 b8f2 	b.w	2df90 <k_queue_append>
    adac:	20001f0c 	.word	0x20001f0c

0000adb0 <notify_connected>:
{
    adb0:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    adb2:	4b09      	ldr	r3, [pc, #36]	; (add8 <notify_connected+0x28>)
    adb4:	681c      	ldr	r4, [r3, #0]
{
    adb6:	4605      	mov	r5, r0
    adb8:	7a69      	ldrb	r1, [r5, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
    adba:	b92c      	cbnz	r4, adc8 <notify_connected+0x18>
	if (!conn->err) {
    adbc:	b951      	cbnz	r1, add4 <notify_connected+0x24>
		bt_gatt_connected(conn);
    adbe:	4628      	mov	r0, r5
}
    adc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    adc4:	f003 b99e 	b.w	e104 <bt_gatt_connected>
		if (cb->connected) {
    adc8:	6823      	ldr	r3, [r4, #0]
    adca:	b10b      	cbz	r3, add0 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    adcc:	4628      	mov	r0, r5
    adce:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    add0:	6924      	ldr	r4, [r4, #16]
    add2:	e7f1      	b.n	adb8 <notify_connected+0x8>
}
    add4:	bd38      	pop	{r3, r4, r5, pc}
    add6:	bf00      	nop
    add8:	20003a3c 	.word	0x20003a3c

0000addc <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    addc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ade0:	4604      	mov	r4, r0
    ade2:	460e      	mov	r6, r1
    ade4:	4617      	mov	r7, r2
    ade6:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    ade8:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
    adea:	f04f 33ff 	mov.w	r3, #4294967295
    adee:	f04f 32ff 	mov.w	r2, #4294967295
    adf2:	484b      	ldr	r0, [pc, #300]	; (af20 <send_frag+0x144>)
    adf4:	f01a f91e 	bl	25034 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    adf8:	7aa3      	ldrb	r3, [r4, #10]
    adfa:	2b07      	cmp	r3, #7
    adfc:	d14d      	bne.n	ae9a <send_frag+0xbe>
	__asm__ volatile(
    adfe:	f04f 0320 	mov.w	r3, #32
    ae02:	f3ef 8211 	mrs	r2, BASEPRI
    ae06:	f383 8811 	msr	BASEPRI, r3
    ae0a:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    ae0e:	2d00      	cmp	r5, #0
    ae10:	d058      	beq.n	aec4 <send_frag+0xe8>
	parent->next = child;
    ae12:	2300      	movs	r3, #0
    ae14:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    ae16:	69a3      	ldr	r3, [r4, #24]
    ae18:	2b00      	cmp	r3, #0
    ae1a:	d150      	bne.n	aebe <send_frag+0xe2>
	list->head = node;
    ae1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    ae20:	f382 8811 	msr	BASEPRI, r2
    ae24:	f3bf 8f6f 	isb	sy
	switch (flags) {
    ae28:	2f01      	cmp	r7, #1
    ae2a:	d002      	beq.n	ae32 <send_frag+0x56>
		flags = BT_ACL_START_NO_FLUSH;
    ae2c:	1efb      	subs	r3, r7, #3
    ae2e:	425f      	negs	r7, r3
    ae30:	415f      	adcs	r7, r3
	return net_buf_simple_push(&buf->b, len);
    ae32:	2104      	movs	r1, #4
    ae34:	f106 0008 	add.w	r0, r6, #8
    ae38:	f015 f85a 	bl	1fef0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    ae3c:	8823      	ldrh	r3, [r4, #0]
    ae3e:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    ae42:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    ae44:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    ae46:	3b04      	subs	r3, #4
    ae48:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    ae4a:	2302      	movs	r3, #2
    ae4c:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    ae4e:	4630      	mov	r0, r6
    ae50:	f01f f819 	bl	29e86 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    ae54:	4602      	mov	r2, r0
    ae56:	2800      	cmp	r0, #0
    ae58:	d05e      	beq.n	af18 <send_frag+0x13c>
		BT_ERR("Unable to send to driver (err %d)", err);
    ae5a:	2145      	movs	r1, #69	; 0x45
    ae5c:	4831      	ldr	r0, [pc, #196]	; (af24 <send_frag+0x148>)
    ae5e:	f01c fd38 	bl	278d2 <printk>
	__asm__ volatile(
    ae62:	f04f 0320 	mov.w	r3, #32
    ae66:	f3ef 8711 	mrs	r7, BASEPRI
    ae6a:	f383 8811 	msr	BASEPRI, r3
    ae6e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    ae72:	2d00      	cmp	r5, #0
    ae74:	d03c      	beq.n	aef0 <send_frag+0x114>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ae76:	6963      	ldr	r3, [r4, #20]
    ae78:	2200      	movs	r2, #0
    ae7a:	b153      	cbz	r3, ae92 <send_frag+0xb6>
    ae7c:	429d      	cmp	r5, r3
    ae7e:	d134      	bne.n	aeea <send_frag+0x10e>
Z_GENLIST_REMOVE(slist, snode)
    ae80:	682b      	ldr	r3, [r5, #0]
    ae82:	bb62      	cbnz	r2, aede <send_frag+0x102>
    ae84:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    ae86:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    ae88:	4295      	cmp	r5, r2
    ae8a:	d100      	bne.n	ae8e <send_frag+0xb2>
	list->tail = node;
    ae8c:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    ae8e:	2300      	movs	r3, #0
    ae90:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    ae92:	f387 8811 	msr	BASEPRI, r7
    ae96:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    ae9a:	4821      	ldr	r0, [pc, #132]	; (af20 <send_frag+0x144>)
    ae9c:	f01a f88e 	bl	24fbc <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    aea0:	b115      	cbz	r5, aea8 <send_frag+0xcc>
		tx_free(tx);
    aea2:	4628      	mov	r0, r5
    aea4:	f7ff ff7a 	bl	ad9c <tx_free>
	}

	if (always_consume) {
    aea8:	f1b9 0f00 	cmp.w	r9, #0
    aeac:	d004      	beq.n	aeb8 <send_frag+0xdc>
		net_buf_unref(buf);
    aeae:	4630      	mov	r0, r6
    aeb0:	f014 ff26 	bl	1fd00 <net_buf_unref>
	}
	return false;
    aeb4:	f04f 0900 	mov.w	r9, #0
}
    aeb8:	4648      	mov	r0, r9
    aeba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aebe:	601d      	str	r5, [r3, #0]
	list->tail = node;
    aec0:	61a5      	str	r5, [r4, #24]
    aec2:	e7ad      	b.n	ae20 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    aec4:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    aec6:	b133      	cbz	r3, aed6 <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    aec8:	f103 080c 	add.w	r8, r3, #12
    aecc:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    aece:	3301      	adds	r3, #1
    aed0:	f8c8 3000 	str.w	r3, [r8]
    aed4:	e7a4      	b.n	ae20 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    aed6:	f104 081c 	add.w	r8, r4, #28
    aeda:	69e3      	ldr	r3, [r4, #28]
    aedc:	e7f7      	b.n	aece <send_frag+0xf2>
	parent->next = child;
    aede:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    aee0:	69a3      	ldr	r3, [r4, #24]
    aee2:	429d      	cmp	r5, r3
	list->tail = node;
    aee4:	bf08      	it	eq
    aee6:	61a2      	streq	r2, [r4, #24]
    aee8:	e7d1      	b.n	ae8e <send_frag+0xb2>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    aeea:	461a      	mov	r2, r3
    aeec:	681b      	ldr	r3, [r3, #0]
    aeee:	e7c4      	b.n	ae7a <send_frag+0x9e>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
    aef0:	f8d8 3000 	ldr.w	r3, [r8]
    aef4:	b953      	cbnz	r3, af0c <send_frag+0x130>
    aef6:	490c      	ldr	r1, [pc, #48]	; (af28 <send_frag+0x14c>)
    aef8:	480c      	ldr	r0, [pc, #48]	; (af2c <send_frag+0x150>)
    aefa:	f240 4292 	movw	r2, #1170	; 0x492
    aefe:	f01c fce8 	bl	278d2 <printk>
    af02:	f240 4192 	movw	r1, #1170	; 0x492
    af06:	4808      	ldr	r0, [pc, #32]	; (af28 <send_frag+0x14c>)
    af08:	f01c ff5c 	bl	27dc4 <assert_post_action>
			(*pending_no_cb)--;
    af0c:	f8d8 3000 	ldr.w	r3, [r8]
    af10:	3b01      	subs	r3, #1
    af12:	f8c8 3000 	str.w	r3, [r8]
    af16:	e7bc      	b.n	ae92 <send_frag+0xb6>
	return true;
    af18:	f04f 0901 	mov.w	r9, #1
    af1c:	e7cc      	b.n	aeb8 <send_frag+0xdc>
    af1e:	bf00      	nop
    af20:	20000b88 	.word	0x20000b88
    af24:	00031d0e 	.word	0x00031d0e
    af28:	00031ff9 	.word	0x00031ff9
    af2c:	0003067f 	.word	0x0003067f

0000af30 <bt_conn_get_pkts>:
}
    af30:	4800      	ldr	r0, [pc, #0]	; (af34 <bt_conn_get_pkts+0x4>)
    af32:	4770      	bx	lr
    af34:	20000b88 	.word	0x20000b88

0000af38 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    af38:	1d03      	adds	r3, r0, #4
{
    af3a:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    af3c:	2109      	movs	r1, #9
{
    af3e:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    af40:	4618      	mov	r0, r3
    af42:	f01f f87b 	bl	2a03c <atomic_test_bit>
    af46:	b1c8      	cbz	r0, af7c <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    af48:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    af4c:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    af50:	4291      	cmp	r1, r2
    af52:	d813      	bhi.n	af7c <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    af54:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    af58:	4291      	cmp	r1, r2
    af5a:	d30f      	bcc.n	af7c <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    af5c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    af60:	4291      	cmp	r1, r2
    af62:	d10b      	bne.n	af7c <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    af64:	f3bf 8f5b 	dmb	ish
    af68:	e853 2f00 	ldrex	r2, [r3]
    af6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    af70:	e843 2100 	strex	r1, r2, [r3]
    af74:	2900      	cmp	r1, #0
    af76:	d1f7      	bne.n	af68 <notify_le_param_updated+0x30>
    af78:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    af7c:	4b07      	ldr	r3, [pc, #28]	; (af9c <notify_le_param_updated+0x64>)
    af7e:	681d      	ldr	r5, [r3, #0]
    af80:	b905      	cbnz	r5, af84 <notify_le_param_updated+0x4c>
}
    af82:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    af84:	68ee      	ldr	r6, [r5, #12]
    af86:	b13e      	cbz	r6, af98 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    af88:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    af8c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    af90:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    af94:	4620      	mov	r0, r4
    af96:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    af98:	692d      	ldr	r5, [r5, #16]
    af9a:	e7f1      	b.n	af80 <notify_le_param_updated+0x48>
    af9c:	20003a3c 	.word	0x20003a3c

0000afa0 <le_param_req>:
{
    afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afa2:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    afa4:	4608      	mov	r0, r1
{
    afa6:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    afa8:	f01e ff4d 	bl	29e46 <bt_le_conn_params_valid>
    afac:	4605      	mov	r5, r0
    afae:	b910      	cbnz	r0, afb6 <le_param_req+0x16>
		return false;
    afb0:	2500      	movs	r5, #0
}
    afb2:	4628      	mov	r0, r5
    afb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    afb6:	4b09      	ldr	r3, [pc, #36]	; (afdc <le_param_req+0x3c>)
    afb8:	681c      	ldr	r4, [r3, #0]
    afba:	2c00      	cmp	r4, #0
    afbc:	d0f9      	beq.n	afb2 <le_param_req+0x12>
		if (!cb->le_param_req) {
    afbe:	68a3      	ldr	r3, [r4, #8]
    afc0:	b90b      	cbnz	r3, afc6 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    afc2:	6924      	ldr	r4, [r4, #16]
    afc4:	e7f9      	b.n	afba <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    afc6:	4631      	mov	r1, r6
    afc8:	4638      	mov	r0, r7
    afca:	4798      	blx	r3
    afcc:	2800      	cmp	r0, #0
    afce:	d0ef      	beq.n	afb0 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    afd0:	4630      	mov	r0, r6
    afd2:	f01e ff38 	bl	29e46 <bt_le_conn_params_valid>
    afd6:	2800      	cmp	r0, #0
    afd8:	d1f3      	bne.n	afc2 <le_param_req+0x22>
    afda:	e7e9      	b.n	afb0 <le_param_req+0x10>
    afdc:	20003a3c 	.word	0x20003a3c

0000afe0 <bt_conn_cb_register>:
	cb->_next = callback_list;
    afe0:	4b02      	ldr	r3, [pc, #8]	; (afec <bt_conn_cb_register+0xc>)
    afe2:	681a      	ldr	r2, [r3, #0]
    afe4:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    afe6:	6018      	str	r0, [r3, #0]
}
    afe8:	4770      	bx	lr
    afea:	bf00      	nop
    afec:	20003a3c 	.word	0x20003a3c

0000aff0 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    aff0:	b570      	push	{r4, r5, r6, lr}
    aff2:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    aff4:	f100 0634 	add.w	r6, r0, #52	; 0x34
    aff8:	2200      	movs	r2, #0
    affa:	2300      	movs	r3, #0
    affc:	4630      	mov	r0, r6
    affe:	f014 fd65 	bl	1facc <net_buf_get>
    b002:	4605      	mov	r5, r0
    b004:	bb28      	cbnz	r0, b052 <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
    b006:	6963      	ldr	r3, [r4, #20]
    b008:	b153      	cbz	r3, b020 <conn_cleanup+0x30>
    b00a:	4916      	ldr	r1, [pc, #88]	; (b064 <conn_cleanup+0x74>)
    b00c:	4816      	ldr	r0, [pc, #88]	; (b068 <conn_cleanup+0x78>)
    b00e:	f240 520c 	movw	r2, #1292	; 0x50c
    b012:	f01c fc5e 	bl	278d2 <printk>
    b016:	f240 510c 	movw	r1, #1292	; 0x50c
    b01a:	4812      	ldr	r0, [pc, #72]	; (b064 <conn_cleanup+0x74>)
    b01c:	f01c fed2 	bl	27dc4 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
    b020:	69e3      	ldr	r3, [r4, #28]
    b022:	b153      	cbz	r3, b03a <conn_cleanup+0x4a>
    b024:	490f      	ldr	r1, [pc, #60]	; (b064 <conn_cleanup+0x74>)
    b026:	4810      	ldr	r0, [pc, #64]	; (b068 <conn_cleanup+0x78>)
    b028:	f240 520d 	movw	r2, #1293	; 0x50d
    b02c:	f01c fc51 	bl	278d2 <printk>
    b030:	f240 510d 	movw	r1, #1293	; 0x50d
    b034:	480b      	ldr	r0, [pc, #44]	; (b064 <conn_cleanup+0x74>)
    b036:	f01c fec5 	bl	27dc4 <assert_post_action>

	bt_conn_reset_rx_state(conn);
    b03a:	4620      	mov	r0, r4
    b03c:	f01f f809 	bl	2a052 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b040:	f104 0158 	add.w	r1, r4, #88	; 0x58
    b044:	2200      	movs	r2, #0
    b046:	2300      	movs	r3, #0
    b048:	4808      	ldr	r0, [pc, #32]	; (b06c <conn_cleanup+0x7c>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    b04a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b04e:	f01a ba23 	b.w	25498 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    b052:	6968      	ldr	r0, [r5, #20]
    b054:	b108      	cbz	r0, b05a <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
    b056:	f7ff fea1 	bl	ad9c <tx_free>
		net_buf_unref(buf);
    b05a:	4628      	mov	r0, r5
    b05c:	f014 fe50 	bl	1fd00 <net_buf_unref>
    b060:	e7ca      	b.n	aff8 <conn_cleanup+0x8>
    b062:	bf00      	nop
    b064:	00031ff9 	.word	0x00031ff9
    b068:	0003067f 	.word	0x0003067f
    b06c:	20003028 	.word	0x20003028

0000b070 <bt_conn_recv>:
{
    b070:	b570      	push	{r4, r5, r6, lr}
    b072:	4616      	mov	r6, r2
    b074:	4604      	mov	r4, r0
    b076:	460d      	mov	r5, r1
	tx_notify(conn);
    b078:	f01e ff9f 	bl	29fba <tx_notify>
	switch (flags) {
    b07c:	2e01      	cmp	r6, #1
    b07e:	d022      	beq.n	b0c6 <bt_conn_recv+0x56>
    b080:	2e02      	cmp	r6, #2
    b082:	d143      	bne.n	b10c <bt_conn_recv+0x9c>
		if (conn->rx) {
    b084:	6923      	ldr	r3, [r4, #16]
    b086:	b133      	cbz	r3, b096 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
    b088:	4827      	ldr	r0, [pc, #156]	; (b128 <bt_conn_recv+0xb8>)
    b08a:	2145      	movs	r1, #69	; 0x45
    b08c:	f01c fc21 	bl	278d2 <printk>
			bt_conn_reset_rx_state(conn);
    b090:	4620      	mov	r0, r4
    b092:	f01e ffde 	bl	2a052 <bt_conn_reset_rx_state>
		conn->rx = buf;
    b096:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    b098:	6921      	ldr	r1, [r4, #16]
    b09a:	898a      	ldrh	r2, [r1, #12]
    b09c:	2a01      	cmp	r2, #1
    b09e:	d942      	bls.n	b126 <bt_conn_recv+0xb6>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    b0a0:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    b0a2:	7845      	ldrb	r5, [r0, #1]
    b0a4:	7803      	ldrb	r3, [r0, #0]
    b0a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    b0aa:	3304      	adds	r3, #4
    b0ac:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    b0ae:	4293      	cmp	r3, r2
    b0b0:	d839      	bhi.n	b126 <bt_conn_recv+0xb6>
	if (conn->rx->len > acl_total_len) {
    b0b2:	d231      	bcs.n	b118 <bt_conn_recv+0xa8>
		BT_ERR("ACL len mismatch (%u > %u)",
    b0b4:	481d      	ldr	r0, [pc, #116]	; (b12c <bt_conn_recv+0xbc>)
    b0b6:	2145      	movs	r1, #69	; 0x45
    b0b8:	f01c fc0b 	bl	278d2 <printk>
		bt_conn_reset_rx_state(conn);
    b0bc:	4620      	mov	r0, r4
}
    b0be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    b0c2:	f01e bfc6 	b.w	2a052 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    b0c6:	6920      	ldr	r0, [r4, #16]
    b0c8:	b938      	cbnz	r0, b0da <bt_conn_recv+0x6a>
			BT_ERR("Unexpected L2CAP continuation");
    b0ca:	4819      	ldr	r0, [pc, #100]	; (b130 <bt_conn_recv+0xc0>)
    b0cc:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Not enough buffer space for L2CAP data");
    b0ce:	f01c fc00 	bl	278d2 <printk>
			bt_conn_reset_rx_state(conn);
    b0d2:	4620      	mov	r0, r4
    b0d4:	f01e ffbd 	bl	2a052 <bt_conn_reset_rx_state>
    b0d8:	e001      	b.n	b0de <bt_conn_recv+0x6e>
		if (!buf->len) {
    b0da:	89ae      	ldrh	r6, [r5, #12]
    b0dc:	b926      	cbnz	r6, b0e8 <bt_conn_recv+0x78>
			net_buf_unref(buf);
    b0de:	4628      	mov	r0, r5
}
    b0e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    b0e4:	f014 be0c 	b.w	1fd00 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    b0e8:	3008      	adds	r0, #8
    b0ea:	f022 fa5f 	bl	2d5ac <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    b0ee:	42b0      	cmp	r0, r6
    b0f0:	d202      	bcs.n	b0f8 <bt_conn_recv+0x88>
			BT_ERR("Not enough buffer space for L2CAP data");
    b0f2:	2145      	movs	r1, #69	; 0x45
    b0f4:	480f      	ldr	r0, [pc, #60]	; (b134 <bt_conn_recv+0xc4>)
    b0f6:	e7ea      	b.n	b0ce <bt_conn_recv+0x5e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b0f8:	6920      	ldr	r0, [r4, #16]
    b0fa:	89aa      	ldrh	r2, [r5, #12]
    b0fc:	68a9      	ldr	r1, [r5, #8]
    b0fe:	3008      	adds	r0, #8
    b100:	f022 fa5c 	bl	2d5bc <net_buf_simple_add_mem>
		net_buf_unref(buf);
    b104:	4628      	mov	r0, r5
    b106:	f014 fdfb 	bl	1fd00 <net_buf_unref>
		break;
    b10a:	e7c5      	b.n	b098 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    b10c:	4632      	mov	r2, r6
    b10e:	2145      	movs	r1, #69	; 0x45
    b110:	4809      	ldr	r0, [pc, #36]	; (b138 <bt_conn_recv+0xc8>)
    b112:	f01c fbde 	bl	278d2 <printk>
		bt_conn_reset_rx_state(conn);
    b116:	e7dc      	b.n	b0d2 <bt_conn_recv+0x62>
	conn->rx = NULL;
    b118:	2300      	movs	r3, #0
    b11a:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
    b11c:	4620      	mov	r0, r4
}
    b11e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    b122:	f000 bd27 	b.w	bb74 <bt_l2cap_recv>
}
    b126:	bd70      	pop	{r4, r5, r6, pc}
    b128:	00031e86 	.word	0x00031e86
    b12c:	00031f1a 	.word	0x00031f1a
    b130:	00031ea8 	.word	0x00031ea8
    b134:	00031ecb 	.word	0x00031ecb
    b138:	00031ef7 	.word	0x00031ef7

0000b13c <bt_conn_send_cb>:
{
    b13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b140:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    b142:	7a83      	ldrb	r3, [r0, #10]
    b144:	2b07      	cmp	r3, #7
{
    b146:	4606      	mov	r6, r0
    b148:	460d      	mov	r5, r1
    b14a:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    b14c:	d009      	beq.n	b162 <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
    b14e:	4821      	ldr	r0, [pc, #132]	; (b1d4 <bt_conn_send_cb+0x98>)
    b150:	2145      	movs	r1, #69	; 0x45
    b152:	f01c fbbe 	bl	278d2 <printk>
		net_buf_unref(buf);
    b156:	4628      	mov	r0, r5
    b158:	f014 fdd2 	bl	1fd00 <net_buf_unref>
			return -ENOTCONN;
    b15c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    b160:	e01a      	b.n	b198 <bt_conn_send_cb+0x5c>
	if (cb) {
    b162:	2a00      	cmp	r2, #0
    b164:	d034      	beq.n	b1d0 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
    b166:	f019 ff23 	bl	24fb0 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    b16a:	4b1b      	ldr	r3, [pc, #108]	; (b1d8 <bt_conn_send_cb+0x9c>)
    b16c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    b16e:	481b      	ldr	r0, [pc, #108]	; (b1dc <bt_conn_send_cb+0xa0>)
    b170:	bf07      	ittee	eq
    b172:	2200      	moveq	r2, #0
    b174:	2300      	moveq	r3, #0
    b176:	f04f 32ff 	movne.w	r2, #4294967295
    b17a:	f04f 33ff 	movne.w	r3, #4294967295
    b17e:	f018 fe8f 	bl	23ea0 <z_impl_k_queue_get>
    b182:	4604      	mov	r4, r0
		if (!tx) {
    b184:	b950      	cbnz	r0, b19c <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
    b186:	2145      	movs	r1, #69	; 0x45
    b188:	4815      	ldr	r0, [pc, #84]	; (b1e0 <bt_conn_send_cb+0xa4>)
    b18a:	f01c fba2 	bl	278d2 <printk>
			net_buf_unref(buf);
    b18e:	4628      	mov	r0, r5
    b190:	f014 fdb6 	bl	1fd00 <net_buf_unref>
			return -ENOBUFS;
    b194:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    b198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    b19c:	7ab3      	ldrb	r3, [r6, #10]
    b19e:	2b07      	cmp	r3, #7
    b1a0:	d00a      	beq.n	b1b8 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
    b1a2:	2157      	movs	r1, #87	; 0x57
    b1a4:	480f      	ldr	r0, [pc, #60]	; (b1e4 <bt_conn_send_cb+0xa8>)
    b1a6:	f01c fb94 	bl	278d2 <printk>
			net_buf_unref(buf);
    b1aa:	4628      	mov	r0, r5
    b1ac:	f014 fda8 	bl	1fd00 <net_buf_unref>
			tx_free(tx);
    b1b0:	4620      	mov	r0, r4
    b1b2:	f7ff fdf3 	bl	ad9c <tx_free>
    b1b6:	e7d1      	b.n	b15c <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
    b1b8:	2300      	movs	r3, #0
		tx->user_data = user_data;
    b1ba:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    b1be:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    b1c0:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    b1c2:	f106 0034 	add.w	r0, r6, #52	; 0x34
    b1c6:	4629      	mov	r1, r5
    b1c8:	f014 fd6c 	bl	1fca4 <net_buf_put>
	return 0;
    b1cc:	2000      	movs	r0, #0
    b1ce:	e7e3      	b.n	b198 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
    b1d0:	616a      	str	r2, [r5, #20]
    b1d2:	e7f6      	b.n	b1c2 <bt_conn_send_cb+0x86>
    b1d4:	00031f3a 	.word	0x00031f3a
    b1d8:	20003048 	.word	0x20003048
    b1dc:	20001f0c 	.word	0x20001f0c
    b1e0:	00031f4e 	.word	0x00031f4e
    b1e4:	00031f71 	.word	0x00031f71

0000b1e8 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    b1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    b1ec:	4b22      	ldr	r3, [pc, #136]	; (b278 <bt_conn_prepare_events+0x90>)
    b1ee:	4d23      	ldr	r5, [pc, #140]	; (b27c <bt_conn_prepare_events+0x94>)
    b1f0:	2400      	movs	r4, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    b1f2:	4622      	mov	r2, r4
    b1f4:	2101      	movs	r1, #1
{
    b1f6:	4680      	mov	r8, r0
	conn_change.signaled = 0U;
    b1f8:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    b1fa:	f01a fefb 	bl	25ff4 <k_poll_event_init>
    b1fe:	2601      	movs	r6, #1
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    b200:	f04f 0914 	mov.w	r9, #20
		conn_cleanup(conn);
    b204:	f1a5 0ab8 	sub.w	sl, r5, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b208:	f3bf 8f5b 	dmb	ish
    b20c:	682b      	ldr	r3, [r5, #0]
    b20e:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
    b212:	fb09 8706 	mla	r7, r9, r6, r8
	if (!atomic_get(&conn->ref)) {
    b216:	b1bb      	cbz	r3, b248 <bt_conn_prepare_events+0x60>
	if (conn->state == BT_CONN_DISCONNECTED &&
    b218:	f815 3cae 	ldrb.w	r3, [r5, #-174]
    b21c:	b9e3      	cbnz	r3, b258 <bt_conn_prepare_events+0x70>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b21e:	f3bf 8f5b 	dmb	ish
    b222:	f1a5 03b4 	sub.w	r3, r5, #180	; 0xb4
    b226:	e853 2f00 	ldrex	r2, [r3]
    b22a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    b22e:	e843 1000 	strex	r0, r1, [r3]
    b232:	2800      	cmp	r0, #0
    b234:	d1f7      	bne.n	b226 <bt_conn_prepare_events+0x3e>
    b236:	f3bf 8f5b 	dmb	ish
    b23a:	0653      	lsls	r3, r2, #25
    b23c:	d50c      	bpl.n	b258 <bt_conn_prepare_events+0x70>
		conn_cleanup(conn);
    b23e:	20c0      	movs	r0, #192	; 0xc0
    b240:	fb00 a004 	mla	r0, r0, r4, sl
    b244:	f7ff fed4 	bl	aff0 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    b248:	3401      	adds	r4, #1
    b24a:	2c03      	cmp	r4, #3
    b24c:	f105 05c0 	add.w	r5, r5, #192	; 0xc0
    b250:	d1da      	bne.n	b208 <bt_conn_prepare_events+0x20>
		}
	}
#endif

	return ev_count;
}
    b252:	4630      	mov	r0, r6
    b254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (conn->state != BT_CONN_CONNECTED) {
    b258:	f815 3cae 	ldrb.w	r3, [r5, #-174]
    b25c:	2b07      	cmp	r3, #7
    b25e:	d1f3      	bne.n	b248 <bt_conn_prepare_events+0x60>
	k_poll_event_init(&events[0],
    b260:	f1a5 0384 	sub.w	r3, r5, #132	; 0x84
    b264:	2200      	movs	r2, #0
    b266:	2104      	movs	r1, #4
    b268:	4638      	mov	r0, r7
    b26a:	f01a fec3 	bl	25ff4 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    b26e:	2301      	movs	r3, #1
    b270:	733b      	strb	r3, [r7, #12]
			ev_count++;
    b272:	441e      	add	r6, r3
    b274:	e7e8      	b.n	b248 <bt_conn_prepare_events+0x60>
    b276:	bf00      	nop
    b278:	200012a4 	.word	0x200012a4
    b27c:	200022a8 	.word	0x200022a8

0000b280 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    b280:	b570      	push	{r4, r5, r6, lr}
    b282:	4606      	mov	r6, r0
    b284:	460d      	mov	r5, r1
    b286:	4811      	ldr	r0, [pc, #68]	; (b2cc <bt_conn_add_le+0x4c>)
    b288:	2103      	movs	r1, #3
    b28a:	f01e fe71 	bl	29f70 <bt_conn_new.part.10>
	if (!conn) {
    b28e:	4604      	mov	r4, r0
    b290:	b1d0      	cbz	r0, b2c8 <bt_conn_add_le+0x48>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    b292:	2230      	movs	r2, #48	; 0x30
    b294:	2100      	movs	r1, #0
    b296:	3058      	adds	r0, #88	; 0x58
    b298:	f023 f842 	bl	2e320 <memset>
    b29c:	4b0c      	ldr	r3, [pc, #48]	; (b2d0 <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b29e:	4a0d      	ldr	r2, [pc, #52]	; (b2d4 <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    b2a0:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b2a2:	2300      	movs	r3, #0
    b2a4:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    b2a8:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    b2aa:	7226      	strb	r6, [r4, #8]
    b2ac:	682a      	ldr	r2, [r5, #0]
    b2ae:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    b2b2:	88aa      	ldrh	r2, [r5, #4]
    b2b4:	f8a4 208c 	strh.w	r2, [r4, #140]	; 0x8c
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    b2b8:	2301      	movs	r3, #1
    b2ba:	79aa      	ldrb	r2, [r5, #6]
    b2bc:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    b2be:	4b06      	ldr	r3, [pc, #24]	; (b2d8 <bt_conn_add_le+0x58>)
    b2c0:	f884 208e 	strb.w	r2, [r4, #142]	; 0x8e
    b2c4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    b2c8:	4620      	mov	r0, r4
    b2ca:	bd70      	pop	{r4, r5, r6, pc}
    b2cc:	200021f0 	.word	0x200021f0
    b2d0:	0000b695 	.word	0x0000b695
    b2d4:	0002a001 	.word	0x0002a001
    b2d8:	00280018 	.word	0x00280018

0000b2dc <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
    b2dc:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    b2de:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
{
    b2e2:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    b2e4:	f3bf 8f5b 	dmb	ish
    b2e8:	e853 2f00 	ldrex	r2, [r3]
    b2ec:	1e51      	subs	r1, r2, #1
    b2ee:	e843 1000 	strex	r0, r1, [r3]
    b2f2:	2800      	cmp	r0, #0
    b2f4:	d1f8      	bne.n	b2e8 <bt_conn_unref+0xc>
    b2f6:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
    b2fa:	2a00      	cmp	r2, #0
    b2fc:	dc0a      	bgt.n	b314 <bt_conn_unref+0x38>
    b2fe:	490b      	ldr	r1, [pc, #44]	; (b32c <bt_conn_unref+0x50>)
    b300:	480b      	ldr	r0, [pc, #44]	; (b330 <bt_conn_unref+0x54>)
    b302:	f240 7265 	movw	r2, #1893	; 0x765
    b306:	f01c fae4 	bl	278d2 <printk>
    b30a:	f240 7165 	movw	r1, #1893	; 0x765
    b30e:	4807      	ldr	r0, [pc, #28]	; (b32c <bt_conn_unref+0x50>)
    b310:	f01c fd58 	bl	27dc4 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b314:	f3bf 8f5b 	dmb	ish
    b318:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    b31c:	f3bf 8f5b 	dmb	ish

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b320:	b91b      	cbnz	r3, b32a <bt_conn_unref+0x4e>
	    atomic_get(&conn->ref) == 0) {
		bt_le_adv_resume();
	}
}
    b322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
    b326:	f7ff baf5 	b.w	a914 <bt_le_adv_resume>
}
    b32a:	bd10      	pop	{r4, pc}
    b32c:	00031ff9 	.word	0x00031ff9
    b330:	0003067f 	.word	0x0003067f

0000b334 <bt_conn_lookup_handle>:
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    b334:	4602      	mov	r2, r0
    b336:	2103      	movs	r1, #3
    b338:	4801      	ldr	r0, [pc, #4]	; (b340 <bt_conn_lookup_handle+0xc>)
    b33a:	f01e beb5 	b.w	2a0a8 <conn_lookup_handle>
    b33e:	bf00      	nop
    b340:	200021f0 	.word	0x200021f0

0000b344 <bt_conn_set_state>:
{
    b344:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    b346:	7a85      	ldrb	r5, [r0, #10]
    b348:	428d      	cmp	r5, r1
{
    b34a:	4604      	mov	r4, r0
    b34c:	460e      	mov	r6, r1
	if (conn->state == state) {
    b34e:	d10b      	bne.n	b368 <bt_conn_set_state+0x24>
	switch (state) {
    b350:	2d08      	cmp	r5, #8
    b352:	bf96      	itet	ls
    b354:	4b5e      	ldrls	r3, [pc, #376]	; (b4d0 <bt_conn_set_state+0x18c>)
	if (conn->state == state) {
    b356:	4a5f      	ldrhi	r2, [pc, #380]	; (b4d4 <bt_conn_set_state+0x190>)
    b358:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
    b35c:	485e      	ldr	r0, [pc, #376]	; (b4d8 <bt_conn_set_state+0x194>)
    b35e:	2157      	movs	r1, #87	; 0x57
}
    b360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    b364:	f01c bab5 	b.w	278d2 <printk>
	conn->state = state;
    b368:	72a1      	strb	r1, [r4, #10]
	switch (old_state) {
    b36a:	b90d      	cbnz	r5, b370 <bt_conn_set_state+0x2c>
		bt_conn_ref(conn);
    b36c:	f01e fe9a 	bl	2a0a4 <bt_conn_ref>
	switch (conn->state) {
    b370:	7aa3      	ldrb	r3, [r4, #10]
    b372:	2b08      	cmp	r3, #8
    b374:	f200 80a7 	bhi.w	b4c6 <bt_conn_set_state+0x182>
    b378:	e8df f003 	tbb	[pc, r3]
    b37c:	a9a9053e 	.word	0xa9a9053e
    b380:	1ca9a9a9 	.word	0x1ca9a9a9
    b384:	a9          	.byte	0xa9
    b385:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    b386:	4d55      	ldr	r5, [pc, #340]	; (b4dc <bt_conn_set_state+0x198>)
		tx->pending_no_cb = 0U;
    b388:	2600      	movs	r6, #0
	__asm__ volatile(
    b38a:	f04f 0320 	mov.w	r3, #32
    b38e:	f3ef 8211 	mrs	r2, BASEPRI
    b392:	f383 8811 	msr	BASEPRI, r3
    b396:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    b39a:	69e3      	ldr	r3, [r4, #28]
    b39c:	2b00      	cmp	r3, #0
    b39e:	d073      	beq.n	b488 <bt_conn_set_state+0x144>
			conn->pending_no_cb--;
    b3a0:	3b01      	subs	r3, #1
    b3a2:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    b3a4:	f382 8811 	msr	BASEPRI, r2
    b3a8:	f3bf 8f6f 	isb	sy
    b3ac:	4628      	mov	r0, r5
    b3ae:	f019 fe05 	bl	24fbc <z_impl_k_sem_give>
    b3b2:	e7ea      	b.n	b38a <bt_conn_set_state+0x46>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b3b4:	78a3      	ldrb	r3, [r4, #2]
    b3b6:	2b04      	cmp	r3, #4
    b3b8:	f000 8089 	beq.w	b4ce <bt_conn_set_state+0x18a>
	z_impl_k_queue_init(queue);
    b3bc:	f104 0034 	add.w	r0, r4, #52	; 0x34
    b3c0:	f022 fdd9 	bl	2df76 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
    b3c4:	2100      	movs	r1, #0
    b3c6:	4846      	ldr	r0, [pc, #280]	; (b4e0 <bt_conn_set_state+0x19c>)
    b3c8:	f01a ff24 	bl	26214 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    b3cc:	2300      	movs	r3, #0
	list->tail = NULL;
    b3ce:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		bt_l2cap_connected(conn);
    b3d2:	4620      	mov	r0, r4
    b3d4:	f000 fb0e 	bl	b9f4 <bt_l2cap_connected>
		notify_connected(conn);
    b3d8:	4620      	mov	r0, r4
    b3da:	f7ff fce9 	bl	adb0 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b3de:	78e3      	ldrb	r3, [r4, #3]
    b3e0:	2b01      	cmp	r3, #1
    b3e2:	d174      	bne.n	b4ce <bt_conn_set_state+0x18a>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b3e4:	f104 0158 	add.w	r1, r4, #88	; 0x58
    b3e8:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    b3ec:	2300      	movs	r3, #0
    b3ee:	483d      	ldr	r0, [pc, #244]	; (b4e4 <bt_conn_set_state+0x1a0>)
}
    b3f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b3f4:	f01a b850 	b.w	25498 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b3f8:	78a3      	ldrb	r3, [r4, #2]
    b3fa:	2b04      	cmp	r3, #4
    b3fc:	d104      	bne.n	b408 <bt_conn_set_state+0xc4>
			bt_conn_unref(conn);
    b3fe:	4620      	mov	r0, r4
}
    b400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    b404:	f7ff bf6a 	b.w	b2dc <bt_conn_unref>
		switch (old_state) {
    b408:	2d08      	cmp	r5, #8
    b40a:	d860      	bhi.n	b4ce <bt_conn_set_state+0x18a>
    b40c:	a301      	add	r3, pc, #4	; (adr r3, b414 <bt_conn_set_state+0xd0>)
    b40e:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    b412:	bf00      	nop
    b414:	0000b481 	.word	0x0000b481
    b418:	0000b439 	.word	0x0000b439
    b41c:	0000b473 	.word	0x0000b473
    b420:	0000b3ff 	.word	0x0000b3ff
    b424:	0000b3ff 	.word	0x0000b3ff
    b428:	0000b473 	.word	0x0000b473
    b42c:	0000b473 	.word	0x0000b473
    b430:	0000b481 	.word	0x0000b481
    b434:	0000b481 	.word	0x0000b481
			tx_notify(conn);
    b438:	4620      	mov	r0, r4
    b43a:	f01e fdbe 	bl	29fba <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    b43e:	78a3      	ldrb	r3, [r4, #2]
    b440:	2b01      	cmp	r3, #1
    b442:	d103      	bne.n	b44c <bt_conn_set_state+0x108>
				k_delayed_work_cancel(&conn->deferred_work);
    b444:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b448:	f01a f896 	bl	25578 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b44c:	f3bf 8f5b 	dmb	ish
    b450:	3404      	adds	r4, #4
    b452:	e854 3f00 	ldrex	r3, [r4]
    b456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b45a:	e844 3200 	strex	r2, r3, [r4]
    b45e:	2a00      	cmp	r2, #0
    b460:	d1f7      	bne.n	b452 <bt_conn_set_state+0x10e>
    b462:	f3bf 8f5b 	dmb	ish
    b466:	2100      	movs	r1, #0
    b468:	481d      	ldr	r0, [pc, #116]	; (b4e0 <bt_conn_set_state+0x19c>)
}
    b46a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b46e:	f01a bed1 	b.w	26214 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    b472:	7a63      	ldrb	r3, [r4, #9]
    b474:	2b00      	cmp	r3, #0
    b476:	d0c2      	beq.n	b3fe <bt_conn_set_state+0xba>
				notify_connected(conn);
    b478:	4620      	mov	r0, r4
    b47a:	f7ff fc99 	bl	adb0 <notify_connected>
    b47e:	e7be      	b.n	b3fe <bt_conn_set_state+0xba>
			BT_WARN("Invalid (%u) old state", state);
    b480:	4632      	mov	r2, r6
    b482:	2157      	movs	r1, #87	; 0x57
    b484:	4818      	ldr	r0, [pc, #96]	; (b4e8 <bt_conn_set_state+0x1a4>)
    b486:	e76b      	b.n	b360 <bt_conn_set_state+0x1c>
Z_GENLIST_IS_EMPTY(slist)
    b488:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    b48a:	b128      	cbz	r0, b498 <bt_conn_set_state+0x154>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b48c:	69a1      	ldr	r1, [r4, #24]
    b48e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    b490:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b492:	4288      	cmp	r0, r1
	list->tail = node;
    b494:	bf08      	it	eq
    b496:	61a3      	streq	r3, [r4, #24]
    b498:	f382 8811 	msr	BASEPRI, r2
    b49c:	f3bf 8f6f 	isb	sy
		if (!node) {
    b4a0:	b1a8      	cbz	r0, b4ce <bt_conn_set_state+0x18a>
	__asm__ volatile(
    b4a2:	f04f 0220 	mov.w	r2, #32
    b4a6:	f3ef 8311 	mrs	r3, BASEPRI
    b4aa:	f382 8811 	msr	BASEPRI, r2
    b4ae:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    b4b2:	68c2      	ldr	r2, [r0, #12]
    b4b4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    b4b6:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    b4b8:	f383 8811 	msr	BASEPRI, r3
    b4bc:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    b4c0:	f7ff fc6c 	bl	ad9c <tx_free>
    b4c4:	e772      	b.n	b3ac <bt_conn_set_state+0x68>
		BT_WARN("no valid (%u) state was set", state);
    b4c6:	4632      	mov	r2, r6
    b4c8:	2157      	movs	r1, #87	; 0x57
    b4ca:	4808      	ldr	r0, [pc, #32]	; (b4ec <bt_conn_set_state+0x1a8>)
    b4cc:	e748      	b.n	b360 <bt_conn_set_state+0x1c>
}
    b4ce:	bd70      	pop	{r4, r5, r6, pc}
    b4d0:	0002f880 	.word	0x0002f880
    b4d4:	00031f9c 	.word	0x00031f9c
    b4d8:	00031fa6 	.word	0x00031fa6
    b4dc:	20000b88 	.word	0x20000b88
    b4e0:	200012a4 	.word	0x200012a4
    b4e4:	20003028 	.word	0x20003028
    b4e8:	00031fbc 	.word	0x00031fbc
    b4ec:	00031fd8 	.word	0x00031fd8

0000b4f0 <bt_conn_lookup_addr_le.part.13>:
struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
    b4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4f4:	4e0f      	ldr	r6, [pc, #60]	; (b534 <bt_conn_lookup_addr_le.part.13+0x44>)
    b4f6:	4607      	mov	r7, r0
    b4f8:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    b4fa:	2500      	movs	r5, #0
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
    b4fc:	4630      	mov	r0, r6
    b4fe:	f01e fd82 	bl	2a006 <bt_conn_ref.part.12>
		if (!conn) {
    b502:	4604      	mov	r4, r0
    b504:	b120      	cbz	r0, b510 <bt_conn_lookup_addr_le.part.13+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
    b506:	7883      	ldrb	r3, [r0, #2]
    b508:	2b01      	cmp	r3, #1
    b50a:	d00a      	beq.n	b522 <bt_conn_lookup_addr_le.part.13+0x32>
			bt_conn_unref(conn);
    b50c:	f7ff fee6 	bl	b2dc <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    b510:	3501      	adds	r5, #1
    b512:	2d03      	cmp	r5, #3
    b514:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
    b518:	d1f0      	bne.n	b4fc <bt_conn_lookup_addr_le.part.13+0xc>
	return NULL;
    b51a:	2400      	movs	r4, #0
}
    b51c:	4620      	mov	r0, r4
    b51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    b522:	4642      	mov	r2, r8
    b524:	4639      	mov	r1, r7
    b526:	f01e fd9d 	bl	2a064 <bt_conn_is_peer_addr_le>
    b52a:	2800      	cmp	r0, #0
    b52c:	d1f6      	bne.n	b51c <bt_conn_lookup_addr_le.part.13+0x2c>
			bt_conn_unref(conn);
    b52e:	4620      	mov	r0, r4
    b530:	e7ec      	b.n	b50c <bt_conn_lookup_addr_le.part.13+0x1c>
    b532:	bf00      	nop
    b534:	200021f0 	.word	0x200021f0

0000b538 <bt_conn_exists_le>:
{
    b538:	b510      	push	{r4, lr}
    b53a:	f7ff ffd9 	bl	b4f0 <bt_conn_lookup_addr_le.part.13>
	if (conn) {
    b53e:	4604      	mov	r4, r0
    b540:	b170      	cbz	r0, b560 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
    b542:	7a83      	ldrb	r3, [r0, #10]
    b544:	4807      	ldr	r0, [pc, #28]	; (b564 <bt_conn_exists_le+0x2c>)
    b546:	2b08      	cmp	r3, #8
    b548:	bf96      	itet	ls
    b54a:	4a07      	ldrls	r2, [pc, #28]	; (b568 <bt_conn_exists_le+0x30>)
    b54c:	4a07      	ldrhi	r2, [pc, #28]	; (b56c <bt_conn_exists_le+0x34>)
    b54e:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
    b552:	2157      	movs	r1, #87	; 0x57
    b554:	f01c f9bd 	bl	278d2 <printk>
		bt_conn_unref(conn);
    b558:	4620      	mov	r0, r4
    b55a:	f7ff febf 	bl	b2dc <bt_conn_unref>
		return true;
    b55e:	2001      	movs	r0, #1
}
    b560:	bd10      	pop	{r4, pc}
    b562:	bf00      	nop
    b564:	00031e5e 	.word	0x00031e5e
    b568:	0002f880 	.word	0x0002f880
    b56c:	00031f9c 	.word	0x00031f9c

0000b570 <bt_conn_lookup_state_le>:
{
    b570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b574:	f8df a054 	ldr.w	sl, [pc, #84]	; b5cc <bt_conn_lookup_state_le+0x5c>
    b578:	4606      	mov	r6, r0
    b57a:	460f      	mov	r7, r1
    b57c:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    b57e:	2500      	movs	r5, #0
    b580:	f04f 09c0 	mov.w	r9, #192	; 0xc0
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
    b584:	fb09 a005 	mla	r0, r9, r5, sl
    b588:	f01e fd3d 	bl	2a006 <bt_conn_ref.part.12>
		if (!conn) {
    b58c:	4604      	mov	r4, r0
    b58e:	b120      	cbz	r0, b59a <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
    b590:	7883      	ldrb	r3, [r0, #2]
    b592:	2b01      	cmp	r3, #1
    b594:	d006      	beq.n	b5a4 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
    b596:	f01e fd85 	bl	2a0a4 <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    b59a:	3501      	adds	r5, #1
    b59c:	2d03      	cmp	r5, #3
    b59e:	d1f1      	bne.n	b584 <bt_conn_lookup_state_le+0x14>
	return NULL;
    b5a0:	2400      	movs	r4, #0
    b5a2:	e00f      	b.n	b5c4 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    b5a4:	b147      	cbz	r7, b5b8 <bt_conn_lookup_state_le+0x48>
    b5a6:	463a      	mov	r2, r7
    b5a8:	4631      	mov	r1, r6
    b5aa:	f01e fd5b 	bl	2a064 <bt_conn_is_peer_addr_le>
    b5ae:	b918      	cbnz	r0, b5b8 <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
    b5b0:	4620      	mov	r0, r4
    b5b2:	f7ff fe93 	bl	b2dc <bt_conn_unref>
			continue;
    b5b6:	e7f0      	b.n	b59a <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
    b5b8:	7aa3      	ldrb	r3, [r4, #10]
    b5ba:	4543      	cmp	r3, r8
    b5bc:	d1f8      	bne.n	b5b0 <bt_conn_lookup_state_le+0x40>
    b5be:	7a23      	ldrb	r3, [r4, #8]
    b5c0:	42b3      	cmp	r3, r6
    b5c2:	d1f5      	bne.n	b5b0 <bt_conn_lookup_state_le+0x40>
}
    b5c4:	4620      	mov	r0, r4
    b5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b5ca:	bf00      	nop
    b5cc:	200021f0 	.word	0x200021f0

0000b5d0 <bt_conn_disconnect>:
			     param->pref_rx_phy, phy_opts);
}
#endif

int bt_conn_disconnect(struct bt_conn *conn, uint8_t reason)
{
    b5d0:	b538      	push	{r3, r4, r5, lr}
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}
#endif /* !defined(CONFIG_BT_WHITELIST) */

	switch (conn->state) {
    b5d2:	7a83      	ldrb	r3, [r0, #10]
    b5d4:	3b02      	subs	r3, #2
{
    b5d6:	4604      	mov	r4, r0
    b5d8:	460d      	mov	r5, r1
	switch (conn->state) {
    b5da:	2b06      	cmp	r3, #6
    b5dc:	d805      	bhi.n	b5ea <bt_conn_disconnect+0x1a>
    b5de:	e8df f003 	tbb	[pc, r3]
    b5e2:	0408      	.short	0x0408
    b5e4:	1b0c0e04 	.word	0x1b0c0e04
    b5e8:	0c          	.byte	0x0c
    b5e9:	00          	.byte	0x00
		return conn_disconnect(conn, reason);
	case BT_CONN_DISCONNECT:
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
    b5ea:	f06f 057f 	mvn.w	r5, #127	; 0x7f
	}
}
    b5ee:	4628      	mov	r0, r5
    b5f0:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    b5f2:	7261      	strb	r1, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b5f4:	2100      	movs	r1, #0
    b5f6:	f7ff fea5 	bl	b344 <bt_conn_set_state>
		return 0;
    b5fa:	2500      	movs	r5, #0
    b5fc:	e7f7      	b.n	b5ee <bt_conn_disconnect+0x1e>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    b5fe:	2157      	movs	r1, #87	; 0x57
    b600:	480b      	ldr	r0, [pc, #44]	; (b630 <bt_conn_disconnect+0x60>)
    b602:	f01c f966 	bl	278d2 <printk>
		conn->err = reason;
    b606:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b608:	4620      	mov	r0, r4
    b60a:	2100      	movs	r1, #0
    b60c:	f7ff fe9a 	bl	b344 <bt_conn_set_state>
}
    b610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
    b614:	f7ff b920 	b.w	a858 <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
    b618:	8800      	ldrh	r0, [r0, #0]
    b61a:	f01e fbf9 	bl	29e10 <bt_hci_disconnect>
	if (err) {
    b61e:	4605      	mov	r5, r0
    b620:	2800      	cmp	r0, #0
    b622:	d1e4      	bne.n	b5ee <bt_conn_disconnect+0x1e>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    b624:	2108      	movs	r1, #8
    b626:	4620      	mov	r0, r4
    b628:	f7ff fe8c 	bl	b344 <bt_conn_set_state>
	return 0;
    b62c:	e7df      	b.n	b5ee <bt_conn_disconnect+0x1e>
    b62e:	bf00      	nop
    b630:	00031e32 	.word	0x00031e32

0000b634 <send_conn_le_param_update>:
{
    b634:	b538      	push	{r3, r4, r5, lr}
    b636:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    b638:	4608      	mov	r0, r1
{
    b63a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    b63c:	f01e fc03 	bl	29e46 <bt_le_conn_params_valid>
    b640:	b310      	cbz	r0, b688 <send_conn_le_param_update+0x54>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b642:	4b13      	ldr	r3, [pc, #76]	; (b690 <send_conn_le_param_update+0x5c>)
    b644:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    b648:	079a      	lsls	r2, r3, #30
    b64a:	d407      	bmi.n	b65c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    b64c:	78e3      	ldrb	r3, [r4, #3]
    b64e:	b17b      	cbz	r3, b670 <send_conn_le_param_update+0x3c>
	return bt_l2cap_update_conn_param(conn, param);
    b650:	4629      	mov	r1, r5
    b652:	4620      	mov	r0, r4
}
    b654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    b658:	f000 bab4 	b.w	bbc4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b65c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b660:	079b      	lsls	r3, r3, #30
    b662:	d5f3      	bpl.n	b64c <send_conn_le_param_update+0x18>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    b664:	210a      	movs	r1, #10
    b666:	1d20      	adds	r0, r4, #4
    b668:	f01e fce8 	bl	2a03c <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    b66c:	2800      	cmp	r0, #0
    b66e:	d1ed      	bne.n	b64c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    b670:	4629      	mov	r1, r5
    b672:	4620      	mov	r0, r4
    b674:	f01e fd41 	bl	2a0fa <bt_conn_le_conn_update>
		if (rc == 0) {
    b678:	b928      	cbnz	r0, b686 <send_conn_le_param_update+0x52>
			conn->le.pending_latency = param->latency;
    b67a:	88ab      	ldrh	r3, [r5, #4]
    b67c:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    b680:	88eb      	ldrh	r3, [r5, #6]
    b682:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    b686:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b688:	f06f 0015 	mvn.w	r0, #21
    b68c:	e7fb      	b.n	b686 <send_conn_le_param_update+0x52>
    b68e:	bf00      	nop
    b690:	20000ac0 	.word	0x20000ac0

0000b694 <deferred_work>:
{
    b694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    b696:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    b69a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    b69c:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    b6a0:	b993      	cbnz	r3, b6c8 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    b6a2:	4630      	mov	r0, r6
    b6a4:	f01e fd87 	bl	2a1b6 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    b6a8:	4b1f      	ldr	r3, [pc, #124]	; (b728 <deferred_work+0x94>)
    b6aa:	681d      	ldr	r5, [r3, #0]
    b6ac:	b925      	cbnz	r5, b6b8 <deferred_work+0x24>
		bt_conn_unref(conn);
    b6ae:	4630      	mov	r0, r6
    b6b0:	f7ff fe14 	bl	b2dc <bt_conn_unref>
}
    b6b4:	b004      	add	sp, #16
    b6b6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    b6b8:	686b      	ldr	r3, [r5, #4]
    b6ba:	b11b      	cbz	r3, b6c4 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    b6bc:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    b6c0:	4630      	mov	r0, r6
    b6c2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b6c4:	692d      	ldr	r5, [r5, #16]
    b6c6:	e7f1      	b.n	b6ac <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    b6c8:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    b6cc:	2b01      	cmp	r3, #1
    b6ce:	d1f1      	bne.n	b6b4 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b6d0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    b6d4:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    b6d8:	e855 3f00 	ldrex	r3, [r5]
    b6dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    b6e0:	e845 2100 	strex	r1, r2, [r5]
    b6e4:	2900      	cmp	r1, #0
    b6e6:	d1f7      	bne.n	b6d8 <deferred_work+0x44>
    b6e8:	f3bf 8f5b 	dmb	ish
    b6ec:	059b      	lsls	r3, r3, #22
    b6ee:	d514      	bpl.n	b71a <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    b6f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b6f2:	9300      	str	r3, [sp, #0]
    b6f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b6f6:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    b6f8:	4669      	mov	r1, sp
		send_conn_le_param_update(conn, param);
    b6fa:	4630      	mov	r0, r6
    b6fc:	f7ff ff9a 	bl	b634 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b700:	f3bf 8f5b 	dmb	ish
    b704:	e855 3f00 	ldrex	r3, [r5]
    b708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b70c:	e845 3200 	strex	r2, r3, [r5]
    b710:	2a00      	cmp	r2, #0
    b712:	d1f7      	bne.n	b704 <deferred_work+0x70>
    b714:	f3bf 8f5b 	dmb	ish
    b718:	e7cc      	b.n	b6b4 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    b71a:	4a04      	ldr	r2, [pc, #16]	; (b72c <deferred_work+0x98>)
    b71c:	6851      	ldr	r1, [r2, #4]
    b71e:	6810      	ldr	r0, [r2, #0]
    b720:	ab02      	add	r3, sp, #8
    b722:	c303      	stmia	r3!, {r0, r1}
		send_conn_le_param_update(conn, param);
    b724:	a902      	add	r1, sp, #8
    b726:	e7e8      	b.n	b6fa <deferred_work+0x66>
    b728:	20003a3c 	.word	0x20003a3c
    b72c:	0002f2dc 	.word	0x0002f2dc

0000b730 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    b730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b732:	4604      	mov	r4, r0
    b734:	460d      	mov	r5, r1
    b736:	4616      	mov	r6, r2
    b738:	461f      	mov	r7, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
    b73a:	f022 fc92 	bl	2e062 <k_is_in_isr>
    b73e:	b150      	cbz	r0, b756 <bt_conn_create_pdu_timeout+0x26>
    b740:	490f      	ldr	r1, [pc, #60]	; (b780 <bt_conn_create_pdu_timeout+0x50>)
    b742:	4810      	ldr	r0, [pc, #64]	; (b784 <bt_conn_create_pdu_timeout+0x54>)
    b744:	f640 12ee 	movw	r2, #2542	; 0x9ee
    b748:	f01c f8c3 	bl	278d2 <printk>
    b74c:	f640 11ee 	movw	r1, #2542	; 0x9ee
    b750:	480b      	ldr	r0, [pc, #44]	; (b780 <bt_conn_create_pdu_timeout+0x50>)
    b752:	f01c fb37 	bl	27dc4 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    b756:	480c      	ldr	r0, [pc, #48]	; (b788 <bt_conn_create_pdu_timeout+0x58>)
    b758:	4632      	mov	r2, r6
    b75a:	2c00      	cmp	r4, #0
    b75c:	bf18      	it	ne
    b75e:	4620      	movne	r0, r4
    b760:	463b      	mov	r3, r7
    b762:	f021 feb7 	bl	2d4d4 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    b766:	4604      	mov	r4, r0
    b768:	b928      	cbnz	r0, b776 <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
    b76a:	2157      	movs	r1, #87	; 0x57
    b76c:	4807      	ldr	r0, [pc, #28]	; (b78c <bt_conn_create_pdu_timeout+0x5c>)
    b76e:	f01c f8b0 	bl	278d2 <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    b772:	4620      	mov	r0, r4
    b774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    b776:	1d29      	adds	r1, r5, #4
    b778:	3008      	adds	r0, #8
    b77a:	f014 f9d7 	bl	1fb2c <net_buf_simple_reserve>
	return buf;
    b77e:	e7f8      	b.n	b772 <bt_conn_create_pdu_timeout+0x42>
    b780:	00031ff9 	.word	0x00031ff9
    b784:	0003067f 	.word	0x0003067f
    b788:	20001f44 	.word	0x20001f44
    b78c:	00031e04 	.word	0x00031e04

0000b790 <bt_conn_create_frag_timeout>:
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    b790:	4601      	mov	r1, r0
    b792:	4801      	ldr	r0, [pc, #4]	; (b798 <bt_conn_create_frag_timeout+0x8>)
    b794:	f7ff bfcc 	b.w	b730 <bt_conn_create_pdu_timeout>
    b798:	20001fc8 	.word	0x20001fc8

0000b79c <create_frag.isra.16>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    b79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7a0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    b7a2:	f04f 33ff 	mov.w	r3, #4294967295
    b7a6:	f04f 32ff 	mov.w	r2, #4294967295
    b7aa:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    b7ac:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    b7ae:	f7ff ffef 	bl	b790 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    b7b2:	7833      	ldrb	r3, [r6, #0]
    b7b4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    b7b6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    b7b8:	f04f 0600 	mov.w	r6, #0
    b7bc:	d005      	beq.n	b7ca <create_frag.isra.16+0x2e>
		net_buf_unref(frag);
    b7be:	f014 fa9f 	bl	1fd00 <net_buf_unref>
		return NULL;
    b7c2:	4635      	mov	r5, r6
}
    b7c4:	4628      	mov	r0, r5
    b7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    b7ca:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    b7cc:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    b7d0:	4e0c      	ldr	r6, [pc, #48]	; (b804 <create_frag.isra.16+0x68>)
    b7d2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b7d4:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    b7d8:	f021 fee8 	bl	2d5ac <net_buf_simple_tailroom>
    b7dc:	4580      	cmp	r8, r0
    b7de:	d20c      	bcs.n	b7fa <create_frag.isra.16+0x5e>
	return bt_dev.le.acl_mtu;
    b7e0:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b7e4:	f854 1f08 	ldr.w	r1, [r4, #8]!
    b7e8:	4632      	mov	r2, r6
    b7ea:	4638      	mov	r0, r7
    b7ec:	f021 fee6 	bl	2d5bc <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    b7f0:	4631      	mov	r1, r6
    b7f2:	4620      	mov	r0, r4
    b7f4:	f014 fb9a 	bl	1ff2c <net_buf_simple_pull>
    b7f8:	e7e4      	b.n	b7c4 <create_frag.isra.16+0x28>
	return net_buf_simple_tailroom(&buf->b);
    b7fa:	4638      	mov	r0, r7
    b7fc:	f021 fed6 	bl	2d5ac <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b800:	b286      	uxth	r6, r0
    b802:	e7ef      	b.n	b7e4 <create_frag.isra.16+0x48>
    b804:	20000ac0 	.word	0x20000ac0

0000b808 <bt_conn_process_tx>:
{
    b808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    b80a:	7a83      	ldrb	r3, [r0, #10]
{
    b80c:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    b80e:	b993      	cbnz	r3, b836 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b810:	f3bf 8f5b 	dmb	ish
    b814:	1d03      	adds	r3, r0, #4
    b816:	e853 2f00 	ldrex	r2, [r3]
    b81a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    b81e:	e843 1400 	strex	r4, r1, [r3]
    b822:	2c00      	cmp	r4, #0
    b824:	d1f7      	bne.n	b816 <bt_conn_process_tx+0xe>
    b826:	f3bf 8f5b 	dmb	ish
    b82a:	0653      	lsls	r3, r2, #25
    b82c:	d503      	bpl.n	b836 <bt_conn_process_tx+0x2e>
}
    b82e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    b832:	f7ff bbdd 	b.w	aff0 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    b836:	2200      	movs	r2, #0
    b838:	2300      	movs	r3, #0
    b83a:	f105 0034 	add.w	r0, r5, #52	; 0x34
    b83e:	f014 f945 	bl	1facc <net_buf_get>
	BT_ASSERT(buf);
    b842:	4604      	mov	r4, r0
    b844:	b958      	cbnz	r0, b85e <bt_conn_process_tx+0x56>
    b846:	f240 525f 	movw	r2, #1375	; 0x55f
    b84a:	491f      	ldr	r1, [pc, #124]	; (b8c8 <bt_conn_process_tx+0xc0>)
    b84c:	481f      	ldr	r0, [pc, #124]	; (b8cc <bt_conn_process_tx+0xc4>)
    b84e:	f01c f840 	bl	278d2 <printk>
    b852:	4040      	eors	r0, r0
    b854:	f380 8811 	msr	BASEPRI, r0
    b858:	f04f 0003 	mov.w	r0, #3
    b85c:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    b85e:	4e1c      	ldr	r6, [pc, #112]	; (b8d0 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
    b860:	89a1      	ldrh	r1, [r4, #12]
    b862:	f8b6 20c4 	ldrh.w	r2, [r6, #196]	; 0xc4
    b866:	4291      	cmp	r1, r2
    b868:	d807      	bhi.n	b87a <bt_conn_process_tx+0x72>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    b86a:	2300      	movs	r3, #0
    b86c:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    b86e:	4621      	mov	r1, r4
    b870:	4628      	mov	r0, r5
    b872:	f7ff fab3 	bl	addc <send_frag>
	if (!send_buf(conn, buf)) {
    b876:	b140      	cbz	r0, b88a <bt_conn_process_tx+0x82>
}
    b878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    b87a:	f105 070a 	add.w	r7, r5, #10
    b87e:	4621      	mov	r1, r4
    b880:	4638      	mov	r0, r7
    b882:	f7ff ff8b 	bl	b79c <create_frag.isra.16>
	if (!frag) {
    b886:	4601      	mov	r1, r0
    b888:	b920      	cbnz	r0, b894 <bt_conn_process_tx+0x8c>
		net_buf_unref(buf);
    b88a:	4620      	mov	r0, r4
}
    b88c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    b890:	f014 ba36 	b.w	1fd00 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    b894:	2301      	movs	r3, #1
    b896:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    b898:	4628      	mov	r0, r5
    b89a:	f7ff fa9f 	bl	addc <send_frag>
    b89e:	2800      	cmp	r0, #0
    b8a0:	d0f3      	beq.n	b88a <bt_conn_process_tx+0x82>
	while (buf->len > conn_mtu(conn)) {
    b8a2:	89a2      	ldrh	r2, [r4, #12]
    b8a4:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
    b8a8:	429a      	cmp	r2, r3
    b8aa:	d802      	bhi.n	b8b2 <bt_conn_process_tx+0xaa>
	return send_frag(conn, buf, FRAG_END, false);
    b8ac:	2300      	movs	r3, #0
    b8ae:	2203      	movs	r2, #3
    b8b0:	e7dd      	b.n	b86e <bt_conn_process_tx+0x66>
		frag = create_frag(conn, buf);
    b8b2:	4621      	mov	r1, r4
    b8b4:	4638      	mov	r0, r7
    b8b6:	f7ff ff71 	bl	b79c <create_frag.isra.16>
		if (!frag) {
    b8ba:	4601      	mov	r1, r0
    b8bc:	2800      	cmp	r0, #0
    b8be:	d0e4      	beq.n	b88a <bt_conn_process_tx+0x82>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    b8c0:	2301      	movs	r3, #1
    b8c2:	461a      	mov	r2, r3
    b8c4:	e7e8      	b.n	b898 <bt_conn_process_tx+0x90>
    b8c6:	bf00      	nop
    b8c8:	00031ff9 	.word	0x00031ff9
    b8cc:	0003067f 	.word	0x0003067f
    b8d0:	20000ac0 	.word	0x20000ac0

0000b8d4 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    b8d4:	4b0a      	ldr	r3, [pc, #40]	; (b900 <bt_conn_index+0x2c>)
{
    b8d6:	b510      	push	{r4, lr}
		index = conn - acl_conns;
    b8d8:	1ac0      	subs	r0, r0, r3
    b8da:	4c0a      	ldr	r4, [pc, #40]	; (b904 <bt_conn_index+0x30>)
    b8dc:	1180      	asrs	r0, r0, #6
    b8de:	4344      	muls	r4, r0
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
    b8e0:	2c02      	cmp	r4, #2
    b8e2:	d90a      	bls.n	b8fa <bt_conn_index+0x26>
    b8e4:	4908      	ldr	r1, [pc, #32]	; (b908 <bt_conn_index+0x34>)
    b8e6:	4809      	ldr	r0, [pc, #36]	; (b90c <bt_conn_index+0x38>)
    b8e8:	f640 2296 	movw	r2, #2710	; 0xa96
    b8ec:	f01b fff1 	bl	278d2 <printk>
    b8f0:	f640 2196 	movw	r1, #2710	; 0xa96
    b8f4:	4804      	ldr	r0, [pc, #16]	; (b908 <bt_conn_index+0x34>)
    b8f6:	f01c fa65 	bl	27dc4 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    b8fa:	b2e0      	uxtb	r0, r4
    b8fc:	bd10      	pop	{r4, pc}
    b8fe:	bf00      	nop
    b900:	200021f0 	.word	0x200021f0
    b904:	aaaaaaab 	.word	0xaaaaaaab
    b908:	00031ff9 	.word	0x00031ff9
    b90c:	0003067f 	.word	0x0003067f

0000b910 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    b910:	b570      	push	{r4, r5, r6, lr}
    b912:	4d0b      	ldr	r5, [pc, #44]	; (b940 <bt_conn_init+0x30>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    b914:	4e0b      	ldr	r6, [pc, #44]	; (b944 <bt_conn_init+0x34>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    b916:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    b918:	4629      	mov	r1, r5
    b91a:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    b91c:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    b91e:	f022 fb37 	bl	2df90 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    b922:	2c08      	cmp	r4, #8
    b924:	f105 0510 	add.w	r5, r5, #16
    b928:	d1f6      	bne.n	b918 <bt_conn_init+0x8>
	}

	bt_att_init();
    b92a:	f01e ff98 	bl	2a85e <bt_att_init>

	err = bt_smp_init();
    b92e:	f01f fa80 	bl	2ae32 <bt_smp_init>
	if (err) {
    b932:	4604      	mov	r4, r0
    b934:	b908      	cbnz	r0, b93a <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    b936:	f01e fc83 	bl	2a240 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    b93a:	4620      	mov	r0, r4
    b93c:	bd70      	pop	{r4, r5, r6, pc}
    b93e:	bf00      	nop
    b940:	20003a40 	.word	0x20003a40
    b944:	20001f0c 	.word	0x20001f0c

0000b948 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    b948:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    b94a:	4c0e      	ldr	r4, [pc, #56]	; (b984 <l2cap_accept+0x3c>)
    b94c:	6823      	ldr	r3, [r4, #0]
{
    b94e:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
    b950:	4625      	mov	r5, r4
    b952:	b16b      	cbz	r3, b970 <l2cap_accept+0x28>
    b954:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    b958:	b14b      	cbz	r3, b96e <l2cap_accept+0x26>
    b95a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    b95e:	b17b      	cbz	r3, b980 <l2cap_accept+0x38>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    b960:	4809      	ldr	r0, [pc, #36]	; (b988 <l2cap_accept+0x40>)
    b962:	2145      	movs	r1, #69	; 0x45
    b964:	f01b ffb5 	bl	278d2 <printk>
    b968:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
    b96c:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    b96e:	2301      	movs	r3, #1
		l2cap->chan.chan.ops = &ops;
    b970:	22c0      	movs	r2, #192	; 0xc0
    b972:	fb02 5303 	mla	r3, r2, r3, r5
    b976:	4a05      	ldr	r2, [pc, #20]	; (b98c <l2cap_accept+0x44>)
    b978:	605a      	str	r2, [r3, #4]
		return 0;
    b97a:	2000      	movs	r0, #0
		*chan = &l2cap->chan.chan;
    b97c:	600b      	str	r3, [r1, #0]
		return 0;
    b97e:	e7f5      	b.n	b96c <l2cap_accept+0x24>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    b980:	2302      	movs	r3, #2
    b982:	e7f5      	b.n	b970 <l2cap_accept+0x28>
    b984:	20002430 	.word	0x20002430
    b988:	00032110 	.word	0x00032110
    b98c:	0002f8c4 	.word	0x0002f8c4

0000b990 <l2cap_create_le_sig_pdu.isra.8>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    b990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b992:	4605      	mov	r5, r0
    b994:	460f      	mov	r7, r1
    b996:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    b998:	2300      	movs	r3, #0
    b99a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b99e:	2104      	movs	r1, #4
    b9a0:	2000      	movs	r0, #0
    b9a2:	f7ff fec5 	bl	b730 <bt_conn_create_pdu_timeout>
	if (!buf) {
    b9a6:	4604      	mov	r4, r0
    b9a8:	b930      	cbnz	r0, b9b8 <l2cap_create_le_sig_pdu.isra.8+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    b9aa:	462a      	mov	r2, r5
    b9ac:	2145      	movs	r1, #69	; 0x45
    b9ae:	4806      	ldr	r0, [pc, #24]	; (b9c8 <l2cap_create_le_sig_pdu.isra.8+0x38>)
    b9b0:	f01b ff8f 	bl	278d2 <printk>
}
    b9b4:	4620      	mov	r0, r4
    b9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    b9b8:	2104      	movs	r1, #4
    b9ba:	3008      	adds	r0, #8
    b9bc:	f014 faf0 	bl	1ffa0 <net_buf_simple_add>
	hdr->code = code;
    b9c0:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    b9c2:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    b9c4:	8046      	strh	r6, [r0, #2]
	return buf;
    b9c6:	e7f5      	b.n	b9b4 <l2cap_create_le_sig_pdu.isra.8+0x24>
    b9c8:	0003213c 	.word	0x0003213c

0000b9cc <l2cap_rtx_timeout>:
{
    b9cc:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
    b9ce:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
    b9d0:	2145      	movs	r1, #69	; 0x45
	struct bt_conn *conn = chan->chan.conn;
    b9d2:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    b9d6:	4806      	ldr	r0, [pc, #24]	; (b9f0 <l2cap_rtx_timeout+0x24>)
    b9d8:	4622      	mov	r2, r4
    b9da:	f01b ff7a 	bl	278d2 <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
    b9de:	4628      	mov	r0, r5
    b9e0:	4621      	mov	r1, r4
    b9e2:	f01e fbb3 	bl	2a14c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    b9e6:	4620      	mov	r0, r4
}
    b9e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    b9ec:	f01e bbce 	b.w	2a18c <bt_l2cap_chan_del>
    b9f0:	0003221c 	.word	0x0003221c

0000b9f4 <bt_l2cap_connected>:
{
    b9f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b9f8:	4f31      	ldr	r7, [pc, #196]	; (bac0 <bt_l2cap_connected+0xcc>)
    b9fa:	4d32      	ldr	r5, [pc, #200]	; (bac4 <bt_l2cap_connected+0xd0>)
    b9fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; bad0 <bt_l2cap_connected+0xdc>
{
    ba00:	4606      	mov	r6, r0
    ba02:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    ba04:	42bd      	cmp	r5, r7
    ba06:	d90a      	bls.n	ba1e <bt_l2cap_connected+0x2a>
    ba08:	4641      	mov	r1, r8
    ba0a:	482f      	ldr	r0, [pc, #188]	; (bac8 <bt_l2cap_connected+0xd4>)
    ba0c:	f240 1267 	movw	r2, #359	; 0x167
    ba10:	f01b ff5f 	bl	278d2 <printk>
    ba14:	f240 1167 	movw	r1, #359	; 0x167
    ba18:	4640      	mov	r0, r8
    ba1a:	f01c f9d3 	bl	27dc4 <assert_post_action>
    ba1e:	454d      	cmp	r5, r9
    ba20:	d302      	bcc.n	ba28 <bt_l2cap_connected+0x34>
}
    ba22:	b002      	add	sp, #8
    ba24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
    ba28:	686b      	ldr	r3, [r5, #4]
    ba2a:	a901      	add	r1, sp, #4
    ba2c:	4630      	mov	r0, r6
    ba2e:	4798      	blx	r3
    ba30:	2800      	cmp	r0, #0
    ba32:	db40      	blt.n	bab6 <bt_l2cap_connected+0xc2>
		ch = BT_L2CAP_LE_CHAN(chan);
    ba34:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    ba36:	882b      	ldrh	r3, [r5, #0]
    ba38:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    ba3c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    ba40:	2230      	movs	r2, #48	; 0x30
    ba42:	2100      	movs	r1, #0
    ba44:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    ba48:	f8d5 a008 	ldr.w	sl, [r5, #8]
    ba4c:	f022 fc68 	bl	2e320 <memset>
    ba50:	4b1e      	ldr	r3, [pc, #120]	; (bacc <bt_l2cap_connected+0xd8>)
    ba52:	6163      	str	r3, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ba54:	2200      	movs	r2, #0
    ba56:	f104 0340 	add.w	r3, r4, #64	; 0x40
    ba5a:	f3bf 8f5b 	dmb	ish
    ba5e:	e853 1f00 	ldrex	r1, [r3]
    ba62:	e843 2000 	strex	r0, r2, [r3]
    ba66:	2800      	cmp	r0, #0
    ba68:	d1f9      	bne.n	ba5e <bt_l2cap_connected+0x6a>
    ba6a:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    ba6e:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    ba70:	6d72      	ldr	r2, [r6, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    ba72:	f104 0308 	add.w	r3, r4, #8
    ba76:	bb02      	cbnz	r2, baba <bt_l2cap_connected+0xc6>
	list->head = node;
    ba78:	e9c6 3314 	strd	r3, r3, [r6, #80]	; 0x50
		if (chan->ops->connected) {
    ba7c:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    ba7e:	6026      	str	r6, [r4, #0]
		if (chan->ops->connected) {
    ba80:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    ba82:	f8c4 a00c 	str.w	sl, [r4, #12]
		if (chan->ops->connected) {
    ba86:	681b      	ldr	r3, [r3, #0]
    ba88:	b103      	cbz	r3, ba8c <bt_l2cap_connected+0x98>
			chan->ops->connected(chan);
    ba8a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ba8c:	9b01      	ldr	r3, [sp, #4]
    ba8e:	f3bf 8f5b 	dmb	ish
    ba92:	3340      	adds	r3, #64	; 0x40
    ba94:	e853 2f00 	ldrex	r2, [r3]
    ba98:	f042 0201 	orr.w	r2, r2, #1
    ba9c:	e843 2100 	strex	r1, r2, [r3]
    baa0:	2900      	cmp	r1, #0
    baa2:	d1f7      	bne.n	ba94 <bt_l2cap_connected+0xa0>
    baa4:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    baa8:	9801      	ldr	r0, [sp, #4]
    baaa:	6843      	ldr	r3, [r0, #4]
    baac:	699b      	ldr	r3, [r3, #24]
    baae:	b113      	cbz	r3, bab6 <bt_l2cap_connected+0xc2>
			chan->ops->status(chan, chan->status);
    bab0:	f100 0140 	add.w	r1, r0, #64	; 0x40
    bab4:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    bab6:	350c      	adds	r5, #12
    bab8:	e7a4      	b.n	ba04 <bt_l2cap_connected+0x10>
	parent->next = child;
    baba:	6013      	str	r3, [r2, #0]
	list->tail = node;
    babc:	6573      	str	r3, [r6, #84]	; 0x54
    babe:	e7dd      	b.n	ba7c <bt_l2cap_connected+0x88>
    bac0:	0002eecc 	.word	0x0002eecc
    bac4:	0002eea8 	.word	0x0002eea8
    bac8:	0003067f 	.word	0x0003067f
    bacc:	0000b9cd 	.word	0x0000b9cd
    bad0:	00032093 	.word	0x00032093

0000bad4 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    bad4:	898b      	ldrh	r3, [r1, #12]
    bad6:	2b03      	cmp	r3, #3
{
    bad8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bada:	4606      	mov	r6, r0
    badc:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    bade:	d804      	bhi.n	baea <l2cap_recv+0x16>
		BT_ERR("Too small L2CAP signaling PDU");
    bae0:	481f      	ldr	r0, [pc, #124]	; (bb60 <l2cap_recv+0x8c>)
    bae2:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid ident value in L2CAP PDU");
    bae4:	f01b fef5 	bl	278d2 <printk>
		return 0;
    bae8:	e00d      	b.n	bb06 <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
    baea:	2104      	movs	r1, #4
    baec:	f105 0008 	add.w	r0, r5, #8
    baf0:	f014 fa38 	bl	1ff64 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    baf4:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    baf6:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
    baf8:	4293      	cmp	r3, r2
    bafa:	4604      	mov	r4, r0
    bafc:	d006      	beq.n	bb0c <l2cap_recv+0x38>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    bafe:	2145      	movs	r1, #69	; 0x45
    bb00:	4818      	ldr	r0, [pc, #96]	; (bb64 <l2cap_recv+0x90>)
    bb02:	f01b fee6 	bl	278d2 <printk>
}
    bb06:	2000      	movs	r0, #0
    bb08:	b002      	add	sp, #8
    bb0a:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    bb0c:	7842      	ldrb	r2, [r0, #1]
    bb0e:	b912      	cbnz	r2, bb16 <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
    bb10:	2145      	movs	r1, #69	; 0x45
    bb12:	4815      	ldr	r0, [pc, #84]	; (bb68 <l2cap_recv+0x94>)
    bb14:	e7e6      	b.n	bae4 <l2cap_recv+0x10>
	switch (hdr->code) {
    bb16:	7802      	ldrb	r2, [r0, #0]
    bb18:	2a01      	cmp	r2, #1
    bb1a:	d0f4      	beq.n	bb06 <l2cap_recv+0x32>
    bb1c:	2a13      	cmp	r2, #19
    bb1e:	d104      	bne.n	bb2a <l2cap_recv+0x56>
	if (buf->len < sizeof(*rsp)) {
    bb20:	2b01      	cmp	r3, #1
    bb22:	d8f0      	bhi.n	bb06 <l2cap_recv+0x32>
		BT_ERR("Too small LE conn param rsp");
    bb24:	2145      	movs	r1, #69	; 0x45
    bb26:	4811      	ldr	r0, [pc, #68]	; (bb6c <l2cap_recv+0x98>)
    bb28:	e7dc      	b.n	bae4 <l2cap_recv+0x10>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    bb2a:	2157      	movs	r1, #87	; 0x57
    bb2c:	4810      	ldr	r0, [pc, #64]	; (bb70 <l2cap_recv+0x9c>)
    bb2e:	f01b fed0 	bl	278d2 <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    bb32:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    bb34:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    bb36:	2202      	movs	r2, #2
    bb38:	2001      	movs	r0, #1
    bb3a:	f7ff ff29 	bl	b990 <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    bb3e:	4604      	mov	r4, r0
    bb40:	2800      	cmp	r0, #0
    bb42:	d0e0      	beq.n	bb06 <l2cap_recv+0x32>
	return net_buf_simple_add(&buf->b, len);
    bb44:	2102      	movs	r1, #2
    bb46:	3008      	adds	r0, #8
    bb48:	f014 fa2a 	bl	1ffa0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    bb4c:	2300      	movs	r3, #0
    bb4e:	7003      	strb	r3, [r0, #0]
    bb50:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    bb52:	4622      	mov	r2, r4
    bb54:	9300      	str	r3, [sp, #0]
    bb56:	2105      	movs	r1, #5
    bb58:	4628      	mov	r0, r5
    bb5a:	f01e fb42 	bl	2a1e2 <bt_l2cap_send_cb>
    bb5e:	e7d2      	b.n	bb06 <l2cap_recv+0x32>
    bb60:	00032169 	.word	0x00032169
    bb64:	0003218c 	.word	0x0003218c
    bb68:	000321b2 	.word	0x000321b2
    bb6c:	000321d8 	.word	0x000321d8
    bb70:	000321f9 	.word	0x000321f9

0000bb74 <bt_l2cap_recv>:
{
    bb74:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    bb76:	898b      	ldrh	r3, [r1, #12]
    bb78:	2b03      	cmp	r3, #3
{
    bb7a:	4605      	mov	r5, r0
    bb7c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    bb7e:	d808      	bhi.n	bb92 <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
    bb80:	2145      	movs	r1, #69	; 0x45
    bb82:	480e      	ldr	r0, [pc, #56]	; (bbbc <bt_l2cap_recv+0x48>)
    bb84:	f01b fea5 	bl	278d2 <printk>
	net_buf_unref(buf);
    bb88:	4620      	mov	r0, r4
}
    bb8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    bb8e:	f014 b8b7 	b.w	1fd00 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    bb92:	2104      	movs	r1, #4
    bb94:	f104 0008 	add.w	r0, r4, #8
    bb98:	f014 f9e4 	bl	1ff64 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    bb9c:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    bb9e:	4628      	mov	r0, r5
    bba0:	4611      	mov	r1, r2
    bba2:	f01e fb42 	bl	2a22a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    bba6:	b920      	cbnz	r0, bbb2 <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    bba8:	2157      	movs	r1, #87	; 0x57
    bbaa:	4805      	ldr	r0, [pc, #20]	; (bbc0 <bt_l2cap_recv+0x4c>)
    bbac:	f01b fe91 	bl	278d2 <printk>
		net_buf_unref(buf);
    bbb0:	e7ea      	b.n	bb88 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
    bbb2:	6843      	ldr	r3, [r0, #4]
    bbb4:	4621      	mov	r1, r4
    bbb6:	691b      	ldr	r3, [r3, #16]
    bbb8:	4798      	blx	r3
    bbba:	e7e5      	b.n	bb88 <bt_l2cap_recv+0x14>
    bbbc:	000320c4 	.word	0x000320c4
    bbc0:	000320e6 	.word	0x000320e6

0000bbc4 <bt_l2cap_update_conn_param>:
{
    bbc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    bbc6:	4b15      	ldr	r3, [pc, #84]	; (bc1c <bt_l2cap_update_conn_param+0x58>)
    bbc8:	781a      	ldrb	r2, [r3, #0]
    bbca:	3201      	adds	r2, #1
	if (!ident) {
    bbcc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    bbd0:	bf08      	it	eq
    bbd2:	2201      	moveq	r2, #1
    bbd4:	701a      	strb	r2, [r3, #0]
{
    bbd6:	4605      	mov	r5, r0
    bbd8:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    bbda:	2208      	movs	r2, #8
    bbdc:	7819      	ldrb	r1, [r3, #0]
    bbde:	2012      	movs	r0, #18
    bbe0:	f7ff fed6 	bl	b990 <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    bbe4:	4606      	mov	r6, r0
    bbe6:	b1b0      	cbz	r0, bc16 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    bbe8:	2108      	movs	r1, #8
    bbea:	4408      	add	r0, r1
    bbec:	f014 f9d8 	bl	1ffa0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    bbf0:	8823      	ldrh	r3, [r4, #0]
    bbf2:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    bbf4:	8863      	ldrh	r3, [r4, #2]
    bbf6:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    bbf8:	88a3      	ldrh	r3, [r4, #4]
    bbfa:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    bbfc:	88e3      	ldrh	r3, [r4, #6]
    bbfe:	80c3      	strh	r3, [r0, #6]
    bc00:	2400      	movs	r4, #0
    bc02:	9400      	str	r4, [sp, #0]
    bc04:	4623      	mov	r3, r4
    bc06:	4632      	mov	r2, r6
    bc08:	2105      	movs	r1, #5
    bc0a:	4628      	mov	r0, r5
    bc0c:	f01e fae9 	bl	2a1e2 <bt_l2cap_send_cb>
	return 0;
    bc10:	4620      	mov	r0, r4
}
    bc12:	b002      	add	sp, #8
    bc14:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    bc16:	f06f 000b 	mvn.w	r0, #11
    bc1a:	e7fa      	b.n	bc12 <bt_l2cap_update_conn_param+0x4e>
    bc1c:	20005830 	.word	0x20005830

0000bc20 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    bc20:	4b02      	ldr	r3, [pc, #8]	; (bc2c <att_cfm_sent+0xc>)
    bc22:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
    bc26:	f01e bb39 	b.w	2a29c <att_sent>
    bc2a:	bf00      	nop
    bc2c:	0002a5b9 	.word	0x0002a5b9

0000bc30 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    bc30:	4b02      	ldr	r3, [pc, #8]	; (bc3c <att_rsp_sent+0xc>)
    bc32:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
    bc36:	f01e bb31 	b.w	2a29c <att_sent>
    bc3a:	bf00      	nop
    bc3c:	0002a59d 	.word	0x0002a59d

0000bc40 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    bc40:	4b02      	ldr	r3, [pc, #8]	; (bc4c <att_req_sent+0xc>)
    bc42:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
    bc46:	f01e bb29 	b.w	2a29c <att_sent>
    bc4a:	bf00      	nop
    bc4c:	0000c0dd 	.word	0x0000c0dd

0000bc50 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    bc50:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    bc52:	3808      	subs	r0, #8
    bc54:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    bc56:	a901      	add	r1, sp, #4
    bc58:	4802      	ldr	r0, [pc, #8]	; (bc64 <bt_att_released+0x14>)
    bc5a:	f017 fe49 	bl	238f0 <k_mem_slab_free>
}
    bc5e:	b003      	add	sp, #12
    bc60:	f85d fb04 	ldr.w	pc, [sp], #4
    bc64:	20001dc0 	.word	0x20001dc0

0000bc68 <read_group_cb>:
{
    bc68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    bc6c:	4606      	mov	r6, r0
    bc6e:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    bc70:	f04f 0800 	mov.w	r8, #0
    bc74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bc78:	a902      	add	r1, sp, #8
    bc7a:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    bc7c:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    bc7e:	f88d 8008 	strb.w	r8, [sp, #8]
{
    bc82:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    bc84:	f8ad 300a 	strh.w	r3, [sp, #10]
    bc88:	f01d ffea 	bl	29c60 <bt_uuid_cmp>
    bc8c:	b190      	cbz	r0, bcb4 <read_group_cb+0x4c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bc8e:	f642 0301 	movw	r3, #10241	; 0x2801
    bc92:	a903      	add	r1, sp, #12
    bc94:	6830      	ldr	r0, [r6, #0]
    bc96:	f88d 800c 	strb.w	r8, [sp, #12]
    bc9a:	f8ad 300e 	strh.w	r3, [sp, #14]
    bc9e:	f01d ffdf 	bl	29c60 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    bca2:	b138      	cbz	r0, bcb4 <read_group_cb+0x4c>
		if (data->group &&
    bca4:	6923      	ldr	r3, [r4, #16]
    bca6:	b11b      	cbz	r3, bcb0 <read_group_cb+0x48>
    bca8:	885a      	ldrh	r2, [r3, #2]
    bcaa:	42aa      	cmp	r2, r5
    bcac:	d200      	bcs.n	bcb0 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    bcae:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    bcb0:	2001      	movs	r0, #1
    bcb2:	e012      	b.n	bcda <read_group_cb+0x72>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    bcb4:	6861      	ldr	r1, [r4, #4]
    bcb6:	6830      	ldr	r0, [r6, #0]
    bcb8:	f01d ffd2 	bl	29c60 <bt_uuid_cmp>
    bcbc:	b110      	cbz	r0, bcc4 <read_group_cb+0x5c>
		data->group = NULL;
    bcbe:	2300      	movs	r3, #0
    bcc0:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    bcc2:	e7f5      	b.n	bcb0 <read_group_cb+0x48>
	if (data->rsp->len &&
    bcc4:	68e3      	ldr	r3, [r4, #12]
    bcc6:	68a0      	ldr	r0, [r4, #8]
    bcc8:	781a      	ldrb	r2, [r3, #0]
    bcca:	b14a      	cbz	r2, bce0 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    bccc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    bcd0:	8981      	ldrh	r1, [r0, #12]
    bcd2:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    bcd4:	4293      	cmp	r3, r2
    bcd6:	da03      	bge.n	bce0 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    bcd8:	2000      	movs	r0, #0
}
    bcda:	b004      	add	sp, #16
    bcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bce0:	2104      	movs	r1, #4
    bce2:	3008      	adds	r0, #8
    bce4:	f014 f95c 	bl	1ffa0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    bce8:	4b09      	ldr	r3, [pc, #36]	; (bd10 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    bcea:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    bcec:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    bcee:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    bcf0:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    bcf2:	4631      	mov	r1, r6
    bcf4:	9300      	str	r3, [sp, #0]
    bcf6:	9401      	str	r4, [sp, #4]
    bcf8:	2300      	movs	r3, #0
    bcfa:	4638      	mov	r0, r7
    bcfc:	f01e fb47 	bl	2a38e <att_chan_read>
	if (read < 0) {
    bd00:	2800      	cmp	r0, #0
    bd02:	dbe9      	blt.n	bcd8 <read_group_cb+0x70>
	if (!data->group) {
    bd04:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    bd06:	3000      	adds	r0, #0
    bd08:	bf18      	it	ne
    bd0a:	2001      	movne	r0, #1
    bd0c:	e7e5      	b.n	bcda <read_group_cb+0x72>
    bd0e:	bf00      	nop
    bd10:	0002a4a5 	.word	0x0002a4a5

0000bd14 <read_type_cb>:
{
    bd14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    bd18:	6816      	ldr	r6, [r2, #0]
{
    bd1a:	4607      	mov	r7, r0
    bd1c:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    bd1e:	6800      	ldr	r0, [r0, #0]
    bd20:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    bd22:	68b5      	ldr	r5, [r6, #8]
{
    bd24:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    bd26:	f01d ff9b 	bl	29c60 <bt_uuid_cmp>
    bd2a:	4680      	mov	r8, r0
    bd2c:	2800      	cmp	r0, #0
    bd2e:	d13f      	bne.n	bdb0 <read_type_cb+0x9c>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    bd30:	4628      	mov	r0, r5
    bd32:	2215      	movs	r2, #21
    bd34:	4639      	mov	r1, r7
    bd36:	f01f f80b 	bl	2ad50 <bt_gatt_check_perm>
    bd3a:	4605      	mov	r5, r0
    bd3c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    bd3e:	b150      	cbz	r0, bd56 <read_type_cb+0x42>
		if (data->rsp->len) {
    bd40:	68e3      	ldr	r3, [r4, #12]
    bd42:	781b      	ldrb	r3, [r3, #0]
    bd44:	b923      	cbnz	r3, bd50 <read_type_cb+0x3c>
		return BT_GATT_ITER_STOP;
    bd46:	2500      	movs	r5, #0
}
    bd48:	4628      	mov	r0, r5
    bd4a:	b003      	add	sp, #12
    bd4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    bd50:	f884 8014 	strb.w	r8, [r4, #20]
    bd54:	e7f7      	b.n	bd46 <read_type_cb+0x32>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    bd56:	68a0      	ldr	r0, [r4, #8]
    bd58:	f014 f82e 	bl	1fdb8 <net_buf_frag_last>
    bd5c:	2102      	movs	r1, #2
    bd5e:	3008      	adds	r0, #8
    bd60:	f014 f91e 	bl	1ffa0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    bd64:	4b13      	ldr	r3, [pc, #76]	; (bdb4 <read_type_cb+0xa0>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    bd66:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    bd68:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    bd6a:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    bd6e:	4639      	mov	r1, r7
    bd70:	9300      	str	r3, [sp, #0]
    bd72:	9401      	str	r4, [sp, #4]
    bd74:	462b      	mov	r3, r5
    bd76:	4630      	mov	r0, r6
    bd78:	f01e fb09 	bl	2a38e <att_chan_read>
	if (read < 0) {
    bd7c:	2800      	cmp	r0, #0
    bd7e:	da07      	bge.n	bd90 <read_type_cb+0x7c>
	if (err < 0 && err >= -0xff) {
    bd80:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    bd84:	bf26      	itte	cs
    bd86:	4240      	negcs	r0, r0
    bd88:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    bd8a:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    bd8c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    bd8e:	e7db      	b.n	bd48 <read_type_cb+0x34>
	if (!data->item) {
    bd90:	6923      	ldr	r3, [r4, #16]
    bd92:	2b00      	cmp	r3, #0
    bd94:	d0d7      	beq.n	bd46 <read_type_cb+0x32>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    bd96:	68a0      	ldr	r0, [r4, #8]
    bd98:	f01e fa78 	bl	2a28c <net_buf_frags_len>
    bd9c:	f8b6 505e 	ldrh.w	r5, [r6, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    bda0:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    bda2:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    bda4:	7818      	ldrb	r0, [r3, #0]
    bda6:	4285      	cmp	r5, r0
    bda8:	bf94      	ite	ls
    bdaa:	2500      	movls	r5, #0
    bdac:	2501      	movhi	r5, #1
    bdae:	e7cb      	b.n	bd48 <read_type_cb+0x34>
		return BT_GATT_ITER_CONTINUE;
    bdb0:	2501      	movs	r5, #1
    bdb2:	e7c9      	b.n	bd48 <read_type_cb+0x34>
    bdb4:	0002a2a9 	.word	0x0002a2a9

0000bdb8 <find_type_cb>:
{
    bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    bdbc:	f8d2 8000 	ldr.w	r8, [r2]
{
    bdc0:	b093      	sub	sp, #76	; 0x4c
    bdc2:	4607      	mov	r7, r0
    bdc4:	460d      	mov	r5, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bdc6:	2600      	movs	r6, #0
    bdc8:	f642 0301 	movw	r3, #10241	; 0x2801
    bdcc:	a902      	add	r1, sp, #8
    bdce:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    bdd0:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bdd4:	f88d 6008 	strb.w	r6, [sp, #8]
{
    bdd8:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bdda:	f8ad 300a 	strh.w	r3, [sp, #10]
    bdde:	f01d ff3f 	bl	29c60 <bt_uuid_cmp>
    bde2:	2800      	cmp	r0, #0
    bde4:	d061      	beq.n	beaa <find_type_cb+0xf2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    bde6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bdea:	a903      	add	r1, sp, #12
    bdec:	6838      	ldr	r0, [r7, #0]
    bdee:	f88d 600c 	strb.w	r6, [sp, #12]
    bdf2:	f8ad 300e 	strh.w	r3, [sp, #14]
    bdf6:	f01d ff33 	bl	29c60 <bt_uuid_cmp>
    bdfa:	b138      	cbz	r0, be0c <find_type_cb+0x54>
		if (data->group &&
    bdfc:	68a3      	ldr	r3, [r4, #8]
    bdfe:	b11b      	cbz	r3, be08 <find_type_cb+0x50>
    be00:	885a      	ldrh	r2, [r3, #2]
    be02:	42aa      	cmp	r2, r5
    be04:	d200      	bcs.n	be08 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    be06:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    be08:	2001      	movs	r0, #1
    be0a:	e009      	b.n	be20 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    be0c:	6861      	ldr	r1, [r4, #4]
    be0e:	4608      	mov	r0, r1
    be10:	f01e fa3c 	bl	2a28c <net_buf_frags_len>
    be14:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
    be18:	1a18      	subs	r0, r3, r0
    be1a:	2803      	cmp	r0, #3
    be1c:	d803      	bhi.n	be26 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    be1e:	2000      	movs	r0, #0
}
    be20:	b013      	add	sp, #76	; 0x4c
    be22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    be26:	4608      	mov	r0, r1
    be28:	f013 ffc6 	bl	1fdb8 <net_buf_frag_last>
    be2c:	4606      	mov	r6, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    be2e:	6860      	ldr	r0, [r4, #4]
    be30:	f01e fa2c 	bl	2a28c <net_buf_frags_len>
    be34:	f8b8 a05e 	ldrh.w	sl, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    be38:	f106 0b08 	add.w	fp, r6, #8
    be3c:	ebaa 0a00 	sub.w	sl, sl, r0
    be40:	4658      	mov	r0, fp
    be42:	f021 fbb3 	bl	2d5ac <net_buf_simple_tailroom>
    be46:	4582      	cmp	sl, r0
    be48:	d232      	bcs.n	beb0 <find_type_cb+0xf8>
    be4a:	6860      	ldr	r0, [r4, #4]
    be4c:	f01e fa1e 	bl	2a28c <net_buf_frags_len>
    be50:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
    be54:	1a18      	subs	r0, r3, r0
	if (!len) {
    be56:	b970      	cbnz	r0, be76 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    be58:	6863      	ldr	r3, [r4, #4]
    be5a:	7998      	ldrb	r0, [r3, #6]
    be5c:	f013 fd3c 	bl	1f8d8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    be60:	2200      	movs	r2, #0
    be62:	2300      	movs	r3, #0
    be64:	f021 fb36 	bl	2d4d4 <net_buf_alloc_fixed>
		if (!frag) {
    be68:	4606      	mov	r6, r0
    be6a:	2800      	cmp	r0, #0
    be6c:	d0d7      	beq.n	be1e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    be6e:	4601      	mov	r1, r0
    be70:	6860      	ldr	r0, [r4, #4]
    be72:	f013 ffe1 	bl	1fe38 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    be76:	2300      	movs	r3, #0
    be78:	9300      	str	r3, [sp, #0]
    be7a:	2310      	movs	r3, #16
    be7c:	f8d7 8004 	ldr.w	r8, [r7, #4]
    be80:	4639      	mov	r1, r7
    be82:	eb0d 0203 	add.w	r2, sp, r3
    be86:	4648      	mov	r0, r9
    be88:	47c0      	blx	r8
	if (read < 0) {
    be8a:	1e07      	subs	r7, r0, #0
    be8c:	db0d      	blt.n	beaa <find_type_cb+0xf2>
	if (read != data->value_len) {
    be8e:	7c22      	ldrb	r2, [r4, #16]
    be90:	68e0      	ldr	r0, [r4, #12]
    be92:	42ba      	cmp	r2, r7
    be94:	d02b      	beq.n	beee <find_type_cb+0x136>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    be96:	4601      	mov	r1, r0
    be98:	a80d      	add	r0, sp, #52	; 0x34
    be9a:	f01d ff0b 	bl	29cb4 <bt_uuid_create>
    be9e:	b958      	cbnz	r0, beb8 <find_type_cb+0x100>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    bea0:	7c22      	ldrb	r2, [r4, #16]
    bea2:	4815      	ldr	r0, [pc, #84]	; (bef8 <find_type_cb+0x140>)
    bea4:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unable to create UUID: size %d", read);
    bea6:	f01b fd14 	bl	278d2 <printk>
	data->group = NULL;
    beaa:	2300      	movs	r3, #0
    beac:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    beae:	e7ab      	b.n	be08 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    beb0:	4658      	mov	r0, fp
    beb2:	f021 fb7b 	bl	2d5ac <net_buf_simple_tailroom>
    beb6:	e7ce      	b.n	be56 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    beb8:	b2fa      	uxtb	r2, r7
    beba:	a904      	add	r1, sp, #16
    bebc:	a808      	add	r0, sp, #32
    bebe:	f01d fef9 	bl	29cb4 <bt_uuid_create>
    bec2:	b918      	cbnz	r0, becc <find_type_cb+0x114>
			BT_WARN("Unable to create UUID: size %d", read);
    bec4:	463a      	mov	r2, r7
    bec6:	2157      	movs	r1, #87	; 0x57
    bec8:	480c      	ldr	r0, [pc, #48]	; (befc <find_type_cb+0x144>)
    beca:	e7ec      	b.n	bea6 <find_type_cb+0xee>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    becc:	a908      	add	r1, sp, #32
    bece:	a80d      	add	r0, sp, #52	; 0x34
    bed0:	f01d fec6 	bl	29c60 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    bed4:	2800      	cmp	r0, #0
    bed6:	d1e8      	bne.n	beaa <find_type_cb+0xf2>
	data->err = 0x00;
    bed8:	2300      	movs	r3, #0
    beda:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    bedc:	2104      	movs	r1, #4
    bede:	f106 0008 	add.w	r0, r6, #8
    bee2:	f014 f85d 	bl	1ffa0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    bee6:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    bee8:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    beea:	8045      	strh	r5, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    beec:	e78c      	b.n	be08 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    beee:	a904      	add	r1, sp, #16
    bef0:	f022 f9cd 	bl	2e28e <memcmp>
    bef4:	e7ee      	b.n	bed4 <find_type_cb+0x11c>
    bef6:	bf00      	nop
    bef8:	00032457 	.word	0x00032457
    befc:	0003247b 	.word	0x0003247b

0000bf00 <chan_send>:
{
    bf00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    bf04:	688b      	ldr	r3, [r1, #8]
    bf06:	781b      	ldrb	r3, [r3, #0]
    bf08:	2bd2      	cmp	r3, #210	; 0xd2
{
    bf0a:	4605      	mov	r5, r0
    bf0c:	460c      	mov	r4, r1
    bf0e:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    bf10:	d110      	bne.n	bf34 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
    bf12:	6803      	ldr	r3, [r0, #0]
    bf14:	6818      	ldr	r0, [r3, #0]
    bf16:	f01e ff89 	bl	2ae2c <bt_smp_sign>
		if (err) {
    bf1a:	4606      	mov	r6, r0
    bf1c:	b150      	cbz	r0, bf34 <chan_send+0x34>
			BT_ERR("Error signing data");
    bf1e:	2145      	movs	r1, #69	; 0x45
    bf20:	4824      	ldr	r0, [pc, #144]	; (bfb4 <chan_send+0xb4>)
    bf22:	f01b fcd6 	bl	278d2 <printk>
		net_buf_unref(buf);
    bf26:	4620      	mov	r0, r4
    bf28:	f013 feea 	bl	1fd00 <net_buf_unref>
}
    bf2c:	4630      	mov	r0, r6
    bf2e:	b003      	add	sp, #12
    bf30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    bf34:	f104 0008 	add.w	r0, r4, #8
    bf38:	f021 fb34 	bl	2d5a4 <net_buf_simple_headroom>
	state->len = buf->len;
    bf3c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    bf40:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    bf42:	f1b9 0f00 	cmp.w	r9, #0
    bf46:	d10a      	bne.n	bf5e <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
    bf48:	68a3      	ldr	r3, [r4, #8]
    bf4a:	7818      	ldrb	r0, [r3, #0]
    bf4c:	f01e f9be 	bl	2a2cc <att_op_get_type>
    bf50:	3801      	subs	r0, #1
    bf52:	b2c0      	uxtb	r0, r0
    bf54:	2804      	cmp	r0, #4
    bf56:	bf9c      	itt	ls
    bf58:	4b17      	ldrls	r3, [pc, #92]	; (bfb8 <chan_send+0xb8>)
    bf5a:	f853 9020 	ldrls.w	r9, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    bf5e:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    bf60:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    bf64:	4620      	mov	r0, r4
    bf66:	681e      	ldr	r6, [r3, #0]
    bf68:	f013 ff0e 	bl	1fd88 <net_buf_ref>
    bf6c:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
    bf70:	4b12      	ldr	r3, [pc, #72]	; (bfbc <chan_send+0xbc>)
    bf72:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    bf74:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    bf76:	d019      	beq.n	bfac <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
    bf78:	4b11      	ldr	r3, [pc, #68]	; (bfc0 <chan_send+0xc0>)
    bf7a:	4299      	cmp	r1, r3
    bf7c:	d018      	beq.n	bfb0 <chan_send+0xb0>
		return att_sent;
    bf7e:	f8df c054 	ldr.w	ip, [pc, #84]	; bfd4 <chan_send+0xd4>
    bf82:	4b10      	ldr	r3, [pc, #64]	; (bfc4 <chan_send+0xc4>)
    bf84:	4810      	ldr	r0, [pc, #64]	; (bfc8 <chan_send+0xc8>)
    bf86:	4561      	cmp	r1, ip
    bf88:	bf18      	it	ne
    bf8a:	4603      	movne	r3, r0
				&chan->chan.chan);
    bf8c:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    bf8e:	4630      	mov	r0, r6
    bf90:	9500      	str	r5, [sp, #0]
    bf92:	2104      	movs	r1, #4
    bf94:	f01e f925 	bl	2a1e2 <bt_l2cap_send_cb>
	if (!err) {
    bf98:	4606      	mov	r6, r0
    bf9a:	2800      	cmp	r0, #0
    bf9c:	d0c3      	beq.n	bf26 <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
    bf9e:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    bfa0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    bfa4:	fa13 f787 	uxtah	r7, r3, r7
    bfa8:	60a7      	str	r7, [r4, #8]
	buf->len = state->len;
    bfaa:	e7bf      	b.n	bf2c <chan_send+0x2c>
		return att_rsp_sent;
    bfac:	4b07      	ldr	r3, [pc, #28]	; (bfcc <chan_send+0xcc>)
    bfae:	e7ed      	b.n	bf8c <chan_send+0x8c>
		return att_cfm_sent;
    bfb0:	4b07      	ldr	r3, [pc, #28]	; (bfd0 <chan_send+0xd0>)
    bfb2:	e7eb      	b.n	bf8c <chan_send+0x8c>
    bfb4:	0003243f 	.word	0x0003243f
    bfb8:	0002f8e4 	.word	0x0002f8e4
    bfbc:	0002a59d 	.word	0x0002a59d
    bfc0:	0002a5b9 	.word	0x0002a5b9
    bfc4:	0000bc41 	.word	0x0000bc41
    bfc8:	0002a29d 	.word	0x0002a29d
    bfcc:	0000bc31 	.word	0x0000bc31
    bfd0:	0000bc21 	.word	0x0000bc21
    bfd4:	0000c0dd 	.word	0x0000c0dd

0000bfd8 <att_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    bfd8:	7a83      	ldrb	r3, [r0, #10]
    bfda:	2b07      	cmp	r3, #7
{
    bfdc:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    bfde:	d005      	beq.n	bfec <att_get+0x14>
		BT_WARN("Not connected");
    bfe0:	480d      	ldr	r0, [pc, #52]	; (c018 <att_get+0x40>)
    bfe2:	2157      	movs	r1, #87	; 0x57
		BT_WARN("ATT channel flagged as disconnected");
    bfe4:	f01b fc75 	bl	278d2 <printk>
		return NULL;
    bfe8:	2400      	movs	r4, #0
    bfea:	e008      	b.n	bffe <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    bfec:	2104      	movs	r1, #4
    bfee:	f01e f91c 	bl	2a22a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    bff2:	4604      	mov	r4, r0
    bff4:	b928      	cbnz	r0, c002 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
    bff6:	2145      	movs	r1, #69	; 0x45
    bff8:	4808      	ldr	r0, [pc, #32]	; (c01c <att_get+0x44>)
    bffa:	f01b fc6a 	bl	278d2 <printk>
}
    bffe:	4620      	mov	r0, r4
    c000:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    c002:	2102      	movs	r1, #2
    c004:	30c0      	adds	r0, #192	; 0xc0
    c006:	f01e f9ae 	bl	2a366 <atomic_test_bit>
    c00a:	b110      	cbz	r0, c012 <att_get+0x3a>
		BT_WARN("ATT channel flagged as disconnected");
    c00c:	2157      	movs	r1, #87	; 0x57
    c00e:	4804      	ldr	r0, [pc, #16]	; (c020 <att_get+0x48>)
    c010:	e7e8      	b.n	bfe4 <att_get+0xc>
	return att_chan->att;
    c012:	f854 4c08 	ldr.w	r4, [r4, #-8]
    c016:	e7f2      	b.n	bffe <att_get+0x26>
    c018:	00032241 	.word	0x00032241
    c01c:	00032254 	.word	0x00032254
    c020:	00032274 	.word	0x00032274

0000c024 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    c024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c026:	2300      	movs	r3, #0
{
    c028:	4607      	mov	r7, r0
    c02a:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c02c:	2200      	movs	r2, #0
    c02e:	4669      	mov	r1, sp
    c030:	4825      	ldr	r0, [pc, #148]	; (c0c8 <bt_att_accept+0xa4>)
    c032:	f017 fc03 	bl	2383c <k_mem_slab_alloc>
    c036:	4605      	mov	r5, r0
    c038:	b148      	cbz	r0, c04e <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
    c03a:	4824      	ldr	r0, [pc, #144]	; (c0cc <bt_att_accept+0xa8>)
    c03c:	463a      	mov	r2, r7
    c03e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c040:	f01b fc47 	bl	278d2 <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    c044:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    c048:	4628      	mov	r0, r5
    c04a:	b003      	add	sp, #12
    c04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
    c04e:	4601      	mov	r1, r0
    c050:	2230      	movs	r2, #48	; 0x30
    c052:	9800      	ldr	r0, [sp, #0]
    c054:	f022 f964 	bl	2e320 <memset>
	att->conn = conn;
    c058:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c05a:	481d      	ldr	r0, [pc, #116]	; (c0d0 <bt_att_accept+0xac>)
	list->tail = NULL;
    c05c:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
    c05e:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
    c062:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    c066:	2200      	movs	r2, #0
    c068:	2300      	movs	r3, #0
    c06a:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    c06c:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c06e:	f017 fbe5 	bl	2383c <k_mem_slab_alloc>
    c072:	4605      	mov	r5, r0
    c074:	b118      	cbz	r0, c07e <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c076:	6822      	ldr	r2, [r4, #0]
    c078:	4816      	ldr	r0, [pc, #88]	; (c0d4 <bt_att_accept+0xb0>)
    c07a:	2145      	movs	r1, #69	; 0x45
    c07c:	e7e0      	b.n	c040 <bt_att_accept+0x1c>
    c07e:	4601      	mov	r1, r0
    c080:	f44f 72a0 	mov.w	r2, #320	; 0x140
    c084:	9801      	ldr	r0, [sp, #4]
    c086:	f022 f94b 	bl	2e320 <memset>
	chan->chan.chan.ops = &ops;
    c08a:	9801      	ldr	r0, [sp, #4]
    c08c:	4b12      	ldr	r3, [pc, #72]	; (c0d8 <bt_att_accept+0xb4>)
    c08e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    c090:	30d0      	adds	r0, #208	; 0xd0
    c092:	f021 ff70 	bl	2df76 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    c096:	9801      	ldr	r0, [sp, #4]
    c098:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
    c09c:	2208      	movs	r2, #8
    c09e:	4611      	mov	r1, r2
    c0a0:	f021 ffcf 	bl	2e042 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c0a4:	9b01      	ldr	r3, [sp, #4]
    c0a6:	f3bf 8f5b 	dmb	ish
    c0aa:	33c8      	adds	r3, #200	; 0xc8
    c0ac:	e853 2f00 	ldrex	r2, [r3]
    c0b0:	e843 5100 	strex	r1, r5, [r3]
    c0b4:	2900      	cmp	r1, #0
    c0b6:	d1f9      	bne.n	c0ac <bt_att_accept+0x88>
    c0b8:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    c0bc:	9b01      	ldr	r3, [sp, #4]
    c0be:	f843 4b08 	str.w	r4, [r3], #8
	*ch = &chan->chan.chan;
    c0c2:	6033      	str	r3, [r6, #0]
	return 0;
    c0c4:	e7c0      	b.n	c048 <bt_att_accept+0x24>
    c0c6:	bf00      	nop
    c0c8:	20001da4 	.word	0x20001da4
    c0cc:	000322ca 	.word	0x000322ca
    c0d0:	20001dc0 	.word	0x20001dc0
    c0d4:	000322f4 	.word	0x000322f4
    c0d8:	200012b4 	.word	0x200012b4

0000c0dc <chan_req_sent>:
	if (chan->req) {
    c0dc:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    c0e0:	b13b      	cbz	r3, c0f2 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c0e2:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
    c0e6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c0ea:	2300      	movs	r3, #0
    c0ec:	4801      	ldr	r0, [pc, #4]	; (c0f4 <chan_req_sent+0x18>)
    c0ee:	f019 b9d3 	b.w	25498 <k_delayed_work_submit_to_queue>
}
    c0f2:	4770      	bx	lr
    c0f4:	20003028 	.word	0x20003028

0000c0f8 <bt_att_chan_send_rsp.constprop.24>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    c0f8:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    c0fa:	4a07      	ldr	r2, [pc, #28]	; (c118 <bt_att_chan_send_rsp.constprop.24+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    c0fc:	4604      	mov	r4, r0
    c0fe:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    c100:	f7ff fefe 	bl	bf00 <chan_send>
	if (err) {
    c104:	b130      	cbz	r0, c114 <bt_att_chan_send_rsp.constprop.24+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    c106:	4629      	mov	r1, r5
    c108:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
    c10c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    c110:	f013 bdc8 	b.w	1fca4 <net_buf_put>
}
    c114:	bd38      	pop	{r3, r4, r5, pc}
    c116:	bf00      	nop
    c118:	0002a59d 	.word	0x0002a59d

0000c11c <bt_att_connected>:
{
    c11c:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c11e:	2104      	movs	r1, #4
{
    c120:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c122:	6800      	ldr	r0, [r0, #0]
    c124:	f01e f876 	bl	2a214 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
    c128:	4605      	mov	r5, r0
    c12a:	b950      	cbnz	r0, c142 <bt_att_connected+0x26>
    c12c:	4918      	ldr	r1, [pc, #96]	; (c190 <bt_att_connected+0x74>)
    c12e:	4819      	ldr	r0, [pc, #100]	; (c194 <bt_att_connected+0x78>)
    c130:	f640 2248 	movw	r2, #2632	; 0xa48
    c134:	f01b fbcd 	bl	278d2 <printk>
    c138:	f640 2148 	movw	r1, #2632	; 0xa48
    c13c:	4814      	ldr	r0, [pc, #80]	; (c190 <bt_att_connected+0x74>)
    c13e:	f01b fe41 	bl	27dc4 <assert_post_action>
	struct bt_att *att = att_chan->att;
    c142:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    c146:	6aab      	ldr	r3, [r5, #40]	; 0x28
    c148:	b91b      	cbnz	r3, c152 <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
    c14a:	f105 000c 	add.w	r0, r5, #12
    c14e:	f021 ff12 	bl	2df76 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    c152:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
    c154:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
    c158:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
    c15a:	f504 739a 	add.w	r3, r4, #308	; 0x134
	list->head = node;
    c15e:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
    c160:	b902      	cbnz	r2, c164 <bt_att_connected+0x48>
	list->tail = node;
    c162:	62eb      	str	r3, [r5, #44]	; 0x2c
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    c164:	2103      	movs	r1, #3
    c166:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    c16a:	f01e f8fc 	bl	2a366 <atomic_test_bit>
    c16e:	b920      	cbnz	r0, c17a <bt_att_connected+0x5e>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c170:	2317      	movs	r3, #23
    c172:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c176:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c17a:	2230      	movs	r2, #48	; 0x30
    c17c:	2100      	movs	r1, #0
    c17e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    c182:	f022 f8cd 	bl	2e320 <memset>
    c186:	4b04      	ldr	r3, [pc, #16]	; (c198 <bt_att_connected+0x7c>)
    c188:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
    c18c:	bd38      	pop	{r3, r4, r5, pc}
    c18e:	bf00      	nop
    c190:	00032348 	.word	0x00032348
    c194:	0003067f 	.word	0x0003067f
    c198:	0000cabd 	.word	0x0000cabd

0000c19c <bt_att_chan_req_send>:
{
    c19c:	b570      	push	{r4, r5, r6, lr}
    c19e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
    c1a0:	4604      	mov	r4, r0
    c1a2:	b950      	cbnz	r0, c1ba <bt_att_chan_req_send+0x1e>
    c1a4:	4924      	ldr	r1, [pc, #144]	; (c238 <bt_att_chan_req_send+0x9c>)
    c1a6:	4825      	ldr	r0, [pc, #148]	; (c23c <bt_att_chan_req_send+0xa0>)
    c1a8:	f240 2237 	movw	r2, #567	; 0x237
    c1ac:	f01b fb91 	bl	278d2 <printk>
    c1b0:	f240 2137 	movw	r1, #567	; 0x237
    c1b4:	4820      	ldr	r0, [pc, #128]	; (c238 <bt_att_chan_req_send+0x9c>)
    c1b6:	f01b fe05 	bl	27dc4 <assert_post_action>
	__ASSERT_NO_MSG(req);
    c1ba:	b955      	cbnz	r5, c1d2 <bt_att_chan_req_send+0x36>
    c1bc:	491e      	ldr	r1, [pc, #120]	; (c238 <bt_att_chan_req_send+0x9c>)
    c1be:	481f      	ldr	r0, [pc, #124]	; (c23c <bt_att_chan_req_send+0xa0>)
    c1c0:	f44f 720e 	mov.w	r2, #568	; 0x238
    c1c4:	f01b fb85 	bl	278d2 <printk>
    c1c8:	f44f 710e 	mov.w	r1, #568	; 0x238
    c1cc:	481a      	ldr	r0, [pc, #104]	; (c238 <bt_att_chan_req_send+0x9c>)
    c1ce:	f01b fdf9 	bl	27dc4 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
    c1d2:	686b      	ldr	r3, [r5, #4]
    c1d4:	b953      	cbnz	r3, c1ec <bt_att_chan_req_send+0x50>
    c1d6:	4918      	ldr	r1, [pc, #96]	; (c238 <bt_att_chan_req_send+0x9c>)
    c1d8:	4818      	ldr	r0, [pc, #96]	; (c23c <bt_att_chan_req_send+0xa0>)
    c1da:	f240 2239 	movw	r2, #569	; 0x239
    c1de:	f01b fb78 	bl	278d2 <printk>
    c1e2:	f240 2139 	movw	r1, #569	; 0x239
    c1e6:	4814      	ldr	r0, [pc, #80]	; (c238 <bt_att_chan_req_send+0x9c>)
    c1e8:	f01b fdec 	bl	27dc4 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
    c1ec:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    c1f0:	b153      	cbz	r3, c208 <bt_att_chan_req_send+0x6c>
    c1f2:	4911      	ldr	r1, [pc, #68]	; (c238 <bt_att_chan_req_send+0x9c>)
    c1f4:	4811      	ldr	r0, [pc, #68]	; (c23c <bt_att_chan_req_send+0xa0>)
    c1f6:	f240 223a 	movw	r2, #570	; 0x23a
    c1fa:	f01b fb6a 	bl	278d2 <printk>
    c1fe:	f240 213a 	movw	r1, #570	; 0x23a
    c202:	480d      	ldr	r0, [pc, #52]	; (c238 <bt_att_chan_req_send+0x9c>)
    c204:	f01b fdde 	bl	27dc4 <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
    c208:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
    c20c:	2200      	movs	r2, #0
    c20e:	2300      	movs	r3, #0
    c210:	4630      	mov	r0, r6
    c212:	f018 ff0f 	bl	25034 <z_impl_k_sem_take>
    c216:	2800      	cmp	r0, #0
    c218:	db0a      	blt.n	c230 <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
    c21a:	4620      	mov	r0, r4
    c21c:	4629      	mov	r1, r5
    c21e:	f01e f9d9 	bl	2a5d4 <chan_req_send>
	if (err < 0) {
    c222:	1e04      	subs	r4, r0, #0
    c224:	da02      	bge.n	c22c <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
    c226:	4630      	mov	r0, r6
    c228:	f018 fec8 	bl	24fbc <z_impl_k_sem_give>
}
    c22c:	4620      	mov	r0, r4
    c22e:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    c230:	f06f 040a 	mvn.w	r4, #10
    c234:	e7fa      	b.n	c22c <bt_att_chan_req_send+0x90>
    c236:	bf00      	nop
    c238:	00032348 	.word	0x00032348
    c23c:	0003067f 	.word	0x0003067f

0000c240 <att_write_cmd>:
{
    c240:	b5f0      	push	{r4, r5, r6, r7, lr}
    c242:	4604      	mov	r4, r0
    c244:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    c246:	f101 0008 	add.w	r0, r1, #8
    c24a:	460d      	mov	r5, r1
    c24c:	f021 f978 	bl	2d540 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c250:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
    c252:	68af      	ldr	r7, [r5, #8]
    c254:	89ad      	ldrh	r5, [r5, #12]
    c256:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c258:	2100      	movs	r1, #0
    c25a:	6818      	ldr	r0, [r3, #0]
    c25c:	f01e fd9b 	bl	2ad96 <bt_gatt_change_aware>
    c260:	b1f8      	cbz	r0, c2a2 <att_write_cmd+0x62>
	if (!handle) {
    c262:	b306      	cbz	r6, c2a6 <att_write_cmd+0x66>
	(void)memset(&data, 0, sizeof(data));
    c264:	2214      	movs	r2, #20
    c266:	2100      	movs	r1, #0
    c268:	a801      	add	r0, sp, #4
    c26a:	f022 f859 	bl	2e320 <memset>
	data.conn = chan->att->conn;
    c26e:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c270:	4a0e      	ldr	r2, [pc, #56]	; (c2ac <att_write_cmd+0x6c>)
	data.conn = chan->att->conn;
    c272:	681b      	ldr	r3, [r3, #0]
    c274:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c276:	2301      	movs	r3, #1
    c278:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c27c:	4631      	mov	r1, r6
    c27e:	466b      	mov	r3, sp
    c280:	4630      	mov	r0, r6
	data.value = value;
    c282:	9703      	str	r7, [sp, #12]
	data.len = len;
    c284:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c288:	f01e f876 	bl	2a378 <bt_gatt_foreach_attr>
	if (data.err) {
    c28c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c290:	b923      	cbnz	r3, c29c <att_write_cmd+0x5c>
	if (data.buf) {
    c292:	9901      	ldr	r1, [sp, #4]
    c294:	b111      	cbz	r1, c29c <att_write_cmd+0x5c>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c296:	4620      	mov	r0, r4
    c298:	f7ff ff2e 	bl	c0f8 <bt_att_chan_send_rsp.constprop.24>
    c29c:	2000      	movs	r0, #0
}
    c29e:	b007      	add	sp, #28
    c2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c2a2:	2012      	movs	r0, #18
    c2a4:	e7fb      	b.n	c29e <att_write_cmd+0x5e>
		return BT_ATT_ERR_INVALID_HANDLE;
    c2a6:	2001      	movs	r0, #1
    c2a8:	e7f9      	b.n	c29e <att_write_cmd+0x5e>
    c2aa:	bf00      	nop
    c2ac:	0002a665 	.word	0x0002a665

0000c2b0 <bt_att_chan_create_pdu>:
{
    c2b0:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    c2b2:	1c53      	adds	r3, r2, #1
    c2b4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    c2b8:	4293      	cmp	r3, r2
{
    c2ba:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    c2bc:	d906      	bls.n	c2cc <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    c2be:	2157      	movs	r1, #87	; 0x57
    c2c0:	4813      	ldr	r0, [pc, #76]	; (c310 <bt_att_chan_create_pdu+0x60>)
    c2c2:	f01b fb06 	bl	278d2 <printk>
		return NULL;
    c2c6:	2400      	movs	r4, #0
}
    c2c8:	4620      	mov	r0, r4
    c2ca:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    c2cc:	4608      	mov	r0, r1
    c2ce:	f01d fffd 	bl	2a2cc <att_op_get_type>
    c2d2:	2802      	cmp	r0, #2
    c2d4:	d001      	beq.n	c2da <bt_att_chan_create_pdu+0x2a>
    c2d6:	2804      	cmp	r0, #4
    c2d8:	d10e      	bne.n	c2f8 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    c2da:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c2de:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    c2e0:	2100      	movs	r1, #0
    c2e2:	4608      	mov	r0, r1
    c2e4:	f01d ff7a 	bl	2a1dc <bt_l2cap_create_pdu_timeout>
    c2e8:	4604      	mov	r4, r0
	if (!buf) {
    c2ea:	b950      	cbnz	r0, c302 <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    c2ec:	462a      	mov	r2, r5
    c2ee:	2145      	movs	r1, #69	; 0x45
    c2f0:	4808      	ldr	r0, [pc, #32]	; (c314 <bt_att_chan_create_pdu+0x64>)
    c2f2:	f01b faee 	bl	278d2 <printk>
		return NULL;
    c2f6:	e7e7      	b.n	c2c8 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
    c2f8:	f04f 32ff 	mov.w	r2, #4294967295
    c2fc:	f04f 33ff 	mov.w	r3, #4294967295
    c300:	e7ee      	b.n	c2e0 <bt_att_chan_create_pdu+0x30>
	return net_buf_simple_add(&buf->b, len);
    c302:	2101      	movs	r1, #1
    c304:	3008      	adds	r0, #8
    c306:	f013 fe4b 	bl	1ffa0 <net_buf_simple_add>
	hdr->code = op;
    c30a:	7005      	strb	r5, [r0, #0]
	return buf;
    c30c:	e7dc      	b.n	c2c8 <bt_att_chan_create_pdu+0x18>
    c30e:	bf00      	nop
    c310:	0003231e 	.word	0x0003231e
    c314:	0003213c 	.word	0x0003213c

0000c318 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    c318:	898b      	ldrh	r3, [r1, #12]
{
    c31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c31e:	4604      	mov	r4, r0
    c320:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    c322:	b933      	cbnz	r3, c332 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
    c324:	483c      	ldr	r0, [pc, #240]	; (c418 <bt_att_recv+0x100>)
    c326:	2145      	movs	r1, #69	; 0x45
			BT_WARN("Ignoring unexpected indication");
    c328:	f01b fad3 	bl	278d2 <printk>
}
    c32c:	2000      	movs	r0, #0
    c32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    c332:	2101      	movs	r1, #1
    c334:	f108 0008 	add.w	r0, r8, #8
    c338:	f013 fe14 	bl	1ff64 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    c33c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    c340:	4605      	mov	r5, r0
    c342:	2b00      	cmp	r3, #0
    c344:	d0f2      	beq.n	c32c <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
    c346:	4935      	ldr	r1, [pc, #212]	; (c41c <bt_att_recv+0x104>)
    c348:	7802      	ldrb	r2, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    c34a:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c34e:	2300      	movs	r3, #0
    c350:	4608      	mov	r0, r1
		if (hdr->code == handlers[i].op) {
    c352:	f811 7033 	ldrb.w	r7, [r1, r3, lsl #3]
    c356:	4297      	cmp	r7, r2
    c358:	d117      	bne.n	c38a <bt_att_recv+0x72>
		if (handler->type == ATT_REQUEST &&
    c35a:	00db      	lsls	r3, r3, #3
    c35c:	4419      	add	r1, r3
    c35e:	788f      	ldrb	r7, [r1, #2]
    c360:	2f01      	cmp	r7, #1
    c362:	d127      	bne.n	c3b4 <bt_att_recv+0x9c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c364:	f3bf 8f5b 	dmb	ish
    c368:	34c0      	adds	r4, #192	; 0xc0
    c36a:	e854 2f00 	ldrex	r2, [r4]
    c36e:	f042 0101 	orr.w	r1, r2, #1
    c372:	e844 1c00 	strex	ip, r1, [r4]
    c376:	f1bc 0f00 	cmp.w	ip, #0
    c37a:	d1f6      	bne.n	c36a <bt_att_recv+0x52>
    c37c:	f3bf 8f5b 	dmb	ish
    c380:	07d1      	lsls	r1, r2, #31
    c382:	d52c      	bpl.n	c3de <bt_att_recv+0xc6>
			BT_WARN("Ignoring unexpected request");
    c384:	2157      	movs	r1, #87	; 0x57
    c386:	4826      	ldr	r0, [pc, #152]	; (c420 <bt_att_recv+0x108>)
    c388:	e7ce      	b.n	c328 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c38a:	3301      	adds	r3, #1
    c38c:	2b0d      	cmp	r3, #13
    c38e:	d1e0      	bne.n	c352 <bt_att_recv+0x3a>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    c390:	2157      	movs	r1, #87	; 0x57
    c392:	4824      	ldr	r0, [pc, #144]	; (c424 <bt_att_recv+0x10c>)
    c394:	f01b fa9d 	bl	278d2 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    c398:	7829      	ldrb	r1, [r5, #0]
    c39a:	4608      	mov	r0, r1
    c39c:	f01d ff96 	bl	2a2cc <att_op_get_type>
    c3a0:	2800      	cmp	r0, #0
    c3a2:	d0c3      	beq.n	c32c <bt_att_recv+0x14>
	if (!req) {
    c3a4:	2900      	cmp	r1, #0
    c3a6:	d0c1      	beq.n	c32c <bt_att_recv+0x14>
    c3a8:	2306      	movs	r3, #6
    c3aa:	2200      	movs	r2, #0
    c3ac:	4630      	mov	r0, r6
    c3ae:	f01e f9f1 	bl	2a794 <send_err_rsp.part.12>
    c3b2:	e7bb      	b.n	c32c <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
    c3b4:	2f05      	cmp	r7, #5
    c3b6:	d112      	bne.n	c3de <bt_att_recv+0xc6>
    c3b8:	f3bf 8f5b 	dmb	ish
    c3bc:	34c0      	adds	r4, #192	; 0xc0
    c3be:	e854 2f00 	ldrex	r2, [r4]
    c3c2:	f042 0102 	orr.w	r1, r2, #2
    c3c6:	e844 1c00 	strex	ip, r1, [r4]
    c3ca:	f1bc 0f00 	cmp.w	ip, #0
    c3ce:	d1f6      	bne.n	c3be <bt_att_recv+0xa6>
    c3d0:	f3bf 8f5b 	dmb	ish
    c3d4:	0792      	lsls	r2, r2, #30
    c3d6:	d502      	bpl.n	c3de <bt_att_recv+0xc6>
			BT_WARN("Ignoring unexpected indication");
    c3d8:	2157      	movs	r1, #87	; 0x57
    c3da:	4813      	ldr	r0, [pc, #76]	; (c428 <bt_att_recv+0x110>)
    c3dc:	e7a4      	b.n	c328 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
    c3de:	4403      	add	r3, r0
    c3e0:	f8b8 200c 	ldrh.w	r2, [r8, #12]
    c3e4:	7859      	ldrb	r1, [r3, #1]
    c3e6:	4291      	cmp	r1, r2
    c3e8:	d908      	bls.n	c3fc <bt_att_recv+0xe4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    c3ea:	782b      	ldrb	r3, [r5, #0]
    c3ec:	480f      	ldr	r0, [pc, #60]	; (c42c <bt_att_recv+0x114>)
    c3ee:	2145      	movs	r1, #69	; 0x45
    c3f0:	f01b fa6f 	bl	278d2 <printk>
	if (handler->type == ATT_REQUEST && err) {
    c3f4:	2f01      	cmp	r7, #1
    c3f6:	d199      	bne.n	c32c <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
    c3f8:	2304      	movs	r3, #4
    c3fa:	e008      	b.n	c40e <bt_att_recv+0xf6>
		err = handler->func(att_chan, buf);
    c3fc:	685b      	ldr	r3, [r3, #4]
    c3fe:	4641      	mov	r1, r8
    c400:	4630      	mov	r0, r6
    c402:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    c404:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    c406:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    c408:	d190      	bne.n	c32c <bt_att_recv+0x14>
    c40a:	2800      	cmp	r0, #0
    c40c:	d08e      	beq.n	c32c <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
    c40e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    c410:	2900      	cmp	r1, #0
    c412:	d08b      	beq.n	c32c <bt_att_recv+0x14>
    c414:	e7c9      	b.n	c3aa <bt_att_recv+0x92>
    c416:	bf00      	nop
    c418:	00032397 	.word	0x00032397
    c41c:	0002f8f8 	.word	0x0002f8f8
    c420:	000323b7 	.word	0x000323b7
    c424:	00032420 	.word	0x00032420
    c428:	000323d8 	.word	0x000323d8
    c42c:	000323fc 	.word	0x000323fc

0000c430 <att_write_req>:
{
    c430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c434:	4605      	mov	r5, r0
    c436:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    c438:	f101 0008 	add.w	r0, r1, #8
    c43c:	460c      	mov	r4, r1
    c43e:	f021 f87f 	bl	2d540 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c442:	682b      	ldr	r3, [r5, #0]
			     handle, 0, buf->data, buf->len);
    c444:	f8d4 9008 	ldr.w	r9, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    c448:	89a4      	ldrh	r4, [r4, #12]
    c44a:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c44c:	2101      	movs	r1, #1
    c44e:	6818      	ldr	r0, [r3, #0]
    c450:	f01e fca1 	bl	2ad96 <bt_gatt_change_aware>
    c454:	2800      	cmp	r0, #0
    c456:	d03f      	beq.n	c4d8 <att_write_req+0xa8>
	if (!handle) {
    c458:	2e00      	cmp	r6, #0
    c45a:	d03f      	beq.n	c4dc <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
    c45c:	2218      	movs	r2, #24
    c45e:	2100      	movs	r1, #0
    c460:	4668      	mov	r0, sp
    c462:	f021 ff5d 	bl	2e320 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    c466:	2200      	movs	r2, #0
    c468:	2113      	movs	r1, #19
    c46a:	4628      	mov	r0, r5
    c46c:	f7ff ff20 	bl	c2b0 <bt_att_chan_create_pdu>
    c470:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    c472:	b378      	cbz	r0, c4d4 <att_write_req+0xa4>
	data.conn = chan->att->conn;
    c474:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c476:	4a1a      	ldr	r2, [pc, #104]	; (c4e0 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
    c478:	681b      	ldr	r3, [r3, #0]
    c47a:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c47c:	2301      	movs	r3, #1
    c47e:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
    c482:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    c486:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c488:	466b      	mov	r3, sp
    c48a:	4631      	mov	r1, r6
    c48c:	4630      	mov	r0, r6
	data.len = len;
    c48e:	f8ad 4010 	strh.w	r4, [sp, #16]
	data.req = req;
    c492:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    c496:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    c49a:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c49e:	f01d ff6b 	bl	2a378 <bt_gatt_foreach_attr>
	if (data.err) {
    c4a2:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c4a6:	b174      	cbz	r4, c4c6 <att_write_req+0x96>
			net_buf_unref(data.buf);
    c4a8:	9801      	ldr	r0, [sp, #4]
    c4aa:	f013 fc29 	bl	1fd00 <net_buf_unref>
	if (!req) {
    c4ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c4b2:	4632      	mov	r2, r6
    c4b4:	4641      	mov	r1, r8
    c4b6:	4628      	mov	r0, r5
    c4b8:	f01e f96c 	bl	2a794 <send_err_rsp.part.12>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    c4bc:	463c      	mov	r4, r7
}
    c4be:	4620      	mov	r0, r4
    c4c0:	b007      	add	sp, #28
    c4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    c4c6:	9901      	ldr	r1, [sp, #4]
    c4c8:	2900      	cmp	r1, #0
    c4ca:	d0f8      	beq.n	c4be <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c4cc:	4628      	mov	r0, r5
    c4ce:	f7ff fe13 	bl	c0f8 <bt_att_chan_send_rsp.constprop.24>
    c4d2:	e7f4      	b.n	c4be <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
    c4d4:	240e      	movs	r4, #14
    c4d6:	e7f2      	b.n	c4be <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c4d8:	2412      	movs	r4, #18
    c4da:	e7f0      	b.n	c4be <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
    c4dc:	2401      	movs	r4, #1
    c4de:	e7ee      	b.n	c4be <att_write_req+0x8e>
    c4e0:	0002a665 	.word	0x0002a665

0000c4e4 <bt_att_create_pdu>:
{
    c4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4e6:	460f      	mov	r7, r1
    c4e8:	4616      	mov	r6, r2
	att = att_get(conn);
    c4ea:	f7ff fd75 	bl	bfd8 <att_get>
	if (!att) {
    c4ee:	b198      	cbz	r0, c518 <bt_att_create_pdu+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c4f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
	return list->head;
    c4f2:	1c75      	adds	r5, r6, #1
    c4f4:	b15b      	cbz	r3, c50e <bt_att_create_pdu+0x2a>
    c4f6:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
    c4fa:	d008      	beq.n	c50e <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c4fc:	681b      	ldr	r3, [r3, #0]
    c4fe:	b10b      	cbz	r3, c504 <bt_att_create_pdu+0x20>
    c500:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    c504:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    c508:	4295      	cmp	r5, r2
    c50a:	d907      	bls.n	c51c <bt_att_create_pdu+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c50c:	b963      	cbnz	r3, c528 <bt_att_create_pdu+0x44>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    c50e:	462a      	mov	r2, r5
    c510:	2157      	movs	r1, #87	; 0x57
    c512:	4809      	ldr	r0, [pc, #36]	; (c538 <bt_att_create_pdu+0x54>)
    c514:	f01b f9dd 	bl	278d2 <printk>
}
    c518:	2000      	movs	r0, #0
    c51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    c51c:	4632      	mov	r2, r6
    c51e:	4639      	mov	r1, r7
}
    c520:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    c524:	f7ff bec4 	b.w	c2b0 <bt_att_chan_create_pdu>
    c528:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c52c:	b10c      	cbz	r4, c532 <bt_att_create_pdu+0x4e>
    c52e:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
    c532:	4618      	mov	r0, r3
    c534:	4623      	mov	r3, r4
    c536:	e7e5      	b.n	c504 <bt_att_create_pdu+0x20>
    c538:	00032377 	.word	0x00032377

0000c53c <att_read_group_req>:
{
    c53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    c540:	7b0c      	ldrb	r4, [r1, #12]
    c542:	3c04      	subs	r4, #4
    c544:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    c546:	2c02      	cmp	r4, #2
{
    c548:	4606      	mov	r6, r0
    c54a:	b08c      	sub	sp, #48	; 0x30
    c54c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    c54e:	d001      	beq.n	c554 <att_read_group_req+0x18>
    c550:	2c10      	cmp	r4, #16
    c552:	d16e      	bne.n	c632 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    c554:	2104      	movs	r1, #4
    c556:	3008      	adds	r0, #8
    c558:	f013 fd04 	bl	1ff64 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c55c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    c560:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    c562:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c564:	1d01      	adds	r1, r0, #4
    c566:	4622      	mov	r2, r4
    c568:	4640      	mov	r0, r8
    c56a:	f01d fba3 	bl	29cb4 <bt_uuid_create>
    c56e:	2800      	cmp	r0, #0
    c570:	d061      	beq.n	c636 <att_read_group_req+0xfa>
	if (!start || !end) {
    c572:	2d00      	cmp	r5, #0
    c574:	d03a      	beq.n	c5ec <att_read_group_req+0xb0>
    c576:	2400      	movs	r4, #0
    c578:	2f00      	cmp	r7, #0
    c57a:	d036      	beq.n	c5ea <att_read_group_req+0xae>
	if (start > end) {
    c57c:	42bd      	cmp	r5, r7
    c57e:	d835      	bhi.n	c5ec <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    c580:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c584:	4669      	mov	r1, sp
    c586:	4640      	mov	r0, r8
    c588:	f88d 4000 	strb.w	r4, [sp]
    c58c:	f8ad 3002 	strh.w	r3, [sp, #2]
    c590:	f01d fb66 	bl	29c60 <bt_uuid_cmp>
    c594:	2800      	cmp	r0, #0
    c596:	d134      	bne.n	c602 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    c598:	68b4      	ldr	r4, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
    c59a:	2214      	movs	r2, #20
    c59c:	2100      	movs	r1, #0
    c59e:	a807      	add	r0, sp, #28
    c5a0:	f021 febe 	bl	2e320 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    c5a4:	2201      	movs	r2, #1
    c5a6:	2111      	movs	r1, #17
    c5a8:	4620      	mov	r0, r4
    c5aa:	f7ff ff9b 	bl	c4e4 <bt_att_create_pdu>
    c5ae:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    c5b0:	2800      	cmp	r0, #0
    c5b2:	d040      	beq.n	c636 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    c5b4:	2101      	movs	r1, #1
    c5b6:	3008      	adds	r0, #8
	data.uuid = uuid;
    c5b8:	e9cd 6807 	strd	r6, r8, [sp, #28]
    c5bc:	f013 fcf0 	bl	1ffa0 <net_buf_simple_add>
	data.rsp->len = 0U;
    c5c0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c5c4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c5c6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    c5c8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c5cc:	4a1b      	ldr	r2, [pc, #108]	; (c63c <att_read_group_req+0x100>)
	data.group = NULL;
    c5ce:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c5d2:	4639      	mov	r1, r7
    c5d4:	4628      	mov	r0, r5
    c5d6:	f01d fecf 	bl	2a378 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    c5da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c5dc:	781c      	ldrb	r4, [r3, #0]
    c5de:	bb1c      	cbnz	r4, c628 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    c5e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    c5e2:	f013 fb8d 	bl	1fd00 <net_buf_unref>
	if (!req) {
    c5e6:	230a      	movs	r3, #10
    c5e8:	e018      	b.n	c61c <att_read_group_req+0xe0>
			*err = 0U;
    c5ea:	463d      	mov	r5, r7
	if (!req) {
    c5ec:	2301      	movs	r3, #1
    c5ee:	462a      	mov	r2, r5
    c5f0:	2110      	movs	r1, #16
    c5f2:	4630      	mov	r0, r6
    c5f4:	f01e f8ce 	bl	2a794 <send_err_rsp.part.12>
		return 0;
    c5f8:	2400      	movs	r4, #0
}
    c5fa:	4620      	mov	r0, r4
    c5fc:	b00c      	add	sp, #48	; 0x30
    c5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    c602:	f642 0301 	movw	r3, #10241	; 0x2801
    c606:	a901      	add	r1, sp, #4
    c608:	4640      	mov	r0, r8
    c60a:	f88d 4004 	strb.w	r4, [sp, #4]
    c60e:	f8ad 3006 	strh.w	r3, [sp, #6]
    c612:	f01d fb25 	bl	29c60 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    c616:	2800      	cmp	r0, #0
    c618:	d0be      	beq.n	c598 <att_read_group_req+0x5c>
	if (!req) {
    c61a:	2310      	movs	r3, #16
    c61c:	462a      	mov	r2, r5
    c61e:	2110      	movs	r1, #16
    c620:	4630      	mov	r0, r6
    c622:	f01e f8b7 	bl	2a794 <send_err_rsp.part.12>
		return 0;
    c626:	e7e8      	b.n	c5fa <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c628:	9909      	ldr	r1, [sp, #36]	; 0x24
    c62a:	4630      	mov	r0, r6
    c62c:	f7ff fd64 	bl	c0f8 <bt_att_chan_send_rsp.constprop.24>
	return 0;
    c630:	e7e2      	b.n	c5f8 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    c632:	2404      	movs	r4, #4
    c634:	e7e1      	b.n	c5fa <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    c636:	240e      	movs	r4, #14
    c638:	e7df      	b.n	c5fa <att_read_group_req+0xbe>
    c63a:	bf00      	nop
    c63c:	0000bc69 	.word	0x0000bc69

0000c640 <att_read_mult_req>:
{
    c640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    c644:	6886      	ldr	r6, [r0, #8]
{
    c646:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    c648:	2210      	movs	r2, #16
{
    c64a:	4604      	mov	r4, r0
    c64c:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    c64e:	4668      	mov	r0, sp
    c650:	2100      	movs	r1, #0
    c652:	f021 fe65 	bl	2e320 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    c656:	2200      	movs	r2, #0
    c658:	210f      	movs	r1, #15
    c65a:	4630      	mov	r0, r6
    c65c:	f7ff ff42 	bl	c4e4 <bt_att_create_pdu>
    c660:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c662:	b358      	cbz	r0, c6bc <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c664:	f8df 9058 	ldr.w	r9, [pc, #88]	; c6c0 <att_read_mult_req+0x80>
	data.chan = chan;
    c668:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    c66a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    c66e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    c672:	89ab      	ldrh	r3, [r5, #12]
    c674:	2b01      	cmp	r3, #1
    c676:	d804      	bhi.n	c682 <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c678:	9902      	ldr	r1, [sp, #8]
    c67a:	4620      	mov	r0, r4
    c67c:	f7ff fd3c 	bl	c0f8 <bt_att_chan_send_rsp.constprop.24>
    c680:	e018      	b.n	c6b4 <att_read_mult_req+0x74>
    c682:	4638      	mov	r0, r7
    c684:	f020 ff5c 	bl	2d540 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c688:	466b      	mov	r3, sp
    c68a:	464a      	mov	r2, r9
    c68c:	4601      	mov	r1, r0
    c68e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    c690:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c694:	f01d fe70 	bl	2a378 <bt_gatt_foreach_attr>
		if (data.err) {
    c698:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c69c:	2b00      	cmp	r3, #0
    c69e:	d0e8      	beq.n	c672 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    c6a0:	9802      	ldr	r0, [sp, #8]
    c6a2:	f013 fb2d 	bl	1fd00 <net_buf_unref>
	if (!req) {
    c6a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c6aa:	4632      	mov	r2, r6
    c6ac:	210e      	movs	r1, #14
    c6ae:	4620      	mov	r0, r4
    c6b0:	f01e f870 	bl	2a794 <send_err_rsp.part.12>
	return 0;
    c6b4:	2000      	movs	r0, #0
}
    c6b6:	b005      	add	sp, #20
    c6b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    c6bc:	200e      	movs	r0, #14
    c6be:	e7fa      	b.n	c6b6 <att_read_mult_req+0x76>
    c6c0:	0002a745 	.word	0x0002a745

0000c6c4 <att_read_rsp>:
{
    c6c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    c6c8:	6884      	ldr	r4, [r0, #8]
{
    c6ca:	4605      	mov	r5, r0
    c6cc:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    c6ce:	4620      	mov	r0, r4
    c6d0:	2101      	movs	r1, #1
{
    c6d2:	4690      	mov	r8, r2
    c6d4:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    c6d6:	f01e fb5e 	bl	2ad96 <bt_gatt_change_aware>
    c6da:	b388      	cbz	r0, c740 <att_read_rsp+0x7c>
	if (!handle) {
    c6dc:	b396      	cbz	r6, c744 <att_read_rsp+0x80>
	(void)memset(&data, 0, sizeof(data));
    c6de:	2210      	movs	r2, #16
    c6e0:	2100      	movs	r1, #0
    c6e2:	4668      	mov	r0, sp
    c6e4:	f021 fe1c 	bl	2e320 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    c6e8:	2200      	movs	r2, #0
    c6ea:	4641      	mov	r1, r8
    c6ec:	4620      	mov	r0, r4
    c6ee:	f7ff fef9 	bl	c4e4 <bt_att_create_pdu>
    c6f2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c6f4:	b340      	cbz	r0, c748 <att_read_rsp+0x84>
	data.offset = offset;
    c6f6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    c6fa:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c6fe:	2301      	movs	r3, #1
    c700:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c704:	4a11      	ldr	r2, [pc, #68]	; (c74c <att_read_rsp+0x88>)
	data.chan = chan;
    c706:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c708:	466b      	mov	r3, sp
    c70a:	4631      	mov	r1, r6
    c70c:	4630      	mov	r0, r6
    c70e:	f01d fe33 	bl	2a378 <bt_gatt_foreach_attr>
	if (data.err) {
    c712:	f89d 400c 	ldrb.w	r4, [sp, #12]
    c716:	b174      	cbz	r4, c736 <att_read_rsp+0x72>
		net_buf_unref(data.buf);
    c718:	9802      	ldr	r0, [sp, #8]
    c71a:	f013 faf1 	bl	1fd00 <net_buf_unref>
	if (!req) {
    c71e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c722:	4632      	mov	r2, r6
    c724:	4639      	mov	r1, r7
    c726:	4628      	mov	r0, r5
    c728:	f01e f834 	bl	2a794 <send_err_rsp.part.12>
		return 0;
    c72c:	2400      	movs	r4, #0
}
    c72e:	4620      	mov	r0, r4
    c730:	b004      	add	sp, #16
    c732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c736:	9902      	ldr	r1, [sp, #8]
    c738:	4628      	mov	r0, r5
    c73a:	f7ff fcdd 	bl	c0f8 <bt_att_chan_send_rsp.constprop.24>
	return 0;
    c73e:	e7f6      	b.n	c72e <att_read_rsp+0x6a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c740:	2412      	movs	r4, #18
    c742:	e7f4      	b.n	c72e <att_read_rsp+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
    c744:	2401      	movs	r4, #1
    c746:	e7f2      	b.n	c72e <att_read_rsp+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    c748:	240e      	movs	r4, #14
    c74a:	e7f0      	b.n	c72e <att_read_rsp+0x6a>
    c74c:	0002a745 	.word	0x0002a745

0000c750 <att_read_type_req>:
{
    c750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    c754:	7b0c      	ldrb	r4, [r1, #12]
    c756:	3c04      	subs	r4, #4
    c758:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    c75a:	2c02      	cmp	r4, #2
{
    c75c:	4606      	mov	r6, r0
    c75e:	b08c      	sub	sp, #48	; 0x30
    c760:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    c762:	d001      	beq.n	c768 <att_read_type_req+0x18>
    c764:	2c10      	cmp	r4, #16
    c766:	d14f      	bne.n	c808 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    c768:	2104      	movs	r1, #4
    c76a:	3008      	adds	r0, #8
    c76c:	f013 fbfa 	bl	1ff64 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c770:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    c774:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    c776:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c778:	1d01      	adds	r1, r0, #4
    c77a:	4622      	mov	r2, r4
    c77c:	4640      	mov	r0, r8
    c77e:	f01d fa99 	bl	29cb4 <bt_uuid_create>
    c782:	b188      	cbz	r0, c7a8 <att_read_type_req+0x58>
	if (!start || !end) {
    c784:	b19d      	cbz	r5, c7ae <att_read_type_req+0x5e>
    c786:	b18f      	cbz	r7, c7ac <att_read_type_req+0x5c>
	if (start > end) {
    c788:	42bd      	cmp	r5, r7
    c78a:	d810      	bhi.n	c7ae <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    c78c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    c78e:	68b4      	ldr	r4, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
    c790:	2100      	movs	r1, #0
    c792:	eb0d 0002 	add.w	r0, sp, r2
    c796:	f021 fdc3 	bl	2e320 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    c79a:	2201      	movs	r2, #1
    c79c:	2109      	movs	r1, #9
    c79e:	4620      	mov	r0, r4
    c7a0:	f7ff fea0 	bl	c4e4 <bt_att_create_pdu>
    c7a4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    c7a6:	b968      	cbnz	r0, c7c4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    c7a8:	240e      	movs	r4, #14
    c7aa:	e007      	b.n	c7bc <att_read_type_req+0x6c>
			*err = 0U;
    c7ac:	463d      	mov	r5, r7
	if (!req) {
    c7ae:	2301      	movs	r3, #1
    c7b0:	462a      	mov	r2, r5
    c7b2:	2108      	movs	r1, #8
    c7b4:	4630      	mov	r0, r6
    c7b6:	f01d ffed 	bl	2a794 <send_err_rsp.part.12>
		return 0;
    c7ba:	2400      	movs	r4, #0
}
    c7bc:	4620      	mov	r0, r4
    c7be:	b00c      	add	sp, #48	; 0x30
    c7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    c7c4:	2101      	movs	r1, #1
    c7c6:	3008      	adds	r0, #8
	data.uuid = uuid;
    c7c8:	e9cd 6806 	strd	r6, r8, [sp, #24]
    c7cc:	f013 fbe8 	bl	1ffa0 <net_buf_simple_add>
	data.rsp->len = 0U;
    c7d0:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c7d4:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c7d6:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    c7d8:	4a0c      	ldr	r2, [pc, #48]	; (c80c <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    c7da:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    c7de:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c7e0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    c7e4:	4628      	mov	r0, r5
    c7e6:	ab06      	add	r3, sp, #24
    c7e8:	f01d fdc6 	bl	2a378 <bt_gatt_foreach_attr>
	if (data.err) {
    c7ec:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    c7f0:	b12c      	cbz	r4, c7fe <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    c7f2:	9808      	ldr	r0, [sp, #32]
    c7f4:	f013 fa84 	bl	1fd00 <net_buf_unref>
	if (!req) {
    c7f8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    c7fc:	e7d8      	b.n	c7b0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c7fe:	9908      	ldr	r1, [sp, #32]
    c800:	4630      	mov	r0, r6
    c802:	f7ff fc79 	bl	c0f8 <bt_att_chan_send_rsp.constprop.24>
	return 0;
    c806:	e7d9      	b.n	c7bc <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    c808:	2404      	movs	r4, #4
    c80a:	e7d7      	b.n	c7bc <att_read_type_req+0x6c>
    c80c:	0000bd15 	.word	0x0000bd15

0000c810 <att_find_type_req>:
{
    c810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c814:	4689      	mov	r9, r1
    c816:	b088      	sub	sp, #32
    c818:	4606      	mov	r6, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    c81a:	2106      	movs	r1, #6
    c81c:	f109 0008 	add.w	r0, r9, #8
    c820:	f013 fba0 	bl	1ff64 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    c824:	8805      	ldrh	r5, [r0, #0]
	if (!start || !end) {
    c826:	b315      	cbz	r5, c86e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    c828:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	if (!start || !end) {
    c82c:	f1b8 0f00 	cmp.w	r8, #0
    c830:	d01c      	beq.n	c86c <att_find_type_req+0x5c>
	if (start > end) {
    c832:	4545      	cmp	r5, r8
    c834:	d81b      	bhi.n	c86e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    c836:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    c838:	f8ad 3006 	strh.w	r3, [sp, #6]
    c83c:	2400      	movs	r4, #0
    c83e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c842:	a902      	add	r1, sp, #8
    c844:	a801      	add	r0, sp, #4
	value = buf->data;
    c846:	f8d9 a008 	ldr.w	sl, [r9, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    c84a:	f88d 4004 	strb.w	r4, [sp, #4]
    c84e:	f88d 4008 	strb.w	r4, [sp, #8]
    c852:	f8ad 300a 	strh.w	r3, [sp, #10]
    c856:	f01d fa03 	bl	29c60 <bt_uuid_cmp>
    c85a:	4607      	mov	r7, r0
    c85c:	b190      	cbz	r0, c884 <att_find_type_req+0x74>
	if (!req) {
    c85e:	230a      	movs	r3, #10
    c860:	462a      	mov	r2, r5
    c862:	2106      	movs	r1, #6
    c864:	4630      	mov	r0, r6
    c866:	f01d ff95 	bl	2a794 <send_err_rsp.part.12>
		return 0;
    c86a:	e007      	b.n	c87c <att_find_type_req+0x6c>
			*err = 0U;
    c86c:	4645      	mov	r5, r8
	if (!req) {
    c86e:	2301      	movs	r3, #1
    c870:	462a      	mov	r2, r5
    c872:	2106      	movs	r1, #6
    c874:	4630      	mov	r0, r6
    c876:	f01d ff8d 	bl	2a794 <send_err_rsp.part.12>
		return 0;
    c87a:	2400      	movs	r4, #0
}
    c87c:	4620      	mov	r0, r4
    c87e:	b008      	add	sp, #32
    c880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    c884:	f899 400c 	ldrb.w	r4, [r9, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    c888:	f8d6 9008 	ldr.w	r9, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
    c88c:	4601      	mov	r1, r0
    c88e:	2214      	movs	r2, #20
    c890:	a803      	add	r0, sp, #12
    c892:	f021 fd45 	bl	2e320 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    c896:	463a      	mov	r2, r7
    c898:	2107      	movs	r1, #7
    c89a:	4648      	mov	r0, r9
    c89c:	f7ff fe22 	bl	c4e4 <bt_att_create_pdu>
    c8a0:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    c8a2:	b1d8      	cbz	r0, c8dc <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c8a4:	230a      	movs	r3, #10
    c8a6:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c8aa:	4a0d      	ldr	r2, [pc, #52]	; (c8e0 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    c8ac:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c8b0:	ab03      	add	r3, sp, #12
    c8b2:	4641      	mov	r1, r8
    c8b4:	4628      	mov	r0, r5
	data.chan = chan;
    c8b6:	9603      	str	r6, [sp, #12]
	data.value = value;
    c8b8:	e9cd 7a05 	strd	r7, sl, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c8bc:	f01d fd5c 	bl	2a378 <bt_gatt_foreach_attr>
	if (data.err) {
    c8c0:	f89d 401d 	ldrb.w	r4, [sp, #29]
    c8c4:	b12c      	cbz	r4, c8d2 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    c8c6:	9804      	ldr	r0, [sp, #16]
    c8c8:	f013 fa1a 	bl	1fd00 <net_buf_unref>
	if (!req) {
    c8cc:	f89d 301d 	ldrb.w	r3, [sp, #29]
    c8d0:	e7ce      	b.n	c870 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c8d2:	9904      	ldr	r1, [sp, #16]
    c8d4:	4630      	mov	r0, r6
    c8d6:	f7ff fc0f 	bl	c0f8 <bt_att_chan_send_rsp.constprop.24>
	return 0;
    c8da:	e7cf      	b.n	c87c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    c8dc:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    c8de:	e7cd      	b.n	c87c <att_find_type_req+0x6c>
    c8e0:	0000bdb9 	.word	0x0000bdb9

0000c8e4 <att_find_info_req>:
{
    c8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    c8e6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    c8e8:	881d      	ldrh	r5, [r3, #0]
{
    c8ea:	b085      	sub	sp, #20
    c8ec:	4606      	mov	r6, r0
	if (!start || !end) {
    c8ee:	b19d      	cbz	r5, c918 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    c8f0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    c8f2:	b184      	cbz	r4, c916 <att_find_info_req+0x32>
	if (start > end) {
    c8f4:	42a5      	cmp	r5, r4
    c8f6:	d80f      	bhi.n	c918 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    c8f8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    c8fa:	2210      	movs	r2, #16
    c8fc:	2100      	movs	r1, #0
    c8fe:	4668      	mov	r0, sp
    c900:	f021 fd0e 	bl	2e320 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    c904:	2200      	movs	r2, #0
    c906:	2105      	movs	r1, #5
    c908:	4638      	mov	r0, r7
    c90a:	f7ff fdeb 	bl	c4e4 <bt_att_create_pdu>
    c90e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    c910:	b958      	cbnz	r0, c92a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    c912:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    c914:	e007      	b.n	c926 <att_find_info_req+0x42>
			*err = 0U;
    c916:	4625      	mov	r5, r4
	if (!req) {
    c918:	2301      	movs	r3, #1
    c91a:	462a      	mov	r2, r5
    c91c:	2104      	movs	r1, #4
    c91e:	4630      	mov	r0, r6
    c920:	f01d ff38 	bl	2a794 <send_err_rsp.part.12>
	return 0;
    c924:	2000      	movs	r0, #0
}
    c926:	b005      	add	sp, #20
    c928:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    c92a:	4621      	mov	r1, r4
    c92c:	466b      	mov	r3, sp
    c92e:	4a08      	ldr	r2, [pc, #32]	; (c950 <att_find_info_req+0x6c>)
	data.chan = chan;
    c930:	9600      	str	r6, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    c932:	4628      	mov	r0, r5
    c934:	f01d fd20 	bl	2a378 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    c938:	9c02      	ldr	r4, [sp, #8]
    c93a:	b924      	cbnz	r4, c946 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    c93c:	9801      	ldr	r0, [sp, #4]
    c93e:	f013 f9df 	bl	1fd00 <net_buf_unref>
	if (!req) {
    c942:	230a      	movs	r3, #10
    c944:	e7e9      	b.n	c91a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c946:	9901      	ldr	r1, [sp, #4]
    c948:	4630      	mov	r0, r6
    c94a:	f7ff fbd5 	bl	c0f8 <bt_att_chan_send_rsp.constprop.24>
    c94e:	e7e9      	b.n	c924 <att_find_info_req+0x40>
    c950:	0002a4f9 	.word	0x0002a4f9

0000c954 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    c954:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    c956:	4602      	mov	r2, r0
    c958:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
    c95a:	2400      	movs	r4, #0
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    c95c:	a901      	add	r1, sp, #4
    c95e:	4807      	ldr	r0, [pc, #28]	; (c97c <bt_att_req_alloc+0x28>)
	struct bt_att_req *req = NULL;
    c960:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    c962:	f016 ff6b 	bl	2383c <k_mem_slab_alloc>
    c966:	4601      	mov	r1, r0
    c968:	b930      	cbnz	r0, c978 <bt_att_req_alloc+0x24>
    c96a:	2218      	movs	r2, #24
    c96c:	9801      	ldr	r0, [sp, #4]
    c96e:	f021 fcd7 	bl	2e320 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
    c972:	9801      	ldr	r0, [sp, #4]
}
    c974:	b002      	add	sp, #8
    c976:	bd10      	pop	{r4, pc}
		return NULL;
    c978:	4620      	mov	r0, r4
    c97a:	e7fb      	b.n	c974 <bt_att_req_alloc+0x20>
    c97c:	20001ddc 	.word	0x20001ddc

0000c980 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    c980:	b507      	push	{r0, r1, r2, lr}
    c982:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    c984:	a901      	add	r1, sp, #4
    c986:	4803      	ldr	r0, [pc, #12]	; (c994 <bt_att_req_free+0x14>)
    c988:	f016 ffb2 	bl	238f0 <k_mem_slab_free>
}
    c98c:	b003      	add	sp, #12
    c98e:	f85d fb04 	ldr.w	pc, [sp], #4
    c992:	bf00      	nop
    c994:	20001ddc 	.word	0x20001ddc

0000c998 <att_handle_rsp>:
{
    c998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c99c:	4605      	mov	r5, r0
    c99e:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    c9a0:	30f0      	adds	r0, #240	; 0xf0
{
    c9a2:	4689      	mov	r9, r1
    c9a4:	4692      	mov	sl, r2
    c9a6:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    c9a8:	f018 fde6 	bl	25578 <k_delayed_work_cancel>
	if (!chan->req) {
    c9ac:	f8d5 40cc 	ldr.w	r4, [r5, #204]	; 0xcc
    c9b0:	2600      	movs	r6, #0
    c9b2:	b9fc      	cbnz	r4, c9f4 <att_handle_rsp+0x5c>
		BT_WARN("No pending ATT request");
    c9b4:	2157      	movs	r1, #87	; 0x57
    c9b6:	482a      	ldr	r0, [pc, #168]	; (ca60 <att_handle_rsp+0xc8>)
    c9b8:	f01a ff8b 	bl	278d2 <printk>
	att_process(chan->att);
    c9bc:	682f      	ldr	r7, [r5, #0]
	node = sys_slist_get(&att->reqs);
    c9be:	1d38      	adds	r0, r7, #4
    c9c0:	f01d fc3f 	bl	2a242 <sys_slist_get>
	if (!node) {
    c9c4:	4603      	mov	r3, r0
    c9c6:	2800      	cmp	r0, #0
    c9c8:	d035      	beq.n	ca36 <att_handle_rsp+0x9e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c9ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c9cc:	b15a      	cbz	r2, c9e6 <att_handle_rsp+0x4e>
    c9ce:	f5b2 709e 	subs.w	r0, r2, #316	; 0x13c
    c9d2:	d008      	beq.n	c9e6 <att_handle_rsp+0x4e>
    c9d4:	6816      	ldr	r6, [r2, #0]
    c9d6:	b10e      	cbz	r6, c9dc <att_handle_rsp+0x44>
    c9d8:	f5a6 769e 	sub.w	r6, r6, #316	; 0x13c
		if (!chan->req) {
    c9dc:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
    c9e0:	b312      	cbz	r2, ca28 <att_handle_rsp+0x90>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c9e2:	2e00      	cmp	r6, #0
    c9e4:	d134      	bne.n	ca50 <att_handle_rsp+0xb8>
Z_GENLIST_PREPEND(slist, snode)
    c9e6:	687a      	ldr	r2, [r7, #4]
	parent->next = child;
    c9e8:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    c9ea:	68ba      	ldr	r2, [r7, #8]
	list->head = node;
    c9ec:	607b      	str	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    c9ee:	bb12      	cbnz	r2, ca36 <att_handle_rsp+0x9e>
	list->tail = node;
    c9f0:	60bb      	str	r3, [r7, #8]
    c9f2:	e020      	b.n	ca36 <att_handle_rsp+0x9e>
	if (chan->req == &cancel) {
    c9f4:	4b1b      	ldr	r3, [pc, #108]	; (ca64 <att_handle_rsp+0xcc>)
    c9f6:	429c      	cmp	r4, r3
    c9f8:	d103      	bne.n	ca02 <att_handle_rsp+0x6a>
		chan->req = NULL;
    c9fa:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
	bt_att_func_t func = NULL;
    c9fe:	4634      	mov	r4, r6
		goto process;
    ca00:	e7dc      	b.n	c9bc <att_handle_rsp+0x24>
	if (chan->req->buf) {
    ca02:	6920      	ldr	r0, [r4, #16]
    ca04:	b120      	cbz	r0, ca10 <att_handle_rsp+0x78>
		net_buf_unref(chan->req->buf);
    ca06:	f013 f97b 	bl	1fd00 <net_buf_unref>
		chan->req->buf = NULL;
    ca0a:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    ca0e:	611e      	str	r6, [r3, #16]
	func = chan->req->func;
    ca10:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
	chan->req->func = NULL;
    ca14:	2600      	movs	r6, #0
	func = chan->req->func;
    ca16:	6844      	ldr	r4, [r0, #4]
	chan->req->func = NULL;
    ca18:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    ca1a:	f8d0 b014 	ldr.w	fp, [r0, #20]
	att_req_destroy(chan->req);
    ca1e:	f01d ff3e 	bl	2a89e <att_req_destroy>
	chan->req = NULL;
    ca22:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
    ca26:	e7c9      	b.n	c9bc <att_handle_rsp+0x24>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    ca28:	4619      	mov	r1, r3
    ca2a:	9303      	str	r3, [sp, #12]
    ca2c:	f7ff fbb6 	bl	c19c <bt_att_chan_req_send>
    ca30:	2800      	cmp	r0, #0
    ca32:	9b03      	ldr	r3, [sp, #12]
    ca34:	dbd5      	blt.n	c9e2 <att_handle_rsp+0x4a>
	if (func) {
    ca36:	b13c      	cbz	r4, ca48 <att_handle_rsp+0xb0>
		func(chan->att->conn, err, pdu, len, params);
    ca38:	6828      	ldr	r0, [r5, #0]
    ca3a:	f8cd b000 	str.w	fp, [sp]
    ca3e:	4653      	mov	r3, sl
    ca40:	464a      	mov	r2, r9
    ca42:	4641      	mov	r1, r8
    ca44:	6800      	ldr	r0, [r0, #0]
    ca46:	47a0      	blx	r4
}
    ca48:	2000      	movs	r0, #0
    ca4a:	b005      	add	sp, #20
    ca4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ca50:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    ca54:	b10a      	cbz	r2, ca5a <att_handle_rsp+0xc2>
    ca56:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
	bt_att_func_t func = NULL;
    ca5a:	4630      	mov	r0, r6
    ca5c:	4616      	mov	r6, r2
    ca5e:	e7bd      	b.n	c9dc <att_handle_rsp+0x44>
    ca60:	0003229d 	.word	0x0003229d
    ca64:	20003ac0 	.word	0x20003ac0

0000ca68 <att_reset>:
{
    ca68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ca6a:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    ca6c:	9803      	ldr	r0, [sp, #12]
    ca6e:	2200      	movs	r2, #0
    ca70:	2300      	movs	r3, #0
    ca72:	300c      	adds	r0, #12
    ca74:	f013 f82a 	bl	1facc <net_buf_get>
    ca78:	b948      	cbnz	r0, ca8e <att_reset+0x26>
	att->conn = NULL;
    ca7a:	9b03      	ldr	r3, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    ca7c:	685c      	ldr	r4, [r3, #4]
	att->conn = NULL;
    ca7e:	6018      	str	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    ca80:	b944      	cbnz	r4, ca94 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
    ca82:	a903      	add	r1, sp, #12
    ca84:	480c      	ldr	r0, [pc, #48]	; (cab8 <att_reset+0x50>)
    ca86:	f016 ff33 	bl	238f0 <k_mem_slab_free>
}
    ca8a:	b004      	add	sp, #16
    ca8c:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    ca8e:	f013 f937 	bl	1fd00 <net_buf_unref>
    ca92:	e7eb      	b.n	ca6c <att_reset+0x4>
    ca94:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
    ca96:	6866      	ldr	r6, [r4, #4]
    ca98:	b136      	cbz	r6, caa8 <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    ca9a:	6963      	ldr	r3, [r4, #20]
    ca9c:	9300      	str	r3, [sp, #0]
    ca9e:	2300      	movs	r3, #0
    caa0:	461a      	mov	r2, r3
    caa2:	210e      	movs	r1, #14
    caa4:	4618      	mov	r0, r3
    caa6:	47b0      	blx	r6
		att_req_destroy(req);
    caa8:	4620      	mov	r0, r4
    caaa:	f01d fef8 	bl	2a89e <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    caae:	2d00      	cmp	r5, #0
    cab0:	d0e7      	beq.n	ca82 <att_reset+0x1a>
    cab2:	462c      	mov	r4, r5
    cab4:	682d      	ldr	r5, [r5, #0]
    cab6:	e7ee      	b.n	ca96 <att_reset+0x2e>
    cab8:	20001da4 	.word	0x20001da4

0000cabc <att_timeout>:
{
    cabc:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
    cabe:	4605      	mov	r5, r0
{
    cac0:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    cac2:	2145      	movs	r1, #69	; 0x45
    cac4:	480d      	ldr	r0, [pc, #52]	; (cafc <att_timeout+0x40>)
	struct bt_att *att = chan->att;
    cac6:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
    caca:	f01a ff02 	bl	278d2 <printk>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    cace:	f854 0cf0 	ldr.w	r0, [r4, #-240]
    cad2:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    cad6:	3028      	adds	r0, #40	; 0x28
    cad8:	f01d fbbd 	bl	2a256 <sys_slist_find_and_remove>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    cadc:	4628      	mov	r0, r5
    cade:	f01d fef2 	bl	2a8c6 <att_chan_detach.part.15>
	if (!sys_slist_is_empty(&att->chans)) {
    cae2:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    cae4:	b945      	cbnz	r5, caf8 <att_timeout+0x3c>
	att_reset(att);
    cae6:	4630      	mov	r0, r6
    cae8:	f7ff ffbe 	bl	ca68 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    caec:	f854 0ce8 	ldr.w	r0, [r4, #-232]
    caf0:	f001 fc22 	bl	e338 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    caf4:	f844 5ce8 	str.w	r5, [r4, #-232]
}
    caf8:	bd70      	pop	{r4, r5, r6, pc}
    cafa:	bf00      	nop
    cafc:	000322b9 	.word	0x000322b9

0000cb00 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
    cb00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cb04:	460e      	mov	r6, r1
    cb06:	4617      	mov	r7, r2
    cb08:	461d      	mov	r5, r3
	struct bt_att_chan *chan, *tmp;
	struct bt_att *att;
	int ret;

	__ASSERT_NO_MSG(conn);
    cb0a:	4604      	mov	r4, r0
    cb0c:	b950      	cbnz	r0, cb24 <bt_att_send+0x24>
    cb0e:	4931      	ldr	r1, [pc, #196]	; (cbd4 <bt_att_send+0xd4>)
    cb10:	4831      	ldr	r0, [pc, #196]	; (cbd8 <bt_att_send+0xd8>)
    cb12:	f640 32b8 	movw	r2, #3000	; 0xbb8
    cb16:	f01a fedc 	bl	278d2 <printk>
    cb1a:	f640 31b8 	movw	r1, #3000	; 0xbb8
    cb1e:	482d      	ldr	r0, [pc, #180]	; (cbd4 <bt_att_send+0xd4>)
    cb20:	f01b f950 	bl	27dc4 <assert_post_action>
	__ASSERT_NO_MSG(buf);
    cb24:	b956      	cbnz	r6, cb3c <bt_att_send+0x3c>
    cb26:	492b      	ldr	r1, [pc, #172]	; (cbd4 <bt_att_send+0xd4>)
    cb28:	482b      	ldr	r0, [pc, #172]	; (cbd8 <bt_att_send+0xd8>)
    cb2a:	f640 32b9 	movw	r2, #3001	; 0xbb9
    cb2e:	f01a fed0 	bl	278d2 <printk>
    cb32:	f640 31b9 	movw	r1, #3001	; 0xbb9
    cb36:	4827      	ldr	r0, [pc, #156]	; (cbd4 <bt_att_send+0xd4>)
    cb38:	f01b f944 	bl	27dc4 <assert_post_action>

	att = att_get(conn);
    cb3c:	4620      	mov	r0, r4
    cb3e:	f7ff fa4b 	bl	bfd8 <att_get>
	if (!att) {
    cb42:	4680      	mov	r8, r0
    cb44:	b938      	cbnz	r0, cb56 <bt_att_send+0x56>
		net_buf_unref(buf);
    cb46:	4630      	mov	r0, r6
    cb48:	f013 f8da 	bl	1fd00 <net_buf_unref>
		return -ENOTCONN;
    cb4c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
    cb50:	b002      	add	sp, #8
    cb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
    cb56:	b13f      	cbz	r7, cb68 <bt_att_send+0x68>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
    cb58:	9500      	str	r5, [sp, #0]
    cb5a:	463b      	mov	r3, r7
    cb5c:	4632      	mov	r2, r6
    cb5e:	2104      	movs	r1, #4
    cb60:	4620      	mov	r0, r4
    cb62:	f01d fb3e 	bl	2a1e2 <bt_l2cap_send_cb>
    cb66:	e7f3      	b.n	cb50 <bt_att_send+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cb68:	6a84      	ldr	r4, [r0, #40]	; 0x28
    cb6a:	b184      	cbz	r4, cb8e <bt_att_send+0x8e>
    cb6c:	f5b4 759e 	subs.w	r5, r4, #316	; 0x13c
    cb70:	d00f      	beq.n	cb92 <bt_att_send+0x92>
    cb72:	6824      	ldr	r4, [r4, #0]
    cb74:	b10c      	cbz	r4, cb7a <bt_att_send+0x7a>
    cb76:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
    cb7a:	2000      	movs	r0, #0
    cb7c:	b95d      	cbnz	r5, cb96 <bt_att_send+0x96>
	if (ret < 0) {
    cb7e:	b1c8      	cbz	r0, cbb4 <bt_att_send+0xb4>
		net_buf_put(&att->tx_queue, buf);
    cb80:	f108 000c 	add.w	r0, r8, #12
    cb84:	4631      	mov	r1, r6
    cb86:	f013 f88d 	bl	1fca4 <net_buf_put>
	return 0;
    cb8a:	4628      	mov	r0, r5
    cb8c:	e7e0      	b.n	cb50 <bt_att_send+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cb8e:	463d      	mov	r5, r7
    cb90:	e7f3      	b.n	cb7a <bt_att_send+0x7a>
    cb92:	463c      	mov	r4, r7
    cb94:	e7f1      	b.n	cb7a <bt_att_send+0x7a>
	return z_impl_k_sem_take(sem, timeout);
    cb96:	2200      	movs	r2, #0
    cb98:	2300      	movs	r3, #0
    cb9a:	f505 7090 	add.w	r0, r5, #288	; 0x120
    cb9e:	f018 fa49 	bl	25034 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
    cba2:	2800      	cmp	r0, #0
    cba4:	db08      	blt.n	cbb8 <bt_att_send+0xb8>
	return chan_send(chan, buf, cb);
    cba6:	2200      	movs	r2, #0
    cba8:	4631      	mov	r1, r6
    cbaa:	4628      	mov	r0, r5
    cbac:	f7ff f9a8 	bl	bf00 <chan_send>
		if (ret >= 0) {
    cbb0:	2800      	cmp	r0, #0
    cbb2:	db03      	blt.n	cbbc <bt_att_send+0xbc>
	return 0;
    cbb4:	2000      	movs	r0, #0
    cbb6:	e7cb      	b.n	cb50 <bt_att_send+0x50>
			return -EAGAIN;
    cbb8:	f06f 000a 	mvn.w	r0, #10
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cbbc:	b13c      	cbz	r4, cbce <bt_att_send+0xce>
    cbbe:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    cbc2:	b10b      	cbz	r3, cbc8 <bt_att_send+0xc8>
    cbc4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
    cbc8:	4625      	mov	r5, r4
    cbca:	461c      	mov	r4, r3
    cbcc:	e7d6      	b.n	cb7c <bt_att_send+0x7c>
    cbce:	4623      	mov	r3, r4
    cbd0:	e7fa      	b.n	cbc8 <bt_att_send+0xc8>
    cbd2:	bf00      	nop
    cbd4:	00032348 	.word	0x00032348
    cbd8:	0003067f 	.word	0x0003067f

0000cbdc <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    cbdc:	b570      	push	{r4, r5, r6, lr}
    cbde:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
    cbe0:	4605      	mov	r5, r0
    cbe2:	b950      	cbnz	r0, cbfa <bt_att_req_send+0x1e>
    cbe4:	4924      	ldr	r1, [pc, #144]	; (cc78 <bt_att_req_send+0x9c>)
    cbe6:	4825      	ldr	r0, [pc, #148]	; (cc7c <bt_att_req_send+0xa0>)
    cbe8:	f640 32e2 	movw	r2, #3042	; 0xbe2
    cbec:	f01a fe71 	bl	278d2 <printk>
    cbf0:	f640 31e2 	movw	r1, #3042	; 0xbe2
    cbf4:	4820      	ldr	r0, [pc, #128]	; (cc78 <bt_att_req_send+0x9c>)
    cbf6:	f01b f8e5 	bl	27dc4 <assert_post_action>
	__ASSERT_NO_MSG(req);
    cbfa:	b954      	cbnz	r4, cc12 <bt_att_req_send+0x36>
    cbfc:	491e      	ldr	r1, [pc, #120]	; (cc78 <bt_att_req_send+0x9c>)
    cbfe:	481f      	ldr	r0, [pc, #124]	; (cc7c <bt_att_req_send+0xa0>)
    cc00:	f640 32e3 	movw	r2, #3043	; 0xbe3
    cc04:	f01a fe65 	bl	278d2 <printk>
    cc08:	f640 31e3 	movw	r1, #3043	; 0xbe3
    cc0c:	481a      	ldr	r0, [pc, #104]	; (cc78 <bt_att_req_send+0x9c>)
    cc0e:	f01b f8d9 	bl	27dc4 <assert_post_action>

	att = att_get(conn);
    cc12:	4628      	mov	r0, r5
    cc14:	f7ff f9e0 	bl	bfd8 <att_get>
	if (!att) {
    cc18:	4605      	mov	r5, r0
    cc1a:	b930      	cbnz	r0, cc2a <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
    cc1c:	6920      	ldr	r0, [r4, #16]
    cc1e:	f013 f86f 	bl	1fd00 <net_buf_unref>
		req->buf = NULL;
    cc22:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
    cc24:	f06f 007f 	mvn.w	r0, #127	; 0x7f
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
    cc28:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cc2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    cc2c:	b153      	cbz	r3, cc44 <bt_att_req_send+0x68>
    cc2e:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
    cc32:	d007      	beq.n	cc44 <bt_att_req_send+0x68>
    cc34:	681e      	ldr	r6, [r3, #0]
    cc36:	b10e      	cbz	r6, cc3c <bt_att_req_send+0x60>
    cc38:	f5a6 769e 	sub.w	r6, r6, #316	; 0x13c
		if (!chan->req) {
    cc3c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    cc40:	b143      	cbz	r3, cc54 <bt_att_req_send+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cc42:	b96e      	cbnz	r6, cc60 <bt_att_req_send+0x84>
	parent->next = child;
    cc44:	2000      	movs	r0, #0
    cc46:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    cc48:	68ab      	ldr	r3, [r5, #8]
    cc4a:	b98b      	cbnz	r3, cc70 <bt_att_req_send+0x94>
	list->head = node;
    cc4c:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
    cc50:	4618      	mov	r0, r3
    cc52:	e7e9      	b.n	cc28 <bt_att_req_send+0x4c>
			ret = bt_att_chan_req_send(chan, req);
    cc54:	4621      	mov	r1, r4
    cc56:	f7ff faa1 	bl	c19c <bt_att_chan_req_send>
			if (ret >= 0) {
    cc5a:	2800      	cmp	r0, #0
    cc5c:	dbf1      	blt.n	cc42 <bt_att_req_send+0x66>
    cc5e:	e7e3      	b.n	cc28 <bt_att_req_send+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    cc60:	f8d6 313c 	ldr.w	r3, [r6, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cc64:	b10b      	cbz	r3, cc6a <bt_att_req_send+0x8e>
    cc66:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
    cc6a:	4630      	mov	r0, r6
    cc6c:	461e      	mov	r6, r3
    cc6e:	e7e5      	b.n	cc3c <bt_att_req_send+0x60>
	parent->next = child;
    cc70:	601c      	str	r4, [r3, #0]
	list->tail = node;
    cc72:	60ac      	str	r4, [r5, #8]
    cc74:	e7d8      	b.n	cc28 <bt_att_req_send+0x4c>
    cc76:	bf00      	nop
    cc78:	00032348 	.word	0x00032348
    cc7c:	0003067f 	.word	0x0003067f

0000cc80 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    cc80:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    cc82:	4908      	ldr	r1, [pc, #32]	; (cca4 <db_hash_set+0x24>)
{
    cc84:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    cc86:	4618      	mov	r0, r3
    cc88:	2210      	movs	r2, #16
    cc8a:	47a0      	blx	r4
	if (len < 0) {
    cc8c:	1e04      	subs	r4, r0, #0
    cc8e:	da06      	bge.n	cc9e <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
    cc90:	4622      	mov	r2, r4
    cc92:	2145      	movs	r1, #69	; 0x45
    cc94:	4804      	ldr	r0, [pc, #16]	; (cca8 <db_hash_set+0x28>)
    cc96:	f01a fe1c 	bl	278d2 <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    cc9a:	4620      	mov	r0, r4
    cc9c:	bd10      	pop	{r4, pc}
	return 0;
    cc9e:	2400      	movs	r4, #0
    cca0:	e7fb      	b.n	cc9a <db_hash_set+0x1a>
    cca2:	bf00      	nop
    cca4:	20005841 	.word	0x20005841
    cca8:	0003263a 	.word	0x0003263a

0000ccac <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    ccac:	2210      	movs	r2, #16
{
    ccae:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    ccb0:	4906      	ldr	r1, [pc, #24]	; (cccc <db_hash_store+0x20>)
    ccb2:	4807      	ldr	r0, [pc, #28]	; (ccd0 <db_hash_store+0x24>)
    ccb4:	f7f9 f952 	bl	5f5c <settings_save_one>
	if (err) {
    ccb8:	4602      	mov	r2, r0
    ccba:	b128      	cbz	r0, ccc8 <db_hash_store+0x1c>
		BT_ERR("Failed to save Database Hash (err %d)", err);
    ccbc:	2145      	movs	r1, #69	; 0x45
    ccbe:	4805      	ldr	r0, [pc, #20]	; (ccd4 <db_hash_store+0x28>)
}
    ccc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    ccc4:	f01a be05 	b.w	278d2 <printk>
}
    ccc8:	bd08      	pop	{r3, pc}
    ccca:	bf00      	nop
    cccc:	20005831 	.word	0x20005831
    ccd0:	00032660 	.word	0x00032660
    ccd4:	00032668 	.word	0x00032668

0000ccd8 <sc_store>:
{
    ccd8:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    ccda:	4604      	mov	r4, r0
{
    ccdc:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    ccde:	f814 2b01 	ldrb.w	r2, [r4], #1
{
    cce2:	4605      	mov	r5, r0
	if (cfg->id) {
    cce4:	b1ca      	cbz	r2, cd1a <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    cce6:	ae02      	add	r6, sp, #8
    cce8:	2104      	movs	r1, #4
    ccea:	4630      	mov	r0, r6
    ccec:	f01a fd56 	bl	2779c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    ccf0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    ccf2:	4623      	mov	r3, r4
    ccf4:	4a0a      	ldr	r2, [pc, #40]	; (cd20 <sc_store+0x48>)
    ccf6:	2124      	movs	r1, #36	; 0x24
    ccf8:	a803      	add	r0, sp, #12
    ccfa:	f7fb feb9 	bl	8a70 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    ccfe:	2204      	movs	r2, #4
    cd00:	f105 0108 	add.w	r1, r5, #8
    cd04:	a803      	add	r0, sp, #12
    cd06:	f7f9 f929 	bl	5f5c <settings_save_one>
	if (err) {
    cd0a:	4602      	mov	r2, r0
    cd0c:	b118      	cbz	r0, cd16 <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
    cd0e:	2145      	movs	r1, #69	; 0x45
    cd10:	4804      	ldr	r0, [pc, #16]	; (cd24 <sc_store+0x4c>)
    cd12:	f01a fdde 	bl	278d2 <printk>
}
    cd16:	b00c      	add	sp, #48	; 0x30
    cd18:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    cd1a:	9200      	str	r2, [sp, #0]
    cd1c:	e7e9      	b.n	ccf2 <sc_store+0x1a>
    cd1e:	bf00      	nop
    cd20:	000327bd 	.word	0x000327bd
    cd24:	00032793 	.word	0x00032793

0000cd28 <bt_gatt_service_init.part.13>:
static void bt_gatt_service_init(void)
    cd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    cd2a:	4d0d      	ldr	r5, [pc, #52]	; (cd60 <bt_gatt_service_init.part.13+0x38>)
    cd2c:	4c0d      	ldr	r4, [pc, #52]	; (cd64 <bt_gatt_service_init.part.13+0x3c>)
    cd2e:	4e0e      	ldr	r6, [pc, #56]	; (cd68 <bt_gatt_service_init.part.13+0x40>)
    cd30:	462f      	mov	r7, r5
    cd32:	42ac      	cmp	r4, r5
    cd34:	d90a      	bls.n	cd4c <bt_gatt_service_init.part.13+0x24>
    cd36:	4631      	mov	r1, r6
    cd38:	480c      	ldr	r0, [pc, #48]	; (cd6c <bt_gatt_service_init.part.13+0x44>)
    cd3a:	f44f 6283 	mov.w	r2, #1048	; 0x418
    cd3e:	f01a fdc8 	bl	278d2 <printk>
    cd42:	f44f 6183 	mov.w	r1, #1048	; 0x418
    cd46:	4630      	mov	r0, r6
    cd48:	f01b f83c 	bl	27dc4 <assert_post_action>
    cd4c:	42bc      	cmp	r4, r7
    cd4e:	d300      	bcc.n	cd52 <bt_gatt_service_init.part.13+0x2a>
}
    cd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		last_static_handle += svc->attr_count;
    cd52:	4a07      	ldr	r2, [pc, #28]	; (cd70 <bt_gatt_service_init.part.13+0x48>)
    cd54:	6863      	ldr	r3, [r4, #4]
    cd56:	8811      	ldrh	r1, [r2, #0]
    cd58:	440b      	add	r3, r1
    cd5a:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    cd5c:	3408      	adds	r4, #8
    cd5e:	e7e8      	b.n	cd32 <bt_gatt_service_init.part.13+0xa>
    cd60:	0002eedc 	.word	0x0002eedc
    cd64:	0002eecc 	.word	0x0002eecc
    cd68:	00032515 	.word	0x00032515
    cd6c:	0003067f 	.word	0x0003067f
    cd70:	20005696 	.word	0x20005696

0000cd74 <read_ppcp>:
{
    cd74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cd76:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    cd78:	4a07      	ldr	r2, [pc, #28]	; (cd98 <read_ppcp+0x24>)
{
    cd7a:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    cd7c:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    cd80:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    cd84:	2308      	movs	r3, #8
    cd86:	9300      	str	r3, [sp, #0]
    cd88:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    cd8c:	446b      	add	r3, sp
    cd8e:	f01d fe7e 	bl	2aa8e <bt_gatt_attr_read.constprop.24>
}
    cd92:	b005      	add	sp, #20
    cd94:	f85d fb04 	ldr.w	pc, [sp], #4
    cd98:	00280018 	.word	0x00280018

0000cd9c <sc_commit.part.15>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    cd9c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    cda0:	2300      	movs	r3, #0
    cda2:	4902      	ldr	r1, [pc, #8]	; (cdac <sc_commit.part.15+0x10>)
    cda4:	4802      	ldr	r0, [pc, #8]	; (cdb0 <sc_commit.part.15+0x14>)
    cda6:	f018 bb77 	b.w	25498 <k_delayed_work_submit_to_queue>
    cdaa:	bf00      	nop
    cdac:	200026c0 	.word	0x200026c0
    cdb0:	20003028 	.word	0x20003028

0000cdb4 <sc_commit>:
{
    cdb4:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cdb6:	f06f 0102 	mvn.w	r1, #2
    cdba:	4806      	ldr	r0, [pc, #24]	; (cdd4 <sc_commit+0x20>)
    cdbc:	f01d fe3e 	bl	2aa3c <atomic_and>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    cdc0:	2100      	movs	r1, #0
    cdc2:	4804      	ldr	r0, [pc, #16]	; (cdd4 <sc_commit+0x20>)
    cdc4:	f01d fecd 	bl	2ab62 <atomic_test_bit>
    cdc8:	b108      	cbz	r0, cdce <sc_commit+0x1a>
    cdca:	f7ff ffe7 	bl	cd9c <sc_commit.part.15>
}
    cdce:	2000      	movs	r0, #0
    cdd0:	bd08      	pop	{r3, pc}
    cdd2:	bf00      	nop
    cdd4:	200026f0 	.word	0x200026f0

0000cdd8 <ccc_save>:
{
    cdd8:	b538      	push	{r3, r4, r5, lr}
    cdda:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    cddc:	4b0b      	ldr	r3, [pc, #44]	; (ce0c <ccc_save+0x34>)
    cdde:	6882      	ldr	r2, [r0, #8]
    cde0:	429a      	cmp	r2, r3
{
    cde2:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    cde4:	d10f      	bne.n	ce06 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    cde6:	7922      	ldrb	r2, [r4, #4]
    cde8:	6821      	ldr	r1, [r4, #0]
    cdea:	68c0      	ldr	r0, [r0, #12]
    cdec:	f01d fec2 	bl	2ab74 <ccc_find_cfg>
	if (!cfg) {
    cdf0:	b148      	cbz	r0, ce06 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    cdf2:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    cdf6:	8901      	ldrh	r1, [r0, #8]
    cdf8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    cdfc:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    cdfe:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    ce00:	8151      	strh	r1, [r2, #10]
	save->count++;
    ce02:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    ce06:	2001      	movs	r0, #1
    ce08:	bd38      	pop	{r3, r4, r5, pc}
    ce0a:	bf00      	nop
    ce0c:	0000d3b1 	.word	0x0000d3b1

0000ce10 <ccc_load>:
{
    ce10:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    ce12:	4b20      	ldr	r3, [pc, #128]	; (ce94 <ccc_load+0x84>)
{
    ce14:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    ce16:	6882      	ldr	r2, [r0, #8]
    ce18:	429a      	cmp	r2, r3
    ce1a:	d002      	beq.n	ce22 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    ce1c:	2001      	movs	r0, #1
}
    ce1e:	b003      	add	sp, #12
    ce20:	bd30      	pop	{r4, r5, pc}
	if (!load->entry) {
    ce22:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
    ce24:	68c5      	ldr	r5, [r0, #12]
	if (!load->entry) {
    ce26:	b94b      	cbnz	r3, ce3c <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    ce28:	7922      	ldrb	r2, [r4, #4]
    ce2a:	6821      	ldr	r1, [r4, #0]
    ce2c:	4628      	mov	r0, r5
    ce2e:	f01d fea1 	bl	2ab74 <ccc_find_cfg>
	if (!cfg) {
    ce32:	2800      	cmp	r0, #0
    ce34:	d0f2      	beq.n	ce1c <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    ce36:	f01d fe17 	bl	2aa68 <clear_ccc_cfg>
    ce3a:	e7ef      	b.n	ce1c <ccc_load+0xc>
	} else if (!load->count) {
    ce3c:	68e0      	ldr	r0, [r4, #12]
    ce3e:	2800      	cmp	r0, #0
    ce40:	d0ed      	beq.n	ce1e <ccc_load+0xe>
	if (load->entry->handle != handle) {
    ce42:	881b      	ldrh	r3, [r3, #0]
    ce44:	4299      	cmp	r1, r3
    ce46:	d00a      	beq.n	ce5e <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    ce48:	d9e8      	bls.n	ce1c <ccc_load+0xc>
	load->count--;
    ce4a:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    ce4c:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    ce4e:	3801      	subs	r0, #1
	load->entry++;
    ce50:	3304      	adds	r3, #4
	load->count--;
    ce52:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    ce54:	3000      	adds	r0, #0
	load->entry++;
    ce56:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    ce58:	bf18      	it	ne
    ce5a:	2001      	movne	r0, #1
    ce5c:	e7df      	b.n	ce1e <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    ce5e:	7922      	ldrb	r2, [r4, #4]
    ce60:	6821      	ldr	r1, [r4, #0]
    ce62:	4628      	mov	r0, r5
    ce64:	f01d fe86 	bl	2ab74 <ccc_find_cfg>
	if (!cfg) {
    ce68:	4602      	mov	r2, r0
    ce6a:	b978      	cbnz	r0, ce8c <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    ce6c:	9000      	str	r0, [sp, #0]
    ce6e:	4669      	mov	r1, sp
    ce70:	f8cd 0003 	str.w	r0, [sp, #3]
    ce74:	4628      	mov	r0, r5
    ce76:	f01d fe7d 	bl	2ab74 <ccc_find_cfg>
		if (!cfg) {
    ce7a:	4602      	mov	r2, r0
    ce7c:	2800      	cmp	r0, #0
    ce7e:	d0e4      	beq.n	ce4a <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    ce80:	6821      	ldr	r1, [r4, #0]
    ce82:	3001      	adds	r0, #1
    ce84:	f01d fde9 	bl	2aa5a <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    ce88:	7923      	ldrb	r3, [r4, #4]
    ce8a:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
    ce8c:	68a3      	ldr	r3, [r4, #8]
    ce8e:	885b      	ldrh	r3, [r3, #2]
    ce90:	8113      	strh	r3, [r2, #8]
    ce92:	e7da      	b.n	ce4a <ccc_load+0x3a>
    ce94:	0000d3b1 	.word	0x0000d3b1

0000ce98 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    ce98:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    ce9a:	6881      	ldr	r1, [r0, #8]
{
    ce9c:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    ce9e:	4a07      	ldr	r2, [pc, #28]	; (cebc <remove_peer_from_attr+0x24>)
    cea0:	4291      	cmp	r1, r2
    cea2:	d109      	bne.n	ceb8 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    cea4:	791a      	ldrb	r2, [r3, #4]
    cea6:	6819      	ldr	r1, [r3, #0]
    cea8:	68c0      	ldr	r0, [r0, #12]
    ceaa:	f01d fe63 	bl	2ab74 <ccc_find_cfg>
	if (cfg) {
    ceae:	b118      	cbz	r0, ceb8 <remove_peer_from_attr+0x20>
    ceb0:	2300      	movs	r3, #0
    ceb2:	6003      	str	r3, [r0, #0]
    ceb4:	6043      	str	r3, [r0, #4]
    ceb6:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
    ceb8:	2001      	movs	r0, #1
    ceba:	bd08      	pop	{r3, pc}
    cebc:	0000d3b1 	.word	0x0000d3b1

0000cec0 <find_cf_cfg_by_addr>:
{
    cec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cec4:	4c0d      	ldr	r4, [pc, #52]	; (cefc <find_cf_cfg_by_addr+0x3c>)
    cec6:	4607      	mov	r7, r0
    cec8:	4688      	mov	r8, r1
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    ceca:	2600      	movs	r6, #0
    cecc:	4625      	mov	r5, r4
			if (id == cf_cfg[i].id &&
    cece:	7823      	ldrb	r3, [r4, #0]
    ced0:	42bb      	cmp	r3, r7
    ced2:	d10b      	bne.n	ceec <find_cf_cfg_by_addr+0x2c>
	return memcmp(a, b, sizeof(*a));
    ced4:	2207      	movs	r2, #7
    ced6:	1c61      	adds	r1, r4, #1
    ced8:	4640      	mov	r0, r8
    ceda:	ea4f 1906 	mov.w	r9, r6, lsl #4
    cede:	f021 f9d6 	bl	2e28e <memcmp>
    cee2:	b918      	cbnz	r0, ceec <find_cf_cfg_by_addr+0x2c>
				return &cf_cfg[i];
    cee4:	eb05 0009 	add.w	r0, r5, r9
}
    cee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    ceec:	3601      	adds	r6, #1
    ceee:	2e03      	cmp	r6, #3
    cef0:	f104 0410 	add.w	r4, r4, #16
    cef4:	d1eb      	bne.n	cece <find_cf_cfg_by_addr+0xe>
	return NULL;
    cef6:	2000      	movs	r0, #0
    cef8:	e7f6      	b.n	cee8 <find_cf_cfg_by_addr+0x28>
    cefa:	bf00      	nop
    cefc:	20003ad8 	.word	0x20003ad8

0000cf00 <find_sc_cfg>:
{
    cf00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf04:	4c0e      	ldr	r4, [pc, #56]	; (cf40 <find_sc_cfg+0x40>)
    cf06:	4607      	mov	r7, r0
    cf08:	4688      	mov	r8, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    cf0a:	2600      	movs	r6, #0
    cf0c:	4625      	mov	r5, r4
    cf0e:	f04f 090c 	mov.w	r9, #12
		if (id == sc_cfg[i].id &&
    cf12:	7823      	ldrb	r3, [r4, #0]
    cf14:	42bb      	cmp	r3, r7
    cf16:	d10b      	bne.n	cf30 <find_sc_cfg+0x30>
    cf18:	2207      	movs	r2, #7
    cf1a:	4641      	mov	r1, r8
    cf1c:	1c60      	adds	r0, r4, #1
    cf1e:	fb09 fa06 	mul.w	sl, r9, r6
    cf22:	f021 f9b4 	bl	2e28e <memcmp>
    cf26:	b918      	cbnz	r0, cf30 <find_sc_cfg+0x30>
			return &sc_cfg[i];
    cf28:	eb05 000a 	add.w	r0, r5, sl
}
    cf2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    cf30:	3601      	adds	r6, #1
    cf32:	2e03      	cmp	r6, #3
    cf34:	f104 040c 	add.w	r4, r4, #12
    cf38:	d1eb      	bne.n	cf12 <find_sc_cfg+0x12>
	return NULL;
    cf3a:	2000      	movs	r0, #0
    cf3c:	e7f6      	b.n	cf2c <find_sc_cfg+0x2c>
    cf3e:	bf00      	nop
    cf40:	20005698 	.word	0x20005698

0000cf44 <sc_save>:
{
    cf44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cf48:	4680      	mov	r8, r0
    cf4a:	460f      	mov	r7, r1
    cf4c:	4616      	mov	r6, r2
    cf4e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    cf50:	f7ff ffd6 	bl	cf00 <find_sc_cfg>
	if (!cfg) {
    cf54:	4604      	mov	r4, r0
    cf56:	b998      	cbnz	r0, cf80 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    cf58:	4669      	mov	r1, sp
    cf5a:	9000      	str	r0, [sp, #0]
    cf5c:	f8cd 0003 	str.w	r0, [sp, #3]
    cf60:	f7ff ffce 	bl	cf00 <find_sc_cfg>
		if (!cfg) {
    cf64:	4604      	mov	r4, r0
    cf66:	b930      	cbnz	r0, cf76 <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
    cf68:	2145      	movs	r1, #69	; 0x45
    cf6a:	4812      	ldr	r0, [pc, #72]	; (cfb4 <sc_save+0x70>)
    cf6c:	f01a fcb1 	bl	278d2 <printk>
}
    cf70:	b002      	add	sp, #8
    cf72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    cf76:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    cf7a:	4639      	mov	r1, r7
    cf7c:	f01d fd6d 	bl	2aa5a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    cf80:	8922      	ldrh	r2, [r4, #8]
    cf82:	8963      	ldrh	r3, [r4, #10]
    cf84:	b96a      	cbnz	r2, cfa2 <sc_save+0x5e>
    cf86:	b973      	cbnz	r3, cfa6 <sc_save+0x62>
		cfg->data.start = start;
    cf88:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    cf8a:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    cf8c:	4621      	mov	r1, r4
    cf8e:	f811 0b01 	ldrb.w	r0, [r1], #1
    cf92:	f01c ff7a 	bl	29e8a <bt_addr_le_is_bonded>
    cf96:	2800      	cmp	r0, #0
    cf98:	d0ea      	beq.n	cf70 <sc_save+0x2c>
		sc_store(cfg);
    cf9a:	4620      	mov	r0, r4
    cf9c:	f7ff fe9c 	bl	ccd8 <sc_store>
    cfa0:	e7e6      	b.n	cf70 <sc_save+0x2c>
	if (new_start >= *start && new_end <= *end) {
    cfa2:	4296      	cmp	r6, r2
    cfa4:	d302      	bcc.n	cfac <sc_save+0x68>
    cfa6:	429d      	cmp	r5, r3
    cfa8:	d8ef      	bhi.n	cf8a <sc_save+0x46>
    cfaa:	e7e1      	b.n	cf70 <sc_save+0x2c>
	if (*end < new_end) {
    cfac:	429d      	cmp	r5, r3
		*start = new_start;
    cfae:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    cfb0:	d9ec      	bls.n	cf8c <sc_save+0x48>
    cfb2:	e7ea      	b.n	cf8a <sc_save+0x46>
    cfb4:	00032727 	.word	0x00032727

0000cfb8 <bt_gatt_clear_sc>:
{
    cfb8:	b570      	push	{r4, r5, r6, lr}
    cfba:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    cfbc:	f7ff ffa0 	bl	cf00 <find_sc_cfg>
	if (!cfg) {
    cfc0:	4605      	mov	r5, r0
    cfc2:	b1d8      	cbz	r0, cffc <bt_gatt_clear_sc+0x44>
		if (cfg->id) {
    cfc4:	4604      	mov	r4, r0
    cfc6:	f814 2b01 	ldrb.w	r2, [r4], #1
    cfca:	b1d2      	cbz	r2, d002 <bt_gatt_clear_sc+0x4a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    cfcc:	ae02      	add	r6, sp, #8
    cfce:	2104      	movs	r1, #4
    cfd0:	4630      	mov	r0, r6
    cfd2:	f01a fbe3 	bl	2779c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    cfd6:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    cfd8:	4a0b      	ldr	r2, [pc, #44]	; (d008 <bt_gatt_clear_sc+0x50>)
    cfda:	4623      	mov	r3, r4
    cfdc:	2124      	movs	r1, #36	; 0x24
    cfde:	a803      	add	r0, sp, #12
    cfe0:	f7fb fd46 	bl	8a70 <bt_settings_encode_key>
		err = settings_delete(key);
    cfe4:	a803      	add	r0, sp, #12
    cfe6:	f01b f87d 	bl	280e4 <settings_delete>
		if (err) {
    cfea:	4602      	mov	r2, r0
    cfec:	b118      	cbz	r0, cff6 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
    cfee:	2145      	movs	r1, #69	; 0x45
    cff0:	4806      	ldr	r0, [pc, #24]	; (d00c <bt_gatt_clear_sc+0x54>)
    cff2:	f01a fc6e 	bl	278d2 <printk>
	clear_sc_cfg(cfg);
    cff6:	4628      	mov	r0, r5
    cff8:	f01d fd44 	bl	2aa84 <clear_sc_cfg>
}
    cffc:	2000      	movs	r0, #0
    cffe:	b00c      	add	sp, #48	; 0x30
    d000:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    d002:	9200      	str	r2, [sp, #0]
    d004:	e7e8      	b.n	cfd8 <bt_gatt_clear_sc+0x20>
    d006:	bf00      	nop
    d008:	000327bd 	.word	0x000327bd
    d00c:	000324c5 	.word	0x000324c5

0000d010 <sc_clear>:
{
    d010:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d012:	f100 0488 	add.w	r4, r0, #136	; 0x88
{
    d016:	4605      	mov	r5, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d018:	4621      	mov	r1, r4
    d01a:	7a00      	ldrb	r0, [r0, #8]
    d01c:	f01c ff35 	bl	29e8a <bt_addr_le_is_bonded>
    d020:	7a2b      	ldrb	r3, [r5, #8]
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    d022:	4621      	mov	r1, r4
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d024:	b150      	cbz	r0, d03c <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    d026:	4618      	mov	r0, r3
    d028:	f7ff ffc6 	bl	cfb8 <bt_gatt_clear_sc>
		if (err) {
    d02c:	4602      	mov	r2, r0
    d02e:	b168      	cbz	r0, d04c <sc_clear+0x3c>
			BT_ERR("Failed to clear SC %d", err);
    d030:	2145      	movs	r1, #69	; 0x45
    d032:	4807      	ldr	r0, [pc, #28]	; (d050 <sc_clear+0x40>)
}
    d034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			BT_ERR("Failed to clear SC %d", err);
    d038:	f01a bc4b 	b.w	278d2 <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    d03c:	4618      	mov	r0, r3
    d03e:	f7ff ff5f 	bl	cf00 <find_sc_cfg>
		if (cfg) {
    d042:	b118      	cbz	r0, d04c <sc_clear+0x3c>
}
    d044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
    d048:	f01d bd1c 	b.w	2aa84 <clear_sc_cfg>
}
    d04c:	bd38      	pop	{r3, r4, r5, pc}
    d04e:	bf00      	nop
    d050:	0003270c 	.word	0x0003270c

0000d054 <disconnected_cb>:
{
    d054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d058:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d05a:	4b23      	ldr	r3, [pc, #140]	; (d0e8 <disconnected_cb+0x94>)
    d05c:	6882      	ldr	r2, [r0, #8]
    d05e:	429a      	cmp	r2, r3
{
    d060:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d062:	d12a      	bne.n	d0ba <disconnected_cb+0x66>
	ccc = attr->user_data;
    d064:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    d066:	8beb      	ldrh	r3, [r5, #30]
    d068:	b33b      	cbz	r3, d0ba <disconnected_cb+0x66>
				if (ccc == &sc_ccc) {
    d06a:	f8df b080 	ldr.w	fp, [pc, #128]	; d0ec <disconnected_cb+0x98>
    d06e:	1c6c      	adds	r4, r5, #1
    d070:	f105 0a1f 	add.w	sl, r5, #31
	value_used = false;
    d074:	2600      	movs	r6, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d076:	f107 0988 	add.w	r9, r7, #136	; 0x88
		if (!cfg->value) {
    d07a:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    d07e:	b193      	cbz	r3, d0a6 <disconnected_cb+0x52>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d080:	4622      	mov	r2, r4
    d082:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    d086:	4638      	mov	r0, r7
    d088:	f01c ffec 	bl	2a064 <bt_conn_is_peer_addr_le>
    d08c:	b9c0      	cbnz	r0, d0c0 <disconnected_cb+0x6c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d08e:	4621      	mov	r1, r4
    d090:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    d094:	f01d f82f 	bl	2a0f6 <bt_conn_lookup_addr_le>
			if (tmp) {
    d098:	b128      	cbz	r0, d0a6 <disconnected_cb+0x52>
				if (tmp->state == BT_CONN_CONNECTED) {
    d09a:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
    d09c:	2b07      	cmp	r3, #7
    d09e:	bf08      	it	eq
    d0a0:	2601      	moveq	r6, #1
				bt_conn_unref(tmp);
    d0a2:	f7fe f91b 	bl	b2dc <bt_conn_unref>
    d0a6:	340a      	adds	r4, #10
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    d0a8:	45a2      	cmp	sl, r4
    d0aa:	d1e6      	bne.n	d07a <disconnected_cb+0x26>
	if (!value_used) {
    d0ac:	b92e      	cbnz	r6, d0ba <disconnected_cb+0x66>
		if (ccc->cfg_changed) {
    d0ae:	6a2b      	ldr	r3, [r5, #32]
		ccc->value = 0U;
    d0b0:	83ee      	strh	r6, [r5, #30]
		if (ccc->cfg_changed) {
    d0b2:	b113      	cbz	r3, d0ba <disconnected_cb+0x66>
			ccc->cfg_changed(attr, ccc->value);
    d0b4:	4631      	mov	r1, r6
    d0b6:	4640      	mov	r0, r8
    d0b8:	4798      	blx	r3
}
    d0ba:	2001      	movs	r0, #1
    d0bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d0c0:	4649      	mov	r1, r9
    d0c2:	7a38      	ldrb	r0, [r7, #8]
    d0c4:	f01c fee1 	bl	29e8a <bt_addr_le_is_bonded>
    d0c8:	b940      	cbnz	r0, d0dc <disconnected_cb+0x88>
				if (ccc == &sc_ccc) {
    d0ca:	455d      	cmp	r5, fp
    d0cc:	d102      	bne.n	d0d4 <disconnected_cb+0x80>
					sc_clear(conn);
    d0ce:	4638      	mov	r0, r7
    d0d0:	f7ff ff9e 	bl	d010 <sc_clear>
				clear_ccc_cfg(cfg);
    d0d4:	1e60      	subs	r0, r4, #1
    d0d6:	f01d fcc7 	bl	2aa68 <clear_ccc_cfg>
    d0da:	e7e4      	b.n	d0a6 <disconnected_cb+0x52>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d0dc:	4649      	mov	r1, r9
    d0de:	4620      	mov	r0, r4
    d0e0:	f01d fcbb 	bl	2aa5a <bt_addr_le_copy>
    d0e4:	e7df      	b.n	d0a6 <disconnected_cb+0x52>
    d0e6:	bf00      	nop
    d0e8:	0000d3b1 	.word	0x0000d3b1
    d0ec:	20001304 	.word	0x20001304

0000d0f0 <sc_set>:
{
    d0f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d0f4:	460e      	mov	r6, r1
    d0f6:	b087      	sub	sp, #28
    d0f8:	4690      	mov	r8, r2
    d0fa:	4699      	mov	r9, r3
	if (!name) {
    d0fc:	4604      	mov	r4, r0
    d0fe:	b948      	cbnz	r0, d114 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
    d100:	2145      	movs	r1, #69	; 0x45
    d102:	4828      	ldr	r0, [pc, #160]	; (d1a4 <sc_set+0xb4>)
    d104:	f01a fbe5 	bl	278d2 <printk>
		return -EINVAL;
    d108:	f06f 0515 	mvn.w	r5, #21
}
    d10c:	4628      	mov	r0, r5
    d10e:	b007      	add	sp, #28
    d110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    d114:	a902      	add	r1, sp, #8
    d116:	f01c fbbf 	bl	29898 <bt_settings_decode_key>
	if (err) {
    d11a:	4605      	mov	r5, r0
    d11c:	b128      	cbz	r0, d12a <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    d11e:	4622      	mov	r2, r4
    d120:	2145      	movs	r1, #69	; 0x45
    d122:	4821      	ldr	r0, [pc, #132]	; (d1a8 <sc_set+0xb8>)
    d124:	f01a fbd5 	bl	278d2 <printk>
    d128:	e7ee      	b.n	d108 <sc_set+0x18>
	settings_name_next(name, &next);
    d12a:	a901      	add	r1, sp, #4
    d12c:	4620      	mov	r0, r4
    d12e:	f01a fffd 	bl	2812c <settings_name_next>
	if (!next) {
    d132:	9801      	ldr	r0, [sp, #4]
    d134:	b1d8      	cbz	r0, d16e <sc_set+0x7e>
		id = strtol(next, NULL, 10);
    d136:	220a      	movs	r2, #10
    d138:	4629      	mov	r1, r5
    d13a:	f01a fabf 	bl	276bc <strtol>
    d13e:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    d140:	a902      	add	r1, sp, #8
    d142:	4638      	mov	r0, r7
    d144:	f7ff fedc 	bl	cf00 <find_sc_cfg>
	if (!cfg && len_rd) {
    d148:	4604      	mov	r4, r0
    d14a:	bb28      	cbnz	r0, d198 <sc_set+0xa8>
    d14c:	2e00      	cmp	r6, #0
    d14e:	d0dd      	beq.n	d10c <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    d150:	a904      	add	r1, sp, #16
    d152:	9004      	str	r0, [sp, #16]
    d154:	f8cd 0013 	str.w	r0, [sp, #19]
    d158:	f7ff fed2 	bl	cf00 <find_sc_cfg>
		if (!cfg) {
    d15c:	4604      	mov	r4, r0
    d15e:	b940      	cbnz	r0, d172 <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
    d160:	2145      	movs	r1, #69	; 0x45
    d162:	4812      	ldr	r0, [pc, #72]	; (d1ac <sc_set+0xbc>)
    d164:	f01a fbb5 	bl	278d2 <printk>
			return -ENOMEM;
    d168:	f06f 050b 	mvn.w	r5, #11
    d16c:	e7ce      	b.n	d10c <sc_set+0x1c>
		id = BT_ID_DEFAULT;
    d16e:	462f      	mov	r7, r5
    d170:	e7e6      	b.n	d140 <sc_set+0x50>
		cfg->id = id;
    d172:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    d176:	a902      	add	r1, sp, #8
    d178:	f01d fc6f 	bl	2aa5a <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    d17c:	f104 0108 	add.w	r1, r4, #8
    d180:	2204      	movs	r2, #4
    d182:	4648      	mov	r0, r9
    d184:	47c0      	blx	r8
		if (len < 0) {
    d186:	1e04      	subs	r4, r0, #0
    d188:	dac0      	bge.n	d10c <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
    d18a:	4622      	mov	r2, r4
    d18c:	2145      	movs	r1, #69	; 0x45
    d18e:	4808      	ldr	r0, [pc, #32]	; (d1b0 <sc_set+0xc0>)
    d190:	f01a fb9f 	bl	278d2 <printk>
			return len;
    d194:	4625      	mov	r5, r4
    d196:	e7b9      	b.n	d10c <sc_set+0x1c>
	if (len_rd) {
    d198:	2e00      	cmp	r6, #0
    d19a:	d1ef      	bne.n	d17c <sc_set+0x8c>
    d19c:	6026      	str	r6, [r4, #0]
    d19e:	6066      	str	r6, [r4, #4]
    d1a0:	60a6      	str	r6, [r4, #8]
    d1a2:	e7b3      	b.n	d10c <sc_set+0x1c>
    d1a4:	000316aa 	.word	0x000316aa
    d1a8:	0003274b 	.word	0x0003274b
    d1ac:	0003276c 	.word	0x0003276c
    d1b0:	0003263a 	.word	0x0003263a

0000d1b4 <find_cf_cfg>:
{
    d1b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d1b6:	4c0f      	ldr	r4, [pc, #60]	; (d1f4 <find_cf_cfg+0x40>)
    d1b8:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d1ba:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    d1bc:	4627      	mov	r7, r4
		if (!conn) {
    d1be:	1c60      	adds	r0, r4, #1
    d1c0:	b985      	cbnz	r5, d1e4 <find_cf_cfg+0x30>
    d1c2:	2207      	movs	r2, #7
    d1c4:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d1c6:	9500      	str	r5, [sp, #0]
    d1c8:	f8cd 5003 	str.w	r5, [sp, #3]
    d1cc:	f021 f85f 	bl	2e28e <memcmp>
    d1d0:	b128      	cbz	r0, d1de <find_cf_cfg+0x2a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d1d2:	3601      	adds	r6, #1
    d1d4:	2e03      	cmp	r6, #3
    d1d6:	f104 0410 	add.w	r4, r4, #16
    d1da:	d1ef      	bne.n	d1bc <find_cf_cfg+0x8>
	return NULL;
    d1dc:	2700      	movs	r7, #0
}
    d1de:	4638      	mov	r0, r7
    d1e0:	b003      	add	sp, #12
    d1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d1e4:	4602      	mov	r2, r0
    d1e6:	7821      	ldrb	r1, [r4, #0]
    d1e8:	4628      	mov	r0, r5
    d1ea:	f01c ff3b 	bl	2a064 <bt_conn_is_peer_addr_le>
    d1ee:	2800      	cmp	r0, #0
    d1f0:	d0ef      	beq.n	d1d2 <find_cf_cfg+0x1e>
    d1f2:	e7f4      	b.n	d1de <find_cf_cfg+0x2a>
    d1f4:	20003ad8 	.word	0x20003ad8

0000d1f8 <cf_write>:
{
    d1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1fc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    d200:	2901      	cmp	r1, #1
{
    d202:	4606      	mov	r6, r0
    d204:	4617      	mov	r7, r2
    d206:	4698      	mov	r8, r3
	if (offset > sizeof(cfg->data)) {
    d208:	d842      	bhi.n	d290 <cf_write+0x98>
	if (offset + len > sizeof(cfg->data)) {
    d20a:	4419      	add	r1, r3
    d20c:	2901      	cmp	r1, #1
    d20e:	461d      	mov	r5, r3
    d210:	dc41      	bgt.n	d296 <cf_write+0x9e>
	cfg = find_cf_cfg(conn);
    d212:	f7ff ffcf 	bl	d1b4 <find_cf_cfg>
	if (!cfg) {
    d216:	4604      	mov	r4, r0
    d218:	b960      	cbnz	r0, d234 <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
    d21a:	f7ff ffcb 	bl	d1b4 <find_cf_cfg>
	if (!cfg) {
    d21e:	4604      	mov	r4, r0
    d220:	b940      	cbnz	r0, d234 <cf_write+0x3c>
		BT_WARN("No space to store Client Supported Features");
    d222:	2157      	movs	r1, #87	; 0x57
    d224:	481f      	ldr	r0, [pc, #124]	; (d2a4 <cf_write+0xac>)
    d226:	f01a fb54 	bl	278d2 <printk>
    d22a:	f06f 0510 	mvn.w	r5, #16
}
    d22e:	4628      	mov	r0, r5
    d230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    d234:	463b      	mov	r3, r7
    d236:	eb08 0c07 	add.w	ip, r8, r7
	for (i = 0U; i < len && i <= last_byte; i++) {
    d23a:	459c      	cmp	ip, r3
    d23c:	d115      	bne.n	d26a <cf_write+0x72>
	for (i = 0U; i < len && i < last_byte; i++) {
    d23e:	f1b8 0f00 	cmp.w	r8, #0
    d242:	d005      	beq.n	d250 <cf_write+0x58>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    d244:	783b      	ldrb	r3, [r7, #0]
    d246:	7a22      	ldrb	r2, [r4, #8]
    d248:	f003 0307 	and.w	r3, r3, #7
    d24c:	4313      	orrs	r3, r2
    d24e:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d250:	f106 0188 	add.w	r1, r6, #136	; 0x88
    d254:	1c60      	adds	r0, r4, #1
    d256:	f01d fc00 	bl	2aa5a <bt_addr_le_copy>
	cfg->id = conn->id;
    d25a:	4620      	mov	r0, r4
    d25c:	7a33      	ldrb	r3, [r6, #8]
    d25e:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    d262:	2100      	movs	r1, #0
    d264:	f01d fcb1 	bl	2abca <atomic_set_bit>
	return len;
    d268:	e7e1      	b.n	d22e <cf_write+0x36>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    d26a:	f813 2b01 	ldrb.w	r2, [r3], #1
    d26e:	7a20      	ldrb	r0, [r4, #8]
    d270:	2100      	movs	r1, #0
    d272:	4042      	eors	r2, r0
			if ((BIT(bit) & chg_bits) &&
    d274:	fa22 fe01 	lsr.w	lr, r2, r1
    d278:	f01e 0f01 	tst.w	lr, #1
    d27c:	d004      	beq.n	d288 <cf_write+0x90>
    d27e:	fa20 fe01 	lsr.w	lr, r0, r1
    d282:	f01e 0f01 	tst.w	lr, #1
    d286:	d109      	bne.n	d29c <cf_write+0xa4>
    d288:	3101      	adds	r1, #1
		for (bit = 0U; bit <= last_bit; bit++) {
    d28a:	2903      	cmp	r1, #3
    d28c:	d1f2      	bne.n	d274 <cf_write+0x7c>
    d28e:	e7d4      	b.n	d23a <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d290:	f06f 0506 	mvn.w	r5, #6
    d294:	e7cb      	b.n	d22e <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d296:	f06f 050c 	mvn.w	r5, #12
    d29a:	e7c8      	b.n	d22e <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    d29c:	f06f 0512 	mvn.w	r5, #18
    d2a0:	e7c5      	b.n	d22e <cf_write+0x36>
    d2a2:	bf00      	nop
    d2a4:	000325cd 	.word	0x000325cd

0000d2a8 <sc_indicate_rsp>:
{
    d2a8:	b510      	push	{r4, lr}
    d2aa:	f06f 0102 	mvn.w	r1, #2
    d2ae:	4604      	mov	r4, r0
    d2b0:	480d      	ldr	r0, [pc, #52]	; (d2e8 <sc_indicate_rsp+0x40>)
    d2b2:	f01d fbc3 	bl	2aa3c <atomic_and>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    d2b6:	2100      	movs	r1, #0
    d2b8:	480b      	ldr	r0, [pc, #44]	; (d2e8 <sc_indicate_rsp+0x40>)
    d2ba:	f01d fc52 	bl	2ab62 <atomic_test_bit>
    d2be:	b128      	cbz	r0, d2cc <sc_indicate_rsp+0x24>
    d2c0:	2200      	movs	r2, #0
    d2c2:	2300      	movs	r3, #0
    d2c4:	4909      	ldr	r1, [pc, #36]	; (d2ec <sc_indicate_rsp+0x44>)
    d2c6:	480a      	ldr	r0, [pc, #40]	; (d2f0 <sc_indicate_rsp+0x48>)
    d2c8:	f018 f8e6 	bl	25498 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    d2cc:	4620      	mov	r0, r4
    d2ce:	f7ff ff71 	bl	d1b4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    d2d2:	b140      	cbz	r0, d2e6 <sc_indicate_rsp+0x3e>
    d2d4:	7a03      	ldrb	r3, [r0, #8]
    d2d6:	07db      	lsls	r3, r3, #31
    d2d8:	d505      	bpl.n	d2e6 <sc_indicate_rsp+0x3e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    d2da:	2100      	movs	r1, #0
    d2dc:	300c      	adds	r0, #12
}
    d2de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    d2e2:	f01d bc72 	b.w	2abca <atomic_set_bit>
}
    d2e6:	bd10      	pop	{r4, pc}
    d2e8:	200026f0 	.word	0x200026f0
    d2ec:	200026c0 	.word	0x200026c0
    d2f0:	20003028 	.word	0x20003028

0000d2f4 <cf_set>:
{
    d2f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d2f8:	4689      	mov	r9, r1
    d2fa:	b085      	sub	sp, #20
    d2fc:	4617      	mov	r7, r2
    d2fe:	4698      	mov	r8, r3
	if (!name) {
    d300:	4605      	mov	r5, r0
    d302:	b948      	cbnz	r0, d318 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
    d304:	2145      	movs	r1, #69	; 0x45
    d306:	4826      	ldr	r0, [pc, #152]	; (d3a0 <cf_set+0xac>)
    d308:	f01a fae3 	bl	278d2 <printk>
		return -EINVAL;
    d30c:	f06f 0415 	mvn.w	r4, #21
}
    d310:	4620      	mov	r0, r4
    d312:	b005      	add	sp, #20
    d314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    d318:	a902      	add	r1, sp, #8
    d31a:	f01c fabd 	bl	29898 <bt_settings_decode_key>
	if (err) {
    d31e:	4604      	mov	r4, r0
    d320:	b128      	cbz	r0, d32e <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    d322:	462a      	mov	r2, r5
    d324:	2145      	movs	r1, #69	; 0x45
    d326:	481f      	ldr	r0, [pc, #124]	; (d3a4 <cf_set+0xb0>)
    d328:	f01a fad3 	bl	278d2 <printk>
    d32c:	e7ee      	b.n	d30c <cf_set+0x18>
	settings_name_next(name, &next);
    d32e:	a901      	add	r1, sp, #4
    d330:	4628      	mov	r0, r5
    d332:	f01a fefb 	bl	2812c <settings_name_next>
	if (!next) {
    d336:	9801      	ldr	r0, [sp, #4]
    d338:	b1a8      	cbz	r0, d366 <cf_set+0x72>
		id = strtol(next, NULL, 10);
    d33a:	220a      	movs	r2, #10
    d33c:	4621      	mov	r1, r4
    d33e:	f01a f9bd 	bl	276bc <strtol>
    d342:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    d344:	a902      	add	r1, sp, #8
    d346:	4630      	mov	r0, r6
    d348:	f7ff fdba 	bl	cec0 <find_cf_cfg_by_addr>
	if (!cfg) {
    d34c:	4605      	mov	r5, r0
    d34e:	b988      	cbnz	r0, d374 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
    d350:	f7ff ff30 	bl	d1b4 <find_cf_cfg>
		if (!cfg) {
    d354:	4605      	mov	r5, r0
    d356:	b940      	cbnz	r0, d36a <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
    d358:	2145      	movs	r1, #69	; 0x45
    d35a:	4813      	ldr	r0, [pc, #76]	; (d3a8 <cf_set+0xb4>)
    d35c:	f01a fab9 	bl	278d2 <printk>
			return -ENOMEM;
    d360:	f06f 040b 	mvn.w	r4, #11
    d364:	e7d4      	b.n	d310 <cf_set+0x1c>
		id = BT_ID_DEFAULT;
    d366:	4626      	mov	r6, r4
    d368:	e7ec      	b.n	d344 <cf_set+0x50>
		cfg->id = id;
    d36a:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    d36e:	a902      	add	r1, sp, #8
    d370:	f01d fb73 	bl	2aa5a <bt_addr_le_copy>
	if (len_rd) {
    d374:	f1b9 0f00 	cmp.w	r9, #0
    d378:	d00d      	beq.n	d396 <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    d37a:	f105 0108 	add.w	r1, r5, #8
    d37e:	2201      	movs	r2, #1
    d380:	4640      	mov	r0, r8
    d382:	47b8      	blx	r7
		if (len < 0) {
    d384:	1e05      	subs	r5, r0, #0
    d386:	dac3      	bge.n	d310 <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
    d388:	462a      	mov	r2, r5
    d38a:	2145      	movs	r1, #69	; 0x45
    d38c:	4807      	ldr	r0, [pc, #28]	; (d3ac <cf_set+0xb8>)
    d38e:	f01a faa0 	bl	278d2 <printk>
			return len;
    d392:	462c      	mov	r4, r5
    d394:	e7bc      	b.n	d310 <cf_set+0x1c>
		clear_cf_cfg(cfg);
    d396:	4628      	mov	r0, r5
    d398:	f01d fbcb 	bl	2ab32 <clear_cf_cfg>
    d39c:	e7b8      	b.n	d310 <cf_set+0x1c>
    d39e:	bf00      	nop
    d3a0:	000316aa 	.word	0x000316aa
    d3a4:	0003274b 	.word	0x0003274b
    d3a8:	000325a6 	.word	0x000325a6
    d3ac:	0003263a 	.word	0x0003263a

0000d3b0 <bt_gatt_attr_write_ccc>:
{
    d3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d3b4:	4698      	mov	r8, r3
    d3b6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    d3ba:	68ce      	ldr	r6, [r1, #12]
{
    d3bc:	4607      	mov	r7, r0
    d3be:	4689      	mov	r9, r1
	if (offset) {
    d3c0:	2b00      	cmp	r3, #0
    d3c2:	d144      	bne.n	d44e <bt_gatt_attr_write_ccc+0x9e>
	if (!len || len > sizeof(uint16_t)) {
    d3c4:	f108 33ff 	add.w	r3, r8, #4294967295
    d3c8:	2b01      	cmp	r3, #1
    d3ca:	d843      	bhi.n	d454 <bt_gatt_attr_write_ccc+0xa4>
	if (len < sizeof(uint16_t)) {
    d3cc:	f1b8 0f01 	cmp.w	r8, #1
		value = *(uint8_t *)buf;
    d3d0:	7814      	ldrb	r4, [r2, #0]
    d3d2:	bf18      	it	ne
    d3d4:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    d3d6:	4631      	mov	r1, r6
		value = *(uint8_t *)buf;
    d3d8:	bf0c      	ite	eq
    d3da:	b2a4      	uxtheq	r4, r4
    d3dc:	ea44 2403 	orrne.w	r4, r4, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    d3e0:	f01d fc28 	bl	2ac34 <find_ccc_cfg>
	if (!cfg) {
    d3e4:	4605      	mov	r5, r0
    d3e6:	b9b0      	cbnz	r0, d416 <bt_gatt_attr_write_ccc+0x66>
		if (!value) {
    d3e8:	b914      	cbnz	r4, d3f0 <bt_gatt_attr_write_ccc+0x40>
			return len;
    d3ea:	4640      	mov	r0, r8
}
    d3ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    d3f0:	4631      	mov	r1, r6
    d3f2:	f01d fc1f 	bl	2ac34 <find_ccc_cfg>
		if (!cfg) {
    d3f6:	4605      	mov	r5, r0
    d3f8:	b930      	cbnz	r0, d408 <bt_gatt_attr_write_ccc+0x58>
			BT_WARN("No space to store CCC cfg");
    d3fa:	4818      	ldr	r0, [pc, #96]	; (d45c <bt_gatt_attr_write_ccc+0xac>)
    d3fc:	2157      	movs	r1, #87	; 0x57
    d3fe:	f01a fa68 	bl	278d2 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    d402:	f06f 0010 	mvn.w	r0, #16
    d406:	e7f1      	b.n	d3ec <bt_gatt_attr_write_ccc+0x3c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d408:	f107 0188 	add.w	r1, r7, #136	; 0x88
    d40c:	3001      	adds	r0, #1
    d40e:	f01d fb24 	bl	2aa5a <bt_addr_le_copy>
		cfg->id = conn->id;
    d412:	7a3b      	ldrb	r3, [r7, #8]
    d414:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
    d416:	6a73      	ldr	r3, [r6, #36]	; 0x24
    d418:	b96b      	cbnz	r3, d436 <bt_gatt_attr_write_ccc+0x86>
	if (cfg->value != ccc->value) {
    d41a:	8bf3      	ldrh	r3, [r6, #30]
	cfg->value = value;
    d41c:	812c      	strh	r4, [r5, #8]
	if (cfg->value != ccc->value) {
    d41e:	42a3      	cmp	r3, r4
    d420:	d003      	beq.n	d42a <bt_gatt_attr_write_ccc+0x7a>
		gatt_ccc_changed(attr, ccc);
    d422:	4631      	mov	r1, r6
    d424:	4648      	mov	r0, r9
    d426:	f01d fa8b 	bl	2a940 <gatt_ccc_changed>
	if (!value) {
    d42a:	2c00      	cmp	r4, #0
    d42c:	d1dd      	bne.n	d3ea <bt_gatt_attr_write_ccc+0x3a>
		clear_ccc_cfg(cfg);
    d42e:	4628      	mov	r0, r5
    d430:	f01d fb1a 	bl	2aa68 <clear_ccc_cfg>
    d434:	e7d9      	b.n	d3ea <bt_gatt_attr_write_ccc+0x3a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    d436:	4622      	mov	r2, r4
    d438:	4649      	mov	r1, r9
    d43a:	4638      	mov	r0, r7
    d43c:	4798      	blx	r3
		if (write < 0) {
    d43e:	2800      	cmp	r0, #0
    d440:	dbd4      	blt.n	d3ec <bt_gatt_attr_write_ccc+0x3c>
		if (write != sizeof(value) && write != 1) {
    d442:	3801      	subs	r0, #1
    d444:	2801      	cmp	r0, #1
    d446:	d9e8      	bls.n	d41a <bt_gatt_attr_write_ccc+0x6a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    d448:	f06f 000d 	mvn.w	r0, #13
    d44c:	e7ce      	b.n	d3ec <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d44e:	f06f 0006 	mvn.w	r0, #6
    d452:	e7cb      	b.n	d3ec <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d454:	f06f 000c 	mvn.w	r0, #12
    d458:	e7c8      	b.n	d3ec <bt_gatt_attr_write_ccc+0x3c>
    d45a:	bf00      	nop
    d45c:	000324a6 	.word	0x000324a6

0000d460 <db_changed>:
{
    d460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d462:	2300      	movs	r3, #0
    d464:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d468:	4912      	ldr	r1, [pc, #72]	; (d4b4 <db_changed+0x54>)
    d46a:	4813      	ldr	r0, [pc, #76]	; (d4b8 <db_changed+0x58>)
    d46c:	4c13      	ldr	r4, [pc, #76]	; (d4bc <db_changed+0x5c>)
    d46e:	f018 f813 	bl	25498 <k_delayed_work_submit_to_queue>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d472:	2500      	movs	r5, #0
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d474:	462f      	mov	r7, r5
    d476:	2207      	movs	r2, #7
    d478:	4669      	mov	r1, sp
    d47a:	4620      	mov	r0, r4
    d47c:	9700      	str	r7, [sp, #0]
    d47e:	f8cd 7003 	str.w	r7, [sp, #3]
    d482:	f020 ff04 	bl	2e28e <memcmp>
    d486:	b170      	cbz	r0, d4a6 <db_changed+0x46>
		if (CF_ROBUST_CACHING(cfg)) {
    d488:	79e3      	ldrb	r3, [r4, #7]
    d48a:	07db      	lsls	r3, r3, #31
    d48c:	d50b      	bpl.n	d4a6 <db_changed+0x46>
			atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
    d48e:	f104 060b 	add.w	r6, r4, #11
    d492:	f06f 0102 	mvn.w	r1, #2
    d496:	4630      	mov	r0, r6
    d498:	f01d fad0 	bl	2aa3c <atomic_and>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d49c:	f06f 0101 	mvn.w	r1, #1
    d4a0:	4630      	mov	r0, r6
    d4a2:	f01d facb 	bl	2aa3c <atomic_and>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d4a6:	3501      	adds	r5, #1
    d4a8:	2d03      	cmp	r5, #3
    d4aa:	f104 0410 	add.w	r4, r4, #16
    d4ae:	d1e2      	bne.n	d476 <db_changed+0x16>
}
    d4b0:	b003      	add	sp, #12
    d4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d4b4:	20002670 	.word	0x20002670
    d4b8:	20003028 	.word	0x20003028
    d4bc:	20003ad9 	.word	0x20003ad9

0000d4c0 <gatt_notify>:
{
    d4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d4c4:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    d4c6:	8992      	ldrh	r2, [r2, #12]
{
    d4c8:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    d4ca:	3202      	adds	r2, #2
    d4cc:	211b      	movs	r1, #27
{
    d4ce:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    d4d0:	f7ff f808 	bl	c4e4 <bt_att_create_pdu>
	if (!buf) {
    d4d4:	4605      	mov	r5, r0
    d4d6:	b1c8      	cbz	r0, d50c <gatt_notify+0x4c>
	return net_buf_simple_add(&buf->b, len);
    d4d8:	f100 0708 	add.w	r7, r0, #8
    d4dc:	2102      	movs	r1, #2
    d4de:	4638      	mov	r0, r7
    d4e0:	f012 fd5e 	bl	1ffa0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    d4e4:	4606      	mov	r6, r0
    d4e6:	89a1      	ldrh	r1, [r4, #12]
    d4e8:	f826 9b02 	strh.w	r9, [r6], #2
    d4ec:	4638      	mov	r0, r7
    d4ee:	f012 fd57 	bl	1ffa0 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d4f2:	89a2      	ldrh	r2, [r4, #12]
    d4f4:	68a1      	ldr	r1, [r4, #8]
    d4f6:	4630      	mov	r0, r6
    d4f8:	f020 fed7 	bl	2e2aa <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    d4fc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    d500:	4629      	mov	r1, r5
    d502:	4640      	mov	r0, r8
}
    d504:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    d508:	f7ff bafa 	b.w	cb00 <bt_att_send>
		BT_WARN("No buffer available to send notification");
    d50c:	2157      	movs	r1, #87	; 0x57
    d50e:	4803      	ldr	r0, [pc, #12]	; (d51c <gatt_notify+0x5c>)
    d510:	f01a f9df 	bl	278d2 <printk>
}
    d514:	f06f 000b 	mvn.w	r0, #11
    d518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d51c:	000326de 	.word	0x000326de

0000d520 <sc_indicate>:
{
    d520:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d522:	4a16      	ldr	r2, [pc, #88]	; (d57c <sc_indicate+0x5c>)
    d524:	f3bf 8f5b 	dmb	ish
    d528:	f102 0350 	add.w	r3, r2, #80	; 0x50
    d52c:	e853 4f00 	ldrex	r4, [r3]
    d530:	f044 0c01 	orr.w	ip, r4, #1
    d534:	e843 ce00 	strex	lr, ip, [r3]
    d538:	f1be 0f00 	cmp.w	lr, #0
    d53c:	d1f6      	bne.n	d52c <sc_indicate+0xc>
    d53e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    d542:	f014 0f01 	tst.w	r4, #1
    d546:	4613      	mov	r3, r2
    d548:	d10a      	bne.n	d560 <sc_indicate+0x40>
		gatt_sc.start = start;
    d54a:	8310      	strh	r0, [r2, #24]
		gatt_sc.end = end;
    d54c:	8351      	strh	r1, [r2, #26]
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    d54e:	2101      	movs	r1, #1
    d550:	480b      	ldr	r0, [pc, #44]	; (d580 <sc_indicate+0x60>)
    d552:	f01d fb06 	bl	2ab62 <atomic_test_bit>
    d556:	b978      	cbnz	r0, d578 <sc_indicate+0x58>
}
    d558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d55c:	f7ff bc1e 	b.w	cd9c <sc_commit.part.15>
	if (new_start >= *start && new_end <= *end) {
    d560:	8b1c      	ldrh	r4, [r3, #24]
    d562:	8b52      	ldrh	r2, [r2, #26]
    d564:	4284      	cmp	r4, r0
    d566:	d803      	bhi.n	d570 <sc_indicate+0x50>
    d568:	4291      	cmp	r1, r2
    d56a:	d905      	bls.n	d578 <sc_indicate+0x58>
		*end = new_end;
    d56c:	8359      	strh	r1, [r3, #26]
    d56e:	e7ee      	b.n	d54e <sc_indicate+0x2e>
	if (*end < new_end) {
    d570:	4291      	cmp	r1, r2
		*start = new_start;
    d572:	8318      	strh	r0, [r3, #24]
	if (*end < new_end) {
    d574:	d9eb      	bls.n	d54e <sc_indicate+0x2e>
    d576:	e7f9      	b.n	d56c <sc_indicate+0x4c>
}
    d578:	bd10      	pop	{r4, pc}
    d57a:	bf00      	nop
    d57c:	200026a0 	.word	0x200026a0
    d580:	200026f0 	.word	0x200026f0

0000d584 <gatt_indicate>:
{
    d584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d588:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    d58a:	8a92      	ldrh	r2, [r2, #20]
{
    d58c:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    d58e:	3202      	adds	r2, #2
    d590:	211d      	movs	r1, #29
{
    d592:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    d594:	f7fe ffa6 	bl	c4e4 <bt_att_create_pdu>
	if (!buf) {
    d598:	4606      	mov	r6, r0
    d59a:	b930      	cbnz	r0, d5aa <gatt_indicate+0x26>
		BT_WARN("No buffer available to send indication");
    d59c:	2157      	movs	r1, #87	; 0x57
    d59e:	4821      	ldr	r0, [pc, #132]	; (d624 <gatt_indicate+0xa0>)
    d5a0:	f01a f997 	bl	278d2 <printk>
			return -ENOMEM;
    d5a4:	f06f 040b 	mvn.w	r4, #11
    d5a8:	e01f      	b.n	d5ea <gatt_indicate+0x66>
    d5aa:	f100 0508 	add.w	r5, r0, #8
    d5ae:	2102      	movs	r1, #2
    d5b0:	4628      	mov	r0, r5
    d5b2:	f012 fcf5 	bl	1ffa0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    d5b6:	4607      	mov	r7, r0
    d5b8:	8aa1      	ldrh	r1, [r4, #20]
    d5ba:	f827 9b02 	strh.w	r9, [r7], #2
    d5be:	4628      	mov	r0, r5
    d5c0:	f012 fcee 	bl	1ffa0 <net_buf_simple_add>
    d5c4:	8aa2      	ldrh	r2, [r4, #20]
    d5c6:	6921      	ldr	r1, [r4, #16]
    d5c8:	4638      	mov	r0, r7
    d5ca:	f020 fe6e 	bl	2e2aa <memcpy>
	if (!params->func) {
    d5ce:	68a3      	ldr	r3, [r4, #8]
    d5d0:	b973      	cbnz	r3, d5f0 <gatt_indicate+0x6c>
		err = bt_att_send(conn, buf, NULL, NULL);
    d5d2:	461a      	mov	r2, r3
    d5d4:	4631      	mov	r1, r6
    d5d6:	4640      	mov	r0, r8
    d5d8:	f7ff fa92 	bl	cb00 <bt_att_send>
	if (err) {
    d5dc:	4604      	mov	r4, r0
    d5de:	b120      	cbz	r0, d5ea <gatt_indicate+0x66>
		BT_ERR("Error sending ATT PDU: %d", err);
    d5e0:	4622      	mov	r2, r4
    d5e2:	2145      	movs	r1, #69	; 0x45
    d5e4:	4810      	ldr	r0, [pc, #64]	; (d628 <gatt_indicate+0xa4>)
    d5e6:	f01a f974 	bl	278d2 <printk>
}
    d5ea:	4620      	mov	r0, r4
    d5ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    d5f0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    d5f4:	2100      	movs	r1, #0
    d5f6:	f7ff f9ad 	bl	c954 <bt_att_req_alloc>
		if (!req) {
    d5fa:	4605      	mov	r5, r0
    d5fc:	2800      	cmp	r0, #0
    d5fe:	d0d1      	beq.n	d5a4 <gatt_indicate+0x20>
		req->func = func;
    d600:	4b0a      	ldr	r3, [pc, #40]	; (d62c <gatt_indicate+0xa8>)
    d602:	6043      	str	r3, [r0, #4]
		req->destroy = destroy;
    d604:	2300      	movs	r3, #0
		req->user_data = params;
    d606:	6144      	str	r4, [r0, #20]
		req->buf = buf;
    d608:	6106      	str	r6, [r0, #16]
		req->destroy = destroy;
    d60a:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    d60c:	4601      	mov	r1, r0
    d60e:	4640      	mov	r0, r8
    d610:	f7ff fae4 	bl	cbdc <bt_att_req_send>
		if (err) {
    d614:	4604      	mov	r4, r0
    d616:	2800      	cmp	r0, #0
    d618:	d0e7      	beq.n	d5ea <gatt_indicate+0x66>
			bt_att_req_free(req);
    d61a:	4628      	mov	r0, r5
    d61c:	f7ff f9b0 	bl	c980 <bt_att_req_free>
    d620:	e7de      	b.n	d5e0 <gatt_indicate+0x5c>
    d622:	bf00      	nop
    d624:	00032693 	.word	0x00032693
    d628:	000326bf 	.word	0x000326bf
    d62c:	0002a965 	.word	0x0002a965

0000d630 <notify_cb>:
{
    d630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d634:	4b38      	ldr	r3, [pc, #224]	; (d718 <notify_cb+0xe8>)
{
    d636:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d638:	6882      	ldr	r2, [r0, #8]
    d63a:	429a      	cmp	r2, r3
{
    d63c:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d63e:	d003      	beq.n	d648 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    d640:	2001      	movs	r0, #1
}
    d642:	b003      	add	sp, #12
    d644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    d648:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    d64a:	4b34      	ldr	r3, [pc, #208]	; (d71c <notify_cb+0xec>)
    d64c:	429f      	cmp	r7, r3
    d64e:	d019      	beq.n	d684 <notify_cb+0x54>
    d650:	1c7d      	adds	r5, r7, #1
    d652:	f107 0a1f 	add.w	sl, r7, #31
    d656:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    d65a:	f8b5 2007 	ldrh.w	r2, [r5, #7]
    d65e:	89a3      	ldrh	r3, [r4, #12]
    d660:	429a      	cmp	r2, r3
    d662:	d10b      	bne.n	d67c <notify_cb+0x4c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d664:	4629      	mov	r1, r5
    d666:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    d66a:	f01c fd44 	bl	2a0f6 <bt_conn_lookup_addr_le>
		if (!conn) {
    d66e:	4606      	mov	r6, r0
    d670:	b120      	cbz	r0, d67c <notify_cb+0x4c>
		if (conn->state != BT_CONN_CONNECTED) {
    d672:	7a83      	ldrb	r3, [r0, #10]
    d674:	2b07      	cmp	r3, #7
    d676:	d02b      	beq.n	d6d0 <notify_cb+0xa0>
			bt_conn_unref(conn);
    d678:	f7fd fe30 	bl	b2dc <bt_conn_unref>
			continue;
    d67c:	350a      	adds	r5, #10
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    d67e:	4555      	cmp	r5, sl
    d680:	d1eb      	bne.n	d65a <notify_cb+0x2a>
    d682:	e7dd      	b.n	d640 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d684:	2600      	movs	r6, #0
    d686:	4d26      	ldr	r5, [pc, #152]	; (d720 <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d688:	46b1      	mov	r9, r6
    d68a:	2207      	movs	r2, #7
    d68c:	4669      	mov	r1, sp
    d68e:	4628      	mov	r0, r5
    d690:	f8cd 9000 	str.w	r9, [sp]
    d694:	f8cd 9003 	str.w	r9, [sp, #3]
    d698:	f020 fdf9 	bl	2e28e <memcmp>
    d69c:	b178      	cbz	r0, d6be <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    d69e:	2207      	movs	r2, #7
    d6a0:	4629      	mov	r1, r5
    d6a2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    d6a6:	f7fd ff63 	bl	b570 <bt_conn_lookup_state_le>
			if (!conn) {
    d6aa:	b970      	cbnz	r0, d6ca <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
    d6ac:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    d6ae:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    d6b2:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    d6b4:	4629      	mov	r1, r5
    d6b6:	8853      	ldrh	r3, [r2, #2]
    d6b8:	8812      	ldrh	r2, [r2, #0]
    d6ba:	f7ff fc43 	bl	cf44 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d6be:	3601      	adds	r6, #1
    d6c0:	2e03      	cmp	r6, #3
    d6c2:	f105 050c 	add.w	r5, r5, #12
    d6c6:	d1e0      	bne.n	d68a <notify_cb+0x5a>
    d6c8:	e7c2      	b.n	d650 <notify_cb+0x20>
			bt_conn_unref(conn);
    d6ca:	f7fd fe07 	bl	b2dc <bt_conn_unref>
    d6ce:	e7f6      	b.n	d6be <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d6d2:	b123      	cbz	r3, d6de <notify_cb+0xae>
    d6d4:	4641      	mov	r1, r8
    d6d6:	4798      	blx	r3
    d6d8:	b908      	cbnz	r0, d6de <notify_cb+0xae>
			bt_conn_unref(conn);
    d6da:	4630      	mov	r0, r6
    d6dc:	e7cc      	b.n	d678 <notify_cb+0x48>
		if (data->type == BT_GATT_CCC_INDICATE) {
    d6de:	89a3      	ldrh	r3, [r4, #12]
    d6e0:	88a1      	ldrh	r1, [r4, #4]
    d6e2:	6922      	ldr	r2, [r4, #16]
    d6e4:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    d6e6:	4630      	mov	r0, r6
		if (data->type == BT_GATT_CCC_INDICATE) {
    d6e8:	d110      	bne.n	d70c <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
    d6ea:	f7ff ff4b 	bl	d584 <gatt_indicate>
			if (err == 0) {
    d6ee:	4681      	mov	r9, r0
    d6f0:	b918      	cbnz	r0, d6fa <notify_cb+0xca>
				data->ind_params->_ref++;
    d6f2:	6922      	ldr	r2, [r4, #16]
    d6f4:	7d93      	ldrb	r3, [r2, #22]
    d6f6:	3301      	adds	r3, #1
    d6f8:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    d6fa:	4630      	mov	r0, r6
    d6fc:	f7fd fdee 	bl	b2dc <bt_conn_unref>
		if (err < 0) {
    d700:	f1b9 0f00 	cmp.w	r9, #0
    d704:	db06      	blt.n	d714 <notify_cb+0xe4>
		data->err = 0;
    d706:	f8c4 b008 	str.w	fp, [r4, #8]
    d70a:	e7b7      	b.n	d67c <notify_cb+0x4c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    d70c:	f7ff fed8 	bl	d4c0 <gatt_notify>
    d710:	4681      	mov	r9, r0
    d712:	e7f2      	b.n	d6fa <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    d714:	2000      	movs	r0, #0
    d716:	e794      	b.n	d642 <notify_cb+0x12>
    d718:	0000d3b1 	.word	0x0000d3b1
    d71c:	20001304 	.word	0x20001304
    d720:	20005699 	.word	0x20005699

0000d724 <bt_gatt_init>:
{
    d724:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d726:	4b22      	ldr	r3, [pc, #136]	; (d7b0 <bt_gatt_init+0x8c>)
    d728:	f3bf 8f5b 	dmb	ish
    d72c:	2201      	movs	r2, #1
    d72e:	e853 1f00 	ldrex	r1, [r3]
    d732:	2900      	cmp	r1, #0
    d734:	d103      	bne.n	d73e <bt_gatt_init+0x1a>
    d736:	e843 2000 	strex	r0, r2, [r3]
    d73a:	2800      	cmp	r0, #0
    d73c:	d1f7      	bne.n	d72e <bt_gatt_init+0xa>
    d73e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    d742:	d134      	bne.n	d7ae <bt_gatt_init+0x8a>
    d744:	f3bf 8f5b 	dmb	ish
    d748:	4b1a      	ldr	r3, [pc, #104]	; (d7b4 <bt_gatt_init+0x90>)
    d74a:	e853 1f00 	ldrex	r1, [r3]
    d74e:	2900      	cmp	r1, #0
    d750:	d103      	bne.n	d75a <bt_gatt_init+0x36>
    d752:	e843 2000 	strex	r0, r2, [r3]
    d756:	2800      	cmp	r0, #0
    d758:	d1f7      	bne.n	d74a <bt_gatt_init+0x26>
    d75a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    d75e:	d101      	bne.n	d764 <bt_gatt_init+0x40>
    d760:	f7ff fae2 	bl	cd28 <bt_gatt_service_init.part.13>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d764:	4c14      	ldr	r4, [pc, #80]	; (d7b8 <bt_gatt_init+0x94>)
    d766:	2230      	movs	r2, #48	; 0x30
    d768:	2100      	movs	r1, #0
    d76a:	4620      	mov	r0, r4
    d76c:	f020 fdd8 	bl	2e320 <memset>
    d770:	4b12      	ldr	r3, [pc, #72]	; (d7bc <bt_gatt_init+0x98>)
    d772:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d774:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d776:	4c12      	ldr	r4, [pc, #72]	; (d7c0 <bt_gatt_init+0x9c>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d778:	4812      	ldr	r0, [pc, #72]	; (d7c4 <bt_gatt_init+0xa0>)
    d77a:	2300      	movs	r3, #0
    d77c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d780:	f017 fe8a 	bl	25498 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d784:	f104 0020 	add.w	r0, r4, #32
    d788:	2230      	movs	r2, #48	; 0x30
    d78a:	2100      	movs	r1, #0
    d78c:	f020 fdc8 	bl	2e320 <memset>
    d790:	4b0d      	ldr	r3, [pc, #52]	; (d7c8 <bt_gatt_init+0xa4>)
    d792:	6263      	str	r3, [r4, #36]	; 0x24
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d794:	3450      	adds	r4, #80	; 0x50
    d796:	f3bf 8f5b 	dmb	ish
    d79a:	e854 3f00 	ldrex	r3, [r4]
    d79e:	f043 0302 	orr.w	r3, r3, #2
    d7a2:	e844 3200 	strex	r2, r3, [r4]
    d7a6:	2a00      	cmp	r2, #0
    d7a8:	d1f7      	bne.n	d79a <bt_gatt_init+0x76>
    d7aa:	f3bf 8f5b 	dmb	ish
}
    d7ae:	bd10      	pop	{r4, pc}
    d7b0:	20003b10 	.word	0x20003b10
    d7b4:	20003b5c 	.word	0x20003b5c
    d7b8:	20002670 	.word	0x20002670
    d7bc:	0002ad47 	.word	0x0002ad47
    d7c0:	200026a0 	.word	0x200026a0
    d7c4:	20003028 	.word	0x20003028
    d7c8:	0000dfa1 	.word	0x0000dfa1

0000d7cc <bt_gatt_attr_get_handle>:
{
    d7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
    d7d0:	4605      	mov	r5, r0
    d7d2:	b910      	cbnz	r0, d7da <bt_gatt_attr_get_handle+0xe>
		return 0;
    d7d4:	2000      	movs	r0, #0
}
    d7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
    d7da:	8a00      	ldrh	r0, [r0, #16]
    d7dc:	2800      	cmp	r0, #0
    d7de:	d1fa      	bne.n	d7d6 <bt_gatt_attr_get_handle+0xa>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d7e0:	4e18      	ldr	r6, [pc, #96]	; (d844 <bt_gatt_attr_get_handle+0x78>)
    d7e2:	4c19      	ldr	r4, [pc, #100]	; (d848 <bt_gatt_attr_get_handle+0x7c>)
    d7e4:	4f19      	ldr	r7, [pc, #100]	; (d84c <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
    d7e6:	f04f 0901 	mov.w	r9, #1
    d7ea:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d7ec:	42b4      	cmp	r4, r6
    d7ee:	d90a      	bls.n	d806 <bt_gatt_attr_get_handle+0x3a>
    d7f0:	4639      	mov	r1, r7
    d7f2:	4817      	ldr	r0, [pc, #92]	; (d850 <bt_gatt_attr_get_handle+0x84>)
    d7f4:	f240 522d 	movw	r2, #1325	; 0x52d
    d7f8:	f01a f86b 	bl	278d2 <printk>
    d7fc:	f240 512d 	movw	r1, #1325	; 0x52d
    d800:	4638      	mov	r0, r7
    d802:	f01a fadf 	bl	27dc4 <assert_post_action>
    d806:	4544      	cmp	r4, r8
    d808:	d2e4      	bcs.n	d7d4 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
    d80a:	e9d4 c100 	ldrd	ip, r1, [r4]
    d80e:	4565      	cmp	r5, ip
    d810:	d305      	bcc.n	d81e <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    d812:	2214      	movs	r2, #20
    d814:	fb02 c301 	mla	r3, r2, r1, ip
    d818:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
    d81a:	429d      	cmp	r5, r3
    d81c:	d910      	bls.n	d840 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
    d81e:	eb09 0001 	add.w	r0, r9, r1
    d822:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d824:	3408      	adds	r4, #8
    d826:	4681      	mov	r9, r0
    d828:	e7e0      	b.n	d7ec <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
    d82a:	fb02 ce03 	mla	lr, r2, r3, ip
    d82e:	4575      	cmp	r5, lr
    d830:	d0d1      	beq.n	d7d6 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d832:	3301      	adds	r3, #1
    d834:	eb09 0003 	add.w	r0, r9, r3
    d838:	428b      	cmp	r3, r1
    d83a:	b280      	uxth	r0, r0
    d83c:	d1f5      	bne.n	d82a <bt_gatt_attr_get_handle+0x5e>
    d83e:	e7f1      	b.n	d824 <bt_gatt_attr_get_handle+0x58>
    d840:	2300      	movs	r3, #0
    d842:	e7f7      	b.n	d834 <bt_gatt_attr_get_handle+0x68>
    d844:	0002eedc 	.word	0x0002eedc
    d848:	0002eecc 	.word	0x0002eecc
    d84c:	00032515 	.word	0x00032515
    d850:	0003067f 	.word	0x0003067f

0000d854 <bt_gatt_foreach_attr_type>:
{
    d854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d858:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
    d85c:	9100      	str	r1, [sp, #0]
    d85e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    d860:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d864:	2c00      	cmp	r4, #0
    d866:	bf08      	it	eq
    d868:	461c      	moveq	r4, r3
	if (start_handle <= last_static_handle) {
    d86a:	4b4f      	ldr	r3, [pc, #316]	; (d9a8 <bt_gatt_foreach_attr_type+0x154>)
    d86c:	881b      	ldrh	r3, [r3, #0]
    d86e:	4283      	cmp	r3, r0
{
    d870:	4607      	mov	r7, r0
    d872:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    d874:	d267      	bcs.n	d946 <bt_gatt_foreach_attr_type+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    d876:	4b4d      	ldr	r3, [pc, #308]	; (d9ac <bt_gatt_foreach_attr_type+0x158>)
    d878:	681d      	ldr	r5, [r3, #0]
    d87a:	2d00      	cmp	r5, #0
    d87c:	d058      	beq.n	d930 <bt_gatt_foreach_attr_type+0xdc>
    d87e:	3d08      	subs	r5, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    d880:	f04f 0b14 	mov.w	fp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    d884:	2d00      	cmp	r5, #0
    d886:	d053      	beq.n	d930 <bt_gatt_foreach_attr_type+0xdc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d888:	68ab      	ldr	r3, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    d88a:	2b00      	cmp	r3, #0
    d88c:	f000 808a 	beq.w	d9a4 <bt_gatt_foreach_attr_type+0x150>
		if (next) {
    d890:	f1b3 0608 	subs.w	r6, r3, #8
    d894:	d005      	beq.n	d8a2 <bt_gatt_foreach_attr_type+0x4e>
			if (next->attrs[0].handle <= start_handle) {
    d896:	f853 3c08 	ldr.w	r3, [r3, #-8]
    d89a:	8a1b      	ldrh	r3, [r3, #16]
    d89c:	42bb      	cmp	r3, r7
    d89e:	d903      	bls.n	d8a8 <bt_gatt_foreach_attr_type+0x54>
    d8a0:	2600      	movs	r6, #0
		for (i = 0; i < svc->attr_count; i++) {
    d8a2:	686b      	ldr	r3, [r5, #4]
    d8a4:	429e      	cmp	r6, r3
    d8a6:	d351      	bcc.n	d94c <bt_gatt_foreach_attr_type+0xf8>
    d8a8:	68ad      	ldr	r5, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    d8aa:	2d00      	cmp	r5, #0
    d8ac:	d040      	beq.n	d930 <bt_gatt_foreach_attr_type+0xdc>
    d8ae:	3d08      	subs	r5, #8
    d8b0:	e7e8      	b.n	d884 <bt_gatt_foreach_attr_type+0x30>
			if (handle + static_svc->attr_count < start_handle) {
    d8b2:	6873      	ldr	r3, [r6, #4]
    d8b4:	442b      	add	r3, r5
    d8b6:	42bb      	cmp	r3, r7
    d8b8:	d242      	bcs.n	d940 <bt_gatt_foreach_attr_type+0xec>
				handle += static_svc->attr_count;
    d8ba:	b29d      	uxth	r5, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d8bc:	3608      	adds	r6, #8
    d8be:	4b3c      	ldr	r3, [pc, #240]	; (d9b0 <bt_gatt_foreach_attr_type+0x15c>)
    d8c0:	429e      	cmp	r6, r3
    d8c2:	d90a      	bls.n	d8da <bt_gatt_foreach_attr_type+0x86>
    d8c4:	493b      	ldr	r1, [pc, #236]	; (d9b4 <bt_gatt_foreach_attr_type+0x160>)
    d8c6:	483c      	ldr	r0, [pc, #240]	; (d9b8 <bt_gatt_foreach_attr_type+0x164>)
    d8c8:	f240 52f1 	movw	r2, #1521	; 0x5f1
    d8cc:	f01a f801 	bl	278d2 <printk>
    d8d0:	f240 51f1 	movw	r1, #1521	; 0x5f1
    d8d4:	4837      	ldr	r0, [pc, #220]	; (d9b4 <bt_gatt_foreach_attr_type+0x160>)
    d8d6:	f01a fa75 	bl	27dc4 <assert_post_action>
    d8da:	4b35      	ldr	r3, [pc, #212]	; (d9b0 <bt_gatt_foreach_attr_type+0x15c>)
    d8dc:	429e      	cmp	r6, r3
    d8de:	d3e8      	bcc.n	d8b2 <bt_gatt_foreach_attr_type+0x5e>
    d8e0:	e7c9      	b.n	d876 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    d8e2:	58d1      	ldr	r1, [r2, r3]
    d8e4:	4640      	mov	r0, r8
    d8e6:	f01c f9bb 	bl	29c60 <bt_uuid_cmp>
    d8ea:	b1a0      	cbz	r0, d916 <bt_gatt_foreach_attr_type+0xc2>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    d8ec:	3501      	adds	r5, #1
    d8ee:	f10a 0a01 	add.w	sl, sl, #1
    d8f2:	b2ad      	uxth	r5, r5
    d8f4:	6873      	ldr	r3, [r6, #4]
    d8f6:	4553      	cmp	r3, sl
    d8f8:	d9e0      	bls.n	d8bc <bt_gatt_foreach_attr_type+0x68>
	if (handle > end_handle) {
    d8fa:	9b00      	ldr	r3, [sp, #0]
    d8fc:	429d      	cmp	r5, r3
    d8fe:	d817      	bhi.n	d930 <bt_gatt_foreach_attr_type+0xdc>
	if (handle < start_handle) {
    d900:	42bd      	cmp	r5, r7
    d902:	d3f3      	bcc.n	d8ec <bt_gatt_foreach_attr_type+0x98>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    d904:	2314      	movs	r3, #20
    d906:	6832      	ldr	r2, [r6, #0]
    d908:	fb03 f30a 	mul.w	r3, r3, sl
    d90c:	eb02 0b03 	add.w	fp, r2, r3
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    d910:	f1b8 0f00 	cmp.w	r8, #0
    d914:	d1e5      	bne.n	d8e2 <bt_gatt_foreach_attr_type+0x8e>
	if (attr_data && attr_data != attr->user_data) {
    d916:	f1b9 0f00 	cmp.w	r9, #0
    d91a:	d10c      	bne.n	d936 <bt_gatt_foreach_attr_type+0xe2>
	*num_matches -= 1;
    d91c:	3c01      	subs	r4, #1
    d91e:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    d920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d924:	4629      	mov	r1, r5
    d926:	4658      	mov	r0, fp
    d928:	4798      	blx	r3
	if (!*num_matches) {
    d92a:	b10c      	cbz	r4, d930 <bt_gatt_foreach_attr_type+0xdc>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    d92c:	2800      	cmp	r0, #0
    d92e:	d1dd      	bne.n	d8ec <bt_gatt_foreach_attr_type+0x98>
}
    d930:	b003      	add	sp, #12
    d932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    d936:	f8db 300c 	ldr.w	r3, [fp, #12]
    d93a:	4599      	cmp	r9, r3
    d93c:	d1d6      	bne.n	d8ec <bt_gatt_foreach_attr_type+0x98>
    d93e:	e7ed      	b.n	d91c <bt_gatt_foreach_attr_type+0xc8>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    d940:	f04f 0a00 	mov.w	sl, #0
    d944:	e7d6      	b.n	d8f4 <bt_gatt_foreach_attr_type+0xa0>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d946:	4e1d      	ldr	r6, [pc, #116]	; (d9bc <bt_gatt_foreach_attr_type+0x168>)
		uint16_t handle = 1;
    d948:	2501      	movs	r5, #1
    d94a:	e7b8      	b.n	d8be <bt_gatt_foreach_attr_type+0x6a>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    d94c:	6829      	ldr	r1, [r5, #0]
	if (handle > end_handle) {
    d94e:	9800      	ldr	r0, [sp, #0]
			struct bt_gatt_attr *attr = &svc->attrs[i];
    d950:	fb0b f206 	mul.w	r2, fp, r6
    d954:	eb01 0a02 	add.w	sl, r1, r2
			if (gatt_foreach_iter(attr, attr->handle,
    d958:	f8ba 3010 	ldrh.w	r3, [sl, #16]
	if (handle > end_handle) {
    d95c:	4298      	cmp	r0, r3
    d95e:	d3e7      	bcc.n	d930 <bt_gatt_foreach_attr_type+0xdc>
	if (handle < start_handle) {
    d960:	429f      	cmp	r7, r3
    d962:	d818      	bhi.n	d996 <bt_gatt_foreach_attr_type+0x142>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    d964:	f1b8 0f00 	cmp.w	r8, #0
    d968:	d10d      	bne.n	d986 <bt_gatt_foreach_attr_type+0x132>
	if (attr_data && attr_data != attr->user_data) {
    d96a:	f1b9 0f00 	cmp.w	r9, #0
    d96e:	d114      	bne.n	d99a <bt_gatt_foreach_attr_type+0x146>
	*num_matches -= 1;
    d970:	3c01      	subs	r4, #1
    d972:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    d974:	4619      	mov	r1, r3
    d976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d97a:	4650      	mov	r0, sl
    d97c:	4798      	blx	r3
	if (!*num_matches) {
    d97e:	2c00      	cmp	r4, #0
    d980:	d0d6      	beq.n	d930 <bt_gatt_foreach_attr_type+0xdc>
			if (gatt_foreach_iter(attr, attr->handle,
    d982:	b940      	cbnz	r0, d996 <bt_gatt_foreach_attr_type+0x142>
    d984:	e7d4      	b.n	d930 <bt_gatt_foreach_attr_type+0xdc>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    d986:	5889      	ldr	r1, [r1, r2]
    d988:	9301      	str	r3, [sp, #4]
    d98a:	4640      	mov	r0, r8
    d98c:	f01c f968 	bl	29c60 <bt_uuid_cmp>
    d990:	9b01      	ldr	r3, [sp, #4]
    d992:	2800      	cmp	r0, #0
    d994:	d0e9      	beq.n	d96a <bt_gatt_foreach_attr_type+0x116>
		for (i = 0; i < svc->attr_count; i++) {
    d996:	3601      	adds	r6, #1
    d998:	e783      	b.n	d8a2 <bt_gatt_foreach_attr_type+0x4e>
	if (attr_data && attr_data != attr->user_data) {
    d99a:	f8da 200c 	ldr.w	r2, [sl, #12]
    d99e:	4591      	cmp	r9, r2
    d9a0:	d1f9      	bne.n	d996 <bt_gatt_foreach_attr_type+0x142>
    d9a2:	e7e5      	b.n	d970 <bt_gatt_foreach_attr_type+0x11c>
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    d9a4:	461e      	mov	r6, r3
    d9a6:	e77c      	b.n	d8a2 <bt_gatt_foreach_attr_type+0x4e>
    d9a8:	20005696 	.word	0x20005696
    d9ac:	20003b08 	.word	0x20003b08
    d9b0:	0002eedc 	.word	0x0002eedc
    d9b4:	00032515 	.word	0x00032515
    d9b8:	0003067f 	.word	0x0003067f
    d9bc:	0002eecc 	.word	0x0002eecc

0000d9c0 <db_hash_gen>:
{
    d9c0:	b530      	push	{r4, r5, lr}
    d9c2:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    d9c4:	2210      	movs	r2, #16
    d9c6:	2100      	movs	r1, #0
{
    d9c8:	4604      	mov	r4, r0
	uint8_t key[16] = {};
    d9ca:	4668      	mov	r0, sp
    d9cc:	f020 fca8 	bl	2e320 <memset>
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    d9d0:	aa1c      	add	r2, sp, #112	; 0x70
    d9d2:	4669      	mov	r1, sp
    d9d4:	a804      	add	r0, sp, #16
    d9d6:	f01b fe55 	bl	29684 <tc_cmac_setup>
    d9da:	b928      	cbnz	r0, d9e8 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
    d9dc:	4813      	ldr	r0, [pc, #76]	; (da2c <db_hash_gen+0x6c>)
    d9de:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to calculate hash");
    d9e0:	f019 ff77 	bl	278d2 <printk>
}
    d9e4:	b049      	add	sp, #292	; 0x124
    d9e6:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    d9e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d9ec:	2001      	movs	r0, #1
    d9ee:	ab04      	add	r3, sp, #16
    d9f0:	4a0f      	ldr	r2, [pc, #60]	; (da30 <db_hash_gen+0x70>)
    d9f2:	f01d f99d 	bl	2ad30 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    d9f6:	a904      	add	r1, sp, #16
    d9f8:	480e      	ldr	r0, [pc, #56]	; (da34 <db_hash_gen+0x74>)
    d9fa:	f01b fed8 	bl	297ae <tc_cmac_final>
    d9fe:	b910      	cbnz	r0, da06 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
    da00:	2145      	movs	r1, #69	; 0x45
    da02:	480d      	ldr	r0, [pc, #52]	; (da38 <db_hash_gen+0x78>)
    da04:	e7ec      	b.n	d9e0 <db_hash_gen+0x20>
    da06:	4b0b      	ldr	r3, [pc, #44]	; (da34 <db_hash_gen+0x74>)
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    da08:	2200      	movs	r2, #0
    da0a:	f103 0110 	add.w	r1, r3, #16
    da0e:	3201      	adds	r2, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
    da10:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    da12:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    da16:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    da1a:	2a08      	cmp	r2, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
    da1c:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    da1e:	d1f6      	bne.n	da0e <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    da20:	2c00      	cmp	r4, #0
    da22:	d0df      	beq.n	d9e4 <db_hash_gen+0x24>
		db_hash_store();
    da24:	f7ff f942 	bl	ccac <db_hash_store>
    da28:	e7dc      	b.n	d9e4 <db_hash_gen+0x24>
    da2a:	bf00      	nop
    da2c:	000325fe 	.word	0x000325fe
    da30:	0002a995 	.word	0x0002a995
    da34:	20005831 	.word	0x20005831
    da38:	0003261c 	.word	0x0003261c

0000da3c <db_hash_commit>:
{
    da3c:	b508      	push	{r3, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    da3e:	480f      	ldr	r0, [pc, #60]	; (da7c <db_hash_commit+0x40>)
    da40:	f017 fd9a 	bl	25578 <k_delayed_work_cancel>
	if (!err) {
    da44:	b908      	cbnz	r0, da4a <db_hash_commit+0xe>
		db_hash_gen(false);
    da46:	f7ff ffbb 	bl	d9c0 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    da4a:	2210      	movs	r2, #16
    da4c:	490c      	ldr	r1, [pc, #48]	; (da80 <db_hash_commit+0x44>)
    da4e:	480d      	ldr	r0, [pc, #52]	; (da84 <db_hash_commit+0x48>)
    da50:	f020 fc1d 	bl	2e28e <memcmp>
    da54:	b948      	cbnz	r0, da6a <db_hash_commit+0x2e>
		k_delayed_work_cancel(&gatt_sc.work);
    da56:	480c      	ldr	r0, [pc, #48]	; (da88 <db_hash_commit+0x4c>)
    da58:	f017 fd8e 	bl	25578 <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    da5c:	f06f 0101 	mvn.w	r1, #1
    da60:	480a      	ldr	r0, [pc, #40]	; (da8c <db_hash_commit+0x50>)
    da62:	f01c ffeb 	bl	2aa3c <atomic_and>
}
    da66:	2000      	movs	r0, #0
    da68:	bd08      	pop	{r3, pc}
	sc_indicate(0x0001, 0xffff);
    da6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    da6e:	2001      	movs	r0, #1
    da70:	f7ff fd56 	bl	d520 <sc_indicate>
	db_hash_store();
    da74:	f7ff f91a 	bl	ccac <db_hash_store>
	return 0;
    da78:	e7f5      	b.n	da66 <db_hash_commit+0x2a>
    da7a:	bf00      	nop
    da7c:	20002670 	.word	0x20002670
    da80:	20005831 	.word	0x20005831
    da84:	20005841 	.word	0x20005841
    da88:	200026c0 	.word	0x200026c0
    da8c:	200026f0 	.word	0x200026f0

0000da90 <bt_gatt_service_register>:
{
    da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(svc, "invalid parameters\n");
    da94:	4604      	mov	r4, r0
{
    da96:	b085      	sub	sp, #20
	__ASSERT(svc, "invalid parameters\n");
    da98:	b950      	cbnz	r0, dab0 <bt_gatt_service_register+0x20>
    da9a:	4972      	ldr	r1, [pc, #456]	; (dc64 <bt_gatt_service_register+0x1d4>)
    da9c:	4872      	ldr	r0, [pc, #456]	; (dc68 <bt_gatt_service_register+0x1d8>)
    da9e:	f240 42ae 	movw	r2, #1198	; 0x4ae
    daa2:	f019 ff16 	bl	278d2 <printk>
    daa6:	f240 41ae 	movw	r1, #1198	; 0x4ae
    daaa:	486e      	ldr	r0, [pc, #440]	; (dc64 <bt_gatt_service_register+0x1d4>)
    daac:	f01a f98a 	bl	27dc4 <assert_post_action>
	__ASSERT(svc->attrs, "invalid parameters\n");
    dab0:	6823      	ldr	r3, [r4, #0]
    dab2:	b953      	cbnz	r3, daca <bt_gatt_service_register+0x3a>
    dab4:	496b      	ldr	r1, [pc, #428]	; (dc64 <bt_gatt_service_register+0x1d4>)
    dab6:	486c      	ldr	r0, [pc, #432]	; (dc68 <bt_gatt_service_register+0x1d8>)
    dab8:	f240 42af 	movw	r2, #1199	; 0x4af
    dabc:	f019 ff09 	bl	278d2 <printk>
    dac0:	f240 41af 	movw	r1, #1199	; 0x4af
    dac4:	4867      	ldr	r0, [pc, #412]	; (dc64 <bt_gatt_service_register+0x1d4>)
    dac6:	f01a f97d 	bl	27dc4 <assert_post_action>
	__ASSERT(svc->attr_count, "invalid parameters\n");
    daca:	6863      	ldr	r3, [r4, #4]
    dacc:	b953      	cbnz	r3, dae4 <bt_gatt_service_register+0x54>
    dace:	4965      	ldr	r1, [pc, #404]	; (dc64 <bt_gatt_service_register+0x1d4>)
    dad0:	4865      	ldr	r0, [pc, #404]	; (dc68 <bt_gatt_service_register+0x1d8>)
    dad2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    dad6:	f019 fefc 	bl	278d2 <printk>
    dada:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
    dade:	4861      	ldr	r0, [pc, #388]	; (dc64 <bt_gatt_service_register+0x1d4>)
    dae0:	f01a f970 	bl	27dc4 <assert_post_action>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    dae4:	f3bf 8f5b 	dmb	ish
    dae8:	4b60      	ldr	r3, [pc, #384]	; (dc6c <bt_gatt_service_register+0x1dc>)
    daea:	2201      	movs	r2, #1
    daec:	e853 1f00 	ldrex	r1, [r3]
    daf0:	2900      	cmp	r1, #0
    daf2:	d103      	bne.n	dafc <bt_gatt_service_register+0x6c>
    daf4:	e843 2000 	strex	r0, r2, [r3]
    daf8:	2800      	cmp	r0, #0
    dafa:	d1f7      	bne.n	daec <bt_gatt_service_register+0x5c>
    dafc:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    db00:	d101      	bne.n	db06 <bt_gatt_service_register+0x76>
    db02:	f7ff f911 	bl	cd28 <bt_gatt_service_init.part.13>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    db06:	6823      	ldr	r3, [r4, #0]
    db08:	2500      	movs	r5, #0
    db0a:	6818      	ldr	r0, [r3, #0]
    db0c:	f88d 5004 	strb.w	r5, [sp, #4]
    db10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    db14:	a901      	add	r1, sp, #4
    db16:	f8ad 3006 	strh.w	r3, [sp, #6]
    db1a:	f01c f8a1 	bl	29c60 <bt_uuid_cmp>
    db1e:	b920      	cbnz	r0, db2a <bt_gatt_service_register+0x9a>
		return -EALREADY;
    db20:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    db24:	b005      	add	sp, #20
    db26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    db2a:	6823      	ldr	r3, [r4, #0]
    db2c:	a902      	add	r1, sp, #8
    db2e:	6818      	ldr	r0, [r3, #0]
    db30:	f88d 5008 	strb.w	r5, [sp, #8]
    db34:	f641 0301 	movw	r3, #6145	; 0x1801
    db38:	f8ad 300a 	strh.w	r3, [sp, #10]
    db3c:	f01c f890 	bl	29c60 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    db40:	2800      	cmp	r0, #0
    db42:	d0ed      	beq.n	db20 <bt_gatt_service_register+0x90>
Z_GENLIST_IS_EMPTY(slist)
    db44:	4d4a      	ldr	r5, [pc, #296]	; (dc70 <bt_gatt_service_register+0x1e0>)
	struct bt_gatt_attr *attrs = svc->attrs;
    db46:	f8d4 8000 	ldr.w	r8, [r4]
	if (sys_slist_is_empty(&db)) {
    db4a:	682e      	ldr	r6, [r5, #0]
	uint16_t count = svc->attr_count;
    db4c:	f8b4 9004 	ldrh.w	r9, [r4, #4]
	if (sys_slist_is_empty(&db)) {
    db50:	b936      	cbnz	r6, db60 <bt_gatt_service_register+0xd0>
		handle = last_static_handle;
    db52:	4b48      	ldr	r3, [pc, #288]	; (dc74 <bt_gatt_service_register+0x1e4>)
    db54:	881f      	ldrh	r7, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    db56:	f8df b128 	ldr.w	fp, [pc, #296]	; dc80 <bt_gatt_service_register+0x1f0>
	const struct bt_gatt_attr *attr = NULL;
    db5a:	f04f 0a00 	mov.w	sl, #0
    db5e:	e01a      	b.n	db96 <bt_gatt_service_register+0x106>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    db60:	686b      	ldr	r3, [r5, #4]
    db62:	2b00      	cmp	r3, #0
    db64:	d07c      	beq.n	dc60 <bt_gatt_service_register+0x1d0>
	handle = last->attrs[last->attr_count - 1].handle;
    db66:	e953 3202 	ldrd	r3, r2, [r3, #-8]
    db6a:	2114      	movs	r1, #20
    db6c:	fb01 3302 	mla	r3, r1, r2, r3
    db70:	f833 7c04 	ldrh.w	r7, [r3, #-4]
    db74:	463e      	mov	r6, r7
    db76:	e7ee      	b.n	db56 <bt_gatt_service_register+0xc6>
		if (!attrs->handle) {
    db78:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    db7c:	2900      	cmp	r1, #0
    db7e:	d134      	bne.n	dbea <bt_gatt_service_register+0x15a>
			attrs->handle = ++handle;
    db80:	1c79      	adds	r1, r7, #1
    db82:	b289      	uxth	r1, r1
    db84:	f8a8 1010 	strh.w	r1, [r8, #16]
	for (; attrs && count; attrs++, count--) {
    db88:	f109 39ff 	add.w	r9, r9, #4294967295
    db8c:	f108 0814 	add.w	r8, r8, #20
    db90:	fa1f f989 	uxth.w	r9, r9
    db94:	460f      	mov	r7, r1
    db96:	f1b8 0f00 	cmp.w	r8, #0
    db9a:	d002      	beq.n	dba2 <bt_gatt_service_register+0x112>
    db9c:	f1b9 0f00 	cmp.w	r9, #0
    dba0:	d1ea      	bne.n	db78 <bt_gatt_service_register+0xe8>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
    dba2:	b11e      	cbz	r6, dbac <bt_gatt_service_register+0x11c>
    dba4:	6823      	ldr	r3, [r4, #0]
    dba6:	8a18      	ldrh	r0, [r3, #16]
    dba8:	4286      	cmp	r6, r0
    dbaa:	d234      	bcs.n	dc16 <bt_gatt_service_register+0x186>
	parent->next = child;
    dbac:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
    dbae:	f104 0308 	add.w	r3, r4, #8
    dbb2:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    dbb4:	686a      	ldr	r2, [r5, #4]
    dbb6:	2a00      	cmp	r2, #0
    dbb8:	d142      	bne.n	dc40 <bt_gatt_service_register+0x1b0>
	list->head = node;
    dbba:	e9c5 3300 	strd	r3, r3, [r5]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dbbe:	f3bf 8f5b 	dmb	ish
    dbc2:	4b2d      	ldr	r3, [pc, #180]	; (dc78 <bt_gatt_service_register+0x1e8>)
    dbc4:	6818      	ldr	r0, [r3, #0]
    dbc6:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&init)) {
    dbca:	2800      	cmp	r0, #0
    dbcc:	d0aa      	beq.n	db24 <bt_gatt_service_register+0x94>
		    svc->attrs[svc->attr_count - 1].handle);
    dbce:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
    dbd2:	2114      	movs	r1, #20
    dbd4:	fb01 2303 	mla	r3, r1, r3, r2
    dbd8:	8a10      	ldrh	r0, [r2, #16]
    dbda:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    dbde:	f7ff fc9f 	bl	d520 <sc_indicate>
	db_changed();
    dbe2:	f7ff fc3d 	bl	d460 <db_changed>
	return 0;
    dbe6:	2000      	movs	r0, #0
    dbe8:	e79c      	b.n	db24 <bt_gatt_service_register+0x94>
		} else if (attrs->handle > handle) {
    dbea:	42b9      	cmp	r1, r7
    dbec:	d8cc      	bhi.n	db88 <bt_gatt_service_register+0xf8>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    dbee:	ab03      	add	r3, sp, #12
    dbf0:	465a      	mov	r2, fp
    dbf2:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
    dbf4:	f8cd a00c 	str.w	sl, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    dbf8:	f01d f89a 	bl	2ad30 <bt_gatt_foreach_attr>
	return attr;
    dbfc:	9b03      	ldr	r3, [sp, #12]
		} else if (find_attr(attrs->handle)) {
    dbfe:	b143      	cbz	r3, dc12 <bt_gatt_service_register+0x182>
			BT_ERR("Unable to register handle 0x%04x",
    dc00:	481e      	ldr	r0, [pc, #120]	; (dc7c <bt_gatt_service_register+0x1ec>)
    dc02:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    dc06:	2145      	movs	r1, #69	; 0x45
    dc08:	f019 fe63 	bl	278d2 <printk>
			return -EINVAL;
    dc0c:	f06f 0015 	mvn.w	r0, #21
    dc10:	e788      	b.n	db24 <bt_gatt_service_register+0x94>
		} else if (find_attr(attrs->handle)) {
    dc12:	4639      	mov	r1, r7
    dc14:	e7b8      	b.n	db88 <bt_gatt_service_register+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    dc16:	6829      	ldr	r1, [r5, #0]
    dc18:	2900      	cmp	r1, #0
    dc1a:	d0d0      	beq.n	dbbe <bt_gatt_service_register+0x12e>
    dc1c:	f1a1 0308 	sub.w	r3, r1, #8
    dc20:	2200      	movs	r2, #0
    dc22:	2b00      	cmp	r3, #0
    dc24:	d0cb      	beq.n	dbbe <bt_gatt_service_register+0x12e>
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
    dc26:	681e      	ldr	r6, [r3, #0]
    dc28:	8a36      	ldrh	r6, [r6, #16]
    dc2a:	4286      	cmp	r6, r0
    dc2c:	d911      	bls.n	dc52 <bt_gatt_service_register+0x1c2>
			if (prev) {
    dc2e:	f104 0308 	add.w	r3, r4, #8
    dc32:	b142      	cbz	r2, dc46 <bt_gatt_service_register+0x1b6>
Z_GENLIST_INSERT(slist, snode)
    dc34:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
    dc36:	60a1      	str	r1, [r4, #8]
Z_GENLIST_INSERT(slist, snode)
    dc38:	2900      	cmp	r1, #0
    dc3a:	d0bb      	beq.n	dbb4 <bt_gatt_service_register+0x124>
	parent->next = child;
    dc3c:	6093      	str	r3, [r2, #8]
	if (err < 0) {
    dc3e:	e7be      	b.n	dbbe <bt_gatt_service_register+0x12e>
    dc40:	6013      	str	r3, [r2, #0]
	list->tail = node;
    dc42:	606b      	str	r3, [r5, #4]
    dc44:	e7bb      	b.n	dbbe <bt_gatt_service_register+0x12e>
Z_GENLIST_PREPEND(slist, snode)
    dc46:	686a      	ldr	r2, [r5, #4]
	parent->next = child;
    dc48:	60a1      	str	r1, [r4, #8]
	list->head = node;
    dc4a:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    dc4c:	2a00      	cmp	r2, #0
    dc4e:	d1b6      	bne.n	dbbe <bt_gatt_service_register+0x12e>
    dc50:	e7f7      	b.n	dc42 <bt_gatt_service_register+0x1b2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    dc52:	689e      	ldr	r6, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    dc54:	2e00      	cmp	r6, #0
    dc56:	d0b2      	beq.n	dbbe <bt_gatt_service_register+0x12e>
    dc58:	461a      	mov	r2, r3
    dc5a:	f1a6 0308 	sub.w	r3, r6, #8
    dc5e:	e7e0      	b.n	dc22 <bt_gatt_service_register+0x192>
	handle = last->attrs[last->attr_count - 1].handle;
    dc60:	681b      	ldr	r3, [r3, #0]
    dc62:	deff      	udf	#255	; 0xff
    dc64:	00032515 	.word	0x00032515
    dc68:	0003067f 	.word	0x0003067f
    dc6c:	20003b5c 	.word	0x20003b5c
    dc70:	20003b08 	.word	0x20003b08
    dc74:	20005696 	.word	0x20005696
    dc78:	20003b10 	.word	0x20003b10
    dc7c:	00032545 	.word	0x00032545
    dc80:	0002a93b 	.word	0x0002a93b

0000dc84 <ccc_set_direct>:
{
    dc84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dc88:	b0b9      	sub	sp, #228	; 0xe4
    dc8a:	4689      	mov	r9, r1
    dc8c:	4617      	mov	r7, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    dc8e:	492a      	ldr	r1, [pc, #168]	; (dd38 <ccc_set_direct+0xb4>)
    dc90:	9840      	ldr	r0, [sp, #256]	; 0x100
    dc92:	466a      	mov	r2, sp
{
    dc94:	4698      	mov	r8, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    dc96:	f01a fa29 	bl	280ec <settings_name_steq>
    dc9a:	b948      	cbnz	r0, dcb0 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
    dc9c:	2145      	movs	r1, #69	; 0x45
    dc9e:	4827      	ldr	r0, [pc, #156]	; (dd3c <ccc_set_direct+0xb8>)
    dca0:	f019 fe17 	bl	278d2 <printk>
    dca4:	f06f 0515 	mvn.w	r5, #21
}
    dca8:	4628      	mov	r0, r5
    dcaa:	b039      	add	sp, #228	; 0xe4
    dcac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    dcb0:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
    dcb2:	a901      	add	r1, sp, #4
    dcb4:	4620      	mov	r0, r4
    dcb6:	f01a fa39 	bl	2812c <settings_name_next>
		if (!name) {
    dcba:	b93c      	cbnz	r4, dccc <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
    dcbc:	2145      	movs	r1, #69	; 0x45
    dcbe:	4820      	ldr	r0, [pc, #128]	; (dd40 <ccc_set_direct+0xbc>)
    dcc0:	f019 fe07 	bl	278d2 <printk>
			return -EINVAL;
    dcc4:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    dcc8:	4625      	mov	r5, r4
    dcca:	e7ed      	b.n	dca8 <ccc_set_direct+0x24>
		} else if (!next) {
    dccc:	9801      	ldr	r0, [sp, #4]
    dcce:	b970      	cbnz	r0, dcee <ccc_set_direct+0x6a>
		err = bt_settings_decode_key(name, &addr);
    dcd0:	ae02      	add	r6, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    dcd2:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    dcd6:	4631      	mov	r1, r6
    dcd8:	4620      	mov	r0, r4
    dcda:	f01b fddd 	bl	29898 <bt_settings_decode_key>
		if (err) {
    dcde:	4605      	mov	r5, r0
    dce0:	b150      	cbz	r0, dcf8 <ccc_set_direct+0x74>
			BT_ERR("Unable to decode address %s", log_strdup(name));
    dce2:	4622      	mov	r2, r4
    dce4:	2145      	movs	r1, #69	; 0x45
    dce6:	4817      	ldr	r0, [pc, #92]	; (dd44 <ccc_set_direct+0xc0>)
    dce8:	f019 fdf3 	bl	278d2 <printk>
    dcec:	e7ea      	b.n	dcc4 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
    dcee:	220a      	movs	r2, #10
    dcf0:	2100      	movs	r1, #0
    dcf2:	f019 fce3 	bl	276bc <strtol>
    dcf6:	e7eb      	b.n	dcd0 <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
    dcf8:	9604      	str	r6, [sp, #16]
		if (len_rd) {
    dcfa:	f1b9 0f00 	cmp.w	r9, #0
    dcfe:	d017      	beq.n	dd30 <ccc_set_direct+0xac>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    dd00:	ae08      	add	r6, sp, #32
    dd02:	22c0      	movs	r2, #192	; 0xc0
    dd04:	4631      	mov	r1, r6
    dd06:	4640      	mov	r0, r8
    dd08:	47b8      	blx	r7
			if (len < 0) {
    dd0a:	1e04      	subs	r4, r0, #0
    dd0c:	da05      	bge.n	dd1a <ccc_set_direct+0x96>
				BT_ERR("Failed to decode value (err %zd)", len);
    dd0e:	4622      	mov	r2, r4
    dd10:	2145      	movs	r1, #69	; 0x45
    dd12:	480d      	ldr	r0, [pc, #52]	; (dd48 <ccc_set_direct+0xc4>)
    dd14:	f019 fddd 	bl	278d2 <printk>
				return len;
    dd18:	e7d6      	b.n	dcc8 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
    dd1a:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    dd1c:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    dd1e:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    dd20:	ab04      	add	r3, sp, #16
    dd22:	4a0a      	ldr	r2, [pc, #40]	; (dd4c <ccc_set_direct+0xc8>)
    dd24:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd28:	2001      	movs	r0, #1
    dd2a:	f01d f801 	bl	2ad30 <bt_gatt_foreach_attr>
	return 0;
    dd2e:	e7bb      	b.n	dca8 <ccc_set_direct+0x24>
			load.count = 0;
    dd30:	e9cd 0006 	strd	r0, r0, [sp, #24]
    dd34:	e7f4      	b.n	dd20 <ccc_set_direct+0x9c>
    dd36:	bf00      	nop
    dd38:	0003258e 	.word	0x0003258e
    dd3c:	00032595 	.word	0x00032595
    dd40:	000316aa 	.word	0x000316aa
    dd44:	0003274b 	.word	0x0003274b
    dd48:	0003263a 	.word	0x0003263a
    dd4c:	0000ce11 	.word	0x0000ce11

0000dd50 <bt_gatt_notify_cb>:
{
    dd50:	b530      	push	{r4, r5, lr}
    dd52:	4604      	mov	r4, r0
    dd54:	b08d      	sub	sp, #52	; 0x34
	__ASSERT(params, "invalid parameters\n");
    dd56:	460d      	mov	r5, r1
    dd58:	b951      	cbnz	r1, dd70 <bt_gatt_notify_cb+0x20>
    dd5a:	4941      	ldr	r1, [pc, #260]	; (de60 <bt_gatt_notify_cb+0x110>)
    dd5c:	4841      	ldr	r0, [pc, #260]	; (de64 <bt_gatt_notify_cb+0x114>)
    dd5e:	f640 023d 	movw	r2, #2109	; 0x83d
    dd62:	f019 fdb6 	bl	278d2 <printk>
    dd66:	f640 013d 	movw	r1, #2109	; 0x83d
    dd6a:	483d      	ldr	r0, [pc, #244]	; (de60 <bt_gatt_notify_cb+0x110>)
    dd6c:	f01a f82a 	bl	27dc4 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    dd70:	686b      	ldr	r3, [r5, #4]
    dd72:	b953      	cbnz	r3, dd8a <bt_gatt_notify_cb+0x3a>
    dd74:	493a      	ldr	r1, [pc, #232]	; (de60 <bt_gatt_notify_cb+0x110>)
    dd76:	483b      	ldr	r0, [pc, #236]	; (de64 <bt_gatt_notify_cb+0x114>)
    dd78:	f640 023e 	movw	r2, #2110	; 0x83e
    dd7c:	f019 fda9 	bl	278d2 <printk>
    dd80:	f640 013e 	movw	r1, #2110	; 0x83e
    dd84:	4836      	ldr	r0, [pc, #216]	; (de60 <bt_gatt_notify_cb+0x110>)
    dd86:	f01a f81d 	bl	27dc4 <assert_post_action>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    dd8a:	2101      	movs	r1, #1
    dd8c:	4836      	ldr	r0, [pc, #216]	; (de68 <bt_gatt_notify_cb+0x118>)
    dd8e:	f01c fee8 	bl	2ab62 <atomic_test_bit>
    dd92:	2800      	cmp	r0, #0
    dd94:	d05a      	beq.n	de4c <bt_gatt_notify_cb+0xfc>
	data.attr = params->attr;
    dd96:	6868      	ldr	r0, [r5, #4]
    dd98:	9007      	str	r0, [sp, #28]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    dd9a:	b114      	cbz	r4, dda2 <bt_gatt_notify_cb+0x52>
    dd9c:	7aa3      	ldrb	r3, [r4, #10]
    dd9e:	2b07      	cmp	r3, #7
    dda0:	d157      	bne.n	de52 <bt_gatt_notify_cb+0x102>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    dda2:	f7ff fd13 	bl	d7cc <bt_gatt_attr_get_handle>
    dda6:	f8ad 0020 	strh.w	r0, [sp, #32]
	if (!data.handle) {
    ddaa:	b918      	cbnz	r0, ddb4 <bt_gatt_notify_cb+0x64>
		return -ENOENT;
    ddac:	f06f 0001 	mvn.w	r0, #1
}
    ddb0:	b00d      	add	sp, #52	; 0x34
    ddb2:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    ddb4:	682a      	ldr	r2, [r5, #0]
    ddb6:	b9aa      	cbnz	r2, dde4 <bt_gatt_notify_cb+0x94>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    ddb8:	9b07      	ldr	r3, [sp, #28]
    ddba:	6818      	ldr	r0, [r3, #0]
    ddbc:	2300      	movs	r3, #0
    ddbe:	f88d 3014 	strb.w	r3, [sp, #20]
    ddc2:	a905      	add	r1, sp, #20
    ddc4:	f642 0303 	movw	r3, #10243	; 0x2803
    ddc8:	f8ad 3016 	strh.w	r3, [sp, #22]
    ddcc:	f01b ff48 	bl	29c60 <bt_uuid_cmp>
    ddd0:	b1c0      	cbz	r0, de04 <bt_gatt_notify_cb+0xb4>
	if (conn) {
    ddd2:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    ddd6:	b1fc      	cbz	r4, de18 <bt_gatt_notify_cb+0xc8>
		return gatt_notify(conn, data.handle, params);
    ddd8:	4601      	mov	r1, r0
    ddda:	462a      	mov	r2, r5
    dddc:	4620      	mov	r0, r4
    ddde:	f7ff fb6f 	bl	d4c0 <gatt_notify>
    dde2:	e7e5      	b.n	ddb0 <bt_gatt_notify_cb+0x60>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    dde4:	a907      	add	r1, sp, #28
    dde6:	9102      	str	r1, [sp, #8]
    dde8:	4920      	ldr	r1, [pc, #128]	; (de6c <bt_gatt_notify_cb+0x11c>)
    ddea:	9101      	str	r1, [sp, #4]
    ddec:	2101      	movs	r1, #1
	found->attr = NULL;
    ddee:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    ddf0:	9100      	str	r1, [sp, #0]
    ddf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    ddf6:	9307      	str	r3, [sp, #28]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    ddf8:	f7ff fd2c 	bl	d854 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    ddfc:	9b07      	ldr	r3, [sp, #28]
    ddfe:	2b00      	cmp	r3, #0
    de00:	d1da      	bne.n	ddb8 <bt_gatt_notify_cb+0x68>
    de02:	e7d3      	b.n	ddac <bt_gatt_notify_cb+0x5c>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    de04:	9807      	ldr	r0, [sp, #28]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    de06:	68c3      	ldr	r3, [r0, #12]
    de08:	799b      	ldrb	r3, [r3, #6]
    de0a:	06db      	lsls	r3, r3, #27
    de0c:	d524      	bpl.n	de58 <bt_gatt_notify_cb+0x108>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    de0e:	f01c ff48 	bl	2aca2 <bt_gatt_attr_value_handle>
    de12:	f8ad 0020 	strh.w	r0, [sp, #32]
    de16:	e7dc      	b.n	ddd2 <bt_gatt_notify_cb+0x82>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    de18:	f642 1202 	movw	r2, #10498	; 0x2902
    de1c:	f8ad 201a 	strh.w	r2, [sp, #26]
    de20:	aa07      	add	r2, sp, #28
	data.err = -ENOTCONN;
    de22:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    de26:	9202      	str	r2, [sp, #8]
    de28:	4a11      	ldr	r2, [pc, #68]	; (de70 <bt_gatt_notify_cb+0x120>)
	data.err = -ENOTCONN;
    de2a:	9309      	str	r3, [sp, #36]	; 0x24
	data.type = BT_GATT_CCC_NOTIFY;
    de2c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    de2e:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    de32:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    de36:	aa06      	add	r2, sp, #24
    de38:	4623      	mov	r3, r4
    de3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    de3e:	950b      	str	r5, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    de40:	f88d 4018 	strb.w	r4, [sp, #24]
    de44:	f7ff fd06 	bl	d854 <bt_gatt_foreach_attr_type>
	return data.err;
    de48:	9809      	ldr	r0, [sp, #36]	; 0x24
    de4a:	e7b1      	b.n	ddb0 <bt_gatt_notify_cb+0x60>
		return -EAGAIN;
    de4c:	f06f 000a 	mvn.w	r0, #10
    de50:	e7ae      	b.n	ddb0 <bt_gatt_notify_cb+0x60>
		return -ENOTCONN;
    de52:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    de56:	e7ab      	b.n	ddb0 <bt_gatt_notify_cb+0x60>
			return -EINVAL;
    de58:	f06f 0015 	mvn.w	r0, #21
    de5c:	e7a8      	b.n	ddb0 <bt_gatt_notify_cb+0x60>
    de5e:	bf00      	nop
    de60:	00032515 	.word	0x00032515
    de64:	0003067f 	.word	0x0003067f
    de68:	20000b54 	.word	0x20000b54
    de6c:	0002a989 	.word	0x0002a989
    de70:	0000d631 	.word	0x0000d631

0000de74 <bt_gatt_indicate>:
{
    de74:	b530      	push	{r4, r5, lr}
    de76:	4605      	mov	r5, r0
    de78:	b08d      	sub	sp, #52	; 0x34
	__ASSERT(params, "invalid parameters\n");
    de7a:	460c      	mov	r4, r1
    de7c:	b951      	cbnz	r1, de94 <bt_gatt_indicate+0x20>
    de7e:	4943      	ldr	r1, [pc, #268]	; (df8c <bt_gatt_indicate+0x118>)
    de80:	4843      	ldr	r0, [pc, #268]	; (df90 <bt_gatt_indicate+0x11c>)
    de82:	f640 0289 	movw	r2, #2185	; 0x889
    de86:	f019 fd24 	bl	278d2 <printk>
    de8a:	f640 0189 	movw	r1, #2185	; 0x889
    de8e:	483f      	ldr	r0, [pc, #252]	; (df8c <bt_gatt_indicate+0x118>)
    de90:	f019 ff98 	bl	27dc4 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    de94:	6863      	ldr	r3, [r4, #4]
    de96:	b953      	cbnz	r3, deae <bt_gatt_indicate+0x3a>
    de98:	493c      	ldr	r1, [pc, #240]	; (df8c <bt_gatt_indicate+0x118>)
    de9a:	483d      	ldr	r0, [pc, #244]	; (df90 <bt_gatt_indicate+0x11c>)
    de9c:	f640 028a 	movw	r2, #2186	; 0x88a
    dea0:	f019 fd17 	bl	278d2 <printk>
    dea4:	f640 018a 	movw	r1, #2186	; 0x88a
    dea8:	4838      	ldr	r0, [pc, #224]	; (df8c <bt_gatt_indicate+0x118>)
    deaa:	f019 ff8b 	bl	27dc4 <assert_post_action>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    deae:	2101      	movs	r1, #1
    deb0:	4838      	ldr	r0, [pc, #224]	; (df94 <bt_gatt_indicate+0x120>)
    deb2:	f01c fe56 	bl	2ab62 <atomic_test_bit>
    deb6:	2800      	cmp	r0, #0
    deb8:	d05e      	beq.n	df78 <bt_gatt_indicate+0x104>
	data.attr = params->attr;
    deba:	6860      	ldr	r0, [r4, #4]
    debc:	9007      	str	r0, [sp, #28]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    debe:	b115      	cbz	r5, dec6 <bt_gatt_indicate+0x52>
    dec0:	7aab      	ldrb	r3, [r5, #10]
    dec2:	2b07      	cmp	r3, #7
    dec4:	d15b      	bne.n	df7e <bt_gatt_indicate+0x10a>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    dec6:	f7ff fc81 	bl	d7cc <bt_gatt_attr_get_handle>
    deca:	f8ad 0020 	strh.w	r0, [sp, #32]
	if (!data.handle) {
    dece:	b918      	cbnz	r0, ded8 <bt_gatt_indicate+0x64>
		return -ENOENT;
    ded0:	f06f 0001 	mvn.w	r0, #1
}
    ded4:	b00d      	add	sp, #52	; 0x34
    ded6:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    ded8:	6822      	ldr	r2, [r4, #0]
    deda:	b9ba      	cbnz	r2, df0c <bt_gatt_indicate+0x98>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    dedc:	9b07      	ldr	r3, [sp, #28]
    dede:	6818      	ldr	r0, [r3, #0]
    dee0:	2300      	movs	r3, #0
    dee2:	f88d 3014 	strb.w	r3, [sp, #20]
    dee6:	a905      	add	r1, sp, #20
    dee8:	f642 0303 	movw	r3, #10243	; 0x2803
    deec:	f8ad 3016 	strh.w	r3, [sp, #22]
    def0:	f01b feb6 	bl	29c60 <bt_uuid_cmp>
    def4:	b1d0      	cbz	r0, df2c <bt_gatt_indicate+0xb8>
	if (conn) {
    def6:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    defa:	b30d      	cbz	r5, df40 <bt_gatt_indicate+0xcc>
		params->_ref = 1;
    defc:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    defe:	4601      	mov	r1, r0
		params->_ref = 1;
    df00:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
    df02:	4622      	mov	r2, r4
    df04:	4628      	mov	r0, r5
    df06:	f7ff fb3d 	bl	d584 <gatt_indicate>
    df0a:	e7e3      	b.n	ded4 <bt_gatt_indicate+0x60>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    df0c:	a907      	add	r1, sp, #28
    df0e:	9102      	str	r1, [sp, #8]
    df10:	4921      	ldr	r1, [pc, #132]	; (df98 <bt_gatt_indicate+0x124>)
    df12:	9101      	str	r1, [sp, #4]
    df14:	2101      	movs	r1, #1
	found->attr = NULL;
    df16:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    df18:	9100      	str	r1, [sp, #0]
    df1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    df1e:	9307      	str	r3, [sp, #28]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    df20:	f7ff fc98 	bl	d854 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    df24:	9b07      	ldr	r3, [sp, #28]
    df26:	2b00      	cmp	r3, #0
    df28:	d1d8      	bne.n	dedc <bt_gatt_indicate+0x68>
    df2a:	e7d1      	b.n	ded0 <bt_gatt_indicate+0x5c>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    df2c:	9807      	ldr	r0, [sp, #28]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    df2e:	68c3      	ldr	r3, [r0, #12]
    df30:	799b      	ldrb	r3, [r3, #6]
    df32:	069b      	lsls	r3, r3, #26
    df34:	d526      	bpl.n	df84 <bt_gatt_indicate+0x110>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    df36:	f01c feb4 	bl	2aca2 <bt_gatt_attr_value_handle>
    df3a:	f8ad 0020 	strh.w	r0, [sp, #32]
    df3e:	e7da      	b.n	def6 <bt_gatt_indicate+0x82>
	data.err = -ENOTCONN;
    df40:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    df44:	9309      	str	r3, [sp, #36]	; 0x24
	data.type = BT_GATT_CCC_INDICATE;
    df46:	2302      	movs	r3, #2
    df48:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    df4c:	f642 1302 	movw	r3, #10498	; 0x2902
    df50:	f8ad 301a 	strh.w	r3, [sp, #26]
    df54:	ab07      	add	r3, sp, #28
	params->_ref = 0;
    df56:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    df58:	9302      	str	r3, [sp, #8]
    df5a:	4b10      	ldr	r3, [pc, #64]	; (df9c <bt_gatt_indicate+0x128>)
    df5c:	9301      	str	r3, [sp, #4]
    df5e:	2301      	movs	r3, #1
    df60:	9300      	str	r3, [sp, #0]
    df62:	aa06      	add	r2, sp, #24
    df64:	462b      	mov	r3, r5
    df66:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    df6a:	940b      	str	r4, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    df6c:	f88d 5018 	strb.w	r5, [sp, #24]
    df70:	f7ff fc70 	bl	d854 <bt_gatt_foreach_attr_type>
	return data.err;
    df74:	9809      	ldr	r0, [sp, #36]	; 0x24
    df76:	e7ad      	b.n	ded4 <bt_gatt_indicate+0x60>
		return -EAGAIN;
    df78:	f06f 000a 	mvn.w	r0, #10
    df7c:	e7aa      	b.n	ded4 <bt_gatt_indicate+0x60>
		return -ENOTCONN;
    df7e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    df82:	e7a7      	b.n	ded4 <bt_gatt_indicate+0x60>
			return -EINVAL;
    df84:	f06f 0015 	mvn.w	r0, #21
    df88:	e7a4      	b.n	ded4 <bt_gatt_indicate+0x60>
    df8a:	bf00      	nop
    df8c:	00032515 	.word	0x00032515
    df90:	0003067f 	.word	0x0003067f
    df94:	20000b54 	.word	0x20000b54
    df98:	0002a989 	.word	0x0002a989
    df9c:	0000d631 	.word	0x0000d631

0000dfa0 <sc_process>:
{
    dfa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    dfa2:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    dfa6:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    dfa8:	2101      	movs	r1, #1
    dfaa:	4628      	mov	r0, r5
    dfac:	f01c fdd9 	bl	2ab62 <atomic_test_bit>
    dfb0:	b150      	cbz	r0, dfc8 <sc_process+0x28>
    dfb2:	4917      	ldr	r1, [pc, #92]	; (e010 <sc_process+0x70>)
    dfb4:	4817      	ldr	r0, [pc, #92]	; (e014 <sc_process+0x74>)
    dfb6:	f240 32af 	movw	r2, #943	; 0x3af
    dfba:	f019 fc8a 	bl	278d2 <printk>
    dfbe:	f240 31af 	movw	r1, #943	; 0x3af
    dfc2:	4813      	ldr	r0, [pc, #76]	; (e010 <sc_process+0x70>)
    dfc4:	f019 fefe 	bl	27dc4 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
    dfc8:	f854 3c08 	ldr.w	r3, [r4, #-8]
    dfcc:	9301      	str	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    dfce:	f06f 0101 	mvn.w	r1, #1
    dfd2:	4628      	mov	r0, r5
    dfd4:	f01c fd32 	bl	2aa3c <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    dfd8:	4b0f      	ldr	r3, [pc, #60]	; (e018 <sc_process+0x78>)
    dfda:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    dfde:	4b0f      	ldr	r3, [pc, #60]	; (e01c <sc_process+0x7c>)
    dfe0:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    dfe4:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    dfe6:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    dfe8:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    dfec:	2304      	movs	r3, #4
	sc->start = 0U;
    dfee:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    dff2:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    dff6:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    dffa:	f1a4 0120 	sub.w	r1, r4, #32
    dffe:	f7ff ff39 	bl	de74 <bt_gatt_indicate>
    e002:	b918      	cbnz	r0, e00c <sc_process+0x6c>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    e004:	2101      	movs	r1, #1
    e006:	4628      	mov	r0, r5
    e008:	f01c fddf 	bl	2abca <atomic_set_bit>
}
    e00c:	b003      	add	sp, #12
    e00e:	bd30      	pop	{r4, r5, pc}
    e010:	00032515 	.word	0x00032515
    e014:	0003067f 	.word	0x0003067f
    e018:	0002f988 	.word	0x0002f988
    e01c:	0000d2a9 	.word	0x0000d2a9

0000e020 <update_ccc>:
{
    e020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    e024:	4b30      	ldr	r3, [pc, #192]	; (e0e8 <update_ccc+0xc8>)
    e026:	6881      	ldr	r1, [r0, #8]
    e028:	4299      	cmp	r1, r3
{
    e02a:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    e02c:	d158      	bne.n	e0e0 <update_ccc+0xc0>
	ccc = attr->user_data;
    e02e:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
    e030:	6815      	ldr	r5, [r2, #0]
				BT_WARN("CCC %p not writable", attr);
    e032:	f8df 90cc 	ldr.w	r9, [pc, #204]	; e100 <update_ccc+0xe0>
    e036:	1c7c      	adds	r4, r7, #1
    e038:	f107 081f 	add.w	r8, r7, #31
		if (!cfg->value ||
    e03c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    e040:	b193      	cbz	r3, e068 <update_ccc+0x48>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    e042:	4622      	mov	r2, r4
    e044:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    e048:	4628      	mov	r0, r5
    e04a:	f01c f80b 	bl	2a064 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    e04e:	b158      	cbz	r0, e068 <update_ccc+0x48>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    e050:	222a      	movs	r2, #42	; 0x2a
    e052:	4631      	mov	r1, r6
    e054:	4628      	mov	r0, r5
    e056:	f01c fe7b 	bl	2ad50 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    e05a:	2803      	cmp	r0, #3
    e05c:	d108      	bne.n	e070 <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
    e05e:	4632      	mov	r2, r6
    e060:	2157      	movs	r1, #87	; 0x57
    e062:	4648      	mov	r0, r9
    e064:	f019 fc35 	bl	278d2 <printk>
				continue;
    e068:	340a      	adds	r4, #10
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    e06a:	4544      	cmp	r4, r8
    e06c:	d1e6      	bne.n	e03c <update_ccc+0x1c>
    e06e:	e037      	b.n	e0e0 <update_ccc+0xc0>
		gatt_ccc_changed(attr, ccc);
    e070:	4639      	mov	r1, r7
    e072:	4630      	mov	r0, r6
    e074:	f01c fc64 	bl	2a940 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    e078:	4b1c      	ldr	r3, [pc, #112]	; (e0ec <update_ccc+0xcc>)
    e07a:	429f      	cmp	r7, r3
    e07c:	d130      	bne.n	e0e0 <update_ccc+0xc0>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    e07e:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e082:	7a28      	ldrb	r0, [r5, #8]
    e084:	f7fe ff3c 	bl	cf00 <find_sc_cfg>
	if (!cfg) {
    e088:	4604      	mov	r4, r0
    e08a:	b348      	cbz	r0, e0e0 <update_ccc+0xc0>
	if (!(cfg->data.start || cfg->data.end)) {
    e08c:	8902      	ldrh	r2, [r0, #8]
    e08e:	8943      	ldrh	r3, [r0, #10]
    e090:	ea52 0103 	orrs.w	r1, r2, r3
    e094:	d024      	beq.n	e0e0 <update_ccc+0xc0>
	index = bt_conn_index(conn);
    e096:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    e098:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    e09c:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    e0a0:	f7fd fc18 	bl	b8d4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    e0a4:	4912      	ldr	r1, [pc, #72]	; (e0f0 <update_ccc+0xd0>)
    e0a6:	4a13      	ldr	r2, [pc, #76]	; (e0f4 <update_ccc+0xd4>)
    e0a8:	2318      	movs	r3, #24
    e0aa:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    e0ae:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    e0b0:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    e0b2:	4a11      	ldr	r2, [pc, #68]	; (e0f8 <update_ccc+0xd8>)
    e0b4:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    e0b6:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    e0b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
    e0bc:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    e0be:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    e0c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
    e0c4:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    e0c6:	4628      	mov	r0, r5
    e0c8:	f7ff fed4 	bl	de74 <bt_gatt_indicate>
    e0cc:	b118      	cbz	r0, e0d6 <update_ccc+0xb6>
		BT_ERR("SC restore indication failed");
    e0ce:	2145      	movs	r1, #69	; 0x45
    e0d0:	480a      	ldr	r0, [pc, #40]	; (e0fc <update_ccc+0xdc>)
    e0d2:	f019 fbfe 	bl	278d2 <printk>
__ssp_bos_icheck3(memset, void *, int)
    e0d6:	2300      	movs	r3, #0
    e0d8:	60a3      	str	r3, [r4, #8]
		sc_store(cfg);
    e0da:	4620      	mov	r0, r4
    e0dc:	f7fe fdfc 	bl	ccd8 <sc_store>
}
    e0e0:	2001      	movs	r0, #1
    e0e2:	b003      	add	sp, #12
    e0e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e0e8:	0000d3b1 	.word	0x0000d3b1
    e0ec:	20001304 	.word	0x20001304
    e0f0:	20003b14 	.word	0x20003b14
    e0f4:	0002f988 	.word	0x0002f988
    e0f8:	0002abe9 	.word	0x0002abe9
    e0fc:	000327e1 	.word	0x000327e1
    e100:	000327c8 	.word	0x000327c8

0000e104 <bt_gatt_connected>:
{
    e104:	b530      	push	{r4, r5, lr}
    e106:	b08f      	sub	sp, #60	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e108:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    e10c:	4604      	mov	r4, r0
	data.conn = conn;
    e10e:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    e110:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e112:	4629      	mov	r1, r5
    e114:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    e116:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e11a:	f01b feb6 	bl	29e8a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    e11e:	b190      	cbz	r0, e146 <bt_gatt_connected+0x42>
		if (conn->id) {
    e120:	7a22      	ldrb	r2, [r4, #8]
    e122:	b1ca      	cbz	r2, e158 <bt_gatt_connected+0x54>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    e124:	ac02      	add	r4, sp, #8
    e126:	2104      	movs	r1, #4
    e128:	4620      	mov	r0, r4
    e12a:	f019 fb37 	bl	2779c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e12e:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e130:	4a0a      	ldr	r2, [pc, #40]	; (e15c <bt_gatt_connected+0x58>)
    e132:	2124      	movs	r1, #36	; 0x24
    e134:	a805      	add	r0, sp, #20
    e136:	462b      	mov	r3, r5
    e138:	f7fa fc9a 	bl	8a70 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    e13c:	aa05      	add	r2, sp, #20
    e13e:	4908      	ldr	r1, [pc, #32]	; (e160 <bt_gatt_connected+0x5c>)
    e140:	4610      	mov	r0, r2
    e142:	f7f7 ff69 	bl	6018 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e146:	ab03      	add	r3, sp, #12
    e148:	4a06      	ldr	r2, [pc, #24]	; (e164 <bt_gatt_connected+0x60>)
    e14a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e14e:	2001      	movs	r0, #1
    e150:	f01c fdee 	bl	2ad30 <bt_gatt_foreach_attr>
}
    e154:	b00f      	add	sp, #60	; 0x3c
    e156:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e158:	9200      	str	r2, [sp, #0]
    e15a:	e7e9      	b.n	e130 <bt_gatt_connected+0x2c>
    e15c:	00032591 	.word	0x00032591
    e160:	0000dc85 	.word	0x0000dc85
    e164:	0000e021 	.word	0x0000e021

0000e168 <db_hash_read>:
{
    e168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e16c:	4607      	mov	r7, r0
	err = k_delayed_work_cancel(&db_hash_work);
    e16e:	480c      	ldr	r0, [pc, #48]	; (e1a0 <db_hash_read+0x38>)
{
    e170:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    e174:	4614      	mov	r4, r2
    e176:	461d      	mov	r5, r3
	err = k_delayed_work_cancel(&db_hash_work);
    e178:	f017 f9fe 	bl	25578 <k_delayed_work_cancel>
	if (!err) {
    e17c:	b910      	cbnz	r0, e184 <db_hash_read+0x1c>
		db_hash_gen(true);
    e17e:	2001      	movs	r0, #1
    e180:	f7ff fc1e 	bl	d9c0 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    e184:	2101      	movs	r1, #1
    e186:	4638      	mov	r0, r7
    e188:	f01c fe05 	bl	2ad96 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    e18c:	2310      	movs	r3, #16
    e18e:	9306      	str	r3, [sp, #24]
    e190:	4632      	mov	r2, r6
    e192:	4629      	mov	r1, r5
    e194:	4620      	mov	r0, r4
    e196:	4b03      	ldr	r3, [pc, #12]	; (e1a4 <db_hash_read+0x3c>)
}
    e198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    e19c:	f01c bc77 	b.w	2aa8e <bt_gatt_attr_read.constprop.24>
    e1a0:	20002670 	.word	0x20002670
    e1a4:	20005831 	.word	0x20005831

0000e1a8 <bt_gatt_store_ccc>:
{
    e1a8:	b570      	push	{r4, r5, r6, lr}
    e1aa:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    e1ac:	2300      	movs	r3, #0
{
    e1ae:	4604      	mov	r4, r0
    e1b0:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    e1b2:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    e1b4:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    e1b8:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    e1ba:	4a15      	ldr	r2, [pc, #84]	; (e210 <bt_gatt_store_ccc+0x68>)
    e1bc:	ab0d      	add	r3, sp, #52	; 0x34
    e1be:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e1c2:	2001      	movs	r0, #1
    e1c4:	f01c fdb4 	bl	2ad30 <bt_gatt_foreach_attr>
	if (id) {
    e1c8:	b1ec      	cbz	r4, e206 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
    e1ca:	ae03      	add	r6, sp, #12
    e1cc:	4622      	mov	r2, r4
    e1ce:	2104      	movs	r1, #4
    e1d0:	4630      	mov	r0, r6
    e1d2:	f019 fae3 	bl	2779c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    e1d6:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    e1d8:	4a0e      	ldr	r2, [pc, #56]	; (e214 <bt_gatt_store_ccc+0x6c>)
    e1da:	462b      	mov	r3, r5
    e1dc:	2124      	movs	r1, #36	; 0x24
    e1de:	a804      	add	r0, sp, #16
    e1e0:	f7fa fc46 	bl	8a70 <bt_settings_encode_key>
	if (save.count) {
    e1e4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    e1e6:	b182      	cbz	r2, e20a <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
    e1e8:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    e1ea:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    e1ec:	a804      	add	r0, sp, #16
    e1ee:	f7f7 feb5 	bl	5f5c <settings_save_one>
	if (err) {
    e1f2:	4604      	mov	r4, r0
    e1f4:	b120      	cbz	r0, e200 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
    e1f6:	4602      	mov	r2, r0
    e1f8:	2145      	movs	r1, #69	; 0x45
    e1fa:	4807      	ldr	r0, [pc, #28]	; (e218 <bt_gatt_store_ccc+0x70>)
    e1fc:	f019 fb69 	bl	278d2 <printk>
}
    e200:	4620      	mov	r0, r4
    e202:	b040      	add	sp, #256	; 0x100
    e204:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    e206:	9400      	str	r4, [sp, #0]
    e208:	e7e6      	b.n	e1d8 <bt_gatt_store_ccc+0x30>
		str = NULL;
    e20a:	4611      	mov	r1, r2
    e20c:	e7ee      	b.n	e1ec <bt_gatt_store_ccc+0x44>
    e20e:	bf00      	nop
    e210:	0000cdd9 	.word	0x0000cdd9
    e214:	00032591 	.word	0x00032591
    e218:	0003256b 	.word	0x0003256b

0000e21c <bt_gatt_service_unregister>:
{
    e21c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(svc, "invalid parameters\n");
    e220:	4605      	mov	r5, r0
    e222:	b950      	cbnz	r0, e23a <bt_gatt_service_unregister+0x1e>
    e224:	493f      	ldr	r1, [pc, #252]	; (e324 <bt_gatt_service_unregister+0x108>)
    e226:	4840      	ldr	r0, [pc, #256]	; (e328 <bt_gatt_service_unregister+0x10c>)
    e228:	f240 42d1 	movw	r2, #1233	; 0x4d1
    e22c:	f019 fb51 	bl	278d2 <printk>
    e230:	f240 41d1 	movw	r1, #1233	; 0x4d1
    e234:	483b      	ldr	r0, [pc, #236]	; (e324 <bt_gatt_service_unregister+0x108>)
    e236:	f019 fdc5 	bl	27dc4 <assert_post_action>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e23a:	4b3c      	ldr	r3, [pc, #240]	; (e32c <bt_gatt_service_unregister+0x110>)
    e23c:	681a      	ldr	r2, [r3, #0]
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
    e23e:	f105 0008 	add.w	r0, r5, #8
    e242:	2100      	movs	r1, #0
    e244:	b922      	cbnz	r2, e250 <bt_gatt_service_unregister+0x34>
		return -ENOENT;
    e246:	f06f 0001 	mvn.w	r0, #1
}
    e24a:	b003      	add	sp, #12
    e24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e250:	4290      	cmp	r0, r2
    e252:	d12d      	bne.n	e2b0 <bt_gatt_service_unregister+0x94>
Z_GENLIST_REMOVE(slist, snode)
    e254:	68aa      	ldr	r2, [r5, #8]
    e256:	bb29      	cbnz	r1, e2a4 <bt_gatt_service_unregister+0x88>
    e258:	6859      	ldr	r1, [r3, #4]
	list->head = node;
    e25a:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    e25c:	4288      	cmp	r0, r1
    e25e:	d100      	bne.n	e262 <bt_gatt_service_unregister+0x46>
	list->tail = node;
    e260:	605a      	str	r2, [r3, #4]
	parent->next = child;
    e262:	2600      	movs	r6, #0
		if (attr->write == bt_gatt_attr_write_ccc) {
    e264:	f8df 90cc 	ldr.w	r9, [pc, #204]	; e334 <bt_gatt_service_unregister+0x118>
    e268:	60ae      	str	r6, [r5, #8]
		struct bt_gatt_attr *attr = &svc->attrs[i];
    e26a:	f04f 0814 	mov.w	r8, #20
	ccc->value = 0;
    e26e:	4637      	mov	r7, r6
	for (uint16_t i = 0; i < svc->attr_count; i++) {
    e270:	686a      	ldr	r2, [r5, #4]
    e272:	b2b3      	uxth	r3, r6
    e274:	429a      	cmp	r2, r3
    e276:	d81e      	bhi.n	e2b6 <bt_gatt_service_unregister+0x9a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e278:	f3bf 8f5b 	dmb	ish
    e27c:	4b2c      	ldr	r3, [pc, #176]	; (e330 <bt_gatt_service_unregister+0x114>)
    e27e:	6818      	ldr	r0, [r3, #0]
    e280:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&init)) {
    e284:	2800      	cmp	r0, #0
    e286:	d0e0      	beq.n	e24a <bt_gatt_service_unregister+0x2e>
		    svc->attrs[svc->attr_count - 1].handle);
    e288:	e9d5 2300 	ldrd	r2, r3, [r5]
	sc_indicate(svc->attrs[0].handle,
    e28c:	2114      	movs	r1, #20
    e28e:	fb01 2303 	mla	r3, r1, r3, r2
    e292:	8a10      	ldrh	r0, [r2, #16]
    e294:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    e298:	f7ff f942 	bl	d520 <sc_indicate>
	db_changed();
    e29c:	f7ff f8e0 	bl	d460 <db_changed>
	return 0;
    e2a0:	2000      	movs	r0, #0
    e2a2:	e7d2      	b.n	e24a <bt_gatt_service_unregister+0x2e>
    e2a4:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    e2a6:	685a      	ldr	r2, [r3, #4]
    e2a8:	4290      	cmp	r0, r2
	list->tail = node;
    e2aa:	bf08      	it	eq
    e2ac:	6059      	streq	r1, [r3, #4]
    e2ae:	e7d8      	b.n	e262 <bt_gatt_service_unregister+0x46>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e2b0:	4611      	mov	r1, r2
    e2b2:	6812      	ldr	r2, [r2, #0]
    e2b4:	e7c6      	b.n	e244 <bt_gatt_service_unregister+0x28>
		struct bt_gatt_attr *attr = &svc->attrs[i];
    e2b6:	682a      	ldr	r2, [r5, #0]
    e2b8:	fb08 2303 	mla	r3, r8, r3, r2
		if (attr->write == bt_gatt_attr_write_ccc) {
    e2bc:	689a      	ldr	r2, [r3, #8]
    e2be:	454a      	cmp	r2, r9
    e2c0:	d001      	beq.n	e2c6 <bt_gatt_service_unregister+0xaa>
    e2c2:	3601      	adds	r6, #1
    e2c4:	e7d4      	b.n	e270 <bt_gatt_service_unregister+0x54>
			gatt_unregister_ccc(attr->user_data);
    e2c6:	68db      	ldr	r3, [r3, #12]
	ccc->value = 0;
    e2c8:	83df      	strh	r7, [r3, #30]
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    e2ca:	1c5c      	adds	r4, r3, #1
    e2cc:	f103 0a1f 	add.w	sl, r3, #31
    e2d0:	2207      	movs	r2, #7
    e2d2:	4669      	mov	r1, sp
    e2d4:	4620      	mov	r0, r4
		if (bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    e2d6:	9700      	str	r7, [sp, #0]
    e2d8:	f8cd 7003 	str.w	r7, [sp, #3]
    e2dc:	f01f ffd7 	bl	2e28e <memcmp>
    e2e0:	b1d8      	cbz	r0, e31a <bt_gatt_service_unregister+0xfe>
			conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    e2e2:	4621      	mov	r1, r4
    e2e4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    e2e8:	f01b ff05 	bl	2a0f6 <bt_conn_lookup_addr_le>
			if (conn) {
    e2ec:	b958      	cbnz	r0, e306 <bt_gatt_service_unregister+0xea>
			    bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    e2ee:	4621      	mov	r1, r4
    e2f0:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    e2f4:	f01b fdc9 	bl	29e8a <bt_addr_le_is_bonded>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    e2f8:	b160      	cbz	r0, e314 <bt_gatt_service_unregister+0xf8>
				bt_gatt_store_ccc(cfg->id, &cfg->peer);
    e2fa:	4621      	mov	r1, r4
    e2fc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    e300:	f7ff ff52 	bl	e1a8 <bt_gatt_store_ccc>
    e304:	e006      	b.n	e314 <bt_gatt_service_unregister+0xf8>
				if (conn->state == BT_CONN_CONNECTED) {
    e306:	f890 b00a 	ldrb.w	fp, [r0, #10]
				bt_conn_unref(conn);
    e30a:	f7fc ffe7 	bl	b2dc <bt_conn_unref>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    e30e:	f1bb 0f07 	cmp.w	fp, #7
    e312:	d1ec      	bne.n	e2ee <bt_gatt_service_unregister+0xd2>
			clear_ccc_cfg(cfg);
    e314:	1e60      	subs	r0, r4, #1
    e316:	f01c fba7 	bl	2aa68 <clear_ccc_cfg>
    e31a:	340a      	adds	r4, #10
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    e31c:	45a2      	cmp	sl, r4
    e31e:	d1d7      	bne.n	e2d0 <bt_gatt_service_unregister+0xb4>
    e320:	e7cf      	b.n	e2c2 <bt_gatt_service_unregister+0xa6>
    e322:	bf00      	nop
    e324:	00032515 	.word	0x00032515
    e328:	0003067f 	.word	0x0003067f
    e32c:	20003b08 	.word	0x20003b08
    e330:	20003b10 	.word	0x20003b10
    e334:	0000d3b1 	.word	0x0000d3b1

0000e338 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    e338:	b5f0      	push	{r4, r5, r6, r7, lr}
    e33a:	4604      	mov	r4, r0
    e33c:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    e33e:	4603      	mov	r3, r0
    e340:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e344:	2001      	movs	r0, #1
    e346:	4a34      	ldr	r2, [pc, #208]	; (e418 <bt_gatt_disconnected+0xe0>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e348:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    e34c:	f01c fcf0 	bl	2ad30 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e350:	4629      	mov	r1, r5
    e352:	7a20      	ldrb	r0, [r4, #8]
    e354:	f01b fd99 	bl	29e8a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    e358:	b378      	cbz	r0, e3ba <bt_gatt_disconnected+0x82>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    e35a:	4629      	mov	r1, r5
    e35c:	7a20      	ldrb	r0, [r4, #8]
    e35e:	f7ff ff23 	bl	e1a8 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    e362:	4620      	mov	r0, r4
    e364:	f7fe ff26 	bl	d1b4 <find_cf_cfg>
	if (!cfg) {
    e368:	4606      	mov	r6, r0
    e36a:	2800      	cmp	r0, #0
    e36c:	d044      	beq.n	e3f8 <bt_gatt_disconnected+0xc0>
		if (conn->id) {
    e36e:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    e370:	3608      	adds	r6, #8
		if (conn->id) {
    e372:	2a00      	cmp	r2, #0
    e374:	d042      	beq.n	e3fc <bt_gatt_disconnected+0xc4>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    e376:	af02      	add	r7, sp, #8
    e378:	2104      	movs	r1, #4
    e37a:	4638      	mov	r0, r7
    e37c:	f019 fa0e 	bl	2779c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    e380:	9700      	str	r7, [sp, #0]
    e382:	462b      	mov	r3, r5
    e384:	4a25      	ldr	r2, [pc, #148]	; (e41c <bt_gatt_disconnected+0xe4>)
    e386:	2124      	movs	r1, #36	; 0x24
    e388:	a803      	add	r0, sp, #12
    e38a:	f7fa fb71 	bl	8a70 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    e38e:	7a23      	ldrb	r3, [r4, #8]
    e390:	2701      	movs	r7, #1
    e392:	b93b      	cbnz	r3, e3a4 <bt_gatt_disconnected+0x6c>
		bt_settings_encode_key(key, sizeof(key), "cf",
    e394:	2300      	movs	r3, #0
    e396:	9300      	str	r3, [sp, #0]
    e398:	4a20      	ldr	r2, [pc, #128]	; (e41c <bt_gatt_disconnected+0xe4>)
    e39a:	462b      	mov	r3, r5
    e39c:	2124      	movs	r1, #36	; 0x24
    e39e:	a803      	add	r0, sp, #12
    e3a0:	f7fa fb66 	bl	8a70 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    e3a4:	463a      	mov	r2, r7
    e3a6:	4631      	mov	r1, r6
    e3a8:	a803      	add	r0, sp, #12
    e3aa:	f7f7 fdd7 	bl	5f5c <settings_save_one>
	if (err) {
    e3ae:	4602      	mov	r2, r0
    e3b0:	b118      	cbz	r0, e3ba <bt_gatt_disconnected+0x82>
		BT_ERR("Failed to store Client Features (err %d)", err);
    e3b2:	2145      	movs	r1, #69	; 0x45
    e3b4:	481a      	ldr	r0, [pc, #104]	; (e420 <bt_gatt_disconnected+0xe8>)
    e3b6:	f019 fa8c 	bl	278d2 <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e3ba:	4629      	mov	r1, r5
    e3bc:	7a20      	ldrb	r0, [r4, #8]
    e3be:	f01b fd64 	bl	29e8a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    e3c2:	b150      	cbz	r0, e3da <bt_gatt_disconnected+0xa2>
		struct addr_with_id addr_with_id = {
    e3c4:	7a23      	ldrb	r3, [r4, #8]
    e3c6:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    e3ca:	4a16      	ldr	r2, [pc, #88]	; (e424 <bt_gatt_disconnected+0xec>)
		struct addr_with_id addr_with_id = {
    e3cc:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    e3ce:	ab03      	add	r3, sp, #12
    e3d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e3d4:	2001      	movs	r0, #1
    e3d6:	f01c fcab 	bl	2ad30 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    e3da:	4620      	mov	r0, r4
    e3dc:	f7fe feea 	bl	d1b4 <find_cf_cfg>
	if (!cfg) {
    e3e0:	4606      	mov	r6, r0
    e3e2:	b138      	cbz	r0, e3f4 <bt_gatt_disconnected+0xbc>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e3e4:	4629      	mov	r1, r5
    e3e6:	7a20      	ldrb	r0, [r4, #8]
    e3e8:	f01b fd4f 	bl	29e8a <bt_addr_le_is_bonded>
    e3ec:	b940      	cbnz	r0, e400 <bt_gatt_disconnected+0xc8>
		clear_cf_cfg(cfg);
    e3ee:	4630      	mov	r0, r6
    e3f0:	f01c fb9f 	bl	2ab32 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    e3f4:	b00d      	add	sp, #52	; 0x34
    e3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
    e3f8:	4607      	mov	r7, r0
    e3fa:	e7cb      	b.n	e394 <bt_gatt_disconnected+0x5c>
		if (conn->id) {
    e3fc:	2701      	movs	r7, #1
    e3fe:	e7c9      	b.n	e394 <bt_gatt_disconnected+0x5c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    e400:	4629      	mov	r1, r5
    e402:	1c70      	adds	r0, r6, #1
    e404:	f01c fb29 	bl	2aa5a <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e408:	f06f 0102 	mvn.w	r1, #2
    e40c:	f106 000c 	add.w	r0, r6, #12
    e410:	f01c fb14 	bl	2aa3c <atomic_and>
}
    e414:	e7ee      	b.n	e3f4 <bt_gatt_disconnected+0xbc>
    e416:	bf00      	nop
    e418:	0000d055 	.word	0x0000d055
    e41c:	000327b7 	.word	0x000327b7
    e420:	000324e7 	.word	0x000324e7
    e424:	0000ce99 	.word	0x0000ce99

0000e428 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    e428:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    e42a:	4c0e      	ldr	r4, [pc, #56]	; (e464 <bt_smp_accept+0x3c>)
    e42c:	6823      	ldr	r3, [r4, #0]
{
    e42e:	4602      	mov	r2, r0
		if (smp->chan.conn) {
    e430:	4625      	mov	r5, r4
    e432:	b16b      	cbz	r3, e450 <bt_smp_accept+0x28>
    e434:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    e438:	b14b      	cbz	r3, e44e <bt_smp_accept+0x26>
    e43a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    e43e:	b17b      	cbz	r3, e460 <bt_smp_accept+0x38>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
    e440:	4809      	ldr	r0, [pc, #36]	; (e468 <bt_smp_accept+0x40>)
    e442:	2145      	movs	r1, #69	; 0x45
    e444:	f019 fa45 	bl	278d2 <printk>
    e448:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
    e44c:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    e44e:	2301      	movs	r3, #1
		smp->chan.ops = &ops;
    e450:	22c0      	movs	r2, #192	; 0xc0
    e452:	fb02 5303 	mla	r3, r2, r3, r5
    e456:	4a05      	ldr	r2, [pc, #20]	; (e46c <bt_smp_accept+0x44>)
    e458:	605a      	str	r2, [r3, #4]
		return 0;
    e45a:	2000      	movs	r0, #0
		*chan = &smp->chan;
    e45c:	600b      	str	r3, [r1, #0]
		return 0;
    e45e:	e7f5      	b.n	e44c <bt_smp_accept+0x24>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    e460:	2302      	movs	r3, #2
    e462:	e7f5      	b.n	e450 <bt_smp_accept+0x28>
    e464:	200026f8 	.word	0x200026f8
    e468:	00032803 	.word	0x00032803
    e46c:	0002fa8c 	.word	0x0002fa8c

0000e470 <atomic_test_bit.constprop.4>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e470:	4b04      	ldr	r3, [pc, #16]	; (e484 <atomic_test_bit.constprop.4+0x14>)
    e472:	f3bf 8f5b 	dmb	ish
    e476:	6818      	ldr	r0, [r3, #0]
    e478:	f3bf 8f5b 	dmb	ish
}
    e47c:	f000 0001 	and.w	r0, r0, #1
    e480:	4770      	bx	lr
    e482:	bf00      	nop
    e484:	20002970 	.word	0x20002970

0000e488 <bt_mesh_reset>:

	return -ENOTSUP;
}

void bt_mesh_reset(void)
{
    e488:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    e48a:	f7ff fff1 	bl	e470 <atomic_test_bit.constprop.4>
    e48e:	b350      	cbz	r0, e4e6 <bt_mesh_reset+0x5e>
		return;
	}

	bt_mesh.iv_index = 0U;
    e490:	4c15      	ldr	r4, [pc, #84]	; (e4e8 <bt_mesh_reset+0x60>)
    e492:	2500      	movs	r5, #0
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));

	k_delayed_work_cancel(&bt_mesh.ivu_timer);
    e494:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
	bt_mesh.seq = 0U;
    e498:	e9c4 5500 	strd	r5, r5, [r4]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    e49c:	60a5      	str	r5, [r4, #8]
	k_delayed_work_cancel(&bt_mesh.ivu_timer);
    e49e:	f017 f86b 	bl	25578 <k_delayed_work_cancel>

	bt_mesh_cfg_reset();
    e4a2:	f006 fc31 	bl	14d08 <bt_mesh_cfg_reset>
	bt_mesh_trans_reset();
    e4a6:	f002 ff0f 	bl	112c8 <bt_mesh_trans_reset>
	bt_mesh_app_keys_reset();
    e4aa:	f002 f9d7 	bl	1085c <bt_mesh_app_keys_reset>
	bt_mesh_net_keys_reset();
    e4ae:	f001 fe65 	bl	1017c <bt_mesh_net_keys_reset>

	bt_mesh_net_loopback_clear(BT_MESH_KEY_ANY);
    e4b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e4b6:	f001 f969 	bl	f78c <bt_mesh_net_loopback_clear>

		bt_mesh_lpn_disable(true);
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friends_clear();
    e4ba:	f007 fc7f 	bl	15dbc <bt_mesh_friends_clear>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_proxy_gatt_disable();
    e4be:	f00a fa01 	bl	188c4 <bt_mesh_proxy_gatt_disable>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_net_clear();
    e4c2:	f01c fd92 	bl	2afea <bt_mesh_net_clear>
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    e4c6:	4629      	mov	r1, r5
    e4c8:	2210      	movs	r2, #16
    e4ca:	f504 700a 	add.w	r0, r4, #552	; 0x228
    e4ce:	f01f ff27 	bl	2e320 <memset>

	bt_mesh_scan_disable();
    e4d2:	f000 fab9 	bl	ea48 <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
    e4d6:	f000 fd65 	bl	efa4 <bt_mesh_beacon_disable>

	bt_mesh_comp_unprovision();
    e4da:	f004 fc41 	bl	12d60 <bt_mesh_comp_unprovision>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
    e4de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_prov_reset();
    e4e2:	f008 bb7d 	b.w	16be0 <bt_mesh_prov_reset>
}
    e4e6:	bd38      	pop	{r3, r4, r5, pc}
    e4e8:	20002968 	.word	0x20002968

0000e4ec <bt_mesh_start>:
		mod->cb->start(mod);
	}
}

int bt_mesh_start(void)
{
    e4ec:	b538      	push	{r3, r4, r5, lr}
	int err;

	err = bt_mesh_adv_enable();
    e4ee:	f006 ff27 	bl	15340 <bt_mesh_adv_enable>
	if (err) {
    e4f2:	4604      	mov	r4, r0
    e4f4:	b128      	cbz	r0, e502 <bt_mesh_start+0x16>
		BT_ERR("Failed enabling advertiser");
    e4f6:	2145      	movs	r1, #69	; 0x45
    e4f8:	4814      	ldr	r0, [pc, #80]	; (e54c <bt_mesh_start+0x60>)
    e4fa:	f019 f9ea 	bl	278d2 <printk>
	bt_mesh_hb_start();

	bt_mesh_model_foreach(model_start, NULL);

	return 0;
}
    e4fe:	4620      	mov	r0, r4
    e500:	bd38      	pop	{r3, r4, r5, pc}
	if (bt_mesh_beacon_enabled()) {
    e502:	f01c fccd 	bl	2aea0 <bt_mesh_beacon_enabled>
    e506:	b1f0      	cbz	r0, e546 <bt_mesh_start+0x5a>
		bt_mesh_beacon_enable();
    e508:	f000 fd3c 	bl	ef84 <bt_mesh_beacon_enable>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
    e50c:	f01c fcde 	bl	2aecc <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    e510:	2802      	cmp	r0, #2
    e512:	d003      	beq.n	e51c <bt_mesh_start+0x30>
		bt_mesh_proxy_gatt_enable();
    e514:	f00a f996 	bl	18844 <bt_mesh_proxy_gatt_enable>
		bt_mesh_adv_update();
    e518:	f006 fee4 	bl	152e4 <bt_mesh_adv_update>
		bt_mesh_scan_enable();
    e51c:	f000 fa72 	bl	ea04 <bt_mesh_scan_enable>
		bt_mesh_friend_init();
    e520:	f007 ffbc 	bl	1649c <bt_mesh_friend_init>
		struct bt_mesh_subnet *sub = bt_mesh_subnet_next(NULL);
    e524:	2000      	movs	r0, #0
    e526:	f001 fe11 	bl	1014c <bt_mesh_subnet_next>
    e52a:	4605      	mov	r5, r0
		uint16_t addr = bt_mesh_primary_addr();
    e52c:	f004 fc1e 	bl	12d6c <bt_mesh_primary_addr>
		bt_mesh_prov_complete(sub->net_idx, addr);
    e530:	4601      	mov	r1, r0
    e532:	8ba8      	ldrh	r0, [r5, #28]
    e534:	f008 fb4c 	bl	16bd0 <bt_mesh_prov_complete>
	bt_mesh_hb_start();
    e538:	f003 ff4c 	bl	123d4 <bt_mesh_hb_start>
	bt_mesh_model_foreach(model_start, NULL);
    e53c:	2100      	movs	r1, #0
    e53e:	4804      	ldr	r0, [pc, #16]	; (e550 <bt_mesh_start+0x64>)
    e540:	f004 fa10 	bl	12964 <bt_mesh_model_foreach>
	return 0;
    e544:	e7db      	b.n	e4fe <bt_mesh_start+0x12>
		bt_mesh_beacon_disable();
    e546:	f000 fd2d 	bl	efa4 <bt_mesh_beacon_disable>
    e54a:	e7df      	b.n	e50c <bt_mesh_start+0x20>
    e54c:	00032851 	.word	0x00032851
    e550:	0002ae37 	.word	0x0002ae37

0000e554 <bt_mesh_provision>:
{
    e554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e558:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e55c:	4c28      	ldr	r4, [pc, #160]	; (e600 <bt_mesh_provision+0xac>)
    e55e:	4680      	mov	r8, r0
    e560:	460d      	mov	r5, r1
    e562:	4617      	mov	r7, r2
	BT_INFO("Primary Element: 0x%04x", addr);
    e564:	2149      	movs	r1, #73	; 0x49
    e566:	4632      	mov	r2, r6
    e568:	4826      	ldr	r0, [pc, #152]	; (e604 <bt_mesh_provision+0xb0>)
{
    e56a:	4699      	mov	r9, r3
	BT_INFO("Primary Element: 0x%04x", addr);
    e56c:	f019 f9b1 	bl	278d2 <printk>
    e570:	f3bf 8f5b 	dmb	ish
    e574:	e854 0f00 	ldrex	r0, [r4]
    e578:	f040 0301 	orr.w	r3, r0, #1
    e57c:	e844 3200 	strex	r2, r3, [r4]
    e580:	2a00      	cmp	r2, #0
    e582:	d1f7      	bne.n	e574 <bt_mesh_provision+0x20>
    e584:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
    e588:	f010 0001 	ands.w	r0, r0, #1
    e58c:	d135      	bne.n	e5fa <bt_mesh_provision+0xa6>
		if (bt_mesh_proxy_prov_disable(false) == 0) {
    e58e:	f00a f929 	bl	187e4 <bt_mesh_proxy_prov_disable>
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    e592:	464b      	mov	r3, r9
		if (bt_mesh_proxy_prov_disable(false) == 0) {
    e594:	4682      	mov	sl, r0
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    e596:	4642      	mov	r2, r8
    e598:	4628      	mov	r0, r5
    e59a:	4639      	mov	r1, r7
    e59c:	f000 feaa 	bl	f2f4 <bt_mesh_net_create>
	if (err) {
    e5a0:	4605      	mov	r5, r0
    e5a2:	b198      	cbz	r0, e5cc <bt_mesh_provision+0x78>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e5a4:	f3bf 8f5b 	dmb	ish
    e5a8:	e854 3f00 	ldrex	r3, [r4]
    e5ac:	f023 0301 	bic.w	r3, r3, #1
    e5b0:	e844 3200 	strex	r2, r3, [r4]
    e5b4:	2a00      	cmp	r2, #0
    e5b6:	d1f7      	bne.n	e5a8 <bt_mesh_provision+0x54>
    e5b8:	f3bf 8f5b 	dmb	ish
		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) && pb_gatt_enabled) {
    e5bc:	f1ba 0f00 	cmp.w	sl, #0
    e5c0:	d101      	bne.n	e5c6 <bt_mesh_provision+0x72>
			bt_mesh_proxy_prov_enable();
    e5c2:	f00a f8e1 	bl	18788 <bt_mesh_proxy_prov_enable>
}
    e5c6:	4628      	mov	r0, r5
    e5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_mesh.seq = 0U;
    e5cc:	f844 0c04 	str.w	r0, [r4, #-4]
	bt_mesh_comp_provision(addr);
    e5d0:	4630      	mov	r0, r6
    e5d2:	f004 fbaf 	bl	12d34 <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
    e5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e5d8:	f504 7408 	add.w	r4, r4, #544	; 0x220
    e5dc:	f103 0610 	add.w	r6, r3, #16
    e5e0:	6818      	ldr	r0, [r3, #0]
    e5e2:	6859      	ldr	r1, [r3, #4]
    e5e4:	4622      	mov	r2, r4
    e5e6:	c203      	stmia	r2!, {r0, r1}
    e5e8:	3308      	adds	r3, #8
    e5ea:	42b3      	cmp	r3, r6
    e5ec:	4614      	mov	r4, r2
    e5ee:	d1f7      	bne.n	e5e0 <bt_mesh_provision+0x8c>
		bt_mesh_net_pending_net_store();
    e5f0:	f001 fb2a 	bl	fc48 <bt_mesh_net_pending_net_store>
	bt_mesh_start();
    e5f4:	f7ff ff7a 	bl	e4ec <bt_mesh_start>
	return 0;
    e5f8:	e7e5      	b.n	e5c6 <bt_mesh_provision+0x72>
		return -EALREADY;
    e5fa:	f06f 0577 	mvn.w	r5, #119	; 0x77
    e5fe:	e7e2      	b.n	e5c6 <bt_mesh_provision+0x72>
    e600:	20002970 	.word	0x20002970
    e604:	00032834 	.word	0x00032834

0000e608 <atomic_test_bit.constprop.7>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e608:	4b05      	ldr	r3, [pc, #20]	; (e620 <atomic_test_bit.constprop.7+0x18>)
    e60a:	f3bf 8f5b 	dmb	ish
    e60e:	681b      	ldr	r3, [r3, #0]
    e610:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e614:	fa43 f000 	asr.w	r0, r3, r0
}
    e618:	f000 0001 	and.w	r0, r0, #1
    e61c:	4770      	bx	lr
    e61e:	bf00      	nop
    e620:	20002970 	.word	0x20002970

0000e624 <feature_set>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
}

static int feature_set(int feature_flag, enum bt_mesh_feat_state state)
{
	if (state != BT_MESH_FEATURE_DISABLED &&
    e624:	2901      	cmp	r1, #1
{
    e626:	b508      	push	{r3, lr}
    e628:	4602      	mov	r2, r0
	if (state != BT_MESH_FEATURE_DISABLED &&
    e62a:	d81e      	bhi.n	e66a <feature_set+0x46>
	    state != BT_MESH_FEATURE_ENABLED) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
    e62c:	f7ff ffec 	bl	e608 <atomic_test_bit.constprop.7>
    e630:	f001 0301 	and.w	r3, r1, #1
    e634:	4298      	cmp	r0, r3
    e636:	d01b      	beq.n	e670 <feature_set+0x4c>
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    e638:	2001      	movs	r0, #1

	if (val) {
    e63a:	2901      	cmp	r1, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    e63c:	fa00 f002 	lsl.w	r0, r0, r2
	if (val) {
    e640:	d105      	bne.n	e64e <feature_set+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e642:	4601      	mov	r1, r0
    e644:	480c      	ldr	r0, [pc, #48]	; (e678 <feature_set+0x54>)
    e646:	f01c fc1c 	bl	2ae82 <atomic_or>
	}

	atomic_set_bit_to(bt_mesh.flags, feature_flag,
			  (state == BT_MESH_FEATURE_ENABLED));

	return 0;
    e64a:	2000      	movs	r0, #0
}
    e64c:	bd08      	pop	{r3, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e64e:	4b0a      	ldr	r3, [pc, #40]	; (e678 <feature_set+0x54>)
    e650:	f3bf 8f5b 	dmb	ish
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e654:	43c0      	mvns	r0, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e656:	e853 2f00 	ldrex	r2, [r3]
    e65a:	4002      	ands	r2, r0
    e65c:	e843 2100 	strex	r1, r2, [r3]
    e660:	2900      	cmp	r1, #0
    e662:	d1f8      	bne.n	e656 <feature_set+0x32>
    e664:	f3bf 8f5b 	dmb	ish
    e668:	e7ef      	b.n	e64a <feature_set+0x26>
		return -EINVAL;
    e66a:	f06f 0015 	mvn.w	r0, #21
    e66e:	e7ed      	b.n	e64c <feature_set+0x28>
		return -EALREADY;
    e670:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e674:	e7ea      	b.n	e64c <feature_set+0x28>
    e676:	bf00      	nop
    e678:	20002970 	.word	0x20002970

0000e67c <bt_mesh_beacon_set>:
{
    e67c:	4602      	mov	r2, r0
    e67e:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON) == beacon) {
    e680:	2007      	movs	r0, #7
    e682:	f7ff ffc1 	bl	e608 <atomic_test_bit.constprop.7>
    e686:	4290      	cmp	r0, r2
    e688:	d01f      	beq.n	e6ca <bt_mesh_beacon_set+0x4e>
	if (val) {
    e68a:	b172      	cbz	r2, e6aa <bt_mesh_beacon_set+0x2e>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e68c:	2180      	movs	r1, #128	; 0x80
    e68e:	480f      	ldr	r0, [pc, #60]	; (e6cc <bt_mesh_beacon_set+0x50>)
    e690:	f01c fbf7 	bl	2ae82 <atomic_or>
		bt_mesh_beacon_enable();
    e694:	f000 fc76 	bl	ef84 <bt_mesh_beacon_enable>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    e698:	2000      	movs	r0, #0
    e69a:	f7ff ffb5 	bl	e608 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    e69e:	b1a0      	cbz	r0, e6ca <bt_mesh_beacon_set+0x4e>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    e6a0:	2007      	movs	r0, #7
}
    e6a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    e6a6:	f006 bebf 	b.w	15428 <bt_mesh_settings_store_schedule>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e6aa:	4b08      	ldr	r3, [pc, #32]	; (e6cc <bt_mesh_beacon_set+0x50>)
    e6ac:	f3bf 8f5b 	dmb	ish
    e6b0:	e853 2f00 	ldrex	r2, [r3]
    e6b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e6b8:	e843 2100 	strex	r1, r2, [r3]
    e6bc:	2900      	cmp	r1, #0
    e6be:	d1f7      	bne.n	e6b0 <bt_mesh_beacon_set+0x34>
    e6c0:	f3bf 8f5b 	dmb	ish
		bt_mesh_beacon_disable();
    e6c4:	f000 fc6e 	bl	efa4 <bt_mesh_beacon_disable>
    e6c8:	e7e6      	b.n	e698 <bt_mesh_beacon_set+0x1c>
}
    e6ca:	bd08      	pop	{r3, pc}
    e6cc:	20002970 	.word	0x20002970

0000e6d0 <bt_mesh_default_ttl_set>:
	return feature_get(BT_MESH_GATT_PROXY);
}

int bt_mesh_default_ttl_set(uint8_t default_ttl)
{
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    e6d0:	2801      	cmp	r0, #1
{
    e6d2:	b508      	push	{r3, lr}
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    e6d4:	d013      	beq.n	e6fe <bt_mesh_default_ttl_set+0x2e>
    e6d6:	0603      	lsls	r3, r0, #24
    e6d8:	d411      	bmi.n	e6fe <bt_mesh_default_ttl_set+0x2e>
		return -EINVAL;
	}

	if (default_ttl == bt_mesh.default_ttl) {
    e6da:	4b0a      	ldr	r3, [pc, #40]	; (e704 <bt_mesh_default_ttl_set+0x34>)
    e6dc:	f893 21f3 	ldrb.w	r2, [r3, #499]	; 0x1f3
    e6e0:	4282      	cmp	r2, r0
    e6e2:	d101      	bne.n	e6e8 <bt_mesh_default_ttl_set+0x18>

	bt_mesh.default_ttl = default_ttl;

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    e6e4:	2000      	movs	r0, #0
	}

	return 0;
}
    e6e6:	bd08      	pop	{r3, pc}
	bt_mesh.default_ttl = default_ttl;
    e6e8:	f883 01f3 	strb.w	r0, [r3, #499]	; 0x1f3
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    e6ec:	2000      	movs	r0, #0
    e6ee:	f7ff ff8b 	bl	e608 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    e6f2:	2800      	cmp	r0, #0
    e6f4:	d0f6      	beq.n	e6e4 <bt_mesh_default_ttl_set+0x14>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    e6f6:	2007      	movs	r0, #7
    e6f8:	f006 fe96 	bl	15428 <bt_mesh_settings_store_schedule>
    e6fc:	e7f2      	b.n	e6e4 <bt_mesh_default_ttl_set+0x14>
		return -EINVAL;
    e6fe:	f06f 0015 	mvn.w	r0, #21
    e702:	e7f0      	b.n	e6e6 <bt_mesh_default_ttl_set+0x16>
    e704:	20002968 	.word	0x20002968

0000e708 <bt_mesh_default_ttl_get>:

uint8_t bt_mesh_default_ttl_get(void)
{
	return bt_mesh.default_ttl;
}
    e708:	4b01      	ldr	r3, [pc, #4]	; (e710 <bt_mesh_default_ttl_get+0x8>)
    e70a:	f893 01f3 	ldrb.w	r0, [r3, #499]	; 0x1f3
    e70e:	4770      	bx	lr
    e710:	20002968 	.word	0x20002968

0000e714 <bt_mesh_net_transmit_set>:

	return feature_get(BT_MESH_FRIEND);
}

void bt_mesh_net_transmit_set(uint8_t xmit)
{
    e714:	b508      	push	{r3, lr}
	if (bt_mesh.net_xmit == xmit) {
    e716:	4b08      	ldr	r3, [pc, #32]	; (e738 <bt_mesh_net_transmit_set+0x24>)
    e718:	f893 21f1 	ldrb.w	r2, [r3, #497]	; 0x1f1
    e71c:	4282      	cmp	r2, r0
    e71e:	d00a      	beq.n	e736 <bt_mesh_net_transmit_set+0x22>
		return;
	}

	bt_mesh.net_xmit = xmit;
    e720:	f883 01f1 	strb.w	r0, [r3, #497]	; 0x1f1

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    e724:	2000      	movs	r0, #0
    e726:	f7ff ff6f 	bl	e608 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    e72a:	b120      	cbz	r0, e736 <bt_mesh_net_transmit_set+0x22>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    e72c:	2007      	movs	r0, #7
	}
}
    e72e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    e732:	f006 be79 	b.w	15428 <bt_mesh_settings_store_schedule>
}
    e736:	bd08      	pop	{r3, pc}
    e738:	20002968 	.word	0x20002968

0000e73c <bt_mesh_net_transmit_get>:

uint8_t bt_mesh_net_transmit_get(void)
{
	return bt_mesh.net_xmit;
}
    e73c:	4b01      	ldr	r3, [pc, #4]	; (e744 <bt_mesh_net_transmit_get+0x8>)
    e73e:	f893 01f1 	ldrb.w	r0, [r3, #497]	; 0x1f1
    e742:	4770      	bx	lr
    e744:	20002968 	.word	0x20002968

0000e748 <bt_mesh_relay_set>:

int bt_mesh_relay_set(enum bt_mesh_feat_state relay, uint8_t xmit)
{
    e748:	b510      	push	{r4, lr}
    e74a:	460c      	mov	r4, r1

	if (!IS_ENABLED(CONFIG_BT_MESH_RELAY)) {
		return -ENOTSUP;
	}

	err = feature_set(BT_MESH_RELAY, relay);
    e74c:	4601      	mov	r1, r0
    e74e:	2006      	movs	r0, #6
    e750:	f7ff ff68 	bl	e624 <feature_set>
	if (err == -EINVAL) {
    e754:	f110 0f16 	cmn.w	r0, #22
    e758:	d014      	beq.n	e784 <bt_mesh_relay_set+0x3c>
		return err;
	}

	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
    e75a:	f110 0f78 	cmn.w	r0, #120	; 0x78
    e75e:	4b0a      	ldr	r3, [pc, #40]	; (e788 <bt_mesh_relay_set+0x40>)
    e760:	d103      	bne.n	e76a <bt_mesh_relay_set+0x22>
    e762:	f893 21f2 	ldrb.w	r2, [r3, #498]	; 0x1f2
    e766:	42a2      	cmp	r2, r4
    e768:	d00c      	beq.n	e784 <bt_mesh_relay_set+0x3c>
		return -EALREADY;
	}

	bt_mesh.relay_xmit = xmit;
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    e76a:	2001      	movs	r0, #1
	bt_mesh.relay_xmit = xmit;
    e76c:	f883 41f2 	strb.w	r4, [r3, #498]	; 0x1f2
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    e770:	f003 fe02 	bl	12378 <bt_mesh_hb_feature_changed>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    e774:	2000      	movs	r0, #0
    e776:	f7ff ff47 	bl	e608 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    e77a:	b118      	cbz	r0, e784 <bt_mesh_relay_set+0x3c>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    e77c:	2007      	movs	r0, #7
    e77e:	f006 fe53 	bl	15428 <bt_mesh_settings_store_schedule>
	}

	return 0;
    e782:	2000      	movs	r0, #0
}
    e784:	bd10      	pop	{r4, pc}
    e786:	bf00      	nop
    e788:	20002968 	.word	0x20002968

0000e78c <cfg_set>:
	}
}

static int cfg_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
    e78c:	b513      	push	{r0, r1, r4, lr}
    e78e:	4610      	mov	r0, r2
    e790:	461c      	mov	r4, r3
	struct cfg_val cfg;
	int err;

	if (len_rd == 0) {
    e792:	b359      	cbz	r1, e7ec <cfg_set+0x60>
		BT_DBG("Cleared configuration state");
		return 0;
	}

	err = bt_mesh_settings_set(read_cb, cb_arg, &cfg, sizeof(cfg));
    e794:	4621      	mov	r1, r4
    e796:	2307      	movs	r3, #7
    e798:	466a      	mov	r2, sp
    e79a:	f006 fe23 	bl	153e4 <bt_mesh_settings_set>
	if (err) {
    e79e:	4604      	mov	r4, r0
    e7a0:	b130      	cbz	r0, e7b0 <cfg_set+0x24>
		BT_ERR("Failed to set \'cfg\'");
    e7a2:	2145      	movs	r1, #69	; 0x45
    e7a4:	4812      	ldr	r0, [pc, #72]	; (e7f0 <cfg_set+0x64>)
    e7a6:	f019 f894 	bl	278d2 <printk>
	bt_mesh_default_ttl_set(cfg.default_ttl);

	BT_DBG("Restored configuration state");

	return 0;
}
    e7aa:	4620      	mov	r0, r4
    e7ac:	b002      	add	sp, #8
    e7ae:	bd10      	pop	{r4, pc}
	bt_mesh_net_transmit_set(cfg.net_transmit);
    e7b0:	f89d 0000 	ldrb.w	r0, [sp]
    e7b4:	f7ff ffae 	bl	e714 <bt_mesh_net_transmit_set>
	bt_mesh_relay_set(cfg.relay, cfg.relay_retransmit);
    e7b8:	f89d 1002 	ldrb.w	r1, [sp, #2]
    e7bc:	f89d 0001 	ldrb.w	r0, [sp, #1]
    e7c0:	f7ff ffc2 	bl	e748 <bt_mesh_relay_set>
	bt_mesh_beacon_set(cfg.beacon);
    e7c4:	f89d 0003 	ldrb.w	r0, [sp, #3]
    e7c8:	3000      	adds	r0, #0
    e7ca:	bf18      	it	ne
    e7cc:	2001      	movne	r0, #1
    e7ce:	f7ff ff55 	bl	e67c <bt_mesh_beacon_set>
	bt_mesh_gatt_proxy_set(cfg.gatt_proxy);
    e7d2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e7d6:	f01c fb66 	bl	2aea6 <bt_mesh_gatt_proxy_set>
	bt_mesh_friend_set(cfg.frnd);
    e7da:	f89d 0005 	ldrb.w	r0, [sp, #5]
    e7de:	f01c fb78 	bl	2aed2 <bt_mesh_friend_set>
	bt_mesh_default_ttl_set(cfg.default_ttl);
    e7e2:	f89d 0006 	ldrb.w	r0, [sp, #6]
    e7e6:	f7ff ff73 	bl	e6d0 <bt_mesh_default_ttl_set>
	return 0;
    e7ea:	e7de      	b.n	e7aa <cfg_set+0x1e>
		return 0;
    e7ec:	460c      	mov	r4, r1
    e7ee:	e7dc      	b.n	e7aa <cfg_set+0x1e>
    e7f0:	000328d6 	.word	0x000328d6

0000e7f4 <bt_mesh_relay_retransmit_get>:
}
    e7f4:	4b01      	ldr	r3, [pc, #4]	; (e7fc <bt_mesh_relay_retransmit_get+0x8>)
    e7f6:	f893 01f2 	ldrb.w	r0, [r3, #498]	; 0x1f2
    e7fa:	4770      	bx	lr
    e7fc:	20002968 	.word	0x20002968

0000e800 <bt_mesh_cfg_init>:
{
    e800:	b510      	push	{r4, lr}
	bt_mesh.net_xmit =
    e802:	4c0e      	ldr	r4, [pc, #56]	; (e83c <bt_mesh_cfg_init+0x3c>)
    e804:	230a      	movs	r3, #10
    e806:	f884 31f1 	strb.w	r3, [r4, #497]	; 0x1f1
	bt_mesh.relay_xmit =
    e80a:	f240 730a 	movw	r3, #1802	; 0x70a
    e80e:	f8a4 31f2 	strh.w	r3, [r4, #498]	; 0x1f2
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e812:	3408      	adds	r4, #8
    e814:	2140      	movs	r1, #64	; 0x40
    e816:	4620      	mov	r0, r4
    e818:	f01c fb33 	bl	2ae82 <atomic_or>
    e81c:	2180      	movs	r1, #128	; 0x80
    e81e:	4620      	mov	r0, r4
    e820:	f01c fb2f 	bl	2ae82 <atomic_or>
    e824:	f44f 7180 	mov.w	r1, #256	; 0x100
    e828:	4620      	mov	r0, r4
    e82a:	f01c fb2a 	bl	2ae82 <atomic_or>
    e82e:	4620      	mov	r0, r4
    e830:	f44f 7100 	mov.w	r1, #512	; 0x200
}
    e834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e838:	f01c bb23 	b.w	2ae82 <atomic_or>
    e83c:	20002968 	.word	0x20002968

0000e840 <bt_mesh_cfg_pending_store>:
		BT_HEXDUMP_DBG(&val, sizeof(val), "raw value");
	}
}

void bt_mesh_cfg_pending_store(void)
{
    e840:	b507      	push	{r0, r1, r2, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    e842:	2000      	movs	r0, #0
    e844:	f7ff fee0 	bl	e608 <atomic_test_bit.constprop.7>
    e848:	b348      	cbz	r0, e89e <bt_mesh_cfg_pending_store+0x5e>
	return bt_mesh.net_xmit;
    e84a:	4a19      	ldr	r2, [pc, #100]	; (e8b0 <bt_mesh_cfg_pending_store+0x70>)
	val.net_transmit = bt_mesh_net_transmit_get();
    e84c:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
    e850:	f88d 3000 	strb.w	r3, [sp]
	val.relay = bt_mesh_relay_get();
    e854:	f01c fb57 	bl	2af06 <bt_mesh_relay_get>
	val.relay_retransmit = bt_mesh_relay_retransmit_get();
    e858:	f892 31f2 	ldrb.w	r3, [r2, #498]	; 0x1f2
    e85c:	f88d 3002 	strb.w	r3, [sp, #2]
	val.relay = bt_mesh_relay_get();
    e860:	f88d 0001 	strb.w	r0, [sp, #1]
	val.beacon = bt_mesh_beacon_enabled();
    e864:	f01c fb1c 	bl	2aea0 <bt_mesh_beacon_enabled>
    e868:	f88d 0003 	strb.w	r0, [sp, #3]
	val.gatt_proxy = bt_mesh_gatt_proxy_get();
    e86c:	f01c fb2e 	bl	2aecc <bt_mesh_gatt_proxy_get>
    e870:	f88d 0004 	strb.w	r0, [sp, #4]
	val.frnd = bt_mesh_friend_get();
    e874:	f01c fb44 	bl	2af00 <bt_mesh_friend_get>
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    e878:	4669      	mov	r1, sp
	val.default_ttl = bt_mesh_default_ttl_get();
    e87a:	f892 31f3 	ldrb.w	r3, [r2, #499]	; 0x1f3
	val.frnd = bt_mesh_friend_get();
    e87e:	f88d 0005 	strb.w	r0, [sp, #5]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    e882:	2207      	movs	r2, #7
    e884:	480b      	ldr	r0, [pc, #44]	; (e8b4 <bt_mesh_cfg_pending_store+0x74>)
	val.default_ttl = bt_mesh_default_ttl_get();
    e886:	f88d 3006 	strb.w	r3, [sp, #6]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    e88a:	f7f7 fb67 	bl	5f5c <settings_save_one>
	if (err) {
    e88e:	b118      	cbz	r0, e898 <bt_mesh_cfg_pending_store+0x58>
		BT_ERR("Failed to store configuration value");
    e890:	4809      	ldr	r0, [pc, #36]	; (e8b8 <bt_mesh_cfg_pending_store+0x78>)
    e892:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to clear configuration");
    e894:	f019 f81d 	bl	278d2 <printk>
		store_pending_cfg();
	} else {
		clear_cfg();
	}
}
    e898:	b003      	add	sp, #12
    e89a:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/Cfg");
    e89e:	4805      	ldr	r0, [pc, #20]	; (e8b4 <bt_mesh_cfg_pending_store+0x74>)
    e8a0:	f019 fc20 	bl	280e4 <settings_delete>
	if (err) {
    e8a4:	2800      	cmp	r0, #0
    e8a6:	d0f7      	beq.n	e898 <bt_mesh_cfg_pending_store+0x58>
		BT_ERR("Failed to clear configuration");
    e8a8:	2145      	movs	r1, #69	; 0x45
    e8aa:	4804      	ldr	r0, [pc, #16]	; (e8bc <bt_mesh_cfg_pending_store+0x7c>)
    e8ac:	e7f2      	b.n	e894 <bt_mesh_cfg_pending_store+0x54>
    e8ae:	bf00      	nop
    e8b0:	20002968 	.word	0x20002968
    e8b4:	0003287e 	.word	0x0003287e
    e8b8:	0003288a 	.word	0x0003288a
    e8bc:	000328b3 	.word	0x000328b3

0000e8c0 <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
    e8c0:	4b02      	ldr	r3, [pc, #8]	; (e8cc <adv_alloc+0xc>)
    e8c2:	220c      	movs	r2, #12
    e8c4:	fb02 3000 	mla	r0, r2, r0, r3
    e8c8:	4770      	bx	lr
    e8ca:	bf00      	nop
    e8cc:	20003b60 	.word	0x20003b60

0000e8d0 <bt_mesh_scan_cb>:
}

static void bt_mesh_scan_cb(const bt_addr_le_t *addr, int8_t rssi,
			    uint8_t adv_type, struct net_buf_simple *buf)
{
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    e8d0:	2a03      	cmp	r2, #3
{
    e8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8d6:	460f      	mov	r7, r1
    e8d8:	461c      	mov	r4, r3
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    e8da:	d025      	beq.n	e928 <bt_mesh_scan_cb+0x58>
		}

		net_buf_simple_restore(buf, &state);
		net_buf_simple_pull(buf, len);
	}
}
    e8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state->offset = net_buf_simple_headroom(buf);
    e8e0:	4620      	mov	r0, r4
    e8e2:	f01e fe5f 	bl	2d5a4 <net_buf_simple_headroom>
    e8e6:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
    e8e8:	4620      	mov	r0, r4
	state->len = buf->len;
    e8ea:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    e8ee:	f01e fe1f 	bl	2d530 <net_buf_simple_pull_u8>
		buf->len = len - 1;
    e8f2:	1e6b      	subs	r3, r5, #1
		switch (type) {
    e8f4:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
    e8f6:	80a3      	strh	r3, [r4, #4]
		switch (type) {
    e8f8:	d007      	beq.n	e90a <bt_mesh_scan_cb+0x3a>
    e8fa:	282b      	cmp	r0, #43	; 0x2b
    e8fc:	d027      	beq.n	e94e <bt_mesh_scan_cb+0x7e>
    e8fe:	2829      	cmp	r0, #41	; 0x29
    e900:	d108      	bne.n	e914 <bt_mesh_scan_cb+0x44>
			bt_mesh_pb_adv_recv(buf);
    e902:	4620      	mov	r0, r4
    e904:	f009 fac6 	bl	17e94 <bt_mesh_pb_adv_recv>
			break;
    e908:	e004      	b.n	e914 <bt_mesh_scan_cb+0x44>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
    e90a:	2200      	movs	r2, #0
    e90c:	4639      	mov	r1, r7
    e90e:	4620      	mov	r0, r4
    e910:	f001 f83c 	bl	f98c <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
    e914:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    e916:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
    e91a:	fa13 f686 	uxtah	r6, r3, r6
    e91e:	6026      	str	r6, [r4, #0]
		net_buf_simple_pull(buf, len);
    e920:	4629      	mov	r1, r5
    e922:	4620      	mov	r0, r4
    e924:	f011 fb02 	bl	1ff2c <net_buf_simple_pull>
	while (buf->len > 1) {
    e928:	88a3      	ldrh	r3, [r4, #4]
    e92a:	2b01      	cmp	r3, #1
    e92c:	d9d6      	bls.n	e8dc <bt_mesh_scan_cb+0xc>
		len = net_buf_simple_pull_u8(buf);
    e92e:	4620      	mov	r0, r4
    e930:	f01e fdfe 	bl	2d530 <net_buf_simple_pull_u8>
		if (len == 0U) {
    e934:	4605      	mov	r5, r0
    e936:	2800      	cmp	r0, #0
    e938:	d0d0      	beq.n	e8dc <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
    e93a:	88a2      	ldrh	r2, [r4, #4]
    e93c:	b283      	uxth	r3, r0
    e93e:	429a      	cmp	r2, r3
    e940:	d2ce      	bcs.n	e8e0 <bt_mesh_scan_cb+0x10>
			BT_WARN("AD malformed");
    e942:	2157      	movs	r1, #87	; 0x57
    e944:	4804      	ldr	r0, [pc, #16]	; (e958 <bt_mesh_scan_cb+0x88>)
}
    e946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("AD malformed");
    e94a:	f018 bfc2 	b.w	278d2 <printk>
			bt_mesh_beacon_recv(buf);
    e94e:	4620      	mov	r0, r4
    e950:	f000 fa56 	bl	ee00 <bt_mesh_beacon_recv>
			break;
    e954:	e7de      	b.n	e914 <bt_mesh_scan_cb+0x44>
    e956:	bf00      	nop
    e958:	00032930 	.word	0x00032930

0000e95c <bt_mesh_adv_create_from_pool>:
{
    e95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e960:	461e      	mov	r6, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e962:	4b13      	ldr	r3, [pc, #76]	; (e9b0 <bt_mesh_adv_create_from_pool+0x54>)
    e964:	f3bf 8f5b 	dmb	ish
    e968:	681c      	ldr	r4, [r3, #0]
    e96a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e96e:	f3c4 0440 	ubfx	r4, r4, #1, #1
    e972:	4688      	mov	r8, r1
    e974:	4617      	mov	r7, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    e976:	b13c      	cbz	r4, e988 <bt_mesh_adv_create_from_pool+0x2c>
		BT_WARN("Refusing to allocate buffer while suspended");
    e978:	2157      	movs	r1, #87	; 0x57
    e97a:	480e      	ldr	r0, [pc, #56]	; (e9b4 <bt_mesh_adv_create_from_pool+0x58>)
    e97c:	f018 ffa9 	bl	278d2 <printk>
		return NULL;
    e980:	2500      	movs	r5, #0
}
    e982:	4628      	mov	r0, r5
    e984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    e988:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    e98c:	f01e fda2 	bl	2d4d4 <net_buf_alloc_fixed>
	if (!buf) {
    e990:	4605      	mov	r5, r0
    e992:	2800      	cmp	r0, #0
    e994:	d0f5      	beq.n	e982 <bt_mesh_adv_create_from_pool+0x26>
	adv = get_id(net_buf_id(buf));
    e996:	f010 ffa7 	bl	1f8e8 <net_buf_id>
    e99a:	47c0      	blx	r8
	BT_MESH_ADV(buf) = adv;
    e99c:	6168      	str	r0, [r5, #20]
    e99e:	6084      	str	r4, [r0, #8]
	adv->type         = type;
    e9a0:	7a03      	ldrb	r3, [r0, #8]
    e9a2:	6004      	str	r4, [r0, #0]
    e9a4:	f367 0301 	bfi	r3, r7, #0, #2
    e9a8:	6044      	str	r4, [r0, #4]
    e9aa:	7203      	strb	r3, [r0, #8]
	adv->xmit         = xmit;
    e9ac:	7246      	strb	r6, [r0, #9]
	return buf;
    e9ae:	e7e8      	b.n	e982 <bt_mesh_adv_create_from_pool+0x26>
    e9b0:	20002970 	.word	0x20002970
    e9b4:	000328fb 	.word	0x000328fb

0000e9b8 <bt_mesh_adv_create>:
{
    e9b8:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    e9ba:	e9cd 2300 	strd	r2, r3, [sp]
    e9be:	460b      	mov	r3, r1
    e9c0:	4602      	mov	r2, r0
    e9c2:	4903      	ldr	r1, [pc, #12]	; (e9d0 <bt_mesh_adv_create+0x18>)
    e9c4:	4803      	ldr	r0, [pc, #12]	; (e9d4 <bt_mesh_adv_create+0x1c>)
    e9c6:	f7ff ffc9 	bl	e95c <bt_mesh_adv_create_from_pool>
}
    e9ca:	b003      	add	sp, #12
    e9cc:	f85d fb04 	ldr.w	pc, [sp], #4
    e9d0:	0000e8c1 	.word	0x0000e8c1
    e9d4:	20001f70 	.word	0x20001f70

0000e9d8 <bt_mesh_adv_send>:
{
    e9d8:	b510      	push	{r4, lr}
	BT_MESH_ADV(buf)->cb = cb;
    e9da:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    e9dc:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    e9e0:	6942      	ldr	r2, [r0, #20]
    e9e2:	7a13      	ldrb	r3, [r2, #8]
    e9e4:	f043 0304 	orr.w	r3, r3, #4
    e9e8:	7213      	strb	r3, [r2, #8]
	net_buf_put(&bt_mesh_adv_queue, net_buf_ref(buf));
    e9ea:	f011 f9cd 	bl	1fd88 <net_buf_ref>
    e9ee:	4601      	mov	r1, r0
    e9f0:	4803      	ldr	r0, [pc, #12]	; (ea00 <bt_mesh_adv_send+0x28>)
    e9f2:	f011 f957 	bl	1fca4 <net_buf_put>
}
    e9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_buf_ready();
    e9fa:	f01d b995 	b.w	2bd28 <bt_mesh_adv_buf_ready>
    e9fe:	bf00      	nop
    ea00:	20001ef0 	.word	0x20001ef0

0000ea04 <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
    ea04:	b510      	push	{r4, lr}
    ea06:	b086      	sub	sp, #24
	struct bt_le_scan_param scan_param = {
    ea08:	2214      	movs	r2, #20
    ea0a:	2100      	movs	r1, #0
    ea0c:	a801      	add	r0, sp, #4
    ea0e:	f01f fc87 	bl	2e320 <memset>
    ea12:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
			.window     = MESH_SCAN_WINDOW };
	int err;

	BT_DBG("");

	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    ea16:	490a      	ldr	r1, [pc, #40]	; (ea40 <bt_mesh_scan_enable+0x3c>)
	struct bt_le_scan_param scan_param = {
    ea18:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    ea1a:	a801      	add	r0, sp, #4
    ea1c:	f7fc f85c 	bl	aad8 <bt_le_scan_start>
	if (err && err != -EALREADY) {
    ea20:	4604      	mov	r4, r0
    ea22:	b138      	cbz	r0, ea34 <bt_mesh_scan_enable+0x30>
    ea24:	f110 0f78 	cmn.w	r0, #120	; 0x78
    ea28:	d007      	beq.n	ea3a <bt_mesh_scan_enable+0x36>
		BT_ERR("starting scan failed (err %d)", err);
    ea2a:	4602      	mov	r2, r0
    ea2c:	2145      	movs	r1, #69	; 0x45
    ea2e:	4805      	ldr	r0, [pc, #20]	; (ea44 <bt_mesh_scan_enable+0x40>)
    ea30:	f018 ff4f 	bl	278d2 <printk>
		return err;
	}

	return 0;
}
    ea34:	4620      	mov	r0, r4
    ea36:	b006      	add	sp, #24
    ea38:	bd10      	pop	{r4, pc}
	return 0;
    ea3a:	2400      	movs	r4, #0
    ea3c:	e7fa      	b.n	ea34 <bt_mesh_scan_enable+0x30>
    ea3e:	bf00      	nop
    ea40:	0000e8d1 	.word	0x0000e8d1
    ea44:	00032965 	.word	0x00032965

0000ea48 <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
    ea48:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = bt_le_scan_stop();
    ea4a:	f7fc f8fd 	bl	ac48 <bt_le_scan_stop>
	if (err && err != -EALREADY) {
    ea4e:	4604      	mov	r4, r0
    ea50:	b138      	cbz	r0, ea62 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ea52:	f110 0f78 	cmn.w	r0, #120	; 0x78
    ea56:	d006      	beq.n	ea66 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6>
		BT_ERR("stopping scan failed (err %d)", err);
    ea58:	4602      	mov	r2, r0
    ea5a:	2145      	movs	r1, #69	; 0x45
    ea5c:	4803      	ldr	r0, [pc, #12]	; (ea6c <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc>)
    ea5e:	f018 ff38 	bl	278d2 <printk>
		return err;
	}

	return 0;
}
    ea62:	4620      	mov	r0, r4
    ea64:	bd10      	pop	{r4, pc}
	return 0;
    ea66:	2400      	movs	r4, #0
    ea68:	e7fb      	b.n	ea62 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ea6a:	bf00      	nop
    ea6c:	00032942 	.word	0x00032942

0000ea70 <subnet_by_id>:

	return true;
}

static int subnet_by_id(struct bt_mesh_subnet *sub, void *cb_data)
{
    ea70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Authentication Value %s != %s",
    ea74:	f8df 8070 	ldr.w	r8, [pc, #112]	; eae8 <subnet_by_id+0x78>
{
    ea78:	b085      	sub	sp, #20
    ea7a:	460d      	mov	r5, r1
	struct beacon_params *params = cb_data;

	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    ea7c:	f100 045e 	add.w	r4, r0, #94	; 0x5e
    ea80:	2600      	movs	r6, #0
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
    ea82:	af02      	add	r7, sp, #8
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
    ea84:	f814 3c32 	ldrb.w	r3, [r4, #-50]
    ea88:	b313      	cbz	r3, ead0 <subnet_by_id+0x60>
	if (memcmp(params->net_id, keys->net_id, 8)) {
    ea8a:	2208      	movs	r2, #8
    ea8c:	4621      	mov	r1, r4
    ea8e:	6828      	ldr	r0, [r5, #0]
    ea90:	f01f fbfd 	bl	2e28e <memcmp>
    ea94:	b9e0      	cbnz	r0, ead0 <subnet_by_id+0x60>
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
    ea96:	4622      	mov	r2, r4
    ea98:	7b29      	ldrb	r1, [r5, #12]
    ea9a:	9700      	str	r7, [sp, #0]
    ea9c:	68ab      	ldr	r3, [r5, #8]
    ea9e:	f104 0018 	add.w	r0, r4, #24
    eaa2:	f01c fee7 	bl	2b874 <bt_mesh_beacon_auth>
	if (memcmp(params->auth, net_auth, 8)) {
    eaa6:	2208      	movs	r2, #8
    eaa8:	4639      	mov	r1, r7
    eaaa:	6868      	ldr	r0, [r5, #4]
    eaac:	f01f fbef 	bl	2e28e <memcmp>
    eab0:	b1a0      	cbz	r0, eadc <subnet_by_id+0x6c>
		BT_WARN("Authentication Value %s != %s",
    eab2:	2108      	movs	r1, #8
    eab4:	6868      	ldr	r0, [r5, #4]
    eab6:	f7f9 fd63 	bl	8580 <bt_hex_real>
    eaba:	2108      	movs	r1, #8
    eabc:	4681      	mov	r9, r0
    eabe:	4638      	mov	r0, r7
    eac0:	f7f9 fd5e 	bl	8580 <bt_hex_real>
    eac4:	464a      	mov	r2, r9
    eac6:	4603      	mov	r3, r0
    eac8:	2157      	movs	r1, #87	; 0x57
    eaca:	4640      	mov	r0, r8
    eacc:	f018 ff01 	bl	278d2 <printk>
		return false;
    ead0:	345a      	adds	r4, #90	; 0x5a
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    ead2:	b10e      	cbz	r6, ead8 <subnet_by_id+0x68>
			params->new_key = (i > 0);
			return true;
		}
	}

	return false;
    ead4:	2000      	movs	r0, #0
    ead6:	e003      	b.n	eae0 <subnet_by_id+0x70>
    ead8:	2601      	movs	r6, #1
    eada:	e7d3      	b.n	ea84 <subnet_by_id+0x14>
			params->new_key = (i > 0);
    eadc:	736e      	strb	r6, [r5, #13]
			return true;
    eade:	2001      	movs	r0, #1
}
    eae0:	b005      	add	sp, #20
    eae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    eae6:	bf00      	nop
    eae8:	00032b33 	.word	0x00032b33

0000eaec <k_delayed_work_submit.constprop.7>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    eaec:	4602      	mov	r2, r0
    eaee:	460b      	mov	r3, r1
    eaf0:	4801      	ldr	r0, [pc, #4]	; (eaf8 <k_delayed_work_submit.constprop.7+0xc>)
    eaf2:	4902      	ldr	r1, [pc, #8]	; (eafc <k_delayed_work_submit.constprop.7+0x10>)
    eaf4:	f016 bcd0 	b.w	25498 <k_delayed_work_submit_to_queue>
    eaf8:	20003028 	.word	0x20003028
    eafc:	20002938 	.word	0x20002938

0000eb00 <beacon_send>:
{
    eb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb04:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) && bt_mesh_prov_active()) {
    eb06:	f008 f853 	bl	16bb0 <bt_mesh_prov_active>
    eb0a:	b110      	cbz	r0, eb12 <beacon_send+0x12>
		k_delayed_work_submit(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    eb0c:	f44f 3020 	mov.w	r0, #163840	; 0x28000
    eb10:	e015      	b.n	eb3e <beacon_send+0x3e>
	if (bt_mesh_is_provisioned()) {
    eb12:	f01c f996 	bl	2ae42 <bt_mesh_is_provisioned>
    eb16:	4607      	mov	r7, r0
    eb18:	b300      	cbz	r0, eb5c <beacon_send+0x5c>
	first_half = !first_half;
    eb1a:	4a4c      	ldr	r2, [pc, #304]	; (ec4c <beacon_send+0x14c>)
    eb1c:	7813      	ldrb	r3, [r2, #0]
    eb1e:	f083 0301 	eor.w	r3, r3, #1
    eb22:	7013      	strb	r3, [r2, #0]
	if (first_half) {
    eb24:	b913      	cbnz	r3, eb2c <beacon_send+0x2c>
	bt_mesh_subnet_foreach(sub_update_beacon_observation);
    eb26:	484a      	ldr	r0, [pc, #296]	; (ec50 <beacon_send+0x150>)
    eb28:	f001 fb00 	bl	1012c <bt_mesh_subnet_foreach>
		(void)bt_mesh_subnet_find(secure_beacon_send, NULL);
    eb2c:	2100      	movs	r1, #0
    eb2e:	4849      	ldr	r0, [pc, #292]	; (ec54 <beacon_send+0x154>)
    eb30:	f001 faea 	bl	10108 <bt_mesh_subnet_find>
		if (bt_mesh_beacon_enabled() ||
    eb34:	f01c f9b4 	bl	2aea0 <bt_mesh_beacon_enabled>
    eb38:	b128      	cbz	r0, eb46 <beacon_send+0x46>
			k_delayed_work_submit(&beacon_timer,
    eb3a:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
		k_delayed_work_submit(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    eb3e:	2100      	movs	r1, #0
    eb40:	f7ff ffd4 	bl	eaec <k_delayed_work_submit.constprop.7>
    eb44:	e007      	b.n	eb56 <beacon_send+0x56>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    eb46:	4b44      	ldr	r3, [pc, #272]	; (ec58 <beacon_send+0x158>)
    eb48:	f3bf 8f5b 	dmb	ish
    eb4c:	681b      	ldr	r3, [r3, #0]
    eb4e:	f3bf 8f5b 	dmb	ish
		if (bt_mesh_beacon_enabled() ||
    eb52:	071b      	lsls	r3, r3, #28
    eb54:	d4f1      	bmi.n	eb3a <beacon_send+0x3a>
}
    eb56:	b00a      	add	sp, #40	; 0x28
    eb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t uri_hash[16] = { 0 };
    eb5c:	4601      	mov	r1, r0
    eb5e:	2210      	movs	r2, #16
    eb60:	a802      	add	r0, sp, #8
    eb62:	f01f fbdd 	bl	2e320 <memset>
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, UNPROV_XMIT, K_NO_WAIT);
    eb66:	2200      	movs	r2, #0
    eb68:	2300      	movs	r3, #0
    eb6a:	210a      	movs	r1, #10
    eb6c:	2002      	movs	r0, #2
    eb6e:	f7ff ff23 	bl	e9b8 <bt_mesh_adv_create>
	if (!buf) {
    eb72:	4605      	mov	r5, r0
    eb74:	b920      	cbnz	r0, eb80 <beacon_send+0x80>
		BT_ERR("Unable to allocate beacon buffer");
    eb76:	4839      	ldr	r0, [pc, #228]	; (ec5c <beacon_send+0x15c>)
    eb78:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to allocate URI buffer");
    eb7a:	f018 feaa 	bl	278d2 <printk>
			return -ENOBUFS;
    eb7e:	e7c5      	b.n	eb0c <beacon_send+0xc>
	prov = bt_mesh_prov_get();
    eb80:	f008 f810 	bl	16ba4 <bt_mesh_prov_get>
	return net_buf_simple_add_u8(&buf->b, val);
    eb84:	f105 0608 	add.w	r6, r5, #8
    eb88:	4604      	mov	r4, r0
    eb8a:	4639      	mov	r1, r7
    eb8c:	4630      	mov	r0, r6
    eb8e:	f01e fd21 	bl	2d5d4 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    eb92:	2210      	movs	r2, #16
    eb94:	6821      	ldr	r1, [r4, #0]
    eb96:	4630      	mov	r0, r6
    eb98:	f01e fd10 	bl	2d5bc <net_buf_simple_add_mem>
	if (prov->uri && bt_mesh_s1(prov->uri, uri_hash) == 0) {
    eb9c:	f8d4 8004 	ldr.w	r8, [r4, #4]
    eba0:	f1b8 0f00 	cmp.w	r8, #0
    eba4:	d031      	beq.n	ec0a <beacon_send+0x10a>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
}

static inline bool bt_mesh_s1(const char *m, uint8_t salt[16])
{
	const uint8_t zero[16] = { 0 };
    eba6:	2210      	movs	r2, #16
    eba8:	4639      	mov	r1, r7
    ebaa:	a806      	add	r0, sp, #24
    ebac:	f01f fbb8 	bl	2e320 <memset>

	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    ebb0:	4640      	mov	r0, r8
    ebb2:	f7f3 f929 	bl	1e08 <strlen>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    ebb6:	ab02      	add	r3, sp, #8
	struct bt_mesh_sg sg = { m, len };
    ebb8:	e9cd 8000 	strd	r8, r0, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    ebbc:	2201      	movs	r2, #1
    ebbe:	4669      	mov	r1, sp
    ebc0:	a806      	add	r0, sp, #24
    ebc2:	f01c fcb2 	bl	2b52a <bt_mesh_aes_cmac>
    ebc6:	bb00      	cbnz	r0, ec0a <beacon_send+0x10a>
		oob_info = prov->oob_info | BT_MESH_PROV_OOB_URI;
    ebc8:	8921      	ldrh	r1, [r4, #8]
    ebca:	f041 0102 	orr.w	r1, r1, #2
	net_buf_simple_add_be16(&buf->b, val);
    ebce:	4630      	mov	r0, r6
    ebd0:	f01e fd10 	bl	2d5f4 <net_buf_simple_add_be16>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ebd4:	2204      	movs	r2, #4
    ebd6:	a902      	add	r1, sp, #8
    ebd8:	4630      	mov	r0, r6
    ebda:	f01e fcef 	bl	2d5bc <net_buf_simple_add_mem>
	bt_mesh_adv_send(buf, NULL, NULL);
    ebde:	2200      	movs	r2, #0
    ebe0:	4611      	mov	r1, r2
    ebe2:	4628      	mov	r0, r5
    ebe4:	f7ff fef8 	bl	e9d8 <bt_mesh_adv_send>
	net_buf_unref(buf);
    ebe8:	4628      	mov	r0, r5
    ebea:	f011 f889 	bl	1fd00 <net_buf_unref>
	if (prov->uri) {
    ebee:	6863      	ldr	r3, [r4, #4]
    ebf0:	2b00      	cmp	r3, #0
    ebf2:	d08b      	beq.n	eb0c <beacon_send+0xc>
		buf = bt_mesh_adv_create(BT_MESH_ADV_URI, UNPROV_XMIT,
    ebf4:	2200      	movs	r2, #0
    ebf6:	2300      	movs	r3, #0
    ebf8:	210a      	movs	r1, #10
    ebfa:	2003      	movs	r0, #3
    ebfc:	f7ff fedc 	bl	e9b8 <bt_mesh_adv_create>
		if (!buf) {
    ec00:	4605      	mov	r5, r0
    ec02:	b920      	cbnz	r0, ec0e <beacon_send+0x10e>
			BT_ERR("Unable to allocate URI buffer");
    ec04:	2145      	movs	r1, #69	; 0x45
    ec06:	4816      	ldr	r0, [pc, #88]	; (ec60 <beacon_send+0x160>)
    ec08:	e7b7      	b.n	eb7a <beacon_send+0x7a>
		oob_info = prov->oob_info;
    ec0a:	8921      	ldrh	r1, [r4, #8]
    ec0c:	e7df      	b.n	ebce <beacon_send+0xce>
		len = strlen(prov->uri);
    ec0e:	6860      	ldr	r0, [r4, #4]
    ec10:	f7f3 f8fa 	bl	1e08 <strlen>
	return net_buf_simple_tailroom(&buf->b);
    ec14:	f105 0608 	add.w	r6, r5, #8
    ec18:	4607      	mov	r7, r0
    ec1a:	4630      	mov	r0, r6
    ec1c:	f01e fcc6 	bl	2d5ac <net_buf_simple_tailroom>
		if (net_buf_tailroom(buf) < len) {
    ec20:	4287      	cmp	r7, r0
    ec22:	d907      	bls.n	ec34 <beacon_send+0x134>
			BT_WARN("Too long URI to fit advertising data");
    ec24:	2157      	movs	r1, #87	; 0x57
    ec26:	480f      	ldr	r0, [pc, #60]	; (ec64 <beacon_send+0x164>)
    ec28:	f018 fe53 	bl	278d2 <printk>
		net_buf_unref(buf);
    ec2c:	4628      	mov	r0, r5
    ec2e:	f011 f867 	bl	1fd00 <net_buf_unref>
    ec32:	e76b      	b.n	eb0c <beacon_send+0xc>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ec34:	463a      	mov	r2, r7
    ec36:	6861      	ldr	r1, [r4, #4]
    ec38:	4630      	mov	r0, r6
    ec3a:	f01e fcbf 	bl	2d5bc <net_buf_simple_add_mem>
			bt_mesh_adv_send(buf, NULL, NULL);
    ec3e:	2200      	movs	r2, #0
    ec40:	4611      	mov	r1, r2
    ec42:	4628      	mov	r0, r5
    ec44:	f7ff fec8 	bl	e9d8 <bt_mesh_adv_send>
    ec48:	e7f0      	b.n	ec2c <beacon_send+0x12c>
    ec4a:	bf00      	nop
    ec4c:	20005851 	.word	0x20005851
    ec50:	0002af41 	.word	0x0002af41
    ec54:	0000ecbd 	.word	0x0000ecbd
    ec58:	20002970 	.word	0x20002970
    ec5c:	00032994 	.word	0x00032994
    ec60:	000329ba 	.word	0x000329ba
    ec64:	000329dd 	.word	0x000329dd

0000ec68 <bt_mesh_beacon_create>:
{
    ec68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec6a:	460c      	mov	r4, r1
    ec6c:	4606      	mov	r6, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    ec6e:	f001 f95b 	bl	ff28 <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    ec72:	2101      	movs	r1, #1
	uint8_t flags = bt_mesh_net_flags(sub);
    ec74:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    ec76:	4620      	mov	r0, r4
    ec78:	f01e fcac 	bl	2d5d4 <net_buf_simple_add_u8>
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    ec7c:	7fb5      	ldrb	r5, [r6, #30]
    ec7e:	1eab      	subs	r3, r5, #2
    ec80:	425d      	negs	r5, r3
	net_buf_simple_add_u8(buf, flags);
    ec82:	4639      	mov	r1, r7
    ec84:	4620      	mov	r0, r4
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    ec86:	415d      	adcs	r5, r3
	net_buf_simple_add_u8(buf, flags);
    ec88:	f01e fca4 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    ec8c:	215a      	movs	r1, #90	; 0x5a
    ec8e:	fb01 6105 	mla	r1, r1, r5, r6
    ec92:	2208      	movs	r2, #8
    ec94:	315e      	adds	r1, #94	; 0x5e
    ec96:	4620      	mov	r0, r4
    ec98:	f01e fc90 	bl	2d5bc <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    ec9c:	4b06      	ldr	r3, [pc, #24]	; (ecb8 <bt_mesh_beacon_create+0x50>)
    ec9e:	4620      	mov	r0, r4
    eca0:	6819      	ldr	r1, [r3, #0]
    eca2:	f01e fcca 	bl	2d63a <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
    eca6:	f106 0124 	add.w	r1, r6, #36	; 0x24
    ecaa:	4620      	mov	r0, r4
    ecac:	2208      	movs	r2, #8
}
    ecae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    ecb2:	f01e bc83 	b.w	2d5bc <net_buf_simple_add_mem>
    ecb6:	bf00      	nop
    ecb8:	20002968 	.word	0x20002968

0000ecbc <secure_beacon_send>:
{
    ecbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecbe:	4605      	mov	r5, r0
	return z_impl_k_uptime_ticks();
    ecc0:	f01f fa53 	bl	2e16a <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    ecc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ecc8:	fba0 6703 	umull	r6, r7, r0, r3
    eccc:	fb03 7701 	mla	r7, r3, r1, r7
	time_diff = now - sub->beacon_sent;
    ecd0:	682a      	ldr	r2, [r5, #0]
    ecd2:	0bf3      	lsrs	r3, r6, #15
    ecd4:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
    ecd8:	1a9a      	subs	r2, r3, r2
	if (time_diff < (600 * MSEC_PER_SEC) &&
    ecda:	4b15      	ldr	r3, [pc, #84]	; (ed30 <secure_beacon_send+0x74>)
    ecdc:	429a      	cmp	r2, r3
    ecde:	d809      	bhi.n	ecf4 <secure_beacon_send+0x38>
		time_diff < BEACON_THRESHOLD(sub)) {
    ece0:	7929      	ldrb	r1, [r5, #4]
    ece2:	f242 7310 	movw	r3, #10000	; 0x2710
    ece6:	fb01 3303 	mla	r3, r1, r3, r3
    ecea:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
    ecee:	3b08      	subs	r3, #8
	if (time_diff < (600 * MSEC_PER_SEC) &&
    ecf0:	429a      	cmp	r2, r3
    ecf2:	d31b      	bcc.n	ed2c <secure_beacon_send+0x70>
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, PROV_XMIT, K_NO_WAIT);
    ecf4:	2200      	movs	r2, #0
    ecf6:	2300      	movs	r3, #0
    ecf8:	2108      	movs	r1, #8
    ecfa:	2002      	movs	r0, #2
    ecfc:	f7ff fe5c 	bl	e9b8 <bt_mesh_adv_create>
	if (!buf) {
    ed00:	4604      	mov	r4, r0
    ed02:	b930      	cbnz	r0, ed12 <secure_beacon_send+0x56>
		BT_ERR("Unable to allocate beacon buffer");
    ed04:	480b      	ldr	r0, [pc, #44]	; (ed34 <secure_beacon_send+0x78>)
    ed06:	2145      	movs	r1, #69	; 0x45
    ed08:	f018 fde3 	bl	278d2 <printk>
    ed0c:	f06f 000b 	mvn.w	r0, #11
}
    ed10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	bt_mesh_beacon_create(sub, &buf->b);
    ed12:	f100 0108 	add.w	r1, r0, #8
    ed16:	4628      	mov	r0, r5
    ed18:	f7ff ffa6 	bl	ec68 <bt_mesh_beacon_create>
	bt_mesh_adv_send(buf, &send_cb, sub);
    ed1c:	4620      	mov	r0, r4
    ed1e:	462a      	mov	r2, r5
    ed20:	4905      	ldr	r1, [pc, #20]	; (ed38 <secure_beacon_send+0x7c>)
    ed22:	f7ff fe59 	bl	e9d8 <bt_mesh_adv_send>
	net_buf_unref(buf);
    ed26:	4620      	mov	r0, r4
    ed28:	f010 ffea 	bl	1fd00 <net_buf_unref>
		return 0;
    ed2c:	2000      	movs	r0, #0
    ed2e:	e7ef      	b.n	ed10 <secure_beacon_send+0x54>
    ed30:	000927bf 	.word	0x000927bf
    ed34:	00032994 	.word	0x00032994
    ed38:	0002fabc 	.word	0x0002fabc

0000ed3c <bt_mesh_beacon_update>:
		break;
	}
}

void bt_mesh_beacon_update(struct bt_mesh_subnet *sub)
{
    ed3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ed3e:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    ed40:	f001 f8f2 	bl	ff28 <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;
	int err;

	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    ed44:	7fab      	ldrb	r3, [r5, #30]
    ed46:	3b02      	subs	r3, #2
    ed48:	425a      	negs	r2, r3
    ed4a:	415a      	adcs	r2, r3
    ed4c:	235a      	movs	r3, #90	; 0x5a
    ed4e:	4353      	muls	r3, r2

	BT_DBG("NetIndex 0x%03x Using %s key", sub->net_idx,
	       SUBNET_KEY_TX_IDX(sub) ? "new" : "current");
	BT_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);

	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    ed50:	f103 025e 	add.w	r2, r3, #94	; 0x5e
    ed54:	f103 0476 	add.w	r4, r3, #118	; 0x76
				   bt_mesh.iv_index, sub->auth);
    ed58:	f105 0324 	add.w	r3, r5, #36	; 0x24
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    ed5c:	9300      	str	r3, [sp, #0]
    ed5e:	4b09      	ldr	r3, [pc, #36]	; (ed84 <bt_mesh_beacon_update+0x48>)
    ed60:	4601      	mov	r1, r0
    ed62:	681b      	ldr	r3, [r3, #0]
    ed64:	442a      	add	r2, r5
    ed66:	1928      	adds	r0, r5, r4
    ed68:	f01c fd84 	bl	2b874 <bt_mesh_beacon_auth>
	if (err) {
    ed6c:	b138      	cbz	r0, ed7e <bt_mesh_beacon_update+0x42>
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    ed6e:	8baa      	ldrh	r2, [r5, #28]
    ed70:	4805      	ldr	r0, [pc, #20]	; (ed88 <bt_mesh_beacon_update+0x4c>)
    ed72:	2145      	movs	r1, #69	; 0x45
	}
}
    ed74:	b003      	add	sp, #12
    ed76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    ed7a:	f018 bdaa 	b.w	278d2 <printk>
}
    ed7e:	b003      	add	sp, #12
    ed80:	bd30      	pop	{r4, r5, pc}
    ed82:	bf00      	nop
    ed84:	20002968 	.word	0x20002968
    ed88:	00032af9 	.word	0x00032af9

0000ed8c <bt_mesh_beacon_init>:
}

BT_MESH_SUBNET_CB_DEFINE(subnet_evt);

void bt_mesh_beacon_init(void)
{
    ed8c:	b508      	push	{r3, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    ed8e:	4b04      	ldr	r3, [pc, #16]	; (eda0 <bt_mesh_beacon_init+0x14>)
    ed90:	2230      	movs	r2, #48	; 0x30
    ed92:	2100      	movs	r1, #0
    ed94:	4618      	mov	r0, r3
    ed96:	f01f fac3 	bl	2e320 <memset>
    ed9a:	4a02      	ldr	r2, [pc, #8]	; (eda4 <bt_mesh_beacon_init+0x18>)
    ed9c:	6042      	str	r2, [r0, #4]
	k_delayed_work_init(&beacon_timer, beacon_send);
}
    ed9e:	bd08      	pop	{r3, pc}
    eda0:	20002938 	.word	0x20002938
    eda4:	0000eb01 	.word	0x0000eb01

0000eda8 <bt_mesh_beacon_ivu_initiator>:

void bt_mesh_beacon_ivu_initiator(bool enable)
{
    eda8:	b508      	push	{r3, lr}
    edaa:	4b13      	ldr	r3, [pc, #76]	; (edf8 <bt_mesh_beacon_ivu_initiator+0x50>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    edac:	f3bf 8f5b 	dmb	ish
	if (val) {
    edb0:	b178      	cbz	r0, edd2 <bt_mesh_beacon_ivu_initiator+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    edb2:	e853 2f00 	ldrex	r2, [r3]
    edb6:	f042 0208 	orr.w	r2, r2, #8
    edba:	e843 2100 	strex	r1, r2, [r3]
    edbe:	2900      	cmp	r1, #0
    edc0:	d1f7      	bne.n	edb2 <bt_mesh_beacon_ivu_initiator+0xa>
    edc2:	f3bf 8f5b 	dmb	ish
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_INITIATOR, enable);

	if (enable) {
		k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    edc6:	2000      	movs	r0, #0
    edc8:	2100      	movs	r1, #0
	} else if (!bt_mesh_beacon_enabled()) {
		k_delayed_work_cancel(&beacon_timer);
	}
}
    edca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    edce:	f7ff be8d 	b.w	eaec <k_delayed_work_submit.constprop.7>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    edd2:	e853 2f00 	ldrex	r2, [r3]
    edd6:	f022 0208 	bic.w	r2, r2, #8
    edda:	e843 2100 	strex	r1, r2, [r3]
    edde:	2900      	cmp	r1, #0
    ede0:	d1f7      	bne.n	edd2 <bt_mesh_beacon_ivu_initiator+0x2a>
    ede2:	f3bf 8f5b 	dmb	ish
	} else if (!bt_mesh_beacon_enabled()) {
    ede6:	f01c f85b 	bl	2aea0 <bt_mesh_beacon_enabled>
    edea:	b920      	cbnz	r0, edf6 <bt_mesh_beacon_ivu_initiator+0x4e>
		k_delayed_work_cancel(&beacon_timer);
    edec:	4803      	ldr	r0, [pc, #12]	; (edfc <bt_mesh_beacon_ivu_initiator+0x54>)
}
    edee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&beacon_timer);
    edf2:	f016 bbc1 	b.w	25578 <k_delayed_work_cancel>
}
    edf6:	bd08      	pop	{r3, pc}
    edf8:	20002970 	.word	0x20002970
    edfc:	20002938 	.word	0x20002938

0000ee00 <bt_mesh_beacon_recv>:
{
    ee00:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < 1) {
    ee02:	8883      	ldrh	r3, [r0, #4]
{
    ee04:	b085      	sub	sp, #20
    ee06:	4604      	mov	r4, r0
	if (buf->len < 1) {
    ee08:	b923      	cbnz	r3, ee14 <bt_mesh_beacon_recv+0x14>
		BT_ERR("Too short beacon");
    ee0a:	4855      	ldr	r0, [pc, #340]	; (ef60 <bt_mesh_beacon_recv+0x160>)
    ee0c:	2145      	movs	r1, #69	; 0x45
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    ee0e:	f018 fd60 	bl	278d2 <printk>
		return;
    ee12:	e02c      	b.n	ee6e <bt_mesh_beacon_recv+0x6e>
	type = net_buf_simple_pull_u8(buf);
    ee14:	f01e fb8c 	bl	2d530 <net_buf_simple_pull_u8>
	switch (type) {
    ee18:	4605      	mov	r5, r0
    ee1a:	b128      	cbz	r0, ee28 <bt_mesh_beacon_recv+0x28>
    ee1c:	2801      	cmp	r0, #1
    ee1e:	d028      	beq.n	ee72 <bt_mesh_beacon_recv+0x72>
		BT_WARN("Unknown beacon type 0x%02x", type);
    ee20:	4602      	mov	r2, r0
    ee22:	2157      	movs	r1, #87	; 0x57
    ee24:	484f      	ldr	r0, [pc, #316]	; (ef64 <bt_mesh_beacon_recv+0x164>)
    ee26:	e006      	b.n	ee36 <bt_mesh_beacon_recv+0x36>
	if (buf->len != 18 && buf->len != 22) {
    ee28:	88a2      	ldrh	r2, [r4, #4]
    ee2a:	f022 0304 	bic.w	r3, r2, #4
    ee2e:	2b12      	cmp	r3, #18
    ee30:	d004      	beq.n	ee3c <bt_mesh_beacon_recv+0x3c>
		BT_ERR("Invalid unprovisioned beacon length (%u)", buf->len);
    ee32:	484d      	ldr	r0, [pc, #308]	; (ef68 <bt_mesh_beacon_recv+0x168>)
    ee34:	2145      	movs	r1, #69	; 0x45
		BT_WARN("Unknown beacon type 0x%02x", type);
    ee36:	f018 fd4c 	bl	278d2 <printk>
    ee3a:	e018      	b.n	ee6e <bt_mesh_beacon_recv+0x6e>
	uuid = net_buf_simple_pull_mem(buf, 16);
    ee3c:	2110      	movs	r1, #16
    ee3e:	4620      	mov	r0, r4
    ee40:	f011 f890 	bl	1ff64 <net_buf_simple_pull_mem>
    ee44:	4606      	mov	r6, r0
	oob_info = net_buf_simple_pull_be16(buf);
    ee46:	4620      	mov	r0, r4
    ee48:	f01e fb82 	bl	2d550 <net_buf_simple_pull_be16>
	if (buf->len == 4) {
    ee4c:	88a3      	ldrh	r3, [r4, #4]
    ee4e:	2b04      	cmp	r3, #4
	oob_info = net_buf_simple_pull_be16(buf);
    ee50:	4607      	mov	r7, r0
	if (buf->len == 4) {
    ee52:	d104      	bne.n	ee5e <bt_mesh_beacon_recv+0x5e>
		uri_hash_val = net_buf_simple_pull_be32(buf);
    ee54:	4620      	mov	r0, r4
    ee56:	f01e fb9c 	bl	2d592 <net_buf_simple_pull_be32>
		uri_hash = &uri_hash_val;
    ee5a:	466d      	mov	r5, sp
		uri_hash_val = net_buf_simple_pull_be32(buf);
    ee5c:	9000      	str	r0, [sp, #0]
	prov = bt_mesh_prov_get();
    ee5e:	f007 fea1 	bl	16ba4 <bt_mesh_prov_get>
	if (prov->unprovisioned_beacon) {
    ee62:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    ee64:	b11b      	cbz	r3, ee6e <bt_mesh_beacon_recv+0x6e>
		prov->unprovisioned_beacon(uuid,
    ee66:	462a      	mov	r2, r5
    ee68:	4639      	mov	r1, r7
    ee6a:	4630      	mov	r0, r6
    ee6c:	4798      	blx	r3
}
    ee6e:	b005      	add	sp, #20
    ee70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < 21) {
    ee72:	88a2      	ldrh	r2, [r4, #4]
    ee74:	2a14      	cmp	r2, #20
    ee76:	d802      	bhi.n	ee7e <bt_mesh_beacon_recv+0x7e>
		BT_ERR("Too short secure beacon (len %u)", buf->len);
    ee78:	2145      	movs	r1, #69	; 0x45
    ee7a:	483c      	ldr	r0, [pc, #240]	; (ef6c <bt_mesh_beacon_recv+0x16c>)
    ee7c:	e7db      	b.n	ee36 <bt_mesh_beacon_recv+0x36>
	sub = bt_mesh_subnet_find(cache_check, buf->data);
    ee7e:	6821      	ldr	r1, [r4, #0]
    ee80:	483b      	ldr	r0, [pc, #236]	; (ef70 <bt_mesh_beacon_recv+0x170>)
    ee82:	f001 f941 	bl	10108 <bt_mesh_subnet_find>
	if (sub) {
    ee86:	4605      	mov	r5, r0
    ee88:	2800      	cmp	r0, #0
    ee8a:	d13f      	bne.n	ef0c <bt_mesh_beacon_recv+0x10c>
	params.flags = net_buf_simple_pull_u8(buf);
    ee8c:	4620      	mov	r0, r4
	data = buf->data;
    ee8e:	6826      	ldr	r6, [r4, #0]
	params.flags = net_buf_simple_pull_u8(buf);
    ee90:	f01e fb4e 	bl	2d530 <net_buf_simple_pull_u8>
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    ee94:	2108      	movs	r1, #8
	params.flags = net_buf_simple_pull_u8(buf);
    ee96:	f88d 000c 	strb.w	r0, [sp, #12]
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    ee9a:	4620      	mov	r0, r4
    ee9c:	f011 f862 	bl	1ff64 <net_buf_simple_pull_mem>
    eea0:	9000      	str	r0, [sp, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    eea2:	4620      	mov	r0, r4
    eea4:	f01e fb75 	bl	2d592 <net_buf_simple_pull_be32>
	params.auth = buf->data;
    eea8:	6823      	ldr	r3, [r4, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    eeaa:	9002      	str	r0, [sp, #8]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    eeac:	4669      	mov	r1, sp
    eeae:	4831      	ldr	r0, [pc, #196]	; (ef74 <bt_mesh_beacon_recv+0x174>)
	params.auth = buf->data;
    eeb0:	9301      	str	r3, [sp, #4]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    eeb2:	f001 f929 	bl	10108 <bt_mesh_subnet_find>
	if (!sub) {
    eeb6:	4605      	mov	r5, r0
    eeb8:	2800      	cmp	r0, #0
    eeba:	d0d8      	beq.n	ee6e <bt_mesh_beacon_recv+0x6e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !params.new_key) {
    eebc:	7f83      	ldrb	r3, [r0, #30]
    eebe:	2b02      	cmp	r3, #2
    eec0:	d105      	bne.n	eece <bt_mesh_beacon_recv+0xce>
    eec2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    eec6:	b913      	cbnz	r3, eece <bt_mesh_beacon_recv+0xce>
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    eec8:	2157      	movs	r1, #87	; 0x57
    eeca:	482b      	ldr	r0, [pc, #172]	; (ef78 <bt_mesh_beacon_recv+0x178>)
    eecc:	e79f      	b.n	ee0e <bt_mesh_beacon_recv+0xe>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    eece:	4633      	mov	r3, r6
    eed0:	1daa      	adds	r2, r5, #6
    eed2:	f106 0114 	add.w	r1, r6, #20
    eed6:	f853 0b04 	ldr.w	r0, [r3], #4
    eeda:	f842 0b04 	str.w	r0, [r2], #4
    eede:	428b      	cmp	r3, r1
    eee0:	d1f9      	bne.n	eed6 <bt_mesh_beacon_recv+0xd6>
    eee2:	781b      	ldrb	r3, [r3, #0]
    eee4:	7013      	strb	r3, [r2, #0]
	bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(params.flags),
    eee6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    eeea:	f89d 200d 	ldrb.w	r2, [sp, #13]
    eeee:	4628      	mov	r0, r5
    eef0:	f001 0101 	and.w	r1, r1, #1
    eef4:	f01c f8c5 	bl	2b082 <bt_mesh_kr_update>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    eef8:	2000      	movs	r0, #0
    eefa:	f01c f964 	bl	2b1c6 <bt_mesh_subnet_get>
    eefe:	b178      	cbz	r0, ef20 <bt_mesh_beacon_recv+0x120>
    ef00:	8bab      	ldrh	r3, [r5, #28]
    ef02:	b16b      	cbz	r3, ef20 <bt_mesh_beacon_recv+0x120>
		BT_WARN("Ignoring secure beacon on non-primary subnet");
    ef04:	2157      	movs	r1, #87	; 0x57
    ef06:	481d      	ldr	r0, [pc, #116]	; (ef7c <bt_mesh_beacon_recv+0x17c>)
    ef08:	f018 fce3 	bl	278d2 <printk>
	if (bt_mesh_beacon_enabled() &&
    ef0c:	f01b ffc8 	bl	2aea0 <bt_mesh_beacon_enabled>
    ef10:	2800      	cmp	r0, #0
    ef12:	d0ac      	beq.n	ee6e <bt_mesh_beacon_recv+0x6e>
	    sub->beacons_cur < 0xff) {
    ef14:	796b      	ldrb	r3, [r5, #5]
	if (bt_mesh_beacon_enabled() &&
    ef16:	2bff      	cmp	r3, #255	; 0xff
    ef18:	d0a9      	beq.n	ee6e <bt_mesh_beacon_recv+0x6e>
		sub->beacons_cur++;
    ef1a:	3301      	adds	r3, #1
    ef1c:	716b      	strb	r3, [r5, #5]
    ef1e:	e7a6      	b.n	ee6e <bt_mesh_beacon_recv+0x6e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ef20:	4b17      	ldr	r3, [pc, #92]	; (ef80 <bt_mesh_beacon_recv+0x180>)
    ef22:	f3bf 8f5b 	dmb	ish
    ef26:	681a      	ldr	r2, [r3, #0]
    ef28:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    ef2c:	0712      	lsls	r2, r2, #28
    ef2e:	d50f      	bpl.n	ef50 <bt_mesh_beacon_recv+0x150>
    ef30:	f3bf 8f5b 	dmb	ish
    ef34:	681b      	ldr	r3, [r3, #0]
    ef36:	f3bf 8f5b 	dmb	ish
	     BT_MESH_IV_UPDATE(params.flags))) {
    ef3a:	f89d 200c 	ldrb.w	r2, [sp, #12]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    ef3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
	     BT_MESH_IV_UPDATE(params.flags))) {
    ef42:	f3c2 0240 	ubfx	r2, r2, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    ef46:	429a      	cmp	r2, r3
    ef48:	d102      	bne.n	ef50 <bt_mesh_beacon_recv+0x150>
		bt_mesh_beacon_ivu_initiator(false);
    ef4a:	2000      	movs	r0, #0
    ef4c:	f7ff ff2c 	bl	eda8 <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(params.iv_index, BT_MESH_IV_UPDATE(params.flags));
    ef50:	f89d 100c 	ldrb.w	r1, [sp, #12]
    ef54:	9802      	ldr	r0, [sp, #8]
    ef56:	f3c1 0140 	ubfx	r1, r1, #1, #1
    ef5a:	f000 fa07 	bl	f36c <bt_mesh_net_iv_update>
    ef5e:	e7d5      	b.n	ef0c <bt_mesh_beacon_recv+0x10c>
    ef60:	00032a07 	.word	0x00032a07
    ef64:	00032ad9 	.word	0x00032ad9
    ef68:	00032a1d 	.word	0x00032a1d
    ef6c:	00032a4b 	.word	0x00032a4b
    ef70:	0002af4b 	.word	0x0002af4b
    ef74:	0000ea71 	.word	0x0000ea71
    ef78:	00032a71 	.word	0x00032a71
    ef7c:	00032aa7 	.word	0x00032aa7
    ef80:	20002970 	.word	0x20002970

0000ef84 <bt_mesh_beacon_enable>:

	bt_mesh_beacon_update(sub);
}

void bt_mesh_beacon_enable(void)
{
    ef84:	b508      	push	{r3, lr}
	if (!bt_mesh_is_provisioned()) {
    ef86:	f01b ff5c 	bl	2ae42 <bt_mesh_is_provisioned>
    ef8a:	b928      	cbnz	r0, ef98 <bt_mesh_beacon_enable+0x14>
		return;
	}

	bt_mesh_subnet_foreach(subnet_beacon_enable);

	k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    ef8c:	2000      	movs	r0, #0
    ef8e:	2100      	movs	r1, #0
}
    ef90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    ef94:	f7ff bdaa 	b.w	eaec <k_delayed_work_submit.constprop.7>
	bt_mesh_subnet_foreach(subnet_beacon_enable);
    ef98:	4801      	ldr	r0, [pc, #4]	; (efa0 <bt_mesh_beacon_enable+0x1c>)
    ef9a:	f001 f8c7 	bl	1012c <bt_mesh_subnet_foreach>
    ef9e:	e7f5      	b.n	ef8c <bt_mesh_beacon_enable+0x8>
    efa0:	0002af8b 	.word	0x0002af8b

0000efa4 <bt_mesh_beacon_disable>:
    efa4:	4b05      	ldr	r3, [pc, #20]	; (efbc <bt_mesh_beacon_disable+0x18>)
    efa6:	f3bf 8f5b 	dmb	ish
    efaa:	681b      	ldr	r3, [r3, #0]
    efac:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    efb0:	071b      	lsls	r3, r3, #28
    efb2:	d402      	bmi.n	efba <bt_mesh_beacon_disable+0x16>
		k_delayed_work_cancel(&beacon_timer);
    efb4:	4802      	ldr	r0, [pc, #8]	; (efc0 <bt_mesh_beacon_disable+0x1c>)
    efb6:	f016 badf 	b.w	25578 <k_delayed_work_cancel>
	}
}
    efba:	4770      	bx	lr
    efbc:	20002970 	.word	0x20002970
    efc0:	20002938 	.word	0x20002938

0000efc4 <bt_mesh_net_local>:

	return seq;
}

static void bt_mesh_net_local(struct k_work *work)
{
    efc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_buf *buf;

	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    efc8:	4c2e      	ldr	r4, [pc, #184]	; (f084 <bt_mesh_net_local+0xc0>)
{
    efca:	b086      	sub	sp, #24
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    efcc:	f104 0518 	add.w	r5, r4, #24
    efd0:	4628      	mov	r0, r5
    efd2:	f010 fe0b 	bl	1fbec <net_buf_slist_get>
    efd6:	4606      	mov	r6, r0
    efd8:	b910      	cbnz	r0, efe0 <bt_mesh_net_local+0x1c>
		       rx.ctx.addr, rx.seq, sub);

		(void) bt_mesh_trans_recv(&buf->b, &rx);
		net_buf_unref(buf);
	}
}
    efda:	b006      	add	sp, #24
    efdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_mesh_subnet *sub = LOOPBACK_BUF_SUB(buf);
    efe0:	f8d6 8014 	ldr.w	r8, [r6, #20]
				.addr = SRC(buf->data),
    efe4:	4637      	mov	r7, r6
		struct bt_mesh_net_rx rx = {
    efe6:	2210      	movs	r2, #16
    efe8:	2100      	movs	r1, #0
    efea:	a802      	add	r0, sp, #8
    efec:	f01f f998 	bl	2e320 <memset>
    eff0:	f8b8 301c 	ldrh.w	r3, [r8, #28]
				.addr = SRC(buf->data),
    eff4:	f857 1f08 	ldr.w	r1, [r7, #8]!
		struct bt_mesh_net_rx rx = {
    eff8:	f8ad 3004 	strh.w	r3, [sp, #4]
    effc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f000:	f8ad 3006 	strh.w	r3, [sp, #6]
	return ((uint16_t)src[0] << 8) | src[1];
    f004:	794a      	ldrb	r2, [r1, #5]
    f006:	798b      	ldrb	r3, [r1, #6]
    f008:	f8cd 8000 	str.w	r8, [sp]
    f00c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f010:	f8ad 3008 	strh.w	r3, [sp, #8]
    f014:	79ca      	ldrb	r2, [r1, #7]
    f016:	7a0b      	ldrb	r3, [r1, #8]
    f018:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f01c:	f8ad 300a 	strh.w	r3, [sp, #10]
				.recv_ttl = TTL(buf->data),
    f020:	784b      	ldrb	r3, [r1, #1]
    f022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		struct bt_mesh_net_rx rx = {
    f026:	f88d 300d 	strb.w	r3, [sp, #13]
			.seq = SEQ(buf->data),
    f02a:	1c88      	adds	r0, r1, #2
		struct bt_mesh_net_rx rx = {
    f02c:	2301      	movs	r3, #1
    f02e:	f88d 300f 	strb.w	r3, [sp, #15]
			.seq = SEQ(buf->data),
    f032:	f01b ffae 	bl	2af92 <sys_get_be24>
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    f036:	6823      	ldr	r3, [r4, #0]
		struct bt_mesh_net_rx rx = {
    f038:	9004      	str	r0, [sp, #16]
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    f03a:	780a      	ldrb	r2, [r1, #0]
    f03c:	f003 0301 	and.w	r3, r3, #1
		struct bt_mesh_net_rx rx = {
    f040:	ea83 12d2 	eor.w	r2, r3, r2, lsr #7
    f044:	f89d 3014 	ldrb.w	r3, [sp, #20]
    f048:	f362 0300 	bfi	r3, r2, #0, #1
			.new_key = SUBNET_KEY_TX_IDX(sub),
    f04c:	f898 201e 	ldrb.w	r2, [r8, #30]
    f050:	1e90      	subs	r0, r2, #2
    f052:	4242      	negs	r2, r0
    f054:	4142      	adcs	r2, r0
		struct bt_mesh_net_rx rx = {
    f056:	f362 0341 	bfi	r3, r2, #1, #1
    f05a:	f88d 3014 	strb.w	r3, [sp, #20]
			.ctl = CTL(buf->data),
    f05e:	784a      	ldrb	r2, [r1, #1]
		struct bt_mesh_net_rx rx = {
    f060:	b2db      	uxtb	r3, r3
			.ctl = CTL(buf->data),
    f062:	09d2      	lsrs	r2, r2, #7
		struct bt_mesh_net_rx rx = {
    f064:	f362 03c3 	bfi	r3, r2, #3, #1
    f068:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    f06c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
		(void) bt_mesh_trans_recv(&buf->b, &rx);
    f070:	4669      	mov	r1, sp
    f072:	4638      	mov	r0, r7
		struct bt_mesh_net_rx rx = {
    f074:	f88d 3014 	strb.w	r3, [sp, #20]
		(void) bt_mesh_trans_recv(&buf->b, &rx);
    f078:	f002 faf0 	bl	1165c <bt_mesh_trans_recv>
		net_buf_unref(buf);
    f07c:	4630      	mov	r0, r6
    f07e:	f010 fe3f 	bl	1fd00 <net_buf_unref>
    f082:	e7a5      	b.n	efd0 <bt_mesh_net_local+0xc>
    f084:	20002968 	.word	0x20002968

0000f088 <net_decrypt>:
}

static bool net_decrypt(struct bt_mesh_net_rx *rx, struct net_buf_simple *in,
			struct net_buf_simple *out,
			const struct bt_mesh_net_cred *cred)
{
    f088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f08c:	461f      	mov	r7, r3
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);

	if (NID(in->data) != cred->nid) {
    f08e:	680b      	ldr	r3, [r1, #0]
{
    f090:	4614      	mov	r4, r2
	if (NID(in->data) != cred->nid) {
    f092:	781a      	ldrb	r2, [r3, #0]
{
    f094:	4680      	mov	r8, r0
	if (NID(in->data) != cred->nid) {
    f096:	7838      	ldrb	r0, [r7, #0]
    f098:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    f09c:	4298      	cmp	r0, r3
    f09e:	d002      	beq.n	f0a6 <net_decrypt+0x1e>
		return false;
    f0a0:	2000      	movs	r0, #0

	BT_DBG("src 0x%04x", rx->ctx.addr);

	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
				   proxy) == 0;
}
    f0a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    f0a6:	4d33      	ldr	r5, [pc, #204]	; (f174 <net_decrypt+0xec>)
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    f0a8:	f898 6014 	ldrb.w	r6, [r8, #20]
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    f0ac:	682b      	ldr	r3, [r5, #0]
    f0ae:	f003 0301 	and.w	r3, r3, #1
    f0b2:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    f0b6:	4632      	mov	r2, r6
    f0b8:	f363 0200 	bfi	r2, r3, #0, #1
	buf->len  = 0U;
    f0bc:	2300      	movs	r3, #0
    f0be:	f888 2014 	strb.w	r2, [r8, #20]
    f0c2:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    f0c4:	68a3      	ldr	r3, [r4, #8]
    f0c6:	6023      	str	r3, [r4, #0]
	net_buf_simple_add_mem(out, in->data, in->len);
    f0c8:	888a      	ldrh	r2, [r1, #4]
    f0ca:	6809      	ldr	r1, [r1, #0]
    f0cc:	4620      	mov	r0, r4
    f0ce:	f01e fa75 	bl	2d5bc <net_buf_simple_add_mem>
	if (bt_mesh_net_obfuscate(out->data, BT_MESH_NET_IVI_RX(rx),
    f0d2:	f898 3014 	ldrb.w	r3, [r8, #20]
    f0d6:	6829      	ldr	r1, [r5, #0]
    f0d8:	6820      	ldr	r0, [r4, #0]
    f0da:	f003 0301 	and.w	r3, r3, #1
    f0de:	f107 0211 	add.w	r2, r7, #17
    f0e2:	1ac9      	subs	r1, r1, r3
    f0e4:	f01c fa7c 	bl	2b5e0 <bt_mesh_net_obfuscate>
    f0e8:	2800      	cmp	r0, #0
    f0ea:	d1d9      	bne.n	f0a0 <net_decrypt+0x18>
	rx->ctx.addr = SRC(out->data);
    f0ec:	6823      	ldr	r3, [r4, #0]
    f0ee:	7959      	ldrb	r1, [r3, #5]
    f0f0:	799a      	ldrb	r2, [r3, #6]
    f0f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f0f6:	b212      	sxth	r2, r2
    f0f8:	b290      	uxth	r0, r2
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    f0fa:	2a00      	cmp	r2, #0
	rx->ctx.addr = SRC(out->data);
    f0fc:	f8a8 0008 	strh.w	r0, [r8, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    f100:	ddce      	ble.n	f0a0 <net_decrypt+0x18>
	if (bt_mesh_elem_find(rx->ctx.addr)) {
    f102:	f003 fe39 	bl	12d78 <bt_mesh_elem_find>
    f106:	2800      	cmp	r0, #0
    f108:	d1ca      	bne.n	f0a0 <net_decrypt+0x18>
	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(out)) {
    f10a:	f898 8014 	ldrb.w	r8, [r8, #20]
    f10e:	f018 0130 	ands.w	r1, r8, #48	; 0x30
    f112:	d11c      	bne.n	f14e <net_decrypt+0xc6>
		if (msg_cache[i].src == SRC(pdu->data) &&
    f114:	6823      	ldr	r3, [r4, #0]
    f116:	f8df b060 	ldr.w	fp, [pc, #96]	; f178 <net_decrypt+0xf0>
    f11a:	795a      	ldrb	r2, [r3, #5]
    f11c:	f893 a006 	ldrb.w	sl, [r3, #6]
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    f120:	f103 0902 	add.w	r9, r3, #2
		if (msg_cache[i].src == SRC(pdu->data) &&
    f124:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
    f128:	f83b 3021 	ldrh.w	r3, [fp, r1, lsl #2]
    f12c:	f3c3 030e 	ubfx	r3, r3, #0, #15
    f130:	4553      	cmp	r3, sl
    f132:	d109      	bne.n	f148 <net_decrypt+0xc0>
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    f134:	4648      	mov	r0, r9
    f136:	f01b ff2c 	bl	2af92 <sys_get_be24>
    f13a:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
    f13e:	f3c0 0010 	ubfx	r0, r0, #0, #17
		if (msg_cache[i].src == SRC(pdu->data) &&
    f142:	ebb0 3fd3 	cmp.w	r0, r3, lsr #15
    f146:	d0ab      	beq.n	f0a0 <net_decrypt+0x18>
    f148:	3101      	adds	r1, #1
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    f14a:	290a      	cmp	r1, #10
    f14c:	d1ec      	bne.n	f128 <net_decrypt+0xa0>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    f14e:	f006 0330 	and.w	r3, r6, #48	; 0x30
	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
    f152:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    f156:	682a      	ldr	r2, [r5, #0]
    f158:	424b      	negs	r3, r1
    f15a:	f008 0801 	and.w	r8, r8, #1
    f15e:	414b      	adcs	r3, r1
    f160:	eba2 0208 	sub.w	r2, r2, r8
    f164:	4621      	mov	r1, r4
    f166:	1c78      	adds	r0, r7, #1
    f168:	f01c fabb 	bl	2b6e2 <bt_mesh_net_decrypt>
				   proxy) == 0;
    f16c:	fab0 f080 	clz	r0, r0
    f170:	0940      	lsrs	r0, r0, #5
    f172:	e796      	b.n	f0a2 <net_decrypt+0x1a>
    f174:	20002968 	.word	0x20002968
    f178:	20003c28 	.word	0x20003c28

0000f17c <seq_set>:

BT_MESH_SETTINGS_DEFINE(iv, "IV", iv_set);

static int seq_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		   void *cb_arg)
{
    f17c:	b513      	push	{r0, r1, r4, lr}
    f17e:	4610      	mov	r0, r2
    f180:	461c      	mov	r4, r3
	struct seq_val seq;
	int err;

	if (len_rd == 0) {
    f182:	b929      	cbnz	r1, f190 <seq_set+0x14>
		BT_DBG("val (null)");

		bt_mesh.seq = 0U;
    f184:	4b10      	ldr	r3, [pc, #64]	; (f1c8 <seq_set+0x4c>)
		return 0;
    f186:	460c      	mov	r4, r1
		bt_mesh.seq = 0U;
    f188:	6059      	str	r1, [r3, #4]
	}

	BT_DBG("Sequence Number 0x%06x", bt_mesh.seq);

	return 0;
}
    f18a:	4620      	mov	r0, r4
    f18c:	b002      	add	sp, #8
    f18e:	bd10      	pop	{r4, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &seq, sizeof(seq));
    f190:	4621      	mov	r1, r4
    f192:	2303      	movs	r3, #3
    f194:	aa01      	add	r2, sp, #4
    f196:	f006 f925 	bl	153e4 <bt_mesh_settings_set>
	if (err) {
    f19a:	4604      	mov	r4, r0
    f19c:	b120      	cbz	r0, f1a8 <seq_set+0x2c>
		BT_ERR("Failed to set \'seq\'");
    f19e:	2145      	movs	r1, #69	; 0x45
    f1a0:	480a      	ldr	r0, [pc, #40]	; (f1cc <seq_set+0x50>)
    f1a2:	f018 fb96 	bl	278d2 <printk>
		return err;
    f1a6:	e7f0      	b.n	f18a <seq_set+0xe>
	return ((uint16_t)src[1] << 8) | src[0];
    f1a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    f1ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
    f1b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f1b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    f1b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
    f1bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		bt_mesh.seq--;
    f1c0:	4a01      	ldr	r2, [pc, #4]	; (f1c8 <seq_set+0x4c>)
    f1c2:	337f      	adds	r3, #127	; 0x7f
    f1c4:	6053      	str	r3, [r2, #4]
	return 0;
    f1c6:	e7e0      	b.n	f18a <seq_set+0xe>
    f1c8:	20002968 	.word	0x20002968
    f1cc:	00032ef0 	.word	0x00032ef0

0000f1d0 <net_set>:
{
    f1d0:	b570      	push	{r4, r5, r6, lr}
    f1d2:	4610      	mov	r0, r2
    f1d4:	b086      	sub	sp, #24
    f1d6:	461d      	mov	r5, r3
	if (len_rd == 0) {
    f1d8:	460c      	mov	r4, r1
    f1da:	b949      	cbnz	r1, f1f0 <net_set+0x20>
		bt_mesh_comp_unprovision();
    f1dc:	f003 fdc0 	bl	12d60 <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    f1e0:	2210      	movs	r2, #16
    f1e2:	4621      	mov	r1, r4
    f1e4:	4811      	ldr	r0, [pc, #68]	; (f22c <net_set+0x5c>)
    f1e6:	f01f f89b 	bl	2e320 <memset>
}
    f1ea:	4620      	mov	r0, r4
    f1ec:	b006      	add	sp, #24
    f1ee:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &net, sizeof(net));
    f1f0:	2312      	movs	r3, #18
    f1f2:	aa01      	add	r2, sp, #4
    f1f4:	4629      	mov	r1, r5
    f1f6:	f006 f8f5 	bl	153e4 <bt_mesh_settings_set>
	if (err) {
    f1fa:	4604      	mov	r4, r0
    f1fc:	b120      	cbz	r0, f208 <net_set+0x38>
		BT_ERR("Failed to set \'net\'");
    f1fe:	2145      	movs	r1, #69	; 0x45
    f200:	480b      	ldr	r0, [pc, #44]	; (f230 <net_set+0x60>)
    f202:	f018 fb66 	bl	278d2 <printk>
		return err;
    f206:	e7f0      	b.n	f1ea <net_set+0x1a>
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
    f208:	4d08      	ldr	r5, [pc, #32]	; (f22c <net_set+0x5c>)
    f20a:	f10d 0306 	add.w	r3, sp, #6
    f20e:	f10d 0616 	add.w	r6, sp, #22
    f212:	6818      	ldr	r0, [r3, #0]
    f214:	6859      	ldr	r1, [r3, #4]
    f216:	462a      	mov	r2, r5
    f218:	c203      	stmia	r2!, {r0, r1}
    f21a:	3308      	adds	r3, #8
    f21c:	42b3      	cmp	r3, r6
    f21e:	4615      	mov	r5, r2
    f220:	d1f7      	bne.n	f212 <net_set+0x42>
	bt_mesh_comp_provision(net.primary_addr);
    f222:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    f226:	f003 fd85 	bl	12d34 <bt_mesh_comp_provision>
	return 0;
    f22a:	e7de      	b.n	f1ea <net_set+0x1a>
    f22c:	20002b90 	.word	0x20002b90
    f230:	00032ed7 	.word	0x00032ed7

0000f234 <atomic_test_bit.constprop.12>:
    f234:	4b05      	ldr	r3, [pc, #20]	; (f24c <atomic_test_bit.constprop.12+0x18>)
    f236:	f3bf 8f5b 	dmb	ish
    f23a:	689b      	ldr	r3, [r3, #8]
    f23c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f240:	fa43 f000 	asr.w	r0, r3, r0
}
    f244:	f000 0001 	and.w	r0, r0, #1
    f248:	4770      	bx	lr
    f24a:	bf00      	nop
    f24c:	20002968 	.word	0x20002968

0000f250 <atomic_set_bit_to.constprop.13>:
	if (val) {
    f250:	4b0b      	ldr	r3, [pc, #44]	; (f280 <atomic_set_bit_to.constprop.13+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f252:	f3bf 8f5b 	dmb	ish
	if (val) {
    f256:	b150      	cbz	r0, f26e <atomic_set_bit_to.constprop.13+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f258:	e853 2f00 	ldrex	r2, [r3]
    f25c:	f042 0204 	orr.w	r2, r2, #4
    f260:	e843 2100 	strex	r1, r2, [r3]
    f264:	2900      	cmp	r1, #0
    f266:	d1f7      	bne.n	f258 <atomic_set_bit_to.constprop.13+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f268:	f3bf 8f5b 	dmb	ish
	}
}
    f26c:	4770      	bx	lr
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f26e:	e853 2f00 	ldrex	r2, [r3]
    f272:	f022 0204 	bic.w	r2, r2, #4
    f276:	e843 2100 	strex	r1, r2, [r3]
    f27a:	2900      	cmp	r1, #0
    f27c:	d0f4      	beq.n	f268 <atomic_set_bit_to.constprop.13+0x18>
    f27e:	e7f6      	b.n	f26e <atomic_set_bit_to.constprop.13+0x1e>
    f280:	20002970 	.word	0x20002970

0000f284 <iv_set>:
{
    f284:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f286:	4610      	mov	r0, r2
    f288:	461c      	mov	r4, r3
	if (len_rd == 0) {
    f28a:	b991      	cbnz	r1, f2b2 <iv_set+0x2e>
		bt_mesh.iv_index = 0U;
    f28c:	4b17      	ldr	r3, [pc, #92]	; (f2ec <iv_set+0x68>)
    f28e:	f843 1b08 	str.w	r1, [r3], #8
    f292:	f3bf 8f5b 	dmb	ish
    f296:	e853 2f00 	ldrex	r2, [r3]
    f29a:	f022 0204 	bic.w	r2, r2, #4
    f29e:	e843 2000 	strex	r0, r2, [r3]
    f2a2:	2800      	cmp	r0, #0
    f2a4:	d1f7      	bne.n	f296 <iv_set+0x12>
    f2a6:	f3bf 8f5b 	dmb	ish
    f2aa:	460c      	mov	r4, r1
}
    f2ac:	4620      	mov	r0, r4
    f2ae:	b003      	add	sp, #12
    f2b0:	bd30      	pop	{r4, r5, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &iv, sizeof(iv));
    f2b2:	4621      	mov	r1, r4
    f2b4:	2305      	movs	r3, #5
    f2b6:	466a      	mov	r2, sp
    f2b8:	f006 f894 	bl	153e4 <bt_mesh_settings_set>
	if (err) {
    f2bc:	4604      	mov	r4, r0
    f2be:	b120      	cbz	r0, f2ca <iv_set+0x46>
		BT_ERR("Failed to set \'iv\'");
    f2c0:	2145      	movs	r1, #69	; 0x45
    f2c2:	480b      	ldr	r0, [pc, #44]	; (f2f0 <iv_set+0x6c>)
    f2c4:	f018 fb05 	bl	278d2 <printk>
		return err;
    f2c8:	e7f0      	b.n	f2ac <iv_set+0x28>
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    f2ca:	f89d 0004 	ldrb.w	r0, [sp, #4]
	bt_mesh.iv_index = iv.iv_index;
    f2ce:	4d07      	ldr	r5, [pc, #28]	; (f2ec <iv_set+0x68>)
    f2d0:	9b00      	ldr	r3, [sp, #0]
    f2d2:	602b      	str	r3, [r5, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    f2d4:	f000 0001 	and.w	r0, r0, #1
    f2d8:	f7ff ffba 	bl	f250 <atomic_set_bit_to.constprop.13>
	bt_mesh.ivu_duration = iv.iv_duration;
    f2dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    f2e0:	f3c3 0346 	ubfx	r3, r3, #1, #7
    f2e4:	f885 31f0 	strb.w	r3, [r5, #496]	; 0x1f0
	return 0;
    f2e8:	e7e0      	b.n	f2ac <iv_set+0x28>
    f2ea:	bf00      	nop
    f2ec:	20002968 	.word	0x20002968
    f2f0:	00032e73 	.word	0x00032e73

0000f2f4 <bt_mesh_net_create>:
{
    f2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2f8:	460d      	mov	r5, r1
    f2fa:	4698      	mov	r8, r3
	if (BT_MESH_KEY_REFRESH(flags)) {
    f2fc:	f015 0301 	ands.w	r3, r5, #1
{
    f300:	4611      	mov	r1, r2
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_PHASE_2, NULL, key);
    f302:	bf1d      	ittte	ne
    f304:	4613      	movne	r3, r2
    f306:	2102      	movne	r1, #2
    f308:	2200      	movne	r2, #0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    f30a:	4619      	moveq	r1, r3
{
    f30c:	4607      	mov	r7, r0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    f30e:	f000 fe95 	bl	1003c <bt_mesh_subnet_set>
    f312:	4604      	mov	r4, r0
	if (err) {
    f314:	b130      	cbz	r0, f324 <bt_mesh_net_create+0x30>
		BT_ERR("Failed creating subnet");
    f316:	2145      	movs	r1, #69	; 0x45
    f318:	4810      	ldr	r0, [pc, #64]	; (f35c <bt_mesh_net_create+0x68>)
    f31a:	f018 fada 	bl	278d2 <printk>
}
    f31e:	4620      	mov	r0, r4
    f320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    f324:	4601      	mov	r1, r0
    f326:	2228      	movs	r2, #40	; 0x28
    f328:	480d      	ldr	r0, [pc, #52]	; (f360 <bt_mesh_net_create+0x6c>)
	bt_mesh.iv_index = iv_index;
    f32a:	4e0e      	ldr	r6, [pc, #56]	; (f364 <bt_mesh_net_create+0x70>)
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    f32c:	f01e fff8 	bl	2e320 <memset>
	msg_cache_next = 0U;
    f330:	4b0d      	ldr	r3, [pc, #52]	; (f368 <bt_mesh_net_create+0x74>)
	bt_mesh.iv_index = iv_index;
    f332:	f8c6 8000 	str.w	r8, [r6]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    f336:	f3c5 0040 	ubfx	r0, r5, #1, #1
	msg_cache_next = 0U;
    f33a:	801c      	strh	r4, [r3, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    f33c:	f7ff ff88 	bl	f250 <atomic_set_bit_to.constprop.13>
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    f340:	2360      	movs	r3, #96	; 0x60
		bt_mesh_subnet_store(idx);
    f342:	4638      	mov	r0, r7
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    f344:	f886 31f0 	strb.w	r3, [r6, #496]	; 0x1f0
		bt_mesh_subnet_store(idx);
    f348:	f01b fe71 	bl	2b02e <bt_mesh_subnet_store>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    f34c:	2004      	movs	r0, #4
    f34e:	f006 f86b 	bl	15428 <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    f352:	2005      	movs	r0, #5
    f354:	f006 f868 	bl	15428 <bt_mesh_settings_store_schedule>
    f358:	e7e1      	b.n	f31e <bt_mesh_net_create+0x2a>
    f35a:	bf00      	nop
    f35c:	00032b56 	.word	0x00032b56
    f360:	20003c28 	.word	0x20003c28
    f364:	20002968 	.word	0x20002968
    f368:	200056bc 	.word	0x200056bc

0000f36c <bt_mesh_net_iv_update>:
{
    f36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f36e:	4606      	mov	r6, r0
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    f370:	2002      	movs	r0, #2
{
    f372:	460c      	mov	r4, r1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    f374:	f7ff ff5e 	bl	f234 <atomic_test_bit.constprop.12>
    f378:	4d3d      	ldr	r5, [pc, #244]	; (f470 <bt_mesh_net_iv_update+0x104>)
    f37a:	4607      	mov	r7, r0
		if (iv_index != bt_mesh.iv_index) {
    f37c:	682b      	ldr	r3, [r5, #0]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    f37e:	b160      	cbz	r0, f39a <bt_mesh_net_iv_update+0x2e>
		if (iv_index != bt_mesh.iv_index) {
    f380:	42b3      	cmp	r3, r6
    f382:	d005      	beq.n	f390 <bt_mesh_net_iv_update+0x24>
			BT_WARN("IV Index mismatch: 0x%08x != 0x%08x",
    f384:	483b      	ldr	r0, [pc, #236]	; (f474 <bt_mesh_net_iv_update+0x108>)
    f386:	4632      	mov	r2, r6
    f388:	2157      	movs	r1, #87	; 0x57
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    f38a:	f018 faa2 	bl	278d2 <printk>
    f38e:	e001      	b.n	f394 <bt_mesh_net_iv_update+0x28>
		if (iv_update) {
    f390:	2900      	cmp	r1, #0
    f392:	d048      	beq.n	f426 <bt_mesh_net_iv_update+0xba>
			return false;
    f394:	2400      	movs	r4, #0
}
    f396:	4620      	mov	r0, r4
    f398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_index == bt_mesh.iv_index) {
    f39a:	42b3      	cmp	r3, r6
    f39c:	d066      	beq.n	f46c <bt_mesh_net_iv_update+0x100>
		if (iv_index < bt_mesh.iv_index ||
    f39e:	d803      	bhi.n	f3a8 <bt_mesh_net_iv_update+0x3c>
		    iv_index > bt_mesh.iv_index + 42) {
    f3a0:	f103 022a 	add.w	r2, r3, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    f3a4:	42b2      	cmp	r2, r6
    f3a6:	d203      	bcs.n	f3b0 <bt_mesh_net_iv_update+0x44>
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    f3a8:	4632      	mov	r2, r6
    f3aa:	2145      	movs	r1, #69	; 0x45
    f3ac:	4832      	ldr	r0, [pc, #200]	; (f478 <bt_mesh_net_iv_update+0x10c>)
    f3ae:	e7ec      	b.n	f38a <bt_mesh_net_iv_update+0x1e>
		if (iv_index > bt_mesh.iv_index + 1) {
    f3b0:	3301      	adds	r3, #1
    f3b2:	42b3      	cmp	r3, r6
    f3b4:	d22e      	bcs.n	f414 <bt_mesh_net_iv_update+0xa8>
			BT_WARN("Performing IV Index Recovery");
    f3b6:	2157      	movs	r1, #87	; 0x57
    f3b8:	4830      	ldr	r0, [pc, #192]	; (f47c <bt_mesh_net_iv_update+0x110>)
    f3ba:	f018 fa8a 	bl	278d2 <printk>
			bt_mesh_rpl_clear();
    f3be:	f01c f880 	bl	2b4c2 <bt_mesh_rpl_clear>
			bt_mesh.seq = 0U;
    f3c2:	e9c5 6700 	strd	r6, r7, [r5]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
    f3c6:	4620      	mov	r0, r4
    f3c8:	f7ff ff42 	bl	f250 <atomic_set_bit_to.constprop.13>
	bt_mesh.ivu_duration = 0U;
    f3cc:	2300      	movs	r3, #0
    f3ce:	f885 31f0 	strb.w	r3, [r5, #496]	; 0x1f0
	if (iv_update) {
    f3d2:	2c00      	cmp	r4, #0
    f3d4:	d048      	beq.n	f468 <bt_mesh_net_iv_update+0xfc>
		bt_mesh.iv_index = iv_index;
    f3d6:	602e      	str	r6, [r5, #0]
		bt_mesh_rpl_reset();
    f3d8:	f002 fd16 	bl	11e08 <bt_mesh_rpl_reset>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    f3dc:	4a28      	ldr	r2, [pc, #160]	; (f480 <bt_mesh_net_iv_update+0x114>)
    f3de:	4929      	ldr	r1, [pc, #164]	; (f484 <bt_mesh_net_iv_update+0x118>)
    f3e0:	4829      	ldr	r0, [pc, #164]	; (f488 <bt_mesh_net_iv_update+0x11c>)
    f3e2:	2300      	movs	r3, #0
    f3e4:	f016 f858 	bl	25498 <k_delayed_work_submit_to_queue>
		bt_mesh_friend_sec_update(BT_MESH_KEY_ANY);
    f3e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f3ec:	f006 fcfc 	bl	15de8 <bt_mesh_friend_sec_update>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    f3f0:	f01b fd6c 	bl	2aecc <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    f3f4:	2801      	cmp	r0, #1
    f3f6:	d102      	bne.n	f3fe <bt_mesh_net_iv_update+0x92>
		bt_mesh_proxy_beacon_send(NULL);
    f3f8:	2000      	movs	r0, #0
    f3fa:	f008 ff8f 	bl	1831c <bt_mesh_proxy_beacon_send>
	bt_mesh_subnet_foreach(bt_mesh_beacon_update);
    f3fe:	4823      	ldr	r0, [pc, #140]	; (f48c <bt_mesh_net_iv_update+0x120>)
    f400:	f000 fe94 	bl	1012c <bt_mesh_subnet_foreach>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    f404:	2004      	movs	r0, #4
    f406:	f006 f80f 	bl	15428 <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    f40a:	2005      	movs	r0, #5
    f40c:	f006 f80c 	bl	15428 <bt_mesh_settings_store_schedule>
	return true;
    f410:	2401      	movs	r4, #1
    f412:	e7c0      	b.n	f396 <bt_mesh_net_iv_update+0x2a>
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
    f414:	d105      	bne.n	f422 <bt_mesh_net_iv_update+0xb6>
    f416:	b931      	cbnz	r1, f426 <bt_mesh_net_iv_update+0xba>
			BT_WARN("Ignoring new index in normal mode");
    f418:	2157      	movs	r1, #87	; 0x57
    f41a:	481d      	ldr	r0, [pc, #116]	; (f490 <bt_mesh_net_iv_update+0x124>)
    f41c:	f018 fa59 	bl	278d2 <printk>
			return false;
    f420:	e7b9      	b.n	f396 <bt_mesh_net_iv_update+0x2a>
		if (!iv_update) {
    f422:	2900      	cmp	r1, #0
    f424:	d0b7      	beq.n	f396 <bt_mesh_net_iv_update+0x2a>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    f426:	f895 31f0 	ldrb.w	r3, [r5, #496]	; 0x1f0
    f42a:	2b5f      	cmp	r3, #95	; 0x5f
    f42c:	d804      	bhi.n	f438 <bt_mesh_net_iv_update+0xcc>
			BT_WARN("IV Update before minimum duration");
    f42e:	2157      	movs	r1, #87	; 0x57
    f430:	4818      	ldr	r0, [pc, #96]	; (f494 <bt_mesh_net_iv_update+0x128>)
    f432:	f018 fa4e 	bl	278d2 <printk>
			return false;
    f436:	e7ad      	b.n	f394 <bt_mesh_net_iv_update+0x28>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    f438:	2c00      	cmp	r4, #0
    f43a:	d1c4      	bne.n	f3c6 <bt_mesh_net_iv_update+0x5a>
    f43c:	f001 fea2 	bl	11184 <bt_mesh_tx_in_progress>
    f440:	2800      	cmp	r0, #0
    f442:	d0c0      	beq.n	f3c6 <bt_mesh_net_iv_update+0x5a>
		BT_WARN("IV Update deferred because of pending transfer");
    f444:	2157      	movs	r1, #87	; 0x57
    f446:	4814      	ldr	r0, [pc, #80]	; (f498 <bt_mesh_net_iv_update+0x12c>)
    f448:	f018 fa43 	bl	278d2 <printk>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f44c:	f3bf 8f5b 	dmb	ish
    f450:	4b12      	ldr	r3, [pc, #72]	; (f49c <bt_mesh_net_iv_update+0x130>)
    f452:	e853 2f00 	ldrex	r2, [r3]
    f456:	f042 0220 	orr.w	r2, r2, #32
    f45a:	e843 2100 	strex	r1, r2, [r3]
    f45e:	2900      	cmp	r1, #0
    f460:	d1f7      	bne.n	f452 <bt_mesh_net_iv_update+0xe6>
    f462:	f3bf 8f5b 	dmb	ish
    f466:	e796      	b.n	f396 <bt_mesh_net_iv_update+0x2a>
		bt_mesh.seq = 0U;
    f468:	606c      	str	r4, [r5, #4]
    f46a:	e7b7      	b.n	f3dc <bt_mesh_net_iv_update+0x70>
			return false;
    f46c:	4604      	mov	r4, r0
    f46e:	e792      	b.n	f396 <bt_mesh_net_iv_update+0x2a>
    f470:	20002968 	.word	0x20002968
    f474:	00032c0b 	.word	0x00032c0b
    f478:	00032c34 	.word	0x00032c34
    f47c:	00032c60 	.word	0x00032c60
    f480:	a8c00000 	.word	0xa8c00000
    f484:	20002b60 	.word	0x20002b60
    f488:	20003028 	.word	0x20003028
    f48c:	0000ed3d 	.word	0x0000ed3d
    f490:	00032c82 	.word	0x00032c82
    f494:	00032ca9 	.word	0x00032ca9
    f498:	00032cd0 	.word	0x00032cd0
    f49c:	20002970 	.word	0x20002970

0000f4a0 <ivu_refresh>:
{
    f4a0:	b510      	push	{r4, lr}
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    f4a2:	4c15      	ldr	r4, [pc, #84]	; (f4f8 <ivu_refresh+0x58>)
    f4a4:	f894 31f0 	ldrb.w	r3, [r4, #496]	; 0x1f0
    f4a8:	3318      	adds	r3, #24
    f4aa:	2bff      	cmp	r3, #255	; 0xff
    f4ac:	461a      	mov	r2, r3
    f4ae:	bfa8      	it	ge
    f4b0:	22ff      	movge	r2, #255	; 0xff
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    f4b2:	2b5f      	cmp	r3, #95	; 0x5f
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    f4b4:	f884 21f0 	strb.w	r2, [r4, #496]	; 0x1f0
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    f4b8:	dc0b      	bgt.n	f4d2 <ivu_refresh+0x32>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    f4ba:	2004      	movs	r0, #4
    f4bc:	f005 ffb4 	bl	15428 <bt_mesh_settings_store_schedule>
    f4c0:	f504 71fc 	add.w	r1, r4, #504	; 0x1f8
    f4c4:	4a0d      	ldr	r2, [pc, #52]	; (f4fc <ivu_refresh+0x5c>)
    f4c6:	480e      	ldr	r0, [pc, #56]	; (f500 <ivu_refresh+0x60>)
    f4c8:	2300      	movs	r3, #0
}
    f4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4ce:	f015 bfe3 	b.w	25498 <k_delayed_work_submit_to_queue>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    f4d2:	2002      	movs	r0, #2
    f4d4:	f7ff feae 	bl	f234 <atomic_test_bit.constprop.12>
    f4d8:	b140      	cbz	r0, f4ec <ivu_refresh+0x4c>
		bt_mesh_beacon_ivu_initiator(true);
    f4da:	2001      	movs	r0, #1
    f4dc:	f7ff fc64 	bl	eda8 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    f4e0:	6820      	ldr	r0, [r4, #0]
    f4e2:	2100      	movs	r1, #0
}
    f4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    f4e8:	f7ff bf40 	b.w	f36c <bt_mesh_net_iv_update>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    f4ec:	2004      	movs	r0, #4
}
    f4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    f4f2:	f005 bf99 	b.w	15428 <bt_mesh_settings_store_schedule>
    f4f6:	bf00      	nop
    f4f8:	20002968 	.word	0x20002968
    f4fc:	a8c00000 	.word	0xa8c00000
    f500:	20003028 	.word	0x20003028

0000f504 <bt_mesh_next_seq>:
{
    f504:	b538      	push	{r3, r4, r5, lr}
	uint32_t seq = bt_mesh.seq++;
    f506:	4c0f      	ldr	r4, [pc, #60]	; (f544 <bt_mesh_next_seq+0x40>)
    f508:	6865      	ldr	r5, [r4, #4]
    f50a:	1c6a      	adds	r2, r5, #1
	if (CONFIG_BT_MESH_SEQ_STORE_RATE &&
    f50c:	0653      	lsls	r3, r2, #25
	uint32_t seq = bt_mesh.seq++;
    f50e:	6062      	str	r2, [r4, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE &&
    f510:	d102      	bne.n	f518 <bt_mesh_next_seq+0x14>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    f512:	2005      	movs	r0, #5
    f514:	f005 ff88 	bl	15428 <bt_mesh_settings_store_schedule>
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    f518:	2002      	movs	r0, #2
    f51a:	f7ff fe8b 	bl	f234 <atomic_test_bit.constprop.12>
    f51e:	b970      	cbnz	r0, f53e <bt_mesh_next_seq+0x3a>
    f520:	6862      	ldr	r2, [r4, #4]
    f522:	4b09      	ldr	r3, [pc, #36]	; (f548 <bt_mesh_next_seq+0x44>)
    f524:	429a      	cmp	r2, r3
    f526:	d90a      	bls.n	f53e <bt_mesh_next_seq+0x3a>
	    bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY)) {
    f528:	f01b fe4d 	bl	2b1c6 <bt_mesh_subnet_get>
	    bt_mesh.seq > IV_UPDATE_SEQ_LIMIT &&
    f52c:	b138      	cbz	r0, f53e <bt_mesh_next_seq+0x3a>
		bt_mesh_beacon_ivu_initiator(true);
    f52e:	2001      	movs	r0, #1
    f530:	f7ff fc3a 	bl	eda8 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    f534:	6820      	ldr	r0, [r4, #0]
    f536:	2101      	movs	r1, #1
    f538:	4408      	add	r0, r1
    f53a:	f7ff ff17 	bl	f36c <bt_mesh_net_iv_update>
}
    f53e:	4628      	mov	r0, r5
    f540:	bd38      	pop	{r3, r4, r5, pc}
    f542:	bf00      	nop
    f544:	20002968 	.word	0x20002968
    f548:	007a1200 	.word	0x007a1200

0000f54c <net_header_encode>:
{
    f54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    f54e:	6843      	ldr	r3, [r0, #4]
    f550:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    f552:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f556:	429f      	cmp	r7, r3
{
    f558:	4605      	mov	r5, r0
    f55a:	460e      	mov	r6, r1
    f55c:	4614      	mov	r4, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    f55e:	d10b      	bne.n	f578 <net_header_encode+0x2c>
    f560:	4610      	mov	r0, r2
    f562:	f01e f823 	bl	2d5ac <net_buf_simple_tailroom>
    f566:	2807      	cmp	r0, #7
    f568:	d806      	bhi.n	f578 <net_header_encode+0x2c>
		BT_ERR("Insufficient MIC space for CTL PDU");
    f56a:	481b      	ldr	r0, [pc, #108]	; (f5d8 <net_header_encode+0x8c>)
    f56c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Insufficient MIC space for PDU");
    f56e:	f018 f9b0 	bl	278d2 <printk>
		return -EINVAL;
    f572:	f06f 0015 	mvn.w	r0, #21
}
    f576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (net_buf_simple_tailroom(buf) < 4) {
    f578:	4620      	mov	r0, r4
    f57a:	f01e f817 	bl	2d5ac <net_buf_simple_tailroom>
    f57e:	2803      	cmp	r0, #3
    f580:	d802      	bhi.n	f588 <net_header_encode+0x3c>
		BT_ERR("Insufficient MIC space for PDU");
    f582:	2145      	movs	r1, #69	; 0x45
    f584:	4815      	ldr	r0, [pc, #84]	; (f5dc <net_header_encode+0x90>)
    f586:	e7f2      	b.n	f56e <net_header_encode+0x22>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    f588:	686b      	ldr	r3, [r5, #4]
    f58a:	4620      	mov	r0, r4
    f58c:	8899      	ldrh	r1, [r3, #4]
    f58e:	f01d ffb3 	bl	2d4f8 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    f592:	8929      	ldrh	r1, [r5, #8]
    f594:	4620      	mov	r0, r4
    f596:	f01d ffaf 	bl	2d4f8 <net_buf_simple_push_be16>
	net_buf_simple_push_be24(buf, bt_mesh_next_seq());
    f59a:	f7ff ffb3 	bl	f504 <bt_mesh_next_seq>
    f59e:	4601      	mov	r1, r0
    f5a0:	4620      	mov	r0, r4
    f5a2:	f01d ffb9 	bl	2d518 <net_buf_simple_push_be24>
	if (ctl) {
    f5a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f5aa:	429f      	cmp	r7, r3
    f5ac:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    f5ae:	7ad9      	ldrb	r1, [r3, #11]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    f5b0:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    f5b2:	bf08      	it	eq
    f5b4:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    f5b8:	f01d ffa7 	bl	2d50a <net_buf_simple_push_u8>
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    f5bc:	4b08      	ldr	r3, [pc, #32]	; (f5e0 <net_header_encode+0x94>)
    f5be:	2002      	movs	r0, #2
    f5c0:	7819      	ldrb	r1, [r3, #0]
    f5c2:	f7ff fe37 	bl	f234 <atomic_test_bit.constprop.12>
    f5c6:	1a09      	subs	r1, r1, r0
    f5c8:	ea46 11c1 	orr.w	r1, r6, r1, lsl #7
    f5cc:	4620      	mov	r0, r4
    f5ce:	b2c9      	uxtb	r1, r1
    f5d0:	f01d ff9b 	bl	2d50a <net_buf_simple_push_u8>
	return 0;
    f5d4:	2000      	movs	r0, #0
    f5d6:	e7ce      	b.n	f576 <net_header_encode+0x2a>
    f5d8:	00032e8b 	.word	0x00032e8b
    f5dc:	00032eb3 	.word	0x00032eb3
    f5e0:	20002968 	.word	0x20002968

0000f5e4 <bt_mesh_net_encode>:
{
    f5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5e8:	4617      	mov	r7, r2
	tx->friend_cred = 0U;
    f5ea:	7ac2      	ldrb	r2, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    f5ec:	6805      	ldr	r5, [r0, #0]
	tx->friend_cred = 0U;
    f5ee:	f36f 0200 	bfc	r2, #0, #1
    f5f2:	72c2      	strb	r2, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    f5f4:	7fac      	ldrb	r4, [r5, #30]
    f5f6:	1ea3      	subs	r3, r4, #2
{
    f5f8:	460e      	mov	r6, r1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    f5fa:	4259      	negs	r1, r3
    f5fc:	4159      	adcs	r1, r3
	err = net_header_encode(tx, cred->nid, buf);
    f5fe:	245a      	movs	r4, #90	; 0x5a
    f600:	434c      	muls	r4, r1
    f602:	192b      	adds	r3, r5, r4
    f604:	4632      	mov	r2, r6
    f606:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    f60a:	f7ff ff9f 	bl	f54c <net_header_encode>
	if (err) {
    f60e:	b970      	cbnz	r0, f62e <bt_mesh_net_encode+0x4a>
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    f610:	4b08      	ldr	r3, [pc, #32]	; (f634 <bt_mesh_net_encode+0x50>)
    f612:	2002      	movs	r0, #2
    f614:	681a      	ldr	r2, [r3, #0]
    f616:	f7ff fe0d 	bl	f234 <atomic_test_bit.constprop.12>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    f61a:	f104 013d 	add.w	r1, r4, #61	; 0x3d
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    f61e:	463b      	mov	r3, r7
    f620:	1a12      	subs	r2, r2, r0
    f622:	4429      	add	r1, r5
    f624:	4630      	mov	r0, r6
}
    f626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    f62a:	f01b bccc 	b.w	2afc6 <net_encrypt>
}
    f62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f632:	bf00      	nop
    f634:	20002968 	.word	0x20002968

0000f638 <bt_mesh_net_send>:
{
    f638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f63c:	4699      	mov	r9, r3
	tx->friend_cred = 0U;
    f63e:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    f640:	f8d0 b000 	ldr.w	fp, [r0]
	tx->friend_cred = 0U;
    f644:	f36f 0300 	bfc	r3, #0, #1
    f648:	72c3      	strb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    f64a:	f89b 701e 	ldrb.w	r7, [fp, #30]
    f64e:	1ebb      	subs	r3, r7, #2
    f650:	425f      	negs	r7, r3
    f652:	415f      	adcs	r7, r3
	err = net_header_encode(tx, cred->nid, &buf->b);
    f654:	235a      	movs	r3, #90	; 0x5a
    f656:	fb03 b307 	mla	r3, r3, r7, fp
    f65a:	f101 0a08 	add.w	sl, r1, #8
{
    f65e:	460e      	mov	r6, r1
    f660:	4690      	mov	r8, r2
	err = net_header_encode(tx, cred->nid, &buf->b);
    f662:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    f666:	4652      	mov	r2, sl
{
    f668:	4604      	mov	r4, r0
	err = net_header_encode(tx, cred->nid, &buf->b);
    f66a:	f7ff ff6f 	bl	f54c <net_header_encode>
	if (err) {
    f66e:	4605      	mov	r5, r0
    f670:	2800      	cmp	r0, #0
    f672:	d178      	bne.n	f766 <bt_mesh_net_send+0x12e>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    f674:	6863      	ldr	r3, [r4, #4]
    f676:	8898      	ldrh	r0, [r3, #4]
    f678:	f01b fc48 	bl	2af0c <bt_mesh_fixed_group_match>
    f67c:	2800      	cmp	r0, #0
    f67e:	d03c      	beq.n	f6fa <bt_mesh_net_send+0xc2>
		err = loopback(tx, buf->data, buf->len);
    f680:	89b3      	ldrh	r3, [r6, #12]
    f682:	68b1      	ldr	r1, [r6, #8]
    f684:	9300      	str	r3, [sp, #0]
	return net_buf_alloc_fixed(pool, timeout);
    f686:	2200      	movs	r2, #0
    f688:	2300      	movs	r3, #0
    f68a:	483a      	ldr	r0, [pc, #232]	; (f774 <bt_mesh_net_send+0x13c>)
    f68c:	9101      	str	r1, [sp, #4]
    f68e:	f01d ff21 	bl	2d4d4 <net_buf_alloc_fixed>
	if (!buf) {
    f692:	9901      	ldr	r1, [sp, #4]
    f694:	4603      	mov	r3, r0
    f696:	2800      	cmp	r0, #0
    f698:	d13c      	bne.n	f714 <bt_mesh_net_send+0xdc>
		BT_WARN("Unable to allocate loopback");
    f69a:	2157      	movs	r1, #87	; 0x57
    f69c:	4836      	ldr	r0, [pc, #216]	; (f778 <bt_mesh_net_send+0x140>)
    f69e:	f018 f918 	bl	278d2 <printk>
		return -ENOMEM;
    f6a2:	f06f 050b 	mvn.w	r5, #11
		if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) ||
    f6a6:	6863      	ldr	r3, [r4, #4]
    f6a8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    f6ac:	2a00      	cmp	r2, #0
    f6ae:	dc55      	bgt.n	f75c <bt_mesh_net_send+0x124>
    f6b0:	7adb      	ldrb	r3, [r3, #11]
    f6b2:	2b01      	cmp	r3, #1
    f6b4:	d052      	beq.n	f75c <bt_mesh_net_send+0x124>
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    f6b6:	4b31      	ldr	r3, [pc, #196]	; (f77c <bt_mesh_net_send+0x144>)
    f6b8:	2002      	movs	r0, #2
    f6ba:	681a      	ldr	r2, [r3, #0]
    f6bc:	f7ff fdba 	bl	f234 <atomic_test_bit.constprop.12>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    f6c0:	215a      	movs	r1, #90	; 0x5a
    f6c2:	fb01 b107 	mla	r1, r1, r7, fp
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    f6c6:	1a12      	subs	r2, r2, r0
    f6c8:	2300      	movs	r3, #0
    f6ca:	313d      	adds	r1, #61	; 0x3d
    f6cc:	4650      	mov	r0, sl
    f6ce:	f01b fc7a 	bl	2afc6 <net_encrypt>
	if (err) {
    f6d2:	4605      	mov	r5, r0
    f6d4:	2800      	cmp	r0, #0
    f6d6:	d146      	bne.n	f766 <bt_mesh_net_send+0x12e>
	    bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    f6d8:	6863      	ldr	r3, [r4, #4]
    f6da:	4650      	mov	r0, sl
    f6dc:	8899      	ldrh	r1, [r3, #4]
    f6de:	f009 f933 	bl	18948 <bt_mesh_proxy_relay>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    f6e2:	b120      	cbz	r0, f6ee <bt_mesh_net_send+0xb6>
	    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    f6e4:	6863      	ldr	r3, [r4, #4]
	    bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    f6e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    f6ea:	2b00      	cmp	r3, #0
    f6ec:	dc37      	bgt.n	f75e <bt_mesh_net_send+0x126>
	bt_mesh_adv_send(buf, cb, cb_data);
    f6ee:	464a      	mov	r2, r9
    f6f0:	4641      	mov	r1, r8
    f6f2:	4630      	mov	r0, r6
    f6f4:	f7ff f970 	bl	e9d8 <bt_mesh_adv_send>
    f6f8:	e035      	b.n	f766 <bt_mesh_net_send+0x12e>
	    bt_mesh_elem_find(tx->ctx->addr)) {
    f6fa:	6863      	ldr	r3, [r4, #4]
    f6fc:	8898      	ldrh	r0, [r3, #4]
    f6fe:	f003 fb3b 	bl	12d78 <bt_mesh_elem_find>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    f702:	2800      	cmp	r0, #0
    f704:	d1bc      	bne.n	f680 <bt_mesh_net_send+0x48>
	if (tx->ctx->send_ttl == 1U) {
    f706:	6863      	ldr	r3, [r4, #4]
    f708:	7adb      	ldrb	r3, [r3, #11]
    f70a:	2b01      	cmp	r3, #1
    f70c:	d1d3      	bne.n	f6b6 <bt_mesh_net_send+0x7e>
		err = -EINVAL;
    f70e:	f06f 0515 	mvn.w	r5, #21
    f712:	e028      	b.n	f766 <bt_mesh_net_send+0x12e>
	LOOPBACK_BUF_SUB(buf) = tx->sub;
    f714:	6822      	ldr	r2, [r4, #0]
    f716:	6142      	str	r2, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f718:	9a00      	ldr	r2, [sp, #0]
    f71a:	9300      	str	r3, [sp, #0]
    f71c:	3008      	adds	r0, #8
    f71e:	f01d ff4d 	bl	2d5bc <net_buf_simple_add_mem>
	net_buf_slist_put(&bt_mesh.local_queue, buf);
    f722:	9b00      	ldr	r3, [sp, #0]
    f724:	4816      	ldr	r0, [pc, #88]	; (f780 <bt_mesh_net_send+0x148>)
    f726:	4619      	mov	r1, r3
    f728:	f010 fa24 	bl	1fb74 <net_buf_slist_put>
    f72c:	f3bf 8f5b 	dmb	ish
    f730:	4914      	ldr	r1, [pc, #80]	; (f784 <bt_mesh_net_send+0x14c>)
    f732:	e851 3f00 	ldrex	r3, [r1]
    f736:	f043 0201 	orr.w	r2, r3, #1
    f73a:	e841 2000 	strex	r0, r2, [r1]
    f73e:	2800      	cmp	r0, #0
    f740:	d1f7      	bne.n	f732 <bt_mesh_net_send+0xfa>
    f742:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    f746:	f013 0301 	ands.w	r3, r3, #1
    f74a:	d1ac      	bne.n	f6a6 <bt_mesh_net_send+0x6e>
		k_queue_append(&work_q->queue, work);
    f74c:	3908      	subs	r1, #8
    f74e:	480e      	ldr	r0, [pc, #56]	; (f788 <bt_mesh_net_send+0x150>)
    f750:	9300      	str	r3, [sp, #0]
    f752:	f01e fc1d 	bl	2df90 <k_queue_append>
	return 0;
    f756:	9b00      	ldr	r3, [sp, #0]
    f758:	461d      	mov	r5, r3
    f75a:	e7a4      	b.n	f6a6 <bt_mesh_net_send+0x6e>
			if (!err) {
    f75c:	b91d      	cbnz	r5, f766 <bt_mesh_net_send+0x12e>
		send_cb_finalize(cb, cb_data);
    f75e:	4649      	mov	r1, r9
    f760:	4640      	mov	r0, r8
    f762:	f01b fc1e 	bl	2afa2 <send_cb_finalize>
	net_buf_unref(buf);
    f766:	4630      	mov	r0, r6
    f768:	f010 faca 	bl	1fd00 <net_buf_unref>
}
    f76c:	4628      	mov	r0, r5
    f76e:	b003      	add	sp, #12
    f770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f774:	20002078 	.word	0x20002078
    f778:	00032e52 	.word	0x00032e52
    f77c:	20002968 	.word	0x20002968
    f780:	20002980 	.word	0x20002980
    f784:	2000297c 	.word	0x2000297c
    f788:	20003028 	.word	0x20003028

0000f78c <bt_mesh_net_loopback_clear>:
{
    f78c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	list->head = NULL;
    f78e:	2300      	movs	r3, #0
	list->tail = NULL;
    f790:	e9cd 3300 	strd	r3, r3, [sp]
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    f794:	4c0e      	ldr	r4, [pc, #56]	; (f7d0 <bt_mesh_net_loopback_clear+0x44>)
{
    f796:	4605      	mov	r5, r0
		if (net_idx == BT_MESH_KEY_ANY || net_idx == sub->net_idx) {
    f798:	f64f 76ff 	movw	r6, #65535	; 0xffff
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    f79c:	480c      	ldr	r0, [pc, #48]	; (f7d0 <bt_mesh_net_loopback_clear+0x44>)
    f79e:	f010 fa25 	bl	1fbec <net_buf_slist_get>
    f7a2:	b930      	cbnz	r0, f7b2 <bt_mesh_net_loopback_clear+0x26>
	bt_mesh.local_queue = new_list;
    f7a4:	ab02      	add	r3, sp, #8
    f7a6:	e913 0003 	ldmdb	r3, {r0, r1}
    f7aa:	e884 0003 	stmia.w	r4, {r0, r1}
}
    f7ae:	b002      	add	sp, #8
    f7b0:	bd70      	pop	{r4, r5, r6, pc}
		if (net_idx == BT_MESH_KEY_ANY || net_idx == sub->net_idx) {
    f7b2:	42b5      	cmp	r5, r6
    f7b4:	d003      	beq.n	f7be <bt_mesh_net_loopback_clear+0x32>
    f7b6:	6943      	ldr	r3, [r0, #20]
    f7b8:	8b9b      	ldrh	r3, [r3, #28]
    f7ba:	42ab      	cmp	r3, r5
    f7bc:	d102      	bne.n	f7c4 <bt_mesh_net_loopback_clear+0x38>
			net_buf_unref(buf);
    f7be:	f010 fa9f 	bl	1fd00 <net_buf_unref>
    f7c2:	e7eb      	b.n	f79c <bt_mesh_net_loopback_clear+0x10>
			net_buf_slist_put(&new_list, buf);
    f7c4:	4601      	mov	r1, r0
    f7c6:	4668      	mov	r0, sp
    f7c8:	f010 f9d4 	bl	1fb74 <net_buf_slist_put>
    f7cc:	e7e6      	b.n	f79c <bt_mesh_net_loopback_clear+0x10>
    f7ce:	bf00      	nop
    f7d0:	20002980 	.word	0x20002980

0000f7d4 <bt_mesh_net_header_parse>:
{
    f7d4:	b510      	push	{r4, lr}
	rx->old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01));
    f7d6:	4b12      	ldr	r3, [pc, #72]	; (f820 <bt_mesh_net_header_parse+0x4c>)
    f7d8:	6804      	ldr	r4, [r0, #0]
    f7da:	681b      	ldr	r3, [r3, #0]
    f7dc:	7822      	ldrb	r2, [r4, #0]
    f7de:	f003 0301 	and.w	r3, r3, #1
    f7e2:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    f7e6:	7d0a      	ldrb	r2, [r1, #20]
    f7e8:	f363 0200 	bfi	r2, r3, #0, #1
    f7ec:	750a      	strb	r2, [r1, #20]
	rx->ctl = CTL(buf->data);
    f7ee:	7863      	ldrb	r3, [r4, #1]
    f7f0:	b2d2      	uxtb	r2, r2
    f7f2:	09db      	lsrs	r3, r3, #7
    f7f4:	f363 02c3 	bfi	r2, r3, #3, #1
    f7f8:	750a      	strb	r2, [r1, #20]
	rx->ctx.recv_ttl = TTL(buf->data);
    f7fa:	7863      	ldrb	r3, [r4, #1]
    f7fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f800:	734b      	strb	r3, [r1, #13]
	rx->seq = SEQ(buf->data);
    f802:	1ca0      	adds	r0, r4, #2
    f804:	f01b fbc5 	bl	2af92 <sys_get_be24>
    f808:	6108      	str	r0, [r1, #16]
	return ((uint16_t)src[0] << 8) | src[1];
    f80a:	7962      	ldrb	r2, [r4, #5]
    f80c:	79a3      	ldrb	r3, [r4, #6]
    f80e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rx->ctx.addr = SRC(buf->data);
    f812:	810b      	strh	r3, [r1, #8]
    f814:	79e2      	ldrb	r2, [r4, #7]
    f816:	7a23      	ldrb	r3, [r4, #8]
    f818:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rx->ctx.recv_dst = DST(buf->data);
    f81c:	814b      	strh	r3, [r1, #10]
}
    f81e:	bd10      	pop	{r4, pc}
    f820:	20002968 	.word	0x20002968

0000f824 <bt_mesh_net_decode>:
{
    f824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f826:	4614      	mov	r4, r2
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    f828:	8882      	ldrh	r2, [r0, #4]
    f82a:	2a11      	cmp	r2, #17
{
    f82c:	4606      	mov	r6, r0
    f82e:	460d      	mov	r5, r1
    f830:	461f      	mov	r7, r3
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    f832:	d80f      	bhi.n	f854 <bt_mesh_net_decode+0x30>
		BT_WARN("Dropping too short mesh packet (len %u)", in->len);
    f834:	2157      	movs	r1, #87	; 0x57
    f836:	484c      	ldr	r0, [pc, #304]	; (f968 <bt_mesh_net_decode+0x144>)
    f838:	f018 f84b 	bl	278d2 <printk>
		BT_WARN("%s", bt_hex(in->data, in->len));
    f83c:	88b1      	ldrh	r1, [r6, #4]
    f83e:	6830      	ldr	r0, [r6, #0]
    f840:	f7f8 fe9e 	bl	8580 <bt_hex_real>
    f844:	4602      	mov	r2, r0
    f846:	4849      	ldr	r0, [pc, #292]	; (f96c <bt_mesh_net_decode+0x148>)
    f848:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    f84a:	f018 f842 	bl	278d2 <printk>
		return -EINVAL;
    f84e:	f06f 0015 	mvn.w	r0, #21
}
    f852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (in->len > BT_MESH_NET_MAX_PDU_LEN) {
    f854:	2a1d      	cmp	r2, #29
    f856:	d902      	bls.n	f85e <bt_mesh_net_decode+0x3a>
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    f858:	2157      	movs	r1, #87	; 0x57
    f85a:	4845      	ldr	r0, [pc, #276]	; (f970 <bt_mesh_net_decode+0x14c>)
    f85c:	e7f5      	b.n	f84a <bt_mesh_net_decode+0x26>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(in)) {
    f85e:	bb91      	cbnz	r1, f8c6 <bt_mesh_net_decode+0xa2>
	return buf->data + buf->len;
    f860:	6803      	ldr	r3, [r0, #0]
    f862:	441a      	add	r2, r3
    f864:	f812 3c07 	ldrb.w	r3, [r2, #-7]
    f868:	f812 1c08 	ldrb.w	r1, [r2, #-8]
    f86c:	f812 0c06 	ldrb.w	r0, [r2, #-6]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    f870:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    f874:	f812 3c05 	ldrb.w	r3, [r2, #-5]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    f878:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    f87c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	return ((uint16_t)src[0] << 8) | src[1];
    f880:	f812 0c04 	ldrb.w	r0, [r2, #-4]
    f884:	f812 1c03 	ldrb.w	r1, [r2, #-3]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    f888:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    f88c:	f812 0c02 	ldrb.w	r0, [r2, #-2]
    f890:	f812 2c01 	ldrb.w	r2, [r2, #-1]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    f894:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    f898:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    f89c:	4935      	ldr	r1, [pc, #212]	; (f974 <bt_mesh_net_decode+0x150>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    f89e:	4053      	eors	r3, r2
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    f8a0:	468c      	mov	ip, r1
    f8a2:	462a      	mov	r2, r5
		if (dup_cache[i] == val) {
    f8a4:	f851 0b04 	ldr.w	r0, [r1], #4
    f8a8:	4283      	cmp	r3, r0
    f8aa:	d0d0      	beq.n	f84e <bt_mesh_net_decode+0x2a>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    f8ac:	3201      	adds	r2, #1
    f8ae:	2a0a      	cmp	r2, #10
    f8b0:	d1f8      	bne.n	f8a4 <bt_mesh_net_decode+0x80>
	dup_cache[dup_cache_next++] = val;
    f8b2:	4831      	ldr	r0, [pc, #196]	; (f978 <bt_mesh_net_decode+0x154>)
    f8b4:	6801      	ldr	r1, [r0, #0]
    f8b6:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    f8ba:	1c4b      	adds	r3, r1, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    f8bc:	fb93 f1f2 	sdiv	r1, r3, r2
    f8c0:	fb02 3211 	mls	r2, r2, r1, r3
    f8c4:	6002      	str	r2, [r0, #0]
	rx->net_if = net_if;
    f8c6:	7d23      	ldrb	r3, [r4, #20]
    f8c8:	f365 1305 	bfi	r3, r5, #4, #2
    f8cc:	7523      	strb	r3, [r4, #20]
	if (!bt_mesh_net_cred_find(rx, in, out, net_decrypt)) {
    f8ce:	463a      	mov	r2, r7
    f8d0:	4b2a      	ldr	r3, [pc, #168]	; (f97c <bt_mesh_net_decode+0x158>)
    f8d2:	4631      	mov	r1, r6
    f8d4:	4620      	mov	r0, r4
    f8d6:	f000 fc5d 	bl	10194 <bt_mesh_net_cred_find>
    f8da:	2800      	cmp	r0, #0
    f8dc:	d040      	beq.n	f960 <bt_mesh_net_decode+0x13c>
	rx->ctx.recv_ttl = TTL(out->data);
    f8de:	6839      	ldr	r1, [r7, #0]
	rx->ctl = CTL(out->data);
    f8e0:	7d22      	ldrb	r2, [r4, #20]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    f8e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f8e6:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(out->data);
    f8e8:	784b      	ldrb	r3, [r1, #1]
    f8ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f8ee:	7363      	strb	r3, [r4, #13]
	if (rx->ctx.recv_ttl == 0U) {
    f8f0:	3300      	adds	r3, #0
    f8f2:	bf18      	it	ne
    f8f4:	2301      	movne	r3, #1
    f8f6:	425b      	negs	r3, r3
    f8f8:	73e3      	strb	r3, [r4, #15]
	rx->ctl = CTL(out->data);
    f8fa:	784b      	ldrb	r3, [r1, #1]
    f8fc:	09db      	lsrs	r3, r3, #7
    f8fe:	f363 02c3 	bfi	r2, r3, #3, #1
    f902:	7522      	strb	r2, [r4, #20]
	rx->seq = SEQ(out->data);
    f904:	1c88      	adds	r0, r1, #2
    f906:	f01b fb44 	bl	2af92 <sys_get_be24>
    f90a:	6120      	str	r0, [r4, #16]
	return ((uint16_t)src[0] << 8) | src[1];
    f90c:	79ca      	ldrb	r2, [r1, #7]
    f90e:	7a0b      	ldrb	r3, [r1, #8]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    f910:	2d03      	cmp	r5, #3
    f912:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rx->ctx.recv_dst = DST(out->data);
    f916:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    f918:	d007      	beq.n	f92a <bt_mesh_net_decode+0x106>
    f91a:	b933      	cbnz	r3, f92a <bt_mesh_net_decode+0x106>
		BT_ERR("Destination address is unassigned; dropping packet");
    f91c:	4818      	ldr	r0, [pc, #96]	; (f980 <bt_mesh_net_decode+0x15c>)
    f91e:	2145      	movs	r1, #69	; 0x45
    f920:	f017 ffd7 	bl	278d2 <printk>
		return -EBADMSG;
    f924:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    f928:	e793      	b.n	f852 <bt_mesh_net_decode+0x2e>
	rx->msg_cache_idx = msg_cache_next++;
    f92a:	4916      	ldr	r1, [pc, #88]	; (f984 <bt_mesh_net_decode+0x160>)
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    f92c:	4a16      	ldr	r2, [pc, #88]	; (f988 <bt_mesh_net_decode+0x164>)
	rx->msg_cache_idx = msg_cache_next++;
    f92e:	880b      	ldrh	r3, [r1, #0]
    f930:	82e3      	strh	r3, [r4, #22]
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    f932:	f832 5023 	ldrh.w	r5, [r2, r3, lsl #2]
    f936:	8924      	ldrh	r4, [r4, #8]
    f938:	f364 050e 	bfi	r5, r4, #0, #15
    f93c:	f822 5023 	strh.w	r5, [r2, r3, lsl #2]
	msg_cache[rx->msg_cache_idx].seq = rx->seq;
    f940:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    f944:	f360 34df 	bfi	r4, r0, #15, #17
    f948:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	rx->msg_cache_idx = msg_cache_next++;
    f94c:	3301      	adds	r3, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    f94e:	200a      	movs	r0, #10
    f950:	b29b      	uxth	r3, r3
    f952:	fbb3 f2f0 	udiv	r2, r3, r0
    f956:	fb00 3312 	mls	r3, r0, r2, r3
    f95a:	800b      	strh	r3, [r1, #0]
	return 0;
    f95c:	2000      	movs	r0, #0
    f95e:	e778      	b.n	f852 <bt_mesh_net_decode+0x2e>
		return -ENOENT;
    f960:	f06f 0001 	mvn.w	r0, #1
    f964:	e775      	b.n	f852 <bt_mesh_net_decode+0x2e>
    f966:	bf00      	nop
    f968:	00032b72 	.word	0x00032b72
    f96c:	00032b9f 	.word	0x00032b9f
    f970:	00032ba7 	.word	0x00032ba7
    f974:	20003bfc 	.word	0x20003bfc
    f978:	20003c24 	.word	0x20003c24
    f97c:	0000f089 	.word	0x0000f089
    f980:	00032bd3 	.word	0x00032bd3
    f984:	200056bc 	.word	0x200056bc
    f988:	20003c28 	.word	0x20003c28

0000f98c <bt_mesh_net_recv>:
{
    f98c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f98e:	b093      	sub	sp, #76	; 0x4c
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    f990:	ab0a      	add	r3, sp, #40	; 0x28
{
    f992:	4617      	mov	r7, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    f994:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
{
    f998:	460c      	mov	r4, r1
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    f99a:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
    f99e:	4606      	mov	r6, r0
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    f9a0:	2218      	movs	r2, #24
    f9a2:	2100      	movs	r1, #0
    f9a4:	a804      	add	r0, sp, #16
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    f9a6:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    f9a8:	f01e fcba 	bl	2e320 <memset>
    f9ac:	f88d 401c 	strb.w	r4, [sp, #28]
	if (!bt_mesh_is_provisioned()) {
    f9b0:	f01b fa47 	bl	2ae42 <bt_mesh_is_provisioned>
    f9b4:	2800      	cmp	r0, #0
    f9b6:	d074      	beq.n	faa2 <bt_mesh_net_recv+0x116>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    f9b8:	ab01      	add	r3, sp, #4
    f9ba:	aa04      	add	r2, sp, #16
    f9bc:	4639      	mov	r1, r7
    f9be:	4630      	mov	r0, r6
    f9c0:	f7ff ff30 	bl	f824 <bt_mesh_net_decode>
    f9c4:	2800      	cmp	r0, #0
    f9c6:	d16c      	bne.n	faa2 <bt_mesh_net_recv+0x116>
	state->offset = net_buf_simple_headroom(buf);
    f9c8:	a801      	add	r0, sp, #4
    f9ca:	f01d fdeb 	bl	2d5a4 <net_buf_simple_headroom>
    f9ce:	4604      	mov	r4, r0
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    f9d0:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	state->len = buf->len;
    f9d4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    f9d8:	f01b fa98 	bl	2af0c <bt_mesh_fixed_group_match>
    f9dc:	bb10      	cbnz	r0, fa24 <bt_mesh_net_recv+0x98>
			  bt_mesh_elem_find(rx.ctx.recv_dst));
    f9de:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    f9e2:	f003 f9c9 	bl	12d78 <bt_mesh_elem_find>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    f9e6:	3000      	adds	r0, #0
    f9e8:	bf18      	it	ne
    f9ea:	2001      	movne	r0, #1
    f9ec:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    f9f0:	2f02      	cmp	r7, #2
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    f9f2:	f360 1386 	bfi	r3, r0, #6, #1
    f9f6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    f9fa:	d115      	bne.n	fa28 <bt_mesh_net_recv+0x9c>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
    f9fc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    fa00:	4630      	mov	r0, r6
    fa02:	f01c fc09 	bl	2c218 <bt_mesh_proxy_addr_add>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    fa06:	f01b fa61 	bl	2aecc <bt_mesh_gatt_proxy_get>
		    !rx.local_match) {
    fa0a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    fa0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    fa12:	4318      	orrs	r0, r3
    fa14:	f010 0fff 	tst.w	r0, #255	; 0xff
    fa18:	d106      	bne.n	fa28 <bt_mesh_net_recv+0x9c>
			BT_INFO("Proxy is disabled; ignoring message");
    fa1a:	485f      	ldr	r0, [pc, #380]	; (fb98 <bt_mesh_net_recv+0x20c>)
    fa1c:	2149      	movs	r1, #73	; 0x49
		BT_ERR("Out of relay buffers");
    fa1e:	f017 ff58 	bl	278d2 <printk>
		return;
    fa22:	e03e      	b.n	faa2 <bt_mesh_net_recv+0x116>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    fa24:	2001      	movs	r0, #1
    fa26:	e7e1      	b.n	f9ec <bt_mesh_net_recv+0x60>
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    fa28:	a904      	add	r1, sp, #16
    fa2a:	a801      	add	r0, sp, #4
    fa2c:	f001 fe16 	bl	1165c <bt_mesh_trans_recv>
    fa30:	300b      	adds	r0, #11
    fa32:	d10e      	bne.n	fa52 <bt_mesh_net_recv+0xc6>
		BT_WARN("Removing rejected message from Network Message Cache");
    fa34:	2157      	movs	r1, #87	; 0x57
    fa36:	4859      	ldr	r0, [pc, #356]	; (fb9c <bt_mesh_net_recv+0x210>)
    fa38:	f017 ff4b 	bl	278d2 <printk>
		msg_cache[rx.msg_cache_idx].src = BT_MESH_ADDR_UNASSIGNED;
    fa3c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    fa40:	4a57      	ldr	r2, [pc, #348]	; (fba0 <bt_mesh_net_recv+0x214>)
    fa42:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    fa46:	f36f 010e 	bfc	r1, #0, #15
    fa4a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		msg_cache_next = rx.msg_cache_idx;
    fa4e:	4a55      	ldr	r2, [pc, #340]	; (fba4 <bt_mesh_net_recv+0x218>)
    fa50:	8013      	strh	r3, [r2, #0]
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    fa52:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    fa56:	2b00      	cmp	r3, #0
    fa58:	dd04      	ble.n	fa64 <bt_mesh_net_recv+0xd8>
	    (!rx.local_match && !rx.friend_match)) {
    fa5a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    fa5e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    fa62:	d11e      	bne.n	faa2 <bt_mesh_net_recv+0x116>
	buf->data = buf->__buf + state->offset;
    fa64:	9b03      	ldr	r3, [sp, #12]
	buf->len = state->len;
    fa66:	f8ad 5008 	strh.w	r5, [sp, #8]
	buf->data = buf->__buf + state->offset;
    fa6a:	fa13 f484 	uxtah	r4, r3, r4
	if (rx->ctx.recv_ttl <= 1U) {
    fa6e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    fa72:	9401      	str	r4, [sp, #4]
    fa74:	2b01      	cmp	r3, #1
    fa76:	d914      	bls.n	faa2 <bt_mesh_net_recv+0x116>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    fa78:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    fa7c:	f013 0f34 	tst.w	r3, #52	; 0x34
    fa80:	d108      	bne.n	fa94 <bt_mesh_net_recv+0x108>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    fa82:	f01b fa40 	bl	2af06 <bt_mesh_relay_get>
	    !rx->friend_cred &&
    fa86:	2801      	cmp	r0, #1
    fa88:	d107      	bne.n	fa9a <bt_mesh_net_recv+0x10e>
	if (rx->net_if == BT_MESH_NET_IF_ADV && !rx->friend_cred) {
    fa8a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    fa8e:	f013 0f34 	tst.w	r3, #52	; 0x34
    fa92:	d008      	beq.n	faa6 <bt_mesh_net_recv+0x11a>
		transmit = bt_mesh_net_transmit_get();
    fa94:	f7fe fe52 	bl	e73c <bt_mesh_net_transmit_get>
    fa98:	e007      	b.n	faaa <bt_mesh_net_recv+0x11e>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    fa9a:	f01b fa17 	bl	2aecc <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    fa9e:	2801      	cmp	r0, #1
    faa0:	d0f3      	beq.n	fa8a <bt_mesh_net_recv+0xfe>
}
    faa2:	b013      	add	sp, #76	; 0x4c
    faa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		transmit = bt_mesh_relay_retransmit_get();
    faa6:	f7fe fea5 	bl	e7f4 <bt_mesh_relay_retransmit_get>
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, transmit, K_NO_WAIT);
    faaa:	4601      	mov	r1, r0
    faac:	2200      	movs	r2, #0
    faae:	2300      	movs	r3, #0
    fab0:	2001      	movs	r0, #1
    fab2:	f7fe ff81 	bl	e9b8 <bt_mesh_adv_create>
	if (!buf) {
    fab6:	4604      	mov	r4, r0
    fab8:	b910      	cbnz	r0, fac0 <bt_mesh_net_recv+0x134>
		BT_ERR("Out of relay buffers");
    faba:	2145      	movs	r1, #69	; 0x45
    fabc:	483a      	ldr	r0, [pc, #232]	; (fba8 <bt_mesh_net_recv+0x21c>)
    fabe:	e7ae      	b.n	fa1e <bt_mesh_net_recv+0x92>
	sbuf->data[1] &= 0x80;
    fac0:	9a01      	ldr	r2, [sp, #4]
    fac2:	7853      	ldrb	r3, [r2, #1]
    fac4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    fac8:	7053      	strb	r3, [r2, #1]
	sbuf->data[1] |= rx->ctx.recv_ttl - 1U;
    faca:	9a01      	ldr	r2, [sp, #4]
    facc:	f89d 301d 	ldrb.w	r3, [sp, #29]
    fad0:	7851      	ldrb	r1, [r2, #1]
    fad2:	3b01      	subs	r3, #1
    fad4:	430b      	orrs	r3, r1
    fad6:	7053      	strb	r3, [r2, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    fad8:	f100 0508 	add.w	r5, r0, #8
    fadc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    fae0:	9901      	ldr	r1, [sp, #4]
    fae2:	4628      	mov	r0, r5
    fae4:	f01d fd6a 	bl	2d5bc <net_buf_simple_add_mem>
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    fae8:	9b04      	ldr	r3, [sp, #16]
    faea:	7f9a      	ldrb	r2, [r3, #30]
    faec:	1e90      	subs	r0, r2, #2
    faee:	4241      	negs	r1, r0
    faf0:	4141      	adcs	r1, r0
    faf2:	225a      	movs	r2, #90	; 0x5a
	if (rx->friend_cred) {
    faf4:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    faf8:	434a      	muls	r2, r1
    fafa:	f102 013d 	add.w	r1, r2, #61	; 0x3d
	if (rx->friend_cred) {
    fafe:	0746      	lsls	r6, r0, #29
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    fb00:	4419      	add	r1, r3
	if (rx->friend_cred) {
    fb02:	d50b      	bpl.n	fb1c <bt_mesh_net_recv+0x190>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    fb04:	68a6      	ldr	r6, [r4, #8]
    fb06:	7830      	ldrb	r0, [r6, #0]
    fb08:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
    fb0c:	7030      	strb	r0, [r6, #0]
		buf->data[0] |= cred->nid;
    fb0e:	68a0      	ldr	r0, [r4, #8]
    fb10:	4413      	add	r3, r2
    fb12:	7802      	ldrb	r2, [r0, #0]
    fb14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    fb18:	4313      	orrs	r3, r2
    fb1a:	7003      	strb	r3, [r0, #0]
	if (net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_RX(rx), false)) {
    fb1c:	4b23      	ldr	r3, [pc, #140]	; (fbac <bt_mesh_net_recv+0x220>)
    fb1e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    fb22:	6818      	ldr	r0, [r3, #0]
    fb24:	f002 0201 	and.w	r2, r2, #1
    fb28:	1a82      	subs	r2, r0, r2
    fb2a:	2300      	movs	r3, #0
    fb2c:	4628      	mov	r0, r5
    fb2e:	f01b fa4a 	bl	2afc6 <net_encrypt>
    fb32:	b138      	cbz	r0, fb44 <bt_mesh_net_recv+0x1b8>
		BT_ERR("Re-encrypting failed");
    fb34:	2145      	movs	r1, #69	; 0x45
    fb36:	481e      	ldr	r0, [pc, #120]	; (fbb0 <bt_mesh_net_recv+0x224>)
    fb38:	f017 fecb 	bl	278d2 <printk>
	net_buf_unref(buf);
    fb3c:	4620      	mov	r0, r4
    fb3e:	f010 f8df 	bl	1fd00 <net_buf_unref>
    fb42:	e7ae      	b.n	faa2 <bt_mesh_net_recv+0x116>
	    (rx->friend_cred ||
    fb44:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    fb48:	0759      	lsls	r1, r3, #29
    fb4a:	d510      	bpl.n	fb6e <bt_mesh_net_recv+0x1e2>
		bt_mesh_proxy_relay(&buf->b, rx->ctx.recv_dst);
    fb4c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    fb50:	4628      	mov	r0, r5
    fb52:	f008 fef9 	bl	18948 <bt_mesh_proxy_relay>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    fb56:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    fb5a:	f3c3 1301 	ubfx	r3, r3, #4, #2
	switch (net_if) {
    fb5e:	b15b      	cbz	r3, fb78 <bt_mesh_net_recv+0x1ec>
    fb60:	2b02      	cmp	r3, #2
    fb62:	d016      	beq.n	fb92 <bt_mesh_net_recv+0x206>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    fb64:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    fb68:	075b      	lsls	r3, r3, #29
    fb6a:	d40c      	bmi.n	fb86 <bt_mesh_net_recv+0x1fa>
    fb6c:	e7e6      	b.n	fb3c <bt_mesh_net_recv+0x1b0>
	     bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED)) {
    fb6e:	f01b f9ad 	bl	2aecc <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    fb72:	2801      	cmp	r0, #1
    fb74:	d1ef      	bne.n	fb56 <bt_mesh_net_recv+0x1ca>
    fb76:	e7e9      	b.n	fb4c <bt_mesh_net_recv+0x1c0>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    fb78:	f01b f9c5 	bl	2af06 <bt_mesh_relay_get>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    fb7c:	1e42      	subs	r2, r0, #1
    fb7e:	4250      	negs	r0, r2
    fb80:	4150      	adcs	r0, r2
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    fb82:	2800      	cmp	r0, #0
    fb84:	d0ee      	beq.n	fb64 <bt_mesh_net_recv+0x1d8>
		bt_mesh_adv_send(buf, NULL, NULL);
    fb86:	2200      	movs	r2, #0
    fb88:	4611      	mov	r1, r2
    fb8a:	4620      	mov	r0, r4
    fb8c:	f7fe ff24 	bl	e9d8 <bt_mesh_adv_send>
    fb90:	e7d4      	b.n	fb3c <bt_mesh_net_recv+0x1b0>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    fb92:	f01b f99b 	bl	2aecc <bt_mesh_gatt_proxy_get>
    fb96:	e7f1      	b.n	fb7c <bt_mesh_net_recv+0x1f0>
    fb98:	00032dbb 	.word	0x00032dbb
    fb9c:	00032de4 	.word	0x00032de4
    fba0:	20003c28 	.word	0x20003c28
    fba4:	200056bc 	.word	0x200056bc
    fba8:	00032e1e 	.word	0x00032e1e
    fbac:	20002968 	.word	0x20002968
    fbb0:	00032e38 	.word	0x00032e38

0000fbb4 <bt_mesh_net_init>:
{
    fbb4:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    fbb6:	4c08      	ldr	r4, [pc, #32]	; (fbd8 <bt_mesh_net_init+0x24>)
    fbb8:	2230      	movs	r2, #48	; 0x30
    fbba:	2100      	movs	r1, #0
    fbbc:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
    fbc0:	f01e fbae 	bl	2e320 <memset>
    fbc4:	4b05      	ldr	r3, [pc, #20]	; (fbdc <bt_mesh_net_init+0x28>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    fbc6:	4a06      	ldr	r2, [pc, #24]	; (fbe0 <bt_mesh_net_init+0x2c>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    fbc8:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    fbcc:	2300      	movs	r3, #0
    fbce:	60e3      	str	r3, [r4, #12]
    fbd0:	e9c4 2304 	strd	r2, r3, [r4, #16]
}
    fbd4:	bd10      	pop	{r4, pc}
    fbd6:	bf00      	nop
    fbd8:	20002968 	.word	0x20002968
    fbdc:	0000f4a1 	.word	0x0000f4a1
    fbe0:	0000efc5 	.word	0x0000efc5

0000fbe4 <bt_mesh_net_pending_iv_store>:
		BT_DBG("Stored IV value");
	}
}

void bt_mesh_net_pending_iv_store(void)
{
    fbe4:	b507      	push	{r0, r1, r2, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    fbe6:	2000      	movs	r0, #0
    fbe8:	f7ff fb24 	bl	f234 <atomic_test_bit.constprop.12>
    fbec:	b1e0      	cbz	r0, fc28 <bt_mesh_net_pending_iv_store+0x44>
	iv.iv_index = bt_mesh.iv_index;
    fbee:	4a12      	ldr	r2, [pc, #72]	; (fc38 <bt_mesh_net_pending_iv_store+0x54>)
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    fbf0:	2002      	movs	r0, #2
	iv.iv_index = bt_mesh.iv_index;
    fbf2:	6813      	ldr	r3, [r2, #0]
    fbf4:	9300      	str	r3, [sp, #0]
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    fbf6:	f7ff fb1d 	bl	f234 <atomic_test_bit.constprop.12>
    fbfa:	f89d 3004 	ldrb.w	r3, [sp, #4]
	iv.iv_duration = bt_mesh.ivu_duration;
    fbfe:	f892 21f0 	ldrb.w	r2, [r2, #496]	; 0x1f0
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    fc02:	f360 0300 	bfi	r3, r0, #0, #1
	iv.iv_duration = bt_mesh.ivu_duration;
    fc06:	f362 0347 	bfi	r3, r2, #1, #7
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
    fc0a:	4669      	mov	r1, sp
    fc0c:	2205      	movs	r2, #5
    fc0e:	480b      	ldr	r0, [pc, #44]	; (fc3c <bt_mesh_net_pending_iv_store+0x58>)
	iv.iv_duration = bt_mesh.ivu_duration;
    fc10:	f88d 3004 	strb.w	r3, [sp, #4]
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
    fc14:	f7f6 f9a2 	bl	5f5c <settings_save_one>
	if (err) {
    fc18:	b118      	cbz	r0, fc22 <bt_mesh_net_pending_iv_store+0x3e>
		BT_ERR("Failed to store IV value");
    fc1a:	4809      	ldr	r0, [pc, #36]	; (fc40 <bt_mesh_net_pending_iv_store+0x5c>)
    fc1c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to clear IV");
    fc1e:	f017 fe58 	bl	278d2 <printk>
		store_pending_iv();
	} else {
		clear_iv();
	}
}
    fc22:	b003      	add	sp, #12
    fc24:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/IV");
    fc28:	4804      	ldr	r0, [pc, #16]	; (fc3c <bt_mesh_net_pending_iv_store+0x58>)
    fc2a:	f018 fa5b 	bl	280e4 <settings_delete>
	if (err) {
    fc2e:	2800      	cmp	r0, #0
    fc30:	d0f7      	beq.n	fc22 <bt_mesh_net_pending_iv_store+0x3e>
		BT_ERR("Failed to clear IV");
    fc32:	2145      	movs	r1, #69	; 0x45
    fc34:	4803      	ldr	r0, [pc, #12]	; (fc44 <bt_mesh_net_pending_iv_store+0x60>)
    fc36:	e7f2      	b.n	fc1e <bt_mesh_net_pending_iv_store+0x3a>
    fc38:	20002968 	.word	0x20002968
    fc3c:	00032d04 	.word	0x00032d04
    fc40:	00032d0f 	.word	0x00032d0f
    fc44:	00032d2d 	.word	0x00032d2d

0000fc48 <bt_mesh_net_pending_net_store>:
		BT_DBG("Stored Network value");
	}
}

void bt_mesh_net_pending_net_store(void)
{
    fc48:	b530      	push	{r4, r5, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    fc4a:	2000      	movs	r0, #0
{
    fc4c:	b087      	sub	sp, #28
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    fc4e:	f7ff faf1 	bl	f234 <atomic_test_bit.constprop.12>
    fc52:	b1e8      	cbz	r0, fc90 <bt_mesh_net_pending_net_store+0x48>
	net.primary_addr = bt_mesh_primary_addr();
    fc54:	f003 f88a 	bl	12d6c <bt_mesh_primary_addr>
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
    fc58:	4c11      	ldr	r4, [pc, #68]	; (fca0 <bt_mesh_net_pending_net_store+0x58>)
	net.primary_addr = bt_mesh_primary_addr();
    fc5a:	f8ad 0004 	strh.w	r0, [sp, #4]
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
    fc5e:	f10d 0206 	add.w	r2, sp, #6
    fc62:	f104 0510 	add.w	r5, r4, #16
    fc66:	4623      	mov	r3, r4
    fc68:	cb03      	ldmia	r3!, {r0, r1}
    fc6a:	42ab      	cmp	r3, r5
    fc6c:	6010      	str	r0, [r2, #0]
    fc6e:	6051      	str	r1, [r2, #4]
    fc70:	461c      	mov	r4, r3
    fc72:	f102 0208 	add.w	r2, r2, #8
    fc76:	d1f6      	bne.n	fc66 <bt_mesh_net_pending_net_store+0x1e>
	err = settings_save_one("bt/mesh/Net", &net, sizeof(net));
    fc78:	2212      	movs	r2, #18
    fc7a:	a901      	add	r1, sp, #4
    fc7c:	4809      	ldr	r0, [pc, #36]	; (fca4 <bt_mesh_net_pending_net_store+0x5c>)
    fc7e:	f7f6 f96d 	bl	5f5c <settings_save_one>
	if (err) {
    fc82:	b118      	cbz	r0, fc8c <bt_mesh_net_pending_net_store+0x44>
		BT_ERR("Failed to store Network value");
    fc84:	4808      	ldr	r0, [pc, #32]	; (fca8 <bt_mesh_net_pending_net_store+0x60>)
    fc86:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to clear Network");
    fc88:	f017 fe23 	bl	278d2 <printk>
		store_pending_net();
	} else {
		clear_net();
	}
}
    fc8c:	b007      	add	sp, #28
    fc8e:	bd30      	pop	{r4, r5, pc}
	err = settings_delete("bt/mesh/Net");
    fc90:	4804      	ldr	r0, [pc, #16]	; (fca4 <bt_mesh_net_pending_net_store+0x5c>)
    fc92:	f018 fa27 	bl	280e4 <settings_delete>
	if (err) {
    fc96:	2800      	cmp	r0, #0
    fc98:	d0f8      	beq.n	fc8c <bt_mesh_net_pending_net_store+0x44>
		BT_ERR("Failed to clear Network");
    fc9a:	2145      	movs	r1, #69	; 0x45
    fc9c:	4803      	ldr	r0, [pc, #12]	; (fcac <bt_mesh_net_pending_net_store+0x64>)
    fc9e:	e7f3      	b.n	fc88 <bt_mesh_net_pending_net_store+0x40>
    fca0:	20002b90 	.word	0x20002b90
    fca4:	00032d45 	.word	0x00032d45
    fca8:	00032d51 	.word	0x00032d51
    fcac:	00032d74 	.word	0x00032d74

0000fcb0 <bt_mesh_net_pending_seq_store>:

void bt_mesh_net_pending_seq_store(void)
{
    fcb0:	b507      	push	{r0, r1, r2, lr}
	struct seq_val seq;
	int err;

	sys_put_le24(bt_mesh.seq, seq.val);
    fcb2:	4b0a      	ldr	r3, [pc, #40]	; (fcdc <bt_mesh_net_pending_seq_store+0x2c>)

	err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
    fcb4:	480a      	ldr	r0, [pc, #40]	; (fce0 <bt_mesh_net_pending_seq_store+0x30>)
	dst[0] = val;
    fcb6:	889a      	ldrh	r2, [r3, #4]
    fcb8:	f8ad 2004 	strh.w	r2, [sp, #4]
	dst[2] = val >> 16;
    fcbc:	88db      	ldrh	r3, [r3, #6]
    fcbe:	f88d 3006 	strb.w	r3, [sp, #6]
    fcc2:	2203      	movs	r2, #3
    fcc4:	a901      	add	r1, sp, #4
    fcc6:	f7f6 f949 	bl	5f5c <settings_save_one>
	if (err) {
    fcca:	b118      	cbz	r0, fcd4 <bt_mesh_net_pending_seq_store+0x24>
		BT_ERR("Failed to stor Seq value");
    fccc:	2145      	movs	r1, #69	; 0x45
    fcce:	4805      	ldr	r0, [pc, #20]	; (fce4 <bt_mesh_net_pending_seq_store+0x34>)
    fcd0:	f017 fdff 	bl	278d2 <printk>
	} else {
		BT_DBG("Stored Seq value");
	}
}
    fcd4:	b003      	add	sp, #12
    fcd6:	f85d fb04 	ldr.w	pc, [sp], #4
    fcda:	bf00      	nop
    fcdc:	20002968 	.word	0x20002968
    fce0:	00032d91 	.word	0x00032d91
    fce4:	00032d9d 	.word	0x00032d9d

0000fce8 <bt_mesh_net_settings_commit>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
}

void bt_mesh_net_settings_commit(void)
{
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    fce8:	4906      	ldr	r1, [pc, #24]	; (fd04 <bt_mesh_net_settings_commit+0x1c>)
    fcea:	f891 31f0 	ldrb.w	r3, [r1, #496]	; 0x1f0
    fcee:	2b5f      	cmp	r3, #95	; 0x5f
    fcf0:	d806      	bhi.n	fd00 <bt_mesh_net_settings_commit+0x18>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    fcf2:	4a05      	ldr	r2, [pc, #20]	; (fd08 <bt_mesh_net_settings_commit+0x20>)
    fcf4:	4805      	ldr	r0, [pc, #20]	; (fd0c <bt_mesh_net_settings_commit+0x24>)
    fcf6:	2300      	movs	r3, #0
    fcf8:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
    fcfc:	f015 bbcc 	b.w	25498 <k_delayed_work_submit_to_queue>
		k_delayed_work_submit(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
	}
}
    fd00:	4770      	bx	lr
    fd02:	bf00      	nop
    fd04:	20002968 	.word	0x20002968
    fd08:	a8c00000 	.word	0xa8c00000
    fd0c:	20003028 	.word	0x20003028

0000fd10 <clear_net_key>:
		cb->evt_handler(sub, evt);
	}
}

static void clear_net_key(uint16_t net_idx)
{
    fd10:	b510      	push	{r4, lr}
    fd12:	b086      	sub	sp, #24
	char path[20];
	int err;

	BT_DBG("NetKeyIndex 0x%03x", net_idx);

	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    fd14:	4603      	mov	r3, r0
{
    fd16:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    fd18:	4a07      	ldr	r2, [pc, #28]	; (fd38 <clear_net_key+0x28>)
    fd1a:	2114      	movs	r1, #20
    fd1c:	a801      	add	r0, sp, #4
    fd1e:	f017 fde5 	bl	278ec <snprintk>
	err = settings_delete(path);
    fd22:	a801      	add	r0, sp, #4
    fd24:	f018 f9de 	bl	280e4 <settings_delete>
	if (err) {
    fd28:	b120      	cbz	r0, fd34 <clear_net_key+0x24>
		BT_ERR("Failed to clear NetKeyIndex 0x%03x", net_idx);
    fd2a:	4622      	mov	r2, r4
    fd2c:	2145      	movs	r1, #69	; 0x45
    fd2e:	4803      	ldr	r0, [pc, #12]	; (fd3c <clear_net_key+0x2c>)
    fd30:	f017 fdcf 	bl	278d2 <printk>
	} else {
		BT_DBG("Cleared NetKeyIndex 0x%03x", net_idx);
	}
}
    fd34:	b006      	add	sp, #24
    fd36:	bd10      	pop	{r4, pc}
    fd38:	00032f42 	.word	0x00032f42
    fd3c:	00032f54 	.word	0x00032f54

0000fd40 <subnet_evt>:
{
    fd40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    fd44:	4d0d      	ldr	r5, [pc, #52]	; (fd7c <subnet_evt+0x3c>)
    fd46:	4c0e      	ldr	r4, [pc, #56]	; (fd80 <subnet_evt+0x40>)
    fd48:	4e0e      	ldr	r6, [pc, #56]	; (fd84 <subnet_evt+0x44>)
{
    fd4a:	4680      	mov	r8, r0
    fd4c:	4689      	mov	r9, r1
    fd4e:	462f      	mov	r7, r5
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    fd50:	42ac      	cmp	r4, r5
    fd52:	d908      	bls.n	fd66 <subnet_evt+0x26>
    fd54:	4631      	mov	r1, r6
    fd56:	480c      	ldr	r0, [pc, #48]	; (fd88 <subnet_evt+0x48>)
    fd58:	2245      	movs	r2, #69	; 0x45
    fd5a:	f017 fdba 	bl	278d2 <printk>
    fd5e:	2145      	movs	r1, #69	; 0x45
    fd60:	4630      	mov	r0, r6
    fd62:	f018 f82f 	bl	27dc4 <assert_post_action>
    fd66:	42bc      	cmp	r4, r7
    fd68:	d301      	bcc.n	fd6e <subnet_evt+0x2e>
}
    fd6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cb->evt_handler(sub, evt);
    fd6e:	f854 3b04 	ldr.w	r3, [r4], #4
    fd72:	4649      	mov	r1, r9
    fd74:	4640      	mov	r0, r8
    fd76:	4798      	blx	r3
    fd78:	e7ea      	b.n	fd50 <subnet_evt+0x10>
    fd7a:	bf00      	nop
    fd7c:	0002eeec 	.word	0x0002eeec
    fd80:	0002eedc 	.word	0x0002eedc
    fd84:	0003309e 	.word	0x0003309e
    fd88:	0003067f 	.word	0x0003067f

0000fd8c <net_keys_create>:
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
}

static int net_keys_create(struct bt_mesh_subnet_keys *keys,
			   const uint8_t key[16])
{
    fd8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t p = 0;
    fd8e:	2300      	movs	r3, #0
    fd90:	f88d 300f 	strb.w	r3, [sp, #15]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    fd94:	f100 0322 	add.w	r3, r0, #34	; 0x22
{
    fd98:	460e      	mov	r6, r1
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    fd9a:	9301      	str	r3, [sp, #4]
    fd9c:	f100 0312 	add.w	r3, r0, #18
    fda0:	9300      	str	r3, [sp, #0]
{
    fda2:	4605      	mov	r5, r0
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    fda4:	f100 0311 	add.w	r3, r0, #17
    fda8:	2201      	movs	r2, #1
    fdaa:	f10d 010f 	add.w	r1, sp, #15
    fdae:	4630      	mov	r0, r6
    fdb0:	f002 fb68 	bl	12484 <bt_mesh_k2>
	int err;

	err = msg_cred_create(&keys->msg, &p, 1, key);
	if (err) {
    fdb4:	4604      	mov	r4, r0
    fdb6:	b130      	cbz	r0, fdc6 <net_keys_create+0x3a>
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
    fdb8:	4819      	ldr	r0, [pc, #100]	; (fe20 <net_keys_create+0x94>)
    fdba:	2145      	movs	r1, #69	; 0x45
	BT_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
#endif /* GATT_PROXY */

	err = bt_mesh_beacon_key(key, keys->beacon);
	if (err) {
		BT_ERR("Unable to generate beacon key");
    fdbc:	f017 fd89 	bl	278d2 <printk>
	BT_DBG("BeaconKey %s", bt_hex(keys->beacon, 16));

	keys->valid = 1U;

	return 0;
}
    fdc0:	4620      	mov	r0, r4
    fdc2:	b004      	add	sp, #16
    fdc4:	bd70      	pop	{r4, r5, r6, pc}
    fdc6:	4633      	mov	r3, r6
    fdc8:	1c6a      	adds	r2, r5, #1
    fdca:	f106 0110 	add.w	r1, r6, #16
    fdce:	f853 0b04 	ldr.w	r0, [r3], #4
    fdd2:	f842 0b04 	str.w	r0, [r2], #4
    fdd6:	428b      	cmp	r3, r1
    fdd8:	d1f9      	bne.n	fdce <net_keys_create+0x42>
	err = bt_mesh_k3(key, keys->net_id);
    fdda:	f105 0132 	add.w	r1, r5, #50	; 0x32
    fdde:	4630      	mov	r0, r6
    fde0:	f002 fbb6 	bl	12550 <bt_mesh_k3>
	if (err) {
    fde4:	4604      	mov	r4, r0
    fde6:	b110      	cbz	r0, fdee <net_keys_create+0x62>
		BT_ERR("Unable to generate Net ID");
    fde8:	2145      	movs	r1, #69	; 0x45
    fdea:	480e      	ldr	r0, [pc, #56]	; (fe24 <net_keys_create+0x98>)
    fdec:	e7e6      	b.n	fdbc <net_keys_create+0x30>
}

static inline int bt_mesh_identity_key(const uint8_t net_key[16],
				       uint8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
    fdee:	f105 023a 	add.w	r2, r5, #58	; 0x3a
    fdf2:	490d      	ldr	r1, [pc, #52]	; (fe28 <net_keys_create+0x9c>)
    fdf4:	4630      	mov	r0, r6
    fdf6:	f002 fbff 	bl	125f8 <bt_mesh_id128>
	if (err) {
    fdfa:	4604      	mov	r4, r0
    fdfc:	b110      	cbz	r0, fe04 <net_keys_create+0x78>
		BT_ERR("Unable to generate IdentityKey");
    fdfe:	2145      	movs	r1, #69	; 0x45
    fe00:	480a      	ldr	r0, [pc, #40]	; (fe2c <net_keys_create+0xa0>)
    fe02:	e7db      	b.n	fdbc <net_keys_create+0x30>
}

static inline int bt_mesh_beacon_key(const uint8_t net_key[16],
				     uint8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    fe04:	f105 024a 	add.w	r2, r5, #74	; 0x4a
    fe08:	4909      	ldr	r1, [pc, #36]	; (fe30 <net_keys_create+0xa4>)
    fe0a:	4630      	mov	r0, r6
    fe0c:	f002 fbf4 	bl	125f8 <bt_mesh_id128>
	if (err) {
    fe10:	4604      	mov	r4, r0
    fe12:	b110      	cbz	r0, fe1a <net_keys_create+0x8e>
		BT_ERR("Unable to generate beacon key");
    fe14:	2145      	movs	r1, #69	; 0x45
    fe16:	4807      	ldr	r0, [pc, #28]	; (fe34 <net_keys_create+0xa8>)
    fe18:	e7d0      	b.n	fdbc <net_keys_create+0x30>
	keys->valid = 1U;
    fe1a:	2301      	movs	r3, #1
    fe1c:	702b      	strb	r3, [r5, #0]
	return 0;
    fe1e:	e7cf      	b.n	fdc0 <net_keys_create+0x34>
    fe20:	00032f99 	.word	0x00032f99
    fe24:	00032fca 	.word	0x00032fca
    fe28:	00032fe9 	.word	0x00032fe9
    fe2c:	00032fee 	.word	0x00032fee
    fe30:	00033012 	.word	0x00033012
    fe34:	00033017 	.word	0x00033017

0000fe38 <bt_mesh_subnet_get.part.1>:
struct bt_mesh_subnet *bt_mesh_subnet_get(uint16_t net_idx)
{
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == net_idx) {
    fe38:	4b03      	ldr	r3, [pc, #12]	; (fe48 <bt_mesh_subnet_get.part.1+0x10>)
    fe3a:	8b9a      	ldrh	r2, [r3, #28]
			return sub;
		}
	}

	return NULL;
}
    fe3c:	4282      	cmp	r2, r0
    fe3e:	bf0c      	ite	eq
    fe40:	4618      	moveq	r0, r3
    fe42:	2000      	movne	r0, #0
    fe44:	4770      	bx	lr
    fe46:	bf00      	nop
    fe48:	20001330 	.word	0x20001330

0000fe4c <store_subnet>:
{
    fe4c:	b510      	push	{r4, lr}
    fe4e:	b08e      	sub	sp, #56	; 0x38
    fe50:	4601      	mov	r1, r0
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    fe52:	f7ff fff1 	bl	fe38 <bt_mesh_subnet_get.part.1>
	if (!sub) {
    fe56:	4604      	mov	r4, r0
    fe58:	b930      	cbnz	r0, fe68 <store_subnet+0x1c>
		BT_WARN("NetKeyIndex 0x%03x not found", net_idx);
    fe5a:	460a      	mov	r2, r1
    fe5c:	481c      	ldr	r0, [pc, #112]	; (fed0 <store_subnet+0x84>)
    fe5e:	2157      	movs	r1, #87	; 0x57
    fe60:	f017 fd37 	bl	278d2 <printk>
}
    fe64:	b00e      	add	sp, #56	; 0x38
    fe66:	bd10      	pop	{r4, pc}
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    fe68:	460b      	mov	r3, r1
    fe6a:	4a1a      	ldr	r2, [pc, #104]	; (fed4 <store_subnet+0x88>)
    fe6c:	2114      	movs	r1, #20
    fe6e:	4668      	mov	r0, sp
    fe70:	f017 fd3c 	bl	278ec <snprintk>
	memcpy(&key.val[0], sub->keys[0].net, 16);
    fe74:	f104 032d 	add.w	r3, r4, #45	; 0x2d
    fe78:	f10d 0215 	add.w	r2, sp, #21
    fe7c:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    fe80:	f853 0b04 	ldr.w	r0, [r3], #4
    fe84:	f842 0b04 	str.w	r0, [r2], #4
    fe88:	428b      	cmp	r3, r1
    fe8a:	d1f9      	bne.n	fe80 <store_subnet+0x34>
	memcpy(&key.val[1], sub->keys[1].net, 16);
    fe8c:	f104 0387 	add.w	r3, r4, #135	; 0x87
    fe90:	f10d 0225 	add.w	r2, sp, #37	; 0x25
    fe94:	f104 0197 	add.w	r1, r4, #151	; 0x97
    fe98:	f853 0b04 	ldr.w	r0, [r3], #4
    fe9c:	f842 0b04 	str.w	r0, [r2], #4
    fea0:	428b      	cmp	r3, r1
    fea2:	d1f9      	bne.n	fe98 <store_subnet+0x4c>
	key.kr_flag = 0U; /* Deprecated */
    fea4:	f89d 3014 	ldrb.w	r3, [sp, #20]
	key.kr_phase = sub->kr_phase;
    fea8:	7fa2      	ldrb	r2, [r4, #30]
    feaa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    feae:	f362 0347 	bfi	r3, r2, #1, #7
	err = settings_save_one(path, &key, sizeof(key));
    feb2:	a905      	add	r1, sp, #20
    feb4:	2221      	movs	r2, #33	; 0x21
    feb6:	4668      	mov	r0, sp
	key.kr_phase = sub->kr_phase;
    feb8:	f88d 3014 	strb.w	r3, [sp, #20]
	err = settings_save_one(path, &key, sizeof(key));
    febc:	f7f6 f84e 	bl	5f5c <settings_save_one>
	if (err) {
    fec0:	2800      	cmp	r0, #0
    fec2:	d0cf      	beq.n	fe64 <store_subnet+0x18>
		BT_ERR("Failed to store NetKey value");
    fec4:	2145      	movs	r1, #69	; 0x45
    fec6:	4804      	ldr	r0, [pc, #16]	; (fed8 <store_subnet+0x8c>)
    fec8:	f017 fd03 	bl	278d2 <printk>
    fecc:	e7ca      	b.n	fe64 <store_subnet+0x18>
    fece:	bf00      	nop
    fed0:	0003303a 	.word	0x0003303a
    fed4:	00032f42 	.word	0x00032f42
    fed8:	0003305c 	.word	0x0003305c

0000fedc <update_subnet_settings>:
		if (update->key_idx == key_idx) {
    fedc:	4a11      	ldr	r2, [pc, #68]	; (ff24 <update_subnet_settings+0x48>)
		if (!update->valid) {
    fede:	7853      	ldrb	r3, [r2, #1]
{
    fee0:	b470      	push	{r4, r5, r6}
		if (update->key_idx == key_idx) {
    fee2:	8814      	ldrh	r4, [r2, #0]
		if (!update->valid) {
    fee4:	f013 0f10 	tst.w	r3, #16
	uint8_t clear = store ? 0U : 1U;
    fee8:	f081 0501 	eor.w	r5, r1, #1
		if (update->key_idx == key_idx) {
    feec:	f3c4 040b 	ubfx	r4, r4, #0, #12
		if (!update->valid) {
    fef0:	d10f      	bne.n	ff12 <update_subnet_settings+0x36>
	free_slot->valid = 1U;
    fef2:	f043 0310 	orr.w	r3, r3, #16
    fef6:	7053      	strb	r3, [r2, #1]
	free_slot->key_idx = net_idx;
    fef8:	8813      	ldrh	r3, [r2, #0]
    fefa:	f360 030b 	bfi	r3, r0, #0, #12
    fefe:	8013      	strh	r3, [r2, #0]
	free_slot->clear = clear;
    ff00:	f3c3 2307 	ubfx	r3, r3, #8, #8
		update->clear = clear;
    ff04:	f365 1345 	bfi	r3, r5, #5, #1
    ff08:	7053      	strb	r3, [r2, #1]
		bt_mesh_settings_store_schedule(
    ff0a:	2001      	movs	r0, #1
}
    ff0c:	bc70      	pop	{r4, r5, r6}
		bt_mesh_settings_store_schedule(
    ff0e:	f005 ba8b 	b.w	15428 <bt_mesh_settings_store_schedule>
		if (update->key_idx == key_idx) {
    ff12:	4284      	cmp	r4, r0
    ff14:	d0f6      	beq.n	ff04 <update_subnet_settings+0x28>
		if (store) {
    ff16:	b111      	cbz	r1, ff1e <update_subnet_settings+0x42>
}
    ff18:	bc70      	pop	{r4, r5, r6}
			store_subnet(net_idx);
    ff1a:	f7ff bf97 	b.w	fe4c <store_subnet>
}
    ff1e:	bc70      	pop	{r4, r5, r6}
			clear_net_key(net_idx);
    ff20:	f7ff bef6 	b.w	fd10 <clear_net_key>
    ff24:	200056be 	.word	0x200056be

0000ff28 <bt_mesh_net_flags>:
	if (sub && (sub->kr_phase == BT_MESH_KR_PHASE_2)) {
    ff28:	b118      	cbz	r0, ff32 <bt_mesh_net_flags+0xa>
    ff2a:	7f80      	ldrb	r0, [r0, #30]
	uint8_t flags = 0x00;
    ff2c:	1e82      	subs	r2, r0, #2
    ff2e:	4250      	negs	r0, r2
    ff30:	4150      	adcs	r0, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ff32:	4b05      	ldr	r3, [pc, #20]	; (ff48 <bt_mesh_net_flags+0x20>)
    ff34:	f3bf 8f5b 	dmb	ish
    ff38:	681b      	ldr	r3, [r3, #0]
    ff3a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    ff3e:	075b      	lsls	r3, r3, #29
		flags |= BT_MESH_NET_FLAG_IVU;
    ff40:	bf48      	it	mi
    ff42:	f040 0002 	orrmi.w	r0, r0, #2
}
    ff46:	4770      	bx	lr
    ff48:	20002970 	.word	0x20002970

0000ff4c <bt_mesh_subnet_add>:
{
    ff4c:	b570      	push	{r4, r5, r6, lr}
		if (subnets[i].net_idx == net_idx) {
    ff4e:	4d14      	ldr	r5, [pc, #80]	; (ffa0 <bt_mesh_subnet_add+0x54>)
    ff50:	8bab      	ldrh	r3, [r5, #28]
{
    ff52:	4606      	mov	r6, r0
		if (subnets[i].net_idx == net_idx) {
    ff54:	429e      	cmp	r6, r3
{
    ff56:	4608      	mov	r0, r1
		if (subnets[i].net_idx == net_idx) {
    ff58:	d00b      	beq.n	ff72 <bt_mesh_subnet_add+0x26>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    ff5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ff5e:	4293      	cmp	r3, r2
    ff60:	d11c      	bne.n	ff9c <bt_mesh_subnet_add+0x50>
	err = net_keys_create(&sub->keys[0], key);
    ff62:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    ff66:	f7ff ff11 	bl	fd8c <net_keys_create>
	if (err) {
    ff6a:	4604      	mov	r4, r0
    ff6c:	b158      	cbz	r0, ff86 <bt_mesh_subnet_add+0x3a>
		return STATUS_UNSPECIFIED;
    ff6e:	2010      	movs	r0, #16
    ff70:	e008      	b.n	ff84 <bt_mesh_subnet_add+0x38>
		if (memcmp(key, sub->keys[0].net, 16)) {
    ff72:	2210      	movs	r2, #16
    ff74:	f105 012d 	add.w	r1, r5, #45	; 0x2d
    ff78:	f01e f989 	bl	2e28e <memcmp>
    ff7c:	2800      	cmp	r0, #0
		return STATUS_SUCCESS;
    ff7e:	bf14      	ite	ne
    ff80:	2006      	movne	r0, #6
    ff82:	2000      	moveq	r0, #0
}
    ff84:	bd70      	pop	{r4, r5, r6, pc}
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    ff86:	4601      	mov	r1, r0
	sub->kr_phase = BT_MESH_KR_NORMAL;
    ff88:	83e8      	strh	r0, [r5, #30]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    ff8a:	4628      	mov	r0, r5
	sub->net_idx = net_idx;
    ff8c:	83ae      	strh	r6, [r5, #28]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    ff8e:	f7ff fed7 	bl	fd40 <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
    ff92:	8ba8      	ldrh	r0, [r5, #28]
    ff94:	f01b f84b 	bl	2b02e <bt_mesh_subnet_store>
	return STATUS_SUCCESS;
    ff98:	4620      	mov	r0, r4
    ff9a:	e7f3      	b.n	ff84 <bt_mesh_subnet_add+0x38>
		return STATUS_INSUFF_RESOURCES;
    ff9c:	2005      	movs	r0, #5
    ff9e:	e7f1      	b.n	ff84 <bt_mesh_subnet_add+0x38>
    ffa0:	20001330 	.word	0x20001330

0000ffa4 <bt_mesh_subnet_kr_phase_set>:
{
    ffa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const uint8_t valid_transitions[] = {
    ffa6:	f640 4308 	movw	r3, #3080	; 0xc08
    ffaa:	f8ad 3004 	strh.w	r3, [sp, #4]
    ffae:	2308      	movs	r3, #8
{
    ffb0:	460c      	mov	r4, r1
	const uint8_t valid_transitions[] = {
    ffb2:	f88d 3006 	strb.w	r3, [sp, #6]
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    ffb6:	f7ff ff3f 	bl	fe38 <bt_mesh_subnet_get.part.1>
	if (!sub) {
    ffba:	4605      	mov	r5, r0
    ffbc:	b918      	cbnz	r0, ffc6 <bt_mesh_subnet_kr_phase_set+0x22>
		*phase = 0x00;
    ffbe:	7020      	strb	r0, [r4, #0]
		return STATUS_INVALID_NETKEY;
    ffc0:	2004      	movs	r0, #4
}
    ffc2:	b003      	add	sp, #12
    ffc4:	bd30      	pop	{r4, r5, pc}
	if (*phase == sub->kr_phase) {
    ffc6:	780b      	ldrb	r3, [r1, #0]
    ffc8:	7f82      	ldrb	r2, [r0, #30]
    ffca:	4293      	cmp	r3, r2
    ffcc:	d00d      	beq.n	ffea <bt_mesh_subnet_kr_phase_set+0x46>
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    ffce:	2a02      	cmp	r2, #2
    ffd0:	d80d      	bhi.n	ffee <bt_mesh_subnet_kr_phase_set+0x4a>
	    valid_transitions[sub->kr_phase] & BIT(*phase)) {
    ffd2:	a902      	add	r1, sp, #8
    ffd4:	4411      	add	r1, r2
    ffd6:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    ffda:	40d9      	lsrs	r1, r3
    ffdc:	07c9      	lsls	r1, r1, #31
    ffde:	d506      	bpl.n	ffee <bt_mesh_subnet_kr_phase_set+0x4a>
		key_refresh(sub, *phase);
    ffe0:	4619      	mov	r1, r3
    ffe2:	f01b f827 	bl	2b034 <key_refresh>
		*phase = sub->kr_phase;
    ffe6:	7fab      	ldrb	r3, [r5, #30]
    ffe8:	7023      	strb	r3, [r4, #0]
		return STATUS_SUCCESS;
    ffea:	2000      	movs	r0, #0
    ffec:	e7e9      	b.n	ffc2 <bt_mesh_subnet_kr_phase_set+0x1e>
	BT_WARN("Invalid KR transition: 0x%02x -> 0x%02x", sub->kr_phase,
    ffee:	4804      	ldr	r0, [pc, #16]	; (10000 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1>)
    fff0:	2157      	movs	r1, #87	; 0x57
    fff2:	f017 fc6e 	bl	278d2 <printk>
	*phase = sub->kr_phase;
    fff6:	7fab      	ldrb	r3, [r5, #30]
    fff8:	7023      	strb	r3, [r4, #0]
	return STATUS_CANNOT_UPDATE;
    fffa:	200b      	movs	r0, #11
    fffc:	e7e1      	b.n	ffc2 <bt_mesh_subnet_kr_phase_set+0x1e>
    fffe:	bf00      	nop
   10000:	00032f15 	.word	0x00032f15

00010004 <bt_mesh_subnets_get>:
{
   10004:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
   10006:	2400      	movs	r4, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   10008:	4e0b      	ldr	r6, [pc, #44]	; (10038 <bt_mesh_subnets_get+0x34>)
	size_t count = 0;
   1000a:	4623      	mov	r3, r4
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   1000c:	f64f 77ff 	movw	r7, #65535	; 0xffff
   10010:	8bb5      	ldrh	r5, [r6, #28]
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
   10012:	b10c      	cbz	r4, 10018 <bt_mesh_subnets_get+0x14>
	return count;
   10014:	4618      	mov	r0, r3
}
   10016:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   10018:	42bd      	cmp	r5, r7
   1001a:	d0fb      	beq.n	10014 <bt_mesh_subnets_get+0x10>
		if (skip) {
   1001c:	b112      	cbz	r2, 10024 <bt_mesh_subnets_get+0x20>
			skip--;
   1001e:	3a01      	subs	r2, #1
			continue;
   10020:	2401      	movs	r4, #1
   10022:	e7f5      	b.n	10010 <bt_mesh_subnets_get+0xc>
		if (count >= max) {
   10024:	428b      	cmp	r3, r1
   10026:	d203      	bcs.n	10030 <bt_mesh_subnets_get+0x2c>
		net_idxs[count++] = sub->net_idx;
   10028:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
   1002c:	3301      	adds	r3, #1
   1002e:	e7f7      	b.n	10020 <bt_mesh_subnets_get+0x1c>
			return -ENOMEM;
   10030:	f06f 000b 	mvn.w	r0, #11
   10034:	e7ef      	b.n	10016 <bt_mesh_subnets_get+0x12>
   10036:	bf00      	nop
   10038:	20001330 	.word	0x20001330

0001003c <bt_mesh_subnet_set>:

int bt_mesh_subnet_set(uint16_t net_idx, uint8_t kr_phase,
		       const uint8_t old_key[16], const uint8_t new_key[16])
{
   1003c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (subnets[i].net_idx == net_idx) {
   1003e:	4d16      	ldr	r5, [pc, #88]	; (10098 <bt_mesh_subnet_set+0x5c>)
{
   10040:	461c      	mov	r4, r3
		if (subnets[i].net_idx == net_idx) {
   10042:	8bab      	ldrh	r3, [r5, #28]
   10044:	4298      	cmp	r0, r3
{
   10046:	4606      	mov	r6, r0
   10048:	460f      	mov	r7, r1
		if (subnets[i].net_idx == net_idx) {
   1004a:	d01f      	beq.n	1008c <bt_mesh_subnet_set+0x50>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   1004c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10050:	428b      	cmp	r3, r1
   10052:	d11e      	bne.n	10092 <bt_mesh_subnet_set+0x56>
	if (sub->net_idx == net_idx) {
		return -EALREADY;
	}

	for (int i = 0; i < ARRAY_SIZE(keys); i++) {
		if (!keys[i]) {
   10054:	b94a      	cbnz	r2, 1006a <bt_mesh_subnet_set+0x2e>
   10056:	b994      	cbnz	r4, 1007e <bt_mesh_subnet_set+0x42>

	sub->net_idx = net_idx;
	sub->kr_phase = kr_phase;

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   10058:	2400      	movs	r4, #0
	} else {
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
	}

	/* Make sure we have valid beacon data to be sent */
	bt_mesh_beacon_update(sub);
   1005a:	480f      	ldr	r0, [pc, #60]	; (10098 <bt_mesh_subnet_set+0x5c>)
	sub->net_idx = net_idx;
   1005c:	83ae      	strh	r6, [r5, #28]
	sub->kr_phase = kr_phase;
   1005e:	77af      	strb	r7, [r5, #30]
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   10060:	77ec      	strb	r4, [r5, #31]
	bt_mesh_beacon_update(sub);
   10062:	f7fe fe6b 	bl	ed3c <bt_mesh_beacon_update>

	return 0;
   10066:	4620      	mov	r0, r4
   10068:	e008      	b.n	1007c <bt_mesh_subnet_set+0x40>
		if (net_keys_create(&sub->keys[i], keys[i])) {
   1006a:	4611      	mov	r1, r2
   1006c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   10070:	f7ff fe8c 	bl	fd8c <net_keys_create>
   10074:	2800      	cmp	r0, #0
   10076:	d0ee      	beq.n	10056 <bt_mesh_subnet_set+0x1a>
			return -EIO;
   10078:	f06f 0004 	mvn.w	r0, #4
}
   1007c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (net_keys_create(&sub->keys[i], keys[i])) {
   1007e:	4621      	mov	r1, r4
   10080:	4806      	ldr	r0, [pc, #24]	; (1009c <bt_mesh_subnet_set+0x60>)
   10082:	f7ff fe83 	bl	fd8c <net_keys_create>
   10086:	2800      	cmp	r0, #0
   10088:	d0e6      	beq.n	10058 <bt_mesh_subnet_set+0x1c>
   1008a:	e7f5      	b.n	10078 <bt_mesh_subnet_set+0x3c>
		return -EALREADY;
   1008c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   10090:	e7f4      	b.n	1007c <bt_mesh_subnet_set+0x40>
		return -ENOMEM;
   10092:	f06f 000b 	mvn.w	r0, #11
   10096:	e7f1      	b.n	1007c <bt_mesh_subnet_set+0x40>
   10098:	20001330 	.word	0x20001330
   1009c:	200013b6 	.word	0x200013b6

000100a0 <net_key_set>:
	return false;
}

static int net_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   100a0:	b570      	push	{r4, r5, r6, lr}
   100a2:	4614      	mov	r4, r2
   100a4:	b08a      	sub	sp, #40	; 0x28
   100a6:	461e      	mov	r6, r3
	struct net_key_val key;
	int err;
	uint16_t net_idx;

	if (!name) {
   100a8:	b940      	cbnz	r0, 100bc <net_key_set+0x1c>
		BT_ERR("Insufficient number of arguments");
   100aa:	2145      	movs	r1, #69	; 0x45
   100ac:	4814      	ldr	r0, [pc, #80]	; (10100 <net_key_set+0x60>)
   100ae:	f017 fc10 	bl	278d2 <printk>
   100b2:	f06f 0401 	mvn.w	r4, #1
	BT_DBG("NetKeyIndex 0x%03x recovered from storage", net_idx);

	return bt_mesh_subnet_set(
		net_idx, key.kr_phase, key.val[0],
		(key.kr_phase != BT_MESH_KR_NORMAL) ? key.val[1] : NULL);
}
   100b6:	4620      	mov	r0, r4
   100b8:	b00a      	add	sp, #40	; 0x28
   100ba:	bd70      	pop	{r4, r5, r6, pc}
	net_idx = strtol(name, NULL, 16);
   100bc:	2210      	movs	r2, #16
   100be:	2100      	movs	r1, #0
   100c0:	f017 fafc 	bl	276bc <strtol>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
   100c4:	2321      	movs	r3, #33	; 0x21
	net_idx = strtol(name, NULL, 16);
   100c6:	b285      	uxth	r5, r0
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
   100c8:	aa01      	add	r2, sp, #4
   100ca:	4620      	mov	r0, r4
   100cc:	4631      	mov	r1, r6
   100ce:	f005 f989 	bl	153e4 <bt_mesh_settings_set>
	if (err) {
   100d2:	4604      	mov	r4, r0
   100d4:	b120      	cbz	r0, 100e0 <net_key_set+0x40>
		BT_ERR("Failed to set \'net-key\'");
   100d6:	2145      	movs	r1, #69	; 0x45
   100d8:	480a      	ldr	r0, [pc, #40]	; (10104 <net_key_set+0x64>)
   100da:	f017 fbfa 	bl	278d2 <printk>
		return err;
   100de:	e7ea      	b.n	100b6 <net_key_set+0x16>
		net_idx, key.kr_phase, key.val[0],
   100e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return bt_mesh_subnet_set(
   100e4:	0859      	lsrs	r1, r3, #1
   100e6:	f013 03fe 	ands.w	r3, r3, #254	; 0xfe
   100ea:	bf18      	it	ne
   100ec:	f10d 0315 	addne.w	r3, sp, #21
   100f0:	f10d 0205 	add.w	r2, sp, #5
   100f4:	4628      	mov	r0, r5
   100f6:	f7ff ffa1 	bl	1003c <bt_mesh_subnet_set>
   100fa:	4604      	mov	r4, r0
   100fc:	e7db      	b.n	100b6 <net_key_set+0x16>
   100fe:	bf00      	nop
   10100:	000316aa 	.word	0x000316aa
   10104:	00032f7c 	.word	0x00032f7c

00010108 <bt_mesh_subnet_find>:
{
   10108:	4603      	mov	r3, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   1010a:	4807      	ldr	r0, [pc, #28]	; (10128 <bt_mesh_subnet_find+0x20>)
{
   1010c:	b510      	push	{r4, lr}
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   1010e:	8b84      	ldrh	r4, [r0, #28]
   10110:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10114:	4294      	cmp	r4, r2
   10116:	d005      	beq.n	10124 <bt_mesh_subnet_find+0x1c>
		if (!cb || cb(&subnets[i], cb_data)) {
   10118:	b90b      	cbnz	r3, 1011e <bt_mesh_subnet_find+0x16>
			return &subnets[i];
   1011a:	4803      	ldr	r0, [pc, #12]	; (10128 <bt_mesh_subnet_find+0x20>)
}
   1011c:	bd10      	pop	{r4, pc}
		if (!cb || cb(&subnets[i], cb_data)) {
   1011e:	4798      	blx	r3
   10120:	2800      	cmp	r0, #0
   10122:	d1fa      	bne.n	1011a <bt_mesh_subnet_find+0x12>
	return NULL;
   10124:	2000      	movs	r0, #0
   10126:	e7f9      	b.n	1011c <bt_mesh_subnet_find+0x14>
   10128:	20001330 	.word	0x20001330

0001012c <bt_mesh_subnet_foreach>:
{
   1012c:	b508      	push	{r3, lr}
   1012e:	4603      	mov	r3, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   10130:	4805      	ldr	r0, [pc, #20]	; (10148 <bt_mesh_subnet_foreach+0x1c>)
   10132:	8b81      	ldrh	r1, [r0, #28]
   10134:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10138:	4291      	cmp	r1, r2
   1013a:	d002      	beq.n	10142 <bt_mesh_subnet_foreach+0x16>
		cb(&subnets[i]);
   1013c:	4798      	blx	r3
		count++;
   1013e:	2001      	movs	r0, #1
}
   10140:	bd08      	pop	{r3, pc}
   10142:	2000      	movs	r0, #0
	return count;
   10144:	e7fc      	b.n	10140 <bt_mesh_subnet_foreach+0x14>
   10146:	bf00      	nop
   10148:	20001330 	.word	0x20001330

0001014c <bt_mesh_subnet_next>:
	if (sub) {
   1014c:	b178      	cbz	r0, 1016e <bt_mesh_subnet_next+0x22>
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
   1014e:	4a09      	ldr	r2, [pc, #36]	; (10174 <bt_mesh_subnet_next+0x28>)
		sub++;
   10150:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
		sub = &subnets[0];
   10154:	f1a2 01e0 	sub.w	r1, r2, #224	; 0xe0
   10158:	4293      	cmp	r3, r2
   1015a:	bf08      	it	eq
   1015c:	460b      	moveq	r3, r1
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   1015e:	8b98      	ldrh	r0, [r3, #28]
}
   10160:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10164:	4290      	cmp	r0, r2
   10166:	bf14      	ite	ne
   10168:	4618      	movne	r0, r3
   1016a:	2000      	moveq	r0, #0
   1016c:	4770      	bx	lr
		sub = &subnets[0];
   1016e:	4b02      	ldr	r3, [pc, #8]	; (10178 <bt_mesh_subnet_next+0x2c>)
   10170:	e7f5      	b.n	1015e <bt_mesh_subnet_next+0x12>
   10172:	bf00      	nop
   10174:	20001410 	.word	0x20001410
   10178:	20001330 	.word	0x20001330

0001017c <bt_mesh_net_keys_reset>:
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   1017c:	4804      	ldr	r0, [pc, #16]	; (10190 <bt_mesh_net_keys_reset+0x14>)
   1017e:	8b82      	ldrh	r2, [r0, #28]
   10180:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10184:	429a      	cmp	r2, r3
   10186:	d001      	beq.n	1018c <bt_mesh_net_keys_reset+0x10>
			subnet_del(sub);
   10188:	f01a bf3b 	b.w	2b002 <subnet_del>
}
   1018c:	4770      	bx	lr
   1018e:	bf00      	nop
   10190:	20001330 	.word	0x20001330

00010194 <bt_mesh_net_cred_find>:
{
   10194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10198:	461d      	mov	r5, r3
		if (!frnd->subnet) {
   1019a:	4b34      	ldr	r3, [pc, #208]	; (1026c <bt_mesh_net_cred_find+0xd8>)
   1019c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
{
   101a0:	4604      	mov	r4, r0
   101a2:	460e      	mov	r6, r1
   101a4:	4617      	mov	r7, r2
   101a6:	4698      	mov	r8, r3
		if (!frnd->subnet) {
   101a8:	f1bc 0f00 	cmp.w	ip, #0
   101ac:	d013      	beq.n	101d6 <bt_mesh_net_cred_find+0x42>
		rx->sub = frnd->subnet;
   101ae:	f8c0 c000 	str.w	ip, [r0]
			if (!rx->sub->keys[j].valid) {
   101b2:	f89c c02c 	ldrb.w	ip, [ip, #44]	; 0x2c
   101b6:	f1bc 0f00 	cmp.w	ip, #0
   101ba:	d002      	beq.n	101c2 <bt_mesh_net_cred_find+0x2e>
			if (cb(rx, in, out, &frnd->cred[j])) {
   101bc:	3334      	adds	r3, #52	; 0x34
   101be:	47a8      	blx	r5
   101c0:	bb68      	cbnz	r0, 1021e <bt_mesh_net_cred_find+0x8a>
			if (!rx->sub->keys[j].valid) {
   101c2:	6823      	ldr	r3, [r4, #0]
   101c4:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
   101c8:	b12b      	cbz	r3, 101d6 <bt_mesh_net_cred_find+0x42>
			if (cb(rx, in, out, &frnd->cred[j])) {
   101ca:	4b29      	ldr	r3, [pc, #164]	; (10270 <bt_mesh_net_cred_find+0xdc>)
   101cc:	463a      	mov	r2, r7
   101ce:	4631      	mov	r1, r6
   101d0:	4620      	mov	r0, r4
   101d2:	47a8      	blx	r5
   101d4:	b9b0      	cbnz	r0, 10204 <bt_mesh_net_cred_find+0x70>
		if (!frnd->subnet) {
   101d6:	f8d8 3118 	ldr.w	r3, [r8, #280]	; 0x118
   101da:	b313      	cbz	r3, 10222 <bt_mesh_net_cred_find+0x8e>
		rx->sub = frnd->subnet;
   101dc:	6023      	str	r3, [r4, #0]
			if (!rx->sub->keys[j].valid) {
   101de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   101e2:	b12b      	cbz	r3, 101f0 <bt_mesh_net_cred_find+0x5c>
			if (cb(rx, in, out, &frnd->cred[j])) {
   101e4:	4b23      	ldr	r3, [pc, #140]	; (10274 <bt_mesh_net_cred_find+0xe0>)
   101e6:	463a      	mov	r2, r7
   101e8:	4631      	mov	r1, r6
   101ea:	4620      	mov	r0, r4
   101ec:	47a8      	blx	r5
   101ee:	b9b0      	cbnz	r0, 1021e <bt_mesh_net_cred_find+0x8a>
			if (!rx->sub->keys[j].valid) {
   101f0:	6823      	ldr	r3, [r4, #0]
   101f2:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
   101f6:	b1a3      	cbz	r3, 10222 <bt_mesh_net_cred_find+0x8e>
			if (cb(rx, in, out, &frnd->cred[j])) {
   101f8:	4b1f      	ldr	r3, [pc, #124]	; (10278 <bt_mesh_net_cred_find+0xe4>)
   101fa:	463a      	mov	r2, r7
   101fc:	4631      	mov	r1, r6
   101fe:	4620      	mov	r0, r4
   10200:	47a8      	blx	r5
   10202:	b170      	cbz	r0, 10222 <bt_mesh_net_cred_find+0x8e>
		for (j = 0; j < ARRAY_SIZE(frnd->cred); j++) {
   10204:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
   10206:	7d23      	ldrb	r3, [r4, #20]
   10208:	f362 0341 	bfi	r3, r2, #1, #1
				rx->friend_cred = 1U;
   1020c:	f043 0304 	orr.w	r3, r3, #4
				rx->friend_cred = 0U;
   10210:	7523      	strb	r3, [r4, #20]
				rx->ctx.net_idx = rx->sub->net_idx;
   10212:	6823      	ldr	r3, [r4, #0]
   10214:	8b9b      	ldrh	r3, [r3, #28]
   10216:	80a3      	strh	r3, [r4, #4]
				return true;
   10218:	2001      	movs	r0, #1
}
   1021a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (j = 0; j < ARRAY_SIZE(frnd->cred); j++) {
   1021e:	2200      	movs	r2, #0
   10220:	e7f1      	b.n	10206 <bt_mesh_net_cred_find+0x72>
		rx->sub = &subnets[i];
   10222:	4b16      	ldr	r3, [pc, #88]	; (1027c <bt_mesh_net_cred_find+0xe8>)
   10224:	6023      	str	r3, [r4, #0]
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
   10226:	8b99      	ldrh	r1, [r3, #28]
   10228:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1022c:	4291      	cmp	r1, r2
   1022e:	d01b      	beq.n	10268 <bt_mesh_net_cred_find+0xd4>
			if (!rx->sub->keys[j].valid) {
   10230:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   10234:	b12a      	cbz	r2, 10242 <bt_mesh_net_cred_find+0xae>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
   10236:	333d      	adds	r3, #61	; 0x3d
   10238:	463a      	mov	r2, r7
   1023a:	4631      	mov	r1, r6
   1023c:	4620      	mov	r0, r4
   1023e:	47a8      	blx	r5
   10240:	b980      	cbnz	r0, 10264 <bt_mesh_net_cred_find+0xd0>
			if (!rx->sub->keys[j].valid) {
   10242:	6823      	ldr	r3, [r4, #0]
   10244:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
   10248:	b172      	cbz	r2, 10268 <bt_mesh_net_cred_find+0xd4>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
   1024a:	3397      	adds	r3, #151	; 0x97
   1024c:	463a      	mov	r2, r7
   1024e:	4631      	mov	r1, r6
   10250:	4620      	mov	r0, r4
   10252:	47a8      	blx	r5
   10254:	b140      	cbz	r0, 10268 <bt_mesh_net_cred_find+0xd4>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
   10256:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
   10258:	7d23      	ldrb	r3, [r4, #20]
   1025a:	f362 0341 	bfi	r3, r2, #1, #1
				rx->friend_cred = 0U;
   1025e:	f36f 0382 	bfc	r3, #2, #1
   10262:	e7d5      	b.n	10210 <bt_mesh_net_cred_find+0x7c>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
   10264:	2200      	movs	r2, #0
   10266:	e7f7      	b.n	10258 <bt_mesh_net_cred_find+0xc4>
	return false;
   10268:	2000      	movs	r0, #0
   1026a:	e7d6      	b.n	1021a <bt_mesh_net_cred_find+0x86>
   1026c:	20002968 	.word	0x20002968
   10270:	200029bd 	.word	0x200029bd
   10274:	20002a84 	.word	0x20002a84
   10278:	20002aa5 	.word	0x20002aa5
   1027c:	20001330 	.word	0x20001330

00010280 <bt_mesh_subnet_pending_store>:

BT_MESH_SETTINGS_DEFINE(subnet, "NetKey", net_key_set);

void bt_mesh_subnet_pending_store(void)
{
   10280:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(net_key_updates); i++) {
		struct net_key_update *update = &net_key_updates[i];

		if (!update->valid) {
   10282:	4c09      	ldr	r4, [pc, #36]	; (102a8 <bt_mesh_subnet_pending_store+0x28>)
   10284:	7863      	ldrb	r3, [r4, #1]
   10286:	06da      	lsls	r2, r3, #27
   10288:	d50a      	bpl.n	102a0 <bt_mesh_subnet_pending_store+0x20>
			continue;
		}

		if (update->clear) {
   1028a:	8820      	ldrh	r0, [r4, #0]
   1028c:	069b      	lsls	r3, r3, #26
   1028e:	f3c0 000b 	ubfx	r0, r0, #0, #12
   10292:	d506      	bpl.n	102a2 <bt_mesh_subnet_pending_store+0x22>
			clear_net_key(update->key_idx);
   10294:	f7ff fd3c 	bl	fd10 <clear_net_key>
		} else {
			store_subnet(update->key_idx);
		}

		update->valid = 0U;
   10298:	7863      	ldrb	r3, [r4, #1]
   1029a:	f36f 1304 	bfc	r3, #4, #1
   1029e:	7063      	strb	r3, [r4, #1]
	}
}
   102a0:	bd10      	pop	{r4, pc}
			store_subnet(update->key_idx);
   102a2:	f7ff fdd3 	bl	fe4c <store_subnet>
   102a6:	e7f7      	b.n	10298 <bt_mesh_subnet_pending_store+0x18>
   102a8:	200056be 	.word	0x200056be

000102ac <clear_app_key>:

	return NULL;
}

static void clear_app_key(uint16_t app_idx)
{
   102ac:	b510      	push	{r4, lr}
   102ae:	b086      	sub	sp, #24
	char path[20];
	int err;

	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   102b0:	4603      	mov	r3, r0
{
   102b2:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   102b4:	4a07      	ldr	r2, [pc, #28]	; (102d4 <clear_app_key+0x28>)
   102b6:	2114      	movs	r1, #20
   102b8:	a801      	add	r0, sp, #4
   102ba:	f017 fb17 	bl	278ec <snprintk>
	err = settings_delete(path);
   102be:	a801      	add	r0, sp, #4
   102c0:	f017 ff10 	bl	280e4 <settings_delete>
	if (err) {
   102c4:	b120      	cbz	r0, 102d0 <clear_app_key+0x24>
		BT_ERR("Failed to clear AppKeyIndex 0x%03x", app_idx);
   102c6:	4622      	mov	r2, r4
   102c8:	2145      	movs	r1, #69	; 0x45
   102ca:	4803      	ldr	r0, [pc, #12]	; (102d8 <clear_app_key+0x2c>)
   102cc:	f017 fb01 	bl	278d2 <printk>
	} else {
		BT_DBG("Cleared AppKeyIndex 0x%03x", app_idx);
	}
}
   102d0:	b006      	add	sp, #24
   102d2:	bd10      	pop	{r4, pc}
   102d4:	00033171 	.word	0x00033171
   102d8:	00033183 	.word	0x00033183

000102dc <app_key_evt>:

	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
}

static void app_key_evt(struct app_key *app, enum bt_mesh_key_evt evt)
{
   102dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
   102e0:	4e0d      	ldr	r6, [pc, #52]	; (10318 <app_key_evt+0x3c>)
   102e2:	4c0e      	ldr	r4, [pc, #56]	; (1031c <app_key_evt+0x40>)
   102e4:	4f0e      	ldr	r7, [pc, #56]	; (10320 <app_key_evt+0x44>)
{
   102e6:	4605      	mov	r5, r0
   102e8:	4689      	mov	r9, r1
   102ea:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
   102ec:	42b4      	cmp	r4, r6
   102ee:	d908      	bls.n	10302 <app_key_evt+0x26>
   102f0:	4639      	mov	r1, r7
   102f2:	480c      	ldr	r0, [pc, #48]	; (10324 <app_key_evt+0x48>)
   102f4:	22b2      	movs	r2, #178	; 0xb2
   102f6:	f017 faec 	bl	278d2 <printk>
   102fa:	21b2      	movs	r1, #178	; 0xb2
   102fc:	4638      	mov	r0, r7
   102fe:	f017 fd61 	bl	27dc4 <assert_post_action>
   10302:	4544      	cmp	r4, r8
   10304:	d301      	bcc.n	1030a <app_key_evt+0x2e>
		cb->evt_handler(app->app_idx, app->net_idx, evt);
	}
}
   10306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cb->evt_handler(app->app_idx, app->net_idx, evt);
   1030a:	f854 3b04 	ldr.w	r3, [r4], #4
   1030e:	8829      	ldrh	r1, [r5, #0]
   10310:	8868      	ldrh	r0, [r5, #2]
   10312:	464a      	mov	r2, r9
   10314:	4798      	blx	r3
   10316:	e7e9      	b.n	102ec <app_key_evt+0x10>
   10318:	0002eef0 	.word	0x0002eef0
   1031c:	0002eeec 	.word	0x0002eeec
   10320:	000330d0 	.word	0x000330d0
   10324:	0003067f 	.word	0x0003067f

00010328 <store_app_key>:
{
   10328:	b510      	push	{r4, lr}
   1032a:	b08e      	sub	sp, #56	; 0x38
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   1032c:	4603      	mov	r3, r0
{
   1032e:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   10330:	4a1a      	ldr	r2, [pc, #104]	; (1039c <store_app_key+0x74>)
   10332:	2114      	movs	r1, #20
   10334:	4668      	mov	r0, sp
   10336:	f017 fad9 	bl	278ec <snprintk>
		if (apps[i].app_idx == app_idx) {
   1033a:	4b19      	ldr	r3, [pc, #100]	; (103a0 <store_app_key+0x78>)
   1033c:	885a      	ldrh	r2, [r3, #2]
   1033e:	42a2      	cmp	r2, r4
   10340:	d006      	beq.n	10350 <store_app_key+0x28>
		BT_WARN("ApKeyIndex 0x%03x not found", app_idx);
   10342:	4818      	ldr	r0, [pc, #96]	; (103a4 <store_app_key+0x7c>)
   10344:	4622      	mov	r2, r4
   10346:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
   10348:	f017 fac3 	bl	278d2 <printk>
}
   1034c:	b00e      	add	sp, #56	; 0x38
   1034e:	bd10      	pop	{r4, pc}
	key.net_idx = app->net_idx,
   10350:	881a      	ldrh	r2, [r3, #0]
   10352:	f8ad 2014 	strh.w	r2, [sp, #20]
	key.updated = app->updated,
   10356:	791a      	ldrb	r2, [r3, #4]
   10358:	f88d 2016 	strb.w	r2, [sp, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
   1035c:	f10d 0117 	add.w	r1, sp, #23
   10360:	1d9a      	adds	r2, r3, #6
   10362:	3316      	adds	r3, #22
   10364:	f852 0b04 	ldr.w	r0, [r2], #4
   10368:	f841 0b04 	str.w	r0, [r1], #4
   1036c:	429a      	cmp	r2, r3
   1036e:	d1f9      	bne.n	10364 <store_app_key+0x3c>
	memcpy(key.val[1], app->keys[1].val, 16);
   10370:	4b0d      	ldr	r3, [pc, #52]	; (103a8 <store_app_key+0x80>)
   10372:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   10376:	f103 0110 	add.w	r1, r3, #16
   1037a:	f853 0b04 	ldr.w	r0, [r3], #4
   1037e:	f842 0b04 	str.w	r0, [r2], #4
   10382:	428b      	cmp	r3, r1
   10384:	d1f9      	bne.n	1037a <store_app_key+0x52>
	err = settings_save_one(path, &key, sizeof(key));
   10386:	2223      	movs	r2, #35	; 0x23
   10388:	a905      	add	r1, sp, #20
   1038a:	4668      	mov	r0, sp
   1038c:	f7f5 fde6 	bl	5f5c <settings_save_one>
	if (err) {
   10390:	2800      	cmp	r0, #0
   10392:	d0db      	beq.n	1034c <store_app_key+0x24>
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
   10394:	466a      	mov	r2, sp
   10396:	2145      	movs	r1, #69	; 0x45
   10398:	4804      	ldr	r0, [pc, #16]	; (103ac <store_app_key+0x84>)
   1039a:	e7d5      	b.n	10348 <store_app_key+0x20>
   1039c:	00033171 	.word	0x00033171
   103a0:	20001c4c 	.word	0x20001c4c
   103a4:	000331ab 	.word	0x000331ab
   103a8:	20001c63 	.word	0x20001c63
   103ac:	000331cc 	.word	0x000331cc

000103b0 <update_app_key_settings>:
		if (update->key_idx == key_idx) {
   103b0:	4a11      	ldr	r2, [pc, #68]	; (103f8 <update_app_key_settings+0x48>)
		if (!update->valid) {
   103b2:	7853      	ldrb	r3, [r2, #1]
{
   103b4:	b470      	push	{r4, r5, r6}
		if (update->key_idx == key_idx) {
   103b6:	8814      	ldrh	r4, [r2, #0]
		if (!update->valid) {
   103b8:	f013 0f10 	tst.w	r3, #16
	uint8_t clear = store ? 0U : 1U;
   103bc:	f081 0501 	eor.w	r5, r1, #1
		if (update->key_idx == key_idx) {
   103c0:	f3c4 040b 	ubfx	r4, r4, #0, #12
		if (!update->valid) {
   103c4:	d10f      	bne.n	103e6 <update_app_key_settings+0x36>
	free_slot->valid = 1U;
   103c6:	f043 0310 	orr.w	r3, r3, #16
   103ca:	7053      	strb	r3, [r2, #1]
	free_slot->key_idx = app_idx;
   103cc:	8813      	ldrh	r3, [r2, #0]
   103ce:	f360 030b 	bfi	r3, r0, #0, #12
   103d2:	8013      	strh	r3, [r2, #0]
	free_slot->clear = clear;
   103d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
		update->clear = clear;
   103d8:	f365 1345 	bfi	r3, r5, #5, #1
   103dc:	7053      	strb	r3, [r2, #1]
		bt_mesh_settings_store_schedule(
   103de:	2002      	movs	r0, #2
}
   103e0:	bc70      	pop	{r4, r5, r6}
		bt_mesh_settings_store_schedule(
   103e2:	f005 b821 	b.w	15428 <bt_mesh_settings_store_schedule>
		if (update->key_idx == key_idx) {
   103e6:	4284      	cmp	r4, r0
   103e8:	d0f6      	beq.n	103d8 <update_app_key_settings+0x28>
		if (store) {
   103ea:	b111      	cbz	r1, 103f2 <update_app_key_settings+0x42>
}
   103ec:	bc70      	pop	{r4, r5, r6}
			store_app_key(app_idx);
   103ee:	f7ff bf9b 	b.w	10328 <store_app_key>
}
   103f2:	bc70      	pop	{r4, r5, r6}
			clear_app_key(app_idx);
   103f4:	f7ff bf5a 	b.w	102ac <clear_app_key>
   103f8:	200056c0 	.word	0x200056c0

000103fc <subnet_evt>:
	return BT_MESH_KEY_UNUSED;
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
   103fc:	f011 0ffd 	tst.w	r1, #253	; 0xfd
{
   10400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10402:	4606      	mov	r6, r0
   10404:	460b      	mov	r3, r1
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
   10406:	d037      	beq.n	10478 <subnet_evt+0x7c>
	}

	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		struct app_key *app = &apps[i];

		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   10408:	481c      	ldr	r0, [pc, #112]	; (1047c <subnet_evt+0x80>)
   1040a:	8845      	ldrh	r5, [r0, #2]
   1040c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10410:	4295      	cmp	r5, r2
   10412:	4604      	mov	r4, r0
   10414:	d030      	beq.n	10478 <subnet_evt+0x7c>
			continue;
		}

		if (app->net_idx != sub->net_idx) {
   10416:	8807      	ldrh	r7, [r0, #0]
   10418:	8bb2      	ldrh	r2, [r6, #28]
   1041a:	4297      	cmp	r7, r2
   1041c:	d12c      	bne.n	10478 <subnet_evt+0x7c>
			continue;
		}

		if (evt == BT_MESH_KEY_DELETED) {
   1041e:	2b01      	cmp	r3, #1
   10420:	d103      	bne.n	1042a <subnet_evt+0x2e>
			app_key_revoke(app);
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
		}
	}
}
   10422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			app_key_del(app);
   10426:	f01a bed0 	b.w	2b1ca <app_key_del>
		} else if (evt == BT_MESH_KEY_REVOKED) {
   1042a:	2b04      	cmp	r3, #4
   1042c:	d11f      	bne.n	1046e <subnet_evt+0x72>
	if (!app->updated) {
   1042e:	7923      	ldrb	r3, [r4, #4]
   10430:	b313      	cbz	r3, 10478 <subnet_evt+0x7c>
	memcpy(&app->keys[0], &app->keys[1], sizeof(app->keys[0]));
   10432:	f104 0316 	add.w	r3, r4, #22
   10436:	1d62      	adds	r2, r4, #5
   10438:	f104 0126 	add.w	r1, r4, #38	; 0x26
   1043c:	f853 0b04 	ldr.w	r0, [r3], #4
   10440:	f842 0b04 	str.w	r0, [r2], #4
   10444:	428b      	cmp	r3, r1
   10446:	d1f9      	bne.n	1043c <subnet_evt+0x40>
   10448:	781b      	ldrb	r3, [r3, #0]
   1044a:	7013      	strb	r3, [r2, #0]
	memset(&app->keys[1], 0, sizeof(app->keys[1]));
   1044c:	2100      	movs	r1, #0
   1044e:	2211      	movs	r2, #17
   10450:	480b      	ldr	r0, [pc, #44]	; (10480 <subnet_evt+0x84>)
   10452:	f01d ff65 	bl	2e320 <memset>
	app->updated = false;
   10456:	2300      	movs	r3, #0
		update_app_key_settings(app->app_idx, true);
   10458:	2101      	movs	r1, #1
   1045a:	4628      	mov	r0, r5
	app->updated = false;
   1045c:	7123      	strb	r3, [r4, #4]
		update_app_key_settings(app->app_idx, true);
   1045e:	f7ff ffa7 	bl	103b0 <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_REVOKED);
   10462:	4806      	ldr	r0, [pc, #24]	; (1047c <subnet_evt+0x80>)
   10464:	2104      	movs	r1, #4
}
   10466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
   1046a:	f7ff bf37 	b.w	102dc <app_key_evt>
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
   1046e:	2b03      	cmp	r3, #3
   10470:	d102      	bne.n	10478 <subnet_evt+0x7c>
   10472:	7903      	ldrb	r3, [r0, #4]
   10474:	2b00      	cmp	r3, #0
   10476:	d1f6      	bne.n	10466 <subnet_evt+0x6a>
}
   10478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1047a:	bf00      	nop
   1047c:	20001c4c 	.word	0x20001c4c
   10480:	20001c62 	.word	0x20001c62

00010484 <bt_mesh_app_key_add>:
{
   10484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10486:	4606      	mov	r6, r0
	if (!bt_mesh_subnet_get(net_idx)) {
   10488:	4608      	mov	r0, r1
{
   1048a:	460f      	mov	r7, r1
   1048c:	4615      	mov	r5, r2
	if (!bt_mesh_subnet_get(net_idx)) {
   1048e:	f01a fe9a 	bl	2b1c6 <bt_mesh_subnet_get>
   10492:	b390      	cbz	r0, 104fa <bt_mesh_app_key_add+0x76>
		if (apps[i].app_idx == app_idx) {
   10494:	4c1c      	ldr	r4, [pc, #112]	; (10508 <bt_mesh_app_key_add+0x84>)
   10496:	8863      	ldrh	r3, [r4, #2]
   10498:	429e      	cmp	r6, r3
   1049a:	d00a      	beq.n	104b2 <bt_mesh_app_key_add+0x2e>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
   1049c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   104a0:	4293      	cmp	r3, r2
   104a2:	d12c      	bne.n	104fe <bt_mesh_app_key_add+0x7a>
			const uint8_t net_id[16], uint32_t iv_index,
			uint8_t auth[8]);

static inline int bt_mesh_app_id(const uint8_t app_key[16], uint8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
   104a4:	1d61      	adds	r1, r4, #5
   104a6:	4628      	mov	r0, r5
   104a8:	f002 f87e 	bl	125a8 <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[0].id)) {
   104ac:	b170      	cbz	r0, 104cc <bt_mesh_app_key_add+0x48>
		return STATUS_CANNOT_SET;
   104ae:	200f      	movs	r0, #15
   104b0:	e00b      	b.n	104ca <bt_mesh_app_key_add+0x46>
		if (app->net_idx != net_idx) {
   104b2:	8823      	ldrh	r3, [r4, #0]
   104b4:	42bb      	cmp	r3, r7
   104b6:	d124      	bne.n	10502 <bt_mesh_app_key_add+0x7e>
		if (memcmp(key, app->keys[0].val, 16)) {
   104b8:	2210      	movs	r2, #16
   104ba:	1da1      	adds	r1, r4, #6
   104bc:	4628      	mov	r0, r5
   104be:	f01d fee6 	bl	2e28e <memcmp>
		return STATUS_SUCCESS;
   104c2:	2800      	cmp	r0, #0
   104c4:	bf14      	ite	ne
   104c6:	2006      	movne	r0, #6
   104c8:	2000      	moveq	r0, #0
}
   104ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	app->updated = false;
   104cc:	7120      	strb	r0, [r4, #4]
	app->net_idx = net_idx;
   104ce:	8027      	strh	r7, [r4, #0]
	app->app_idx = app_idx;
   104d0:	8066      	strh	r6, [r4, #2]
   104d2:	4628      	mov	r0, r5
   104d4:	3406      	adds	r4, #6
   104d6:	f105 0310 	add.w	r3, r5, #16
   104da:	f850 2b04 	ldr.w	r2, [r0], #4
   104de:	f844 2b04 	str.w	r2, [r4], #4
   104e2:	4298      	cmp	r0, r3
   104e4:	d1f9      	bne.n	104da <bt_mesh_app_key_add+0x56>
		update_app_key_settings(app->app_idx, true);
   104e6:	2101      	movs	r1, #1
   104e8:	4630      	mov	r0, r6
   104ea:	f7ff ff61 	bl	103b0 <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_ADDED);
   104ee:	4806      	ldr	r0, [pc, #24]	; (10508 <bt_mesh_app_key_add+0x84>)
   104f0:	2100      	movs	r1, #0
   104f2:	f7ff fef3 	bl	102dc <app_key_evt>
	return STATUS_SUCCESS;
   104f6:	2000      	movs	r0, #0
   104f8:	e7e7      	b.n	104ca <bt_mesh_app_key_add+0x46>
		return STATUS_INVALID_NETKEY;
   104fa:	2004      	movs	r0, #4
   104fc:	e7e5      	b.n	104ca <bt_mesh_app_key_add+0x46>
		return STATUS_INSUFF_RESOURCES;
   104fe:	2005      	movs	r0, #5
   10500:	e7e3      	b.n	104ca <bt_mesh_app_key_add+0x46>
			return STATUS_INVALID_BINDING;
   10502:	2011      	movs	r0, #17
   10504:	e7e1      	b.n	104ca <bt_mesh_app_key_add+0x46>
   10506:	bf00      	nop
   10508:	20001c4c 	.word	0x20001c4c

0001050c <bt_mesh_app_key_update>:
		if (apps[i].app_idx == app_idx) {
   1050c:	4b21      	ldr	r3, [pc, #132]	; (10594 <bt_mesh_app_key_update+0x88>)
{
   1050e:	b570      	push	{r4, r5, r6, lr}
   10510:	4614      	mov	r4, r2
		if (apps[i].app_idx == app_idx) {
   10512:	885a      	ldrh	r2, [r3, #2]
   10514:	4282      	cmp	r2, r0
   10516:	461d      	mov	r5, r3
   10518:	d135      	bne.n	10586 <bt_mesh_app_key_update+0x7a>
	if (net_idx != BT_MESH_KEY_UNUSED && app->net_idx != net_idx) {
   1051a:	8818      	ldrh	r0, [r3, #0]
   1051c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10520:	4299      	cmp	r1, r3
   10522:	d001      	beq.n	10528 <bt_mesh_app_key_update+0x1c>
   10524:	4288      	cmp	r0, r1
   10526:	d130      	bne.n	1058a <bt_mesh_app_key_update+0x7e>
	sub = bt_mesh_subnet_get(app->net_idx);
   10528:	f01a fe4d 	bl	2b1c6 <bt_mesh_subnet_get>
	if (!sub) {
   1052c:	b378      	cbz	r0, 1058e <bt_mesh_app_key_update+0x82>
	if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
   1052e:	7f86      	ldrb	r6, [r0, #30]
   10530:	2e01      	cmp	r6, #1
   10532:	d001      	beq.n	10538 <bt_mesh_app_key_update+0x2c>
		return STATUS_CANNOT_UPDATE;
   10534:	200b      	movs	r0, #11
}
   10536:	bd70      	pop	{r4, r5, r6, pc}
	if (app->updated) {
   10538:	792b      	ldrb	r3, [r5, #4]
   1053a:	b14b      	cbz	r3, 10550 <bt_mesh_app_key_update+0x44>
		if (memcmp(app->keys[1].val, key, 16)) {
   1053c:	2210      	movs	r2, #16
   1053e:	4621      	mov	r1, r4
   10540:	4815      	ldr	r0, [pc, #84]	; (10598 <bt_mesh_app_key_update+0x8c>)
   10542:	f01d fea4 	bl	2e28e <memcmp>
		return STATUS_SUCCESS;
   10546:	2800      	cmp	r0, #0
   10548:	bf14      	ite	ne
   1054a:	2006      	movne	r0, #6
   1054c:	2000      	moveq	r0, #0
   1054e:	e7f2      	b.n	10536 <bt_mesh_app_key_update+0x2a>
   10550:	4912      	ldr	r1, [pc, #72]	; (1059c <bt_mesh_app_key_update+0x90>)
   10552:	4620      	mov	r0, r4
   10554:	f002 f828 	bl	125a8 <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[1].id)) {
   10558:	2800      	cmp	r0, #0
   1055a:	d1eb      	bne.n	10534 <bt_mesh_app_key_update+0x28>
   1055c:	4b0e      	ldr	r3, [pc, #56]	; (10598 <bt_mesh_app_key_update+0x8c>)
	app->updated = true;
   1055e:	712e      	strb	r6, [r5, #4]
   10560:	4622      	mov	r2, r4
   10562:	f104 0110 	add.w	r1, r4, #16
   10566:	f852 0b04 	ldr.w	r0, [r2], #4
   1056a:	f843 0b04 	str.w	r0, [r3], #4
   1056e:	428a      	cmp	r2, r1
   10570:	d1f9      	bne.n	10566 <bt_mesh_app_key_update+0x5a>
		update_app_key_settings(app->app_idx, true);
   10572:	2101      	movs	r1, #1
   10574:	8868      	ldrh	r0, [r5, #2]
   10576:	f7ff ff1b 	bl	103b0 <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_UPDATED);
   1057a:	4806      	ldr	r0, [pc, #24]	; (10594 <bt_mesh_app_key_update+0x88>)
   1057c:	2102      	movs	r1, #2
   1057e:	f7ff fead 	bl	102dc <app_key_evt>
	return STATUS_SUCCESS;
   10582:	2000      	movs	r0, #0
   10584:	e7d7      	b.n	10536 <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_APPKEY;
   10586:	2003      	movs	r0, #3
   10588:	e7d5      	b.n	10536 <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_BINDING;
   1058a:	2011      	movs	r0, #17
   1058c:	e7d3      	b.n	10536 <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_NETKEY;
   1058e:	2004      	movs	r0, #4
   10590:	e7d1      	b.n	10536 <bt_mesh_app_key_update+0x2a>
   10592:	bf00      	nop
   10594:	20001c4c 	.word	0x20001c4c
   10598:	20001c63 	.word	0x20001c63
   1059c:	20001c62 	.word	0x20001c62

000105a0 <bt_mesh_app_key_del>:
{
   105a0:	b538      	push	{r3, r4, r5, lr}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   105a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   105a6:	4299      	cmp	r1, r3
{
   105a8:	4605      	mov	r5, r0
   105aa:	460c      	mov	r4, r1
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   105ac:	d105      	bne.n	105ba <bt_mesh_app_key_del+0x1a>
		if (apps[i].app_idx == app_idx) {
   105ae:	4b0d      	ldr	r3, [pc, #52]	; (105e4 <bt_mesh_app_key_del+0x44>)
   105b0:	885a      	ldrh	r2, [r3, #2]
   105b2:	42aa      	cmp	r2, r5
   105b4:	d008      	beq.n	105c8 <bt_mesh_app_key_del+0x28>
	return STATUS_SUCCESS;
   105b6:	2000      	movs	r0, #0
}
   105b8:	bd38      	pop	{r3, r4, r5, pc}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   105ba:	4608      	mov	r0, r1
   105bc:	f01a fe03 	bl	2b1c6 <bt_mesh_subnet_get>
   105c0:	2800      	cmp	r0, #0
   105c2:	d1f4      	bne.n	105ae <bt_mesh_app_key_del+0xe>
		return STATUS_INVALID_NETKEY;
   105c4:	2004      	movs	r0, #4
   105c6:	e7f7      	b.n	105b8 <bt_mesh_app_key_del+0x18>
	if (net_idx != BT_MESH_KEY_UNUSED && net_idx != app->net_idx) {
   105c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   105cc:	4294      	cmp	r4, r2
   105ce:	d002      	beq.n	105d6 <bt_mesh_app_key_del+0x36>
   105d0:	881b      	ldrh	r3, [r3, #0]
   105d2:	42a3      	cmp	r3, r4
   105d4:	d103      	bne.n	105de <bt_mesh_app_key_del+0x3e>
	app_key_del(app);
   105d6:	4803      	ldr	r0, [pc, #12]	; (105e4 <bt_mesh_app_key_del+0x44>)
   105d8:	f01a fdf7 	bl	2b1ca <app_key_del>
   105dc:	e7eb      	b.n	105b6 <bt_mesh_app_key_del+0x16>
		return STATUS_INVALID_BINDING;
   105de:	2011      	movs	r0, #17
   105e0:	e7ea      	b.n	105b8 <bt_mesh_app_key_del+0x18>
   105e2:	bf00      	nop
   105e4:	20001c4c 	.word	0x20001c4c

000105e8 <bt_mesh_app_key_set>:
{
   105e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (apps[i].app_idx == app_idx) {
   105ec:	4d1f      	ldr	r5, [pc, #124]	; (1066c <bt_mesh_app_key_set+0x84>)
{
   105ee:	461c      	mov	r4, r3
		if (apps[i].app_idx == app_idx) {
   105f0:	886b      	ldrh	r3, [r5, #2]
   105f2:	4298      	cmp	r0, r3
{
   105f4:	4607      	mov	r7, r0
   105f6:	4688      	mov	r8, r1
		if (apps[i].app_idx == app_idx) {
   105f8:	d032      	beq.n	10660 <bt_mesh_app_key_set+0x78>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
   105fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   105fe:	428b      	cmp	r3, r1
   10600:	d130      	bne.n	10664 <bt_mesh_app_key_set+0x7c>
   10602:	4613      	mov	r3, r2
   10604:	1da9      	adds	r1, r5, #6
   10606:	f102 0010 	add.w	r0, r2, #16
   1060a:	f853 6b04 	ldr.w	r6, [r3], #4
   1060e:	f841 6b04 	str.w	r6, [r1], #4
   10612:	4283      	cmp	r3, r0
   10614:	d1f9      	bne.n	1060a <bt_mesh_app_key_set+0x22>
   10616:	4916      	ldr	r1, [pc, #88]	; (10670 <bt_mesh_app_key_set+0x88>)
   10618:	4610      	mov	r0, r2
   1061a:	f001 ffc5 	bl	125a8 <bt_mesh_k4>
	if (bt_mesh_app_id(old_key, &app->keys[0].id)) {
   1061e:	4606      	mov	r6, r0
   10620:	b120      	cbz	r0, 1062c <bt_mesh_app_key_set+0x44>
		return -EIO;
   10622:	f06f 0604 	mvn.w	r6, #4
}
   10626:	4630      	mov	r0, r6
   10628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (new_key) {
   1062c:	b93c      	cbnz	r4, 1063e <bt_mesh_app_key_set+0x56>
	app->updated = !!new_key;
   1062e:	3400      	adds	r4, #0
   10630:	bf18      	it	ne
   10632:	2401      	movne	r4, #1
	app->net_idx = net_idx;
   10634:	f8a5 8000 	strh.w	r8, [r5]
	app->app_idx = app_idx;
   10638:	806f      	strh	r7, [r5, #2]
	app->updated = !!new_key;
   1063a:	712c      	strb	r4, [r5, #4]
	return 0;
   1063c:	e7f3      	b.n	10626 <bt_mesh_app_key_set+0x3e>
   1063e:	4a0d      	ldr	r2, [pc, #52]	; (10674 <bt_mesh_app_key_set+0x8c>)
   10640:	4623      	mov	r3, r4
   10642:	f104 0110 	add.w	r1, r4, #16
   10646:	f853 0b04 	ldr.w	r0, [r3], #4
   1064a:	f842 0b04 	str.w	r0, [r2], #4
   1064e:	428b      	cmp	r3, r1
   10650:	d1f9      	bne.n	10646 <bt_mesh_app_key_set+0x5e>
   10652:	4909      	ldr	r1, [pc, #36]	; (10678 <bt_mesh_app_key_set+0x90>)
   10654:	4620      	mov	r0, r4
   10656:	f001 ffa7 	bl	125a8 <bt_mesh_k4>
		if (bt_mesh_app_id(new_key, &app->keys[1].id)) {
   1065a:	2800      	cmp	r0, #0
   1065c:	d0e7      	beq.n	1062e <bt_mesh_app_key_set+0x46>
   1065e:	e7e0      	b.n	10622 <bt_mesh_app_key_set+0x3a>
		return 0;
   10660:	2600      	movs	r6, #0
   10662:	e7e0      	b.n	10626 <bt_mesh_app_key_set+0x3e>
		return -ENOMEM;
   10664:	f06f 060b 	mvn.w	r6, #11
   10668:	e7dd      	b.n	10626 <bt_mesh_app_key_set+0x3e>
   1066a:	bf00      	nop
   1066c:	20001c4c 	.word	0x20001c4c
   10670:	20001c51 	.word	0x20001c51
   10674:	20001c63 	.word	0x20001c63
   10678:	20001c62 	.word	0x20001c62

0001067c <app_key_set>:
	}
}

static int app_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   1067c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1067e:	460c      	mov	r4, r1
   10680:	b08b      	sub	sp, #44	; 0x2c
   10682:	4616      	mov	r6, r2
   10684:	461f      	mov	r7, r3
	struct app_key_val key;
	uint16_t app_idx;
	int err;

	if (!name) {
   10686:	b940      	cbnz	r0, 1069a <app_key_set+0x1e>
		BT_ERR("Insufficient number of arguments");
   10688:	2145      	movs	r1, #69	; 0x45
   1068a:	4817      	ldr	r0, [pc, #92]	; (106e8 <app_key_set+0x6c>)
   1068c:	f017 f921 	bl	278d2 <printk>
   10690:	f06f 0401 	mvn.w	r4, #1
	}

	BT_DBG("AppKeyIndex 0x%03x recovered from storage", app_idx);

	return 0;
}
   10694:	4620      	mov	r0, r4
   10696:	b00b      	add	sp, #44	; 0x2c
   10698:	bdf0      	pop	{r4, r5, r6, r7, pc}
	app_idx = strtol(name, NULL, 16);
   1069a:	2210      	movs	r2, #16
   1069c:	2100      	movs	r1, #0
   1069e:	f017 f80d 	bl	276bc <strtol>
   106a2:	4605      	mov	r5, r0
	if (!len_rd) {
   106a4:	2c00      	cmp	r4, #0
   106a6:	d0f5      	beq.n	10694 <app_key_set+0x18>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
   106a8:	2323      	movs	r3, #35	; 0x23
   106aa:	aa01      	add	r2, sp, #4
   106ac:	4639      	mov	r1, r7
   106ae:	4630      	mov	r0, r6
   106b0:	f004 fe98 	bl	153e4 <bt_mesh_settings_set>
	if (err < 0) {
   106b4:	2800      	cmp	r0, #0
   106b6:	db13      	blt.n	106e0 <app_key_set+0x64>
	err = bt_mesh_app_key_set(app_idx, key.net_idx, key.val[0],
   106b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   106bc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   106c0:	b10b      	cbz	r3, 106c6 <app_key_set+0x4a>
   106c2:	f10d 0317 	add.w	r3, sp, #23
   106c6:	f10d 0207 	add.w	r2, sp, #7
   106ca:	b2a8      	uxth	r0, r5
   106cc:	f7ff ff8c 	bl	105e8 <bt_mesh_app_key_set>
	if (err) {
   106d0:	4604      	mov	r4, r0
   106d2:	2800      	cmp	r0, #0
   106d4:	d0de      	beq.n	10694 <app_key_set+0x18>
		BT_ERR("Failed to set \'app-key\'");
   106d6:	2145      	movs	r1, #69	; 0x45
   106d8:	4804      	ldr	r0, [pc, #16]	; (106ec <app_key_set+0x70>)
   106da:	f017 f8fa 	bl	278d2 <printk>
		return err;
   106de:	e7d9      	b.n	10694 <app_key_set+0x18>
		return -EINVAL;
   106e0:	f06f 0415 	mvn.w	r4, #21
   106e4:	e7d6      	b.n	10694 <app_key_set+0x18>
   106e6:	bf00      	nop
   106e8:	000316aa 	.word	0x000316aa
   106ec:	00033104 	.word	0x00033104

000106f0 <bt_mesh_app_key_exists>:
		if (apps[i].app_idx == app_idx) {
   106f0:	4b02      	ldr	r3, [pc, #8]	; (106fc <bt_mesh_app_key_exists+0xc>)
   106f2:	885b      	ldrh	r3, [r3, #2]
}
   106f4:	1a1b      	subs	r3, r3, r0
   106f6:	4258      	negs	r0, r3
   106f8:	4158      	adcs	r0, r3
   106fa:	4770      	bx	lr
   106fc:	20001c4c 	.word	0x20001c4c

00010700 <bt_mesh_app_keys_get>:
{
   10700:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
   10702:	2500      	movs	r5, #0
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   10704:	4f0d      	ldr	r7, [pc, #52]	; (1073c <bt_mesh_app_keys_get+0x3c>)
	size_t count = 0;
   10706:	462c      	mov	r4, r5
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   10708:	f64f 7cff 	movw	ip, #65535	; 0xffff
   1070c:	887e      	ldrh	r6, [r7, #2]
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
   1070e:	b10d      	cbz	r5, 10714 <bt_mesh_app_keys_get+0x14>
	return count;
   10710:	4620      	mov	r0, r4
}
   10712:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   10714:	4566      	cmp	r6, ip
   10716:	d0fb      	beq.n	10710 <bt_mesh_app_keys_get+0x10>
		if (net_idx != BT_MESH_KEY_ANY && app->net_idx != net_idx) {
   10718:	4560      	cmp	r0, ip
   1071a:	d002      	beq.n	10722 <bt_mesh_app_keys_get+0x22>
   1071c:	883d      	ldrh	r5, [r7, #0]
   1071e:	4285      	cmp	r5, r0
   10720:	d101      	bne.n	10726 <bt_mesh_app_keys_get+0x26>
		if (skip) {
   10722:	b113      	cbz	r3, 1072a <bt_mesh_app_keys_get+0x2a>
			skip--;
   10724:	3b01      	subs	r3, #1
			continue;
   10726:	2501      	movs	r5, #1
   10728:	e7f0      	b.n	1070c <bt_mesh_app_keys_get+0xc>
		if (count >= max) {
   1072a:	4294      	cmp	r4, r2
   1072c:	d203      	bcs.n	10736 <bt_mesh_app_keys_get+0x36>
		app_idxs[count++] = app->app_idx;
   1072e:	f821 6014 	strh.w	r6, [r1, r4, lsl #1]
   10732:	3401      	adds	r4, #1
   10734:	e7f7      	b.n	10726 <bt_mesh_app_keys_get+0x26>
			return -ENOMEM;
   10736:	f06f 000b 	mvn.w	r0, #11
   1073a:	e7ea      	b.n	10712 <bt_mesh_app_keys_get+0x12>
   1073c:	20001c4c 	.word	0x20001c4c

00010740 <bt_mesh_keys_resolve>:
{
   10740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10744:	4615      	mov	r5, r2
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
   10746:	8842      	ldrh	r2, [r0, #2]
{
   10748:	461e      	mov	r6, r3
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
   1074a:	1cd3      	adds	r3, r2, #3
   1074c:	b29b      	uxth	r3, r3
   1074e:	2b01      	cmp	r3, #1
{
   10750:	4604      	mov	r4, r0
   10752:	460f      	mov	r7, r1
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
   10754:	d914      	bls.n	10780 <bt_mesh_keys_resolve+0x40>
		if (apps[i].app_idx == app_idx) {
   10756:	4c1f      	ldr	r4, [pc, #124]	; (107d4 <bt_mesh_keys_resolve+0x94>)
   10758:	8863      	ldrh	r3, [r4, #2]
   1075a:	4293      	cmp	r3, r2
   1075c:	46a0      	mov	r8, r4
   1075e:	d12f      	bne.n	107c0 <bt_mesh_keys_resolve+0x80>
	*sub = bt_mesh_subnet_get(app->net_idx);
   10760:	8820      	ldrh	r0, [r4, #0]
   10762:	f01a fd30 	bl	2b1c6 <bt_mesh_subnet_get>
   10766:	6038      	str	r0, [r7, #0]
	if (!*sub) {
   10768:	b178      	cbz	r0, 1078a <bt_mesh_keys_resolve+0x4a>
	if ((*sub)->kr_phase == BT_MESH_KR_PHASE_2 && app->updated) {
   1076a:	7f83      	ldrb	r3, [r0, #30]
   1076c:	2b02      	cmp	r3, #2
   1076e:	d12a      	bne.n	107c6 <bt_mesh_keys_resolve+0x86>
   10770:	7923      	ldrb	r3, [r4, #4]
   10772:	b343      	cbz	r3, 107c6 <bt_mesh_keys_resolve+0x86>
		*aid = app->keys[1].id;
   10774:	7da3      	ldrb	r3, [r4, #22]
   10776:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[1].val;
   10778:	3417      	adds	r4, #23
   1077a:	602c      	str	r4, [r5, #0]
	return 0;
   1077c:	2000      	movs	r0, #0
   1077e:	e01d      	b.n	107bc <bt_mesh_keys_resolve+0x7c>
		*sub = bt_mesh_subnet_get(ctx->net_idx);
   10780:	8800      	ldrh	r0, [r0, #0]
   10782:	f01a fd20 	bl	2b1c6 <bt_mesh_subnet_get>
   10786:	6038      	str	r0, [r7, #0]
		if (!*sub) {
   10788:	b918      	cbnz	r0, 10792 <bt_mesh_keys_resolve+0x52>
		BT_WARN("Unknown NetKey 0x%03x", app->net_idx);
   1078a:	8822      	ldrh	r2, [r4, #0]
   1078c:	4812      	ldr	r0, [pc, #72]	; (107d8 <bt_mesh_keys_resolve+0x98>)
   1078e:	2157      	movs	r1, #87	; 0x57
   10790:	e00b      	b.n	107aa <bt_mesh_keys_resolve+0x6a>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
   10792:	8862      	ldrh	r2, [r4, #2]
   10794:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   10798:	429a      	cmp	r2, r3
   1079a:	d10b      	bne.n	107b4 <bt_mesh_keys_resolve+0x74>
		    !bt_mesh_elem_find(ctx->addr)) {
   1079c:	88a0      	ldrh	r0, [r4, #4]
   1079e:	f002 faeb 	bl	12d78 <bt_mesh_elem_find>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
   107a2:	b938      	cbnz	r0, 107b4 <bt_mesh_keys_resolve+0x74>
				BT_WARN("No DevKey for 0x%04x", ctx->addr);
   107a4:	88a2      	ldrh	r2, [r4, #4]
   107a6:	480d      	ldr	r0, [pc, #52]	; (107dc <bt_mesh_keys_resolve+0x9c>)
   107a8:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Unknown NetKey 0x%03x", app->net_idx);
   107aa:	f017 f892 	bl	278d2 <printk>
		return -EINVAL;
   107ae:	f06f 0015 	mvn.w	r0, #21
   107b2:	e003      	b.n	107bc <bt_mesh_keys_resolve+0x7c>
			*app_key = bt_mesh.dev_key;
   107b4:	4b0a      	ldr	r3, [pc, #40]	; (107e0 <bt_mesh_keys_resolve+0xa0>)
   107b6:	602b      	str	r3, [r5, #0]
		*aid = 0;
   107b8:	2000      	movs	r0, #0
   107ba:	7030      	strb	r0, [r6, #0]
}
   107bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("Unknown AppKey 0x%03x", ctx->app_idx);
   107c0:	2157      	movs	r1, #87	; 0x57
   107c2:	4808      	ldr	r0, [pc, #32]	; (107e4 <bt_mesh_keys_resolve+0xa4>)
   107c4:	e7f1      	b.n	107aa <bt_mesh_keys_resolve+0x6a>
		*aid = app->keys[0].id;
   107c6:	f898 3005 	ldrb.w	r3, [r8, #5]
   107ca:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[0].val;
   107cc:	4b06      	ldr	r3, [pc, #24]	; (107e8 <bt_mesh_keys_resolve+0xa8>)
   107ce:	602b      	str	r3, [r5, #0]
   107d0:	e7d4      	b.n	1077c <bt_mesh_keys_resolve+0x3c>
   107d2:	bf00      	nop
   107d4:	20001c4c 	.word	0x20001c4c
   107d8:	00033121 	.word	0x00033121
   107dc:	0003313c 	.word	0x0003313c
   107e0:	20002b90 	.word	0x20002b90
   107e4:	00033156 	.word	0x00033156
   107e8:	20001c52 	.word	0x20001c52

000107ec <bt_mesh_app_key_find>:
{
   107ec:	b570      	push	{r4, r5, r6, lr}
   107ee:	4615      	mov	r5, r2
	if (dev_key) {
   107f0:	b180      	cbz	r0, 10814 <bt_mesh_app_key_find+0x28>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
   107f2:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
   107f6:	2a00      	cmp	r2, #0
   107f8:	dd04      	ble.n	10804 <bt_mesh_app_key_find+0x18>
			err = cb(rx, bt_mesh.dev_key, cb_data);
   107fa:	9a04      	ldr	r2, [sp, #16]
   107fc:	4915      	ldr	r1, [pc, #84]	; (10854 <bt_mesh_app_key_find+0x68>)
   107fe:	4628      	mov	r0, r5
   10800:	4798      	blx	r3
			if (!err) {
   10802:	b120      	cbz	r0, 1080e <bt_mesh_app_key_find+0x22>
		return BT_MESH_KEY_UNUSED;
   10804:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   10808:	bd70      	pop	{r4, r5, r6, pc}
			cred = &app->keys[0];
   1080a:	1d60      	adds	r0, r4, #5
   1080c:	e017      	b.n	1083e <bt_mesh_app_key_find+0x52>
				return BT_MESH_KEY_DEV_LOCAL;
   1080e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   10812:	e7f9      	b.n	10808 <bt_mesh_app_key_find+0x1c>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   10814:	4c10      	ldr	r4, [pc, #64]	; (10858 <bt_mesh_app_key_find+0x6c>)
   10816:	8860      	ldrh	r0, [r4, #2]
   10818:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1081c:	4290      	cmp	r0, r2
   1081e:	d0f1      	beq.n	10804 <bt_mesh_app_key_find+0x18>
		if (app->net_idx != rx->sub->net_idx) {
   10820:	682a      	ldr	r2, [r5, #0]
   10822:	8820      	ldrh	r0, [r4, #0]
   10824:	8b92      	ldrh	r2, [r2, #28]
   10826:	4290      	cmp	r0, r2
   10828:	d1ec      	bne.n	10804 <bt_mesh_app_key_find+0x18>
		if (rx->new_key && app->updated) {
   1082a:	7d2a      	ldrb	r2, [r5, #20]
   1082c:	0792      	lsls	r2, r2, #30
   1082e:	d5ec      	bpl.n	1080a <bt_mesh_app_key_find+0x1e>
   10830:	7926      	ldrb	r6, [r4, #4]
			cred = &app->keys[1];
   10832:	1d60      	adds	r0, r4, #5
   10834:	f104 0216 	add.w	r2, r4, #22
   10838:	2e00      	cmp	r6, #0
   1083a:	bf18      	it	ne
   1083c:	4610      	movne	r0, r2
		if (cred->id != aid) {
   1083e:	7802      	ldrb	r2, [r0, #0]
   10840:	428a      	cmp	r2, r1
   10842:	d1df      	bne.n	10804 <bt_mesh_app_key_find+0x18>
		err = cb(rx, cred->val, cb_data);
   10844:	1c41      	adds	r1, r0, #1
   10846:	9a04      	ldr	r2, [sp, #16]
   10848:	4628      	mov	r0, r5
   1084a:	4798      	blx	r3
		if (err) {
   1084c:	2800      	cmp	r0, #0
   1084e:	d1d9      	bne.n	10804 <bt_mesh_app_key_find+0x18>
		return app->app_idx;
   10850:	8860      	ldrh	r0, [r4, #2]
   10852:	e7d9      	b.n	10808 <bt_mesh_app_key_find+0x1c>
   10854:	20002b90 	.word	0x20002b90
   10858:	20001c4c 	.word	0x20001c4c

0001085c <bt_mesh_app_keys_reset>:
		if (app->app_idx != BT_MESH_KEY_UNUSED) {
   1085c:	4804      	ldr	r0, [pc, #16]	; (10870 <bt_mesh_app_keys_reset+0x14>)
   1085e:	8842      	ldrh	r2, [r0, #2]
   10860:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10864:	429a      	cmp	r2, r3
   10866:	d001      	beq.n	1086c <bt_mesh_app_keys_reset+0x10>
			app_key_del(app);
   10868:	f01a bcaf 	b.w	2b1ca <app_key_del>
}
   1086c:	4770      	bx	lr
   1086e:	bf00      	nop
   10870:	20001c4c 	.word	0x20001c4c

00010874 <bt_mesh_app_key_pending_store>:

BT_MESH_SETTINGS_DEFINE(app, "AppKey", app_key_set);

void bt_mesh_app_key_pending_store(void)
{
   10874:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(app_key_updates); i++) {
		struct app_key_update *update = &app_key_updates[i];

		if (!update->valid) {
   10876:	4c09      	ldr	r4, [pc, #36]	; (1089c <bt_mesh_app_key_pending_store+0x28>)
   10878:	7863      	ldrb	r3, [r4, #1]
   1087a:	06da      	lsls	r2, r3, #27
   1087c:	d50a      	bpl.n	10894 <bt_mesh_app_key_pending_store+0x20>
			continue;
		}

		if (update->clear) {
   1087e:	8820      	ldrh	r0, [r4, #0]
   10880:	069b      	lsls	r3, r3, #26
   10882:	f3c0 000b 	ubfx	r0, r0, #0, #12
   10886:	d506      	bpl.n	10896 <bt_mesh_app_key_pending_store+0x22>
			clear_app_key(update->key_idx);
   10888:	f7ff fd10 	bl	102ac <clear_app_key>
		} else {
			store_app_key(update->key_idx);
		}

		update->valid = 0U;
   1088c:	7863      	ldrb	r3, [r4, #1]
   1088e:	f36f 1304 	bfc	r3, #4, #1
   10892:	7063      	strb	r3, [r4, #1]
	}
}
   10894:	bd10      	pop	{r4, pc}
			store_app_key(update->key_idx);
   10896:	f7ff fd47 	bl	10328 <store_app_key>
   1089a:	e7f7      	b.n	1088c <bt_mesh_app_key_pending_store+0x18>
   1089c:	200056c0 	.word	0x200056c0

000108a0 <k_delayed_work_submit>:
   108a0:	4601      	mov	r1, r0
   108a2:	4801      	ldr	r0, [pc, #4]	; (108a8 <k_delayed_work_submit+0x8>)
   108a4:	f014 bdf8 	b.w	25498 <k_delayed_work_submit_to_queue>
   108a8:	20003028 	.word	0x20003028

000108ac <seg_rx_reset>:
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
				NULL, NULL);
}

static void seg_rx_reset(struct seg_rx *rx, bool full_reset)
{
   108ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   108b0:	4604      	mov	r4, r0
	int i;

	BT_DBG("rx %p", rx);

	k_delayed_work_cancel(&rx->ack);
   108b2:	3030      	adds	r0, #48	; 0x30
{
   108b4:	460d      	mov	r5, r1
	k_delayed_work_cancel(&rx->ack);
   108b6:	f014 fe5f 	bl	25578 <k_delayed_work_cancel>

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
   108ba:	f994 301f 	ldrsb.w	r3, [r4, #31]
   108be:	2b00      	cmp	r3, #0
   108c0:	da14      	bge.n	108ec <seg_rx_reset+0x40>
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
   108c2:	7fe3      	ldrb	r3, [r4, #31]
   108c4:	f003 031f 	and.w	r3, r3, #31
   108c8:	1c5a      	adds	r2, r3, #1
   108ca:	2301      	movs	r3, #1
   108cc:	4093      	lsls	r3, r2
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
   108ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
   108d0:	3b01      	subs	r3, #1
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
   108d2:	429a      	cmp	r2, r3
   108d4:	d00a      	beq.n	108ec <seg_rx_reset+0x40>
		BT_WARN("Clearing incomplete buffers from Friend queue");
   108d6:	2157      	movs	r1, #87	; 0x57
   108d8:	4815      	ldr	r0, [pc, #84]	; (10930 <seg_rx_reset+0x84>)
   108da:	f016 fffa 	bl	278d2 <printk>
		bt_mesh_friend_clear_incomplete(rx->sub, rx->src, rx->dst,
   108de:	f104 0310 	add.w	r3, r4, #16
   108e2:	8b62      	ldrh	r2, [r4, #26]
   108e4:	8b21      	ldrh	r1, [r4, #24]
   108e6:	6820      	ldr	r0, [r4, #0]
   108e8:	f005 ff8e 	bl	16808 <bt_mesh_friend_clear_incomplete>
{
   108ec:	2600      	movs	r6, #0
	for (i = 0; i <= rx->seg_n; i++) {
		if (!rx->seg[i]) {
			continue;
		}

		k_mem_slab_free(&segs, &rx->seg[i]);
   108ee:	f8df 8044 	ldr.w	r8, [pc, #68]	; 10934 <seg_rx_reset+0x88>
   108f2:	1d21      	adds	r1, r4, #4
		rx->seg[i] = NULL;
   108f4:	46b1      	mov	r9, r6
		if (!rx->seg[i]) {
   108f6:	460f      	mov	r7, r1
   108f8:	f857 3b04 	ldr.w	r3, [r7], #4
   108fc:	b123      	cbz	r3, 10908 <seg_rx_reset+0x5c>
		k_mem_slab_free(&segs, &rx->seg[i]);
   108fe:	4640      	mov	r0, r8
   10900:	f012 fff6 	bl	238f0 <k_mem_slab_free>
		rx->seg[i] = NULL;
   10904:	f847 9c04 	str.w	r9, [r7, #-4]
	for (i = 0; i <= rx->seg_n; i++) {
   10908:	7fe3      	ldrb	r3, [r4, #31]
   1090a:	3601      	adds	r6, #1
   1090c:	f003 021f 	and.w	r2, r3, #31
   10910:	42b2      	cmp	r2, r6
   10912:	4639      	mov	r1, r7
   10914:	daef      	bge.n	108f6 <seg_rx_reset+0x4a>
	}

	rx->in_use = 0U;
   10916:	f36f 1386 	bfc	r3, #6, #1
   1091a:	77e3      	strb	r3, [r4, #31]

	/* We don't always reset these values since we need to be able to
	 * send an ack if we receive a segment after we've already received
	 * the full SDU.
	 */
	if (full_reset) {
   1091c:	b135      	cbz	r5, 1092c <seg_rx_reset+0x80>
		rx->seq_auth = 0U;
   1091e:	2000      	movs	r0, #0
   10920:	2100      	movs	r1, #0
   10922:	e9c4 0104 	strd	r0, r1, [r4, #16]
		rx->sub = NULL;
   10926:	2300      	movs	r3, #0
   10928:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
   1092a:	61a3      	str	r3, [r4, #24]
		rx->dst = BT_MESH_ADDR_UNASSIGNED;
	}
}
   1092c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10930:	00033685 	.word	0x00033685
   10934:	20001df8 	.word	0x20001df8

00010938 <va_set>:
}

#if CONFIG_BT_MESH_LABEL_COUNT > 0
static int va_set(const char *name, size_t len_rd,
		  settings_read_cb read_cb, void *cb_arg)
{
   10938:	b5f0      	push	{r4, r5, r6, r7, lr}
   1093a:	460c      	mov	r4, r1
   1093c:	b087      	sub	sp, #28
   1093e:	4616      	mov	r6, r2
   10940:	461f      	mov	r7, r3
	struct va_val va;
	struct virtual_addr *lab;
	uint16_t index;
	int err;

	if (!name) {
   10942:	b940      	cbnz	r0, 10956 <va_set+0x1e>
		BT_ERR("Insufficient number of arguments");
   10944:	2145      	movs	r1, #69	; 0x45
   10946:	4821      	ldr	r0, [pc, #132]	; (109cc <va_set+0x94>)
   10948:	f016 ffc3 	bl	278d2 <printk>
		return -ENOENT;
   1094c:	f06f 0401 	mvn.w	r4, #1

	BT_DBG("Restored Virtual Address, addr 0x%04x ref 0x%04x",
	       lab->addr, lab->ref);

	return 0;
}
   10950:	4620      	mov	r0, r4
   10952:	b007      	add	sp, #28
   10954:	bdf0      	pop	{r4, r5, r6, r7, pc}
	index = strtol(name, NULL, 16);
   10956:	2210      	movs	r2, #16
   10958:	2100      	movs	r1, #0
   1095a:	f016 feaf 	bl	276bc <strtol>
   1095e:	4605      	mov	r5, r0
	if (len_rd == 0) {
   10960:	b924      	cbnz	r4, 1096c <va_set+0x34>
		BT_WARN("Mesh Virtual Address length = 0");
   10962:	481b      	ldr	r0, [pc, #108]	; (109d0 <va_set+0x98>)
   10964:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
   10966:	f016 ffb4 	bl	278d2 <printk>
		return 0;
   1096a:	e7f1      	b.n	10950 <va_set+0x18>
	err = bt_mesh_settings_set(read_cb, cb_arg, &va, sizeof(va));
   1096c:	2314      	movs	r3, #20
   1096e:	aa01      	add	r2, sp, #4
   10970:	4639      	mov	r1, r7
   10972:	4630      	mov	r0, r6
   10974:	f004 fd36 	bl	153e4 <bt_mesh_settings_set>
	if (err) {
   10978:	4604      	mov	r4, r0
   1097a:	b110      	cbz	r0, 10982 <va_set+0x4a>
		BT_ERR("Failed to set \'virtual address\'");
   1097c:	2145      	movs	r1, #69	; 0x45
   1097e:	4815      	ldr	r0, [pc, #84]	; (109d4 <va_set+0x9c>)
   10980:	e7f1      	b.n	10966 <va_set+0x2e>
	if (va.ref == 0) {
   10982:	f8bd 6004 	ldrh.w	r6, [sp, #4]
   10986:	b916      	cbnz	r6, 1098e <va_set+0x56>
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
   10988:	2157      	movs	r1, #87	; 0x57
   1098a:	4813      	ldr	r0, [pc, #76]	; (109d8 <va_set+0xa0>)
   1098c:	e7eb      	b.n	10966 <va_set+0x2e>
	if (index >= ARRAY_SIZE(virtual_addrs)) {
   1098e:	b2ad      	uxth	r5, r5
   10990:	b135      	cbz	r5, 109a0 <va_set+0x68>
		BT_WARN("Out of labels buffers");
   10992:	2157      	movs	r1, #87	; 0x57
   10994:	4811      	ldr	r0, [pc, #68]	; (109dc <va_set+0xa4>)
   10996:	f016 ff9c 	bl	278d2 <printk>
		return -ENOBUFS;
   1099a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1099e:	e7d7      	b.n	10950 <va_set+0x18>
	memcpy(lab->uuid, va.uuid, 16);
   109a0:	4a0f      	ldr	r2, [pc, #60]	; (109e0 <va_set+0xa8>)
   109a2:	ad02      	add	r5, sp, #8
   109a4:	af06      	add	r7, sp, #24
   109a6:	462b      	mov	r3, r5
   109a8:	cb03      	ldmia	r3!, {r0, r1}
   109aa:	42bb      	cmp	r3, r7
   109ac:	6010      	str	r0, [r2, #0]
   109ae:	6051      	str	r1, [r2, #4]
   109b0:	461d      	mov	r5, r3
   109b2:	f102 0208 	add.w	r2, r2, #8
   109b6:	d1f6      	bne.n	109a6 <va_set+0x6e>
	lab->addr = va.addr;
   109b8:	4b0a      	ldr	r3, [pc, #40]	; (109e4 <va_set+0xac>)
   109ba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   109be:	805a      	strh	r2, [r3, #2]
	lab->ref = va.ref;
   109c0:	881a      	ldrh	r2, [r3, #0]
   109c2:	f366 020e 	bfi	r2, r6, #0, #15
   109c6:	801a      	strh	r2, [r3, #0]
	return 0;
   109c8:	e7c2      	b.n	10950 <va_set+0x18>
   109ca:	bf00      	nop
   109cc:	000316aa 	.word	0x000316aa
   109d0:	000337dc 	.word	0x000337dc
   109d4:	00033801 	.word	0x00033801
   109d8:	00033826 	.word	0x00033826
   109dc:	0003384f 	.word	0x0003384f
   109e0:	200056c6 	.word	0x200056c6
   109e4:	200056c2 	.word	0x200056c2

000109e8 <seg_tx_reset>:
{
   109e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109ec:	4604      	mov	r4, r0
	k_delayed_work_cancel(&tx->retransmit);
   109ee:	3058      	adds	r0, #88	; 0x58
   109f0:	f014 fdc2 	bl	25578 <k_delayed_work_cancel>
	tx->cb = NULL;
   109f4:	2500      	movs	r5, #0
	tx->blocked = false;
   109f6:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   109fa:	4f20      	ldr	r7, [pc, #128]	; (10a7c <seg_tx_reset+0x94>)
	tx->sub = NULL;
   109fc:	6025      	str	r5, [r4, #0]
	tx->seq_auth = 0U;
   109fe:	2000      	movs	r0, #0
   10a00:	2100      	movs	r1, #0
	tx->cb_data = NULL;
   10a02:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
	tx->seq_auth = 0U;
   10a06:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
	tx->blocked = false;
   10a0a:	f365 0200 	bfi	r2, r5, #0, #1
	tx->src = BT_MESH_ADDR_UNASSIGNED;
   10a0e:	6425      	str	r5, [r4, #64]	; 0x40
	tx->blocked = false;
   10a10:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
   10a14:	1d26      	adds	r6, r4, #4
	tx->seg[seg_idx] = NULL;
   10a16:	46a8      	mov	r8, r5
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
   10a18:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   10a1c:	b19b      	cbz	r3, 10a46 <seg_tx_reset+0x5e>
		if (!tx->seg[i]) {
   10a1e:	6833      	ldr	r3, [r6, #0]
   10a20:	b153      	cbz	r3, 10a38 <seg_tx_reset+0x50>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   10a22:	4631      	mov	r1, r6
   10a24:	4638      	mov	r0, r7
   10a26:	f012 ff63 	bl	238f0 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
   10a2a:	f8c6 8000 	str.w	r8, [r6]
	tx->nack_count--;
   10a2e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   10a32:	3b01      	subs	r3, #1
   10a34:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
   10a38:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   10a3c:	3501      	adds	r5, #1
   10a3e:	42ab      	cmp	r3, r5
   10a40:	f106 0604 	add.w	r6, r6, #4
   10a44:	dae8      	bge.n	10a18 <seg_tx_reset+0x30>
	tx->nack_count = 0;
   10a46:	2100      	movs	r1, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10a48:	4b0d      	ldr	r3, [pc, #52]	; (10a80 <seg_tx_reset+0x98>)
   10a4a:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
   10a4e:	f3bf 8f5b 	dmb	ish
   10a52:	e853 2f00 	ldrex	r2, [r3]
   10a56:	f022 0020 	bic.w	r0, r2, #32
   10a5a:	e843 0400 	strex	r4, r0, [r3]
   10a5e:	2c00      	cmp	r4, #0
   10a60:	d1f7      	bne.n	10a52 <seg_tx_reset+0x6a>
   10a62:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
   10a66:	0692      	lsls	r2, r2, #26
   10a68:	d505      	bpl.n	10a76 <seg_tx_reset+0x8e>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
   10a6a:	f853 0c08 	ldr.w	r0, [r3, #-8]
}
   10a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
   10a72:	f7fe bc7b 	b.w	f36c <bt_mesh_net_iv_update>
}
   10a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a7a:	bf00      	nop
   10a7c:	20001df8 	.word	0x20001df8
   10a80:	20002970 	.word	0x20002970

00010a84 <seg_tx_complete>:
{
   10a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a88:	4604      	mov	r4, r0
	void *cb_data = tx->cb_data;
   10a8a:	e9d0 5714 	ldrd	r5, r7, [r0, #80]	; 0x50
		if (&seg_tx[i] != tx &&
   10a8e:	4815      	ldr	r0, [pc, #84]	; (10ae4 <seg_tx_complete+0x60>)
   10a90:	4284      	cmp	r4, r0
{
   10a92:	460e      	mov	r6, r1
		if (&seg_tx[i] != tx &&
   10a94:	d018      	beq.n	10ac8 <seg_tx_complete+0x44>
		    seg_tx[i].blocked &&
   10a96:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
		if (&seg_tx[i] != tx &&
   10a9a:	07da      	lsls	r2, r3, #31
   10a9c:	d514      	bpl.n	10ac8 <seg_tx_complete+0x44>
	return (tx->src == src) && (tx->dst == dst);
   10a9e:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
   10aa2:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
   10aa6:	4291      	cmp	r1, r2
   10aa8:	d10e      	bne.n	10ac8 <seg_tx_complete+0x44>
   10aaa:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
   10aae:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
   10ab2:	4291      	cmp	r1, r2
   10ab4:	d108      	bne.n	10ac8 <seg_tx_complete+0x44>
		blocked->blocked = false;
   10ab6:	f36f 0300 	bfc	r3, #0, #1
   10aba:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
		k_delayed_work_submit(&blocked->retransmit, K_NO_WAIT);
   10abe:	2200      	movs	r2, #0
   10ac0:	2300      	movs	r3, #0
   10ac2:	3058      	adds	r0, #88	; 0x58
   10ac4:	f7ff feec 	bl	108a0 <k_delayed_work_submit>
	seg_tx_reset(tx);
   10ac8:	4620      	mov	r0, r4
   10aca:	f7ff ff8d 	bl	109e8 <seg_tx_reset>
	if (cb && cb->end) {
   10ace:	b135      	cbz	r5, 10ade <seg_tx_complete+0x5a>
   10ad0:	686b      	ldr	r3, [r5, #4]
   10ad2:	b123      	cbz	r3, 10ade <seg_tx_complete+0x5a>
		cb->end(err, cb_data);
   10ad4:	4639      	mov	r1, r7
   10ad6:	4630      	mov	r0, r6
}
   10ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb->end(err, cb_data);
   10adc:	4718      	bx	r3
}
   10ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ae2:	bf00      	nop
   10ae4:	20002c00 	.word	0x20002c00

00010ae8 <seg_tx_send_unacked>:
{
   10ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!tx->nack_count) {
   10aea:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
{
   10aee:	b087      	sub	sp, #28
   10af0:	4604      	mov	r4, r0
	if (!tx->nack_count) {
   10af2:	b3cb      	cbz	r3, 10b68 <seg_tx_send_unacked+0x80>
		.net_idx = tx->sub->net_idx,
   10af4:	6801      	ldr	r1, [r0, #0]
	struct bt_mesh_net_tx net_tx = {
   10af6:	9103      	str	r1, [sp, #12]
	struct bt_mesh_msg_ctx ctx = {
   10af8:	2300      	movs	r3, #0
   10afa:	2501      	movs	r5, #1
   10afc:	f8cd 3006 	str.w	r3, [sp, #6]
   10b00:	8b8b      	ldrh	r3, [r1, #28]
   10b02:	f8ad 3000 	strh.w	r3, [sp]
	struct bt_mesh_net_tx net_tx = {
   10b06:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
	struct bt_mesh_msg_ctx ctx = {
   10b0a:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   10b0e:	f88d 500a 	strb.w	r5, [sp, #10]
   10b12:	f890 504c 	ldrb.w	r5, [r0, #76]	; 0x4c
   10b16:	f88d 500b 	strb.w	r5, [sp, #11]
	struct bt_mesh_net_tx net_tx = {
   10b1a:	f8ad 1014 	strh.w	r1, [sp, #20]
   10b1e:	f890 5046 	ldrb.w	r5, [r0, #70]	; 0x46
   10b22:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
   10b26:	f88d 1016 	strb.w	r1, [sp, #22]
   10b2a:	f3c3 1140 	ubfx	r1, r3, #5, #1
	struct bt_mesh_msg_ctx ctx = {
   10b2e:	f343 0240 	sbfx	r2, r3, #1, #1
	struct bt_mesh_net_tx net_tx = {
   10b32:	f365 0187 	bfi	r1, r5, #2, #6
	struct bt_mesh_msg_ctx ctx = {
   10b36:	f8ad 2002 	strh.w	r2, [sp, #2]
		.addr = tx->dst,
   10b3a:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
	struct bt_mesh_net_tx net_tx = {
   10b3e:	f88d 1017 	strb.w	r1, [sp, #23]
	if (!tx->attempts) {
   10b42:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
	struct bt_mesh_msg_ctx ctx = {
   10b46:	f8ad 2004 	strh.w	r2, [sp, #4]
	struct bt_mesh_net_tx net_tx = {
   10b4a:	f8cd d010 	str.w	sp, [sp, #16]
	if (!tx->attempts) {
   10b4e:	b969      	cbnz	r1, 10b6c <seg_tx_send_unacked+0x84>
		if (BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
   10b50:	b212      	sxth	r2, r2
   10b52:	2a00      	cmp	r2, #0
   10b54:	dd06      	ble.n	10b64 <seg_tx_send_unacked+0x7c>
			BT_ERR("Ran out of retransmit attempts");
   10b56:	2145      	movs	r1, #69	; 0x45
   10b58:	483f      	ldr	r0, [pc, #252]	; (10c58 <seg_tx_send_unacked+0x170>)
   10b5a:	f016 feba 	bl	278d2 <printk>
			seg_tx_complete(tx, -ETIMEDOUT);
   10b5e:	f06f 0173 	mvn.w	r1, #115	; 0x73
   10b62:	4620      	mov	r0, r4
			seg_tx_complete(tx, 0);
   10b64:	f7ff ff8e 	bl	10a84 <seg_tx_complete>
}
   10b68:	b007      	add	sp, #28
   10b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tx->sending = 1U;
   10b6c:	f043 0310 	orr.w	r3, r3, #16
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
   10b70:	4e3a      	ldr	r6, [pc, #232]	; (10c5c <seg_tx_send_unacked+0x174>)
	tx->sending = 1U;
   10b72:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
   10b76:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   10b7a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
   10b7e:	429a      	cmp	r2, r3
   10b80:	d208      	bcs.n	10b94 <seg_tx_send_unacked+0xac>
	tx->seg_o = 0U;
   10b82:	2300      	movs	r3, #0
   10b84:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	tx->attempts--;
   10b88:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   10b8c:	3b01      	subs	r3, #1
   10b8e:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   10b92:	e02a      	b.n	10bea <seg_tx_send_unacked+0x102>
		if (!tx->seg[tx->seg_o]) {
   10b94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   10b98:	685b      	ldr	r3, [r3, #4]
   10b9a:	2b00      	cmp	r3, #0
   10b9c:	d056      	beq.n	10c4c <seg_tx_send_unacked+0x164>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit,
   10b9e:	2200      	movs	r2, #0
   10ba0:	2300      	movs	r3, #0
   10ba2:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
   10ba6:	2001      	movs	r0, #1
   10ba8:	f7fd ff06 	bl	e9b8 <bt_mesh_adv_create>
		if (!seg) {
   10bac:	4605      	mov	r5, r0
   10bae:	b1e0      	cbz	r0, 10bea <seg_tx_send_unacked+0x102>
	net_buf_simple_reserve(&buf->b, reserve);
   10bb0:	f100 0708 	add.w	r7, r0, #8
   10bb4:	2109      	movs	r1, #9
   10bb6:	4638      	mov	r0, r7
   10bb8:	f00e ffb8 	bl	1fb2c <net_buf_simple_reserve>
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
   10bbc:	463a      	mov	r2, r7
   10bbe:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
   10bc2:	4620      	mov	r0, r4
   10bc4:	f01a fb28 	bl	2b218 <seg_tx_buf_build>
		tx->seg_pending++;
   10bc8:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
   10bcc:	3301      	adds	r3, #1
   10bce:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
   10bd2:	4632      	mov	r2, r6
   10bd4:	4623      	mov	r3, r4
   10bd6:	4629      	mov	r1, r5
   10bd8:	a803      	add	r0, sp, #12
   10bda:	f7fe fd2d 	bl	f638 <bt_mesh_net_send>
		if (err) {
   10bde:	b3a8      	cbz	r0, 10c4c <seg_tx_send_unacked+0x164>
			tx->seg_pending--;
   10be0:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
   10be4:	3b01      	subs	r3, #1
   10be6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
	if (!tx->seg_pending) {
   10bea:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
   10bee:	bb33      	cbnz	r3, 10c3e <seg_tx_send_unacked+0x156>
				      K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
   10bf0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
   10bf4:	2b00      	cmp	r3, #0
   10bf6:	bfc1      	itttt	gt
   10bf8:	f894 104c 	ldrbgt.w	r1, [r4, #76]	; 0x4c
   10bfc:	2232      	movgt	r2, #50	; 0x32
   10bfe:	f44f 73c8 	movgt.w	r3, #400	; 0x190
   10c02:	fb12 3201 	smlabbgt	r2, r2, r1, r3
   10c06:	bfce      	itee	gt
   10c08:	17d3      	asrgt	r3, r2, #31
   10c0a:	2232      	movle	r2, #50	; 0x32
   10c0c:	2300      	movle	r3, #0
   10c0e:	03d9      	lsls	r1, r3, #15
   10c10:	03d0      	lsls	r0, r2, #15
   10c12:	f240 36e7 	movw	r6, #999	; 0x3e7
   10c16:	1980      	adds	r0, r0, r6
   10c18:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
   10c1c:	f04f 0600 	mov.w	r6, #0
   10c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10c24:	f04f 0300 	mov.w	r3, #0
   10c28:	eb46 0101 	adc.w	r1, r6, r1
   10c2c:	f7f0 feae 	bl	198c <__aeabi_uldivmod>
		k_delayed_work_submit(&tx->retransmit,
   10c30:	f104 0558 	add.w	r5, r4, #88	; 0x58
   10c34:	4602      	mov	r2, r0
   10c36:	460b      	mov	r3, r1
   10c38:	4628      	mov	r0, r5
   10c3a:	f7ff fe31 	bl	108a0 <k_delayed_work_submit>
	tx->sending = 0U;
   10c3e:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   10c42:	f36f 1304 	bfc	r3, #4, #1
   10c46:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
   10c4a:	e78d      	b.n	10b68 <seg_tx_send_unacked+0x80>
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
   10c4c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   10c50:	3301      	adds	r3, #1
   10c52:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   10c56:	e78e      	b.n	10b76 <seg_tx_send_unacked+0x8e>
   10c58:	000336b8 	.word	0x000336b8
   10c5c:	0002fad4 	.word	0x0002fad4

00010c60 <ctl_recv>:
{
   10c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (ctl_op) {
   10c64:	f011 0a7f 	ands.w	sl, r1, #127	; 0x7f
{
   10c68:	4604      	mov	r4, r0
   10c6a:	4616      	mov	r6, r2
   10c6c:	461d      	mov	r5, r3
	switch (ctl_op) {
   10c6e:	d012      	beq.n	10c96 <ctl_recv+0x36>
   10c70:	f1ba 0f0a 	cmp.w	sl, #10
   10c74:	f000 80b0 	beq.w	10dd8 <ctl_recv+0x178>
	if (!rx->local_match) {
   10c78:	7d03      	ldrb	r3, [r0, #20]
   10c7a:	f013 0540 	ands.w	r5, r3, #64	; 0x40
   10c7e:	d02f      	beq.n	10ce0 <ctl_recv+0x80>
		switch (ctl_op) {
   10c80:	f10a 33ff 	add.w	r3, sl, #4294967295
   10c84:	2b07      	cmp	r3, #7
   10c86:	f200 80ca 	bhi.w	10e1e <ctl_recv+0x1be>
   10c8a:	e8df f003 	tbb	[pc, r3]
   10c8e:	c8aa      	.short	0xc8aa
   10c90:	b9b4c8af 	.word	0xb9b4c8af
   10c94:	c3be      	.short	0xc3be
	if (buf->len < 6) {
   10c96:	8893      	ldrh	r3, [r2, #4]
   10c98:	2b05      	cmp	r3, #5
   10c9a:	d806      	bhi.n	10caa <ctl_recv+0x4a>
		BT_ERR("Too short ack message");
   10c9c:	4865      	ldr	r0, [pc, #404]	; (10e34 <ctl_recv+0x1d4>)
   10c9e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Received ack for group seg");
   10ca0:	f016 fe17 	bl	278d2 <printk>
		return -EINVAL;
   10ca4:	f06f 0515 	mvn.w	r5, #21
   10ca8:	e01a      	b.n	10ce0 <ctl_recv+0x80>
	seq_zero = net_buf_simple_pull_be16(buf);
   10caa:	4610      	mov	r0, r2
   10cac:	f01c fc50 	bl	2d550 <net_buf_simple_pull_be16>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
   10cb0:	f994 3014 	ldrsb.w	r3, [r4, #20]
	obo = seq_zero >> 15;
   10cb4:	f3c0 3bcf 	ubfx	fp, r0, #15, #16
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
   10cb8:	2b00      	cmp	r3, #0
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
   10cba:	f3c0 008c 	ubfx	r0, r0, #2, #13
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
   10cbe:	fa1f f880 	uxth.w	r8, r0
   10cc2:	f04f 0900 	mov.w	r9, #0
   10cc6:	da0e      	bge.n	10ce6 <ctl_recv+0x86>
		*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(rx), seq_zero);
   10cc8:	7d20      	ldrb	r0, [r4, #20]
   10cca:	4a5b      	ldr	r2, [pc, #364]	; (10e38 <ctl_recv+0x1d8>)
   10ccc:	f000 0301 	and.w	r3, r0, #1
   10cd0:	6810      	ldr	r0, [r2, #0]
   10cd2:	1ac0      	subs	r0, r0, r3
   10cd4:	0a03      	lsrs	r3, r0, #8
   10cd6:	ea48 6000 	orr.w	r0, r8, r0, lsl #24
   10cda:	e9c5 0300 	strd	r0, r3, [r5]
		return 0;
   10cde:	4655      	mov	r5, sl
}
   10ce0:	4628      	mov	r0, r5
   10ce2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ack = net_buf_simple_pull_be32(buf);
   10ce6:	4630      	mov	r0, r6
   10ce8:	f01c fc53 	bl	2d592 <net_buf_simple_pull_be32>
   10cec:	4607      	mov	r7, r0
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
   10cee:	8920      	ldrh	r0, [r4, #8]
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
   10cf0:	4c52      	ldr	r4, [pc, #328]	; (10e3c <ctl_recv+0x1dc>)
   10cf2:	e9d4 160e 	ldrd	r1, r6, [r4, #56]	; 0x38
   10cf6:	45ca      	cmp	sl, r9
   10cf8:	f3c1 020c 	ubfx	r2, r1, #0, #13
   10cfc:	bf08      	it	eq
   10cfe:	4542      	cmpeq	r2, r8
   10d00:	f040 8095 	bne.w	10e2e <ctl_recv+0x1ce>
		if (tx->dst == addr) {
   10d04:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   10d08:	4283      	cmp	r3, r0
   10d0a:	d00d      	beq.n	10d28 <ctl_recv+0xc8>
		if (obo && tx->nack_count == tx->seg_n + 1) {
   10d0c:	f1bb 0f00 	cmp.w	fp, #0
   10d10:	f000 808d 	beq.w	10e2e <ctl_recv+0x1ce>
   10d14:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   10d18:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   10d1c:	3301      	adds	r3, #1
   10d1e:	429a      	cmp	r2, r3
   10d20:	f040 8085 	bne.w	10e2e <ctl_recv+0x1ce>
			tx->dst = addr;
   10d24:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
   10d28:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
   10d2c:	2b00      	cmp	r3, #0
   10d2e:	dc02      	bgt.n	10d36 <ctl_recv+0xd6>
		BT_ERR("Received ack for group seg");
   10d30:	2145      	movs	r1, #69	; 0x45
   10d32:	4843      	ldr	r0, [pc, #268]	; (10e40 <ctl_recv+0x1e0>)
   10d34:	e7b4      	b.n	10ca0 <ctl_recv+0x40>
	*seq_auth = tx->seq_auth;
   10d36:	e9c5 1600 	strd	r1, r6, [r5]
	if (!ack) {
   10d3a:	b957      	cbnz	r7, 10d52 <ctl_recv+0xf2>
		BT_WARN("SDU canceled");
   10d3c:	2157      	movs	r1, #87	; 0x57
   10d3e:	4841      	ldr	r0, [pc, #260]	; (10e44 <ctl_recv+0x1e4>)
   10d40:	f016 fdc7 	bl	278d2 <printk>
		seg_tx_complete(tx, -ECANCELED);
   10d44:	f06f 018b 	mvn.w	r1, #139	; 0x8b
   10d48:	483c      	ldr	r0, [pc, #240]	; (10e3c <ctl_recv+0x1dc>)
   10d4a:	f7ff fe9b 	bl	10a84 <seg_tx_complete>
		return 0;
   10d4e:	463d      	mov	r5, r7
   10d50:	e7c6      	b.n	10ce0 <ctl_recv+0x80>
{
	if (op == 0) {
		return 0;
	}

	return 32 - __builtin_clz(op);
   10d52:	fab7 f387 	clz	r3, r7
	if (find_msb_set(ack) - 1 > tx->seg_n) {
   10d56:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
   10d5a:	f1c3 031f 	rsb	r3, r3, #31
   10d5e:	4293      	cmp	r3, r2
   10d60:	d902      	bls.n	10d68 <ctl_recv+0x108>
		BT_ERR("Too large segment number in ack");
   10d62:	2145      	movs	r1, #69	; 0x45
   10d64:	4838      	ldr	r0, [pc, #224]	; (10e48 <ctl_recv+0x1e8>)
   10d66:	e79b      	b.n	10ca0 <ctl_recv+0x40>
	k_delayed_work_cancel(&tx->retransmit);
   10d68:	4838      	ldr	r0, [pc, #224]	; (10e4c <ctl_recv+0x1ec>)
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   10d6a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 10e58 <ctl_recv+0x1f8>
	k_delayed_work_cancel(&tx->retransmit);
   10d6e:	f014 fc03 	bl	25578 <k_delayed_work_cancel>
	tx->seg[seg_idx] = NULL;
   10d72:	f04f 0900 	mov.w	r9, #0
		ack &= ~BIT(bit - 1);
   10d76:	f04f 0a01 	mov.w	sl, #1
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   10d7a:	2f00      	cmp	r7, #0
   10d7c:	fa97 f6a7 	rbit	r6, r7
   10d80:	fab6 f686 	clz	r6, r6
   10d84:	bf08      	it	eq
   10d86:	f04f 36ff 	moveq.w	r6, #4294967295
	while ((bit = find_lsb_set(ack))) {
   10d8a:	1c75      	adds	r5, r6, #1
   10d8c:	d106      	bne.n	10d9c <ctl_recv+0x13c>
	if (tx->nack_count) {
   10d8e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   10d92:	b1e3      	cbz	r3, 10dce <ctl_recv+0x16e>
		seg_tx_send_unacked(tx);
   10d94:	4829      	ldr	r0, [pc, #164]	; (10e3c <ctl_recv+0x1dc>)
   10d96:	f7ff fea7 	bl	10ae8 <seg_tx_send_unacked>
   10d9a:	e7a1      	b.n	10ce0 <ctl_recv+0x80>
		if (tx->seg[bit - 1]) {
   10d9c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   10da0:	685b      	ldr	r3, [r3, #4]
   10da2:	b17b      	cbz	r3, 10dc4 <ctl_recv+0x164>
			seg_tx_done(tx, bit - 1);
   10da4:	b2f5      	uxtb	r5, r6
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   10da6:	1c69      	adds	r1, r5, #1
   10da8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   10dac:	4640      	mov	r0, r8
   10dae:	f012 fd9f 	bl	238f0 <k_mem_slab_free>
	tx->nack_count--;
   10db2:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
	tx->seg[seg_idx] = NULL;
   10db6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
	tx->nack_count--;
   10dba:	3b01      	subs	r3, #1
	tx->seg[seg_idx] = NULL;
   10dbc:	f8c5 9004 	str.w	r9, [r5, #4]
	tx->nack_count--;
   10dc0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
		ack &= ~BIT(bit - 1);
   10dc4:	fa0a f606 	lsl.w	r6, sl, r6
   10dc8:	ea27 0706 	bic.w	r7, r7, r6
   10dcc:	e7d5      	b.n	10d7a <ctl_recv+0x11a>
		seg_tx_complete(tx, 0);
   10dce:	4629      	mov	r1, r5
   10dd0:	481a      	ldr	r0, [pc, #104]	; (10e3c <ctl_recv+0x1dc>)
   10dd2:	f7ff fe57 	bl	10a84 <seg_tx_complete>
   10dd6:	e783      	b.n	10ce0 <ctl_recv+0x80>
		return bt_mesh_hb_recv(rx, buf);
   10dd8:	4611      	mov	r1, r2
}
   10dda:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return bt_mesh_hb_recv(rx, buf);
   10dde:	f001 b961 	b.w	120a4 <bt_mesh_hb_recv>
			return bt_mesh_friend_poll(rx, buf);
   10de2:	4631      	mov	r1, r6
}
   10de4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_poll(rx, buf);
   10de8:	f005 b932 	b.w	16050 <bt_mesh_friend_poll>
			return bt_mesh_friend_req(rx, buf);
   10dec:	4631      	mov	r1, r6
}
   10dee:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_req(rx, buf);
   10df2:	f005 b9ff 	b.w	161f4 <bt_mesh_friend_req>
			return bt_mesh_friend_clear(rx, buf);
   10df6:	4631      	mov	r1, r6
}
   10df8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_clear(rx, buf);
   10dfc:	f005 b81a 	b.w	15e34 <bt_mesh_friend_clear>
			return bt_mesh_friend_clear_cfm(rx, buf);
   10e00:	4631      	mov	r1, r6
}
   10e02:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_clear_cfm(rx, buf);
   10e06:	f005 b9ab 	b.w	16160 <bt_mesh_friend_clear_cfm>
			return bt_mesh_friend_sub_add(rx, buf);
   10e0a:	4631      	mov	r1, r6
}
   10e0c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_sub_add(rx, buf);
   10e10:	f005 b874 	b.w	15efc <bt_mesh_friend_sub_add>
			return bt_mesh_friend_sub_rem(rx, buf);
   10e14:	4631      	mov	r1, r6
}
   10e16:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_sub_rem(rx, buf);
   10e1a:	f005 b8c5 	b.w	15fa8 <bt_mesh_friend_sub_rem>
	BT_WARN("Unhandled TransOpCode 0x%02x", ctl_op);
   10e1e:	4652      	mov	r2, sl
   10e20:	2157      	movs	r1, #87	; 0x57
   10e22:	480b      	ldr	r0, [pc, #44]	; (10e50 <ctl_recv+0x1f0>)
   10e24:	f016 fd55 	bl	278d2 <printk>
	return -ENOENT;
   10e28:	f06f 0501 	mvn.w	r5, #1
   10e2c:	e758      	b.n	10ce0 <ctl_recv+0x80>
		BT_WARN("No matching TX context for ack");
   10e2e:	2157      	movs	r1, #87	; 0x57
   10e30:	4808      	ldr	r0, [pc, #32]	; (10e54 <ctl_recv+0x1f4>)
   10e32:	e735      	b.n	10ca0 <ctl_recv+0x40>
   10e34:	000335af 	.word	0x000335af
   10e38:	20002968 	.word	0x20002968
   10e3c:	20002c00 	.word	0x20002c00
   10e40:	000335ca 	.word	0x000335ca
   10e44:	000335ea 	.word	0x000335ea
   10e48:	000335fc 	.word	0x000335fc
   10e4c:	20002c58 	.word	0x20002c58
   10e50:	00033621 	.word	0x00033621
   10e54:	00033643 	.word	0x00033643
   10e58:	20001df8 	.word	0x20001df8

00010e5c <send_seg>:
{
   10e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (seg_tx[i].nack_count) {
   10e60:	4c84      	ldr	r4, [pc, #528]	; (11074 <send_seg+0x218>)
{
   10e62:	b08f      	sub	sp, #60	; 0x3c
   10e64:	4605      	mov	r5, r0
   10e66:	460e      	mov	r6, r1
   10e68:	9303      	str	r3, [sp, #12]
		if (seg_tx[i].nack_count) {
   10e6a:	8901      	ldrh	r1, [r0, #8]
   10e6c:	6843      	ldr	r3, [r0, #4]
   10e6e:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
{
   10e72:	9f18      	ldr	r7, [sp, #96]	; 0x60
   10e74:	4693      	mov	fp, r2
   10e76:	889a      	ldrh	r2, [r3, #4]
		if (seg_tx[i].nack_count) {
   10e78:	b140      	cbz	r0, 10e8c <send_seg+0x30>
		BT_ERR("No multi-segment message contexts available");
   10e7a:	487f      	ldr	r0, [pc, #508]	; (11078 <send_seg+0x21c>)
   10e7c:	2145      	movs	r1, #69	; 0x45
   10e7e:	f016 fd28 	bl	278d2 <printk>
		return -EBUSY;
   10e82:	f06f 000f 	mvn.w	r0, #15
}
   10e86:	b00f      	add	sp, #60	; 0x3c
   10e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ctl_op) {
   10e8c:	2f00      	cmp	r7, #0
   10e8e:	d07b      	beq.n	10f88 <send_seg+0x12c>
		tx->hdr = TRANS_CTL_HDR(*ctl_op, 1);
   10e90:	783b      	ldrb	r3, [r7, #0]
   10e92:	f063 037f 	orn	r3, r3, #127	; 0x7f
		tx->hdr = SEG_HDR(1, net_tx->aid);
   10e96:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	tx->src = net_tx->src;
   10e9a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
   10e9e:	88b1      	ldrh	r1, [r6, #4]
	tx->dst = net_tx->ctx->addr;
   10ea0:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
		return BT_MESH_APP_SEG_SDU_MAX;
   10ea4:	2f00      	cmp	r7, #0
	tx->len = sdu->len;
   10ea6:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
	tx->seg_o = 0;
   10eaa:	f04f 0200 	mov.w	r2, #0
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
   10eae:	f101 33ff 	add.w	r3, r1, #4294967295
		return BT_MESH_APP_SEG_SDU_MAX;
   10eb2:	bf18      	it	ne
   10eb4:	f04f 0908 	movne.w	r9, #8
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
   10eb8:	4970      	ldr	r1, [pc, #448]	; (1107c <send_seg+0x220>)
	tx->seg_o = 0;
   10eba:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
		return BT_MESH_APP_SEG_SDU_MAX;
   10ebe:	bf08      	it	eq
   10ec0:	f04f 090c 	moveq.w	r9, #12
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
   10ec4:	fb93 f3f9 	sdiv	r3, r3, r9
   10ec8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	tx->nack_count = tx->seg_n + 1;
   10ecc:	f103 0301 	add.w	r3, r3, #1
   10ed0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
   10ed4:	680b      	ldr	r3, [r1, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10ed6:	f3bf 8f5b 	dmb	ish
   10eda:	6888      	ldr	r0, [r1, #8]
   10edc:	f3bf 8f5b 	dmb	ish
   10ee0:	f3c0 0080 	ubfx	r0, r0, #2, #1
   10ee4:	6849      	ldr	r1, [r1, #4]
   10ee6:	f8df 8198 	ldr.w	r8, [pc, #408]	; 11080 <send_seg+0x224>
   10eea:	eba3 0300 	sub.w	r3, r3, r0
   10eee:	ea4f 2013 	mov.w	r0, r3, lsr #8
   10ef2:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
   10ef6:	e9c4 300e 	strd	r3, r0, [r4, #56]	; 0x38
	tx->cb_data = cb_data;
   10efa:	9b03      	ldr	r3, [sp, #12]
	tx->sub = net_tx->sub;
   10efc:	6828      	ldr	r0, [r5, #0]
	tx->cb_data = cb_data;
   10efe:	6563      	str	r3, [r4, #84]	; 0x54
	tx->attempts = SEG_RETRANSMIT_ATTEMPTS;
   10f00:	f04f 0304 	mov.w	r3, #4
   10f04:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
	tx->cb = cb;
   10f08:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	tx->xmit = net_tx->xmit;
   10f0c:	7aab      	ldrb	r3, [r5, #10]
   10f0e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	tx->aszmic = net_tx->aszmic;
   10f12:	7ae9      	ldrb	r1, [r5, #11]
   10f14:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
	tx->sub = net_tx->sub;
   10f18:	6020      	str	r0, [r4, #0]
	tx->aszmic = net_tx->aszmic;
   10f1a:	f3c1 0140 	ubfx	r1, r1, #1, #1
   10f1e:	f361 0382 	bfi	r3, r1, #2, #1
	tx->friend_cred = net_tx->friend_cred;
   10f22:	7ae9      	ldrb	r1, [r5, #11]
	tx->seg_pending = 0;
   10f24:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
	tx->friend_cred = net_tx->friend_cred;
   10f28:	f3c1 0100 	ubfx	r1, r1, #0, #1
   10f2c:	f361 1345 	bfi	r3, r1, #5, #1
	tx->ctl = !!ctl_op;
   10f30:	bf18      	it	ne
   10f32:	2201      	movne	r2, #1
   10f34:	f003 03f6 	and.w	r3, r3, #246	; 0xf6
   10f38:	f362 0341 	bfi	r3, r2, #1, #1
   10f3c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	tx->ttl = net_tx->ctx->send_ttl;
   10f40:	686b      	ldr	r3, [r5, #4]
   10f42:	7adb      	ldrb	r3, [r3, #11]
   10f44:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
					    tx->seg_n + 1) &&
   10f48:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
	    !bt_mesh_friend_queue_has_space(tx->sub->net_idx, net_tx->src,
   10f4c:	8b80      	ldrh	r0, [r0, #28]
   10f4e:	8929      	ldrh	r1, [r5, #8]
					    tx->seg_n + 1) &&
   10f50:	3301      	adds	r3, #1
	    !bt_mesh_friend_queue_has_space(tx->sub->net_idx, net_tx->src,
   10f52:	b2db      	uxtb	r3, r3
   10f54:	9300      	str	r3, [sp, #0]
   10f56:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
   10f5a:	4b49      	ldr	r3, [pc, #292]	; (11080 <send_seg+0x224>)
   10f5c:	f005 faea 	bl	16534 <bt_mesh_friend_queue_has_space>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) &&
   10f60:	2800      	cmp	r0, #0
   10f62:	d17b      	bne.n	1105c <send_seg+0x200>
					    tx->seg_n + 1) &&
   10f64:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
   10f68:	2b00      	cmp	r3, #0
   10f6a:	dd77      	ble.n	1105c <send_seg+0x200>
		BT_ERR("Not enough space in Friend Queue for %u segments",
   10f6c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
   10f70:	4844      	ldr	r0, [pc, #272]	; (11084 <send_seg+0x228>)
   10f72:	3201      	adds	r2, #1
   10f74:	2145      	movs	r1, #69	; 0x45
   10f76:	f016 fcac 	bl	278d2 <printk>
		seg_tx_reset(tx);
   10f7a:	f1a8 0038 	sub.w	r0, r8, #56	; 0x38
			seg_tx_reset(tx);
   10f7e:	f7ff fd33 	bl	109e8 <seg_tx_reset>
			return -ENOBUFS;
   10f82:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10f86:	e77e      	b.n	10e86 <send_seg+0x2a>
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
   10f88:	885b      	ldrh	r3, [r3, #2]
   10f8a:	3303      	adds	r3, #3
   10f8c:	b29b      	uxth	r3, r3
   10f8e:	2b01      	cmp	r3, #1
		tx->hdr = SEG_HDR(1, net_tx->aid);
   10f90:	bf85      	ittet	hi
   10f92:	7aeb      	ldrbhi	r3, [r5, #11]
   10f94:	f3c3 0385 	ubfxhi	r3, r3, #2, #6
		tx->hdr = SEG_HDR(0, 0);
   10f98:	2380      	movls	r3, #128	; 0x80
		tx->hdr = SEG_HDR(1, net_tx->aid);
   10f9a:	f063 033f 	ornhi	r3, r3, #63	; 0x3f
   10f9e:	e77a      	b.n	10e96 <send_seg+0x3a>
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
   10fa0:	2200      	movs	r2, #0
   10fa2:	2300      	movs	r3, #0
   10fa4:	a906      	add	r1, sp, #24
   10fa6:	4838      	ldr	r0, [pc, #224]	; (11088 <send_seg+0x22c>)
   10fa8:	f012 fc48 	bl	2383c <k_mem_slab_alloc>
		if (err) {
   10fac:	9002      	str	r0, [sp, #8]
   10fae:	b128      	cbz	r0, 10fbc <send_seg+0x160>
			BT_ERR("Out of segment buffers");
   10fb0:	4836      	ldr	r0, [pc, #216]	; (1108c <send_seg+0x230>)
   10fb2:	2145      	movs	r1, #69	; 0x45
   10fb4:	f016 fc8d 	bl	278d2 <printk>
			seg_tx_reset(tx);
   10fb8:	482e      	ldr	r0, [pc, #184]	; (11074 <send_seg+0x218>)
   10fba:	e7e0      	b.n	10f7e <send_seg+0x122>
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
   10fbc:	88b2      	ldrh	r2, [r6, #4]
   10fbe:	f8dd a018 	ldr.w	sl, [sp, #24]
   10fc2:	454a      	cmp	r2, r9
   10fc4:	bf28      	it	cs
   10fc6:	464a      	movcs	r2, r9
   10fc8:	4611      	mov	r1, r2
   10fca:	4630      	mov	r0, r6
   10fcc:	9205      	str	r2, [sp, #20]
   10fce:	f00e ffc9 	bl	1ff64 <net_buf_simple_pull_mem>
   10fd2:	9a05      	ldr	r2, [sp, #20]
   10fd4:	4601      	mov	r1, r0
   10fd6:	4650      	mov	r0, sl
		tx->seg[seg_o] = buf;
   10fd8:	eb04 0a87 	add.w	sl, r4, r7, lsl #2
   10fdc:	f01d f965 	bl	2e2aa <memcpy>
   10fe0:	9b06      	ldr	r3, [sp, #24]
   10fe2:	f8ca 3004 	str.w	r3, [sl, #4]
			NET_BUF_SIMPLE_DEFINE(seg, 16);
   10fe6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   10fea:	ab0a      	add	r3, sp, #40	; 0x28
   10fec:	e9cd 2308 	strd	r2, r3, [sp, #32]
   10ff0:	9307      	str	r3, [sp, #28]
			seg_tx_buf_build(tx, seg_o, &seg);
   10ff2:	ab07      	add	r3, sp, #28
   10ff4:	461a      	mov	r2, r3
   10ff6:	4639      	mov	r1, r7
   10ff8:	481e      	ldr	r0, [pc, #120]	; (11074 <send_seg+0x218>)
   10ffa:	f01a f90d 	bl	2b218 <seg_tx_buf_build>
			if (seg_o == tx->seg_n) {
   10ffe:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
			if (bt_mesh_friend_enqueue_tx(
   11002:	ab07      	add	r3, sp, #28
				    tx->seg_n + 1, &seg) &&
   11004:	1c4a      	adds	r2, r1, #1
			if (bt_mesh_friend_enqueue_tx(
   11006:	9300      	str	r3, [sp, #0]
   11008:	428f      	cmp	r7, r1
   1100a:	bf0c      	ite	eq
   1100c:	2102      	moveq	r1, #2
   1100e:	2101      	movne	r1, #1
   11010:	b2d3      	uxtb	r3, r2
   11012:	4628      	mov	r0, r5
   11014:	9a04      	ldr	r2, [sp, #16]
   11016:	f005 fb59 	bl	166cc <bt_mesh_friend_enqueue_tx>
   1101a:	b158      	cbz	r0, 11034 <send_seg+0x1d8>
			    BT_MESH_ADDR_IS_UNICAST(net_tx->ctx->addr)) {
   1101c:	686b      	ldr	r3, [r5, #4]
				    tx->seg_n + 1, &seg) &&
   1101e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   11022:	2b00      	cmp	r3, #0
   11024:	dd06      	ble.n	11034 <send_seg+0x1d8>
				k_mem_slab_free(&segs, &buf);
   11026:	a906      	add	r1, sp, #24
   11028:	4817      	ldr	r0, [pc, #92]	; (11088 <send_seg+0x22c>)
   1102a:	f012 fc61 	bl	238f0 <k_mem_slab_free>
				tx->seg[seg_o] = NULL;
   1102e:	9b02      	ldr	r3, [sp, #8]
   11030:	f8ca 3004 	str.w	r3, [sl, #4]
   11034:	f108 0801 	add.w	r8, r8, #1
	for (seg_o = 0U; sdu->len; seg_o++) {
   11038:	f8b6 a004 	ldrh.w	sl, [r6, #4]
   1103c:	fa5f f788 	uxtb.w	r7, r8
   11040:	f1ba 0f00 	cmp.w	sl, #0
   11044:	d1ac      	bne.n	10fa0 <send_seg+0x144>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !tx->seg[0]) {
   11046:	6864      	ldr	r4, [r4, #4]
		seg_tx_reset(tx);
   11048:	480a      	ldr	r0, [pc, #40]	; (11074 <send_seg+0x218>)
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !tx->seg[0]) {
   1104a:	b97c      	cbnz	r4, 1106c <send_seg+0x210>
		seg_tx_reset(tx);
   1104c:	f7ff fccc 	bl	109e8 <seg_tx_reset>
		send_cb_finalize(cb, cb_data);
   11050:	4658      	mov	r0, fp
   11052:	9903      	ldr	r1, [sp, #12]
   11054:	f01a f8ce 	bl	2b1f4 <send_cb_finalize>
		return 0;
   11058:	4620      	mov	r0, r4
   1105a:	e714      	b.n	10e86 <send_seg+0x2a>
   1105c:	2f00      	cmp	r7, #0
   1105e:	bf0c      	ite	eq
   11060:	4643      	moveq	r3, r8
   11062:	2300      	movne	r3, #0
   11064:	9304      	str	r3, [sp, #16]
				type = BT_MESH_FRIEND_PDU_PARTIAL;
   11066:	f04f 0800 	mov.w	r8, #0
   1106a:	e7e5      	b.n	11038 <send_seg+0x1dc>
	seg_tx_send_unacked(tx);
   1106c:	f7ff fd3c 	bl	10ae8 <seg_tx_send_unacked>
	return 0;
   11070:	4650      	mov	r0, sl
   11072:	e708      	b.n	10e86 <send_seg+0x2a>
   11074:	20002c00 	.word	0x20002c00
   11078:	000336dc 	.word	0x000336dc
   1107c:	20002968 	.word	0x20002968
   11080:	20002c38 	.word	0x20002c38
   11084:	0003370d 	.word	0x0003370d
   11088:	20001df8 	.word	0x20001df8
   1108c:	00033743 	.word	0x00033743

00011090 <send_unseg>:
{
   11090:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11094:	4604      	mov	r4, r0
   11096:	468a      	mov	sl, r1
   11098:	4690      	mov	r8, r2
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
   1109a:	7a81      	ldrb	r1, [r0, #10]
{
   1109c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1109e:	4699      	mov	r9, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
   110a0:	2200      	movs	r2, #0
   110a2:	2300      	movs	r3, #0
   110a4:	2001      	movs	r0, #1
   110a6:	f7fd fc87 	bl	e9b8 <bt_mesh_adv_create>
	if (!buf) {
   110aa:	4606      	mov	r6, r0
   110ac:	b940      	cbnz	r0, 110c0 <send_unseg+0x30>
		BT_ERR("Out of network buffers");
   110ae:	2145      	movs	r1, #69	; 0x45
   110b0:	4831      	ldr	r0, [pc, #196]	; (11178 <send_unseg+0xe8>)
   110b2:	f016 fc0e 	bl	278d2 <printk>
				return -ENOBUFS;
   110b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   110ba:	b002      	add	sp, #8
   110bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   110c0:	f100 0508 	add.w	r5, r0, #8
   110c4:	2109      	movs	r1, #9
   110c6:	4628      	mov	r0, r5
   110c8:	f00e fd30 	bl	1fb2c <net_buf_simple_reserve>
	if (ctl_op) {
   110cc:	b327      	cbz	r7, 11118 <send_unseg+0x88>
		net_buf_add_u8(buf, TRANS_CTL_HDR(*ctl_op, 0));
   110ce:	7839      	ldrb	r1, [r7, #0]
	return net_buf_simple_add_u8(&buf->b, val);
   110d0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   110d4:	4628      	mov	r0, r5
   110d6:	f01c fa7d 	bl	2d5d4 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   110da:	f8ba 2004 	ldrh.w	r2, [sl, #4]
   110de:	f8da 1000 	ldr.w	r1, [sl]
   110e2:	4628      	mov	r0, r5
   110e4:	f01c fa6a 	bl	2d5bc <net_buf_simple_add_mem>
		if (!bt_mesh_friend_queue_has_space(tx->sub->net_idx,
   110e8:	6863      	ldr	r3, [r4, #4]
   110ea:	8921      	ldrh	r1, [r4, #8]
   110ec:	889a      	ldrh	r2, [r3, #4]
   110ee:	6823      	ldr	r3, [r4, #0]
   110f0:	2701      	movs	r7, #1
   110f2:	8b98      	ldrh	r0, [r3, #28]
   110f4:	9700      	str	r7, [sp, #0]
   110f6:	2300      	movs	r3, #0
   110f8:	f005 fa1c 	bl	16534 <bt_mesh_friend_queue_has_space>
   110fc:	bb28      	cbnz	r0, 1114a <send_unseg+0xba>
			if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
   110fe:	6863      	ldr	r3, [r4, #4]
   11100:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   11104:	2b00      	cmp	r3, #0
   11106:	dd13      	ble.n	11130 <send_unseg+0xa0>
				BT_ERR("Not enough space in Friend Queue");
   11108:	2145      	movs	r1, #69	; 0x45
   1110a:	481c      	ldr	r0, [pc, #112]	; (1117c <send_unseg+0xec>)
   1110c:	f016 fbe1 	bl	278d2 <printk>
				net_buf_unref(buf);
   11110:	4630      	mov	r0, r6
   11112:	f00e fdf5 	bl	1fd00 <net_buf_unref>
   11116:	e7ce      	b.n	110b6 <send_unseg+0x26>
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
   11118:	6863      	ldr	r3, [r4, #4]
   1111a:	885b      	ldrh	r3, [r3, #2]
   1111c:	3303      	adds	r3, #3
   1111e:	b29b      	uxth	r3, r3
   11120:	2b01      	cmp	r3, #1
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
   11122:	bf85      	ittet	hi
   11124:	7ae1      	ldrbhi	r1, [r4, #11]
   11126:	0889      	lsrhi	r1, r1, #2
	return net_buf_simple_add_u8(&buf->b, val);
   11128:	4639      	movls	r1, r7
   1112a:	f041 0140 	orrhi.w	r1, r1, #64	; 0x40
   1112e:	e7d1      	b.n	110d4 <send_unseg+0x44>
				BT_WARN("No space in Friend Queue");
   11130:	2157      	movs	r1, #87	; 0x57
   11132:	4813      	ldr	r0, [pc, #76]	; (11180 <send_unseg+0xf0>)
   11134:	f016 fbcd 	bl	278d2 <printk>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   11138:	464b      	mov	r3, r9
   1113a:	4642      	mov	r2, r8
   1113c:	4631      	mov	r1, r6
   1113e:	4620      	mov	r0, r4
}
   11140:	b002      	add	sp, #8
   11142:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   11146:	f7fe ba77 	b.w	f638 <bt_mesh_net_send>
		if (bt_mesh_friend_enqueue_tx(tx, BT_MESH_FRIEND_PDU_SINGLE,
   1114a:	2200      	movs	r2, #0
   1114c:	9500      	str	r5, [sp, #0]
   1114e:	463b      	mov	r3, r7
   11150:	4611      	mov	r1, r2
   11152:	4620      	mov	r0, r4
   11154:	f005 faba 	bl	166cc <bt_mesh_friend_enqueue_tx>
   11158:	2800      	cmp	r0, #0
   1115a:	d0ed      	beq.n	11138 <send_unseg+0xa8>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
   1115c:	6863      	ldr	r3, [r4, #4]
					      NULL, 1, &buf->b) &&
   1115e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   11162:	2b00      	cmp	r3, #0
   11164:	dde8      	ble.n	11138 <send_unseg+0xa8>
			net_buf_unref(buf);
   11166:	4630      	mov	r0, r6
   11168:	f00e fdca 	bl	1fd00 <net_buf_unref>
			send_cb_finalize(cb, cb_data);
   1116c:	4640      	mov	r0, r8
   1116e:	4649      	mov	r1, r9
   11170:	f01a f840 	bl	2b1f4 <send_cb_finalize>
			return 0;
   11174:	2000      	movs	r0, #0
   11176:	e7a0      	b.n	110ba <send_unseg+0x2a>
   11178:	0003375f 	.word	0x0003375f
   1117c:	0003377b 	.word	0x0003377b
   11180:	000337a1 	.word	0x000337a1

00011184 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
   11184:	4b03      	ldr	r3, [pc, #12]	; (11194 <bt_mesh_tx_in_progress+0x10>)
   11186:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
}
   1118a:	3000      	adds	r0, #0
   1118c:	bf18      	it	ne
   1118e:	2001      	movne	r0, #1
   11190:	4770      	bx	lr
   11192:	bf00      	nop
   11194:	20002c00 	.word	0x20002c00

00011198 <bt_mesh_ctl_send>:
{
   11198:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   1119a:	6846      	ldr	r6, [r0, #4]
{
   1119c:	461d      	mov	r5, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   1119e:	7af3      	ldrb	r3, [r6, #11]
{
   111a0:	b089      	sub	sp, #36	; 0x24
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   111a2:	2bff      	cmp	r3, #255	; 0xff
{
   111a4:	4604      	mov	r4, r0
   111a6:	4617      	mov	r7, r2
   111a8:	f88d 100f 	strb.w	r1, [sp, #15]
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   111ac:	d119      	bne.n	111e2 <bt_mesh_ctl_send+0x4a>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
   111ae:	f7fd faab 	bl	e708 <bt_mesh_default_ttl_get>
   111b2:	72f0      	strb	r0, [r6, #11]
	net_buf_simple_init_with_data(&buf, data, data_len);
   111b4:	462a      	mov	r2, r5
   111b6:	4639      	mov	r1, r7
   111b8:	a805      	add	r0, sp, #20
   111ba:	f01c f990 	bl	2d4de <net_buf_simple_init_with_data>
	if (data_len > BT_MESH_SDU_UNSEG_MAX) {
   111be:	6863      	ldr	r3, [r4, #4]
   111c0:	2d0b      	cmp	r5, #11
		tx->ctx->send_rel = true;
   111c2:	bf84      	itt	hi
   111c4:	2201      	movhi	r2, #1
   111c6:	729a      	strbhi	r2, [r3, #10]
	tx->ctx->app_idx = BT_MESH_KEY_UNUSED;
   111c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   111cc:	805a      	strh	r2, [r3, #2]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
   111ce:	889a      	ldrh	r2, [r3, #4]
   111d0:	b122      	cbz	r2, 111dc <bt_mesh_ctl_send+0x44>
   111d2:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
   111d6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   111da:	d20c      	bcs.n	111f6 <bt_mesh_ctl_send+0x5e>
		BT_ERR("Invalid destination address");
   111dc:	2145      	movs	r1, #69	; 0x45
   111de:	480f      	ldr	r0, [pc, #60]	; (1121c <bt_mesh_ctl_send+0x84>)
   111e0:	e003      	b.n	111ea <bt_mesh_ctl_send+0x52>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
   111e2:	061b      	lsls	r3, r3, #24
   111e4:	d5e6      	bpl.n	111b4 <bt_mesh_ctl_send+0x1c>
		BT_ERR("TTL too large (max 127)");
   111e6:	480e      	ldr	r0, [pc, #56]	; (11220 <bt_mesh_ctl_send+0x88>)
   111e8:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid destination address");
   111ea:	f016 fb72 	bl	278d2 <printk>
		return -EINVAL;
   111ee:	f06f 0015 	mvn.w	r0, #21
}
   111f2:	b009      	add	sp, #36	; 0x24
   111f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tx->ctx->send_rel) {
   111f6:	7a9a      	ldrb	r2, [r3, #10]
   111f8:	f10d 030f 	add.w	r3, sp, #15
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   111fc:	9300      	str	r3, [sp, #0]
   111fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	if (tx->ctx->send_rel) {
   11200:	b12a      	cbz	r2, 1120e <bt_mesh_ctl_send+0x76>
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   11202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11204:	a905      	add	r1, sp, #20
   11206:	4620      	mov	r0, r4
   11208:	f7ff fe28 	bl	10e5c <send_seg>
   1120c:	e7f1      	b.n	111f2 <bt_mesh_ctl_send+0x5a>
		return send_unseg(tx, &buf, cb, cb_data, &ctl_op);
   1120e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11210:	a905      	add	r1, sp, #20
   11212:	4620      	mov	r0, r4
   11214:	f7ff ff3c 	bl	11090 <send_unseg>
   11218:	e7eb      	b.n	111f2 <bt_mesh_ctl_send+0x5a>
   1121a:	bf00      	nop
   1121c:	0003322e 	.word	0x0003322e
   11220:	00033211 	.word	0x00033211

00011224 <seg_ack>:
{
   11224:	b5f0      	push	{r4, r5, r6, r7, lr}
   11226:	4604      	mov	r4, r0
   11228:	b085      	sub	sp, #20
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);
   1122a:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
   1122e:	f01c ff9c 	bl	2e16a <z_impl_k_uptime_ticks>
   11232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11236:	fba0 6703 	umull	r6, r7, r0, r3
   1123a:	fb03 7701 	mla	r7, r3, r1, r7
	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
   1123e:	f854 2c08 	ldr.w	r2, [r4, #-8]
   11242:	0bf3      	lsrs	r3, r6, #15
   11244:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
   11248:	1a9b      	subs	r3, r3, r2
   1124a:	f64e 2260 	movw	r2, #60000	; 0xea60
   1124e:	4293      	cmp	r3, r2
   11250:	d90a      	bls.n	11268 <seg_ack+0x44>
		BT_WARN("Incomplete timer expired");
   11252:	2157      	movs	r1, #87	; 0x57
   11254:	481b      	ldr	r0, [pc, #108]	; (112c4 <seg_ack+0xa0>)
   11256:	f016 fb3c 	bl	278d2 <printk>
		seg_rx_reset(rx, false);
   1125a:	2100      	movs	r1, #0
   1125c:	4628      	mov	r0, r5
}
   1125e:	b005      	add	sp, #20
   11260:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		seg_rx_reset(rx, false);
   11264:	f7ff bb22 	b.w	108ac <seg_rx_reset>
		 rx->block, rx->obo);
   11268:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
   1126c:	f834 2c18 	ldrh.w	r2, [r4, #-24]
   11270:	f834 1c16 	ldrh.w	r1, [r4, #-22]
   11274:	f854 0c30 	ldr.w	r0, [r4, #-48]
   11278:	09db      	lsrs	r3, r3, #7
   1127a:	9302      	str	r3, [sp, #8]
   1127c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   11280:	9301      	str	r3, [sp, #4]
   11282:	f1a4 0320 	sub.w	r3, r4, #32
   11286:	9300      	str	r3, [sp, #0]
   11288:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   1128c:	f01a f8c5 	bl	2b41a <send_ack>
	timeout = ack_timeout(rx);
   11290:	4628      	mov	r0, r5
   11292:	f01a f800 	bl	2b296 <ack_timeout>
   11296:	f44f 4500 	mov.w	r5, #32768	; 0x8000
	k_delayed_work_submit(&rx->ack, K_MSEC(timeout));
   1129a:	ea20 76e0 	bic.w	r6, r0, r0, asr #31
   1129e:	2100      	movs	r1, #0
   112a0:	f240 30e7 	movw	r0, #999	; 0x3e7
   112a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   112a8:	2300      	movs	r3, #0
   112aa:	fbc5 0106 	smlal	r0, r1, r5, r6
   112ae:	f7f0 fb6d 	bl	198c <__aeabi_uldivmod>
   112b2:	4602      	mov	r2, r0
   112b4:	460b      	mov	r3, r1
   112b6:	4620      	mov	r0, r4
}
   112b8:	b005      	add	sp, #20
   112ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_delayed_work_submit(&rx->ack, K_MSEC(timeout));
   112be:	f7ff baef 	b.w	108a0 <k_delayed_work_submit>
   112c2:	bf00      	nop
   112c4:	00033667 	.word	0x00033667

000112c8 <bt_mesh_trans_reset>:
{
   112c8:	b508      	push	{r3, lr}
		seg_rx_reset(&seg_rx[i], true);
   112ca:	2101      	movs	r1, #1
   112cc:	480a      	ldr	r0, [pc, #40]	; (112f8 <bt_mesh_trans_reset+0x30>)
   112ce:	f7ff faed 	bl	108ac <seg_rx_reset>
		seg_tx_reset(&seg_tx[i]);
   112d2:	480a      	ldr	r0, [pc, #40]	; (112fc <bt_mesh_trans_reset+0x34>)
   112d4:	f7ff fb88 	bl	109e8 <seg_tx_reset>
		if (virtual_addrs[i].ref) {
   112d8:	4a09      	ldr	r2, [pc, #36]	; (11300 <bt_mesh_trans_reset+0x38>)
   112da:	8813      	ldrh	r3, [r2, #0]
   112dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
   112e0:	b113      	cbz	r3, 112e8 <bt_mesh_trans_reset+0x20>
			virtual_addrs[i].ref = 0U;
   112e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   112e6:	8013      	strh	r3, [r2, #0]
	bt_mesh_rpl_clear();
   112e8:	f01a f8eb 	bl	2b4c2 <bt_mesh_rpl_clear>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   112ec:	2009      	movs	r0, #9
}
   112ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   112f2:	f004 b899 	b.w	15428 <bt_mesh_settings_store_schedule>
   112f6:	bf00      	nop
   112f8:	20002ba0 	.word	0x20002ba0
   112fc:	20002c00 	.word	0x20002c00
   11300:	200056c2 	.word	0x200056c2

00011304 <bt_mesh_trans_init>:
{
   11304:	b538      	push	{r3, r4, r5, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11306:	4c09      	ldr	r4, [pc, #36]	; (1132c <bt_mesh_trans_init+0x28>)
   11308:	2530      	movs	r5, #48	; 0x30
   1130a:	462a      	mov	r2, r5
   1130c:	2100      	movs	r1, #0
   1130e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11312:	f01d f805 	bl	2e320 <memset>
   11316:	4b06      	ldr	r3, [pc, #24]	; (11330 <bt_mesh_trans_init+0x2c>)
   11318:	65e3      	str	r3, [r4, #92]	; 0x5c
   1131a:	4c06      	ldr	r4, [pc, #24]	; (11334 <bt_mesh_trans_init+0x30>)
   1131c:	462a      	mov	r2, r5
   1131e:	2100      	movs	r1, #0
   11320:	1960      	adds	r0, r4, r5
   11322:	f01c fffd 	bl	2e320 <memset>
   11326:	4b04      	ldr	r3, [pc, #16]	; (11338 <bt_mesh_trans_init+0x34>)
   11328:	6363      	str	r3, [r4, #52]	; 0x34
}
   1132a:	bd38      	pop	{r3, r4, r5, pc}
   1132c:	20002c00 	.word	0x20002c00
   11330:	0002b415 	.word	0x0002b415
   11334:	20002ba0 	.word	0x20002ba0
   11338:	00011225 	.word	0x00011225

0001133c <bt_mesh_va_add>:
{
   1133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!virtual_addrs[i].ref) {
   1133e:	4d1e      	ldr	r5, [pc, #120]	; (113b8 <bt_mesh_va_add+0x7c>)
   11340:	882a      	ldrh	r2, [r5, #0]
   11342:	f3c2 020e 	ubfx	r2, r2, #0, #15
{
   11346:	4603      	mov	r3, r0
   11348:	460f      	mov	r7, r1
   1134a:	462e      	mov	r6, r5
		if (!virtual_addrs[i].ref) {
   1134c:	b1b2      	cbz	r2, 1137c <bt_mesh_va_add+0x40>
		if (!memcmp(uuid, virtual_addrs[i].uuid,
   1134e:	2210      	movs	r2, #16
   11350:	1d29      	adds	r1, r5, #4
   11352:	f01c ff9c 	bl	2e28e <memcmp>
   11356:	4604      	mov	r4, r0
   11358:	bb60      	cbnz	r0, 113b4 <bt_mesh_va_add+0x78>
			*addr = virtual_addrs[i].addr;
   1135a:	886b      	ldrh	r3, [r5, #2]
   1135c:	803b      	strh	r3, [r7, #0]
			virtual_addrs[i].ref++;
   1135e:	882b      	ldrh	r3, [r5, #0]
   11360:	1c5a      	adds	r2, r3, #1
   11362:	f362 030e 	bfi	r3, r2, #0, #15
   11366:	802b      	strh	r3, [r5, #0]
	store->changed = 1U;
   11368:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1136c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   11370:	2009      	movs	r0, #9
	store->changed = 1U;
   11372:	706b      	strb	r3, [r5, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   11374:	f004 f858 	bl	15428 <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
   11378:	4620      	mov	r0, r4
   1137a:	e011      	b.n	113a0 <bt_mesh_va_add+0x64>
   1137c:	4602      	mov	r2, r0
   1137e:	1d29      	adds	r1, r5, #4
   11380:	3010      	adds	r0, #16
   11382:	f852 4b04 	ldr.w	r4, [r2], #4
   11386:	f841 4b04 	str.w	r4, [r1], #4
   1138a:	4282      	cmp	r2, r0
   1138c:	d1f9      	bne.n	11382 <bt_mesh_va_add+0x46>
	err = bt_mesh_virtual_addr(uuid, &va->addr);
   1138e:	490b      	ldr	r1, [pc, #44]	; (113bc <bt_mesh_va_add+0x80>)
   11390:	4618      	mov	r0, r3
   11392:	f001 f96d 	bl	12670 <bt_mesh_virtual_addr>
	if (err) {
   11396:	4604      	mov	r4, r0
   11398:	b118      	cbz	r0, 113a2 <bt_mesh_va_add+0x66>
		va->addr = BT_MESH_ADDR_UNASSIGNED;
   1139a:	2300      	movs	r3, #0
   1139c:	8073      	strh	r3, [r6, #2]
		return STATUS_UNSPECIFIED;
   1139e:	2010      	movs	r0, #16
}
   113a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	va->ref = 1;
   113a2:	f248 0301 	movw	r3, #32769	; 0x8001
   113a6:	8033      	strh	r3, [r6, #0]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   113a8:	2009      	movs	r0, #9
   113aa:	f004 f83d 	bl	15428 <bt_mesh_settings_store_schedule>
	*addr = va->addr;
   113ae:	8873      	ldrh	r3, [r6, #2]
   113b0:	803b      	strh	r3, [r7, #0]
   113b2:	e7e1      	b.n	11378 <bt_mesh_va_add+0x3c>
		return STATUS_INSUFF_RESOURCES;
   113b4:	2005      	movs	r0, #5
   113b6:	e7f3      	b.n	113a0 <bt_mesh_va_add+0x64>
   113b8:	200056c2 	.word	0x200056c2
   113bc:	200056c4 	.word	0x200056c4

000113c0 <bt_mesh_va_del>:
{
   113c0:	b538      	push	{r3, r4, r5, lr}
		if (virtual_addrs[i].ref &&
   113c2:	4c10      	ldr	r4, [pc, #64]	; (11404 <bt_mesh_va_del+0x44>)
   113c4:	8823      	ldrh	r3, [r4, #0]
   113c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
{
   113ca:	460d      	mov	r5, r1
		if (virtual_addrs[i].ref &&
   113cc:	b90b      	cbnz	r3, 113d2 <bt_mesh_va_del+0x12>
		return STATUS_CANNOT_REMOVE;
   113ce:	200c      	movs	r0, #12
}
   113d0:	bd38      	pop	{r3, r4, r5, pc}
		    !memcmp(uuid, virtual_addrs[i].uuid,
   113d2:	2210      	movs	r2, #16
   113d4:	1d21      	adds	r1, r4, #4
   113d6:	f01c ff5a 	bl	2e28e <memcmp>
		if (virtual_addrs[i].ref &&
   113da:	2800      	cmp	r0, #0
   113dc:	d1f7      	bne.n	113ce <bt_mesh_va_del+0xe>
	va->ref--;
   113de:	8823      	ldrh	r3, [r4, #0]
   113e0:	f503 42ff 	add.w	r2, r3, #32640	; 0x7f80
   113e4:	327f      	adds	r2, #127	; 0x7f
   113e6:	f362 030e 	bfi	r3, r2, #0, #15
   113ea:	8023      	strh	r3, [r4, #0]
	if (addr) {
   113ec:	b10d      	cbz	r5, 113f2 <bt_mesh_va_del+0x32>
		*addr = va->addr;
   113ee:	8863      	ldrh	r3, [r4, #2]
   113f0:	802b      	strh	r3, [r5, #0]
	store->changed = 1U;
   113f2:	7863      	ldrb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   113f4:	2009      	movs	r0, #9
	store->changed = 1U;
   113f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   113fa:	7063      	strb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   113fc:	f004 f814 	bl	15428 <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
   11400:	2000      	movs	r0, #0
   11402:	e7e5      	b.n	113d0 <bt_mesh_va_del+0x10>
   11404:	200056c2 	.word	0x200056c2

00011408 <bt_mesh_va_label_get>:
{
   11408:	4602      	mov	r2, r0
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
   1140a:	4808      	ldr	r0, [pc, #32]	; (1142c <bt_mesh_va_label_get+0x24>)
   1140c:	8801      	ldrh	r1, [r0, #0]
   1140e:	f3c1 010e 	ubfx	r1, r1, #0, #15
{
   11412:	b508      	push	{r3, lr}
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
   11414:	b111      	cbz	r1, 1141c <bt_mesh_va_label_get+0x14>
   11416:	8841      	ldrh	r1, [r0, #2]
   11418:	4291      	cmp	r1, r2
   1141a:	d005      	beq.n	11428 <bt_mesh_va_label_get+0x20>
	BT_WARN("No matching Label UUID for 0x%04x", addr);
   1141c:	4804      	ldr	r0, [pc, #16]	; (11430 <bt_mesh_va_label_get+0x28>)
   1141e:	2157      	movs	r1, #87	; 0x57
   11420:	f016 fa57 	bl	278d2 <printk>
	return NULL;
   11424:	2000      	movs	r0, #0
}
   11426:	bd08      	pop	{r3, pc}
			return virtual_addrs[i].uuid;
   11428:	3004      	adds	r0, #4
   1142a:	e7fc      	b.n	11426 <bt_mesh_va_label_get+0x1e>
   1142c:	200056c2 	.word	0x200056c2
   11430:	00033549 	.word	0x00033549

00011434 <bt_mesh_trans_send>:
{
   11434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11438:	4616      	mov	r6, r2
	if (msg->len < 1) {
   1143a:	888a      	ldrh	r2, [r1, #4]
{
   1143c:	b08b      	sub	sp, #44	; 0x2c
   1143e:	4604      	mov	r4, r0
   11440:	460d      	mov	r5, r1
   11442:	461f      	mov	r7, r3
	if (msg->len < 1) {
   11444:	b932      	cbnz	r2, 11454 <bt_mesh_trans_send+0x20>
		BT_ERR("Zero-length SDU not allowed");
   11446:	4855      	ldr	r0, [pc, #340]	; (1159c <bt_mesh_trans_send+0x168>)
   11448:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid destination address");
   1144a:	f016 fa42 	bl	278d2 <printk>
		return -EINVAL;
   1144e:	f06f 0015 	mvn.w	r0, #21
   11452:	e007      	b.n	11464 <bt_mesh_trans_send+0x30>
	if (msg->len > BT_MESH_TX_SDU_MAX) {
   11454:	2a90      	cmp	r2, #144	; 0x90
   11456:	d908      	bls.n	1146a <bt_mesh_trans_send+0x36>
		BT_ERR("Not enough segment buffers for length %u", msg->len);
   11458:	4851      	ldr	r0, [pc, #324]	; (115a0 <bt_mesh_trans_send+0x16c>)
   1145a:	2145      	movs	r1, #69	; 0x45
   1145c:	f016 fa39 	bl	278d2 <printk>
		return -EMSGSIZE;
   11460:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   11464:	b00b      	add	sp, #44	; 0x2c
   11466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (net_buf_simple_tailroom(msg) < 4) {
   1146a:	4608      	mov	r0, r1
   1146c:	f01c f89e 	bl	2d5ac <net_buf_simple_tailroom>
   11470:	2803      	cmp	r0, #3
   11472:	d802      	bhi.n	1147a <bt_mesh_trans_send+0x46>
		BT_ERR("Insufficient tailroom for Transport MIC");
   11474:	2145      	movs	r1, #69	; 0x45
   11476:	484b      	ldr	r0, [pc, #300]	; (115a4 <bt_mesh_trans_send+0x170>)
   11478:	e7e7      	b.n	1144a <bt_mesh_trans_send+0x16>
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   1147a:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1147e:	f898 300b 	ldrb.w	r3, [r8, #11]
   11482:	2bff      	cmp	r3, #255	; 0xff
   11484:	d116      	bne.n	114b4 <bt_mesh_trans_send+0x80>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
   11486:	f7fd f93f 	bl	e708 <bt_mesh_default_ttl_get>
   1148a:	f888 000b 	strb.w	r0, [r8, #11]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
   1148e:	88ab      	ldrh	r3, [r5, #4]
   11490:	6860      	ldr	r0, [r4, #4]
   11492:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = true;
   11494:	bf84      	itt	hi
   11496:	2301      	movhi	r3, #1
   11498:	7283      	strbhi	r3, [r0, #10]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
   1149a:	8883      	ldrh	r3, [r0, #4]
   1149c:	b13b      	cbz	r3, 114ae <bt_mesh_trans_send+0x7a>
   1149e:	b21b      	sxth	r3, r3
   114a0:	2b00      	cmp	r3, #0
   114a2:	dc0c      	bgt.n	114be <bt_mesh_trans_send+0x8a>
	     BT_MESH_IS_DEV_KEY(tx->ctx->app_idx))) {
   114a4:	8843      	ldrh	r3, [r0, #2]
   114a6:	3303      	adds	r3, #3
	    (!BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) &&
   114a8:	b29b      	uxth	r3, r3
   114aa:	2b01      	cmp	r3, #1
   114ac:	d807      	bhi.n	114be <bt_mesh_trans_send+0x8a>
		BT_ERR("Invalid destination address");
   114ae:	2145      	movs	r1, #69	; 0x45
   114b0:	483d      	ldr	r0, [pc, #244]	; (115a8 <bt_mesh_trans_send+0x174>)
   114b2:	e7ca      	b.n	1144a <bt_mesh_trans_send+0x16>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
   114b4:	061b      	lsls	r3, r3, #24
   114b6:	d5ea      	bpl.n	1148e <bt_mesh_trans_send+0x5a>
		BT_ERR("TTL too large (max 127)");
   114b8:	2145      	movs	r1, #69	; 0x45
   114ba:	483c      	ldr	r0, [pc, #240]	; (115ac <bt_mesh_trans_send+0x178>)
   114bc:	e7c5      	b.n	1144a <bt_mesh_trans_send+0x16>
	err = bt_mesh_keys_resolve(tx->ctx, &tx->sub, &key, &aid);
   114be:	f10d 030f 	add.w	r3, sp, #15
   114c2:	aa04      	add	r2, sp, #16
   114c4:	4621      	mov	r1, r4
   114c6:	f7ff f93b 	bl	10740 <bt_mesh_keys_resolve>
	if (err) {
   114ca:	2800      	cmp	r0, #0
   114cc:	d1ca      	bne.n	11464 <bt_mesh_trans_send+0x30>
	tx->xmit = bt_mesh_net_transmit_get();
   114ce:	f7fd f935 	bl	e73c <bt_mesh_net_transmit_get>
	tx->aid = aid;
   114d2:	7ae3      	ldrb	r3, [r4, #11]
   114d4:	f89d 200f 	ldrb.w	r2, [sp, #15]
	tx->xmit = bt_mesh_net_transmit_get();
   114d8:	72a0      	strb	r0, [r4, #10]
	tx->aid = aid;
   114da:	f362 0387 	bfi	r3, r2, #2, #6
   114de:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
   114e0:	6863      	ldr	r3, [r4, #4]
   114e2:	f893 900a 	ldrb.w	r9, [r3, #10]
   114e6:	f1b9 0f00 	cmp.w	r9, #0
   114ea:	d008      	beq.n	114fe <bt_mesh_trans_send+0xca>
   114ec:	4628      	mov	r0, r5
   114ee:	f01c f85d 	bl	2d5ac <net_buf_simple_tailroom>
   114f2:	2807      	cmp	r0, #7
   114f4:	bf94      	ite	ls
   114f6:	f04f 0900 	movls.w	r9, #0
   114fa:	f04f 0901 	movhi.w	r9, #1
   114fe:	7ae3      	ldrb	r3, [r4, #11]
	err = trans_encrypt(tx, key, msg);
   11500:	f8dd 8010 	ldr.w	r8, [sp, #16]
   11504:	f369 0341 	bfi	r3, r9, #1, #1
   11508:	72e3      	strb	r3, [r4, #11]
	struct bt_mesh_app_crypto_ctx crypto = {
   1150a:	220e      	movs	r2, #14
   1150c:	2100      	movs	r1, #0
   1150e:	f10d 001a 	add.w	r0, sp, #26
   11512:	f01c ff05 	bl	2e320 <memset>
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
   11516:	6862      	ldr	r2, [r4, #4]
	struct bt_mesh_app_crypto_ctx crypto = {
   11518:	f88d 9015 	strb.w	r9, [sp, #21]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
   1151c:	8853      	ldrh	r3, [r2, #2]
   1151e:	3303      	adds	r3, #3
   11520:	b29b      	uxth	r3, r3
   11522:	2b01      	cmp	r3, #1
   11524:	bf8c      	ite	hi
   11526:	2300      	movhi	r3, #0
   11528:	2301      	movls	r3, #1
   1152a:	f88d 3014 	strb.w	r3, [sp, #20]
	struct bt_mesh_app_crypto_ctx crypto = {
   1152e:	8923      	ldrh	r3, [r4, #8]
   11530:	f8ad 3016 	strh.w	r3, [sp, #22]
   11534:	8893      	ldrh	r3, [r2, #4]
		.seq_num = bt_mesh.seq,
   11536:	4a1e      	ldr	r2, [pc, #120]	; (115b0 <bt_mesh_trans_send+0x17c>)
	struct bt_mesh_app_crypto_ctx crypto = {
   11538:	f8ad 3018 	strh.w	r3, [sp, #24]
   1153c:	6853      	ldr	r3, [r2, #4]
   1153e:	9307      	str	r3, [sp, #28]
		.iv_index = BT_MESH_NET_IVI_TX,
   11540:	6813      	ldr	r3, [r2, #0]
   11542:	f3bf 8f5b 	dmb	ish
   11546:	6892      	ldr	r2, [r2, #8]
   11548:	f3bf 8f5b 	dmb	ish
   1154c:	f3c2 0280 	ubfx	r2, r2, #2, #1
   11550:	1a9b      	subs	r3, r3, r2
	struct bt_mesh_app_crypto_ctx crypto = {
   11552:	9308      	str	r3, [sp, #32]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
   11554:	6863      	ldr	r3, [r4, #4]
   11556:	8898      	ldrh	r0, [r3, #4]
   11558:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   1155c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   11560:	d202      	bcs.n	11568 <bt_mesh_trans_send+0x134>
		crypto.ad = bt_mesh_va_label_get(tx->ctx->addr);
   11562:	f7ff ff51 	bl	11408 <bt_mesh_va_label_get>
   11566:	9009      	str	r0, [sp, #36]	; 0x24
	return bt_mesh_app_encrypt(key, &crypto, msg);
   11568:	462a      	mov	r2, r5
   1156a:	a905      	add	r1, sp, #20
   1156c:	4640      	mov	r0, r8
   1156e:	f01a f907 	bl	2b780 <bt_mesh_app_encrypt>
	if (err) {
   11572:	2800      	cmp	r0, #0
   11574:	f47f af76 	bne.w	11464 <bt_mesh_trans_send+0x30>
	if (tx->ctx->send_rel) {
   11578:	6863      	ldr	r3, [r4, #4]
   1157a:	7a9b      	ldrb	r3, [r3, #10]
		err = send_seg(tx, msg, cb, cb_data, NULL);
   1157c:	9000      	str	r0, [sp, #0]
	if (tx->ctx->send_rel) {
   1157e:	b133      	cbz	r3, 1158e <bt_mesh_trans_send+0x15a>
		err = send_seg(tx, msg, cb, cb_data, NULL);
   11580:	463b      	mov	r3, r7
   11582:	4632      	mov	r2, r6
   11584:	4629      	mov	r1, r5
   11586:	4620      	mov	r0, r4
   11588:	f7ff fc68 	bl	10e5c <send_seg>
   1158c:	e76a      	b.n	11464 <bt_mesh_trans_send+0x30>
		err = send_unseg(tx, msg, cb, cb_data, NULL);
   1158e:	463b      	mov	r3, r7
   11590:	4632      	mov	r2, r6
   11592:	4629      	mov	r1, r5
   11594:	4620      	mov	r0, r4
   11596:	f7ff fd7b 	bl	11090 <send_unseg>
   1159a:	e763      	b.n	11464 <bt_mesh_trans_send+0x30>
   1159c:	000334cd 	.word	0x000334cd
   115a0:	000334ee 	.word	0x000334ee
   115a4:	0003351c 	.word	0x0003351c
   115a8:	0003322e 	.word	0x0003322e
   115ac:	00033211 	.word	0x00033211
   115b0:	20002968 	.word	0x20002968

000115b4 <sdu_recv>:
{
   115b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   115b8:	4691      	mov	r9, r2
   115ba:	b08b      	sub	sp, #44	; 0x2c
	struct decrypt_ctx ctx = {
   115bc:	220e      	movs	r2, #14
{
   115be:	4604      	mov	r4, r0
   115c0:	460f      	mov	r7, r1
	struct decrypt_ctx ctx = {
   115c2:	eb0d 0002 	add.w	r0, sp, r2
   115c6:	2100      	movs	r1, #0
{
   115c8:	4698      	mov	r8, r3
   115ca:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	struct decrypt_ctx ctx = {
   115ce:	f01c fea7 	bl	2e320 <memset>
			.dev_key = !AKF(&hdr),
   115d2:	ea6f 1397 	mvn.w	r3, r7, lsr #6
   115d6:	f003 0301 	and.w	r3, r3, #1
   115da:	f88d 3008 	strb.w	r3, [sp, #8]
			.dst = rx->ctx.recv_dst,
   115de:	8960      	ldrh	r0, [r4, #10]
	struct decrypt_ctx ctx = {
   115e0:	8923      	ldrh	r3, [r4, #8]
   115e2:	f88d 9009 	strb.w	r9, [sp, #9]
   115e6:	f8ad 300a 	strh.w	r3, [sp, #10]
   115ea:	f8ad 000c 	strh.w	r0, [sp, #12]
   115ee:	b375      	cbz	r5, 1164e <sdu_recv+0x9a>
   115f0:	692a      	ldr	r2, [r5, #16]
   115f2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   115f6:	9204      	str	r2, [sp, #16]
			.iv_index = BT_MESH_NET_IVI_RX(rx),
   115f8:	4a16      	ldr	r2, [pc, #88]	; (11654 <sdu_recv+0xa0>)
   115fa:	7d23      	ldrb	r3, [r4, #20]
   115fc:	6812      	ldr	r2, [r2, #0]
	struct decrypt_ctx ctx = {
   115fe:	9509      	str	r5, [sp, #36]	; 0x24
			.iv_index = BT_MESH_NET_IVI_RX(rx),
   11600:	f003 0101 	and.w	r1, r3, #1
   11604:	1a52      	subs	r2, r2, r1
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !rx->local_match) {
   11606:	065b      	lsls	r3, r3, #25
	struct decrypt_ctx ctx = {
   11608:	9205      	str	r2, [sp, #20]
   1160a:	e9cd 8607 	strd	r8, r6, [sp, #28]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !rx->local_match) {
   1160e:	d51a      	bpl.n	11646 <sdu_recv+0x92>
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
   11610:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   11614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   11618:	d202      	bcs.n	11620 <sdu_recv+0x6c>
		ctx.crypto.ad = bt_mesh_va_label_get(rx->ctx.recv_dst);
   1161a:	f7ff fef5 	bl	11408 <bt_mesh_va_label_get>
   1161e:	9006      	str	r0, [sp, #24]
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
   11620:	ab02      	add	r3, sp, #8
   11622:	9300      	str	r3, [sp, #0]
   11624:	4622      	mov	r2, r4
   11626:	4b0c      	ldr	r3, [pc, #48]	; (11658 <sdu_recv+0xa4>)
   11628:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1162c:	f007 013f 	and.w	r1, r7, #63	; 0x3f
   11630:	f7ff f8dc 	bl	107ec <bt_mesh_app_key_find>
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
   11634:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11638:	4298      	cmp	r0, r3
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
   1163a:	80e0      	strh	r0, [r4, #6]
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
   1163c:	d003      	beq.n	11646 <sdu_recv+0x92>
	bt_mesh_model_recv(rx, sdu);
   1163e:	4631      	mov	r1, r6
   11640:	4620      	mov	r0, r4
   11642:	f001 fbd9 	bl	12df8 <bt_mesh_model_recv>
}
   11646:	2000      	movs	r0, #0
   11648:	b00b      	add	sp, #44	; 0x2c
   1164a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct decrypt_ctx ctx = {
   1164e:	6922      	ldr	r2, [r4, #16]
   11650:	e7d1      	b.n	115f6 <sdu_recv+0x42>
   11652:	bf00      	nop
   11654:	20002968 	.word	0x20002968
   11658:	0002b331 	.word	0x0002b331

0001165c <bt_mesh_trans_recv>:
{
   1165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
   11660:	f04f 32ff 	mov.w	r2, #4294967295
{
   11664:	b099      	sub	sp, #100	; 0x64
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
   11666:	f04f 33ff 	mov.w	r3, #4294967295
   1166a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
   1166e:	680b      	ldr	r3, [r1, #0]
{
   11670:	4606      	mov	r6, r0
   11672:	460c      	mov	r4, r1
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
   11674:	8b98      	ldrh	r0, [r3, #28]
   11676:	8949      	ldrh	r1, [r1, #10]
   11678:	f004 ff4a 	bl	16510 <bt_mesh_friend_match>
   1167c:	7d23      	ldrb	r3, [r4, #20]
   1167e:	f360 13c7 	bfi	r3, r0, #7, #1
   11682:	7523      	strb	r3, [r4, #20]
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
   11684:	2109      	movs	r1, #9
   11686:	4630      	mov	r0, r6
   11688:	f00e fc50 	bl	1ff2c <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
   1168c:	4630      	mov	r0, r6
   1168e:	f01b ff89 	bl	2d5a4 <net_buf_simple_headroom>
	if (SEG(buf->data)) {
   11692:	f8d6 a000 	ldr.w	sl, [r6]
	state->len = buf->len;
   11696:	88b3      	ldrh	r3, [r6, #4]
   11698:	9306      	str	r3, [sp, #24]
   1169a:	f99a 3000 	ldrsb.w	r3, [sl]
	state->offset = net_buf_simple_headroom(buf);
   1169e:	9009      	str	r0, [sp, #36]	; 0x24
   116a0:	2b00      	cmp	r3, #0
   116a2:	f280 8260 	bge.w	11b66 <bt_mesh_trans_recv+0x50a>
		if (!rx->local_match && !rx->friend_match) {
   116a6:	f894 b014 	ldrb.w	fp, [r4, #20]
   116aa:	f01b 0bc0 	ands.w	fp, fp, #192	; 0xc0
   116ae:	f04f 0900 	mov.w	r9, #0
   116b2:	f000 8116 	beq.w	118e2 <bt_mesh_trans_recv+0x286>
	if (buf->len < 5) {
   116b6:	9b06      	ldr	r3, [sp, #24]
	struct bt_mesh_rpl *rpl = NULL;
   116b8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	if (buf->len < 5) {
   116bc:	2b04      	cmp	r3, #4
   116be:	d806      	bhi.n	116ce <bt_mesh_trans_recv+0x72>
		BT_ERR("Too short segmented message (len %u)", buf->len);
   116c0:	461a      	mov	r2, r3
   116c2:	2145      	movs	r1, #69	; 0x45
   116c4:	4889      	ldr	r0, [pc, #548]	; (118ec <bt_mesh_trans_recv+0x290>)
   116c6:	f016 f904 	bl	278d2 <printk>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   116ca:	2500      	movs	r5, #0
   116cc:	e296      	b.n	11bfc <bt_mesh_trans_recv+0x5a0>
	if (bt_mesh_rpl_check(net_rx, &rpl)) {
   116ce:	a90b      	add	r1, sp, #44	; 0x2c
   116d0:	4620      	mov	r0, r4
   116d2:	f000 fb5f 	bl	11d94 <bt_mesh_rpl_check>
   116d6:	4605      	mov	r5, r0
   116d8:	b140      	cbz	r0, 116ec <bt_mesh_trans_recv+0x90>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
   116da:	6923      	ldr	r3, [r4, #16]
   116dc:	9300      	str	r3, [sp, #0]
   116de:	8922      	ldrh	r2, [r4, #8]
   116e0:	8963      	ldrh	r3, [r4, #10]
   116e2:	4883      	ldr	r0, [pc, #524]	; (118f0 <bt_mesh_trans_recv+0x294>)
   116e4:	2157      	movs	r1, #87	; 0x57
   116e6:	f016 f8f4 	bl	278d2 <printk>
		return -EINVAL;
   116ea:	e7ee      	b.n	116ca <bt_mesh_trans_recv+0x6e>
	net_buf_simple_pull(buf, 1);
   116ec:	2101      	movs	r1, #1
   116ee:	4630      	mov	r0, r6
   116f0:	f00e fc1c 	bl	1ff2c <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
   116f4:	4630      	mov	r0, r6
   116f6:	f01b ff2b 	bl	2d550 <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
   116fa:	00c7      	lsls	r7, r0, #3
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
   116fc:	f3c0 088c 	ubfx	r8, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
   11700:	4630      	mov	r0, r6
   11702:	f01b ff15 	bl	2d530 <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
   11706:	f007 0718 	and.w	r7, r7, #24
	seg_o |= seg_n >> 5;
   1170a:	ea47 1750 	orr.w	r7, r7, r0, lsr #5
	seg_n &= 0x1f;
   1170e:	f000 031f 	and.w	r3, r0, #31
	seg_o |= seg_n >> 5;
   11712:	b2ff      	uxtb	r7, r7
	if (seg_o > seg_n) {
   11714:	429f      	cmp	r7, r3
	seg_n = net_buf_simple_pull_u8(buf);
   11716:	9007      	str	r0, [sp, #28]
	seg_n &= 0x1f;
   11718:	9305      	str	r3, [sp, #20]
	if (seg_o > seg_n) {
   1171a:	d906      	bls.n	1172a <bt_mesh_trans_recv+0xce>
		BT_ERR("SegO greater than SegN (%u > %u)", seg_o, seg_n);
   1171c:	463a      	mov	r2, r7
   1171e:	2145      	movs	r1, #69	; 0x45
   11720:	4874      	ldr	r0, [pc, #464]	; (118f4 <bt_mesh_trans_recv+0x298>)
   11722:	f016 f8d6 	bl	278d2 <printk>
	uint8_t seg_count = 0;
   11726:	46a9      	mov	r9, r5
   11728:	e7cf      	b.n	116ca <bt_mesh_trans_recv+0x6e>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
   1172a:	6921      	ldr	r1, [r4, #16]
   1172c:	4872      	ldr	r0, [pc, #456]	; (118f8 <bt_mesh_trans_recv+0x29c>)
   1172e:	7d23      	ldrb	r3, [r4, #20]
   11730:	6800      	ldr	r0, [r0, #0]
   11732:	eba1 0808 	sub.w	r8, r1, r8
   11736:	f003 0201 	and.w	r2, r3, #1
   1173a:	f3c8 080c 	ubfx	r8, r8, #0, #13
   1173e:	1a82      	subs	r2, r0, r2
   11740:	eba1 0808 	sub.w	r8, r1, r8
   11744:	ea48 6b02 	orr.w	fp, r8, r2, lsl #24
   11748:	ea4f 2c12 	mov.w	ip, r2, lsr #8
	*seg_count = seg_n + 1;
   1174c:	9a05      	ldr	r2, [sp, #20]
		if (rx->src != net_rx->ctx.addr ||
   1174e:	486b      	ldr	r0, [pc, #428]	; (118fc <bt_mesh_trans_recv+0x2a0>)
	*seg_count = seg_n + 1;
   11750:	3201      	adds	r2, #1
   11752:	9208      	str	r2, [sp, #32]
		if (rx->src != net_rx->ctx.addr ||
   11754:	6981      	ldr	r1, [r0, #24]
   11756:	68a2      	ldr	r2, [r4, #8]
	*seg_count = seg_n + 1;
   11758:	f89d 9020 	ldrb.w	r9, [sp, #32]
		if (rx->src != net_rx->ctx.addr ||
   1175c:	4291      	cmp	r1, r2
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
   1175e:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
		if (rx->src != net_rx->ctx.addr ||
   11762:	4680      	mov	r8, r0
   11764:	d113      	bne.n	1178e <bt_mesh_trans_recv+0x132>
		if (rx->seq_auth >= *seq_auth) {
   11766:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
   1176a:	4561      	cmp	r1, ip
   1176c:	bf08      	it	eq
   1176e:	4558      	cmpeq	r0, fp
   11770:	f080 823b 	bcs.w	11bea <bt_mesh_trans_recv+0x58e>
		if (rx->in_use) {
   11774:	f898 301f 	ldrb.w	r3, [r8, #31]
   11778:	065a      	lsls	r2, r3, #25
   1177a:	d508      	bpl.n	1178e <bt_mesh_trans_recv+0x132>
			BT_WARN("Duplicate SDU from src 0x%04x",
   1177c:	2157      	movs	r1, #87	; 0x57
   1177e:	4860      	ldr	r0, [pc, #384]	; (11900 <bt_mesh_trans_recv+0x2a4>)
   11780:	8922      	ldrh	r2, [r4, #8]
   11782:	f016 f8a6 	bl	278d2 <printk>
			seg_rx_reset(rx, true);
   11786:	2101      	movs	r1, #1
   11788:	4640      	mov	r0, r8
   1178a:	f7ff f88f 	bl	108ac <seg_rx_reset>
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
   1178e:	9b05      	ldr	r3, [sp, #20]
   11790:	2b02      	cmp	r3, #2
   11792:	d953      	bls.n	1183c <bt_mesh_trans_recv+0x1e0>
		BT_ERR("Too big incoming SDU length");
   11794:	2145      	movs	r1, #69	; 0x45
   11796:	485b      	ldr	r0, [pc, #364]	; (11904 <bt_mesh_trans_recv+0x2a8>)
   11798:	f016 f89b 	bl	278d2 <printk>
			 net_rx->friend_match);
   1179c:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
   1179e:	8922      	ldrh	r2, [r4, #8]
   117a0:	8961      	ldrh	r1, [r4, #10]
   117a2:	6820      	ldr	r0, [r4, #0]
   117a4:	09db      	lsrs	r3, r3, #7
   117a6:	9302      	str	r3, [sp, #8]
   117a8:	2500      	movs	r5, #0
   117aa:	ab0c      	add	r3, sp, #48	; 0x30
   117ac:	9300      	str	r3, [sp, #0]
   117ae:	9501      	str	r5, [sp, #4]
   117b0:	7be3      	ldrb	r3, [r4, #15]
   117b2:	f019 fe32 	bl	2b41a <send_ack>
			return -EMSGSIZE;
   117b6:	f06f 0b79 	mvn.w	fp, #121	; 0x79
   117ba:	e075      	b.n	118a8 <bt_mesh_trans_recv+0x24c>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
   117bc:	f89a 1000 	ldrb.w	r1, [sl]
   117c0:	f898 201e 	ldrb.w	r2, [r8, #30]
   117c4:	4291      	cmp	r1, r2
   117c6:	d106      	bne.n	117d6 <bt_mesh_trans_recv+0x17a>
   117c8:	f898 101f 	ldrb.w	r1, [r8, #31]
   117cc:	9a05      	ldr	r2, [sp, #20]
   117ce:	f001 011f 	and.w	r1, r1, #31
   117d2:	4291      	cmp	r1, r2
   117d4:	d004      	beq.n	117e0 <bt_mesh_trans_recv+0x184>
		BT_ERR("Invalid segment for ongoing session");
   117d6:	484c      	ldr	r0, [pc, #304]	; (11908 <bt_mesh_trans_recv+0x2ac>)
   117d8:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Inconsistent CTL in segment");
   117da:	f016 f87a 	bl	278d2 <printk>
		return false;
   117de:	e774      	b.n	116ca <bt_mesh_trans_recv+0x6e>
	if (rx->ctl != net_rx->ctl) {
   117e0:	f898 201f 	ldrb.w	r2, [r8, #31]
   117e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   117e8:	f3c2 1040 	ubfx	r0, r2, #5, #1
   117ec:	4298      	cmp	r0, r3
   117ee:	d002      	beq.n	117f6 <bt_mesh_trans_recv+0x19a>
		BT_ERR("Inconsistent CTL in segment");
   117f0:	2145      	movs	r1, #69	; 0x45
   117f2:	4846      	ldr	r0, [pc, #280]	; (1190c <bt_mesh_trans_recv+0x2b0>)
   117f4:	e7f1      	b.n	117da <bt_mesh_trans_recv+0x17e>
		if (rx->in_use) {
   117f6:	f012 0540 	ands.w	r5, r2, #64	; 0x40
   117fa:	f040 80bd 	bne.w	11978 <bt_mesh_trans_recv+0x31c>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
   117fe:	3101      	adds	r1, #1
   11800:	2301      	movs	r3, #1
   11802:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
   11806:	fa03 f101 	lsl.w	r1, r3, r1
   1180a:	3901      	subs	r1, #1
   1180c:	4288      	cmp	r0, r1
   1180e:	d112      	bne.n	11836 <bt_mesh_trans_recv+0x1da>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
   11810:	09d2      	lsrs	r2, r2, #7
   11812:	ab0c      	add	r3, sp, #48	; 0x30
   11814:	e9cd 0201 	strd	r0, r2, [sp, #4]
   11818:	9300      	str	r3, [sp, #0]
   1181a:	8922      	ldrh	r2, [r4, #8]
   1181c:	7be3      	ldrb	r3, [r4, #15]
   1181e:	8961      	ldrh	r1, [r4, #10]
   11820:	6820      	ldr	r0, [r4, #0]
   11822:	f019 fdfa 	bl	2b41a <send_ack>
			if (rpl) {
   11826:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11828:	b110      	cbz	r0, 11830 <bt_mesh_trans_recv+0x1d4>
				bt_mesh_rpl_update(rpl, net_rx);
   1182a:	4621      	mov	r1, r4
   1182c:	f019 fe3c 	bl	2b4a8 <bt_mesh_rpl_update>
		return -EALREADY;
   11830:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   11834:	e038      	b.n	118a8 <bt_mesh_trans_recv+0x24c>
		BT_WARN("Got segment for canceled SDU");
   11836:	2157      	movs	r1, #87	; 0x57
   11838:	4835      	ldr	r0, [pc, #212]	; (11910 <bt_mesh_trans_recv+0x2b4>)
   1183a:	e1dd      	b.n	11bf8 <bt_mesh_trans_recv+0x59c>
	    net_rx->friend_match && !net_rx->local_match &&
   1183c:	7d23      	ldrb	r3, [r4, #20]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) &&
   1183e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11842:	2b80      	cmp	r3, #128	; 0x80
   11844:	d120      	bne.n	11888 <bt_mesh_trans_recv+0x22c>
	    !bt_mesh_friend_queue_has_space(net_rx->sub->net_idx,
   11846:	6823      	ldr	r3, [r4, #0]
   11848:	8962      	ldrh	r2, [r4, #10]
   1184a:	8b98      	ldrh	r0, [r3, #28]
   1184c:	8921      	ldrh	r1, [r4, #8]
   1184e:	f8cd 9000 	str.w	r9, [sp]
   11852:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
   11856:	465b      	mov	r3, fp
   11858:	f004 fe6c 	bl	16534 <bt_mesh_friend_queue_has_space>
	    net_rx->friend_match && !net_rx->local_match &&
   1185c:	4605      	mov	r5, r0
   1185e:	b998      	cbnz	r0, 11888 <bt_mesh_trans_recv+0x22c>
		BT_ERR("No space in Friend Queue for %u segments", *seg_count);
   11860:	9a08      	ldr	r2, [sp, #32]
   11862:	482c      	ldr	r0, [pc, #176]	; (11914 <bt_mesh_trans_recv+0x2b8>)
   11864:	2145      	movs	r1, #69	; 0x45
   11866:	f016 f834 	bl	278d2 <printk>
			 net_rx->friend_match);
   1186a:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
   1186c:	f8cd b000 	str.w	fp, [sp]
   11870:	09db      	lsrs	r3, r3, #7
   11872:	e9cd 5301 	strd	r5, r3, [sp, #4]
   11876:	8922      	ldrh	r2, [r4, #8]
   11878:	7be3      	ldrb	r3, [r4, #15]
   1187a:	8961      	ldrh	r1, [r4, #10]
   1187c:	6820      	ldr	r0, [r4, #0]
   1187e:	f019 fdcc 	bl	2b41a <send_ack>
		return -ENOBUFS;
   11882:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   11886:	e00f      	b.n	118a8 <bt_mesh_trans_recv+0x24c>
	return slab->num_blocks - slab->num_used;
   11888:	4b23      	ldr	r3, [pc, #140]	; (11918 <bt_mesh_trans_recv+0x2bc>)
	if (k_mem_slab_num_free_get(&segs) < 1) {
   1188a:	689a      	ldr	r2, [r3, #8]
   1188c:	699b      	ldr	r3, [r3, #24]
   1188e:	429a      	cmp	r2, r3
   11890:	d148      	bne.n	11924 <bt_mesh_trans_recv+0x2c8>
		BT_WARN("Not enough segments for incoming message");
   11892:	2157      	movs	r1, #87	; 0x57
   11894:	4821      	ldr	r0, [pc, #132]	; (1191c <bt_mesh_trans_recv+0x2c0>)
   11896:	f016 f81c 	bl	278d2 <printk>
		BT_WARN("No free slots for new incoming segmented messages");
   1189a:	2157      	movs	r1, #87	; 0x57
   1189c:	4820      	ldr	r0, [pc, #128]	; (11920 <bt_mesh_trans_recv+0x2c4>)
   1189e:	f016 f818 	bl	278d2 <printk>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   118a2:	2500      	movs	r5, #0
		return -ENOMEM;
   118a4:	f06f 0b0b 	mvn.w	fp, #11
	buf->data = buf->__buf + state->offset;
   118a8:	68b3      	ldr	r3, [r6, #8]
   118aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   118ac:	fa13 f382 	uxtah	r3, r3, r2
   118b0:	6033      	str	r3, [r6, #0]
	buf->len = state->len;
   118b2:	9b06      	ldr	r3, [sp, #24]
   118b4:	80b3      	strh	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match && !err) {
   118b6:	f994 3014 	ldrsb.w	r3, [r4, #20]
   118ba:	2b00      	cmp	r3, #0
   118bc:	da11      	bge.n	118e2 <bt_mesh_trans_recv+0x286>
   118be:	f1bb 0f00 	cmp.w	fp, #0
   118c2:	d10e      	bne.n	118e2 <bt_mesh_trans_recv+0x286>
		if (seq_auth == TRANS_SEQ_AUTH_NVAL) {
   118c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   118c8:	3301      	adds	r3, #1
   118ca:	bf08      	it	eq
   118cc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
			bt_mesh_friend_enqueue_rx(rx, pdu_type, NULL,
   118d0:	9600      	str	r6, [sp, #0]
   118d2:	464b      	mov	r3, r9
   118d4:	bf0c      	ite	eq
   118d6:	465a      	moveq	r2, fp
			bt_mesh_friend_enqueue_rx(rx, pdu_type, &seq_auth,
   118d8:	aa0c      	addne	r2, sp, #48	; 0x30
   118da:	4629      	mov	r1, r5
   118dc:	4620      	mov	r0, r4
   118de:	f004 fe5f 	bl	165a0 <bt_mesh_friend_enqueue_rx>
}
   118e2:	4658      	mov	r0, fp
   118e4:	b019      	add	sp, #100	; 0x64
   118e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118ea:	bf00      	nop
   118ec:	0003324f 	.word	0x0003324f
   118f0:	00033279 	.word	0x00033279
   118f4:	000332a7 	.word	0x000332a7
   118f8:	20002968 	.word	0x20002968
   118fc:	20002ba0 	.word	0x20002ba0
   11900:	000332cd 	.word	0x000332cd
   11904:	00033376 	.word	0x00033376
   11908:	0003330a 	.word	0x0003330a
   1190c:	00033333 	.word	0x00033333
   11910:	00033354 	.word	0x00033354
   11914:	00033397 	.word	0x00033397
   11918:	20001df8 	.word	0x20001df8
   1191c:	000333c5 	.word	0x000333c5
   11920:	000333f3 	.word	0x000333f3
		if (rx->in_use) {
   11924:	49b7      	ldr	r1, [pc, #732]	; (11c04 <bt_mesh_trans_recv+0x5a8>)
   11926:	7fcb      	ldrb	r3, [r1, #31]
   11928:	f013 0040 	ands.w	r0, r3, #64	; 0x40
   1192c:	d1b5      	bne.n	1189a <bt_mesh_trans_recv+0x23e>
		rx->in_use = 1U;
   1192e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11932:	77cb      	strb	r3, [r1, #31]
		rx->sub = net_rx->sub;
   11934:	6823      	ldr	r3, [r4, #0]
   11936:	600b      	str	r3, [r1, #0]
		rx->ctl = net_rx->ctl;
   11938:	7d23      	ldrb	r3, [r4, #20]
   1193a:	7fcd      	ldrb	r5, [r1, #31]
   1193c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   11940:	f363 1545 	bfi	r5, r3, #5, #1
		rx->seq_auth = *seq_auth;
   11944:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   11948:	e9c1 2304 	strd	r2, r3, [r1, #16]
		rx->seg_n = seg_n;
   1194c:	9a07      	ldr	r2, [sp, #28]
   1194e:	462b      	mov	r3, r5
   11950:	f362 0304 	bfi	r3, r2, #0, #5
   11954:	77cb      	strb	r3, [r1, #31]
		rx->hdr = *hdr;
   11956:	f89a 3000 	ldrb.w	r3, [sl]
   1195a:	778b      	strb	r3, [r1, #30]
		rx->ttl = net_rx->ctx.send_ttl;
   1195c:	7be3      	ldrb	r3, [r4, #15]
   1195e:	f881 3020 	strb.w	r3, [r1, #32]
		rx->src = net_rx->ctx.addr;
   11962:	8923      	ldrh	r3, [r4, #8]
   11964:	830b      	strh	r3, [r1, #24]
		rx->dst = net_rx->ctx.recv_dst;
   11966:	8963      	ldrh	r3, [r4, #10]
   11968:	834b      	strh	r3, [r1, #26]
	rx->obo = net_rx->friend_match;
   1196a:	7d23      	ldrb	r3, [r4, #20]
   1196c:	7fca      	ldrb	r2, [r1, #31]
		rx->block = 0U;
   1196e:	6248      	str	r0, [r1, #36]	; 0x24
	rx->obo = net_rx->friend_match;
   11970:	09db      	lsrs	r3, r3, #7
   11972:	f363 12c7 	bfi	r2, r3, #7, #1
   11976:	77ca      	strb	r2, [r1, #31]
	if (BIT(seg_o) & rx->block) {
   11978:	f8df b288 	ldr.w	fp, [pc, #648]	; 11c04 <bt_mesh_trans_recv+0x5a8>
   1197c:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
   11980:	40fd      	lsrs	r5, r7
   11982:	f015 0501 	ands.w	r5, r5, #1
   11986:	f040 80ec 	bne.w	11b62 <bt_mesh_trans_recv+0x506>
	if (seg_o == seg_n) {
   1198a:	9b05      	ldr	r3, [sp, #20]
   1198c:	f89b 201f 	ldrb.w	r2, [fp, #31]
   11990:	88b1      	ldrh	r1, [r6, #4]
   11992:	429f      	cmp	r7, r3
   11994:	f3c2 1240 	ubfx	r2, r2, #5, #1
   11998:	d120      	bne.n	119dc <bt_mesh_trans_recv+0x380>
		return BT_MESH_APP_SEG_SDU_MAX;
   1199a:	2a00      	cmp	r2, #0
   1199c:	bf14      	ite	ne
   1199e:	2308      	movne	r3, #8
   119a0:	230c      	moveq	r3, #12
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
   119a2:	fb03 1307 	mla	r3, r3, r7, r1
   119a6:	b29b      	uxth	r3, r3
		if (rx->len > BT_MESH_RX_SDU_MAX) {
   119a8:	2b24      	cmp	r3, #36	; 0x24
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
   119aa:	f8ab 301c 	strh.w	r3, [fp, #28]
		if (rx->len > BT_MESH_RX_SDU_MAX) {
   119ae:	d91e      	bls.n	119ee <bt_mesh_trans_recv+0x392>
			BT_ERR("Too large SDU len");
   119b0:	2145      	movs	r1, #69	; 0x45
   119b2:	4895      	ldr	r0, [pc, #596]	; (11c08 <bt_mesh_trans_recv+0x5ac>)
   119b4:	f015 ff8d 	bl	278d2 <printk>
				 seq_auth, 0, rx->obo);
   119b8:	f89b 301f 	ldrb.w	r3, [fp, #31]
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
   119bc:	8961      	ldrh	r1, [r4, #10]
   119be:	8922      	ldrh	r2, [r4, #8]
   119c0:	6820      	ldr	r0, [r4, #0]
   119c2:	09db      	lsrs	r3, r3, #7
   119c4:	e9cd 5301 	strd	r5, r3, [sp, #4]
   119c8:	ab0c      	add	r3, sp, #48	; 0x30
   119ca:	9300      	str	r3, [sp, #0]
   119cc:	7be3      	ldrb	r3, [r4, #15]
   119ce:	f019 fd24 	bl	2b41a <send_ack>
			seg_rx_reset(rx, true);
   119d2:	2101      	movs	r1, #1
   119d4:	4658      	mov	r0, fp
   119d6:	f7fe ff69 	bl	108ac <seg_rx_reset>
   119da:	e6ec      	b.n	117b6 <bt_mesh_trans_recv+0x15a>
		return BT_MESH_APP_SEG_SDU_MAX;
   119dc:	2a00      	cmp	r2, #0
		if (buf->len != seg_len(rx->ctl)) {
   119de:	bf14      	ite	ne
   119e0:	2308      	movne	r3, #8
   119e2:	230c      	moveq	r3, #12
   119e4:	428b      	cmp	r3, r1
   119e6:	d002      	beq.n	119ee <bt_mesh_trans_recv+0x392>
			BT_ERR("Incorrect segment size for message type");
   119e8:	2145      	movs	r1, #69	; 0x45
   119ea:	4888      	ldr	r0, [pc, #544]	; (11c0c <bt_mesh_trans_recv+0x5b0>)
   119ec:	e104      	b.n	11bf8 <bt_mesh_trans_recv+0x59c>
   119ee:	f01c fbbc 	bl	2e16a <z_impl_k_uptime_ticks>
   119f2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   119f6:	fba0 bc05 	umull	fp, ip, r0, r5
   119fa:	fb05 cc01 	mla	ip, r5, r1, ip
   119fe:	ea4f 32db 	mov.w	r2, fp, lsr #15
   11a02:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
	return (uint32_t)k_uptime_get();
   11a06:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   11a0a:	4881      	ldr	r0, [pc, #516]	; (11c10 <bt_mesh_trans_recv+0x5b4>)
   11a0c:	f013 ff8c 	bl	25928 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   11a10:	fba0 0105 	umull	r0, r1, r0, r5
   11a14:	0bc3      	lsrs	r3, r0, #15
	if (!k_delayed_work_remaining_get(&rx->ack) &&
   11a16:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   11a1a:	d115      	bne.n	11a48 <bt_mesh_trans_recv+0x3ec>
		int32_t timeout = ack_timeout(rx);
   11a1c:	4879      	ldr	r0, [pc, #484]	; (11c04 <bt_mesh_trans_recv+0x5a8>)
   11a1e:	f019 fc3a 	bl	2b296 <ack_timeout>
			return (t * to_hz + off) / from_hz;
   11a22:	f44f 4500 	mov.w	r5, #32768	; 0x8000
		k_delayed_work_submit(&rx->ack, K_MSEC(timeout));
   11a26:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   11a2a:	2100      	movs	r1, #0
   11a2c:	f240 30e7 	movw	r0, #999	; 0x3e7
   11a30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11a34:	2300      	movs	r3, #0
   11a36:	fbc5 010c 	smlal	r0, r1, r5, ip
   11a3a:	f7ef ffa7 	bl	198c <__aeabi_uldivmod>
   11a3e:	4602      	mov	r2, r0
   11a40:	460b      	mov	r3, r1
   11a42:	4874      	ldr	r0, [pc, #464]	; (11c14 <bt_mesh_trans_recv+0x5b8>)
   11a44:	f7fe ff2c 	bl	108a0 <k_delayed_work_submit>
	err = k_mem_slab_alloc(&segs, &rx->seg[seg_o], K_NO_WAIT);
   11a48:	1c79      	adds	r1, r7, #1
   11a4a:	2200      	movs	r2, #0
   11a4c:	2300      	movs	r3, #0
   11a4e:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   11a52:	4871      	ldr	r0, [pc, #452]	; (11c18 <bt_mesh_trans_recv+0x5bc>)
   11a54:	f011 fef2 	bl	2383c <k_mem_slab_alloc>
	if (err) {
   11a58:	4683      	mov	fp, r0
   11a5a:	b130      	cbz	r0, 11a6a <bt_mesh_trans_recv+0x40e>
		BT_WARN("Unable allocate buffer for Seg %u", seg_o);
   11a5c:	463a      	mov	r2, r7
   11a5e:	2157      	movs	r1, #87	; 0x57
   11a60:	486e      	ldr	r0, [pc, #440]	; (11c1c <bt_mesh_trans_recv+0x5c0>)
   11a62:	f015 ff36 	bl	278d2 <printk>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   11a66:	2500      	movs	r5, #0
   11a68:	e70b      	b.n	11882 <bt_mesh_trans_recv+0x226>
	memcpy(rx->seg[seg_o], buf->data, buf->len);
   11a6a:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   11a6e:	88b2      	ldrh	r2, [r6, #4]
   11a70:	6858      	ldr	r0, [r3, #4]
   11a72:	6831      	ldr	r1, [r6, #0]
   11a74:	f01c fc19 	bl	2e2aa <memcpy>
	rx->block |= BIT(seg_o);
   11a78:	2501      	movs	r5, #1
   11a7a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   11a7e:	fa05 f707 	lsl.w	r7, r5, r7
   11a82:	431f      	orrs	r7, r3
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
   11a84:	9b05      	ldr	r3, [sp, #20]
	rx->block |= BIT(seg_o);
   11a86:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
   11a8a:	442b      	add	r3, r5
   11a8c:	fa05 f303 	lsl.w	r3, r5, r3
   11a90:	3b01      	subs	r3, #1
   11a92:	429f      	cmp	r7, r3
   11a94:	f47f af08 	bne.w	118a8 <bt_mesh_trans_recv+0x24c>
	if (rpl) {
   11a98:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11a9a:	b110      	cbz	r0, 11aa2 <bt_mesh_trans_recv+0x446>
		bt_mesh_rpl_update(rpl, net_rx);
   11a9c:	4621      	mov	r1, r4
   11a9e:	f019 fd03 	bl	2b4a8 <bt_mesh_rpl_update>
	k_delayed_work_cancel(&rx->ack);
   11aa2:	485c      	ldr	r0, [pc, #368]	; (11c14 <bt_mesh_trans_recv+0x5b8>)
   11aa4:	f013 fd68 	bl	25578 <k_delayed_work_cancel>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
   11aa8:	f898 301f 	ldrb.w	r3, [r8, #31]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
   11aac:	8922      	ldrh	r2, [r4, #8]
   11aae:	8961      	ldrh	r1, [r4, #10]
   11ab0:	6820      	ldr	r0, [r4, #0]
   11ab2:	09db      	lsrs	r3, r3, #7
   11ab4:	9302      	str	r3, [sp, #8]
   11ab6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   11aba:	9301      	str	r3, [sp, #4]
   11abc:	ad0c      	add	r5, sp, #48	; 0x30
   11abe:	7be3      	ldrb	r3, [r4, #15]
   11ac0:	9500      	str	r5, [sp, #0]
   11ac2:	f019 fcaa 	bl	2b41a <send_ack>
	if (net_rx->ctl) {
   11ac6:	7d23      	ldrb	r3, [r4, #20]
   11ac8:	071b      	lsls	r3, r3, #28
   11aca:	d513      	bpl.n	11af4 <bt_mesh_trans_recv+0x498>
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
   11acc:	ab12      	add	r3, sp, #72	; 0x48
   11ace:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   11ad2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		seg_rx_assemble(rx, &sdu, 0U);
   11ad6:	a90f      	add	r1, sp, #60	; 0x3c
   11ad8:	2200      	movs	r2, #0
   11ada:	484a      	ldr	r0, [pc, #296]	; (11c04 <bt_mesh_trans_recv+0x5a8>)
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
   11adc:	930f      	str	r3, [sp, #60]	; 0x3c
		seg_rx_assemble(rx, &sdu, 0U);
   11ade:	f019 fbf8 	bl	2b2d2 <seg_rx_assemble>
		err = ctl_recv(net_rx, *hdr, &sdu, seq_auth);
   11ae2:	462b      	mov	r3, r5
   11ae4:	aa0f      	add	r2, sp, #60	; 0x3c
   11ae6:	f89a 1000 	ldrb.w	r1, [sl]
   11aea:	4620      	mov	r0, r4
   11aec:	f7ff f8b8 	bl	10c60 <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
   11af0:	4683      	mov	fp, r0
   11af2:	e00f      	b.n	11b14 <bt_mesh_trans_recv+0x4b8>
	} else if (rx->len < 1 + APP_MIC_LEN(ASZMIC(hdr))) {
   11af4:	f89a 3001 	ldrb.w	r3, [sl, #1]
   11af8:	f8b8 201c 	ldrh.w	r2, [r8, #28]
   11afc:	09db      	lsrs	r3, r3, #7
   11afe:	bf14      	ite	ne
   11b00:	2309      	movne	r3, #9
   11b02:	2305      	moveq	r3, #5
   11b04:	429a      	cmp	r2, r3
   11b06:	da0b      	bge.n	11b20 <bt_mesh_trans_recv+0x4c4>
		BT_ERR("Too short SDU + MIC");
   11b08:	2145      	movs	r1, #69	; 0x45
   11b0a:	4845      	ldr	r0, [pc, #276]	; (11c20 <bt_mesh_trans_recv+0x5c4>)
   11b0c:	f015 fee1 	bl	278d2 <printk>
		err = -EINVAL;
   11b10:	f06f 0b15 	mvn.w	fp, #21
	seg_rx_reset(rx, false);
   11b14:	2100      	movs	r1, #0
   11b16:	483b      	ldr	r0, [pc, #236]	; (11c04 <bt_mesh_trans_recv+0x5a8>)
   11b18:	f7fe fec8 	bl	108ac <seg_rx_reset>
	*pdu_type = BT_MESH_FRIEND_PDU_COMPLETE;
   11b1c:	2502      	movs	r5, #2
   11b1e:	e6c3      	b.n	118a8 <bt_mesh_trans_recv+0x24c>
	if (!buf->__buf) {
   11b20:	4b40      	ldr	r3, [pc, #256]	; (11c24 <bt_mesh_trans_recv+0x5c8>)
   11b22:	6899      	ldr	r1, [r3, #8]
   11b24:	b911      	cbnz	r1, 11b2c <bt_mesh_trans_recv+0x4d0>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   11b26:	f103 010c 	add.w	r1, r3, #12
   11b2a:	6099      	str	r1, [r3, #8]
	buf->data = buf->__buf + reserve_head;
   11b2c:	6899      	ldr	r1, [r3, #8]
   11b2e:	6019      	str	r1, [r3, #0]
	buf->len = 0U;
   11b30:	2000      	movs	r0, #0
   11b32:	8098      	strh	r0, [r3, #4]
			&sdu, seg_buf.data, rx->len - APP_MIC_LEN(ASZMIC(hdr)));
   11b34:	f89a 3001 	ldrb.w	r3, [sl, #1]
   11b38:	09db      	lsrs	r3, r3, #7
   11b3a:	bf14      	ite	ne
   11b3c:	2308      	movne	r3, #8
   11b3e:	2304      	moveq	r3, #4
		net_buf_simple_init_with_data(
   11b40:	ad12      	add	r5, sp, #72	; 0x48
   11b42:	1ad2      	subs	r2, r2, r3
   11b44:	4628      	mov	r0, r5
   11b46:	f01b fcca 	bl	2d4de <net_buf_simple_init_with_data>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
   11b4a:	f89a 2001 	ldrb.w	r2, [sl, #1]
   11b4e:	f89a 1000 	ldrb.w	r1, [sl]
   11b52:	4b34      	ldr	r3, [pc, #208]	; (11c24 <bt_mesh_trans_recv+0x5c8>)
   11b54:	e9cd 5800 	strd	r5, r8, [sp]
   11b58:	09d2      	lsrs	r2, r2, #7
   11b5a:	4620      	mov	r0, r4
   11b5c:	f7ff fd2a 	bl	115b4 <sdu_recv>
   11b60:	e7c6      	b.n	11af0 <bt_mesh_trans_recv+0x494>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   11b62:	2500      	movs	r5, #0
   11b64:	e664      	b.n	11830 <bt_mesh_trans_recv+0x1d4>
	if (buf->len < 1) {
   11b66:	9b06      	ldr	r3, [sp, #24]
   11b68:	b933      	cbnz	r3, 11b78 <bt_mesh_trans_recv+0x51c>
		BT_ERR("Too small unsegmented PDU");
   11b6a:	2145      	movs	r1, #69	; 0x45
   11b6c:	482e      	ldr	r0, [pc, #184]	; (11c28 <bt_mesh_trans_recv+0x5cc>)
   11b6e:	f015 feb0 	bl	278d2 <printk>
		seg_count = 1;
   11b72:	f04f 0901 	mov.w	r9, #1
   11b76:	e5a8      	b.n	116ca <bt_mesh_trans_recv+0x6e>
	if (bt_mesh_rpl_check(rx, NULL)) {
   11b78:	2100      	movs	r1, #0
   11b7a:	4620      	mov	r0, r4
   11b7c:	f000 f90a 	bl	11d94 <bt_mesh_rpl_check>
   11b80:	4607      	mov	r7, r0
   11b82:	b140      	cbz	r0, 11b96 <bt_mesh_trans_recv+0x53a>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
   11b84:	6923      	ldr	r3, [r4, #16]
   11b86:	9300      	str	r3, [sp, #0]
   11b88:	8922      	ldrh	r2, [r4, #8]
   11b8a:	8963      	ldrh	r3, [r4, #10]
   11b8c:	4827      	ldr	r0, [pc, #156]	; (11c2c <bt_mesh_trans_recv+0x5d0>)
   11b8e:	2157      	movs	r1, #87	; 0x57
   11b90:	f015 fe9f 	bl	278d2 <printk>
   11b94:	e7ed      	b.n	11b72 <bt_mesh_trans_recv+0x516>
	hdr = net_buf_simple_pull_u8(buf);
   11b96:	4630      	mov	r0, r6
   11b98:	f01b fcca 	bl	2d530 <net_buf_simple_pull_u8>
	if (rx->ctl) {
   11b9c:	7d25      	ldrb	r5, [r4, #20]
   11b9e:	f015 0508 	ands.w	r5, r5, #8
	hdr = net_buf_simple_pull_u8(buf);
   11ba2:	4601      	mov	r1, r0
	if (rx->ctl) {
   11ba4:	d009      	beq.n	11bba <bt_mesh_trans_recv+0x55e>
		return ctl_recv(rx, hdr, buf, seq_auth);
   11ba6:	ab0c      	add	r3, sp, #48	; 0x30
   11ba8:	4632      	mov	r2, r6
   11baa:	4620      	mov	r0, r4
   11bac:	f7ff f858 	bl	10c60 <ctl_recv>
		seg_count = 1;
   11bb0:	f04f 0901 	mov.w	r9, #1
		return ctl_recv(rx, hdr, buf, seq_auth);
   11bb4:	4683      	mov	fp, r0
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   11bb6:	463d      	mov	r5, r7
   11bb8:	e676      	b.n	118a8 <bt_mesh_trans_recv+0x24c>
	if (buf->len < 1 + APP_MIC_LEN(0)) {
   11bba:	88b3      	ldrh	r3, [r6, #4]
   11bbc:	2b04      	cmp	r3, #4
   11bbe:	d806      	bhi.n	11bce <bt_mesh_trans_recv+0x572>
		BT_ERR("Too short SDU + MIC");
   11bc0:	2145      	movs	r1, #69	; 0x45
   11bc2:	4817      	ldr	r0, [pc, #92]	; (11c20 <bt_mesh_trans_recv+0x5c4>)
   11bc4:	f015 fe85 	bl	278d2 <printk>
		seg_count = 1;
   11bc8:	f04f 0901 	mov.w	r9, #1
   11bcc:	e016      	b.n	11bfc <bt_mesh_trans_recv+0x5a0>
	buf->len -= APP_MIC_LEN(0);
   11bce:	3b04      	subs	r3, #4
   11bd0:	80b3      	strh	r3, [r6, #4]
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
   11bd2:	4b17      	ldr	r3, [pc, #92]	; (11c30 <bt_mesh_trans_recv+0x5d4>)
   11bd4:	9300      	str	r3, [sp, #0]
   11bd6:	9501      	str	r5, [sp, #4]
   11bd8:	4633      	mov	r3, r6
   11bda:	462a      	mov	r2, r5
   11bdc:	4620      	mov	r0, r4
   11bde:	f7ff fce9 	bl	115b4 <sdu_recv>
		seg_count = 1;
   11be2:	f04f 0901 	mov.w	r9, #1
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
   11be6:	4683      	mov	fp, r0
   11be8:	e65e      	b.n	118a8 <bt_mesh_trans_recv+0x24c>
		if (rx->seq_auth > *seq_auth) {
   11bea:	458c      	cmp	ip, r1
   11bec:	bf08      	it	eq
   11bee:	4583      	cmpeq	fp, r0
   11bf0:	f4bf ade4 	bcs.w	117bc <bt_mesh_trans_recv+0x160>
			BT_WARN("Ignoring old SeqAuth");
   11bf4:	480f      	ldr	r0, [pc, #60]	; (11c34 <bt_mesh_trans_recv+0x5d8>)
   11bf6:	2157      	movs	r1, #87	; 0x57
			BT_ERR("Incorrect segment size for message type");
   11bf8:	f015 fe6b 	bl	278d2 <printk>
		return -EINVAL;
   11bfc:	f06f 0b15 	mvn.w	fp, #21
   11c00:	e652      	b.n	118a8 <bt_mesh_trans_recv+0x24c>
   11c02:	bf00      	nop
   11c04:	20002ba0 	.word	0x20002ba0
   11c08:	0003342a 	.word	0x0003342a
   11c0c:	00033441 	.word	0x00033441
   11c10:	20002be0 	.word	0x20002be0
   11c14:	20002bd0 	.word	0x20002bd0
   11c18:	20001df8 	.word	0x20001df8
   11c1c:	0003346e 	.word	0x0003346e
   11c20:	00033495 	.word	0x00033495
   11c24:	2000141c 	.word	0x2000141c
   11c28:	000334ae 	.word	0x000334ae
   11c2c:	00033279 	.word	0x00033279
   11c30:	20001410 	.word	0x20001410
   11c34:	000332f0 	.word	0x000332f0

00011c38 <bt_mesh_va_pending_store>:
BT_MESH_SETTINGS_DEFINE(va, "Va", va_set);
#endif /* CONFIG_BT_MESH_LABEL_COUNT > 0 */

#define IS_VA_DEL(_label)	((_label)->ref == 0)
void bt_mesh_va_pending_store(void)
{
   11c38:	b570      	push	{r4, r5, r6, lr}
	char path[18];
	uint16_t i;
	int err;

	for (i = 0; (lab = bt_mesh_va_get(i)) != NULL; i++) {
		if (!lab->changed) {
   11c3a:	4c20      	ldr	r4, [pc, #128]	; (11cbc <bt_mesh_va_pending_store+0x84>)
   11c3c:	f994 3001 	ldrsb.w	r3, [r4, #1]
   11c40:	2b00      	cmp	r3, #0
{
   11c42:	b08c      	sub	sp, #48	; 0x30
		if (!lab->changed) {
   11c44:	da1f      	bge.n	11c86 <bt_mesh_va_pending_store+0x4e>
			continue;
		}

		lab->changed = 0U;
   11c46:	7863      	ldrb	r3, [r4, #1]

		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
   11c48:	4a1d      	ldr	r2, [pc, #116]	; (11cc0 <bt_mesh_va_pending_store+0x88>)
		lab->changed = 0U;
   11c4a:	f36f 13c7 	bfc	r3, #7, #1
   11c4e:	7063      	strb	r3, [r4, #1]
		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
   11c50:	2112      	movs	r1, #18
   11c52:	2300      	movs	r3, #0
   11c54:	a802      	add	r0, sp, #8
   11c56:	f015 fe49 	bl	278ec <snprintk>

		if (IS_VA_DEL(lab)) {
   11c5a:	8823      	ldrh	r3, [r4, #0]
   11c5c:	f3c3 020e 	ubfx	r2, r3, #0, #15
   11c60:	b99a      	cbnz	r2, 11c8a <bt_mesh_va_pending_store+0x52>
			err = settings_delete(path);
   11c62:	a802      	add	r0, sp, #8
   11c64:	f016 fa3e 	bl	280e4 <settings_delete>
			memcpy(va.uuid, lab->uuid, 16);

			err = settings_save_one(path, &va, sizeof(va));
		}

		if (err) {
   11c68:	b168      	cbz	r0, 11c86 <bt_mesh_va_pending_store+0x4e>
			BT_ERR("Failed to %s %s value (err %d)",
   11c6a:	8821      	ldrh	r1, [r4, #0]
   11c6c:	9000      	str	r0, [sp, #0]
   11c6e:	4a15      	ldr	r2, [pc, #84]	; (11cc4 <bt_mesh_va_pending_store+0x8c>)
   11c70:	4815      	ldr	r0, [pc, #84]	; (11cc8 <bt_mesh_va_pending_store+0x90>)
   11c72:	f3c1 010e 	ubfx	r1, r1, #0, #15
   11c76:	2900      	cmp	r1, #0
   11c78:	bf08      	it	eq
   11c7a:	4602      	moveq	r2, r0
   11c7c:	ab02      	add	r3, sp, #8
   11c7e:	2145      	movs	r1, #69	; 0x45
   11c80:	4812      	ldr	r0, [pc, #72]	; (11ccc <bt_mesh_va_pending_store+0x94>)
   11c82:	f015 fe26 	bl	278d2 <printk>
			BT_DBG("%s %s value",
			       IS_VA_DEL(lab) ? "Deleted" : "Stored",
			       log_strdup(path));
		}
	}
}
   11c86:	b00c      	add	sp, #48	; 0x30
   11c88:	bd70      	pop	{r4, r5, r6, pc}
			va.ref = lab->ref;
   11c8a:	f3c3 030e 	ubfx	r3, r3, #0, #15
   11c8e:	f8ad 301c 	strh.w	r3, [sp, #28]
			va.addr = lab->addr;
   11c92:	8863      	ldrh	r3, [r4, #2]
   11c94:	f8ad 301e 	strh.w	r3, [sp, #30]
			memcpy(va.uuid, lab->uuid, 16);
   11c98:	ad08      	add	r5, sp, #32
   11c9a:	1d23      	adds	r3, r4, #4
   11c9c:	f104 0614 	add.w	r6, r4, #20
   11ca0:	6818      	ldr	r0, [r3, #0]
   11ca2:	6859      	ldr	r1, [r3, #4]
   11ca4:	462a      	mov	r2, r5
   11ca6:	c203      	stmia	r2!, {r0, r1}
   11ca8:	3308      	adds	r3, #8
   11caa:	42b3      	cmp	r3, r6
   11cac:	4615      	mov	r5, r2
   11cae:	d1f7      	bne.n	11ca0 <bt_mesh_va_pending_store+0x68>
			err = settings_save_one(path, &va, sizeof(va));
   11cb0:	2214      	movs	r2, #20
   11cb2:	a907      	add	r1, sp, #28
   11cb4:	a802      	add	r0, sp, #8
   11cb6:	f7f4 f951 	bl	5f5c <settings_save_one>
   11cba:	e7d5      	b.n	11c68 <bt_mesh_va_pending_store+0x30>
   11cbc:	200056c2 	.word	0x200056c2
   11cc0:	0003357d 	.word	0x0003357d
   11cc4:	00033577 	.word	0x00033577
   11cc8:	00033570 	.word	0x00033570
   11ccc:	0003358b 	.word	0x0003358b

00011cd0 <rpl_set>:
	}
}

static int rpl_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
   11cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11cd2:	460c      	mov	r4, r1
   11cd4:	4616      	mov	r6, r2
   11cd6:	461f      	mov	r7, r3
	struct bt_mesh_rpl *entry;
	struct rpl_val rpl;
	int err;
	uint16_t src;

	if (!name) {
   11cd8:	b940      	cbnz	r0, 11cec <rpl_set+0x1c>
		BT_ERR("Insufficient number of arguments");
   11cda:	2145      	movs	r1, #69	; 0x45
   11cdc:	4828      	ldr	r0, [pc, #160]	; (11d80 <rpl_set+0xb0>)
   11cde:	f015 fdf8 	bl	278d2 <printk>
		return -ENOENT;
   11ce2:	f06f 0401 	mvn.w	r4, #1

	BT_DBG("RPL entry for 0x%04x: Seq 0x%06x old_iv %u", entry->src,
	       entry->seq, entry->old_iv);

	return 0;
}
   11ce6:	4620      	mov	r0, r4
   11ce8:	b003      	add	sp, #12
   11cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	src = strtol(name, NULL, 16);
   11cec:	2210      	movs	r2, #16
   11cee:	2100      	movs	r1, #0
   11cf0:	f015 fce4 	bl	276bc <strtol>
		if (replay_list[i].src == src) {
   11cf4:	4923      	ldr	r1, [pc, #140]	; (11d84 <rpl_set+0xb4>)
	src = strtol(name, NULL, 16);
   11cf6:	b282      	uxth	r2, r0
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   11cf8:	2300      	movs	r3, #0
   11cfa:	460d      	mov	r5, r1
		if (replay_list[i].src == src) {
   11cfc:	f831 c033 	ldrh.w	ip, [r1, r3, lsl #3]
   11d00:	4594      	cmp	ip, r2
   11d02:	d110      	bne.n	11d26 <rpl_set+0x56>
			return &replay_list[i];
   11d04:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
	if (len_rd == 0) {
   11d08:	b1d4      	cbz	r4, 11d40 <rpl_set+0x70>
	err = bt_mesh_settings_set(read_cb, cb_arg, &rpl, sizeof(rpl));
   11d0a:	2304      	movs	r3, #4
   11d0c:	eb0d 0203 	add.w	r2, sp, r3
   11d10:	4639      	mov	r1, r7
   11d12:	4630      	mov	r0, r6
   11d14:	f003 fb66 	bl	153e4 <bt_mesh_settings_set>
	if (err) {
   11d18:	4604      	mov	r4, r0
   11d1a:	b330      	cbz	r0, 11d6a <rpl_set+0x9a>
		BT_ERR("Failed to set `net`");
   11d1c:	2145      	movs	r1, #69	; 0x45
   11d1e:	481a      	ldr	r0, [pc, #104]	; (11d88 <rpl_set+0xb8>)
   11d20:	f015 fdd7 	bl	278d2 <printk>
		return err;
   11d24:	e7df      	b.n	11ce6 <rpl_set+0x16>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   11d26:	3301      	adds	r3, #1
   11d28:	2b0a      	cmp	r3, #10
   11d2a:	d1e7      	bne.n	11cfc <rpl_set+0x2c>
	if (len_rd == 0) {
   11d2c:	b164      	cbz	r4, 11d48 <rpl_set+0x78>
   11d2e:	2300      	movs	r3, #0
		if (!replay_list[i].src) {
   11d30:	f835 1033 	ldrh.w	r1, [r5, r3, lsl #3]
   11d34:	b971      	cbnz	r1, 11d54 <rpl_set+0x84>
			replay_list[i].src = src;
   11d36:	f825 2033 	strh.w	r2, [r5, r3, lsl #3]
			return &replay_list[i];
   11d3a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		if (!entry) {
   11d3e:	e7e4      	b.n	11d0a <rpl_set+0x3a>
__ssp_bos_icheck3(memset, void *, int)
   11d40:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   11d44:	606c      	str	r4, [r5, #4]
   11d46:	e7ce      	b.n	11ce6 <rpl_set+0x16>
			BT_WARN("Unable to find RPL entry for 0x%04x", src);
   11d48:	b282      	uxth	r2, r0
   11d4a:	2157      	movs	r1, #87	; 0x57
   11d4c:	480f      	ldr	r0, [pc, #60]	; (11d8c <rpl_set+0xbc>)
   11d4e:	f015 fdc0 	bl	278d2 <printk>
   11d52:	e7c8      	b.n	11ce6 <rpl_set+0x16>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   11d54:	3301      	adds	r3, #1
   11d56:	2b0a      	cmp	r3, #10
   11d58:	d1ea      	bne.n	11d30 <rpl_set+0x60>
			BT_ERR("Unable to allocate RPL entry for 0x%04x", src);
   11d5a:	b282      	uxth	r2, r0
   11d5c:	2145      	movs	r1, #69	; 0x45
   11d5e:	480c      	ldr	r0, [pc, #48]	; (11d90 <rpl_set+0xc0>)
   11d60:	f015 fdb7 	bl	278d2 <printk>
			return -ENOMEM;
   11d64:	f06f 040b 	mvn.w	r4, #11
   11d68:	e7bd      	b.n	11ce6 <rpl_set+0x16>
	entry->seq = rpl.seq;
   11d6a:	9b01      	ldr	r3, [sp, #4]
   11d6c:	f3c3 0317 	ubfx	r3, r3, #0, #24
   11d70:	606b      	str	r3, [r5, #4]
	entry->old_iv = rpl.old_iv;
   11d72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11d76:	f3c3 0300 	ubfx	r3, r3, #0, #1
   11d7a:	70ab      	strb	r3, [r5, #2]
	return 0;
   11d7c:	e7b3      	b.n	11ce6 <rpl_set+0x16>
   11d7e:	bf00      	nop
   11d80:	000316aa 	.word	0x000316aa
   11d84:	20003c50 	.word	0x20003c50
   11d88:	000338ef 	.word	0x000338ef
   11d8c:	000338c6 	.word	0x000338c6
   11d90:	00033908 	.word	0x00033908

00011d94 <bt_mesh_rpl_check>:
{
   11d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d96:	460c      	mov	r4, r1
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   11d98:	7d01      	ldrb	r1, [r0, #20]
   11d9a:	f001 0330 	and.w	r3, r1, #48	; 0x30
   11d9e:	2b10      	cmp	r3, #16
{
   11da0:	4605      	mov	r5, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   11da2:	d009      	beq.n	11db8 <bt_mesh_rpl_check+0x24>
	if (!rx->local_match) {
   11da4:	f011 0340 	ands.w	r3, r1, #64	; 0x40
   11da8:	d006      	beq.n	11db8 <bt_mesh_rpl_check+0x24>
   11daa:	4815      	ldr	r0, [pc, #84]	; (11e00 <bt_mesh_rpl_check+0x6c>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   11dac:	2200      	movs	r2, #0
   11dae:	4606      	mov	r6, r0
		if (!rpl->src) {
   11db0:	8803      	ldrh	r3, [r0, #0]
   11db2:	b91b      	cbnz	r3, 11dbc <bt_mesh_rpl_check+0x28>
				if (match) {
   11db4:	b1ac      	cbz	r4, 11de2 <bt_mesh_rpl_check+0x4e>
					*match = rpl;
   11db6:	6020      	str	r0, [r4, #0]
		return false;
   11db8:	2000      	movs	r0, #0
}
   11dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
   11dbc:	892f      	ldrh	r7, [r5, #8]
   11dbe:	429f      	cmp	r7, r3
   11dc0:	d113      	bne.n	11dea <bt_mesh_rpl_check+0x56>
			if (rx->old_iv && !rpl->old_iv) {
   11dc2:	00d2      	lsls	r2, r2, #3
   11dc4:	18b3      	adds	r3, r6, r2
   11dc6:	07c9      	lsls	r1, r1, #31
   11dc8:	789b      	ldrb	r3, [r3, #2]
   11dca:	d502      	bpl.n	11dd2 <bt_mesh_rpl_check+0x3e>
   11dcc:	b91b      	cbnz	r3, 11dd6 <bt_mesh_rpl_check+0x42>
				return true;
   11dce:	2001      	movs	r0, #1
   11dd0:	e7f3      	b.n	11dba <bt_mesh_rpl_check+0x26>
			if ((!rx->old_iv && rpl->old_iv) ||
   11dd2:	2b00      	cmp	r3, #0
   11dd4:	d1ee      	bne.n	11db4 <bt_mesh_rpl_check+0x20>
			    rpl->seq < rx->seq) {
   11dd6:	4432      	add	r2, r6
			if ((!rx->old_iv && rpl->old_iv) ||
   11dd8:	692b      	ldr	r3, [r5, #16]
   11dda:	6852      	ldr	r2, [r2, #4]
   11ddc:	429a      	cmp	r2, r3
   11dde:	d2f6      	bcs.n	11dce <bt_mesh_rpl_check+0x3a>
   11de0:	e7e8      	b.n	11db4 <bt_mesh_rpl_check+0x20>
					bt_mesh_rpl_update(rpl, rx);
   11de2:	4629      	mov	r1, r5
   11de4:	f019 fb60 	bl	2b4a8 <bt_mesh_rpl_update>
   11de8:	e7e6      	b.n	11db8 <bt_mesh_rpl_check+0x24>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   11dea:	3201      	adds	r2, #1
   11dec:	2a0a      	cmp	r2, #10
   11dee:	f100 0008 	add.w	r0, r0, #8
   11df2:	d1dd      	bne.n	11db0 <bt_mesh_rpl_check+0x1c>
	BT_ERR("RPL is full!");
   11df4:	2145      	movs	r1, #69	; 0x45
   11df6:	4803      	ldr	r0, [pc, #12]	; (11e04 <bt_mesh_rpl_check+0x70>)
   11df8:	f015 fd6b 	bl	278d2 <printk>
	return true;
   11dfc:	e7e7      	b.n	11dce <bt_mesh_rpl_check+0x3a>
   11dfe:	bf00      	nop
   11e00:	20003c50 	.word	0x20003c50
   11e04:	0003386a 	.word	0x0003386a

00011e08 <bt_mesh_rpl_reset>:
{
   11e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   11e0a:	2500      	movs	r5, #0
   11e0c:	4c0a      	ldr	r4, [pc, #40]	; (11e38 <bt_mesh_rpl_reset+0x30>)
   11e0e:	2601      	movs	r6, #1
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   11e10:	462f      	mov	r7, r5
		if (rpl->src) {
   11e12:	8823      	ldrh	r3, [r4, #0]
   11e14:	b13b      	cbz	r3, 11e26 <bt_mesh_rpl_reset+0x1e>
			if (rpl->old_iv) {
   11e16:	78a3      	ldrb	r3, [r4, #2]
   11e18:	b15b      	cbz	r3, 11e32 <bt_mesh_rpl_reset+0x2a>
   11e1a:	6027      	str	r7, [r4, #0]
   11e1c:	6067      	str	r7, [r4, #4]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   11e1e:	2000      	movs	r0, #0
	entry->store = true;
   11e20:	70e6      	strb	r6, [r4, #3]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   11e22:	f003 fb01 	bl	15428 <bt_mesh_settings_store_schedule>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   11e26:	3501      	adds	r5, #1
   11e28:	2d0a      	cmp	r5, #10
   11e2a:	f104 0408 	add.w	r4, r4, #8
   11e2e:	d1f0      	bne.n	11e12 <bt_mesh_rpl_reset+0xa>
}
   11e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				rpl->old_iv = true;
   11e32:	70a6      	strb	r6, [r4, #2]
   11e34:	e7f3      	b.n	11e1e <bt_mesh_rpl_reset+0x16>
   11e36:	bf00      	nop
   11e38:	20003c50 	.word	0x20003c50

00011e3c <bt_mesh_rpl_pending_store>:
#endif
	store_rpl(rpl);
}

void bt_mesh_rpl_pending_store(void)
{
   11e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e40:	4c25      	ldr	r4, [pc, #148]	; (11ed8 <bt_mesh_rpl_pending_store+0x9c>)
   11e42:	4f26      	ldr	r7, [pc, #152]	; (11edc <bt_mesh_rpl_pending_store+0xa0>)
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   11e44:	4e26      	ldr	r6, [pc, #152]	; (11ee0 <bt_mesh_rpl_pending_store+0xa4>)
		BT_ERR("Failed to clear RPL");
   11e46:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 11ee8 <bt_mesh_rpl_pending_store+0xac>
{
   11e4a:	b086      	sub	sp, #24
	int i;

	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   11e4c:	2500      	movs	r5, #0
   11e4e:	f3bf 8f5b 	dmb	ish
   11e52:	683b      	ldr	r3, [r7, #0]
   11e54:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   11e58:	07db      	lsls	r3, r3, #31
   11e5a:	d529      	bpl.n	11eb0 <bt_mesh_rpl_pending_store+0x74>
	if (!rpl->store) {
   11e5c:	78e3      	ldrb	r3, [r4, #3]
   11e5e:	b1fb      	cbz	r3, 11ea0 <bt_mesh_rpl_pending_store+0x64>
	rpl->store = false;
   11e60:	2300      	movs	r3, #0
	rpl.seq = entry->seq;
   11e62:	6862      	ldr	r2, [r4, #4]
	rpl->store = false;
   11e64:	70e3      	strb	r3, [r4, #3]
	rpl.seq = entry->seq;
   11e66:	9b00      	ldr	r3, [sp, #0]
   11e68:	f362 0317 	bfi	r3, r2, #0, #24
	rpl.old_iv = entry->old_iv;
   11e6c:	78a2      	ldrb	r2, [r4, #2]
	rpl.seq = entry->seq;
   11e6e:	9300      	str	r3, [sp, #0]
	rpl.old_iv = entry->old_iv;
   11e70:	f3c3 6307 	ubfx	r3, r3, #24, #8
   11e74:	f362 0300 	bfi	r3, r2, #0, #1
   11e78:	f88d 3003 	strb.w	r3, [sp, #3]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   11e7c:	4632      	mov	r2, r6
   11e7e:	2112      	movs	r1, #18
   11e80:	8823      	ldrh	r3, [r4, #0]
   11e82:	a801      	add	r0, sp, #4
   11e84:	f015 fd32 	bl	278ec <snprintk>
	err = settings_save_one(path, &rpl, sizeof(rpl));
   11e88:	2204      	movs	r2, #4
   11e8a:	4669      	mov	r1, sp
   11e8c:	eb0d 0002 	add.w	r0, sp, r2
   11e90:	f7f4 f864 	bl	5f5c <settings_save_one>
	if (err) {
   11e94:	b120      	cbz	r0, 11ea0 <bt_mesh_rpl_pending_store+0x64>
		BT_ERR("Failed to store RPL %s value", log_strdup(path));
   11e96:	aa01      	add	r2, sp, #4
   11e98:	2145      	movs	r1, #69	; 0x45
   11e9a:	4812      	ldr	r0, [pc, #72]	; (11ee4 <bt_mesh_rpl_pending_store+0xa8>)
   11e9c:	f015 fd19 	bl	278d2 <printk>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   11ea0:	3501      	adds	r5, #1
   11ea2:	2d0a      	cmp	r5, #10
   11ea4:	f104 0408 	add.w	r4, r4, #8
   11ea8:	d1d1      	bne.n	11e4e <bt_mesh_rpl_pending_store+0x12>
			store_pending_rpl(&replay_list[i]);
		} else {
			clear_rpl(&replay_list[i]);
		}
	}
}
   11eaa:	b006      	add	sp, #24
   11eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!rpl->src) {
   11eb0:	8823      	ldrh	r3, [r4, #0]
   11eb2:	2b00      	cmp	r3, #0
   11eb4:	d0f4      	beq.n	11ea0 <bt_mesh_rpl_pending_store+0x64>
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   11eb6:	4632      	mov	r2, r6
   11eb8:	2112      	movs	r1, #18
   11eba:	a801      	add	r0, sp, #4
   11ebc:	f015 fd16 	bl	278ec <snprintk>
	err = settings_delete(path);
   11ec0:	a801      	add	r0, sp, #4
   11ec2:	f016 f90f 	bl	280e4 <settings_delete>
	if (err) {
   11ec6:	b118      	cbz	r0, 11ed0 <bt_mesh_rpl_pending_store+0x94>
		BT_ERR("Failed to clear RPL");
   11ec8:	2145      	movs	r1, #69	; 0x45
   11eca:	4640      	mov	r0, r8
   11ecc:	f015 fd01 	bl	278d2 <printk>
   11ed0:	2300      	movs	r3, #0
   11ed2:	6023      	str	r3, [r4, #0]
   11ed4:	6063      	str	r3, [r4, #4]
   11ed6:	e7e3      	b.n	11ea0 <bt_mesh_rpl_pending_store+0x64>
   11ed8:	20003c50 	.word	0x20003c50
   11edc:	20002970 	.word	0x20002970
   11ee0:	0003387c 	.word	0x0003387c
   11ee4:	0003388b 	.word	0x0003388b
   11ee8:	000338ad 	.word	0x000338ad

00011eec <notify_sub_end>:
		}
	}
}

static void notify_sub_end(void)
{
   11eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sub.remaining = 0;
   11eee:	4b0d      	ldr	r3, [pc, #52]	; (11f24 <notify_sub_end+0x38>)

	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   11ef0:	4d0d      	ldr	r5, [pc, #52]	; (11f28 <notify_sub_end+0x3c>)
   11ef2:	4c0e      	ldr	r4, [pc, #56]	; (11f2c <notify_sub_end+0x40>)
   11ef4:	4e0e      	ldr	r6, [pc, #56]	; (11f30 <notify_sub_end+0x44>)
	sub.remaining = 0;
   11ef6:	2200      	movs	r2, #0
   11ef8:	605a      	str	r2, [r3, #4]
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   11efa:	462f      	mov	r7, r5
   11efc:	42ac      	cmp	r4, r5
   11efe:	d908      	bls.n	11f12 <notify_sub_end+0x26>
   11f00:	4631      	mov	r1, r6
   11f02:	480c      	ldr	r0, [pc, #48]	; (11f34 <notify_sub_end+0x48>)
   11f04:	2247      	movs	r2, #71	; 0x47
   11f06:	f015 fce4 	bl	278d2 <printk>
   11f0a:	2147      	movs	r1, #71	; 0x47
   11f0c:	4630      	mov	r0, r6
   11f0e:	f015 ff59 	bl	27dc4 <assert_post_action>
   11f12:	42bc      	cmp	r4, r7
   11f14:	d300      	bcc.n	11f18 <notify_sub_end+0x2c>
		if (cb->sub_end) {
			cb->sub_end(&sub);
		}
	}
}
   11f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->sub_end) {
   11f18:	6863      	ldr	r3, [r4, #4]
   11f1a:	b10b      	cbz	r3, 11f20 <notify_sub_end+0x34>
			cb->sub_end(&sub);
   11f1c:	4801      	ldr	r0, [pc, #4]	; (11f24 <notify_sub_end+0x38>)
   11f1e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   11f20:	3408      	adds	r4, #8
   11f22:	e7eb      	b.n	11efc <notify_sub_end+0x10>
   11f24:	20003cb0 	.word	0x20003cb0
   11f28:	0002eef0 	.word	0x0002eef0
   11f2c:	0002eef0 	.word	0x0002eef0
   11f30:	00033a71 	.word	0x00033a71
   11f34:	0003067f 	.word	0x0003067f

00011f38 <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11f38:	4601      	mov	r1, r0
   11f3a:	4801      	ldr	r0, [pc, #4]	; (11f40 <k_delayed_work_submit+0x8>)
   11f3c:	f013 baac 	b.w	25498 <k_delayed_work_submit_to_queue>
   11f40:	20003028 	.word	0x20003028

00011f44 <hb_publish_end_cb>:
{
   11f44:	b5d0      	push	{r4, r6, r7, lr}
	if (pub.period && pub.count > 1) {
   11f46:	4c12      	ldr	r4, [pc, #72]	; (11f90 <hb_publish_end_cb+0x4c>)
   11f48:	68e3      	ldr	r3, [r4, #12]
   11f4a:	b1c3      	cbz	r3, 11f7e <hb_publish_end_cb+0x3a>
   11f4c:	8862      	ldrh	r2, [r4, #2]
   11f4e:	2a01      	cmp	r2, #1
   11f50:	d915      	bls.n	11f7e <hb_publish_end_cb+0x3a>
		k_delayed_work_submit(&pub_timer, K_SECONDS(pub.period));
   11f52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11f56:	4359      	muls	r1, r3
   11f58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11f5c:	f240 36e7 	movw	r6, #999	; 0x3e7
   11f60:	2700      	movs	r7, #0
   11f62:	fbe0 6701 	umlal	r6, r7, r0, r1
   11f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11f6a:	2300      	movs	r3, #0
   11f6c:	4630      	mov	r0, r6
   11f6e:	4639      	mov	r1, r7
   11f70:	f7ef fd0c 	bl	198c <__aeabi_uldivmod>
   11f74:	4602      	mov	r2, r0
   11f76:	460b      	mov	r3, r1
   11f78:	4806      	ldr	r0, [pc, #24]	; (11f94 <hb_publish_end_cb+0x50>)
   11f7a:	f7ff ffdd 	bl	11f38 <k_delayed_work_submit>
	if (pub.count != 0xffff) {
   11f7e:	8863      	ldrh	r3, [r4, #2]
   11f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11f84:	4293      	cmp	r3, r2
		pub.count--;
   11f86:	bf1c      	itt	ne
   11f88:	f103 33ff 	addne.w	r3, r3, #4294967295
   11f8c:	8063      	strhne	r3, [r4, #2]
}
   11f8e:	bdd0      	pop	{r4, r6, r7, pc}
   11f90:	20003ca0 	.word	0x20003ca0
   11f94:	20002c88 	.word	0x20002c88

00011f98 <heartbeat_send.constprop.3>:
static void sub_end(struct k_work *work)
{
	notify_sub_end();
}

static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   11f98:	b530      	push	{r4, r5, lr}
	struct __packed {
		uint8_t init_ttl;
		uint16_t feat;
	} hb;
	struct bt_mesh_msg_ctx ctx = {
		.net_idx = pub.net_idx,
   11f9a:	4c25      	ldr	r4, [pc, #148]	; (12030 <heartbeat_send.constprop.3+0x98>)
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   11f9c:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   11f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11fa2:	f8ad 2012 	strh.w	r2, [sp, #18]
   11fa6:	8822      	ldrh	r2, [r4, #0]
   11fa8:	f8ad 2014 	strh.w	r2, [sp, #20]
   11fac:	2300      	movs	r3, #0
   11fae:	7922      	ldrb	r2, [r4, #4]
   11fb0:	f8ad 301a 	strh.w	r3, [sp, #26]
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   11fb4:	4605      	mov	r5, r0
		.net_idx = pub.net_idx,
   11fb6:	8920      	ldrh	r0, [r4, #8]
	struct bt_mesh_msg_ctx ctx = {
   11fb8:	f88d 201b 	strb.w	r2, [sp, #27]
   11fbc:	f8cd 3016 	str.w	r3, [sp, #22]
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = pub.dst,
		.send_ttl = pub.ttl,
	};
	struct bt_mesh_net_tx tx = {
   11fc0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   11fc4:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
   11fc6:	f8ad 0010 	strh.w	r0, [sp, #16]
		.sub = bt_mesh_subnet_get(pub.net_idx),
   11fca:	f019 f8fc 	bl	2b1c6 <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
   11fce:	ab04      	add	r3, sp, #16
   11fd0:	9308      	str	r3, [sp, #32]
   11fd2:	9007      	str	r0, [sp, #28]
		.ctx = &ctx,
		.src = bt_mesh_primary_addr(),
   11fd4:	f000 feca 	bl	12d6c <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   11fd8:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   11fdc:	f7fc fbae 	bl	e73c <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
   11fe0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	};

	/* Do nothing if heartbeat publication is not enabled */
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   11fe4:	8820      	ldrh	r0, [r4, #0]
   11fe6:	b300      	cbz	r0, 1202a <heartbeat_send.constprop.3+0x92>
		return 0U;
	}

	hb.init_ttl = pub.ttl;
   11fe8:	7923      	ldrb	r3, [r4, #4]
   11fea:	f88d 300c 	strb.w	r3, [sp, #12]

	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
   11fee:	f018 ff8a 	bl	2af06 <bt_mesh_relay_get>
	uint16_t feat = 0U;
   11ff2:	1e43      	subs	r3, r0, #1
   11ff4:	425c      	negs	r4, r3
   11ff6:	415c      	adcs	r4, r3
		feat |= BT_MESH_FEAT_RELAY;
	}

	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   11ff8:	f018 ff68 	bl	2aecc <bt_mesh_gatt_proxy_get>
   11ffc:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
   11ffe:	bf08      	it	eq
   12000:	f044 0402 	orreq.w	r4, r4, #2
	}

	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
   12004:	f018 ff7c 	bl	2af00 <bt_mesh_friend_get>
   12008:	2801      	cmp	r0, #1

	hb.feat = sys_cpu_to_be16(feat);

	BT_DBG("InitTTL %u feat 0x%04x", pub.ttl, feat);

	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   1200a:	f04f 0300 	mov.w	r3, #0
		feat |= BT_MESH_FEAT_FRIEND;
   1200e:	bf08      	it	eq
   12010:	f044 0404 	orreq.w	r4, r4, #4
	hb.feat = sys_cpu_to_be16(feat);
   12014:	0224      	lsls	r4, r4, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   12016:	e9cd 5300 	strd	r5, r3, [sp]
   1201a:	aa03      	add	r2, sp, #12
   1201c:	2303      	movs	r3, #3
   1201e:	210a      	movs	r1, #10
   12020:	a807      	add	r0, sp, #28
	hb.feat = sys_cpu_to_be16(feat);
   12022:	f8ad 400d 	strh.w	r4, [sp, #13]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   12026:	f7ff f8b7 	bl	11198 <bt_mesh_ctl_send>
				cb, cb_data);
}
   1202a:	b00b      	add	sp, #44	; 0x2c
   1202c:	bd30      	pop	{r4, r5, pc}
   1202e:	bf00      	nop
   12030:	20003ca0 	.word	0x20003ca0

00012034 <hb_publish>:
		hb_publish_end_cb(err, cb_data);
	}
}

static void hb_publish(struct k_work *work)
{
   12034:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_subnet *sub;
	int err;

	BT_DBG("hb_pub.count: %u", pub.count);

	sub = bt_mesh_subnet_get(pub.net_idx);
   12036:	4c0d      	ldr	r4, [pc, #52]	; (1206c <hb_publish+0x38>)
   12038:	8920      	ldrh	r0, [r4, #8]
   1203a:	f019 f8c4 	bl	2b1c6 <bt_mesh_subnet_get>
	if (!sub) {
   1203e:	4605      	mov	r5, r0
   12040:	b930      	cbnz	r0, 12050 <hb_publish+0x1c>
		BT_ERR("No matching subnet for idx 0x%02x", pub.net_idx);
   12042:	8922      	ldrh	r2, [r4, #8]
   12044:	480a      	ldr	r0, [pc, #40]	; (12070 <hb_publish+0x3c>)
   12046:	2145      	movs	r1, #69	; 0x45
   12048:	f015 fc43 	bl	278d2 <printk>
		pub.dst = BT_MESH_ADDR_UNASSIGNED;
   1204c:	8025      	strh	r5, [r4, #0]

	err = heartbeat_send(&publish_cb, NULL);
	if (err) {
		hb_publish_end_cb(err, NULL);
	}
}
   1204e:	bd38      	pop	{r3, r4, r5, pc}
	if (pub.count == 0U) {
   12050:	8863      	ldrh	r3, [r4, #2]
   12052:	2b00      	cmp	r3, #0
   12054:	d0fb      	beq.n	1204e <hb_publish+0x1a>
	err = heartbeat_send(&publish_cb, NULL);
   12056:	4807      	ldr	r0, [pc, #28]	; (12074 <hb_publish+0x40>)
   12058:	f7ff ff9e 	bl	11f98 <heartbeat_send.constprop.3>
	if (err) {
   1205c:	2800      	cmp	r0, #0
   1205e:	d0f6      	beq.n	1204e <hb_publish+0x1a>
		hb_publish_end_cb(err, NULL);
   12060:	2100      	movs	r1, #0
}
   12062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		hb_publish_end_cb(err, NULL);
   12066:	f7ff bf6d 	b.w	11f44 <hb_publish_end_cb>
   1206a:	bf00      	nop
   1206c:	20003ca0 	.word	0x20003ca0
   12070:	00033a4a 	.word	0x00033a4a
   12074:	0002fadc 	.word	0x0002fadc

00012078 <sub_remaining>:
{
   12078:	b508      	push	{r3, lr}
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
   1207a:	4b08      	ldr	r3, [pc, #32]	; (1209c <sub_remaining+0x24>)
   1207c:	8958      	ldrh	r0, [r3, #10]
   1207e:	b158      	cbz	r0, 12098 <sub_remaining+0x20>
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   12080:	4807      	ldr	r0, [pc, #28]	; (120a0 <sub_remaining+0x28>)
   12082:	f013 fc51 	bl	25928 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   12086:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1208a:	fba0 0102 	umull	r0, r1, r0, r2
   1208e:	0bc3      	lsrs	r3, r0, #15
   12090:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return k_delayed_work_remaining_get(&sub_timer) / MSEC_PER_SEC;
   12094:	fbb3 f0f2 	udiv	r0, r3, r2
}
   12098:	2100      	movs	r1, #0
   1209a:	bd08      	pop	{r3, pc}
   1209c:	20003cb0 	.word	0x20003cb0
   120a0:	20002cc8 	.word	0x20002cc8

000120a4 <bt_mesh_hb_recv>:

int bt_mesh_hb_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
   120a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t init_ttl, hops;
	uint16_t feat;

	if (buf->len < 3) {
   120a8:	888b      	ldrh	r3, [r1, #4]
   120aa:	2b02      	cmp	r3, #2
{
   120ac:	4607      	mov	r7, r0
   120ae:	460d      	mov	r5, r1
	if (buf->len < 3) {
   120b0:	d807      	bhi.n	120c2 <bt_mesh_hb_recv+0x1e>
		BT_ERR("Too short heartbeat message");
   120b2:	4828      	ldr	r0, [pc, #160]	; (12154 <bt_mesh_hb_recv+0xb0>)
   120b4:	2145      	movs	r1, #69	; 0x45
   120b6:	f015 fc0c 	bl	278d2 <printk>
		return -EINVAL;
   120ba:	f06f 0015 	mvn.w	r0, #21
	       (hops == 1U) ? "" : "s", feat);

	notify_recv(hops, feat);

	return 0;
}
   120be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
   120c2:	4608      	mov	r0, r1
   120c4:	f01b fa34 	bl	2d530 <net_buf_simple_pull_u8>
   120c8:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
   120ca:	4628      	mov	r0, r5
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   120cc:	4d22      	ldr	r5, [pc, #136]	; (12158 <bt_mesh_hb_recv+0xb4>)
	feat = net_buf_simple_pull_be16(buf);
   120ce:	f01b fa3f 	bl	2d550 <net_buf_simple_pull_be16>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   120d2:	68ba      	ldr	r2, [r7, #8]
   120d4:	68ab      	ldr	r3, [r5, #8]
   120d6:	429a      	cmp	r2, r3
	feat = net_buf_simple_pull_be16(buf);
   120d8:	4606      	mov	r6, r0
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   120da:	d001      	beq.n	120e0 <bt_mesh_hb_recv+0x3c>
		return 0;
   120dc:	2000      	movs	r0, #0
   120de:	e7ee      	b.n	120be <bt_mesh_hb_recv+0x1a>
	if (!k_delayed_work_pending(&sub_timer)) {
   120e0:	481e      	ldr	r0, [pc, #120]	; (1215c <bt_mesh_hb_recv+0xb8>)
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   120e2:	7b7f      	ldrb	r7, [r7, #13]
	if (!k_delayed_work_pending(&sub_timer)) {
   120e4:	f01c f831 	bl	2e14a <k_delayed_work_pending>
   120e8:	2800      	cmp	r0, #0
   120ea:	d0f7      	beq.n	120dc <bt_mesh_hb_recv+0x38>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
   120ec:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   120f0:	1be4      	subs	r4, r4, r7
	sub.min_hops = MIN(sub.min_hops, hops);
   120f2:	7bab      	ldrb	r3, [r5, #14]
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   120f4:	4f1a      	ldr	r7, [pc, #104]	; (12160 <bt_mesh_hb_recv+0xbc>)
   120f6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1216c <bt_mesh_hb_recv+0xc8>
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   120fa:	3401      	adds	r4, #1
   120fc:	b2e4      	uxtb	r4, r4
	sub.min_hops = MIN(sub.min_hops, hops);
   120fe:	42a3      	cmp	r3, r4
   12100:	bf28      	it	cs
   12102:	4623      	movcs	r3, r4
   12104:	73ab      	strb	r3, [r5, #14]
	sub.max_hops = MAX(sub.max_hops, hops);
   12106:	7beb      	ldrb	r3, [r5, #15]
   12108:	42a3      	cmp	r3, r4
   1210a:	bf38      	it	cc
   1210c:	4623      	movcc	r3, r4
   1210e:	73eb      	strb	r3, [r5, #15]
	if (sub.count < 0xffff) {
   12110:	89ab      	ldrh	r3, [r5, #12]
   12112:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12116:	4293      	cmp	r3, r2
		sub.count++;
   12118:	bf1c      	itt	ne
   1211a:	3301      	addne	r3, #1
   1211c:	81ab      	strhne	r3, [r5, #12]
	sub.remaining = sub_remaining();
   1211e:	f7ff ffab 	bl	12078 <sub_remaining>
   12122:	6068      	str	r0, [r5, #4]
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   12124:	4d0f      	ldr	r5, [pc, #60]	; (12164 <bt_mesh_hb_recv+0xc0>)
   12126:	46b9      	mov	r9, r7
   12128:	42bd      	cmp	r5, r7
   1212a:	d908      	bls.n	1213e <bt_mesh_hb_recv+0x9a>
   1212c:	4641      	mov	r1, r8
   1212e:	480e      	ldr	r0, [pc, #56]	; (12168 <bt_mesh_hb_recv+0xc4>)
   12130:	223c      	movs	r2, #60	; 0x3c
   12132:	f015 fbce 	bl	278d2 <printk>
   12136:	213c      	movs	r1, #60	; 0x3c
   12138:	4640      	mov	r0, r8
   1213a:	f015 fe43 	bl	27dc4 <assert_post_action>
   1213e:	454d      	cmp	r5, r9
   12140:	d2cc      	bcs.n	120dc <bt_mesh_hb_recv+0x38>
		if (cb->recv) {
   12142:	682b      	ldr	r3, [r5, #0]
   12144:	b11b      	cbz	r3, 1214e <bt_mesh_hb_recv+0xaa>
			cb->recv(&sub, hops, feat);
   12146:	4632      	mov	r2, r6
   12148:	4621      	mov	r1, r4
   1214a:	4803      	ldr	r0, [pc, #12]	; (12158 <bt_mesh_hb_recv+0xb4>)
   1214c:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   1214e:	3508      	adds	r5, #8
   12150:	e7ea      	b.n	12128 <bt_mesh_hb_recv+0x84>
   12152:	bf00      	nop
   12154:	000339a1 	.word	0x000339a1
   12158:	20003cb0 	.word	0x20003cb0
   1215c:	20002cb8 	.word	0x20002cb8
   12160:	0002eef0 	.word	0x0002eef0
   12164:	0002eef0 	.word	0x0002eef0
   12168:	0003067f 	.word	0x0003067f
   1216c:	00033a71 	.word	0x00033a71

00012170 <bt_mesh_hb_pub_set>:

	k_delayed_work_cancel(&pub_timer);
}

uint8_t bt_mesh_hb_pub_set(struct bt_mesh_hb_pub *new_pub)
{
   12170:	b538      	push	{r3, r4, r5, lr}
	if (!new_pub || new_pub->dst == BT_MESH_ADDR_UNASSIGNED) {
   12172:	4604      	mov	r4, r0
   12174:	b108      	cbz	r0, 1217a <bt_mesh_hb_pub_set+0xa>
   12176:	8803      	ldrh	r3, [r0, #0]
   12178:	b963      	cbnz	r3, 12194 <bt_mesh_hb_pub_set+0x24>
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
   1217a:	4b1b      	ldr	r3, [pc, #108]	; (121e8 <bt_mesh_hb_pub_set+0x78>)
	k_delayed_work_cancel(&pub_timer);
   1217c:	481b      	ldr	r0, [pc, #108]	; (121ec <bt_mesh_hb_pub_set+0x7c>)
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
   1217e:	2200      	movs	r2, #0
   12180:	601a      	str	r2, [r3, #0]
	pub.ttl = 0U;
   12182:	711a      	strb	r2, [r3, #4]
	pub.period = 0U;
   12184:	60da      	str	r2, [r3, #12]
	k_delayed_work_cancel(&pub_timer);
   12186:	f013 f9f7 	bl	25578 <k_delayed_work_cancel>
		pub_disable();

		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
		    bt_mesh_is_provisioned()) {
   1218a:	f018 fe5a 	bl	2ae42 <bt_mesh_is_provisioned>
		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1218e:	bb10      	cbnz	r0, 121d6 <bt_mesh_hb_pub_set+0x66>
			bt_mesh_settings_store_schedule(
					BT_MESH_SETTINGS_HB_PUB_PENDING);
		}

		return STATUS_SUCCESS;
   12190:	2000      	movs	r0, #0
		bt_mesh_settings_store_schedule(
					BT_MESH_SETTINGS_HB_PUB_PENDING);
	}

	return STATUS_SUCCESS;
}
   12192:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_mesh_subnet_get(new_pub->net_idx)) {
   12194:	8900      	ldrh	r0, [r0, #8]
   12196:	f019 f816 	bl	2b1c6 <bt_mesh_subnet_get>
   1219a:	b930      	cbnz	r0, 121aa <bt_mesh_hb_pub_set+0x3a>
		BT_ERR("Unknown NetKey 0x%04x", new_pub->net_idx);
   1219c:	4814      	ldr	r0, [pc, #80]	; (121f0 <bt_mesh_hb_pub_set+0x80>)
   1219e:	8922      	ldrh	r2, [r4, #8]
   121a0:	2145      	movs	r1, #69	; 0x45
   121a2:	f015 fb96 	bl	278d2 <printk>
		return STATUS_INVALID_NETKEY;
   121a6:	2004      	movs	r0, #4
   121a8:	e7f3      	b.n	12192 <bt_mesh_hb_pub_set+0x22>
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
   121aa:	88e3      	ldrh	r3, [r4, #6]
	pub = *new_pub;
   121ac:	4d0e      	ldr	r5, [pc, #56]	; (121e8 <bt_mesh_hb_pub_set+0x78>)
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
   121ae:	f003 030f 	and.w	r3, r3, #15
   121b2:	80e3      	strh	r3, [r4, #6]
	pub = *new_pub;
   121b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   121b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (!bt_mesh_is_provisioned()) {
   121bc:	f018 fe41 	bl	2ae42 <bt_mesh_is_provisioned>
   121c0:	2800      	cmp	r0, #0
   121c2:	d0e5      	beq.n	12190 <bt_mesh_hb_pub_set+0x20>
	if (pub.period && pub.count) {
   121c4:	68eb      	ldr	r3, [r5, #12]
   121c6:	b153      	cbz	r3, 121de <bt_mesh_hb_pub_set+0x6e>
   121c8:	886b      	ldrh	r3, [r5, #2]
   121ca:	b143      	cbz	r3, 121de <bt_mesh_hb_pub_set+0x6e>
		k_delayed_work_submit(&pub_timer, K_NO_WAIT);
   121cc:	2200      	movs	r2, #0
   121ce:	2300      	movs	r3, #0
   121d0:	4806      	ldr	r0, [pc, #24]	; (121ec <bt_mesh_hb_pub_set+0x7c>)
   121d2:	f7ff feb1 	bl	11f38 <k_delayed_work_submit>
			bt_mesh_settings_store_schedule(
   121d6:	2006      	movs	r0, #6
   121d8:	f003 f926 	bl	15428 <bt_mesh_settings_store_schedule>
   121dc:	e7d8      	b.n	12190 <bt_mesh_hb_pub_set+0x20>
		k_delayed_work_cancel(&pub_timer);
   121de:	4803      	ldr	r0, [pc, #12]	; (121ec <bt_mesh_hb_pub_set+0x7c>)
   121e0:	f013 f9ca 	bl	25578 <k_delayed_work_cancel>
   121e4:	e7f7      	b.n	121d6 <bt_mesh_hb_pub_set+0x66>
   121e6:	bf00      	nop
   121e8:	20003ca0 	.word	0x20003ca0
   121ec:	20002c88 	.word	0x20002c88
   121f0:	00033986 	.word	0x00033986

000121f4 <hb_pub_set>:
	}
}

static int hb_pub_set(const char *name, size_t len_rd,
		      settings_read_cb read_cb, void *cb_arg)
{
   121f4:	b510      	push	{r4, lr}
   121f6:	b086      	sub	sp, #24
   121f8:	4610      	mov	r0, r2
   121fa:	4619      	mov	r1, r3
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val hb_val;
	int err;

	err = bt_mesh_settings_set(read_cb, cb_arg, &hb_val, sizeof(hb_val));
   121fc:	466a      	mov	r2, sp
   121fe:	2308      	movs	r3, #8
   12200:	f003 f8f0 	bl	153e4 <bt_mesh_settings_set>
	if (err) {
   12204:	4604      	mov	r4, r0
   12206:	b130      	cbz	r0, 12216 <hb_pub_set+0x22>
		BT_ERR("Failed to set \'hb_val\'");
   12208:	2145      	movs	r1, #69	; 0x45
   1220a:	4819      	ldr	r0, [pc, #100]	; (12270 <hb_pub_set+0x7c>)
   1220c:	f015 fb61 	bl	278d2 <printk>
	(void)bt_mesh_hb_pub_set(&pub);

	BT_DBG("Restored heartbeat publication");

	return 0;
}
   12210:	4620      	mov	r0, r4
   12212:	b006      	add	sp, #24
   12214:	bd10      	pop	{r4, pc}
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
   12216:	f89d 2002 	ldrb.w	r2, [sp, #2]
	pub.dst = hb_val.dst;
   1221a:	f8bd 3000 	ldrh.w	r3, [sp]
   1221e:	f8ad 3008 	strh.w	r3, [sp, #8]
 * SPDX-License-Identifier: Apache-2.0
 */

static inline uint16_t bt_mesh_hb_pwr2(uint8_t val)
{
	if (!val) {
   12222:	b302      	cbz	r2, 12266 <hb_pub_set+0x72>
		return 0x0000;
	} else if (val == 0xff || val == 0x11) {
   12224:	2aff      	cmp	r2, #255	; 0xff
   12226:	d020      	beq.n	1226a <hb_pub_set+0x76>
   12228:	2a11      	cmp	r2, #17
   1222a:	d01e      	beq.n	1226a <hb_pub_set+0x76>
		return 0xffff;
	} else {
		return (1 << (val - 1));
   1222c:	3a01      	subs	r2, #1
   1222e:	2301      	movs	r3, #1
   12230:	4093      	lsls	r3, r2
   12232:	b29b      	uxth	r3, r3
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
   12234:	9305      	str	r3, [sp, #20]
	pub.ttl = hb_val.ttl;
   12236:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1223a:	f88d 300c 	strb.w	r3, [sp, #12]
	pub.feat = hb_val.feat;
   1223e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   12242:	f8ad 300e 	strh.w	r3, [sp, #14]
	pub.net_idx = hb_val.net_idx;
   12246:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1224a:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1224e:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (hb_val.indefinite) {
   12252:	f89d 3007 	ldrb.w	r3, [sp, #7]
	(void)bt_mesh_hb_pub_set(&pub);
   12256:	a802      	add	r0, sp, #8
	if (hb_val.indefinite) {
   12258:	f343 1300 	sbfx	r3, r3, #4, #1
   1225c:	f8ad 300a 	strh.w	r3, [sp, #10]
	(void)bt_mesh_hb_pub_set(&pub);
   12260:	f7ff ff86 	bl	12170 <bt_mesh_hb_pub_set>
	return 0;
   12264:	e7d4      	b.n	12210 <hb_pub_set+0x1c>
		return 0x0000;
   12266:	4603      	mov	r3, r0
   12268:	e7e4      	b.n	12234 <hb_pub_set+0x40>
		return 0xffff;
   1226a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1226e:	e7e1      	b.n	12234 <hb_pub_set+0x40>
   12270:	00033a2e 	.word	0x00033a2e

00012274 <bt_mesh_hb_pub_get>:
	*get = pub;
   12274:	4b03      	ldr	r3, [pc, #12]	; (12284 <bt_mesh_hb_pub_get+0x10>)
{
   12276:	b510      	push	{r4, lr}
   12278:	4604      	mov	r4, r0
	*get = pub;
   1227a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1227c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   12280:	bd10      	pop	{r4, pc}
   12282:	bf00      	nop
   12284:	20003ca0 	.word	0x20003ca0

00012288 <bt_mesh_hb_sub_set>:
{
   12288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
   1228a:	0403      	lsls	r3, r0, #16
{
   1228c:	4607      	mov	r7, r0
   1228e:	460d      	mov	r5, r1
   12290:	4616      	mov	r6, r2
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
   12292:	d505      	bpl.n	122a0 <bt_mesh_hb_sub_set+0x18>
		BT_WARN("Prohibited source address");
   12294:	482a      	ldr	r0, [pc, #168]	; (12340 <bt_mesh_hb_sub_set+0xb8>)
   12296:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Prohibited destination address");
   12298:	f015 fb1b 	bl	278d2 <printk>
		return STATUS_INVALID_ADDRESS;
   1229c:	2001      	movs	r0, #1
}
   1229e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
   122a0:	f481 4300 	eor.w	r3, r1, #32768	; 0x8000
   122a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   122a8:	d202      	bcs.n	122b0 <bt_mesh_hb_sub_set+0x28>
		BT_WARN("Prohibited destination address");
   122aa:	2157      	movs	r1, #87	; 0x57
   122ac:	4825      	ldr	r0, [pc, #148]	; (12344 <bt_mesh_hb_sub_set+0xbc>)
   122ae:	e7f3      	b.n	12298 <bt_mesh_hb_sub_set+0x10>
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
   122b0:	f501 7380 	add.w	r3, r1, #256	; 0x100
   122b4:	b29b      	uxth	r3, r3
   122b6:	2bfb      	cmp	r3, #251	; 0xfb
   122b8:	d9f7      	bls.n	122aa <bt_mesh_hb_sub_set+0x22>
   122ba:	b20b      	sxth	r3, r1
   122bc:	2b00      	cmp	r3, #0
   122be:	dd03      	ble.n	122c8 <bt_mesh_hb_sub_set+0x40>
	    (BT_MESH_ADDR_IS_UNICAST(dst) && dst != bt_mesh_primary_addr())) {
   122c0:	f000 fd54 	bl	12d6c <bt_mesh_primary_addr>
   122c4:	42a8      	cmp	r0, r5
   122c6:	d1f0      	bne.n	122aa <bt_mesh_hb_sub_set+0x22>
	if (period > (1U << 16)) {
   122c8:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
   122cc:	d906      	bls.n	122dc <bt_mesh_hb_sub_set+0x54>
		BT_WARN("Prohibited subscription period %u s", period);
   122ce:	481e      	ldr	r0, [pc, #120]	; (12348 <bt_mesh_hb_sub_set+0xc0>)
   122d0:	4632      	mov	r2, r6
   122d2:	2157      	movs	r1, #87	; 0x57
   122d4:	f015 fafd 	bl	278d2 <printk>
		return STATUS_CANNOT_SET;
   122d8:	200f      	movs	r0, #15
   122da:	e7e0      	b.n	1229e <bt_mesh_hb_sub_set+0x16>
	if (src == BT_MESH_ADDR_UNASSIGNED || dst == BT_MESH_ADDR_UNASSIGNED) {
   122dc:	4c1b      	ldr	r4, [pc, #108]	; (1234c <bt_mesh_hb_sub_set+0xc4>)
   122de:	b107      	cbz	r7, 122e2 <bt_mesh_hb_sub_set+0x5a>
   122e0:	b985      	cbnz	r5, 12304 <bt_mesh_hb_sub_set+0x7c>
		sub.src = BT_MESH_ADDR_UNASSIGNED;
   122e2:	2300      	movs	r3, #0
		sub.count = 0U;
   122e4:	e9c4 3302 	strd	r3, r3, [r4, #8]
		sub.period = sub.period - sub_remaining();
   122e8:	6825      	ldr	r5, [r4, #0]
   122ea:	f7ff fec5 	bl	12078 <sub_remaining>
   122ee:	1a28      	subs	r0, r5, r0
   122f0:	6020      	str	r0, [r4, #0]
		if (!k_delayed_work_cancel(&sub_timer)) {
   122f2:	4817      	ldr	r0, [pc, #92]	; (12350 <bt_mesh_hb_sub_set+0xc8>)
   122f4:	f013 f940 	bl	25578 <k_delayed_work_cancel>
   122f8:	b108      	cbz	r0, 122fe <bt_mesh_hb_sub_set+0x76>
	return STATUS_SUCCESS;
   122fa:	2000      	movs	r0, #0
   122fc:	e7cf      	b.n	1229e <bt_mesh_hb_sub_set+0x16>
			notify_sub_end();
   122fe:	f7ff fdf5 	bl	11eec <notify_sub_end>
   12302:	e7fa      	b.n	122fa <bt_mesh_hb_sub_set+0x72>
	} else if (period) {
   12304:	2e00      	cmp	r6, #0
   12306:	d0ef      	beq.n	122e8 <bt_mesh_hb_sub_set+0x60>
		sub.count = 0U;
   12308:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
		k_delayed_work_submit(&sub_timer, K_SECONDS(period));
   1230c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		sub.src = src;
   12310:	8127      	strh	r7, [r4, #8]
		sub.dst = dst;
   12312:	8165      	strh	r5, [r4, #10]
		sub.count = 0U;
   12314:	60e3      	str	r3, [r4, #12]
		sub.period = period;
   12316:	6026      	str	r6, [r4, #0]
			return (t * to_hz + off) / from_hz;
   12318:	f240 30e7 	movw	r0, #999	; 0x3e7
		k_delayed_work_submit(&sub_timer, K_SECONDS(period));
   1231c:	4356      	muls	r6, r2
   1231e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   12322:	2100      	movs	r1, #0
   12324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12328:	2300      	movs	r3, #0
   1232a:	fbe4 0106 	umlal	r0, r1, r4, r6
   1232e:	f7ef fb2d 	bl	198c <__aeabi_uldivmod>
   12332:	4602      	mov	r2, r0
   12334:	460b      	mov	r3, r1
   12336:	4806      	ldr	r0, [pc, #24]	; (12350 <bt_mesh_hb_sub_set+0xc8>)
   12338:	f7ff fdfe 	bl	11f38 <k_delayed_work_submit>
   1233c:	e7dd      	b.n	122fa <bt_mesh_hb_sub_set+0x72>
   1233e:	bf00      	nop
   12340:	000339c2 	.word	0x000339c2
   12344:	000339e1 	.word	0x000339e1
   12348:	00033a05 	.word	0x00033a05
   1234c:	20003cb0 	.word	0x20003cb0
   12350:	20002cb8 	.word	0x20002cb8

00012354 <bt_mesh_hb_sub_reset_count>:
	sub.count = 0;
   12354:	4b01      	ldr	r3, [pc, #4]	; (1235c <bt_mesh_hb_sub_reset_count+0x8>)
   12356:	2200      	movs	r2, #0
   12358:	819a      	strh	r2, [r3, #12]
}
   1235a:	4770      	bx	lr
   1235c:	20003cb0 	.word	0x20003cb0

00012360 <bt_mesh_hb_sub_get>:
	*get = sub;
   12360:	4b04      	ldr	r3, [pc, #16]	; (12374 <bt_mesh_hb_sub_get+0x14>)
{
   12362:	b510      	push	{r4, lr}
   12364:	4604      	mov	r4, r0
	*get = sub;
   12366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   12368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	get->remaining = sub_remaining();
   1236c:	f7ff fe84 	bl	12078 <sub_remaining>
   12370:	6060      	str	r0, [r4, #4]
}
   12372:	bd10      	pop	{r4, pc}
   12374:	20003cb0 	.word	0x20003cb0

00012378 <bt_mesh_hb_feature_changed>:
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   12378:	4b04      	ldr	r3, [pc, #16]	; (1238c <bt_mesh_hb_feature_changed+0x14>)
   1237a:	881a      	ldrh	r2, [r3, #0]
   1237c:	b12a      	cbz	r2, 1238a <bt_mesh_hb_feature_changed+0x12>
	if (!(pub.feat & features)) {
   1237e:	88db      	ldrh	r3, [r3, #6]
   12380:	4218      	tst	r0, r3
   12382:	d002      	beq.n	1238a <bt_mesh_hb_feature_changed+0x12>
	heartbeat_send(NULL, NULL);
   12384:	2000      	movs	r0, #0
   12386:	f7ff be07 	b.w	11f98 <heartbeat_send.constprop.3>
}
   1238a:	4770      	bx	lr
   1238c:	20003ca0 	.word	0x20003ca0

00012390 <bt_mesh_hb_init>:
	pub.net_idx = BT_MESH_KEY_UNUSED;
   12390:	4b0b      	ldr	r3, [pc, #44]	; (123c0 <bt_mesh_hb_init+0x30>)
   12392:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
   12396:	b510      	push	{r4, lr}
	pub.net_idx = BT_MESH_KEY_UNUSED;
   12398:	811a      	strh	r2, [r3, #8]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1239a:	4b0a      	ldr	r3, [pc, #40]	; (123c4 <bt_mesh_hb_init+0x34>)
   1239c:	2430      	movs	r4, #48	; 0x30
   1239e:	4622      	mov	r2, r4
   123a0:	2100      	movs	r1, #0
   123a2:	4618      	mov	r0, r3
   123a4:	f01b ffbc 	bl	2e320 <memset>
   123a8:	4b07      	ldr	r3, [pc, #28]	; (123c8 <bt_mesh_hb_init+0x38>)
   123aa:	4a08      	ldr	r2, [pc, #32]	; (123cc <bt_mesh_hb_init+0x3c>)
   123ac:	6042      	str	r2, [r0, #4]
   123ae:	2100      	movs	r1, #0
   123b0:	4622      	mov	r2, r4
   123b2:	4618      	mov	r0, r3
   123b4:	f01b ffb4 	bl	2e320 <memset>
   123b8:	4a05      	ldr	r2, [pc, #20]	; (123d0 <bt_mesh_hb_init+0x40>)
   123ba:	6042      	str	r2, [r0, #4]
}
   123bc:	bd10      	pop	{r4, pc}
   123be:	bf00      	nop
   123c0:	20003ca0 	.word	0x20003ca0
   123c4:	20002c88 	.word	0x20002c88
   123c8:	20002cb8 	.word	0x20002cb8
   123cc:	00012035 	.word	0x00012035
   123d0:	0002b4c9 	.word	0x0002b4c9

000123d4 <bt_mesh_hb_start>:
	if (pub.count && pub.period) {
   123d4:	4b05      	ldr	r3, [pc, #20]	; (123ec <bt_mesh_hb_start+0x18>)
   123d6:	885a      	ldrh	r2, [r3, #2]
   123d8:	b132      	cbz	r2, 123e8 <bt_mesh_hb_start+0x14>
   123da:	68db      	ldr	r3, [r3, #12]
   123dc:	b123      	cbz	r3, 123e8 <bt_mesh_hb_start+0x14>
		k_delayed_work_submit(&pub_timer, K_NO_WAIT);
   123de:	2200      	movs	r2, #0
   123e0:	2300      	movs	r3, #0
   123e2:	4803      	ldr	r0, [pc, #12]	; (123f0 <bt_mesh_hb_start+0x1c>)
   123e4:	f7ff bda8 	b.w	11f38 <k_delayed_work_submit>
}
   123e8:	4770      	bx	lr
   123ea:	bf00      	nop
   123ec:	20003ca0 	.word	0x20003ca0
   123f0:	20002c88 	.word	0x20002c88

000123f4 <bt_mesh_hb_pub_pending_store>:

BT_MESH_SETTINGS_DEFINE(pub, "HBPub", hb_pub_set);

void bt_mesh_hb_pub_pending_store(void)
{
   123f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val val;
	int err;

	bt_mesh_hb_pub_get(&pub);
   123f6:	a802      	add	r0, sp, #8
   123f8:	f7ff ff3c 	bl	12274 <bt_mesh_hb_pub_get>
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   123fc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   12400:	b951      	cbnz	r1, 12418 <bt_mesh_hb_pub_pending_store+0x24>
		err = settings_delete("bt/mesh/HBPub");
   12402:	481e      	ldr	r0, [pc, #120]	; (1247c <bt_mesh_hb_pub_pending_store+0x88>)
   12404:	f015 fe6e 	bl	280e4 <settings_delete>
		val.net_idx = pub.net_idx;

		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
	}

	if (err) {
   12408:	b118      	cbz	r0, 12412 <bt_mesh_hb_pub_pending_store+0x1e>
		BT_ERR("Failed to store Heartbeat Publication");
   1240a:	2145      	movs	r1, #69	; 0x45
   1240c:	481c      	ldr	r0, [pc, #112]	; (12480 <bt_mesh_hb_pub_pending_store+0x8c>)
   1240e:	f015 fa60 	bl	278d2 <printk>
	} else {
		BT_DBG("Stored Heartbeat Publication");
	}
}
   12412:	b007      	add	sp, #28
   12414:	f85d fb04 	ldr.w	pc, [sp], #4
		val.indefinite = (pub.count == 0xffff);
   12418:	f8bd 300a 	ldrh.w	r3, [sp, #10]
		val.dst = pub.dst;
   1241c:	f8ad 1000 	strh.w	r1, [sp]
		val.indefinite = (pub.count == 0xffff);
   12420:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12424:	1a98      	subs	r0, r3, r2
   12426:	4243      	negs	r3, r0
   12428:	4143      	adcs	r3, r0
   1242a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1242e:	f363 1004 	bfi	r0, r3, #4, #1
		val.period = bt_mesh_hb_log(pub.period);
   12432:	9b05      	ldr	r3, [sp, #20]
		val.indefinite = (pub.count == 0xffff);
   12434:	f88d 0007 	strb.w	r0, [sp, #7]
	}
}

static inline uint8_t bt_mesh_hb_log(uint32_t val)
{
	if (!val) {
   12438:	b13b      	cbz	r3, 1244a <bt_mesh_hb_pub_pending_store+0x56>
		return 0x00;
	} else if (val == 0xffff) {
   1243a:	4293      	cmp	r3, r2
		return 0xff;
	} else {
		return 32 - __builtin_clz(val);
   1243c:	bf1d      	ittte	ne
   1243e:	fab3 f383 	clzne	r3, r3
   12442:	f1c3 0320 	rsbne	r3, r3, #32
   12446:	b2db      	uxtbne	r3, r3
		return 0xff;
   12448:	23ff      	moveq	r3, #255	; 0xff
		val.period = bt_mesh_hb_log(pub.period);
   1244a:	f88d 3002 	strb.w	r3, [sp, #2]
		val.ttl = pub.ttl;
   1244e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12452:	f88d 3003 	strb.w	r3, [sp, #3]
		val.feat = pub.feat;
   12456:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		val.net_idx = pub.net_idx;
   1245a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
		val.feat = pub.feat;
   1245e:	f8ad 3004 	strh.w	r3, [sp, #4]
		val.net_idx = pub.net_idx;
   12462:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   12466:	4805      	ldr	r0, [pc, #20]	; (1247c <bt_mesh_hb_pub_pending_store+0x88>)
		val.net_idx = pub.net_idx;
   12468:	f362 030b 	bfi	r3, r2, #0, #12
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   1246c:	4669      	mov	r1, sp
   1246e:	2208      	movs	r2, #8
		val.net_idx = pub.net_idx;
   12470:	f8ad 3006 	strh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   12474:	f7f3 fd72 	bl	5f5c <settings_save_one>
   12478:	e7c6      	b.n	12408 <bt_mesh_hb_pub_pending_store+0x14>
   1247a:	bf00      	nop
   1247c:	0003394d 	.word	0x0003394d
   12480:	0003395b 	.word	0x0003395b

00012484 <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const uint8_t n[16], const uint8_t *p, size_t p_len,
	       uint8_t net_id[1], uint8_t enc_key[16], uint8_t priv_key[16])
{
   12484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12488:	b094      	sub	sp, #80	; 0x50
   1248a:	4680      	mov	r8, r0
   1248c:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
   1248e:	482f      	ldr	r0, [pc, #188]	; (1254c <bt_mesh_k2+0xc8>)
   12490:	a902      	add	r1, sp, #8
{
   12492:	4614      	mov	r4, r2
   12494:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
   12496:	f019 f874 	bl	2b582 <bt_mesh_s1>
	if (err) {
   1249a:	2800      	cmp	r0, #0
   1249c:	d153      	bne.n	12546 <bt_mesh_k2+0xc2>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
   1249e:	ad0a      	add	r5, sp, #40	; 0x28
   124a0:	2210      	movs	r2, #16
   124a2:	462b      	mov	r3, r5
   124a4:	4641      	mov	r1, r8
   124a6:	a802      	add	r0, sp, #8
   124a8:	f019 f861 	bl	2b56e <bt_mesh_aes_cmac_one>
	if (err) {
   124ac:	4602      	mov	r2, r0
   124ae:	2800      	cmp	r0, #0
   124b0:	d145      	bne.n	1253e <bt_mesh_k2+0xba>
		return err;
	}

	pad = 0x01;
   124b2:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
   124b4:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
	sg[2].data = &pad;
   124b8:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   124bc:	ac06      	add	r4, sp, #24
	sg[2].len  = sizeof(pad);
   124be:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	pad = 0x01;
   124c2:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = 0;
   124c6:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   124ca:	2203      	movs	r2, #3
   124cc:	4623      	mov	r3, r4
   124ce:	a90e      	add	r1, sp, #56	; 0x38
   124d0:	4628      	mov	r0, r5
   124d2:	f019 f82a 	bl	2b52a <bt_mesh_aes_cmac>
	if (err) {
   124d6:	4602      	mov	r2, r0
   124d8:	bb88      	cbnz	r0, 1253e <bt_mesh_k2+0xba>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
   124da:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
   124de:	940e      	str	r4, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
   124e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   124e4:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
   124e6:	2310      	movs	r3, #16
   124e8:	930f      	str	r3, [sp, #60]	; 0x3c
	pad = 0x02;
   124ea:	2302      	movs	r3, #2
   124ec:	f88d 3007 	strb.w	r3, [sp, #7]

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   124f0:	2203      	movs	r2, #3
   124f2:	4623      	mov	r3, r4
   124f4:	a90e      	add	r1, sp, #56	; 0x38
   124f6:	4628      	mov	r0, r5
   124f8:	f019 f817 	bl	2b52a <bt_mesh_aes_cmac>
	if (err) {
   124fc:	4602      	mov	r2, r0
   124fe:	b9f0      	cbnz	r0, 1253e <bt_mesh_k2+0xba>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12500:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12502:	4626      	mov	r6, r4
   12504:	4633      	mov	r3, r6
   12506:	cb03      	ldmia	r3!, {r0, r1}
   12508:	42ab      	cmp	r3, r5
   1250a:	6010      	str	r0, [r2, #0]
   1250c:	6051      	str	r1, [r2, #4]
   1250e:	461e      	mov	r6, r3
   12510:	f102 0208 	add.w	r2, r2, #8
   12514:	d1f6      	bne.n	12504 <bt_mesh_k2+0x80>
		return err;
	}

	memcpy(enc_key, out, 16);

	pad = 0x03;
   12516:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   12518:	4623      	mov	r3, r4
   1251a:	a90e      	add	r1, sp, #56	; 0x38
   1251c:	4628      	mov	r0, r5
	pad = 0x03;
   1251e:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   12522:	f019 f802 	bl	2b52a <bt_mesh_aes_cmac>
	if (err) {
   12526:	4602      	mov	r2, r0
   12528:	b948      	cbnz	r0, 1253e <bt_mesh_k2+0xba>
   1252a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   1252c:	4623      	mov	r3, r4
   1252e:	cb03      	ldmia	r3!, {r0, r1}
   12530:	42ab      	cmp	r3, r5
   12532:	6030      	str	r0, [r6, #0]
   12534:	6071      	str	r1, [r6, #4]
   12536:	461c      	mov	r4, r3
   12538:	f106 0608 	add.w	r6, r6, #8
   1253c:	d1f6      	bne.n	1252c <bt_mesh_k2+0xa8>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
   1253e:	4610      	mov	r0, r2
   12540:	b014      	add	sp, #80	; 0x50
   12542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return err;
   12546:	2201      	movs	r2, #1
   12548:	e7f9      	b.n	1253e <bt_mesh_k2+0xba>
   1254a:	bf00      	nop
   1254c:	00033ab8 	.word	0x00033ab8

00012550 <bt_mesh_k3>:

int bt_mesh_k3(const uint8_t n[16], uint8_t out[8])
{
   12550:	b530      	push	{r4, r5, lr}
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   12552:	4b13      	ldr	r3, [pc, #76]	; (125a0 <bt_mesh_k3+0x50>)
{
   12554:	b08b      	sub	sp, #44	; 0x2c
   12556:	4605      	mov	r5, r0
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   12558:	6818      	ldr	r0, [r3, #0]
   1255a:	9000      	str	r0, [sp, #0]
{
   1255c:	460c      	mov	r4, r1
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   1255e:	791b      	ldrb	r3, [r3, #4]
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
   12560:	4810      	ldr	r0, [pc, #64]	; (125a4 <bt_mesh_k3+0x54>)
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   12562:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_mesh_s1("smk3", tmp);
   12566:	a902      	add	r1, sp, #8
   12568:	f019 f80b 	bl	2b582 <bt_mesh_s1>
	if (err) {
   1256c:	b9b0      	cbnz	r0, 1259c <bt_mesh_k3+0x4c>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
   1256e:	ab06      	add	r3, sp, #24
   12570:	2210      	movs	r2, #16
   12572:	4629      	mov	r1, r5
   12574:	a802      	add	r0, sp, #8
   12576:	f018 fffa 	bl	2b56e <bt_mesh_aes_cmac_one>
	if (err) {
   1257a:	4603      	mov	r3, r0
   1257c:	b958      	cbnz	r0, 12596 <bt_mesh_k3+0x46>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
   1257e:	ab02      	add	r3, sp, #8
   12580:	2205      	movs	r2, #5
   12582:	4669      	mov	r1, sp
   12584:	a806      	add	r0, sp, #24
   12586:	f018 fff2 	bl	2b56e <bt_mesh_aes_cmac_one>
	if (err) {
   1258a:	4603      	mov	r3, r0
   1258c:	b918      	cbnz	r0, 12596 <bt_mesh_k3+0x46>
   1258e:	aa04      	add	r2, sp, #16
   12590:	ca03      	ldmia	r2!, {r0, r1}
   12592:	6020      	str	r0, [r4, #0]
   12594:	6061      	str	r1, [r4, #4]
	}

	memcpy(out, tmp + 8, 8);

	return 0;
}
   12596:	4618      	mov	r0, r3
   12598:	b00b      	add	sp, #44	; 0x2c
   1259a:	bd30      	pop	{r4, r5, pc}
		return err;
   1259c:	2301      	movs	r3, #1
   1259e:	e7fa      	b.n	12596 <bt_mesh_k3+0x46>
   125a0:	0002f2f1 	.word	0x0002f2f1
   125a4:	00033abd 	.word	0x00033abd

000125a8 <bt_mesh_k4>:

int bt_mesh_k4(const uint8_t n[16], uint8_t out[1])
{
   125a8:	b530      	push	{r4, r5, lr}
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
   125aa:	4b11      	ldr	r3, [pc, #68]	; (125f0 <bt_mesh_k4+0x48>)
{
   125ac:	b08b      	sub	sp, #44	; 0x2c
   125ae:	4605      	mov	r5, r0
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
   125b0:	6818      	ldr	r0, [r3, #0]
   125b2:	9001      	str	r0, [sp, #4]
{
   125b4:	460c      	mov	r4, r1
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
   125b6:	480f      	ldr	r0, [pc, #60]	; (125f4 <bt_mesh_k4+0x4c>)
   125b8:	a902      	add	r1, sp, #8
   125ba:	f018 ffe2 	bl	2b582 <bt_mesh_s1>
	if (err) {
   125be:	b9a8      	cbnz	r0, 125ec <bt_mesh_k4+0x44>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
   125c0:	ab06      	add	r3, sp, #24
   125c2:	2210      	movs	r2, #16
   125c4:	4629      	mov	r1, r5
   125c6:	a802      	add	r0, sp, #8
   125c8:	f018 ffd1 	bl	2b56e <bt_mesh_aes_cmac_one>
	if (err) {
   125cc:	b960      	cbnz	r0, 125e8 <bt_mesh_k4+0x40>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
   125ce:	2204      	movs	r2, #4
   125d0:	ab02      	add	r3, sp, #8
   125d2:	eb0d 0102 	add.w	r1, sp, r2
   125d6:	a806      	add	r0, sp, #24
   125d8:	f018 ffc9 	bl	2b56e <bt_mesh_aes_cmac_one>
	if (err) {
   125dc:	b920      	cbnz	r0, 125e8 <bt_mesh_k4+0x40>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
   125de:	f89d 3017 	ldrb.w	r3, [sp, #23]
   125e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   125e6:	7023      	strb	r3, [r4, #0]

	return 0;
}
   125e8:	b00b      	add	sp, #44	; 0x2c
   125ea:	bd30      	pop	{r4, r5, pc}
		return err;
   125ec:	2001      	movs	r0, #1
   125ee:	e7fb      	b.n	125e8 <bt_mesh_k4+0x40>
   125f0:	0002f2f6 	.word	0x0002f2f6
   125f4:	00033ac2 	.word	0x00033ac2

000125f8 <bt_mesh_id128>:

int bt_mesh_id128(const uint8_t n[16], const char *s, uint8_t out[16])
{
   125f8:	b530      	push	{r4, r5, lr}
   125fa:	b087      	sub	sp, #28
   125fc:	4604      	mov	r4, r0
   125fe:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	uint8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
   12600:	a902      	add	r1, sp, #8
{
   12602:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
   12604:	f018 ffbd 	bl	2b582 <bt_mesh_s1>
	if (err) {
   12608:	b940      	cbnz	r0, 1261c <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
   1260a:	9500      	str	r5, [sp, #0]
   1260c:	4b04      	ldr	r3, [pc, #16]	; (12620 <bt_mesh_id128+0x28>)
   1260e:	aa02      	add	r2, sp, #8
   12610:	2110      	movs	r1, #16
   12612:	4620      	mov	r0, r4
   12614:	f018 ffcc 	bl	2b5b0 <bt_mesh_k1>
}
   12618:	b007      	add	sp, #28
   1261a:	bd30      	pop	{r4, r5, pc}
		return err;
   1261c:	2001      	movs	r0, #1
   1261e:	e7fb      	b.n	12618 <bt_mesh_id128+0x20>
   12620:	00033ab1 	.word	0x00033ab1

00012624 <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

uint8_t bt_mesh_fcs_calc(const uint8_t *data, uint8_t data_len)
{
   12624:	b510      	push	{r4, lr}
	uint8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
   12626:	4a06      	ldr	r2, [pc, #24]	; (12640 <bt_mesh_fcs_calc+0x1c>)
   12628:	4401      	add	r1, r0
	uint8_t fcs = 0xff;
   1262a:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
   1262c:	4288      	cmp	r0, r1
   1262e:	d102      	bne.n	12636 <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
   12630:	43d8      	mvns	r0, r3
}
   12632:	b2c0      	uxtb	r0, r0
   12634:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
   12636:	f810 4b01 	ldrb.w	r4, [r0], #1
   1263a:	4063      	eors	r3, r4
   1263c:	5cd3      	ldrb	r3, [r2, r3]
   1263e:	e7f5      	b.n	1262c <bt_mesh_fcs_calc+0x8>
   12640:	00033ad1 	.word	0x00033ad1

00012644 <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, uint8_t received_fcs)
{
	const uint8_t *data = buf->data;
   12644:	6802      	ldr	r2, [r0, #0]
	uint16_t data_len = buf->len;
	uint8_t fcs = 0xff;

	while (data_len--) {
   12646:	8880      	ldrh	r0, [r0, #4]
{
   12648:	b530      	push	{r4, r5, lr}
   1264a:	4c08      	ldr	r4, [pc, #32]	; (1266c <bt_mesh_fcs_check+0x28>)
   1264c:	4410      	add	r0, r2
	uint8_t fcs = 0xff;
   1264e:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
   12650:	4282      	cmp	r2, r0
   12652:	d106      	bne.n	12662 <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
   12654:	404b      	eors	r3, r1
   12656:	5ce0      	ldrb	r0, [r4, r3]
}
   12658:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
   1265c:	4258      	negs	r0, r3
   1265e:	4158      	adcs	r0, r3
   12660:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
   12662:	f812 5b01 	ldrb.w	r5, [r2], #1
   12666:	406b      	eors	r3, r5
   12668:	5ce3      	ldrb	r3, [r4, r3]
   1266a:	e7f1      	b.n	12650 <bt_mesh_fcs_check+0xc>
   1266c:	00033ad1 	.word	0x00033ad1

00012670 <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const uint8_t virtual_label[16], uint16_t *addr)
{
   12670:	b530      	push	{r4, r5, lr}
   12672:	b089      	sub	sp, #36	; 0x24
   12674:	4605      	mov	r5, r0
   12676:	460c      	mov	r4, r1
	uint8_t salt[16];
	uint8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
   12678:	480e      	ldr	r0, [pc, #56]	; (126b4 <bt_mesh_virtual_addr+0x44>)
   1267a:	4669      	mov	r1, sp
   1267c:	f018 ff81 	bl	2b582 <bt_mesh_s1>
	if (err) {
   12680:	b9a8      	cbnz	r0, 126ae <bt_mesh_virtual_addr+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
   12682:	ab04      	add	r3, sp, #16
   12684:	2210      	movs	r2, #16
   12686:	4629      	mov	r1, r5
   12688:	4668      	mov	r0, sp
   1268a:	f018 ff70 	bl	2b56e <bt_mesh_aes_cmac_one>
	if (err) {
   1268e:	b960      	cbnz	r0, 126aa <bt_mesh_virtual_addr+0x3a>
	return ((uint16_t)src[0] << 8) | src[1];
   12690:	f89d 201e 	ldrb.w	r2, [sp, #30]
   12694:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12698:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
   1269c:	f3c3 030d 	ubfx	r3, r3, #0, #14
   126a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   126a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   126a8:	8023      	strh	r3, [r4, #0]

	return 0;
}
   126aa:	b009      	add	sp, #36	; 0x24
   126ac:	bd30      	pop	{r4, r5, pc}
		return err;
   126ae:	2001      	movs	r0, #1
   126b0:	e7fb      	b.n	126aa <bt_mesh_virtual_addr+0x3a>
   126b2:	bf00      	nop
   126b4:	00033acc 	.word	0x00033acc

000126b8 <bt_mesh_prov_conf_key>:
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
}

int bt_mesh_prov_conf_key(const uint8_t dhkey[32], const uint8_t conf_salt[16],
			  uint8_t conf_key[16])
{
   126b8:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
   126ba:	4b04      	ldr	r3, [pc, #16]	; (126cc <bt_mesh_prov_conf_key+0x14>)
   126bc:	9200      	str	r2, [sp, #0]
   126be:	460a      	mov	r2, r1
   126c0:	2120      	movs	r1, #32
   126c2:	f018 ff75 	bl	2b5b0 <bt_mesh_k1>
}
   126c6:	b003      	add	sp, #12
   126c8:	f85d fb04 	ldr.w	pc, [sp], #4
   126cc:	00033ac7 	.word	0x00033ac7

000126d0 <encode_mod_path>:

BT_MESH_SETTINGS_DEFINE(vnd_mod, "v", vnd_mod_set);

static void encode_mod_path(struct bt_mesh_model *mod, bool vnd,
			    const char *key, char *path, size_t path_len)
{
   126d0:	b470      	push	{r4, r5, r6}
   126d2:	4605      	mov	r5, r0
   126d4:	4618      	mov	r0, r3
	uint16_t mod_key = (((uint16_t)mod->elem_idx << 8) | mod->mod_idx);
   126d6:	792e      	ldrb	r6, [r5, #4]
   126d8:	796b      	ldrb	r3, [r5, #5]
{
   126da:	9c03      	ldr	r4, [sp, #12]

	if (vnd) {
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   126dc:	9203      	str	r2, [sp, #12]
   126de:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	if (vnd) {
   126e2:	b121      	cbz	r1, 126ee <encode_mod_path+0x1e>
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   126e4:	4a03      	ldr	r2, [pc, #12]	; (126f4 <encode_mod_path+0x24>)
	} else {
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   126e6:	4621      	mov	r1, r4
	}
}
   126e8:	bc70      	pop	{r4, r5, r6}
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   126ea:	f015 b8ff 	b.w	278ec <snprintk>
   126ee:	4a02      	ldr	r2, [pc, #8]	; (126f8 <encode_mod_path+0x28>)
   126f0:	e7f9      	b.n	126e6 <encode_mod_path+0x16>
   126f2:	bf00      	nop
   126f4:	00033d48 	.word	0x00033d48
   126f8:	00033d58 	.word	0x00033d58

000126fc <model_send>:
{
   126fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12700:	4680      	mov	r8, r0
   12702:	460d      	mov	r5, r1
   12704:	4691      	mov	r9, r2
   12706:	461c      	mov	r4, r3
   12708:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
	if (!bt_mesh_is_provisioned()) {
   1270c:	f018 fb99 	bl	2ae42 <bt_mesh_is_provisioned>
   12710:	b938      	cbnz	r0, 12722 <model_send+0x26>
		BT_ERR("Local node is not yet provisioned");
   12712:	481e      	ldr	r0, [pc, #120]	; (1278c <model_send+0x90>)
   12714:	2145      	movs	r1, #69	; 0x45
   12716:	f015 f8dc 	bl	278d2 <printk>
		return -EAGAIN;
   1271a:	f06f 000a 	mvn.w	r0, #10
}
   1271e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (net_buf_simple_tailroom(msg) < 4) {
   12722:	4620      	mov	r0, r4
   12724:	f01a ff42 	bl	2d5ac <net_buf_simple_tailroom>
   12728:	2803      	cmp	r0, #3
   1272a:	d806      	bhi.n	1273a <model_send+0x3e>
		BT_ERR("Not enough tailroom for TransMIC");
   1272c:	2145      	movs	r1, #69	; 0x45
   1272e:	4818      	ldr	r0, [pc, #96]	; (12790 <model_send+0x94>)
   12730:	f015 f8cf 	bl	278d2 <printk>
		return -EINVAL;
   12734:	f06f 0015 	mvn.w	r0, #21
   12738:	e7f1      	b.n	1271e <model_send+0x22>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
   1273a:	88a3      	ldrh	r3, [r4, #4]
   1273c:	2b8c      	cmp	r3, #140	; 0x8c
   1273e:	d906      	bls.n	1274e <model_send+0x52>
		BT_ERR("Too big message");
   12740:	4814      	ldr	r0, [pc, #80]	; (12794 <model_send+0x98>)
   12742:	2145      	movs	r1, #69	; 0x45
   12744:	f015 f8c5 	bl	278d2 <printk>
		return -EMSGSIZE;
   12748:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1274c:	e7e7      	b.n	1271e <model_send+0x22>
	if (!implicit_bind && !model_has_key(model, tx->ctx->app_idx)) {
   1274e:	f1b9 0f00 	cmp.w	r9, #0
   12752:	d10d      	bne.n	12770 <model_send+0x74>
   12754:	686b      	ldr	r3, [r5, #4]
   12756:	885a      	ldrh	r2, [r3, #2]
		if (mod->keys[i] == key ||
   12758:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   1275c:	429a      	cmp	r2, r3
   1275e:	d007      	beq.n	12770 <model_send+0x74>
   12760:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   12764:	428b      	cmp	r3, r1
   12766:	d10b      	bne.n	12780 <model_send+0x84>
		     BT_MESH_IS_DEV_KEY(key))) {
   12768:	1cd3      	adds	r3, r2, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   1276a:	b29b      	uxth	r3, r3
   1276c:	2b01      	cmp	r3, #1
   1276e:	d807      	bhi.n	12780 <model_send+0x84>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
   12770:	463b      	mov	r3, r7
   12772:	4632      	mov	r2, r6
   12774:	4621      	mov	r1, r4
   12776:	4628      	mov	r0, r5
}
   12778:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
   1277c:	f7fe be5a 	b.w	11434 <bt_mesh_trans_send>
		BT_ERR("Model not bound to AppKey 0x%04x", tx->ctx->app_idx);
   12780:	2145      	movs	r1, #69	; 0x45
   12782:	4805      	ldr	r0, [pc, #20]	; (12798 <model_send+0x9c>)
   12784:	f015 f8a5 	bl	278d2 <printk>
   12788:	e7d4      	b.n	12734 <model_send+0x38>
   1278a:	bf00      	nop
   1278c:	00033e9b 	.word	0x00033e9b
   12790:	00033ec2 	.word	0x00033ec2
   12794:	00033ee8 	.word	0x00033ee8
   12798:	00033efd 	.word	0x00033efd

0001279c <publish_start>:
{
   1279c:	b510      	push	{r4, lr}
	if (err) {
   1279e:	b131      	cbz	r1, 127ae <publish_start+0x12>
		BT_ERR("Failed to publish: err %d", err);
   127a0:	460a      	mov	r2, r1
   127a2:	4809      	ldr	r0, [pc, #36]	; (127c8 <publish_start+0x2c>)
   127a4:	2145      	movs	r1, #69	; 0x45
}
   127a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to publish: err %d", err);
   127aa:	f015 b892 	b.w	278d2 <printk>
	struct bt_mesh_model_pub *pub = mod->pub;
   127ae:	6894      	ldr	r4, [r2, #8]
	if (pub->count == BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit)) {
   127b0:	7a63      	ldrb	r3, [r4, #9]
   127b2:	7ae2      	ldrb	r2, [r4, #11]
   127b4:	f003 0307 	and.w	r3, r3, #7
   127b8:	ebb3 1f52 	cmp.w	r3, r2, lsr #5
   127bc:	d102      	bne.n	127c4 <publish_start+0x28>
		pub->period_start = k_uptime_get_32();
   127be:	f019 f879 	bl	2b8b4 <k_uptime_get_32>
   127c2:	60e0      	str	r0, [r4, #12]
}
   127c4:	bd10      	pop	{r4, pc}
   127c6:	bf00      	nop
   127c8:	00033f58 	.word	0x00033f58

000127cc <store_pending_mod>:
}

static void store_pending_mod(struct bt_mesh_model *mod,
			      struct bt_mesh_elem *elem, bool vnd,
			      bool primary, void *user_data)
{
   127cc:	b570      	push	{r4, r5, r6, lr}
	if (!mod->flags) {
   127ce:	88c3      	ldrh	r3, [r0, #6]
{
   127d0:	b08a      	sub	sp, #40	; 0x28
   127d2:	4604      	mov	r4, r0
   127d4:	4616      	mov	r6, r2
	if (!mod->flags) {
   127d6:	2b00      	cmp	r3, #0
   127d8:	d05e      	beq.n	12898 <store_pending_mod+0xcc>
		return;
	}

	if (mod->flags & BT_MESH_MOD_BIND_PENDING) {
   127da:	07d8      	lsls	r0, r3, #31
   127dc:	d522      	bpl.n	12824 <store_pending_mod+0x58>
		mod->flags &= ~BT_MESH_MOD_BIND_PENDING;
   127de:	f023 0301 	bic.w	r3, r3, #1
   127e2:	80e3      	strh	r3, [r4, #6]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   127e4:	89a3      	ldrh	r3, [r4, #12]
   127e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   127ea:	4293      	cmp	r3, r2
			keys[count++] = mod->keys[i];
   127ec:	bf18      	it	ne
   127ee:	f8ad 300c 	strhne.w	r3, [sp, #12]
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   127f2:	f04f 0314 	mov.w	r3, #20
			keys[count++] = mod->keys[i];
   127f6:	bf14      	ite	ne
   127f8:	2501      	movne	r5, #1
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   127fa:	2500      	moveq	r5, #0
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   127fc:	9300      	str	r3, [sp, #0]
   127fe:	4a3a      	ldr	r2, [pc, #232]	; (128e8 <store_pending_mod+0x11c>)
   12800:	446b      	add	r3, sp
   12802:	4631      	mov	r1, r6
   12804:	4620      	mov	r0, r4
   12806:	f7ff ff63 	bl	126d0 <encode_mod_path>
	if (count) {
   1280a:	2d00      	cmp	r5, #0
   1280c:	d046      	beq.n	1289c <store_pending_mod+0xd0>
		err = settings_save_one(path, keys, count * sizeof(keys[0]));
   1280e:	2202      	movs	r2, #2
   12810:	a903      	add	r1, sp, #12
   12812:	a805      	add	r0, sp, #20
   12814:	f7f3 fba2 	bl	5f5c <settings_save_one>
	if (err) {
   12818:	b120      	cbz	r0, 12824 <store_pending_mod+0x58>
		BT_ERR("Failed to store %s value", log_strdup(path));
   1281a:	aa05      	add	r2, sp, #20
   1281c:	2145      	movs	r1, #69	; 0x45
   1281e:	4833      	ldr	r0, [pc, #204]	; (128ec <store_pending_mod+0x120>)
   12820:	f015 f857 	bl	278d2 <printk>
		store_pending_mod_bind(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_SUB_PENDING) {
   12824:	88e3      	ldrh	r3, [r4, #6]
   12826:	0799      	lsls	r1, r3, #30
   12828:	d51b      	bpl.n	12862 <store_pending_mod+0x96>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   1282a:	89e5      	ldrh	r5, [r4, #14]
		mod->flags &= ~BT_MESH_MOD_SUB_PENDING;
   1282c:	f023 0302 	bic.w	r3, r3, #2
   12830:	80e3      	strh	r3, [r4, #6]
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   12832:	b115      	cbz	r5, 1283a <store_pending_mod+0x6e>
			groups[count++] = mod->groups[i];
   12834:	f8ad 500c 	strh.w	r5, [sp, #12]
   12838:	2501      	movs	r5, #1
	encode_mod_path(mod, vnd, "sub", path, sizeof(path));
   1283a:	2314      	movs	r3, #20
   1283c:	9300      	str	r3, [sp, #0]
   1283e:	4a2c      	ldr	r2, [pc, #176]	; (128f0 <store_pending_mod+0x124>)
   12840:	446b      	add	r3, sp
   12842:	4631      	mov	r1, r6
   12844:	4620      	mov	r0, r4
   12846:	f7ff ff43 	bl	126d0 <encode_mod_path>
	if (count) {
   1284a:	b35d      	cbz	r5, 128a4 <store_pending_mod+0xd8>
		err = settings_save_one(path, groups,
   1284c:	2202      	movs	r2, #2
   1284e:	a903      	add	r1, sp, #12
   12850:	a805      	add	r0, sp, #20
   12852:	f7f3 fb83 	bl	5f5c <settings_save_one>
	if (err) {
   12856:	b120      	cbz	r0, 12862 <store_pending_mod+0x96>
		BT_ERR("Failed to store %s value", log_strdup(path));
   12858:	aa05      	add	r2, sp, #20
   1285a:	2145      	movs	r1, #69	; 0x45
   1285c:	4823      	ldr	r0, [pc, #140]	; (128ec <store_pending_mod+0x120>)
   1285e:	f015 f838 	bl	278d2 <printk>
		store_pending_mod_sub(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_PUB_PENDING) {
   12862:	88e3      	ldrh	r3, [r4, #6]
   12864:	075a      	lsls	r2, r3, #29
   12866:	d517      	bpl.n	12898 <store_pending_mod+0xcc>
		mod->flags &= ~BT_MESH_MOD_PUB_PENDING;
   12868:	f023 0304 	bic.w	r3, r3, #4
   1286c:	80e3      	strh	r3, [r4, #6]
	encode_mod_path(mod, vnd, "pub", path, sizeof(path));
   1286e:	2314      	movs	r3, #20
   12870:	9300      	str	r3, [sp, #0]
   12872:	4a20      	ldr	r2, [pc, #128]	; (128f4 <store_pending_mod+0x128>)
   12874:	446b      	add	r3, sp
   12876:	4631      	mov	r1, r6
   12878:	4620      	mov	r0, r4
   1287a:	f7ff ff29 	bl	126d0 <encode_mod_path>
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   1287e:	68a3      	ldr	r3, [r4, #8]
   12880:	b10b      	cbz	r3, 12886 <store_pending_mod+0xba>
   12882:	889a      	ldrh	r2, [r3, #4]
   12884:	b992      	cbnz	r2, 128ac <store_pending_mod+0xe0>
		err = settings_delete(path);
   12886:	a805      	add	r0, sp, #20
   12888:	f015 fc2c 	bl	280e4 <settings_delete>
	if (err) {
   1288c:	b120      	cbz	r0, 12898 <store_pending_mod+0xcc>
		BT_ERR("Failed to store %s value", log_strdup(path));
   1288e:	aa05      	add	r2, sp, #20
   12890:	2145      	movs	r1, #69	; 0x45
   12892:	4816      	ldr	r0, [pc, #88]	; (128ec <store_pending_mod+0x120>)
   12894:	f015 f81d 	bl	278d2 <printk>
		store_pending_mod_pub(mod, vnd);
	}
}
   12898:	b00a      	add	sp, #40	; 0x28
   1289a:	bd70      	pop	{r4, r5, r6, pc}
		err = settings_delete(path);
   1289c:	a805      	add	r0, sp, #20
   1289e:	f015 fc21 	bl	280e4 <settings_delete>
   128a2:	e7b9      	b.n	12818 <store_pending_mod+0x4c>
		err = settings_delete(path);
   128a4:	a805      	add	r0, sp, #20
   128a6:	f015 fc1d 	bl	280e4 <settings_delete>
   128aa:	e7d4      	b.n	12856 <store_pending_mod+0x8a>
		pub.addr = mod->pub->addr;
   128ac:	f8ad 200c 	strh.w	r2, [sp, #12]
		pub.key = mod->pub->key;
   128b0:	88da      	ldrh	r2, [r3, #6]
   128b2:	f3c2 020b 	ubfx	r2, r2, #0, #12
   128b6:	f8ad 200e 	strh.w	r2, [sp, #14]
		pub.ttl = mod->pub->ttl;
   128ba:	6899      	ldr	r1, [r3, #8]
   128bc:	9a04      	ldr	r2, [sp, #16]
   128be:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
   128c2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
   128c6:	430a      	orrs	r2, r1
   128c8:	9204      	str	r2, [sp, #16]
		pub.cred = mod->pub->cred;
   128ca:	79db      	ldrb	r3, [r3, #7]
   128cc:	f89d 2013 	ldrb.w	r2, [sp, #19]
   128d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
   128d4:	f363 1204 	bfi	r2, r3, #4, #1
   128d8:	f88d 2013 	strb.w	r2, [sp, #19]
		err = settings_save_one(path, &pub, sizeof(pub));
   128dc:	a903      	add	r1, sp, #12
   128de:	2208      	movs	r2, #8
   128e0:	a805      	add	r0, sp, #20
   128e2:	f7f3 fb3b 	bl	5f5c <settings_save_one>
   128e6:	e7d1      	b.n	1288c <store_pending_mod+0xc0>
   128e8:	00033f77 	.word	0x00033f77
   128ec:	00033f7c 	.word	0x00033f7c
   128f0:	00033f9a 	.word	0x00033f9a
   128f4:	00033f9e 	.word	0x00033f9e

000128f8 <mod_init>:
{
   128f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128fc:	9d06      	ldr	r5, [sp, #24]
   128fe:	460e      	mov	r6, r1
	if (*err) {
   12900:	6829      	ldr	r1, [r5, #0]
{
   12902:	4604      	mov	r4, r0
   12904:	4690      	mov	r8, r2
	if (*err) {
   12906:	bb19      	cbnz	r1, 12950 <mod_init+0x58>
	if (mod->pub) {
   12908:	6887      	ldr	r7, [r0, #8]
   1290a:	b13f      	cbz	r7, 1291c <mod_init+0x24>
		mod->pub->mod = mod;
   1290c:	4638      	mov	r0, r7
   1290e:	2230      	movs	r2, #48	; 0x30
   12910:	f840 4b18 	str.w	r4, [r0], #24
   12914:	f01b fd04 	bl	2e320 <memset>
   12918:	4b0f      	ldr	r3, [pc, #60]	; (12958 <mod_init+0x60>)
   1291a:	61fb      	str	r3, [r7, #28]
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   1291c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12920:	81a3      	strh	r3, [r4, #12]
	mod->elem_idx = elem - dev_comp->elem;
   12922:	4b0e      	ldr	r3, [pc, #56]	; (1295c <mod_init+0x64>)
   12924:	681b      	ldr	r3, [r3, #0]
   12926:	68db      	ldr	r3, [r3, #12]
   12928:	1af3      	subs	r3, r6, r3
   1292a:	111b      	asrs	r3, r3, #4
   1292c:	7123      	strb	r3, [r4, #4]
	if (vnd) {
   1292e:	4b0c      	ldr	r3, [pc, #48]	; (12960 <mod_init+0x68>)
   12930:	f1b8 0f00 	cmp.w	r8, #0
   12934:	d00e      	beq.n	12954 <mod_init+0x5c>
		mod->mod_idx = mod - elem->vnd_models;
   12936:	68f2      	ldr	r2, [r6, #12]
		mod->mod_idx = mod - elem->models;
   12938:	1aa2      	subs	r2, r4, r2
   1293a:	1092      	asrs	r2, r2, #2
   1293c:	4353      	muls	r3, r2
   1293e:	b2db      	uxtb	r3, r3
   12940:	7163      	strb	r3, [r4, #5]
	if (mod->cb && mod->cb->init) {
   12942:	6963      	ldr	r3, [r4, #20]
   12944:	b123      	cbz	r3, 12950 <mod_init+0x58>
   12946:	689b      	ldr	r3, [r3, #8]
   12948:	b113      	cbz	r3, 12950 <mod_init+0x58>
		*err = mod->cb->init(mod);
   1294a:	4620      	mov	r0, r4
   1294c:	4798      	blx	r3
   1294e:	6028      	str	r0, [r5, #0]
}
   12950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mod->mod_idx = mod - elem->models;
   12954:	68b2      	ldr	r2, [r6, #8]
   12956:	e7ef      	b.n	12938 <mod_init+0x40>
   12958:	0001305d 	.word	0x0001305d
   1295c:	20003cc0 	.word	0x20003cc0
   12960:	b6db6db7 	.word	0xb6db6db7

00012964 <bt_mesh_model_foreach>:
{
   12964:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
   12968:	f8df a068 	ldr.w	sl, [pc, #104]	; 129d4 <bt_mesh_model_foreach+0x70>
{
   1296c:	4607      	mov	r7, r0
   1296e:	4688      	mov	r8, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
   12970:	2500      	movs	r5, #0
			struct bt_mesh_model *model = &elem->models[j];
   12972:	f04f 091c 	mov.w	r9, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
   12976:	f8da 3000 	ldr.w	r3, [sl]
   1297a:	689a      	ldr	r2, [r3, #8]
   1297c:	42aa      	cmp	r2, r5
   1297e:	d802      	bhi.n	12986 <bt_mesh_model_foreach+0x22>
}
   12980:	b002      	add	sp, #8
   12982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   12986:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
   12988:	2600      	movs	r6, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   1298a:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
   1298e:	7923      	ldrb	r3, [r4, #4]
   12990:	42b3      	cmp	r3, r6
   12992:	dc05      	bgt.n	129a0 <bt_mesh_model_foreach+0x3c>
		for (j = 0; j < elem->vnd_model_count; j++) {
   12994:	2600      	movs	r6, #0
   12996:	7963      	ldrb	r3, [r4, #5]
   12998:	42b3      	cmp	r3, r6
   1299a:	dc0e      	bgt.n	129ba <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
   1299c:	3501      	adds	r5, #1
   1299e:	e7ea      	b.n	12976 <bt_mesh_model_foreach+0x12>
			struct bt_mesh_model *model = &elem->models[j];
   129a0:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
   129a2:	f8cd 8000 	str.w	r8, [sp]
   129a6:	fab5 f385 	clz	r3, r5
   129aa:	fb09 0006 	mla	r0, r9, r6, r0
   129ae:	095b      	lsrs	r3, r3, #5
   129b0:	2200      	movs	r2, #0
   129b2:	4621      	mov	r1, r4
   129b4:	47b8      	blx	r7
		for (j = 0; j < elem->model_count; j++) {
   129b6:	3601      	adds	r6, #1
   129b8:	e7e9      	b.n	1298e <bt_mesh_model_foreach+0x2a>
			struct bt_mesh_model *model = &elem->vnd_models[j];
   129ba:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
   129bc:	f8cd 8000 	str.w	r8, [sp]
   129c0:	fab5 f385 	clz	r3, r5
   129c4:	fb09 0006 	mla	r0, r9, r6, r0
   129c8:	095b      	lsrs	r3, r3, #5
   129ca:	2201      	movs	r2, #1
   129cc:	4621      	mov	r1, r4
   129ce:	47b8      	blx	r7
		for (j = 0; j < elem->vnd_model_count; j++) {
   129d0:	3601      	adds	r6, #1
   129d2:	e7e0      	b.n	12996 <bt_mesh_model_foreach+0x32>
   129d4:	20003cc0 	.word	0x20003cc0

000129d8 <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
   129d8:	6882      	ldr	r2, [r0, #8]
   129da:	b302      	cbz	r2, 12a1e <bt_mesh_model_pub_period_get+0x46>
	switch (mod->pub->period >> 6) {
   129dc:	7a93      	ldrb	r3, [r2, #10]
   129de:	0999      	lsrs	r1, r3, #6
   129e0:	2902      	cmp	r1, #2
   129e2:	d013      	beq.n	12a0c <bt_mesh_model_pub_period_get+0x34>
   129e4:	2903      	cmp	r1, #3
   129e6:	d016      	beq.n	12a16 <bt_mesh_model_pub_period_get+0x3e>
   129e8:	2901      	cmp	r1, #1
   129ea:	d009      	beq.n	12a00 <bt_mesh_model_pub_period_get+0x28>
		period = (mod->pub->period & BIT_MASK(6)) * 100U;
   129ec:	2064      	movs	r0, #100	; 0x64
   129ee:	fb13 f000 	smulbb	r0, r3, r0
	if (mod->pub->fast_period) {
   129f2:	7ad3      	ldrb	r3, [r2, #11]
   129f4:	06da      	lsls	r2, r3, #27
   129f6:	d513      	bpl.n	12a20 <bt_mesh_model_pub_period_get+0x48>
		return period >> mod->pub->period_div;
   129f8:	f003 030f 	and.w	r3, r3, #15
   129fc:	4118      	asrs	r0, r3
   129fe:	4770      	bx	lr
		period = (mod->pub->period & BIT_MASK(6)) * MSEC_PER_SEC;
   12a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
   12a08:	4358      	muls	r0, r3
		break;
   12a0a:	e7f2      	b.n	129f2 <bt_mesh_model_pub_period_get+0x1a>
		period = (mod->pub->period & BIT_MASK(6)) * 10U * MSEC_PER_SEC;
   12a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12a10:	f242 7010 	movw	r0, #10000	; 0x2710
   12a14:	e7f8      	b.n	12a08 <bt_mesh_model_pub_period_get+0x30>
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
   12a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12a1a:	4802      	ldr	r0, [pc, #8]	; (12a24 <bt_mesh_model_pub_period_get+0x4c>)
   12a1c:	e7f4      	b.n	12a08 <bt_mesh_model_pub_period_get+0x30>
		return 0;
   12a1e:	4610      	mov	r0, r2
}
   12a20:	4770      	bx	lr
   12a22:	bf00      	nop
   12a24:	000927c0 	.word	0x000927c0

00012a28 <publish_sent>:
{
   12a28:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub->count) {
   12a2a:	688e      	ldr	r6, [r1, #8]
   12a2c:	7af3      	ldrb	r3, [r6, #11]
   12a2e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
{
   12a32:	460d      	mov	r5, r1
	if (mod->pub->count) {
   12a34:	d01c      	beq.n	12a70 <publish_sent+0x48>
		delay = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   12a36:	7a70      	ldrb	r0, [r6, #9]
   12a38:	08c4      	lsrs	r4, r0, #3
   12a3a:	2032      	movs	r0, #50	; 0x32
   12a3c:	fb04 0000 	mla	r0, r4, r0, r0
		k_delayed_work_submit(&mod->pub->timer, K_MSEC(delay));
   12a40:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   12a44:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   12a48:	f240 30e7 	movw	r0, #999	; 0x3e7
   12a4c:	2100      	movs	r1, #0
   12a4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12a52:	2300      	movs	r3, #0
   12a54:	fbc6 0104 	smlal	r0, r1, r6, r4
   12a58:	f7ee ff98 	bl	198c <__aeabi_uldivmod>
   12a5c:	68ad      	ldr	r5, [r5, #8]
   12a5e:	3518      	adds	r5, #24
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12a60:	4602      	mov	r2, r0
   12a62:	460b      	mov	r3, r1
   12a64:	480d      	ldr	r0, [pc, #52]	; (12a9c <publish_sent+0x74>)
   12a66:	4629      	mov	r1, r5
}
   12a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12a6c:	f012 bd14 	b.w	25498 <k_delayed_work_submit_to_queue>
	period = bt_mesh_model_pub_period_get(mod);
   12a70:	4608      	mov	r0, r1
   12a72:	f7ff ffb1 	bl	129d8 <bt_mesh_model_pub_period_get>
	if (!period) {
   12a76:	4604      	mov	r4, r0
   12a78:	b170      	cbz	r0, 12a98 <publish_sent+0x70>
	elapsed = k_uptime_get_32() - pub->period_start;
   12a7a:	f018 ff1b 	bl	2b8b4 <k_uptime_get_32>
   12a7e:	68f3      	ldr	r3, [r6, #12]
   12a80:	1ac2      	subs	r2, r0, r3
	if (elapsed >= period) {
   12a82:	4294      	cmp	r4, r2
   12a84:	d805      	bhi.n	12a92 <publish_sent+0x6a>
		BT_WARN("Publication sending took longer than the period");
   12a86:	4806      	ldr	r0, [pc, #24]	; (12aa0 <publish_sent+0x78>)
   12a88:	2157      	movs	r1, #87	; 0x57
   12a8a:	f014 ff22 	bl	278d2 <printk>
		return 1;
   12a8e:	2001      	movs	r0, #1
   12a90:	e7d6      	b.n	12a40 <publish_sent+0x18>
	return period - elapsed;
   12a92:	441c      	add	r4, r3
	if (delay) {
   12a94:	1a20      	subs	r0, r4, r0
   12a96:	d1d3      	bne.n	12a40 <publish_sent+0x18>
}
   12a98:	bd70      	pop	{r4, r5, r6, pc}
   12a9a:	bf00      	nop
   12a9c:	20003028 	.word	0x20003028
   12aa0:	00033f23 	.word	0x00033f23

00012aa4 <commit_mod>:
	return err;
}

static void commit_mod(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		       bool vnd, bool primary, void *user_data)
{
   12aa4:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub && mod->pub->update &&
   12aa6:	6884      	ldr	r4, [r0, #8]
   12aa8:	b1e4      	cbz	r4, 12ae4 <commit_mod+0x40>
   12aaa:	6963      	ldr	r3, [r4, #20]
   12aac:	b1d3      	cbz	r3, 12ae4 <commit_mod+0x40>
   12aae:	88a3      	ldrh	r3, [r4, #4]
   12ab0:	b1c3      	cbz	r3, 12ae4 <commit_mod+0x40>
	    mod->pub->addr != BT_MESH_ADDR_UNASSIGNED) {
		int32_t ms = bt_mesh_model_pub_period_get(mod);
   12ab2:	f7ff ff91 	bl	129d8 <bt_mesh_model_pub_period_get>

		if (ms > 0) {
   12ab6:	1e06      	subs	r6, r0, #0
   12ab8:	dd14      	ble.n	12ae4 <commit_mod+0x40>
   12aba:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   12abe:	f240 30e7 	movw	r0, #999	; 0x3e7
   12ac2:	2100      	movs	r1, #0
   12ac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12ac8:	2300      	movs	r3, #0
   12aca:	fbc5 0106 	smlal	r0, r1, r5, r6
   12ace:	f7ee ff5d 	bl	198c <__aeabi_uldivmod>
   12ad2:	4602      	mov	r2, r0
   12ad4:	460b      	mov	r3, r1
   12ad6:	4804      	ldr	r0, [pc, #16]	; (12ae8 <commit_mod+0x44>)
   12ad8:	f104 0118 	add.w	r1, r4, #24
	for (int i = 0; i < ARRAY_SIZE(mod->groups); i++) {
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
			bt_mesh_lpn_group_add(mod->groups[i]);
		}
	}
}
   12adc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12ae0:	f012 bcda 	b.w	25498 <k_delayed_work_submit_to_queue>
   12ae4:	bd70      	pop	{r4, r5, r6, pc}
   12ae6:	bf00      	nop
   12ae8:	20003028 	.word	0x20003028

00012aec <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
   12aec:	4b03      	ldr	r3, [pc, #12]	; (12afc <bt_mesh_model_elem+0x10>)
   12aee:	7900      	ldrb	r0, [r0, #4]
   12af0:	681b      	ldr	r3, [r3, #0]
   12af2:	68db      	ldr	r3, [r3, #12]
}
   12af4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   12af8:	4770      	bx	lr
   12afa:	bf00      	nop
   12afc:	20003cc0 	.word	0x20003cc0

00012b00 <bt_mesh_model_get>:
{
   12b00:	b538      	push	{r3, r4, r5, lr}
	if (elem_idx >= dev_comp->elem_count) {
   12b02:	4b13      	ldr	r3, [pc, #76]	; (12b50 <bt_mesh_model_get+0x50>)
   12b04:	681b      	ldr	r3, [r3, #0]
   12b06:	689d      	ldr	r5, [r3, #8]
   12b08:	42a9      	cmp	r1, r5
{
   12b0a:	4604      	mov	r4, r0
	if (elem_idx >= dev_comp->elem_count) {
   12b0c:	d306      	bcc.n	12b1c <bt_mesh_model_get+0x1c>
		BT_ERR("Invalid element index %u", elem_idx);
   12b0e:	4811      	ldr	r0, [pc, #68]	; (12b54 <bt_mesh_model_get+0x54>)
   12b10:	460a      	mov	r2, r1
   12b12:	2145      	movs	r1, #69	; 0x45
   12b14:	f014 fedd 	bl	278d2 <printk>
		return NULL;
   12b18:	2000      	movs	r0, #0
}
   12b1a:	bd38      	pop	{r3, r4, r5, pc}
	elem = &dev_comp->elem[elem_idx];
   12b1c:	68db      	ldr	r3, [r3, #12]
   12b1e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	if (vnd) {
   12b22:	b15c      	cbz	r4, 12b3c <bt_mesh_model_get+0x3c>
		if (mod_idx >= elem->vnd_model_count) {
   12b24:	794b      	ldrb	r3, [r1, #5]
   12b26:	4293      	cmp	r3, r2
   12b28:	d802      	bhi.n	12b30 <bt_mesh_model_get+0x30>
			BT_ERR("Invalid vendor model index %u", mod_idx);
   12b2a:	2145      	movs	r1, #69	; 0x45
   12b2c:	480a      	ldr	r0, [pc, #40]	; (12b58 <bt_mesh_model_get+0x58>)
   12b2e:	e7f1      	b.n	12b14 <bt_mesh_model_get+0x14>
		return &elem->vnd_models[mod_idx];
   12b30:	68c8      	ldr	r0, [r1, #12]
   12b32:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
		return &elem->models[mod_idx];
   12b36:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12b3a:	e7ee      	b.n	12b1a <bt_mesh_model_get+0x1a>
		if (mod_idx >= elem->model_count) {
   12b3c:	790b      	ldrb	r3, [r1, #4]
   12b3e:	4293      	cmp	r3, r2
   12b40:	d802      	bhi.n	12b48 <bt_mesh_model_get+0x48>
			BT_ERR("Invalid SIG model index %u", mod_idx);
   12b42:	2145      	movs	r1, #69	; 0x45
   12b44:	4805      	ldr	r0, [pc, #20]	; (12b5c <bt_mesh_model_get+0x5c>)
   12b46:	e7e5      	b.n	12b14 <bt_mesh_model_get+0x14>
		return &elem->models[mod_idx];
   12b48:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
   12b4c:	6888      	ldr	r0, [r1, #8]
   12b4e:	e7f2      	b.n	12b36 <bt_mesh_model_get+0x36>
   12b50:	20003cc0 	.word	0x20003cc0
   12b54:	00033be2 	.word	0x00033be2
   12b58:	00033c00 	.word	0x00033c00
   12b5c:	00033c23 	.word	0x00033c23

00012b60 <mod_set>:
{
   12b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12b64:	b086      	sub	sp, #24
   12b66:	4605      	mov	r5, r0
   12b68:	4616      	mov	r6, r2
   12b6a:	461f      	mov	r7, r3
   12b6c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	if (!name) {
   12b70:	4689      	mov	r9, r1
   12b72:	b931      	cbnz	r1, 12b82 <mod_set+0x22>
		BT_ERR("Insufficient number of arguments");
   12b74:	2145      	movs	r1, #69	; 0x45
   12b76:	485a      	ldr	r0, [pc, #360]	; (12ce0 <mod_set+0x180>)
   12b78:	f014 feab 	bl	278d2 <printk>
	return -ENOENT;
   12b7c:	f06f 0401 	mvn.w	r4, #1
   12b80:	e027      	b.n	12bd2 <mod_set+0x72>
	mod_key = strtol(name, NULL, 16);
   12b82:	2210      	movs	r2, #16
   12b84:	2100      	movs	r1, #0
   12b86:	4648      	mov	r0, r9
   12b88:	f014 fd98 	bl	276bc <strtol>
	elem_idx = mod_key >> 8;
   12b8c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
   12b90:	b2c4      	uxtb	r4, r0
   12b92:	4622      	mov	r2, r4
   12b94:	4628      	mov	r0, r5
   12b96:	4651      	mov	r1, sl
   12b98:	f7ff ffb2 	bl	12b00 <bt_mesh_model_get>
	if (!mod) {
   12b9c:	4605      	mov	r5, r0
   12b9e:	b930      	cbnz	r0, 12bae <mod_set+0x4e>
		BT_ERR("Failed to get model for elem_idx %u mod_idx %u",
   12ba0:	4623      	mov	r3, r4
   12ba2:	4652      	mov	r2, sl
   12ba4:	2145      	movs	r1, #69	; 0x45
   12ba6:	484f      	ldr	r0, [pc, #316]	; (12ce4 <mod_set+0x184>)
   12ba8:	f014 fe93 	bl	278d2 <printk>
		return -ENOENT;
   12bac:	e7e6      	b.n	12b7c <mod_set+0x1c>
	len = settings_name_next(name, &next);
   12bae:	4648      	mov	r0, r9
   12bb0:	a903      	add	r1, sp, #12
   12bb2:	f015 fabb 	bl	2812c <settings_name_next>
   12bb6:	4681      	mov	r9, r0
	if (!next) {
   12bb8:	9803      	ldr	r0, [sp, #12]
   12bba:	2800      	cmp	r0, #0
   12bbc:	d0da      	beq.n	12b74 <mod_set+0x14>
	if (!strncmp(next, "bind", len)) {
   12bbe:	464a      	mov	r2, r9
   12bc0:	4949      	ldr	r1, [pc, #292]	; (12ce8 <mod_set+0x188>)
   12bc2:	f01b fd04 	bl	2e5ce <strncmp>
   12bc6:	b9a8      	cbnz	r0, 12bf4 <mod_set+0x94>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   12bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12bcc:	81ab      	strh	r3, [r5, #12]
	if (len_rd == 0) {
   12bce:	b926      	cbnz	r6, 12bda <mod_set+0x7a>
		return 0;
   12bd0:	2400      	movs	r4, #0
}
   12bd2:	4620      	mov	r0, r4
   12bd4:	b006      	add	sp, #24
   12bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	len = read_cb(cb_arg, mod->keys, sizeof(mod->keys));
   12bda:	2202      	movs	r2, #2
   12bdc:	f105 010c 	add.w	r1, r5, #12
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   12be0:	4640      	mov	r0, r8
   12be2:	47b8      	blx	r7
	if (len < 0) {
   12be4:	1e04      	subs	r4, r0, #0
   12be6:	daf3      	bge.n	12bd0 <mod_set+0x70>
		BT_ERR("Failed to read value (err %zd)", len);
   12be8:	4622      	mov	r2, r4
   12bea:	2145      	movs	r1, #69	; 0x45
   12bec:	483f      	ldr	r0, [pc, #252]	; (12cec <mod_set+0x18c>)
   12bee:	f014 fe70 	bl	278d2 <printk>
		return len;
   12bf2:	e7ee      	b.n	12bd2 <mod_set+0x72>
	if (!strncmp(next, "sub", len)) {
   12bf4:	464a      	mov	r2, r9
   12bf6:	493e      	ldr	r1, [pc, #248]	; (12cf0 <mod_set+0x190>)
   12bf8:	9803      	ldr	r0, [sp, #12]
   12bfa:	f01b fce8 	bl	2e5ce <strncmp>
   12bfe:	b930      	cbnz	r0, 12c0e <mod_set+0xae>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
   12c00:	f105 010e 	add.w	r1, r5, #14
__ssp_bos_icheck3(memset, void *, int)
   12c04:	81e8      	strh	r0, [r5, #14]
	if (len_rd == 0) {
   12c06:	2e00      	cmp	r6, #0
   12c08:	d0e2      	beq.n	12bd0 <mod_set+0x70>
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   12c0a:	2202      	movs	r2, #2
   12c0c:	e7e8      	b.n	12be0 <mod_set+0x80>
	if (!strncmp(next, "pub", len)) {
   12c0e:	464a      	mov	r2, r9
   12c10:	4938      	ldr	r1, [pc, #224]	; (12cf4 <mod_set+0x194>)
   12c12:	9803      	ldr	r0, [sp, #12]
   12c14:	f01b fcdb 	bl	2e5ce <strncmp>
   12c18:	4604      	mov	r4, r0
   12c1a:	2800      	cmp	r0, #0
   12c1c:	d13d      	bne.n	12c9a <mod_set+0x13a>
	if (!mod->pub) {
   12c1e:	68ab      	ldr	r3, [r5, #8]
   12c20:	b933      	cbnz	r3, 12c30 <mod_set+0xd0>
		BT_WARN("Model has no publication context!");
   12c22:	2157      	movs	r1, #87	; 0x57
   12c24:	4834      	ldr	r0, [pc, #208]	; (12cf8 <mod_set+0x198>)
   12c26:	f014 fe54 	bl	278d2 <printk>
		return -EINVAL;
   12c2a:	f06f 0415 	mvn.w	r4, #21
   12c2e:	e7d0      	b.n	12bd2 <mod_set+0x72>
	if (len_rd == 0) {
   12c30:	b946      	cbnz	r6, 12c44 <mod_set+0xe4>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   12c32:	685a      	ldr	r2, [r3, #4]
   12c34:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
   12c38:	605a      	str	r2, [r3, #4]
		mod->pub->ttl = 0U;
   12c3a:	689a      	ldr	r2, [r3, #8]
   12c3c:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
   12c40:	609a      	str	r2, [r3, #8]
		return 0;
   12c42:	e7c6      	b.n	12bd2 <mod_set+0x72>
	err = bt_mesh_settings_set(read_cb, cb_arg, &pub, sizeof(pub));
   12c44:	2308      	movs	r3, #8
   12c46:	aa04      	add	r2, sp, #16
   12c48:	4641      	mov	r1, r8
   12c4a:	4638      	mov	r0, r7
   12c4c:	f002 fbca 	bl	153e4 <bt_mesh_settings_set>
	if (err) {
   12c50:	4604      	mov	r4, r0
   12c52:	b120      	cbz	r0, 12c5e <mod_set+0xfe>
		BT_ERR("Failed to set \'model-pub\'");
   12c54:	2145      	movs	r1, #69	; 0x45
   12c56:	4829      	ldr	r0, [pc, #164]	; (12cfc <mod_set+0x19c>)
   12c58:	f014 fe3b 	bl	278d2 <printk>
		return err;
   12c5c:	e7b9      	b.n	12bd2 <mod_set+0x72>
	mod->pub->addr = pub.addr;
   12c5e:	68ab      	ldr	r3, [r5, #8]
   12c60:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	mod->pub->key = pub.key;
   12c64:	f8bd 1012 	ldrh.w	r1, [sp, #18]
	mod->pub->addr = pub.addr;
   12c68:	809a      	strh	r2, [r3, #4]
	mod->pub->key = pub.key;
   12c6a:	88da      	ldrh	r2, [r3, #6]
   12c6c:	f361 020b 	bfi	r2, r1, #0, #12
	mod->pub->cred = pub.cred;
   12c70:	f89d 1017 	ldrb.w	r1, [sp, #23]
	mod->pub->key = pub.key;
   12c74:	80da      	strh	r2, [r3, #6]
	mod->pub->cred = pub.cred;
   12c76:	f3c1 1100 	ubfx	r1, r1, #4, #1
   12c7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   12c7e:	f361 1204 	bfi	r2, r1, #4, #1
   12c82:	71da      	strb	r2, [r3, #7]
	mod->pub->period = pub.period;
   12c84:	f89d 2016 	ldrb.w	r2, [sp, #22]
	mod->pub->ttl = pub.ttl;
   12c88:	f8bd 1014 	ldrh.w	r1, [sp, #20]
	mod->pub->period = pub.period;
   12c8c:	729a      	strb	r2, [r3, #10]
	mod->pub->count = 0U;
   12c8e:	7ada      	ldrb	r2, [r3, #11]
	mod->pub->ttl = pub.ttl;
   12c90:	8119      	strh	r1, [r3, #8]
	mod->pub->count = 0U;
   12c92:	f360 1247 	bfi	r2, r0, #5, #3
   12c96:	72da      	strb	r2, [r3, #11]
		return mod_set_pub(mod, len_rd, read_cb, cb_arg);
   12c98:	e79b      	b.n	12bd2 <mod_set+0x72>
	if (!strncmp(next, "data", len)) {
   12c9a:	464a      	mov	r2, r9
   12c9c:	4918      	ldr	r1, [pc, #96]	; (12d00 <mod_set+0x1a0>)
   12c9e:	9803      	ldr	r0, [sp, #12]
   12ca0:	f01b fc95 	bl	2e5ce <strncmp>
   12ca4:	4604      	mov	r4, r0
   12ca6:	b9a0      	cbnz	r0, 12cd2 <mod_set+0x172>
	settings_name_next(name, &next);
   12ca8:	a904      	add	r1, sp, #16
   12caa:	9803      	ldr	r0, [sp, #12]
   12cac:	f015 fa3e 	bl	2812c <settings_name_next>
	if (mod->cb && mod->cb->settings_set) {
   12cb0:	696b      	ldr	r3, [r5, #20]
   12cb2:	2b00      	cmp	r3, #0
   12cb4:	d08d      	beq.n	12bd2 <mod_set+0x72>
   12cb6:	f8d3 9000 	ldr.w	r9, [r3]
   12cba:	f1b9 0f00 	cmp.w	r9, #0
   12cbe:	d088      	beq.n	12bd2 <mod_set+0x72>
		return mod->cb->settings_set(mod, next, len_rd,
   12cc0:	f8cd 8000 	str.w	r8, [sp]
   12cc4:	463b      	mov	r3, r7
   12cc6:	4632      	mov	r2, r6
   12cc8:	9904      	ldr	r1, [sp, #16]
   12cca:	4628      	mov	r0, r5
   12ccc:	47c8      	blx	r9
   12cce:	4604      	mov	r4, r0
		return mod_data_set(mod, next, len_rd, read_cb, cb_arg);
   12cd0:	e77f      	b.n	12bd2 <mod_set+0x72>
	BT_WARN("Unknown module key %s", next);
   12cd2:	9a03      	ldr	r2, [sp, #12]
   12cd4:	480b      	ldr	r0, [pc, #44]	; (12d04 <mod_set+0x1a4>)
   12cd6:	2157      	movs	r1, #87	; 0x57
   12cd8:	f014 fdfb 	bl	278d2 <printk>
   12cdc:	e74e      	b.n	12b7c <mod_set+0x1c>
   12cde:	bf00      	nop
   12ce0:	000316aa 	.word	0x000316aa
   12ce4:	00033ddd 	.word	0x00033ddd
   12ce8:	00033f77 	.word	0x00033f77
   12cec:	00033e11 	.word	0x00033e11
   12cf0:	00033f9a 	.word	0x00033f9a
   12cf4:	00033f9e 	.word	0x00033f9e
   12cf8:	00033e35 	.word	0x00033e35
   12cfc:	00033e5c 	.word	0x00033e5c
   12d00:	00033e7b 	.word	0x00033e7b
   12d04:	00033e80 	.word	0x00033e80

00012d08 <bt_mesh_comp_register>:
	if (!comp->elem_count) {
   12d08:	6883      	ldr	r3, [r0, #8]
{
   12d0a:	b507      	push	{r0, r1, r2, lr}
	if (!comp->elem_count) {
   12d0c:	b15b      	cbz	r3, 12d26 <bt_mesh_comp_register+0x1e>
	dev_comp = comp;
   12d0e:	4b07      	ldr	r3, [pc, #28]	; (12d2c <bt_mesh_comp_register+0x24>)
	bt_mesh_model_foreach(mod_init, &err);
   12d10:	a901      	add	r1, sp, #4
	dev_comp = comp;
   12d12:	6018      	str	r0, [r3, #0]
	err = 0;
   12d14:	2300      	movs	r3, #0
	bt_mesh_model_foreach(mod_init, &err);
   12d16:	4806      	ldr	r0, [pc, #24]	; (12d30 <bt_mesh_comp_register+0x28>)
	err = 0;
   12d18:	9301      	str	r3, [sp, #4]
	bt_mesh_model_foreach(mod_init, &err);
   12d1a:	f7ff fe23 	bl	12964 <bt_mesh_model_foreach>
	return err;
   12d1e:	9801      	ldr	r0, [sp, #4]
}
   12d20:	b003      	add	sp, #12
   12d22:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   12d26:	f06f 0015 	mvn.w	r0, #21
   12d2a:	e7f9      	b.n	12d20 <bt_mesh_comp_register+0x18>
   12d2c:	20003cc0 	.word	0x20003cc0
   12d30:	000128f9 	.word	0x000128f9

00012d34 <bt_mesh_comp_provision>:
	dev_primary_addr = addr;
   12d34:	4b08      	ldr	r3, [pc, #32]	; (12d58 <bt_mesh_comp_provision+0x24>)
{
   12d36:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
   12d38:	8018      	strh	r0, [r3, #0]
	for (i = 0; i < dev_comp->elem_count; i++) {
   12d3a:	4b08      	ldr	r3, [pc, #32]	; (12d5c <bt_mesh_comp_provision+0x28>)
   12d3c:	6819      	ldr	r1, [r3, #0]
   12d3e:	688c      	ldr	r4, [r1, #8]
   12d40:	2300      	movs	r3, #0
   12d42:	18c2      	adds	r2, r0, r3
   12d44:	42a3      	cmp	r3, r4
   12d46:	b292      	uxth	r2, r2
   12d48:	d100      	bne.n	12d4c <bt_mesh_comp_provision+0x18>
}
   12d4a:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
   12d4c:	011d      	lsls	r5, r3, #4
   12d4e:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
   12d50:	3301      	adds	r3, #1
		elem->addr = addr++;
   12d52:	5372      	strh	r2, [r6, r5]
		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
   12d54:	e7f5      	b.n	12d42 <bt_mesh_comp_provision+0xe>
   12d56:	bf00      	nop
   12d58:	200056d6 	.word	0x200056d6
   12d5c:	20003cc0 	.word	0x20003cc0

00012d60 <bt_mesh_comp_unprovision>:
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
   12d60:	4b01      	ldr	r3, [pc, #4]	; (12d68 <bt_mesh_comp_unprovision+0x8>)
   12d62:	2200      	movs	r2, #0
   12d64:	801a      	strh	r2, [r3, #0]
}
   12d66:	4770      	bx	lr
   12d68:	200056d6 	.word	0x200056d6

00012d6c <bt_mesh_primary_addr>:
}
   12d6c:	4b01      	ldr	r3, [pc, #4]	; (12d74 <bt_mesh_primary_addr+0x8>)
   12d6e:	8818      	ldrh	r0, [r3, #0]
   12d70:	4770      	bx	lr
   12d72:	bf00      	nop
   12d74:	200056d6 	.word	0x200056d6

00012d78 <bt_mesh_elem_find>:
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   12d78:	4b1b      	ldr	r3, [pc, #108]	; (12de8 <bt_mesh_elem_find+0x70>)
{
   12d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d7c:	681d      	ldr	r5, [r3, #0]
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   12d7e:	b203      	sxth	r3, r0
   12d80:	2b00      	cmp	r3, #0
{
   12d82:	4604      	mov	r4, r0
   12d84:	68ae      	ldr	r6, [r5, #8]
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   12d86:	dd27      	ble.n	12dd8 <bt_mesh_elem_find+0x60>
		index = (addr - dev_comp->elem[0].addr);
   12d88:	68ea      	ldr	r2, [r5, #12]
   12d8a:	8813      	ldrh	r3, [r2, #0]
   12d8c:	1ac0      	subs	r0, r0, r3
		if (index < dev_comp->elem_count) {
   12d8e:	b280      	uxth	r0, r0
   12d90:	42b0      	cmp	r0, r6
   12d92:	d226      	bcs.n	12de2 <bt_mesh_elem_find+0x6a>
			return &dev_comp->elem[index];
   12d94:	eb02 1000 	add.w	r0, r2, r0, lsl #4
}
   12d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[index];
   12d9a:	68e8      	ldr	r0, [r5, #12]
   12d9c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
	for (i = 0; i < elem->model_count; i++) {
   12da0:	2200      	movs	r2, #0
   12da2:	f890 c004 	ldrb.w	ip, [r0, #4]
   12da6:	4562      	cmp	r2, ip
   12da8:	db06      	blt.n	12db8 <bt_mesh_elem_find+0x40>
	for (i = 0; i < elem->vnd_model_count; i++) {
   12daa:	f890 c005 	ldrb.w	ip, [r0, #5]
   12dae:	2200      	movs	r2, #0
   12db0:	4562      	cmp	r2, ip
   12db2:	db09      	blt.n	12dc8 <bt_mesh_elem_find+0x50>
   12db4:	3301      	adds	r3, #1
   12db6:	e011      	b.n	12ddc <bt_mesh_elem_find+0x64>
		if (mod->groups[i] == addr) {
   12db8:	6881      	ldr	r1, [r0, #8]
   12dba:	fb07 1102 	mla	r1, r7, r2, r1
   12dbe:	89c9      	ldrh	r1, [r1, #14]
   12dc0:	42a1      	cmp	r1, r4
   12dc2:	d0e9      	beq.n	12d98 <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->model_count; i++) {
   12dc4:	3201      	adds	r2, #1
   12dc6:	e7ee      	b.n	12da6 <bt_mesh_elem_find+0x2e>
		if (mod->groups[i] == addr) {
   12dc8:	68c1      	ldr	r1, [r0, #12]
   12dca:	fb07 1102 	mla	r1, r7, r2, r1
   12dce:	89c9      	ldrh	r1, [r1, #14]
   12dd0:	42a1      	cmp	r1, r4
   12dd2:	d0e1      	beq.n	12d98 <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->vnd_model_count; i++) {
   12dd4:	3201      	adds	r2, #1
   12dd6:	e7eb      	b.n	12db0 <bt_mesh_elem_find+0x38>
   12dd8:	2300      	movs	r3, #0
		if (mod->groups[i] == addr) {
   12dda:	271c      	movs	r7, #28
   12ddc:	b29a      	uxth	r2, r3
	for (index = 0; index < dev_comp->elem_count; index++) {
   12dde:	42b2      	cmp	r2, r6
   12de0:	d3db      	bcc.n	12d9a <bt_mesh_elem_find+0x22>
			return NULL;
   12de2:	2000      	movs	r0, #0
   12de4:	e7d8      	b.n	12d98 <bt_mesh_elem_find+0x20>
   12de6:	bf00      	nop
   12de8:	20003cc0 	.word	0x20003cc0

00012dec <bt_mesh_elem_count>:
	return dev_comp->elem_count;
   12dec:	4b01      	ldr	r3, [pc, #4]	; (12df4 <bt_mesh_elem_count+0x8>)
   12dee:	681b      	ldr	r3, [r3, #0]
}
   12df0:	7a18      	ldrb	r0, [r3, #8]
   12df2:	4770      	bx	lr
   12df4:	20003cc0 	.word	0x20003cc0

00012df8 <bt_mesh_model_recv>:
{
   12df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
   12dfc:	680b      	ldr	r3, [r1, #0]
   12dfe:	781b      	ldrb	r3, [r3, #0]
   12e00:	099a      	lsrs	r2, r3, #6
   12e02:	2a02      	cmp	r2, #2
{
   12e04:	b085      	sub	sp, #20
   12e06:	4680      	mov	r8, r0
   12e08:	460c      	mov	r4, r1
	switch (buf->data[0] >> 6) {
   12e0a:	d01e      	beq.n	12e4a <bt_mesh_model_recv+0x52>
   12e0c:	2a03      	cmp	r2, #3
   12e0e:	d026      	beq.n	12e5e <bt_mesh_model_recv+0x66>
		if (buf->data[0] == 0x7f) {
   12e10:	2b7f      	cmp	r3, #127	; 0x7f
   12e12:	d10a      	bne.n	12e2a <bt_mesh_model_recv+0x32>
			BT_ERR("Ignoring RFU OpCode");
   12e14:	4850      	ldr	r0, [pc, #320]	; (12f58 <bt_mesh_model_recv+0x160>)
   12e16:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Too short payload for 2-octet OpCode");
   12e18:	f014 fd5b 	bl	278d2 <printk>
		BT_WARN("Unable to decode OpCode");
   12e1c:	484f      	ldr	r0, [pc, #316]	; (12f5c <bt_mesh_model_recv+0x164>)
   12e1e:	2157      	movs	r1, #87	; 0x57
}
   12e20:	b005      	add	sp, #20
   12e22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_WARN("Unable to decode OpCode");
   12e26:	f014 bd54 	b.w	278d2 <printk>
		*opcode = net_buf_simple_pull_u8(buf);
   12e2a:	4608      	mov	r0, r1
   12e2c:	f01a fb80 	bl	2d530 <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
   12e30:	4606      	mov	r6, r0
		op->func(model, &rx->ctx, buf);
   12e32:	f108 0304 	add.w	r3, r8, #4
	for (i = 0; i < dev_comp->elem_count; i++) {
   12e36:	2700      	movs	r7, #0
		op->func(model, &rx->ctx, buf);
   12e38:	9301      	str	r3, [sp, #4]
	for (i = 0; i < dev_comp->elem_count; i++) {
   12e3a:	4b49      	ldr	r3, [pc, #292]	; (12f60 <bt_mesh_model_recv+0x168>)
   12e3c:	681b      	ldr	r3, [r3, #0]
   12e3e:	689a      	ldr	r2, [r3, #8]
   12e40:	42ba      	cmp	r2, r7
   12e42:	d81c      	bhi.n	12e7e <bt_mesh_model_recv+0x86>
}
   12e44:	b005      	add	sp, #20
   12e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
   12e4a:	888b      	ldrh	r3, [r1, #4]
   12e4c:	2b01      	cmp	r3, #1
   12e4e:	d802      	bhi.n	12e56 <bt_mesh_model_recv+0x5e>
			BT_ERR("Too short payload for 2-octet OpCode");
   12e50:	2145      	movs	r1, #69	; 0x45
   12e52:	4844      	ldr	r0, [pc, #272]	; (12f64 <bt_mesh_model_recv+0x16c>)
   12e54:	e7e0      	b.n	12e18 <bt_mesh_model_recv+0x20>
		*opcode = net_buf_simple_pull_be16(buf);
   12e56:	4608      	mov	r0, r1
   12e58:	f01a fb7a 	bl	2d550 <net_buf_simple_pull_be16>
   12e5c:	e7e8      	b.n	12e30 <bt_mesh_model_recv+0x38>
		if (buf->len < 3) {
   12e5e:	888b      	ldrh	r3, [r1, #4]
   12e60:	2b02      	cmp	r3, #2
   12e62:	d802      	bhi.n	12e6a <bt_mesh_model_recv+0x72>
			BT_ERR("Too short payload for 3-octet OpCode");
   12e64:	2145      	movs	r1, #69	; 0x45
   12e66:	4840      	ldr	r0, [pc, #256]	; (12f68 <bt_mesh_model_recv+0x170>)
   12e68:	e7d6      	b.n	12e18 <bt_mesh_model_recv+0x20>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
   12e6a:	4608      	mov	r0, r1
   12e6c:	f01a fb60 	bl	2d530 <net_buf_simple_pull_u8>
   12e70:	4606      	mov	r6, r0
		*opcode |= net_buf_simple_pull_le16(buf);
   12e72:	4620      	mov	r0, r4
   12e74:	f01a fb64 	bl	2d540 <net_buf_simple_pull_le16>
   12e78:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
		return 0;
   12e7c:	e7d9      	b.n	12e32 <bt_mesh_model_recv+0x3a>
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   12e7e:	68d8      	ldr	r0, [r3, #12]
   12e80:	eb00 1307 	add.w	r3, r0, r7, lsl #4
			models = elem->vnd_models;
   12e84:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
		if (BT_MESH_MODEL_OP_LEN(opcode) < 3) {
   12e88:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
			count = elem->model_count;
   12e8c:	bf36      	itet	cc
   12e8e:	f893 c004 	ldrbcc.w	ip, [r3, #4]
			count = elem->vnd_model_count;
   12e92:	f893 c005 	ldrbcs.w	ip, [r3, #5]
			models = elem->models;
   12e96:	4615      	movcc	r5, r2
   12e98:	2100      	movs	r1, #0
	for (i = 0U; i < model_count; i++) {
   12e9a:	b2cb      	uxtb	r3, r1
   12e9c:	4563      	cmp	r3, ip
   12e9e:	d301      	bcc.n	12ea4 <bt_mesh_model_recv+0xac>
	for (i = 0; i < dev_comp->elem_count; i++) {
   12ea0:	3701      	adds	r7, #1
   12ea2:	e7ca      	b.n	12e3a <bt_mesh_model_recv+0x42>
		for (op = (*model)->op; op->func; op++) {
   12ea4:	f8d5 a010 	ldr.w	sl, [r5, #16]
   12ea8:	f8da 2008 	ldr.w	r2, [sl, #8]
   12eac:	b912      	cbnz	r2, 12eb4 <bt_mesh_model_recv+0xbc>
   12eae:	3101      	adds	r1, #1
   12eb0:	351c      	adds	r5, #28
   12eb2:	e7f2      	b.n	12e9a <bt_mesh_model_recv+0xa2>
			if (op->opcode == opcode) {
   12eb4:	f8da 2000 	ldr.w	r2, [sl]
   12eb8:	42b2      	cmp	r2, r6
   12eba:	d026      	beq.n	12f0a <bt_mesh_model_recv+0x112>
		for (op = (*model)->op; op->func; op++) {
   12ebc:	f10a 0a0c 	add.w	sl, sl, #12
   12ec0:	e7f2      	b.n	12ea8 <bt_mesh_model_recv+0xb0>
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst)) {
   12ec2:	f481 4200 	eor.w	r2, r1, #32768	; 0x8000
   12ec6:	f5b2 4ffe 	cmp.w	r2, #32512	; 0x7f00
   12eca:	d806      	bhi.n	12eda <bt_mesh_model_recv+0xe2>
		return !!bt_mesh_model_find_group(&mod, dst);
   12ecc:	a803      	add	r0, sp, #12
   12ece:	f018 fd14 	bl	2b8fa <bt_mesh_model_find_group>
   12ed2:	3000      	adds	r0, #0
   12ed4:	bf18      	it	ne
   12ed6:	2001      	movne	r0, #1
   12ed8:	e030      	b.n	12f3c <bt_mesh_model_recv+0x144>
	return mod->elem_idx == 0;
   12eda:	7928      	ldrb	r0, [r5, #4]
   12edc:	fab0 f080 	clz	r0, r0
   12ee0:	0940      	lsrs	r0, r0, #5
   12ee2:	e02b      	b.n	12f3c <bt_mesh_model_recv+0x144>
	state->offset = net_buf_simple_headroom(buf);
   12ee4:	4620      	mov	r0, r4
   12ee6:	f01a fb5d 	bl	2d5a4 <net_buf_simple_headroom>
		op->func(model, &rx->ctx, buf);
   12eea:	f8da 3008 	ldr.w	r3, [sl, #8]
   12eee:	9901      	ldr	r1, [sp, #4]
	state->len = buf->len;
   12ef0:	f8b4 b004 	ldrh.w	fp, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
   12ef4:	4681      	mov	r9, r0
   12ef6:	4622      	mov	r2, r4
   12ef8:	4628      	mov	r0, r5
   12efa:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   12efc:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
   12efe:	f8a4 b004 	strh.w	fp, [r4, #4]
	buf->data = buf->__buf + state->offset;
   12f02:	fa13 f389 	uxtah	r3, r3, r9
   12f06:	6023      	str	r3, [r4, #0]
	buf->len = state->len;
   12f08:	e7ca      	b.n	12ea0 <bt_mesh_model_recv+0xa8>
		if (!model_has_key(model, rx->ctx.app_idx)) {
   12f0a:	f8b8 2006 	ldrh.w	r2, [r8, #6]
		if (mod->keys[i] == key ||
   12f0e:	89a9      	ldrh	r1, [r5, #12]
   12f10:	428a      	cmp	r2, r1
   12f12:	d007      	beq.n	12f24 <bt_mesh_model_recv+0x12c>
   12f14:	f64f 7cfc 	movw	ip, #65532	; 0xfffc
   12f18:	4561      	cmp	r1, ip
   12f1a:	d1c1      	bne.n	12ea0 <bt_mesh_model_recv+0xa8>
		     BT_MESH_IS_DEV_KEY(key))) {
   12f1c:	3203      	adds	r2, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   12f1e:	b292      	uxth	r2, r2
   12f20:	2a01      	cmp	r2, #1
   12f22:	d8bd      	bhi.n	12ea0 <bt_mesh_model_recv+0xa8>
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
   12f24:	f8b8 100a 	ldrh.w	r1, [r8, #10]
   12f28:	9503      	str	r5, [sp, #12]
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
   12f2a:	b20a      	sxth	r2, r1
   12f2c:	2a00      	cmp	r2, #0
   12f2e:	ddc8      	ble.n	12ec2 <bt_mesh_model_recv+0xca>
		return (dev_comp->elem[mod->elem_idx].addr == dst);
   12f30:	792a      	ldrb	r2, [r5, #4]
   12f32:	0112      	lsls	r2, r2, #4
   12f34:	5a80      	ldrh	r0, [r0, r2]
   12f36:	1a43      	subs	r3, r0, r1
   12f38:	4258      	negs	r0, r3
   12f3a:	4158      	adcs	r0, r3
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
   12f3c:	2800      	cmp	r0, #0
   12f3e:	d0af      	beq.n	12ea0 <bt_mesh_model_recv+0xa8>
		if (buf->len < op->min_len) {
   12f40:	88a1      	ldrh	r1, [r4, #4]
   12f42:	f8da 2004 	ldr.w	r2, [sl, #4]
   12f46:	4291      	cmp	r1, r2
   12f48:	d2cc      	bcs.n	12ee4 <bt_mesh_model_recv+0xec>
			BT_ERR("Too short message for OpCode 0x%08x", opcode);
   12f4a:	4632      	mov	r2, r6
   12f4c:	2145      	movs	r1, #69	; 0x45
   12f4e:	4807      	ldr	r0, [pc, #28]	; (12f6c <bt_mesh_model_recv+0x174>)
   12f50:	f014 fcbf 	bl	278d2 <printk>
			continue;
   12f54:	e7a4      	b.n	12ea0 <bt_mesh_model_recv+0xa8>
   12f56:	bf00      	nop
   12f58:	00033c95 	.word	0x00033c95
   12f5c:	00033d02 	.word	0x00033d02
   12f60:	20003cc0 	.word	0x20003cc0
   12f64:	00033cae 	.word	0x00033cae
   12f68:	00033cd8 	.word	0x00033cd8
   12f6c:	00033d1f 	.word	0x00033d1f

00012f70 <bt_mesh_model_publish>:
{
   12f70:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_model_pub *pub = model->pub;
   12f72:	6884      	ldr	r4, [r0, #8]
{
   12f74:	b0b0      	sub	sp, #192	; 0xc0
		.app_idx = pub->key,
   12f76:	88e1      	ldrh	r1, [r4, #6]
		.addr = pub->addr,
   12f78:	88a6      	ldrh	r6, [r4, #4]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   12f7a:	ab0c      	add	r3, sp, #48	; 0x30
   12f7c:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
   12f80:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12f84:	9303      	str	r3, [sp, #12]
		.app_idx = pub->key,
   12f86:	f3c1 010b 	ubfx	r1, r1, #0, #12
	struct bt_mesh_msg_ctx ctx = {
   12f8a:	2300      	movs	r3, #0
   12f8c:	e9cd 3306 	strd	r3, r3, [sp, #24]
   12f90:	f8ad 101a 	strh.w	r1, [sp, #26]
		.send_rel = pub->send_rel,
   12f94:	79e1      	ldrb	r1, [r4, #7]
	struct bt_mesh_msg_ctx ctx = {
   12f96:	f8ad 3020 	strh.w	r3, [sp, #32]
		.send_rel = pub->send_rel,
   12f9a:	f3c1 1140 	ubfx	r1, r1, #5, #1
	struct bt_mesh_msg_ctx ctx = {
   12f9e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   12fa2:	7a21      	ldrb	r1, [r4, #8]
   12fa4:	f8ad 601c 	strh.w	r6, [sp, #28]
   12fa8:	aa06      	add	r2, sp, #24
	struct bt_mesh_net_tx tx = {
   12faa:	9309      	str	r3, [sp, #36]	; 0x24
   12fac:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
{
   12fb0:	4605      	mov	r5, r0
	struct bt_mesh_msg_ctx ctx = {
   12fb2:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
		.src = bt_mesh_model_elem(model)->addr,
   12fb6:	f7ff fd99 	bl	12aec <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   12fba:	8803      	ldrh	r3, [r0, #0]
   12fbc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   12fc0:	2e00      	cmp	r6, #0
   12fc2:	d041      	beq.n	13048 <bt_mesh_model_publish+0xd8>
	if (pub->msg->len + 4 > BT_MESH_TX_SDU_MAX) {
   12fc4:	6923      	ldr	r3, [r4, #16]
   12fc6:	889b      	ldrh	r3, [r3, #4]
   12fc8:	3304      	adds	r3, #4
   12fca:	2b90      	cmp	r3, #144	; 0x90
   12fcc:	dd08      	ble.n	12fe0 <bt_mesh_model_publish+0x70>
		BT_ERR("Message does not fit maximum SDU size");
   12fce:	2145      	movs	r1, #69	; 0x45
   12fd0:	481f      	ldr	r0, [pc, #124]	; (13050 <bt_mesh_model_publish+0xe0>)
   12fd2:	f014 fc7e 	bl	278d2 <printk>
		return -EMSGSIZE;
   12fd6:	f06f 0579 	mvn.w	r5, #121	; 0x79
}
   12fda:	4628      	mov	r0, r5
   12fdc:	b030      	add	sp, #192	; 0xc0
   12fde:	bd70      	pop	{r4, r5, r6, pc}
	if (pub->count) {
   12fe0:	7ae3      	ldrb	r3, [r4, #11]
   12fe2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   12fe6:	d007      	beq.n	12ff8 <bt_mesh_model_publish+0x88>
		BT_WARN("Clearing publish retransmit timer");
   12fe8:	481a      	ldr	r0, [pc, #104]	; (13054 <bt_mesh_model_publish+0xe4>)
   12fea:	2157      	movs	r1, #87	; 0x57
   12fec:	f014 fc71 	bl	278d2 <printk>
		k_delayed_work_cancel(&pub->timer);
   12ff0:	f104 0018 	add.w	r0, r4, #24
   12ff4:	f012 fac0 	bl	25578 <k_delayed_work_cancel>
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   12ff8:	6923      	ldr	r3, [r4, #16]
   12ffa:	a803      	add	r0, sp, #12
   12ffc:	889a      	ldrh	r2, [r3, #4]
   12ffe:	6819      	ldr	r1, [r3, #0]
   13000:	f01a fadc 	bl	2d5bc <net_buf_simple_add_mem>
	tx.friend_cred = pub->cred;
   13004:	79e3      	ldrb	r3, [r4, #7]
   13006:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1300a:	f3c3 1300 	ubfx	r3, r3, #4, #1
   1300e:	f363 0200 	bfi	r2, r3, #0, #1
   13012:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
   13016:	7ae3      	ldrb	r3, [r4, #11]
   13018:	7a62      	ldrb	r2, [r4, #9]
   1301a:	f362 1347 	bfi	r3, r2, #5, #3
   1301e:	72e3      	strb	r3, [r4, #11]
	err = model_send(model, &tx, true, &sdu, &pub_sent_cb, model);
   13020:	4b0d      	ldr	r3, [pc, #52]	; (13058 <bt_mesh_model_publish+0xe8>)
   13022:	9501      	str	r5, [sp, #4]
   13024:	9300      	str	r3, [sp, #0]
   13026:	4628      	mov	r0, r5
   13028:	ab03      	add	r3, sp, #12
   1302a:	2201      	movs	r2, #1
   1302c:	a909      	add	r1, sp, #36	; 0x24
   1302e:	f7ff fb65 	bl	126fc <model_send>
	if (err) {
   13032:	4605      	mov	r5, r0
   13034:	2800      	cmp	r0, #0
   13036:	d0d0      	beq.n	12fda <bt_mesh_model_publish+0x6a>
	pub->count = 0U;
   13038:	7ae3      	ldrb	r3, [r4, #11]
	publish_sent(err, pub->mod);
   1303a:	6821      	ldr	r1, [r4, #0]
	pub->count = 0U;
   1303c:	f36f 1347 	bfc	r3, #5, #3
   13040:	72e3      	strb	r3, [r4, #11]
	publish_sent(err, pub->mod);
   13042:	f7ff fcf1 	bl	12a28 <publish_sent>
   13046:	e7c8      	b.n	12fda <bt_mesh_model_publish+0x6a>
		return -EADDRNOTAVAIL;
   13048:	f06f 057c 	mvn.w	r5, #124	; 0x7c
   1304c:	e7c5      	b.n	12fda <bt_mesh_model_publish+0x6a>
   1304e:	bf00      	nop
   13050:	00033c43 	.word	0x00033c43
   13054:	00033c6e 	.word	0x00033c6e
   13058:	0002fae4 	.word	0x0002fae4

0001305c <mod_publish>:
{
   1305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
   13060:	f850 8c18 	ldr.w	r8, [r0, #-24]
{
   13064:	4604      	mov	r4, r0
   13066:	b0ae      	sub	sp, #184	; 0xb8
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
   13068:	4640      	mov	r0, r8
   1306a:	f7ff fcb5 	bl	129d8 <bt_mesh_model_pub_period_get>
	if (pub->count) {
   1306e:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
   13072:	f013 0fe0 	tst.w	r3, #224	; 0xe0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
   13076:	4607      	mov	r7, r0
	if (pub->count) {
   13078:	d05c      	beq.n	13134 <mod_publish+0xd8>
	struct bt_mesh_model_pub *pub = mod->pub;
   1307a:	f8d8 5008 	ldr.w	r5, [r8, #8]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1307e:	ab0a      	add	r3, sp, #40	; 0x28
   13080:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
   13084:	e9cd 2302 	strd	r2, r3, [sp, #8]
	struct bt_mesh_msg_ctx ctx = {
   13088:	2600      	movs	r6, #0
		.app_idx = pub->key,
   1308a:	88ea      	ldrh	r2, [r5, #6]
	struct bt_mesh_msg_ctx ctx = {
   1308c:	9606      	str	r6, [sp, #24]
   1308e:	e9cd 6604 	strd	r6, r6, [sp, #16]
		.app_idx = pub->key,
   13092:	f3c2 020b 	ubfx	r2, r2, #0, #12
	struct bt_mesh_msg_ctx ctx = {
   13096:	f8ad 2012 	strh.w	r2, [sp, #18]
   1309a:	88aa      	ldrh	r2, [r5, #4]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1309c:	9301      	str	r3, [sp, #4]
	struct bt_mesh_msg_ctx ctx = {
   1309e:	f8ad 2014 	strh.w	r2, [sp, #20]
   130a2:	ab04      	add	r3, sp, #16
   130a4:	7a2a      	ldrb	r2, [r5, #8]
   130a6:	f88d 201b 	strb.w	r2, [sp, #27]
		.src = bt_mesh_model_elem(mod)->addr,
   130aa:	4640      	mov	r0, r8
	struct bt_mesh_net_tx tx = {
   130ac:	e9cd 3608 	strd	r3, r6, [sp, #32]
   130b0:	9607      	str	r6, [sp, #28]
		.src = bt_mesh_model_elem(mod)->addr,
   130b2:	f7ff fd1b 	bl	12aec <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   130b6:	8803      	ldrh	r3, [r0, #0]
   130b8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		.friend_cred = pub->cred,
   130bc:	79eb      	ldrb	r3, [r5, #7]
	struct bt_mesh_net_tx tx = {
   130be:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		.friend_cred = pub->cred,
   130c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
   130c6:	f363 0200 	bfi	r2, r3, #0, #1
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   130ca:	692b      	ldr	r3, [r5, #16]
	struct bt_mesh_net_tx tx = {
   130cc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   130d0:	889a      	ldrh	r2, [r3, #4]
   130d2:	6819      	ldr	r1, [r3, #0]
   130d4:	a801      	add	r0, sp, #4
   130d6:	f01a fa71 	bl	2d5bc <net_buf_simple_add_mem>
	pub->count--;
   130da:	7aeb      	ldrb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
   130dc:	4a2e      	ldr	r2, [pc, #184]	; (13198 <mod_publish+0x13c>)
	pub->count--;
   130de:	33e0      	adds	r3, #224	; 0xe0
   130e0:	72eb      	strb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
   130e2:	a901      	add	r1, sp, #4
   130e4:	4643      	mov	r3, r8
   130e6:	a807      	add	r0, sp, #28
   130e8:	f7fe f9a4 	bl	11434 <bt_mesh_trans_send>
		if (err) {
   130ec:	4602      	mov	r2, r0
   130ee:	b1f0      	cbz	r0, 1312e <mod_publish+0xd2>
			BT_ERR("Failed to retransmit (err %d)", err);
   130f0:	2145      	movs	r1, #69	; 0x45
   130f2:	482a      	ldr	r0, [pc, #168]	; (1319c <mod_publish+0x140>)
   130f4:	f014 fbed 	bl	278d2 <printk>
			pub->count = 0U;
   130f8:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
   130fc:	f366 1347 	bfi	r3, r6, #5, #3
   13100:	f804 3c0d 	strb.w	r3, [r4, #-13]
			if (period_ms) {
   13104:	b19f      	cbz	r7, 1312e <mod_publish+0xd2>
						      K_MSEC(period_ms));
   13106:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
   1310a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1310e:	f240 30e7 	movw	r0, #999	; 0x3e7
   13112:	2100      	movs	r1, #0
   13114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13118:	2300      	movs	r3, #0
   1311a:	fbc5 0107 	smlal	r0, r1, r5, r7
   1311e:	f7ee fc35 	bl	198c <__aeabi_uldivmod>
   13122:	4602      	mov	r2, r0
   13124:	460b      	mov	r3, r1
   13126:	481e      	ldr	r0, [pc, #120]	; (131a0 <mod_publish+0x144>)
   13128:	4621      	mov	r1, r4
   1312a:	f012 f9b5 	bl	25498 <k_delayed_work_submit_to_queue>
}
   1312e:	b02e      	add	sp, #184	; 0xb8
   13130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!period_ms) {
   13134:	2800      	cmp	r0, #0
   13136:	d0fa      	beq.n	1312e <mod_publish+0xd2>
	__ASSERT_NO_MSG(pub->update != NULL);
   13138:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1313c:	b943      	cbnz	r3, 13150 <mod_publish+0xf4>
   1313e:	4919      	ldr	r1, [pc, #100]	; (131a4 <mod_publish+0x148>)
   13140:	4819      	ldr	r0, [pc, #100]	; (131a8 <mod_publish+0x14c>)
   13142:	22f2      	movs	r2, #242	; 0xf2
   13144:	f014 fbc5 	bl	278d2 <printk>
   13148:	21f2      	movs	r1, #242	; 0xf2
   1314a:	4816      	ldr	r0, [pc, #88]	; (131a4 <mod_publish+0x148>)
   1314c:	f014 fe3a 	bl	27dc4 <assert_post_action>
	err = pub->update(pub->mod);
   13150:	f854 3c04 	ldr.w	r3, [r4, #-4]
   13154:	f854 0c18 	ldr.w	r0, [r4, #-24]
   13158:	4798      	blx	r3
	if (err) {
   1315a:	4605      	mov	r5, r0
   1315c:	b178      	cbz	r0, 1317e <mod_publish+0x122>
		pub->period_start = k_uptime_get_32();
   1315e:	f018 fba9 	bl	2b8b4 <k_uptime_get_32>
	pub->count = 0U;
   13162:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
		pub->period_start = k_uptime_get_32();
   13166:	f844 0c0c 	str.w	r0, [r4, #-12]
	pub->count = 0U;
   1316a:	f36f 1347 	bfc	r3, #5, #3
   1316e:	f804 3c0d 	strb.w	r3, [r4, #-13]
	publish_sent(err, pub->mod);
   13172:	f854 1c18 	ldr.w	r1, [r4, #-24]
   13176:	4628      	mov	r0, r5
   13178:	f7ff fc56 	bl	12a28 <publish_sent>
   1317c:	e7d7      	b.n	1312e <mod_publish+0xd2>
	err = bt_mesh_model_publish(pub->mod);
   1317e:	f854 0c18 	ldr.w	r0, [r4, #-24]
   13182:	f7ff fef5 	bl	12f70 <bt_mesh_model_publish>
	if (err) {
   13186:	4602      	mov	r2, r0
   13188:	2800      	cmp	r0, #0
   1318a:	d0d0      	beq.n	1312e <mod_publish+0xd2>
		BT_ERR("Publishing failed (err %d)", err);
   1318c:	2145      	movs	r1, #69	; 0x45
   1318e:	4807      	ldr	r0, [pc, #28]	; (131ac <mod_publish+0x150>)
   13190:	f014 fb9f 	bl	278d2 <printk>
   13194:	e7cb      	b.n	1312e <mod_publish+0xd2>
   13196:	bf00      	nop
   13198:	0002fae4 	.word	0x0002fae4
   1319c:	00033d68 	.word	0x00033d68
   131a0:	20003028 	.word	0x20003028
   131a4:	00033d8b 	.word	0x00033d8b
   131a8:	0003067f 	.word	0x0003067f
   131ac:	00033dbd 	.word	0x00033dbd

000131b0 <bt_mesh_comp_get>:
}
   131b0:	4b01      	ldr	r3, [pc, #4]	; (131b8 <bt_mesh_comp_get+0x8>)
   131b2:	6818      	ldr	r0, [r3, #0]
   131b4:	4770      	bx	lr
   131b6:	bf00      	nop
   131b8:	20003cc0 	.word	0x20003cc0

000131bc <bt_mesh_model_pending_store>:
	bt_mesh_model_foreach(store_pending_mod, NULL);
   131bc:	2100      	movs	r1, #0
   131be:	4801      	ldr	r0, [pc, #4]	; (131c4 <bt_mesh_model_pending_store+0x8>)
   131c0:	f7ff bbd0 	b.w	12964 <bt_mesh_model_foreach>
   131c4:	000127cd 	.word	0x000127cd

000131c8 <bt_mesh_model_data_store>:
{
   131c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   131ca:	b08b      	sub	sp, #44	; 0x2c
	encode_mod_path(mod, vnd, "data", path, sizeof(path));
   131cc:	241e      	movs	r4, #30
{
   131ce:	4616      	mov	r6, r2
   131d0:	461f      	mov	r7, r3
	encode_mod_path(mod, vnd, "data", path, sizeof(path));
   131d2:	9400      	str	r4, [sp, #0]
   131d4:	ab02      	add	r3, sp, #8
   131d6:	4a12      	ldr	r2, [pc, #72]	; (13220 <bt_mesh_model_data_store+0x58>)
{
   131d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
	encode_mod_path(mod, vnd, "data", path, sizeof(path));
   131da:	f7ff fa79 	bl	126d0 <encode_mod_path>
	if (name) {
   131de:	b15e      	cbz	r6, 131f8 <bt_mesh_model_data_store+0x30>
		strcat(path, "/");
   131e0:	4622      	mov	r2, r4
   131e2:	4910      	ldr	r1, [pc, #64]	; (13224 <bt_mesh_model_data_store+0x5c>)
   131e4:	a802      	add	r0, sp, #8
   131e6:	f01b f9b1 	bl	2e54c <__strcat_chk>
		strncat(path, name, 8);
   131ea:	2208      	movs	r2, #8
   131ec:	4623      	mov	r3, r4
   131ee:	4631      	mov	r1, r6
   131f0:	eb0d 0002 	add.w	r0, sp, r2
   131f4:	f01b f9ca 	bl	2e58c <__strncat_chk>
	if (data_len) {
   131f8:	b175      	cbz	r5, 13218 <bt_mesh_model_data_store+0x50>
		err = settings_save_one(path, data, data_len);
   131fa:	462a      	mov	r2, r5
   131fc:	4639      	mov	r1, r7
   131fe:	a802      	add	r0, sp, #8
   13200:	f7f2 feac 	bl	5f5c <settings_save_one>
		err = settings_delete(path);
   13204:	4604      	mov	r4, r0
	if (err) {
   13206:	b120      	cbz	r0, 13212 <bt_mesh_model_data_store+0x4a>
		BT_ERR("Failed to store %s value", log_strdup(path));
   13208:	aa02      	add	r2, sp, #8
   1320a:	2145      	movs	r1, #69	; 0x45
   1320c:	4806      	ldr	r0, [pc, #24]	; (13228 <bt_mesh_model_data_store+0x60>)
   1320e:	f014 fb60 	bl	278d2 <printk>
}
   13212:	4620      	mov	r0, r4
   13214:	b00b      	add	sp, #44	; 0x2c
   13216:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = settings_delete(path);
   13218:	a802      	add	r0, sp, #8
   1321a:	f014 ff63 	bl	280e4 <settings_delete>
   1321e:	e7f1      	b.n	13204 <bt_mesh_model_data_store+0x3c>
   13220:	00033e7b 	.word	0x00033e7b
   13224:	00033be0 	.word	0x00033be0
   13228:	00033f7c 	.word	0x00033f7c

0001322c <bt_mesh_model_settings_commit>:

void bt_mesh_model_settings_commit(void)
{
	bt_mesh_model_foreach(commit_mod, NULL);
   1322c:	2100      	movs	r1, #0
   1322e:	4801      	ldr	r0, [pc, #4]	; (13234 <bt_mesh_model_settings_commit+0x8>)
   13230:	f7ff bb98 	b.w	12964 <bt_mesh_model_foreach>
   13234:	00012aa5 	.word	0x00012aa5

00013238 <app_key_evt>:
	mod_unbind(mod, *app_idx, true);
}

static void app_key_evt(uint16_t app_idx, uint16_t net_idx,
			enum bt_mesh_key_evt evt)
{
   13238:	b507      	push	{r0, r1, r2, lr}
	if (evt == BT_MESH_KEY_DELETED) {
   1323a:	2a01      	cmp	r2, #1
{
   1323c:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (evt == BT_MESH_KEY_DELETED) {
   13240:	d104      	bne.n	1324c <app_key_evt+0x14>
		bt_mesh_model_foreach(&mod_app_key_del, &app_idx);
   13242:	f10d 0106 	add.w	r1, sp, #6
   13246:	4803      	ldr	r0, [pc, #12]	; (13254 <app_key_evt+0x1c>)
   13248:	f7ff fb8c 	bl	12964 <bt_mesh_model_foreach>
	}
}
   1324c:	b003      	add	sp, #12
   1324e:	f85d fb04 	ldr.w	pc, [sp], #4
   13252:	bf00      	nop
   13254:	0002bc5f 	.word	0x0002bc5f

00013258 <lpn_timeout_get>:
}

static void lpn_timeout_get(struct bt_mesh_model *model,
			    struct bt_mesh_msg_ctx *ctx,
			    struct net_buf_simple *buf)
{
   13258:	b570      	push	{r4, r5, r6, lr}
   1325a:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   1325c:	ab02      	add	r3, sp, #8
{
   1325e:	4604      	mov	r4, r0
   13260:	460d      	mov	r5, r1
	struct bt_mesh_friend *frnd;
	uint16_t lpn_addr;
	int32_t timeout_ms;

	lpn_addr = net_buf_simple_pull_le16(buf);
   13262:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   13264:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   13268:	9305      	str	r3, [sp, #20]
   1326a:	e9cd 1306 	strd	r1, r3, [sp, #24]
	lpn_addr = net_buf_simple_pull_le16(buf);
   1326e:	f01a f967 	bl	2d540 <net_buf_simple_pull_le16>

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x lpn_addr 0x%02x",
	       ctx->net_idx, ctx->app_idx, ctx->addr, lpn_addr);

	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   13272:	b203      	sxth	r3, r0
   13274:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
   13276:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   13278:	dc05      	bgt.n	13286 <lpn_timeout_get+0x2e>
		BT_WARN("Invalid LPNAddress; ignoring msg");
   1327a:	481a      	ldr	r0, [pc, #104]	; (132e4 <lpn_timeout_get+0x8c>)
   1327c:	2157      	movs	r1, #87	; 0x57

send_rsp:
	net_buf_simple_add_le24(&msg, timeout_ms);

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
		BT_ERR("Unable to send LPN PollTimeout Status");
   1327e:	f014 fb28 	bl	278d2 <printk>
	}
}
   13282:	b008      	add	sp, #32
   13284:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
   13286:	f248 012e 	movw	r1, #32814	; 0x802e
   1328a:	a805      	add	r0, sp, #20
   1328c:	f018 fb3c 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
   13290:	4631      	mov	r1, r6
   13292:	a805      	add	r0, sp, #20
   13294:	f01a f9a5 	bl	2d5e2 <net_buf_simple_add_le16>
	frnd = bt_mesh_friend_find(BT_MESH_KEY_ANY, lpn_addr, true, true);
   13298:	2301      	movs	r3, #1
   1329a:	461a      	mov	r2, r3
   1329c:	4631      	mov	r1, r6
   1329e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   132a2:	f018 fef4 	bl	2c08e <bt_mesh_friend_find>
	if (!frnd) {
   132a6:	b1d8      	cbz	r0, 132e0 <lpn_timeout_get+0x88>
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   132a8:	3070      	adds	r0, #112	; 0x70
   132aa:	f012 fb3d 	bl	25928 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   132ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   132b2:	fba0 2302 	umull	r2, r3, r0, r2
   132b6:	0bd1      	lsrs	r1, r2, #15
   132b8:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
	timeout_ms = k_delayed_work_remaining_get(&frnd->timer) / 100;
   132bc:	2064      	movs	r0, #100	; 0x64
   132be:	fbb1 f1f0 	udiv	r1, r1, r0
	net_buf_simple_add_le24(&msg, timeout_ms);
   132c2:	a805      	add	r0, sp, #20
   132c4:	f01a f99f 	bl	2d606 <net_buf_simple_add_le24>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   132c8:	2300      	movs	r3, #0
   132ca:	9300      	str	r3, [sp, #0]
   132cc:	aa05      	add	r2, sp, #20
   132ce:	4629      	mov	r1, r5
   132d0:	4620      	mov	r0, r4
   132d2:	f018 fb42 	bl	2b95a <bt_mesh_model_send>
   132d6:	2800      	cmp	r0, #0
   132d8:	d0d3      	beq.n	13282 <lpn_timeout_get+0x2a>
		BT_ERR("Unable to send LPN PollTimeout Status");
   132da:	2145      	movs	r1, #69	; 0x45
   132dc:	4802      	ldr	r0, [pc, #8]	; (132e8 <lpn_timeout_get+0x90>)
   132de:	e7ce      	b.n	1327e <lpn_timeout_get+0x26>
		timeout_ms = 0;
   132e0:	4601      	mov	r1, r0
   132e2:	e7ee      	b.n	132c2 <lpn_timeout_get+0x6a>
   132e4:	0003426d 	.word	0x0003426d
   132e8:	00034293 	.word	0x00034293

000132ec <node_reset>:
{
   132ec:	b530      	push	{r4, r5, lr}
   132ee:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   132f0:	ab03      	add	r3, sp, #12
   132f2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
{
   132f6:	4604      	mov	r4, r0
   132f8:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   132fa:	a805      	add	r0, sp, #20
   132fc:	f248 014a 	movw	r1, #32842	; 0x804a
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   13300:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13304:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   13306:	f018 faff 	bl	2b908 <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1330a:	2300      	movs	r3, #0
   1330c:	9300      	str	r3, [sp, #0]
   1330e:	aa05      	add	r2, sp, #20
   13310:	4629      	mov	r1, r5
   13312:	4620      	mov	r0, r4
   13314:	f018 fb21 	bl	2b95a <bt_mesh_model_send>
   13318:	b118      	cbz	r0, 13322 <node_reset+0x36>
		BT_ERR("Unable to send Node Reset Status");
   1331a:	2145      	movs	r1, #69	; 0x45
   1331c:	4803      	ldr	r0, [pc, #12]	; (1332c <node_reset+0x40>)
   1331e:	f014 fad8 	bl	278d2 <printk>
	bt_mesh_proxy_on_idle(&proxy_idle);
   13322:	4803      	ldr	r0, [pc, #12]	; (13330 <node_reset+0x44>)
   13324:	f005 fcfa 	bl	18d1c <bt_mesh_proxy_on_idle>
}
   13328:	b009      	add	sp, #36	; 0x24
   1332a:	bd30      	pop	{r4, r5, pc}
   1332c:	00034505 	.word	0x00034505
   13330:	20001428 	.word	0x20001428

00013334 <send_mod_sub_status>:
{
   13334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13338:	b08b      	sub	sp, #44	; 0x2c
   1333a:	4698      	mov	r8, r3
   1333c:	460e      	mov	r6, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   1333e:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
   13342:	a906      	add	r1, sp, #24
{
   13344:	4691      	mov	r9, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   13346:	e9cd 3104 	strd	r3, r1, [sp, #16]
   1334a:	9103      	str	r1, [sp, #12]
{
   1334c:	4605      	mov	r5, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   1334e:	f248 011f 	movw	r1, #32799	; 0x801f
   13352:	a803      	add	r0, sp, #12
{
   13354:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   13358:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   1335a:	f018 fad5 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1335e:	4649      	mov	r1, r9
   13360:	a803      	add	r0, sp, #12
   13362:	f01a f937 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   13366:	4641      	mov	r1, r8
   13368:	a803      	add	r0, sp, #12
   1336a:	f01a f93a 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
   1336e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   13372:	a803      	add	r0, sp, #12
   13374:	f01a f935 	bl	2d5e2 <net_buf_simple_add_le16>
	if (vnd) {
   13378:	b1a7      	cbz	r7, 133a4 <send_mod_sub_status+0x70>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   1337a:	2104      	movs	r1, #4
   1337c:	a803      	add	r0, sp, #12
   1337e:	f00c fe0f 	bl	1ffa0 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13382:	6823      	ldr	r3, [r4, #0]
   13384:	6003      	str	r3, [r0, #0]
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   13386:	2300      	movs	r3, #0
   13388:	9300      	str	r3, [sp, #0]
   1338a:	aa03      	add	r2, sp, #12
   1338c:	4631      	mov	r1, r6
   1338e:	4628      	mov	r0, r5
   13390:	f018 fae3 	bl	2b95a <bt_mesh_model_send>
   13394:	b118      	cbz	r0, 1339e <send_mod_sub_status+0x6a>
		BT_ERR("Unable to send Model Subscription Status");
   13396:	2145      	movs	r1, #69	; 0x45
   13398:	4806      	ldr	r0, [pc, #24]	; (133b4 <send_mod_sub_status+0x80>)
   1339a:	f014 fa9a 	bl	278d2 <printk>
}
   1339e:	b00b      	add	sp, #44	; 0x2c
   133a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   133a4:	2102      	movs	r1, #2
   133a6:	a803      	add	r0, sp, #12
   133a8:	f00c fdfa 	bl	1ffa0 <net_buf_simple_add>
   133ac:	8823      	ldrh	r3, [r4, #0]
   133ae:	8003      	strh	r3, [r0, #0]
   133b0:	e7e9      	b.n	13386 <send_mod_sub_status+0x52>
   133b2:	bf00      	nop
   133b4:	00034674 	.word	0x00034674

000133b8 <net_key_get>:
{
   133b8:	b530      	push	{r4, r5, lr}
   133ba:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   133bc:	ab03      	add	r3, sp, #12
   133be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   133c2:	4604      	mov	r4, r0
   133c4:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   133c6:	a805      	add	r0, sp, #20
   133c8:	f248 0143 	movw	r1, #32835	; 0x8043
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   133cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   133d0:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   133d2:	f018 fa99 	bl	2b908 <bt_mesh_model_msg_init>
	count = bt_mesh_subnets_get(net_idx, ARRAY_SIZE(net_idx), 0);
   133d6:	2200      	movs	r2, #0
   133d8:	2101      	movs	r1, #1
   133da:	a802      	add	r0, sp, #8
   133dc:	f7fc fe12 	bl	10004 <bt_mesh_subnets_get>
	if (count < 0 || count > ARRAY_SIZE(net_idx)) {
   133e0:	b120      	cbz	r0, 133ec <net_key_get+0x34>
		net_buf_simple_add_le16(&msg, net_idx[i]);
   133e2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   133e6:	a805      	add	r0, sp, #20
   133e8:	f01a f8fb 	bl	2d5e2 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   133ec:	2300      	movs	r3, #0
   133ee:	9300      	str	r3, [sp, #0]
   133f0:	aa05      	add	r2, sp, #20
   133f2:	4629      	mov	r1, r5
   133f4:	4620      	mov	r0, r4
   133f6:	f018 fab0 	bl	2b95a <bt_mesh_model_send>
   133fa:	b118      	cbz	r0, 13404 <net_key_get+0x4c>
		BT_ERR("Unable to send NetKey List");
   133fc:	2145      	movs	r1, #69	; 0x45
   133fe:	4802      	ldr	r0, [pc, #8]	; (13408 <net_key_get+0x50>)
   13400:	f014 fa67 	bl	278d2 <printk>
}
   13404:	b009      	add	sp, #36	; 0x24
   13406:	bd30      	pop	{r4, r5, pc}
   13408:	00034464 	.word	0x00034464

0001340c <mod_sub_get_vnd>:
{
   1340c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13410:	4614      	mov	r4, r2
   13412:	b0ac      	sub	sp, #176	; 0xb0
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   13414:	ab08      	add	r3, sp, #32
   13416:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
{
   1341a:	4681      	mov	r9, r0
	addr = net_buf_simple_pull_le16(buf);
   1341c:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   1341e:	9305      	str	r3, [sp, #20]
   13420:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   13424:	468a      	mov	sl, r1
	addr = net_buf_simple_pull_le16(buf);
   13426:	f01a f88b 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1342a:	b203      	sxth	r3, r0
   1342c:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   1342e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   13430:	dc06      	bgt.n	13440 <mod_sub_get_vnd+0x34>
		BT_WARN("Prohibited element address");
   13432:	482d      	ldr	r0, [pc, #180]	; (134e8 <mod_sub_get_vnd+0xdc>)
   13434:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Vendor Model Subscription List");
   13436:	f014 fa4c 	bl	278d2 <printk>
}
   1343a:	b02c      	add	sp, #176	; 0xb0
   1343c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	company = net_buf_simple_pull_le16(buf);
   13440:	4620      	mov	r0, r4
   13442:	f01a f87d 	bl	2d540 <net_buf_simple_pull_le16>
   13446:	4607      	mov	r7, r0
	id = net_buf_simple_pull_le16(buf);
   13448:	4620      	mov	r0, r4
   1344a:	f01a f879 	bl	2d540 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   1344e:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
   13450:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   13452:	f248 012c 	movw	r1, #32812	; 0x802c
   13456:	4620      	mov	r0, r4
   13458:	f018 fa56 	bl	2b908 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   1345c:	4628      	mov	r0, r5
   1345e:	f7ff fc8b 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   13462:	b9d8      	cbnz	r0, 1349c <mod_sub_get_vnd+0x90>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   13464:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   13466:	4620      	mov	r0, r4
   13468:	f01a f8b4 	bl	2d5d4 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   1346c:	4629      	mov	r1, r5
   1346e:	4620      	mov	r0, r4
   13470:	f01a f8b7 	bl	2d5e2 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
   13474:	4639      	mov	r1, r7
   13476:	4620      	mov	r0, r4
   13478:	f01a f8b3 	bl	2d5e2 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   1347c:	4631      	mov	r1, r6
   1347e:	4620      	mov	r0, r4
   13480:	f01a f8af 	bl	2d5e2 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   13484:	2300      	movs	r3, #0
   13486:	9300      	str	r3, [sp, #0]
   13488:	4622      	mov	r2, r4
   1348a:	4651      	mov	r1, sl
   1348c:	4648      	mov	r0, r9
   1348e:	f018 fa64 	bl	2b95a <bt_mesh_model_send>
   13492:	2800      	cmp	r0, #0
   13494:	d0d1      	beq.n	1343a <mod_sub_get_vnd+0x2e>
		BT_ERR("Unable to send Vendor Model Subscription List");
   13496:	2145      	movs	r1, #69	; 0x45
   13498:	4814      	ldr	r0, [pc, #80]	; (134ec <mod_sub_get_vnd+0xe0>)
   1349a:	e7cc      	b.n	13436 <mod_sub_get_vnd+0x2a>
	mod = bt_mesh_model_find_vnd(elem, company, id);
   1349c:	4632      	mov	r2, r6
   1349e:	4639      	mov	r1, r7
   134a0:	f018 fa73 	bl	2b98a <bt_mesh_model_find_vnd>
	if (!mod) {
   134a4:	4680      	mov	r8, r0
   134a6:	b908      	cbnz	r0, 134ac <mod_sub_get_vnd+0xa0>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   134a8:	2102      	movs	r1, #2
   134aa:	e7dc      	b.n	13466 <mod_sub_get_vnd+0x5a>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   134ac:	2100      	movs	r1, #0
   134ae:	4620      	mov	r0, r4
   134b0:	f01a f890 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   134b4:	4629      	mov	r1, r5
   134b6:	4620      	mov	r0, r4
   134b8:	f01a f893 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
   134bc:	4639      	mov	r1, r7
   134be:	4620      	mov	r0, r4
   134c0:	f01a f88f 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   134c4:	4631      	mov	r1, r6
   134c6:	4620      	mov	r0, r4
   134c8:	f01a f88b 	bl	2d5e2 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   134cc:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
   134ce:	f898 3004 	ldrb.w	r3, [r8, #4]
   134d2:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_list_visitor,
   134d6:	4640      	mov	r0, r8
   134d8:	f018 fa82 	bl	2b9e0 <bt_mesh_model_root>
   134dc:	aa03      	add	r2, sp, #12
   134de:	4904      	ldr	r1, [pc, #16]	; (134f0 <mod_sub_get_vnd+0xe4>)
   134e0:	f018 fa7f 	bl	2b9e2 <bt_mesh_model_tree_walk>
   134e4:	e7ce      	b.n	13484 <mod_sub_get_vnd+0x78>
   134e6:	bf00      	nop
   134e8:	000343db 	.word	0x000343db
   134ec:	000343fb 	.word	0x000343fb
   134f0:	00014345 	.word	0x00014345

000134f4 <mod_sub_get>:
{
   134f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   134f8:	4614      	mov	r4, r2
   134fa:	b0ad      	sub	sp, #180	; 0xb4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   134fc:	ab08      	add	r3, sp, #32
   134fe:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
{
   13502:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
   13504:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   13506:	9305      	str	r3, [sp, #20]
   13508:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   1350c:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
   1350e:	f01a f817 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   13512:	b203      	sxth	r3, r0
   13514:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   13516:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   13518:	dc06      	bgt.n	13528 <mod_sub_get+0x34>
		BT_WARN("Prohibited element address");
   1351a:	4826      	ldr	r0, [pc, #152]	; (135b4 <mod_sub_get+0xc0>)
   1351c:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model Subscription List");
   1351e:	f014 f9d8 	bl	278d2 <printk>
}
   13522:	b02d      	add	sp, #180	; 0xb4
   13524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	id = net_buf_simple_pull_le16(buf);
   13528:	4620      	mov	r0, r4
   1352a:	f01a f809 	bl	2d540 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   1352e:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
   13530:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   13532:	f248 012a 	movw	r1, #32810	; 0x802a
   13536:	4620      	mov	r0, r4
   13538:	f018 f9e6 	bl	2b908 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   1353c:	4628      	mov	r0, r5
   1353e:	f7ff fc1b 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   13542:	b9b8      	cbnz	r0, 13574 <mod_sub_get+0x80>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   13544:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   13546:	4620      	mov	r0, r4
   13548:	f01a f844 	bl	2d5d4 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   1354c:	4629      	mov	r1, r5
   1354e:	4620      	mov	r0, r4
   13550:	f01a f847 	bl	2d5e2 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   13554:	4631      	mov	r1, r6
   13556:	4620      	mov	r0, r4
   13558:	f01a f843 	bl	2d5e2 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1355c:	2300      	movs	r3, #0
   1355e:	9300      	str	r3, [sp, #0]
   13560:	4622      	mov	r2, r4
   13562:	4649      	mov	r1, r9
   13564:	4640      	mov	r0, r8
   13566:	f018 f9f8 	bl	2b95a <bt_mesh_model_send>
   1356a:	2800      	cmp	r0, #0
   1356c:	d0d9      	beq.n	13522 <mod_sub_get+0x2e>
		BT_ERR("Unable to send Model Subscription List");
   1356e:	2145      	movs	r1, #69	; 0x45
   13570:	4811      	ldr	r0, [pc, #68]	; (135b8 <mod_sub_get+0xc4>)
   13572:	e7d4      	b.n	1351e <mod_sub_get+0x2a>
	mod = bt_mesh_model_find(elem, id);
   13574:	4631      	mov	r1, r6
   13576:	f018 fa1f 	bl	2b9b8 <bt_mesh_model_find>
	if (!mod) {
   1357a:	4607      	mov	r7, r0
   1357c:	b908      	cbnz	r0, 13582 <mod_sub_get+0x8e>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1357e:	2102      	movs	r1, #2
   13580:	e7e1      	b.n	13546 <mod_sub_get+0x52>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   13582:	2100      	movs	r1, #0
   13584:	4620      	mov	r0, r4
   13586:	f01a f825 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   1358a:	4629      	mov	r1, r5
   1358c:	4620      	mov	r0, r4
   1358e:	f01a f828 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   13592:	4631      	mov	r1, r6
   13594:	4620      	mov	r0, r4
   13596:	f01a f824 	bl	2d5e2 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   1359a:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
   1359c:	793b      	ldrb	r3, [r7, #4]
   1359e:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_list_visitor,
   135a2:	4638      	mov	r0, r7
   135a4:	f018 fa1c 	bl	2b9e0 <bt_mesh_model_root>
   135a8:	aa03      	add	r2, sp, #12
   135aa:	4904      	ldr	r1, [pc, #16]	; (135bc <mod_sub_get+0xc8>)
   135ac:	f018 fa19 	bl	2b9e2 <bt_mesh_model_tree_walk>
   135b0:	e7d4      	b.n	1355c <mod_sub_get+0x68>
   135b2:	bf00      	nop
   135b4:	000343db 	.word	0x000343db
   135b8:	000343af 	.word	0x000343af
   135bc:	00014345 	.word	0x00014345

000135c0 <relay_set>:
{
   135c0:	b530      	push	{r4, r5, lr}
   135c2:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   135c4:	ab03      	add	r3, sp, #12
{
   135c6:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   135c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   135cc:	e9cd 1306 	strd	r1, r3, [sp, #24]
   135d0:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   135d2:	6813      	ldr	r3, [r2, #0]
   135d4:	781a      	ldrb	r2, [r3, #0]
   135d6:	2a01      	cmp	r2, #1
{
   135d8:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   135da:	d905      	bls.n	135e8 <relay_set+0x28>
		BT_WARN("Invalid Relay value 0x%02x", buf->data[0]);
   135dc:	2157      	movs	r1, #87	; 0x57
   135de:	4814      	ldr	r0, [pc, #80]	; (13630 <relay_set+0x70>)
   135e0:	f014 f977 	bl	278d2 <printk>
}
   135e4:	b009      	add	sp, #36	; 0x24
   135e6:	bd30      	pop	{r4, r5, pc}
	(void)bt_mesh_relay_set(buf->data[0], buf->data[1]);
   135e8:	7859      	ldrb	r1, [r3, #1]
   135ea:	4610      	mov	r0, r2
   135ec:	f7fb f8ac 	bl	e748 <bt_mesh_relay_set>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   135f0:	f248 0128 	movw	r1, #32808	; 0x8028
   135f4:	a805      	add	r0, sp, #20
   135f6:	f018 f987 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   135fa:	f017 fc84 	bl	2af06 <bt_mesh_relay_get>
   135fe:	4601      	mov	r1, r0
   13600:	a805      	add	r0, sp, #20
   13602:	f019 ffe7 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   13606:	f7fb f8f5 	bl	e7f4 <bt_mesh_relay_retransmit_get>
   1360a:	4601      	mov	r1, r0
   1360c:	a805      	add	r0, sp, #20
   1360e:	f019 ffe1 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   13612:	2300      	movs	r3, #0
   13614:	9300      	str	r3, [sp, #0]
   13616:	aa05      	add	r2, sp, #20
   13618:	4629      	mov	r1, r5
   1361a:	4620      	mov	r0, r4
   1361c:	f018 f99d 	bl	2b95a <bt_mesh_model_send>
   13620:	2800      	cmp	r0, #0
   13622:	d0df      	beq.n	135e4 <relay_set+0x24>
		BT_ERR("Unable to send Relay Status response");
   13624:	2145      	movs	r1, #69	; 0x45
   13626:	4803      	ldr	r0, [pc, #12]	; (13634 <relay_set+0x74>)
   13628:	f014 f953 	bl	278d2 <printk>
   1362c:	e7da      	b.n	135e4 <relay_set+0x24>
   1362e:	bf00      	nop
   13630:	0003455c 	.word	0x0003455c
   13634:	0003457c 	.word	0x0003457c

00013638 <beacon_set>:
{
   13638:	b570      	push	{r4, r5, r6, lr}
   1363a:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   1363c:	ab03      	add	r3, sp, #12
{
   1363e:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   13640:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   13644:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13648:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1364a:	6823      	ldr	r3, [r4, #0]
   1364c:	781a      	ldrb	r2, [r3, #0]
   1364e:	2a01      	cmp	r2, #1
{
   13650:	4605      	mov	r5, r0
   13652:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   13654:	d905      	bls.n	13662 <beacon_set+0x2a>
		BT_WARN("Invalid Config Beacon value 0x%02x", buf->data[0]);
   13656:	2157      	movs	r1, #87	; 0x57
   13658:	4810      	ldr	r0, [pc, #64]	; (1369c <beacon_set+0x64>)
   1365a:	f014 f93a 	bl	278d2 <printk>
}
   1365e:	b008      	add	sp, #32
   13660:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_beacon_set(buf->data[0]);
   13662:	f002 0001 	and.w	r0, r2, #1
   13666:	f7fb f809 	bl	e67c <bt_mesh_beacon_set>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   1366a:	f248 010b 	movw	r1, #32779	; 0x800b
   1366e:	a805      	add	r0, sp, #20
   13670:	f018 f94a 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   13674:	6823      	ldr	r3, [r4, #0]
   13676:	a805      	add	r0, sp, #20
   13678:	7819      	ldrb	r1, [r3, #0]
   1367a:	f019 ffab 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1367e:	2300      	movs	r3, #0
   13680:	9300      	str	r3, [sp, #0]
   13682:	aa05      	add	r2, sp, #20
   13684:	4631      	mov	r1, r6
   13686:	4628      	mov	r0, r5
   13688:	f018 f967 	bl	2b95a <bt_mesh_model_send>
   1368c:	2800      	cmp	r0, #0
   1368e:	d0e6      	beq.n	1365e <beacon_set+0x26>
		BT_ERR("Unable to send Config Beacon Status response");
   13690:	2145      	movs	r1, #69	; 0x45
   13692:	4803      	ldr	r0, [pc, #12]	; (136a0 <beacon_set+0x68>)
   13694:	f014 f91d 	bl	278d2 <printk>
   13698:	e7e1      	b.n	1365e <beacon_set+0x26>
   1369a:	bf00      	nop
   1369c:	00034005 	.word	0x00034005
   136a0:	0003402d 	.word	0x0003402d

000136a4 <app_key_get>:
{
   136a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   136a6:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   136a8:	ab04      	add	r3, sp, #16
{
   136aa:	4606      	mov	r6, r0
   136ac:	460f      	mov	r7, r1
	get_idx = net_buf_simple_pull_le16(buf);
   136ae:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   136b0:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   136b4:	9307      	str	r3, [sp, #28]
   136b6:	e9cd 1308 	strd	r1, r3, [sp, #32]
	get_idx = net_buf_simple_pull_le16(buf);
   136ba:	f019 ff41 	bl	2d540 <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
   136be:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
   136c2:	4604      	mov	r4, r0
	if (get_idx > 0xfff) {
   136c4:	d306      	bcc.n	136d4 <app_key_get+0x30>
		BT_ERR("Invalid NetKeyIndex 0x%04x", get_idx);
   136c6:	4602      	mov	r2, r0
   136c8:	2145      	movs	r1, #69	; 0x45
   136ca:	481a      	ldr	r0, [pc, #104]	; (13734 <app_key_get+0x90>)
   136cc:	f014 f901 	bl	278d2 <printk>
}
   136d0:	b00b      	add	sp, #44	; 0x2c
   136d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
   136d4:	f248 0102 	movw	r1, #32770	; 0x8002
   136d8:	a807      	add	r0, sp, #28
   136da:	f018 f915 	bl	2b908 <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_exists(get_idx)) {
   136de:	4620      	mov	r0, r4
   136e0:	f017 fcdf 	bl	2b0a2 <bt_mesh_subnet_exists>
		status = STATUS_SUCCESS;
   136e4:	2800      	cmp	r0, #0
   136e6:	bf0c      	ite	eq
   136e8:	2504      	moveq	r5, #4
   136ea:	2500      	movne	r5, #0
	net_buf_simple_add_u8(&msg, status);
   136ec:	4629      	mov	r1, r5
   136ee:	a807      	add	r0, sp, #28
   136f0:	f019 ff70 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
   136f4:	4621      	mov	r1, r4
   136f6:	a807      	add	r0, sp, #28
   136f8:	f019 ff73 	bl	2d5e2 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   136fc:	b95d      	cbnz	r5, 13716 <app_key_get+0x72>
	count = bt_mesh_app_keys_get(get_idx, app_idx, ARRAY_SIZE(app_idx), 0);
   136fe:	462b      	mov	r3, r5
   13700:	2201      	movs	r2, #1
   13702:	a903      	add	r1, sp, #12
   13704:	4620      	mov	r0, r4
   13706:	f7fc fffb 	bl	10700 <bt_mesh_app_keys_get>
	if (count < 0 || count > ARRAY_SIZE(app_idx)) {
   1370a:	b120      	cbz	r0, 13716 <app_key_get+0x72>
		net_buf_simple_add_le16(&msg, app_idx[i]);
   1370c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   13710:	a807      	add	r0, sp, #28
   13712:	f019 ff66 	bl	2d5e2 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   13716:	2300      	movs	r3, #0
   13718:	9300      	str	r3, [sp, #0]
   1371a:	aa07      	add	r2, sp, #28
   1371c:	4639      	mov	r1, r7
   1371e:	4630      	mov	r0, r6
   13720:	f018 f91b 	bl	2b95a <bt_mesh_model_send>
   13724:	2800      	cmp	r0, #0
   13726:	d0d3      	beq.n	136d0 <app_key_get+0x2c>
		BT_ERR("Unable to send AppKey List");
   13728:	2145      	movs	r1, #69	; 0x45
   1372a:	4803      	ldr	r0, [pc, #12]	; (13738 <app_key_get+0x94>)
   1372c:	f014 f8d1 	bl	278d2 <printk>
   13730:	e7ce      	b.n	136d0 <app_key_get+0x2c>
   13732:	bf00      	nop
   13734:	00033fc5 	.word	0x00033fc5
   13738:	00033fe5 	.word	0x00033fe5

0001373c <mod_sub_list_clear.isra.3.part.4>:
static size_t mod_sub_list_clear(struct bt_mesh_model *mod)
   1373c:	b538      	push	{r3, r4, r5, lr}
   1373e:	4605      	mov	r5, r0
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
   13740:	8800      	ldrh	r0, [r0, #0]
   13742:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   13746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1374a:	f04f 0400 	mov.w	r4, #0
   1374e:	d303      	bcc.n	13758 <mod_sub_list_clear.isra.3.part.4+0x1c>
			if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   13750:	b108      	cbz	r0, 13756 <mod_sub_list_clear.isra.3.part.4+0x1a>
				mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   13752:	802c      	strh	r4, [r5, #0]
		clear_count++;
   13754:	2001      	movs	r0, #1
}
   13756:	bd38      	pop	{r3, r4, r5, pc}
		label_uuid = bt_mesh_va_label_get(mod->groups[i]);
   13758:	f7fd fe56 	bl	11408 <bt_mesh_va_label_get>
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   1375c:	802c      	strh	r4, [r5, #0]
		if (label_uuid) {
   1375e:	b118      	cbz	r0, 13768 <mod_sub_list_clear.isra.3.part.4+0x2c>
			bt_mesh_va_del(label_uuid, NULL);
   13760:	4621      	mov	r1, r4
   13762:	f7fd fe2d 	bl	113c0 <bt_mesh_va_del>
   13766:	e7f5      	b.n	13754 <mod_sub_list_clear.isra.3.part.4+0x18>
			BT_ERR("Label UUID not found");
   13768:	2145      	movs	r1, #69	; 0x45
   1376a:	4802      	ldr	r0, [pc, #8]	; (13774 <mod_sub_list_clear.isra.3.part.4+0x38>)
   1376c:	f014 f8b1 	bl	278d2 <printk>
   13770:	e7f0      	b.n	13754 <mod_sub_list_clear.isra.3.part.4+0x18>
   13772:	bf00      	nop
   13774:	0003442e 	.word	0x0003442e

00013778 <cfg_srv_init>:
	{ OP_HEARTBEAT_SUB_SET,        5,   heartbeat_sub_set },
	BT_MESH_MODEL_OP_END,
};

static int cfg_srv_init(struct bt_mesh_model *model)
{
   13778:	b508      	push	{r3, lr}
	if (!bt_mesh_model_in_primary(model)) {
   1377a:	7903      	ldrb	r3, [r0, #4]
   1377c:	b133      	cbz	r3, 1378c <cfg_srv_init+0x14>
		BT_ERR("Configuration Server only allowed in primary element");
   1377e:	4806      	ldr	r0, [pc, #24]	; (13798 <cfg_srv_init+0x20>)
   13780:	2145      	movs	r1, #69	; 0x45
   13782:	f014 f8a6 	bl	278d2 <printk>
   13786:	f06f 0015 	mvn.w	r0, #21
	 * device-key is allowed to access this model.
	 */
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;

	return 0;
}
   1378a:	bd08      	pop	{r3, pc}
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;
   1378c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   13790:	8182      	strh	r2, [r0, #12]
	return 0;
   13792:	4618      	mov	r0, r3
   13794:	e7f9      	b.n	1378a <cfg_srv_init+0x12>
   13796:	bf00      	nop
   13798:	0003405f 	.word	0x0003405f

0001379c <send_krp_status>:
{
   1379c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1379e:	b089      	sub	sp, #36	; 0x24
   137a0:	460d      	mov	r5, r1
   137a2:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   137a4:	a902      	add	r1, sp, #8
   137a6:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   137aa:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   137ae:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   137b0:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   137b2:	a805      	add	r0, sp, #20
   137b4:	f248 0117 	movw	r1, #32791	; 0x8017
{
   137b8:	4617      	mov	r7, r2
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   137ba:	f018 f8a5 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   137be:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   137c2:	a805      	add	r0, sp, #20
   137c4:	f019 ff06 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   137c8:	4639      	mov	r1, r7
   137ca:	a805      	add	r0, sp, #20
   137cc:	f019 ff09 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
   137d0:	4631      	mov	r1, r6
   137d2:	a805      	add	r0, sp, #20
   137d4:	f019 fefe 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   137d8:	2300      	movs	r3, #0
   137da:	9300      	str	r3, [sp, #0]
   137dc:	aa05      	add	r2, sp, #20
   137de:	4629      	mov	r1, r5
   137e0:	4620      	mov	r0, r4
   137e2:	f018 f8ba 	bl	2b95a <bt_mesh_model_send>
   137e6:	b118      	cbz	r0, 137f0 <send_krp_status+0x54>
		BT_ERR("Unable to send Key Refresh State Status");
   137e8:	2145      	movs	r1, #69	; 0x45
   137ea:	4802      	ldr	r0, [pc, #8]	; (137f4 <send_krp_status+0x58>)
   137ec:	f014 f871 	bl	278d2 <printk>
}
   137f0:	b009      	add	sp, #36	; 0x24
   137f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   137f4:	0003461a 	.word	0x0003461a

000137f8 <krp_set>:
{
   137f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   137fa:	4606      	mov	r6, r0
   137fc:	b085      	sub	sp, #20
	idx = net_buf_simple_pull_le16(buf);
   137fe:	4610      	mov	r0, r2
{
   13800:	4615      	mov	r5, r2
   13802:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
   13804:	f019 fe9c 	bl	2d540 <net_buf_simple_pull_le16>
   13808:	4604      	mov	r4, r0
	phase = net_buf_simple_pull_u8(buf);
   1380a:	4628      	mov	r0, r5
   1380c:	f019 fe90 	bl	2d530 <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
   13810:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
   13814:	f88d 000f 	strb.w	r0, [sp, #15]
	if (idx > 0xfff) {
   13818:	d306      	bcc.n	13828 <krp_set+0x30>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1381a:	480d      	ldr	r0, [pc, #52]	; (13850 <krp_set+0x58>)
   1381c:	4622      	mov	r2, r4
   1381e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid kr phase transition 0x%02x", phase);
   13820:	f014 f857 	bl	278d2 <printk>
}
   13824:	b005      	add	sp, #20
   13826:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = bt_mesh_subnet_kr_phase_set(idx, &phase);
   13828:	f10d 010f 	add.w	r1, sp, #15
   1382c:	4620      	mov	r0, r4
   1382e:	f7fc fbb9 	bl	ffa4 <bt_mesh_subnet_kr_phase_set>
	if (status == STATUS_CANNOT_UPDATE) {
   13832:	280b      	cmp	r0, #11
   13834:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13838:	d103      	bne.n	13842 <krp_set+0x4a>
		BT_ERR("Invalid kr phase transition 0x%02x", phase);
   1383a:	461a      	mov	r2, r3
   1383c:	2145      	movs	r1, #69	; 0x45
   1383e:	4805      	ldr	r0, [pc, #20]	; (13854 <krp_set+0x5c>)
   13840:	e7ee      	b.n	13820 <krp_set+0x28>
	send_krp_status(model, ctx, idx, phase, status);
   13842:	9000      	str	r0, [sp, #0]
   13844:	4622      	mov	r2, r4
   13846:	4639      	mov	r1, r7
   13848:	4630      	mov	r0, r6
   1384a:	f7ff ffa7 	bl	1379c <send_krp_status>
   1384e:	e7e9      	b.n	13824 <krp_set+0x2c>
   13850:	00033fc5 	.word	0x00033fc5
   13854:	00034245 	.word	0x00034245

00013858 <krp_get>:
{
   13858:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1385a:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   1385c:	4610      	mov	r0, r2
{
   1385e:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   13860:	f019 fe6e 	bl	2d540 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   13864:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   13868:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1386a:	d306      	bcc.n	1387a <krp_get+0x22>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1386c:	4602      	mov	r2, r0
   1386e:	2145      	movs	r1, #69	; 0x45
   13870:	4808      	ldr	r0, [pc, #32]	; (13894 <krp_get+0x3c>)
   13872:	f014 f82e 	bl	278d2 <printk>
}
   13876:	b004      	add	sp, #16
   13878:	bd70      	pop	{r4, r5, r6, pc}
	status = bt_mesh_subnet_kr_phase_get(idx, &kr_phase);
   1387a:	f10d 010f 	add.w	r1, sp, #15
   1387e:	f017 fc78 	bl	2b172 <bt_mesh_subnet_kr_phase_get>
	send_krp_status(model, ctx, idx, kr_phase, status);
   13882:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13886:	9000      	str	r0, [sp, #0]
   13888:	4622      	mov	r2, r4
   1388a:	4631      	mov	r1, r6
   1388c:	4628      	mov	r0, r5
   1388e:	f7ff ff85 	bl	1379c <send_krp_status>
   13892:	e7f0      	b.n	13876 <krp_get+0x1e>
   13894:	00033fc5 	.word	0x00033fc5

00013898 <send_node_id_status>:
{
   13898:	b5f0      	push	{r4, r5, r6, r7, lr}
   1389a:	b089      	sub	sp, #36	; 0x24
   1389c:	460d      	mov	r5, r1
   1389e:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   138a0:	a902      	add	r1, sp, #8
   138a2:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
{
   138a6:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   138a8:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   138ac:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   138ae:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   138b0:	a805      	add	r0, sp, #20
   138b2:	f248 0148 	movw	r1, #32840	; 0x8048
   138b6:	f018 f827 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   138ba:	4639      	mov	r1, r7
   138bc:	a805      	add	r0, sp, #20
   138be:	f019 fe89 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, net_idx);
   138c2:	4631      	mov	r1, r6
   138c4:	a805      	add	r0, sp, #20
   138c6:	f019 fe8c 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, node_id);
   138ca:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   138ce:	a805      	add	r0, sp, #20
   138d0:	f019 fe80 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   138d4:	2300      	movs	r3, #0
   138d6:	9300      	str	r3, [sp, #0]
   138d8:	aa05      	add	r2, sp, #20
   138da:	4629      	mov	r1, r5
   138dc:	4620      	mov	r0, r4
   138de:	f018 f83c 	bl	2b95a <bt_mesh_model_send>
   138e2:	b118      	cbz	r0, 138ec <send_node_id_status+0x54>
		BT_ERR("Unable to send Node Identity Status");
   138e4:	2145      	movs	r1, #69	; 0x45
   138e6:	4802      	ldr	r0, [pc, #8]	; (138f0 <send_node_id_status+0x58>)
   138e8:	f013 fff3 	bl	278d2 <printk>
}
   138ec:	b009      	add	sp, #36	; 0x24
   138ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   138f0:	000346c4 	.word	0x000346c4

000138f4 <node_identity_set>:
{
   138f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   138f6:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   138f8:	4610      	mov	r0, r2
{
   138fa:	460f      	mov	r7, r1
   138fc:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   138fe:	f019 fe1f 	bl	2d540 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   13902:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   13906:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   13908:	d307      	bcc.n	1391a <node_identity_set+0x26>
		BT_WARN("Invalid NetKeyIndex 0x%04x", idx);
   1390a:	4602      	mov	r2, r0
   1390c:	4814      	ldr	r0, [pc, #80]	; (13960 <node_identity_set+0x6c>)
   1390e:	2157      	movs	r1, #87	; 0x57
}
   13910:	b003      	add	sp, #12
   13912:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   13916:	f013 bfdc 	b.w	278d2 <printk>
	node_id = net_buf_simple_pull_u8(buf);
   1391a:	4628      	mov	r0, r5
   1391c:	f019 fe08 	bl	2d530 <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   13920:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   13922:	4605      	mov	r5, r0
	if (node_id != 0x00 && node_id != 0x01) {
   13924:	d903      	bls.n	1392e <node_identity_set+0x3a>
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   13926:	4602      	mov	r2, r0
   13928:	2157      	movs	r1, #87	; 0x57
   1392a:	480e      	ldr	r0, [pc, #56]	; (13964 <node_identity_set+0x70>)
   1392c:	e7f0      	b.n	13910 <node_identity_set+0x1c>
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   1392e:	4601      	mov	r1, r0
   13930:	4620      	mov	r0, r4
   13932:	f017 fc29 	bl	2b188 <bt_mesh_subnet_node_id_set>
	if (status == STATUS_INVALID_NETKEY) {
   13936:	2804      	cmp	r0, #4
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   13938:	4602      	mov	r2, r0
	if (status == STATUS_INVALID_NETKEY) {
   1393a:	d103      	bne.n	13944 <node_identity_set+0x50>
		send_node_id_status(model, ctx, status, idx,
   1393c:	2300      	movs	r3, #0
   1393e:	9300      	str	r3, [sp, #0]
	send_node_id_status(model, ctx, status, idx, node_id);
   13940:	4623      	mov	r3, r4
   13942:	e005      	b.n	13950 <node_identity_set+0x5c>
	if (status == STATUS_FEAT_NOT_SUPP) {
   13944:	280a      	cmp	r0, #10
   13946:	d109      	bne.n	1395c <node_identity_set+0x68>
		send_node_id_status(model, ctx, STATUS_SUCCESS, idx,
   13948:	2302      	movs	r3, #2
   1394a:	9300      	str	r3, [sp, #0]
   1394c:	2200      	movs	r2, #0
   1394e:	4623      	mov	r3, r4
	send_node_id_status(model, ctx, status, idx, node_id);
   13950:	4639      	mov	r1, r7
   13952:	4630      	mov	r0, r6
   13954:	f7ff ffa0 	bl	13898 <send_node_id_status>
}
   13958:	b003      	add	sp, #12
   1395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	send_node_id_status(model, ctx, status, idx, node_id);
   1395c:	9500      	str	r5, [sp, #0]
   1395e:	e7ef      	b.n	13940 <node_identity_set+0x4c>
   13960:	00033fc5 	.word	0x00033fc5
   13964:	000344e3 	.word	0x000344e3

00013968 <node_identity_get>:
{
   13968:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1396a:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   1396c:	4610      	mov	r0, r2
{
   1396e:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   13970:	f019 fde6 	bl	2d540 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   13974:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   13978:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1397a:	d306      	bcc.n	1398a <node_identity_get+0x22>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1397c:	4602      	mov	r2, r0
   1397e:	2145      	movs	r1, #69	; 0x45
   13980:	4809      	ldr	r0, [pc, #36]	; (139a8 <node_identity_get+0x40>)
   13982:	f013 ffa6 	bl	278d2 <printk>
}
   13986:	b004      	add	sp, #16
   13988:	bd70      	pop	{r4, r5, r6, pc}
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   1398a:	f10d 010f 	add.w	r1, sp, #15
   1398e:	f017 fc0f 	bl	2b1b0 <bt_mesh_subnet_node_id_get>
	send_node_id_status(model, ctx, status, idx, node_id);
   13992:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13996:	9300      	str	r3, [sp, #0]
   13998:	4602      	mov	r2, r0
   1399a:	4623      	mov	r3, r4
   1399c:	4631      	mov	r1, r6
   1399e:	4628      	mov	r0, r5
   139a0:	f7ff ff7a 	bl	13898 <send_node_id_status>
   139a4:	e7ef      	b.n	13986 <node_identity_get+0x1e>
   139a6:	bf00      	nop
   139a8:	00033fc5 	.word	0x00033fc5

000139ac <send_net_key_status>:
{
   139ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   139ae:	b089      	sub	sp, #36	; 0x24
   139b0:	460d      	mov	r5, r1
   139b2:	461f      	mov	r7, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   139b4:	a902      	add	r1, sp, #8
   139b6:	f44f 2310 	mov.w	r3, #589824	; 0x90000
   139ba:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   139be:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   139c0:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   139c2:	a805      	add	r0, sp, #20
   139c4:	f248 0144 	movw	r1, #32836	; 0x8044
{
   139c8:	4616      	mov	r6, r2
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   139ca:	f017 ff9d 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   139ce:	4639      	mov	r1, r7
   139d0:	a805      	add	r0, sp, #20
   139d2:	f019 fdff 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   139d6:	4631      	mov	r1, r6
   139d8:	a805      	add	r0, sp, #20
   139da:	f019 fe02 	bl	2d5e2 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   139de:	2300      	movs	r3, #0
   139e0:	9300      	str	r3, [sp, #0]
   139e2:	aa05      	add	r2, sp, #20
   139e4:	4629      	mov	r1, r5
   139e6:	4620      	mov	r0, r4
   139e8:	f017 ffb7 	bl	2b95a <bt_mesh_model_send>
   139ec:	b118      	cbz	r0, 139f6 <send_net_key_status+0x4a>
		BT_ERR("Unable to send NetKey Status");
   139ee:	2145      	movs	r1, #69	; 0x45
   139f0:	4802      	ldr	r0, [pc, #8]	; (139fc <send_net_key_status+0x50>)
   139f2:	f013 ff6e 	bl	278d2 <printk>
}
   139f6:	b009      	add	sp, #36	; 0x24
   139f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139fa:	bf00      	nop
   139fc:	000346a2 	.word	0x000346a2

00013a00 <net_key_del>:
{
   13a00:	b570      	push	{r4, r5, r6, lr}
   13a02:	4606      	mov	r6, r0
	del_idx = net_buf_simple_pull_le16(buf);
   13a04:	4610      	mov	r0, r2
{
   13a06:	460d      	mov	r5, r1
	del_idx = net_buf_simple_pull_le16(buf);
   13a08:	f019 fd9a 	bl	2d540 <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   13a0c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   13a10:	4604      	mov	r4, r0
	if (del_idx > 0xfff) {
   13a12:	d306      	bcc.n	13a22 <net_key_del+0x22>
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   13a14:	4602      	mov	r2, r0
   13a16:	2145      	movs	r1, #69	; 0x45
   13a18:	4809      	ldr	r0, [pc, #36]	; (13a40 <net_key_del+0x40>)
}
   13a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   13a1e:	f013 bf58 	b.w	278d2 <printk>
	if (ctx->net_idx == del_idx) {
   13a22:	882a      	ldrh	r2, [r5, #0]
   13a24:	4282      	cmp	r2, r0
   13a26:	d106      	bne.n	13a36 <net_key_del+0x36>
		send_net_key_status(model, ctx, del_idx,
   13a28:	230c      	movs	r3, #12
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   13a2a:	4629      	mov	r1, r5
   13a2c:	4630      	mov	r0, r6
}
   13a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   13a32:	f7ff bfbb 	b.w	139ac <send_net_key_status>
	bt_mesh_subnet_del(del_idx);
   13a36:	f017 fb6a 	bl	2b10e <bt_mesh_subnet_del>
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   13a3a:	2300      	movs	r3, #0
   13a3c:	4622      	mov	r2, r4
   13a3e:	e7f4      	b.n	13a2a <net_key_del+0x2a>
   13a40:	00033fc5 	.word	0x00033fc5

00013a44 <net_key_update>:
{
   13a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a48:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   13a4a:	4610      	mov	r0, r2
{
   13a4c:	460f      	mov	r7, r1
   13a4e:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   13a50:	f019 fd76 	bl	2d540 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   13a54:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   13a58:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   13a5a:	d306      	bcc.n	13a6a <net_key_update+0x26>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   13a5c:	4602      	mov	r2, r0
   13a5e:	2145      	movs	r1, #69	; 0x45
   13a60:	4807      	ldr	r0, [pc, #28]	; (13a80 <net_key_update+0x3c>)
}
   13a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   13a66:	f013 bf34 	b.w	278d2 <printk>
	status = bt_mesh_subnet_update(idx, buf->data);
   13a6a:	6829      	ldr	r1, [r5, #0]
   13a6c:	f017 fb20 	bl	2b0b0 <bt_mesh_subnet_update>
	send_net_key_status(model, ctx, idx, status);
   13a70:	4622      	mov	r2, r4
   13a72:	4603      	mov	r3, r0
   13a74:	4639      	mov	r1, r7
   13a76:	4630      	mov	r0, r6
}
   13a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, status);
   13a7c:	f7ff bf96 	b.w	139ac <send_net_key_status>
   13a80:	00033fc5 	.word	0x00033fc5

00013a84 <net_key_add>:
{
   13a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a88:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   13a8a:	4610      	mov	r0, r2
{
   13a8c:	460f      	mov	r7, r1
   13a8e:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   13a90:	f019 fd56 	bl	2d540 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   13a94:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   13a98:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   13a9a:	d306      	bcc.n	13aaa <net_key_add+0x26>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   13a9c:	4602      	mov	r2, r0
   13a9e:	2145      	movs	r1, #69	; 0x45
   13aa0:	4807      	ldr	r0, [pc, #28]	; (13ac0 <net_key_add+0x3c>)
}
   13aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   13aa6:	f013 bf14 	b.w	278d2 <printk>
	status = bt_mesh_subnet_add(idx, buf->data);
   13aaa:	6829      	ldr	r1, [r5, #0]
   13aac:	f7fc fa4e 	bl	ff4c <bt_mesh_subnet_add>
	send_net_key_status(model, ctx, idx, status);
   13ab0:	4622      	mov	r2, r4
   13ab2:	4603      	mov	r3, r0
   13ab4:	4639      	mov	r1, r7
   13ab6:	4630      	mov	r0, r6
}
   13ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, status);
   13abc:	f7ff bf76 	b.w	139ac <send_net_key_status>
   13ac0:	00033fc5 	.word	0x00033fc5

00013ac4 <send_app_key_status>:
{
   13ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ac6:	b089      	sub	sp, #36	; 0x24
   13ac8:	460d      	mov	r5, r1
   13aca:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   13acc:	a902      	add	r1, sp, #8
   13ace:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   13ad2:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   13ad6:	4617      	mov	r7, r2
   13ad8:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   13ada:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   13adc:	a805      	add	r0, sp, #20
   13ade:	f248 0103 	movw	r1, #32771	; 0x8003
   13ae2:	f017 ff11 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   13ae6:	4639      	mov	r1, r7
   13ae8:	a805      	add	r0, sp, #20
   13aea:	f019 fd73 	bl	2d5d4 <net_buf_simple_add_u8>
	key_idx_pack(&msg, net_idx, app_idx);
   13aee:	4632      	mov	r2, r6
   13af0:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   13af4:	a805      	add	r0, sp, #20
   13af6:	f017 ff8c 	bl	2ba12 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   13afa:	2300      	movs	r3, #0
   13afc:	9300      	str	r3, [sp, #0]
   13afe:	aa05      	add	r2, sp, #20
   13b00:	4629      	mov	r1, r5
   13b02:	4620      	mov	r0, r4
   13b04:	f017 ff29 	bl	2b95a <bt_mesh_model_send>
   13b08:	b118      	cbz	r0, 13b12 <send_app_key_status+0x4e>
		BT_ERR("Unable to send App Key Status response");
   13b0a:	2145      	movs	r1, #69	; 0x45
   13b0c:	4802      	ldr	r0, [pc, #8]	; (13b18 <send_app_key_status+0x54>)
   13b0e:	f013 fee0 	bl	278d2 <printk>
}
   13b12:	b009      	add	sp, #36	; 0x24
   13b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b16:	bf00      	nop
   13b18:	000345a6 	.word	0x000345a6

00013b1c <send_friend_status>:
{
   13b1c:	b530      	push	{r4, r5, lr}
   13b1e:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   13b20:	ab03      	add	r3, sp, #12
   13b22:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   13b26:	4604      	mov	r4, r0
   13b28:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   13b2a:	a805      	add	r0, sp, #20
   13b2c:	f248 0111 	movw	r1, #32785	; 0x8011
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   13b30:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13b34:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   13b36:	f017 fee7 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_friend_get());
   13b3a:	f017 f9e1 	bl	2af00 <bt_mesh_friend_get>
   13b3e:	4601      	mov	r1, r0
   13b40:	a805      	add	r0, sp, #20
   13b42:	f019 fd47 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   13b46:	2300      	movs	r3, #0
   13b48:	9300      	str	r3, [sp, #0]
   13b4a:	aa05      	add	r2, sp, #20
   13b4c:	4629      	mov	r1, r5
   13b4e:	4620      	mov	r0, r4
   13b50:	f017 ff03 	bl	2b95a <bt_mesh_model_send>
   13b54:	b118      	cbz	r0, 13b5e <send_friend_status+0x42>
		BT_ERR("Unable to send Friend Status");
   13b56:	2145      	movs	r1, #69	; 0x45
   13b58:	4802      	ldr	r0, [pc, #8]	; (13b64 <send_friend_status+0x48>)
   13b5a:	f013 feba 	bl	278d2 <printk>
}
   13b5e:	b009      	add	sp, #36	; 0x24
   13b60:	bd30      	pop	{r4, r5, pc}
   13b62:	bf00      	nop
   13b64:	000345d2 	.word	0x000345d2

00013b68 <friend_set>:
{
   13b68:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   13b6a:	6813      	ldr	r3, [r2, #0]
   13b6c:	781a      	ldrb	r2, [r3, #0]
   13b6e:	2a01      	cmp	r2, #1
{
   13b70:	4604      	mov	r4, r0
   13b72:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   13b74:	d905      	bls.n	13b82 <friend_set+0x1a>
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   13b76:	2157      	movs	r1, #87	; 0x57
   13b78:	4806      	ldr	r0, [pc, #24]	; (13b94 <friend_set+0x2c>)
}
   13b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   13b7e:	f013 bea8 	b.w	278d2 <printk>
	(void)bt_mesh_friend_set(buf->data[0]);
   13b82:	4610      	mov	r0, r2
   13b84:	f017 f9a5 	bl	2aed2 <bt_mesh_friend_set>
	send_friend_status(model, ctx);
   13b88:	4629      	mov	r1, r5
   13b8a:	4620      	mov	r0, r4
}
   13b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_friend_status(model, ctx);
   13b90:	f7ff bfc4 	b.w	13b1c <send_friend_status>
   13b94:	00034171 	.word	0x00034171

00013b98 <mod_app_get>:
{
   13b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13b9c:	4614      	mov	r4, r2
   13b9e:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(msg,
   13ba0:	ab07      	add	r3, sp, #28
   13ba2:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   13ba6:	4606      	mov	r6, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   13ba8:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg,
   13baa:	9304      	str	r3, [sp, #16]
   13bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
{
   13bb0:	460f      	mov	r7, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   13bb2:	f019 fcc5 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13bb6:	b203      	sxth	r3, r0
   13bb8:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13bba:	4681      	mov	r9, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13bbc:	dc06      	bgt.n	13bcc <mod_app_get+0x34>
		BT_WARN("Prohibited element address");
   13bbe:	4828      	ldr	r0, [pc, #160]	; (13c60 <mod_app_get+0xc8>)
   13bc0:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model Application List message");
   13bc2:	f013 fe86 	bl	278d2 <printk>
}
   13bc6:	b00d      	add	sp, #52	; 0x34
   13bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod_id = buf->data;
   13bcc:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   13bd0:	f7ff f8d2 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   13bd4:	4605      	mov	r5, r0
   13bd6:	bb58      	cbnz	r0, 13c30 <mod_app_get+0x98>
		vnd = (buf->len == 4U);
   13bd8:	88a3      	ldrh	r3, [r4, #4]
   13bda:	1f1a      	subs	r2, r3, #4
   13bdc:	4253      	negs	r3, r2
   13bde:	4153      	adcs	r3, r2
   13be0:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
   13be4:	2401      	movs	r4, #1
	if (vnd) {
   13be6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13bea:	b35b      	cbz	r3, 13c44 <mod_app_get+0xac>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
   13bec:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   13bf0:	a804      	add	r0, sp, #16
   13bf2:	f017 fe89 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   13bf6:	4621      	mov	r1, r4
   13bf8:	a804      	add	r0, sp, #16
   13bfa:	f019 fceb 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   13bfe:	4649      	mov	r1, r9
   13c00:	a804      	add	r0, sp, #16
   13c02:	f019 fcee 	bl	2d5e2 <net_buf_simple_add_le16>
	if (vnd) {
   13c06:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13c0a:	b1f3      	cbz	r3, 13c4a <mod_app_get+0xb2>
		net_buf_simple_add_mem(&msg, mod_id, 4);
   13c0c:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
   13c0e:	4641      	mov	r1, r8
   13c10:	a804      	add	r0, sp, #16
   13c12:	f019 fcd3 	bl	2d5bc <net_buf_simple_add_mem>
	if (mod) {
   13c16:	b9d5      	cbnz	r5, 13c4e <mod_app_get+0xb6>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   13c18:	2300      	movs	r3, #0
   13c1a:	9300      	str	r3, [sp, #0]
   13c1c:	aa04      	add	r2, sp, #16
   13c1e:	4639      	mov	r1, r7
   13c20:	4630      	mov	r0, r6
   13c22:	f017 fe9a 	bl	2b95a <bt_mesh_model_send>
   13c26:	2800      	cmp	r0, #0
   13c28:	d0cd      	beq.n	13bc6 <mod_app_get+0x2e>
		BT_ERR("Unable to send Model Application List message");
   13c2a:	2145      	movs	r1, #69	; 0x45
   13c2c:	480d      	ldr	r0, [pc, #52]	; (13c64 <mod_app_get+0xcc>)
   13c2e:	e7c8      	b.n	13bc2 <mod_app_get+0x2a>
	mod = get_model(elem, buf, &vnd);
   13c30:	4621      	mov	r1, r4
   13c32:	f10d 020f 	add.w	r2, sp, #15
   13c36:	f017 ff8c 	bl	2bb52 <get_model>
		status = STATUS_INVALID_MODEL;
   13c3a:	1e05      	subs	r5, r0, #0
   13c3c:	bf14      	ite	ne
   13c3e:	2400      	movne	r4, #0
   13c40:	2402      	moveq	r4, #2
   13c42:	e7d0      	b.n	13be6 <mod_app_get+0x4e>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   13c44:	f248 014c 	movw	r1, #32844	; 0x804c
   13c48:	e7d2      	b.n	13bf0 <mod_app_get+0x58>
		net_buf_simple_add_mem(&msg, mod_id, 2);
   13c4a:	2202      	movs	r2, #2
   13c4c:	e7df      	b.n	13c0e <mod_app_get+0x76>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   13c4e:	89a9      	ldrh	r1, [r5, #12]
   13c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13c54:	4299      	cmp	r1, r3
   13c56:	d0df      	beq.n	13c18 <mod_app_get+0x80>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   13c58:	a804      	add	r0, sp, #16
   13c5a:	f019 fcc2 	bl	2d5e2 <net_buf_simple_add_le16>
   13c5e:	e7db      	b.n	13c18 <mod_app_get+0x80>
   13c60:	000343db 	.word	0x000343db
   13c64:	00034329 	.word	0x00034329

00013c68 <mod_sub_del_all>:
{
   13c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c6c:	4606      	mov	r6, r0
   13c6e:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   13c70:	4610      	mov	r0, r2
{
   13c72:	460f      	mov	r7, r1
   13c74:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   13c76:	f019 fc63 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13c7a:	b203      	sxth	r3, r0
   13c7c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13c7e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13c80:	dc06      	bgt.n	13c90 <mod_sub_del_all+0x28>
		BT_WARN("Prohibited element address");
   13c82:	2157      	movs	r1, #87	; 0x57
   13c84:	4818      	ldr	r0, [pc, #96]	; (13ce8 <mod_sub_del_all+0x80>)
   13c86:	f013 fe24 	bl	278d2 <printk>
}
   13c8a:	b006      	add	sp, #24
   13c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod_id = buf->data;
   13c90:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   13c94:	f7ff f870 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   13c98:	b990      	cbnz	r0, 13cc0 <mod_sub_del_all+0x58>
		vnd = (buf->len == 4U);
   13c9a:	88a3      	ldrh	r3, [r4, #4]
   13c9c:	1f1a      	subs	r2, r3, #4
   13c9e:	4253      	negs	r3, r2
   13ca0:	4153      	adcs	r3, r2
   13ca2:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   13ca6:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr,
   13ca8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   13cac:	e9cd 8301 	strd	r8, r3, [sp, #4]
   13cb0:	2300      	movs	r3, #0
   13cb2:	9300      	str	r3, [sp, #0]
   13cb4:	4639      	mov	r1, r7
   13cb6:	462b      	mov	r3, r5
   13cb8:	4630      	mov	r0, r6
   13cba:	f7ff fb3b 	bl	13334 <send_mod_sub_status>
   13cbe:	e7e4      	b.n	13c8a <mod_sub_del_all+0x22>
	mod = get_model(elem, buf, &vnd);
   13cc0:	4621      	mov	r1, r4
   13cc2:	f10d 0217 	add.w	r2, sp, #23
   13cc6:	f017 ff44 	bl	2bb52 <get_model>
	if (!mod) {
   13cca:	4604      	mov	r4, r0
   13ccc:	b150      	cbz	r0, 13ce4 <mod_sub_del_all+0x7c>
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_clear_visitor,
   13cce:	f017 fe87 	bl	2b9e0 <bt_mesh_model_root>
   13cd2:	2200      	movs	r2, #0
   13cd4:	4905      	ldr	r1, [pc, #20]	; (13cec <mod_sub_del_all+0x84>)
   13cd6:	f017 fe84 	bl	2b9e2 <bt_mesh_model_tree_walk>
		bt_mesh_model_sub_store(mod);
   13cda:	4620      	mov	r0, r4
   13cdc:	f017 fe8b 	bl	2b9f6 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   13ce0:	2200      	movs	r2, #0
   13ce2:	e7e1      	b.n	13ca8 <mod_sub_del_all+0x40>
		status = STATUS_INVALID_MODEL;
   13ce4:	2202      	movs	r2, #2
   13ce6:	e7df      	b.n	13ca8 <mod_sub_del_all+0x40>
   13ce8:	000343db 	.word	0x000343db
   13cec:	0002ba73 	.word	0x0002ba73

00013cf0 <mod_sub_overwrite>:
{
   13cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13cf4:	4607      	mov	r7, r0
   13cf6:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   13cf8:	4610      	mov	r0, r2
{
   13cfa:	4688      	mov	r8, r1
   13cfc:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   13cfe:	f019 fc1f 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13d02:	b203      	sxth	r3, r0
   13d04:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13d06:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13d08:	dc06      	bgt.n	13d18 <mod_sub_overwrite+0x28>
		BT_WARN("Prohibited element address");
   13d0a:	2157      	movs	r1, #87	; 0x57
   13d0c:	481e      	ldr	r0, [pc, #120]	; (13d88 <mod_sub_overwrite+0x98>)
   13d0e:	f013 fde0 	bl	278d2 <printk>
}
   13d12:	b007      	add	sp, #28
   13d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   13d18:	4620      	mov	r0, r4
   13d1a:	f019 fc11 	bl	2d540 <net_buf_simple_pull_le16>
   13d1e:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   13d20:	4628      	mov	r0, r5
	mod_id = buf->data;
   13d22:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   13d26:	f7ff f827 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   13d2a:	b938      	cbnz	r0, 13d3c <mod_sub_overwrite+0x4c>
		vnd = (buf->len == 4U);
   13d2c:	88a3      	ldrh	r3, [r4, #4]
   13d2e:	1f1a      	subs	r2, r3, #4
   13d30:	4253      	negs	r3, r2
   13d32:	4153      	adcs	r3, r2
   13d34:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   13d38:	2201      	movs	r2, #1
   13d3a:	e017      	b.n	13d6c <mod_sub_overwrite+0x7c>
	mod = get_model(elem, buf, &vnd);
   13d3c:	4621      	mov	r1, r4
   13d3e:	f10d 0217 	add.w	r2, sp, #23
   13d42:	f017 ff06 	bl	2bb52 <get_model>
	if (!mod) {
   13d46:	4604      	mov	r4, r0
   13d48:	b1d8      	cbz	r0, 13d82 <mod_sub_overwrite+0x92>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   13d4a:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   13d4e:	b29b      	uxth	r3, r3
   13d50:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   13d54:	d8f0      	bhi.n	13d38 <mod_sub_overwrite+0x48>
		bt_mesh_model_tree_walk(bt_mesh_model_root(mod),
   13d56:	f017 fe43 	bl	2b9e0 <bt_mesh_model_root>
   13d5a:	2200      	movs	r2, #0
   13d5c:	490b      	ldr	r1, [pc, #44]	; (13d8c <mod_sub_overwrite+0x9c>)
   13d5e:	f017 fe40 	bl	2b9e2 <bt_mesh_model_tree_walk>
		mod->groups[0] = sub_addr;
   13d62:	81e6      	strh	r6, [r4, #14]
			bt_mesh_model_sub_store(mod);
   13d64:	4620      	mov	r0, r4
   13d66:	f017 fe46 	bl	2b9f6 <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   13d6a:	2200      	movs	r2, #0
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   13d6c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   13d70:	9600      	str	r6, [sp, #0]
   13d72:	e9cd 9301 	strd	r9, r3, [sp, #4]
   13d76:	4641      	mov	r1, r8
   13d78:	462b      	mov	r3, r5
   13d7a:	4638      	mov	r0, r7
   13d7c:	f7ff fada 	bl	13334 <send_mod_sub_status>
   13d80:	e7c7      	b.n	13d12 <mod_sub_overwrite+0x22>
		status = STATUS_INVALID_MODEL;
   13d82:	2202      	movs	r2, #2
   13d84:	e7f2      	b.n	13d6c <mod_sub_overwrite+0x7c>
   13d86:	bf00      	nop
   13d88:	000343db 	.word	0x000343db
   13d8c:	0002ba73 	.word	0x0002ba73

00013d90 <mod_sub_va_overwrite>:
{
   13d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13d94:	b086      	sub	sp, #24
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   13d96:	2300      	movs	r3, #0
{
   13d98:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   13d9a:	4610      	mov	r0, r2
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   13d9c:	f8ad 3016 	strh.w	r3, [sp, #22]
{
   13da0:	4688      	mov	r8, r1
   13da2:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   13da4:	f019 fbcc 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13da8:	b203      	sxth	r3, r0
   13daa:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13dac:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13dae:	dc06      	bgt.n	13dbe <mod_sub_va_overwrite+0x2e>
		BT_WARN("Prohibited element address");
   13db0:	2157      	movs	r1, #87	; 0x57
   13db2:	4822      	ldr	r0, [pc, #136]	; (13e3c <mod_sub_va_overwrite+0xac>)
   13db4:	f013 fd8d 	bl	278d2 <printk>
}
   13db8:	b006      	add	sp, #24
   13dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   13dbe:	2110      	movs	r1, #16
   13dc0:	4620      	mov	r0, r4
   13dc2:	f00c f8cf 	bl	1ff64 <net_buf_simple_pull_mem>
   13dc6:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
   13dc8:	4630      	mov	r0, r6
	mod_id = buf->data;
   13dca:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   13dce:	f7fe ffd3 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   13dd2:	b9a0      	cbnz	r0, 13dfe <mod_sub_va_overwrite+0x6e>
		vnd = (buf->len == 4U);
   13dd4:	88a3      	ldrh	r3, [r4, #4]
   13dd6:	1f1a      	subs	r2, r3, #4
   13dd8:	4253      	negs	r3, r2
   13dda:	4153      	adcs	r3, r2
   13ddc:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   13de0:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   13de2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   13de6:	e9cd 9301 	strd	r9, r3, [sp, #4]
   13dea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   13dee:	9300      	str	r3, [sp, #0]
   13df0:	4622      	mov	r2, r4
   13df2:	4633      	mov	r3, r6
   13df4:	4641      	mov	r1, r8
   13df6:	4638      	mov	r0, r7
   13df8:	f7ff fa9c 	bl	13334 <send_mod_sub_status>
   13dfc:	e7dc      	b.n	13db8 <mod_sub_va_overwrite+0x28>
	mod = get_model(elem, buf, &vnd);
   13dfe:	f10d 0215 	add.w	r2, sp, #21
   13e02:	4621      	mov	r1, r4
   13e04:	f017 fea5 	bl	2bb52 <get_model>
	if (!mod) {
   13e08:	4605      	mov	r5, r0
   13e0a:	b1a8      	cbz	r0, 13e38 <mod_sub_va_overwrite+0xa8>
		status = bt_mesh_va_add(label_uuid, &sub_addr);
   13e0c:	f10d 0116 	add.w	r1, sp, #22
   13e10:	4650      	mov	r0, sl
   13e12:	f7fd fa93 	bl	1133c <bt_mesh_va_add>
		if (status == STATUS_SUCCESS) {
   13e16:	4604      	mov	r4, r0
   13e18:	2800      	cmp	r0, #0
   13e1a:	d1e2      	bne.n	13de2 <mod_sub_va_overwrite+0x52>
			bt_mesh_model_tree_walk(bt_mesh_model_root(mod),
   13e1c:	4628      	mov	r0, r5
   13e1e:	f017 fddf 	bl	2b9e0 <bt_mesh_model_root>
   13e22:	4622      	mov	r2, r4
   13e24:	4906      	ldr	r1, [pc, #24]	; (13e40 <mod_sub_va_overwrite+0xb0>)
   13e26:	f017 fddc 	bl	2b9e2 <bt_mesh_model_tree_walk>
			mod->groups[0] = sub_addr;
   13e2a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   13e2e:	81eb      	strh	r3, [r5, #14]
				bt_mesh_model_sub_store(mod);
   13e30:	4628      	mov	r0, r5
   13e32:	f017 fde0 	bl	2b9f6 <bt_mesh_model_sub_store>
   13e36:	e7d4      	b.n	13de2 <mod_sub_va_overwrite+0x52>
		status = STATUS_INVALID_MODEL;
   13e38:	2402      	movs	r4, #2
   13e3a:	e7d2      	b.n	13de2 <mod_sub_va_overwrite+0x52>
   13e3c:	000343db 	.word	0x000343db
   13e40:	0002ba73 	.word	0x0002ba73

00013e44 <mod_sub_va_del>:
{
   13e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13e48:	4606      	mov	r6, r0
   13e4a:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   13e4c:	4610      	mov	r0, r2
{
   13e4e:	460f      	mov	r7, r1
   13e50:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   13e52:	f019 fb75 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13e56:	b203      	sxth	r3, r0
   13e58:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13e5a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13e5c:	dc06      	bgt.n	13e6c <mod_sub_va_del+0x28>
		BT_WARN("Prohibited element address");
   13e5e:	2157      	movs	r1, #87	; 0x57
   13e60:	4824      	ldr	r0, [pc, #144]	; (13ef4 <mod_sub_va_del+0xb0>)
   13e62:	f013 fd36 	bl	278d2 <printk>
}
   13e66:	b007      	add	sp, #28
   13e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   13e6c:	2110      	movs	r1, #16
   13e6e:	4620      	mov	r0, r4
   13e70:	f00c f878 	bl	1ff64 <net_buf_simple_pull_mem>
   13e74:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
   13e76:	4628      	mov	r0, r5
	mod_id = buf->data;
   13e78:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   13e7c:	f7fe ff7c 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   13e80:	b9b0      	cbnz	r0, 13eb0 <mod_sub_va_del+0x6c>
		vnd = (buf->len == 4U);
   13e82:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   13e84:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   13e86:	1f19      	subs	r1, r3, #4
   13e88:	424b      	negs	r3, r1
   13e8a:	414b      	adcs	r3, r1
   13e8c:	f88d 3011 	strb.w	r3, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   13e90:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   13e94:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   13e96:	f89d 3011 	ldrb.w	r3, [sp, #17]
   13e9a:	e9cd 8301 	strd	r8, r3, [sp, #4]
   13e9e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   13ea2:	9300      	str	r3, [sp, #0]
   13ea4:	4639      	mov	r1, r7
   13ea6:	462b      	mov	r3, r5
   13ea8:	4630      	mov	r0, r6
   13eaa:	f7ff fa43 	bl	13334 <send_mod_sub_status>
   13eae:	e7da      	b.n	13e66 <mod_sub_va_del+0x22>
	mod = get_model(elem, buf, &vnd);
   13eb0:	f10d 0211 	add.w	r2, sp, #17
   13eb4:	4621      	mov	r1, r4
   13eb6:	f017 fe4c 	bl	2bb52 <get_model>
   13eba:	9005      	str	r0, [sp, #20]
	if (!mod) {
   13ebc:	b918      	cbnz	r0, 13ec6 <mod_sub_va_del+0x82>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   13ebe:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   13ec2:	2202      	movs	r2, #2
		goto send_status;
   13ec4:	e7e7      	b.n	13e96 <mod_sub_va_del+0x52>
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   13ec6:	f10d 0112 	add.w	r1, sp, #18
   13eca:	4648      	mov	r0, r9
   13ecc:	f7fd fa78 	bl	113c0 <bt_mesh_va_del>
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   13ed0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   13ed4:	4602      	mov	r2, r0
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   13ed6:	2900      	cmp	r1, #0
   13ed8:	d0dd      	beq.n	13e96 <mod_sub_va_del+0x52>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   13eda:	a805      	add	r0, sp, #20
   13edc:	f017 fd0d 	bl	2b8fa <bt_mesh_model_find_group>
	if (match) {
   13ee0:	b130      	cbz	r0, 13ef0 <mod_sub_va_del+0xac>
		*match = BT_MESH_ADDR_UNASSIGNED;
   13ee2:	2400      	movs	r4, #0
   13ee4:	8004      	strh	r4, [r0, #0]
			bt_mesh_model_sub_store(mod);
   13ee6:	9805      	ldr	r0, [sp, #20]
   13ee8:	f017 fd85 	bl	2b9f6 <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   13eec:	4622      	mov	r2, r4
   13eee:	e7d2      	b.n	13e96 <mod_sub_va_del+0x52>
		status = STATUS_CANNOT_REMOVE;
   13ef0:	220c      	movs	r2, #12
   13ef2:	e7d0      	b.n	13e96 <mod_sub_va_del+0x52>
   13ef4:	000343db 	.word	0x000343db

00013ef8 <mod_sub_del>:
{
   13ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13efc:	4607      	mov	r7, r0
   13efe:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   13f00:	4610      	mov	r0, r2
{
   13f02:	4688      	mov	r8, r1
   13f04:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   13f06:	f019 fb1b 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13f0a:	b203      	sxth	r3, r0
   13f0c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13f0e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13f10:	dc06      	bgt.n	13f20 <mod_sub_del+0x28>
		BT_WARN("Prohibited element address");
   13f12:	2157      	movs	r1, #87	; 0x57
   13f14:	481f      	ldr	r0, [pc, #124]	; (13f94 <mod_sub_del+0x9c>)
   13f16:	f013 fcdc 	bl	278d2 <printk>
}
   13f1a:	b007      	add	sp, #28
   13f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   13f20:	4620      	mov	r0, r4
   13f22:	f019 fb0d 	bl	2d540 <net_buf_simple_pull_le16>
   13f26:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   13f28:	4628      	mov	r0, r5
	mod_id = buf->data;
   13f2a:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   13f2e:	f7fe ff23 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   13f32:	b940      	cbnz	r0, 13f46 <mod_sub_del+0x4e>
		vnd = (buf->len == 4U);
   13f34:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   13f36:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   13f38:	1f1a      	subs	r2, r3, #4
   13f3a:	4253      	negs	r3, r2
   13f3c:	4153      	adcs	r3, r2
   13f3e:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   13f42:	2201      	movs	r2, #1
   13f44:	e017      	b.n	13f76 <mod_sub_del+0x7e>
	mod = get_model(elem, buf, &vnd);
   13f46:	f10d 0213 	add.w	r2, sp, #19
   13f4a:	4621      	mov	r1, r4
   13f4c:	f017 fe01 	bl	2bb52 <get_model>
   13f50:	9005      	str	r0, [sp, #20]
	if (!mod) {
   13f52:	b1d8      	cbz	r0, 13f8c <mod_sub_del+0x94>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   13f54:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   13f58:	b29b      	uxth	r3, r3
   13f5a:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   13f5e:	d8f0      	bhi.n	13f42 <mod_sub_del+0x4a>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   13f60:	4631      	mov	r1, r6
   13f62:	a805      	add	r0, sp, #20
   13f64:	f017 fcc9 	bl	2b8fa <bt_mesh_model_find_group>
	if (match) {
   13f68:	2400      	movs	r4, #0
   13f6a:	b188      	cbz	r0, 13f90 <mod_sub_del+0x98>
		*match = BT_MESH_ADDR_UNASSIGNED;
   13f6c:	8004      	strh	r4, [r0, #0]
			bt_mesh_model_sub_store(mod);
   13f6e:	9805      	ldr	r0, [sp, #20]
   13f70:	f017 fd41 	bl	2b9f6 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   13f74:	4622      	mov	r2, r4
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   13f76:	f89d 3013 	ldrb.w	r3, [sp, #19]
   13f7a:	9600      	str	r6, [sp, #0]
   13f7c:	e9cd 9301 	strd	r9, r3, [sp, #4]
   13f80:	4641      	mov	r1, r8
   13f82:	462b      	mov	r3, r5
   13f84:	4638      	mov	r0, r7
   13f86:	f7ff f9d5 	bl	13334 <send_mod_sub_status>
   13f8a:	e7c6      	b.n	13f1a <mod_sub_del+0x22>
		status = STATUS_INVALID_MODEL;
   13f8c:	2202      	movs	r2, #2
   13f8e:	e7f2      	b.n	13f76 <mod_sub_del+0x7e>
	status = STATUS_SUCCESS;
   13f90:	4602      	mov	r2, r0
   13f92:	e7f0      	b.n	13f76 <mod_sub_del+0x7e>
   13f94:	000343db 	.word	0x000343db

00013f98 <mod_sub_va_add>:
{
   13f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13f9c:	4607      	mov	r7, r0
   13f9e:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   13fa0:	4610      	mov	r0, r2
{
   13fa2:	4688      	mov	r8, r1
   13fa4:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   13fa6:	f019 facb 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13faa:	b203      	sxth	r3, r0
   13fac:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13fae:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13fb0:	dc06      	bgt.n	13fc0 <mod_sub_va_add+0x28>
		BT_WARN("Prohibited element address");
   13fb2:	2157      	movs	r1, #87	; 0x57
   13fb4:	482b      	ldr	r0, [pc, #172]	; (14064 <mod_sub_va_add+0xcc>)
   13fb6:	f013 fc8c 	bl	278d2 <printk>
}
   13fba:	b007      	add	sp, #28
   13fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   13fc0:	2110      	movs	r1, #16
   13fc2:	4620      	mov	r0, r4
   13fc4:	f00b ffce 	bl	1ff64 <net_buf_simple_pull_mem>
   13fc8:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   13fca:	4628      	mov	r0, r5
	mod_id = buf->data;
   13fcc:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   13fd0:	f7fe fed2 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   13fd4:	b9b8      	cbnz	r0, 14006 <mod_sub_va_add+0x6e>
		vnd = (buf->len == 4U);
   13fd6:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   13fd8:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   13fda:	1f19      	subs	r1, r3, #4
   13fdc:	424b      	negs	r3, r1
   13fde:	414b      	adcs	r3, r1
   13fe0:	f88d 3011 	strb.w	r3, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   13fe4:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   13fe8:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   13fea:	f89d 3011 	ldrb.w	r3, [sp, #17]
   13fee:	e9cd 9301 	strd	r9, r3, [sp, #4]
   13ff2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   13ff6:	9300      	str	r3, [sp, #0]
   13ff8:	4622      	mov	r2, r4
   13ffa:	462b      	mov	r3, r5
   13ffc:	4641      	mov	r1, r8
   13ffe:	4638      	mov	r0, r7
   14000:	f7ff f998 	bl	13334 <send_mod_sub_status>
   14004:	e7d9      	b.n	13fba <mod_sub_va_add+0x22>
	mod = get_model(elem, buf, &vnd);
   14006:	f10d 0211 	add.w	r2, sp, #17
   1400a:	4621      	mov	r1, r4
   1400c:	f017 fda1 	bl	2bb52 <get_model>
   14010:	9005      	str	r0, [sp, #20]
	if (!mod) {
   14012:	b918      	cbnz	r0, 1401c <mod_sub_va_add+0x84>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   14014:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   14018:	2402      	movs	r4, #2
		goto send_status;
   1401a:	e7e6      	b.n	13fea <mod_sub_va_add+0x52>
	status = bt_mesh_va_add(label_uuid, &sub_addr);
   1401c:	f10d 0112 	add.w	r1, sp, #18
   14020:	4630      	mov	r0, r6
   14022:	f7fd f98b 	bl	1133c <bt_mesh_va_add>
	if (status != STATUS_SUCCESS) {
   14026:	4604      	mov	r4, r0
   14028:	2800      	cmp	r0, #0
   1402a:	d1de      	bne.n	13fea <mod_sub_va_add+0x52>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   1402c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   14030:	a805      	add	r0, sp, #20
   14032:	f017 fc62 	bl	2b8fa <bt_mesh_model_find_group>
		bt_mesh_va_del(label_uuid, NULL);
   14036:	4621      	mov	r1, r4
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   14038:	b118      	cbz	r0, 14042 <mod_sub_va_add+0xaa>
		bt_mesh_va_del(label_uuid, NULL);
   1403a:	4630      	mov	r0, r6
   1403c:	f7fd f9c0 	bl	113c0 <bt_mesh_va_del>
		goto send_status;
   14040:	e7d3      	b.n	13fea <mod_sub_va_add+0x52>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   14042:	a805      	add	r0, sp, #20
   14044:	f017 fc59 	bl	2b8fa <bt_mesh_model_find_group>
	if (!entry) {
   14048:	b928      	cbnz	r0, 14056 <mod_sub_va_add+0xbe>
		bt_mesh_va_del(label_uuid, NULL);
   1404a:	4621      	mov	r1, r4
   1404c:	4630      	mov	r0, r6
   1404e:	f7fd f9b7 	bl	113c0 <bt_mesh_va_del>
		status = STATUS_INSUFF_RESOURCES;
   14052:	2405      	movs	r4, #5
		goto send_status;
   14054:	e7c9      	b.n	13fea <mod_sub_va_add+0x52>
	*entry = sub_addr;
   14056:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1405a:	8003      	strh	r3, [r0, #0]
		bt_mesh_model_sub_store(mod);
   1405c:	9805      	ldr	r0, [sp, #20]
   1405e:	f017 fcca 	bl	2b9f6 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   14062:	e7c2      	b.n	13fea <mod_sub_va_add+0x52>
   14064:	000343db 	.word	0x000343db

00014068 <mod_sub_add>:
{
   14068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1406c:	4607      	mov	r7, r0
   1406e:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   14070:	4610      	mov	r0, r2
{
   14072:	4688      	mov	r8, r1
   14074:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   14076:	f019 fa63 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1407a:	b203      	sxth	r3, r0
   1407c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1407e:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   14080:	dc06      	bgt.n	14090 <mod_sub_add+0x28>
		BT_WARN("Prohibited element address");
   14082:	2157      	movs	r1, #87	; 0x57
   14084:	4821      	ldr	r0, [pc, #132]	; (1410c <mod_sub_add+0xa4>)
   14086:	f013 fc24 	bl	278d2 <printk>
}
   1408a:	b007      	add	sp, #28
   1408c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   14090:	4620      	mov	r0, r4
   14092:	f019 fa55 	bl	2d540 <net_buf_simple_pull_le16>
   14096:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   14098:	4630      	mov	r0, r6
	mod_id = buf->data;
   1409a:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1409e:	f7fe fe6b 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   140a2:	b940      	cbnz	r0, 140b6 <mod_sub_add+0x4e>
		vnd = (buf->len == 4U);
   140a4:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   140a6:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   140a8:	1f1a      	subs	r2, r3, #4
   140aa:	4253      	negs	r3, r2
   140ac:	4153      	adcs	r3, r2
   140ae:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   140b2:	2201      	movs	r2, #1
   140b4:	e01d      	b.n	140f2 <mod_sub_add+0x8a>
	mod = get_model(elem, buf, &vnd);
   140b6:	f10d 0213 	add.w	r2, sp, #19
   140ba:	4621      	mov	r1, r4
   140bc:	f017 fd49 	bl	2bb52 <get_model>
   140c0:	9005      	str	r0, [sp, #20]
	if (!mod) {
   140c2:	b1a8      	cbz	r0, 140f0 <mod_sub_add+0x88>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   140c4:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   140c8:	b29b      	uxth	r3, r3
   140ca:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   140ce:	d8f0      	bhi.n	140b2 <mod_sub_add+0x4a>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   140d0:	4629      	mov	r1, r5
   140d2:	a805      	add	r0, sp, #20
   140d4:	f017 fc11 	bl	2b8fa <bt_mesh_model_find_group>
   140d8:	b940      	cbnz	r0, 140ec <mod_sub_add+0x84>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   140da:	4601      	mov	r1, r0
   140dc:	a805      	add	r0, sp, #20
   140de:	f017 fc0c 	bl	2b8fa <bt_mesh_model_find_group>
	if (!entry) {
   140e2:	b188      	cbz	r0, 14108 <mod_sub_add+0xa0>
	*entry = sub_addr;
   140e4:	8005      	strh	r5, [r0, #0]
		bt_mesh_model_sub_store(mod);
   140e6:	9805      	ldr	r0, [sp, #20]
   140e8:	f017 fc85 	bl	2b9f6 <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   140ec:	2200      	movs	r2, #0
   140ee:	e000      	b.n	140f2 <mod_sub_add+0x8a>
		status = STATUS_INVALID_MODEL;
   140f0:	2202      	movs	r2, #2
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   140f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   140f6:	9500      	str	r5, [sp, #0]
   140f8:	e9cd 9301 	strd	r9, r3, [sp, #4]
   140fc:	4641      	mov	r1, r8
   140fe:	4633      	mov	r3, r6
   14100:	4638      	mov	r0, r7
   14102:	f7ff f917 	bl	13334 <send_mod_sub_status>
   14106:	e7c0      	b.n	1408a <mod_sub_add+0x22>
		status = STATUS_INSUFF_RESOURCES;
   14108:	2205      	movs	r2, #5
   1410a:	e7f2      	b.n	140f2 <mod_sub_add+0x8a>
   1410c:	000343db 	.word	0x000343db

00014110 <mod_app_bind>:
{
   14110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14114:	4614      	mov	r4, r2
   14116:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   14118:	ab06      	add	r3, sp, #24
   1411a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   1411e:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   14120:	4620      	mov	r0, r4
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   14122:	9303      	str	r3, [sp, #12]
   14124:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   14128:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   1412a:	f019 fa09 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1412e:	b203      	sxth	r3, r0
   14130:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   14132:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   14134:	dc06      	bgt.n	14144 <mod_app_bind+0x34>
		BT_WARN("Prohibited element address");
   14136:	4829      	ldr	r0, [pc, #164]	; (141dc <mod_app_bind+0xcc>)
   14138:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model App Bind Status response");
   1413a:	f013 fbca 	bl	278d2 <printk>
}
   1413e:	b00b      	add	sp, #44	; 0x2c
   14140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
   14144:	4620      	mov	r0, r4
   14146:	f019 f9fb 	bl	2d540 <net_buf_simple_pull_le16>
   1414a:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   1414c:	4630      	mov	r0, r6
	mod_id = buf->data;
   1414e:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   14152:	f7fe fe11 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   14156:	b9d8      	cbnz	r0, 14190 <mod_app_bind+0x80>
		vnd = (buf->len == 4U);
   14158:	88a3      	ldrh	r3, [r4, #4]
   1415a:	1f1a      	subs	r2, r3, #4
   1415c:	4253      	negs	r3, r2
   1415e:	4153      	adcs	r3, r2
   14160:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   14164:	2301      	movs	r3, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   14166:	e9cd 3900 	strd	r3, r9, [sp]
   1416a:	4632      	mov	r2, r6
   1416c:	462b      	mov	r3, r5
   1416e:	f89d 100b 	ldrb.w	r1, [sp, #11]
   14172:	a803      	add	r0, sp, #12
   14174:	f017 fd0e 	bl	2bb94 <create_mod_app_status.isra.13>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   14178:	2300      	movs	r3, #0
   1417a:	9300      	str	r3, [sp, #0]
   1417c:	aa03      	add	r2, sp, #12
   1417e:	4641      	mov	r1, r8
   14180:	4638      	mov	r0, r7
   14182:	f017 fbea 	bl	2b95a <bt_mesh_model_send>
   14186:	2800      	cmp	r0, #0
   14188:	d0d9      	beq.n	1413e <mod_app_bind+0x2e>
		BT_ERR("Unable to send Model App Bind Status response");
   1418a:	2145      	movs	r1, #69	; 0x45
   1418c:	4814      	ldr	r0, [pc, #80]	; (141e0 <mod_app_bind+0xd0>)
   1418e:	e7d4      	b.n	1413a <mod_app_bind+0x2a>
	mod = get_model(elem, buf, &vnd);
   14190:	4621      	mov	r1, r4
   14192:	f10d 020b 	add.w	r2, sp, #11
   14196:	f017 fcdc 	bl	2bb52 <get_model>
	if (!mod) {
   1419a:	4604      	mov	r4, r0
   1419c:	b1c0      	cbz	r0, 141d0 <mod_app_bind+0xc0>
	if (model == mod) {
   1419e:	42b8      	cmp	r0, r7
   141a0:	d105      	bne.n	141ae <mod_app_bind+0x9e>
		BT_ERR("Client tried to bind AppKey to Configuration Model");
   141a2:	2145      	movs	r1, #69	; 0x45
   141a4:	480f      	ldr	r0, [pc, #60]	; (141e4 <mod_app_bind+0xd4>)
   141a6:	f013 fb94 	bl	278d2 <printk>
		status = STATUS_CANNOT_BIND;
   141aa:	230d      	movs	r3, #13
		goto send_status;
   141ac:	e7db      	b.n	14166 <mod_app_bind+0x56>
	if (!bt_mesh_app_key_exists(key_idx)) {
   141ae:	4628      	mov	r0, r5
   141b0:	f7fc fa9e 	bl	106f0 <bt_mesh_app_key_exists>
   141b4:	b170      	cbz	r0, 141d4 <mod_app_bind+0xc4>
		if (model->keys[i] == key_idx) {
   141b6:	89a3      	ldrh	r3, [r4, #12]
   141b8:	429d      	cmp	r5, r3
   141ba:	d007      	beq.n	141cc <mod_app_bind+0xbc>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   141bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   141c0:	4293      	cmp	r3, r2
   141c2:	d109      	bne.n	141d8 <mod_app_bind+0xc8>
			model->keys[i] = key_idx;
   141c4:	81a5      	strh	r5, [r4, #12]
				bt_mesh_model_bind_store(model);
   141c6:	4620      	mov	r0, r4
   141c8:	f017 fc0e 	bl	2b9e8 <bt_mesh_model_bind_store>
			return STATUS_SUCCESS;
   141cc:	2300      	movs	r3, #0
   141ce:	e7ca      	b.n	14166 <mod_app_bind+0x56>
		status = STATUS_INVALID_MODEL;
   141d0:	2302      	movs	r3, #2
   141d2:	e7c8      	b.n	14166 <mod_app_bind+0x56>
		return STATUS_INVALID_APPKEY;
   141d4:	2303      	movs	r3, #3
   141d6:	e7c6      	b.n	14166 <mod_app_bind+0x56>
	return STATUS_INSUFF_RESOURCES;
   141d8:	2305      	movs	r3, #5
   141da:	e7c4      	b.n	14166 <mod_app_bind+0x56>
   141dc:	000343db 	.word	0x000343db
   141e0:	000342f6 	.word	0x000342f6
   141e4:	000342be 	.word	0x000342be

000141e8 <send_mod_pub_status.isra.15>:
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   141e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141ec:	b08b      	sub	sp, #44	; 0x2c
   141ee:	460f      	mov	r7, r1
   141f0:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
   141f4:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
   141f8:	9c15      	ldr	r4, [sp, #84]	; 0x54
   141fa:	9d17      	ldr	r5, [sp, #92]	; 0x5c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   141fc:	a905      	add	r1, sp, #20
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   141fe:	469a      	mov	sl, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   14200:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
   14204:	e9cd 3103 	strd	r3, r1, [sp, #12]
   14208:	9102      	str	r1, [sp, #8]
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   1420a:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   1420c:	f248 0119 	movw	r1, #32793	; 0x8019
   14210:	a802      	add	r0, sp, #8
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   14212:	4693      	mov	fp, r2
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   14214:	f017 fb78 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   14218:	4649      	mov	r1, r9
   1421a:	a802      	add	r0, sp, #8
   1421c:	f019 f9da 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   14220:	4659      	mov	r1, fp
   14222:	a802      	add	r0, sp, #8
   14224:	f019 f9dd 	bl	2d5e2 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   14228:	f1b9 0f00 	cmp.w	r9, #0
   1422c:	d01f      	beq.n	1426e <send_mod_pub_status.isra.15+0x86>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
   1422e:	2107      	movs	r1, #7
   14230:	a802      	add	r0, sp, #8
   14232:	f00b feb5 	bl	1ffa0 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   14236:	2300      	movs	r3, #0
   14238:	6003      	str	r3, [r0, #0]
   1423a:	f8c0 3003 	str.w	r3, [r0, #3]
	if (vnd) {
   1423e:	f1b8 0f00 	cmp.w	r8, #0
   14242:	d034      	beq.n	142ae <send_mod_pub_status.isra.15+0xc6>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   14244:	2104      	movs	r1, #4
   14246:	a802      	add	r0, sp, #8
   14248:	f00b feaa 	bl	1ffa0 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1424c:	682b      	ldr	r3, [r5, #0]
   1424e:	6003      	str	r3, [r0, #0]
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   14250:	2300      	movs	r3, #0
   14252:	9300      	str	r3, [sp, #0]
   14254:	aa02      	add	r2, sp, #8
   14256:	4639      	mov	r1, r7
   14258:	4630      	mov	r0, r6
   1425a:	f017 fb7e 	bl	2b95a <bt_mesh_model_send>
   1425e:	b118      	cbz	r0, 14268 <send_mod_pub_status.isra.15+0x80>
		BT_ERR("Unable to send Model Publication Status");
   14260:	2145      	movs	r1, #69	; 0x45
   14262:	4816      	ldr	r0, [pc, #88]	; (142bc <send_mod_pub_status.isra.15+0xd4>)
   14264:	f013 fb35 	bl	278d2 <printk>
}
   14268:	b00b      	add	sp, #44	; 0x2c
   1426a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
   1426e:	4651      	mov	r1, sl
   14270:	a802      	add	r0, sp, #8
   14272:	f019 f9b6 	bl	2d5e2 <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (uint16_t)mod->pub->cred << 12;
   14276:	6823      	ldr	r3, [r4, #0]
   14278:	79d9      	ldrb	r1, [r3, #7]
   1427a:	88db      	ldrh	r3, [r3, #6]
   1427c:	f3c1 1100 	ubfx	r1, r1, #4, #1
   14280:	f3c3 030b 	ubfx	r3, r3, #0, #12
		net_buf_simple_add_le16(&msg, idx_cred);
   14284:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
   14288:	a802      	add	r0, sp, #8
   1428a:	f019 f9aa 	bl	2d5e2 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
   1428e:	6823      	ldr	r3, [r4, #0]
   14290:	a802      	add	r0, sp, #8
   14292:	7a19      	ldrb	r1, [r3, #8]
   14294:	f019 f99e 	bl	2d5d4 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
   14298:	6823      	ldr	r3, [r4, #0]
   1429a:	a802      	add	r0, sp, #8
   1429c:	7a99      	ldrb	r1, [r3, #10]
   1429e:	f019 f999 	bl	2d5d4 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
   142a2:	6823      	ldr	r3, [r4, #0]
   142a4:	a802      	add	r0, sp, #8
   142a6:	7a59      	ldrb	r1, [r3, #9]
   142a8:	f019 f994 	bl	2d5d4 <net_buf_simple_add_u8>
   142ac:	e7c7      	b.n	1423e <send_mod_pub_status.isra.15+0x56>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   142ae:	2102      	movs	r1, #2
   142b0:	a802      	add	r0, sp, #8
   142b2:	f00b fe75 	bl	1ffa0 <net_buf_simple_add>
   142b6:	882b      	ldrh	r3, [r5, #0]
   142b8:	8003      	strh	r3, [r0, #0]
   142ba:	e7c9      	b.n	14250 <send_mod_pub_status.isra.15+0x68>
   142bc:	00034647 	.word	0x00034647

000142c0 <mod_pub_get>:
{
   142c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142c4:	4605      	mov	r5, r0
   142c6:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   142c8:	4610      	mov	r0, r2
{
   142ca:	460e      	mov	r6, r1
   142cc:	4690      	mov	r8, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   142ce:	f019 f937 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   142d2:	b203      	sxth	r3, r0
   142d4:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   142d6:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   142d8:	dc06      	bgt.n	142e8 <mod_pub_get+0x28>
		BT_WARN("Prohibited element address");
   142da:	2157      	movs	r1, #87	; 0x57
   142dc:	4818      	ldr	r0, [pc, #96]	; (14340 <mod_pub_get+0x80>)
   142de:	f013 faf8 	bl	278d2 <printk>
}
   142e2:	b006      	add	sp, #24
   142e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod_id = buf->data;
   142e8:	f8d8 7000 	ldr.w	r7, [r8]
	elem = bt_mesh_elem_find(elem_addr);
   142ec:	f7fe fd44 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   142f0:	4602      	mov	r2, r0
   142f2:	b948      	cbnz	r0, 14308 <mod_pub_get+0x48>
		vnd = (buf->len == 4U);
   142f4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   142f8:	1f19      	subs	r1, r3, #4
   142fa:	424b      	negs	r3, r1
   142fc:	414b      	adcs	r3, r1
   142fe:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   14302:	2101      	movs	r1, #1
	uint16_t elem_addr, pub_addr = 0U;
   14304:	4613      	mov	r3, r2
   14306:	e00a      	b.n	1431e <mod_pub_get+0x5e>
	mod = get_model(elem, buf, &vnd);
   14308:	f10d 0217 	add.w	r2, sp, #23
   1430c:	4641      	mov	r1, r8
   1430e:	f017 fc20 	bl	2bb52 <get_model>
	if (!mod) {
   14312:	4602      	mov	r2, r0
   14314:	b180      	cbz	r0, 14338 <mod_pub_get+0x78>
	if (!mod->pub) {
   14316:	6883      	ldr	r3, [r0, #8]
   14318:	b183      	cbz	r3, 1433c <mod_pub_get+0x7c>
	pub_addr = mod->pub->addr;
   1431a:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
   1431c:	2100      	movs	r1, #0
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   1431e:	3208      	adds	r2, #8
   14320:	9201      	str	r2, [sp, #4]
   14322:	f89d 2017 	ldrb.w	r2, [sp, #23]
   14326:	9200      	str	r2, [sp, #0]
   14328:	e9cd 1702 	strd	r1, r7, [sp, #8]
   1432c:	4622      	mov	r2, r4
   1432e:	4631      	mov	r1, r6
   14330:	4628      	mov	r0, r5
   14332:	f7ff ff59 	bl	141e8 <send_mod_pub_status.isra.15>
   14336:	e7d4      	b.n	142e2 <mod_pub_get+0x22>
		status = STATUS_INVALID_MODEL;
   14338:	2102      	movs	r1, #2
   1433a:	e7e3      	b.n	14304 <mod_pub_get+0x44>
		status = STATUS_NVAL_PUB_PARAM;
   1433c:	2107      	movs	r1, #7
   1433e:	e7ee      	b.n	1431e <mod_pub_get+0x5e>
   14340:	000343db 	.word	0x000343db

00014344 <mod_sub_list_visitor>:
{
   14344:	b538      	push	{r3, r4, r5, lr}
   14346:	4615      	mov	r5, r2
	if (mod->elem_idx != visit->elem_idx) {
   14348:	7902      	ldrb	r2, [r0, #4]
   1434a:	882b      	ldrh	r3, [r5, #0]
   1434c:	429a      	cmp	r2, r3
{
   1434e:	4604      	mov	r4, r0
	if (mod->elem_idx != visit->elem_idx) {
   14350:	d110      	bne.n	14374 <mod_sub_list_visitor+0x30>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   14352:	89c3      	ldrh	r3, [r0, #14]
   14354:	b173      	cbz	r3, 14374 <mod_sub_list_visitor+0x30>
		if (net_buf_simple_tailroom(visit->msg) <
   14356:	6868      	ldr	r0, [r5, #4]
   14358:	f019 f928 	bl	2d5ac <net_buf_simple_tailroom>
   1435c:	2805      	cmp	r0, #5
   1435e:	d805      	bhi.n	1436c <mod_sub_list_visitor+0x28>
			BT_WARN("No room for all groups");
   14360:	4805      	ldr	r0, [pc, #20]	; (14378 <mod_sub_list_visitor+0x34>)
   14362:	2157      	movs	r1, #87	; 0x57
   14364:	f013 fab5 	bl	278d2 <printk>
   14368:	2000      	movs	r0, #0
}
   1436a:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   1436c:	89e1      	ldrh	r1, [r4, #14]
   1436e:	6868      	ldr	r0, [r5, #4]
   14370:	f019 f937 	bl	2d5e2 <net_buf_simple_add_le16>
		return BT_MESH_WALK_CONTINUE;
   14374:	2001      	movs	r0, #1
   14376:	e7f8      	b.n	1436a <mod_sub_list_visitor+0x26>
   14378:	00034448 	.word	0x00034448

0001437c <relay_get>:
{
   1437c:	b530      	push	{r4, r5, lr}
   1437e:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   14380:	ab03      	add	r3, sp, #12
   14382:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   14386:	4604      	mov	r4, r0
   14388:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   1438a:	a805      	add	r0, sp, #20
   1438c:	f248 0128 	movw	r1, #32808	; 0x8028
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   14390:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14394:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   14396:	f017 fab7 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   1439a:	f016 fdb4 	bl	2af06 <bt_mesh_relay_get>
   1439e:	4601      	mov	r1, r0
   143a0:	a805      	add	r0, sp, #20
   143a2:	f019 f917 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   143a6:	f7fa fa25 	bl	e7f4 <bt_mesh_relay_retransmit_get>
   143aa:	4601      	mov	r1, r0
   143ac:	a805      	add	r0, sp, #20
   143ae:	f019 f911 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   143b2:	2300      	movs	r3, #0
   143b4:	9300      	str	r3, [sp, #0]
   143b6:	aa05      	add	r2, sp, #20
   143b8:	4629      	mov	r1, r5
   143ba:	4620      	mov	r0, r4
   143bc:	f017 facd 	bl	2b95a <bt_mesh_model_send>
   143c0:	b118      	cbz	r0, 143ca <relay_get+0x4e>
		BT_ERR("Unable to send Config Relay Status response");
   143c2:	2145      	movs	r1, #69	; 0x45
   143c4:	4802      	ldr	r0, [pc, #8]	; (143d0 <relay_get+0x54>)
   143c6:	f013 fa84 	bl	278d2 <printk>
}
   143ca:	b009      	add	sp, #36	; 0x24
   143cc:	bd30      	pop	{r4, r5, pc}
   143ce:	bf00      	nop
   143d0:	0003452b 	.word	0x0003452b

000143d4 <net_transmit_set>:
{
   143d4:	b570      	push	{r4, r5, r6, lr}
   143d6:	b088      	sub	sp, #32
   143d8:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   143da:	ab03      	add	r3, sp, #12
   143dc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   143e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   143e4:	9305      	str	r3, [sp, #20]
	bt_mesh_net_transmit_set(buf->data[0]);
   143e6:	6823      	ldr	r3, [r4, #0]
{
   143e8:	4605      	mov	r5, r0
	bt_mesh_net_transmit_set(buf->data[0]);
   143ea:	7818      	ldrb	r0, [r3, #0]
{
   143ec:	460e      	mov	r6, r1
	bt_mesh_net_transmit_set(buf->data[0]);
   143ee:	f7fa f991 	bl	e714 <bt_mesh_net_transmit_set>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   143f2:	f248 0125 	movw	r1, #32805	; 0x8025
   143f6:	a805      	add	r0, sp, #20
   143f8:	f017 fa86 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   143fc:	6823      	ldr	r3, [r4, #0]
   143fe:	a805      	add	r0, sp, #20
   14400:	7819      	ldrb	r1, [r3, #0]
   14402:	f019 f8e7 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   14406:	2300      	movs	r3, #0
   14408:	9300      	str	r3, [sp, #0]
   1440a:	aa05      	add	r2, sp, #20
   1440c:	4631      	mov	r1, r6
   1440e:	4628      	mov	r0, r5
   14410:	f017 faa3 	bl	2b95a <bt_mesh_model_send>
   14414:	b118      	cbz	r0, 1441e <net_transmit_set+0x4a>
		BT_ERR("Unable to send Network Transmit Status");
   14416:	2145      	movs	r1, #69	; 0x45
   14418:	4802      	ldr	r0, [pc, #8]	; (14424 <net_transmit_set+0x50>)
   1441a:	f013 fa5a 	bl	278d2 <printk>
}
   1441e:	b008      	add	sp, #32
   14420:	bd70      	pop	{r4, r5, r6, pc}
   14422:	bf00      	nop
   14424:	000344b7 	.word	0x000344b7

00014428 <net_transmit_get>:
{
   14428:	b530      	push	{r4, r5, lr}
   1442a:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   1442c:	ab03      	add	r3, sp, #12
   1442e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   14432:	4604      	mov	r4, r0
   14434:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   14436:	a805      	add	r0, sp, #20
   14438:	f248 0125 	movw	r1, #32805	; 0x8025
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   1443c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14440:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   14442:	f017 fa61 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   14446:	f7fa f979 	bl	e73c <bt_mesh_net_transmit_get>
   1444a:	4601      	mov	r1, r0
   1444c:	a805      	add	r0, sp, #20
   1444e:	f019 f8c1 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   14452:	2300      	movs	r3, #0
   14454:	9300      	str	r3, [sp, #0]
   14456:	aa05      	add	r2, sp, #20
   14458:	4629      	mov	r1, r5
   1445a:	4620      	mov	r0, r4
   1445c:	f017 fa7d 	bl	2b95a <bt_mesh_model_send>
   14460:	b118      	cbz	r0, 1446a <net_transmit_get+0x42>
		BT_ERR("Unable to send Config Network Transmit Status");
   14462:	2145      	movs	r1, #69	; 0x45
   14464:	4802      	ldr	r0, [pc, #8]	; (14470 <net_transmit_get+0x48>)
   14466:	f013 fa34 	bl	278d2 <printk>
}
   1446a:	b009      	add	sp, #36	; 0x24
   1446c:	bd30      	pop	{r4, r5, pc}
   1446e:	bf00      	nop
   14470:	00034484 	.word	0x00034484

00014474 <send_gatt_proxy_status>:
{
   14474:	b530      	push	{r4, r5, lr}
   14476:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   14478:	ab03      	add	r3, sp, #12
   1447a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1447e:	4604      	mov	r4, r0
   14480:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   14482:	a805      	add	r0, sp, #20
   14484:	f248 0114 	movw	r1, #32788	; 0x8014
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   14488:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1448c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   1448e:	f017 fa3b 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   14492:	f016 fd1b 	bl	2aecc <bt_mesh_gatt_proxy_get>
   14496:	4601      	mov	r1, r0
   14498:	a805      	add	r0, sp, #20
   1449a:	f019 f89b 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1449e:	2300      	movs	r3, #0
   144a0:	9300      	str	r3, [sp, #0]
   144a2:	aa05      	add	r2, sp, #20
   144a4:	4629      	mov	r1, r5
   144a6:	4620      	mov	r0, r4
   144a8:	f017 fa57 	bl	2b95a <bt_mesh_model_send>
   144ac:	b118      	cbz	r0, 144b6 <send_gatt_proxy_status+0x42>
		BT_ERR("Unable to send GATT Proxy Status");
   144ae:	2145      	movs	r1, #69	; 0x45
   144b0:	4802      	ldr	r0, [pc, #8]	; (144bc <send_gatt_proxy_status+0x48>)
   144b2:	f013 fa0e 	bl	278d2 <printk>
}
   144b6:	b009      	add	sp, #36	; 0x24
   144b8:	bd30      	pop	{r4, r5, pc}
   144ba:	bf00      	nop
   144bc:	000345f4 	.word	0x000345f4

000144c0 <gatt_proxy_set>:
{
   144c0:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   144c2:	6813      	ldr	r3, [r2, #0]
   144c4:	781a      	ldrb	r2, [r3, #0]
   144c6:	2a01      	cmp	r2, #1
{
   144c8:	4604      	mov	r4, r0
   144ca:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   144cc:	d905      	bls.n	144da <gatt_proxy_set+0x1a>
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   144ce:	2157      	movs	r1, #87	; 0x57
   144d0:	4806      	ldr	r0, [pc, #24]	; (144ec <gatt_proxy_set+0x2c>)
}
   144d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   144d6:	f013 b9fc 	b.w	278d2 <printk>
	(void)bt_mesh_gatt_proxy_set(buf->data[0]);
   144da:	4610      	mov	r0, r2
   144dc:	f016 fce3 	bl	2aea6 <bt_mesh_gatt_proxy_set>
	send_gatt_proxy_status(model, ctx);
   144e0:	4629      	mov	r1, r5
   144e2:	4620      	mov	r0, r4
}
   144e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_gatt_proxy_status(model, ctx);
   144e8:	f7ff bfc4 	b.w	14474 <send_gatt_proxy_status>
   144ec:	00034192 	.word	0x00034192

000144f0 <default_ttl_set>:
{
   144f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   144f2:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   144f4:	ab03      	add	r3, sp, #12
{
   144f6:	4615      	mov	r5, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   144f8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   144fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14500:	9305      	str	r3, [sp, #20]
	err = bt_mesh_default_ttl_set(buf->data[0]);
   14502:	682b      	ldr	r3, [r5, #0]
{
   14504:	4606      	mov	r6, r0
	err = bt_mesh_default_ttl_set(buf->data[0]);
   14506:	7818      	ldrb	r0, [r3, #0]
{
   14508:	460f      	mov	r7, r1
	err = bt_mesh_default_ttl_set(buf->data[0]);
   1450a:	f7fa f8e1 	bl	e6d0 <bt_mesh_default_ttl_set>
	if (err) {
   1450e:	4604      	mov	r4, r0
   14510:	b138      	cbz	r0, 14522 <default_ttl_set+0x32>
		BT_WARN("Prohibited Default TTL value 0x%02x", buf->data[0]);
   14512:	682b      	ldr	r3, [r5, #0]
   14514:	480f      	ldr	r0, [pc, #60]	; (14554 <default_ttl_set+0x64>)
   14516:	781a      	ldrb	r2, [r3, #0]
   14518:	2157      	movs	r1, #87	; 0x57
   1451a:	f013 f9da 	bl	278d2 <printk>
}
   1451e:	b009      	add	sp, #36	; 0x24
   14520:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   14522:	f248 010e 	movw	r1, #32782	; 0x800e
   14526:	a805      	add	r0, sp, #20
   14528:	f017 f9ee 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   1452c:	682b      	ldr	r3, [r5, #0]
   1452e:	a805      	add	r0, sp, #20
   14530:	7819      	ldrb	r1, [r3, #0]
   14532:	f019 f84f 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   14536:	9400      	str	r4, [sp, #0]
   14538:	4623      	mov	r3, r4
   1453a:	aa05      	add	r2, sp, #20
   1453c:	4639      	mov	r1, r7
   1453e:	4630      	mov	r0, r6
   14540:	f017 fa0b 	bl	2b95a <bt_mesh_model_send>
   14544:	2800      	cmp	r0, #0
   14546:	d0ea      	beq.n	1451e <default_ttl_set+0x2e>
		BT_ERR("Unable to send Default TTL Status response");
   14548:	2145      	movs	r1, #69	; 0x45
   1454a:	4803      	ldr	r0, [pc, #12]	; (14558 <default_ttl_set+0x68>)
   1454c:	f013 f9c1 	bl	278d2 <printk>
   14550:	e7e5      	b.n	1451e <default_ttl_set+0x2e>
   14552:	bf00      	nop
   14554:	00034099 	.word	0x00034099
   14558:	000340c2 	.word	0x000340c2

0001455c <default_ttl_get>:
{
   1455c:	b530      	push	{r4, r5, lr}
   1455e:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   14560:	ab03      	add	r3, sp, #12
   14562:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   14566:	4604      	mov	r4, r0
   14568:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   1456a:	a805      	add	r0, sp, #20
   1456c:	f248 010e 	movw	r1, #32782	; 0x800e
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   14570:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14574:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   14576:	f017 f9c7 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   1457a:	f7fa f8c5 	bl	e708 <bt_mesh_default_ttl_get>
   1457e:	4601      	mov	r1, r0
   14580:	a805      	add	r0, sp, #20
   14582:	f019 f827 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   14586:	2300      	movs	r3, #0
   14588:	9300      	str	r3, [sp, #0]
   1458a:	aa05      	add	r2, sp, #20
   1458c:	4629      	mov	r1, r5
   1458e:	4620      	mov	r0, r4
   14590:	f017 f9e3 	bl	2b95a <bt_mesh_model_send>
   14594:	b118      	cbz	r0, 1459e <default_ttl_get+0x42>
		BT_ERR("Unable to send Default TTL Status response");
   14596:	2145      	movs	r1, #69	; 0x45
   14598:	4802      	ldr	r0, [pc, #8]	; (145a4 <default_ttl_get+0x48>)
   1459a:	f013 f99a 	bl	278d2 <printk>
}
   1459e:	b009      	add	sp, #36	; 0x24
   145a0:	bd30      	pop	{r4, r5, pc}
   145a2:	bf00      	nop
   145a4:	000340c2 	.word	0x000340c2

000145a8 <beacon_get>:
{
   145a8:	b530      	push	{r4, r5, lr}
   145aa:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   145ac:	ab03      	add	r3, sp, #12
   145ae:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   145b2:	4604      	mov	r4, r0
   145b4:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   145b6:	a805      	add	r0, sp, #20
   145b8:	f248 010b 	movw	r1, #32779	; 0x800b
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   145bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   145c0:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   145c2:	f017 f9a1 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_enabled());
   145c6:	f016 fc6b 	bl	2aea0 <bt_mesh_beacon_enabled>
   145ca:	4601      	mov	r1, r0
   145cc:	a805      	add	r0, sp, #20
   145ce:	f019 f801 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   145d2:	2300      	movs	r3, #0
   145d4:	9300      	str	r3, [sp, #0]
   145d6:	aa05      	add	r2, sp, #20
   145d8:	4629      	mov	r1, r5
   145da:	4620      	mov	r0, r4
   145dc:	f017 f9bd 	bl	2b95a <bt_mesh_model_send>
   145e0:	b118      	cbz	r0, 145ea <beacon_get+0x42>
		BT_ERR("Unable to send Config Beacon Status response");
   145e2:	2145      	movs	r1, #69	; 0x45
   145e4:	4802      	ldr	r0, [pc, #8]	; (145f0 <beacon_get+0x48>)
   145e6:	f013 f974 	bl	278d2 <printk>
}
   145ea:	b009      	add	sp, #36	; 0x24
   145ec:	bd30      	pop	{r4, r5, pc}
   145ee:	bf00      	nop
   145f0:	0003402d 	.word	0x0003402d

000145f4 <dev_comp_data_get>:
{
   145f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145f8:	b0ad      	sub	sp, #180	; 0xb4
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   145fa:	ab08      	add	r3, sp, #32
{
   145fc:	4681      	mov	r9, r0
   145fe:	468a      	mov	sl, r1
	page = net_buf_simple_pull_u8(buf);
   14600:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   14602:	f44f 0110 	mov.w	r1, #9437184	; 0x900000
   14606:	e9cd 1306 	strd	r1, r3, [sp, #24]
   1460a:	9305      	str	r3, [sp, #20]
	page = net_buf_simple_pull_u8(buf);
   1460c:	f018 ff90 	bl	2d530 <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   14610:	2102      	movs	r1, #2
   14612:	a805      	add	r0, sp, #20
   14614:	f017 f978 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   14618:	2100      	movs	r1, #0
   1461a:	a805      	add	r0, sp, #20
   1461c:	f018 ffda 	bl	2d5d4 <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   14620:	f7fe fdc6 	bl	131b0 <bt_mesh_comp_get>
   14624:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   14626:	8801      	ldrh	r1, [r0, #0]
   14628:	a805      	add	r0, sp, #20
   1462a:	f018 ffda 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   1462e:	8869      	ldrh	r1, [r5, #2]
   14630:	a805      	add	r0, sp, #20
   14632:	f018 ffd6 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   14636:	88a9      	ldrh	r1, [r5, #4]
   14638:	a805      	add	r0, sp, #20
   1463a:	f018 ffd2 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   1463e:	210a      	movs	r1, #10
   14640:	a805      	add	r0, sp, #20
   14642:	f018 ffce 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   14646:	2107      	movs	r1, #7
   14648:	a805      	add	r0, sp, #20
   1464a:	f018 ffca 	bl	2d5e2 <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   1464e:	2600      	movs	r6, #0
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   14650:	f04f 0b02 	mov.w	fp, #2
		net_buf_simple_add_le16(buf, mod->id);
   14654:	f04f 081c 	mov.w	r8, #28
	for (i = 0; i < comp->elem_count; i++) {
   14658:	68ab      	ldr	r3, [r5, #8]
   1465a:	42b3      	cmp	r3, r6
   1465c:	d80a      	bhi.n	14674 <dev_comp_data_get+0x80>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1465e:	2300      	movs	r3, #0
   14660:	9300      	str	r3, [sp, #0]
   14662:	aa05      	add	r2, sp, #20
   14664:	4651      	mov	r1, sl
   14666:	4648      	mov	r0, r9
   14668:	f017 f977 	bl	2b95a <bt_mesh_model_send>
   1466c:	b1c0      	cbz	r0, 146a0 <dev_comp_data_get+0xac>
		BT_ERR("Unable to send Device Composition Status response");
   1466e:	2145      	movs	r1, #69	; 0x45
   14670:	4824      	ldr	r0, [pc, #144]	; (14704 <dev_comp_data_get+0x110>)
   14672:	e013      	b.n	1469c <dev_comp_data_get+0xa8>
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   14674:	68ec      	ldr	r4, [r5, #12]
   14676:	eb04 1406 	add.w	r4, r4, r6, lsl #4
	if (net_buf_simple_tailroom(buf) <
   1467a:	a805      	add	r0, sp, #20
   1467c:	f018 ff96 	bl	2d5ac <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   14680:	7922      	ldrb	r2, [r4, #4]
   14682:	7963      	ldrb	r3, [r4, #5]
   14684:	3202      	adds	r2, #2
   14686:	fb1b 2303 	smlabb	r3, fp, r3, r2
	if (net_buf_simple_tailroom(buf) <
   1468a:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   1468e:	d20a      	bcs.n	146a6 <dev_comp_data_get+0xb2>
		BT_ERR("Too large device composition");
   14690:	2145      	movs	r1, #69	; 0x45
   14692:	481d      	ldr	r0, [pc, #116]	; (14708 <dev_comp_data_get+0x114>)
   14694:	f013 f91d 	bl	278d2 <printk>
		BT_ERR("Unable to get composition page 0");
   14698:	481c      	ldr	r0, [pc, #112]	; (1470c <dev_comp_data_get+0x118>)
   1469a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to send Device Composition Status response");
   1469c:	f013 f919 	bl	278d2 <printk>
}
   146a0:	b02d      	add	sp, #180	; 0xb4
   146a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_simple_add_le16(buf, elem->loc);
   146a6:	8861      	ldrh	r1, [r4, #2]
   146a8:	a805      	add	r0, sp, #20
   146aa:	f018 ff9a 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   146ae:	7921      	ldrb	r1, [r4, #4]
   146b0:	a805      	add	r0, sp, #20
   146b2:	f018 ff8f 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   146b6:	7961      	ldrb	r1, [r4, #5]
   146b8:	a805      	add	r0, sp, #20
   146ba:	f018 ff8b 	bl	2d5d4 <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   146be:	2700      	movs	r7, #0
   146c0:	7923      	ldrb	r3, [r4, #4]
   146c2:	429f      	cmp	r7, r3
   146c4:	db05      	blt.n	146d2 <dev_comp_data_get+0xde>
	for (i = 0; i < elem->vnd_model_count; i++) {
   146c6:	2700      	movs	r7, #0
   146c8:	7963      	ldrb	r3, [r4, #5]
   146ca:	429f      	cmp	r7, r3
   146cc:	db0a      	blt.n	146e4 <dev_comp_data_get+0xf0>
	for (i = 0; i < comp->elem_count; i++) {
   146ce:	3601      	adds	r6, #1
   146d0:	e7c2      	b.n	14658 <dev_comp_data_get+0x64>
		net_buf_simple_add_le16(buf, mod->id);
   146d2:	fb08 f307 	mul.w	r3, r8, r7
   146d6:	68a2      	ldr	r2, [r4, #8]
   146d8:	a805      	add	r0, sp, #20
   146da:	5ad1      	ldrh	r1, [r2, r3]
   146dc:	f018 ff81 	bl	2d5e2 <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   146e0:	3701      	adds	r7, #1
   146e2:	e7ed      	b.n	146c0 <dev_comp_data_get+0xcc>
		mod = &elem->vnd_models[i];
   146e4:	fb08 f307 	mul.w	r3, r8, r7
   146e8:	68e1      	ldr	r1, [r4, #12]
		net_buf_simple_add_le16(buf, mod->vnd.company);
   146ea:	a805      	add	r0, sp, #20
		mod = &elem->vnd_models[i];
   146ec:	18ca      	adds	r2, r1, r3
		net_buf_simple_add_le16(buf, mod->vnd.company);
   146ee:	5ac9      	ldrh	r1, [r1, r3]
		mod = &elem->vnd_models[i];
   146f0:	9203      	str	r2, [sp, #12]
		net_buf_simple_add_le16(buf, mod->vnd.company);
   146f2:	f018 ff76 	bl	2d5e2 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   146f6:	9a03      	ldr	r2, [sp, #12]
   146f8:	a805      	add	r0, sp, #20
   146fa:	8851      	ldrh	r1, [r2, #2]
   146fc:	f018 ff71 	bl	2d5e2 <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   14700:	3701      	adds	r7, #1
   14702:	e7e1      	b.n	146c8 <dev_comp_data_get+0xd4>
   14704:	0003413a 	.word	0x0003413a
   14708:	000340f2 	.word	0x000340f2
   1470c:	00034114 	.word	0x00034114

00014710 <_mod_pub_set.constprop.29>:
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   14710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14714:	4605      	mov	r5, r0
	if (!model->pub) {
   14716:	6880      	ldr	r0, [r0, #8]
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   14718:	f89d 601c 	ldrb.w	r6, [sp, #28]
   1471c:	4688      	mov	r8, r1
   1471e:	4617      	mov	r7, r2
   14720:	461c      	mov	r4, r3
	if (!model->pub) {
   14722:	2800      	cmp	r0, #0
   14724:	d062      	beq.n	147ec <_mod_pub_set.constprop.29+0xdc>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
   14726:	2b00      	cmp	r3, #0
   14728:	d15e      	bne.n	147e8 <_mod_pub_set.constprop.29+0xd8>
	if (!model->pub->update && period) {
   1472a:	6942      	ldr	r2, [r0, #20]
   1472c:	b90a      	cbnz	r2, 14732 <_mod_pub_set.constprop.29+0x22>
   1472e:	2e00      	cmp	r6, #0
   14730:	d15c      	bne.n	147ec <_mod_pub_set.constprop.29+0xdc>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
   14732:	f1b8 0f00 	cmp.w	r8, #0
   14736:	d113      	bne.n	14760 <_mod_pub_set.constprop.29+0x50>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   14738:	8883      	ldrh	r3, [r0, #4]
   1473a:	b173      	cbz	r3, 1475a <_mod_pub_set.constprop.29+0x4a>
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   1473c:	6843      	ldr	r3, [r0, #4]
   1473e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   14742:	6043      	str	r3, [r0, #4]
		model->pub->ttl = 0U;
   14744:	6883      	ldr	r3, [r0, #8]
   14746:	f003 53f8 	and.w	r3, r3, #520093696	; 0x1f000000
   1474a:	6083      	str	r3, [r0, #8]
		if (model->pub->update) {
   1474c:	b112      	cbz	r2, 14754 <_mod_pub_set.constprop.29+0x44>
			k_delayed_work_cancel(&model->pub->timer);
   1474e:	3018      	adds	r0, #24
   14750:	f010 ff12 	bl	25578 <k_delayed_work_cancel>
			bt_mesh_model_pub_store(model);
   14754:	4628      	mov	r0, r5
   14756:	f017 f955 	bl	2ba04 <bt_mesh_model_pub_store>
}
   1475a:	4620      	mov	r0, r4
   1475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_mesh_app_key_exists(app_idx)) {
   14760:	4638      	mov	r0, r7
   14762:	f7fb ffc5 	bl	106f0 <bt_mesh_app_key_exists>
   14766:	2800      	cmp	r0, #0
   14768:	d042      	beq.n	147f0 <_mod_pub_set.constprop.29+0xe0>
	if (BT_MESH_ADDR_IS_VIRTUAL(model->pub->addr)) {
   1476a:	68ab      	ldr	r3, [r5, #8]
   1476c:	8898      	ldrh	r0, [r3, #4]
   1476e:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   14772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   14776:	d205      	bcs.n	14784 <_mod_pub_set.constprop.29+0x74>
		uint8_t *uuid = bt_mesh_va_label_get(model->pub->addr);
   14778:	f7fc fe46 	bl	11408 <bt_mesh_va_label_get>
		if (uuid) {
   1477c:	b110      	cbz	r0, 14784 <_mod_pub_set.constprop.29+0x74>
			bt_mesh_va_del(uuid, NULL);
   1477e:	2100      	movs	r1, #0
   14780:	f7fc fe1e 	bl	113c0 <bt_mesh_va_del>
	model->pub->addr = pub_addr;
   14784:	68ab      	ldr	r3, [r5, #8]
	model->pub->key = app_idx;
   14786:	88da      	ldrh	r2, [r3, #6]
	model->pub->addr = pub_addr;
   14788:	f8a3 8004 	strh.w	r8, [r3, #4]
	model->pub->key = app_idx;
   1478c:	f367 020b 	bfi	r2, r7, #0, #12
   14790:	80da      	strh	r2, [r3, #6]
	model->pub->cred = cred_flag;
   14792:	f3c2 2207 	ubfx	r2, r2, #8, #8
   14796:	f36f 1204 	bfc	r2, #4, #1
   1479a:	71da      	strb	r2, [r3, #7]
	model->pub->ttl = ttl;
   1479c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   147a0:	721a      	strb	r2, [r3, #8]
	model->pub->retransmit = retransmit;
   147a2:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->period = period;
   147a6:	729e      	strb	r6, [r3, #10]
	model->pub->retransmit = retransmit;
   147a8:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
   147aa:	695b      	ldr	r3, [r3, #20]
   147ac:	2b00      	cmp	r3, #0
   147ae:	d0d1      	beq.n	14754 <_mod_pub_set.constprop.29+0x44>
		period_ms = bt_mesh_model_pub_period_get(model);
   147b0:	4628      	mov	r0, r5
   147b2:	f7fe f911 	bl	129d8 <bt_mesh_model_pub_period_get>
		if (period_ms > 0) {
   147b6:	f1b0 0c00 	subs.w	ip, r0, #0
   147ba:	68a8      	ldr	r0, [r5, #8]
   147bc:	ddc7      	ble.n	1474e <_mod_pub_set.constprop.29+0x3e>
			k_delayed_work_submit(&model->pub->timer,
   147be:	f100 0618 	add.w	r6, r0, #24
			return (t * to_hz + off) / from_hz;
   147c2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   147c6:	f240 30e7 	movw	r0, #999	; 0x3e7
   147ca:	2100      	movs	r1, #0
   147cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   147d0:	2300      	movs	r3, #0
   147d2:	fbc7 010c 	smlal	r0, r1, r7, ip
   147d6:	f7ed f8d9 	bl	198c <__aeabi_uldivmod>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   147da:	4602      	mov	r2, r0
   147dc:	460b      	mov	r3, r1
   147de:	4805      	ldr	r0, [pc, #20]	; (147f4 <_mod_pub_set.constprop.29+0xe4>)
   147e0:	4631      	mov	r1, r6
   147e2:	f010 fe59 	bl	25498 <k_delayed_work_submit_to_queue>
   147e6:	e7b5      	b.n	14754 <_mod_pub_set.constprop.29+0x44>
		return STATUS_FEAT_NOT_SUPP;
   147e8:	240a      	movs	r4, #10
   147ea:	e7b6      	b.n	1475a <_mod_pub_set.constprop.29+0x4a>
		return STATUS_NVAL_PUB_PARAM;
   147ec:	2407      	movs	r4, #7
   147ee:	e7b4      	b.n	1475a <_mod_pub_set.constprop.29+0x4a>
		return STATUS_INVALID_APPKEY;
   147f0:	2403      	movs	r4, #3
   147f2:	e7b2      	b.n	1475a <_mod_pub_set.constprop.29+0x4a>
   147f4:	20003028 	.word	0x20003028

000147f8 <mod_app_unbind>:
{
   147f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   147fc:	4614      	mov	r4, r2
   147fe:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   14800:	ab06      	add	r3, sp, #24
   14802:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   14806:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   14808:	4620      	mov	r0, r4
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   1480a:	9303      	str	r3, [sp, #12]
   1480c:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   14810:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   14812:	f018 fe95 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   14816:	b203      	sxth	r3, r0
   14818:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1481a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1481c:	dc06      	bgt.n	1482c <mod_app_unbind+0x34>
		BT_WARN("Prohibited element address");
   1481e:	4820      	ldr	r0, [pc, #128]	; (148a0 <mod_app_unbind+0xa8>)
   14820:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model App Unbind Status response");
   14822:	f013 f856 	bl	278d2 <printk>
}
   14826:	b00b      	add	sp, #44	; 0x2c
   14828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
   1482c:	4620      	mov	r0, r4
   1482e:	f018 fe87 	bl	2d540 <net_buf_simple_pull_le16>
   14832:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   14834:	4628      	mov	r0, r5
	mod_id = buf->data;
   14836:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1483a:	f7fe fa9d 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   1483e:	b9d8      	cbnz	r0, 14878 <mod_app_unbind+0x80>
		vnd = (buf->len == 4U);
   14840:	88a3      	ldrh	r3, [r4, #4]
   14842:	1f1a      	subs	r2, r3, #4
   14844:	4253      	negs	r3, r2
   14846:	4153      	adcs	r3, r2
   14848:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   1484c:	2001      	movs	r0, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   1484e:	e9cd 0900 	strd	r0, r9, [sp]
   14852:	4633      	mov	r3, r6
   14854:	462a      	mov	r2, r5
   14856:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1485a:	a803      	add	r0, sp, #12
   1485c:	f017 f99a 	bl	2bb94 <create_mod_app_status.isra.13>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   14860:	2300      	movs	r3, #0
   14862:	9300      	str	r3, [sp, #0]
   14864:	aa03      	add	r2, sp, #12
   14866:	4641      	mov	r1, r8
   14868:	4638      	mov	r0, r7
   1486a:	f017 f876 	bl	2b95a <bt_mesh_model_send>
   1486e:	2800      	cmp	r0, #0
   14870:	d0d9      	beq.n	14826 <mod_app_unbind+0x2e>
		BT_ERR("Unable to send Model App Unbind Status response");
   14872:	2145      	movs	r1, #69	; 0x45
   14874:	480b      	ldr	r0, [pc, #44]	; (148a4 <mod_app_unbind+0xac>)
   14876:	e7d4      	b.n	14822 <mod_app_unbind+0x2a>
	mod = get_model(elem, buf, &vnd);
   14878:	4621      	mov	r1, r4
   1487a:	f10d 020b 	add.w	r2, sp, #11
   1487e:	f017 f968 	bl	2bb52 <get_model>
	if (!mod) {
   14882:	4604      	mov	r4, r0
   14884:	b140      	cbz	r0, 14898 <mod_app_unbind+0xa0>
	if (!bt_mesh_app_key_exists(key_idx)) {
   14886:	4630      	mov	r0, r6
   14888:	f7fb ff32 	bl	106f0 <bt_mesh_app_key_exists>
   1488c:	b130      	cbz	r0, 1489c <mod_app_unbind+0xa4>
   1488e:	4631      	mov	r1, r6
   14890:	4620      	mov	r0, r4
   14892:	f017 f9a9 	bl	2bbe8 <mod_unbind.part.2.constprop.28>
   14896:	e7da      	b.n	1484e <mod_app_unbind+0x56>
		status = STATUS_INVALID_MODEL;
   14898:	2002      	movs	r0, #2
   1489a:	e7d8      	b.n	1484e <mod_app_unbind+0x56>
		return STATUS_INVALID_APPKEY;
   1489c:	2003      	movs	r0, #3
   1489e:	e7d6      	b.n	1484e <mod_app_unbind+0x56>
   148a0:	000343db 	.word	0x000343db
   148a4:	0003435c 	.word	0x0003435c

000148a8 <mod_pub_va_set>:
{
   148a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148ac:	4682      	mov	sl, r0
   148ae:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   148b0:	4610      	mov	r0, r2
{
   148b2:	468b      	mov	fp, r1
   148b4:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   148b6:	f018 fe43 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   148ba:	b203      	sxth	r3, r0
   148bc:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   148be:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   148c0:	dc06      	bgt.n	148d0 <mod_pub_va_set+0x28>
		BT_WARN("Prohibited element address");
   148c2:	2157      	movs	r1, #87	; 0x57
   148c4:	4838      	ldr	r0, [pc, #224]	; (149a8 <mod_pub_va_set+0x100>)
   148c6:	f013 f804 	bl	278d2 <printk>
}
   148ca:	b00b      	add	sp, #44	; 0x2c
   148cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   148d0:	2110      	movs	r1, #16
   148d2:	4620      	mov	r0, r4
   148d4:	f00b fb46 	bl	1ff64 <net_buf_simple_pull_mem>
   148d8:	4680      	mov	r8, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   148da:	4620      	mov	r0, r4
   148dc:	f018 fe30 	bl	2d540 <net_buf_simple_pull_le16>
   148e0:	4681      	mov	r9, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   148e2:	4620      	mov	r0, r4
   148e4:	f018 fe24 	bl	2d530 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   148e8:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   148ec:	b2db      	uxtb	r3, r3
   148ee:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   148f0:	4607      	mov	r7, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   148f2:	d805      	bhi.n	14900 <mod_pub_va_set+0x58>
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   148f4:	4602      	mov	r2, r0
   148f6:	2145      	movs	r1, #69	; 0x45
   148f8:	482c      	ldr	r0, [pc, #176]	; (149ac <mod_pub_va_set+0x104>)
   148fa:	f012 ffea 	bl	278d2 <printk>
		return;
   148fe:	e7e4      	b.n	148ca <mod_pub_va_set+0x22>
	pub_period = net_buf_simple_pull_u8(buf);
   14900:	4620      	mov	r0, r4
   14902:	f018 fe15 	bl	2d530 <net_buf_simple_pull_u8>
   14906:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   14908:	4620      	mov	r0, r4
   1490a:	f018 fe11 	bl	2d530 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   1490e:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   14910:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   14912:	4630      	mov	r0, r6
	mod_id = buf->data;
   14914:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   14916:	f7fe fa2f 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   1491a:	4605      	mov	r5, r0
   1491c:	b9c0      	cbnz	r0, 14950 <mod_pub_va_set+0xa8>
		vnd = (buf->len == 4U);
   1491e:	88a3      	ldrh	r3, [r4, #4]
		pub_addr = 0U;
   14920:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		vnd = (buf->len == 4U);
   14924:	1f1a      	subs	r2, r3, #4
   14926:	4253      	negs	r3, r2
   14928:	4153      	adcs	r3, r2
   1492a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		status = STATUS_INVALID_ADDRESS;
   1492e:	2301      	movs	r3, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   14930:	9a05      	ldr	r2, [sp, #20]
   14932:	3508      	adds	r5, #8
   14934:	e9cd 3202 	strd	r3, r2, [sp, #8]
   14938:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1493c:	9300      	str	r3, [sp, #0]
   1493e:	9501      	str	r5, [sp, #4]
   14940:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   14944:	4632      	mov	r2, r6
   14946:	4659      	mov	r1, fp
   14948:	4650      	mov	r0, sl
   1494a:	f7ff fc4d 	bl	141e8 <send_mod_pub_status.isra.15>
   1494e:	e7bc      	b.n	148ca <mod_pub_va_set+0x22>
	mod = get_model(elem, buf, &vnd);
   14950:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   14954:	4621      	mov	r1, r4
   14956:	f017 f8fc 	bl	2bb52 <get_model>
	if (!mod) {
   1495a:	4605      	mov	r5, r0
   1495c:	b918      	cbnz	r0, 14966 <mod_pub_va_set+0xbe>
		pub_addr = 0U;
   1495e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		status = STATUS_INVALID_MODEL;
   14962:	2302      	movs	r3, #2
		goto send_status;
   14964:	e7e4      	b.n	14930 <mod_pub_va_set+0x88>
	status = bt_mesh_va_add(label_uuid, &pub_addr);
   14966:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   1496a:	4640      	mov	r0, r8
   1496c:	f7fc fce6 	bl	1133c <bt_mesh_va_add>
   14970:	4603      	mov	r3, r0
   14972:	4604      	mov	r4, r0
	if (status != STATUS_SUCCESS) {
   14974:	2800      	cmp	r0, #0
   14976:	d1db      	bne.n	14930 <mod_pub_va_set+0x88>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   14978:	9b07      	ldr	r3, [sp, #28]
   1497a:	9302      	str	r3, [sp, #8]
   1497c:	9b06      	ldr	r3, [sp, #24]
   1497e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   14982:	e9cd 7300 	strd	r7, r3, [sp]
   14986:	f3c9 020b 	ubfx	r2, r9, #0, #12
   1498a:	f3c9 3300 	ubfx	r3, r9, #12, #1
   1498e:	4628      	mov	r0, r5
   14990:	f7ff febe 	bl	14710 <_mod_pub_set.constprop.29>
	if (status != STATUS_SUCCESS) {
   14994:	4603      	mov	r3, r0
   14996:	2800      	cmp	r0, #0
   14998:	d0ca      	beq.n	14930 <mod_pub_va_set+0x88>
   1499a:	9006      	str	r0, [sp, #24]
		bt_mesh_va_del(label_uuid, NULL);
   1499c:	4621      	mov	r1, r4
   1499e:	4640      	mov	r0, r8
   149a0:	f7fc fd0e 	bl	113c0 <bt_mesh_va_del>
   149a4:	9b06      	ldr	r3, [sp, #24]
   149a6:	e7c3      	b.n	14930 <mod_pub_va_set+0x88>
   149a8:	000343db 	.word	0x000343db
   149ac:	00034391 	.word	0x00034391

000149b0 <mod_pub_set>:
{
   149b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149b4:	4681      	mov	r9, r0
   149b6:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   149b8:	4610      	mov	r0, r2
{
   149ba:	468a      	mov	sl, r1
   149bc:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   149be:	f018 fdbf 	bl	2d540 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   149c2:	b203      	sxth	r3, r0
   149c4:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   149c6:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   149c8:	dc06      	bgt.n	149d8 <mod_pub_set+0x28>
		BT_WARN("Prohibited element address");
   149ca:	2157      	movs	r1, #87	; 0x57
   149cc:	482b      	ldr	r0, [pc, #172]	; (14a7c <mod_pub_set+0xcc>)
   149ce:	f012 ff80 	bl	278d2 <printk>
}
   149d2:	b00b      	add	sp, #44	; 0x2c
   149d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pub_addr = net_buf_simple_pull_le16(buf);
   149d8:	4620      	mov	r0, r4
   149da:	f018 fdb1 	bl	2d540 <net_buf_simple_pull_le16>
   149de:	4607      	mov	r7, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   149e0:	4620      	mov	r0, r4
   149e2:	f018 fdad 	bl	2d540 <net_buf_simple_pull_le16>
   149e6:	4680      	mov	r8, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   149e8:	4620      	mov	r0, r4
   149ea:	f018 fda1 	bl	2d530 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   149ee:	f1a0 0280 	sub.w	r2, r0, #128	; 0x80
   149f2:	b2d2      	uxtb	r2, r2
   149f4:	2a7e      	cmp	r2, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   149f6:	4683      	mov	fp, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   149f8:	d805      	bhi.n	14a06 <mod_pub_set+0x56>
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   149fa:	4602      	mov	r2, r0
   149fc:	2145      	movs	r1, #69	; 0x45
   149fe:	4820      	ldr	r0, [pc, #128]	; (14a80 <mod_pub_set+0xd0>)
   14a00:	f012 ff67 	bl	278d2 <printk>
		return;
   14a04:	e7e5      	b.n	149d2 <mod_pub_set+0x22>
	pub_period = net_buf_simple_pull_u8(buf);
   14a06:	4620      	mov	r0, r4
   14a08:	f018 fd92 	bl	2d530 <net_buf_simple_pull_u8>
   14a0c:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   14a0e:	4620      	mov	r0, r4
   14a10:	f018 fd8e 	bl	2d530 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   14a14:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   14a16:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   14a18:	4630      	mov	r0, r6
	mod_id = buf->data;
   14a1a:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   14a1c:	f7fe f9ac 	bl	12d78 <bt_mesh_elem_find>
	if (!elem) {
   14a20:	4605      	mov	r5, r0
   14a22:	b9a8      	cbnz	r0, 14a50 <mod_pub_set+0xa0>
		vnd = (buf->len == 4U);
   14a24:	88a3      	ldrh	r3, [r4, #4]
   14a26:	1f1a      	subs	r2, r3, #4
   14a28:	4253      	negs	r3, r2
   14a2a:	4153      	adcs	r3, r2
   14a2c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		status = STATUS_INVALID_ADDRESS;
   14a30:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   14a32:	9b05      	ldr	r3, [sp, #20]
   14a34:	3508      	adds	r5, #8
   14a36:	e9cd 0302 	strd	r0, r3, [sp, #8]
   14a3a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   14a3e:	9300      	str	r3, [sp, #0]
   14a40:	9501      	str	r5, [sp, #4]
   14a42:	463b      	mov	r3, r7
   14a44:	4632      	mov	r2, r6
   14a46:	4651      	mov	r1, sl
   14a48:	4648      	mov	r0, r9
   14a4a:	f7ff fbcd 	bl	141e8 <send_mod_pub_status.isra.15>
   14a4e:	e7c0      	b.n	149d2 <mod_pub_set+0x22>
	mod = get_model(elem, buf, &vnd);
   14a50:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   14a54:	4621      	mov	r1, r4
   14a56:	f017 f87c 	bl	2bb52 <get_model>
	if (!mod) {
   14a5a:	4605      	mov	r5, r0
   14a5c:	b160      	cbz	r0, 14a78 <mod_pub_set+0xc8>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   14a5e:	9b07      	ldr	r3, [sp, #28]
   14a60:	9302      	str	r3, [sp, #8]
   14a62:	9b06      	ldr	r3, [sp, #24]
   14a64:	f3c8 020b 	ubfx	r2, r8, #0, #12
   14a68:	e9cd b300 	strd	fp, r3, [sp]
   14a6c:	4639      	mov	r1, r7
   14a6e:	f3c8 3300 	ubfx	r3, r8, #12, #1
   14a72:	f7ff fe4d 	bl	14710 <_mod_pub_set.constprop.29>
   14a76:	e7dc      	b.n	14a32 <mod_pub_set+0x82>
		status = STATUS_INVALID_MODEL;
   14a78:	2002      	movs	r0, #2
   14a7a:	e7da      	b.n	14a32 <mod_pub_set+0x82>
   14a7c:	000343db 	.word	0x000343db
   14a80:	00034391 	.word	0x00034391

00014a84 <hb_sub_send_status>:
{
   14a84:	b570      	push	{r4, r5, r6, lr}
   14a86:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   14a88:	ab06      	add	r3, sp, #24
{
   14a8a:	4614      	mov	r4, r2
   14a8c:	4605      	mov	r5, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   14a8e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   14a92:	a803      	add	r0, sp, #12
{
   14a94:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   14a96:	f248 013c 	movw	r1, #32828	; 0x803c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   14a9a:	9303      	str	r3, [sp, #12]
   14a9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   14aa0:	f016 ff32 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   14aa4:	2100      	movs	r1, #0
   14aa6:	a803      	add	r0, sp, #12
   14aa8:	f018 fd94 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, sub->src);
   14aac:	8921      	ldrh	r1, [r4, #8]
   14aae:	a803      	add	r0, sp, #12
   14ab0:	f018 fd97 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub->dst);
   14ab4:	8961      	ldrh	r1, [r4, #10]
   14ab6:	a803      	add	r0, sp, #12
   14ab8:	f018 fd93 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->remaining));
   14abc:	6861      	ldr	r1, [r4, #4]
	if (!val) {
   14abe:	b149      	cbz	r1, 14ad4 <hb_sub_send_status+0x50>
	} else if (val == 0xffff) {
   14ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14ac4:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   14ac6:	bf1d      	ittte	ne
   14ac8:	fab1 f181 	clzne	r1, r1
   14acc:	f1c1 0120 	rsbne	r1, r1, #32
   14ad0:	b2c9      	uxtbne	r1, r1
		return 0xff;
   14ad2:	21ff      	moveq	r1, #255	; 0xff
   14ad4:	a803      	add	r0, sp, #12
   14ad6:	f018 fd7d 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->count));
   14ada:	89a1      	ldrh	r1, [r4, #12]
	if (!val) {
   14adc:	b149      	cbz	r1, 14af2 <hb_sub_send_status+0x6e>
	} else if (val == 0xffff) {
   14ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14ae2:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   14ae4:	bf1d      	ittte	ne
   14ae6:	fab1 f181 	clzne	r1, r1
   14aea:	f1c1 0120 	rsbne	r1, r1, #32
   14aee:	b2c9      	uxtbne	r1, r1
		return 0xff;
   14af0:	21ff      	moveq	r1, #255	; 0xff
   14af2:	a803      	add	r0, sp, #12
   14af4:	f018 fd6e 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->min_hops);
   14af8:	7ba1      	ldrb	r1, [r4, #14]
   14afa:	a803      	add	r0, sp, #12
   14afc:	f018 fd6a 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->max_hops);
   14b00:	7be1      	ldrb	r1, [r4, #15]
   14b02:	a803      	add	r0, sp, #12
   14b04:	f018 fd66 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   14b08:	2300      	movs	r3, #0
   14b0a:	9300      	str	r3, [sp, #0]
   14b0c:	aa03      	add	r2, sp, #12
   14b0e:	4631      	mov	r1, r6
   14b10:	4628      	mov	r0, r5
   14b12:	f016 ff22 	bl	2b95a <bt_mesh_model_send>
   14b16:	b118      	cbz	r0, 14b20 <hb_sub_send_status+0x9c>
		BT_ERR("Unable to send Heartbeat Subscription Status");
   14b18:	2145      	movs	r1, #69	; 0x45
   14b1a:	4802      	ldr	r0, [pc, #8]	; (14b24 <hb_sub_send_status+0xa0>)
   14b1c:	f012 fed9 	bl	278d2 <printk>
}
   14b20:	b00a      	add	sp, #40	; 0x28
   14b22:	bd70      	pop	{r4, r5, r6, pc}
   14b24:	000341e8 	.word	0x000341e8

00014b28 <heartbeat_sub_set>:
{
   14b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14b2c:	4606      	mov	r6, r0
   14b2e:	b085      	sub	sp, #20
	sub_src = net_buf_simple_pull_le16(buf);
   14b30:	4610      	mov	r0, r2
{
   14b32:	4614      	mov	r4, r2
   14b34:	460f      	mov	r7, r1
	sub_src = net_buf_simple_pull_le16(buf);
   14b36:	f018 fd03 	bl	2d540 <net_buf_simple_pull_le16>
   14b3a:	4680      	mov	r8, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   14b3c:	4620      	mov	r0, r4
   14b3e:	f018 fcff 	bl	2d540 <net_buf_simple_pull_le16>
   14b42:	4681      	mov	r9, r0
	period_log = net_buf_simple_pull_u8(buf);
   14b44:	4620      	mov	r0, r4
   14b46:	f018 fcf3 	bl	2d530 <net_buf_simple_pull_u8>
	if (period_log > 0x11) {
   14b4a:	2811      	cmp	r0, #17
	period_log = net_buf_simple_pull_u8(buf);
   14b4c:	4604      	mov	r4, r0
	if (period_log > 0x11) {
   14b4e:	d907      	bls.n	14b60 <heartbeat_sub_set+0x38>
		BT_WARN("Prohibited subscription period 0x%02x", period_log);
   14b50:	4602      	mov	r2, r0
   14b52:	2157      	movs	r1, #87	; 0x57
   14b54:	4815      	ldr	r0, [pc, #84]	; (14bac <heartbeat_sub_set+0x84>)
   14b56:	f012 febc 	bl	278d2 <printk>
}
   14b5a:	b005      	add	sp, #20
   14b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	period = bt_mesh_hb_pwr2(period_log);
   14b60:	f016 ff79 	bl	2ba56 <bt_mesh_hb_pwr2>
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   14b64:	4649      	mov	r1, r9
	period = bt_mesh_hb_pwr2(period_log);
   14b66:	4605      	mov	r5, r0
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   14b68:	4602      	mov	r2, r0
   14b6a:	4640      	mov	r0, r8
   14b6c:	f7fd fb8c 	bl	12288 <bt_mesh_hb_sub_set>
	if (status != STATUS_SUCCESS) {
   14b70:	2800      	cmp	r0, #0
   14b72:	d1f2      	bne.n	14b5a <heartbeat_sub_set+0x32>
	bt_mesh_hb_sub_get(&sub);
   14b74:	4668      	mov	r0, sp
   14b76:	f7fd fbf3 	bl	12360 <bt_mesh_hb_sub_get>
	if (sub.src == BT_MESH_ADDR_UNASSIGNED || !period_log) {
   14b7a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   14b7e:	b103      	cbz	r3, 14b82 <heartbeat_sub_set+0x5a>
   14b80:	b914      	cbnz	r4, 14b88 <heartbeat_sub_set+0x60>
		sub.min_hops = BT_MESH_TTL_MAX;
   14b82:	237f      	movs	r3, #127	; 0x7f
   14b84:	f88d 300e 	strb.w	r3, [sp, #14]
	hb_sub_send_status(model, ctx, &sub);
   14b88:	466a      	mov	r2, sp
   14b8a:	4639      	mov	r1, r7
   14b8c:	4630      	mov	r0, r6
   14b8e:	f7ff ff79 	bl	14a84 <hb_sub_send_status>
	if (sub.src != BT_MESH_ADDR_UNASSIGNED &&
   14b92:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   14b96:	2b00      	cmp	r3, #0
   14b98:	d0df      	beq.n	14b5a <heartbeat_sub_set+0x32>
   14b9a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   14b9e:	2b00      	cmp	r3, #0
   14ba0:	d0db      	beq.n	14b5a <heartbeat_sub_set+0x32>
	    sub.dst != BT_MESH_ADDR_UNASSIGNED && !period) {
   14ba2:	2d00      	cmp	r5, #0
   14ba4:	d1d9      	bne.n	14b5a <heartbeat_sub_set+0x32>
		bt_mesh_hb_sub_reset_count();
   14ba6:	f7fd fbd5 	bl	12354 <bt_mesh_hb_sub_reset_count>
   14baa:	e7d6      	b.n	14b5a <heartbeat_sub_set+0x32>
   14bac:	0003421a 	.word	0x0003421a

00014bb0 <hb_pub_send_status>:
{
   14bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14bb2:	b08b      	sub	sp, #44	; 0x2c
   14bb4:	461c      	mov	r4, r3
   14bb6:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   14bb8:	ab06      	add	r3, sp, #24
   14bba:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   14bbe:	4605      	mov	r5, r0
   14bc0:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   14bc2:	a803      	add	r0, sp, #12
   14bc4:	2106      	movs	r1, #6
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   14bc6:	9303      	str	r3, [sp, #12]
   14bc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   14bcc:	f016 fe9c 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   14bd0:	4639      	mov	r1, r7
   14bd2:	a803      	add	r0, sp, #12
   14bd4:	f018 fcfe 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->dst);
   14bd8:	8821      	ldrh	r1, [r4, #0]
   14bda:	a803      	add	r0, sp, #12
   14bdc:	f018 fd01 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   14be0:	8861      	ldrh	r1, [r4, #2]
	if (!val) {
   14be2:	b171      	cbz	r1, 14c02 <hb_pub_send_status+0x52>
	} else if (val == 0x01) {
   14be4:	2901      	cmp	r1, #1
   14be6:	d00c      	beq.n	14c02 <hb_pub_send_status+0x52>
	} else if (val == 0xffff) {
   14be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14bec:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
   14bee:	bf1f      	itttt	ne
   14bf0:	f101 31ff 	addne.w	r1, r1, #4294967295
   14bf4:	fab1 f181 	clzne	r1, r1
   14bf8:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
   14bfc:	b2c9      	uxtbne	r1, r1
		return 0xff;
   14bfe:	bf08      	it	eq
   14c00:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   14c02:	a803      	add	r0, sp, #12
   14c04:	f018 fce6 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(pub->period));
   14c08:	68e1      	ldr	r1, [r4, #12]
	if (!val) {
   14c0a:	b149      	cbz	r1, 14c20 <hb_pub_send_status+0x70>
	} else if (val == 0xffff) {
   14c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14c10:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   14c12:	bf1d      	ittte	ne
   14c14:	fab1 f181 	clzne	r1, r1
   14c18:	f1c1 0120 	rsbne	r1, r1, #32
   14c1c:	b2c9      	uxtbne	r1, r1
		return 0xff;
   14c1e:	21ff      	moveq	r1, #255	; 0xff
   14c20:	a803      	add	r0, sp, #12
   14c22:	f018 fcd7 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, pub->ttl);
   14c26:	7921      	ldrb	r1, [r4, #4]
   14c28:	a803      	add	r0, sp, #12
   14c2a:	f018 fcd3 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->feat);
   14c2e:	88e1      	ldrh	r1, [r4, #6]
   14c30:	a803      	add	r0, sp, #12
   14c32:	f018 fcd6 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, pub->net_idx);
   14c36:	8921      	ldrh	r1, [r4, #8]
   14c38:	a803      	add	r0, sp, #12
   14c3a:	f018 fcd2 	bl	2d5e2 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   14c3e:	2300      	movs	r3, #0
   14c40:	9300      	str	r3, [sp, #0]
   14c42:	aa03      	add	r2, sp, #12
   14c44:	4631      	mov	r1, r6
   14c46:	4628      	mov	r0, r5
   14c48:	f016 fe87 	bl	2b95a <bt_mesh_model_send>
   14c4c:	b118      	cbz	r0, 14c56 <hb_pub_send_status+0xa6>
		BT_ERR("Unable to send Heartbeat Publication Status");
   14c4e:	2145      	movs	r1, #69	; 0x45
   14c50:	4802      	ldr	r0, [pc, #8]	; (14c5c <hb_pub_send_status+0xac>)
   14c52:	f012 fe3e 	bl	278d2 <printk>
}
   14c56:	b00b      	add	sp, #44	; 0x2c
   14c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c5a:	bf00      	nop
   14c5c:	000341b7 	.word	0x000341b7

00014c60 <heartbeat_pub_set>:
{
   14c60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14c64:	460e      	mov	r6, r1
	struct hb_pub_param *param = (void *)buf->data;
   14c66:	6811      	ldr	r1, [r2, #0]
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   14c68:	788c      	ldrb	r4, [r1, #2]
	pub.dst = sys_le16_to_cpu(param->dst);
   14c6a:	880b      	ldrh	r3, [r1, #0]
   14c6c:	f8ad 3000 	strh.w	r3, [sp]
{
   14c70:	4605      	mov	r5, r0
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   14c72:	4620      	mov	r0, r4
	pub.dst = sys_le16_to_cpu(param->dst);
   14c74:	b29f      	uxth	r7, r3
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   14c76:	f016 feee 	bl	2ba56 <bt_mesh_hb_pwr2>
   14c7a:	f8ad 0002 	strh.w	r0, [sp, #2]
	pub.period = bt_mesh_hb_pwr2(param->period_log);
   14c7e:	f891 8003 	ldrb.w	r8, [r1, #3]
   14c82:	4640      	mov	r0, r8
   14c84:	f016 fee7 	bl	2ba56 <bt_mesh_hb_pwr2>
   14c88:	9003      	str	r0, [sp, #12]
	pub.ttl = param->ttl;
   14c8a:	790b      	ldrb	r3, [r1, #4]
   14c8c:	f88d 3004 	strb.w	r3, [sp, #4]
	pub.feat = sys_le16_to_cpu(param->feat);
   14c90:	794a      	ldrb	r2, [r1, #5]
   14c92:	7988      	ldrb	r0, [r1, #6]
   14c94:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   14c98:	f8ad 2006 	strh.w	r2, [sp, #6]
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   14c9c:	f8b1 1007 	ldrh.w	r1, [r1, #7]
   14ca0:	f8ad 1008 	strh.w	r1, [sp, #8]
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   14ca4:	f487 4700 	eor.w	r7, r7, #32768	; 0x8000
   14ca8:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   14cac:	b28a      	uxth	r2, r1
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   14cae:	d322      	bcc.n	14cf6 <heartbeat_pub_set+0x96>
	if (param->count_log > 0x11 && param->count_log != 0xff) {
   14cb0:	3c12      	subs	r4, #18
   14cb2:	b2e4      	uxtb	r4, r4
   14cb4:	2cec      	cmp	r4, #236	; 0xec
   14cb6:	d920      	bls.n	14cfa <heartbeat_pub_set+0x9a>
	if (param->period_log > 0x10) {
   14cb8:	f1b8 0f10 	cmp.w	r8, #16
   14cbc:	d81d      	bhi.n	14cfa <heartbeat_pub_set+0x9a>
	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
   14cbe:	f083 0180 	eor.w	r1, r3, #128	; 0x80
   14cc2:	297e      	cmp	r1, #126	; 0x7e
   14cc4:	d807      	bhi.n	14cd6 <heartbeat_pub_set+0x76>
		BT_ERR("Invalid TTL value 0x%02x", param->ttl);
   14cc6:	480e      	ldr	r0, [pc, #56]	; (14d00 <heartbeat_pub_set+0xa0>)
   14cc8:	461a      	mov	r2, r3
   14cca:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid NetKeyIndex 0x%04x", pub.net_idx);
   14ccc:	f012 fe01 	bl	278d2 <printk>
}
   14cd0:	b004      	add	sp, #16
   14cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pub.net_idx > 0xfff) {
   14cd6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   14cda:	d302      	bcc.n	14ce2 <heartbeat_pub_set+0x82>
		BT_ERR("Invalid NetKeyIndex 0x%04x", pub.net_idx);
   14cdc:	2145      	movs	r1, #69	; 0x45
   14cde:	4809      	ldr	r0, [pc, #36]	; (14d04 <heartbeat_pub_set+0xa4>)
   14ce0:	e7f4      	b.n	14ccc <heartbeat_pub_set+0x6c>
	status = bt_mesh_hb_pub_set(&pub);
   14ce2:	4668      	mov	r0, sp
   14ce4:	f7fd fa44 	bl	12170 <bt_mesh_hb_pub_set>
   14ce8:	4602      	mov	r2, r0
	hb_pub_send_status(model, ctx, status, &pub);
   14cea:	466b      	mov	r3, sp
   14cec:	4631      	mov	r1, r6
   14cee:	4628      	mov	r0, r5
   14cf0:	f7ff ff5e 	bl	14bb0 <hb_pub_send_status>
   14cf4:	e7ec      	b.n	14cd0 <heartbeat_pub_set+0x70>
		status = STATUS_INVALID_ADDRESS;
   14cf6:	2201      	movs	r2, #1
   14cf8:	e7f7      	b.n	14cea <heartbeat_pub_set+0x8a>
		status = STATUS_CANNOT_SET;
   14cfa:	220f      	movs	r2, #15
   14cfc:	e7f5      	b.n	14cea <heartbeat_pub_set+0x8a>
   14cfe:	bf00      	nop
   14d00:	00034391 	.word	0x00034391
   14d04:	00033fc5 	.word	0x00033fc5

00014d08 <bt_mesh_cfg_reset>:
	}
}

void bt_mesh_cfg_reset(void)
{
	bt_mesh_model_foreach(mod_reset, NULL);
   14d08:	2100      	movs	r1, #0
   14d0a:	4801      	ldr	r0, [pc, #4]	; (14d10 <bt_mesh_cfg_reset+0x8>)
   14d0c:	f7fd be2a 	b.w	12964 <bt_mesh_model_foreach>
   14d10:	0002ba7f 	.word	0x0002ba7f

00014d14 <health_period_set_unrel>:
}

static void health_period_set_unrel(struct bt_mesh_model *model,
				    struct bt_mesh_msg_ctx *ctx,
				    struct net_buf_simple *buf)
{
   14d14:	b510      	push	{r4, lr}
   14d16:	4604      	mov	r4, r0
	uint8_t period;

	period = net_buf_simple_pull_u8(buf);
   14d18:	4610      	mov	r0, r2
   14d1a:	f018 fc09 	bl	2d530 <net_buf_simple_pull_u8>
	if (period > 15) {
   14d1e:	280f      	cmp	r0, #15
	period = net_buf_simple_pull_u8(buf);
   14d20:	4602      	mov	r2, r0
	if (period > 15) {
   14d22:	d905      	bls.n	14d30 <health_period_set_unrel+0x1c>
		BT_WARN("Prohibited period value %u", period);
   14d24:	2157      	movs	r1, #87	; 0x57
   14d26:	4805      	ldr	r0, [pc, #20]	; (14d3c <health_period_set_unrel+0x28>)
	}

	BT_DBG("period %u", period);

	model->pub->period_div = period;
}
   14d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Prohibited period value %u", period);
   14d2c:	f012 bdd1 	b.w	278d2 <printk>
	model->pub->period_div = period;
   14d30:	68a3      	ldr	r3, [r4, #8]
   14d32:	7ad9      	ldrb	r1, [r3, #11]
   14d34:	f360 0103 	bfi	r1, r0, #0, #4
   14d38:	72d9      	strb	r1, [r3, #11]
}
   14d3a:	bd10      	pop	{r4, pc}
   14d3c:	000347c2 	.word	0x000347c2

00014d40 <health_get_registered>:
{
   14d40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14d44:	4614      	mov	r4, r2
	struct bt_mesh_health_srv *srv = mod->user_data;
   14d46:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
   14d4a:	460f      	mov	r7, r1
   14d4c:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_FAULT_STATUS);
   14d4e:	2105      	movs	r1, #5
   14d50:	4610      	mov	r0, r2
   14d52:	f016 fdd9 	bl	2b908 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   14d56:	2101      	movs	r1, #1
   14d58:	4620      	mov	r0, r4
   14d5a:	f00b f921 	bl	1ffa0 <net_buf_simple_add>
	net_buf_simple_add_le16(msg, company_id);
   14d5e:	4639      	mov	r1, r7
	test_id = net_buf_simple_add(msg, 1);
   14d60:	4605      	mov	r5, r0
	net_buf_simple_add_le16(msg, company_id);
   14d62:	4620      	mov	r0, r4
   14d64:	f018 fc3d 	bl	2d5e2 <net_buf_simple_add_le16>
	if (srv->cb && srv->cb->fault_get_reg) {
   14d68:	f8d8 3004 	ldr.w	r3, [r8, #4]
   14d6c:	b333      	cbz	r3, 14dbc <health_get_registered+0x7c>
   14d6e:	685b      	ldr	r3, [r3, #4]
   14d70:	b323      	cbz	r3, 14dbc <health_get_registered+0x7c>
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   14d72:	4620      	mov	r0, r4
   14d74:	f018 fc1a 	bl	2d5ac <net_buf_simple_tailroom>
   14d78:	3804      	subs	r0, #4
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   14d7a:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return buf->data + buf->len;
   14d7e:	6822      	ldr	r2, [r4, #0]
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   14d80:	f88d 000f 	strb.w	r0, [sp, #15]
   14d84:	88a3      	ldrh	r3, [r4, #4]
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   14d86:	f10d 000f 	add.w	r0, sp, #15
   14d8a:	9000      	str	r0, [sp, #0]
   14d8c:	f8d1 8004 	ldr.w	r8, [r1, #4]
   14d90:	4413      	add	r3, r2
   14d92:	4639      	mov	r1, r7
   14d94:	462a      	mov	r2, r5
   14d96:	4630      	mov	r0, r6
   14d98:	47c0      	blx	r8
		if (err) {
   14d9a:	4602      	mov	r2, r0
   14d9c:	b130      	cbz	r0, 14dac <health_get_registered+0x6c>
			BT_ERR("Failed to get faults (err %d)", err);
   14d9e:	2145      	movs	r1, #69	; 0x45
   14da0:	4809      	ldr	r0, [pc, #36]	; (14dc8 <health_get_registered+0x88>)
   14da2:	f012 fd96 	bl	278d2 <printk>
		*test_id = HEALTH_TEST_STANDARD;
   14da6:	2300      	movs	r3, #0
   14da8:	702b      	strb	r3, [r5, #0]
}
   14daa:	e004      	b.n	14db6 <health_get_registered+0x76>
			net_buf_simple_add(msg, fault_count);
   14dac:	f89d 100f 	ldrb.w	r1, [sp, #15]
   14db0:	4620      	mov	r0, r4
   14db2:	f00b f8f5 	bl	1ffa0 <net_buf_simple_add>
}
   14db6:	b004      	add	sp, #16
   14db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No callback for getting faults");
   14dbc:	2157      	movs	r1, #87	; 0x57
   14dbe:	4803      	ldr	r0, [pc, #12]	; (14dcc <health_get_registered+0x8c>)
   14dc0:	f012 fd87 	bl	278d2 <printk>
   14dc4:	e7ef      	b.n	14da6 <health_get_registered+0x66>
   14dc6:	bf00      	nop
   14dc8:	0003477b 	.word	0x0003477b
   14dcc:	0003479e 	.word	0x0003479e

00014dd0 <health_fault_test>:
{
   14dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14dd4:	4615      	mov	r5, r2
   14dd6:	b0aa      	sub	sp, #168	; 0xa8
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   14dd8:	ab06      	add	r3, sp, #24
   14dda:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
	struct bt_mesh_health_srv *srv = model->user_data;
   14dde:	f8d0 8018 	ldr.w	r8, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   14de2:	9303      	str	r3, [sp, #12]
{
   14de4:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   14de6:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   14de8:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   14dec:	460e      	mov	r6, r1
	test_id = net_buf_simple_pull_u8(buf);
   14dee:	f018 fb9f 	bl	2d530 <net_buf_simple_pull_u8>
   14df2:	4607      	mov	r7, r0
	company_id = net_buf_simple_pull_le16(buf);
   14df4:	4628      	mov	r0, r5
   14df6:	f018 fba3 	bl	2d540 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   14dfa:	f8d8 3004 	ldr.w	r3, [r8, #4]
	company_id = net_buf_simple_pull_le16(buf);
   14dfe:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_test) {
   14e00:	b173      	cbz	r3, 14e20 <health_fault_test+0x50>
   14e02:	68db      	ldr	r3, [r3, #12]
   14e04:	b163      	cbz	r3, 14e20 <health_fault_test+0x50>
		err = srv->cb->fault_test(model, test_id, company_id);
   14e06:	4602      	mov	r2, r0
   14e08:	4639      	mov	r1, r7
   14e0a:	4620      	mov	r0, r4
   14e0c:	4798      	blx	r3
		if (err) {
   14e0e:	4602      	mov	r2, r0
   14e10:	b130      	cbz	r0, 14e20 <health_fault_test+0x50>
			BT_WARN("Running fault test failed with err %d", err);
   14e12:	2157      	movs	r1, #87	; 0x57
   14e14:	480c      	ldr	r0, [pc, #48]	; (14e48 <health_fault_test+0x78>)
   14e16:	f012 fd5c 	bl	278d2 <printk>
}
   14e1a:	b02a      	add	sp, #168	; 0xa8
   14e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	health_get_registered(model, company_id, &sdu);
   14e20:	aa03      	add	r2, sp, #12
   14e22:	4629      	mov	r1, r5
   14e24:	4620      	mov	r0, r4
   14e26:	f7ff ff8b 	bl	14d40 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   14e2a:	2300      	movs	r3, #0
   14e2c:	9300      	str	r3, [sp, #0]
   14e2e:	aa03      	add	r2, sp, #12
   14e30:	4631      	mov	r1, r6
   14e32:	4620      	mov	r0, r4
   14e34:	f016 fd91 	bl	2b95a <bt_mesh_model_send>
   14e38:	2800      	cmp	r0, #0
   14e3a:	d0ee      	beq.n	14e1a <health_fault_test+0x4a>
		BT_ERR("Unable to send Health Current Status response");
   14e3c:	2145      	movs	r1, #69	; 0x45
   14e3e:	4803      	ldr	r0, [pc, #12]	; (14e4c <health_fault_test+0x7c>)
   14e40:	f012 fd47 	bl	278d2 <printk>
   14e44:	e7e9      	b.n	14e1a <health_fault_test+0x4a>
   14e46:	bf00      	nop
   14e48:	0003471d 	.word	0x0003471d
   14e4c:	00034748 	.word	0x00034748

00014e50 <health_pub_update>:
	{ OP_ATTENTION_SET_UNREL,      1,   attention_set_unrel },
	BT_MESH_MODEL_OP_END,
};

static int health_pub_update(struct bt_mesh_model *mod)
{
   14e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
   14e54:	6886      	ldr	r6, [r0, #8]
	struct bt_mesh_health_srv *srv = mod->user_data;
   14e56:	f8d0 a018 	ldr.w	sl, [r0, #24]
	size_t count;

	BT_DBG("");

	count = health_get_current(mod, pub->msg);
   14e5a:	6934      	ldr	r4, [r6, #16]
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   14e5c:	2104      	movs	r1, #4
{
   14e5e:	4680      	mov	r8, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   14e60:	4620      	mov	r0, r4
   14e62:	f016 fd51 	bl	2b908 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   14e66:	2101      	movs	r1, #1
   14e68:	4620      	mov	r0, r4
   14e6a:	f00b f899 	bl	1ffa0 <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   14e6e:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
   14e70:	4607      	mov	r7, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   14e72:	4620      	mov	r0, r4
   14e74:	f00b f894 	bl	1ffa0 <net_buf_simple_add>
   14e78:	4605      	mov	r5, r0
	comp = bt_mesh_comp_get();
   14e7a:	f7fe f999 	bl	131b0 <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
   14e7e:	f8da 3004 	ldr.w	r3, [sl, #4]
	comp = bt_mesh_comp_get();
   14e82:	4681      	mov	r9, r0
	if (srv->cb && srv->cb->fault_get_cur) {
   14e84:	2b00      	cmp	r3, #0
   14e86:	d03d      	beq.n	14f04 <health_pub_update+0xb4>
   14e88:	681b      	ldr	r3, [r3, #0]
   14e8a:	2b00      	cmp	r3, #0
   14e8c:	d03a      	beq.n	14f04 <health_pub_update+0xb4>
		fault_count = net_buf_simple_tailroom(msg);
   14e8e:	4620      	mov	r0, r4
   14e90:	f018 fb8c 	bl	2d5ac <net_buf_simple_tailroom>
   14e94:	f88d 000d 	strb.w	r0, [sp, #13]
   14e98:	6822      	ldr	r2, [r4, #0]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
   14e9a:	f8da 1004 	ldr.w	r1, [sl, #4]
   14e9e:	88a3      	ldrh	r3, [r4, #4]
   14ea0:	f10d 000d 	add.w	r0, sp, #13
   14ea4:	9000      	str	r0, [sp, #0]
   14ea6:	f8d1 a000 	ldr.w	sl, [r1]
   14eaa:	4413      	add	r3, r2
   14eac:	4639      	mov	r1, r7
   14eae:	f10d 020e 	add.w	r2, sp, #14
   14eb2:	4640      	mov	r0, r8
   14eb4:	47d0      	blx	sl
		if (err) {
   14eb6:	4602      	mov	r2, r0
   14eb8:	b168      	cbz	r0, 14ed6 <health_pub_update+0x86>
			BT_ERR("Failed to get faults (err %d)", err);
   14eba:	2145      	movs	r1, #69	; 0x45
   14ebc:	4814      	ldr	r0, [pc, #80]	; (14f10 <health_pub_update+0xc0>)
   14ebe:	f012 fd08 	bl	278d2 <printk>
		sys_put_le16(comp->cid, company_ptr);
   14ec2:	f8b9 3000 	ldrh.w	r3, [r9]
	dst[0] = val;
   14ec6:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   14ec8:	0a1b      	lsrs	r3, r3, #8
   14eca:	706b      	strb	r3, [r5, #1]
		*test_id = HEALTH_TEST_STANDARD;
   14ecc:	2300      	movs	r3, #0
   14ece:	703b      	strb	r3, [r7, #0]
		fault_count = 0U;
   14ed0:	f88d 300d 	strb.w	r3, [sp, #13]
   14ed4:	e009      	b.n	14eea <health_pub_update+0x9a>
			sys_put_le16(company_id, company_ptr);
   14ed6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	dst[0] = val;
   14eda:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   14edc:	0a1b      	lsrs	r3, r3, #8
   14ede:	706b      	strb	r3, [r5, #1]
			net_buf_simple_add(msg, fault_count);
   14ee0:	f89d 100d 	ldrb.w	r1, [sp, #13]
   14ee4:	4620      	mov	r0, r4
   14ee6:	f00b f85b 	bl	1ffa0 <net_buf_simple_add>
	return fault_count;
   14eea:	f89d 300d 	ldrb.w	r3, [sp, #13]
	if (count) {
   14eee:	7af2      	ldrb	r2, [r6, #11]
   14ef0:	3300      	adds	r3, #0
   14ef2:	bf18      	it	ne
   14ef4:	2301      	movne	r3, #1
   14ef6:	f363 1204 	bfi	r2, r3, #4, #1
	} else {
		pub->fast_period = 0U;
	}

	return 0;
}
   14efa:	2000      	movs	r0, #0
   14efc:	72f2      	strb	r2, [r6, #11]
   14efe:	b004      	add	sp, #16
   14f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No callback for getting faults");
   14f04:	2157      	movs	r1, #87	; 0x57
   14f06:	4803      	ldr	r0, [pc, #12]	; (14f14 <health_pub_update+0xc4>)
   14f08:	f012 fce3 	bl	278d2 <printk>
   14f0c:	e7d9      	b.n	14ec2 <health_pub_update+0x72>
   14f0e:	bf00      	nop
   14f10:	0003477b 	.word	0x0003477b
   14f14:	0003479e 	.word	0x0003479e

00014f18 <send_health_period_status>:
{
   14f18:	b530      	push	{r4, r5, lr}
   14f1a:	4604      	mov	r4, r0
   14f1c:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   14f1e:	ab03      	add	r3, sp, #12
   14f20:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   14f24:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   14f26:	a805      	add	r0, sp, #20
   14f28:	f248 0137 	movw	r1, #32823	; 0x8037
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   14f2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14f30:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   14f32:	f016 fce9 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, model->pub->period_div);
   14f36:	68a3      	ldr	r3, [r4, #8]
   14f38:	7ad9      	ldrb	r1, [r3, #11]
   14f3a:	a805      	add	r0, sp, #20
   14f3c:	f001 010f 	and.w	r1, r1, #15
   14f40:	f018 fb48 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   14f44:	2300      	movs	r3, #0
   14f46:	9300      	str	r3, [sp, #0]
   14f48:	aa05      	add	r2, sp, #20
   14f4a:	4629      	mov	r1, r5
   14f4c:	4620      	mov	r0, r4
   14f4e:	f016 fd04 	bl	2b95a <bt_mesh_model_send>
   14f52:	b118      	cbz	r0, 14f5c <send_health_period_status+0x44>
		BT_ERR("Unable to send Health Period Status");
   14f54:	2145      	movs	r1, #69	; 0x45
   14f56:	4802      	ldr	r0, [pc, #8]	; (14f60 <send_health_period_status+0x48>)
   14f58:	f012 fcbb 	bl	278d2 <printk>
}
   14f5c:	b009      	add	sp, #36	; 0x24
   14f5e:	bd30      	pop	{r4, r5, pc}
   14f60:	0003485c 	.word	0x0003485c

00014f64 <send_attention_status>:
{
   14f64:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f66:	4605      	mov	r5, r0
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   14f68:	6980      	ldr	r0, [r0, #24]
   14f6a:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_ATTENTION_STATUS, 1);
   14f6c:	ab03      	add	r3, sp, #12
   14f6e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   14f72:	3018      	adds	r0, #24
   14f74:	9305      	str	r3, [sp, #20]
   14f76:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   14f7a:	460f      	mov	r7, r1
   14f7c:	f010 fcd4 	bl	25928 <z_timeout_remaining>
	bt_mesh_model_msg_init(&msg, OP_ATTENTION_STATUS);
   14f80:	f248 0107 	movw	r1, #32775	; 0x8007
   14f84:	4604      	mov	r4, r0
   14f86:	a805      	add	r0, sp, #20
   14f88:	f016 fcbe 	bl	2b908 <bt_mesh_model_msg_init>
			return (uint32_t)((t * to_hz + off) / from_hz);
   14f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   14f90:	fba4 2300 	umull	r2, r3, r4, r0
   14f94:	0bd1      	lsrs	r1, r2, #15
   14f96:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
   14f9a:	2600      	movs	r6, #0
	time = k_delayed_work_remaining_get(&srv->attn_timer) / 1000;
   14f9c:	fbb1 f1f0 	udiv	r1, r1, r0
	net_buf_simple_add_u8(&msg, time);
   14fa0:	a805      	add	r0, sp, #20
   14fa2:	b2c9      	uxtb	r1, r1
   14fa4:	f018 fb16 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   14fa8:	9600      	str	r6, [sp, #0]
   14faa:	4633      	mov	r3, r6
   14fac:	aa05      	add	r2, sp, #20
   14fae:	4639      	mov	r1, r7
   14fb0:	4628      	mov	r0, r5
   14fb2:	f016 fcd2 	bl	2b95a <bt_mesh_model_send>
   14fb6:	b118      	cbz	r0, 14fc0 <send_attention_status+0x5c>
		BT_ERR("Unable to send Attention Status");
   14fb8:	2145      	movs	r1, #69	; 0x45
   14fba:	4802      	ldr	r0, [pc, #8]	; (14fc4 <send_attention_status+0x60>)
   14fbc:	f012 fc89 	bl	278d2 <printk>
}
   14fc0:	b009      	add	sp, #36	; 0x24
   14fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14fc4:	00034837 	.word	0x00034837

00014fc8 <health_fault_clear>:
{
   14fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fca:	b0ab      	sub	sp, #172	; 0xac
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   14fcc:	ab06      	add	r3, sp, #24
	struct bt_mesh_health_srv *srv = model->user_data;
   14fce:	6987      	ldr	r7, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   14fd0:	9303      	str	r3, [sp, #12]
{
   14fd2:	4604      	mov	r4, r0
   14fd4:	460e      	mov	r6, r1
	company_id = net_buf_simple_pull_le16(buf);
   14fd6:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   14fd8:	f44f 0110 	mov.w	r1, #9437184	; 0x900000
   14fdc:	e9cd 1304 	strd	r1, r3, [sp, #16]
	company_id = net_buf_simple_pull_le16(buf);
   14fe0:	f018 faae 	bl	2d540 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   14fe4:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   14fe6:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_clear) {
   14fe8:	b123      	cbz	r3, 14ff4 <health_fault_clear+0x2c>
   14fea:	689b      	ldr	r3, [r3, #8]
   14fec:	b113      	cbz	r3, 14ff4 <health_fault_clear+0x2c>
		srv->cb->fault_clear(model, company_id);
   14fee:	4601      	mov	r1, r0
   14ff0:	4620      	mov	r0, r4
   14ff2:	4798      	blx	r3
	health_get_registered(model, company_id, &sdu);
   14ff4:	aa03      	add	r2, sp, #12
   14ff6:	4629      	mov	r1, r5
   14ff8:	4620      	mov	r0, r4
   14ffa:	f7ff fea1 	bl	14d40 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   14ffe:	2300      	movs	r3, #0
   15000:	9300      	str	r3, [sp, #0]
   15002:	aa03      	add	r2, sp, #12
   15004:	4631      	mov	r1, r6
   15006:	4620      	mov	r0, r4
   15008:	f016 fca7 	bl	2b95a <bt_mesh_model_send>
   1500c:	b118      	cbz	r0, 15016 <health_fault_clear+0x4e>
		BT_ERR("Unable to send Health Current Status response");
   1500e:	2145      	movs	r1, #69	; 0x45
   15010:	4802      	ldr	r0, [pc, #8]	; (1501c <health_fault_clear+0x54>)
   15012:	f012 fc5e 	bl	278d2 <printk>
}
   15016:	b02b      	add	sp, #172	; 0xac
   15018:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1501a:	bf00      	nop
   1501c:	00034748 	.word	0x00034748

00015020 <health_srv_init>:
		srv->cb->attn_off(srv->model);
	}
}

static int health_srv_init(struct bt_mesh_model *model)
{
   15020:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   15022:	6984      	ldr	r4, [r0, #24]
{
   15024:	4605      	mov	r5, r0

	if (!srv) {
   15026:	b934      	cbnz	r4, 15036 <health_srv_init+0x16>
		BT_ERR("No Health Server context provided");
   15028:	480e      	ldr	r0, [pc, #56]	; (15064 <health_srv_init+0x44>)
   1502a:	2145      	movs	r1, #69	; 0x45
		return -EINVAL;
	}

	if (!model->pub) {
		BT_ERR("Health Server has no publication support");
   1502c:	f012 fc51 	bl	278d2 <printk>
		return -EINVAL;
   15030:	f06f 0015 	mvn.w	r0, #21
	if (bt_mesh_model_in_primary(model)) {
		health_srv = srv;
	}

	return 0;
}
   15034:	bd38      	pop	{r3, r4, r5, pc}
	if (!model->pub) {
   15036:	6883      	ldr	r3, [r0, #8]
   15038:	b913      	cbnz	r3, 15040 <health_srv_init+0x20>
		BT_ERR("Health Server has no publication support");
   1503a:	2145      	movs	r1, #69	; 0x45
   1503c:	480a      	ldr	r0, [pc, #40]	; (15068 <health_srv_init+0x48>)
   1503e:	e7f5      	b.n	1502c <health_srv_init+0xc>
	model->pub->update = health_pub_update;
   15040:	4a0a      	ldr	r2, [pc, #40]	; (1506c <health_srv_init+0x4c>)
   15042:	615a      	str	r2, [r3, #20]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15044:	2100      	movs	r1, #0
   15046:	2230      	movs	r2, #48	; 0x30
   15048:	f104 0008 	add.w	r0, r4, #8
   1504c:	f019 f968 	bl	2e320 <memset>
   15050:	4b07      	ldr	r3, [pc, #28]	; (15070 <health_srv_init+0x50>)
   15052:	60e3      	str	r3, [r4, #12]
	srv->model = model;
   15054:	6025      	str	r5, [r4, #0]
	if (bt_mesh_model_in_primary(model)) {
   15056:	7928      	ldrb	r0, [r5, #4]
   15058:	b910      	cbnz	r0, 15060 <health_srv_init+0x40>
		health_srv = srv;
   1505a:	4b06      	ldr	r3, [pc, #24]	; (15074 <health_srv_init+0x54>)
   1505c:	601c      	str	r4, [r3, #0]
   1505e:	e7e9      	b.n	15034 <health_srv_init+0x14>
	return 0;
   15060:	2000      	movs	r0, #0
   15062:	e7e7      	b.n	15034 <health_srv_init+0x14>
   15064:	000347e2 	.word	0x000347e2
   15068:	00034809 	.word	0x00034809
   1506c:	00014e51 	.word	0x00014e51
   15070:	0002bc7d 	.word	0x0002bc7d
   15074:	20003cc4 	.word	0x20003cc4

00015078 <health_fault_get>:
{
   15078:	b530      	push	{r4, r5, lr}
   1507a:	b0ab      	sub	sp, #172	; 0xac
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1507c:	ab06      	add	r3, sp, #24
{
   1507e:	4604      	mov	r4, r0
   15080:	460d      	mov	r5, r1
	company_id = net_buf_simple_pull_le16(buf);
   15082:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   15084:	f44f 0110 	mov.w	r1, #9437184	; 0x900000
   15088:	e9cd 1304 	strd	r1, r3, [sp, #16]
   1508c:	9303      	str	r3, [sp, #12]
	company_id = net_buf_simple_pull_le16(buf);
   1508e:	f018 fa57 	bl	2d540 <net_buf_simple_pull_le16>
	health_get_registered(model, company_id, &sdu);
   15092:	aa03      	add	r2, sp, #12
   15094:	4601      	mov	r1, r0
   15096:	4620      	mov	r0, r4
   15098:	f7ff fe52 	bl	14d40 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1509c:	2300      	movs	r3, #0
   1509e:	9300      	str	r3, [sp, #0]
   150a0:	aa03      	add	r2, sp, #12
   150a2:	4629      	mov	r1, r5
   150a4:	4620      	mov	r0, r4
   150a6:	f016 fc58 	bl	2b95a <bt_mesh_model_send>
   150aa:	b118      	cbz	r0, 150b4 <health_fault_get+0x3c>
		BT_ERR("Unable to send Health Current Status response");
   150ac:	2145      	movs	r1, #69	; 0x45
   150ae:	4802      	ldr	r0, [pc, #8]	; (150b8 <health_fault_get+0x40>)
   150b0:	f012 fc0f 	bl	278d2 <printk>
}
   150b4:	b02b      	add	sp, #172	; 0xac
   150b6:	bd30      	pop	{r4, r5, pc}
   150b8:	00034748 	.word	0x00034748

000150bc <bt_mesh_attention>:
const struct bt_mesh_model_cb bt_mesh_health_srv_cb = {
	.init = health_srv_init,
};

void bt_mesh_attention(struct bt_mesh_model *model, uint8_t time)
{
   150bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150c0:	460f      	mov	r7, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
   150c2:	4605      	mov	r5, r0
   150c4:	bb60      	cbnz	r0, 15120 <bt_mesh_attention+0x64>
		srv = health_srv;
   150c6:	4b1e      	ldr	r3, [pc, #120]	; (15140 <bt_mesh_attention+0x84>)
   150c8:	681c      	ldr	r4, [r3, #0]
		if (!srv) {
   150ca:	b92c      	cbnz	r4, 150d8 <bt_mesh_attention+0x1c>
			BT_WARN("No Health Server available");
   150cc:	2157      	movs	r1, #87	; 0x57
   150ce:	481d      	ldr	r0, [pc, #116]	; (15144 <bt_mesh_attention+0x88>)

		if (srv->cb && srv->cb->attn_off) {
			srv->cb->attn_off(model);
		}
	}
}
   150d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("No Health Server available");
   150d4:	f012 bbfd 	b.w	278d2 <printk>
		model = srv->model;
   150d8:	6825      	ldr	r5, [r4, #0]
	if (time > 0) {
   150da:	f104 0608 	add.w	r6, r4, #8
   150de:	b30f      	cbz	r7, 15124 <bt_mesh_attention+0x68>
		if (srv->cb && srv->cb->attn_on) {
   150e0:	6863      	ldr	r3, [r4, #4]
   150e2:	b11b      	cbz	r3, 150ec <bt_mesh_attention+0x30>
   150e4:	691b      	ldr	r3, [r3, #16]
   150e6:	b10b      	cbz	r3, 150ec <bt_mesh_attention+0x30>
			srv->cb->attn_on(model);
   150e8:	4628      	mov	r0, r5
   150ea:	4798      	blx	r3
		k_delayed_work_submit(&srv->attn_timer, K_SECONDS(time));
   150ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   150f0:	fb03 f107 	mul.w	r1, r3, r7
			return (t * to_hz + off) / from_hz;
   150f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   150f8:	f240 34e7 	movw	r4, #999	; 0x3e7
   150fc:	2500      	movs	r5, #0
   150fe:	fbe0 4501 	umlal	r4, r5, r0, r1
   15102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15106:	2300      	movs	r3, #0
   15108:	4620      	mov	r0, r4
   1510a:	4629      	mov	r1, r5
   1510c:	f7ec fc3e 	bl	198c <__aeabi_uldivmod>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15110:	4602      	mov	r2, r0
   15112:	460b      	mov	r3, r1
   15114:	480c      	ldr	r0, [pc, #48]	; (15148 <bt_mesh_attention+0x8c>)
   15116:	4631      	mov	r1, r6
}
   15118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1511c:	f010 b9bc 	b.w	25498 <k_delayed_work_submit_to_queue>
		srv = model->user_data;
   15120:	6984      	ldr	r4, [r0, #24]
   15122:	e7da      	b.n	150da <bt_mesh_attention+0x1e>
		k_delayed_work_cancel(&srv->attn_timer);
   15124:	4630      	mov	r0, r6
   15126:	f010 fa27 	bl	25578 <k_delayed_work_cancel>
		if (srv->cb && srv->cb->attn_off) {
   1512a:	6863      	ldr	r3, [r4, #4]
   1512c:	b12b      	cbz	r3, 1513a <bt_mesh_attention+0x7e>
   1512e:	695b      	ldr	r3, [r3, #20]
   15130:	b11b      	cbz	r3, 1513a <bt_mesh_attention+0x7e>
			srv->cb->attn_off(model);
   15132:	4628      	mov	r0, r5
}
   15134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			srv->cb->attn_off(model);
   15138:	4718      	bx	r3
}
   1513a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1513e:	bf00      	nop
   15140:	20003cc4 	.word	0x20003cc4
   15144:	000346fd 	.word	0x000346fd
   15148:	20003028 	.word	0x20003028

0001514c <adv_thread>:

	BT_DBG("Advertising stopped (%u ms)", (uint32_t) k_uptime_delta(&time));
}

static void adv_thread(void *p1, void *p2, void *p3)
{
   1514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15150:	f240 36e7 	movw	r6, #999	; 0x3e7
   15154:	b08b      	sub	sp, #44	; 0x2c
   15156:	2700      	movs	r7, #0

	while (1) {
		struct net_buf *buf;

		if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
			buf = net_buf_get(&bt_mesh_adv_queue, K_NO_WAIT);
   15158:	2200      	movs	r2, #0
   1515a:	2300      	movs	r3, #0
   1515c:	485b      	ldr	r0, [pc, #364]	; (152cc <adv_thread+0x180>)
			while (!buf) {

				/* Adv timeout may be set by a call from proxy
				 * to bt_mesh_adv_start:
				 */
				adv_timeout = SYS_FOREVER_MS;
   1515e:	4c5c      	ldr	r4, [pc, #368]	; (152d0 <adv_thread+0x184>)
			buf = net_buf_get(&bt_mesh_adv_queue, K_NO_WAIT);
   15160:	f00a fcb4 	bl	1facc <net_buf_get>
   15164:	4605      	mov	r5, r0
			while (!buf) {
   15166:	2d00      	cmp	r5, #0
   15168:	d065      	beq.n	15236 <adv_thread+0xea>
		if (!buf) {
			continue;
		}

		/* busy == 0 means this was canceled */
		if (BT_MESH_ADV(buf)->busy) {
   1516a:	696a      	ldr	r2, [r5, #20]
   1516c:	7a13      	ldrb	r3, [r2, #8]
   1516e:	0759      	lsls	r1, r3, #29
   15170:	f140 80a8 	bpl.w	152c4 <adv_thread+0x178>
			BT_MESH_ADV(buf)->busy = 0U;
   15174:	f36f 0382 	bfc	r3, #2, #1
   15178:	7213      	strb	r3, [r2, #8]
		((bt_dev.hci_version >= BT_HCI_VERSION_5_0) ?
   1517a:	4b56      	ldr	r3, [pc, #344]	; (152d4 <adv_thread+0x188>)
	const struct bt_mesh_send_cb *cb = BT_MESH_ADV(buf)->cb;
   1517c:	f8d5 a014 	ldr.w	sl, [r5, #20]
			       ADV_INT_FAST_MS :
   15180:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	struct bt_le_adv_param param = {};
   15184:	2214      	movs	r2, #20
			       ADV_INT_FAST_MS :
   15186:	2b08      	cmp	r3, #8
	struct bt_le_adv_param param = {};
   15188:	eb0d 0002 	add.w	r0, sp, r2
   1518c:	f04f 0100 	mov.w	r1, #0
			       ADV_INT_FAST_MS :
   15190:	bf8c      	ite	hi
   15192:	f04f 0b14 	movhi.w	fp, #20
   15196:	f04f 0b64 	movls.w	fp, #100	; 0x64
	void *cb_data = BT_MESH_ADV(buf)->cb_data;
   1519a:	e9da 8900 	ldrd	r8, r9, [sl]
	struct bt_le_adv_param param = {};
   1519e:	f019 f8bf 	bl	2e320 <memset>
	adv_int = MAX(adv_int_min,
   151a2:	f89a 4009 	ldrb.w	r4, [sl, #9]
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   151a6:	494c      	ldr	r1, [pc, #304]	; (152d8 <adv_thread+0x18c>)
	adv_int = MAX(adv_int_min,
   151a8:	08e3      	lsrs	r3, r4, #3
   151aa:	3301      	adds	r3, #1
   151ac:	220a      	movs	r2, #10
   151ae:	435a      	muls	r2, r3
   151b0:	455a      	cmp	r2, fp
   151b2:	bfa6      	itte	ge
   151b4:	eb03 0383 	addge.w	r3, r3, r3, lsl #2
   151b8:	005b      	lslge	r3, r3, #1
   151ba:	fa1f f38b 	uxthlt.w	r3, fp
		    ((BT_MESH_TRANSMIT_COUNT(BT_MESH_ADV(buf)->xmit) + 1) *
   151be:	f004 0207 	and.w	r2, r4, #7
		     (adv_int + 10)));
   151c2:	f103 040a 	add.w	r4, r3, #10
	duration = (BT_MESH_SCAN_WINDOW_MS +
   151c6:	fb02 4404 	mla	r4, r2, r4, r4
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   151ca:	f89a 2008 	ldrb.w	r2, [sl, #8]
   151ce:	f002 0203 	and.w	r2, r2, #3
	duration = (BT_MESH_SCAN_WINDOW_MS +
   151d2:	341e      	adds	r4, #30
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   151d4:	5c8a      	ldrb	r2, [r1, r2]
   151d6:	f88d 200c 	strb.w	r2, [sp, #12]
	ad.data_len = buf->len;
   151da:	89aa      	ldrh	r2, [r5, #12]
   151dc:	f88d 200d 	strb.w	r2, [sp, #13]
	ad.data = buf->data;
   151e0:	68aa      	ldr	r2, [r5, #8]
   151e2:	9204      	str	r2, [sp, #16]
	duration = (BT_MESH_SCAN_WINDOW_MS +
   151e4:	b224      	sxth	r4, r4
	param.interval_min = BT_MESH_ADV_SCAN_UNIT(adv_int);
   151e6:	2205      	movs	r2, #5
   151e8:	00db      	lsls	r3, r3, #3
   151ea:	fbb3 f3f2 	udiv	r3, r3, r2
	param.interval_max = param.interval_min;
   151ee:	e9cd 3307 	strd	r3, r3, [sp, #28]
   151f2:	f018 ffba 	bl	2e16a <z_impl_k_uptime_ticks>
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
   151f6:	2300      	movs	r3, #0
   151f8:	9300      	str	r3, [sp, #0]
   151fa:	2201      	movs	r2, #1
   151fc:	a903      	add	r1, sp, #12
   151fe:	a805      	add	r0, sp, #20
   15200:	f7f5 fb1c 	bl	a83c <bt_le_adv_start>
   15204:	4682      	mov	sl, r0
	net_buf_unref(buf);
   15206:	4628      	mov	r0, r5
   15208:	f00a fd7a 	bl	1fd00 <net_buf_unref>

static inline void bt_mesh_adv_send_start(uint16_t duration, int err,
					  const struct bt_mesh_send_cb *cb,
					  void *cb_data)
{
	if (cb && cb->start) {
   1520c:	f1b8 0f00 	cmp.w	r8, #0
   15210:	d006      	beq.n	15220 <adv_thread+0xd4>
   15212:	f8d8 3000 	ldr.w	r3, [r8]
   15216:	b11b      	cbz	r3, 15220 <adv_thread+0xd4>
		cb->start(duration, err, cb_data);
   15218:	b2a0      	uxth	r0, r4
   1521a:	464a      	mov	r2, r9
   1521c:	4651      	mov	r1, sl
   1521e:	4798      	blx	r3
	if (err) {
   15220:	f1ba 0f00 	cmp.w	sl, #0
   15224:	d02c      	beq.n	15280 <adv_thread+0x134>
		BT_ERR("Advertising failed: err %d", err);
   15226:	482d      	ldr	r0, [pc, #180]	; (152dc <adv_thread+0x190>)
   15228:	4652      	mov	r2, sl
   1522a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Stopping advertising failed: err %d", err);
   1522c:	f012 fb51 	bl	278d2 <printk>
	z_impl_k_yield();
   15230:	f00f fd64 	bl	24cfc <z_impl_k_yield>
   15234:	e790      	b.n	15158 <adv_thread+0xc>
				adv_timeout = SYS_FOREVER_MS;
   15236:	f04f 33ff 	mov.w	r3, #4294967295
   1523a:	6023      	str	r3, [r4, #0]
				bt_mesh_proxy_adv_start();
   1523c:	f003 fbc8 	bl	189d0 <bt_mesh_proxy_adv_start>
						  SYS_TIMEOUT_MS(adv_timeout));
   15240:	6821      	ldr	r1, [r4, #0]
				buf = net_buf_get(&bt_mesh_adv_queue,
   15242:	1c48      	adds	r0, r1, #1
   15244:	d017      	beq.n	15276 <adv_thread+0x12a>
						  SYS_TIMEOUT_MS(adv_timeout));
   15246:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1524a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1524e:	46b0      	mov	r8, r6
   15250:	46b9      	mov	r9, r7
   15252:	fbc0 8901 	smlal	r8, r9, r0, r1
   15256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1525a:	2300      	movs	r3, #0
   1525c:	4640      	mov	r0, r8
   1525e:	4649      	mov	r1, r9
   15260:	f7ec fb94 	bl	198c <__aeabi_uldivmod>
   15264:	4602      	mov	r2, r0
   15266:	460b      	mov	r3, r1
				buf = net_buf_get(&bt_mesh_adv_queue,
   15268:	4818      	ldr	r0, [pc, #96]	; (152cc <adv_thread+0x180>)
   1526a:	f00a fc2f 	bl	1facc <net_buf_get>
   1526e:	4605      	mov	r5, r0
				bt_le_adv_stop();
   15270:	f7f5 faf2 	bl	a858 <bt_le_adv_stop>
   15274:	e777      	b.n	15166 <adv_thread+0x1a>
				buf = net_buf_get(&bt_mesh_adv_queue,
   15276:	f04f 32ff 	mov.w	r2, #4294967295
   1527a:	f04f 33ff 	mov.w	r3, #4294967295
   1527e:	e7f3      	b.n	15268 <adv_thread+0x11c>
	k_sleep(K_MSEC(duration));
   15280:	b224      	sxth	r4, r4
   15282:	17e5      	asrs	r5, r4, #31
   15284:	03e9      	lsls	r1, r5, #15
   15286:	03e0      	lsls	r0, r4, #15
   15288:	1980      	adds	r0, r0, r6
   1528a:	ea41 4154 	orr.w	r1, r1, r4, lsr #17
   1528e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15292:	f04f 0300 	mov.w	r3, #0
   15296:	eb47 0101 	adc.w	r1, r7, r1
   1529a:	f7ec fb77 	bl	198c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1529e:	f00f fe3b 	bl	24f18 <z_impl_k_sleep>
	err = bt_le_adv_stop();
   152a2:	f7f5 fad9 	bl	a858 <bt_le_adv_stop>
   152a6:	4604      	mov	r4, r0
}

static inline void bt_mesh_adv_send_end(
	int err, const struct bt_mesh_send_cb *cb, void *cb_data)
{
	if (cb && cb->end) {
   152a8:	f1b8 0f00 	cmp.w	r8, #0
   152ac:	d004      	beq.n	152b8 <adv_thread+0x16c>
   152ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
   152b2:	b10b      	cbz	r3, 152b8 <adv_thread+0x16c>
		cb->end(err, cb_data);
   152b4:	4649      	mov	r1, r9
   152b6:	4798      	blx	r3
	if (err) {
   152b8:	2c00      	cmp	r4, #0
   152ba:	d0b9      	beq.n	15230 <adv_thread+0xe4>
		BT_ERR("Stopping advertising failed: err %d", err);
   152bc:	4622      	mov	r2, r4
   152be:	2145      	movs	r1, #69	; 0x45
   152c0:	4807      	ldr	r0, [pc, #28]	; (152e0 <adv_thread+0x194>)
   152c2:	e7b3      	b.n	1522c <adv_thread+0xe0>
			adv_send(buf);
		} else {
			net_buf_unref(buf);
   152c4:	4628      	mov	r0, r5
   152c6:	f00a fd1b 	bl	1fd00 <net_buf_unref>
   152ca:	e7b1      	b.n	15230 <adv_thread+0xe4>
   152cc:	20001ef0 	.word	0x20001ef0
   152d0:	20003cc8 	.word	0x20003cc8
   152d4:	20000ac0 	.word	0x20000ac0
   152d8:	0003292c 	.word	0x0003292c
   152dc:	00034898 	.word	0x00034898
   152e0:	000348b8 	.word	0x000348b8

000152e4 <bt_mesh_adv_update>:
	z_impl_k_queue_cancel_wait(queue);
   152e4:	4801      	ldr	r0, [pc, #4]	; (152ec <bt_mesh_adv_update+0x8>)
   152e6:	f00e bd51 	b.w	23d8c <z_impl_k_queue_cancel_wait>
   152ea:	bf00      	nop
   152ec:	20001ef0 	.word	0x20001ef0

000152f0 <bt_mesh_adv_init>:
{
	/* Will be handled automatically */
}

void bt_mesh_adv_init(void)
{
   152f0:	b510      	push	{r4, lr}
   152f2:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   152f4:	4c0e      	ldr	r4, [pc, #56]	; (15330 <bt_mesh_adv_init+0x40>)
   152f6:	490f      	ldr	r1, [pc, #60]	; (15334 <bt_mesh_adv_init+0x44>)
   152f8:	f04f 32ff 	mov.w	r2, #4294967295
   152fc:	f04f 33ff 	mov.w	r3, #4294967295
   15300:	e9cd 2306 	strd	r2, r3, [sp, #24]
   15304:	2300      	movs	r3, #0
   15306:	f06f 0208 	mvn.w	r2, #8
   1530a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1530e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   15312:	9300      	str	r3, [sp, #0]
   15314:	f44f 7240 	mov.w	r2, #768	; 0x300
   15318:	4b07      	ldr	r3, [pc, #28]	; (15338 <bt_mesh_adv_init+0x48>)
   1531a:	4620      	mov	r0, r4
   1531c:	f00f ff7e 	bl	2521c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   15320:	4906      	ldr	r1, [pc, #24]	; (1533c <bt_mesh_adv_init+0x4c>)
   15322:	4620      	mov	r0, r4
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_KERNEL_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_FOREVER);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}
   15324:	b008      	add	sp, #32
   15326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1532a:	f018 bea4 	b.w	2e076 <z_impl_k_thread_name_set>
   1532e:	bf00      	nop
   15330:	20002ce8 	.word	0x20002ce8
   15334:	20006200 	.word	0x20006200
   15338:	0001514d 	.word	0x0001514d
   1533c:	000348e1 	.word	0x000348e1

00015340 <bt_mesh_adv_enable>:

int bt_mesh_adv_enable(void)
{
   15340:	b508      	push	{r3, lr}
	z_impl_k_thread_start(thread);
   15342:	4802      	ldr	r0, [pc, #8]	; (1534c <bt_mesh_adv_enable+0xc>)
   15344:	f018 fe9c 	bl	2e080 <z_impl_k_thread_start>
	k_thread_start(&adv_thread_data);
	return 0;
}
   15348:	2000      	movs	r0, #0
   1534a:	bd08      	pop	{r3, pc}
   1534c:	20002ce8 	.word	0x20002ce8

00015350 <bt_mesh_adv_start>:

int bt_mesh_adv_start(const struct bt_le_adv_param *param, int32_t duration,
		      const struct bt_data *ad, size_t ad_len,
		      const struct bt_data *sd, size_t sd_len)
{
   15350:	b430      	push	{r4, r5}
	adv_timeout = duration;
   15352:	4d05      	ldr	r5, [pc, #20]	; (15368 <bt_mesh_adv_start+0x18>)
{
   15354:	4614      	mov	r4, r2
	adv_timeout = duration;
   15356:	6029      	str	r1, [r5, #0]
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   15358:	9903      	ldr	r1, [sp, #12]
{
   1535a:	461a      	mov	r2, r3
   1535c:	9b02      	ldr	r3, [sp, #8]
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   1535e:	9102      	str	r1, [sp, #8]
   15360:	4621      	mov	r1, r4
}
   15362:	bc30      	pop	{r4, r5}
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   15364:	f7f5 ba6a 	b.w	a83c <bt_le_adv_start>
   15368:	20003cc8 	.word	0x20003cc8

0001536c <atomic_test_and_clear_bit.constprop.5>:
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
   1536c:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1536e:	2301      	movs	r3, #1
   15370:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15374:	4b0a      	ldr	r3, [pc, #40]	; (153a0 <atomic_test_and_clear_bit.constprop.5+0x34>)
   15376:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1537a:	43c1      	mvns	r1, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1537c:	e853 2f00 	ldrex	r2, [r3]
   15380:	ea02 0c01 	and.w	ip, r2, r1
   15384:	e843 ce00 	strex	lr, ip, [r3]
   15388:	f1be 0f00 	cmp.w	lr, #0
   1538c:	d1f6      	bne.n	1537c <atomic_test_and_clear_bit.constprop.5+0x10>
   1538e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   15392:	4202      	tst	r2, r0
}
   15394:	bf14      	ite	ne
   15396:	2001      	movne	r0, #1
   15398:	2000      	moveq	r0, #0
   1539a:	f85d fb04 	ldr.w	pc, [sp], #4
   1539e:	bf00      	nop
   153a0:	20003ccc 	.word	0x20003ccc

000153a4 <mesh_commit>:

	return 0;
}

static int mesh_commit(void)
{
   153a4:	b508      	push	{r3, lr}
	if (!bt_mesh_subnet_next(NULL)) {
   153a6:	2000      	movs	r0, #0
   153a8:	f7fa fed0 	bl	1014c <bt_mesh_subnet_next>
   153ac:	b1a8      	cbz	r0, 153da <mesh_commit+0x36>
		/* Nothing to do since we're not yet provisioned */
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		bt_mesh_proxy_prov_disable(true);
   153ae:	2001      	movs	r0, #1
   153b0:	f003 fa18 	bl	187e4 <bt_mesh_proxy_prov_disable>
	}

	bt_mesh_net_settings_commit();
   153b4:	f7fa fc98 	bl	fce8 <bt_mesh_net_settings_commit>
	bt_mesh_model_settings_commit();
   153b8:	f7fd ff38 	bl	1322c <bt_mesh_model_settings_commit>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   153bc:	f3bf 8f5b 	dmb	ish
   153c0:	4b07      	ldr	r3, [pc, #28]	; (153e0 <mesh_commit+0x3c>)
   153c2:	e853 2f00 	ldrex	r2, [r3]
   153c6:	f042 0201 	orr.w	r2, r2, #1
   153ca:	e843 2100 	strex	r1, r2, [r3]
   153ce:	2900      	cmp	r1, #0
   153d0:	d1f7      	bne.n	153c2 <mesh_commit+0x1e>
   153d2:	f3bf 8f5b 	dmb	ish

	atomic_set_bit(bt_mesh.flags, BT_MESH_VALID);

	bt_mesh_start();
   153d6:	f7f9 f889 	bl	e4ec <bt_mesh_start>

	return 0;
}
   153da:	2000      	movs	r0, #0
   153dc:	bd08      	pop	{r3, pc}
   153de:	bf00      	nop
   153e0:	20002970 	.word	0x20002970

000153e4 <bt_mesh_settings_set>:
{
   153e4:	b538      	push	{r3, r4, r5, lr}
   153e6:	4604      	mov	r4, r0
   153e8:	4608      	mov	r0, r1
   153ea:	4611      	mov	r1, r2
	len = read_cb(cb_arg, out, read_len);
   153ec:	461a      	mov	r2, r3
{
   153ee:	461d      	mov	r5, r3
	len = read_cb(cb_arg, out, read_len);
   153f0:	47a0      	blx	r4
	if (len < 0) {
   153f2:	1e04      	subs	r4, r0, #0
   153f4:	da06      	bge.n	15404 <bt_mesh_settings_set+0x20>
		BT_ERR("Failed to read value (err %zd)", len);
   153f6:	4622      	mov	r2, r4
   153f8:	2145      	movs	r1, #69	; 0x45
   153fa:	4809      	ldr	r0, [pc, #36]	; (15420 <bt_mesh_settings_set+0x3c>)
   153fc:	f012 fa69 	bl	278d2 <printk>
}
   15400:	4620      	mov	r0, r4
   15402:	bd38      	pop	{r3, r4, r5, pc}
	if (len != read_len) {
   15404:	42a5      	cmp	r5, r4
   15406:	d008      	beq.n	1541a <bt_mesh_settings_set+0x36>
		BT_ERR("Unexpected value length (%zd != %zu)", len, read_len);
   15408:	4622      	mov	r2, r4
   1540a:	462b      	mov	r3, r5
   1540c:	2145      	movs	r1, #69	; 0x45
   1540e:	4805      	ldr	r0, [pc, #20]	; (15424 <bt_mesh_settings_set+0x40>)
   15410:	f012 fa5f 	bl	278d2 <printk>
		return -EINVAL;
   15414:	f06f 0415 	mvn.w	r4, #21
   15418:	e7f2      	b.n	15400 <bt_mesh_settings_set+0x1c>
	return 0;
   1541a:	2400      	movs	r4, #0
   1541c:	e7f0      	b.n	15400 <bt_mesh_settings_set+0x1c>
   1541e:	bf00      	nop
   15420:	00033e11 	.word	0x00033e11
   15424:	00034900 	.word	0x00034900

00015428 <bt_mesh_settings_store_schedule>:
			      BIT(BT_MESH_SETTINGS_HB_PUB_PENDING)   |      \
			      BIT(BT_MESH_SETTINGS_CFG_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_MOD_PENDING))

void bt_mesh_settings_store_schedule(enum bt_mesh_settings_flag flag)
{
   15428:	b570      	push	{r4, r5, r6, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1542a:	4a2a      	ldr	r2, [pc, #168]	; (154d4 <bt_mesh_settings_store_schedule+0xac>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1542c:	f3bf 8f5b 	dmb	ish
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15430:	0943      	lsrs	r3, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   15432:	2101      	movs	r1, #1
   15434:	f000 001f 	and.w	r0, r0, #31
   15438:	fa01 f000 	lsl.w	r0, r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1543c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   15440:	e853 1f00 	ldrex	r1, [r3]
   15444:	4301      	orrs	r1, r0
   15446:	e843 1400 	strex	r4, r1, [r3]
   1544a:	2c00      	cmp	r4, #0
   1544c:	d1f8      	bne.n	15440 <bt_mesh_settings_store_schedule+0x18>
   1544e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15452:	f3bf 8f5b 	dmb	ish
   15456:	6813      	ldr	r3, [r2, #0]
   15458:	f3bf 8f5b 	dmb	ish
	int32_t timeout_ms, remaining;

	atomic_set_bit(pending_flags, flag);

	if (atomic_get(pending_flags) & NO_WAIT_PENDING_BITS) {
   1545c:	f413 6f87 	tst.w	r3, #1080	; 0x438
   15460:	d132      	bne.n	154c8 <bt_mesh_settings_store_schedule+0xa0>
   15462:	f3bf 8f5b 	dmb	ish
   15466:	6813      	ldr	r3, [r2, #0]
   15468:	f3bf 8f5b 	dmb	ish
		timeout_ms = 0;
	} else if (atomic_test_bit(pending_flags,
   1546c:	07db      	lsls	r3, r3, #31
   1546e:	d508      	bpl.n	15482 <bt_mesh_settings_store_schedule+0x5a>
   15470:	f3bf 8f5b 	dmb	ish
   15474:	4b18      	ldr	r3, [pc, #96]	; (154d8 <bt_mesh_settings_store_schedule+0xb0>)
   15476:	681b      	ldr	r3, [r3, #0]
   15478:	f3bf 8f5b 	dmb	ish
				   BT_MESH_SETTINGS_RPL_PENDING) &&
   1547c:	f413 7fe3 	tst.w	r3, #454	; 0x1c6
   15480:	d024      	beq.n	154cc <bt_mesh_settings_store_schedule+0xa4>
		   (!(atomic_get(bt_mesh.flags) & GENERIC_PENDING_BITS) ||
		    (CONFIG_BT_MESH_RPL_STORE_TIMEOUT <
		     CONFIG_BT_MESH_STORE_TIMEOUT))) {
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
	} else {
		timeout_ms = CONFIG_BT_MESH_STORE_TIMEOUT * MSEC_PER_SEC;
   15482:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   15486:	4815      	ldr	r0, [pc, #84]	; (154dc <bt_mesh_settings_store_schedule+0xb4>)
   15488:	f010 fa4e 	bl	25928 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1548c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15490:	fba0 0103 	umull	r0, r1, r0, r3
   15494:	0bc3      	lsrs	r3, r0, #15
	}

	remaining = k_delayed_work_remaining_get(&pending_store);
	if ((remaining > 0) && remaining < timeout_ms) {
   15496:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   1549a:	d001      	beq.n	154a0 <bt_mesh_settings_store_schedule+0x78>
   1549c:	429c      	cmp	r4, r3
   1549e:	dc18      	bgt.n	154d2 <bt_mesh_settings_store_schedule+0xaa>
			return (t * to_hz + off) / from_hz;
   154a0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   154a4:	f240 30e7 	movw	r0, #999	; 0x3e7
   154a8:	2100      	movs	r1, #0
   154aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   154ae:	2300      	movs	r3, #0
   154b0:	fbc5 0104 	smlal	r0, r1, r5, r4
   154b4:	f7ec fa6a 	bl	198c <__aeabi_uldivmod>
	}

	BT_DBG("Waiting %d seconds", timeout_ms / MSEC_PER_SEC);

	k_delayed_work_submit(&pending_store, K_MSEC(timeout_ms));
}
   154b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   154bc:	4602      	mov	r2, r0
   154be:	460b      	mov	r3, r1
   154c0:	4807      	ldr	r0, [pc, #28]	; (154e0 <bt_mesh_settings_store_schedule+0xb8>)
   154c2:	4908      	ldr	r1, [pc, #32]	; (154e4 <bt_mesh_settings_store_schedule+0xbc>)
   154c4:	f00f bfe8 	b.w	25498 <k_delayed_work_submit_to_queue>
		timeout_ms = 0;
   154c8:	2400      	movs	r4, #0
   154ca:	e7dc      	b.n	15486 <bt_mesh_settings_store_schedule+0x5e>
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
   154cc:	f241 3488 	movw	r4, #5000	; 0x1388
   154d0:	e7d9      	b.n	15486 <bt_mesh_settings_store_schedule+0x5e>
}
   154d2:	bd70      	pop	{r4, r5, r6, pc}
   154d4:	20003ccc 	.word	0x20003ccc
   154d8:	20002970 	.word	0x20002970
   154dc:	20002d88 	.word	0x20002d88
   154e0:	20003028 	.word	0x20003028
   154e4:	20002d78 	.word	0x20002d78

000154e8 <bt_mesh_settings_init>:
		bt_mesh_cdb_pending_store();
	}
}

void bt_mesh_settings_init(void)
{
   154e8:	b508      	push	{r3, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   154ea:	4b04      	ldr	r3, [pc, #16]	; (154fc <bt_mesh_settings_init+0x14>)
   154ec:	2230      	movs	r2, #48	; 0x30
   154ee:	2100      	movs	r1, #0
   154f0:	4618      	mov	r0, r3
   154f2:	f018 ff15 	bl	2e320 <memset>
   154f6:	4a02      	ldr	r2, [pc, #8]	; (15500 <bt_mesh_settings_init+0x18>)
   154f8:	6042      	str	r2, [r0, #4]
	k_delayed_work_init(&pending_store, store_pending);
}
   154fa:	bd08      	pop	{r3, pc}
   154fc:	20002d78 	.word	0x20002d78
   15500:	0002bd2b 	.word	0x0002bd2b

00015504 <adv_alloc>:
	uint16_t app_idx;
} adv_pool[FRIEND_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	adv_pool[id].app_idx = BT_MESH_KEY_UNUSED;
   15504:	4b03      	ldr	r3, [pc, #12]	; (15514 <adv_alloc+0x10>)
   15506:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1550a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1550e:	8183      	strh	r3, [r0, #12]
	return &adv_pool[id].adv;
}
   15510:	4770      	bx	lr
   15512:	bf00      	nop
   15514:	20003cd0 	.word	0x20003cd0

00015518 <send_friend_clear>:
static const struct bt_mesh_send_cb clear_sent_cb = {
	.end = friend_clear_sent,
};

static void send_friend_clear(struct bt_mesh_friend *frnd)
{
   15518:	b510      	push	{r4, lr}
	struct bt_mesh_msg_ctx ctx = {
		.net_idx  = frnd->subnet->net_idx,
   1551a:	6902      	ldr	r2, [r0, #16]
{
   1551c:	b08a      	sub	sp, #40	; 0x28
	struct bt_mesh_msg_ctx ctx = {
   1551e:	8b91      	ldrh	r1, [r2, #28]
   15520:	f8ad 1010 	strh.w	r1, [sp, #16]
   15524:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15528:	2300      	movs	r3, #0
   1552a:	f8ad 1012 	strh.w	r1, [sp, #18]
   1552e:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
   15532:	f8ad 301a 	strh.w	r3, [sp, #26]
   15536:	f8cd 3016 	str.w	r3, [sp, #22]
   1553a:	f8ad 1014 	strh.w	r1, [sp, #20]
		.app_idx  = BT_MESH_KEY_UNUSED,
		.addr     = frnd->clear.frnd,
		.send_ttl = BT_MESH_TTL_MAX,
	};
	struct bt_mesh_net_tx tx = {
   1553e:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
   15540:	217f      	movs	r1, #127	; 0x7f
	struct bt_mesh_net_tx tx = {
   15542:	ab04      	add	r3, sp, #16
{
   15544:	4604      	mov	r4, r0
	struct bt_mesh_msg_ctx ctx = {
   15546:	f88d 101b 	strb.w	r1, [sp, #27]
	struct bt_mesh_net_tx tx = {
   1554a:	9207      	str	r2, [sp, #28]
   1554c:	9308      	str	r3, [sp, #32]
		.sub  = frnd->subnet,
		.ctx  = &ctx,
		.src  = bt_mesh_primary_addr(),
   1554e:	f7fd fc0d 	bl	12d6c <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   15552:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   15556:	f7f9 f8f1 	bl	e73c <bt_mesh_net_transmit_get>
	};
	struct bt_mesh_ctl_friend_clear req = {
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
   1555a:	8822      	ldrh	r2, [r4, #0]
	struct bt_mesh_net_tx tx = {
   1555c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
   15560:	0213      	lsls	r3, r2, #8
   15562:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
   15566:	8962      	ldrh	r2, [r4, #10]
	struct bt_mesh_ctl_friend_clear req = {
   15568:	f8ad 300c 	strh.w	r3, [sp, #12]
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
   1556c:	0213      	lsls	r3, r2, #8
   1556e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	struct bt_mesh_ctl_friend_clear req = {
   15572:	f8ad 300e 	strh.w	r3, [sp, #14]
	};

	BT_DBG("");

	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR, &req,
   15576:	4b05      	ldr	r3, [pc, #20]	; (1558c <send_friend_clear+0x74>)
   15578:	9300      	str	r3, [sp, #0]
   1557a:	9401      	str	r4, [sp, #4]
   1557c:	2304      	movs	r3, #4
   1557e:	aa03      	add	r2, sp, #12
   15580:	2105      	movs	r1, #5
   15582:	a807      	add	r0, sp, #28
   15584:	f7fb fe08 	bl	11198 <bt_mesh_ctl_send>
			 sizeof(req), &clear_sent_cb, frnd);
}
   15588:	b00a      	add	sp, #40	; 0x28
   1558a:	bd10      	pop	{r4, pc}
   1558c:	0002fde4 	.word	0x0002fde4

00015590 <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15590:	4601      	mov	r1, r0
   15592:	4801      	ldr	r0, [pc, #4]	; (15598 <k_delayed_work_submit+0x8>)
   15594:	f00f bf80 	b.w	25498 <k_delayed_work_submit_to_queue>
   15598:	20003028 	.word	0x20003028

0001559c <buf_send_end>:
{
	struct bt_mesh_friend *frnd = user_data;

	BT_DBG("err %d", err);

	if (frnd->pending_req) {
   1559c:	78cb      	ldrb	r3, [r1, #3]
   1559e:	075a      	lsls	r2, r3, #29
{
   155a0:	b5d0      	push	{r4, r6, r7, lr}
	if (frnd->pending_req) {
   155a2:	d505      	bpl.n	155b0 <buf_send_end+0x14>
		BT_WARN("Another request before previous completed sending");
   155a4:	2157      	movs	r1, #87	; 0x57
   155a6:	4812      	ldr	r0, [pc, #72]	; (155f0 <buf_send_end+0x54>)
	} else {
		/* Friend offer timeout is 1 second */
		k_delayed_work_submit(&frnd->timer, K_SECONDS(1));
		BT_DBG("Waiting for first poll");
	}
}
   155a8:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		BT_WARN("Another request before previous completed sending");
   155ac:	f012 b991 	b.w	278d2 <printk>
	if (frnd->established) {
   155b0:	06db      	lsls	r3, r3, #27
   155b2:	f101 0460 	add.w	r4, r1, #96	; 0x60
   155b6:	d517      	bpl.n	155e8 <buf_send_end+0x4c>
		k_delayed_work_submit(&frnd->timer, K_MSEC(frnd->poll_to));
   155b8:	6849      	ldr	r1, [r1, #4]
   155ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   155be:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   155c2:	f240 36e7 	movw	r6, #999	; 0x3e7
   155c6:	2700      	movs	r7, #0
   155c8:	fbc0 6701 	smlal	r6, r7, r0, r1
   155cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   155d0:	2300      	movs	r3, #0
   155d2:	4630      	mov	r0, r6
   155d4:	4639      	mov	r1, r7
   155d6:	f7ec f9d9 	bl	198c <__aeabi_uldivmod>
   155da:	4602      	mov	r2, r0
   155dc:	460b      	mov	r3, r1
		k_delayed_work_submit(&frnd->timer, K_SECONDS(1));
   155de:	4620      	mov	r0, r4
}
   155e0:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		k_delayed_work_submit(&frnd->timer, K_SECONDS(1));
   155e4:	f7ff bfd4 	b.w	15590 <k_delayed_work_submit>
   155e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   155ec:	2300      	movs	r3, #0
   155ee:	e7f6      	b.n	155de <buf_send_end+0x42>
   155f0:	00034d7a 	.word	0x00034d7a

000155f4 <atomic_test_bit.constprop.26>:
   155f4:	4b04      	ldr	r3, [pc, #16]	; (15608 <atomic_test_bit.constprop.26+0x14>)
   155f6:	f3bf 8f5b 	dmb	ish
   155fa:	6818      	ldr	r0, [r3, #0]
   155fc:	f3bf 8f5b 	dmb	ish
}
   15600:	f3c0 0080 	ubfx	r0, r0, #2, #1
   15604:	4770      	bx	lr
   15606:	bf00      	nop
   15608:	20002970 	.word	0x20002970

0001560c <encrypt_friend_pdu>:
{
   1560c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15610:	6903      	ldr	r3, [r0, #16]
   15612:	7f9d      	ldrb	r5, [r3, #30]
   15614:	460e      	mov	r6, r1
   15616:	1ea9      	subs	r1, r5, #2
   15618:	424d      	negs	r5, r1
   1561a:	b08e      	sub	sp, #56	; 0x38
   1561c:	4604      	mov	r4, r0
   1561e:	414d      	adcs	r5, r1
	if (master_cred) {
   15620:	2a00      	cmp	r2, #0
   15622:	d05d      	beq.n	156e0 <encrypt_friend_pdu+0xd4>
		cred = &frnd->subnet->keys[SUBNET_KEY_TX_IDX(frnd->subnet)]
   15624:	225a      	movs	r2, #90	; 0x5a
   15626:	fb02 3505 	mla	r5, r2, r5, r3
   1562a:	353d      	adds	r5, #61	; 0x3d
	src = sys_get_be16(&buf->data[5]);
   1562c:	4637      	mov	r7, r6
   1562e:	f857 3f08 	ldr.w	r3, [r7, #8]!
	return ((uint16_t)src[0] << 8) | src[1];
   15632:	7958      	ldrb	r0, [r3, #5]
   15634:	799b      	ldrb	r3, [r3, #6]
	if (bt_mesh_elem_find(src)) {
   15636:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1563a:	f7fd fb9d 	bl	12d78 <bt_mesh_elem_find>
   1563e:	2800      	cmp	r0, #0
   15640:	f000 80b5 	beq.w	157ae <encrypt_friend_pdu+0x1a2>
		if (FRIEND_ADV(buf)->app_idx != BT_MESH_KEY_UNUSED) {
   15644:	6973      	ldr	r3, [r6, #20]
   15646:	f8b3 800c 	ldrh.w	r8, [r3, #12]
   1564a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1564e:	4598      	cmp	r8, r3
   15650:	f000 8087 	beq.w	15762 <encrypt_friend_pdu+0x156>
	err = unseg_app_sdu_unpack(frnd, buf, &meta);
   15654:	6924      	ldr	r4, [r4, #16]
	struct bt_mesh_net_rx net = {
   15656:	2218      	movs	r2, #24
   15658:	2100      	movs	r1, #0
   1565a:	4668      	mov	r0, sp
   1565c:	f018 fe60 	bl	2e320 <memset>
   15660:	8ba3      	ldrh	r3, [r4, #28]
   15662:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_mesh_net_header_parse(&buf->b, &net);
   15666:	4669      	mov	r1, sp
   15668:	4638      	mov	r0, r7
	meta->subnet = frnd->subnet;
   1566a:	940c      	str	r4, [sp, #48]	; 0x30
	struct bt_mesh_net_rx net = {
   1566c:	f8ad 8006 	strh.w	r8, [sp, #6]
	bt_mesh_net_header_parse(&buf->b, &net);
   15670:	f7fa f8b0 	bl	f7d4 <bt_mesh_net_header_parse>
	err = bt_mesh_keys_resolve(&net.ctx, &net.sub, &meta->key, &meta->aid);
   15674:	ab0d      	add	r3, sp, #52	; 0x34
   15676:	aa0b      	add	r2, sp, #44	; 0x2c
   15678:	4669      	mov	r1, sp
   1567a:	a801      	add	r0, sp, #4
   1567c:	f7fb f860 	bl	10740 <bt_mesh_keys_resolve>
	if (err) {
   15680:	4604      	mov	r4, r0
   15682:	bb48      	cbnz	r0, 156d8 <encrypt_friend_pdu+0xcc>
	meta->crypto.src = net.ctx.addr;
   15684:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   15688:	4954      	ldr	r1, [pc, #336]	; (157dc <encrypt_friend_pdu+0x1d0>)
	meta->crypto.src = net.ctx.addr;
   1568a:	f8ad 301a 	strh.w	r3, [sp, #26]
	meta->crypto.dst = net.ctx.recv_dst;
   1568e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   15692:	f8ad 301c 	strh.w	r3, [sp, #28]
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   15696:	680a      	ldr	r2, [r1, #0]
   15698:	f7ff ffac 	bl	155f4 <atomic_test_bit.constprop.26>
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
   1569c:	f108 0303 	add.w	r3, r8, #3
   156a0:	b29b      	uxth	r3, r3
   156a2:	2b01      	cmp	r3, #1
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   156a4:	eba2 0000 	sub.w	r0, r2, r0
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
   156a8:	bf8c      	ite	hi
   156aa:	2300      	movhi	r3, #0
   156ac:	2301      	movls	r3, #1
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   156ae:	9009      	str	r0, [sp, #36]	; 0x24
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
   156b0:	f8bd 001c 	ldrh.w	r0, [sp, #28]
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
   156b4:	f88d 3018 	strb.w	r3, [sp, #24]
	meta->crypto.seq_num = net.seq;
   156b8:	9b04      	ldr	r3, [sp, #16]
   156ba:	9308      	str	r3, [sp, #32]
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
   156bc:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   156c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
	meta->crypto.aszmic = 0;
   156c4:	f88d 4019 	strb.w	r4, [sp, #25]
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
   156c8:	4688      	mov	r8, r1
   156ca:	d20e      	bcs.n	156ea <encrypt_friend_pdu+0xde>
		meta->crypto.ad = bt_mesh_va_label_get(meta->crypto.dst);
   156cc:	f7fb fe9c 	bl	11408 <bt_mesh_va_label_get>
   156d0:	900a      	str	r0, [sp, #40]	; 0x28
		if (!meta->crypto.ad) {
   156d2:	b958      	cbnz	r0, 156ec <encrypt_friend_pdu+0xe0>
			return -ENOENT;
   156d4:	f06f 0401 	mvn.w	r4, #1
}
   156d8:	4620      	mov	r0, r4
   156da:	b00e      	add	sp, #56	; 0x38
   156dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cred = &frnd->cred[SUBNET_KEY_TX_IDX(frnd->subnet)];
   156e0:	016b      	lsls	r3, r5, #5
   156e2:	441d      	add	r5, r3
   156e4:	3514      	adds	r5, #20
   156e6:	4405      	add	r5, r0
   156e8:	e7a0      	b.n	1562c <encrypt_friend_pdu+0x20>
		meta->crypto.ad = NULL;
   156ea:	940a      	str	r4, [sp, #40]	; 0x28
	if (meta.crypto.seq_num == bt_mesh.seq) {
   156ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
   156f0:	9a08      	ldr	r2, [sp, #32]
   156f2:	429a      	cmp	r2, r3
   156f4:	d035      	beq.n	15762 <encrypt_friend_pdu+0x156>
	net_buf_simple_clone(&buf->b, &sdu);
   156f6:	4669      	mov	r1, sp
   156f8:	4638      	mov	r0, r7
   156fa:	f017 fef6 	bl	2d4ea <net_buf_simple_clone>
	net_buf_simple_pull(&sdu, 10);
   156fe:	210a      	movs	r1, #10
   15700:	4668      	mov	r0, sp
   15702:	f00a fc13 	bl	1ff2c <net_buf_simple_pull>
	sdu.len -= 4;
   15706:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_mesh_app_decrypt(meta->key, &meta->crypto, &sdu, &sdu);
   1570a:	980b      	ldr	r0, [sp, #44]	; 0x2c
	sdu.len -= 4;
   1570c:	3b04      	subs	r3, #4
   1570e:	f8ad 3004 	strh.w	r3, [sp, #4]
	return bt_mesh_app_decrypt(meta->key, &meta->crypto, &sdu, &sdu);
   15712:	466a      	mov	r2, sp
   15714:	466b      	mov	r3, sp
   15716:	a906      	add	r1, sp, #24
   15718:	f016 f85b 	bl	2b7d2 <bt_mesh_app_decrypt>
	if (err) {
   1571c:	4604      	mov	r4, r0
   1571e:	b128      	cbz	r0, 1572c <encrypt_friend_pdu+0x120>
		BT_WARN("Decryption failed! %d", err);
   15720:	4602      	mov	r2, r0
   15722:	482f      	ldr	r0, [pc, #188]	; (157e0 <encrypt_friend_pdu+0x1d4>)
   15724:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Re-encryption failed! %d", err);
   15726:	f012 f8d4 	bl	278d2 <printk>
   1572a:	e7d5      	b.n	156d8 <encrypt_friend_pdu+0xcc>
	meta.crypto.seq_num = bt_mesh.seq;
   1572c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   15730:	9308      	str	r3, [sp, #32]
	net_buf_simple_clone(&buf->b, &sdu);
   15732:	4669      	mov	r1, sp
   15734:	4638      	mov	r0, r7
   15736:	f017 fed8 	bl	2d4ea <net_buf_simple_clone>
	net_buf_simple_pull(&sdu, 10);
   1573a:	210a      	movs	r1, #10
   1573c:	4668      	mov	r0, sp
   1573e:	f00a fbf5 	bl	1ff2c <net_buf_simple_pull>
	sdu.len -= 4;
   15742:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
   15746:	980b      	ldr	r0, [sp, #44]	; 0x2c
	sdu.len -= 4;
   15748:	3b04      	subs	r3, #4
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
   1574a:	466a      	mov	r2, sp
   1574c:	a906      	add	r1, sp, #24
	sdu.len -= 4;
   1574e:	f8ad 3004 	strh.w	r3, [sp, #4]
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
   15752:	f016 f815 	bl	2b780 <bt_mesh_app_encrypt>
	if (err) {
   15756:	4604      	mov	r4, r0
   15758:	b118      	cbz	r0, 15762 <encrypt_friend_pdu+0x156>
		BT_WARN("Re-encryption failed! %d", err);
   1575a:	4602      	mov	r2, r0
   1575c:	2157      	movs	r1, #87	; 0x57
   1575e:	4821      	ldr	r0, [pc, #132]	; (157e4 <encrypt_friend_pdu+0x1d8>)
   15760:	e7e1      	b.n	15726 <encrypt_friend_pdu+0x11a>
		seq = bt_mesh_next_seq();
   15762:	f7f9 fecf 	bl	f504 <bt_mesh_next_seq>
		sys_put_be24(seq, &buf->data[2]);
   15766:	68b3      	ldr	r3, [r6, #8]
	dst[0] = val >> 16;
   15768:	0c02      	lsrs	r2, r0, #16
   1576a:	709a      	strb	r2, [r3, #2]
	dst[0] = val >> 8;
   1576c:	f3c0 2207 	ubfx	r2, r0, #8, #8
   15770:	70da      	strb	r2, [r3, #3]
	dst[1] = val;
   15772:	7118      	strb	r0, [r3, #4]
		iv_index = BT_MESH_NET_IVI_TX;
   15774:	4b19      	ldr	r3, [pc, #100]	; (157dc <encrypt_friend_pdu+0x1d0>)
   15776:	681c      	ldr	r4, [r3, #0]
   15778:	f7ff ff3c 	bl	155f4 <atomic_test_bit.constprop.26>
		FRIEND_ADV(buf)->app_idx = BT_MESH_KEY_UNUSED;
   1577c:	6973      	ldr	r3, [r6, #20]
   1577e:	f64f 72ff 	movw	r2, #65535	; 0xffff
		iv_index = BT_MESH_NET_IVI_TX;
   15782:	1a24      	subs	r4, r4, r0
		FRIEND_ADV(buf)->app_idx = BT_MESH_KEY_UNUSED;
   15784:	819a      	strh	r2, [r3, #12]
	buf->data[0] = (cred->nid | (iv_index & 1) << 7);
   15786:	4628      	mov	r0, r5
   15788:	68b2      	ldr	r2, [r6, #8]
   1578a:	f810 3b01 	ldrb.w	r3, [r0], #1
   1578e:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
   15792:	7013      	strb	r3, [r2, #0]
	if (bt_mesh_net_encrypt(cred->enc, &buf->b, iv_index, false)) {
   15794:	4639      	mov	r1, r7
   15796:	2300      	movs	r3, #0
   15798:	4622      	mov	r2, r4
   1579a:	f015 ff4f 	bl	2b63c <bt_mesh_net_encrypt>
   1579e:	b180      	cbz	r0, 157c2 <encrypt_friend_pdu+0x1b6>
		BT_ERR("Encrypting failed");
   157a0:	4811      	ldr	r0, [pc, #68]	; (157e8 <encrypt_friend_pdu+0x1dc>)
   157a2:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Obfuscating failed");
   157a4:	f012 f895 	bl	278d2 <printk>
		return -EINVAL;
   157a8:	f06f 0415 	mvn.w	r4, #21
   157ac:	e794      	b.n	156d8 <encrypt_friend_pdu+0xcc>
		iv_index = (bt_mesh.iv_index - ((bt_mesh.iv_index & 1) != ivi));
   157ae:	4b0b      	ldr	r3, [pc, #44]	; (157dc <encrypt_friend_pdu+0x1d0>)
   157b0:	681c      	ldr	r4, [r3, #0]
		uint8_t ivi = (buf->data[0] >> 7);
   157b2:	68b3      	ldr	r3, [r6, #8]
   157b4:	781a      	ldrb	r2, [r3, #0]
		iv_index = (bt_mesh.iv_index - ((bt_mesh.iv_index & 1) != ivi));
   157b6:	f004 0301 	and.w	r3, r4, #1
   157ba:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
   157be:	1ae4      	subs	r4, r4, r3
   157c0:	e7e1      	b.n	15786 <encrypt_friend_pdu+0x17a>
	if (bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy)) {
   157c2:	4621      	mov	r1, r4
   157c4:	f105 0211 	add.w	r2, r5, #17
   157c8:	68b0      	ldr	r0, [r6, #8]
   157ca:	f015 ff09 	bl	2b5e0 <bt_mesh_net_obfuscate>
   157ce:	4604      	mov	r4, r0
   157d0:	2800      	cmp	r0, #0
   157d2:	d081      	beq.n	156d8 <encrypt_friend_pdu+0xcc>
		BT_ERR("Obfuscating failed");
   157d4:	2145      	movs	r1, #69	; 0x45
   157d6:	4805      	ldr	r0, [pc, #20]	; (157ec <encrypt_friend_pdu+0x1e0>)
   157d8:	e7e4      	b.n	157a4 <encrypt_friend_pdu+0x198>
   157da:	bf00      	nop
   157dc:	20002968 	.word	0x20002968
   157e0:	00034db1 	.word	0x00034db1
   157e4:	00034dcc 	.word	0x00034dcc
   157e8:	00034dea 	.word	0x00034dea
   157ec:	00034e01 	.word	0x00034e01

000157f0 <friend_clear>:
{
   157f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   157f4:	4604      	mov	r4, r0
	k_delayed_work_cancel(&frnd->timer);
   157f6:	3060      	adds	r0, #96	; 0x60
   157f8:	f00f febe 	bl	25578 <k_delayed_work_cancel>
__ssp_bos_icheck3(memset, void *, int)
   157fc:	2242      	movs	r2, #66	; 0x42
   157fe:	2100      	movs	r1, #0
   15800:	f104 0014 	add.w	r0, r4, #20
   15804:	f018 fd8c 	bl	2e320 <memset>
	if (frnd->last) {
   15808:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1580c:	b160      	cbz	r0, 15828 <friend_clear+0x38>
		if (frnd->pending_buf) {
   1580e:	78e3      	ldrb	r3, [r4, #3]
   15810:	071a      	lsls	r2, r3, #28
			BT_MESH_ADV(frnd->last)->busy = 0U;
   15812:	bf41      	itttt	mi
   15814:	6943      	ldrmi	r3, [r0, #20]
   15816:	7a1a      	ldrbmi	r2, [r3, #8]
   15818:	f36f 0282 	bfcmi	r2, #2, #1
   1581c:	721a      	strbmi	r2, [r3, #8]
		net_buf_unref(frnd->last);
   1581e:	f00a fa6f 	bl	1fd00 <net_buf_unref>
		frnd->last = NULL;
   15822:	2300      	movs	r3, #0
   15824:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	purge_buffers(&frnd->queue);
   15828:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1582c:	f016 fbd5 	bl	2bfda <purge_buffers>
	Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   15830:	4e19      	ldr	r6, [pc, #100]	; (15898 <friend_clear+0xa8>)
   15832:	4d1a      	ldr	r5, [pc, #104]	; (1589c <friend_clear+0xac>)
   15834:	4f1a      	ldr	r7, [pc, #104]	; (158a0 <friend_clear+0xb0>)
		purge_buffers(&seg->queue);
   15836:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1583a:	f016 fbce 	bl	2bfda <purge_buffers>
		seg->seg_count = 0U;
   1583e:	2300      	movs	r3, #0
   15840:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
   15844:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   15846:	42b5      	cmp	r5, r6
   15848:	d908      	bls.n	1585c <friend_clear+0x6c>
   1584a:	4639      	mov	r1, r7
   1584c:	4815      	ldr	r0, [pc, #84]	; (158a4 <friend_clear+0xb4>)
   1584e:	22af      	movs	r2, #175	; 0xaf
   15850:	f012 f83f 	bl	278d2 <printk>
   15854:	21af      	movs	r1, #175	; 0xaf
   15856:	4638      	mov	r0, r7
   15858:	f012 fab4 	bl	27dc4 <assert_post_action>
   1585c:	4545      	cmp	r5, r8
   1585e:	d310      	bcc.n	15882 <friend_clear+0x92>
	frnd->counter++;
   15860:	89a3      	ldrh	r3, [r4, #12]
	frnd->fsn = 0U;
   15862:	78e2      	ldrb	r2, [r4, #3]
	frnd->counter++;
   15864:	3301      	adds	r3, #1
   15866:	81a3      	strh	r3, [r4, #12]
	frnd->fsn = 0U;
   15868:	f022 021d 	bic.w	r2, r2, #29
	frnd->subnet = NULL;
   1586c:	2300      	movs	r3, #0
   1586e:	6123      	str	r3, [r4, #16]
	frnd->queue_size = 0U;
   15870:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	frnd->fsn = 0U;
   15874:	70e2      	strb	r2, [r4, #3]
   15876:	f8c4 3056 	str.w	r3, [r4, #86]	; 0x56
   1587a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
}
   1587e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (frnd->established && cb->terminated) {
   15882:	78e3      	ldrb	r3, [r4, #3]
   15884:	06db      	lsls	r3, r3, #27
   15886:	d505      	bpl.n	15894 <friend_clear+0xa4>
   15888:	686b      	ldr	r3, [r5, #4]
   1588a:	b11b      	cbz	r3, 15894 <friend_clear+0xa4>
			cb->terminated(frnd->subnet->net_idx, frnd->lpn);
   1588c:	6922      	ldr	r2, [r4, #16]
   1588e:	8821      	ldrh	r1, [r4, #0]
   15890:	8b90      	ldrh	r0, [r2, #28]
   15892:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   15894:	3508      	adds	r5, #8
   15896:	e7d6      	b.n	15846 <friend_clear+0x56>
   15898:	0002eef0 	.word	0x0002eef0
   1589c:	0002eef0 	.word	0x0002eef0
   158a0:	00034ea9 	.word	0x00034ea9
   158a4:	0003067f 	.word	0x0003067f

000158a8 <friend_queue_prepare_space>:
				   const uint64_t *seq_auth, uint8_t seg_count)
{
	uint32_t total = 0;
	int i;

	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   158a8:	2b10      	cmp	r3, #16
	return someone_has_space;
}

static bool friend_queue_prepare_space(struct bt_mesh_friend *frnd, uint16_t addr,
				       const uint64_t *seq_auth, uint8_t seg_count)
{
   158aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   158ae:	4605      	mov	r5, r0
   158b0:	461f      	mov	r7, r3
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   158b2:	d904      	bls.n	158be <friend_queue_prepare_space+0x16>
	bool pending_segments;
	uint8_t avail_space;

	if (!friend_queue_has_space(frnd, addr, seq_auth, seg_count)) {
		return false;
   158b4:	f04f 0800 	mov.w	r8, #0

		net_buf_unref(buf);
	}

	return true;
}
   158b8:	4640      	mov	r0, r8
   158ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   158be:	f016 fbd0 	bl	2c062 <friend_queue_has_space.part.18>
	if (!friend_queue_has_space(frnd, addr, seq_auth, seg_count)) {
   158c2:	4680      	mov	r8, r0
   158c4:	2800      	cmp	r0, #0
   158c6:	d0f5      	beq.n	158b4 <friend_queue_prepare_space+0xc>
	avail_space = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - frnd->queue_size;
   158c8:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
	pending_segments = false;
   158cc:	2600      	movs	r6, #0
	avail_space = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - frnd->queue_size;
   158ce:	f1c4 0410 	rsb	r4, r4, #16
   158d2:	b2e4      	uxtb	r4, r4
		buf->frags = NULL;
   158d4:	46b2      	mov	sl, r6
	while (pending_segments || avail_space < seg_count) {
   158d6:	b90e      	cbnz	r6, 158dc <friend_queue_prepare_space+0x34>
   158d8:	42bc      	cmp	r4, r7
   158da:	d2ed      	bcs.n	158b8 <friend_queue_prepare_space+0x10>
Z_GENLIST_IS_EMPTY(slist)
   158dc:	f8d5 90a0 	ldr.w	r9, [r5, #160]	; 0xa0
Z_GENLIST_GET(slist, snode)
   158e0:	f1b9 0f00 	cmp.w	r9, #0
   158e4:	d104      	bne.n	158f0 <friend_queue_prepare_space+0x48>
			BT_ERR("Unable to free up enough buffers");
   158e6:	2145      	movs	r1, #69	; 0x45
   158e8:	4811      	ldr	r0, [pc, #68]	; (15930 <friend_queue_prepare_space+0x88>)
   158ea:	f011 fff2 	bl	278d2 <printk>
			return false;
   158ee:	e7e1      	b.n	158b4 <friend_queue_prepare_space+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   158f0:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   158f4:	f8d9 3000 	ldr.w	r3, [r9]
	list->head = node;
   158f8:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   158fc:	4591      	cmp	r9, r2
   158fe:	d101      	bne.n	15904 <friend_queue_prepare_space+0x5c>
	list->tail = node;
   15900:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		frnd->queue_size--;
   15904:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   15908:	3b01      	subs	r3, #1
   1590a:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
		pending_segments = (buf->flags & NET_BUF_FRAGS);
   1590e:	f899 3005 	ldrb.w	r3, [r9, #5]
		buf->frags = NULL;
   15912:	f8c9 a000 	str.w	sl, [r9]
		pending_segments = (buf->flags & NET_BUF_FRAGS);
   15916:	f003 0601 	and.w	r6, r3, #1
		buf->flags &= ~NET_BUF_FRAGS;
   1591a:	f023 0301 	bic.w	r3, r3, #1
		avail_space++;
   1591e:	3401      	adds	r4, #1
		buf->flags &= ~NET_BUF_FRAGS;
   15920:	f889 3005 	strb.w	r3, [r9, #5]
		net_buf_unref(buf);
   15924:	4648      	mov	r0, r9
		avail_space++;
   15926:	b2e4      	uxtb	r4, r4
		net_buf_unref(buf);
   15928:	f00a f9ea 	bl	1fd00 <net_buf_unref>
   1592c:	e7d3      	b.n	158d6 <friend_queue_prepare_space+0x2e>
   1592e:	bf00      	nop
   15930:	00034edb 	.word	0x00034edb

00015934 <enqueue_friend_pdu.part.20>:
static void enqueue_friend_pdu(struct bt_mesh_friend *frnd,
   15934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15938:	9d08      	ldr	r5, [sp, #32]
   1593a:	4699      	mov	r9, r3
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   1593c:	68ab      	ldr	r3, [r5, #8]
static void enqueue_friend_pdu(struct bt_mesh_friend *frnd,
   1593e:	4617      	mov	r7, r2
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   15940:	895a      	ldrh	r2, [r3, #10]
		struct bt_mesh_friend_seg *seg = &frnd->seg[i];
   15942:	f100 0690 	add.w	r6, r0, #144	; 0x90
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   15946:	ba52      	rev16	r2, r2
static void enqueue_friend_pdu(struct bt_mesh_friend *frnd,
   15948:	4604      	mov	r4, r0
   1594a:	4688      	mov	r8, r1
		if (is_seg(seg, src, seq_zero)) {
   1594c:	f3c2 028c 	ubfx	r2, r2, #2, #13
   15950:	4639      	mov	r1, r7
   15952:	4630      	mov	r0, r6
   15954:	f016 fb55 	bl	2c002 <is_seg>
   15958:	b920      	cbnz	r0, 15964 <enqueue_friend_pdu.part.20+0x30>
		if (!unassigned && !sys_slist_peek_head(&seg->queue)) {
   1595a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1595e:	b9fb      	cbnz	r3, 159a0 <enqueue_friend_pdu.part.20+0x6c>
		unassigned->seg_count = seg_count;
   15960:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98
	net_buf_slist_put(&seg->queue, buf);
   15964:	4629      	mov	r1, r5
   15966:	4630      	mov	r0, r6
   15968:	f00a f904 	bl	1fb74 <net_buf_slist_put>
	if (type == BT_MESH_FRIEND_PDU_COMPLETE) {
   1596c:	f1b8 0f02 	cmp.w	r8, #2
   15970:	d122      	bne.n	159b8 <enqueue_friend_pdu.part.20+0x84>
Z_GENLIST_APPEND_LIST(slist, snode)
   15972:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
Z_GENLIST_MERGE_LIST(slist, snode)
   15976:	e9d4 2124 	ldrd	r2, r1, [r4, #144]	; 0x90
Z_GENLIST_APPEND_LIST(slist, snode)
   1597a:	b9db      	cbnz	r3, 159b4 <enqueue_friend_pdu.part.20+0x80>
	list->head = node;
   1597c:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
	list->head = NULL;
   15980:	2300      	movs	r3, #0
		frnd->queue_size += seg->seg_count;
   15982:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
	list->tail = node;
   15986:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
   1598a:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
		seg->seg_count = 0U;
   1598e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
	list->tail = NULL;
   15992:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
		frnd->queue_size += seg->seg_count;
   15996:	440a      	add	r2, r1
   15998:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
}
   1599c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("No free friend segment RX contexts for 0x%04x", src);
   159a0:	463a      	mov	r2, r7
   159a2:	4808      	ldr	r0, [pc, #32]	; (159c4 <enqueue_friend_pdu.part.20+0x90>)
   159a4:	2145      	movs	r1, #69	; 0x45
   159a6:	f011 ff94 	bl	278d2 <printk>
		net_buf_unref(buf);
   159aa:	4628      	mov	r0, r5
}
   159ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		net_buf_unref(buf);
   159b0:	f00a b9a6 	b.w	1fd00 <net_buf_unref>
	parent->next = child;
   159b4:	601a      	str	r2, [r3, #0]
   159b6:	e7e3      	b.n	15980 <enqueue_friend_pdu.part.20+0x4c>
		buf->flags |= NET_BUF_FRAGS;
   159b8:	796b      	ldrb	r3, [r5, #5]
   159ba:	f043 0301 	orr.w	r3, r3, #1
   159be:	716b      	strb	r3, [r5, #5]
   159c0:	e7ec      	b.n	1599c <enqueue_friend_pdu.part.20+0x68>
   159c2:	bf00      	nop
   159c4:	00034e19 	.word	0x00034e19

000159c8 <create_friend_pdu.isra.10>:
static struct net_buf *create_friend_pdu(struct bt_mesh_friend *frnd,
   159c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
					   FRIEND_XMIT, K_NO_WAIT);
   159ca:	2300      	movs	r3, #0
   159cc:	2200      	movs	r2, #0
	buf = bt_mesh_adv_create_from_pool(&friend_buf_pool, adv_alloc,
   159ce:	e9cd 2300 	strd	r2, r3, [sp]
static struct net_buf *create_friend_pdu(struct bt_mesh_friend *frnd,
   159d2:	4605      	mov	r5, r0
   159d4:	460f      	mov	r7, r1
	buf = bt_mesh_adv_create_from_pool(&friend_buf_pool, adv_alloc,
   159d6:	2308      	movs	r3, #8
   159d8:	2201      	movs	r2, #1
   159da:	4918      	ldr	r1, [pc, #96]	; (15a3c <create_friend_pdu.isra.10+0x74>)
   159dc:	4818      	ldr	r0, [pc, #96]	; (15a40 <create_friend_pdu.isra.10+0x78>)
   159de:	f7f8 ffbd 	bl	e95c <bt_mesh_adv_create_from_pool>
	if (!buf) {
   159e2:	4606      	mov	r6, r0
   159e4:	b330      	cbz	r0, 15a34 <create_friend_pdu.isra.10+0x6c>
	net_buf_add_u8(buf, (info->iv_index & 1) << 7); /* Will be reset in encryption */
   159e6:	68a9      	ldr	r1, [r5, #8]
	return net_buf_simple_add_u8(&buf->b, val);
   159e8:	f100 0408 	add.w	r4, r0, #8
   159ec:	01c9      	lsls	r1, r1, #7
   159ee:	f001 0180 	and.w	r1, r1, #128	; 0x80
   159f2:	4620      	mov	r0, r4
   159f4:	f017 fdee 	bl	2d5d4 <net_buf_simple_add_u8>
	if (info->ctl) {
   159f8:	f995 3007 	ldrsb.w	r3, [r5, #7]
   159fc:	79e9      	ldrb	r1, [r5, #7]
   159fe:	2b00      	cmp	r3, #0
		net_buf_add_u8(buf, info->ttl | 0x80);
   15a00:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   15a04:	bfb8      	it	lt
   15a06:	f041 0180 	orrlt.w	r1, r1, #128	; 0x80
   15a0a:	4620      	mov	r0, r4
   15a0c:	f017 fde2 	bl	2d5d4 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15a10:	2203      	movs	r2, #3
   15a12:	1d29      	adds	r1, r5, #4
   15a14:	4620      	mov	r0, r4
   15a16:	f017 fdd1 	bl	2d5bc <net_buf_simple_add_mem>
	net_buf_simple_add_be16(&buf->b, val);
   15a1a:	8829      	ldrh	r1, [r5, #0]
   15a1c:	4620      	mov	r0, r4
   15a1e:	f017 fde9 	bl	2d5f4 <net_buf_simple_add_be16>
   15a22:	8869      	ldrh	r1, [r5, #2]
   15a24:	4620      	mov	r0, r4
   15a26:	f017 fde5 	bl	2d5f4 <net_buf_simple_add_be16>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15a2a:	88ba      	ldrh	r2, [r7, #4]
   15a2c:	6839      	ldr	r1, [r7, #0]
   15a2e:	4620      	mov	r0, r4
   15a30:	f017 fdc4 	bl	2d5bc <net_buf_simple_add_mem>
}
   15a34:	4630      	mov	r0, r6
   15a36:	b003      	add	sp, #12
   15a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a3a:	bf00      	nop
   15a3c:	00015505 	.word	0x00015505
   15a40:	20001ff4 	.word	0x20001ff4

00015a44 <encode_friend_ctl.isra.11>:
static struct net_buf *encode_friend_ctl(struct bt_mesh_friend *frnd,
   15a44:	b530      	push	{r4, r5, lr}
   15a46:	4605      	mov	r5, r0
   15a48:	b085      	sub	sp, #20
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
   15a4a:	4610      	mov	r0, r2
static struct net_buf *encode_friend_ctl(struct bt_mesh_friend *frnd,
   15a4c:	4614      	mov	r4, r2
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
   15a4e:	f017 fd5c 	bl	2d50a <net_buf_simple_push_u8>
	info.src = bt_mesh_primary_addr();
   15a52:	f7fd f98b 	bl	12d6c <bt_mesh_primary_addr>
	info.dst = frnd->lpn;
   15a56:	882b      	ldrh	r3, [r5, #0]
   15a58:	f8ad 3006 	strh.w	r3, [sp, #6]
	info.ttl = 0U;
   15a5c:	2380      	movs	r3, #128	; 0x80
   15a5e:	f88d 300b 	strb.w	r3, [sp, #11]
	memset(info.seq, 0, sizeof(info.seq));
   15a62:	2300      	movs	r3, #0
   15a64:	f8ad 3008 	strh.w	r3, [sp, #8]
   15a68:	f88d 300a 	strb.w	r3, [sp, #10]
	info.iv_index = BT_MESH_NET_IVI_TX;
   15a6c:	4b06      	ldr	r3, [pc, #24]	; (15a88 <encode_friend_ctl.isra.11+0x44>)
	info.src = bt_mesh_primary_addr();
   15a6e:	f8ad 0004 	strh.w	r0, [sp, #4]
	info.iv_index = BT_MESH_NET_IVI_TX;
   15a72:	6819      	ldr	r1, [r3, #0]
   15a74:	f7ff fdbe 	bl	155f4 <atomic_test_bit.constprop.26>
   15a78:	1a08      	subs	r0, r1, r0
   15a7a:	9003      	str	r0, [sp, #12]
	return create_friend_pdu(frnd, &info, sdu);
   15a7c:	4621      	mov	r1, r4
   15a7e:	a801      	add	r0, sp, #4
   15a80:	f7ff ffa2 	bl	159c8 <create_friend_pdu.isra.10>
}
   15a84:	b005      	add	sp, #20
   15a86:	bd30      	pop	{r4, r5, pc}
   15a88:	20002968 	.word	0x20002968

00015a8c <enqueue_sub_cfm>:
{
   15a8c:	b530      	push	{r4, r5, lr}
   15a8e:	b085      	sub	sp, #20
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*cfm));
   15a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
{
   15a94:	460d      	mov	r5, r1
   15a96:	4604      	mov	r4, r0
	net_buf_simple_reserve(&sdu, 1);
   15a98:	2101      	movs	r1, #1
   15a9a:	a801      	add	r0, sp, #4
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*cfm));
   15a9c:	9302      	str	r3, [sp, #8]
   15a9e:	f8cd d004 	str.w	sp, [sp, #4]
   15aa2:	f8cd d00c 	str.w	sp, [sp, #12]
	net_buf_simple_reserve(&sdu, 1);
   15aa6:	f00a f841 	bl	1fb2c <net_buf_simple_reserve>
	cfm = net_buf_simple_add(&sdu, sizeof(*cfm));
   15aaa:	2101      	movs	r1, #1
   15aac:	a801      	add	r0, sp, #4
   15aae:	f00a fa77 	bl	1ffa0 <net_buf_simple_add>
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, &sdu);
   15ab2:	aa01      	add	r2, sp, #4
	cfm->xact = xact;
   15ab4:	7005      	strb	r5, [r0, #0]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, &sdu);
   15ab6:	2109      	movs	r1, #9
   15ab8:	4620      	mov	r0, r4
   15aba:	f7ff ffc3 	bl	15a44 <encode_friend_ctl.isra.11>
	if (!buf) {
   15abe:	4605      	mov	r5, r0
   15ac0:	b928      	cbnz	r0, 15ace <enqueue_sub_cfm+0x42>
		BT_ERR("Unable to encode Subscription List Confirmation");
   15ac2:	2145      	movs	r1, #69	; 0x45
   15ac4:	480b      	ldr	r0, [pc, #44]	; (15af4 <enqueue_sub_cfm+0x68>)
   15ac6:	f011 ff04 	bl	278d2 <printk>
}
   15aca:	b005      	add	sp, #20
   15acc:	bd30      	pop	{r4, r5, pc}
	if (encrypt_friend_pdu(frnd, buf, false)) {
   15ace:	4601      	mov	r1, r0
   15ad0:	2200      	movs	r2, #0
   15ad2:	4620      	mov	r0, r4
   15ad4:	f7ff fd9a 	bl	1560c <encrypt_friend_pdu>
   15ad8:	2800      	cmp	r0, #0
   15ada:	d1f6      	bne.n	15aca <enqueue_sub_cfm+0x3e>
	if (frnd->last) {
   15adc:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   15ae0:	b108      	cbz	r0, 15ae6 <enqueue_sub_cfm+0x5a>
		net_buf_unref(frnd->last);
   15ae2:	f00a f90d 	bl	1fd00 <net_buf_unref>
	frnd->send_last = 1U;
   15ae6:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
   15ae8:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
	frnd->send_last = 1U;
   15aec:	f043 0302 	orr.w	r3, r3, #2
   15af0:	70e3      	strb	r3, [r4, #3]
   15af2:	e7ea      	b.n	15aca <enqueue_sub_cfm+0x3e>
   15af4:	00034e4c 	.word	0x00034e4c

00015af8 <friend_timeout>:
	__ASSERT_NO_MSG(frnd->pending_buf == 0U);
   15af8:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   15afc:	0719      	lsls	r1, r3, #28
{
   15afe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15b02:	4604      	mov	r4, r0
	struct bt_mesh_friend *frnd = CONTAINER_OF(work, struct bt_mesh_friend,
   15b04:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	__ASSERT_NO_MSG(frnd->pending_buf == 0U);
   15b08:	d50a      	bpl.n	15b20 <friend_timeout+0x28>
   15b0a:	4941      	ldr	r1, [pc, #260]	; (15c10 <friend_timeout+0x118>)
   15b0c:	4841      	ldr	r0, [pc, #260]	; (15c14 <friend_timeout+0x11c>)
   15b0e:	f240 42aa 	movw	r2, #1194	; 0x4aa
   15b12:	f011 fede 	bl	278d2 <printk>
   15b16:	f240 41aa 	movw	r1, #1194	; 0x4aa
   15b1a:	483d      	ldr	r0, [pc, #244]	; (15c10 <friend_timeout+0x118>)
   15b1c:	f012 f952 	bl	27dc4 <assert_post_action>
	if (frnd->send_last && frnd->last) {
   15b20:	f814 3c5d 	ldrb.w	r3, [r4, #-93]
   15b24:	079a      	lsls	r2, r3, #30
   15b26:	d514      	bpl.n	15b52 <friend_timeout+0x5a>
   15b28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   15b2a:	b192      	cbz	r2, 15b52 <friend_timeout+0x5a>
		frnd->send_last = 0U;
   15b2c:	f36f 0341 	bfc	r3, #1, #1
   15b30:	f804 3c5d 	strb.w	r3, [r4, #-93]
	frnd->pending_req = 0U;
   15b34:	f814 3c5d 	ldrb.w	r3, [r4, #-93]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
   15b38:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   15b3a:	4937      	ldr	r1, [pc, #220]	; (15c18 <friend_timeout+0x120>)
	frnd->pending_buf = 1U;
   15b3c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   15b40:	f043 0308 	orr.w	r3, r3, #8
   15b44:	f804 3c5d 	strb.w	r3, [r4, #-93]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
   15b48:	4632      	mov	r2, r6
}
   15b4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
   15b4e:	f7f8 bf43 	b.w	e9d8 <bt_mesh_adv_send>
	if (frnd->established && !frnd->pending_req) {
   15b52:	f003 0314 	and.w	r3, r3, #20
   15b56:	2b10      	cmp	r3, #16
   15b58:	d10a      	bne.n	15b70 <friend_timeout+0x78>
		BT_WARN("Friendship lost with 0x%04x", frnd->lpn);
   15b5a:	f834 2c60 	ldrh.w	r2, [r4, #-96]
   15b5e:	482f      	ldr	r0, [pc, #188]	; (15c1c <friend_timeout+0x124>)
   15b60:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Friendship not established with 0x%04x",
   15b62:	f011 feb6 	bl	278d2 <printk>
		friend_clear(frnd);
   15b66:	4630      	mov	r0, r6
}
   15b68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		friend_clear(frnd);
   15b6c:	f7ff be40 	b.w	157f0 <friend_clear>
Z_GENLIST_IS_EMPTY(slist)
   15b70:	6c25      	ldr	r5, [r4, #64]	; 0x40
Z_GENLIST_GET(slist, snode)
   15b72:	b92d      	cbnz	r5, 15b80 <friend_timeout+0x88>
	frnd->last = (void *)sys_slist_get(&frnd->queue);
   15b74:	63e5      	str	r5, [r4, #60]	; 0x3c
		BT_WARN("Friendship not established with 0x%04x",
   15b76:	f834 2c60 	ldrh.w	r2, [r4, #-96]
   15b7a:	4829      	ldr	r0, [pc, #164]	; (15c20 <friend_timeout+0x128>)
   15b7c:	2157      	movs	r1, #87	; 0x57
   15b7e:	e7f0      	b.n	15b62 <friend_timeout+0x6a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15b80:	6c63      	ldr	r3, [r4, #68]	; 0x44
   15b82:	682f      	ldr	r7, [r5, #0]
	list->head = node;
   15b84:	6427      	str	r7, [r4, #64]	; 0x40
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15b86:	429d      	cmp	r5, r3
	if (buf->len != 16) {
   15b88:	89ab      	ldrh	r3, [r5, #12]
	list->tail = node;
   15b8a:	bf08      	it	eq
   15b8c:	6467      	streq	r7, [r4, #68]	; 0x44
   15b8e:	2b10      	cmp	r3, #16
	frnd->last = (void *)sys_slist_get(&frnd->queue);
   15b90:	63e5      	str	r5, [r4, #60]	; 0x3c
	if (buf->len != 16) {
   15b92:	d12b      	bne.n	15bec <friend_timeout+0xf4>
	net_buf_simple_save(&buf->b, &state);
   15b94:	f105 0808 	add.w	r8, r5, #8
	state->offset = net_buf_simple_headroom(buf);
   15b98:	4640      	mov	r0, r8
   15b9a:	f017 fd03 	bl	2d5a4 <net_buf_simple_headroom>
	net_buf_skip(buf, 1); /* skip IVI, NID */
   15b9e:	2101      	movs	r1, #1
   15ba0:	4681      	mov	r9, r0
   15ba2:	4628      	mov	r0, r5
	state->len = buf->len;
   15ba4:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
   15ba8:	f016 f95d 	bl	2be66 <net_buf_skip>
	return net_buf_simple_pull_u8(&buf->b);
   15bac:	4640      	mov	r0, r8
   15bae:	f017 fcbf 	bl	2d530 <net_buf_simple_pull_u8>
	if (!(net_buf_pull_u8(buf) >> 7)) {
   15bb2:	0603      	lsls	r3, r0, #24
   15bb4:	d514      	bpl.n	15be0 <friend_timeout+0xe8>
	net_buf_skip(buf, 7); /* skip seqnum src dec*/
   15bb6:	2107      	movs	r1, #7
   15bb8:	4628      	mov	r0, r5
   15bba:	f016 f954 	bl	2be66 <net_buf_skip>
	return net_buf_simple_pull_mem(&buf->b, len);
   15bbe:	2101      	movs	r1, #1
   15bc0:	4640      	mov	r0, r8
   15bc2:	f00a f9cf 	bl	1ff64 <net_buf_simple_pull_mem>
	if (TRANS_CTL_OP((uint8_t *) net_buf_pull_mem(buf, 1))
   15bc6:	7803      	ldrb	r3, [r0, #0]
   15bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15bcc:	2b02      	cmp	r3, #2
   15bce:	d107      	bne.n	15be0 <friend_timeout+0xe8>
   15bd0:	2106      	movs	r1, #6
   15bd2:	4640      	mov	r0, r8
   15bd4:	f00a f9c6 	bl	1ff64 <net_buf_simple_pull_mem>
	md = (uint8_t)(sys_slist_peek_head(&frnd->queue) != NULL);
   15bd8:	3700      	adds	r7, #0
   15bda:	bf18      	it	ne
   15bdc:	2701      	movne	r7, #1
   15bde:	7147      	strb	r7, [r0, #5]
	buf->data = buf->__buf + state->offset;
   15be0:	692b      	ldr	r3, [r5, #16]
	buf->len = state->len;
   15be2:	f8a5 a00c 	strh.w	sl, [r5, #12]
	buf->data = buf->__buf + state->offset;
   15be6:	fa13 f389 	uxtah	r3, r3, r9
   15bea:	60ab      	str	r3, [r5, #8]
	if (encrypt_friend_pdu(frnd, frnd->last, false)) {
   15bec:	2200      	movs	r2, #0
   15bee:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   15bf0:	4630      	mov	r0, r6
   15bf2:	f7ff fd0b 	bl	1560c <encrypt_friend_pdu>
   15bf6:	b948      	cbnz	r0, 15c0c <friend_timeout+0x114>
	frnd->last->flags &= ~NET_BUF_FRAGS;
   15bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   15bfa:	795a      	ldrb	r2, [r3, #5]
	frnd->last->frags = NULL;
   15bfc:	6018      	str	r0, [r3, #0]
	frnd->last->flags &= ~NET_BUF_FRAGS;
   15bfe:	f022 0201 	bic.w	r2, r2, #1
   15c02:	715a      	strb	r2, [r3, #5]
	frnd->queue_size--;
   15c04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15c06:	3b01      	subs	r3, #1
   15c08:	64a3      	str	r3, [r4, #72]	; 0x48
   15c0a:	e793      	b.n	15b34 <friend_timeout+0x3c>
}
   15c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15c10:	00034ea9 	.word	0x00034ea9
   15c14:	0003067f 	.word	0x0003067f
   15c18:	0002fddc 	.word	0x0002fddc
   15c1c:	00034f01 	.word	0x00034f01
   15c20:	00034f22 	.word	0x00034f22

00015c24 <enqueue_update.constprop.23>:
static void enqueue_update(struct bt_mesh_friend *frnd, uint8_t md)
   15c24:	b530      	push	{r4, r5, lr}
   15c26:	b087      	sub	sp, #28
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*upd));
   15c28:	ab01      	add	r3, sp, #4
   15c2a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   15c2e:	9303      	str	r3, [sp, #12]
   15c30:	e9cd 2304 	strd	r2, r3, [sp, #16]
	__ASSERT_NO_MSG(frnd->subnet);
   15c34:	6903      	ldr	r3, [r0, #16]
static void enqueue_update(struct bt_mesh_friend *frnd, uint8_t md)
   15c36:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frnd->subnet);
   15c38:	b953      	cbnz	r3, 15c50 <enqueue_update.constprop.23+0x2c>
   15c3a:	491b      	ldr	r1, [pc, #108]	; (15ca8 <enqueue_update.constprop.23+0x84>)
   15c3c:	481b      	ldr	r0, [pc, #108]	; (15cac <enqueue_update.constprop.23+0x88>)
   15c3e:	f240 2216 	movw	r2, #534	; 0x216
   15c42:	f011 fe46 	bl	278d2 <printk>
   15c46:	f240 2116 	movw	r1, #534	; 0x216
   15c4a:	4817      	ldr	r0, [pc, #92]	; (15ca8 <enqueue_update.constprop.23+0x84>)
   15c4c:	f012 f8ba 	bl	27dc4 <assert_post_action>
	net_buf_simple_reserve(&sdu, 1);
   15c50:	2101      	movs	r1, #1
   15c52:	a803      	add	r0, sp, #12
   15c54:	f009 ff6a 	bl	1fb2c <net_buf_simple_reserve>
	upd = net_buf_simple_add(&sdu, sizeof(*upd));
   15c58:	2106      	movs	r1, #6
   15c5a:	a803      	add	r0, sp, #12
   15c5c:	f00a f9a0 	bl	1ffa0 <net_buf_simple_add>
   15c60:	4605      	mov	r5, r0
	upd->flags = bt_mesh_net_flags(frnd->subnet);
   15c62:	6920      	ldr	r0, [r4, #16]
   15c64:	f7fa f960 	bl	ff28 <bt_mesh_net_flags>
   15c68:	4b11      	ldr	r3, [pc, #68]	; (15cb0 <enqueue_update.constprop.23+0x8c>)
   15c6a:	7028      	strb	r0, [r5, #0]
	upd->iv_index = sys_cpu_to_be32(bt_mesh.iv_index);
   15c6c:	681b      	ldr	r3, [r3, #0]
   15c6e:	ba1b      	rev	r3, r3
   15c70:	f8c5 3001 	str.w	r3, [r5, #1]
	upd->md = md;
   15c74:	2300      	movs	r3, #0
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, &sdu);
   15c76:	2102      	movs	r1, #2
	upd->md = md;
   15c78:	716b      	strb	r3, [r5, #5]
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, &sdu);
   15c7a:	aa03      	add	r2, sp, #12
   15c7c:	4620      	mov	r0, r4
   15c7e:	f7ff fee1 	bl	15a44 <encode_friend_ctl.isra.11>
	if (!buf) {
   15c82:	4601      	mov	r1, r0
   15c84:	b928      	cbnz	r0, 15c92 <enqueue_update.constprop.23+0x6e>
		BT_ERR("Unable to encode Friend Update");
   15c86:	2145      	movs	r1, #69	; 0x45
   15c88:	480a      	ldr	r0, [pc, #40]	; (15cb4 <enqueue_update.constprop.23+0x90>)
   15c8a:	f011 fe22 	bl	278d2 <printk>
}
   15c8e:	b007      	add	sp, #28
   15c90:	bd30      	pop	{r4, r5, pc}
	net_buf_slist_put(&frnd->queue, buf);
   15c92:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   15c96:	f009 ff6d 	bl	1fb74 <net_buf_slist_put>
	frnd->queue_size++;
   15c9a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   15c9e:	3301      	adds	r3, #1
   15ca0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   15ca4:	e7f3      	b.n	15c8e <enqueue_update.constprop.23+0x6a>
   15ca6:	bf00      	nop
   15ca8:	00034ea9 	.word	0x00034ea9
   15cac:	0003067f 	.word	0x0003067f
   15cb0:	20002968 	.word	0x20002968
   15cb4:	00034e81 	.word	0x00034e81

00015cb8 <subnet_evt>:
{
   15cb8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15cbc:	4680      	mov	r8, r0
	if (evt == BT_MESH_KEY_ADDED) {
   15cbe:	b369      	cbz	r1, 15d1c <subnet_evt+0x64>
   15cc0:	4c23      	ldr	r4, [pc, #140]	; (15d50 <subnet_evt+0x98>)
				BT_ERR("Failed updating friend cred for 0x%04x",
   15cc2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 15d54 <subnet_evt+0x9c>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   15cc6:	2700      	movs	r7, #0
		switch (evt) {
   15cc8:	1e4d      	subs	r5, r1, #1
		if (frnd->subnet != sub) {
   15cca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15ccc:	4598      	cmp	r8, r3
   15cce:	d122      	bne.n	15d16 <subnet_evt+0x5e>
   15cd0:	f104 0620 	add.w	r6, r4, #32
		switch (evt) {
   15cd4:	2d03      	cmp	r5, #3
   15cd6:	d81e      	bhi.n	15d16 <subnet_evt+0x5e>
   15cd8:	e8df f005 	tbb	[pc, r5]
   15cdc:	2336041a 	.word	0x2336041a
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   15ce0:	2701      	movs	r7, #1
   15ce2:	e7f2      	b.n	15cca <subnet_evt+0x12>
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   15ce4:	f8b4 a020 	ldrh.w	sl, [r4, #32]
   15ce8:	f7fd f840 	bl	12d6c <bt_mesh_primary_addr>
					  frnd->subnet->keys[idx].net);
   15cec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15cee:	3387      	adds	r3, #135	; 0x87
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   15cf0:	9301      	str	r3, [sp, #4]
   15cf2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   15cf4:	9300      	str	r3, [sp, #0]
   15cf6:	4602      	mov	r2, r0
   15cf8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   15cfa:	4651      	mov	r1, sl
   15cfc:	f104 0055 	add.w	r0, r4, #85	; 0x55
   15d00:	f015 fa0f 	bl	2b122 <bt_mesh_friend_cred_create>
			if (err) {
   15d04:	b138      	cbz	r0, 15d16 <subnet_evt+0x5e>
				BT_ERR("Failed updating friend cred for 0x%04x",
   15d06:	8c22      	ldrh	r2, [r4, #32]
   15d08:	2145      	movs	r1, #69	; 0x45
   15d0a:	4648      	mov	r0, r9
   15d0c:	f011 fde1 	bl	278d2 <printk>
				friend_clear(frnd);
   15d10:	4630      	mov	r0, r6
   15d12:	f7ff fd6d 	bl	157f0 <friend_clear>
   15d16:	34e8      	adds	r4, #232	; 0xe8
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   15d18:	2f00      	cmp	r7, #0
   15d1a:	d0e1      	beq.n	15ce0 <subnet_evt+0x28>
}
   15d1c:	b002      	add	sp, #8
   15d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			memcpy(&frnd->cred[0], &frnd->cred[1],
   15d22:	f104 0055 	add.w	r0, r4, #85	; 0x55
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15d26:	4603      	mov	r3, r0
   15d28:	f104 0234 	add.w	r2, r4, #52	; 0x34
   15d2c:	f104 0175 	add.w	r1, r4, #117	; 0x75
   15d30:	f853 cb04 	ldr.w	ip, [r3], #4
   15d34:	f842 cb04 	str.w	ip, [r2], #4
   15d38:	428b      	cmp	r3, r1
   15d3a:	d1f9      	bne.n	15d30 <subnet_evt+0x78>
   15d3c:	781b      	ldrb	r3, [r3, #0]
   15d3e:	7013      	strb	r3, [r2, #0]
__ssp_bos_icheck3(memset, void *, int)
   15d40:	2100      	movs	r1, #0
   15d42:	2221      	movs	r2, #33	; 0x21
   15d44:	f018 faec 	bl	2e320 <memset>
			enqueue_update(frnd, 0);
   15d48:	4630      	mov	r0, r6
   15d4a:	f7ff ff6b 	bl	15c24 <enqueue_update.constprop.23>
			break;
   15d4e:	e7e2      	b.n	15d16 <subnet_evt+0x5e>
   15d50:	20002968 	.word	0x20002968
   15d54:	00034f5d 	.word	0x00034f5d

00015d58 <bt_mesh_friend_find.part.21>:
struct bt_mesh_friend *bt_mesh_friend_find(uint16_t net_idx, uint16_t lpn_addr,
   15d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d5c:	4d16      	ldr	r5, [pc, #88]	; (15db8 <bt_mesh_friend_find.part.21+0x60>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   15d5e:	2400      	movs	r4, #0
   15d60:	46ac      	mov	ip, r5
		if (net_idx != BT_MESH_KEY_ANY &&
   15d62:	f64f 7eff 	movw	lr, #65535	; 0xffff
		if (established && !frnd->established) {
   15d66:	f04f 08e8 	mov.w	r8, #232	; 0xe8
		if (valid && !frnd->subnet) {
   15d6a:	b10a      	cbz	r2, 15d70 <bt_mesh_friend_find.part.21+0x18>
   15d6c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
   15d6e:	b1b6      	cbz	r6, 15d9e <bt_mesh_friend_find.part.21+0x46>
		if (established && !frnd->established) {
   15d70:	b12b      	cbz	r3, 15d7e <bt_mesh_friend_find.part.21+0x26>
   15d72:	fb08 c604 	mla	r6, r8, r4, ip
   15d76:	f896 6023 	ldrb.w	r6, [r6, #35]	; 0x23
   15d7a:	06f6      	lsls	r6, r6, #27
   15d7c:	d50f      	bpl.n	15d9e <bt_mesh_friend_find.part.21+0x46>
		if (net_idx != BT_MESH_KEY_ANY &&
   15d7e:	4570      	cmp	r0, lr
   15d80:	d004      	beq.n	15d8c <bt_mesh_friend_find.part.21+0x34>
		    (!frnd->subnet || frnd->subnet->net_idx != net_idx)) {
   15d82:	6b2e      	ldr	r6, [r5, #48]	; 0x30
		if (net_idx != BT_MESH_KEY_ANY &&
   15d84:	b15e      	cbz	r6, 15d9e <bt_mesh_friend_find.part.21+0x46>
		    (!frnd->subnet || frnd->subnet->net_idx != net_idx)) {
   15d86:	8bb6      	ldrh	r6, [r6, #28]
   15d88:	4286      	cmp	r6, r0
   15d8a:	d108      	bne.n	15d9e <bt_mesh_friend_find.part.21+0x46>
	if (frnd->lpn == BT_MESH_ADDR_UNASSIGNED) {
   15d8c:	8c2f      	ldrh	r7, [r5, #32]
   15d8e:	b137      	cbz	r7, 15d9e <bt_mesh_friend_find.part.21+0x46>
	return (addr >= frnd->lpn && addr < (frnd->lpn + frnd->num_elem));
   15d90:	42b9      	cmp	r1, r7
   15d92:	d304      	bcc.n	15d9e <bt_mesh_friend_find.part.21+0x46>
   15d94:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
   15d98:	443e      	add	r6, r7
   15d9a:	42b1      	cmp	r1, r6
   15d9c:	db06      	blt.n	15dac <bt_mesh_friend_find.part.21+0x54>
   15d9e:	35e8      	adds	r5, #232	; 0xe8
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   15da0:	b114      	cbz	r4, 15da8 <bt_mesh_friend_find.part.21+0x50>
	return NULL;
   15da2:	2000      	movs	r0, #0
}
   15da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   15da8:	2401      	movs	r4, #1
   15daa:	e7de      	b.n	15d6a <bt_mesh_friend_find.part.21+0x12>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   15dac:	20e8      	movs	r0, #232	; 0xe8
   15dae:	fb00 c004 	mla	r0, r0, r4, ip
   15db2:	3020      	adds	r0, #32
   15db4:	e7f6      	b.n	15da4 <bt_mesh_friend_find.part.21+0x4c>
   15db6:	bf00      	nop
   15db8:	20002968 	.word	0x20002968

00015dbc <bt_mesh_friends_clear>:
{
   15dbc:	b510      	push	{r4, lr}
		if (!frnd->subnet) {
   15dbe:	4c08      	ldr	r4, [pc, #32]	; (15de0 <bt_mesh_friends_clear+0x24>)
   15dc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15dc2:	b11b      	cbz	r3, 15dcc <bt_mesh_friends_clear+0x10>
		friend_clear(frnd);
   15dc4:	f104 0020 	add.w	r0, r4, #32
   15dc8:	f7ff fd12 	bl	157f0 <friend_clear>
		if (!frnd->subnet) {
   15dcc:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   15dd0:	b123      	cbz	r3, 15ddc <bt_mesh_friends_clear+0x20>
		friend_clear(frnd);
   15dd2:	4804      	ldr	r0, [pc, #16]	; (15de4 <bt_mesh_friends_clear+0x28>)
}
   15dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		friend_clear(frnd);
   15dd8:	f7ff bd0a 	b.w	157f0 <friend_clear>
}
   15ddc:	bd10      	pop	{r4, pc}
   15dde:	bf00      	nop
   15de0:	20002968 	.word	0x20002968
   15de4:	20002a70 	.word	0x20002a70

00015de8 <bt_mesh_friend_sec_update>:
{
   15de8:	b538      	push	{r3, r4, r5, lr}
		if (!frnd->subnet) {
   15dea:	4d0f      	ldr	r5, [pc, #60]	; (15e28 <bt_mesh_friend_sec_update+0x40>)
   15dec:	6b2a      	ldr	r2, [r5, #48]	; 0x30
{
   15dee:	4604      	mov	r4, r0
		if (!frnd->subnet) {
   15df0:	b132      	cbz	r2, 15e00 <bt_mesh_friend_sec_update+0x18>
		if (net_idx == BT_MESH_KEY_ANY ||
   15df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15df6:	4298      	cmp	r0, r3
   15df8:	d10e      	bne.n	15e18 <bt_mesh_friend_sec_update+0x30>
			enqueue_update(frnd, 0x00);
   15dfa:	480c      	ldr	r0, [pc, #48]	; (15e2c <bt_mesh_friend_sec_update+0x44>)
   15dfc:	f7ff ff12 	bl	15c24 <enqueue_update.constprop.23>
		if (!frnd->subnet) {
   15e00:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   15e04:	b17b      	cbz	r3, 15e26 <bt_mesh_friend_sec_update+0x3e>
		if (net_idx == BT_MESH_KEY_ANY ||
   15e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15e0a:	4294      	cmp	r4, r2
   15e0c:	d108      	bne.n	15e20 <bt_mesh_friend_sec_update+0x38>
			enqueue_update(frnd, 0x00);
   15e0e:	4808      	ldr	r0, [pc, #32]	; (15e30 <bt_mesh_friend_sec_update+0x48>)
}
   15e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			enqueue_update(frnd, 0x00);
   15e14:	f7ff bf06 	b.w	15c24 <enqueue_update.constprop.23>
		if (net_idx == BT_MESH_KEY_ANY ||
   15e18:	8b93      	ldrh	r3, [r2, #28]
   15e1a:	4283      	cmp	r3, r0
   15e1c:	d1f0      	bne.n	15e00 <bt_mesh_friend_sec_update+0x18>
   15e1e:	e7ec      	b.n	15dfa <bt_mesh_friend_sec_update+0x12>
   15e20:	8b9b      	ldrh	r3, [r3, #28]
   15e22:	42a3      	cmp	r3, r4
   15e24:	d0f3      	beq.n	15e0e <bt_mesh_friend_sec_update+0x26>
}
   15e26:	bd38      	pop	{r3, r4, r5, pc}
   15e28:	20002968 	.word	0x20002968
   15e2c:	20002988 	.word	0x20002988
   15e30:	20002a70 	.word	0x20002a70

00015e34 <bt_mesh_friend_clear>:
{
   15e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_net_tx tx = {
   15e38:	4603      	mov	r3, r0
{
   15e3a:	b087      	sub	sp, #28
	struct bt_mesh_net_tx tx = {
   15e3c:	f853 2b04 	ldr.w	r2, [r3], #4
	struct bt_mesh_ctl_friend_clear *msg = (void *)buf->data;
   15e40:	680d      	ldr	r5, [r1, #0]
	struct bt_mesh_net_tx tx = {
   15e42:	2400      	movs	r4, #0
{
   15e44:	460e      	mov	r6, r1
	struct bt_mesh_net_tx tx = {
   15e46:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
   15e4a:	4607      	mov	r7, r0
	struct bt_mesh_net_tx tx = {
   15e4c:	9405      	str	r4, [sp, #20]
		.src  = bt_mesh_primary_addr(),
   15e4e:	f7fc ff8d 	bl	12d6c <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   15e52:	f8ad 0014 	strh.w	r0, [sp, #20]
		.xmit = bt_mesh_net_transmit_get(),
   15e56:	f7f8 fc71 	bl	e73c <bt_mesh_net_transmit_get>
	if (buf->len < sizeof(*msg)) {
   15e5a:	88b3      	ldrh	r3, [r6, #4]
	struct bt_mesh_net_tx tx = {
   15e5c:	f88d 0016 	strb.w	r0, [sp, #22]
	if (buf->len < sizeof(*msg)) {
   15e60:	2b03      	cmp	r3, #3
   15e62:	d808      	bhi.n	15e76 <bt_mesh_friend_clear+0x42>
		BT_WARN("Too short Friend Clear");
   15e64:	4822      	ldr	r0, [pc, #136]	; (15ef0 <bt_mesh_friend_clear+0xbc>)
   15e66:	2157      	movs	r1, #87	; 0x57
   15e68:	f011 fd33 	bl	278d2 <printk>
		return -EINVAL;
   15e6c:	f06f 0015 	mvn.w	r0, #21
}
   15e70:	b007      	add	sp, #28
   15e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   15e76:	f8b5 9000 	ldrh.w	r9, [r5]
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
   15e7a:	6838      	ldr	r0, [r7, #0]
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   15e7c:	f8b5 8002 	ldrh.w	r8, [r5, #2]
   15e80:	8b80      	ldrh	r0, [r0, #28]
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   15e82:	ea4f 2609 	mov.w	r6, r9, lsl #8
   15e86:	ea46 2619 	orr.w	r6, r6, r9, lsr #8
   15e8a:	b2b6      	uxth	r6, r6
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   15e8c:	4623      	mov	r3, r4
   15e8e:	4622      	mov	r2, r4
   15e90:	4631      	mov	r1, r6
   15e92:	f7ff ff61 	bl	15d58 <bt_mesh_friend_find.part.21>
   15e96:	ea4f 2508 	mov.w	r5, r8, lsl #8
   15e9a:	ea45 2518 	orr.w	r5, r5, r8, lsr #8
   15e9e:	b2ad      	uxth	r5, r5
	if (!frnd) {
   15ea0:	4607      	mov	r7, r0
   15ea2:	b930      	cbnz	r0, 15eb2 <bt_mesh_friend_clear+0x7e>
		BT_WARN("No matching LPN addr 0x%04x", lpn_addr);
   15ea4:	4813      	ldr	r0, [pc, #76]	; (15ef4 <bt_mesh_friend_clear+0xc0>)
   15ea6:	4632      	mov	r2, r6
   15ea8:	2157      	movs	r1, #87	; 0x57
   15eaa:	f011 fd12 	bl	278d2 <printk>
		return 0;
   15eae:	4638      	mov	r0, r7
   15eb0:	e7de      	b.n	15e70 <bt_mesh_friend_clear+0x3c>
	if (lpn_counter - frnd->lpn_counter > 255) {
   15eb2:	8942      	ldrh	r2, [r0, #10]
   15eb4:	1aab      	subs	r3, r5, r2
   15eb6:	2bff      	cmp	r3, #255	; 0xff
   15eb8:	dd06      	ble.n	15ec8 <bt_mesh_friend_clear+0x94>
		BT_WARN("LPN Counter out of range (old %u new %u)",
   15eba:	462b      	mov	r3, r5
   15ebc:	2157      	movs	r1, #87	; 0x57
   15ebe:	480e      	ldr	r0, [pc, #56]	; (15ef8 <bt_mesh_friend_clear+0xc4>)
   15ec0:	f011 fd07 	bl	278d2 <printk>
	return 0;
   15ec4:	4620      	mov	r0, r4
   15ec6:	e7d3      	b.n	15e70 <bt_mesh_friend_clear+0x3c>
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
   15ec8:	9b04      	ldr	r3, [sp, #16]
	cfm.lpn_addr    = msg->lpn_addr;
   15eca:	f8ad 9008 	strh.w	r9, [sp, #8]
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
   15ece:	227f      	movs	r2, #127	; 0x7f
   15ed0:	72da      	strb	r2, [r3, #11]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   15ed2:	2106      	movs	r1, #6
   15ed4:	e9cd 4400 	strd	r4, r4, [sp]
   15ed8:	2304      	movs	r3, #4
   15eda:	aa02      	add	r2, sp, #8
   15edc:	a803      	add	r0, sp, #12
	cfm.lpn_counter = msg->lpn_counter;
   15ede:	f8ad 800a 	strh.w	r8, [sp, #10]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   15ee2:	f7fb f959 	bl	11198 <bt_mesh_ctl_send>
	friend_clear(frnd);
   15ee6:	4638      	mov	r0, r7
   15ee8:	f7ff fc82 	bl	157f0 <friend_clear>
   15eec:	e7ea      	b.n	15ec4 <bt_mesh_friend_clear+0x90>
   15eee:	bf00      	nop
   15ef0:	00034943 	.word	0x00034943
   15ef4:	0003495f 	.word	0x0003495f
   15ef8:	00034980 	.word	0x00034980

00015efc <bt_mesh_friend_sub_add>:
{
   15efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   15efe:	888b      	ldrh	r3, [r1, #4]
   15f00:	2b02      	cmp	r3, #2
{
   15f02:	460d      	mov	r5, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   15f04:	d806      	bhi.n	15f14 <bt_mesh_friend_sub_add+0x18>
		BT_WARN("Too short Friend Subscription Add");
   15f06:	4824      	ldr	r0, [pc, #144]	; (15f98 <bt_mesh_friend_sub_add+0x9c>)
   15f08:	2157      	movs	r1, #87	; 0x57
   15f0a:	f011 fce2 	bl	278d2 <printk>
		return -EINVAL;
   15f0e:	f06f 0015 	mvn.w	r0, #21
}
   15f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
   15f14:	8906      	ldrh	r6, [r0, #8]
   15f16:	6800      	ldr	r0, [r0, #0]
   15f18:	2301      	movs	r3, #1
   15f1a:	461a      	mov	r2, r3
   15f1c:	4631      	mov	r1, r6
   15f1e:	8b80      	ldrh	r0, [r0, #28]
   15f20:	f7ff ff1a 	bl	15d58 <bt_mesh_friend_find.part.21>
	if (!frnd) {
   15f24:	4604      	mov	r4, r0
   15f26:	b930      	cbnz	r0, 15f36 <bt_mesh_friend_sub_add+0x3a>
		BT_WARN("No matching LPN addr 0x%04x", rx->ctx.addr);
   15f28:	4632      	mov	r2, r6
   15f2a:	2157      	movs	r1, #87	; 0x57
   15f2c:	481b      	ldr	r0, [pc, #108]	; (15f9c <bt_mesh_friend_sub_add+0xa0>)
   15f2e:	f011 fcd0 	bl	278d2 <printk>
	return 0;
   15f32:	2000      	movs	r0, #0
   15f34:	e7ed      	b.n	15f12 <bt_mesh_friend_sub_add+0x16>
	if (frnd->pending_buf) {
   15f36:	78c3      	ldrb	r3, [r0, #3]
   15f38:	071b      	lsls	r3, r3, #28
   15f3a:	d504      	bpl.n	15f46 <bt_mesh_friend_sub_add+0x4a>
		BT_WARN("Previous buffer not yet sent!");
   15f3c:	2157      	movs	r1, #87	; 0x57
   15f3e:	4818      	ldr	r0, [pc, #96]	; (15fa0 <bt_mesh_friend_sub_add+0xa4>)
   15f40:	f011 fcc7 	bl	278d2 <printk>
		return 0;
   15f44:	e7f5      	b.n	15f32 <bt_mesh_friend_sub_add+0x36>
	friend_recv_delay(frnd);
   15f46:	f015 ff30 	bl	2bdaa <friend_recv_delay>
	xact = net_buf_simple_pull_u8(buf);
   15f4a:	4628      	mov	r0, r5
   15f4c:	f017 faf0 	bl	2d530 <net_buf_simple_pull_u8>
	BT_WARN("No space in friend subscription list");
   15f50:	4f14      	ldr	r7, [pc, #80]	; (15fa4 <bt_mesh_friend_sub_add+0xa8>)
	xact = net_buf_simple_pull_u8(buf);
   15f52:	4606      	mov	r6, r0
	while (buf->len >= 2U) {
   15f54:	88ab      	ldrh	r3, [r5, #4]
   15f56:	2b01      	cmp	r3, #1
   15f58:	d804      	bhi.n	15f64 <bt_mesh_friend_sub_add+0x68>
	enqueue_sub_cfm(frnd, xact);
   15f5a:	4631      	mov	r1, r6
   15f5c:	4620      	mov	r0, r4
   15f5e:	f7ff fd95 	bl	15a8c <enqueue_sub_cfm>
   15f62:	e7e6      	b.n	15f32 <bt_mesh_friend_sub_add+0x36>
		friend_sub_add(frnd, net_buf_simple_pull_be16(buf));
   15f64:	4628      	mov	r0, r5
   15f66:	f017 faf3 	bl	2d550 <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == BT_MESH_ADDR_UNASSIGNED) {
   15f6a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   15f6e:	b133      	cbz	r3, 15f7e <bt_mesh_friend_sub_add+0x82>
   15f70:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   15f74:	b143      	cbz	r3, 15f88 <bt_mesh_friend_sub_add+0x8c>
   15f76:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   15f7a:	b93b      	cbnz	r3, 15f8c <bt_mesh_friend_sub_add+0x90>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   15f7c:	2302      	movs	r3, #2
			frnd->sub_list[i] = addr;
   15f7e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   15f82:	f8a3 0056 	strh.w	r0, [r3, #86]	; 0x56
			return;
   15f86:	e7e5      	b.n	15f54 <bt_mesh_friend_sub_add+0x58>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   15f88:	2301      	movs	r3, #1
   15f8a:	e7f8      	b.n	15f7e <bt_mesh_friend_sub_add+0x82>
	BT_WARN("No space in friend subscription list");
   15f8c:	2157      	movs	r1, #87	; 0x57
   15f8e:	4638      	mov	r0, r7
   15f90:	f011 fc9f 	bl	278d2 <printk>
   15f94:	e7de      	b.n	15f54 <bt_mesh_friend_sub_add+0x58>
   15f96:	bf00      	nop
   15f98:	00034cdc 	.word	0x00034cdc
   15f9c:	0003495f 	.word	0x0003495f
   15fa0:	00034d03 	.word	0x00034d03
   15fa4:	00034d26 	.word	0x00034d26

00015fa8 <bt_mesh_friend_sub_rem>:
{
   15fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   15faa:	888b      	ldrh	r3, [r1, #4]
   15fac:	2b02      	cmp	r3, #2
{
   15fae:	460e      	mov	r6, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   15fb0:	d806      	bhi.n	15fc0 <bt_mesh_friend_sub_rem+0x18>
		BT_WARN("Too short Friend Subscription Remove");
   15fb2:	4824      	ldr	r0, [pc, #144]	; (16044 <bt_mesh_friend_sub_rem+0x9c>)
   15fb4:	2157      	movs	r1, #87	; 0x57
   15fb6:	f011 fc8c 	bl	278d2 <printk>
		return -EINVAL;
   15fba:	f06f 0015 	mvn.w	r0, #21
}
   15fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
   15fc0:	8905      	ldrh	r5, [r0, #8]
   15fc2:	6800      	ldr	r0, [r0, #0]
   15fc4:	2301      	movs	r3, #1
   15fc6:	461a      	mov	r2, r3
   15fc8:	4629      	mov	r1, r5
   15fca:	8b80      	ldrh	r0, [r0, #28]
   15fcc:	f7ff fec4 	bl	15d58 <bt_mesh_friend_find.part.21>
	if (!frnd) {
   15fd0:	4604      	mov	r4, r0
   15fd2:	b930      	cbnz	r0, 15fe2 <bt_mesh_friend_sub_rem+0x3a>
		BT_WARN("No matching LPN addr 0x%04x", rx->ctx.addr);
   15fd4:	462a      	mov	r2, r5
   15fd6:	2157      	movs	r1, #87	; 0x57
   15fd8:	481b      	ldr	r0, [pc, #108]	; (16048 <bt_mesh_friend_sub_rem+0xa0>)
   15fda:	f011 fc7a 	bl	278d2 <printk>
	return 0;
   15fde:	2000      	movs	r0, #0
   15fe0:	e7ed      	b.n	15fbe <bt_mesh_friend_sub_rem+0x16>
	if (frnd->pending_buf) {
   15fe2:	78c3      	ldrb	r3, [r0, #3]
   15fe4:	f013 0508 	ands.w	r5, r3, #8
   15fe8:	d004      	beq.n	15ff4 <bt_mesh_friend_sub_rem+0x4c>
		BT_WARN("Previous buffer not yet sent!");
   15fea:	2157      	movs	r1, #87	; 0x57
   15fec:	4817      	ldr	r0, [pc, #92]	; (1604c <bt_mesh_friend_sub_rem+0xa4>)
   15fee:	f011 fc70 	bl	278d2 <printk>
		return 0;
   15ff2:	e7f4      	b.n	15fde <bt_mesh_friend_sub_rem+0x36>
	friend_recv_delay(frnd);
   15ff4:	f015 fed9 	bl	2bdaa <friend_recv_delay>
	xact = net_buf_simple_pull_u8(buf);
   15ff8:	4630      	mov	r0, r6
   15ffa:	f017 fa99 	bl	2d530 <net_buf_simple_pull_u8>
   15ffe:	4607      	mov	r7, r0
	while (buf->len >= 2U) {
   16000:	88b3      	ldrh	r3, [r6, #4]
   16002:	2b01      	cmp	r3, #1
   16004:	d804      	bhi.n	16010 <bt_mesh_friend_sub_rem+0x68>
	enqueue_sub_cfm(frnd, xact);
   16006:	4639      	mov	r1, r7
   16008:	4620      	mov	r0, r4
   1600a:	f7ff fd3f 	bl	15a8c <enqueue_sub_cfm>
   1600e:	e7e6      	b.n	15fde <bt_mesh_friend_sub_rem+0x36>
		friend_sub_rem(frnd, net_buf_simple_pull_be16(buf));
   16010:	4630      	mov	r0, r6
   16012:	f017 fa9d 	bl	2d550 <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == addr) {
   16016:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   1601a:	4283      	cmp	r3, r0
   1601c:	d00d      	beq.n	1603a <bt_mesh_friend_sub_rem+0x92>
   1601e:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   16022:	4283      	cmp	r3, r0
   16024:	d00b      	beq.n	1603e <bt_mesh_friend_sub_rem+0x96>
   16026:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   1602a:	4283      	cmp	r3, r0
   1602c:	d1e8      	bne.n	16000 <bt_mesh_friend_sub_rem+0x58>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   1602e:	2302      	movs	r3, #2
			frnd->sub_list[i] = BT_MESH_ADDR_UNASSIGNED;
   16030:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   16034:	f8a3 5056 	strh.w	r5, [r3, #86]	; 0x56
			return;
   16038:	e7e2      	b.n	16000 <bt_mesh_friend_sub_rem+0x58>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   1603a:	2300      	movs	r3, #0
   1603c:	e7f8      	b.n	16030 <bt_mesh_friend_sub_rem+0x88>
   1603e:	2301      	movs	r3, #1
   16040:	e7f6      	b.n	16030 <bt_mesh_friend_sub_rem+0x88>
   16042:	bf00      	nop
   16044:	00034d50 	.word	0x00034d50
   16048:	0003495f 	.word	0x0003495f
   1604c:	00034d03 	.word	0x00034d03

00016050 <bt_mesh_friend_poll>:
{
   16050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*msg)) {
   16054:	888b      	ldrh	r3, [r1, #4]
	struct bt_mesh_ctl_friend_poll *msg = (void *)buf->data;
   16056:	680f      	ldr	r7, [r1, #0]
	if (buf->len < sizeof(*msg)) {
   16058:	b933      	cbnz	r3, 16068 <bt_mesh_friend_poll+0x18>
		BT_WARN("Too short Friend Poll");
   1605a:	4839      	ldr	r0, [pc, #228]	; (16140 <bt_mesh_friend_poll+0xf0>)
   1605c:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Prohibited (non-zero) padding bits");
   1605e:	f011 fc38 	bl	278d2 <printk>
		return -EINVAL;
   16062:	f06f 0515 	mvn.w	r5, #21
   16066:	e00f      	b.n	16088 <bt_mesh_friend_poll+0x38>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
   16068:	8905      	ldrh	r5, [r0, #8]
   1606a:	6800      	ldr	r0, [r0, #0]
   1606c:	2300      	movs	r3, #0
   1606e:	2201      	movs	r2, #1
   16070:	4629      	mov	r1, r5
   16072:	8b80      	ldrh	r0, [r0, #28]
   16074:	f7ff fe70 	bl	15d58 <bt_mesh_friend_find.part.21>
	if (!frnd) {
   16078:	4604      	mov	r4, r0
   1607a:	b940      	cbnz	r0, 1608e <bt_mesh_friend_poll+0x3e>
		BT_WARN("No matching LPN addr 0x%04x", rx->ctx.addr);
   1607c:	462a      	mov	r2, r5
   1607e:	2157      	movs	r1, #87	; 0x57
   16080:	4830      	ldr	r0, [pc, #192]	; (16144 <bt_mesh_friend_poll+0xf4>)
   16082:	f011 fc26 	bl	278d2 <printk>
		return 0;
   16086:	4625      	mov	r5, r4
}
   16088:	4628      	mov	r0, r5
   1608a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (msg->fsn & ~1) {
   1608e:	783d      	ldrb	r5, [r7, #0]
   16090:	f035 0501 	bics.w	r5, r5, #1
   16094:	d002      	beq.n	1609c <bt_mesh_friend_poll+0x4c>
		BT_WARN("Prohibited (non-zero) padding bits");
   16096:	2157      	movs	r1, #87	; 0x57
   16098:	482b      	ldr	r0, [pc, #172]	; (16148 <bt_mesh_friend_poll+0xf8>)
   1609a:	e7e0      	b.n	1605e <bt_mesh_friend_poll+0xe>
	if (frnd->pending_buf) {
   1609c:	78c3      	ldrb	r3, [r0, #3]
   1609e:	0719      	lsls	r1, r3, #28
   160a0:	d504      	bpl.n	160ac <bt_mesh_friend_poll+0x5c>
		BT_WARN("Previous buffer not yet sent");
   160a2:	2157      	movs	r1, #87	; 0x57
   160a4:	4829      	ldr	r0, [pc, #164]	; (1614c <bt_mesh_friend_poll+0xfc>)
   160a6:	f011 fc14 	bl	278d2 <printk>
		return 0;
   160aa:	e7ed      	b.n	16088 <bt_mesh_friend_poll+0x38>
	friend_recv_delay(frnd);
   160ac:	f015 fe7d 	bl	2bdaa <friend_recv_delay>
	if (!frnd->established) {
   160b0:	78e3      	ldrb	r3, [r4, #3]
   160b2:	06da      	lsls	r2, r3, #27
   160b4:	d50c      	bpl.n	160d0 <bt_mesh_friend_poll+0x80>
	if (msg->fsn == frnd->fsn && frnd->last) {
   160b6:	78e3      	ldrb	r3, [r4, #3]
   160b8:	7839      	ldrb	r1, [r7, #0]
   160ba:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   160be:	f003 0201 	and.w	r2, r3, #1
   160c2:	4291      	cmp	r1, r2
   160c4:	d129      	bne.n	1611a <bt_mesh_friend_poll+0xca>
   160c6:	b370      	cbz	r0, 16126 <bt_mesh_friend_poll+0xd6>
		frnd->send_last = 1U;
   160c8:	f043 0302 	orr.w	r3, r3, #2
   160cc:	70e3      	strb	r3, [r4, #3]
   160ce:	e7db      	b.n	16088 <bt_mesh_friend_poll+0x38>
		Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   160d0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 16158 <bt_mesh_friend_poll+0x108>
   160d4:	4e1e      	ldr	r6, [pc, #120]	; (16150 <bt_mesh_friend_poll+0x100>)
   160d6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1615c <bt_mesh_friend_poll+0x10c>
		frnd->established = 1U;
   160da:	f043 0310 	orr.w	r3, r3, #16
   160de:	70e3      	strb	r3, [r4, #3]
		Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   160e0:	46c3      	mov	fp, r8
   160e2:	4546      	cmp	r6, r8
   160e4:	d90a      	bls.n	160fc <bt_mesh_friend_poll+0xac>
   160e6:	4649      	mov	r1, r9
   160e8:	481a      	ldr	r0, [pc, #104]	; (16154 <bt_mesh_friend_poll+0x104>)
   160ea:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   160ee:	f011 fbf0 	bl	278d2 <printk>
   160f2:	f44f 7132 	mov.w	r1, #712	; 0x2c8
   160f6:	4648      	mov	r0, r9
   160f8:	f011 fe64 	bl	27dc4 <assert_post_action>
   160fc:	455e      	cmp	r6, fp
   160fe:	d2da      	bcs.n	160b6 <bt_mesh_friend_poll+0x66>
			if (cb->established) {
   16100:	f8d6 a000 	ldr.w	sl, [r6]
   16104:	f1ba 0f00 	cmp.w	sl, #0
   16108:	d005      	beq.n	16116 <bt_mesh_friend_poll+0xc6>
				cb->established(frnd->subnet->net_idx, frnd->lpn, frnd->recv_delay,
   1610a:	6920      	ldr	r0, [r4, #16]
   1610c:	6863      	ldr	r3, [r4, #4]
   1610e:	78a2      	ldrb	r2, [r4, #2]
   16110:	8821      	ldrh	r1, [r4, #0]
   16112:	8b80      	ldrh	r0, [r0, #28]
   16114:	47d0      	blx	sl
		Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   16116:	3608      	adds	r6, #8
   16118:	e7e3      	b.n	160e2 <bt_mesh_friend_poll+0x92>
		if (frnd->last) {
   1611a:	b120      	cbz	r0, 16126 <bt_mesh_friend_poll+0xd6>
			net_buf_unref(frnd->last);
   1611c:	f009 fdf0 	bl	1fd00 <net_buf_unref>
			frnd->last = NULL;
   16120:	2300      	movs	r3, #0
   16122:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		frnd->fsn = msg->fsn;
   16126:	78e3      	ldrb	r3, [r4, #3]
   16128:	783a      	ldrb	r2, [r7, #0]
   1612a:	f362 0300 	bfi	r3, r2, #0, #1
   1612e:	70e3      	strb	r3, [r4, #3]
		if (sys_slist_is_empty(&frnd->queue)) {
   16130:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   16134:	2b00      	cmp	r3, #0
   16136:	d1a7      	bne.n	16088 <bt_mesh_friend_poll+0x38>
			enqueue_update(frnd, 0);
   16138:	4620      	mov	r0, r4
   1613a:	f7ff fd73 	bl	15c24 <enqueue_update.constprop.23>
			BT_DBG("Enqueued Friend Update to empty queue");
   1613e:	e7a3      	b.n	16088 <bt_mesh_friend_poll+0x38>
   16140:	00034aa8 	.word	0x00034aa8
   16144:	0003495f 	.word	0x0003495f
   16148:	00034ac3 	.word	0x00034ac3
   1614c:	00034aeb 	.word	0x00034aeb
   16150:	0002eef0 	.word	0x0002eef0
   16154:	0003067f 	.word	0x0003067f
   16158:	0002eef0 	.word	0x0002eef0
   1615c:	00034ea9 	.word	0x00034ea9

00016160 <bt_mesh_friend_clear_cfm>:
{
   16160:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*msg)) {
   16162:	888b      	ldrh	r3, [r1, #4]
	struct bt_mesh_ctl_friend_clear_confirm *msg = (void *)buf->data;
   16164:	680d      	ldr	r5, [r1, #0]
	if (buf->len < sizeof(*msg)) {
   16166:	2b03      	cmp	r3, #3
   16168:	d806      	bhi.n	16178 <bt_mesh_friend_clear_cfm+0x18>
		BT_WARN("Too short Friend Clear Confirm");
   1616a:	481d      	ldr	r0, [pc, #116]	; (161e0 <bt_mesh_friend_clear_cfm+0x80>)
   1616c:	2157      	movs	r1, #87	; 0x57
   1616e:	f011 fbb0 	bl	278d2 <printk>
		return -EINVAL;
   16172:	f06f 0015 	mvn.w	r0, #21
}
   16176:	bd38      	pop	{r3, r4, r5, pc}
		if (frnd->clear.frnd == prev_friend) {
   16178:	4c1a      	ldr	r4, [pc, #104]	; (161e4 <bt_mesh_friend_clear_cfm+0x84>)
	frnd = find_clear(rx->ctx.addr);
   1617a:	8902      	ldrh	r2, [r0, #8]
		if (frnd->clear.frnd == prev_friend) {
   1617c:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   16180:	4293      	cmp	r3, r2
   16182:	d01c      	beq.n	161be <bt_mesh_friend_clear_cfm+0x5e>
   16184:	f8b4 31bc 	ldrh.w	r3, [r4, #444]	; 0x1bc
   16188:	4293      	cmp	r3, r2
   1618a:	d026      	beq.n	161da <bt_mesh_friend_clear_cfm+0x7a>
		BT_WARN("No pending clear procedure for 0x%02x", rx->ctx.addr);
   1618c:	2157      	movs	r1, #87	; 0x57
   1618e:	4816      	ldr	r0, [pc, #88]	; (161e8 <bt_mesh_friend_clear_cfm+0x88>)
   16190:	f011 fb9f 	bl	278d2 <printk>
		return 0;
   16194:	2000      	movs	r0, #0
   16196:	e7ee      	b.n	16176 <bt_mesh_friend_clear_cfm+0x16>
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   16198:	886b      	ldrh	r3, [r5, #2]
   1619a:	021a      	lsls	r2, r3, #8
   1619c:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
	if (lpn_counter != frnd->lpn_counter) {
   161a0:	8963      	ldrh	r3, [r4, #10]
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   161a2:	b292      	uxth	r2, r2
	if (lpn_counter != frnd->lpn_counter) {
   161a4:	4293      	cmp	r3, r2
   161a6:	d002      	beq.n	161ae <bt_mesh_friend_clear_cfm+0x4e>
		BT_WARN("LPN counter mismatch (0x%04x != 0x%04x)",
   161a8:	2157      	movs	r1, #87	; 0x57
   161aa:	4810      	ldr	r0, [pc, #64]	; (161ec <bt_mesh_friend_clear_cfm+0x8c>)
   161ac:	e012      	b.n	161d4 <bt_mesh_friend_clear_cfm+0x74>
	k_delayed_work_cancel(&frnd->clear.timer);
   161ae:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   161b2:	f00f f9e1 	bl	25578 <k_delayed_work_cancel>
	frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
   161b6:	2000      	movs	r0, #0
   161b8:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
	return 0;
   161bc:	e7db      	b.n	16176 <bt_mesh_friend_clear_cfm+0x16>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   161be:	3420      	adds	r4, #32
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   161c0:	882b      	ldrh	r3, [r5, #0]
   161c2:	021a      	lsls	r2, r3, #8
   161c4:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
	if (lpn_addr != frnd->lpn) {
   161c8:	8823      	ldrh	r3, [r4, #0]
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   161ca:	b292      	uxth	r2, r2
	if (lpn_addr != frnd->lpn) {
   161cc:	4293      	cmp	r3, r2
   161ce:	d0e3      	beq.n	16198 <bt_mesh_friend_clear_cfm+0x38>
		BT_WARN("LPN address mismatch (0x%04x != 0x%04x)",
   161d0:	4807      	ldr	r0, [pc, #28]	; (161f0 <bt_mesh_friend_clear_cfm+0x90>)
   161d2:	2157      	movs	r1, #87	; 0x57
		BT_WARN("LPN counter mismatch (0x%04x != 0x%04x)",
   161d4:	f011 fb7d 	bl	278d2 <printk>
   161d8:	e7dc      	b.n	16194 <bt_mesh_friend_clear_cfm+0x34>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   161da:	f504 7484 	add.w	r4, r4, #264	; 0x108
   161de:	e7ef      	b.n	161c0 <bt_mesh_friend_clear_cfm+0x60>
   161e0:	000349ae 	.word	0x000349ae
   161e4:	20002968 	.word	0x20002968
   161e8:	000349d2 	.word	0x000349d2
   161ec:	00034a2a 	.word	0x00034a2a
   161f0:	000349fd 	.word	0x000349fd

000161f4 <bt_mesh_friend_req>:
{
   161f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   161f8:	7d03      	ldrb	r3, [r0, #20]
   161fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
   161fe:	2b10      	cmp	r3, #16
{
   16200:	b089      	sub	sp, #36	; 0x24
   16202:	4606      	mov	r6, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   16204:	d046      	beq.n	16294 <bt_mesh_friend_req+0xa0>
	if (buf->len < sizeof(*msg)) {
   16206:	888b      	ldrh	r3, [r1, #4]
   16208:	2b09      	cmp	r3, #9
   1620a:	d804      	bhi.n	16216 <bt_mesh_friend_req+0x22>
		BT_WARN("Too short Friend Request");
   1620c:	4895      	ldr	r0, [pc, #596]	; (16464 <bt_mesh_friend_req+0x270>)
   1620e:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Prohibited NumElements value (0x00)");
   16210:	f011 fb5f 	bl	278d2 <printk>
		return -EINVAL;
   16214:	e007      	b.n	16226 <bt_mesh_friend_req+0x32>
	struct bt_mesh_ctl_friend_req *msg = (void *)buf->data;
   16216:	680d      	ldr	r5, [r1, #0]
	if (msg->recv_delay <= 0x09) {
   16218:	786a      	ldrb	r2, [r5, #1]
   1621a:	2a09      	cmp	r2, #9
   1621c:	d809      	bhi.n	16232 <bt_mesh_friend_req+0x3e>
		BT_WARN("Prohibited ReceiveDelay (0x%02x)", msg->recv_delay);
   1621e:	4892      	ldr	r0, [pc, #584]	; (16468 <bt_mesh_friend_req+0x274>)
   16220:	2157      	movs	r1, #87	; 0x57
   16222:	f011 fb56 	bl	278d2 <printk>
		return -EINVAL;
   16226:	f06f 0515 	mvn.w	r5, #21
}
   1622a:	4628      	mov	r0, r5
   1622c:	b009      	add	sp, #36	; 0x24
   1622e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return ((uint16_t)src[0] << 8) | src[1];
   16232:	78eb      	ldrb	r3, [r5, #3]
   16234:	792f      	ldrb	r7, [r5, #4]
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   16236:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
   1623a:	78ab      	ldrb	r3, [r5, #2]
   1623c:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
	if (poll_to <= 0x000009 || poll_to >= 0x34bc00) {
   16240:	4b8a      	ldr	r3, [pc, #552]	; (1646c <bt_mesh_friend_req+0x278>)
   16242:	f1a7 020a 	sub.w	r2, r7, #10
   16246:	429a      	cmp	r2, r3
   16248:	d903      	bls.n	16252 <bt_mesh_friend_req+0x5e>
		BT_WARN("Prohibited PollTimeout (0x%06x)", poll_to);
   1624a:	463a      	mov	r2, r7
   1624c:	2157      	movs	r1, #87	; 0x57
   1624e:	4888      	ldr	r0, [pc, #544]	; (16470 <bt_mesh_friend_req+0x27c>)
   16250:	e7e7      	b.n	16222 <bt_mesh_friend_req+0x2e>
	if (msg->num_elem == 0x00) {
   16252:	79eb      	ldrb	r3, [r5, #7]
   16254:	b913      	cbnz	r3, 1625c <bt_mesh_friend_req+0x68>
		BT_WARN("Prohibited NumElements value (0x00)");
   16256:	2157      	movs	r1, #87	; 0x57
   16258:	4886      	ldr	r0, [pc, #536]	; (16474 <bt_mesh_friend_req+0x280>)
   1625a:	e7d9      	b.n	16210 <bt_mesh_friend_req+0x1c>
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr + msg->num_elem - 1)) {
   1625c:	8901      	ldrh	r1, [r0, #8]
   1625e:	440b      	add	r3, r1
   16260:	2b01      	cmp	r3, #1
   16262:	d003      	beq.n	1626c <bt_mesh_friend_req+0x78>
   16264:	3b01      	subs	r3, #1
   16266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1626a:	db02      	blt.n	16272 <bt_mesh_friend_req+0x7e>
		BT_WARN("LPN elements stretch outside of unicast range");
   1626c:	2157      	movs	r1, #87	; 0x57
   1626e:	4882      	ldr	r0, [pc, #520]	; (16478 <bt_mesh_friend_req+0x284>)
   16270:	e7ce      	b.n	16210 <bt_mesh_friend_req+0x1c>
	if (!MIN_QUEUE_SIZE_LOG(msg->criteria)) {
   16272:	782b      	ldrb	r3, [r5, #0]
   16274:	f013 0307 	ands.w	r3, r3, #7
   16278:	d102      	bne.n	16280 <bt_mesh_friend_req+0x8c>
		BT_WARN("Prohibited Minimum Queue Size in Friend Request");
   1627a:	2157      	movs	r1, #87	; 0x57
   1627c:	487f      	ldr	r0, [pc, #508]	; (1647c <bt_mesh_friend_req+0x288>)
   1627e:	e7c7      	b.n	16210 <bt_mesh_friend_req+0x1c>
	if (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE < MIN_QUEUE_SIZE(msg->criteria)) {
   16280:	2201      	movs	r2, #1
   16282:	fa02 f303 	lsl.w	r3, r2, r3
   16286:	2b10      	cmp	r3, #16
   16288:	d906      	bls.n	16298 <bt_mesh_friend_req+0xa4>
		BT_WARN("We have a too small Friend Queue size (%u < %u)",
   1628a:	2210      	movs	r2, #16
   1628c:	2157      	movs	r1, #87	; 0x57
   1628e:	487c      	ldr	r0, [pc, #496]	; (16480 <bt_mesh_friend_req+0x28c>)
   16290:	f011 fb1f 	bl	278d2 <printk>
		return 0;
   16294:	2500      	movs	r5, #0
   16296:	e7c8      	b.n	1622a <bt_mesh_friend_req+0x36>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
   16298:	6800      	ldr	r0, [r0, #0]
   1629a:	2300      	movs	r3, #0
   1629c:	8b80      	ldrh	r0, [r0, #28]
   1629e:	f7ff fd5b 	bl	15d58 <bt_mesh_friend_find.part.21>
	if (frnd) {
   162a2:	4604      	mov	r4, r0
   162a4:	b968      	cbnz	r0, 162c2 <bt_mesh_friend_req+0xce>
		if (!bt_mesh.frnd[i].subnet) {
   162a6:	4b77      	ldr	r3, [pc, #476]	; (16484 <bt_mesh_friend_req+0x290>)
   162a8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   162aa:	461a      	mov	r2, r3
   162ac:	b124      	cbz	r4, 162b8 <bt_mesh_friend_req+0xc4>
   162ae:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   162b2:	2b00      	cmp	r3, #0
   162b4:	d14c      	bne.n	16350 <bt_mesh_friend_req+0x15c>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   162b6:	2401      	movs	r4, #1
			frnd = &bt_mesh.frnd[i];
   162b8:	23e8      	movs	r3, #232	; 0xe8
   162ba:	fb03 2404 	mla	r4, r3, r4, r2
   162be:	3420      	adds	r4, #32
	if (!frnd) {
   162c0:	e006      	b.n	162d0 <bt_mesh_friend_req+0xdc>
		BT_WARN("Existing LPN re-requesting Friendship");
   162c2:	4871      	ldr	r0, [pc, #452]	; (16488 <bt_mesh_friend_req+0x294>)
   162c4:	2157      	movs	r1, #87	; 0x57
   162c6:	f011 fb04 	bl	278d2 <printk>
		friend_clear(frnd);
   162ca:	4620      	mov	r0, r4
   162cc:	f7ff fa90 	bl	157f0 <friend_clear>
	frnd->lpn = rx->ctx.addr;
   162d0:	f8b6 8008 	ldrh.w	r8, [r6, #8]
   162d4:	f8a4 8000 	strh.w	r8, [r4]
	frnd->num_elem = msg->num_elem;
   162d8:	79eb      	ldrb	r3, [r5, #7]
   162da:	7223      	strb	r3, [r4, #8]
	frnd->subnet = rx->sub;
   162dc:	6832      	ldr	r2, [r6, #0]
   162de:	6122      	str	r2, [r4, #16]
	frnd->recv_delay = msg->recv_delay;
   162e0:	786b      	ldrb	r3, [r5, #1]
   162e2:	70a3      	strb	r3, [r4, #2]
	frnd->poll_to = poll_to * 100U;
   162e4:	2364      	movs	r3, #100	; 0x64
   162e6:	435f      	muls	r7, r3
   162e8:	6067      	str	r7, [r4, #4]
	frnd->lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   162ea:	8929      	ldrh	r1, [r5, #8]
   162ec:	020b      	lsls	r3, r1, #8
   162ee:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   162f2:	8163      	strh	r3, [r4, #10]
	frnd->clear.frnd = sys_be16_to_cpu(msg->prev_addr);
   162f4:	f8b5 1005 	ldrh.w	r1, [r5, #5]
   162f8:	020b      	lsls	r3, r1, #8
   162fa:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   162fe:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	err = friend_cred_create(frnd, SUBNET_KEY_TX_IDX(frnd->subnet));
   16302:	7f92      	ldrb	r2, [r2, #30]
   16304:	1e93      	subs	r3, r2, #2
   16306:	f1d3 0900 	rsbs	r9, r3, #0
   1630a:	eb49 0903 	adc.w	r9, r9, r3
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   1630e:	f7fc fd2d 	bl	12d6c <bt_mesh_primary_addr>
					  frnd->subnet->keys[idx].net);
   16312:	225a      	movs	r2, #90	; 0x5a
   16314:	6921      	ldr	r1, [r4, #16]
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   16316:	8963      	ldrh	r3, [r4, #10]
					  frnd->subnet->keys[idx].net);
   16318:	fb02 f209 	mul.w	r2, r2, r9
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   1631c:	ea4f 1749 	mov.w	r7, r9, lsl #5
					  frnd->subnet->keys[idx].net);
   16320:	322d      	adds	r2, #45	; 0x2d
   16322:	440a      	add	r2, r1
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   16324:	444f      	add	r7, r9
   16326:	3714      	adds	r7, #20
   16328:	9201      	str	r2, [sp, #4]
   1632a:	89a2      	ldrh	r2, [r4, #12]
   1632c:	9200      	str	r2, [sp, #0]
   1632e:	4427      	add	r7, r4
   16330:	4602      	mov	r2, r0
   16332:	4641      	mov	r1, r8
   16334:	4638      	mov	r0, r7
   16336:	f014 fef4 	bl	2b122 <bt_mesh_friend_cred_create>
	if (err) {
   1633a:	b180      	cbz	r0, 1635e <bt_mesh_friend_req+0x16a>
		BT_ERR("Failed to create friend credentials");
   1633c:	2145      	movs	r1, #69	; 0x45
   1633e:	4853      	ldr	r0, [pc, #332]	; (1648c <bt_mesh_friend_req+0x298>)
   16340:	f011 fac7 	bl	278d2 <printk>
		friend_clear(frnd);
   16344:	4620      	mov	r0, r4
   16346:	f7ff fa53 	bl	157f0 <friend_clear>
		return -EIO;
   1634a:	f06f 0504 	mvn.w	r5, #4
   1634e:	e76c      	b.n	1622a <bt_mesh_friend_req+0x36>
		BT_WARN("No free Friend contexts for new LPN");
   16350:	2157      	movs	r1, #87	; 0x57
   16352:	484f      	ldr	r0, [pc, #316]	; (16490 <bt_mesh_friend_req+0x29c>)
   16354:	f011 fabd 	bl	278d2 <printk>
		return -ENOMEM;
   16358:	f06f 050b 	mvn.w	r5, #11
   1635c:	e765      	b.n	1622a <bt_mesh_friend_req+0x36>
	if (BT_MESH_ADDR_IS_UNICAST(frnd->clear.frnd) &&
   1635e:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
   16362:	b203      	sxth	r3, r0
   16364:	2b00      	cmp	r3, #0
   16366:	dd16      	ble.n	16396 <bt_mesh_friend_req+0x1a2>
	    !bt_mesh_elem_find(frnd->clear.frnd)) {
   16368:	f7fc fd06 	bl	12d78 <bt_mesh_elem_find>
	if (BT_MESH_ADDR_IS_UNICAST(frnd->clear.frnd) &&
   1636c:	b998      	cbnz	r0, 16396 <bt_mesh_friend_req+0x1a2>
	return z_impl_k_uptime_ticks();
   1636e:	f017 fefc 	bl	2e16a <z_impl_k_uptime_ticks>
   16372:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   16376:	fba0 8907 	umull	r8, r9, r0, r7
   1637a:	fb07 9901 	mla	r9, r7, r1, r9
   1637e:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   16382:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	frnd->clear.repeat_sec = 1U;
   16386:	2301      	movs	r3, #1
	return (uint32_t)k_uptime_get();
   16388:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
   1638c:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
	send_friend_clear(frnd);
   16390:	4620      	mov	r0, r4
   16392:	f7ff f8c1 	bl	15518 <send_friend_clear>
	delay = offer_delay(frnd, rx->ctx.recv_rssi, msg->criteria);
   16396:	782a      	ldrb	r2, [r5, #0]
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
   16398:	483e      	ldr	r0, [pc, #248]	; (16494 <bt_mesh_friend_req+0x2a0>)
   1639a:	f3c2 03c1 	ubfx	r3, r2, #3, #2
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
   1639e:	f3c2 1241 	ubfx	r2, r2, #5, #2
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
   163a2:	5cc1      	ldrb	r1, [r0, r3]
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
   163a4:	5c82      	ldrb	r2, [r0, r2]
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
   163a6:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
   163aa:	f996 100c 	ldrsb.w	r1, [r6, #12]
   163ae:	fb02 3111 	mls	r1, r2, r1, r3
	delay /= 10;
   163b2:	230a      	movs	r3, #10
   163b4:	fb91 f1f3 	sdiv	r1, r1, r3
	return MAX(delay, 100);
   163b8:	2964      	cmp	r1, #100	; 0x64
   163ba:	bfb8      	it	lt
   163bc:	2164      	movlt	r1, #100	; 0x64
   163be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   163c2:	f240 38e7 	movw	r8, #999	; 0x3e7
   163c6:	f04f 0900 	mov.w	r9, #0
   163ca:	fbc0 8901 	smlal	r8, r9, r0, r1
   163ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   163d2:	2300      	movs	r3, #0
   163d4:	4640      	mov	r0, r8
   163d6:	4649      	mov	r1, r9
   163d8:	f7eb fad8 	bl	198c <__aeabi_uldivmod>
	k_delayed_work_submit(&frnd->timer, K_MSEC(delay));
   163dc:	4602      	mov	r2, r0
   163de:	460b      	mov	r3, r1
   163e0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   163e4:	f7ff f8d4 	bl	15590 <k_delayed_work_submit>
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
   163e8:	ab03      	add	r3, sp, #12
   163ea:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
	net_buf_simple_reserve(&sdu, 1);
   163ee:	2101      	movs	r1, #1
   163f0:	a805      	add	r0, sp, #20
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
   163f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
	enqueue_offer(frnd, rx->ctx.recv_rssi);
   163f6:	f996 500c 	ldrsb.w	r5, [r6, #12]
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
   163fa:	9305      	str	r3, [sp, #20]
	net_buf_simple_reserve(&sdu, 1);
   163fc:	f009 fb96 	bl	1fb2c <net_buf_simple_reserve>
	off = net_buf_simple_add(&sdu, sizeof(*off));
   16400:	2106      	movs	r1, #6
   16402:	a805      	add	r0, sp, #20
   16404:	f009 fdcc 	bl	1ffa0 <net_buf_simple_add>
	off->recv_win = CONFIG_BT_MESH_FRIEND_RECV_WIN,
   16408:	23ff      	movs	r3, #255	; 0xff
   1640a:	7003      	strb	r3, [r0, #0]
	off->queue_size = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE,
   1640c:	2310      	movs	r3, #16
   1640e:	7043      	strb	r3, [r0, #1]
	off->sub_list_size = ARRAY_SIZE(frnd->sub_list),
   16410:	2303      	movs	r3, #3
   16412:	7083      	strb	r3, [r0, #2]
	off->rssi = rssi,
   16414:	70c5      	strb	r5, [r0, #3]
	off->frnd_counter = sys_cpu_to_be16(frnd->counter);
   16416:	89a2      	ldrh	r2, [r4, #12]
   16418:	0213      	lsls	r3, r2, #8
   1641a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1641e:	8083      	strh	r3, [r0, #4]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_OFFER, &sdu);
   16420:	aa05      	add	r2, sp, #20
   16422:	2104      	movs	r1, #4
   16424:	4620      	mov	r0, r4
   16426:	f7ff fb0d 	bl	15a44 <encode_friend_ctl.isra.11>
	if (!buf) {
   1642a:	4606      	mov	r6, r0
   1642c:	b920      	cbnz	r0, 16438 <bt_mesh_friend_req+0x244>
		BT_ERR("Unable to encode Friend Offer");
   1642e:	2145      	movs	r1, #69	; 0x45
   16430:	4819      	ldr	r0, [pc, #100]	; (16498 <bt_mesh_friend_req+0x2a4>)
   16432:	f011 fa4e 	bl	278d2 <printk>
		return;
   16436:	e72d      	b.n	16294 <bt_mesh_friend_req+0xa0>
	if (encrypt_friend_pdu(frnd, buf, true)) {
   16438:	4601      	mov	r1, r0
   1643a:	2201      	movs	r2, #1
   1643c:	4620      	mov	r0, r4
   1643e:	f7ff f8e5 	bl	1560c <encrypt_friend_pdu>
   16442:	4605      	mov	r5, r0
   16444:	2800      	cmp	r0, #0
   16446:	f47f af25 	bne.w	16294 <bt_mesh_friend_req+0xa0>
	if (frnd->last) {
   1644a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1644e:	b108      	cbz	r0, 16454 <bt_mesh_friend_req+0x260>
		net_buf_unref(frnd->last);
   16450:	f009 fc56 	bl	1fd00 <net_buf_unref>
	frnd->send_last = 1U;
   16454:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
   16456:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
	frnd->send_last = 1U;
   1645a:	f043 0302 	orr.w	r3, r3, #2
   1645e:	70e3      	strb	r3, [r4, #3]
   16460:	e6e3      	b.n	1622a <bt_mesh_friend_req+0x36>
   16462:	bf00      	nop
   16464:	00034b0d 	.word	0x00034b0d
   16468:	00034b2b 	.word	0x00034b2b
   1646c:	0034bbf5 	.word	0x0034bbf5
   16470:	00034b51 	.word	0x00034b51
   16474:	00034b76 	.word	0x00034b76
   16478:	00034b9f 	.word	0x00034b9f
   1647c:	00034bd2 	.word	0x00034bd2
   16480:	00034c07 	.word	0x00034c07
   16484:	20002968 	.word	0x20002968
   16488:	00034c3c 	.word	0x00034c3c
   1648c:	00034c90 	.word	0x00034c90
   16490:	00034c67 	.word	0x00034c67
   16494:	00034ea5 	.word	0x00034ea5
   16498:	00034cb9 	.word	0x00034cb9

0001649c <bt_mesh_friend_init>:
{
   1649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	list->head = NULL;
   164a0:	4c18      	ldr	r4, [pc, #96]	; (16504 <bt_mesh_friend_init+0x68>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   164a2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1650c <bt_mesh_friend_init+0x70>
   164a6:	4f18      	ldr	r7, [pc, #96]	; (16508 <bt_mesh_friend_init+0x6c>)
   164a8:	2500      	movs	r5, #0
   164aa:	2630      	movs	r6, #48	; 0x30
   164ac:	4632      	mov	r2, r6
   164ae:	4629      	mov	r1, r5
   164b0:	f104 0080 	add.w	r0, r4, #128	; 0x80
	list->tail = NULL;
   164b4:	e9c4 5530 	strd	r5, r5, [r4, #192]	; 0xc0
   164b8:	f017 ff32 	bl	2e320 <memset>
   164bc:	4632      	mov	r2, r6
   164be:	4629      	mov	r1, r5
   164c0:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   164c4:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
   164c8:	f017 ff2a 	bl	2e320 <memset>
   164cc:	4632      	mov	r2, r6
   164ce:	4629      	mov	r1, r5
   164d0:	f504 70b4 	add.w	r0, r4, #360	; 0x168
   164d4:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
   164d8:	e9c4 552c 	strd	r5, r5, [r4, #176]	; 0xb0
   164dc:	e9c4 556a 	strd	r5, r5, [r4, #424]	; 0x1a8
   164e0:	f017 ff1e 	bl	2e320 <memset>
   164e4:	4632      	mov	r2, r6
   164e6:	4629      	mov	r1, r5
   164e8:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   164ec:	f8c4 816c 	str.w	r8, [r4, #364]	; 0x16c
   164f0:	f017 ff16 	bl	2e320 <memset>
   164f4:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
   164f8:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
}
   164fc:	4628      	mov	r0, r5
   164fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16502:	bf00      	nop
   16504:	20002968 	.word	0x20002968
   16508:	0002be29 	.word	0x0002be29
   1650c:	00015af9 	.word	0x00015af9

00016510 <bt_mesh_friend_match>:
{
   16510:	b538      	push	{r3, r4, r5, lr}
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   16512:	460a      	mov	r2, r1
   16514:	4601      	mov	r1, r0
   16516:	4805      	ldr	r0, [pc, #20]	; (1652c <bt_mesh_friend_match+0x1c>)
   16518:	f015 fcb9 	bl	2be8e <friend_lpn_matches>
   1651c:	b920      	cbnz	r0, 16528 <bt_mesh_friend_match+0x18>
   1651e:	4804      	ldr	r0, [pc, #16]	; (16530 <bt_mesh_friend_match+0x20>)
}
   16520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   16524:	f015 bcb3 	b.w	2be8e <friend_lpn_matches>
}
   16528:	bd38      	pop	{r3, r4, r5, pc}
   1652a:	bf00      	nop
   1652c:	20002988 	.word	0x20002988
   16530:	20002a70 	.word	0x20002a70

00016534 <bt_mesh_friend_queue_has_space>:
{
   16534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16538:	4681      	mov	r9, r0
   1653a:	460f      	mov	r7, r1
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   1653c:	4601      	mov	r1, r0
   1653e:	4816      	ldr	r0, [pc, #88]	; (16598 <bt_mesh_friend_queue_has_space+0x64>)
{
   16540:	f89d 5020 	ldrb.w	r5, [sp, #32]
   16544:	4692      	mov	sl, r2
   16546:	4698      	mov	r8, r3
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   16548:	f015 fca1 	bl	2be8e <friend_lpn_matches>
   1654c:	4606      	mov	r6, r0
   1654e:	b1e0      	cbz	r0, 1658a <bt_mesh_friend_queue_has_space+0x56>
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   16550:	2d10      	cmp	r5, #16
   16552:	d81a      	bhi.n	1658a <bt_mesh_friend_queue_has_space+0x56>
   16554:	462b      	mov	r3, r5
   16556:	4642      	mov	r2, r8
   16558:	4639      	mov	r1, r7
   1655a:	480f      	ldr	r0, [pc, #60]	; (16598 <bt_mesh_friend_queue_has_space+0x64>)
   1655c:	f015 fd81 	bl	2c062 <friend_queue_has_space.part.18>
   16560:	4604      	mov	r4, r0
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   16562:	4652      	mov	r2, sl
   16564:	4649      	mov	r1, r9
   16566:	480d      	ldr	r0, [pc, #52]	; (1659c <bt_mesh_friend_queue_has_space+0x68>)
   16568:	f015 fc91 	bl	2be8e <friend_lpn_matches>
   1656c:	b178      	cbz	r0, 1658e <bt_mesh_friend_queue_has_space+0x5a>
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   1656e:	2d10      	cmp	r5, #16
   16570:	d808      	bhi.n	16584 <bt_mesh_friend_queue_has_space+0x50>
   16572:	462b      	mov	r3, r5
   16574:	4642      	mov	r2, r8
   16576:	4639      	mov	r1, r7
   16578:	4808      	ldr	r0, [pc, #32]	; (1659c <bt_mesh_friend_queue_has_space+0x68>)
   1657a:	f015 fd72 	bl	2c062 <friend_queue_has_space.part.18>
			someone_has_space = true;
   1657e:	2800      	cmp	r0, #0
   16580:	bf18      	it	ne
   16582:	4604      	movne	r4, r0
}
   16584:	4620      	mov	r0, r4
   16586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bool someone_has_space = false, friend_match = false;
   1658a:	2400      	movs	r4, #0
   1658c:	e7e9      	b.n	16562 <bt_mesh_friend_queue_has_space+0x2e>
	if (!friend_match) {
   1658e:	2e00      	cmp	r6, #0
		return true;
   16590:	bf08      	it	eq
   16592:	2401      	moveq	r4, #1
   16594:	e7f6      	b.n	16584 <bt_mesh_friend_queue_has_space+0x50>
   16596:	bf00      	nop
   16598:	20002988 	.word	0x20002988
   1659c:	20002a70 	.word	0x20002a70

000165a0 <bt_mesh_friend_enqueue_rx>:

void bt_mesh_friend_enqueue_rx(struct bt_mesh_net_rx *rx,
			       enum bt_mesh_friend_pdu_type type,
			       const uint64_t *seq_auth, uint8_t seg_count,
			       struct net_buf_simple *sbuf)
{
   165a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165a4:	4699      	mov	r9, r3
	int i;

	if (!rx->friend_match ||
   165a6:	7d03      	ldrb	r3, [r0, #20]
{
   165a8:	4617      	mov	r7, r2
	if (!rx->friend_match ||
   165aa:	061a      	lsls	r2, r3, #24
{
   165ac:	b089      	sub	sp, #36	; 0x24
   165ae:	4605      	mov	r5, r0
   165b0:	460e      	mov	r6, r1
	if (!rx->friend_match ||
   165b2:	d56c      	bpl.n	1668e <bt_mesh_friend_enqueue_rx+0xee>
   165b4:	7b42      	ldrb	r2, [r0, #13]
   165b6:	2a01      	cmp	r2, #1
   165b8:	d803      	bhi.n	165c2 <bt_mesh_friend_enqueue_rx+0x22>
	    (rx->ctx.recv_ttl <= 1U && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
   165ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
   165be:	2b10      	cmp	r3, #16
   165c0:	d165      	bne.n	1668e <bt_mesh_friend_enqueue_rx+0xee>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
   165c2:	f014 fc9d 	bl	2af00 <bt_mesh_friend_get>
	    (rx->ctx.recv_ttl <= 1U && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
   165c6:	2801      	cmp	r0, #1
   165c8:	d161      	bne.n	1668e <bt_mesh_friend_enqueue_rx+0xee>
   165ca:	4c3e      	ldr	r4, [pc, #248]	; (166c4 <bt_mesh_friend_enqueue_rx+0x124>)

	BT_DBG("recv_ttl %u net_idx 0x%04x src 0x%04x dst 0x%04x",
	       rx->ctx.recv_ttl, rx->sub->net_idx, rx->ctx.addr,
	       rx->ctx.recv_dst);

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   165cc:	f04f 0800 	mov.w	r8, #0
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   165d0:	f1a4 0b20 	sub.w	fp, r4, #32
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];

		if (!friend_lpn_matches(frnd, rx->sub->net_idx,
   165d4:	682b      	ldr	r3, [r5, #0]
   165d6:	896a      	ldrh	r2, [r5, #10]
   165d8:	8b9b      	ldrh	r3, [r3, #28]
   165da:	9303      	str	r3, [sp, #12]
   165dc:	4619      	mov	r1, r3
   165de:	4620      	mov	r0, r4
   165e0:	f015 fc55 	bl	2be8e <friend_lpn_matches>
   165e4:	2800      	cmp	r0, #0
   165e6:	d04e      	beq.n	16686 <bt_mesh_friend_enqueue_rx+0xe6>
					rx->ctx.recv_dst)) {
			continue;
		}

		if (friend_lpn_matches(frnd, rx->sub->net_idx,
   165e8:	f8b5 a008 	ldrh.w	sl, [r5, #8]
   165ec:	9b03      	ldr	r3, [sp, #12]
   165ee:	4652      	mov	r2, sl
   165f0:	4619      	mov	r1, r3
   165f2:	4620      	mov	r0, r4
   165f4:	f015 fc4b 	bl	2be8e <friend_lpn_matches>
   165f8:	2800      	cmp	r0, #0
   165fa:	d144      	bne.n	16686 <bt_mesh_friend_enqueue_rx+0xe6>
					rx->ctx.addr)) {
			continue;
		}

		if (!friend_queue_prepare_space(frnd, rx->ctx.addr, seq_auth,
   165fc:	464b      	mov	r3, r9
   165fe:	463a      	mov	r2, r7
   16600:	4651      	mov	r1, sl
   16602:	4620      	mov	r0, r4
   16604:	f7ff f950 	bl	158a8 <friend_queue_prepare_space>
   16608:	2800      	cmp	r0, #0
   1660a:	d03c      	beq.n	16686 <bt_mesh_friend_enqueue_rx+0xe6>
	if (bt_mesh_elem_find(rx->ctx.addr)) {
   1660c:	8928      	ldrh	r0, [r5, #8]
   1660e:	f7fc fbb3 	bl	12d78 <bt_mesh_elem_find>
   16612:	2800      	cmp	r0, #0
   16614:	d137      	bne.n	16686 <bt_mesh_friend_enqueue_rx+0xe6>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
   16616:	b92e      	cbnz	r6, 16624 <bt_mesh_friend_enqueue_rx+0x84>
   16618:	b127      	cbz	r7, 16624 <bt_mesh_friend_enqueue_rx+0x84>
		friend_purge_old_ack(frnd, seq_auth, rx->ctx.addr);
   1661a:	892a      	ldrh	r2, [r5, #8]
   1661c:	4639      	mov	r1, r7
   1661e:	4620      	mov	r0, r4
   16620:	f015 fc71 	bl	2bf06 <friend_purge_old_ack>
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   16624:	7d2a      	ldrb	r2, [r5, #20]
	info.src = rx->ctx.addr;
   16626:	68ab      	ldr	r3, [r5, #8]
   16628:	9305      	str	r3, [sp, #20]
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   1662a:	f002 0130 	and.w	r1, r2, #48	; 0x30
   1662e:	7b6b      	ldrb	r3, [r5, #13]
   16630:	2910      	cmp	r1, #16
		info.ttl = rx->ctx.recv_ttl - 1U;
   16632:	bf18      	it	ne
   16634:	f103 33ff 	addne.w	r3, r3, #4294967295
   16638:	f89d 101b 	ldrb.w	r1, [sp, #27]
   1663c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16640:	f363 0106 	bfi	r1, r3, #0, #7
	info.ctl = rx->ctl;
   16644:	f3c2 00c0 	ubfx	r0, r2, #3, #1
   16648:	460b      	mov	r3, r1
   1664a:	f360 13c7 	bfi	r3, r0, #7, #1
   1664e:	f88d 301b 	strb.w	r3, [sp, #27]
	sys_put_be24(rx->seq, info.seq);
   16652:	692b      	ldr	r3, [r5, #16]
	dst[1] = val;
   16654:	f88d 301a 	strb.w	r3, [sp, #26]
	dst[0] = val >> 16;
   16658:	0c19      	lsrs	r1, r3, #16
   1665a:	f88d 1018 	strb.w	r1, [sp, #24]
	dst[0] = val >> 8;
   1665e:	f3c3 2107 	ubfx	r1, r3, #8, #8
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   16662:	f8db 3000 	ldr.w	r3, [fp]
   16666:	f88d 1019 	strb.w	r1, [sp, #25]
   1666a:	f002 0201 	and.w	r2, r2, #1
   1666e:	1a9a      	subs	r2, r3, r2
	buf = create_friend_pdu(frnd, &info, sbuf);
   16670:	9912      	ldr	r1, [sp, #72]	; 0x48
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   16672:	9207      	str	r2, [sp, #28]
	buf = create_friend_pdu(frnd, &info, sbuf);
   16674:	a805      	add	r0, sp, #20
   16676:	f7ff f9a7 	bl	159c8 <create_friend_pdu.isra.10>
	if (!buf) {
   1667a:	4601      	mov	r1, r0
   1667c:	b968      	cbnz	r0, 1669a <bt_mesh_friend_enqueue_rx+0xfa>
		BT_ERR("Failed to encode Friend buffer");
   1667e:	2145      	movs	r1, #69	; 0x45
   16680:	4811      	ldr	r0, [pc, #68]	; (166c8 <bt_mesh_friend_enqueue_rx+0x128>)
   16682:	f011 f926 	bl	278d2 <printk>
		return;
   16686:	34e8      	adds	r4, #232	; 0xe8
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   16688:	f1b8 0f00 	cmp.w	r8, #0
   1668c:	d002      	beq.n	16694 <bt_mesh_friend_enqueue_rx+0xf4>
		}

		friend_lpn_enqueue_rx(frnd, rx, type, seq_auth, seg_count,
				      sbuf);
	}
}
   1668e:	b009      	add	sp, #36	; 0x24
   16690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16694:	f04f 0801 	mov.w	r8, #1
   16698:	e79c      	b.n	165d4 <bt_mesh_friend_enqueue_rx+0x34>
	if (type == BT_MESH_FRIEND_PDU_SINGLE) {
   1669a:	b94e      	cbnz	r6, 166b0 <bt_mesh_friend_enqueue_rx+0x110>
	net_buf_slist_put(&frnd->queue, buf);
   1669c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   166a0:	f009 fa68 	bl	1fb74 <net_buf_slist_put>
	frnd->queue_size++;
   166a4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   166a8:	3301      	adds	r3, #1
   166aa:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   166ae:	e7ea      	b.n	16686 <bt_mesh_friend_enqueue_rx+0xe6>
   166b0:	9000      	str	r0, [sp, #0]
   166b2:	464b      	mov	r3, r9
   166b4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   166b8:	4631      	mov	r1, r6
   166ba:	4620      	mov	r0, r4
   166bc:	f7ff f93a 	bl	15934 <enqueue_friend_pdu.part.20>
	BT_DBG("Queued message for LPN 0x%04x, queue_size %u",
   166c0:	e7e1      	b.n	16686 <bt_mesh_friend_enqueue_rx+0xe6>
   166c2:	bf00      	nop
   166c4:	20002988 	.word	0x20002988
   166c8:	00034a84 	.word	0x00034a84

000166cc <bt_mesh_friend_enqueue_tx>:

bool bt_mesh_friend_enqueue_tx(struct bt_mesh_net_tx *tx,
			       enum bt_mesh_friend_pdu_type type,
			       const uint64_t *seq_auth, uint8_t seg_count,
			       struct net_buf_simple *sbuf)
{
   166cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166d0:	b089      	sub	sp, #36	; 0x24
   166d2:	4605      	mov	r5, r0
   166d4:	9303      	str	r3, [sp, #12]
	bool matched = false;
	int i;

	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   166d6:	6803      	ldr	r3, [r0, #0]
   166d8:	8b9c      	ldrh	r4, [r3, #28]
   166da:	6843      	ldr	r3, [r0, #4]
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   166dc:	4847      	ldr	r0, [pc, #284]	; (167fc <bt_mesh_friend_enqueue_tx+0x130>)
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   166de:	889e      	ldrh	r6, [r3, #4]
{
   166e0:	460f      	mov	r7, r1
   166e2:	4692      	mov	sl, r2
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   166e4:	4621      	mov	r1, r4
   166e6:	4632      	mov	r2, r6
   166e8:	f015 fbd1 	bl	2be8e <friend_lpn_matches>
   166ec:	b940      	cbnz	r0, 16700 <bt_mesh_friend_enqueue_tx+0x34>
   166ee:	4844      	ldr	r0, [pc, #272]	; (16800 <bt_mesh_friend_enqueue_tx+0x134>)
   166f0:	f015 fbcd 	bl	2be8e <friend_lpn_matches>
   166f4:	b920      	cbnz	r0, 16700 <bt_mesh_friend_enqueue_tx+0x34>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
		return matched;
   166f6:	2600      	movs	r6, #0
				      sbuf);
		matched = true;
	}

	return matched;
}
   166f8:	4630      	mov	r0, r6
   166fa:	b009      	add	sp, #36	; 0x24
   166fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
   16700:	f014 fbfe 	bl	2af00 <bt_mesh_friend_get>
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   16704:	2801      	cmp	r0, #1
   16706:	d1f6      	bne.n	166f6 <bt_mesh_friend_enqueue_tx+0x2a>
   16708:	4c3c      	ldr	r4, [pc, #240]	; (167fc <bt_mesh_friend_enqueue_tx+0x130>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1670a:	f04f 0900 	mov.w	r9, #0
	bool matched = false;
   1670e:	464e      	mov	r6, r9
	sys_put_be24(bt_mesh.seq, info.seq);
   16710:	f1a4 0b20 	sub.w	fp, r4, #32
		if (!friend_lpn_matches(frnd, tx->sub->net_idx,
   16714:	e9d5 3200 	ldrd	r3, r2, [r5]
   16718:	4620      	mov	r0, r4
   1671a:	8892      	ldrh	r2, [r2, #4]
   1671c:	8b99      	ldrh	r1, [r3, #28]
   1671e:	f015 fbb6 	bl	2be8e <friend_lpn_matches>
   16722:	2800      	cmp	r0, #0
   16724:	d047      	beq.n	167b6 <bt_mesh_friend_enqueue_tx+0xea>
		if (!friend_queue_prepare_space(frnd, tx->src, seq_auth,
   16726:	9b03      	ldr	r3, [sp, #12]
   16728:	8929      	ldrh	r1, [r5, #8]
   1672a:	4652      	mov	r2, sl
   1672c:	4620      	mov	r0, r4
   1672e:	f7ff f8bb 	bl	158a8 <friend_queue_prepare_space>
   16732:	4680      	mov	r8, r0
   16734:	2800      	cmp	r0, #0
   16736:	d03e      	beq.n	167b6 <bt_mesh_friend_enqueue_tx+0xea>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
   16738:	b93f      	cbnz	r7, 1674a <bt_mesh_friend_enqueue_tx+0x7e>
   1673a:	f1ba 0f00 	cmp.w	sl, #0
   1673e:	d004      	beq.n	1674a <bt_mesh_friend_enqueue_tx+0x7e>
		friend_purge_old_ack(frnd, seq_auth, tx->src);
   16740:	892a      	ldrh	r2, [r5, #8]
   16742:	4651      	mov	r1, sl
   16744:	4620      	mov	r0, r4
   16746:	f015 fbde 	bl	2bf06 <friend_purge_old_ack>
	info.src = tx->src;
   1674a:	892b      	ldrh	r3, [r5, #8]
   1674c:	f8ad 3014 	strh.w	r3, [sp, #20]
	info.dst = tx->ctx->addr;
   16750:	686b      	ldr	r3, [r5, #4]
   16752:	889a      	ldrh	r2, [r3, #4]
	info.ttl = tx->ctx->send_ttl;
   16754:	7ad9      	ldrb	r1, [r3, #11]
	info.dst = tx->ctx->addr;
   16756:	f8ad 2016 	strh.w	r2, [sp, #22]
	info.ttl = tx->ctx->send_ttl;
   1675a:	f89d 201b 	ldrb.w	r2, [sp, #27]
   1675e:	f361 0206 	bfi	r2, r1, #0, #7
   16762:	f88d 201b 	strb.w	r2, [sp, #27]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
   16766:	885b      	ldrh	r3, [r3, #2]
   16768:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1676c:	1a9a      	subs	r2, r3, r2
   1676e:	4253      	negs	r3, r2
   16770:	4153      	adcs	r3, r2
   16772:	f89d 201b 	ldrb.w	r2, [sp, #27]
   16776:	f363 12c7 	bfi	r2, r3, #7, #1
	sys_put_be24(bt_mesh.seq, info.seq);
   1677a:	f8db 3004 	ldr.w	r3, [fp, #4]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
   1677e:	f88d 201b 	strb.w	r2, [sp, #27]
	dst[0] = val >> 16;
   16782:	0c1a      	lsrs	r2, r3, #16
   16784:	f88d 2018 	strb.w	r2, [sp, #24]
	dst[0] = val >> 8;
   16788:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1678c:	f88d 2019 	strb.w	r2, [sp, #25]
	dst[1] = val;
   16790:	f88d 301a 	strb.w	r3, [sp, #26]
	info.iv_index = BT_MESH_NET_IVI_TX;
   16794:	f8db 2000 	ldr.w	r2, [fp]
   16798:	f7fe ff2c 	bl	155f4 <atomic_test_bit.constprop.26>
   1679c:	1a10      	subs	r0, r2, r0
   1679e:	9007      	str	r0, [sp, #28]
	buf = create_friend_pdu(frnd, &info, sbuf);
   167a0:	9912      	ldr	r1, [sp, #72]	; 0x48
   167a2:	a805      	add	r0, sp, #20
   167a4:	f7ff f910 	bl	159c8 <create_friend_pdu.isra.10>
	if (!buf) {
   167a8:	4601      	mov	r1, r0
   167aa:	b958      	cbnz	r0, 167c4 <bt_mesh_friend_enqueue_tx+0xf8>
		BT_ERR("Failed to encode Friend buffer");
   167ac:	2145      	movs	r1, #69	; 0x45
   167ae:	4815      	ldr	r0, [pc, #84]	; (16804 <bt_mesh_friend_enqueue_tx+0x138>)
   167b0:	f011 f88f 	bl	278d2 <printk>
		matched = true;
   167b4:	4646      	mov	r6, r8
   167b6:	34e8      	adds	r4, #232	; 0xe8
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   167b8:	f1b9 0f00 	cmp.w	r9, #0
   167bc:	d19c      	bne.n	166f8 <bt_mesh_friend_enqueue_tx+0x2c>
   167be:	f04f 0901 	mov.w	r9, #1
   167c2:	e7a7      	b.n	16714 <bt_mesh_friend_enqueue_tx+0x48>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && !info.ctl) {
   167c4:	b98f      	cbnz	r7, 167ea <bt_mesh_friend_enqueue_tx+0x11e>
   167c6:	f99d 301b 	ldrsb.w	r3, [sp, #27]
   167ca:	2b00      	cmp	r3, #0
   167cc:	db03      	blt.n	167d6 <bt_mesh_friend_enqueue_tx+0x10a>
		FRIEND_ADV(buf)->app_idx = tx->ctx->app_idx;
   167ce:	686a      	ldr	r2, [r5, #4]
   167d0:	6943      	ldr	r3, [r0, #20]
   167d2:	8852      	ldrh	r2, [r2, #2]
   167d4:	819a      	strh	r2, [r3, #12]
	net_buf_slist_put(&frnd->queue, buf);
   167d6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   167da:	f009 f9cb 	bl	1fb74 <net_buf_slist_put>
	frnd->queue_size++;
   167de:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   167e2:	3301      	adds	r3, #1
   167e4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   167e8:	e7e4      	b.n	167b4 <bt_mesh_friend_enqueue_tx+0xe8>
	if (type == BT_MESH_FRIEND_PDU_SINGLE) {
   167ea:	9000      	str	r0, [sp, #0]
   167ec:	9b03      	ldr	r3, [sp, #12]
   167ee:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   167f2:	4639      	mov	r1, r7
   167f4:	4620      	mov	r0, r4
   167f6:	f7ff f89d 	bl	15934 <enqueue_friend_pdu.part.20>
   167fa:	e7db      	b.n	167b4 <bt_mesh_friend_enqueue_tx+0xe8>
   167fc:	20002988 	.word	0x20002988
   16800:	20002a70 	.word	0x20002a70
   16804:	00034a84 	.word	0x00034a84

00016808 <bt_mesh_friend_clear_incomplete>:
	return 0;
}

void bt_mesh_friend_clear_incomplete(struct bt_mesh_subnet *sub, uint16_t src,
				     uint16_t dst, uint64_t *seq_auth)
{
   16808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1680a:	4606      	mov	r6, r0
   1680c:	460c      	mov	r4, r1

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
		int j;

		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
   1680e:	8b81      	ldrh	r1, [r0, #28]
   16810:	481a      	ldr	r0, [pc, #104]	; (1687c <bt_mesh_friend_clear_incomplete+0x74>)
{
   16812:	4617      	mov	r7, r2
   16814:	461d      	mov	r5, r3
		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
   16816:	f015 fb3a 	bl	2be8e <friend_lpn_matches>
   1681a:	b198      	cbz	r0, 16844 <bt_mesh_friend_clear_incomplete+0x3c>
		}

		for (j = 0; j < ARRAY_SIZE(frnd->seg); j++) {
			struct bt_mesh_friend_seg *seg = &frnd->seg[j];

			if (!is_seg(seg, src, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   1681c:	882a      	ldrh	r2, [r5, #0]
   1681e:	4818      	ldr	r0, [pc, #96]	; (16880 <bt_mesh_friend_clear_incomplete+0x78>)
   16820:	f3c2 020c 	ubfx	r2, r2, #0, #13
   16824:	4621      	mov	r1, r4
   16826:	f015 fbec 	bl	2c002 <is_seg>
   1682a:	b158      	cbz	r0, 16844 <bt_mesh_friend_clear_incomplete+0x3c>
				continue;
			}

			BT_WARN("Clearing incomplete segments for 0x%04x", src);
   1682c:	4622      	mov	r2, r4
   1682e:	2157      	movs	r1, #87	; 0x57
   16830:	4814      	ldr	r0, [pc, #80]	; (16884 <bt_mesh_friend_clear_incomplete+0x7c>)
   16832:	f011 f84e 	bl	278d2 <printk>

			purge_buffers(&seg->queue);
   16836:	4812      	ldr	r0, [pc, #72]	; (16880 <bt_mesh_friend_clear_incomplete+0x78>)
   16838:	f015 fbcf 	bl	2bfda <purge_buffers>
			seg->seg_count = 0U;
   1683c:	4b12      	ldr	r3, [pc, #72]	; (16888 <bt_mesh_friend_clear_incomplete+0x80>)
   1683e:	2200      	movs	r2, #0
   16840:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
   16844:	463a      	mov	r2, r7
   16846:	8bb1      	ldrh	r1, [r6, #28]
   16848:	4810      	ldr	r0, [pc, #64]	; (1688c <bt_mesh_friend_clear_incomplete+0x84>)
   1684a:	f015 fb20 	bl	2be8e <friend_lpn_matches>
   1684e:	b198      	cbz	r0, 16878 <bt_mesh_friend_clear_incomplete+0x70>
			if (!is_seg(seg, src, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   16850:	882a      	ldrh	r2, [r5, #0]
   16852:	480f      	ldr	r0, [pc, #60]	; (16890 <bt_mesh_friend_clear_incomplete+0x88>)
   16854:	f3c2 020c 	ubfx	r2, r2, #0, #13
   16858:	4621      	mov	r1, r4
   1685a:	f015 fbd2 	bl	2c002 <is_seg>
   1685e:	b158      	cbz	r0, 16878 <bt_mesh_friend_clear_incomplete+0x70>
			BT_WARN("Clearing incomplete segments for 0x%04x", src);
   16860:	4622      	mov	r2, r4
   16862:	2157      	movs	r1, #87	; 0x57
   16864:	4807      	ldr	r0, [pc, #28]	; (16884 <bt_mesh_friend_clear_incomplete+0x7c>)
   16866:	f011 f834 	bl	278d2 <printk>
			purge_buffers(&seg->queue);
   1686a:	4809      	ldr	r0, [pc, #36]	; (16890 <bt_mesh_friend_clear_incomplete+0x88>)
   1686c:	f015 fbb5 	bl	2bfda <purge_buffers>
			seg->seg_count = 0U;
   16870:	4b05      	ldr	r3, [pc, #20]	; (16888 <bt_mesh_friend_clear_incomplete+0x80>)
   16872:	2200      	movs	r2, #0
   16874:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
			break;
		}
	}
}
   16878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1687a:	bf00      	nop
   1687c:	20002988 	.word	0x20002988
   16880:	20002a18 	.word	0x20002a18
   16884:	00034a57 	.word	0x00034a57
   16888:	20002968 	.word	0x20002968
   1688c:	20002a70 	.word	0x20002a70
   16890:	20002b00 	.word	0x20002b00

00016894 <prov_link_closed>:
static void prov_link_closed(const struct prov_bearer *bearer, void *cb_data,
			     enum prov_bearer_link_status reason)
{
	BT_DBG("%u", reason);

	if (bt_mesh_prov_link.role->link_closed) {
   16894:	4b07      	ldr	r3, [pc, #28]	; (168b4 <prov_link_closed+0x20>)
   16896:	689b      	ldr	r3, [r3, #8]
   16898:	685b      	ldr	r3, [r3, #4]
{
   1689a:	b510      	push	{r4, lr}
   1689c:	4604      	mov	r4, r0
	if (bt_mesh_prov_link.role->link_closed) {
   1689e:	b103      	cbz	r3, 168a2 <prov_link_closed+0xe>
		bt_mesh_prov_link.role->link_closed();
   168a0:	4798      	blx	r3
	}

	if (bt_mesh_prov->link_close) {
   168a2:	4b05      	ldr	r3, [pc, #20]	; (168b8 <prov_link_closed+0x24>)
   168a4:	681b      	ldr	r3, [r3, #0]
   168a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   168a8:	b11b      	cbz	r3, 168b2 <prov_link_closed+0x1e>
		bt_mesh_prov->link_close(bearer->type);
   168aa:	7820      	ldrb	r0, [r4, #0]
	}
}
   168ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->link_close(bearer->type);
   168b0:	4718      	bx	r3
}
   168b2:	bd10      	pop	{r4, pc}
   168b4:	20003ef4 	.word	0x20003ef4
   168b8:	20003ef0 	.word	0x20003ef0

000168bc <prov_bearer_error>:

static void prov_bearer_error(const struct prov_bearer *bearer, void *cb_data,
			      uint8_t err)
{
	if (bt_mesh_prov_link.role->error) {
   168bc:	4b03      	ldr	r3, [pc, #12]	; (168cc <prov_bearer_error+0x10>)
   168be:	689b      	ldr	r3, [r3, #8]
   168c0:	689b      	ldr	r3, [r3, #8]
   168c2:	b10b      	cbz	r3, 168c8 <prov_bearer_error+0xc>
		bt_mesh_prov_link.role->error(err);
   168c4:	4610      	mov	r0, r2
   168c6:	4718      	bx	r3
	}
}
   168c8:	4770      	bx	lr
   168ca:	bf00      	nop
   168cc:	20003ef4 	.word	0x20003ef4

000168d0 <prov_recv>:
{
   168d0:	b570      	push	{r4, r5, r6, lr}
	uint8_t type = buf->data[0];
   168d2:	6810      	ldr	r0, [r2, #0]
   168d4:	4c19      	ldr	r4, [pc, #100]	; (1693c <prov_recv+0x6c>)
{
   168d6:	4613      	mov	r3, r2
	uint8_t type = buf->data[0];
   168d8:	7802      	ldrb	r2, [r0, #0]
	if (type >= ARRAY_SIZE(bt_mesh_prov_link.role->op)) {
   168da:	2a09      	cmp	r2, #9
   168dc:	d907      	bls.n	168ee <prov_recv+0x1e>
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
   168de:	2145      	movs	r1, #69	; 0x45
   168e0:	4817      	ldr	r0, [pc, #92]	; (16940 <prov_recv+0x70>)
   168e2:	f010 fff6 	bl	278d2 <printk>
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_FMT);
   168e6:	68a3      	ldr	r3, [r4, #8]
   168e8:	2002      	movs	r0, #2
   168ea:	689b      	ldr	r3, [r3, #8]
   168ec:	e012      	b.n	16914 <prov_recv+0x44>
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   168ee:	d003      	beq.n	168f8 <prov_recv+0x28>
   168f0:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
   168f4:	4291      	cmp	r1, r2
   168f6:	d104      	bne.n	16902 <prov_recv+0x32>
	    !bt_mesh_prov_link.role->op[type]) {
   168f8:	68a1      	ldr	r1, [r4, #8]
   168fa:	1d15      	adds	r5, r2, #4
   168fc:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   16900:	b959      	cbnz	r1, 1691a <prov_recv+0x4a>
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, bt_mesh_prov_link.expect);
   16902:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   16906:	480f      	ldr	r0, [pc, #60]	; (16944 <prov_recv+0x74>)
   16908:	2157      	movs	r1, #87	; 0x57
   1690a:	f010 ffe2 	bl	278d2 <printk>
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   1690e:	68a3      	ldr	r3, [r4, #8]
   16910:	689b      	ldr	r3, [r3, #8]
   16912:	2003      	movs	r0, #3
}
   16914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   16918:	4718      	bx	r3
	if (1 + op_len[type] != buf->len) {
   1691a:	889d      	ldrh	r5, [r3, #4]
   1691c:	4b0a      	ldr	r3, [pc, #40]	; (16948 <prov_recv+0x78>)
   1691e:	5c9b      	ldrb	r3, [r3, r2]
   16920:	3301      	adds	r3, #1
   16922:	42ab      	cmp	r3, r5
   16924:	d006      	beq.n	16934 <prov_recv+0x64>
		BT_ERR("Invalid length %u for type 0x%02x", buf->len, type);
   16926:	4613      	mov	r3, r2
   16928:	2145      	movs	r1, #69	; 0x45
   1692a:	462a      	mov	r2, r5
   1692c:	4807      	ldr	r0, [pc, #28]	; (1694c <prov_recv+0x7c>)
   1692e:	f010 ffd0 	bl	278d2 <printk>
   16932:	e7d8      	b.n	168e6 <prov_recv+0x16>
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   16934:	3001      	adds	r0, #1
}
   16936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   1693a:	4708      	bx	r1
   1693c:	20003ef4 	.word	0x20003ef4
   16940:	00034fea 	.word	0x00034fea
   16944:	00035014 	.word	0x00035014
   16948:	00034fe0 	.word	0x00034fe0
   1694c:	00035039 	.word	0x00035039

00016950 <pub_key_ready>:
	if (!pkey) {
   16950:	b918      	cbnz	r0, 1695a <pub_key_ready+0xa>
		BT_WARN("Public key not available");
   16952:	2157      	movs	r1, #87	; 0x57
   16954:	4801      	ldr	r0, [pc, #4]	; (1695c <pub_key_ready+0xc>)
   16956:	f010 bfbc 	b.w	278d2 <printk>
}
   1695a:	4770      	bx	lr
   1695c:	00035060 	.word	0x00035060

00016960 <atomic_or.constprop.4>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16960:	4b07      	ldr	r3, [pc, #28]	; (16980 <atomic_or.constprop.4+0x20>)
}
   16962:	f3bf 8f5b 	dmb	ish
   16966:	4602      	mov	r2, r0
   16968:	e853 0f00 	ldrex	r0, [r3]
   1696c:	ea40 0102 	orr.w	r1, r0, r2
   16970:	e843 1c00 	strex	ip, r1, [r3]
   16974:	f1bc 0f00 	cmp.w	ip, #0
   16978:	d1f6      	bne.n	16968 <atomic_or.constprop.4+0x8>
   1697a:	f3bf 8f5b 	dmb	ish
   1697e:	4770      	bx	lr
   16980:	20003ef4 	.word	0x20003ef4

00016984 <prov_link_opened>:
{
   16984:	b510      	push	{r4, lr}
   16986:	4604      	mov	r4, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16988:	2002      	movs	r0, #2
   1698a:	f7ff ffe9 	bl	16960 <atomic_or.constprop.4>
	if (bt_mesh_prov->link_open) {
   1698e:	4b07      	ldr	r3, [pc, #28]	; (169ac <prov_link_opened+0x28>)
   16990:	681b      	ldr	r3, [r3, #0]
   16992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16994:	b10b      	cbz	r3, 1699a <prov_link_opened+0x16>
		bt_mesh_prov->link_open(bearer->type);
   16996:	7820      	ldrb	r0, [r4, #0]
   16998:	4798      	blx	r3
	bt_mesh_prov_link.bearer = bearer;
   1699a:	4b05      	ldr	r3, [pc, #20]	; (169b0 <prov_link_opened+0x2c>)
   1699c:	605c      	str	r4, [r3, #4]
	if (bt_mesh_prov_link.role->link_opened) {
   1699e:	689b      	ldr	r3, [r3, #8]
   169a0:	681b      	ldr	r3, [r3, #0]
   169a2:	b113      	cbz	r3, 169aa <prov_link_opened+0x26>
}
   169a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov_link.role->link_opened();
   169a8:	4718      	bx	r3
}
   169aa:	bd10      	pop	{r4, pc}
   169ac:	20003ef0 	.word	0x20003ef0
   169b0:	20003ef4 	.word	0x20003ef4

000169b4 <bt_mesh_prov_reset_state>:
{
   169b4:	b510      	push	{r4, lr}
	pub_key_cb.func = func ? func : pub_key_ready;
   169b6:	4b15      	ldr	r3, [pc, #84]	; (16a0c <bt_mesh_prov_reset_state+0x58>)
	if (bt_mesh_prov_link.conf_inputs[0]) {
   169b8:	4c15      	ldr	r4, [pc, #84]	; (16a10 <bt_mesh_prov_reset_state+0x5c>)
	pub_key_cb.func = func ? func : pub_key_ready;
   169ba:	2800      	cmp	r0, #0
   169bc:	bf08      	it	eq
   169be:	4618      	moveq	r0, r3
   169c0:	4b14      	ldr	r3, [pc, #80]	; (16a14 <bt_mesh_prov_reset_state+0x60>)
   169c2:	6018      	str	r0, [r3, #0]
	if (bt_mesh_prov_link.conf_inputs[0]) {
   169c4:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   169c8:	b11b      	cbz	r3, 169d2 <bt_mesh_prov_reset_state+0x1e>
		bt_mesh_attention(NULL, 0);
   169ca:	2100      	movs	r1, #0
   169cc:	4608      	mov	r0, r1
   169ce:	f7fe fb75 	bl	150bc <bt_mesh_attention>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   169d2:	f3bf 8f5b 	dmb	ish
   169d6:	2100      	movs	r1, #0
   169d8:	e854 3f00 	ldrex	r3, [r4]
   169dc:	e844 1200 	strex	r2, r1, [r4]
   169e0:	2a00      	cmp	r2, #0
   169e2:	d1f9      	bne.n	169d8 <bt_mesh_prov_reset_state+0x24>
   169e4:	f3bf 8f5b 	dmb	ish
	(void)memset((uint8_t *)&bt_mesh_prov_link + offset, 0,
   169e8:	f240 1205 	movw	r2, #261	; 0x105
   169ec:	480a      	ldr	r0, [pc, #40]	; (16a18 <bt_mesh_prov_reset_state+0x64>)
   169ee:	f017 fc97 	bl	2e320 <memset>
	err = bt_pub_key_gen(&pub_key_cb);
   169f2:	4808      	ldr	r0, [pc, #32]	; (16a14 <bt_mesh_prov_reset_state+0x60>)
   169f4:	f7f4 f93e 	bl	ac74 <bt_pub_key_gen>
	if (err) {
   169f8:	4604      	mov	r4, r0
   169fa:	b120      	cbz	r0, 16a06 <bt_mesh_prov_reset_state+0x52>
		BT_ERR("Failed to generate public key (%d)", err);
   169fc:	4602      	mov	r2, r0
   169fe:	2145      	movs	r1, #69	; 0x45
   16a00:	4806      	ldr	r0, [pc, #24]	; (16a1c <bt_mesh_prov_reset_state+0x68>)
   16a02:	f010 ff66 	bl	278d2 <printk>
}
   16a06:	4620      	mov	r0, r4
   16a08:	bd10      	pop	{r4, pc}
   16a0a:	bf00      	nop
   16a0c:	00016951 	.word	0x00016951
   16a10:	20003ef4 	.word	0x20003ef4
   16a14:	20004018 	.word	0x20004018
   16a18:	20003f13 	.word	0x20003f13
   16a1c:	00034fb8 	.word	0x00034fb8

00016a20 <bt_mesh_prov_auth>:
{
   16a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a24:	4614      	mov	r4, r2
   16a26:	b08a      	sub	sp, #40	; 0x28
	switch (method) {
   16a28:	2803      	cmp	r0, #3
   16a2a:	f200 80ac 	bhi.w	16b86 <bt_mesh_prov_auth+0x166>
   16a2e:	e8df f000 	tbb	[pc, r0]
   16a32:	0f02      	.short	0x0f02
   16a34:	9118      	.short	0x9118
		if (action || size) {
   16a36:	ea51 0402 	orrs.w	r4, r1, r2
   16a3a:	f040 80a4 	bne.w	16b86 <bt_mesh_prov_auth+0x166>
		(void)memset(bt_mesh_prov_link.auth, 0, sizeof(bt_mesh_prov_link.auth));
   16a3e:	2210      	movs	r2, #16
   16a40:	4621      	mov	r1, r4
   16a42:	4852      	ldr	r0, [pc, #328]	; (16b8c <bt_mesh_prov_auth+0x16c>)
   16a44:	f017 fc6c 	bl	2e320 <memset>
		return 0;
   16a48:	4620      	mov	r0, r4
}
   16a4a:	b00a      	add	sp, #40	; 0x28
   16a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (action || size) {
   16a50:	ea51 0402 	orrs.w	r4, r1, r2
   16a54:	f040 8097 	bne.w	16b86 <bt_mesh_prov_auth+0x166>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16a58:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16a5c:	f7ff ff80 	bl	16960 <atomic_or.constprop.4>
   16a60:	e7f2      	b.n	16a48 <bt_mesh_prov_auth+0x28>
	switch (action) {
   16a62:	2904      	cmp	r1, #4
   16a64:	f200 808f 	bhi.w	16b86 <bt_mesh_prov_auth+0x166>
   16a68:	4b49      	ldr	r3, [pc, #292]	; (16b90 <bt_mesh_prov_auth+0x170>)
   16a6a:	5c5f      	ldrb	r7, [r3, r1]
		if (!output) {
   16a6c:	2f00      	cmp	r7, #0
   16a6e:	f000 808a 	beq.w	16b86 <bt_mesh_prov_auth+0x166>
		if (!(bt_mesh_prov->output_actions & output)) {
   16a72:	f8df 812c 	ldr.w	r8, [pc, #300]	; 16ba0 <bt_mesh_prov_auth+0x180>
   16a76:	f8d8 3000 	ldr.w	r3, [r8]
   16a7a:	8a5a      	ldrh	r2, [r3, #18]
   16a7c:	423a      	tst	r2, r7
   16a7e:	4645      	mov	r5, r8
   16a80:	f000 8081 	beq.w	16b86 <bt_mesh_prov_auth+0x166>
		if (size > bt_mesh_prov->output_size) {
   16a84:	7c5b      	ldrb	r3, [r3, #17]
   16a86:	42a3      	cmp	r3, r4
   16a88:	d37d      	bcc.n	16b86 <bt_mesh_prov_auth+0x166>
   16a8a:	2010      	movs	r0, #16
   16a8c:	f7ff ff68 	bl	16960 <atomic_or.constprop.4>
		if (output == BT_MESH_DISPLAY_STRING) {
   16a90:	2f10      	cmp	r7, #16
   16a92:	d131      	bne.n	16af8 <bt_mesh_prov_auth+0xd8>
			bt_rand(str, size);
   16a94:	4621      	mov	r1, r4
   16a96:	a802      	add	r0, sp, #8
   16a98:	f015 ff36 	bl	2c908 <bt_rand>
				str[i] %= 36;
   16a9c:	2624      	movs	r6, #36	; 0x24
   16a9e:	a802      	add	r0, sp, #8
			for (i = 0U; i < size; i++) {
   16aa0:	2100      	movs	r1, #0
   16aa2:	b2cb      	uxtb	r3, r1
   16aa4:	42a3      	cmp	r3, r4
   16aa6:	d317      	bcc.n	16ad8 <bt_mesh_prov_auth+0xb8>
			str[size] = '\0';
   16aa8:	ab0a      	add	r3, sp, #40	; 0x28
   16aaa:	4423      	add	r3, r4
			memcpy(bt_mesh_prov_link.auth, str, size);
   16aac:	4e37      	ldr	r6, [pc, #220]	; (16b8c <bt_mesh_prov_auth+0x16c>)
			str[size] = '\0';
   16aae:	2700      	movs	r7, #0
   16ab0:	f803 7c20 	strb.w	r7, [r3, #-32]
			memcpy(bt_mesh_prov_link.auth, str, size);
   16ab4:	4622      	mov	r2, r4
   16ab6:	f240 1315 	movw	r3, #277	; 0x115
   16aba:	a902      	add	r1, sp, #8
   16abc:	4630      	mov	r0, r6
   16abe:	f017 fc02 	bl	2e2c6 <__memcpy_chk>
   16ac2:	f1c4 0210 	rsb	r2, r4, #16
   16ac6:	4639      	mov	r1, r7
   16ac8:	1930      	adds	r0, r6, r4
   16aca:	f017 fc29 	bl	2e320 <memset>
			return bt_mesh_prov->output_string((char *)str);
   16ace:	682b      	ldr	r3, [r5, #0]
   16ad0:	a802      	add	r0, sp, #8
   16ad2:	6a1b      	ldr	r3, [r3, #32]
   16ad4:	4798      	blx	r3
   16ad6:	e7b8      	b.n	16a4a <bt_mesh_prov_auth+0x2a>
				str[i] %= 36;
   16ad8:	7803      	ldrb	r3, [r0, #0]
   16ada:	fbb3 f2f6 	udiv	r2, r3, r6
   16ade:	fb06 3212 	mls	r2, r6, r2, r3
   16ae2:	b2d2      	uxtb	r2, r2
				if (str[i] < 10) {
   16ae4:	b253      	sxtb	r3, r2
   16ae6:	2a09      	cmp	r2, #9
					str[i] += '0';
   16ae8:	bf94      	ite	ls
   16aea:	3330      	addls	r3, #48	; 0x30
					str[i] += 'A' - 10;
   16aec:	3337      	addhi	r3, #55	; 0x37
   16aee:	b2db      	uxtb	r3, r3
   16af0:	f800 3b01 	strb.w	r3, [r0], #1
   16af4:	3101      	adds	r1, #1
   16af6:	e7d4      	b.n	16aa2 <bt_mesh_prov_auth+0x82>
			uint32_t div[8] = { 10, 100, 1000, 10000, 100000,
   16af8:	4e26      	ldr	r6, [pc, #152]	; (16b94 <bt_mesh_prov_auth+0x174>)
   16afa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16afc:	ad02      	add	r5, sp, #8
   16afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16b00:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   16b04:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			bt_rand(&num, sizeof(num));
   16b08:	2104      	movs	r1, #4
   16b0a:	eb0d 0001 	add.w	r0, sp, r1
   16b0e:	f015 fefb 	bl	2c908 <bt_rand>
			num %= div[size - 1];
   16b12:	ab0a      	add	r3, sp, #40	; 0x28
   16b14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   16b18:	9a01      	ldr	r2, [sp, #4]
   16b1a:	f854 3c24 	ldr.w	r3, [r4, #-36]
   16b1e:	fbb2 f1f3 	udiv	r1, r2, r3
   16b22:	fb03 2111 	mls	r1, r3, r1, r2
	dst[0] = val >> 8;
   16b26:	4b1c      	ldr	r3, [pc, #112]	; (16b98 <bt_mesh_prov_auth+0x178>)
   16b28:	9101      	str	r1, [sp, #4]
	sys_put_be16(val >> 16, dst);
   16b2a:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val >> 8;
   16b2c:	0a10      	lsrs	r0, r2, #8
	dst[1] = val;
   16b2e:	771a      	strb	r2, [r3, #28]
	dst[0] = val >> 8;
   16b30:	f3c1 2207 	ubfx	r2, r1, #8, #8
   16b34:	775a      	strb	r2, [r3, #29]
			(void)memset(bt_mesh_prov_link.auth, 0, 12);
   16b36:	2200      	movs	r2, #0
	dst[1] = val;
   16b38:	7799      	strb	r1, [r3, #30]
	dst[0] = val >> 8;
   16b3a:	76d8      	strb	r0, [r3, #27]
   16b3c:	f8c3 200f 	str.w	r2, [r3, #15]
   16b40:	f8c3 2013 	str.w	r2, [r3, #19]
   16b44:	f8c3 2017 	str.w	r2, [r3, #23]
			return bt_mesh_prov->output_number(output, num);
   16b48:	f8d8 3000 	ldr.w	r3, [r8]
   16b4c:	4638      	mov	r0, r7
   16b4e:	69db      	ldr	r3, [r3, #28]
   16b50:	4798      	blx	r3
   16b52:	e77a      	b.n	16a4a <bt_mesh_prov_auth+0x2a>
	switch (action) {
   16b54:	2903      	cmp	r1, #3
   16b56:	d816      	bhi.n	16b86 <bt_mesh_prov_auth+0x166>
   16b58:	4b10      	ldr	r3, [pc, #64]	; (16b9c <bt_mesh_prov_auth+0x17c>)
   16b5a:	5c5d      	ldrb	r5, [r3, r1]
		if (!input) {
   16b5c:	b19d      	cbz	r5, 16b86 <bt_mesh_prov_auth+0x166>
		if (!(bt_mesh_prov->input_actions & input)) {
   16b5e:	4e10      	ldr	r6, [pc, #64]	; (16ba0 <bt_mesh_prov_auth+0x180>)
   16b60:	6832      	ldr	r2, [r6, #0]
   16b62:	8ad1      	ldrh	r1, [r2, #22]
   16b64:	4229      	tst	r1, r5
   16b66:	d00e      	beq.n	16b86 <bt_mesh_prov_auth+0x166>
		if (size > bt_mesh_prov->input_size) {
   16b68:	7d13      	ldrb	r3, [r2, #20]
   16b6a:	42a3      	cmp	r3, r4
   16b6c:	d30b      	bcc.n	16b86 <bt_mesh_prov_auth+0x166>
		if (input == BT_MESH_ENTER_STRING) {
   16b6e:	2d08      	cmp	r5, #8
   16b70:	bf0c      	ite	eq
   16b72:	4628      	moveq	r0, r5
   16b74:	2004      	movne	r0, #4
   16b76:	f7ff fef3 	bl	16960 <atomic_or.constprop.4>
		return bt_mesh_prov->input(input, size);
   16b7a:	6833      	ldr	r3, [r6, #0]
   16b7c:	4621      	mov	r1, r4
   16b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16b80:	4628      	mov	r0, r5
   16b82:	4798      	blx	r3
   16b84:	e761      	b.n	16a4a <bt_mesh_prov_auth+0x2a>
			return -EINVAL;
   16b86:	f06f 0015 	mvn.w	r0, #21
   16b8a:	e75e      	b.n	16a4a <bt_mesh_prov_auth+0x2a>
   16b8c:	20003f03 	.word	0x20003f03
   16b90:	00034f89 	.word	0x00034f89
   16b94:	0002f2bc 	.word	0x0002f2bc
   16b98:	20003ef4 	.word	0x20003ef4
   16b9c:	00034f8e 	.word	0x00034f8e
   16ba0:	20003ef0 	.word	0x20003ef0

00016ba4 <bt_mesh_prov_get>:
}
   16ba4:	4b01      	ldr	r3, [pc, #4]	; (16bac <bt_mesh_prov_get+0x8>)
   16ba6:	6818      	ldr	r0, [r3, #0]
   16ba8:	4770      	bx	lr
   16baa:	bf00      	nop
   16bac:	20003ef0 	.word	0x20003ef0

00016bb0 <bt_mesh_prov_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16bb0:	4b04      	ldr	r3, [pc, #16]	; (16bc4 <bt_mesh_prov_active+0x14>)
   16bb2:	f3bf 8f5b 	dmb	ish
   16bb6:	6818      	ldr	r0, [r3, #0]
   16bb8:	f3bf 8f5b 	dmb	ish
}
   16bbc:	f3c0 0040 	ubfx	r0, r0, #1, #1
   16bc0:	4770      	bx	lr
   16bc2:	bf00      	nop
   16bc4:	20003ef4 	.word	0x20003ef4

00016bc8 <bt_mesh_prov_bearer_cb_get>:
};

const struct prov_bearer_cb *bt_mesh_prov_bearer_cb_get(void)
{
	return &prov_bearer_cb;
}
   16bc8:	4800      	ldr	r0, [pc, #0]	; (16bcc <bt_mesh_prov_bearer_cb_get+0x4>)
   16bca:	4770      	bx	lr
   16bcc:	0002fdfc 	.word	0x0002fdfc

00016bd0 <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(uint16_t net_idx, uint16_t addr)
{
	if (bt_mesh_prov->complete) {
   16bd0:	4b02      	ldr	r3, [pc, #8]	; (16bdc <bt_mesh_prov_complete+0xc>)
   16bd2:	681b      	ldr	r3, [r3, #0]
   16bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16bd6:	b103      	cbz	r3, 16bda <bt_mesh_prov_complete+0xa>
		bt_mesh_prov->complete(net_idx, addr);
   16bd8:	4718      	bx	r3
	}
}
   16bda:	4770      	bx	lr
   16bdc:	20003ef0 	.word	0x20003ef0

00016be0 <bt_mesh_prov_reset>:

void bt_mesh_prov_reset(void)
{
   16be0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_reset();
   16be2:	f015 fa67 	bl	2c0b4 <pb_adv_reset>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_reset();
   16be6:	f015 fa6b 	bl	2c0c0 <pb_gatt_reset>
	}

	bt_mesh_prov_reset_state(NULL);
   16bea:	2000      	movs	r0, #0
   16bec:	f7ff fee2 	bl	169b4 <bt_mesh_prov_reset_state>

	if (bt_mesh_prov->reset) {
   16bf0:	4b03      	ldr	r3, [pc, #12]	; (16c00 <bt_mesh_prov_reset+0x20>)
   16bf2:	681b      	ldr	r3, [r3, #0]
   16bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16bf6:	b113      	cbz	r3, 16bfe <bt_mesh_prov_reset+0x1e>
		bt_mesh_prov->reset();
	}
}
   16bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->reset();
   16bfc:	4718      	bx	r3
}
   16bfe:	bd10      	pop	{r4, pc}
   16c00:	20003ef0 	.word	0x20003ef0

00016c04 <bt_mesh_prov_init>:

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
   16c04:	b508      	push	{r3, lr}
	if (!prov_info) {
   16c06:	b150      	cbz	r0, 16c1e <bt_mesh_prov_init+0x1a>
		BT_ERR("No provisioning context provided");
		return -EINVAL;
	}

	bt_mesh_prov = prov_info;
   16c08:	4b08      	ldr	r3, [pc, #32]	; (16c2c <bt_mesh_prov_init+0x28>)
   16c0a:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_init();
   16c0c:	f001 f990 	bl	17f30 <pb_adv_init>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_init();
   16c10:	f001 fa5a 	bl	180c8 <pb_gatt_init>
	}

	return bt_mesh_prov_reset_state(NULL);
   16c14:	2000      	movs	r0, #0
}
   16c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_mesh_prov_reset_state(NULL);
   16c1a:	f7ff becb 	b.w	169b4 <bt_mesh_prov_reset_state>
		BT_ERR("No provisioning context provided");
   16c1e:	2145      	movs	r1, #69	; 0x45
   16c20:	4803      	ldr	r0, [pc, #12]	; (16c30 <bt_mesh_prov_init+0x2c>)
   16c22:	f010 fe56 	bl	278d2 <printk>
}
   16c26:	f06f 0015 	mvn.w	r0, #21
   16c2a:	bd08      	pop	{r3, pc}
   16c2c:	20003ef0 	.word	0x20003ef0
   16c30:	00034f92 	.word	0x00034f92

00016c34 <bt_mesh_prov_send>:
extern const struct bt_mesh_prov *bt_mesh_prov;

static inline int bt_mesh_prov_send(struct net_buf_simple *buf,
				    prov_bearer_send_complete_t cb)
{
	return bt_mesh_prov_link.bearer->send(buf, cb, NULL);
   16c34:	4b02      	ldr	r3, [pc, #8]	; (16c40 <bt_mesh_prov_send+0xc>)
   16c36:	685b      	ldr	r3, [r3, #4]
   16c38:	2200      	movs	r2, #0
   16c3a:	689b      	ldr	r3, [r3, #8]
   16c3c:	4718      	bx	r3
   16c3e:	bf00      	nop
   16c40:	20003ef4 	.word	0x20003ef4

00016c44 <prov_link_opened>:
	reset_state();
}

static void prov_link_opened(void)
{
	bt_mesh_prov_link.expect = PROV_INVITE;
   16c44:	4b02      	ldr	r3, [pc, #8]	; (16c50 <prov_link_opened+0xc>)
   16c46:	2200      	movs	r2, #0
   16c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   16c4c:	4770      	bx	lr
   16c4e:	bf00      	nop
   16c50:	20003ef4 	.word	0x20003ef4

00016c54 <send_input_complete>:
{
   16c54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	PROV_BUF(buf, 1);
   16c56:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   16c5a:	ab01      	add	r3, sp, #4
	bt_mesh_prov_buf_init(&buf, PROV_INPUT_COMPLETE);
   16c5c:	2104      	movs	r1, #4
   16c5e:	a803      	add	r0, sp, #12
	PROV_BUF(buf, 1);
   16c60:	9303      	str	r3, [sp, #12]
   16c62:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_prov_buf_init(&buf, PROV_INPUT_COMPLETE);
   16c66:	f015 fa14 	bl	2c092 <bt_mesh_prov_buf_init>
	if (bt_mesh_prov_send(&buf, NULL)) {
   16c6a:	2100      	movs	r1, #0
   16c6c:	a803      	add	r0, sp, #12
   16c6e:	f7ff ffe1 	bl	16c34 <bt_mesh_prov_send>
   16c72:	b118      	cbz	r0, 16c7c <send_input_complete+0x28>
		BT_ERR("Failed to send Provisioning Input Complete");
   16c74:	2145      	movs	r1, #69	; 0x45
   16c76:	4805      	ldr	r0, [pc, #20]	; (16c8c <send_input_complete+0x38>)
   16c78:	f010 fe2b 	bl	278d2 <printk>
	bt_mesh_prov_link.expect = PROV_CONFIRM;
   16c7c:	4b04      	ldr	r3, [pc, #16]	; (16c90 <send_input_complete+0x3c>)
   16c7e:	2205      	movs	r2, #5
   16c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   16c84:	b007      	add	sp, #28
   16c86:	f85d fb04 	ldr.w	pc, [sp], #4
   16c8a:	bf00      	nop
   16c8c:	0003548a 	.word	0x0003548a
   16c90:	20003ef4 	.word	0x20003ef4

00016c94 <prov_send_fail_msg>:
{
   16c94:	b510      	push	{r4, lr}
   16c96:	b086      	sub	sp, #24
	PROV_BUF(buf, 2);
   16c98:	ab01      	add	r3, sp, #4
   16c9a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   16c9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   16ca2:	9303      	str	r3, [sp, #12]
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   16ca4:	4b0b      	ldr	r3, [pc, #44]	; (16cd4 <prov_send_fail_msg+0x40>)
   16ca6:	22ff      	movs	r2, #255	; 0xff
{
   16ca8:	4604      	mov	r4, r0
	bt_mesh_prov_buf_init(&buf, PROV_FAILED);
   16caa:	2109      	movs	r1, #9
   16cac:	a803      	add	r0, sp, #12
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   16cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	bt_mesh_prov_buf_init(&buf, PROV_FAILED);
   16cb2:	f015 f9ee 	bl	2c092 <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&buf, err);
   16cb6:	4621      	mov	r1, r4
   16cb8:	a803      	add	r0, sp, #12
   16cba:	f016 fc8b 	bl	2d5d4 <net_buf_simple_add_u8>
	if (bt_mesh_prov_send(&buf, NULL)) {
   16cbe:	2100      	movs	r1, #0
   16cc0:	a803      	add	r0, sp, #12
   16cc2:	f7ff ffb7 	bl	16c34 <bt_mesh_prov_send>
   16cc6:	b118      	cbz	r0, 16cd0 <prov_send_fail_msg+0x3c>
		BT_ERR("Failed to send Provisioning Failed message");
   16cc8:	2145      	movs	r1, #69	; 0x45
   16cca:	4803      	ldr	r0, [pc, #12]	; (16cd8 <prov_send_fail_msg+0x44>)
   16ccc:	f010 fe01 	bl	278d2 <printk>
}
   16cd0:	b006      	add	sp, #24
   16cd2:	bd10      	pop	{r4, pc}
   16cd4:	20003ef4 	.word	0x20003ef4
   16cd8:	000353ce 	.word	0x000353ce

00016cdc <prov_invite>:
{
   16cdc:	b530      	push	{r4, r5, lr}
   16cde:	b089      	sub	sp, #36	; 0x24
	if (data[0]) {
   16ce0:	7801      	ldrb	r1, [r0, #0]
	PROV_BUF(buf, 12);
   16ce2:	ab03      	add	r3, sp, #12
   16ce4:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   16ce8:	4604      	mov	r4, r0
	PROV_BUF(buf, 12);
   16cea:	9300      	str	r3, [sp, #0]
   16cec:	e9cd 2301 	strd	r2, r3, [sp, #4]
	if (data[0]) {
   16cf0:	b111      	cbz	r1, 16cf8 <prov_invite+0x1c>
		bt_mesh_attention(NULL, data[0]);
   16cf2:	2000      	movs	r0, #0
   16cf4:	f7fe f9e2 	bl	150bc <bt_mesh_attention>
	bt_mesh_prov_link.conf_inputs[0] = data[0];
   16cf8:	4d27      	ldr	r5, [pc, #156]	; (16d98 <prov_invite+0xbc>)
   16cfa:	7823      	ldrb	r3, [r4, #0]
   16cfc:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
	bt_mesh_prov_buf_init(&buf, PROV_CAPABILITIES);
   16d00:	2101      	movs	r1, #1
   16d02:	4668      	mov	r0, sp
   16d04:	f015 f9c5 	bl	2c092 <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&buf, bt_mesh_elem_count());
   16d08:	f7fc f870 	bl	12dec <bt_mesh_elem_count>
   16d0c:	4601      	mov	r1, r0
   16d0e:	4668      	mov	r0, sp
   16d10:	f016 fc60 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->static_val ? BIT(0) : 0x00);
   16d14:	4c21      	ldr	r4, [pc, #132]	; (16d9c <prov_invite+0xc0>)
	net_buf_simple_add_be16(&buf, BIT(PROV_ALG_P256));
   16d16:	2101      	movs	r1, #1
   16d18:	4668      	mov	r0, sp
   16d1a:	f016 fc6b 	bl	2d5f4 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, PUB_KEY_NO_OOB);
   16d1e:	2100      	movs	r1, #0
   16d20:	4668      	mov	r0, sp
   16d22:	f016 fc57 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->static_val ? BIT(0) : 0x00);
   16d26:	6823      	ldr	r3, [r4, #0]
   16d28:	68d9      	ldr	r1, [r3, #12]
   16d2a:	3100      	adds	r1, #0
   16d2c:	bf18      	it	ne
   16d2e:	2101      	movne	r1, #1
   16d30:	4668      	mov	r0, sp
   16d32:	f016 fc4f 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->output_size);
   16d36:	6823      	ldr	r3, [r4, #0]
   16d38:	4668      	mov	r0, sp
   16d3a:	7c59      	ldrb	r1, [r3, #17]
   16d3c:	f016 fc4a 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, bt_mesh_prov->output_actions);
   16d40:	6823      	ldr	r3, [r4, #0]
   16d42:	4668      	mov	r0, sp
   16d44:	8a59      	ldrh	r1, [r3, #18]
   16d46:	f016 fc55 	bl	2d5f4 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->input_size);
   16d4a:	6823      	ldr	r3, [r4, #0]
   16d4c:	4668      	mov	r0, sp
   16d4e:	7d19      	ldrb	r1, [r3, #20]
   16d50:	f016 fc40 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, bt_mesh_prov->input_actions);
   16d54:	6823      	ldr	r3, [r4, #0]
   16d56:	4668      	mov	r0, sp
   16d58:	8ad9      	ldrh	r1, [r3, #22]
   16d5a:	f016 fc4b 	bl	2d5f4 <net_buf_simple_add_be16>
	memcpy(&bt_mesh_prov_link.conf_inputs[1], &buf.data[1], 11);
   16d5e:	9b00      	ldr	r3, [sp, #0]
   16d60:	f853 1f01 	ldr.w	r1, [r3, #1]!
   16d64:	f8c5 1081 	str.w	r1, [r5, #129]	; 0x81
   16d68:	6859      	ldr	r1, [r3, #4]
   16d6a:	f8c5 1085 	str.w	r1, [r5, #133]	; 0x85
   16d6e:	8919      	ldrh	r1, [r3, #8]
   16d70:	f8a5 1089 	strh.w	r1, [r5, #137]	; 0x89
   16d74:	7a9b      	ldrb	r3, [r3, #10]
   16d76:	f885 308b 	strb.w	r3, [r5, #139]	; 0x8b
	if (bt_mesh_prov_send(&buf, NULL)) {
   16d7a:	2100      	movs	r1, #0
   16d7c:	4668      	mov	r0, sp
   16d7e:	f7ff ff59 	bl	16c34 <bt_mesh_prov_send>
   16d82:	b128      	cbz	r0, 16d90 <prov_invite+0xb4>
		BT_ERR("Failed to send capabilities");
   16d84:	2145      	movs	r1, #69	; 0x45
   16d86:	4806      	ldr	r0, [pc, #24]	; (16da0 <prov_invite+0xc4>)
   16d88:	f010 fda3 	bl	278d2 <printk>
}
   16d8c:	b009      	add	sp, #36	; 0x24
   16d8e:	bd30      	pop	{r4, r5, pc}
	bt_mesh_prov_link.expect = PROV_START;
   16d90:	2302      	movs	r3, #2
   16d92:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
   16d96:	e7f9      	b.n	16d8c <prov_invite+0xb0>
   16d98:	20003ef4 	.word	0x20003ef4
   16d9c:	20003ef0 	.word	0x20003ef0
   16da0:	000352b3 	.word	0x000352b3

00016da4 <prov_link_closed>:
	return bt_mesh_prov_reset_state(pub_key_ready);
   16da4:	4801      	ldr	r0, [pc, #4]	; (16dac <prov_link_closed+0x8>)
   16da6:	f7ff be05 	b.w	169b4 <bt_mesh_prov_reset_state>
   16daa:	bf00      	nop
   16dac:	0001709d 	.word	0x0001709d

00016db0 <prov_random>:
{
   16db0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   16db2:	4c31      	ldr	r4, [pc, #196]	; (16e78 <prov_random+0xc8>)
{
   16db4:	b08f      	sub	sp, #60	; 0x3c
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   16db6:	2210      	movs	r2, #16
   16db8:	4621      	mov	r1, r4
{
   16dba:	4606      	mov	r6, r0
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   16dbc:	f017 fa67 	bl	2e28e <memcmp>
   16dc0:	b940      	cbnz	r0, 16dd4 <prov_random+0x24>
		BT_ERR("Random value is identical to ours, rejecting.");
   16dc2:	482e      	ldr	r0, [pc, #184]	; (16e7c <prov_random+0xcc>)
   16dc4:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid confirmation value");
   16dc6:	f010 fd84 	bl	278d2 <printk>
	prov_send_fail_msg(reason);
   16dca:	2004      	movs	r0, #4
   16dcc:	f7ff ff62 	bl	16c94 <prov_send_fail_msg>
}
   16dd0:	b00f      	add	sp, #60	; 0x3c
   16dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, data,
   16dd4:	466b      	mov	r3, sp
   16dd6:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   16dda:	4631      	mov	r1, r6
   16ddc:	f104 0020 	add.w	r0, r4, #32
   16de0:	f014 fd2f 	bl	2b842 <bt_mesh_prov_conf>
   16de4:	b128      	cbz	r0, 16df2 <prov_random+0x42>
		BT_ERR("Unable to calculate confirmation verification");
   16de6:	4826      	ldr	r0, [pc, #152]	; (16e80 <prov_random+0xd0>)
   16de8:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to generate provisioning salt");
   16dea:	f010 fd72 	bl	278d2 <printk>
	prov_send_fail_msg(reason);
   16dee:	2007      	movs	r0, #7
   16df0:	e7ec      	b.n	16dcc <prov_random+0x1c>
	if (memcmp(conf_verify, bt_mesh_prov_link.conf, 16)) {
   16df2:	f1a4 0110 	sub.w	r1, r4, #16
   16df6:	2210      	movs	r2, #16
   16df8:	4668      	mov	r0, sp
   16dfa:	f017 fa48 	bl	2e28e <memcmp>
   16dfe:	4601      	mov	r1, r0
   16e00:	b110      	cbz	r0, 16e08 <prov_random+0x58>
		BT_ERR("Invalid confirmation value");
   16e02:	2145      	movs	r1, #69	; 0x45
   16e04:	481f      	ldr	r0, [pc, #124]	; (16e84 <prov_random+0xd4>)
   16e06:	e7de      	b.n	16dc6 <prov_random+0x16>
static inline int bt_mesh_prov_salt(const uint8_t conf_salt[16],
				    const uint8_t prov_rand[16],
				    const uint8_t dev_rand[16],
				    uint8_t prov_salt[16])
{
	const uint8_t prov_salt_key[16] = { 0 };
   16e08:	2510      	movs	r5, #16
   16e0a:	462a      	mov	r2, r5
   16e0c:	eb0d 0005 	add.w	r0, sp, r5
   16e10:	f017 fa86 	bl	2e320 <memset>
	struct bt_mesh_sg sg[] = {
   16e14:	1963      	adds	r3, r4, r5
   16e16:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
		{ conf_salt, 16 },
		{ prov_rand, 16 },
		{ dev_rand, 16 },
	};

	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   16e1a:	ae08      	add	r6, sp, #32
	struct bt_mesh_sg sg[] = {
   16e1c:	e9cd 3508 	strd	r3, r5, [sp, #32]
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   16e20:	2203      	movs	r2, #3
   16e22:	f104 03c1 	add.w	r3, r4, #193	; 0xc1
   16e26:	4631      	mov	r1, r6
   16e28:	eb0d 0005 	add.w	r0, sp, r5
	struct bt_mesh_sg sg[] = {
   16e2c:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   16e30:	f014 fb7b 	bl	2b52a <bt_mesh_aes_cmac>
	if (bt_mesh_prov_salt(bt_mesh_prov_link.conf_salt, data,
   16e34:	4607      	mov	r7, r0
   16e36:	b110      	cbz	r0, 16e3e <prov_random+0x8e>
		BT_ERR("Failed to generate provisioning salt");
   16e38:	2145      	movs	r1, #69	; 0x45
   16e3a:	4813      	ldr	r0, [pc, #76]	; (16e88 <prov_random+0xd8>)
   16e3c:	e7d5      	b.n	16dea <prov_random+0x3a>
	PROV_BUF(rnd, 17);
   16e3e:	f44f 13b0 	mov.w	r3, #1441792	; 0x160000
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   16e42:	2106      	movs	r1, #6
   16e44:	a804      	add	r0, sp, #16
	PROV_BUF(rnd, 17);
   16e46:	e9cd 3605 	strd	r3, r6, [sp, #20]
   16e4a:	9604      	str	r6, [sp, #16]
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   16e4c:	f015 f921 	bl	2c092 <bt_mesh_prov_buf_init>
	net_buf_simple_add_mem(&rnd, bt_mesh_prov_link.rand, 16);
   16e50:	4621      	mov	r1, r4
   16e52:	462a      	mov	r2, r5
   16e54:	a804      	add	r0, sp, #16
   16e56:	f016 fbb1 	bl	2d5bc <net_buf_simple_add_mem>
	if (bt_mesh_prov_send(&rnd, NULL)) {
   16e5a:	4639      	mov	r1, r7
   16e5c:	a804      	add	r0, sp, #16
   16e5e:	f7ff fee9 	bl	16c34 <bt_mesh_prov_send>
   16e62:	b120      	cbz	r0, 16e6e <prov_random+0xbe>
		BT_ERR("Failed to send Provisioning Random");
   16e64:	2145      	movs	r1, #69	; 0x45
   16e66:	4809      	ldr	r0, [pc, #36]	; (16e8c <prov_random+0xdc>)
   16e68:	f010 fd33 	bl	278d2 <printk>
		return;
   16e6c:	e7b0      	b.n	16dd0 <prov_random+0x20>
	bt_mesh_prov_link.expect = PROV_DATA;
   16e6e:	2307      	movs	r3, #7
   16e70:	f804 3c11 	strb.w	r3, [r4, #-17]
   16e74:	e7ac      	b.n	16dd0 <prov_random+0x20>
   16e76:	bf00      	nop
   16e78:	20003f44 	.word	0x20003f44
   16e7c:	000352f6 	.word	0x000352f6
   16e80:	00035329 	.word	0x00035329
   16e84:	0003535c 	.word	0x0003535c
   16e88:	0003537c 	.word	0x0003537c
   16e8c:	000353a6 	.word	0x000353a6

00016e90 <prov_data>:
{
   16e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e94:	b09f      	sub	sp, #124	; 0x7c
	PROV_BUF(msg, 1);
   16e96:	ab06      	add	r3, sp, #24
   16e98:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   16e9c:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
   16ea0:	4a4f      	ldr	r2, [pc, #316]	; (16fe0 <prov_data+0x150>)
   16ea2:	9308      	str	r3, [sp, #32]
   16ea4:	ae0f      	add	r6, sp, #60	; 0x3c
{
   16ea6:	4680      	mov	r8, r0
   16ea8:	9600      	str	r6, [sp, #0]
   16eaa:	4b4e      	ldr	r3, [pc, #312]	; (16fe4 <prov_data+0x154>)
   16eac:	2120      	movs	r1, #32
   16eae:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   16eb2:	f014 fb7d 	bl	2b5b0 <bt_mesh_k1>
	if (err) {
   16eb6:	b128      	cbz	r0, 16ec4 <prov_data+0x34>
		BT_ERR("Unable to generate session key");
   16eb8:	484b      	ldr	r0, [pc, #300]	; (16fe8 <prov_data+0x158>)
   16eba:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to generate session nonce");
   16ebc:	f010 fd09 	bl	278d2 <printk>
	prov_send_fail_msg(reason);
   16ec0:	2007      	movs	r0, #7
   16ec2:	e028      	b.n	16f16 <prov_data+0x86>
	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
   16ec4:	4a46      	ldr	r2, [pc, #280]	; (16fe0 <prov_data+0x150>)
   16ec6:	4b49      	ldr	r3, [pc, #292]	; (16fec <prov_data+0x15c>)
   16ec8:	ad17      	add	r5, sp, #92	; 0x5c
   16eca:	9500      	str	r5, [sp, #0]
   16ecc:	2120      	movs	r1, #32
   16ece:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   16ed2:	f014 fb6d 	bl	2b5b0 <bt_mesh_k1>
	if (!err) {
   16ed6:	2800      	cmp	r0, #0
   16ed8:	d17e      	bne.n	16fd8 <prov_data+0x148>
		memcpy(nonce, tmp + 3, 13);
   16eda:	aa0b      	add	r2, sp, #44	; 0x2c
   16edc:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   16ee0:	f10d 0c67 	add.w	ip, sp, #103	; 0x67
   16ee4:	4617      	mov	r7, r2
   16ee6:	6818      	ldr	r0, [r3, #0]
   16ee8:	6859      	ldr	r1, [r3, #4]
   16eea:	4614      	mov	r4, r2
   16eec:	c403      	stmia	r4!, {r0, r1}
   16eee:	3308      	adds	r3, #8
   16ef0:	4563      	cmp	r3, ip
   16ef2:	4622      	mov	r2, r4
   16ef4:	d1f7      	bne.n	16ee6 <prov_data+0x56>
   16ef6:	6818      	ldr	r0, [r3, #0]
   16ef8:	6020      	str	r0, [r4, #0]
   16efa:	791b      	ldrb	r3, [r3, #4]
   16efc:	7123      	strb	r3, [r4, #4]
	err = bt_mesh_prov_decrypt(session_key, nonce, data, pdu);
   16efe:	4642      	mov	r2, r8
   16f00:	462b      	mov	r3, r5
   16f02:	4639      	mov	r1, r7
   16f04:	4630      	mov	r0, r6
   16f06:	f014 fca9 	bl	2b85c <bt_mesh_prov_decrypt>
	if (err) {
   16f0a:	b138      	cbz	r0, 16f1c <prov_data+0x8c>
		BT_ERR("Unable to decrypt provisioning data");
   16f0c:	4838      	ldr	r0, [pc, #224]	; (16ff0 <prov_data+0x160>)
   16f0e:	2145      	movs	r1, #69	; 0x45
   16f10:	f010 fcdf 	bl	278d2 <printk>
	prov_send_fail_msg(reason);
   16f14:	2006      	movs	r0, #6
   16f16:	f7ff febd 	bl	16c94 <prov_send_fail_msg>
		return;
   16f1a:	e033      	b.n	16f84 <prov_data+0xf4>
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
   16f1c:	4a30      	ldr	r2, [pc, #192]	; (16fe0 <prov_data+0x150>)
   16f1e:	4b35      	ldr	r3, [pc, #212]	; (16ff4 <prov_data+0x164>)
   16f20:	af13      	add	r7, sp, #76	; 0x4c
   16f22:	9700      	str	r7, [sp, #0]
   16f24:	2120      	movs	r1, #32
   16f26:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   16f2a:	f014 fb41 	bl	2b5b0 <bt_mesh_k1>
	if (err) {
   16f2e:	4604      	mov	r4, r0
   16f30:	b110      	cbz	r0, 16f38 <prov_data+0xa8>
		BT_ERR("Unable to generate device key");
   16f32:	2145      	movs	r1, #69	; 0x45
   16f34:	4830      	ldr	r0, [pc, #192]	; (16ff8 <prov_data+0x168>)
   16f36:	e7c1      	b.n	16ebc <prov_data+0x2c>
	flags = pdu[18];
   16f38:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
   16f3c:	9302      	str	r3, [sp, #8]
	return ((uint16_t)src[0] << 8) | src[1];
   16f3e:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
   16f42:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
   16f46:	9305      	str	r3, [sp, #20]
	bt_mesh_prov_buf_init(&msg, PROV_COMPLETE);
   16f48:	2108      	movs	r1, #8
   16f4a:	f89d 3071 	ldrb.w	r3, [sp, #113]	; 0x71
   16f4e:	9303      	str	r3, [sp, #12]
   16f50:	a808      	add	r0, sp, #32
   16f52:	9204      	str	r2, [sp, #16]
   16f54:	f89d a06c 	ldrb.w	sl, [sp, #108]	; 0x6c
   16f58:	f89d 906d 	ldrb.w	r9, [sp, #109]	; 0x6d
   16f5c:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
   16f60:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
   16f64:	f89d b073 	ldrb.w	fp, [sp, #115]	; 0x73
   16f68:	f015 f893 	bl	2c092 <bt_mesh_prov_buf_init>
	if (bt_mesh_prov_send(&msg, NULL)) {
   16f6c:	4621      	mov	r1, r4
   16f6e:	a808      	add	r0, sp, #32
   16f70:	f7ff fe60 	bl	16c34 <bt_mesh_prov_send>
   16f74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16f78:	4604      	mov	r4, r0
   16f7a:	b130      	cbz	r0, 16f8a <prov_data+0xfa>
		BT_ERR("Failed to send Provisioning Complete");
   16f7c:	2145      	movs	r1, #69	; 0x45
   16f7e:	481f      	ldr	r0, [pc, #124]	; (16ffc <prov_data+0x16c>)
   16f80:	f010 fca7 	bl	278d2 <printk>
}
   16f84:	b01f      	add	sp, #124	; 0x7c
   16f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   16f8a:	491d      	ldr	r1, [pc, #116]	; (17000 <prov_data+0x170>)
   16f8c:	20ff      	movs	r0, #255	; 0xff
   16f8e:	f881 003f 	strb.w	r0, [r1, #63]	; 0x3f
	return bt_mesh_prov_link.bearer &&
   16f92:	6849      	ldr	r1, [r1, #4]
   16f94:	b119      	cbz	r1, 16f9e <prov_data+0x10e>
   16f96:	780c      	ldrb	r4, [r1, #0]
   16f98:	1ea1      	subs	r1, r4, #2
   16f9a:	424c      	negs	r4, r1
   16f9c:	414c      	adcs	r4, r1
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   16f9e:	9903      	ldr	r1, [sp, #12]
	err = bt_mesh_provision(pdu, net_idx, flags, iv_index, addr, dev_key);
   16fa0:	9701      	str	r7, [sp, #4]
   16fa2:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
   16fa6:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
   16faa:	ea48 2303 	orr.w	r3, r8, r3, lsl #8
   16fae:	9200      	str	r2, [sp, #0]
   16fb0:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
   16fb4:	9a02      	ldr	r2, [sp, #8]
   16fb6:	ea49 210a 	orr.w	r1, r9, sl, lsl #8
   16fba:	4628      	mov	r0, r5
   16fbc:	f7f7 faca 	bl	e554 <bt_mesh_provision>
	if (err) {
   16fc0:	4602      	mov	r2, r0
   16fc2:	b120      	cbz	r0, 16fce <prov_data+0x13e>
		BT_ERR("Failed to provision (err %d)", err);
   16fc4:	2145      	movs	r1, #69	; 0x45
   16fc6:	480f      	ldr	r0, [pc, #60]	; (17004 <prov_data+0x174>)
   16fc8:	f010 fc83 	bl	278d2 <printk>
		return;
   16fcc:	e7da      	b.n	16f84 <prov_data+0xf4>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) && identity_enable) {
   16fce:	2c00      	cmp	r4, #0
   16fd0:	d0d8      	beq.n	16f84 <prov_data+0xf4>
		bt_mesh_proxy_identity_enable();
   16fd2:	f001 fbbd 	bl	18750 <bt_mesh_proxy_identity_enable>
   16fd6:	e7d5      	b.n	16f84 <prov_data+0xf4>
		BT_ERR("Unable to generate session nonce");
   16fd8:	2145      	movs	r1, #69	; 0x45
   16fda:	480b      	ldr	r0, [pc, #44]	; (17008 <prov_data+0x178>)
   16fdc:	e76e      	b.n	16ebc <prov_data+0x2c>
   16fde:	bf00      	nop
   16fe0:	20004005 	.word	0x20004005
   16fe4:	0003514b 	.word	0x0003514b
   16fe8:	00035150 	.word	0x00035150
   16fec:	00035174 	.word	0x00035174
   16ff0:	00035179 	.word	0x00035179
   16ff4:	000351a2 	.word	0x000351a2
   16ff8:	000351a7 	.word	0x000351a7
   16ffc:	000351ca 	.word	0x000351ca
   17000:	20003ef4 	.word	0x20003ef4
   17004:	000351f4 	.word	0x000351f4
   17008:	00035216 	.word	0x00035216

0001700c <sys_memcpy_swap.constprop.10>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1700c:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1700e:	b570      	push	{r4, r5, r6, lr}
   17010:	4604      	mov	r4, r0
   17012:	460e      	mov	r6, r1
   17014:	f101 0520 	add.w	r5, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   17018:	d915      	bls.n	17046 <sys_memcpy_swap.constprop.10+0x3a>
   1701a:	42a8      	cmp	r0, r5
   1701c:	d20a      	bcs.n	17034 <sys_memcpy_swap.constprop.10+0x28>
   1701e:	490c      	ldr	r1, [pc, #48]	; (17050 <sys_memcpy_swap.constprop.10+0x44>)
   17020:	480c      	ldr	r0, [pc, #48]	; (17054 <sys_memcpy_swap.constprop.10+0x48>)
   17022:	f240 2219 	movw	r2, #537	; 0x219
   17026:	f010 fc54 	bl	278d2 <printk>
   1702a:	f240 2119 	movw	r1, #537	; 0x219
   1702e:	4808      	ldr	r0, [pc, #32]	; (17050 <sys_memcpy_swap.constprop.10+0x44>)
   17030:	f010 fec8 	bl	27dc4 <assert_post_action>
	for (; length > 0; length--) {
   17034:	462b      	mov	r3, r5
   17036:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   17038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1703c:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   17040:	42b3      	cmp	r3, r6
   17042:	d1f9      	bne.n	17038 <sys_memcpy_swap.constprop.10+0x2c>
}
   17044:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   17046:	d0ea      	beq.n	1701e <sys_memcpy_swap.constprop.10+0x12>
   17048:	f100 0320 	add.w	r3, r0, #32
   1704c:	4299      	cmp	r1, r3
   1704e:	e7e5      	b.n	1701c <sys_memcpy_swap.constprop.10+0x10>
   17050:	000315b2 	.word	0x000315b2
   17054:	0003067f 	.word	0x0003067f

00017058 <prov_dh_key_gen>:
{
   17058:	b500      	push	{lr}
   1705a:	b091      	sub	sp, #68	; 0x44
	sys_memcpy_swap(remote_pk_le, remote_pk, 32);
   1705c:	490b      	ldr	r1, [pc, #44]	; (1708c <prov_dh_key_gen+0x34>)
   1705e:	4668      	mov	r0, sp
   17060:	f7ff ffd4 	bl	1700c <sys_memcpy_swap.constprop.10>
	sys_memcpy_swap(&remote_pk_le[32], &remote_pk[32], 32);
   17064:	490a      	ldr	r1, [pc, #40]	; (17090 <prov_dh_key_gen+0x38>)
   17066:	a808      	add	r0, sp, #32
   17068:	f7ff ffd0 	bl	1700c <sys_memcpy_swap.constprop.10>
	if (bt_dh_key_gen(remote_pk_le, prov_dh_key_cb)) {
   1706c:	4909      	ldr	r1, [pc, #36]	; (17094 <prov_dh_key_gen+0x3c>)
   1706e:	4668      	mov	r0, sp
   17070:	f7f3 fe4e 	bl	ad10 <bt_dh_key_gen>
   17074:	b130      	cbz	r0, 17084 <prov_dh_key_gen+0x2c>
		BT_ERR("Failed to generate DHKey");
   17076:	4808      	ldr	r0, [pc, #32]	; (17098 <prov_dh_key_gen+0x40>)
   17078:	2145      	movs	r1, #69	; 0x45
   1707a:	f010 fc2a 	bl	278d2 <printk>
	prov_send_fail_msg(reason);
   1707e:	2007      	movs	r0, #7
   17080:	f7ff fe08 	bl	16c94 <prov_send_fail_msg>
}
   17084:	b011      	add	sp, #68	; 0x44
   17086:	f85d fb04 	ldr.w	pc, [sp], #4
   1708a:	bf00      	nop
   1708c:	20003f85 	.word	0x20003f85
   17090:	20003fa5 	.word	0x20003fa5
   17094:	0001719d 	.word	0x0001719d
   17098:	00035295 	.word	0x00035295

0001709c <pub_key_ready>:
	if (!pkey) {
   1709c:	b918      	cbnz	r0, 170a6 <pub_key_ready+0xa>
		BT_WARN("Public key not available");
   1709e:	2157      	movs	r1, #87	; 0x57
   170a0:	480a      	ldr	r0, [pc, #40]	; (170cc <pub_key_ready+0x30>)
   170a2:	f010 bc16 	b.w	278d2 <printk>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   170a6:	4b0a      	ldr	r3, [pc, #40]	; (170d0 <pub_key_ready+0x34>)
   170a8:	f3bf 8f5b 	dmb	ish
   170ac:	e853 2f00 	ldrex	r2, [r3]
   170b0:	f022 0101 	bic.w	r1, r2, #1
   170b4:	e843 1000 	strex	r0, r1, [r3]
   170b8:	2800      	cmp	r0, #0
   170ba:	d1f7      	bne.n	170ac <pub_key_ready+0x10>
   170bc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_PUB_KEY)) {
   170c0:	07d3      	lsls	r3, r2, #31
   170c2:	d501      	bpl.n	170c8 <pub_key_ready+0x2c>
		prov_dh_key_gen();
   170c4:	f7ff bfc8 	b.w	17058 <prov_dh_key_gen>
}
   170c8:	4770      	bx	lr
   170ca:	bf00      	nop
   170cc:	00035060 	.word	0x00035060
   170d0:	20003ef4 	.word	0x20003ef4

000170d4 <atomic_test_bit.constprop.12>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   170d4:	4b05      	ldr	r3, [pc, #20]	; (170ec <atomic_test_bit.constprop.12+0x18>)
   170d6:	f3bf 8f5b 	dmb	ish
   170da:	681b      	ldr	r3, [r3, #0]
   170dc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   170e0:	fa43 f000 	asr.w	r0, r3, r0
}
   170e4:	f000 0001 	and.w	r0, r0, #1
   170e8:	4770      	bx	lr
   170ea:	bf00      	nop
   170ec:	20003ef4 	.word	0x20003ef4

000170f0 <prov_start>:
{
   170f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (data[0] != PROV_ALG_P256) {
   170f2:	7802      	ldrb	r2, [r0, #0]
{
   170f4:	4604      	mov	r4, r0
	if (data[0] != PROV_ALG_P256) {
   170f6:	b14a      	cbz	r2, 1710c <prov_start+0x1c>
		BT_ERR("Unknown algorithm 0x%02x", data[0]);
   170f8:	4822      	ldr	r0, [pc, #136]	; (17184 <prov_start+0x94>)
   170fa:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid public key type: 0x%02x", data[1]);
   170fc:	f010 fbe9 	bl	278d2 <printk>
	prov_send_fail_msg(reason);
   17100:	2002      	movs	r0, #2
}
   17102:	b003      	add	sp, #12
   17104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	prov_send_fail_msg(reason);
   17108:	f7ff bdc4 	b.w	16c94 <prov_send_fail_msg>
	if (data[1] != PUB_KEY_NO_OOB) {
   1710c:	7842      	ldrb	r2, [r0, #1]
   1710e:	b112      	cbz	r2, 17116 <prov_start+0x26>
		BT_ERR("Invalid public key type: 0x%02x", data[1]);
   17110:	2145      	movs	r1, #69	; 0x45
   17112:	481d      	ldr	r0, [pc, #116]	; (17188 <prov_start+0x98>)
   17114:	e7f2      	b.n	170fc <prov_start+0xc>
	memcpy(&bt_mesh_prov_link.conf_inputs[12], data, 5);
   17116:	4b1d      	ldr	r3, [pc, #116]	; (1718c <prov_start+0x9c>)
   17118:	6800      	ldr	r0, [r0, #0]
   1711a:	6018      	str	r0, [r3, #0]
   1711c:	7922      	ldrb	r2, [r4, #4]
   1711e:	711a      	strb	r2, [r3, #4]
	bt_mesh_prov_link.expect = PROV_PUB_KEY;
   17120:	2203      	movs	r2, #3
   17122:	f803 2c4d 	strb.w	r2, [r3, #-77]
	if (bt_mesh_prov_auth(data[2], data[3], data[4]) < 0) {
   17126:	7922      	ldrb	r2, [r4, #4]
   17128:	78e1      	ldrb	r1, [r4, #3]
   1712a:	78a0      	ldrb	r0, [r4, #2]
   1712c:	f7ff fc78 	bl	16a20 <bt_mesh_prov_auth>
   17130:	2800      	cmp	r0, #0
   17132:	da0a      	bge.n	1714a <prov_start+0x5a>
		BT_ERR("Invalid authentication method: 0x%02x; "
   17134:	7923      	ldrb	r3, [r4, #4]
   17136:	9300      	str	r3, [sp, #0]
   17138:	4815      	ldr	r0, [pc, #84]	; (17190 <prov_start+0xa0>)
   1713a:	78e3      	ldrb	r3, [r4, #3]
   1713c:	78a2      	ldrb	r2, [r4, #2]
   1713e:	2145      	movs	r1, #69	; 0x45
   17140:	f010 fbc7 	bl	278d2 <printk>
	prov_send_fail_msg(reason);
   17144:	2002      	movs	r0, #2
   17146:	f7ff fda5 	bl	16c94 <prov_send_fail_msg>
	if (atomic_test_bit(bt_mesh_prov_link.flags, OOB_STATIC_KEY)) {
   1714a:	200c      	movs	r0, #12
   1714c:	f7ff ffc2 	bl	170d4 <atomic_test_bit.constprop.12>
   17150:	b1a8      	cbz	r0, 1717e <prov_start+0x8e>
		memcpy(bt_mesh_prov_link.auth + 16 - bt_mesh_prov->static_val_len,
   17152:	4b10      	ldr	r3, [pc, #64]	; (17194 <prov_start+0xa4>)
   17154:	4d10      	ldr	r5, [pc, #64]	; (17198 <prov_start+0xa8>)
   17156:	681c      	ldr	r4, [r3, #0]
   17158:	7c22      	ldrb	r2, [r4, #16]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1715a:	68e1      	ldr	r1, [r4, #12]
   1715c:	f1c2 0010 	rsb	r0, r2, #16
   17160:	4428      	add	r0, r5
   17162:	f017 f8a2 	bl	2e2aa <memcpy>
		(void)memset(bt_mesh_prov_link.auth, 0,
   17166:	7c22      	ldrb	r2, [r4, #16]
   17168:	f240 1315 	movw	r3, #277	; 0x115
   1716c:	f1c2 0210 	rsb	r2, r2, #16
   17170:	2100      	movs	r1, #0
   17172:	4628      	mov	r0, r5
}
   17174:	b003      	add	sp, #12
   17176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		(void)memset(bt_mesh_prov_link.auth, 0,
   1717a:	f017 b8d9 	b.w	2e330 <__memset_chk>
}
   1717e:	b003      	add	sp, #12
   17180:	bd30      	pop	{r4, r5, pc}
   17182:	bf00      	nop
   17184:	000353fe 	.word	0x000353fe
   17188:	0003541c 	.word	0x0003541c
   1718c:	20003f80 	.word	0x20003f80
   17190:	00035441 	.word	0x00035441
   17194:	20003ef0 	.word	0x20003ef0
   17198:	20003f03 	.word	0x20003f03

0001719c <prov_dh_key_cb>:
{
   1719c:	b510      	push	{r4, lr}
	if (!dhkey) {
   1719e:	4601      	mov	r1, r0
{
   171a0:	b096      	sub	sp, #88	; 0x58
	if (!dhkey) {
   171a2:	b940      	cbnz	r0, 171b6 <prov_dh_key_cb+0x1a>
		BT_ERR("DHKey generation failed");
   171a4:	4827      	ldr	r0, [pc, #156]	; (17244 <prov_dh_key_cb+0xa8>)
   171a6:	2145      	movs	r1, #69	; 0x45
		BT_ERR("No public key available");
   171a8:	f010 fb93 	bl	278d2 <printk>
	prov_send_fail_msg(reason);
   171ac:	2007      	movs	r0, #7
   171ae:	f7ff fd71 	bl	16c94 <prov_send_fail_msg>
}
   171b2:	b016      	add	sp, #88	; 0x58
   171b4:	bd10      	pop	{r4, pc}
	sys_memcpy_swap(bt_mesh_prov_link.dhkey, dhkey, 32);
   171b6:	4824      	ldr	r0, [pc, #144]	; (17248 <prov_dh_key_cb+0xac>)
   171b8:	f7ff ff28 	bl	1700c <sys_memcpy_swap.constprop.10>
	PROV_BUF(buf, 65);
   171bc:	ab04      	add	r3, sp, #16
   171be:	f44f 028c 	mov.w	r2, #4587520	; 0x460000
   171c2:	9301      	str	r3, [sp, #4]
   171c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	key = bt_pub_key_get();
   171c8:	f7f3 fd94 	bl	acf4 <bt_pub_key_get>
	if (!key) {
   171cc:	4604      	mov	r4, r0
   171ce:	b910      	cbnz	r0, 171d6 <prov_dh_key_cb+0x3a>
		BT_ERR("No public key available");
   171d0:	2145      	movs	r1, #69	; 0x45
   171d2:	481e      	ldr	r0, [pc, #120]	; (1724c <prov_dh_key_cb+0xb0>)
   171d4:	e7e8      	b.n	171a8 <prov_dh_key_cb+0xc>
	bt_mesh_prov_buf_init(&buf, PROV_PUB_KEY);
   171d6:	2103      	movs	r1, #3
   171d8:	a801      	add	r0, sp, #4
   171da:	f014 ff5a 	bl	2c092 <bt_mesh_prov_buf_init>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), key, 32);
   171de:	2120      	movs	r1, #32
   171e0:	a801      	add	r0, sp, #4
   171e2:	f008 fedd 	bl	1ffa0 <net_buf_simple_add>
   171e6:	4621      	mov	r1, r4
   171e8:	f7ff ff10 	bl	1700c <sys_memcpy_swap.constprop.10>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), &key[32], 32);
   171ec:	2120      	movs	r1, #32
   171ee:	a801      	add	r0, sp, #4
   171f0:	f008 fed6 	bl	1ffa0 <net_buf_simple_add>
   171f4:	f104 0120 	add.w	r1, r4, #32
   171f8:	f7ff ff08 	bl	1700c <sys_memcpy_swap.constprop.10>
	memcpy(&bt_mesh_prov_link.conf_inputs[81], &buf.data[1], 64);
   171fc:	9b01      	ldr	r3, [sp, #4]
   171fe:	4914      	ldr	r1, [pc, #80]	; (17250 <prov_dh_key_cb+0xb4>)
   17200:	1c5a      	adds	r2, r3, #1
   17202:	3341      	adds	r3, #65	; 0x41
   17204:	f852 0b04 	ldr.w	r0, [r2], #4
   17208:	f841 0b04 	str.w	r0, [r1], #4
   1720c:	429a      	cmp	r2, r3
   1720e:	d1f9      	bne.n	17204 <prov_dh_key_cb+0x68>
	if (bt_mesh_prov_send(&buf, public_key_sent)) {
   17210:	4910      	ldr	r1, [pc, #64]	; (17254 <prov_dh_key_cb+0xb8>)
   17212:	a801      	add	r0, sp, #4
   17214:	f7ff fd0e 	bl	16c34 <bt_mesh_prov_send>
   17218:	b120      	cbz	r0, 17224 <prov_dh_key_cb+0x88>
		BT_ERR("Failed to send Public Key");
   1721a:	2145      	movs	r1, #69	; 0x45
   1721c:	480e      	ldr	r0, [pc, #56]	; (17258 <prov_dh_key_cb+0xbc>)
   1721e:	f010 fb58 	bl	278d2 <printk>
		return;
   17222:	e7c6      	b.n	171b2 <prov_dh_key_cb+0x16>
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_NUMBER) ||
   17224:	2002      	movs	r0, #2
   17226:	f7ff ff55 	bl	170d4 <atomic_test_bit.constprop.12>
   1722a:	b918      	cbnz	r0, 17234 <prov_dh_key_cb+0x98>
	    atomic_test_bit(bt_mesh_prov_link.flags, WAIT_STRING)) {
   1722c:	2003      	movs	r0, #3
   1722e:	f7ff ff51 	bl	170d4 <atomic_test_bit.constprop.12>
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_NUMBER) ||
   17232:	b120      	cbz	r0, 1723e <prov_dh_key_cb+0xa2>
		bt_mesh_prov_link.expect = PROV_NO_PDU; /* Wait for input */
   17234:	23ff      	movs	r3, #255	; 0xff
   17236:	4a09      	ldr	r2, [pc, #36]	; (1725c <prov_dh_key_cb+0xc0>)
   17238:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
   1723c:	e7b9      	b.n	171b2 <prov_dh_key_cb+0x16>
		bt_mesh_prov_link.expect = PROV_CONFIRM;
   1723e:	2305      	movs	r3, #5
   17240:	e7f9      	b.n	17236 <prov_dh_key_cb+0x9a>
   17242:	bf00      	nop
   17244:	0003523c 	.word	0x0003523c
   17248:	20003f13 	.word	0x20003f13
   1724c:	00035259 	.word	0x00035259
   17250:	20003fc5 	.word	0x20003fc5
   17254:	000172f1 	.word	0x000172f1
   17258:	00035276 	.word	0x00035276
   1725c:	20003ef4 	.word	0x20003ef4

00017260 <prov_pub_key>:
{
   17260:	b510      	push	{r4, lr}
	memcpy(&bt_mesh_prov_link.conf_inputs[17], data, 64);
   17262:	4b13      	ldr	r3, [pc, #76]	; (172b0 <prov_pub_key+0x50>)
   17264:	f100 0240 	add.w	r2, r0, #64	; 0x40
   17268:	f850 1b04 	ldr.w	r1, [r0], #4
   1726c:	f843 1b04 	str.w	r1, [r3], #4
   17270:	4290      	cmp	r0, r2
   17272:	d1f9      	bne.n	17268 <prov_pub_key+0x8>
	if (!bt_pub_key_get()) {
   17274:	f7f3 fd3e 	bl	acf4 <bt_pub_key_get>
   17278:	b9a8      	cbnz	r0, 172a6 <prov_pub_key+0x46>
		bt_mesh_prov_link.bearer->clear_tx();
   1727a:	4c0e      	ldr	r4, [pc, #56]	; (172b4 <prov_pub_key+0x54>)
   1727c:	6863      	ldr	r3, [r4, #4]
   1727e:	68db      	ldr	r3, [r3, #12]
   17280:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17282:	f3bf 8f5b 	dmb	ish
   17286:	e854 3f00 	ldrex	r3, [r4]
   1728a:	f043 0301 	orr.w	r3, r3, #1
   1728e:	e844 3200 	strex	r2, r3, [r4]
   17292:	2a00      	cmp	r2, #0
   17294:	d1f7      	bne.n	17286 <prov_pub_key+0x26>
   17296:	f3bf 8f5b 	dmb	ish
		BT_WARN("Waiting for local public key");
   1729a:	2157      	movs	r1, #87	; 0x57
   1729c:	4806      	ldr	r0, [pc, #24]	; (172b8 <prov_pub_key+0x58>)
}
   1729e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Waiting for local public key");
   172a2:	f010 bb16 	b.w	278d2 <printk>
}
   172a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prov_dh_key_gen();
   172aa:	f7ff bed5 	b.w	17058 <prov_dh_key_gen>
   172ae:	bf00      	nop
   172b0:	20003f85 	.word	0x20003f85
   172b4:	20003ef4 	.word	0x20003ef4
   172b8:	000352d4 	.word	0x000352d4

000172bc <local_input_complete>:
{
   172bc:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_mesh_prov_link.flags, PUB_KEY_SENT)) {
   172be:	2007      	movs	r0, #7
   172c0:	f7ff ff08 	bl	170d4 <atomic_test_bit.constprop.12>
   172c4:	b118      	cbz	r0, 172ce <local_input_complete+0x12>
}
   172c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_input_complete();
   172ca:	f7ff bcc3 	b.w	16c54 <send_input_complete>
   172ce:	4b07      	ldr	r3, [pc, #28]	; (172ec <local_input_complete+0x30>)
   172d0:	f3bf 8f5b 	dmb	ish
   172d4:	e853 2f00 	ldrex	r2, [r3]
   172d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   172dc:	e843 2100 	strex	r1, r2, [r3]
   172e0:	2900      	cmp	r1, #0
   172e2:	d1f7      	bne.n	172d4 <local_input_complete+0x18>
   172e4:	f3bf 8f5b 	dmb	ish
}
   172e8:	bd08      	pop	{r3, pc}
   172ea:	bf00      	nop
   172ec:	20003ef4 	.word	0x20003ef4

000172f0 <public_key_sent>:
{
   172f0:	b508      	push	{r3, lr}
   172f2:	4b0b      	ldr	r3, [pc, #44]	; (17320 <public_key_sent+0x30>)
   172f4:	f3bf 8f5b 	dmb	ish
   172f8:	e853 2f00 	ldrex	r2, [r3]
   172fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   17300:	e843 2100 	strex	r1, r2, [r3]
   17304:	2900      	cmp	r1, #0
   17306:	d1f7      	bne.n	172f8 <public_key_sent+0x8>
   17308:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, INPUT_COMPLETE)) {
   1730c:	2009      	movs	r0, #9
   1730e:	f7ff fee1 	bl	170d4 <atomic_test_bit.constprop.12>
   17312:	b118      	cbz	r0, 1731c <public_key_sent+0x2c>
}
   17314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_input_complete();
   17318:	f7ff bc9c 	b.w	16c54 <send_input_complete>
}
   1731c:	bd08      	pop	{r3, pc}
   1731e:	bf00      	nop
   17320:	20003ef4 	.word	0x20003ef4

00017324 <prov_confirm>:
{
   17324:	b530      	push	{r4, r5, lr}
	memcpy(bt_mesh_prov_link.conf, data, 16);
   17326:	4c35      	ldr	r4, [pc, #212]	; (173fc <prov_confirm+0xd8>)
{
   17328:	b08b      	sub	sp, #44	; 0x2c
   1732a:	4603      	mov	r3, r0
	memcpy(bt_mesh_prov_link.conf, data, 16);
   1732c:	f100 0510 	add.w	r5, r0, #16
   17330:	6818      	ldr	r0, [r3, #0]
   17332:	6859      	ldr	r1, [r3, #4]
   17334:	4622      	mov	r2, r4
   17336:	c203      	stmia	r2!, {r0, r1}
   17338:	3308      	adds	r3, #8
   1733a:	42ab      	cmp	r3, r5
   1733c:	4614      	mov	r4, r2
   1733e:	d1f7      	bne.n	17330 <prov_confirm+0xc>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17340:	f3bf 8f5b 	dmb	ish
   17344:	4c2e      	ldr	r4, [pc, #184]	; (17400 <prov_confirm+0xdc>)
   17346:	e854 2f00 	ldrex	r2, [r4]
   1734a:	f022 0310 	bic.w	r3, r2, #16
   1734e:	e844 3100 	strex	r1, r3, [r4]
   17352:	2900      	cmp	r1, #0
   17354:	d1f7      	bne.n	17346 <prov_confirm+0x22>
   17356:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags,
   1735a:	06d3      	lsls	r3, r2, #27
   1735c:	d504      	bpl.n	17368 <prov_confirm+0x44>
	    bt_mesh_prov->input_complete) {
   1735e:	4b29      	ldr	r3, [pc, #164]	; (17404 <prov_confirm+0xe0>)
   17360:	681b      	ldr	r3, [r3, #0]
   17362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				      NOTIFY_INPUT_COMPLETE) &&
   17364:	b103      	cbz	r3, 17368 <prov_confirm+0x44>
		bt_mesh_prov->input_complete();
   17366:	4798      	blx	r3
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   17368:	4927      	ldr	r1, [pc, #156]	; (17408 <prov_confirm+0xe4>)
	PROV_BUF(cfm, 17);
   1736a:	ab04      	add	r3, sp, #16
   1736c:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   17370:	f101 0020 	add.w	r0, r1, #32
	PROV_BUF(cfm, 17);
   17374:	9301      	str	r3, [sp, #4]
   17376:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   1737a:	f014 fa51 	bl	2b820 <bt_mesh_prov_conf_salt>
   1737e:	b140      	cbz	r0, 17392 <prov_confirm+0x6e>
		BT_ERR("Unable to generate confirmation salt");
   17380:	4822      	ldr	r0, [pc, #136]	; (1740c <prov_confirm+0xe8>)
   17382:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to generate confirmation value");
   17384:	f010 faa5 	bl	278d2 <printk>
	prov_send_fail_msg(reason);
   17388:	2007      	movs	r0, #7
   1738a:	f7ff fc83 	bl	16c94 <prov_send_fail_msg>
}
   1738e:	b00b      	add	sp, #44	; 0x2c
   17390:	bd30      	pop	{r4, r5, pc}
	if (bt_mesh_prov_conf_key(bt_mesh_prov_link.dhkey, bt_mesh_prov_link.conf_salt,
   17392:	4a1f      	ldr	r2, [pc, #124]	; (17410 <prov_confirm+0xec>)
   17394:	f1a2 0110 	sub.w	r1, r2, #16
   17398:	f1a2 0051 	sub.w	r0, r2, #81	; 0x51
   1739c:	f7fb f98c 	bl	126b8 <bt_mesh_prov_conf_key>
   173a0:	b110      	cbz	r0, 173a8 <prov_confirm+0x84>
		BT_ERR("Unable to generate confirmation key");
   173a2:	2145      	movs	r1, #69	; 0x45
   173a4:	481b      	ldr	r0, [pc, #108]	; (17414 <prov_confirm+0xf0>)
   173a6:	e7ed      	b.n	17384 <prov_confirm+0x60>
	if (bt_rand(bt_mesh_prov_link.rand, 16)) {
   173a8:	2110      	movs	r1, #16
   173aa:	481b      	ldr	r0, [pc, #108]	; (17418 <prov_confirm+0xf4>)
   173ac:	f015 faac 	bl	2c908 <bt_rand>
   173b0:	b110      	cbz	r0, 173b8 <prov_confirm+0x94>
		BT_ERR("Unable to generate random number");
   173b2:	2145      	movs	r1, #69	; 0x45
   173b4:	4819      	ldr	r0, [pc, #100]	; (1741c <prov_confirm+0xf8>)
   173b6:	e7e5      	b.n	17384 <prov_confirm+0x60>
	bt_mesh_prov_buf_init(&cfm, PROV_CONFIRM);
   173b8:	2105      	movs	r1, #5
   173ba:	a801      	add	r0, sp, #4
   173bc:	f014 fe69 	bl	2c092 <bt_mesh_prov_buf_init>
			      bt_mesh_prov_link.auth, net_buf_simple_add(&cfm, 16))) {
   173c0:	2110      	movs	r1, #16
   173c2:	a801      	add	r0, sp, #4
   173c4:	f008 fdec 	bl	1ffa0 <net_buf_simple_add>
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, bt_mesh_prov_link.rand,
   173c8:	4a15      	ldr	r2, [pc, #84]	; (17420 <prov_confirm+0xfc>)
   173ca:	4603      	mov	r3, r0
   173cc:	f102 0141 	add.w	r1, r2, #65	; 0x41
   173d0:	f102 0061 	add.w	r0, r2, #97	; 0x61
   173d4:	f014 fa35 	bl	2b842 <bt_mesh_prov_conf>
   173d8:	4601      	mov	r1, r0
   173da:	b110      	cbz	r0, 173e2 <prov_confirm+0xbe>
		BT_ERR("Unable to generate confirmation value");
   173dc:	2145      	movs	r1, #69	; 0x45
   173de:	4811      	ldr	r0, [pc, #68]	; (17424 <prov_confirm+0x100>)
   173e0:	e7d0      	b.n	17384 <prov_confirm+0x60>
	if (bt_mesh_prov_send(&cfm, NULL)) {
   173e2:	a801      	add	r0, sp, #4
   173e4:	f7ff fc26 	bl	16c34 <bt_mesh_prov_send>
   173e8:	b120      	cbz	r0, 173f4 <prov_confirm+0xd0>
		BT_ERR("Failed to send Provisioning Confirm");
   173ea:	2145      	movs	r1, #69	; 0x45
   173ec:	480e      	ldr	r0, [pc, #56]	; (17428 <prov_confirm+0x104>)
   173ee:	f010 fa70 	bl	278d2 <printk>
		return;
   173f2:	e7cc      	b.n	1738e <prov_confirm+0x6a>
	bt_mesh_prov_link.expect = PROV_RANDOM;
   173f4:	2306      	movs	r3, #6
   173f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
   173fa:	e7c8      	b.n	1738e <prov_confirm+0x6a>
   173fc:	20003f34 	.word	0x20003f34
   17400:	20003ef4 	.word	0x20003ef4
   17404:	20003ef0 	.word	0x20003ef0
   17408:	20003f54 	.word	0x20003f54
   1740c:	0003507e 	.word	0x0003507e
   17410:	20003f64 	.word	0x20003f64
   17414:	000350a8 	.word	0x000350a8
   17418:	20003f44 	.word	0x20003f44
   1741c:	000350d1 	.word	0x000350d1
   17420:	20003f03 	.word	0x20003f03
   17424:	000350f7 	.word	0x000350f7
   17428:	00035122 	.word	0x00035122

0001742c <bt_mesh_prov_enable>:
		[PROV_DATA] = prov_data,
	},
};

int bt_mesh_prov_enable(bt_mesh_prov_bearer_t bearers)
{
   1742c:	b538      	push	{r3, r4, r5, lr}
   1742e:	4604      	mov	r4, r0
	if (bt_mesh_is_provisioned()) {
   17430:	f013 fd07 	bl	2ae42 <bt_mesh_is_provisioned>
   17434:	4605      	mov	r5, r0
   17436:	b9a0      	cbnz	r0, 17462 <bt_mesh_prov_enable+0x36>

		memcpy(uuid.val, bt_mesh_prov->uuid, 16);
		BT_INFO("Device UUID: %s", bt_uuid_str(&uuid.uuid));
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) &&
   17438:	07e2      	lsls	r2, r4, #31
   1743a:	d505      	bpl.n	17448 <bt_mesh_prov_enable+0x1c>
	    (bearers & BT_MESH_PROV_ADV)) {
		pb_adv.link_accept(bt_mesh_prov_bearer_cb_get(), NULL);
   1743c:	f7ff fbc4 	bl	16bc8 <bt_mesh_prov_bearer_cb_get>
   17440:	4b09      	ldr	r3, [pc, #36]	; (17468 <bt_mesh_prov_enable+0x3c>)
   17442:	4629      	mov	r1, r5
   17444:	685b      	ldr	r3, [r3, #4]
   17446:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   17448:	07a3      	lsls	r3, r4, #30
   1744a:	d505      	bpl.n	17458 <bt_mesh_prov_enable+0x2c>
	    (bearers & BT_MESH_PROV_GATT)) {
		pb_gatt.link_accept(bt_mesh_prov_bearer_cb_get(), NULL);
   1744c:	f7ff fbbc 	bl	16bc8 <bt_mesh_prov_bearer_cb_get>
   17450:	4b06      	ldr	r3, [pc, #24]	; (1746c <bt_mesh_prov_enable+0x40>)
   17452:	2100      	movs	r1, #0
   17454:	685b      	ldr	r3, [r3, #4]
   17456:	4798      	blx	r3
	}

	bt_mesh_prov_link.role = &role_device;
   17458:	4b05      	ldr	r3, [pc, #20]	; (17470 <bt_mesh_prov_enable+0x44>)
   1745a:	4a06      	ldr	r2, [pc, #24]	; (17474 <bt_mesh_prov_enable+0x48>)
   1745c:	609a      	str	r2, [r3, #8]

	return 0;
   1745e:	2000      	movs	r0, #0
}
   17460:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   17462:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17466:	e7fb      	b.n	17460 <bt_mesh_prov_enable+0x34>
   17468:	0002fe6c 	.word	0x0002fe6c
   1746c:	0002fe84 	.word	0x0002fe84
   17470:	20003ef4 	.word	0x20003ef4
   17474:	0002fe0c 	.word	0x0002fe0c

00017478 <free_segments>:

	return 1 + (len / CONT_PAYLOAD_MAX);
}

static void free_segments(void)
{
   17478:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1747a:	2400      	movs	r4, #0
   1747c:	4d08      	ldr	r5, [pc, #32]	; (174a0 <free_segments+0x28>)

		if (!buf) {
			break;
		}

		link.tx.buf[i] = NULL;
   1747e:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
   17480:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
   17484:	b158      	cbz	r0, 1749e <free_segments+0x26>
		/* Mark as canceled */
		BT_MESH_ADV(buf)->busy = 0U;
   17486:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
   17488:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
   1748c:	7a1a      	ldrb	r2, [r3, #8]
   1748e:	f366 0282 	bfi	r2, r6, #2, #1
   17492:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   17494:	3401      	adds	r4, #1
		net_buf_unref(buf);
   17496:	f008 fc33 	bl	1fd00 <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1749a:	2c03      	cmp	r4, #3
   1749c:	d1f0      	bne.n	17480 <free_segments+0x8>
	}
}
   1749e:	bd70      	pop	{r4, r5, r6, pc}
   174a0:	20000c04 	.word	0x20000c04

000174a4 <prov_clear_tx>:
{
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
}

static void prov_clear_tx(void)
{
   174a4:	b508      	push	{r3, lr}
	BT_DBG("");

	k_delayed_work_cancel(&link.tx.retransmit);
   174a6:	4803      	ldr	r0, [pc, #12]	; (174b4 <prov_clear_tx+0x10>)
   174a8:	f00e f866 	bl	25578 <k_delayed_work_cancel>

	free_segments();
}
   174ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
   174b0:	f7ff bfe2 	b.w	17478 <free_segments>
   174b4:	20000c18 	.word	0x20000c18

000174b8 <adv_buf_create>:
	reset_adv_link();
	cb->link_closed(&pb_adv, cb_data, reason);
}

static struct net_buf *adv_buf_create(uint8_t retransmits)
{
   174b8:	b510      	push	{r4, lr}
	struct net_buf *buf;

	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV,
   174ba:	f040 0108 	orr.w	r1, r0, #8
   174be:	f243 3234 	movw	r2, #13108	; 0x3334
   174c2:	2300      	movs	r3, #0
   174c4:	2000      	movs	r0, #0
   174c6:	f7f7 fa77 	bl	e9b8 <bt_mesh_adv_create>
				 BT_MESH_TRANSMIT(retransmits, 20),
				 BUF_TIMEOUT);
	if (!buf) {
   174ca:	4604      	mov	r4, r0
   174cc:	b918      	cbnz	r0, 174d6 <adv_buf_create+0x1e>
		BT_ERR("Out of provisioning buffers");
   174ce:	2145      	movs	r1, #69	; 0x45
   174d0:	4802      	ldr	r0, [pc, #8]	; (174dc <adv_buf_create+0x24>)
   174d2:	f010 f9fe 	bl	278d2 <printk>
		return NULL;
	}

	return buf;
}
   174d6:	4620      	mov	r0, r4
   174d8:	bd10      	pop	{r4, pc}
   174da:	bf00      	nop
   174dc:	000354ce 	.word	0x000354ce

000174e0 <atomic_test_bit.constprop.16>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   174e0:	4b05      	ldr	r3, [pc, #20]	; (174f8 <atomic_test_bit.constprop.16+0x18>)
   174e2:	f3bf 8f5b 	dmb	ish
   174e6:	685b      	ldr	r3, [r3, #4]
   174e8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   174ec:	fa43 f000 	asr.w	r0, r3, r0
}
   174f0:	f000 0001 	and.w	r0, r0, #1
   174f4:	4770      	bx	lr
   174f6:	bf00      	nop
   174f8:	20000be0 	.word	0x20000be0

000174fc <prov_link_accept>:

	return 0;
}

static int prov_link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   174fc:	b570      	push	{r4, r5, r6, lr}
   174fe:	4606      	mov	r6, r0
   17500:	460d      	mov	r5, r1
	int err;

	err = bt_mesh_adv_enable();
   17502:	f7fd ff1d 	bl	15340 <bt_mesh_adv_enable>
	if (err) {
   17506:	4604      	mov	r4, r0
   17508:	b128      	cbz	r0, 17516 <prov_link_accept+0x1a>
		BT_ERR("Failed enabling advertiser");
   1750a:	2145      	movs	r1, #69	; 0x45
   1750c:	480b      	ldr	r0, [pc, #44]	; (1753c <prov_link_accept+0x40>)
   1750e:	f010 f9e0 	bl	278d2 <printk>
	bt_mesh_scan_enable();
	/* Enable unprovisioned beacon sending */
	bt_mesh_beacon_enable();

	return 0;
}
   17512:	4620      	mov	r0, r4
   17514:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   17516:	f7ff ffe3 	bl	174e0 <atomic_test_bit.constprop.16>
   1751a:	b960      	cbnz	r0, 17536 <prov_link_accept+0x3a>
	link.rx.id = XACT_ID_MAX;
   1751c:	4b08      	ldr	r3, [pc, #32]	; (17540 <prov_link_accept+0x44>)
   1751e:	227f      	movs	r2, #127	; 0x7f
   17520:	741a      	strb	r2, [r3, #16]
	link.tx.id = XACT_ID_NVAL;
   17522:	22ff      	movs	r2, #255	; 0xff
   17524:	f883 2020 	strb.w	r2, [r3, #32]
	link.cb_data = cb_data;
   17528:	e9c3 6502 	strd	r6, r5, [r3, #8]
	bt_mesh_scan_enable();
   1752c:	f7f7 fa6a 	bl	ea04 <bt_mesh_scan_enable>
	bt_mesh_beacon_enable();
   17530:	f7f7 fd28 	bl	ef84 <bt_mesh_beacon_enable>
	return 0;
   17534:	e7ed      	b.n	17512 <prov_link_accept+0x16>
		return -EBUSY;
   17536:	f06f 040f 	mvn.w	r4, #15
   1753a:	e7ea      	b.n	17512 <prov_link_accept+0x16>
   1753c:	00032851 	.word	0x00032851
   17540:	20000be0 	.word	0x20000be0

00017544 <reset_adv_link>:
{
   17544:	b510      	push	{r4, lr}
	k_delayed_work_cancel(&link.prot_timer);
   17546:	4c17      	ldr	r4, [pc, #92]	; (175a4 <reset_adv_link+0x60>)
	prov_clear_tx();
   17548:	f7ff ffac 	bl	174a4 <prov_clear_tx>
	k_delayed_work_cancel(&link.prot_timer);
   1754c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   17550:	f00e f812 	bl	25578 <k_delayed_work_cancel>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   17554:	2005      	movs	r0, #5
   17556:	f7ff ffc3 	bl	174e0 <atomic_test_bit.constprop.16>
   1755a:	b180      	cbz	r0, 1757e <reset_adv_link+0x3a>
		(void)memset(&link, 0, offsetof(struct pb_adv, tx.retransmit));
   1755c:	2238      	movs	r2, #56	; 0x38
   1755e:	2100      	movs	r1, #0
   17560:	4620      	mov	r0, r4
   17562:	f016 fedd 	bl	2e320 <memset>
		link.rx.id = XACT_ID_NVAL;
   17566:	22ff      	movs	r2, #255	; 0xff
   17568:	7422      	strb	r2, [r4, #16]
	link.tx.pending_ack = XACT_ID_NVAL;
   1756a:	22ff      	movs	r2, #255	; 0xff
   1756c:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	link.rx.buf = &rx_buf;
   17570:	4a0d      	ldr	r2, [pc, #52]	; (175a8 <reset_adv_link+0x64>)
   17572:	6162      	str	r2, [r4, #20]
	buf->len  = 0U;
   17574:	2300      	movs	r3, #0
   17576:	8093      	strh	r3, [r2, #4]
	buf->data = buf->__buf;
   17578:	6893      	ldr	r3, [r2, #8]
   1757a:	6013      	str	r3, [r2, #0]
}
   1757c:	bd10      	pop	{r4, pc}
		link.id = 0;
   1757e:	4622      	mov	r2, r4
   17580:	f842 0b04 	str.w	r0, [r2], #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17584:	f3bf 8f5b 	dmb	ish
   17588:	e852 1f00 	ldrex	r1, [r2]
   1758c:	e842 0300 	strex	r3, r0, [r2]
   17590:	2b00      	cmp	r3, #0
   17592:	d1f9      	bne.n	17588 <reset_adv_link+0x44>
   17594:	f3bf 8f5b 	dmb	ish
		link.rx.id = XACT_ID_MAX;
   17598:	227f      	movs	r2, #127	; 0x7f
   1759a:	7422      	strb	r2, [r4, #16]
		link.tx.id = XACT_ID_NVAL;
   1759c:	22ff      	movs	r2, #255	; 0xff
   1759e:	f884 2020 	strb.w	r2, [r4, #32]
   175a2:	e7e2      	b.n	1756a <reset_adv_link+0x26>
   175a4:	20000be0 	.word	0x20000be0
   175a8:	20001438 	.word	0x20001438

000175ac <close_link>:
{
   175ac:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
   175ae:	4b06      	ldr	r3, [pc, #24]	; (175c8 <close_link+0x1c>)
	void *cb_data = link.cb_data;
   175b0:	e9d3 6402 	ldrd	r6, r4, [r3, #8]
{
   175b4:	4605      	mov	r5, r0
	reset_adv_link();
   175b6:	f7ff ffc5 	bl	17544 <reset_adv_link>
	cb->link_closed(&pb_adv, cb_data, reason);
   175ba:	6873      	ldr	r3, [r6, #4]
   175bc:	4803      	ldr	r0, [pc, #12]	; (175cc <close_link+0x20>)
   175be:	462a      	mov	r2, r5
   175c0:	4621      	mov	r1, r4
}
   175c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_adv, cb_data, reason);
   175c6:	4718      	bx	r3
   175c8:	20000be0 	.word	0x20000be0
   175cc:	0002fe6c 	.word	0x0002fe6c

000175d0 <prov_retransmit>:
{
   175d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   175d4:	2000      	movs	r0, #0
   175d6:	f7ff ff83 	bl	174e0 <atomic_test_bit.constprop.16>
   175da:	b928      	cbnz	r0, 175e8 <prov_retransmit+0x18>
		BT_WARN("Link not active");
   175dc:	2157      	movs	r1, #87	; 0x57
   175de:	482a      	ldr	r0, [pc, #168]	; (17688 <prov_retransmit+0xb8>)
}
   175e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Link not active");
   175e4:	f010 b975 	b.w	278d2 <printk>
	if (atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   175e8:	2002      	movs	r0, #2
   175ea:	f7ff ff79 	bl	174e0 <atomic_test_bit.constprop.16>
		timeout_ms = TRANSACTION_TIMEOUT;
   175ee:	f640 35b8 	movw	r5, #3000	; 0xbb8
   175f2:	f247 5330 	movw	r3, #30000	; 0x7530
   175f6:	2800      	cmp	r0, #0
   175f8:	bf08      	it	eq
   175fa:	461d      	moveq	r5, r3
   175fc:	f016 fdb5 	bl	2e16a <z_impl_k_uptime_ticks>
	if (k_uptime_get() - link.tx.start > timeout_ms) {
   17600:	4c22      	ldr	r4, [pc, #136]	; (1768c <prov_retransmit+0xbc>)
   17602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17606:	fba0 8903 	umull	r8, r9, r0, r3
   1760a:	fb03 9901 	mla	r9, r3, r1, r9
   1760e:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
   17612:	ea4f 33d8 	mov.w	r3, r8, lsr #15
   17616:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
   1761a:	1a5e      	subs	r6, r3, r1
   1761c:	ea4f 32d9 	mov.w	r2, r9, lsr #15
   17620:	eb62 0700 	sbc.w	r7, r2, r0
   17624:	17e9      	asrs	r1, r5, #31
   17626:	42b5      	cmp	r5, r6
   17628:	eb71 0307 	sbcs.w	r3, r1, r7
   1762c:	da0e      	bge.n	1764c <prov_retransmit+0x7c>
		if (atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   1762e:	2002      	movs	r0, #2
   17630:	f7ff ff56 	bl	174e0 <atomic_test_bit.constprop.16>
   17634:	b120      	cbz	r0, 17640 <prov_retransmit+0x70>
			close_link(PROV_BEARER_LINK_STATUS_SUCCESS);
   17636:	2000      	movs	r0, #0
}
   17638:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   1763c:	f7ff bfb6 	b.w	175ac <close_link>
			BT_WARN("Giving up transaction");
   17640:	4813      	ldr	r0, [pc, #76]	; (17690 <prov_retransmit+0xc0>)
   17642:	2157      	movs	r1, #87	; 0x57
   17644:	f010 f945 	bl	278d2 <printk>
			close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   17648:	2001      	movs	r0, #1
   1764a:	e7f5      	b.n	17638 <prov_retransmit+0x68>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   1764c:	4e11      	ldr	r6, [pc, #68]	; (17694 <prov_retransmit+0xc4>)
   1764e:	3424      	adds	r4, #36	; 0x24
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   17650:	2500      	movs	r5, #0
		struct net_buf *buf = link.tx.buf[i];
   17652:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   17656:	b1a0      	cbz	r0, 17682 <prov_retransmit+0xb2>
		if (BT_MESH_ADV(buf)->busy) {
   17658:	6943      	ldr	r3, [r0, #20]
   1765a:	7a1a      	ldrb	r2, [r3, #8]
   1765c:	f012 0204 	ands.w	r2, r2, #4
   17660:	f105 0501 	add.w	r5, r5, #1
   17664:	d10b      	bne.n	1767e <prov_retransmit+0xae>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   17666:	2d03      	cmp	r5, #3
   17668:	d005      	beq.n	17676 <prov_retransmit+0xa6>
   1766a:	6823      	ldr	r3, [r4, #0]
   1766c:	b11b      	cbz	r3, 17676 <prov_retransmit+0xa6>
			bt_mesh_adv_send(buf, NULL, NULL);
   1766e:	4611      	mov	r1, r2
   17670:	f7f7 f9b2 	bl	e9d8 <bt_mesh_adv_send>
   17674:	e7ed      	b.n	17652 <prov_retransmit+0x82>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   17676:	2200      	movs	r2, #0
   17678:	4631      	mov	r1, r6
   1767a:	f7f7 f9ad 	bl	e9d8 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1767e:	2d03      	cmp	r5, #3
   17680:	d1e7      	bne.n	17652 <prov_retransmit+0x82>
}
   17682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17686:	bf00      	nop
   17688:	000356f5 	.word	0x000356f5
   1768c:	20000be0 	.word	0x20000be0
   17690:	0003570a 	.word	0x0003570a
   17694:	20001430 	.word	0x20001430

00017698 <protocol_timeout>:
	link.rx.seg = 0U;
   17698:	4b02      	ldr	r3, [pc, #8]	; (176a4 <protocol_timeout+0xc>)
   1769a:	2200      	movs	r2, #0
	close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   1769c:	2001      	movs	r0, #1
	link.rx.seg = 0U;
   1769e:	745a      	strb	r2, [r3, #17]
	close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   176a0:	f7ff bf84 	b.w	175ac <close_link>
   176a4:	20000be0 	.word	0x20000be0

000176a8 <gen_prov_ack>:
{
   176a8:	b510      	push	{r4, lr}
	if (!link.tx.buf[0]) {
   176aa:	4c0b      	ldr	r4, [pc, #44]	; (176d8 <gen_prov_ack+0x30>)
   176ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   176ae:	b18b      	cbz	r3, 176d4 <gen_prov_ack+0x2c>
	if (rx->xact_id == link.tx.id) {
   176b0:	7902      	ldrb	r2, [r0, #4]
   176b2:	f894 3020 	ldrb.w	r3, [r4, #32]
   176b6:	429a      	cmp	r2, r3
   176b8:	d10c      	bne.n	176d4 <gen_prov_ack+0x2c>
		if (!atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   176ba:	2002      	movs	r0, #2
   176bc:	f7ff ff10 	bl	174e0 <atomic_test_bit.constprop.16>
   176c0:	b908      	cbnz	r0, 176c6 <gen_prov_ack+0x1e>
			prov_clear_tx();
   176c2:	f7ff feef 	bl	174a4 <prov_clear_tx>
		if (link.tx.cb) {
   176c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   176c8:	b123      	cbz	r3, 176d4 <gen_prov_ack+0x2c>
			link.tx.cb(0, link.tx.cb_data);
   176ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
   176cc:	2000      	movs	r0, #0
}
   176ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			link.tx.cb(0, link.tx.cb_data);
   176d2:	4718      	bx	r3
}
   176d4:	bd10      	pop	{r4, pc}
   176d6:	bf00      	nop
   176d8:	20000be0 	.word	0x20000be0

000176dc <ack_complete>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   176dc:	4b06      	ldr	r3, [pc, #24]	; (176f8 <ack_complete+0x1c>)
   176de:	f3bf 8f5b 	dmb	ish
   176e2:	e853 2f00 	ldrex	r2, [r3]
   176e6:	f022 0210 	bic.w	r2, r2, #16
   176ea:	e843 2100 	strex	r1, r2, [r3]
   176ee:	2900      	cmp	r1, #0
   176f0:	d1f7      	bne.n	176e2 <ack_complete+0x6>
   176f2:	f3bf 8f5b 	dmb	ish
}
   176f6:	4770      	bx	lr
   176f8:	20000be4 	.word	0x20000be4

000176fc <buf_sent>:
	if (!link.tx.buf[0]) {
   176fc:	4905      	ldr	r1, [pc, #20]	; (17714 <buf_sent+0x18>)
   176fe:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   17700:	b133      	cbz	r3, 17710 <buf_sent+0x14>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   17702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   17706:	2300      	movs	r3, #0
   17708:	3138      	adds	r1, #56	; 0x38
   1770a:	4803      	ldr	r0, [pc, #12]	; (17718 <buf_sent+0x1c>)
   1770c:	f00d bec4 	b.w	25498 <k_delayed_work_submit_to_queue>
}
   17710:	4770      	bx	lr
   17712:	bf00      	nop
   17714:	20000be0 	.word	0x20000be0
   17718:	20003028 	.word	0x20003028

0001771c <prov_failed>:
{
   1771c:	b510      	push	{r4, lr}
	link.cb->error(&pb_adv, link.cb_data, err);
   1771e:	4c0a      	ldr	r4, [pc, #40]	; (17748 <prov_failed+0x2c>)
   17720:	68a3      	ldr	r3, [r4, #8]
   17722:	68e1      	ldr	r1, [r4, #12]
   17724:	689b      	ldr	r3, [r3, #8]
   17726:	4602      	mov	r2, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17728:	3404      	adds	r4, #4
   1772a:	4808      	ldr	r0, [pc, #32]	; (1774c <prov_failed+0x30>)
   1772c:	4798      	blx	r3
   1772e:	f3bf 8f5b 	dmb	ish
   17732:	e854 3f00 	ldrex	r3, [r4]
   17736:	f043 0308 	orr.w	r3, r3, #8
   1773a:	e844 3200 	strex	r2, r3, [r4]
   1773e:	2a00      	cmp	r2, #0
   17740:	d1f7      	bne.n	17732 <prov_failed+0x16>
   17742:	f3bf 8f5b 	dmb	ish
}
   17746:	bd10      	pop	{r4, pc}
   17748:	20000be0 	.word	0x20000be0
   1774c:	0002fe6c 	.word	0x0002fe6c

00017750 <gen_prov_ack_send>:
{
   17750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17754:	4e23      	ldr	r6, [pc, #140]	; (177e4 <gen_prov_ack_send+0x94>)
   17756:	f3bf 8f5b 	dmb	ish
   1775a:	4680      	mov	r8, r0
   1775c:	1d33      	adds	r3, r6, #4
   1775e:	e853 2f00 	ldrex	r2, [r3]
   17762:	f042 0110 	orr.w	r1, r2, #16
   17766:	e843 1000 	strex	r0, r1, [r3]
   1776a:	2800      	cmp	r0, #0
   1776c:	d1f7      	bne.n	1775e <gen_prov_ack_send+0xe>
   1776e:	f3bf 8f5b 	dmb	ish
	if (pending && link.tx.pending_ack == xact_id) {
   17772:	f012 0710 	ands.w	r7, r2, #16
   17776:	461c      	mov	r4, r3
   17778:	d003      	beq.n	17782 <gen_prov_ack_send+0x32>
   1777a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   1777e:	4543      	cmp	r3, r8
   17780:	d010      	beq.n	177a4 <gen_prov_ack_send+0x54>
	buf = adv_buf_create(RETRANSMITS_ACK);
   17782:	2002      	movs	r0, #2
   17784:	f7ff fe98 	bl	174b8 <adv_buf_create>
	if (!buf) {
   17788:	4605      	mov	r5, r0
   1778a:	b968      	cbnz	r0, 177a8 <gen_prov_ack_send+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1778c:	f3bf 8f5b 	dmb	ish
   17790:	e854 3f00 	ldrex	r3, [r4]
   17794:	f023 0310 	bic.w	r3, r3, #16
   17798:	e844 3200 	strex	r2, r3, [r4]
   1779c:	2a00      	cmp	r2, #0
   1779e:	d1f7      	bne.n	17790 <gen_prov_ack_send+0x40>
   177a0:	f3bf 8f5b 	dmb	ish
}
   177a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pending) {
   177a8:	b9cf      	cbnz	r7, 177de <gen_prov_ack_send+0x8e>
		complete = &cb;
   177aa:	4c0f      	ldr	r4, [pc, #60]	; (177e8 <gen_prov_ack_send+0x98>)
		link.tx.pending_ack = xact_id;
   177ac:	f886 8021 	strb.w	r8, [r6, #33]	; 0x21
	net_buf_simple_add_be32(&buf->b, val);
   177b0:	6831      	ldr	r1, [r6, #0]
   177b2:	f105 0008 	add.w	r0, r5, #8
   177b6:	f015 ff40 	bl	2d63a <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
   177ba:	4641      	mov	r1, r8
   177bc:	4628      	mov	r0, r5
   177be:	f014 fc76 	bl	2c0ae <net_buf_add_u8>
	net_buf_add_u8(buf, GPC_ACK);
   177c2:	2101      	movs	r1, #1
   177c4:	4628      	mov	r0, r5
   177c6:	f014 fc72 	bl	2c0ae <net_buf_add_u8>
	bt_mesh_adv_send(buf, complete, NULL);
   177ca:	4628      	mov	r0, r5
   177cc:	4621      	mov	r1, r4
   177ce:	2200      	movs	r2, #0
   177d0:	f7f7 f902 	bl	e9d8 <bt_mesh_adv_send>
	net_buf_unref(buf);
   177d4:	4628      	mov	r0, r5
}
   177d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	net_buf_unref(buf);
   177da:	f008 ba91 	b.w	1fd00 <net_buf_unref>
		complete = NULL;
   177de:	2400      	movs	r4, #0
   177e0:	e7e6      	b.n	177b0 <gen_prov_ack_send+0x60>
   177e2:	bf00      	nop
   177e4:	20000be0 	.word	0x20000be0
   177e8:	0002fe44 	.word	0x0002fe44

000177ec <prov_msg_recv>:
{
   177ec:	b510      	push	{r4, lr}
   177ee:	4c17      	ldr	r4, [pc, #92]	; (1784c <prov_msg_recv+0x60>)
   177f0:	4817      	ldr	r0, [pc, #92]	; (17850 <prov_msg_recv+0x64>)
   177f2:	f104 0168 	add.w	r1, r4, #104	; 0x68
   177f6:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   177fa:	2300      	movs	r3, #0
   177fc:	f00d fe4c 	bl	25498 <k_delayed_work_submit_to_queue>
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   17800:	7ce1      	ldrb	r1, [r4, #19]
   17802:	6960      	ldr	r0, [r4, #20]
   17804:	f7fa ff1e 	bl	12644 <bt_mesh_fcs_check>
   17808:	b928      	cbnz	r0, 17816 <prov_msg_recv+0x2a>
		BT_ERR("Incorrect FCS");
   1780a:	2145      	movs	r1, #69	; 0x45
   1780c:	4811      	ldr	r0, [pc, #68]	; (17854 <prov_msg_recv+0x68>)
}
   1780e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Incorrect FCS");
   17812:	f010 b85e 	b.w	278d2 <printk>
	gen_prov_ack_send(link.rx.id);
   17816:	7c20      	ldrb	r0, [r4, #16]
   17818:	f7ff ff9a 	bl	17750 <gen_prov_ack_send>
	if (atomic_test_bit(link.flags, ADV_LINK_INVALID)) {
   1781c:	2003      	movs	r0, #3
   1781e:	f7ff fe5f 	bl	174e0 <atomic_test_bit.constprop.16>
   17822:	b158      	cbz	r0, 1783c <prov_msg_recv+0x50>
		BT_WARN("Unexpected msg 0x%02x on invalidated link",
   17824:	6963      	ldr	r3, [r4, #20]
   17826:	480c      	ldr	r0, [pc, #48]	; (17858 <prov_msg_recv+0x6c>)
   17828:	681b      	ldr	r3, [r3, #0]
   1782a:	2157      	movs	r1, #87	; 0x57
   1782c:	781a      	ldrb	r2, [r3, #0]
   1782e:	f010 f850 	bl	278d2 <printk>
		prov_failed(PROV_ERR_UNEXP_PDU);
   17832:	2003      	movs	r0, #3
}
   17834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_failed(PROV_ERR_UNEXP_PDU);
   17838:	f7ff bf70 	b.w	1771c <prov_failed>
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   1783c:	68a3      	ldr	r3, [r4, #8]
   1783e:	6962      	ldr	r2, [r4, #20]
   17840:	68e1      	ldr	r1, [r4, #12]
   17842:	68db      	ldr	r3, [r3, #12]
   17844:	4805      	ldr	r0, [pc, #20]	; (1785c <prov_msg_recv+0x70>)
}
   17846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   1784a:	4718      	bx	r3
   1784c:	20000be0 	.word	0x20000be0
   17850:	20003028 	.word	0x20003028
   17854:	000356b3 	.word	0x000356b3
   17858:	000356c6 	.word	0x000356c6
   1785c:	0002fe6c 	.word	0x0002fe6c

00017860 <gen_prov_cont>:
{
   17860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17864:	4d3a      	ldr	r5, [pc, #232]	; (17950 <gen_prov_cont+0xf0>)
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   17866:	7944      	ldrb	r4, [r0, #5]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   17868:	f895 c011 	ldrb.w	ip, [r5, #17]
   1786c:	7c2b      	ldrb	r3, [r5, #16]
   1786e:	7902      	ldrb	r2, [r0, #4]
{
   17870:	4607      	mov	r7, r0
   17872:	460e      	mov	r6, r1
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   17874:	f1bc 0f00 	cmp.w	ip, #0
   17878:	d12d      	bne.n	178d6 <gen_prov_cont+0x76>
   1787a:	4293      	cmp	r3, r2
   1787c:	d109      	bne.n	17892 <gen_prov_cont+0x32>
	return atomic_test_bit(link.flags, ADV_ACK_PENDING);
   1787e:	2004      	movs	r0, #4
   17880:	f7ff fe2e 	bl	174e0 <atomic_test_bit.constprop.16>
		if (!ack_pending()) {
   17884:	2800      	cmp	r0, #0
   17886:	d161      	bne.n	1794c <gen_prov_cont+0xec>
			gen_prov_ack_send(rx->xact_id);
   17888:	7938      	ldrb	r0, [r7, #4]
}
   1788a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			gen_prov_ack_send(rx->xact_id);
   1788e:	f7ff bf5f 	b.w	17750 <gen_prov_ack_send>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   17892:	b259      	sxtb	r1, r3
   17894:	1c48      	adds	r0, r1, #1
   17896:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1789a:	f001 0180 	and.w	r1, r1, #128	; 0x80
	if (!link.rx.seg &&
   1789e:	4301      	orrs	r1, r0
   178a0:	428a      	cmp	r2, r1
   178a2:	d11a      	bne.n	178da <gen_prov_cont+0x7a>
		net_buf_simple_reset(link.rx.buf);
   178a4:	696b      	ldr	r3, [r5, #20]
		link.rx.id = rx->xact_id;
   178a6:	742a      	strb	r2, [r5, #16]
	buf->data = buf->__buf;
   178a8:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   178aa:	f8a3 c004 	strh.w	ip, [r3, #4]
	buf->data = buf->__buf;
   178ae:	601a      	str	r2, [r3, #0]
		link.rx.seg = SEG_NVAL;
   178b0:	23ff      	movs	r3, #255	; 0xff
   178b2:	746b      	strb	r3, [r5, #17]
		link.rx.last_seg = SEG_NVAL;
   178b4:	74ab      	strb	r3, [r5, #18]
		prov_clear_tx();
   178b6:	f7ff fdf5 	bl	174a4 <prov_clear_tx>
	if (seg > link.rx.last_seg) {
   178ba:	7cab      	ldrb	r3, [r5, #18]
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   178bc:	08a4      	lsrs	r4, r4, #2
	if (seg > link.rx.last_seg) {
   178be:	42a3      	cmp	r3, r4
   178c0:	d211      	bcs.n	178e6 <gen_prov_cont+0x86>
		BT_ERR("Invalid segment index %u", seg);
   178c2:	4622      	mov	r2, r4
   178c4:	2145      	movs	r1, #69	; 0x45
   178c6:	4823      	ldr	r0, [pc, #140]	; (17954 <gen_prov_cont+0xf4>)
   178c8:	f010 f803 	bl	278d2 <printk>
			prov_failed(PROV_ERR_NVAL_FMT);
   178cc:	2002      	movs	r0, #2
}
   178ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			prov_failed(PROV_ERR_NVAL_FMT);
   178d2:	f7ff bf23 	b.w	1771c <prov_failed>
	} else if (rx->xact_id != link.rx.id) {
   178d6:	4293      	cmp	r3, r2
   178d8:	d0ef      	beq.n	178ba <gen_prov_cont+0x5a>
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
   178da:	2157      	movs	r1, #87	; 0x57
   178dc:	481e      	ldr	r0, [pc, #120]	; (17958 <gen_prov_cont+0xf8>)
}
   178de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
   178e2:	f00f bff6 	b.w	278d2 <printk>
	if (!(link.rx.seg & BIT(seg))) {
   178e6:	7c6b      	ldrb	r3, [r5, #17]
   178e8:	40e3      	lsrs	r3, r4
   178ea:	07da      	lsls	r2, r3, #31
   178ec:	d52e      	bpl.n	1794c <gen_prov_cont+0xec>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
   178ee:	696a      	ldr	r2, [r5, #20]
   178f0:	6831      	ldr	r1, [r6, #0]
   178f2:	1e60      	subs	r0, r4, #1
   178f4:	2317      	movs	r3, #23
   178f6:	4343      	muls	r3, r0
   178f8:	6810      	ldr	r0, [r2, #0]
   178fa:	88b2      	ldrh	r2, [r6, #4]
   178fc:	3314      	adds	r3, #20
   178fe:	4418      	add	r0, r3
   17900:	f016 fcd3 	bl	2e2aa <memcpy>
	XACT_SEG_RECV(seg);
   17904:	2101      	movs	r1, #1
   17906:	fa01 f304 	lsl.w	r3, r1, r4
   1790a:	7c69      	ldrb	r1, [r5, #17]
   1790c:	ea21 0103 	bic.w	r1, r1, r3
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   17910:	7cab      	ldrb	r3, [r5, #18]
	XACT_SEG_RECV(seg);
   17912:	7469      	strb	r1, [r5, #17]
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   17914:	429c      	cmp	r4, r3
   17916:	d114      	bne.n	17942 <gen_prov_cont+0xe2>
   17918:	07cb      	lsls	r3, r1, #31
   1791a:	d417      	bmi.n	1794c <gen_prov_cont+0xec>
		expect_len = (link.rx.buf->len - 20U -
   1791c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   17920:	696b      	ldr	r3, [r5, #20]
   17922:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   17926:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   1792a:	791c      	ldrb	r4, [r3, #4]
		if (expect_len != buf->len) {
   1792c:	88b3      	ldrh	r3, [r6, #4]
		expect_len = (link.rx.buf->len - 20U -
   1792e:	3203      	adds	r2, #3
   17930:	4422      	add	r2, r4
   17932:	b2d2      	uxtb	r2, r2
		if (expect_len != buf->len) {
   17934:	429a      	cmp	r2, r3
   17936:	d004      	beq.n	17942 <gen_prov_cont+0xe2>
			BT_ERR("Incorrect last seg len: %u != %u", expect_len,
   17938:	2145      	movs	r1, #69	; 0x45
   1793a:	4808      	ldr	r0, [pc, #32]	; (1795c <gen_prov_cont+0xfc>)
   1793c:	f00f ffc9 	bl	278d2 <printk>
   17940:	e7c4      	b.n	178cc <gen_prov_cont+0x6c>
	if (!link.rx.seg) {
   17942:	b919      	cbnz	r1, 1794c <gen_prov_cont+0xec>
}
   17944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   17948:	f7ff bf50 	b.w	177ec <prov_msg_recv>
}
   1794c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17950:	20000be0 	.word	0x20000be0
   17954:	0003556f 	.word	0x0003556f
   17958:	0003553e 	.word	0x0003553e
   1795c:	0003558d 	.word	0x0003558d

00017960 <send_reliable>:
{
   17960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17962:	f016 fc02 	bl	2e16a <z_impl_k_uptime_ticks>
   17966:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1796a:	fba0 6705 	umull	r6, r7, r0, r5
   1796e:	fb05 7701 	mla	r7, r5, r1, r7
	link.tx.start = k_uptime_get();
   17972:	4c0f      	ldr	r4, [pc, #60]	; (179b0 <send_reliable+0x50>)
   17974:	0bf2      	lsrs	r2, r6, #15
   17976:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
   1797a:	0bfb      	lsrs	r3, r7, #15
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   1797c:	4e0d      	ldr	r6, [pc, #52]	; (179b4 <send_reliable+0x54>)
	link.tx.start = k_uptime_get();
   1797e:	e9c4 2306 	strd	r2, r3, [r4, #24]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   17982:	2500      	movs	r5, #0
   17984:	3424      	adds	r4, #36	; 0x24
		struct net_buf *buf = link.tx.buf[i];
   17986:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   1798a:	b178      	cbz	r0, 179ac <send_reliable+0x4c>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   1798c:	3501      	adds	r5, #1
   1798e:	2d03      	cmp	r5, #3
			bt_mesh_adv_send(buf, NULL, NULL);
   17990:	f04f 0200 	mov.w	r2, #0
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   17994:	d005      	beq.n	179a2 <send_reliable+0x42>
   17996:	6823      	ldr	r3, [r4, #0]
   17998:	b11b      	cbz	r3, 179a2 <send_reliable+0x42>
			bt_mesh_adv_send(buf, NULL, NULL);
   1799a:	4611      	mov	r1, r2
   1799c:	f7f7 f81c 	bl	e9d8 <bt_mesh_adv_send>
   179a0:	e7f1      	b.n	17986 <send_reliable+0x26>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   179a2:	4631      	mov	r1, r6
   179a4:	f7f7 f818 	bl	e9d8 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   179a8:	2d03      	cmp	r5, #3
   179aa:	d1ec      	bne.n	17986 <send_reliable+0x26>
}
   179ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   179ae:	bf00      	nop
   179b0:	20000be0 	.word	0x20000be0
   179b4:	20001430 	.word	0x20001430

000179b8 <bearer_ctl_send>:
{
   179b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   179bc:	461c      	mov	r4, r3
   179be:	4606      	mov	r6, r0
   179c0:	4688      	mov	r8, r1
   179c2:	4691      	mov	r9, r2
	prov_clear_tx();
   179c4:	f7ff fd6e 	bl	174a4 <prov_clear_tx>
   179c8:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   179cc:	2300      	movs	r3, #0
   179ce:	491c      	ldr	r1, [pc, #112]	; (17a40 <bearer_ctl_send+0x88>)
   179d0:	481c      	ldr	r0, [pc, #112]	; (17a44 <bearer_ctl_send+0x8c>)
   179d2:	f00d fd61 	bl	25498 <k_delayed_work_submit_to_queue>
	buf = adv_buf_create(reliable ? RETRANSMITS_RELIABLE :
   179d6:	2c00      	cmp	r4, #0
   179d8:	bf0c      	ite	eq
   179da:	2002      	moveq	r0, #2
   179dc:	2000      	movne	r0, #0
   179de:	f7ff fd6b 	bl	174b8 <adv_buf_create>
	if (!buf) {
   179e2:	4605      	mov	r5, r0
   179e4:	b348      	cbz	r0, 17a3a <bearer_ctl_send+0x82>
	net_buf_add_be32(buf, link.id);
   179e6:	f8df a064 	ldr.w	sl, [pc, #100]	; 17a4c <bearer_ctl_send+0x94>
	net_buf_simple_add_be32(&buf->b, val);
   179ea:	f100 0708 	add.w	r7, r0, #8
   179ee:	f8da 1000 	ldr.w	r1, [sl]
   179f2:	4638      	mov	r0, r7
   179f4:	f015 fe21 	bl	2d63a <net_buf_simple_add_be32>
	net_buf_add_u8(buf, 0x00);
   179f8:	2100      	movs	r1, #0
   179fa:	4628      	mov	r0, r5
   179fc:	f014 fb57 	bl	2c0ae <net_buf_add_u8>
	net_buf_add_u8(buf, GPC_CTL(op));
   17a00:	00b1      	lsls	r1, r6, #2
   17a02:	f041 0103 	orr.w	r1, r1, #3
   17a06:	b2c9      	uxtb	r1, r1
   17a08:	4628      	mov	r0, r5
   17a0a:	f014 fb50 	bl	2c0ae <net_buf_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17a0e:	464a      	mov	r2, r9
   17a10:	4641      	mov	r1, r8
   17a12:	4638      	mov	r0, r7
   17a14:	f015 fdd2 	bl	2d5bc <net_buf_simple_add_mem>
	if (reliable) {
   17a18:	b134      	cbz	r4, 17a28 <bearer_ctl_send+0x70>
		link.tx.buf[0] = buf;
   17a1a:	f8ca 5024 	str.w	r5, [sl, #36]	; 0x24
		send_reliable();
   17a1e:	f7ff ff9f 	bl	17960 <send_reliable>
	return 0;
   17a22:	2000      	movs	r0, #0
}
   17a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   17a28:	4628      	mov	r0, r5
   17a2a:	4622      	mov	r2, r4
   17a2c:	4906      	ldr	r1, [pc, #24]	; (17a48 <bearer_ctl_send+0x90>)
   17a2e:	f7f6 ffd3 	bl	e9d8 <bt_mesh_adv_send>
		net_buf_unref(buf);
   17a32:	4628      	mov	r0, r5
   17a34:	f008 f964 	bl	1fd00 <net_buf_unref>
   17a38:	e7f3      	b.n	17a22 <bearer_ctl_send+0x6a>
		return -ENOBUFS;
   17a3a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17a3e:	e7f1      	b.n	17a24 <bearer_ctl_send+0x6c>
   17a40:	20000c48 	.word	0x20000c48
   17a44:	20003028 	.word	0x20003028
   17a48:	20001430 	.word	0x20001430
   17a4c:	20000be0 	.word	0x20000be0

00017a50 <gen_prov_ctl>:
{
   17a50:	b570      	push	{r4, r5, r6, lr}
	switch (BEARER_CTL(rx->gpc)) {
   17a52:	7942      	ldrb	r2, [r0, #5]
   17a54:	0892      	lsrs	r2, r2, #2
   17a56:	2a01      	cmp	r2, #1
{
   17a58:	4604      	mov	r4, r0
	switch (BEARER_CTL(rx->gpc)) {
   17a5a:	d04c      	beq.n	17af6 <gen_prov_ctl+0xa6>
   17a5c:	b255      	sxtb	r5, r2
   17a5e:	b125      	cbz	r5, 17a6a <gen_prov_ctl+0x1a>
   17a60:	2a02      	cmp	r2, #2
   17a62:	d063      	beq.n	17b2c <gen_prov_ctl+0xdc>
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   17a64:	2145      	movs	r1, #69	; 0x45
   17a66:	4839      	ldr	r0, [pc, #228]	; (17b4c <gen_prov_ctl+0xfc>)
   17a68:	e004      	b.n	17a74 <gen_prov_ctl+0x24>
	if (buf->len < 16) {
   17a6a:	888a      	ldrh	r2, [r1, #4]
   17a6c:	2a0f      	cmp	r2, #15
   17a6e:	d805      	bhi.n	17a7c <gen_prov_ctl+0x2c>
		BT_ERR("Too short bearer open message (len %u)", buf->len);
   17a70:	4837      	ldr	r0, [pc, #220]	; (17b50 <gen_prov_ctl+0x100>)
   17a72:	2145      	movs	r1, #69	; 0x45
}
   17a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   17a78:	f00f bf2b 	b.w	278d2 <printk>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   17a7c:	4628      	mov	r0, r5
   17a7e:	f7ff fd2f 	bl	174e0 <atomic_test_bit.constprop.16>
   17a82:	b160      	cbz	r0, 17a9e <gen_prov_ctl+0x4e>
		if (link.id == rx->link_id) {
   17a84:	4b33      	ldr	r3, [pc, #204]	; (17b54 <gen_prov_ctl+0x104>)
   17a86:	681a      	ldr	r2, [r3, #0]
   17a88:	6823      	ldr	r3, [r4, #0]
   17a8a:	429a      	cmp	r2, r3
   17a8c:	d15c      	bne.n	17b48 <gen_prov_ctl+0xf8>
			bearer_ctl_send(LINK_ACK, NULL, 0, false);
   17a8e:	462b      	mov	r3, r5
   17a90:	462a      	mov	r2, r5
   17a92:	4629      	mov	r1, r5
   17a94:	2001      	movs	r0, #1
}
   17a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bearer_ctl_send(LINK_ACK, NULL, 0, false);
   17a9a:	f7ff bf8d 	b.w	179b8 <bearer_ctl_send>
	if (memcmp(buf->data, bt_mesh_prov_get()->uuid, 16)) {
   17a9e:	680d      	ldr	r5, [r1, #0]
   17aa0:	f7ff f880 	bl	16ba4 <bt_mesh_prov_get>
   17aa4:	2210      	movs	r2, #16
   17aa6:	6801      	ldr	r1, [r0, #0]
   17aa8:	4628      	mov	r0, r5
   17aaa:	f016 fbf0 	bl	2e28e <memcmp>
   17aae:	4603      	mov	r3, r0
   17ab0:	2800      	cmp	r0, #0
   17ab2:	d149      	bne.n	17b48 <gen_prov_ctl+0xf8>
	link.id = rx->link_id;
   17ab4:	6821      	ldr	r1, [r4, #0]
   17ab6:	4c27      	ldr	r4, [pc, #156]	; (17b54 <gen_prov_ctl+0x104>)
   17ab8:	4622      	mov	r2, r4
   17aba:	f842 1b04 	str.w	r1, [r2], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17abe:	f3bf 8f5b 	dmb	ish
   17ac2:	e852 1f00 	ldrex	r1, [r2]
   17ac6:	f041 0101 	orr.w	r1, r1, #1
   17aca:	e842 1000 	strex	r0, r1, [r2]
   17ace:	2800      	cmp	r0, #0
   17ad0:	d1f7      	bne.n	17ac2 <gen_prov_ctl+0x72>
   17ad2:	f3bf 8f5b 	dmb	ish
	net_buf_simple_reset(link.rx.buf);
   17ad6:	6962      	ldr	r2, [r4, #20]
	buf->data = buf->__buf;
   17ad8:	6891      	ldr	r1, [r2, #8]
   17ada:	6011      	str	r1, [r2, #0]
	buf->len  = 0U;
   17adc:	8093      	strh	r3, [r2, #4]
	bearer_ctl_send(LINK_ACK, NULL, 0, false);
   17ade:	4619      	mov	r1, r3
   17ae0:	461a      	mov	r2, r3
   17ae2:	2001      	movs	r0, #1
   17ae4:	f7ff ff68 	bl	179b8 <bearer_ctl_send>
		link.cb->link_opened(&pb_adv, link.cb_data);
   17ae8:	68a3      	ldr	r3, [r4, #8]
   17aea:	68e1      	ldr	r1, [r4, #12]
   17aec:	681b      	ldr	r3, [r3, #0]
   17aee:	481a      	ldr	r0, [pc, #104]	; (17b58 <gen_prov_ctl+0x108>)
}
   17af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		link.cb->link_opened(&pb_adv, link.cb_data);
   17af4:	4718      	bx	r3
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   17af6:	2000      	movs	r0, #0
   17af8:	f7ff fcf2 	bl	174e0 <atomic_test_bit.constprop.16>
   17afc:	b320      	cbz	r0, 17b48 <gen_prov_ctl+0xf8>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   17afe:	2005      	movs	r0, #5
   17b00:	f7ff fcee 	bl	174e0 <atomic_test_bit.constprop.16>
   17b04:	b300      	cbz	r0, 17b48 <gen_prov_ctl+0xf8>
   17b06:	f3bf 8f5b 	dmb	ish
   17b0a:	4c12      	ldr	r4, [pc, #72]	; (17b54 <gen_prov_ctl+0x104>)
   17b0c:	1d23      	adds	r3, r4, #4
   17b0e:	e853 2f00 	ldrex	r2, [r3]
   17b12:	f042 0102 	orr.w	r1, r2, #2
   17b16:	e843 1000 	strex	r0, r1, [r3]
   17b1a:	2800      	cmp	r0, #0
   17b1c:	d1f7      	bne.n	17b0e <gen_prov_ctl+0xbe>
   17b1e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACK_RECVD)) {
   17b22:	0793      	lsls	r3, r2, #30
   17b24:	d410      	bmi.n	17b48 <gen_prov_ctl+0xf8>
		prov_clear_tx();
   17b26:	f7ff fcbd 	bl	174a4 <prov_clear_tx>
   17b2a:	e7dd      	b.n	17ae8 <gen_prov_ctl+0x98>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   17b2c:	2000      	movs	r0, #0
   17b2e:	f7ff fcd7 	bl	174e0 <atomic_test_bit.constprop.16>
   17b32:	b148      	cbz	r0, 17b48 <gen_prov_ctl+0xf8>
	if (buf->len != 1) {
   17b34:	888b      	ldrh	r3, [r1, #4]
   17b36:	2b01      	cmp	r3, #1
   17b38:	d106      	bne.n	17b48 <gen_prov_ctl+0xf8>
	close_link(net_buf_simple_pull_u8(buf));
   17b3a:	4608      	mov	r0, r1
   17b3c:	f015 fcf8 	bl	2d530 <net_buf_simple_pull_u8>
}
   17b40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	close_link(net_buf_simple_pull_u8(buf));
   17b44:	f7ff bd32 	b.w	175ac <close_link>
}
   17b48:	bd70      	pop	{r4, r5, r6, pc}
   17b4a:	bf00      	nop
   17b4c:	000355df 	.word	0x000355df
   17b50:	000355b3 	.word	0x000355b3
   17b54:	20000be0 	.word	0x20000be0
   17b58:	0002fe6c 	.word	0x0002fe6c

00017b5c <prov_link_close>:

static void prov_link_close(enum prov_bearer_link_status status)
{
   17b5c:	b507      	push	{r0, r1, r2, lr}
   17b5e:	4b0d      	ldr	r3, [pc, #52]	; (17b94 <prov_link_close+0x38>)
   17b60:	f88d 0007 	strb.w	r0, [sp, #7]
   17b64:	f3bf 8f5b 	dmb	ish
   17b68:	e853 2f00 	ldrex	r2, [r3]
   17b6c:	f042 0104 	orr.w	r1, r2, #4
   17b70:	e843 1000 	strex	r0, r1, [r3]
   17b74:	2800      	cmp	r0, #0
   17b76:	d1f7      	bne.n	17b68 <prov_link_close+0xc>
   17b78:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_CLOSING)) {
   17b7c:	0753      	lsls	r3, r2, #29
   17b7e:	d406      	bmi.n	17b8e <prov_link_close+0x32>
		return;
	}

	bearer_ctl_send(LINK_CLOSE, &status, 1, true);
   17b80:	2301      	movs	r3, #1
   17b82:	461a      	mov	r2, r3
   17b84:	f10d 0107 	add.w	r1, sp, #7
   17b88:	2002      	movs	r0, #2
   17b8a:	f7ff ff15 	bl	179b8 <bearer_ctl_send>
}
   17b8e:	b003      	add	sp, #12
   17b90:	f85d fb04 	ldr.w	pc, [sp], #4
   17b94:	20000be4 	.word	0x20000be4

00017b98 <prov_link_open>:
{
   17b98:	b570      	push	{r4, r5, r6, lr}
   17b9a:	4606      	mov	r6, r0
	err = bt_mesh_adv_enable();
   17b9c:	f7fd fbd0 	bl	15340 <bt_mesh_adv_enable>
	if (err) {
   17ba0:	4604      	mov	r4, r0
   17ba2:	b128      	cbz	r0, 17bb0 <prov_link_open+0x18>
		BT_ERR("Failed enabling advertiser");
   17ba4:	2145      	movs	r1, #69	; 0x45
   17ba6:	481e      	ldr	r0, [pc, #120]	; (17c20 <prov_link_open+0x88>)
   17ba8:	f00f fe93 	bl	278d2 <printk>
}
   17bac:	4620      	mov	r0, r4
   17bae:	bd70      	pop	{r4, r5, r6, pc}
   17bb0:	4d1c      	ldr	r5, [pc, #112]	; (17c24 <prov_link_open+0x8c>)
   17bb2:	f3bf 8f5b 	dmb	ish
   17bb6:	1d2b      	adds	r3, r5, #4
   17bb8:	e853 4f00 	ldrex	r4, [r3]
   17bbc:	f044 0201 	orr.w	r2, r4, #1
   17bc0:	e843 2100 	strex	r1, r2, [r3]
   17bc4:	2900      	cmp	r1, #0
   17bc6:	d1f7      	bne.n	17bb8 <prov_link_open+0x20>
   17bc8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACTIVE)) {
   17bcc:	f014 0401 	ands.w	r4, r4, #1
   17bd0:	d123      	bne.n	17c1a <prov_link_open+0x82>
   17bd2:	f3bf 8f5b 	dmb	ish
   17bd6:	e853 2f00 	ldrex	r2, [r3]
   17bda:	f042 0220 	orr.w	r2, r2, #32
   17bde:	e843 2100 	strex	r1, r2, [r3]
   17be2:	2900      	cmp	r1, #0
   17be4:	d1f7      	bne.n	17bd6 <prov_link_open+0x3e>
   17be6:	f3bf 8f5b 	dmb	ish
	bt_rand(&link.id, sizeof(link.id));
   17bea:	2104      	movs	r1, #4
   17bec:	4628      	mov	r0, r5
   17bee:	f014 fe8b 	bl	2c908 <bt_rand>
	link.tx.id = XACT_ID_MAX;
   17bf2:	237f      	movs	r3, #127	; 0x7f
   17bf4:	f885 3020 	strb.w	r3, [r5, #32]
	link.rx.id = XACT_ID_NVAL;
   17bf8:	23ff      	movs	r3, #255	; 0xff
   17bfa:	742b      	strb	r3, [r5, #16]
	link.cb = cb;
   17bfc:	9b04      	ldr	r3, [sp, #16]
   17bfe:	60ab      	str	r3, [r5, #8]
	link.cb_data = cb_data;
   17c00:	9b05      	ldr	r3, [sp, #20]
   17c02:	60eb      	str	r3, [r5, #12]
	net_buf_simple_reset(link.rx.buf);
   17c04:	696b      	ldr	r3, [r5, #20]
	buf->data = buf->__buf;
   17c06:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   17c08:	809c      	strh	r4, [r3, #4]
	buf->data = buf->__buf;
   17c0a:	601a      	str	r2, [r3, #0]
	bearer_ctl_send(LINK_OPEN, uuid, 16, true);
   17c0c:	4631      	mov	r1, r6
   17c0e:	2301      	movs	r3, #1
   17c10:	2210      	movs	r2, #16
   17c12:	4620      	mov	r0, r4
   17c14:	f7ff fed0 	bl	179b8 <bearer_ctl_send>
	return 0;
   17c18:	e7c8      	b.n	17bac <prov_link_open+0x14>
		return -EBUSY;
   17c1a:	f06f 040f 	mvn.w	r4, #15
   17c1e:	e7c5      	b.n	17bac <prov_link_open+0x14>
   17c20:	00032851 	.word	0x00032851
   17c24:	20000be0 	.word	0x20000be0

00017c28 <prov_send_adv>:
{
   17c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17c2c:	4c4e      	ldr	r4, [pc, #312]	; (17d68 <prov_send_adv+0x140>)
   17c2e:	4605      	mov	r5, r0
   17c30:	4689      	mov	r9, r1
   17c32:	4690      	mov	r8, r2
	prov_clear_tx();
   17c34:	f7ff fc36 	bl	174a4 <prov_clear_tx>
   17c38:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   17c3c:	2300      	movs	r3, #0
   17c3e:	f104 0168 	add.w	r1, r4, #104	; 0x68
   17c42:	484a      	ldr	r0, [pc, #296]	; (17d6c <prov_send_adv+0x144>)
   17c44:	f00d fc28 	bl	25498 <k_delayed_work_submit_to_queue>
	start = adv_buf_create(RETRANSMITS_RELIABLE);
   17c48:	2000      	movs	r0, #0
   17c4a:	f7ff fc35 	bl	174b8 <adv_buf_create>
	if (!start) {
   17c4e:	4606      	mov	r6, r0
   17c50:	2800      	cmp	r0, #0
   17c52:	d061      	beq.n	17d18 <prov_send_adv+0xf0>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   17c54:	f994 2020 	ldrsb.w	r2, [r4, #32]
	net_buf_simple_add_be32(&buf->b, val);
   17c58:	6821      	ldr	r1, [r4, #0]
   17c5a:	1c53      	adds	r3, r2, #1
   17c5c:	f100 0708 	add.w	r7, r0, #8
   17c60:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   17c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17c68:	4313      	orrs	r3, r2
   17c6a:	4638      	mov	r0, r7
	link.tx.id = next_transaction_id(link.tx.id);
   17c6c:	f884 3020 	strb.w	r3, [r4, #32]
   17c70:	f015 fce3 	bl	2d63a <net_buf_simple_add_be32>
	net_buf_add_u8(start, link.tx.id);
   17c74:	f894 1020 	ldrb.w	r1, [r4, #32]
   17c78:	4630      	mov	r0, r6
   17c7a:	f014 fa18 	bl	2c0ae <net_buf_add_u8>
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   17c7e:	88ab      	ldrh	r3, [r5, #4]
	if (len <= START_PAYLOAD_MAX) {
   17c80:	b2da      	uxtb	r2, r3
   17c82:	2a14      	cmp	r2, #20
	len -= START_PAYLOAD_MAX;
   17c84:	bf81      	itttt	hi
   17c86:	f1a3 0114 	subhi.w	r1, r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   17c8a:	b2c9      	uxtbhi	r1, r1
   17c8c:	2317      	movhi	r3, #23
   17c8e:	fbb1 f1f3 	udivhi	r1, r1, r3
   17c92:	bf86      	itte	hi
   17c94:	3101      	addhi	r1, #1
   17c96:	b2c9      	uxtbhi	r1, r1
		return 0;
   17c98:	2100      	movls	r1, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   17c9a:	0089      	lsls	r1, r1, #2
   17c9c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   17ca0:	4630      	mov	r0, r6
   17ca2:	f014 fa04 	bl	2c0ae <net_buf_add_u8>
	net_buf_simple_add_be16(&buf->b, val);
   17ca6:	4638      	mov	r0, r7
   17ca8:	88a9      	ldrh	r1, [r5, #4]
   17caa:	f015 fca3 	bl	2d5f4 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
   17cae:	7929      	ldrb	r1, [r5, #4]
   17cb0:	6828      	ldr	r0, [r5, #0]
   17cb2:	f7fa fcb7 	bl	12624 <bt_mesh_fcs_calc>
   17cb6:	4601      	mov	r1, r0
   17cb8:	4630      	mov	r0, r6
   17cba:	f014 f9f8 	bl	2c0ae <net_buf_add_u8>
	link.tx.buf[0] = start;
   17cbe:	6266      	str	r6, [r4, #36]	; 0x24
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
   17cc0:	88ae      	ldrh	r6, [r5, #4]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17cc2:	6829      	ldr	r1, [r5, #0]
	net_buf_add_mem(start, msg->data, seg_len);
   17cc4:	2e14      	cmp	r6, #20
   17cc6:	bf28      	it	cs
   17cc8:	2614      	movcs	r6, #20
   17cca:	4632      	mov	r2, r6
   17ccc:	4638      	mov	r0, r7
	link.tx.cb_data = cb_data;
   17cce:	e9c4 980c 	strd	r9, r8, [r4, #48]	; 0x30
   17cd2:	f015 fc73 	bl	2d5bc <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
   17cd6:	4631      	mov	r1, r6
   17cd8:	4628      	mov	r0, r5
   17cda:	f008 f927 	bl	1ff2c <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   17cde:	f8df 9094 	ldr.w	r9, [pc, #148]	; 17d74 <prov_send_adv+0x14c>
   17ce2:	2700      	movs	r7, #0
   17ce4:	88ae      	ldrh	r6, [r5, #4]
   17ce6:	b91e      	cbnz	r6, 17cf0 <prov_send_adv+0xc8>
	send_reliable();
   17ce8:	f7ff fe3a 	bl	17960 <send_reliable>
	return 0;
   17cec:	4630      	mov	r0, r6
   17cee:	e009      	b.n	17d04 <prov_send_adv+0xdc>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
   17cf0:	2f08      	cmp	r7, #8
   17cf2:	d109      	bne.n	17d08 <prov_send_adv+0xe0>
			BT_ERR("Too big message");
   17cf4:	481e      	ldr	r0, [pc, #120]	; (17d70 <prov_send_adv+0x148>)
   17cf6:	2145      	movs	r1, #69	; 0x45
   17cf8:	f00f fdeb 	bl	278d2 <printk>
			free_segments();
   17cfc:	f7ff fbbc 	bl	17478 <free_segments>
			return -E2BIG;
   17d00:	f06f 0006 	mvn.w	r0, #6
}
   17d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create(RETRANSMITS_RELIABLE);
   17d08:	2000      	movs	r0, #0
   17d0a:	f7ff fbd5 	bl	174b8 <adv_buf_create>
		if (!buf) {
   17d0e:	3704      	adds	r7, #4
   17d10:	4606      	mov	r6, r0
   17d12:	b920      	cbnz	r0, 17d1e <prov_send_adv+0xf6>
			free_segments();
   17d14:	f7ff fbb0 	bl	17478 <free_segments>
		return -ENOBUFS;
   17d18:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17d1c:	e7f2      	b.n	17d04 <prov_send_adv+0xdc>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   17d1e:	f8b5 8004 	ldrh.w	r8, [r5, #4]
		link.tx.buf[seg_id] = buf;
   17d22:	f849 0b04 	str.w	r0, [r9], #4
	net_buf_simple_add_be32(&buf->b, val);
   17d26:	f100 0a08 	add.w	sl, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   17d2a:	f1b8 0f17 	cmp.w	r8, #23
   17d2e:	6821      	ldr	r1, [r4, #0]
   17d30:	4650      	mov	r0, sl
   17d32:	bf28      	it	cs
   17d34:	f04f 0817 	movcs.w	r8, #23
   17d38:	f015 fc7f 	bl	2d63a <net_buf_simple_add_be32>
		net_buf_add_u8(buf, link.tx.id);
   17d3c:	f894 1020 	ldrb.w	r1, [r4, #32]
   17d40:	4630      	mov	r0, r6
   17d42:	f014 f9b4 	bl	2c0ae <net_buf_add_u8>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
   17d46:	f047 0102 	orr.w	r1, r7, #2
   17d4a:	b2c9      	uxtb	r1, r1
   17d4c:	4630      	mov	r0, r6
   17d4e:	f014 f9ae 	bl	2c0ae <net_buf_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17d52:	6829      	ldr	r1, [r5, #0]
   17d54:	4642      	mov	r2, r8
   17d56:	4650      	mov	r0, sl
   17d58:	f015 fc30 	bl	2d5bc <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
   17d5c:	4641      	mov	r1, r8
   17d5e:	4628      	mov	r0, r5
   17d60:	f008 f8e4 	bl	1ff2c <net_buf_simple_pull>
   17d64:	e7be      	b.n	17ce4 <prov_send_adv+0xbc>
   17d66:	bf00      	nop
   17d68:	20000be0 	.word	0x20000be0
   17d6c:	20003028 	.word	0x20003028
   17d70:	00033ee8 	.word	0x00033ee8
   17d74:	20000c08 	.word	0x20000c08

00017d78 <gen_prov_start>:
{
   17d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (rx->xact_id == link.rx.id) {
   17d7c:	4b3f      	ldr	r3, [pc, #252]	; (17e7c <gen_prov_start+0x104>)
   17d7e:	7902      	ldrb	r2, [r0, #4]
{
   17d80:	460d      	mov	r5, r1
	if (rx->xact_id == link.rx.id) {
   17d82:	7c19      	ldrb	r1, [r3, #16]
   17d84:	428a      	cmp	r2, r1
{
   17d86:	4606      	mov	r6, r0
   17d88:	461c      	mov	r4, r3
	if (rx->xact_id == link.rx.id) {
   17d8a:	d10e      	bne.n	17daa <gen_prov_start+0x32>
		if (!link.rx.seg) {
   17d8c:	7c5b      	ldrb	r3, [r3, #17]
   17d8e:	b943      	cbnz	r3, 17da2 <gen_prov_start+0x2a>
	return atomic_test_bit(link.flags, ADV_ACK_PENDING);
   17d90:	2004      	movs	r0, #4
   17d92:	f7ff fba5 	bl	174e0 <atomic_test_bit.constprop.16>
			if (!ack_pending()) {
   17d96:	b930      	cbnz	r0, 17da6 <gen_prov_start+0x2e>
				gen_prov_ack_send(rx->xact_id);
   17d98:	7930      	ldrb	r0, [r6, #4]
}
   17d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				gen_prov_ack_send(rx->xact_id);
   17d9e:	f7ff bcd7 	b.w	17750 <gen_prov_ack_send>
		if (!(link.rx.seg & BIT(0))) {
   17da2:	07da      	lsls	r2, r3, #31
   17da4:	d410      	bmi.n	17dc8 <gen_prov_start+0x50>
}
   17da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   17daa:	b249      	sxtb	r1, r1
   17dac:	1c4b      	adds	r3, r1, #1
   17dae:	f003 007f 	and.w	r0, r3, #127	; 0x7f
   17db2:	f001 0380 	and.w	r3, r1, #128	; 0x80
   17db6:	4303      	orrs	r3, r0
	} else if (rx->xact_id != next_transaction_id(link.rx.id)) {
   17db8:	429a      	cmp	r2, r3
   17dba:	d005      	beq.n	17dc8 <gen_prov_start+0x50>
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
   17dbc:	2157      	movs	r1, #87	; 0x57
   17dbe:	4830      	ldr	r0, [pc, #192]	; (17e80 <gen_prov_start+0x108>)
}
   17dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
   17dc4:	f00f bd85 	b.w	278d2 <printk>
	net_buf_simple_reset(link.rx.buf);
   17dc8:	6967      	ldr	r7, [r4, #20]
	buf->len  = 0U;
   17dca:	2300      	movs	r3, #0
   17dcc:	80bb      	strh	r3, [r7, #4]
	buf->data = buf->__buf;
   17dce:	68bb      	ldr	r3, [r7, #8]
   17dd0:	603b      	str	r3, [r7, #0]
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
   17dd2:	4628      	mov	r0, r5
   17dd4:	f015 fbbc 	bl	2d550 <net_buf_simple_pull_be16>
   17dd8:	80b8      	strh	r0, [r7, #4]
	link.rx.id = rx->xact_id;
   17dda:	7933      	ldrb	r3, [r6, #4]
   17ddc:	7423      	strb	r3, [r4, #16]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   17dde:	4628      	mov	r0, r5
   17de0:	f015 fba6 	bl	2d530 <net_buf_simple_pull_u8>
	if (link.rx.buf->len < 1) {
   17de4:	6963      	ldr	r3, [r4, #20]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   17de6:	74e0      	strb	r0, [r4, #19]
	if (link.rx.buf->len < 1) {
   17de8:	889a      	ldrh	r2, [r3, #4]
   17dea:	b922      	cbnz	r2, 17df6 <gen_prov_start+0x7e>
		BT_ERR("Ignoring zero-length provisioning PDU");
   17dec:	4825      	ldr	r0, [pc, #148]	; (17e84 <gen_prov_start+0x10c>)
   17dee:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Too small total length for multi-segment PDU");
   17df0:	f00f fd6f 	bl	278d2 <printk>
		prov_failed(PROV_ERR_NVAL_FMT);
   17df4:	e006      	b.n	17e04 <gen_prov_start+0x8c>
	if (link.rx.buf->len > link.rx.buf->size) {
   17df6:	88db      	ldrh	r3, [r3, #6]
   17df8:	4293      	cmp	r3, r2
   17dfa:	d208      	bcs.n	17e0e <gen_prov_start+0x96>
		BT_ERR("Too large provisioning PDU (%u bytes)",
   17dfc:	4822      	ldr	r0, [pc, #136]	; (17e88 <gen_prov_start+0x110>)
   17dfe:	2145      	movs	r1, #69	; 0x45
   17e00:	f00f fd67 	bl	278d2 <printk>
		prov_failed(PROV_ERR_NVAL_FMT);
   17e04:	2002      	movs	r0, #2
}
   17e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
   17e0a:	f7ff bc87 	b.w	1771c <prov_failed>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20U) {
   17e0e:	7973      	ldrb	r3, [r6, #5]
   17e10:	089b      	lsrs	r3, r3, #2
   17e12:	d004      	beq.n	17e1e <gen_prov_start+0xa6>
   17e14:	2a14      	cmp	r2, #20
   17e16:	d802      	bhi.n	17e1e <gen_prov_start+0xa6>
		BT_ERR("Too small total length for multi-segment PDU");
   17e18:	2145      	movs	r1, #69	; 0x45
   17e1a:	481c      	ldr	r0, [pc, #112]	; (17e8c <gen_prov_start+0x114>)
   17e1c:	e7e8      	b.n	17df0 <gen_prov_start+0x78>
	prov_clear_tx();
   17e1e:	f7ff fb41 	bl	174a4 <prov_clear_tx>
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   17e22:	7972      	ldrb	r2, [r6, #5]
	if ((link.rx.seg & BIT(0)) &&
   17e24:	7c61      	ldrb	r1, [r4, #17]
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   17e26:	0892      	lsrs	r2, r2, #2
	if ((link.rx.seg & BIT(0)) &&
   17e28:	07cb      	lsls	r3, r1, #31
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   17e2a:	74a2      	strb	r2, [r4, #18]
	if ((link.rx.seg & BIT(0)) &&
   17e2c:	d50d      	bpl.n	17e4a <gen_prov_start+0xd2>
	    (find_msb_set((~link.rx.seg) & SEG_NVAL) - 1 > link.rx.last_seg)) {
   17e2e:	43cb      	mvns	r3, r1
	if (op == 0) {
   17e30:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   17e34:	d005      	beq.n	17e42 <gen_prov_start+0xca>
	return 32 - __builtin_clz(op);
   17e36:	fab3 f383 	clz	r3, r3
   17e3a:	f1c3 031f 	rsb	r3, r3, #31
	if ((link.rx.seg & BIT(0)) &&
   17e3e:	4293      	cmp	r3, r2
   17e40:	d906      	bls.n	17e50 <gen_prov_start+0xd8>
		BT_ERR("Invalid segment index %u", seg);
   17e42:	22ff      	movs	r2, #255	; 0xff
   17e44:	2145      	movs	r1, #69	; 0x45
   17e46:	4812      	ldr	r0, [pc, #72]	; (17e90 <gen_prov_start+0x118>)
   17e48:	e7da      	b.n	17e00 <gen_prov_start+0x88>
	uint8_t seg = SEG_NVAL;
   17e4a:	2900      	cmp	r1, #0
   17e4c:	bf08      	it	eq
   17e4e:	21ff      	moveq	r1, #255	; 0xff
	link.rx.seg = seg & ((1 << (START_LAST_SEG(rx->gpc) + 1)) - 1);
   17e50:	3201      	adds	r2, #1
   17e52:	2301      	movs	r3, #1
   17e54:	4093      	lsls	r3, r2
   17e56:	3b01      	subs	r3, #1
   17e58:	400b      	ands	r3, r1
   17e5a:	7463      	strb	r3, [r4, #17]
	memcpy(link.rx.buf->data, buf->data, buf->len);
   17e5c:	6963      	ldr	r3, [r4, #20]
   17e5e:	88aa      	ldrh	r2, [r5, #4]
   17e60:	6818      	ldr	r0, [r3, #0]
   17e62:	6829      	ldr	r1, [r5, #0]
   17e64:	f016 fa21 	bl	2e2aa <memcpy>
	XACT_SEG_RECV(0);
   17e68:	7c63      	ldrb	r3, [r4, #17]
   17e6a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   17e6e:	7463      	strb	r3, [r4, #17]
	if (!link.rx.seg) {
   17e70:	2b00      	cmp	r3, #0
   17e72:	d198      	bne.n	17da6 <gen_prov_start+0x2e>
}
   17e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   17e78:	f7ff bcb8 	b.w	177ec <prov_msg_recv>
   17e7c:	20000be0 	.word	0x20000be0
   17e80:	00035602 	.word	0x00035602
   17e84:	0003562b 	.word	0x0003562b
   17e88:	00035656 	.word	0x00035656
   17e8c:	00035681 	.word	0x00035681
   17e90:	0003556f 	.word	0x0003556f

00017e94 <bt_mesh_pb_adv_recv>:
{
   17e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!link.cb) {
   17e96:	4d22      	ldr	r5, [pc, #136]	; (17f20 <bt_mesh_pb_adv_recv+0x8c>)
   17e98:	68ab      	ldr	r3, [r5, #8]
{
   17e9a:	4604      	mov	r4, r0
	if (!link.cb) {
   17e9c:	b133      	cbz	r3, 17eac <bt_mesh_pb_adv_recv+0x18>
	if (buf->len < 6) {
   17e9e:	8882      	ldrh	r2, [r0, #4]
   17ea0:	2a05      	cmp	r2, #5
   17ea2:	d805      	bhi.n	17eb0 <bt_mesh_pb_adv_recv+0x1c>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   17ea4:	481f      	ldr	r0, [pc, #124]	; (17f24 <bt_mesh_pb_adv_recv+0x90>)
   17ea6:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   17ea8:	f00f fd13 	bl	278d2 <printk>
}
   17eac:	b003      	add	sp, #12
   17eae:	bd30      	pop	{r4, r5, pc}
	rx.link_id = net_buf_simple_pull_be32(buf);
   17eb0:	f015 fb6f 	bl	2d592 <net_buf_simple_pull_be32>
   17eb4:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
   17eb6:	4620      	mov	r0, r4
   17eb8:	f015 fb3a 	bl	2d530 <net_buf_simple_pull_u8>
   17ebc:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
   17ec0:	4620      	mov	r0, r4
   17ec2:	f015 fb35 	bl	2d530 <net_buf_simple_pull_u8>
   17ec6:	f88d 0005 	strb.w	r0, [sp, #5]
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE) && link.id != rx.link_id) {
   17eca:	2000      	movs	r0, #0
   17ecc:	f7ff fb08 	bl	174e0 <atomic_test_bit.constprop.16>
   17ed0:	b118      	cbz	r0, 17eda <bt_mesh_pb_adv_recv+0x46>
   17ed2:	682a      	ldr	r2, [r5, #0]
   17ed4:	9b00      	ldr	r3, [sp, #0]
   17ed6:	429a      	cmp	r2, r3
   17ed8:	d1e8      	bne.n	17eac <bt_mesh_pb_adv_recv+0x18>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
   17eda:	f89d 2005 	ldrb.w	r2, [sp, #5]
   17ede:	4912      	ldr	r1, [pc, #72]	; (17f28 <bt_mesh_pb_adv_recv+0x94>)
   17ee0:	88a0      	ldrh	r0, [r4, #4]
   17ee2:	f002 0203 	and.w	r2, r2, #3
   17ee6:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   17eea:	795b      	ldrb	r3, [r3, #5]
   17eec:	4298      	cmp	r0, r3
   17eee:	d202      	bcs.n	17ef6 <bt_mesh_pb_adv_recv+0x62>
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   17ef0:	2145      	movs	r1, #69	; 0x45
   17ef2:	480e      	ldr	r0, [pc, #56]	; (17f2c <bt_mesh_pb_adv_recv+0x98>)
   17ef4:	e7d8      	b.n	17ea8 <bt_mesh_pb_adv_recv+0x14>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   17ef6:	2000      	movs	r0, #0
   17ef8:	f7ff faf2 	bl	174e0 <atomic_test_bit.constprop.16>
   17efc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   17f00:	b930      	cbnz	r0, 17f10 <bt_mesh_pb_adv_recv+0x7c>
	    gen_prov[GPCF(rx->gpc)].require_link) {
   17f02:	f003 0203 	and.w	r2, r3, #3
   17f06:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   17f0a:	7912      	ldrb	r2, [r2, #4]
   17f0c:	2a00      	cmp	r2, #0
   17f0e:	d1cd      	bne.n	17eac <bt_mesh_pb_adv_recv+0x18>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
   17f10:	f003 0303 	and.w	r3, r3, #3
   17f14:	4668      	mov	r0, sp
   17f16:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   17f1a:	4621      	mov	r1, r4
   17f1c:	4798      	blx	r3
   17f1e:	e7c5      	b.n	17eac <bt_mesh_pb_adv_recv+0x18>
   17f20:	20000be0 	.word	0x20000be0
   17f24:	000354ef 	.word	0x000354ef
   17f28:	0002fe4c 	.word	0x0002fe4c
   17f2c:	0003551b 	.word	0x0003551b

00017f30 <pb_adv_init>:

void pb_adv_init(void)
{
   17f30:	b538      	push	{r3, r4, r5, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   17f32:	4c09      	ldr	r4, [pc, #36]	; (17f58 <pb_adv_init+0x28>)
   17f34:	2530      	movs	r5, #48	; 0x30
   17f36:	462a      	mov	r2, r5
   17f38:	2100      	movs	r1, #0
   17f3a:	f104 0068 	add.w	r0, r4, #104	; 0x68
   17f3e:	f016 f9ef 	bl	2e320 <memset>
   17f42:	4b06      	ldr	r3, [pc, #24]	; (17f5c <pb_adv_init+0x2c>)
   17f44:	66e3      	str	r3, [r4, #108]	; 0x6c
   17f46:	462a      	mov	r2, r5
   17f48:	2100      	movs	r1, #0
   17f4a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17f4e:	f016 f9e7 	bl	2e320 <memset>
   17f52:	4b03      	ldr	r3, [pc, #12]	; (17f60 <pb_adv_init+0x30>)
   17f54:	63e3      	str	r3, [r4, #60]	; 0x3c
	k_delayed_work_init(&link.prot_timer, protocol_timeout);
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
}
   17f56:	bd38      	pop	{r3, r4, r5, pc}
   17f58:	20000be0 	.word	0x20000be0
   17f5c:	00017699 	.word	0x00017699
   17f60:	000175d1 	.word	0x000175d1

00017f64 <reset_state>:
};

static struct prov_link link;

static void reset_state(void)
{
   17f64:	b510      	push	{r4, lr}
	if (link.conn) {
   17f66:	4c07      	ldr	r4, [pc, #28]	; (17f84 <reset_state+0x20>)
   17f68:	6820      	ldr	r0, [r4, #0]
   17f6a:	b118      	cbz	r0, 17f74 <reset_state+0x10>
		bt_conn_unref(link.conn);
   17f6c:	f7f3 f9b6 	bl	b2dc <bt_conn_unref>
		link.conn = NULL;
   17f70:	2300      	movs	r3, #0
   17f72:	6023      	str	r3, [r4, #0]
	}

	k_delayed_work_cancel(&link.prot_timer);
   17f74:	4804      	ldr	r0, [pc, #16]	; (17f88 <reset_state+0x24>)
   17f76:	f00d faff 	bl	25578 <k_delayed_work_cancel>

	link.rx_buf = bt_mesh_proxy_get_buf();
   17f7a:	f000 fbfb 	bl	18774 <bt_mesh_proxy_get_buf>
   17f7e:	60e0      	str	r0, [r4, #12]
}
   17f80:	bd10      	pop	{r4, pc}
   17f82:	bf00      	nop
   17f84:	20002da8 	.word	0x20002da8
   17f88:	20002db8 	.word	0x20002db8

00017f8c <link_closed>:

static void link_closed(enum prov_bearer_link_status status)
{
   17f8c:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
   17f8e:	4b06      	ldr	r3, [pc, #24]	; (17fa8 <link_closed+0x1c>)
	void *cb_data = link.cb_data;
   17f90:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
{
   17f94:	4605      	mov	r5, r0

	reset_state();
   17f96:	f7ff ffe5 	bl	17f64 <reset_state>

	cb->link_closed(&pb_gatt, cb_data, status);
   17f9a:	6873      	ldr	r3, [r6, #4]
   17f9c:	4803      	ldr	r0, [pc, #12]	; (17fac <link_closed+0x20>)
   17f9e:	462a      	mov	r2, r5
   17fa0:	4621      	mov	r1, r4
}
   17fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_gatt, cb_data, status);
   17fa6:	4718      	bx	r3
   17fa8:	20002da8 	.word	0x20002da8
   17fac:	0002fe84 	.word	0x0002fe84

00017fb0 <link_accept>:

	return 0;
}

static int link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   17fb0:	b538      	push	{r3, r4, r5, lr}
   17fb2:	460c      	mov	r4, r1
   17fb4:	4605      	mov	r5, r0
	bt_mesh_proxy_prov_enable();
   17fb6:	f000 fbe7 	bl	18788 <bt_mesh_proxy_prov_enable>
	bt_mesh_adv_update();
   17fba:	f7fd f993 	bl	152e4 <bt_mesh_adv_update>

	link.cb = cb;
   17fbe:	4b02      	ldr	r3, [pc, #8]	; (17fc8 <link_accept+0x18>)
	link.cb_data = cb_data;

	return 0;
}
   17fc0:	2000      	movs	r0, #0
	link.cb_data = cb_data;
   17fc2:	e9c3 5401 	strd	r5, r4, [r3, #4]
}
   17fc6:	bd38      	pop	{r3, r4, r5, pc}
   17fc8:	20002da8 	.word	0x20002da8

00017fcc <buf_send>:

static int buf_send(struct net_buf_simple *buf, prov_bearer_send_complete_t cb,
		    void *cb_data)
{
   17fcc:	b538      	push	{r3, r4, r5, lr}
	if (!link.conn) {
   17fce:	4c0b      	ldr	r4, [pc, #44]	; (17ffc <buf_send+0x30>)
   17fd0:	6823      	ldr	r3, [r4, #0]
{
   17fd2:	4605      	mov	r5, r0
	if (!link.conn) {
   17fd4:	b173      	cbz	r3, 17ff4 <buf_send+0x28>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   17fd6:	f104 0110 	add.w	r1, r4, #16
   17fda:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   17fde:	2300      	movs	r3, #0
   17fe0:	4807      	ldr	r0, [pc, #28]	; (18000 <buf_send+0x34>)
   17fe2:	f00d fa59 	bl	25498 <k_delayed_work_submit_to_queue>
		return -ENOTCONN;
	}

	k_delayed_work_submit(&link.prot_timer, PROTOCOL_TIMEOUT);

	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, buf);
   17fe6:	462a      	mov	r2, r5
   17fe8:	6820      	ldr	r0, [r4, #0]
   17fea:	2103      	movs	r1, #3
}
   17fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, buf);
   17ff0:	f000 bc80 	b.w	188f4 <bt_mesh_proxy_send>
}
   17ff4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17ff8:	bd38      	pop	{r3, r4, r5, pc}
   17ffa:	bf00      	nop
   17ffc:	20002da8 	.word	0x20002da8
   18000:	20003028 	.word	0x20003028

00018004 <bt_mesh_pb_gatt_recv>:
{
   18004:	b538      	push	{r3, r4, r5, lr}
	if (link.conn != conn || !link.cb) {
   18006:	4c13      	ldr	r4, [pc, #76]	; (18054 <bt_mesh_pb_gatt_recv+0x50>)
   18008:	6823      	ldr	r3, [r4, #0]
   1800a:	4283      	cmp	r3, r0
{
   1800c:	460d      	mov	r5, r1
	if (link.conn != conn || !link.cb) {
   1800e:	d101      	bne.n	18014 <bt_mesh_pb_gatt_recv+0x10>
   18010:	6863      	ldr	r3, [r4, #4]
   18012:	b933      	cbnz	r3, 18022 <bt_mesh_pb_gatt_recv+0x1e>
		BT_WARN("Data for unexpected connection");
   18014:	4810      	ldr	r0, [pc, #64]	; (18058 <bt_mesh_pb_gatt_recv+0x54>)
   18016:	2157      	movs	r1, #87	; 0x57
   18018:	f00f fc5b 	bl	278d2 <printk>
		return -ENOTCONN;
   1801c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   18020:	bd38      	pop	{r3, r4, r5, pc}
	if (buf->len < 1) {
   18022:	888a      	ldrh	r2, [r1, #4]
   18024:	b932      	cbnz	r2, 18034 <bt_mesh_pb_gatt_recv+0x30>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   18026:	480d      	ldr	r0, [pc, #52]	; (1805c <bt_mesh_pb_gatt_recv+0x58>)
   18028:	2157      	movs	r1, #87	; 0x57
   1802a:	f00f fc52 	bl	278d2 <printk>
		return -EINVAL;
   1802e:	f06f 0015 	mvn.w	r0, #21
   18032:	e7f5      	b.n	18020 <bt_mesh_pb_gatt_recv+0x1c>
   18034:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   18038:	2300      	movs	r3, #0
   1803a:	f104 0110 	add.w	r1, r4, #16
   1803e:	4808      	ldr	r0, [pc, #32]	; (18060 <bt_mesh_pb_gatt_recv+0x5c>)
   18040:	f00d fa2a 	bl	25498 <k_delayed_work_submit_to_queue>
	link.cb->recv(&pb_gatt, link.cb_data, buf);
   18044:	6863      	ldr	r3, [r4, #4]
   18046:	4807      	ldr	r0, [pc, #28]	; (18064 <bt_mesh_pb_gatt_recv+0x60>)
   18048:	68db      	ldr	r3, [r3, #12]
   1804a:	68a1      	ldr	r1, [r4, #8]
   1804c:	462a      	mov	r2, r5
   1804e:	4798      	blx	r3
	return 0;
   18050:	2000      	movs	r0, #0
   18052:	e7e5      	b.n	18020 <bt_mesh_pb_gatt_recv+0x1c>
   18054:	20002da8 	.word	0x20002da8
   18058:	00035734 	.word	0x00035734
   1805c:	000354ef 	.word	0x000354ef
   18060:	20003028 	.word	0x20003028
   18064:	0002fe84 	.word	0x0002fe84

00018068 <bt_mesh_pb_gatt_open>:
{
   18068:	b538      	push	{r3, r4, r5, lr}
	if (link.conn) {
   1806a:	4d0c      	ldr	r5, [pc, #48]	; (1809c <bt_mesh_pb_gatt_open+0x34>)
   1806c:	682c      	ldr	r4, [r5, #0]
   1806e:	b98c      	cbnz	r4, 18094 <bt_mesh_pb_gatt_open+0x2c>
	link.conn = bt_conn_ref(conn);
   18070:	f012 f818 	bl	2a0a4 <bt_conn_ref>
   18074:	4629      	mov	r1, r5
   18076:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1807a:	f841 0b10 	str.w	r0, [r1], #16
   1807e:	2300      	movs	r3, #0
   18080:	4807      	ldr	r0, [pc, #28]	; (180a0 <bt_mesh_pb_gatt_open+0x38>)
   18082:	f00d fa09 	bl	25498 <k_delayed_work_submit_to_queue>
	link.cb->link_opened(&pb_gatt, link.cb_data);
   18086:	686b      	ldr	r3, [r5, #4]
   18088:	4806      	ldr	r0, [pc, #24]	; (180a4 <bt_mesh_pb_gatt_open+0x3c>)
   1808a:	681b      	ldr	r3, [r3, #0]
   1808c:	68a9      	ldr	r1, [r5, #8]
   1808e:	4798      	blx	r3
	return 0;
   18090:	4620      	mov	r0, r4
}
   18092:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   18094:	f06f 000f 	mvn.w	r0, #15
   18098:	e7fb      	b.n	18092 <bt_mesh_pb_gatt_open+0x2a>
   1809a:	bf00      	nop
   1809c:	20002da8 	.word	0x20002da8
   180a0:	20003028 	.word	0x20003028
   180a4:	0002fe84 	.word	0x0002fe84

000180a8 <bt_mesh_pb_gatt_close>:
{
   180a8:	b508      	push	{r3, lr}
	if (link.conn != conn) {
   180aa:	4b06      	ldr	r3, [pc, #24]	; (180c4 <bt_mesh_pb_gatt_close+0x1c>)
   180ac:	681b      	ldr	r3, [r3, #0]
   180ae:	4283      	cmp	r3, r0
   180b0:	d104      	bne.n	180bc <bt_mesh_pb_gatt_close+0x14>
	link_closed(PROV_BEARER_LINK_STATUS_SUCCESS);
   180b2:	2000      	movs	r0, #0
   180b4:	f7ff ff6a 	bl	17f8c <link_closed>
	return 0;
   180b8:	2000      	movs	r0, #0
}
   180ba:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
   180bc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   180c0:	e7fb      	b.n	180ba <bt_mesh_pb_gatt_close+0x12>
   180c2:	bf00      	nop
   180c4:	20002da8 	.word	0x20002da8

000180c8 <pb_gatt_init>:
{
	/* No action */
}

void pb_gatt_init(void)
{
   180c8:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   180ca:	4c05      	ldr	r4, [pc, #20]	; (180e0 <pb_gatt_init+0x18>)
   180cc:	2230      	movs	r2, #48	; 0x30
   180ce:	2100      	movs	r1, #0
   180d0:	f104 0010 	add.w	r0, r4, #16
   180d4:	f016 f924 	bl	2e320 <memset>
   180d8:	4b02      	ldr	r3, [pc, #8]	; (180e4 <pb_gatt_init+0x1c>)
   180da:	6163      	str	r3, [r4, #20]
	k_delayed_work_init(&link.prot_timer, protocol_timeout);
}
   180dc:	bd10      	pop	{r4, pc}
   180de:	bf00      	nop
   180e0:	20002da8 	.word	0x20002da8
   180e4:	0002c0bb 	.word	0x0002c0bb

000180e8 <find_client>:
static struct bt_mesh_proxy_client *find_client(struct bt_conn *conn)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		if (clients[i].conn == conn) {
   180e8:	4a0a      	ldr	r2, [pc, #40]	; (18114 <find_client+0x2c>)
   180ea:	6813      	ldr	r3, [r2, #0]
   180ec:	4298      	cmp	r0, r3
   180ee:	d00b      	beq.n	18108 <find_client+0x20>
   180f0:	6d93      	ldr	r3, [r2, #88]	; 0x58
   180f2:	4298      	cmp	r0, r3
   180f4:	d00a      	beq.n	1810c <find_client+0x24>
   180f6:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   180fa:	4298      	cmp	r0, r3
   180fc:	d108      	bne.n	18110 <find_client+0x28>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   180fe:	2302      	movs	r3, #2
			return &clients[i];
   18100:	2058      	movs	r0, #88	; 0x58
   18102:	fb00 2003 	mla	r0, r0, r3, r2
   18106:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   18108:	2300      	movs	r3, #0
   1810a:	e7f9      	b.n	18100 <find_client+0x18>
   1810c:	2301      	movs	r3, #1
   1810e:	e7f7      	b.n	18100 <find_client+0x18>
		}
	}

	return NULL;
   18110:	2000      	movs	r0, #0
}
   18112:	4770      	bx	lr
   18114:	20000c78 	.word	0x20000c78

00018118 <proxy_send_beacons>:
{
	struct bt_mesh_proxy_client *client;

	client = CONTAINER_OF(work, struct bt_mesh_proxy_client, send_beacons);

	(void)bt_mesh_subnet_find(send_beacon_cb, client);
   18118:	f1a0 010c 	sub.w	r1, r0, #12
   1811c:	4801      	ldr	r0, [pc, #4]	; (18124 <proxy_send_beacons+0xc>)
   1811e:	f7f7 bff3 	b.w	10108 <bt_mesh_subnet_find>
   18122:	bf00      	nop
   18124:	0002c1dd 	.word	0x0002c1dd

00018128 <proxy_sar_timeout>:
{
   18128:	b510      	push	{r4, lr}
   1812a:	4604      	mov	r4, r0
	BT_WARN("Proxy SAR timeout");
   1812c:	2157      	movs	r1, #87	; 0x57
   1812e:	4806      	ldr	r0, [pc, #24]	; (18148 <proxy_sar_timeout+0x20>)
   18130:	f00f fbcf 	bl	278d2 <printk>
	if (client->conn) {
   18134:	f854 0c18 	ldr.w	r0, [r4, #-24]
   18138:	b120      	cbz	r0, 18144 <proxy_sar_timeout+0x1c>
		bt_conn_disconnect(client->conn,
   1813a:	2113      	movs	r1, #19
}
   1813c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(client->conn,
   18140:	f7f3 ba46 	b.w	b5d0 <bt_conn_disconnect>
}
   18144:	bd10      	pop	{r4, pc}
   18146:	bf00      	nop
   18148:	00035b2c 	.word	0x00035b2c

0001814c <proxy_disconnected>:
{
	int i;

	BT_DBG("conn %p reason 0x%02x", conn, reason);

	conn_count--;
   1814c:	4a15      	ldr	r2, [pc, #84]	; (181a4 <proxy_disconnected+0x58>)
   1814e:	6813      	ldr	r3, [r2, #0]
{
   18150:	b570      	push	{r4, r5, r6, lr}

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		if (client->conn == conn) {
   18152:	4c15      	ldr	r4, [pc, #84]	; (181a8 <proxy_disconnected+0x5c>)
	conn_count--;
   18154:	3b01      	subs	r3, #1
   18156:	6013      	str	r3, [r2, #0]
		if (client->conn == conn) {
   18158:	6823      	ldr	r3, [r4, #0]
   1815a:	4298      	cmp	r0, r3
   1815c:	d01e      	beq.n	1819c <proxy_disconnected+0x50>
   1815e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   18160:	4298      	cmp	r0, r3
   18162:	d01d      	beq.n	181a0 <proxy_disconnected+0x54>
   18164:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   18168:	4298      	cmp	r0, r3
   1816a:	d113      	bne.n	18194 <proxy_disconnected+0x48>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   1816c:	2602      	movs	r6, #2
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
			    client->filter_type == PROV) {
   1816e:	2558      	movs	r5, #88	; 0x58
   18170:	fb05 4306 	mla	r3, r5, r6, r4
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   18174:	7a9b      	ldrb	r3, [r3, #10]
   18176:	2b03      	cmp	r3, #3
   18178:	d101      	bne.n	1817e <proxy_disconnected+0x32>
				bt_mesh_pb_gatt_close(conn);
   1817a:	f7ff ff95 	bl	180a8 <bt_mesh_pb_gatt_close>
			}

			k_delayed_work_cancel(&client->sar_timer);
   1817e:	4375      	muls	r5, r6
   18180:	f105 0018 	add.w	r0, r5, #24
   18184:	4420      	add	r0, r4
   18186:	f00d f9f7 	bl	25578 <k_delayed_work_cancel>
			bt_conn_unref(client->conn);
   1818a:	5960      	ldr	r0, [r4, r5]
   1818c:	f7f3 f8a6 	bl	b2dc <bt_conn_unref>
			client->conn = NULL;
   18190:	2300      	movs	r3, #0
   18192:	5163      	str	r3, [r4, r5]
			break;
		}
	}

	bt_mesh_adv_update();
}
   18194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_mesh_adv_update();
   18198:	f7fd b8a4 	b.w	152e4 <bt_mesh_adv_update>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   1819c:	2600      	movs	r6, #0
   1819e:	e7e6      	b.n	1816e <proxy_disconnected+0x22>
   181a0:	2601      	movs	r6, #1
   181a2:	e7e4      	b.n	1816e <proxy_disconnected+0x22>
   181a4:	20004024 	.word	0x20004024
   181a8:	20000c78 	.word	0x20000c78

000181ac <prov_ccc_write>:
{
	struct bt_mesh_proxy_client *client;

	BT_DBG("value 0x%04x", value);

	if (value != BT_GATT_CCC_NOTIFY) {
   181ac:	2a01      	cmp	r2, #1
{
   181ae:	b538      	push	{r3, r4, r5, lr}
   181b0:	4605      	mov	r5, r0
	if (value != BT_GATT_CCC_NOTIFY) {
   181b2:	d006      	beq.n	181c2 <prov_ccc_write+0x16>
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
   181b4:	480f      	ldr	r0, [pc, #60]	; (181f4 <prov_ccc_write+0x48>)
   181b6:	2157      	movs	r1, #87	; 0x57
   181b8:	f00f fb8b 	bl	278d2 <printk>
   181bc:	f06f 0012 	mvn.w	r0, #18
		client->filter_type = PROV;
		bt_mesh_pb_gatt_open(conn);
	}

	return sizeof(value);
}
   181c0:	bd38      	pop	{r3, r4, r5, pc}
	client = find_client(conn);
   181c2:	f7ff ff91 	bl	180e8 <find_client>
	__ASSERT(client, "No client for connection");
   181c6:	4604      	mov	r4, r0
   181c8:	b950      	cbnz	r0, 181e0 <prov_ccc_write+0x34>
   181ca:	490b      	ldr	r1, [pc, #44]	; (181f8 <prov_ccc_write+0x4c>)
   181cc:	480b      	ldr	r0, [pc, #44]	; (181fc <prov_ccc_write+0x50>)
   181ce:	f240 226e 	movw	r2, #622	; 0x26e
   181d2:	f00f fb7e 	bl	278d2 <printk>
   181d6:	f240 216e 	movw	r1, #622	; 0x26e
   181da:	4807      	ldr	r0, [pc, #28]	; (181f8 <prov_ccc_write+0x4c>)
   181dc:	f00f fdf2 	bl	27dc4 <assert_post_action>
	if (client->filter_type == NONE) {
   181e0:	7aa3      	ldrb	r3, [r4, #10]
   181e2:	b923      	cbnz	r3, 181ee <prov_ccc_write+0x42>
		client->filter_type = PROV;
   181e4:	2303      	movs	r3, #3
   181e6:	72a3      	strb	r3, [r4, #10]
		bt_mesh_pb_gatt_open(conn);
   181e8:	4628      	mov	r0, r5
   181ea:	f7ff ff3d 	bl	18068 <bt_mesh_pb_gatt_open>
	return sizeof(value);
   181ee:	2002      	movs	r0, #2
   181f0:	e7e6      	b.n	181c0 <prov_ccc_write+0x14>
   181f2:	bf00      	nop
   181f4:	00035859 	.word	0x00035859
   181f8:	0003588a 	.word	0x0003588a
   181fc:	0003067f 	.word	0x0003067f

00018200 <proxy_connected>:
	conn_count++;
   18200:	4a16      	ldr	r2, [pc, #88]	; (1825c <proxy_connected+0x5c>)
{
   18202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn_count++;
   18204:	6813      	ldr	r3, [r2, #0]
   18206:	3301      	adds	r3, #1
	if (conn_count < CONFIG_BT_MAX_CONN) {
   18208:	2b02      	cmp	r3, #2
{
   1820a:	4607      	mov	r7, r0
	conn_count++;
   1820c:	6013      	str	r3, [r2, #0]
	if (conn_count < CONFIG_BT_MAX_CONN) {
   1820e:	dc01      	bgt.n	18214 <proxy_connected+0x14>
		bt_mesh_adv_update();
   18210:	f7fd f868 	bl	152e4 <bt_mesh_adv_update>
		if (!clients[i].conn) {
   18214:	4c12      	ldr	r4, [pc, #72]	; (18260 <proxy_connected+0x60>)
   18216:	6823      	ldr	r3, [r4, #0]
   18218:	b12b      	cbz	r3, 18226 <proxy_connected+0x26>
   1821a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1821c:	b1ab      	cbz	r3, 1824a <proxy_connected+0x4a>
   1821e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   18222:	b9a3      	cbnz	r3, 1824e <proxy_connected+0x4e>
	for (client = NULL, i = 0; i < ARRAY_SIZE(clients); i++) {
   18224:	2302      	movs	r3, #2
			client = &clients[i];
   18226:	2558      	movs	r5, #88	; 0x58
	client->conn = bt_conn_ref(conn);
   18228:	4638      	mov	r0, r7
   1822a:	435d      	muls	r5, r3
   1822c:	f011 ff3a 	bl	2a0a4 <bt_conn_ref>
			client = &clients[i];
   18230:	1966      	adds	r6, r4, r5
	client->conn = bt_conn_ref(conn);
   18232:	5160      	str	r0, [r4, r5]
	(void)memset(client->filter, 0, sizeof(client->filter));
   18234:	3504      	adds	r5, #4
	client->filter_type = NONE;
   18236:	2300      	movs	r3, #0
	(void)memset(client->filter, 0, sizeof(client->filter));
   18238:	1962      	adds	r2, r4, r5
	client->filter_type = NONE;
   1823a:	72b3      	strb	r3, [r6, #10]
__ssp_bos_icheck3(memset, void *, int)
   1823c:	5163      	str	r3, [r4, r5]
   1823e:	8093      	strh	r3, [r2, #4]
	buf->len  = 0U;
   18240:	f8a6 304c 	strh.w	r3, [r6, #76]	; 0x4c
	buf->data = buf->__buf;
   18244:	6d33      	ldr	r3, [r6, #80]	; 0x50
   18246:	64b3      	str	r3, [r6, #72]	; 0x48
}
   18248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (client = NULL, i = 0; i < ARRAY_SIZE(clients); i++) {
   1824a:	2301      	movs	r3, #1
   1824c:	e7eb      	b.n	18226 <proxy_connected+0x26>
		BT_ERR("No free Proxy Client objects");
   1824e:	2145      	movs	r1, #69	; 0x45
   18250:	4804      	ldr	r0, [pc, #16]	; (18264 <proxy_connected+0x64>)
}
   18252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("No free Proxy Client objects");
   18256:	f00f bb3c 	b.w	278d2 <printk>
   1825a:	bf00      	nop
   1825c:	20004024 	.word	0x20004024
   18260:	20000c78 	.word	0x20000c78
   18264:	000359a8 	.word	0x000359a8

00018268 <notify_complete>:
}

#endif /* CONFIG_BT_MESH_GATT_PROXY */

static void notify_complete(struct bt_conn *conn, void *user_data)
{
   18268:	b510      	push	{r4, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1826a:	4b0d      	ldr	r3, [pc, #52]	; (182a0 <notify_complete+0x38>)
   1826c:	f3bf 8f5b 	dmb	ish
   18270:	e853 2f00 	ldrex	r2, [r3]
   18274:	1e51      	subs	r1, r2, #1
   18276:	e843 1000 	strex	r0, r1, [r3]
   1827a:	2800      	cmp	r0, #0
   1827c:	d1f8      	bne.n	18270 <notify_complete+0x8>
   1827e:	f3bf 8f5b 	dmb	ish
	sys_snode_t *n;

	if (atomic_dec(&pending_notifications) > 1) {
   18282:	2a01      	cmp	r2, #1
   18284:	dc0b      	bgt.n	1829e <notify_complete+0x36>
Z_GENLIST_IS_EMPTY(slist)
   18286:	4c07      	ldr	r4, [pc, #28]	; (182a4 <notify_complete+0x3c>)
   18288:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1828a:	b143      	cbz	r3, 1829e <notify_complete+0x36>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1828c:	6861      	ldr	r1, [r4, #4]
   1828e:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   18290:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18292:	428b      	cmp	r3, r1
	list->tail = node;
   18294:	bf08      	it	eq
   18296:	6062      	streq	r2, [r4, #4]
	}

	BT_DBG("");

	while ((n = sys_slist_get(&idle_waiters))) {
		CONTAINER_OF(n, struct bt_mesh_proxy_idle_cb, n)->cb();
   18298:	685b      	ldr	r3, [r3, #4]
   1829a:	4798      	blx	r3
   1829c:	e7f4      	b.n	18288 <notify_complete+0x20>
	}
}
   1829e:	bd10      	pop	{r4, pc}
   182a0:	20004030 	.word	0x20004030
   182a4:	20004028 	.word	0x20004028

000182a8 <proxy_send>:

static int proxy_send(struct bt_conn *conn, const void *data,
		      uint16_t len)
{
   182a8:	b570      	push	{r4, r5, r6, lr}
   182aa:	b086      	sub	sp, #24
   182ac:	460e      	mov	r6, r1
   182ae:	4615      	mov	r5, r2
   182b0:	4604      	mov	r4, r0
	struct bt_gatt_notify_params params = {
   182b2:	2218      	movs	r2, #24
   182b4:	2100      	movs	r1, #0
   182b6:	4668      	mov	r0, sp
   182b8:	f016 f832 	bl	2e320 <memset>
   182bc:	4b12      	ldr	r3, [pc, #72]	; (18308 <proxy_send+0x60>)
   182be:	9304      	str	r3, [sp, #16]
	int err;

	BT_DBG("%u bytes: %s", len, bt_hex(data, len));

#if defined(CONFIG_BT_MESH_GATT_PROXY)
	if (gatt_svc == MESH_GATT_PROXY) {
   182c0:	4b12      	ldr	r3, [pc, #72]	; (1830c <proxy_send+0x64>)
	struct bt_gatt_notify_params params = {
   182c2:	9602      	str	r6, [sp, #8]
	if (gatt_svc == MESH_GATT_PROXY) {
   182c4:	781b      	ldrb	r3, [r3, #0]
	struct bt_gatt_notify_params params = {
   182c6:	f8ad 500c 	strh.w	r5, [sp, #12]
	if (gatt_svc == MESH_GATT_PROXY) {
   182ca:	2b02      	cmp	r3, #2
   182cc:	d108      	bne.n	182e0 <proxy_send+0x38>
		params.attr = &proxy_attrs[3];
   182ce:	4b10      	ldr	r3, [pc, #64]	; (18310 <proxy_send+0x68>)
	}
#endif
#if defined(CONFIG_BT_MESH_PB_GATT)
	if (gatt_svc == MESH_GATT_PROV) {
		params.attr = &prov_attrs[3];
   182d0:	9301      	str	r3, [sp, #4]

	if (!params.attr) {
		return 0;
	}

	err = bt_gatt_notify_cb(conn, &params);
   182d2:	4669      	mov	r1, sp
   182d4:	4620      	mov	r0, r4
   182d6:	f7f5 fd3b 	bl	dd50 <bt_gatt_notify_cb>
	if (!err) {
   182da:	b128      	cbz	r0, 182e8 <proxy_send+0x40>
		atomic_inc(&pending_notifications);
	}

	return err;
}
   182dc:	b006      	add	sp, #24
   182de:	bd70      	pop	{r4, r5, r6, pc}
	if (gatt_svc == MESH_GATT_PROV) {
   182e0:	2b01      	cmp	r3, #1
   182e2:	d10e      	bne.n	18302 <proxy_send+0x5a>
		params.attr = &prov_attrs[3];
   182e4:	4b0b      	ldr	r3, [pc, #44]	; (18314 <proxy_send+0x6c>)
   182e6:	e7f3      	b.n	182d0 <proxy_send+0x28>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   182e8:	4b0b      	ldr	r3, [pc, #44]	; (18318 <proxy_send+0x70>)
   182ea:	f3bf 8f5b 	dmb	ish
   182ee:	e853 2f00 	ldrex	r2, [r3]
   182f2:	3201      	adds	r2, #1
   182f4:	e843 2100 	strex	r1, r2, [r3]
   182f8:	2900      	cmp	r1, #0
   182fa:	d1f8      	bne.n	182ee <proxy_send+0x46>
   182fc:	f3bf 8f5b 	dmb	ish
   18300:	e7ec      	b.n	182dc <proxy_send+0x34>
		return 0;
   18302:	2000      	movs	r0, #0
   18304:	e7ea      	b.n	182dc <proxy_send+0x34>
   18306:	bf00      	nop
   18308:	00018269 	.word	0x00018269
   1830c:	20005852 	.word	0x20005852
   18310:	20001564 	.word	0x20001564
   18314:	200014b4 	.word	0x200014b4
   18318:	20004030 	.word	0x20004030

0001831c <bt_mesh_proxy_beacon_send>:
{
   1831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!sub) {
   1831e:	4605      	mov	r5, r0
   18320:	b920      	cbnz	r0, 1832c <bt_mesh_proxy_beacon_send+0x10>
		bt_mesh_subnet_foreach(bt_mesh_proxy_beacon_send);
   18322:	4809      	ldr	r0, [pc, #36]	; (18348 <bt_mesh_proxy_beacon_send+0x2c>)
}
   18324:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_mesh_subnet_foreach(bt_mesh_proxy_beacon_send);
   18328:	f7f7 bf00 	b.w	1012c <bt_mesh_subnet_foreach>
		if (clients[i].conn) {
   1832c:	4e07      	ldr	r6, [pc, #28]	; (1834c <bt_mesh_proxy_beacon_send+0x30>)
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   1832e:	2400      	movs	r4, #0
		if (clients[i].conn) {
   18330:	2758      	movs	r7, #88	; 0x58
   18332:	fb07 f304 	mul.w	r3, r7, r4
   18336:	5998      	ldr	r0, [r3, r6]
   18338:	b110      	cbz	r0, 18340 <bt_mesh_proxy_beacon_send+0x24>
			beacon_send(clients[i].conn, sub);
   1833a:	4629      	mov	r1, r5
   1833c:	f013 ff35 	bl	2c1aa <beacon_send>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   18340:	3401      	adds	r4, #1
   18342:	2c03      	cmp	r4, #3
   18344:	d1f5      	bne.n	18332 <bt_mesh_proxy_beacon_send+0x16>
}
   18346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18348:	0001831d 	.word	0x0001831d
   1834c:	20000c78 	.word	0x20000c78

00018350 <subnet_evt>:
}

#if defined(CONFIG_BT_MESH_GATT_PROXY)
static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_DELETED) {
   18350:	2901      	cmp	r1, #1
{
   18352:	b410      	push	{r4}
	if (evt == BT_MESH_KEY_DELETED) {
   18354:	d107      	bne.n	18366 <subnet_evt+0x16>
		if (sub == beacon_sub) {
   18356:	4b05      	ldr	r3, [pc, #20]	; (1836c <subnet_evt+0x1c>)
   18358:	681a      	ldr	r2, [r3, #0]
   1835a:	4290      	cmp	r0, r2
   1835c:	d101      	bne.n	18362 <subnet_evt+0x12>
			beacon_sub = NULL;
   1835e:	2200      	movs	r2, #0
   18360:	601a      	str	r2, [r3, #0]
		}
	} else {
		bt_mesh_proxy_beacon_send(sub);
	}
}
   18362:	bc10      	pop	{r4}
   18364:	4770      	bx	lr
   18366:	bc10      	pop	{r4}
		bt_mesh_proxy_beacon_send(sub);
   18368:	f7ff bfd8 	b.w	1831c <bt_mesh_proxy_beacon_send>
   1836c:	20004020 	.word	0x20004020

00018370 <send_filter_status>:
{
   18370:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
   18372:	f851 3b04 	ldr.w	r3, [r1], #4
   18376:	2600      	movs	r6, #0
{
   18378:	4614      	mov	r4, r2
   1837a:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
   1837c:	e9cd 3101 	strd	r3, r1, [sp, #4]
   18380:	9603      	str	r6, [sp, #12]
		.src = bt_mesh_primary_addr(),
   18382:	f7fa fcf3 	bl	12d6c <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   18386:	9b02      	ldr	r3, [sp, #8]
	struct bt_mesh_net_tx tx = {
   18388:	f8ad 000c 	strh.w	r0, [sp, #12]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   1838c:	809e      	strh	r6, [r3, #4]
   1838e:	68a3      	ldr	r3, [r4, #8]
   18390:	6023      	str	r3, [r4, #0]
	net_buf_simple_reserve(buf, 10);
   18392:	210a      	movs	r1, #10
   18394:	4620      	mov	r0, r4
	buf->len  = 0U;
   18396:	80a6      	strh	r6, [r4, #4]
   18398:	f007 fbc8 	bl	1fb2c <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
   1839c:	2103      	movs	r1, #3
   1839e:	4620      	mov	r0, r4
   183a0:	f015 f918 	bl	2d5d4 <net_buf_simple_add_u8>
	if (client->filter_type == WHITELIST) {
   183a4:	7aab      	ldrb	r3, [r5, #10]
   183a6:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
   183a8:	bf0c      	ite	eq
   183aa:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
   183ac:	2101      	movne	r1, #1
   183ae:	4620      	mov	r0, r4
   183b0:	f015 f910 	bl	2d5d4 <net_buf_simple_add_u8>
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   183b4:	88a9      	ldrh	r1, [r5, #4]
   183b6:	88eb      	ldrh	r3, [r5, #6]
	for (filter_size = 0U, i = 0; i < ARRAY_SIZE(client->filter); i++) {
   183b8:	3100      	adds	r1, #0
   183ba:	bf18      	it	ne
   183bc:	2101      	movne	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   183be:	b103      	cbz	r3, 183c2 <send_filter_status+0x52>
			filter_size++;
   183c0:	3101      	adds	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   183c2:	892b      	ldrh	r3, [r5, #8]
   183c4:	b10b      	cbz	r3, 183ca <send_filter_status+0x5a>
			filter_size++;
   183c6:	3101      	adds	r1, #1
   183c8:	b289      	uxth	r1, r1
	net_buf_simple_add_be16(buf, filter_size);
   183ca:	4620      	mov	r0, r4
   183cc:	f015 f912 	bl	2d5f4 <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
   183d0:	2201      	movs	r2, #1
   183d2:	4621      	mov	r1, r4
   183d4:	a801      	add	r0, sp, #4
   183d6:	f7f7 f905 	bl	f5e4 <bt_mesh_net_encode>
	if (err) {
   183da:	4602      	mov	r2, r0
   183dc:	b128      	cbz	r0, 183ea <send_filter_status+0x7a>
		BT_ERR("Encoding Proxy cfg message failed (err %d)", err);
   183de:	4808      	ldr	r0, [pc, #32]	; (18400 <send_filter_status+0x90>)
   183e0:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   183e2:	f00f fa76 	bl	278d2 <printk>
}
   183e6:	b004      	add	sp, #16
   183e8:	bd70      	pop	{r4, r5, r6, pc}
	err = proxy_segment_and_send(client->conn, BT_MESH_PROXY_CONFIG, buf);
   183ea:	4622      	mov	r2, r4
   183ec:	2102      	movs	r1, #2
   183ee:	6828      	ldr	r0, [r5, #0]
   183f0:	f013 fe92 	bl	2c118 <proxy_segment_and_send>
	if (err) {
   183f4:	4602      	mov	r2, r0
   183f6:	2800      	cmp	r0, #0
   183f8:	d0f5      	beq.n	183e6 <send_filter_status+0x76>
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   183fa:	2145      	movs	r1, #69	; 0x45
   183fc:	4801      	ldr	r0, [pc, #4]	; (18404 <send_filter_status+0x94>)
   183fe:	e7f0      	b.n	183e2 <send_filter_status+0x72>
   18400:	00035b43 	.word	0x00035b43
   18404:	00035b73 	.word	0x00035b73

00018408 <proxy_complete_pdu>:
{
   18408:	b570      	push	{r4, r5, r6, lr}
	switch (client->msg_type) {
   1840a:	7ac2      	ldrb	r2, [r0, #11]
{
   1840c:	b094      	sub	sp, #80	; 0x50
   1840e:	4604      	mov	r4, r0
	switch (client->msg_type) {
   18410:	2a03      	cmp	r2, #3
   18412:	f200 80a6 	bhi.w	18562 <proxy_complete_pdu+0x15a>
   18416:	e8df f002 	tbb	[pc, r2]
   1841a:	0e02      	.short	0x0e02
   1841c:	9e12      	.short	0x9e12
		bt_mesh_net_recv(&client->buf, 0, BT_MESH_NET_IF_PROXY);
   1841e:	2202      	movs	r2, #2
   18420:	2100      	movs	r1, #0
   18422:	3048      	adds	r0, #72	; 0x48
   18424:	f7f7 fab2 	bl	f98c <bt_mesh_net_recv>
   18428:	2300      	movs	r3, #0
   1842a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	buf->data = buf->__buf;
   1842e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18430:	64a3      	str	r3, [r4, #72]	; 0x48
}
   18432:	b014      	add	sp, #80	; 0x50
   18434:	bd70      	pop	{r4, r5, r6, pc}
		bt_mesh_beacon_recv(&client->buf);
   18436:	3048      	adds	r0, #72	; 0x48
   18438:	f7f6 fce2 	bl	ee00 <bt_mesh_beacon_recv>
		break;
   1843c:	e7f4      	b.n	18428 <proxy_complete_pdu+0x20>
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
   1843e:	ab0c      	add	r3, sp, #48	; 0x30
   18440:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
   18444:	e9cd 2304 	strd	r2, r3, [sp, #16]
   18448:	9303      	str	r3, [sp, #12]
	err = bt_mesh_net_decode(&client->buf, BT_MESH_NET_IF_PROXY_CFG,
   1844a:	aa06      	add	r2, sp, #24
   1844c:	ab03      	add	r3, sp, #12
   1844e:	2103      	movs	r1, #3
   18450:	3048      	adds	r0, #72	; 0x48
   18452:	f7f7 f9e7 	bl	f824 <bt_mesh_net_decode>
	if (err) {
   18456:	4602      	mov	r2, r0
   18458:	b120      	cbz	r0, 18464 <proxy_complete_pdu+0x5c>
		BT_ERR("Failed to decode Proxy Configuration (err %d)", err);
   1845a:	4843      	ldr	r0, [pc, #268]	; (18568 <proxy_complete_pdu+0x160>)
   1845c:	2145      	movs	r1, #69	; 0x45
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
   1845e:	f00f fa38 	bl	278d2 <printk>
   18462:	e7e1      	b.n	18428 <proxy_complete_pdu+0x20>
	rx.local_match = 1U;
   18464:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_rpl_check(&rx, NULL)) {
   18468:	4601      	mov	r1, r0
	rx.local_match = 1U;
   1846a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	if (bt_mesh_rpl_check(&rx, NULL)) {
   1846e:	a806      	add	r0, sp, #24
	rx.local_match = 1U;
   18470:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_rpl_check(&rx, NULL)) {
   18474:	f7f9 fc8e 	bl	11d94 <bt_mesh_rpl_check>
   18478:	4605      	mov	r5, r0
   1847a:	b150      	cbz	r0, 18492 <proxy_complete_pdu+0x8a>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
   1847c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1847e:	9300      	str	r3, [sp, #0]
   18480:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   18484:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   18488:	4838      	ldr	r0, [pc, #224]	; (1856c <proxy_complete_pdu+0x164>)
   1848a:	2157      	movs	r1, #87	; 0x57
   1848c:	f00f fa21 	bl	278d2 <printk>
		return;
   18490:	e7ca      	b.n	18428 <proxy_complete_pdu+0x20>
	net_buf_simple_pull(&buf, BT_MESH_NET_HDR_LEN);
   18492:	2109      	movs	r1, #9
   18494:	a803      	add	r0, sp, #12
   18496:	f007 fd49 	bl	1ff2c <net_buf_simple_pull>
	if (buf.len < 1) {
   1849a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1849e:	b923      	cbnz	r3, 184aa <proxy_complete_pdu+0xa2>
		BT_WARN("Too short proxy configuration PDU");
   184a0:	2157      	movs	r1, #87	; 0x57
   184a2:	4833      	ldr	r0, [pc, #204]	; (18570 <proxy_complete_pdu+0x168>)
   184a4:	f00f fa15 	bl	278d2 <printk>
		return;
   184a8:	e7be      	b.n	18428 <proxy_complete_pdu+0x20>
	opcode = net_buf_simple_pull_u8(&buf);
   184aa:	a803      	add	r0, sp, #12
   184ac:	f015 f840 	bl	2d530 <net_buf_simple_pull_u8>
	switch (opcode) {
   184b0:	2801      	cmp	r0, #1
	opcode = net_buf_simple_pull_u8(&buf);
   184b2:	4602      	mov	r2, r0
	switch (opcode) {
   184b4:	d043      	beq.n	1853e <proxy_complete_pdu+0x136>
   184b6:	b246      	sxtb	r6, r0
   184b8:	b1c6      	cbz	r6, 184ec <proxy_complete_pdu+0xe4>
   184ba:	2802      	cmp	r0, #2
   184bc:	d148      	bne.n	18550 <proxy_complete_pdu+0x148>
		while (buf.len >= 2) {
   184be:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   184c2:	2b01      	cmp	r3, #1
   184c4:	d919      	bls.n	184fa <proxy_complete_pdu+0xf2>
			addr = net_buf_simple_pull_be16(&buf);
   184c6:	a803      	add	r0, sp, #12
   184c8:	f015 f842 	bl	2d550 <net_buf_simple_pull_be16>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   184cc:	2800      	cmp	r0, #0
   184ce:	d0f6      	beq.n	184be <proxy_complete_pdu+0xb6>
		if (client->filter[i] == addr) {
   184d0:	88a3      	ldrh	r3, [r4, #4]
   184d2:	4283      	cmp	r3, r0
   184d4:	d038      	beq.n	18548 <proxy_complete_pdu+0x140>
   184d6:	88e3      	ldrh	r3, [r4, #6]
   184d8:	4283      	cmp	r3, r0
   184da:	d037      	beq.n	1854c <proxy_complete_pdu+0x144>
   184dc:	8923      	ldrh	r3, [r4, #8]
   184de:	4283      	cmp	r3, r0
   184e0:	d1ed      	bne.n	184be <proxy_complete_pdu+0xb6>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   184e2:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   184e4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   184e8:	809d      	strh	r5, [r3, #4]
			return;
   184ea:	e7e8      	b.n	184be <proxy_complete_pdu+0xb6>
	if (buf->len < 1) {
   184ec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   184f0:	b94b      	cbnz	r3, 18506 <proxy_complete_pdu+0xfe>
		BT_WARN("Too short Filter Set message");
   184f2:	2157      	movs	r1, #87	; 0x57
   184f4:	481f      	ldr	r0, [pc, #124]	; (18574 <proxy_complete_pdu+0x16c>)
   184f6:	f00f f9ec 	bl	278d2 <printk>
		send_filter_status(client, &rx, &buf);
   184fa:	aa03      	add	r2, sp, #12
   184fc:	a906      	add	r1, sp, #24
   184fe:	4620      	mov	r0, r4
   18500:	f7ff ff36 	bl	18370 <send_filter_status>
		break;
   18504:	e790      	b.n	18428 <proxy_complete_pdu+0x20>
	type = net_buf_simple_pull_u8(buf);
   18506:	a803      	add	r0, sp, #12
   18508:	f015 f812 	bl	2d530 <net_buf_simple_pull_u8>
	switch (type) {
   1850c:	4602      	mov	r2, r0
   1850e:	b130      	cbz	r0, 1851e <proxy_complete_pdu+0x116>
   18510:	2801      	cmp	r0, #1
   18512:	d009      	beq.n	18528 <proxy_complete_pdu+0x120>
		BT_WARN("Prohibited Filter Type 0x%02x", type);
   18514:	2157      	movs	r1, #87	; 0x57
   18516:	4818      	ldr	r0, [pc, #96]	; (18578 <proxy_complete_pdu+0x170>)
   18518:	f00f f9db 	bl	278d2 <printk>
		return -EINVAL;
   1851c:	e7ed      	b.n	184fa <proxy_complete_pdu+0xf2>
   1851e:	6060      	str	r0, [r4, #4]
   18520:	8120      	strh	r0, [r4, #8]
		client->filter_type = WHITELIST;
   18522:	2301      	movs	r3, #1
		client->filter_type = BLACKLIST;
   18524:	72a3      	strb	r3, [r4, #10]
		break;
   18526:	e7e8      	b.n	184fa <proxy_complete_pdu+0xf2>
   18528:	6066      	str	r6, [r4, #4]
   1852a:	8126      	strh	r6, [r4, #8]
		client->filter_type = BLACKLIST;
   1852c:	2302      	movs	r3, #2
   1852e:	e7f9      	b.n	18524 <proxy_complete_pdu+0x11c>
			addr = net_buf_simple_pull_be16(&buf);
   18530:	a803      	add	r0, sp, #12
   18532:	f015 f80d 	bl	2d550 <net_buf_simple_pull_be16>
			filter_add(client, addr);
   18536:	4601      	mov	r1, r0
   18538:	4620      	mov	r0, r4
   1853a:	f013 fdd8 	bl	2c0ee <filter_add>
		while (buf.len >= 2) {
   1853e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   18542:	2b01      	cmp	r3, #1
   18544:	d8f4      	bhi.n	18530 <proxy_complete_pdu+0x128>
   18546:	e7d8      	b.n	184fa <proxy_complete_pdu+0xf2>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   18548:	2300      	movs	r3, #0
   1854a:	e7cb      	b.n	184e4 <proxy_complete_pdu+0xdc>
   1854c:	2301      	movs	r3, #1
   1854e:	e7c9      	b.n	184e4 <proxy_complete_pdu+0xdc>
		BT_WARN("Unhandled configuration OpCode 0x%02x", opcode);
   18550:	2157      	movs	r1, #87	; 0x57
   18552:	480a      	ldr	r0, [pc, #40]	; (1857c <proxy_complete_pdu+0x174>)
   18554:	e783      	b.n	1845e <proxy_complete_pdu+0x56>
		bt_mesh_pb_gatt_recv(client->conn, &client->buf);
   18556:	f100 0148 	add.w	r1, r0, #72	; 0x48
   1855a:	6800      	ldr	r0, [r0, #0]
   1855c:	f7ff fd52 	bl	18004 <bt_mesh_pb_gatt_recv>
		break;
   18560:	e762      	b.n	18428 <proxy_complete_pdu+0x20>
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
   18562:	2157      	movs	r1, #87	; 0x57
   18564:	4806      	ldr	r0, [pc, #24]	; (18580 <proxy_complete_pdu+0x178>)
   18566:	e77a      	b.n	1845e <proxy_complete_pdu+0x56>
   18568:	000358bb 	.word	0x000358bb
   1856c:	00033279 	.word	0x00033279
   18570:	000358ee 	.word	0x000358ee
   18574:	00035915 	.word	0x00035915
   18578:	00035937 	.word	0x00035937
   1857c:	0003595a 	.word	0x0003595a
   18580:	00035985 	.word	0x00035985

00018584 <proxy_recv>:
{
   18584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18588:	4616      	mov	r6, r2
   1858a:	461c      	mov	r4, r3
	struct bt_mesh_proxy_client *client = find_client(conn);
   1858c:	f7ff fdac 	bl	180e8 <find_client>
	if (!client) {
   18590:	4605      	mov	r5, r0
   18592:	2800      	cmp	r0, #0
   18594:	d07c      	beq.n	18690 <proxy_recv+0x10c>
	if (len < 1) {
   18596:	b934      	cbnz	r4, 185a6 <proxy_recv+0x22>
		BT_WARN("Too small Proxy PDU");
   18598:	483f      	ldr	r0, [pc, #252]	; (18698 <proxy_recv+0x114>)
   1859a:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unexpected message type in last SAR PDU");
   1859c:	f00f f999 	bl	278d2 <printk>
			return -EINVAL;
   185a0:	f06f 0415 	mvn.w	r4, #21
   185a4:	e049      	b.n	1863a <proxy_recv+0xb6>
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
   185a6:	7832      	ldrb	r2, [r6, #0]
   185a8:	68c9      	ldr	r1, [r1, #12]
   185aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   185ae:	3100      	adds	r1, #0
   185b0:	f1a2 0303 	sub.w	r3, r2, #3
   185b4:	bf18      	it	ne
   185b6:	2101      	movne	r1, #1
   185b8:	425a      	negs	r2, r3
   185ba:	415a      	adcs	r2, r3
   185bc:	4291      	cmp	r1, r2
   185be:	d002      	beq.n	185c6 <proxy_recv+0x42>
		BT_WARN("Proxy PDU type doesn't match GATT service");
   185c0:	2157      	movs	r1, #87	; 0x57
   185c2:	4836      	ldr	r0, [pc, #216]	; (1869c <proxy_recv+0x118>)
   185c4:	e7ea      	b.n	1859c <proxy_recv+0x18>
	if (len - 1 > net_buf_simple_tailroom(&client->buf)) {
   185c6:	f100 0748 	add.w	r7, r0, #72	; 0x48
   185ca:	4638      	mov	r0, r7
   185cc:	f014 ffee 	bl	2d5ac <net_buf_simple_tailroom>
   185d0:	f104 38ff 	add.w	r8, r4, #4294967295
   185d4:	4580      	cmp	r8, r0
   185d6:	d902      	bls.n	185de <proxy_recv+0x5a>
		BT_WARN("Too big proxy PDU");
   185d8:	2157      	movs	r1, #87	; 0x57
   185da:	4831      	ldr	r0, [pc, #196]	; (186a0 <proxy_recv+0x11c>)
   185dc:	e7de      	b.n	1859c <proxy_recv+0x18>
	switch (PDU_SAR(data)) {
   185de:	7833      	ldrb	r3, [r6, #0]
   185e0:	f8b5 204c 	ldrh.w	r2, [r5, #76]	; 0x4c
   185e4:	0999      	lsrs	r1, r3, #6
   185e6:	2902      	cmp	r1, #2
   185e8:	d02a      	beq.n	18640 <proxy_recv+0xbc>
   185ea:	2903      	cmp	r1, #3
   185ec:	d03f      	beq.n	1866e <proxy_recv+0xea>
   185ee:	2901      	cmp	r1, #1
   185f0:	d00d      	beq.n	1860e <proxy_recv+0x8a>
		if (client->buf.len) {
   185f2:	b112      	cbz	r2, 185fa <proxy_recv+0x76>
			BT_WARN("Complete PDU while a pending incomplete one");
   185f4:	2157      	movs	r1, #87	; 0x57
   185f6:	482b      	ldr	r0, [pc, #172]	; (186a4 <proxy_recv+0x120>)
   185f8:	e7d0      	b.n	1859c <proxy_recv+0x18>
		client->msg_type = PDU_TYPE(data);
   185fa:	72eb      	strb	r3, [r5, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   185fc:	4642      	mov	r2, r8
   185fe:	1c71      	adds	r1, r6, #1
   18600:	4638      	mov	r0, r7
   18602:	f014 ffdb 	bl	2d5bc <net_buf_simple_add_mem>
		proxy_complete_pdu(client);
   18606:	4628      	mov	r0, r5
   18608:	f7ff fefe 	bl	18408 <proxy_complete_pdu>
		break;
   1860c:	e015      	b.n	1863a <proxy_recv+0xb6>
		if (client->buf.len) {
   1860e:	b112      	cbz	r2, 18616 <proxy_recv+0x92>
			BT_WARN("First PDU while a pending incomplete one");
   18610:	2157      	movs	r1, #87	; 0x57
   18612:	4825      	ldr	r0, [pc, #148]	; (186a8 <proxy_recv+0x124>)
   18614:	e7c2      	b.n	1859c <proxy_recv+0x18>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   18616:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1861a:	2300      	movs	r3, #0
   1861c:	f105 0118 	add.w	r1, r5, #24
   18620:	4822      	ldr	r0, [pc, #136]	; (186ac <proxy_recv+0x128>)
   18622:	f00c ff39 	bl	25498 <k_delayed_work_submit_to_queue>
		client->msg_type = PDU_TYPE(data);
   18626:	4631      	mov	r1, r6
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   18628:	4642      	mov	r2, r8
		client->msg_type = PDU_TYPE(data);
   1862a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1862e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18632:	72eb      	strb	r3, [r5, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   18634:	4638      	mov	r0, r7
   18636:	f014 ffc1 	bl	2d5bc <net_buf_simple_add_mem>
}
   1863a:	4620      	mov	r0, r4
   1863c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!client->buf.len) {
   18640:	b912      	cbnz	r2, 18648 <proxy_recv+0xc4>
			BT_WARN("Continuation with no prior data");
   18642:	2157      	movs	r1, #87	; 0x57
   18644:	481a      	ldr	r0, [pc, #104]	; (186b0 <proxy_recv+0x12c>)
   18646:	e7a9      	b.n	1859c <proxy_recv+0x18>
		if (client->msg_type != PDU_TYPE(data)) {
   18648:	7aea      	ldrb	r2, [r5, #11]
   1864a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1864e:	429a      	cmp	r2, r3
   18650:	d002      	beq.n	18658 <proxy_recv+0xd4>
			BT_WARN("Unexpected message type in continuation");
   18652:	2157      	movs	r1, #87	; 0x57
   18654:	4817      	ldr	r0, [pc, #92]	; (186b4 <proxy_recv+0x130>)
   18656:	e7a1      	b.n	1859c <proxy_recv+0x18>
   18658:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1865c:	f105 0118 	add.w	r1, r5, #24
   18660:	2300      	movs	r3, #0
   18662:	4812      	ldr	r0, [pc, #72]	; (186ac <proxy_recv+0x128>)
   18664:	f00c ff18 	bl	25498 <k_delayed_work_submit_to_queue>
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   18668:	4642      	mov	r2, r8
   1866a:	1c71      	adds	r1, r6, #1
   1866c:	e7e2      	b.n	18634 <proxy_recv+0xb0>
		if (!client->buf.len) {
   1866e:	b912      	cbnz	r2, 18676 <proxy_recv+0xf2>
			BT_WARN("Last SAR PDU with no prior data");
   18670:	2157      	movs	r1, #87	; 0x57
   18672:	4811      	ldr	r0, [pc, #68]	; (186b8 <proxy_recv+0x134>)
   18674:	e792      	b.n	1859c <proxy_recv+0x18>
		if (client->msg_type != PDU_TYPE(data)) {
   18676:	7aea      	ldrb	r2, [r5, #11]
   18678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1867c:	429a      	cmp	r2, r3
   1867e:	d002      	beq.n	18686 <proxy_recv+0x102>
			BT_WARN("Unexpected message type in last SAR PDU");
   18680:	2157      	movs	r1, #87	; 0x57
   18682:	480e      	ldr	r0, [pc, #56]	; (186bc <proxy_recv+0x138>)
   18684:	e78a      	b.n	1859c <proxy_recv+0x18>
		k_delayed_work_cancel(&client->sar_timer);
   18686:	f105 0018 	add.w	r0, r5, #24
   1868a:	f00c ff75 	bl	25578 <k_delayed_work_cancel>
   1868e:	e7b5      	b.n	185fc <proxy_recv+0x78>
		return -ENOTCONN;
   18690:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   18694:	e7d1      	b.n	1863a <proxy_recv+0xb6>
   18696:	bf00      	nop
   18698:	000359ca 	.word	0x000359ca
   1869c:	000359e3 	.word	0x000359e3
   186a0:	00035a12 	.word	0x00035a12
   186a4:	00035a29 	.word	0x00035a29
   186a8:	00035a5a 	.word	0x00035a5a
   186ac:	20003028 	.word	0x20003028
   186b0:	00035a88 	.word	0x00035a88
   186b4:	00035aad 	.word	0x00035aad
   186b8:	00035ada 	.word	0x00035ada
   186bc:	00035aff 	.word	0x00035aff

000186c0 <proxy_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   186c0:	2a01      	cmp	r2, #1
{
   186c2:	b510      	push	{r4, lr}
	if (value != BT_GATT_CCC_NOTIFY) {
   186c4:	d006      	beq.n	186d4 <proxy_ccc_write+0x14>
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
   186c6:	4819      	ldr	r0, [pc, #100]	; (1872c <proxy_ccc_write+0x6c>)
   186c8:	2157      	movs	r1, #87	; 0x57
   186ca:	f00f f902 	bl	278d2 <printk>
   186ce:	f06f 0012 	mvn.w	r0, #18
}
   186d2:	bd10      	pop	{r4, pc}
	client = find_client(conn);
   186d4:	f7ff fd08 	bl	180e8 <find_client>
	__ASSERT(client, "No client for connection");
   186d8:	4604      	mov	r4, r0
   186da:	b950      	cbnz	r0, 186f2 <proxy_ccc_write+0x32>
   186dc:	4914      	ldr	r1, [pc, #80]	; (18730 <proxy_ccc_write+0x70>)
   186de:	4815      	ldr	r0, [pc, #84]	; (18734 <proxy_ccc_write+0x74>)
   186e0:	f240 22e5 	movw	r2, #741	; 0x2e5
   186e4:	f00f f8f5 	bl	278d2 <printk>
   186e8:	f240 21e5 	movw	r1, #741	; 0x2e5
   186ec:	4810      	ldr	r0, [pc, #64]	; (18730 <proxy_ccc_write+0x70>)
   186ee:	f00f fb69 	bl	27dc4 <assert_post_action>
	if (client->filter_type == NONE) {
   186f2:	7aa3      	ldrb	r3, [r4, #10]
   186f4:	b10b      	cbz	r3, 186fa <proxy_ccc_write+0x3a>
	return sizeof(value);
   186f6:	2002      	movs	r0, #2
   186f8:	e7eb      	b.n	186d2 <proxy_ccc_write+0x12>
		client->filter_type = WHITELIST;
   186fa:	2301      	movs	r3, #1
   186fc:	72a3      	strb	r3, [r4, #10]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   186fe:	f104 0314 	add.w	r3, r4, #20
   18702:	f3bf 8f5b 	dmb	ish
   18706:	e853 2f00 	ldrex	r2, [r3]
   1870a:	f042 0101 	orr.w	r1, r2, #1
   1870e:	e843 1000 	strex	r0, r1, [r3]
   18712:	2800      	cmp	r0, #0
   18714:	d1f7      	bne.n	18706 <proxy_ccc_write+0x46>
   18716:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1871a:	07d3      	lsls	r3, r2, #31
   1871c:	d4eb      	bmi.n	186f6 <proxy_ccc_write+0x36>
		k_queue_append(&work_q->queue, work);
   1871e:	f104 010c 	add.w	r1, r4, #12
   18722:	4805      	ldr	r0, [pc, #20]	; (18738 <proxy_ccc_write+0x78>)
   18724:	f015 fc34 	bl	2df90 <k_queue_append>
   18728:	e7e5      	b.n	186f6 <proxy_ccc_write+0x36>
   1872a:	bf00      	nop
   1872c:	00035859 	.word	0x00035859
   18730:	0003588a 	.word	0x0003588a
   18734:	0003067f 	.word	0x0003067f
   18738:	20003028 	.word	0x20003028

0001873c <bt_mesh_proxy_identity_start>:
{
   1873c:	b510      	push	{r4, lr}
   1873e:	4604      	mov	r4, r0
	node_id_start(sub);
   18740:	f013 fd52 	bl	2c1e8 <node_id_start>
	beacon_sub = sub;
   18744:	4b01      	ldr	r3, [pc, #4]	; (1874c <bt_mesh_proxy_identity_start+0x10>)
   18746:	601c      	str	r4, [r3, #0]
}
   18748:	bd10      	pop	{r4, pc}
   1874a:	bf00      	nop
   1874c:	20004020 	.word	0x20004020

00018750 <bt_mesh_proxy_identity_enable>:
{
   18750:	b508      	push	{r3, lr}
	if (!bt_mesh_is_provisioned()) {
   18752:	f012 fb76 	bl	2ae42 <bt_mesh_is_provisioned>
   18756:	b138      	cbz	r0, 18768 <bt_mesh_proxy_identity_enable+0x18>
	if (bt_mesh_subnet_foreach(node_id_start)) {
   18758:	4805      	ldr	r0, [pc, #20]	; (18770 <bt_mesh_proxy_identity_enable+0x20>)
   1875a:	f7f7 fce7 	bl	1012c <bt_mesh_subnet_foreach>
   1875e:	b110      	cbz	r0, 18766 <bt_mesh_proxy_identity_enable+0x16>
		bt_mesh_adv_update();
   18760:	f7fc fdc0 	bl	152e4 <bt_mesh_adv_update>
	return 0;
   18764:	2000      	movs	r0, #0
}
   18766:	bd08      	pop	{r3, pc}
		return -EAGAIN;
   18768:	f06f 000a 	mvn.w	r0, #10
   1876c:	e7fb      	b.n	18766 <bt_mesh_proxy_identity_enable+0x16>
   1876e:	bf00      	nop
   18770:	0002c1e9 	.word	0x0002c1e9

00018774 <bt_mesh_proxy_get_buf>:
	buf->len  = 0U;
   18774:	4803      	ldr	r0, [pc, #12]	; (18784 <bt_mesh_proxy_get_buf+0x10>)
   18776:	2300      	movs	r3, #0
   18778:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	buf->data = buf->__buf;
   1877c:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1877e:	f840 3f48 	str.w	r3, [r0, #72]!
}
   18782:	4770      	bx	lr
   18784:	20000c78 	.word	0x20000c78

00018788 <bt_mesh_proxy_prov_enable>:
{
   18788:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_PROV) {
   1878a:	4c12      	ldr	r4, [pc, #72]	; (187d4 <bt_mesh_proxy_prov_enable+0x4c>)
   1878c:	7823      	ldrb	r3, [r4, #0]
   1878e:	2b01      	cmp	r3, #1
   18790:	d019      	beq.n	187c6 <bt_mesh_proxy_prov_enable+0x3e>
	if (gatt_svc != MESH_GATT_NONE) {
   18792:	b9db      	cbnz	r3, 187cc <bt_mesh_proxy_prov_enable+0x44>
	bt_gatt_service_register(&prov_svc);
   18794:	4810      	ldr	r0, [pc, #64]	; (187d8 <bt_mesh_proxy_prov_enable+0x50>)
   18796:	f7f5 f97b 	bl	da90 <bt_gatt_service_register>
	prov_fast_adv = true;
   1879a:	4a10      	ldr	r2, [pc, #64]	; (187dc <bt_mesh_proxy_prov_enable+0x54>)
	gatt_svc = MESH_GATT_PROV;
   1879c:	2301      	movs	r3, #1
	prov_fast_adv = true;
   1879e:	7013      	strb	r3, [r2, #0]
	gatt_svc = MESH_GATT_PROV;
   187a0:	7023      	strb	r3, [r4, #0]
		if (clients[i].conn) {
   187a2:	4b0f      	ldr	r3, [pc, #60]	; (187e0 <bt_mesh_proxy_prov_enable+0x58>)
   187a4:	681a      	ldr	r2, [r3, #0]
   187a6:	b10a      	cbz	r2, 187ac <bt_mesh_proxy_prov_enable+0x24>
			clients[i].filter_type = PROV;
   187a8:	2203      	movs	r2, #3
   187aa:	729a      	strb	r2, [r3, #10]
		if (clients[i].conn) {
   187ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   187ae:	b112      	cbz	r2, 187b6 <bt_mesh_proxy_prov_enable+0x2e>
			clients[i].filter_type = PROV;
   187b0:	2203      	movs	r2, #3
   187b2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		if (clients[i].conn) {
   187b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   187ba:	b112      	cbz	r2, 187c2 <bt_mesh_proxy_prov_enable+0x3a>
			clients[i].filter_type = PROV;
   187bc:	2203      	movs	r2, #3
   187be:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	return 0;
   187c2:	2000      	movs	r0, #0
}
   187c4:	bd10      	pop	{r4, pc}
		return -EALREADY;
   187c6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   187ca:	e7fb      	b.n	187c4 <bt_mesh_proxy_prov_enable+0x3c>
		return -EBUSY;
   187cc:	f06f 000f 	mvn.w	r0, #15
   187d0:	e7f8      	b.n	187c4 <bt_mesh_proxy_prov_enable+0x3c>
   187d2:	bf00      	nop
   187d4:	20005852 	.word	0x20005852
   187d8:	2000151c 	.word	0x2000151c
   187dc:	20005853 	.word	0x20005853
   187e0:	20000c78 	.word	0x20000c78

000187e4 <bt_mesh_proxy_prov_disable>:
{
   187e4:	b570      	push	{r4, r5, r6, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   187e6:	4d14      	ldr	r5, [pc, #80]	; (18838 <bt_mesh_proxy_prov_disable+0x54>)
   187e8:	782b      	ldrb	r3, [r5, #0]
{
   187ea:	4606      	mov	r6, r0
	if (gatt_svc == MESH_GATT_NONE) {
   187ec:	b1eb      	cbz	r3, 1882a <bt_mesh_proxy_prov_disable+0x46>
	if (gatt_svc != MESH_GATT_PROV) {
   187ee:	2b01      	cmp	r3, #1
   187f0:	d11e      	bne.n	18830 <bt_mesh_proxy_prov_disable+0x4c>
	bt_gatt_service_unregister(&prov_svc);
   187f2:	4812      	ldr	r0, [pc, #72]	; (1883c <bt_mesh_proxy_prov_disable+0x58>)
	gatt_svc = MESH_GATT_NONE;
   187f4:	2400      	movs	r4, #0
	bt_gatt_service_unregister(&prov_svc);
   187f6:	f7f5 fd11 	bl	e21c <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   187fa:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   187fc:	4d10      	ldr	r5, [pc, #64]	; (18840 <bt_mesh_proxy_prov_disable+0x5c>)
		if (!client->conn || client->filter_type != PROV) {
   187fe:	6828      	ldr	r0, [r5, #0]
   18800:	b130      	cbz	r0, 18810 <bt_mesh_proxy_prov_disable+0x2c>
   18802:	7aab      	ldrb	r3, [r5, #10]
   18804:	2b03      	cmp	r3, #3
   18806:	d103      	bne.n	18810 <bt_mesh_proxy_prov_disable+0x2c>
		if (disconnect) {
   18808:	b15e      	cbz	r6, 18822 <bt_mesh_proxy_prov_disable+0x3e>
			bt_conn_disconnect(client->conn,
   1880a:	2113      	movs	r1, #19
   1880c:	f7f2 fee0 	bl	b5d0 <bt_conn_disconnect>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   18810:	3401      	adds	r4, #1
   18812:	2c03      	cmp	r4, #3
   18814:	f105 0558 	add.w	r5, r5, #88	; 0x58
   18818:	d1f1      	bne.n	187fe <bt_mesh_proxy_prov_disable+0x1a>
	bt_mesh_adv_update();
   1881a:	f7fc fd63 	bl	152e4 <bt_mesh_adv_update>
	return 0;
   1881e:	2000      	movs	r0, #0
}
   18820:	bd70      	pop	{r4, r5, r6, pc}
			bt_mesh_pb_gatt_close(client->conn);
   18822:	f7ff fc41 	bl	180a8 <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
   18826:	72ae      	strb	r6, [r5, #10]
   18828:	e7f2      	b.n	18810 <bt_mesh_proxy_prov_disable+0x2c>
		return -EALREADY;
   1882a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1882e:	e7f7      	b.n	18820 <bt_mesh_proxy_prov_disable+0x3c>
		return -EBUSY;
   18830:	f06f 000f 	mvn.w	r0, #15
   18834:	e7f4      	b.n	18820 <bt_mesh_proxy_prov_disable+0x3c>
   18836:	bf00      	nop
   18838:	20005852 	.word	0x20005852
   1883c:	2000151c 	.word	0x2000151c
   18840:	20000c78 	.word	0x20000c78

00018844 <bt_mesh_proxy_gatt_enable>:
{
   18844:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_PROXY) {
   18846:	4c11      	ldr	r4, [pc, #68]	; (1888c <bt_mesh_proxy_gatt_enable+0x48>)
   18848:	7823      	ldrb	r3, [r4, #0]
   1884a:	2b02      	cmp	r3, #2
   1884c:	d017      	beq.n	1887e <bt_mesh_proxy_gatt_enable+0x3a>
	if (gatt_svc != MESH_GATT_NONE) {
   1884e:	b9cb      	cbnz	r3, 18884 <bt_mesh_proxy_gatt_enable+0x40>
	bt_gatt_service_register(&proxy_svc);
   18850:	480f      	ldr	r0, [pc, #60]	; (18890 <bt_mesh_proxy_gatt_enable+0x4c>)
   18852:	f7f5 f91d 	bl	da90 <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROXY;
   18856:	2302      	movs	r3, #2
   18858:	7023      	strb	r3, [r4, #0]
		if (clients[i].conn) {
   1885a:	4b0e      	ldr	r3, [pc, #56]	; (18894 <bt_mesh_proxy_gatt_enable+0x50>)
   1885c:	681a      	ldr	r2, [r3, #0]
   1885e:	b10a      	cbz	r2, 18864 <bt_mesh_proxy_gatt_enable+0x20>
			clients[i].filter_type = WHITELIST;
   18860:	2201      	movs	r2, #1
   18862:	729a      	strb	r2, [r3, #10]
		if (clients[i].conn) {
   18864:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   18866:	b112      	cbz	r2, 1886e <bt_mesh_proxy_gatt_enable+0x2a>
			clients[i].filter_type = WHITELIST;
   18868:	2201      	movs	r2, #1
   1886a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		if (clients[i].conn) {
   1886e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   18872:	b112      	cbz	r2, 1887a <bt_mesh_proxy_gatt_enable+0x36>
			clients[i].filter_type = WHITELIST;
   18874:	2201      	movs	r2, #1
   18876:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	return 0;
   1887a:	2000      	movs	r0, #0
}
   1887c:	bd10      	pop	{r4, pc}
		return -EALREADY;
   1887e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18882:	e7fb      	b.n	1887c <bt_mesh_proxy_gatt_enable+0x38>
		return -EBUSY;
   18884:	f06f 000f 	mvn.w	r0, #15
   18888:	e7f8      	b.n	1887c <bt_mesh_proxy_gatt_enable+0x38>
   1888a:	bf00      	nop
   1888c:	20005852 	.word	0x20005852
   18890:	200015cc 	.word	0x200015cc
   18894:	20000c78 	.word	0x20000c78

00018898 <bt_mesh_proxy_gatt_disconnect>:
{
   18898:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   1889a:	2500      	movs	r5, #0
   1889c:	4c08      	ldr	r4, [pc, #32]	; (188c0 <bt_mesh_proxy_gatt_disconnect+0x28>)
			client->filter_type = NONE;
   1889e:	462e      	mov	r6, r5
		if (client->conn && (client->filter_type == WHITELIST ||
   188a0:	6820      	ldr	r0, [r4, #0]
   188a2:	b138      	cbz	r0, 188b4 <bt_mesh_proxy_gatt_disconnect+0x1c>
   188a4:	7aa3      	ldrb	r3, [r4, #10]
   188a6:	3b01      	subs	r3, #1
   188a8:	2b01      	cmp	r3, #1
   188aa:	d803      	bhi.n	188b4 <bt_mesh_proxy_gatt_disconnect+0x1c>
			bt_conn_disconnect(client->conn,
   188ac:	2113      	movs	r1, #19
			client->filter_type = NONE;
   188ae:	72a6      	strb	r6, [r4, #10]
			bt_conn_disconnect(client->conn,
   188b0:	f7f2 fe8e 	bl	b5d0 <bt_conn_disconnect>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   188b4:	3501      	adds	r5, #1
   188b6:	2d03      	cmp	r5, #3
   188b8:	f104 0458 	add.w	r4, r4, #88	; 0x58
   188bc:	d1f0      	bne.n	188a0 <bt_mesh_proxy_gatt_disconnect+0x8>
}
   188be:	bd70      	pop	{r4, r5, r6, pc}
   188c0:	20000c78 	.word	0x20000c78

000188c4 <bt_mesh_proxy_gatt_disable>:
{
   188c4:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   188c6:	4c09      	ldr	r4, [pc, #36]	; (188ec <bt_mesh_proxy_gatt_disable+0x28>)
   188c8:	7823      	ldrb	r3, [r4, #0]
   188ca:	b14b      	cbz	r3, 188e0 <bt_mesh_proxy_gatt_disable+0x1c>
	if (gatt_svc != MESH_GATT_PROXY) {
   188cc:	2b02      	cmp	r3, #2
   188ce:	d10a      	bne.n	188e6 <bt_mesh_proxy_gatt_disable+0x22>
	bt_mesh_proxy_gatt_disconnect();
   188d0:	f7ff ffe2 	bl	18898 <bt_mesh_proxy_gatt_disconnect>
	bt_gatt_service_unregister(&proxy_svc);
   188d4:	4806      	ldr	r0, [pc, #24]	; (188f0 <bt_mesh_proxy_gatt_disable+0x2c>)
   188d6:	f7f5 fca1 	bl	e21c <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   188da:	2000      	movs	r0, #0
   188dc:	7020      	strb	r0, [r4, #0]
}
   188de:	bd10      	pop	{r4, pc}
		return -EALREADY;
   188e0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   188e4:	e7fb      	b.n	188de <bt_mesh_proxy_gatt_disable+0x1a>
		return -EBUSY;
   188e6:	f06f 000f 	mvn.w	r0, #15
   188ea:	e7f8      	b.n	188de <bt_mesh_proxy_gatt_disable+0x1a>
   188ec:	20005852 	.word	0x20005852
   188f0:	200015cc 	.word	0x200015cc

000188f4 <bt_mesh_proxy_send>:
{
   188f4:	b538      	push	{r3, r4, r5, lr}
   188f6:	4604      	mov	r4, r0
   188f8:	4615      	mov	r5, r2
	struct bt_mesh_proxy_client *client = find_client(conn);
   188fa:	f7ff fbf5 	bl	180e8 <find_client>
	if (!client) {
   188fe:	b930      	cbnz	r0, 1890e <bt_mesh_proxy_send+0x1a>
		BT_ERR("No Proxy Client found");
   18900:	480f      	ldr	r0, [pc, #60]	; (18940 <bt_mesh_proxy_send+0x4c>)
   18902:	2145      	movs	r1, #69	; 0x45
   18904:	f00e ffe5 	bl	278d2 <printk>
   18908:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1890c:	bd38      	pop	{r3, r4, r5, pc}
	if ((client->filter_type == PROV) != (type == BT_MESH_PROXY_PROV)) {
   1890e:	7a83      	ldrb	r3, [r0, #10]
   18910:	1ed8      	subs	r0, r3, #3
   18912:	4243      	negs	r3, r0
   18914:	f1a1 0c03 	sub.w	ip, r1, #3
   18918:	4143      	adcs	r3, r0
   1891a:	f1dc 0200 	rsbs	r2, ip, #0
   1891e:	eb42 020c 	adc.w	r2, r2, ip
   18922:	4293      	cmp	r3, r2
   18924:	d006      	beq.n	18934 <bt_mesh_proxy_send+0x40>
		BT_ERR("Invalid PDU type for Proxy Client");
   18926:	4807      	ldr	r0, [pc, #28]	; (18944 <bt_mesh_proxy_send+0x50>)
   18928:	2145      	movs	r1, #69	; 0x45
   1892a:	f00e ffd2 	bl	278d2 <printk>
		return -EINVAL;
   1892e:	f06f 0015 	mvn.w	r0, #21
   18932:	e7eb      	b.n	1890c <bt_mesh_proxy_send+0x18>
	return proxy_segment_and_send(conn, type, msg);
   18934:	462a      	mov	r2, r5
   18936:	4620      	mov	r0, r4
}
   18938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return proxy_segment_and_send(conn, type, msg);
   1893c:	f013 bbec 	b.w	2c118 <proxy_segment_and_send>
   18940:	00035817 	.word	0x00035817
   18944:	00035832 	.word	0x00035832

00018948 <bt_mesh_proxy_relay>:
{
   18948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1894c:	4c1f      	ldr	r4, [pc, #124]	; (189cc <bt_mesh_proxy_relay+0x84>)
   1894e:	b08d      	sub	sp, #52	; 0x34
   18950:	4606      	mov	r6, r0
   18952:	460d      	mov	r5, r1
   18954:	f504 7884 	add.w	r8, r4, #264	; 0x108
	bool relayed = false;
   18958:	2000      	movs	r0, #0
		NET_BUF_SIMPLE_DEFINE(msg, 32);
   1895a:	af04      	add	r7, sp, #16
   1895c:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
		if (!client->conn) {
   18960:	6823      	ldr	r3, [r4, #0]
		NET_BUF_SIMPLE_DEFINE(msg, 32);
   18962:	9703      	str	r7, [sp, #12]
   18964:	e9cd 7901 	strd	r7, r9, [sp, #4]
		if (!client->conn) {
   18968:	b15b      	cbz	r3, 18982 <bt_mesh_proxy_relay+0x3a>
	if (client->filter_type == BLACKLIST) {
   1896a:	7aa3      	ldrb	r3, [r4, #10]
   1896c:	2b02      	cmp	r3, #2
   1896e:	d10e      	bne.n	1898e <bt_mesh_proxy_relay+0x46>
			if (client->filter[i] == addr) {
   18970:	88a3      	ldrh	r3, [r4, #4]
   18972:	42ab      	cmp	r3, r5
   18974:	d005      	beq.n	18982 <bt_mesh_proxy_relay+0x3a>
   18976:	88e3      	ldrh	r3, [r4, #6]
   18978:	42ab      	cmp	r3, r5
   1897a:	d002      	beq.n	18982 <bt_mesh_proxy_relay+0x3a>
   1897c:	8923      	ldrh	r3, [r4, #8]
   1897e:	42ab      	cmp	r3, r5
   18980:	d114      	bne.n	189ac <bt_mesh_proxy_relay+0x64>
   18982:	3458      	adds	r4, #88	; 0x58
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   18984:	45a0      	cmp	r8, r4
   18986:	d1eb      	bne.n	18960 <bt_mesh_proxy_relay+0x18>
}
   18988:	b00d      	add	sp, #52	; 0x34
   1898a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (addr == BT_MESH_ADDR_ALL_NODES) {
   1898e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18992:	4295      	cmp	r5, r2
   18994:	d00a      	beq.n	189ac <bt_mesh_proxy_relay+0x64>
	if (client->filter_type == WHITELIST) {
   18996:	2b01      	cmp	r3, #1
   18998:	d1f3      	bne.n	18982 <bt_mesh_proxy_relay+0x3a>
			if (client->filter[i] == addr) {
   1899a:	88a3      	ldrh	r3, [r4, #4]
   1899c:	42ab      	cmp	r3, r5
   1899e:	d005      	beq.n	189ac <bt_mesh_proxy_relay+0x64>
   189a0:	88e3      	ldrh	r3, [r4, #6]
   189a2:	42ab      	cmp	r3, r5
   189a4:	d002      	beq.n	189ac <bt_mesh_proxy_relay+0x64>
   189a6:	8923      	ldrh	r3, [r4, #8]
   189a8:	42ab      	cmp	r3, r5
   189aa:	d1ea      	bne.n	18982 <bt_mesh_proxy_relay+0x3a>
		net_buf_simple_reserve(&msg, 1);
   189ac:	2101      	movs	r1, #1
   189ae:	a801      	add	r0, sp, #4
   189b0:	f007 f8bc 	bl	1fb2c <net_buf_simple_reserve>
		net_buf_simple_add_mem(&msg, buf->data, buf->len);
   189b4:	88b2      	ldrh	r2, [r6, #4]
   189b6:	6831      	ldr	r1, [r6, #0]
   189b8:	a801      	add	r0, sp, #4
   189ba:	f014 fdff 	bl	2d5bc <net_buf_simple_add_mem>
		bt_mesh_proxy_send(client->conn, BT_MESH_PROXY_NET_PDU, &msg);
   189be:	aa01      	add	r2, sp, #4
   189c0:	2100      	movs	r1, #0
   189c2:	6820      	ldr	r0, [r4, #0]
   189c4:	f7ff ff96 	bl	188f4 <bt_mesh_proxy_send>
		relayed = true;
   189c8:	2001      	movs	r0, #1
   189ca:	e7da      	b.n	18982 <bt_mesh_proxy_relay+0x3a>
   189cc:	20000c78 	.word	0x20000c78

000189d0 <bt_mesh_proxy_adv_start>:
{
   189d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   189d4:	4ba3      	ldr	r3, [pc, #652]	; (18c64 <bt_mesh_proxy_adv_start+0x294>)
   189d6:	781b      	ldrb	r3, [r3, #0]
{
   189d8:	b087      	sub	sp, #28
	if (gatt_svc == MESH_GATT_NONE) {
   189da:	2b00      	cmp	r3, #0
   189dc:	f000 8090 	beq.w	18b00 <bt_mesh_proxy_adv_start+0x130>
	if (!bt_mesh_is_provisioned()) {
   189e0:	f012 fa2f 	bl	2ae42 <bt_mesh_is_provisioned>
   189e4:	2800      	cmp	r0, #0
   189e6:	d163      	bne.n	18ab0 <bt_mesh_proxy_adv_start+0xe0>
	const struct bt_mesh_prov *prov = bt_mesh_prov_get();
   189e8:	f7fe f8dc 	bl	16ba4 <bt_mesh_prov_get>
   189ec:	4605      	mov	r5, r0
	const char *name = bt_get_name();
   189ee:	f7f1 fd15 	bl	a41c <bt_get_name>
   189f2:	4606      	mov	r6, r0
	size_t name_len = strlen(name);
   189f4:	f7e9 fa08 	bl	1e08 <strlen>
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   189f8:	682b      	ldr	r3, [r5, #0]
   189fa:	4a9b      	ldr	r2, [pc, #620]	; (18c68 <bt_mesh_proxy_adv_start+0x298>)
	size_t name_len = strlen(name);
   189fc:	4607      	mov	r7, r0
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   189fe:	f103 0110 	add.w	r1, r3, #16
   18a02:	f853 0b04 	ldr.w	r0, [r3], #4
   18a06:	f842 0b04 	str.w	r0, [r2], #4
   18a0a:	428b      	cmp	r3, r1
   18a0c:	d1f9      	bne.n	18a02 <bt_mesh_proxy_adv_start+0x32>
	sys_put_be16(prov->oob_info, prov_svc_data + 18);
   18a0e:	892a      	ldrh	r2, [r5, #8]
	dst[0] = val >> 8;
   18a10:	4b96      	ldr	r3, [pc, #600]	; (18c6c <bt_mesh_proxy_adv_start+0x29c>)
   18a12:	0a11      	lsrs	r1, r2, #8
   18a14:	7499      	strb	r1, [r3, #18]
	dst[1] = val;
   18a16:	74da      	strb	r2, [r3, #19]
	if (prov->uri) {
   18a18:	6868      	ldr	r0, [r5, #4]
   18a1a:	ac02      	add	r4, sp, #8
   18a1c:	2800      	cmp	r0, #0
   18a1e:	d039      	beq.n	18a94 <bt_mesh_proxy_adv_start+0xc4>
		size_t uri_len = strlen(prov->uri);
   18a20:	f7e9 f9f2 	bl	1e08 <strlen>
		if (uri_len > 29) {
   18a24:	281d      	cmp	r0, #29
   18a26:	d917      	bls.n	18a58 <bt_mesh_proxy_adv_start+0x88>
			BT_WARN("Too long URI to fit advertising packet");
   18a28:	4891      	ldr	r0, [pc, #580]	; (18c70 <bt_mesh_proxy_adv_start+0x2a0>)
   18a2a:	2157      	movs	r1, #87	; 0x57
   18a2c:	f00e ff51 	bl	278d2 <printk>
	size_t sd_space = 31;
   18a30:	231f      	movs	r3, #31
	size_t prov_sd_len = 0;
   18a32:	2000      	movs	r0, #0
	if (sd_space > 2 && name_len > 0) {
   18a34:	b1ef      	cbz	r7, 18a72 <bt_mesh_proxy_adv_start+0xa2>
		sd_space -= 2;
   18a36:	3b02      	subs	r3, #2
		if (sd_space < name_len) {
   18a38:	429f      	cmp	r7, r3
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   18a3a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
   18a3e:	bf8b      	itete	hi
   18a40:	2108      	movhi	r1, #8
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   18a42:	2309      	movls	r3, #9
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   18a44:	f804 1030 	strbhi.w	r1, [r4, r0, lsl #3]
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   18a48:	f804 3030 	strbls.w	r3, [r4, r0, lsl #3]
			prov_sd[prov_sd_len].data_len = sd_space;
   18a4c:	bf8c      	ite	hi
   18a4e:	7053      	strbhi	r3, [r2, #1]
			prov_sd[prov_sd_len].data_len = name_len;
   18a50:	7057      	strbls	r7, [r2, #1]
		prov_sd[prov_sd_len].data = name;
   18a52:	6056      	str	r6, [r2, #4]
		prov_sd_len++;
   18a54:	3001      	adds	r0, #1
   18a56:	e00c      	b.n	18a72 <bt_mesh_proxy_adv_start+0xa2>
			prov_sd[0].type = BT_DATA_URI;
   18a58:	2324      	movs	r3, #36	; 0x24
			prov_sd[0].data_len = uri_len;
   18a5a:	f88d 0009 	strb.w	r0, [sp, #9]
			prov_sd[0].type = BT_DATA_URI;
   18a5e:	f88d 3008 	strb.w	r3, [sp, #8]
			prov_sd[0].data = prov->uri;
   18a62:	686b      	ldr	r3, [r5, #4]
   18a64:	9303      	str	r3, [sp, #12]
			sd_space -= 2 + uri_len;
   18a66:	f1c0 031d 	rsb	r3, r0, #29
	if (sd_space > 2 && name_len > 0) {
   18a6a:	2b02      	cmp	r3, #2
			prov_sd_len++;
   18a6c:	f04f 0001 	mov.w	r0, #1
	if (sd_space > 2 && name_len > 0) {
   18a70:	d8e0      	bhi.n	18a34 <bt_mesh_proxy_adv_start+0x64>
		if (!prov_fast_adv) {
   18a72:	4d80      	ldr	r5, [pc, #512]	; (18c74 <bt_mesh_proxy_adv_start+0x2a4>)
   18a74:	782b      	ldrb	r3, [r5, #0]
			return bt_mesh_adv_start(&slow_adv_param,
   18a76:	e9cd 4000 	strd	r4, r0, [sp]
		if (!prov_fast_adv) {
   18a7a:	b96b      	cbnz	r3, 18a98 <bt_mesh_proxy_adv_start+0xc8>
			return bt_mesh_adv_start(&slow_adv_param,
   18a7c:	2303      	movs	r3, #3
   18a7e:	4a7e      	ldr	r2, [pc, #504]	; (18c78 <bt_mesh_proxy_adv_start+0x2a8>)
   18a80:	487e      	ldr	r0, [pc, #504]	; (18c7c <bt_mesh_proxy_adv_start+0x2ac>)
   18a82:	f04f 31ff 	mov.w	r1, #4294967295
   18a86:	f7fc fc63 	bl	15350 <bt_mesh_adv_start>
   18a8a:	4604      	mov	r4, r0
}
   18a8c:	4620      	mov	r0, r4
   18a8e:	b007      	add	sp, #28
   18a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t sd_space = 31;
   18a94:	231f      	movs	r3, #31
   18a96:	e7cd      	b.n	18a34 <bt_mesh_proxy_adv_start+0x64>
		err = bt_mesh_adv_start(&fast_adv_param, (60 * MSEC_PER_SEC),
   18a98:	2303      	movs	r3, #3
   18a9a:	4a77      	ldr	r2, [pc, #476]	; (18c78 <bt_mesh_proxy_adv_start+0x2a8>)
   18a9c:	4878      	ldr	r0, [pc, #480]	; (18c80 <bt_mesh_proxy_adv_start+0x2b0>)
   18a9e:	f64e 2160 	movw	r1, #60000	; 0xea60
   18aa2:	f7fc fc55 	bl	15350 <bt_mesh_adv_start>
		if (!err) {
   18aa6:	4604      	mov	r4, r0
   18aa8:	2800      	cmp	r0, #0
   18aaa:	d1ef      	bne.n	18a8c <bt_mesh_proxy_adv_start+0xbc>
			prov_fast_adv = false;
   18aac:	7028      	strb	r0, [r5, #0]
   18aae:	e7ed      	b.n	18a8c <bt_mesh_proxy_adv_start+0xbc>
	if (bt_mesh_is_provisioned()) {
   18ab0:	f012 f9c7 	bl	2ae42 <bt_mesh_is_provisioned>
   18ab4:	2800      	cmp	r0, #0
   18ab6:	f000 80ce 	beq.w	18c56 <bt_mesh_proxy_adv_start+0x286>
	if (!beacon_sub) {
   18aba:	4e72      	ldr	r6, [pc, #456]	; (18c84 <bt_mesh_proxy_adv_start+0x2b4>)
   18abc:	6830      	ldr	r0, [r6, #0]
   18abe:	b150      	cbz	r0, 18ad6 <bt_mesh_proxy_adv_start+0x106>
	sub = beacon_sub;
   18ac0:	6834      	ldr	r4, [r6, #0]
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   18ac2:	f64f 75ff 	movw	r5, #65535	; 0xffff
   18ac6:	8ba3      	ldrh	r3, [r4, #28]
   18ac8:	42ab      	cmp	r3, r5
   18aca:	d020      	beq.n	18b0e <bt_mesh_proxy_adv_start+0x13e>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   18acc:	7fe3      	ldrb	r3, [r4, #31]
   18ace:	2b01      	cmp	r3, #1
   18ad0:	d119      	bne.n	18b06 <bt_mesh_proxy_adv_start+0x136>
			beacon_sub = sub;
   18ad2:	6034      	str	r4, [r6, #0]
			return sub;
   18ad4:	e004      	b.n	18ae0 <bt_mesh_proxy_adv_start+0x110>
		beacon_sub = bt_mesh_subnet_next(NULL);
   18ad6:	f7f7 fb39 	bl	1014c <bt_mesh_subnet_next>
   18ada:	6030      	str	r0, [r6, #0]
		if (!beacon_sub) {
   18adc:	2800      	cmp	r0, #0
   18ade:	d1ef      	bne.n	18ac0 <bt_mesh_proxy_adv_start+0xf0>
	if (conn_count == CONFIG_BT_MAX_CONN) {
   18ae0:	4b69      	ldr	r3, [pc, #420]	; (18c88 <bt_mesh_proxy_adv_start+0x2b8>)
   18ae2:	681b      	ldr	r3, [r3, #0]
   18ae4:	2b03      	cmp	r3, #3
   18ae6:	f000 80b9 	beq.w	18c5c <bt_mesh_proxy_adv_start+0x28c>
	sub = beacon_sub ? beacon_sub : bt_mesh_subnet_next(beacon_sub);
   18aea:	6835      	ldr	r5, [r6, #0]
   18aec:	b9bd      	cbnz	r5, 18b1e <bt_mesh_proxy_adv_start+0x14e>
   18aee:	4628      	mov	r0, r5
   18af0:	f7f7 fb2c 	bl	1014c <bt_mesh_subnet_next>
	if (!sub) {
   18af4:	4605      	mov	r5, r0
   18af6:	b990      	cbnz	r0, 18b1e <bt_mesh_proxy_adv_start+0x14e>
		BT_WARN("No subnets to advertise on");
   18af8:	2157      	movs	r1, #87	; 0x57
   18afa:	4864      	ldr	r0, [pc, #400]	; (18c8c <bt_mesh_proxy_adv_start+0x2bc>)
   18afc:	f00e fee9 	bl	278d2 <printk>
		return -ENOENT;
   18b00:	f06f 0401 	mvn.w	r4, #1
   18b04:	e7c2      	b.n	18a8c <bt_mesh_proxy_adv_start+0xbc>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   18b06:	f012 f9e1 	bl	2aecc <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   18b0a:	2801      	cmp	r0, #1
   18b0c:	d0e1      	beq.n	18ad2 <bt_mesh_proxy_adv_start+0x102>
		sub = bt_mesh_subnet_next(sub);
   18b0e:	4620      	mov	r0, r4
   18b10:	f7f7 fb1c 	bl	1014c <bt_mesh_subnet_next>
	} while (sub != beacon_sub);
   18b14:	6833      	ldr	r3, [r6, #0]
   18b16:	4298      	cmp	r0, r3
		sub = bt_mesh_subnet_next(sub);
   18b18:	4604      	mov	r4, r0
	} while (sub != beacon_sub);
   18b1a:	d1d4      	bne.n	18ac6 <bt_mesh_proxy_adv_start+0xf6>
   18b1c:	e7e0      	b.n	18ae0 <bt_mesh_proxy_adv_start+0x110>
	int count = 0;
   18b1e:	2300      	movs	r3, #0
	(void)bt_mesh_subnet_find(sub_count_cb, &count);
   18b20:	a902      	add	r1, sp, #8
   18b22:	485b      	ldr	r0, [pc, #364]	; (18c90 <bt_mesh_proxy_adv_start+0x2c0>)
	int count = 0;
   18b24:	9302      	str	r3, [sp, #8]
	(void)bt_mesh_subnet_find(sub_count_cb, &count);
   18b26:	f7f7 faef 	bl	10108 <bt_mesh_subnet_find>
	return count;
   18b2a:	9f02      	ldr	r7, [sp, #8]
	if (subnet_count > 1) {
   18b2c:	2f01      	cmp	r7, #1
   18b2e:	f340 8088 	ble.w	18c42 <bt_mesh_proxy_adv_start+0x272>
		max_timeout = NODE_ID_TIMEOUT / MAX(subnet_count, 6);
   18b32:	2f06      	cmp	r7, #6
   18b34:	bfb8      	it	lt
   18b36:	2706      	movlt	r7, #6
   18b38:	f64e 2360 	movw	r3, #60000	; 0xea60
   18b3c:	fbb3 f7f7 	udiv	r7, r3, r7
		max_timeout = MAX(max_timeout, 1 * MSEC_PER_SEC);
   18b40:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   18b44:	bf38      	it	cc
   18b46:	f44f 777a 	movcc.w	r7, #1000	; 0x3e8
	if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
   18b4a:	7fec      	ldrb	r4, [r5, #31]
   18b4c:	2c01      	cmp	r4, #1
   18b4e:	d17f      	bne.n	18c50 <bt_mesh_proxy_adv_start+0x280>
   18b50:	f015 fb0b 	bl	2e16a <z_impl_k_uptime_ticks>
   18b54:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   18b58:	fba0 890e 	umull	r8, r9, r0, lr
   18b5c:	fb0e 9901 	mla	r9, lr, r1, r9
   18b60:	ea4f 32d8 	mov.w	r2, r8, lsr #15
		uint32_t active = k_uptime_get_32() - sub->node_id_start;
   18b64:	6a2b      	ldr	r3, [r5, #32]
   18b66:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
   18b6a:	1ad0      	subs	r0, r2, r3
		if (active < NODE_ID_TIMEOUT) {
   18b6c:	f64e 215f 	movw	r1, #59999	; 0xea5f
   18b70:	4288      	cmp	r0, r1
   18b72:	f04f 0c00 	mov.w	ip, #0
   18b76:	d867      	bhi.n	18c48 <bt_mesh_proxy_adv_start+0x278>
	proxy_svc_data[2] = ID_TYPE_NODE;
   18b78:	f8df 8120 	ldr.w	r8, [pc, #288]	; 18c9c <bt_mesh_proxy_adv_start+0x2cc>
			remaining = NODE_ID_TIMEOUT - active;
   18b7c:	f503 476a 	add.w	r7, r3, #59904	; 0xea00
	err = bt_rand(proxy_svc_data + 11, 8);
   18b80:	f108 090b 	add.w	r9, r8, #11
			remaining = NODE_ID_TIMEOUT - active;
   18b84:	3760      	adds	r7, #96	; 0x60
	err = bt_rand(proxy_svc_data + 11, 8);
   18b86:	2108      	movs	r1, #8
   18b88:	4648      	mov	r0, r9
	proxy_svc_data[2] = ID_TYPE_NODE;
   18b8a:	f888 4002 	strb.w	r4, [r8, #2]
			remaining = NODE_ID_TIMEOUT - active;
   18b8e:	1abf      	subs	r7, r7, r2
	err = bt_rand(proxy_svc_data + 11, 8);
   18b90:	f013 feba 	bl	2c908 <bt_rand>
	if (err) {
   18b94:	4604      	mov	r4, r0
   18b96:	bb80      	cbnz	r0, 18bfa <bt_mesh_proxy_adv_start+0x22a>
	memcpy(tmp + 6, proxy_svc_data + 11, 8);
   18b98:	f8d8 300b 	ldr.w	r3, [r8, #11]
   18b9c:	f8cd 300e 	str.w	r3, [sp, #14]
   18ba0:	f8d8 300f 	ldr.w	r3, [r8, #15]
   18ba4:	f8cd 3012 	str.w	r3, [sp, #18]
	(void)memset(tmp, 0, 6);
   18ba8:	9002      	str	r0, [sp, #8]
   18baa:	f8ad 000c 	strh.w	r0, [sp, #12]
	sys_put_be16(bt_mesh_primary_addr(), tmp + 14);
   18bae:	f7fa f8dd 	bl	12d6c <bt_mesh_primary_addr>
	dst[0] = val >> 8;
   18bb2:	ba40      	rev16	r0, r0
   18bb4:	f8ad 0016 	strh.w	r0, [sp, #22]
	err = bt_encrypt_be(sub->keys[SUBNET_KEY_TX_IDX(sub)].identity, tmp,
   18bb8:	7fa8      	ldrb	r0, [r5, #30]
   18bba:	aa02      	add	r2, sp, #8
   18bbc:	2802      	cmp	r0, #2
   18bbe:	bf0c      	ite	eq
   18bc0:	20c0      	moveq	r0, #192	; 0xc0
   18bc2:	2066      	movne	r0, #102	; 0x66
   18bc4:	4611      	mov	r1, r2
   18bc6:	4428      	add	r0, r5
   18bc8:	f013 fea0 	bl	2c90c <bt_encrypt_be>
	if (err) {
   18bcc:	4604      	mov	r4, r0
   18bce:	b9a0      	cbnz	r0, 18bfa <bt_mesh_proxy_adv_start+0x22a>
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
   18bd0:	ab04      	add	r3, sp, #16
   18bd2:	cb03      	ldmia	r3!, {r0, r1}
	err = bt_mesh_adv_start(&fast_adv_param, duration, node_id_ad,
   18bd4:	4a2f      	ldr	r2, [pc, #188]	; (18c94 <bt_mesh_proxy_adv_start+0x2c4>)
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
   18bd6:	f8c8 0003 	str.w	r0, [r8, #3]
   18bda:	f8c8 1007 	str.w	r1, [r8, #7]
	err = bt_mesh_adv_start(&fast_adv_param, duration, node_id_ad,
   18bde:	2303      	movs	r3, #3
   18be0:	e9cd 4400 	strd	r4, r4, [sp]
   18be4:	4639      	mov	r1, r7
   18be6:	4826      	ldr	r0, [pc, #152]	; (18c80 <bt_mesh_proxy_adv_start+0x2b0>)
   18be8:	f7fc fbb2 	bl	15350 <bt_mesh_adv_start>
	if (err) {
   18bec:	4604      	mov	r4, r0
   18bee:	b120      	cbz	r0, 18bfa <bt_mesh_proxy_adv_start+0x22a>
		BT_WARN("Failed to advertise using Node ID (err %d)", err);
   18bf0:	4602      	mov	r2, r0
   18bf2:	2157      	movs	r1, #87	; 0x57
   18bf4:	4828      	ldr	r0, [pc, #160]	; (18c98 <bt_mesh_proxy_adv_start+0x2c8>)
   18bf6:	f00e fe6c 	bl	278d2 <printk>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED) {
   18bfa:	7feb      	ldrb	r3, [r5, #31]
   18bfc:	b9e3      	cbnz	r3, 18c38 <bt_mesh_proxy_adv_start+0x268>
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
   18bfe:	7fa9      	ldrb	r1, [r5, #30]
	proxy_svc_data[2] = ID_TYPE_NET;
   18c00:	4a26      	ldr	r2, [pc, #152]	; (18c9c <bt_mesh_proxy_adv_start+0x2cc>)
	err = bt_mesh_adv_start(&slow_adv_param, duration, net_id_ad,
   18c02:	481e      	ldr	r0, [pc, #120]	; (18c7c <bt_mesh_proxy_adv_start+0x2ac>)
	proxy_svc_data[2] = ID_TYPE_NET;
   18c04:	7093      	strb	r3, [r2, #2]
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
   18c06:	2902      	cmp	r1, #2
   18c08:	bf0c      	ite	eq
   18c0a:	21b8      	moveq	r1, #184	; 0xb8
   18c0c:	215e      	movne	r1, #94	; 0x5e
   18c0e:	440d      	add	r5, r1
   18c10:	6829      	ldr	r1, [r5, #0]
   18c12:	f8c2 1003 	str.w	r1, [r2, #3]
   18c16:	6869      	ldr	r1, [r5, #4]
   18c18:	f8c2 1007 	str.w	r1, [r2, #7]
	err = bt_mesh_adv_start(&slow_adv_param, duration, net_id_ad,
   18c1c:	e9cd 3300 	strd	r3, r3, [sp]
   18c20:	4a1f      	ldr	r2, [pc, #124]	; (18ca0 <bt_mesh_proxy_adv_start+0x2d0>)
   18c22:	2303      	movs	r3, #3
   18c24:	4639      	mov	r1, r7
   18c26:	f7fc fb93 	bl	15350 <bt_mesh_adv_start>
	if (err) {
   18c2a:	4604      	mov	r4, r0
   18c2c:	b120      	cbz	r0, 18c38 <bt_mesh_proxy_adv_start+0x268>
		BT_WARN("Failed to advertise using Network ID (err %d)", err);
   18c2e:	4602      	mov	r2, r0
   18c30:	2157      	movs	r1, #87	; 0x57
   18c32:	481c      	ldr	r0, [pc, #112]	; (18ca4 <bt_mesh_proxy_adv_start+0x2d4>)
   18c34:	f00e fe4d 	bl	278d2 <printk>
	beacon_sub = bt_mesh_subnet_next(beacon_sub);
   18c38:	6830      	ldr	r0, [r6, #0]
   18c3a:	f7f7 fa87 	bl	1014c <bt_mesh_subnet_next>
   18c3e:	6030      	str	r0, [r6, #0]
	return err;
   18c40:	e724      	b.n	18a8c <bt_mesh_proxy_adv_start+0xbc>
	int32_t remaining = SYS_FOREVER_MS;
   18c42:	f04f 37ff 	mov.w	r7, #4294967295
   18c46:	e780      	b.n	18b4a <bt_mesh_proxy_adv_start+0x17a>
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   18c48:	f885 c01f 	strb.w	ip, [r5, #31]
	sub->node_id_start = 0U;
   18c4c:	f8c5 c020 	str.w	ip, [r5, #32]
	int err = -EBUSY;
   18c50:	f06f 040f 	mvn.w	r4, #15
   18c54:	e7d1      	b.n	18bfa <bt_mesh_proxy_adv_start+0x22a>
	return -ENOTSUP;
   18c56:	f06f 0485 	mvn.w	r4, #133	; 0x85
   18c5a:	e717      	b.n	18a8c <bt_mesh_proxy_adv_start+0xbc>
		return -ENOMEM;
   18c5c:	f06f 040b 	mvn.w	r4, #11
   18c60:	e714      	b.n	18a8c <bt_mesh_proxy_adv_start+0xbc>
   18c62:	bf00      	nop
   18c64:	20005852 	.word	0x20005852
   18c68:	20001cc8 	.word	0x20001cc8
   18c6c:	20001cc6 	.word	0x20001cc6
   18c70:	00035768 	.word	0x00035768
   18c74:	20005853 	.word	0x20005853
   18c78:	0002fee0 	.word	0x0002fee0
   18c7c:	0002fef8 	.word	0x0002fef8
   18c80:	0002fe9c 	.word	0x0002fe9c
   18c84:	20004020 	.word	0x20004020
   18c88:	20004024 	.word	0x20004024
   18c8c:	00035794 	.word	0x00035794
   18c90:	0002c0c7 	.word	0x0002c0c7
   18c94:	0002fec8 	.word	0x0002fec8
   18c98:	000357b4 	.word	0x000357b4
   18c9c:	20001cda 	.word	0x20001cda
   18ca0:	0002feb0 	.word	0x0002feb0
   18ca4:	000357e4 	.word	0x000357e4

00018ca8 <bt_mesh_proxy_init>:
	.connected = proxy_connected,
	.disconnected = proxy_disconnected,
};

int bt_mesh_proxy_init(void)
{
   18ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Initialize the client receive buffers */
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		client->buf.size = CLIENT_BUF_SIZE;
   18cac:	4c17      	ldr	r4, [pc, #92]	; (18d0c <bt_mesh_proxy_init+0x64>)
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   18cae:	4d18      	ldr	r5, [pc, #96]	; (18d10 <bt_mesh_proxy_init+0x68>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   18cb0:	4e18      	ldr	r6, [pc, #96]	; (18d14 <bt_mesh_proxy_init+0x6c>)
   18cb2:	6525      	str	r5, [r4, #80]	; 0x50
   18cb4:	2730      	movs	r7, #48	; 0x30
		client->buf.size = CLIENT_BUF_SIZE;
   18cb6:	f04f 0844 	mov.w	r8, #68	; 0x44
   18cba:	463a      	mov	r2, r7
   18cbc:	2100      	movs	r1, #0
   18cbe:	f104 0018 	add.w	r0, r4, #24
   18cc2:	f8a4 804e 	strh.w	r8, [r4, #78]	; 0x4e
   18cc6:	f015 fb2b 	bl	2e320 <memset>
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   18cca:	eb05 0308 	add.w	r3, r5, r8
   18cce:	463a      	mov	r2, r7
   18cd0:	2100      	movs	r1, #0
   18cd2:	f104 0070 	add.w	r0, r4, #112	; 0x70
   18cd6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   18cda:	61e6      	str	r6, [r4, #28]
		client->buf.size = CLIENT_BUF_SIZE;
   18cdc:	f8a4 80a6 	strh.w	r8, [r4, #166]	; 0xa6
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   18ce0:	3588      	adds	r5, #136	; 0x88
   18ce2:	f015 fb1d 	bl	2e320 <memset>
   18ce6:	463a      	mov	r2, r7
   18ce8:	2100      	movs	r1, #0
   18cea:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   18cee:	6766      	str	r6, [r4, #116]	; 0x74
		client->buf.size = CLIENT_BUF_SIZE;
   18cf0:	f8a4 80fe 	strh.w	r8, [r4, #254]	; 0xfe
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   18cf4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   18cf8:	f015 fb12 	bl	2e320 <memset>

		k_delayed_work_init(&client->sar_timer, proxy_sar_timeout);
	}

	bt_conn_cb_register(&conn_callbacks);
   18cfc:	4806      	ldr	r0, [pc, #24]	; (18d18 <bt_mesh_proxy_init+0x70>)
   18cfe:	f8c4 60cc 	str.w	r6, [r4, #204]	; 0xcc
   18d02:	f7f2 f96d 	bl	afe0 <bt_conn_cb_register>

	return 0;
}
   18d06:	2000      	movs	r0, #0
   18d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18d0c:	20000c78 	.word	0x20000c78
   18d10:	2000aacc 	.word	0x2000aacc
   18d14:	00018129 	.word	0x00018129
   18d18:	20001464 	.word	0x20001464

00018d1c <bt_mesh_proxy_on_idle>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18d1c:	4b09      	ldr	r3, [pc, #36]	; (18d44 <bt_mesh_proxy_on_idle+0x28>)
   18d1e:	f3bf 8f5b 	dmb	ish
   18d22:	681b      	ldr	r3, [r3, #0]
   18d24:	f3bf 8f5b 	dmb	ish

void bt_mesh_proxy_on_idle(struct bt_mesh_proxy_idle_cb *cb)
{
	if (!atomic_get(&pending_notifications)) {
   18d28:	b90b      	cbnz	r3, 18d2e <bt_mesh_proxy_on_idle+0x12>
		cb->cb();
   18d2a:	6843      	ldr	r3, [r0, #4]
   18d2c:	4718      	bx	r3
	parent->next = child;
   18d2e:	2300      	movs	r3, #0
   18d30:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   18d32:	4b05      	ldr	r3, [pc, #20]	; (18d48 <bt_mesh_proxy_on_idle+0x2c>)
   18d34:	685a      	ldr	r2, [r3, #4]
   18d36:	b912      	cbnz	r2, 18d3e <bt_mesh_proxy_on_idle+0x22>
	list->head = node;
   18d38:	e9c3 0000 	strd	r0, r0, [r3]
   18d3c:	4770      	bx	lr
	parent->next = child;
   18d3e:	6010      	str	r0, [r2, #0]
	list->tail = node;
   18d40:	6058      	str	r0, [r3, #4]
		return;
	}

	sys_slist_append(&idle_waiters, &cb->n);
}
   18d42:	4770      	bx	lr
   18d44:	20004030 	.word	0x20004030
   18d48:	20004028 	.word	0x20004028

00018d4c <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   18d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
   18d50:	4f11      	ldr	r7, [pc, #68]	; (18d98 <mayfly_init+0x4c>)
   18d52:	f8df 9048 	ldr.w	r9, [pc, #72]	; 18d9c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
   18d56:	2604      	movs	r6, #4
	while (callee_id--) {
   18d58:	3e01      	subs	r6, #1
   18d5a:	b2f6      	uxtb	r6, r6
   18d5c:	2eff      	cmp	r6, #255	; 0xff
   18d5e:	d019      	beq.n	18d94 <mayfly_init+0x48>
   18d60:	b233      	sxth	r3, r6
   18d62:	ea4f 0883 	mov.w	r8, r3, lsl #2
   18d66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18d6a:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
   18d6c:	2404      	movs	r4, #4
   18d6e:	f04f 0a0c 	mov.w	sl, #12
   18d72:	e00a      	b.n	18d8a <mayfly_init+0x3e>
			memq_init(&mfl[callee_id][caller_id],
   18d74:	fb1a 5104 	smlabb	r1, sl, r4, r5
   18d78:	1d0a      	adds	r2, r1, #4
   18d7a:	eb04 0008 	add.w	r0, r4, r8
   18d7e:	443a      	add	r2, r7
   18d80:	4439      	add	r1, r7
   18d82:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
   18d86:	f013 fac5 	bl	2c314 <memq_init>
		while (caller_id--) {
   18d8a:	3c01      	subs	r4, #1
   18d8c:	b2e4      	uxtb	r4, r4
   18d8e:	2cff      	cmp	r4, #255	; 0xff
   18d90:	d1f0      	bne.n	18d74 <mayfly_init+0x28>
   18d92:	e7e1      	b.n	18d58 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   18d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18d98:	200040b4 	.word	0x200040b4
   18d9c:	20004034 	.word	0x20004034

00018da0 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   18da0:	b4f0      	push	{r4, r5, r6, r7}
   18da2:	2430      	movs	r4, #48	; 0x30
   18da4:	4b10      	ldr	r3, [pc, #64]	; (18de8 <mayfly_enable+0x48>)
   18da6:	270c      	movs	r7, #12
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   18da8:	434c      	muls	r4, r1
   18daa:	fb07 4400 	mla	r4, r7, r0, r4
{
   18dae:	4605      	mov	r5, r0
   18db0:	460e      	mov	r6, r1
		if (mft[callee_id][caller_id].enable_req ==
   18db2:	4423      	add	r3, r4
	if (enable) {
   18db4:	b152      	cbz	r2, 18dcc <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
   18db6:	7a59      	ldrb	r1, [r3, #9]
   18db8:	7a18      	ldrb	r0, [r3, #8]
   18dba:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   18dbc:	bf04      	itt	eq
   18dbe:	3101      	addeq	r1, #1
   18dc0:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   18dc2:	4628      	mov	r0, r5
   18dc4:	4631      	mov	r1, r6

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   18dc6:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
   18dc8:	f006 bca6 	b.w	1f718 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   18dcc:	7a9c      	ldrb	r4, [r3, #10]
   18dce:	7ada      	ldrb	r2, [r3, #11]
   18dd0:	42a2      	cmp	r2, r4
   18dd2:	d107      	bne.n	18de4 <mayfly_enable+0x44>
			mft[callee_id][caller_id].disable_req++;
   18dd4:	3201      	adds	r2, #1
   18dd6:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   18dd8:	4b04      	ldr	r3, [pc, #16]	; (18dec <mayfly_enable+0x4c>)
   18dda:	2201      	movs	r2, #1
   18ddc:	545a      	strb	r2, [r3, r1]
}
   18dde:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
   18de0:	f006 bcd6 	b.w	1f790 <mayfly_pend>
}
   18de4:	bcf0      	pop	{r4, r5, r6, r7}
   18de6:	4770      	bx	lr
   18de8:	200040b4 	.word	0x200040b4
   18dec:	20005854 	.word	0x20005854

00018df0 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   18df0:	b570      	push	{r4, r5, r6, lr}
   18df2:	4606      	mov	r6, r0
   18df4:	460d      	mov	r5, r1
   18df6:	461c      	mov	r4, r3
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   18df8:	b1a2      	cbz	r2, 18e24 <mayfly_enqueue+0x34>
   18dfa:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
   18dfc:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   18dfe:	7820      	ldrb	r0, [r4, #0]
   18e00:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
   18e02:	f010 0003 	ands.w	r0, r0, #3
   18e06:	d02c      	beq.n	18e62 <mayfly_enqueue+0x72>
		if (chain) {
   18e08:	b31b      	cbz	r3, 18e52 <mayfly_enqueue+0x62>
			if (state != 1U) {
   18e0a:	2801      	cmp	r0, #1
   18e0c:	d028      	beq.n	18e60 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
   18e0e:	3201      	adds	r2, #1
   18e10:	b2d2      	uxtb	r2, r2
   18e12:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   18e14:	4b1c      	ldr	r3, [pc, #112]	; (18e88 <mayfly_enqueue+0x98>)
   18e16:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   18e18:	4629      	mov	r1, r5
   18e1a:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   18e1c:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   18e1e:	f006 fcb7 	bl	1f790 <mayfly_pend>
   18e22:	e01c      	b.n	18e5e <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   18e24:	f014 faa2 	bl	2d36c <mayfly_prio_is_equal>
   18e28:	2800      	cmp	r0, #0
   18e2a:	d0e6      	beq.n	18dfa <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   18e2c:	4629      	mov	r1, r5
   18e2e:	4630      	mov	r0, r6
   18e30:	f006 fc90 	bl	1f754 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   18e34:	2800      	cmp	r0, #0
   18e36:	d0e0      	beq.n	18dfa <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   18e38:	2330      	movs	r3, #48	; 0x30
   18e3a:	220c      	movs	r2, #12
   18e3c:	436b      	muls	r3, r5
   18e3e:	fb02 3306 	mla	r3, r2, r6, r3
   18e42:	4a12      	ldr	r2, [pc, #72]	; (18e8c <mayfly_enqueue+0x9c>)
   18e44:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
   18e46:	7a93      	ldrb	r3, [r2, #10]
   18e48:	7ad2      	ldrb	r2, [r2, #11]
   18e4a:	1a9b      	subs	r3, r3, r2
   18e4c:	bf18      	it	ne
   18e4e:	2301      	movne	r3, #1
   18e50:	e7d4      	b.n	18dfc <mayfly_enqueue+0xc>
		m->_req = ack + 2;
   18e52:	3202      	adds	r2, #2
   18e54:	b2d2      	uxtb	r2, r2
   18e56:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
   18e58:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   18e5c:	4798      	blx	r3

	return 0;
   18e5e:	2000      	movs	r0, #0
}
   18e60:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
   18e62:	2b00      	cmp	r3, #0
   18e64:	d0f8      	beq.n	18e58 <mayfly_enqueue+0x68>
	m->_req = ack + 1;
   18e66:	3201      	adds	r2, #1
   18e68:	b2d2      	uxtb	r2, r2
   18e6a:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   18e6c:	2304      	movs	r3, #4
   18e6e:	2230      	movs	r2, #48	; 0x30
   18e70:	fb12 3205 	smlabb	r2, r2, r5, r3
   18e74:	230c      	movs	r3, #12
   18e76:	fb13 2306 	smlabb	r3, r3, r6, r2
   18e7a:	4a04      	ldr	r2, [pc, #16]	; (18e8c <mayfly_enqueue+0x9c>)
   18e7c:	6860      	ldr	r0, [r4, #4]
   18e7e:	441a      	add	r2, r3
   18e80:	4621      	mov	r1, r4
   18e82:	f013 fa55 	bl	2c330 <memq_enqueue>
   18e86:	e7c5      	b.n	18e14 <mayfly_enqueue+0x24>
   18e88:	20005854 	.word	0x20005854
   18e8c:	200040b4 	.word	0x200040b4

00018e90 <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
   18e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   18e94:	4b57      	ldr	r3, [pc, #348]	; (18ff4 <mayfly_run+0x164>)
   18e96:	5c1a      	ldrb	r2, [r3, r0]
{
   18e98:	b089      	sub	sp, #36	; 0x24
   18e9a:	4605      	mov	r5, r0
	if (!mfp[callee_id]) {
   18e9c:	2a00      	cmp	r2, #0
   18e9e:	f000 80a2 	beq.w	18fe6 <mayfly_run+0x156>
		return;
	}
	mfp[callee_id] = 0U;
   18ea2:	2600      	movs	r6, #0
   18ea4:	541e      	strb	r6, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   18ea6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18eaa:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   18eac:	f8df b148 	ldr.w	fp, [pc, #328]	; 18ff8 <mayfly_run+0x168>
   18eb0:	9304      	str	r3, [sp, #16]
   18eb2:	2404      	movs	r4, #4
   18eb4:	233c      	movs	r3, #60	; 0x3c
   18eb6:	fb13 4300 	smlabb	r3, r3, r0, r4
   18eba:	445b      	add	r3, fp
   18ebc:	9303      	str	r3, [sp, #12]
	uint8_t disable = 0U;
   18ebe:	9600      	str	r6, [sp, #0]
   18ec0:	46d9      	mov	r9, fp
	while (caller_id--) {
   18ec2:	3c01      	subs	r4, #1
   18ec4:	b2e4      	uxtb	r4, r4
   18ec6:	2cff      	cmp	r4, #255	; 0xff
   18ec8:	d10c      	bne.n	18ee4 <mayfly_run+0x54>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   18eca:	9b00      	ldr	r3, [sp, #0]
   18ecc:	2b00      	cmp	r3, #0
   18ece:	f000 808a 	beq.w	18fe6 <mayfly_run+0x156>
   18ed2:	2e00      	cmp	r6, #0
   18ed4:	f040 8087 	bne.w	18fe6 <mayfly_run+0x156>
		mayfly_enable_cb(callee_id, callee_id, 0);
   18ed8:	4632      	mov	r2, r6
   18eda:	4629      	mov	r1, r5
   18edc:	4628      	mov	r0, r5
   18ede:	f006 fc1b 	bl	1f718 <mayfly_enable_cb>
   18ee2:	e080      	b.n	18fe6 <mayfly_run+0x156>
		struct mayfly *m = 0;
   18ee4:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   18ee6:	270c      	movs	r7, #12
		struct mayfly *m = 0;
   18ee8:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   18eea:	4367      	muls	r7, r4
   18eec:	2330      	movs	r3, #48	; 0x30
   18eee:	fb03 7305 	mla	r3, r3, r5, r7
   18ef2:	eb09 0103 	add.w	r1, r9, r3
   18ef6:	aa07      	add	r2, sp, #28
   18ef8:	f859 0003 	ldr.w	r0, [r9, r3]
   18efc:	6849      	ldr	r1, [r1, #4]
   18efe:	f013 fa1e 	bl	2c33e <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
   18f02:	9a04      	ldr	r2, [sp, #16]
   18f04:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18f08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18f0c:	444b      	add	r3, r9
   18f0e:	e9cd 7301 	strd	r7, r3, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
   18f12:	4682      	mov	sl, r0
		while (link) {
   18f14:	f1ba 0f00 	cmp.w	sl, #0
   18f18:	d047      	beq.n	18faa <mayfly_run+0x11a>
			state = (m->_req - m->_ack) & 0x03;
   18f1a:	9b07      	ldr	r3, [sp, #28]
   18f1c:	f893 8000 	ldrb.w	r8, [r3]
   18f20:	785a      	ldrb	r2, [r3, #1]
   18f22:	eba8 0802 	sub.w	r8, r8, r2
   18f26:	f008 0803 	and.w	r8, r8, #3
			if (state == 1U) {
   18f2a:	f1b8 0f01 	cmp.w	r8, #1
   18f2e:	d104      	bne.n	18f3a <mayfly_run+0xaa>
				m->_ack--;
   18f30:	3a01      	subs	r2, #1
   18f32:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
   18f34:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
   18f38:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
   18f3a:	9f07      	ldr	r7, [sp, #28]
	req = m->_req;
   18f3c:	783b      	ldrb	r3, [r7, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   18f3e:	787a      	ldrb	r2, [r7, #1]
	req = m->_req;
   18f40:	b2db      	uxtb	r3, r3
	if (((req - m->_ack) & 0x03) != 1U) {
   18f42:	1a9a      	subs	r2, r3, r2
   18f44:	f002 0203 	and.w	r2, r2, #3
   18f48:	2a01      	cmp	r2, #1
   18f4a:	9305      	str	r3, [sp, #20]
   18f4c:	d01b      	beq.n	18f86 <mayfly_run+0xf6>
		memq_dequeue(mft[callee_id][caller_id].tail,
   18f4e:	9b01      	ldr	r3, [sp, #4]
   18f50:	9902      	ldr	r1, [sp, #8]
   18f52:	2030      	movs	r0, #48	; 0x30
   18f54:	fb00 3005 	mla	r0, r0, r5, r3
   18f58:	4b27      	ldr	r3, [pc, #156]	; (18ff8 <mayfly_run+0x168>)
   18f5a:	4418      	add	r0, r3
   18f5c:	2200      	movs	r2, #0
   18f5e:	6840      	ldr	r0, [r0, #4]
   18f60:	f013 f9f5 	bl	2c34e <memq_dequeue>
		m->_ack = req;
   18f64:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
   18f66:	787a      	ldrb	r2, [r7, #1]
		m->_ack = req;
   18f68:	707b      	strb	r3, [r7, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   18f6a:	783b      	ldrb	r3, [r7, #0]
		m->_link = link;
   18f6c:	f8c7 a004 	str.w	sl, [r7, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   18f70:	1a9b      	subs	r3, r3, r2
   18f72:	f003 0303 	and.w	r3, r3, #3
   18f76:	2b01      	cmp	r3, #1
   18f78:	d105      	bne.n	18f86 <mayfly_run+0xf6>
			m->_ack = ack;
   18f7a:	707a      	strb	r2, [r7, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   18f7c:	4639      	mov	r1, r7
   18f7e:	9a03      	ldr	r2, [sp, #12]
   18f80:	4650      	mov	r0, sl
   18f82:	f013 f9d5 	bl	2c330 <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
   18f86:	9a01      	ldr	r2, [sp, #4]
   18f88:	2330      	movs	r3, #48	; 0x30
   18f8a:	fb03 2305 	mla	r3, r3, r5, r2
   18f8e:	eb09 0103 	add.w	r1, r9, r3
   18f92:	aa07      	add	r2, sp, #28
   18f94:	6849      	ldr	r1, [r1, #4]
   18f96:	f859 0003 	ldr.w	r0, [r9, r3]
   18f9a:	f013 f9d0 	bl	2c33e <memq_peek>
			if (state == 1U) {
   18f9e:	f1b8 0f01 	cmp.w	r8, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   18fa2:	4682      	mov	sl, r0
			if (state == 1U) {
   18fa4:	d1b6      	bne.n	18f14 <mayfly_run+0x84>
				if (caller_id || link) {
   18fa6:	b9bc      	cbnz	r4, 18fd8 <mayfly_run+0x148>
   18fa8:	b9b0      	cbnz	r0, 18fd8 <mayfly_run+0x148>
		if (mft[callee_id][caller_id].disable_req !=
   18faa:	2230      	movs	r2, #48	; 0x30
   18fac:	4912      	ldr	r1, [pc, #72]	; (18ff8 <mayfly_run+0x168>)
   18fae:	230c      	movs	r3, #12
   18fb0:	436a      	muls	r2, r5
   18fb2:	fb03 2204 	mla	r2, r3, r4, r2
   18fb6:	440a      	add	r2, r1
   18fb8:	7a91      	ldrb	r1, [r2, #10]
   18fba:	7ad0      	ldrb	r0, [r2, #11]
   18fbc:	4288      	cmp	r0, r1
   18fbe:	d115      	bne.n	18fec <mayfly_run+0x15c>
		if (mft[callee_id][caller_id].enable_req !=
   18fc0:	2230      	movs	r2, #48	; 0x30
   18fc2:	436a      	muls	r2, r5
   18fc4:	fb03 2304 	mla	r3, r3, r4, r2
   18fc8:	445b      	add	r3, fp
   18fca:	7a1a      	ldrb	r2, [r3, #8]
   18fcc:	7a59      	ldrb	r1, [r3, #9]
   18fce:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
   18fd0:	bf1c      	itt	ne
   18fd2:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
   18fd4:	2601      	movne	r6, #1
   18fd6:	e774      	b.n	18ec2 <mayfly_run+0x32>
					mfp[callee_id] = 1U;
   18fd8:	4b06      	ldr	r3, [pc, #24]	; (18ff4 <mayfly_run+0x164>)
   18fda:	2201      	movs	r2, #1
					mayfly_pend(callee_id, callee_id);
   18fdc:	4629      	mov	r1, r5
   18fde:	4628      	mov	r0, r5
					mfp[callee_id] = 1U;
   18fe0:	555a      	strb	r2, [r3, r5]
					mayfly_pend(callee_id, callee_id);
   18fe2:	f006 fbd5 	bl	1f790 <mayfly_pend>
	}
}
   18fe6:	b009      	add	sp, #36	; 0x24
   18fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
   18fec:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
   18fee:	2201      	movs	r2, #1
   18ff0:	9200      	str	r2, [sp, #0]
   18ff2:	e7e5      	b.n	18fc0 <mayfly_run+0x130>
   18ff4:	20005854 	.word	0x20005854
   18ff8:	200040b4 	.word	0x200040b4

00018ffc <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
   18ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19000:	b08f      	sub	sp, #60	; 0x3c
	uint8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
   19002:	7fc3      	ldrb	r3, [r0, #31]
   19004:	9304      	str	r3, [sp, #16]
{
   19006:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
   19008:	2b00      	cmp	r3, #0
   1900a:	f040 83cf 	bne.w	197ac <ticker_job+0x7b0>
		return;
	}
	instance->job_guard = 1U;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
   1900e:	6943      	ldr	r3, [r0, #20]
   19010:	9307      	str	r3, [sp, #28]

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   19012:	7ac1      	ldrb	r1, [r0, #11]
   19014:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
   19016:	2201      	movs	r2, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   19018:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
   1901a:	7782      	strb	r2, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1901c:	d059      	beq.n	190d2 <ticker_job+0xd6>
	uint8_t idx = *ticks_elapsed_index + 1;
   1901e:	4413      	add	r3, r2
   19020:	b2db      	uxtb	r3, r3
		idx = 0U;
   19022:	2b02      	cmp	r3, #2
   19024:	bf08      	it	eq
   19026:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   19028:	7283      	strb	r3, [r0, #10]
		ticker_next_elapsed(&instance->ticks_elapsed_first);

		ticks_elapsed =
   1902a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;

		flag_elapsed = 1U;
   1902e:	9205      	str	r2, [sp, #20]
		ticks_elapsed =
   19030:	68db      	ldr	r3, [r3, #12]
   19032:	9301      	str	r3, [sp, #4]
		instance->ticks_current += ticks_elapsed;
   19034:	9901      	ldr	r1, [sp, #4]
   19036:	9b07      	ldr	r3, [sp, #28]
   19038:	440b      	add	r3, r1
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   1903a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1903e:	6143      	str	r3, [r0, #20]
	flag_compare_update = 0U;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
   19040:	7f63      	ldrb	r3, [r4, #29]
   19042:	9306      	str	r3, [sp, #24]
	node = &instance->nodes[0];
   19044:	6823      	ldr	r3, [r4, #0]
   19046:	9309      	str	r3, [sp, #36]	; 0x24
	users = &instance->users[0];
   19048:	6863      	ldr	r3, [r4, #4]
   1904a:	930d      	str	r3, [sp, #52]	; 0x34
	pending = 0U;
   1904c:	2300      	movs	r3, #0
   1904e:	9308      	str	r3, [sp, #32]
	count_user = instance->count_user;
   19050:	f894 b009 	ldrb.w	fp, [r4, #9]
	insert_head = TICKER_NULL;
   19054:	23ff      	movs	r3, #255	; 0xff
   19056:	9303      	str	r3, [sp, #12]
	while (count_user--) {
   19058:	f10b 33ff 	add.w	r3, fp, #4294967295
   1905c:	fa5f fb83 	uxtb.w	fp, r3
   19060:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   19064:	d139      	bne.n	190da <ticker_job+0xde>

	/* Manage user operations (updates and deletions) in ticker list */
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
   19066:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
   19068:	9a06      	ldr	r2, [sp, #24]
   1906a:	1a9b      	subs	r3, r3, r2
   1906c:	bf18      	it	ne
   1906e:	2301      	movne	r3, #1
   19070:	9302      	str	r3, [sp, #8]
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
   19072:	9b05      	ldr	r3, [sp, #20]
   19074:	2b00      	cmp	r3, #0
   19076:	f000 8299 	beq.w	195ac <ticker_job+0x5b0>
	ticks_now = cntr_cnt_get();
   1907a:	f005 ffa1 	bl	1efc0 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1907e:	9b07      	ldr	r3, [sp, #28]
	node = &instance->nodes[0];
   19080:	f8dd 8004 	ldr.w	r8, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   19084:	1ac0      	subs	r0, r0, r3
	node = &instance->nodes[0];
   19086:	6823      	ldr	r3, [r4, #0]
   19088:	9309      	str	r3, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1908a:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	ticks_expired = 0U;
   1908e:	f04f 0a00 	mov.w	sl, #0
	while (instance->ticker_id_head != TICKER_NULL) {
   19092:	7f67      	ldrb	r7, [r4, #29]
   19094:	2fff      	cmp	r7, #255	; 0xff
   19096:	d00e      	beq.n	190b6 <ticker_job+0xba>
		ticker = &node[id_expired];
   19098:	b23e      	sxth	r6, r7
   1909a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1909e:	0133      	lsls	r3, r6, #4
   190a0:	930a      	str	r3, [sp, #40]	; 0x28
   190a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   190a6:	189d      	adds	r5, r3, r2
		ticks_to_expire = ticker->ticks_to_expire;
   190a8:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   190aa:	4543      	cmp	r3, r8
   190ac:	f240 8137 	bls.w	1931e <ticker_job+0x322>
			ticker->ticks_to_expire -= ticks_elapsed;
   190b0:	eba3 0308 	sub.w	r3, r3, r8
   190b4:	60ab      	str	r3, [r5, #8]
			flag_compare_update = 1U;
   190b6:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   190ba:	9b02      	ldr	r3, [sp, #8]
		ticker_job_list_insert(instance, insert_head);
   190bc:	4620      	mov	r0, r4
			flag_compare_update = 1U;
   190be:	42b9      	cmp	r1, r7
   190c0:	bf18      	it	ne
   190c2:	4613      	movne	r3, r2
		ticker_job_list_insert(instance, insert_head);
   190c4:	9903      	ldr	r1, [sp, #12]
			flag_compare_update = 1U;
   190c6:	9302      	str	r3, [sp, #8]
		ticker_job_list_insert(instance, insert_head);
   190c8:	f013 f98b 	bl	2c3e2 <ticker_job_list_insert>
	nodes = &instance->nodes[0];
   190cc:	6820      	ldr	r0, [r4, #0]
		ticker_id_head = instance->ticker_id_head;
   190ce:	7f66      	ldrb	r6, [r4, #29]
		while (ticker_id_head != TICKER_NULL) {
   190d0:	e1e9      	b.n	194a6 <ticker_job+0x4aa>
		flag_elapsed = 0U;
   190d2:	9b04      	ldr	r3, [sp, #16]
   190d4:	9305      	str	r3, [sp, #20]
		ticks_elapsed = 0U;
   190d6:	9301      	str	r3, [sp, #4]
   190d8:	e7b2      	b.n	19040 <ticker_job+0x44>
		user = &users[count_user];
   190da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   190dc:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
		user_ops = &user->user_op[0];
   190e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   190e4:	930a      	str	r3, [sp, #40]	; 0x28
		while (user->middle != user->last) {
   190e6:	f898 2003 	ldrb.w	r2, [r8, #3]
			user_op = &user_ops[user->middle];
   190ea:	2134      	movs	r1, #52	; 0x34
		while (user->middle != user->last) {
   190ec:	f898 7002 	ldrb.w	r7, [r8, #2]
   190f0:	4297      	cmp	r7, r2
   190f2:	d0b1      	beq.n	19058 <ticker_job+0x5c>
			user_op = &user_ops[user->middle];
   190f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			if (middle == user->count_user_op) {
   190f6:	f898 5000 	ldrb.w	r5, [r8]
			user_op = &user_ops[user->middle];
   190fa:	fb17 f001 	smulbb	r0, r7, r1
   190fe:	181e      	adds	r6, r3, r0
			middle = user->middle + 1;
   19100:	1c7b      	adds	r3, r7, #1
   19102:	b2db      	uxtb	r3, r3
				middle = 0U;
   19104:	429d      	cmp	r5, r3
   19106:	bf08      	it	eq
   19108:	2300      	moveq	r3, #0
			user->middle = middle;
   1910a:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1910e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19110:	5c18      	ldrb	r0, [r3, r0]
   19112:	2804      	cmp	r0, #4
   19114:	d9ea      	bls.n	190ec <ticker_job+0xf0>
			ticker = &node[user_op->id];
   19116:	7871      	ldrb	r1, [r6, #1]
   19118:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   1911c:	011b      	lsls	r3, r3, #4
   1911e:	930c      	str	r3, [sp, #48]	; 0x30
   19120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   19122:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19124:	189d      	adds	r5, r3, r2
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   19126:	2807      	cmp	r0, #7
			state = (ticker->req - ticker->ack) & 0xff;
   19128:	f895 c002 	ldrb.w	ip, [r5, #2]
   1912c:	786a      	ldrb	r2, [r5, #1]
   1912e:	eba2 020c 	sub.w	r2, r2, ip
   19132:	b2d2      	uxtb	r2, r2
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   19134:	d80e      	bhi.n	19154 <ticker_job+0x158>
   19136:	b16a      	cbz	r2, 19154 <ticker_job+0x158>
			    (state == 0U) ||
   19138:	2805      	cmp	r0, #5
   1913a:	d110      	bne.n	1915e <ticker_job+0x162>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   1913c:	6873      	ldr	r3, [r6, #4]
   1913e:	b973      	cbnz	r3, 1915e <ticker_job+0x162>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   19140:	68b3      	ldr	r3, [r6, #8]
   19142:	b963      	cbnz	r3, 1915e <ticker_job+0x162>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   19144:	68f3      	ldr	r3, [r6, #12]
   19146:	b953      	cbnz	r3, 1915e <ticker_job+0x162>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   19148:	6933      	ldr	r3, [r6, #16]
   1914a:	b943      	cbnz	r3, 1915e <ticker_job+0x162>
			     (user_op->params.update.lazy == 0U) &&
   1914c:	6973      	ldr	r3, [r6, #20]
   1914e:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
   19152:	d104      	bne.n	1915e <ticker_job+0x162>
				ticker_job_op_cb(user_op,
   19154:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   19156:	4630      	mov	r0, r6
   19158:	f013 f939 	bl	2c3ce <ticker_job_op_cb>
   1915c:	e7c3      	b.n	190e6 <ticker_job+0xea>
			if (state == 1U) {
   1915e:	2a01      	cmp	r2, #1
   19160:	f040 80d2 	bne.w	19308 <ticker_job+0x30c>
	previous = instance->ticker_id_head;
   19164:	7f63      	ldrb	r3, [r4, #29]
	node = &instance->nodes[0];
   19166:	f8d4 e000 	ldr.w	lr, [r4]
	previous = instance->ticker_id_head;
   1916a:	9302      	str	r3, [sp, #8]
	total = 0U;
   1916c:	2700      	movs	r7, #0
	while (current != TICKER_NULL) {
   1916e:	2bff      	cmp	r3, #255	; 0xff
   19170:	d12e      	bne.n	191d0 <ticker_job+0x1d4>
		return 0;
   19172:	2700      	movs	r7, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   19174:	2805      	cmp	r0, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   19176:	60af      	str	r7, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   19178:	f040 80a3 	bne.w	192c2 <ticker_job+0x2c6>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1917c:	f8d4 9014 	ldr.w	r9, [r4, #20]
	ticks_now = cntr_cnt_get();
   19180:	f005 ff1e 	bl	1efc0 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   19184:	9901      	ldr	r1, [sp, #4]
	ticks_now = cntr_cnt_get();
   19186:	9002      	str	r0, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   19188:	eba0 0309 	sub.w	r3, r0, r9
   1918c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   19190:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_elapsed) {
   19192:	429f      	cmp	r7, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
   19194:	bf98      	it	ls
   19196:	6969      	ldrls	r1, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   19198:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1919a:	bf9d      	ittte	ls
   1919c:	1bcf      	subls	r7, r1, r7
   1919e:	19db      	addls	r3, r3, r7
   191a0:	616b      	strls	r3, [r5, #20]
		ticks_to_expire -= ticks_elapsed;
   191a2:	1afb      	subhi	r3, r7, r3
		ticks_to_expire = 0U;
   191a4:	bf98      	it	ls
   191a6:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0U) &&
   191a8:	2800      	cmp	r0, #0
   191aa:	d05b      	beq.n	19264 <ticker_job+0x268>
	    (user_op->params.update.lazy != 0U)) {
   191ac:	8ab1      	ldrh	r1, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
   191ae:	2900      	cmp	r1, #0
   191b0:	d058      	beq.n	19264 <ticker_job+0x268>
		user_op->params.update.lazy--;
   191b2:	f101 3cff 	add.w	ip, r1, #4294967295
   191b6:	fa1f fc8c 	uxth.w	ip, ip
   191ba:	f8a6 c014 	strh.w	ip, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   191be:	4298      	cmp	r0, r3
   191c0:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   191c4:	d201      	bcs.n	191ca <ticker_job+0x1ce>
   191c6:	45f4      	cmp	ip, lr
   191c8:	d314      	bcc.n	191f4 <ticker_job+0x1f8>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   191ca:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 19488 <ticker_job+0x48c>
   191ce:	e043      	b.n	19258 <ticker_job+0x25c>
		ticker_current = &node[current];
   191d0:	eb03 0943 	add.w	r9, r3, r3, lsl #1
   191d4:	ea4f 1909 	mov.w	r9, r9, lsl #4
   191d8:	eb0e 0a09 	add.w	sl, lr, r9
		if (current == id) {
   191dc:	4299      	cmp	r1, r3
   191de:	f8da 2008 	ldr.w	r2, [sl, #8]
   191e2:	920b      	str	r2, [sp, #44]	; 0x2c
   191e4:	4417      	add	r7, r2
   191e6:	f81e 9009 	ldrb.w	r9, [lr, r9]
   191ea:	f000 82bd 	beq.w	19768 <ticker_job+0x76c>
   191ee:	9302      	str	r3, [sp, #8]
   191f0:	464b      	mov	r3, r9
   191f2:	e7bc      	b.n	1916e <ticker_job+0x172>
	if ((ticker->remainder_current >= BIT(31)) ||
   191f4:	6a69      	ldr	r1, [r5, #36]	; 0x24
   191f6:	4fa2      	ldr	r7, [pc, #648]	; (19480 <ticker_job+0x484>)
   191f8:	4aa2      	ldr	r2, [pc, #648]	; (19484 <ticker_job+0x488>)
   191fa:	19cf      	adds	r7, r1, r7
   191fc:	4297      	cmp	r7, r2
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   191fe:	bf81      	itttt	hi
   19200:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   19204:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   19208:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
   1920c:	6269      	strhi	r1, [r5, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
   1920e:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
		decrement++;
   19212:	bf8c      	ite	hi
   19214:	f04f 0a01 	movhi.w	sl, #1
	uint8_t decrement = 0U;
   19218:	f04f 0a00 	movls.w	sl, #0
	ticker->remainder_current -= ticker->remainder_periodic;
   1921c:	1a7f      	subs	r7, r7, r1
			ticks_to_expire -= ticker->ticks_periodic +
   1921e:	4482      	add	sl, r0
			ticker->lazy_current--;
   19220:	f10e 3eff 	add.w	lr, lr, #4294967295
	ticker->remainder_current -= ticker->remainder_periodic;
   19224:	626f      	str	r7, [r5, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
   19226:	eba3 030a 	sub.w	r3, r3, sl
			ticker->lazy_current--;
   1922a:	f8a5 e01e 	strh.w	lr, [r5, #30]
   1922e:	e7c6      	b.n	191be <ticker_job+0x1c2>
	ticker->remainder_current += ticker->remainder_periodic;
   19230:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
   19234:	440f      	add	r7, r1
	if ((ticker->remainder_current < BIT(31)) &&
   19236:	4992      	ldr	r1, [pc, #584]	; (19480 <ticker_job+0x484>)
   19238:	4a92      	ldr	r2, [pc, #584]	; (19484 <ticker_job+0x488>)
   1923a:	1879      	adds	r1, r7, r1
   1923c:	4291      	cmp	r1, r2
	return 0;
   1923e:	bf8e      	itee	hi
   19240:	2100      	movhi	r1, #0
		return 1;
   19242:	2101      	movls	r1, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   19244:	4457      	addls	r7, sl
			ticks_to_expire += ticker->ticks_periodic +
   19246:	4401      	add	r1, r0
			ticker->lazy_current++;
   19248:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
   1924c:	bf8c      	ite	hi
   1924e:	626f      	strhi	r7, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   19250:	626f      	strls	r7, [r5, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
   19252:	440b      	add	r3, r1
			ticker->lazy_current++;
   19254:	f8a5 e01e 	strh.w	lr, [r5, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   19258:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   1925c:	45f4      	cmp	ip, lr
   1925e:	d8e7      	bhi.n	19230 <ticker_job+0x234>
		ticker->lazy_periodic = user_op->params.update.lazy;
   19260:	f8a5 c01c 	strh.w	ip, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   19264:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
   19266:	68b0      	ldr	r0, [r6, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   19268:	6aaf      	ldr	r7, [r5, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   1926a:	440b      	add	r3, r1
   1926c:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
   1926e:	696b      	ldr	r3, [r5, #20]
   19270:	4403      	add	r3, r0
   19272:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   19274:	b11f      	cbz	r7, 1927e <ticker_job+0x282>
   19276:	683b      	ldr	r3, [r7, #0]
   19278:	b10b      	cbz	r3, 1927e <ticker_job+0x282>
			user_op->params.update.ticks_drift_plus -
   1927a:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   1927c:	6079      	str	r1, [r7, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   1927e:	9a02      	ldr	r2, [sp, #8]
   19280:	4649      	mov	r1, r9
   19282:	4628      	mov	r0, r5
   19284:	f013 f885 	bl	2c392 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   19288:	68f2      	ldr	r2, [r6, #12]
   1928a:	69ab      	ldr	r3, [r5, #24]
   1928c:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   1928e:	6932      	ldr	r2, [r6, #16]
   19290:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   19292:	bf8c      	ite	hi
   19294:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   19296:	2300      	movls	r3, #0
   19298:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   1929a:	7db3      	ldrb	r3, [r6, #22]
   1929c:	b103      	cbz	r3, 192a0 <ticker_job+0x2a4>
		ticker->force = user_op->params.update.force;
   1929e:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   192a0:	7df3      	ldrb	r3, [r6, #23]
   192a2:	b113      	cbz	r3, 192aa <ticker_job+0x2ae>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   192a4:	3b01      	subs	r3, #1
   192a6:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   192aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   192ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   192ae:	4619      	mov	r1, r3
   192b0:	9b03      	ldr	r3, [sp, #12]
   192b2:	548b      	strb	r3, [r1, r2]
	*insert_head = user_op->id;
   192b4:	7873      	ldrb	r3, [r6, #1]
   192b6:	9303      	str	r3, [sp, #12]
		ticker->req++;
   192b8:	786b      	ldrb	r3, [r5, #1]
   192ba:	3301      	adds	r3, #1
   192bc:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   192be:	2100      	movs	r1, #0
   192c0:	e749      	b.n	19156 <ticker_job+0x15a>
		ticker->req = ticker->ack;
   192c2:	f885 c001 	strb.w	ip, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   192c6:	7f23      	ldrb	r3, [r4, #28]
   192c8:	428b      	cmp	r3, r1
   192ca:	d1f8      	bne.n	192be <ticker_job+0x2c2>
			instance->ticker_id_slot_previous = TICKER_NULL;
   192cc:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   192ce:	2807      	cmp	r0, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   192d0:	7723      	strb	r3, [r4, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   192d2:	d10d      	bne.n	192f0 <ticker_job+0x2f4>
				ticks_at_stop =
   192d4:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
   192d6:	6963      	ldr	r3, [r4, #20]
			if (!((ticks_at_stop - ticks_current) &
   192d8:	1ac2      	subs	r2, r0, r3
   192da:	0211      	lsls	r1, r2, #8
   192dc:	d40b      	bmi.n	192f6 <ticker_job+0x2fa>
				ticks_used = ticks_elapsed +
   192de:	9b01      	ldr	r3, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   192e0:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   192e4:	4418      	add	r0, r3
			if (instance->ticks_slot_previous > ticks_used) {
   192e6:	69a3      	ldr	r3, [r4, #24]
   192e8:	4283      	cmp	r3, r0
				instance->ticks_slot_previous = ticks_used;
   192ea:	bf88      	it	hi
   192ec:	61a0      	strhi	r0, [r4, #24]
   192ee:	e7e6      	b.n	192be <ticker_job+0x2c2>
				ticks_at_stop = cntr_cnt_get();
   192f0:	f005 fe66 	bl	1efc0 <cntr_cnt_get>
   192f4:	e7ef      	b.n	192d6 <ticker_job+0x2da>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   192f6:	1a18      	subs	r0, r3, r0
				if (ticks_elapsed > ticks_used) {
   192f8:	9b01      	ldr	r3, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   192fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   192fe:	4283      	cmp	r3, r0
					ticks_used = ticks_elapsed -
   19300:	bf8c      	ite	hi
   19302:	1a18      	subhi	r0, r3, r0
					ticks_used = 0;
   19304:	2000      	movls	r0, #0
   19306:	e7ee      	b.n	192e6 <ticker_job+0x2ea>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   19308:	2104      	movs	r1, #4
   1930a:	4623      	mov	r3, r4
   1930c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1930e:	2201      	movs	r2, #1
   19310:	4608      	mov	r0, r1
   19312:	47a8      	blx	r5
				pending = 1U;
   19314:	2301      	movs	r3, #1
				user->middle = prev;
   19316:	f888 7002 	strb.w	r7, [r8, #2]
				pending = 1U;
   1931a:	9308      	str	r3, [sp, #32]
   1931c:	e69c      	b.n	19058 <ticker_job+0x5c>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   1931e:	69a2      	ldr	r2, [r4, #24]
		skip_collision = (ticker->lazy_current != 0U);
   19320:	f8b5 901e 	ldrh.w	r9, [r5, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   19324:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   19326:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
   1932a:	449a      	add	sl, r3
		ticks_latency -= ticks_to_expire;
   1932c:	ebab 0b03 	sub.w	fp, fp, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   19330:	bf25      	ittet	cs
   19332:	23ff      	movcs	r3, #255	; 0xff
   19334:	7723      	strbcs	r3, [r4, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   19336:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   19338:	2300      	movcs	r3, #0
   1933a:	61a3      	str	r3, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   1933c:	78a9      	ldrb	r1, [r5, #2]
   1933e:	786b      	ldrb	r3, [r5, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   19340:	f8d5 c018 	ldr.w	ip, [r5, #24]
   19344:	6aaa      	ldr	r2, [r5, #40]	; 0x28
		state = (ticker->req - ticker->ack) & 0xff;
   19346:	1a5b      	subs	r3, r3, r1
   19348:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1934a:	f1bc 0f00 	cmp.w	ip, #0
   1934e:	d00d      	beq.n	1936c <ticker_job+0x370>
   19350:	2b02      	cmp	r3, #2
   19352:	d10b      	bne.n	1936c <ticker_job+0x370>
   19354:	f1b9 0f00 	cmp.w	r9, #0
   19358:	d108      	bne.n	1936c <ticker_job+0x370>
   1935a:	b122      	cbz	r2, 19366 <ticker_job+0x36a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   1935c:	f892 e008 	ldrb.w	lr, [r2, #8]
   19360:	f1be 0f01 	cmp.w	lr, #1
   19364:	d002      	beq.n	1936c <ticker_job+0x370>
			instance->ticker_id_slot_previous = id_expired;
   19366:	7727      	strb	r7, [r4, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   19368:	f8c4 c018 	str.w	ip, [r4, #24]
		instance->ticker_id_head = ticker->next;
   1936c:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
		ticker->ticks_to_expire = 0U;
   19370:	f04f 0c00 	mov.w	ip, #0
   19374:	f8c5 c008 	str.w	ip, [r5, #8]
		instance->ticker_id_head = ticker->next;
   19378:	f816 c000 	ldrb.w	ip, [r6, r0]
   1937c:	f884 c01d 	strb.w	ip, [r4, #29]
		if ((ticker->ticks_periodic != 0U) ||
   19380:	f8d5 c004 	ldr.w	ip, [r5, #4]
   19384:	f1bc 0f00 	cmp.w	ip, #0
   19388:	d11d      	bne.n	193c6 <ticker_job+0x3ca>
   1938a:	2a00      	cmp	r2, #0
   1938c:	d068      	beq.n	19460 <ticker_job+0x464>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   1938e:	f892 e008 	ldrb.w	lr, [r2, #8]
   19392:	f1be 0f01 	cmp.w	lr, #1
   19396:	d163      	bne.n	19460 <ticker_job+0x464>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   19398:	7a13      	ldrb	r3, [r2, #8]
   1939a:	2b01      	cmp	r3, #1
   1939c:	d115      	bne.n	193ca <ticker_job+0x3ce>
				ticker->ticks_to_expire = ticks_elapsed;
   1939e:	f8c5 8008 	str.w	r8, [r5, #8]
				ticker->req = ticker->ack;
   193a2:	7069      	strb	r1, [r5, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   193a4:	9b07      	ldr	r3, [sp, #28]
   193a6:	6961      	ldr	r1, [r4, #20]
   193a8:	eb03 020a 	add.w	r2, r3, sl
   193ac:	4628      	mov	r0, r5
   193ae:	f012 fff0 	bl	2c392 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   193b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   193b4:	990a      	ldr	r1, [sp, #40]	; 0x28
   193b6:	461a      	mov	r2, r3
   193b8:	9b03      	ldr	r3, [sp, #12]
   193ba:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   193bc:	786b      	ldrb	r3, [r5, #1]
   193be:	3301      	adds	r3, #1
   193c0:	706b      	strb	r3, [r5, #1]
			ticker->req = ticker->ack;
   193c2:	9703      	str	r7, [sp, #12]
   193c4:	e665      	b.n	19092 <ticker_job+0x96>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   193c6:	2a00      	cmp	r2, #0
   193c8:	d1e6      	bne.n	19398 <ticker_job+0x39c>
				if (!ticker->lazy_current) {
   193ca:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   193ce:	f1be 0f00 	cmp.w	lr, #0
   193d2:	d124      	bne.n	1941e <ticker_job+0x422>
					lazy_periodic = ticker->lazy_periodic;
   193d4:	8bab      	ldrh	r3, [r5, #28]
				while (count--) {
   193d6:	4699      	mov	r9, r3
				ticks_to_expire = 0U;
   193d8:	2000      	movs	r0, #0
	ticker->remainder_current += ticker->remainder_periodic;
   193da:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
   193de:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   193e0:	4927      	ldr	r1, [pc, #156]	; (19480 <ticker_job+0x484>)
   193e2:	4e28      	ldr	r6, [pc, #160]	; (19484 <ticker_job+0x488>)
   193e4:	1851      	adds	r1, r2, r1
   193e6:	42b1      	cmp	r1, r6
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   193e8:	bf9f      	itttt	ls
   193ea:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   193ee:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
   193f2:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
   193f6:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
   193f8:	bf92      	itee	ls
   193fa:	9a05      	ldrls	r2, [sp, #20]
	ticker->remainder_current += ticker->remainder_periodic;
   193fc:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
   193fe:	2200      	movhi	r2, #0
					ticks_to_expire +=
   19400:	4462      	add	r2, ip
				while (count--) {
   19402:	f119 39ff 	adds.w	r9, r9, #4294967295
					ticks_to_expire +=
   19406:	4410      	add	r0, r2
				while (count--) {
   19408:	d2e7      	bcs.n	193da <ticker_job+0x3de>
				if (!ticker->must_expire) {
   1940a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   1940e:	b32a      	cbz	r2, 1945c <ticker_job+0x460>
				lazy = 0U;
   19410:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   19412:	4413      	add	r3, r2
   19414:	449e      	add	lr, r3
				ticker->ticks_to_expire = ticks_to_expire;
   19416:	60a8      	str	r0, [r5, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   19418:	f8a5 e01e 	strh.w	lr, [r5, #30]
   1941c:	e7c2      	b.n	193a4 <ticker_job+0x3a8>
					ticker->req = ticker->ack;
   1941e:	7069      	strb	r1, [r5, #1]
					lazy_periodic = 0U;
   19420:	2300      	movs	r3, #0
   19422:	e7d8      	b.n	193d6 <ticker_job+0x3da>
	ticker->remainder_current += ticker->remainder_periodic;
   19424:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
   19428:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   1942a:	4915      	ldr	r1, [pc, #84]	; (19480 <ticker_job+0x484>)
   1942c:	4e15      	ldr	r6, [pc, #84]	; (19484 <ticker_job+0x488>)
   1942e:	1851      	adds	r1, r2, r1
   19430:	42b1      	cmp	r1, r6
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   19432:	bf9f      	itttt	ls
   19434:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   19438:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
   1943c:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
   19440:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
   19442:	bf92      	itee	ls
   19444:	9a05      	ldrls	r2, [sp, #20]
	ticker->remainder_current += ticker->remainder_periodic;
   19446:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
   19448:	2200      	movhi	r2, #0
						ticks_to_expire +=
   1944a:	4462      	add	r2, ip
   1944c:	4410      	add	r0, r2
						lazy++;
   1944e:	f109 0901 	add.w	r9, r9, #1
					while (ticks_to_expire <
   19452:	4583      	cmp	fp, r0
   19454:	fa1f f289 	uxth.w	r2, r9
   19458:	d8e4      	bhi.n	19424 <ticker_job+0x428>
   1945a:	e7da      	b.n	19412 <ticker_job+0x416>
				if (!ticker->must_expire) {
   1945c:	4691      	mov	r9, r2
   1945e:	e7f8      	b.n	19452 <ticker_job+0x456>
			if (state && ((state == 1U) || skip_collision) &&
   19460:	b14b      	cbz	r3, 19476 <ticker_job+0x47a>
   19462:	2b01      	cmp	r3, #1
   19464:	d002      	beq.n	1946c <ticker_job+0x470>
   19466:	f1b9 0f00 	cmp.w	r9, #0
   1946a:	d004      	beq.n	19476 <ticker_job+0x47a>
			    ticker->fp_op_func) {
   1946c:	6a2b      	ldr	r3, [r5, #32]
			if (state && ((state == 1U) || skip_collision) &&
   1946e:	b113      	cbz	r3, 19476 <ticker_job+0x47a>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   19470:	6a69      	ldr	r1, [r5, #36]	; 0x24
   19472:	2001      	movs	r0, #1
   19474:	4798      	blx	r3
			ticker->req = ticker->ack;
   19476:	78ab      	ldrb	r3, [r5, #2]
   19478:	706b      	strb	r3, [r5, #1]
   1947a:	9f03      	ldr	r7, [sp, #12]
   1947c:	e7a1      	b.n	193c2 <ticker_job+0x3c6>
   1947e:	bf00      	nop
   19480:	ff172b5a 	.word	0xff172b5a
   19484:	7f172b59 	.word	0x7f172b59
   19488:	fe2e56b6 	.word	0xfe2e56b6
			ticker = &nodes[ticker_id_head];
   1948c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   19490:	011b      	lsls	r3, r3, #4
   19492:	18c5      	adds	r5, r0, r3
			ext_data = ticker->ext_data;
   19494:	f810 e003 	ldrb.w	lr, [r0, r3]
   19498:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   1949a:	b11f      	cbz	r7, 194a4 <ticker_job+0x4a8>
   1949c:	7a3b      	ldrb	r3, [r7, #8]
   1949e:	2b01      	cmp	r3, #1
   194a0:	f000 817e 	beq.w	197a0 <ticker_job+0x7a4>
			ticker_id_head = ticker->next;
   194a4:	4676      	mov	r6, lr
		while (ticker_id_head != TICKER_NULL) {
   194a6:	2eff      	cmp	r6, #255	; 0xff
   194a8:	d1f0      	bne.n	1948c <ticker_job+0x490>
			flag_compare_update = 1U;
   194aa:	9a02      	ldr	r2, [sp, #8]
   194ac:	9b04      	ldr	r3, [sp, #16]
   194ae:	2b00      	cmp	r3, #0
   194b0:	bf08      	it	eq
   194b2:	4613      	moveq	r3, r2
   194b4:	9302      	str	r3, [sp, #8]
   194b6:	e07d      	b.n	195b4 <ticker_job+0x5b8>
			instance->ticks_slot_previous > ticks_elapsed) {
   194b8:	69a1      	ldr	r1, [r4, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   194ba:	9b01      	ldr	r3, [sp, #4]
   194bc:	428b      	cmp	r3, r1
   194be:	f080 8173 	bcs.w	197a8 <ticker_job+0x7ac>
			window_start_ticks = instance->ticks_slot_previous -
   194c2:	1acb      	subs	r3, r1, r3
		window_start_ticks = 0U;
   194c4:	9303      	str	r3, [sp, #12]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   194c6:	e9d7 2300 	ldrd	r2, r3, [r7]
   194ca:	4293      	cmp	r3, r2
   194cc:	d254      	bcs.n	19578 <ticker_job+0x57c>
			ticks_slot_window = ext_data->ticks_slot_window -
   194ce:	f04f 0c00 	mov.w	ip, #0
   194d2:	eba2 0b03 	sub.w	fp, r2, r3
		ticker_id_iter = nodes[ticker_id_head].next;
   194d6:	4672      	mov	r2, lr
			ticks_slot_window = ext_data->ticks_slot_window -
   194d8:	4663      	mov	r3, ip
		while (ticker_id_iter != TICKER_NULL &&
   194da:	2aff      	cmp	r2, #255	; 0xff
   194dc:	d006      	beq.n	194ec <ticker_job+0x4f0>
		       ticks_start_offset + ticker->ticks_slot <=
   194de:	f8d5 8018 	ldr.w	r8, [r5, #24]
   194e2:	eb0c 0108 	add.w	r1, ip, r8
		while (ticker_id_iter != TICKER_NULL &&
   194e6:	458b      	cmp	fp, r1
		       ticks_start_offset + ticker->ticks_slot <=
   194e8:	9104      	str	r1, [sp, #16]
		while (ticker_id_iter != TICKER_NULL &&
   194ea:	d217      	bcs.n	1951c <ticker_job+0x520>
		ticker->ticks_to_expire = ticks_to_expire;
   194ec:	60ab      	str	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   194ee:	4672      	mov	r2, lr
		ticker_id_prev = TICKER_NULL;
   194f0:	23ff      	movs	r3, #255	; 0xff
		while (ticker_id_iter != TICKER_NULL) {
   194f2:	2aff      	cmp	r2, #255	; 0xff
   194f4:	d046      	beq.n	19584 <ticker_job+0x588>
			node = &nodes[ticker_id_iter];
   194f6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   194fa:	ea4f 1808 	mov.w	r8, r8, lsl #4
   194fe:	eb00 0908 	add.w	r9, r0, r8
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   19502:	f8d5 c008 	ldr.w	ip, [r5, #8]
   19506:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1950a:	458c      	cmp	ip, r1
   1950c:	d936      	bls.n	1957c <ticker_job+0x580>
				ticker->ticks_to_expire -=
   1950e:	ebac 0101 	sub.w	r1, ip, r1
   19512:	60a9      	str	r1, [r5, #8]
			ticker_id_iter = node->next;
   19514:	4613      	mov	r3, r2
   19516:	f810 2008 	ldrb.w	r2, [r0, r8]
   1951a:	e7ea      	b.n	194f2 <ticker_job+0x4f6>
			node = &nodes[ticker_id_iter];
   1951c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   19520:	0112      	lsls	r2, r2, #4
   19522:	eb00 0a02 	add.w	sl, r0, r2
			if (node->ext_data &&
   19526:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
   1952a:	f1b9 0f00 	cmp.w	r9, #0
   1952e:	d006      	beq.n	1953e <ticker_job+0x542>
   19530:	f899 9008 	ldrb.w	r9, [r9, #8]
   19534:	f1b9 0f01 	cmp.w	r9, #1
   19538:	d101      	bne.n	1953e <ticker_job+0x542>
			ticker_id_iter = node->next;
   1953a:	5c82      	ldrb	r2, [r0, r2]
   1953c:	e7cd      	b.n	194da <ticker_job+0x4de>
			if (node->ticks_to_expire >
   1953e:	f8da 9008 	ldr.w	r9, [sl, #8]
   19542:	f1b9 0f04 	cmp.w	r9, #4
   19546:	d90e      	bls.n	19566 <ticker_job+0x56a>
					MIN(ticks_slot_window,
   19548:	f1ac 0304 	sub.w	r3, ip, #4
   1954c:	444b      	add	r3, r9
				window_end_ticks =
   1954e:	455b      	cmp	r3, fp
			if (window_end_ticks > ticks_start_offset +
   19550:	9904      	ldr	r1, [sp, #16]
				window_end_ticks =
   19552:	bf28      	it	cs
   19554:	465b      	movcs	r3, fp
			if (window_end_ticks > ticks_start_offset +
   19556:	428b      	cmp	r3, r1
   19558:	d905      	bls.n	19566 <ticker_job+0x56a>
			if (ticks_to_expire != 0U &&
   1955a:	ebb3 0308 	subs.w	r3, r3, r8
   1955e:	d002      	beq.n	19566 <ticker_job+0x56a>
   19560:	9903      	ldr	r1, [sp, #12]
   19562:	428b      	cmp	r3, r1
   19564:	d2c2      	bcs.n	194ec <ticker_job+0x4f0>
			window_start_ticks  = node->ticks_to_expire +
   19566:	f8da 1018 	ldr.w	r1, [sl, #24]
   1956a:	eb01 0309 	add.w	r3, r1, r9
   1956e:	9303      	str	r3, [sp, #12]
			ticks_start_offset += node->ticks_to_expire;
   19570:	44cc      	add	ip, r9
			ticks_to_expire     = ticks_slot_window -
   19572:	ebab 0308 	sub.w	r3, fp, r8
   19576:	e7e0      	b.n	1953a <ticker_job+0x53e>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   19578:	2300      	movs	r3, #0
   1957a:	e7b7      	b.n	194ec <ticker_job+0x4f0>
				node->ticks_to_expire -=
   1957c:	eba1 010c 	sub.w	r1, r1, ip
   19580:	f8c9 1008 	str.w	r1, [r9, #8]
		if (ticker_id_prev != TICKER_NULL) {
   19584:	2bff      	cmp	r3, #255	; 0xff
   19586:	d008      	beq.n	1959a <ticker_job+0x59e>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   19588:	b21b      	sxth	r3, r3
   1958a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1958e:	011b      	lsls	r3, r3, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   19590:	f884 e01d 	strb.w	lr, [r4, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   19594:	5cc2      	ldrb	r2, [r0, r3]
   19596:	702a      	strb	r2, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   19598:	54c6      	strb	r6, [r0, r3]
		ticker->lazy_current--;
   1959a:	8beb      	ldrh	r3, [r5, #30]
   1959c:	3b01      	subs	r3, #1
   1959e:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   195a0:	f04f 0302 	mov.w	r3, #2
   195a4:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   195a6:	2301      	movs	r3, #1
   195a8:	9304      	str	r3, [sp, #16]
   195aa:	e590      	b.n	190ce <ticker_job+0xd2>
		ticker_job_list_insert(instance, insert_head);
   195ac:	9903      	ldr	r1, [sp, #12]
   195ae:	4620      	mov	r0, r4
   195b0:	f012 ff17 	bl	2c3e2 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   195b4:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
   195b6:	9a02      	ldr	r2, [sp, #8]
   195b8:	9906      	ldr	r1, [sp, #24]
   195ba:	428b      	cmp	r3, r1
   195bc:	bf18      	it	ne
   195be:	2201      	movne	r2, #1
	if (!pending) {
   195c0:	9b08      	ldr	r3, [sp, #32]
		flag_compare_update = 1U;
   195c2:	9202      	str	r2, [sp, #8]
	if (!pending) {
   195c4:	b1e3      	cbz	r3, 19600 <ticker_job+0x604>
	instance->job_guard = 0U;
   195c6:	2300      	movs	r3, #0
   195c8:	77a3      	strb	r3, [r4, #30]
	if (flag_compare_update) {
   195ca:	9b02      	ldr	r3, [sp, #8]
   195cc:	b153      	cbz	r3, 195e4 <ticker_job+0x5e8>
	if (instance->ticker_id_head == TICKER_NULL) {
   195ce:	7f63      	ldrb	r3, [r4, #29]
   195d0:	2bff      	cmp	r3, #255	; 0xff
   195d2:	f040 8082 	bne.w	196da <ticker_job+0x6de>
		if (cntr_stop() == 0) {
   195d6:	f005 fcd1 	bl	1ef7c <cntr_stop>
   195da:	b918      	cbnz	r0, 195e4 <ticker_job+0x5e8>
			instance->ticks_slot_previous = 0U;
   195dc:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
   195de:	f005 fcef 	bl	1efc0 <cntr_cnt_get>
   195e2:	6160      	str	r0, [r4, #20]
	if (instance->worker_trigger) {
   195e4:	7fe3      	ldrb	r3, [r4, #31]
   195e6:	2b00      	cmp	r3, #0
   195e8:	f000 80e0 	beq.w	197ac <ticker_job+0x7b0>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   195ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
   195ee:	4623      	mov	r3, r4
   195f0:	2201      	movs	r2, #1
   195f2:	2103      	movs	r1, #3
   195f4:	2004      	movs	r0, #4
   195f6:	46ac      	mov	ip, r5
}
   195f8:	b00f      	add	sp, #60	; 0x3c
   195fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   195fe:	4760      	bx	ip
	users = &instance->users[0];
   19600:	6863      	ldr	r3, [r4, #4]
   19602:	9303      	str	r3, [sp, #12]
	count_user = instance->count_user;
   19604:	7a65      	ldrb	r5, [r4, #9]
		uop->status = TICKER_STATUS_SUCCESS;
   19606:	9b08      	ldr	r3, [sp, #32]
   19608:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   1960a:	3d01      	subs	r5, #1
   1960c:	b2ed      	uxtb	r5, r5
   1960e:	2dff      	cmp	r5, #255	; 0xff
   19610:	d0d9      	beq.n	195c6 <ticker_job+0x5ca>
		user = &users[count_user];
   19612:	9b03      	ldr	r3, [sp, #12]
   19614:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
   19618:	f8d6 8004 	ldr.w	r8, [r6, #4]
		while (user->first != user->last) {
   1961c:	7873      	ldrb	r3, [r6, #1]
   1961e:	78f2      	ldrb	r2, [r6, #3]
   19620:	429a      	cmp	r2, r3
   19622:	d0f2      	beq.n	1960a <ticker_job+0x60e>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   19624:	2234      	movs	r2, #52	; 0x34
   19626:	fb13 f202 	smulbb	r2, r3, r2
   1962a:	eb08 0302 	add.w	r3, r8, r2
	switch (uop->op) {
   1962e:	f818 2002 	ldrb.w	r2, [r8, r2]
   19632:	2a02      	cmp	r2, #2
   19634:	d013      	beq.n	1965e <ticker_job+0x662>
   19636:	2a03      	cmp	r2, #3
   19638:	d040      	beq.n	196bc <ticker_job+0x6c0>
   1963a:	2a01      	cmp	r2, #1
   1963c:	d106      	bne.n	1964c <ticker_job+0x650>
			uop->status = TICKER_STATUS_SUCCESS;
   1963e:	9a01      	ldr	r2, [sp, #4]
			uop->status = TICKER_STATUS_FAILURE;
   19640:	629a      	str	r2, [r3, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   19642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (fp_op_func) {
   19644:	b112      	cbz	r2, 1964c <ticker_job+0x650>
		fp_op_func(uop->status, uop->op_context);
   19646:	6b19      	ldr	r1, [r3, #48]	; 0x30
   19648:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1964a:	4790      	blx	r2
			first = user->first + 1;
   1964c:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
   1964e:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
   19650:	3301      	adds	r3, #1
   19652:	b2db      	uxtb	r3, r3
				first = 0U;
   19654:	429a      	cmp	r2, r3
   19656:	bf08      	it	eq
   19658:	2300      	moveq	r3, #0
			user->first = first;
   1965a:	7073      	strb	r3, [r6, #1]
   1965c:	e7de      	b.n	1961c <ticker_job+0x620>
		ticker_by_next_slot_get(instance,
   1965e:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
   19662:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
   19666:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
   1966a:	f8d4 c000 	ldr.w	ip, [r4]
	if ((_ticker_id_head == TICKER_NULL) ||
   1966e:	6961      	ldr	r1, [r4, #20]
   19670:	2aff      	cmp	r2, #255	; 0xff
   19672:	d002      	beq.n	1967a <ticker_job+0x67e>
   19674:	6807      	ldr	r7, [r0, #0]
   19676:	428f      	cmp	r7, r1
   19678:	d015      	beq.n	196a6 <ticker_job+0x6aa>
		_ticker_id_head = instance->ticker_id_head;
   1967a:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
   1967c:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
   1967e:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   19680:	2aff      	cmp	r2, #255	; 0xff
   19682:	d00b      	beq.n	1969c <ticker_job+0x6a0>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   19684:	eb02 0a42 	add.w	sl, r2, r2, lsl #1
   19688:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   1968c:	eb0c 0b0a 	add.w	fp, ip, sl
   19690:	f8db 0008 	ldr.w	r0, [fp, #8]
   19694:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
   19696:	f8db 0018 	ldr.w	r0, [fp, #24]
   1969a:	b160      	cbz	r0, 196b6 <ticker_job+0x6ba>
	*ticker_id_head = _ticker_id_head;
   1969c:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
   196a0:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
   196a4:	e7cb      	b.n	1963e <ticker_job+0x642>
		ticker = &node[_ticker_id_head];
   196a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   196aa:	0112      	lsls	r2, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   196ac:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
   196b0:	f81c 2002 	ldrb.w	r2, [ip, r2]
   196b4:	e7e4      	b.n	19680 <ticker_job+0x684>
		_ticker_id_head = ticker->next;
   196b6:	f81c 200a 	ldrb.w	r2, [ip, sl]
   196ba:	e7e1      	b.n	19680 <ticker_job+0x684>
		if (uop->id < instance->count_node) {
   196bc:	785a      	ldrb	r2, [r3, #1]
   196be:	7a21      	ldrb	r1, [r4, #8]
   196c0:	4291      	cmp	r1, r2
   196c2:	d908      	bls.n	196d6 <ticker_job+0x6da>
			node[uop->id].priority =
   196c4:	6821      	ldr	r1, [r4, #0]
   196c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   196ca:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   196ce:	7919      	ldrb	r1, [r3, #4]
   196d0:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
   196d4:	e7b3      	b.n	1963e <ticker_job+0x642>
			uop->status = TICKER_STATUS_FAILURE;
   196d6:	2201      	movs	r2, #1
   196d8:	e7b2      	b.n	19640 <ticker_job+0x644>
	if (ticker_id_old_head == TICKER_NULL) {
   196da:	9b06      	ldr	r3, [sp, #24]
   196dc:	2bff      	cmp	r3, #255	; 0xff
   196de:	d106      	bne.n	196ee <ticker_job+0x6f2>
		ticks_current = cntr_cnt_get();
   196e0:	f005 fc6e 	bl	1efc0 <cntr_cnt_get>
   196e4:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
   196e6:	f005 fc3b 	bl	1ef60 <cntr_start>
   196ea:	b900      	cbnz	r0, 196ee <ticker_job+0x6f2>
			instance->ticks_current = ticks_current;
   196ec:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
   196ee:	7f63      	ldrb	r3, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
   196f0:	6822      	ldr	r2, [r4, #0]
		LL_ASSERT(i);
   196f2:	4f30      	ldr	r7, [pc, #192]	; (197b4 <ticker_job+0x7b8>)
   196f4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 197b8 <ticker_job+0x7bc>
	ticker = &instance->nodes[instance->ticker_id_head];
   196f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   196fc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	i = 10U;
   19700:	f04f 090a 	mov.w	r9, #10
	ticks_to_expire = ticker->ticks_to_expire;
   19704:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   19706:	f005 fc5b 	bl	1efc0 <cntr_cnt_get>
		cc = instance->ticks_current;
   1970a:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1970c:	1b43      	subs	r3, r0, r5
   1970e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   19712:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   19714:	42b3      	cmp	r3, r6
   19716:	bf2c      	ite	cs
   19718:	18ed      	addcs	r5, r5, r3
   1971a:	19ad      	addcc	r5, r5, r6
		cc &= HAL_TICKER_CNTR_MASK;
   1971c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   19720:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   19722:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19724:	4628      	mov	r0, r5
   19726:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   19728:	f005 fc4a 	bl	1efc0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1972c:	eba0 000a 	sub.w	r0, r0, sl
   19730:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   19734:	eba5 050a 	sub.w	r5, r5, sl
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   19738:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1973a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   1973e:	42a8      	cmp	r0, r5
		i--;
   19740:	f109 39ff 	add.w	r9, r9, #4294967295
		  ticker_ticks_diff_get(cc, ctr));
   19744:	f67f af4e 	bls.w	195e4 <ticker_job+0x5e8>
		LL_ASSERT(i);
   19748:	f1b9 0f00 	cmp.w	r9, #0
   1974c:	d1db      	bne.n	19706 <ticker_job+0x70a>
   1974e:	f640 02ba 	movw	r2, #2234	; 0x8ba
   19752:	4639      	mov	r1, r7
   19754:	4640      	mov	r0, r8
   19756:	f00e f8bc 	bl	278d2 <printk>
   1975a:	4040      	eors	r0, r0
   1975c:	f380 8811 	msr	BASEPRI, r0
   19760:	f04f 0003 	mov.w	r0, #3
   19764:	df02      	svc	2
   19766:	e7ce      	b.n	19706 <ticker_job+0x70a>
	if (previous == current) {
   19768:	9b02      	ldr	r3, [sp, #8]
   1976a:	4299      	cmp	r1, r3
   1976c:	d101      	bne.n	19772 <ticker_job+0x776>
		instance->ticker_id_head = ticker_current->next;
   1976e:	f884 901d 	strb.w	r9, [r4, #29]
	node[previous].next = ticker_current->next;
   19772:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   19776:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1977a:	0112      	lsls	r2, r2, #4
   1977c:	f80e 9002 	strb.w	r9, [lr, r2]
	if (ticker_current->next != TICKER_NULL) {
   19780:	f89a 3000 	ldrb.w	r3, [sl]
   19784:	2bff      	cmp	r3, #255	; 0xff
   19786:	f43f acf5 	beq.w	19174 <ticker_job+0x178>
		node[ticker_current->next].ticks_to_expire += timeout;
   1978a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1978e:	eb0e 1e03 	add.w	lr, lr, r3, lsl #4
   19792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19794:	f8de 2008 	ldr.w	r2, [lr, #8]
   19798:	441a      	add	r2, r3
   1979a:	f8ce 2008 	str.w	r2, [lr, #8]
	return (total + timeout);
   1979e:	e4e9      	b.n	19174 <ticker_job+0x178>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   197a0:	7f23      	ldrb	r3, [r4, #28]
   197a2:	2bff      	cmp	r3, #255	; 0xff
   197a4:	f47f ae88 	bne.w	194b8 <ticker_job+0x4bc>
		window_start_ticks = 0U;
   197a8:	2300      	movs	r3, #0
   197aa:	e68b      	b.n	194c4 <ticker_job+0x4c8>
}
   197ac:	b00f      	add	sp, #60	; 0x3c
   197ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197b2:	bf00      	nop
   197b4:	00035bbf 	.word	0x00035bbf
   197b8:	0003067f 	.word	0x0003067f

000197bc <ticker_init>:
{
   197bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   197be:	4694      	mov	ip, r2
   197c0:	9f05      	ldr	r7, [sp, #20]
   197c2:	f89d 6018 	ldrb.w	r6, [sp, #24]
   197c6:	9a07      	ldr	r2, [sp, #28]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   197c8:	b108      	cbz	r0, 197ce <ticker_init+0x12>
		return TICKER_STATUS_FAILURE;
   197ca:	2001      	movs	r0, #1
}
   197cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
   197ce:	4c18      	ldr	r4, [pc, #96]	; (19830 <ticker_init+0x74>)
   197d0:	7221      	strb	r1, [r4, #8]
	instance->nodes = node;
   197d2:	f8c4 c000 	str.w	ip, [r4]
	while (count_node--) {
   197d6:	3901      	subs	r1, #1
   197d8:	b2c9      	uxtb	r1, r1
   197da:	29ff      	cmp	r1, #255	; 0xff
   197dc:	d116      	bne.n	1980c <ticker_init+0x50>
	instance->count_user = count_user;
   197de:	7263      	strb	r3, [r4, #9]
	instance->users = user;
   197e0:	6067      	str	r7, [r4, #4]
		user_op_ += users[count_user].count_user_op;
   197e2:	2534      	movs	r5, #52	; 0x34
	while (count_user--) {
   197e4:	3b01      	subs	r3, #1
   197e6:	b2db      	uxtb	r3, r3
   197e8:	2bff      	cmp	r3, #255	; 0xff
   197ea:	d116      	bne.n	1981a <ticker_init+0x5e>
	if (count_op) {
   197ec:	2e00      	cmp	r6, #0
   197ee:	d1ec      	bne.n	197ca <ticker_init+0xe>
	instance->caller_id_get_cb = caller_id_get_cb;
   197f0:	9b08      	ldr	r3, [sp, #32]
   197f2:	6223      	str	r3, [r4, #32]
	instance->sched_cb = sched_cb;
   197f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   197f6:	6263      	str	r3, [r4, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
   197f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   197fa:	62a3      	str	r3, [r4, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   197fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
   19800:	e9c4 6605 	strd	r6, r6, [r4, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   19804:	83a3      	strh	r3, [r4, #28]
	instance->ticks_elapsed_first = 0U;
   19806:	8166      	strh	r6, [r4, #10]
	return TICKER_STATUS_SUCCESS;
   19808:	4630      	mov	r0, r6
   1980a:	e7df      	b.n	197cc <ticker_init+0x10>
		instance->nodes[count_node].priority = 0;
   1980c:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   19810:	eb0c 1505 	add.w	r5, ip, r5, lsl #4
   19814:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
   19818:	e7dd      	b.n	197d6 <ticker_init+0x1a>
		users[count_user].user_op = user_op_;
   1981a:	b219      	sxth	r1, r3
   1981c:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
   19820:	6042      	str	r2, [r0, #4]
		user_op_ += users[count_user].count_user_op;
   19822:	f817 0031 	ldrb.w	r0, [r7, r1, lsl #3]
   19826:	fb00 2205 	mla	r2, r0, r5, r2
		count_op -= users[count_user].count_user_op;
   1982a:	1a30      	subs	r0, r6, r0
   1982c:	b2c6      	uxtb	r6, r0
   1982e:	e7d9      	b.n	197e4 <ticker_init+0x28>
   19830:	20004174 	.word	0x20004174

00019834 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   19834:	4a04      	ldr	r2, [pc, #16]	; (19848 <ticker_is_initialized+0x14>)
   19836:	232c      	movs	r3, #44	; 0x2c
   19838:	fb03 2000 	mla	r0, r3, r0, r2
   1983c:	7a00      	ldrb	r0, [r0, #8]
}
   1983e:	3000      	adds	r0, #0
   19840:	bf18      	it	ne
   19842:	2001      	movne	r0, #1
   19844:	4770      	bx	lr
   19846:	bf00      	nop
   19848:	20004174 	.word	0x20004174

0001984c <ticker_trigger>:
	if (instance->sched_cb) {
   1984c:	4a07      	ldr	r2, [pc, #28]	; (1986c <ticker_trigger+0x20>)
   1984e:	232c      	movs	r3, #44	; 0x2c
   19850:	fb03 2100 	mla	r1, r3, r0, r2
{
   19854:	b410      	push	{r4}
	if (instance->sched_cb) {
   19856:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   19858:	b134      	cbz	r4, 19868 <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1985a:	460b      	mov	r3, r1
   1985c:	46a4      	mov	ip, r4
   1985e:	2201      	movs	r2, #1
   19860:	2103      	movs	r1, #3
   19862:	2002      	movs	r0, #2
}
   19864:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   19866:	4760      	bx	ip
}
   19868:	bc10      	pop	{r4}
   1986a:	4770      	bx	lr
   1986c:	20004174 	.word	0x20004174

00019870 <ticker_start_ext>:
{
   19870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   19874:	4c23      	ldr	r4, [pc, #140]	; (19904 <ticker_start_ext+0x94>)
   19876:	262c      	movs	r6, #44	; 0x2c
   19878:	fb00 4906 	mla	r9, r0, r6, r4
	user = &instance->users[user_id];
   1987c:	b20c      	sxth	r4, r1
   1987e:	f8d9 0004 	ldr.w	r0, [r9, #4]
   19882:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
	if (last >= user->count_user_op) {
   19886:	f810 0034 	ldrb.w	r0, [r0, r4, lsl #3]
	last = user->last + 1;
   1988a:	f89c 7003 	ldrb.w	r7, [ip, #3]
   1988e:	1c7d      	adds	r5, r7, #1
   19890:	b2ed      	uxtb	r5, r5
		last = 0U;
   19892:	42a8      	cmp	r0, r5
   19894:	bf98      	it	ls
   19896:	2500      	movls	r5, #0
	if (last == user->first) {
   19898:	f89c 0001 	ldrb.w	r0, [ip, #1]
   1989c:	42a8      	cmp	r0, r5
   1989e:	d02f      	beq.n	19900 <ticker_start_ext+0x90>
	user_op = &user->user_op[user->last];
   198a0:	2034      	movs	r0, #52	; 0x34
   198a2:	fb17 f700 	smulbb	r7, r7, r0
   198a6:	f8dc 0004 	ldr.w	r0, [ip, #4]
   198aa:	19c4      	adds	r4, r0, r7
	user_op->op = TICKER_USER_OP_TYPE_START;
   198ac:	f04f 0804 	mov.w	r8, #4
   198b0:	f800 8007 	strb.w	r8, [r0, r7]
	user_op->params.start.ticks_at_start = ticks_anchor;
   198b4:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   198b6:	9b08      	ldr	r3, [sp, #32]
   198b8:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   198ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   198bc:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   198be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   198c0:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   198c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   198c4:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
   198c6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   198ca:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.ext_data = ext_data;
   198cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   198ce:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   198d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   198d2:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   198d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   198d6:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
   198d8:	2302      	movs	r3, #2
   198da:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
   198dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   198de:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   198e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   198e2:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   198e4:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
   198e6:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   198ea:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
   198ee:	4608      	mov	r0, r1
   198f0:	4798      	blx	r3
   198f2:	464b      	mov	r3, r9
   198f4:	2200      	movs	r2, #0
   198f6:	4641      	mov	r1, r8
   198f8:	47a8      	blx	r5
	return user_op->status;
   198fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   198fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   19900:	2001      	movs	r0, #1
   19902:	e7fb      	b.n	198fc <ticker_start_ext+0x8c>
   19904:	20004174 	.word	0x20004174

00019908 <ticker_update_ext>:
{
   19908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1990c:	4c22      	ldr	r4, [pc, #136]	; (19998 <ticker_update_ext+0x90>)
   1990e:	262c      	movs	r6, #44	; 0x2c
   19910:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->users[user_id];
   19914:	b20c      	sxth	r4, r1
   19916:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1991a:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
	if (last >= user->count_user_op) {
   1991e:	f810 0034 	ldrb.w	r0, [r0, r4, lsl #3]
	last = user->last + 1;
   19922:	f89c 7003 	ldrb.w	r7, [ip, #3]
   19926:	1c7d      	adds	r5, r7, #1
   19928:	b2ed      	uxtb	r5, r5
		last = 0U;
   1992a:	42a8      	cmp	r0, r5
   1992c:	bf98      	it	ls
   1992e:	2500      	movls	r5, #0
	if (last == user->first) {
   19930:	f89c 0001 	ldrb.w	r0, [ip, #1]
   19934:	42a8      	cmp	r0, r5
   19936:	d02d      	beq.n	19994 <ticker_update_ext+0x8c>
	user_op = &user->user_op[user->last];
   19938:	2034      	movs	r0, #52	; 0x34
   1993a:	fb17 f700 	smulbb	r7, r7, r0
   1993e:	f8dc 0004 	ldr.w	r0, [ip, #4]
   19942:	19c4      	adds	r4, r0, r7
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   19944:	f04f 0e05 	mov.w	lr, #5
   19948:	f800 e007 	strb.w	lr, [r0, r7]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   1994c:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   1994e:	9b06      	ldr	r3, [sp, #24]
   19950:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   19952:	9b07      	ldr	r3, [sp, #28]
   19954:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   19956:	9b08      	ldr	r3, [sp, #32]
   19958:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
   1995a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1995e:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
   19960:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   19964:	75a3      	strb	r3, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   19966:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   1996a:	75e3      	strb	r3, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
   1996c:	2302      	movs	r3, #2
   1996e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
   19970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19972:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   19974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
   19976:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   19978:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
   1997a:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1997e:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
   19982:	4608      	mov	r0, r1
   19984:	4798      	blx	r3
   19986:	4643      	mov	r3, r8
   19988:	2200      	movs	r2, #0
   1998a:	2104      	movs	r1, #4
   1998c:	47a8      	blx	r5
	return user_op->status;
   1998e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   19990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   19994:	2001      	movs	r0, #1
   19996:	e7fb      	b.n	19990 <ticker_update_ext+0x88>
   19998:	20004174 	.word	0x20004174

0001999c <ticker_stop>:
{
   1999c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   199a0:	4c1a      	ldr	r4, [pc, #104]	; (19a0c <ticker_stop+0x70>)
   199a2:	252c      	movs	r5, #44	; 0x2c
   199a4:	fb00 4805 	mla	r8, r0, r5, r4
	user = &instance->users[user_id];
   199a8:	b20e      	sxth	r6, r1
   199aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
   199ae:	eb00 0cc6 	add.w	ip, r0, r6, lsl #3
	if (last >= user->count_user_op) {
   199b2:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
   199b6:	f89c 7003 	ldrb.w	r7, [ip, #3]
   199ba:	1c7c      	adds	r4, r7, #1
   199bc:	b2e4      	uxtb	r4, r4
		last = 0U;
   199be:	42a0      	cmp	r0, r4
   199c0:	bf98      	it	ls
   199c2:	2400      	movls	r4, #0
	if (last == user->first) {
   199c4:	f89c 0001 	ldrb.w	r0, [ip, #1]
   199c8:	42a0      	cmp	r0, r4
   199ca:	d01c      	beq.n	19a06 <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
   199cc:	2034      	movs	r0, #52	; 0x34
   199ce:	fb17 f700 	smulbb	r7, r7, r0
   199d2:	f8dc 0004 	ldr.w	r0, [ip, #4]
   199d6:	19c6      	adds	r6, r0, r7
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   199d8:	f04f 0e06 	mov.w	lr, #6
   199dc:	f800 e007 	strb.w	lr, [r0, r7]
	user_op->id = ticker_id;
   199e0:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   199e2:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
   199e4:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	user_op->op_context = op_context;
   199e8:	9b06      	ldr	r3, [sp, #24]
   199ea:	6333      	str	r3, [r6, #48]	; 0x30
	user->last = last;
   199ec:	f88c 4003 	strb.w	r4, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   199f0:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   199f4:	4608      	mov	r0, r1
   199f6:	4798      	blx	r3
   199f8:	4643      	mov	r3, r8
   199fa:	2200      	movs	r2, #0
   199fc:	2104      	movs	r1, #4
   199fe:	47a0      	blx	r4
	return user_op->status;
   19a00:	6ab0      	ldr	r0, [r6, #40]	; 0x28
}
   19a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   19a06:	2001      	movs	r0, #1
   19a08:	e7fb      	b.n	19a02 <ticker_stop+0x66>
   19a0a:	bf00      	nop
   19a0c:	20004174 	.word	0x20004174

00019a10 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   19a10:	2801      	cmp	r0, #1
   19a12:	d809      	bhi.n	19a28 <ll_addr_get+0x18>
		return NULL;
	}

	if (addr_type) {
   19a14:	b130      	cbz	r0, 19a24 <ll_addr_get+0x14>
		if (bdaddr) {
   19a16:	4805      	ldr	r0, [pc, #20]	; (19a2c <ll_addr_get+0x1c>)
		}

		return rnd_addr;
	}

	if (bdaddr) {
   19a18:	b139      	cbz	r1, 19a2a <ll_addr_get+0x1a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19a1a:	6803      	ldr	r3, [r0, #0]
   19a1c:	600b      	str	r3, [r1, #0]
   19a1e:	8883      	ldrh	r3, [r0, #4]
   19a20:	808b      	strh	r3, [r1, #4]
   19a22:	4770      	bx	lr
   19a24:	4802      	ldr	r0, [pc, #8]	; (19a30 <ll_addr_get+0x20>)
   19a26:	e7f7      	b.n	19a18 <ll_addr_get+0x8>
		return NULL;
   19a28:	2000      	movs	r0, #0
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
	}

	return pub_addr;
}
   19a2a:	4770      	bx	lr
   19a2c:	2000585e 	.word	0x2000585e
   19a30:	20005858 	.word	0x20005858

00019a34 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   19a34:	b538      	push	{r3, r4, r5, lr}
   19a36:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   19a38:	2000      	movs	r0, #0
{
   19a3a:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   19a3c:	f012 ffad 	bl	2c99a <ull_adv_is_enabled>
   19a40:	b110      	cbz	r0, 19a48 <ll_addr_set+0x14>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
			return BT_HCI_ERR_CMD_DISALLOWED;
   19a42:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
   19a44:	4620      	mov	r0, r4
   19a46:	bd38      	pop	{r3, r4, r5, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   19a48:	f013 f825 	bl	2ca96 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   19a4c:	f010 0006 	ands.w	r0, r0, #6
   19a50:	d1f7      	bne.n	19a42 <ll_addr_set+0xe>
	if (addr_type) {
   19a52:	682a      	ldr	r2, [r5, #0]
   19a54:	b12c      	cbz	r4, 19a62 <ll_addr_set+0x2e>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   19a56:	4b05      	ldr	r3, [pc, #20]	; (19a6c <ll_addr_set+0x38>)
   19a58:	601a      	str	r2, [r3, #0]
   19a5a:	88aa      	ldrh	r2, [r5, #4]
   19a5c:	809a      	strh	r2, [r3, #4]
	return 0;
   19a5e:	4604      	mov	r4, r0
   19a60:	e7f0      	b.n	19a44 <ll_addr_set+0x10>
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   19a62:	4b03      	ldr	r3, [pc, #12]	; (19a70 <ll_addr_set+0x3c>)
   19a64:	601a      	str	r2, [r3, #0]
   19a66:	88aa      	ldrh	r2, [r5, #4]
   19a68:	809a      	strh	r2, [r3, #4]
   19a6a:	e7eb      	b.n	19a44 <ll_addr_set+0x10>
   19a6c:	2000585e 	.word	0x2000585e
   19a70:	20005858 	.word	0x20005858

00019a74 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   19a74:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   19a76:	4802      	ldr	r0, [pc, #8]	; (19a80 <hci_driver_init+0xc>)
   19a78:	f7f0 fa70 	bl	9f5c <bt_hci_driver_register>

	return 0;
}
   19a7c:	2000      	movs	r0, #0
   19a7e:	bd08      	pop	{r3, pc}
   19a80:	0002ff0c 	.word	0x0002ff0c

00019a84 <hci_driver_send>:
	if (!buf->len) {
   19a84:	8983      	ldrh	r3, [r0, #12]
{
   19a86:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19a88:	4605      	mov	r5, r0
	if (!buf->len) {
   19a8a:	b943      	cbnz	r3, 19a9e <hci_driver_send+0x1a>
		BT_ERR("Empty HCI packet");
   19a8c:	2145      	movs	r1, #69	; 0x45
   19a8e:	481a      	ldr	r0, [pc, #104]	; (19af8 <hci_driver_send+0x74>)
   19a90:	f00d ff1f 	bl	278d2 <printk>
		return -EINVAL;
   19a94:	f06f 0415 	mvn.w	r4, #21
}
   19a98:	4620      	mov	r0, r4
   19a9a:	b003      	add	sp, #12
   19a9c:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   19a9e:	7d02      	ldrb	r2, [r0, #20]
	switch (type) {
   19aa0:	b182      	cbz	r2, 19ac4 <hci_driver_send+0x40>
   19aa2:	2a02      	cmp	r2, #2
   19aa4:	d122      	bne.n	19aec <hci_driver_send+0x68>
	err = hci_acl_handle(buf, &evt);
   19aa6:	a901      	add	r1, sp, #4
   19aa8:	f000 fc66 	bl	1a378 <hci_acl_handle>
   19aac:	4604      	mov	r4, r0
	if (evt) {
   19aae:	9801      	ldr	r0, [sp, #4]
   19ab0:	b108      	cbz	r0, 19ab6 <hci_driver_send+0x32>
		bt_recv_prio(evt);
   19ab2:	f7f0 fa39 	bl	9f28 <bt_recv_prio>
	if (!err) {
   19ab6:	2c00      	cmp	r4, #0
   19ab8:	d1ee      	bne.n	19a98 <hci_driver_send+0x14>
		net_buf_unref(buf);
   19aba:	4628      	mov	r0, r5
   19abc:	f006 f920 	bl	1fd00 <net_buf_unref>
   19ac0:	2400      	movs	r4, #0
   19ac2:	e7e9      	b.n	19a98 <hci_driver_send+0x14>
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   19ac4:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   19ac6:	9201      	str	r2, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   19ac8:	f000 fa0e 	bl	19ee8 <hci_cmd_handle>
	if (evt) {
   19acc:	2800      	cmp	r0, #0
   19ace:	d0f4      	beq.n	19aba <hci_driver_send+0x36>
		bt_recv_prio(evt);
   19ad0:	f7f0 fa2a 	bl	9f28 <bt_recv_prio>
		if (node_rx) {
   19ad4:	9c01      	ldr	r4, [sp, #4]
   19ad6:	2c00      	cmp	r4, #0
   19ad8:	d0ef      	beq.n	19aba <hci_driver_send+0x36>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   19ada:	4620      	mov	r0, r4
   19adc:	f012 fefa 	bl	2c8d4 <hci_get_class>
   19ae0:	7160      	strb	r0, [r4, #5]
			k_fifo_put(&recv_fifo, node_rx);
   19ae2:	9901      	ldr	r1, [sp, #4]
   19ae4:	4805      	ldr	r0, [pc, #20]	; (19afc <hci_driver_send+0x78>)
   19ae6:	f014 fa53 	bl	2df90 <k_queue_append>
	if (!err) {
   19aea:	e7e6      	b.n	19aba <hci_driver_send+0x36>
		BT_ERR("Unknown HCI type %u", type);
   19aec:	2145      	movs	r1, #69	; 0x45
   19aee:	4804      	ldr	r0, [pc, #16]	; (19b00 <hci_driver_send+0x7c>)
   19af0:	f00d feef 	bl	278d2 <printk>
   19af4:	e7ce      	b.n	19a94 <hci_driver_send+0x10>
   19af6:	bf00      	nop
   19af8:	00035c30 	.word	0x00035c30
   19afc:	20001f28 	.word	0x20001f28
   19b00:	00035c46 	.word	0x00035c46

00019b04 <recv_thread>:
{
   19b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   19b06:	4d2a      	ldr	r5, [pc, #168]	; (19bb0 <recv_thread+0xac>)
		LL_ASSERT(0);
   19b08:	4e2a      	ldr	r6, [pc, #168]	; (19bb4 <recv_thread+0xb0>)
   19b0a:	4f2b      	ldr	r7, [pc, #172]	; (19bb8 <recv_thread+0xb4>)
   19b0c:	f04f 32ff 	mov.w	r2, #4294967295
   19b10:	f04f 33ff 	mov.w	r3, #4294967295
   19b14:	4628      	mov	r0, r5
   19b16:	f00a f9c3 	bl	23ea0 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   19b1a:	b368      	cbz	r0, 19b78 <recv_thread+0x74>
	uint8_t class = node_rx->hdr.user_meta;
   19b1c:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   19b1e:	9001      	str	r0, [sp, #4]
	switch (class) {
   19b20:	b11b      	cbz	r3, 19b2a <recv_thread+0x26>
   19b22:	2b04      	cmp	r3, #4
   19b24:	d90e      	bls.n	19b44 <recv_thread+0x40>
   19b26:	2b05      	cmp	r3, #5
   19b28:	d031      	beq.n	19b8e <recv_thread+0x8a>
		LL_ASSERT(0);
   19b2a:	22cf      	movs	r2, #207	; 0xcf
   19b2c:	4631      	mov	r1, r6
   19b2e:	4638      	mov	r0, r7
   19b30:	f00d fecf 	bl	278d2 <printk>
   19b34:	4040      	eors	r0, r0
   19b36:	f380 8811 	msr	BASEPRI, r0
   19b3a:	f04f 0003 	mov.w	r0, #3
   19b3e:	df02      	svc	2
	struct net_buf *buf = NULL;
   19b40:	2400      	movs	r4, #0
   19b42:	e00d      	b.n	19b60 <recv_thread+0x5c>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   19b44:	2b02      	cmp	r3, #2
   19b46:	d11a      	bne.n	19b7e <recv_thread+0x7a>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   19b48:	2200      	movs	r2, #0
   19b4a:	2300      	movs	r3, #0
   19b4c:	2101      	movs	r1, #1
   19b4e:	2000      	movs	r0, #0
   19b50:	f7ef f8ae 	bl	8cb0 <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19b54:	4604      	mov	r4, r0
		if (buf) {
   19b56:	b118      	cbz	r0, 19b60 <recv_thread+0x5c>
			hci_evt_encode(node_rx, buf);
   19b58:	4601      	mov	r1, r0
   19b5a:	9801      	ldr	r0, [sp, #4]
   19b5c:	f000 fce4 	bl	1a528 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   19b60:	9b01      	ldr	r3, [sp, #4]
   19b62:	2200      	movs	r2, #0
   19b64:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   19b66:	a801      	add	r0, sp, #4
   19b68:	f001 fa1e 	bl	1afa8 <ll_rx_mem_release>
		if (buf) {
   19b6c:	b124      	cbz	r4, 19b78 <recv_thread+0x74>
			if (buf->len) {
   19b6e:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   19b70:	4620      	mov	r0, r4
			if (buf->len) {
   19b72:	b1cb      	cbz	r3, 19ba8 <recv_thread+0xa4>
				bt_recv(buf);
   19b74:	f7f0 f942 	bl	9dfc <bt_recv>
	z_impl_k_yield();
   19b78:	f00b f8c0 	bl	24cfc <z_impl_k_yield>
   19b7c:	e7c6      	b.n	19b0c <recv_thread+0x8>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19b7e:	f04f 32ff 	mov.w	r2, #4294967295
   19b82:	f04f 33ff 	mov.w	r3, #4294967295
   19b86:	2001      	movs	r0, #1
   19b88:	f7ef f842 	bl	8c10 <bt_buf_get_rx>
   19b8c:	e7e2      	b.n	19b54 <recv_thread+0x50>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   19b8e:	f04f 32ff 	mov.w	r2, #4294967295
   19b92:	f04f 33ff 	mov.w	r3, #4294967295
   19b96:	2003      	movs	r0, #3
   19b98:	f7ef f83a 	bl	8c10 <bt_buf_get_rx>
   19b9c:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   19b9e:	4601      	mov	r1, r0
   19ba0:	9801      	ldr	r0, [sp, #4]
   19ba2:	f000 fc8b 	bl	1a4bc <hci_acl_encode>
		break;
   19ba6:	e7db      	b.n	19b60 <recv_thread+0x5c>
				net_buf_unref(buf);
   19ba8:	f006 f8aa 	bl	1fd00 <net_buf_unref>
   19bac:	e7e4      	b.n	19b78 <recv_thread+0x74>
   19bae:	bf00      	nop
   19bb0:	20001f28 	.word	0x20001f28
   19bb4:	00035c5f 	.word	0x00035c5f
   19bb8:	0003067f 	.word	0x0003067f

00019bbc <prio_recv_thread>:
{
   19bbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   19bc0:	4f2a      	ldr	r7, [pc, #168]	; (19c6c <prio_recv_thread+0xb0>)
				k_fifo_put(&recv_fifo, node_rx);
   19bc2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 19c70 <prio_recv_thread+0xb4>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   19bc6:	f10d 0102 	add.w	r1, sp, #2
   19bca:	a801      	add	r0, sp, #4
   19bcc:	f001 f8fc 	bl	1adc8 <ll_rx_get>
   19bd0:	4604      	mov	r4, r0
   19bd2:	bb78      	cbnz	r0, 19c34 <prio_recv_thread+0x78>
		if (node_rx) {
   19bd4:	9b01      	ldr	r3, [sp, #4]
   19bd6:	2b00      	cmp	r3, #0
   19bd8:	d040      	beq.n	19c5c <prio_recv_thread+0xa0>
			ll_rx_dequeue();
   19bda:	f001 f94d 	bl	1ae78 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   19bde:	9d01      	ldr	r5, [sp, #4]
   19be0:	4628      	mov	r0, r5
   19be2:	f012 fe77 	bl	2c8d4 <hci_get_class>
   19be6:	7168      	strb	r0, [r5, #5]
			buf = process_prio_evt(node_rx, &evt_flags);
   19be8:	9d01      	ldr	r5, [sp, #4]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   19bea:	796b      	ldrb	r3, [r5, #5]
   19bec:	2b03      	cmp	r3, #3
   19bee:	d11c      	bne.n	19c2a <prio_recv_thread+0x6e>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   19bf0:	792b      	ldrb	r3, [r5, #4]
   19bf2:	2b14      	cmp	r3, #20
   19bf4:	d119      	bne.n	19c2a <prio_recv_thread+0x6e>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   19bf6:	4621      	mov	r1, r4
   19bf8:	f04f 32ff 	mov.w	r2, #4294967295
   19bfc:	f04f 33ff 	mov.w	r3, #4294967295
   19c00:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   19c02:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   19c04:	f7ef f854 	bl	8cb0 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   19c08:	4631      	mov	r1, r6
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   19c0a:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   19c0c:	4602      	mov	r2, r0
   19c0e:	f105 001c 	add.w	r0, r5, #28
   19c12:	f000 fc29 	bl	1a468 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   19c16:	4630      	mov	r0, r6
   19c18:	f000 fc48 	bl	1a4ac <hci_disconn_complete_process>
			if (buf) {
   19c1c:	b12c      	cbz	r4, 19c2a <prio_recv_thread+0x6e>
				bt_recv_prio(buf);
   19c1e:	4620      	mov	r0, r4
   19c20:	f7f0 f982 	bl	9f28 <bt_recv_prio>
					net_buf_unref(buf);
   19c24:	4620      	mov	r0, r4
   19c26:	f006 f86b 	bl	1fd00 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   19c2a:	9901      	ldr	r1, [sp, #4]
   19c2c:	4640      	mov	r0, r8
   19c2e:	f014 f9af 	bl	2df90 <k_queue_append>
			continue;
   19c32:	e7c8      	b.n	19bc6 <prio_recv_thread+0xa>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   19c34:	f04f 33ff 	mov.w	r3, #4294967295
   19c38:	f04f 32ff 	mov.w	r2, #4294967295
   19c3c:	2100      	movs	r1, #0
   19c3e:	2013      	movs	r0, #19
   19c40:	f7ef f836 	bl	8cb0 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   19c44:	4622      	mov	r2, r4
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   19c46:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   19c48:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   19c4c:	f012 fe2b 	bl	2c8a6 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   19c50:	4628      	mov	r0, r5
   19c52:	f7f0 f969 	bl	9f28 <bt_recv_prio>
	z_impl_k_yield();
   19c56:	f00b f851 	bl	24cfc <z_impl_k_yield>
   19c5a:	e7b4      	b.n	19bc6 <prio_recv_thread+0xa>
	return z_impl_k_sem_take(sem, timeout);
   19c5c:	f04f 32ff 	mov.w	r2, #4294967295
   19c60:	f04f 33ff 	mov.w	r3, #4294967295
   19c64:	4638      	mov	r0, r7
   19c66:	f00b f9e5 	bl	25034 <z_impl_k_sem_take>
		BT_DBG("sem taken");
   19c6a:	e7ac      	b.n	19bc6 <prio_recv_thread+0xa>
   19c6c:	20001ed8 	.word	0x20001ed8
   19c70:	20001f28 	.word	0x20001f28

00019c74 <hci_driver_open>:
{
   19c74:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   19c76:	481d      	ldr	r0, [pc, #116]	; (19cec <hci_driver_open+0x78>)
{
   19c78:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   19c7a:	f000 ffab 	bl	1abd4 <ll_init>
	if (err) {
   19c7e:	4604      	mov	r4, r0
   19c80:	b138      	cbz	r0, 19c92 <hci_driver_open+0x1e>
		BT_ERR("LL initialization failed: %d", err);
   19c82:	4602      	mov	r2, r0
   19c84:	2145      	movs	r1, #69	; 0x45
   19c86:	481a      	ldr	r0, [pc, #104]	; (19cf0 <hci_driver_open+0x7c>)
   19c88:	f00d fe23 	bl	278d2 <printk>
}
   19c8c:	4620      	mov	r0, r4
   19c8e:	b008      	add	sp, #32
   19c90:	bdd0      	pop	{r4, r6, r7, pc}
	hci_init(NULL);
   19c92:	f000 fdc1 	bl	1a818 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   19c96:	2600      	movs	r6, #0
   19c98:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19c9a:	f06f 0309 	mvn.w	r3, #9
   19c9e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   19ca2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   19ca6:	9404      	str	r4, [sp, #16]
   19ca8:	e9cd 4400 	strd	r4, r4, [sp]
   19cac:	4b11      	ldr	r3, [pc, #68]	; (19cf4 <hci_driver_open+0x80>)
   19cae:	4912      	ldr	r1, [pc, #72]	; (19cf8 <hci_driver_open+0x84>)
   19cb0:	4812      	ldr	r0, [pc, #72]	; (19cfc <hci_driver_open+0x88>)
   19cb2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   19cb6:	f00b fab1 	bl	2521c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   19cba:	4911      	ldr	r1, [pc, #68]	; (19d00 <hci_driver_open+0x8c>)
   19cbc:	480f      	ldr	r0, [pc, #60]	; (19cfc <hci_driver_open+0x88>)
   19cbe:	f014 f9da 	bl	2e076 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19cc2:	f06f 0307 	mvn.w	r3, #7
   19cc6:	e9cd 4302 	strd	r4, r3, [sp, #8]
   19cca:	e9cd 6706 	strd	r6, r7, [sp, #24]
   19cce:	9404      	str	r4, [sp, #16]
   19cd0:	e9cd 4400 	strd	r4, r4, [sp]
   19cd4:	4b0b      	ldr	r3, [pc, #44]	; (19d04 <hci_driver_open+0x90>)
   19cd6:	490c      	ldr	r1, [pc, #48]	; (19d08 <hci_driver_open+0x94>)
   19cd8:	480c      	ldr	r0, [pc, #48]	; (19d0c <hci_driver_open+0x98>)
   19cda:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19cde:	f00b fa9d 	bl	2521c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   19ce2:	490b      	ldr	r1, [pc, #44]	; (19d10 <hci_driver_open+0x9c>)
   19ce4:	4809      	ldr	r0, [pc, #36]	; (19d0c <hci_driver_open+0x98>)
   19ce6:	f014 f9c6 	bl	2e076 <z_impl_k_thread_name_set>
	return 0;
   19cea:	e7cf      	b.n	19c8c <hci_driver_open+0x18>
   19cec:	20001ed8 	.word	0x20001ed8
   19cf0:	00035bfe 	.word	0x00035bfe
   19cf4:	00019bbd 	.word	0x00019bbd
   19cf8:	20006520 	.word	0x20006520
   19cfc:	20002de8 	.word	0x20002de8
   19d00:	00035c20 	.word	0x00035c20
   19d04:	00019b05 	.word	0x00019b05
   19d08:	20006700 	.word	0x20006700
   19d0c:	20002e78 	.word	0x20002e78
   19d10:	00035c2a 	.word	0x00035c2a

00019d14 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
   19d14:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   19d16:	4b07      	ldr	r3, [pc, #28]	; (19d34 <cmd_complete_status+0x20>)
{
   19d18:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   19d1a:	2101      	movs	r1, #1
   19d1c:	8818      	ldrh	r0, [r3, #0]
   19d1e:	f010 f903 	bl	29f28 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   19d22:	2101      	movs	r1, #1
   19d24:	4604      	mov	r4, r0
   19d26:	3008      	adds	r0, #8
   19d28:	f006 f93a 	bl	1ffa0 <net_buf_simple_add>
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;
   19d2c:	7005      	strb	r5, [r0, #0]

	return buf;
}
   19d2e:	4620      	mov	r0, r4
   19d30:	bd38      	pop	{r3, r4, r5, pc}
   19d32:	bf00      	nop
   19d34:	200056d8 	.word	0x200056d8

00019d38 <cmd_status>:
	return bt_hci_cmd_status_create(_opcode, status);
   19d38:	4b02      	ldr	r3, [pc, #8]	; (19d44 <cmd_status+0xc>)
   19d3a:	4601      	mov	r1, r0
   19d3c:	8818      	ldrh	r0, [r3, #0]
   19d3e:	f010 b905 	b.w	29f4c <bt_hci_cmd_status_create>
   19d42:	bf00      	nop
   19d44:	200056d8 	.word	0x200056d8

00019d48 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   19d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d4a:	4606      	mov	r6, r0
   19d4c:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   19d4e:	4b13      	ldr	r3, [pc, #76]	; (19d9c <le_remote_feat_complete+0x54>)
{
   19d50:	460c      	mov	r4, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   19d52:	6859      	ldr	r1, [r3, #4]
   19d54:	2500      	movs	r5, #0
{
   19d56:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   19d58:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   19d5c:	462a      	mov	r2, r5
   19d5e:	4313      	orrs	r3, r2
   19d60:	d016      	beq.n	19d90 <le_remote_feat_complete+0x48>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   19d62:	4b0f      	ldr	r3, [pc, #60]	; (19da0 <le_remote_feat_complete+0x58>)
   19d64:	6819      	ldr	r1, [r3, #0]
   19d66:	462b      	mov	r3, r5
   19d68:	f001 0208 	and.w	r2, r1, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   19d6c:	4313      	orrs	r3, r2
   19d6e:	d00f      	beq.n	19d90 <le_remote_feat_complete+0x48>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   19d70:	220b      	movs	r2, #11
   19d72:	2104      	movs	r1, #4
   19d74:	f012 fd7f 	bl	2c876 <meta_evt>

	sep->status = status;
   19d78:	7006      	strb	r6, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   19d7a:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   19d7e:	1cc2      	adds	r2, r0, #3
   19d80:	b93e      	cbnz	r6, 19d92 <le_remote_feat_complete+0x4a>
   19d82:	4621      	mov	r1, r4
   19d84:	f851 3f04 	ldr.w	r3, [r1, #4]!
   19d88:	f8c0 3003 	str.w	r3, [r0, #3]
   19d8c:	684b      	ldr	r3, [r1, #4]
   19d8e:	6053      	str	r3, [r2, #4]
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   19d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
   19d92:	f8c0 5003 	str.w	r5, [r0, #3]
   19d96:	6055      	str	r5, [r2, #4]
   19d98:	e7fa      	b.n	19d90 <le_remote_feat_complete+0x48>
   19d9a:	bf00      	nop
   19d9c:	20000d80 	.word	0x20000d80
   19da0:	20000d88 	.word	0x20000d88

00019da4 <hci_cmd_complete>:
{
   19da4:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19da6:	4b06      	ldr	r3, [pc, #24]	; (19dc0 <hci_cmd_complete+0x1c>)
{
   19da8:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19daa:	8818      	ldrh	r0, [r3, #0]
{
   19dac:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19dae:	f010 f8bb 	bl	29f28 <bt_hci_cmd_complete_create>
   19db2:	4621      	mov	r1, r4
   19db4:	6028      	str	r0, [r5, #0]
   19db6:	3008      	adds	r0, #8
}
   19db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19dbc:	f006 b8f0 	b.w	1ffa0 <net_buf_simple_add>
   19dc0:	200056d8 	.word	0x200056d8

00019dc4 <hci_vendor_cmd_handle_common>:
{
   19dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   19dc6:	3801      	subs	r0, #1
{
   19dc8:	b087      	sub	sp, #28
   19dca:	4614      	mov	r4, r2
	switch (ocf) {
   19dcc:	2809      	cmp	r0, #9
   19dce:	f200 8085 	bhi.w	19edc <hci_vendor_cmd_handle_common+0x118>
   19dd2:	e8df f000 	tbb	[pc, r0]
   19dd6:	1c05      	.short	0x1c05
   19dd8:	61838330 	.word	0x61838330
   19ddc:	776a3c83 	.word	0x776a3c83
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19de0:	210d      	movs	r1, #13
   19de2:	4610      	mov	r0, r2
   19de4:	f7ff ffde 	bl	19da4 <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   19de8:	2302      	movs	r3, #2
   19dea:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   19dec:	70c3      	strb	r3, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   19dee:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   19df0:	2304      	movs	r3, #4
	rp->status = 0x00;
   19df2:	2100      	movs	r1, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   19df4:	71c3      	strb	r3, [r0, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   19df6:	2363      	movs	r3, #99	; 0x63
	rp->status = 0x00;
   19df8:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   19dfa:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   19dfc:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
   19dfe:	7141      	strb	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   19e00:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   19e02:	7243      	strb	r3, [r0, #9]
   19e04:	7281      	strb	r1, [r0, #10]
   19e06:	72c1      	strb	r1, [r0, #11]
   19e08:	7301      	strb	r1, [r0, #12]
	return 0;
   19e0a:	2400      	movs	r4, #0
   19e0c:	e010      	b.n	19e30 <hci_vendor_cmd_handle_common+0x6c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19e0e:	2141      	movs	r1, #65	; 0x41
   19e10:	4610      	mov	r0, r2
   19e12:	f7ff ffc7 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   19e16:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19e18:	4605      	mov	r5, r0
   19e1a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   19e1c:	f800 4b01 	strb.w	r4, [r0], #1
   19e20:	4621      	mov	r1, r4
   19e22:	f014 fa7d 	bl	2e320 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   19e26:	f06f 0358 	mvn.w	r3, #88	; 0x58
   19e2a:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   19e2c:	2303      	movs	r3, #3
   19e2e:	70ab      	strb	r3, [r5, #2]
}
   19e30:	4620      	mov	r0, r4
   19e32:	b007      	add	sp, #28
   19e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19e36:	2109      	movs	r1, #9
   19e38:	4610      	mov	r0, r2
   19e3a:	f7ff ffb3 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   19e3e:	4603      	mov	r3, r0
   19e40:	2100      	movs	r1, #0
   19e42:	f803 1b01 	strb.w	r1, [r3], #1
   19e46:	f8c0 1001 	str.w	r1, [r0, #1]
   19e4a:	6059      	str	r1, [r3, #4]
   19e4c:	e7dd      	b.n	19e0a <hci_vendor_cmd_handle_common+0x46>
	const char build_info[] = HCI_VS_BUILD_INFO;
   19e4e:	4b25      	ldr	r3, [pc, #148]	; (19ee4 <hci_vendor_cmd_handle_common+0x120>)
   19e50:	aa01      	add	r2, sp, #4
   19e52:	f103 0710 	add.w	r7, r3, #16
   19e56:	4615      	mov	r5, r2
   19e58:	6818      	ldr	r0, [r3, #0]
   19e5a:	6859      	ldr	r1, [r3, #4]
   19e5c:	4616      	mov	r6, r2
   19e5e:	c603      	stmia	r6!, {r0, r1}
   19e60:	3308      	adds	r3, #8
   19e62:	42bb      	cmp	r3, r7
   19e64:	4632      	mov	r2, r6
   19e66:	d1f7      	bne.n	19e58 <hci_vendor_cmd_handle_common+0x94>
   19e68:	881b      	ldrh	r3, [r3, #0]
   19e6a:	8033      	strh	r3, [r6, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   19e6c:	2113      	movs	r1, #19
   19e6e:	4620      	mov	r0, r4
   19e70:	f7ff ff98 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   19e74:	4603      	mov	r3, r0
   19e76:	2200      	movs	r2, #0
   19e78:	f803 2b01 	strb.w	r2, [r3], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19e7c:	462a      	mov	r2, r5
   19e7e:	ad05      	add	r5, sp, #20
   19e80:	4614      	mov	r4, r2
   19e82:	cc03      	ldmia	r4!, {r0, r1}
   19e84:	42ac      	cmp	r4, r5
   19e86:	6018      	str	r0, [r3, #0]
   19e88:	6059      	str	r1, [r3, #4]
   19e8a:	4622      	mov	r2, r4
   19e8c:	f103 0308 	add.w	r3, r3, #8
   19e90:	d1f6      	bne.n	19e80 <hci_vendor_cmd_handle_common+0xbc>
   19e92:	8822      	ldrh	r2, [r4, #0]
   19e94:	801a      	strh	r2, [r3, #0]
   19e96:	e7b8      	b.n	19e0a <hci_vendor_cmd_handle_common+0x46>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   19e98:	6889      	ldr	r1, [r1, #8]
   19e9a:	2000      	movs	r0, #0
   19e9c:	f7ff fdca 	bl	19a34 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
   19ea0:	2000      	movs	r0, #0
   19ea2:	f7ff ff37 	bl	19d14 <cmd_complete_status>
   19ea6:	6020      	str	r0, [r4, #0]
   19ea8:	e7af      	b.n	19e0a <hci_vendor_cmd_handle_common+0x46>
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   19eaa:	2118      	movs	r1, #24
   19eac:	4610      	mov	r0, r2
   19eae:	f7ff ff79 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   19eb2:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   19eb4:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   19eb6:	2101      	movs	r1, #1
	rp->status = 0x00;
   19eb8:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   19ebc:	f013 fa7c 	bl	2d3b8 <hci_vendor_read_static_addr>
   19ec0:	7068      	strb	r0, [r5, #1]
   19ec2:	e7b5      	b.n	19e30 <hci_vendor_cmd_handle_common+0x6c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19ec4:	2121      	movs	r1, #33	; 0x21
   19ec6:	4610      	mov	r0, r2
   19ec8:	f7ff ff6c 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   19ecc:	4601      	mov	r1, r0
   19ece:	2400      	movs	r4, #0
   19ed0:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   19ed4:	3001      	adds	r0, #1
   19ed6:	f013 fac5 	bl	2d464 <hci_vendor_read_key_hierarchy_roots>
   19eda:	e7a9      	b.n	19e30 <hci_vendor_cmd_handle_common+0x6c>
		return -EINVAL;
   19edc:	f06f 0415 	mvn.w	r4, #21
   19ee0:	e7a6      	b.n	19e30 <hci_vendor_cmd_handle_common+0x6c>
   19ee2:	bf00      	nop
   19ee4:	00035db0 	.word	0x00035db0

00019ee8 <hci_cmd_handle>:
{
   19ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   19eea:	8983      	ldrh	r3, [r0, #12]
{
   19eec:	b08b      	sub	sp, #44	; 0x2c
	struct net_buf *evt = NULL;
   19eee:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   19ef0:	2b02      	cmp	r3, #2
{
   19ef2:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
   19ef4:	9505      	str	r5, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
   19ef6:	d806      	bhi.n	19f06 <hci_cmd_handle+0x1e>
		BT_ERR("No HCI Command header");
   19ef8:	48b9      	ldr	r0, [pc, #740]	; (1a1e0 <hci_cmd_handle+0x2f8>)
   19efa:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid HCI CMD packet length");
   19efc:	f00d fce9 	bl	278d2 <printk>
		return NULL;
   19f00:	4628      	mov	r0, r5
}
   19f02:	b00b      	add	sp, #44	; 0x2c
   19f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19f06:	2103      	movs	r1, #3
   19f08:	3008      	adds	r0, #8
   19f0a:	f006 f82b 	bl	1ff64 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   19f0e:	89a2      	ldrh	r2, [r4, #12]
   19f10:	7883      	ldrb	r3, [r0, #2]
   19f12:	429a      	cmp	r2, r3
   19f14:	d202      	bcs.n	19f1c <hci_cmd_handle+0x34>
		BT_ERR("Invalid HCI CMD packet length");
   19f16:	2145      	movs	r1, #69	; 0x45
   19f18:	48b2      	ldr	r0, [pc, #712]	; (1a1e4 <hci_cmd_handle+0x2fc>)
   19f1a:	e7ef      	b.n	19efc <hci_cmd_handle+0x14>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   19f1c:	8802      	ldrh	r2, [r0, #0]
   19f1e:	49b2      	ldr	r1, [pc, #712]	; (1a1e8 <hci_cmd_handle+0x300>)
   19f20:	b293      	uxth	r3, r2
	ocf = BT_OCF(_opcode);
   19f22:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
   19f26:	0a9b      	lsrs	r3, r3, #10
   19f28:	2b04      	cmp	r3, #4
	_opcode = sys_le16_to_cpu(chdr->opcode);
   19f2a:	800a      	strh	r2, [r1, #0]
	switch (BT_OGF(_opcode)) {
   19f2c:	d061      	beq.n	19ff2 <hci_cmd_handle+0x10a>
   19f2e:	d805      	bhi.n	19f3c <hci_cmd_handle+0x54>
   19f30:	2b01      	cmp	r3, #1
   19f32:	d00f      	beq.n	19f54 <hci_cmd_handle+0x6c>
   19f34:	2b03      	cmp	r3, #3
   19f36:	d01e      	beq.n	19f76 <hci_cmd_handle+0x8e>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   19f38:	2001      	movs	r0, #1
   19f3a:	e019      	b.n	19f70 <hci_cmd_handle+0x88>
	switch (BT_OGF(_opcode)) {
   19f3c:	2b08      	cmp	r3, #8
   19f3e:	f000 80c9 	beq.w	1a0d4 <hci_cmd_handle+0x1ec>
   19f42:	2b3f      	cmp	r3, #63	; 0x3f
   19f44:	d1f8      	bne.n	19f38 <hci_cmd_handle+0x50>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   19f46:	aa05      	add	r2, sp, #20
   19f48:	4621      	mov	r1, r4
   19f4a:	f7ff ff3b 	bl	19dc4 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   19f4e:	3016      	adds	r0, #22
   19f50:	d0f2      	beq.n	19f38 <hci_cmd_handle+0x50>
   19f52:	e039      	b.n	19fc8 <hci_cmd_handle+0xe0>
	switch (ocf) {
   19f54:	2806      	cmp	r0, #6
   19f56:	d006      	beq.n	19f66 <hci_cmd_handle+0x7e>
   19f58:	281d      	cmp	r0, #29
   19f5a:	d1ed      	bne.n	19f38 <hci_cmd_handle+0x50>
	handle = sys_le16_to_cpu(cmd->handle);
   19f5c:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   19f5e:	8818      	ldrh	r0, [r3, #0]
   19f60:	f012 fefb 	bl	2cd5a <ll_version_ind_send>
	*evt = cmd_status(status);
   19f64:	e004      	b.n	19f70 <hci_cmd_handle+0x88>
		disconnect(cmd, evt);
   19f66:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   19f68:	7899      	ldrb	r1, [r3, #2]
   19f6a:	8818      	ldrh	r0, [r3, #0]
   19f6c:	f012 feb3 	bl	2ccd6 <ll_terminate_ind_send>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   19f70:	f7ff fee2 	bl	19d38 <cmd_status>
   19f74:	e012      	b.n	19f9c <hci_cmd_handle+0xb4>
	switch (ocf) {
   19f76:	2803      	cmp	r0, #3
   19f78:	d012      	beq.n	19fa0 <hci_cmd_handle+0xb8>
   19f7a:	d808      	bhi.n	19f8e <hci_cmd_handle+0xa6>
   19f7c:	2801      	cmp	r0, #1
   19f7e:	d1db      	bne.n	19f38 <hci_cmd_handle+0x50>
	event_mask = sys_get_le64(cmd->events);
   19f80:	68a0      	ldr	r0, [r4, #8]
   19f82:	f012 fc74 	bl	2c86e <sys_get_le64>
   19f86:	4b99      	ldr	r3, [pc, #612]	; (1a1ec <hci_cmd_handle+0x304>)
	le_event_mask = sys_get_le64(cmd->events);
   19f88:	e9c3 0100 	strd	r0, r1, [r3]
   19f8c:	e003      	b.n	19f96 <hci_cmd_handle+0xae>
	switch (ocf) {
   19f8e:	282d      	cmp	r0, #45	; 0x2d
   19f90:	d01c      	beq.n	19fcc <hci_cmd_handle+0xe4>
   19f92:	2863      	cmp	r0, #99	; 0x63
   19f94:	d1d0      	bne.n	19f38 <hci_cmd_handle+0x50>
	*evt = cmd_complete_status(0x00);
   19f96:	2000      	movs	r0, #0
	*evt = cmd_complete_status(status);
   19f98:	f7ff febc 	bl	19d14 <cmd_complete_status>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   19f9c:	9005      	str	r0, [sp, #20]
   19f9e:	e013      	b.n	19fc8 <hci_cmd_handle+0xe0>
	event_mask = DEFAULT_EVENT_MASK;
   19fa0:	4b92      	ldr	r3, [pc, #584]	; (1a1ec <hci_cmd_handle+0x304>)
   19fa2:	f04f 30ff 	mov.w	r0, #4294967295
   19fa6:	f641 71ff 	movw	r1, #8191	; 0x1fff
   19faa:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   19fae:	4b90      	ldr	r3, [pc, #576]	; (1a1f0 <hci_cmd_handle+0x308>)
   19fb0:	201f      	movs	r0, #31
   19fb2:	2100      	movs	r1, #0
   19fb4:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   19fb8:	f000 fe78 	bl	1acac <ll_reset>
		*evt = cmd_complete_status(0x00);
   19fbc:	4628      	mov	r0, r5
   19fbe:	f7ff fea9 	bl	19d14 <cmd_complete_status>
	conn_count = 0U;
   19fc2:	4b8c      	ldr	r3, [pc, #560]	; (1a1f4 <hci_cmd_handle+0x30c>)
		*evt = cmd_complete_status(0x00);
   19fc4:	9005      	str	r0, [sp, #20]
	conn_count = 0U;
   19fc6:	601d      	str	r5, [r3, #0]
	return evt;
   19fc8:	9805      	ldr	r0, [sp, #20]
   19fca:	e79a      	b.n	19f02 <hci_cmd_handle+0x1a>
		read_tx_power_level(cmd, evt);
   19fcc:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19fce:	2104      	movs	r1, #4
   19fd0:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   19fd2:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   19fd4:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19fd6:	f7ff fee5 	bl	19da4 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   19fda:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19fdc:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   19fde:	1cc3      	adds	r3, r0, #3
   19fe0:	463a      	mov	r2, r7
   19fe2:	4631      	mov	r1, r6
   19fe4:	2002      	movs	r0, #2
   19fe6:	f012 fc2f 	bl	2c848 <ll_tx_pwr_lvl_get>
	rp->status = status;
   19fea:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   19fec:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   19ff0:	e7ea      	b.n	19fc8 <hci_cmd_handle+0xe0>
	switch (ocf) {
   19ff2:	3801      	subs	r0, #1
   19ff4:	2808      	cmp	r0, #8
   19ff6:	d89f      	bhi.n	19f38 <hci_cmd_handle+0x50>
   19ff8:	a301      	add	r3, pc, #4	; (adr r3, 1a000 <hci_cmd_handle+0x118>)
   19ffa:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   19ffe:	bf00      	nop
   1a000:	0001a025 	.word	0x0001a025
   1a004:	0001a04b 	.word	0x0001a04b
   1a008:	0001a0a1 	.word	0x0001a0a1
   1a00c:	00019f39 	.word	0x00019f39
   1a010:	00019f39 	.word	0x00019f39
   1a014:	00019f39 	.word	0x00019f39
   1a018:	00019f39 	.word	0x00019f39
   1a01c:	00019f39 	.word	0x00019f39
   1a020:	0001a0bd 	.word	0x0001a0bd
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a024:	2109      	movs	r1, #9
   1a026:	a805      	add	r0, sp, #20
   1a028:	f7ff febc 	bl	19da4 <hci_cmd_complete>
	rp->hci_version = LL_VERSION_NUMBER;
   1a02c:	220b      	movs	r2, #11
	rp->status = 0x00;
   1a02e:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   1a030:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   1a032:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1a034:	2259      	movs	r2, #89	; 0x59
	rp->status = 0x00;
   1a036:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
   1a038:	7083      	strb	r3, [r0, #2]
   1a03a:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1a03c:	7183      	strb	r3, [r0, #6]
   1a03e:	7142      	strb	r2, [r0, #5]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   1a040:	f04f 33ff 	mov.w	r3, #4294967295
	dst[0] = val;
   1a044:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   1a046:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   1a048:	e7be      	b.n	19fc8 <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a04a:	2141      	movs	r1, #65	; 0x41
   1a04c:	a805      	add	r0, sp, #20
   1a04e:	f7ff fea9 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   1a052:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a054:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   1a056:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1a058:	f800 1b01 	strb.w	r1, [r0], #1
   1a05c:	f014 f960 	bl	2e320 <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   1a060:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   1a064:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   1a066:	2304      	movs	r3, #4
   1a068:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   1a06a:	2328      	movs	r3, #40	; 0x28
   1a06c:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   1a06e:	2302      	movs	r3, #2
   1a070:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   1a072:	2304      	movs	r3, #4
   1a074:	75e3      	strb	r3, [r4, #23]
	rp->commands[28] |= BIT(3);
   1a076:	2308      	movs	r3, #8
   1a078:	7763      	strb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1a07a:	f06f 0308 	mvn.w	r3, #8
   1a07e:	76a3      	strb	r3, [r4, #26]
	rp->commands[26] |= BIT(2) | BIT(3);
   1a080:	f06f 0330 	mvn.w	r3, #48	; 0x30
   1a084:	76e3      	strb	r3, [r4, #27]
	rp->commands[0] |= BIT(5);
   1a086:	2320      	movs	r3, #32
   1a088:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   1a08a:	f06f 0308 	mvn.w	r3, #8
   1a08e:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
   1a090:	2330      	movs	r3, #48	; 0x30
   1a092:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[38] |= BIT(7);
   1a096:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1a09a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   1a09e:	e793      	b.n	19fc8 <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a0a0:	2109      	movs	r1, #9
   1a0a2:	a805      	add	r0, sp, #20
   1a0a4:	f7ff fe7e 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   1a0a8:	4603      	mov	r3, r0
   1a0aa:	2200      	movs	r2, #0
   1a0ac:	f803 2b01 	strb.w	r2, [r3], #1
   1a0b0:	f8c0 2001 	str.w	r2, [r0, #1]
   1a0b4:	605a      	str	r2, [r3, #4]
	rp->features[4] = (1 << 5) | (1 << 6);
   1a0b6:	2360      	movs	r3, #96	; 0x60
   1a0b8:	7143      	strb	r3, [r0, #5]
	if (err == -EINVAL) {
   1a0ba:	e785      	b.n	19fc8 <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a0bc:	2107      	movs	r1, #7
   1a0be:	a805      	add	r0, sp, #20
   1a0c0:	f7ff fe70 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   1a0c4:	4601      	mov	r1, r0
   1a0c6:	2300      	movs	r3, #0
   1a0c8:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   1a0cc:	4618      	mov	r0, r3
   1a0ce:	f7ff fc9f 	bl	19a10 <ll_addr_get>
	if (err == -EINVAL) {
   1a0d2:	e779      	b.n	19fc8 <hci_cmd_handle+0xe0>
	switch (ocf) {
   1a0d4:	280f      	cmp	r0, #15
   1a0d6:	f000 80c8 	beq.w	1a26a <hci_cmd_handle+0x382>
   1a0da:	d848      	bhi.n	1a16e <hci_cmd_handle+0x286>
   1a0dc:	2807      	cmp	r0, #7
   1a0de:	f000 8103 	beq.w	1a2e8 <hci_cmd_handle+0x400>
   1a0e2:	d829      	bhi.n	1a138 <hci_cmd_handle+0x250>
   1a0e4:	2803      	cmp	r0, #3
   1a0e6:	f000 80ac 	beq.w	1a242 <hci_cmd_handle+0x35a>
   1a0ea:	d811      	bhi.n	1a110 <hci_cmd_handle+0x228>
   1a0ec:	2801      	cmp	r0, #1
   1a0ee:	f000 80a3 	beq.w	1a238 <hci_cmd_handle+0x350>
   1a0f2:	2802      	cmp	r0, #2
   1a0f4:	f47f af20 	bne.w	19f38 <hci_cmd_handle+0x50>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a0f8:	2104      	movs	r1, #4
   1a0fa:	a805      	add	r0, sp, #20
   1a0fc:	f7ff fe52 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   1a100:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   1a102:	221b      	movs	r2, #27
	rp->status = 0x00;
   1a104:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   1a106:	7083      	strb	r3, [r0, #2]
   1a108:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   1a10a:	2303      	movs	r3, #3
	dst[2] = val >> 16;
   1a10c:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
   1a10e:	e75b      	b.n	19fc8 <hci_cmd_handle+0xe0>
	switch (ocf) {
   1a110:	2805      	cmp	r0, #5
   1a112:	f000 80a5 	beq.w	1a260 <hci_cmd_handle+0x378>
   1a116:	2806      	cmp	r0, #6
   1a118:	f47f af0e 	bne.w	19f38 <hci_cmd_handle+0x50>
		le_set_adv_param(cmd, evt);
   1a11c:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   1a11e:	7ba5      	ldrb	r5, [r4, #14]
   1a120:	79a3      	ldrb	r3, [r4, #6]
   1a122:	7962      	ldrb	r2, [r4, #5]
   1a124:	7921      	ldrb	r1, [r4, #4]
   1a126:	8820      	ldrh	r0, [r4, #0]
   1a128:	9502      	str	r5, [sp, #8]
   1a12a:	7b65      	ldrb	r5, [r4, #13]
   1a12c:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   1a12e:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   1a130:	9400      	str	r4, [sp, #0]
   1a132:	f001 fcb9 	bl	1baa8 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
   1a136:	e72f      	b.n	19f98 <hci_cmd_handle+0xb0>
	switch (ocf) {
   1a138:	280a      	cmp	r0, #10
   1a13a:	f000 80e2 	beq.w	1a302 <hci_cmd_handle+0x41a>
   1a13e:	d80b      	bhi.n	1a158 <hci_cmd_handle+0x270>
   1a140:	2808      	cmp	r0, #8
   1a142:	f000 80d8 	beq.w	1a2f6 <hci_cmd_handle+0x40e>
   1a146:	2809      	cmp	r0, #9
   1a148:	f47f aef6 	bne.w	19f38 <hci_cmd_handle+0x50>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   1a14c:	68a1      	ldr	r1, [r4, #8]
   1a14e:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a152:	f001 fe37 	bl	1bdc4 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
   1a156:	e71f      	b.n	19f98 <hci_cmd_handle+0xb0>
	switch (ocf) {
   1a158:	280b      	cmp	r0, #11
   1a15a:	f000 80d7 	beq.w	1a30c <hci_cmd_handle+0x424>
   1a15e:	280c      	cmp	r0, #12
   1a160:	f47f aeea 	bne.w	19f38 <hci_cmd_handle+0x50>
	status = ll_scan_enable(cmd->enable);
   1a164:	68a3      	ldr	r3, [r4, #8]
   1a166:	7818      	ldrb	r0, [r3, #0]
   1a168:	f012 fc74 	bl	2ca54 <ll_scan_enable>
   1a16c:	e714      	b.n	19f98 <hci_cmd_handle+0xb0>
	switch (ocf) {
   1a16e:	2816      	cmp	r0, #22
   1a170:	f000 80d8 	beq.w	1a324 <hci_cmd_handle+0x43c>
   1a174:	d81f      	bhi.n	1a1b6 <hci_cmd_handle+0x2ce>
   1a176:	2812      	cmp	r0, #18
   1a178:	f000 8084 	beq.w	1a284 <hci_cmd_handle+0x39c>
   1a17c:	d808      	bhi.n	1a190 <hci_cmd_handle+0x2a8>
   1a17e:	2810      	cmp	r0, #16
   1a180:	d07d      	beq.n	1a27e <hci_cmd_handle+0x396>
   1a182:	2811      	cmp	r0, #17
   1a184:	f47f aed8 	bne.w	19f38 <hci_cmd_handle+0x50>
	status = ll_wl_add(&cmd->addr);
   1a188:	68a0      	ldr	r0, [r4, #8]
   1a18a:	f003 f935 	bl	1d3f8 <ll_wl_add>
	*evt = cmd_complete_status(status);
   1a18e:	e703      	b.n	19f98 <hci_cmd_handle+0xb0>
	switch (ocf) {
   1a190:	2813      	cmp	r0, #19
   1a192:	f000 80cc 	beq.w	1a32e <hci_cmd_handle+0x446>
   1a196:	2815      	cmp	r0, #21
   1a198:	f47f aece 	bne.w	19f38 <hci_cmd_handle+0x50>
	handle = sys_le16_to_cpu(cmd->handle);
   1a19c:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a19e:	2108      	movs	r1, #8
   1a1a0:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   1a1a2:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a1a4:	f7ff fdfe 	bl	19da4 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   1a1a8:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a1aa:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   1a1ac:	1cc1      	adds	r1, r0, #3
   1a1ae:	4630      	mov	r0, r6
   1a1b0:	f012 fd7b 	bl	2ccaa <ll_chm_get>
   1a1b4:	e719      	b.n	19fea <hci_cmd_handle+0x102>
	switch (ocf) {
   1a1b6:	281c      	cmp	r0, #28
   1a1b8:	f000 8083 	beq.w	1a2c2 <hci_cmd_handle+0x3da>
   1a1bc:	d81c      	bhi.n	1a1f8 <hci_cmd_handle+0x310>
   1a1be:	2817      	cmp	r0, #23
   1a1c0:	d064      	beq.n	1a28c <hci_cmd_handle+0x3a4>
   1a1c2:	2818      	cmp	r0, #24
   1a1c4:	f47f aeb8 	bne.w	19f38 <hci_cmd_handle+0x50>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a1c8:	2109      	movs	r1, #9
   1a1ca:	a805      	add	r0, sp, #20
   1a1cc:	f7ff fdea 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   1a1d0:	2300      	movs	r3, #0
   1a1d2:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   1a1d6:	2108      	movs	r1, #8
   1a1d8:	f003 fb52 	bl	1d880 <lll_csrand_get>
	if (err == -EINVAL) {
   1a1dc:	e6f4      	b.n	19fc8 <hci_cmd_handle+0xe0>
   1a1de:	bf00      	nop
   1a1e0:	00035d60 	.word	0x00035d60
   1a1e4:	00035d7b 	.word	0x00035d7b
   1a1e8:	200056d8 	.word	0x200056d8
   1a1ec:	20000d80 	.word	0x20000d80
   1a1f0:	20000d88 	.word	0x20000d88
   1a1f4:	200041a0 	.word	0x200041a0
	switch (ocf) {
   1a1f8:	2821      	cmp	r0, #33	; 0x21
   1a1fa:	f000 80a6 	beq.w	1a34a <hci_cmd_handle+0x462>
   1a1fe:	284b      	cmp	r0, #75	; 0x4b
   1a200:	f000 80ab 	beq.w	1a35a <hci_cmd_handle+0x472>
   1a204:	2820      	cmp	r0, #32
   1a206:	f47f ae97 	bne.w	19f38 <hci_cmd_handle+0x50>
		le_conn_param_req_reply(cmd, evt);
   1a20a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   1a20c:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1a20e:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   1a210:	8853      	ldrh	r3, [r2, #2]
   1a212:	9102      	str	r1, [sp, #8]
   1a214:	88d1      	ldrh	r1, [r2, #6]
   1a216:	9101      	str	r1, [sp, #4]
   1a218:	8892      	ldrh	r2, [r2, #4]
   1a21a:	9200      	str	r2, [sp, #0]
   1a21c:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1a21e:	2102      	movs	r1, #2
   1a220:	4620      	mov	r0, r4
   1a222:	f012 fcc0 	bl	2cba6 <ll_conn_update>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a226:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1a228:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a22a:	a805      	add	r0, sp, #20
   1a22c:	f7ff fdba 	bl	19da4 <hci_cmd_complete>
	rp->status = status;
   1a230:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   1a232:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   1a236:	e6c7      	b.n	19fc8 <hci_cmd_handle+0xe0>
	le_event_mask = sys_get_le64(cmd->events);
   1a238:	68a0      	ldr	r0, [r4, #8]
   1a23a:	f012 fb18 	bl	2c86e <sys_get_le64>
   1a23e:	4b4d      	ldr	r3, [pc, #308]	; (1a374 <hci_cmd_handle+0x48c>)
   1a240:	e6a2      	b.n	19f88 <hci_cmd_handle+0xa0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a242:	2109      	movs	r1, #9
   1a244:	a805      	add	r0, sp, #20
   1a246:	f7ff fdad 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   1a24a:	4602      	mov	r2, r0
   1a24c:	2300      	movs	r3, #0
   1a24e:	f802 3b01 	strb.w	r3, [r2], #1
   1a252:	f8c0 3001 	str.w	r3, [r0, #1]
   1a256:	6053      	str	r3, [r2, #4]
	dst[0] = val;
   1a258:	228e      	movs	r2, #142	; 0x8e
   1a25a:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
   1a25c:	7083      	strb	r3, [r0, #2]
   1a25e:	e755      	b.n	1a10c <hci_cmd_handle+0x224>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   1a260:	68a1      	ldr	r1, [r4, #8]
   1a262:	2001      	movs	r0, #1
   1a264:	f7ff fbe6 	bl	19a34 <ll_addr_set>
	*evt = cmd_complete_status(status);
   1a268:	e696      	b.n	19f98 <hci_cmd_handle+0xb0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a26a:	2102      	movs	r1, #2
   1a26c:	a805      	add	r0, sp, #20
   1a26e:	f7ff fd99 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   1a272:	7005      	strb	r5, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a274:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   1a276:	f012 fdd0 	bl	2ce1a <ll_wl_size_get>
   1a27a:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   1a27c:	e6a4      	b.n	19fc8 <hci_cmd_handle+0xe0>
	status = ll_wl_clear();
   1a27e:	f003 f8a5 	bl	1d3cc <ll_wl_clear>
	*evt = cmd_complete_status(status);
   1a282:	e689      	b.n	19f98 <hci_cmd_handle+0xb0>
	status = ll_wl_remove(&cmd->addr);
   1a284:	68a0      	ldr	r0, [r4, #8]
   1a286:	f003 f8f3 	bl	1d470 <ll_wl_remove>
	*evt = cmd_complete_status(status);
   1a28a:	e685      	b.n	19f98 <hci_cmd_handle+0xb0>
		le_encrypt(cmd, evt);
   1a28c:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   1a28e:	2300      	movs	r3, #0
   1a290:	aa06      	add	r2, sp, #24
   1a292:	f100 0110 	add.w	r1, r0, #16
   1a296:	f013 f816 	bl	2d2c6 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a29a:	2111      	movs	r1, #17
   1a29c:	a805      	add	r0, sp, #20
   1a29e:	f7ff fd81 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   1a2a2:	4603      	mov	r3, r0
   1a2a4:	2200      	movs	r2, #0
   1a2a6:	f803 2b01 	strb.w	r2, [r3], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a2aa:	ad0a      	add	r5, sp, #40	; 0x28
   1a2ac:	aa06      	add	r2, sp, #24
   1a2ae:	4614      	mov	r4, r2
   1a2b0:	cc03      	ldmia	r4!, {r0, r1}
   1a2b2:	42ac      	cmp	r4, r5
   1a2b4:	6018      	str	r0, [r3, #0]
   1a2b6:	6059      	str	r1, [r3, #4]
   1a2b8:	4622      	mov	r2, r4
   1a2ba:	f103 0308 	add.w	r3, r3, #8
   1a2be:	d1f6      	bne.n	1a2ae <hci_cmd_handle+0x3c6>
   1a2c0:	e682      	b.n	19fc8 <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a2c2:	2109      	movs	r1, #9
   1a2c4:	a805      	add	r0, sp, #20
   1a2c6:	f7ff fd6d 	bl	19da4 <hci_cmd_complete>
	dst[0] = val;
   1a2ca:	22bf      	movs	r2, #191	; 0xbf
   1a2cc:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
   1a2ce:	22ff      	movs	r2, #255	; 0xff
   1a2d0:	7082      	strb	r2, [r0, #2]
	dst[0] = val;
   1a2d2:	2230      	movs	r2, #48	; 0x30
   1a2d4:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   1a2d6:	22ec      	movs	r2, #236	; 0xec
   1a2d8:	7102      	strb	r2, [r0, #4]
	dst[0] = val;
   1a2da:	22c0      	movs	r2, #192	; 0xc0
	rp->status = 0x00;
   1a2dc:	2300      	movs	r3, #0
   1a2de:	7142      	strb	r2, [r0, #5]
	dst[1] = val >> 8;
   1a2e0:	2201      	movs	r2, #1
   1a2e2:	7003      	strb	r3, [r0, #0]
   1a2e4:	7182      	strb	r2, [r0, #6]
   1a2e6:	e6ad      	b.n	1a044 <hci_cmd_handle+0x15c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a2e8:	2102      	movs	r1, #2
   1a2ea:	a805      	add	r0, sp, #20
   1a2ec:	f7ff fd5a 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   1a2f0:	7005      	strb	r5, [r0, #0]
	rp->tx_power_level = 0;
   1a2f2:	7045      	strb	r5, [r0, #1]
	if (err == -EINVAL) {
   1a2f4:	e668      	b.n	19fc8 <hci_cmd_handle+0xe0>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   1a2f6:	68a1      	ldr	r1, [r4, #8]
   1a2f8:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a2fc:	f001 fd5a 	bl	1bdb4 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
   1a300:	e64a      	b.n	19f98 <hci_cmd_handle+0xb0>
	status = ll_adv_enable(cmd->enable);
   1a302:	68a3      	ldr	r3, [r4, #8]
   1a304:	7818      	ldrb	r0, [r3, #0]
   1a306:	f7e7 fddb 	bl	1ec0 <ll_adv_enable>
	*evt = cmd_complete_status(status);
   1a30a:	e645      	b.n	19f98 <hci_cmd_handle+0xb0>
		le_set_scan_param(cmd, evt);
   1a30c:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   1a30e:	7963      	ldrb	r3, [r4, #5]
   1a310:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   1a314:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   1a318:	7820      	ldrb	r0, [r4, #0]
   1a31a:	79a4      	ldrb	r4, [r4, #6]
   1a31c:	9400      	str	r4, [sp, #0]
   1a31e:	f7e8 f80f 	bl	2340 <ll_scan_params_set>
	*evt = cmd_complete_status(status);
   1a322:	e639      	b.n	19f98 <hci_cmd_handle+0xb0>
	handle = sys_le16_to_cpu(cmd->handle);
   1a324:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   1a326:	8818      	ldrh	r0, [r3, #0]
   1a328:	f012 fcfc 	bl	2cd24 <ll_feature_req_send>
	*evt = cmd_status(status);
   1a32c:	e620      	b.n	19f70 <hci_cmd_handle+0x88>
		le_conn_update(cmd, evt);
   1a32e:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   1a330:	8911      	ldrh	r1, [r2, #8]
   1a332:	8853      	ldrh	r3, [r2, #2]
   1a334:	8810      	ldrh	r0, [r2, #0]
   1a336:	9102      	str	r1, [sp, #8]
   1a338:	88d1      	ldrh	r1, [r2, #6]
   1a33a:	9101      	str	r1, [sp, #4]
   1a33c:	8892      	ldrh	r2, [r2, #4]
   1a33e:	9200      	str	r2, [sp, #0]
   1a340:	2200      	movs	r2, #0
   1a342:	4611      	mov	r1, r2
   1a344:	f012 fc2f 	bl	2cba6 <ll_conn_update>
	*evt = cmd_status(status);
   1a348:	e612      	b.n	19f70 <hci_cmd_handle+0x88>
		le_conn_param_req_neg_reply(cmd, evt);
   1a34a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1a34c:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1a34e:	789a      	ldrb	r2, [r3, #2]
   1a350:	2300      	movs	r3, #0
   1a352:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1a356:	9300      	str	r3, [sp, #0]
   1a358:	e761      	b.n	1a21e <hci_cmd_handle+0x336>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1a35a:	2103      	movs	r1, #3
   1a35c:	a805      	add	r0, sp, #20
   1a35e:	f7ff fd21 	bl	19da4 <hci_cmd_complete>
	rp->status = 0x00;
   1a362:	4601      	mov	r1, r0
   1a364:	2300      	movs	r3, #0
   1a366:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1a36a:	3001      	adds	r0, #1
   1a36c:	f012 fa7b 	bl	2c866 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   1a370:	e62a      	b.n	19fc8 <hci_cmd_handle+0xe0>
   1a372:	bf00      	nop
   1a374:	20000d88 	.word	0x20000d88

0001a378 <hci_acl_handle>:
{
   1a378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   1a37c:	2300      	movs	r3, #0
   1a37e:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   1a380:	8983      	ldrh	r3, [r0, #12]
   1a382:	2b03      	cmp	r3, #3
{
   1a384:	4605      	mov	r5, r0
   1a386:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
   1a388:	d806      	bhi.n	1a398 <hci_acl_handle+0x20>
		BT_ERR("No HCI ACL header");
   1a38a:	4832      	ldr	r0, [pc, #200]	; (1a454 <hci_acl_handle+0xdc>)
   1a38c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid HCI ACL packet length");
   1a38e:	f00d faa0 	bl	278d2 <printk>
		return -EINVAL;
   1a392:	f06f 0015 	mvn.w	r0, #21
   1a396:	e037      	b.n	1a408 <hci_acl_handle+0x90>
   1a398:	2104      	movs	r1, #4
   1a39a:	3008      	adds	r0, #8
   1a39c:	f005 fde2 	bl	1ff64 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   1a3a0:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   1a3a2:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   1a3a4:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   1a3a8:	42bb      	cmp	r3, r7
   1a3aa:	d202      	bcs.n	1a3b2 <hci_acl_handle+0x3a>
		BT_ERR("Invalid HCI ACL packet length");
   1a3ac:	2145      	movs	r1, #69	; 0x45
   1a3ae:	482a      	ldr	r0, [pc, #168]	; (1a458 <hci_acl_handle+0xe0>)
   1a3b0:	e7ed      	b.n	1a38e <hci_acl_handle+0x16>
	node_tx = ll_tx_mem_acquire();
   1a3b2:	f001 ff45 	bl	1c240 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   1a3b6:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if (!node_tx) {
   1a3ba:	4604      	mov	r4, r0
   1a3bc:	bb30      	cbnz	r0, 1a40c <hci_acl_handle+0x94>
		BT_ERR("Tx Buffer Overflow");
   1a3be:	2145      	movs	r1, #69	; 0x45
   1a3c0:	4826      	ldr	r0, [pc, #152]	; (1a45c <hci_acl_handle+0xe4>)
   1a3c2:	f00d fa86 	bl	278d2 <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   1a3c6:	4b26      	ldr	r3, [pc, #152]	; (1a460 <hci_acl_handle+0xe8>)
   1a3c8:	6819      	ldr	r1, [r3, #0]
   1a3ca:	4623      	mov	r3, r4
   1a3cc:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   1a3d0:	4313      	orrs	r3, r2
   1a3d2:	d017      	beq.n	1a404 <hci_acl_handle+0x8c>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1a3d4:	f04f 32ff 	mov.w	r2, #4294967295
   1a3d8:	f04f 33ff 	mov.w	r3, #4294967295
   1a3dc:	2001      	movs	r0, #1
   1a3de:	f7ee fc17 	bl	8c10 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1a3e2:	2102      	movs	r1, #2
   1a3e4:	f8c8 0000 	str.w	r0, [r8]
   1a3e8:	3008      	adds	r0, #8
   1a3ea:	f005 fdd9 	bl	1ffa0 <net_buf_simple_add>
	hdr->len = len;
   1a3ee:	2401      	movs	r4, #1
	hdr->evt = evt;
   1a3f0:	231a      	movs	r3, #26
   1a3f2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1a3f4:	7044      	strb	r4, [r0, #1]
   1a3f6:	f8d8 0000 	ldr.w	r0, [r8]
   1a3fa:	4621      	mov	r1, r4
   1a3fc:	3008      	adds	r0, #8
   1a3fe:	f005 fdcf 	bl	1ffa0 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   1a402:	7004      	strb	r4, [r0, #0]
		return -ENOBUFS;
   1a404:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1a408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   1a40c:	08b3      	lsrs	r3, r6, #2
   1a40e:	d1c0      	bne.n	1a392 <hci_acl_handle+0x1a>
	switch (bt_acl_flags_pb(flags)) {
   1a410:	b12e      	cbz	r6, 1a41e <hci_acl_handle+0xa6>
   1a412:	2e01      	cmp	r6, #1
   1a414:	d1bd      	bne.n	1a392 <hci_acl_handle+0x1a>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1a416:	7903      	ldrb	r3, [r0, #4]
   1a418:	f366 0301 	bfi	r3, r6, #0, #2
   1a41c:	e003      	b.n	1a426 <hci_acl_handle+0xae>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   1a41e:	7903      	ldrb	r3, [r0, #4]
   1a420:	2202      	movs	r2, #2
   1a422:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data->len = len;
   1a426:	7167      	strb	r7, [r4, #5]
   1a428:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1a42a:	7123      	strb	r3, [r4, #4]
   1a42c:	463a      	mov	r2, r7
   1a42e:	1de0      	adds	r0, r4, #7
   1a430:	f013 ff3b 	bl	2e2aa <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   1a434:	4621      	mov	r1, r4
   1a436:	f3c9 000b 	ubfx	r0, r9, #0, #12
   1a43a:	f001 ff0d 	bl	1c258 <ll_tx_mem_enqueue>
   1a43e:	2800      	cmp	r0, #0
   1a440:	d0e2      	beq.n	1a408 <hci_acl_handle+0x90>
		BT_ERR("Invalid Tx Enqueue");
   1a442:	2145      	movs	r1, #69	; 0x45
   1a444:	4807      	ldr	r0, [pc, #28]	; (1a464 <hci_acl_handle+0xec>)
   1a446:	f00d fa44 	bl	278d2 <printk>
		ll_tx_mem_release(node_tx);
   1a44a:	4620      	mov	r0, r4
   1a44c:	f001 fefe 	bl	1c24c <ll_tx_mem_release>
		return -EINVAL;
   1a450:	e79f      	b.n	1a392 <hci_acl_handle+0x1a>
   1a452:	bf00      	nop
   1a454:	00035cf6 	.word	0x00035cf6
   1a458:	00035d0d 	.word	0x00035d0d
   1a45c:	00035d30 	.word	0x00035d30
   1a460:	20000d80 	.word	0x20000d80
   1a464:	00035d48 	.word	0x00035d48

0001a468 <hci_disconn_complete_encode>:
{
   1a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   1a46a:	4b0f      	ldr	r3, [pc, #60]	; (1a4a8 <hci_disconn_complete_encode+0x40>)
   1a46c:	681b      	ldr	r3, [r3, #0]
   1a46e:	2500      	movs	r5, #0
{
   1a470:	4606      	mov	r6, r0
   1a472:	460f      	mov	r7, r1
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   1a474:	f003 0010 	and.w	r0, r3, #16
   1a478:	4629      	mov	r1, r5
   1a47a:	ea50 0301 	orrs.w	r3, r0, r1
   1a47e:	d011      	beq.n	1a4a4 <hci_disconn_complete_encode+0x3c>
   1a480:	f102 0408 	add.w	r4, r2, #8
   1a484:	2102      	movs	r1, #2
   1a486:	4620      	mov	r0, r4
   1a488:	f005 fd8a 	bl	1ffa0 <net_buf_simple_add>
	hdr->evt = evt;
   1a48c:	2305      	movs	r3, #5
	hdr->len = len;
   1a48e:	2104      	movs	r1, #4
	hdr->evt = evt;
   1a490:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1a492:	7041      	strb	r1, [r0, #1]
   1a494:	4620      	mov	r0, r4
   1a496:	f005 fd83 	bl	1ffa0 <net_buf_simple_add>
	ep->status = 0x00;
   1a49a:	7005      	strb	r5, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1a49c:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   1a4a0:	7833      	ldrb	r3, [r6, #0]
   1a4a2:	70c3      	strb	r3, [r0, #3]
}
   1a4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a4a6:	bf00      	nop
   1a4a8:	20000d80 	.word	0x20000d80

0001a4ac <hci_disconn_complete_process>:
	conn_count--;
   1a4ac:	4a02      	ldr	r2, [pc, #8]	; (1a4b8 <hci_disconn_complete_process+0xc>)
   1a4ae:	6813      	ldr	r3, [r2, #0]
   1a4b0:	3b01      	subs	r3, #1
   1a4b2:	6013      	str	r3, [r2, #0]
}
   1a4b4:	4770      	bx	lr
   1a4b6:	bf00      	nop
   1a4b8:	200041a0 	.word	0x200041a0

0001a4bc <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   1a4bc:	7f03      	ldrb	r3, [r0, #28]
   1a4be:	f003 0303 	and.w	r3, r3, #3
   1a4c2:	3b01      	subs	r3, #1
   1a4c4:	2b01      	cmp	r3, #1
{
   1a4c6:	b570      	push	{r4, r5, r6, lr}
   1a4c8:	4604      	mov	r4, r0
	switch (pdu_data->ll_id) {
   1a4ca:	d81c      	bhi.n	1a506 <hci_acl_encode+0x4a>
   1a4cc:	f101 0608 	add.w	r6, r1, #8
	handle = node_rx->hdr.handle;
   1a4d0:	88c5      	ldrh	r5, [r0, #6]
   1a4d2:	2104      	movs	r1, #4
   1a4d4:	4630      	mov	r0, r6
   1a4d6:	f005 fd63 	bl	1ffa0 <net_buf_simple_add>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1a4da:	7f23      	ldrb	r3, [r4, #28]
   1a4dc:	f003 0303 	and.w	r3, r3, #3
   1a4e0:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   1a4e2:	bf0c      	ite	eq
   1a4e4:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   1a4e8:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
   1a4ec:	8005      	strh	r5, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   1a4ee:	7f61      	ldrb	r1, [r4, #29]
   1a4f0:	8041      	strh	r1, [r0, #2]
   1a4f2:	4630      	mov	r0, r6
   1a4f4:	f005 fd54 	bl	1ffa0 <net_buf_simple_add>
   1a4f8:	7f62      	ldrb	r2, [r4, #29]
   1a4fa:	f104 011f 	add.w	r1, r4, #31

	default:
		LL_ASSERT(0);
		break;
	}
}
   1a4fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a502:	f013 bed2 	b.w	2e2aa <memcpy>
		LL_ASSERT(0);
   1a506:	f241 726b 	movw	r2, #5995	; 0x176b
   1a50a:	4905      	ldr	r1, [pc, #20]	; (1a520 <hci_acl_encode+0x64>)
   1a50c:	4805      	ldr	r0, [pc, #20]	; (1a524 <hci_acl_encode+0x68>)
   1a50e:	f00d f9e0 	bl	278d2 <printk>
   1a512:	4040      	eors	r0, r0
   1a514:	f380 8811 	msr	BASEPRI, r0
   1a518:	f04f 0003 	mov.w	r0, #3
   1a51c:	df02      	svc	2
}
   1a51e:	bd70      	pop	{r4, r5, r6, pc}
   1a520:	00035cbd 	.word	0x00035cbd
   1a524:	0003067f 	.word	0x0003067f

0001a528 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   1a528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a52c:	4604      	mov	r4, r0
   1a52e:	b086      	sub	sp, #24
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1a530:	7923      	ldrb	r3, [r4, #4]
   1a532:	88e7      	ldrh	r7, [r4, #6]
   1a534:	2b03      	cmp	r3, #3
{
   1a536:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   1a538:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1a53c:	f000 8112 	beq.w	1a764 <hci_evt_encode+0x23c>
	switch (node_rx->hdr.type) {
   1a540:	2b13      	cmp	r3, #19
   1a542:	f000 80c1 	beq.w	1a6c8 <hci_evt_encode+0x1a0>
   1a546:	d80e      	bhi.n	1a566 <hci_evt_encode+0x3e>
   1a548:	2b04      	cmp	r3, #4
   1a54a:	d033      	beq.n	1a5b4 <hci_evt_encode+0x8c>
		LL_ASSERT(0);
   1a54c:	f241 6276 	movw	r2, #5750	; 0x1676
		LL_ASSERT(0);
   1a550:	49aa      	ldr	r1, [pc, #680]	; (1a7fc <hci_evt_encode+0x2d4>)
   1a552:	48ab      	ldr	r0, [pc, #684]	; (1a800 <hci_evt_encode+0x2d8>)
   1a554:	f00d f9bd 	bl	278d2 <printk>
   1a558:	4040      	eors	r0, r0
   1a55a:	f380 8811 	msr	BASEPRI, r0
   1a55e:	f04f 0003 	mov.w	r0, #3
   1a562:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   1a564:	e074      	b.n	1a650 <hci_evt_encode+0x128>
	switch (node_rx->hdr.type) {
   1a566:	2b14      	cmp	r3, #20
   1a568:	f000 80f5 	beq.w	1a756 <hci_evt_encode+0x22e>
   1a56c:	2b15      	cmp	r3, #21
   1a56e:	d1ed      	bne.n	1a54c <hci_evt_encode+0x24>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a570:	4ba4      	ldr	r3, [pc, #656]	; (1a804 <hci_evt_encode+0x2dc>)
   1a572:	6858      	ldr	r0, [r3, #4]
   1a574:	2100      	movs	r1, #0
   1a576:	460a      	mov	r2, r1
   1a578:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1a57c:	4313      	orrs	r3, r2
   1a57e:	d067      	beq.n	1a650 <hci_evt_encode+0x128>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   1a580:	4ba1      	ldr	r3, [pc, #644]	; (1a808 <hci_evt_encode+0x2e0>)
   1a582:	6818      	ldr	r0, [r3, #0]
   1a584:	460b      	mov	r3, r1
   1a586:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a58a:	4313      	orrs	r3, r2
   1a58c:	d060      	beq.n	1a650 <hci_evt_encode+0x128>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   1a58e:	2209      	movs	r2, #9
   1a590:	2103      	movs	r1, #3
   1a592:	4630      	mov	r0, r6
   1a594:	f012 f96f 	bl	2c876 <meta_evt>
	sep->status = cu->status;
   1a598:	7f23      	ldrb	r3, [r4, #28]
   1a59a:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1a59c:	8be3      	ldrh	r3, [r4, #30]
   1a59e:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   1a5a2:	8c23      	ldrh	r3, [r4, #32]
   1a5a4:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1a5a8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
	sep->handle = sys_cpu_to_le16(handle);
   1a5aa:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1a5ae:	f8a0 3007 	strh.w	r3, [r0, #7]
   1a5b2:	e04d      	b.n	1a650 <hci_evt_encode+0x128>
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   1a5b4:	4b95      	ldr	r3, [pc, #596]	; (1a80c <hci_evt_encode+0x2e4>)
   1a5b6:	9304      	str	r3, [sp, #16]
   1a5b8:	f64f 7304 	movw	r3, #65284	; 0xff04
   1a5bc:	f8ad 3014 	strh.w	r3, [sp, #20]
   1a5c0:	2302      	movs	r3, #2
   1a5c2:	f88d 3016 	strb.w	r3, [sp, #22]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   1a5c6:	4b8f      	ldr	r3, [pc, #572]	; (1a804 <hci_evt_encode+0x2dc>)
   1a5c8:	7e27      	ldrb	r7, [r4, #24]
   1a5ca:	6858      	ldr	r0, [r3, #4]
	direct = node_rx->hdr.rx_ftr.direct;
   1a5cc:	7e65      	ldrb	r5, [r4, #25]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   1a5ce:	427f      	negs	r7, r7
   1a5d0:	2100      	movs	r1, #0
   1a5d2:	b27f      	sxtb	r7, r7
	if (direct) {
   1a5d4:	460a      	mov	r2, r1
   1a5d6:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1a5da:	2d00      	cmp	r5, #0
   1a5dc:	d03b      	beq.n	1a656 <hci_evt_encode+0x12e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a5de:	4313      	orrs	r3, r2
   1a5e0:	d036      	beq.n	1a650 <hci_evt_encode+0x128>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   1a5e2:	4b89      	ldr	r3, [pc, #548]	; (1a808 <hci_evt_encode+0x2e0>)
   1a5e4:	6818      	ldr	r0, [r3, #0]
   1a5e6:	460b      	mov	r3, r1
   1a5e8:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a5ec:	4313      	orrs	r3, r2
   1a5ee:	d02f      	beq.n	1a650 <hci_evt_encode+0x128>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   1a5f0:	7f23      	ldrb	r3, [r4, #28]
   1a5f2:	f003 030f 	and.w	r3, r3, #15
   1a5f6:	2b01      	cmp	r3, #1
   1a5f8:	d00b      	beq.n	1a612 <hci_evt_encode+0xea>
   1a5fa:	f241 0281 	movw	r2, #4225	; 0x1081
   1a5fe:	497f      	ldr	r1, [pc, #508]	; (1a7fc <hci_evt_encode+0x2d4>)
   1a600:	487f      	ldr	r0, [pc, #508]	; (1a800 <hci_evt_encode+0x2d8>)
   1a602:	f00d f966 	bl	278d2 <printk>
   1a606:	4040      	eors	r0, r0
   1a608:	f380 8811 	msr	BASEPRI, r0
   1a60c:	f04f 0003 	mov.w	r0, #3
   1a610:	df02      	svc	2
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   1a612:	2211      	movs	r2, #17
   1a614:	210b      	movs	r1, #11
   1a616:	4630      	mov	r0, r6
   1a618:	f012 f92d 	bl	2c876 <meta_evt>
	drp->num_reports = 1U;
   1a61c:	2301      	movs	r3, #1
   1a61e:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   1a620:	7043      	strb	r3, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
   1a622:	7f23      	ldrb	r3, [r4, #28]
   1a624:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1a628:	7083      	strb	r3, [r0, #2]
   1a62a:	4623      	mov	r3, r4
   1a62c:	f853 2f1e 	ldr.w	r2, [r3, #30]!
   1a630:	f8c0 2003 	str.w	r2, [r0, #3]
   1a634:	889b      	ldrh	r3, [r3, #4]
   1a636:	f8a0 3007 	strh.w	r3, [r0, #7]
	dir_info->dir_addr.type = adv->rx_addr;
   1a63a:	7f23      	ldrb	r3, [r4, #28]
   1a63c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   1a640:	7243      	strb	r3, [r0, #9]
   1a642:	f854 3f24 	ldr.w	r3, [r4, #36]!
   1a646:	f8c0 300a 	str.w	r3, [r0, #10]
   1a64a:	88a3      	ldrh	r3, [r4, #4]
   1a64c:	81c3      	strh	r3, [r0, #14]
	dir_info->rssi = rssi;
   1a64e:	7407      	strb	r7, [r0, #16]
}
   1a650:	b006      	add	sp, #24
   1a652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a656:	4313      	orrs	r3, r2
   1a658:	d0fa      	beq.n	1a650 <hci_evt_encode+0x128>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   1a65a:	4b6b      	ldr	r3, [pc, #428]	; (1a808 <hci_evt_encode+0x2e0>)
   1a65c:	6819      	ldr	r1, [r3, #0]
   1a65e:	462b      	mov	r3, r5
   1a660:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a664:	4313      	orrs	r3, r2
   1a666:	d0f3      	beq.n	1a650 <hci_evt_encode+0x128>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   1a668:	7f23      	ldrb	r3, [r4, #28]
   1a66a:	f003 030f 	and.w	r3, r3, #15
   1a66e:	2b01      	cmp	r3, #1
		data_len = (adv->len - BDADDR_SIZE);
   1a670:	bf1e      	ittt	ne
   1a672:	7f65      	ldrbne	r5, [r4, #29]
   1a674:	3d06      	subne	r5, #6
   1a676:	b2ed      	uxtbne	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   1a678:	f105 020b 	add.w	r2, r5, #11
   1a67c:	b2d2      	uxtb	r2, r2
   1a67e:	2102      	movs	r1, #2
   1a680:	4630      	mov	r0, r6
   1a682:	f012 f8f8 	bl	2c876 <meta_evt>
	sep->num_reports = 1U;
   1a686:	2301      	movs	r3, #1
   1a688:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   1a68a:	7f23      	ldrb	r3, [r4, #28]
   1a68c:	aa06      	add	r2, sp, #24
   1a68e:	f003 030f 	and.w	r3, r3, #15
   1a692:	4413      	add	r3, r2
   1a694:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1a698:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1a69c:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
   1a69e:	7f23      	ldrb	r3, [r4, #28]
   1a6a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1a6a4:	7083      	strb	r3, [r0, #2]
   1a6a6:	4623      	mov	r3, r4
   1a6a8:	f853 2f1e 	ldr.w	r2, [r3, #30]!
   1a6ac:	f8c0 2003 	str.w	r2, [r0, #3]
   1a6b0:	889b      	ldrh	r3, [r3, #4]
   1a6b2:	f8a0 3007 	strh.w	r3, [r0, #7]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   1a6b6:	f100 030a 	add.w	r3, r0, #10
	adv_info->length = data_len;
   1a6ba:	7245      	strb	r5, [r0, #9]
   1a6bc:	462a      	mov	r2, r5
   1a6be:	4618      	mov	r0, r3
   1a6c0:	f013 fdf3 	bl	2e2aa <memcpy>
	*prssi = rssi;
   1a6c4:	5547      	strb	r7, [r0, r5]
   1a6c6:	e7c3      	b.n	1a650 <hci_evt_encode+0x128>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a6c8:	4b4e      	ldr	r3, [pc, #312]	; (1a804 <hci_evt_encode+0x2dc>)
   1a6ca:	6858      	ldr	r0, [r3, #4]
   1a6cc:	2100      	movs	r1, #0
   1a6ce:	460a      	mov	r2, r1
   1a6d0:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1a6d4:	4313      	orrs	r3, r2
   1a6d6:	d0bb      	beq.n	1a650 <hci_evt_encode+0x128>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1a6d8:	4b4b      	ldr	r3, [pc, #300]	; (1a808 <hci_evt_encode+0x2e0>)
   1a6da:	6818      	ldr	r0, [r3, #0]
   1a6dc:	460b      	mov	r3, r1
   1a6de:	f000 0201 	and.w	r2, r0, #1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a6e2:	4313      	orrs	r3, r2
   1a6e4:	d0b4      	beq.n	1a650 <hci_evt_encode+0x128>
	uint8_t status = cc->status;
   1a6e6:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
   1a6ea:	f1b8 0f00 	cmp.w	r8, #0
   1a6ee:	d103      	bne.n	1a6f8 <hci_evt_encode+0x1d0>
		conn_count++;
   1a6f0:	4a47      	ldr	r2, [pc, #284]	; (1a810 <hci_evt_encode+0x2e8>)
   1a6f2:	6813      	ldr	r3, [r2, #0]
   1a6f4:	3301      	adds	r3, #1
   1a6f6:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   1a6f8:	2212      	movs	r2, #18
   1a6fa:	2101      	movs	r1, #1
   1a6fc:	4630      	mov	r0, r6
   1a6fe:	f012 f8ba 	bl	2c876 <meta_evt>
   1a702:	4605      	mov	r5, r0
	if (status) {
   1a704:	f1b8 0f00 	cmp.w	r8, #0
   1a708:	d006      	beq.n	1a718 <hci_evt_encode+0x1f0>
__ssp_bos_icheck3(memset, void *, int)
   1a70a:	2212      	movs	r2, #18
   1a70c:	2100      	movs	r1, #0
   1a70e:	f013 fe07 	bl	2e320 <memset>
		lecc->status = status;
   1a712:	f885 8000 	strb.w	r8, [r5]
		return;
   1a716:	e79b      	b.n	1a650 <hci_evt_encode+0x128>
	lecc->status = 0x00;
   1a718:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   1a71c:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
   1a720:	7f63      	ldrb	r3, [r4, #29]
   1a722:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   1a724:	7fa3      	ldrb	r3, [r4, #30]
   1a726:	f003 0301 	and.w	r3, r3, #1
   1a72a:	7103      	strb	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a72c:	4623      	mov	r3, r4
   1a72e:	f853 2f1f 	ldr.w	r2, [r3, #31]!
   1a732:	f8c0 2005 	str.w	r2, [r0, #5]
   1a736:	889b      	ldrh	r3, [r3, #4]
   1a738:	f8a0 3009 	strh.w	r3, [r0, #9]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   1a73c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1a73e:	f8a0 300b 	strh.w	r3, [r0, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
   1a742:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1a744:	f8a0 300d 	strh.w	r3, [r0, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1a748:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1a74a:	f8a0 300f 	strh.w	r3, [r0, #15]
	lecc->clock_accuracy = cc->sca;
   1a74e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1a752:	7443      	strb	r3, [r0, #17]
   1a754:	e77c      	b.n	1a650 <hci_evt_encode+0x128>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   1a756:	460a      	mov	r2, r1
   1a758:	4639      	mov	r1, r7
}
   1a75a:	b006      	add	sp, #24
   1a75c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   1a760:	f7ff be82 	b.w	1a468 <hci_disconn_complete_encode>
	switch (pdu_data->llctrl.opcode) {
   1a764:	7fe3      	ldrb	r3, [r4, #31]
   1a766:	2b09      	cmp	r3, #9
   1a768:	d00c      	beq.n	1a784 <hci_evt_encode+0x25c>
   1a76a:	2b0f      	cmp	r3, #15
   1a76c:	d013      	beq.n	1a796 <hci_evt_encode+0x26e>
   1a76e:	2b07      	cmp	r3, #7
   1a770:	d140      	bne.n	1a7f4 <hci_evt_encode+0x2cc>
		le_unknown_rsp(pdu_data, handle, buf);
   1a772:	f894 2020 	ldrb.w	r2, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1a776:	2a0e      	cmp	r2, #14
   1a778:	d135      	bne.n	1a7e6 <hci_evt_encode+0x2be>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1a77a:	460b      	mov	r3, r1
   1a77c:	463a      	mov	r2, r7
   1a77e:	2100      	movs	r1, #0
   1a780:	201a      	movs	r0, #26
   1a782:	e003      	b.n	1a78c <hci_evt_encode+0x264>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   1a784:	460b      	mov	r3, r1
   1a786:	463a      	mov	r2, r7
   1a788:	4601      	mov	r1, r0
   1a78a:	2000      	movs	r0, #0
}
   1a78c:	b006      	add	sp, #24
   1a78e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1a792:	f7ff bad9 	b.w	19d48 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a796:	4b1b      	ldr	r3, [pc, #108]	; (1a804 <hci_evt_encode+0x2dc>)
   1a798:	6858      	ldr	r0, [r3, #4]
   1a79a:	2100      	movs	r1, #0
   1a79c:	460a      	mov	r2, r1
   1a79e:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1a7a2:	4313      	orrs	r3, r2
   1a7a4:	d006      	beq.n	1a7b4 <hci_evt_encode+0x28c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1a7a6:	4b18      	ldr	r3, [pc, #96]	; (1a808 <hci_evt_encode+0x2e0>)
   1a7a8:	6818      	ldr	r0, [r3, #0]
   1a7aa:	460b      	mov	r3, r1
   1a7ac:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a7b0:	4313      	orrs	r3, r2
   1a7b2:	d109      	bne.n	1a7c8 <hci_evt_encode+0x2a0>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   1a7b4:	2300      	movs	r3, #0
   1a7b6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1a7ba:	9300      	str	r3, [sp, #0]
   1a7bc:	221a      	movs	r2, #26
   1a7be:	2102      	movs	r1, #2
   1a7c0:	4638      	mov	r0, r7
   1a7c2:	f012 f9f0 	bl	2cba6 <ll_conn_update>
		return;
   1a7c6:	e743      	b.n	1a650 <hci_evt_encode+0x128>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   1a7c8:	220a      	movs	r2, #10
   1a7ca:	2106      	movs	r1, #6
   1a7cc:	4630      	mov	r0, r6
   1a7ce:	f012 f852 	bl	2c876 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1a7d2:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   1a7d4:	8c23      	ldrh	r3, [r4, #32]
   1a7d6:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   1a7d8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1a7da:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   1a7dc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1a7de:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1a7e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1a7e2:	8103      	strh	r3, [r0, #8]
   1a7e4:	e734      	b.n	1a650 <hci_evt_encode+0x128>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1a7e6:	480b      	ldr	r0, [pc, #44]	; (1a814 <hci_evt_encode+0x2ec>)
   1a7e8:	2157      	movs	r1, #87	; 0x57
}
   1a7ea:	b006      	add	sp, #24
   1a7ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1a7f0:	f00d b86f 	b.w	278d2 <printk>
		LL_ASSERT(0);
   1a7f4:	f241 723f 	movw	r2, #5951	; 0x173f
   1a7f8:	e6aa      	b.n	1a550 <hci_evt_encode+0x28>
   1a7fa:	bf00      	nop
   1a7fc:	00035cbd 	.word	0x00035cbd
   1a800:	0003067f 	.word	0x0003067f
   1a804:	20000d80 	.word	0x20000d80
   1a808:	20000d88 	.word	0x20000d88
   1a80c:	ff030100 	.word	0xff030100
   1a810:	200041a0 	.word	0x200041a0
   1a814:	00035d9e 	.word	0x00035d9e

0001a818 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   1a818:	4b07      	ldr	r3, [pc, #28]	; (1a838 <hci_init+0x20>)
   1a81a:	f04f 30ff 	mov.w	r0, #4294967295
   1a81e:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1a822:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1a826:	4b05      	ldr	r3, [pc, #20]	; (1a83c <hci_init+0x24>)
   1a828:	201f      	movs	r0, #31
   1a82a:	2100      	movs	r1, #0
   1a82c:	e9c3 0100 	strd	r0, r1, [r3]
	conn_count = 0U;
   1a830:	4b03      	ldr	r3, [pc, #12]	; (1a840 <hci_init+0x28>)
   1a832:	2200      	movs	r2, #0
   1a834:	601a      	str	r2, [r3, #0]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   1a836:	4770      	bx	lr
   1a838:	20000d80 	.word	0x20000d80
   1a83c:	20000d88 	.word	0x20000d88
   1a840:	200041a0 	.word	0x200041a0

0001a844 <ll_rx_link_inc_quota>:
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1a844:	2801      	cmp	r0, #1
{
   1a846:	b538      	push	{r3, r4, r5, lr}
   1a848:	4604      	mov	r4, r0
   1a84a:	4d0a      	ldr	r5, [pc, #40]	; (1a874 <ll_rx_link_inc_quota+0x30>)
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1a84c:	d10e      	bne.n	1a86c <ll_rx_link_inc_quota+0x28>
   1a84e:	782b      	ldrb	r3, [r5, #0]
   1a850:	2b05      	cmp	r3, #5
   1a852:	d90b      	bls.n	1a86c <ll_rx_link_inc_quota+0x28>
   1a854:	f240 42a9 	movw	r2, #1193	; 0x4a9
   1a858:	4907      	ldr	r1, [pc, #28]	; (1a878 <ll_rx_link_inc_quota+0x34>)
   1a85a:	4808      	ldr	r0, [pc, #32]	; (1a87c <ll_rx_link_inc_quota+0x38>)
   1a85c:	f00d f839 	bl	278d2 <printk>
   1a860:	4040      	eors	r0, r0
   1a862:	f380 8811 	msr	BASEPRI, r0
   1a866:	f04f 0003 	mov.w	r0, #3
   1a86a:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   1a86c:	782b      	ldrb	r3, [r5, #0]
   1a86e:	441c      	add	r4, r3
   1a870:	702c      	strb	r4, [r5, #0]
}
   1a872:	bd38      	pop	{r3, r4, r5, pc}
   1a874:	20004290 	.word	0x20004290
   1a878:	00035ddd 	.word	0x00035ddd
   1a87c:	0003067f 	.word	0x0003067f

0001a880 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   1a880:	b510      	push	{r4, lr}
   1a882:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   1a884:	f012 fae1 	bl	2ce4a <lll_reset>
	LL_ASSERT(!err);
   1a888:	b158      	cbz	r0, 1a8a2 <perform_lll_reset+0x22>
   1a88a:	f240 6279 	movw	r2, #1657	; 0x679
   1a88e:	491e      	ldr	r1, [pc, #120]	; (1a908 <perform_lll_reset+0x88>)
   1a890:	481e      	ldr	r0, [pc, #120]	; (1a90c <perform_lll_reset+0x8c>)
   1a892:	f00d f81e 	bl	278d2 <printk>
   1a896:	4040      	eors	r0, r0
   1a898:	f380 8811 	msr	BASEPRI, r0
   1a89c:	f04f 0003 	mov.w	r0, #3
   1a8a0:	df02      	svc	2

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   1a8a2:	f012 fb3c 	bl	2cf1e <lll_adv_reset>
	LL_ASSERT(!err);
   1a8a6:	b158      	cbz	r0, 1a8c0 <perform_lll_reset+0x40>
   1a8a8:	f240 627e 	movw	r2, #1662	; 0x67e
   1a8ac:	4916      	ldr	r1, [pc, #88]	; (1a908 <perform_lll_reset+0x88>)
   1a8ae:	4817      	ldr	r0, [pc, #92]	; (1a90c <perform_lll_reset+0x8c>)
   1a8b0:	f00d f80f 	bl	278d2 <printk>
   1a8b4:	4040      	eors	r0, r0
   1a8b6:	f380 8811 	msr	BASEPRI, r0
   1a8ba:	f04f 0003 	mov.w	r0, #3
   1a8be:	df02      	svc	2
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   1a8c0:	f012 fc5f 	bl	2d182 <lll_scan_reset>
	LL_ASSERT(!err);
   1a8c4:	b158      	cbz	r0, 1a8de <perform_lll_reset+0x5e>
   1a8c6:	f240 6284 	movw	r2, #1668	; 0x684
   1a8ca:	490f      	ldr	r1, [pc, #60]	; (1a908 <perform_lll_reset+0x88>)
   1a8cc:	480f      	ldr	r0, [pc, #60]	; (1a90c <perform_lll_reset+0x8c>)
   1a8ce:	f00d f800 	bl	278d2 <printk>
   1a8d2:	4040      	eors	r0, r0
   1a8d4:	f380 8811 	msr	BASEPRI, r0
   1a8d8:	f04f 0003 	mov.w	r0, #3
   1a8dc:	df02      	svc	2
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   1a8de:	f012 fc5c 	bl	2d19a <lll_conn_reset>
	LL_ASSERT(!err);
   1a8e2:	b158      	cbz	r0, 1a8fc <perform_lll_reset+0x7c>
   1a8e4:	f240 628a 	movw	r2, #1674	; 0x68a
   1a8e8:	4907      	ldr	r1, [pc, #28]	; (1a908 <perform_lll_reset+0x88>)
   1a8ea:	4808      	ldr	r0, [pc, #32]	; (1a90c <perform_lll_reset+0x8c>)
   1a8ec:	f00c fff1 	bl	278d2 <printk>
   1a8f0:	4040      	eors	r0, r0
   1a8f2:	f380 8811 	msr	BASEPRI, r0
   1a8f6:	f04f 0003 	mov.w	r0, #3
   1a8fa:	df02      	svc	2
	z_impl_k_sem_give(sem);
   1a8fc:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   1a8fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a902:	f00a bb5b 	b.w	24fbc <z_impl_k_sem_give>
   1a906:	bf00      	nop
   1a908:	00035ddd 	.word	0x00035ddd
   1a90c:	0003067f 	.word	0x0003067f

0001a910 <rx_alloc>:

	return done;
}

static inline void rx_alloc(uint8_t max)
{
   1a910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t idx;

	if (max > mem_link_rx.quota_pdu) {
   1a914:	4e37      	ldr	r6, [pc, #220]	; (1a9f4 <rx_alloc+0xe4>)
		max = mem_link_rx.quota_pdu;
	}

	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1a916:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 1aa00 <rx_alloc+0xf0>
   1a91a:	7834      	ldrb	r4, [r6, #0]
   1a91c:	4284      	cmp	r4, r0
   1a91e:	bf28      	it	cs
   1a920:	4604      	movcs	r4, r0
   1a922:	3c01      	subs	r4, #1
   1a924:	b2e4      	uxtb	r4, r4
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
   1a926:	f106 0904 	add.w	r9, r6, #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1a92a:	2cff      	cmp	r4, #255	; 0xff
   1a92c:	d030      	beq.n	1a990 <rx_alloc+0x80>
 */
static inline bool mfifo_enqueue_idx_get(uint8_t count, uint8_t first, uint8_t last,
					 uint8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
   1a92e:	f898 5003 	ldrb.w	r5, [r8, #3]
	if (last == count) {
   1a932:	f898 2001 	ldrb.w	r2, [r8, #1]
   1a936:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   1a93a:	3501      	adds	r5, #1
   1a93c:	b2ed      	uxtb	r5, r5
		last = 0U;
   1a93e:	42aa      	cmp	r2, r5
   1a940:	bf08      	it	eq
   1a942:	2500      	moveq	r5, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
   1a944:	42ab      	cmp	r3, r5
   1a946:	d021      	beq.n	1a98c <rx_alloc+0x7c>
		link = mem_acquire(&mem_link_rx.free);
   1a948:	4648      	mov	r0, r9
   1a94a:	f011 fc9f 	bl	2c28c <mem_acquire>
		if (!link) {
   1a94e:	4607      	mov	r7, r0
   1a950:	b908      	cbnz	r0, 1a956 <rx_alloc+0x46>
		MFIFO_BY_IDX_ENQUEUE(ll_pdu_rx_free, idx, rx);

		ll_rx_link_inc_quota(-1);
	}
#endif /* CONFIG_BT_CONN */
}
   1a952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx = mem_acquire(&mem_pdu_rx.free);
   1a956:	4828      	ldr	r0, [pc, #160]	; (1a9f8 <rx_alloc+0xe8>)
   1a958:	f011 fc98 	bl	2c28c <mem_acquire>
		if (!rx) {
   1a95c:	3c01      	subs	r4, #1
   1a95e:	b2e4      	uxtb	r4, r4
   1a960:	b928      	cbnz	r0, 1a96e <rx_alloc+0x5e>
			mem_release(link, &mem_link_rx.free);
   1a962:	4926      	ldr	r1, [pc, #152]	; (1a9fc <rx_alloc+0xec>)
   1a964:	4638      	mov	r0, r7
}
   1a966:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
   1a96a:	f011 bca0 	b.w	2c2ae <mem_release>
		rx->link = link;
   1a96e:	6007      	str	r7, [r0, #0]
 */
static inline void mfifo_by_idx_enqueue(uint8_t *fifo, uint8_t size, uint8_t idx,
					void *mem, uint8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1a970:	f898 2003 	ldrb.w	r2, [r8, #3]
   1a974:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1a978:	fb02 8303 	mla	r3, r2, r3, r8
   1a97c:	6058      	str	r0, [r3, #4]

	*last = idx; /* Commit: Update write index */
   1a97e:	f888 5003 	strb.w	r5, [r8, #3]
		ll_rx_link_inc_quota(-1);
   1a982:	f04f 30ff 	mov.w	r0, #4294967295
   1a986:	f7ff ff5d 	bl	1a844 <ll_rx_link_inc_quota>
   1a98a:	e7ce      	b.n	1a92a <rx_alloc+0x1a>
	if (!max) {
   1a98c:	2c00      	cmp	r4, #0
   1a98e:	d0e0      	beq.n	1a952 <rx_alloc+0x42>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1a990:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1aa04 <rx_alloc+0xf4>
		link = mem_acquire(&mem_link_rx.free);
   1a994:	4f19      	ldr	r7, [pc, #100]	; (1a9fc <rx_alloc+0xec>)
   1a996:	e00f      	b.n	1a9b8 <rx_alloc+0xa8>
		link->mem = NULL;
   1a998:	2300      	movs	r3, #0
   1a99a:	606b      	str	r3, [r5, #4]
		rx->link = link;
   1a99c:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1a99e:	f898 2003 	ldrb.w	r2, [r8, #3]
   1a9a2:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1a9a6:	fb02 8303 	mla	r3, r2, r3, r8
   1a9aa:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   1a9ac:	f888 4003 	strb.w	r4, [r8, #3]
		ll_rx_link_inc_quota(-1);
   1a9b0:	f04f 30ff 	mov.w	r0, #4294967295
   1a9b4:	f7ff ff46 	bl	1a844 <ll_rx_link_inc_quota>
	while (mem_link_rx.quota_pdu &&
   1a9b8:	7833      	ldrb	r3, [r6, #0]
   1a9ba:	2b00      	cmp	r3, #0
   1a9bc:	d0c9      	beq.n	1a952 <rx_alloc+0x42>
	last = last + 1;
   1a9be:	f898 4003 	ldrb.w	r4, [r8, #3]
	if (last == count) {
   1a9c2:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1a9c6:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   1a9ca:	3401      	adds	r4, #1
   1a9cc:	b2e4      	uxtb	r4, r4
		last = 0U;
   1a9ce:	42a2      	cmp	r2, r4
   1a9d0:	bf08      	it	eq
   1a9d2:	2400      	moveq	r4, #0
	if (last == first) {
   1a9d4:	429c      	cmp	r4, r3
   1a9d6:	d0bc      	beq.n	1a952 <rx_alloc+0x42>
		link = mem_acquire(&mem_link_rx.free);
   1a9d8:	4638      	mov	r0, r7
   1a9da:	f011 fc57 	bl	2c28c <mem_acquire>
		if (!link) {
   1a9de:	4605      	mov	r5, r0
   1a9e0:	2800      	cmp	r0, #0
   1a9e2:	d0b6      	beq.n	1a952 <rx_alloc+0x42>
		rx = mem_acquire(&mem_pdu_rx.free);
   1a9e4:	4804      	ldr	r0, [pc, #16]	; (1a9f8 <rx_alloc+0xe8>)
   1a9e6:	f011 fc51 	bl	2c28c <mem_acquire>
		if (!rx) {
   1a9ea:	2800      	cmp	r0, #0
   1a9ec:	d1d4      	bne.n	1a998 <rx_alloc+0x88>
			mem_release(link, &mem_link_rx.free);
   1a9ee:	4903      	ldr	r1, [pc, #12]	; (1a9fc <rx_alloc+0xec>)
   1a9f0:	4628      	mov	r0, r5
   1a9f2:	e7b8      	b.n	1a966 <rx_alloc+0x56>
   1a9f4:	20004290 	.word	0x20004290
   1a9f8:	200042f8 	.word	0x200042f8
   1a9fc:	20004294 	.word	0x20004294
   1aa00:	200015fc 	.word	0x200015fc
   1aa04:	200015ec 	.word	0x200015ec

0001aa08 <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1aa08:	4b39      	ldr	r3, [pc, #228]	; (1aaf0 <init_reset+0xe8>)
{
   1aa0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1aa0e:	1d18      	adds	r0, r3, #4
   1aa10:	2203      	movs	r2, #3
   1aa12:	2134      	movs	r1, #52	; 0x34
   1aa14:	f011 fc21 	bl	2c25a <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   1aa18:	4b36      	ldr	r3, [pc, #216]	; (1aaf4 <init_reset+0xec>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1aa1a:	4d37      	ldr	r5, [pc, #220]	; (1aaf8 <init_reset+0xf0>)
		link = mem_acquire(&mem_link_done.free);
   1aa1c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1aaf4 <init_reset+0xec>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   1aa20:	2203      	movs	r2, #3
   1aa22:	2108      	movs	r1, #8
   1aa24:	1d18      	adds	r0, r3, #4
   1aa26:	f011 fc18 	bl	2c25a <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1aa2a:	462e      	mov	r6, r5
	last = last + 1;
   1aa2c:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   1aa2e:	786a      	ldrb	r2, [r5, #1]
   1aa30:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1aa32:	3401      	adds	r4, #1
   1aa34:	b2e4      	uxtb	r4, r4
		last = 0U;
   1aa36:	42a2      	cmp	r2, r4
   1aa38:	bf08      	it	eq
   1aa3a:	2400      	moveq	r4, #0
	if (last == first) {
   1aa3c:	429c      	cmp	r4, r3
   1aa3e:	d00d      	beq.n	1aa5c <init_reset+0x54>
		link = mem_acquire(&mem_link_done.free);
   1aa40:	4640      	mov	r0, r8
   1aa42:	f011 fc23 	bl	2c28c <mem_acquire>
		if (!link) {
   1aa46:	4607      	mov	r7, r0
   1aa48:	b140      	cbz	r0, 1aa5c <init_reset+0x54>
		rx = mem_acquire(&mem_done.free);
   1aa4a:	4829      	ldr	r0, [pc, #164]	; (1aaf0 <init_reset+0xe8>)
   1aa4c:	f011 fc1e 	bl	2c28c <mem_acquire>
		if (!rx) {
   1aa50:	2800      	cmp	r0, #0
   1aa52:	d144      	bne.n	1aade <init_reset+0xd6>
			mem_release(link, &mem_link_done.free);
   1aa54:	4927      	ldr	r1, [pc, #156]	; (1aaf4 <init_reset+0xec>)
   1aa56:	4638      	mov	r0, r7
   1aa58:	f011 fc29 	bl	2c2ae <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1aa5c:	4b27      	ldr	r3, [pc, #156]	; (1aafc <init_reset+0xf4>)
   1aa5e:	2208      	movs	r2, #8
   1aa60:	1d18      	adds	r0, r3, #4
   1aa62:	2148      	movs	r1, #72	; 0x48
   1aa64:	f011 fbf9 	bl	2c25a <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   1aa68:	4b25      	ldr	r3, [pc, #148]	; (1ab00 <init_reset+0xf8>)
   1aa6a:	220c      	movs	r2, #12
   1aa6c:	1d18      	adds	r0, r3, #4
   1aa6e:	2108      	movs	r1, #8
   1aa70:	f011 fbf3 	bl	2c25a <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   1aa74:	4822      	ldr	r0, [pc, #136]	; (1ab00 <init_reset+0xf8>)
   1aa76:	f011 fc09 	bl	2c28c <mem_acquire>
	LL_ASSERT(link);
   1aa7a:	4604      	mov	r4, r0
   1aa7c:	b958      	cbnz	r0, 1aa96 <init_reset+0x8e>
   1aa7e:	f44f 62cc 	mov.w	r2, #1632	; 0x660
   1aa82:	4920      	ldr	r1, [pc, #128]	; (1ab04 <init_reset+0xfc>)
   1aa84:	4820      	ldr	r0, [pc, #128]	; (1ab08 <init_reset+0x100>)
   1aa86:	f00c ff24 	bl	278d2 <printk>
   1aa8a:	4040      	eors	r0, r0
   1aa8c:	f380 8811 	msr	BASEPRI, r0
   1aa90:	f04f 0003 	mov.w	r0, #3
   1aa94:	df02      	svc	2
	MEMQ_INIT(ull_rx, link);
   1aa96:	4a1d      	ldr	r2, [pc, #116]	; (1ab0c <init_reset+0x104>)
   1aa98:	4620      	mov	r0, r4
   1aa9a:	1f11      	subs	r1, r2, #4
   1aa9c:	f011 fc3a 	bl	2c314 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   1aaa0:	4817      	ldr	r0, [pc, #92]	; (1ab00 <init_reset+0xf8>)
   1aaa2:	f011 fbf3 	bl	2c28c <mem_acquire>
	LL_ASSERT(link);
   1aaa6:	4604      	mov	r4, r0
   1aaa8:	b958      	cbnz	r0, 1aac2 <init_reset+0xba>
   1aaaa:	f240 6267 	movw	r2, #1639	; 0x667
   1aaae:	4915      	ldr	r1, [pc, #84]	; (1ab04 <init_reset+0xfc>)
   1aab0:	4815      	ldr	r0, [pc, #84]	; (1ab08 <init_reset+0x100>)
   1aab2:	f00c ff0e 	bl	278d2 <printk>
   1aab6:	4040      	eors	r0, r0
   1aab8:	f380 8811 	msr	BASEPRI, r0
   1aabc:	f04f 0003 	mov.w	r0, #3
   1aac0:	df02      	svc	2
	MEMQ_INIT(ll_rx, link);
   1aac2:	4a13      	ldr	r2, [pc, #76]	; (1ab10 <init_reset+0x108>)
   1aac4:	4620      	mov	r0, r4
   1aac6:	1f11      	subs	r1, r2, #4
   1aac8:	f011 fc24 	bl	2c314 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1aacc:	4b11      	ldr	r3, [pc, #68]	; (1ab14 <init_reset+0x10c>)
   1aace:	2206      	movs	r2, #6
	rx_alloc(UINT8_MAX);
   1aad0:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   1aad2:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   1aad4:	f7ff ff1c 	bl	1a910 <rx_alloc>
}
   1aad8:	2000      	movs	r0, #0
   1aada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx->link = link;
   1aade:	6007      	str	r7, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1aae0:	78f2      	ldrb	r2, [r6, #3]
   1aae2:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1aae4:	fb02 6303 	mla	r3, r2, r3, r6
   1aae8:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   1aaea:	70f4      	strb	r4, [r6, #3]
   1aaec:	e79e      	b.n	1aa2c <init_reset+0x24>
   1aaee:	bf00      	nop
   1aaf0:	200041d4 	.word	0x200041d4
   1aaf4:	20004274 	.word	0x20004274
   1aaf8:	200015d8 	.word	0x200015d8
   1aafc:	200042f8 	.word	0x200042f8
   1ab00:	20004294 	.word	0x20004294
   1ab04:	00035ddd 	.word	0x00035ddd
   1ab08:	0003067f 	.word	0x0003067f
   1ab0c:	20004548 	.word	0x20004548
   1ab10:	20004540 	.word	0x20004540
   1ab14:	20004290 	.word	0x20004290

0001ab18 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   1ab18:	6008      	str	r0, [r1, #0]
   1ab1a:	4801      	ldr	r0, [pc, #4]	; (1ab20 <ull_ticker_status_give+0x8>)
   1ab1c:	f00a ba4e 	b.w	24fbc <z_impl_k_sem_give>
   1ab20:	20004550 	.word	0x20004550

0001ab24 <tx_cmplt_get>:
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   1ab24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ab28:	460d      	mov	r5, r1
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1ab2a:	4e28      	ldr	r6, [pc, #160]	; (1abcc <tx_cmplt_get+0xa8>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   1ab2c:	782b      	ldrb	r3, [r5, #0]
   1ab2e:	7871      	ldrb	r1, [r6, #1]
   1ab30:	428b      	cmp	r3, r1
   1ab32:	bf28      	it	cs
   1ab34:	78b3      	ldrbcs	r3, [r6, #2]
{
   1ab36:	4680      	mov	r8, r0
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1ab38:	7830      	ldrb	r0, [r6, #0]
		*idx = first;
   1ab3a:	bf28      	it	cs
   1ab3c:	702b      	strbcs	r3, [r5, #0]
	}

	if (*idx == last) {
   1ab3e:	782b      	ldrb	r3, [r5, #0]
   1ab40:	429a      	cmp	r2, r3
{
   1ab42:	4691      	mov	r9, r2
   1ab44:	d103      	bne.n	1ab4e <tx_cmplt_get+0x2a>
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
		return 0;
   1ab46:	2700      	movs	r7, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);

	return cmplt;
}
   1ab48:	4638      	mov	r0, r7
   1ab4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
	}

	i = *idx + 1;
   1ab4e:	1c5a      	adds	r2, r3, #1
   1ab50:	b2d2      	uxtb	r2, r2
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   1ab52:	4c1f      	ldr	r4, [pc, #124]	; (1abd0 <tx_cmplt_get+0xac>)
		i = 0U;
   1ab54:	4291      	cmp	r1, r2
   1ab56:	bf08      	it	eq
   1ab58:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   1ab5a:	fb13 f300 	smulbb	r3, r3, r0

	*idx = i;
   1ab5e:	702a      	strb	r2, [r5, #0]
	if (!tx) {
   1ab60:	18e2      	adds	r2, r4, r3
   1ab62:	d0f0      	beq.n	1ab46 <tx_cmplt_get+0x22>
	*handle = tx->handle;
   1ab64:	5ae3      	ldrh	r3, [r4, r3]
   1ab66:	f8a8 3000 	strh.w	r3, [r8]
	cmplt = 0U;
   1ab6a:	2700      	movs	r7, #0
		node_tx = tx->node;
   1ab6c:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   1ab6e:	2801      	cmp	r0, #1
   1ab70:	f020 0103 	bic.w	r1, r0, #3
   1ab74:	d906      	bls.n	1ab84 <tx_cmplt_get+0x60>
   1ab76:	b331      	cbz	r1, 1abc6 <tx_cmplt_get+0xa2>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   1ab78:	7903      	ldrb	r3, [r0, #4]
   1ab7a:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   1ab7e:	3b01      	subs	r3, #1
   1ab80:	2b01      	cmp	r3, #1
   1ab82:	d820      	bhi.n	1abc6 <tx_cmplt_get+0xa2>
			cmplt++;
   1ab84:	3701      	adds	r7, #1
   1ab86:	b2ff      	uxtb	r7, r7
			tx->node = (void *)1;
   1ab88:	2301      	movs	r3, #1
   1ab8a:	6053      	str	r3, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
   1ab8c:	b109      	cbz	r1, 1ab92 <tx_cmplt_get+0x6e>
			ll_tx_mem_release(node_tx);
   1ab8e:	f001 fb5d 	bl	1c24c <ll_tx_mem_release>
	if (*idx >= count) {
   1ab92:	782b      	ldrb	r3, [r5, #0]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1ab94:	7872      	ldrb	r2, [r6, #1]
   1ab96:	7830      	ldrb	r0, [r6, #0]
   1ab98:	4293      	cmp	r3, r2
   1ab9a:	bf24      	itt	cs
   1ab9c:	78b3      	ldrbcs	r3, [r6, #2]
		*idx = first;
   1ab9e:	702b      	strbcs	r3, [r5, #0]
	if (*idx == last) {
   1aba0:	782b      	ldrb	r3, [r5, #0]
   1aba2:	4599      	cmp	r9, r3
   1aba4:	d0d0      	beq.n	1ab48 <tx_cmplt_get+0x24>
	i = *idx + 1;
   1aba6:	1c59      	adds	r1, r3, #1
   1aba8:	b2c9      	uxtb	r1, r1
	p = (void *)(fifo + (*idx) * size);
   1abaa:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   1abae:	428a      	cmp	r2, r1
   1abb0:	bf08      	it	eq
   1abb2:	2100      	moveq	r1, #0
	} while (tx && tx->handle == *handle);
   1abb4:	18e2      	adds	r2, r4, r3
	*idx = i;
   1abb6:	7029      	strb	r1, [r5, #0]
   1abb8:	d0c6      	beq.n	1ab48 <tx_cmplt_get+0x24>
   1abba:	5ae3      	ldrh	r3, [r4, r3]
   1abbc:	f8b8 1000 	ldrh.w	r1, [r8]
   1abc0:	4299      	cmp	r1, r3
   1abc2:	d0d3      	beq.n	1ab6c <tx_cmplt_get+0x48>
   1abc4:	e7c0      	b.n	1ab48 <tx_cmplt_get+0x24>
			tx->node = (void *)2;
   1abc6:	2302      	movs	r3, #2
   1abc8:	e7df      	b.n	1ab8a <tx_cmplt_get+0x66>
   1abca:	bf00      	nop
   1abcc:	20001738 	.word	0x20001738
   1abd0:	2000173c 	.word	0x2000173c

0001abd4 <ll_init>:
{
   1abd4:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
   1abd6:	4b2b      	ldr	r3, [pc, #172]	; (1ac84 <ll_init+0xb0>)
{
   1abd8:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   1abda:	6018      	str	r0, [r3, #0]
	cntr_init();
   1abdc:	f004 f9b2 	bl	1ef44 <cntr_init>
	mayfly_init();
   1abe0:	f7fe f8b4 	bl	18d4c <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1abe4:	4a28      	ldr	r2, [pc, #160]	; (1ac88 <ll_init+0xb4>)
   1abe6:	2103      	movs	r1, #3
   1abe8:	7011      	strb	r1, [r2, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1abea:	7611      	strb	r1, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1abec:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1abee:	4927      	ldr	r1, [pc, #156]	; (1ac8c <ll_init+0xb8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1abf0:	7410      	strb	r0, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   1abf2:	2304      	movs	r3, #4
   1abf4:	7213      	strb	r3, [r2, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1abf6:	9105      	str	r1, [sp, #20]
   1abf8:	4925      	ldr	r1, [pc, #148]	; (1ac90 <ll_init+0xbc>)
   1abfa:	9104      	str	r1, [sp, #16]
   1abfc:	4925      	ldr	r1, [pc, #148]	; (1ac94 <ll_init+0xc0>)
   1abfe:	9103      	str	r1, [sp, #12]
   1ac00:	4925      	ldr	r1, [pc, #148]	; (1ac98 <ll_init+0xc4>)
   1ac02:	9102      	str	r1, [sp, #8]
   1ac04:	210c      	movs	r1, #12
   1ac06:	e9cd 2100 	strd	r2, r1, [sp]
   1ac0a:	2000      	movs	r0, #0
   1ac0c:	4a23      	ldr	r2, [pc, #140]	; (1ac9c <ll_init+0xc8>)
   1ac0e:	210a      	movs	r1, #10
   1ac10:	f7fe fdd4 	bl	197bc <ticker_init>
	LL_ASSERT(!err);
   1ac14:	b158      	cbz	r0, 1ac2e <ll_init+0x5a>
   1ac16:	f240 126d 	movw	r2, #365	; 0x16d
   1ac1a:	4921      	ldr	r1, [pc, #132]	; (1aca0 <ll_init+0xcc>)
   1ac1c:	4821      	ldr	r0, [pc, #132]	; (1aca4 <ll_init+0xd0>)
   1ac1e:	f00c fe58 	bl	278d2 <printk>
   1ac22:	4040      	eors	r0, r0
   1ac24:	f380 8811 	msr	BASEPRI, r0
   1ac28:	f04f 0003 	mov.w	r0, #3
   1ac2c:	df02      	svc	2
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ac2e:	2201      	movs	r2, #1
   1ac30:	2100      	movs	r1, #0
   1ac32:	481d      	ldr	r0, [pc, #116]	; (1aca8 <ll_init+0xd4>)
   1ac34:	f013 fa05 	bl	2e042 <z_impl_k_sem_init>
	err = lll_init();
   1ac38:	f002 fdee 	bl	1d818 <lll_init>
	if (err) {
   1ac3c:	4604      	mov	r4, r0
   1ac3e:	b9f0      	cbnz	r0, 1ac7e <ll_init+0xaa>
	err = init_reset();
   1ac40:	f7ff fee2 	bl	1aa08 <init_reset>
	if (err) {
   1ac44:	4604      	mov	r4, r0
   1ac46:	b9d0      	cbnz	r0, 1ac7e <ll_init+0xaa>
	err = lll_adv_init();
   1ac48:	f003 f874 	bl	1dd34 <lll_adv_init>
	if (err) {
   1ac4c:	4604      	mov	r4, r0
   1ac4e:	b9b0      	cbnz	r0, 1ac7e <ll_init+0xaa>
	err = ull_adv_init();
   1ac50:	f011 fe99 	bl	2c986 <ull_adv_init>
	if (err) {
   1ac54:	4604      	mov	r4, r0
   1ac56:	b990      	cbnz	r0, 1ac7e <ll_init+0xaa>
	err = lll_scan_init();
   1ac58:	f012 fa91 	bl	2d17e <lll_scan_init>
	if (err) {
   1ac5c:	4604      	mov	r4, r0
   1ac5e:	b970      	cbnz	r0, 1ac7e <ll_init+0xaa>
	err = ull_scan_init();
   1ac60:	f011 fedd 	bl	2ca1e <ull_scan_init>
	if (err) {
   1ac64:	4604      	mov	r4, r0
   1ac66:	b950      	cbnz	r0, 1ac7e <ll_init+0xaa>
	err = lll_conn_init();
   1ac68:	f012 fa8d 	bl	2d186 <lll_conn_init>
	if (err) {
   1ac6c:	4604      	mov	r4, r0
   1ac6e:	b930      	cbnz	r0, 1ac7e <ll_init+0xaa>
	err = ull_conn_init();
   1ac70:	f012 f88e 	bl	2cd90 <ull_conn_init>
	if (err) {
   1ac74:	4604      	mov	r4, r0
   1ac76:	b910      	cbnz	r0, 1ac7e <ll_init+0xaa>
		ull_filter_reset(true);
   1ac78:	2001      	movs	r0, #1
   1ac7a:	f002 fc41 	bl	1d500 <ull_filter_reset>
}
   1ac7e:	4620      	mov	r0, r4
   1ac80:	b006      	add	sp, #24
   1ac82:	bd10      	pop	{r4, pc}
   1ac84:	2000454c 	.word	0x2000454c
   1ac88:	200049b8 	.word	0x200049b8
   1ac8c:	0002d39f 	.word	0x0002d39f
   1ac90:	0001f821 	.word	0x0001f821
   1ac94:	0001f7d5 	.word	0x0001f7d5
   1ac98:	20004748 	.word	0x20004748
   1ac9c:	20004568 	.word	0x20004568
   1aca0:	00035ddd 	.word	0x00035ddd
   1aca4:	0003067f 	.word	0x0003067f
   1aca8:	20004550 	.word	0x20004550

0001acac <ll_reset>:
{
   1acac:	b510      	push	{r4, lr}
   1acae:	b086      	sub	sp, #24
	err = ull_adv_reset();
   1acb0:	f011 fe6e 	bl	2c990 <ull_adv_reset>
	LL_ASSERT(!err);
   1acb4:	b158      	cbz	r0, 1acce <ll_reset+0x22>
   1acb6:	f240 12f9 	movw	r2, #505	; 0x1f9
   1acba:	493b      	ldr	r1, [pc, #236]	; (1ada8 <ll_reset+0xfc>)
   1acbc:	483b      	ldr	r0, [pc, #236]	; (1adac <ll_reset+0x100>)
   1acbe:	f00c fe08 	bl	278d2 <printk>
   1acc2:	4040      	eors	r0, r0
   1acc4:	f380 8811 	msr	BASEPRI, r0
   1acc8:	f04f 0003 	mov.w	r0, #3
   1accc:	df02      	svc	2
	err = ull_scan_reset();
   1acce:	f011 febc 	bl	2ca4a <ull_scan_reset>
	LL_ASSERT(!err);
   1acd2:	b158      	cbz	r0, 1acec <ll_reset+0x40>
   1acd4:	f240 12ff 	movw	r2, #511	; 0x1ff
   1acd8:	4933      	ldr	r1, [pc, #204]	; (1ada8 <ll_reset+0xfc>)
   1acda:	4834      	ldr	r0, [pc, #208]	; (1adac <ll_reset+0x100>)
   1acdc:	f00c fdf9 	bl	278d2 <printk>
   1ace0:	4040      	eors	r0, r0
   1ace2:	f380 8811 	msr	BASEPRI, r0
   1ace6:	f04f 0003 	mov.w	r0, #3
   1acea:	df02      	svc	2
	err = ull_conn_reset();
   1acec:	f001 faf0 	bl	1c2d0 <ull_conn_reset>
	LL_ASSERT(!err);
   1acf0:	b158      	cbz	r0, 1ad0a <ll_reset+0x5e>
   1acf2:	f240 2239 	movw	r2, #569	; 0x239
   1acf6:	492c      	ldr	r1, [pc, #176]	; (1ada8 <ll_reset+0xfc>)
   1acf8:	482c      	ldr	r0, [pc, #176]	; (1adac <ll_reset+0x100>)
   1acfa:	f00c fdea 	bl	278d2 <printk>
   1acfe:	4040      	eors	r0, r0
   1ad00:	f380 8811 	msr	BASEPRI, r0
   1ad04:	f04f 0003 	mov.w	r0, #3
   1ad08:	df02      	svc	2
	MFIFO_INIT(tx_ack);
   1ad0a:	4b29      	ldr	r3, [pc, #164]	; (1adb0 <ll_reset+0x104>)
   1ad0c:	2400      	movs	r4, #0
   1ad0e:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   1ad10:	4620      	mov	r0, r4
   1ad12:	f002 fbf5 	bl	1d500 <ull_filter_reset>
	MFIFO_INIT(prep);
   1ad16:	4b27      	ldr	r3, [pc, #156]	; (1adb4 <ll_reset+0x108>)
   1ad18:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(done);
   1ad1a:	4b27      	ldr	r3, [pc, #156]	; (1adb8 <ll_reset+0x10c>)
   1ad1c:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   1ad1e:	4b27      	ldr	r3, [pc, #156]	; (1adbc <ll_reset+0x110>)
   1ad20:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   1ad22:	4b27      	ldr	r3, [pc, #156]	; (1adc0 <ll_reset+0x114>)
   1ad24:	805c      	strh	r4, [r3, #2]
   1ad26:	2201      	movs	r2, #1
   1ad28:	4621      	mov	r1, r4
   1ad2a:	4668      	mov	r0, sp
   1ad2c:	f013 f989 	bl	2e042 <z_impl_k_sem_init>
		mfy.param = &sem;
   1ad30:	4b24      	ldr	r3, [pc, #144]	; (1adc4 <ll_reset+0x118>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   1ad32:	4622      	mov	r2, r4
   1ad34:	4621      	mov	r1, r4
   1ad36:	2003      	movs	r0, #3
		mfy.param = &sem;
   1ad38:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   1ad3c:	f7fe f858 	bl	18df0 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1ad40:	b158      	cbz	r0, 1ad5a <ll_reset+0xae>
   1ad42:	f240 226b 	movw	r2, #619	; 0x26b
   1ad46:	4918      	ldr	r1, [pc, #96]	; (1ada8 <ll_reset+0xfc>)
   1ad48:	4818      	ldr	r0, [pc, #96]	; (1adac <ll_reset+0x100>)
   1ad4a:	f00c fdc2 	bl	278d2 <printk>
   1ad4e:	4040      	eors	r0, r0
   1ad50:	f380 8811 	msr	BASEPRI, r0
   1ad54:	f04f 0003 	mov.w	r0, #3
   1ad58:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1ad5a:	f04f 32ff 	mov.w	r2, #4294967295
   1ad5e:	f04f 33ff 	mov.w	r3, #4294967295
   1ad62:	4668      	mov	r0, sp
   1ad64:	f00a f966 	bl	25034 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   1ad68:	f000 ff08 	bl	1bb7c <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   1ad6c:	b158      	cbz	r0, 1ad86 <ll_reset+0xda>
   1ad6e:	f44f 721e 	mov.w	r2, #632	; 0x278
   1ad72:	490d      	ldr	r1, [pc, #52]	; (1ada8 <ll_reset+0xfc>)
   1ad74:	480d      	ldr	r0, [pc, #52]	; (1adac <ll_reset+0x100>)
   1ad76:	f00c fdac 	bl	278d2 <printk>
   1ad7a:	4040      	eors	r0, r0
   1ad7c:	f380 8811 	msr	BASEPRI, r0
   1ad80:	f04f 0003 	mov.w	r0, #3
   1ad84:	df02      	svc	2
	err = init_reset();
   1ad86:	f7ff fe3f 	bl	1aa08 <init_reset>
	LL_ASSERT(!err);
   1ad8a:	b158      	cbz	r0, 1ada4 <ll_reset+0xf8>
   1ad8c:	f240 227d 	movw	r2, #637	; 0x27d
   1ad90:	4905      	ldr	r1, [pc, #20]	; (1ada8 <ll_reset+0xfc>)
   1ad92:	4806      	ldr	r0, [pc, #24]	; (1adac <ll_reset+0x100>)
   1ad94:	f00c fd9d 	bl	278d2 <printk>
   1ad98:	4040      	eors	r0, r0
   1ad9a:	f380 8811 	msr	BASEPRI, r0
   1ad9e:	f04f 0003 	mov.w	r0, #3
   1ada2:	df02      	svc	2
}
   1ada4:	b006      	add	sp, #24
   1ada6:	bd10      	pop	{r4, pc}
   1ada8:	00035ddd 	.word	0x00035ddd
   1adac:	0003067f 	.word	0x0003067f
   1adb0:	20001738 	.word	0x20001738
   1adb4:	20001614 	.word	0x20001614
   1adb8:	200015d8 	.word	0x200015d8
   1adbc:	200015fc 	.word	0x200015fc
   1adc0:	200015ec 	.word	0x200015ec
   1adc4:	2000175c 	.word	0x2000175c

0001adc8 <ll_rx_get>:
{
   1adc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1adcc:	4d25      	ldr	r5, [pc, #148]	; (1ae64 <ll_rx_get+0x9c>)
   1adce:	4e26      	ldr	r6, [pc, #152]	; (1ae68 <ll_rx_get+0xa0>)
{
   1add0:	4681      	mov	r9, r0
   1add2:	4688      	mov	r8, r1
   1add4:	46ab      	mov	fp, r5
	*node_rx = NULL;
   1add6:	2300      	movs	r3, #0
   1add8:	f8c9 3000 	str.w	r3, [r9]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1addc:	aa01      	add	r2, sp, #4
   1adde:	e9d5 0100 	ldrd	r0, r1, [r5]
   1ade2:	f011 faac 	bl	2c33e <memq_peek>
	if (link) {
   1ade6:	4682      	mov	sl, r0
   1ade8:	b3a0      	cbz	r0, 1ae54 <ll_rx_get+0x8c>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1adea:	9b01      	ldr	r3, [sp, #4]
   1adec:	491f      	ldr	r1, [pc, #124]	; (1ae6c <ll_rx_get+0xa4>)
   1adee:	781a      	ldrb	r2, [r3, #0]
   1adf0:	4640      	mov	r0, r8
   1adf2:	f7ff fe97 	bl	1ab24 <tx_cmplt_get>
		if (!cmplt) {
   1adf6:	4604      	mov	r4, r0
   1adf8:	bb40      	cbnz	r0, 1ae4c <ll_rx_get+0x84>
			f = mfifo_tx_ack.f;
   1adfa:	78b3      	ldrb	r3, [r6, #2]
   1adfc:	f88d 3001 	strb.w	r3, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
   1ae00:	78f2      	ldrb	r2, [r6, #3]
   1ae02:	f10d 0101 	add.w	r1, sp, #1
   1ae06:	f10d 0002 	add.w	r0, sp, #2
   1ae0a:	f7ff fe8b 	bl	1ab24 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   1ae0e:	b9cc      	cbnz	r4, 1ae44 <ll_rx_get+0x7c>
			} while ((cmplt_prev != 0U) ||
   1ae10:	b9c0      	cbnz	r0, 1ae44 <ll_rx_get+0x7c>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   1ae12:	9b01      	ldr	r3, [sp, #4]
   1ae14:	791f      	ldrb	r7, [r3, #4]
   1ae16:	2f01      	cmp	r7, #1
   1ae18:	d116      	bne.n	1ae48 <ll_rx_get+0x80>
				(void)memq_dequeue(memq_ll_rx.tail,
   1ae1a:	4622      	mov	r2, r4
   1ae1c:	4629      	mov	r1, r5
   1ae1e:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ae22:	f011 fa94 	bl	2c34e <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   1ae26:	4912      	ldr	r1, [pc, #72]	; (1ae70 <ll_rx_get+0xa8>)
   1ae28:	4650      	mov	r0, sl
   1ae2a:	f011 fa40 	bl	2c2ae <mem_release>
				ll_rx_link_inc_quota(1);
   1ae2e:	4638      	mov	r0, r7
   1ae30:	f7ff fd08 	bl	1a844 <ll_rx_link_inc_quota>
				mem_release(rx, &mem_pdu_rx.free);
   1ae34:	9801      	ldr	r0, [sp, #4]
   1ae36:	490f      	ldr	r1, [pc, #60]	; (1ae74 <ll_rx_get+0xac>)
   1ae38:	f011 fa39 	bl	2c2ae <mem_release>
				rx_alloc(1);
   1ae3c:	4638      	mov	r0, r7
   1ae3e:	f7ff fd67 	bl	1a910 <rx_alloc>
				goto ll_rx_get_again;
   1ae42:	e7c8      	b.n	1add6 <ll_rx_get+0xe>
{
   1ae44:	4604      	mov	r4, r0
   1ae46:	e7db      	b.n	1ae00 <ll_rx_get+0x38>
			*node_rx = rx;
   1ae48:	f8c9 3000 	str.w	r3, [r9]
}
   1ae4c:	4620      	mov	r0, r4
   1ae4e:	b003      	add	sp, #12
   1ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   1ae54:	78f2      	ldrb	r2, [r6, #3]
   1ae56:	4905      	ldr	r1, [pc, #20]	; (1ae6c <ll_rx_get+0xa4>)
   1ae58:	4640      	mov	r0, r8
   1ae5a:	f7ff fe63 	bl	1ab24 <tx_cmplt_get>
   1ae5e:	4604      	mov	r4, r0
   1ae60:	e7f4      	b.n	1ae4c <ll_rx_get+0x84>
   1ae62:	bf00      	nop
   1ae64:	2000453c 	.word	0x2000453c
   1ae68:	20001738 	.word	0x20001738
   1ae6c:	2000173a 	.word	0x2000173a
   1ae70:	20004294 	.word	0x20004294
   1ae74:	200042f8 	.word	0x200042f8

0001ae78 <ll_rx_dequeue>:
{
   1ae78:	b573      	push	{r0, r1, r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1ae7a:	4945      	ldr	r1, [pc, #276]	; (1af90 <ll_rx_dequeue+0x118>)
	struct node_rx_hdr *rx = NULL;
   1ae7c:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1ae7e:	aa01      	add	r2, sp, #4
   1ae80:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   1ae82:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1ae84:	f011 fa63 	bl	2c34e <memq_dequeue>
	LL_ASSERT(link);
   1ae88:	4604      	mov	r4, r0
   1ae8a:	b958      	cbnz	r0, 1aea4 <ll_rx_dequeue+0x2c>
   1ae8c:	f240 22cf 	movw	r2, #719	; 0x2cf
   1ae90:	4940      	ldr	r1, [pc, #256]	; (1af94 <ll_rx_dequeue+0x11c>)
   1ae92:	4841      	ldr	r0, [pc, #260]	; (1af98 <ll_rx_dequeue+0x120>)
   1ae94:	f00c fd1d 	bl	278d2 <printk>
   1ae98:	4040      	eors	r0, r0
   1ae9a:	f380 8811 	msr	BASEPRI, r0
   1ae9e:	f04f 0003 	mov.w	r0, #3
   1aea2:	df02      	svc	2
	mem_release(link, &mem_link_rx.free);
   1aea4:	493d      	ldr	r1, [pc, #244]	; (1af9c <ll_rx_dequeue+0x124>)
   1aea6:	4620      	mov	r0, r4
   1aea8:	f011 fa01 	bl	2c2ae <mem_release>
	switch (rx->type) {
   1aeac:	9b01      	ldr	r3, [sp, #4]
   1aeae:	7919      	ldrb	r1, [r3, #4]
   1aeb0:	2918      	cmp	r1, #24
   1aeb2:	d869      	bhi.n	1af88 <ll_rx_dequeue+0x110>
   1aeb4:	2201      	movs	r2, #1
   1aeb6:	483a      	ldr	r0, [pc, #232]	; (1afa0 <ll_rx_dequeue+0x128>)
   1aeb8:	408a      	lsls	r2, r1
   1aeba:	4202      	tst	r2, r0
   1aebc:	d15f      	bne.n	1af7e <ll_rx_dequeue+0x106>
   1aebe:	0312      	lsls	r2, r2, #12
   1aec0:	d562      	bpl.n	1af88 <ll_rx_dequeue+0x110>
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   1aec2:	7f1a      	ldrb	r2, [r3, #28]
   1aec4:	2a3c      	cmp	r2, #60	; 0x3c
   1aec6:	d002      	beq.n	1aece <ll_rx_dequeue+0x56>
   1aec8:	7f59      	ldrb	r1, [r3, #29]
   1aeca:	2900      	cmp	r1, #0
   1aecc:	d04a      	beq.n	1af64 <ll_rx_dequeue+0xec>
			struct lll_adv *lll = ftr->param;
   1aece:	689e      	ldr	r6, [r3, #8]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1aed0:	2a3c      	cmp	r2, #60	; 0x3c
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   1aed2:	6835      	ldr	r5, [r6, #0]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1aed4:	d13d      	bne.n	1af52 <ll_rx_dequeue+0xda>
				conn_lll = lll->conn;
   1aed6:	68b4      	ldr	r4, [r6, #8]
				LL_ASSERT(conn_lll);
   1aed8:	b95c      	cbnz	r4, 1aef2 <ll_rx_dequeue+0x7a>
   1aeda:	f240 3236 	movw	r2, #822	; 0x336
   1aede:	492d      	ldr	r1, [pc, #180]	; (1af94 <ll_rx_dequeue+0x11c>)
   1aee0:	482d      	ldr	r0, [pc, #180]	; (1af98 <ll_rx_dequeue+0x120>)
   1aee2:	f00c fcf6 	bl	278d2 <printk>
   1aee6:	4040      	eors	r0, r0
   1aee8:	f380 8811 	msr	BASEPRI, r0
   1aeec:	f04f 0003 	mov.w	r0, #3
   1aef0:	df02      	svc	2
				lll->conn = NULL;
   1aef2:	2300      	movs	r3, #0
   1aef4:	60b3      	str	r3, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   1aef6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1aef8:	b15b      	cbz	r3, 1af12 <ll_rx_dequeue+0x9a>
   1aefa:	f240 3239 	movw	r2, #825	; 0x339
   1aefe:	4925      	ldr	r1, [pc, #148]	; (1af94 <ll_rx_dequeue+0x11c>)
   1af00:	4825      	ldr	r0, [pc, #148]	; (1af98 <ll_rx_dequeue+0x120>)
   1af02:	f00c fce6 	bl	278d2 <printk>
   1af06:	4040      	eors	r0, r0
   1af08:	f380 8811 	msr	BASEPRI, r0
   1af0c:	f04f 0003 	mov.w	r0, #3
   1af10:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   1af12:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1af16:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1af1a:	f011 f9fe 	bl	2c31a <memq_deinit>
				LL_ASSERT(link);
   1af1e:	4606      	mov	r6, r0
   1af20:	b958      	cbnz	r0, 1af3a <ll_rx_dequeue+0xc2>
   1af22:	f44f 724f 	mov.w	r2, #828	; 0x33c
   1af26:	491b      	ldr	r1, [pc, #108]	; (1af94 <ll_rx_dequeue+0x11c>)
   1af28:	481b      	ldr	r0, [pc, #108]	; (1af98 <ll_rx_dequeue+0x120>)
   1af2a:	f00c fcd2 	bl	278d2 <printk>
   1af2e:	4040      	eors	r0, r0
   1af30:	f380 8811 	msr	BASEPRI, r0
   1af34:	f04f 0003 	mov.w	r0, #3
   1af38:	df02      	svc	2
				conn_lll->link_tx_free = link;
   1af3a:	6526      	str	r6, [r4, #80]	; 0x50
				ll_conn_release(conn);
   1af3c:	6820      	ldr	r0, [r4, #0]
   1af3e:	f001 f8fd 	bl	1c13c <ll_conn_release>
			adv->is_enabled = 0U;
   1af42:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
   1af46:	f36f 0300 	bfc	r3, #0, #1
   1af4a:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
}
   1af4e:	b002      	add	sp, #8
   1af50:	bd70      	pop	{r4, r5, r6, pc}
				if (adv->node_rx_cc_free) {
   1af52:	6ca8      	ldr	r0, [r5, #72]	; 0x48
   1af54:	2800      	cmp	r0, #0
   1af56:	d0f4      	beq.n	1af42 <ll_rx_dequeue+0xca>
					adv->node_rx_cc_free = NULL;
   1af58:	2300      	movs	r3, #0
   1af5a:	64ab      	str	r3, [r5, #72]	; 0x48
					mem_release(rx_free, &mem_pdu_rx.free);
   1af5c:	4911      	ldr	r1, [pc, #68]	; (1afa4 <ll_rx_dequeue+0x12c>)
   1af5e:	f011 f9a6 	bl	2c2ae <mem_release>
   1af62:	e7ee      	b.n	1af42 <ll_rx_dequeue+0xca>
			LL_ASSERT(0);
   1af64:	f240 3261 	movw	r2, #865	; 0x361
		LL_ASSERT(0);
   1af68:	490a      	ldr	r1, [pc, #40]	; (1af94 <ll_rx_dequeue+0x11c>)
   1af6a:	480b      	ldr	r0, [pc, #44]	; (1af98 <ll_rx_dequeue+0x120>)
   1af6c:	f00c fcb1 	bl	278d2 <printk>
   1af70:	4040      	eors	r0, r0
   1af72:	f380 8811 	msr	BASEPRI, r0
   1af76:	f04f 0003 	mov.w	r0, #3
   1af7a:	df02      	svc	2
}
   1af7c:	e7e7      	b.n	1af4e <ll_rx_dequeue+0xd6>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   1af7e:	2900      	cmp	r1, #0
   1af80:	d1e5      	bne.n	1af4e <ll_rx_dequeue+0xd6>
   1af82:	f240 32b5 	movw	r2, #949	; 0x3b5
   1af86:	e7ef      	b.n	1af68 <ll_rx_dequeue+0xf0>
		LL_ASSERT(0);
   1af88:	f240 32b9 	movw	r2, #953	; 0x3b9
   1af8c:	e7ec      	b.n	1af68 <ll_rx_dequeue+0xf0>
   1af8e:	bf00      	nop
   1af90:	2000453c 	.word	0x2000453c
   1af94:	00035ddd 	.word	0x00035ddd
   1af98:	0003067f 	.word	0x0003067f
   1af9c:	20004294 	.word	0x20004294
   1afa0:	01700019 	.word	0x01700019
   1afa4:	200042f8 	.word	0x200042f8

0001afa8 <ll_rx_mem_release>:
{
   1afa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   1afac:	6804      	ldr	r4, [r0, #0]
			LL_ASSERT(0);
   1afae:	4d3d      	ldr	r5, [pc, #244]	; (1b0a4 <ll_rx_mem_release+0xfc>)
   1afb0:	4e3d      	ldr	r6, [pc, #244]	; (1b0a8 <ll_rx_mem_release+0x100>)
   1afb2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1b0b0 <ll_rx_mem_release+0x108>
{
   1afb6:	4607      	mov	r7, r0
	while (rx) {
   1afb8:	b92c      	cbnz	r4, 1afc6 <ll_rx_mem_release+0x1e>
	*node_rx = rx;
   1afba:	603c      	str	r4, [r7, #0]
	rx_alloc(UINT8_MAX);
   1afbc:	20ff      	movs	r0, #255	; 0xff
}
   1afbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   1afc2:	f7ff bca5 	b.w	1a910 <rx_alloc>
		switch (rx_free->type) {
   1afc6:	7922      	ldrb	r2, [r4, #4]
		rx = rx->next;
   1afc8:	f8d4 9000 	ldr.w	r9, [r4]
		switch (rx_free->type) {
   1afcc:	2a18      	cmp	r2, #24
   1afce:	d85c      	bhi.n	1b08a <ll_rx_mem_release+0xe2>
   1afd0:	2301      	movs	r3, #1
   1afd2:	4093      	lsls	r3, r2
   1afd4:	ea13 0f08 	tst.w	r3, r8
   1afd8:	d119      	bne.n	1b00e <ll_rx_mem_release+0x66>
   1afda:	02da      	lsls	r2, r3, #11
   1afdc:	d429      	bmi.n	1b032 <ll_rx_mem_release+0x8a>
   1afde:	031b      	lsls	r3, r3, #12
   1afe0:	d553      	bpl.n	1b08a <ll_rx_mem_release+0xe2>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1afe2:	7f23      	ldrb	r3, [r4, #28]
   1afe4:	2b3c      	cmp	r3, #60	; 0x3c
   1afe6:	d105      	bne.n	1aff4 <ll_rx_mem_release+0x4c>
			mem_release(rx_free, &mem_pdu_rx.free);
   1afe8:	4930      	ldr	r1, [pc, #192]	; (1b0ac <ll_rx_mem_release+0x104>)
   1afea:	4620      	mov	r0, r4
   1afec:	f011 f95f 	bl	2c2ae <mem_release>
{
   1aff0:	464c      	mov	r4, r9
   1aff2:	e7e1      	b.n	1afb8 <ll_rx_mem_release+0x10>
				LL_ASSERT(!cc->status);
   1aff4:	b15b      	cbz	r3, 1b00e <ll_rx_mem_release+0x66>
   1aff6:	f240 4223 	movw	r2, #1059	; 0x423
   1affa:	4629      	mov	r1, r5
   1affc:	4630      	mov	r0, r6
   1affe:	f00c fc68 	bl	278d2 <printk>
   1b002:	4040      	eors	r0, r0
   1b004:	f380 8811 	msr	BASEPRI, r0
   1b008:	f04f 0003 	mov.w	r0, #3
   1b00c:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   1b00e:	7923      	ldrb	r3, [r4, #4]
   1b010:	b95b      	cbnz	r3, 1b02a <ll_rx_mem_release+0x82>
   1b012:	f240 4269 	movw	r2, #1129	; 0x469
   1b016:	4629      	mov	r1, r5
   1b018:	4630      	mov	r0, r6
   1b01a:	f00c fc5a 	bl	278d2 <printk>
   1b01e:	4040      	eors	r0, r0
   1b020:	f380 8811 	msr	BASEPRI, r0
   1b024:	f04f 0003 	mov.w	r0, #3
   1b028:	df02      	svc	2
			ll_rx_link_inc_quota(1);
   1b02a:	2001      	movs	r0, #1
   1b02c:	f7ff fc0a 	bl	1a844 <ll_rx_link_inc_quota>
   1b030:	e7da      	b.n	1afe8 <ll_rx_mem_release+0x40>
			conn = ll_conn_get(rx_free->handle);
   1b032:	88e0      	ldrh	r0, [r4, #6]
   1b034:	f001 f8fc 	bl	1c230 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   1b038:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
			conn = ll_conn_get(rx_free->handle);
   1b03a:	4604      	mov	r4, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   1b03c:	b15b      	cbz	r3, 1b056 <ll_rx_mem_release+0xae>
   1b03e:	f44f 6292 	mov.w	r2, #1168	; 0x490
   1b042:	4629      	mov	r1, r5
   1b044:	4630      	mov	r0, r6
   1b046:	f00c fc44 	bl	278d2 <printk>
   1b04a:	4040      	eors	r0, r0
   1b04c:	f380 8811 	msr	BASEPRI, r0
   1b050:	f04f 0003 	mov.w	r0, #3
   1b054:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   1b056:	f104 0160 	add.w	r1, r4, #96	; 0x60
   1b05a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1b05e:	f011 f95c 	bl	2c31a <memq_deinit>
			LL_ASSERT(link);
   1b062:	4682      	mov	sl, r0
   1b064:	b958      	cbnz	r0, 1b07e <ll_rx_mem_release+0xd6>
   1b066:	f240 4293 	movw	r2, #1171	; 0x493
   1b06a:	4629      	mov	r1, r5
   1b06c:	4630      	mov	r0, r6
   1b06e:	f00c fc30 	bl	278d2 <printk>
   1b072:	4040      	eors	r0, r0
   1b074:	f380 8811 	msr	BASEPRI, r0
   1b078:	f04f 0003 	mov.w	r0, #3
   1b07c:	df02      	svc	2
			conn->lll.link_tx_free = link;
   1b07e:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
			ll_conn_release(conn);
   1b082:	4620      	mov	r0, r4
   1b084:	f001 f85a 	bl	1c13c <ll_conn_release>
		break;
   1b088:	e7b2      	b.n	1aff0 <ll_rx_mem_release+0x48>
			LL_ASSERT(0);
   1b08a:	f240 429d 	movw	r2, #1181	; 0x49d
   1b08e:	4629      	mov	r1, r5
   1b090:	4630      	mov	r0, r6
   1b092:	f00c fc1e 	bl	278d2 <printk>
   1b096:	4040      	eors	r0, r0
   1b098:	f380 8811 	msr	BASEPRI, r0
   1b09c:	f04f 0003 	mov.w	r0, #3
   1b0a0:	df02      	svc	2
			break;
   1b0a2:	e7a5      	b.n	1aff0 <ll_rx_mem_release+0x48>
   1b0a4:	00035ddd 	.word	0x00035ddd
   1b0a8:	0003067f 	.word	0x0003067f
   1b0ac:	200042f8 	.word	0x200042f8
   1b0b0:	01600019 	.word	0x01600019

0001b0b4 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   1b0b4:	4801      	ldr	r0, [pc, #4]	; (1b0bc <ll_rx_link_alloc+0x8>)
   1b0b6:	f011 b8e9 	b.w	2c28c <mem_acquire>
   1b0ba:	bf00      	nop
   1b0bc:	20004294 	.word	0x20004294

0001b0c0 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   1b0c0:	4901      	ldr	r1, [pc, #4]	; (1b0c8 <ll_rx_link_release+0x8>)
   1b0c2:	f011 b8f4 	b.w	2c2ae <mem_release>
   1b0c6:	bf00      	nop
   1b0c8:	20004294 	.word	0x20004294

0001b0cc <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   1b0cc:	4801      	ldr	r0, [pc, #4]	; (1b0d4 <ll_rx_alloc+0x8>)
   1b0ce:	f011 b8dd 	b.w	2c28c <mem_acquire>
   1b0d2:	bf00      	nop
   1b0d4:	200042f8 	.word	0x200042f8

0001b0d8 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   1b0d8:	4901      	ldr	r1, [pc, #4]	; (1b0e0 <ll_rx_release+0x8>)
   1b0da:	f011 b8e8 	b.w	2c2ae <mem_release>
   1b0de:	bf00      	nop
   1b0e0:	200042f8 	.word	0x200042f8

0001b0e4 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1b0e4:	4b02      	ldr	r3, [pc, #8]	; (1b0f0 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1b0e6:	4a03      	ldr	r2, [pc, #12]	; (1b0f4 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1b0e8:	78db      	ldrb	r3, [r3, #3]
   1b0ea:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1b0ec:	f011 b920 	b.w	2c330 <memq_enqueue>
   1b0f0:	20001738 	.word	0x20001738
   1b0f4:	20004540 	.word	0x20004540

0001b0f8 <ll_rx_sched>:
	k_sem_give(sem_recv);
   1b0f8:	4b01      	ldr	r3, [pc, #4]	; (1b100 <ll_rx_sched+0x8>)
   1b0fa:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   1b0fc:	f009 bf5e 	b.w	24fbc <z_impl_k_sem_give>
   1b100:	2000454c 	.word	0x2000454c

0001b104 <ll_pdu_rx_alloc_peek>:
{
   1b104:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1b106:	4a0a      	ldr	r2, [pc, #40]	; (1b130 <ll_pdu_rx_alloc_peek+0x2c>)
   1b108:	7891      	ldrb	r1, [r2, #2]
   1b10a:	78d4      	ldrb	r4, [r2, #3]
   1b10c:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   1b10e:	42a1      	cmp	r1, r4
		return count - first + last;
   1b110:	bf8a      	itet	hi
   1b112:	1a5b      	subhi	r3, r3, r1
		return last - first;
   1b114:	1a63      	subls	r3, r4, r1
		return count - first + last;
   1b116:	191b      	addhi	r3, r3, r4
   1b118:	b2db      	uxtb	r3, r3
   1b11a:	4298      	cmp	r0, r3
   1b11c:	d806      	bhi.n	1b12c <ll_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   1b11e:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   1b120:	7813      	ldrb	r3, [r2, #0]
   1b122:	d003      	beq.n	1b12c <ll_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   1b124:	fb01 2203 	mla	r2, r1, r3, r2
   1b128:	6850      	ldr	r0, [r2, #4]
}
   1b12a:	bd10      	pop	{r4, pc}
		return NULL;
   1b12c:	2000      	movs	r0, #0
   1b12e:	e7fc      	b.n	1b12a <ll_pdu_rx_alloc_peek+0x26>
   1b130:	200015ec 	.word	0x200015ec

0001b134 <ll_pdu_rx_alloc>:
{
   1b134:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   1b136:	4a09      	ldr	r2, [pc, #36]	; (1b15c <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   1b138:	7893      	ldrb	r3, [r2, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   1b13a:	78d0      	ldrb	r0, [r2, #3]
   1b13c:	7811      	ldrb	r1, [r2, #0]
   1b13e:	7854      	ldrb	r4, [r2, #1]
   1b140:	4298      	cmp	r0, r3
   1b142:	d009      	beq.n	1b158 <ll_pdu_rx_alloc+0x24>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
   1b144:	fb03 2101 	mla	r1, r3, r1, r2

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   1b148:	3301      	adds	r3, #1
   1b14a:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
   1b14c:	429c      	cmp	r4, r3
   1b14e:	bf08      	it	eq
   1b150:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   1b152:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   1b154:	7093      	strb	r3, [r2, #2]
}
   1b156:	bd10      	pop	{r4, pc}
		return NULL;
   1b158:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   1b15a:	e7fc      	b.n	1b156 <ll_pdu_rx_alloc+0x22>
   1b15c:	200015ec 	.word	0x200015ec

0001b160 <ll_tx_ack_put>:
{
   1b160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   1b162:	4a12      	ldr	r2, [pc, #72]	; (1b1ac <ll_tx_ack_put+0x4c>)
   1b164:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1b166:	7857      	ldrb	r7, [r2, #1]
   1b168:	7895      	ldrb	r5, [r2, #2]
   1b16a:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   1b16c:	1c63      	adds	r3, r4, #1
   1b16e:	b2db      	uxtb	r3, r3
		last = 0U;
   1b170:	429f      	cmp	r7, r3
   1b172:	bf08      	it	eq
   1b174:	2300      	moveq	r3, #0
	if (last == first) {
   1b176:	429d      	cmp	r5, r3
   1b178:	d004      	beq.n	1b184 <ll_tx_ack_put+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1b17a:	1d15      	adds	r5, r2, #4
   1b17c:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   1b180:	192e      	adds	r6, r5, r4
   1b182:	d10e      	bne.n	1b1a2 <ll_tx_ack_put+0x42>
   1b184:	f240 42f1 	movw	r2, #1265	; 0x4f1
   1b188:	4909      	ldr	r1, [pc, #36]	; (1b1b0 <ll_tx_ack_put+0x50>)
   1b18a:	480a      	ldr	r0, [pc, #40]	; (1b1b4 <ll_tx_ack_put+0x54>)
   1b18c:	f00c fba1 	bl	278d2 <printk>
   1b190:	4040      	eors	r0, r0
   1b192:	f380 8811 	msr	BASEPRI, r0
   1b196:	f04f 0003 	mov.w	r0, #3
   1b19a:	df02      	svc	2
	tx->handle = handle;
   1b19c:	2300      	movs	r3, #0
   1b19e:	801b      	strh	r3, [r3, #0]
   1b1a0:	deff      	udf	#255	; 0xff
   1b1a2:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   1b1a4:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   1b1a6:	6071      	str	r1, [r6, #4]
}
   1b1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b1aa:	bf00      	nop
   1b1ac:	20001738 	.word	0x20001738
   1b1b0:	00035ddd 	.word	0x00035ddd
   1b1b4:	0003067f 	.word	0x0003067f

0001b1b8 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1b1b8:	2200      	movs	r2, #0
{
   1b1ba:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1b1bc:	4611      	mov	r1, r2
   1b1be:	4b09      	ldr	r3, [pc, #36]	; (1b1e4 <ll_radio_state_abort+0x2c>)
   1b1c0:	2001      	movs	r0, #1
   1b1c2:	f7fd fe15 	bl	18df0 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1b1c6:	b158      	cbz	r0, 1b1e0 <ll_radio_state_abort+0x28>
   1b1c8:	f240 5209 	movw	r2, #1289	; 0x509
   1b1cc:	4906      	ldr	r1, [pc, #24]	; (1b1e8 <ll_radio_state_abort+0x30>)
   1b1ce:	4807      	ldr	r0, [pc, #28]	; (1b1ec <ll_radio_state_abort+0x34>)
   1b1d0:	f00c fb7f 	bl	278d2 <printk>
   1b1d4:	4040      	eors	r0, r0
   1b1d6:	f380 8811 	msr	BASEPRI, r0
   1b1da:	f04f 0003 	mov.w	r0, #3
   1b1de:	df02      	svc	2
}
   1b1e0:	bd08      	pop	{r3, pc}
   1b1e2:	bf00      	nop
   1b1e4:	2000176c 	.word	0x2000176c
   1b1e8:	00035ddd 	.word	0x00035ddd
   1b1ec:	0003067f 	.word	0x0003067f

0001b1f0 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1b1f0:	f030 0302 	bics.w	r3, r0, #2
{
   1b1f4:	b510      	push	{r4, lr}
   1b1f6:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1b1f8:	d00e      	beq.n	1b218 <ull_ticker_status_take+0x28>
   1b1fa:	680b      	ldr	r3, [r1, #0]
   1b1fc:	2b02      	cmp	r3, #2
   1b1fe:	d10b      	bne.n	1b218 <ull_ticker_status_take+0x28>
   1b200:	f240 5226 	movw	r2, #1318	; 0x526
   1b204:	4909      	ldr	r1, [pc, #36]	; (1b22c <ull_ticker_status_take+0x3c>)
   1b206:	480a      	ldr	r0, [pc, #40]	; (1b230 <ull_ticker_status_take+0x40>)
   1b208:	f00c fb63 	bl	278d2 <printk>
   1b20c:	4040      	eors	r0, r0
   1b20e:	f380 8811 	msr	BASEPRI, r0
   1b212:	f04f 0003 	mov.w	r0, #3
   1b216:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1b218:	f04f 32ff 	mov.w	r2, #4294967295
   1b21c:	f04f 33ff 	mov.w	r3, #4294967295
   1b220:	4804      	ldr	r0, [pc, #16]	; (1b234 <ull_ticker_status_take+0x44>)
   1b222:	f009 ff07 	bl	25034 <z_impl_k_sem_take>
	return *ret_cb;
   1b226:	6820      	ldr	r0, [r4, #0]
}
   1b228:	bd10      	pop	{r4, pc}
   1b22a:	bf00      	nop
   1b22c:	00035ddd 	.word	0x00035ddd
   1b230:	0003067f 	.word	0x0003067f
   1b234:	20004550 	.word	0x20004550

0001b238 <ull_disable_mark>:
	if (!*m) {
   1b238:	4b02      	ldr	r3, [pc, #8]	; (1b244 <ull_disable_mark+0xc>)
   1b23a:	681a      	ldr	r2, [r3, #0]
   1b23c:	b902      	cbnz	r2, 1b240 <ull_disable_mark+0x8>
		*m = param;
   1b23e:	6018      	str	r0, [r3, #0]
}
   1b240:	6818      	ldr	r0, [r3, #0]
   1b242:	4770      	bx	lr
   1b244:	200041cc 	.word	0x200041cc

0001b248 <ull_disable_unmark>:
	if (*m && *m == param) {
   1b248:	4905      	ldr	r1, [pc, #20]	; (1b260 <ull_disable_unmark+0x18>)
   1b24a:	680b      	ldr	r3, [r1, #0]
   1b24c:	b12b      	cbz	r3, 1b25a <ull_disable_unmark+0x12>
   1b24e:	4298      	cmp	r0, r3
   1b250:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
   1b254:	bf0c      	ite	eq
   1b256:	600a      	streq	r2, [r1, #0]
	return NULL;
   1b258:	4613      	movne	r3, r2
}
   1b25a:	4618      	mov	r0, r3
   1b25c:	4770      	bx	lr
   1b25e:	bf00      	nop
   1b260:	200041cc 	.word	0x200041cc

0001b264 <ull_disable_mark_get>:
}
   1b264:	4b01      	ldr	r3, [pc, #4]	; (1b26c <ull_disable_mark_get+0x8>)
   1b266:	6818      	ldr	r0, [r3, #0]
   1b268:	4770      	bx	lr
   1b26a:	bf00      	nop
   1b26c:	200041cc 	.word	0x200041cc

0001b270 <ull_update_mark>:
	if (!*m) {
   1b270:	4b02      	ldr	r3, [pc, #8]	; (1b27c <ull_update_mark+0xc>)
   1b272:	681a      	ldr	r2, [r3, #0]
   1b274:	b902      	cbnz	r2, 1b278 <ull_update_mark+0x8>
		*m = param;
   1b276:	6018      	str	r0, [r3, #0]
}
   1b278:	6818      	ldr	r0, [r3, #0]
   1b27a:	4770      	bx	lr
   1b27c:	200041d0 	.word	0x200041d0

0001b280 <ull_update_unmark>:
	if (*m && *m == param) {
   1b280:	4905      	ldr	r1, [pc, #20]	; (1b298 <ull_update_unmark+0x18>)
   1b282:	680b      	ldr	r3, [r1, #0]
   1b284:	b12b      	cbz	r3, 1b292 <ull_update_unmark+0x12>
   1b286:	4298      	cmp	r0, r3
   1b288:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
   1b28c:	bf0c      	ite	eq
   1b28e:	600a      	streq	r2, [r1, #0]
	return NULL;
   1b290:	4613      	movne	r3, r2
}
   1b292:	4618      	mov	r0, r3
   1b294:	4770      	bx	lr
   1b296:	bf00      	nop
   1b298:	200041d0 	.word	0x200041d0

0001b29c <ull_update_mark_get>:
}
   1b29c:	4b01      	ldr	r3, [pc, #4]	; (1b2a4 <ull_update_mark_get+0x8>)
   1b29e:	6818      	ldr	r0, [r3, #0]
   1b2a0:	4770      	bx	lr
   1b2a2:	bf00      	nop
   1b2a4:	200041d0 	.word	0x200041d0

0001b2a8 <ull_disable>:
{
   1b2a8:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   1b2aa:	6804      	ldr	r4, [r0, #0]
	if (!hdr) {
   1b2ac:	f114 0f10 	cmn.w	r4, #16
{
   1b2b0:	b087      	sub	sp, #28
   1b2b2:	4605      	mov	r5, r0
	if (!hdr) {
   1b2b4:	d102      	bne.n	1b2bc <ull_disable+0x14>
		return ULL_STATUS_SUCCESS;
   1b2b6:	2000      	movs	r0, #0
}
   1b2b8:	b007      	add	sp, #28
   1b2ba:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b2bc:	2201      	movs	r2, #1
   1b2be:	2100      	movs	r1, #0
   1b2c0:	4668      	mov	r0, sp
   1b2c2:	f012 febe 	bl	2e042 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
   1b2c6:	4b11      	ldr	r3, [pc, #68]	; (1b30c <ull_disable+0x64>)
   1b2c8:	6163      	str	r3, [r4, #20]
	return hdr->ref;
   1b2ca:	7c23      	ldrb	r3, [r4, #16]
	hdr->disabled_param = &sem;
   1b2cc:	f8c4 d018 	str.w	sp, [r4, #24]
	if (!ull_ref_get(hdr)) {
   1b2d0:	2b00      	cmp	r3, #0
   1b2d2:	d0f0      	beq.n	1b2b6 <ull_disable+0xe>
	mfy.param = lll;
   1b2d4:	4b0e      	ldr	r3, [pc, #56]	; (1b310 <ull_disable+0x68>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1b2d6:	2200      	movs	r2, #0
   1b2d8:	4611      	mov	r1, r2
   1b2da:	2003      	movs	r0, #3
	mfy.param = lll;
   1b2dc:	609d      	str	r5, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1b2de:	f7fd fd87 	bl	18df0 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1b2e2:	b158      	cbz	r0, 1b2fc <ull_disable+0x54>
   1b2e4:	f240 5297 	movw	r2, #1431	; 0x597
   1b2e8:	490a      	ldr	r1, [pc, #40]	; (1b314 <ull_disable+0x6c>)
   1b2ea:	480b      	ldr	r0, [pc, #44]	; (1b318 <ull_disable+0x70>)
   1b2ec:	f00c faf1 	bl	278d2 <printk>
   1b2f0:	4040      	eors	r0, r0
   1b2f2:	f380 8811 	msr	BASEPRI, r0
   1b2f6:	f04f 0003 	mov.w	r0, #3
   1b2fa:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1b2fc:	f04f 32ff 	mov.w	r2, #4294967295
   1b300:	f04f 33ff 	mov.w	r3, #4294967295
   1b304:	4668      	mov	r0, sp
   1b306:	f009 fe95 	bl	25034 <z_impl_k_sem_take>
	return k_sem_take(&sem, K_FOREVER);
   1b30a:	e7d5      	b.n	1b2b8 <ull_disable+0x10>
   1b30c:	0002c917 	.word	0x0002c917
   1b310:	2000177c 	.word	0x2000177c
   1b314:	00035ddd 	.word	0x00035ddd
   1b318:	0003067f 	.word	0x0003067f

0001b31c <ull_ticker_stop_with_mark>:
{
   1b31c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b31e:	4607      	mov	r7, r0
   1b320:	b085      	sub	sp, #20
	mark = ull_disable_mark(param);
   1b322:	4608      	mov	r0, r1
{
   1b324:	460c      	mov	r4, r1
   1b326:	4616      	mov	r6, r2
	mark = ull_disable_mark(param);
   1b328:	f7ff ff86 	bl	1b238 <ull_disable_mark>
	if (mark != param) {
   1b32c:	4281      	cmp	r1, r0
   1b32e:	d121      	bne.n	1b374 <ull_ticker_stop_with_mark+0x58>
	ret_cb = TICKER_STATUS_BUSY;
   1b330:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1b332:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   1b334:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1b336:	2103      	movs	r1, #3
   1b338:	9500      	str	r5, [sp, #0]
   1b33a:	4b11      	ldr	r3, [pc, #68]	; (1b380 <ull_ticker_stop_with_mark+0x64>)
   1b33c:	463a      	mov	r2, r7
   1b33e:	2000      	movs	r0, #0
   1b340:	f7fe fb2c 	bl	1999c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1b344:	4629      	mov	r1, r5
   1b346:	f7ff ff53 	bl	1b1f0 <ull_ticker_status_take>
	if (ret) {
   1b34a:	b148      	cbz	r0, 1b360 <ull_ticker_stop_with_mark+0x44>
		mark = ull_disable_unmark(param);
   1b34c:	4620      	mov	r0, r4
   1b34e:	f7ff ff7b 	bl	1b248 <ull_disable_unmark>
		if (mark != param) {
   1b352:	4284      	cmp	r4, r0
   1b354:	d10e      	bne.n	1b374 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   1b356:	f06f 0577 	mvn.w	r5, #119	; 0x77
}
   1b35a:	4628      	mov	r0, r5
   1b35c:	b005      	add	sp, #20
   1b35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   1b360:	4630      	mov	r0, r6
   1b362:	f7ff ffa1 	bl	1b2a8 <ull_disable>
	if (ret) {
   1b366:	4605      	mov	r5, r0
   1b368:	b938      	cbnz	r0, 1b37a <ull_ticker_stop_with_mark+0x5e>
	mark = ull_disable_unmark(param);
   1b36a:	4620      	mov	r0, r4
   1b36c:	f7ff ff6c 	bl	1b248 <ull_disable_unmark>
	if (mark != param) {
   1b370:	4284      	cmp	r4, r0
   1b372:	d0f2      	beq.n	1b35a <ull_ticker_stop_with_mark+0x3e>
		return -ENOLCK;
   1b374:	f06f 052d 	mvn.w	r5, #45	; 0x2d
   1b378:	e7ef      	b.n	1b35a <ull_ticker_stop_with_mark+0x3e>
		return -EBUSY;
   1b37a:	f06f 050f 	mvn.w	r5, #15
   1b37e:	e7ec      	b.n	1b35a <ull_ticker_stop_with_mark+0x3e>
   1b380:	0001ab19 	.word	0x0001ab19

0001b384 <ull_pdu_rx_alloc_peek>:
{
   1b384:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   1b386:	4a0a      	ldr	r2, [pc, #40]	; (1b3b0 <ull_pdu_rx_alloc_peek+0x2c>)
   1b388:	7891      	ldrb	r1, [r2, #2]
   1b38a:	78d4      	ldrb	r4, [r2, #3]
   1b38c:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   1b38e:	42a1      	cmp	r1, r4
		return count - first + last;
   1b390:	bf8a      	itet	hi
   1b392:	1a5b      	subhi	r3, r3, r1
		return last - first;
   1b394:	1a63      	subls	r3, r4, r1
		return count - first + last;
   1b396:	191b      	addhi	r3, r3, r4
   1b398:	b2db      	uxtb	r3, r3
   1b39a:	4298      	cmp	r0, r3
   1b39c:	d806      	bhi.n	1b3ac <ull_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   1b39e:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   1b3a0:	7813      	ldrb	r3, [r2, #0]
   1b3a2:	d003      	beq.n	1b3ac <ull_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   1b3a4:	fb01 2203 	mla	r2, r1, r3, r2
   1b3a8:	6850      	ldr	r0, [r2, #4]
}
   1b3aa:	bd10      	pop	{r4, pc}
		return NULL;
   1b3ac:	2000      	movs	r0, #0
   1b3ae:	e7fc      	b.n	1b3aa <ull_pdu_rx_alloc_peek+0x26>
   1b3b0:	200015fc 	.word	0x200015fc

0001b3b4 <ull_pdu_rx_alloc>:
{
   1b3b4:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(pdu_rx_free);
   1b3b6:	4a09      	ldr	r2, [pc, #36]	; (1b3dc <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1b3b8:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1b3ba:	78d0      	ldrb	r0, [r2, #3]
   1b3bc:	7811      	ldrb	r1, [r2, #0]
   1b3be:	7854      	ldrb	r4, [r2, #1]
   1b3c0:	4298      	cmp	r0, r3
   1b3c2:	d009      	beq.n	1b3d8 <ull_pdu_rx_alloc+0x24>
	mem = *((void **)(fifo + _first * size));
   1b3c4:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1b3c8:	3301      	adds	r3, #1
   1b3ca:	b2db      	uxtb	r3, r3
		_first = 0U;
   1b3cc:	429c      	cmp	r4, r3
   1b3ce:	bf08      	it	eq
   1b3d0:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   1b3d2:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1b3d4:	7093      	strb	r3, [r2, #2]
}
   1b3d6:	bd10      	pop	{r4, pc}
		return NULL;
   1b3d8:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   1b3da:	e7fc      	b.n	1b3d6 <ull_pdu_rx_alloc+0x22>
   1b3dc:	200015fc 	.word	0x200015fc

0001b3e0 <ull_rx_put>:
{
   1b3e0:	b538      	push	{r3, r4, r5, lr}
   1b3e2:	460c      	mov	r4, r1
   1b3e4:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1b3e6:	f001 fe61 	bl	1d0ac <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1b3ea:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1b3ec:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1b3ee:	4a03      	ldr	r2, [pc, #12]	; (1b3fc <ull_rx_put+0x1c>)
   1b3f0:	4628      	mov	r0, r5
}
   1b3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1b3f6:	f010 bf9b 	b.w	2c330 <memq_enqueue>
   1b3fa:	bf00      	nop
   1b3fc:	20004548 	.word	0x20004548

0001b400 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1b400:	2201      	movs	r2, #1
   1b402:	4b02      	ldr	r3, [pc, #8]	; (1b40c <ull_rx_sched+0xc>)
   1b404:	4611      	mov	r1, r2
   1b406:	2000      	movs	r0, #0
   1b408:	f7fd bcf2 	b.w	18df0 <mayfly_enqueue>
   1b40c:	2000178c 	.word	0x2000178c

0001b410 <ull_prepare_enqueue>:
{
   1b410:	b5f0      	push	{r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1b412:	4d18      	ldr	r5, [pc, #96]	; (1b474 <ull_prepare_enqueue+0x64>)
   1b414:	78ef      	ldrb	r7, [r5, #3]
	if (last == count) {
   1b416:	f895 e001 	ldrb.w	lr, [r5, #1]
   1b41a:	78ac      	ldrb	r4, [r5, #2]
   1b41c:	f895 c000 	ldrb.w	ip, [r5]
	last = last + 1;
   1b420:	1c7e      	adds	r6, r7, #1
   1b422:	b2f6      	uxtb	r6, r6
		last = 0U;
   1b424:	45b6      	cmp	lr, r6
   1b426:	bf08      	it	eq
   1b428:	2600      	moveq	r6, #0
	if (last == first) {
   1b42a:	42b4      	cmp	r4, r6
   1b42c:	d01e      	beq.n	1b46c <ull_prepare_enqueue+0x5c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1b42e:	1d2c      	adds	r4, r5, #4
   1b430:	fb07 440c 	mla	r4, r7, ip, r4
	if (!e) {
   1b434:	b1d4      	cbz	r4, 1b46c <ull_prepare_enqueue+0x5c>
   1b436:	4627      	mov	r7, r4
   1b438:	f102 0c10 	add.w	ip, r2, #16
   1b43c:	f852 eb04 	ldr.w	lr, [r2], #4
   1b440:	f847 eb04 	str.w	lr, [r7], #4
   1b444:	4562      	cmp	r2, ip
   1b446:	d1f9      	bne.n	1b43c <ull_prepare_enqueue+0x2c>
	e->is_abort_cb = is_abort_cb;
   1b448:	e9c4 3004 	strd	r3, r0, [r4, #16]
	e->prio = prio;
   1b44c:	9b05      	ldr	r3, [sp, #20]
   1b44e:	61e3      	str	r3, [r4, #28]
	e->is_resume = is_resume;
   1b450:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1b454:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->abort_cb = abort_cb;
   1b458:	61a1      	str	r1, [r4, #24]
	e->is_resume = is_resume;
   1b45a:	f362 0300 	bfi	r3, r2, #0, #1
	e->is_aborted = 0U;
   1b45e:	f36f 0341 	bfc	r3, #1, #1
   1b462:	f884 3020 	strb.w	r3, [r4, #32]
	*last = idx; /* Commit: Update write index */
   1b466:	70ee      	strb	r6, [r5, #3]
	return 0;
   1b468:	2000      	movs	r0, #0
}
   1b46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1b46c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b470:	e7fb      	b.n	1b46a <ull_prepare_enqueue+0x5a>
   1b472:	bf00      	nop
   1b474:	20001614 	.word	0x20001614

0001b478 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   1b478:	4b05      	ldr	r3, [pc, #20]	; (1b490 <ull_prepare_dequeue_get+0x18>)
   1b47a:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   1b47c:	78d9      	ldrb	r1, [r3, #3]
   1b47e:	7818      	ldrb	r0, [r3, #0]
   1b480:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   1b482:	bf1a      	itte	ne
   1b484:	3304      	addne	r3, #4
   1b486:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   1b48a:	2000      	moveq	r0, #0
}
   1b48c:	4770      	bx	lr
   1b48e:	bf00      	nop
   1b490:	20001614 	.word	0x20001614

0001b494 <rx_demux>:
{
   1b494:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   1b498:	4e89      	ldr	r6, [pc, #548]	; (1b6c0 <rx_demux+0x22c>)
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1b49a:	4c8a      	ldr	r4, [pc, #552]	; (1b6c4 <rx_demux+0x230>)
   1b49c:	aa01      	add	r2, sp, #4
   1b49e:	e9d4 0100 	ldrd	r0, r1, [r4]
   1b4a2:	f010 ff4c 	bl	2c33e <memq_peek>
		if (link) {
   1b4a6:	4605      	mov	r5, r0
   1b4a8:	2800      	cmp	r0, #0
   1b4aa:	f000 80f7 	beq.w	1b69c <rx_demux+0x208>
			LL_ASSERT(rx);
   1b4ae:	9b01      	ldr	r3, [sp, #4]
   1b4b0:	b95b      	cbnz	r3, 1b4ca <rx_demux+0x36>
   1b4b2:	f44f 62e6 	mov.w	r2, #1840	; 0x730
   1b4b6:	4984      	ldr	r1, [pc, #528]	; (1b6c8 <rx_demux+0x234>)
   1b4b8:	4884      	ldr	r0, [pc, #528]	; (1b6cc <rx_demux+0x238>)
   1b4ba:	f00c fa0a 	bl	278d2 <printk>
   1b4be:	4040      	eors	r0, r0
   1b4c0:	f380 8811 	msr	BASEPRI, r0
   1b4c4:	f04f 0003 	mov.w	r0, #3
   1b4c8:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1b4ca:	9b01      	ldr	r3, [sp, #4]
   1b4cc:	aa02      	add	r2, sp, #8
   1b4ce:	f10d 0102 	add.w	r1, sp, #2
   1b4d2:	7818      	ldrb	r0, [r3, #0]
   1b4d4:	f001 fe08 	bl	1d0e8 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   1b4d8:	4602      	mov	r2, r0
   1b4da:	9801      	ldr	r0, [sp, #4]
   1b4dc:	b132      	cbz	r2, 1b4ec <rx_demux+0x58>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   1b4de:	9b02      	ldr	r3, [sp, #8]
   1b4e0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1b4e4:	7800      	ldrb	r0, [r0, #0]
				rx_demux_conn_tx_ack(ack_last, handle,
   1b4e6:	f011 fa18 	bl	2c91a <rx_demux_conn_tx_ack>
   1b4ea:	e7d6      	b.n	1b49a <rx_demux+0x6>
	switch (rx->type) {
   1b4ec:	7903      	ldrb	r3, [r0, #4]
   1b4ee:	9003      	str	r0, [sp, #12]
   1b4f0:	2b03      	cmp	r3, #3
   1b4f2:	f000 80bf 	beq.w	1b674 <rx_demux+0x1e0>
   1b4f6:	d810      	bhi.n	1b51a <rx_demux+0x86>
   1b4f8:	2b01      	cmp	r3, #1
   1b4fa:	d015      	beq.n	1b528 <rx_demux+0x94>
   1b4fc:	2b02      	cmp	r3, #2
   1b4fe:	d01a      	beq.n	1b536 <rx_demux+0xa2>
		LL_ASSERT(0);
   1b500:	f640 0225 	movw	r2, #2085	; 0x825
   1b504:	4970      	ldr	r1, [pc, #448]	; (1b6c8 <rx_demux+0x234>)
   1b506:	4871      	ldr	r0, [pc, #452]	; (1b6cc <rx_demux+0x238>)
   1b508:	f00c f9e3 	bl	278d2 <printk>
   1b50c:	4040      	eors	r0, r0
   1b50e:	f380 8811 	msr	BASEPRI, r0
   1b512:	f04f 0003 	mov.w	r0, #3
   1b516:	df02      	svc	2
			if (nack) {
   1b518:	e7bf      	b.n	1b49a <rx_demux+0x6>
	switch (rx->type) {
   1b51a:	2b13      	cmp	r3, #19
   1b51c:	f000 80a1 	beq.w	1b662 <rx_demux+0x1ce>
   1b520:	2b14      	cmp	r3, #20
   1b522:	d001      	beq.n	1b528 <rx_demux+0x94>
   1b524:	2b04      	cmp	r3, #4
   1b526:	d1eb      	bne.n	1b500 <rx_demux+0x6c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1b528:	4966      	ldr	r1, [pc, #408]	; (1b6c4 <rx_demux+0x230>)
   1b52a:	6860      	ldr	r0, [r4, #4]
   1b52c:	2200      	movs	r2, #0
   1b52e:	f010 ff0e 	bl	2c34e <memq_dequeue>
		ll_rx_put(link, rx);
   1b532:	9903      	ldr	r1, [sp, #12]
   1b534:	e0ac      	b.n	1b690 <rx_demux+0x1fc>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1b536:	6860      	ldr	r0, [r4, #4]
   1b538:	4962      	ldr	r1, [pc, #392]	; (1b6c4 <rx_demux+0x230>)
   1b53a:	f010 ff08 	bl	2c34e <memq_dequeue>
		rx_demux_event_done(link, rx);
   1b53e:	9f03      	ldr	r7, [sp, #12]
	switch (done->extra.type) {
   1b540:	f897 3020 	ldrb.w	r3, [r7, #32]
	ull_hdr = done->param;
   1b544:	69fc      	ldr	r4, [r7, #28]
	switch (done->extra.type) {
   1b546:	b123      	cbz	r3, 1b552 <rx_demux+0xbe>
   1b548:	2b01      	cmp	r3, #1
   1b54a:	d16d      	bne.n	1b628 <rx_demux+0x194>
		ull_conn_done(done);
   1b54c:	4638      	mov	r0, r7
   1b54e:	f001 fc95 	bl	1ce7c <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1b552:	4a5f      	ldr	r2, [pc, #380]	; (1b6d0 <rx_demux+0x23c>)
   1b554:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   1b556:	f892 c001 	ldrb.w	ip, [r2, #1]
   1b55a:	7890      	ldrb	r0, [r2, #2]
	done->extra.type = 0U;
   1b55c:	2300      	movs	r3, #0
   1b55e:	f887 3020 	strb.w	r3, [r7, #32]
	last = last + 1;
   1b562:	1c4b      	adds	r3, r1, #1
   1b564:	b2db      	uxtb	r3, r3
		last = 0U;
   1b566:	459c      	cmp	ip, r3
   1b568:	bf08      	it	eq
   1b56a:	2300      	moveq	r3, #0
	if (last == first) {
   1b56c:	4298      	cmp	r0, r3
   1b56e:	d168      	bne.n	1b642 <rx_demux+0x1ae>
	LL_ASSERT(release == done);
   1b570:	f640 026c 	movw	r2, #2156	; 0x86c
   1b574:	4954      	ldr	r1, [pc, #336]	; (1b6c8 <rx_demux+0x234>)
   1b576:	4855      	ldr	r0, [pc, #340]	; (1b6cc <rx_demux+0x238>)
   1b578:	f00c f9ab 	bl	278d2 <printk>
   1b57c:	4040      	eors	r0, r0
   1b57e:	f380 8811 	msr	BASEPRI, r0
   1b582:	f04f 0003 	mov.w	r0, #3
   1b586:	df02      	svc	2
	next = ull_prepare_dequeue_get();
   1b588:	f7ff ff76 	bl	1b478 <ull_prepare_dequeue_get>
			mfy.param = next;
   1b58c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1b6d4 <rx_demux+0x240>
	while (next) {
   1b590:	b350      	cbz	r0, 1b5e8 <rx_demux+0x154>
		uint8_t is_aborted = next->is_aborted;
   1b592:	f890 5020 	ldrb.w	r5, [r0, #32]
   1b596:	f3c5 0740 	ubfx	r7, r5, #1, #1
		uint8_t is_resume = next->is_resume;
   1b59a:	f005 0501 	and.w	r5, r5, #1
		if (!is_aborted) {
   1b59e:	b9a7      	cbnz	r7, 1b5ca <rx_demux+0x136>
			mfy.param = next;
   1b5a0:	f8c8 0008 	str.w	r0, [r8, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1b5a4:	4b4b      	ldr	r3, [pc, #300]	; (1b6d4 <rx_demux+0x240>)
   1b5a6:	463a      	mov	r2, r7
   1b5a8:	4639      	mov	r1, r7
   1b5aa:	2001      	movs	r0, #1
   1b5ac:	f7fd fc20 	bl	18df0 <mayfly_enqueue>
			LL_ASSERT(!ret);
   1b5b0:	b158      	cbz	r0, 1b5ca <rx_demux+0x136>
   1b5b2:	f640 027d 	movw	r2, #2173	; 0x87d
   1b5b6:	4944      	ldr	r1, [pc, #272]	; (1b6c8 <rx_demux+0x234>)
   1b5b8:	4844      	ldr	r0, [pc, #272]	; (1b6cc <rx_demux+0x238>)
   1b5ba:	f00c f98a 	bl	278d2 <printk>
   1b5be:	4040      	eors	r0, r0
   1b5c0:	f380 8811 	msr	BASEPRI, r0
   1b5c4:	f04f 0003 	mov.w	r0, #3
   1b5c8:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1b5ca:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1b5cc:	78f1      	ldrb	r1, [r6, #3]
		MFIFO_DEQUEUE(prep);
   1b5ce:	7872      	ldrb	r2, [r6, #1]
   1b5d0:	4299      	cmp	r1, r3
   1b5d2:	d005      	beq.n	1b5e0 <rx_demux+0x14c>
	_first += 1U;
   1b5d4:	3301      	adds	r3, #1
   1b5d6:	b2db      	uxtb	r3, r3
		_first = 0U;
   1b5d8:	429a      	cmp	r2, r3
   1b5da:	bf08      	it	eq
   1b5dc:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1b5de:	70b3      	strb	r3, [r6, #2]

		next = ull_prepare_dequeue_get();
   1b5e0:	f7ff ff4a 	bl	1b478 <ull_prepare_dequeue_get>

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   1b5e4:	2800      	cmp	r0, #0
   1b5e6:	d133      	bne.n	1b650 <rx_demux+0x1bc>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   1b5e8:	2c00      	cmp	r4, #0
   1b5ea:	f43f af56 	beq.w	1b49a <rx_demux+0x6>
   1b5ee:	7823      	ldrb	r3, [r4, #0]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   1b5f0:	b95b      	cbnz	r3, 1b60a <rx_demux+0x176>
   1b5f2:	f640 028f 	movw	r2, #2191	; 0x88f
   1b5f6:	4934      	ldr	r1, [pc, #208]	; (1b6c8 <rx_demux+0x234>)
   1b5f8:	4834      	ldr	r0, [pc, #208]	; (1b6cc <rx_demux+0x238>)
   1b5fa:	f00c f96a 	bl	278d2 <printk>
   1b5fe:	4040      	eors	r0, r0
   1b600:	f380 8811 	msr	BASEPRI, r0
   1b604:	f04f 0003 	mov.w	r0, #3
   1b608:	df02      	svc	2
	return hdr->ref--;
   1b60a:	7823      	ldrb	r3, [r4, #0]
   1b60c:	3b01      	subs	r3, #1
   1b60e:	b2db      	uxtb	r3, r3
   1b610:	7023      	strb	r3, [r4, #0]
	return hdr->ref;
   1b612:	7823      	ldrb	r3, [r4, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   1b614:	2b00      	cmp	r3, #0
   1b616:	f47f af40 	bne.w	1b49a <rx_demux+0x6>
   1b61a:	6863      	ldr	r3, [r4, #4]
   1b61c:	2b00      	cmp	r3, #0
   1b61e:	f43f af3c 	beq.w	1b49a <rx_demux+0x6>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   1b622:	68a0      	ldr	r0, [r4, #8]
   1b624:	4798      	blx	r3
			if (nack) {
   1b626:	e738      	b.n	1b49a <rx_demux+0x6>
		LL_ASSERT(0);
   1b628:	f640 0265 	movw	r2, #2149	; 0x865
   1b62c:	4926      	ldr	r1, [pc, #152]	; (1b6c8 <rx_demux+0x234>)
   1b62e:	4827      	ldr	r0, [pc, #156]	; (1b6cc <rx_demux+0x238>)
   1b630:	f00c f94f 	bl	278d2 <printk>
   1b634:	4040      	eors	r0, r0
   1b636:	f380 8811 	msr	BASEPRI, r0
   1b63a:	f04f 0003 	mov.w	r0, #3
   1b63e:	df02      	svc	2
		break;
   1b640:	e787      	b.n	1b552 <rx_demux+0xbe>
	done->hdr.link = link;
   1b642:	603d      	str	r5, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1b644:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1b646:	fb00 2101 	mla	r1, r0, r1, r2
   1b64a:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1b64c:	70d3      	strb	r3, [r2, #3]
	LL_ASSERT(release == done);
   1b64e:	e79b      	b.n	1b588 <rx_demux+0xf4>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   1b650:	2f00      	cmp	r7, #0
   1b652:	d19d      	bne.n	1b590 <rx_demux+0xfc>
   1b654:	2d00      	cmp	r5, #0
   1b656:	d0c7      	beq.n	1b5e8 <rx_demux+0x154>
   1b658:	f890 3020 	ldrb.w	r3, [r0, #32]
   1b65c:	07db      	lsls	r3, r3, #31
   1b65e:	d4c3      	bmi.n	1b5e8 <rx_demux+0x154>
   1b660:	e796      	b.n	1b590 <rx_demux+0xfc>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1b662:	4918      	ldr	r1, [pc, #96]	; (1b6c4 <rx_demux+0x230>)
   1b664:	6860      	ldr	r0, [r4, #4]
   1b666:	f010 fe72 	bl	2c34e <memq_dequeue>
		ull_conn_setup(link, rx);
   1b66a:	9903      	ldr	r1, [sp, #12]
   1b66c:	4628      	mov	r0, r5
   1b66e:	f000 fe67 	bl	1c340 <ull_conn_setup>
			if (nack) {
   1b672:	e712      	b.n	1b49a <rx_demux+0x6>
		nack = ull_conn_rx(link, (void *)&rx);
   1b674:	a903      	add	r1, sp, #12
   1b676:	4628      	mov	r0, r5
   1b678:	f000 fe80 	bl	1c37c <ull_conn_rx>
		if (nack) {
   1b67c:	4602      	mov	r2, r0
   1b67e:	b9d8      	cbnz	r0, 1b6b8 <rx_demux+0x224>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1b680:	4910      	ldr	r1, [pc, #64]	; (1b6c4 <rx_demux+0x230>)
   1b682:	6860      	ldr	r0, [r4, #4]
   1b684:	f010 fe63 	bl	2c34e <memq_dequeue>
		if (rx) {
   1b688:	9903      	ldr	r1, [sp, #12]
   1b68a:	2900      	cmp	r1, #0
   1b68c:	f43f af05 	beq.w	1b49a <rx_demux+0x6>
		ll_rx_put(link, rx);
   1b690:	4628      	mov	r0, r5
   1b692:	f7ff fd27 	bl	1b0e4 <ll_rx_put>
		ll_rx_sched();
   1b696:	f7ff fd2f 	bl	1b0f8 <ll_rx_sched>
			if (nack) {
   1b69a:	e6fe      	b.n	1b49a <rx_demux+0x6>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   1b69c:	aa03      	add	r2, sp, #12
   1b69e:	a902      	add	r1, sp, #8
   1b6a0:	f10d 0002 	add.w	r0, sp, #2
   1b6a4:	f001 fd08 	bl	1d0b8 <ull_conn_ack_peek>
			if (link) {
   1b6a8:	4602      	mov	r2, r0
   1b6aa:	b128      	cbz	r0, 1b6b8 <rx_demux+0x224>
				rx_demux_conn_tx_ack(ack_last, handle,
   1b6ac:	9b03      	ldr	r3, [sp, #12]
   1b6ae:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1b6b2:	f89d 0002 	ldrb.w	r0, [sp, #2]
   1b6b6:	e716      	b.n	1b4e6 <rx_demux+0x52>
}
   1b6b8:	b004      	add	sp, #16
   1b6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b6be:	bf00      	nop
   1b6c0:	20001614 	.word	0x20001614
   1b6c4:	20004544 	.word	0x20004544
   1b6c8:	00035ddd 	.word	0x00035ddd
   1b6cc:	0003067f 	.word	0x0003067f
   1b6d0:	200015d8 	.word	0x200015d8
   1b6d4:	2000179c 	.word	0x2000179c

0001b6d8 <ull_prepare_dequeue_iter>:
{
   1b6d8:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1b6da:	4b0c      	ldr	r3, [pc, #48]	; (1b70c <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   1b6dc:	7801      	ldrb	r1, [r0, #0]
   1b6de:	785c      	ldrb	r4, [r3, #1]
   1b6e0:	78dd      	ldrb	r5, [r3, #3]
   1b6e2:	781a      	ldrb	r2, [r3, #0]
   1b6e4:	42a1      	cmp	r1, r4
   1b6e6:	bf24      	itt	cs
   1b6e8:	789b      	ldrbcs	r3, [r3, #2]
		*idx = first;
   1b6ea:	7003      	strbcs	r3, [r0, #0]
	if (*idx == last) {
   1b6ec:	7801      	ldrb	r1, [r0, #0]
   1b6ee:	428d      	cmp	r5, r1
   1b6f0:	d00a      	beq.n	1b708 <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
   1b6f2:	1c4b      	adds	r3, r1, #1
   1b6f4:	b2db      	uxtb	r3, r3
		i = 0U;
   1b6f6:	429c      	cmp	r4, r3
   1b6f8:	bf08      	it	eq
   1b6fa:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   1b6fc:	4c04      	ldr	r4, [pc, #16]	; (1b710 <ull_prepare_dequeue_iter+0x38>)
	*idx = i;
   1b6fe:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   1b700:	fb01 4202 	mla	r2, r1, r2, r4
}
   1b704:	4610      	mov	r0, r2
   1b706:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1b708:	2200      	movs	r2, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1b70a:	e7fb      	b.n	1b704 <ull_prepare_dequeue_iter+0x2c>
   1b70c:	20001614 	.word	0x20001614
   1b710:	20001618 	.word	0x20001618

0001b714 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   1b714:	4b06      	ldr	r3, [pc, #24]	; (1b730 <ull_event_done_extra_get+0x1c>)
   1b716:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   1b718:	78d8      	ldrb	r0, [r3, #3]
   1b71a:	781a      	ldrb	r2, [r3, #0]
   1b71c:	4288      	cmp	r0, r1
   1b71e:	d005      	beq.n	1b72c <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   1b720:	fb01 3302 	mla	r3, r1, r2, r3
   1b724:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   1b726:	b110      	cbz	r0, 1b72e <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   1b728:	3020      	adds	r0, #32
   1b72a:	4770      	bx	lr
		return NULL;
   1b72c:	2000      	movs	r0, #0
}
   1b72e:	4770      	bx	lr
   1b730:	200015d8 	.word	0x200015d8

0001b734 <ull_event_done>:
{
   1b734:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   1b736:	4a10      	ldr	r2, [pc, #64]	; (1b778 <ull_event_done+0x44>)
	uint8_t _first = *first; /* Copy read-index */
   1b738:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1b73a:	78d4      	ldrb	r4, [r2, #3]
   1b73c:	7811      	ldrb	r1, [r2, #0]
   1b73e:	7855      	ldrb	r5, [r2, #1]
   1b740:	429c      	cmp	r4, r3
   1b742:	d017      	beq.n	1b774 <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
   1b744:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1b748:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1b74a:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   1b74c:	b2db      	uxtb	r3, r3
		_first = 0U;
   1b74e:	429d      	cmp	r5, r3
   1b750:	bf08      	it	eq
   1b752:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1b754:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   1b756:	b15c      	cbz	r4, 1b770 <ull_event_done+0x3c>
	link = evdone->hdr.link;
   1b758:	6823      	ldr	r3, [r4, #0]
	evdone->param = param;
   1b75a:	61e0      	str	r0, [r4, #28]
	evdone->hdr.link = NULL;
   1b75c:	2200      	movs	r2, #0
   1b75e:	6022      	str	r2, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1b760:	2202      	movs	r2, #2
   1b762:	7122      	strb	r2, [r4, #4]
	ull_rx_put(link, evdone);
   1b764:	4621      	mov	r1, r4
   1b766:	4618      	mov	r0, r3
   1b768:	f7ff fe3a 	bl	1b3e0 <ull_rx_put>
	ull_rx_sched();
   1b76c:	f7ff fe48 	bl	1b400 <ull_rx_sched>
}
   1b770:	4620      	mov	r0, r4
   1b772:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1b774:	2400      	movs	r4, #0
   1b776:	e7fb      	b.n	1b770 <ull_event_done+0x3c>
   1b778:	200015d8 	.word	0x200015d8

0001b77c <ticker_cb>:
	return adv;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder, uint16_t lazy,
		      void *param)
{
   1b77c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b77e:	461d      	mov	r5, r3

	DEBUG_RADIO_PREPARE_A(1);

	lll = &adv->lll;

	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   1b780:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b784:	429a      	cmp	r2, r3
{
   1b786:	b08b      	sub	sp, #44	; 0x2c
   1b788:	4607      	mov	r7, r0
   1b78a:	460e      	mov	r6, r1
   1b78c:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   1b78e:	d02b      	beq.n	1b7e8 <ticker_cb+0x6c>
	return ++hdr->ref;
   1b790:	7c2b      	ldrb	r3, [r5, #16]
   1b792:	3301      	adds	r3, #1
   1b794:	b2db      	uxtb	r3, r3
   1b796:	742b      	strb	r3, [r5, #16]
	    (lazy != TICKER_LAZY_MUST_EXPIRE)) {
		/* Increment prepare reference count */
		ref = ull_ref_inc(&adv->ull);
		LL_ASSERT(ref);
   1b798:	b95b      	cbnz	r3, 1b7b2 <ticker_cb+0x36>
   1b79a:	f240 6287 	movw	r2, #1671	; 0x687
   1b79e:	492d      	ldr	r1, [pc, #180]	; (1b854 <ticker_cb+0xd8>)
   1b7a0:	482d      	ldr	r0, [pc, #180]	; (1b858 <ticker_cb+0xdc>)
   1b7a2:	f00c f896 	bl	278d2 <printk>
   1b7a6:	4040      	eors	r0, r0
   1b7a8:	f380 8811 	msr	BASEPRI, r0
   1b7ac:	f04f 0003 	mov.w	r0, #3
   1b7b0:	df02      	svc	2

		/* Append timing parameters */
		p.ticks_at_expire = ticks_at_expire;
   1b7b2:	4a2a      	ldr	r2, [pc, #168]	; (1b85c <ticker_cb+0xe0>)
	lll = &adv->lll;
   1b7b4:	f105 031c 	add.w	r3, r5, #28
		p.remainder = remainder;
		p.lazy = lazy;
		p.param = lll;
   1b7b8:	60d3      	str	r3, [r2, #12]
		mfy.param = &p;
   1b7ba:	4b29      	ldr	r3, [pc, #164]	; (1b860 <ticker_cb+0xe4>)
		p.lazy = lazy;
   1b7bc:	8114      	strh	r4, [r2, #8]
		p.remainder = remainder;
   1b7be:	e9c2 7600 	strd	r7, r6, [r2]
		mfy.param = &p;
   1b7c2:	609a      	str	r2, [r3, #8]

		/* Kick LLL prepare */
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1b7c4:	2200      	movs	r2, #0
   1b7c6:	4611      	mov	r1, r2
   1b7c8:	2001      	movs	r0, #1
   1b7ca:	f7fd fb11 	bl	18df0 <mayfly_enqueue>
				     TICKER_USER_ID_LLL, 0, &mfy);
		LL_ASSERT(!ret);
   1b7ce:	b158      	cbz	r0, 1b7e8 <ticker_cb+0x6c>
   1b7d0:	f240 6293 	movw	r2, #1683	; 0x693
   1b7d4:	491f      	ldr	r1, [pc, #124]	; (1b854 <ticker_cb+0xd8>)
   1b7d6:	4820      	ldr	r0, [pc, #128]	; (1b858 <ticker_cb+0xdc>)
   1b7d8:	f00c f87b 	bl	278d2 <printk>
   1b7dc:	4040      	eors	r0, r0
   1b7de:	f380 8811 	msr	BASEPRI, r0
   1b7e2:	f04f 0003 	mov.w	r0, #3
   1b7e6:	df02      	svc	2
	}

	/* Apply adv random delay */
#if defined(CONFIG_BT_PERIPHERAL)
	if (!lll->is_hdcd)
   1b7e8:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
   1b7ec:	f014 0401 	ands.w	r4, r4, #1
   1b7f0:	d12e      	bne.n	1b850 <ticker_cb+0xd4>
#endif /* CONFIG_BT_PERIPHERAL */
	{
		uint32_t random_delay;
		uint32_t ret;

		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   1b7f2:	2104      	movs	r1, #4
   1b7f4:	a809      	add	r0, sp, #36	; 0x24
   1b7f6:	f011 fb26 	bl	2ce46 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1b7fa:	9909      	ldr	r1, [sp, #36]	; 0x24
		random_delay += 1;

		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1b7fc:	9506      	str	r5, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1b7fe:	f240 1247 	movw	r2, #327	; 0x147
   1b802:	fbb1 f3f2 	udiv	r3, r1, r2
   1b806:	fb02 1313 	mls	r3, r2, r3, r1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1b80a:	4a16      	ldr	r2, [pc, #88]	; (1b864 <ticker_cb+0xe8>)
   1b80c:	2150      	movs	r1, #80	; 0x50
   1b80e:	1aaa      	subs	r2, r5, r2
   1b810:	fbb2 f2f1 	udiv	r2, r2, r1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1b814:	4914      	ldr	r1, [pc, #80]	; (1b868 <ticker_cb+0xec>)
				    TICKER_USER_ID_ULL_HIGH,
				    (TICKER_ID_ADV_BASE +
   1b816:	3202      	adds	r2, #2
		random_delay += 1;
   1b818:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1b81a:	e9cd 4104 	strd	r4, r1, [sp, #16]
   1b81e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1b822:	e9cd 4400 	strd	r4, r4, [sp]
   1b826:	b2d2      	uxtb	r2, r2
   1b828:	2101      	movs	r1, #1
   1b82a:	4620      	mov	r0, r4
		random_delay += 1;
   1b82c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1b82e:	f010 ffed 	bl	2c80c <ticker_update>
				     ull_adv_handle_get(adv)),
				    random_delay,
				    0, 0, 0, 0, 0,
				    ticker_op_update_cb, adv);
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1b832:	f030 0302 	bics.w	r3, r0, #2
   1b836:	d00b      	beq.n	1b850 <ticker_cb+0xd4>
   1b838:	f240 62aa 	movw	r2, #1706	; 0x6aa
   1b83c:	4905      	ldr	r1, [pc, #20]	; (1b854 <ticker_cb+0xd8>)
   1b83e:	4806      	ldr	r0, [pc, #24]	; (1b858 <ticker_cb+0xdc>)
   1b840:	f00c f847 	bl	278d2 <printk>
   1b844:	4040      	eors	r0, r0
   1b846:	f380 8811 	msr	BASEPRI, r0
   1b84a:	f04f 0003 	mov.w	r0, #3
   1b84e:	df02      	svc	2
		ull_adv_aux_offset_get(adv);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT && (CONFIG_BT_CTLR_ADV_AUX_SET > 0) */

	DEBUG_RADIO_PREPARE_A(1);
}
   1b850:	b00b      	add	sp, #44	; 0x2c
   1b852:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b854:	00035e34 	.word	0x00035e34
   1b858:	0003067f 	.word	0x0003067f
   1b85c:	20004a44 	.word	0x20004a44
   1b860:	200017ac 	.word	0x200017ac
   1b864:	200049e8 	.word	0x200049e8
   1b868:	0001b9ed 	.word	0x0001b9ed

0001b86c <conn_release>:
	ll_rx_put(link, rx);
	ll_rx_sched();
}

static void conn_release(struct ll_adv_set *adv)
{
   1b86c:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   1b86e:	6a45      	ldr	r5, [r0, #36]	; 0x24
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   1b870:	6d2b      	ldr	r3, [r5, #80]	; 0x50
{
   1b872:	4604      	mov	r4, r0
	LL_ASSERT(!lll->link_tx_free);
   1b874:	b15b      	cbz	r3, 1b88e <conn_release+0x22>
   1b876:	f240 7241 	movw	r2, #1857	; 0x741
   1b87a:	4916      	ldr	r1, [pc, #88]	; (1b8d4 <conn_release+0x68>)
   1b87c:	4816      	ldr	r0, [pc, #88]	; (1b8d8 <conn_release+0x6c>)
   1b87e:	f00c f828 	bl	278d2 <printk>
   1b882:	4040      	eors	r0, r0
   1b884:	f380 8811 	msr	BASEPRI, r0
   1b888:	f04f 0003 	mov.w	r0, #3
   1b88c:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   1b88e:	f105 0144 	add.w	r1, r5, #68	; 0x44
   1b892:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1b896:	f010 fd40 	bl	2c31a <memq_deinit>
	LL_ASSERT(link);
   1b89a:	4606      	mov	r6, r0
   1b89c:	b958      	cbnz	r0, 1b8b6 <conn_release+0x4a>
   1b89e:	f240 7243 	movw	r2, #1859	; 0x743
   1b8a2:	490c      	ldr	r1, [pc, #48]	; (1b8d4 <conn_release+0x68>)
   1b8a4:	480c      	ldr	r0, [pc, #48]	; (1b8d8 <conn_release+0x6c>)
   1b8a6:	f00c f814 	bl	278d2 <printk>
   1b8aa:	4040      	eors	r0, r0
   1b8ac:	f380 8811 	msr	BASEPRI, r0
   1b8b0:	f04f 0003 	mov.w	r0, #3
   1b8b4:	df02      	svc	2
	lll->link_tx_free = link;

	ll_conn_release(lll->hdr.parent);
   1b8b6:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   1b8b8:	652e      	str	r6, [r5, #80]	; 0x50
	adv->lll.conn = NULL;
   1b8ba:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   1b8bc:	f000 fc3e 	bl	1c13c <ll_conn_release>

	ll_rx_release(adv->node_rx_cc_free);
   1b8c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	adv->lll.conn = NULL;
   1b8c2:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   1b8c4:	f7ff fc08 	bl	1b0d8 <ll_rx_release>
	adv->node_rx_cc_free = NULL;
   1b8c8:	64a5      	str	r5, [r4, #72]	; 0x48
	ll_rx_link_release(adv->link_cc_free);
   1b8ca:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1b8cc:	f7ff fbf8 	bl	1b0c0 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   1b8d0:	6465      	str	r5, [r4, #68]	; 0x44
}
   1b8d2:	bd70      	pop	{r4, r5, r6, pc}
   1b8d4:	00035e34 	.word	0x00035e34
   1b8d8:	0003067f 	.word	0x0003067f

0001b8dc <ticker_op_stop_cb>:
{
   1b8dc:	b570      	push	{r4, r5, r6, lr}
   1b8de:	460c      	mov	r4, r1
	if (status != TICKER_STATUS_SUCCESS) {
   1b8e0:	2800      	cmp	r0, #0
   1b8e2:	d12f      	bne.n	1b944 <ticker_op_stop_cb+0x68>
	mfy.param = &adv->lll;
   1b8e4:	f101 021c 	add.w	r2, r1, #28
   1b8e8:	4b1c      	ldr	r3, [pc, #112]	; (1b95c <ticker_op_stop_cb+0x80>)
	return hdr->ref;
   1b8ea:	7c09      	ldrb	r1, [r1, #16]
   1b8ec:	609a      	str	r2, [r3, #8]
   1b8ee:	461e      	mov	r6, r3
	if (ull_ref_get(hdr)) {
   1b8f0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   1b8f4:	4d1a      	ldr	r5, [pc, #104]	; (1b960 <ticker_op_stop_cb+0x84>)
   1b8f6:	b331      	cbz	r1, 1b946 <ticker_op_stop_cb+0x6a>
		LL_ASSERT(!hdr->disabled_cb);
   1b8f8:	6963      	ldr	r3, [r4, #20]
   1b8fa:	b15b      	cbz	r3, 1b914 <ticker_op_stop_cb+0x38>
   1b8fc:	f240 62fa 	movw	r2, #1786	; 0x6fa
   1b900:	4918      	ldr	r1, [pc, #96]	; (1b964 <ticker_op_stop_cb+0x88>)
   1b902:	4819      	ldr	r0, [pc, #100]	; (1b968 <ticker_op_stop_cb+0x8c>)
   1b904:	f00b ffe5 	bl	278d2 <printk>
   1b908:	4040      	eors	r0, r0
   1b90a:	f380 8811 	msr	BASEPRI, r0
   1b90e:	f04f 0003 	mov.w	r0, #3
   1b912:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1b914:	68b3      	ldr	r3, [r6, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1b916:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   1b918:	e9c4 5305 	strd	r5, r3, [r4, #20]
		mfy.fp = lll_disable;
   1b91c:	4b13      	ldr	r3, [pc, #76]	; (1b96c <ticker_op_stop_cb+0x90>)
   1b91e:	60f3      	str	r3, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1b920:	4611      	mov	r1, r2
   1b922:	4b0e      	ldr	r3, [pc, #56]	; (1b95c <ticker_op_stop_cb+0x80>)
   1b924:	2002      	movs	r0, #2
   1b926:	f7fd fa63 	bl	18df0 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1b92a:	b158      	cbz	r0, 1b944 <ticker_op_stop_cb+0x68>
   1b92c:	f240 7201 	movw	r2, #1793	; 0x701
		LL_ASSERT(!ret);
   1b930:	490c      	ldr	r1, [pc, #48]	; (1b964 <ticker_op_stop_cb+0x88>)
   1b932:	480d      	ldr	r0, [pc, #52]	; (1b968 <ticker_op_stop_cb+0x8c>)
   1b934:	f00b ffcd 	bl	278d2 <printk>
   1b938:	4040      	eors	r0, r0
   1b93a:	f380 8811 	msr	BASEPRI, r0
   1b93e:	f04f 0003 	mov.w	r0, #3
   1b942:	df02      	svc	2
}
   1b944:	bd70      	pop	{r4, r5, r6, pc}
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1b946:	2101      	movs	r1, #1
   1b948:	2002      	movs	r0, #2
		mfy.fp = disabled_cb;
   1b94a:	60dd      	str	r5, [r3, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1b94c:	f7fd fa50 	bl	18df0 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1b950:	2800      	cmp	r0, #0
   1b952:	d0f7      	beq.n	1b944 <ticker_op_stop_cb+0x68>
   1b954:	f240 7206 	movw	r2, #1798	; 0x706
   1b958:	e7ea      	b.n	1b930 <ticker_op_stop_cb+0x54>
   1b95a:	bf00      	nop
   1b95c:	200017bc 	.word	0x200017bc
   1b960:	0001b971 	.word	0x0001b971
   1b964:	00035e34 	.word	0x00035e34
   1b968:	0003067f 	.word	0x0003067f
   1b96c:	0001d92d 	.word	0x0001d92d

0001b970 <disabled_cb>:
{
   1b970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   1b972:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   1b974:	6c6b      	ldr	r3, [r5, #68]	; 0x44
{
   1b976:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   1b978:	b95b      	cbnz	r3, 1b992 <disabled_cb+0x22>
   1b97a:	f240 7213 	movw	r2, #1811	; 0x713
   1b97e:	4919      	ldr	r1, [pc, #100]	; (1b9e4 <disabled_cb+0x74>)
   1b980:	4819      	ldr	r0, [pc, #100]	; (1b9e8 <disabled_cb+0x78>)
   1b982:	f00b ffa6 	bl	278d2 <printk>
   1b986:	4040      	eors	r0, r0
   1b988:	f380 8811 	msr	BASEPRI, r0
   1b98c:	f04f 0003 	mov.w	r0, #3
   1b990:	df02      	svc	2
	adv->link_cc_free = NULL;
   1b992:	2300      	movs	r3, #0
	link = adv->link_cc_free;
   1b994:	6c6f      	ldr	r7, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   1b996:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   1b998:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1b99a:	b95b      	cbnz	r3, 1b9b4 <disabled_cb+0x44>
   1b99c:	f240 7217 	movw	r2, #1815	; 0x717
   1b9a0:	4910      	ldr	r1, [pc, #64]	; (1b9e4 <disabled_cb+0x74>)
   1b9a2:	4811      	ldr	r0, [pc, #68]	; (1b9e8 <disabled_cb+0x78>)
   1b9a4:	f00b ff95 	bl	278d2 <printk>
   1b9a8:	4040      	eors	r0, r0
   1b9aa:	f380 8811 	msr	BASEPRI, r0
   1b9ae:	f04f 0003 	mov.w	r0, #3
   1b9b2:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   1b9b4:	6cac      	ldr	r4, [r5, #72]	; 0x48
	adv->node_rx_cc_free = NULL;
   1b9b6:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1b9b8:	2313      	movs	r3, #19
	adv->node_rx_cc_free = NULL;
   1b9ba:	64a9      	str	r1, [r5, #72]	; 0x48
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1b9bc:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   1b9be:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b9c2:	80e3      	strh	r3, [r4, #6]
__ssp_bos_icheck3(memset, void *, int)
   1b9c4:	2212      	movs	r2, #18
   1b9c6:	f104 001c 	add.w	r0, r4, #28
   1b9ca:	f012 fca9 	bl	2e320 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1b9ce:	233c      	movs	r3, #60	; 0x3c
   1b9d0:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   1b9d2:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   1b9d4:	4621      	mov	r1, r4
   1b9d6:	4638      	mov	r0, r7
   1b9d8:	f7ff fb84 	bl	1b0e4 <ll_rx_put>
}
   1b9dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   1b9e0:	f7ff bb8a 	b.w	1b0f8 <ll_rx_sched>
   1b9e4:	00035e34 	.word	0x00035e34
   1b9e8:	0003067f 	.word	0x0003067f

0001b9ec <ticker_op_update_cb>:
{
   1b9ec:	b510      	push	{r4, lr}
   1b9ee:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1b9f0:	b178      	cbz	r0, 1ba12 <ticker_op_update_cb+0x26>
   1b9f2:	f7ff fc37 	bl	1b264 <ull_disable_mark_get>
   1b9f6:	4284      	cmp	r4, r0
   1b9f8:	d00b      	beq.n	1ba12 <ticker_op_update_cb+0x26>
   1b9fa:	f240 62cb 	movw	r2, #1739	; 0x6cb
   1b9fe:	4905      	ldr	r1, [pc, #20]	; (1ba14 <ticker_op_update_cb+0x28>)
   1ba00:	4805      	ldr	r0, [pc, #20]	; (1ba18 <ticker_op_update_cb+0x2c>)
   1ba02:	f00b ff66 	bl	278d2 <printk>
   1ba06:	4040      	eors	r0, r0
   1ba08:	f380 8811 	msr	BASEPRI, r0
   1ba0c:	f04f 0003 	mov.w	r0, #3
   1ba10:	df02      	svc	2
}
   1ba12:	bd10      	pop	{r4, pc}
   1ba14:	00035e34 	.word	0x00035e34
   1ba18:	0003067f 	.word	0x0003067f

0001ba1c <init_reset.part.3>:
static int init_reset(void)
   1ba1c:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1ba1e:	4c05      	ldr	r4, [pc, #20]	; (1ba34 <init_reset.part.3+0x18>)
   1ba20:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1ba24:	f002 f99e 	bl	1dd64 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   1ba28:	f104 0038 	add.w	r0, r4, #56	; 0x38
}
   1ba2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   1ba30:	f002 b998 	b.w	1dd64 <lll_adv_data_init>
   1ba34:	200049e8 	.word	0x200049e8

0001ba38 <ticker_stop_cb>:
{
   1ba38:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1ba3a:	4c17      	ldr	r4, [pc, #92]	; (1ba98 <ticker_stop_cb+0x60>)
   1ba3c:	2250      	movs	r2, #80	; 0x50
   1ba3e:	1b1c      	subs	r4, r3, r4
   1ba40:	fbb4 f4f2 	udiv	r4, r4, r2
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1ba44:	f014 0fff 	tst.w	r4, #255	; 0xff
{
   1ba48:	461d      	mov	r5, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1ba4a:	d00b      	beq.n	1ba64 <ticker_stop_cb+0x2c>
   1ba4c:	f240 62d7 	movw	r2, #1751	; 0x6d7
   1ba50:	4912      	ldr	r1, [pc, #72]	; (1ba9c <ticker_stop_cb+0x64>)
   1ba52:	4813      	ldr	r0, [pc, #76]	; (1baa0 <ticker_stop_cb+0x68>)
   1ba54:	f00b ff3d 	bl	278d2 <printk>
   1ba58:	4040      	eors	r0, r0
   1ba5a:	f380 8811 	msr	BASEPRI, r0
   1ba5e:	f04f 0003 	mov.w	r0, #3
   1ba62:	df02      	svc	2
			  TICKER_ID_ADV_BASE + handle,
   1ba64:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   1ba66:	4b0f      	ldr	r3, [pc, #60]	; (1baa4 <ticker_stop_cb+0x6c>)
   1ba68:	9500      	str	r5, [sp, #0]
   1ba6a:	b2d2      	uxtb	r2, r2
   1ba6c:	2101      	movs	r1, #1
   1ba6e:	2000      	movs	r0, #0
   1ba70:	f7fd ff94 	bl	1999c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1ba74:	f030 0302 	bics.w	r3, r0, #2
   1ba78:	d00b      	beq.n	1ba92 <ticker_stop_cb+0x5a>
   1ba7a:	f240 62dd 	movw	r2, #1757	; 0x6dd
   1ba7e:	4907      	ldr	r1, [pc, #28]	; (1ba9c <ticker_stop_cb+0x64>)
   1ba80:	4807      	ldr	r0, [pc, #28]	; (1baa0 <ticker_stop_cb+0x68>)
   1ba82:	f00b ff26 	bl	278d2 <printk>
   1ba86:	4040      	eors	r0, r0
   1ba88:	f380 8811 	msr	BASEPRI, r0
   1ba8c:	f04f 0003 	mov.w	r0, #3
   1ba90:	df02      	svc	2
}
   1ba92:	b003      	add	sp, #12
   1ba94:	bd30      	pop	{r4, r5, pc}
   1ba96:	bf00      	nop
   1ba98:	200049e8 	.word	0x200049e8
   1ba9c:	00035e34 	.word	0x00035e34
   1baa0:	0003067f 	.word	0x0003067f
   1baa4:	0001b8dd 	.word	0x0001b8dd

0001baa8 <ll_adv_params_set>:
{
   1baa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1baaa:	4605      	mov	r5, r0
	if (!adv || adv->is_enabled) {
   1baac:	4c31      	ldr	r4, [pc, #196]	; (1bb74 <ll_adv_params_set+0xcc>)
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1baae:	4832      	ldr	r0, [pc, #200]	; (1bb78 <ll_adv_params_set+0xd0>)
   1bab0:	9000      	str	r0, [sp, #0]
   1bab2:	2001      	movs	r0, #1
   1bab4:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!adv || adv->is_enabled) {
   1bab8:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
{
   1babc:	9f08      	ldr	r7, [sp, #32]
	if (!adv || adv->is_enabled) {
   1babe:	f010 0001 	ands.w	r0, r0, #1
   1bac2:	d154      	bne.n	1bb6e <ll_adv_params_set+0xc6>
		adv->interval = 0;
   1bac4:	2901      	cmp	r1, #1
   1bac6:	bf08      	it	eq
   1bac8:	2500      	moveq	r5, #0
   1baca:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	adv->lll.chan_map = chan_map;
   1bace:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1bad2:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   1bad6:	f366 0543 	bfi	r5, r6, #1, #3
   1bada:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	adv->lll.filter_policy = filter_policy;
   1bade:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1bae2:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   1bae6:	f366 0501 	bfi	r5, r6, #0, #2
   1baea:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1baee:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
   1baf2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
	pdu->type = pdu_adv_type[adv_type];
   1baf6:	ae02      	add	r6, sp, #8
   1baf8:	6b2d      	ldr	r5, [r5, #48]	; 0x30
   1bafa:	440e      	add	r6, r1
   1bafc:	7829      	ldrb	r1, [r5, #0]
   1bafe:	f816 6c08 	ldrb.w	r6, [r6, #-8]
   1bb02:	f366 0103 	bfi	r1, r6, #0, #4
	pdu->rfu = 0;
   1bb06:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1bb0a:	f001 060f 	and.w	r6, r1, #15
   1bb0e:	2e01      	cmp	r6, #1
	pdu->rfu = 0;
   1bb10:	7029      	strb	r1, [r5, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1bb12:	f002 0201 	and.w	r2, r2, #1
   1bb16:	d120      	bne.n	1bb5a <ll_adv_params_set+0xb2>
		pdu->tx_addr = own_addr_type & 0x1;
   1bb18:	f362 1186 	bfi	r1, r2, #6, #1
		pdu->rx_addr = direct_addr_type;
   1bb1c:	f363 11c7 	bfi	r1, r3, #7, #1
   1bb20:	462b      	mov	r3, r5
   1bb22:	f803 1b08 	strb.w	r1, [r3], #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1bb26:	6839      	ldr	r1, [r7, #0]
   1bb28:	60a9      	str	r1, [r5, #8]
   1bb2a:	88b9      	ldrh	r1, [r7, #4]
   1bb2c:	8099      	strh	r1, [r3, #4]
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   1bb2e:	230c      	movs	r3, #12
		pdu->len = BDADDR_SIZE;
   1bb30:	706b      	strb	r3, [r5, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1bb32:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   1bb36:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1bb3a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
		pdu->tx_addr = own_addr_type & 0x1;
   1bb3c:	780b      	ldrb	r3, [r1, #0]
   1bb3e:	f362 1386 	bfi	r3, r2, #6, #1
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1bb42:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1bb46:	f043 0304 	orr.w	r3, r3, #4
   1bb4a:	700b      	strb	r3, [r1, #0]
		if (pdu->len == 0) {
   1bb4c:	784b      	ldrb	r3, [r1, #1]
   1bb4e:	b913      	cbnz	r3, 1bb56 <ll_adv_params_set+0xae>
			pdu->len = BDADDR_SIZE;
   1bb50:	2206      	movs	r2, #6
   1bb52:	704a      	strb	r2, [r1, #1]
	return 0;
   1bb54:	4618      	mov	r0, r3
}
   1bb56:	b003      	add	sp, #12
   1bb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   1bb5a:	f362 1186 	bfi	r1, r2, #6, #1
	} else if (pdu->len == 0) {
   1bb5e:	786b      	ldrb	r3, [r5, #1]
		pdu->rx_addr = 0;
   1bb60:	f360 11c7 	bfi	r1, r0, #7, #1
   1bb64:	7029      	strb	r1, [r5, #0]
	} else if (pdu->len == 0) {
   1bb66:	2b00      	cmp	r3, #0
   1bb68:	d1e3      	bne.n	1bb32 <ll_adv_params_set+0x8a>
		pdu->len = BDADDR_SIZE;
   1bb6a:	2306      	movs	r3, #6
   1bb6c:	e7e0      	b.n	1bb30 <ll_adv_params_set+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1bb6e:	200c      	movs	r0, #12
   1bb70:	e7f1      	b.n	1bb56 <ll_adv_params_set+0xae>
   1bb72:	bf00      	nop
   1bb74:	200049e8 	.word	0x200049e8
   1bb78:	02060100 	.word	0x02060100

0001bb7c <ull_adv_reset_finalize>:
{
   1bb7c:	b510      	push	{r4, lr}
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   1bb7e:	4c06      	ldr	r4, [pc, #24]	; (1bb98 <ull_adv_reset_finalize+0x1c>)
   1bb80:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1bb84:	f011 f9cd 	bl	2cf22 <lll_adv_data_reset>
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   1bb88:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1bb8c:	f011 f9c9 	bl	2cf22 <lll_adv_data_reset>
	for (handle = 0U; handle < BT_CTLR_ADV_SET; handle++) {
   1bb90:	f7ff ff44 	bl	1ba1c <init_reset.part.3>
}
   1bb94:	2000      	movs	r0, #0
   1bb96:	bd10      	pop	{r4, pc}
   1bb98:	200049e8 	.word	0x200049e8

0001bb9c <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1bb9c:	4b03      	ldr	r3, [pc, #12]	; (1bbac <ull_adv_handle_get+0x10>)
   1bb9e:	1ac0      	subs	r0, r0, r3
   1bba0:	2350      	movs	r3, #80	; 0x50
   1bba2:	fbb0 f0f3 	udiv	r0, r0, r3
}
   1bba6:	b280      	uxth	r0, r0
   1bba8:	4770      	bx	lr
   1bbaa:	bf00      	nop
   1bbac:	200049e8 	.word	0x200049e8

0001bbb0 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1bbb0:	6800      	ldr	r0, [r0, #0]
   1bbb2:	4b03      	ldr	r3, [pc, #12]	; (1bbc0 <ull_adv_lll_handle_get+0x10>)
   1bbb4:	1ac0      	subs	r0, r0, r3
   1bbb6:	2350      	movs	r3, #80	; 0x50
   1bbb8:	fbb0 f0f3 	udiv	r0, r0, r3
}
   1bbbc:	b280      	uxth	r0, r0
   1bbbe:	4770      	bx	lr
   1bbc0:	200049e8 	.word	0x200049e8

0001bbc4 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   1bbc4:	b938      	cbnz	r0, 1bbd6 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   1bbc6:	4805      	ldr	r0, [pc, #20]	; (1bbdc <ull_adv_is_enabled_get+0x18>)
   1bbc8:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return &ll_adv[handle];
   1bbcc:	f013 0f01 	tst.w	r3, #1
   1bbd0:	bf08      	it	eq
   1bbd2:	2000      	moveq	r0, #0
   1bbd4:	4770      	bx	lr
		return NULL;
   1bbd6:	2000      	movs	r0, #0
}
   1bbd8:	4770      	bx	lr
   1bbda:	bf00      	nop
   1bbdc:	200049e8 	.word	0x200049e8

0001bbe0 <disable.constprop.6>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static inline uint8_t disable(uint8_t handle)
   1bbe0:	b530      	push	{r4, r5, lr}
	uint32_t volatile ret_cb;
	struct ll_adv_set *adv;
	void *mark;
	uint32_t ret;

	adv = ull_adv_is_enabled_get(handle);
   1bbe2:	2000      	movs	r0, #0
static inline uint8_t disable(uint8_t handle)
   1bbe4:	b085      	sub	sp, #20
	adv = ull_adv_is_enabled_get(handle);
   1bbe6:	f7ff ffed 	bl	1bbc4 <ull_adv_is_enabled_get>
	if (!adv) {
   1bbea:	4604      	mov	r4, r0
   1bbec:	b910      	cbnz	r0, 1bbf4 <disable.constprop.6+0x14>
		ret = ull_ticker_status_take(ret, &ret_cb);
		if (ret) {
			mark = ull_disable_unmark(adv);
			LL_ASSERT(mark == adv);

			return BT_HCI_ERR_CMD_DISALLOWED;
   1bbee:	200c      	movs	r0, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
}
   1bbf0:	b005      	add	sp, #20
   1bbf2:	bd30      	pop	{r4, r5, pc}
	mark = ull_disable_mark(adv);
   1bbf4:	f7ff fb20 	bl	1b238 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   1bbf8:	4284      	cmp	r4, r0
   1bbfa:	d00b      	beq.n	1bc14 <disable.constprop.6+0x34>
   1bbfc:	f240 7296 	movw	r2, #1942	; 0x796
   1bc00:	4938      	ldr	r1, [pc, #224]	; (1bce4 <disable.constprop.6+0x104>)
   1bc02:	4839      	ldr	r0, [pc, #228]	; (1bce8 <disable.constprop.6+0x108>)
   1bc04:	f00b fe65 	bl	278d2 <printk>
   1bc08:	4040      	eors	r0, r0
   1bc0a:	f380 8811 	msr	BASEPRI, r0
   1bc0e:	f04f 0003 	mov.w	r0, #3
   1bc12:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   1bc14:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1bc18:	f013 0f01 	tst.w	r3, #1
   1bc1c:	ad03      	add	r5, sp, #12
   1bc1e:	d01e      	beq.n	1bc5e <disable.constprop.6+0x7e>
		ret_cb = TICKER_STATUS_BUSY;
   1bc20:	2302      	movs	r3, #2
   1bc22:	9303      	str	r3, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1bc24:	2103      	movs	r1, #3
   1bc26:	9500      	str	r5, [sp, #0]
   1bc28:	4b30      	ldr	r3, [pc, #192]	; (1bcec <disable.constprop.6+0x10c>)
   1bc2a:	2201      	movs	r2, #1
   1bc2c:	2000      	movs	r0, #0
   1bc2e:	f7fd feb5 	bl	1999c <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   1bc32:	4629      	mov	r1, r5
   1bc34:	f7ff fadc 	bl	1b1f0 <ull_ticker_status_take>
		if (ret) {
   1bc38:	b188      	cbz	r0, 1bc5e <disable.constprop.6+0x7e>
			mark = ull_disable_unmark(adv);
   1bc3a:	4620      	mov	r0, r4
   1bc3c:	f7ff fb04 	bl	1b248 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   1bc40:	4284      	cmp	r4, r0
   1bc42:	d0d4      	beq.n	1bbee <disable.constprop.6+0xe>
   1bc44:	f240 72a1 	movw	r2, #1953	; 0x7a1
   1bc48:	4926      	ldr	r1, [pc, #152]	; (1bce4 <disable.constprop.6+0x104>)
   1bc4a:	4827      	ldr	r0, [pc, #156]	; (1bce8 <disable.constprop.6+0x108>)
   1bc4c:	f00b fe41 	bl	278d2 <printk>
   1bc50:	4040      	eors	r0, r0
   1bc52:	f380 8811 	msr	BASEPRI, r0
   1bc56:	f04f 0003 	mov.w	r0, #3
   1bc5a:	df02      	svc	2
   1bc5c:	e7c7      	b.n	1bbee <disable.constprop.6+0xe>
	ret_cb = TICKER_STATUS_BUSY;
   1bc5e:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1bc60:	2103      	movs	r1, #3
   1bc62:	9500      	str	r5, [sp, #0]
   1bc64:	4b21      	ldr	r3, [pc, #132]	; (1bcec <disable.constprop.6+0x10c>)
	ret_cb = TICKER_STATUS_BUSY;
   1bc66:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1bc68:	2000      	movs	r0, #0
   1bc6a:	f7fd fe97 	bl	1999c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1bc6e:	4629      	mov	r1, r5
   1bc70:	f7ff fabe 	bl	1b1f0 <ull_ticker_status_take>
	if (ret) {
   1bc74:	b138      	cbz	r0, 1bc86 <disable.constprop.6+0xa6>
		mark = ull_disable_unmark(adv);
   1bc76:	4620      	mov	r0, r4
   1bc78:	f7ff fae6 	bl	1b248 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   1bc7c:	4284      	cmp	r4, r0
   1bc7e:	d0b6      	beq.n	1bbee <disable.constprop.6+0xe>
   1bc80:	f240 72af 	movw	r2, #1967	; 0x7af
   1bc84:	e7e0      	b.n	1bc48 <disable.constprop.6+0x68>
	ret = ull_disable(&adv->lll);
   1bc86:	f104 001c 	add.w	r0, r4, #28
   1bc8a:	f7ff fb0d 	bl	1b2a8 <ull_disable>
	LL_ASSERT(!ret);
   1bc8e:	b158      	cbz	r0, 1bca8 <disable.constprop.6+0xc8>
   1bc90:	f240 72b5 	movw	r2, #1973	; 0x7b5
   1bc94:	4913      	ldr	r1, [pc, #76]	; (1bce4 <disable.constprop.6+0x104>)
   1bc96:	4814      	ldr	r0, [pc, #80]	; (1bce8 <disable.constprop.6+0x108>)
   1bc98:	f00b fe1b 	bl	278d2 <printk>
   1bc9c:	4040      	eors	r0, r0
   1bc9e:	f380 8811 	msr	BASEPRI, r0
   1bca2:	f04f 0003 	mov.w	r0, #3
   1bca6:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   1bca8:	4620      	mov	r0, r4
   1bcaa:	f7ff facd 	bl	1b248 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1bcae:	4284      	cmp	r4, r0
   1bcb0:	d00b      	beq.n	1bcca <disable.constprop.6+0xea>
   1bcb2:	f44f 62f7 	mov.w	r2, #1976	; 0x7b8
   1bcb6:	490b      	ldr	r1, [pc, #44]	; (1bce4 <disable.constprop.6+0x104>)
   1bcb8:	480b      	ldr	r0, [pc, #44]	; (1bce8 <disable.constprop.6+0x108>)
   1bcba:	f00b fe0a 	bl	278d2 <printk>
   1bcbe:	4040      	eors	r0, r0
   1bcc0:	f380 8811 	msr	BASEPRI, r0
   1bcc4:	f04f 0003 	mov.w	r0, #3
   1bcc8:	df02      	svc	2
	if (adv->lll.conn) {
   1bcca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bccc:	b113      	cbz	r3, 1bcd4 <disable.constprop.6+0xf4>
		conn_release(adv);
   1bcce:	4620      	mov	r0, r4
   1bcd0:	f7ff fdcc 	bl	1b86c <conn_release>
	adv->is_enabled = 0U;
   1bcd4:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   1bcd8:	f36f 0300 	bfc	r3, #0, #1
   1bcdc:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	return 0;
   1bce0:	2000      	movs	r0, #0
   1bce2:	e785      	b.n	1bbf0 <disable.constprop.6+0x10>
   1bce4:	00035e34 	.word	0x00035e34
   1bce8:	0003067f 	.word	0x0003067f
   1bcec:	0001ab19 	.word	0x0001ab19

0001bcf0 <ull_adv_data_set>:
{
   1bcf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1bcf4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1bcf8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1bcfc:	4607      	mov	r7, r0
   1bcfe:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   1bd00:	782b      	ldrb	r3, [r5, #0]
   1bd02:	f003 030f 	and.w	r3, r3, #15
   1bd06:	2b01      	cmp	r3, #1
{
   1bd08:	460e      	mov	r6, r1
   1bd0a:	4690      	mov	r8, r2
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   1bd0c:	d047      	beq.n	1bd9e <ull_adv_data_set+0xae>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1bd0e:	291f      	cmp	r1, #31
   1bd10:	d849      	bhi.n	1bda6 <ull_adv_data_set+0xb6>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1bd12:	f100 092c 	add.w	r9, r0, #44	; 0x2c
   1bd16:	f10d 0106 	add.w	r1, sp, #6
   1bd1a:	4648      	mov	r0, r9
   1bd1c:	f002 f832 	bl	1dd84 <lll_adv_pdu_alloc>
   1bd20:	f10d 0107 	add.w	r1, sp, #7
   1bd24:	4604      	mov	r4, r0
   1bd26:	4648      	mov	r0, r9
   1bd28:	f002 f82c 	bl	1dd84 <lll_adv_pdu_alloc>
		__ASSERT((idx == idx_test), "Probable AD Data Corruption.\n");
   1bd2c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1bd30:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bd34:	429a      	cmp	r2, r3
   1bd36:	d00a      	beq.n	1bd4e <ull_adv_data_set+0x5e>
   1bd38:	491c      	ldr	r1, [pc, #112]	; (1bdac <ull_adv_data_set+0xbc>)
   1bd3a:	481d      	ldr	r0, [pc, #116]	; (1bdb0 <ull_adv_data_set+0xc0>)
   1bd3c:	f240 52e4 	movw	r2, #1508	; 0x5e4
   1bd40:	f00b fdc7 	bl	278d2 <printk>
   1bd44:	f240 51e4 	movw	r1, #1508	; 0x5e4
   1bd48:	4818      	ldr	r0, [pc, #96]	; (1bdac <ull_adv_data_set+0xbc>)
   1bd4a:	f00c f83b 	bl	27dc4 <assert_post_action>
	pdu->type = prev->type;
   1bd4e:	782a      	ldrb	r2, [r5, #0]
   1bd50:	7823      	ldrb	r3, [r4, #0]
   1bd52:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0U;
   1bd56:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   1bd5a:	7023      	strb	r3, [r4, #0]
	pdu->tx_addr = prev->tx_addr;
   1bd5c:	782b      	ldrb	r3, [r5, #0]
   1bd5e:	7822      	ldrb	r2, [r4, #0]
   1bd60:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1bd64:	f363 1286 	bfi	r2, r3, #6, #1
   1bd68:	7022      	strb	r2, [r4, #0]
	pdu->rx_addr = prev->rx_addr;
   1bd6a:	782b      	ldrb	r3, [r5, #0]
   1bd6c:	b2d2      	uxtb	r2, r2
   1bd6e:	09db      	lsrs	r3, r3, #7
   1bd70:	f363 12c7 	bfi	r2, r3, #7, #1
   1bd74:	4623      	mov	r3, r4
   1bd76:	4641      	mov	r1, r8
   1bd78:	f803 2b02 	strb.w	r2, [r3], #2
   1bd7c:	f855 2f02 	ldr.w	r2, [r5, #2]!
   1bd80:	f8c4 2002 	str.w	r2, [r4, #2]
   1bd84:	88aa      	ldrh	r2, [r5, #4]
   1bd86:	809a      	strh	r2, [r3, #4]
   1bd88:	f104 0008 	add.w	r0, r4, #8
   1bd8c:	4632      	mov	r2, r6
   1bd8e:	f012 fa8c 	bl	2e2aa <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1bd92:	3606      	adds	r6, #6
	pdu->last = idx;
   1bd94:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1bd98:	7066      	strb	r6, [r4, #1]
   1bd9a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		return 0;
   1bd9e:	2000      	movs	r0, #0
}
   1bda0:	b003      	add	sp, #12
   1bda2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   1bda6:	2012      	movs	r0, #18
   1bda8:	e7fa      	b.n	1bda0 <ull_adv_data_set+0xb0>
   1bdaa:	bf00      	nop
   1bdac:	00035e34 	.word	0x00035e34
   1bdb0:	0003067f 	.word	0x0003067f

0001bdb4 <ll_adv_data_set>:
	return ull_adv_data_set(adv, len, data);
   1bdb4:	460a      	mov	r2, r1
   1bdb6:	4601      	mov	r1, r0
   1bdb8:	4801      	ldr	r0, [pc, #4]	; (1bdc0 <ll_adv_data_set+0xc>)
   1bdba:	f7ff bf99 	b.w	1bcf0 <ull_adv_data_set>
   1bdbe:	bf00      	nop
   1bdc0:	200049e8 	.word	0x200049e8

0001bdc4 <ll_adv_scan_rsp_set>:
	return ull_scan_rsp_set(adv, len, data);
   1bdc4:	460a      	mov	r2, r1
   1bdc6:	4601      	mov	r1, r0
   1bdc8:	4801      	ldr	r0, [pc, #4]	; (1bdd0 <ll_adv_scan_rsp_set+0xc>)
   1bdca:	f010 bdf6 	b.w	2c9ba <ull_scan_rsp_set>
   1bdce:	bf00      	nop
   1bdd0:	200049e8 	.word	0x200049e8

0001bdd4 <ticker_cb>:
	return 0;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, void *param)
{
   1bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bdd6:	4614      	mov	r4, r2
	return ++hdr->ref;
   1bdd8:	7c1a      	ldrb	r2, [r3, #16]
   1bdda:	3201      	adds	r2, #1
   1bddc:	b2d2      	uxtb	r2, r2
   1bdde:	4606      	mov	r6, r0
   1bde0:	460d      	mov	r5, r1
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   1bde2:	f103 071c 	add.w	r7, r3, #28
   1bde6:	741a      	strb	r2, [r3, #16]
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   1bde8:	b95a      	cbnz	r2, 1be02 <ticker_cb+0x2e>
   1bdea:	f240 22c5 	movw	r2, #709	; 0x2c5
   1bdee:	4912      	ldr	r1, [pc, #72]	; (1be38 <ticker_cb+0x64>)
   1bdf0:	4812      	ldr	r0, [pc, #72]	; (1be3c <ticker_cb+0x68>)
   1bdf2:	f00b fd6e 	bl	278d2 <printk>
   1bdf6:	4040      	eors	r0, r0
   1bdf8:	f380 8811 	msr	BASEPRI, r0
   1bdfc:	f04f 0003 	mov.w	r0, #3
   1be00:	df02      	svc	2

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   1be02:	4a0f      	ldr	r2, [pc, #60]	; (1be40 <ticker_cb+0x6c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	mfy.param = &p;
   1be04:	4b0f      	ldr	r3, [pc, #60]	; (1be44 <ticker_cb+0x70>)
	p.lazy = lazy;
   1be06:	8114      	strh	r4, [r2, #8]
	p.remainder = remainder;
   1be08:	e9c2 6500 	strd	r6, r5, [r2]
	p.param = lll;
   1be0c:	60d7      	str	r7, [r2, #12]
	mfy.param = &p;
   1be0e:	609a      	str	r2, [r3, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1be10:	2200      	movs	r2, #0
   1be12:	4611      	mov	r1, r2
   1be14:	2001      	movs	r0, #1
   1be16:	f7fc ffeb 	bl	18df0 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1be1a:	b158      	cbz	r0, 1be34 <ticker_cb+0x60>
   1be1c:	f240 22d1 	movw	r2, #721	; 0x2d1
   1be20:	4905      	ldr	r1, [pc, #20]	; (1be38 <ticker_cb+0x64>)
   1be22:	4806      	ldr	r0, [pc, #24]	; (1be3c <ticker_cb+0x68>)
   1be24:	f00b fd55 	bl	278d2 <printk>
   1be28:	4040      	eors	r0, r0
   1be2a:	f380 8811 	msr	BASEPRI, r0
   1be2e:	f04f 0003 	mov.w	r0, #3
   1be32:	df02      	svc	2

	DEBUG_RADIO_PREPARE_O(1);
}
   1be34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1be36:	bf00      	nop
   1be38:	00035e84 	.word	0x00035e84
   1be3c:	0003067f 	.word	0x0003067f
   1be40:	20004a98 	.word	0x20004a98
   1be44:	200017cc 	.word	0x200017cc

0001be48 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   1be48:	3004      	adds	r0, #4
{
   1be4a:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   1be4c:	f101 021c 	add.w	r2, r1, #28
   1be50:	b2c0      	uxtb	r0, r0
   1be52:	f7ff fa63 	bl	1b31c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1be56:	b170      	cbz	r0, 1be76 <ull_scan_disable+0x2e>
   1be58:	3078      	adds	r0, #120	; 0x78
   1be5a:	d00b      	beq.n	1be74 <ull_scan_disable+0x2c>
   1be5c:	f240 12c7 	movw	r2, #455	; 0x1c7
   1be60:	4905      	ldr	r1, [pc, #20]	; (1be78 <ull_scan_disable+0x30>)
   1be62:	4806      	ldr	r0, [pc, #24]	; (1be7c <ull_scan_disable+0x34>)
   1be64:	f00b fd35 	bl	278d2 <printk>
   1be68:	4040      	eors	r0, r0
   1be6a:	f380 8811 	msr	BASEPRI, r0
   1be6e:	f04f 0003 	mov.w	r0, #3
   1be72:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   1be74:	200c      	movs	r0, #12
}
   1be76:	bd08      	pop	{r3, pc}
   1be78:	00035e84 	.word	0x00035e84
   1be7c:	0003067f 	.word	0x0003067f

0001be80 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   1be80:	6800      	ldr	r0, [r0, #0]
   1be82:	4b03      	ldr	r3, [pc, #12]	; (1be90 <ull_scan_lll_handle_get+0x10>)
   1be84:	1ac0      	subs	r0, r0, r3
   1be86:	233c      	movs	r3, #60	; 0x3c
   1be88:	fbb0 f0f3 	udiv	r0, r0, r3
}
   1be8c:	b2c0      	uxtb	r0, r0
   1be8e:	4770      	bx	lr
   1be90:	20004a5c 	.word	0x20004a5c

0001be94 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   1be94:	b938      	cbnz	r0, 1bea6 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   1be96:	4805      	ldr	r0, [pc, #20]	; (1beac <ull_scan_is_enabled_get+0x18>)
   1be98:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
	return &ll_scan[handle];
   1be9c:	f013 0f01 	tst.w	r3, #1
   1bea0:	bf08      	it	eq
   1bea2:	2000      	moveq	r0, #0
   1bea4:	4770      	bx	lr
		return NULL;
   1bea6:	2000      	movs	r0, #0
}
   1bea8:	4770      	bx	lr
   1beaa:	bf00      	nop
   1beac:	20004a5c 	.word	0x20004a5c

0001beb0 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   1beb0:	4a04      	ldr	r2, [pc, #16]	; (1bec4 <ull_scan_is_disabled_get+0x14>)
   1beb2:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
   1beb6:	f003 0301 	and.w	r3, r3, #1
   1beba:	4303      	orrs	r3, r0
}
   1bebc:	bf0c      	ite	eq
   1bebe:	4610      	moveq	r0, r2
   1bec0:	2000      	movne	r0, #0
   1bec2:	4770      	bx	lr
   1bec4:	20004a5c 	.word	0x20004a5c

0001bec8 <pdu_len_cmp>:
		break;
	}
}

static inline bool pdu_len_cmp(uint8_t opcode, uint8_t len)
{
   1bec8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const uint8_t ctrl_len_lut[] = {
   1beca:	4b0d      	ldr	r3, [pc, #52]	; (1bf00 <pdu_len_cmp+0x38>)
{
   1becc:	b089      	sub	sp, #36	; 0x24
   1bece:	4605      	mov	r5, r0
   1bed0:	460e      	mov	r6, r1
	const uint8_t ctrl_len_lut[] = {
   1bed2:	aa01      	add	r2, sp, #4
   1bed4:	f103 0718 	add.w	r7, r3, #24
   1bed8:	6818      	ldr	r0, [r3, #0]
   1beda:	6859      	ldr	r1, [r3, #4]
   1bedc:	4614      	mov	r4, r2
   1bede:	c403      	stmia	r4!, {r0, r1}
   1bee0:	3308      	adds	r3, #8
   1bee2:	42bb      	cmp	r3, r7
   1bee4:	4622      	mov	r2, r4
   1bee6:	d1f7      	bne.n	1bed8 <pdu_len_cmp+0x10>
   1bee8:	881b      	ldrh	r3, [r3, #0]
   1beea:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
   1beec:	ab08      	add	r3, sp, #32
   1beee:	441d      	add	r5, r3
   1bef0:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
   1bef4:	1b83      	subs	r3, r0, r6
   1bef6:	4258      	negs	r0, r3
   1bef8:	4158      	adcs	r0, r3
   1befa:	b009      	add	sp, #36	; 0x24
   1befc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1befe:	bf00      	nop
   1bf00:	0002f2fa 	.word	0x0002f2fa

0001bf04 <init_reset>:
{
   1bf04:	b508      	push	{r3, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   1bf06:	2203      	movs	r2, #3
   1bf08:	4b0c      	ldr	r3, [pc, #48]	; (1bf3c <init_reset+0x38>)
   1bf0a:	480d      	ldr	r0, [pc, #52]	; (1bf40 <init_reset+0x3c>)
   1bf0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1bf10:	f010 f9a3 	bl	2c25a <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   1bf14:	4b0b      	ldr	r3, [pc, #44]	; (1bf44 <init_reset+0x40>)
   1bf16:	2203      	movs	r2, #3
   1bf18:	1d18      	adds	r0, r3, #4
   1bf1a:	2124      	movs	r1, #36	; 0x24
   1bf1c:	f010 f99d 	bl	2c25a <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   1bf20:	4b09      	ldr	r3, [pc, #36]	; (1bf48 <init_reset+0x44>)
   1bf22:	220c      	movs	r2, #12
   1bf24:	1d18      	adds	r0, r3, #4
   1bf26:	2120      	movs	r1, #32
   1bf28:	f010 f997 	bl	2c25a <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   1bf2c:	4b07      	ldr	r3, [pc, #28]	; (1bf4c <init_reset+0x48>)
   1bf2e:	220f      	movs	r2, #15
   1bf30:	1d18      	adds	r0, r3, #4
   1bf32:	2108      	movs	r1, #8
   1bf34:	f010 f991 	bl	2c25a <mem_init>
}
   1bf38:	2000      	movs	r0, #0
   1bf3a:	bd08      	pop	{r3, pc}
   1bf3c:	20004aa8 	.word	0x20004aa8
   1bf40:	20004aac 	.word	0x20004aac
   1bf44:	20004e44 	.word	0x20004e44
   1bf48:	20004eb4 	.word	0x20004eb4
   1bf4c:	20005038 	.word	0x20005038

0001bf50 <ticker_op_stop_cb>:
{
   1bf50:	b510      	push	{r4, lr}
   1bf52:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1bf54:	b158      	cbz	r0, 1bf6e <ticker_op_stop_cb+0x1e>
   1bf56:	f240 62aa 	movw	r2, #1706	; 0x6aa
   1bf5a:	490f      	ldr	r1, [pc, #60]	; (1bf98 <ticker_op_stop_cb+0x48>)
   1bf5c:	480f      	ldr	r0, [pc, #60]	; (1bf9c <ticker_op_stop_cb+0x4c>)
   1bf5e:	f00b fcb8 	bl	278d2 <printk>
   1bf62:	4040      	eors	r0, r0
   1bf64:	f380 8811 	msr	BASEPRI, r0
   1bf68:	f04f 0003 	mov.w	r0, #3
   1bf6c:	df02      	svc	2
	mfy.param = param;
   1bf6e:	4b0c      	ldr	r3, [pc, #48]	; (1bfa0 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   1bf70:	2200      	movs	r2, #0
   1bf72:	4611      	mov	r1, r2
   1bf74:	2002      	movs	r0, #2
	mfy.param = param;
   1bf76:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   1bf78:	f7fc ff3a 	bl	18df0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1bf7c:	b158      	cbz	r0, 1bf96 <ticker_op_stop_cb+0x46>
   1bf7e:	f240 62b1 	movw	r2, #1713	; 0x6b1
   1bf82:	4905      	ldr	r1, [pc, #20]	; (1bf98 <ticker_op_stop_cb+0x48>)
   1bf84:	4805      	ldr	r0, [pc, #20]	; (1bf9c <ticker_op_stop_cb+0x4c>)
   1bf86:	f00b fca4 	bl	278d2 <printk>
   1bf8a:	4040      	eors	r0, r0
   1bf8c:	f380 8811 	msr	BASEPRI, r0
   1bf90:	f04f 0003 	mov.w	r0, #3
   1bf94:	df02      	svc	2
}
   1bf96:	bd10      	pop	{r4, pc}
   1bf98:	00035ed5 	.word	0x00035ed5
   1bf9c:	0003067f 	.word	0x0003067f
   1bfa0:	20001894 	.word	0x20001894

0001bfa4 <ticker_start_conn_op_cb>:
{
   1bfa4:	b510      	push	{r4, lr}
   1bfa6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1bfa8:	b158      	cbz	r0, 1bfc2 <ticker_start_conn_op_cb+0x1e>
   1bfaa:	f240 629e 	movw	r2, #1694	; 0x69e
   1bfae:	490e      	ldr	r1, [pc, #56]	; (1bfe8 <ticker_start_conn_op_cb+0x44>)
   1bfb0:	480e      	ldr	r0, [pc, #56]	; (1bfec <ticker_start_conn_op_cb+0x48>)
   1bfb2:	f00b fc8e 	bl	278d2 <printk>
   1bfb6:	4040      	eors	r0, r0
   1bfb8:	f380 8811 	msr	BASEPRI, r0
   1bfbc:	f04f 0003 	mov.w	r0, #3
   1bfc0:	df02      	svc	2
	p = ull_update_unmark(param);
   1bfc2:	4620      	mov	r0, r4
   1bfc4:	f7ff f95c 	bl	1b280 <ull_update_unmark>
	LL_ASSERT(p == param);
   1bfc8:	4284      	cmp	r4, r0
   1bfca:	d00b      	beq.n	1bfe4 <ticker_start_conn_op_cb+0x40>
   1bfcc:	f240 62a1 	movw	r2, #1697	; 0x6a1
   1bfd0:	4905      	ldr	r1, [pc, #20]	; (1bfe8 <ticker_start_conn_op_cb+0x44>)
   1bfd2:	4806      	ldr	r0, [pc, #24]	; (1bfec <ticker_start_conn_op_cb+0x48>)
   1bfd4:	f00b fc7d 	bl	278d2 <printk>
   1bfd8:	4040      	eors	r0, r0
   1bfda:	f380 8811 	msr	BASEPRI, r0
   1bfde:	f04f 0003 	mov.w	r0, #3
   1bfe2:	df02      	svc	2
}
   1bfe4:	bd10      	pop	{r4, pc}
   1bfe6:	bf00      	nop
   1bfe8:	00035ed5 	.word	0x00035ed5
   1bfec:	0003067f 	.word	0x0003067f

0001bff0 <ticker_stop_conn_op_cb>:
{
   1bff0:	b510      	push	{r4, lr}
   1bff2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1bff4:	b158      	cbz	r0, 1c00e <ticker_stop_conn_op_cb+0x1e>
   1bff6:	f240 6294 	movw	r2, #1684	; 0x694
   1bffa:	490e      	ldr	r1, [pc, #56]	; (1c034 <ticker_stop_conn_op_cb+0x44>)
   1bffc:	480e      	ldr	r0, [pc, #56]	; (1c038 <ticker_stop_conn_op_cb+0x48>)
   1bffe:	f00b fc68 	bl	278d2 <printk>
   1c002:	4040      	eors	r0, r0
   1c004:	f380 8811 	msr	BASEPRI, r0
   1c008:	f04f 0003 	mov.w	r0, #3
   1c00c:	df02      	svc	2
	p = ull_update_mark(param);
   1c00e:	4620      	mov	r0, r4
   1c010:	f7ff f92e 	bl	1b270 <ull_update_mark>
	LL_ASSERT(p == param);
   1c014:	4284      	cmp	r4, r0
   1c016:	d00b      	beq.n	1c030 <ticker_stop_conn_op_cb+0x40>
   1c018:	f240 6297 	movw	r2, #1687	; 0x697
   1c01c:	4905      	ldr	r1, [pc, #20]	; (1c034 <ticker_stop_conn_op_cb+0x44>)
   1c01e:	4806      	ldr	r0, [pc, #24]	; (1c038 <ticker_stop_conn_op_cb+0x48>)
   1c020:	f00b fc57 	bl	278d2 <printk>
   1c024:	4040      	eors	r0, r0
   1c026:	f380 8811 	msr	BASEPRI, r0
   1c02a:	f04f 0003 	mov.w	r0, #3
   1c02e:	df02      	svc	2
}
   1c030:	bd10      	pop	{r4, pc}
   1c032:	bf00      	nop
   1c034:	00035ed5 	.word	0x00035ed5
   1c038:	0003067f 	.word	0x0003067f

0001c03c <ticker_update_conn_op_cb>:
{
   1c03c:	b510      	push	{r4, lr}
   1c03e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1c040:	b198      	cbz	r0, 1c06a <ticker_update_conn_op_cb+0x2e>
   1c042:	f7ff f92b 	bl	1b29c <ull_update_mark_get>
   1c046:	4284      	cmp	r4, r0
   1c048:	d00f      	beq.n	1c06a <ticker_update_conn_op_cb+0x2e>
   1c04a:	f7ff f90b 	bl	1b264 <ull_disable_mark_get>
   1c04e:	4284      	cmp	r4, r0
   1c050:	d00b      	beq.n	1c06a <ticker_update_conn_op_cb+0x2e>
   1c052:	f240 628d 	movw	r2, #1677	; 0x68d
   1c056:	4905      	ldr	r1, [pc, #20]	; (1c06c <ticker_update_conn_op_cb+0x30>)
   1c058:	4805      	ldr	r0, [pc, #20]	; (1c070 <ticker_update_conn_op_cb+0x34>)
   1c05a:	f00b fc3a 	bl	278d2 <printk>
   1c05e:	4040      	eors	r0, r0
   1c060:	f380 8811 	msr	BASEPRI, r0
   1c064:	f04f 0003 	mov.w	r0, #3
   1c068:	df02      	svc	2
}
   1c06a:	bd10      	pop	{r4, pc}
   1c06c:	00035ed5 	.word	0x00035ed5
   1c070:	0003067f 	.word	0x0003067f

0001c074 <feature_rsp_send.isra.9>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1c074:	b570      	push	{r4, r5, r6, lr}
   1c076:	4605      	mov	r5, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1c078:	481b      	ldr	r0, [pc, #108]	; (1c0e8 <feature_rsp_send.isra.9+0x74>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1c07a:	460e      	mov	r6, r1
   1c07c:	4614      	mov	r4, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1c07e:	f010 f905 	bl	2c28c <mem_acquire>
	if (!tx) {
   1c082:	4601      	mov	r1, r0
   1c084:	b368      	cbz	r0, 1c0e2 <feature_rsp_send.isra.9+0x6e>
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1c086:	3404      	adds	r4, #4
   1c088:	4620      	mov	r0, r4
   1c08a:	f010 fd4e 	bl	2cb2a <feat_get>
   1c08e:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1c092:	4018      	ands	r0, r3
   1c094:	f8c5 00b8 	str.w	r0, [r5, #184]	; 0xb8
		feat_land_octet0(feat_get(&req->features[0]), LL_FEAT);
   1c098:	4620      	mov	r0, r4
   1c09a:	f010 fd46 	bl	2cb2a <feat_get>
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1c09e:	4b13      	ldr	r3, [pc, #76]	; (1c0ec <feature_rsp_send.isra.9+0x78>)
   1c0a0:	4003      	ands	r3, r0
	conn->llcp_feature.features_peer =
   1c0a2:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	conn->common.fex_valid = 1U;
   1c0a6:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
   1c0aa:	f043 0301 	orr.w	r3, r3, #1
   1c0ae:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c0b2:	790b      	ldrb	r3, [r1, #4]
   1c0b4:	f043 0303 	orr.w	r3, r3, #3
__ssp_bos_icheck3(memset, void *, int)
   1c0b8:	2400      	movs	r4, #0
   1c0ba:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1c0bc:	2309      	movs	r3, #9
   1c0be:	608c      	str	r4, [r1, #8]
   1c0c0:	714b      	strb	r3, [r1, #5]
   1c0c2:	60cc      	str	r4, [r1, #12]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1c0c4:	71cb      	strb	r3, [r1, #7]
	feat_result = feat_to_keep & feat_octet0;
   1c0c6:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1c0ca:	724c      	strb	r4, [r1, #9]
   1c0cc:	f003 038e 	and.w	r3, r3, #142	; 0x8e
	dst[0] = val;
   1c0d0:	720b      	strb	r3, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   1c0d2:	4628      	mov	r0, r5
	dst[2] = val >> 16;
   1c0d4:	728c      	strb	r4, [r1, #10]
   1c0d6:	f010 fd36 	bl	2cb46 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c0da:	2301      	movs	r3, #1
   1c0dc:	7033      	strb	r3, [r6, #0]
	return 0;
   1c0de:	4620      	mov	r0, r4
}
   1c0e0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1c0e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c0e6:	e7fb      	b.n	1c0e0 <feature_rsp_send.isra.9+0x6c>
   1c0e8:	20004eb4 	.word	0x20004eb4
   1c0ec:	0001ff8e 	.word	0x0001ff8e

0001c0f0 <reject_ext_ind_send.isra.5>:
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1c0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c0f2:	4605      	mov	r5, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1c0f4:	480d      	ldr	r0, [pc, #52]	; (1c12c <reject_ext_ind_send.isra.5+0x3c>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1c0f6:	460c      	mov	r4, r1
   1c0f8:	4617      	mov	r7, r2
   1c0fa:	461e      	mov	r6, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1c0fc:	f010 f8c6 	bl	2c28c <mem_acquire>
	if (!tx) {
   1c100:	4601      	mov	r1, r0
   1c102:	b180      	cbz	r0, 1c126 <reject_ext_ind_send.isra.5+0x36>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c104:	7900      	ldrb	r0, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1c106:	720f      	strb	r7, [r1, #8]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1c108:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c10a:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1c10e:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1c110:	2311      	movs	r3, #17
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c112:	7108      	strb	r0, [r1, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1c114:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, tx);
   1c116:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1c118:	724e      	strb	r6, [r1, #9]
	ctrl_tx_enqueue(conn, tx);
   1c11a:	f010 fd14 	bl	2cb46 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c11e:	2301      	movs	r3, #1
   1c120:	7023      	strb	r3, [r4, #0]
	return 0;
   1c122:	2000      	movs	r0, #0
}
   1c124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1c126:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c12a:	e7fb      	b.n	1c124 <reject_ext_ind_send.isra.5+0x34>
   1c12c:	20004eb4 	.word	0x20004eb4

0001c130 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   1c130:	4801      	ldr	r0, [pc, #4]	; (1c138 <ll_conn_acquire+0x8>)
   1c132:	f010 b8ab 	b.w	2c28c <mem_acquire>
   1c136:	bf00      	nop
   1c138:	20004aa8 	.word	0x20004aa8

0001c13c <ll_conn_release>:
	mem_release(conn, &conn_free);
   1c13c:	4901      	ldr	r1, [pc, #4]	; (1c144 <ll_conn_release+0x8>)
   1c13e:	f010 b8b6 	b.w	2c2ae <mem_release>
   1c142:	bf00      	nop
   1c144:	20004aa8 	.word	0x20004aa8

0001c148 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1c148:	f44f 7296 	mov.w	r2, #300	; 0x12c
   1c14c:	4901      	ldr	r1, [pc, #4]	; (1c154 <ll_conn_handle_get+0xc>)
   1c14e:	f010 b8c2 	b.w	2c2d6 <mem_index_get>
   1c152:	bf00      	nop
   1c154:	20004aac 	.word	0x20004aac

0001c158 <tx_lll_flush>:
{
   1c158:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   1c15c:	6805      	ldr	r5, [r0, #0]
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1c15e:	4c31      	ldr	r4, [pc, #196]	; (1c224 <tx_lll_flush+0xcc>)
{
   1c160:	4606      	mov	r6, r0
	uint16_t handle = ll_conn_handle_get(conn);
   1c162:	4628      	mov	r0, r5
   1c164:	f7ff fff0 	bl	1c148 <ll_conn_handle_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1c168:	f106 0740 	add.w	r7, r6, #64	; 0x40
	lll_conn_flush(handle, lll);
   1c16c:	4631      	mov	r1, r6
   1c16e:	f011 f816 	bl	2d19e <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1c172:	aa01      	add	r2, sp, #4
   1c174:	4639      	mov	r1, r7
   1c176:	6c70      	ldr	r0, [r6, #68]	; 0x44
   1c178:	f010 f8e9 	bl	2c34e <memq_dequeue>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1c17c:	f104 0804 	add.w	r8, r4, #4
	while (link) {
   1c180:	b9e8      	cbnz	r0, 1c1be <tx_lll_flush+0x66>
	LL_ASSERT(rx->hdr.link);
   1c182:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
	rx = (void *)&conn->llcp_terminate.node_rx;
   1c186:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
	LL_ASSERT(rx->hdr.link);
   1c18a:	b95b      	cbnz	r3, 1c1a4 <tx_lll_flush+0x4c>
   1c18c:	f240 725d 	movw	r2, #1885	; 0x75d
   1c190:	4925      	ldr	r1, [pc, #148]	; (1c228 <tx_lll_flush+0xd0>)
   1c192:	4826      	ldr	r0, [pc, #152]	; (1c22c <tx_lll_flush+0xd4>)
   1c194:	f00b fb9d 	bl	278d2 <printk>
   1c198:	4040      	eors	r0, r0
   1c19a:	f380 8811 	msr	BASEPRI, r0
   1c19e:	f04f 0003 	mov.w	r0, #3
   1c1a2:	df02      	svc	2
	rx->hdr.link = NULL;
   1c1a4:	2300      	movs	r3, #0
	link = rx->hdr.link;
   1c1a6:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
	rx->hdr.link = NULL;
   1c1aa:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	ull_rx_put(link, rx);
   1c1ae:	4621      	mov	r1, r4
   1c1b0:	f7ff f916 	bl	1b3e0 <ull_rx_put>
	ull_rx_sched();
   1c1b4:	f7ff f924 	bl	1b400 <ull_rx_sched>
}
   1c1b8:	b002      	add	sp, #8
   1c1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1c1be:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   1c1c0:	f894 e001 	ldrb.w	lr, [r4, #1]
   1c1c4:	f894 c002 	ldrb.w	ip, [r4, #2]
   1c1c8:	7821      	ldrb	r1, [r4, #0]
	last = last + 1;
   1c1ca:	1c53      	adds	r3, r2, #1
   1c1cc:	b2db      	uxtb	r3, r3
		last = 0U;
   1c1ce:	459e      	cmp	lr, r3
   1c1d0:	bf08      	it	eq
   1c1d2:	2300      	moveq	r3, #0
	if (last == first) {
   1c1d4:	459c      	cmp	ip, r3
   1c1d6:	d004      	beq.n	1c1e2 <tx_lll_flush+0x8a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1c1d8:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   1c1dc:	eb18 0c02 	adds.w	ip, r8, r2
   1c1e0:	d10e      	bne.n	1c200 <tx_lll_flush+0xa8>
   1c1e2:	f240 7249 	movw	r2, #1865	; 0x749
   1c1e6:	4910      	ldr	r1, [pc, #64]	; (1c228 <tx_lll_flush+0xd0>)
   1c1e8:	4810      	ldr	r0, [pc, #64]	; (1c22c <tx_lll_flush+0xd4>)
   1c1ea:	f00b fb72 	bl	278d2 <printk>
   1c1ee:	4040      	eors	r0, r0
   1c1f0:	f380 8811 	msr	BASEPRI, r0
   1c1f4:	f04f 0003 	mov.w	r0, #3
   1c1f8:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   1c1fa:	2300      	movs	r3, #0
   1c1fc:	801b      	strh	r3, [r3, #0]
   1c1fe:	deff      	udf	#255	; 0xff
   1c200:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c204:	f828 1002 	strh.w	r1, [r8, r2]
		lll_tx->node = tx;
   1c208:	9901      	ldr	r1, [sp, #4]
   1c20a:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1c20e:	680a      	ldr	r2, [r1, #0]
   1c210:	6002      	str	r2, [r0, #0]
		tx->next = link;
   1c212:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1c214:	aa01      	add	r2, sp, #4
	*last = idx; /* Commit: Update write index */
   1c216:	70e3      	strb	r3, [r4, #3]
   1c218:	4639      	mov	r1, r7
   1c21a:	6c70      	ldr	r0, [r6, #68]	; 0x44
   1c21c:	f010 f897 	bl	2c34e <memq_dequeue>
   1c220:	e7ae      	b.n	1c180 <tx_lll_flush+0x28>
   1c222:	bf00      	nop
   1c224:	200017dc 	.word	0x200017dc
   1c228:	00035ed5 	.word	0x00035ed5
   1c22c:	0003067f 	.word	0x0003067f

0001c230 <ll_conn_get>:
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1c230:	4602      	mov	r2, r0
   1c232:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1c236:	4801      	ldr	r0, [pc, #4]	; (1c23c <ll_conn_get+0xc>)
   1c238:	f010 b84a 	b.w	2c2d0 <mem_get>
   1c23c:	20004aac 	.word	0x20004aac

0001c240 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   1c240:	4801      	ldr	r0, [pc, #4]	; (1c248 <ll_tx_mem_acquire+0x8>)
   1c242:	f010 b823 	b.w	2c28c <mem_acquire>
   1c246:	bf00      	nop
   1c248:	20004e44 	.word	0x20004e44

0001c24c <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   1c24c:	4901      	ldr	r1, [pc, #4]	; (1c254 <ll_tx_mem_release+0x8>)
   1c24e:	f010 b82e 	b.w	2c2ae <mem_release>
   1c252:	bf00      	nop
   1c254:	20004e44 	.word	0x20004e44

0001c258 <ll_tx_mem_enqueue>:
{
   1c258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c25c:	4606      	mov	r6, r0
   1c25e:	4688      	mov	r8, r1
	conn = ll_connected_get(handle);
   1c260:	f010 fc96 	bl	2cb90 <ll_connected_get>
	if (!conn) {
   1c264:	4604      	mov	r4, r0
   1c266:	b338      	cbz	r0, 1c2b8 <ll_tx_mem_enqueue+0x60>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1c268:	4a17      	ldr	r2, [pc, #92]	; (1c2c8 <ll_tx_mem_enqueue+0x70>)
   1c26a:	78d0      	ldrb	r0, [r2, #3]
	if (last == count) {
   1c26c:	7857      	ldrb	r7, [r2, #1]
   1c26e:	7895      	ldrb	r5, [r2, #2]
   1c270:	7811      	ldrb	r1, [r2, #0]
	last = last + 1;
   1c272:	1c43      	adds	r3, r0, #1
   1c274:	b2db      	uxtb	r3, r3
		last = 0U;
   1c276:	429f      	cmp	r7, r3
   1c278:	bf08      	it	eq
   1c27a:	2300      	moveq	r3, #0
	if (last == first) {
   1c27c:	429d      	cmp	r5, r3
   1c27e:	d01f      	beq.n	1c2c0 <ll_tx_mem_enqueue+0x68>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1c280:	1d15      	adds	r5, r2, #4
   1c282:	fb10 f001 	smulbb	r0, r0, r1
	if (!lll_tx) {
   1c286:	182f      	adds	r7, r5, r0
   1c288:	d01a      	beq.n	1c2c0 <ll_tx_mem_enqueue+0x68>
	lll_tx->handle = handle;
   1c28a:	522e      	strh	r6, [r5, r0]
	lll_tx->node = tx;
   1c28c:	f8c7 8004 	str.w	r8, [r7, #4]
	*last = idx; /* Commit: Update write index */
   1c290:	70d3      	strb	r3, [r2, #3]
	return hdr->ref;
   1c292:	7c23      	ldrb	r3, [r4, #16]
	if (ull_ref_get(&conn->ull)) {
   1c294:	b133      	cbz	r3, 1c2a4 <ll_tx_mem_enqueue+0x4c>
		mfy.param = conn;
   1c296:	4b0d      	ldr	r3, [pc, #52]	; (1c2cc <ll_tx_mem_enqueue+0x74>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   1c298:	2200      	movs	r2, #0
   1c29a:	2101      	movs	r1, #1
   1c29c:	2003      	movs	r0, #3
		mfy.param = conn;
   1c29e:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   1c2a0:	f7fc fda6 	bl	18df0 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1c2a4:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1c2a8:	2b00      	cmp	r3, #0
   1c2aa:	da03      	bge.n	1c2b4 <ll_tx_mem_enqueue+0x5c>
		ull_slave_latency_cancel(conn, handle);
   1c2ac:	4631      	mov	r1, r6
   1c2ae:	4620      	mov	r0, r4
   1c2b0:	f001 f858 	bl	1d364 <ull_slave_latency_cancel>
	return 0;
   1c2b4:	2000      	movs	r0, #0
   1c2b6:	e001      	b.n	1c2bc <ll_tx_mem_enqueue+0x64>
		return -EINVAL;
   1c2b8:	f06f 0015 	mvn.w	r0, #21
}
   1c2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   1c2c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c2c4:	e7fa      	b.n	1c2bc <ll_tx_mem_enqueue+0x64>
   1c2c6:	bf00      	nop
   1c2c8:	20001860 	.word	0x20001860
   1c2cc:	20001884 	.word	0x20001884

0001c2d0 <ull_conn_reset>:
{
   1c2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(err == 0 || err == -EALREADY);
   1c2d2:	4e16      	ldr	r6, [pc, #88]	; (1c32c <ull_conn_reset+0x5c>)
   1c2d4:	4f16      	ldr	r7, [pc, #88]	; (1c330 <ull_conn_reset+0x60>)
{
   1c2d6:	2400      	movs	r4, #0
	conn = ll_conn_get(handle);
   1c2d8:	b2a0      	uxth	r0, r4
   1c2da:	f7ff ffa9 	bl	1c230 <ll_conn_get>
   1c2de:	4605      	mov	r5, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   1c2e0:	1d60      	adds	r0, r4, #5
   1c2e2:	f105 021c 	add.w	r2, r5, #28
   1c2e6:	4629      	mov	r1, r5
   1c2e8:	b2c0      	uxtb	r0, r0
   1c2ea:	f7ff f817 	bl	1b31c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1c2ee:	b168      	cbz	r0, 1c30c <ull_conn_reset+0x3c>
   1c2f0:	3078      	adds	r0, #120	; 0x78
   1c2f2:	d00b      	beq.n	1c30c <ull_conn_reset+0x3c>
   1c2f4:	f240 62bd 	movw	r2, #1725	; 0x6bd
   1c2f8:	4631      	mov	r1, r6
   1c2fa:	4638      	mov	r0, r7
   1c2fc:	f00b fae9 	bl	278d2 <printk>
   1c300:	4040      	eors	r0, r0
   1c302:	f380 8811 	msr	BASEPRI, r0
   1c306:	f04f 0003 	mov.w	r0, #3
   1c30a:	df02      	svc	2
	conn->lll.link_tx_free = NULL;
   1c30c:	3401      	adds	r4, #1
   1c30e:	2300      	movs	r3, #0
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   1c310:	2c03      	cmp	r4, #3
	conn->lll.link_tx_free = NULL;
   1c312:	66eb      	str	r3, [r5, #108]	; 0x6c
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   1c314:	d1e0      	bne.n	1c2d8 <ull_conn_reset+0x8>
	MFIFO_INIT(conn_tx);
   1c316:	4a07      	ldr	r2, [pc, #28]	; (1c334 <ull_conn_reset+0x64>)
   1c318:	8053      	strh	r3, [r2, #2]
	MFIFO_INIT(conn_ack);
   1c31a:	4a07      	ldr	r2, [pc, #28]	; (1c338 <ull_conn_reset+0x68>)
   1c31c:	8053      	strh	r3, [r2, #2]
	conn_upd_curr = NULL;
   1c31e:	4a07      	ldr	r2, [pc, #28]	; (1c33c <ull_conn_reset+0x6c>)
   1c320:	6013      	str	r3, [r2, #0]
}
   1c322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	err = init_reset();
   1c326:	f7ff bded 	b.w	1bf04 <init_reset>
   1c32a:	bf00      	nop
   1c32c:	00035ed5 	.word	0x00035ed5
   1c330:	0003067f 	.word	0x0003067f
   1c334:	20001860 	.word	0x20001860
   1c338:	200017dc 	.word	0x200017dc
   1c33c:	20004e30 	.word	0x20004e30

0001c340 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   1c340:	688b      	ldr	r3, [r1, #8]
   1c342:	689b      	ldr	r3, [r3, #8]
{
   1c344:	b510      	push	{r4, lr}
	switch (lll->role) {
   1c346:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   1c34a:	09e4      	lsrs	r4, r4, #7
{
   1c34c:	460a      	mov	r2, r1
	switch (lll->role) {
   1c34e:	d004      	beq.n	1c35a <ull_conn_setup+0x1a>
		ull_slave_setup(link, rx, ftr, lll);
   1c350:	3208      	adds	r2, #8
}
   1c352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   1c356:	f7e6 bcdb 	b.w	2d10 <ull_slave_setup>
		LL_ASSERT(0);
   1c35a:	f240 321b 	movw	r2, #795	; 0x31b
   1c35e:	4905      	ldr	r1, [pc, #20]	; (1c374 <ull_conn_setup+0x34>)
   1c360:	4805      	ldr	r0, [pc, #20]	; (1c378 <ull_conn_setup+0x38>)
   1c362:	f00b fab6 	bl	278d2 <printk>
   1c366:	4040      	eors	r0, r0
   1c368:	f380 8811 	msr	BASEPRI, r0
   1c36c:	f04f 0003 	mov.w	r0, #3
   1c370:	df02      	svc	2
}
   1c372:	bd10      	pop	{r4, pc}
   1c374:	00035ed5 	.word	0x00035ed5
   1c378:	0003067f 	.word	0x0003067f

0001c37c <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   1c37c:	680b      	ldr	r3, [r1, #0]
{
   1c37e:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c382:	4607      	mov	r7, r0
	conn = ll_connected_get((*rx)->hdr.handle);
   1c384:	88d8      	ldrh	r0, [r3, #6]
{
   1c386:	460e      	mov	r6, r1
	conn = ll_connected_get((*rx)->hdr.handle);
   1c388:	f010 fc02 	bl	2cb90 <ll_connected_get>
	if (!conn) {
   1c38c:	6835      	ldr	r5, [r6, #0]
   1c38e:	4604      	mov	r4, r0
   1c390:	b910      	cbnz	r0, 1c398 <ull_conn_rx+0x1c>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c392:	2301      	movs	r3, #1
   1c394:	712b      	strb	r3, [r5, #4]
	return 0;
   1c396:	e049      	b.n	1c42c <ull_conn_rx+0xb0>
	switch (pdu_rx->ll_id) {
   1c398:	7f28      	ldrb	r0, [r5, #28]
   1c39a:	f3c0 0001 	ubfx	r0, r0, #0, #2
   1c39e:	b2c3      	uxtb	r3, r0
   1c3a0:	b240      	sxtb	r0, r0
   1c3a2:	2800      	cmp	r0, #0
   1c3a4:	f000 846a 	beq.w	1cc7c <ull_conn_rx+0x900>
   1c3a8:	2b02      	cmp	r3, #2
   1c3aa:	d93f      	bls.n	1c42c <ull_conn_rx+0xb0>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   1c3ac:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   1c3b0:	f105 091c 	add.w	r9, r5, #28

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   1c3b4:	f1b8 0f11 	cmp.w	r8, #17
   1c3b8:	f200 844a 	bhi.w	1cc50 <ull_conn_rx+0x8d4>
   1c3bc:	e8df f018 	tbh	[pc, r8, lsl #1]
   1c3c0:	008a0012 	.word	0x008a0012
   1c3c4:	044800bc 	.word	0x044800bc
   1c3c8:	04480448 	.word	0x04480448
   1c3cc:	03bc0448 	.word	0x03bc0448
   1c3d0:	00e400c8 	.word	0x00e400c8
   1c3d4:	04480448 	.word	0x04480448
   1c3d8:	04480106 	.word	0x04480106
   1c3dc:	015e00dc 	.word	0x015e00dc
   1c3e0:	035e02cc 	.word	0x035e02cc
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   1c3e4:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1c3e8:	2b00      	cmp	r3, #0
   1c3ea:	f280 8431 	bge.w	1cc50 <ull_conn_rx+0x8d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   1c3ee:	7f69      	ldrb	r1, [r5, #29]
   1c3f0:	2000      	movs	r0, #0
   1c3f2:	f7ff fd69 	bl	1bec8 <pdu_len_cmp>
		if (!conn->lll.role ||
   1c3f6:	2800      	cmp	r0, #0
   1c3f8:	f000 842a 	beq.w	1cc50 <ull_conn_rx+0x8d4>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   1c3fc:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   1c400:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   1c402:	1ad3      	subs	r3, r2, r3
   1c404:	041b      	lsls	r3, r3, #16
   1c406:	d503      	bpl.n	1c410 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c408:	2301      	movs	r3, #1
   1c40a:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   1c40c:	2328      	movs	r3, #40	; 0x28
   1c40e:	e00b      	b.n	1c428 <ull_conn_rx+0xac>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1c410:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1c414:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
   1c418:	1a5b      	subs	r3, r3, r1
   1c41a:	f003 0303 	and.w	r3, r3, #3
   1c41e:	2b02      	cmp	r3, #2
   1c420:	d106      	bne.n	1c430 <ull_conn_rx+0xb4>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c422:	2301      	movs	r3, #1
   1c424:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   1c426:	232a      	movs	r3, #42	; 0x2a
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = chan_map_upd_recv(conn, *rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_peer = err;
   1c428:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
	return 0;
   1c42c:	2000      	movs	r0, #0
   1c42e:	e0e0      	b.n	1c5f2 <ull_conn_rx+0x276>
	if (!conn_upd_curr) {
   1c430:	4bc3      	ldr	r3, [pc, #780]	; (1c740 <ull_conn_rx+0x3c4>)
   1c432:	6819      	ldr	r1, [r3, #0]
   1c434:	b901      	cbnz	r1, 1c438 <ull_conn_rx+0xbc>
		conn_upd_curr = conn;
   1c436:	601c      	str	r4, [r3, #0]
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   1c438:	f895 3020 	ldrb.w	r3, [r5, #32]
   1c43c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   1c440:	f8b5 1021 	ldrh.w	r1, [r5, #33]	; 0x21
   1c444:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1c448:	434b      	muls	r3, r1
	conn->llcp_cu.win_offset_us =
   1c44a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   1c44e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   1c452:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1c456:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   1c45a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   1c45e:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   1c462:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   1c466:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   1c46a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1c46e:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   1c472:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   1c476:	f8a4 2090 	strh.w	r2, [r4, #144]	; 0x90
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1c47a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.timeout =
   1c47e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1c482:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
   1c486:	f023 0307 	bic.w	r3, r3, #7
   1c48a:	f043 0304 	orr.w	r3, r3, #4
   1c48e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
	conn->llcp_cu.ack--;
   1c492:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1c496:	3b01      	subs	r3, #1
   1c498:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
	link->mem = conn->llcp_rx;
   1c49c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   1c4a0:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   1c4a2:	6833      	ldr	r3, [r6, #0]
   1c4a4:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   1c4a6:	6833      	ldr	r3, [r6, #0]
   1c4a8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	*rx = NULL;
   1c4ac:	2300      	movs	r3, #0
   1c4ae:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1c4b0:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   1c4b4:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   1c4b8:	4293      	cmp	r3, r2
   1c4ba:	d007      	beq.n	1c4cc <ull_conn_rx+0x150>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   1c4bc:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1c4c0:	f003 0307 	and.w	r3, r3, #7
   1c4c4:	2b04      	cmp	r3, #4
   1c4c6:	d101      	bne.n	1c4cc <ull_conn_rx+0x150>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1c4c8:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   1c4cc:	2000      	movs	r0, #0
   1c4ce:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
		break;
   1c4d2:	e08e      	b.n	1c5f2 <ull_conn_rx+0x276>
		if (!conn->lll.role ||
   1c4d4:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1c4d8:	2b00      	cmp	r3, #0
   1c4da:	f280 83b9 	bge.w	1cc50 <ull_conn_rx+0x8d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   1c4de:	7f69      	ldrb	r1, [r5, #29]
   1c4e0:	2001      	movs	r0, #1
   1c4e2:	f7ff fcf1 	bl	1bec8 <pdu_len_cmp>
		if (!conn->lll.role ||
   1c4e6:	2800      	cmp	r0, #0
   1c4e8:	f000 83b2 	beq.w	1cc50 <ull_conn_rx+0x8d4>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1c4ec:	f8b5 1025 	ldrh.w	r1, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   1c4f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   1c4f2:	1acb      	subs	r3, r1, r3
   1c4f4:	0418      	lsls	r0, r3, #16
   1c4f6:	d487      	bmi.n	1c408 <ull_conn_rx+0x8c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1c4f8:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
   1c4fc:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1c500:	1a9b      	subs	r3, r3, r2
   1c502:	f003 0303 	and.w	r3, r3, #3
   1c506:	2b02      	cmp	r3, #2
   1c508:	d08b      	beq.n	1c422 <ull_conn_rx+0xa6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c50a:	462b      	mov	r3, r5
	conn->llcp_ack -= 2U;
   1c50c:	3a02      	subs	r2, #2
   1c50e:	f853 0f20 	ldr.w	r0, [r3, #32]!
   1c512:	f8c4 0091 	str.w	r0, [r4, #145]	; 0x91
   1c516:	791b      	ldrb	r3, [r3, #4]
   1c518:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
	conn->llcp.chan_map.initiate = 0U;
   1c51c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
	conn->llcp.chan_map.instant = instant;
   1c520:	f8a4 1096 	strh.w	r1, [r4, #150]	; 0x96
	conn->llcp.chan_map.initiate = 0U;
   1c524:	f36f 0300 	bfc	r3, #0, #1
   1c528:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
	conn->llcp_type = LLCP_CHAN_MAP;
   1c52c:	2302      	movs	r3, #2
   1c52e:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	conn->llcp_ack -= 2U;
   1c532:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c536:	e72c      	b.n	1c392 <ull_conn_rx+0x16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   1c538:	7f69      	ldrb	r1, [r5, #29]
   1c53a:	2002      	movs	r0, #2
   1c53c:	f7ff fcc4 	bl	1bec8 <pdu_len_cmp>
   1c540:	2800      	cmp	r0, #0
   1c542:	f000 8385 	beq.w	1cc50 <ull_conn_rx+0x8d4>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   1c546:	f895 3020 	ldrb.w	r3, [r5, #32]
   1c54a:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c54e:	e720      	b.n	1c392 <ull_conn_rx+0x16>
		if (!conn->lll.role ||
   1c550:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1c554:	2b00      	cmp	r3, #0
   1c556:	f280 837b 	bge.w	1cc50 <ull_conn_rx+0x8d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   1c55a:	7f69      	ldrb	r1, [r5, #29]
   1c55c:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   1c55e:	f7ff fcb3 	bl	1bec8 <pdu_len_cmp>
		if (conn->lll.role ||
   1c562:	2800      	cmp	r0, #0
   1c564:	f000 8374 	beq.w	1cc50 <ull_conn_rx+0x8d4>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   1c568:	464a      	mov	r2, r9
   1c56a:	1d29      	adds	r1, r5, #4
   1c56c:	4620      	mov	r0, r4
}
   1c56e:	b001      	add	sp, #4
   1c570:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   1c574:	f7ff bd7e 	b.w	1c074 <feature_rsp_send.isra.9>
		if (conn->lll.role ||
   1c578:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1c57c:	2b00      	cmp	r3, #0
   1c57e:	f2c0 8367 	blt.w	1cc50 <ull_conn_rx+0x8d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   1c582:	7f69      	ldrb	r1, [r5, #29]
   1c584:	200e      	movs	r0, #14
   1c586:	e7ea      	b.n	1c55e <ull_conn_rx+0x1e2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   1c588:	7f69      	ldrb	r1, [r5, #29]
   1c58a:	2009      	movs	r0, #9
   1c58c:	f7ff fc9c 	bl	1bec8 <pdu_len_cmp>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   1c590:	2800      	cmp	r0, #0
   1c592:	f000 835d 	beq.w	1cc50 <ull_conn_rx+0x8d4>
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1c596:	3520      	adds	r5, #32
   1c598:	4628      	mov	r0, r5
   1c59a:	f010 fac6 	bl	2cb2a <feat_get>
   1c59e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1c5a2:	4018      	ands	r0, r3
   1c5a4:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		feat_land_octet0(feat_get(&rsp->features[0]), LL_FEAT);
   1c5a8:	4628      	mov	r0, r5
   1c5aa:	f010 fabe 	bl	2cb2a <feat_get>
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1c5ae:	4b65      	ldr	r3, [pc, #404]	; (1c744 <ull_conn_rx+0x3c8>)
   1c5b0:	4003      	ands	r3, r0
	conn->llcp_feature.features_peer =
   1c5b2:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	conn->common.fex_valid = 1U;
   1c5b6:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   1c5ba:	f043 0301 	orr.w	r3, r3, #1
   1c5be:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
	conn->llcp_feature.ack = conn->llcp_feature.req;
   1c5c2:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   1c5c6:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
	conn->procedure_expire = 0U;
   1c5ca:	e77f      	b.n	1c4cc <ull_conn_rx+0x150>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   1c5cc:	7f69      	ldrb	r1, [r5, #29]
   1c5ce:	200c      	movs	r0, #12
   1c5d0:	f7ff fc7a 	bl	1bec8 <pdu_len_cmp>
   1c5d4:	2800      	cmp	r0, #0
   1c5d6:	f000 833b 	beq.w	1cc50 <ull_conn_rx+0x8d4>
	if (!conn->llcp_version.tx) {
   1c5da:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   1c5de:	f013 0601 	ands.w	r6, r3, #1
   1c5e2:	d140      	bne.n	1c666 <ull_conn_rx+0x2ea>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1c5e4:	4858      	ldr	r0, [pc, #352]	; (1c748 <ull_conn_rx+0x3cc>)
   1c5e6:	f00f fe51 	bl	2c28c <mem_acquire>
		if (!tx) {
   1c5ea:	4601      	mov	r1, r0
   1c5ec:	b920      	cbnz	r0, 1c5f8 <ull_conn_rx+0x27c>
			return -ENOBUFS;
   1c5ee:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1c5f2:	b001      	add	sp, #4
   1c5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->llcp_version.tx = 1U;
   1c5f8:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   1c5fc:	f043 0301 	orr.w	r3, r3, #1
   1c600:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c604:	7903      	ldrb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1c606:	7286      	strb	r6, [r0, #10]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c608:	f043 0303 	orr.w	r3, r3, #3
   1c60c:	7103      	strb	r3, [r0, #4]
		pdu_tx->len =
   1c60e:	2306      	movs	r3, #6
   1c610:	7143      	strb	r3, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1c612:	230c      	movs	r3, #12
   1c614:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   1c616:	230b      	movs	r3, #11
   1c618:	7203      	strb	r3, [r0, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1c61a:	2359      	movs	r3, #89	; 0x59
   1c61c:	7243      	strb	r3, [r0, #9]
		v->sub_version_number =
   1c61e:	f04f 33ff 	mov.w	r3, #4294967295
   1c622:	72c3      	strb	r3, [r0, #11]
   1c624:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, tx);
   1c626:	4620      	mov	r0, r4
   1c628:	f010 fa8d 	bl	2cb46 <ctrl_tx_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c62c:	2301      	movs	r3, #1
   1c62e:	712b      	strb	r3, [r5, #4]
	conn->llcp_version.version_number = v->version_number;
   1c630:	f895 3020 	ldrb.w	r3, [r5, #32]
   1c634:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1c638:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   1c63c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1c640:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c644:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
		sys_le16_to_cpu(v->sub_version_number);
   1c648:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1c64c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   1c650:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_version.sub_version_number =
   1c654:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
	conn->llcp_version.rx = 1U;
   1c658:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   1c65c:	f043 0302 	orr.w	r3, r3, #2
   1c660:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	return 0;
   1c664:	e6e2      	b.n	1c42c <ull_conn_rx+0xb0>
	} else if (!conn->llcp_version.rx) {
   1c666:	f013 0302 	ands.w	r3, r3, #2
   1c66a:	f47f ae92 	bne.w	1c392 <ull_conn_rx+0x16>
		conn->llcp_version.ack = conn->llcp_version.req;
   1c66e:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   1c672:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
		conn->procedure_expire = 0U;
   1c676:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
   1c67a:	e7d9      	b.n	1c630 <ull_conn_rx+0x2b4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   1c67c:	7f69      	ldrb	r1, [r5, #29]
   1c67e:	200f      	movs	r0, #15
   1c680:	f7ff fc22 	bl	1bec8 <pdu_len_cmp>
   1c684:	2800      	cmp	r0, #0
   1c686:	f000 82e3 	beq.w	1cc50 <ull_conn_rx+0x8d4>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   1c68a:	4b2d      	ldr	r3, [pc, #180]	; (1c740 <ull_conn_rx+0x3c4>)
   1c68c:	6818      	ldr	r0, [r3, #0]
   1c68e:	b150      	cbz	r0, 1c6a6 <ull_conn_rx+0x32a>
   1c690:	4284      	cmp	r4, r0
   1c692:	d008      	beq.n	1c6a6 <ull_conn_rx+0x32a>
			nack = reject_ext_ind_send(conn, *rx,
   1c694:	2320      	movs	r3, #32
				nack = reject_ext_ind_send(conn, *rx,
   1c696:	220f      	movs	r2, #15
				nack = reject_ext_ind_send(conn, *rx,
   1c698:	1d29      	adds	r1, r5, #4
   1c69a:	4620      	mov	r0, r4
}
   1c69c:	b001      	add	sp, #4
   1c69e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   1c6a2:	f7ff bd25 	b.w	1c0f0 <reject_ext_ind_send.isra.5>
		if (!conn->lll.role) {
   1c6a6:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   1c6aa:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   1c6ae:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1c6b2:	2900      	cmp	r1, #0
   1c6b4:	f2c0 80b2 	blt.w	1c81c <ull_conn_rx+0x4a0>
			if ((conn->llcp_conn_param.req !=
   1c6b8:	429a      	cmp	r2, r3
   1c6ba:	d009      	beq.n	1c6d0 <ull_conn_rx+0x354>
			    ((conn->llcp_conn_param.state ==
   1c6bc:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
					conn->llcp_conn_param.ack) &&
   1c6c0:	f013 0307 	ands.w	r3, r3, #7
   1c6c4:	d002      	beq.n	1c6cc <ull_conn_rx+0x350>
			      LLCP_CPR_STATE_REQ) ||
   1c6c6:	3b04      	subs	r3, #4
   1c6c8:	2b01      	cmp	r3, #1
   1c6ca:	d801      	bhi.n	1c6d0 <ull_conn_rx+0x354>
				nack = reject_ext_ind_send(conn, *rx,
   1c6cc:	2323      	movs	r3, #35	; 0x23
   1c6ce:	e7e2      	b.n	1c696 <ull_conn_rx+0x31a>
			} else if (((conn->llcp_req - conn->llcp_ack) &
   1c6d0:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1c6d4:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
   1c6d8:	1a5b      	subs	r3, r3, r1
   1c6da:	f003 0303 	and.w	r3, r3, #3
   1c6de:	2b02      	cmp	r3, #2
   1c6e0:	d101      	bne.n	1c6e6 <ull_conn_rx+0x36a>
				nack = reject_ext_ind_send(conn, *rx,
   1c6e2:	232a      	movs	r3, #42	; 0x2a
   1c6e4:	e7d7      	b.n	1c696 <ull_conn_rx+0x31a>
				uint16_t interval_min =
   1c6e6:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   1c6ea:	fa1f f38a 	uxth.w	r3, sl
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1c6ee:	2b05      	cmp	r3, #5
   1c6f0:	d924      	bls.n	1c73c <ull_conn_rx+0x3c0>
				uint16_t interval_max =
   1c6f2:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   1c6f6:	fa1f f189 	uxth.w	r1, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1c6fa:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1c6fe:	d81d      	bhi.n	1c73c <ull_conn_rx+0x3c0>
				    (interval_max > 3200) ||
   1c700:	428b      	cmp	r3, r1
   1c702:	d81b      	bhi.n	1c73c <ull_conn_rx+0x3c0>
				uint16_t latency =
   1c704:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   1c708:	fa1f f788 	uxth.w	r7, r8
				    (interval_min > interval_max) ||
   1c70c:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   1c710:	d214      	bcs.n	1c73c <ull_conn_rx+0x3c0>
				uint16_t timeout =
   1c712:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   1c716:	fa1f f38e 	uxth.w	r3, lr
				    (latency > 499) ||
   1c71a:	f1a3 0c0a 	sub.w	ip, r3, #10
   1c71e:	fa1f fc8c 	uxth.w	ip, ip
   1c722:	f640 4b76 	movw	fp, #3190	; 0xc76
   1c726:	45dc      	cmp	ip, fp
   1c728:	d808      	bhi.n	1c73c <ull_conn_rx+0x3c0>
				     ((latency + 1) * interval_max)) ||
   1c72a:	fb07 1c01 	mla	ip, r7, r1, r1
				    (timeout > 3200) ||
   1c72e:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   1c732:	d203      	bcs.n	1c73c <ull_conn_rx+0x3c0>
					cpr->preferred_periodicity;
   1c734:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
				     ((latency + 1) * interval_max)) ||
   1c738:	4561      	cmp	r1, ip
   1c73a:	d207      	bcs.n	1c74c <ull_conn_rx+0x3d0>
				nack = reject_ext_ind_send(conn, *rx,
   1c73c:	231e      	movs	r3, #30
   1c73e:	e7aa      	b.n	1c696 <ull_conn_rx+0x31a>
   1c740:	20004e30 	.word	0x20004e30
   1c744:	0001ff8e 	.word	0x0001ff8e
   1c748:	20004eb4 	.word	0x20004eb4
				conn->llcp_conn_param.interval_min =
   1c74c:	f8a4 a0f0 	strh.w	sl, [r4, #240]	; 0xf0
				conn->llcp_conn_param.interval_max =
   1c750:	f8a4 90f2 	strh.w	r9, [r4, #242]	; 0xf2
				conn->llcp_conn_param.latency =	latency;
   1c754:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
				conn->llcp_conn_param.timeout =	timeout;
   1c758:	f8a4 e0f6 	strh.w	lr, [r4, #246]	; 0xf6
				conn->llcp_conn_param.preferred_periodicity =
   1c75c:	f884 c0f8 	strb.w	ip, [r4, #248]	; 0xf8
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1c760:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   1c764:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
   1c768:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   1c76c:	f8a4 c0fa 	strh.w	ip, [r4, #250]	; 0xfa
					sys_le16_to_cpu(cpr->offset0);
   1c770:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   1c774:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
   1c778:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   1c77c:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
					sys_le16_to_cpu(cpr->offset1);
   1c780:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   1c784:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   1c788:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   1c78c:	f8a4 c0fe 	strh.w	ip, [r4, #254]	; 0xfe
					sys_le16_to_cpu(cpr->offset2);
   1c790:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1c794:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
   1c798:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   1c79c:	f8a4 c100 	strh.w	ip, [r4, #256]	; 0x100
					sys_le16_to_cpu(cpr->offset3);
   1c7a0:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   1c7a4:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
   1c7a8:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   1c7ac:	f8a4 c102 	strh.w	ip, [r4, #258]	; 0x102
					sys_le16_to_cpu(cpr->offset4);
   1c7b0:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
   1c7b4:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1c7b8:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   1c7bc:	f8a4 c104 	strh.w	ip, [r4, #260]	; 0x104
					sys_le16_to_cpu(cpr->offset5);
   1c7c0:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
   1c7c4:	f895 5036 	ldrb.w	r5, [r5, #54]	; 0x36
   1c7c8:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
				conn->llcp_conn_param.offset5 =
   1c7cc:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
				     lll->interval) ||
   1c7d0:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
				if ((conn->llcp_conn_param.interval_max !=
   1c7d2:	42a9      	cmp	r1, r5
   1c7d4:	d112      	bne.n	1c7fc <ull_conn_rx+0x480>
				     lll->interval) ||
   1c7d6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1c7d8:	42b9      	cmp	r1, r7
   1c7da:	d10f      	bne.n	1c7fc <ull_conn_rx+0x480>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1c7dc:	f240 41e2 	movw	r1, #1250	; 0x4e2
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1c7e0:	4369      	muls	r1, r5
   1c7e2:	f242 7510 	movw	r5, #10000	; 0x2710
   1c7e6:	fb05 1303 	mla	r3, r5, r3, r1
   1c7ea:	3b01      	subs	r3, #1
   1c7ec:	fbb3 f3f1 	udiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1c7f0:	f8b4 1076 	ldrh.w	r1, [r4, #118]	; 0x76
   1c7f4:	b29b      	uxth	r3, r3
   1c7f6:	4299      	cmp	r1, r3
   1c7f8:	f000 8095 	beq.w	1c926 <ull_conn_rx+0x5aa>
				conn->llcp_conn_param.state =
   1c7fc:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1c800:	2103      	movs	r1, #3
   1c802:	f361 0302 	bfi	r3, r1, #0, #3
   1c806:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
			conn->llcp_conn_param.ack--;
   1c80a:	3a01      	subs	r2, #1
   1c80c:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
			if (!conn_upd_curr) {
   1c810:	2800      	cmp	r0, #0
   1c812:	f47f ae0b 	bne.w	1c42c <ull_conn_rx+0xb0>
				conn_upd_curr = conn;
   1c816:	4bc5      	ldr	r3, [pc, #788]	; (1cb2c <ull_conn_rx+0x7b0>)
   1c818:	601c      	str	r4, [r3, #0]
   1c81a:	e6ea      	b.n	1c5f2 <ull_conn_rx+0x276>
		} else if ((conn->llcp_conn_param.req ==
   1c81c:	429a      	cmp	r2, r3
   1c81e:	d004      	beq.n	1c82a <ull_conn_rx+0x4ae>
			    conn->llcp_conn_param.ack) ||
   1c820:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1c824:	0799      	lsls	r1, r3, #30
   1c826:	f040 808a 	bne.w	1c93e <ull_conn_rx+0x5c2>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1c82a:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   1c82e:	fa1f f38a 	uxth.w	r3, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1c832:	2b05      	cmp	r3, #5
   1c834:	d982      	bls.n	1c73c <ull_conn_rx+0x3c0>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1c836:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   1c83a:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1c83e:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1c842:	f63f af7b 	bhi.w	1c73c <ull_conn_rx+0x3c0>
			    (interval_max > 3200) ||
   1c846:	428b      	cmp	r3, r1
   1c848:	f63f af78 	bhi.w	1c73c <ull_conn_rx+0x3c0>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1c84c:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   1c850:	fa1f f788 	uxth.w	r7, r8
			    (interval_min > interval_max) ||
   1c854:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   1c858:	f4bf af70 	bcs.w	1c73c <ull_conn_rx+0x3c0>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1c85c:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   1c860:	fa1f f38e 	uxth.w	r3, lr
			    (latency > 499) ||
   1c864:	f1a3 0c0a 	sub.w	ip, r3, #10
   1c868:	fa1f fc8c 	uxth.w	ip, ip
   1c86c:	f640 4b76 	movw	fp, #3190	; 0xc76
   1c870:	45dc      	cmp	ip, fp
   1c872:	f63f af63 	bhi.w	1c73c <ull_conn_rx+0x3c0>
			     ((latency + 1) * interval_max)) ||
   1c876:	fb07 1c01 	mla	ip, r7, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   1c87a:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   1c87e:	f4bf af5d 	bcs.w	1c73c <ull_conn_rx+0x3c0>
				cpr->preferred_periodicity;
   1c882:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   1c886:	4561      	cmp	r1, ip
   1c888:	f4ff af58 	bcc.w	1c73c <ull_conn_rx+0x3c0>
			conn->llcp_conn_param.interval_min = interval_min;
   1c88c:	f8a4 a0f0 	strh.w	sl, [r4, #240]	; 0xf0
			conn->llcp_conn_param.interval_max = interval_max;
   1c890:	f8a4 90f2 	strh.w	r9, [r4, #242]	; 0xf2
			conn->llcp_conn_param.latency =	latency;
   1c894:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
			conn->llcp_conn_param.timeout =	timeout;
   1c898:	f8a4 e0f6 	strh.w	lr, [r4, #246]	; 0xf6
			conn->llcp_conn_param.preferred_periodicity =
   1c89c:	f884 c0f8 	strb.w	ip, [r4, #248]	; 0xf8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1c8a0:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   1c8a4:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
   1c8a8:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1c8ac:	f8a4 c0fa 	strh.w	ip, [r4, #250]	; 0xfa
				sys_le16_to_cpu(cpr->offset0);
   1c8b0:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   1c8b4:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
   1c8b8:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   1c8bc:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
				sys_le16_to_cpu(cpr->offset1);
   1c8c0:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   1c8c4:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   1c8c8:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   1c8cc:	f8a4 c0fe 	strh.w	ip, [r4, #254]	; 0xfe
				sys_le16_to_cpu(cpr->offset2);
   1c8d0:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1c8d4:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
   1c8d8:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   1c8dc:	f8a4 c100 	strh.w	ip, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->offset3);
   1c8e0:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   1c8e4:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
   1c8e8:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   1c8ec:	f8a4 c102 	strh.w	ip, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset4);
   1c8f0:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
   1c8f4:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1c8f8:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   1c8fc:	f8a4 c104 	strh.w	ip, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset5);
   1c900:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
   1c904:	f895 5036 	ldrb.w	r5, [r5, #54]	; 0x36
   1c908:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
			conn->llcp_conn_param.offset5 =
   1c90c:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
			     lll->interval) ||
   1c910:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
			if ((conn->llcp_conn_param.interval_max !=
   1c912:	42a9      	cmp	r1, r5
   1c914:	f47f af72 	bne.w	1c7fc <ull_conn_rx+0x480>
			     lll->interval) ||
   1c918:	8e25      	ldrh	r5, [r4, #48]	; 0x30
   1c91a:	42bd      	cmp	r5, r7
   1c91c:	f47f af6e 	bne.w	1c7fc <ull_conn_rx+0x480>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1c920:	f240 45e2 	movw	r5, #1250	; 0x4e2
   1c924:	e75c      	b.n	1c7e0 <ull_conn_rx+0x464>
				conn->llcp_conn_param.state =
   1c926:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   1c92a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1c92e:	f043 0301 	orr.w	r3, r3, #1
   1c932:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1c936:	6833      	ldr	r3, [r6, #0]
   1c938:	2101      	movs	r1, #1
   1c93a:	7119      	strb	r1, [r3, #4]
   1c93c:	e765      	b.n	1c80a <ull_conn_rx+0x48e>
			LL_ASSERT(0);
   1c93e:	f241 7205 	movw	r2, #5893	; 0x1705
   1c942:	497b      	ldr	r1, [pc, #492]	; (1cb30 <ull_conn_rx+0x7b4>)
   1c944:	487b      	ldr	r0, [pc, #492]	; (1cb34 <ull_conn_rx+0x7b8>)
   1c946:	f00a ffc4 	bl	278d2 <printk>
   1c94a:	4040      	eors	r0, r0
   1c94c:	f380 8811 	msr	BASEPRI, r0
   1c950:	f04f 0003 	mov.w	r0, #3
   1c954:	df02      	svc	2
   1c956:	e569      	b.n	1c42c <ull_conn_rx+0xb0>
		if (conn->lll.role ||
   1c958:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1c95c:	2b00      	cmp	r3, #0
   1c95e:	f2c0 8177 	blt.w	1cc50 <ull_conn_rx+0x8d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   1c962:	7f69      	ldrb	r1, [r5, #29]
   1c964:	2010      	movs	r0, #16
   1c966:	f7ff faaf 	bl	1bec8 <pdu_len_cmp>
		if (conn->lll.role ||
   1c96a:	2800      	cmp	r0, #0
   1c96c:	f000 8170 	beq.w	1cc50 <ull_conn_rx+0x8d4>
		if (!conn->lll.role &&
   1c970:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   1c974:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   1c978:	429a      	cmp	r2, r3
   1c97a:	d07b      	beq.n	1ca74 <ull_conn_rx+0x6f8>
		    (conn->llcp_conn_param.state ==
   1c97c:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
		     conn->llcp_conn_param.ack) &&
   1c980:	f003 0307 	and.w	r3, r3, #7
   1c984:	2b04      	cmp	r3, #4
   1c986:	d175      	bne.n	1ca74 <ull_conn_rx+0x6f8>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1c988:	f8b5 e020 	ldrh.w	lr, [r5, #32]
   1c98c:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1c990:	2a05      	cmp	r2, #5
   1c992:	d920      	bls.n	1c9d6 <ull_conn_rx+0x65a>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1c994:	f8b5 c022 	ldrh.w	ip, [r5, #34]	; 0x22
   1c998:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1c99c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1c9a0:	d819      	bhi.n	1c9d6 <ull_conn_rx+0x65a>
			    (interval_max > 3200) ||
   1c9a2:	429a      	cmp	r2, r3
   1c9a4:	d817      	bhi.n	1c9d6 <ull_conn_rx+0x65a>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1c9a6:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   1c9a8:	b2ba      	uxth	r2, r7
			    (interval_min > interval_max) ||
   1c9aa:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1c9ae:	d212      	bcs.n	1c9d6 <ull_conn_rx+0x65a>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1c9b0:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   1c9b2:	fa1f f880 	uxth.w	r8, r0
			    (latency > 499) ||
   1c9b6:	f1a8 010a 	sub.w	r1, r8, #10
   1c9ba:	b289      	uxth	r1, r1
   1c9bc:	f640 4976 	movw	r9, #3190	; 0xc76
   1c9c0:	4549      	cmp	r1, r9
   1c9c2:	d808      	bhi.n	1c9d6 <ull_conn_rx+0x65a>
			     ((latency + 1) * interval_max)) ||
   1c9c4:	fb02 3203 	mla	r2, r2, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   1c9c8:	ebb2 0f88 	cmp.w	r2, r8, lsl #2
   1c9cc:	d203      	bcs.n	1c9d6 <ull_conn_rx+0x65a>
				cpr->preferred_periodicity;
   1c9ce:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   1c9d2:	4293      	cmp	r3, r2
   1c9d4:	d202      	bcs.n	1c9dc <ull_conn_rx+0x660>
				nack = reject_ext_ind_send(conn, *rx,
   1c9d6:	231e      	movs	r3, #30
   1c9d8:	2210      	movs	r2, #16
   1c9da:	e65d      	b.n	1c698 <ull_conn_rx+0x31c>
			conn->procedure_expire = 0U;
   1c9dc:	2300      	movs	r3, #0
   1c9de:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
			conn->llcp_conn_param.interval_min = interval_min;
   1c9e2:	f8a4 e0f0 	strh.w	lr, [r4, #240]	; 0xf0
			conn->llcp_conn_param.interval_max = interval_max;
   1c9e6:	f8a4 c0f2 	strh.w	ip, [r4, #242]	; 0xf2
			conn->llcp_conn_param.latency =	latency;
   1c9ea:	f8a4 70f4 	strh.w	r7, [r4, #244]	; 0xf4
			conn->llcp_conn_param.timeout =	timeout;
   1c9ee:	f8a4 00f6 	strh.w	r0, [r4, #246]	; 0xf6
			conn->llcp_conn_param.preferred_periodicity =
   1c9f2:	f884 20f8 	strb.w	r2, [r4, #248]	; 0xf8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1c9f6:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
   1c9fa:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1c9fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1ca02:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
				sys_le16_to_cpu(cpr->offset0);
   1ca06:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   1ca0a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1ca0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset0 =
   1ca12:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
				sys_le16_to_cpu(cpr->offset1);
   1ca16:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
   1ca1a:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   1ca1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset1 =
   1ca22:	f8a4 30fe 	strh.w	r3, [r4, #254]	; 0xfe
				sys_le16_to_cpu(cpr->offset2);
   1ca26:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   1ca2a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1ca2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset2 =
   1ca32:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->offset3);
   1ca36:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
   1ca3a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   1ca3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset3 =
   1ca42:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset4);
   1ca46:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
   1ca4a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1ca4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset4 =
   1ca52:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset5);
   1ca56:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
   1ca5a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   1ca5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset5 =
   1ca62:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1ca66:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1ca6a:	2201      	movs	r2, #1
   1ca6c:	f362 0302 	bfi	r3, r2, #0, #3
   1ca70:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1ca74:	6833      	ldr	r3, [r6, #0]
   1ca76:	2201      	movs	r2, #1
   1ca78:	711a      	strb	r2, [r3, #4]
		break;
   1ca7a:	e4d7      	b.n	1c42c <ull_conn_rx+0xb0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   1ca7c:	7f69      	ldrb	r1, [r5, #29]
   1ca7e:	2011      	movs	r0, #17
   1ca80:	f7ff fa22 	bl	1bec8 <pdu_len_cmp>
   1ca84:	2800      	cmp	r0, #0
   1ca86:	f000 80e3 	beq.w	1cc50 <ull_conn_rx+0x8d4>
	switch (rej_ext_ind->reject_opcode) {
   1ca8a:	f895 3020 	ldrb.w	r3, [r5, #32]
   1ca8e:	2b0f      	cmp	r3, #15
   1ca90:	f47f ac7f 	bne.w	1c392 <ull_conn_rx+0x16>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1ca94:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   1ca98:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1ca9c:	429a      	cmp	r2, r3
   1ca9e:	f43f ac78 	beq.w	1c392 <ull_conn_rx+0x16>
	if (!lll->role && (rej_ext_ind->error_code ==
   1caa2:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   1caa6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1caaa:	2a00      	cmp	r2, #0
   1caac:	f2c0 80e9 	blt.w	1cc82 <ull_conn_rx+0x906>
   1cab0:	2b1a      	cmp	r3, #26
   1cab2:	f040 80ec 	bne.w	1cc8e <ull_conn_rx+0x912>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1cab6:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   1caba:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1cabe:	429a      	cmp	r2, r3
   1cac0:	d00b      	beq.n	1cada <ull_conn_rx+0x75e>
   1cac2:	f241 02f5 	movw	r2, #4341	; 0x10f5
   1cac6:	491a      	ldr	r1, [pc, #104]	; (1cb30 <ull_conn_rx+0x7b4>)
   1cac8:	481a      	ldr	r0, [pc, #104]	; (1cb34 <ull_conn_rx+0x7b8>)
   1caca:	f00a ff02 	bl	278d2 <printk>
   1cace:	4040      	eors	r0, r0
   1cad0:	f380 8811 	msr	BASEPRI, r0
   1cad4:	f04f 0003 	mov.w	r0, #3
   1cad8:	df02      	svc	2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1cada:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
   1cade:	2305      	movs	r3, #5
   1cae0:	f363 0202 	bfi	r2, r3, #0, #3
		conn->llcp_cu.win_offset_us = 0U;
   1cae4:	2300      	movs	r3, #0
   1cae6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1caea:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   1caee:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1caf2:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   1caf6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1cafa:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   1cafe:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1cb02:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1cb06:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
		conn->llcp_cu.win_size = 1U;
   1cb0a:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1cb0c:	f361 0301 	bfi	r3, r1, #0, #2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1cb10:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1cb14:	f362 0382 	bfi	r3, r2, #2, #1
   1cb18:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.ack--;
   1cb1c:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
		conn->llcp_cu.win_size = 1U;
   1cb20:	f884 10b0 	strb.w	r1, [r4, #176]	; 0xb0
		conn->llcp_cu.ack--;
   1cb24:	3b01      	subs	r3, #1
   1cb26:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
	if (err) {
   1cb2a:	e432      	b.n	1c392 <ull_conn_rx+0x16>
   1cb2c:	20004e30 	.word	0x20004e30
   1cb30:	00035ed5 	.word	0x00035ed5
   1cb34:	0003067f 	.word	0x0003067f
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   1cb38:	7f69      	ldrb	r1, [r5, #29]
   1cb3a:	2007      	movs	r0, #7
   1cb3c:	f7ff f9c4 	bl	1bec8 <pdu_len_cmp>
   1cb40:	2800      	cmp	r0, #0
   1cb42:	f000 8085 	beq.w	1cc50 <ull_conn_rx+0x8d4>
		} else if ((conn->llcp_conn_param.ack !=
   1cb46:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   1cb4a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1cb4e:	429a      	cmp	r2, r3
   1cb50:	f43f acbc 	beq.w	1c4cc <ull_conn_rx+0x150>
			    conn->llcp_conn_param.req) &&
   1cb54:	f895 3020 	ldrb.w	r3, [r5, #32]
   1cb58:	2b0f      	cmp	r3, #15
   1cb5a:	f47f acb7 	bne.w	1c4cc <ull_conn_rx+0x150>
			conn->llcp_conn_param.disabled = 1U;
   1cb5e:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1cb62:	f043 0310 	orr.w	r3, r3, #16
   1cb66:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
			if (!conn->lll.role) {
   1cb6a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1cb6e:	2b00      	cmp	r3, #0
   1cb70:	db3c      	blt.n	1cbec <ull_conn_rx+0x870>
				LL_ASSERT(conn->llcp_cu.req ==
   1cb72:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   1cb76:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1cb7a:	429a      	cmp	r2, r3
   1cb7c:	d00b      	beq.n	1cb96 <ull_conn_rx+0x81a>
   1cb7e:	f241 728a 	movw	r2, #6026	; 0x178a
   1cb82:	495f      	ldr	r1, [pc, #380]	; (1cd00 <ull_conn_rx+0x984>)
   1cb84:	485f      	ldr	r0, [pc, #380]	; (1cd04 <ull_conn_rx+0x988>)
   1cb86:	f00a fea4 	bl	278d2 <printk>
   1cb8a:	4040      	eors	r0, r0
   1cb8c:	f380 8811 	msr	BASEPRI, r0
   1cb90:	f04f 0003 	mov.w	r0, #3
   1cb94:	df02      	svc	2
				conn->llcp_conn_param.state =
   1cb96:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
   1cb9a:	2305      	movs	r3, #5
   1cb9c:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_cu.interval =
   1cba0:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   1cba4:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
				conn->llcp_cu.latency =
   1cba8:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   1cbac:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
				conn->llcp_cu.timeout =
   1cbb0:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   1cbb4:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1cbb8:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
				conn->llcp_conn_param.state =
   1cbbc:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
				conn->llcp_cu.win_size = 1U;
   1cbc0:	2101      	movs	r1, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1cbc2:	f361 0301 	bfi	r3, r1, #0, #2
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1cbc6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1cbca:	f362 0382 	bfi	r3, r2, #2, #1
   1cbce:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
				conn->llcp_cu.ack--;
   1cbd2:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
				conn->llcp_cu.win_size = 1U;
   1cbd6:	f884 10b0 	strb.w	r1, [r4, #176]	; 0xb0
				conn->llcp_cu.ack--;
   1cbda:	3b01      	subs	r3, #1
   1cbdc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1cbe0:	6833      	ldr	r3, [r6, #0]
				conn->llcp_cu.win_offset_us = 0U;
   1cbe2:	2000      	movs	r0, #0
   1cbe4:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1cbe8:	7119      	strb	r1, [r3, #4]
				break;
   1cbea:	e502      	b.n	1c5f2 <ull_conn_rx+0x276>
			LL_ASSERT(conn_upd_curr == conn);
   1cbec:	4f46      	ldr	r7, [pc, #280]	; (1cd08 <ull_conn_rx+0x98c>)
   1cbee:	683a      	ldr	r2, [r7, #0]
   1cbf0:	4294      	cmp	r4, r2
   1cbf2:	d00b      	beq.n	1cc0c <ull_conn_rx+0x890>
   1cbf4:	f241 72a1 	movw	r2, #6049	; 0x17a1
   1cbf8:	4941      	ldr	r1, [pc, #260]	; (1cd00 <ull_conn_rx+0x984>)
   1cbfa:	4842      	ldr	r0, [pc, #264]	; (1cd04 <ull_conn_rx+0x988>)
   1cbfc:	f00a fe69 	bl	278d2 <printk>
   1cc00:	4040      	eors	r0, r0
   1cc02:	f380 8811 	msr	BASEPRI, r0
   1cc06:	f04f 0003 	mov.w	r0, #3
   1cc0a:	df02      	svc	2
	conn_upd_curr = NULL;
   1cc0c:	2300      	movs	r3, #0
			if (!conn->llcp_conn_param.cmd) {
   1cc0e:	f894 00ee 	ldrb.w	r0, [r4, #238]	; 0xee
	conn_upd_curr = NULL;
   1cc12:	603b      	str	r3, [r7, #0]
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1cc14:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1cc18:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
			if (!conn->llcp_conn_param.cmd) {
   1cc1c:	f010 0008 	ands.w	r0, r0, #8
   1cc20:	6833      	ldr	r3, [r6, #0]
   1cc22:	d102      	bne.n	1cc2a <ull_conn_rx+0x8ae>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1cc24:	2201      	movs	r2, #1
   1cc26:	711a      	strb	r2, [r3, #4]
				break;
   1cc28:	e4e3      	b.n	1c5f2 <ull_conn_rx+0x276>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1cc2a:	2215      	movs	r2, #21
   1cc2c:	711a      	strb	r2, [r3, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1cc2e:	231a      	movs	r3, #26
   1cc30:	772b      	strb	r3, [r5, #28]
			cu->latency = lll->latency;
   1cc32:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   1cc34:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			cu->latency = lll->latency;
   1cc36:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->supervision_reload *
   1cc38:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
			cu->interval = lll->interval;
   1cc3c:	83eb      	strh	r3, [r5, #30]
			cu->timeout = conn->supervision_reload *
   1cc3e:	435a      	muls	r2, r3
				      lll->interval * 125U / 1000;
   1cc40:	237d      	movs	r3, #125	; 0x7d
   1cc42:	4353      	muls	r3, r2
   1cc44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cc48:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   1cc4c:	846b      	strh	r3, [r5, #34]	; 0x22
   1cc4e:	e43d      	b.n	1c4cc <ull_conn_rx+0x150>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1cc50:	482e      	ldr	r0, [pc, #184]	; (1cd0c <ull_conn_rx+0x990>)
   1cc52:	f00f fb1b 	bl	2c28c <mem_acquire>
	if (!tx) {
   1cc56:	4601      	mov	r1, r0
   1cc58:	2800      	cmp	r0, #0
   1cc5a:	f43f acc8 	beq.w	1c5ee <ull_conn_rx+0x272>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1cc5e:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   1cc60:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1cc64:	f043 0303 	orr.w	r3, r3, #3
   1cc68:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1cc6a:	2302      	movs	r3, #2
   1cc6c:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1cc6e:	2307      	movs	r3, #7
   1cc70:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, tx);
   1cc72:	4620      	mov	r0, r4
   1cc74:	f00f ff67 	bl	2cb46 <ctrl_tx_enqueue>
   1cc78:	f7ff bb8b 	b.w	1c392 <ull_conn_rx+0x16>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1cc7c:	2301      	movs	r3, #1
   1cc7e:	712b      	strb	r3, [r5, #4]
		break;
   1cc80:	e4b7      	b.n	1c5f2 <ull_conn_rx+0x276>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1cc82:	2b23      	cmp	r3, #35	; 0x23
   1cc84:	d003      	beq.n	1cc8e <ull_conn_rx+0x912>
			conn->slave.ticks_to_offset =
   1cc86:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1cc8a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1cc8e:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1cc92:	f003 0307 	and.w	r3, r3, #7
   1cc96:	2b04      	cmp	r3, #4
   1cc98:	d117      	bne.n	1ccca <ull_conn_rx+0x94e>
		LL_ASSERT(conn_upd_curr == conn);
   1cc9a:	4e1b      	ldr	r6, [pc, #108]	; (1cd08 <ull_conn_rx+0x98c>)
   1cc9c:	6832      	ldr	r2, [r6, #0]
   1cc9e:	4294      	cmp	r4, r2
   1cca0:	d00b      	beq.n	1ccba <ull_conn_rx+0x93e>
   1cca2:	f241 1210 	movw	r2, #4368	; 0x1110
   1cca6:	4916      	ldr	r1, [pc, #88]	; (1cd00 <ull_conn_rx+0x984>)
   1cca8:	4816      	ldr	r0, [pc, #88]	; (1cd04 <ull_conn_rx+0x988>)
   1ccaa:	f00a fe12 	bl	278d2 <printk>
   1ccae:	4040      	eors	r0, r0
   1ccb0:	f380 8811 	msr	BASEPRI, r0
   1ccb4:	f04f 0003 	mov.w	r0, #3
   1ccb8:	df02      	svc	2
	conn_upd_curr = NULL;
   1ccba:	2300      	movs	r3, #0
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1ccbc:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn_upd_curr = NULL;
   1ccc0:	6033      	str	r3, [r6, #0]
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1ccc2:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
		conn->procedure_expire = 0U;
   1ccc6:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
	if (!conn->llcp_conn_param.cmd) {
   1ccca:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1ccce:	071b      	lsls	r3, r3, #28
   1ccd0:	f57f ab5f 	bpl.w	1c392 <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1ccd4:	2315      	movs	r3, #21
   1ccd6:	712b      	strb	r3, [r5, #4]
	cu->status = rej_ext_ind->error_code;
   1ccd8:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1ccdc:	772b      	strb	r3, [r5, #28]
	cu->latency = lll->latency;
   1ccde:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	cu->interval = lll->interval;
   1cce0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	cu->latency = lll->latency;
   1cce2:	842a      	strh	r2, [r5, #32]
	cu->timeout = conn->supervision_reload *
   1cce4:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
	cu->interval = lll->interval;
   1cce8:	83eb      	strh	r3, [r5, #30]
	cu->timeout = conn->supervision_reload *
   1ccea:	435a      	muls	r2, r3
		      lll->interval * 125U / 1000;
   1ccec:	237d      	movs	r3, #125	; 0x7d
   1ccee:	4353      	muls	r3, r2
   1ccf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ccf4:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   1ccf8:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   1ccfa:	f7ff bb97 	b.w	1c42c <ull_conn_rx+0xb0>
   1ccfe:	bf00      	nop
   1cd00:	00035ed5 	.word	0x00035ed5
   1cd04:	0003067f 	.word	0x0003067f
   1cd08:	20004e30 	.word	0x20004e30
   1cd0c:	20004eb4 	.word	0x20004eb4

0001cd10 <ull_conn_tx_demux>:
{
   1cd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1cd14:	4e20      	ldr	r6, [pc, #128]	; (1cd98 <ull_conn_tx_demux+0x88>)
{
   1cd16:	4604      	mov	r4, r0
   1cd18:	4637      	mov	r7, r6
	return (void *)(fifo + first * size);
   1cd1a:	1d35      	adds	r5, r6, #4
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1cd1c:	78b3      	ldrb	r3, [r6, #2]
	if (first == last) {
   1cd1e:	78f1      	ldrb	r1, [r6, #3]
   1cd20:	7832      	ldrb	r2, [r6, #0]
   1cd22:	4299      	cmp	r1, r3
   1cd24:	d02d      	beq.n	1cd82 <ull_conn_tx_demux+0x72>
	return (void *)(fifo + first * size);
   1cd26:	fb13 f302 	smulbb	r3, r3, r2
		if (!lll_tx) {
   1cd2a:	eb15 0803 	adds.w	r8, r5, r3
   1cd2e:	d028      	beq.n	1cd82 <ull_conn_tx_demux+0x72>
		conn = ll_connected_get(lll_tx->handle);
   1cd30:	5ae8      	ldrh	r0, [r5, r3]
   1cd32:	f00f ff2d 	bl	2cb90 <ll_connected_get>
		if (conn) {
   1cd36:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1cd3a:	b320      	cbz	r0, 1cd86 <ull_conn_tx_demux+0x76>
			tx->next = NULL;
   1cd3c:	2300      	movs	r3, #0
   1cd3e:	600b      	str	r3, [r1, #0]
			if (!conn->tx_data) {
   1cd40:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   1cd44:	b943      	cbnz	r3, 1cd58 <ull_conn_tx_demux+0x48>
				if (!conn->tx_head) {
   1cd46:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
				conn->tx_data = tx;
   1cd4a:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
				if (!conn->tx_head) {
   1cd4e:	b91b      	cbnz	r3, 1cd58 <ull_conn_tx_demux+0x48>
					conn->tx_head = tx;
   1cd50:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
					conn->tx_data_last = NULL;
   1cd54:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
			if (conn->tx_data_last) {
   1cd58:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   1cd5c:	b103      	cbz	r3, 1cd60 <ull_conn_tx_demux+0x50>
				conn->tx_data_last->next = tx;
   1cd5e:	6019      	str	r1, [r3, #0]
			conn->tx_data_last = tx;
   1cd60:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
	uint8_t _first = *first; /* Copy read-index */
   1cd64:	78bb      	ldrb	r3, [r7, #2]
	if (_first == last) {
   1cd66:	78f9      	ldrb	r1, [r7, #3]
		MFIFO_DEQUEUE(conn_tx);
   1cd68:	787a      	ldrb	r2, [r7, #1]
   1cd6a:	4299      	cmp	r1, r3
   1cd6c:	d005      	beq.n	1cd7a <ull_conn_tx_demux+0x6a>
	_first += 1U;
   1cd6e:	3301      	adds	r3, #1
   1cd70:	b2db      	uxtb	r3, r3
		_first = 0U;
   1cd72:	429a      	cmp	r2, r3
   1cd74:	bf08      	it	eq
   1cd76:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1cd78:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   1cd7a:	3c01      	subs	r4, #1
   1cd7c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1cd80:	d1cc      	bne.n	1cd1c <ull_conn_tx_demux+0xc>
}
   1cd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p->ll_id = PDU_DATA_LLID_RESV;
   1cd86:	790b      	ldrb	r3, [r1, #4]
   1cd88:	f360 0301 	bfi	r3, r0, #0, #2
   1cd8c:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   1cd8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1cd92:	f7fe f9e5 	bl	1b160 <ll_tx_ack_put>
   1cd96:	e7e5      	b.n	1cd64 <ull_conn_tx_demux+0x54>
   1cd98:	20001860 	.word	0x20001860

0001cd9c <conn_cleanup>:
	if (conn == conn_upd_curr) {
   1cd9c:	4b32      	ldr	r3, [pc, #200]	; (1ce68 <conn_cleanup+0xcc>)
   1cd9e:	681a      	ldr	r2, [r3, #0]
   1cda0:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   1cda2:	bf08      	it	eq
   1cda4:	2200      	moveq	r2, #0
{
   1cda6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	conn_upd_curr = NULL;
   1cdaa:	bf08      	it	eq
   1cdac:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   1cdae:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1cdb0:	f8a0 30d2 	strh.w	r3, [r0, #210]	; 0xd2
	*((uint8_t *)rx->pdu) = reason;
   1cdb4:	f880 10e8 	strb.w	r1, [r0, #232]	; 0xe8
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1cdb8:	2314      	movs	r3, #20
	rx = conn->llcp_rx;
   1cdba:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1cdbe:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
{
   1cdc2:	4604      	mov	r4, r0
	struct lll_conn *lll = &conn->lll;
   1cdc4:	f100 061c 	add.w	r6, r0, #28
		hdr->type = NODE_RX_TYPE_RELEASE;
   1cdc8:	2501      	movs	r5, #1
	while (rx) {
   1cdca:	bb41      	cbnz	r1, 1ce1e <conn_cleanup+0x82>
		link = mem_acquire(&mem_link_tx.free);
   1cdcc:	4f27      	ldr	r7, [pc, #156]	; (1ce6c <conn_cleanup+0xd0>)
		LL_ASSERT(link);
   1cdce:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1ce74 <conn_cleanup+0xd8>
   1cdd2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1ce78 <conn_cleanup+0xdc>
	while (conn->tx_head) {
   1cdd6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1cdda:	bb38      	cbnz	r0, 1ce2c <conn_cleanup+0x90>
				    TICKER_ID_CONN_BASE + lll->handle,
   1cddc:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1cde0:	4b23      	ldr	r3, [pc, #140]	; (1ce70 <conn_cleanup+0xd4>)
   1cde2:	9600      	str	r6, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
   1cde4:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1cde6:	b2d2      	uxtb	r2, r2
   1cde8:	2101      	movs	r1, #1
   1cdea:	f7fc fdd7 	bl	1999c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1cdee:	f030 0302 	bics.w	r3, r0, #2
   1cdf2:	d00b      	beq.n	1ce0c <conn_cleanup+0x70>
   1cdf4:	f240 62f1 	movw	r2, #1777	; 0x6f1
   1cdf8:	491e      	ldr	r1, [pc, #120]	; (1ce74 <conn_cleanup+0xd8>)
   1cdfa:	481f      	ldr	r0, [pc, #124]	; (1ce78 <conn_cleanup+0xdc>)
   1cdfc:	f00a fd69 	bl	278d2 <printk>
   1ce00:	4040      	eors	r0, r0
   1ce02:	f380 8811 	msr	BASEPRI, r0
   1ce06:	f04f 0003 	mov.w	r0, #3
   1ce0a:	df02      	svc	2
	lll->handle = 0xFFFF;
   1ce0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1ce10:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   1ce12:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
   1ce14:	b002      	add	sp, #8
   1ce16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   1ce1a:	f7ff bf79 	b.w	1cd10 <ull_conn_tx_demux>
		rx = hdr->link->mem;
   1ce1e:	6808      	ldr	r0, [r1, #0]
   1ce20:	6847      	ldr	r7, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   1ce22:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   1ce24:	f7fe f95e 	bl	1b0e4 <ll_rx_put>
		rx = hdr->link->mem;
   1ce28:	4639      	mov	r1, r7
   1ce2a:	e7ce      	b.n	1cdca <conn_cleanup+0x2e>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1ce2c:	4601      	mov	r1, r0
   1ce2e:	4620      	mov	r0, r4
   1ce30:	f00f fe48 	bl	2cac4 <tx_ull_dequeue>
   1ce34:	4682      	mov	sl, r0
		link = mem_acquire(&mem_link_tx.free);
   1ce36:	4638      	mov	r0, r7
   1ce38:	f00f fa28 	bl	2c28c <mem_acquire>
		LL_ASSERT(link);
   1ce3c:	4605      	mov	r5, r0
   1ce3e:	b958      	cbnz	r0, 1ce58 <conn_cleanup+0xbc>
   1ce40:	f240 7231 	movw	r2, #1841	; 0x731
   1ce44:	4641      	mov	r1, r8
   1ce46:	4648      	mov	r0, r9
   1ce48:	f00a fd43 	bl	278d2 <printk>
   1ce4c:	4040      	eors	r0, r0
   1ce4e:	f380 8811 	msr	BASEPRI, r0
   1ce52:	f04f 0003 	mov.w	r0, #3
   1ce56:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1ce58:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1ce5c:	4651      	mov	r1, sl
   1ce5e:	4628      	mov	r0, r5
   1ce60:	f00f fa66 	bl	2c330 <memq_enqueue>
   1ce64:	e7b7      	b.n	1cdd6 <conn_cleanup+0x3a>
   1ce66:	bf00      	nop
   1ce68:	20004e30 	.word	0x20004e30
   1ce6c:	20005038 	.word	0x20005038
   1ce70:	0001bf51 	.word	0x0001bf51
   1ce74:	00035ed5 	.word	0x00035ed5
   1ce78:	0003067f 	.word	0x0003067f

0001ce7c <ull_conn_done>:
{
   1ce7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   1ce80:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   1ce82:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   1ce84:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   1ce86:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ce8a:	429a      	cmp	r2, r3
{
   1ce8c:	b08b      	sub	sp, #44	; 0x2c
   1ce8e:	4681      	mov	r9, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   1ce90:	d006      	beq.n	1cea0 <ull_conn_done+0x24>
	reason_peer = conn->llcp_terminate.reason_peer;
   1ce92:	f894 60cb 	ldrb.w	r6, [r4, #203]	; 0xcb
	if (reason_peer && (
   1ce96:	b136      	cbz	r6, 1cea6 <ull_conn_done+0x2a>
		conn_cleanup(conn, reason_peer);
   1ce98:	4631      	mov	r1, r6
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   1ce9a:	4620      	mov	r0, r4
   1ce9c:	f7ff ff7e 	bl	1cd9c <conn_cleanup>
}
   1cea0:	b00b      	add	sp, #44	; 0x2c
   1cea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	latency_event = lll->latency_event;
   1cea6:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   1ceaa:	8c83      	ldrh	r3, [r0, #36]	; 0x24
	elapsed_event = latency_event + 1;
   1ceac:	f108 0701 	add.w	r7, r8, #1
   1ceb0:	b2bf      	uxth	r7, r7
	ticks_drift_minus = 0U;
   1ceb2:	e9cd 6608 	strd	r6, r6, [sp, #32]
	if (done->extra.trx_cnt) {
   1ceb6:	b17b      	cbz	r3, 1ced8 <ull_conn_done+0x5c>
		} else if (lll->role) {
   1ceb8:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   1cebc:	2b00      	cmp	r3, #0
   1cebe:	da08      	bge.n	1ced2 <ull_conn_done+0x56>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   1cec0:	aa08      	add	r2, sp, #32
   1cec2:	a909      	add	r1, sp, #36	; 0x24
   1cec4:	f7e4 ffc4 	bl	1e50 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   1cec8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1cecc:	b15b      	cbz	r3, 1cee6 <ull_conn_done+0x6a>
				lll->latency_event = 0;
   1cece:	2300      	movs	r3, #0
				lll->latency_event = lll->latency;
   1ced0:	84ab      	strh	r3, [r5, #36]	; 0x24
		conn->connect_expire = 0U;
   1ced2:	2300      	movs	r3, #0
   1ced4:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	if (done->extra.crc_valid) {
   1ced8:	f899 3026 	ldrb.w	r3, [r9, #38]	; 0x26
   1cedc:	b1bb      	cbz	r3, 1cf0e <ull_conn_done+0x92>
		conn->supervision_expire = 0U;
   1cede:	2300      	movs	r3, #0
			conn->supervision_expire = conn->supervision_reload;
   1cee0:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
   1cee4:	e01c      	b.n	1cf20 <ull_conn_done+0xa4>
				ull_conn_tx_demux(UINT8_MAX);
   1cee6:	20ff      	movs	r0, #255	; 0xff
   1cee8:	f7ff ff12 	bl	1cd10 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   1ceec:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1cef0:	2b00      	cmp	r3, #0
   1cef2:	d1ec      	bne.n	1cece <ull_conn_done+0x52>
   1cef4:	4632      	mov	r2, r6
   1cef6:	e9d5 0113 	ldrd	r0, r1, [r5, #76]	; 0x4c
   1cefa:	f00f fa20 	bl	2c33e <memq_peek>
   1cefe:	2800      	cmp	r0, #0
   1cf00:	d1e5      	bne.n	1cece <ull_conn_done+0x52>
			} else if (lll->slave.latency_enabled) {
   1cf02:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1cf06:	07db      	lsls	r3, r3, #31
   1cf08:	d5e3      	bpl.n	1ced2 <ull_conn_done+0x56>
				lll->latency_event = lll->latency;
   1cf0a:	8c2b      	ldrh	r3, [r5, #32]
   1cf0c:	e7e0      	b.n	1ced0 <ull_conn_done+0x54>
	else if (conn->connect_expire) {
   1cf0e:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   1cf12:	2b00      	cmp	r3, #0
   1cf14:	d07a      	beq.n	1d00c <ull_conn_done+0x190>
		if (conn->connect_expire > elapsed_event) {
   1cf16:	42bb      	cmp	r3, r7
   1cf18:	d976      	bls.n	1d008 <ull_conn_done+0x18c>
			conn->connect_expire -= elapsed_event;
   1cf1a:	1bdb      	subs	r3, r3, r7
   1cf1c:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	if (conn->supervision_expire) {
   1cf20:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1cf24:	b1eb      	cbz	r3, 1cf62 <ull_conn_done+0xe6>
		if (conn->supervision_expire > elapsed_event) {
   1cf26:	42bb      	cmp	r3, r7
   1cf28:	d977      	bls.n	1d01a <ull_conn_done+0x19e>
			conn->supervision_expire -= elapsed_event;
   1cf2a:	1bdb      	subs	r3, r3, r7
   1cf2c:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   1cf2e:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   1cf30:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   1cf32:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
			lll->latency_event = 0U;
   1cf36:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   1cf38:	d971      	bls.n	1d01e <ull_conn_done+0x1a2>
			else if (lll->role) {
   1cf3a:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   1cf3e:	4293      	cmp	r3, r2
   1cf40:	da0f      	bge.n	1cf62 <ull_conn_done+0xe6>
				if (latency_event) {
   1cf42:	f1b8 0f00 	cmp.w	r8, #0
   1cf46:	d16a      	bne.n	1d01e <ull_conn_done+0x1a2>
					force = conn->slave.force & 0x01;
   1cf48:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
					conn->slave.force >>= 1U;
   1cf4c:	085a      	lsrs	r2, r3, #1
					if (force) {
   1cf4e:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   1cf52:	bf17      	itett	ne
   1cf54:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   1cf58:	f8c4 2084 	streq.w	r2, [r4, #132]	; 0x84
						conn->slave.force |= BIT(31);
   1cf5c:	f8c4 2084 	strne.w	r2, [r4, #132]	; 0x84
					force = conn->slave.force & 0x01;
   1cf60:	461e      	movne	r6, r3
	if (conn->procedure_expire != 0U) {
   1cf62:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
   1cf66:	b123      	cbz	r3, 1cf72 <ull_conn_done+0xf6>
		if (conn->procedure_expire > elapsed_event) {
   1cf68:	42bb      	cmp	r3, r7
   1cf6a:	d95a      	bls.n	1d022 <ull_conn_done+0x1a6>
			conn->procedure_expire -= elapsed_event;
   1cf6c:	1bdf      	subs	r7, r3, r7
   1cf6e:	f8a4 707c 	strh.w	r7, [r4, #124]	; 0x7c
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1cf72:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1cf76:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
   1cf7a:	1a9b      	subs	r3, r3, r2
   1cf7c:	f003 0303 	and.w	r3, r3, #3
   1cf80:	2b02      	cmp	r3, #2
   1cf82:	d104      	bne.n	1cf8e <ull_conn_done+0x112>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   1cf84:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1cf88:	3b01      	subs	r3, #1
   1cf8a:	2b01      	cmp	r3, #1
   1cf8c:	d905      	bls.n	1cf9a <ull_conn_done+0x11e>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   1cf8e:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   1cf92:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1cf96:	429a      	cmp	r2, r3
   1cf98:	d001      	beq.n	1cf9e <ull_conn_done+0x122>
		lll->latency_event = 0U;
   1cf9a:	2300      	movs	r3, #0
   1cf9c:	84ab      	strh	r3, [r5, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   1cf9e:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   1cfa0:	b90e      	cbnz	r6, 1cfa6 <ull_conn_done+0x12a>
   1cfa2:	4541      	cmp	r1, r8
   1cfa4:	d03f      	beq.n	1d026 <ull_conn_done+0x1aa>
		lazy = lll->latency_event + 1U;
   1cfa6:	3101      	adds	r1, #1
   1cfa8:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1cfaa:	e9dd 7308 	ldrd	r7, r3, [sp, #32]
   1cfae:	ea53 0207 	orrs.w	r2, r3, r7
   1cfb2:	d103      	bne.n	1cfbc <ull_conn_done+0x140>
   1cfb4:	b911      	cbnz	r1, 1cfbc <ull_conn_done+0x140>
   1cfb6:	2e00      	cmp	r6, #0
   1cfb8:	f43f af72 	beq.w	1cea0 <ull_conn_done+0x24>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1cfbc:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1cfbe:	481b      	ldr	r0, [pc, #108]	; (1d02c <ull_conn_done+0x1b0>)
		struct ll_conn *conn = lll->hdr.parent;
   1cfc0:	68ec      	ldr	r4, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1cfc2:	9406      	str	r4, [sp, #24]
   1cfc4:	e9cd 6004 	strd	r6, r0, [sp, #16]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1cfc8:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1cfca:	2000      	movs	r0, #0
   1cfcc:	9103      	str	r1, [sp, #12]
   1cfce:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1cfd2:	9700      	str	r7, [sp, #0]
   1cfd4:	b2d2      	uxtb	r2, r2
   1cfd6:	2101      	movs	r1, #1
   1cfd8:	f00f fc18 	bl	2c80c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1cfdc:	f030 0302 	bics.w	r3, r0, #2
   1cfe0:	f43f af5e 	beq.w	1cea0 <ull_conn_done+0x24>
   1cfe4:	f7fe f93e 	bl	1b264 <ull_disable_mark_get>
   1cfe8:	4284      	cmp	r4, r0
   1cfea:	f43f af59 	beq.w	1cea0 <ull_conn_done+0x24>
   1cfee:	f240 5241 	movw	r2, #1345	; 0x541
   1cff2:	490f      	ldr	r1, [pc, #60]	; (1d030 <ull_conn_done+0x1b4>)
   1cff4:	480f      	ldr	r0, [pc, #60]	; (1d034 <ull_conn_done+0x1b8>)
   1cff6:	f00a fc6c 	bl	278d2 <printk>
   1cffa:	4040      	eors	r0, r0
   1cffc:	f380 8811 	msr	BASEPRI, r0
   1d000:	f04f 0003 	mov.w	r0, #3
   1d004:	df02      	svc	2
   1d006:	e74b      	b.n	1cea0 <ull_conn_done+0x24>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   1d008:	213e      	movs	r1, #62	; 0x3e
   1d00a:	e746      	b.n	1ce9a <ull_conn_done+0x1e>
		if (!conn->supervision_expire) {
   1d00c:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1d010:	2b00      	cmp	r3, #0
   1d012:	d185      	bne.n	1cf20 <ull_conn_done+0xa4>
			conn->supervision_expire = conn->supervision_reload;
   1d014:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   1d018:	e762      	b.n	1cee0 <ull_conn_done+0x64>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   1d01a:	2108      	movs	r1, #8
   1d01c:	e73d      	b.n	1ce9a <ull_conn_done+0x1e>
				force = 1U;
   1d01e:	2601      	movs	r6, #1
   1d020:	e79f      	b.n	1cf62 <ull_conn_done+0xe6>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   1d022:	2122      	movs	r1, #34	; 0x22
   1d024:	e739      	b.n	1ce9a <ull_conn_done+0x1e>
	lazy = 0U;
   1d026:	4631      	mov	r1, r6
   1d028:	e7bf      	b.n	1cfaa <ull_conn_done+0x12e>
   1d02a:	bf00      	nop
   1d02c:	0001c03d 	.word	0x0001c03d
   1d030:	00035ed5 	.word	0x00035ed5
   1d034:	0003067f 	.word	0x0003067f

0001d038 <ull_conn_tx_lll_enqueue>:
{
   1d038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1d03c:	4f15      	ldr	r7, [pc, #84]	; (1d094 <ull_conn_tx_lll_enqueue+0x5c>)
		LL_ASSERT(link);
   1d03e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1d098 <ull_conn_tx_lll_enqueue+0x60>
   1d042:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1d09c <ull_conn_tx_lll_enqueue+0x64>
{
   1d046:	4605      	mov	r5, r0
   1d048:	460c      	mov	r4, r1
	while (conn->tx_head &&
   1d04a:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1d04e:	b101      	cbz	r1, 1d052 <ull_conn_tx_lll_enqueue+0x1a>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1d050:	b90c      	cbnz	r4, 1d056 <ull_conn_tx_lll_enqueue+0x1e>
}
   1d052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1d056:	4628      	mov	r0, r5
   1d058:	f00f fd34 	bl	2cac4 <tx_ull_dequeue>
   1d05c:	4682      	mov	sl, r0
		link = mem_acquire(&mem_link_tx.free);
   1d05e:	4638      	mov	r0, r7
   1d060:	f00f f914 	bl	2c28c <mem_acquire>
		LL_ASSERT(link);
   1d064:	4606      	mov	r6, r0
   1d066:	b958      	cbnz	r0, 1d080 <ull_conn_tx_lll_enqueue+0x48>
   1d068:	f240 5293 	movw	r2, #1427	; 0x593
   1d06c:	4641      	mov	r1, r8
   1d06e:	4648      	mov	r0, r9
   1d070:	f00a fc2f 	bl	278d2 <printk>
   1d074:	4040      	eors	r0, r0
   1d076:	f380 8811 	msr	BASEPRI, r0
   1d07a:	f04f 0003 	mov.w	r0, #3
   1d07e:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1d080:	f105 0260 	add.w	r2, r5, #96	; 0x60
   1d084:	4651      	mov	r1, sl
   1d086:	4630      	mov	r0, r6
   1d088:	3c01      	subs	r4, #1
   1d08a:	f00f f951 	bl	2c330 <memq_enqueue>
   1d08e:	b2e4      	uxtb	r4, r4
   1d090:	e7db      	b.n	1d04a <ull_conn_tx_lll_enqueue+0x12>
   1d092:	bf00      	nop
   1d094:	20005038 	.word	0x20005038
   1d098:	00035ed5 	.word	0x00035ed5
   1d09c:	0003067f 	.word	0x0003067f

0001d0a0 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   1d0a0:	4901      	ldr	r1, [pc, #4]	; (1d0a8 <ull_conn_link_tx_release+0x8>)
   1d0a2:	f00f b904 	b.w	2c2ae <mem_release>
   1d0a6:	bf00      	nop
   1d0a8:	20005038 	.word	0x20005038

0001d0ac <ull_conn_ack_last_idx_get>:
}
   1d0ac:	4b01      	ldr	r3, [pc, #4]	; (1d0b4 <ull_conn_ack_last_idx_get+0x8>)
   1d0ae:	78d8      	ldrb	r0, [r3, #3]
   1d0b0:	4770      	bx	lr
   1d0b2:	bf00      	nop
   1d0b4:	200017dc 	.word	0x200017dc

0001d0b8 <ull_conn_ack_peek>:
{
   1d0b8:	b570      	push	{r4, r5, r6, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1d0ba:	4b0a      	ldr	r3, [pc, #40]	; (1d0e4 <ull_conn_ack_peek+0x2c>)
   1d0bc:	789c      	ldrb	r4, [r3, #2]
   1d0be:	78dd      	ldrb	r5, [r3, #3]
	if (first == last) {
   1d0c0:	42ac      	cmp	r4, r5
{
   1d0c2:	4606      	mov	r6, r0
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1d0c4:	7818      	ldrb	r0, [r3, #0]
   1d0c6:	d00b      	beq.n	1d0e0 <ull_conn_ack_peek+0x28>
	return (void *)(fifo + first * size);
   1d0c8:	3304      	adds	r3, #4
   1d0ca:	fb14 f400 	smulbb	r4, r4, r0
	if (!lll_tx) {
   1d0ce:	1918      	adds	r0, r3, r4
   1d0d0:	d005      	beq.n	1d0de <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   1d0d2:	7035      	strb	r5, [r6, #0]
	*handle = lll_tx->handle;
   1d0d4:	5b1b      	ldrh	r3, [r3, r4]
   1d0d6:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   1d0d8:	6843      	ldr	r3, [r0, #4]
   1d0da:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1d0dc:	6818      	ldr	r0, [r3, #0]
}
   1d0de:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1d0e0:	2000      	movs	r0, #0
   1d0e2:	e7fc      	b.n	1d0de <ull_conn_ack_peek+0x26>
   1d0e4:	200017dc 	.word	0x200017dc

0001d0e8 <ull_conn_ack_by_last_peek>:
{
   1d0e8:	b530      	push	{r4, r5, lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1d0ea:	4b09      	ldr	r3, [pc, #36]	; (1d110 <ull_conn_ack_by_last_peek+0x28>)
   1d0ec:	789c      	ldrb	r4, [r3, #2]
   1d0ee:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   1d0f0:	4284      	cmp	r4, r0
   1d0f2:	d00a      	beq.n	1d10a <ull_conn_ack_by_last_peek+0x22>
	return (void *)(fifo + first * size);
   1d0f4:	3304      	adds	r3, #4
   1d0f6:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   1d0fa:	1918      	adds	r0, r3, r4
   1d0fc:	d004      	beq.n	1d108 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   1d0fe:	5b1b      	ldrh	r3, [r3, r4]
   1d100:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   1d102:	6843      	ldr	r3, [r0, #4]
   1d104:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1d106:	6818      	ldr	r0, [r3, #0]
}
   1d108:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1d10a:	2000      	movs	r0, #0
   1d10c:	e7fc      	b.n	1d108 <ull_conn_ack_by_last_peek+0x20>
   1d10e:	bf00      	nop
   1d110:	200017dc 	.word	0x200017dc

0001d114 <ull_conn_ack_dequeue>:
{
   1d114:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(conn_ack);
   1d116:	4a09      	ldr	r2, [pc, #36]	; (1d13c <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1d118:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1d11a:	78d0      	ldrb	r0, [r2, #3]
   1d11c:	7811      	ldrb	r1, [r2, #0]
   1d11e:	7854      	ldrb	r4, [r2, #1]
   1d120:	4298      	cmp	r0, r3
   1d122:	d009      	beq.n	1d138 <ull_conn_ack_dequeue+0x24>
	mem = *((void **)(fifo + _first * size));
   1d124:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1d128:	3301      	adds	r3, #1
   1d12a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1d12c:	429c      	cmp	r4, r3
   1d12e:	bf08      	it	eq
   1d130:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   1d132:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1d134:	7093      	strb	r3, [r2, #2]
}
   1d136:	bd10      	pop	{r4, pc}
		return NULL;
   1d138:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   1d13a:	e7fc      	b.n	1d136 <ull_conn_ack_dequeue+0x22>
   1d13c:	200017dc 	.word	0x200017dc

0001d140 <ull_conn_lll_ack_enqueue>:
{
   1d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1d142:	4a12      	ldr	r2, [pc, #72]	; (1d18c <ull_conn_lll_ack_enqueue+0x4c>)
   1d144:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1d146:	7857      	ldrb	r7, [r2, #1]
   1d148:	7895      	ldrb	r5, [r2, #2]
   1d14a:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   1d14c:	1c63      	adds	r3, r4, #1
   1d14e:	b2db      	uxtb	r3, r3
		last = 0U;
   1d150:	429f      	cmp	r7, r3
   1d152:	bf08      	it	eq
   1d154:	2300      	moveq	r3, #0
	if (last == first) {
   1d156:	429d      	cmp	r5, r3
   1d158:	d004      	beq.n	1d164 <ull_conn_lll_ack_enqueue+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1d15a:	1d15      	adds	r5, r2, #4
   1d15c:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   1d160:	192e      	adds	r6, r5, r4
   1d162:	d10e      	bne.n	1d182 <ull_conn_lll_ack_enqueue+0x42>
   1d164:	f240 52d1 	movw	r2, #1489	; 0x5d1
   1d168:	4909      	ldr	r1, [pc, #36]	; (1d190 <ull_conn_lll_ack_enqueue+0x50>)
   1d16a:	480a      	ldr	r0, [pc, #40]	; (1d194 <ull_conn_lll_ack_enqueue+0x54>)
   1d16c:	f00a fbb1 	bl	278d2 <printk>
   1d170:	4040      	eors	r0, r0
   1d172:	f380 8811 	msr	BASEPRI, r0
   1d176:	f04f 0003 	mov.w	r0, #3
   1d17a:	df02      	svc	2
	lll_tx->handle = handle;
   1d17c:	2300      	movs	r3, #0
   1d17e:	801b      	strh	r3, [r3, #0]
   1d180:	deff      	udf	#255	; 0xff
   1d182:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   1d184:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   1d186:	6071      	str	r1, [r6, #4]
}
   1d188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d18a:	bf00      	nop
   1d18c:	200017dc 	.word	0x200017dc
   1d190:	00035ed5 	.word	0x00035ed5
   1d194:	0003067f 	.word	0x0003067f

0001d198 <ull_conn_tx_ack>:
{
   1d198:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   1d19a:	7953      	ldrb	r3, [r2, #5]
{
   1d19c:	4605      	mov	r5, r0
   1d19e:	460e      	mov	r6, r1
   1d1a0:	4614      	mov	r4, r2
	LL_ASSERT(pdu_tx->len);
   1d1a2:	b95b      	cbnz	r3, 1d1bc <ull_conn_tx_ack+0x24>
   1d1a4:	f240 52de 	movw	r2, #1502	; 0x5de
   1d1a8:	4920      	ldr	r1, [pc, #128]	; (1d22c <ull_conn_tx_ack+0x94>)
   1d1aa:	4821      	ldr	r0, [pc, #132]	; (1d230 <ull_conn_tx_ack+0x98>)
   1d1ac:	f00a fb91 	bl	278d2 <printk>
   1d1b0:	4040      	eors	r0, r0
   1d1b2:	f380 8811 	msr	BASEPRI, r0
   1d1b6:	f04f 0003 	mov.w	r0, #3
   1d1ba:	df02      	svc	2
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1d1bc:	7923      	ldrb	r3, [r4, #4]
   1d1be:	f003 0203 	and.w	r2, r3, #3
   1d1c2:	2a03      	cmp	r2, #3
   1d1c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d1c8:	d129      	bne.n	1d21e <ull_conn_tx_ack+0x86>
		if (handle != 0xFFFF) {
   1d1ca:	4295      	cmp	r5, r2
   1d1cc:	d00b      	beq.n	1d1e6 <ull_conn_tx_ack+0x4e>
			struct ll_conn *conn = ll_conn_get(handle);
   1d1ce:	4628      	mov	r0, r5
   1d1d0:	f7ff f82e 	bl	1c230 <ll_conn_get>
	switch (pdu_tx->llctrl.opcode) {
   1d1d4:	79e3      	ldrb	r3, [r4, #7]
   1d1d6:	2b02      	cmp	r3, #2
   1d1d8:	d105      	bne.n	1d1e6 <ull_conn_tx_ack+0x4e>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   1d1da:	7a21      	ldrb	r1, [r4, #8]
   1d1dc:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   1d1de:	bf08      	it	eq
   1d1e0:	2116      	moveq	r1, #22
   1d1e2:	f7ff fddb 	bl	1cd9c <conn_cleanup>
		if (link->next == (void *)tx) {
   1d1e6:	6833      	ldr	r3, [r6, #0]
   1d1e8:	42a3      	cmp	r3, r4
   1d1ea:	d105      	bne.n	1d1f8 <ull_conn_tx_ack+0x60>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1d1ec:	4620      	mov	r0, r4
   1d1ee:	4911      	ldr	r1, [pc, #68]	; (1d234 <ull_conn_tx_ack+0x9c>)
}
   1d1f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1d1f4:	f00f b85b 	b.w	2c2ae <mem_release>
			LL_ASSERT(!link->next);
   1d1f8:	b15b      	cbz	r3, 1d212 <ull_conn_tx_ack+0x7a>
   1d1fa:	f240 52f1 	movw	r2, #1521	; 0x5f1
   1d1fe:	490b      	ldr	r1, [pc, #44]	; (1d22c <ull_conn_tx_ack+0x94>)
   1d200:	480b      	ldr	r0, [pc, #44]	; (1d230 <ull_conn_tx_ack+0x98>)
   1d202:	f00a fb66 	bl	278d2 <printk>
   1d206:	4040      	eors	r0, r0
   1d208:	f380 8811 	msr	BASEPRI, r0
   1d20c:	f04f 0003 	mov.w	r0, #3
   1d210:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1d212:	4621      	mov	r1, r4
   1d214:	4628      	mov	r0, r5
}
   1d216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   1d21a:	f7fd bfa1 	b.w	1b160 <ll_tx_ack_put>
	} else if (handle == 0xFFFF) {
   1d21e:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1d220:	bf04      	itt	eq
   1d222:	f36f 0301 	bfceq	r3, #0, #2
   1d226:	7123      	strbeq	r3, [r4, #4]
   1d228:	e7f3      	b.n	1d212 <ull_conn_tx_ack+0x7a>
   1d22a:	bf00      	nop
   1d22c:	00035ed5 	.word	0x00035ed5
   1d230:	0003067f 	.word	0x0003067f
   1d234:	20004eb4 	.word	0x20004eb4

0001d238 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   1d238:	b510      	push	{r4, lr}
   1d23a:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1d23c:	b158      	cbz	r0, 1d256 <ticker_update_latency_cancel_op_cb+0x1e>
   1d23e:	f240 220d 	movw	r2, #525	; 0x20d
   1d242:	4908      	ldr	r1, [pc, #32]	; (1d264 <ticker_update_latency_cancel_op_cb+0x2c>)
   1d244:	4808      	ldr	r0, [pc, #32]	; (1d268 <ticker_update_latency_cancel_op_cb+0x30>)
   1d246:	f00a fb44 	bl	278d2 <printk>
   1d24a:	4040      	eors	r0, r0
   1d24c:	f380 8811 	msr	BASEPRI, r0
   1d250:	f04f 0003 	mov.w	r0, #3
   1d254:	df02      	svc	2

	conn->slave.latency_cancel = 0U;
   1d256:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   1d25a:	f36f 0341 	bfc	r3, #1, #1
   1d25e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
   1d262:	bd10      	pop	{r4, pc}
   1d264:	00035f27 	.word	0x00035f27
   1d268:	0003067f 	.word	0x0003067f

0001d26c <ticker_op_cb>:
{
   1d26c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1d26e:	b158      	cbz	r0, 1d288 <ticker_op_cb+0x1c>
   1d270:	f240 2205 	movw	r2, #517	; 0x205
   1d274:	4905      	ldr	r1, [pc, #20]	; (1d28c <ticker_op_cb+0x20>)
   1d276:	4806      	ldr	r0, [pc, #24]	; (1d290 <ticker_op_cb+0x24>)
   1d278:	f00a fb2b 	bl	278d2 <printk>
   1d27c:	4040      	eors	r0, r0
   1d27e:	f380 8811 	msr	BASEPRI, r0
   1d282:	f04f 0003 	mov.w	r0, #3
   1d286:	df02      	svc	2
}
   1d288:	bd08      	pop	{r3, pc}
   1d28a:	bf00      	nop
   1d28c:	00035f27 	.word	0x00035f27
   1d290:	0003067f 	.word	0x0003067f

0001d294 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1d294:	2801      	cmp	r0, #1
{
   1d296:	b510      	push	{r4, lr}
   1d298:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1d29a:	d10f      	bne.n	1d2bc <ticker_op_stop_adv_cb+0x28>
   1d29c:	f7fd ffe2 	bl	1b264 <ull_disable_mark_get>
   1d2a0:	4284      	cmp	r4, r0
   1d2a2:	d00b      	beq.n	1d2bc <ticker_op_stop_adv_cb+0x28>
   1d2a4:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   1d2a8:	4905      	ldr	r1, [pc, #20]	; (1d2c0 <ticker_op_stop_adv_cb+0x2c>)
   1d2aa:	4806      	ldr	r0, [pc, #24]	; (1d2c4 <ticker_op_stop_adv_cb+0x30>)
   1d2ac:	f00a fb11 	bl	278d2 <printk>
   1d2b0:	4040      	eors	r0, r0
   1d2b2:	f380 8811 	msr	BASEPRI, r0
   1d2b6:	f04f 0003 	mov.w	r0, #3
   1d2ba:	df02      	svc	2
}
   1d2bc:	bd10      	pop	{r4, pc}
   1d2be:	bf00      	nop
   1d2c0:	00035f27 	.word	0x00035f27
   1d2c4:	0003067f 	.word	0x0003067f

0001d2c8 <ull_slave_ticker_cb>:
{
   1d2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2ca:	460f      	mov	r7, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1d2cc:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
{
   1d2ce:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1d2d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d2d4:	4299      	cmp	r1, r3
{
   1d2d6:	4605      	mov	r5, r0
   1d2d8:	4616      	mov	r6, r2
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1d2da:	d03a      	beq.n	1d352 <ull_slave_ticker_cb+0x8a>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1d2dc:	4601      	mov	r1, r0
   1d2de:	4620      	mov	r0, r4
   1d2e0:	f7e5 f862 	bl	23a8 <ull_conn_llcp>
		if (ret) {
   1d2e4:	2800      	cmp	r0, #0
   1d2e6:	d134      	bne.n	1d352 <ull_slave_ticker_cb+0x8a>
	return ++hdr->ref;
   1d2e8:	7c23      	ldrb	r3, [r4, #16]
   1d2ea:	3301      	adds	r3, #1
   1d2ec:	b2db      	uxtb	r3, r3
   1d2ee:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   1d2f0:	b95b      	cbnz	r3, 1d30a <ull_slave_ticker_cb+0x42>
   1d2f2:	f240 12b5 	movw	r2, #437	; 0x1b5
   1d2f6:	4917      	ldr	r1, [pc, #92]	; (1d354 <ull_slave_ticker_cb+0x8c>)
   1d2f8:	4817      	ldr	r0, [pc, #92]	; (1d358 <ull_slave_ticker_cb+0x90>)
   1d2fa:	f00a faea 	bl	278d2 <printk>
   1d2fe:	4040      	eors	r0, r0
   1d300:	f380 8811 	msr	BASEPRI, r0
   1d304:	f04f 0003 	mov.w	r0, #3
   1d308:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
   1d30a:	4a14      	ldr	r2, [pc, #80]	; (1d35c <ull_slave_ticker_cb+0x94>)
	p.param = &conn->lll;
   1d30c:	f104 031c 	add.w	r3, r4, #28
   1d310:	60d3      	str	r3, [r2, #12]
	mfy.param = &p;
   1d312:	4b13      	ldr	r3, [pc, #76]	; (1d360 <ull_slave_ticker_cb+0x98>)
	p.lazy = lazy;
   1d314:	8116      	strh	r6, [r2, #8]
	p.remainder = remainder;
   1d316:	e9c2 5700 	strd	r5, r7, [r2]
	mfy.param = &p;
   1d31a:	609a      	str	r2, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1d31c:	2200      	movs	r2, #0
   1d31e:	4611      	mov	r1, r2
   1d320:	2001      	movs	r0, #1
   1d322:	f7fb fd65 	bl	18df0 <mayfly_enqueue>
	LL_ASSERT(!err);
   1d326:	b158      	cbz	r0, 1d340 <ull_slave_ticker_cb+0x78>
   1d328:	f240 12c1 	movw	r2, #449	; 0x1c1
   1d32c:	4909      	ldr	r1, [pc, #36]	; (1d354 <ull_slave_ticker_cb+0x8c>)
   1d32e:	480a      	ldr	r0, [pc, #40]	; (1d358 <ull_slave_ticker_cb+0x90>)
   1d330:	f00a facf 	bl	278d2 <printk>
   1d334:	4040      	eors	r0, r0
   1d336:	f380 8811 	msr	BASEPRI, r0
   1d33a:	f04f 0003 	mov.w	r0, #3
   1d33e:	df02      	svc	2
	ull_conn_tx_demux(UINT8_MAX);
   1d340:	20ff      	movs	r0, #255	; 0xff
   1d342:	f7ff fce5 	bl	1cd10 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1d346:	4620      	mov	r0, r4
   1d348:	21ff      	movs	r1, #255	; 0xff
}
   1d34a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1d34e:	f7ff be73 	b.w	1d038 <ull_conn_tx_lll_enqueue>
}
   1d352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d354:	00035f27 	.word	0x00035f27
   1d358:	0003067f 	.word	0x0003067f
   1d35c:	200050bc 	.word	0x200050bc
   1d360:	200018a4 	.word	0x200018a4

0001d364 <ull_slave_latency_cancel>:
{
   1d364:	b510      	push	{r4, lr}
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   1d366:	8e83      	ldrh	r3, [r0, #52]	; 0x34
{
   1d368:	b088      	sub	sp, #32
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   1d36a:	b333      	cbz	r3, 1d3ba <ull_slave_latency_cancel+0x56>
   1d36c:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
   1d370:	f014 0302 	ands.w	r3, r4, #2
   1d374:	d121      	bne.n	1d3ba <ull_slave_latency_cancel+0x56>
				      (TICKER_ID_CONN_BASE + handle),
   1d376:	1d4a      	adds	r2, r1, #5
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1d378:	4911      	ldr	r1, [pc, #68]	; (1d3c0 <ull_slave_latency_cancel+0x5c>)
		conn->slave.latency_cancel = 1U;
   1d37a:	f044 0402 	orr.w	r4, r4, #2
   1d37e:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1d382:	e9cd 3104 	strd	r3, r1, [sp, #16]
   1d386:	2101      	movs	r1, #1
   1d388:	e9cd 3102 	strd	r3, r1, [sp, #8]
   1d38c:	9006      	str	r0, [sp, #24]
   1d38e:	e9cd 3300 	strd	r3, r3, [sp]
   1d392:	4618      	mov	r0, r3
   1d394:	b2d2      	uxtb	r2, r2
   1d396:	2103      	movs	r1, #3
   1d398:	f00f fa38 	bl	2c80c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1d39c:	f030 0302 	bics.w	r3, r0, #2
   1d3a0:	d00b      	beq.n	1d3ba <ull_slave_latency_cancel+0x56>
   1d3a2:	f44f 72c4 	mov.w	r2, #392	; 0x188
   1d3a6:	4907      	ldr	r1, [pc, #28]	; (1d3c4 <ull_slave_latency_cancel+0x60>)
   1d3a8:	4807      	ldr	r0, [pc, #28]	; (1d3c8 <ull_slave_latency_cancel+0x64>)
   1d3aa:	f00a fa92 	bl	278d2 <printk>
   1d3ae:	4040      	eors	r0, r0
   1d3b0:	f380 8811 	msr	BASEPRI, r0
   1d3b4:	f04f 0003 	mov.w	r0, #3
   1d3b8:	df02      	svc	2
}
   1d3ba:	b008      	add	sp, #32
   1d3bc:	bd10      	pop	{r4, pc}
   1d3be:	bf00      	nop
   1d3c0:	0001d239 	.word	0x0001d239
   1d3c4:	00035f27 	.word	0x00035f27
   1d3c8:	0003067f 	.word	0x0003067f

0001d3cc <ll_wl_clear>:
{
	return WL_SIZE;
}

uint8_t ll_wl_clear(void)
{
   1d3cc:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_BROADCASTER)
	if (ull_adv_filter_pol_get(0)) {
   1d3ce:	2000      	movs	r0, #0
   1d3d0:	f00f faea 	bl	2c9a8 <ull_adv_filter_pol_get>
   1d3d4:	b108      	cbz	r0, 1d3da <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d3d6:	200c      	movs	r0, #12
#endif /* CONFIG_BT_CTLR_PRIVACY */

	wl_anon = 0U;

	return 0;
}
   1d3d8:	bd08      	pop	{r3, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1d3da:	f00f fb6a 	bl	2cab2 <ull_scan_filter_pol_get>
   1d3de:	f010 0001 	ands.w	r0, r0, #1
   1d3e2:	d1f8      	bne.n	1d3d6 <ll_wl_clear+0xa>
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1d3e4:	4b02      	ldr	r3, [pc, #8]	; (1d3f0 <ll_wl_clear+0x24>)
   1d3e6:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
   1d3e8:	7058      	strb	r0, [r3, #1]
	wl_anon = 0U;
   1d3ea:	4b02      	ldr	r3, [pc, #8]	; (1d3f4 <ll_wl_clear+0x28>)
   1d3ec:	7018      	strb	r0, [r3, #0]
	return 0;
   1d3ee:	e7f3      	b.n	1d3d8 <ll_wl_clear+0xc>
   1d3f0:	20005865 	.word	0x20005865
   1d3f4:	20005864 	.word	0x20005864

0001d3f8 <ll_wl_add>:
{
   1d3f8:	b570      	push	{r4, r5, r6, lr}
   1d3fa:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
   1d3fc:	2000      	movs	r0, #0
   1d3fe:	f00f fad3 	bl	2c9a8 <ull_adv_filter_pol_get>
   1d402:	b108      	cbz	r0, 1d408 <ll_wl_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d404:	200c      	movs	r0, #12
}
   1d406:	bd70      	pop	{r4, r5, r6, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1d408:	f00f fb53 	bl	2cab2 <ull_scan_filter_pol_get>
   1d40c:	f010 0001 	ands.w	r0, r0, #1
   1d410:	d1f8      	bne.n	1d404 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1d412:	7821      	ldrb	r1, [r4, #0]
   1d414:	29ff      	cmp	r1, #255	; 0xff
   1d416:	d103      	bne.n	1d420 <ll_wl_add+0x28>
		wl_anon = 1U;
   1d418:	4b13      	ldr	r3, [pc, #76]	; (1d468 <ll_wl_add+0x70>)
   1d41a:	2201      	movs	r2, #1
   1d41c:	701a      	strb	r2, [r3, #0]
		return 0;
   1d41e:	e7f2      	b.n	1d406 <ll_wl_add+0xe>
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   1d420:	4a12      	ldr	r2, [pc, #72]	; (1d46c <ll_wl_add+0x74>)
   1d422:	7815      	ldrb	r5, [r2, #0]
   1d424:	2dff      	cmp	r5, #255	; 0xff
	return filter_add(&wl_filter, addr->type, addr->a.val);
   1d426:	f104 0401 	add.w	r4, r4, #1
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   1d42a:	d01a      	beq.n	1d462 <ll_wl_add+0x6a>
	     (filter->enable_bitmask & BIT(index));
   1d42c:	fa25 f300 	lsr.w	r3, r5, r0
	for (index = 0;
   1d430:	f013 0301 	ands.w	r3, r3, #1
   1d434:	d113      	bne.n	1d45e <ll_wl_add+0x66>
	filter->enable_bitmask |= BIT(index);
   1d436:	2601      	movs	r6, #1
   1d438:	4086      	lsls	r6, r0
   1d43a:	4335      	orrs	r5, r6
   1d43c:	7015      	strb	r5, [r2, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1d43e:	f001 0101 	and.w	r1, r1, #1
   1d442:	7855      	ldrb	r5, [r2, #1]
   1d444:	4081      	lsls	r1, r0
   1d446:	4329      	orrs	r1, r5
   1d448:	7051      	strb	r1, [r2, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1d44a:	2106      	movs	r1, #6
   1d44c:	4341      	muls	r1, r0
   1d44e:	3102      	adds	r1, #2
   1d450:	6825      	ldr	r5, [r4, #0]
   1d452:	5055      	str	r5, [r2, r1]
   1d454:	1850      	adds	r0, r2, r1
   1d456:	88a2      	ldrh	r2, [r4, #4]
   1d458:	8082      	strh	r2, [r0, #4]
	return filter_add(&wl_filter, addr->type, addr->a.val);
   1d45a:	b2d8      	uxtb	r0, r3
   1d45c:	e7d3      	b.n	1d406 <ll_wl_add+0xe>
	     index++) {
   1d45e:	3001      	adds	r0, #1
   1d460:	e7e4      	b.n	1d42c <ll_wl_add+0x34>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1d462:	2307      	movs	r3, #7
   1d464:	e7f9      	b.n	1d45a <ll_wl_add+0x62>
   1d466:	bf00      	nop
   1d468:	20005864 	.word	0x20005864
   1d46c:	20005865 	.word	0x20005865

0001d470 <ll_wl_remove>:
{
   1d470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d474:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   1d476:	2000      	movs	r0, #0
   1d478:	f00f fa96 	bl	2c9a8 <ull_adv_filter_pol_get>
   1d47c:	b110      	cbz	r0, 1d484 <ll_wl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d47e:	200c      	movs	r0, #12
}
   1d480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1d484:	f00f fb15 	bl	2cab2 <ull_scan_filter_pol_get>
   1d488:	f010 0501 	ands.w	r5, r0, #1
   1d48c:	d1f7      	bne.n	1d47e <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   1d48e:	f897 8000 	ldrb.w	r8, [r7]
   1d492:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1d496:	d103      	bne.n	1d4a0 <ll_wl_remove+0x30>
		wl_anon = 0U;
   1d498:	4b17      	ldr	r3, [pc, #92]	; (1d4f8 <ll_wl_remove+0x88>)
		return 0;
   1d49a:	4628      	mov	r0, r5
		wl_anon = 0U;
   1d49c:	701d      	strb	r5, [r3, #0]
		return 0;
   1d49e:	e7ef      	b.n	1d480 <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
   1d4a0:	4c16      	ldr	r4, [pc, #88]	; (1d4fc <ll_wl_remove+0x8c>)
   1d4a2:	7823      	ldrb	r3, [r4, #0]
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   1d4a4:	3701      	adds	r7, #1
	if (!filter->enable_bitmask) {
   1d4a6:	b913      	cbnz	r3, 1d4ae <ll_wl_remove+0x3e>
		return BT_HCI_ERR_INVALID_PARAM;
   1d4a8:	2512      	movs	r5, #18
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   1d4aa:	b2e8      	uxtb	r0, r5
   1d4ac:	e7e8      	b.n	1d480 <ll_wl_remove+0x10>
	index = WL_SIZE;
   1d4ae:	2608      	movs	r6, #8
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1d4b0:	f104 0902 	add.w	r9, r4, #2
   1d4b4:	f04f 0a06 	mov.w	sl, #6
	while (index--) {
   1d4b8:	f116 36ff 	adds.w	r6, r6, #4294967295
   1d4bc:	d3f4      	bcc.n	1d4a8 <ll_wl_remove+0x38>
		if ((filter->enable_bitmask & BIT(index)) &&
   1d4be:	7823      	ldrb	r3, [r4, #0]
   1d4c0:	40f3      	lsrs	r3, r6
   1d4c2:	07da      	lsls	r2, r3, #31
   1d4c4:	d5f8      	bpl.n	1d4b8 <ll_wl_remove+0x48>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   1d4c6:	7863      	ldrb	r3, [r4, #1]
   1d4c8:	4133      	asrs	r3, r6
   1d4ca:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
   1d4ce:	07db      	lsls	r3, r3, #31
   1d4d0:	d4f2      	bmi.n	1d4b8 <ll_wl_remove+0x48>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1d4d2:	2206      	movs	r2, #6
   1d4d4:	4639      	mov	r1, r7
   1d4d6:	fb0a 9006 	mla	r0, sl, r6, r9
   1d4da:	f010 fed8 	bl	2e28e <memcmp>
		     (addr_type & 0x01)) &&
   1d4de:	2800      	cmp	r0, #0
   1d4e0:	d1ea      	bne.n	1d4b8 <ll_wl_remove+0x48>
			filter->enable_bitmask &= ~BIT(index);
   1d4e2:	2301      	movs	r3, #1
   1d4e4:	40b3      	lsls	r3, r6
   1d4e6:	7822      	ldrb	r2, [r4, #0]
   1d4e8:	43db      	mvns	r3, r3
   1d4ea:	b2db      	uxtb	r3, r3
   1d4ec:	401a      	ands	r2, r3
   1d4ee:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
   1d4f0:	7862      	ldrb	r2, [r4, #1]
   1d4f2:	4013      	ands	r3, r2
   1d4f4:	7063      	strb	r3, [r4, #1]
			return 0;
   1d4f6:	e7d8      	b.n	1d4aa <ll_wl_remove+0x3a>
   1d4f8:	20005864 	.word	0x20005864
   1d4fc:	20005865 	.word	0x20005865

0001d500 <ull_filter_reset>:
	wl_anon = 0U;
   1d500:	4a03      	ldr	r2, [pc, #12]	; (1d510 <ull_filter_reset+0x10>)
   1d502:	2300      	movs	r3, #0
   1d504:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
   1d506:	4a03      	ldr	r2, [pc, #12]	; (1d514 <ull_filter_reset+0x14>)
   1d508:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   1d50a:	7053      	strb	r3, [r2, #1]
}
   1d50c:	4770      	bx	lr
   1d50e:	bf00      	nop
   1d510:	20005864 	.word	0x20005864
   1d514:	20005865 	.word	0x20005865

0001d518 <ull_filter_lll_get>:
{
   1d518:	b508      	push	{r3, lr}
	LL_ASSERT(whitelist);
   1d51a:	b958      	cbnz	r0, 1d534 <ull_filter_lll_get+0x1c>
   1d51c:	f240 22d5 	movw	r2, #725	; 0x2d5
   1d520:	4905      	ldr	r1, [pc, #20]	; (1d538 <ull_filter_lll_get+0x20>)
   1d522:	4806      	ldr	r0, [pc, #24]	; (1d53c <ull_filter_lll_get+0x24>)
   1d524:	f00a f9d5 	bl	278d2 <printk>
   1d528:	4040      	eors	r0, r0
   1d52a:	f380 8811 	msr	BASEPRI, r0
   1d52e:	f04f 0003 	mov.w	r0, #3
   1d532:	df02      	svc	2
}
   1d534:	4802      	ldr	r0, [pc, #8]	; (1d540 <ull_filter_lll_get+0x28>)
   1d536:	bd08      	pop	{r3, pc}
   1d538:	00035f8c 	.word	0x00035f8c
   1d53c:	0003067f 	.word	0x0003067f
   1d540:	20005865 	.word	0x20005865

0001d544 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1d544:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1d546:	4b08      	ldr	r3, [pc, #32]	; (1d568 <rtc0_nrf5_isr+0x24>)
   1d548:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1d54c:	b122      	cbz	r2, 1d558 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1d54e:	2000      	movs	r0, #0
   1d550:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   1d554:	f7fc f97a 	bl	1984c <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1d558:	2001      	movs	r0, #1
   1d55a:	f7fb fc99 	bl	18e90 <mayfly_run>

#if !defined(CONFIG_BT_CTLR_LOW_LAT) && \
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1d55e:	2002      	movs	r0, #2
#endif

	DEBUG_TICKER_ISR(0);
}
   1d560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1d564:	f7fb bc94 	b.w	18e90 <mayfly_run>
   1d568:	4000b000 	.word	0x4000b000

0001d56c <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1d56c:	2801      	cmp	r0, #1
{
   1d56e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1d570:	d90b      	bls.n	1d58a <ticker_stop_op_cb+0x1e>
   1d572:	f240 228f 	movw	r2, #655	; 0x28f
   1d576:	4905      	ldr	r1, [pc, #20]	; (1d58c <ticker_stop_op_cb+0x20>)
   1d578:	4805      	ldr	r0, [pc, #20]	; (1d590 <ticker_stop_op_cb+0x24>)
   1d57a:	f00a f9aa 	bl	278d2 <printk>
   1d57e:	4040      	eors	r0, r0
   1d580:	f380 8811 	msr	BASEPRI, r0
   1d584:	f04f 0003 	mov.w	r0, #3
   1d588:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1d58a:	bd08      	pop	{r3, pc}
   1d58c:	0003600b 	.word	0x0003600b
   1d590:	0003067f 	.word	0x0003067f

0001d594 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1d594:	2801      	cmp	r0, #1
{
   1d596:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1d598:	d90b      	bls.n	1d5b2 <ticker_start_op_cb+0x1e>
   1d59a:	f240 229a 	movw	r2, #666	; 0x29a
   1d59e:	4905      	ldr	r1, [pc, #20]	; (1d5b4 <ticker_start_op_cb+0x20>)
   1d5a0:	4805      	ldr	r0, [pc, #20]	; (1d5b8 <ticker_start_op_cb+0x24>)
   1d5a2:	f00a f996 	bl	278d2 <printk>
   1d5a6:	4040      	eors	r0, r0
   1d5a8:	f380 8811 	msr	BASEPRI, r0
   1d5ac:	f04f 0003 	mov.w	r0, #3
   1d5b0:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1d5b2:	bd08      	pop	{r3, pc}
   1d5b4:	0003600b 	.word	0x0003600b
   1d5b8:	0003067f 	.word	0x0003067f

0001d5bc <preempt_ticker_start>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
{
   1d5bc:	b530      	push	{r4, r5, lr}
	struct evt_hdr *evt;
	uint32_t preempt_to;
	uint32_t ret;

	/* Calc the preempt timeout */
	evt = HDR_LLL2EVT(prepare_param->param);
   1d5be:	68c3      	ldr	r3, [r0, #12]
   1d5c0:	6819      	ldr	r1, [r3, #0]
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1d5c2:	4b15      	ldr	r3, [pc, #84]	; (1d618 <preempt_ticker_start+0x5c>)
   1d5c4:	2200      	movs	r2, #0
{
   1d5c6:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1d5c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1d5cc:	4b13      	ldr	r3, [pc, #76]	; (1d61c <preempt_ticker_start+0x60>)
   1d5ce:	9208      	str	r2, [sp, #32]
   1d5d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1d5d4:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1d5d8:	9201      	str	r2, [sp, #4]
	preempt_to = MAX(evt->ticks_active_to_start,
   1d5da:	e9d1 5400 	ldrd	r5, r4, [r1]
   1d5de:	688b      	ldr	r3, [r1, #8]
   1d5e0:	42a5      	cmp	r5, r4
   1d5e2:	bf2c      	ite	cs
   1d5e4:	ebc3 0305 	rsbcs	r3, r3, r5
   1d5e8:	ebc3 0304 	rsbcc	r3, r3, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1d5ec:	9300      	str	r3, [sp, #0]
   1d5ee:	6803      	ldr	r3, [r0, #0]
   1d5f0:	4611      	mov	r1, r2
   1d5f2:	4610      	mov	r0, r2
   1d5f4:	f00f f8ef 	bl	2c7d6 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1d5f8:	2802      	cmp	r0, #2
   1d5fa:	d90b      	bls.n	1d614 <preempt_ticker_start+0x58>
   1d5fc:	f240 22b9 	movw	r2, #697	; 0x2b9
   1d600:	4907      	ldr	r1, [pc, #28]	; (1d620 <preempt_ticker_start+0x64>)
   1d602:	4808      	ldr	r0, [pc, #32]	; (1d624 <preempt_ticker_start+0x68>)
   1d604:	f00a f965 	bl	278d2 <printk>
   1d608:	4040      	eors	r0, r0
   1d60a:	f380 8811 	msr	BASEPRI, r0
   1d60e:	f04f 0003 	mov.w	r0, #3
   1d612:	df02      	svc	2
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   1d614:	b00b      	add	sp, #44	; 0x2c
   1d616:	bd30      	pop	{r4, r5, pc}
   1d618:	0001d595 	.word	0x0001d595
   1d61c:	0001d7e1 	.word	0x0001d7e1
   1d620:	0003600b 	.word	0x0003600b
   1d624:	0003067f 	.word	0x0003067f

0001d628 <prepare>:
{
   1d628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d62c:	b085      	sub	sp, #20
   1d62e:	4699      	mov	r9, r3
   1d630:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1d632:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   1d636:	23ff      	movs	r3, #255	; 0xff
{
   1d638:	4680      	mov	r8, r0
   1d63a:	460f      	mov	r7, r1
   1d63c:	4616      	mov	r6, r2
	idx = UINT8_MAX;
   1d63e:	f88d 300f 	strb.w	r3, [sp, #15]
		p = ull_prepare_dequeue_iter(&idx);
   1d642:	f10d 000f 	add.w	r0, sp, #15
   1d646:	f7fe f847 	bl	1b6d8 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1d64a:	b118      	cbz	r0, 1d654 <prepare+0x2c>
   1d64c:	f890 3020 	ldrb.w	r3, [r0, #32]
   1d650:	079b      	lsls	r3, r3, #30
   1d652:	d1f6      	bne.n	1d642 <prepare+0x1a>
	if (event.curr.abort_cb || (p && is_resume)) {
   1d654:	4b20      	ldr	r3, [pc, #128]	; (1d6d8 <prepare+0xb0>)
   1d656:	689a      	ldr	r2, [r3, #8]
   1d658:	b90a      	cbnz	r2, 1d65e <prepare+0x36>
   1d65a:	b1e0      	cbz	r0, 1d696 <prepare+0x6e>
   1d65c:	b1dd      	cbz	r5, 1d696 <prepare+0x6e>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1d65e:	e9cd 9500 	strd	r9, r5, [sp]
   1d662:	4633      	mov	r3, r6
   1d664:	4622      	mov	r2, r4
   1d666:	4639      	mov	r1, r7
   1d668:	4640      	mov	r0, r8
   1d66a:	f7fd fed1 	bl	1b410 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1d66e:	b158      	cbz	r0, 1d688 <prepare+0x60>
   1d670:	f240 2233 	movw	r2, #563	; 0x233
   1d674:	4919      	ldr	r1, [pc, #100]	; (1d6dc <prepare+0xb4>)
   1d676:	481a      	ldr	r0, [pc, #104]	; (1d6e0 <prepare+0xb8>)
   1d678:	f00a f92b 	bl	278d2 <printk>
   1d67c:	4040      	eors	r0, r0
   1d67e:	f380 8811 	msr	BASEPRI, r0
   1d682:	f04f 0003 	mov.w	r0, #3
   1d686:	df02      	svc	2
		if (is_resume) {
   1d688:	b915      	cbnz	r5, 1d690 <prepare+0x68>
		preempt_ticker_start(prepare_param);
   1d68a:	4620      	mov	r0, r4
   1d68c:	f7ff ff96 	bl	1d5bc <preempt_ticker_start>
			return -EINPROGRESS;
   1d690:	f06f 0476 	mvn.w	r4, #118	; 0x76
   1d694:	e01b      	b.n	1d6ce <prepare+0xa6>
	event.curr.param = prepare_param->param;
   1d696:	68e2      	ldr	r2, [r4, #12]
	event.curr.abort_cb = abort_cb;
   1d698:	609f      	str	r7, [r3, #8]
	event.curr.is_abort_cb = is_abort_cb;
   1d69a:	e9c3 2800 	strd	r2, r8, [r3]
	err = prepare_cb(prepare_param);
   1d69e:	4620      	mov	r0, r4
   1d6a0:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1d6a2:	2200      	movs	r2, #0
	err = prepare_cb(prepare_param);
   1d6a4:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1d6a6:	9200      	str	r2, [sp, #0]
   1d6a8:	4b0e      	ldr	r3, [pc, #56]	; (1d6e4 <prepare+0xbc>)
   1d6aa:	4611      	mov	r1, r2
   1d6ac:	4610      	mov	r0, r2
   1d6ae:	f7fc f975 	bl	1999c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1d6b2:	2802      	cmp	r0, #2
   1d6b4:	d90b      	bls.n	1d6ce <prepare+0xa6>
   1d6b6:	f240 226f 	movw	r2, #623	; 0x26f
   1d6ba:	4908      	ldr	r1, [pc, #32]	; (1d6dc <prepare+0xb4>)
   1d6bc:	4808      	ldr	r0, [pc, #32]	; (1d6e0 <prepare+0xb8>)
   1d6be:	f00a f908 	bl	278d2 <printk>
   1d6c2:	4040      	eors	r0, r0
   1d6c4:	f380 8811 	msr	BASEPRI, r0
   1d6c8:	f04f 0003 	mov.w	r0, #3
   1d6cc:	df02      	svc	2
}
   1d6ce:	4620      	mov	r0, r4
   1d6d0:	b005      	add	sp, #20
   1d6d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d6d6:	bf00      	nop
   1d6d8:	200050d0 	.word	0x200050d0
   1d6dc:	0003600b 	.word	0x0003600b
   1d6e0:	0003067f 	.word	0x0003067f
   1d6e4:	0001d56d 	.word	0x0001d56d

0001d6e8 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   1d6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1d6ea:	4c3a      	ldr	r4, [pc, #232]	; (1d7d4 <preempt+0xec>)
   1d6ec:	68a3      	ldr	r3, [r4, #8]
{
   1d6ee:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   1d6f0:	b373      	cbz	r3, 1d750 <preempt+0x68>
   1d6f2:	6823      	ldr	r3, [r4, #0]
   1d6f4:	b363      	cbz	r3, 1d750 <preempt+0x68>
		return;
	}

	idx = UINT8_MAX;
   1d6f6:	23ff      	movs	r3, #255	; 0xff
   1d6f8:	f88d 300e 	strb.w	r3, [sp, #14]
	if (!next) {
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
		next = ull_prepare_dequeue_iter(&idx);
   1d6fc:	f10d 000e 	add.w	r0, sp, #14
   1d700:	f7fd ffea 	bl	1b6d8 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1d704:	4605      	mov	r5, r0
   1d706:	b318      	cbz	r0, 1d750 <preempt+0x68>
   1d708:	f890 0020 	ldrb.w	r0, [r0, #32]
   1d70c:	f010 0603 	ands.w	r6, r0, #3
   1d710:	d1f4      	bne.n	1d6fc <preempt+0x14>

	if (!next) {
		return;
	}

	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   1d712:	ab05      	add	r3, sp, #20
   1d714:	9300      	str	r3, [sp, #0]
   1d716:	6867      	ldr	r7, [r4, #4]
   1d718:	6822      	ldr	r2, [r4, #0]
   1d71a:	69e9      	ldr	r1, [r5, #28]
   1d71c:	68e8      	ldr	r0, [r5, #12]
   1d71e:	ab04      	add	r3, sp, #16
   1d720:	47b8      	blx	r7
				     event.curr.param,
				     &resume_cb, &resume_prio);
	if (!ret) {
   1d722:	4607      	mov	r7, r0
   1d724:	b9b0      	cbnz	r0, 1d754 <preempt+0x6c>
		/* Let LLL know about the cancelled prepare */
		next->is_aborted = 1;
   1d726:	f895 3020 	ldrb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1d72a:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1d72c:	f043 0302 	orr.w	r3, r3, #2
   1d730:	f885 3020 	strb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1d734:	4628      	mov	r0, r5
   1d736:	69ab      	ldr	r3, [r5, #24]
   1d738:	4798      	blx	r3
		LL_ASSERT(ret == -ECANCELED);
	}

preempt_next:
	do {
		next = ull_prepare_dequeue_iter(&idx);
   1d73a:	f10d 000e 	add.w	r0, sp, #14
   1d73e:	f7fd ffcb 	bl	1b6d8 <ull_prepare_dequeue_iter>
		if (!next) {
   1d742:	b128      	cbz	r0, 1d750 <preempt+0x68>
			return;
		}
	} while (next->is_aborted || next->is_resume);
   1d744:	f890 3020 	ldrb.w	r3, [r0, #32]
   1d748:	079b      	lsls	r3, r3, #30
   1d74a:	d1f6      	bne.n	1d73a <preempt+0x52>

	preempt_ticker_start(&next->prepare_param);
   1d74c:	f7ff ff36 	bl	1d5bc <preempt_ticker_start>
}
   1d750:	b00b      	add	sp, #44	; 0x2c
   1d752:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event.curr.abort_cb(NULL, event.curr.param);
   1d754:	68a3      	ldr	r3, [r4, #8]
   1d756:	6821      	ldr	r1, [r4, #0]
   1d758:	4630      	mov	r0, r6
   1d75a:	4798      	blx	r3
	if (ret == -EAGAIN) {
   1d75c:	f117 0f0b 	cmn.w	r7, #11
   1d760:	d132      	bne.n	1d7c8 <preempt+0xe0>
		iter_idx = UINT8_MAX;
   1d762:	23ff      	movs	r3, #255	; 0xff
   1d764:	f88d 300f 	strb.w	r3, [sp, #15]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1d768:	f10d 000f 	add.w	r0, sp, #15
   1d76c:	f7fd ffb4 	bl	1b6d8 <ull_prepare_dequeue_iter>
		while (iter) {
   1d770:	b9d8      	cbnz	r0, 1d7aa <preempt+0xc2>
	prepare_param.param = event.curr.param;
   1d772:	6823      	ldr	r3, [r4, #0]
   1d774:	9309      	str	r3, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1d776:	2301      	movs	r3, #1
   1d778:	9301      	str	r3, [sp, #4]
   1d77a:	9b05      	ldr	r3, [sp, #20]
	event.curr.param = NULL;
   1d77c:	6020      	str	r0, [r4, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1d77e:	9300      	str	r3, [sp, #0]
   1d780:	aa06      	add	r2, sp, #24
   1d782:	9b04      	ldr	r3, [sp, #16]
   1d784:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   1d788:	f7fd fe42 	bl	1b410 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1d78c:	2800      	cmp	r0, #0
   1d78e:	d0d4      	beq.n	1d73a <preempt+0x52>
   1d790:	f240 3201 	movw	r2, #769	; 0x301
		LL_ASSERT(ret == -ECANCELED);
   1d794:	4910      	ldr	r1, [pc, #64]	; (1d7d8 <preempt+0xf0>)
   1d796:	4811      	ldr	r0, [pc, #68]	; (1d7dc <preempt+0xf4>)
   1d798:	f00a f89b 	bl	278d2 <printk>
   1d79c:	4040      	eors	r0, r0
   1d79e:	f380 8811 	msr	BASEPRI, r0
   1d7a2:	f04f 0003 	mov.w	r0, #3
   1d7a6:	df02      	svc	2
   1d7a8:	e7c7      	b.n	1d73a <preempt+0x52>
			if (!iter->is_aborted &&
   1d7aa:	f890 3020 	ldrb.w	r3, [r0, #32]
   1d7ae:	079a      	lsls	r2, r3, #30
   1d7b0:	d4da      	bmi.n	1d768 <preempt+0x80>
			    event.curr.param == iter->prepare_param.param) {
   1d7b2:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1d7b4:	6821      	ldr	r1, [r4, #0]
   1d7b6:	4291      	cmp	r1, r2
   1d7b8:	d1d6      	bne.n	1d768 <preempt+0x80>
				iter->is_aborted = 1;
   1d7ba:	f043 0302 	orr.w	r3, r3, #2
   1d7be:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   1d7c2:	6983      	ldr	r3, [r0, #24]
   1d7c4:	4798      	blx	r3
   1d7c6:	e7cf      	b.n	1d768 <preempt+0x80>
		LL_ASSERT(ret == -ECANCELED);
   1d7c8:	378c      	adds	r7, #140	; 0x8c
   1d7ca:	d0b6      	beq.n	1d73a <preempt+0x52>
   1d7cc:	f240 3203 	movw	r2, #771	; 0x303
   1d7d0:	e7e0      	b.n	1d794 <preempt+0xac>
   1d7d2:	bf00      	nop
   1d7d4:	200050d0 	.word	0x200050d0
   1d7d8:	0003600b 	.word	0x0003600b
   1d7dc:	0003067f 	.word	0x0003067f

0001d7e0 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1d7e0:	2200      	movs	r2, #0
{
   1d7e2:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1d7e4:	4611      	mov	r1, r2
   1d7e6:	4b09      	ldr	r3, [pc, #36]	; (1d80c <preempt_ticker_cb+0x2c>)
   1d7e8:	2001      	movs	r0, #1
   1d7ea:	f7fb fb01 	bl	18df0 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1d7ee:	b158      	cbz	r0, 1d808 <preempt_ticker_cb+0x28>
   1d7f0:	f240 22c5 	movw	r2, #709	; 0x2c5
   1d7f4:	4906      	ldr	r1, [pc, #24]	; (1d810 <preempt_ticker_cb+0x30>)
   1d7f6:	4807      	ldr	r0, [pc, #28]	; (1d814 <preempt_ticker_cb+0x34>)
   1d7f8:	f00a f86b 	bl	278d2 <printk>
   1d7fc:	4040      	eors	r0, r0
   1d7fe:	f380 8811 	msr	BASEPRI, r0
   1d802:	f04f 0003 	mov.w	r0, #3
   1d806:	df02      	svc	2
}
   1d808:	bd08      	pop	{r3, pc}
   1d80a:	bf00      	nop
   1d80c:	200018b4 	.word	0x200018b4
   1d810:	0003600b 	.word	0x0003600b
   1d814:	0003067f 	.word	0x0003067f

0001d818 <lll_init>:
{
   1d818:	b510      	push	{r4, lr}
   1d81a:	4816      	ldr	r0, [pc, #88]	; (1d874 <lll_init+0x5c>)
   1d81c:	f005 fd8a 	bl	23334 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1d820:	4b15      	ldr	r3, [pc, #84]	; (1d878 <lll_init+0x60>)
   1d822:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1d824:	b310      	cbz	r0, 1d86c <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1d826:	4b15      	ldr	r3, [pc, #84]	; (1d87c <lll_init+0x64>)
   1d828:	2400      	movs	r4, #0
   1d82a:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1d82c:	f000 f984 	bl	1db38 <lll_clock_init>
	if (err < 0) {
   1d830:	2800      	cmp	r0, #0
   1d832:	db1a      	blt.n	1d86a <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1d834:	4622      	mov	r2, r4
   1d836:	4621      	mov	r1, r4
   1d838:	2001      	movs	r0, #1
   1d83a:	f7ea f961 	bl	7b00 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1d83e:	4622      	mov	r2, r4
   1d840:	4621      	mov	r1, r4
   1d842:	200b      	movs	r0, #11
   1d844:	f7ea f95c 	bl	7b00 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1d848:	4622      	mov	r2, r4
   1d84a:	4621      	mov	r1, r4
   1d84c:	2018      	movs	r0, #24
   1d84e:	f7ea f957 	bl	7b00 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1d852:	2001      	movs	r0, #1
   1d854:	f7ea f922 	bl	7a9c <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1d858:	200b      	movs	r0, #11
   1d85a:	f7ea f91f 	bl	7a9c <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1d85e:	2018      	movs	r0, #24
   1d860:	f7ea f91c 	bl	7a9c <arch_irq_enable>
	radio_setup();
   1d864:	f00f fd57 	bl	2d316 <radio_setup>
	return 0;
   1d868:	4620      	mov	r0, r4
}
   1d86a:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1d86c:	f06f 0012 	mvn.w	r0, #18
   1d870:	e7fb      	b.n	1d86a <lll_init+0x52>
   1d872:	bf00      	nop
   1d874:	00035ffb 	.word	0x00035ffb
   1d878:	200050cc 	.word	0x200050cc
   1d87c:	200050d0 	.word	0x200050d0

0001d880 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1d880:	4b0c      	ldr	r3, [pc, #48]	; (1d8b4 <lll_csrand_get+0x34>)
{
   1d882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d886:	4606      	mov	r6, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1d888:	681c      	ldr	r4, [r3, #0]
   1d88a:	b28f      	uxth	r7, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1d88c:	68a5      	ldr	r5, [r4, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1d88e:	682b      	ldr	r3, [r5, #0]
   1d890:	b943      	cbnz	r3, 1d8a4 <lll_csrand_get+0x24>
   1d892:	4909      	ldr	r1, [pc, #36]	; (1d8b8 <lll_csrand_get+0x38>)
   1d894:	4809      	ldr	r0, [pc, #36]	; (1d8bc <lll_csrand_get+0x3c>)
   1d896:	224c      	movs	r2, #76	; 0x4c
   1d898:	f00a f81b 	bl	278d2 <printk>
   1d89c:	214c      	movs	r1, #76	; 0x4c
   1d89e:	4806      	ldr	r0, [pc, #24]	; (1d8b8 <lll_csrand_get+0x38>)
   1d8a0:	f00a fa90 	bl	27dc4 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1d8a4:	682b      	ldr	r3, [r5, #0]
   1d8a6:	463a      	mov	r2, r7
   1d8a8:	4631      	mov	r1, r6
   1d8aa:	4620      	mov	r0, r4
}
   1d8ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d8b0:	4718      	bx	r3
   1d8b2:	bf00      	nop
   1d8b4:	200050cc 	.word	0x200050cc
   1d8b8:	00035fce 	.word	0x00035fce
   1d8bc:	0003067f 	.word	0x0003067f

0001d8c0 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1d8c0:	4b08      	ldr	r3, [pc, #32]	; (1d8e4 <lll_csrand_isr_get+0x24>)
{
   1d8c2:	b430      	push	{r4, r5}
   1d8c4:	4605      	mov	r5, r0
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1d8c6:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1d8c8:	6883      	ldr	r3, [r0, #8]
   1d8ca:	685c      	ldr	r4, [r3, #4]
   1d8cc:	b28a      	uxth	r2, r1
   1d8ce:	b124      	cbz	r4, 1d8da <lll_csrand_isr_get+0x1a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1d8d0:	4629      	mov	r1, r5
   1d8d2:	46a4      	mov	ip, r4
   1d8d4:	2300      	movs	r3, #0
}
   1d8d6:	bc30      	pop	{r4, r5}
   1d8d8:	4760      	bx	ip
   1d8da:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d8de:	bc30      	pop	{r4, r5}
   1d8e0:	4770      	bx	lr
   1d8e2:	bf00      	nop
   1d8e4:	200050cc 	.word	0x200050cc

0001d8e8 <lll_resume>:
{
   1d8e8:	b507      	push	{r0, r1, r2, lr}
		      next->prio, &next->prepare_param, next->is_resume);
   1d8ea:	f890 3020 	ldrb.w	r3, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1d8ee:	f003 0301 	and.w	r3, r3, #1
   1d8f2:	e9cd 0300 	strd	r0, r3, [sp]
   1d8f6:	69c3      	ldr	r3, [r0, #28]
   1d8f8:	6902      	ldr	r2, [r0, #16]
   1d8fa:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1d8fe:	f7ff fe93 	bl	1d628 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1d902:	b160      	cbz	r0, 1d91e <lll_resume+0x36>
   1d904:	3077      	adds	r0, #119	; 0x77
   1d906:	d00a      	beq.n	1d91e <lll_resume+0x36>
   1d908:	22e9      	movs	r2, #233	; 0xe9
   1d90a:	4906      	ldr	r1, [pc, #24]	; (1d924 <lll_resume+0x3c>)
   1d90c:	4806      	ldr	r0, [pc, #24]	; (1d928 <lll_resume+0x40>)
   1d90e:	f009 ffe0 	bl	278d2 <printk>
   1d912:	4040      	eors	r0, r0
   1d914:	f380 8811 	msr	BASEPRI, r0
   1d918:	f04f 0003 	mov.w	r0, #3
   1d91c:	df02      	svc	2
}
   1d91e:	b003      	add	sp, #12
   1d920:	f85d fb04 	ldr.w	pc, [sp], #4
   1d924:	0003600b 	.word	0x0003600b
   1d928:	0003067f 	.word	0x0003067f

0001d92c <lll_disable>:
{
   1d92c:	b513      	push	{r0, r1, r4, lr}
   1d92e:	4b1a      	ldr	r3, [pc, #104]	; (1d998 <lll_disable+0x6c>)
	if (!param || (param == event.curr.param)) {
   1d930:	4604      	mov	r4, r0
   1d932:	b110      	cbz	r0, 1d93a <lll_disable+0xe>
   1d934:	681a      	ldr	r2, [r3, #0]
   1d936:	4282      	cmp	r2, r0
   1d938:	d105      	bne.n	1d946 <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
   1d93a:	689a      	ldr	r2, [r3, #8]
   1d93c:	b16a      	cbz	r2, 1d95a <lll_disable+0x2e>
   1d93e:	6819      	ldr	r1, [r3, #0]
   1d940:	b159      	cbz	r1, 1d95a <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
   1d942:	2000      	movs	r0, #0
   1d944:	4790      	blx	r2
		idx = UINT8_MAX;
   1d946:	23ff      	movs	r3, #255	; 0xff
   1d948:	f88d 3007 	strb.w	r3, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   1d94c:	f10d 0007 	add.w	r0, sp, #7
   1d950:	f7fd fec2 	bl	1b6d8 <ull_prepare_dequeue_iter>
		while (next) {
   1d954:	b978      	cbnz	r0, 1d976 <lll_disable+0x4a>
}
   1d956:	b002      	add	sp, #8
   1d958:	bd10      	pop	{r4, pc}
			LL_ASSERT(!param);
   1d95a:	2c00      	cmp	r4, #0
   1d95c:	d0f3      	beq.n	1d946 <lll_disable+0x1a>
   1d95e:	22f3      	movs	r2, #243	; 0xf3
   1d960:	490e      	ldr	r1, [pc, #56]	; (1d99c <lll_disable+0x70>)
   1d962:	480f      	ldr	r0, [pc, #60]	; (1d9a0 <lll_disable+0x74>)
   1d964:	f009 ffb5 	bl	278d2 <printk>
   1d968:	4040      	eors	r0, r0
   1d96a:	f380 8811 	msr	BASEPRI, r0
   1d96e:	f04f 0003 	mov.w	r0, #3
   1d972:	df02      	svc	2
   1d974:	e7e7      	b.n	1d946 <lll_disable+0x1a>
			if (!next->is_aborted &&
   1d976:	f890 3020 	ldrb.w	r3, [r0, #32]
   1d97a:	079b      	lsls	r3, r3, #30
   1d97c:	d4e6      	bmi.n	1d94c <lll_disable+0x20>
   1d97e:	68c1      	ldr	r1, [r0, #12]
   1d980:	b10c      	cbz	r4, 1d986 <lll_disable+0x5a>
			    (!param || (param == next->prepare_param.param))) {
   1d982:	428c      	cmp	r4, r1
   1d984:	d1e2      	bne.n	1d94c <lll_disable+0x20>
				next->is_aborted = 1;
   1d986:	f890 3020 	ldrb.w	r3, [r0, #32]
   1d98a:	f043 0302 	orr.w	r3, r3, #2
   1d98e:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1d992:	6983      	ldr	r3, [r0, #24]
   1d994:	4798      	blx	r3
   1d996:	e7d9      	b.n	1d94c <lll_disable+0x20>
   1d998:	200050d0 	.word	0x200050d0
   1d99c:	0003600b 	.word	0x0003600b
   1d9a0:	0003067f 	.word	0x0003067f

0001d9a4 <lll_done>:
{
   1d9a4:	b510      	push	{r4, lr}
   1d9a6:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1d9a8:	f7fd fd66 	bl	1b478 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1d9ac:	b174      	cbz	r4, 1d9cc <lll_done+0x28>
   1d9ae:	b958      	cbnz	r0, 1d9c8 <lll_done+0x24>
   1d9b0:	f44f 7293 	mov.w	r2, #294	; 0x126
   1d9b4:	4919      	ldr	r1, [pc, #100]	; (1da1c <lll_done+0x78>)
   1d9b6:	481a      	ldr	r0, [pc, #104]	; (1da20 <lll_done+0x7c>)
   1d9b8:	f009 ff8b 	bl	278d2 <printk>
   1d9bc:	4040      	eors	r0, r0
   1d9be:	f380 8811 	msr	BASEPRI, r0
   1d9c2:	f04f 0003 	mov.w	r0, #3
   1d9c6:	df02      	svc	2
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1d9c8:	6820      	ldr	r0, [r4, #0]
   1d9ca:	e014      	b.n	1d9f6 <lll_done+0x52>
		LL_ASSERT(event.curr.abort_cb);
   1d9cc:	4c15      	ldr	r4, [pc, #84]	; (1da24 <lll_done+0x80>)
   1d9ce:	68a3      	ldr	r3, [r4, #8]
   1d9d0:	b95b      	cbnz	r3, 1d9ea <lll_done+0x46>
   1d9d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
   1d9d6:	4911      	ldr	r1, [pc, #68]	; (1da1c <lll_done+0x78>)
   1d9d8:	4811      	ldr	r0, [pc, #68]	; (1da20 <lll_done+0x7c>)
   1d9da:	f009 ff7a 	bl	278d2 <printk>
   1d9de:	4040      	eors	r0, r0
   1d9e0:	f380 8811 	msr	BASEPRI, r0
   1d9e4:	f04f 0003 	mov.w	r0, #3
   1d9e8:	df02      	svc	2
		param = event.curr.param;
   1d9ea:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1d9ec:	2300      	movs	r3, #0
   1d9ee:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1d9f0:	6023      	str	r3, [r4, #0]
		if (param) {
   1d9f2:	b108      	cbz	r0, 1d9f8 <lll_done+0x54>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1d9f4:	6800      	ldr	r0, [r0, #0]
   1d9f6:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1d9f8:	f7fd fe9c 	bl	1b734 <ull_event_done>
	LL_ASSERT(evdone);
   1d9fc:	b958      	cbnz	r0, 1da16 <lll_done+0x72>
   1d9fe:	f44f 72a2 	mov.w	r2, #324	; 0x144
   1da02:	4906      	ldr	r1, [pc, #24]	; (1da1c <lll_done+0x78>)
   1da04:	4806      	ldr	r0, [pc, #24]	; (1da20 <lll_done+0x7c>)
   1da06:	f009 ff64 	bl	278d2 <printk>
   1da0a:	4040      	eors	r0, r0
   1da0c:	f380 8811 	msr	BASEPRI, r0
   1da10:	f04f 0003 	mov.w	r0, #3
   1da14:	df02      	svc	2
}
   1da16:	2000      	movs	r0, #0
   1da18:	bd10      	pop	{r4, pc}
   1da1a:	bf00      	nop
   1da1c:	0003600b 	.word	0x0003600b
   1da20:	0003067f 	.word	0x0003067f
   1da24:	200050d0 	.word	0x200050d0

0001da28 <lll_is_done>:
	return !event.curr.abort_cb;
   1da28:	4b02      	ldr	r3, [pc, #8]	; (1da34 <lll_is_done+0xc>)
   1da2a:	6898      	ldr	r0, [r3, #8]
}
   1da2c:	fab0 f080 	clz	r0, r0
   1da30:	0940      	lsrs	r0, r0, #5
   1da32:	4770      	bx	lr
   1da34:	200050d0 	.word	0x200050d0

0001da38 <lll_chan_set>:
	switch (chan) {
   1da38:	2826      	cmp	r0, #38	; 0x26
{
   1da3a:	b510      	push	{r4, lr}
   1da3c:	4604      	mov	r4, r0
	switch (chan) {
   1da3e:	d00b      	beq.n	1da58 <lll_chan_set+0x20>
   1da40:	2827      	cmp	r0, #39	; 0x27
   1da42:	d00b      	beq.n	1da5c <lll_chan_set+0x24>
   1da44:	2825      	cmp	r0, #37	; 0x25
   1da46:	d10b      	bne.n	1da60 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1da48:	2002      	movs	r0, #2
		radio_freq_chan_set(26);
   1da4a:	f001 fbd7 	bl	1f1fc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1da4e:	4620      	mov	r0, r4
}
   1da50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1da54:	f001 bbd8 	b.w	1f208 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1da58:	201a      	movs	r0, #26
   1da5a:	e7f6      	b.n	1da4a <lll_chan_set+0x12>
		radio_freq_chan_set(80);
   1da5c:	2050      	movs	r0, #80	; 0x50
   1da5e:	e7f4      	b.n	1da4a <lll_chan_set+0x12>
		if (chan < 11) {
   1da60:	280a      	cmp	r0, #10
   1da62:	d802      	bhi.n	1da6a <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
   1da64:	3002      	adds	r0, #2
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1da66:	0040      	lsls	r0, r0, #1
   1da68:	e7ef      	b.n	1da4a <lll_chan_set+0x12>
		} else if (chan < 40) {
   1da6a:	2827      	cmp	r0, #39	; 0x27
   1da6c:	d801      	bhi.n	1da72 <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1da6e:	3003      	adds	r0, #3
   1da70:	e7f9      	b.n	1da66 <lll_chan_set+0x2e>
			LL_ASSERT(0);
   1da72:	f240 12a7 	movw	r2, #423	; 0x1a7
   1da76:	4905      	ldr	r1, [pc, #20]	; (1da8c <lll_chan_set+0x54>)
   1da78:	4805      	ldr	r0, [pc, #20]	; (1da90 <lll_chan_set+0x58>)
   1da7a:	f009 ff2a 	bl	278d2 <printk>
   1da7e:	4040      	eors	r0, r0
   1da80:	f380 8811 	msr	BASEPRI, r0
   1da84:	f04f 0003 	mov.w	r0, #3
   1da88:	df02      	svc	2
   1da8a:	e7e0      	b.n	1da4e <lll_chan_set+0x16>
   1da8c:	0003600b 	.word	0x0003600b
   1da90:	0003067f 	.word	0x0003067f

0001da94 <lll_isr_cleanup>:
{
   1da94:	b508      	push	{r3, lr}
	radio_isr_set(isr_race, param);
   1da96:	4601      	mov	r1, r0
   1da98:	480f      	ldr	r0, [pc, #60]	; (1dad8 <lll_isr_cleanup+0x44>)
   1da9a:	f001 fb55 	bl	1f148 <radio_isr_set>
	if (!radio_is_idle()) {
   1da9e:	f001 fc53 	bl	1f348 <radio_is_idle>
   1daa2:	b908      	cbnz	r0, 1daa8 <lll_isr_cleanup+0x14>
		radio_disable();
   1daa4:	f001 fc1e 	bl	1f2e4 <radio_disable>
	radio_tmr_stop();
   1daa8:	f001 fdb2 	bl	1f610 <radio_tmr_stop>
	err = lll_hfclock_off();
   1daac:	f000 f886 	bl	1dbbc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1dab0:	2800      	cmp	r0, #0
   1dab2:	da0b      	bge.n	1dacc <lll_isr_cleanup+0x38>
   1dab4:	f240 220a 	movw	r2, #522	; 0x20a
   1dab8:	4908      	ldr	r1, [pc, #32]	; (1dadc <lll_isr_cleanup+0x48>)
   1daba:	4809      	ldr	r0, [pc, #36]	; (1dae0 <lll_isr_cleanup+0x4c>)
   1dabc:	f009 ff09 	bl	278d2 <printk>
   1dac0:	4040      	eors	r0, r0
   1dac2:	f380 8811 	msr	BASEPRI, r0
   1dac6:	f04f 0003 	mov.w	r0, #3
   1daca:	df02      	svc	2
	lll_done(NULL);
   1dacc:	2000      	movs	r0, #0
}
   1dace:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1dad2:	f7ff bf67 	b.w	1d9a4 <lll_done>
   1dad6:	bf00      	nop
   1dad8:	0002ce25 	.word	0x0002ce25
   1dadc:	0003600b 	.word	0x0003600b
   1dae0:	0003067f 	.word	0x0003067f

0001dae4 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1dae4:	b530      	push	{r4, r5, lr}
   1dae6:	4604      	mov	r4, r0
   1dae8:	b08b      	sub	sp, #44	; 0x2c
   1daea:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1daec:	2201      	movs	r2, #1
   1daee:	2100      	movs	r1, #0
   1daf0:	a804      	add	r0, sp, #16
   1daf2:	f010 faa6 	bl	2e042 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1daf6:	2300      	movs	r3, #0
   1daf8:	9303      	str	r3, [sp, #12]
   1dafa:	4b0e      	ldr	r3, [pc, #56]	; (1db34 <blocking_on+0x50>)
   1dafc:	9301      	str	r3, [sp, #4]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1dafe:	4669      	mov	r1, sp
   1db00:	2303      	movs	r3, #3
   1db02:	4620      	mov	r0, r4
   1db04:	9302      	str	r3, [sp, #8]
   1db06:	f7e7 f899 	bl	4c3c <onoff_request>
	if (err < 0) {
   1db0a:	2800      	cmp	r0, #0
   1db0c:	db10      	blt.n	1db30 <blocking_on+0x4c>
   1db0e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   1db12:	f240 30e7 	movw	r0, #999	; 0x3e7
   1db16:	2100      	movs	r1, #0
   1db18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1db1c:	2300      	movs	r3, #0
   1db1e:	fbe4 0105 	umlal	r0, r1, r4, r5
   1db22:	f7e3 ff33 	bl	198c <__aeabi_uldivmod>
   1db26:	4602      	mov	r2, r0
   1db28:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1db2a:	a804      	add	r0, sp, #16
   1db2c:	f007 fa82 	bl	25034 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1db30:	b00b      	add	sp, #44	; 0x2c
   1db32:	bd30      	pop	{r4, r5, pc}
   1db34:	0002cefd 	.word	0x0002cefd

0001db38 <lll_clock_init>:

int lll_clock_init(void)
{
   1db38:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1db3a:	2001      	movs	r0, #1
   1db3c:	f7e8 fdde 	bl	66fc <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1db40:	4904      	ldr	r1, [pc, #16]	; (1db54 <lll_clock_init+0x1c>)
   1db42:	2300      	movs	r3, #0
   1db44:	604b      	str	r3, [r1, #4]
   1db46:	60cb      	str	r3, [r1, #12]
   1db48:	2301      	movs	r3, #1
   1db4a:	608b      	str	r3, [r1, #8]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1db4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_request(mgr, &lf_cli);
   1db50:	f7e7 b874 	b.w	4c3c <onoff_request>
   1db54:	200050e8 	.word	0x200050e8

0001db58 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1db58:	4b0c      	ldr	r3, [pc, #48]	; (1db8c <lll_clock_wait+0x34>)
   1db5a:	781a      	ldrb	r2, [r3, #0]
{
   1db5c:	b510      	push	{r4, lr}
	if (done) {
   1db5e:	b10a      	cbz	r2, 1db64 <lll_clock_wait+0xc>
		return 0;
   1db60:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1db62:	bd10      	pop	{r4, pc}
	done = true;
   1db64:	2001      	movs	r0, #1
   1db66:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1db68:	f7e8 fdc8 	bl	66fc <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1db6c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1db70:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1db72:	f7ff ffb7 	bl	1dae4 <blocking_on>
	if (err) {
   1db76:	2800      	cmp	r0, #0
   1db78:	d1f3      	bne.n	1db62 <lll_clock_wait+0xa>
	err = onoff_release(mgr);
   1db7a:	4620      	mov	r0, r4
   1db7c:	f7e7 f8e0 	bl	4d40 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1db80:	2802      	cmp	r0, #2
   1db82:	d0ed      	beq.n	1db60 <lll_clock_wait+0x8>
		return -EIO;
   1db84:	f06f 0004 	mvn.w	r0, #4
   1db88:	e7eb      	b.n	1db62 <lll_clock_wait+0xa>
   1db8a:	bf00      	nop
   1db8c:	20005897 	.word	0x20005897

0001db90 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1db90:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1db92:	4b09      	ldr	r3, [pc, #36]	; (1dbb8 <lll_hfclock_on+0x28>)
   1db94:	f3bf 8f5b 	dmb	ish
   1db98:	e853 2f00 	ldrex	r2, [r3]
   1db9c:	1c51      	adds	r1, r2, #1
   1db9e:	e843 1000 	strex	r0, r1, [r3]
   1dba2:	2800      	cmp	r0, #0
   1dba4:	d1f8      	bne.n	1db98 <lll_hfclock_on+0x8>
   1dba6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1dbaa:	2a00      	cmp	r2, #0
   1dbac:	dc01      	bgt.n	1dbb2 <lll_hfclock_on+0x22>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_request();
   1dbae:	f7e8 fdad 	bl	670c <z_nrf_clock_bt_ctlr_hf_request>
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1dbb2:	2000      	movs	r0, #0
   1dbb4:	bd08      	pop	{r3, pc}
   1dbb6:	bf00      	nop
   1dbb8:	200050e4 	.word	0x200050e4

0001dbbc <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1dbbc:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1dbbe:	4b0c      	ldr	r3, [pc, #48]	; (1dbf0 <lll_hfclock_off+0x34>)
   1dbc0:	681a      	ldr	r2, [r3, #0]
   1dbc2:	2a00      	cmp	r2, #0
   1dbc4:	dd10      	ble.n	1dbe8 <lll_hfclock_off+0x2c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1dbc6:	f3bf 8f5b 	dmb	ish
   1dbca:	e853 2f00 	ldrex	r2, [r3]
   1dbce:	1e51      	subs	r1, r2, #1
   1dbd0:	e843 1000 	strex	r0, r1, [r3]
   1dbd4:	2800      	cmp	r0, #0
   1dbd6:	d1f8      	bne.n	1dbca <lll_hfclock_off+0xe>
   1dbd8:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1dbdc:	2a01      	cmp	r2, #1
   1dbde:	dc01      	bgt.n	1dbe4 <lll_hfclock_off+0x28>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_release();
   1dbe0:	f7e8 fdaa 	bl	6738 <z_nrf_clock_bt_ctlr_hf_release>
		return 0;
   1dbe4:	2000      	movs	r0, #0
   1dbe6:	e001      	b.n	1dbec <lll_hfclock_off+0x30>
		return -EALREADY;
   1dbe8:	f06f 0077 	mvn.w	r0, #119	; 0x77
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1dbec:	bd08      	pop	{r3, pc}
   1dbee:	bf00      	nop
   1dbf0:	200050e4 	.word	0x200050e4

0001dbf4 <lll_clock_ppm_get>:
}

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
}
   1dbf4:	4b01      	ldr	r3, [pc, #4]	; (1dbfc <lll_clock_ppm_get+0x8>)
   1dbf6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1dbfa:	4770      	bx	lr
   1dbfc:	00030274 	.word	0x00030274

0001dc00 <is_abort_cb>:
	struct lll_adv *lll = curr;
	struct pdu_adv *pdu;
#endif /* CONFIG_BT_PERIPHERAL */

	/* TODO: prio check */
	if (next != curr) {
   1dc00:	4282      	cmp	r2, r0
{
   1dc02:	b508      	push	{r3, lr}
	if (next != curr) {
   1dc04:	d01a      	beq.n	1dc3c <is_abort_cb+0x3c>
		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->is_hdcd) {
   1dc06:	7b12      	ldrb	r2, [r2, #12]
   1dc08:	07d2      	lsls	r2, r2, #31
   1dc0a:	d524      	bpl.n	1dc56 <is_abort_cb+0x56>
			int err;

			/* wrap back after the pre-empter */
			*resume_cb = resume_prepare_cb;
   1dc0c:	4a13      	ldr	r2, [pc, #76]	; (1dc5c <is_abort_cb+0x5c>)
   1dc0e:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1dc10:	9b02      	ldr	r3, [sp, #8]
   1dc12:	2200      	movs	r2, #0
   1dc14:	601a      	str	r2, [r3, #0]

			/* Retain HF clk */
			err = lll_hfclock_on();
   1dc16:	f7ff ffbb 	bl	1db90 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1dc1a:	2800      	cmp	r0, #0
   1dc1c:	da0b      	bge.n	1dc36 <is_abort_cb+0x36>
   1dc1e:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1dc22:	490f      	ldr	r1, [pc, #60]	; (1dc60 <is_abort_cb+0x60>)
   1dc24:	480f      	ldr	r0, [pc, #60]	; (1dc64 <is_abort_cb+0x64>)
   1dc26:	f009 fe54 	bl	278d2 <printk>
   1dc2a:	4040      	eors	r0, r0
   1dc2c:	f380 8811 	msr	BASEPRI, r0
   1dc30:	f04f 0003 	mov.w	r0, #3
   1dc34:	df02      	svc	2
   1dc36:	f06f 000a 	mvn.w	r0, #10
   1dc3a:	e00b      	b.n	1dc54 <is_abort_cb+0x54>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1dc3c:	7c13      	ldrb	r3, [r2, #16]
   1dc3e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		}
	}

#if defined(CONFIG_BT_PERIPHERAL)
	pdu = lll_adv_data_curr_get(lll);
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1dc42:	6953      	ldr	r3, [r2, #20]
   1dc44:	781b      	ldrb	r3, [r3, #0]
   1dc46:	f003 030f 	and.w	r3, r3, #15
   1dc4a:	2b01      	cmp	r3, #1
		return 0;
   1dc4c:	bf14      	ite	ne
   1dc4e:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   1dc52:	2000      	moveq	r0, #0
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return -ECANCELED;
}
   1dc54:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   1dc56:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1dc5a:	e7fb      	b.n	1dc54 <is_abort_cb+0x54>
   1dc5c:	0002cf2f 	.word	0x0002cf2f
   1dc60:	00036063 	.word	0x00036063
   1dc64:	0003067f 	.word	0x0003067f

0001dc68 <abort_cb>:

static void abort_cb(struct lll_prepare_param *prepare_param, void *param)
{
   1dc68:	b510      	push	{r4, lr}
   1dc6a:	460c      	mov	r4, r1
	int err;

	/* NOTE: This is not a prepare being cancelled */
	if (!prepare_param) {
   1dc6c:	b930      	cbnz	r0, 1dc7c <abort_cb+0x14>
		/* Perform event abort here.
		 * After event has been cleanly aborted, clean up resources
		 * and dispatch event done.
		 */
		radio_isr_set(isr_abort, param);
   1dc6e:	480e      	ldr	r0, [pc, #56]	; (1dca8 <abort_cb+0x40>)
   1dc70:	f001 fa6a 	bl	1f148 <radio_isr_set>
	 */
	err = lll_hfclock_off();
	LL_ASSERT(err >= 0);

	lll_done(param);
}
   1dc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1dc78:	f001 bb34 	b.w	1f2e4 <radio_disable>
	err = lll_hfclock_off();
   1dc7c:	f7ff ff9e 	bl	1dbbc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1dc80:	2800      	cmp	r0, #0
   1dc82:	da0b      	bge.n	1dc9c <abort_cb+0x34>
   1dc84:	f240 2272 	movw	r2, #626	; 0x272
   1dc88:	4908      	ldr	r1, [pc, #32]	; (1dcac <abort_cb+0x44>)
   1dc8a:	4809      	ldr	r0, [pc, #36]	; (1dcb0 <abort_cb+0x48>)
   1dc8c:	f009 fe21 	bl	278d2 <printk>
   1dc90:	4040      	eors	r0, r0
   1dc92:	f380 8811 	msr	BASEPRI, r0
   1dc96:	f04f 0003 	mov.w	r0, #3
   1dc9a:	df02      	svc	2
	lll_done(param);
   1dc9c:	4620      	mov	r0, r4
}
   1dc9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1dca2:	f7ff be7f 	b.w	1d9a4 <lll_done>
   1dca6:	bf00      	nop
   1dca8:	0002cf09 	.word	0x0002cf09
   1dcac:	00036063 	.word	0x00036063
   1dcb0:	0003067f 	.word	0x0003067f

0001dcb4 <isr_tx>:

static void isr_tx(void *param)
{
   1dcb4:	b538      	push	{r3, r4, r5, lr}
   1dcb6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_latency_capture();
	}

	/* Clear radio tx status and events */
	lll_isr_tx_status_reset();
   1dcb8:	f00f f8fa 	bl	2ceb0 <lll_isr_tx_status_reset>

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   1dcbc:	2096      	movs	r0, #150	; 0x96
   1dcbe:	f001 fbff 	bl	1f4c0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   1dcc2:	2300      	movs	r3, #0
   1dcc4:	461a      	mov	r2, r3
   1dcc6:	4619      	mov	r1, r3
   1dcc8:	4618      	mov	r0, r3
   1dcca:	f001 fb71 	bl	1f3b0 <radio_switch_complete_and_tx>

	radio_pkt_rx_set(radio_pkt_scratch_get());
   1dcce:	f001 fb5f 	bl	1f390 <radio_pkt_scratch_get>
   1dcd2:	f001 faef 	bl	1f2b4 <radio_pkt_rx_set>
	/* assert if radio packet ptr is not set and radio started rx */
	LL_ASSERT(!radio_is_ready());
   1dcd6:	f001 fb23 	bl	1f320 <radio_is_ready>
   1dcda:	b158      	cbz	r0, 1dcf4 <isr_tx+0x40>
   1dcdc:	f240 228e 	movw	r2, #654	; 0x28e
   1dce0:	4911      	ldr	r1, [pc, #68]	; (1dd28 <isr_tx+0x74>)
   1dce2:	4812      	ldr	r0, [pc, #72]	; (1dd2c <isr_tx+0x78>)
   1dce4:	f009 fdf5 	bl	278d2 <printk>
   1dce8:	4040      	eors	r0, r0
   1dcea:	f380 8811 	msr	BASEPRI, r0
   1dcee:	f04f 0003 	mov.w	r0, #3
   1dcf2:	df02      	svc	2

	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_cputime_capture();
	}

	radio_isr_set(isr_rx, param);
   1dcf4:	4621      	mov	r1, r4
   1dcf6:	480e      	ldr	r0, [pc, #56]	; (1dd30 <isr_tx+0x7c>)
   1dcf8:	f001 fa26 	bl	1f148 <radio_isr_set>
		radio_ar_configure(count, irks, 0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	/* +/- 2us active clock jitter, +1 us hcto compensation */
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1dcfc:	f001 fcda 	bl	1f6b4 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1dd00:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1dd02:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1dd04:	4608      	mov	r0, r1
   1dd06:	f00f fb2c 	bl	2d362 <radio_rx_chain_delay_get>
	hcto += addr_us_get(phy_p);
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1dd0a:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1dd0c:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1dd0e:	4608      	mov	r0, r1
   1dd10:	f00f fb23 	bl	2d35a <radio_tx_chain_delay_get>
   1dd14:	442c      	add	r4, r5
   1dd16:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1dd18:	1a20      	subs	r0, r4, r0
   1dd1a:	f001 fc85 	bl	1f628 <radio_tmr_hcto_configure>
		/* NOTE: as scratch packet is used to receive, it is safe to
		 * generate profile event using rx nodes.
		 */
		lll_prof_send();
	}
}
   1dd1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   1dd22:	f001 bcb9 	b.w	1f698 <radio_tmr_end_capture>
   1dd26:	bf00      	nop
   1dd28:	00036063 	.word	0x00036063
   1dd2c:	0003067f 	.word	0x0003067f
   1dd30:	0001e13d 	.word	0x0001e13d

0001dd34 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1dd34:	4b08      	ldr	r3, [pc, #32]	; (1dd58 <lll_adv_init+0x24>)
{
   1dd36:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1dd38:	1d18      	adds	r0, r3, #4
   1dd3a:	2205      	movs	r2, #5
   1dd3c:	2128      	movs	r1, #40	; 0x28
   1dd3e:	f00e fa8c 	bl	2c25a <mem_init>
	MFIFO_INIT(pdu_free);
   1dd42:	4b06      	ldr	r3, [pc, #24]	; (1dd5c <lll_adv_init+0x28>)
   1dd44:	2400      	movs	r4, #0
   1dd46:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1dd48:	2203      	movs	r2, #3
   1dd4a:	4621      	mov	r1, r4
   1dd4c:	4804      	ldr	r0, [pc, #16]	; (1dd60 <lll_adv_init+0x2c>)
   1dd4e:	f010 f978 	bl	2e042 <z_impl_k_sem_init>
}
   1dd52:	4620      	mov	r0, r4
   1dd54:	bd10      	pop	{r4, pc}
   1dd56:	bf00      	nop
   1dd58:	200050f8 	.word	0x200050f8
   1dd5c:	200018c4 	.word	0x200018c4
   1dd60:	200051c4 	.word	0x200051c4

0001dd64 <lll_adv_data_init>:
{
   1dd64:	b510      	push	{r4, lr}
   1dd66:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1dd68:	4805      	ldr	r0, [pc, #20]	; (1dd80 <lll_adv_data_init+0x1c>)
   1dd6a:	f00e fa8f 	bl	2c28c <mem_acquire>
	if (!p) {
   1dd6e:	b120      	cbz	r0, 1dd7a <lll_adv_data_init+0x16>
	p->len = 0U;
   1dd70:	2300      	movs	r3, #0
   1dd72:	7043      	strb	r3, [r0, #1]
	pdu->pdu[0] = (void *)p;
   1dd74:	6060      	str	r0, [r4, #4]
	return 0;
   1dd76:	4618      	mov	r0, r3
}
   1dd78:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1dd7a:	f06f 000b 	mvn.w	r0, #11
   1dd7e:	e7fb      	b.n	1dd78 <lll_adv_data_init+0x14>
   1dd80:	200050f8 	.word	0x200050f8

0001dd84 <lll_adv_pdu_alloc>:
{
   1dd84:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   1dd86:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   1dd88:	7843      	ldrb	r3, [r0, #1]
	first = pdu->first;
   1dd8a:	b2d2      	uxtb	r2, r2
	if (first == last) {
   1dd8c:	429a      	cmp	r2, r3
   1dd8e:	d132      	bne.n	1ddf6 <lll_adv_pdu_alloc+0x72>
		last++;
   1dd90:	3301      	adds	r3, #1
   1dd92:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1dd94:	2b02      	cmp	r3, #2
   1dd96:	d100      	bne.n	1dd9a <lll_adv_pdu_alloc+0x16>
			last = 0U;
   1dd98:	2300      	movs	r3, #0
	*idx = last;
   1dd9a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
   1dd9e:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1dda0:	6875      	ldr	r5, [r6, #4]
	if (p) {
   1dda2:	2d00      	cmp	r5, #0
   1dda4:	d134      	bne.n	1de10 <lll_adv_pdu_alloc+0x8c>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1dda6:	4c35      	ldr	r4, [pc, #212]	; (1de7c <lll_adv_pdu_alloc+0xf8>)
   1dda8:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   1ddaa:	78e1      	ldrb	r1, [r4, #3]
   1ddac:	7823      	ldrb	r3, [r4, #0]
   1ddae:	4291      	cmp	r1, r2
   1ddb0:	d028      	beq.n	1de04 <lll_adv_pdu_alloc+0x80>
	return *((void **)(fifo + first * size));
   1ddb2:	fb02 4303 	mla	r3, r2, r3, r4
   1ddb6:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1ddb8:	b325      	cbz	r5, 1de04 <lll_adv_pdu_alloc+0x80>
	return z_impl_k_sem_take(sem, timeout);
   1ddba:	2200      	movs	r2, #0
   1ddbc:	2300      	movs	r3, #0
   1ddbe:	4830      	ldr	r0, [pc, #192]	; (1de80 <lll_adv_pdu_alloc+0xfc>)
   1ddc0:	f007 f938 	bl	25034 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1ddc4:	b150      	cbz	r0, 1dddc <lll_adv_pdu_alloc+0x58>
   1ddc6:	22f7      	movs	r2, #247	; 0xf7
   1ddc8:	492e      	ldr	r1, [pc, #184]	; (1de84 <lll_adv_pdu_alloc+0x100>)
   1ddca:	482f      	ldr	r0, [pc, #188]	; (1de88 <lll_adv_pdu_alloc+0x104>)
   1ddcc:	f009 fd81 	bl	278d2 <printk>
   1ddd0:	4040      	eors	r0, r0
   1ddd2:	f380 8811 	msr	BASEPRI, r0
   1ddd6:	f04f 0003 	mov.w	r0, #3
   1ddda:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1dddc:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1ddde:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   1dde0:	7862      	ldrb	r2, [r4, #1]
   1dde2:	4299      	cmp	r1, r3
   1dde4:	d005      	beq.n	1ddf2 <lll_adv_pdu_alloc+0x6e>
	_first += 1U;
   1dde6:	3301      	adds	r3, #1
   1dde8:	b2db      	uxtb	r3, r3
		_first = 0U;
   1ddea:	429a      	cmp	r2, r3
   1ddec:	bf08      	it	eq
   1ddee:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1ddf0:	70a3      	strb	r3, [r4, #2]
	pdu->pdu[last] = (void *)p;
   1ddf2:	6075      	str	r5, [r6, #4]
	return p;
   1ddf4:	e00c      	b.n	1de10 <lll_adv_pdu_alloc+0x8c>
		pdu->last = first;
   1ddf6:	7042      	strb	r2, [r0, #1]
   1ddf8:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   1ddfc:	7804      	ldrb	r4, [r0, #0]
		if (first_latest != first) {
   1ddfe:	42a2      	cmp	r2, r4
   1de00:	d1c6      	bne.n	1dd90 <lll_adv_pdu_alloc+0xc>
   1de02:	e7ca      	b.n	1dd9a <lll_adv_pdu_alloc+0x16>
	p = mem_acquire(&mem_pdu.free);
   1de04:	4821      	ldr	r0, [pc, #132]	; (1de8c <lll_adv_pdu_alloc+0x108>)
   1de06:	f00e fa41 	bl	2c28c <mem_acquire>
	if (p) {
   1de0a:	b118      	cbz	r0, 1de14 <lll_adv_pdu_alloc+0x90>
		pdu->pdu[last] = (void *)p;
   1de0c:	6070      	str	r0, [r6, #4]
		return p;
   1de0e:	4605      	mov	r5, r0
}
   1de10:	4628      	mov	r0, r5
   1de12:	bd70      	pop	{r4, r5, r6, pc}
   1de14:	f04f 32ff 	mov.w	r2, #4294967295
   1de18:	f04f 33ff 	mov.w	r3, #4294967295
   1de1c:	4818      	ldr	r0, [pc, #96]	; (1de80 <lll_adv_pdu_alloc+0xfc>)
   1de1e:	f007 f909 	bl	25034 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1de22:	b158      	cbz	r0, 1de3c <lll_adv_pdu_alloc+0xb8>
   1de24:	f240 1207 	movw	r2, #263	; 0x107
   1de28:	4916      	ldr	r1, [pc, #88]	; (1de84 <lll_adv_pdu_alloc+0x100>)
   1de2a:	4817      	ldr	r0, [pc, #92]	; (1de88 <lll_adv_pdu_alloc+0x104>)
   1de2c:	f009 fd51 	bl	278d2 <printk>
   1de30:	4040      	eors	r0, r0
   1de32:	f380 8811 	msr	BASEPRI, r0
   1de36:	f04f 0003 	mov.w	r0, #3
   1de3a:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1de3c:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1de3e:	78e0      	ldrb	r0, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1de40:	7822      	ldrb	r2, [r4, #0]
   1de42:	7861      	ldrb	r1, [r4, #1]
   1de44:	4298      	cmp	r0, r3
   1de46:	d10d      	bne.n	1de64 <lll_adv_pdu_alloc+0xe0>
	LL_ASSERT(p);
   1de48:	f44f 7285 	mov.w	r2, #266	; 0x10a
   1de4c:	490d      	ldr	r1, [pc, #52]	; (1de84 <lll_adv_pdu_alloc+0x100>)
   1de4e:	480e      	ldr	r0, [pc, #56]	; (1de88 <lll_adv_pdu_alloc+0x104>)
   1de50:	f009 fd3f 	bl	278d2 <printk>
   1de54:	4040      	eors	r0, r0
   1de56:	f380 8811 	msr	BASEPRI, r0
   1de5a:	f04f 0003 	mov.w	r0, #3
   1de5e:	df02      	svc	2
   1de60:	2500      	movs	r5, #0
   1de62:	e7c6      	b.n	1ddf2 <lll_adv_pdu_alloc+0x6e>
	mem = *((void **)(fifo + _first * size));
   1de64:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   1de68:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1de6a:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   1de6c:	b2db      	uxtb	r3, r3
		_first = 0U;
   1de6e:	4299      	cmp	r1, r3
   1de70:	bf08      	it	eq
   1de72:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1de74:	70a3      	strb	r3, [r4, #2]
   1de76:	2d00      	cmp	r5, #0
   1de78:	d1bb      	bne.n	1ddf2 <lll_adv_pdu_alloc+0x6e>
   1de7a:	e7e5      	b.n	1de48 <lll_adv_pdu_alloc+0xc4>
   1de7c:	200018c4 	.word	0x200018c4
   1de80:	200051c4 	.word	0x200051c4
   1de84:	00036063 	.word	0x00036063
   1de88:	0003067f 	.word	0x0003067f
   1de8c:	200050f8 	.word	0x200050f8

0001de90 <lll_adv_pdu_latest_get>:
{
   1de90:	b570      	push	{r4, r5, r6, lr}
   1de92:	4604      	mov	r4, r0
	first = pdu->first;
   1de94:	7800      	ldrb	r0, [r0, #0]
	if (first != pdu->last) {
   1de96:	7863      	ldrb	r3, [r4, #1]
	first = pdu->first;
   1de98:	b2c0      	uxtb	r0, r0
	if (first != pdu->last) {
   1de9a:	4283      	cmp	r3, r0
   1de9c:	d02f      	beq.n	1defe <lll_adv_pdu_latest_get+0x6e>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1de9e:	4e1a      	ldr	r6, [pc, #104]	; (1df08 <lll_adv_pdu_latest_get+0x78>)
	last = last + 1;
   1dea0:	78f3      	ldrb	r3, [r6, #3]
	if (last == count) {
   1dea2:	7875      	ldrb	r5, [r6, #1]
   1dea4:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
   1dea6:	3301      	adds	r3, #1
   1dea8:	b2db      	uxtb	r3, r3
		last = 0U;
   1deaa:	429d      	cmp	r5, r3
   1deac:	bf08      	it	eq
   1deae:	2300      	moveq	r3, #0
	if (last == first) {
   1deb0:	429a      	cmp	r2, r3
   1deb2:	d10d      	bne.n	1ded0 <lll_adv_pdu_latest_get+0x40>
			LL_ASSERT(false);
   1deb4:	f240 121d 	movw	r2, #285	; 0x11d
   1deb8:	4914      	ldr	r1, [pc, #80]	; (1df0c <lll_adv_pdu_latest_get+0x7c>)
   1deba:	4815      	ldr	r0, [pc, #84]	; (1df10 <lll_adv_pdu_latest_get+0x80>)
   1debc:	f009 fd09 	bl	278d2 <printk>
   1dec0:	4040      	eors	r0, r0
   1dec2:	f380 8811 	msr	BASEPRI, r0
   1dec6:	f04f 0003 	mov.w	r0, #3
   1deca:	df02      	svc	2
   1decc:	2000      	movs	r0, #0
}
   1dece:	bd70      	pop	{r4, r5, r6, pc}
		first += 1U;
   1ded0:	1c45      	adds	r5, r0, #1
   1ded2:	b2ed      	uxtb	r5, r5
			first = 0U;
   1ded4:	2d02      	cmp	r5, #2
   1ded6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1deda:	bf08      	it	eq
   1dedc:	2500      	moveq	r5, #0
		*is_modified = 1U;
   1dede:	2201      	movs	r2, #1
		pdu->first = first;
   1dee0:	7025      	strb	r5, [r4, #0]
		*is_modified = 1U;
   1dee2:	700a      	strb	r2, [r1, #0]
		pdu->pdu[pdu_idx] = NULL;
   1dee4:	2200      	movs	r2, #0
		p = pdu->pdu[pdu_idx];
   1dee6:	6841      	ldr	r1, [r0, #4]
		pdu->pdu[pdu_idx] = NULL;
   1dee8:	6042      	str	r2, [r0, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1deea:	78f0      	ldrb	r0, [r6, #3]
   1deec:	7832      	ldrb	r2, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1deee:	fb00 6202 	mla	r2, r0, r2, r6
   1def2:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   1def4:	70f3      	strb	r3, [r6, #3]
	z_impl_k_sem_give(sem);
   1def6:	4807      	ldr	r0, [pc, #28]	; (1df14 <lll_adv_pdu_latest_get+0x84>)
   1def8:	f007 f860 	bl	24fbc <z_impl_k_sem_give>
   1defc:	4628      	mov	r0, r5
	return (void *)pdu->pdu[first];
   1defe:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1df02:	6840      	ldr	r0, [r0, #4]
   1df04:	e7e3      	b.n	1dece <lll_adv_pdu_latest_get+0x3e>
   1df06:	bf00      	nop
   1df08:	200018c4 	.word	0x200018c4
   1df0c:	00036063 	.word	0x00036063
   1df10:	0003067f 	.word	0x0003067f
   1df14:	200051c4 	.word	0x200051c4

0001df18 <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1df18:	7b03      	ldrb	r3, [r0, #12]
	return __builtin_ffs(op);
   1df1a:	f3c3 1302 	ubfx	r3, r3, #4, #3
{
   1df1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1df20:	2b00      	cmp	r3, #0
   1df22:	4604      	mov	r4, r0
   1df24:	fa93 f0a3 	rbit	r0, r3
   1df28:	fab0 f080 	clz	r0, r0
   1df2c:	bf08      	it	eq
   1df2e:	f04f 30ff 	moveq.w	r0, #4294967295
	LL_ASSERT(chan);
   1df32:	1c45      	adds	r5, r0, #1
   1df34:	d10b      	bne.n	1df4e <chan_prepare+0x36>
   1df36:	f240 3287 	movw	r2, #903	; 0x387
   1df3a:	4920      	ldr	r1, [pc, #128]	; (1dfbc <chan_prepare+0xa4>)
   1df3c:	4820      	ldr	r0, [pc, #128]	; (1dfc0 <chan_prepare+0xa8>)
   1df3e:	f009 fcc8 	bl	278d2 <printk>
   1df42:	4040      	eors	r0, r0
   1df44:	f380 8811 	msr	BASEPRI, r0
   1df48:	f04f 0003 	mov.w	r0, #3
   1df4c:	df02      	svc	2

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1df4e:	7b23      	ldrb	r3, [r4, #12]
   1df50:	f3c3 1202 	ubfx	r2, r3, #4, #3
   1df54:	1e51      	subs	r1, r2, #1
   1df56:	400a      	ands	r2, r1
   1df58:	f362 1306 	bfi	r3, r2, #4, #3
   1df5c:	7323      	strb	r3, [r4, #12]

	lll_chan_set(36 + chan);
   1df5e:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1df62:	f7ff fd69 	bl	1da38 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1df66:	2600      	movs	r6, #0
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1df68:	f10d 0107 	add.w	r1, sp, #7
   1df6c:	f104 0010 	add.w	r0, r4, #16
   1df70:	f88d 6007 	strb.w	r6, [sp, #7]
   1df74:	f7ff ff8c 	bl	1de90 <lll_adv_pdu_latest_get>
   1df78:	4605      	mov	r5, r0
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   1df7a:	f001 f9a1 	bl	1f2c0 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1df7e:	782b      	ldrb	r3, [r5, #0]
   1df80:	f003 030f 	and.w	r3, r3, #15
   1df84:	2b02      	cmp	r3, #2
   1df86:	d012      	beq.n	1dfae <chan_prepare+0x96>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1df88:	f10d 0107 	add.w	r1, sp, #7
   1df8c:	f104 001c 	add.w	r0, r4, #28
   1df90:	f7ff ff7e 	bl	1de90 <lll_adv_pdu_latest_get>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1df94:	4621      	mov	r1, r4
   1df96:	480b      	ldr	r0, [pc, #44]	; (1dfc4 <chan_prepare+0xac>)
   1df98:	f001 f8d6 	bl	1f148 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1df9c:	2096      	movs	r0, #150	; 0x96
   1df9e:	f001 fa8f 	bl	1f4c0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1dfa2:	4630      	mov	r0, r6
   1dfa4:	f001 f9f8 	bl	1f398 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1dfa8:	4628      	mov	r0, r5
   1dfaa:	b002      	add	sp, #8
   1dfac:	bd70      	pop	{r4, r5, r6, pc}
		radio_isr_set(isr_done, lll);
   1dfae:	4621      	mov	r1, r4
   1dfb0:	4805      	ldr	r0, [pc, #20]	; (1dfc8 <chan_prepare+0xb0>)
   1dfb2:	f001 f8c9 	bl	1f148 <radio_isr_set>
		radio_switch_complete_and_disable();
   1dfb6:	f001 fa05 	bl	1f3c4 <radio_switch_complete_and_disable>
	return pdu;
   1dfba:	e7f5      	b.n	1dfa8 <chan_prepare+0x90>
   1dfbc:	00036063 	.word	0x00036063
   1dfc0:	0003067f 	.word	0x0003067f
   1dfc4:	0001dcb5 	.word	0x0001dcb5
   1dfc8:	0002cf57 	.word	0x0002cf57

0001dfcc <prepare_cb>:
{
   1dfcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lll = p->param;
   1dfce:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1dfd0:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1dfd2:	f015 0501 	ands.w	r5, r5, #1
{
   1dfd6:	4606      	mov	r6, r0
	if (unlikely(lll_is_stop(lll))) {
   1dfd8:	d015      	beq.n	1e006 <prepare_cb+0x3a>
		err = lll_hfclock_off();
   1dfda:	f7ff fdef 	bl	1dbbc <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1dfde:	2800      	cmp	r0, #0
   1dfe0:	da0b      	bge.n	1dffa <prepare_cb+0x2e>
   1dfe2:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
   1dfe6:	4936      	ldr	r1, [pc, #216]	; (1e0c0 <prepare_cb+0xf4>)
   1dfe8:	4836      	ldr	r0, [pc, #216]	; (1e0c4 <prepare_cb+0xf8>)
   1dfea:	f009 fc72 	bl	278d2 <printk>
   1dfee:	4040      	eors	r0, r0
   1dff0:	f380 8811 	msr	BASEPRI, r0
   1dff4:	f04f 0003 	mov.w	r0, #3
   1dff8:	df02      	svc	2
		lll_done(NULL);
   1dffa:	2000      	movs	r0, #0
   1dffc:	f7ff fcd2 	bl	1d9a4 <lll_done>
}
   1e000:	2000      	movs	r0, #0
   1e002:	b003      	add	sp, #12
   1e004:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
   1e006:	f001 f8bf 	bl	1f188 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1e00a:	4628      	mov	r0, r5
   1e00c:	f001 f8f0 	bl	1f1f0 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1e010:	4629      	mov	r1, r5
   1e012:	4628      	mov	r0, r5
   1e014:	f001 f8dc 	bl	1f1d0 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1e018:	462a      	mov	r2, r5
   1e01a:	2125      	movs	r1, #37	; 0x25
   1e01c:	2008      	movs	r0, #8
   1e01e:	f001 f91d 	bl	1f25c <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1e022:	4b29      	ldr	r3, [pc, #164]	; (1e0c8 <prepare_cb+0xfc>)
   1e024:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1e026:	a801      	add	r0, sp, #4
   1e028:	f001 f900 	bl	1f22c <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1e02c:	4927      	ldr	r1, [pc, #156]	; (1e0cc <prepare_cb+0x100>)
   1e02e:	f240 605b 	movw	r0, #1627	; 0x65b
   1e032:	f001 f993 	bl	1f35c <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1e036:	7b23      	ldrb	r3, [r4, #12]
   1e038:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1e03c:	f362 1306 	bfi	r3, r2, #4, #3
   1e040:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   1e042:	4620      	mov	r0, r4
   1e044:	f7ff ff68 	bl	1df18 <chan_prepare>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1e048:	7b63      	ldrb	r3, [r4, #13]
   1e04a:	079b      	lsls	r3, r3, #30
   1e04c:	d007      	beq.n	1e05e <prepare_cb+0x92>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1e04e:	2001      	movs	r0, #1
   1e050:	f7ff fa62 	bl	1d518 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1e054:	1c82      	adds	r2, r0, #2
   1e056:	7841      	ldrb	r1, [r0, #1]
   1e058:	7800      	ldrb	r0, [r0, #0]
   1e05a:	f001 f9e3 	bl	1f424 <radio_filter_configure>
	evt = HDR_LLL2EVT(lll);
   1e05e:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1e060:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1e062:	4638      	mov	r0, r7
   1e064:	f00e ff01 	bl	2ce6a <lll_evt_offset_get>
   1e068:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1e06a:	6872      	ldr	r2, [r6, #4]
   1e06c:	f105 0109 	add.w	r1, r5, #9
   1e070:	2001      	movs	r0, #1
   1e072:	f001 fa31 	bl	1f4d8 <radio_tmr_start>
	radio_tmr_end_capture();
   1e076:	f001 fb0f 	bl	1f698 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1e07a:	4620      	mov	r0, r4
   1e07c:	f7fd fd98 	bl	1bbb0 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1e080:	1c81      	adds	r1, r0, #2
   1e082:	462a      	mov	r2, r5
   1e084:	b2c9      	uxtb	r1, r1
   1e086:	4638      	mov	r0, r7
   1e088:	f00e fefd 	bl	2ce86 <lll_preempt_calc>
   1e08c:	b130      	cbz	r0, 1e09c <prepare_cb+0xd0>
		radio_isr_set(isr_abort, lll);
   1e08e:	4621      	mov	r1, r4
   1e090:	480f      	ldr	r0, [pc, #60]	; (1e0d0 <prepare_cb+0x104>)
   1e092:	f001 f859 	bl	1f148 <radio_isr_set>
		radio_disable();
   1e096:	f001 f925 	bl	1f2e4 <radio_disable>
   1e09a:	e7b1      	b.n	1e000 <prepare_cb+0x34>
		ret = lll_prepare_done(lll);
   1e09c:	4620      	mov	r0, r4
   1e09e:	f00e fedf 	bl	2ce60 <lll_prepare_done>
		LL_ASSERT(!ret);
   1e0a2:	2800      	cmp	r0, #0
   1e0a4:	d0ac      	beq.n	1e000 <prepare_cb+0x34>
   1e0a6:	f240 2221 	movw	r2, #545	; 0x221
   1e0aa:	4905      	ldr	r1, [pc, #20]	; (1e0c0 <prepare_cb+0xf4>)
   1e0ac:	4805      	ldr	r0, [pc, #20]	; (1e0c4 <prepare_cb+0xf8>)
   1e0ae:	f009 fc10 	bl	278d2 <printk>
   1e0b2:	4040      	eors	r0, r0
   1e0b4:	f380 8811 	msr	BASEPRI, r0
   1e0b8:	f04f 0003 	mov.w	r0, #3
   1e0bc:	df02      	svc	2
   1e0be:	e79f      	b.n	1e000 <prepare_cb+0x34>
   1e0c0:	00036063 	.word	0x00036063
   1e0c4:	0003067f 	.word	0x0003067f
   1e0c8:	8e89bed6 	.word	0x8e89bed6
   1e0cc:	00555555 	.word	0x00555555
   1e0d0:	0002cf09 	.word	0x0002cf09

0001e0d4 <lll_adv_prepare>:
{
   1e0d4:	b513      	push	{r0, r1, r4, lr}
   1e0d6:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1e0d8:	f7ff fd5a 	bl	1db90 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1e0dc:	2800      	cmp	r0, #0
   1e0de:	da0b      	bge.n	1e0f8 <lll_adv_prepare+0x24>
   1e0e0:	f44f 729d 	mov.w	r2, #314	; 0x13a
   1e0e4:	4910      	ldr	r1, [pc, #64]	; (1e128 <lll_adv_prepare+0x54>)
   1e0e6:	4811      	ldr	r0, [pc, #68]	; (1e12c <lll_adv_prepare+0x58>)
   1e0e8:	f009 fbf3 	bl	278d2 <printk>
   1e0ec:	4040      	eors	r0, r0
   1e0ee:	f380 8811 	msr	BASEPRI, r0
   1e0f2:	f04f 0003 	mov.w	r0, #3
   1e0f6:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1e0f8:	9400      	str	r4, [sp, #0]
   1e0fa:	2300      	movs	r3, #0
   1e0fc:	4a0c      	ldr	r2, [pc, #48]	; (1e130 <lll_adv_prepare+0x5c>)
   1e0fe:	490d      	ldr	r1, [pc, #52]	; (1e134 <lll_adv_prepare+0x60>)
   1e100:	480d      	ldr	r0, [pc, #52]	; (1e138 <lll_adv_prepare+0x64>)
   1e102:	f00e fea4 	bl	2ce4e <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1e106:	b168      	cbz	r0, 1e124 <lll_adv_prepare+0x50>
   1e108:	3077      	adds	r0, #119	; 0x77
   1e10a:	d00b      	beq.n	1e124 <lll_adv_prepare+0x50>
   1e10c:	f240 123d 	movw	r2, #317	; 0x13d
   1e110:	4905      	ldr	r1, [pc, #20]	; (1e128 <lll_adv_prepare+0x54>)
   1e112:	4806      	ldr	r0, [pc, #24]	; (1e12c <lll_adv_prepare+0x58>)
   1e114:	f009 fbdd 	bl	278d2 <printk>
   1e118:	4040      	eors	r0, r0
   1e11a:	f380 8811 	msr	BASEPRI, r0
   1e11e:	f04f 0003 	mov.w	r0, #3
   1e122:	df02      	svc	2
}
   1e124:	b002      	add	sp, #8
   1e126:	bd10      	pop	{r4, pc}
   1e128:	00036063 	.word	0x00036063
   1e12c:	0003067f 	.word	0x0003067f
   1e130:	0001dfcd 	.word	0x0001dfcd
   1e134:	0001dc69 	.word	0x0001dc69
   1e138:	0001dc01 	.word	0x0001dc01

0001e13c <isr_rx>:
{
   1e13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e140:	b086      	sub	sp, #24
   1e142:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1e144:	f001 f8f6 	bl	1f334 <radio_is_done>
   1e148:	b2c5      	uxtb	r5, r0
	if (trx_done) {
   1e14a:	2d00      	cmp	r5, #0
   1e14c:	d062      	beq.n	1e214 <isr_rx+0xd8>
		crc_ok = radio_crc_is_valid();
   1e14e:	f001 f911 	bl	1f374 <radio_crc_is_valid>
   1e152:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
   1e154:	f001 f994 	bl	1f480 <radio_filter_has_match>
   1e158:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
   1e15c:	f001 f99a 	bl	1f494 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1e160:	f001 fac6 	bl	1f6f0 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   1e164:	f001 faac 	bl	1f6c0 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   1e168:	f001 f952 	bl	1f410 <radio_rssi_is_ready>
	lll_isr_status_reset();
   1e16c:	f00e feb0 	bl	2ced0 <lll_isr_status_reset>
	if (!trx_done) {
   1e170:	2d00      	cmp	r5, #0
   1e172:	f000 80bd 	beq.w	1e2f0 <isr_rx+0x1b4>
	if (crc_ok) {
   1e176:	2e00      	cmp	r6, #0
   1e178:	f000 80ba 	beq.w	1e2f0 <isr_rx+0x1b4>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
				    FILTER_IDX_NONE;
#else
	uint8_t rl_idx = FILTER_IDX_NONE;
   1e17c:	23ff      	movs	r3, #255	; 0xff
   1e17e:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
   1e182:	f001 f905 	bl	1f390 <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1e186:	7c23      	ldrb	r3, [r4, #16]
   1e188:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1e18c:	4605      	mov	r5, r0
   1e18e:	695e      	ldr	r6, [r3, #20]
	pdu_adv = lll_adv_data_curr_get(lll);

	addr = pdu_adv->adv_ind.addr;
   1e190:	46b0      	mov	r8, r6
	tx_addr = pdu_adv->tx_addr;
   1e192:	f818 7b02 	ldrb.w	r7, [r8], #2

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1e196:	f007 030f 	and.w	r3, r7, #15
   1e19a:	2b01      	cmp	r3, #1
	} else {
		tgt_addr = NULL;
	}
	rx_addr = pdu_adv->rx_addr;

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1e19c:	7803      	ldrb	r3, [r0, #0]
   1e19e:	f003 030f 	and.w	r3, r3, #15
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1e1a2:	bf0c      	ite	eq
   1e1a4:	3608      	addeq	r6, #8
		tgt_addr = NULL;
   1e1a6:	2600      	movne	r6, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1e1a8:	2b03      	cmp	r3, #3
	tx_addr = pdu_adv->tx_addr;
   1e1aa:	f3c7 1a80 	ubfx	sl, r7, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1e1ae:	ea4f 17d7 	mov.w	r7, r7, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1e1b2:	d132      	bne.n	1e21a <isr_rx+0xde>
   1e1b4:	7843      	ldrb	r3, [r0, #1]
   1e1b6:	2b0c      	cmp	r3, #12
   1e1b8:	f040 809a 	bne.w	1e2f0 <isr_rx+0x1b4>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1e1bc:	2e00      	cmp	r6, #0
   1e1be:	f040 8097 	bne.w	1e2f0 <isr_rx+0x1b4>
	    (tgt_addr == NULL) &&
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1e1c2:	f10d 0317 	add.w	r3, sp, #23
   1e1c6:	e9cd 9300 	strd	r9, r3, [sp]
   1e1ca:	4601      	mov	r1, r0
   1e1cc:	4643      	mov	r3, r8
   1e1ce:	4652      	mov	r2, sl
   1e1d0:	4620      	mov	r0, r4
   1e1d2:	f00e fee2 	bl	2cf9a <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   1e1d6:	b300      	cbz	r0, 1e21a <isr_rx+0xde>
				    &rl_idx)) {
		radio_isr_set(isr_done, lll);
   1e1d8:	4621      	mov	r1, r4
   1e1da:	4849      	ldr	r0, [pc, #292]	; (1e300 <isr_rx+0x1c4>)
   1e1dc:	f000 ffb4 	bl	1f148 <radio_isr_set>
		radio_switch_complete_and_disable();
   1e1e0:	f001 f8f0 	bl	1f3c4 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1e1e4:	7f23      	ldrb	r3, [r4, #28]
   1e1e6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1e1ea:	6a20      	ldr	r0, [r4, #32]
   1e1ec:	f001 f868 	bl	1f2c0 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   1e1f0:	f001 f896 	bl	1f320 <radio_is_ready>
   1e1f4:	b158      	cbz	r0, 1e20e <isr_rx+0xd2>
   1e1f6:	f240 32dd 	movw	r2, #989	; 0x3dd
   1e1fa:	4942      	ldr	r1, [pc, #264]	; (1e304 <isr_rx+0x1c8>)
   1e1fc:	4842      	ldr	r0, [pc, #264]	; (1e308 <isr_rx+0x1cc>)
   1e1fe:	f009 fb68 	bl	278d2 <printk>
   1e202:	4040      	eors	r0, r0
   1e204:	f380 8811 	msr	BASEPRI, r0
   1e208:	f04f 0003 	mov.w	r0, #3
   1e20c:	df02      	svc	2
}
   1e20e:	b006      	add	sp, #24
   1e210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   1e214:	462e      	mov	r6, r5
   1e216:	46a9      	mov	r9, r5
   1e218:	e7a8      	b.n	1e16c <isr_rx+0x30>
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */
		return 0;

#if defined(CONFIG_BT_PERIPHERAL)
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1e21a:	782b      	ldrb	r3, [r5, #0]
   1e21c:	f003 030f 	and.w	r3, r3, #15
   1e220:	2b05      	cmp	r3, #5
   1e222:	d165      	bne.n	1e2f0 <isr_rx+0x1b4>
   1e224:	786b      	ldrb	r3, [r5, #1]
   1e226:	2b22      	cmp	r3, #34	; 0x22
   1e228:	d162      	bne.n	1e2f0 <isr_rx+0x1b4>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1e22a:	f10d 0317 	add.w	r3, sp, #23
   1e22e:	e9cd 9302 	strd	r9, r3, [sp, #8]
   1e232:	e9cd 7600 	strd	r7, r6, [sp]
   1e236:	4643      	mov	r3, r8
   1e238:	4652      	mov	r2, sl
   1e23a:	4629      	mov	r1, r5
   1e23c:	4620      	mov	r0, r4
   1e23e:	f00e fec4 	bl	2cfca <lll_adv_connect_ind_check>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1e242:	2800      	cmp	r0, #0
   1e244:	d054      	beq.n	1e2f0 <isr_rx+0x1b4>
					     rx_addr, tgt_addr,
					     devmatch_ok, &rl_idx) &&
   1e246:	68a3      	ldr	r3, [r4, #8]
   1e248:	2b00      	cmp	r3, #0
   1e24a:	d051      	beq.n	1e2f0 <isr_rx+0x1b4>
		int ret;

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			rx = ull_pdu_rx_alloc_peek(4);
		} else {
			rx = ull_pdu_rx_alloc_peek(3);
   1e24c:	2003      	movs	r0, #3
   1e24e:	f7fd f899 	bl	1b384 <ull_pdu_rx_alloc_peek>
		}

		if (!rx) {
   1e252:	2800      	cmp	r0, #0
   1e254:	d04c      	beq.n	1e2f0 <isr_rx+0x1b4>
			return -ENOBUFS;
		}

		radio_isr_set(isr_abort, lll);
   1e256:	4621      	mov	r1, r4
   1e258:	482c      	ldr	r0, [pc, #176]	; (1e30c <isr_rx+0x1d0>)
   1e25a:	f000 ff75 	bl	1f148 <radio_isr_set>
		radio_disable();
   1e25e:	f001 f841 	bl	1f2e4 <radio_disable>

		/* assert if radio started tx */
		LL_ASSERT(!radio_is_ready());
   1e262:	f001 f85d 	bl	1f320 <radio_is_ready>
   1e266:	b158      	cbz	r0, 1e280 <isr_rx+0x144>
   1e268:	f240 421b 	movw	r2, #1051	; 0x41b
   1e26c:	4925      	ldr	r1, [pc, #148]	; (1e304 <isr_rx+0x1c8>)
   1e26e:	4826      	ldr	r0, [pc, #152]	; (1e308 <isr_rx+0x1cc>)
   1e270:	f009 fb2f 	bl	278d2 <printk>
   1e274:	4040      	eors	r0, r0
   1e276:	f380 8811 	msr	BASEPRI, r0
   1e27a:	f04f 0003 	mov.w	r0, #3
   1e27e:	df02      	svc	2
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   1e280:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
   1e282:	f043 0201 	orr.w	r2, r3, #1
		}
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

		/* Stop further LLL radio events */
		ret = lll_stop(lll);
		LL_ASSERT(!ret);
   1e286:	07db      	lsls	r3, r3, #31
   1e288:	7122      	strb	r2, [r4, #4]
   1e28a:	d50b      	bpl.n	1e2a4 <isr_rx+0x168>
   1e28c:	f240 4229 	movw	r2, #1065	; 0x429
   1e290:	491c      	ldr	r1, [pc, #112]	; (1e304 <isr_rx+0x1c8>)
   1e292:	481d      	ldr	r0, [pc, #116]	; (1e308 <isr_rx+0x1cc>)
   1e294:	f009 fb1d 	bl	278d2 <printk>
   1e298:	4040      	eors	r0, r0
   1e29a:	f380 8811 	msr	BASEPRI, r0
   1e29e:	f04f 0003 	mov.w	r0, #3
   1e2a2:	df02      	svc	2

		rx = ull_pdu_rx_alloc();
   1e2a4:	f7fd f886 	bl	1b3b4 <ull_pdu_rx_alloc>

		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1e2a8:	2313      	movs	r3, #19
   1e2aa:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   1e2ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e2b0:	80c3      	strh	r3, [r0, #6]
		rx = ull_pdu_rx_alloc();
   1e2b2:	4606      	mov	r6, r0
   1e2b4:	f100 031c 	add.w	r3, r0, #28
   1e2b8:	f105 0224 	add.w	r2, r5, #36	; 0x24
   1e2bc:	f855 1b04 	ldr.w	r1, [r5], #4
   1e2c0:	f843 1b04 	str.w	r1, [r3], #4
   1e2c4:	4295      	cmp	r5, r2
   1e2c6:	d1f9      	bne.n	1e2bc <isr_rx+0x180>

		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
					 sizeof(struct pdu_adv_connect_ind)));

		ftr = &(rx->hdr.rx_ftr);
		ftr->param = lll;
   1e2c8:	60b4      	str	r4, [r6, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1e2ca:	f001 f99b 	bl	1f604 <radio_tmr_start_get>
   1e2ce:	6130      	str	r0, [r6, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1e2d0:	f001 f9ea 	bl	1f6a8 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1e2d4:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1e2d6:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   1e2d8:	4608      	mov	r0, r1
   1e2da:	f00f f83e 	bl	2d35a <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1e2de:	1a20      	subs	r0, r4, r0
   1e2e0:	6170      	str	r0, [r6, #20]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			ftr->extra = ull_pdu_rx_alloc();
		}

		ull_rx_put(rx->hdr.link, rx);
   1e2e2:	4631      	mov	r1, r6
   1e2e4:	6830      	ldr	r0, [r6, #0]
   1e2e6:	f7fd f87b 	bl	1b3e0 <ull_rx_put>
		ull_rx_sched();
   1e2ea:	f7fd f889 	bl	1b400 <ull_rx_sched>
		if (!err) {
   1e2ee:	e78e      	b.n	1e20e <isr_rx+0xd2>
	radio_isr_set(isr_done, param);
   1e2f0:	4621      	mov	r1, r4
   1e2f2:	4803      	ldr	r0, [pc, #12]	; (1e300 <isr_rx+0x1c4>)
   1e2f4:	f000 ff28 	bl	1f148 <radio_isr_set>
	radio_disable();
   1e2f8:	f000 fff4 	bl	1f2e4 <radio_disable>
   1e2fc:	e787      	b.n	1e20e <isr_rx+0xd2>
   1e2fe:	bf00      	nop
   1e300:	0002cf57 	.word	0x0002cf57
   1e304:	00036063 	.word	0x00036063
   1e308:	0003067f 	.word	0x0003067f
   1e30c:	0002cf09 	.word	0x0002cf09

0001e310 <ticker_stop_cb>:
	lll_done(param);
}

static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t remainder, uint16_t lazy,
			   void *param)
{
   1e310:	b508      	push	{r3, lr}
	radio_isr_set(isr_done_cleanup, param);
   1e312:	4619      	mov	r1, r3
   1e314:	4803      	ldr	r0, [pc, #12]	; (1e324 <ticker_stop_cb+0x14>)
   1e316:	f000 ff17 	bl	1f148 <radio_isr_set>
	radio_disable();
}
   1e31a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   1e31e:	f000 bfe1 	b.w	1f2e4 <radio_disable>
   1e322:	bf00      	nop
   1e324:	0002d043 	.word	0x0002d043

0001e328 <prepare_cb>:
{
   1e328:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1e32a:	68c4      	ldr	r4, [r0, #12]
   1e32c:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1e32e:	f015 0501 	ands.w	r5, r5, #1
{
   1e332:	b08d      	sub	sp, #52	; 0x34
   1e334:	4606      	mov	r6, r0
	if (unlikely(lll_is_stop(lll))) {
   1e336:	d014      	beq.n	1e362 <prepare_cb+0x3a>
		err = lll_hfclock_off();
   1e338:	f7ff fc40 	bl	1dbbc <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1e33c:	2800      	cmp	r0, #0
   1e33e:	da0a      	bge.n	1e356 <prepare_cb+0x2e>
   1e340:	2290      	movs	r2, #144	; 0x90
   1e342:	495b      	ldr	r1, [pc, #364]	; (1e4b0 <prepare_cb+0x188>)
   1e344:	485b      	ldr	r0, [pc, #364]	; (1e4b4 <prepare_cb+0x18c>)
   1e346:	f009 fac4 	bl	278d2 <printk>
   1e34a:	4040      	eors	r0, r0
   1e34c:	f380 8811 	msr	BASEPRI, r0
   1e350:	f04f 0003 	mov.w	r0, #3
   1e354:	df02      	svc	2
		lll_done(NULL);
   1e356:	2000      	movs	r0, #0
   1e358:	f7ff fb24 	bl	1d9a4 <lll_done>
}
   1e35c:	2000      	movs	r0, #0
   1e35e:	b00d      	add	sp, #52	; 0x34
   1e360:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lll->state = 0U;
   1e362:	7a23      	ldrb	r3, [r4, #8]
   1e364:	f365 0300 	bfi	r3, r5, #0, #1
   1e368:	7223      	strb	r3, [r4, #8]
	radio_reset();
   1e36a:	f000 ff0d 	bl	1f188 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1e36e:	4628      	mov	r0, r5
   1e370:	f000 ff3e 	bl	1f1f0 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1e374:	4629      	mov	r1, r5
   1e376:	4628      	mov	r0, r5
   1e378:	f000 ff2a 	bl	1f1d0 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1e37c:	462a      	mov	r2, r5
   1e37e:	2125      	movs	r1, #37	; 0x25
   1e380:	2008      	movs	r0, #8
   1e382:	f000 ff6b 	bl	1f25c <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e386:	2001      	movs	r0, #1
   1e388:	f7fc fffc 	bl	1b384 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1e38c:	4605      	mov	r5, r0
   1e38e:	b950      	cbnz	r0, 1e3a6 <prepare_cb+0x7e>
   1e390:	22af      	movs	r2, #175	; 0xaf
   1e392:	4947      	ldr	r1, [pc, #284]	; (1e4b0 <prepare_cb+0x188>)
   1e394:	4847      	ldr	r0, [pc, #284]	; (1e4b4 <prepare_cb+0x18c>)
   1e396:	f009 fa9c 	bl	278d2 <printk>
   1e39a:	4040      	eors	r0, r0
   1e39c:	f380 8811 	msr	BASEPRI, r0
   1e3a0:	f04f 0003 	mov.w	r0, #3
   1e3a4:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1e3a6:	f105 001c 	add.w	r0, r5, #28
   1e3aa:	f000 ff83 	bl	1f2b4 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1e3ae:	4b42      	ldr	r3, [pc, #264]	; (1e4b8 <prepare_cb+0x190>)
   1e3b0:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1e3b2:	a80b      	add	r0, sp, #44	; 0x2c
   1e3b4:	f000 ff3a 	bl	1f22c <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1e3b8:	4940      	ldr	r1, [pc, #256]	; (1e4bc <prepare_cb+0x194>)
   1e3ba:	f240 605b 	movw	r0, #1627	; 0x65b
   1e3be:	f000 ffcd 	bl	1f35c <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1e3c2:	7a20      	ldrb	r0, [r4, #8]
   1e3c4:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1e3c8:	3025      	adds	r0, #37	; 0x25
   1e3ca:	f7ff fb35 	bl	1da38 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1e3ce:	4621      	mov	r1, r4
   1e3d0:	483b      	ldr	r0, [pc, #236]	; (1e4c0 <prepare_cb+0x198>)
   1e3d2:	f000 feb9 	bl	1f148 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1e3d6:	2096      	movs	r0, #150	; 0x96
   1e3d8:	f001 f872 	bl	1f4c0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1e3dc:	2300      	movs	r3, #0
   1e3de:	461a      	mov	r2, r3
   1e3e0:	4619      	mov	r1, r3
   1e3e2:	4618      	mov	r0, r3
   1e3e4:	f000 ffe4 	bl	1f3b0 <radio_switch_complete_and_tx>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1e3e8:	7a23      	ldrb	r3, [r4, #8]
   1e3ea:	f013 0f18 	tst.w	r3, #24
   1e3ee:	d007      	beq.n	1e400 <prepare_cb+0xd8>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1e3f0:	2001      	movs	r0, #1
   1e3f2:	f7ff f891 	bl	1d518 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1e3f6:	1c82      	adds	r2, r0, #2
   1e3f8:	7841      	ldrb	r1, [r0, #1]
   1e3fa:	7800      	ldrb	r0, [r0, #0]
   1e3fc:	f001 f812 	bl	1f424 <radio_filter_configure>
	evt = HDR_LLL2EVT(lll);
   1e400:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1e402:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1e404:	4638      	mov	r0, r7
   1e406:	f00e fd30 	bl	2ce6a <lll_evt_offset_get>
   1e40a:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1e40c:	6872      	ldr	r2, [r6, #4]
   1e40e:	f105 0109 	add.w	r1, r5, #9
   1e412:	2000      	movs	r0, #0
   1e414:	f001 f860 	bl	1f4d8 <radio_tmr_start>
	radio_tmr_end_capture();
   1e418:	f001 f93e 	bl	1f698 <radio_tmr_end_capture>
	radio_rssi_measure();
   1e41c:	f000 ffe0 	bl	1f3e0 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1e420:	4620      	mov	r0, r4
   1e422:	f7fd fd2d 	bl	1be80 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_SCAN_BASE +
   1e426:	1d01      	adds	r1, r0, #4
   1e428:	b2c9      	uxtb	r1, r1
   1e42a:	462a      	mov	r2, r5
   1e42c:	4638      	mov	r0, r7
   1e42e:	f00e fd2a 	bl	2ce86 <lll_preempt_calc>
   1e432:	4601      	mov	r1, r0
   1e434:	b130      	cbz	r0, 1e444 <prepare_cb+0x11c>
		radio_isr_set(isr_abort, lll);
   1e436:	4621      	mov	r1, r4
   1e438:	4822      	ldr	r0, [pc, #136]	; (1e4c4 <prepare_cb+0x19c>)
   1e43a:	f000 fe85 	bl	1f148 <radio_isr_set>
		radio_disable();
   1e43e:	f000 ff51 	bl	1f2e4 <radio_disable>
   1e442:	e78b      	b.n	1e35c <prepare_cb+0x34>
		if (lll->ticks_window) {
   1e444:	69a3      	ldr	r3, [r4, #24]
   1e446:	b1fb      	cbz	r3, 1e488 <prepare_cb+0x160>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1e448:	f240 120f 	movw	r2, #271	; 0x10f
   1e44c:	9208      	str	r2, [sp, #32]
   1e44e:	4a1e      	ldr	r2, [pc, #120]	; (1e4c8 <prepare_cb+0x1a0>)
   1e450:	e9cd 4206 	strd	r4, r2, [sp, #24]
   1e454:	4a1d      	ldr	r2, [pc, #116]	; (1e4cc <prepare_cb+0x1a4>)
   1e456:	e9cd 3000 	strd	r3, r0, [sp]
   1e45a:	e9cd 0204 	strd	r0, r2, [sp, #16]
   1e45e:	462b      	mov	r3, r5
   1e460:	e9cd 0002 	strd	r0, r0, [sp, #8]
   1e464:	2203      	movs	r2, #3
   1e466:	f00e f9b6 	bl	2c7d6 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1e46a:	f030 0302 	bics.w	r3, r0, #2
   1e46e:	d00b      	beq.n	1e488 <prepare_cb+0x160>
   1e470:	f240 1211 	movw	r2, #273	; 0x111
   1e474:	490e      	ldr	r1, [pc, #56]	; (1e4b0 <prepare_cb+0x188>)
   1e476:	480f      	ldr	r0, [pc, #60]	; (1e4b4 <prepare_cb+0x18c>)
   1e478:	f009 fa2b 	bl	278d2 <printk>
   1e47c:	4040      	eors	r0, r0
   1e47e:	f380 8811 	msr	BASEPRI, r0
   1e482:	f04f 0003 	mov.w	r0, #3
   1e486:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1e488:	4620      	mov	r0, r4
   1e48a:	f00e fce9 	bl	2ce60 <lll_prepare_done>
		LL_ASSERT(!ret);
   1e48e:	2800      	cmp	r0, #0
   1e490:	f43f af64 	beq.w	1e35c <prepare_cb+0x34>
   1e494:	f240 1229 	movw	r2, #297	; 0x129
   1e498:	4905      	ldr	r1, [pc, #20]	; (1e4b0 <prepare_cb+0x188>)
   1e49a:	4806      	ldr	r0, [pc, #24]	; (1e4b4 <prepare_cb+0x18c>)
   1e49c:	f009 fa19 	bl	278d2 <printk>
   1e4a0:	4040      	eors	r0, r0
   1e4a2:	f380 8811 	msr	BASEPRI, r0
   1e4a6:	f04f 0003 	mov.w	r0, #3
   1e4aa:	df02      	svc	2
   1e4ac:	e756      	b.n	1e35c <prepare_cb+0x34>
   1e4ae:	bf00      	nop
   1e4b0:	000360bd 	.word	0x000360bd
   1e4b4:	0003067f 	.word	0x0003067f
   1e4b8:	8e89bed6 	.word	0x8e89bed6
   1e4bc:	00555555 	.word	0x00555555
   1e4c0:	0001e6a5 	.word	0x0001e6a5
   1e4c4:	0002d139 	.word	0x0002d139
   1e4c8:	0001e5d9 	.word	0x0001e5d9
   1e4cc:	0001e311 	.word	0x0001e311

0001e4d0 <isr_common_done>:

	radio_isr_set(isr_rx, param);
}

static void isr_common_done(void *param)
{
   1e4d0:	b538      	push	{r3, r4, r5, lr}
   1e4d2:	4604      	mov	r4, r0
	struct node_rx_pdu *node_rx;
	struct lll_scan *lll;

	/* Clear radio status and events */
	lll_isr_status_reset();
   1e4d4:	f00e fcfc 	bl	2ced0 <lll_isr_status_reset>

	/* Reset scanning state */
	lll = param;
	lll->state = 0U;
   1e4d8:	7a23      	ldrb	r3, [r4, #8]
   1e4da:	f36f 0300 	bfc	r3, #0, #1
   1e4de:	7223      	strb	r3, [r4, #8]
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	lll->is_adv_ind = 0U;
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   1e4e0:	2096      	movs	r0, #150	; 0x96
   1e4e2:	f000 ffed 	bl	1f4c0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1e4e6:	2300      	movs	r3, #0
   1e4e8:	4618      	mov	r0, r3
   1e4ea:	461a      	mov	r2, r3
   1e4ec:	4619      	mov	r1, r3
   1e4ee:	f000 ff5f 	bl	1f3b0 <radio_switch_complete_and_tx>

	node_rx = ull_pdu_rx_alloc_peek(1);
   1e4f2:	2001      	movs	r0, #1
   1e4f4:	f7fc ff46 	bl	1b384 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1e4f8:	4605      	mov	r5, r0
   1e4fa:	b958      	cbnz	r0, 1e514 <isr_common_done+0x44>
   1e4fc:	f240 222f 	movw	r2, #559	; 0x22f
   1e500:	490a      	ldr	r1, [pc, #40]	; (1e52c <isr_common_done+0x5c>)
   1e502:	480b      	ldr	r0, [pc, #44]	; (1e530 <isr_common_done+0x60>)
   1e504:	f009 f9e5 	bl	278d2 <printk>
   1e508:	4040      	eors	r0, r0
   1e50a:	f380 8811 	msr	BASEPRI, r0
   1e50e:	f04f 0003 	mov.w	r0, #3
   1e512:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1e514:	f105 001c 	add.w	r0, r5, #28
   1e518:	f000 fecc 	bl	1f2b4 <radio_pkt_rx_set>
		radio_ar_configure(count, irks, 0);
#endif
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	radio_rssi_measure();
   1e51c:	f000 ff60 	bl	1f3e0 <radio_rssi_measure>

	radio_isr_set(isr_rx, param);
   1e520:	4621      	mov	r1, r4
   1e522:	4804      	ldr	r0, [pc, #16]	; (1e534 <isr_common_done+0x64>)
}
   1e524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(isr_rx, param);
   1e528:	f000 be0e 	b.w	1f148 <radio_isr_set>
   1e52c:	000360bd 	.word	0x000360bd
   1e530:	0003067f 	.word	0x0003067f
   1e534:	0001e6a5 	.word	0x0001e6a5

0001e538 <isr_tx>:
{
   1e538:	b570      	push	{r4, r5, r6, lr}
   1e53a:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1e53c:	f00e fcb8 	bl	2ceb0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1e540:	2096      	movs	r0, #150	; 0x96
   1e542:	f000 ffbd 	bl	1f4c0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1e546:	2300      	movs	r3, #0
   1e548:	4618      	mov	r0, r3
   1e54a:	461a      	mov	r2, r3
   1e54c:	4619      	mov	r1, r3
   1e54e:	f000 ff2f 	bl	1f3b0 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e552:	2001      	movs	r0, #1
   1e554:	f7fc ff16 	bl	1b384 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1e558:	4604      	mov	r4, r0
   1e55a:	b958      	cbnz	r0, 1e574 <isr_tx+0x3c>
   1e55c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1e560:	491a      	ldr	r1, [pc, #104]	; (1e5cc <isr_tx+0x94>)
   1e562:	481b      	ldr	r0, [pc, #108]	; (1e5d0 <isr_tx+0x98>)
   1e564:	f009 f9b5 	bl	278d2 <printk>
   1e568:	4040      	eors	r0, r0
   1e56a:	f380 8811 	msr	BASEPRI, r0
   1e56e:	f04f 0003 	mov.w	r0, #3
   1e572:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1e574:	f104 001c 	add.w	r0, r4, #28
   1e578:	f000 fe9c 	bl	1f2b4 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1e57c:	f000 fed0 	bl	1f320 <radio_is_ready>
   1e580:	b158      	cbz	r0, 1e59a <isr_tx+0x62>
   1e582:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1e586:	4911      	ldr	r1, [pc, #68]	; (1e5cc <isr_tx+0x94>)
   1e588:	4811      	ldr	r0, [pc, #68]	; (1e5d0 <isr_tx+0x98>)
   1e58a:	f009 f9a2 	bl	278d2 <printk>
   1e58e:	4040      	eors	r0, r0
   1e590:	f380 8811 	msr	BASEPRI, r0
   1e594:	f04f 0003 	mov.w	r0, #3
   1e598:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1e59a:	f001 f88b 	bl	1f6b4 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1e59e:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1e5a0:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1e5a2:	4608      	mov	r0, r1
   1e5a4:	f00e fedd 	bl	2d362 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1e5a8:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1e5aa:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1e5ac:	4608      	mov	r0, r1
   1e5ae:	f00e fed4 	bl	2d35a <radio_tx_chain_delay_get>
   1e5b2:	4434      	add	r4, r6
   1e5b4:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1e5b6:	1a20      	subs	r0, r4, r0
   1e5b8:	f001 f836 	bl	1f628 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1e5bc:	f000 ff10 	bl	1f3e0 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1e5c0:	4629      	mov	r1, r5
   1e5c2:	4804      	ldr	r0, [pc, #16]	; (1e5d4 <isr_tx+0x9c>)
}
   1e5c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1e5c8:	f000 bdbe 	b.w	1f148 <radio_isr_set>
   1e5cc:	000360bd 	.word	0x000360bd
   1e5d0:	0003067f 	.word	0x0003067f
   1e5d4:	0001e6a5 	.word	0x0001e6a5

0001e5d8 <ticker_op_start_cb>:
{
   1e5d8:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1e5da:	b158      	cbz	r0, 1e5f4 <ticker_op_start_cb+0x1c>
   1e5dc:	f240 128d 	movw	r2, #397	; 0x18d
   1e5e0:	4905      	ldr	r1, [pc, #20]	; (1e5f8 <ticker_op_start_cb+0x20>)
   1e5e2:	4806      	ldr	r0, [pc, #24]	; (1e5fc <ticker_op_start_cb+0x24>)
   1e5e4:	f009 f975 	bl	278d2 <printk>
   1e5e8:	4040      	eors	r0, r0
   1e5ea:	f380 8811 	msr	BASEPRI, r0
   1e5ee:	f04f 0003 	mov.w	r0, #3
   1e5f2:	df02      	svc	2
}
   1e5f4:	bd08      	pop	{r3, pc}
   1e5f6:	bf00      	nop
   1e5f8:	000360bd 	.word	0x000360bd
   1e5fc:	0003067f 	.word	0x0003067f

0001e600 <abort_cb>:
{
   1e600:	b510      	push	{r4, lr}
   1e602:	460c      	mov	r4, r1
	if (!prepare_param) {
   1e604:	b930      	cbnz	r0, 1e614 <abort_cb+0x14>
			radio_isr_set(isr_abort, param);
   1e606:	480e      	ldr	r0, [pc, #56]	; (1e640 <abort_cb+0x40>)
   1e608:	f000 fd9e 	bl	1f148 <radio_isr_set>
}
   1e60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1e610:	f000 be68 	b.w	1f2e4 <radio_disable>
	err = lll_hfclock_off();
   1e614:	f7ff fad2 	bl	1dbbc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1e618:	2800      	cmp	r0, #0
   1e61a:	da0b      	bge.n	1e634 <abort_cb+0x34>
   1e61c:	f240 127d 	movw	r2, #381	; 0x17d
   1e620:	4908      	ldr	r1, [pc, #32]	; (1e644 <abort_cb+0x44>)
   1e622:	4809      	ldr	r0, [pc, #36]	; (1e648 <abort_cb+0x48>)
   1e624:	f009 f955 	bl	278d2 <printk>
   1e628:	4040      	eors	r0, r0
   1e62a:	f380 8811 	msr	BASEPRI, r0
   1e62e:	f04f 0003 	mov.w	r0, #3
   1e632:	df02      	svc	2
	lll_done(param);
   1e634:	4620      	mov	r0, r4
}
   1e636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1e63a:	f7ff b9b3 	b.w	1d9a4 <lll_done>
   1e63e:	bf00      	nop
   1e640:	0002d139 	.word	0x0002d139
   1e644:	000360bd 	.word	0x000360bd
   1e648:	0003067f 	.word	0x0003067f

0001e64c <is_abort_cb>:
	if (next != curr) {
   1e64c:	4282      	cmp	r2, r0
{
   1e64e:	b508      	push	{r3, lr}
	if (next != curr) {
   1e650:	d017      	beq.n	1e682 <is_abort_cb+0x36>
			*resume_cb = resume_prepare_cb;
   1e652:	4a10      	ldr	r2, [pc, #64]	; (1e694 <is_abort_cb+0x48>)
   1e654:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1e656:	9b02      	ldr	r3, [sp, #8]
   1e658:	2200      	movs	r2, #0
   1e65a:	601a      	str	r2, [r3, #0]
			err = lll_hfclock_on();
   1e65c:	f7ff fa98 	bl	1db90 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1e660:	2800      	cmp	r0, #0
   1e662:	da0b      	bge.n	1e67c <is_abort_cb+0x30>
   1e664:	f44f 72a8 	mov.w	r2, #336	; 0x150
   1e668:	490b      	ldr	r1, [pc, #44]	; (1e698 <is_abort_cb+0x4c>)
   1e66a:	480c      	ldr	r0, [pc, #48]	; (1e69c <is_abort_cb+0x50>)
   1e66c:	f009 f931 	bl	278d2 <printk>
   1e670:	4040      	eors	r0, r0
   1e672:	f380 8811 	msr	BASEPRI, r0
   1e676:	f04f 0003 	mov.w	r0, #3
   1e67a:	df02      	svc	2
   1e67c:	f06f 000a 	mvn.w	r0, #10
   1e680:	e006      	b.n	1e690 <is_abort_cb+0x44>
		radio_isr_set(isr_window, lll);
   1e682:	4807      	ldr	r0, [pc, #28]	; (1e6a0 <is_abort_cb+0x54>)
   1e684:	4611      	mov	r1, r2
   1e686:	f000 fd5f 	bl	1f148 <radio_isr_set>
	radio_disable();
   1e68a:	f000 fe2b 	bl	1f2e4 <radio_disable>
	return 0;
   1e68e:	2000      	movs	r0, #0
}
   1e690:	bd08      	pop	{r3, pc}
   1e692:	bf00      	nop
   1e694:	0002d08b 	.word	0x0002d08b
   1e698:	000360bd 	.word	0x000360bd
   1e69c:	0003067f 	.word	0x0003067f
   1e6a0:	0002d0b3 	.word	0x0002d0b3

0001e6a4 <isr_rx>:
{
   1e6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e6a8:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   1e6aa:	f000 fe43 	bl	1f334 <radio_is_done>
   1e6ae:	b2c4      	uxtb	r4, r0
	if (trx_done) {
   1e6b0:	2c00      	cmp	r4, #0
   1e6b2:	f000 8088 	beq.w	1e7c6 <isr_rx+0x122>
		crc_ok = radio_crc_is_valid();
   1e6b6:	f000 fe5d 	bl	1f374 <radio_crc_is_valid>
   1e6ba:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
   1e6be:	f000 fedf 	bl	1f480 <radio_filter_has_match>
   1e6c2:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
   1e6c4:	f000 fee6 	bl	1f494 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1e6c8:	f001 f812 	bl	1f6f0 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   1e6cc:	f000 fff8 	bl	1f6c0 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   1e6d0:	f000 fe9e 	bl	1f410 <radio_rssi_is_ready>
   1e6d4:	b2c6      	uxtb	r6, r0
	lll_isr_status_reset();
   1e6d6:	f00e fbfb 	bl	2ced0 <lll_isr_status_reset>
	if (!trx_done) {
   1e6da:	2c00      	cmp	r4, #0
   1e6dc:	f000 808d 	beq.w	1e7fa <isr_rx+0x156>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e6e0:	2001      	movs	r0, #1
   1e6e2:	f7fc fe4f 	bl	1b384 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1e6e6:	4604      	mov	r4, r0
   1e6e8:	b958      	cbnz	r0, 1e702 <isr_rx+0x5e>
   1e6ea:	f240 12bb 	movw	r2, #443	; 0x1bb
   1e6ee:	4965      	ldr	r1, [pc, #404]	; (1e884 <isr_rx+0x1e0>)
   1e6f0:	4865      	ldr	r0, [pc, #404]	; (1e888 <isr_rx+0x1e4>)
   1e6f2:	f009 f8ee 	bl	278d2 <printk>
   1e6f6:	4040      	eors	r0, r0
   1e6f8:	f380 8811 	msr	BASEPRI, r0
   1e6fc:	f04f 0003 	mov.w	r0, #3
   1e700:	df02      	svc	2
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   1e702:	f1b8 0f00 	cmp.w	r8, #0
   1e706:	d078      	beq.n	1e7fa <isr_rx+0x156>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
		(((lll->filter_policy & 0x01) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
#else
	return ((lll->filter_policy & 0x01) == 0U) ||
   1e708:	7a29      	ldrb	r1, [r5, #8]
   1e70a:	0708      	lsls	r0, r1, #28
   1e70c:	d501      	bpl.n	1e712 <isr_rx+0x6e>
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   1e70e:	2f00      	cmp	r7, #0
   1e710:	d073      	beq.n	1e7fa <isr_rx+0x156>

		return 0;
#endif /* CONFIG_BT_CENTRAL */

	/* Active scanner */
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1e712:	7f23      	ldrb	r3, [r4, #28]
   1e714:	f013 020f 	ands.w	r2, r3, #15
   1e718:	d002      	beq.n	1e720 <isr_rx+0x7c>
   1e71a:	2a06      	cmp	r2, #6
   1e71c:	f040 80b0 	bne.w	1e880 <isr_rx+0x1dc>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1e720:	7f60      	ldrb	r0, [r4, #29]
   1e722:	2825      	cmp	r0, #37	; 0x25
   1e724:	d853      	bhi.n	1e7ce <isr_rx+0x12a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
		   lll->type &&
   1e726:	f995 0008 	ldrsb.w	r0, [r5, #8]
   1e72a:	2800      	cmp	r0, #0
   1e72c:	da4f      	bge.n	1e7ce <isr_rx+0x12a>
		bt_addr_t *lrpa;
#endif /* CONFIG_BT_CTLR_PRIVACY */
		int err;

		/* setup tIFS switching */
		radio_tmr_tifs_set(EVENT_IFS_US);
   1e72e:	2096      	movs	r0, #150	; 0x96
   1e730:	f000 fec6 	bl	1f4c0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1e734:	2000      	movs	r0, #0
   1e736:	f000 fe2f 	bl	1f398 <radio_switch_complete_and_rx>

		/* save the adv packet */
		err = isr_rx_scan_report(lll, rssi_ready,
   1e73a:	2100      	movs	r1, #0
   1e73c:	4630      	mov	r0, r6
   1e73e:	f00e fcd9 	bl	2d0f4 <isr_rx_scan_report.isra.5>
					 irkmatch_ok ? rl_idx : FILTER_IDX_NONE,
					 false);
		if (err) {
   1e742:	2800      	cmp	r0, #0
   1e744:	d159      	bne.n	1e7fa <isr_rx+0x156>
			return err;
		}

		/* prepare the scan request packet */
		pdu_tx = (void *)radio_pkt_scratch_get();
   1e746:	f000 fe23 	bl	1f390 <radio_pkt_scratch_get>
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1e74a:	7802      	ldrb	r2, [r0, #0]
   1e74c:	2103      	movs	r1, #3
   1e74e:	f361 0203 	bfi	r2, r1, #0, #4
   1e752:	7002      	strb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   1e754:	7f21      	ldrb	r1, [r4, #28]
   1e756:	b2d2      	uxtb	r2, r2
   1e758:	f3c1 1180 	ubfx	r1, r1, #6, #1
   1e75c:	f361 12c7 	bfi	r2, r1, #7, #1
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   1e760:	210c      	movs	r1, #12
   1e762:	7041      	strb	r1, [r0, #1]
			       BDADDR_SIZE);
		} else {
#else
		if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
			pdu_tx->tx_addr = lll->init_addr_type;
   1e764:	7a29      	ldrb	r1, [r5, #8]
   1e766:	f3c1 1180 	ubfx	r1, r1, #6, #1
   1e76a:	f361 1286 	bfi	r2, r1, #6, #1
   1e76e:	4601      	mov	r1, r0
   1e770:	f801 2b02 	strb.w	r2, [r1], #2
   1e774:	462a      	mov	r2, r5
   1e776:	f852 6f09 	ldr.w	r6, [r2, #9]!
   1e77a:	f8c0 6002 	str.w	r6, [r0, #2]
   1e77e:	8892      	ldrh	r2, [r2, #4]
   1e780:	808a      	strh	r2, [r1, #4]
   1e782:	f854 2f1e 	ldr.w	r2, [r4, #30]!
   1e786:	6082      	str	r2, [r0, #8]
   1e788:	88a2      	ldrh	r2, [r4, #4]
   1e78a:	8182      	strh	r2, [r0, #12]
			       &lll->init_addr[0], BDADDR_SIZE);
		}
		memcpy(&pdu_tx->scan_req.adv_addr[0],
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);

		radio_pkt_tx_set(pdu_tx);
   1e78c:	f000 fd98 	bl	1f2c0 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   1e790:	f000 fdc6 	bl	1f320 <radio_is_ready>
   1e794:	b158      	cbz	r0, 1e7ae <isr_rx+0x10a>
   1e796:	f240 32f9 	movw	r2, #1017	; 0x3f9
   1e79a:	493a      	ldr	r1, [pc, #232]	; (1e884 <isr_rx+0x1e0>)
   1e79c:	483a      	ldr	r0, [pc, #232]	; (1e888 <isr_rx+0x1e4>)
   1e79e:	f009 f898 	bl	278d2 <printk>
   1e7a2:	4040      	eors	r0, r0
   1e7a4:	f380 8811 	msr	BASEPRI, r0
   1e7a8:	f04f 0003 	mov.w	r0, #3
   1e7ac:	df02      	svc	2
			lll_prof_cputime_capture();

		}

		/* capture end of Tx-ed PDU, used to calculate HCTO. */
		radio_tmr_end_capture();
   1e7ae:	f000 ff73 	bl	1f698 <radio_tmr_end_capture>
					 radio_rx_chain_delay_get(0, 0) -
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */

		/* switch scanner state to active */
		lll->state = 1U;
   1e7b2:	7a2b      	ldrb	r3, [r5, #8]
		if (pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) {
			lll->is_adv_ind = 1U;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		radio_isr_set(isr_tx, lll);
   1e7b4:	4835      	ldr	r0, [pc, #212]	; (1e88c <isr_rx+0x1e8>)
		lll->state = 1U;
   1e7b6:	f043 0301 	orr.w	r3, r3, #1
   1e7ba:	722b      	strb	r3, [r5, #8]
		radio_isr_set(isr_tx, lll);
   1e7bc:	4629      	mov	r1, r5
}
   1e7be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_isr_set(isr_tx, lll);
   1e7c2:	f000 bcc1 	b.w	1f148 <radio_isr_set>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   1e7c6:	46a0      	mov	r8, r4
   1e7c8:	4626      	mov	r6, r4
   1e7ca:	4627      	mov	r7, r4
   1e7cc:	e783      	b.n	1e6d6 <isr_rx+0x32>

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1e7ce:	f013 0f0d 	tst.w	r3, #13
   1e7d2:	d001      	beq.n	1e7d8 <isr_rx+0x134>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1e7d4:	2a06      	cmp	r2, #6
   1e7d6:	d109      	bne.n	1e7ec <isr_rx+0x148>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1e7d8:	7f60      	ldrb	r0, [r4, #29]
   1e7da:	2825      	cmp	r0, #37	; 0x25
   1e7dc:	d806      	bhi.n	1e7ec <isr_rx+0x148>
	bool dir_report = false;
   1e7de:	2100      	movs	r1, #0
		   (lll->phy)) ||
#endif /* CONFIG_BT_CTLR_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
		   (lll->state != 0U) &&
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   1e7e0:	7f63      	ldrb	r3, [r4, #29]
   1e7e2:	b153      	cbz	r3, 1e7fa <isr_rx+0x156>
		   1) {
#endif /* !CONFIG_BT_CENTRAL */
		uint32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(lll, rssi_ready,
   1e7e4:	4630      	mov	r0, r6
   1e7e6:	f00e fc85 	bl	2d0f4 <isr_rx_scan_report.isra.5>
					 irkmatch_ok ? rl_idx :
						       FILTER_IDX_NONE,
					 dir_report);
		if (err) {
   1e7ea:	e006      	b.n	1e7fa <isr_rx+0x156>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   1e7ec:	2a01      	cmp	r2, #1
   1e7ee:	d00c      	beq.n	1e80a <isr_rx+0x166>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1e7f0:	7f23      	ldrb	r3, [r4, #28]
					&dir_report))) ||
   1e7f2:	f003 030f 	and.w	r3, r3, #15
   1e7f6:	2b04      	cmp	r3, #4
   1e7f8:	d02a      	beq.n	1e850 <isr_rx+0x1ac>
	radio_isr_set(isr_done, lll);
   1e7fa:	4629      	mov	r1, r5
   1e7fc:	4824      	ldr	r0, [pc, #144]	; (1e890 <isr_rx+0x1ec>)
   1e7fe:	f000 fca3 	bl	1f148 <radio_isr_set>
}
   1e802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	radio_disable();
   1e806:	f000 bd6d 	b.w	1f2e4 <radio_disable>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1e80a:	7f62      	ldrb	r2, [r4, #29]
   1e80c:	2a0c      	cmp	r2, #12
   1e80e:	d1f4      	bne.n	1e7fa <isr_rx+0x156>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == pdu->rx_addr) &&
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
			BDADDR_SIZE))) ||
   1e810:	f3c1 1180 	ubfx	r1, r1, #6, #1
   1e814:	ebb1 1fd3 	cmp.w	r1, r3, lsr #7
   1e818:	d010      	beq.n	1e83c <isr_rx+0x198>

static inline bool isr_scan_tgta_rpa_check(struct lll_scan *lll,
					   struct pdu_adv *pdu,
					   bool *dir_report)
{
	if (((lll->filter_policy & 0x02) != 0U) &&
   1e81a:	7a2b      	ldrb	r3, [r5, #8]
   1e81c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   1e820:	079a      	lsls	r2, r3, #30
   1e822:	d5e5      	bpl.n	1e7f0 <isr_rx+0x14c>
   1e824:	f994 301c 	ldrsb.w	r3, [r4, #28]
   1e828:	2b00      	cmp	r3, #0
   1e82a:	dae1      	bge.n	1e7f0 <isr_rx+0x14c>
	    (pdu->rx_addr != 0) &&
   1e82c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1e830:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e834:	2b40      	cmp	r3, #64	; 0x40
   1e836:	d1db      	bne.n	1e7f0 <isr_rx+0x14c>

		if (dir_report) {
			*dir_report = true;
		}

		return true;
   1e838:	2101      	movs	r1, #1
   1e83a:	e7d1      	b.n	1e7e0 <isr_rx+0x13c>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
   1e83c:	2206      	movs	r2, #6
   1e83e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1e842:	f105 0009 	add.w	r0, r5, #9
   1e846:	f00f fd22 	bl	2e28e <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
   1e84a:	2800      	cmp	r0, #0
   1e84c:	d0c7      	beq.n	1e7de <isr_rx+0x13a>
   1e84e:	e7e4      	b.n	1e81a <isr_rx+0x176>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1e850:	7f63      	ldrb	r3, [r4, #29]
   1e852:	2b25      	cmp	r3, #37	; 0x25
   1e854:	d8d1      	bhi.n	1e7fa <isr_rx+0x156>
		   (lll->state != 0U) &&
   1e856:	7a2b      	ldrb	r3, [r5, #8]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   1e858:	07db      	lsls	r3, r3, #31
   1e85a:	d5ce      	bpl.n	1e7fa <isr_rx+0x156>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   1e85c:	f000 fd98 	bl	1f390 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
   1e860:	7f23      	ldrb	r3, [r4, #28]
   1e862:	7802      	ldrb	r2, [r0, #0]
   1e864:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1e868:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1e86c:	d1c5      	bne.n	1e7fa <isr_rx+0x156>
		(memcmp(&sreq->scan_req.adv_addr[0],
   1e86e:	2206      	movs	r2, #6
   1e870:	f104 011e 	add.w	r1, r4, #30
   1e874:	3008      	adds	r0, #8
   1e876:	f00f fd0a 	bl	2e28e <memcmp>
		   (lll->state != 0U) &&
   1e87a:	2800      	cmp	r0, #0
   1e87c:	d0af      	beq.n	1e7de <isr_rx+0x13a>
   1e87e:	e7bc      	b.n	1e7fa <isr_rx+0x156>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1e880:	2a02      	cmp	r2, #2
   1e882:	e7a8      	b.n	1e7d6 <isr_rx+0x132>
   1e884:	000360bd 	.word	0x000360bd
   1e888:	0003067f 	.word	0x0003067f
   1e88c:	0001e539 	.word	0x0001e539
   1e890:	0002d079 	.word	0x0002d079

0001e894 <lll_scan_prepare>:
{
   1e894:	b513      	push	{r0, r1, r4, lr}
   1e896:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1e898:	f7ff f97a 	bl	1db90 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1e89c:	2800      	cmp	r0, #0
   1e89e:	da0a      	bge.n	1e8b6 <lll_scan_prepare+0x22>
   1e8a0:	2270      	movs	r2, #112	; 0x70
   1e8a2:	4910      	ldr	r1, [pc, #64]	; (1e8e4 <lll_scan_prepare+0x50>)
   1e8a4:	4810      	ldr	r0, [pc, #64]	; (1e8e8 <lll_scan_prepare+0x54>)
   1e8a6:	f009 f814 	bl	278d2 <printk>
   1e8aa:	4040      	eors	r0, r0
   1e8ac:	f380 8811 	msr	BASEPRI, r0
   1e8b0:	f04f 0003 	mov.w	r0, #3
   1e8b4:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1e8b6:	9400      	str	r4, [sp, #0]
   1e8b8:	2300      	movs	r3, #0
   1e8ba:	4a0c      	ldr	r2, [pc, #48]	; (1e8ec <lll_scan_prepare+0x58>)
   1e8bc:	490c      	ldr	r1, [pc, #48]	; (1e8f0 <lll_scan_prepare+0x5c>)
   1e8be:	480d      	ldr	r0, [pc, #52]	; (1e8f4 <lll_scan_prepare+0x60>)
   1e8c0:	f00e fac5 	bl	2ce4e <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1e8c4:	b160      	cbz	r0, 1e8e0 <lll_scan_prepare+0x4c>
   1e8c6:	3077      	adds	r0, #119	; 0x77
   1e8c8:	d00a      	beq.n	1e8e0 <lll_scan_prepare+0x4c>
   1e8ca:	2273      	movs	r2, #115	; 0x73
   1e8cc:	4905      	ldr	r1, [pc, #20]	; (1e8e4 <lll_scan_prepare+0x50>)
   1e8ce:	4806      	ldr	r0, [pc, #24]	; (1e8e8 <lll_scan_prepare+0x54>)
   1e8d0:	f008 ffff 	bl	278d2 <printk>
   1e8d4:	4040      	eors	r0, r0
   1e8d6:	f380 8811 	msr	BASEPRI, r0
   1e8da:	f04f 0003 	mov.w	r0, #3
   1e8de:	df02      	svc	2
}
   1e8e0:	b002      	add	sp, #8
   1e8e2:	bd10      	pop	{r4, pc}
   1e8e4:	000360bd 	.word	0x000360bd
   1e8e8:	0003067f 	.word	0x0003067f
   1e8ec:	0001e329 	.word	0x0001e329
   1e8f0:	0001e601 	.word	0x0001e601
   1e8f4:	0001e64d 	.word	0x0001e64d

0001e8f8 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1e8f8:	b570      	push	{r4, r5, r6, lr}
   1e8fa:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1e8fc:	f00e fae8 	bl	2ced0 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1e900:	f7fc ff08 	bl	1b714 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1e904:	4604      	mov	r4, r0
   1e906:	b958      	cbnz	r0, 1e920 <isr_done+0x28>
   1e908:	f240 226d 	movw	r2, #621	; 0x26d
   1e90c:	4914      	ldr	r1, [pc, #80]	; (1e960 <isr_done+0x68>)
   1e90e:	4815      	ldr	r0, [pc, #84]	; (1e964 <isr_done+0x6c>)
   1e910:	f008 ffdf 	bl	278d2 <printk>
   1e914:	4040      	eors	r0, r0
   1e916:	f380 8811 	msr	BASEPRI, r0
   1e91a:	f04f 0003 	mov.w	r0, #3
   1e91e:	df02      	svc	2

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1e920:	2301      	movs	r3, #1
   1e922:	7023      	strb	r3, [r4, #0]
	e->trx_cnt = trx_cnt;
   1e924:	4b10      	ldr	r3, [pc, #64]	; (1e968 <isr_done+0x70>)
	e->crc_valid = crc_valid;
   1e926:	4a11      	ldr	r2, [pc, #68]	; (1e96c <isr_done+0x74>)
	e->trx_cnt = trx_cnt;
   1e928:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1e92a:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   1e92c:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = crc_valid;
   1e92e:	71a2      	strb	r2, [r4, #6]
#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1e930:	b18b      	cbz	r3, 1e956 <isr_done+0x5e>
		struct lll_conn *lll = param;

		if (lll->role) {
   1e932:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   1e936:	2b00      	cmp	r3, #0
   1e938:	da0d      	bge.n	1e956 <isr_done+0x5e>
			preamble_to_addr_us =
				addr_us_get(0);
#endif /* !CONFIG_BT_CTLR_PHY */

			e->drift.start_to_address_actual_us =
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1e93a:	f000 fea1 	bl	1f680 <radio_tmr_aa_restore>
   1e93e:	4606      	mov	r6, r0
   1e940:	f000 fea4 	bl	1f68c <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1e944:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e946:	60e3      	str	r3, [r4, #12]
				lll->slave.window_widening_event_us;
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1e948:	2328      	movs	r3, #40	; 0x28
   1e94a:	6123      	str	r3, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1e94c:	1a30      	subs	r0, r6, r0

			/* Reset window widening, as anchor point sync-ed */
			lll->slave.window_widening_event_us = 0;
   1e94e:	2300      	movs	r3, #0
			e->drift.start_to_address_actual_us =
   1e950:	60a0      	str	r0, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   1e952:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   1e954:	63eb      	str	r3, [r5, #60]	; 0x3c
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1e956:	4628      	mov	r0, r5
}
   1e958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lll_isr_cleanup(param);
   1e95c:	f7ff b89a 	b.w	1da94 <lll_isr_cleanup>
   1e960:	00036119 	.word	0x00036119
   1e964:	0003067f 	.word	0x0003067f
   1e968:	200056da 	.word	0x200056da
   1e96c:	20005899 	.word	0x20005899

0001e970 <lll_conn_prepare_reset>:
	trx_cnt = 0U;
   1e970:	4a03      	ldr	r2, [pc, #12]	; (1e980 <lll_conn_prepare_reset+0x10>)
   1e972:	2300      	movs	r3, #0
   1e974:	8013      	strh	r3, [r2, #0]
	crc_valid = 0U;
   1e976:	4a03      	ldr	r2, [pc, #12]	; (1e984 <lll_conn_prepare_reset+0x14>)
   1e978:	7013      	strb	r3, [r2, #0]
	crc_expire = 0U;
   1e97a:	4a03      	ldr	r2, [pc, #12]	; (1e988 <lll_conn_prepare_reset+0x18>)
   1e97c:	7013      	strb	r3, [r2, #0]
}
   1e97e:	4770      	bx	lr
   1e980:	200056da 	.word	0x200056da
   1e984:	20005899 	.word	0x20005899
   1e988:	20005898 	.word	0x20005898

0001e98c <lll_conn_abort_cb>:
{
   1e98c:	b510      	push	{r4, lr}
   1e98e:	460c      	mov	r4, r1
	if (!prepare_param) {
   1e990:	b930      	cbnz	r0, 1e9a0 <lll_conn_abort_cb+0x14>
		radio_isr_set(isr_done, param);
   1e992:	480d      	ldr	r0, [pc, #52]	; (1e9c8 <lll_conn_abort_cb+0x3c>)
   1e994:	f000 fbd8 	bl	1f148 <radio_isr_set>
}
   1e998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1e99c:	f000 bca2 	b.w	1f2e4 <radio_disable>
	err = lll_hfclock_off();
   1e9a0:	f7ff f90c 	bl	1dbbc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1e9a4:	2800      	cmp	r0, #0
   1e9a6:	da0a      	bge.n	1e9be <lll_conn_abort_cb+0x32>
   1e9a8:	229b      	movs	r2, #155	; 0x9b
   1e9aa:	4908      	ldr	r1, [pc, #32]	; (1e9cc <lll_conn_abort_cb+0x40>)
   1e9ac:	4808      	ldr	r0, [pc, #32]	; (1e9d0 <lll_conn_abort_cb+0x44>)
   1e9ae:	f008 ff90 	bl	278d2 <printk>
   1e9b2:	4040      	eors	r0, r0
   1e9b4:	f380 8811 	msr	BASEPRI, r0
   1e9b8:	f04f 0003 	mov.w	r0, #3
   1e9bc:	df02      	svc	2
	lll_done(param);
   1e9be:	4620      	mov	r0, r4
}
   1e9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1e9c4:	f7fe bfee 	b.w	1d9a4 <lll_done>
   1e9c8:	0001e8f9 	.word	0x0001e8f9
   1e9cc:	00036119 	.word	0x00036119
   1e9d0:	0003067f 	.word	0x0003067f

0001e9d4 <lll_conn_rx_pkt_set>:
{
   1e9d4:	b510      	push	{r4, lr}
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e9d6:	2001      	movs	r0, #1
   1e9d8:	f7fc fcd4 	bl	1b384 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1e9dc:	4604      	mov	r4, r0
   1e9de:	b958      	cbnz	r0, 1e9f8 <lll_conn_rx_pkt_set+0x24>
   1e9e0:	f240 12d5 	movw	r2, #469	; 0x1d5
   1e9e4:	490c      	ldr	r1, [pc, #48]	; (1ea18 <lll_conn_rx_pkt_set+0x44>)
   1e9e6:	480d      	ldr	r0, [pc, #52]	; (1ea1c <lll_conn_rx_pkt_set+0x48>)
   1e9e8:	f008 ff73 	bl	278d2 <printk>
   1e9ec:	4040      	eors	r0, r0
   1e9ee:	f380 8811 	msr	BASEPRI, r0
   1e9f2:	f04f 0003 	mov.w	r0, #3
   1e9f6:	df02      	svc	2
	radio_phy_set(phy, 0);
   1e9f8:	2100      	movs	r1, #0
   1e9fa:	4608      	mov	r0, r1
   1e9fc:	f000 fbe8 	bl	1f1d0 <radio_phy_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1ea00:	2008      	movs	r0, #8
   1ea02:	2201      	movs	r2, #1
   1ea04:	211b      	movs	r1, #27
   1ea06:	f000 fc29 	bl	1f25c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1ea0a:	f104 001c 	add.w	r0, r4, #28
}
   1ea0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1ea12:	f000 bc4f 	b.w	1f2b4 <radio_pkt_rx_set>
   1ea16:	bf00      	nop
   1ea18:	00036119 	.word	0x00036119
   1ea1c:	0003067f 	.word	0x0003067f

0001ea20 <lll_conn_isr_tx>:
{
   1ea20:	b570      	push	{r4, r5, r6, lr}
   1ea22:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1ea24:	f00e fa44 	bl	2ceb0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1ea28:	2096      	movs	r0, #150	; 0x96
   1ea2a:	f000 fd49 	bl	1f4c0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1ea2e:	2300      	movs	r3, #0
   1ea30:	4618      	mov	r0, r3
   1ea32:	461a      	mov	r2, r3
   1ea34:	4619      	mov	r1, r3
   1ea36:	f000 fcbb 	bl	1f3b0 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1ea3a:	4628      	mov	r0, r5
   1ea3c:	f7ff ffca 	bl	1e9d4 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1ea40:	f000 fc6e 	bl	1f320 <radio_is_ready>
   1ea44:	b158      	cbz	r0, 1ea5e <lll_conn_isr_tx+0x3e>
   1ea46:	f240 12a1 	movw	r2, #417	; 0x1a1
   1ea4a:	4910      	ldr	r1, [pc, #64]	; (1ea8c <lll_conn_isr_tx+0x6c>)
   1ea4c:	4810      	ldr	r0, [pc, #64]	; (1ea90 <lll_conn_isr_tx+0x70>)
   1ea4e:	f008 ff40 	bl	278d2 <printk>
   1ea52:	4040      	eors	r0, r0
   1ea54:	f380 8811 	msr	BASEPRI, r0
   1ea58:	f04f 0003 	mov.w	r0, #3
   1ea5c:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1ea5e:	f000 fe29 	bl	1f6b4 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1ea62:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1ea64:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1ea66:	4608      	mov	r0, r1
   1ea68:	f00e fc7b 	bl	2d362 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1ea6c:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1ea6e:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1ea70:	4608      	mov	r0, r1
   1ea72:	f00e fc72 	bl	2d35a <radio_tx_chain_delay_get>
   1ea76:	4434      	add	r4, r6
   1ea78:	34cb      	adds	r4, #203	; 0xcb
	radio_tmr_hcto_configure(hcto);
   1ea7a:	1a20      	subs	r0, r4, r0
   1ea7c:	f000 fdd4 	bl	1f628 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1ea80:	4629      	mov	r1, r5
   1ea82:	4804      	ldr	r0, [pc, #16]	; (1ea94 <lll_conn_isr_tx+0x74>)
}
   1ea84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1ea88:	f000 bb5e 	b.w	1f148 <radio_isr_set>
   1ea8c:	00036119 	.word	0x00036119
   1ea90:	0003067f 	.word	0x0003067f
   1ea94:	0001ea99 	.word	0x0001ea99

0001ea98 <lll_conn_isr_rx>:
{
   1ea98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1ea9c:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1ea9e:	f000 fc49 	bl	1f334 <radio_is_done>
   1eaa2:	b2c5      	uxtb	r5, r0
	if (trx_done) {
   1eaa4:	b185      	cbz	r5, 1eac8 <lll_conn_isr_rx+0x30>
		crc_ok = radio_crc_is_valid();
   1eaa6:	f000 fc65 	bl	1f374 <radio_crc_is_valid>
   1eaaa:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   1eaac:	f000 fcb0 	bl	1f410 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1eab0:	f00e fa05 	bl	2cebe <lll_isr_rx_status_reset>
	if (!trx_done) {
   1eab4:	b955      	cbnz	r5, 1eacc <lll_conn_isr_rx+0x34>
		radio_isr_set(isr_done, param);
   1eab6:	4621      	mov	r1, r4
   1eab8:	4893      	ldr	r0, [pc, #588]	; (1ed08 <lll_conn_isr_rx+0x270>)
   1eaba:	f000 fb45 	bl	1f148 <radio_isr_set>
		radio_disable();
   1eabe:	f000 fc11 	bl	1f2e4 <radio_disable>
}
   1eac2:	b002      	add	sp, #8
   1eac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = rssi_ready = 0U;
   1eac8:	462f      	mov	r7, r5
   1eaca:	e7f1      	b.n	1eab0 <lll_conn_isr_rx+0x18>
	trx_cnt++;
   1eacc:	4a8f      	ldr	r2, [pc, #572]	; (1ed0c <lll_conn_isr_rx+0x274>)
   1eace:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1ead0:	2001      	movs	r0, #1
	trx_cnt++;
   1ead2:	3301      	adds	r3, #1
   1ead4:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1ead6:	f7fc fc55 	bl	1b384 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1eada:	4606      	mov	r6, r0
   1eadc:	b950      	cbnz	r0, 1eaf4 <lll_conn_isr_rx+0x5c>
   1eade:	22d0      	movs	r2, #208	; 0xd0
   1eae0:	498b      	ldr	r1, [pc, #556]	; (1ed10 <lll_conn_isr_rx+0x278>)
   1eae2:	488c      	ldr	r0, [pc, #560]	; (1ed14 <lll_conn_isr_rx+0x27c>)
   1eae4:	f008 fef5 	bl	278d2 <printk>
   1eae8:	4040      	eors	r0, r0
   1eaea:	f380 8811 	msr	BASEPRI, r0
   1eaee:	f04f 0003 	mov.w	r0, #3
   1eaf2:	df02      	svc	2
	if (crc_ok) {
   1eaf4:	f8df 8228 	ldr.w	r8, [pc, #552]	; 1ed20 <lll_conn_isr_rx+0x288>
   1eaf8:	2f00      	cmp	r7, #0
   1eafa:	f000 80e6 	beq.w	1ecca <lll_conn_isr_rx+0x232>
		       offsetof(struct pdu_data, lldata));
	}
#endif

	/* Ack for tx-ed data */
	if (pdu_data_rx->nesn != lll->sn) {
   1eafe:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1eb02:	7f31      	ldrb	r1, [r6, #28]
   1eb04:	f003 0201 	and.w	r2, r3, #1
   1eb08:	f3c1 0180 	ubfx	r1, r1, #2, #1
   1eb0c:	4291      	cmp	r1, r2
   1eb0e:	f000 80a6 	beq.w	1ec5e <lll_conn_isr_rx+0x1c6>
		struct pdu_data *pdu_data_tx;
		struct node_tx *tx;
		memq_link_t *link;

		/* Increment sequence number */
		lll->sn++;
   1eb12:	f082 0201 	eor.w	r2, r2, #1
   1eb16:	f362 0300 	bfi	r3, r2, #0, #1
   1eb1a:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56

#if defined(CONFIG_BT_PERIPHERAL)
		/* First ack (and redundantly any other ack) enable use of
		 * slave latency.
		 */
		if (lll->role) {
   1eb1e:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1eb22:	2b00      	cmp	r3, #0
			lll->slave.latency_enabled = 1;
   1eb24:	bfbe      	ittt	lt
   1eb26:	f894 3024 	ldrblt.w	r3, [r4, #36]	; 0x24
   1eb2a:	f043 0301 	orrlt.w	r3, r3, #1
   1eb2e:	f884 3024 	strblt.w	r3, [r4, #36]	; 0x24
		}
#endif /* CONFIG_BT_PERIPHERAL */

		FORCE_MD_CNT_DEC();

		if (!lll->empty) {
   1eb32:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1eb36:	f013 0504 	ands.w	r5, r3, #4
   1eb3a:	f040 808a 	bne.w	1ec52 <lll_conn_isr_rx+0x1ba>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1eb3e:	aa01      	add	r2, sp, #4
   1eb40:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   1eb44:	f00d fbfb 	bl	2c33e <memq_peek>
			}

			link = NULL;
		}

		if (link) {
   1eb48:	4681      	mov	r9, r0
   1eb4a:	2800      	cmp	r0, #0
   1eb4c:	f040 808a 	bne.w	1ec64 <lll_conn_isr_rx+0x1cc>
			}
		}
	}

	/* process received data */
	if ((pdu_data_rx->sn == lll->nesn) &&
   1eb50:	7f32      	ldrb	r2, [r6, #28]
   1eb52:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1eb56:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1eb5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1eb5e:	429a      	cmp	r2, r3
   1eb60:	f000 809f 	beq.w	1eca2 <lll_conn_isr_rx+0x20a>
	is_rx_enqueue = 0U;
   1eb64:	f04f 0a00 	mov.w	sl, #0
		crc_valid = 1U;
   1eb68:	4b6b      	ldr	r3, [pc, #428]	; (1ed18 <lll_conn_isr_rx+0x280>)
		crc_expire = 0U;
   1eb6a:	2500      	movs	r5, #0
		crc_valid = 1U;
   1eb6c:	2201      	movs	r2, #1
		crc_expire = 0U;
   1eb6e:	f888 5000 	strb.w	r5, [r8]
		crc_valid = 1U;
   1eb72:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1eb74:	a901      	add	r1, sp, #4
   1eb76:	4620      	mov	r0, r4
   1eb78:	f00e fb22 	bl	2d1c0 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1eb7c:	2d00      	cmp	r5, #0
   1eb7e:	f040 80b7 	bne.w	1ecf0 <lll_conn_isr_rx+0x258>
   1eb82:	b157      	cbz	r7, 1eb9a <lll_conn_isr_rx+0x102>
   1eb84:	7f33      	ldrb	r3, [r6, #28]
   1eb86:	06d9      	lsls	r1, r3, #27
   1eb88:	d407      	bmi.n	1eb9a <lll_conn_isr_rx+0x102>
			      (pdu_data_tx->md == 0) &&
   1eb8a:	9b01      	ldr	r3, [sp, #4]
   1eb8c:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1eb8e:	06d2      	lsls	r2, r2, #27
   1eb90:	d403      	bmi.n	1eb9a <lll_conn_isr_rx+0x102>
			      (pdu_data_tx->md == 0) &&
   1eb92:	785b      	ldrb	r3, [r3, #1]
   1eb94:	2b00      	cmp	r3, #0
   1eb96:	f000 80ab 	beq.w	1ecf0 <lll_conn_isr_rx+0x258>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1eb9a:	2096      	movs	r0, #150	; 0x96
   1eb9c:	f000 fc90 	bl	1f4c0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1eba0:	2000      	movs	r0, #0
   1eba2:	f000 fbf9 	bl	1f398 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1eba6:	4621      	mov	r1, r4
   1eba8:	485c      	ldr	r0, [pc, #368]	; (1ed1c <lll_conn_isr_rx+0x284>)
   1ebaa:	f000 facd 	bl	1f148 <radio_isr_set>
		radio_tmr_end_capture();
   1ebae:	f000 fd73 	bl	1f698 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1ebb2:	9901      	ldr	r1, [sp, #4]
   1ebb4:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
   1ebb8:	780b      	ldrb	r3, [r1, #0]
   1ebba:	f3c2 0200 	ubfx	r2, r2, #0, #1
   1ebbe:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = lll->nesn;
   1ebc2:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
   1ebc6:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1ebca:	f362 0382 	bfi	r3, r2, #2, #1
   1ebce:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1ebd0:	4620      	mov	r0, r4
   1ebd2:	f00e fae5 	bl	2d1a0 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1ebd6:	f000 fba3 	bl	1f320 <radio_is_ready>
   1ebda:	b158      	cbz	r0, 1ebf4 <lll_conn_isr_rx+0x15c>
   1ebdc:	f44f 729e 	mov.w	r2, #316	; 0x13c
   1ebe0:	494b      	ldr	r1, [pc, #300]	; (1ed10 <lll_conn_isr_rx+0x278>)
   1ebe2:	484c      	ldr	r0, [pc, #304]	; (1ed14 <lll_conn_isr_rx+0x27c>)
   1ebe4:	f008 fe75 	bl	278d2 <printk>
   1ebe8:	4040      	eors	r0, r0
   1ebea:	f380 8811 	msr	BASEPRI, r0
   1ebee:	f04f 0003 	mov.w	r0, #3
   1ebf2:	df02      	svc	2
	if (!radio_tmr_aa_restore()) {
   1ebf4:	f000 fd44 	bl	1f680 <radio_tmr_aa_restore>
   1ebf8:	b918      	cbnz	r0, 1ec02 <lll_conn_isr_rx+0x16a>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1ebfa:	f000 fd35 	bl	1f668 <radio_tmr_aa_get>
   1ebfe:	f000 fd39 	bl	1f674 <radio_tmr_aa_save>
	if (tx_release) {
   1ec02:	f1b9 0f00 	cmp.w	r9, #0
   1ec06:	d07a      	beq.n	1ecfe <lll_conn_isr_rx+0x266>
		LL_ASSERT(lll->handle != 0xFFFF);
   1ec08:	8a22      	ldrh	r2, [r4, #16]
   1ec0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ec0e:	429a      	cmp	r2, r3
   1ec10:	d10b      	bne.n	1ec2a <lll_conn_isr_rx+0x192>
   1ec12:	f240 124b 	movw	r2, #331	; 0x14b
   1ec16:	493e      	ldr	r1, [pc, #248]	; (1ed10 <lll_conn_isr_rx+0x278>)
   1ec18:	483e      	ldr	r0, [pc, #248]	; (1ed14 <lll_conn_isr_rx+0x27c>)
   1ec1a:	f008 fe5a 	bl	278d2 <printk>
   1ec1e:	4040      	eors	r0, r0
   1ec20:	f380 8811 	msr	BASEPRI, r0
   1ec24:	f04f 0003 	mov.w	r0, #3
   1ec28:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1ec2a:	4649      	mov	r1, r9
   1ec2c:	8a20      	ldrh	r0, [r4, #16]
   1ec2e:	f7fe fa87 	bl	1d140 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1ec32:	f1ba 0f00 	cmp.w	sl, #0
   1ec36:	d009      	beq.n	1ec4c <lll_conn_isr_rx+0x1b4>
		ull_pdu_rx_alloc();
   1ec38:	f7fc fbbc 	bl	1b3b4 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1ec3c:	2303      	movs	r3, #3
   1ec3e:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1ec40:	8a23      	ldrh	r3, [r4, #16]
   1ec42:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1ec44:	4631      	mov	r1, r6
   1ec46:	6830      	ldr	r0, [r6, #0]
   1ec48:	f7fc fbca 	bl	1b3e0 <ull_rx_put>
		ull_rx_sched();
   1ec4c:	f7fc fbd8 	bl	1b400 <ull_rx_sched>
	ARG_UNUSED(rssi_ready);
   1ec50:	e737      	b.n	1eac2 <lll_conn_isr_rx+0x2a>
			lll->empty = 0;
   1ec52:	f36f 0382 	bfc	r3, #2, #1
   1ec56:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1ec5a:	f000 fb95 	bl	1f388 <radio_pkt_empty_get>
	tx_release = NULL;
   1ec5e:	f04f 0900 	mov.w	r9, #0
   1ec62:	e775      	b.n	1eb50 <lll_conn_isr_rx+0xb8>
					       lll->packet_tx_head_offset);
   1ec64:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
			pdu_data_tx_len = pdu_data_tx->len;
   1ec68:	9a01      	ldr	r2, [sp, #4]
   1ec6a:	441a      	add	r2, r3
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1ec6c:	7952      	ldrb	r2, [r2, #5]
   1ec6e:	4413      	add	r3, r2
			if (offset < lll->packet_tx_head_len) {
   1ec70:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1ec74:	b2db      	uxtb	r3, r3
			if (offset < lll->packet_tx_head_len) {
   1ec76:	4293      	cmp	r3, r2
   1ec78:	d202      	bcs.n	1ec80 <lll_conn_isr_rx+0x1e8>
				lll->packet_tx_head_offset = offset;
   1ec7a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
   1ec7e:	e7ee      	b.n	1ec5e <lll_conn_isr_rx+0x1c6>
			} else if (offset == lll->packet_tx_head_len) {
   1ec80:	d1ed      	bne.n	1ec5e <lll_conn_isr_rx+0x1c6>
				memq_dequeue(lll->memq_tx.tail,
   1ec82:	462a      	mov	r2, r5
				lll->packet_tx_head_len = 0;
   1ec84:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
				memq_dequeue(lll->memq_tx.tail,
   1ec88:	f104 0140 	add.w	r1, r4, #64	; 0x40
   1ec8c:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1ec8e:	f00d fb5e 	bl	2c34e <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1ec92:	9b01      	ldr	r3, [sp, #4]
   1ec94:	681a      	ldr	r2, [r3, #0]
   1ec96:	f8c9 2000 	str.w	r2, [r9]
				tx->next = link;
   1ec9a:	f8c3 9000 	str.w	r9, [r3]
   1ec9e:	4699      	mov	r9, r3
   1eca0:	e756      	b.n	1eb50 <lll_conn_isr_rx+0xb8>
	    /* check so that we will NEVER use the rx buffer reserved for empty
	     * packet and internal control enqueue
	     */
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1eca2:	2003      	movs	r0, #3
   1eca4:	f7fc fb6e 	bl	1b384 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1eca8:	2800      	cmp	r0, #0
   1ecaa:	f43f af5b 	beq.w	1eb64 <lll_conn_isr_rx+0xcc>
		/* Increment next expected serial number */
		lll->nesn++;
   1ecae:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1ecb2:	f083 0302 	eor.w	r3, r3, #2
   1ecb6:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56

		if (pdu_data_rx->len != 0) {
   1ecba:	f896 a01d 	ldrb.w	sl, [r6, #29]
	is_rx_enqueue = 0U;
   1ecbe:	f11a 0a00 	adds.w	sl, sl, #0
   1ecc2:	bf18      	it	ne
   1ecc4:	f04f 0a01 	movne.w	sl, #1
   1ecc8:	e74e      	b.n	1eb68 <lll_conn_isr_rx+0xd0>
		if (crc_expire == 0U) {
   1ecca:	f898 3000 	ldrb.w	r3, [r8]
   1ecce:	b913      	cbnz	r3, 1ecd6 <lll_conn_isr_rx+0x23e>
			crc_expire = 2U;
   1ecd0:	2302      	movs	r3, #2
   1ecd2:	f888 3000 	strb.w	r3, [r8]
		crc_expire--;
   1ecd6:	f898 5000 	ldrb.w	r5, [r8]
   1ecda:	3d01      	subs	r5, #1
   1ecdc:	b2ed      	uxtb	r5, r5
   1ecde:	f888 5000 	strb.w	r5, [r8]
	is_rx_enqueue = 0U;
   1ece2:	f04f 0a00 	mov.w	sl, #0
		is_done = (crc_expire == 0U);
   1ece6:	fab5 f585 	clz	r5, r5
   1ecea:	096d      	lsrs	r5, r5, #5
	tx_release = NULL;
   1ecec:	46d1      	mov	r9, sl
   1ecee:	e741      	b.n	1eb74 <lll_conn_isr_rx+0xdc>
		radio_isr_set(isr_done, param);
   1ecf0:	4621      	mov	r1, r4
   1ecf2:	4805      	ldr	r0, [pc, #20]	; (1ed08 <lll_conn_isr_rx+0x270>)
   1ecf4:	f000 fa28 	bl	1f148 <radio_isr_set>
			radio_switch_complete_and_disable();
   1ecf8:	f000 fb64 	bl	1f3c4 <radio_switch_complete_and_disable>
   1ecfc:	e759      	b.n	1ebb2 <lll_conn_isr_rx+0x11a>
	if (is_rx_enqueue) {
   1ecfe:	f1ba 0f00 	cmp.w	sl, #0
   1ed02:	f43f aede 	beq.w	1eac2 <lll_conn_isr_rx+0x2a>
   1ed06:	e797      	b.n	1ec38 <lll_conn_isr_rx+0x1a0>
   1ed08:	0001e8f9 	.word	0x0001e8f9
   1ed0c:	200056da 	.word	0x200056da
   1ed10:	00036119 	.word	0x00036119
   1ed14:	0003067f 	.word	0x0003067f
   1ed18:	20005899 	.word	0x20005899
   1ed1c:	0001ea21 	.word	0x0001ea21
   1ed20:	20005898 	.word	0x20005898

0001ed24 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1ed24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1ed28:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1ed2a:	8a22      	ldrh	r2, [r4, #16]
   1ed2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ed30:	429a      	cmp	r2, r3
{
   1ed32:	4681      	mov	r9, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   1ed34:	d115      	bne.n	1ed62 <prepare_cb+0x3e>
		int err;

		err = lll_hfclock_off();
   1ed36:	f7fe ff41 	bl	1dbbc <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1ed3a:	2800      	cmp	r0, #0
   1ed3c:	da0a      	bge.n	1ed54 <prepare_cb+0x30>
   1ed3e:	227d      	movs	r2, #125	; 0x7d
   1ed40:	495b      	ldr	r1, [pc, #364]	; (1eeb0 <prepare_cb+0x18c>)
   1ed42:	485c      	ldr	r0, [pc, #368]	; (1eeb4 <prepare_cb+0x190>)
   1ed44:	f008 fdc5 	bl	278d2 <printk>
   1ed48:	4040      	eors	r0, r0
   1ed4a:	f380 8811 	msr	BASEPRI, r0
   1ed4e:	f04f 0003 	mov.w	r0, #3
   1ed52:	df02      	svc	2

		lll_done(NULL);
   1ed54:	2000      	movs	r0, #0
   1ed56:	f7fe fe25 	bl	1d9a4 <lll_done>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1ed5a:	2000      	movs	r0, #0
   1ed5c:	b003      	add	sp, #12
   1ed5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	lll_conn_prepare_reset();
   1ed62:	f7ff fe05 	bl	1e970 <lll_conn_prepare_reset>
	lll->latency_event = lll->latency_prepare - 1;
   1ed66:	8ae3      	ldrh	r3, [r4, #22]
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1ed68:	8b61      	ldrh	r1, [r4, #26]
	lll->latency_event = lll->latency_prepare - 1;
   1ed6a:	1e5a      	subs	r2, r3, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1ed6c:	440b      	add	r3, r1
   1ed6e:	8363      	strh	r3, [r4, #26]
	if (lll->data_chan_sel) {
   1ed70:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1ed74:	b292      	uxth	r2, r2
	lll->latency_prepare = 0;
   1ed76:	2600      	movs	r6, #0
	if (lll->data_chan_sel) {
   1ed78:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   1ed7a:	8322      	strh	r2, [r4, #24]
	lll->latency_prepare = 0;
   1ed7c:	82e6      	strh	r6, [r4, #22]
	if (lll->data_chan_sel) {
   1ed7e:	d577      	bpl.n	1ee70 <prepare_cb+0x14c>
		LL_ASSERT(0);
   1ed80:	229b      	movs	r2, #155	; 0x9b
   1ed82:	494b      	ldr	r1, [pc, #300]	; (1eeb0 <prepare_cb+0x18c>)
   1ed84:	484b      	ldr	r0, [pc, #300]	; (1eeb4 <prepare_cb+0x190>)
   1ed86:	f008 fda4 	bl	278d2 <printk>
   1ed8a:	4040      	eors	r0, r0
   1ed8c:	f380 8811 	msr	BASEPRI, r0
   1ed90:	f04f 0003 	mov.w	r0, #3
   1ed94:	df02      	svc	2
	lll->slave.window_widening_event_us +=
   1ed96:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1ed9a:	4413      	add	r3, r2
	    lll->slave.window_widening_max_us) {
   1ed9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
   1ed9e:	429a      	cmp	r2, r3
   1eda0:	bf94      	ite	ls
   1eda2:	6362      	strls	r2, [r4, #52]	; 0x34
   1eda4:	6363      	strhi	r3, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   1eda6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1edaa:	2500      	movs	r5, #0
	lll->slave.window_size_event_us +=
   1edac:	4413      	add	r3, r2
	lll->slave.window_size_prepare_us = 0;
   1edae:	e9c4 530e 	strd	r5, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1edb2:	6325      	str	r5, [r4, #48]	; 0x30
	radio_reset();
   1edb4:	f000 f9e8 	bl	1f188 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1edb8:	4628      	mov	r0, r5
   1edba:	f000 fa19 	bl	1f1f0 <radio_tx_power_set>
	lll_conn_rx_pkt_set(lll);
   1edbe:	4620      	mov	r0, r4
   1edc0:	f7ff fe08 	bl	1e9d4 <lll_conn_rx_pkt_set>
	radio_aa_set(lll->access_addr);
   1edc4:	f104 0008 	add.w	r0, r4, #8
   1edc8:	f000 fa30 	bl	1f22c <radio_aa_set>
			     ((uint32_t)lll->crc_init[1] << 8) |
   1edcc:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1edce:	7ba1      	ldrb	r1, [r4, #14]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1edd0:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1edd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   1edd6:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1edd8:	f240 605b 	movw	r0, #1627	; 0x65b
   1eddc:	4319      	orrs	r1, r3
   1edde:	f000 fabd 	bl	1f35c <radio_crc_configure>
	lll_chan_set(data_chan_use);
   1ede2:	4630      	mov	r0, r6
   1ede4:	f7fe fe28 	bl	1da38 <lll_chan_set>
	radio_isr_set(lll_conn_isr_rx, lll);
   1ede8:	4621      	mov	r1, r4
   1edea:	4833      	ldr	r0, [pc, #204]	; (1eeb8 <prepare_cb+0x194>)
   1edec:	f000 f9ac 	bl	1f148 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1edf0:	2096      	movs	r0, #150	; 0x96
   1edf2:	f000 fb65 	bl	1f4c0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1edf6:	462b      	mov	r3, r5
   1edf8:	462a      	mov	r2, r5
   1edfa:	4629      	mov	r1, r5
   1edfc:	4628      	mov	r0, r5
   1edfe:	f000 fad7 	bl	1f3b0 <radio_switch_complete_and_tx>
	evt = HDR_LLL2EVT(lll);
   1ee02:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1ee06:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_at_event += lll_evt_offset_get(evt);
   1ee0a:	4640      	mov	r0, r8
   1ee0c:	f00e f82d 	bl	2ce6a <lll_evt_offset_get>
   1ee10:	4407      	add	r7, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1ee12:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1ee16:	f107 0109 	add.w	r1, r7, #9
   1ee1a:	4628      	mov	r0, r5
   1ee1c:	f000 fb5c 	bl	1f4d8 <radio_tmr_start>
   1ee20:	4681      	mov	r9, r0
	radio_tmr_aa_capture();
   1ee22:	f000 fc0d 	bl	1f640 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1ee26:	4628      	mov	r0, r5
   1ee28:	f000 fc24 	bl	1f674 <radio_tmr_aa_save>
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1ee2c:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1ee2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	hcto += radio_rx_ready_delay_get(0, 0);
   1ee30:	4629      	mov	r1, r5
   1ee32:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   1ee36:	4628      	mov	r0, r5
   1ee38:	f103 0688 	add.w	r6, r3, #136	; 0x88
   1ee3c:	f00e fa8f 	bl	2d35e <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
   1ee40:	444e      	add	r6, r9
	hcto += radio_rx_chain_delay_get(0, 0);
   1ee42:	4629      	mov	r1, r5
	hcto += addr_us_get(0);
   1ee44:	4406      	add	r6, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1ee46:	4628      	mov	r0, r5
   1ee48:	f00e fa8b 	bl	2d362 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1ee4c:	4430      	add	r0, r6
   1ee4e:	f000 fbeb 	bl	1f628 <radio_tmr_hcto_configure>
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1ee52:	7c21      	ldrb	r1, [r4, #16]
   1ee54:	3105      	adds	r1, #5
   1ee56:	463a      	mov	r2, r7
   1ee58:	b2c9      	uxtb	r1, r1
   1ee5a:	4640      	mov	r0, r8
   1ee5c:	f00e f813 	bl	2ce86 <lll_preempt_calc>
   1ee60:	b198      	cbz	r0, 1ee8a <prepare_cb+0x166>
		radio_isr_set(lll_isr_abort, lll);
   1ee62:	4621      	mov	r1, r4
   1ee64:	4815      	ldr	r0, [pc, #84]	; (1eebc <prepare_cb+0x198>)
   1ee66:	f000 f96f 	bl	1f148 <radio_isr_set>
		radio_disable();
   1ee6a:	f000 fa3b 	bl	1f2e4 <radio_disable>
   1ee6e:	e774      	b.n	1ed5a <prepare_cb+0x36>
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1ee70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ee74:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1ee78:	9300      	str	r3, [sp, #0]
   1ee7a:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1ee7e:	f104 031c 	add.w	r3, r4, #28
   1ee82:	f00d ff94 	bl	2cdae <lll_chan_sel_1>
   1ee86:	4606      	mov	r6, r0
   1ee88:	e785      	b.n	1ed96 <prepare_cb+0x72>
		ret = lll_prepare_done(lll);
   1ee8a:	4620      	mov	r0, r4
   1ee8c:	f00d ffe8 	bl	2ce60 <lll_prepare_done>
		LL_ASSERT(!ret);
   1ee90:	2800      	cmp	r0, #0
   1ee92:	f43f af62 	beq.w	1ed5a <prepare_cb+0x36>
   1ee96:	f240 1213 	movw	r2, #275	; 0x113
   1ee9a:	4905      	ldr	r1, [pc, #20]	; (1eeb0 <prepare_cb+0x18c>)
   1ee9c:	4805      	ldr	r0, [pc, #20]	; (1eeb4 <prepare_cb+0x190>)
   1ee9e:	f008 fd18 	bl	278d2 <printk>
   1eea2:	4040      	eors	r0, r0
   1eea4:	f380 8811 	msr	BASEPRI, r0
   1eea8:	f04f 0003 	mov.w	r0, #3
   1eeac:	df02      	svc	2
   1eeae:	e754      	b.n	1ed5a <prepare_cb+0x36>
   1eeb0:	00036175 	.word	0x00036175
   1eeb4:	0003067f 	.word	0x0003067f
   1eeb8:	0001ea99 	.word	0x0001ea99
   1eebc:	0002ceeb 	.word	0x0002ceeb

0001eec0 <lll_slave_prepare>:
{
   1eec0:	b513      	push	{r0, r1, r4, lr}
   1eec2:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1eec4:	f7fe fe64 	bl	1db90 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1eec8:	2800      	cmp	r0, #0
   1eeca:	da0a      	bge.n	1eee2 <lll_slave_prepare+0x22>
   1eecc:	2248      	movs	r2, #72	; 0x48
   1eece:	4918      	ldr	r1, [pc, #96]	; (1ef30 <lll_slave_prepare+0x70>)
   1eed0:	4818      	ldr	r0, [pc, #96]	; (1ef34 <lll_slave_prepare+0x74>)
   1eed2:	f008 fcfe 	bl	278d2 <printk>
   1eed6:	4040      	eors	r0, r0
   1eed8:	f380 8811 	msr	BASEPRI, r0
   1eedc:	f04f 0003 	mov.w	r0, #3
   1eee0:	df02      	svc	2
	lll = p->param;
   1eee2:	68e2      	ldr	r2, [r4, #12]
	elapsed = p->lazy + 1;
   1eee4:	8923      	ldrh	r3, [r4, #8]
	lll->latency_prepare += elapsed;
   1eee6:	8ad1      	ldrh	r1, [r2, #22]
	    lll->slave.window_widening_periodic_us * elapsed;
   1eee8:	6a90      	ldr	r0, [r2, #40]	; 0x28
	elapsed = p->lazy + 1;
   1eeea:	3301      	adds	r3, #1
   1eeec:	b29b      	uxth	r3, r3
	lll->latency_prepare += elapsed;
   1eeee:	4419      	add	r1, r3
   1eef0:	82d1      	strh	r1, [r2, #22]
	lll->slave.window_widening_prepare_us +=
   1eef2:	6b11      	ldr	r1, [r2, #48]	; 0x30
   1eef4:	fb00 1303 	mla	r3, r0, r3, r1
	    lll->slave.window_widening_max_us) {
   1eef8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
		lll->slave.window_widening_prepare_us =
   1eefa:	4299      	cmp	r1, r3
   1eefc:	bf94      	ite	ls
   1eefe:	6311      	strls	r1, [r2, #48]	; 0x30
   1ef00:	6313      	strhi	r3, [r2, #48]	; 0x30
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1ef02:	480d      	ldr	r0, [pc, #52]	; (1ef38 <lll_slave_prepare+0x78>)
   1ef04:	9400      	str	r4, [sp, #0]
   1ef06:	2300      	movs	r3, #0
   1ef08:	4a0c      	ldr	r2, [pc, #48]	; (1ef3c <lll_slave_prepare+0x7c>)
   1ef0a:	490d      	ldr	r1, [pc, #52]	; (1ef40 <lll_slave_prepare+0x80>)
   1ef0c:	f00d ff9f 	bl	2ce4e <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1ef10:	b160      	cbz	r0, 1ef2c <lll_slave_prepare+0x6c>
   1ef12:	3077      	adds	r0, #119	; 0x77
   1ef14:	d00a      	beq.n	1ef2c <lll_slave_prepare+0x6c>
   1ef16:	225f      	movs	r2, #95	; 0x5f
   1ef18:	4905      	ldr	r1, [pc, #20]	; (1ef30 <lll_slave_prepare+0x70>)
   1ef1a:	4806      	ldr	r0, [pc, #24]	; (1ef34 <lll_slave_prepare+0x74>)
   1ef1c:	f008 fcd9 	bl	278d2 <printk>
   1ef20:	4040      	eors	r0, r0
   1ef22:	f380 8811 	msr	BASEPRI, r0
   1ef26:	f04f 0003 	mov.w	r0, #3
   1ef2a:	df02      	svc	2
}
   1ef2c:	b002      	add	sp, #8
   1ef2e:	bd10      	pop	{r4, pc}
   1ef30:	00036175 	.word	0x00036175
   1ef34:	0003067f 	.word	0x0003067f
   1ef38:	0002ce65 	.word	0x0002ce65
   1ef3c:	0001ed25 	.word	0x0001ed25
   1ef40:	0001e98d 	.word	0x0001e98d

0001ef44 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1ef44:	4b05      	ldr	r3, [pc, #20]	; (1ef5c <cntr_init+0x18>)
   1ef46:	2200      	movs	r2, #0
   1ef48:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->EVTENSET = mask;
   1ef4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ef50:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1ef54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1ef58:	4770      	bx	lr
   1ef5a:	bf00      	nop
   1ef5c:	4000b000 	.word	0x4000b000

0001ef60 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1ef60:	4a04      	ldr	r2, [pc, #16]	; (1ef74 <cntr_start+0x14>)
   1ef62:	7813      	ldrb	r3, [r2, #0]
   1ef64:	1c59      	adds	r1, r3, #1
   1ef66:	7011      	strb	r1, [r2, #0]
   1ef68:	2001      	movs	r0, #1
   1ef6a:	b913      	cbnz	r3, 1ef72 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1ef6c:	4a02      	ldr	r2, [pc, #8]	; (1ef78 <cntr_start+0x18>)
   1ef6e:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1ef70:	4618      	mov	r0, r3
}
   1ef72:	4770      	bx	lr
   1ef74:	2000589a 	.word	0x2000589a
   1ef78:	4000b000 	.word	0x4000b000

0001ef7c <cntr_stop>:

uint32_t cntr_stop(void)
{
   1ef7c:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1ef7e:	4c0c      	ldr	r4, [pc, #48]	; (1efb0 <cntr_stop+0x34>)
   1ef80:	7823      	ldrb	r3, [r4, #0]
   1ef82:	b953      	cbnz	r3, 1ef9a <cntr_stop+0x1e>
   1ef84:	222d      	movs	r2, #45	; 0x2d
   1ef86:	490b      	ldr	r1, [pc, #44]	; (1efb4 <cntr_stop+0x38>)
   1ef88:	480b      	ldr	r0, [pc, #44]	; (1efb8 <cntr_stop+0x3c>)
   1ef8a:	f008 fca2 	bl	278d2 <printk>
   1ef8e:	4040      	eors	r0, r0
   1ef90:	f380 8811 	msr	BASEPRI, r0
   1ef94:	f04f 0003 	mov.w	r0, #3
   1ef98:	df02      	svc	2

	if (--_refcount) {
   1ef9a:	7820      	ldrb	r0, [r4, #0]
   1ef9c:	3801      	subs	r0, #1
   1ef9e:	b2c0      	uxtb	r0, r0
   1efa0:	7020      	strb	r0, [r4, #0]
   1efa2:	2301      	movs	r3, #1
   1efa4:	b910      	cbnz	r0, 1efac <cntr_stop+0x30>
   1efa6:	4a05      	ldr	r2, [pc, #20]	; (1efbc <cntr_stop+0x40>)
   1efa8:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1efaa:	bd10      	pop	{r4, pc}
		return 1;
   1efac:	4618      	mov	r0, r3
   1efae:	e7fc      	b.n	1efaa <cntr_stop+0x2e>
   1efb0:	2000589a 	.word	0x2000589a
   1efb4:	000361d3 	.word	0x000361d3
   1efb8:	0003067f 	.word	0x0003067f
   1efbc:	4000b004 	.word	0x4000b004

0001efc0 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1efc0:	4b01      	ldr	r3, [pc, #4]	; (1efc8 <cntr_cnt_get+0x8>)
   1efc2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1efc6:	4770      	bx	lr
   1efc8:	4000b000 	.word	0x4000b000

0001efcc <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1efcc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1efd0:	4b01      	ldr	r3, [pc, #4]	; (1efd8 <cntr_cmp_set+0xc>)
   1efd2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1efd6:	4770      	bx	lr
   1efd8:	4000b000 	.word	0x4000b000

0001efdc <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1efdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1efde:	4b13      	ldr	r3, [pc, #76]	; (1f02c <do_ecb+0x50>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1efe0:	4c13      	ldr	r4, [pc, #76]	; (1f030 <do_ecb+0x54>)
   1efe2:	2501      	movs	r5, #1
{
   1efe4:	4684      	mov	ip, r0
   1efe6:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   1efe8:	2700      	movs	r7, #0
   1efea:	46a6      	mov	lr, r4
   1efec:	461a      	mov	r2, r3
   1efee:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1eff0:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1eff4:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1eff8:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   1effc:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1effe:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   1f002:	b931      	cbnz	r1, 1f012 <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1f004:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1f008:	b919      	cbnz	r1, 1f012 <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1f00a:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1f00e:	2900      	cmp	r1, #0
   1f010:	d1f5      	bne.n	1effe <do_ecb+0x22>
   1f012:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1f016:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   1f01a:	2900      	cmp	r1, #0
   1f01c:	d1e7      	bne.n	1efee <do_ecb+0x12>
   1f01e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
   1f022:	2800      	cmp	r0, #0
   1f024:	d0e3      	beq.n	1efee <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
   1f026:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   1f02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f02c:	4000e000 	.word	0x4000e000
   1f030:	4000e004 	.word	0x4000e004

0001f034 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(uint8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   1f034:	2800      	cmp	r0, #0
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1f036:	4b08      	ldr	r3, [pc, #32]	; (1f058 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   1f038:	bf14      	ite	ne
   1f03a:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   1f03e:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   1f042:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   1f046:	bf14      	ite	ne
   1f048:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   1f04c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1f050:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   1f054:	4770      	bx	lr
   1f056:	bf00      	nop
   1f058:	4001f000 	.word	0x4001f000

0001f05c <sw_switch.isra.10>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1f05c:	b5f0      	push	{r4, r5, r6, r7, lr}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1f05e:	4e2d      	ldr	r6, [pc, #180]	; (1f114 <sw_switch.isra.10+0xb8>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f060:	4f2d      	ldr	r7, [pc, #180]	; (1f118 <sw_switch.isra.10+0xbc>)
   1f062:	7835      	ldrb	r5, [r6, #0]
   1f064:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 1f124 <sw_switch.isra.10+0xc8>
   1f068:	f8c7 c568 	str.w	ip, [r7, #1384]	; 0x568
	 */
	nrf_ppi_channel_endpoint_setup(
		NRF_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1f06c:	b22b      	sxth	r3, r5
   1f06e:	00dc      	lsls	r4, r3, #3
   1f070:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1f074:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f078:	f8c7 456c 	str.w	r4, [r7, #1388]	; 0x56c
   1f07c:	f105 040c 	add.w	r4, r5, #12
   1f080:	b2e4      	uxtb	r4, r4
   1f082:	00e4      	lsls	r4, r4, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1f084:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   1f088:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1f08c:	3fc0      	subs	r7, #192	; 0xc0
   1f08e:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1f092:	eb07 0783 	add.w	r7, r7, r3, lsl #2

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f096:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1f09a:	2800      	cmp	r0, #0
   1f09c:	d034      	beq.n	1f108 <sw_switch.isra.10+0xac>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_NS;
   1f09e:	f649 4740 	movw	r7, #40000	; 0x9c40
   1f0a2:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   1f0a6:	2a02      	cmp	r2, #2
   1f0a8:	bf08      	it	eq
   1f0aa:	4638      	moveq	r0, r7
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1f0ac:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1f0b0:	f241 3788 	movw	r7, #5000	; 0x1388
   1f0b4:	2902      	cmp	r1, #2
   1f0b6:	bf14      	ite	ne
   1f0b8:	4611      	movne	r1, r2
   1f0ba:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1f0bc:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   1f0c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f0c4:	4401      	add	r1, r0
   1f0c6:	fbb1 f1f2 	udiv	r1, r1, r2

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f0ca:	4a14      	ldr	r2, [pc, #80]	; (1f11c <sw_switch.isra.10+0xc0>)
   1f0cc:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1f0d0:	009b      	lsls	r3, r3, #2
   1f0d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f0d6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   1f0da:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   1f0de:	428a      	cmp	r2, r1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1f0e0:	bf8b      	itete	hi
   1f0e2:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1f0e6:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1f0e8:	1a51      	subhi	r1, r2, r1
   1f0ea:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
   1f0ee:	bf88      	it	hi
   1f0f0:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1f0f4:	4b08      	ldr	r3, [pc, #32]	; (1f118 <sw_switch.isra.10+0xbc>)
   1f0f6:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1f0fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1f0fe:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   1f100:	f003 0301 	and.w	r3, r3, #1
   1f104:	7033      	strb	r3, [r6, #0]
}
   1f106:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f108:	4a05      	ldr	r2, [pc, #20]	; (1f120 <sw_switch.isra.10+0xc4>)
   1f10a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1f10e:	2128      	movs	r1, #40	; 0x28
   1f110:	e7de      	b.n	1f0d0 <sw_switch.isra.10+0x74>
   1f112:	bf00      	nop
   1f114:	2000589b 	.word	0x2000589b
   1f118:	4001f000 	.word	0x4001f000
   1f11c:	40001000 	.word	0x40001000
   1f120:	40001004 	.word	0x40001004
   1f124:	4000110c 	.word	0x4000110c

0001f128 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1f128:	4b04      	ldr	r3, [pc, #16]	; (1f13c <isr_radio+0x14>)
   1f12a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1f12e:	b123      	cbz	r3, 1f13a <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1f130:	4b03      	ldr	r3, [pc, #12]	; (1f140 <isr_radio+0x18>)
   1f132:	4a04      	ldr	r2, [pc, #16]	; (1f144 <isr_radio+0x1c>)
   1f134:	681b      	ldr	r3, [r3, #0]
   1f136:	6810      	ldr	r0, [r2, #0]
   1f138:	4718      	bx	r3
}
   1f13a:	4770      	bx	lr
   1f13c:	40001000 	.word	0x40001000
   1f140:	200052e4 	.word	0x200052e4
   1f144:	200052e8 	.word	0x200052e8

0001f148 <radio_isr_set>:
{
   1f148:	b538      	push	{r3, r4, r5, lr}
   1f14a:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1f14c:	2001      	movs	r0, #1
{
   1f14e:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1f150:	f7e8 fcb4 	bl	7abc <arch_irq_disable>
	isr_cb_param = param;
   1f154:	4b08      	ldr	r3, [pc, #32]	; (1f178 <radio_isr_set+0x30>)
   1f156:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   1f158:	4b08      	ldr	r3, [pc, #32]	; (1f17c <radio_isr_set+0x34>)
   1f15a:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1f15c:	4b08      	ldr	r3, [pc, #32]	; (1f180 <radio_isr_set+0x38>)
   1f15e:	2210      	movs	r2, #16
   1f160:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f164:	4b07      	ldr	r3, [pc, #28]	; (1f184 <radio_isr_set+0x3c>)
   1f166:	2202      	movs	r2, #2
   1f168:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1f16c:	2001      	movs	r0, #1
}
   1f16e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1f172:	f7e8 bc93 	b.w	7a9c <arch_irq_enable>
   1f176:	bf00      	nop
   1f178:	200052e8 	.word	0x200052e8
   1f17c:	200052e4 	.word	0x200052e4
   1f180:	40001000 	.word	0x40001000
   1f184:	e000e100 	.word	0xe000e100

0001f188 <radio_reset>:
{
   1f188:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1f18a:	2001      	movs	r0, #1
   1f18c:	f7e8 fc96 	bl	7abc <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1f190:	4b0c      	ldr	r3, [pc, #48]	; (1f1c4 <radio_reset+0x3c>)
   1f192:	2200      	movs	r2, #0
   1f194:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   1f198:	2201      	movs	r2, #1
   1f19a:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1f19e:	4a0a      	ldr	r2, [pc, #40]	; (1f1c8 <radio_reset+0x40>)
   1f1a0:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1f1a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1f1a6:	f023 0301 	bic.w	r3, r3, #1
   1f1aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1f1ae:	6013      	str	r3, [r2, #0]
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1f1b0:	4b06      	ldr	r3, [pc, #24]	; (1f1cc <radio_reset+0x44>)
   1f1b2:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   1f1b6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1f1ba:	f44f 5210 	mov.w	r2, #9216	; 0x2400
   1f1be:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   1f1c2:	bd08      	pop	{r3, pc}
   1f1c4:	40001000 	.word	0x40001000
   1f1c8:	40001774 	.word	0x40001774
   1f1cc:	4001f000 	.word	0x4001f000

0001f1d0 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1f1d0:	4b06      	ldr	r3, [pc, #24]	; (1f1ec <radio_phy_set+0x1c>)
	switch (phy) {
   1f1d2:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1f1d4:	bf14      	ite	ne
   1f1d6:	2203      	movne	r2, #3
   1f1d8:	2204      	moveq	r2, #4
   1f1da:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1f1de:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1f1e2:	f042 0201 	orr.w	r2, r2, #1
   1f1e6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1f1ea:	4770      	bx	lr
   1f1ec:	40001000 	.word	0x40001000

0001f1f0 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1f1f0:	4b01      	ldr	r3, [pc, #4]	; (1f1f8 <radio_tx_power_set+0x8>)
   1f1f2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1f1f6:	4770      	bx	lr
   1f1f8:	40001000 	.word	0x40001000

0001f1fc <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1f1fc:	4b01      	ldr	r3, [pc, #4]	; (1f204 <radio_freq_chan_set+0x8>)
   1f1fe:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1f202:	4770      	bx	lr
   1f204:	40001000 	.word	0x40001000

0001f208 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1f208:	4b07      	ldr	r3, [pc, #28]	; (1f228 <radio_whiten_iv_set+0x20>)
   1f20a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1f20e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1f212:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1f216:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1f21a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1f21e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1f222:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1f226:	4770      	bx	lr
   1f228:	40001000 	.word	0x40001000

0001f22c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1f22c:	4a0a      	ldr	r2, [pc, #40]	; (1f258 <radio_aa_set+0x2c>)
   1f22e:	2300      	movs	r3, #0
   1f230:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1f234:	2301      	movs	r3, #1
   1f236:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1f23a:	78c3      	ldrb	r3, [r0, #3]
   1f23c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1f240:	7843      	ldrb	r3, [r0, #1]
   1f242:	7881      	ldrb	r1, [r0, #2]
   1f244:	041b      	lsls	r3, r3, #16
   1f246:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1f24a:	7801      	ldrb	r1, [r0, #0]
   1f24c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1f250:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1f254:	4770      	bx	lr
   1f256:	bf00      	nop
   1f258:	40001000 	.word	0x40001000

0001f25c <radio_pkt_configure>:
	switch (phy) {
   1f25c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1f260:	2b02      	cmp	r3, #2
{
   1f262:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1f264:	bf14      	ite	ne
   1f266:	2400      	movne	r4, #0
   1f268:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   1f26c:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1f26e:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1f272:	bf48      	it	mi
   1f274:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1f278:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1f27a:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1f27e:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1f280:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1f284:	4a09      	ldr	r2, [pc, #36]	; (1f2ac <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1f286:	4303      	orrs	r3, r0
   1f288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1f28c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1f290:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1f294:	4b06      	ldr	r3, [pc, #24]	; (1f2b0 <radio_pkt_configure+0x54>)
   1f296:	4003      	ands	r3, r0
   1f298:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1f29c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1f2a0:	4319      	orrs	r1, r3
   1f2a2:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1f2a6:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1f2aa:	bd10      	pop	{r4, pc}
   1f2ac:	40001000 	.word	0x40001000
   1f2b0:	fef80000 	.word	0xfef80000

0001f2b4 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1f2b4:	4b01      	ldr	r3, [pc, #4]	; (1f2bc <radio_pkt_rx_set+0x8>)
   1f2b6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1f2ba:	4770      	bx	lr
   1f2bc:	40001000 	.word	0x40001000

0001f2c0 <radio_pkt_tx_set>:
   1f2c0:	4b01      	ldr	r3, [pc, #4]	; (1f2c8 <radio_pkt_tx_set+0x8>)
   1f2c2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1f2c6:	4770      	bx	lr
   1f2c8:	40001000 	.word	0x40001000

0001f2cc <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f2cc:	4b01      	ldr	r3, [pc, #4]	; (1f2d4 <radio_rx_enable+0x8>)
   1f2ce:	2201      	movs	r2, #1
   1f2d0:	601a      	str	r2, [r3, #0]
}
   1f2d2:	4770      	bx	lr
   1f2d4:	40001004 	.word	0x40001004

0001f2d8 <radio_tx_enable>:
   1f2d8:	4b01      	ldr	r3, [pc, #4]	; (1f2e0 <radio_tx_enable+0x8>)
   1f2da:	2201      	movs	r2, #1
   1f2dc:	601a      	str	r2, [r3, #0]
}
   1f2de:	4770      	bx	lr
   1f2e0:	40001000 	.word	0x40001000

0001f2e4 <radio_disable>:
    p_reg->CHENCLR = mask;
   1f2e4:	4a07      	ldr	r2, [pc, #28]	; (1f304 <radio_disable+0x20>)
   1f2e6:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1f2ea:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1f2ee:	2301      	movs	r3, #1
   1f2f0:	6053      	str	r3, [r2, #4]
   1f2f2:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1f2f4:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1f2f8:	2100      	movs	r1, #0
   1f2fa:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   1f2fe:	6113      	str	r3, [r2, #16]
}
   1f300:	4770      	bx	lr
   1f302:	bf00      	nop
   1f304:	4001f000 	.word	0x4001f000

0001f308 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1f308:	4b04      	ldr	r3, [pc, #16]	; (1f31c <radio_status_reset+0x14>)
   1f30a:	2200      	movs	r2, #0
   1f30c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1f310:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1f314:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1f318:	4770      	bx	lr
   1f31a:	bf00      	nop
   1f31c:	40001000 	.word	0x40001000

0001f320 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1f320:	4b03      	ldr	r3, [pc, #12]	; (1f330 <radio_is_ready+0x10>)
   1f322:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1f326:	3000      	adds	r0, #0
   1f328:	bf18      	it	ne
   1f32a:	2001      	movne	r0, #1
   1f32c:	4770      	bx	lr
   1f32e:	bf00      	nop
   1f330:	40001000 	.word	0x40001000

0001f334 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1f334:	4b03      	ldr	r3, [pc, #12]	; (1f344 <radio_is_done+0x10>)
   1f336:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1f33a:	3000      	adds	r0, #0
   1f33c:	bf18      	it	ne
   1f33e:	2001      	movne	r0, #1
   1f340:	4770      	bx	lr
   1f342:	bf00      	nop
   1f344:	40001000 	.word	0x40001000

0001f348 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1f348:	4b03      	ldr	r3, [pc, #12]	; (1f358 <radio_is_idle+0x10>)
   1f34a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1f34e:	fab0 f080 	clz	r0, r0
   1f352:	0940      	lsrs	r0, r0, #5
   1f354:	4770      	bx	lr
   1f356:	bf00      	nop
   1f358:	40001000 	.word	0x40001000

0001f35c <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1f35c:	4b04      	ldr	r3, [pc, #16]	; (1f370 <radio_crc_configure+0x14>)
   1f35e:	f240 1203 	movw	r2, #259	; 0x103
   1f362:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1f366:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1f36a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1f36e:	4770      	bx	lr
   1f370:	40001000 	.word	0x40001000

0001f374 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1f374:	4b03      	ldr	r3, [pc, #12]	; (1f384 <radio_crc_is_valid+0x10>)
   1f376:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1f37a:	3000      	adds	r0, #0
   1f37c:	bf18      	it	ne
   1f37e:	2001      	movne	r0, #1
   1f380:	4770      	bx	lr
   1f382:	bf00      	nop
   1f384:	40001000 	.word	0x40001000

0001f388 <radio_pkt_empty_get>:
}
   1f388:	4800      	ldr	r0, [pc, #0]	; (1f38c <radio_pkt_empty_get+0x4>)
   1f38a:	4770      	bx	lr
   1f38c:	200051dc 	.word	0x200051dc

0001f390 <radio_pkt_scratch_get>:
}
   1f390:	4800      	ldr	r0, [pc, #0]	; (1f394 <radio_pkt_scratch_get+0x4>)
   1f392:	4770      	bx	lr
   1f394:	200051e0 	.word	0x200051e0

0001f398 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1f398:	4b04      	ldr	r3, [pc, #16]	; (1f3ac <radio_switch_complete_and_rx+0x14>)
   1f39a:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1f39c:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1f39e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1f3a2:	4602      	mov	r2, r0
   1f3a4:	4608      	mov	r0, r1
   1f3a6:	f7ff be59 	b.w	1f05c <sw_switch.isra.10>
   1f3aa:	bf00      	nop
   1f3ac:	40001000 	.word	0x40001000

0001f3b0 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1f3b0:	4b03      	ldr	r3, [pc, #12]	; (1f3c0 <radio_switch_complete_and_tx+0x10>)
   1f3b2:	2103      	movs	r1, #3
   1f3b4:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1f3b8:	4601      	mov	r1, r0
   1f3ba:	2001      	movs	r0, #1
   1f3bc:	f7ff be4e 	b.w	1f05c <sw_switch.isra.10>
   1f3c0:	40001000 	.word	0x40001000

0001f3c4 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1f3c4:	4b05      	ldr	r3, [pc, #20]	; (1f3dc <radio_switch_complete_and_disable+0x18>)
   1f3c6:	2203      	movs	r2, #3
   1f3c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
   1f3cc:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1f3d0:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1f3d4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1f3d8:	4770      	bx	lr
   1f3da:	bf00      	nop
   1f3dc:	40001000 	.word	0x40001000

0001f3e0 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1f3e0:	4a03      	ldr	r2, [pc, #12]	; (1f3f0 <radio_rssi_measure+0x10>)
   1f3e2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1f3e6:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1f3ea:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1f3ee:	4770      	bx	lr
   1f3f0:	40001000 	.word	0x40001000

0001f3f4 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1f3f4:	4b01      	ldr	r3, [pc, #4]	; (1f3fc <radio_rssi_get+0x8>)
   1f3f6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1f3fa:	4770      	bx	lr
   1f3fc:	40001000 	.word	0x40001000

0001f400 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1f400:	4b02      	ldr	r3, [pc, #8]	; (1f40c <radio_rssi_status_reset+0xc>)
   1f402:	2200      	movs	r2, #0
   1f404:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1f408:	4770      	bx	lr
   1f40a:	bf00      	nop
   1f40c:	40001000 	.word	0x40001000

0001f410 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1f410:	4b03      	ldr	r3, [pc, #12]	; (1f420 <radio_rssi_is_ready+0x10>)
   1f412:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1f416:	3000      	adds	r0, #0
   1f418:	bf18      	it	ne
   1f41a:	2001      	movne	r0, #1
   1f41c:	4770      	bx	lr
   1f41e:	bf00      	nop
   1f420:	40001000 	.word	0x40001000

0001f424 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1f424:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f426:	2400      	movs	r4, #0
   1f428:	2706      	movs	r7, #6
   1f42a:	00a3      	lsls	r3, r4, #2
   1f42c:	fb07 2504 	mla	r5, r7, r4, r2
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1f430:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1f438:	682e      	ldr	r6, [r5, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1f43a:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1f43e:	3401      	adds	r4, #1
   1f440:	88ad      	ldrh	r5, [r5, #4]
   1f442:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1f446:	2c08      	cmp	r4, #8
   1f448:	d1ef      	bne.n	1f42a <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1f44a:	4b03      	ldr	r3, [pc, #12]	; (1f458 <radio_filter_configure+0x34>)
   1f44c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1f450:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1f454:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f456:	bf00      	nop
   1f458:	40001000 	.word	0x40001000

0001f45c <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1f45c:	4a03      	ldr	r2, [pc, #12]	; (1f46c <radio_filter_disable+0x10>)
   1f45e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1f462:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1f466:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1f46a:	4770      	bx	lr
   1f46c:	40001000 	.word	0x40001000

0001f470 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1f470:	4b02      	ldr	r3, [pc, #8]	; (1f47c <radio_filter_status_reset+0xc>)
   1f472:	2200      	movs	r2, #0
   1f474:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1f478:	4770      	bx	lr
   1f47a:	bf00      	nop
   1f47c:	40001000 	.word	0x40001000

0001f480 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1f480:	4b03      	ldr	r3, [pc, #12]	; (1f490 <radio_filter_has_match+0x10>)
   1f482:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1f486:	3000      	adds	r0, #0
   1f488:	bf18      	it	ne
   1f48a:	2001      	movne	r0, #1
   1f48c:	4770      	bx	lr
   1f48e:	bf00      	nop
   1f490:	40001000 	.word	0x40001000

0001f494 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1f494:	4b01      	ldr	r3, [pc, #4]	; (1f49c <radio_filter_match_get+0x8>)
   1f496:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1f49a:	4770      	bx	lr
   1f49c:	40001000 	.word	0x40001000

0001f4a0 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   1f4a0:	4b05      	ldr	r3, [pc, #20]	; (1f4b8 <radio_tmr_status_reset+0x18>)
   1f4a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1f4a6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   1f4aa:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1f4ae:	4a03      	ldr	r2, [pc, #12]	; (1f4bc <radio_tmr_status_reset+0x1c>)
   1f4b0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1f4b4:	4770      	bx	lr
   1f4b6:	bf00      	nop
   1f4b8:	4000b000 	.word	0x4000b000
   1f4bc:	0e7000c0 	.word	0x0e7000c0

0001f4c0 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1f4c0:	4b03      	ldr	r3, [pc, #12]	; (1f4d0 <radio_tmr_tifs_set+0x10>)
   1f4c2:	4a04      	ldr	r2, [pc, #16]	; (1f4d4 <radio_tmr_tifs_set+0x14>)
   1f4c4:	781b      	ldrb	r3, [r3, #0]
   1f4c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1f4ca:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1f4ce:	4770      	bx	lr
   1f4d0:	2000589b 	.word	0x2000589b
   1f4d4:	40009000 	.word	0x40009000

0001f4d8 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1f4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1f4da:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1f4de:	4c2f      	ldr	r4, [pc, #188]	; (1f59c <radio_tmr_start+0xc4>)
   1f4e0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1f4e4:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   1f4e6:	bf88      	it	hi
   1f4e8:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f4ec:	4b2c      	ldr	r3, [pc, #176]	; (1f5a0 <radio_tmr_start+0xc8>)
	}
	remainder /= 1000000UL;
   1f4ee:	4c2d      	ldr	r4, [pc, #180]	; (1f5a4 <radio_tmr_start+0xcc>)
		remainder += 30517578UL;
   1f4f0:	bf84      	itt	hi
   1f4f2:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   1f4f6:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   1f4fa:	f04f 0501 	mov.w	r5, #1
	remainder /= 1000000UL;
   1f4fe:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1f502:	f04f 0600 	mov.w	r6, #0
	EVENT_TIMER->PRESCALER = 4;
   1f506:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1f50a:	f04f 0202 	mov.w	r2, #2
   1f50e:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   1f510:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   1f514:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1f518:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
   1f51c:	4a22      	ldr	r2, [pc, #136]	; (1f5a8 <radio_tmr_start+0xd0>)
    p_reg->CC[cc_channel] = cc_value;
   1f51e:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
   1f522:	bf88      	it	hi
   1f524:	f101 31ff 	addhi.w	r1, r1, #4294967295
   1f528:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1f52c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1f530:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f534:	491d      	ldr	r1, [pc, #116]	; (1f5ac <radio_tmr_start+0xd4>)
   1f536:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
   1f53a:	3b0c      	subs	r3, #12
   1f53c:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f540:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1f544:	2340      	movs	r3, #64	; 0x40
   1f546:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1f54a:	f7ff fd73 	bl	1f034 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1f54e:	4b18      	ldr	r3, [pc, #96]	; (1f5b0 <radio_tmr_start+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f550:	4a18      	ldr	r2, [pc, #96]	; (1f5b4 <radio_tmr_start+0xdc>)
   1f552:	6015      	str	r5, [r2, #0]
   1f554:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1f558:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1f55c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   1f560:	601d      	str	r5, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f562:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1f566:	3b74      	subs	r3, #116	; 0x74
   1f568:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
   1f56c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1f570:	3334      	adds	r3, #52	; 0x34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f572:	f8c1 2554 	str.w	r2, [r1, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f576:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f57a:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1f57e:	33c4      	adds	r3, #196	; 0xc4
   1f580:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f584:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1f588:	3bc0      	subs	r3, #192	; 0xc0
   1f58a:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f58e:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1f592:	33c8      	adds	r3, #200	; 0xc8
   1f594:	f8c1 3564 	str.w	r3, [r1, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1f598:	4620      	mov	r0, r4
   1f59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f59c:	7ff0bdbf 	.word	0x7ff0bdbf
   1f5a0:	4000800c 	.word	0x4000800c
   1f5a4:	000f4240 	.word	0x000f4240
   1f5a8:	4000b000 	.word	0x4000b000
   1f5ac:	4001f000 	.word	0x4001f000
   1f5b0:	40009000 	.word	0x40009000
   1f5b4:	4000900c 	.word	0x4000900c

0001f5b8 <radio_tmr_start_tick>:
   1f5b8:	4b0e      	ldr	r3, [pc, #56]	; (1f5f4 <radio_tmr_start_tick+0x3c>)
    p_reg->CC[cc_channel] = cc_value;
   1f5ba:	4a0f      	ldr	r2, [pc, #60]	; (1f5f8 <radio_tmr_start_tick+0x40>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1f5bc:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f5be:	2401      	movs	r4, #1
   1f5c0:	601c      	str	r4, [r3, #0]
   1f5c2:	609c      	str	r4, [r3, #8]
    p_reg->CC[ch] = cc_val;
   1f5c4:	4b0d      	ldr	r3, [pc, #52]	; (1f5fc <radio_tmr_start_tick+0x44>)
    p_reg->CC[cc_channel] = cc_value;
   1f5c6:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
   1f5ca:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1f5ce:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1f5d2:	f8c3 1344 	str.w	r1, [r3, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f5d6:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1f5da:	4909      	ldr	r1, [pc, #36]	; (1f600 <radio_tmr_start_tick+0x48>)
   1f5dc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f5e0:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1f5e4:	2240      	movs	r2, #64	; 0x40
   1f5e6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1f5ea:	f7ff fd23 	bl	1f034 <hal_radio_enable_on_tick_ppi_config_and_enable>
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1f5ee:	4620      	mov	r0, r4
   1f5f0:	bd10      	pop	{r4, pc}
   1f5f2:	bf00      	nop
   1f5f4:	40008004 	.word	0x40008004
   1f5f8:	40008000 	.word	0x40008000
   1f5fc:	4000b000 	.word	0x4000b000
   1f600:	4000b148 	.word	0x4000b148

0001f604 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1f604:	4b01      	ldr	r3, [pc, #4]	; (1f60c <radio_tmr_start_get+0x8>)
   1f606:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1f60a:	4770      	bx	lr
   1f60c:	4000b000 	.word	0x4000b000

0001f610 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f610:	4a04      	ldr	r2, [pc, #16]	; (1f624 <radio_tmr_stop+0x14>)
   1f612:	2301      	movs	r3, #1
   1f614:	6013      	str	r3, [r2, #0]
   1f616:	60d3      	str	r3, [r2, #12]
   1f618:	320c      	adds	r2, #12
   1f61a:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   1f61e:	6013      	str	r3, [r2, #0]
   1f620:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1f622:	4770      	bx	lr
   1f624:	40008004 	.word	0x40008004

0001f628 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1f628:	4b04      	ldr	r3, [pc, #16]	; (1f63c <radio_tmr_hcto_configure+0x14>)
   1f62a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
   1f62e:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1f632:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1f636:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1f63a:	4770      	bx	lr
   1f63c:	40008000 	.word	0x40008000

0001f640 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f640:	4b06      	ldr	r3, [pc, #24]	; (1f65c <radio_tmr_aa_capture+0x1c>)
   1f642:	4a07      	ldr	r2, [pc, #28]	; (1f660 <radio_tmr_aa_capture+0x20>)
   1f644:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f648:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1f64c:	3240      	adds	r2, #64	; 0x40
   1f64e:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1f652:	4a04      	ldr	r2, [pc, #16]	; (1f664 <radio_tmr_aa_capture+0x24>)
   1f654:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1f658:	4770      	bx	lr
   1f65a:	bf00      	nop
   1f65c:	4001f000 	.word	0x4001f000
   1f660:	40001100 	.word	0x40001100
   1f664:	04000080 	.word	0x04000080

0001f668 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1f668:	4b01      	ldr	r3, [pc, #4]	; (1f670 <radio_tmr_aa_get+0x8>)
   1f66a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1f66e:	4770      	bx	lr
   1f670:	40008000 	.word	0x40008000

0001f674 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1f674:	4b01      	ldr	r3, [pc, #4]	; (1f67c <radio_tmr_aa_save+0x8>)
   1f676:	6018      	str	r0, [r3, #0]
}
   1f678:	4770      	bx	lr
   1f67a:	bf00      	nop
   1f67c:	200052ec 	.word	0x200052ec

0001f680 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   1f680:	4b01      	ldr	r3, [pc, #4]	; (1f688 <radio_tmr_aa_restore+0x8>)
   1f682:	6818      	ldr	r0, [r3, #0]
   1f684:	4770      	bx	lr
   1f686:	bf00      	nop
   1f688:	200052ec 	.word	0x200052ec

0001f68c <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1f68c:	4b01      	ldr	r3, [pc, #4]	; (1f694 <radio_tmr_ready_get+0x8>)
   1f68e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1f692:	4770      	bx	lr
   1f694:	40008000 	.word	0x40008000

0001f698 <radio_tmr_end_capture>:
   1f698:	4b02      	ldr	r3, [pc, #8]	; (1f6a4 <radio_tmr_end_capture+0xc>)
   1f69a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1f69e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1f6a2:	4770      	bx	lr
   1f6a4:	4001f000 	.word	0x4001f000

0001f6a8 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1f6a8:	4b01      	ldr	r3, [pc, #4]	; (1f6b0 <radio_tmr_end_get+0x8>)
   1f6aa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1f6ae:	4770      	bx	lr
   1f6b0:	40008000 	.word	0x40008000

0001f6b4 <radio_tmr_tifs_base_get>:
   1f6b4:	4b01      	ldr	r3, [pc, #4]	; (1f6bc <radio_tmr_tifs_base_get+0x8>)
   1f6b6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1f6ba:	4770      	bx	lr
   1f6bc:	40008000 	.word	0x40008000

0001f6c0 <radio_ar_match_get>:
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1f6c0:	4b01      	ldr	r3, [pc, #4]	; (1f6c8 <radio_ar_match_get+0x8>)
   1f6c2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1f6c6:	4770      	bx	lr
   1f6c8:	4000f000 	.word	0x4000f000

0001f6cc <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1f6cc:	4a06      	ldr	r2, [pc, #24]	; (1f6e8 <radio_ar_status_reset+0x1c>)
   1f6ce:	2300      	movs	r3, #0
   1f6d0:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1f6d4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1f6d8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    p_reg->CHENCLR = mask;
   1f6dc:	4b03      	ldr	r3, [pc, #12]	; (1f6ec <radio_ar_status_reset+0x20>)
   1f6de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1f6e2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1f6e6:	4770      	bx	lr
   1f6e8:	40001000 	.word	0x40001000
   1f6ec:	4001f000 	.word	0x4001f000

0001f6f0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1f6f0:	4b08      	ldr	r3, [pc, #32]	; (1f714 <radio_ar_has_match+0x24>)
   1f6f2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1f6f6:	b160      	cbz	r0, 1f712 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1f6f8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1f6fc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1f700:	b138      	cbz	r0, 1f712 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1f702:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1f706:	b120      	cbz	r0, 1f712 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1f708:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1f70c:	fab0 f080 	clz	r0, r0
   1f710:	0940      	lsrs	r0, r0, #5
}
   1f712:	4770      	bx	lr
   1f714:	40001000 	.word	0x40001000

0001f718 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1f718:	2902      	cmp	r1, #2
{
   1f71a:	b510      	push	{r4, lr}
   1f71c:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1f71e:	d00a      	beq.n	1f736 <mayfly_enable_cb+0x1e>
   1f720:	221e      	movs	r2, #30
   1f722:	490a      	ldr	r1, [pc, #40]	; (1f74c <mayfly_enable_cb+0x34>)
   1f724:	480a      	ldr	r0, [pc, #40]	; (1f750 <mayfly_enable_cb+0x38>)
   1f726:	f008 f8d4 	bl	278d2 <printk>
   1f72a:	4040      	eors	r0, r0
   1f72c:	f380 8811 	msr	BASEPRI, r0
   1f730:	f04f 0003 	mov.w	r0, #3
   1f734:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1f736:	200b      	movs	r0, #11
	if (enable) {
   1f738:	b11c      	cbz	r4, 1f742 <mayfly_enable_cb+0x2a>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1f73a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1f73e:	f7e8 b9ad 	b.w	7a9c <arch_irq_enable>
}
   1f742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1f746:	f7e8 b9b9 	b.w	7abc <arch_irq_disable>
   1f74a:	bf00      	nop
   1f74c:	00036240 	.word	0x00036240
   1f750:	0003067f 	.word	0x0003067f

0001f754 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1f754:	2901      	cmp	r1, #1
{
   1f756:	b508      	push	{r3, lr}
	switch (callee_id) {
   1f758:	d014      	beq.n	1f784 <mayfly_is_enabled+0x30>
   1f75a:	b171      	cbz	r1, 1f77a <mayfly_is_enabled+0x26>
   1f75c:	2902      	cmp	r1, #2
   1f75e:	d011      	beq.n	1f784 <mayfly_is_enabled+0x30>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1f760:	2236      	movs	r2, #54	; 0x36
   1f762:	4909      	ldr	r1, [pc, #36]	; (1f788 <mayfly_is_enabled+0x34>)
   1f764:	4809      	ldr	r0, [pc, #36]	; (1f78c <mayfly_is_enabled+0x38>)
   1f766:	f008 f8b4 	bl	278d2 <printk>
   1f76a:	4040      	eors	r0, r0
   1f76c:	f380 8811 	msr	BASEPRI, r0
   1f770:	f04f 0003 	mov.w	r0, #3
   1f774:	df02      	svc	2
		break;
	}

	return 0;
}
   1f776:	2000      	movs	r0, #0
   1f778:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1f77a:	2018      	movs	r0, #24
}
   1f77c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1f780:	f7e8 b9b0 	b.w	7ae4 <arch_irq_is_enabled>
   1f784:	200b      	movs	r0, #11
   1f786:	e7f9      	b.n	1f77c <mayfly_is_enabled+0x28>
   1f788:	00036240 	.word	0x00036240
   1f78c:	0003067f 	.word	0x0003067f

0001f790 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1f790:	2901      	cmp	r1, #1
{
   1f792:	b508      	push	{r3, lr}
	switch (callee_id) {
   1f794:	d014      	beq.n	1f7c0 <mayfly_pend+0x30>
   1f796:	b169      	cbz	r1, 1f7b4 <mayfly_pend+0x24>
   1f798:	2902      	cmp	r1, #2
   1f79a:	d011      	beq.n	1f7c0 <mayfly_pend+0x30>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1f79c:	2267      	movs	r2, #103	; 0x67
   1f79e:	490a      	ldr	r1, [pc, #40]	; (1f7c8 <mayfly_pend+0x38>)
   1f7a0:	480a      	ldr	r0, [pc, #40]	; (1f7cc <mayfly_pend+0x3c>)
   1f7a2:	f008 f896 	bl	278d2 <printk>
   1f7a6:	4040      	eors	r0, r0
   1f7a8:	f380 8811 	msr	BASEPRI, r0
   1f7ac:	f04f 0003 	mov.w	r0, #3
   1f7b0:	df02      	svc	2
		break;
	}
}
   1f7b2:	e004      	b.n	1f7be <mayfly_pend+0x2e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f7b4:	4b06      	ldr	r3, [pc, #24]	; (1f7d0 <mayfly_pend+0x40>)
   1f7b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1f7ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f7be:	bd08      	pop	{r3, pc}
   1f7c0:	4b03      	ldr	r3, [pc, #12]	; (1f7d0 <mayfly_pend+0x40>)
   1f7c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1f7c6:	e7f8      	b.n	1f7ba <mayfly_pend+0x2a>
   1f7c8:	00036240 	.word	0x00036240
   1f7cc:	0003067f 	.word	0x0003067f
   1f7d0:	e000e100 	.word	0xe000e100

0001f7d4 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1f7d4:	2803      	cmp	r0, #3
{
   1f7d6:	b510      	push	{r4, lr}
   1f7d8:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1f7da:	d90a      	bls.n	1f7f2 <hal_ticker_instance0_caller_id_get+0x1e>
   1f7dc:	222b      	movs	r2, #43	; 0x2b
   1f7de:	490d      	ldr	r1, [pc, #52]	; (1f814 <hal_ticker_instance0_caller_id_get+0x40>)
   1f7e0:	480d      	ldr	r0, [pc, #52]	; (1f818 <hal_ticker_instance0_caller_id_get+0x44>)
   1f7e2:	f008 f876 	bl	278d2 <printk>
   1f7e6:	4040      	eors	r0, r0
   1f7e8:	f380 8811 	msr	BASEPRI, r0
   1f7ec:	f04f 0003 	mov.w	r0, #3
   1f7f0:	df02      	svc	2

	caller_id = caller_id_lut[user_id];
   1f7f2:	4b0a      	ldr	r3, [pc, #40]	; (1f81c <hal_ticker_instance0_caller_id_get+0x48>)
   1f7f4:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1f7f6:	b954      	cbnz	r4, 1f80e <hal_ticker_instance0_caller_id_get+0x3a>
   1f7f8:	222e      	movs	r2, #46	; 0x2e
   1f7fa:	4906      	ldr	r1, [pc, #24]	; (1f814 <hal_ticker_instance0_caller_id_get+0x40>)
   1f7fc:	4806      	ldr	r0, [pc, #24]	; (1f818 <hal_ticker_instance0_caller_id_get+0x44>)
   1f7fe:	f008 f868 	bl	278d2 <printk>
   1f802:	4040      	eors	r0, r0
   1f804:	f380 8811 	msr	BASEPRI, r0
   1f808:	f04f 0003 	mov.w	r0, #3
   1f80c:	df02      	svc	2

	return caller_id;
}
   1f80e:	4620      	mov	r0, r4
   1f810:	bd10      	pop	{r4, pc}
   1f812:	bf00      	nop
   1f814:	000362a5 	.word	0x000362a5
   1f818:	0003067f 	.word	0x0003067f
   1f81c:	000362a1 	.word	0x000362a1

0001f820 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1f820:	3801      	subs	r0, #1
{
   1f822:	b510      	push	{r4, lr}
   1f824:	461c      	mov	r4, r3
	switch (caller_id) {
   1f826:	2804      	cmp	r0, #4
   1f828:	d844      	bhi.n	1f8b4 <hal_ticker_instance0_sched+0x94>
   1f82a:	e8df f000 	tbb	[pc, r0]
   1f82e:	1903      	.short	0x1903
   1f830:	2b22      	.short	0x2b22
   1f832:	3a          	.byte	0x3a
   1f833:	00          	.byte	0x00
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   1f834:	2904      	cmp	r1, #4
   1f836:	d107      	bne.n	1f848 <hal_ticker_instance0_sched+0x28>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
   1f838:	4b1f      	ldr	r3, [pc, #124]	; (1f8b8 <hal_ticker_instance0_sched+0x98>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1f83a:	2102      	movs	r1, #2
			m.param = instance;
   1f83c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1f83e:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1f840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1f844:	f7f9 bad4 	b.w	18df0 <mayfly_enqueue>
			LL_ASSERT(0);
   1f848:	224e      	movs	r2, #78	; 0x4e
		LL_ASSERT(0);
   1f84a:	491c      	ldr	r1, [pc, #112]	; (1f8bc <hal_ticker_instance0_sched+0x9c>)
   1f84c:	481c      	ldr	r0, [pc, #112]	; (1f8c0 <hal_ticker_instance0_sched+0xa0>)
   1f84e:	f008 f840 	bl	278d2 <printk>
   1f852:	4040      	eors	r0, r0
   1f854:	f380 8811 	msr	BASEPRI, r0
   1f858:	f04f 0003 	mov.w	r0, #3
   1f85c:	df02      	svc	2
}
   1f85e:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1f860:	2903      	cmp	r1, #3
   1f862:	d104      	bne.n	1f86e <hal_ticker_instance0_sched+0x4e>
			m.param = instance;
   1f864:	4b17      	ldr	r3, [pc, #92]	; (1f8c4 <hal_ticker_instance0_sched+0xa4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1f866:	2101      	movs	r1, #1
			m.param = instance;
   1f868:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1f86a:	4608      	mov	r0, r1
   1f86c:	e7e8      	b.n	1f840 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1f86e:	2265      	movs	r2, #101	; 0x65
   1f870:	e7eb      	b.n	1f84a <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1f872:	2904      	cmp	r1, #4
   1f874:	d104      	bne.n	1f880 <hal_ticker_instance0_sched+0x60>
			m.param = instance;
   1f876:	4b14      	ldr	r3, [pc, #80]	; (1f8c8 <hal_ticker_instance0_sched+0xa8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1f878:	2102      	movs	r1, #2
			m.param = instance;
   1f87a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1f87c:	2001      	movs	r0, #1
   1f87e:	e7df      	b.n	1f840 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1f880:	227c      	movs	r2, #124	; 0x7c
   1f882:	e7e2      	b.n	1f84a <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1f884:	2903      	cmp	r1, #3
   1f886:	d003      	beq.n	1f890 <hal_ticker_instance0_sched+0x70>
   1f888:	2904      	cmp	r1, #4
   1f88a:	d006      	beq.n	1f89a <hal_ticker_instance0_sched+0x7a>
			LL_ASSERT(0);
   1f88c:	22a2      	movs	r2, #162	; 0xa2
   1f88e:	e7dc      	b.n	1f84a <hal_ticker_instance0_sched+0x2a>
			m.param = instance;
   1f890:	4b0e      	ldr	r3, [pc, #56]	; (1f8cc <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1f892:	2101      	movs	r1, #1
			m.param = instance;
   1f894:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1f896:	2002      	movs	r0, #2
   1f898:	e7d2      	b.n	1f840 <hal_ticker_instance0_sched+0x20>
			m.param = instance;
   1f89a:	4b0d      	ldr	r3, [pc, #52]	; (1f8d0 <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1f89c:	2102      	movs	r1, #2
			m.param = instance;
   1f89e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1f8a0:	e7e3      	b.n	1f86a <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
   1f8a2:	2904      	cmp	r1, #4
   1f8a4:	d104      	bne.n	1f8b0 <hal_ticker_instance0_sched+0x90>
			m.param = instance;
   1f8a6:	4b0b      	ldr	r3, [pc, #44]	; (1f8d4 <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1f8a8:	2102      	movs	r1, #2
			m.param = instance;
   1f8aa:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1f8ac:	2003      	movs	r0, #3
   1f8ae:	e7c7      	b.n	1f840 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1f8b0:	22ba      	movs	r2, #186	; 0xba
   1f8b2:	e7ca      	b.n	1f84a <hal_ticker_instance0_sched+0x2a>
		LL_ASSERT(0);
   1f8b4:	22c0      	movs	r2, #192	; 0xc0
   1f8b6:	e7c8      	b.n	1f84a <hal_ticker_instance0_sched+0x2a>
   1f8b8:	200018d8 	.word	0x200018d8
   1f8bc:	000362a5 	.word	0x000362a5
   1f8c0:	0003067f 	.word	0x0003067f
   1f8c4:	200018e8 	.word	0x200018e8
   1f8c8:	200018f8 	.word	0x200018f8
   1f8cc:	20001908 	.word	0x20001908
   1f8d0:	20001918 	.word	0x20001918
   1f8d4:	20001928 	.word	0x20001928

0001f8d8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1f8d8:	4b02      	ldr	r3, [pc, #8]	; (1f8e4 <net_buf_pool_get+0xc>)
   1f8da:	222c      	movs	r2, #44	; 0x2c
   1f8dc:	fb02 3000 	mla	r0, r2, r0, r3
   1f8e0:	4770      	bx	lr
   1f8e2:	bf00      	nop
   1f8e4:	20001f44 	.word	0x20001f44

0001f8e8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f8e8:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1f8ea:	4a05      	ldr	r2, [pc, #20]	; (1f900 <net_buf_id+0x18>)
   1f8ec:	212c      	movs	r1, #44	; 0x2c
   1f8ee:	fb01 2303 	mla	r3, r1, r3, r2
   1f8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f8f4:	1ac0      	subs	r0, r0, r3
}
   1f8f6:	4b03      	ldr	r3, [pc, #12]	; (1f904 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1f8f8:	10c0      	asrs	r0, r0, #3
}
   1f8fa:	4358      	muls	r0, r3
   1f8fc:	4770      	bx	lr
   1f8fe:	bf00      	nop
   1f900:	20001f44 	.word	0x20001f44
   1f904:	aaaaaaab 	.word	0xaaaaaaab

0001f908 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1f908:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f90a:	4a0a      	ldr	r2, [pc, #40]	; (1f934 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f90c:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f90e:	242c      	movs	r4, #44	; 0x2c
   1f910:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1f914:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f918:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1f91a:	6823      	ldr	r3, [r4, #0]
   1f91c:	429a      	cmp	r2, r3
   1f91e:	bf94      	ite	ls
   1f920:	600a      	strls	r2, [r1, #0]
   1f922:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1f924:	f7ff ffe0 	bl	1f8e8 <net_buf_id>
   1f928:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1f92c:	fb02 3000 	mla	r0, r2, r0, r3
   1f930:	bd10      	pop	{r4, pc}
   1f932:	bf00      	nop
   1f934:	20001f44 	.word	0x20001f44

0001f938 <net_buf_reset>:
{
   1f938:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1f93a:	7943      	ldrb	r3, [r0, #5]
{
   1f93c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1f93e:	b143      	cbz	r3, 1f952 <net_buf_reset+0x1a>
   1f940:	490c      	ldr	r1, [pc, #48]	; (1f974 <net_buf_reset+0x3c>)
   1f942:	480d      	ldr	r0, [pc, #52]	; (1f978 <net_buf_reset+0x40>)
   1f944:	224f      	movs	r2, #79	; 0x4f
   1f946:	f007 ffc4 	bl	278d2 <printk>
   1f94a:	214f      	movs	r1, #79	; 0x4f
   1f94c:	4809      	ldr	r0, [pc, #36]	; (1f974 <net_buf_reset+0x3c>)
   1f94e:	f008 fa39 	bl	27dc4 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1f952:	6823      	ldr	r3, [r4, #0]
   1f954:	b143      	cbz	r3, 1f968 <net_buf_reset+0x30>
   1f956:	4907      	ldr	r1, [pc, #28]	; (1f974 <net_buf_reset+0x3c>)
   1f958:	4807      	ldr	r0, [pc, #28]	; (1f978 <net_buf_reset+0x40>)
   1f95a:	2250      	movs	r2, #80	; 0x50
   1f95c:	f007 ffb9 	bl	278d2 <printk>
   1f960:	2150      	movs	r1, #80	; 0x50
   1f962:	4804      	ldr	r0, [pc, #16]	; (1f974 <net_buf_reset+0x3c>)
   1f964:	f008 fa2e 	bl	27dc4 <assert_post_action>
	buf->len  = 0U;
   1f968:	2300      	movs	r3, #0
   1f96a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1f96c:	6923      	ldr	r3, [r4, #16]
   1f96e:	60a3      	str	r3, [r4, #8]
}
   1f970:	bd10      	pop	{r4, pc}
   1f972:	bf00      	nop
   1f974:	00036306 	.word	0x00036306
   1f978:	0003067f 	.word	0x0003067f

0001f97c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1f97c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f980:	4605      	mov	r5, r0
   1f982:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1f984:	4610      	mov	r0, r2
   1f986:	4619      	mov	r1, r3
{
   1f988:	4616      	mov	r6, r2
   1f98a:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1f98c:	f00e fbef 	bl	2e16e <z_timeout_end_calc>
   1f990:	4680      	mov	r8, r0
   1f992:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1f994:	b945      	cbnz	r5, 1f9a8 <net_buf_alloc_len+0x2c>
   1f996:	4949      	ldr	r1, [pc, #292]	; (1fabc <net_buf_alloc_len+0x140>)
   1f998:	4849      	ldr	r0, [pc, #292]	; (1fac0 <net_buf_alloc_len+0x144>)
   1f99a:	22ed      	movs	r2, #237	; 0xed
   1f99c:	f007 ff99 	bl	278d2 <printk>
   1f9a0:	21ed      	movs	r1, #237	; 0xed
   1f9a2:	4846      	ldr	r0, [pc, #280]	; (1fabc <net_buf_alloc_len+0x140>)
   1f9a4:	f008 fa0e 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   1f9a8:	f04f 0320 	mov.w	r3, #32
   1f9ac:	f3ef 8a11 	mrs	sl, BASEPRI
   1f9b0:	f383 8811 	msr	BASEPRI, r3
   1f9b4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1f9b8:	8beb      	ldrh	r3, [r5, #30]
   1f9ba:	2b00      	cmp	r3, #0
   1f9bc:	d054      	beq.n	1fa68 <net_buf_alloc_len+0xec>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1f9be:	8baa      	ldrh	r2, [r5, #28]
   1f9c0:	429a      	cmp	r2, r3
   1f9c2:	d93d      	bls.n	1fa40 <net_buf_alloc_len+0xc4>
	return z_impl_k_queue_get(queue, timeout);
   1f9c4:	2200      	movs	r2, #0
   1f9c6:	2300      	movs	r3, #0
   1f9c8:	4628      	mov	r0, r5
   1f9ca:	f004 fa69 	bl	23ea0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1f9ce:	4604      	mov	r4, r0
   1f9d0:	2800      	cmp	r0, #0
   1f9d2:	d035      	beq.n	1fa40 <net_buf_alloc_len+0xc4>
	__asm__ volatile(
   1f9d4:	f38a 8811 	msr	BASEPRI, sl
   1f9d8:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1f9dc:	9d01      	ldr	r5, [sp, #4]
   1f9de:	2d00      	cmp	r5, #0
   1f9e0:	d06a      	beq.n	1fab8 <net_buf_alloc_len+0x13c>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1f9e2:	ea56 0307 	orrs.w	r3, r6, r7
   1f9e6:	d010      	beq.n	1fa0a <net_buf_alloc_len+0x8e>
   1f9e8:	1c7b      	adds	r3, r7, #1
   1f9ea:	bf08      	it	eq
   1f9ec:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1f9f0:	d00b      	beq.n	1fa0a <net_buf_alloc_len+0x8e>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1f9f2:	f006 f8f7 	bl	25be4 <z_tick_get>
   1f9f6:	ebb8 0600 	subs.w	r6, r8, r0
   1f9fa:	eb69 0701 	sbc.w	r7, r9, r1
   1f9fe:	2e00      	cmp	r6, #0
   1fa00:	f177 0300 	sbcs.w	r3, r7, #0
   1fa04:	bfbc      	itt	lt
   1fa06:	2600      	movlt	r6, #0
   1fa08:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fa0a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1fa0c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1fac4 <net_buf_alloc_len+0x148>
   1fa10:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1fa14:	fb09 8303 	mla	r3, r9, r3, r8
   1fa18:	4632      	mov	r2, r6
   1fa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fa1c:	681b      	ldr	r3, [r3, #0]
   1fa1e:	a901      	add	r1, sp, #4
   1fa20:	f8d3 a000 	ldr.w	sl, [r3]
   1fa24:	4620      	mov	r0, r4
   1fa26:	463b      	mov	r3, r7
   1fa28:	47d0      	blx	sl
   1fa2a:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1fa2c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1fa2e:	bb58      	cbnz	r0, 1fa88 <net_buf_alloc_len+0x10c>
	k_lifo_put(&pool->free, buf);
   1fa30:	79a0      	ldrb	r0, [r4, #6]
   1fa32:	4621      	mov	r1, r4
   1fa34:	fb00 8009 	mla	r0, r0, r9, r8
   1fa38:	f00e fab5 	bl	2dfa6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1fa3c:	4634      	mov	r4, r6
   1fa3e:	e01f      	b.n	1fa80 <net_buf_alloc_len+0x104>
		uninit_count = pool->uninit_count--;
   1fa40:	8beb      	ldrh	r3, [r5, #30]
   1fa42:	1e5a      	subs	r2, r3, #1
   1fa44:	83ea      	strh	r2, [r5, #30]
   1fa46:	f38a 8811 	msr	BASEPRI, sl
   1fa4a:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1fa4e:	8bac      	ldrh	r4, [r5, #28]
   1fa50:	1ae4      	subs	r4, r4, r3
   1fa52:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1fa54:	2218      	movs	r2, #24
   1fa56:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   1fa5a:	4b1a      	ldr	r3, [pc, #104]	; (1fac4 <net_buf_alloc_len+0x148>)
   1fa5c:	1aed      	subs	r5, r5, r3
   1fa5e:	4b1a      	ldr	r3, [pc, #104]	; (1fac8 <net_buf_alloc_len+0x14c>)
   1fa60:	10ad      	asrs	r5, r5, #2
   1fa62:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1fa64:	71a5      	strb	r5, [r4, #6]
		goto success;
   1fa66:	e7b9      	b.n	1f9dc <net_buf_alloc_len+0x60>
   1fa68:	f38a 8811 	msr	BASEPRI, sl
   1fa6c:	f3bf 8f6f 	isb	sy
   1fa70:	4632      	mov	r2, r6
   1fa72:	463b      	mov	r3, r7
   1fa74:	4628      	mov	r0, r5
   1fa76:	f004 fa13 	bl	23ea0 <z_impl_k_queue_get>
	if (!buf) {
   1fa7a:	4604      	mov	r4, r0
   1fa7c:	2800      	cmp	r0, #0
   1fa7e:	d1ad      	bne.n	1f9dc <net_buf_alloc_len+0x60>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1fa80:	4620      	mov	r0, r4
   1fa82:	b002      	add	sp, #8
   1fa84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   1fa88:	9b01      	ldr	r3, [sp, #4]
   1fa8a:	429d      	cmp	r5, r3
   1fa8c:	d90a      	bls.n	1faa4 <net_buf_alloc_len+0x128>
   1fa8e:	490b      	ldr	r1, [pc, #44]	; (1fabc <net_buf_alloc_len+0x140>)
   1fa90:	480b      	ldr	r0, [pc, #44]	; (1fac0 <net_buf_alloc_len+0x144>)
   1fa92:	f240 124d 	movw	r2, #333	; 0x14d
   1fa96:	f007 ff1c 	bl	278d2 <printk>
   1fa9a:	f240 114d 	movw	r1, #333	; 0x14d
   1fa9e:	4807      	ldr	r0, [pc, #28]	; (1fabc <net_buf_alloc_len+0x140>)
   1faa0:	f008 f990 	bl	27dc4 <assert_post_action>
	buf->frags = NULL;
   1faa4:	2300      	movs	r3, #0
   1faa6:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1faa8:	2301      	movs	r3, #1
   1faaa:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1faac:	9b01      	ldr	r3, [sp, #4]
   1faae:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1fab0:	4620      	mov	r0, r4
   1fab2:	f7ff ff41 	bl	1f938 <net_buf_reset>
	return buf;
   1fab6:	e7e3      	b.n	1fa80 <net_buf_alloc_len+0x104>
		buf->__buf = NULL;
   1fab8:	6125      	str	r5, [r4, #16]
   1faba:	e7f3      	b.n	1faa4 <net_buf_alloc_len+0x128>
   1fabc:	00036306 	.word	0x00036306
   1fac0:	0003067f 	.word	0x0003067f
   1fac4:	20001f44 	.word	0x20001f44
   1fac8:	ba2e8ba3 	.word	0xba2e8ba3

0001facc <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1facc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fad0:	4607      	mov	r7, r0
   1fad2:	f004 f9e5 	bl	23ea0 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1fad6:	4605      	mov	r5, r0
   1fad8:	b140      	cbz	r0, 1faec <net_buf_get+0x20>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1fada:	4e12      	ldr	r6, [pc, #72]	; (1fb24 <net_buf_get+0x58>)
   1fadc:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1fb28 <net_buf_get+0x5c>
   1fae0:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fae2:	7963      	ldrb	r3, [r4, #5]
   1fae4:	f013 0301 	ands.w	r3, r3, #1
   1fae8:	d103      	bne.n	1faf2 <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1faea:	6023      	str	r3, [r4, #0]

	return buf;
}
   1faec:	4628      	mov	r0, r5
   1faee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1faf2:	2200      	movs	r2, #0
   1faf4:	2300      	movs	r3, #0
   1faf6:	4638      	mov	r0, r7
   1faf8:	f004 f9d2 	bl	23ea0 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1fafc:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1fafe:	b950      	cbnz	r0, 1fb16 <net_buf_get+0x4a>
   1fb00:	4631      	mov	r1, r6
   1fb02:	4640      	mov	r0, r8
   1fb04:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   1fb08:	f007 fee3 	bl	278d2 <printk>
   1fb0c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   1fb10:	4630      	mov	r0, r6
   1fb12:	f008 f957 	bl	27dc4 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1fb16:	7963      	ldrb	r3, [r4, #5]
   1fb18:	f023 0301 	bic.w	r3, r3, #1
   1fb1c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fb1e:	6824      	ldr	r4, [r4, #0]
   1fb20:	e7df      	b.n	1fae2 <net_buf_get+0x16>
   1fb22:	bf00      	nop
   1fb24:	00036306 	.word	0x00036306
   1fb28:	0003067f 	.word	0x0003067f

0001fb2c <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1fb2c:	b538      	push	{r3, r4, r5, lr}
   1fb2e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1fb30:	4604      	mov	r4, r0
   1fb32:	b950      	cbnz	r0, 1fb4a <net_buf_simple_reserve+0x1e>
   1fb34:	490d      	ldr	r1, [pc, #52]	; (1fb6c <net_buf_simple_reserve+0x40>)
   1fb36:	480e      	ldr	r0, [pc, #56]	; (1fb70 <net_buf_simple_reserve+0x44>)
   1fb38:	f240 12bb 	movw	r2, #443	; 0x1bb
   1fb3c:	f007 fec9 	bl	278d2 <printk>
   1fb40:	f240 11bb 	movw	r1, #443	; 0x1bb
   1fb44:	4809      	ldr	r0, [pc, #36]	; (1fb6c <net_buf_simple_reserve+0x40>)
   1fb46:	f008 f93d 	bl	27dc4 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1fb4a:	88a3      	ldrh	r3, [r4, #4]
   1fb4c:	b153      	cbz	r3, 1fb64 <net_buf_simple_reserve+0x38>
   1fb4e:	4907      	ldr	r1, [pc, #28]	; (1fb6c <net_buf_simple_reserve+0x40>)
   1fb50:	4807      	ldr	r0, [pc, #28]	; (1fb70 <net_buf_simple_reserve+0x44>)
   1fb52:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   1fb56:	f007 febc 	bl	278d2 <printk>
   1fb5a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1fb5e:	4803      	ldr	r0, [pc, #12]	; (1fb6c <net_buf_simple_reserve+0x40>)
   1fb60:	f008 f930 	bl	27dc4 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1fb64:	68a1      	ldr	r1, [r4, #8]
   1fb66:	4429      	add	r1, r5
   1fb68:	6021      	str	r1, [r4, #0]
}
   1fb6a:	bd38      	pop	{r3, r4, r5, pc}
   1fb6c:	00036306 	.word	0x00036306
   1fb70:	0003067f 	.word	0x0003067f

0001fb74 <net_buf_slist_put>:

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1fb74:	b538      	push	{r3, r4, r5, lr}
   1fb76:	460d      	mov	r5, r1
	struct net_buf *tail;
	unsigned int key;

	__ASSERT_NO_MSG(list);
   1fb78:	4604      	mov	r4, r0
   1fb7a:	b950      	cbnz	r0, 1fb92 <net_buf_slist_put+0x1e>
   1fb7c:	4919      	ldr	r1, [pc, #100]	; (1fbe4 <net_buf_slist_put+0x70>)
   1fb7e:	481a      	ldr	r0, [pc, #104]	; (1fbe8 <net_buf_slist_put+0x74>)
   1fb80:	f240 12c7 	movw	r2, #455	; 0x1c7
   1fb84:	f007 fea5 	bl	278d2 <printk>
   1fb88:	f240 11c7 	movw	r1, #455	; 0x1c7
   1fb8c:	4815      	ldr	r0, [pc, #84]	; (1fbe4 <net_buf_slist_put+0x70>)
   1fb8e:	f008 f919 	bl	27dc4 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1fb92:	b955      	cbnz	r5, 1fbaa <net_buf_slist_put+0x36>
   1fb94:	4913      	ldr	r1, [pc, #76]	; (1fbe4 <net_buf_slist_put+0x70>)
   1fb96:	4814      	ldr	r0, [pc, #80]	; (1fbe8 <net_buf_slist_put+0x74>)
   1fb98:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   1fb9c:	f007 fe99 	bl	278d2 <printk>
   1fba0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1fba4:	480f      	ldr	r0, [pc, #60]	; (1fbe4 <net_buf_slist_put+0x70>)
   1fba6:	f008 f90d 	bl	27dc4 <assert_post_action>
{
   1fbaa:	462b      	mov	r3, r5

	for (tail = buf; tail->frags; tail = tail->frags) {
   1fbac:	6819      	ldr	r1, [r3, #0]
   1fbae:	b981      	cbnz	r1, 1fbd2 <net_buf_slist_put+0x5e>
	__asm__ volatile(
   1fbb0:	f04f 0220 	mov.w	r2, #32
   1fbb4:	f3ef 8111 	mrs	r1, BASEPRI
   1fbb8:	f382 8811 	msr	BASEPRI, r2
   1fbbc:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   1fbc0:	6862      	ldr	r2, [r4, #4]
   1fbc2:	b962      	cbnz	r2, 1fbde <net_buf_slist_put+0x6a>
	list->head = node;
   1fbc4:	6025      	str	r5, [r4, #0]
	list->tail = node;
   1fbc6:	6063      	str	r3, [r4, #4]
	__asm__ volatile(
   1fbc8:	f381 8811 	msr	BASEPRI, r1
   1fbcc:	f3bf 8f6f 	isb	sy
	}

	key = irq_lock();
	sys_slist_append_list(list, &buf->node, &tail->node);
	irq_unlock(key);
}
   1fbd0:	bd38      	pop	{r3, r4, r5, pc}
		tail->flags |= NET_BUF_FRAGS;
   1fbd2:	795a      	ldrb	r2, [r3, #5]
   1fbd4:	f042 0201 	orr.w	r2, r2, #1
   1fbd8:	715a      	strb	r2, [r3, #5]
   1fbda:	460b      	mov	r3, r1
   1fbdc:	e7e6      	b.n	1fbac <net_buf_slist_put+0x38>
	parent->next = child;
   1fbde:	6015      	str	r5, [r2, #0]
   1fbe0:	e7f1      	b.n	1fbc6 <net_buf_slist_put+0x52>
   1fbe2:	bf00      	nop
   1fbe4:	00036306 	.word	0x00036306
   1fbe8:	0003067f 	.word	0x0003067f

0001fbec <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1fbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_buf *buf, *frag;
	unsigned int key;

	__ASSERT_NO_MSG(list);
   1fbf0:	4604      	mov	r4, r0
   1fbf2:	b950      	cbnz	r0, 1fc0a <net_buf_slist_get+0x1e>
   1fbf4:	4929      	ldr	r1, [pc, #164]	; (1fc9c <net_buf_slist_get+0xb0>)
   1fbf6:	482a      	ldr	r0, [pc, #168]	; (1fca0 <net_buf_slist_get+0xb4>)
   1fbf8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
   1fbfc:	f007 fe69 	bl	278d2 <printk>
   1fc00:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
   1fc04:	4825      	ldr	r0, [pc, #148]	; (1fc9c <net_buf_slist_get+0xb0>)
   1fc06:	f008 f8dd 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   1fc0a:	f04f 0320 	mov.w	r3, #32
   1fc0e:	f3ef 8211 	mrs	r2, BASEPRI
   1fc12:	f383 8811 	msr	BASEPRI, r3
   1fc16:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1fc1a:	6826      	ldr	r6, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1fc1c:	b12e      	cbz	r6, 1fc2a <net_buf_slist_get+0x3e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fc1e:	6861      	ldr	r1, [r4, #4]
   1fc20:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   1fc22:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fc24:	428e      	cmp	r6, r1
	list->tail = node;
   1fc26:	bf08      	it	eq
   1fc28:	6063      	streq	r3, [r4, #4]
	__asm__ volatile(
   1fc2a:	f382 8811 	msr	BASEPRI, r2
   1fc2e:	f3bf 8f6f 	isb	sy

	key = irq_lock();
	buf = (void *)sys_slist_get(list);
	irq_unlock(key);

	if (!buf) {
   1fc32:	b146      	cbz	r6, 1fc46 <net_buf_slist_get+0x5a>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		key = irq_lock();
		frag->frags = (void *)sys_slist_get(list);
		irq_unlock(key);

		__ASSERT_NO_MSG(frag->frags);
   1fc34:	4f19      	ldr	r7, [pc, #100]	; (1fc9c <net_buf_slist_get+0xb0>)
   1fc36:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1fca0 <net_buf_slist_get+0xb4>
   1fc3a:	4635      	mov	r5, r6
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fc3c:	796b      	ldrb	r3, [r5, #5]
   1fc3e:	f013 0301 	ands.w	r3, r3, #1
   1fc42:	d103      	bne.n	1fc4c <net_buf_slist_get+0x60>
		/* The fragments flag is only for list-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1fc44:	602b      	str	r3, [r5, #0]

	return buf;
}
   1fc46:	4630      	mov	r0, r6
   1fc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1fc4c:	f04f 0320 	mov.w	r3, #32
   1fc50:	f3ef 8011 	mrs	r0, BASEPRI
   1fc54:	f383 8811 	msr	BASEPRI, r3
   1fc58:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1fc5c:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1fc5e:	b12b      	cbz	r3, 1fc6c <net_buf_slist_get+0x80>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fc60:	6861      	ldr	r1, [r4, #4]
   1fc62:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1fc64:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fc66:	428b      	cmp	r3, r1
	list->tail = node;
   1fc68:	bf08      	it	eq
   1fc6a:	6062      	streq	r2, [r4, #4]
		frag->frags = (void *)sys_slist_get(list);
   1fc6c:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1fc6e:	f380 8811 	msr	BASEPRI, r0
   1fc72:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(frag->frags);
   1fc76:	682b      	ldr	r3, [r5, #0]
   1fc78:	b953      	cbnz	r3, 1fc90 <net_buf_slist_get+0xa4>
   1fc7a:	4639      	mov	r1, r7
   1fc7c:	4640      	mov	r0, r8
   1fc7e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
   1fc82:	f007 fe26 	bl	278d2 <printk>
   1fc86:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   1fc8a:	4638      	mov	r0, r7
   1fc8c:	f008 f89a 	bl	27dc4 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1fc90:	796b      	ldrb	r3, [r5, #5]
   1fc92:	f023 0301 	bic.w	r3, r3, #1
   1fc96:	716b      	strb	r3, [r5, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fc98:	682d      	ldr	r5, [r5, #0]
   1fc9a:	e7cf      	b.n	1fc3c <net_buf_slist_get+0x50>
   1fc9c:	00036306 	.word	0x00036306
   1fca0:	0003067f 	.word	0x0003067f

0001fca4 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1fca4:	b538      	push	{r3, r4, r5, lr}
   1fca6:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1fca8:	4605      	mov	r5, r0
   1fcaa:	b950      	cbnz	r0, 1fcc2 <net_buf_put+0x1e>
   1fcac:	4912      	ldr	r1, [pc, #72]	; (1fcf8 <net_buf_put+0x54>)
   1fcae:	4813      	ldr	r0, [pc, #76]	; (1fcfc <net_buf_put+0x58>)
   1fcb0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1fcb4:	f007 fe0d 	bl	278d2 <printk>
   1fcb8:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   1fcbc:	480e      	ldr	r0, [pc, #56]	; (1fcf8 <net_buf_put+0x54>)
   1fcbe:	f008 f881 	bl	27dc4 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1fcc2:	b954      	cbnz	r4, 1fcda <net_buf_put+0x36>
   1fcc4:	490c      	ldr	r1, [pc, #48]	; (1fcf8 <net_buf_put+0x54>)
   1fcc6:	480d      	ldr	r0, [pc, #52]	; (1fcfc <net_buf_put+0x58>)
   1fcc8:	f240 12f9 	movw	r2, #505	; 0x1f9
   1fccc:	f007 fe01 	bl	278d2 <printk>
   1fcd0:	f240 11f9 	movw	r1, #505	; 0x1f9
   1fcd4:	4808      	ldr	r0, [pc, #32]	; (1fcf8 <net_buf_put+0x54>)
   1fcd6:	f008 f875 	bl	27dc4 <assert_post_action>
{
   1fcda:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1fcdc:	6811      	ldr	r1, [r2, #0]
   1fcde:	b929      	cbnz	r1, 1fcec <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1fce0:	4621      	mov	r1, r4
   1fce2:	4628      	mov	r0, r5
}
   1fce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1fce8:	f004 b886 	b.w	23df8 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1fcec:	7953      	ldrb	r3, [r2, #5]
   1fcee:	f043 0301 	orr.w	r3, r3, #1
   1fcf2:	7153      	strb	r3, [r2, #5]
   1fcf4:	460a      	mov	r2, r1
   1fcf6:	e7f1      	b.n	1fcdc <net_buf_put+0x38>
   1fcf8:	00036306 	.word	0x00036306
   1fcfc:	0003067f 	.word	0x0003067f

0001fd00 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1fd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1fd04:	4604      	mov	r4, r0
   1fd06:	b328      	cbz	r0, 1fd54 <net_buf_unref+0x54>
   1fd08:	4d1c      	ldr	r5, [pc, #112]	; (1fd7c <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1fd0a:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1fd0c:	272c      	movs	r7, #44	; 0x2c
		if (--buf->ref > 0) {
   1fd0e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1fd10:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1fd14:	3b01      	subs	r3, #1
   1fd16:	b2db      	uxtb	r3, r3
   1fd18:	7123      	strb	r3, [r4, #4]
   1fd1a:	b9cb      	cbnz	r3, 1fd50 <net_buf_unref+0x50>
		if (buf->__buf) {
   1fd1c:	6921      	ldr	r1, [r4, #16]
   1fd1e:	b159      	cbz	r1, 1fd38 <net_buf_unref+0x38>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1fd20:	7963      	ldrb	r3, [r4, #5]
   1fd22:	079b      	lsls	r3, r3, #30
   1fd24:	d407      	bmi.n	1fd36 <net_buf_unref+0x36>
	pool->alloc->cb->unref(buf, data);
   1fd26:	79a3      	ldrb	r3, [r4, #6]
   1fd28:	fb07 5303 	mla	r3, r7, r3, r5
   1fd2c:	4620      	mov	r0, r4
   1fd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fd30:	681b      	ldr	r3, [r3, #0]
   1fd32:	689b      	ldr	r3, [r3, #8]
   1fd34:	4798      	blx	r3
			buf->__buf = NULL;
   1fd36:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1fd38:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1fd3a:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1fd3c:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1fd40:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1fd42:	6a1b      	ldr	r3, [r3, #32]
   1fd44:	b19b      	cbz	r3, 1fd6e <net_buf_unref+0x6e>
			pool->destroy(buf);
   1fd46:	4620      	mov	r0, r4
   1fd48:	4798      	blx	r3
	while (buf) {
   1fd4a:	4644      	mov	r4, r8
   1fd4c:	2c00      	cmp	r4, #0
   1fd4e:	d1de      	bne.n	1fd0e <net_buf_unref+0xe>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1fd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1fd54:	490a      	ldr	r1, [pc, #40]	; (1fd80 <net_buf_unref+0x80>)
   1fd56:	480b      	ldr	r0, [pc, #44]	; (1fd84 <net_buf_unref+0x84>)
   1fd58:	f44f 7202 	mov.w	r2, #520	; 0x208
   1fd5c:	f007 fdb9 	bl	278d2 <printk>
   1fd60:	f44f 7102 	mov.w	r1, #520	; 0x208
   1fd64:	4806      	ldr	r0, [pc, #24]	; (1fd80 <net_buf_unref+0x80>)
}
   1fd66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1fd6a:	f008 b82b 	b.w	27dc4 <assert_post_action>
   1fd6e:	4621      	mov	r1, r4
   1fd70:	fb00 5007 	mla	r0, r0, r7, r5
   1fd74:	f00e f917 	bl	2dfa6 <k_queue_prepend>
   1fd78:	e7e7      	b.n	1fd4a <net_buf_unref+0x4a>
   1fd7a:	bf00      	nop
   1fd7c:	20001f44 	.word	0x20001f44
   1fd80:	00036306 	.word	0x00036306
   1fd84:	0003067f 	.word	0x0003067f

0001fd88 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1fd88:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1fd8a:	4604      	mov	r4, r0
   1fd8c:	b950      	cbnz	r0, 1fda4 <net_buf_ref+0x1c>
   1fd8e:	4908      	ldr	r1, [pc, #32]	; (1fdb0 <net_buf_ref+0x28>)
   1fd90:	4808      	ldr	r0, [pc, #32]	; (1fdb4 <net_buf_ref+0x2c>)
   1fd92:	f240 2237 	movw	r2, #567	; 0x237
   1fd96:	f007 fd9c 	bl	278d2 <printk>
   1fd9a:	f240 2137 	movw	r1, #567	; 0x237
   1fd9e:	4804      	ldr	r0, [pc, #16]	; (1fdb0 <net_buf_ref+0x28>)
   1fda0:	f008 f810 	bl	27dc4 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1fda4:	7923      	ldrb	r3, [r4, #4]
   1fda6:	3301      	adds	r3, #1
   1fda8:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1fdaa:	4620      	mov	r0, r4
   1fdac:	bd10      	pop	{r4, pc}
   1fdae:	bf00      	nop
   1fdb0:	00036306 	.word	0x00036306
   1fdb4:	0003067f 	.word	0x0003067f

0001fdb8 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1fdb8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1fdba:	4604      	mov	r4, r0
   1fdbc:	b950      	cbnz	r0, 1fdd4 <net_buf_frag_last+0x1c>
   1fdbe:	4908      	ldr	r1, [pc, #32]	; (1fde0 <net_buf_frag_last+0x28>)
   1fdc0:	4808      	ldr	r0, [pc, #32]	; (1fde4 <net_buf_frag_last+0x2c>)
   1fdc2:	f44f 721d 	mov.w	r2, #628	; 0x274
   1fdc6:	f007 fd84 	bl	278d2 <printk>
   1fdca:	f44f 711d 	mov.w	r1, #628	; 0x274
   1fdce:	4804      	ldr	r0, [pc, #16]	; (1fde0 <net_buf_frag_last+0x28>)
   1fdd0:	f007 fff8 	bl	27dc4 <assert_post_action>

	while (buf->frags) {
   1fdd4:	6823      	ldr	r3, [r4, #0]
   1fdd6:	b90b      	cbnz	r3, 1fddc <net_buf_frag_last+0x24>
		buf = buf->frags;
	}

	return buf;
}
   1fdd8:	4620      	mov	r0, r4
   1fdda:	bd10      	pop	{r4, pc}
   1fddc:	461c      	mov	r4, r3
   1fdde:	e7f9      	b.n	1fdd4 <net_buf_frag_last+0x1c>
   1fde0:	00036306 	.word	0x00036306
   1fde4:	0003067f 	.word	0x0003067f

0001fde8 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1fde8:	b538      	push	{r3, r4, r5, lr}
   1fdea:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1fdec:	4604      	mov	r4, r0
   1fdee:	b950      	cbnz	r0, 1fe06 <net_buf_frag_insert+0x1e>
   1fdf0:	490f      	ldr	r1, [pc, #60]	; (1fe30 <net_buf_frag_insert+0x48>)
   1fdf2:	4810      	ldr	r0, [pc, #64]	; (1fe34 <net_buf_frag_insert+0x4c>)
   1fdf4:	f240 227f 	movw	r2, #639	; 0x27f
   1fdf8:	f007 fd6b 	bl	278d2 <printk>
   1fdfc:	f240 217f 	movw	r1, #639	; 0x27f
   1fe00:	480b      	ldr	r0, [pc, #44]	; (1fe30 <net_buf_frag_insert+0x48>)
   1fe02:	f007 ffdf 	bl	27dc4 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1fe06:	b955      	cbnz	r5, 1fe1e <net_buf_frag_insert+0x36>
   1fe08:	4909      	ldr	r1, [pc, #36]	; (1fe30 <net_buf_frag_insert+0x48>)
   1fe0a:	480a      	ldr	r0, [pc, #40]	; (1fe34 <net_buf_frag_insert+0x4c>)
   1fe0c:	f44f 7220 	mov.w	r2, #640	; 0x280
   1fe10:	f007 fd5f 	bl	278d2 <printk>
   1fe14:	f44f 7120 	mov.w	r1, #640	; 0x280
   1fe18:	4805      	ldr	r0, [pc, #20]	; (1fe30 <net_buf_frag_insert+0x48>)
   1fe1a:	f007 ffd3 	bl	27dc4 <assert_post_action>

	if (parent->frags) {
   1fe1e:	6823      	ldr	r3, [r4, #0]
   1fe20:	b123      	cbz	r3, 1fe2c <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   1fe22:	4628      	mov	r0, r5
   1fe24:	f7ff ffc8 	bl	1fdb8 <net_buf_frag_last>
   1fe28:	6823      	ldr	r3, [r4, #0]
   1fe2a:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1fe2c:	6025      	str	r5, [r4, #0]
}
   1fe2e:	bd38      	pop	{r3, r4, r5, pc}
   1fe30:	00036306 	.word	0x00036306
   1fe34:	0003067f 	.word	0x0003067f

0001fe38 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1fe38:	b538      	push	{r3, r4, r5, lr}
   1fe3a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1fe3c:	460d      	mov	r5, r1
   1fe3e:	b951      	cbnz	r1, 1fe56 <net_buf_frag_add+0x1e>
   1fe40:	490c      	ldr	r1, [pc, #48]	; (1fe74 <net_buf_frag_add+0x3c>)
   1fe42:	480d      	ldr	r0, [pc, #52]	; (1fe78 <net_buf_frag_add+0x40>)
   1fe44:	f240 228b 	movw	r2, #651	; 0x28b
   1fe48:	f007 fd43 	bl	278d2 <printk>
   1fe4c:	f240 218b 	movw	r1, #651	; 0x28b
   1fe50:	4808      	ldr	r0, [pc, #32]	; (1fe74 <net_buf_frag_add+0x3c>)
   1fe52:	f007 ffb7 	bl	27dc4 <assert_post_action>

	if (!head) {
   1fe56:	b924      	cbnz	r4, 1fe62 <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   1fe58:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1fe5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1fe5e:	f7ff bf93 	b.w	1fd88 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1fe62:	4620      	mov	r0, r4
   1fe64:	f7ff ffa8 	bl	1fdb8 <net_buf_frag_last>
   1fe68:	4629      	mov	r1, r5
   1fe6a:	f7ff ffbd 	bl	1fde8 <net_buf_frag_insert>
}
   1fe6e:	4620      	mov	r0, r4
   1fe70:	bd38      	pop	{r3, r4, r5, pc}
   1fe72:	bf00      	nop
   1fe74:	00036306 	.word	0x00036306
   1fe78:	0003067f 	.word	0x0003067f

0001fe7c <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1fe7c:	b538      	push	{r3, r4, r5, lr}
   1fe7e:	4605      	mov	r5, r0
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);
   1fe80:	460c      	mov	r4, r1
   1fe82:	b951      	cbnz	r1, 1fe9a <net_buf_frag_del+0x1e>
   1fe84:	4918      	ldr	r1, [pc, #96]	; (1fee8 <net_buf_frag_del+0x6c>)
   1fe86:	4819      	ldr	r0, [pc, #100]	; (1feec <net_buf_frag_del+0x70>)
   1fe88:	f44f 7228 	mov.w	r2, #672	; 0x2a0
   1fe8c:	f007 fd21 	bl	278d2 <printk>
   1fe90:	f44f 7128 	mov.w	r1, #672	; 0x2a0
   1fe94:	4814      	ldr	r0, [pc, #80]	; (1fee8 <net_buf_frag_del+0x6c>)
   1fe96:	f007 ff95 	bl	27dc4 <assert_post_action>

	if (parent) {
   1fe9a:	b1e5      	cbz	r5, 1fed6 <net_buf_frag_del+0x5a>
		__ASSERT_NO_MSG(parent->frags);
   1fe9c:	682b      	ldr	r3, [r5, #0]
   1fe9e:	b953      	cbnz	r3, 1feb6 <net_buf_frag_del+0x3a>
   1fea0:	4911      	ldr	r1, [pc, #68]	; (1fee8 <net_buf_frag_del+0x6c>)
   1fea2:	4812      	ldr	r0, [pc, #72]	; (1feec <net_buf_frag_del+0x70>)
   1fea4:	f240 22a3 	movw	r2, #675	; 0x2a3
   1fea8:	f007 fd13 	bl	278d2 <printk>
   1feac:	f240 21a3 	movw	r1, #675	; 0x2a3
   1feb0:	480d      	ldr	r0, [pc, #52]	; (1fee8 <net_buf_frag_del+0x6c>)
   1feb2:	f007 ff87 	bl	27dc4 <assert_post_action>
		__ASSERT_NO_MSG(parent->frags == frag);
   1feb6:	682b      	ldr	r3, [r5, #0]
   1feb8:	42a3      	cmp	r3, r4
   1feba:	d00a      	beq.n	1fed2 <net_buf_frag_del+0x56>
   1febc:	490a      	ldr	r1, [pc, #40]	; (1fee8 <net_buf_frag_del+0x6c>)
   1febe:	480b      	ldr	r0, [pc, #44]	; (1feec <net_buf_frag_del+0x70>)
   1fec0:	f44f 7229 	mov.w	r2, #676	; 0x2a4
   1fec4:	f007 fd05 	bl	278d2 <printk>
   1fec8:	f44f 7129 	mov.w	r1, #676	; 0x2a4
   1fecc:	4806      	ldr	r0, [pc, #24]	; (1fee8 <net_buf_frag_del+0x6c>)
   1fece:	f007 ff79 	bl	27dc4 <assert_post_action>
		parent->frags = frag->frags;
   1fed2:	6823      	ldr	r3, [r4, #0]
   1fed4:	602b      	str	r3, [r5, #0]
	}

	next_frag = frag->frags;
   1fed6:	6825      	ldr	r5, [r4, #0]

	frag->frags = NULL;
   1fed8:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1feda:	4620      	mov	r0, r4
	frag->frags = NULL;
   1fedc:	6023      	str	r3, [r4, #0]
	net_buf_unref(frag);
   1fede:	f7ff ff0f 	bl	1fd00 <net_buf_unref>
#endif

	return next_frag;
}
   1fee2:	4628      	mov	r0, r5
   1fee4:	bd38      	pop	{r3, r4, r5, pc}
   1fee6:	bf00      	nop
   1fee8:	00036306 	.word	0x00036306
   1feec:	0003067f 	.word	0x0003067f

0001fef0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1fef0:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1fef2:	6882      	ldr	r2, [r0, #8]
   1fef4:	6803      	ldr	r3, [r0, #0]
   1fef6:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1fef8:	4299      	cmp	r1, r3
{
   1fefa:	4604      	mov	r4, r0
   1fefc:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1fefe:	d90a      	bls.n	1ff16 <net_buf_simple_push+0x26>
   1ff00:	4908      	ldr	r1, [pc, #32]	; (1ff24 <net_buf_simple_push+0x34>)
   1ff02:	4809      	ldr	r0, [pc, #36]	; (1ff28 <net_buf_simple_push+0x38>)
   1ff04:	f240 4204 	movw	r2, #1028	; 0x404
   1ff08:	f007 fce3 	bl	278d2 <printk>
   1ff0c:	f240 4104 	movw	r1, #1028	; 0x404
   1ff10:	4804      	ldr	r0, [pc, #16]	; (1ff24 <net_buf_simple_push+0x34>)
   1ff12:	f007 ff57 	bl	27dc4 <assert_post_action>
	buf->data -= len;
   1ff16:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1ff18:	88a3      	ldrh	r3, [r4, #4]
	buf->data -= len;
   1ff1a:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1ff1c:	441d      	add	r5, r3
	buf->data -= len;
   1ff1e:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1ff20:	80a5      	strh	r5, [r4, #4]
}
   1ff22:	bd38      	pop	{r3, r4, r5, pc}
   1ff24:	00036306 	.word	0x00036306
   1ff28:	0003067f 	.word	0x0003067f

0001ff2c <net_buf_simple_pull>:
{
   1ff2c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1ff2e:	8883      	ldrh	r3, [r0, #4]
   1ff30:	428b      	cmp	r3, r1
{
   1ff32:	4604      	mov	r4, r0
   1ff34:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1ff36:	d20a      	bcs.n	1ff4e <net_buf_simple_pull+0x22>
   1ff38:	4908      	ldr	r1, [pc, #32]	; (1ff5c <net_buf_simple_pull+0x30>)
   1ff3a:	4809      	ldr	r0, [pc, #36]	; (1ff60 <net_buf_simple_pull+0x34>)
   1ff3c:	f240 4264 	movw	r2, #1124	; 0x464
   1ff40:	f007 fcc7 	bl	278d2 <printk>
   1ff44:	f240 4164 	movw	r1, #1124	; 0x464
   1ff48:	4804      	ldr	r0, [pc, #16]	; (1ff5c <net_buf_simple_pull+0x30>)
   1ff4a:	f007 ff3b 	bl	27dc4 <assert_post_action>
	buf->len -= len;
   1ff4e:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1ff50:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1ff52:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1ff54:	4428      	add	r0, r5
	buf->len -= len;
   1ff56:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1ff58:	6020      	str	r0, [r4, #0]
}
   1ff5a:	bd38      	pop	{r3, r4, r5, pc}
   1ff5c:	00036306 	.word	0x00036306
   1ff60:	0003067f 	.word	0x0003067f

0001ff64 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1ff64:	8883      	ldrh	r3, [r0, #4]
   1ff66:	428b      	cmp	r3, r1
{
   1ff68:	b570      	push	{r4, r5, r6, lr}
   1ff6a:	4604      	mov	r4, r0
   1ff6c:	460d      	mov	r5, r1
	void *data = buf->data;
   1ff6e:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1ff70:	d20a      	bcs.n	1ff88 <net_buf_simple_pull_mem+0x24>
   1ff72:	4909      	ldr	r1, [pc, #36]	; (1ff98 <net_buf_simple_pull_mem+0x34>)
   1ff74:	4809      	ldr	r0, [pc, #36]	; (1ff9c <net_buf_simple_pull_mem+0x38>)
   1ff76:	f44f 628e 	mov.w	r2, #1136	; 0x470
   1ff7a:	f007 fcaa 	bl	278d2 <printk>
   1ff7e:	f44f 618e 	mov.w	r1, #1136	; 0x470
   1ff82:	4805      	ldr	r0, [pc, #20]	; (1ff98 <net_buf_simple_pull_mem+0x34>)
   1ff84:	f007 ff1e 	bl	27dc4 <assert_post_action>
	buf->len -= len;
   1ff88:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1ff8a:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1ff8c:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1ff8e:	4429      	add	r1, r5
	buf->len -= len;
   1ff90:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1ff92:	6021      	str	r1, [r4, #0]
}
   1ff94:	4630      	mov	r0, r6
   1ff96:	bd70      	pop	{r4, r5, r6, pc}
   1ff98:	00036306 	.word	0x00036306
   1ff9c:	0003067f 	.word	0x0003067f

0001ffa0 <net_buf_simple_add>:
{
   1ffa0:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1ffa2:	6803      	ldr	r3, [r0, #0]
   1ffa4:	8886      	ldrh	r6, [r0, #4]
   1ffa6:	4604      	mov	r4, r0
   1ffa8:	460d      	mov	r5, r1
   1ffaa:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1ffac:	f00d fafe 	bl	2d5ac <net_buf_simple_tailroom>
   1ffb0:	4288      	cmp	r0, r1
   1ffb2:	d20a      	bcs.n	1ffca <net_buf_simple_add+0x2a>
   1ffb4:	4907      	ldr	r1, [pc, #28]	; (1ffd4 <net_buf_simple_add+0x34>)
   1ffb6:	4808      	ldr	r0, [pc, #32]	; (1ffd8 <net_buf_simple_add+0x38>)
   1ffb8:	f240 3215 	movw	r2, #789	; 0x315
   1ffbc:	f007 fc89 	bl	278d2 <printk>
   1ffc0:	f240 3115 	movw	r1, #789	; 0x315
   1ffc4:	4803      	ldr	r0, [pc, #12]	; (1ffd4 <net_buf_simple_add+0x34>)
   1ffc6:	f007 fefd 	bl	27dc4 <assert_post_action>
	buf->len += len;
   1ffca:	88a3      	ldrh	r3, [r4, #4]
   1ffcc:	441d      	add	r5, r3
   1ffce:	80a5      	strh	r5, [r4, #4]
}
   1ffd0:	4630      	mov	r0, r6
   1ffd2:	bd70      	pop	{r4, r5, r6, pc}
   1ffd4:	00036306 	.word	0x00036306
   1ffd8:	0003067f 	.word	0x0003067f

0001ffdc <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1ffdc:	b570      	push	{r4, r5, r6, lr}
   1ffde:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1ffe0:	68c4      	ldr	r4, [r0, #12]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1ffe2:	460d      	mov	r5, r1
   1ffe4:	b941      	cbnz	r1, 1fff8 <gpio_nrfx_manage_callback+0x1c>
   1ffe6:	491e      	ldr	r1, [pc, #120]	; (20060 <gpio_nrfx_manage_callback+0x84>)
   1ffe8:	481e      	ldr	r0, [pc, #120]	; (20064 <gpio_nrfx_manage_callback+0x88>)
   1ffea:	2224      	movs	r2, #36	; 0x24
   1ffec:	f007 fc71 	bl	278d2 <printk>
   1fff0:	2124      	movs	r1, #36	; 0x24
   1fff2:	481b      	ldr	r0, [pc, #108]	; (20060 <gpio_nrfx_manage_callback+0x84>)
   1fff4:	f007 fee6 	bl	27dc4 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1fff8:	686b      	ldr	r3, [r5, #4]
   1fffa:	b943      	cbnz	r3, 2000e <gpio_nrfx_manage_callback+0x32>
   1fffc:	4918      	ldr	r1, [pc, #96]	; (20060 <gpio_nrfx_manage_callback+0x84>)
   1fffe:	4819      	ldr	r0, [pc, #100]	; (20064 <gpio_nrfx_manage_callback+0x88>)
   20000:	2225      	movs	r2, #37	; 0x25
   20002:	f007 fc66 	bl	278d2 <printk>
   20006:	2125      	movs	r1, #37	; 0x25
   20008:	4815      	ldr	r0, [pc, #84]	; (20060 <gpio_nrfx_manage_callback+0x84>)
   2000a:	f007 fedb 	bl	27dc4 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   2000e:	6863      	ldr	r3, [r4, #4]

	if (!sys_slist_is_empty(callbacks)) {
   20010:	b15b      	cbz	r3, 2002a <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20012:	2200      	movs	r2, #0
   20014:	429d      	cmp	r5, r3
   20016:	d113      	bne.n	20040 <gpio_nrfx_manage_callback+0x64>
Z_GENLIST_REMOVE(slist, snode)
   20018:	682b      	ldr	r3, [r5, #0]
   2001a:	b95a      	cbnz	r2, 20034 <gpio_nrfx_manage_callback+0x58>
   2001c:	68a2      	ldr	r2, [r4, #8]
	list->head = node;
   2001e:	6063      	str	r3, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
   20020:	4295      	cmp	r5, r2
   20022:	d100      	bne.n	20026 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   20024:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   20026:	2300      	movs	r3, #0
   20028:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   2002a:	b976      	cbnz	r6, 2004a <gpio_nrfx_manage_callback+0x6e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2002c:	2000      	movs	r0, #0
				     callback, set);
}
   2002e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20030:	460b      	mov	r3, r1
   20032:	e7ef      	b.n	20014 <gpio_nrfx_manage_callback+0x38>
	parent->next = child;
   20034:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   20036:	68a3      	ldr	r3, [r4, #8]
   20038:	429d      	cmp	r5, r3
	list->tail = node;
   2003a:	bf08      	it	eq
   2003c:	60a2      	streq	r2, [r4, #8]
   2003e:	e7f2      	b.n	20026 <gpio_nrfx_manage_callback+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20040:	6819      	ldr	r1, [r3, #0]
	return node->next;
   20042:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20044:	2900      	cmp	r1, #0
   20046:	d1f3      	bne.n	20030 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   20048:	b13e      	cbz	r6, 2005a <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_PREPEND(slist, snode)
   2004a:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2004c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2004e:	68a0      	ldr	r0, [r4, #8]
	list->head = node;
   20050:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   20052:	2800      	cmp	r0, #0
   20054:	d1ea      	bne.n	2002c <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   20056:	60a5      	str	r5, [r4, #8]
   20058:	e7e9      	b.n	2002e <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   2005a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2005e:	e7e6      	b.n	2002e <gpio_nrfx_manage_callback+0x52>
   20060:	00036332 	.word	0x00036332
   20064:	0003067f 	.word	0x0003067f

00020068 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   20068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2006c:	6804      	ldr	r4, [r0, #0]
{
   2006e:	4688      	mov	r8, r1
   20070:	4616      	mov	r6, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20072:	b1dc      	cbz	r4, 200ac <gpio_fire_callbacks+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20074:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   20076:	4f0e      	ldr	r7, [pc, #56]	; (200b0 <gpio_fire_callbacks+0x48>)
   20078:	f8df 9038 	ldr.w	r9, [pc, #56]	; 200b4 <gpio_fire_callbacks+0x4c>
		if (cb->pin_mask & pins) {
   2007c:	68a3      	ldr	r3, [r4, #8]
   2007e:	421e      	tst	r6, r3
   20080:	d010      	beq.n	200a4 <gpio_fire_callbacks+0x3c>
			__ASSERT(cb->handler, "No callback handler!");
   20082:	6863      	ldr	r3, [r4, #4]
   20084:	b943      	cbnz	r3, 20098 <gpio_fire_callbacks+0x30>
   20086:	4639      	mov	r1, r7
   20088:	4648      	mov	r0, r9
   2008a:	2245      	movs	r2, #69	; 0x45
   2008c:	f007 fc21 	bl	278d2 <printk>
   20090:	2145      	movs	r1, #69	; 0x45
   20092:	4638      	mov	r0, r7
   20094:	f007 fe96 	bl	27dc4 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   20098:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   2009c:	4621      	mov	r1, r4
   2009e:	4032      	ands	r2, r6
   200a0:	4640      	mov	r0, r8
   200a2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   200a4:	b115      	cbz	r5, 200ac <gpio_fire_callbacks+0x44>
   200a6:	462c      	mov	r4, r5
   200a8:	682d      	ldr	r5, [r5, #0]
   200aa:	e7e7      	b.n	2007c <gpio_fire_callbacks+0x14>
		}
	}
}
   200ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   200b0:	00036332 	.word	0x00036332
   200b4:	0003067f 	.word	0x0003067f

000200b8 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   200b8:	6802      	ldr	r2, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   200ba:	0953      	lsrs	r3, r2, #5
{
   200bc:	b510      	push	{r4, lr}
   200be:	4604      	mov	r4, r0
    switch (port)
   200c0:	d02a      	beq.n	20118 <nrf_gpio_pin_port_decode+0x60>
   200c2:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   200c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   200c8:	bf18      	it	ne
   200ca:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   200cc:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   200d0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   200d2:	07db      	lsls	r3, r3, #31
   200d4:	d40a      	bmi.n	200ec <nrf_gpio_pin_port_decode+0x34>
   200d6:	4913      	ldr	r1, [pc, #76]	; (20124 <nrf_gpio_pin_port_decode+0x6c>)
   200d8:	4813      	ldr	r0, [pc, #76]	; (20128 <nrf_gpio_pin_port_decode+0x70>)
   200da:	f240 221a 	movw	r2, #538	; 0x21a
   200de:	f007 fbf8 	bl	278d2 <printk>
   200e2:	f240 211a 	movw	r1, #538	; 0x21a
   200e6:	480f      	ldr	r0, [pc, #60]	; (20124 <nrf_gpio_pin_port_decode+0x6c>)
   200e8:	f007 fe6c 	bl	27dc4 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   200ec:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   200ee:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   200f2:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   200f4:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   200f6:	d00c      	beq.n	20112 <nrf_gpio_pin_port_decode+0x5a>
   200f8:	2b01      	cmp	r3, #1
   200fa:	d010      	beq.n	2011e <nrf_gpio_pin_port_decode+0x66>
            NRFX_ASSERT(0);
   200fc:	4909      	ldr	r1, [pc, #36]	; (20124 <nrf_gpio_pin_port_decode+0x6c>)
   200fe:	480a      	ldr	r0, [pc, #40]	; (20128 <nrf_gpio_pin_port_decode+0x70>)
   20100:	f240 221f 	movw	r2, #543	; 0x21f
   20104:	f007 fbe5 	bl	278d2 <printk>
   20108:	f240 211f 	movw	r1, #543	; 0x21f
   2010c:	4805      	ldr	r0, [pc, #20]	; (20124 <nrf_gpio_pin_port_decode+0x6c>)
   2010e:	f007 fe59 	bl	27dc4 <assert_post_action>
        case 0: return NRF_P0;
   20112:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   20116:	bd10      	pop	{r4, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   20118:	f04f 33ff 	mov.w	r3, #4294967295
   2011c:	e7d6      	b.n	200cc <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   2011e:	4803      	ldr	r0, [pc, #12]	; (2012c <nrf_gpio_pin_port_decode+0x74>)
   20120:	e7f9      	b.n	20116 <nrf_gpio_pin_port_decode+0x5e>
   20122:	bf00      	nop
   20124:	0003635f 	.word	0x0003635f
   20128:	0003067f 	.word	0x0003067f
   2012c:	50000300 	.word	0x50000300

00020130 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   20130:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   20132:	4b09      	ldr	r3, [pc, #36]	; (20158 <gpio_nrfx_init+0x28>)
   20134:	781a      	ldrb	r2, [r3, #0]
   20136:	b96a      	cbnz	r2, 20154 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   20138:	2101      	movs	r1, #1
   2013a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2013c:	2006      	movs	r0, #6
   2013e:	2105      	movs	r1, #5
   20140:	f7e7 fcde 	bl	7b00 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   20144:	2006      	movs	r0, #6
   20146:	f7e7 fca9 	bl	7a9c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   2014a:	4b04      	ldr	r3, [pc, #16]	; (2015c <gpio_nrfx_init+0x2c>)
   2014c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   20150:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   20154:	2000      	movs	r0, #0
   20156:	bd08      	pop	{r3, pc}
   20158:	2000589c 	.word	0x2000589c
   2015c:	40006000 	.word	0x40006000

00020160 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   20160:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   20164:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20168:	4680      	mov	r8, r0
   2016a:	460e      	mov	r6, r1
   2016c:	4617      	mov	r7, r2
   2016e:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   20170:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   20172:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   20176:	f040 80a6 	bne.w	202c6 <gpio_nrfx_pin_interrupt_configure+0x166>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2017a:	6843      	ldr	r3, [r0, #4]
   2017c:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2017e:	a801      	add	r0, sp, #4
   20180:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   20184:	9301      	str	r3, [sp, #4]
   20186:	f7ff ff97 	bl	200b8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2018a:	9b01      	ldr	r3, [sp, #4]
   2018c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20190:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   20194:	07d8      	lsls	r0, r3, #31
   20196:	f100 80b7 	bmi.w	20308 <gpio_nrfx_pin_interrupt_configure+0x1a8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   2019a:	2101      	movs	r1, #1
   2019c:	68e3      	ldr	r3, [r4, #12]
   2019e:	40b1      	lsls	r1, r6
   201a0:	4319      	orrs	r1, r3
   201a2:	6963      	ldr	r3, [r4, #20]
   201a4:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   201a6:	2101      	movs	r1, #1
   201a8:	40b1      	lsls	r1, r6
   201aa:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   201ae:	bf0c      	ite	eq
   201b0:	430b      	orreq	r3, r1
   201b2:	438b      	bicne	r3, r1
   201b4:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   201b6:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   201b8:	4a55      	ldr	r2, [pc, #340]	; (20310 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
	struct gpio_nrfx_data *data = get_port_data(port);
   201ba:	f8d8 700c 	ldr.w	r7, [r8, #12]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   201be:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   201c2:	bf0c      	ite	eq
   201c4:	430b      	orreq	r3, r1
   201c6:	438b      	bicne	r3, r1
   201c8:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   201ca:	6923      	ldr	r3, [r4, #16]
   201cc:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   201d0:	bf0c      	ite	eq
   201d2:	4319      	orreq	r1, r3
   201d4:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   201d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   201dc:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   201de:	7a1b      	ldrb	r3, [r3, #8]
   201e0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   201e4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   201e8:	2000      	movs	r0, #0
   201ea:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   201ec:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   201f0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   201f4:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   201f8:	428d      	cmp	r5, r1
   201fa:	d16f      	bne.n	202dc <gpio_nrfx_pin_interrupt_configure+0x17c>
		    && (intenset & BIT(i))) {
   201fc:	fa23 f100 	lsr.w	r1, r3, r0
   20200:	07c9      	lsls	r1, r1, #31
   20202:	d56b      	bpl.n	202dc <gpio_nrfx_pin_interrupt_configure+0x17c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   20204:	0083      	lsls	r3, r0, #2
   20206:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2020a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2020e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   20212:	f021 0101 	bic.w	r1, r1, #1
   20216:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   2021a:	2301      	movs	r3, #1
   2021c:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   2021e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   20222:	b2c0      	uxtb	r0, r0
   20224:	f002 fd6e 	bl	22d04 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   20228:	4628      	mov	r0, r5
   2022a:	2100      	movs	r1, #0
   2022c:	f00d fa3a 	bl	2d6a4 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   20230:	68f8      	ldr	r0, [r7, #12]
   20232:	40f0      	lsrs	r0, r6
   20234:	f010 0001 	ands.w	r0, r0, #1
   20238:	d042      	beq.n	202c0 <gpio_nrfx_pin_interrupt_configure+0x160>
		if (data->trig_edge & BIT(pin)) {
   2023a:	6978      	ldr	r0, [r7, #20]
   2023c:	40f0      	lsrs	r0, r6
   2023e:	f010 0401 	ands.w	r4, r0, #1
   20242:	d054      	beq.n	202ee <gpio_nrfx_pin_interrupt_configure+0x18e>
			if (data->double_edge & BIT(pin)) {
   20244:	69bb      	ldr	r3, [r7, #24]
   20246:	40f3      	lsrs	r3, r6
   20248:	07db      	lsls	r3, r3, #31
   2024a:	d44b      	bmi.n	202e4 <gpio_nrfx_pin_interrupt_configure+0x184>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   2024c:	693b      	ldr	r3, [r7, #16]
   2024e:	fa23 f606 	lsr.w	r6, r3, r6
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   20252:	f016 0f01 	tst.w	r6, #1
   20256:	bf14      	ite	ne
   20258:	2401      	movne	r4, #1
   2025a:	2402      	moveq	r4, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   2025c:	a801      	add	r0, sp, #4
   2025e:	f002 fd73 	bl	22d48 <nrfx_gpiote_channel_alloc>
   20262:	4b2c      	ldr	r3, [pc, #176]	; (20314 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   20264:	4298      	cmp	r0, r3
   20266:	d13f      	bne.n	202e8 <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   20268:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2026c:	008b      	lsls	r3, r1, #2
   2026e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20272:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20276:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   20278:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2027c:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   20280:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   20284:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20288:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2028c:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   20290:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   20292:	008a      	lsls	r2, r1, #2
   20294:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   20298:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2029c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   202a0:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   202a2:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   202a6:	6010      	str	r0, [r2, #0]
   202a8:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   202aa:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   202ae:	f042 0201 	orr.w	r2, r2, #1
   202b2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   202b6:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   202b8:	4a15      	ldr	r2, [pc, #84]	; (20310 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   202ba:	408b      	lsls	r3, r1
   202bc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   202c0:	b003      	add	sp, #12
   202c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   202c6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   202ca:	f47f af66 	bne.w	2019a <gpio_nrfx_pin_interrupt_configure+0x3a>
   202ce:	2101      	movs	r1, #1
   202d0:	fa01 f306 	lsl.w	r3, r1, r6
   202d4:	68e1      	ldr	r1, [r4, #12]
   202d6:	ea21 0103 	bic.w	r1, r1, r3
   202da:	e762      	b.n	201a2 <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   202dc:	3001      	adds	r0, #1
   202de:	2808      	cmp	r0, #8
   202e0:	d184      	bne.n	201ec <gpio_nrfx_pin_interrupt_configure+0x8c>
   202e2:	e7a1      	b.n	20228 <gpio_nrfx_pin_interrupt_configure+0xc8>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   202e4:	2403      	movs	r4, #3
   202e6:	e7b9      	b.n	2025c <gpio_nrfx_pin_interrupt_configure+0xfc>
		return -ENODEV;
   202e8:	f06f 0012 	mvn.w	r0, #18
   202ec:	e7e8      	b.n	202c0 <gpio_nrfx_pin_interrupt_configure+0x160>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   202ee:	693b      	ldr	r3, [r7, #16]
   202f0:	fa23 f606 	lsr.w	r6, r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
   202f4:	f016 0f01 	tst.w	r6, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   202f8:	4628      	mov	r0, r5
   202fa:	bf0c      	ite	eq
   202fc:	2103      	moveq	r1, #3
   202fe:	2102      	movne	r1, #2
   20300:	f00d f9d0 	bl	2d6a4 <nrf_gpio_cfg_sense_set>
	int res = 0;
   20304:	4620      	mov	r0, r4
   20306:	e7db      	b.n	202c0 <gpio_nrfx_pin_interrupt_configure+0x160>
		return -ENOTSUP;
   20308:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2030c:	e7d8      	b.n	202c0 <gpio_nrfx_pin_interrupt_configure+0x160>
   2030e:	bf00      	nop
   20310:	40006000 	.word	0x40006000
   20314:	0bad0000 	.word	0x0bad0000

00020318 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   20318:	4b2e      	ldr	r3, [pc, #184]	; (203d4 <gpio_nrfx_config+0xbc>)
   2031a:	4013      	ands	r3, r2
   2031c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
{
   20320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20322:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   20324:	d045      	beq.n	203b2 <gpio_nrfx_config+0x9a>
   20326:	d808      	bhi.n	2033a <gpio_nrfx_config+0x22>
   20328:	2b02      	cmp	r3, #2
   2032a:	d044      	beq.n	203b6 <gpio_nrfx_config+0x9e>
   2032c:	2b06      	cmp	r3, #6
   2032e:	d044      	beq.n	203ba <gpio_nrfx_config+0xa2>
   20330:	2b00      	cmp	r3, #0
   20332:	d042      	beq.n	203ba <gpio_nrfx_config+0xa2>
		return -EINVAL;
   20334:	f06f 0015 	mvn.w	r0, #21
   20338:	e039      	b.n	203ae <gpio_nrfx_config+0x96>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2033a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   2033e:	d03e      	beq.n	203be <gpio_nrfx_config+0xa6>
   20340:	d804      	bhi.n	2034c <gpio_nrfx_config+0x34>
   20342:	4c25      	ldr	r4, [pc, #148]	; (203d8 <gpio_nrfx_config+0xc0>)
   20344:	42a3      	cmp	r3, r4
   20346:	d1f5      	bne.n	20334 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0D1;
   20348:	2407      	movs	r4, #7
   2034a:	e006      	b.n	2035a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2034c:	4c23      	ldr	r4, [pc, #140]	; (203dc <gpio_nrfx_config+0xc4>)
   2034e:	42a3      	cmp	r3, r4
   20350:	d037      	beq.n	203c2 <gpio_nrfx_config+0xaa>
   20352:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   20356:	d1ed      	bne.n	20334 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0H1;
   20358:	2403      	movs	r4, #3
	if ((flags & GPIO_PULL_UP) != 0) {
   2035a:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   2035c:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
   20360:	bf54      	ite	pl
   20362:	f3c2 1740 	ubfxpl	r7, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   20366:	2703      	movmi	r7, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   20368:	f3c3 2600 	ubfx	r6, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   2036c:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   2036e:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   20372:	d507      	bpl.n	20384 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   20374:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20376:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   2037a:	d524      	bpl.n	203c6 <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
   2037c:	2301      	movs	r3, #1
   2037e:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   20380:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   20384:	7a03      	ldrb	r3, [r0, #8]
   20386:	f001 011f 	and.w	r1, r1, #31
   2038a:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2038e:	a801      	add	r0, sp, #4
   20390:	9101      	str	r1, [sp, #4]
   20392:	f7ff fe91 	bl	200b8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   20396:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   20398:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   2039c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   203a0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   203a4:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   203a8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   203ac:	2000      	movs	r0, #0
}
   203ae:	b003      	add	sp, #12
   203b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0S1;
   203b2:	2401      	movs	r4, #1
   203b4:	e7d1      	b.n	2035a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   203b6:	2404      	movs	r4, #4
   203b8:	e7cf      	b.n	2035a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_S0S1;
   203ba:	461c      	mov	r4, r3
   203bc:	e7cd      	b.n	2035a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_S0H1;
   203be:	2402      	movs	r4, #2
   203c0:	e7cb      	b.n	2035a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   203c2:	2405      	movs	r4, #5
   203c4:	e7c9      	b.n	2035a <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   203c6:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   203c8:	bf42      	ittt	mi
   203ca:	2201      	movmi	r2, #1
   203cc:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   203ce:	f8cc 250c 	strmi.w	r2, [ip, #1292]	; 0x50c
   203d2:	e7d7      	b.n	20384 <gpio_nrfx_config+0x6c>
   203d4:	00f00006 	.word	0x00f00006
   203d8:	00100006 	.word	0x00100006
   203dc:	00400002 	.word	0x00400002

000203e0 <gpiote_event_handler>:
{
   203e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   203e2:	2600      	movs	r6, #0
   203e4:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   203e8:	4d26      	ldr	r5, [pc, #152]	; (20484 <gpiote_event_handler+0xa4>)
   203ea:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
   203ec:	b14c      	cbz	r4, 20402 <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   203ee:	4826      	ldr	r0, [pc, #152]	; (20488 <gpiote_event_handler+0xa8>)
   203f0:	f00d f96b 	bl	2d6ca <check_level_trigger_pins>
		fired_triggers[0] =
   203f4:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   203f6:	4825      	ldr	r0, [pc, #148]	; (2048c <gpiote_event_handler+0xac>)
   203f8:	f00d f967 	bl	2d6ca <check_level_trigger_pins>
		fired_triggers[1] =
   203fc:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   203fe:	602e      	str	r6, [r5, #0]
   20400:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   20402:	4d23      	ldr	r5, [pc, #140]	; (20490 <gpiote_event_handler+0xb0>)
{
   20404:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   20406:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20408:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   2040a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   2040e:	fa06 f102 	lsl.w	r1, r6, r2
   20412:	4219      	tst	r1, r3
   20414:	d01b      	beq.n	2044e <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20416:	0091      	lsls	r1, r2, #2
   20418:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   2041c:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   20420:	680b      	ldr	r3, [r1, #0]
   20422:	b1a3      	cbz	r3, 2044e <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   20424:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   20428:	af02      	add	r7, sp, #8
   2042a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2042e:	f8c1 c000 	str.w	ip, [r1]
   20432:	f3c3 3040 	ubfx	r0, r3, #13, #1
   20436:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   2043a:	f3c3 2304 	ubfx	r3, r3, #8, #5
   2043e:	f850 7c08 	ldr.w	r7, [r0, #-8]
   20442:	fa06 f303 	lsl.w	r3, r6, r3
   20446:	433b      	orrs	r3, r7
   20448:	f840 3c08 	str.w	r3, [r0, #-8]
   2044c:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2044e:	3201      	adds	r2, #1
   20450:	2a08      	cmp	r2, #8
   20452:	d1da      	bne.n	2040a <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
   20454:	9a00      	ldr	r2, [sp, #0]
   20456:	b11a      	cbz	r2, 20460 <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
   20458:	490b      	ldr	r1, [pc, #44]	; (20488 <gpiote_event_handler+0xa8>)
   2045a:	480e      	ldr	r0, [pc, #56]	; (20494 <gpiote_event_handler+0xb4>)
   2045c:	f7ff fe04 	bl	20068 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   20460:	9a01      	ldr	r2, [sp, #4]
   20462:	b11a      	cbz	r2, 2046c <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
   20464:	4909      	ldr	r1, [pc, #36]	; (2048c <gpiote_event_handler+0xac>)
   20466:	480c      	ldr	r0, [pc, #48]	; (20498 <gpiote_event_handler+0xb8>)
   20468:	f7ff fdfe 	bl	20068 <gpio_fire_callbacks>
	if (port_event) {
   2046c:	b144      	cbz	r4, 20480 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   2046e:	4806      	ldr	r0, [pc, #24]	; (20488 <gpiote_event_handler+0xa8>)
   20470:	f00d f954 	bl	2d71c <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   20474:	4805      	ldr	r0, [pc, #20]	; (2048c <gpiote_event_handler+0xac>)
}
   20476:	b003      	add	sp, #12
   20478:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   2047c:	f00d b94e 	b.w	2d71c <cfg_level_pins>
}
   20480:	b003      	add	sp, #12
   20482:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20484:	4000617c 	.word	0x4000617c
   20488:	20001d30 	.word	0x20001d30
   2048c:	20001d40 	.word	0x20001d40
   20490:	40006000 	.word	0x40006000
   20494:	20005324 	.word	0x20005324
   20498:	20005340 	.word	0x20005340

0002049c <gpio_pin_set>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2049c:	6843      	ldr	r3, [r0, #4]
{
   2049e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   204a2:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
   204a4:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   204a6:	2501      	movs	r5, #1
   204a8:	408d      	lsls	r5, r1
   204aa:	421d      	tst	r5, r3
{
   204ac:	4604      	mov	r4, r0
   204ae:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   204b0:	d10a      	bne.n	204c8 <gpio_pin_set+0x2c>
   204b2:	4915      	ldr	r1, [pc, #84]	; (20508 <gpio_pin_set+0x6c>)
   204b4:	4815      	ldr	r0, [pc, #84]	; (2050c <gpio_pin_set+0x70>)
   204b6:	f240 32eb 	movw	r2, #1003	; 0x3eb
   204ba:	f007 fa0a 	bl	278d2 <printk>
   204be:	f240 31eb 	movw	r1, #1003	; 0x3eb
   204c2:	4811      	ldr	r0, [pc, #68]	; (20508 <gpio_pin_set+0x6c>)
   204c4:	f007 fc7e 	bl	27dc4 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   204c8:	683b      	ldr	r3, [r7, #0]
   204ca:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   204cc:	6863      	ldr	r3, [r4, #4]
   204ce:	681b      	ldr	r3, [r3, #0]
   204d0:	bf18      	it	ne
   204d2:	f086 0601 	eorne.w	r6, r6, #1
   204d6:	421d      	tst	r5, r3
   204d8:	d10a      	bne.n	204f0 <gpio_pin_set+0x54>
   204da:	490b      	ldr	r1, [pc, #44]	; (20508 <gpio_pin_set+0x6c>)
   204dc:	480b      	ldr	r0, [pc, #44]	; (2050c <gpio_pin_set+0x70>)
   204de:	f240 32c1 	movw	r2, #961	; 0x3c1
   204e2:	f007 f9f6 	bl	278d2 <printk>
   204e6:	f240 31c1 	movw	r1, #961	; 0x3c1
   204ea:	4807      	ldr	r0, [pc, #28]	; (20508 <gpio_pin_set+0x6c>)
   204ec:	f007 fc6a 	bl	27dc4 <assert_post_action>
	if (value != 0)	{
   204f0:	b136      	cbz	r6, 20500 <gpio_pin_set+0x64>
	return api->port_set_bits_raw(port, pins);
   204f2:	68a3      	ldr	r3, [r4, #8]
   204f4:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   204f6:	4629      	mov	r1, r5
   204f8:	4620      	mov	r0, r4
}
   204fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   204fe:	4718      	bx	r3
   20500:	68a3      	ldr	r3, [r4, #8]
   20502:	691b      	ldr	r3, [r3, #16]
   20504:	e7f7      	b.n	204f6 <gpio_pin_set+0x5a>
   20506:	bf00      	nop
   20508:	00030655 	.word	0x00030655
   2050c:	0003067f 	.word	0x0003067f

00020510 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   20510:	b538      	push	{r3, r4, r5, lr}
   20512:	4604      	mov	r4, r0
   20514:	2200      	movs	r2, #0
   20516:	2101      	movs	r1, #1
   20518:	2004      	movs	r0, #4
   2051a:	f7e7 faf1 	bl	7b00 <z_arm_irq_priority_set>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   2051e:	68e3      	ldr	r3, [r4, #12]
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   20520:	4a0b      	ldr	r2, [pc, #44]	; (20550 <spi_1_init+0x40>)
	dev_data->dev = dev;
   20522:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   20524:	6860      	ldr	r0, [r4, #4]
   20526:	f100 0108 	add.w	r1, r0, #8
   2052a:	f002 fd2b 	bl	22f84 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   2052e:	4b09      	ldr	r3, [pc, #36]	; (20554 <spi_1_init+0x44>)
   20530:	4298      	cmp	r0, r3
   20532:	d00b      	beq.n	2054c <spi_1_init+0x3c>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   20534:	6822      	ldr	r2, [r4, #0]
   20536:	4808      	ldr	r0, [pc, #32]	; (20558 <spi_1_init+0x48>)
   20538:	2145      	movs	r1, #69	; 0x45
   2053a:	f007 f9ca 	bl	278d2 <printk>
		return -EBUSY;
   2053e:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(1);
   20542:	68e0      	ldr	r0, [r4, #12]
   20544:	f00d f935 	bl	2d7b2 <spi_context_unlock_unconditionally>
   20548:	4628      	mov	r0, r5
   2054a:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   2054c:	2500      	movs	r5, #0
   2054e:	e7f8      	b.n	20542 <spi_1_init+0x32>
   20550:	000208b9 	.word	0x000208b9
   20554:	0bad0000 	.word	0x0bad0000
   20558:	000363b5 	.word	0x000363b5

0002055c <transfer_next_chunk>:
{
   2055c:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   2055e:	68c5      	ldr	r5, [r0, #12]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   20560:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   20562:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
   20564:	b085      	sub	sp, #20
   20566:	b982      	cbnz	r2, 2058a <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   20568:	bb73      	cbnz	r3, 205c8 <transfer_next_chunk+0x6c>
	int error = 0;
   2056a:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   2056c:	2200      	movs	r2, #0
   2056e:	4611      	mov	r1, r2
   20570:	4628      	mov	r0, r5
   20572:	f00d f8f9 	bl	2d768 <_spi_context_cs_control.isra.5>
	ctx->sync_status = status;
   20576:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   20578:	f105 0020 	add.w	r0, r5, #32
   2057c:	f004 fd1e 	bl	24fbc <z_impl_k_sem_give>
	dev_data->busy = false;
   20580:	2300      	movs	r3, #0
   20582:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   20586:	b005      	add	sp, #20
   20588:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   2058a:	4611      	mov	r1, r2
   2058c:	b113      	cbz	r3, 20594 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   2058e:	429a      	cmp	r2, r3
   20590:	bf28      	it	cs
   20592:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   20594:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
   20596:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
   20598:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   2059a:	b1bc      	cbz	r4, 205cc <transfer_next_chunk+0x70>
   2059c:	2a00      	cmp	r2, #0
   2059e:	bf18      	it	ne
   205a0:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   205a2:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   205a4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   205a6:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   205a8:	b192      	cbz	r2, 205d0 <transfer_next_chunk+0x74>
   205aa:	2b00      	cmp	r3, #0
   205ac:	bf18      	it	ne
   205ae:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   205b0:	2200      	movs	r2, #0
   205b2:	4669      	mov	r1, sp
   205b4:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   205b6:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   205b8:	f002 fd9c 	bl	230f4 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   205bc:	4b05      	ldr	r3, [pc, #20]	; (205d4 <transfer_next_chunk+0x78>)
   205be:	4298      	cmp	r0, r3
   205c0:	d0e1      	beq.n	20586 <transfer_next_chunk+0x2a>
		error = -EIO;
   205c2:	f06f 0404 	mvn.w	r4, #4
   205c6:	e7d1      	b.n	2056c <transfer_next_chunk+0x10>
   205c8:	4619      	mov	r1, r3
   205ca:	e7e3      	b.n	20594 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   205cc:	4622      	mov	r2, r4
   205ce:	e7e8      	b.n	205a2 <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   205d0:	4613      	mov	r3, r2
   205d2:	e7ed      	b.n	205b0 <transfer_next_chunk+0x54>
   205d4:	0bad0000 	.word	0x0bad0000

000205d8 <spi_nrfx_transceive>:
{
   205d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205dc:	461f      	mov	r7, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   205de:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   205e0:	68c4      	ldr	r4, [r0, #12]
{
   205e2:	4681      	mov	r9, r0
   205e4:	0458      	lsls	r0, r3, #17
   205e6:	b085      	sub	sp, #20
   205e8:	460d      	mov	r5, r1
   205ea:	4690      	mov	r8, r2
   205ec:	d427      	bmi.n	2063e <spi_nrfx_transceive+0x66>
	return z_impl_k_sem_take(sem, timeout);
   205ee:	f04f 32ff 	mov.w	r2, #4294967295
   205f2:	f04f 33ff 	mov.w	r3, #4294967295
   205f6:	f104 0008 	add.w	r0, r4, #8
   205fa:	f004 fd1b 	bl	25034 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   205fe:	6065      	str	r5, [r4, #4]
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   20600:	f8d9 600c 	ldr.w	r6, [r9, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
   20604:	6833      	ldr	r3, [r6, #0]
   20606:	429d      	cmp	r5, r3
   20608:	f000 80e3 	beq.w	207d2 <spi_nrfx_transceive+0x1fa>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   2060c:	88ab      	ldrh	r3, [r5, #4]
   2060e:	07d9      	lsls	r1, r3, #31
   20610:	d51c      	bpl.n	2064c <spi_nrfx_transceive+0x74>
		LOG_ERR("Slave mode is not supported on %s",
   20612:	f8d9 2000 	ldr.w	r2, [r9]
   20616:	4899      	ldr	r0, [pc, #612]	; (2087c <spi_nrfx_transceive+0x2a4>)
   20618:	2145      	movs	r1, #69	; 0x45
   2061a:	f007 f95a 	bl	278d2 <printk>
		return -EINVAL;
   2061e:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   20622:	6823      	ldr	r3, [r4, #0]
   20624:	889b      	ldrh	r3, [r3, #4]
   20626:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   2062a:	d104      	bne.n	20636 <spi_nrfx_transceive+0x5e>
		ctx->owner = NULL;
   2062c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2062e:	f104 0008 	add.w	r0, r4, #8
   20632:	f004 fcc3 	bl	24fbc <z_impl_k_sem_give>
}
   20636:	4628      	mov	r0, r5
   20638:	b005      	add	sp, #20
   2063a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   2063e:	6923      	ldr	r3, [r4, #16]
   20640:	2b00      	cmp	r3, #0
   20642:	d1d4      	bne.n	205ee <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   20644:	6863      	ldr	r3, [r4, #4]
   20646:	4299      	cmp	r1, r3
   20648:	d1d1      	bne.n	205ee <spi_nrfx_transceive+0x16>
   2064a:	e7d9      	b.n	20600 <spi_nrfx_transceive+0x28>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   2064c:	071a      	lsls	r2, r3, #28
   2064e:	d504      	bpl.n	2065a <spi_nrfx_transceive+0x82>
		LOG_ERR("Loopback mode is not supported");
   20650:	488b      	ldr	r0, [pc, #556]	; (20880 <spi_nrfx_transceive+0x2a8>)
   20652:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Word sizes other than 8 bits"
   20654:	f007 f93d 	bl	278d2 <printk>
   20658:	e7e1      	b.n	2061e <spi_nrfx_transceive+0x46>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   2065a:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   2065e:	d002      	beq.n	20666 <spi_nrfx_transceive+0x8e>
		LOG_ERR("Only single line mode is supported");
   20660:	2145      	movs	r1, #69	; 0x45
   20662:	4888      	ldr	r0, [pc, #544]	; (20884 <spi_nrfx_transceive+0x2ac>)
   20664:	e7f6      	b.n	20654 <spi_nrfx_transceive+0x7c>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   20666:	f3c3 1245 	ubfx	r2, r3, #5, #6
   2066a:	2a08      	cmp	r2, #8
   2066c:	d002      	beq.n	20674 <spi_nrfx_transceive+0x9c>
		LOG_ERR("Word sizes other than 8 bits"
   2066e:	2145      	movs	r1, #69	; 0x45
   20670:	4885      	ldr	r0, [pc, #532]	; (20888 <spi_nrfx_transceive+0x2b0>)
   20672:	e7ef      	b.n	20654 <spi_nrfx_transceive+0x7c>
	if (spi_cfg->frequency < 125000) {
   20674:	6829      	ldr	r1, [r5, #0]
   20676:	4a85      	ldr	r2, [pc, #532]	; (2088c <spi_nrfx_transceive+0x2b4>)
   20678:	4291      	cmp	r1, r2
   2067a:	d802      	bhi.n	20682 <spi_nrfx_transceive+0xaa>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   2067c:	2145      	movs	r1, #69	; 0x45
   2067e:	4884      	ldr	r0, [pc, #528]	; (20890 <spi_nrfx_transceive+0x2b8>)
   20680:	e7e8      	b.n	20654 <spi_nrfx_transceive+0x7c>
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
   20682:	f8d9 2004 	ldr.w	r2, [r9, #4]
   20686:	9202      	str	r2, [sp, #8]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   20688:	68aa      	ldr	r2, [r5, #8]
	ctx->config = spi_cfg;
   2068a:	6035      	str	r5, [r6, #0]
   2068c:	2a00      	cmp	r2, #0
   2068e:	f000 80cd 	beq.w	2082c <spi_nrfx_transceive+0x254>
   20692:	6811      	ldr	r1, [r2, #0]
   20694:	2900      	cmp	r1, #0
   20696:	f000 80c9 	beq.w	2082c <spi_nrfx_transceive+0x254>
		__ASSERT(spi_context_cs_active_level(ctx) ==
   2069a:	7a52      	ldrb	r2, [r2, #9]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   2069c:	43db      	mvns	r3, r3
		__ASSERT(spi_context_cs_active_level(ctx) ==
   2069e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
   206a2:	f002 0201 	and.w	r2, r2, #1
   206a6:	4293      	cmp	r3, r2
   206a8:	d008      	beq.n	206bc <spi_nrfx_transceive+0xe4>
   206aa:	497a      	ldr	r1, [pc, #488]	; (20894 <spi_nrfx_transceive+0x2bc>)
   206ac:	487a      	ldr	r0, [pc, #488]	; (20898 <spi_nrfx_transceive+0x2c0>)
   206ae:	22b4      	movs	r2, #180	; 0xb4
   206b0:	f007 f90f 	bl	278d2 <printk>
   206b4:	21b4      	movs	r1, #180	; 0xb4
   206b6:	4877      	ldr	r0, [pc, #476]	; (20894 <spi_nrfx_transceive+0x2bc>)
   206b8:	f007 fb84 	bl	27dc4 <assert_post_action>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   206bc:	6833      	ldr	r3, [r6, #0]
   206be:	689b      	ldr	r3, [r3, #8]
   206c0:	f8d3 b000 	ldr.w	fp, [r3]
   206c4:	7a1a      	ldrb	r2, [r3, #8]
				   ctx->config->cs->gpio_dt_flags |
   206c6:	7a5e      	ldrb	r6, [r3, #9]
	const struct gpio_driver_config *const cfg =
   206c8:	f8db 3004 	ldr.w	r3, [fp, #4]
   206cc:	9303      	str	r3, [sp, #12]
	struct gpio_driver_data *data =
   206ce:	f8db 300c 	ldr.w	r3, [fp, #12]
   206d2:	9300      	str	r3, [sp, #0]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   206d4:	f006 0330 	and.w	r3, r6, #48	; 0x30
   206d8:	2b30      	cmp	r3, #48	; 0x30
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   206da:	9201      	str	r2, [sp, #4]
   206dc:	d10a      	bne.n	206f4 <spi_nrfx_transceive+0x11c>
   206de:	496f      	ldr	r1, [pc, #444]	; (2089c <spi_nrfx_transceive+0x2c4>)
   206e0:	486d      	ldr	r0, [pc, #436]	; (20898 <spi_nrfx_transceive+0x2c0>)
   206e2:	f240 222b 	movw	r2, #555	; 0x22b
   206e6:	f007 f8f4 	bl	278d2 <printk>
   206ea:	f240 212b 	movw	r1, #555	; 0x22b
   206ee:	486b      	ldr	r0, [pc, #428]	; (2089c <spi_nrfx_transceive+0x2c4>)
   206f0:	f007 fb68 	bl	27dc4 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   206f4:	f006 0306 	and.w	r3, r6, #6
   206f8:	2b04      	cmp	r3, #4
   206fa:	d10a      	bne.n	20712 <spi_nrfx_transceive+0x13a>
   206fc:	4967      	ldr	r1, [pc, #412]	; (2089c <spi_nrfx_transceive+0x2c4>)
   206fe:	4866      	ldr	r0, [pc, #408]	; (20898 <spi_nrfx_transceive+0x2c0>)
   20700:	f240 2232 	movw	r2, #562	; 0x232
   20704:	f007 f8e5 	bl	278d2 <printk>
   20708:	f240 2132 	movw	r1, #562	; 0x232
   2070c:	4863      	ldr	r0, [pc, #396]	; (2089c <spi_nrfx_transceive+0x2c4>)
   2070e:	f007 fb59 	bl	27dc4 <assert_post_action>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   20712:	07f3      	lsls	r3, r6, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   20714:	9b01      	ldr	r3, [sp, #4]
   20716:	f04f 0a01 	mov.w	sl, #1
   2071a:	fa0a fa03 	lsl.w	sl, sl, r3
   2071e:	9b03      	ldr	r3, [sp, #12]
   20720:	681b      	ldr	r3, [r3, #0]
   20722:	bf54      	ite	pl
   20724:	f446 56b0 	orrpl.w	r6, r6, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   20728:	f486 6620 	eormi.w	r6, r6, #2560	; 0xa00
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2072c:	ea1a 0f03 	tst.w	sl, r3
   20730:	d10a      	bne.n	20748 <spi_nrfx_transceive+0x170>
   20732:	495a      	ldr	r1, [pc, #360]	; (2089c <spi_nrfx_transceive+0x2c4>)
   20734:	4858      	ldr	r0, [pc, #352]	; (20898 <spi_nrfx_transceive+0x2c0>)
   20736:	f240 2245 	movw	r2, #581	; 0x245
   2073a:	f007 f8ca 	bl	278d2 <printk>
   2073e:	f240 2145 	movw	r1, #581	; 0x245
   20742:	4856      	ldr	r0, [pc, #344]	; (2089c <spi_nrfx_transceive+0x2c4>)
   20744:	f007 fb3e 	bl	27dc4 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   20748:	f8db 3008 	ldr.w	r3, [fp, #8]
   2074c:	9901      	ldr	r1, [sp, #4]
   2074e:	681b      	ldr	r3, [r3, #0]
   20750:	4632      	mov	r2, r6
   20752:	4658      	mov	r0, fp
   20754:	4798      	blx	r3
	if (ret != 0) {
   20756:	b948      	cbnz	r0, 2076c <spi_nrfx_transceive+0x194>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   20758:	9b00      	ldr	r3, [sp, #0]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2075a:	9a00      	ldr	r2, [sp, #0]
   2075c:	681b      	ldr	r3, [r3, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2075e:	07f6      	lsls	r6, r6, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   20760:	bf4c      	ite	mi
   20762:	ea4a 0303 	orrmi.w	r3, sl, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   20766:	ea23 030a 	bicpl.w	r3, r3, sl
   2076a:	6013      	str	r3, [r2, #0]
	nrf_spi_configure(spi->p_reg,
   2076c:	9b02      	ldr	r3, [sp, #8]
   2076e:	6819      	ldr	r1, [r3, #0]
   20770:	88ab      	ldrh	r3, [r5, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   20772:	0798      	lsls	r0, r3, #30
   20774:	f003 0204 	and.w	r2, r3, #4
   20778:	d55d      	bpl.n	20836 <spi_nrfx_transceive+0x25e>
			return NRF_SPI_MODE_2;
   2077a:	2a00      	cmp	r2, #0
   2077c:	bf14      	ite	ne
   2077e:	2203      	movne	r2, #3
   20780:	2202      	moveq	r2, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   20782:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
   20784:	f3c3 1300 	ubfx	r3, r3, #4, #1
   20788:	d059      	beq.n	2083e <spi_nrfx_transceive+0x266>
   2078a:	2a03      	cmp	r2, #3
   2078c:	d05a      	beq.n	20844 <spi_nrfx_transceive+0x26c>
   2078e:	2a01      	cmp	r2, #1
   20790:	d101      	bne.n	20796 <spi_nrfx_transceive+0x1be>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   20792:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   20796:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
   2079a:	4a41      	ldr	r2, [pc, #260]	; (208a0 <spi_nrfx_transceive+0x2c8>)
	nrf_spi_frequency_set(spi->p_reg,
   2079c:	682b      	ldr	r3, [r5, #0]
	if (frequency < 250000) {
   2079e:	4293      	cmp	r3, r2
   207a0:	d953      	bls.n	2084a <spi_nrfx_transceive+0x272>
	} else if (frequency < 500000) {
   207a2:	4a40      	ldr	r2, [pc, #256]	; (208a4 <spi_nrfx_transceive+0x2cc>)
   207a4:	4293      	cmp	r3, r2
   207a6:	d953      	bls.n	20850 <spi_nrfx_transceive+0x278>
	} else if (frequency < 1000000) {
   207a8:	4a3f      	ldr	r2, [pc, #252]	; (208a8 <spi_nrfx_transceive+0x2d0>)
   207aa:	4293      	cmp	r3, r2
   207ac:	d953      	bls.n	20856 <spi_nrfx_transceive+0x27e>
	} else if (frequency < 2000000) {
   207ae:	4a3f      	ldr	r2, [pc, #252]	; (208ac <spi_nrfx_transceive+0x2d4>)
   207b0:	4293      	cmp	r3, r2
   207b2:	d953      	bls.n	2085c <spi_nrfx_transceive+0x284>
	} else if (frequency < 4000000) {
   207b4:	4a3e      	ldr	r2, [pc, #248]	; (208b0 <spi_nrfx_transceive+0x2d8>)
   207b6:	4293      	cmp	r3, r2
   207b8:	d953      	bls.n	20862 <spi_nrfx_transceive+0x28a>
		return NRF_SPI_FREQ_8M;
   207ba:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
   207be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
   207c2:	4293      	cmp	r3, r2
   207c4:	bf94      	ite	ls
   207c6:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
   207ca:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   207ce:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
   207d2:	2301      	movs	r3, #1
   207d4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   207d8:	f1b8 0f00 	cmp.w	r8, #0
   207dc:	d044      	beq.n	20868 <spi_nrfx_transceive+0x290>
		ctx->current_tx = tx_bufs->buffers;
   207de:	f8d8 3000 	ldr.w	r3, [r8]
		ctx->tx_count = tx_bufs->count;
   207e2:	f8d8 2004 	ldr.w	r2, [r8, #4]
		ctx->current_tx = tx_bufs->buffers;
   207e6:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   207e8:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   207ea:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   207ec:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   207ee:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   207f0:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   207f2:	2f00      	cmp	r7, #0
   207f4:	d03d      	beq.n	20872 <spi_nrfx_transceive+0x29a>
		ctx->current_rx = rx_bufs->buffers;
   207f6:	683b      	ldr	r3, [r7, #0]
		ctx->rx_count = rx_bufs->count;
   207f8:	687a      	ldr	r2, [r7, #4]
		ctx->current_rx = rx_bufs->buffers;
   207fa:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   207fc:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   207fe:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   20800:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   20802:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   20804:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   20806:	2200      	movs	r2, #0
   20808:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   2080a:	2101      	movs	r1, #1
   2080c:	4620      	mov	r0, r4
   2080e:	f00c ffab 	bl	2d768 <_spi_context_cs_control.isra.5>
		transfer_next_chunk(dev);
   20812:	4648      	mov	r0, r9
   20814:	f7ff fea2 	bl	2055c <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   20818:	f04f 32ff 	mov.w	r2, #4294967295
   2081c:	f04f 33ff 	mov.w	r3, #4294967295
   20820:	f104 0020 	add.w	r0, r4, #32
   20824:	f004 fc06 	bl	25034 <z_impl_k_sem_take>
	status = ctx->sync_status;
   20828:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   2082a:	e6fa      	b.n	20622 <spi_nrfx_transceive+0x4a>
		LOG_INF("CS control inhibited (no GPIO device)");
   2082c:	2149      	movs	r1, #73	; 0x49
   2082e:	4821      	ldr	r0, [pc, #132]	; (208b4 <spi_nrfx_transceive+0x2dc>)
   20830:	f007 f84f 	bl	278d2 <printk>
   20834:	e79a      	b.n	2076c <spi_nrfx_transceive+0x194>
			return NRF_SPI_MODE_0;
   20836:	3200      	adds	r2, #0
   20838:	bf18      	it	ne
   2083a:	2201      	movne	r2, #1
   2083c:	e7a1      	b.n	20782 <spi_nrfx_transceive+0x1aa>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   2083e:	f043 0304 	orr.w	r3, r3, #4
        break;
   20842:	e7a8      	b.n	20796 <spi_nrfx_transceive+0x1be>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   20844:	f043 0306 	orr.w	r3, r3, #6
        break;
   20848:	e7a5      	b.n	20796 <spi_nrfx_transceive+0x1be>
		return NRF_SPI_FREQ_125K;
   2084a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   2084e:	e7be      	b.n	207ce <spi_nrfx_transceive+0x1f6>
		return NRF_SPI_FREQ_250K;
   20850:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   20854:	e7bb      	b.n	207ce <spi_nrfx_transceive+0x1f6>
		return NRF_SPI_FREQ_500K;
   20856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   2085a:	e7b8      	b.n	207ce <spi_nrfx_transceive+0x1f6>
		return NRF_SPI_FREQ_1M;
   2085c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20860:	e7b5      	b.n	207ce <spi_nrfx_transceive+0x1f6>
		return NRF_SPI_FREQ_2M;
   20862:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   20866:	e7b2      	b.n	207ce <spi_nrfx_transceive+0x1f6>
		ctx->tx_count = 0;
   20868:	e9c4 880f 	strd	r8, r8, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   2086c:	e9c4 8813 	strd	r8, r8, [r4, #76]	; 0x4c
   20870:	e7bf      	b.n	207f2 <spi_nrfx_transceive+0x21a>
		ctx->rx_count = 0;
   20872:	e9c4 7711 	strd	r7, r7, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   20876:	e9c4 7715 	strd	r7, r7, [r4, #84]	; 0x54
   2087a:	e7c4      	b.n	20806 <spi_nrfx_transceive+0x22e>
   2087c:	000363da 	.word	0x000363da
   20880:	00036401 	.word	0x00036401
   20884:	00036425 	.word	0x00036425
   20888:	0003644d 	.word	0x0003644d
   2088c:	0001e847 	.word	0x0001e847
   20890:	00036481 	.word	0x00036481
   20894:	000364b7 	.word	0x000364b7
   20898:	0003067f 	.word	0x0003067f
   2089c:	00030655 	.word	0x00030655
   208a0:	0003d08f 	.word	0x0003d08f
   208a4:	0007a11f 	.word	0x0007a11f
   208a8:	000f423f 	.word	0x000f423f
   208ac:	001e847f 	.word	0x001e847f
   208b0:	003d08ff 	.word	0x003d08ff
   208b4:	000364e4 	.word	0x000364e4

000208b8 <event_handler>:
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   208b8:	7803      	ldrb	r3, [r0, #0]
{
   208ba:	b510      	push	{r4, lr}
   208bc:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   208be:	2b00      	cmp	r3, #0
   208c0:	d142      	bne.n	20948 <event_handler+0x90>
	if (!ctx->tx_len) {
   208c2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   208c4:	b133      	cbz	r3, 208d4 <event_handler+0x1c>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   208c6:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   208c8:	429a      	cmp	r2, r3
   208ca:	d911      	bls.n	208f0 <event_handler+0x38>
		LOG_ERR("Update exceeds current buffer");
   208cc:	2145      	movs	r1, #69	; 0x45
   208ce:	481f      	ldr	r0, [pc, #124]	; (2094c <event_handler+0x94>)
   208d0:	f006 ffff 	bl	278d2 <printk>
	if (!ctx->rx_len) {
   208d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   208d6:	b133      	cbz	r3, 208e6 <event_handler+0x2e>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   208d8:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   208da:	429a      	cmp	r2, r3
   208dc:	d91e      	bls.n	2091c <event_handler+0x64>
		LOG_ERR("Update exceeds current buffer");
   208de:	2145      	movs	r1, #69	; 0x45
   208e0:	481a      	ldr	r0, [pc, #104]	; (2094c <event_handler+0x94>)
   208e2:	f006 fff6 	bl	278d2 <printk>
		transfer_next_chunk(dev_data->dev);
   208e6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   208e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   208ec:	f7ff be36 	b.w	2055c <transfer_next_chunk>
	ctx->tx_len -= len;
   208f0:	1a9b      	subs	r3, r3, r2
   208f2:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   208f4:	b963      	cbnz	r3, 20910 <event_handler+0x58>
		ctx->tx_count--;
   208f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   208f8:	3b01      	subs	r3, #1
   208fa:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   208fc:	b163      	cbz	r3, 20918 <event_handler+0x60>
			ctx->current_tx++;
   208fe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   20900:	f103 0208 	add.w	r2, r3, #8
   20904:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   20906:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   20908:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   2090a:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   2090c:	650b      	str	r3, [r1, #80]	; 0x50
   2090e:	e7e1      	b.n	208d4 <event_handler+0x1c>
	} else if (ctx->tx_buf) {
   20910:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   20912:	2b00      	cmp	r3, #0
   20914:	d0de      	beq.n	208d4 <event_handler+0x1c>
		ctx->tx_buf += dfs * len;
   20916:	4413      	add	r3, r2
   20918:	64e3      	str	r3, [r4, #76]	; 0x4c
   2091a:	e7db      	b.n	208d4 <event_handler+0x1c>
	ctx->rx_len -= len;
   2091c:	1a9b      	subs	r3, r3, r2
   2091e:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   20920:	b963      	cbnz	r3, 2093c <event_handler+0x84>
		ctx->rx_count--;
   20922:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   20924:	3b01      	subs	r3, #1
   20926:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   20928:	b163      	cbz	r3, 20944 <event_handler+0x8c>
			ctx->current_rx++;
   2092a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2092c:	f103 0208 	add.w	r2, r3, #8
   20930:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   20932:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   20934:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   20936:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   20938:	65a3      	str	r3, [r4, #88]	; 0x58
   2093a:	e7d4      	b.n	208e6 <event_handler+0x2e>
	} else if (ctx->rx_buf) {
   2093c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   2093e:	2b00      	cmp	r3, #0
   20940:	d0d1      	beq.n	208e6 <event_handler+0x2e>
		ctx->rx_buf += dfs * len;
   20942:	4413      	add	r3, r2
   20944:	6563      	str	r3, [r4, #84]	; 0x54
   20946:	e7ce      	b.n	208e6 <event_handler+0x2e>
}
   20948:	bd10      	pop	{r4, pc}
   2094a:	bf00      	nop
   2094c:	00036392 	.word	0x00036392

00020950 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   20950:	4b02      	ldr	r3, [pc, #8]	; (2095c <flash_nrf_pages_layout+0xc>)
   20952:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   20954:	2301      	movs	r3, #1
   20956:	6013      	str	r3, [r2, #0]
}
   20958:	4770      	bx	lr
   2095a:	bf00      	nop
   2095c:	20005358 	.word	0x20005358

00020960 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   20960:	4800      	ldr	r0, [pc, #0]	; (20964 <flash_nrf_get_parameters+0x4>)
   20962:	4770      	bx	lr
   20964:	0002ffa4 	.word	0x0002ffa4

00020968 <flash_nrf_read>:
{
   20968:	b570      	push	{r4, r5, r6, lr}
   2096a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   2096c:	4628      	mov	r0, r5
   2096e:	4619      	mov	r1, r3
{
   20970:	4616      	mov	r6, r2
   20972:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   20974:	f00c ff41 	bl	2d7fa <is_regular_addr_valid>
   20978:	b940      	cbnz	r0, 2098c <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2097a:	4809      	ldr	r0, [pc, #36]	; (209a0 <flash_nrf_read+0x38>)
   2097c:	4623      	mov	r3, r4
   2097e:	462a      	mov	r2, r5
   20980:	2145      	movs	r1, #69	; 0x45
   20982:	f006 ffa6 	bl	278d2 <printk>
   20986:	f06f 0015 	mvn.w	r0, #21
}
   2098a:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   2098c:	b134      	cbz	r4, 2099c <flash_nrf_read+0x34>
   2098e:	4622      	mov	r2, r4
   20990:	4629      	mov	r1, r5
   20992:	4630      	mov	r0, r6
   20994:	f00d fc89 	bl	2e2aa <memcpy>
	return 0;
   20998:	2000      	movs	r0, #0
   2099a:	e7f6      	b.n	2098a <flash_nrf_read+0x22>
		return 0;
   2099c:	4620      	mov	r0, r4
   2099e:	e7f4      	b.n	2098a <flash_nrf_read+0x22>
   209a0:	00036540 	.word	0x00036540

000209a4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   209a4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   209a6:	2201      	movs	r2, #1
   209a8:	4611      	mov	r1, r2
   209aa:	4807      	ldr	r0, [pc, #28]	; (209c8 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   209ac:	4c07      	ldr	r4, [pc, #28]	; (209cc <nrf_flash_init+0x28>)
   209ae:	f00d fb48 	bl	2e042 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   209b2:	f000 fa27 	bl	20e04 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   209b6:	f00d fa55 	bl	2de64 <nrfx_nvmc_flash_page_count_get>
   209ba:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   209bc:	f00d fa4e 	bl	2de5c <nrfx_nvmc_flash_page_size_get>
   209c0:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   209c2:	2000      	movs	r0, #0
   209c4:	bd10      	pop	{r4, pc}
   209c6:	bf00      	nop
   209c8:	20005360 	.word	0x20005360
   209cc:	20005358 	.word	0x20005358

000209d0 <nrf_power_pofcon_set.constprop.10>:
NRF_STATIC_INLINE void nrf_power_pofcon_set(NRF_POWER_Type *    p_reg,
   209d0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(thr == (thr & (POWER_POFCON_THRESHOLD_Msk >> POWER_POFCON_THRESHOLD_Pos)));
   209d2:	f031 030f 	bics.w	r3, r1, #15
NRF_STATIC_INLINE void nrf_power_pofcon_set(NRF_POWER_Type *    p_reg,
   209d6:	4605      	mov	r5, r0
   209d8:	460c      	mov	r4, r1
    NRFX_ASSERT(thr == (thr & (POWER_POFCON_THRESHOLD_Msk >> POWER_POFCON_THRESHOLD_Pos)));
   209da:	d00a      	beq.n	209f2 <nrf_power_pofcon_set.constprop.10+0x22>
   209dc:	490b      	ldr	r1, [pc, #44]	; (20a0c <nrf_power_pofcon_set.constprop.10+0x3c>)
   209de:	480c      	ldr	r0, [pc, #48]	; (20a10 <nrf_power_pofcon_set.constprop.10+0x40>)
   209e0:	f240 32e7 	movw	r2, #999	; 0x3e7
   209e4:	f006 ff75 	bl	278d2 <printk>
   209e8:	f240 31e7 	movw	r1, #999	; 0x3e7
   209ec:	4807      	ldr	r0, [pc, #28]	; (20a0c <nrf_power_pofcon_set.constprop.10+0x3c>)
   209ee:	f007 f9e9 	bl	27dc4 <assert_post_action>
    uint32_t pofcon = p_reg->POFCON;
   209f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   209f6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   209fa:	f021 011f 	bic.w	r1, r1, #31
   209fe:	4329      	orrs	r1, r5
    pofcon |=
   20a00:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    p_reg->POFCON = pofcon;
   20a04:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
}
   20a08:	bd38      	pop	{r3, r4, r5, pc}
   20a0a:	bf00      	nop
   20a0c:	00036585 	.word	0x00036585
   20a10:	0003067f 	.word	0x0003067f

00020a14 <restore_pofwarn.part.2>:
	}

	return 0;
}

static void restore_pofwarn(void)
   20a14:	b508      	push	{r3, lr}
    uint32_t pofcon = p_reg->POFCON;
   20a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   20a1a:	2001      	movs	r0, #1
   20a1c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   20a20:	f3c1 0143 	ubfx	r1, r1, #1, #4
   20a24:	f7ff ffd4 	bl	209d0 <nrf_power_pofcon_set.constprop.10>
		pofcon_enabled = false;
   20a28:	4b01      	ldr	r3, [pc, #4]	; (20a30 <restore_pofwarn.part.2+0x1c>)
   20a2a:	2200      	movs	r2, #0
   20a2c:	701a      	strb	r2, [r3, #0]
	}
}
   20a2e:	bd08      	pop	{r3, pc}
   20a30:	2000589d 	.word	0x2000589d

00020a34 <suspend_pofwarn.part.1>:
   20a34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
static int suspend_pofwarn(void)
   20a38:	b510      	push	{r4, lr}
   20a3a:	f8d3 4510 	ldr.w	r4, [r3, #1296]	; 0x510
	if (enabled) {
   20a3e:	f014 0001 	ands.w	r0, r4, #1
   20a42:	d00e      	beq.n	20a62 <suspend_pofwarn.part.1+0x2e>
    return (nrf_power_pof_thr_t)((pofcon & POWER_POFCON_THRESHOLD_Msk) >>
   20a44:	f3c4 0443 	ubfx	r4, r4, #1, #4
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);
   20a48:	2000      	movs	r0, #0
   20a4a:	4621      	mov	r1, r4
   20a4c:	f7ff ffc0 	bl	209d0 <nrf_power_pofcon_set.constprop.10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20a50:	4b06      	ldr	r3, [pc, #24]	; (20a6c <suspend_pofwarn.part.1+0x38>)
   20a52:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   20a54:	b130      	cbz	r0, 20a64 <suspend_pofwarn.part.1+0x30>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   20a56:	2001      	movs	r0, #1
   20a58:	4621      	mov	r1, r4
   20a5a:	f7ff ffb9 	bl	209d0 <nrf_power_pofcon_set.constprop.10>
			return -ECANCELED;
   20a5e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   20a62:	bd10      	pop	{r4, pc}
		pofcon_enabled = enabled;
   20a64:	4b02      	ldr	r3, [pc, #8]	; (20a70 <suspend_pofwarn.part.1+0x3c>)
   20a66:	2201      	movs	r2, #1
   20a68:	701a      	strb	r2, [r3, #0]
   20a6a:	e7fa      	b.n	20a62 <suspend_pofwarn.part.1+0x2e>
   20a6c:	40000108 	.word	0x40000108
   20a70:	2000589d 	.word	0x2000589d

00020a74 <erase_op>:
{
   20a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20a78:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   20a7a:	f00d f9ef 	bl	2de5c <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   20a7e:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   20a80:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
   20a82:	b10b      	cbz	r3, 20a88 <erase_op+0x14>
		nrf_flash_sync_get_timestamp_begin();
   20a84:	f000 f9d0 	bl	20e28 <nrf_flash_sync_get_timestamp_begin>
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20a88:	4f16      	ldr	r7, [pc, #88]	; (20ae4 <erase_op+0x70>)
	if (pofcon_enabled) {
   20a8a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 20ae8 <erase_op+0x74>
{
   20a8e:	2500      	movs	r5, #0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   20a90:	683b      	ldr	r3, [r7, #0]
   20a92:	2b08      	cmp	r3, #8
   20a94:	d019      	beq.n	20aca <erase_op+0x56>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   20a96:	6860      	ldr	r0, [r4, #4]
   20a98:	f002 f998 	bl	22dcc <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   20a9c:	68a3      	ldr	r3, [r4, #8]
   20a9e:	1b9b      	subs	r3, r3, r6
   20aa0:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   20aa2:	6863      	ldr	r3, [r4, #4]
   20aa4:	4433      	add	r3, r6
   20aa6:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   20aa8:	f898 3000 	ldrb.w	r3, [r8]
   20aac:	b10b      	cbz	r3, 20ab2 <erase_op+0x3e>
   20aae:	f7ff ffb1 	bl	20a14 <restore_pofwarn.part.2>
		if (e_ctx->enable_time_limit) {
   20ab2:	7b23      	ldrb	r3, [r4, #12]
		i++;
   20ab4:	3501      	adds	r5, #1
		if (e_ctx->enable_time_limit) {
   20ab6:	b97b      	cbnz	r3, 20ad8 <erase_op+0x64>
	} while (e_ctx->len > 0);
   20ab8:	68a3      	ldr	r3, [r4, #8]
   20aba:	2b00      	cmp	r3, #0
   20abc:	d1e8      	bne.n	20a90 <erase_op+0x1c>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   20abe:	68a0      	ldr	r0, [r4, #8]
   20ac0:	3000      	adds	r0, #0
   20ac2:	bf18      	it	ne
   20ac4:	2001      	movne	r0, #1
}
   20ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                switch(var2)
   20aca:	f7ff ffb3 	bl	20a34 <suspend_pofwarn.part.1>
		if (SUSPEND_POFWARN()) {
   20ace:	2800      	cmp	r0, #0
   20ad0:	d0e1      	beq.n	20a96 <erase_op+0x22>
			return -ECANCELED;
   20ad2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   20ad6:	e7f6      	b.n	20ac6 <erase_op+0x52>
			if (nrf_flash_sync_check_time_limit(i)) {
   20ad8:	4628      	mov	r0, r5
   20ada:	f7e2 fb09 	bl	30f0 <nrf_flash_sync_check_time_limit>
   20ade:	2800      	cmp	r0, #0
   20ae0:	d0ea      	beq.n	20ab8 <erase_op+0x44>
   20ae2:	e7ec      	b.n	20abe <erase_op+0x4a>
   20ae4:	10000130 	.word	0x10000130
   20ae8:	2000589d 	.word	0x2000589d

00020aec <flash_nrf_erase>:
{
   20aec:	b5f0      	push	{r4, r5, r6, r7, lr}
   20aee:	b087      	sub	sp, #28
   20af0:	460e      	mov	r6, r1
   20af2:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   20af4:	f00d f9b2 	bl	2de5c <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   20af8:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   20afa:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   20afc:	4630      	mov	r0, r6
   20afe:	f00c fe7c 	bl	2d7fa <is_regular_addr_valid>
   20b02:	b358      	cbz	r0, 20b5c <flash_nrf_erase+0x70>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   20b04:	fbb6 f3f7 	udiv	r3, r6, r7
   20b08:	fb07 6313 	mls	r3, r7, r3, r6
   20b0c:	b923      	cbnz	r3, 20b18 <flash_nrf_erase+0x2c>
   20b0e:	fbb5 f4f7 	udiv	r4, r5, r7
   20b12:	fb07 5414 	mls	r4, r7, r4, r5
   20b16:	b154      	cbz	r4, 20b2e <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   20b18:	481f      	ldr	r0, [pc, #124]	; (20b98 <flash_nrf_erase+0xac>)
   20b1a:	462b      	mov	r3, r5
   20b1c:	4632      	mov	r2, r6
   20b1e:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
   20b20:	f006 fed7 	bl	278d2 <printk>
		return -EINVAL;
   20b24:	f06f 0415 	mvn.w	r4, #21
}
   20b28:	4620      	mov	r0, r4
   20b2a:	b007      	add	sp, #28
   20b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   20b2e:	42bd      	cmp	r5, r7
   20b30:	d3fa      	bcc.n	20b28 <flash_nrf_erase+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   20b32:	f04f 33ff 	mov.w	r3, #4294967295
   20b36:	f04f 32ff 	mov.w	r2, #4294967295
   20b3a:	4818      	ldr	r0, [pc, #96]	; (20b9c <flash_nrf_erase+0xb0>)
   20b3c:	f004 fa7a 	bl	25034 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   20b40:	f00c fe6e 	bl	2d820 <nrf_flash_sync_is_required>
   20b44:	ab02      	add	r3, sp, #8
   20b46:	4601      	mov	r1, r0
   20b48:	b968      	cbnz	r0, 20b66 <flash_nrf_erase+0x7a>
	struct flash_context context = {
   20b4a:	2210      	movs	r2, #16
   20b4c:	4618      	mov	r0, r3
   20b4e:	f00d fbe7 	bl	2e320 <memset>
   20b52:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   20b56:	f7ff ff8d 	bl	20a74 <erase_op>
   20b5a:	e017      	b.n	20b8c <flash_nrf_erase+0xa0>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   20b5c:	462b      	mov	r3, r5
   20b5e:	4632      	mov	r2, r6
   20b60:	2145      	movs	r1, #69	; 0x45
   20b62:	480f      	ldr	r0, [pc, #60]	; (20ba0 <flash_nrf_erase+0xb4>)
   20b64:	e7dc      	b.n	20b20 <flash_nrf_erase+0x34>
	struct flash_context context = {
   20b66:	2210      	movs	r2, #16
   20b68:	4621      	mov	r1, r4
   20b6a:	4618      	mov	r0, r3
   20b6c:	f00d fbd8 	bl	2e320 <memset>
   20b70:	2201      	movs	r2, #1
   20b72:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   20b76:	4a0b      	ldr	r2, [pc, #44]	; (20ba4 <flash_nrf_erase+0xb8>)
   20b78:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   20b7c:	480a      	ldr	r0, [pc, #40]	; (20ba8 <flash_nrf_erase+0xbc>)
	struct flash_context context = {
   20b7e:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   20b82:	f000 f949 	bl	20e18 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   20b86:	4668      	mov	r0, sp
   20b88:	f7e2 fa36 	bl	2ff8 <nrf_flash_sync_exe>
	return	erase_op(&context);
   20b8c:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   20b8e:	4803      	ldr	r0, [pc, #12]	; (20b9c <flash_nrf_erase+0xb0>)
   20b90:	f004 fa14 	bl	24fbc <z_impl_k_sem_give>
   20b94:	e7c8      	b.n	20b28 <flash_nrf_erase+0x3c>
   20b96:	bf00      	nop
   20b98:	0003651c 	.word	0x0003651c
   20b9c:	20005360 	.word	0x20005360
   20ba0:	00036540 	.word	0x00036540
   20ba4:	00020a75 	.word	0x00020a75
   20ba8:	00015e64 	.word	0x00015e64

00020bac <write_op>:
{
   20bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (w_ctx->enable_time_limit) {
   20bae:	7b03      	ldrb	r3, [r0, #12]
{
   20bb0:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   20bb2:	b10b      	cbz	r3, 20bb8 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   20bb4:	f000 f938 	bl	20e28 <nrf_flash_sync_get_timestamp_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20bb8:	4e1c      	ldr	r6, [pc, #112]	; (20c2c <write_op+0x80>)
	if (pofcon_enabled) {
   20bba:	4f1d      	ldr	r7, [pc, #116]	; (20c30 <write_op+0x84>)
{
   20bbc:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   20bbe:	68a3      	ldr	r3, [r4, #8]
   20bc0:	2b03      	cmp	r3, #3
   20bc2:	d806      	bhi.n	20bd2 <write_op+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   20bc4:	4a1b      	ldr	r2, [pc, #108]	; (20c34 <write_op+0x88>)
   20bc6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   20bca:	07db      	lsls	r3, r3, #31
   20bcc:	d5fb      	bpl.n	20bc6 <write_op+0x1a>
	return FLASH_OP_DONE;
   20bce:	2000      	movs	r0, #0
}
   20bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (var1 == 0x08)
   20bd2:	6833      	ldr	r3, [r6, #0]
   20bd4:	2b08      	cmp	r3, #8
   20bd6:	d021      	beq.n	20c1c <write_op+0x70>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   20bd8:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   20bda:	6860      	ldr	r0, [r4, #4]
   20bdc:	6819      	ldr	r1, [r3, #0]
   20bde:	f002 f929 	bl	22e34 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   20be2:	783b      	ldrb	r3, [r7, #0]
   20be4:	b10b      	cbz	r3, 20bea <write_op+0x3e>
   20be6:	f7ff ff15 	bl	20a14 <restore_pofwarn.part.2>
	w_ctx->flash_addr += shift;
   20bea:	6863      	ldr	r3, [r4, #4]
   20bec:	3304      	adds	r3, #4
   20bee:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   20bf0:	6823      	ldr	r3, [r4, #0]
   20bf2:	3304      	adds	r3, #4
   20bf4:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   20bf6:	68a3      	ldr	r3, [r4, #8]
   20bf8:	3b04      	subs	r3, #4
   20bfa:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   20bfc:	7b23      	ldrb	r3, [r4, #12]
		i++;
   20bfe:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   20c00:	2b00      	cmp	r3, #0
   20c02:	d0dc      	beq.n	20bbe <write_op+0x12>
			if (nrf_flash_sync_check_time_limit(i)) {
   20c04:	4628      	mov	r0, r5
   20c06:	f7e2 fa73 	bl	30f0 <nrf_flash_sync_check_time_limit>
   20c0a:	2800      	cmp	r0, #0
   20c0c:	d0d7      	beq.n	20bbe <write_op+0x12>
   20c0e:	4a09      	ldr	r2, [pc, #36]	; (20c34 <write_op+0x88>)
   20c10:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   20c14:	07d9      	lsls	r1, r3, #31
   20c16:	d5fb      	bpl.n	20c10 <write_op+0x64>
				return FLASH_OP_ONGOING;
   20c18:	2001      	movs	r0, #1
   20c1a:	e7d9      	b.n	20bd0 <write_op+0x24>
                switch(var2)
   20c1c:	f7ff ff0a 	bl	20a34 <suspend_pofwarn.part.1>
		if (SUSPEND_POFWARN()) {
   20c20:	2800      	cmp	r0, #0
   20c22:	d0d9      	beq.n	20bd8 <write_op+0x2c>
			return -ECANCELED;
   20c24:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   20c28:	e7d2      	b.n	20bd0 <write_op+0x24>
   20c2a:	bf00      	nop
   20c2c:	10000130 	.word	0x10000130
   20c30:	2000589d 	.word	0x2000589d
   20c34:	4001e000 	.word	0x4001e000

00020c38 <flash_nrf_write>:
{
   20c38:	b570      	push	{r4, r5, r6, lr}
   20c3a:	460d      	mov	r5, r1
   20c3c:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   20c3e:	4619      	mov	r1, r3
   20c40:	4628      	mov	r0, r5
{
   20c42:	4616      	mov	r6, r2
   20c44:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   20c46:	f00c fdd8 	bl	2d7fa <is_regular_addr_valid>
   20c4a:	b950      	cbnz	r0, 20c62 <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   20c4c:	481d      	ldr	r0, [pc, #116]	; (20cc4 <flash_nrf_write+0x8c>)
   20c4e:	4623      	mov	r3, r4
   20c50:	462a      	mov	r2, r5
   20c52:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   20c54:	f006 fe3d 	bl	278d2 <printk>
		return -EINVAL;
   20c58:	f06f 0415 	mvn.w	r4, #21
}
   20c5c:	4620      	mov	r0, r4
   20c5e:	b006      	add	sp, #24
   20c60:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   20c62:	ea44 0305 	orr.w	r3, r4, r5
   20c66:	079b      	lsls	r3, r3, #30
   20c68:	d004      	beq.n	20c74 <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   20c6a:	4623      	mov	r3, r4
   20c6c:	462a      	mov	r2, r5
   20c6e:	2145      	movs	r1, #69	; 0x45
   20c70:	4815      	ldr	r0, [pc, #84]	; (20cc8 <flash_nrf_write+0x90>)
   20c72:	e7ef      	b.n	20c54 <flash_nrf_write+0x1c>
	if (!len) {
   20c74:	2c00      	cmp	r4, #0
   20c76:	d0f1      	beq.n	20c5c <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
   20c78:	f04f 33ff 	mov.w	r3, #4294967295
   20c7c:	f04f 32ff 	mov.w	r2, #4294967295
   20c80:	4812      	ldr	r0, [pc, #72]	; (20ccc <flash_nrf_write+0x94>)
   20c82:	f004 f9d7 	bl	25034 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   20c86:	f00c fdcb 	bl	2d820 <nrf_flash_sync_is_required>
   20c8a:	ab02      	add	r3, sp, #8
	struct flash_context context = {
   20c8c:	e9cd 6502 	strd	r6, r5, [sp, #8]
   20c90:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   20c92:	b188      	cbz	r0, 20cb8 <flash_nrf_write+0x80>
	struct flash_context context = {
   20c94:	2201      	movs	r2, #1
   20c96:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   20c9a:	4a0d      	ldr	r2, [pc, #52]	; (20cd0 <flash_nrf_write+0x98>)
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   20c9c:	f641 504c 	movw	r0, #7500	; 0x1d4c
	struct flash_op_desc flash_op_desc = {
   20ca0:	e9cd 2300 	strd	r2, r3, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   20ca4:	f000 f8b8 	bl	20e18 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   20ca8:	4668      	mov	r0, sp
   20caa:	f7e2 f9a5 	bl	2ff8 <nrf_flash_sync_exe>
	return write_op(&context);
   20cae:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   20cb0:	4806      	ldr	r0, [pc, #24]	; (20ccc <flash_nrf_write+0x94>)
   20cb2:	f004 f983 	bl	24fbc <z_impl_k_sem_give>
	return ret;
   20cb6:	e7d1      	b.n	20c5c <flash_nrf_write+0x24>
	struct flash_context context = {
   20cb8:	f88d 0014 	strb.w	r0, [sp, #20]
	return write_op(&context);
   20cbc:	4618      	mov	r0, r3
   20cbe:	f7ff ff75 	bl	20bac <write_op>
   20cc2:	e7f4      	b.n	20cae <flash_nrf_write+0x76>
   20cc4:	00036540 	.word	0x00036540
   20cc8:	00036562 	.word	0x00036562
   20ccc:	20005360 	.word	0x20005360
   20cd0:	00020bad 	.word	0x00020bad

00020cd4 <_ticker_stop>:
{
   20cd4:	b513      	push	{r0, r1, r4, lr}
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   20cd6:	2300      	movs	r3, #0
   20cd8:	9300      	str	r3, [sp, #0]
   20cda:	f7f8 fe5f 	bl	1999c <ticker_stop>
	if (ret != TICKER_STATUS_SUCCESS &&
   20cde:	f030 0302 	bics.w	r3, r0, #2
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   20ce2:	4604      	mov	r4, r0
	if (ret != TICKER_STATUS_SUCCESS &&
   20ce4:	d008      	beq.n	20cf8 <_ticker_stop+0x24>
		__ASSERT(0, "Failed to stop ticker.\n");
   20ce6:	4906      	ldr	r1, [pc, #24]	; (20d00 <_ticker_stop+0x2c>)
   20ce8:	4806      	ldr	r0, [pc, #24]	; (20d04 <_ticker_stop+0x30>)
   20cea:	2230      	movs	r2, #48	; 0x30
   20cec:	f006 fdf1 	bl	278d2 <printk>
   20cf0:	2130      	movs	r1, #48	; 0x30
   20cf2:	4803      	ldr	r0, [pc, #12]	; (20d00 <_ticker_stop+0x2c>)
   20cf4:	f007 f866 	bl	27dc4 <assert_post_action>
}
   20cf8:	4620      	mov	r0, r4
   20cfa:	b002      	add	sp, #8
   20cfc:	bd10      	pop	{r4, pc}
   20cfe:	bf00      	nop
   20d00:	000365c3 	.word	0x000365c3
   20d04:	0003067f 	.word	0x0003067f

00020d08 <time_slot_delay>:
{
   20d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d0c:	b08c      	sub	sp, #48	; 0x30
   20d0e:	4605      	mov	r5, r0
   20d10:	460e      	mov	r6, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   20d12:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   20d16:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   20d1a:	4617      	mov	r7, r2
   20d1c:	4698      	mov	r8, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   20d1e:	f00b fe1a 	bl	2c956 <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   20d22:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   20d26:	9600      	str	r6, [sp, #0]
   20d28:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   20d2a:	3101      	adds	r1, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   20d2c:	462b      	mov	r3, r5
   20d2e:	b2ca      	uxtb	r2, r1
   20d30:	e9cd 4407 	strd	r4, r4, [sp, #28]
   20d34:	e9cd 7805 	strd	r7, r8, [sp, #20]
   20d38:	e9cd 4403 	strd	r4, r4, [sp, #12]
   20d3c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20d40:	4621      	mov	r1, r4
   20d42:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   20d46:	f00b fd46 	bl	2c7d6 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   20d4a:	f030 0302 	bics.w	r3, r0, #2
   20d4e:	d00b      	beq.n	20d68 <time_slot_delay+0x60>
		_ticker_sync_context.result = 0;
   20d50:	4b07      	ldr	r3, [pc, #28]	; (20d70 <time_slot_delay+0x68>)
		_ticker_stop(instance_index, 0, ticker_id);
   20d52:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   20d56:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
		_ticker_sync_context.result = 0;
   20d5a:	60dc      	str	r4, [r3, #12]
		_ticker_stop(instance_index, 0, ticker_id);
   20d5c:	4621      	mov	r1, r4
   20d5e:	f7ff ffb9 	bl	20cd4 <_ticker_stop>
   20d62:	4804      	ldr	r0, [pc, #16]	; (20d74 <time_slot_delay+0x6c>)
   20d64:	f004 f92a 	bl	24fbc <z_impl_k_sem_give>
}
   20d68:	b00c      	add	sp, #48	; 0x30
   20d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20d6e:	bf00      	nop
   20d70:	20005378 	.word	0x20005378
   20d74:	20005388 	.word	0x20005388

00020d78 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   20d78:	4a01      	ldr	r2, [pc, #4]	; (20d80 <time_slot_callback_prepare+0x8>)
   20d7a:	2131      	movs	r1, #49	; 0x31
   20d7c:	f7ff bfc4 	b.w	20d08 <time_slot_delay>
   20d80:	00020d85 	.word	0x00020d85

00020d84 <time_slot_callback_abort>:
{
   20d84:	b570      	push	{r4, r5, r6, lr}
   20d86:	4604      	mov	r4, r0
   20d88:	461d      	mov	r5, r3
	ll_radio_state_abort();
   20d8a:	f7fa fa15 	bl	1b1b8 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   20d8e:	462b      	mov	r3, r5
   20d90:	4620      	mov	r0, r4
   20d92:	4a03      	ldr	r2, [pc, #12]	; (20da0 <time_slot_callback_abort+0x1c>)
   20d94:	2106      	movs	r1, #6
}
   20d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   20d9a:	f7ff bfb5 	b.w	20d08 <time_slot_delay>
   20d9e:	bf00      	nop
   20da0:	00020da5 	.word	0x00020da5

00020da4 <time_slot_callback_work>:
{
   20da4:	b513      	push	{r0, r1, r4, lr}
   20da6:	461c      	mov	r4, r3
	__ASSERT(ll_radio_state_is_idle(),
   20da8:	f00b fdda 	bl	2c960 <ll_radio_state_is_idle>
   20dac:	b940      	cbnz	r0, 20dc0 <time_slot_callback_work+0x1c>
   20dae:	4911      	ldr	r1, [pc, #68]	; (20df4 <time_slot_callback_work+0x50>)
   20db0:	4811      	ldr	r0, [pc, #68]	; (20df8 <time_slot_callback_work+0x54>)
   20db2:	2240      	movs	r2, #64	; 0x40
   20db4:	f006 fd8d 	bl	278d2 <printk>
   20db8:	2140      	movs	r1, #64	; 0x40
   20dba:	480e      	ldr	r0, [pc, #56]	; (20df4 <time_slot_callback_work+0x50>)
   20dbc:	f007 f802 	bl	27dc4 <assert_post_action>
	rc = op_desc->handler(op_desc->context);
   20dc0:	e9d4 3000 	ldrd	r3, r0, [r4]
   20dc4:	4798      	blx	r3
	if (rc != FLASH_OP_ONGOING) {
   20dc6:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   20dc8:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   20dca:	d011      	beq.n	20df0 <time_slot_callback_work+0x4c>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   20dcc:	f10d 0107 	add.w	r1, sp, #7
   20dd0:	f10d 0006 	add.w	r0, sp, #6
   20dd4:	f00b fdbf 	bl	2c956 <ll_timeslice_ticker_id_get>
		_ticker_stop(instance_index, 0, ticker_id);
   20dd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   20ddc:	f89d 0006 	ldrb.w	r0, [sp, #6]
   20de0:	2100      	movs	r1, #0
   20de2:	f7ff ff77 	bl	20cd4 <_ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   20de6:	4b05      	ldr	r3, [pc, #20]	; (20dfc <time_slot_callback_work+0x58>)
   20de8:	60dc      	str	r4, [r3, #12]
   20dea:	4805      	ldr	r0, [pc, #20]	; (20e00 <time_slot_callback_work+0x5c>)
   20dec:	f004 f8e6 	bl	24fbc <z_impl_k_sem_give>
}
   20df0:	b002      	add	sp, #8
   20df2:	bd10      	pop	{r4, pc}
   20df4:	000365c3 	.word	0x000365c3
   20df8:	0003067f 	.word	0x0003067f
   20dfc:	20005378 	.word	0x20005378
   20e00:	20005388 	.word	0x20005388

00020e04 <nrf_flash_sync_init>:
{
   20e04:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   20e06:	2201      	movs	r2, #1
   20e08:	2100      	movs	r1, #0
   20e0a:	4802      	ldr	r0, [pc, #8]	; (20e14 <nrf_flash_sync_init+0x10>)
   20e0c:	f00d f919 	bl	2e042 <z_impl_k_sem_init>
}
   20e10:	2000      	movs	r0, #0
   20e12:	bd08      	pop	{r3, pc}
   20e14:	20005388 	.word	0x20005388

00020e18 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   20e18:	4b02      	ldr	r3, [pc, #8]	; (20e24 <nrf_flash_sync_set_context+0xc>)
   20e1a:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   20e1e:	e9c3 2000 	strd	r2, r0, [r3]
}
   20e22:	4770      	bx	lr
   20e24:	20005378 	.word	0x20005378

00020e28 <nrf_flash_sync_get_timestamp_begin>:
{
   20e28:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   20e2a:	f00b fd07 	bl	2c83c <ticker_ticks_now_get>
   20e2e:	4b01      	ldr	r3, [pc, #4]	; (20e34 <nrf_flash_sync_get_timestamp_begin+0xc>)
   20e30:	6098      	str	r0, [r3, #8]
}
   20e32:	bd08      	pop	{r3, pc}
   20e34:	20005378 	.word	0x20005378

00020e38 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   20e38:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   20e3a:	794b      	ldrb	r3, [r1, #5]
   20e3c:	2b01      	cmp	r3, #1
   20e3e:	d027      	beq.n	20e90 <uarte_nrfx_configure+0x58>
   20e40:	2b03      	cmp	r3, #3
   20e42:	d122      	bne.n	20e8a <uarte_nrfx_configure+0x52>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   20e44:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   20e46:	798b      	ldrb	r3, [r1, #6]
   20e48:	2b03      	cmp	r3, #3
   20e4a:	d11e      	bne.n	20e8a <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   20e4c:	79cc      	ldrb	r4, [r1, #7]
   20e4e:	b124      	cbz	r4, 20e5a <uarte_nrfx_configure+0x22>
   20e50:	2c01      	cmp	r4, #1
   20e52:	d11a      	bne.n	20e8a <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   20e54:	6843      	ldr	r3, [r0, #4]
   20e56:	791b      	ldrb	r3, [r3, #4]
   20e58:	b1bb      	cbz	r3, 20e8a <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   20e5a:	790a      	ldrb	r2, [r1, #4]
   20e5c:	b112      	cbz	r2, 20e64 <uarte_nrfx_configure+0x2c>
   20e5e:	2a02      	cmp	r2, #2
   20e60:	d113      	bne.n	20e8a <uarte_nrfx_configure+0x52>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   20e62:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   20e64:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   20e66:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   20e68:	f647 2712 	movw	r7, #31250	; 0x7a12
   20e6c:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   20e6e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   20e70:	d063      	beq.n	20f3a <uarte_nrfx_configure+0x102>
   20e72:	d829      	bhi.n	20ec8 <uarte_nrfx_configure+0x90>
   20e74:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   20e78:	d062      	beq.n	20f40 <uarte_nrfx_configure+0x108>
   20e7a:	d814      	bhi.n	20ea6 <uarte_nrfx_configure+0x6e>
   20e7c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   20e80:	d060      	beq.n	20f44 <uarte_nrfx_configure+0x10c>
   20e82:	d807      	bhi.n	20e94 <uarte_nrfx_configure+0x5c>
   20e84:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   20e88:	d05f      	beq.n	20f4a <uarte_nrfx_configure+0x112>
		return -ENOTSUP;
   20e8a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20e8e:	e053      	b.n	20f38 <uarte_nrfx_configure+0x100>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   20e90:	2600      	movs	r6, #0
   20e92:	e7d8      	b.n	20e46 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   20e94:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   20e98:	d05a      	beq.n	20f50 <uarte_nrfx_configure+0x118>
   20e9a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   20e9e:	d1f4      	bne.n	20e8a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   20ea0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   20ea4:	e03c      	b.n	20f20 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   20ea6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   20eaa:	d054      	beq.n	20f56 <uarte_nrfx_configure+0x11e>
   20eac:	d804      	bhi.n	20eb8 <uarte_nrfx_configure+0x80>
   20eae:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   20eb2:	d1ea      	bne.n	20e8a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   20eb4:	4b33      	ldr	r3, [pc, #204]	; (20f84 <uarte_nrfx_configure+0x14c>)
   20eb6:	e033      	b.n	20f20 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   20eb8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   20ebc:	d04d      	beq.n	20f5a <uarte_nrfx_configure+0x122>
   20ebe:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   20ec2:	d1e2      	bne.n	20e8a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   20ec4:	4b30      	ldr	r3, [pc, #192]	; (20f88 <uarte_nrfx_configure+0x150>)
   20ec6:	e02b      	b.n	20f20 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   20ec8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   20ecc:	d047      	beq.n	20f5e <uarte_nrfx_configure+0x126>
   20ece:	d812      	bhi.n	20ef6 <uarte_nrfx_configure+0xbe>
   20ed0:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   20ed4:	42bb      	cmp	r3, r7
   20ed6:	d045      	beq.n	20f64 <uarte_nrfx_configure+0x12c>
   20ed8:	d805      	bhi.n	20ee6 <uarte_nrfx_configure+0xae>
   20eda:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   20ede:	d1d4      	bne.n	20e8a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   20ee0:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   20ee4:	e01c      	b.n	20f20 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   20ee6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   20eea:	d03e      	beq.n	20f6a <uarte_nrfx_configure+0x132>
   20eec:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   20ef0:	d1cb      	bne.n	20e8a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   20ef2:	4b26      	ldr	r3, [pc, #152]	; (20f8c <uarte_nrfx_configure+0x154>)
   20ef4:	e014      	b.n	20f20 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   20ef6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   20efa:	d039      	beq.n	20f70 <uarte_nrfx_configure+0x138>
   20efc:	d808      	bhi.n	20f10 <uarte_nrfx_configure+0xd8>
   20efe:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   20f02:	d038      	beq.n	20f76 <uarte_nrfx_configure+0x13e>
   20f04:	4f22      	ldr	r7, [pc, #136]	; (20f90 <uarte_nrfx_configure+0x158>)
   20f06:	42bb      	cmp	r3, r7
   20f08:	d1bf      	bne.n	20e8a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   20f0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   20f0e:	e007      	b.n	20f20 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   20f10:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   20f14:	d032      	beq.n	20f7c <uarte_nrfx_configure+0x144>
   20f16:	4f1f      	ldr	r7, [pc, #124]	; (20f94 <uarte_nrfx_configure+0x15c>)
   20f18:	42bb      	cmp	r3, r7
   20f1a:	d1b6      	bne.n	20e8a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   20f1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   20f20:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   20f24:	68c3      	ldr	r3, [r0, #12]
   20f26:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   20f28:	4334      	orrs	r4, r6
   20f2a:	4322      	orrs	r2, r4
   20f2c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   20f2e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   20f32:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   20f36:	2000      	movs	r0, #0
}
   20f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   20f3a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   20f3e:	e7ef      	b.n	20f20 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   20f40:	4b15      	ldr	r3, [pc, #84]	; (20f98 <uarte_nrfx_configure+0x160>)
   20f42:	e7ed      	b.n	20f20 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
   20f44:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   20f48:	e7ea      	b.n	20f20 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
   20f4a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   20f4e:	e7e7      	b.n	20f20 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   20f50:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   20f54:	e7e4      	b.n	20f20 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   20f56:	4b11      	ldr	r3, [pc, #68]	; (20f9c <uarte_nrfx_configure+0x164>)
   20f58:	e7e2      	b.n	20f20 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   20f5a:	4b11      	ldr	r3, [pc, #68]	; (20fa0 <uarte_nrfx_configure+0x168>)
   20f5c:	e7e0      	b.n	20f20 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   20f5e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   20f62:	e7dd      	b.n	20f20 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   20f64:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   20f68:	e7da      	b.n	20f20 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   20f6a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   20f6e:	e7d7      	b.n	20f20 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   20f70:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   20f74:	e7d4      	b.n	20f20 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   20f76:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   20f7a:	e7d1      	b.n	20f20 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   20f7c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   20f80:	e7ce      	b.n	20f20 <uarte_nrfx_configure+0xe8>
   20f82:	bf00      	nop
   20f84:	00275000 	.word	0x00275000
   20f88:	0075c000 	.word	0x0075c000
   20f8c:	013a9000 	.word	0x013a9000
   20f90:	0003d090 	.word	0x0003d090
   20f94:	000f4240 	.word	0x000f4240
   20f98:	0013b000 	.word	0x0013b000
   20f9c:	003af000 	.word	0x003af000
   20fa0:	004ea000 	.word	0x004ea000

00020fa4 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20fa4:	6802      	ldr	r2, [r0, #0]
    switch (port)
   20fa6:	0953      	lsrs	r3, r2, #5
{
   20fa8:	b510      	push	{r4, lr}
   20faa:	4604      	mov	r4, r0
    switch (port)
   20fac:	d02a      	beq.n	21004 <nrf_gpio_pin_port_decode+0x60>
   20fae:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   20fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20fb4:	bf18      	it	ne
   20fb6:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   20fb8:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20fbc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20fbe:	07db      	lsls	r3, r3, #31
   20fc0:	d40a      	bmi.n	20fd8 <nrf_gpio_pin_port_decode+0x34>
   20fc2:	4913      	ldr	r1, [pc, #76]	; (21010 <nrf_gpio_pin_port_decode+0x6c>)
   20fc4:	4813      	ldr	r0, [pc, #76]	; (21014 <nrf_gpio_pin_port_decode+0x70>)
   20fc6:	f240 221a 	movw	r2, #538	; 0x21a
   20fca:	f006 fc82 	bl	278d2 <printk>
   20fce:	f240 211a 	movw	r1, #538	; 0x21a
   20fd2:	480f      	ldr	r0, [pc, #60]	; (21010 <nrf_gpio_pin_port_decode+0x6c>)
   20fd4:	f006 fef6 	bl	27dc4 <assert_post_action>
    uint32_t pin_number = *p_pin;
   20fd8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   20fda:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20fde:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   20fe0:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20fe2:	d00c      	beq.n	20ffe <nrf_gpio_pin_port_decode+0x5a>
   20fe4:	2b01      	cmp	r3, #1
   20fe6:	d010      	beq.n	2100a <nrf_gpio_pin_port_decode+0x66>
            NRFX_ASSERT(0);
   20fe8:	4909      	ldr	r1, [pc, #36]	; (21010 <nrf_gpio_pin_port_decode+0x6c>)
   20fea:	480a      	ldr	r0, [pc, #40]	; (21014 <nrf_gpio_pin_port_decode+0x70>)
   20fec:	f240 221f 	movw	r2, #543	; 0x21f
   20ff0:	f006 fc6f 	bl	278d2 <printk>
   20ff4:	f240 211f 	movw	r1, #543	; 0x21f
   20ff8:	4805      	ldr	r0, [pc, #20]	; (21010 <nrf_gpio_pin_port_decode+0x6c>)
   20ffa:	f006 fee3 	bl	27dc4 <assert_post_action>
        case 0: return NRF_P0;
   20ffe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   21002:	bd10      	pop	{r4, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   21004:	f04f 33ff 	mov.w	r3, #4294967295
   21008:	e7d6      	b.n	20fb8 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   2100a:	4803      	ldr	r0, [pc, #12]	; (21018 <nrf_gpio_pin_port_decode+0x74>)
   2100c:	e7f9      	b.n	21002 <nrf_gpio_pin_port_decode+0x5e>
   2100e:	bf00      	nop
   21010:	0003635f 	.word	0x0003635f
   21014:	0003067f 	.word	0x0003067f
   21018:	50000300 	.word	0x50000300

0002101c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   2101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21020:	4606      	mov	r6, r0
   21022:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   21024:	68c5      	ldr	r5, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   21026:	f00d f81c 	bl	2e062 <k_is_in_isr>
   2102a:	b9b8      	cbnz	r0, 2105c <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   2102c:	4b29      	ldr	r3, [pc, #164]	; (210d4 <uarte_nrfx_poll_out+0xb8>)
   2102e:	781b      	ldrb	r3, [r3, #0]
   21030:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   21034:	6872      	ldr	r2, [r6, #4]
   21036:	6814      	ldr	r4, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   21038:	b193      	cbz	r3, 21060 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   2103a:	f04f 0320 	mov.w	r3, #32
   2103e:	f3ef 8111 	mrs	r1, BASEPRI
   21042:	f383 8811 	msr	BASEPRI, r3
   21046:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   2104a:	4630      	mov	r0, r6
   2104c:	f00c fc8c 	bl	2d968 <is_tx_ready>
   21050:	bb48      	cbnz	r0, 210a6 <uarte_nrfx_poll_out+0x8a>
	__asm__ volatile(
   21052:	f381 8811 	msr	BASEPRI, r1
   21056:	f3bf 8f6f 	isb	sy
   2105a:	e7ee      	b.n	2103a <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2105c:	2301      	movs	r3, #1
   2105e:	e7e9      	b.n	21034 <uarte_nrfx_poll_out+0x18>
   21060:	f04f 0864 	mov.w	r8, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   21064:	4630      	mov	r0, r6
   21066:	f00c fc7f 	bl	2d968 <is_tx_ready>
   2106a:	b978      	cbnz	r0, 2108c <uarte_nrfx_poll_out+0x70>
   2106c:	2001      	movs	r0, #1
   2106e:	f00c fed9 	bl	2de24 <nrfx_busy_wait>
   21072:	f1b8 0801 	subs.w	r8, r8, #1
   21076:	d1f5      	bne.n	21064 <uarte_nrfx_poll_out+0x48>
	return z_impl_k_sleep(timeout);
   21078:	2100      	movs	r1, #0
   2107a:	2021      	movs	r0, #33	; 0x21
   2107c:	f003 ff4c 	bl	24f18 <z_impl_k_sleep>
   21080:	e7ee      	b.n	21060 <uarte_nrfx_poll_out+0x44>
   21082:	f381 8811 	msr	BASEPRI, r1
   21086:	f3bf 8f6f 	isb	sy
   2108a:	e7f5      	b.n	21078 <uarte_nrfx_poll_out+0x5c>
	__asm__ volatile(
   2108c:	f04f 0320 	mov.w	r3, #32
   21090:	f3ef 8111 	mrs	r1, BASEPRI
   21094:	f383 8811 	msr	BASEPRI, r3
   21098:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2109c:	4630      	mov	r0, r6
   2109e:	f00c fc63 	bl	2d968 <is_tx_ready>
   210a2:	2800      	cmp	r0, #0
   210a4:	d0ed      	beq.n	21082 <uarte_nrfx_poll_out+0x66>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   210a6:	f805 7f10 	strb.w	r7, [r5, #16]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   210aa:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   210ac:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   210ae:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   210b2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   210b6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   210ba:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
   210be:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   210c2:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   210c6:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   210c8:	f381 8811 	msr	BASEPRI, r1
   210cc:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   210d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   210d4:	2000589e 	.word	0x2000589e

000210d8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   210d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210dc:	2200      	movs	r2, #0
   210de:	2101      	movs	r1, #1
   210e0:	4606      	mov	r6, r0
   210e2:	2002      	movs	r0, #2
   210e4:	f7e6 fd0c 	bl	7b00 <z_arm_irq_priority_set>
   210e8:	2002      	movs	r0, #2
   210ea:	f7e6 fcd7 	bl	7a9c <arch_irq_enable>
	return config->uarte_regs;
   210ee:	6873      	ldr	r3, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   210f0:	68f5      	ldr	r5, [r6, #12]
	return config->uarte_regs;
   210f2:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   210f4:	f04f 0800 	mov.w	r8, #0
   210f8:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
	data->dev = dev;
   210fc:	f04f 0914 	mov.w	r9, #20
   21100:	602e      	str	r6, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21102:	a801      	add	r0, sp, #4
   21104:	f8cd 9004 	str.w	r9, [sp, #4]
   21108:	f7ff ff4c 	bl	20fa4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2110c:	9b01      	ldr	r3, [sp, #4]
   2110e:	2701      	movs	r7, #1
   21110:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   21114:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21118:	a801      	add	r0, sp, #4
   2111a:	f8cd 9004 	str.w	r9, [sp, #4]
   2111e:	f7ff ff41 	bl	20fa4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21122:	9b01      	ldr	r3, [sp, #4]
   21124:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21128:	f04f 0a03 	mov.w	sl, #3
   2112c:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   21130:	f04f 0b18 	mov.w	fp, #24
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21134:	a801      	add	r0, sp, #4
   21136:	f8cd b004 	str.w	fp, [sp, #4]
   2113a:	f7ff ff33 	bl	20fa4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2113e:	9b01      	ldr	r3, [sp, #4]
   21140:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21144:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   21148:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2114c:	a801      	add	r0, sp, #4
    p_reg->PSEL.RXD = pselrxd;
   2114e:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    nrf_gpio_cfg(
   21152:	f04f 0916 	mov.w	r9, #22
   21156:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2115a:	f7ff ff23 	bl	20fa4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2115e:	9b01      	ldr	r3, [sp, #4]
   21160:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21164:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   21168:	f04f 0811 	mov.w	r8, #17
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2116c:	a801      	add	r0, sp, #4
   2116e:	f8cd 8004 	str.w	r8, [sp, #4]
   21172:	f7ff ff17 	bl	20fa4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21176:	9b01      	ldr	r3, [sp, #4]
   21178:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   2117c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21180:	a801      	add	r0, sp, #4
   21182:	f8cd 8004 	str.w	r8, [sp, #4]
   21186:	f7ff ff0d 	bl	20fa4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2118a:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2118c:	68f1      	ldr	r1, [r6, #12]
   2118e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21192:	3104      	adds	r1, #4
   21194:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   21198:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   2119c:	4630      	mov	r0, r6
    p_reg->PSEL.CTS = pselcts;
   2119e:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   211a2:	f7ff fe49 	bl	20e38 <uarte_nrfx_configure>
	if (err) {
   211a6:	4680      	mov	r8, r0
   211a8:	b978      	cbnz	r0, 211ca <uarte_0_init+0xf2>
	if (get_dev_config(dev)->ppi_endtx) {
   211aa:	6873      	ldr	r3, [r6, #4]
   211ac:	799b      	ldrb	r3, [r3, #6]
   211ae:	b313      	cbz	r3, 211f6 <uarte_0_init+0x11e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   211b0:	f105 0012 	add.w	r0, r5, #18
   211b4:	f001 fe70 	bl	22e98 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   211b8:	4b1f      	ldr	r3, [pc, #124]	; (21238 <uarte_0_init+0x160>)
   211ba:	4298      	cmp	r0, r3
   211bc:	d009      	beq.n	211d2 <uarte_0_init+0xfa>
		LOG_ERR("Failed to allocate PPI Channel");
   211be:	2145      	movs	r1, #69	; 0x45
   211c0:	481e      	ldr	r0, [pc, #120]	; (2123c <uarte_0_init+0x164>)
   211c2:	f006 fb86 	bl	278d2 <printk>
		return -EIO;
   211c6:	f06f 0804 	mvn.w	r8, #4
UART_NRF_UARTE_DEVICE(0);
   211ca:	4640      	mov	r0, r8
   211cc:	b003      	add	sp, #12
   211ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   211d2:	7ca8      	ldrb	r0, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   211d4:	00c3      	lsls	r3, r0, #3
   211d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   211da:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   211de:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   211e2:	f104 020c 	add.w	r2, r4, #12
    p_reg->CH[(uint32_t) channel].EEP = eep;
   211e6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   211ea:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   211ee:	4b14      	ldr	r3, [pc, #80]	; (21240 <uarte_0_init+0x168>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   211f0:	4087      	lsls	r7, r0
   211f2:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   211f6:	2308      	movs	r3, #8
   211f8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   211fc:	2300      	movs	r3, #0
   211fe:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   21202:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   21206:	f105 0311 	add.w	r3, r5, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2120a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2120e:	2301      	movs	r3, #1
   21210:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21214:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   21216:	6873      	ldr	r3, [r6, #4]
   21218:	799b      	ldrb	r3, [r3, #6]
   2121a:	b91b      	cbnz	r3, 21224 <uarte_0_init+0x14c>
    p_reg->INTENSET = mask;
   2121c:	f44f 7380 	mov.w	r3, #256	; 0x100
   21220:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   21224:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   21226:	3510      	adds	r5, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21228:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2122c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21230:	2301      	movs	r3, #1
   21232:	60a3      	str	r3, [r4, #8]
   21234:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   21236:	e7c8      	b.n	211ca <uarte_0_init+0xf2>
   21238:	0bad0000 	.word	0x0bad0000
   2123c:	0003660b 	.word	0x0003660b
   21240:	4001f000 	.word	0x4001f000

00021244 <random_byte_get>:
	__asm__ volatile(
   21244:	f04f 0320 	mov.w	r3, #32
   21248:	f3ef 8211 	mrs	r2, BASEPRI
   2124c:	f383 8811 	msr	BASEPRI, r3
   21250:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   21254:	4b08      	ldr	r3, [pc, #32]	; (21278 <random_byte_get+0x34>)
   21256:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   21258:	b159      	cbz	r1, 21272 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   2125a:	4908      	ldr	r1, [pc, #32]	; (2127c <random_byte_get+0x38>)
   2125c:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21260:	2100      	movs	r1, #0
   21262:	6019      	str	r1, [r3, #0]
   21264:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   21266:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   21268:	f382 8811 	msr	BASEPRI, r2
   2126c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   21270:	4770      	bx	lr
	int retval = -EAGAIN;
   21272:	f06f 000a 	mvn.w	r0, #10
   21276:	e7f7      	b.n	21268 <random_byte_get+0x24>
   21278:	4000d100 	.word	0x4000d100
   2127c:	4000d000 	.word	0x4000d000

00021280 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   21280:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t last  = rngp->last;
   21282:	7883      	ldrb	r3, [r0, #2]
	uint32_t mask  = rngp->mask;
   21284:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   21286:	f04f 0420 	mov.w	r4, #32
   2128a:	f3ef 8e11 	mrs	lr, BASEPRI
   2128e:	f384 8811 	msr	BASEPRI, r4
   21292:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   21296:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   21298:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   2129c:	1b9b      	subs	r3, r3, r6
   2129e:	403b      	ands	r3, r7
	if (available < len) {
   212a0:	429a      	cmp	r2, r3
		len = available;
   212a2:	bf88      	it	hi
   212a4:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   212a6:	18b4      	adds	r4, r6, r2
   212a8:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   212aa:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   212ac:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
   212ae:	f38e 8811 	msr	BASEPRI, lr
   212b2:	f3bf 8f6f 	isb	sy
   212b6:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   212b8:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   212ba:	42a2      	cmp	r2, r4
   212bc:	d11a      	bne.n	212f4 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   212be:	4566      	cmp	r6, ip
   212c0:	d10d      	bne.n	212de <rng_pool_get+0x5e>
	__asm__ volatile(
   212c2:	f04f 0520 	mov.w	r5, #32
   212c6:	f3ef 8211 	mrs	r2, BASEPRI
   212ca:	f385 8811 	msr	BASEPRI, r5
   212ce:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   212d2:	7805      	ldrb	r5, [r0, #0]
   212d4:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
   212d6:	f382 8811 	msr	BASEPRI, r2
   212da:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   212de:	1a64      	subs	r4, r4, r1
   212e0:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   212e2:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   212e4:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   212e6:	42a1      	cmp	r1, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   212e8:	bf22      	ittt	cs
   212ea:	4b07      	ldrcs	r3, [pc, #28]	; (21308 <rng_pool_get+0x88>)
   212ec:	2101      	movcs	r1, #1
   212ee:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   212f0:	4610      	mov	r0, r2
   212f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   212f4:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   212f8:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   212fa:	f89e e005 	ldrb.w	lr, [lr, #5]
   212fe:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   21302:	403d      	ands	r5, r7
   21304:	e7d9      	b.n	212ba <rng_pool_get+0x3a>
   21306:	bf00      	nop
   21308:	4000d000 	.word	0x4000d000

0002130c <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   2130c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21310:	4614      	mov	r4, r2
   21312:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   21314:	68c2      	ldr	r2, [r0, #12]
   21316:	4b2c      	ldr	r3, [pc, #176]	; (213c8 <entropy_nrf5_get_entropy_isr+0xbc>)
   21318:	429a      	cmp	r2, r3
{
   2131a:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   2131c:	d00a      	beq.n	21334 <entropy_nrf5_get_entropy_isr+0x28>
   2131e:	492b      	ldr	r1, [pc, #172]	; (213cc <entropy_nrf5_get_entropy_isr+0xc0>)
   21320:	482b      	ldr	r0, [pc, #172]	; (213d0 <entropy_nrf5_get_entropy_isr+0xc4>)
   21322:	f44f 7284 	mov.w	r2, #264	; 0x108
   21326:	f006 fad4 	bl	278d2 <printk>
   2132a:	f44f 7184 	mov.w	r1, #264	; 0x108
   2132e:	4827      	ldr	r0, [pc, #156]	; (213cc <entropy_nrf5_get_entropy_isr+0xc0>)
   21330:	f006 fd48 	bl	27dc4 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   21334:	07eb      	lsls	r3, r5, #31
   21336:	d406      	bmi.n	21346 <entropy_nrf5_get_entropy_isr+0x3a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   21338:	4622      	mov	r2, r4
   2133a:	4641      	mov	r1, r8
   2133c:	4825      	ldr	r0, [pc, #148]	; (213d4 <entropy_nrf5_get_entropy_isr+0xc8>)
   2133e:	f7ff ff9f 	bl	21280 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   21342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   21346:	2c00      	cmp	r4, #0
   21348:	d035      	beq.n	213b6 <entropy_nrf5_get_entropy_isr+0xaa>
	__asm__ volatile(
   2134a:	f04f 0320 	mov.w	r3, #32
   2134e:	f3ef 8511 	mrs	r5, BASEPRI
   21352:	f383 8811 	msr	BASEPRI, r3
   21356:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   2135a:	200d      	movs	r0, #13
   2135c:	f7e6 fbc2 	bl	7ae4 <arch_irq_is_enabled>
   21360:	4681      	mov	r9, r0
		irq_disable(IRQN);
   21362:	200d      	movs	r0, #13
   21364:	f7e6 fbaa 	bl	7abc <arch_irq_disable>
	__asm__ volatile(
   21368:	f385 8811 	msr	BASEPRI, r5
   2136c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21370:	4919      	ldr	r1, [pc, #100]	; (213d8 <entropy_nrf5_get_entropy_isr+0xcc>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21372:	4e1a      	ldr	r6, [pc, #104]	; (213dc <entropy_nrf5_get_entropy_isr+0xd0>)
   21374:	2300      	movs	r3, #0
   21376:	600b      	str	r3, [r1, #0]
   21378:	680b      	ldr	r3, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2137a:	4b19      	ldr	r3, [pc, #100]	; (213e0 <entropy_nrf5_get_entropy_isr+0xd4>)
   2137c:	2201      	movs	r2, #1
   2137e:	f44f 5700 	mov.w	r7, #8192	; 0x2000
   21382:	601a      	str	r2, [r3, #0]
   21384:	4625      	mov	r5, r4
   21386:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2138a:	468a      	mov	sl, r1
   2138c:	f8da 3000 	ldr.w	r3, [sl]
			while (!nrf_rng_event_check(NRF_RNG,
   21390:	b19b      	cbz	r3, 213ba <entropy_nrf5_get_entropy_isr+0xae>
			byte = random_byte_get();
   21392:	f7ff ff57 	bl	21244 <random_byte_get>
			if (byte < 0) {
   21396:	2800      	cmp	r0, #0
   21398:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
   2139c:	dbf6      	blt.n	2138c <entropy_nrf5_get_entropy_isr+0x80>
   2139e:	3d01      	subs	r5, #1
   213a0:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   213a2:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
   213a6:	2d00      	cmp	r5, #0
   213a8:	d1f0      	bne.n	2138c <entropy_nrf5_get_entropy_isr+0x80>
		if (irq_enabled) {
   213aa:	f1b9 0f00 	cmp.w	r9, #0
   213ae:	d002      	beq.n	213b6 <entropy_nrf5_get_entropy_isr+0xaa>
			irq_enable(IRQN);
   213b0:	200d      	movs	r0, #13
   213b2:	f7e6 fb73 	bl	7a9c <arch_irq_enable>
	return cnt;
   213b6:	4620      	mov	r0, r4
   213b8:	e7c3      	b.n	21342 <entropy_nrf5_get_entropy_isr+0x36>
   213ba:	f3bf 8f4f 	dsb	sy
				__WFE();
   213be:	bf20      	wfe
				__SEV();
   213c0:	bf40      	sev
				__WFE();
   213c2:	bf20      	wfe
   213c4:	e7e2      	b.n	2138c <entropy_nrf5_get_entropy_isr+0x80>
   213c6:	bf00      	nop
   213c8:	200053a0 	.word	0x200053a0
   213cc:	0003662f 	.word	0x0003662f
   213d0:	0003067f 	.word	0x0003067f
   213d4:	200053d0 	.word	0x200053d0
   213d8:	4000d100 	.word	0x4000d100
   213dc:	e000e100 	.word	0xe000e100
   213e0:	4000d000 	.word	0x4000d000

000213e4 <entropy_nrf5_get_entropy>:
{
   213e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   213e8:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   213ea:	4b1a      	ldr	r3, [pc, #104]	; (21454 <entropy_nrf5_get_entropy+0x70>)
   213ec:	68c2      	ldr	r2, [r0, #12]
   213ee:	429a      	cmp	r2, r3
{
   213f0:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   213f2:	d008      	beq.n	21406 <entropy_nrf5_get_entropy+0x22>
   213f4:	4918      	ldr	r1, [pc, #96]	; (21458 <entropy_nrf5_get_entropy+0x74>)
   213f6:	4819      	ldr	r0, [pc, #100]	; (2145c <entropy_nrf5_get_entropy+0x78>)
   213f8:	22ea      	movs	r2, #234	; 0xea
   213fa:	f006 fa6a 	bl	278d2 <printk>
   213fe:	21ea      	movs	r1, #234	; 0xea
   21400:	4815      	ldr	r0, [pc, #84]	; (21458 <entropy_nrf5_get_entropy+0x74>)
   21402:	f006 fcdf 	bl	27dc4 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   21406:	4d13      	ldr	r5, [pc, #76]	; (21454 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   21408:	f105 0845 	add.w	r8, r5, #69	; 0x45
   2140c:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   21410:	b914      	cbnz	r4, 21418 <entropy_nrf5_get_entropy+0x34>
}
   21412:	4620      	mov	r0, r4
   21414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21418:	f04f 33ff 	mov.w	r3, #4294967295
   2141c:	f04f 32ff 	mov.w	r2, #4294967295
   21420:	4628      	mov	r0, r5
   21422:	f003 fe07 	bl	25034 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   21426:	4622      	mov	r2, r4
   21428:	4631      	mov	r1, r6
   2142a:	4640      	mov	r0, r8
   2142c:	f7ff ff28 	bl	21280 <rng_pool_get>
   21430:	4607      	mov	r7, r0
	z_impl_k_sem_give(sem);
   21432:	4628      	mov	r0, r5
   21434:	f003 fdc2 	bl	24fbc <z_impl_k_sem_give>
		if (bytes == 0U) {
   21438:	b93f      	cbnz	r7, 2144a <entropy_nrf5_get_entropy+0x66>
	return z_impl_k_sem_take(sem, timeout);
   2143a:	f04f 32ff 	mov.w	r2, #4294967295
   2143e:	f04f 33ff 	mov.w	r3, #4294967295
   21442:	4648      	mov	r0, r9
   21444:	f003 fdf6 	bl	25034 <z_impl_k_sem_take>
			continue;
   21448:	e7e2      	b.n	21410 <entropy_nrf5_get_entropy+0x2c>
		len -= bytes;
   2144a:	1be4      	subs	r4, r4, r7
   2144c:	b2a4      	uxth	r4, r4
		buf += bytes;
   2144e:	443e      	add	r6, r7
   21450:	e7de      	b.n	21410 <entropy_nrf5_get_entropy+0x2c>
   21452:	bf00      	nop
   21454:	200053a0 	.word	0x200053a0
   21458:	0003662f 	.word	0x0003662f
   2145c:	0003067f 	.word	0x0003067f

00021460 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   21460:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   21462:	4c1f      	ldr	r4, [pc, #124]	; (214e0 <entropy_nrf5_init+0x80>)
   21464:	68c3      	ldr	r3, [r0, #12]
   21466:	42a3      	cmp	r3, r4
   21468:	d00a      	beq.n	21480 <entropy_nrf5_init+0x20>
   2146a:	491e      	ldr	r1, [pc, #120]	; (214e4 <entropy_nrf5_init+0x84>)
   2146c:	481e      	ldr	r0, [pc, #120]	; (214e8 <entropy_nrf5_init+0x88>)
   2146e:	f240 1257 	movw	r2, #343	; 0x157
   21472:	f006 fa2e 	bl	278d2 <printk>
   21476:	f240 1157 	movw	r1, #343	; 0x157
   2147a:	481a      	ldr	r0, [pc, #104]	; (214e4 <entropy_nrf5_init+0x84>)
   2147c:	f006 fca2 	bl	27dc4 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21480:	2201      	movs	r2, #1
   21482:	4611      	mov	r1, r2
   21484:	4816      	ldr	r0, [pc, #88]	; (214e0 <entropy_nrf5_init+0x80>)
   21486:	f00c fddc 	bl	2e042 <z_impl_k_sem_init>
   2148a:	2201      	movs	r2, #1
   2148c:	2100      	movs	r1, #0
   2148e:	4817      	ldr	r0, [pc, #92]	; (214ec <entropy_nrf5_init+0x8c>)
   21490:	f00c fdd7 	bl	2e042 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   21494:	f240 4307 	movw	r3, #1031	; 0x407
   21498:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   2149c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   214a0:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   214a2:	230c      	movs	r3, #12
   214a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   214a8:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   214aa:	4b11      	ldr	r3, [pc, #68]	; (214f0 <entropy_nrf5_init+0x90>)
   214ac:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   214b0:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   214b4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   214b8:	f042 0201 	orr.w	r2, r2, #1
   214bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   214c0:	4a0c      	ldr	r2, [pc, #48]	; (214f4 <entropy_nrf5_init+0x94>)
    p_reg->INTENSET = mask;
   214c2:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   214c4:	6015      	str	r5, [r2, #0]
   214c6:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   214c8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   214cc:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   214ce:	6019      	str	r1, [r3, #0]
   214d0:	200d      	movs	r0, #13
   214d2:	f7e6 fb15 	bl	7b00 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   214d6:	200d      	movs	r0, #13
   214d8:	f7e6 fae0 	bl	7a9c <arch_irq_enable>

	return 0;
}
   214dc:	4628      	mov	r0, r5
   214de:	bd38      	pop	{r3, r4, r5, pc}
   214e0:	200053a0 	.word	0x200053a0
   214e4:	0003662f 	.word	0x0003662f
   214e8:	0003067f 	.word	0x0003067f
   214ec:	200053b8 	.word	0x200053b8
   214f0:	4000d000 	.word	0x4000d000
   214f4:	4000d100 	.word	0x4000d100

000214f8 <isr>:
{
   214f8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   214fa:	f7ff fea3 	bl	21244 <random_byte_get>
	if (byte < 0) {
   214fe:	2800      	cmp	r0, #0
   21500:	db20      	blt.n	21544 <isr+0x4c>
	uint8_t last  = rngp->last;
   21502:	4b17      	ldr	r3, [pc, #92]	; (21560 <isr+0x68>)
   21504:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   21508:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   2150c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   21510:	1a51      	subs	r1, r2, r1
   21512:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   21516:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   21518:	d10d      	bne.n	21536 <isr+0x3e>
	uint8_t last  = rngp->last;
   2151a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   2151e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   21522:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   21526:	1a51      	subs	r1, r2, r1
   21528:	ea34 0101 	bics.w	r1, r4, r1
   2152c:	d10b      	bne.n	21546 <isr+0x4e>
   2152e:	4b0d      	ldr	r3, [pc, #52]	; (21564 <isr+0x6c>)
   21530:	2201      	movs	r2, #1
   21532:	601a      	str	r2, [r3, #0]
   21534:	e00e      	b.n	21554 <isr+0x5c>
	rngp->buffer[last] = byte;
   21536:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   21538:	3201      	adds	r2, #1
   2153a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   2153c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   21540:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   21544:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   21546:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   21548:	3201      	adds	r2, #1
   2154a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   2154c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   21550:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   21554:	4804      	ldr	r0, [pc, #16]	; (21568 <isr+0x70>)
}
   21556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2155a:	f003 bd2f 	b.w	24fbc <z_impl_k_sem_give>
   2155e:	bf00      	nop
   21560:	200053a0 	.word	0x200053a0
   21564:	4000d004 	.word	0x4000d004
   21568:	200053b8 	.word	0x200053b8

0002156c <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   2156c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2156e:	460d      	mov	r5, r1
   21570:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   21572:	b940      	cbnz	r0, 21586 <entropy_cc3xx_rng_get_entropy+0x1a>
   21574:	490f      	ldr	r1, [pc, #60]	; (215b4 <entropy_cc3xx_rng_get_entropy+0x48>)
   21576:	4810      	ldr	r0, [pc, #64]	; (215b8 <entropy_cc3xx_rng_get_entropy+0x4c>)
   21578:	221f      	movs	r2, #31
   2157a:	f006 f9aa 	bl	278d2 <printk>
   2157e:	211f      	movs	r1, #31
   21580:	480c      	ldr	r0, [pc, #48]	; (215b4 <entropy_cc3xx_rng_get_entropy+0x48>)
   21582:	f006 fc1f 	bl	27dc4 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   21586:	b945      	cbnz	r5, 2159a <entropy_cc3xx_rng_get_entropy+0x2e>
   21588:	490a      	ldr	r1, [pc, #40]	; (215b4 <entropy_cc3xx_rng_get_entropy+0x48>)
   2158a:	480b      	ldr	r0, [pc, #44]	; (215b8 <entropy_cc3xx_rng_get_entropy+0x4c>)
   2158c:	2220      	movs	r2, #32
   2158e:	f006 f9a0 	bl	278d2 <printk>
   21592:	2120      	movs	r1, #32
   21594:	4807      	ldr	r0, [pc, #28]	; (215b4 <entropy_cc3xx_rng_get_entropy+0x48>)
   21596:	f006 fc15 	bl	27dc4 <assert_post_action>
#else
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	res = nrf_cc3xx_platform_entropy_get(buffer, length, &olen);
   2159a:	aa01      	add	r2, sp, #4
   2159c:	4621      	mov	r1, r4
   2159e:	4628      	mov	r0, r5
   215a0:	f004 ff08 	bl	263b4 <nrf_cc3xx_platform_entropy_get>
	if (olen != length) {
   215a4:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   215a6:	429c      	cmp	r4, r3
	}
#endif

	return res;
}
   215a8:	bf18      	it	ne
   215aa:	f06f 0015 	mvnne.w	r0, #21
   215ae:	b003      	add	sp, #12
   215b0:	bd30      	pop	{r4, r5, pc}
   215b2:	bf00      	nop
   215b4:	00036661 	.word	0x00036661
   215b8:	0003067f 	.word	0x0003067f

000215bc <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   215bc:	4803      	ldr	r0, [pc, #12]	; (215cc <k_sys_fatal_error_handler+0x10>)
{
   215be:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   215c0:	2145      	movs	r1, #69	; 0x45
   215c2:	f006 f986 	bl	278d2 <printk>
	sys_arch_reboot(0);
   215c6:	2000      	movs	r0, #0
   215c8:	f7e6 ff7c 	bl	84c4 <sys_arch_reboot>

	CODE_UNREACHABLE;
   215cc:	000366b0 	.word	0x000366b0

000215d0 <bt_mesh_prop_srv_init>:

	return 0;
}

static int bt_mesh_prop_srv_init(struct bt_mesh_model *mod)
{
   215d0:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_prop_srv *srv = mod->user_data;
   215d2:	6984      	ldr	r4, [r0, #24]

	srv->mod = mod;
	srv->pub.msg = &srv->pub_buf;
	srv->pub.update = update_handler;
   215d4:	4b0f      	ldr	r3, [pc, #60]	; (21614 <bt_mesh_prop_srv_init+0x44>)
{
   215d6:	4605      	mov	r5, r0
	srv->mod = mod;
   215d8:	4620      	mov	r0, r4
	net_buf_simple_init_with_data(&srv->pub_buf, srv->pub_data,
   215da:	2285      	movs	r2, #133	; 0x85
	srv->mod = mod;
   215dc:	f840 5b50 	str.w	r5, [r0], #80
	net_buf_simple_init_with_data(&srv->pub_buf, srv->pub_data,
   215e0:	f104 015c 	add.w	r1, r4, #92	; 0x5c
	srv->pub.update = update_handler;
   215e4:	61e3      	str	r3, [r4, #28]
	srv->pub.msg = &srv->pub_buf;
   215e6:	61a0      	str	r0, [r4, #24]
	net_buf_simple_init_with_data(&srv->pub_buf, srv->pub_data,
   215e8:	f00b ff79 	bl	2d4de <net_buf_simple_init_with_data>
			mod,
			bt_mesh_model_find(bt_mesh_model_elem(mod),
					   BT_MESH_MODEL_ID_GEN_USER_PROP_SRV));
	}

	if (IS_MFR_SRV(mod)) {
   215ec:	882a      	ldrh	r2, [r5, #0]
   215ee:	f241 0312 	movw	r3, #4114	; 0x1012
   215f2:	429a      	cmp	r2, r3
   215f4:	d105      	bne.n	21602 <bt_mesh_prop_srv_init+0x32>
		/* Manufacturer properties aren't writable */
		struct bt_mesh_prop *prop;

		PROP_FOREACH(srv, prop)
   215f6:	e9d4 323a 	ldrd	r3, r2, [r4, #232]	; 0xe8
   215fa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   215fe:	4293      	cmp	r3, r2
   21600:	d101      	bne.n	21606 <bt_mesh_prop_srv_init+0x36>
		{
			prop->user_access &= ~BT_MESH_PROP_ACCESS_WRITE;
		}
	}
	return 0;
}
   21602:	2000      	movs	r0, #0
   21604:	bd38      	pop	{r3, r4, r5, pc}
			prop->user_access &= ~BT_MESH_PROP_ACCESS_WRITE;
   21606:	7899      	ldrb	r1, [r3, #2]
   21608:	f021 0102 	bic.w	r1, r1, #2
   2160c:	7099      	strb	r1, [r3, #2]
		PROP_FOREACH(srv, prop)
   2160e:	3304      	adds	r3, #4
   21610:	e7f5      	b.n	215fe <bt_mesh_prop_srv_init+0x2e>
   21612:	bf00      	nop
   21614:	00021675 	.word	0x00021675

00021618 <pub_list_build>:
{
   21618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bt_mesh_model_msg_init(buf, op_get(BT_MESH_PROP_OP_PROPS_STATUS,
   2161a:	6803      	ldr	r3, [r0, #0]
   2161c:	881b      	ldrh	r3, [r3, #0]
   2161e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   21622:	3b11      	subs	r3, #17
   21624:	b29b      	uxth	r3, r3
   21626:	2b03      	cmp	r3, #3
{
   21628:	4606      	mov	r6, r0
   2162a:	460c      	mov	r4, r1
   2162c:	4615      	mov	r5, r2
   2162e:	d813      	bhi.n	21658 <pub_list_build+0x40>
   21630:	4a0f      	ldr	r2, [pc, #60]	; (21670 <pub_list_build+0x58>)
   21632:	5cd1      	ldrb	r1, [r2, r3]
}

static inline uint32_t op_get(enum bt_mesh_prop_op_type op_type,
			   enum bt_mesh_prop_srv_kind kind)
{
	switch (kind) {
   21634:	2902      	cmp	r1, #2
   21636:	d910      	bls.n	2165a <pub_list_build+0x42>
		default:
			return 0;
		}
		break;
	}
	return 0;
   21638:	2903      	cmp	r1, #3
   2163a:	bf0c      	ite	eq
   2163c:	2150      	moveq	r1, #80	; 0x50
   2163e:	2100      	movne	r1, #0
	bt_mesh_model_msg_init(buf, op_get(BT_MESH_PROP_OP_PROPS_STATUS,
   21640:	4620      	mov	r0, r4
   21642:	f00a f961 	bl	2b908 <bt_mesh_model_msg_init>
	PROP_FOREACH(srv, prop)
   21646:	f8d6 70e8 	ldr.w	r7, [r6, #232]	; 0xe8
   2164a:	e9d6 323a 	ldrd	r3, r2, [r6, #232]	; 0xe8
   2164e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   21652:	429f      	cmp	r7, r3
   21654:	d104      	bne.n	21660 <pub_list_build+0x48>
}
   21656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (kind) {
   21658:	2100      	movs	r1, #0
			return BT_MESH_PROP_OP_MFR_PROPS_STATUS + 4 * kind;
   2165a:	0089      	lsls	r1, r1, #2
   2165c:	3143      	adds	r1, #67	; 0x43
   2165e:	e7ef      	b.n	21640 <pub_list_build+0x28>
		if (prop->id >= start_prop) {
   21660:	8839      	ldrh	r1, [r7, #0]
   21662:	42a9      	cmp	r1, r5
   21664:	d302      	bcc.n	2166c <pub_list_build+0x54>
			net_buf_simple_add_le16(buf, prop->id);
   21666:	4620      	mov	r0, r4
   21668:	f00b ffbb 	bl	2d5e2 <net_buf_simple_add_le16>
	PROP_FOREACH(srv, prop)
   2166c:	3704      	adds	r7, #4
   2166e:	e7ec      	b.n	2164a <pub_list_build+0x32>
   21670:	000366de 	.word	0x000366de

00021674 <update_handler>:
{
   21674:	b530      	push	{r4, r5, lr}
	struct bt_mesh_prop_srv *srv = mod->user_data;
   21676:	6984      	ldr	r4, [r0, #24]
	switch (srv->pub_state) {
   21678:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   2167c:	2a01      	cmp	r2, #1
{
   2167e:	b085      	sub	sp, #20
   21680:	4603      	mov	r3, r0
	switch (srv->pub_state) {
   21682:	d004      	beq.n	2168e <update_handler+0x1a>
   21684:	2a02      	cmp	r2, #2
   21686:	d008      	beq.n	2169a <update_handler+0x26>
	return 0;
   21688:	2000      	movs	r0, #0
}
   2168a:	b005      	add	sp, #20
   2168c:	bd30      	pop	{r4, r5, pc}
		pub_list_build(srv, srv->pub.msg, 0);
   2168e:	2200      	movs	r2, #0
   21690:	69a1      	ldr	r1, [r4, #24]
   21692:	4620      	mov	r0, r4
   21694:	f7ff ffc0 	bl	21618 <pub_list_build>
		return 0;
   21698:	e7f6      	b.n	21688 <update_handler+0x14>
		bt_mesh_model_msg_init(srv->pub.msg,
   2169a:	881b      	ldrh	r3, [r3, #0]
   2169c:	69a0      	ldr	r0, [r4, #24]
	switch (mod->id) {
   2169e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   216a2:	3b11      	subs	r3, #17
   216a4:	b29b      	uxth	r3, r3
   216a6:	2b03      	cmp	r3, #3
   216a8:	d82b      	bhi.n	21702 <update_handler+0x8e>
   216aa:	4a19      	ldr	r2, [pc, #100]	; (21710 <update_handler+0x9c>)
   216ac:	5cd1      	ldrb	r1, [r2, r3]
	switch (kind) {
   216ae:	2902      	cmp	r1, #2
   216b0:	d829      	bhi.n	21706 <update_handler+0x92>
			return BT_MESH_PROP_OP_MFR_PROP_STATUS + 4 * kind;
   216b2:	0089      	lsls	r1, r1, #2
   216b4:	3146      	adds	r1, #70	; 0x46
   216b6:	f00a f927 	bl	2b908 <bt_mesh_model_msg_init>
		net_buf_simple_add_le16(srv->pub.msg, srv->pub_id);
   216ba:	f8b4 10e2 	ldrh.w	r1, [r4, #226]	; 0xe2
   216be:	69a0      	ldr	r0, [r4, #24]
   216c0:	f00b ff8f 	bl	2d5e2 <net_buf_simple_add_le16>
		prop = prop_get(srv, srv->pub_id);
   216c4:	f8b4 10e2 	ldrh.w	r1, [r4, #226]	; 0xe2
   216c8:	4620      	mov	r0, r4
   216ca:	f00c f98e 	bl	2d9ea <prop_get>
		if (!prop) {
   216ce:	4605      	mov	r5, r0
   216d0:	b1d8      	cbz	r0, 2170a <update_handler+0x96>
		net_buf_simple_add_u8(srv->pub.msg, prop->user_access);
   216d2:	7881      	ldrb	r1, [r0, #2]
   216d4:	69a0      	ldr	r0, [r4, #24]
   216d6:	f00b ff7d 	bl	2d5d4 <net_buf_simple_add_u8>
		value.value = net_buf_simple_tail(srv->pub.msg);
   216da:	69a2      	ldr	r2, [r4, #24]
		value.meta = *prop;
   216dc:	6828      	ldr	r0, [r5, #0]
   216de:	8891      	ldrh	r1, [r2, #4]
   216e0:	6813      	ldr	r3, [r2, #0]
   216e2:	9001      	str	r0, [sp, #4]
   216e4:	440b      	add	r3, r1
		value.value = net_buf_simple_tail(srv->pub.msg);
   216e6:	9303      	str	r3, [sp, #12]
		value.size = CONFIG_BT_MESH_PROP_MAXSIZE;
   216e8:	2308      	movs	r3, #8
   216ea:	9302      	str	r3, [sp, #8]
		srv->get(srv, NULL, &value);
   216ec:	4620      	mov	r0, r4
   216ee:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   216f2:	aa01      	add	r2, sp, #4
   216f4:	2100      	movs	r1, #0
   216f6:	4798      	blx	r3
		net_buf_simple_add(srv->pub.msg, value.size);
   216f8:	9902      	ldr	r1, [sp, #8]
   216fa:	69a0      	ldr	r0, [r4, #24]
   216fc:	f7fe fc50 	bl	1ffa0 <net_buf_simple_add>
   21700:	e7c2      	b.n	21688 <update_handler+0x14>
	switch (kind) {
   21702:	2100      	movs	r1, #0
   21704:	e7d5      	b.n	216b2 <update_handler+0x3e>
	return 0;
   21706:	2100      	movs	r1, #0
   21708:	e7d5      	b.n	216b6 <update_handler+0x42>
			return -ENOENT;
   2170a:	f06f 0001 	mvn.w	r0, #1
   2170e:	e7bc      	b.n	2168a <update_handler+0x16>
   21710:	000366de 	.word	0x000366de

00021714 <handle_owner_property_get>:
{
   21714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len != BT_MESH_PROP_MSG_LEN_PROP_GET) {
   21718:	8893      	ldrh	r3, [r2, #4]
   2171a:	2b02      	cmp	r3, #2
{
   2171c:	b08c      	sub	sp, #48	; 0x30
   2171e:	4604      	mov	r4, r0
   21720:	460e      	mov	r6, r1
	if (buf->len != BT_MESH_PROP_MSG_LEN_PROP_GET) {
   21722:	d144      	bne.n	217ae <handle_owner_property_get+0x9a>
	struct bt_mesh_prop_srv *srv = mod->user_data;
   21724:	6985      	ldr	r5, [r0, #24]
	uint16_t id = net_buf_simple_pull_le16(buf);
   21726:	4610      	mov	r0, r2
   21728:	f00b ff0a 	bl	2d540 <net_buf_simple_pull_le16>
	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   2172c:	4680      	mov	r8, r0
   2172e:	2800      	cmp	r0, #0
   21730:	d03d      	beq.n	217ae <handle_owner_property_get+0x9a>
	const struct bt_mesh_prop *prop = prop_get(srv, id);
   21732:	4601      	mov	r1, r0
   21734:	4628      	mov	r0, r5
   21736:	f00c f958 	bl	2d9ea <prop_get>
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_PROP_OP_ADMIN_PROP_STATUS,
   2173a:	ab08      	add	r3, sp, #32
   2173c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   21740:	9302      	str	r3, [sp, #8]
   21742:	e9cd 2303 	strd	r2, r3, [sp, #12]
   21746:	8823      	ldrh	r3, [r4, #0]
   21748:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2174c:	3b11      	subs	r3, #17
   2174e:	b29b      	uxth	r3, r3
   21750:	2b03      	cmp	r3, #3
	const struct bt_mesh_prop *prop = prop_get(srv, id);
   21752:	4607      	mov	r7, r0
	switch (mod->id) {
   21754:	d82e      	bhi.n	217b4 <handle_owner_property_get+0xa0>
   21756:	4a19      	ldr	r2, [pc, #100]	; (217bc <handle_owner_property_get+0xa8>)
   21758:	5cd1      	ldrb	r1, [r2, r3]
	switch (kind) {
   2175a:	2902      	cmp	r1, #2
   2175c:	d82c      	bhi.n	217b8 <handle_owner_property_get+0xa4>
			return BT_MESH_PROP_OP_MFR_PROP_STATUS + 4 * kind;
   2175e:	0089      	lsls	r1, r1, #2
   21760:	3146      	adds	r1, #70	; 0x46
	bt_mesh_model_msg_init(&rsp, op_get(BT_MESH_PROP_OP_PROP_STATUS,
   21762:	a802      	add	r0, sp, #8
   21764:	f00a f8d0 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   21768:	4641      	mov	r1, r8
   2176a:	a802      	add	r0, sp, #8
   2176c:	f00b ff39 	bl	2d5e2 <net_buf_simple_add_le16>
	if (!prop) {
   21770:	b1b7      	cbz	r7, 217a0 <handle_owner_property_get+0x8c>
	net_buf_simple_add_u8(&rsp, prop->user_access);
   21772:	78b9      	ldrb	r1, [r7, #2]
   21774:	a802      	add	r0, sp, #8
   21776:	f00b ff2d 	bl	2d5d4 <net_buf_simple_add_u8>
	struct bt_mesh_prop_val value = {
   2177a:	2308      	movs	r3, #8
   2177c:	6838      	ldr	r0, [r7, #0]
   2177e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   21782:	9306      	str	r3, [sp, #24]
   21784:	9b02      	ldr	r3, [sp, #8]
   21786:	9005      	str	r0, [sp, #20]
   21788:	4413      	add	r3, r2
   2178a:	9307      	str	r3, [sp, #28]
	srv->get(srv, ctx, &value);
   2178c:	4631      	mov	r1, r6
   2178e:	4628      	mov	r0, r5
   21790:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   21794:	aa05      	add	r2, sp, #20
   21796:	4798      	blx	r3
	net_buf_simple_add(&rsp, value.size);
   21798:	9906      	ldr	r1, [sp, #24]
   2179a:	a802      	add	r0, sp, #8
   2179c:	f7fe fc00 	bl	1ffa0 <net_buf_simple_add>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   217a0:	2300      	movs	r3, #0
   217a2:	9300      	str	r3, [sp, #0]
   217a4:	aa02      	add	r2, sp, #8
   217a6:	4631      	mov	r1, r6
   217a8:	4620      	mov	r0, r4
   217aa:	f00a f8d6 	bl	2b95a <bt_mesh_model_send>
}
   217ae:	b00c      	add	sp, #48	; 0x30
   217b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (kind) {
   217b4:	2100      	movs	r1, #0
   217b6:	e7d2      	b.n	2175e <handle_owner_property_get+0x4a>
	return 0;
   217b8:	2100      	movs	r1, #0
   217ba:	e7d2      	b.n	21762 <handle_owner_property_get+0x4e>
   217bc:	000366de 	.word	0x000366de

000217c0 <bt_mesh_prop_srv_pub>:
}

int bt_mesh_prop_srv_pub(struct bt_mesh_prop_srv *srv,
			 struct bt_mesh_msg_ctx *ctx,
			 const struct bt_mesh_prop_val *val)
{
   217c0:	b570      	push	{r4, r5, r6, lr}
	if (srv->mod->id == BT_MESH_MODEL_ID_GEN_CLIENT_PROP_SRV) {
   217c2:	6803      	ldr	r3, [r0, #0]
   217c4:	881b      	ldrh	r3, [r3, #0]
{
   217c6:	4614      	mov	r4, r2
	if (srv->mod->id == BT_MESH_MODEL_ID_GEN_CLIENT_PROP_SRV) {
   217c8:	f241 0214 	movw	r2, #4116	; 0x1014
   217cc:	4293      	cmp	r3, r2
{
   217ce:	b088      	sub	sp, #32
   217d0:	4605      	mov	r5, r0
   217d2:	460e      	mov	r6, r1
	if (srv->mod->id == BT_MESH_MODEL_ID_GEN_CLIENT_PROP_SRV) {
   217d4:	d035      	beq.n	21842 <bt_mesh_prop_srv_pub+0x82>
		return -EINVAL;
	}

	if (val->size > CONFIG_BT_MESH_PROP_MAXSIZE) {
   217d6:	6862      	ldr	r2, [r4, #4]
   217d8:	2a08      	cmp	r2, #8
   217da:	d835      	bhi.n	21848 <bt_mesh_prop_srv_pub+0x88>
		return -EMSGSIZE;
	}

	srv->pub_id = val->meta.id;
   217dc:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   217e0:	8822      	ldrh	r2, [r4, #0]
   217e2:	f8a0 20e2 	strh.w	r2, [r0, #226]	; 0xe2
	srv->pub_state = BT_MESH_PROP_SRV_STATE_PROP;
   217e6:	3b11      	subs	r3, #17
   217e8:	2202      	movs	r2, #2
   217ea:	b29b      	uxth	r3, r3
   217ec:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4

	BT_MESH_MODEL_BUF_DEFINE(msg, BT_MESH_PROP_OP_ADMIN_PROP_STATUS,
   217f0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   217f4:	aa04      	add	r2, sp, #16
   217f6:	2b03      	cmp	r3, #3
   217f8:	9201      	str	r2, [sp, #4]
   217fa:	e9cd 1202 	strd	r1, r2, [sp, #8]
	switch (mod->id) {
   217fe:	d81c      	bhi.n	2183a <bt_mesh_prop_srv_pub+0x7a>
   21800:	4a13      	ldr	r2, [pc, #76]	; (21850 <bt_mesh_prop_srv_pub+0x90>)
   21802:	5cd1      	ldrb	r1, [r2, r3]
	switch (kind) {
   21804:	2902      	cmp	r1, #2
   21806:	d81a      	bhi.n	2183e <bt_mesh_prop_srv_pub+0x7e>
			return BT_MESH_PROP_OP_MFR_PROP_STATUS + 4 * kind;
   21808:	0089      	lsls	r1, r1, #2
   2180a:	3146      	adds	r1, #70	; 0x46
				 BT_MESH_PROP_MSG_MAXLEN_PROP_STATUS);

	bt_mesh_model_msg_init(&msg, op_get(BT_MESH_PROP_OP_PROP_STATUS,
   2180c:	a801      	add	r0, sp, #4
   2180e:	f00a f87b 	bl	2b908 <bt_mesh_model_msg_init>
					    srv_kind(srv->mod)));

	net_buf_simple_add_le16(&msg, val->meta.id);
   21812:	8821      	ldrh	r1, [r4, #0]
   21814:	a801      	add	r0, sp, #4
   21816:	f00b fee4 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, val->meta.user_access);
   2181a:	78a1      	ldrb	r1, [r4, #2]
   2181c:	a801      	add	r0, sp, #4
   2181e:	f00b fed9 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(&msg, val->value, val->size);
   21822:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
   21826:	a801      	add	r0, sp, #4
   21828:	f00b fec8 	bl	2d5bc <net_buf_simple_add_mem>

	return model_send(srv->mod, ctx, &msg);
   2182c:	aa01      	add	r2, sp, #4
   2182e:	4631      	mov	r1, r6
   21830:	6828      	ldr	r0, [r5, #0]
   21832:	f00c f8bd 	bl	2d9b0 <model_send>
}
   21836:	b008      	add	sp, #32
   21838:	bd70      	pop	{r4, r5, r6, pc}
	switch (kind) {
   2183a:	2100      	movs	r1, #0
   2183c:	e7e4      	b.n	21808 <bt_mesh_prop_srv_pub+0x48>
	return 0;
   2183e:	2100      	movs	r1, #0
   21840:	e7e4      	b.n	2180c <bt_mesh_prop_srv_pub+0x4c>
		return -EINVAL;
   21842:	f06f 0015 	mvn.w	r0, #21
   21846:	e7f6      	b.n	21836 <bt_mesh_prop_srv_pub+0x76>
		return -EMSGSIZE;
   21848:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2184c:	e7f3      	b.n	21836 <bt_mesh_prop_srv_pub+0x76>
   2184e:	bf00      	nop
   21850:	000366de 	.word	0x000366de

00021854 <owner_property_set>:
{
   21854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21858:	460f      	mov	r7, r1
	if ((IS_MFR_SRV(mod) && (buf->len != 3)) ||
   2185a:	8801      	ldrh	r1, [r0, #0]
{
   2185c:	4616      	mov	r6, r2
   2185e:	4699      	mov	r9, r3
   21860:	8893      	ldrh	r3, [r2, #4]
	if ((IS_MFR_SRV(mod) && (buf->len != 3)) ||
   21862:	f241 0212 	movw	r2, #4114	; 0x1012
   21866:	4291      	cmp	r1, r2
{
   21868:	b09a      	sub	sp, #104	; 0x68
   2186a:	4605      	mov	r5, r0
	if ((IS_MFR_SRV(mod) && (buf->len != 3)) ||
   2186c:	f040 8089 	bne.w	21982 <owner_property_set+0x12e>
   21870:	2b03      	cmp	r3, #3
   21872:	f040 808a 	bne.w	2198a <owner_property_set+0x136>
	uint16_t id = net_buf_simple_pull_le16(buf);
   21876:	4630      	mov	r0, r6
	struct bt_mesh_prop_srv *srv = mod->user_data;
   21878:	69ac      	ldr	r4, [r5, #24]
	uint16_t id = net_buf_simple_pull_le16(buf);
   2187a:	f00b fe61 	bl	2d540 <net_buf_simple_pull_le16>
   2187e:	4680      	mov	r8, r0
	enum bt_mesh_prop_access user_access = net_buf_simple_pull_u8(buf);
   21880:	4630      	mov	r0, r6
   21882:	f00b fe55 	bl	2d530 <net_buf_simple_pull_u8>
   21886:	4682      	mov	sl, r0
	if (id == BT_MESH_PROP_ID_PROHIBITED ||
   21888:	f1b8 0f00 	cmp.w	r8, #0
   2188c:	d07d      	beq.n	2198a <owner_property_set+0x136>
	    (IS_MFR_SRV(mod) && (user_access & BT_MESH_PROP_ACCESS_WRITE)) ||
   2188e:	882b      	ldrh	r3, [r5, #0]
	if (id == BT_MESH_PROP_ID_PROHIBITED ||
   21890:	f241 0212 	movw	r2, #4114	; 0x1012
   21894:	4293      	cmp	r3, r2
   21896:	d102      	bne.n	2189e <owner_property_set+0x4a>
	    (IS_MFR_SRV(mod) && (user_access & BT_MESH_PROP_ACCESS_WRITE)) ||
   21898:	f010 0f02 	tst.w	r0, #2
   2189c:	d175      	bne.n	2198a <owner_property_set+0x136>
   2189e:	f1ba 0f03 	cmp.w	sl, #3
   218a2:	d872      	bhi.n	2198a <owner_property_set+0x136>
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_PROP_OP_ADMIN_PROP_STATUS,
   218a4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   218a8:	3b11      	subs	r3, #17
   218aa:	b29b      	uxth	r3, r3
   218ac:	aa06      	add	r2, sp, #24
   218ae:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   218b2:	2b03      	cmp	r3, #3
   218b4:	9203      	str	r2, [sp, #12]
   218b6:	e9cd 1204 	strd	r1, r2, [sp, #16]
	switch (mod->id) {
   218ba:	d869      	bhi.n	21990 <owner_property_set+0x13c>
   218bc:	4a46      	ldr	r2, [pc, #280]	; (219d8 <owner_property_set+0x184>)
   218be:	5cd1      	ldrb	r1, [r2, r3]
	switch (kind) {
   218c0:	2902      	cmp	r1, #2
   218c2:	d867      	bhi.n	21994 <owner_property_set+0x140>
			return BT_MESH_PROP_OP_MFR_PROP_STATUS + 4 * kind;
   218c4:	0089      	lsls	r1, r1, #2
   218c6:	3146      	adds	r1, #70	; 0x46
	bt_mesh_model_msg_init(&rsp, op_get(BT_MESH_PROP_OP_PROP_STATUS,
   218c8:	a803      	add	r0, sp, #12
   218ca:	f00a f81d 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   218ce:	4641      	mov	r1, r8
   218d0:	a803      	add	r0, sp, #12
   218d2:	f00b fe86 	bl	2d5e2 <net_buf_simple_add_le16>
	struct bt_mesh_prop *prop = prop_get(srv, id);
   218d6:	4641      	mov	r1, r8
   218d8:	4620      	mov	r0, r4
   218da:	f00c f886 	bl	2d9ea <prop_get>
	if (!prop) {
   218de:	4680      	mov	r8, r0
   218e0:	2800      	cmp	r0, #0
   218e2:	d043      	beq.n	2196c <owner_property_set+0x118>
	enum bt_mesh_prop_access old_access = prop->user_access;
   218e4:	7883      	ldrb	r3, [r0, #2]
	if (IS_MFR_SRV(srv->mod)) {
   218e6:	6820      	ldr	r0, [r4, #0]
   218e8:	8801      	ldrh	r1, [r0, #0]
   218ea:	f241 0212 	movw	r2, #4114	; 0x1012
   218ee:	4291      	cmp	r1, r2
		user_access &= ~BT_MESH_PROP_ACCESS_WRITE;
   218f0:	bf08      	it	eq
   218f2:	f00a 0afd 	andeq.w	sl, sl, #253	; 0xfd
	if (old_access != user_access) {
   218f6:	4553      	cmp	r3, sl
	prop->user_access = user_access;
   218f8:	f888 a002 	strb.w	sl, [r8, #2]
	if (old_access != user_access) {
   218fc:	d00e      	beq.n	2191c <owner_property_set+0xc8>
	for (uint8_t i = 0; i < srv->property_count; ++i) {
   218fe:	f8d4 c0ec 	ldr.w	ip, [r4, #236]	; 0xec
   21902:	2200      	movs	r2, #0
   21904:	b2d3      	uxtb	r3, r2
   21906:	4563      	cmp	r3, ip
   21908:	f102 0201 	add.w	r2, r2, #1
   2190c:	d344      	bcc.n	21998 <owner_property_set+0x144>
	(void)bt_mesh_model_data_store(srv->mod, false, NULL, user_access,
   2190e:	2200      	movs	r2, #0
   21910:	f8cd c000 	str.w	ip, [sp]
   21914:	ab0a      	add	r3, sp, #40	; 0x28
   21916:	4611      	mov	r1, r2
   21918:	f7f1 fc56 	bl	131c8 <bt_mesh_model_data_store>
	net_buf_simple_add_u8(&rsp, prop->user_access);
   2191c:	f898 1002 	ldrb.w	r1, [r8, #2]
   21920:	a803      	add	r0, sp, #12
   21922:	f00b fe57 	bl	2d5d4 <net_buf_simple_add_u8>
	struct bt_mesh_prop_val value = {
   21926:	2300      	movs	r3, #0
   21928:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   2192c:	930c      	str	r3, [sp, #48]	; 0x30
   2192e:	f8d8 0000 	ldr.w	r0, [r8]
   21932:	9b03      	ldr	r3, [sp, #12]
   21934:	f8bd 8010 	ldrh.w	r8, [sp, #16]
	if (IS_MFR_SRV(mod)) {
   21938:	882a      	ldrh	r2, [r5, #0]
	struct bt_mesh_prop_val value = {
   2193a:	900a      	str	r0, [sp, #40]	; 0x28
   2193c:	4498      	add	r8, r3
	if (IS_MFR_SRV(mod)) {
   2193e:	f241 0312 	movw	r3, #4114	; 0x1012
   21942:	429a      	cmp	r2, r3
	struct bt_mesh_prop_val value = {
   21944:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
	if (IS_MFR_SRV(mod)) {
   21948:	d131      	bne.n	219ae <owner_property_set+0x15a>
		value.size = CONFIG_BT_MESH_PROP_MAXSIZE;
   2194a:	2308      	movs	r3, #8
   2194c:	930b      	str	r3, [sp, #44]	; 0x2c
		srv->get(srv, ctx, &value);
   2194e:	aa0a      	add	r2, sp, #40	; 0x28
   21950:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   21954:	4639      	mov	r1, r7
   21956:	4620      	mov	r0, r4
   21958:	4798      	blx	r3
	bt_mesh_prop_srv_pub(srv, NULL, &value);
   2195a:	2100      	movs	r1, #0
   2195c:	aa0a      	add	r2, sp, #40	; 0x28
   2195e:	4620      	mov	r0, r4
   21960:	f7ff ff2e 	bl	217c0 <bt_mesh_prop_srv_pub>
	net_buf_simple_add(&rsp, value.size);
   21964:	990b      	ldr	r1, [sp, #44]	; 0x2c
   21966:	a803      	add	r0, sp, #12
   21968:	f7fe fb1a 	bl	1ffa0 <net_buf_simple_add>
	if (ack) {
   2196c:	f1b9 0f00 	cmp.w	r9, #0
   21970:	d00b      	beq.n	2198a <owner_property_set+0x136>
		bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   21972:	2300      	movs	r3, #0
   21974:	9300      	str	r3, [sp, #0]
   21976:	aa03      	add	r2, sp, #12
   21978:	4639      	mov	r1, r7
   2197a:	4628      	mov	r0, r5
   2197c:	f009 ffed 	bl	2b95a <bt_mesh_model_send>
   21980:	e003      	b.n	2198a <owner_property_set+0x136>
	if ((IS_MFR_SRV(mod) && (buf->len != 3)) ||
   21982:	3b03      	subs	r3, #3
   21984:	2b08      	cmp	r3, #8
   21986:	f67f af76 	bls.w	21876 <owner_property_set+0x22>
}
   2198a:	b01a      	add	sp, #104	; 0x68
   2198c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (kind) {
   21990:	2100      	movs	r1, #0
   21992:	e797      	b.n	218c4 <owner_property_set+0x70>
	return 0;
   21994:	2100      	movs	r1, #0
   21996:	e797      	b.n	218c8 <owner_property_set+0x74>
		user_access[i] = srv->properties[i].user_access;
   21998:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
   2199c:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
   219a0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   219a4:	4473      	add	r3, lr
   219a6:	7889      	ldrb	r1, [r1, #2]
   219a8:	f803 1c40 	strb.w	r1, [r3, #-64]
   219ac:	e7aa      	b.n	21904 <owner_property_set+0xb0>
		value.size = buf->len;
   219ae:	88b1      	ldrh	r1, [r6, #4]
   219b0:	910b      	str	r1, [sp, #44]	; 0x2c
		memcpy(value.value, net_buf_simple_pull_mem(buf, value.size),
   219b2:	4630      	mov	r0, r6
   219b4:	f7fe fad6 	bl	1ff64 <net_buf_simple_pull_mem>
   219b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   219ba:	4601      	mov	r1, r0
   219bc:	4640      	mov	r0, r8
   219be:	f00c fc74 	bl	2e2aa <memcpy>
		srv->set(srv, ctx, &value);
   219c2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   219c6:	aa0a      	add	r2, sp, #40	; 0x28
   219c8:	4639      	mov	r1, r7
   219ca:	4620      	mov	r0, r4
   219cc:	4798      	blx	r3
		if (value.meta.id == BT_MESH_PROP_ID_PROHIBITED) {
   219ce:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   219d2:	2b00      	cmp	r3, #0
   219d4:	d1c1      	bne.n	2195a <owner_property_set+0x106>
   219d6:	e7d8      	b.n	2198a <owner_property_set+0x136>
   219d8:	000366de 	.word	0x000366de

000219dc <handle_series_get>:
}

static void handle_series_get(struct bt_mesh_model *mod,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
   219dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
	const struct bt_mesh_sensor_format *col_format;

	if (buf->len < 2) {
   219e0:	8893      	ldrh	r3, [r2, #4]
   219e2:	2b01      	cmp	r3, #1
{
   219e4:	b0af      	sub	sp, #188	; 0xbc
   219e6:	4680      	mov	r8, r0
   219e8:	4689      	mov	r9, r1
   219ea:	4615      	mov	r5, r2
	if (buf->len < 2) {
   219ec:	d941      	bls.n	21a72 <handle_series_get+0x96>
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   219ee:	6984      	ldr	r4, [r0, #24]
		return;
	}

	uint16_t id = net_buf_simple_pull_le16(buf);
   219f0:	4610      	mov	r0, r2
   219f2:	f00b fda5 	bl	2d540 <net_buf_simple_pull_le16>

	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   219f6:	4606      	mov	r6, r0
   219f8:	2800      	cmp	r0, #0
   219fa:	d03a      	beq.n	21a72 <handle_series_get+0x96>
		return;
	}

	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   219fc:	4601      	mov	r1, r0
   219fe:	4620      	mov	r0, r4
   21a00:	f00c f85d 	bl	2dabe <sensor_get>

	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   21a04:	ab0a      	add	r3, sp, #40	; 0x28
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   21a06:	4604      	mov	r4, r0
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   21a08:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SERIES_STATUS);
   21a0c:	2154      	movs	r1, #84	; 0x54
   21a0e:	a803      	add	r0, sp, #12
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   21a10:	9303      	str	r3, [sp, #12]
   21a12:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SERIES_STATUS);
   21a16:	f009 ff77 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   21a1a:	4631      	mov	r1, r6
   21a1c:	a803      	add	r0, sp, #12
   21a1e:	f00b fde0 	bl	2d5e2 <net_buf_simple_add_le16>

	if (!sensor) {
   21a22:	b174      	cbz	r4, 21a42 <handle_series_get+0x66>
		goto respond;
	}

	col_format = bt_mesh_sensor_column_format_get(sensor->type);
   21a24:	6820      	ldr	r0, [r4, #0]
   21a26:	f000 fd69 	bl	224fc <bt_mesh_sensor_column_format_get>
	if (!col_format || !sensor->series.columns || !sensor->series.get) {
   21a2a:	4607      	mov	r7, r0
   21a2c:	b118      	cbz	r0, 21a36 <handle_series_get+0x5a>
   21a2e:	6923      	ldr	r3, [r4, #16]
   21a30:	b10b      	cbz	r3, 21a36 <handle_series_get+0x5a>
   21a32:	69a3      	ldr	r3, [r4, #24]
   21a34:	b96b      	cbnz	r3, 21a52 <handle_series_get+0x76>
		BT_WARN("No series support in 0x%04x", sensor->type->id);
   21a36:	6823      	ldr	r3, [r4, #0]
   21a38:	4825      	ldr	r0, [pc, #148]	; (21ad0 <handle_series_get+0xf4>)
   21a3a:	881a      	ldrh	r2, [r3, #0]
   21a3c:	2157      	movs	r1, #87	; 0x57
   21a3e:	f005 ff48 	bl	278d2 <printk>
			return;
		}
	}

respond:
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   21a42:	2300      	movs	r3, #0
   21a44:	9300      	str	r3, [sp, #0]
   21a46:	aa03      	add	r2, sp, #12
   21a48:	4649      	mov	r1, r9
   21a4a:	4640      	mov	r0, r8
   21a4c:	f009 ff85 	bl	2b95a <bt_mesh_model_send>
   21a50:	e00f      	b.n	21a72 <handle_series_get+0x96>
	bool ranged = (buf->len != 0);
   21a52:	88ae      	ldrh	r6, [r5, #4]
	if (buf->len == col_format->size * 2) {
   21a54:	68c3      	ldr	r3, [r0, #12]
   21a56:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
   21a5a:	d12a      	bne.n	21ab2 <handle_series_get+0xd6>
		err = sensor_ch_decode(buf, col_format, &range.start);
   21a5c:	aa06      	add	r2, sp, #24
   21a5e:	4601      	mov	r1, r0
   21a60:	4628      	mov	r0, r5
   21a62:	f00c f989 	bl	2dd78 <sensor_ch_decode>
		if (err) {
   21a66:	4602      	mov	r2, r0
   21a68:	b130      	cbz	r0, 21a78 <handle_series_get+0x9c>
			BT_WARN("Range start decode failed: %d", err);
   21a6a:	481a      	ldr	r0, [pc, #104]	; (21ad4 <handle_series_get+0xf8>)
   21a6c:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed encoding: %d", err);
   21a6e:	f005 ff30 	bl	278d2 <printk>
}
   21a72:	b02f      	add	sp, #188	; 0xbc
   21a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = sensor_ch_decode(buf, col_format, &range.end);
   21a78:	aa08      	add	r2, sp, #32
   21a7a:	4639      	mov	r1, r7
   21a7c:	4628      	mov	r0, r5
   21a7e:	f00c f97b 	bl	2dd78 <sensor_ch_decode>
		if (err) {
   21a82:	4602      	mov	r2, r0
   21a84:	b990      	cbnz	r0, 21aac <handle_series_get+0xd0>
{
   21a86:	2500      	movs	r5, #0
	for (uint32_t i = 0; i < sensor->series.column_count; ++i) {
   21a88:	6963      	ldr	r3, [r4, #20]
   21a8a:	429d      	cmp	r5, r3
   21a8c:	d2d9      	bcs.n	21a42 <handle_series_get+0x66>
		const struct bt_mesh_sensor_column *col =
   21a8e:	6927      	ldr	r7, [r4, #16]
   21a90:	eb07 1705 	add.w	r7, r7, r5, lsl #4
		if (ranged &&
   21a94:	b99e      	cbnz	r6, 21abe <handle_series_get+0xe2>
		int err = sensor_column_encode(&rsp, sensor, ctx, col);
   21a96:	464a      	mov	r2, r9
   21a98:	463b      	mov	r3, r7
   21a9a:	4621      	mov	r1, r4
   21a9c:	a803      	add	r0, sp, #12
   21a9e:	f000 fd3b 	bl	22518 <sensor_column_encode>
		if (err) {
   21aa2:	4602      	mov	r2, r0
   21aa4:	b188      	cbz	r0, 21aca <handle_series_get+0xee>
			BT_WARN("Failed encoding: %d", err);
   21aa6:	2157      	movs	r1, #87	; 0x57
   21aa8:	480b      	ldr	r0, [pc, #44]	; (21ad8 <handle_series_get+0xfc>)
   21aaa:	e7e0      	b.n	21a6e <handle_series_get+0x92>
			BT_WARN("Range end decode failed: %d", err);
   21aac:	2157      	movs	r1, #87	; 0x57
   21aae:	480b      	ldr	r0, [pc, #44]	; (21adc <handle_series_get+0x100>)
   21ab0:	e7dd      	b.n	21a6e <handle_series_get+0x92>
	} else if (buf->len != 0) {
   21ab2:	2e00      	cmp	r6, #0
   21ab4:	d0e7      	beq.n	21a86 <handle_series_get+0xaa>
		BT_WARN("Invalid length (%u)", buf->len);
   21ab6:	4632      	mov	r2, r6
   21ab8:	2157      	movs	r1, #87	; 0x57
   21aba:	4809      	ldr	r0, [pc, #36]	; (21ae0 <handle_series_get+0x104>)
   21abc:	e7d7      	b.n	21a6e <handle_series_get+0x92>
		    !bt_mesh_sensor_value_in_column(&col->start, &range)) {
   21abe:	a906      	add	r1, sp, #24
   21ac0:	4638      	mov	r0, r7
   21ac2:	f00c f995 	bl	2ddf0 <bt_mesh_sensor_value_in_column>
		if (ranged &&
   21ac6:	2800      	cmp	r0, #0
   21ac8:	d1e5      	bne.n	21a96 <handle_series_get+0xba>
	for (uint32_t i = 0; i < sensor->series.column_count; ++i) {
   21aca:	3501      	adds	r5, #1
   21acc:	e7dc      	b.n	21a88 <handle_series_get+0xac>
   21ace:	bf00      	nop
   21ad0:	000367f1 	.word	0x000367f1
   21ad4:	00036812 	.word	0x00036812
   21ad8:	0003686f 	.word	0x0003686f
   21adc:	00036835 	.word	0x00036835
   21ae0:	00036856 	.word	0x00036856

00021ae4 <handle_column_get>:
{
   21ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < 2) {
   21ae8:	8893      	ldrh	r3, [r2, #4]
   21aea:	2b01      	cmp	r3, #1
{
   21aec:	b08c      	sub	sp, #48	; 0x30
   21aee:	4607      	mov	r7, r0
   21af0:	460e      	mov	r6, r1
   21af2:	4690      	mov	r8, r2
	if (buf->len < 2) {
   21af4:	d95e      	bls.n	21bb4 <handle_column_get+0xd0>
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   21af6:	6984      	ldr	r4, [r0, #24]
	uint16_t id = net_buf_simple_pull_le16(buf);
   21af8:	4610      	mov	r0, r2
   21afa:	f00b fd21 	bl	2d540 <net_buf_simple_pull_le16>
	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   21afe:	4605      	mov	r5, r0
   21b00:	2800      	cmp	r0, #0
   21b02:	d057      	beq.n	21bb4 <handle_column_get+0xd0>
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   21b04:	4601      	mov	r1, r0
   21b06:	4620      	mov	r0, r4
   21b08:	f00b ffd9 	bl	2dabe <sensor_get>
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS,
   21b0c:	ab07      	add	r3, sp, #28
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   21b0e:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS,
   21b10:	f44f 1298 	mov.w	r2, #1245184	; 0x130000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS);
   21b14:	2153      	movs	r1, #83	; 0x53
   21b16:	a804      	add	r0, sp, #16
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS,
   21b18:	9304      	str	r3, [sp, #16]
   21b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS);
   21b1e:	f009 fef3 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   21b22:	4629      	mov	r1, r5
   21b24:	a804      	add	r0, sp, #16
   21b26:	f00b fd5c 	bl	2d5e2 <net_buf_simple_add_le16>
	if (!sensor) {
   21b2a:	b174      	cbz	r4, 21b4a <handle_column_get+0x66>
	col_format = bt_mesh_sensor_column_format_get(sensor->type);
   21b2c:	6820      	ldr	r0, [r4, #0]
   21b2e:	f000 fce5 	bl	224fc <bt_mesh_sensor_column_format_get>
	if (!col_format || !sensor->series.columns || !sensor->series.get) {
   21b32:	4605      	mov	r5, r0
   21b34:	b118      	cbz	r0, 21b3e <handle_column_get+0x5a>
   21b36:	6923      	ldr	r3, [r4, #16]
   21b38:	b10b      	cbz	r3, 21b3e <handle_column_get+0x5a>
   21b3a:	69a3      	ldr	r3, [r4, #24]
   21b3c:	b96b      	cbnz	r3, 21b5a <handle_column_get+0x76>
		BT_WARN("No series support in 0x%04x", sensor->type->id);
   21b3e:	6823      	ldr	r3, [r4, #0]
   21b40:	481e      	ldr	r0, [pc, #120]	; (21bbc <handle_column_get+0xd8>)
   21b42:	881a      	ldrh	r2, [r3, #0]
   21b44:	2157      	movs	r1, #87	; 0x57
   21b46:	f005 fec4 	bl	278d2 <printk>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   21b4a:	2300      	movs	r3, #0
   21b4c:	9300      	str	r3, [sp, #0]
   21b4e:	aa04      	add	r2, sp, #16
   21b50:	4631      	mov	r1, r6
   21b52:	4638      	mov	r0, r7
   21b54:	f009 ff01 	bl	2b95a <bt_mesh_model_send>
   21b58:	e02c      	b.n	21bb4 <handle_column_get+0xd0>
	err = sensor_ch_decode(buf, col_format, &col_x);
   21b5a:	4601      	mov	r1, r0
   21b5c:	aa02      	add	r2, sp, #8
   21b5e:	4640      	mov	r0, r8
   21b60:	f00c f90a 	bl	2dd78 <sensor_ch_decode>
	if (err) {
   21b64:	bb30      	cbnz	r0, 21bb4 <handle_column_get+0xd0>
		    series->columns[i].start.val2 == val->val2) {
   21b66:	e9dd e802 	ldrd	lr, r8, [sp, #8]
	for (uint32_t i = 0; i < series->column_count; ++i) {
   21b6a:	f8d4 c014 	ldr.w	ip, [r4, #20]
   21b6e:	4560      	cmp	r0, ip
   21b70:	d109      	bne.n	21b86 <handle_column_get+0xa2>
		BT_WARN("Unknown column");
   21b72:	2157      	movs	r1, #87	; 0x57
   21b74:	4812      	ldr	r0, [pc, #72]	; (21bc0 <handle_column_get+0xdc>)
   21b76:	f005 feac 	bl	278d2 <printk>
		sensor_ch_encode(&rsp, col_format, &col_x);
   21b7a:	aa02      	add	r2, sp, #8
   21b7c:	4629      	mov	r1, r5
   21b7e:	a804      	add	r0, sp, #16
   21b80:	f00c f8db 	bl	2dd3a <sensor_ch_encode>
		goto respond;
   21b84:	e7e1      	b.n	21b4a <handle_column_get+0x66>
		if (series->columns[i].start.val1 == val->val1 &&
   21b86:	0102      	lsls	r2, r0, #4
   21b88:	6921      	ldr	r1, [r4, #16]
   21b8a:	188b      	adds	r3, r1, r2
   21b8c:	588a      	ldr	r2, [r1, r2]
   21b8e:	4572      	cmp	r2, lr
   21b90:	d102      	bne.n	21b98 <handle_column_get+0xb4>
   21b92:	685a      	ldr	r2, [r3, #4]
   21b94:	4542      	cmp	r2, r8
   21b96:	d001      	beq.n	21b9c <handle_column_get+0xb8>
	for (uint32_t i = 0; i < series->column_count; ++i) {
   21b98:	3001      	adds	r0, #1
   21b9a:	e7e8      	b.n	21b6e <handle_column_get+0x8a>
	err = sensor_column_encode(&rsp, sensor, ctx, col);
   21b9c:	4632      	mov	r2, r6
   21b9e:	4621      	mov	r1, r4
   21ba0:	a804      	add	r0, sp, #16
   21ba2:	f000 fcb9 	bl	22518 <sensor_column_encode>
	if (err) {
   21ba6:	4602      	mov	r2, r0
   21ba8:	2800      	cmp	r0, #0
   21baa:	d0ce      	beq.n	21b4a <handle_column_get+0x66>
		BT_WARN("Failed encoding sensor column: %d", err);
   21bac:	2157      	movs	r1, #87	; 0x57
   21bae:	4805      	ldr	r0, [pc, #20]	; (21bc4 <handle_column_get+0xe0>)
   21bb0:	f005 fe8f 	bl	278d2 <printk>
}
   21bb4:	b00c      	add	sp, #48	; 0x30
   21bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21bba:	bf00      	nop
   21bbc:	000367f1 	.word	0x000367f1
   21bc0:	00036796 	.word	0x00036796
   21bc4:	0003676f 	.word	0x0003676f

00021bc8 <value_get>:
	if (!sensor->get) {
   21bc8:	69c3      	ldr	r3, [r0, #28]
{
   21bca:	b570      	push	{r4, r5, r6, lr}
   21bcc:	4605      	mov	r5, r0
   21bce:	4616      	mov	r6, r2
	if (!sensor->get) {
   21bd0:	b183      	cbz	r3, 21bf4 <value_get+0x2c>
	err = sensor->get(sensor, ctx, value);
   21bd2:	4798      	blx	r3
	if (err) {
   21bd4:	4604      	mov	r4, r0
   21bd6:	b140      	cbz	r0, 21bea <value_get+0x22>
		BT_WARN("Value get for 0x%04x: %d", sensor->type->id, err);
   21bd8:	682a      	ldr	r2, [r5, #0]
   21bda:	4603      	mov	r3, r0
   21bdc:	8812      	ldrh	r2, [r2, #0]
   21bde:	4807      	ldr	r0, [pc, #28]	; (21bfc <value_get+0x34>)
   21be0:	2157      	movs	r1, #87	; 0x57
   21be2:	f005 fe76 	bl	278d2 <printk>
}
   21be6:	4620      	mov	r0, r4
   21be8:	bd70      	pop	{r4, r5, r6, pc}
	sensor_cadence_update(sensor, value);
   21bea:	4631      	mov	r1, r6
   21bec:	4628      	mov	r0, r5
   21bee:	f000 fdcd 	bl	2278c <sensor_cadence_update>
	return 0;
   21bf2:	e7f8      	b.n	21be6 <value_get+0x1e>
		return -ENOTSUP;
   21bf4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   21bf8:	e7f5      	b.n	21be6 <value_get+0x1e>
   21bfa:	bf00      	nop
   21bfc:	00036974 	.word	0x00036974

00021c00 <buf_status_add>:
{
   21c00:	b570      	push	{r4, r5, r6, lr}
   21c02:	b08a      	sub	sp, #40	; 0x28
   21c04:	460c      	mov	r4, r1
   21c06:	4605      	mov	r5, r0
	struct sensor_value value[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX] = {};
   21c08:	2100      	movs	r1, #0
{
   21c0a:	4616      	mov	r6, r2
	struct sensor_value value[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX] = {};
   21c0c:	4668      	mov	r0, sp
   21c0e:	2228      	movs	r2, #40	; 0x28
   21c10:	f00c fb86 	bl	2e320 <memset>
	err = value_get(sensor, ctx, value);
   21c14:	4621      	mov	r1, r4
   21c16:	466a      	mov	r2, sp
   21c18:	4628      	mov	r0, r5
   21c1a:	f7ff ffd5 	bl	21bc8 <value_get>
	if (err) {
   21c1e:	4604      	mov	r4, r0
   21c20:	b140      	cbz	r0, 21c34 <buf_status_add+0x34>
		sensor_status_id_encode(buf, 0, sensor->type->id);
   21c22:	682b      	ldr	r3, [r5, #0]
   21c24:	2100      	movs	r1, #0
   21c26:	881a      	ldrh	r2, [r3, #0]
   21c28:	4630      	mov	r0, r6
   21c2a:	f00c f857 	bl	2dcdc <sensor_status_id_encode>
}
   21c2e:	4620      	mov	r0, r4
   21c30:	b00a      	add	sp, #40	; 0x28
   21c32:	bd70      	pop	{r4, r5, r6, pc}
	err = sensor_status_encode(buf, sensor, value);
   21c34:	466a      	mov	r2, sp
   21c36:	4629      	mov	r1, r5
   21c38:	4630      	mov	r0, r6
   21c3a:	f00c f8bb 	bl	2ddb4 <sensor_status_encode>
	if (err) {
   21c3e:	4604      	mov	r4, r0
   21c40:	2800      	cmp	r0, #0
   21c42:	d0f4      	beq.n	21c2e <buf_status_add+0x2e>
		BT_WARN("Sensor value encode for 0x%04x: %d", sensor->type->id,
   21c44:	682a      	ldr	r2, [r5, #0]
   21c46:	4603      	mov	r3, r0
   21c48:	8812      	ldrh	r2, [r2, #0]
   21c4a:	4802      	ldr	r0, [pc, #8]	; (21c54 <buf_status_add+0x54>)
   21c4c:	2157      	movs	r1, #87	; 0x57
   21c4e:	f005 fe40 	bl	278d2 <printk>
   21c52:	e7e6      	b.n	21c22 <buf_status_add+0x22>
   21c54:	000366f2 	.word	0x000366f2

00021c58 <handle_get>:
{
   21c58:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len != 0 && buf->len != 2) {
   21c5a:	8893      	ldrh	r3, [r2, #4]
   21c5c:	f023 0302 	bic.w	r3, r3, #2
{
   21c60:	b0ab      	sub	sp, #172	; 0xac
   21c62:	4606      	mov	r6, r0
   21c64:	460d      	mov	r5, r1
   21c66:	4614      	mov	r4, r2
	if (buf->len != 0 && buf->len != 2) {
   21c68:	bb1b      	cbnz	r3, 21cb2 <handle_get+0x5a>
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   21c6a:	ab06      	add	r3, sp, #24
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   21c6c:	6987      	ldr	r7, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   21c6e:	9303      	str	r3, [sp, #12]
   21c70:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_STATUS);
   21c74:	2152      	movs	r1, #82	; 0x52
   21c76:	a803      	add	r0, sp, #12
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   21c78:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_STATUS);
   21c7c:	f009 fe44 	bl	2b908 <bt_mesh_model_msg_init>
	if (buf->len == 2) {
   21c80:	88a3      	ldrh	r3, [r4, #4]
   21c82:	2b02      	cmp	r3, #2
   21c84:	d122      	bne.n	21ccc <handle_get+0x74>
		uint16_t id = net_buf_simple_pull_le16(buf);
   21c86:	4620      	mov	r0, r4
   21c88:	f00b fc5a 	bl	2d540 <net_buf_simple_pull_le16>
		if (id == BT_MESH_PROP_ID_PROHIBITED) {
   21c8c:	4604      	mov	r4, r0
   21c8e:	b180      	cbz	r0, 21cb2 <handle_get+0x5a>
		sensor = sensor_get(srv, id);
   21c90:	4601      	mov	r1, r0
   21c92:	4638      	mov	r0, r7
   21c94:	f00b ff13 	bl	2dabe <sensor_get>
		if (sensor) {
   21c98:	4607      	mov	r7, r0
   21c9a:	b160      	cbz	r0, 21cb6 <handle_get+0x5e>
			buf_status_add(sensor, ctx, &rsp);
   21c9c:	aa03      	add	r2, sp, #12
   21c9e:	4629      	mov	r1, r5
   21ca0:	f7ff ffae 	bl	21c00 <buf_status_add>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   21ca4:	2300      	movs	r3, #0
   21ca6:	9300      	str	r3, [sp, #0]
   21ca8:	aa03      	add	r2, sp, #12
   21caa:	4629      	mov	r1, r5
   21cac:	4630      	mov	r0, r6
   21cae:	f009 fe54 	bl	2b95a <bt_mesh_model_send>
}
   21cb2:	b02b      	add	sp, #172	; 0xac
   21cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			BT_WARN("Unknown sensor ID 0x%04x", id);
   21cb6:	4622      	mov	r2, r4
   21cb8:	2157      	movs	r1, #87	; 0x57
   21cba:	480b      	ldr	r0, [pc, #44]	; (21ce8 <handle_get+0x90>)
   21cbc:	f005 fe09 	bl	278d2 <printk>
			sensor_status_id_encode(&rsp, 0, id);
   21cc0:	4622      	mov	r2, r4
   21cc2:	4639      	mov	r1, r7
   21cc4:	a803      	add	r0, sp, #12
   21cc6:	f00c f809 	bl	2dcdc <sensor_status_id_encode>
   21cca:	e7eb      	b.n	21ca4 <handle_get+0x4c>
	SENSOR_FOR_EACH(&srv->sensors, sensor) {
   21ccc:	687c      	ldr	r4, [r7, #4]
   21cce:	2c00      	cmp	r4, #0
   21cd0:	d0e8      	beq.n	21ca4 <handle_get+0x4c>
   21cd2:	3c48      	subs	r4, #72	; 0x48
   21cd4:	2c00      	cmp	r4, #0
   21cd6:	d0e5      	beq.n	21ca4 <handle_get+0x4c>
		buf_status_add(sensor, ctx, &rsp);
   21cd8:	4620      	mov	r0, r4
   21cda:	aa03      	add	r2, sp, #12
   21cdc:	4629      	mov	r1, r5
   21cde:	f7ff ff8f 	bl	21c00 <buf_status_add>
   21ce2:	6ca4      	ldr	r4, [r4, #72]	; 0x48
   21ce4:	e7f3      	b.n	21cce <handle_get+0x76>
   21ce6:	bf00      	nop
   21ce8:	000367d3 	.word	0x000367d3

00021cec <handle_descriptor_get>:
{
   21cec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len != 0 && buf->len != 2) {
   21cee:	8893      	ldrh	r3, [r2, #4]
   21cf0:	f023 0302 	bic.w	r3, r3, #2
{
   21cf4:	b0ab      	sub	sp, #172	; 0xac
   21cf6:	4605      	mov	r5, r0
   21cf8:	460e      	mov	r6, r1
   21cfa:	4614      	mov	r4, r2
	if (buf->len != 0 && buf->len != 2) {
   21cfc:	bb13      	cbnz	r3, 21d44 <handle_descriptor_get+0x58>
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   21cfe:	ab06      	add	r3, sp, #24
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   21d00:	6987      	ldr	r7, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   21d02:	9303      	str	r3, [sp, #12]
   21d04:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_DESCRIPTOR_STATUS);
   21d08:	2151      	movs	r1, #81	; 0x51
   21d0a:	a803      	add	r0, sp, #12
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   21d0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_DESCRIPTOR_STATUS);
   21d10:	f009 fdfa 	bl	2b908 <bt_mesh_model_msg_init>
	if (buf->len == 2) {
   21d14:	88a3      	ldrh	r3, [r4, #4]
   21d16:	2b02      	cmp	r3, #2
   21d18:	d11b      	bne.n	21d52 <handle_descriptor_get+0x66>
		uint16_t id = net_buf_simple_pull_le16(buf);
   21d1a:	4620      	mov	r0, r4
   21d1c:	f00b fc10 	bl	2d540 <net_buf_simple_pull_le16>
		if (id == BT_MESH_PROP_ID_PROHIBITED) {
   21d20:	4602      	mov	r2, r0
   21d22:	b178      	cbz	r0, 21d44 <handle_descriptor_get+0x58>
		sensor = sensor_get(srv, id);
   21d24:	4601      	mov	r1, r0
   21d26:	4638      	mov	r0, r7
   21d28:	f00b fec9 	bl	2dabe <sensor_get>
		if (sensor) {
   21d2c:	4601      	mov	r1, r0
   21d2e:	b158      	cbz	r0, 21d48 <handle_descriptor_get+0x5c>
			sensor_descriptor_encode(&rsp, sensor);
   21d30:	a803      	add	r0, sp, #12
   21d32:	f7e1 fa49 	bl	31c8 <sensor_descriptor_encode>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   21d36:	2300      	movs	r3, #0
   21d38:	9300      	str	r3, [sp, #0]
   21d3a:	aa03      	add	r2, sp, #12
   21d3c:	4631      	mov	r1, r6
   21d3e:	4628      	mov	r0, r5
   21d40:	f009 fe0b 	bl	2b95a <bt_mesh_model_send>
}
   21d44:	b02b      	add	sp, #172	; 0xac
   21d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
			net_buf_simple_add_le16(&rsp, id);
   21d48:	4611      	mov	r1, r2
   21d4a:	a803      	add	r0, sp, #12
   21d4c:	f00b fc49 	bl	2d5e2 <net_buf_simple_add_le16>
   21d50:	e7f1      	b.n	21d36 <handle_descriptor_get+0x4a>
	SENSOR_FOR_EACH(&srv->sensors, sensor) {
   21d52:	687c      	ldr	r4, [r7, #4]
   21d54:	2c00      	cmp	r4, #0
   21d56:	d0ee      	beq.n	21d36 <handle_descriptor_get+0x4a>
   21d58:	3c48      	subs	r4, #72	; 0x48
   21d5a:	2c00      	cmp	r4, #0
   21d5c:	d0eb      	beq.n	21d36 <handle_descriptor_get+0x4a>
		if (net_buf_simple_tailroom(&rsp) < (8 + BT_MESH_MIC_SHORT)) {
   21d5e:	a803      	add	r0, sp, #12
   21d60:	f00b fc24 	bl	2d5ac <net_buf_simple_tailroom>
   21d64:	280b      	cmp	r0, #11
   21d66:	d804      	bhi.n	21d72 <handle_descriptor_get+0x86>
			BT_WARN("Not enough room for all descriptors");
   21d68:	2157      	movs	r1, #87	; 0x57
   21d6a:	4805      	ldr	r0, [pc, #20]	; (21d80 <handle_descriptor_get+0x94>)
   21d6c:	f005 fdb1 	bl	278d2 <printk>
   21d70:	e7e1      	b.n	21d36 <handle_descriptor_get+0x4a>
		sensor_descriptor_encode(&rsp, sensor);
   21d72:	4621      	mov	r1, r4
   21d74:	a803      	add	r0, sp, #12
   21d76:	f7e1 fa27 	bl	31c8 <sensor_descriptor_encode>
   21d7a:	6ca4      	ldr	r4, [r4, #72]	; 0x48
   21d7c:	e7ea      	b.n	21d54 <handle_descriptor_get+0x68>
   21d7e:	bf00      	nop
   21d80:	000367aa 	.word	0x000367aa

00021d84 <setting_set>:
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
}

static void setting_set(struct bt_mesh_model *mod, struct bt_mesh_msg_ctx *ctx,
			struct net_buf_simple *buf, bool ack)
{
   21d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   21d88:	6985      	ldr	r5, [r0, #24]
{
   21d8a:	b098      	sub	sp, #96	; 0x60
   21d8c:	4606      	mov	r6, r0
	uint16_t id = net_buf_simple_pull_le16(buf);
   21d8e:	4610      	mov	r0, r2
{
   21d90:	4617      	mov	r7, r2
   21d92:	4688      	mov	r8, r1
   21d94:	4699      	mov	r9, r3
	uint16_t id = net_buf_simple_pull_le16(buf);
   21d96:	f00b fbd3 	bl	2d540 <net_buf_simple_pull_le16>
   21d9a:	4604      	mov	r4, r0
	uint16_t setting_id = net_buf_simple_pull_le16(buf);
   21d9c:	4638      	mov	r0, r7
   21d9e:	f00b fbcf 	bl	2d540 <net_buf_simple_pull_le16>
   21da2:	4682      	mov	sl, r0
	int err;

	if (id == BT_MESH_PROP_ID_PROHIBITED ||
   21da4:	2c00      	cmp	r4, #0
   21da6:	d067      	beq.n	21e78 <setting_set+0xf4>
   21da8:	2800      	cmp	r0, #0
   21daa:	d065      	beq.n	21e78 <setting_set+0xf4>
	    setting_id == BT_MESH_PROP_ID_PROHIBITED) {
		return;
	}

	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_SETTING_STATUS,
   21dac:	ab06      	add	r3, sp, #24
   21dae:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
				 BT_MESH_SENSOR_MSG_MAXLEN_SETTING_STATUS);
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTING_STATUS);
   21db2:	215b      	movs	r1, #91	; 0x5b
   21db4:	a803      	add	r0, sp, #12
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_SETTING_STATUS,
   21db6:	9303      	str	r3, [sp, #12]
   21db8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTING_STATUS);
   21dbc:	f009 fda4 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   21dc0:	4621      	mov	r1, r4
   21dc2:	a803      	add	r0, sp, #12
   21dc4:	f00b fc0d 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&rsp, setting_id);
   21dc8:	4651      	mov	r1, sl
   21dca:	a803      	add	r0, sp, #12
   21dcc:	f00b fc09 	bl	2d5e2 <net_buf_simple_add_le16>

	const struct bt_mesh_sensor_setting *setting;
	struct bt_mesh_sensor *sensor;

	sensor = sensor_get(srv, id);
   21dd0:	4628      	mov	r0, r5
   21dd2:	4621      	mov	r1, r4
   21dd4:	f00b fe73 	bl	2dabe <sensor_get>
	if (!sensor) {
   21dd8:	4605      	mov	r5, r0
   21dda:	b128      	cbz	r0, 21de8 <setting_set+0x64>
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   21ddc:	68c0      	ldr	r0, [r0, #12]
   21dde:	2300      	movs	r3, #0
		if (sensor->settings.list[i].type->id == setting_id) {
   21de0:	f04f 0c0c 	mov.w	ip, #12
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   21de4:	4283      	cmp	r3, r0
   21de6:	d10a      	bne.n	21dfe <setting_set+0x7a>
	BT_DBG("0x%04x: 0x%04x", id, setting_id);

	model_send(mod, NULL, &rsp);

respond:
	if (ack) {
   21de8:	f1b9 0f00 	cmp.w	r9, #0
   21dec:	d044      	beq.n	21e78 <setting_set+0xf4>
		bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   21dee:	2300      	movs	r3, #0
   21df0:	9300      	str	r3, [sp, #0]
   21df2:	aa03      	add	r2, sp, #12
   21df4:	4641      	mov	r1, r8
   21df6:	4630      	mov	r0, r6
   21df8:	f009 fdaf 	bl	2b95a <bt_mesh_model_send>
   21dfc:	e03c      	b.n	21e78 <setting_set+0xf4>
		if (sensor->settings.list[i].type->id == setting_id) {
   21dfe:	fb0c f203 	mul.w	r2, ip, r3
   21e02:	68a9      	ldr	r1, [r5, #8]
   21e04:	188c      	adds	r4, r1, r2
   21e06:	5889      	ldr	r1, [r1, r2]
   21e08:	880a      	ldrh	r2, [r1, #0]
   21e0a:	4552      	cmp	r2, sl
   21e0c:	d024      	beq.n	21e58 <setting_set+0xd4>
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   21e0e:	3301      	adds	r3, #1
   21e10:	e7e8      	b.n	21de4 <setting_set+0x60>
	setting->set(sensor, setting, ctx, values);
   21e12:	ab0e      	add	r3, sp, #56	; 0x38
   21e14:	4642      	mov	r2, r8
   21e16:	4621      	mov	r1, r4
   21e18:	4628      	mov	r0, r5
   21e1a:	68a7      	ldr	r7, [r4, #8]
   21e1c:	47b8      	blx	r7
	net_buf_simple_add_u8(&rsp, 0x03); /* RW */
   21e1e:	2103      	movs	r1, #3
   21e20:	a803      	add	r0, sp, #12
	uint8_t minlen = rsp.len;
   21e22:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	net_buf_simple_add_u8(&rsp, 0x03); /* RW */
   21e26:	f00b fbd5 	bl	2d5d4 <net_buf_simple_add_u8>
	err = sensor_value_encode(&rsp, setting->type, values);
   21e2a:	aa0e      	add	r2, sp, #56	; 0x38
   21e2c:	6821      	ldr	r1, [r4, #0]
   21e2e:	a803      	add	r0, sp, #12
   21e30:	f00b ff8c 	bl	2dd4c <sensor_value_encode>
	if (err) {
   21e34:	4603      	mov	r3, r0
   21e36:	b148      	cbz	r0, 21e4c <setting_set+0xc8>
		BT_WARN("Error encoding sensor setting 0x%04x: %d",
   21e38:	6822      	ldr	r2, [r4, #0]
   21e3a:	4811      	ldr	r0, [pc, #68]	; (21e80 <setting_set+0xfc>)
   21e3c:	8812      	ldrh	r2, [r2, #0]
   21e3e:	2157      	movs	r1, #87	; 0x57
		rsp.len = minlen;
   21e40:	b2ed      	uxtb	r5, r5
		BT_WARN("Error encoding sensor setting 0x%04x: %d",
   21e42:	f005 fd46 	bl	278d2 <printk>
		rsp.len = minlen;
   21e46:	f8ad 5010 	strh.w	r5, [sp, #16]
		goto respond;
   21e4a:	e7cd      	b.n	21de8 <setting_set+0x64>
	model_send(mod, NULL, &rsp);
   21e4c:	4601      	mov	r1, r0
   21e4e:	aa03      	add	r2, sp, #12
   21e50:	4630      	mov	r0, r6
   21e52:	f00b fdad 	bl	2d9b0 <model_send>
   21e56:	e7c7      	b.n	21de8 <setting_set+0x64>
	if (!setting || !setting->set) {
   21e58:	68a3      	ldr	r3, [r4, #8]
   21e5a:	2b00      	cmp	r3, #0
   21e5c:	d0c4      	beq.n	21de8 <setting_set+0x64>
	err = sensor_value_decode(buf, setting->type, values);
   21e5e:	aa0e      	add	r2, sp, #56	; 0x38
   21e60:	4638      	mov	r0, r7
   21e62:	f00b ff91 	bl	2dd88 <sensor_value_decode>
	if (err) {
   21e66:	4603      	mov	r3, r0
   21e68:	2800      	cmp	r0, #0
   21e6a:	d0d2      	beq.n	21e12 <setting_set+0x8e>
		BT_WARN("Error decoding sensor setting 0x%04x: %d",
   21e6c:	6822      	ldr	r2, [r4, #0]
   21e6e:	4805      	ldr	r0, [pc, #20]	; (21e84 <setting_set+0x100>)
   21e70:	8812      	ldrh	r2, [r2, #0]
   21e72:	2157      	movs	r1, #87	; 0x57
   21e74:	f005 fd2d 	bl	278d2 <printk>
	}
}
   21e78:	b018      	add	sp, #96	; 0x60
   21e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21e7e:	bf00      	nop
   21e80:	00036933 	.word	0x00036933
   21e84:	00036905 	.word	0x00036905

00021e88 <handle_cadence_get>:
{
   21e88:	b570      	push	{r4, r5, r6, lr}
   21e8a:	b08c      	sub	sp, #48	; 0x30
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   21e8c:	ab05      	add	r3, sp, #20
{
   21e8e:	4614      	mov	r4, r2
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   21e90:	6985      	ldr	r5, [r0, #24]
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   21e92:	9302      	str	r3, [sp, #8]
   21e94:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   21e98:	a802      	add	r0, sp, #8
{
   21e9a:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   21e9c:	2157      	movs	r1, #87	; 0x57
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   21e9e:	e9cd 2303 	strd	r2, r3, [sp, #12]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   21ea2:	f009 fd31 	bl	2b908 <bt_mesh_model_msg_init>
	id = net_buf_simple_pull_le16(buf);
   21ea6:	4620      	mov	r0, r4
   21ea8:	f00b fb4a 	bl	2d540 <net_buf_simple_pull_le16>
	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   21eac:	4604      	mov	r4, r0
   21eae:	b330      	cbz	r0, 21efe <handle_cadence_get+0x76>
	net_buf_simple_add_le16(&rsp, id);
   21eb0:	4601      	mov	r1, r0
   21eb2:	a802      	add	r0, sp, #8
   21eb4:	f00b fb95 	bl	2d5e2 <net_buf_simple_add_le16>
	sensor = sensor_get(srv, id);
   21eb8:	4621      	mov	r1, r4
   21eba:	4628      	mov	r0, r5
   21ebc:	f00b fdff 	bl	2dabe <sensor_get>
	if (!sensor || sensor->type->channel_count != 1) {
   21ec0:	b118      	cbz	r0, 21eca <handle_cadence_get+0x42>
   21ec2:	6801      	ldr	r1, [r0, #0]
   21ec4:	78cb      	ldrb	r3, [r1, #3]
   21ec6:	2b01      	cmp	r3, #1
   21ec8:	d00c      	beq.n	21ee4 <handle_cadence_get+0x5c>
		BT_WARN("Cadence not supported");
   21eca:	2157      	movs	r1, #87	; 0x57
   21ecc:	480d      	ldr	r0, [pc, #52]	; (21f04 <handle_cadence_get+0x7c>)
   21ece:	f005 fd00 	bl	278d2 <printk>
	bt_mesh_model_send(srv->model, ctx, &rsp, NULL, NULL);
   21ed2:	2300      	movs	r3, #0
   21ed4:	9300      	str	r3, [sp, #0]
   21ed6:	aa02      	add	r2, sp, #8
   21ed8:	4631      	mov	r1, r6
   21eda:	f8d5 013c 	ldr.w	r0, [r5, #316]	; 0x13c
   21ede:	f009 fd3c 	bl	2b95a <bt_mesh_model_send>
   21ee2:	e00c      	b.n	21efe <handle_cadence_get+0x76>
	err = sensor_cadence_encode(&rsp, sensor->type, sensor->state.pub_div,
   21ee4:	f890 2057 	ldrb.w	r2, [r0, #87]	; 0x57
   21ee8:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
				    &sensor->state.threshold);
   21eec:	3020      	adds	r0, #32
	err = sensor_cadence_encode(&rsp, sensor->type, sensor->state.pub_div,
   21eee:	9000      	str	r0, [sp, #0]
   21ef0:	f002 020f 	and.w	r2, r2, #15
   21ef4:	a802      	add	r0, sp, #8
   21ef6:	f000 fba1 	bl	2263c <sensor_cadence_encode>
	if (err) {
   21efa:	2800      	cmp	r0, #0
   21efc:	d0e9      	beq.n	21ed2 <handle_cadence_get+0x4a>
}
   21efe:	b00c      	add	sp, #48	; 0x30
   21f00:	bd70      	pop	{r4, r5, r6, pc}
   21f02:	bf00      	nop
   21f04:	00036754 	.word	0x00036754

00021f08 <cadence_set>:
{
   21f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f0c:	b0af      	sub	sp, #188	; 0xbc
   21f0e:	4616      	mov	r6, r2
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   21f10:	6987      	ldr	r7, [r0, #24]
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   21f12:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
{
   21f16:	4680      	mov	r8, r0
   21f18:	4689      	mov	r9, r1
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   21f1a:	a803      	add	r0, sp, #12
   21f1c:	2157      	movs	r1, #87	; 0x57
{
   21f1e:	469a      	mov	sl, r3
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   21f20:	ab09      	add	r3, sp, #36	; 0x24
   21f22:	9303      	str	r3, [sp, #12]
   21f24:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   21f28:	f009 fcee 	bl	2b908 <bt_mesh_model_msg_init>
	id = net_buf_simple_pull_le16(buf);
   21f2c:	4630      	mov	r0, r6
   21f2e:	f00b fb07 	bl	2d540 <net_buf_simple_pull_le16>
	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   21f32:	4604      	mov	r4, r0
   21f34:	b358      	cbz	r0, 21f8e <cadence_set+0x86>
	net_buf_simple_add_le16(&rsp, id);
   21f36:	4601      	mov	r1, r0
   21f38:	a803      	add	r0, sp, #12
   21f3a:	f00b fb52 	bl	2d5e2 <net_buf_simple_add_le16>
	sensor = sensor_get(srv, id);
   21f3e:	4621      	mov	r1, r4
   21f40:	4638      	mov	r0, r7
   21f42:	f00b fdbc 	bl	2dabe <sensor_get>
	if (!sensor || sensor->type->channel_count != 1) {
   21f46:	4605      	mov	r5, r0
   21f48:	b118      	cbz	r0, 21f52 <cadence_set+0x4a>
   21f4a:	6801      	ldr	r1, [r0, #0]
   21f4c:	78cb      	ldrb	r3, [r1, #3]
   21f4e:	2b01      	cmp	r3, #1
   21f50:	d00e      	beq.n	21f70 <cadence_set+0x68>
		BT_WARN("Cadence not supported");
   21f52:	2157      	movs	r1, #87	; 0x57
   21f54:	483f      	ldr	r0, [pc, #252]	; (22054 <cadence_set+0x14c>)
   21f56:	f005 fcbc 	bl	278d2 <printk>
	if (ack) {
   21f5a:	f1ba 0f00 	cmp.w	sl, #0
   21f5e:	d016      	beq.n	21f8e <cadence_set+0x86>
		bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   21f60:	2300      	movs	r3, #0
   21f62:	9300      	str	r3, [sp, #0]
   21f64:	aa03      	add	r2, sp, #12
   21f66:	4649      	mov	r1, r9
   21f68:	4640      	mov	r0, r8
   21f6a:	f009 fcf6 	bl	2b95a <bt_mesh_model_send>
   21f6e:	e00e      	b.n	21f8e <cadence_set+0x86>
	err = sensor_cadence_decode(buf, sensor->type, &period_div, &min_int,
   21f70:	ac10      	add	r4, sp, #64	; 0x40
   21f72:	4630      	mov	r0, r6
   21f74:	9400      	str	r4, [sp, #0]
   21f76:	f10d 030b 	add.w	r3, sp, #11
   21f7a:	f10d 020a 	add.w	r2, sp, #10
   21f7e:	f000 fba1 	bl	226c4 <sensor_cadence_decode>
	if (err) {
   21f82:	4606      	mov	r6, r0
   21f84:	b130      	cbz	r0, 21f94 <cadence_set+0x8c>
		BT_WARN("Invalid cadence");
   21f86:	2157      	movs	r1, #87	; 0x57
   21f88:	4833      	ldr	r0, [pc, #204]	; (22058 <cadence_set+0x150>)
   21f8a:	f005 fca2 	bl	278d2 <printk>
}
   21f8e:	b02f      	add	sp, #188	; 0xbc
   21f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sensor->state.min_int = min_int;
   21f94:	f89d 300b 	ldrb.w	r3, [sp, #11]
   21f98:	f885 3056 	strb.w	r3, [r5, #86]	; 0x56
	sensor->state.pub_div = period_div;
   21f9c:	f89d 200a 	ldrb.w	r2, [sp, #10]
   21fa0:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
   21fa4:	f362 0303 	bfi	r3, r2, #0, #4
   21fa8:	f885 3057 	strb.w	r3, [r5, #87]	; 0x57
	sensor->state.threshold = threshold;
   21fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   21fae:	f105 0c20 	add.w	ip, r5, #32
   21fb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   21fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   21fb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   21fbc:	e894 0003 	ldmia.w	r4, {r0, r1}
	NET_BUF_SIMPLE_DEFINE(buf, (CONFIG_BT_MESH_SENSOR_SRV_SENSORS_MAX *
   21fc0:	ab1a      	add	r3, sp, #104	; 0x68
   21fc2:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
	sensor->state.threshold = threshold;
   21fc6:	e88c 0003 	stmia.w	ip, {r0, r1}
	NET_BUF_SIMPLE_DEFINE(buf, (CONFIG_BT_MESH_SENSOR_SRV_SENSORS_MAX *
   21fca:	e9cd 2307 	strd	r2, r3, [sp, #28]
   21fce:	9306      	str	r3, [sp, #24]
   21fd0:	f105 0b20 	add.w	fp, r5, #32
	for (int i = 0; i < srv->sensor_count; ++i) {
   21fd4:	7bbb      	ldrb	r3, [r7, #14]
   21fd6:	429e      	cmp	r6, r3
   21fd8:	db0f      	blt.n	21ffa <cadence_set+0xf2>
	    bt_mesh_model_data_store(srv->model, false, NULL, buf.data,
   21fda:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21fde:	9300      	str	r3, [sp, #0]
   21fe0:	2200      	movs	r2, #0
   21fe2:	9b06      	ldr	r3, [sp, #24]
   21fe4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
   21fe8:	4611      	mov	r1, r2
   21fea:	f7f1 f8ed 	bl	131c8 <bt_mesh_model_data_store>
	if (IS_ENABLED(CONFIG_SETTINGS) &&
   21fee:	b1d0      	cbz	r0, 22026 <cadence_set+0x11e>
		BT_ERR("Sensor server data store failed");
   21ff0:	2145      	movs	r1, #69	; 0x45
   21ff2:	481a      	ldr	r0, [pc, #104]	; (2205c <cadence_set+0x154>)
   21ff4:	f005 fc6d 	bl	278d2 <printk>
   21ff8:	e015      	b.n	22026 <cadence_set+0x11e>
		const struct bt_mesh_sensor *s = srv->sensor_array[i];
   21ffa:	683b      	ldr	r3, [r7, #0]
   21ffc:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
		net_buf_simple_add_le16(&buf, s->type->id);
   22000:	6823      	ldr	r3, [r4, #0]
   22002:	a806      	add	r0, sp, #24
   22004:	8819      	ldrh	r1, [r3, #0]
   22006:	f00b faec 	bl	2d5e2 <net_buf_simple_add_le16>
		err = sensor_cadence_encode(&buf, s->type, s->state.pub_div,
   2200a:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
   2200e:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   22012:	f104 0120 	add.w	r1, r4, #32
   22016:	9100      	str	r1, [sp, #0]
   22018:	f002 020f 	and.w	r2, r2, #15
   2201c:	6821      	ldr	r1, [r4, #0]
   2201e:	a806      	add	r0, sp, #24
   22020:	f000 fb0c 	bl	2263c <sensor_cadence_encode>
		if (err) {
   22024:	b198      	cbz	r0, 2204e <cadence_set+0x146>
	err = sensor_cadence_encode(&rsp, sensor->type, sensor->state.pub_div,
   22026:	f895 2057 	ldrb.w	r2, [r5, #87]	; 0x57
   2202a:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
   2202e:	f8cd b000 	str.w	fp, [sp]
   22032:	6829      	ldr	r1, [r5, #0]
   22034:	f002 020f 	and.w	r2, r2, #15
   22038:	a803      	add	r0, sp, #12
   2203a:	f000 faff 	bl	2263c <sensor_cadence_encode>
	if (err) {
   2203e:	4601      	mov	r1, r0
   22040:	2800      	cmp	r0, #0
   22042:	d1a4      	bne.n	21f8e <cadence_set+0x86>
	model_send(mod, NULL, &rsp);
   22044:	aa03      	add	r2, sp, #12
   22046:	4640      	mov	r0, r8
   22048:	f00b fcb2 	bl	2d9b0 <model_send>
   2204c:	e785      	b.n	21f5a <cadence_set+0x52>
	for (int i = 0; i < srv->sensor_count; ++i) {
   2204e:	3601      	adds	r6, #1
   22050:	e7c0      	b.n	21fd4 <cadence_set+0xcc>
   22052:	bf00      	nop
   22054:	00036754 	.word	0x00036754
   22058:	0003671a 	.word	0x0003671a
   2205c:	0003672f 	.word	0x0003672f

00022060 <sensor_srv_init>:

	return (srv->pub.msg->len > original_len) ? 0 : -ENOENT;
}

static int sensor_srv_init(struct bt_mesh_model *mod)
{
   22060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   22064:	6984      	ldr	r4, [r0, #24]
	list->head = NULL;
   22066:	2500      	movs	r5, #0
	list->tail = NULL;
   22068:	e9c4 5501 	strd	r5, r5, [r4, #4]
{
   2206c:	4606      	mov	r6, r0
	sys_slist_init(&srv->sensors);

	/* Establish a sorted list of sensors, as this is a requirement when
	 * sending multiple sensor values in one message.
	 */
	uint16_t min_id = 0;
   2206e:	462a      	mov	r2, r5
	parent->next = child;
   22070:	46ae      	mov	lr, r5

	for (int count = 0; count < srv->sensor_count; ++count) {
   22072:	f894 c00e 	ldrb.w	ip, [r4, #14]
   22076:	4565      	cmp	r5, ip
   22078:	da19      	bge.n	220ae <sensor_srv_init+0x4e>
		struct bt_mesh_sensor *best = NULL;

		for (int j = 0; j < srv->sensor_count; ++j) {
   2207a:	2100      	movs	r1, #0
			if (srv->sensor_array[j]->type->id >= min_id &&
   2207c:	f8d4 9000 	ldr.w	r9, [r4]
		struct bt_mesh_sensor *best = NULL;
   22080:	460b      	mov	r3, r1
			if (srv->sensor_array[j]->type->id >= min_id &&
   22082:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
   22086:	6807      	ldr	r7, [r0, #0]
   22088:	f8b7 8000 	ldrh.w	r8, [r7]
   2208c:	4590      	cmp	r8, r2
   2208e:	d305      	bcc.n	2209c <sensor_srv_init+0x3c>
   22090:	b333      	cbz	r3, 220e0 <sensor_srv_init+0x80>
			    (!best ||
			     srv->sensor_array[j]->type->id < best->type->id)) {
   22092:	681f      	ldr	r7, [r3, #0]
			    (!best ||
   22094:	883f      	ldrh	r7, [r7, #0]
   22096:	4547      	cmp	r7, r8
   22098:	bf88      	it	hi
   2209a:	4603      	movhi	r3, r0
		for (int j = 0; j < srv->sensor_count; ++j) {
   2209c:	3101      	adds	r1, #1
   2209e:	4561      	cmp	r1, ip
   220a0:	dbef      	blt.n	22082 <sensor_srv_init+0x22>
				best = srv->sensor_array[j];
			}
		}

		if (!best) {
   220a2:	b9fb      	cbnz	r3, 220e4 <sensor_srv_init+0x84>
			BT_ERR("Duplicate sensor ID");
   220a4:	2145      	movs	r1, #69	; 0x45
   220a6:	4818      	ldr	r0, [pc, #96]	; (22108 <sensor_srv_init+0xa8>)
   220a8:	f005 fc13 	bl	278d2 <printk>
			srv->sensor_count = count;
   220ac:	73a5      	strb	r5, [r4, #14]
		min_id = best->type->id + 1;
	}

	srv->model = mod;

	srv->pub.update = update_handler;
   220ae:	4b17      	ldr	r3, [pc, #92]	; (2210c <sensor_srv_init+0xac>)
   220b0:	6263      	str	r3, [r4, #36]	; 0x24
	srv->pub.msg = &srv->pub_buf;
   220b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
	srv->setup_pub.msg = &srv->setup_pub_buf;
   220b6:	f504 7588 	add.w	r5, r4, #272	; 0x110
	srv->pub.msg = &srv->pub_buf;
   220ba:	6220      	str	r0, [r4, #32]
	net_buf_simple_init_with_data(&srv->pub_buf, srv->pub_data,
   220bc:	f104 0164 	add.w	r1, r4, #100	; 0x64
	srv->model = mod;
   220c0:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
	srv->setup_pub.msg = &srv->setup_pub_buf;
   220c4:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	net_buf_simple_init_with_data(&srv->pub_buf, srv->pub_data,
   220c8:	2261      	movs	r2, #97	; 0x61
   220ca:	f00b fa08 	bl	2d4de <net_buf_simple_init_with_data>
				      sizeof(srv->pub_data));
	net_buf_simple_init_with_data(&srv->setup_pub_buf, srv->setup_pub_data,
   220ce:	4628      	mov	r0, r5
   220d0:	221d      	movs	r2, #29
   220d2:	f504 718e 	add.w	r1, r4, #284	; 0x11c
   220d6:	f00b fa02 	bl	2d4de <net_buf_simple_init_with_data>
				      sizeof(srv->setup_pub_data));

	return 0;
}
   220da:	2000      	movs	r0, #0
   220dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   220e0:	4603      	mov	r3, r0
   220e2:	e7db      	b.n	2209c <sensor_srv_init+0x3c>
   220e4:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
Z_GENLIST_APPEND(slist, snode)
   220e8:	68a1      	ldr	r1, [r4, #8]
		sys_slist_append(&srv->sensors, &best->state.node);
   220ea:	f103 0248 	add.w	r2, r3, #72	; 0x48
   220ee:	b939      	cbnz	r1, 22100 <sensor_srv_init+0xa0>
	list->head = node;
   220f0:	e9c4 2201 	strd	r2, r2, [r4, #4]
		min_id = best->type->id + 1;
   220f4:	681b      	ldr	r3, [r3, #0]
   220f6:	881a      	ldrh	r2, [r3, #0]
   220f8:	3201      	adds	r2, #1
   220fa:	b292      	uxth	r2, r2
	for (int count = 0; count < srv->sensor_count; ++count) {
   220fc:	3501      	adds	r5, #1
   220fe:	e7b8      	b.n	22072 <sensor_srv_init+0x12>
	parent->next = child;
   22100:	600a      	str	r2, [r1, #0]
	list->tail = node;
   22102:	60a2      	str	r2, [r4, #8]
   22104:	e7f6      	b.n	220f4 <sensor_srv_init+0x94>
   22106:	bf00      	nop
   22108:	000368b7 	.word	0x000368b7
   2210c:	0002db67 	.word	0x0002db67

00022110 <sensor_srv_settings_set>:
}

static int sensor_srv_settings_set(struct bt_mesh_model *mod, const char *name,
				   size_t len_rd, settings_read_cb read_cb,
				   void *cb_arg)
{
   22110:	b570      	push	{r4, r5, r6, lr}
   22112:	b09a      	sub	sp, #104	; 0x68
   22114:	4614      	mov	r4, r2
   22116:	461d      	mov	r5, r3
	struct bt_mesh_sensor_srv *srv = mod->user_data;
	int err = 0;

	NET_BUF_SIMPLE_DEFINE(buf, (CONFIG_BT_MESH_SENSOR_SRV_SENSORS_MAX *
   22118:	aa06      	add	r2, sp, #24
   2211a:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   2211e:	6986      	ldr	r6, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(buf, (CONFIG_BT_MESH_SENSOR_SRV_SENSORS_MAX *
   22120:	9203      	str	r2, [sp, #12]
   22122:	e9cd 3204 	strd	r3, r2, [sp, #16]
				    BT_MESH_SENSOR_MSG_MAXLEN_CADENCE_STATUS));

	if (name) {
   22126:	2900      	cmp	r1, #0
   22128:	d142      	bne.n	221b0 <sensor_srv_settings_set+0xa0>
		return -ENOENT;
	}

	ssize_t len = read_cb(cb_arg, net_buf_simple_add(&buf, len_rd), len_rd);
   2212a:	4621      	mov	r1, r4
   2212c:	a803      	add	r0, sp, #12
   2212e:	f7fd ff37 	bl	1ffa0 <net_buf_simple_add>
   22132:	4622      	mov	r2, r4
   22134:	4601      	mov	r1, r0
   22136:	981e      	ldr	r0, [sp, #120]	; 0x78
   22138:	47a8      	blx	r5

	if (len == 0) {
   2213a:	4602      	mov	r2, r0
   2213c:	b918      	cbnz	r0, 22146 <sensor_srv_settings_set+0x36>
		return 0;
   2213e:	2400      	movs	r4, #0
	if (err) {
		BT_ERR("Failed: %d", err);
	}

	return err;
}
   22140:	4620      	mov	r0, r4
   22142:	b01a      	add	sp, #104	; 0x68
   22144:	bd70      	pop	{r4, r5, r6, pc}
	if (len != len_rd) {
   22146:	42a0      	cmp	r0, r4
   22148:	d025      	beq.n	22196 <sensor_srv_settings_set+0x86>
		BT_ERR("Failed: %d (expected length %u)", len, len_rd);
   2214a:	4623      	mov	r3, r4
   2214c:	2145      	movs	r1, #69	; 0x45
   2214e:	481a      	ldr	r0, [pc, #104]	; (221b8 <sensor_srv_settings_set+0xa8>)
   22150:	f005 fbbf 	bl	278d2 <printk>
		return -EINVAL;
   22154:	f06f 0415 	mvn.w	r4, #21
   22158:	e7f2      	b.n	22140 <sensor_srv_settings_set+0x30>
		uint16_t id = net_buf_simple_pull_le16(&buf);
   2215a:	a803      	add	r0, sp, #12
   2215c:	f00b f9f0 	bl	2d540 <net_buf_simple_pull_le16>
		s = sensor_get(srv, id);
   22160:	4601      	mov	r1, r0
   22162:	4630      	mov	r0, r6
   22164:	f00b fcab 	bl	2dabe <sensor_get>
		if (!s) {
   22168:	4605      	mov	r5, r0
   2216a:	b1c8      	cbz	r0, 221a0 <sensor_srv_settings_set+0x90>
		err = sensor_cadence_decode(&buf, s->type, &pub_div,
   2216c:	f100 0320 	add.w	r3, r0, #32
   22170:	9300      	str	r3, [sp, #0]
   22172:	6801      	ldr	r1, [r0, #0]
   22174:	f100 0356 	add.w	r3, r0, #86	; 0x56
   22178:	f10d 020b 	add.w	r2, sp, #11
   2217c:	a803      	add	r0, sp, #12
   2217e:	f000 faa1 	bl	226c4 <sensor_cadence_decode>
		if (err) {
   22182:	4604      	mov	r4, r0
   22184:	b970      	cbnz	r0, 221a4 <sensor_srv_settings_set+0x94>
		s->state.pub_div = pub_div;
   22186:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
   2218a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2218e:	f362 0303 	bfi	r3, r2, #0, #4
   22192:	f885 3057 	strb.w	r3, [r5, #87]	; 0x57
	while (buf.len) {
   22196:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2219a:	2b00      	cmp	r3, #0
   2219c:	d1dd      	bne.n	2215a <sensor_srv_settings_set+0x4a>
   2219e:	e7ce      	b.n	2213e <sensor_srv_settings_set+0x2e>
			err = -ENODEV;
   221a0:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Failed: %d", err);
   221a4:	4622      	mov	r2, r4
   221a6:	2145      	movs	r1, #69	; 0x45
   221a8:	4804      	ldr	r0, [pc, #16]	; (221bc <sensor_srv_settings_set+0xac>)
   221aa:	f005 fb92 	bl	278d2 <printk>
   221ae:	e7c7      	b.n	22140 <sensor_srv_settings_set+0x30>
		return -ENOENT;
   221b0:	f06f 0401 	mvn.w	r4, #1
   221b4:	e7c4      	b.n	22140 <sensor_srv_settings_set+0x30>
   221b6:	bf00      	nop
   221b8:	000368d0 	.word	0x000368d0
   221bc:	000368f5 	.word	0x000368f5

000221c0 <sensor_srv_reset>:
{
   221c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   221c2:	6985      	ldr	r5, [r0, #24]
		s->state.min_int = 0;
   221c4:	4e13      	ldr	r6, [pc, #76]	; (22214 <sensor_srv_reset+0x54>)
	net_buf_simple_reset(srv->pub.msg);
   221c6:	6a2b      	ldr	r3, [r5, #32]
	buf->len  = 0U;
   221c8:	2400      	movs	r4, #0
	buf->data = buf->__buf;
   221ca:	689a      	ldr	r2, [r3, #8]
   221cc:	601a      	str	r2, [r3, #0]
	buf->len  = 0U;
   221ce:	809c      	strh	r4, [r3, #4]
	net_buf_simple_reset(srv->setup_pub.msg);
   221d0:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
	buf->data = buf->__buf;
   221d4:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   221d6:	809c      	strh	r4, [r3, #4]
	buf->data = buf->__buf;
   221d8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < srv->sensor_count; ++i) {
   221da:	7bab      	ldrb	r3, [r5, #14]
   221dc:	42a3      	cmp	r3, r4
   221de:	dc09      	bgt.n	221f4 <sensor_srv_reset+0x34>
		(void)bt_mesh_model_data_store(srv->model, false, NULL, NULL,
   221e0:	2300      	movs	r3, #0
   221e2:	9300      	str	r3, [sp, #0]
   221e4:	461a      	mov	r2, r3
   221e6:	4619      	mov	r1, r3
   221e8:	f8d5 013c 	ldr.w	r0, [r5, #316]	; 0x13c
   221ec:	f7f0 ffec 	bl	131c8 <bt_mesh_model_data_store>
}
   221f0:	b002      	add	sp, #8
   221f2:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_mesh_sensor *s = srv->sensor_array[i];
   221f4:	682b      	ldr	r3, [r5, #0]
   221f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
		s->state.min_int = 0;
   221fa:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
   221fe:	4033      	ands	r3, r6
   22200:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
__ssp_bos_icheck3(memset, void *, int)
   22204:	2228      	movs	r2, #40	; 0x28
   22206:	2100      	movs	r1, #0
   22208:	3020      	adds	r0, #32
   2220a:	f00c f889 	bl	2e320 <memset>
	for (int i = 0; i < srv->sensor_count; ++i) {
   2220e:	3401      	adds	r4, #1
   22210:	e7e3      	b.n	221da <sensor_srv_reset+0x1a>
   22212:	bf00      	nop
   22214:	fffff000 	.word	0xfffff000

00022218 <handle_setting_get>:
{
   22218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   2221c:	f8d0 9018 	ldr.w	r9, [r0, #24]
{
   22220:	b099      	sub	sp, #100	; 0x64
   22222:	4606      	mov	r6, r0
	uint16_t id = net_buf_simple_pull_le16(buf);
   22224:	4610      	mov	r0, r2
{
   22226:	4615      	mov	r5, r2
   22228:	4688      	mov	r8, r1
	uint16_t id = net_buf_simple_pull_le16(buf);
   2222a:	f00b f989 	bl	2d540 <net_buf_simple_pull_le16>
   2222e:	4604      	mov	r4, r0
	uint16_t setting_id = net_buf_simple_pull_le16(buf);
   22230:	4628      	mov	r0, r5
   22232:	f00b f985 	bl	2d540 <net_buf_simple_pull_le16>
   22236:	4607      	mov	r7, r0
	if (id == BT_MESH_PROP_ID_PROHIBITED ||
   22238:	b32c      	cbz	r4, 22286 <handle_setting_get+0x6e>
   2223a:	b320      	cbz	r0, 22286 <handle_setting_get+0x6e>
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_SETTING_STATUS,
   2223c:	ab06      	add	r3, sp, #24
   2223e:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTING_STATUS);
   22242:	215b      	movs	r1, #91	; 0x5b
   22244:	a803      	add	r0, sp, #12
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_SETTING_STATUS,
   22246:	9303      	str	r3, [sp, #12]
   22248:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTING_STATUS);
   2224c:	f009 fb5c 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   22250:	4621      	mov	r1, r4
   22252:	a803      	add	r0, sp, #12
   22254:	f00b f9c5 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&rsp, setting_id);
   22258:	4639      	mov	r1, r7
   2225a:	a803      	add	r0, sp, #12
   2225c:	f00b f9c1 	bl	2d5e2 <net_buf_simple_add_le16>
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   22260:	4621      	mov	r1, r4
   22262:	4648      	mov	r0, r9
   22264:	f00b fc2b 	bl	2dabe <sensor_get>
	if (!sensor) {
   22268:	4605      	mov	r5, r0
   2226a:	b128      	cbz	r0, 22278 <handle_setting_get+0x60>
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   2226c:	68c0      	ldr	r0, [r0, #12]
   2226e:	2300      	movs	r3, #0
		if (sensor->settings.list[i].type->id == setting_id) {
   22270:	f04f 0c0c 	mov.w	ip, #12
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   22274:	4283      	cmp	r3, r0
   22276:	d109      	bne.n	2228c <handle_setting_get+0x74>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   22278:	2300      	movs	r3, #0
   2227a:	9300      	str	r3, [sp, #0]
   2227c:	aa03      	add	r2, sp, #12
   2227e:	4641      	mov	r1, r8
   22280:	4630      	mov	r0, r6
   22282:	f009 fb6a 	bl	2b95a <bt_mesh_model_send>
}
   22286:	b019      	add	sp, #100	; 0x64
   22288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (sensor->settings.list[i].type->id == setting_id) {
   2228c:	fb0c f203 	mul.w	r2, ip, r3
   22290:	68a9      	ldr	r1, [r5, #8]
   22292:	188c      	adds	r4, r1, r2
   22294:	588a      	ldr	r2, [r1, r2]
   22296:	8812      	ldrh	r2, [r2, #0]
   22298:	42ba      	cmp	r2, r7
   2229a:	d001      	beq.n	222a0 <handle_setting_get+0x88>
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   2229c:	3301      	adds	r3, #1
   2229e:	e7e9      	b.n	22274 <handle_setting_get+0x5c>
	if (!setting || !setting->get) {
   222a0:	6863      	ldr	r3, [r4, #4]
   222a2:	2b00      	cmp	r3, #0
   222a4:	d0e8      	beq.n	22278 <handle_setting_get+0x60>
	net_buf_simple_add_u8(&rsp, setting->set ? 0x03 : 0x01);
   222a6:	68a3      	ldr	r3, [r4, #8]
	uint8_t minlen = rsp.len;
   222a8:	f8bd 9010 	ldrh.w	r9, [sp, #16]
	net_buf_simple_add_u8(&rsp, setting->set ? 0x03 : 0x01);
   222ac:	2b00      	cmp	r3, #0
   222ae:	bf14      	ite	ne
   222b0:	2103      	movne	r1, #3
   222b2:	2101      	moveq	r1, #1
   222b4:	a803      	add	r0, sp, #12
   222b6:	f00b f98d 	bl	2d5d4 <net_buf_simple_add_u8>
	setting->get(sensor, setting, ctx, values);
   222ba:	ab0e      	add	r3, sp, #56	; 0x38
   222bc:	4642      	mov	r2, r8
   222be:	4621      	mov	r1, r4
   222c0:	4628      	mov	r0, r5
   222c2:	6867      	ldr	r7, [r4, #4]
   222c4:	47b8      	blx	r7
	err = sensor_value_encode(&rsp, setting->type, values);
   222c6:	aa0e      	add	r2, sp, #56	; 0x38
   222c8:	6821      	ldr	r1, [r4, #0]
   222ca:	a803      	add	r0, sp, #12
   222cc:	f00b fd3e 	bl	2dd4c <sensor_value_encode>
	if (err) {
   222d0:	4603      	mov	r3, r0
   222d2:	2800      	cmp	r0, #0
   222d4:	d0d0      	beq.n	22278 <handle_setting_get+0x60>
		BT_WARN("Failed encoding sensor setting 0x%04x: %d",
   222d6:	6822      	ldr	r2, [r4, #0]
   222d8:	4804      	ldr	r0, [pc, #16]	; (222ec <handle_setting_get+0xd4>)
   222da:	8812      	ldrh	r2, [r2, #0]
   222dc:	2157      	movs	r1, #87	; 0x57
		rsp.len = minlen;
   222de:	fa5f f989 	uxtb.w	r9, r9
		BT_WARN("Failed encoding sensor setting 0x%04x: %d",
   222e2:	f005 faf6 	bl	278d2 <printk>
		rsp.len = minlen;
   222e6:	f8ad 9010 	strh.w	r9, [sp, #16]
   222ea:	e7c5      	b.n	22278 <handle_setting_get+0x60>
   222ec:	00036888 	.word	0x00036888

000222f0 <scalar_decode>:
	return 0;
}

static int scalar_decode(const struct bt_mesh_sensor_format *format,
			 struct net_buf_simple *buf, struct sensor_value *val)
{
   222f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222f2:	4607      	mov	r7, r0
	const struct scalar_repr *repr = format->user_data;

	if (buf->len < format->size) {
   222f4:	e9d7 5302 	ldrd	r5, r3, [r7, #8]
{
   222f8:	4616      	mov	r6, r2
	if (buf->len < format->size) {
   222fa:	888a      	ldrh	r2, [r1, #4]
   222fc:	429a      	cmp	r2, r3
{
   222fe:	4608      	mov	r0, r1
	if (buf->len < format->size) {
   22300:	d360      	bcc.n	223c4 <scalar_decode+0xd4>
		return -ENOMEM;
	}

	int32_t raw;

	switch (format->size) {
   22302:	3b01      	subs	r3, #1
   22304:	2b03      	cmp	r3, #3
   22306:	d860      	bhi.n	223ca <scalar_decode+0xda>
   22308:	e8df f003 	tbb	[pc, r3]
   2230c:	52473d02 	.word	0x52473d02
	case 1:
		if (repr->flags & SIGNED) {
   22310:	782b      	ldrb	r3, [r5, #0]
   22312:	079c      	lsls	r4, r3, #30
   22314:	d533      	bpl.n	2237e <scalar_decode+0x8e>
			raw = (int8_t) net_buf_simple_pull_u8(buf);
   22316:	f00b f90b 	bl	2d530 <net_buf_simple_pull_u8>
   2231a:	b244      	sxtb	r4, r0
		break;
	default:
		return -ERANGE;
	}

	int64_t max_value = scalar_max(format);
   2231c:	4638      	mov	r0, r7
   2231e:	f00b fca7 	bl	2dc70 <scalar_max>
	if (repr->flags & SIGNED) {
   22322:	68bb      	ldr	r3, [r7, #8]
   22324:	781b      	ldrb	r3, [r3, #0]
   22326:	f013 0302 	ands.w	r3, r3, #2
   2232a:	d005      	beq.n	22338 <scalar_decode+0x48>
		return -BIT64(8 * format->size - 1);
   2232c:	68fb      	ldr	r3, [r7, #12]
   2232e:	00db      	lsls	r3, r3, #3
   22330:	1e5a      	subs	r2, r3, #1
   22332:	f04f 33ff 	mov.w	r3, #4294967295
   22336:	4093      	lsls	r3, r2
	int32_t min_value = scalar_min(format);

	if (raw < min_value || raw > max_value) {
   22338:	429c      	cmp	r4, r3
   2233a:	db46      	blt.n	223ca <scalar_decode+0xda>
   2233c:	17e3      	asrs	r3, r4, #31
   2233e:	42a0      	cmp	r0, r4
   22340:	eb71 0303 	sbcs.w	r3, r1, r3
   22344:	db41      	blt.n	223ca <scalar_decode+0xda>
		return -ERANGE;
	}

	int64_t million = mul_scalar(raw * 1000000LL, repr);
   22346:	4822      	ldr	r0, [pc, #136]	; (223d0 <scalar_decode+0xe0>)
   22348:	fb84 0100 	smull	r0, r1, r4, r0
	return (repr->flags & DIVIDE) ? (val / repr->value) :
   2234c:	782c      	ldrb	r4, [r5, #0]
   2234e:	0764      	lsls	r4, r4, #29
   22350:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   22354:	d52f      	bpl.n	223b6 <scalar_decode+0xc6>
   22356:	f7df fac9 	bl	18ec <__aeabi_ldivmod>
   2235a:	4604      	mov	r4, r0
   2235c:	460d      	mov	r5, r1

	val->val1 = million / 1000000LL;
   2235e:	4a1c      	ldr	r2, [pc, #112]	; (223d0 <scalar_decode+0xe0>)
   22360:	2300      	movs	r3, #0
   22362:	4620      	mov	r0, r4
   22364:	4629      	mov	r1, r5
   22366:	f7df fac1 	bl	18ec <__aeabi_ldivmod>
	val->val2 = million % 1000000LL;
   2236a:	4a19      	ldr	r2, [pc, #100]	; (223d0 <scalar_decode+0xe0>)
	val->val1 = million / 1000000LL;
   2236c:	6030      	str	r0, [r6, #0]
	val->val2 = million % 1000000LL;
   2236e:	2300      	movs	r3, #0
   22370:	4620      	mov	r0, r4
   22372:	4629      	mov	r1, r5
   22374:	f7df faba 	bl	18ec <__aeabi_ldivmod>

	return 0;
   22378:	2000      	movs	r0, #0
	val->val2 = million % 1000000LL;
   2237a:	6072      	str	r2, [r6, #4]
}
   2237c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			raw = net_buf_simple_pull_u8(buf);
   2237e:	f00b f8d7 	bl	2d530 <net_buf_simple_pull_u8>
		raw = net_buf_simple_pull_le32(buf);
   22382:	4604      	mov	r4, r0
		break;
   22384:	e7ca      	b.n	2231c <scalar_decode+0x2c>
		if (repr->flags & SIGNED) {
   22386:	782b      	ldrb	r3, [r5, #0]
   22388:	0799      	lsls	r1, r3, #30
   2238a:	d503      	bpl.n	22394 <scalar_decode+0xa4>
			raw = (int16_t) net_buf_simple_pull_le16(buf);
   2238c:	f00b f8d8 	bl	2d540 <net_buf_simple_pull_le16>
   22390:	b204      	sxth	r4, r0
   22392:	e7c3      	b.n	2231c <scalar_decode+0x2c>
			raw = net_buf_simple_pull_le16(buf);
   22394:	f00b f8d4 	bl	2d540 <net_buf_simple_pull_le16>
   22398:	e7f3      	b.n	22382 <scalar_decode+0x92>
		raw = net_buf_simple_pull_le24(buf);
   2239a:	f00b f8e4 	bl	2d566 <net_buf_simple_pull_le24>
		if ((repr->flags & SIGNED) && (raw & BIT(24))) {
   2239e:	782b      	ldrb	r3, [r5, #0]
   223a0:	079a      	lsls	r2, r3, #30
		raw = net_buf_simple_pull_le24(buf);
   223a2:	4604      	mov	r4, r0
		if ((repr->flags & SIGNED) && (raw & BIT(24))) {
   223a4:	d5ba      	bpl.n	2231c <scalar_decode+0x2c>
   223a6:	01c3      	lsls	r3, r0, #7
   223a8:	d5b8      	bpl.n	2231c <scalar_decode+0x2c>
			raw |= (BIT_MASK(8) << 24);
   223aa:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
   223ae:	e7b5      	b.n	2231c <scalar_decode+0x2c>
		raw = net_buf_simple_pull_le32(buf);
   223b0:	f00b f8e7 	bl	2d582 <net_buf_simple_pull_le32>
   223b4:	e7e5      	b.n	22382 <scalar_decode+0x92>
	return (repr->flags & DIVIDE) ? (val / repr->value) :
   223b6:	4343      	muls	r3, r0
   223b8:	fb02 3301 	mla	r3, r2, r1, r3
   223bc:	fba0 4502 	umull	r4, r5, r0, r2
   223c0:	441d      	add	r5, r3
   223c2:	e7cc      	b.n	2235e <scalar_decode+0x6e>
		return -ENOMEM;
   223c4:	f06f 000b 	mvn.w	r0, #11
   223c8:	e7d8      	b.n	2237c <scalar_decode+0x8c>
		return -ERANGE;
   223ca:	f06f 0021 	mvn.w	r0, #33	; 0x21
   223ce:	e7d5      	b.n	2237c <scalar_decode+0x8c>
   223d0:	000f4240 	.word	0x000f4240

000223d4 <scalar_encode>:
{
   223d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223d8:	b085      	sub	sp, #20
	const struct scalar_repr *repr = format->user_data;
   223da:	6885      	ldr	r5, [r0, #8]
{
   223dc:	9000      	str	r0, [sp, #0]
	if (net_buf_simple_tailroom(buf) < format->size) {
   223de:	4610      	mov	r0, r2
{
   223e0:	9102      	str	r1, [sp, #8]
   223e2:	4691      	mov	r9, r2
	if (net_buf_simple_tailroom(buf) < format->size) {
   223e4:	f00b f8e2 	bl	2d5ac <net_buf_simple_tailroom>
   223e8:	9b00      	ldr	r3, [sp, #0]
   223ea:	68df      	ldr	r7, [r3, #12]
   223ec:	42b8      	cmp	r0, r7
   223ee:	d37a      	bcc.n	224e6 <scalar_encode+0x112>
	int64_t raw = div_scalar(val->val1, repr) +
   223f0:	9b02      	ldr	r3, [sp, #8]
   223f2:	681c      	ldr	r4, [r3, #0]
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   223f4:	782b      	ldrb	r3, [r5, #0]
   223f6:	9301      	str	r3, [sp, #4]
   223f8:	f013 0304 	ands.w	r3, r3, #4
	int64_t raw = div_scalar(val->val1, repr) +
   223fc:	4620      	mov	r0, r4
   223fe:	ea4f 71e4 	mov.w	r1, r4, asr #31
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   22402:	e9d5 8602 	ldrd	r8, r6, [r5, #8]
   22406:	9303      	str	r3, [sp, #12]
   22408:	d043      	beq.n	22492 <scalar_encode+0xbe>
   2240a:	fb04 f306 	mul.w	r3, r4, r6
   2240e:	fb08 3301 	mla	r3, r8, r1, r3
   22412:	fba4 4508 	umull	r4, r5, r4, r8
   22416:	441d      	add	r5, r3
		    div_scalar(val->val2, repr) / 1000000LL;
   22418:	9b02      	ldr	r3, [sp, #8]
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   2241a:	9a03      	ldr	r2, [sp, #12]
		    div_scalar(val->val2, repr) / 1000000LL;
   2241c:	685b      	ldr	r3, [r3, #4]
   2241e:	4618      	mov	r0, r3
   22420:	17d9      	asrs	r1, r3, #31
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   22422:	2a00      	cmp	r2, #0
   22424:	d03c      	beq.n	224a0 <scalar_encode+0xcc>
   22426:	435e      	muls	r6, r3
   22428:	fb08 6601 	mla	r6, r8, r1, r6
   2242c:	fba3 0108 	umull	r0, r1, r3, r8
   22430:	4431      	add	r1, r6
		    div_scalar(val->val2, repr) / 1000000LL;
   22432:	4a31      	ldr	r2, [pc, #196]	; (224f8 <scalar_encode+0x124>)
   22434:	2300      	movs	r3, #0
   22436:	f7df fa59 	bl	18ec <__aeabi_ldivmod>
	int64_t raw = div_scalar(val->val1, repr) +
   2243a:	eb10 0a04 	adds.w	sl, r0, r4
	int64_t max_value = scalar_max(format);
   2243e:	9800      	ldr	r0, [sp, #0]
	int64_t raw = div_scalar(val->val1, repr) +
   22440:	eb41 0b05 	adc.w	fp, r1, r5
	int64_t max_value = scalar_max(format);
   22444:	f00b fc14 	bl	2dc70 <scalar_max>
	if (repr->flags & SIGNED) {
   22448:	9b00      	ldr	r3, [sp, #0]
   2244a:	689b      	ldr	r3, [r3, #8]
   2244c:	781a      	ldrb	r2, [r3, #0]
   2244e:	f012 0202 	ands.w	r2, r2, #2
		return -BIT64(8 * format->size - 1);
   22452:	bf1f      	itttt	ne
   22454:	00fa      	lslne	r2, r7, #3
   22456:	f102 33ff 	addne.w	r3, r2, #4294967295
   2245a:	f04f 32ff 	movne.w	r2, #4294967295
   2245e:	409a      	lslne	r2, r3
	if (raw > max_value || raw < min_value) {
   22460:	4550      	cmp	r0, sl
   22462:	eb71 030b 	sbcs.w	r3, r1, fp
   22466:	db04      	blt.n	22472 <scalar_encode+0x9e>
   22468:	17d3      	asrs	r3, r2, #31
   2246a:	4592      	cmp	sl, r2
   2246c:	eb7b 0303 	sbcs.w	r3, fp, r3
   22470:	da08      	bge.n	22484 <scalar_encode+0xb0>
		uint32_t type_max = BIT64(8 * format->size) - 1;
   22472:	00fa      	lsls	r2, r7, #3
   22474:	2301      	movs	r3, #1
   22476:	4093      	lsls	r3, r2
		if (repr->flags & (HAS_HIGHER_THAN | HAS_INVALID)) {
   22478:	9a01      	ldr	r2, [sp, #4]
   2247a:	f012 0f30 	tst.w	r2, #48	; 0x30
   2247e:	d014      	beq.n	224aa <scalar_encode+0xd6>
			raw = type_max - 2;
   22480:	3b03      	subs	r3, #3
			raw = type_max - 1;
   22482:	469a      	mov	sl, r3
	switch (format->size) {
   22484:	3f01      	subs	r7, #1
   22486:	2f03      	cmp	r7, #3
   22488:	d833      	bhi.n	224f2 <scalar_encode+0x11e>
   2248a:	e8df f007 	tbb	[pc, r7]
   2248e:	1c13      	.short	0x1c13
   22490:	2722      	.short	0x2722
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   22492:	4642      	mov	r2, r8
   22494:	4633      	mov	r3, r6
   22496:	f7df fa29 	bl	18ec <__aeabi_ldivmod>
   2249a:	4604      	mov	r4, r0
   2249c:	460d      	mov	r5, r1
   2249e:	e7bb      	b.n	22418 <scalar_encode+0x44>
   224a0:	4642      	mov	r2, r8
   224a2:	4633      	mov	r3, r6
   224a4:	f7df fa22 	bl	18ec <__aeabi_ldivmod>
   224a8:	e7c3      	b.n	22432 <scalar_encode+0x5e>
		} else if (repr->flags & HAS_UNDEFINED) {
   224aa:	9a01      	ldr	r2, [sp, #4]
   224ac:	0712      	lsls	r2, r2, #28
   224ae:	d51d      	bpl.n	224ec <scalar_encode+0x118>
			raw = type_max - 1;
   224b0:	3b02      	subs	r3, #2
   224b2:	e7e6      	b.n	22482 <scalar_encode+0xae>
		net_buf_simple_add_u8(buf, raw);
   224b4:	fa5f f18a 	uxtb.w	r1, sl
   224b8:	4648      	mov	r0, r9
   224ba:	f00b f88b 	bl	2d5d4 <net_buf_simple_add_u8>
	return 0;
   224be:	2000      	movs	r0, #0
}
   224c0:	b005      	add	sp, #20
   224c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_simple_add_le16(buf, raw);
   224c6:	fa1f f18a 	uxth.w	r1, sl
   224ca:	4648      	mov	r0, r9
   224cc:	f00b f889 	bl	2d5e2 <net_buf_simple_add_le16>
   224d0:	e7f5      	b.n	224be <scalar_encode+0xea>
		net_buf_simple_add_le24(buf, raw);
   224d2:	4651      	mov	r1, sl
   224d4:	4648      	mov	r0, r9
   224d6:	f00b f896 	bl	2d606 <net_buf_simple_add_le24>
		break;
   224da:	e7f0      	b.n	224be <scalar_encode+0xea>
		net_buf_simple_add_le32(buf, raw);
   224dc:	4651      	mov	r1, sl
   224de:	4648      	mov	r0, r9
   224e0:	f00b f89d 	bl	2d61e <net_buf_simple_add_le32>
		break;
   224e4:	e7eb      	b.n	224be <scalar_encode+0xea>
		return -ENOMEM;
   224e6:	f06f 000b 	mvn.w	r0, #11
   224ea:	e7e9      	b.n	224c0 <scalar_encode+0xec>
			return -ERANGE;
   224ec:	f06f 0021 	mvn.w	r0, #33	; 0x21
   224f0:	e7e6      	b.n	224c0 <scalar_encode+0xec>
		return -EIO;
   224f2:	f06f 0004 	mvn.w	r0, #4
   224f6:	e7e3      	b.n	224c0 <scalar_encode+0xec>
   224f8:	000f4240 	.word	0x000f4240

000224fc <bt_mesh_sensor_column_format_get>:
}

const struct bt_mesh_sensor_format *
bt_mesh_sensor_column_format_get(const struct bt_mesh_sensor_type *type)
{
	if (type->flags & BT_MESH_SENSOR_TYPE_FLAG_SERIES &&
   224fc:	7883      	ldrb	r3, [r0, #2]
   224fe:	07db      	lsls	r3, r3, #31
   22500:	d505      	bpl.n	2250e <bt_mesh_sensor_column_format_get+0x12>
   22502:	78c3      	ldrb	r3, [r0, #3]
   22504:	2b01      	cmp	r3, #1
   22506:	d902      	bls.n	2250e <bt_mesh_sensor_column_format_get+0x12>
	    type->channel_count >= 2) {
		return type->channels[1].format;
   22508:	6843      	ldr	r3, [r0, #4]
   2250a:	6858      	ldr	r0, [r3, #4]
   2250c:	4770      	bx	lr
	}

	return &bt_mesh_sensor_format_time_decihour_8;
   2250e:	4801      	ldr	r0, [pc, #4]	; (22514 <bt_mesh_sensor_column_format_get+0x18>)
}
   22510:	4770      	bx	lr
   22512:	bf00      	nop
   22514:	000300f4 	.word	0x000300f4

00022518 <sensor_column_encode>:

int sensor_column_encode(struct net_buf_simple *buf,
			 struct bt_mesh_sensor *sensor,
			 struct bt_mesh_msg_ctx *ctx,
			 const struct bt_mesh_sensor_column *col)
{
   22518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2251c:	461e      	mov	r6, r3
	struct sensor_value values[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX];
	const struct bt_mesh_sensor_format *col_format;
	const uint64_t width_million =
		(col->end.val1 - col->start.val1) * 1000000L +
   2251e:	689c      	ldr	r4, [r3, #8]
   22520:	681b      	ldr	r3, [r3, #0]
{
   22522:	4691      	mov	r9, r2
		(col->end.val1 - col->start.val1) * 1000000L +
   22524:	1ae4      	subs	r4, r4, r3
		(col->end.val2 - col->start.val2);
   22526:	6872      	ldr	r2, [r6, #4]
   22528:	68f3      	ldr	r3, [r6, #12]
   2252a:	1a9b      	subs	r3, r3, r2
		(col->end.val1 - col->start.val1) * 1000000L +
   2252c:	4a1b      	ldr	r2, [pc, #108]	; (2259c <sensor_column_encode+0x84>)
   2252e:	fb02 3404 	mla	r4, r2, r4, r3
	const uint64_t width_million =
   22532:	17e5      	asrs	r5, r4, #31
{
   22534:	b08d      	sub	sp, #52	; 0x34
   22536:	460f      	mov	r7, r1
	const struct sensor_value width = {
		.val1 = width_million / 1000000L,
   22538:	4a18      	ldr	r2, [pc, #96]	; (2259c <sensor_column_encode+0x84>)
   2253a:	2300      	movs	r3, #0
{
   2253c:	4680      	mov	r8, r0
		.val1 = width_million / 1000000L,
   2253e:	4629      	mov	r1, r5
   22540:	4620      	mov	r0, r4
   22542:	f7df fa23 	bl	198c <__aeabi_uldivmod>
		.val2 = width_million % 1000000L,
   22546:	4a15      	ldr	r2, [pc, #84]	; (2259c <sensor_column_encode+0x84>)
	const struct sensor_value width = {
   22548:	9000      	str	r0, [sp, #0]
		.val2 = width_million % 1000000L,
   2254a:	2300      	movs	r3, #0
   2254c:	4620      	mov	r0, r4
   2254e:	4629      	mov	r1, r5
   22550:	f7df fa1c 	bl	198c <__aeabi_uldivmod>
	};
	int err;

	BT_DBG("Column width: %s", bt_mesh_sensor_ch_str(&width));

	col_format = bt_mesh_sensor_column_format_get(sensor->type);
   22554:	6838      	ldr	r0, [r7, #0]
	const struct sensor_value width = {
   22556:	9201      	str	r2, [sp, #4]
	col_format = bt_mesh_sensor_column_format_get(sensor->type);
   22558:	f7ff ffd0 	bl	224fc <bt_mesh_sensor_column_format_get>
	if (!col_format) {
   2255c:	4604      	mov	r4, r0
   2255e:	b1d0      	cbz	r0, 22596 <sensor_column_encode+0x7e>
		return -ENOTSUP;
	}

	err = sensor_ch_encode(buf, col_format, &col->start);
   22560:	4601      	mov	r1, r0
   22562:	4632      	mov	r2, r6
   22564:	4640      	mov	r0, r8
   22566:	f00b fbe8 	bl	2dd3a <sensor_ch_encode>
	if (err) {
   2256a:	b988      	cbnz	r0, 22590 <sensor_column_encode+0x78>
		return err;
	}

	/* The sensor columns are transmitted as start+width, not start+end: */
	err = sensor_ch_encode(buf, col_format, &width);
   2256c:	466a      	mov	r2, sp
   2256e:	4621      	mov	r1, r4
   22570:	4640      	mov	r0, r8
   22572:	f00b fbe2 	bl	2dd3a <sensor_ch_encode>
	if (err) {
   22576:	b958      	cbnz	r0, 22590 <sensor_column_encode+0x78>
		return err;
	}

	err = sensor->series.get(sensor, ctx, col, values);
   22578:	69bc      	ldr	r4, [r7, #24]
   2257a:	ab02      	add	r3, sp, #8
   2257c:	4632      	mov	r2, r6
   2257e:	4649      	mov	r1, r9
   22580:	4638      	mov	r0, r7
   22582:	47a0      	blx	r4
	if (err) {
   22584:	b920      	cbnz	r0, 22590 <sensor_column_encode+0x78>
		return err;
	}

	return sensor_value_encode(buf, sensor->type, values);
   22586:	aa02      	add	r2, sp, #8
   22588:	6839      	ldr	r1, [r7, #0]
   2258a:	4640      	mov	r0, r8
   2258c:	f00b fbde 	bl	2dd4c <sensor_value_encode>
}
   22590:	b00d      	add	sp, #52	; 0x34
   22592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -ENOTSUP;
   22596:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2259a:	e7f9      	b.n	22590 <sensor_column_encode+0x78>
   2259c:	000f4240 	.word	0x000f4240

000225a0 <sensor_powtime_encode>:
	100000, 110000, 121000, 133100, 146410, 161051, 177156, 194871,
	214358, 235794, 259374, 285311, 313842, 345227, 379749, 417724,
};

uint8_t sensor_powtime_encode(uint64_t raw)
{
   225a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (raw == 0) {
   225a4:	ea50 0301 	orrs.w	r3, r0, r1
   225a8:	d03d      	beq.n	22626 <sensor_powtime_encode+0x86>
	}

	/* Search through the lookup table to find the highest encoding lower
	 * than the raw value.
	 */
	uint64_t raw_us = raw * USEC_PER_MSEC;
   225aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   225ae:	fba0 6703 	umull	r6, r7, r0, r3
   225b2:	fb03 7701 	mla	r7, r3, r1, r7

	if (raw_us < powtime_lookup[0]) {
   225b6:	2300      	movs	r3, #0
   225b8:	f640 02c2 	movw	r2, #2242	; 0x8c2
   225bc:	42bb      	cmp	r3, r7
   225be:	bf08      	it	eq
   225c0:	42b2      	cmpeq	r2, r6
   225c2:	d232      	bcs.n	2262a <sensor_powtime_encode+0x8a>
   225c4:	491a      	ldr	r1, [pc, #104]	; (22630 <sensor_powtime_encode+0x90>)
		return 1;
	}

	const uint64_t *seed = &powtime_lookup[0];

	for (int i = 1; i < ARRAY_SIZE(powtime_lookup); ++i) {
   225c6:	2401      	movs	r4, #1
   225c8:	4688      	mov	r8, r1
		if (raw_us < powtime_lookup[i]) {
   225ca:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   225ce:	429f      	cmp	r7, r3
   225d0:	bf08      	it	eq
   225d2:	4296      	cmpeq	r6, r2
   225d4:	d220      	bcs.n	22618 <sensor_powtime_encode+0x78>
			seed = &powtime_lookup[i - 1];
   225d6:	3c01      	subs	r4, #1
   225d8:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
	}

	int i;

	for (i = 0; (i < ARRAY_SIZE(powtime_mul) &&
		     raw_us > (*seed * powtime_mul[i]) / 100000);
   225dc:	e9d4 ba00 	ldrd	fp, sl, [r4]
   225e0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 22638 <sensor_powtime_encode+0x98>
	for (i = 0; (i < ARRAY_SIZE(powtime_mul) &&
   225e4:	2500      	movs	r5, #0
		     raw_us > (*seed * powtime_mul[i]) / 100000);
   225e6:	f859 3b04 	ldr.w	r3, [r9], #4
   225ea:	4a12      	ldr	r2, [pc, #72]	; (22634 <sensor_powtime_encode+0x94>)
   225ec:	fba3 010b 	umull	r0, r1, r3, fp
   225f0:	fb03 110a 	mla	r1, r3, sl, r1
   225f4:	2300      	movs	r3, #0
   225f6:	f7df f9c9 	bl	198c <__aeabi_uldivmod>
	for (i = 0; (i < ARRAY_SIZE(powtime_mul) &&
   225fa:	42b9      	cmp	r1, r7
   225fc:	bf08      	it	eq
   225fe:	42b0      	cmpeq	r0, r6
   22600:	d202      	bcs.n	22608 <sensor_powtime_encode+0x68>
	     i++) {
   22602:	3501      	adds	r5, #1
	for (i = 0; (i < ARRAY_SIZE(powtime_mul) &&
   22604:	2d10      	cmp	r5, #16
   22606:	d1ee      	bne.n	225e6 <sensor_powtime_encode+0x46>
	}

	return ARRAY_SIZE(powtime_mul) * (seed - &powtime_lookup[0]) + i;
   22608:	eba4 0008 	sub.w	r0, r4, r8
   2260c:	10c0      	asrs	r0, r0, #3
   2260e:	eb05 1000 	add.w	r0, r5, r0, lsl #4
   22612:	b2c0      	uxtb	r0, r0
}
   22614:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 1; i < ARRAY_SIZE(powtime_lookup); ++i) {
   22618:	3401      	adds	r4, #1
   2261a:	2c10      	cmp	r4, #16
   2261c:	f101 0108 	add.w	r1, r1, #8
   22620:	d1d3      	bne.n	225ca <sensor_powtime_encode+0x2a>
	const uint64_t *seed = &powtime_lookup[0];
   22622:	4c03      	ldr	r4, [pc, #12]	; (22630 <sensor_powtime_encode+0x90>)
   22624:	e7da      	b.n	225dc <sensor_powtime_encode+0x3c>
		return 0;
   22626:	2000      	movs	r0, #0
   22628:	e7f4      	b.n	22614 <sensor_powtime_encode+0x74>
		return 1;
   2262a:	2001      	movs	r0, #1
   2262c:	e7f2      	b.n	22614 <sensor_powtime_encode+0x74>
   2262e:	bf00      	nop
   22630:	0002f358 	.word	0x0002f358
   22634:	000186a0 	.word	0x000186a0
   22638:	00030104 	.word	0x00030104

0002263c <sensor_cadence_encode>:

int sensor_cadence_encode(struct net_buf_simple *buf,
			  const struct bt_mesh_sensor_type *sensor_type,
			  uint8_t fast_period_div, uint8_t min_int,
			  const struct bt_mesh_sensor_threshold *threshold)
{
   2263c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22640:	9c06      	ldr	r4, [sp, #24]
   22642:	460f      	mov	r7, r1
	net_buf_simple_add_u8(buf, ((!!threshold->delta.type) << 7) |
   22644:	7821      	ldrb	r1, [r4, #0]
   22646:	2900      	cmp	r1, #0
   22648:	bf18      	it	ne
   2264a:	2180      	movne	r1, #128	; 0x80
					   (BIT_MASK(7) & fast_period_div));
   2264c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	net_buf_simple_add_u8(buf, ((!!threshold->delta.type) << 7) |
   22650:	4311      	orrs	r1, r2
{
   22652:	4605      	mov	r5, r0
   22654:	4698      	mov	r8, r3
	net_buf_simple_add_u8(buf, ((!!threshold->delta.type) << 7) |
   22656:	f00a ffbd 	bl	2d5d4 <net_buf_simple_add_u8>

	const struct bt_mesh_sensor_format *delta_format =
		(threshold->delta.type == BT_MESH_SENSOR_DELTA_PERCENT) ?
			&bt_mesh_sensor_format_percentage_delta_trigger :
   2265a:	7823      	ldrb	r3, [r4, #0]
   2265c:	2b01      	cmp	r3, #1
   2265e:	bf16      	itet	ne
   22660:	687b      	ldrne	r3, [r7, #4]
   22662:	4e17      	ldreq	r6, [pc, #92]	; (226c0 <sensor_cadence_encode+0x84>)
   22664:	681e      	ldrne	r6, [r3, #0]
			sensor_type->channels[0].format;
	int err;

	err = sensor_ch_encode(buf, delta_format, &threshold->delta.down);
   22666:	f104 020c 	add.w	r2, r4, #12
   2266a:	4631      	mov	r1, r6
   2266c:	4628      	mov	r0, r5
   2266e:	f00b fb64 	bl	2dd3a <sensor_ch_encode>
	if (err) {
   22672:	bb10      	cbnz	r0, 226ba <sensor_cadence_encode+0x7e>
		return err;
	}

	err = sensor_ch_encode(buf, delta_format, &threshold->delta.up);
   22674:	1d22      	adds	r2, r4, #4
   22676:	4631      	mov	r1, r6
   22678:	4628      	mov	r0, r5
   2267a:	f00b fb5e 	bl	2dd3a <sensor_ch_encode>
	if (err) {
   2267e:	b9e0      	cbnz	r0, 226ba <sensor_cadence_encode+0x7e>
		return err;
	}

	net_buf_simple_add_u8(buf, min_int);
   22680:	4641      	mov	r1, r8
   22682:	4628      	mov	r0, r5
   22684:	f00a ffa6 	bl	2d5d4 <net_buf_simple_add_u8>

	/* Flip the order if the cadence is fast outside. */
	const struct sensor_value *first, *second;

	if (threshold->range.cadence == BT_MESH_SENSOR_CADENCE_FAST) {
   22688:	7d23      	ldrb	r3, [r4, #20]
   2268a:	f104 0220 	add.w	r2, r4, #32
   2268e:	2b01      	cmp	r3, #1
   22690:	bf08      	it	eq
   22692:	4613      	moveq	r3, r2
   22694:	f104 0618 	add.w	r6, r4, #24
		first = &threshold->range.low;
   22698:	bf04      	itt	eq
   2269a:	4632      	moveq	r2, r6
		second = &threshold->range.high;
   2269c:	461e      	moveq	r6, r3
	} else {
		first = &threshold->range.high;
		second = &threshold->range.low;
	}

	err = sensor_ch_encode(buf, sensor_type->channels[0].format, first);
   2269e:	687b      	ldr	r3, [r7, #4]
   226a0:	4628      	mov	r0, r5
   226a2:	6819      	ldr	r1, [r3, #0]
   226a4:	f00b fb49 	bl	2dd3a <sensor_ch_encode>
	if (err) {
   226a8:	b938      	cbnz	r0, 226ba <sensor_cadence_encode+0x7e>
		return err;
	}

	return sensor_ch_encode(buf, sensor_type->channels[0].format, second);
   226aa:	687b      	ldr	r3, [r7, #4]
   226ac:	4632      	mov	r2, r6
   226ae:	4628      	mov	r0, r5
   226b0:	6819      	ldr	r1, [r3, #0]
}
   226b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sensor_ch_encode(buf, sensor_type->channels[0].format, second);
   226b6:	f00b bb40 	b.w	2dd3a <sensor_ch_encode>
}
   226ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   226be:	bf00      	nop
   226c0:	000300d4 	.word	0x000300d4

000226c4 <sensor_cadence_decode>:

int sensor_cadence_decode(struct net_buf_simple *buf,
			  const struct bt_mesh_sensor_type *sensor_type,
			  uint8_t *fast_period_div, uint8_t *min_int,
			  struct bt_mesh_sensor_threshold *threshold)
{
   226c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   226c8:	9c06      	ldr	r4, [sp, #24]
   226ca:	4616      	mov	r6, r2
   226cc:	461f      	mov	r7, r3
   226ce:	4605      	mov	r5, r0
   226d0:	4688      	mov	r8, r1
	const struct bt_mesh_sensor_format *delta_format;
	uint8_t div_and_type;
	int err;

	div_and_type = net_buf_simple_pull_u8(buf);
   226d2:	f00a ff2d 	bl	2d530 <net_buf_simple_pull_u8>
	threshold->delta.type = div_and_type >> 7;
   226d6:	09c3      	lsrs	r3, r0, #7
   226d8:	7023      	strb	r3, [r4, #0]
	*fast_period_div = div_and_type & BIT_MASK(7);
	if (*fast_period_div > BT_MESH_SENSOR_PERIOD_DIV_MAX) {
   226da:	f010 0f70 	tst.w	r0, #112	; 0x70
	*fast_period_div = div_and_type & BIT_MASK(7);
   226de:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   226e2:	7033      	strb	r3, [r6, #0]
	if (*fast_period_div > BT_MESH_SENSOR_PERIOD_DIV_MAX) {
   226e4:	d004      	beq.n	226f0 <sensor_cadence_decode+0x2c>
		return -EINVAL;
   226e6:	f06f 0315 	mvn.w	r3, #21
	} else {
		threshold->range.cadence = BT_MESH_SENSOR_CADENCE_FAST;
	}

	return 0;
}
   226ea:	4618      	mov	r0, r3
   226ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			       &bt_mesh_sensor_format_percentage_delta_trigger :
   226f0:	7823      	ldrb	r3, [r4, #0]
   226f2:	2b01      	cmp	r3, #1
   226f4:	bf16      	itet	ne
   226f6:	f8d8 3004 	ldrne.w	r3, [r8, #4]
   226fa:	4e23      	ldreq	r6, [pc, #140]	; (22788 <sensor_cadence_decode+0xc4>)
   226fc:	681e      	ldrne	r6, [r3, #0]
	err = sensor_ch_decode(buf, delta_format, &threshold->delta.down);
   226fe:	f104 020c 	add.w	r2, r4, #12
   22702:	4631      	mov	r1, r6
   22704:	4628      	mov	r0, r5
   22706:	f00b fb37 	bl	2dd78 <sensor_ch_decode>
	if (err) {
   2270a:	4603      	mov	r3, r0
   2270c:	2800      	cmp	r0, #0
   2270e:	d1ec      	bne.n	226ea <sensor_cadence_decode+0x26>
	err = sensor_ch_decode(buf, delta_format, &threshold->delta.up);
   22710:	1d22      	adds	r2, r4, #4
   22712:	4631      	mov	r1, r6
   22714:	4628      	mov	r0, r5
   22716:	f00b fb2f 	bl	2dd78 <sensor_ch_decode>
	if (err) {
   2271a:	4603      	mov	r3, r0
   2271c:	2800      	cmp	r0, #0
   2271e:	d1e4      	bne.n	226ea <sensor_cadence_decode+0x26>
	*min_int = net_buf_simple_pull_u8(buf);
   22720:	4628      	mov	r0, r5
   22722:	f00a ff05 	bl	2d530 <net_buf_simple_pull_u8>
	if (*min_int > BT_MESH_SENSOR_INTERVAL_MAX) {
   22726:	281a      	cmp	r0, #26
	*min_int = net_buf_simple_pull_u8(buf);
   22728:	7038      	strb	r0, [r7, #0]
	if (*min_int > BT_MESH_SENSOR_INTERVAL_MAX) {
   2272a:	d8dc      	bhi.n	226e6 <sensor_cadence_decode+0x22>
	err = sensor_ch_decode(buf, sensor_type->channels[0].format,
   2272c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22730:	f104 0718 	add.w	r7, r4, #24
   22734:	6819      	ldr	r1, [r3, #0]
   22736:	463a      	mov	r2, r7
   22738:	4628      	mov	r0, r5
   2273a:	f00b fb1d 	bl	2dd78 <sensor_ch_decode>
	if (err) {
   2273e:	4603      	mov	r3, r0
   22740:	2800      	cmp	r0, #0
   22742:	d1d2      	bne.n	226ea <sensor_cadence_decode+0x26>
	err = sensor_ch_decode(buf, sensor_type->channels[0].format,
   22744:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22748:	f104 0620 	add.w	r6, r4, #32
   2274c:	6819      	ldr	r1, [r3, #0]
   2274e:	4632      	mov	r2, r6
   22750:	4628      	mov	r0, r5
   22752:	f00b fb11 	bl	2dd78 <sensor_ch_decode>
	if (err) {
   22756:	4603      	mov	r3, r0
   22758:	2800      	cmp	r0, #0
   2275a:	d1c6      	bne.n	226ea <sensor_cadence_decode+0x26>
	if (threshold->range.high.val1 < threshold->range.low.val1 ||
   2275c:	6a22      	ldr	r2, [r4, #32]
   2275e:	69a1      	ldr	r1, [r4, #24]
   22760:	428a      	cmp	r2, r1
   22762:	db04      	blt.n	2276e <sensor_cadence_decode+0xaa>
   22764:	d10d      	bne.n	22782 <sensor_cadence_decode+0xbe>
	    (threshold->range.high.val1 == threshold->range.low.val1 &&
   22766:	6a60      	ldr	r0, [r4, #36]	; 0x24
   22768:	69e1      	ldr	r1, [r4, #28]
   2276a:	4288      	cmp	r0, r1
   2276c:	da09      	bge.n	22782 <sensor_cadence_decode+0xbe>
		threshold->range.high = threshold->range.low;
   2276e:	e897 0003 	ldmia.w	r7, {r0, r1}
		temp = threshold->range.high;
   22772:	6a65      	ldr	r5, [r4, #36]	; 0x24
		threshold->range.high = threshold->range.low;
   22774:	e886 0003 	stmia.w	r6, {r0, r1}
		threshold->range.low = temp;
   22778:	e9c4 2506 	strd	r2, r5, [r4, #24]
		threshold->range.cadence = BT_MESH_SENSOR_CADENCE_NORMAL;
   2277c:	2200      	movs	r2, #0
		threshold->range.cadence = BT_MESH_SENSOR_CADENCE_FAST;
   2277e:	7522      	strb	r2, [r4, #20]
   22780:	e7b3      	b.n	226ea <sensor_cadence_decode+0x26>
   22782:	2201      	movs	r2, #1
   22784:	e7fb      	b.n	2277e <sensor_cadence_decode+0xba>
   22786:	bf00      	nop
   22788:	000300d4 	.word	0x000300d4

0002278c <sensor_cadence_update>:
	int64_t high_mill = SENSOR_MILL(&threshold->range.high);
   2278c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2278e:	f8df c074 	ldr.w	ip, [pc, #116]	; 22804 <sensor_cadence_update+0x78>
		(value->val1 == col->end.val1 && value->val2 <= col->end.val2));
}

void sensor_cadence_update(struct bt_mesh_sensor *sensor,
			   const struct sensor_value *value)
{
   22792:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int64_t high_mill = SENSOR_MILL(&threshold->range.high);
   22796:	6c04      	ldr	r4, [r0, #64]	; 0x40
	int64_t low_mill = SENSOR_MILL(&threshold->range.low);
   22798:	6b86      	ldr	r6, [r0, #56]	; 0x38
	int64_t high_mill = SENSOR_MILL(&threshold->range.high);
   2279a:	17d3      	asrs	r3, r2, #31
   2279c:	fbcc 2304 	smlal	r2, r3, ip, r4
	int64_t low_mill = SENSOR_MILL(&threshold->range.low);
   227a0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
   227a2:	17e5      	asrs	r5, r4, #31
   227a4:	fbcc 4506 	smlal	r4, r5, ip, r6
	if (high_mill == low_mill) {
   227a8:	42ab      	cmp	r3, r5
   227aa:	bf08      	it	eq
   227ac:	42a2      	cmpeq	r2, r4
   227ae:	d027      	beq.n	22800 <sensor_cadence_update+0x74>
	int64_t curr_mill = SENSOR_MILL(curr);
   227b0:	684e      	ldr	r6, [r1, #4]
   227b2:	6809      	ldr	r1, [r1, #0]
   227b4:	17f7      	asrs	r7, r6, #31
	bool in_range = (curr_mill >= MIN(low_mill, high_mill) &&
   227b6:	4294      	cmp	r4, r2
	int64_t curr_mill = SENSOR_MILL(curr);
   227b8:	fbcc 6701 	smlal	r6, r7, ip, r1
	bool in_range = (curr_mill >= MIN(low_mill, high_mill) &&
   227bc:	eb75 0c03 	sbcs.w	ip, r5, r3
   227c0:	4690      	mov	r8, r2
   227c2:	bfb8      	it	lt
   227c4:	46a0      	movlt	r8, r4
   227c6:	4699      	mov	r9, r3
   227c8:	bfb8      	it	lt
   227ca:	46a9      	movlt	r9, r5
   227cc:	4546      	cmp	r6, r8
   227ce:	eb77 0c09 	sbcs.w	ip, r7, r9
   227d2:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
   227d6:	db08      	blt.n	227ea <sensor_cadence_update+0x5e>
			 curr_mill <= MAX(low_mill, high_mill));
   227d8:	42a2      	cmp	r2, r4
   227da:	eb73 0c05 	sbcs.w	ip, r3, r5
   227de:	bfbc      	itt	lt
   227e0:	4622      	movlt	r2, r4
   227e2:	462b      	movlt	r3, r5
	bool in_range = (curr_mill >= MIN(low_mill, high_mill) &&
   227e4:	42b2      	cmp	r2, r6
   227e6:	41bb      	sbcs	r3, r7
   227e8:	da02      	bge.n	227f0 <sensor_cadence_update+0x64>
	return in_range ? threshold->range.cadence : !threshold->range.cadence;
   227ea:	fab1 f181 	clz	r1, r1
   227ee:	0949      	lsrs	r1, r1, #5
		BT_DBG("0x%04x new cadence: %s", sensor->type->id,
		       (new == BT_MESH_SENSOR_CADENCE_FAST) ? "fast" :
							      "normal");
	}

	sensor->state.fast_pub = new;
   227f0:	f890 3057 	ldrb.w	r3, [r0, #87]	; 0x57
   227f4:	f361 1304 	bfi	r3, r1, #4, #1
   227f8:	f880 3057 	strb.w	r3, [r0, #87]	; 0x57
}
   227fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_MESH_SENSOR_CADENCE_NORMAL;
   22800:	2100      	movs	r1, #0
   22802:	e7f5      	b.n	227f0 <sensor_cadence_update+0x64>
   22804:	000f4240 	.word	0x000f4240

00022808 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
   22808:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);
   2280a:	b940      	cbnz	r0, 2281e <hw_cc3xx_init+0x16>
   2280c:	4908      	ldr	r1, [pc, #32]	; (22830 <hw_cc3xx_init+0x28>)
   2280e:	4809      	ldr	r0, [pc, #36]	; (22834 <hw_cc3xx_init+0x2c>)
   22810:	2218      	movs	r2, #24
   22812:	f005 f85e 	bl	278d2 <printk>
   22816:	2118      	movs	r1, #24
   22818:	4805      	ldr	r0, [pc, #20]	; (22830 <hw_cc3xx_init+0x28>)
   2281a:	f005 fad3 	bl	27dc4 <assert_post_action>

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2281e:	f7e4 fe85 	bl	752c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   22822:	f7e4 ff37 	bl	7694 <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
   22826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   2282a:	f003 bd67 	b.w	262fc <nrf_cc3xx_platform_init>
   2282e:	bf00      	nop
   22830:	000369a1 	.word	0x000369a1
   22834:	0003067f 	.word	0x0003067f

00022838 <__NVIC_SystemReset>:
   22838:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2283c:	4905      	ldr	r1, [pc, #20]	; (22854 <__NVIC_SystemReset+0x1c>)
   2283e:	4b06      	ldr	r3, [pc, #24]	; (22858 <__NVIC_SystemReset+0x20>)
   22840:	68ca      	ldr	r2, [r1, #12]
   22842:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   22846:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   22848:	60cb      	str	r3, [r1, #12]
   2284a:	f3bf 8f4f 	dsb	sy
    __NOP();
   2284e:	bf00      	nop
   22850:	e7fd      	b.n	2284e <__NVIC_SystemReset+0x16>
   22852:	bf00      	nop
   22854:	e000ed00 	.word	0xe000ed00
   22858:	05fa0004 	.word	0x05fa0004

0002285c <nrf52_errata_136>:
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2285c:	4b06      	ldr	r3, [pc, #24]	; (22878 <nrf52_errata_136+0x1c>)
   2285e:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22860:	3b04      	subs	r3, #4
            if (var1 == 0x08)
   22862:	681b      	ldr	r3, [r3, #0]
   22864:	2b08      	cmp	r3, #8
   22866:	d104      	bne.n	22872 <nrf52_errata_136+0x16>
                switch(var2)
   22868:	2803      	cmp	r0, #3
   2286a:	bf8c      	ite	hi
   2286c:	2000      	movhi	r0, #0
   2286e:	2001      	movls	r0, #1
   22870:	4770      	bx	lr
        return false;
   22872:	2000      	movs	r0, #0
}
   22874:	4770      	bx	lr
   22876:	bf00      	nop
   22878:	10000134 	.word	0x10000134

0002287c <nrf52_errata_103>:
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2287c:	4b05      	ldr	r3, [pc, #20]	; (22894 <nrf52_errata_103+0x18>)
   2287e:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22880:	3b04      	subs	r3, #4
            if (var1 == 0x08)
   22882:	681b      	ldr	r3, [r3, #0]
   22884:	2b08      	cmp	r3, #8
                switch(var2)
   22886:	bf06      	itte	eq
   22888:	fab0 f080 	clzeq	r0, r0
   2288c:	0940      	lsreq	r0, r0, #5
        return false;
   2288e:	2000      	movne	r0, #0
}
   22890:	4770      	bx	lr
   22892:	bf00      	nop
   22894:	10000134 	.word	0x10000134

00022898 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   22898:	4a02      	ldr	r2, [pc, #8]	; (228a4 <nvmc_wait+0xc>)
   2289a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   2289e:	2b00      	cmp	r3, #0
   228a0:	d0fb      	beq.n	2289a <nvmc_wait+0x2>
}
   228a2:	4770      	bx	lr
   228a4:	4001e000 	.word	0x4001e000

000228a8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   228a8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   228aa:	f7ff ffd7 	bl	2285c <nrf52_errata_136>
   228ae:	b140      	cbz	r0, 228c2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   228b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   228b4:	2200      	movs	r2, #0
   228b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   228ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   228be:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   228c2:	f7ff ffcb 	bl	2285c <nrf52_errata_136>
   228c6:	2800      	cmp	r0, #0
   228c8:	d046      	beq.n	22958 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   228ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   228ce:	4b57      	ldr	r3, [pc, #348]	; (22a2c <SystemInit+0x184>)
   228d0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   228d4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   228d8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   228dc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   228e0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   228e4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   228e8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   228ec:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   228f0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   228f4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   228f8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   228fc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   22900:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   22904:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   22908:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   2290c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   22910:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   22914:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   22918:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   2291c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   22920:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   22924:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   22928:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   2292c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   22930:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   22934:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   22938:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   2293c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   22940:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   22944:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   22948:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   2294c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   22950:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   22954:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   22958:	f7ff ff90 	bl	2287c <nrf52_errata_103>
   2295c:	b110      	cbz	r0, 22964 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   2295e:	4b34      	ldr	r3, [pc, #208]	; (22a30 <SystemInit+0x188>)
   22960:	4a34      	ldr	r2, [pc, #208]	; (22a34 <SystemInit+0x18c>)
   22962:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   22964:	f7ff ff8a 	bl	2287c <nrf52_errata_103>
   22968:	b118      	cbz	r0, 22972 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   2296a:	4b33      	ldr	r3, [pc, #204]	; (22a38 <SystemInit+0x190>)
   2296c:	22fb      	movs	r2, #251	; 0xfb
   2296e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   22972:	f7ff ff83 	bl	2287c <nrf52_errata_103>
   22976:	b148      	cbz	r0, 2298c <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   22978:	4930      	ldr	r1, [pc, #192]	; (22a3c <SystemInit+0x194>)
   2297a:	4b31      	ldr	r3, [pc, #196]	; (22a40 <SystemInit+0x198>)
   2297c:	680a      	ldr	r2, [r1, #0]
   2297e:	681b      	ldr	r3, [r3, #0]
   22980:	f022 020f 	bic.w	r2, r2, #15
   22984:	f003 030f 	and.w	r3, r3, #15
   22988:	4313      	orrs	r3, r2
   2298a:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   2298c:	f7ff ff76 	bl	2287c <nrf52_errata_103>
   22990:	b118      	cbz	r0, 2299a <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   22992:	4b2c      	ldr	r3, [pc, #176]	; (22a44 <SystemInit+0x19c>)
   22994:	f44f 7200 	mov.w	r2, #512	; 0x200
   22998:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   2299a:	f7ff ff5f 	bl	2285c <nrf52_errata_136>
   2299e:	b148      	cbz	r0, 229b4 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   229a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   229a4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   229a8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   229aa:	bf44      	itt	mi
   229ac:	f06f 0201 	mvnmi.w	r2, #1
   229b0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   229b4:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   229b8:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   229bc:	07db      	lsls	r3, r3, #31
   229be:	d514      	bpl.n	229ea <SystemInit+0x142>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   229c0:	4821      	ldr	r0, [pc, #132]	; (22a48 <SystemInit+0x1a0>)
   229c2:	2301      	movs	r3, #1
   229c4:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   229c8:	f7ff ff66 	bl	22898 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   229cc:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   229d0:	f023 0301 	bic.w	r3, r3, #1
   229d4:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   229d8:	f7ff ff5e 	bl	22898 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   229dc:	2300      	movs	r3, #0
   229de:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   229e2:	f7ff ff59 	bl	22898 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   229e6:	f7ff ff27 	bl	22838 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   229ea:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   229ee:	2b00      	cmp	r3, #0
   229f0:	db03      	blt.n	229fa <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   229f2:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   229f6:	2b00      	cmp	r3, #0
   229f8:	da14      	bge.n	22a24 <SystemInit+0x17c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   229fa:	4913      	ldr	r1, [pc, #76]	; (22a48 <SystemInit+0x1a0>)
   229fc:	2301      	movs	r3, #1
   229fe:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   22a02:	f7ff ff49 	bl	22898 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   22a06:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   22a0a:	2412      	movs	r4, #18
   22a0c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   22a10:	f7ff ff42 	bl	22898 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   22a14:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   22a18:	f7ff ff3e 	bl	22898 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   22a1c:	2300      	movs	r3, #0
   22a1e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   22a22:	e7de      	b.n	229e2 <SystemInit+0x13a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   22a24:	4b09      	ldr	r3, [pc, #36]	; (22a4c <SystemInit+0x1a4>)
   22a26:	4a0a      	ldr	r2, [pc, #40]	; (22a50 <SystemInit+0x1a8>)
   22a28:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   22a2a:	bd10      	pop	{r4, pc}
   22a2c:	4000c000 	.word	0x4000c000
   22a30:	4000568c 	.word	0x4000568c
   22a34:	00038148 	.word	0x00038148
   22a38:	4000f000 	.word	0x4000f000
   22a3c:	40000ee4 	.word	0x40000ee4
   22a40:	10000258 	.word	0x10000258
   22a44:	40029640 	.word	0x40029640
   22a48:	4001e000 	.word	0x4001e000
   22a4c:	200019b4 	.word	0x200019b4
   22a50:	03d09000 	.word	0x03d09000

00022a54 <nrf_clock_is_running.constprop.2>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   22a54:	b508      	push	{r3, lr}
    switch (domain)
   22a56:	b170      	cbz	r0, 22a76 <nrf_clock_is_running.constprop.2+0x22>
   22a58:	2801      	cmp	r0, #1
   22a5a:	d01b      	beq.n	22a94 <nrf_clock_is_running.constprop.2+0x40>
            NRFX_ASSERT(0);
   22a5c:	f240 3242 	movw	r2, #834	; 0x342
   22a60:	4913      	ldr	r1, [pc, #76]	; (22ab0 <nrf_clock_is_running.constprop.2+0x5c>)
   22a62:	4814      	ldr	r0, [pc, #80]	; (22ab4 <nrf_clock_is_running.constprop.2+0x60>)
   22a64:	f004 ff35 	bl	278d2 <printk>
   22a68:	4811      	ldr	r0, [pc, #68]	; (22ab0 <nrf_clock_is_running.constprop.2+0x5c>)
   22a6a:	f240 3142 	movw	r1, #834	; 0x342
   22a6e:	f005 f9a9 	bl	27dc4 <assert_post_action>
            return false;
   22a72:	2000      	movs	r0, #0
   22a74:	e00d      	b.n	22a92 <nrf_clock_is_running.constprop.2+0x3e>
            if (p_clk_src != NULL)
   22a76:	b131      	cbz	r1, 22a86 <nrf_clock_is_running.constprop.2+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   22a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22a7c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   22a80:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   22a84:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   22a86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22a8a:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   22a8e:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   22a92:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   22a94:	b131      	cbz	r1, 22aa4 <nrf_clock_is_running.constprop.2+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   22a96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22a9a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   22a9e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   22aa2:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   22aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22aa8:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
   22aac:	e7ef      	b.n	22a8e <nrf_clock_is_running.constprop.2+0x3a>
   22aae:	bf00      	nop
   22ab0:	000369d8 	.word	0x000369d8
   22ab4:	0003067f 	.word	0x0003067f

00022ab8 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   22ab8:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   22aba:	4604      	mov	r4, r0
   22abc:	b940      	cbnz	r0, 22ad0 <nrfx_clock_init+0x18>
   22abe:	4909      	ldr	r1, [pc, #36]	; (22ae4 <nrfx_clock_init+0x2c>)
   22ac0:	4809      	ldr	r0, [pc, #36]	; (22ae8 <nrfx_clock_init+0x30>)
   22ac2:	22b3      	movs	r2, #179	; 0xb3
   22ac4:	f004 ff05 	bl	278d2 <printk>
   22ac8:	21b3      	movs	r1, #179	; 0xb3
   22aca:	4806      	ldr	r0, [pc, #24]	; (22ae4 <nrfx_clock_init+0x2c>)
   22acc:	f005 f97a 	bl	27dc4 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   22ad0:	4b06      	ldr	r3, [pc, #24]	; (22aec <nrfx_clock_init+0x34>)
   22ad2:	791a      	ldrb	r2, [r3, #4]
   22ad4:	b922      	cbnz	r2, 22ae0 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   22ad6:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   22ad8:	4805      	ldr	r0, [pc, #20]	; (22af0 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   22ada:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   22adc:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   22ade:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   22ae0:	4804      	ldr	r0, [pc, #16]	; (22af4 <nrfx_clock_init+0x3c>)
    return err_code;
   22ae2:	e7fc      	b.n	22ade <nrfx_clock_init+0x26>
   22ae4:	00036a0c 	.word	0x00036a0c
   22ae8:	0003067f 	.word	0x0003067f
   22aec:	200053f4 	.word	0x200053f4
   22af0:	0bad0000 	.word	0x0bad0000
   22af4:	0bad000c 	.word	0x0bad000c

00022af8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   22af8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22afa:	4b0a      	ldr	r3, [pc, #40]	; (22b24 <nrfx_clock_enable+0x2c>)
   22afc:	791b      	ldrb	r3, [r3, #4]
   22afe:	b943      	cbnz	r3, 22b12 <nrfx_clock_enable+0x1a>
   22b00:	4909      	ldr	r1, [pc, #36]	; (22b28 <nrfx_clock_enable+0x30>)
   22b02:	480a      	ldr	r0, [pc, #40]	; (22b2c <nrfx_clock_enable+0x34>)
   22b04:	22cc      	movs	r2, #204	; 0xcc
   22b06:	f004 fee4 	bl	278d2 <printk>
   22b0a:	21cc      	movs	r1, #204	; 0xcc
   22b0c:	4806      	ldr	r0, [pc, #24]	; (22b28 <nrfx_clock_enable+0x30>)
   22b0e:	f005 f959 	bl	27dc4 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   22b12:	2000      	movs	r0, #0
   22b14:	f7e4 ffe6 	bl	7ae4 <arch_irq_is_enabled>
   22b18:	b918      	cbnz	r0, 22b22 <nrfx_clock_enable+0x2a>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   22b1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   22b1e:	f7e4 bfbd 	b.w	7a9c <arch_irq_enable>
   22b22:	bd08      	pop	{r3, pc}
   22b24:	200053f4 	.word	0x200053f4
   22b28:	00036a0c 	.word	0x00036a0c
   22b2c:	0003067f 	.word	0x0003067f

00022b30 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22b30:	4b21      	ldr	r3, [pc, #132]	; (22bb8 <nrfx_clock_start+0x88>)
   22b32:	791b      	ldrb	r3, [r3, #4]
{
   22b34:	b513      	push	{r0, r1, r4, lr}
   22b36:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22b38:	b953      	cbnz	r3, 22b50 <nrfx_clock_start+0x20>
   22b3a:	4920      	ldr	r1, [pc, #128]	; (22bbc <nrfx_clock_start+0x8c>)
   22b3c:	4820      	ldr	r0, [pc, #128]	; (22bc0 <nrfx_clock_start+0x90>)
   22b3e:	f44f 7284 	mov.w	r2, #264	; 0x108
   22b42:	f004 fec6 	bl	278d2 <printk>
   22b46:	f44f 7184 	mov.w	r1, #264	; 0x108
   22b4a:	481c      	ldr	r0, [pc, #112]	; (22bbc <nrfx_clock_start+0x8c>)
   22b4c:	f005 f93a 	bl	27dc4 <assert_post_action>
    switch (domain)
   22b50:	b16c      	cbz	r4, 22b6e <nrfx_clock_start+0x3e>
   22b52:	2c01      	cmp	r4, #1
   22b54:	d026      	beq.n	22ba4 <nrfx_clock_start+0x74>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   22b56:	f44f 729d 	mov.w	r2, #314	; 0x13a
   22b5a:	4918      	ldr	r1, [pc, #96]	; (22bbc <nrfx_clock_start+0x8c>)
   22b5c:	4818      	ldr	r0, [pc, #96]	; (22bc0 <nrfx_clock_start+0x90>)
   22b5e:	f004 feb8 	bl	278d2 <printk>
   22b62:	f44f 719d 	mov.w	r1, #314	; 0x13a
   22b66:	4815      	ldr	r0, [pc, #84]	; (22bbc <nrfx_clock_start+0x8c>)
   22b68:	f005 f92c 	bl	27dc4 <assert_post_action>
            break;
    }
}
   22b6c:	e016      	b.n	22b9c <nrfx_clock_start+0x6c>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   22b6e:	a901      	add	r1, sp, #4
   22b70:	4620      	mov	r0, r4
   22b72:	f7ff ff6f 	bl	22a54 <nrf_clock_is_running.constprop.2>
   22b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22b7a:	b188      	cbz	r0, 22ba0 <nrfx_clock_start+0x70>
   22b7c:	9a01      	ldr	r2, [sp, #4]
   22b7e:	2a01      	cmp	r2, #1
   22b80:	d10e      	bne.n	22ba0 <nrfx_clock_start+0x70>
    p_reg->LFCLKSRC = (uint32_t)(source);
   22b82:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22b86:	4b0f      	ldr	r3, [pc, #60]	; (22bc4 <nrfx_clock_start+0x94>)
   22b88:	2200      	movs	r2, #0
   22b8a:	601a      	str	r2, [r3, #0]
   22b8c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   22b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22b92:	2202      	movs	r2, #2
   22b94:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22b98:	2201      	movs	r2, #1
   22b9a:	609a      	str	r2, [r3, #8]
}
   22b9c:	b002      	add	sp, #8
   22b9e:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   22ba0:	2200      	movs	r2, #0
   22ba2:	e7ee      	b.n	22b82 <nrfx_clock_start+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22ba4:	4b08      	ldr	r3, [pc, #32]	; (22bc8 <nrfx_clock_start+0x98>)
   22ba6:	2200      	movs	r2, #0
   22ba8:	601a      	str	r2, [r3, #0]
   22baa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   22bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22bb0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22bb4:	601c      	str	r4, [r3, #0]
   22bb6:	e7f1      	b.n	22b9c <nrfx_clock_start+0x6c>
   22bb8:	200053f4 	.word	0x200053f4
   22bbc:	00036a0c 	.word	0x00036a0c
   22bc0:	0003067f 	.word	0x0003067f
   22bc4:	40000104 	.word	0x40000104
   22bc8:	40000100 	.word	0x40000100

00022bcc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   22bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22bce:	4d2e      	ldr	r5, [pc, #184]	; (22c88 <nrfx_clock_stop+0xbc>)
   22bd0:	792a      	ldrb	r2, [r5, #4]
{
   22bd2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22bd4:	b952      	cbnz	r2, 22bec <nrfx_clock_stop+0x20>
   22bd6:	492d      	ldr	r1, [pc, #180]	; (22c8c <nrfx_clock_stop+0xc0>)
   22bd8:	482d      	ldr	r0, [pc, #180]	; (22c90 <nrfx_clock_stop+0xc4>)
   22bda:	f240 1241 	movw	r2, #321	; 0x141
   22bde:	f004 fe78 	bl	278d2 <printk>
   22be2:	f240 1141 	movw	r1, #321	; 0x141
   22be6:	4829      	ldr	r0, [pc, #164]	; (22c8c <nrfx_clock_stop+0xc0>)
   22be8:	f005 f8ec 	bl	27dc4 <assert_post_action>
    switch (domain)
   22bec:	b174      	cbz	r4, 22c0c <nrfx_clock_stop+0x40>
   22bee:	2c01      	cmp	r4, #1
   22bf0:	d027      	beq.n	22c42 <nrfx_clock_stop+0x76>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   22bf2:	4926      	ldr	r1, [pc, #152]	; (22c8c <nrfx_clock_stop+0xc0>)
   22bf4:	4826      	ldr	r0, [pc, #152]	; (22c90 <nrfx_clock_stop+0xc4>)
   22bf6:	f240 125d 	movw	r2, #349	; 0x15d
   22bfa:	f004 fe6a 	bl	278d2 <printk>
   22bfe:	f240 115d 	movw	r1, #349	; 0x15d
   22c02:	4822      	ldr	r0, [pc, #136]	; (22c8c <nrfx_clock_stop+0xc0>)
   22c04:	f005 f8de 	bl	27dc4 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   22c08:	b003      	add	sp, #12
   22c0a:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
   22c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22c10:	2202      	movs	r2, #2
   22c12:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22c16:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
   22c1a:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22c1e:	2201      	movs	r2, #1
   22c20:	681b      	ldr	r3, [r3, #0]
   22c22:	4b1c      	ldr	r3, [pc, #112]	; (22c94 <nrfx_clock_stop+0xc8>)
   22c24:	f242 7410 	movw	r4, #10000	; 0x2710
   22c28:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   22c2a:	2100      	movs	r1, #0
   22c2c:	4608      	mov	r0, r1
   22c2e:	f7ff ff11 	bl	22a54 <nrf_clock_is_running.constprop.2>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   22c32:	2800      	cmp	r0, #0
   22c34:	d0e8      	beq.n	22c08 <nrfx_clock_stop+0x3c>
   22c36:	2001      	movs	r0, #1
   22c38:	f00b f8f4 	bl	2de24 <nrfx_busy_wait>
   22c3c:	3c01      	subs	r4, #1
   22c3e:	d1f4      	bne.n	22c2a <nrfx_clock_stop+0x5e>
   22c40:	e7e2      	b.n	22c08 <nrfx_clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   22c42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22c46:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   22c48:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22c4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   22c50:	f503 7380 	add.w	r3, r3, #256	; 0x100
   22c54:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22c56:	4b10      	ldr	r3, [pc, #64]	; (22c98 <nrfx_clock_stop+0xcc>)
   22c58:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   22c5a:	f88d 4007 	strb.w	r4, [sp, #7]
   22c5e:	f242 7410 	movw	r4, #10000	; 0x2710
   22c62:	f10d 0107 	add.w	r1, sp, #7
   22c66:	2001      	movs	r0, #1
   22c68:	f7ff fef4 	bl	22a54 <nrf_clock_is_running.constprop.2>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   22c6c:	b910      	cbnz	r0, 22c74 <nrfx_clock_stop+0xa8>
            m_clock_cb.hfclk_started = false;
   22c6e:	2300      	movs	r3, #0
   22c70:	716b      	strb	r3, [r5, #5]
   22c72:	e7c9      	b.n	22c08 <nrfx_clock_stop+0x3c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   22c74:	f89d 0007 	ldrb.w	r0, [sp, #7]
   22c78:	2801      	cmp	r0, #1
   22c7a:	d1f8      	bne.n	22c6e <nrfx_clock_stop+0xa2>
   22c7c:	f00b f8d2 	bl	2de24 <nrfx_busy_wait>
   22c80:	3c01      	subs	r4, #1
   22c82:	d1ee      	bne.n	22c62 <nrfx_clock_stop+0x96>
   22c84:	e7f3      	b.n	22c6e <nrfx_clock_stop+0xa2>
   22c86:	bf00      	nop
   22c88:	200053f4 	.word	0x200053f4
   22c8c:	00036a0c 	.word	0x00036a0c
   22c90:	0003067f 	.word	0x0003067f
   22c94:	4000000c 	.word	0x4000000c
   22c98:	40000004 	.word	0x40000004

00022c9c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22c9c:	4b16      	ldr	r3, [pc, #88]	; (22cf8 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   22c9e:	b507      	push	{r0, r1, r2, lr}
   22ca0:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   22ca2:	b16a      	cbz	r2, 22cc0 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22ca4:	2200      	movs	r2, #0
   22ca6:	601a      	str	r2, [r3, #0]
   22ca8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   22caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22cae:	2201      	movs	r2, #1
   22cb0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   22cb4:	4b11      	ldr	r3, [pc, #68]	; (22cfc <nrfx_power_clock_irq_handler+0x60>)
   22cb6:	7958      	ldrb	r0, [r3, #5]
   22cb8:	b910      	cbnz	r0, 22cc0 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   22cba:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   22cbc:	681b      	ldr	r3, [r3, #0]
   22cbe:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22cc0:	4b0f      	ldr	r3, [pc, #60]	; (22d00 <nrfx_power_clock_irq_handler+0x64>)
   22cc2:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   22cc4:	b16a      	cbz	r2, 22ce2 <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22cc6:	2000      	movs	r0, #0
   22cc8:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   22cca:	a901      	add	r1, sp, #4
   22ccc:	681b      	ldr	r3, [r3, #0]
   22cce:	f7ff fec1 	bl	22a54 <nrf_clock_is_running.constprop.2>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   22cd2:	9a01      	ldr	r2, [sp, #4]
   22cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22cd8:	b932      	cbnz	r2, 22ce8 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   22cda:	2201      	movs	r2, #1
   22cdc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22ce0:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   22ce2:	b003      	add	sp, #12
   22ce4:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   22ce8:	2202      	movs	r2, #2
   22cea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   22cee:	4b03      	ldr	r3, [pc, #12]	; (22cfc <nrfx_power_clock_irq_handler+0x60>)
   22cf0:	2001      	movs	r0, #1
   22cf2:	681b      	ldr	r3, [r3, #0]
   22cf4:	4798      	blx	r3
}
   22cf6:	e7f4      	b.n	22ce2 <nrfx_power_clock_irq_handler+0x46>
   22cf8:	40000100 	.word	0x40000100
   22cfc:	200053f4 	.word	0x200053f4
   22d00:	40000104 	.word	0x40000104

00022d04 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   22d04:	2301      	movs	r3, #1
   22d06:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   22d0a:	f010 0fff 	tst.w	r0, #255	; 0xff
   22d0e:	d012      	beq.n	22d36 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   22d10:	f04f 0320 	mov.w	r3, #32
   22d14:	f3ef 8111 	mrs	r1, BASEPRI
   22d18:	f383 8811 	msr	BASEPRI, r3
   22d1c:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   22d20:	4a06      	ldr	r2, [pc, #24]	; (22d3c <nrfx_gpiote_channel_free+0x38>)
   22d22:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   22d24:	ea23 0000 	bic.w	r0, r3, r0
   22d28:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   22d2a:	f381 8811 	msr	BASEPRI, r1
   22d2e:	f3bf 8f6f 	isb	sy
   22d32:	4803      	ldr	r0, [pc, #12]	; (22d40 <nrfx_gpiote_channel_free+0x3c>)
   22d34:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   22d36:	4803      	ldr	r0, [pc, #12]	; (22d44 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   22d38:	4770      	bx	lr
   22d3a:	bf00      	nop
   22d3c:	200053fc 	.word	0x200053fc
   22d40:	0bad0000 	.word	0x0bad0000
   22d44:	0bad0004 	.word	0x0bad0004

00022d48 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   22d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d4c:	4686      	mov	lr, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   22d4e:	4e16      	ldr	r6, [pc, #88]	; (22da8 <nrfx_gpiote_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   22d50:	4816      	ldr	r0, [pc, #88]	; (22dac <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   22d52:	4f17      	ldr	r7, [pc, #92]	; (22db0 <nrfx_gpiote_channel_alloc+0x68>)
{
   22d54:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   22d56:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   22d58:	2501      	movs	r5, #1
   22d5a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   22d5c:	f04f 0120 	mov.w	r1, #32
   22d60:	f3ef 8811 	mrs	r8, BASEPRI
   22d64:	f381 8811 	msr	BASEPRI, r1
   22d68:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   22d6c:	fa22 f103 	lsr.w	r1, r2, r3
   22d70:	07c9      	lsls	r1, r1, #31
   22d72:	d50b      	bpl.n	22d8c <nrfx_gpiote_channel_alloc+0x44>
    return m_cb.allocated_channels_mask & (1UL << index);
   22d74:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   22d76:	fa05 fc03 	lsl.w	ip, r5, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   22d7a:	ea11 0f0c 	tst.w	r1, ip
    m_cb.allocated_channels_mask |= (1UL << index);
   22d7e:	bf01      	itttt	eq
   22d80:	ea41 010c 	orreq.w	r1, r1, ip
   22d84:	65f1      	streq	r1, [r6, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   22d86:	4638      	moveq	r0, r7
            *p_channel = ch_idx;
   22d88:	f88e 3000 	strbeq.w	r3, [lr]
	__asm__ volatile(
   22d8c:	f388 8811 	msr	BASEPRI, r8
   22d90:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   22d94:	42b8      	cmp	r0, r7
   22d96:	d005      	beq.n	22da4 <nrfx_gpiote_channel_alloc+0x5c>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   22d98:	fa05 f303 	lsl.w	r3, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   22d9c:	439a      	bics	r2, r3
   22d9e:	f104 0401 	add.w	r4, r4, #1
   22da2:	d1da      	bne.n	22d5a <nrfx_gpiote_channel_alloc+0x12>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   22da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22da8:	200053fc 	.word	0x200053fc
   22dac:	0bad0002 	.word	0x0bad0002
   22db0:	0bad0000 	.word	0x0bad0000

00022db4 <nvmc_word_write>:
   22db4:	4a04      	ldr	r2, [pc, #16]	; (22dc8 <nvmc_word_write+0x14>)
   22db6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   22dba:	07db      	lsls	r3, r3, #31
   22dbc:	d5fb      	bpl.n	22db6 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   22dbe:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   22dc0:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   22dc4:	4770      	bx	lr
   22dc6:	bf00      	nop
   22dc8:	4001e000 	.word	0x4001e000

00022dcc <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   22dcc:	b510      	push	{r4, lr}
    NRFX_ASSERT(is_valid_address(addr, false));
   22dce:	2100      	movs	r1, #0
{
   22dd0:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));
   22dd2:	f00b f829 	bl	2de28 <is_valid_address>
   22dd6:	b950      	cbnz	r0, 22dee <nrfx_nvmc_page_erase+0x22>
   22dd8:	4911      	ldr	r1, [pc, #68]	; (22e20 <nrfx_nvmc_page_erase+0x54>)
   22dda:	4812      	ldr	r0, [pc, #72]	; (22e24 <nrfx_nvmc_page_erase+0x58>)
   22ddc:	f44f 7282 	mov.w	r2, #260	; 0x104
   22de0:	f004 fd77 	bl	278d2 <printk>
   22de4:	f44f 7182 	mov.w	r1, #260	; 0x104
   22de8:	480d      	ldr	r0, [pc, #52]	; (22e20 <nrfx_nvmc_page_erase+0x54>)
   22dea:	f004 ffeb 	bl	27dc4 <assert_post_action>
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   22dee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22df2:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   22df4:	fbb4 f3f2 	udiv	r3, r4, r2
   22df8:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   22dfc:	b973      	cbnz	r3, 22e1c <nrfx_nvmc_page_erase+0x50>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   22dfe:	4b0a      	ldr	r3, [pc, #40]	; (22e28 <nrfx_nvmc_page_erase+0x5c>)
   22e00:	2202      	movs	r2, #2
   22e02:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   22e06:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   22e0a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   22e0e:	07d2      	lsls	r2, r2, #31
   22e10:	d5fb      	bpl.n	22e0a <nrfx_nvmc_page_erase+0x3e>
    p_reg->CONFIG = (uint32_t)mode;
   22e12:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   22e14:	4805      	ldr	r0, [pc, #20]	; (22e2c <nrfx_nvmc_page_erase+0x60>)
   22e16:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   22e1a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   22e1c:	4804      	ldr	r0, [pc, #16]	; (22e30 <nrfx_nvmc_page_erase+0x64>)
   22e1e:	e7fc      	b.n	22e1a <nrfx_nvmc_page_erase+0x4e>
   22e20:	00036a49 	.word	0x00036a49
   22e24:	0003067f 	.word	0x0003067f
   22e28:	4001e000 	.word	0x4001e000
   22e2c:	0bad0000 	.word	0x0bad0000
   22e30:	0bad000a 	.word	0x0bad000a

00022e34 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   22e34:	b570      	push	{r4, r5, r6, lr}
   22e36:	460e      	mov	r6, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   22e38:	2101      	movs	r1, #1
{
   22e3a:	4605      	mov	r5, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   22e3c:	f00a fff4 	bl	2de28 <is_valid_address>
   22e40:	b950      	cbnz	r0, 22e58 <nrfx_nvmc_word_write+0x24>
   22e42:	4912      	ldr	r1, [pc, #72]	; (22e8c <nrfx_nvmc_word_write+0x58>)
   22e44:	4812      	ldr	r0, [pc, #72]	; (22e90 <nrfx_nvmc_word_write+0x5c>)
   22e46:	f44f 72c9 	mov.w	r2, #402	; 0x192
   22e4a:	f004 fd42 	bl	278d2 <printk>
   22e4e:	f44f 71c9 	mov.w	r1, #402	; 0x192
   22e52:	480e      	ldr	r0, [pc, #56]	; (22e8c <nrfx_nvmc_word_write+0x58>)
   22e54:	f004 ffb6 	bl	27dc4 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   22e58:	07ab      	lsls	r3, r5, #30
   22e5a:	d00a      	beq.n	22e72 <nrfx_nvmc_word_write+0x3e>
   22e5c:	490b      	ldr	r1, [pc, #44]	; (22e8c <nrfx_nvmc_word_write+0x58>)
   22e5e:	480c      	ldr	r0, [pc, #48]	; (22e90 <nrfx_nvmc_word_write+0x5c>)
   22e60:	f240 1293 	movw	r2, #403	; 0x193
   22e64:	f004 fd35 	bl	278d2 <printk>
   22e68:	f240 1193 	movw	r1, #403	; 0x193
   22e6c:	4807      	ldr	r0, [pc, #28]	; (22e8c <nrfx_nvmc_word_write+0x58>)
   22e6e:	f004 ffa9 	bl	27dc4 <assert_post_action>
   22e72:	4c08      	ldr	r4, [pc, #32]	; (22e94 <nrfx_nvmc_word_write+0x60>)
   22e74:	2301      	movs	r3, #1
   22e76:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   22e7a:	4631      	mov	r1, r6
   22e7c:	4628      	mov	r0, r5
   22e7e:	f7ff ff99 	bl	22db4 <nvmc_word_write>
   22e82:	2300      	movs	r3, #0
   22e84:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   22e88:	bd70      	pop	{r4, r5, r6, pc}
   22e8a:	bf00      	nop
   22e8c:	00036a49 	.word	0x00036a49
   22e90:	0003067f 	.word	0x0003067f
   22e94:	4001e000 	.word	0x4001e000

00022e98 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   22e98:	4b18      	ldr	r3, [pc, #96]	; (22efc <nrfx_ppi_channel_alloc+0x64>)
   22e9a:	681b      	ldr	r3, [r3, #0]
{
   22e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ea0:	4684      	mov	ip, r0
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   22ea2:	43db      	mvns	r3, r3
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   22ea4:	4816      	ldr	r0, [pc, #88]	; (22f00 <nrfx_ppi_channel_alloc+0x68>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   22ea6:	4e17      	ldr	r6, [pc, #92]	; (22f04 <nrfx_ppi_channel_alloc+0x6c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   22ea8:	4f17      	ldr	r7, [pc, #92]	; (22f08 <nrfx_ppi_channel_alloc+0x70>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   22eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   22eae:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   22eb0:	f04f 0e01 	mov.w	lr, #1
   22eb4:	b2e5      	uxtb	r5, r4
   22eb6:	b90b      	cbnz	r3, 22ebc <nrfx_ppi_channel_alloc+0x24>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   22eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   22ebc:	f04f 0220 	mov.w	r2, #32
   22ec0:	f3ef 8811 	mrs	r8, BASEPRI
   22ec4:	f382 8811 	msr	BASEPRI, r2
   22ec8:	f3bf 8f6f 	isb	sy
   22ecc:	fa0e f205 	lsl.w	r2, lr, r5
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   22ed0:	4213      	tst	r3, r2
   22ed2:	d007      	beq.n	22ee4 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   22ed4:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   22ed6:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   22ed8:	bf01      	itttt	eq
   22eda:	4311      	orreq	r1, r2
   22edc:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
   22ede:	f88c 5000 	strbeq.w	r5, [ip]
            err_code   = NRFX_SUCCESS;
   22ee2:	4638      	moveq	r0, r7
	__asm__ volatile(
   22ee4:	f388 8811 	msr	BASEPRI, r8
   22ee8:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   22eec:	42b8      	cmp	r0, r7
   22eee:	f104 0401 	add.w	r4, r4, #1
   22ef2:	d0e1      	beq.n	22eb8 <nrfx_ppi_channel_alloc+0x20>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   22ef4:	ea23 0302 	bic.w	r3, r3, r2
   22ef8:	e7dc      	b.n	22eb4 <nrfx_ppi_channel_alloc+0x1c>
   22efa:	bf00      	nop
   22efc:	0002ff20 	.word	0x0002ff20
   22f00:	0bad0002 	.word	0x0bad0002
   22f04:	2000545c 	.word	0x2000545c
   22f08:	0bad0000 	.word	0x0bad0000

00022f0c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22f0c:	6802      	ldr	r2, [r0, #0]
    switch (port)
   22f0e:	0953      	lsrs	r3, r2, #5
{
   22f10:	b510      	push	{r4, lr}
   22f12:	4604      	mov	r4, r0
    switch (port)
   22f14:	d02a      	beq.n	22f6c <nrf_gpio_pin_port_decode+0x60>
   22f16:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   22f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22f1c:	bf18      	it	ne
   22f1e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   22f20:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22f24:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22f26:	07db      	lsls	r3, r3, #31
   22f28:	d40a      	bmi.n	22f40 <nrf_gpio_pin_port_decode+0x34>
   22f2a:	4913      	ldr	r1, [pc, #76]	; (22f78 <nrf_gpio_pin_port_decode+0x6c>)
   22f2c:	4813      	ldr	r0, [pc, #76]	; (22f7c <nrf_gpio_pin_port_decode+0x70>)
   22f2e:	f240 221a 	movw	r2, #538	; 0x21a
   22f32:	f004 fcce 	bl	278d2 <printk>
   22f36:	f240 211a 	movw	r1, #538	; 0x21a
   22f3a:	480f      	ldr	r0, [pc, #60]	; (22f78 <nrf_gpio_pin_port_decode+0x6c>)
   22f3c:	f004 ff42 	bl	27dc4 <assert_post_action>
    uint32_t pin_number = *p_pin;
   22f40:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   22f42:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22f46:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   22f48:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22f4a:	d00c      	beq.n	22f66 <nrf_gpio_pin_port_decode+0x5a>
   22f4c:	2b01      	cmp	r3, #1
   22f4e:	d010      	beq.n	22f72 <nrf_gpio_pin_port_decode+0x66>
            NRFX_ASSERT(0);
   22f50:	4909      	ldr	r1, [pc, #36]	; (22f78 <nrf_gpio_pin_port_decode+0x6c>)
   22f52:	480a      	ldr	r0, [pc, #40]	; (22f7c <nrf_gpio_pin_port_decode+0x70>)
   22f54:	f240 221f 	movw	r2, #543	; 0x21f
   22f58:	f004 fcbb 	bl	278d2 <printk>
   22f5c:	f240 211f 	movw	r1, #543	; 0x21f
   22f60:	4805      	ldr	r0, [pc, #20]	; (22f78 <nrf_gpio_pin_port_decode+0x6c>)
   22f62:	f004 ff2f 	bl	27dc4 <assert_post_action>
        case 0: return NRF_P0;
   22f66:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   22f6a:	bd10      	pop	{r4, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   22f6c:	f04f 33ff 	mov.w	r3, #4294967295
   22f70:	e7d6      	b.n	22f20 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   22f72:	4803      	ldr	r0, [pc, #12]	; (22f80 <nrf_gpio_pin_port_decode+0x74>)
   22f74:	e7f9      	b.n	22f6a <nrf_gpio_pin_port_decode+0x5e>
   22f76:	bf00      	nop
   22f78:	0003635f 	.word	0x0003635f
   22f7c:	0003067f 	.word	0x0003067f
   22f80:	50000300 	.word	0x50000300

00022f84 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   22f84:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   22f88:	4681      	mov	r9, r0
   22f8a:	4616      	mov	r6, r2
   22f8c:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
   22f8e:	460c      	mov	r4, r1
   22f90:	b941      	cbnz	r1, 22fa4 <nrfx_spi_init+0x20>
   22f92:	4953      	ldr	r1, [pc, #332]	; (230e0 <nrfx_spi_init+0x15c>)
   22f94:	4853      	ldr	r0, [pc, #332]	; (230e4 <nrfx_spi_init+0x160>)
   22f96:	2249      	movs	r2, #73	; 0x49
   22f98:	f004 fc9b 	bl	278d2 <printk>
   22f9c:	2149      	movs	r1, #73	; 0x49
   22f9e:	4850      	ldr	r0, [pc, #320]	; (230e0 <nrfx_spi_init+0x15c>)
   22fa0:	f004 ff10 	bl	27dc4 <assert_post_action>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   22fa4:	f899 7004 	ldrb.w	r7, [r9, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   22fa8:	4d4f      	ldr	r5, [pc, #316]	; (230e8 <nrfx_spi_init+0x164>)
   22faa:	2228      	movs	r2, #40	; 0x28
   22fac:	437a      	muls	r2, r7
   22fae:	18a9      	adds	r1, r5, r2
   22fb0:	7f0b      	ldrb	r3, [r1, #28]
   22fb2:	2b00      	cmp	r3, #0
   22fb4:	f040 8092 	bne.w	230dc <nrfx_spi_init+0x158>
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   22fb8:	7b23      	ldrb	r3, [r4, #12]
    p_cb->handler = handler;
   22fba:	50ae      	str	r6, [r5, r2]
    p_cb->p_context = p_context;
   22fbc:	f8c1 8004 	str.w	r8, [r1, #4]
    if (p_config->mode <= NRF_SPI_MODE_1)
   22fc0:	2b01      	cmp	r3, #1
   22fc2:	7820      	ldrb	r0, [r4, #0]
   22fc4:	d87b      	bhi.n	230be <nrfx_spi_init+0x13a>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   22fc6:	f00a ff84 	bl	2ded2 <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   22fca:	7823      	ldrb	r3, [r4, #0]
   22fcc:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22fce:	a801      	add	r0, sp, #4
   22fd0:	f7ff ff9c 	bl	22f0c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22fd4:	9b01      	ldr	r3, [sp, #4]
   22fd6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22fda:	2201      	movs	r2, #1
   22fdc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   22fe0:	7866      	ldrb	r6, [r4, #1]
   22fe2:	2eff      	cmp	r6, #255	; 0xff
   22fe4:	d06e      	beq.n	230c4 <nrfx_spi_init+0x140>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   22fe6:	4630      	mov	r0, r6
   22fe8:	f00a ff73 	bl	2ded2 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22fec:	a801      	add	r0, sp, #4
   22fee:	9601      	str	r6, [sp, #4]
   22ff0:	f7ff ff8c 	bl	22f0c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22ff4:	9b01      	ldr	r3, [sp, #4]
   22ff6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22ffa:	2203      	movs	r2, #3
   22ffc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   23000:	f894 8002 	ldrb.w	r8, [r4, #2]
   23004:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   23008:	d05f      	beq.n	230ca <nrfx_spi_init+0x146>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2300a:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
   2300c:	f894 a00e 	ldrb.w	sl, [r4, #14]
    nrf_gpio_cfg(
   23010:	f8cd 8004 	str.w	r8, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23014:	f7ff ff7a 	bl	22f0c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   23018:	9b01      	ldr	r3, [sp, #4]
   2301a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   2301e:	ea4f 028a 	mov.w	r2, sl, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   23022:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   23026:	78e0      	ldrb	r0, [r4, #3]
   23028:	28ff      	cmp	r0, #255	; 0xff
   2302a:	d00c      	beq.n	23046 <nrfx_spi_init+0xc2>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
   2302c:	f00a ff5e 	bl	2deec <nrf_gpio_pin_set>
        nrf_gpio_cfg_output(p_config->ss_pin);
   23030:	78e3      	ldrb	r3, [r4, #3]
   23032:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23034:	a801      	add	r0, sp, #4
   23036:	f7ff ff69 	bl	22f0c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2303a:	9b01      	ldr	r3, [sp, #4]
   2303c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23040:	2203      	movs	r2, #3
   23042:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   23046:	f899 2004 	ldrb.w	r2, [r9, #4]
   2304a:	78e1      	ldrb	r1, [r4, #3]
   2304c:	2328      	movs	r3, #40	; 0x28
   2304e:	fb03 5302 	mla	r3, r3, r2, r5
   23052:	7799      	strb	r1, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   23054:	f8d9 0000 	ldr.w	r0, [r9]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   23058:	7823      	ldrb	r3, [r4, #0]
    p_reg->PSEL.SCK = sck_pin;
   2305a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   2305e:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   23060:	f8c0 650c 	str.w	r6, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   23064:	f8c0 8510 	str.w	r8, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   23068:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   2306c:	7b63      	ldrb	r3, [r4, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   2306e:	7b21      	ldrb	r1, [r4, #12]
   23070:	3300      	adds	r3, #0
   23072:	bf18      	it	ne
   23074:	2301      	movne	r3, #1
    switch (spi_mode)
   23076:	2902      	cmp	r1, #2
   23078:	d02a      	beq.n	230d0 <nrfx_spi_init+0x14c>
   2307a:	2903      	cmp	r1, #3
   2307c:	d02b      	beq.n	230d6 <nrfx_spi_init+0x152>
   2307e:	2901      	cmp	r1, #1
   23080:	d101      	bne.n	23086 <nrfx_spi_init+0x102>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   23082:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   23086:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   2308a:	2328      	movs	r3, #40	; 0x28
   2308c:	fb03 5202 	mla	r2, r3, r2, r5

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   23090:	437b      	muls	r3, r7
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   23092:	7961      	ldrb	r1, [r4, #5]
    if (p_cb->handler)
   23094:	58eb      	ldr	r3, [r5, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   23096:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   23098:	2201      	movs	r2, #1
   2309a:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
   2309e:	b11b      	cbz	r3, 230a8 <nrfx_spi_init+0x124>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   230a0:	f340 3007 	sbfx	r0, r0, #12, #8
   230a4:	f7e4 fcfa 	bl	7a9c <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   230a8:	2328      	movs	r3, #40	; 0x28
   230aa:	fb03 5507 	mla	r5, r3, r7, r5
   230ae:	2300      	movs	r3, #0
   230b0:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   230b2:	480e      	ldr	r0, [pc, #56]	; (230ec <nrfx_spi_init+0x168>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   230b4:	2301      	movs	r3, #1
   230b6:	772b      	strb	r3, [r5, #28]
}
   230b8:	b002      	add	sp, #8
   230ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   230be:	f00a ff15 	bl	2deec <nrf_gpio_pin_set>
   230c2:	e782      	b.n	22fca <nrfx_spi_init+0x46>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   230c4:	f04f 36ff 	mov.w	r6, #4294967295
   230c8:	e79a      	b.n	23000 <nrfx_spi_init+0x7c>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   230ca:	f04f 38ff 	mov.w	r8, #4294967295
   230ce:	e7aa      	b.n	23026 <nrfx_spi_init+0xa2>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   230d0:	f043 0304 	orr.w	r3, r3, #4
        break;
   230d4:	e7d7      	b.n	23086 <nrfx_spi_init+0x102>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   230d6:	f043 0306 	orr.w	r3, r3, #6
        break;
   230da:	e7d4      	b.n	23086 <nrfx_spi_init+0x102>
        return err_code;
   230dc:	4804      	ldr	r0, [pc, #16]	; (230f0 <nrfx_spi_init+0x16c>)
   230de:	e7eb      	b.n	230b8 <nrfx_spi_init+0x134>
   230e0:	00036a85 	.word	0x00036a85
   230e4:	0003067f 	.word	0x0003067f
   230e8:	20005460 	.word	0x20005460
   230ec:	0bad0000 	.word	0x0bad0000
   230f0:	0bad0005 	.word	0x0bad0005

000230f4 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   230f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   230f8:	4d50      	ldr	r5, [pc, #320]	; (2323c <nrfx_spi_xfer+0x148>)
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   230fa:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   230fc:	2328      	movs	r3, #40	; 0x28
   230fe:	fb03 5304 	mla	r3, r3, r4, r5
{
   23102:	4681      	mov	r9, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   23104:	7f1b      	ldrb	r3, [r3, #28]
{
   23106:	460e      	mov	r6, r1
   23108:	4690      	mov	r8, r2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2310a:	b953      	cbnz	r3, 23122 <nrfx_spi_xfer+0x2e>
   2310c:	494c      	ldr	r1, [pc, #304]	; (23240 <nrfx_spi_xfer+0x14c>)
   2310e:	484d      	ldr	r0, [pc, #308]	; (23244 <nrfx_spi_xfer+0x150>)
   23110:	f240 125f 	movw	r2, #351	; 0x15f
   23114:	f004 fbdd 	bl	278d2 <printk>
   23118:	f240 115f 	movw	r1, #351	; 0x15f
   2311c:	4848      	ldr	r0, [pc, #288]	; (23240 <nrfx_spi_xfer+0x14c>)
   2311e:	f004 fe51 	bl	27dc4 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   23122:	6833      	ldr	r3, [r6, #0]
   23124:	b963      	cbnz	r3, 23140 <nrfx_spi_xfer+0x4c>
   23126:	6873      	ldr	r3, [r6, #4]
   23128:	b153      	cbz	r3, 23140 <nrfx_spi_xfer+0x4c>
   2312a:	4945      	ldr	r1, [pc, #276]	; (23240 <nrfx_spi_xfer+0x14c>)
   2312c:	4845      	ldr	r0, [pc, #276]	; (23244 <nrfx_spi_xfer+0x150>)
   2312e:	f44f 72b0 	mov.w	r2, #352	; 0x160
   23132:	f004 fbce 	bl	278d2 <printk>
   23136:	f44f 71b0 	mov.w	r1, #352	; 0x160
   2313a:	4841      	ldr	r0, [pc, #260]	; (23240 <nrfx_spi_xfer+0x14c>)
   2313c:	f004 fe42 	bl	27dc4 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   23140:	68b3      	ldr	r3, [r6, #8]
   23142:	b963      	cbnz	r3, 2315e <nrfx_spi_xfer+0x6a>
   23144:	68f3      	ldr	r3, [r6, #12]
   23146:	b153      	cbz	r3, 2315e <nrfx_spi_xfer+0x6a>
   23148:	493d      	ldr	r1, [pc, #244]	; (23240 <nrfx_spi_xfer+0x14c>)
   2314a:	483e      	ldr	r0, [pc, #248]	; (23244 <nrfx_spi_xfer+0x150>)
   2314c:	f240 1261 	movw	r2, #353	; 0x161
   23150:	f004 fbbf 	bl	278d2 <printk>
   23154:	f240 1161 	movw	r1, #353	; 0x161
   23158:	4839      	ldr	r0, [pc, #228]	; (23240 <nrfx_spi_xfer+0x14c>)
   2315a:	f004 fe33 	bl	27dc4 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   2315e:	2328      	movs	r3, #40	; 0x28
   23160:	4363      	muls	r3, r4
   23162:	18ea      	adds	r2, r5, r3
   23164:	7f51      	ldrb	r1, [r2, #29]
   23166:	2900      	cmp	r1, #0
   23168:	d166      	bne.n	23238 <nrfx_spi_xfer+0x144>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   2316a:	58eb      	ldr	r3, [r5, r3]
   2316c:	b10b      	cbz	r3, 23172 <nrfx_spi_xfer+0x7e>
        {
            p_cb->transfer_in_progress = true;
   2316e:	2301      	movs	r3, #1
   23170:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   23172:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   23176:	2728      	movs	r7, #40	; 0x28
   23178:	fb07 5704 	mla	r7, r7, r4, r5
   2317c:	f107 0c0c 	add.w	ip, r7, #12
   23180:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   23184:	7fb8      	ldrb	r0, [r7, #30]
    p_cb->abort = false;
   23186:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   23188:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   2318a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   2318e:	d001      	beq.n	23194 <nrfx_spi_xfer+0xa0>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
   23190:	f00a fe9f 	bl	2ded2 <nrf_gpio_pin_clear>
    }
    if (flags)
   23194:	2328      	movs	r3, #40	; 0x28
   23196:	f1b8 0f00 	cmp.w	r8, #0
   2319a:	d006      	beq.n	231aa <nrfx_spi_xfer+0xb6>
    {
        p_cb->transfer_in_progress = false;
   2319c:	fb03 5404 	mla	r4, r3, r4, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   231a0:	4829      	ldr	r0, [pc, #164]	; (23248 <nrfx_spi_xfer+0x154>)
        p_cb->transfer_in_progress = false;
   231a2:	2300      	movs	r3, #0
   231a4:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   231a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   231aa:	f8d9 7000 	ldr.w	r7, [r9]
    p_cb->bytes_transferred = 0;
   231ae:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->INTENCLR = mask;
   231b2:	2204      	movs	r2, #4
   231b4:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
   231b8:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   231bc:	f8c7 8108 	str.w	r8, [r7, #264]	; 0x108
   231c0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   231c4:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
   231c6:	b192      	cbz	r2, 231ee <nrfx_spi_xfer+0xfa>
   231c8:	6833      	ldr	r3, [r6, #0]
   231ca:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   231cc:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   231d0:	2a01      	cmp	r2, #1
   231d2:	d90e      	bls.n	231f2 <nrfx_spi_xfer+0xfe>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   231d4:	6833      	ldr	r3, [r6, #0]
   231d6:	785b      	ldrb	r3, [r3, #1]
   231d8:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
    if (p_cb->handler)
   231dc:	2328      	movs	r3, #40	; 0x28
   231de:	4363      	muls	r3, r4
   231e0:	58ee      	ldr	r6, [r5, r3]
   231e2:	b176      	cbz	r6, 23202 <nrfx_spi_xfer+0x10e>
    p_reg->INTENSET = mask;
   231e4:	2304      	movs	r3, #4
   231e6:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   231ea:	4818      	ldr	r0, [pc, #96]	; (2324c <nrfx_spi_xfer+0x158>)
   231ec:	e7db      	b.n	231a6 <nrfx_spi_xfer+0xb2>
    nrf_spi_txd_set(p_spi,
   231ee:	7fdb      	ldrb	r3, [r3, #31]
   231f0:	e7ec      	b.n	231cc <nrfx_spi_xfer+0xd8>
    else if (p_xfer_desc->rx_length > 1)
   231f2:	68f3      	ldr	r3, [r6, #12]
   231f4:	2b01      	cmp	r3, #1
   231f6:	d9f1      	bls.n	231dc <nrfx_spi_xfer+0xe8>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   231f8:	2328      	movs	r3, #40	; 0x28
   231fa:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->TXD = data;
   231fe:	7fdb      	ldrb	r3, [r3, #31]
   23200:	e7ea      	b.n	231d8 <nrfx_spi_xfer+0xe4>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   23202:	eb04 0884 	add.w	r8, r4, r4, lsl #2
   23206:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2320a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   2320e:	2b00      	cmp	r3, #0
   23210:	d0fb      	beq.n	2320a <nrfx_spi_xfer+0x116>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23212:	f8c7 6108 	str.w	r6, [r7, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   23216:	4641      	mov	r1, r8
   23218:	4638      	mov	r0, r7
   2321a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
   2321e:	f00a fe25 	bl	2de6c <transfer_byte>
   23222:	2800      	cmp	r0, #0
   23224:	d1f1      	bne.n	2320a <nrfx_spi_xfer+0x116>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   23226:	2328      	movs	r3, #40	; 0x28
   23228:	fb03 5404 	mla	r4, r3, r4, r5
   2322c:	7fa0      	ldrb	r0, [r4, #30]
   2322e:	28ff      	cmp	r0, #255	; 0xff
   23230:	d0db      	beq.n	231ea <nrfx_spi_xfer+0xf6>
            nrf_gpio_pin_set(p_cb->ss_pin);
   23232:	f00a fe5b 	bl	2deec <nrf_gpio_pin_set>
   23236:	e7d8      	b.n	231ea <nrfx_spi_xfer+0xf6>
        return err_code;
   23238:	4805      	ldr	r0, [pc, #20]	; (23250 <nrfx_spi_xfer+0x15c>)
   2323a:	e7b4      	b.n	231a6 <nrfx_spi_xfer+0xb2>
   2323c:	20005460 	.word	0x20005460
   23240:	00036a85 	.word	0x00036a85
   23244:	0003067f 	.word	0x0003067f
   23248:	0bad0003 	.word	0x0bad0003
   2324c:	0bad0000 	.word	0x0bad0000
   23250:	0bad000b 	.word	0x0bad000b

00023254 <nrfx_spi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   23254:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_cb->handler);
   23256:	4c14      	ldr	r4, [pc, #80]	; (232a8 <nrfx_spi_1_irq_handler+0x54>)
   23258:	6823      	ldr	r3, [r4, #0]
   2325a:	b953      	cbnz	r3, 23272 <nrfx_spi_1_irq_handler+0x1e>
   2325c:	4913      	ldr	r1, [pc, #76]	; (232ac <nrfx_spi_1_irq_handler+0x58>)
   2325e:	4814      	ldr	r0, [pc, #80]	; (232b0 <nrfx_spi_1_irq_handler+0x5c>)
   23260:	f44f 72ca 	mov.w	r2, #404	; 0x194
   23264:	f004 fb35 	bl	278d2 <printk>
   23268:	f44f 71ca 	mov.w	r1, #404	; 0x194
   2326c:	480f      	ldr	r0, [pc, #60]	; (232ac <nrfx_spi_1_irq_handler+0x58>)
   2326e:	f004 fda9 	bl	27dc4 <assert_post_action>
   23272:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   23276:	2300      	movs	r3, #0
   23278:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
   2327c:	490a      	ldr	r1, [pc, #40]	; (232a8 <nrfx_spi_1_irq_handler+0x54>)
   2327e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   23282:	f00a fdf3 	bl	2de6c <transfer_byte>
   23286:	b968      	cbnz	r0, 232a4 <nrfx_spi_1_irq_handler+0x50>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   23288:	7fa0      	ldrb	r0, [r4, #30]
   2328a:	28ff      	cmp	r0, #255	; 0xff
   2328c:	d001      	beq.n	23292 <nrfx_spi_1_irq_handler+0x3e>
        nrf_gpio_pin_set(p_cb->ss_pin);
   2328e:	f00a fe2d 	bl	2deec <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   23292:	2300      	movs	r3, #0
   23294:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   23296:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   23298:	4806      	ldr	r0, [pc, #24]	; (232b4 <nrfx_spi_1_irq_handler+0x60>)
   2329a:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   2329e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   232a2:	4718      	bx	r3
}
   232a4:	bd10      	pop	{r4, pc}
   232a6:	bf00      	nop
   232a8:	20005460 	.word	0x20005460
   232ac:	00036a85 	.word	0x00036a85
   232b0:	0003067f 	.word	0x0003067f
   232b4:	20005468 	.word	0x20005468

000232b8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   232b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   232ba:	4b10      	ldr	r3, [pc, #64]	; (232fc <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   232bc:	4f10      	ldr	r7, [pc, #64]	; (23300 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   232be:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   232c2:	3001      	adds	r0, #1
   232c4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   232c8:	42ae      	cmp	r6, r5
   232ca:	d800      	bhi.n	232ce <z_sys_init_run_level+0x16>
		}
	}
}
   232cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   232ce:	e9d5 3400 	ldrd	r3, r4, [r5]
   232d2:	4620      	mov	r0, r4
   232d4:	4798      	blx	r3
   232d6:	b170      	cbz	r0, 232f6 <z_sys_init_run_level+0x3e>
   232d8:	b16c      	cbz	r4, 232f6 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   232da:	1be4      	subs	r4, r4, r7
   232dc:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   232de:	0961      	lsrs	r1, r4, #5
   232e0:	4a08      	ldr	r2, [pc, #32]	; (23304 <z_sys_init_run_level+0x4c>)
   232e2:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   232e6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   232ea:	2301      	movs	r3, #1
   232ec:	fa03 f404 	lsl.w	r4, r3, r4
   232f0:	4304      	orrs	r4, r0
   232f2:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   232f6:	3508      	adds	r5, #8
   232f8:	e7e6      	b.n	232c8 <z_sys_init_run_level+0x10>
   232fa:	bf00      	nop
   232fc:	00030144 	.word	0x00030144
   23300:	20001cf0 	.word	0x20001cf0
   23304:	20001da0 	.word	0x20001da0

00023308 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   23308:	4b08      	ldr	r3, [pc, #32]	; (2332c <z_device_ready+0x24>)
   2330a:	1ac0      	subs	r0, r0, r3
   2330c:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   2330e:	0942      	lsrs	r2, r0, #5
   23310:	4b07      	ldr	r3, [pc, #28]	; (23330 <z_device_ready+0x28>)
   23312:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   23316:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   2331a:	2301      	movs	r3, #1
   2331c:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   23320:	4210      	tst	r0, r2
}
   23322:	bf0c      	ite	eq
   23324:	4618      	moveq	r0, r3
   23326:	2000      	movne	r0, #0
   23328:	4770      	bx	lr
   2332a:	bf00      	nop
   2332c:	20001cf0 	.word	0x20001cf0
   23330:	20001da0 	.word	0x20001da0

00023334 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   23334:	4911      	ldr	r1, [pc, #68]	; (2337c <z_impl_device_get_binding+0x48>)
{
   23336:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   23338:	4c11      	ldr	r4, [pc, #68]	; (23380 <z_impl_device_get_binding+0x4c>)
{
   2333a:	4605      	mov	r5, r0
   2333c:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   2333e:	428c      	cmp	r4, r1
   23340:	d104      	bne.n	2334c <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   23342:	4c0f      	ldr	r4, [pc, #60]	; (23380 <z_impl_device_get_binding+0x4c>)
   23344:	42b4      	cmp	r4, r6
   23346:	d10a      	bne.n	2335e <z_impl_device_get_binding+0x2a>
	return NULL;
   23348:	2400      	movs	r4, #0
   2334a:	e014      	b.n	23376 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   2334c:	4620      	mov	r0, r4
   2334e:	f7ff ffdb 	bl	23308 <z_device_ready>
   23352:	b110      	cbz	r0, 2335a <z_impl_device_get_binding+0x26>
   23354:	6823      	ldr	r3, [r4, #0]
   23356:	42ab      	cmp	r3, r5
   23358:	d00d      	beq.n	23376 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   2335a:	3410      	adds	r4, #16
   2335c:	e7ef      	b.n	2333e <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2335e:	4620      	mov	r0, r4
   23360:	f7ff ffd2 	bl	23308 <z_device_ready>
   23364:	b908      	cbnz	r0, 2336a <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   23366:	3410      	adds	r4, #16
   23368:	e7ec      	b.n	23344 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2336a:	6821      	ldr	r1, [r4, #0]
   2336c:	4628      	mov	r0, r5
   2336e:	f7de fd41 	bl	1df4 <strcmp>
   23372:	2800      	cmp	r0, #0
   23374:	d1f7      	bne.n	23366 <z_impl_device_get_binding+0x32>
}
   23376:	4620      	mov	r0, r4
   23378:	bd70      	pop	{r4, r5, r6, pc}
   2337a:	bf00      	nop
   2337c:	20001da0 	.word	0x20001da0
   23380:	20001cf0 	.word	0x20001cf0

00023384 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   23384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23386:	4604      	mov	r4, r0
   23388:	460e      	mov	r6, r1
	__asm__ volatile(
   2338a:	f04f 0320 	mov.w	r3, #32
   2338e:	f3ef 8711 	mrs	r7, BASEPRI
   23392:	f383 8811 	msr	BASEPRI, r3
   23396:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2339a:	f001 fe09 	bl	24fb0 <z_impl_k_current_get>
   2339e:	2c04      	cmp	r4, #4
   233a0:	bf96      	itet	ls
   233a2:	4b1e      	ldrls	r3, [pc, #120]	; (2341c <z_fatal_error+0x98>)
   233a4:	4b1e      	ldrhi	r3, [pc, #120]	; (23420 <z_fatal_error+0x9c>)
   233a6:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   233aa:	2200      	movs	r2, #0
   233ac:	4605      	mov	r5, r0
   233ae:	9200      	str	r2, [sp, #0]
   233b0:	2145      	movs	r1, #69	; 0x45
   233b2:	4622      	mov	r2, r4
   233b4:	481b      	ldr	r0, [pc, #108]	; (23424 <z_fatal_error+0xa0>)
   233b6:	f004 fa8c 	bl	278d2 <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   233ba:	b13e      	cbz	r6, 233cc <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   233bc:	69f3      	ldr	r3, [r6, #28]
   233be:	f3c3 0308 	ubfx	r3, r3, #0, #9
   233c2:	b11b      	cbz	r3, 233cc <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   233c4:	2145      	movs	r1, #69	; 0x45
   233c6:	4818      	ldr	r0, [pc, #96]	; (23428 <z_fatal_error+0xa4>)
   233c8:	f004 fa83 	bl	278d2 <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   233cc:	b135      	cbz	r5, 233dc <z_fatal_error+0x58>
   233ce:	4628      	mov	r0, r5
   233d0:	f00a fe54 	bl	2e07c <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   233d4:	4603      	mov	r3, r0
   233d6:	b108      	cbz	r0, 233dc <z_fatal_error+0x58>
   233d8:	7802      	ldrb	r2, [r0, #0]
   233da:	b902      	cbnz	r2, 233de <z_fatal_error+0x5a>
		thread_name = "unknown";
   233dc:	4b13      	ldr	r3, [pc, #76]	; (2342c <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   233de:	4814      	ldr	r0, [pc, #80]	; (23430 <z_fatal_error+0xac>)
   233e0:	462a      	mov	r2, r5
   233e2:	2145      	movs	r1, #69	; 0x45
   233e4:	f004 fa75 	bl	278d2 <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   233e8:	4631      	mov	r1, r6
   233ea:	4620      	mov	r0, r4
   233ec:	f7fe f8e6 	bl	215bc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   233f0:	2c04      	cmp	r4, #4
   233f2:	d108      	bne.n	23406 <z_fatal_error+0x82>
   233f4:	490f      	ldr	r1, [pc, #60]	; (23434 <z_fatal_error+0xb0>)
   233f6:	4810      	ldr	r0, [pc, #64]	; (23438 <z_fatal_error+0xb4>)
   233f8:	228f      	movs	r2, #143	; 0x8f
   233fa:	f004 fa6a 	bl	278d2 <printk>
   233fe:	218f      	movs	r1, #143	; 0x8f
   23400:	480c      	ldr	r0, [pc, #48]	; (23434 <z_fatal_error+0xb0>)
   23402:	f004 fcdf 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   23406:	f387 8811 	msr	BASEPRI, r7
   2340a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2340e:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   23410:	b003      	add	sp, #12
   23412:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   23416:	f7e4 bec1 	b.w	819c <z_impl_k_thread_abort>
   2341a:	bf00      	nop
   2341c:	0003015c 	.word	0x0003015c
   23420:	00036b0a 	.word	0x00036b0a
   23424:	00036b20 	.word	0x00036b20
   23428:	00036b4d 	.word	0x00036b4d
   2342c:	00036b18 	.word	0x00036b18
   23430:	00036b73 	.word	0x00036b73
   23434:	00036b90 	.word	0x00036b90
   23438:	0003067f 	.word	0x0003067f

0002343c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   2343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   2343e:	4e16      	ldr	r6, [pc, #88]	; (23498 <idle+0x5c>)
{
   23440:	4605      	mov	r5, r0
			cpu->pending_abort = NULL;
   23442:	2700      	movs	r7, #0
	__asm__ volatile(
   23444:	f04f 0220 	mov.w	r2, #32
   23448:	f3ef 8311 	mrs	r3, BASEPRI
   2344c:	f382 8811 	msr	BASEPRI, r2
   23450:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   23454:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   23456:	b188      	cbz	r0, 2347c <idle+0x40>
			cpu->pending_abort = NULL;
   23458:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   2345a:	f383 8811 	msr	BASEPRI, r3
   2345e:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   23462:	f001 f989 	bl	24778 <z_thread_single_abort>
	__asm__ volatile(
   23466:	f04f 0320 	mov.w	r3, #32
   2346a:	f3ef 8011 	mrs	r0, BASEPRI
   2346e:	f383 8811 	msr	BASEPRI, r3
   23472:	f3bf 8f6f 	isb	sy
   23476:	f00a fda9 	bl	2dfcc <z_reschedule_irqlock>
   2347a:	e7e3      	b.n	23444 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   2347c:	f002 fa8e 	bl	2599c <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   23480:	2101      	movs	r1, #1
   23482:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
   23484:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   23486:	bfd8      	it	le
   23488:	4608      	movle	r0, r1
   2348a:	f002 fabd 	bl	25a08 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   2348e:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   23490:	f7e4 fbc2 	bl	7c18 <arch_cpu_idle>
   23494:	e7d6      	b.n	23444 <idle+0x8>
   23496:	bf00      	nop
   23498:	20005490 	.word	0x20005490

0002349c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2349c:	4802      	ldr	r0, [pc, #8]	; (234a8 <z_bss_zero+0xc>)
   2349e:	4a03      	ldr	r2, [pc, #12]	; (234ac <z_bss_zero+0x10>)
   234a0:	2100      	movs	r1, #0
   234a2:	1a12      	subs	r2, r2, r0
   234a4:	f00a bf3c 	b.w	2e320 <memset>
   234a8:	200020d0 	.word	0x200020d0
   234ac:	200058b0 	.word	0x200058b0

000234b0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   234b0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   234b2:	4b0a      	ldr	r3, [pc, #40]	; (234dc <bg_thread_main+0x2c>)
   234b4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   234b6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   234b8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   234ba:	f7ff fefd 	bl	232b8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   234be:	f002 f897 	bl	255f0 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   234c2:	2003      	movs	r0, #3
   234c4:	f7ff fef8 	bl	232b8 <z_sys_init_run_level>

	z_init_static_threads();
   234c8:	f001 feee 	bl	252a8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   234cc:	f7e1 f938 	bl	4740 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   234d0:	4a03      	ldr	r2, [pc, #12]	; (234e0 <bg_thread_main+0x30>)
   234d2:	7b13      	ldrb	r3, [r2, #12]
   234d4:	f023 0301 	bic.w	r3, r3, #1
   234d8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   234da:	bd08      	pop	{r3, pc}
   234dc:	2000589e 	.word	0x2000589e
   234e0:	20002f98 	.word	0x20002f98

000234e4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   234e4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   234e8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 235e0 <z_cstart+0xfc>
   234ec:	b0ab      	sub	sp, #172	; 0xac
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   234ee:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   234f2:	4d33      	ldr	r5, [pc, #204]	; (235c0 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   234f4:	4e33      	ldr	r6, [pc, #204]	; (235c4 <z_cstart+0xe0>)
   234f6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   234f8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 235e4 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
   234fc:	4f32      	ldr	r7, [pc, #200]	; (235c8 <z_cstart+0xe4>)
   234fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23502:	2400      	movs	r4, #0
   23504:	616b      	str	r3, [r5, #20]
   23506:	23e0      	movs	r3, #224	; 0xe0
   23508:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2350c:	77ec      	strb	r4, [r5, #31]
   2350e:	762c      	strb	r4, [r5, #24]
   23510:	766c      	strb	r4, [r5, #25]
   23512:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   23514:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23516:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2351a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2351c:	f7e4 fe1c 	bl	8158 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   23520:	f7e4 fb74 	bl	7c0c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   23524:	f04f 33ff 	mov.w	r3, #4294967295
   23528:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2352a:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   2352c:	4d27      	ldr	r5, [pc, #156]	; (235cc <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   2352e:	f240 1301 	movw	r3, #257	; 0x101
   23532:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   23536:	ab06      	add	r3, sp, #24
   23538:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2353a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   2353c:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   23540:	f7ff feba 	bl	232b8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   23544:	2001      	movs	r0, #1
   23546:	f7ff feb7 	bl	232b8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2354a:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   2354e:	f001 fbc9 	bl	24ce4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23552:	4b1f      	ldr	r3, [pc, #124]	; (235d0 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   23554:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23556:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2355a:	491e      	ldr	r1, [pc, #120]	; (235d4 <z_cstart+0xf0>)
   2355c:	9305      	str	r3, [sp, #20]
   2355e:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   23562:	4643      	mov	r3, r8
   23564:	e9cd 4401 	strd	r4, r4, [sp, #4]
   23568:	9400      	str	r4, [sp, #0]
   2356a:	4630      	mov	r0, r6
   2356c:	f001 fde4 	bl	25138 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23570:	7b73      	ldrb	r3, [r6, #13]
   23572:	4682      	mov	sl, r0
   23574:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   23578:	4630      	mov	r0, r6
   2357a:	7373      	strb	r3, [r6, #13]
   2357c:	f000 ff36 	bl	243ec <z_ready_thread>
	z_setup_new_thread(thread, stack,
   23580:	230f      	movs	r3, #15
   23582:	e9cd 4302 	strd	r4, r3, [sp, #8]
   23586:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2358a:	4b13      	ldr	r3, [pc, #76]	; (235d8 <z_cstart+0xf4>)
   2358c:	4913      	ldr	r1, [pc, #76]	; (235dc <z_cstart+0xf8>)
   2358e:	e9cd b404 	strd	fp, r4, [sp, #16]
   23592:	e9cd 5400 	strd	r5, r4, [sp]
   23596:	4638      	mov	r0, r7
   23598:	f001 fdce 	bl	25138 <z_setup_new_thread>
   2359c:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   2359e:	60ef      	str	r7, [r5, #12]
   235a0:	f023 0304 	bic.w	r3, r3, #4
   235a4:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   235a6:	f105 031c 	add.w	r3, r5, #28
		_kernel.cpus[i].id = i;
   235aa:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   235ac:	f8c5 9004 	str.w	r9, [r5, #4]
	list->tail = (sys_dnode_t *)list;
   235b0:	e9c5 3307 	strd	r3, r3, [r5, #28]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   235b4:	4642      	mov	r2, r8
   235b6:	4651      	mov	r1, sl
   235b8:	4630      	mov	r0, r6
   235ba:	f7e4 fb0d 	bl	7bd8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   235be:	bf00      	nop
   235c0:	e000ed00 	.word	0xe000ed00
   235c4:	20002f98 	.word	0x20002f98
   235c8:	20002f08 	.word	0x20002f08
   235cc:	20005490 	.word	0x20005490
   235d0:	00032879 	.word	0x00032879
   235d4:	20006f20 	.word	0x20006f20
   235d8:	0002343d 	.word	0x0002343d
   235dc:	20007340 	.word	0x20007340
   235e0:	20007cc0 	.word	0x20007cc0
   235e4:	000234b1 	.word	0x000234b1

000235e8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   235e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   235ea:	4d0d      	ldr	r5, [pc, #52]	; (23620 <statics_init+0x38>)
   235ec:	4c0d      	ldr	r4, [pc, #52]	; (23624 <statics_init+0x3c>)
   235ee:	4e0e      	ldr	r6, [pc, #56]	; (23628 <statics_init+0x40>)
   235f0:	462f      	mov	r7, r5
   235f2:	42ac      	cmp	r4, r5
   235f4:	d908      	bls.n	23608 <statics_init+0x20>
   235f6:	4631      	mov	r1, r6
   235f8:	480c      	ldr	r0, [pc, #48]	; (2362c <statics_init+0x44>)
   235fa:	2215      	movs	r2, #21
   235fc:	f004 f969 	bl	278d2 <printk>
   23600:	2115      	movs	r1, #21
   23602:	4630      	mov	r0, r6
   23604:	f004 fbde 	bl	27dc4 <assert_post_action>
   23608:	42bc      	cmp	r4, r7
   2360a:	d301      	bcc.n	23610 <statics_init+0x28>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   2360c:	2000      	movs	r0, #0
   2360e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   23610:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   23614:	4620      	mov	r0, r4
   23616:	f00a fc78 	bl	2df0a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   2361a:	3418      	adds	r4, #24
   2361c:	e7e9      	b.n	235f2 <statics_init+0xa>
   2361e:	bf00      	nop
   23620:	20001e14 	.word	0x20001e14
   23624:	20001e14 	.word	0x20001e14
   23628:	00036bb5 	.word	0x00036bb5
   2362c:	0003067f 	.word	0x0003067f

00023630 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   23630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23634:	b087      	sub	sp, #28
   23636:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   2363a:	4606      	mov	r6, r0
   2363c:	460f      	mov	r7, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   2363e:	4640      	mov	r0, r8
   23640:	4649      	mov	r1, r9
{
   23642:	4692      	mov	sl, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   23644:	f00a fd93 	bl	2e16e <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23648:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   2364c:	9005      	str	r0, [sp, #20]
   2364e:	468b      	mov	fp, r1
   23650:	f04f 0320 	mov.w	r3, #32
   23654:	f3ef 8411 	mrs	r4, BASEPRI
   23658:	f383 8811 	msr	BASEPRI, r3
   2365c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23660:	4628      	mov	r0, r5
   23662:	f001 fea1 	bl	253a8 <z_spin_lock_valid>
   23666:	b940      	cbnz	r0, 2367a <k_heap_aligned_alloc+0x4a>
   23668:	4936      	ldr	r1, [pc, #216]	; (23744 <k_heap_aligned_alloc+0x114>)
   2366a:	4837      	ldr	r0, [pc, #220]	; (23748 <k_heap_aligned_alloc+0x118>)
   2366c:	227c      	movs	r2, #124	; 0x7c
   2366e:	f004 f930 	bl	278d2 <printk>
   23672:	217c      	movs	r1, #124	; 0x7c
   23674:	4833      	ldr	r0, [pc, #204]	; (23744 <k_heap_aligned_alloc+0x114>)
   23676:	f004 fba5 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2367a:	4628      	mov	r0, r5
   2367c:	f001 feb2 	bl	253e4 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23680:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   23684:	b15b      	cbz	r3, 2369e <k_heap_aligned_alloc+0x6e>
   23686:	ea58 0309 	orrs.w	r3, r8, r9
   2368a:	d008      	beq.n	2369e <k_heap_aligned_alloc+0x6e>
   2368c:	492f      	ldr	r1, [pc, #188]	; (2374c <k_heap_aligned_alloc+0x11c>)
   2368e:	482e      	ldr	r0, [pc, #184]	; (23748 <k_heap_aligned_alloc+0x118>)
   23690:	2224      	movs	r2, #36	; 0x24
   23692:	f004 f91e 	bl	278d2 <printk>
   23696:	2124      	movs	r1, #36	; 0x24
   23698:	482c      	ldr	r0, [pc, #176]	; (2374c <k_heap_aligned_alloc+0x11c>)
   2369a:	f004 fb93 	bl	27dc4 <assert_post_action>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2369e:	f106 030c 	add.w	r3, r6, #12
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   236a2:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 23744 <k_heap_aligned_alloc+0x114>
   236a6:	9304      	str	r3, [sp, #16]
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   236a8:	4652      	mov	r2, sl
   236aa:	4639      	mov	r1, r7
   236ac:	4630      	mov	r0, r6
   236ae:	f7e1 fc17 	bl	4ee0 <sys_heap_aligned_alloc>
   236b2:	4680      	mov	r8, r0
		now = z_tick_get();
   236b4:	f002 fa96 	bl	25be4 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   236b8:	f1b8 0f00 	cmp.w	r8, #0
   236bc:	d014      	beq.n	236e8 <k_heap_aligned_alloc+0xb8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   236be:	4628      	mov	r0, r5
   236c0:	f001 fe80 	bl	253c4 <z_spin_unlock_valid>
   236c4:	b940      	cbnz	r0, 236d8 <k_heap_aligned_alloc+0xa8>
   236c6:	491f      	ldr	r1, [pc, #124]	; (23744 <k_heap_aligned_alloc+0x114>)
   236c8:	481f      	ldr	r0, [pc, #124]	; (23748 <k_heap_aligned_alloc+0x118>)
   236ca:	22a7      	movs	r2, #167	; 0xa7
   236cc:	f004 f901 	bl	278d2 <printk>
   236d0:	21a7      	movs	r1, #167	; 0xa7
   236d2:	481c      	ldr	r0, [pc, #112]	; (23744 <k_heap_aligned_alloc+0x114>)
   236d4:	f004 fb76 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   236d8:	f384 8811 	msr	BASEPRI, r4
   236dc:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   236e0:	4640      	mov	r0, r8
   236e2:	b007      	add	sp, #28
   236e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   236e8:	9b05      	ldr	r3, [sp, #20]
   236ea:	1a1b      	subs	r3, r3, r0
   236ec:	9302      	str	r3, [sp, #8]
   236ee:	eb6b 0301 	sbc.w	r3, fp, r1
   236f2:	9303      	str	r3, [sp, #12]
   236f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   236f8:	2a01      	cmp	r2, #1
   236fa:	f173 0300 	sbcs.w	r3, r3, #0
   236fe:	dbde      	blt.n	236be <k_heap_aligned_alloc+0x8e>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   23704:	4621      	mov	r1, r4
   23706:	e9cd 2300 	strd	r2, r3, [sp]
   2370a:	4628      	mov	r0, r5
   2370c:	9a04      	ldr	r2, [sp, #16]
   2370e:	f001 f9df 	bl	24ad0 <z_pend_curr>
	__asm__ volatile(
   23712:	f04f 0320 	mov.w	r3, #32
   23716:	f3ef 8411 	mrs	r4, BASEPRI
   2371a:	f383 8811 	msr	BASEPRI, r3
   2371e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23722:	4628      	mov	r0, r5
   23724:	f001 fe40 	bl	253a8 <z_spin_lock_valid>
   23728:	b940      	cbnz	r0, 2373c <k_heap_aligned_alloc+0x10c>
   2372a:	4649      	mov	r1, r9
   2372c:	4806      	ldr	r0, [pc, #24]	; (23748 <k_heap_aligned_alloc+0x118>)
   2372e:	227c      	movs	r2, #124	; 0x7c
   23730:	f004 f8cf 	bl	278d2 <printk>
   23734:	217c      	movs	r1, #124	; 0x7c
   23736:	4648      	mov	r0, r9
   23738:	f004 fb44 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2373c:	4628      	mov	r0, r5
   2373e:	f001 fe51 	bl	253e4 <z_spin_lock_set_owner>
	return k;
   23742:	e7b1      	b.n	236a8 <k_heap_aligned_alloc+0x78>
   23744:	00030779 	.word	0x00030779
   23748:	0003067f 	.word	0x0003067f
   2374c:	00036bb5 	.word	0x00036bb5

00023750 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   23750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23752:	4605      	mov	r5, r0
   23754:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23756:	f100 0414 	add.w	r4, r0, #20
   2375a:	f04f 0320 	mov.w	r3, #32
   2375e:	f3ef 8611 	mrs	r6, BASEPRI
   23762:	f383 8811 	msr	BASEPRI, r3
   23766:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2376a:	4620      	mov	r0, r4
   2376c:	f001 fe1c 	bl	253a8 <z_spin_lock_valid>
   23770:	b940      	cbnz	r0, 23784 <k_heap_free+0x34>
   23772:	4916      	ldr	r1, [pc, #88]	; (237cc <k_heap_free+0x7c>)
   23774:	4816      	ldr	r0, [pc, #88]	; (237d0 <k_heap_free+0x80>)
   23776:	227c      	movs	r2, #124	; 0x7c
   23778:	f004 f8ab 	bl	278d2 <printk>
   2377c:	217c      	movs	r1, #124	; 0x7c
   2377e:	4813      	ldr	r0, [pc, #76]	; (237cc <k_heap_free+0x7c>)
   23780:	f004 fb20 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   23784:	4620      	mov	r0, r4
   23786:	f001 fe2d 	bl	253e4 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2378a:	4628      	mov	r0, r5
   2378c:	4639      	mov	r1, r7
   2378e:	f7e1 fb67 	bl	4e60 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   23792:	f105 000c 	add.w	r0, r5, #12
   23796:	f00a fc44 	bl	2e022 <z_unpend_all>
   2379a:	b128      	cbz	r0, 237a8 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   2379c:	4631      	mov	r1, r6
   2379e:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   237a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   237a4:	f000 bc50 	b.w	24048 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   237a8:	4620      	mov	r0, r4
   237aa:	f001 fe0b 	bl	253c4 <z_spin_unlock_valid>
   237ae:	b940      	cbnz	r0, 237c2 <k_heap_free+0x72>
   237b0:	4906      	ldr	r1, [pc, #24]	; (237cc <k_heap_free+0x7c>)
   237b2:	4807      	ldr	r0, [pc, #28]	; (237d0 <k_heap_free+0x80>)
   237b4:	22a7      	movs	r2, #167	; 0xa7
   237b6:	f004 f88c 	bl	278d2 <printk>
   237ba:	21a7      	movs	r1, #167	; 0xa7
   237bc:	4803      	ldr	r0, [pc, #12]	; (237cc <k_heap_free+0x7c>)
   237be:	f004 fb01 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   237c2:	f386 8811 	msr	BASEPRI, r6
   237c6:	f3bf 8f6f 	isb	sy
}
   237ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   237cc:	00030779 	.word	0x00030779
   237d0:	0003067f 	.word	0x0003067f

000237d4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   237d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   237d8:	4d14      	ldr	r5, [pc, #80]	; (2382c <init_mem_slab_module+0x58>)
   237da:	4c15      	ldr	r4, [pc, #84]	; (23830 <init_mem_slab_module+0x5c>)
   237dc:	4e15      	ldr	r6, [pc, #84]	; (23834 <init_mem_slab_module+0x60>)
   237de:	46a8      	mov	r8, r5
   237e0:	42ac      	cmp	r4, r5
   237e2:	d908      	bls.n	237f6 <init_mem_slab_module+0x22>
   237e4:	4631      	mov	r1, r6
   237e6:	4814      	ldr	r0, [pc, #80]	; (23838 <init_mem_slab_module+0x64>)
   237e8:	2242      	movs	r2, #66	; 0x42
   237ea:	f004 f872 	bl	278d2 <printk>
   237ee:	2142      	movs	r1, #66	; 0x42
   237f0:	4630      	mov	r0, r6
   237f2:	f004 fae7 	bl	27dc4 <assert_post_action>
   237f6:	4544      	cmp	r4, r8
   237f8:	d302      	bcc.n	23800 <init_mem_slab_module+0x2c>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   237fa:	2000      	movs	r0, #0
	return rc;
}
   237fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   23800:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   23804:	ea42 0301 	orr.w	r3, r2, r1
   23808:	f013 0303 	ands.w	r3, r3, #3
   2380c:	d10b      	bne.n	23826 <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
   2380e:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   23810:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   23812:	4283      	cmp	r3, r0
   23814:	d101      	bne.n	2381a <init_mem_slab_module+0x46>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   23816:	341c      	adds	r4, #28
   23818:	e7e2      	b.n	237e0 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   2381a:	6967      	ldr	r7, [r4, #20]
   2381c:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2381e:	3301      	adds	r3, #1
		slab->free_list = p;
   23820:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   23822:	440a      	add	r2, r1
   23824:	e7f5      	b.n	23812 <init_mem_slab_module+0x3e>
		return -EINVAL;
   23826:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2382a:	e7e7      	b.n	237fc <init_mem_slab_module+0x28>
   2382c:	20001e14 	.word	0x20001e14
   23830:	20001da4 	.word	0x20001da4
   23834:	00036bd7 	.word	0x00036bd7
   23838:	0003067f 	.word	0x0003067f

0002383c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2383c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23840:	4604      	mov	r4, r0
   23842:	460d      	mov	r5, r1
   23844:	4616      	mov	r6, r2
   23846:	461f      	mov	r7, r3
	__asm__ volatile(
   23848:	f04f 0320 	mov.w	r3, #32
   2384c:	f3ef 8811 	mrs	r8, BASEPRI
   23850:	f383 8811 	msr	BASEPRI, r3
   23854:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23858:	4821      	ldr	r0, [pc, #132]	; (238e0 <k_mem_slab_alloc+0xa4>)
   2385a:	f001 fda5 	bl	253a8 <z_spin_lock_valid>
   2385e:	b940      	cbnz	r0, 23872 <k_mem_slab_alloc+0x36>
   23860:	4920      	ldr	r1, [pc, #128]	; (238e4 <k_mem_slab_alloc+0xa8>)
   23862:	4821      	ldr	r0, [pc, #132]	; (238e8 <k_mem_slab_alloc+0xac>)
   23864:	227c      	movs	r2, #124	; 0x7c
   23866:	f004 f834 	bl	278d2 <printk>
   2386a:	217c      	movs	r1, #124	; 0x7c
   2386c:	481d      	ldr	r0, [pc, #116]	; (238e4 <k_mem_slab_alloc+0xa8>)
   2386e:	f004 faa9 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   23872:	481b      	ldr	r0, [pc, #108]	; (238e0 <k_mem_slab_alloc+0xa4>)
   23874:	f001 fdb6 	bl	253e4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   23878:	6963      	ldr	r3, [r4, #20]
   2387a:	b1c3      	cbz	r3, 238ae <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   2387c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   2387e:	681b      	ldr	r3, [r3, #0]
   23880:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   23882:	69a3      	ldr	r3, [r4, #24]
   23884:	3301      	adds	r3, #1
   23886:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   23888:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2388a:	4815      	ldr	r0, [pc, #84]	; (238e0 <k_mem_slab_alloc+0xa4>)
   2388c:	f001 fd9a 	bl	253c4 <z_spin_unlock_valid>
   23890:	b940      	cbnz	r0, 238a4 <k_mem_slab_alloc+0x68>
   23892:	4914      	ldr	r1, [pc, #80]	; (238e4 <k_mem_slab_alloc+0xa8>)
   23894:	4814      	ldr	r0, [pc, #80]	; (238e8 <k_mem_slab_alloc+0xac>)
   23896:	22a7      	movs	r2, #167	; 0xa7
   23898:	f004 f81b 	bl	278d2 <printk>
   2389c:	21a7      	movs	r1, #167	; 0xa7
   2389e:	4811      	ldr	r0, [pc, #68]	; (238e4 <k_mem_slab_alloc+0xa8>)
   238a0:	f004 fa90 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   238a4:	f388 8811 	msr	BASEPRI, r8
   238a8:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   238ac:	e013      	b.n	238d6 <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   238ae:	ea56 0207 	orrs.w	r2, r6, r7
   238b2:	d103      	bne.n	238bc <k_mem_slab_alloc+0x80>
		*mem = NULL;
   238b4:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   238b6:	f06f 040b 	mvn.w	r4, #11
   238ba:	e7e6      	b.n	2388a <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   238bc:	4622      	mov	r2, r4
   238be:	e9cd 6700 	strd	r6, r7, [sp]
   238c2:	4641      	mov	r1, r8
   238c4:	4806      	ldr	r0, [pc, #24]	; (238e0 <k_mem_slab_alloc+0xa4>)
   238c6:	f001 f903 	bl	24ad0 <z_pend_curr>
		if (result == 0) {
   238ca:	4604      	mov	r4, r0
   238cc:	b918      	cbnz	r0, 238d6 <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   238ce:	4b07      	ldr	r3, [pc, #28]	; (238ec <k_mem_slab_alloc+0xb0>)
   238d0:	689b      	ldr	r3, [r3, #8]
   238d2:	695b      	ldr	r3, [r3, #20]
   238d4:	602b      	str	r3, [r5, #0]
}
   238d6:	4620      	mov	r0, r4
   238d8:	b002      	add	sp, #8
   238da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   238de:	bf00      	nop
   238e0:	20005488 	.word	0x20005488
   238e4:	00030779 	.word	0x00030779
   238e8:	0003067f 	.word	0x0003067f
   238ec:	20005490 	.word	0x20005490

000238f0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   238f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   238f2:	4604      	mov	r4, r0
   238f4:	460d      	mov	r5, r1
	__asm__ volatile(
   238f6:	f04f 0320 	mov.w	r3, #32
   238fa:	f3ef 8611 	mrs	r6, BASEPRI
   238fe:	f383 8811 	msr	BASEPRI, r3
   23902:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23906:	481e      	ldr	r0, [pc, #120]	; (23980 <k_mem_slab_free+0x90>)
   23908:	f001 fd4e 	bl	253a8 <z_spin_lock_valid>
   2390c:	b940      	cbnz	r0, 23920 <k_mem_slab_free+0x30>
   2390e:	491d      	ldr	r1, [pc, #116]	; (23984 <k_mem_slab_free+0x94>)
   23910:	481d      	ldr	r0, [pc, #116]	; (23988 <k_mem_slab_free+0x98>)
   23912:	227c      	movs	r2, #124	; 0x7c
   23914:	f003 ffdd 	bl	278d2 <printk>
   23918:	217c      	movs	r1, #124	; 0x7c
   2391a:	481a      	ldr	r0, [pc, #104]	; (23984 <k_mem_slab_free+0x94>)
   2391c:	f004 fa52 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   23920:	4817      	ldr	r0, [pc, #92]	; (23980 <k_mem_slab_free+0x90>)
   23922:	f001 fd5f 	bl	253e4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   23926:	6967      	ldr	r7, [r4, #20]
   23928:	b97f      	cbnz	r7, 2394a <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2392a:	4620      	mov	r0, r4
   2392c:	f001 f972 	bl	24c14 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   23930:	b158      	cbz	r0, 2394a <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   23932:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   23934:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   23936:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
			z_ready_thread(pending_thread);
   2393a:	f000 fd57 	bl	243ec <z_ready_thread>
			z_reschedule(&lock, key);
   2393e:	4631      	mov	r1, r6
   23940:	480f      	ldr	r0, [pc, #60]	; (23980 <k_mem_slab_free+0x90>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   23942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   23946:	f000 bb7f 	b.w	24048 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2394a:	682b      	ldr	r3, [r5, #0]
   2394c:	6962      	ldr	r2, [r4, #20]
   2394e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   23950:	682b      	ldr	r3, [r5, #0]
   23952:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   23954:	69a3      	ldr	r3, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23956:	480a      	ldr	r0, [pc, #40]	; (23980 <k_mem_slab_free+0x90>)
   23958:	3b01      	subs	r3, #1
   2395a:	61a3      	str	r3, [r4, #24]
   2395c:	f001 fd32 	bl	253c4 <z_spin_unlock_valid>
   23960:	b940      	cbnz	r0, 23974 <k_mem_slab_free+0x84>
   23962:	4908      	ldr	r1, [pc, #32]	; (23984 <k_mem_slab_free+0x94>)
   23964:	4808      	ldr	r0, [pc, #32]	; (23988 <k_mem_slab_free+0x98>)
   23966:	22a7      	movs	r2, #167	; 0xa7
   23968:	f003 ffb3 	bl	278d2 <printk>
   2396c:	21a7      	movs	r1, #167	; 0xa7
   2396e:	4805      	ldr	r0, [pc, #20]	; (23984 <k_mem_slab_free+0x94>)
   23970:	f004 fa28 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   23974:	f386 8811 	msr	BASEPRI, r6
   23978:	f3bf 8f6f 	isb	sy
}
   2397c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2397e:	bf00      	nop
   23980:	20005488 	.word	0x20005488
   23984:	00030779 	.word	0x00030779
   23988:	0003067f 	.word	0x0003067f

0002398c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2398c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23990:	4604      	mov	r4, r0
   23992:	4616      	mov	r6, r2
   23994:	461f      	mov	r7, r3
   23996:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2399a:	b143      	cbz	r3, 239ae <z_impl_k_mutex_lock+0x22>
   2399c:	4960      	ldr	r1, [pc, #384]	; (23b20 <z_impl_k_mutex_lock+0x194>)
   2399e:	4861      	ldr	r0, [pc, #388]	; (23b24 <z_impl_k_mutex_lock+0x198>)
   239a0:	227d      	movs	r2, #125	; 0x7d
   239a2:	f003 ff96 	bl	278d2 <printk>
   239a6:	217d      	movs	r1, #125	; 0x7d
   239a8:	485d      	ldr	r0, [pc, #372]	; (23b20 <z_impl_k_mutex_lock+0x194>)
   239aa:	f004 fa0b 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   239ae:	f04f 0320 	mov.w	r3, #32
   239b2:	f3ef 8511 	mrs	r5, BASEPRI
   239b6:	f383 8811 	msr	BASEPRI, r3
   239ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   239be:	485a      	ldr	r0, [pc, #360]	; (23b28 <z_impl_k_mutex_lock+0x19c>)
   239c0:	f001 fcf2 	bl	253a8 <z_spin_lock_valid>
   239c4:	b940      	cbnz	r0, 239d8 <z_impl_k_mutex_lock+0x4c>
   239c6:	4959      	ldr	r1, [pc, #356]	; (23b2c <z_impl_k_mutex_lock+0x1a0>)
   239c8:	4856      	ldr	r0, [pc, #344]	; (23b24 <z_impl_k_mutex_lock+0x198>)
   239ca:	227c      	movs	r2, #124	; 0x7c
   239cc:	f003 ff81 	bl	278d2 <printk>
   239d0:	217c      	movs	r1, #124	; 0x7c
   239d2:	4856      	ldr	r0, [pc, #344]	; (23b2c <z_impl_k_mutex_lock+0x1a0>)
   239d4:	f004 f9f6 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   239d8:	4853      	ldr	r0, [pc, #332]	; (23b28 <z_impl_k_mutex_lock+0x19c>)
   239da:	f001 fd03 	bl	253e4 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   239de:	68e3      	ldr	r3, [r4, #12]
   239e0:	4a53      	ldr	r2, [pc, #332]	; (23b30 <z_impl_k_mutex_lock+0x1a4>)
   239e2:	b1d3      	cbz	r3, 23a1a <z_impl_k_mutex_lock+0x8e>
   239e4:	68a0      	ldr	r0, [r4, #8]
   239e6:	6891      	ldr	r1, [r2, #8]
   239e8:	4288      	cmp	r0, r1
   239ea:	d033      	beq.n	23a54 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   239ec:	ea56 0307 	orrs.w	r3, r6, r7
   239f0:	d132      	bne.n	23a58 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   239f2:	484d      	ldr	r0, [pc, #308]	; (23b28 <z_impl_k_mutex_lock+0x19c>)
   239f4:	f001 fce6 	bl	253c4 <z_spin_unlock_valid>
   239f8:	b940      	cbnz	r0, 23a0c <z_impl_k_mutex_lock+0x80>
   239fa:	494c      	ldr	r1, [pc, #304]	; (23b2c <z_impl_k_mutex_lock+0x1a0>)
   239fc:	4849      	ldr	r0, [pc, #292]	; (23b24 <z_impl_k_mutex_lock+0x198>)
   239fe:	22a7      	movs	r2, #167	; 0xa7
   23a00:	f003 ff67 	bl	278d2 <printk>
   23a04:	21a7      	movs	r1, #167	; 0xa7
   23a06:	4849      	ldr	r0, [pc, #292]	; (23b2c <z_impl_k_mutex_lock+0x1a0>)
   23a08:	f004 f9dc 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   23a0c:	f385 8811 	msr	BASEPRI, r5
   23a10:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   23a14:	f06f 000f 	mvn.w	r0, #15
   23a18:	e019      	b.n	23a4e <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   23a1a:	6891      	ldr	r1, [r2, #8]
   23a1c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   23a20:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   23a22:	3301      	adds	r3, #1
   23a24:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   23a26:	6893      	ldr	r3, [r2, #8]
   23a28:	60a3      	str	r3, [r4, #8]
   23a2a:	483f      	ldr	r0, [pc, #252]	; (23b28 <z_impl_k_mutex_lock+0x19c>)
   23a2c:	f001 fcca 	bl	253c4 <z_spin_unlock_valid>
   23a30:	b940      	cbnz	r0, 23a44 <z_impl_k_mutex_lock+0xb8>
   23a32:	493e      	ldr	r1, [pc, #248]	; (23b2c <z_impl_k_mutex_lock+0x1a0>)
   23a34:	483b      	ldr	r0, [pc, #236]	; (23b24 <z_impl_k_mutex_lock+0x198>)
   23a36:	22a7      	movs	r2, #167	; 0xa7
   23a38:	f003 ff4b 	bl	278d2 <printk>
   23a3c:	21a7      	movs	r1, #167	; 0xa7
   23a3e:	483b      	ldr	r0, [pc, #236]	; (23b2c <z_impl_k_mutex_lock+0x1a0>)
   23a40:	f004 f9c0 	bl	27dc4 <assert_post_action>
   23a44:	f385 8811 	msr	BASEPRI, r5
   23a48:	f3bf 8f6f 	isb	sy
		return 0;
   23a4c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   23a4e:	b002      	add	sp, #8
   23a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   23a54:	6921      	ldr	r1, [r4, #16]
   23a56:	e7e3      	b.n	23a20 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   23a58:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23a5c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   23a60:	4299      	cmp	r1, r3
   23a62:	bfa8      	it	ge
   23a64:	4619      	movge	r1, r3
   23a66:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   23a6a:	4299      	cmp	r1, r3
   23a6c:	da3e      	bge.n	23aec <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   23a6e:	f001 f855 	bl	24b1c <z_set_prio>
   23a72:	4680      	mov	r8, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   23a74:	e9cd 6700 	strd	r6, r7, [sp]
   23a78:	4622      	mov	r2, r4
   23a7a:	4629      	mov	r1, r5
   23a7c:	482a      	ldr	r0, [pc, #168]	; (23b28 <z_impl_k_mutex_lock+0x19c>)
   23a7e:	f001 f827 	bl	24ad0 <z_pend_curr>
	if (got_mutex == 0) {
   23a82:	2800      	cmp	r0, #0
   23a84:	d0e3      	beq.n	23a4e <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   23a86:	f04f 0320 	mov.w	r3, #32
   23a8a:	f3ef 8511 	mrs	r5, BASEPRI
   23a8e:	f383 8811 	msr	BASEPRI, r3
   23a92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a96:	4824      	ldr	r0, [pc, #144]	; (23b28 <z_impl_k_mutex_lock+0x19c>)
   23a98:	f001 fc86 	bl	253a8 <z_spin_lock_valid>
   23a9c:	b940      	cbnz	r0, 23ab0 <z_impl_k_mutex_lock+0x124>
   23a9e:	4923      	ldr	r1, [pc, #140]	; (23b2c <z_impl_k_mutex_lock+0x1a0>)
   23aa0:	4820      	ldr	r0, [pc, #128]	; (23b24 <z_impl_k_mutex_lock+0x198>)
   23aa2:	227c      	movs	r2, #124	; 0x7c
   23aa4:	f003 ff15 	bl	278d2 <printk>
   23aa8:	217c      	movs	r1, #124	; 0x7c
   23aaa:	4820      	ldr	r0, [pc, #128]	; (23b2c <z_impl_k_mutex_lock+0x1a0>)
   23aac:	f004 f98a 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   23ab0:	481d      	ldr	r0, [pc, #116]	; (23b28 <z_impl_k_mutex_lock+0x19c>)
   23ab2:	f001 fc97 	bl	253e4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   23ab6:	6823      	ldr	r3, [r4, #0]
   23ab8:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23aba:	42a3      	cmp	r3, r4
   23abc:	d007      	beq.n	23ace <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   23abe:	b133      	cbz	r3, 23ace <z_impl_k_mutex_lock+0x142>
   23ac0:	f993 300e 	ldrsb.w	r3, [r3, #14]
   23ac4:	4299      	cmp	r1, r3
   23ac6:	bfa8      	it	ge
   23ac8:	4619      	movge	r1, r3
   23aca:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   23ace:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   23ad0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23ad4:	4299      	cmp	r1, r3
   23ad6:	d10c      	bne.n	23af2 <z_impl_k_mutex_lock+0x166>
	if (resched) {
   23ad8:	f1b8 0f00 	cmp.w	r8, #0
   23adc:	d00e      	beq.n	23afc <z_impl_k_mutex_lock+0x170>
		z_reschedule(&lock, key);
   23ade:	4629      	mov	r1, r5
   23ae0:	4811      	ldr	r0, [pc, #68]	; (23b28 <z_impl_k_mutex_lock+0x19c>)
   23ae2:	f000 fab1 	bl	24048 <z_reschedule>
	return -EAGAIN;
   23ae6:	f06f 000a 	mvn.w	r0, #10
   23aea:	e7b0      	b.n	23a4e <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   23aec:	f04f 0800 	mov.w	r8, #0
   23af0:	e7c0      	b.n	23a74 <z_impl_k_mutex_lock+0xe8>
		return z_set_prio(mutex->owner, new_prio);
   23af2:	f001 f813 	bl	24b1c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   23af6:	2800      	cmp	r0, #0
   23af8:	d1f1      	bne.n	23ade <z_impl_k_mutex_lock+0x152>
   23afa:	e7ed      	b.n	23ad8 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23afc:	480a      	ldr	r0, [pc, #40]	; (23b28 <z_impl_k_mutex_lock+0x19c>)
   23afe:	f001 fc61 	bl	253c4 <z_spin_unlock_valid>
   23b02:	b940      	cbnz	r0, 23b16 <z_impl_k_mutex_lock+0x18a>
   23b04:	4909      	ldr	r1, [pc, #36]	; (23b2c <z_impl_k_mutex_lock+0x1a0>)
   23b06:	4807      	ldr	r0, [pc, #28]	; (23b24 <z_impl_k_mutex_lock+0x198>)
   23b08:	22a7      	movs	r2, #167	; 0xa7
   23b0a:	f003 fee2 	bl	278d2 <printk>
   23b0e:	21a7      	movs	r1, #167	; 0xa7
   23b10:	4806      	ldr	r0, [pc, #24]	; (23b2c <z_impl_k_mutex_lock+0x1a0>)
   23b12:	f004 f957 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   23b16:	f385 8811 	msr	BASEPRI, r5
   23b1a:	f3bf 8f6f 	isb	sy
   23b1e:	e7e2      	b.n	23ae6 <z_impl_k_mutex_lock+0x15a>
   23b20:	00036bfc 	.word	0x00036bfc
   23b24:	0003067f 	.word	0x0003067f
   23b28:	2000548c 	.word	0x2000548c
   23b2c:	00030779 	.word	0x00030779
   23b30:	20005490 	.word	0x20005490

00023b34 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   23b34:	b538      	push	{r3, r4, r5, lr}
   23b36:	4604      	mov	r4, r0
   23b38:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   23b3c:	b143      	cbz	r3, 23b50 <z_impl_k_mutex_unlock+0x1c>
   23b3e:	4948      	ldr	r1, [pc, #288]	; (23c60 <z_impl_k_mutex_unlock+0x12c>)
   23b40:	4848      	ldr	r0, [pc, #288]	; (23c64 <z_impl_k_mutex_unlock+0x130>)
   23b42:	22d8      	movs	r2, #216	; 0xd8
   23b44:	f003 fec5 	bl	278d2 <printk>
   23b48:	21d8      	movs	r1, #216	; 0xd8
   23b4a:	4845      	ldr	r0, [pc, #276]	; (23c60 <z_impl_k_mutex_unlock+0x12c>)
   23b4c:	f004 f93a 	bl	27dc4 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   23b50:	68a3      	ldr	r3, [r4, #8]
   23b52:	2b00      	cmp	r3, #0
   23b54:	d07d      	beq.n	23c52 <z_impl_k_mutex_unlock+0x11e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   23b56:	4d44      	ldr	r5, [pc, #272]	; (23c68 <z_impl_k_mutex_unlock+0x134>)
   23b58:	68aa      	ldr	r2, [r5, #8]
   23b5a:	4293      	cmp	r3, r2
   23b5c:	d17c      	bne.n	23c58 <z_impl_k_mutex_unlock+0x124>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   23b5e:	68e3      	ldr	r3, [r4, #12]
   23b60:	b943      	cbnz	r3, 23b74 <z_impl_k_mutex_unlock+0x40>
   23b62:	493f      	ldr	r1, [pc, #252]	; (23c60 <z_impl_k_mutex_unlock+0x12c>)
   23b64:	483f      	ldr	r0, [pc, #252]	; (23c64 <z_impl_k_mutex_unlock+0x130>)
   23b66:	22ea      	movs	r2, #234	; 0xea
   23b68:	f003 feb3 	bl	278d2 <printk>
   23b6c:	21ea      	movs	r1, #234	; 0xea
   23b6e:	483c      	ldr	r0, [pc, #240]	; (23c60 <z_impl_k_mutex_unlock+0x12c>)
   23b70:	f004 f928 	bl	27dc4 <assert_post_action>
   23b74:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   23b78:	b153      	cbz	r3, 23b90 <z_impl_k_mutex_unlock+0x5c>
   23b7a:	493c      	ldr	r1, [pc, #240]	; (23c6c <z_impl_k_mutex_unlock+0x138>)
   23b7c:	4839      	ldr	r0, [pc, #228]	; (23c64 <z_impl_k_mutex_unlock+0x130>)
   23b7e:	f44f 7289 	mov.w	r2, #274	; 0x112
   23b82:	f003 fea6 	bl	278d2 <printk>
   23b86:	f44f 7189 	mov.w	r1, #274	; 0x112
   23b8a:	4838      	ldr	r0, [pc, #224]	; (23c6c <z_impl_k_mutex_unlock+0x138>)
   23b8c:	f004 f91a 	bl	27dc4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   23b90:	68ab      	ldr	r3, [r5, #8]
   23b92:	7bdb      	ldrb	r3, [r3, #15]
   23b94:	2b01      	cmp	r3, #1
   23b96:	d10a      	bne.n	23bae <z_impl_k_mutex_unlock+0x7a>
   23b98:	4934      	ldr	r1, [pc, #208]	; (23c6c <z_impl_k_mutex_unlock+0x138>)
   23b9a:	4832      	ldr	r0, [pc, #200]	; (23c64 <z_impl_k_mutex_unlock+0x130>)
   23b9c:	f240 1213 	movw	r2, #275	; 0x113
   23ba0:	f003 fe97 	bl	278d2 <printk>
   23ba4:	f240 1113 	movw	r1, #275	; 0x113
   23ba8:	4830      	ldr	r0, [pc, #192]	; (23c6c <z_impl_k_mutex_unlock+0x138>)
   23baa:	f004 f90b 	bl	27dc4 <assert_post_action>

	--_current->base.sched_locked;
   23bae:	68aa      	ldr	r2, [r5, #8]
   23bb0:	7bd3      	ldrb	r3, [r2, #15]
   23bb2:	3b01      	subs	r3, #1
   23bb4:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   23bb6:	68e3      	ldr	r3, [r4, #12]
   23bb8:	2b01      	cmp	r3, #1
   23bba:	d005      	beq.n	23bc8 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   23bbc:	3b01      	subs	r3, #1
   23bbe:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   23bc0:	f000 fb70 	bl	242a4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   23bc4:	2000      	movs	r0, #0
}
   23bc6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   23bc8:	f04f 0320 	mov.w	r3, #32
   23bcc:	f3ef 8511 	mrs	r5, BASEPRI
   23bd0:	f383 8811 	msr	BASEPRI, r3
   23bd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23bd8:	4825      	ldr	r0, [pc, #148]	; (23c70 <z_impl_k_mutex_unlock+0x13c>)
   23bda:	f001 fbe5 	bl	253a8 <z_spin_lock_valid>
   23bde:	b940      	cbnz	r0, 23bf2 <z_impl_k_mutex_unlock+0xbe>
   23be0:	4924      	ldr	r1, [pc, #144]	; (23c74 <z_impl_k_mutex_unlock+0x140>)
   23be2:	4820      	ldr	r0, [pc, #128]	; (23c64 <z_impl_k_mutex_unlock+0x130>)
   23be4:	227c      	movs	r2, #124	; 0x7c
   23be6:	f003 fe74 	bl	278d2 <printk>
   23bea:	217c      	movs	r1, #124	; 0x7c
   23bec:	4821      	ldr	r0, [pc, #132]	; (23c74 <z_impl_k_mutex_unlock+0x140>)
   23bee:	f004 f8e9 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   23bf2:	481f      	ldr	r0, [pc, #124]	; (23c70 <z_impl_k_mutex_unlock+0x13c>)
   23bf4:	f001 fbf6 	bl	253e4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   23bf8:	68a0      	ldr	r0, [r4, #8]
   23bfa:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   23bfc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23c00:	4299      	cmp	r1, r3
   23c02:	d001      	beq.n	23c08 <z_impl_k_mutex_unlock+0xd4>
		return z_set_prio(mutex->owner, new_prio);
   23c04:	f000 ff8a 	bl	24b1c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   23c08:	4620      	mov	r0, r4
   23c0a:	f001 f803 	bl	24c14 <z_unpend_first_thread>
	mutex->owner = new_owner;
   23c0e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   23c10:	b160      	cbz	r0, 23c2c <z_impl_k_mutex_unlock+0xf8>
		mutex->owner_orig_prio = new_owner->base.prio;
   23c12:	f990 200e 	ldrsb.w	r2, [r0, #14]
   23c16:	6122      	str	r2, [r4, #16]
   23c18:	2200      	movs	r2, #0
   23c1a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   23c1e:	f000 fbe5 	bl	243ec <z_ready_thread>
		z_reschedule(&lock, key);
   23c22:	4629      	mov	r1, r5
   23c24:	4812      	ldr	r0, [pc, #72]	; (23c70 <z_impl_k_mutex_unlock+0x13c>)
   23c26:	f000 fa0f 	bl	24048 <z_reschedule>
   23c2a:	e7c9      	b.n	23bc0 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   23c2c:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c2e:	4810      	ldr	r0, [pc, #64]	; (23c70 <z_impl_k_mutex_unlock+0x13c>)
   23c30:	f001 fbc8 	bl	253c4 <z_spin_unlock_valid>
   23c34:	b940      	cbnz	r0, 23c48 <z_impl_k_mutex_unlock+0x114>
   23c36:	490f      	ldr	r1, [pc, #60]	; (23c74 <z_impl_k_mutex_unlock+0x140>)
   23c38:	480a      	ldr	r0, [pc, #40]	; (23c64 <z_impl_k_mutex_unlock+0x130>)
   23c3a:	22a7      	movs	r2, #167	; 0xa7
   23c3c:	f003 fe49 	bl	278d2 <printk>
   23c40:	21a7      	movs	r1, #167	; 0xa7
   23c42:	480c      	ldr	r0, [pc, #48]	; (23c74 <z_impl_k_mutex_unlock+0x140>)
   23c44:	f004 f8be 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   23c48:	f385 8811 	msr	BASEPRI, r5
   23c4c:	f3bf 8f6f 	isb	sy
   23c50:	e7b6      	b.n	23bc0 <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   23c52:	f06f 0015 	mvn.w	r0, #21
   23c56:	e7b6      	b.n	23bc6 <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   23c58:	f04f 30ff 	mov.w	r0, #4294967295
   23c5c:	e7b3      	b.n	23bc6 <z_impl_k_mutex_unlock+0x92>
   23c5e:	bf00      	nop
   23c60:	00036bfc 	.word	0x00036bfc
   23c64:	0003067f 	.word	0x0003067f
   23c68:	20005490 	.word	0x20005490
   23c6c:	00036c1e 	.word	0x00036c1e
   23c70:	2000548c 	.word	0x2000548c
   23c74:	00030779 	.word	0x00030779

00023c78 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   23c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23c7c:	4604      	mov	r4, r0
   23c7e:	460e      	mov	r6, r1
   23c80:	4690      	mov	r8, r2
   23c82:	4699      	mov	r9, r3
   23c84:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23c88:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   23c8c:	f04f 0320 	mov.w	r3, #32
   23c90:	f3ef 8711 	mrs	r7, BASEPRI
   23c94:	f383 8811 	msr	BASEPRI, r3
   23c98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c9c:	4628      	mov	r0, r5
   23c9e:	f001 fb83 	bl	253a8 <z_spin_lock_valid>
   23ca2:	b940      	cbnz	r0, 23cb6 <queue_insert+0x3e>
   23ca4:	4937      	ldr	r1, [pc, #220]	; (23d84 <queue_insert+0x10c>)
   23ca6:	4838      	ldr	r0, [pc, #224]	; (23d88 <queue_insert+0x110>)
   23ca8:	227c      	movs	r2, #124	; 0x7c
   23caa:	f003 fe12 	bl	278d2 <printk>
   23cae:	217c      	movs	r1, #124	; 0x7c
   23cb0:	4834      	ldr	r0, [pc, #208]	; (23d84 <queue_insert+0x10c>)
   23cb2:	f004 f887 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   23cb6:	4628      	mov	r0, r5
   23cb8:	f001 fb94 	bl	253e4 <z_spin_lock_set_owner>

	if (is_append) {
   23cbc:	f1ba 0f00 	cmp.w	sl, #0
   23cc0:	d000      	beq.n	23cc4 <queue_insert+0x4c>
		prev = sys_sflist_peek_tail(&queue->data_q);
   23cc2:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   23cc4:	f104 000c 	add.w	r0, r4, #12
   23cc8:	f000 ffa4 	bl	24c14 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   23ccc:	b160      	cbz	r0, 23ce8 <queue_insert+0x70>
   23cce:	2400      	movs	r4, #0
   23cd0:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
   23cd4:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   23cd8:	f000 fb88 	bl	243ec <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   23cdc:	4628      	mov	r0, r5
   23cde:	4639      	mov	r1, r7
   23ce0:	f000 f9b2 	bl	24048 <z_reschedule>
	return 0;
   23ce4:	2000      	movs	r0, #0
   23ce6:	e019      	b.n	23d1c <queue_insert+0xa4>
	if (alloc) {
   23ce8:	f1b9 0f00 	cmp.w	r9, #0
   23cec:	d028      	beq.n	23d40 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   23cee:	2108      	movs	r1, #8
   23cf0:	f002 fada 	bl	262a8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   23cf4:	b9a0      	cbnz	r0, 23d20 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cf6:	4628      	mov	r0, r5
   23cf8:	f001 fb64 	bl	253c4 <z_spin_unlock_valid>
   23cfc:	b940      	cbnz	r0, 23d10 <queue_insert+0x98>
   23cfe:	4921      	ldr	r1, [pc, #132]	; (23d84 <queue_insert+0x10c>)
   23d00:	4821      	ldr	r0, [pc, #132]	; (23d88 <queue_insert+0x110>)
   23d02:	22a7      	movs	r2, #167	; 0xa7
   23d04:	f003 fde5 	bl	278d2 <printk>
   23d08:	21a7      	movs	r1, #167	; 0xa7
   23d0a:	481e      	ldr	r0, [pc, #120]	; (23d84 <queue_insert+0x10c>)
   23d0c:	f004 f85a 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   23d10:	f387 8811 	msr	BASEPRI, r7
   23d14:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   23d18:	f06f 000b 	mvn.w	r0, #11
}
   23d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   23d20:	2301      	movs	r3, #1
		anode->data = data;
   23d22:	f8c0 8004 	str.w	r8, [r0, #4]
   23d26:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   23d28:	6803      	ldr	r3, [r0, #0]
   23d2a:	f003 0303 	and.w	r3, r3, #3
   23d2e:	b95e      	cbnz	r6, 23d48 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   23d30:	6822      	ldr	r2, [r4, #0]
   23d32:	4313      	orrs	r3, r2
   23d34:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   23d36:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   23d38:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   23d3a:	b973      	cbnz	r3, 23d5a <queue_insert+0xe2>
	list->tail = node;
   23d3c:	6060      	str	r0, [r4, #4]
   23d3e:	e00c      	b.n	23d5a <queue_insert+0xe2>
	node->next_and_flags = flags;
   23d40:	f8c8 9000 	str.w	r9, [r8]
   23d44:	4640      	mov	r0, r8
   23d46:	e7ef      	b.n	23d28 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23d48:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   23d4a:	f032 0203 	bics.w	r2, r2, #3
   23d4e:	d110      	bne.n	23d72 <queue_insert+0xfa>
Z_GENLIST_APPEND(sflist, sfnode)
   23d50:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23d52:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   23d54:	b93a      	cbnz	r2, 23d66 <queue_insert+0xee>
	list->head = node;
   23d56:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   23d5a:	2104      	movs	r1, #4
   23d5c:	f104 0014 	add.w	r0, r4, #20
   23d60:	f00a fa78 	bl	2e254 <z_handle_obj_poll_events>
   23d64:	e7ba      	b.n	23cdc <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23d66:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23d68:	f003 0303 	and.w	r3, r3, #3
   23d6c:	4303      	orrs	r3, r0
   23d6e:	6013      	str	r3, [r2, #0]
   23d70:	e7e4      	b.n	23d3c <queue_insert+0xc4>
   23d72:	4313      	orrs	r3, r2
   23d74:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23d76:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23d78:	f003 0303 	and.w	r3, r3, #3
   23d7c:	4318      	orrs	r0, r3
   23d7e:	6030      	str	r0, [r6, #0]
   23d80:	e7eb      	b.n	23d5a <queue_insert+0xe2>
   23d82:	bf00      	nop
   23d84:	00030779 	.word	0x00030779
   23d88:	0003067f 	.word	0x0003067f

00023d8c <z_impl_k_queue_cancel_wait>:
{
   23d8c:	b570      	push	{r4, r5, r6, lr}
   23d8e:	4605      	mov	r5, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23d90:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   23d94:	f04f 0320 	mov.w	r3, #32
   23d98:	f3ef 8611 	mrs	r6, BASEPRI
   23d9c:	f383 8811 	msr	BASEPRI, r3
   23da0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23da4:	4620      	mov	r0, r4
   23da6:	f001 faff 	bl	253a8 <z_spin_lock_valid>
   23daa:	b940      	cbnz	r0, 23dbe <z_impl_k_queue_cancel_wait+0x32>
   23dac:	4910      	ldr	r1, [pc, #64]	; (23df0 <z_impl_k_queue_cancel_wait+0x64>)
   23dae:	4811      	ldr	r0, [pc, #68]	; (23df4 <z_impl_k_queue_cancel_wait+0x68>)
   23db0:	227c      	movs	r2, #124	; 0x7c
   23db2:	f003 fd8e 	bl	278d2 <printk>
   23db6:	217c      	movs	r1, #124	; 0x7c
   23db8:	480d      	ldr	r0, [pc, #52]	; (23df0 <z_impl_k_queue_cancel_wait+0x64>)
   23dba:	f004 f803 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   23dbe:	4620      	mov	r0, r4
   23dc0:	f001 fb10 	bl	253e4 <z_spin_lock_set_owner>
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   23dc4:	f105 000c 	add.w	r0, r5, #12
   23dc8:	f000 ff24 	bl	24c14 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   23dcc:	b128      	cbz	r0, 23dda <z_impl_k_queue_cancel_wait+0x4e>
   23dce:	2200      	movs	r2, #0
   23dd0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
	thread->base.swap_data = data;
   23dd4:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   23dd6:	f000 fb09 	bl	243ec <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   23dda:	f105 0014 	add.w	r0, r5, #20
   23dde:	2108      	movs	r1, #8
   23de0:	f00a fa38 	bl	2e254 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   23de4:	4631      	mov	r1, r6
   23de6:	4620      	mov	r0, r4
}
   23de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   23dec:	f000 b92c 	b.w	24048 <z_reschedule>
   23df0:	00030779 	.word	0x00030779
   23df4:	0003067f 	.word	0x0003067f

00023df8 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   23df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23dfc:	4605      	mov	r5, r0
   23dfe:	4617      	mov	r7, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   23e00:	460c      	mov	r4, r1
   23e02:	2900      	cmp	r1, #0
   23e04:	d045      	beq.n	23e92 <k_queue_append_list+0x9a>
   23e06:	2a00      	cmp	r2, #0
   23e08:	d043      	beq.n	23e92 <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23e0a:	f100 0608 	add.w	r6, r0, #8
   23e0e:	f04f 0320 	mov.w	r3, #32
   23e12:	f3ef 8811 	mrs	r8, BASEPRI
   23e16:	f383 8811 	msr	BASEPRI, r3
   23e1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e1e:	4630      	mov	r0, r6
   23e20:	f001 fac2 	bl	253a8 <z_spin_lock_valid>
   23e24:	b940      	cbnz	r0, 23e38 <k_queue_append_list+0x40>
   23e26:	491c      	ldr	r1, [pc, #112]	; (23e98 <k_queue_append_list+0xa0>)
   23e28:	481c      	ldr	r0, [pc, #112]	; (23e9c <k_queue_append_list+0xa4>)
   23e2a:	227c      	movs	r2, #124	; 0x7c
   23e2c:	f003 fd51 	bl	278d2 <printk>
   23e30:	217c      	movs	r1, #124	; 0x7c
   23e32:	4819      	ldr	r0, [pc, #100]	; (23e98 <k_queue_append_list+0xa0>)
   23e34:	f003 ffc6 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   23e38:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   23e3a:	f105 090c 	add.w	r9, r5, #12
   23e3e:	f001 fad1 	bl	253e4 <z_spin_lock_set_owner>
   23e42:	4648      	mov	r0, r9
   23e44:	f000 fee6 	bl	24c14 <z_unpend_first_thread>
   23e48:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   23e4c:	b920      	cbnz	r0, 23e58 <k_queue_append_list+0x60>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   23e4e:	686a      	ldr	r2, [r5, #4]
   23e50:	b9ca      	cbnz	r2, 23e86 <k_queue_append_list+0x8e>
	list->head = node;
   23e52:	602c      	str	r4, [r5, #0]
	list->tail = node;
   23e54:	606f      	str	r7, [r5, #4]
   23e56:	e00a      	b.n	23e6e <k_queue_append_list+0x76>
   23e58:	6144      	str	r4, [r0, #20]
   23e5a:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   23e5e:	f000 fac5 	bl	243ec <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   23e62:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   23e64:	4648      	mov	r0, r9
   23e66:	f000 fed5 	bl	24c14 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   23e6a:	2c00      	cmp	r4, #0
   23e6c:	d1ee      	bne.n	23e4c <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   23e6e:	2104      	movs	r1, #4
   23e70:	f105 0014 	add.w	r0, r5, #20
   23e74:	f00a f9ee 	bl	2e254 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   23e78:	4630      	mov	r0, r6
   23e7a:	4641      	mov	r1, r8
   23e7c:	f000 f8e4 	bl	24048 <z_reschedule>
	return 0;
   23e80:	2000      	movs	r0, #0
}
   23e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23e86:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23e88:	f003 0303 	and.w	r3, r3, #3
   23e8c:	431c      	orrs	r4, r3
   23e8e:	6014      	str	r4, [r2, #0]
   23e90:	e7e0      	b.n	23e54 <k_queue_append_list+0x5c>
		return -EINVAL;
   23e92:	f06f 0015 	mvn.w	r0, #21
   23e96:	e7f4      	b.n	23e82 <k_queue_append_list+0x8a>
   23e98:	00030779 	.word	0x00030779
   23e9c:	0003067f 	.word	0x0003067f

00023ea0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   23ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23ea4:	4605      	mov	r5, r0
   23ea6:	4690      	mov	r8, r2
   23ea8:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23eaa:	f100 0608 	add.w	r6, r0, #8
   23eae:	f04f 0320 	mov.w	r3, #32
   23eb2:	f3ef 8711 	mrs	r7, BASEPRI
   23eb6:	f383 8811 	msr	BASEPRI, r3
   23eba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ebe:	4630      	mov	r0, r6
   23ec0:	f001 fa72 	bl	253a8 <z_spin_lock_valid>
   23ec4:	b940      	cbnz	r0, 23ed8 <z_impl_k_queue_get+0x38>
   23ec6:	4920      	ldr	r1, [pc, #128]	; (23f48 <z_impl_k_queue_get+0xa8>)
   23ec8:	4820      	ldr	r0, [pc, #128]	; (23f4c <z_impl_k_queue_get+0xac>)
   23eca:	227c      	movs	r2, #124	; 0x7c
   23ecc:	f003 fd01 	bl	278d2 <printk>
   23ed0:	217c      	movs	r1, #124	; 0x7c
   23ed2:	481d      	ldr	r0, [pc, #116]	; (23f48 <z_impl_k_queue_get+0xa8>)
   23ed4:	f003 ff76 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   23ed8:	4630      	mov	r0, r6
   23eda:	f001 fa83 	bl	253e4 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   23ede:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   23ee0:	b30c      	cbz	r4, 23f26 <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23ee2:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23ee4:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23ee6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23eea:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   23eec:	4620      	mov	r0, r4
	list->head = node;
   23eee:	602b      	str	r3, [r5, #0]
	list->tail = node;
   23ef0:	bf08      	it	eq
   23ef2:	606b      	streq	r3, [r5, #4]
   23ef4:	2101      	movs	r1, #1
   23ef6:	f00a f832 	bl	2df5e <z_queue_node_peek>
   23efa:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23efc:	4630      	mov	r0, r6
   23efe:	f001 fa61 	bl	253c4 <z_spin_unlock_valid>
   23f02:	b940      	cbnz	r0, 23f16 <z_impl_k_queue_get+0x76>
   23f04:	4910      	ldr	r1, [pc, #64]	; (23f48 <z_impl_k_queue_get+0xa8>)
   23f06:	4811      	ldr	r0, [pc, #68]	; (23f4c <z_impl_k_queue_get+0xac>)
   23f08:	22a7      	movs	r2, #167	; 0xa7
   23f0a:	f003 fce2 	bl	278d2 <printk>
   23f0e:	21a7      	movs	r1, #167	; 0xa7
   23f10:	480d      	ldr	r0, [pc, #52]	; (23f48 <z_impl_k_queue_get+0xa8>)
   23f12:	f003 ff57 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   23f16:	f387 8811 	msr	BASEPRI, r7
   23f1a:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   23f1e:	4620      	mov	r0, r4
   23f20:	b003      	add	sp, #12
   23f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23f26:	ea58 0309 	orrs.w	r3, r8, r9
   23f2a:	d0e7      	beq.n	23efc <z_impl_k_queue_get+0x5c>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   23f2c:	e9cd 8900 	strd	r8, r9, [sp]
   23f30:	f105 020c 	add.w	r2, r5, #12
   23f34:	4639      	mov	r1, r7
   23f36:	4630      	mov	r0, r6
   23f38:	f000 fdca 	bl	24ad0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   23f3c:	2800      	cmp	r0, #0
   23f3e:	d1ee      	bne.n	23f1e <z_impl_k_queue_get+0x7e>
   23f40:	4b03      	ldr	r3, [pc, #12]	; (23f50 <z_impl_k_queue_get+0xb0>)
   23f42:	689b      	ldr	r3, [r3, #8]
   23f44:	695c      	ldr	r4, [r3, #20]
   23f46:	e7ea      	b.n	23f1e <z_impl_k_queue_get+0x7e>
   23f48:	00030779 	.word	0x00030779
   23f4c:	0003067f 	.word	0x0003067f
   23f50:	20005490 	.word	0x20005490

00023f54 <pended_on.isra.19>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   23f54:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   23f56:	b510      	push	{r4, lr}
   23f58:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   23f5a:	b953      	cbnz	r3, 23f72 <pended_on.isra.19+0x1e>
   23f5c:	4906      	ldr	r1, [pc, #24]	; (23f78 <pended_on.isra.19+0x24>)
   23f5e:	4807      	ldr	r0, [pc, #28]	; (23f7c <pended_on.isra.19+0x28>)
   23f60:	f44f 7201 	mov.w	r2, #516	; 0x204
   23f64:	f003 fcb5 	bl	278d2 <printk>
   23f68:	f44f 7101 	mov.w	r1, #516	; 0x204
   23f6c:	4802      	ldr	r0, [pc, #8]	; (23f78 <pended_on.isra.19+0x24>)
   23f6e:	f003 ff29 	bl	27dc4 <assert_post_action>

	return thread->base.pended_on;
}
   23f72:	6820      	ldr	r0, [r4, #0]
   23f74:	bd10      	pop	{r4, pc}
   23f76:	bf00      	nop
   23f78:	00036c49 	.word	0x00036c49
   23f7c:	0003067f 	.word	0x0003067f

00023f80 <z_reset_time_slice>:
{
   23f80:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   23f82:	4c08      	ldr	r4, [pc, #32]	; (23fa4 <z_reset_time_slice+0x24>)
   23f84:	6823      	ldr	r3, [r4, #0]
   23f86:	b15b      	cbz	r3, 23fa0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   23f88:	f7e3 fa92 	bl	74b0 <z_clock_elapsed>
   23f8c:	6823      	ldr	r3, [r4, #0]
   23f8e:	4a06      	ldr	r2, [pc, #24]	; (23fa8 <z_reset_time_slice+0x28>)
   23f90:	4418      	add	r0, r3
   23f92:	6150      	str	r0, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   23f94:	2100      	movs	r1, #0
   23f96:	4618      	mov	r0, r3
}
   23f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   23f9c:	f001 bd34 	b.w	25a08 <z_set_timeout_expiry>
}
   23fa0:	bd10      	pop	{r4, pc}
   23fa2:	bf00      	nop
   23fa4:	200054d0 	.word	0x200054d0
   23fa8:	20005490 	.word	0x20005490

00023fac <k_sched_time_slice_set>:
{
   23fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23fae:	4607      	mov	r7, r0
   23fb0:	460d      	mov	r5, r1
	__asm__ volatile(
   23fb2:	f04f 0320 	mov.w	r3, #32
   23fb6:	f3ef 8411 	mrs	r4, BASEPRI
   23fba:	f383 8811 	msr	BASEPRI, r3
   23fbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23fc2:	481b      	ldr	r0, [pc, #108]	; (24030 <k_sched_time_slice_set+0x84>)
   23fc4:	f001 f9f0 	bl	253a8 <z_spin_lock_valid>
   23fc8:	b940      	cbnz	r0, 23fdc <k_sched_time_slice_set+0x30>
   23fca:	491a      	ldr	r1, [pc, #104]	; (24034 <k_sched_time_slice_set+0x88>)
   23fcc:	481a      	ldr	r0, [pc, #104]	; (24038 <k_sched_time_slice_set+0x8c>)
   23fce:	227c      	movs	r2, #124	; 0x7c
   23fd0:	f003 fc7f 	bl	278d2 <printk>
   23fd4:	217c      	movs	r1, #124	; 0x7c
   23fd6:	4817      	ldr	r0, [pc, #92]	; (24034 <k_sched_time_slice_set+0x88>)
   23fd8:	f003 fef4 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   23fdc:	4814      	ldr	r0, [pc, #80]	; (24030 <k_sched_time_slice_set+0x84>)
   23fde:	f001 fa01 	bl	253e4 <z_spin_lock_set_owner>
		_current_cpu->slice_ticks = 0;
   23fe2:	4b16      	ldr	r3, [pc, #88]	; (2403c <k_sched_time_slice_set+0x90>)
   23fe4:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   23fe6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   23fea:	f240 30e7 	movw	r0, #999	; 0x3e7
   23fee:	2100      	movs	r1, #0
   23ff0:	615a      	str	r2, [r3, #20]
   23ff2:	fbe6 0107 	umlal	r0, r1, r6, r7
   23ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23ffa:	2300      	movs	r3, #0
   23ffc:	f7dd fcc6 	bl	198c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   24000:	4b0f      	ldr	r3, [pc, #60]	; (24040 <k_sched_time_slice_set+0x94>)
   24002:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   24004:	4b0f      	ldr	r3, [pc, #60]	; (24044 <k_sched_time_slice_set+0x98>)
   24006:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   24008:	f7ff ffba 	bl	23f80 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2400c:	4808      	ldr	r0, [pc, #32]	; (24030 <k_sched_time_slice_set+0x84>)
   2400e:	f001 f9d9 	bl	253c4 <z_spin_unlock_valid>
   24012:	b940      	cbnz	r0, 24026 <k_sched_time_slice_set+0x7a>
   24014:	4907      	ldr	r1, [pc, #28]	; (24034 <k_sched_time_slice_set+0x88>)
   24016:	4808      	ldr	r0, [pc, #32]	; (24038 <k_sched_time_slice_set+0x8c>)
   24018:	22a7      	movs	r2, #167	; 0xa7
   2401a:	f003 fc5a 	bl	278d2 <printk>
   2401e:	21a7      	movs	r1, #167	; 0xa7
   24020:	4804      	ldr	r0, [pc, #16]	; (24034 <k_sched_time_slice_set+0x88>)
   24022:	f003 fecf 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   24026:	f384 8811 	msr	BASEPRI, r4
   2402a:	f3bf 8f6f 	isb	sy
}
   2402e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24030:	200054c8 	.word	0x200054c8
   24034:	00030779 	.word	0x00030779
   24038:	0003067f 	.word	0x0003067f
   2403c:	20005490 	.word	0x20005490
   24040:	200054d0 	.word	0x200054d0
   24044:	200054cc 	.word	0x200054cc

00024048 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   24048:	b510      	push	{r4, lr}
   2404a:	4602      	mov	r2, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2404c:	460c      	mov	r4, r1
   2404e:	b9c1      	cbnz	r1, 24082 <z_reschedule+0x3a>
   24050:	f3ef 8305 	mrs	r3, IPSR
   24054:	b9ab      	cbnz	r3, 24082 <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   24056:	4b14      	ldr	r3, [pc, #80]	; (240a8 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   24058:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2405a:	689b      	ldr	r3, [r3, #8]
   2405c:	4299      	cmp	r1, r3
   2405e:	d010      	beq.n	24082 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24060:	f001 f9b0 	bl	253c4 <z_spin_unlock_valid>
   24064:	b940      	cbnz	r0, 24078 <z_reschedule+0x30>
   24066:	4911      	ldr	r1, [pc, #68]	; (240ac <z_reschedule+0x64>)
   24068:	4811      	ldr	r0, [pc, #68]	; (240b0 <z_reschedule+0x68>)
   2406a:	22be      	movs	r2, #190	; 0xbe
   2406c:	f003 fc31 	bl	278d2 <printk>
   24070:	21be      	movs	r1, #190	; 0xbe
   24072:	480e      	ldr	r0, [pc, #56]	; (240ac <z_reschedule+0x64>)
   24074:	f003 fea6 	bl	27dc4 <assert_post_action>
	ret = arch_swap(key);
   24078:	2000      	movs	r0, #0
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2407a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2407e:	f7e3 bcb5 	b.w	79ec <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24082:	4610      	mov	r0, r2
   24084:	f001 f99e 	bl	253c4 <z_spin_unlock_valid>
   24088:	b940      	cbnz	r0, 2409c <z_reschedule+0x54>
   2408a:	4908      	ldr	r1, [pc, #32]	; (240ac <z_reschedule+0x64>)
   2408c:	4808      	ldr	r0, [pc, #32]	; (240b0 <z_reschedule+0x68>)
   2408e:	22a7      	movs	r2, #167	; 0xa7
   24090:	f003 fc1f 	bl	278d2 <printk>
   24094:	21a7      	movs	r1, #167	; 0xa7
   24096:	4805      	ldr	r0, [pc, #20]	; (240ac <z_reschedule+0x64>)
   24098:	f003 fe94 	bl	27dc4 <assert_post_action>
   2409c:	f384 8811 	msr	BASEPRI, r4
   240a0:	f3bf 8f6f 	isb	sy
   240a4:	bd10      	pop	{r4, pc}
   240a6:	bf00      	nop
   240a8:	20005490 	.word	0x20005490
   240ac:	00030779 	.word	0x00030779
   240b0:	0003067f 	.word	0x0003067f

000240b4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   240b4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   240b6:	f04f 0320 	mov.w	r3, #32
   240ba:	f3ef 8511 	mrs	r5, BASEPRI
   240be:	f383 8811 	msr	BASEPRI, r3
   240c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   240c6:	4822      	ldr	r0, [pc, #136]	; (24150 <k_sched_lock+0x9c>)
   240c8:	f001 f96e 	bl	253a8 <z_spin_lock_valid>
   240cc:	b940      	cbnz	r0, 240e0 <k_sched_lock+0x2c>
   240ce:	4921      	ldr	r1, [pc, #132]	; (24154 <k_sched_lock+0xa0>)
   240d0:	4821      	ldr	r0, [pc, #132]	; (24158 <k_sched_lock+0xa4>)
   240d2:	227c      	movs	r2, #124	; 0x7c
   240d4:	f003 fbfd 	bl	278d2 <printk>
   240d8:	217c      	movs	r1, #124	; 0x7c
   240da:	481e      	ldr	r0, [pc, #120]	; (24154 <k_sched_lock+0xa0>)
   240dc:	f003 fe72 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   240e0:	481b      	ldr	r0, [pc, #108]	; (24150 <k_sched_lock+0x9c>)
   240e2:	f001 f97f 	bl	253e4 <z_spin_lock_set_owner>
   240e6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   240ea:	b153      	cbz	r3, 24102 <k_sched_lock+0x4e>
   240ec:	491b      	ldr	r1, [pc, #108]	; (2415c <k_sched_lock+0xa8>)
   240ee:	481a      	ldr	r0, [pc, #104]	; (24158 <k_sched_lock+0xa4>)
   240f0:	f44f 7289 	mov.w	r2, #274	; 0x112
   240f4:	f003 fbed 	bl	278d2 <printk>
   240f8:	f44f 7189 	mov.w	r1, #274	; 0x112
   240fc:	4817      	ldr	r0, [pc, #92]	; (2415c <k_sched_lock+0xa8>)
   240fe:	f003 fe61 	bl	27dc4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   24102:	4c17      	ldr	r4, [pc, #92]	; (24160 <k_sched_lock+0xac>)
   24104:	68a2      	ldr	r2, [r4, #8]
   24106:	7bd2      	ldrb	r2, [r2, #15]
   24108:	2a01      	cmp	r2, #1
   2410a:	d10a      	bne.n	24122 <k_sched_lock+0x6e>
   2410c:	4913      	ldr	r1, [pc, #76]	; (2415c <k_sched_lock+0xa8>)
   2410e:	4812      	ldr	r0, [pc, #72]	; (24158 <k_sched_lock+0xa4>)
   24110:	f240 1213 	movw	r2, #275	; 0x113
   24114:	f003 fbdd 	bl	278d2 <printk>
   24118:	f240 1113 	movw	r1, #275	; 0x113
   2411c:	480f      	ldr	r0, [pc, #60]	; (2415c <k_sched_lock+0xa8>)
   2411e:	f003 fe51 	bl	27dc4 <assert_post_action>
	--_current->base.sched_locked;
   24122:	68a2      	ldr	r2, [r4, #8]
   24124:	7bd3      	ldrb	r3, [r2, #15]
   24126:	3b01      	subs	r3, #1
   24128:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2412a:	4809      	ldr	r0, [pc, #36]	; (24150 <k_sched_lock+0x9c>)
   2412c:	f001 f94a 	bl	253c4 <z_spin_unlock_valid>
   24130:	b940      	cbnz	r0, 24144 <k_sched_lock+0x90>
   24132:	4908      	ldr	r1, [pc, #32]	; (24154 <k_sched_lock+0xa0>)
   24134:	4808      	ldr	r0, [pc, #32]	; (24158 <k_sched_lock+0xa4>)
   24136:	22a7      	movs	r2, #167	; 0xa7
   24138:	f003 fbcb 	bl	278d2 <printk>
   2413c:	21a7      	movs	r1, #167	; 0xa7
   2413e:	4805      	ldr	r0, [pc, #20]	; (24154 <k_sched_lock+0xa0>)
   24140:	f003 fe40 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   24144:	f385 8811 	msr	BASEPRI, r5
   24148:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   2414c:	bd38      	pop	{r3, r4, r5, pc}
   2414e:	bf00      	nop
   24150:	200054c8 	.word	0x200054c8
   24154:	00030779 	.word	0x00030779
   24158:	0003067f 	.word	0x0003067f
   2415c:	00036c1e 	.word	0x00036c1e
   24160:	20005490 	.word	0x20005490

00024164 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   24164:	4b11      	ldr	r3, [pc, #68]	; (241ac <z_priq_dumb_remove+0x48>)
   24166:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   2416a:	4282      	cmp	r2, r0
{
   2416c:	b510      	push	{r4, lr}
   2416e:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   24170:	d105      	bne.n	2417e <z_priq_dumb_remove+0x1a>
   24172:	689b      	ldr	r3, [r3, #8]
   24174:	428b      	cmp	r3, r1
   24176:	d102      	bne.n	2417e <z_priq_dumb_remove+0x1a>
   24178:	7b4b      	ldrb	r3, [r1, #13]
   2417a:	06db      	lsls	r3, r3, #27
   2417c:	d114      	bne.n	241a8 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2417e:	4b0c      	ldr	r3, [pc, #48]	; (241b0 <z_priq_dumb_remove+0x4c>)
   24180:	429c      	cmp	r4, r3
   24182:	d10a      	bne.n	2419a <z_priq_dumb_remove+0x36>
   24184:	490b      	ldr	r1, [pc, #44]	; (241b4 <z_priq_dumb_remove+0x50>)
   24186:	480c      	ldr	r0, [pc, #48]	; (241b8 <z_priq_dumb_remove+0x54>)
   24188:	f240 32da 	movw	r2, #986	; 0x3da
   2418c:	f003 fba1 	bl	278d2 <printk>
   24190:	f240 31da 	movw	r1, #986	; 0x3da
   24194:	4807      	ldr	r0, [pc, #28]	; (241b4 <z_priq_dumb_remove+0x50>)
   24196:	f003 fe15 	bl	27dc4 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   2419a:	e9d4 3200 	ldrd	r3, r2, [r4]
   2419e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   241a0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   241a2:	2300      	movs	r3, #0
	node->prev = NULL;
   241a4:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   241a8:	bd10      	pop	{r4, pc}
   241aa:	bf00      	nop
   241ac:	20005490 	.word	0x20005490
   241b0:	20002f08 	.word	0x20002f08
   241b4:	00036c49 	.word	0x00036c49
   241b8:	0003067f 	.word	0x0003067f

000241bc <z_unpend_thread>:
{
   241bc:	b538      	push	{r3, r4, r5, lr}
   241be:	4604      	mov	r4, r0
	__asm__ volatile(
   241c0:	f04f 0320 	mov.w	r3, #32
   241c4:	f3ef 8511 	mrs	r5, BASEPRI
   241c8:	f383 8811 	msr	BASEPRI, r3
   241cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   241d0:	4814      	ldr	r0, [pc, #80]	; (24224 <z_unpend_thread+0x68>)
   241d2:	f001 f8e9 	bl	253a8 <z_spin_lock_valid>
   241d6:	b940      	cbnz	r0, 241ea <z_unpend_thread+0x2e>
   241d8:	4913      	ldr	r1, [pc, #76]	; (24228 <z_unpend_thread+0x6c>)
   241da:	4814      	ldr	r0, [pc, #80]	; (2422c <z_unpend_thread+0x70>)
   241dc:	227c      	movs	r2, #124	; 0x7c
   241de:	f003 fb78 	bl	278d2 <printk>
   241e2:	217c      	movs	r1, #124	; 0x7c
   241e4:	4810      	ldr	r0, [pc, #64]	; (24228 <z_unpend_thread+0x6c>)
   241e6:	f003 fded 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   241ea:	480e      	ldr	r0, [pc, #56]	; (24224 <z_unpend_thread+0x68>)
   241ec:	f001 f8fa 	bl	253e4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   241f0:	4620      	mov	r0, r4
   241f2:	f009 ff01 	bl	2dff8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   241f6:	480b      	ldr	r0, [pc, #44]	; (24224 <z_unpend_thread+0x68>)
   241f8:	f001 f8e4 	bl	253c4 <z_spin_unlock_valid>
   241fc:	b940      	cbnz	r0, 24210 <z_unpend_thread+0x54>
   241fe:	490a      	ldr	r1, [pc, #40]	; (24228 <z_unpend_thread+0x6c>)
   24200:	480a      	ldr	r0, [pc, #40]	; (2422c <z_unpend_thread+0x70>)
   24202:	22a7      	movs	r2, #167	; 0xa7
   24204:	f003 fb65 	bl	278d2 <printk>
   24208:	21a7      	movs	r1, #167	; 0xa7
   2420a:	4807      	ldr	r0, [pc, #28]	; (24228 <z_unpend_thread+0x6c>)
   2420c:	f003 fdda 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   24210:	f385 8811 	msr	BASEPRI, r5
   24214:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   24218:	f104 0018 	add.w	r0, r4, #24
}
   2421c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24220:	f001 bb46 	b.w	258b0 <z_abort_timeout>
   24224:	200054c8 	.word	0x200054c8
   24228:	00030779 	.word	0x00030779
   2422c:	0003067f 	.word	0x0003067f

00024230 <update_cache>:
{
   24230:	b538      	push	{r3, r4, r5, lr}
   24232:	4c19      	ldr	r4, [pc, #100]	; (24298 <update_cache+0x68>)
	if (_current_cpu->pending_abort != NULL) {
   24234:	6923      	ldr	r3, [r4, #16]
   24236:	68a2      	ldr	r2, [r4, #8]
{
   24238:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   2423a:	b143      	cbz	r3, 2424e <update_cache+0x1e>
		return _current_cpu->idle_thread;
   2423c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   2423e:	b1a8      	cbz	r0, 2426c <update_cache+0x3c>
		if (thread != _current) {
   24240:	68a3      	ldr	r3, [r4, #8]
   24242:	42ab      	cmp	r3, r5
   24244:	d001      	beq.n	2424a <update_cache+0x1a>
			z_reset_time_slice();
   24246:	f7ff fe9b 	bl	23f80 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2424a:	62a5      	str	r5, [r4, #40]	; 0x28
}
   2424c:	e023      	b.n	24296 <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   2424e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   24252:	f009 fee0 	bl	2e016 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   24256:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   24258:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   2425a:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   2425c:	bf44      	itt	mi
   2425e:	f043 0308 	orrmi.w	r3, r3, #8
   24262:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   24264:	b905      	cbnz	r5, 24268 <update_cache+0x38>
   24266:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   24268:	b151      	cbz	r1, 24280 <update_cache+0x50>
   2426a:	e7e9      	b.n	24240 <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   2426c:	b942      	cbnz	r2, 24280 <update_cache+0x50>
   2426e:	490b      	ldr	r1, [pc, #44]	; (2429c <update_cache+0x6c>)
   24270:	480b      	ldr	r0, [pc, #44]	; (242a0 <update_cache+0x70>)
   24272:	2283      	movs	r2, #131	; 0x83
   24274:	f003 fb2d 	bl	278d2 <printk>
   24278:	2183      	movs	r1, #131	; 0x83
   2427a:	4808      	ldr	r0, [pc, #32]	; (2429c <update_cache+0x6c>)
   2427c:	f003 fda2 	bl	27dc4 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   24280:	68a3      	ldr	r3, [r4, #8]
   24282:	7b5a      	ldrb	r2, [r3, #13]
   24284:	06d2      	lsls	r2, r2, #27
   24286:	d1db      	bne.n	24240 <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   24288:	69aa      	ldr	r2, [r5, #24]
   2428a:	2a00      	cmp	r2, #0
   2428c:	d1d8      	bne.n	24240 <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   2428e:	89da      	ldrh	r2, [r3, #14]
   24290:	2a7f      	cmp	r2, #127	; 0x7f
   24292:	d9d5      	bls.n	24240 <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   24294:	62a3      	str	r3, [r4, #40]	; 0x28
}
   24296:	bd38      	pop	{r3, r4, r5, pc}
   24298:	20005490 	.word	0x20005490
   2429c:	00036c49 	.word	0x00036c49
   242a0:	0003067f 	.word	0x0003067f

000242a4 <k_sched_unlock>:
{
   242a4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   242a6:	f04f 0320 	mov.w	r3, #32
   242aa:	f3ef 8511 	mrs	r5, BASEPRI
   242ae:	f383 8811 	msr	BASEPRI, r3
   242b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   242b6:	4824      	ldr	r0, [pc, #144]	; (24348 <k_sched_unlock+0xa4>)
   242b8:	f001 f876 	bl	253a8 <z_spin_lock_valid>
   242bc:	b940      	cbnz	r0, 242d0 <k_sched_unlock+0x2c>
   242be:	4923      	ldr	r1, [pc, #140]	; (2434c <k_sched_unlock+0xa8>)
   242c0:	4823      	ldr	r0, [pc, #140]	; (24350 <k_sched_unlock+0xac>)
   242c2:	227c      	movs	r2, #124	; 0x7c
   242c4:	f003 fb05 	bl	278d2 <printk>
   242c8:	217c      	movs	r1, #124	; 0x7c
   242ca:	4820      	ldr	r0, [pc, #128]	; (2434c <k_sched_unlock+0xa8>)
   242cc:	f003 fd7a 	bl	27dc4 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   242d0:	4c20      	ldr	r4, [pc, #128]	; (24354 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   242d2:	481d      	ldr	r0, [pc, #116]	; (24348 <k_sched_unlock+0xa4>)
   242d4:	f001 f886 	bl	253e4 <z_spin_lock_set_owner>
   242d8:	68a2      	ldr	r2, [r4, #8]
   242da:	7bd2      	ldrb	r2, [r2, #15]
   242dc:	b952      	cbnz	r2, 242f4 <k_sched_unlock+0x50>
   242de:	491e      	ldr	r1, [pc, #120]	; (24358 <k_sched_unlock+0xb4>)
   242e0:	481b      	ldr	r0, [pc, #108]	; (24350 <k_sched_unlock+0xac>)
   242e2:	f44f 725d 	mov.w	r2, #884	; 0x374
   242e6:	f003 faf4 	bl	278d2 <printk>
   242ea:	f44f 715d 	mov.w	r1, #884	; 0x374
   242ee:	481a      	ldr	r0, [pc, #104]	; (24358 <k_sched_unlock+0xb4>)
   242f0:	f003 fd68 	bl	27dc4 <assert_post_action>
   242f4:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   242f8:	b153      	cbz	r3, 24310 <k_sched_unlock+0x6c>
   242fa:	4917      	ldr	r1, [pc, #92]	; (24358 <k_sched_unlock+0xb4>)
   242fc:	4814      	ldr	r0, [pc, #80]	; (24350 <k_sched_unlock+0xac>)
   242fe:	f240 3275 	movw	r2, #885	; 0x375
   24302:	f003 fae6 	bl	278d2 <printk>
   24306:	f240 3175 	movw	r1, #885	; 0x375
   2430a:	4813      	ldr	r0, [pc, #76]	; (24358 <k_sched_unlock+0xb4>)
   2430c:	f003 fd5a 	bl	27dc4 <assert_post_action>
		++_current->base.sched_locked;
   24310:	68a2      	ldr	r2, [r4, #8]
   24312:	7bd3      	ldrb	r3, [r2, #15]
   24314:	3301      	adds	r3, #1
		update_cache(0);
   24316:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   24318:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2431a:	f7ff ff89 	bl	24230 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2431e:	480a      	ldr	r0, [pc, #40]	; (24348 <k_sched_unlock+0xa4>)
   24320:	f001 f850 	bl	253c4 <z_spin_unlock_valid>
   24324:	b940      	cbnz	r0, 24338 <k_sched_unlock+0x94>
   24326:	4909      	ldr	r1, [pc, #36]	; (2434c <k_sched_unlock+0xa8>)
   24328:	4809      	ldr	r0, [pc, #36]	; (24350 <k_sched_unlock+0xac>)
   2432a:	22a7      	movs	r2, #167	; 0xa7
   2432c:	f003 fad1 	bl	278d2 <printk>
   24330:	21a7      	movs	r1, #167	; 0xa7
   24332:	4806      	ldr	r0, [pc, #24]	; (2434c <k_sched_unlock+0xa8>)
   24334:	f003 fd46 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   24338:	f385 8811 	msr	BASEPRI, r5
   2433c:	f3bf 8f6f 	isb	sy
}
   24340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   24344:	f009 be4e 	b.w	2dfe4 <z_reschedule_unlocked>
   24348:	200054c8 	.word	0x200054c8
   2434c:	00030779 	.word	0x00030779
   24350:	0003067f 	.word	0x0003067f
   24354:	20005490 	.word	0x20005490
   24358:	00036c49 	.word	0x00036c49

0002435c <ready_thread>:
{
   2435c:	b570      	push	{r4, r5, r6, lr}
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2435e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   24360:	061a      	lsls	r2, r3, #24
{
   24362:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   24364:	d439      	bmi.n	243da <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24366:	06db      	lsls	r3, r3, #27
   24368:	d137      	bne.n	243da <ready_thread+0x7e>
   2436a:	6983      	ldr	r3, [r0, #24]
   2436c:	2b00      	cmp	r3, #0
   2436e:	d134      	bne.n	243da <ready_thread+0x7e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24370:	4b1a      	ldr	r3, [pc, #104]	; (243dc <ready_thread+0x80>)
   24372:	4298      	cmp	r0, r3
   24374:	d10a      	bne.n	2438c <ready_thread+0x30>
   24376:	491a      	ldr	r1, [pc, #104]	; (243e0 <ready_thread+0x84>)
   24378:	481a      	ldr	r0, [pc, #104]	; (243e4 <ready_thread+0x88>)
   2437a:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   2437e:	f003 faa8 	bl	278d2 <printk>
   24382:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   24386:	4816      	ldr	r0, [pc, #88]	; (243e0 <ready_thread+0x84>)
   24388:	f003 fd1c 	bl	27dc4 <assert_post_action>
	return list->head == list;
   2438c:	4a16      	ldr	r2, [pc, #88]	; (243e8 <ready_thread+0x8c>)
   2438e:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24392:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   24396:	428b      	cmp	r3, r1
   24398:	d019      	beq.n	243ce <ready_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2439a:	b1c3      	cbz	r3, 243ce <ready_thread+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   2439c:	f994 500e 	ldrsb.w	r5, [r4, #14]
   243a0:	f993 600e 	ldrsb.w	r6, [r3, #14]
   243a4:	42ae      	cmp	r6, r5
   243a6:	dd0d      	ble.n	243c4 <ready_thread+0x68>
	node->prev = successor->prev;
   243a8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   243aa:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   243ae:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   243b0:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   243b2:	7b63      	ldrb	r3, [r4, #13]
   243b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   243b8:	7363      	strb	r3, [r4, #13]
		update_cache(0);
   243ba:	2000      	movs	r0, #0
}
   243bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   243c0:	f7ff bf36 	b.w	24230 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   243c4:	4298      	cmp	r0, r3
   243c6:	d002      	beq.n	243ce <ready_thread+0x72>
   243c8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   243ca:	2b00      	cmp	r3, #0
   243cc:	d1e8      	bne.n	243a0 <ready_thread+0x44>
	node->prev = list->tail;
   243ce:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   243d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   243d4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   243d6:	6314      	str	r4, [r2, #48]	; 0x30
   243d8:	e7eb      	b.n	243b2 <ready_thread+0x56>
}
   243da:	bd70      	pop	{r4, r5, r6, pc}
   243dc:	20002f08 	.word	0x20002f08
   243e0:	00036c49 	.word	0x00036c49
   243e4:	0003067f 	.word	0x0003067f
   243e8:	20005490 	.word	0x20005490

000243ec <z_ready_thread>:
{
   243ec:	b538      	push	{r3, r4, r5, lr}
   243ee:	4605      	mov	r5, r0
	__asm__ volatile(
   243f0:	f04f 0320 	mov.w	r3, #32
   243f4:	f3ef 8411 	mrs	r4, BASEPRI
   243f8:	f383 8811 	msr	BASEPRI, r3
   243fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24400:	4812      	ldr	r0, [pc, #72]	; (2444c <z_ready_thread+0x60>)
   24402:	f000 ffd1 	bl	253a8 <z_spin_lock_valid>
   24406:	b940      	cbnz	r0, 2441a <z_ready_thread+0x2e>
   24408:	4911      	ldr	r1, [pc, #68]	; (24450 <z_ready_thread+0x64>)
   2440a:	4812      	ldr	r0, [pc, #72]	; (24454 <z_ready_thread+0x68>)
   2440c:	227c      	movs	r2, #124	; 0x7c
   2440e:	f003 fa60 	bl	278d2 <printk>
   24412:	217c      	movs	r1, #124	; 0x7c
   24414:	480e      	ldr	r0, [pc, #56]	; (24450 <z_ready_thread+0x64>)
   24416:	f003 fcd5 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2441a:	480c      	ldr	r0, [pc, #48]	; (2444c <z_ready_thread+0x60>)
   2441c:	f000 ffe2 	bl	253e4 <z_spin_lock_set_owner>
		ready_thread(thread);
   24420:	4628      	mov	r0, r5
   24422:	f7ff ff9b 	bl	2435c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24426:	4809      	ldr	r0, [pc, #36]	; (2444c <z_ready_thread+0x60>)
   24428:	f000 ffcc 	bl	253c4 <z_spin_unlock_valid>
   2442c:	b940      	cbnz	r0, 24440 <z_ready_thread+0x54>
   2442e:	4908      	ldr	r1, [pc, #32]	; (24450 <z_ready_thread+0x64>)
   24430:	4808      	ldr	r0, [pc, #32]	; (24454 <z_ready_thread+0x68>)
   24432:	22a7      	movs	r2, #167	; 0xa7
   24434:	f003 fa4d 	bl	278d2 <printk>
   24438:	21a7      	movs	r1, #167	; 0xa7
   2443a:	4805      	ldr	r0, [pc, #20]	; (24450 <z_ready_thread+0x64>)
   2443c:	f003 fcc2 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   24440:	f384 8811 	msr	BASEPRI, r4
   24444:	f3bf 8f6f 	isb	sy
}
   24448:	bd38      	pop	{r3, r4, r5, pc}
   2444a:	bf00      	nop
   2444c:	200054c8 	.word	0x200054c8
   24450:	00030779 	.word	0x00030779
   24454:	0003067f 	.word	0x0003067f

00024458 <z_sched_start>:
{
   24458:	b538      	push	{r3, r4, r5, lr}
   2445a:	4604      	mov	r4, r0
	__asm__ volatile(
   2445c:	f04f 0320 	mov.w	r3, #32
   24460:	f3ef 8511 	mrs	r5, BASEPRI
   24464:	f383 8811 	msr	BASEPRI, r3
   24468:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2446c:	4818      	ldr	r0, [pc, #96]	; (244d0 <z_sched_start+0x78>)
   2446e:	f000 ff9b 	bl	253a8 <z_spin_lock_valid>
   24472:	b940      	cbnz	r0, 24486 <z_sched_start+0x2e>
   24474:	4917      	ldr	r1, [pc, #92]	; (244d4 <z_sched_start+0x7c>)
   24476:	4818      	ldr	r0, [pc, #96]	; (244d8 <z_sched_start+0x80>)
   24478:	227c      	movs	r2, #124	; 0x7c
   2447a:	f003 fa2a 	bl	278d2 <printk>
   2447e:	217c      	movs	r1, #124	; 0x7c
   24480:	4814      	ldr	r0, [pc, #80]	; (244d4 <z_sched_start+0x7c>)
   24482:	f003 fc9f 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   24486:	4812      	ldr	r0, [pc, #72]	; (244d0 <z_sched_start+0x78>)
   24488:	f000 ffac 	bl	253e4 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   2448c:	7b63      	ldrb	r3, [r4, #13]
   2448e:	075a      	lsls	r2, r3, #29
   24490:	d411      	bmi.n	244b6 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24492:	480f      	ldr	r0, [pc, #60]	; (244d0 <z_sched_start+0x78>)
   24494:	f000 ff96 	bl	253c4 <z_spin_unlock_valid>
   24498:	b940      	cbnz	r0, 244ac <z_sched_start+0x54>
   2449a:	490e      	ldr	r1, [pc, #56]	; (244d4 <z_sched_start+0x7c>)
   2449c:	480e      	ldr	r0, [pc, #56]	; (244d8 <z_sched_start+0x80>)
   2449e:	22a7      	movs	r2, #167	; 0xa7
   244a0:	f003 fa17 	bl	278d2 <printk>
   244a4:	21a7      	movs	r1, #167	; 0xa7
   244a6:	480b      	ldr	r0, [pc, #44]	; (244d4 <z_sched_start+0x7c>)
   244a8:	f003 fc8c 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   244ac:	f385 8811 	msr	BASEPRI, r5
   244b0:	f3bf 8f6f 	isb	sy
}
   244b4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   244b6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   244ba:	4620      	mov	r0, r4
   244bc:	7363      	strb	r3, [r4, #13]
   244be:	f7ff ff4d 	bl	2435c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   244c2:	4629      	mov	r1, r5
   244c4:	4802      	ldr	r0, [pc, #8]	; (244d0 <z_sched_start+0x78>)
}
   244c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   244ca:	f7ff bdbd 	b.w	24048 <z_reschedule>
   244ce:	bf00      	nop
   244d0:	200054c8 	.word	0x200054c8
   244d4:	00030779 	.word	0x00030779
   244d8:	0003067f 	.word	0x0003067f

000244dc <z_thread_timeout>:
{
   244dc:	b570      	push	{r4, r5, r6, lr}
   244de:	4604      	mov	r4, r0
	__asm__ volatile(
   244e0:	f04f 0320 	mov.w	r3, #32
   244e4:	f3ef 8611 	mrs	r6, BASEPRI
   244e8:	f383 8811 	msr	BASEPRI, r3
   244ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   244f0:	4819      	ldr	r0, [pc, #100]	; (24558 <z_thread_timeout+0x7c>)
   244f2:	f000 ff59 	bl	253a8 <z_spin_lock_valid>
   244f6:	b940      	cbnz	r0, 2450a <z_thread_timeout+0x2e>
   244f8:	4918      	ldr	r1, [pc, #96]	; (2455c <z_thread_timeout+0x80>)
   244fa:	4819      	ldr	r0, [pc, #100]	; (24560 <z_thread_timeout+0x84>)
   244fc:	227c      	movs	r2, #124	; 0x7c
   244fe:	f003 f9e8 	bl	278d2 <printk>
   24502:	217c      	movs	r1, #124	; 0x7c
   24504:	4815      	ldr	r0, [pc, #84]	; (2455c <z_thread_timeout+0x80>)
   24506:	f003 fc5d 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2450a:	4813      	ldr	r0, [pc, #76]	; (24558 <z_thread_timeout+0x7c>)
   2450c:	f000 ff6a 	bl	253e4 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   24510:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   24514:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   24518:	b113      	cbz	r3, 24520 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   2451a:	4628      	mov	r0, r5
   2451c:	f009 fd6c 	bl	2dff8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   24520:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   24524:	f023 0314 	bic.w	r3, r3, #20
		ready_thread(thread);
   24528:	4628      	mov	r0, r5
   2452a:	f804 3c0b 	strb.w	r3, [r4, #-11]
   2452e:	f7ff ff15 	bl	2435c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24532:	4809      	ldr	r0, [pc, #36]	; (24558 <z_thread_timeout+0x7c>)
   24534:	f000 ff46 	bl	253c4 <z_spin_unlock_valid>
   24538:	b940      	cbnz	r0, 2454c <z_thread_timeout+0x70>
   2453a:	4908      	ldr	r1, [pc, #32]	; (2455c <z_thread_timeout+0x80>)
   2453c:	4808      	ldr	r0, [pc, #32]	; (24560 <z_thread_timeout+0x84>)
   2453e:	22a7      	movs	r2, #167	; 0xa7
   24540:	f003 f9c7 	bl	278d2 <printk>
   24544:	21a7      	movs	r1, #167	; 0xa7
   24546:	4805      	ldr	r0, [pc, #20]	; (2455c <z_thread_timeout+0x80>)
   24548:	f003 fc3c 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   2454c:	f386 8811 	msr	BASEPRI, r6
   24550:	f3bf 8f6f 	isb	sy
}
   24554:	bd70      	pop	{r4, r5, r6, pc}
   24556:	bf00      	nop
   24558:	200054c8 	.word	0x200054c8
   2455c:	00030779 	.word	0x00030779
   24560:	0003067f 	.word	0x0003067f

00024564 <move_thread_to_end_of_prio_q>:
{
   24564:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   24566:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2456a:	2b00      	cmp	r3, #0
{
   2456c:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2456e:	da03      	bge.n	24578 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   24570:	4601      	mov	r1, r0
   24572:	481d      	ldr	r0, [pc, #116]	; (245e8 <move_thread_to_end_of_prio_q+0x84>)
   24574:	f7ff fdf6 	bl	24164 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24578:	4b1c      	ldr	r3, [pc, #112]	; (245ec <move_thread_to_end_of_prio_q+0x88>)
   2457a:	429c      	cmp	r4, r3
   2457c:	d10a      	bne.n	24594 <move_thread_to_end_of_prio_q+0x30>
   2457e:	491c      	ldr	r1, [pc, #112]	; (245f0 <move_thread_to_end_of_prio_q+0x8c>)
   24580:	481c      	ldr	r0, [pc, #112]	; (245f4 <move_thread_to_end_of_prio_q+0x90>)
   24582:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   24586:	f003 f9a4 	bl	278d2 <printk>
   2458a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   2458e:	4818      	ldr	r0, [pc, #96]	; (245f0 <move_thread_to_end_of_prio_q+0x8c>)
   24590:	f003 fc18 	bl	27dc4 <assert_post_action>
	return list->head == list;
   24594:	4a18      	ldr	r2, [pc, #96]	; (245f8 <move_thread_to_end_of_prio_q+0x94>)
   24596:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2459a:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   2459e:	428b      	cmp	r3, r1
   245a0:	d01c      	beq.n	245dc <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   245a2:	b1db      	cbz	r3, 245dc <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   245a4:	f994 500e 	ldrsb.w	r5, [r4, #14]
   245a8:	f993 600e 	ldrsb.w	r6, [r3, #14]
   245ac:	42ae      	cmp	r6, r5
   245ae:	dd10      	ble.n	245d2 <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   245b0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   245b2:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   245b6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   245b8:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   245ba:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   245bc:	6890      	ldr	r0, [r2, #8]
   245be:	f063 037f 	orn	r3, r3, #127	; 0x7f
   245c2:	7363      	strb	r3, [r4, #13]
   245c4:	1b03      	subs	r3, r0, r4
   245c6:	4258      	negs	r0, r3
   245c8:	4158      	adcs	r0, r3
}
   245ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   245ce:	f7ff be2f 	b.w	24230 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   245d2:	4298      	cmp	r0, r3
   245d4:	d002      	beq.n	245dc <move_thread_to_end_of_prio_q+0x78>
   245d6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   245d8:	2b00      	cmp	r3, #0
   245da:	d1e5      	bne.n	245a8 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   245dc:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   245e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   245e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   245e4:	6314      	str	r4, [r2, #48]	; 0x30
   245e6:	e7e8      	b.n	245ba <move_thread_to_end_of_prio_q+0x56>
   245e8:	200054bc 	.word	0x200054bc
   245ec:	20002f08 	.word	0x20002f08
   245f0:	00036c49 	.word	0x00036c49
   245f4:	0003067f 	.word	0x0003067f
   245f8:	20005490 	.word	0x20005490

000245fc <z_time_slice>:
{
   245fc:	b570      	push	{r4, r5, r6, lr}
   245fe:	4605      	mov	r5, r0
	__asm__ volatile(
   24600:	f04f 0320 	mov.w	r3, #32
   24604:	f3ef 8411 	mrs	r4, BASEPRI
   24608:	f383 8811 	msr	BASEPRI, r3
   2460c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24610:	4825      	ldr	r0, [pc, #148]	; (246a8 <z_time_slice+0xac>)
   24612:	f000 fec9 	bl	253a8 <z_spin_lock_valid>
   24616:	b940      	cbnz	r0, 2462a <z_time_slice+0x2e>
   24618:	4924      	ldr	r1, [pc, #144]	; (246ac <z_time_slice+0xb0>)
   2461a:	4825      	ldr	r0, [pc, #148]	; (246b0 <z_time_slice+0xb4>)
   2461c:	227c      	movs	r2, #124	; 0x7c
   2461e:	f003 f958 	bl	278d2 <printk>
   24622:	217c      	movs	r1, #124	; 0x7c
   24624:	4821      	ldr	r0, [pc, #132]	; (246ac <z_time_slice+0xb0>)
   24626:	f003 fbcd 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2462a:	481f      	ldr	r0, [pc, #124]	; (246a8 <z_time_slice+0xac>)
   2462c:	f000 feda 	bl	253e4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   24630:	4b20      	ldr	r3, [pc, #128]	; (246b4 <z_time_slice+0xb8>)
   24632:	4a21      	ldr	r2, [pc, #132]	; (246b8 <z_time_slice+0xbc>)
   24634:	6898      	ldr	r0, [r3, #8]
   24636:	6811      	ldr	r1, [r2, #0]
   24638:	4288      	cmp	r0, r1
   2463a:	4619      	mov	r1, r3
   2463c:	d113      	bne.n	24666 <z_time_slice+0x6a>
			z_reset_time_slice();
   2463e:	f7ff fc9f 	bl	23f80 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24642:	4819      	ldr	r0, [pc, #100]	; (246a8 <z_time_slice+0xac>)
   24644:	f000 febe 	bl	253c4 <z_spin_unlock_valid>
   24648:	b940      	cbnz	r0, 2465c <z_time_slice+0x60>
   2464a:	4918      	ldr	r1, [pc, #96]	; (246ac <z_time_slice+0xb0>)
   2464c:	4818      	ldr	r0, [pc, #96]	; (246b0 <z_time_slice+0xb4>)
   2464e:	22a7      	movs	r2, #167	; 0xa7
   24650:	f003 f93f 	bl	278d2 <printk>
   24654:	21a7      	movs	r1, #167	; 0xa7
   24656:	4815      	ldr	r0, [pc, #84]	; (246ac <z_time_slice+0xb0>)
   24658:	f003 fbb4 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   2465c:	f384 8811 	msr	BASEPRI, r4
   24660:	f3bf 8f6f 	isb	sy
}
   24664:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   24666:	2600      	movs	r6, #0
   24668:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   2466a:	4a14      	ldr	r2, [pc, #80]	; (246bc <z_time_slice+0xc0>)
   2466c:	6812      	ldr	r2, [r2, #0]
   2466e:	b1ba      	cbz	r2, 246a0 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   24670:	89c2      	ldrh	r2, [r0, #14]
   24672:	2a7f      	cmp	r2, #127	; 0x7f
   24674:	d814      	bhi.n	246a0 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
   24676:	7b42      	ldrb	r2, [r0, #13]
   24678:	06d2      	lsls	r2, r2, #27
   2467a:	d111      	bne.n	246a0 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2467c:	4a10      	ldr	r2, [pc, #64]	; (246c0 <z_time_slice+0xc4>)
   2467e:	f990 600e 	ldrsb.w	r6, [r0, #14]
   24682:	6812      	ldr	r2, [r2, #0]
   24684:	4296      	cmp	r6, r2
   24686:	db0b      	blt.n	246a0 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   24688:	4a0e      	ldr	r2, [pc, #56]	; (246c4 <z_time_slice+0xc8>)
   2468a:	4290      	cmp	r0, r2
   2468c:	d008      	beq.n	246a0 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
   2468e:	695a      	ldr	r2, [r3, #20]
   24690:	42aa      	cmp	r2, r5
   24692:	dc02      	bgt.n	2469a <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
   24694:	f7ff ff66 	bl	24564 <move_thread_to_end_of_prio_q>
   24698:	e7d1      	b.n	2463e <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
   2469a:	1b52      	subs	r2, r2, r5
   2469c:	615a      	str	r2, [r3, #20]
   2469e:	e7d0      	b.n	24642 <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
   246a0:	2300      	movs	r3, #0
   246a2:	614b      	str	r3, [r1, #20]
   246a4:	e7cd      	b.n	24642 <z_time_slice+0x46>
   246a6:	bf00      	nop
   246a8:	200054c8 	.word	0x200054c8
   246ac:	00030779 	.word	0x00030779
   246b0:	0003067f 	.word	0x0003067f
   246b4:	20005490 	.word	0x20005490
   246b8:	200054c4 	.word	0x200054c4
   246bc:	200054d0 	.word	0x200054d0
   246c0:	200054cc 	.word	0x200054cc
   246c4:	20002f08 	.word	0x20002f08

000246c8 <z_impl_k_thread_suspend>:
{
   246c8:	b570      	push	{r4, r5, r6, lr}
   246ca:	4604      	mov	r4, r0
   246cc:	3018      	adds	r0, #24
   246ce:	f001 f8ef 	bl	258b0 <z_abort_timeout>
	__asm__ volatile(
   246d2:	f04f 0320 	mov.w	r3, #32
   246d6:	f3ef 8611 	mrs	r6, BASEPRI
   246da:	f383 8811 	msr	BASEPRI, r3
   246de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   246e2:	4820      	ldr	r0, [pc, #128]	; (24764 <z_impl_k_thread_suspend+0x9c>)
   246e4:	f000 fe60 	bl	253a8 <z_spin_lock_valid>
   246e8:	b940      	cbnz	r0, 246fc <z_impl_k_thread_suspend+0x34>
   246ea:	491f      	ldr	r1, [pc, #124]	; (24768 <z_impl_k_thread_suspend+0xa0>)
   246ec:	481f      	ldr	r0, [pc, #124]	; (2476c <z_impl_k_thread_suspend+0xa4>)
   246ee:	227c      	movs	r2, #124	; 0x7c
   246f0:	f003 f8ef 	bl	278d2 <printk>
   246f4:	217c      	movs	r1, #124	; 0x7c
   246f6:	481c      	ldr	r0, [pc, #112]	; (24768 <z_impl_k_thread_suspend+0xa0>)
   246f8:	f003 fb64 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   246fc:	4819      	ldr	r0, [pc, #100]	; (24764 <z_impl_k_thread_suspend+0x9c>)
   246fe:	f000 fe71 	bl	253e4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   24702:	f994 300d 	ldrsb.w	r3, [r4, #13]
   24706:	2b00      	cmp	r3, #0
   24708:	da07      	bge.n	2471a <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2470a:	4621      	mov	r1, r4
   2470c:	4818      	ldr	r0, [pc, #96]	; (24770 <z_impl_k_thread_suspend+0xa8>)
   2470e:	f7ff fd29 	bl	24164 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   24712:	7b63      	ldrb	r3, [r4, #13]
   24714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24718:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2471a:	4d16      	ldr	r5, [pc, #88]	; (24774 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2471c:	7b63      	ldrb	r3, [r4, #13]
   2471e:	68a8      	ldr	r0, [r5, #8]
   24720:	f043 0310 	orr.w	r3, r3, #16
   24724:	7363      	strb	r3, [r4, #13]
   24726:	1b03      	subs	r3, r0, r4
   24728:	4258      	negs	r0, r3
   2472a:	4158      	adcs	r0, r3
   2472c:	f7ff fd80 	bl	24230 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24730:	480c      	ldr	r0, [pc, #48]	; (24764 <z_impl_k_thread_suspend+0x9c>)
   24732:	f000 fe47 	bl	253c4 <z_spin_unlock_valid>
   24736:	b940      	cbnz	r0, 2474a <z_impl_k_thread_suspend+0x82>
   24738:	490b      	ldr	r1, [pc, #44]	; (24768 <z_impl_k_thread_suspend+0xa0>)
   2473a:	480c      	ldr	r0, [pc, #48]	; (2476c <z_impl_k_thread_suspend+0xa4>)
   2473c:	22a7      	movs	r2, #167	; 0xa7
   2473e:	f003 f8c8 	bl	278d2 <printk>
   24742:	21a7      	movs	r1, #167	; 0xa7
   24744:	4808      	ldr	r0, [pc, #32]	; (24768 <z_impl_k_thread_suspend+0xa0>)
   24746:	f003 fb3d 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   2474a:	f386 8811 	msr	BASEPRI, r6
   2474e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   24752:	68ab      	ldr	r3, [r5, #8]
   24754:	42a3      	cmp	r3, r4
   24756:	d103      	bne.n	24760 <z_impl_k_thread_suspend+0x98>
}
   24758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2475c:	f009 bc42 	b.w	2dfe4 <z_reschedule_unlocked>
}
   24760:	bd70      	pop	{r4, r5, r6, pc}
   24762:	bf00      	nop
   24764:	200054c8 	.word	0x200054c8
   24768:	00030779 	.word	0x00030779
   2476c:	0003067f 	.word	0x0003067f
   24770:	200054bc 	.word	0x200054bc
   24774:	20005490 	.word	0x20005490

00024778 <z_thread_single_abort>:
{
   24778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   2477c:	7b03      	ldrb	r3, [r0, #12]
   2477e:	07dd      	lsls	r5, r3, #31
{
   24780:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   24782:	d50a      	bpl.n	2479a <z_thread_single_abort+0x22>
   24784:	4979      	ldr	r1, [pc, #484]	; (2496c <z_thread_single_abort+0x1f4>)
   24786:	487a      	ldr	r0, [pc, #488]	; (24970 <z_thread_single_abort+0x1f8>)
   24788:	f240 220e 	movw	r2, #526	; 0x20e
   2478c:	f003 f8a1 	bl	278d2 <printk>
   24790:	f240 210e 	movw	r1, #526	; 0x20e
   24794:	4875      	ldr	r0, [pc, #468]	; (2496c <z_thread_single_abort+0x1f4>)
   24796:	f003 fb15 	bl	27dc4 <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   2479a:	4e76      	ldr	r6, [pc, #472]	; (24974 <z_thread_single_abort+0x1fc>)
   2479c:	68b3      	ldr	r3, [r6, #8]
   2479e:	42a3      	cmp	r3, r4
   247a0:	d10d      	bne.n	247be <z_thread_single_abort+0x46>
   247a2:	f3ef 8305 	mrs	r3, IPSR
   247a6:	b953      	cbnz	r3, 247be <z_thread_single_abort+0x46>
   247a8:	4970      	ldr	r1, [pc, #448]	; (2496c <z_thread_single_abort+0x1f4>)
   247aa:	4871      	ldr	r0, [pc, #452]	; (24970 <z_thread_single_abort+0x1f8>)
   247ac:	f44f 7204 	mov.w	r2, #528	; 0x210
   247b0:	f003 f88f 	bl	278d2 <printk>
   247b4:	f44f 7104 	mov.w	r1, #528	; 0x210
   247b8:	486c      	ldr	r0, [pc, #432]	; (2496c <z_thread_single_abort+0x1f4>)
   247ba:	f003 fb03 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   247be:	f04f 0320 	mov.w	r3, #32
   247c2:	f3ef 8511 	mrs	r5, BASEPRI
   247c6:	f383 8811 	msr	BASEPRI, r3
   247ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   247ce:	486a      	ldr	r0, [pc, #424]	; (24978 <z_thread_single_abort+0x200>)
   247d0:	f000 fdea 	bl	253a8 <z_spin_lock_valid>
   247d4:	b940      	cbnz	r0, 247e8 <z_thread_single_abort+0x70>
   247d6:	4969      	ldr	r1, [pc, #420]	; (2497c <z_thread_single_abort+0x204>)
   247d8:	4865      	ldr	r0, [pc, #404]	; (24970 <z_thread_single_abort+0x1f8>)
   247da:	227c      	movs	r2, #124	; 0x7c
   247dc:	f003 f879 	bl	278d2 <printk>
   247e0:	217c      	movs	r1, #124	; 0x7c
   247e2:	4866      	ldr	r0, [pc, #408]	; (2497c <z_thread_single_abort+0x204>)
   247e4:	f003 faee 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   247e8:	4863      	ldr	r0, [pc, #396]	; (24978 <z_thread_single_abort+0x200>)
   247ea:	f000 fdfb 	bl	253e4 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   247ee:	7b63      	ldrb	r3, [r4, #13]
   247f0:	f013 0f28 	tst.w	r3, #40	; 0x28
   247f4:	d012      	beq.n	2481c <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247f6:	4860      	ldr	r0, [pc, #384]	; (24978 <z_thread_single_abort+0x200>)
   247f8:	f000 fde4 	bl	253c4 <z_spin_unlock_valid>
   247fc:	b940      	cbnz	r0, 24810 <z_thread_single_abort+0x98>
   247fe:	495f      	ldr	r1, [pc, #380]	; (2497c <z_thread_single_abort+0x204>)
   24800:	485b      	ldr	r0, [pc, #364]	; (24970 <z_thread_single_abort+0x1f8>)
   24802:	22a7      	movs	r2, #167	; 0xa7
   24804:	f003 f865 	bl	278d2 <printk>
   24808:	21a7      	movs	r1, #167	; 0xa7
   2480a:	485c      	ldr	r0, [pc, #368]	; (2497c <z_thread_single_abort+0x204>)
   2480c:	f003 fada 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   24810:	f385 8811 	msr	BASEPRI, r5
   24814:	f3bf 8f6f 	isb	sy
}
   24818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   2481c:	f043 0320 	orr.w	r3, r3, #32
   24820:	7363      	strb	r3, [r4, #13]
   24822:	4855      	ldr	r0, [pc, #340]	; (24978 <z_thread_single_abort+0x200>)
   24824:	f000 fdce 	bl	253c4 <z_spin_unlock_valid>
   24828:	b940      	cbnz	r0, 2483c <z_thread_single_abort+0xc4>
   2482a:	4954      	ldr	r1, [pc, #336]	; (2497c <z_thread_single_abort+0x204>)
   2482c:	4850      	ldr	r0, [pc, #320]	; (24970 <z_thread_single_abort+0x1f8>)
   2482e:	22a7      	movs	r2, #167	; 0xa7
   24830:	f003 f84f 	bl	278d2 <printk>
   24834:	21a7      	movs	r1, #167	; 0xa7
   24836:	4851      	ldr	r0, [pc, #324]	; (2497c <z_thread_single_abort+0x204>)
   24838:	f003 fac4 	bl	27dc4 <assert_post_action>
   2483c:	f385 8811 	msr	BASEPRI, r5
   24840:	f3bf 8f6f 	isb	sy
   24844:	f104 0018 	add.w	r0, r4, #24
   24848:	f001 f832 	bl	258b0 <z_abort_timeout>
	__asm__ volatile(
   2484c:	f04f 0320 	mov.w	r3, #32
   24850:	f3ef 8711 	mrs	r7, BASEPRI
   24854:	f383 8811 	msr	BASEPRI, r3
   24858:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2485c:	4846      	ldr	r0, [pc, #280]	; (24978 <z_thread_single_abort+0x200>)
   2485e:	f000 fda3 	bl	253a8 <z_spin_lock_valid>
   24862:	b940      	cbnz	r0, 24876 <z_thread_single_abort+0xfe>
   24864:	4945      	ldr	r1, [pc, #276]	; (2497c <z_thread_single_abort+0x204>)
   24866:	4842      	ldr	r0, [pc, #264]	; (24970 <z_thread_single_abort+0x1f8>)
   24868:	227c      	movs	r2, #124	; 0x7c
   2486a:	f003 f832 	bl	278d2 <printk>
   2486e:	217c      	movs	r1, #124	; 0x7c
   24870:	4842      	ldr	r0, [pc, #264]	; (2497c <z_thread_single_abort+0x204>)
   24872:	f003 faa7 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   24876:	4840      	ldr	r0, [pc, #256]	; (24978 <z_thread_single_abort+0x200>)
   24878:	f000 fdb4 	bl	253e4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2487c:	7b63      	ldrb	r3, [r4, #13]
   2487e:	06d8      	lsls	r0, r3, #27
   24880:	d116      	bne.n	248b0 <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   24882:	69a2      	ldr	r2, [r4, #24]
   24884:	b9a2      	cbnz	r2, 248b0 <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   24886:	0619      	lsls	r1, r3, #24
   24888:	d507      	bpl.n	2489a <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   2488a:	4621      	mov	r1, r4
   2488c:	483c      	ldr	r0, [pc, #240]	; (24980 <z_thread_single_abort+0x208>)
   2488e:	f7ff fc69 	bl	24164 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   24892:	7b63      	ldrb	r3, [r4, #13]
   24894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24898:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   2489a:	68b0      	ldr	r0, [r6, #8]
   2489c:	1b02      	subs	r2, r0, r4
   2489e:	4250      	negs	r0, r2
   248a0:	4150      	adcs	r0, r2
   248a2:	f7ff fcc5 	bl	24230 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   248a6:	f104 0930 	add.w	r9, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   248aa:	f04f 0800 	mov.w	r8, #0
   248ae:	e025      	b.n	248fc <z_thread_single_abort+0x184>
			if (z_is_thread_pending(thread)) {
   248b0:	079b      	lsls	r3, r3, #30
   248b2:	d5f8      	bpl.n	248a6 <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   248b4:	f104 0008 	add.w	r0, r4, #8
   248b8:	f7ff fb4c 	bl	23f54 <pended_on.isra.19>
   248bc:	4621      	mov	r1, r4
   248be:	f7ff fc51 	bl	24164 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   248c2:	7b63      	ldrb	r3, [r4, #13]
   248c4:	f023 0302 	bic.w	r3, r3, #2
   248c8:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   248ca:	2300      	movs	r3, #0
   248cc:	60a3      	str	r3, [r4, #8]
   248ce:	e7ea      	b.n	248a6 <z_thread_single_abort+0x12e>
   248d0:	f105 0018 	add.w	r0, r5, #24
   248d4:	f000 ffec 	bl	258b0 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   248d8:	f105 0008 	add.w	r0, r5, #8
   248dc:	f7ff fb3a 	bl	23f54 <pended_on.isra.19>
   248e0:	4629      	mov	r1, r5
   248e2:	f7ff fc3f 	bl	24164 <z_priq_dumb_remove>
   248e6:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   248e8:	f8c5 8008 	str.w	r8, [r5, #8]
   248ec:	f023 0302 	bic.w	r3, r3, #2
   248f0:	736b      	strb	r3, [r5, #13]
   248f2:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   248f6:	4628      	mov	r0, r5
   248f8:	f7ff fd30 	bl	2435c <ready_thread>
	return list->head == list;
   248fc:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   248fe:	454d      	cmp	r5, r9
   24900:	d001      	beq.n	24906 <z_thread_single_abort+0x18e>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   24902:	2d00      	cmp	r5, #0
   24904:	d1e4      	bne.n	248d0 <z_thread_single_abort+0x158>
		if (z_is_idle_thread_object(_current)) {
   24906:	68b2      	ldr	r2, [r6, #8]
   24908:	4b1e      	ldr	r3, [pc, #120]	; (24984 <z_thread_single_abort+0x20c>)
   2490a:	429a      	cmp	r2, r3
   2490c:	d102      	bne.n	24914 <z_thread_single_abort+0x19c>
			update_cache(1);
   2490e:	2001      	movs	r0, #1
   24910:	f7ff fc8e 	bl	24230 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   24914:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   24916:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   24918:	f043 0308 	orr.w	r3, r3, #8
   2491c:	7363      	strb	r3, [r4, #13]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2491e:	2200      	movs	r2, #0
   24920:	f104 0338 	add.w	r3, r4, #56	; 0x38
   24924:	f3bf 8f5b 	dmb	ish
   24928:	e853 1f00 	ldrex	r1, [r3]
   2492c:	e843 2000 	strex	r0, r2, [r3]
   24930:	2800      	cmp	r0, #0
   24932:	d1f9      	bne.n	24928 <z_thread_single_abort+0x1b0>
   24934:	f3bf 8f5b 	dmb	ish
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24938:	480f      	ldr	r0, [pc, #60]	; (24978 <z_thread_single_abort+0x200>)
   2493a:	f000 fd43 	bl	253c4 <z_spin_unlock_valid>
   2493e:	b940      	cbnz	r0, 24952 <z_thread_single_abort+0x1da>
   24940:	490e      	ldr	r1, [pc, #56]	; (2497c <z_thread_single_abort+0x204>)
   24942:	480b      	ldr	r0, [pc, #44]	; (24970 <z_thread_single_abort+0x1f8>)
   24944:	22a7      	movs	r2, #167	; 0xa7
   24946:	f002 ffc4 	bl	278d2 <printk>
   2494a:	21a7      	movs	r1, #167	; 0xa7
   2494c:	480b      	ldr	r0, [pc, #44]	; (2497c <z_thread_single_abort+0x204>)
   2494e:	f003 fa39 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   24952:	f387 8811 	msr	BASEPRI, r7
   24956:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   2495a:	2d00      	cmp	r5, #0
   2495c:	f43f af5c 	beq.w	24818 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   24960:	4620      	mov	r0, r4
   24962:	462b      	mov	r3, r5
}
   24964:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   24968:	4718      	bx	r3
   2496a:	bf00      	nop
   2496c:	00036c49 	.word	0x00036c49
   24970:	0003067f 	.word	0x0003067f
   24974:	20005490 	.word	0x20005490
   24978:	200054c8 	.word	0x200054c8
   2497c:	00030779 	.word	0x00030779
   24980:	200054bc 	.word	0x200054bc
   24984:	20002f08 	.word	0x20002f08

00024988 <unready_thread>:
{
   24988:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2498a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2498e:	2b00      	cmp	r3, #0
{
   24990:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   24992:	da07      	bge.n	249a4 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   24994:	4601      	mov	r1, r0
   24996:	4808      	ldr	r0, [pc, #32]	; (249b8 <unready_thread+0x30>)
   24998:	f7ff fbe4 	bl	24164 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2499c:	7b63      	ldrb	r3, [r4, #13]
   2499e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   249a2:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   249a4:	4b05      	ldr	r3, [pc, #20]	; (249bc <unready_thread+0x34>)
   249a6:	6898      	ldr	r0, [r3, #8]
   249a8:	1b03      	subs	r3, r0, r4
   249aa:	4258      	negs	r0, r3
   249ac:	4158      	adcs	r0, r3
}
   249ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   249b2:	f7ff bc3d 	b.w	24230 <update_cache>
   249b6:	bf00      	nop
   249b8:	200054bc 	.word	0x200054bc
   249bc:	20005490 	.word	0x20005490

000249c0 <add_to_waitq_locked>:
{
   249c0:	b538      	push	{r3, r4, r5, lr}
   249c2:	4604      	mov	r4, r0
   249c4:	460d      	mov	r5, r1
	unready_thread(thread);
   249c6:	f7ff ffdf 	bl	24988 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   249ca:	7b63      	ldrb	r3, [r4, #13]
   249cc:	f043 0302 	orr.w	r3, r3, #2
   249d0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   249d2:	b1ed      	cbz	r5, 24a10 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   249d4:	4b15      	ldr	r3, [pc, #84]	; (24a2c <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   249d6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   249d8:	429c      	cmp	r4, r3
   249da:	d10a      	bne.n	249f2 <add_to_waitq_locked+0x32>
   249dc:	4914      	ldr	r1, [pc, #80]	; (24a30 <add_to_waitq_locked+0x70>)
   249de:	4815      	ldr	r0, [pc, #84]	; (24a34 <add_to_waitq_locked+0x74>)
   249e0:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   249e4:	f002 ff75 	bl	278d2 <printk>
   249e8:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   249ec:	4810      	ldr	r0, [pc, #64]	; (24a30 <add_to_waitq_locked+0x70>)
   249ee:	f003 f9e9 	bl	27dc4 <assert_post_action>
	return list->head == list;
   249f2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   249f4:	429d      	cmp	r5, r3
   249f6:	d012      	beq.n	24a1e <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   249f8:	b18b      	cbz	r3, 24a1e <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   249fa:	f994 200e 	ldrsb.w	r2, [r4, #14]
   249fe:	f993 100e 	ldrsb.w	r1, [r3, #14]
   24a02:	4291      	cmp	r1, r2
   24a04:	dd05      	ble.n	24a12 <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   24a06:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24a08:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   24a0c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   24a0e:	605c      	str	r4, [r3, #4]
}
   24a10:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   24a12:	6869      	ldr	r1, [r5, #4]
   24a14:	428b      	cmp	r3, r1
   24a16:	d002      	beq.n	24a1e <add_to_waitq_locked+0x5e>
   24a18:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24a1a:	2b00      	cmp	r3, #0
   24a1c:	d1ef      	bne.n	249fe <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   24a1e:	686b      	ldr	r3, [r5, #4]
   24a20:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   24a22:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   24a24:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   24a26:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24a28:	606c      	str	r4, [r5, #4]
}
   24a2a:	e7f1      	b.n	24a10 <add_to_waitq_locked+0x50>
   24a2c:	20002f08 	.word	0x20002f08
   24a30:	00036c49 	.word	0x00036c49
   24a34:	0003067f 	.word	0x0003067f

00024a38 <pend>:
{
   24a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24a3c:	4604      	mov	r4, r0
   24a3e:	4688      	mov	r8, r1
   24a40:	4616      	mov	r6, r2
   24a42:	461f      	mov	r7, r3
	__asm__ volatile(
   24a44:	f04f 0320 	mov.w	r3, #32
   24a48:	f3ef 8511 	mrs	r5, BASEPRI
   24a4c:	f383 8811 	msr	BASEPRI, r3
   24a50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a54:	481a      	ldr	r0, [pc, #104]	; (24ac0 <pend+0x88>)
   24a56:	f000 fca7 	bl	253a8 <z_spin_lock_valid>
   24a5a:	b940      	cbnz	r0, 24a6e <pend+0x36>
   24a5c:	4919      	ldr	r1, [pc, #100]	; (24ac4 <pend+0x8c>)
   24a5e:	481a      	ldr	r0, [pc, #104]	; (24ac8 <pend+0x90>)
   24a60:	227c      	movs	r2, #124	; 0x7c
   24a62:	f002 ff36 	bl	278d2 <printk>
   24a66:	217c      	movs	r1, #124	; 0x7c
   24a68:	4816      	ldr	r0, [pc, #88]	; (24ac4 <pend+0x8c>)
   24a6a:	f003 f9ab 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   24a6e:	4814      	ldr	r0, [pc, #80]	; (24ac0 <pend+0x88>)
   24a70:	f000 fcb8 	bl	253e4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   24a74:	4620      	mov	r0, r4
   24a76:	4641      	mov	r1, r8
   24a78:	f7ff ffa2 	bl	249c0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a7c:	4810      	ldr	r0, [pc, #64]	; (24ac0 <pend+0x88>)
   24a7e:	f000 fca1 	bl	253c4 <z_spin_unlock_valid>
   24a82:	b940      	cbnz	r0, 24a96 <pend+0x5e>
   24a84:	490f      	ldr	r1, [pc, #60]	; (24ac4 <pend+0x8c>)
   24a86:	4810      	ldr	r0, [pc, #64]	; (24ac8 <pend+0x90>)
   24a88:	22a7      	movs	r2, #167	; 0xa7
   24a8a:	f002 ff22 	bl	278d2 <printk>
   24a8e:	21a7      	movs	r1, #167	; 0xa7
   24a90:	480c      	ldr	r0, [pc, #48]	; (24ac4 <pend+0x8c>)
   24a92:	f003 f997 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   24a96:	f385 8811 	msr	BASEPRI, r5
   24a9a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24a9e:	1c7b      	adds	r3, r7, #1
   24aa0:	bf08      	it	eq
   24aa2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   24aa6:	d008      	beq.n	24aba <pend+0x82>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   24aa8:	4632      	mov	r2, r6
   24aaa:	463b      	mov	r3, r7
   24aac:	f104 0018 	add.w	r0, r4, #24
   24ab0:	4906      	ldr	r1, [pc, #24]	; (24acc <pend+0x94>)
}
   24ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24ab6:	f000 be39 	b.w	2572c <z_add_timeout>
   24aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24abe:	bf00      	nop
   24ac0:	200054c8 	.word	0x200054c8
   24ac4:	00030779 	.word	0x00030779
   24ac8:	0003067f 	.word	0x0003067f
   24acc:	000244dd 	.word	0x000244dd

00024ad0 <z_pend_curr>:
{
   24ad0:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   24ad2:	4b0e      	ldr	r3, [pc, #56]	; (24b0c <z_pend_curr+0x3c>)
{
   24ad4:	4605      	mov	r5, r0
	pending_current = _current;
   24ad6:	6898      	ldr	r0, [r3, #8]
   24ad8:	4b0d      	ldr	r3, [pc, #52]	; (24b10 <z_pend_curr+0x40>)
{
   24ada:	460c      	mov	r4, r1
	pending_current = _current;
   24adc:	6018      	str	r0, [r3, #0]
{
   24ade:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   24ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   24ae4:	f7ff ffa8 	bl	24a38 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ae8:	4628      	mov	r0, r5
   24aea:	f000 fc6b 	bl	253c4 <z_spin_unlock_valid>
   24aee:	b940      	cbnz	r0, 24b02 <z_pend_curr+0x32>
   24af0:	4908      	ldr	r1, [pc, #32]	; (24b14 <z_pend_curr+0x44>)
   24af2:	4809      	ldr	r0, [pc, #36]	; (24b18 <z_pend_curr+0x48>)
   24af4:	22be      	movs	r2, #190	; 0xbe
   24af6:	f002 feec 	bl	278d2 <printk>
   24afa:	21be      	movs	r1, #190	; 0xbe
   24afc:	4805      	ldr	r0, [pc, #20]	; (24b14 <z_pend_curr+0x44>)
   24afe:	f003 f961 	bl	27dc4 <assert_post_action>
   24b02:	4620      	mov	r0, r4
}
   24b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24b08:	f7e2 bf70 	b.w	79ec <arch_swap>
   24b0c:	20005490 	.word	0x20005490
   24b10:	200054c4 	.word	0x200054c4
   24b14:	00030779 	.word	0x00030779
   24b18:	0003067f 	.word	0x0003067f

00024b1c <z_set_prio>:
{
   24b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24b1e:	4604      	mov	r4, r0
   24b20:	460d      	mov	r5, r1
	__asm__ volatile(
   24b22:	f04f 0320 	mov.w	r3, #32
   24b26:	f3ef 8611 	mrs	r6, BASEPRI
   24b2a:	f383 8811 	msr	BASEPRI, r3
   24b2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b32:	4831      	ldr	r0, [pc, #196]	; (24bf8 <z_set_prio+0xdc>)
   24b34:	f000 fc38 	bl	253a8 <z_spin_lock_valid>
   24b38:	b940      	cbnz	r0, 24b4c <z_set_prio+0x30>
   24b3a:	4930      	ldr	r1, [pc, #192]	; (24bfc <z_set_prio+0xe0>)
   24b3c:	4830      	ldr	r0, [pc, #192]	; (24c00 <z_set_prio+0xe4>)
   24b3e:	227c      	movs	r2, #124	; 0x7c
   24b40:	f002 fec7 	bl	278d2 <printk>
   24b44:	217c      	movs	r1, #124	; 0x7c
   24b46:	482d      	ldr	r0, [pc, #180]	; (24bfc <z_set_prio+0xe0>)
   24b48:	f003 f93c 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   24b4c:	482a      	ldr	r0, [pc, #168]	; (24bf8 <z_set_prio+0xdc>)
   24b4e:	f000 fc49 	bl	253e4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24b52:	7b63      	ldrb	r3, [r4, #13]
   24b54:	06db      	lsls	r3, r3, #27
   24b56:	b26d      	sxtb	r5, r5
   24b58:	d14a      	bne.n	24bf0 <z_set_prio+0xd4>
		if (need_sched) {
   24b5a:	69a3      	ldr	r3, [r4, #24]
   24b5c:	2b00      	cmp	r3, #0
   24b5e:	d147      	bne.n	24bf0 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   24b60:	4621      	mov	r1, r4
   24b62:	4828      	ldr	r0, [pc, #160]	; (24c04 <z_set_prio+0xe8>)
   24b64:	f7ff fafe 	bl	24164 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24b68:	4b27      	ldr	r3, [pc, #156]	; (24c08 <z_set_prio+0xec>)
				thread->base.prio = prio;
   24b6a:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24b6c:	429c      	cmp	r4, r3
   24b6e:	d10a      	bne.n	24b86 <z_set_prio+0x6a>
   24b70:	4926      	ldr	r1, [pc, #152]	; (24c0c <z_set_prio+0xf0>)
   24b72:	4823      	ldr	r0, [pc, #140]	; (24c00 <z_set_prio+0xe4>)
   24b74:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   24b78:	f002 feab 	bl	278d2 <printk>
   24b7c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   24b80:	4822      	ldr	r0, [pc, #136]	; (24c0c <z_set_prio+0xf0>)
   24b82:	f003 f91f 	bl	27dc4 <assert_post_action>
	return list->head == list;
   24b86:	4a22      	ldr	r2, [pc, #136]	; (24c10 <z_set_prio+0xf4>)
   24b88:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24b8c:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   24b90:	428b      	cmp	r3, r1
   24b92:	d027      	beq.n	24be4 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24b94:	b333      	cbz	r3, 24be4 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   24b96:	f994 500e 	ldrsb.w	r5, [r4, #14]
   24b9a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   24b9e:	42af      	cmp	r7, r5
   24ba0:	dd1b      	ble.n	24bda <z_set_prio+0xbe>
	node->prev = successor->prev;
   24ba2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24ba4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   24ba8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   24baa:	605c      	str	r4, [r3, #4]
			update_cache(1);
   24bac:	2001      	movs	r0, #1
   24bae:	f7ff fb3f 	bl	24230 <update_cache>
   24bb2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24bb4:	4810      	ldr	r0, [pc, #64]	; (24bf8 <z_set_prio+0xdc>)
   24bb6:	f000 fc05 	bl	253c4 <z_spin_unlock_valid>
   24bba:	b940      	cbnz	r0, 24bce <z_set_prio+0xb2>
   24bbc:	490f      	ldr	r1, [pc, #60]	; (24bfc <z_set_prio+0xe0>)
   24bbe:	4810      	ldr	r0, [pc, #64]	; (24c00 <z_set_prio+0xe4>)
   24bc0:	22a7      	movs	r2, #167	; 0xa7
   24bc2:	f002 fe86 	bl	278d2 <printk>
   24bc6:	21a7      	movs	r1, #167	; 0xa7
   24bc8:	480c      	ldr	r0, [pc, #48]	; (24bfc <z_set_prio+0xe0>)
   24bca:	f003 f8fb 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   24bce:	f386 8811 	msr	BASEPRI, r6
   24bd2:	f3bf 8f6f 	isb	sy
}
   24bd6:	4620      	mov	r0, r4
   24bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   24bda:	4298      	cmp	r0, r3
   24bdc:	d002      	beq.n	24be4 <z_set_prio+0xc8>
   24bde:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24be0:	2b00      	cmp	r3, #0
   24be2:	d1da      	bne.n	24b9a <z_set_prio+0x7e>
	node->prev = list->tail;
   24be4:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   24be8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   24bea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24bec:	6314      	str	r4, [r2, #48]	; 0x30
   24bee:	e7dd      	b.n	24bac <z_set_prio+0x90>
			thread->base.prio = prio;
   24bf0:	73a5      	strb	r5, [r4, #14]
   24bf2:	2400      	movs	r4, #0
   24bf4:	e7de      	b.n	24bb4 <z_set_prio+0x98>
   24bf6:	bf00      	nop
   24bf8:	200054c8 	.word	0x200054c8
   24bfc:	00030779 	.word	0x00030779
   24c00:	0003067f 	.word	0x0003067f
   24c04:	200054bc 	.word	0x200054bc
   24c08:	20002f08 	.word	0x20002f08
   24c0c:	00036c49 	.word	0x00036c49
   24c10:	20005490 	.word	0x20005490

00024c14 <z_unpend_first_thread>:
{
   24c14:	b538      	push	{r3, r4, r5, lr}
   24c16:	4604      	mov	r4, r0
	__asm__ volatile(
   24c18:	f04f 0320 	mov.w	r3, #32
   24c1c:	f3ef 8511 	mrs	r5, BASEPRI
   24c20:	f383 8811 	msr	BASEPRI, r3
   24c24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c28:	482b      	ldr	r0, [pc, #172]	; (24cd8 <z_unpend_first_thread+0xc4>)
   24c2a:	f000 fbbd 	bl	253a8 <z_spin_lock_valid>
   24c2e:	b940      	cbnz	r0, 24c42 <z_unpend_first_thread+0x2e>
   24c30:	492a      	ldr	r1, [pc, #168]	; (24cdc <z_unpend_first_thread+0xc8>)
   24c32:	482b      	ldr	r0, [pc, #172]	; (24ce0 <z_unpend_first_thread+0xcc>)
   24c34:	227c      	movs	r2, #124	; 0x7c
   24c36:	f002 fe4c 	bl	278d2 <printk>
   24c3a:	217c      	movs	r1, #124	; 0x7c
   24c3c:	4827      	ldr	r0, [pc, #156]	; (24cdc <z_unpend_first_thread+0xc8>)
   24c3e:	f003 f8c1 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   24c42:	4825      	ldr	r0, [pc, #148]	; (24cd8 <z_unpend_first_thread+0xc4>)
   24c44:	f000 fbce 	bl	253e4 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   24c48:	4620      	mov	r0, r4
   24c4a:	f009 f9e4 	bl	2e016 <z_priq_dumb_best>
   24c4e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24c50:	4821      	ldr	r0, [pc, #132]	; (24cd8 <z_unpend_first_thread+0xc4>)
   24c52:	f000 fbb7 	bl	253c4 <z_spin_unlock_valid>
   24c56:	b940      	cbnz	r0, 24c6a <z_unpend_first_thread+0x56>
   24c58:	4920      	ldr	r1, [pc, #128]	; (24cdc <z_unpend_first_thread+0xc8>)
   24c5a:	4821      	ldr	r0, [pc, #132]	; (24ce0 <z_unpend_first_thread+0xcc>)
   24c5c:	22a7      	movs	r2, #167	; 0xa7
   24c5e:	f002 fe38 	bl	278d2 <printk>
   24c62:	21a7      	movs	r1, #167	; 0xa7
   24c64:	481d      	ldr	r0, [pc, #116]	; (24cdc <z_unpend_first_thread+0xc8>)
   24c66:	f003 f8ad 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   24c6a:	f385 8811 	msr	BASEPRI, r5
   24c6e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   24c72:	b37c      	cbz	r4, 24cd4 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   24c74:	f04f 0320 	mov.w	r3, #32
   24c78:	f3ef 8511 	mrs	r5, BASEPRI
   24c7c:	f383 8811 	msr	BASEPRI, r3
   24c80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c84:	4814      	ldr	r0, [pc, #80]	; (24cd8 <z_unpend_first_thread+0xc4>)
   24c86:	f000 fb8f 	bl	253a8 <z_spin_lock_valid>
   24c8a:	b940      	cbnz	r0, 24c9e <z_unpend_first_thread+0x8a>
   24c8c:	4913      	ldr	r1, [pc, #76]	; (24cdc <z_unpend_first_thread+0xc8>)
   24c8e:	4814      	ldr	r0, [pc, #80]	; (24ce0 <z_unpend_first_thread+0xcc>)
   24c90:	227c      	movs	r2, #124	; 0x7c
   24c92:	f002 fe1e 	bl	278d2 <printk>
   24c96:	217c      	movs	r1, #124	; 0x7c
   24c98:	4810      	ldr	r0, [pc, #64]	; (24cdc <z_unpend_first_thread+0xc8>)
   24c9a:	f003 f893 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   24c9e:	480e      	ldr	r0, [pc, #56]	; (24cd8 <z_unpend_first_thread+0xc4>)
   24ca0:	f000 fba0 	bl	253e4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   24ca4:	4620      	mov	r0, r4
   24ca6:	f009 f9a7 	bl	2dff8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24caa:	480b      	ldr	r0, [pc, #44]	; (24cd8 <z_unpend_first_thread+0xc4>)
   24cac:	f000 fb8a 	bl	253c4 <z_spin_unlock_valid>
   24cb0:	b940      	cbnz	r0, 24cc4 <z_unpend_first_thread+0xb0>
   24cb2:	490a      	ldr	r1, [pc, #40]	; (24cdc <z_unpend_first_thread+0xc8>)
   24cb4:	480a      	ldr	r0, [pc, #40]	; (24ce0 <z_unpend_first_thread+0xcc>)
   24cb6:	22a7      	movs	r2, #167	; 0xa7
   24cb8:	f002 fe0b 	bl	278d2 <printk>
   24cbc:	21a7      	movs	r1, #167	; 0xa7
   24cbe:	4807      	ldr	r0, [pc, #28]	; (24cdc <z_unpend_first_thread+0xc8>)
   24cc0:	f003 f880 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   24cc4:	f385 8811 	msr	BASEPRI, r5
   24cc8:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   24ccc:	f104 0018 	add.w	r0, r4, #24
   24cd0:	f000 fdee 	bl	258b0 <z_abort_timeout>
}
   24cd4:	4620      	mov	r0, r4
   24cd6:	bd38      	pop	{r3, r4, r5, pc}
   24cd8:	200054c8 	.word	0x200054c8
   24cdc:	00030779 	.word	0x00030779
   24ce0:	0003067f 	.word	0x0003067f

00024ce4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   24ce4:	4b04      	ldr	r3, [pc, #16]	; (24cf8 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   24ce6:	2100      	movs	r1, #0
   24ce8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   24cec:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   24cf0:	4608      	mov	r0, r1
   24cf2:	f7ff b95b 	b.w	23fac <k_sched_time_slice_set>
   24cf6:	bf00      	nop
   24cf8:	20005490 	.word	0x20005490

00024cfc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   24cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24cfe:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   24d02:	b153      	cbz	r3, 24d1a <z_impl_k_yield+0x1e>
   24d04:	493d      	ldr	r1, [pc, #244]	; (24dfc <z_impl_k_yield+0x100>)
   24d06:	483e      	ldr	r0, [pc, #248]	; (24e00 <z_impl_k_yield+0x104>)
   24d08:	f240 42cf 	movw	r2, #1231	; 0x4cf
   24d0c:	f002 fde1 	bl	278d2 <printk>
   24d10:	f240 41cf 	movw	r1, #1231	; 0x4cf
   24d14:	4839      	ldr	r0, [pc, #228]	; (24dfc <z_impl_k_yield+0x100>)
   24d16:	f003 f855 	bl	27dc4 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   24d1a:	4c3a      	ldr	r4, [pc, #232]	; (24e04 <z_impl_k_yield+0x108>)
   24d1c:	4e3a      	ldr	r6, [pc, #232]	; (24e08 <z_impl_k_yield+0x10c>)
   24d1e:	68a2      	ldr	r2, [r4, #8]
   24d20:	42b2      	cmp	r2, r6
   24d22:	d054      	beq.n	24dce <z_impl_k_yield+0xd2>
	__asm__ volatile(
   24d24:	f04f 0320 	mov.w	r3, #32
   24d28:	f3ef 8711 	mrs	r7, BASEPRI
   24d2c:	f383 8811 	msr	BASEPRI, r3
   24d30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d34:	4835      	ldr	r0, [pc, #212]	; (24e0c <z_impl_k_yield+0x110>)
   24d36:	f000 fb37 	bl	253a8 <z_spin_lock_valid>
   24d3a:	b940      	cbnz	r0, 24d4e <z_impl_k_yield+0x52>
   24d3c:	4934      	ldr	r1, [pc, #208]	; (24e10 <z_impl_k_yield+0x114>)
   24d3e:	4830      	ldr	r0, [pc, #192]	; (24e00 <z_impl_k_yield+0x104>)
   24d40:	227c      	movs	r2, #124	; 0x7c
   24d42:	f002 fdc6 	bl	278d2 <printk>
   24d46:	217c      	movs	r1, #124	; 0x7c
   24d48:	4831      	ldr	r0, [pc, #196]	; (24e10 <z_impl_k_yield+0x114>)
   24d4a:	f003 f83b 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   24d4e:	482f      	ldr	r0, [pc, #188]	; (24e0c <z_impl_k_yield+0x110>)
   24d50:	f000 fb48 	bl	253e4 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   24d54:	68a1      	ldr	r1, [r4, #8]
   24d56:	482f      	ldr	r0, [pc, #188]	; (24e14 <z_impl_k_yield+0x118>)
   24d58:	f7ff fa04 	bl	24164 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   24d5c:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24d5e:	42b5      	cmp	r5, r6
   24d60:	d10a      	bne.n	24d78 <z_impl_k_yield+0x7c>
   24d62:	4926      	ldr	r1, [pc, #152]	; (24dfc <z_impl_k_yield+0x100>)
   24d64:	4826      	ldr	r0, [pc, #152]	; (24e00 <z_impl_k_yield+0x104>)
   24d66:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   24d6a:	f002 fdb2 	bl	278d2 <printk>
   24d6e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   24d72:	4822      	ldr	r0, [pc, #136]	; (24dfc <z_impl_k_yield+0x100>)
   24d74:	f003 f826 	bl	27dc4 <assert_post_action>
	return list->head == list;
   24d78:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24d7c:	4a25      	ldr	r2, [pc, #148]	; (24e14 <z_impl_k_yield+0x118>)
   24d7e:	4293      	cmp	r3, r2
   24d80:	d036      	beq.n	24df0 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24d82:	2b00      	cmp	r3, #0
   24d84:	d034      	beq.n	24df0 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   24d86:	f995 000e 	ldrsb.w	r0, [r5, #14]
   24d8a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   24d8e:	4286      	cmp	r6, r0
   24d90:	dd29      	ble.n	24de6 <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   24d92:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24d94:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   24d98:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   24d9a:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   24d9c:	68a2      	ldr	r2, [r4, #8]
	thread->base.thread_state |= states;
   24d9e:	7b53      	ldrb	r3, [r2, #13]
   24da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
			update_cache(1);
   24da4:	2001      	movs	r0, #1
   24da6:	7353      	strb	r3, [r2, #13]
   24da8:	f7ff fa42 	bl	24230 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24dac:	4817      	ldr	r0, [pc, #92]	; (24e0c <z_impl_k_yield+0x110>)
   24dae:	f000 fb09 	bl	253c4 <z_spin_unlock_valid>
   24db2:	b940      	cbnz	r0, 24dc6 <z_impl_k_yield+0xca>
   24db4:	4916      	ldr	r1, [pc, #88]	; (24e10 <z_impl_k_yield+0x114>)
   24db6:	4812      	ldr	r0, [pc, #72]	; (24e00 <z_impl_k_yield+0x104>)
   24db8:	22a7      	movs	r2, #167	; 0xa7
   24dba:	f002 fd8a 	bl	278d2 <printk>
   24dbe:	21a7      	movs	r1, #167	; 0xa7
   24dc0:	4813      	ldr	r0, [pc, #76]	; (24e10 <z_impl_k_yield+0x114>)
   24dc2:	f002 ffff 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   24dc6:	f387 8811 	msr	BASEPRI, r7
   24dca:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   24dce:	f04f 0320 	mov.w	r3, #32
   24dd2:	f3ef 8011 	mrs	r0, BASEPRI
   24dd6:	f383 8811 	msr	BASEPRI, r3
   24dda:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   24dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   24de2:	f7e2 be03 	b.w	79ec <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   24de6:	4299      	cmp	r1, r3
   24de8:	d002      	beq.n	24df0 <z_impl_k_yield+0xf4>
   24dea:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24dec:	2b00      	cmp	r3, #0
   24dee:	d1cc      	bne.n	24d8a <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   24df0:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   24df4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24df6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   24df8:	6325      	str	r5, [r4, #48]	; 0x30
   24dfa:	e7cf      	b.n	24d9c <z_impl_k_yield+0xa0>
   24dfc:	00036c49 	.word	0x00036c49
   24e00:	0003067f 	.word	0x0003067f
   24e04:	20005490 	.word	0x20005490
   24e08:	20002f08 	.word	0x20002f08
   24e0c:	200054c8 	.word	0x200054c8
   24e10:	00030779 	.word	0x00030779
   24e14:	200054bc 	.word	0x200054bc

00024e18 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   24e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24e1c:	4606      	mov	r6, r0
   24e1e:	460f      	mov	r7, r1
   24e20:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   24e24:	b153      	cbz	r3, 24e3c <z_tick_sleep+0x24>
   24e26:	4935      	ldr	r1, [pc, #212]	; (24efc <z_tick_sleep+0xe4>)
   24e28:	4835      	ldr	r0, [pc, #212]	; (24f00 <z_tick_sleep+0xe8>)
   24e2a:	f240 42ed 	movw	r2, #1261	; 0x4ed
   24e2e:	f002 fd50 	bl	278d2 <printk>
   24e32:	f240 41ed 	movw	r1, #1261	; 0x4ed
   24e36:	4831      	ldr	r0, [pc, #196]	; (24efc <z_tick_sleep+0xe4>)
   24e38:	f002 ffc4 	bl	27dc4 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   24e3c:	ea56 0307 	orrs.w	r3, r6, r7
   24e40:	d104      	bne.n	24e4c <z_tick_sleep+0x34>
	z_impl_k_yield();
   24e42:	f7ff ff5b 	bl	24cfc <z_impl_k_yield>
		k_yield();
		return 0;
   24e46:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   24e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   24e4c:	f009 f989 	bl	2e162 <z_tick_get_32>
   24e50:	1984      	adds	r4, r0, r6
   24e52:	f04f 0320 	mov.w	r3, #32
   24e56:	f3ef 8811 	mrs	r8, BASEPRI
   24e5a:	f383 8811 	msr	BASEPRI, r3
   24e5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24e62:	4828      	ldr	r0, [pc, #160]	; (24f04 <z_tick_sleep+0xec>)
   24e64:	f000 faa0 	bl	253a8 <z_spin_lock_valid>
   24e68:	b940      	cbnz	r0, 24e7c <z_tick_sleep+0x64>
   24e6a:	4927      	ldr	r1, [pc, #156]	; (24f08 <z_tick_sleep+0xf0>)
   24e6c:	4824      	ldr	r0, [pc, #144]	; (24f00 <z_tick_sleep+0xe8>)
   24e6e:	227c      	movs	r2, #124	; 0x7c
   24e70:	f002 fd2f 	bl	278d2 <printk>
   24e74:	217c      	movs	r1, #124	; 0x7c
   24e76:	4824      	ldr	r0, [pc, #144]	; (24f08 <z_tick_sleep+0xf0>)
   24e78:	f002 ffa4 	bl	27dc4 <assert_post_action>
	pending_current = _current;
   24e7c:	4d23      	ldr	r5, [pc, #140]	; (24f0c <z_tick_sleep+0xf4>)
	z_spin_lock_set_owner(l);
   24e7e:	4821      	ldr	r0, [pc, #132]	; (24f04 <z_tick_sleep+0xec>)
   24e80:	f000 fab0 	bl	253e4 <z_spin_lock_set_owner>
   24e84:	4b22      	ldr	r3, [pc, #136]	; (24f10 <z_tick_sleep+0xf8>)
   24e86:	68a8      	ldr	r0, [r5, #8]
   24e88:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   24e8a:	f7ff fd7d 	bl	24988 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   24e8e:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   24e90:	4920      	ldr	r1, [pc, #128]	; (24f14 <z_tick_sleep+0xfc>)
   24e92:	4632      	mov	r2, r6
   24e94:	463b      	mov	r3, r7
   24e96:	3018      	adds	r0, #24
   24e98:	f000 fc48 	bl	2572c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   24e9c:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24e9e:	4819      	ldr	r0, [pc, #100]	; (24f04 <z_tick_sleep+0xec>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   24ea0:	7b53      	ldrb	r3, [r2, #13]
   24ea2:	f043 0310 	orr.w	r3, r3, #16
   24ea6:	7353      	strb	r3, [r2, #13]
   24ea8:	f000 fa8c 	bl	253c4 <z_spin_unlock_valid>
   24eac:	b940      	cbnz	r0, 24ec0 <z_tick_sleep+0xa8>
   24eae:	4916      	ldr	r1, [pc, #88]	; (24f08 <z_tick_sleep+0xf0>)
   24eb0:	4813      	ldr	r0, [pc, #76]	; (24f00 <z_tick_sleep+0xe8>)
   24eb2:	22be      	movs	r2, #190	; 0xbe
   24eb4:	f002 fd0d 	bl	278d2 <printk>
   24eb8:	21be      	movs	r1, #190	; 0xbe
   24eba:	4813      	ldr	r0, [pc, #76]	; (24f08 <z_tick_sleep+0xf0>)
   24ebc:	f002 ff82 	bl	27dc4 <assert_post_action>
   24ec0:	4640      	mov	r0, r8
   24ec2:	f7e2 fd93 	bl	79ec <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   24ec6:	68ab      	ldr	r3, [r5, #8]
   24ec8:	7b5b      	ldrb	r3, [r3, #13]
   24eca:	06db      	lsls	r3, r3, #27
   24ecc:	d50a      	bpl.n	24ee4 <z_tick_sleep+0xcc>
   24ece:	490b      	ldr	r1, [pc, #44]	; (24efc <z_tick_sleep+0xe4>)
   24ed0:	480b      	ldr	r0, [pc, #44]	; (24f00 <z_tick_sleep+0xe8>)
   24ed2:	f240 520b 	movw	r2, #1291	; 0x50b
   24ed6:	f002 fcfc 	bl	278d2 <printk>
   24eda:	f240 510b 	movw	r1, #1291	; 0x50b
   24ede:	4807      	ldr	r0, [pc, #28]	; (24efc <z_tick_sleep+0xe4>)
   24ee0:	f002 ff70 	bl	27dc4 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   24ee4:	f009 f93d 	bl	2e162 <z_tick_get_32>
   24ee8:	1a20      	subs	r0, r4, r0
   24eea:	eb64 0104 	sbc.w	r1, r4, r4
   24eee:	2800      	cmp	r0, #0
   24ef0:	f171 0300 	sbcs.w	r3, r1, #0
   24ef4:	bfb8      	it	lt
   24ef6:	2000      	movlt	r0, #0
   24ef8:	e7a6      	b.n	24e48 <z_tick_sleep+0x30>
   24efa:	bf00      	nop
   24efc:	00036c49 	.word	0x00036c49
   24f00:	0003067f 	.word	0x0003067f
   24f04:	200054c8 	.word	0x200054c8
   24f08:	00030779 	.word	0x00030779
   24f0c:	20005490 	.word	0x20005490
   24f10:	200054c4 	.word	0x200054c4
   24f14:	000244dd 	.word	0x000244dd

00024f18 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   24f18:	b538      	push	{r3, r4, r5, lr}
   24f1a:	4604      	mov	r4, r0
   24f1c:	460d      	mov	r5, r1
   24f1e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   24f22:	b153      	cbz	r3, 24f3a <z_impl_k_sleep+0x22>
   24f24:	4911      	ldr	r1, [pc, #68]	; (24f6c <z_impl_k_sleep+0x54>)
   24f26:	4812      	ldr	r0, [pc, #72]	; (24f70 <z_impl_k_sleep+0x58>)
   24f28:	f240 521a 	movw	r2, #1306	; 0x51a
   24f2c:	f002 fcd1 	bl	278d2 <printk>
   24f30:	f240 511a 	movw	r1, #1306	; 0x51a
   24f34:	480d      	ldr	r0, [pc, #52]	; (24f6c <z_impl_k_sleep+0x54>)
   24f36:	f002 ff45 	bl	27dc4 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24f3a:	1c6b      	adds	r3, r5, #1
   24f3c:	bf08      	it	eq
   24f3e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   24f42:	d106      	bne.n	24f52 <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
   24f44:	4b0b      	ldr	r3, [pc, #44]	; (24f74 <z_impl_k_sleep+0x5c>)
   24f46:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   24f48:	f7ff fbbe 	bl	246c8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   24f4c:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   24f50:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   24f52:	4620      	mov	r0, r4
   24f54:	4629      	mov	r1, r5
   24f56:	f7ff ff5f 	bl	24e18 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   24f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24f5e:	fb80 3403 	smull	r3, r4, r0, r3
   24f62:	0bd8      	lsrs	r0, r3, #15
   24f64:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   24f68:	e7f2      	b.n	24f50 <z_impl_k_sleep+0x38>
   24f6a:	bf00      	nop
   24f6c:	00036c49 	.word	0x00036c49
   24f70:	0003067f 	.word	0x0003067f
   24f74:	20005490 	.word	0x20005490

00024f78 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   24f78:	b538      	push	{r3, r4, r5, lr}
   24f7a:	4c0b      	ldr	r4, [pc, #44]	; (24fa8 <z_impl_k_usleep+0x30>)
   24f7c:	4a0b      	ldr	r2, [pc, #44]	; (24fac <z_impl_k_usleep+0x34>)
   24f7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   24f82:	2500      	movs	r5, #0
   24f84:	fbc1 4500 	smlal	r4, r5, r1, r0
   24f88:	2300      	movs	r3, #0
   24f8a:	4620      	mov	r0, r4
   24f8c:	4629      	mov	r1, r5
   24f8e:	f7dc fcfd 	bl	198c <__aeabi_uldivmod>
	int32_t ticks;

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   24f92:	17c1      	asrs	r1, r0, #31
   24f94:	f7ff ff40 	bl	24e18 <z_tick_sleep>
   24f98:	4a04      	ldr	r2, [pc, #16]	; (24fac <z_impl_k_usleep+0x34>)
   24f9a:	fb80 2302 	smull	r2, r3, r0, r2
   24f9e:	0bd0      	lsrs	r0, r2, #15
	return k_ticks_to_us_floor64(ticks);
}
   24fa0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   24fa4:	bd38      	pop	{r3, r4, r5, pc}
   24fa6:	bf00      	nop
   24fa8:	000f423f 	.word	0x000f423f
   24fac:	000f4240 	.word	0x000f4240

00024fb0 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   24fb0:	4b01      	ldr	r3, [pc, #4]	; (24fb8 <z_impl_k_current_get+0x8>)
   24fb2:	6898      	ldr	r0, [r3, #8]
   24fb4:	4770      	bx	lr
   24fb6:	bf00      	nop
   24fb8:	20005490 	.word	0x20005490

00024fbc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   24fbc:	b538      	push	{r3, r4, r5, lr}
   24fbe:	4604      	mov	r4, r0
   24fc0:	f04f 0320 	mov.w	r3, #32
   24fc4:	f3ef 8511 	mrs	r5, BASEPRI
   24fc8:	f383 8811 	msr	BASEPRI, r3
   24fcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24fd0:	4815      	ldr	r0, [pc, #84]	; (25028 <z_impl_k_sem_give+0x6c>)
   24fd2:	f000 f9e9 	bl	253a8 <z_spin_lock_valid>
   24fd6:	b940      	cbnz	r0, 24fea <z_impl_k_sem_give+0x2e>
   24fd8:	4914      	ldr	r1, [pc, #80]	; (2502c <z_impl_k_sem_give+0x70>)
   24fda:	4815      	ldr	r0, [pc, #84]	; (25030 <z_impl_k_sem_give+0x74>)
   24fdc:	227c      	movs	r2, #124	; 0x7c
   24fde:	f002 fc78 	bl	278d2 <printk>
   24fe2:	217c      	movs	r1, #124	; 0x7c
   24fe4:	4811      	ldr	r0, [pc, #68]	; (2502c <z_impl_k_sem_give+0x70>)
   24fe6:	f002 feed 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   24fea:	480f      	ldr	r0, [pc, #60]	; (25028 <z_impl_k_sem_give+0x6c>)
   24fec:	f000 f9fa 	bl	253e4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   24ff0:	4620      	mov	r0, r4
   24ff2:	f7ff fe0f 	bl	24c14 <z_unpend_first_thread>

	if (thread != NULL) {
   24ff6:	b150      	cbz	r0, 2500e <z_impl_k_sem_give+0x52>
   24ff8:	2200      	movs	r2, #0
   24ffa:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   24ffe:	f7ff f9f5 	bl	243ec <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   25002:	4629      	mov	r1, r5
   25004:	4808      	ldr	r0, [pc, #32]	; (25028 <z_impl_k_sem_give+0x6c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   25006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2500a:	f7ff b81d 	b.w	24048 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2500e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   25012:	429a      	cmp	r2, r3
   25014:	bf18      	it	ne
   25016:	3301      	addne	r3, #1
   25018:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2501a:	2102      	movs	r1, #2
   2501c:	f104 0010 	add.w	r0, r4, #16
   25020:	f009 f918 	bl	2e254 <z_handle_obj_poll_events>
   25024:	e7ed      	b.n	25002 <z_impl_k_sem_give+0x46>
   25026:	bf00      	nop
   25028:	200054d4 	.word	0x200054d4
   2502c:	00030779 	.word	0x00030779
   25030:	0003067f 	.word	0x0003067f

00025034 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25036:	4605      	mov	r5, r0
   25038:	4616      	mov	r6, r2
   2503a:	461f      	mov	r7, r3
   2503c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   25040:	b15b      	cbz	r3, 2505a <z_impl_k_sem_take+0x26>
   25042:	ea56 0307 	orrs.w	r3, r6, r7
   25046:	d008      	beq.n	2505a <z_impl_k_sem_take+0x26>
   25048:	492b      	ldr	r1, [pc, #172]	; (250f8 <z_impl_k_sem_take+0xc4>)
   2504a:	482c      	ldr	r0, [pc, #176]	; (250fc <z_impl_k_sem_take+0xc8>)
   2504c:	228d      	movs	r2, #141	; 0x8d
   2504e:	f002 fc40 	bl	278d2 <printk>
   25052:	218d      	movs	r1, #141	; 0x8d
   25054:	4828      	ldr	r0, [pc, #160]	; (250f8 <z_impl_k_sem_take+0xc4>)
   25056:	f002 feb5 	bl	27dc4 <assert_post_action>
   2505a:	f04f 0320 	mov.w	r3, #32
   2505e:	f3ef 8411 	mrs	r4, BASEPRI
   25062:	f383 8811 	msr	BASEPRI, r3
   25066:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2506a:	4825      	ldr	r0, [pc, #148]	; (25100 <z_impl_k_sem_take+0xcc>)
   2506c:	f000 f99c 	bl	253a8 <z_spin_lock_valid>
   25070:	b940      	cbnz	r0, 25084 <z_impl_k_sem_take+0x50>
   25072:	4924      	ldr	r1, [pc, #144]	; (25104 <z_impl_k_sem_take+0xd0>)
   25074:	4821      	ldr	r0, [pc, #132]	; (250fc <z_impl_k_sem_take+0xc8>)
   25076:	227c      	movs	r2, #124	; 0x7c
   25078:	f002 fc2b 	bl	278d2 <printk>
   2507c:	217c      	movs	r1, #124	; 0x7c
   2507e:	4821      	ldr	r0, [pc, #132]	; (25104 <z_impl_k_sem_take+0xd0>)
   25080:	f002 fea0 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   25084:	481e      	ldr	r0, [pc, #120]	; (25100 <z_impl_k_sem_take+0xcc>)
   25086:	f000 f9ad 	bl	253e4 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   2508a:	68ab      	ldr	r3, [r5, #8]
   2508c:	b1ab      	cbz	r3, 250ba <z_impl_k_sem_take+0x86>
		sem->count--;
   2508e:	3b01      	subs	r3, #1
   25090:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25092:	481b      	ldr	r0, [pc, #108]	; (25100 <z_impl_k_sem_take+0xcc>)
   25094:	f000 f996 	bl	253c4 <z_spin_unlock_valid>
   25098:	b940      	cbnz	r0, 250ac <z_impl_k_sem_take+0x78>
   2509a:	491a      	ldr	r1, [pc, #104]	; (25104 <z_impl_k_sem_take+0xd0>)
   2509c:	4817      	ldr	r0, [pc, #92]	; (250fc <z_impl_k_sem_take+0xc8>)
   2509e:	22a7      	movs	r2, #167	; 0xa7
   250a0:	f002 fc17 	bl	278d2 <printk>
   250a4:	21a7      	movs	r1, #167	; 0xa7
   250a6:	4817      	ldr	r0, [pc, #92]	; (25104 <z_impl_k_sem_take+0xd0>)
   250a8:	f002 fe8c 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   250ac:	f384 8811 	msr	BASEPRI, r4
   250b0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   250b4:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   250b6:	b003      	add	sp, #12
   250b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   250ba:	ea56 0307 	orrs.w	r3, r6, r7
   250be:	d113      	bne.n	250e8 <z_impl_k_sem_take+0xb4>
   250c0:	480f      	ldr	r0, [pc, #60]	; (25100 <z_impl_k_sem_take+0xcc>)
   250c2:	f000 f97f 	bl	253c4 <z_spin_unlock_valid>
   250c6:	b940      	cbnz	r0, 250da <z_impl_k_sem_take+0xa6>
   250c8:	490e      	ldr	r1, [pc, #56]	; (25104 <z_impl_k_sem_take+0xd0>)
   250ca:	480c      	ldr	r0, [pc, #48]	; (250fc <z_impl_k_sem_take+0xc8>)
   250cc:	22a7      	movs	r2, #167	; 0xa7
   250ce:	f002 fc00 	bl	278d2 <printk>
   250d2:	21a7      	movs	r1, #167	; 0xa7
   250d4:	480b      	ldr	r0, [pc, #44]	; (25104 <z_impl_k_sem_take+0xd0>)
   250d6:	f002 fe75 	bl	27dc4 <assert_post_action>
   250da:	f384 8811 	msr	BASEPRI, r4
   250de:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   250e2:	f06f 000f 	mvn.w	r0, #15
		goto out;
   250e6:	e7e6      	b.n	250b6 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   250e8:	e9cd 6700 	strd	r6, r7, [sp]
   250ec:	462a      	mov	r2, r5
   250ee:	4621      	mov	r1, r4
   250f0:	4803      	ldr	r0, [pc, #12]	; (25100 <z_impl_k_sem_take+0xcc>)
   250f2:	f7ff fced 	bl	24ad0 <z_pend_curr>
	return ret;
   250f6:	e7de      	b.n	250b6 <z_impl_k_sem_take+0x82>
   250f8:	00036c6b 	.word	0x00036c6b
   250fc:	0003067f 	.word	0x0003067f
   25100:	200054d4 	.word	0x200054d4
   25104:	00030779 	.word	0x00030779

00025108 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   25108:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2510a:	4c08      	ldr	r4, [pc, #32]	; (2512c <k_sys_work_q_init+0x24>)
   2510c:	4908      	ldr	r1, [pc, #32]	; (25130 <k_sys_work_q_init+0x28>)
   2510e:	f04f 33ff 	mov.w	r3, #4294967295
   25112:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   25116:	4620      	mov	r0, r4
   25118:	f000 f998 	bl	2544c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   2511c:	4905      	ldr	r1, [pc, #20]	; (25134 <k_sys_work_q_init+0x2c>)
   2511e:	f104 0020 	add.w	r0, r4, #32
   25122:	f008 ffa8 	bl	2e076 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   25126:	2000      	movs	r0, #0
   25128:	bd10      	pop	{r4, pc}
   2512a:	bf00      	nop
   2512c:	20003028 	.word	0x20003028
   25130:	20007cc0 	.word	0x20007cc0
   25134:	00036c8b 	.word	0x00036c8b

00025138 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   25138:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2513c:	4698      	mov	r8, r3
   2513e:	4b32      	ldr	r3, [pc, #200]	; (25208 <z_setup_new_thread+0xd0>)
   25140:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   25142:	f3bf 8f5b 	dmb	ish
   25146:	4616      	mov	r6, r2
   25148:	4604      	mov	r4, r0
   2514a:	460f      	mov	r7, r1
   2514c:	f100 0238 	add.w	r2, r0, #56	; 0x38
   25150:	e852 1f00 	ldrex	r1, [r2]
   25154:	e842 3000 	strex	r0, r3, [r2]
   25158:	2800      	cmp	r0, #0
   2515a:	d1f9      	bne.n	25150 <z_setup_new_thread+0x18>
   2515c:	f3bf 8f5b 	dmb	ish
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   25160:	4299      	cmp	r1, r3
   25162:	d10a      	bne.n	2517a <z_setup_new_thread+0x42>
   25164:	4929      	ldr	r1, [pc, #164]	; (2520c <z_setup_new_thread+0xd4>)
   25166:	482a      	ldr	r0, [pc, #168]	; (25210 <z_setup_new_thread+0xd8>)
   25168:	f44f 7209 	mov.w	r2, #548	; 0x224
   2516c:	f002 fbb1 	bl	278d2 <printk>
   25170:	f44f 7109 	mov.w	r1, #548	; 0x224
   25174:	4825      	ldr	r0, [pc, #148]	; (2520c <z_setup_new_thread+0xd4>)
   25176:	f002 fe25 	bl	27dc4 <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   2517a:	2d0f      	cmp	r5, #15
   2517c:	d133      	bne.n	251e6 <z_setup_new_thread+0xae>
   2517e:	4b25      	ldr	r3, [pc, #148]	; (25214 <z_setup_new_thread+0xdc>)
   25180:	4598      	cmp	r8, r3
   25182:	d134      	bne.n	251ee <z_setup_new_thread+0xb6>
	sys_dlist_init(&w->waitq);
   25184:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   25188:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   2518c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2518e:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   25190:	2304      	movs	r3, #4
   25192:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25194:	1df3      	adds	r3, r6, #7
   25196:	f023 0307 	bic.w	r3, r3, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2519a:	f107 0220 	add.w	r2, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   2519e:	e9c4 231d 	strd	r2, r3, [r4, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   251a2:	f103 0620 	add.w	r6, r3, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   251a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   251a8:	9302      	str	r3, [sp, #8]
   251aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

	thread_base->prio = priority;
   251ac:	73a5      	strb	r5, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   251ae:	9301      	str	r3, [sp, #4]

	thread_base->sched_locked = 0U;
   251b0:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   251b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   251b4:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   251b6:	443e      	add	r6, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   251b8:	4643      	mov	r3, r8
	thread_base->sched_locked = 0U;
   251ba:	73e5      	strb	r5, [r4, #15]
	node->prev = NULL;
   251bc:	e9c4 5506 	strd	r5, r5, [r4, #24]
	new_thread->stack_info.delta = delta;
   251c0:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   251c2:	4632      	mov	r2, r6
   251c4:	4639      	mov	r1, r7
   251c6:	4620      	mov	r0, r4
   251c8:	f7e2 fcd0 	bl	7b6c <arch_new_thread>
	if (!_current) {
   251cc:	4b12      	ldr	r3, [pc, #72]	; (25218 <z_setup_new_thread+0xe0>)
   251ce:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   251d0:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   251d4:	b10b      	cbz	r3, 251da <z_setup_new_thread+0xa2>
	new_thread->resource_pool = _current->resource_pool;
   251d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	return stack_ptr;
   251da:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
   251de:	4630      	mov	r0, r6
   251e0:	b004      	add	sp, #16
   251e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   251e6:	f105 0310 	add.w	r3, r5, #16
   251ea:	2b1e      	cmp	r3, #30
   251ec:	d9ca      	bls.n	25184 <z_setup_new_thread+0x4c>
   251ee:	f240 2226 	movw	r2, #550	; 0x226
   251f2:	4906      	ldr	r1, [pc, #24]	; (2520c <z_setup_new_thread+0xd4>)
   251f4:	4806      	ldr	r0, [pc, #24]	; (25210 <z_setup_new_thread+0xd8>)
   251f6:	f002 fb6c 	bl	278d2 <printk>
   251fa:	f240 2126 	movw	r1, #550	; 0x226
   251fe:	4803      	ldr	r0, [pc, #12]	; (2520c <z_setup_new_thread+0xd4>)
   25200:	f002 fde0 	bl	27dc4 <assert_post_action>
   25204:	e7be      	b.n	25184 <z_setup_new_thread+0x4c>
   25206:	bf00      	nop
   25208:	1337c0d3 	.word	0x1337c0d3
   2520c:	00036c94 	.word	0x00036c94
   25210:	0003067f 	.word	0x0003067f
   25214:	0002343d 	.word	0x0002343d
   25218:	20005490 	.word	0x20005490

0002521c <z_impl_k_thread_create>:
{
   2521c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25220:	b087      	sub	sp, #28
   25222:	4604      	mov	r4, r0
   25224:	460d      	mov	r5, r1
   25226:	4690      	mov	r8, r2
   25228:	4699      	mov	r9, r3
   2522a:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   2522e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   25232:	b153      	cbz	r3, 2524a <z_impl_k_thread_create+0x2e>
   25234:	4919      	ldr	r1, [pc, #100]	; (2529c <z_impl_k_thread_create+0x80>)
   25236:	481a      	ldr	r0, [pc, #104]	; (252a0 <z_impl_k_thread_create+0x84>)
   25238:	f240 228f 	movw	r2, #655	; 0x28f
   2523c:	f002 fb49 	bl	278d2 <printk>
   25240:	f240 218f 	movw	r1, #655	; 0x28f
   25244:	4815      	ldr	r0, [pc, #84]	; (2529c <z_impl_k_thread_create+0x80>)
   25246:	f002 fdbd 	bl	27dc4 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2524a:	2300      	movs	r3, #0
   2524c:	9305      	str	r3, [sp, #20]
   2524e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25250:	9304      	str	r3, [sp, #16]
   25252:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25254:	9303      	str	r3, [sp, #12]
   25256:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25258:	9302      	str	r3, [sp, #8]
   2525a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2525c:	9301      	str	r3, [sp, #4]
   2525e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25260:	9300      	str	r3, [sp, #0]
   25262:	4642      	mov	r2, r8
   25264:	464b      	mov	r3, r9
   25266:	4629      	mov	r1, r5
   25268:	4620      	mov	r0, r4
   2526a:	f7ff ff65 	bl	25138 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2526e:	1c7b      	adds	r3, r7, #1
   25270:	bf08      	it	eq
   25272:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   25276:	d005      	beq.n	25284 <z_impl_k_thread_create+0x68>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25278:	ea56 0307 	orrs.w	r3, r6, r7
   2527c:	d106      	bne.n	2528c <z_impl_k_thread_create+0x70>
	z_sched_start(thread);
   2527e:	4620      	mov	r0, r4
   25280:	f7ff f8ea 	bl	24458 <z_sched_start>
}
   25284:	4620      	mov	r0, r4
   25286:	b007      	add	sp, #28
   25288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2528c:	4632      	mov	r2, r6
   2528e:	463b      	mov	r3, r7
   25290:	4904      	ldr	r1, [pc, #16]	; (252a4 <z_impl_k_thread_create+0x88>)
   25292:	f104 0018 	add.w	r0, r4, #24
   25296:	f000 fa49 	bl	2572c <z_add_timeout>
   2529a:	e7f3      	b.n	25284 <z_impl_k_thread_create+0x68>
   2529c:	00036c94 	.word	0x00036c94
   252a0:	0003067f 	.word	0x0003067f
   252a4:	000244dd 	.word	0x000244dd

000252a8 <z_init_static_threads>:
{
   252a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   252ac:	4f39      	ldr	r7, [pc, #228]	; (25394 <z_init_static_threads+0xec>)
   252ae:	4d3a      	ldr	r5, [pc, #232]	; (25398 <z_init_static_threads+0xf0>)
   252b0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 253a0 <z_init_static_threads+0xf8>
{
   252b4:	b086      	sub	sp, #24
   252b6:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   252b8:	42bd      	cmp	r5, r7
   252ba:	d90a      	bls.n	252d2 <z_init_static_threads+0x2a>
   252bc:	4641      	mov	r1, r8
   252be:	4837      	ldr	r0, [pc, #220]	; (2539c <z_init_static_threads+0xf4>)
   252c0:	f240 22fd 	movw	r2, #765	; 0x2fd
   252c4:	f002 fb05 	bl	278d2 <printk>
   252c8:	f240 21fd 	movw	r1, #765	; 0x2fd
   252cc:	4640      	mov	r0, r8
   252ce:	f002 fd79 	bl	27dc4 <assert_post_action>
   252d2:	42b5      	cmp	r5, r6
   252d4:	f105 0430 	add.w	r4, r5, #48	; 0x30
   252d8:	d31d      	bcc.n	25316 <z_init_static_threads+0x6e>
	k_sched_lock();
   252da:	f7fe feeb 	bl	240b4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   252de:	4c2e      	ldr	r4, [pc, #184]	; (25398 <z_init_static_threads+0xf0>)
   252e0:	4d2f      	ldr	r5, [pc, #188]	; (253a0 <z_init_static_threads+0xf8>)
   252e2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 2539c <z_init_static_threads+0xf4>
   252e6:	f240 38e7 	movw	r8, #999	; 0x3e7
   252ea:	f04f 0900 	mov.w	r9, #0
   252ee:	42b4      	cmp	r4, r6
   252f0:	d90a      	bls.n	25308 <z_init_static_threads+0x60>
   252f2:	4629      	mov	r1, r5
   252f4:	4650      	mov	r0, sl
   252f6:	f44f 7247 	mov.w	r2, #796	; 0x31c
   252fa:	f002 faea 	bl	278d2 <printk>
   252fe:	f44f 7147 	mov.w	r1, #796	; 0x31c
   25302:	4628      	mov	r0, r5
   25304:	f002 fd5e 	bl	27dc4 <assert_post_action>
   25308:	42b4      	cmp	r4, r6
   2530a:	d321      	bcc.n	25350 <z_init_static_threads+0xa8>
}
   2530c:	b006      	add	sp, #24
   2530e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   25312:	f7fe bfc7 	b.w	242a4 <k_sched_unlock>
		z_setup_new_thread(
   25316:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2531a:	9305      	str	r3, [sp, #20]
   2531c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   25320:	9304      	str	r3, [sp, #16]
   25322:	f854 3c14 	ldr.w	r3, [r4, #-20]
   25326:	9303      	str	r3, [sp, #12]
   25328:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2532c:	9302      	str	r3, [sp, #8]
   2532e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   25332:	9301      	str	r3, [sp, #4]
   25334:	f854 3c20 	ldr.w	r3, [r4, #-32]
   25338:	9300      	str	r3, [sp, #0]
   2533a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2533e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   25342:	f7ff fef9 	bl	25138 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   25346:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2534a:	665d      	str	r5, [r3, #100]	; 0x64
   2534c:	4625      	mov	r5, r4
   2534e:	e7b3      	b.n	252b8 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   25350:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25352:	1c5a      	adds	r2, r3, #1
   25354:	d00f      	beq.n	25376 <z_init_static_threads+0xce>
					    K_MSEC(thread_data->init_delay));
   25356:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2535a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2535e:	4640      	mov	r0, r8
   25360:	4649      	mov	r1, r9
   25362:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25366:	4549      	cmp	r1, r9
   25368:	bf08      	it	eq
   2536a:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
   2536c:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2536e:	d104      	bne.n	2537a <z_init_static_threads+0xd2>
	z_sched_start(thread);
   25370:	4638      	mov	r0, r7
   25372:	f7ff f871 	bl	24458 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   25376:	3430      	adds	r4, #48	; 0x30
   25378:	e7b9      	b.n	252ee <z_init_static_threads+0x46>
   2537a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2537e:	2300      	movs	r3, #0
   25380:	f7dc fb04 	bl	198c <__aeabi_uldivmod>
   25384:	4602      	mov	r2, r0
   25386:	460b      	mov	r3, r1
   25388:	f107 0018 	add.w	r0, r7, #24
   2538c:	4905      	ldr	r1, [pc, #20]	; (253a4 <z_init_static_threads+0xfc>)
   2538e:	f000 f9cd 	bl	2572c <z_add_timeout>
   25392:	e7f0      	b.n	25376 <z_init_static_threads+0xce>
   25394:	20001da4 	.word	0x20001da4
   25398:	20001da4 	.word	0x20001da4
   2539c:	0003067f 	.word	0x0003067f
   253a0:	00036c94 	.word	0x00036c94
   253a4:	000244dd 	.word	0x000244dd

000253a8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   253a8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   253aa:	b138      	cbz	r0, 253bc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   253ac:	4b04      	ldr	r3, [pc, #16]	; (253c0 <z_spin_lock_valid+0x18>)
   253ae:	7e1b      	ldrb	r3, [r3, #24]
   253b0:	f000 0003 	and.w	r0, r0, #3
   253b4:	1ac0      	subs	r0, r0, r3
   253b6:	bf18      	it	ne
   253b8:	2001      	movne	r0, #1
   253ba:	4770      	bx	lr
			return false;
		}
	}
	return true;
   253bc:	2001      	movs	r0, #1
}
   253be:	4770      	bx	lr
   253c0:	20005490 	.word	0x20005490

000253c4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   253c4:	4a06      	ldr	r2, [pc, #24]	; (253e0 <z_spin_unlock_valid+0x1c>)
   253c6:	7e11      	ldrb	r1, [r2, #24]
   253c8:	6893      	ldr	r3, [r2, #8]
   253ca:	6802      	ldr	r2, [r0, #0]
   253cc:	430b      	orrs	r3, r1
   253ce:	429a      	cmp	r2, r3
   253d0:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   253d4:	bf06      	itte	eq
   253d6:	6003      	streq	r3, [r0, #0]
	return true;
   253d8:	2001      	moveq	r0, #1
		return false;
   253da:	4618      	movne	r0, r3
}
   253dc:	4770      	bx	lr
   253de:	bf00      	nop
   253e0:	20005490 	.word	0x20005490

000253e4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   253e4:	4a02      	ldr	r2, [pc, #8]	; (253f0 <z_spin_lock_set_owner+0xc>)
   253e6:	7e11      	ldrb	r1, [r2, #24]
   253e8:	6893      	ldr	r3, [r2, #8]
   253ea:	430b      	orrs	r3, r1
   253ec:	6003      	str	r3, [r0, #0]
}
   253ee:	4770      	bx	lr
   253f0:	20005490 	.word	0x20005490

000253f4 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   253f4:	b508      	push	{r3, lr}
	__asm__ volatile(
   253f6:	f04f 0320 	mov.w	r3, #32
   253fa:	f3ef 8511 	mrs	r5, BASEPRI
   253fe:	f383 8811 	msr	BASEPRI, r3
   25402:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   25406:	4c0e      	ldr	r4, [pc, #56]	; (25440 <z_self_abort+0x4c>)
   25408:	6923      	ldr	r3, [r4, #16]
   2540a:	b143      	cbz	r3, 2541e <z_self_abort+0x2a>
   2540c:	490d      	ldr	r1, [pc, #52]	; (25444 <z_self_abort+0x50>)
   2540e:	480e      	ldr	r0, [pc, #56]	; (25448 <z_self_abort+0x54>)
   25410:	2228      	movs	r2, #40	; 0x28
   25412:	f002 fa5e 	bl	278d2 <printk>
   25416:	2128      	movs	r1, #40	; 0x28
   25418:	480a      	ldr	r0, [pc, #40]	; (25444 <z_self_abort+0x50>)
   2541a:	f002 fcd3 	bl	27dc4 <assert_post_action>
	cpu->pending_abort = _current;
   2541e:	68a0      	ldr	r0, [r4, #8]
   25420:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   25422:	f7ff f951 	bl	246c8 <z_impl_k_thread_suspend>
   25426:	4628      	mov	r0, r5
   25428:	f7e2 fae0 	bl	79ec <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   2542c:	4905      	ldr	r1, [pc, #20]	; (25444 <z_self_abort+0x50>)
   2542e:	4806      	ldr	r0, [pc, #24]	; (25448 <z_self_abort+0x54>)
   25430:	2230      	movs	r2, #48	; 0x30
   25432:	f002 fa4e 	bl	278d2 <printk>
   25436:	2130      	movs	r1, #48	; 0x30
   25438:	4802      	ldr	r0, [pc, #8]	; (25444 <z_self_abort+0x50>)
   2543a:	f002 fcc3 	bl	27dc4 <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2543e:	bf00      	nop
   25440:	20005490 	.word	0x20005490
   25444:	00036cb7 	.word	0x00036cb7
   25448:	0003067f 	.word	0x0003067f

0002544c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   2544c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25450:	4605      	mov	r5, r0
   25452:	b088      	sub	sp, #32
   25454:	460e      	mov	r6, r1
   25456:	4617      	mov	r7, r2
   25458:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   2545a:	f008 fd8c 	bl	2df76 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   2545e:	f105 0420 	add.w	r4, r5, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25462:	2000      	movs	r0, #0
   25464:	2200      	movs	r2, #0
   25466:	2300      	movs	r3, #0
   25468:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2546c:	e9cd 8003 	strd	r8, r0, [sp, #12]
   25470:	e9cd 0001 	strd	r0, r0, [sp, #4]
   25474:	9500      	str	r5, [sp, #0]
   25476:	4b06      	ldr	r3, [pc, #24]	; (25490 <k_work_q_start+0x44>)
   25478:	463a      	mov	r2, r7
   2547a:	4631      	mov	r1, r6
   2547c:	4620      	mov	r0, r4
   2547e:	f7ff fecd 	bl	2521c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   25482:	4904      	ldr	r1, [pc, #16]	; (25494 <k_work_q_start+0x48>)
   25484:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   25486:	b008      	add	sp, #32
   25488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2548c:	f008 bdf3 	b.w	2e076 <z_impl_k_thread_name_set>
   25490:	00004df9 	.word	0x00004df9
   25494:	00036ce0 	.word	0x00036ce0

00025498 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   25498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2549c:	4606      	mov	r6, r0
   2549e:	460d      	mov	r5, r1
   254a0:	4690      	mov	r8, r2
   254a2:	4699      	mov	r9, r3
   254a4:	f04f 0320 	mov.w	r3, #32
   254a8:	f3ef 8711 	mrs	r7, BASEPRI
   254ac:	f383 8811 	msr	BASEPRI, r3
   254b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   254b4:	482c      	ldr	r0, [pc, #176]	; (25568 <k_delayed_work_submit_to_queue+0xd0>)
   254b6:	f7ff ff77 	bl	253a8 <z_spin_lock_valid>
   254ba:	b940      	cbnz	r0, 254ce <k_delayed_work_submit_to_queue+0x36>
   254bc:	492b      	ldr	r1, [pc, #172]	; (2556c <k_delayed_work_submit_to_queue+0xd4>)
   254be:	482c      	ldr	r0, [pc, #176]	; (25570 <k_delayed_work_submit_to_queue+0xd8>)
   254c0:	227c      	movs	r2, #124	; 0x7c
   254c2:	f002 fa06 	bl	278d2 <printk>
   254c6:	217c      	movs	r1, #124	; 0x7c
   254c8:	4828      	ldr	r0, [pc, #160]	; (2556c <k_delayed_work_submit_to_queue+0xd4>)
   254ca:	f002 fc7b 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   254ce:	4826      	ldr	r0, [pc, #152]	; (25568 <k_delayed_work_submit_to_queue+0xd0>)
   254d0:	f7ff ff88 	bl	253e4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   254d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   254d6:	b1e3      	cbz	r3, 25512 <k_delayed_work_submit_to_queue+0x7a>
   254d8:	42b3      	cmp	r3, r6
   254da:	d142      	bne.n	25562 <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   254dc:	4628      	mov	r0, r5
   254de:	f008 fdee 	bl	2e0be <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   254e2:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   254e6:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   254e8:	d015      	beq.n	25516 <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   254ea:	2800      	cmp	r0, #0
   254ec:	da14      	bge.n	25518 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   254ee:	481e      	ldr	r0, [pc, #120]	; (25568 <k_delayed_work_submit_to_queue+0xd0>)
   254f0:	f7ff ff68 	bl	253c4 <z_spin_unlock_valid>
   254f4:	b940      	cbnz	r0, 25508 <k_delayed_work_submit_to_queue+0x70>
   254f6:	491d      	ldr	r1, [pc, #116]	; (2556c <k_delayed_work_submit_to_queue+0xd4>)
   254f8:	481d      	ldr	r0, [pc, #116]	; (25570 <k_delayed_work_submit_to_queue+0xd8>)
   254fa:	22a7      	movs	r2, #167	; 0xa7
   254fc:	f002 f9e9 	bl	278d2 <printk>
   25500:	21a7      	movs	r1, #167	; 0xa7
   25502:	481a      	ldr	r0, [pc, #104]	; (2556c <k_delayed_work_submit_to_queue+0xd4>)
   25504:	f002 fc5e 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   25508:	f387 8811 	msr	BASEPRI, r7
   2550c:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   25510:	e01c      	b.n	2554c <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   25512:	2e00      	cmp	r6, #0
   25514:	d0e2      	beq.n	254dc <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   25516:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25518:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   2551c:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2551e:	d118      	bne.n	25552 <k_delayed_work_submit_to_queue+0xba>
   25520:	4811      	ldr	r0, [pc, #68]	; (25568 <k_delayed_work_submit_to_queue+0xd0>)
   25522:	f7ff ff4f 	bl	253c4 <z_spin_unlock_valid>
   25526:	b940      	cbnz	r0, 2553a <k_delayed_work_submit_to_queue+0xa2>
   25528:	4910      	ldr	r1, [pc, #64]	; (2556c <k_delayed_work_submit_to_queue+0xd4>)
   2552a:	4811      	ldr	r0, [pc, #68]	; (25570 <k_delayed_work_submit_to_queue+0xd8>)
   2552c:	22a7      	movs	r2, #167	; 0xa7
   2552e:	f002 f9d0 	bl	278d2 <printk>
   25532:	21a7      	movs	r1, #167	; 0xa7
   25534:	480d      	ldr	r0, [pc, #52]	; (2556c <k_delayed_work_submit_to_queue+0xd4>)
   25536:	f002 fc45 	bl	27dc4 <assert_post_action>
   2553a:	f387 8811 	msr	BASEPRI, r7
   2553e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   25542:	4629      	mov	r1, r5
   25544:	4630      	mov	r0, r6
   25546:	f008 fd9d 	bl	2e084 <k_work_submit_to_queue>
		return 0;
   2554a:	2400      	movs	r4, #0
}
   2554c:	4620      	mov	r0, r4
   2554e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   25552:	4642      	mov	r2, r8
   25554:	464b      	mov	r3, r9
   25556:	4907      	ldr	r1, [pc, #28]	; (25574 <k_delayed_work_submit_to_queue+0xdc>)
   25558:	f105 0010 	add.w	r0, r5, #16
   2555c:	f000 f8e6 	bl	2572c <z_add_timeout>
   25560:	e7c5      	b.n	254ee <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   25562:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   25566:	e7c2      	b.n	254ee <k_delayed_work_submit_to_queue+0x56>
   25568:	200054d8 	.word	0x200054d8
   2556c:	00030779 	.word	0x00030779
   25570:	0003067f 	.word	0x0003067f
   25574:	0002e0b5 	.word	0x0002e0b5

00025578 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   25578:	b538      	push	{r3, r4, r5, lr}
   2557a:	4604      	mov	r4, r0
	__asm__ volatile(
   2557c:	f04f 0320 	mov.w	r3, #32
   25580:	f3ef 8511 	mrs	r5, BASEPRI
   25584:	f383 8811 	msr	BASEPRI, r3
   25588:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2558c:	4815      	ldr	r0, [pc, #84]	; (255e4 <k_delayed_work_cancel+0x6c>)
   2558e:	f7ff ff0b 	bl	253a8 <z_spin_lock_valid>
   25592:	b940      	cbnz	r0, 255a6 <k_delayed_work_cancel+0x2e>
   25594:	4914      	ldr	r1, [pc, #80]	; (255e8 <k_delayed_work_cancel+0x70>)
   25596:	4815      	ldr	r0, [pc, #84]	; (255ec <k_delayed_work_cancel+0x74>)
   25598:	227c      	movs	r2, #124	; 0x7c
   2559a:	f002 f99a 	bl	278d2 <printk>
   2559e:	217c      	movs	r1, #124	; 0x7c
   255a0:	4811      	ldr	r0, [pc, #68]	; (255e8 <k_delayed_work_cancel+0x70>)
   255a2:	f002 fc0f 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   255a6:	480f      	ldr	r0, [pc, #60]	; (255e4 <k_delayed_work_cancel+0x6c>)
   255a8:	f7ff ff1c 	bl	253e4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   255ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   255ae:	b1b3      	cbz	r3, 255de <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   255b0:	4620      	mov	r0, r4
   255b2:	f008 fd84 	bl	2e0be <work_cancel>
   255b6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   255b8:	480a      	ldr	r0, [pc, #40]	; (255e4 <k_delayed_work_cancel+0x6c>)
   255ba:	f7ff ff03 	bl	253c4 <z_spin_unlock_valid>
   255be:	b940      	cbnz	r0, 255d2 <k_delayed_work_cancel+0x5a>
   255c0:	4909      	ldr	r1, [pc, #36]	; (255e8 <k_delayed_work_cancel+0x70>)
   255c2:	480a      	ldr	r0, [pc, #40]	; (255ec <k_delayed_work_cancel+0x74>)
   255c4:	22a7      	movs	r2, #167	; 0xa7
   255c6:	f002 f984 	bl	278d2 <printk>
   255ca:	21a7      	movs	r1, #167	; 0xa7
   255cc:	4806      	ldr	r0, [pc, #24]	; (255e8 <k_delayed_work_cancel+0x70>)
   255ce:	f002 fbf9 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   255d2:	f385 8811 	msr	BASEPRI, r5
   255d6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   255da:	4620      	mov	r0, r4
   255dc:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   255de:	f06f 0415 	mvn.w	r4, #21
   255e2:	e7e9      	b.n	255b8 <k_delayed_work_cancel+0x40>
   255e4:	200054d8 	.word	0x200054d8
   255e8:	00030779 	.word	0x00030779
   255ec:	0003067f 	.word	0x0003067f

000255f0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   255f0:	4a02      	ldr	r2, [pc, #8]	; (255fc <boot_banner+0xc>)
   255f2:	4903      	ldr	r1, [pc, #12]	; (25600 <boot_banner+0x10>)
   255f4:	4803      	ldr	r0, [pc, #12]	; (25604 <boot_banner+0x14>)
   255f6:	f002 b96c 	b.w	278d2 <printk>
   255fa:	bf00      	nop
   255fc:	00033ab7 	.word	0x00033ab7
   25600:	00036cea 	.word	0x00036cea
   25604:	00036cf7 	.word	0x00036cf7

00025608 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   25608:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2560a:	4806      	ldr	r0, [pc, #24]	; (25624 <z_data_copy+0x1c>)
   2560c:	4a06      	ldr	r2, [pc, #24]	; (25628 <z_data_copy+0x20>)
   2560e:	4907      	ldr	r1, [pc, #28]	; (2562c <z_data_copy+0x24>)
   25610:	1a12      	subs	r2, r2, r0
   25612:	f008 fe4a 	bl	2e2aa <memcpy>
   25616:	4a06      	ldr	r2, [pc, #24]	; (25630 <z_data_copy+0x28>)
   25618:	4906      	ldr	r1, [pc, #24]	; (25634 <z_data_copy+0x2c>)
   2561a:	4807      	ldr	r0, [pc, #28]	; (25638 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2561c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   25620:	f008 be43 	b.w	2e2aa <memcpy>
   25624:	20000000 	.word	0x20000000
   25628:	200020d0 	.word	0x200020d0
   2562c:	00036e88 	.word	0x00036e88
   25630:	00000000 	.word	0x00000000
   25634:	00036e88 	.word	0x00036e88
   25638:	20000000 	.word	0x20000000

0002563c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   2563c:	4b03      	ldr	r3, [pc, #12]	; (2564c <elapsed+0x10>)
   2563e:	681b      	ldr	r3, [r3, #0]
   25640:	b90b      	cbnz	r3, 25646 <elapsed+0xa>
   25642:	f7e1 bf35 	b.w	74b0 <z_clock_elapsed>
}
   25646:	2000      	movs	r0, #0
   25648:	4770      	bx	lr
   2564a:	bf00      	nop
   2564c:	200054dc 	.word	0x200054dc

00025650 <remove_timeout>:
{
   25650:	b530      	push	{r4, r5, lr}
   25652:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25654:	b168      	cbz	r0, 25672 <remove_timeout+0x22>
   25656:	4a0a      	ldr	r2, [pc, #40]	; (25680 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   25658:	6852      	ldr	r2, [r2, #4]
   2565a:	4290      	cmp	r0, r2
   2565c:	d009      	beq.n	25672 <remove_timeout+0x22>
	if (next(t) != NULL) {
   2565e:	b143      	cbz	r3, 25672 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   25660:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   25664:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   25668:	1912      	adds	r2, r2, r4
   2566a:	eb45 0101 	adc.w	r1, r5, r1
   2566e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   25672:	6842      	ldr	r2, [r0, #4]
   25674:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   25676:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25678:	2300      	movs	r3, #0
	node->prev = NULL;
   2567a:	e9c0 3300 	strd	r3, r3, [r0]
}
   2567e:	bd30      	pop	{r4, r5, pc}
   25680:	200019b8 	.word	0x200019b8

00025684 <next_timeout>:

static int32_t next_timeout(void)
{
   25684:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   25686:	4b13      	ldr	r3, [pc, #76]	; (256d4 <next_timeout+0x50>)
   25688:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2568a:	429c      	cmp	r4, r3
   2568c:	bf08      	it	eq
   2568e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   25690:	f7ff ffd4 	bl	2563c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   25694:	b1c4      	cbz	r4, 256c8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   25696:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   2569a:	1a14      	subs	r4, r2, r0
   2569c:	eb63 75e0 	sbc.w	r5, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   256a0:	2c01      	cmp	r4, #1
   256a2:	f175 0300 	sbcs.w	r3, r5, #0
   256a6:	db12      	blt.n	256ce <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   256a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   256ac:	2300      	movs	r3, #0
   256ae:	42a2      	cmp	r2, r4
   256b0:	4620      	mov	r0, r4
   256b2:	eb73 0405 	sbcs.w	r4, r3, r5
   256b6:	da00      	bge.n	256ba <next_timeout+0x36>
   256b8:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   256ba:	4b07      	ldr	r3, [pc, #28]	; (256d8 <next_timeout+0x54>)
   256bc:	695b      	ldr	r3, [r3, #20]
   256be:	b113      	cbz	r3, 256c6 <next_timeout+0x42>
   256c0:	4298      	cmp	r0, r3
   256c2:	bfa8      	it	ge
   256c4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   256c6:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   256c8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   256cc:	e7f5      	b.n	256ba <next_timeout+0x36>
   256ce:	2000      	movs	r0, #0
   256d0:	e7f3      	b.n	256ba <next_timeout+0x36>
   256d2:	bf00      	nop
   256d4:	200019b8 	.word	0x200019b8
   256d8:	20005490 	.word	0x20005490

000256dc <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   256dc:	6803      	ldr	r3, [r0, #0]
{
   256de:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   256e0:	b1fb      	cbz	r3, 25722 <timeout_rem+0x46>
	return list->head == list;
   256e2:	4a11      	ldr	r2, [pc, #68]	; (25728 <timeout_rem+0x4c>)
   256e4:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   256e6:	4293      	cmp	r3, r2
   256e8:	d018      	beq.n	2571c <timeout_rem+0x40>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   256ea:	6851      	ldr	r1, [r2, #4]
   256ec:	2400      	movs	r4, #0
   256ee:	2500      	movs	r5, #0
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   256f0:	b93b      	cbnz	r3, 25702 <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   256f2:	f7ff ffa3 	bl	2563c <elapsed>
   256f6:	1a22      	subs	r2, r4, r0
   256f8:	eb65 73e0 	sbc.w	r3, r5, r0, asr #31
   256fc:	4619      	mov	r1, r3
   256fe:	4610      	mov	r0, r2
}
   25700:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   25702:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   25706:	18a4      	adds	r4, r4, r2
   25708:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   2570c:	4283      	cmp	r3, r0
   2570e:	d0f0      	beq.n	256f2 <timeout_rem+0x16>
   25710:	2b00      	cmp	r3, #0
   25712:	d0ee      	beq.n	256f2 <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   25714:	428b      	cmp	r3, r1
   25716:	d0ec      	beq.n	256f2 <timeout_rem+0x16>
   25718:	681b      	ldr	r3, [r3, #0]
   2571a:	e7e9      	b.n	256f0 <timeout_rem+0x14>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2571c:	2400      	movs	r4, #0
   2571e:	2500      	movs	r5, #0
   25720:	e7e7      	b.n	256f2 <timeout_rem+0x16>
		return 0;
   25722:	2000      	movs	r0, #0
   25724:	2100      	movs	r1, #0
   25726:	e7eb      	b.n	25700 <timeout_rem+0x24>
   25728:	200019b8 	.word	0x200019b8

0002572c <z_add_timeout>:
{
   2572c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25730:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25732:	1c59      	adds	r1, r3, #1
   25734:	bf08      	it	eq
   25736:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2573a:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2573c:	f000 809d 	beq.w	2587a <z_add_timeout+0x14e>
	k_ticks_t ticks = timeout.ticks + 1;
   25740:	1c54      	adds	r4, r2, #1
   25742:	f143 0500 	adc.w	r5, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   25746:	f06f 0301 	mvn.w	r3, #1
   2574a:	ebb3 0804 	subs.w	r8, r3, r4
   2574e:	f04f 3bff 	mov.w	fp, #4294967295
   25752:	eb6b 0905 	sbc.w	r9, fp, r5
   25756:	f1b8 0f00 	cmp.w	r8, #0
   2575a:	f179 0300 	sbcs.w	r3, r9, #0
   2575e:	db0f      	blt.n	25780 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   25760:	f7ff ff6c 	bl	2563c <elapsed>
   25764:	4a4b      	ldr	r2, [pc, #300]	; (25894 <z_add_timeout+0x168>)
   25766:	e9d2 1c00 	ldrd	r1, ip, [r2]
   2576a:	f06f 0301 	mvn.w	r3, #1
   2576e:	1a5b      	subs	r3, r3, r1
   25770:	eb6b 020c 	sbc.w	r2, fp, ip
   25774:	1b1e      	subs	r6, r3, r4
   25776:	eb62 0705 	sbc.w	r7, r2, r5
   2577a:	1a34      	subs	r4, r6, r0
   2577c:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   25780:	f8da 3000 	ldr.w	r3, [sl]
   25784:	b143      	cbz	r3, 25798 <z_add_timeout+0x6c>
   25786:	4944      	ldr	r1, [pc, #272]	; (25898 <z_add_timeout+0x16c>)
   25788:	4844      	ldr	r0, [pc, #272]	; (2589c <z_add_timeout+0x170>)
   2578a:	2268      	movs	r2, #104	; 0x68
   2578c:	f002 f8a1 	bl	278d2 <printk>
   25790:	2168      	movs	r1, #104	; 0x68
   25792:	4841      	ldr	r0, [pc, #260]	; (25898 <z_add_timeout+0x16c>)
   25794:	f002 fb16 	bl	27dc4 <assert_post_action>
	to->fn = fn;
   25798:	9b01      	ldr	r3, [sp, #4]
   2579a:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
   2579e:	2c01      	cmp	r4, #1
   257a0:	f175 0300 	sbcs.w	r3, r5, #0
   257a4:	4627      	mov	r7, r4
   257a6:	46a8      	mov	r8, r5
   257a8:	bfbc      	itt	lt
   257aa:	2701      	movlt	r7, #1
   257ac:	f04f 0800 	movlt.w	r8, #0
	__asm__ volatile(
   257b0:	f04f 0320 	mov.w	r3, #32
   257b4:	f3ef 8611 	mrs	r6, BASEPRI
   257b8:	f383 8811 	msr	BASEPRI, r3
   257bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   257c0:	4837      	ldr	r0, [pc, #220]	; (258a0 <z_add_timeout+0x174>)
   257c2:	f7ff fdf1 	bl	253a8 <z_spin_lock_valid>
   257c6:	b940      	cbnz	r0, 257da <z_add_timeout+0xae>
   257c8:	4936      	ldr	r1, [pc, #216]	; (258a4 <z_add_timeout+0x178>)
   257ca:	4834      	ldr	r0, [pc, #208]	; (2589c <z_add_timeout+0x170>)
   257cc:	227c      	movs	r2, #124	; 0x7c
   257ce:	f002 f880 	bl	278d2 <printk>
   257d2:	217c      	movs	r1, #124	; 0x7c
   257d4:	4833      	ldr	r0, [pc, #204]	; (258a4 <z_add_timeout+0x178>)
   257d6:	f002 faf5 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   257da:	4831      	ldr	r0, [pc, #196]	; (258a0 <z_add_timeout+0x174>)
   257dc:	f7ff fe02 	bl	253e4 <z_spin_lock_set_owner>
		to->dticks = ticks + elapsed();
   257e0:	f7ff ff2c 	bl	2563c <elapsed>
	return list->head == list;
   257e4:	4b30      	ldr	r3, [pc, #192]	; (258a8 <z_add_timeout+0x17c>)
   257e6:	681a      	ldr	r2, [r3, #0]
   257e8:	183c      	adds	r4, r7, r0
   257ea:	eb48 75e0 	adc.w	r5, r8, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   257ee:	429a      	cmp	r2, r3
   257f0:	e9ca 4504 	strd	r4, r5, [sl, #16]
   257f4:	d001      	beq.n	257fa <z_add_timeout+0xce>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   257f6:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   257f8:	b952      	cbnz	r2, 25810 <z_add_timeout+0xe4>
	node->prev = list->tail;
   257fa:	685a      	ldr	r2, [r3, #4]
   257fc:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   25800:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   25802:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   25806:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   2580a:	f8c3 a004 	str.w	sl, [r3, #4]
   2580e:	e014      	b.n	2583a <z_add_timeout+0x10e>
			if (t->dticks > to->dticks) {
   25810:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   25814:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   25818:	4544      	cmp	r4, r8
   2581a:	eb75 0109 	sbcs.w	r1, r5, r9
   2581e:	da2f      	bge.n	25880 <z_add_timeout+0x154>
				t->dticks -= to->dticks;
   25820:	ebb8 0004 	subs.w	r0, r8, r4
   25824:	eb69 0105 	sbc.w	r1, r9, r5
   25828:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   2582c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2582e:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   25832:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   25836:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   2583a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2583c:	429a      	cmp	r2, r3
   2583e:	d00b      	beq.n	25858 <z_add_timeout+0x12c>
		if (to == first()) {
   25840:	4592      	cmp	sl, r2
   25842:	d109      	bne.n	25858 <z_add_timeout+0x12c>
			int32_t next_time = next_timeout();
   25844:	f7ff ff1e 	bl	25684 <next_timeout>
			if (next_time == 0 ||
   25848:	b118      	cbz	r0, 25852 <z_add_timeout+0x126>
			    _current_cpu->slice_ticks != next_time) {
   2584a:	4b18      	ldr	r3, [pc, #96]	; (258ac <z_add_timeout+0x180>)
			if (next_time == 0 ||
   2584c:	695b      	ldr	r3, [r3, #20]
   2584e:	4283      	cmp	r3, r0
   25850:	d002      	beq.n	25858 <z_add_timeout+0x12c>
				z_clock_set_timeout(next_time, false);
   25852:	2100      	movs	r1, #0
   25854:	f7e1 fdfa 	bl	744c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25858:	4811      	ldr	r0, [pc, #68]	; (258a0 <z_add_timeout+0x174>)
   2585a:	f7ff fdb3 	bl	253c4 <z_spin_unlock_valid>
   2585e:	b940      	cbnz	r0, 25872 <z_add_timeout+0x146>
   25860:	4910      	ldr	r1, [pc, #64]	; (258a4 <z_add_timeout+0x178>)
   25862:	480e      	ldr	r0, [pc, #56]	; (2589c <z_add_timeout+0x170>)
   25864:	22a7      	movs	r2, #167	; 0xa7
   25866:	f002 f834 	bl	278d2 <printk>
   2586a:	21a7      	movs	r1, #167	; 0xa7
   2586c:	480d      	ldr	r0, [pc, #52]	; (258a4 <z_add_timeout+0x178>)
   2586e:	f002 faa9 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   25872:	f386 8811 	msr	BASEPRI, r6
   25876:	f3bf 8f6f 	isb	sy
}
   2587a:	b003      	add	sp, #12
   2587c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   25880:	ebb4 0008 	subs.w	r0, r4, r8
   25884:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   25888:	42ba      	cmp	r2, r7
   2588a:	e9ca 0104 	strd	r0, r1, [sl, #16]
   2588e:	d0b4      	beq.n	257fa <z_add_timeout+0xce>
   25890:	6812      	ldr	r2, [r2, #0]
   25892:	e7b1      	b.n	257f8 <z_add_timeout+0xcc>
   25894:	200030d8 	.word	0x200030d8
   25898:	00036d1e 	.word	0x00036d1e
   2589c:	0003067f 	.word	0x0003067f
   258a0:	200054e0 	.word	0x200054e0
   258a4:	00030779 	.word	0x00030779
   258a8:	200019b8 	.word	0x200019b8
   258ac:	20005490 	.word	0x20005490

000258b0 <z_abort_timeout>:
{
   258b0:	b538      	push	{r3, r4, r5, lr}
   258b2:	4604      	mov	r4, r0
	__asm__ volatile(
   258b4:	f04f 0320 	mov.w	r3, #32
   258b8:	f3ef 8511 	mrs	r5, BASEPRI
   258bc:	f383 8811 	msr	BASEPRI, r3
   258c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   258c4:	4815      	ldr	r0, [pc, #84]	; (2591c <z_abort_timeout+0x6c>)
   258c6:	f7ff fd6f 	bl	253a8 <z_spin_lock_valid>
   258ca:	b940      	cbnz	r0, 258de <z_abort_timeout+0x2e>
   258cc:	4914      	ldr	r1, [pc, #80]	; (25920 <z_abort_timeout+0x70>)
   258ce:	4815      	ldr	r0, [pc, #84]	; (25924 <z_abort_timeout+0x74>)
   258d0:	227c      	movs	r2, #124	; 0x7c
   258d2:	f001 fffe 	bl	278d2 <printk>
   258d6:	217c      	movs	r1, #124	; 0x7c
   258d8:	4811      	ldr	r0, [pc, #68]	; (25920 <z_abort_timeout+0x70>)
   258da:	f002 fa73 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   258de:	480f      	ldr	r0, [pc, #60]	; (2591c <z_abort_timeout+0x6c>)
   258e0:	f7ff fd80 	bl	253e4 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   258e4:	6823      	ldr	r3, [r4, #0]
   258e6:	b1b3      	cbz	r3, 25916 <z_abort_timeout+0x66>
			remove_timeout(to);
   258e8:	4620      	mov	r0, r4
   258ea:	f7ff feb1 	bl	25650 <remove_timeout>
			ret = 0;
   258ee:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   258f0:	480a      	ldr	r0, [pc, #40]	; (2591c <z_abort_timeout+0x6c>)
   258f2:	f7ff fd67 	bl	253c4 <z_spin_unlock_valid>
   258f6:	b940      	cbnz	r0, 2590a <z_abort_timeout+0x5a>
   258f8:	4909      	ldr	r1, [pc, #36]	; (25920 <z_abort_timeout+0x70>)
   258fa:	480a      	ldr	r0, [pc, #40]	; (25924 <z_abort_timeout+0x74>)
   258fc:	22a7      	movs	r2, #167	; 0xa7
   258fe:	f001 ffe8 	bl	278d2 <printk>
   25902:	21a7      	movs	r1, #167	; 0xa7
   25904:	4806      	ldr	r0, [pc, #24]	; (25920 <z_abort_timeout+0x70>)
   25906:	f002 fa5d 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   2590a:	f385 8811 	msr	BASEPRI, r5
   2590e:	f3bf 8f6f 	isb	sy
}
   25912:	4620      	mov	r0, r4
   25914:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   25916:	f06f 0415 	mvn.w	r4, #21
   2591a:	e7e9      	b.n	258f0 <z_abort_timeout+0x40>
   2591c:	200054e0 	.word	0x200054e0
   25920:	00030779 	.word	0x00030779
   25924:	0003067f 	.word	0x0003067f

00025928 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
   25928:	b570      	push	{r4, r5, r6, lr}
   2592a:	4604      	mov	r4, r0
	__asm__ volatile(
   2592c:	f04f 0320 	mov.w	r3, #32
   25930:	f3ef 8611 	mrs	r6, BASEPRI
   25934:	f383 8811 	msr	BASEPRI, r3
   25938:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2593c:	4814      	ldr	r0, [pc, #80]	; (25990 <z_timeout_remaining+0x68>)
   2593e:	f7ff fd33 	bl	253a8 <z_spin_lock_valid>
   25942:	b940      	cbnz	r0, 25956 <z_timeout_remaining+0x2e>
   25944:	4913      	ldr	r1, [pc, #76]	; (25994 <z_timeout_remaining+0x6c>)
   25946:	4814      	ldr	r0, [pc, #80]	; (25998 <z_timeout_remaining+0x70>)
   25948:	227c      	movs	r2, #124	; 0x7c
   2594a:	f001 ffc2 	bl	278d2 <printk>
   2594e:	217c      	movs	r1, #124	; 0x7c
   25950:	4810      	ldr	r0, [pc, #64]	; (25994 <z_timeout_remaining+0x6c>)
   25952:	f002 fa37 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   25956:	480e      	ldr	r0, [pc, #56]	; (25990 <z_timeout_remaining+0x68>)
   25958:	f7ff fd44 	bl	253e4 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   2595c:	4620      	mov	r0, r4
   2595e:	f7ff febd 	bl	256dc <timeout_rem>
   25962:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25964:	480a      	ldr	r0, [pc, #40]	; (25990 <z_timeout_remaining+0x68>)
   25966:	460d      	mov	r5, r1
   25968:	f7ff fd2c 	bl	253c4 <z_spin_unlock_valid>
   2596c:	b940      	cbnz	r0, 25980 <z_timeout_remaining+0x58>
   2596e:	4909      	ldr	r1, [pc, #36]	; (25994 <z_timeout_remaining+0x6c>)
   25970:	4809      	ldr	r0, [pc, #36]	; (25998 <z_timeout_remaining+0x70>)
   25972:	22a7      	movs	r2, #167	; 0xa7
   25974:	f001 ffad 	bl	278d2 <printk>
   25978:	21a7      	movs	r1, #167	; 0xa7
   2597a:	4806      	ldr	r0, [pc, #24]	; (25994 <z_timeout_remaining+0x6c>)
   2597c:	f002 fa22 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   25980:	f386 8811 	msr	BASEPRI, r6
   25984:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   25988:	4620      	mov	r0, r4
   2598a:	4629      	mov	r1, r5
   2598c:	bd70      	pop	{r4, r5, r6, pc}
   2598e:	bf00      	nop
   25990:	200054e0 	.word	0x200054e0
   25994:	00030779 	.word	0x00030779
   25998:	0003067f 	.word	0x0003067f

0002599c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   2599c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2599e:	f04f 0320 	mov.w	r3, #32
   259a2:	f3ef 8511 	mrs	r5, BASEPRI
   259a6:	f383 8811 	msr	BASEPRI, r3
   259aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   259ae:	4813      	ldr	r0, [pc, #76]	; (259fc <z_get_next_timeout_expiry+0x60>)
   259b0:	f7ff fcfa 	bl	253a8 <z_spin_lock_valid>
   259b4:	b940      	cbnz	r0, 259c8 <z_get_next_timeout_expiry+0x2c>
   259b6:	4912      	ldr	r1, [pc, #72]	; (25a00 <z_get_next_timeout_expiry+0x64>)
   259b8:	4812      	ldr	r0, [pc, #72]	; (25a04 <z_get_next_timeout_expiry+0x68>)
   259ba:	227c      	movs	r2, #124	; 0x7c
   259bc:	f001 ff89 	bl	278d2 <printk>
   259c0:	217c      	movs	r1, #124	; 0x7c
   259c2:	480f      	ldr	r0, [pc, #60]	; (25a00 <z_get_next_timeout_expiry+0x64>)
   259c4:	f002 f9fe 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   259c8:	480c      	ldr	r0, [pc, #48]	; (259fc <z_get_next_timeout_expiry+0x60>)
   259ca:	f7ff fd0b 	bl	253e4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   259ce:	f7ff fe59 	bl	25684 <next_timeout>
   259d2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   259d4:	4809      	ldr	r0, [pc, #36]	; (259fc <z_get_next_timeout_expiry+0x60>)
   259d6:	f7ff fcf5 	bl	253c4 <z_spin_unlock_valid>
   259da:	b940      	cbnz	r0, 259ee <z_get_next_timeout_expiry+0x52>
   259dc:	4908      	ldr	r1, [pc, #32]	; (25a00 <z_get_next_timeout_expiry+0x64>)
   259de:	4809      	ldr	r0, [pc, #36]	; (25a04 <z_get_next_timeout_expiry+0x68>)
   259e0:	22a7      	movs	r2, #167	; 0xa7
   259e2:	f001 ff76 	bl	278d2 <printk>
   259e6:	21a7      	movs	r1, #167	; 0xa7
   259e8:	4805      	ldr	r0, [pc, #20]	; (25a00 <z_get_next_timeout_expiry+0x64>)
   259ea:	f002 f9eb 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   259ee:	f385 8811 	msr	BASEPRI, r5
   259f2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   259f6:	4620      	mov	r0, r4
   259f8:	bd38      	pop	{r3, r4, r5, pc}
   259fa:	bf00      	nop
   259fc:	200054e0 	.word	0x200054e0
   25a00:	00030779 	.word	0x00030779
   25a04:	0003067f 	.word	0x0003067f

00025a08 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   25a08:	b570      	push	{r4, r5, r6, lr}
   25a0a:	4604      	mov	r4, r0
   25a0c:	460e      	mov	r6, r1
	__asm__ volatile(
   25a0e:	f04f 0320 	mov.w	r3, #32
   25a12:	f3ef 8511 	mrs	r5, BASEPRI
   25a16:	f383 8811 	msr	BASEPRI, r3
   25a1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25a1e:	4816      	ldr	r0, [pc, #88]	; (25a78 <z_set_timeout_expiry+0x70>)
   25a20:	f7ff fcc2 	bl	253a8 <z_spin_lock_valid>
   25a24:	b940      	cbnz	r0, 25a38 <z_set_timeout_expiry+0x30>
   25a26:	4915      	ldr	r1, [pc, #84]	; (25a7c <z_set_timeout_expiry+0x74>)
   25a28:	4815      	ldr	r0, [pc, #84]	; (25a80 <z_set_timeout_expiry+0x78>)
   25a2a:	227c      	movs	r2, #124	; 0x7c
   25a2c:	f001 ff51 	bl	278d2 <printk>
   25a30:	217c      	movs	r1, #124	; 0x7c
   25a32:	4812      	ldr	r0, [pc, #72]	; (25a7c <z_set_timeout_expiry+0x74>)
   25a34:	f002 f9c6 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   25a38:	480f      	ldr	r0, [pc, #60]	; (25a78 <z_set_timeout_expiry+0x70>)
   25a3a:	f7ff fcd3 	bl	253e4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   25a3e:	f7ff fe21 	bl	25684 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   25a42:	2801      	cmp	r0, #1
   25a44:	dd05      	ble.n	25a52 <z_set_timeout_expiry+0x4a>
   25a46:	42a0      	cmp	r0, r4
   25a48:	dd03      	ble.n	25a52 <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   25a4a:	4631      	mov	r1, r6
   25a4c:	4620      	mov	r0, r4
   25a4e:	f7e1 fcfd 	bl	744c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25a52:	4809      	ldr	r0, [pc, #36]	; (25a78 <z_set_timeout_expiry+0x70>)
   25a54:	f7ff fcb6 	bl	253c4 <z_spin_unlock_valid>
   25a58:	b940      	cbnz	r0, 25a6c <z_set_timeout_expiry+0x64>
   25a5a:	4908      	ldr	r1, [pc, #32]	; (25a7c <z_set_timeout_expiry+0x74>)
   25a5c:	4808      	ldr	r0, [pc, #32]	; (25a80 <z_set_timeout_expiry+0x78>)
   25a5e:	22a7      	movs	r2, #167	; 0xa7
   25a60:	f001 ff37 	bl	278d2 <printk>
   25a64:	21a7      	movs	r1, #167	; 0xa7
   25a66:	4805      	ldr	r0, [pc, #20]	; (25a7c <z_set_timeout_expiry+0x74>)
   25a68:	f002 f9ac 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   25a6c:	f385 8811 	msr	BASEPRI, r5
   25a70:	f3bf 8f6f 	isb	sy
		}
	}
}
   25a74:	bd70      	pop	{r4, r5, r6, pc}
   25a76:	bf00      	nop
   25a78:	200054e0 	.word	0x200054e0
   25a7c:	00030779 	.word	0x00030779
   25a80:	0003067f 	.word	0x0003067f

00025a84 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   25a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a88:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   25a8a:	f7fe fdb7 	bl	245fc <z_time_slice>
	__asm__ volatile(
   25a8e:	f04f 0320 	mov.w	r3, #32
   25a92:	f3ef 8911 	mrs	r9, BASEPRI
   25a96:	f383 8811 	msr	BASEPRI, r3
   25a9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25a9e:	484b      	ldr	r0, [pc, #300]	; (25bcc <z_clock_announce+0x148>)
   25aa0:	f7ff fc82 	bl	253a8 <z_spin_lock_valid>
   25aa4:	b940      	cbnz	r0, 25ab8 <z_clock_announce+0x34>
   25aa6:	494a      	ldr	r1, [pc, #296]	; (25bd0 <z_clock_announce+0x14c>)
   25aa8:	484a      	ldr	r0, [pc, #296]	; (25bd4 <z_clock_announce+0x150>)
   25aaa:	227c      	movs	r2, #124	; 0x7c
   25aac:	f001 ff11 	bl	278d2 <printk>
   25ab0:	217c      	movs	r1, #124	; 0x7c
   25ab2:	4847      	ldr	r0, [pc, #284]	; (25bd0 <z_clock_announce+0x14c>)
   25ab4:	f002 f986 	bl	27dc4 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   25ab8:	4e47      	ldr	r6, [pc, #284]	; (25bd8 <z_clock_announce+0x154>)
   25aba:	4f48      	ldr	r7, [pc, #288]	; (25bdc <z_clock_announce+0x158>)
	z_spin_lock_set_owner(l);
   25abc:	4843      	ldr	r0, [pc, #268]	; (25bcc <z_clock_announce+0x148>)
	return list->head == list;
   25abe:	f8df a120 	ldr.w	sl, [pc, #288]	; 25be0 <z_clock_announce+0x15c>
   25ac2:	f7ff fc8f 	bl	253e4 <z_spin_lock_set_owner>
   25ac6:	46bb      	mov	fp, r7
   25ac8:	6034      	str	r4, [r6, #0]
   25aca:	e9d7 3400 	ldrd	r3, r4, [r7]
   25ace:	f8da 8000 	ldr.w	r8, [sl]
   25ad2:	f8d6 c000 	ldr.w	ip, [r6]
   25ad6:	e9cd 3400 	strd	r3, r4, [sp]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25ada:	45d0      	cmp	r8, sl
   25adc:	4664      	mov	r4, ip
   25ade:	ea4f 75e4 	mov.w	r5, r4, asr #31
   25ae2:	d00e      	beq.n	25b02 <z_clock_announce+0x7e>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   25ae4:	f1b8 0f00 	cmp.w	r8, #0
   25ae8:	d00b      	beq.n	25b02 <z_clock_announce+0x7e>
   25aea:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
   25aee:	458c      	cmp	ip, r1
   25af0:	eb75 0302 	sbcs.w	r3, r5, r2
   25af4:	da28      	bge.n	25b48 <z_clock_announce+0xc4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   25af6:	ebb1 000c 	subs.w	r0, r1, ip
   25afa:	eb62 0105 	sbc.w	r1, r2, r5
   25afe:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
   25b02:	9b00      	ldr	r3, [sp, #0]
   25b04:	18e2      	adds	r2, r4, r3
   25b06:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   25b08:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   25b0c:	eb45 0303 	adc.w	r3, r5, r3
   25b10:	e9cb 2300 	strd	r2, r3, [fp]
	announce_remaining = 0;
   25b14:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   25b16:	f7ff fdb5 	bl	25684 <next_timeout>
   25b1a:	4621      	mov	r1, r4
   25b1c:	f7e1 fc96 	bl	744c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b20:	482a      	ldr	r0, [pc, #168]	; (25bcc <z_clock_announce+0x148>)
   25b22:	f7ff fc4f 	bl	253c4 <z_spin_unlock_valid>
   25b26:	b940      	cbnz	r0, 25b3a <z_clock_announce+0xb6>
   25b28:	4929      	ldr	r1, [pc, #164]	; (25bd0 <z_clock_announce+0x14c>)
   25b2a:	482a      	ldr	r0, [pc, #168]	; (25bd4 <z_clock_announce+0x150>)
   25b2c:	22a7      	movs	r2, #167	; 0xa7
   25b2e:	f001 fed0 	bl	278d2 <printk>
   25b32:	21a7      	movs	r1, #167	; 0xa7
   25b34:	4826      	ldr	r0, [pc, #152]	; (25bd0 <z_clock_announce+0x14c>)
   25b36:	f002 f945 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   25b3a:	f389 8811 	msr	BASEPRI, r9
   25b3e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   25b42:	b003      	add	sp, #12
   25b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   25b48:	e9dd 4500 	ldrd	r4, r5, [sp]
		announce_remaining -= dt;
   25b4c:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   25b50:	1864      	adds	r4, r4, r1
		t->dticks = 0;
   25b52:	f04f 0200 	mov.w	r2, #0
   25b56:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   25b5a:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
   25b5e:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
   25b60:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
   25b64:	4640      	mov	r0, r8
		curr_tick += dt;
   25b66:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
   25b6a:	f7ff fd71 	bl	25650 <remove_timeout>
   25b6e:	4817      	ldr	r0, [pc, #92]	; (25bcc <z_clock_announce+0x148>)
   25b70:	f7ff fc28 	bl	253c4 <z_spin_unlock_valid>
   25b74:	b940      	cbnz	r0, 25b88 <z_clock_announce+0x104>
   25b76:	4916      	ldr	r1, [pc, #88]	; (25bd0 <z_clock_announce+0x14c>)
   25b78:	4816      	ldr	r0, [pc, #88]	; (25bd4 <z_clock_announce+0x150>)
   25b7a:	22a7      	movs	r2, #167	; 0xa7
   25b7c:	f001 fea9 	bl	278d2 <printk>
   25b80:	21a7      	movs	r1, #167	; 0xa7
   25b82:	4813      	ldr	r0, [pc, #76]	; (25bd0 <z_clock_announce+0x14c>)
   25b84:	f002 f91e 	bl	27dc4 <assert_post_action>
   25b88:	f389 8811 	msr	BASEPRI, r9
   25b8c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   25b90:	f8d8 3008 	ldr.w	r3, [r8, #8]
   25b94:	4640      	mov	r0, r8
   25b96:	4798      	blx	r3
	__asm__ volatile(
   25b98:	f04f 0320 	mov.w	r3, #32
   25b9c:	f3ef 8911 	mrs	r9, BASEPRI
   25ba0:	f383 8811 	msr	BASEPRI, r3
   25ba4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25ba8:	4808      	ldr	r0, [pc, #32]	; (25bcc <z_clock_announce+0x148>)
   25baa:	f7ff fbfd 	bl	253a8 <z_spin_lock_valid>
   25bae:	b940      	cbnz	r0, 25bc2 <z_clock_announce+0x13e>
   25bb0:	4907      	ldr	r1, [pc, #28]	; (25bd0 <z_clock_announce+0x14c>)
   25bb2:	4808      	ldr	r0, [pc, #32]	; (25bd4 <z_clock_announce+0x150>)
   25bb4:	227c      	movs	r2, #124	; 0x7c
   25bb6:	f001 fe8c 	bl	278d2 <printk>
   25bba:	217c      	movs	r1, #124	; 0x7c
   25bbc:	4804      	ldr	r0, [pc, #16]	; (25bd0 <z_clock_announce+0x14c>)
   25bbe:	f002 f901 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   25bc2:	4802      	ldr	r0, [pc, #8]	; (25bcc <z_clock_announce+0x148>)
   25bc4:	f7ff fc0e 	bl	253e4 <z_spin_lock_set_owner>
	return k;
   25bc8:	e77f      	b.n	25aca <z_clock_announce+0x46>
   25bca:	bf00      	nop
   25bcc:	200054e0 	.word	0x200054e0
   25bd0:	00030779 	.word	0x00030779
   25bd4:	0003067f 	.word	0x0003067f
   25bd8:	200054dc 	.word	0x200054dc
   25bdc:	200030d8 	.word	0x200030d8
   25be0:	200019b8 	.word	0x200019b8

00025be4 <z_tick_get>:

int64_t z_tick_get(void)
{
   25be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25be8:	f04f 0320 	mov.w	r3, #32
   25bec:	f3ef 8611 	mrs	r6, BASEPRI
   25bf0:	f383 8811 	msr	BASEPRI, r3
   25bf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25bf8:	4816      	ldr	r0, [pc, #88]	; (25c54 <z_tick_get+0x70>)
   25bfa:	f7ff fbd5 	bl	253a8 <z_spin_lock_valid>
   25bfe:	b940      	cbnz	r0, 25c12 <z_tick_get+0x2e>
   25c00:	4915      	ldr	r1, [pc, #84]	; (25c58 <z_tick_get+0x74>)
   25c02:	4816      	ldr	r0, [pc, #88]	; (25c5c <z_tick_get+0x78>)
   25c04:	227c      	movs	r2, #124	; 0x7c
   25c06:	f001 fe64 	bl	278d2 <printk>
   25c0a:	217c      	movs	r1, #124	; 0x7c
   25c0c:	4812      	ldr	r0, [pc, #72]	; (25c58 <z_tick_get+0x74>)
   25c0e:	f002 f8d9 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   25c12:	4810      	ldr	r0, [pc, #64]	; (25c54 <z_tick_get+0x70>)
   25c14:	f7ff fbe6 	bl	253e4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   25c18:	f7e1 fc4a 	bl	74b0 <z_clock_elapsed>
   25c1c:	4b10      	ldr	r3, [pc, #64]	; (25c60 <z_tick_get+0x7c>)
   25c1e:	e9d3 4500 	ldrd	r4, r5, [r3]
   25c22:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c24:	480b      	ldr	r0, [pc, #44]	; (25c54 <z_tick_get+0x70>)
   25c26:	f145 0800 	adc.w	r8, r5, #0
   25c2a:	f7ff fbcb 	bl	253c4 <z_spin_unlock_valid>
   25c2e:	b940      	cbnz	r0, 25c42 <z_tick_get+0x5e>
   25c30:	4909      	ldr	r1, [pc, #36]	; (25c58 <z_tick_get+0x74>)
   25c32:	480a      	ldr	r0, [pc, #40]	; (25c5c <z_tick_get+0x78>)
   25c34:	22a7      	movs	r2, #167	; 0xa7
   25c36:	f001 fe4c 	bl	278d2 <printk>
   25c3a:	21a7      	movs	r1, #167	; 0xa7
   25c3c:	4806      	ldr	r0, [pc, #24]	; (25c58 <z_tick_get+0x74>)
   25c3e:	f002 f8c1 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   25c42:	f386 8811 	msr	BASEPRI, r6
   25c46:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   25c4a:	4638      	mov	r0, r7
   25c4c:	4641      	mov	r1, r8
   25c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25c52:	bf00      	nop
   25c54:	200054e0 	.word	0x200054e0
   25c58:	00030779 	.word	0x00030779
   25c5c:	0003067f 	.word	0x0003067f
   25c60:	200030d8 	.word	0x200030d8

00025c64 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   25c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25c68:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   25c6a:	4d3d      	ldr	r5, [pc, #244]	; (25d60 <clear_event_registrations+0xfc>)
   25c6c:	4e3d      	ldr	r6, [pc, #244]	; (25d64 <clear_event_registrations+0x100>)
   25c6e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 25d6c <clear_event_registrations+0x108>
{
   25c72:	4681      	mov	r9, r0
   25c74:	4617      	mov	r7, r2
	while (num_events--) {
   25c76:	fb04 0401 	mla	r4, r4, r1, r0
   25c7a:	454c      	cmp	r4, r9
   25c7c:	d101      	bne.n	25c82 <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   25c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   25c82:	2300      	movs	r3, #0
   25c84:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   25c88:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   25c8c:	f003 030f 	and.w	r3, r3, #15
   25c90:	2b04      	cmp	r3, #4
   25c92:	d831      	bhi.n	25cf8 <clear_event_registrations+0x94>
   25c94:	e8df f003 	tbb	[pc, r3]
   25c98:	30032539 	.word	0x30032539
   25c9c:	1a          	.byte	0x1a
   25c9d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   25c9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25ca2:	b943      	cbnz	r3, 25cb6 <clear_event_registrations+0x52>
   25ca4:	4629      	mov	r1, r5
   25ca6:	229d      	movs	r2, #157	; 0x9d
   25ca8:	4630      	mov	r0, r6
   25caa:	f001 fe12 	bl	278d2 <printk>
   25cae:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   25cb0:	4628      	mov	r0, r5
   25cb2:	f002 f887 	bl	27dc4 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   25cb6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   25cba:	b333      	cbz	r3, 25d0a <clear_event_registrations+0xa6>
	node->prev->next = node->next;
   25cbc:	f854 2c10 	ldr.w	r2, [r4, #-16]
   25cc0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   25cc2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25cc4:	2300      	movs	r3, #0
	node->prev = NULL;
   25cc6:	e944 3305 	strd	r3, r3, [r4, #-20]
   25cca:	e01e      	b.n	25d0a <clear_event_registrations+0xa6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   25ccc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25cd0:	2b00      	cmp	r3, #0
   25cd2:	d1f0      	bne.n	25cb6 <clear_event_registrations+0x52>
   25cd4:	4629      	mov	r1, r5
   25cd6:	22a1      	movs	r2, #161	; 0xa1
   25cd8:	4630      	mov	r0, r6
   25cda:	f001 fdfa 	bl	278d2 <printk>
   25cde:	21a1      	movs	r1, #161	; 0xa1
   25ce0:	e7e6      	b.n	25cb0 <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   25ce2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25ce6:	2b00      	cmp	r3, #0
   25ce8:	d1e5      	bne.n	25cb6 <clear_event_registrations+0x52>
   25cea:	4629      	mov	r1, r5
   25cec:	22a5      	movs	r2, #165	; 0xa5
   25cee:	4630      	mov	r0, r6
   25cf0:	f001 fdef 	bl	278d2 <printk>
   25cf4:	21a5      	movs	r1, #165	; 0xa5
   25cf6:	e7db      	b.n	25cb0 <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   25cf8:	4629      	mov	r1, r5
   25cfa:	4630      	mov	r0, r6
   25cfc:	22ac      	movs	r2, #172	; 0xac
   25cfe:	f001 fde8 	bl	278d2 <printk>
   25d02:	21ac      	movs	r1, #172	; 0xac
   25d04:	4628      	mov	r0, r5
   25d06:	f002 f85d 	bl	27dc4 <assert_post_action>
   25d0a:	4640      	mov	r0, r8
   25d0c:	f7ff fb5a 	bl	253c4 <z_spin_unlock_valid>
   25d10:	b940      	cbnz	r0, 25d24 <clear_event_registrations+0xc0>
   25d12:	4915      	ldr	r1, [pc, #84]	; (25d68 <clear_event_registrations+0x104>)
   25d14:	4630      	mov	r0, r6
   25d16:	22a7      	movs	r2, #167	; 0xa7
   25d18:	f001 fddb 	bl	278d2 <printk>
   25d1c:	21a7      	movs	r1, #167	; 0xa7
   25d1e:	4812      	ldr	r0, [pc, #72]	; (25d68 <clear_event_registrations+0x104>)
   25d20:	f002 f850 	bl	27dc4 <assert_post_action>
   25d24:	f387 8811 	msr	BASEPRI, r7
   25d28:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   25d2c:	f04f 0320 	mov.w	r3, #32
   25d30:	f3ef 8711 	mrs	r7, BASEPRI
   25d34:	f383 8811 	msr	BASEPRI, r3
   25d38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25d3c:	4640      	mov	r0, r8
   25d3e:	f7ff fb33 	bl	253a8 <z_spin_lock_valid>
   25d42:	b940      	cbnz	r0, 25d56 <clear_event_registrations+0xf2>
   25d44:	4908      	ldr	r1, [pc, #32]	; (25d68 <clear_event_registrations+0x104>)
   25d46:	4630      	mov	r0, r6
   25d48:	227c      	movs	r2, #124	; 0x7c
   25d4a:	f001 fdc2 	bl	278d2 <printk>
   25d4e:	217c      	movs	r1, #124	; 0x7c
   25d50:	4805      	ldr	r0, [pc, #20]	; (25d68 <clear_event_registrations+0x104>)
   25d52:	f002 f837 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   25d56:	4640      	mov	r0, r8
   25d58:	f7ff fb44 	bl	253e4 <z_spin_lock_set_owner>
	return k;
   25d5c:	3c14      	subs	r4, #20
   25d5e:	e78c      	b.n	25c7a <clear_event_registrations+0x16>
   25d60:	00036d42 	.word	0x00036d42
   25d64:	0003067f 	.word	0x0003067f
   25d68:	00030779 	.word	0x00030779
   25d6c:	200054e4 	.word	0x200054e4

00025d70 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   25d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   25d74:	6884      	ldr	r4, [r0, #8]
{
   25d76:	4605      	mov	r5, r0
   25d78:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   25d7a:	b1b4      	cbz	r4, 25daa <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   25d7c:	7863      	ldrb	r3, [r4, #1]
   25d7e:	2b01      	cmp	r3, #1
   25d80:	d147      	bne.n	25e12 <signal_poll_event+0xa2>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   25d82:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   25d86:	d10a      	bne.n	25d9e <signal_poll_event+0x2e>
   25d88:	22e3      	movs	r2, #227	; 0xe3
   25d8a:	492e      	ldr	r1, [pc, #184]	; (25e44 <signal_poll_event+0xd4>)
   25d8c:	482e      	ldr	r0, [pc, #184]	; (25e48 <signal_poll_event+0xd8>)
   25d8e:	f001 fda0 	bl	278d2 <printk>
   25d92:	21e3      	movs	r1, #227	; 0xe3
   25d94:	482b      	ldr	r0, [pc, #172]	; (25e44 <signal_poll_event+0xd4>)
   25d96:	f002 f815 	bl	27dc4 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   25d9a:	7b7b      	ldrb	r3, [r7, #13]
   25d9c:	deff      	udf	#255	; 0xff
   25d9e:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   25da2:	f013 0302 	ands.w	r3, r3, #2
   25da6:	d10a      	bne.n	25dbe <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   25da8:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   25daa:	68eb      	ldr	r3, [r5, #12]
   25dac:	f3c3 3204 	ubfx	r2, r3, #12, #5
   25db0:	4316      	orrs	r6, r2
	event->poller = NULL;
   25db2:	2000      	movs	r0, #0
	event->state |= state;
   25db4:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   25db8:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   25dba:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   25dbc:	e00d      	b.n	25dda <signal_poll_event+0x6a>
	if (z_is_thread_timeout_expired(thread)) {
   25dbe:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   25dc2:	f04f 31ff 	mov.w	r1, #4294967295
   25dc6:	f06f 0001 	mvn.w	r0, #1
   25dca:	428b      	cmp	r3, r1
   25dcc:	bf08      	it	eq
   25dce:	4282      	cmpeq	r2, r0
   25dd0:	d105      	bne.n	25dde <signal_poll_event+0x6e>
		poller->is_polling = false;
   25dd2:	2300      	movs	r3, #0
   25dd4:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   25dd6:	f06f 000a 	mvn.w	r0, #10
}
   25dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   25dde:	4638      	mov	r0, r7
   25de0:	f7fe f9ec 	bl	241bc <z_unpend_thread>
	arch_thread_return_value_set(thread,
   25de4:	2e08      	cmp	r6, #8
   25de6:	bf0c      	ite	eq
   25de8:	f06f 0303 	mvneq.w	r3, #3
   25dec:	2300      	movne	r3, #0
   25dee:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25df0:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   25df4:	06db      	lsls	r3, r3, #27
   25df6:	d104      	bne.n	25e02 <signal_poll_event+0x92>
	if (!z_is_thread_ready(thread)) {
   25df8:	f854 8c54 	ldr.w	r8, [r4, #-84]
   25dfc:	f1b8 0f00 	cmp.w	r8, #0
   25e00:	d001      	beq.n	25e06 <signal_poll_event+0x96>
		poller->is_polling = false;
   25e02:	2300      	movs	r3, #0
   25e04:	e7d0      	b.n	25da8 <signal_poll_event+0x38>
	z_ready_thread(thread);
   25e06:	4638      	mov	r0, r7
   25e08:	f7fe faf0 	bl	243ec <z_ready_thread>
		poller->is_polling = false;
   25e0c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   25e10:	e7cb      	b.n	25daa <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   25e12:	2b02      	cmp	r3, #2
   25e14:	d1f5      	bne.n	25e02 <signal_poll_event+0x92>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   25e16:	7823      	ldrb	r3, [r4, #0]
   25e18:	2b00      	cmp	r3, #0
   25e1a:	d0c6      	beq.n	25daa <signal_poll_event+0x3a>
   25e1c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   25e20:	b177      	cbz	r7, 25e40 <signal_poll_event+0xd0>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   25e22:	f1a4 0910 	sub.w	r9, r4, #16
   25e26:	f104 0010 	add.w	r0, r4, #16
		twork->poll_result = 0;
   25e2a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   25e2e:	f7ff fd3f 	bl	258b0 <z_abort_timeout>
		twork->poll_result = 0;
   25e32:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   25e36:	4649      	mov	r1, r9
   25e38:	4638      	mov	r0, r7
   25e3a:	f008 f9c1 	bl	2e1c0 <k_work_submit_to_queue>
   25e3e:	e7e5      	b.n	25e0c <signal_poll_event+0x9c>
		poller->is_polling = false;
   25e40:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   25e42:	e7b2      	b.n	25daa <signal_poll_event+0x3a>
   25e44:	00036d42 	.word	0x00036d42
   25e48:	0003067f 	.word	0x0003067f

00025e4c <register_events>:
{
   25e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   25e50:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25e52:	f8df 919c 	ldr.w	r9, [pc, #412]	; 25ff0 <register_events+0x1a4>
   25e56:	4f63      	ldr	r7, [pc, #396]	; (25fe4 <register_events+0x198>)
   25e58:	4c63      	ldr	r4, [pc, #396]	; (25fe8 <register_events+0x19c>)
{
   25e5a:	9100      	str	r1, [sp, #0]
   25e5c:	4615      	mov	r5, r2
   25e5e:	9301      	str	r3, [sp, #4]
   25e60:	4682      	mov	sl, r0
	int events_registered = 0;
   25e62:	46b0      	mov	r8, r6
	for (int ii = 0; ii < num_events; ii++) {
   25e64:	9b00      	ldr	r3, [sp, #0]
   25e66:	429e      	cmp	r6, r3
   25e68:	db03      	blt.n	25e72 <register_events+0x26>
}
   25e6a:	4640      	mov	r0, r8
   25e6c:	b003      	add	sp, #12
   25e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e72:	f04f 0220 	mov.w	r2, #32
   25e76:	f3ef 8b11 	mrs	fp, BASEPRI
   25e7a:	f382 8811 	msr	BASEPRI, r2
   25e7e:	f3bf 8f6f 	isb	sy
   25e82:	4648      	mov	r0, r9
   25e84:	f7ff fa90 	bl	253a8 <z_spin_lock_valid>
   25e88:	b940      	cbnz	r0, 25e9c <register_events+0x50>
   25e8a:	4639      	mov	r1, r7
   25e8c:	4620      	mov	r0, r4
   25e8e:	227c      	movs	r2, #124	; 0x7c
   25e90:	f001 fd1f 	bl	278d2 <printk>
   25e94:	217c      	movs	r1, #124	; 0x7c
   25e96:	4638      	mov	r0, r7
   25e98:	f001 ff94 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   25e9c:	4648      	mov	r0, r9
   25e9e:	f7ff faa1 	bl	253e4 <z_spin_lock_set_owner>
	switch (event->type) {
   25ea2:	f89a 200d 	ldrb.w	r2, [sl, #13]
   25ea6:	f002 020f 	and.w	r2, r2, #15
   25eaa:	2a04      	cmp	r2, #4
   25eac:	d848      	bhi.n	25f40 <register_events+0xf4>
   25eae:	e8df f002 	tbb	[pc, r2]
   25eb2:	402f      	.short	0x402f
   25eb4:	4703      	.short	0x4703
   25eb6:	2b          	.byte	0x2b
   25eb7:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   25eb8:	f8da 2010 	ldr.w	r2, [sl, #16]
   25ebc:	6892      	ldr	r2, [r2, #8]
   25ebe:	b33a      	cbz	r2, 25f10 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   25ec0:	2102      	movs	r1, #2
	event->state |= state;
   25ec2:	f8da 200c 	ldr.w	r2, [sl, #12]
   25ec6:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   25eca:	ea41 010c 	orr.w	r1, r1, ip
	event->poller = NULL;
   25ece:	2000      	movs	r0, #0
	event->state |= state;
   25ed0:	f361 3210 	bfi	r2, r1, #12, #5
	event->poller = NULL;
   25ed4:	f8ca 0008 	str.w	r0, [sl, #8]
	event->state |= state;
   25ed8:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   25edc:	7028      	strb	r0, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ede:	4648      	mov	r0, r9
   25ee0:	f7ff fa70 	bl	253c4 <z_spin_unlock_valid>
   25ee4:	b940      	cbnz	r0, 25ef8 <register_events+0xac>
   25ee6:	4639      	mov	r1, r7
   25ee8:	4620      	mov	r0, r4
   25eea:	22a7      	movs	r2, #167	; 0xa7
   25eec:	f001 fcf1 	bl	278d2 <printk>
   25ef0:	21a7      	movs	r1, #167	; 0xa7
   25ef2:	4638      	mov	r0, r7
   25ef4:	f001 ff66 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   25ef8:	f38b 8811 	msr	BASEPRI, fp
   25efc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   25f00:	3601      	adds	r6, #1
   25f02:	f10a 0a14 	add.w	sl, sl, #20
   25f06:	e7ad      	b.n	25e64 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   25f08:	f8da 2010 	ldr.w	r2, [sl, #16]
   25f0c:	6812      	ldr	r2, [r2, #0]
   25f0e:	bb0a      	cbnz	r2, 25f54 <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   25f10:	9b01      	ldr	r3, [sp, #4]
   25f12:	2b00      	cmp	r3, #0
   25f14:	d1e3      	bne.n	25ede <register_events+0x92>
   25f16:	782a      	ldrb	r2, [r5, #0]
   25f18:	2a00      	cmp	r2, #0
   25f1a:	d0e0      	beq.n	25ede <register_events+0x92>
	switch (event->type) {
   25f1c:	f89a 200d 	ldrb.w	r2, [sl, #13]
   25f20:	f002 020f 	and.w	r2, r2, #15
   25f24:	2a04      	cmp	r2, #4
   25f26:	d852      	bhi.n	25fce <register_events+0x182>
   25f28:	e8df f002 	tbb	[pc, r2]
   25f2c:	51164029 	.word	0x51164029
   25f30:	2e          	.byte	0x2e
   25f31:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   25f32:	f8da 2010 	ldr.w	r2, [sl, #16]
   25f36:	6892      	ldr	r2, [r2, #8]
   25f38:	2a00      	cmp	r2, #0
   25f3a:	d0e9      	beq.n	25f10 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   25f3c:	2101      	movs	r1, #1
   25f3e:	e7c0      	b.n	25ec2 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   25f40:	4620      	mov	r0, r4
   25f42:	2254      	movs	r2, #84	; 0x54
   25f44:	4929      	ldr	r1, [pc, #164]	; (25fec <register_events+0x1a0>)
   25f46:	f001 fcc4 	bl	278d2 <printk>
   25f4a:	2154      	movs	r1, #84	; 0x54
   25f4c:	4827      	ldr	r0, [pc, #156]	; (25fec <register_events+0x1a0>)
   25f4e:	f001 ff39 	bl	27dc4 <assert_post_action>
		break;
   25f52:	e7dd      	b.n	25f10 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   25f54:	2104      	movs	r1, #4
   25f56:	e7b4      	b.n	25ec2 <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   25f58:	f8da 2010 	ldr.w	r2, [sl, #16]
   25f5c:	b942      	cbnz	r2, 25f70 <register_events+0x124>
   25f5e:	4923      	ldr	r1, [pc, #140]	; (25fec <register_events+0x1a0>)
   25f60:	4620      	mov	r0, r4
   25f62:	227e      	movs	r2, #126	; 0x7e
   25f64:	f001 fcb5 	bl	278d2 <printk>
   25f68:	217e      	movs	r1, #126	; 0x7e
   25f6a:	4820      	ldr	r0, [pc, #128]	; (25fec <register_events+0x1a0>)
   25f6c:	f001 ff2a 	bl	27dc4 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   25f70:	f8da 0010 	ldr.w	r0, [sl, #16]
   25f74:	462a      	mov	r2, r5
   25f76:	4651      	mov	r1, sl
   25f78:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   25f7a:	f008 f939 	bl	2e1f0 <add_event>
	event->poller = poller;
   25f7e:	f8ca 5008 	str.w	r5, [sl, #8]
			events_registered += 1;
   25f82:	f108 0801 	add.w	r8, r8, #1
   25f86:	e7aa      	b.n	25ede <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   25f88:	f8da 2010 	ldr.w	r2, [sl, #16]
   25f8c:	b942      	cbnz	r2, 25fa0 <register_events+0x154>
   25f8e:	4917      	ldr	r1, [pc, #92]	; (25fec <register_events+0x1a0>)
   25f90:	4620      	mov	r0, r4
   25f92:	2282      	movs	r2, #130	; 0x82
   25f94:	f001 fc9d 	bl	278d2 <printk>
   25f98:	2182      	movs	r1, #130	; 0x82
   25f9a:	4814      	ldr	r0, [pc, #80]	; (25fec <register_events+0x1a0>)
   25f9c:	f001 ff12 	bl	27dc4 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   25fa0:	f8da 0010 	ldr.w	r0, [sl, #16]
   25fa4:	462a      	mov	r2, r5
   25fa6:	4651      	mov	r1, sl
   25fa8:	3014      	adds	r0, #20
   25faa:	e7e6      	b.n	25f7a <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   25fac:	f8da 2010 	ldr.w	r2, [sl, #16]
   25fb0:	b942      	cbnz	r2, 25fc4 <register_events+0x178>
   25fb2:	490e      	ldr	r1, [pc, #56]	; (25fec <register_events+0x1a0>)
   25fb4:	4620      	mov	r0, r4
   25fb6:	2286      	movs	r2, #134	; 0x86
   25fb8:	f001 fc8b 	bl	278d2 <printk>
   25fbc:	2186      	movs	r1, #134	; 0x86
   25fbe:	480b      	ldr	r0, [pc, #44]	; (25fec <register_events+0x1a0>)
   25fc0:	f001 ff00 	bl	27dc4 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   25fc4:	462a      	mov	r2, r5
   25fc6:	4651      	mov	r1, sl
   25fc8:	f8da 0010 	ldr.w	r0, [sl, #16]
   25fcc:	e7d5      	b.n	25f7a <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   25fce:	4620      	mov	r0, r4
   25fd0:	228d      	movs	r2, #141	; 0x8d
   25fd2:	4906      	ldr	r1, [pc, #24]	; (25fec <register_events+0x1a0>)
   25fd4:	f001 fc7d 	bl	278d2 <printk>
   25fd8:	218d      	movs	r1, #141	; 0x8d
   25fda:	4804      	ldr	r0, [pc, #16]	; (25fec <register_events+0x1a0>)
   25fdc:	f001 fef2 	bl	27dc4 <assert_post_action>
		break;
   25fe0:	e7cd      	b.n	25f7e <register_events+0x132>
   25fe2:	bf00      	nop
   25fe4:	00030779 	.word	0x00030779
   25fe8:	0003067f 	.word	0x0003067f
   25fec:	00036d42 	.word	0x00036d42
   25ff0:	200054e4 	.word	0x200054e4

00025ff4 <k_poll_event_init>:
{
   25ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25ff6:	4604      	mov	r4, r0
   25ff8:	460f      	mov	r7, r1
   25ffa:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   25ffc:	4616      	mov	r6, r2
   25ffe:	b142      	cbz	r2, 26012 <k_poll_event_init+0x1e>
   26000:	4916      	ldr	r1, [pc, #88]	; (2605c <k_poll_event_init+0x68>)
   26002:	4817      	ldr	r0, [pc, #92]	; (26060 <k_poll_event_init+0x6c>)
   26004:	222e      	movs	r2, #46	; 0x2e
   26006:	f001 fc64 	bl	278d2 <printk>
   2600a:	212e      	movs	r1, #46	; 0x2e
   2600c:	4813      	ldr	r0, [pc, #76]	; (2605c <k_poll_event_init+0x68>)
   2600e:	f001 fed9 	bl	27dc4 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   26012:	2f0f      	cmp	r7, #15
   26014:	d908      	bls.n	26028 <k_poll_event_init+0x34>
   26016:	4911      	ldr	r1, [pc, #68]	; (2605c <k_poll_event_init+0x68>)
   26018:	4811      	ldr	r0, [pc, #68]	; (26060 <k_poll_event_init+0x6c>)
   2601a:	222f      	movs	r2, #47	; 0x2f
   2601c:	f001 fc59 	bl	278d2 <printk>
   26020:	212f      	movs	r1, #47	; 0x2f
   26022:	480e      	ldr	r0, [pc, #56]	; (2605c <k_poll_event_init+0x68>)
   26024:	f001 fece 	bl	27dc4 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   26028:	b945      	cbnz	r5, 2603c <k_poll_event_init+0x48>
   2602a:	490c      	ldr	r1, [pc, #48]	; (2605c <k_poll_event_init+0x68>)
   2602c:	480c      	ldr	r0, [pc, #48]	; (26060 <k_poll_event_init+0x6c>)
   2602e:	2230      	movs	r2, #48	; 0x30
   26030:	f001 fc4f 	bl	278d2 <printk>
   26034:	2130      	movs	r1, #48	; 0x30
   26036:	4809      	ldr	r0, [pc, #36]	; (2605c <k_poll_event_init+0x68>)
   26038:	f001 fec4 	bl	27dc4 <assert_post_action>
	event->type = type;
   2603c:	7b63      	ldrb	r3, [r4, #13]
   2603e:	f367 0303 	bfi	r3, r7, #0, #4
   26042:	7363      	strb	r3, [r4, #13]
	event->mode = mode;
   26044:	7ba3      	ldrb	r3, [r4, #14]
   26046:	f366 0341 	bfi	r3, r6, #1, #1
   2604a:	73a3      	strb	r3, [r4, #14]
	event->poller = NULL;
   2604c:	2300      	movs	r3, #0
	event->state = K_POLL_STATE_NOT_READY;
   2604e:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   26050:	60a3      	str	r3, [r4, #8]
	event->state = K_POLL_STATE_NOT_READY;
   26052:	4b04      	ldr	r3, [pc, #16]	; (26064 <k_poll_event_init+0x70>)
   26054:	4013      	ands	r3, r2
	event->obj = obj;
   26056:	e9c4 3503 	strd	r3, r5, [r4, #12]
}
   2605a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2605c:	00036d42 	.word	0x00036d42
   26060:	0003067f 	.word	0x0003067f
   26064:	00020fff 	.word	0x00020fff

00026068 <z_impl_k_poll>:
{
   26068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2606c:	4699      	mov	r9, r3
	struct z_poller *poller = &_current->poller;
   2606e:	4b64      	ldr	r3, [pc, #400]	; (26200 <z_impl_k_poll+0x198>)
   26070:	689c      	ldr	r4, [r3, #8]
	poller->is_polling = true;
   26072:	2301      	movs	r3, #1
{
   26074:	b085      	sub	sp, #20
   26076:	4605      	mov	r5, r0
   26078:	460e      	mov	r6, r1
   2607a:	4690      	mov	r8, r2
	struct z_poller *poller = &_current->poller;
   2607c:	f104 076c 	add.w	r7, r4, #108	; 0x6c
	poller->is_polling = true;
   26080:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	poller->mode = MODE_POLL;
   26084:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
   26088:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2608c:	b153      	cbz	r3, 260a4 <z_impl_k_poll+0x3c>
   2608e:	495d      	ldr	r1, [pc, #372]	; (26204 <z_impl_k_poll+0x19c>)
   26090:	485d      	ldr	r0, [pc, #372]	; (26208 <z_impl_k_poll+0x1a0>)
   26092:	f44f 7282 	mov.w	r2, #260	; 0x104
   26096:	f001 fc1c 	bl	278d2 <printk>
   2609a:	f44f 7182 	mov.w	r1, #260	; 0x104
   2609e:	4859      	ldr	r0, [pc, #356]	; (26204 <z_impl_k_poll+0x19c>)
   260a0:	f001 fe90 	bl	27dc4 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   260a4:	b955      	cbnz	r5, 260bc <z_impl_k_poll+0x54>
   260a6:	4957      	ldr	r1, [pc, #348]	; (26204 <z_impl_k_poll+0x19c>)
   260a8:	4857      	ldr	r0, [pc, #348]	; (26208 <z_impl_k_poll+0x1a0>)
   260aa:	f240 1205 	movw	r2, #261	; 0x105
   260ae:	f001 fc10 	bl	278d2 <printk>
   260b2:	f240 1105 	movw	r1, #261	; 0x105
   260b6:	4853      	ldr	r0, [pc, #332]	; (26204 <z_impl_k_poll+0x19c>)
   260b8:	f001 fe84 	bl	27dc4 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   260bc:	2e00      	cmp	r6, #0
   260be:	da0a      	bge.n	260d6 <z_impl_k_poll+0x6e>
   260c0:	4950      	ldr	r1, [pc, #320]	; (26204 <z_impl_k_poll+0x19c>)
   260c2:	4851      	ldr	r0, [pc, #324]	; (26208 <z_impl_k_poll+0x1a0>)
   260c4:	f44f 7283 	mov.w	r2, #262	; 0x106
   260c8:	f001 fc03 	bl	278d2 <printk>
   260cc:	f44f 7183 	mov.w	r1, #262	; 0x106
   260d0:	484c      	ldr	r0, [pc, #304]	; (26204 <z_impl_k_poll+0x19c>)
   260d2:	f001 fe77 	bl	27dc4 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   260d6:	ea58 0309 	orrs.w	r3, r8, r9
   260da:	bf0c      	ite	eq
   260dc:	2301      	moveq	r3, #1
   260de:	2300      	movne	r3, #0
   260e0:	463a      	mov	r2, r7
   260e2:	4631      	mov	r1, r6
   260e4:	4628      	mov	r0, r5
   260e6:	f7ff feb1 	bl	25e4c <register_events>
   260ea:	4607      	mov	r7, r0
	__asm__ volatile(
   260ec:	f04f 0320 	mov.w	r3, #32
   260f0:	f3ef 8611 	mrs	r6, BASEPRI
   260f4:	f383 8811 	msr	BASEPRI, r3
   260f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   260fc:	4843      	ldr	r0, [pc, #268]	; (2620c <z_impl_k_poll+0x1a4>)
   260fe:	f7ff f953 	bl	253a8 <z_spin_lock_valid>
   26102:	b940      	cbnz	r0, 26116 <z_impl_k_poll+0xae>
   26104:	4942      	ldr	r1, [pc, #264]	; (26210 <z_impl_k_poll+0x1a8>)
   26106:	4840      	ldr	r0, [pc, #256]	; (26208 <z_impl_k_poll+0x1a0>)
   26108:	227c      	movs	r2, #124	; 0x7c
   2610a:	f001 fbe2 	bl	278d2 <printk>
   2610e:	217c      	movs	r1, #124	; 0x7c
   26110:	483f      	ldr	r0, [pc, #252]	; (26210 <z_impl_k_poll+0x1a8>)
   26112:	f001 fe57 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   26116:	483d      	ldr	r0, [pc, #244]	; (2620c <z_impl_k_poll+0x1a4>)
   26118:	f7ff f964 	bl	253e4 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   2611c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   26120:	b9d3      	cbnz	r3, 26158 <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   26122:	4628      	mov	r0, r5
   26124:	4632      	mov	r2, r6
   26126:	4639      	mov	r1, r7
   26128:	f7ff fd9c 	bl	25c64 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2612c:	4837      	ldr	r0, [pc, #220]	; (2620c <z_impl_k_poll+0x1a4>)
   2612e:	f7ff f949 	bl	253c4 <z_spin_unlock_valid>
   26132:	b940      	cbnz	r0, 26146 <z_impl_k_poll+0xde>
   26134:	4936      	ldr	r1, [pc, #216]	; (26210 <z_impl_k_poll+0x1a8>)
   26136:	4834      	ldr	r0, [pc, #208]	; (26208 <z_impl_k_poll+0x1a0>)
   26138:	22a7      	movs	r2, #167	; 0xa7
   2613a:	f001 fbca 	bl	278d2 <printk>
   2613e:	21a7      	movs	r1, #167	; 0xa7
   26140:	4833      	ldr	r0, [pc, #204]	; (26210 <z_impl_k_poll+0x1a8>)
   26142:	f001 fe3f 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   26146:	f386 8811 	msr	BASEPRI, r6
   2614a:	f3bf 8f6f 	isb	sy
		return 0;
   2614e:	2400      	movs	r4, #0
}
   26150:	4620      	mov	r0, r4
   26152:	b005      	add	sp, #20
   26154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   26158:	2300      	movs	r3, #0
   2615a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2615e:	ea58 0309 	orrs.w	r3, r8, r9
   26162:	d113      	bne.n	2618c <z_impl_k_poll+0x124>
   26164:	4829      	ldr	r0, [pc, #164]	; (2620c <z_impl_k_poll+0x1a4>)
   26166:	f7ff f92d 	bl	253c4 <z_spin_unlock_valid>
   2616a:	b940      	cbnz	r0, 2617e <z_impl_k_poll+0x116>
   2616c:	4928      	ldr	r1, [pc, #160]	; (26210 <z_impl_k_poll+0x1a8>)
   2616e:	4826      	ldr	r0, [pc, #152]	; (26208 <z_impl_k_poll+0x1a0>)
   26170:	22a7      	movs	r2, #167	; 0xa7
   26172:	f001 fbae 	bl	278d2 <printk>
   26176:	21a7      	movs	r1, #167	; 0xa7
   26178:	4825      	ldr	r0, [pc, #148]	; (26210 <z_impl_k_poll+0x1a8>)
   2617a:	f001 fe23 	bl	27dc4 <assert_post_action>
   2617e:	f386 8811 	msr	BASEPRI, r6
   26182:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   26186:	f06f 040a 	mvn.w	r4, #10
   2618a:	e7e1      	b.n	26150 <z_impl_k_poll+0xe8>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2618c:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2618e:	e9cd 8900 	strd	r8, r9, [sp]
   26192:	4631      	mov	r1, r6
   26194:	481d      	ldr	r0, [pc, #116]	; (2620c <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   26196:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2619a:	f7fe fc99 	bl	24ad0 <z_pend_curr>
   2619e:	4604      	mov	r4, r0
	__asm__ volatile(
   261a0:	f04f 0320 	mov.w	r3, #32
   261a4:	f3ef 8611 	mrs	r6, BASEPRI
   261a8:	f383 8811 	msr	BASEPRI, r3
   261ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   261b0:	4816      	ldr	r0, [pc, #88]	; (2620c <z_impl_k_poll+0x1a4>)
   261b2:	f7ff f8f9 	bl	253a8 <z_spin_lock_valid>
   261b6:	b940      	cbnz	r0, 261ca <z_impl_k_poll+0x162>
   261b8:	4915      	ldr	r1, [pc, #84]	; (26210 <z_impl_k_poll+0x1a8>)
   261ba:	4813      	ldr	r0, [pc, #76]	; (26208 <z_impl_k_poll+0x1a0>)
   261bc:	227c      	movs	r2, #124	; 0x7c
   261be:	f001 fb88 	bl	278d2 <printk>
   261c2:	217c      	movs	r1, #124	; 0x7c
   261c4:	4812      	ldr	r0, [pc, #72]	; (26210 <z_impl_k_poll+0x1a8>)
   261c6:	f001 fdfd 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   261ca:	4810      	ldr	r0, [pc, #64]	; (2620c <z_impl_k_poll+0x1a4>)
   261cc:	f7ff f90a 	bl	253e4 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   261d0:	4628      	mov	r0, r5
   261d2:	4632      	mov	r2, r6
   261d4:	4639      	mov	r1, r7
   261d6:	f7ff fd45 	bl	25c64 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   261da:	480c      	ldr	r0, [pc, #48]	; (2620c <z_impl_k_poll+0x1a4>)
   261dc:	f7ff f8f2 	bl	253c4 <z_spin_unlock_valid>
   261e0:	b940      	cbnz	r0, 261f4 <z_impl_k_poll+0x18c>
   261e2:	490b      	ldr	r1, [pc, #44]	; (26210 <z_impl_k_poll+0x1a8>)
   261e4:	4808      	ldr	r0, [pc, #32]	; (26208 <z_impl_k_poll+0x1a0>)
   261e6:	22a7      	movs	r2, #167	; 0xa7
   261e8:	f001 fb73 	bl	278d2 <printk>
   261ec:	21a7      	movs	r1, #167	; 0xa7
   261ee:	4808      	ldr	r0, [pc, #32]	; (26210 <z_impl_k_poll+0x1a8>)
   261f0:	f001 fde8 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   261f4:	f386 8811 	msr	BASEPRI, r6
   261f8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   261fc:	e7a8      	b.n	26150 <z_impl_k_poll+0xe8>
   261fe:	bf00      	nop
   26200:	20005490 	.word	0x20005490
   26204:	00036d42 	.word	0x00036d42
   26208:	0003067f 	.word	0x0003067f
   2620c:	200054e4 	.word	0x200054e4
   26210:	00030779 	.word	0x00030779

00026214 <z_impl_k_poll_signal_raise>:
{
   26214:	b570      	push	{r4, r5, r6, lr}
   26216:	4604      	mov	r4, r0
   26218:	460e      	mov	r6, r1
	__asm__ volatile(
   2621a:	f04f 0320 	mov.w	r3, #32
   2621e:	f3ef 8511 	mrs	r5, BASEPRI
   26222:	f383 8811 	msr	BASEPRI, r3
   26226:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2622a:	481c      	ldr	r0, [pc, #112]	; (2629c <z_impl_k_poll_signal_raise+0x88>)
   2622c:	f7ff f8bc 	bl	253a8 <z_spin_lock_valid>
   26230:	b940      	cbnz	r0, 26244 <z_impl_k_poll_signal_raise+0x30>
   26232:	491b      	ldr	r1, [pc, #108]	; (262a0 <z_impl_k_poll_signal_raise+0x8c>)
   26234:	481b      	ldr	r0, [pc, #108]	; (262a4 <z_impl_k_poll_signal_raise+0x90>)
   26236:	227c      	movs	r2, #124	; 0x7c
   26238:	f001 fb4b 	bl	278d2 <printk>
   2623c:	217c      	movs	r1, #124	; 0x7c
   2623e:	4818      	ldr	r0, [pc, #96]	; (262a0 <z_impl_k_poll_signal_raise+0x8c>)
   26240:	f001 fdc0 	bl	27dc4 <assert_post_action>
	z_spin_lock_set_owner(l);
   26244:	4815      	ldr	r0, [pc, #84]	; (2629c <z_impl_k_poll_signal_raise+0x88>)
   26246:	f7ff f8cd 	bl	253e4 <z_spin_lock_set_owner>
	return list->head == list;
   2624a:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   2624c:	60e6      	str	r6, [r4, #12]
	signal->signaled = 1U;
   2624e:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   26250:	4284      	cmp	r4, r0
   26252:	60a1      	str	r1, [r4, #8]
   26254:	d112      	bne.n	2627c <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26256:	4811      	ldr	r0, [pc, #68]	; (2629c <z_impl_k_poll_signal_raise+0x88>)
   26258:	f7ff f8b4 	bl	253c4 <z_spin_unlock_valid>
   2625c:	b940      	cbnz	r0, 26270 <z_impl_k_poll_signal_raise+0x5c>
   2625e:	4910      	ldr	r1, [pc, #64]	; (262a0 <z_impl_k_poll_signal_raise+0x8c>)
   26260:	4810      	ldr	r0, [pc, #64]	; (262a4 <z_impl_k_poll_signal_raise+0x90>)
   26262:	22a7      	movs	r2, #167	; 0xa7
   26264:	f001 fb35 	bl	278d2 <printk>
   26268:	21a7      	movs	r1, #167	; 0xa7
   2626a:	480d      	ldr	r0, [pc, #52]	; (262a0 <z_impl_k_poll_signal_raise+0x8c>)
   2626c:	f001 fdaa 	bl	27dc4 <assert_post_action>
	__asm__ volatile(
   26270:	f385 8811 	msr	BASEPRI, r5
   26274:	f3bf 8f6f 	isb	sy
		return 0;
   26278:	2400      	movs	r4, #0
   2627a:	e00d      	b.n	26298 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   2627c:	e9d0 3200 	ldrd	r3, r2, [r0]
   26280:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   26282:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26284:	2300      	movs	r3, #0
	node->prev = NULL;
   26286:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2628a:	f7ff fd71 	bl	25d70 <signal_poll_event>
	z_reschedule(&lock, key);
   2628e:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26290:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   26292:	4802      	ldr	r0, [pc, #8]	; (2629c <z_impl_k_poll_signal_raise+0x88>)
   26294:	f7fd fed8 	bl	24048 <z_reschedule>
}
   26298:	4620      	mov	r0, r4
   2629a:	bd70      	pop	{r4, r5, r6, pc}
   2629c:	200054e4 	.word	0x200054e4
   262a0:	00030779 	.word	0x00030779
   262a4:	0003067f 	.word	0x0003067f

000262a8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   262a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   262aa:	4607      	mov	r7, r0
   262ac:	460c      	mov	r4, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   262ae:	f007 fed8 	bl	2e062 <k_is_in_isr>
   262b2:	b110      	cbz	r0, 262ba <z_thread_aligned_alloc+0x12>
	}

	if (heap) {
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   262b4:	2000      	movs	r0, #0
	}

	return ret;
}
   262b6:	b003      	add	sp, #12
   262b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		heap = _current->resource_pool;
   262ba:	4b0f      	ldr	r3, [pc, #60]	; (262f8 <z_thread_aligned_alloc+0x50>)
   262bc:	689b      	ldr	r3, [r3, #8]
   262be:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	if (heap) {
   262c2:	2e00      	cmp	r6, #0
   262c4:	d0f6      	beq.n	262b4 <z_thread_aligned_alloc+0xc>
	size_t excess = MAX(sizeof(struct k_heap *), align);
   262c6:	2f04      	cmp	r7, #4
   262c8:	463d      	mov	r5, r7
   262ca:	bf38      	it	cc
   262cc:	2504      	movcc	r5, #4
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   262ce:	1962      	adds	r2, r4, r5
   262d0:	d2f0      	bcs.n	262b4 <z_thread_aligned_alloc+0xc>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   262d2:	2000      	movs	r0, #0
   262d4:	2100      	movs	r1, #0
   262d6:	e9cd 0100 	strd	r0, r1, [sp]
   262da:	4639      	mov	r1, r7
   262dc:	4630      	mov	r0, r6
   262de:	f7fd f9a7 	bl	23630 <k_heap_aligned_alloc>
	if (mem == NULL) {
   262e2:	4604      	mov	r4, r0
   262e4:	2800      	cmp	r0, #0
   262e6:	d0e5      	beq.n	262b4 <z_thread_aligned_alloc+0xc>
__ssp_bos_icheck3(memset, void *, int)
   262e8:	462a      	mov	r2, r5
   262ea:	21ff      	movs	r1, #255	; 0xff
   262ec:	f008 f818 	bl	2e320 <memset>
	*heap_ref = heap;
   262f0:	6026      	str	r6, [r4, #0]
	return mem + excess;
   262f2:	1960      	adds	r0, r4, r5
	return ret;
   262f4:	e7df      	b.n	262b6 <z_thread_aligned_alloc+0xe>
   262f6:	bf00      	nop
   262f8:	20005490 	.word	0x20005490

000262fc <nrf_cc3xx_platform_init>:
   262fc:	b510      	push	{r4, lr}
   262fe:	4c0c      	ldr	r4, [pc, #48]	; (26330 <nrf_cc3xx_platform_init+0x34>)
   26300:	6823      	ldr	r3, [r4, #0]
   26302:	b113      	cbz	r3, 2630a <nrf_cc3xx_platform_init+0xe>
   26304:	4b0b      	ldr	r3, [pc, #44]	; (26334 <nrf_cc3xx_platform_init+0x38>)
   26306:	681b      	ldr	r3, [r3, #0]
   26308:	b92b      	cbnz	r3, 26316 <nrf_cc3xx_platform_init+0x1a>
   2630a:	f000 f943 	bl	26594 <CC_LibInit>
   2630e:	b930      	cbnz	r0, 2631e <nrf_cc3xx_platform_init+0x22>
   26310:	4b08      	ldr	r3, [pc, #32]	; (26334 <nrf_cc3xx_platform_init+0x38>)
   26312:	2201      	movs	r2, #1
   26314:	601a      	str	r2, [r3, #0]
   26316:	2301      	movs	r3, #1
   26318:	6023      	str	r3, [r4, #0]
   2631a:	2000      	movs	r0, #0
   2631c:	bd10      	pop	{r4, pc}
   2631e:	3801      	subs	r0, #1
   26320:	2806      	cmp	r0, #6
   26322:	d901      	bls.n	26328 <nrf_cc3xx_platform_init+0x2c>
   26324:	4804      	ldr	r0, [pc, #16]	; (26338 <nrf_cc3xx_platform_init+0x3c>)
   26326:	bd10      	pop	{r4, pc}
   26328:	4b04      	ldr	r3, [pc, #16]	; (2633c <nrf_cc3xx_platform_init+0x40>)
   2632a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2632e:	bd10      	pop	{r4, pc}
   26330:	200054e8 	.word	0x200054e8
   26334:	200054ec 	.word	0x200054ec
   26338:	ffff8ffe 	.word	0xffff8ffe
   2633c:	00030170 	.word	0x00030170

00026340 <nrf_cc3xx_platform_abort>:
   26340:	f3bf 8f4f 	dsb	sy
   26344:	4905      	ldr	r1, [pc, #20]	; (2635c <nrf_cc3xx_platform_abort+0x1c>)
   26346:	4b06      	ldr	r3, [pc, #24]	; (26360 <nrf_cc3xx_platform_abort+0x20>)
   26348:	68ca      	ldr	r2, [r1, #12]
   2634a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2634e:	4313      	orrs	r3, r2
   26350:	60cb      	str	r3, [r1, #12]
   26352:	f3bf 8f4f 	dsb	sy
   26356:	bf00      	nop
   26358:	e7fd      	b.n	26356 <nrf_cc3xx_platform_abort+0x16>
   2635a:	bf00      	nop
   2635c:	e000ed00 	.word	0xe000ed00
   26360:	05fa0004 	.word	0x05fa0004

00026364 <CC_PalAbort>:
   26364:	b4f0      	push	{r4, r5, r6, r7}
   26366:	4f09      	ldr	r7, [pc, #36]	; (2638c <CC_PalAbort+0x28>)
   26368:	4e09      	ldr	r6, [pc, #36]	; (26390 <CC_PalAbort+0x2c>)
   2636a:	4c0a      	ldr	r4, [pc, #40]	; (26394 <CC_PalAbort+0x30>)
   2636c:	4a0a      	ldr	r2, [pc, #40]	; (26398 <CC_PalAbort+0x34>)
   2636e:	4d0b      	ldr	r5, [pc, #44]	; (2639c <CC_PalAbort+0x38>)
   26370:	490b      	ldr	r1, [pc, #44]	; (263a0 <CC_PalAbort+0x3c>)
   26372:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   26376:	603b      	str	r3, [r7, #0]
   26378:	6852      	ldr	r2, [r2, #4]
   2637a:	6033      	str	r3, [r6, #0]
   2637c:	6023      	str	r3, [r4, #0]
   2637e:	2400      	movs	r4, #0
   26380:	602b      	str	r3, [r5, #0]
   26382:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   26386:	bcf0      	pop	{r4, r5, r6, r7}
   26388:	4710      	bx	r2
   2638a:	bf00      	nop
   2638c:	5002b400 	.word	0x5002b400
   26390:	5002b404 	.word	0x5002b404
   26394:	5002b408 	.word	0x5002b408
   26398:	200019c0 	.word	0x200019c0
   2639c:	5002b40c 	.word	0x5002b40c
   263a0:	5002a000 	.word	0x5002a000

000263a4 <nrf_cc3xx_platform_set_abort>:
   263a4:	e9d0 1200 	ldrd	r1, r2, [r0]
   263a8:	4b01      	ldr	r3, [pc, #4]	; (263b0 <nrf_cc3xx_platform_set_abort+0xc>)
   263aa:	e9c3 1200 	strd	r1, r2, [r3]
   263ae:	4770      	bx	lr
   263b0:	200019c0 	.word	0x200019c0

000263b4 <nrf_cc3xx_platform_entropy_get>:
   263b4:	2990      	cmp	r1, #144	; 0x90
   263b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   263ba:	460c      	mov	r4, r1
   263bc:	4607      	mov	r7, r0
   263be:	4616      	mov	r6, r2
   263c0:	d917      	bls.n	263f2 <nrf_cc3xx_platform_entropy_get+0x3e>
   263c2:	2500      	movs	r5, #0
   263c4:	e003      	b.n	263ce <nrf_cc3xx_platform_entropy_get+0x1a>
   263c6:	6831      	ldr	r1, [r6, #0]
   263c8:	1a64      	subs	r4, r4, r1
   263ca:	440d      	add	r5, r1
   263cc:	d00e      	beq.n	263ec <nrf_cc3xx_platform_entropy_get+0x38>
   263ce:	2c90      	cmp	r4, #144	; 0x90
   263d0:	4622      	mov	r2, r4
   263d2:	4633      	mov	r3, r6
   263d4:	bf28      	it	cs
   263d6:	2290      	movcs	r2, #144	; 0x90
   263d8:	1979      	adds	r1, r7, r5
   263da:	2000      	movs	r0, #0
   263dc:	f000 fd26 	bl	26e2c <mbedtls_hardware_poll>
   263e0:	2800      	cmp	r0, #0
   263e2:	d0f0      	beq.n	263c6 <nrf_cc3xx_platform_entropy_get+0x12>
   263e4:	2300      	movs	r3, #0
   263e6:	6033      	str	r3, [r6, #0]
   263e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   263ec:	6035      	str	r5, [r6, #0]
   263ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   263f2:	4613      	mov	r3, r2
   263f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   263f8:	460a      	mov	r2, r1
   263fa:	4601      	mov	r1, r0
   263fc:	2000      	movs	r0, #0
   263fe:	f000 bd15 	b.w	26e2c <mbedtls_hardware_poll>
   26402:	bf00      	nop

00026404 <mutex_unlock>:
   26404:	b148      	cbz	r0, 2641a <mutex_unlock+0x16>
   26406:	6843      	ldr	r3, [r0, #4]
   26408:	b12b      	cbz	r3, 26416 <mutex_unlock+0x12>
   2640a:	f3bf 8f5f 	dmb	sy
   2640e:	2300      	movs	r3, #0
   26410:	6003      	str	r3, [r0, #0]
   26412:	4618      	mov	r0, r3
   26414:	4770      	bx	lr
   26416:	4802      	ldr	r0, [pc, #8]	; (26420 <mutex_unlock+0x1c>)
   26418:	4770      	bx	lr
   2641a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   2641e:	4770      	bx	lr
   26420:	ffff8fea 	.word	0xffff8fea

00026424 <mutex_free>:
   26424:	b510      	push	{r4, lr}
   26426:	4604      	mov	r4, r0
   26428:	b128      	cbz	r0, 26436 <mutex_free+0x12>
   2642a:	6863      	ldr	r3, [r4, #4]
   2642c:	b113      	cbz	r3, 26434 <mutex_free+0x10>
   2642e:	2300      	movs	r3, #0
   26430:	6023      	str	r3, [r4, #0]
   26432:	6063      	str	r3, [r4, #4]
   26434:	bd10      	pop	{r4, pc}
   26436:	4b02      	ldr	r3, [pc, #8]	; (26440 <mutex_free+0x1c>)
   26438:	4802      	ldr	r0, [pc, #8]	; (26444 <mutex_free+0x20>)
   2643a:	685b      	ldr	r3, [r3, #4]
   2643c:	4798      	blx	r3
   2643e:	e7f4      	b.n	2642a <mutex_free+0x6>
   26440:	200019c0 	.word	0x200019c0
   26444:	0003018c 	.word	0x0003018c

00026448 <mutex_init>:
   26448:	b510      	push	{r4, lr}
   2644a:	4604      	mov	r4, r0
   2644c:	b130      	cbz	r0, 2645c <mutex_init+0x14>
   2644e:	6863      	ldr	r3, [r4, #4]
   26450:	2200      	movs	r2, #0
   26452:	f043 0301 	orr.w	r3, r3, #1
   26456:	6063      	str	r3, [r4, #4]
   26458:	6022      	str	r2, [r4, #0]
   2645a:	bd10      	pop	{r4, pc}
   2645c:	4801      	ldr	r0, [pc, #4]	; (26464 <mutex_init+0x1c>)
   2645e:	f7ff ff81 	bl	26364 <CC_PalAbort>
   26462:	e7f4      	b.n	2644e <mutex_init+0x6>
   26464:	000301b4 	.word	0x000301b4

00026468 <mutex_lock>:
   26468:	b1a0      	cbz	r0, 26494 <mutex_lock+0x2c>
   2646a:	6843      	ldr	r3, [r0, #4]
   2646c:	b183      	cbz	r3, 26490 <mutex_lock+0x28>
   2646e:	2201      	movs	r2, #1
   26470:	f3bf 8f5b 	dmb	ish
   26474:	e850 3f00 	ldrex	r3, [r0]
   26478:	e840 2100 	strex	r1, r2, [r0]
   2647c:	2900      	cmp	r1, #0
   2647e:	d1f9      	bne.n	26474 <mutex_lock+0xc>
   26480:	f3bf 8f5b 	dmb	ish
   26484:	2b01      	cmp	r3, #1
   26486:	d0f3      	beq.n	26470 <mutex_lock+0x8>
   26488:	f3bf 8f5f 	dmb	sy
   2648c:	2000      	movs	r0, #0
   2648e:	4770      	bx	lr
   26490:	4802      	ldr	r0, [pc, #8]	; (2649c <mutex_lock+0x34>)
   26492:	4770      	bx	lr
   26494:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   26498:	4770      	bx	lr
   2649a:	bf00      	nop
   2649c:	ffff8fea 	.word	0xffff8fea

000264a0 <nrf_cc3xx_platform_set_mutexes>:
   264a0:	b470      	push	{r4, r5, r6}
   264a2:	e9d0 6500 	ldrd	r6, r5, [r0]
   264a6:	e9d0 4202 	ldrd	r4, r2, [r0, #8]
   264aa:	4b09      	ldr	r3, [pc, #36]	; (264d0 <nrf_cc3xx_platform_set_mutexes+0x30>)
   264ac:	e9c3 4202 	strd	r4, r2, [r3, #8]
   264b0:	e9c3 6500 	strd	r6, r5, [r3]
   264b4:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
   264b8:	e9d1 6500 	ldrd	r6, r5, [r1]
   264bc:	4b05      	ldr	r3, [pc, #20]	; (264d4 <nrf_cc3xx_platform_set_mutexes+0x34>)
   264be:	690a      	ldr	r2, [r1, #16]
   264c0:	611a      	str	r2, [r3, #16]
   264c2:	e9c3 6500 	strd	r6, r5, [r3]
   264c6:	e9c3 4002 	strd	r4, r0, [r3, #8]
   264ca:	bc70      	pop	{r4, r5, r6}
   264cc:	4770      	bx	lr
   264ce:	bf00      	nop
   264d0:	200019d0 	.word	0x200019d0
   264d4:	200019e0 	.word	0x200019e0

000264d8 <CC_LibInitRngModule>:
   264d8:	b530      	push	{r4, r5, lr}
   264da:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   264de:	f44f 7208 	mov.w	r2, #544	; 0x220
   264e2:	2100      	movs	r1, #0
   264e4:	a80c      	add	r0, sp, #48	; 0x30
   264e6:	f007 ff1b 	bl	2e320 <memset>
   264ea:	2100      	movs	r1, #0
   264ec:	a802      	add	r0, sp, #8
   264ee:	2228      	movs	r2, #40	; 0x28
   264f0:	9101      	str	r1, [sp, #4]
   264f2:	f007 ff15 	bl	2e320 <memset>
   264f6:	a802      	add	r0, sp, #8
   264f8:	f000 fcee 	bl	26ed8 <RNG_PLAT_SetUserRngParameters>
   264fc:	b120      	cbz	r0, 26508 <CC_LibInitRngModule+0x30>
   264fe:	2405      	movs	r4, #5
   26500:	4620      	mov	r0, r4
   26502:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   26506:	bd30      	pop	{r4, r5, pc}
   26508:	4d1d      	ldr	r5, [pc, #116]	; (26580 <CC_LibInitRngModule+0xa8>)
   2650a:	f04f 31ff 	mov.w	r1, #4294967295
   2650e:	6828      	ldr	r0, [r5, #0]
   26510:	f000 f918 	bl	26744 <CC_PalMutexLock>
   26514:	4604      	mov	r4, r0
   26516:	b9e8      	cbnz	r0, 26554 <CC_LibInitRngModule+0x7c>
   26518:	2000      	movs	r0, #0
   2651a:	f000 f943 	bl	267a4 <CC_PalPowerSaveModeSelect>
   2651e:	bb58      	cbnz	r0, 26578 <CC_LibInitRngModule+0xa0>
   26520:	aa0c      	add	r2, sp, #48	; 0x30
   26522:	a902      	add	r1, sp, #8
   26524:	a801      	add	r0, sp, #4
   26526:	f000 fc73 	bl	26e10 <LLF_RND_RunTrngStartupTest>
   2652a:	4604      	mov	r4, r0
   2652c:	2001      	movs	r0, #1
   2652e:	f000 f939 	bl	267a4 <CC_PalPowerSaveModeSelect>
   26532:	b9e8      	cbnz	r0, 26570 <CC_LibInitRngModule+0x98>
   26534:	6828      	ldr	r0, [r5, #0]
   26536:	f000 f90d 	bl	26754 <CC_PalMutexUnlock>
   2653a:	b928      	cbnz	r0, 26548 <CC_LibInitRngModule+0x70>
   2653c:	2c00      	cmp	r4, #0
   2653e:	d1de      	bne.n	264fe <CC_LibInitRngModule+0x26>
   26540:	4620      	mov	r0, r4
   26542:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   26546:	bd30      	pop	{r4, r5, pc}
   26548:	480e      	ldr	r0, [pc, #56]	; (26584 <CC_LibInitRngModule+0xac>)
   2654a:	f7ff ff0b 	bl	26364 <CC_PalAbort>
   2654e:	2c00      	cmp	r4, #0
   26550:	d0f6      	beq.n	26540 <CC_LibInitRngModule+0x68>
   26552:	e7d4      	b.n	264fe <CC_LibInitRngModule+0x26>
   26554:	480c      	ldr	r0, [pc, #48]	; (26588 <CC_LibInitRngModule+0xb0>)
   26556:	f7ff ff05 	bl	26364 <CC_PalAbort>
   2655a:	2c01      	cmp	r4, #1
   2655c:	d1dc      	bne.n	26518 <CC_LibInitRngModule+0x40>
   2655e:	6828      	ldr	r0, [r5, #0]
   26560:	f000 f8f8 	bl	26754 <CC_PalMutexUnlock>
   26564:	2800      	cmp	r0, #0
   26566:	d0ca      	beq.n	264fe <CC_LibInitRngModule+0x26>
   26568:	4806      	ldr	r0, [pc, #24]	; (26584 <CC_LibInitRngModule+0xac>)
   2656a:	f7ff fefb 	bl	26364 <CC_PalAbort>
   2656e:	e7c6      	b.n	264fe <CC_LibInitRngModule+0x26>
   26570:	4806      	ldr	r0, [pc, #24]	; (2658c <CC_LibInitRngModule+0xb4>)
   26572:	f7ff fef7 	bl	26364 <CC_PalAbort>
   26576:	e7dd      	b.n	26534 <CC_LibInitRngModule+0x5c>
   26578:	4805      	ldr	r0, [pc, #20]	; (26590 <CC_LibInitRngModule+0xb8>)
   2657a:	f7ff fef3 	bl	26364 <CC_PalAbort>
   2657e:	e7cf      	b.n	26520 <CC_LibInitRngModule+0x48>
   26580:	20001a1c 	.word	0x20001a1c
   26584:	000301f0 	.word	0x000301f0
   26588:	000301d8 	.word	0x000301d8
   2658c:	00030228 	.word	0x00030228
   26590:	00030208 	.word	0x00030208

00026594 <CC_LibInit>:
   26594:	b508      	push	{r3, lr}
   26596:	f000 f83d 	bl	26614 <CC_HalInit>
   2659a:	b118      	cbz	r0, 265a4 <CC_LibInit+0x10>
   2659c:	f000 f886 	bl	266ac <CC_PalTerminate>
   265a0:	2003      	movs	r0, #3
   265a2:	bd08      	pop	{r3, pc}
   265a4:	f000 f854 	bl	26650 <CC_PalInit>
   265a8:	b9c0      	cbnz	r0, 265dc <CC_LibInit+0x48>
   265aa:	f000 f8fb 	bl	267a4 <CC_PalPowerSaveModeSelect>
   265ae:	b9b8      	cbnz	r0, 265e0 <CC_LibInit+0x4c>
   265b0:	4b14      	ldr	r3, [pc, #80]	; (26604 <CC_LibInit+0x70>)
   265b2:	681b      	ldr	r3, [r3, #0]
   265b4:	0e1b      	lsrs	r3, r3, #24
   265b6:	2bf0      	cmp	r3, #240	; 0xf0
   265b8:	d10a      	bne.n	265d0 <CC_LibInit+0x3c>
   265ba:	4a13      	ldr	r2, [pc, #76]	; (26608 <CC_LibInit+0x74>)
   265bc:	4b13      	ldr	r3, [pc, #76]	; (2660c <CC_LibInit+0x78>)
   265be:	6812      	ldr	r2, [r2, #0]
   265c0:	429a      	cmp	r2, r3
   265c2:	d017      	beq.n	265f4 <CC_LibInit+0x60>
   265c4:	f000 f828 	bl	26618 <CC_HalTerminate>
   265c8:	f000 f870 	bl	266ac <CC_PalTerminate>
   265cc:	2007      	movs	r0, #7
   265ce:	bd08      	pop	{r3, pc}
   265d0:	f000 f822 	bl	26618 <CC_HalTerminate>
   265d4:	f000 f86a 	bl	266ac <CC_PalTerminate>
   265d8:	2006      	movs	r0, #6
   265da:	bd08      	pop	{r3, pc}
   265dc:	2004      	movs	r0, #4
   265de:	bd08      	pop	{r3, pc}
   265e0:	f000 f81a 	bl	26618 <CC_HalTerminate>
   265e4:	f000 f862 	bl	266ac <CC_PalTerminate>
   265e8:	f7ff ff76 	bl	264d8 <CC_LibInitRngModule>
   265ec:	2800      	cmp	r0, #0
   265ee:	bf18      	it	ne
   265f0:	2005      	movne	r0, #5
   265f2:	bd08      	pop	{r3, pc}
   265f4:	2001      	movs	r0, #1
   265f6:	f000 f8d5 	bl	267a4 <CC_PalPowerSaveModeSelect>
   265fa:	2800      	cmp	r0, #0
   265fc:	d1f0      	bne.n	265e0 <CC_LibInit+0x4c>
   265fe:	4b04      	ldr	r3, [pc, #16]	; (26610 <CC_LibInit+0x7c>)
   26600:	6018      	str	r0, [r3, #0]
   26602:	e7f1      	b.n	265e8 <CC_LibInit+0x54>
   26604:	5002b928 	.word	0x5002b928
   26608:	5002ba24 	.word	0x5002ba24
   2660c:	20e00000 	.word	0x20e00000
   26610:	5002ba0c 	.word	0x5002ba0c

00026614 <CC_HalInit>:
   26614:	2000      	movs	r0, #0
   26616:	4770      	bx	lr

00026618 <CC_HalTerminate>:
   26618:	2000      	movs	r0, #0
   2661a:	4770      	bx	lr

0002661c <CC_HalClearInterruptBit>:
   2661c:	0543      	lsls	r3, r0, #21
   2661e:	d503      	bpl.n	26628 <CC_HalClearInterruptBit+0xc>
   26620:	4b03      	ldr	r3, [pc, #12]	; (26630 <CC_HalClearInterruptBit+0x14>)
   26622:	f04f 32ff 	mov.w	r2, #4294967295
   26626:	601a      	str	r2, [r3, #0]
   26628:	4b02      	ldr	r3, [pc, #8]	; (26634 <CC_HalClearInterruptBit+0x18>)
   2662a:	6018      	str	r0, [r3, #0]
   2662c:	4770      	bx	lr
   2662e:	bf00      	nop
   26630:	5002b108 	.word	0x5002b108
   26634:	5002ba08 	.word	0x5002ba08

00026638 <CC_HalMaskInterrupt>:
   26638:	4b01      	ldr	r3, [pc, #4]	; (26640 <CC_HalMaskInterrupt+0x8>)
   2663a:	6018      	str	r0, [r3, #0]
   2663c:	4770      	bx	lr
   2663e:	bf00      	nop
   26640:	5002ba04 	.word	0x5002ba04

00026644 <CC_HalWaitInterruptRND>:
   26644:	b108      	cbz	r0, 2664a <CC_HalWaitInterruptRND+0x6>
   26646:	f000 b84f 	b.w	266e8 <CC_PalWaitInterruptRND>
   2664a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   2664e:	4770      	bx	lr

00026650 <CC_PalInit>:
   26650:	b510      	push	{r4, lr}
   26652:	4811      	ldr	r0, [pc, #68]	; (26698 <CC_PalInit+0x48>)
   26654:	f000 f862 	bl	2671c <CC_PalMutexCreate>
   26658:	b100      	cbz	r0, 2665c <CC_PalInit+0xc>
   2665a:	bd10      	pop	{r4, pc}
   2665c:	480f      	ldr	r0, [pc, #60]	; (2669c <CC_PalInit+0x4c>)
   2665e:	f000 f85d 	bl	2671c <CC_PalMutexCreate>
   26662:	2800      	cmp	r0, #0
   26664:	d1f9      	bne.n	2665a <CC_PalInit+0xa>
   26666:	4c0e      	ldr	r4, [pc, #56]	; (266a0 <CC_PalInit+0x50>)
   26668:	4620      	mov	r0, r4
   2666a:	f000 f857 	bl	2671c <CC_PalMutexCreate>
   2666e:	2800      	cmp	r0, #0
   26670:	d1f3      	bne.n	2665a <CC_PalInit+0xa>
   26672:	4b0c      	ldr	r3, [pc, #48]	; (266a4 <CC_PalInit+0x54>)
   26674:	480c      	ldr	r0, [pc, #48]	; (266a8 <CC_PalInit+0x58>)
   26676:	601c      	str	r4, [r3, #0]
   26678:	f000 f850 	bl	2671c <CC_PalMutexCreate>
   2667c:	4601      	mov	r1, r0
   2667e:	2800      	cmp	r0, #0
   26680:	d1eb      	bne.n	2665a <CC_PalInit+0xa>
   26682:	f000 f82d 	bl	266e0 <CC_PalDmaInit>
   26686:	4604      	mov	r4, r0
   26688:	b108      	cbz	r0, 2668e <CC_PalInit+0x3e>
   2668a:	4620      	mov	r0, r4
   2668c:	bd10      	pop	{r4, pc}
   2668e:	f000 f86b 	bl	26768 <CC_PalPowerSaveModeInit>
   26692:	4620      	mov	r0, r4
   26694:	e7fa      	b.n	2668c <CC_PalInit+0x3c>
   26696:	bf00      	nop
   26698:	20001a18 	.word	0x20001a18
   2669c:	20001a0c 	.word	0x20001a0c
   266a0:	20001a14 	.word	0x20001a14
   266a4:	20001a1c 	.word	0x20001a1c
   266a8:	20001a10 	.word	0x20001a10

000266ac <CC_PalTerminate>:
   266ac:	b508      	push	{r3, lr}
   266ae:	4808      	ldr	r0, [pc, #32]	; (266d0 <CC_PalTerminate+0x24>)
   266b0:	f000 f83e 	bl	26730 <CC_PalMutexDestroy>
   266b4:	4807      	ldr	r0, [pc, #28]	; (266d4 <CC_PalTerminate+0x28>)
   266b6:	f000 f83b 	bl	26730 <CC_PalMutexDestroy>
   266ba:	4807      	ldr	r0, [pc, #28]	; (266d8 <CC_PalTerminate+0x2c>)
   266bc:	f000 f838 	bl	26730 <CC_PalMutexDestroy>
   266c0:	4806      	ldr	r0, [pc, #24]	; (266dc <CC_PalTerminate+0x30>)
   266c2:	f000 f835 	bl	26730 <CC_PalMutexDestroy>
   266c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   266ca:	f000 b80b 	b.w	266e4 <CC_PalDmaTerminate>
   266ce:	bf00      	nop
   266d0:	20001a18 	.word	0x20001a18
   266d4:	20001a0c 	.word	0x20001a0c
   266d8:	20001a14 	.word	0x20001a14
   266dc:	20001a10 	.word	0x20001a10

000266e0 <CC_PalDmaInit>:
   266e0:	2000      	movs	r0, #0
   266e2:	4770      	bx	lr

000266e4 <CC_PalDmaTerminate>:
   266e4:	4770      	bx	lr
   266e6:	bf00      	nop

000266e8 <CC_PalWaitInterruptRND>:
   266e8:	b410      	push	{r4}
   266ea:	4c08      	ldr	r4, [pc, #32]	; (2670c <CC_PalWaitInterruptRND+0x24>)
   266ec:	4602      	mov	r2, r0
   266ee:	6823      	ldr	r3, [r4, #0]
   266f0:	4213      	tst	r3, r2
   266f2:	d0fc      	beq.n	266ee <CC_PalWaitInterruptRND+0x6>
   266f4:	b121      	cbz	r1, 26700 <CC_PalWaitInterruptRND+0x18>
   266f6:	4b06      	ldr	r3, [pc, #24]	; (26710 <CC_PalWaitInterruptRND+0x28>)
   266f8:	4806      	ldr	r0, [pc, #24]	; (26714 <CC_PalWaitInterruptRND+0x2c>)
   266fa:	681b      	ldr	r3, [r3, #0]
   266fc:	600b      	str	r3, [r1, #0]
   266fe:	6003      	str	r3, [r0, #0]
   26700:	4b05      	ldr	r3, [pc, #20]	; (26718 <CC_PalWaitInterruptRND+0x30>)
   26702:	601a      	str	r2, [r3, #0]
   26704:	2000      	movs	r0, #0
   26706:	bc10      	pop	{r4}
   26708:	4770      	bx	lr
   2670a:	bf00      	nop
   2670c:	5002ba00 	.word	0x5002ba00
   26710:	5002b104 	.word	0x5002b104
   26714:	5002b108 	.word	0x5002b108
   26718:	5002ba08 	.word	0x5002ba08

0002671c <CC_PalMutexCreate>:
   2671c:	b508      	push	{r3, lr}
   2671e:	4b03      	ldr	r3, [pc, #12]	; (2672c <CC_PalMutexCreate+0x10>)
   26720:	6802      	ldr	r2, [r0, #0]
   26722:	681b      	ldr	r3, [r3, #0]
   26724:	6810      	ldr	r0, [r2, #0]
   26726:	4798      	blx	r3
   26728:	2000      	movs	r0, #0
   2672a:	bd08      	pop	{r3, pc}
   2672c:	200019d0 	.word	0x200019d0

00026730 <CC_PalMutexDestroy>:
   26730:	b508      	push	{r3, lr}
   26732:	4b03      	ldr	r3, [pc, #12]	; (26740 <CC_PalMutexDestroy+0x10>)
   26734:	6802      	ldr	r2, [r0, #0]
   26736:	685b      	ldr	r3, [r3, #4]
   26738:	6810      	ldr	r0, [r2, #0]
   2673a:	4798      	blx	r3
   2673c:	2000      	movs	r0, #0
   2673e:	bd08      	pop	{r3, pc}
   26740:	200019d0 	.word	0x200019d0

00026744 <CC_PalMutexLock>:
   26744:	4b02      	ldr	r3, [pc, #8]	; (26750 <CC_PalMutexLock+0xc>)
   26746:	6802      	ldr	r2, [r0, #0]
   26748:	689b      	ldr	r3, [r3, #8]
   2674a:	6810      	ldr	r0, [r2, #0]
   2674c:	4718      	bx	r3
   2674e:	bf00      	nop
   26750:	200019d0 	.word	0x200019d0

00026754 <CC_PalMutexUnlock>:
   26754:	b508      	push	{r3, lr}
   26756:	4b03      	ldr	r3, [pc, #12]	; (26764 <CC_PalMutexUnlock+0x10>)
   26758:	6802      	ldr	r2, [r0, #0]
   2675a:	68db      	ldr	r3, [r3, #12]
   2675c:	6810      	ldr	r0, [r2, #0]
   2675e:	4798      	blx	r3
   26760:	2000      	movs	r0, #0
   26762:	bd08      	pop	{r3, pc}
   26764:	200019d0 	.word	0x200019d0

00026768 <CC_PalPowerSaveModeInit>:
   26768:	b570      	push	{r4, r5, r6, lr}
   2676a:	4c09      	ldr	r4, [pc, #36]	; (26790 <CC_PalPowerSaveModeInit+0x28>)
   2676c:	4d09      	ldr	r5, [pc, #36]	; (26794 <CC_PalPowerSaveModeInit+0x2c>)
   2676e:	6920      	ldr	r0, [r4, #16]
   26770:	68ab      	ldr	r3, [r5, #8]
   26772:	4798      	blx	r3
   26774:	b118      	cbz	r0, 2677e <CC_PalPowerSaveModeInit+0x16>
   26776:	4b08      	ldr	r3, [pc, #32]	; (26798 <CC_PalPowerSaveModeInit+0x30>)
   26778:	4808      	ldr	r0, [pc, #32]	; (2679c <CC_PalPowerSaveModeInit+0x34>)
   2677a:	685b      	ldr	r3, [r3, #4]
   2677c:	4798      	blx	r3
   2677e:	4a08      	ldr	r2, [pc, #32]	; (267a0 <CC_PalPowerSaveModeInit+0x38>)
   26780:	68eb      	ldr	r3, [r5, #12]
   26782:	6920      	ldr	r0, [r4, #16]
   26784:	2100      	movs	r1, #0
   26786:	6011      	str	r1, [r2, #0]
   26788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2678c:	4718      	bx	r3
   2678e:	bf00      	nop
   26790:	200019e0 	.word	0x200019e0
   26794:	200019d0 	.word	0x200019d0
   26798:	200019c0 	.word	0x200019c0
   2679c:	00030248 	.word	0x00030248
   267a0:	20005500 	.word	0x20005500

000267a4 <CC_PalPowerSaveModeSelect>:
   267a4:	b570      	push	{r4, r5, r6, lr}
   267a6:	4d1a      	ldr	r5, [pc, #104]	; (26810 <CC_PalPowerSaveModeSelect+0x6c>)
   267a8:	4e1a      	ldr	r6, [pc, #104]	; (26814 <CC_PalPowerSaveModeSelect+0x70>)
   267aa:	4604      	mov	r4, r0
   267ac:	68b2      	ldr	r2, [r6, #8]
   267ae:	6928      	ldr	r0, [r5, #16]
   267b0:	4790      	blx	r2
   267b2:	b9f0      	cbnz	r0, 267f2 <CC_PalPowerSaveModeSelect+0x4e>
   267b4:	b15c      	cbz	r4, 267ce <CC_PalPowerSaveModeSelect+0x2a>
   267b6:	4c18      	ldr	r4, [pc, #96]	; (26818 <CC_PalPowerSaveModeSelect+0x74>)
   267b8:	6823      	ldr	r3, [r4, #0]
   267ba:	b1ab      	cbz	r3, 267e8 <CC_PalPowerSaveModeSelect+0x44>
   267bc:	2b01      	cmp	r3, #1
   267be:	d01a      	beq.n	267f6 <CC_PalPowerSaveModeSelect+0x52>
   267c0:	3b01      	subs	r3, #1
   267c2:	6023      	str	r3, [r4, #0]
   267c4:	6928      	ldr	r0, [r5, #16]
   267c6:	68f3      	ldr	r3, [r6, #12]
   267c8:	4798      	blx	r3
   267ca:	2000      	movs	r0, #0
   267cc:	bd70      	pop	{r4, r5, r6, pc}
   267ce:	4c12      	ldr	r4, [pc, #72]	; (26818 <CC_PalPowerSaveModeSelect+0x74>)
   267d0:	6821      	ldr	r1, [r4, #0]
   267d2:	b939      	cbnz	r1, 267e4 <CC_PalPowerSaveModeSelect+0x40>
   267d4:	4b11      	ldr	r3, [pc, #68]	; (2681c <CC_PalPowerSaveModeSelect+0x78>)
   267d6:	4a12      	ldr	r2, [pc, #72]	; (26820 <CC_PalPowerSaveModeSelect+0x7c>)
   267d8:	2001      	movs	r0, #1
   267da:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   267de:	6813      	ldr	r3, [r2, #0]
   267e0:	2b00      	cmp	r3, #0
   267e2:	d1fc      	bne.n	267de <CC_PalPowerSaveModeSelect+0x3a>
   267e4:	3101      	adds	r1, #1
   267e6:	6021      	str	r1, [r4, #0]
   267e8:	68f3      	ldr	r3, [r6, #12]
   267ea:	6928      	ldr	r0, [r5, #16]
   267ec:	4798      	blx	r3
   267ee:	2000      	movs	r0, #0
   267f0:	bd70      	pop	{r4, r5, r6, pc}
   267f2:	480c      	ldr	r0, [pc, #48]	; (26824 <CC_PalPowerSaveModeSelect+0x80>)
   267f4:	bd70      	pop	{r4, r5, r6, pc}
   267f6:	4a0a      	ldr	r2, [pc, #40]	; (26820 <CC_PalPowerSaveModeSelect+0x7c>)
   267f8:	6813      	ldr	r3, [r2, #0]
   267fa:	2b00      	cmp	r3, #0
   267fc:	d1fc      	bne.n	267f8 <CC_PalPowerSaveModeSelect+0x54>
   267fe:	4a07      	ldr	r2, [pc, #28]	; (2681c <CC_PalPowerSaveModeSelect+0x78>)
   26800:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   26804:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   26808:	f7ff ff16 	bl	26638 <CC_HalMaskInterrupt>
   2680c:	6823      	ldr	r3, [r4, #0]
   2680e:	e7d7      	b.n	267c0 <CC_PalPowerSaveModeSelect+0x1c>
   26810:	200019e0 	.word	0x200019e0
   26814:	200019d0 	.word	0x200019d0
   26818:	20005500 	.word	0x20005500
   2681c:	5002a000 	.word	0x5002a000
   26820:	5002b910 	.word	0x5002b910
   26824:	ffff8fe9 	.word	0xffff8fe9

00026828 <startTrngHW>:
   26828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2682c:	2800      	cmp	r0, #0
   2682e:	d076      	beq.n	2691e <startTrngHW+0xf6>
   26830:	460c      	mov	r4, r1
   26832:	2900      	cmp	r1, #0
   26834:	d073      	beq.n	2691e <startTrngHW+0xf6>
   26836:	461d      	mov	r5, r3
   26838:	2b00      	cmp	r3, #0
   2683a:	d070      	beq.n	2691e <startTrngHW+0xf6>
   2683c:	4606      	mov	r6, r0
   2683e:	b11a      	cbz	r2, 26848 <startTrngHW+0x20>
   26840:	2201      	movs	r2, #1
   26842:	2300      	movs	r3, #0
   26844:	602a      	str	r2, [r5, #0]
   26846:	6003      	str	r3, [r0, #0]
   26848:	682b      	ldr	r3, [r5, #0]
   2684a:	2b00      	cmp	r3, #0
   2684c:	d063      	beq.n	26916 <startTrngHW+0xee>
   2684e:	4629      	mov	r1, r5
   26850:	4620      	mov	r0, r4
   26852:	f000 fc05 	bl	27060 <LLF_RND_GetFastestRosc>
   26856:	4607      	mov	r7, r0
   26858:	2800      	cmp	r0, #0
   2685a:	d15d      	bne.n	26918 <startTrngHW+0xf0>
   2685c:	6828      	ldr	r0, [r5, #0]
   2685e:	4621      	mov	r1, r4
   26860:	f000 fbe0 	bl	27024 <LLF_RND_GetRoscSampleCnt>
   26864:	4607      	mov	r7, r0
   26866:	2800      	cmp	r0, #0
   26868:	d156      	bne.n	26918 <startTrngHW+0xf0>
   2686a:	682b      	ldr	r3, [r5, #0]
   2686c:	2b08      	cmp	r3, #8
   2686e:	d065      	beq.n	2693c <startTrngHW+0x114>
   26870:	2b04      	cmp	r3, #4
   26872:	d066      	beq.n	26942 <startTrngHW+0x11a>
   26874:	f1a3 0802 	sub.w	r8, r3, #2
   26878:	fab8 f888 	clz	r8, r8
   2687c:	ea4f 1858 	mov.w	r8, r8, lsr #5
   26880:	4b31      	ldr	r3, [pc, #196]	; (26948 <startTrngHW+0x120>)
   26882:	4932      	ldr	r1, [pc, #200]	; (2694c <startTrngHW+0x124>)
   26884:	4a32      	ldr	r2, [pc, #200]	; (26950 <startTrngHW+0x128>)
   26886:	2001      	movs	r0, #1
   26888:	6018      	str	r0, [r3, #0]
   2688a:	469c      	mov	ip, r3
   2688c:	6008      	str	r0, [r1, #0]
   2688e:	f8cc 0000 	str.w	r0, [ip]
   26892:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26894:	6013      	str	r3, [r2, #0]
   26896:	6811      	ldr	r1, [r2, #0]
   26898:	428b      	cmp	r3, r1
   2689a:	d1f8      	bne.n	2688e <startTrngHW+0x66>
   2689c:	4b2d      	ldr	r3, [pc, #180]	; (26954 <startTrngHW+0x12c>)
   2689e:	f04f 0900 	mov.w	r9, #0
   268a2:	f8c3 9000 	str.w	r9, [r3]
   268a6:	f04f 30ff 	mov.w	r0, #4294967295
   268aa:	f7ff feb7 	bl	2661c <CC_HalClearInterruptBit>
   268ae:	4b2a      	ldr	r3, [pc, #168]	; (26958 <startTrngHW+0x130>)
   268b0:	4a2a      	ldr	r2, [pc, #168]	; (2695c <startTrngHW+0x134>)
   268b2:	601a      	str	r2, [r3, #0]
   268b4:	4648      	mov	r0, r9
   268b6:	f7ff febf 	bl	26638 <CC_HalMaskInterrupt>
   268ba:	4a29      	ldr	r2, [pc, #164]	; (26960 <startTrngHW+0x138>)
   268bc:	4b29      	ldr	r3, [pc, #164]	; (26964 <startTrngHW+0x13c>)
   268be:	f8c2 8000 	str.w	r8, [r2]
   268c2:	6818      	ldr	r0, [r3, #0]
   268c4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   268c8:	f7ff feb6 	bl	26638 <CC_HalMaskInterrupt>
   268cc:	4b26      	ldr	r3, [pc, #152]	; (26968 <startTrngHW+0x140>)
   268ce:	220a      	movs	r2, #10
   268d0:	601a      	str	r2, [r3, #0]
   268d2:	9908      	ldr	r1, [sp, #32]
   268d4:	6923      	ldr	r3, [r4, #16]
   268d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   268d8:	2901      	cmp	r1, #1
   268da:	d024      	beq.n	26926 <startTrngHW+0xfe>
   268dc:	4923      	ldr	r1, [pc, #140]	; (2696c <startTrngHW+0x144>)
   268de:	fba1 1303 	umull	r1, r3, r1, r3
   268e2:	091b      	lsrs	r3, r3, #4
   268e4:	fb03 f302 	mul.w	r3, r3, r2
   268e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   268ec:	4920      	ldr	r1, [pc, #128]	; (26970 <startTrngHW+0x148>)
   268ee:	4a19      	ldr	r2, [pc, #100]	; (26954 <startTrngHW+0x12c>)
   268f0:	03db      	lsls	r3, r3, #15
   268f2:	099b      	lsrs	r3, r3, #6
   268f4:	600b      	str	r3, [r1, #0]
   268f6:	2301      	movs	r3, #1
   268f8:	6013      	str	r3, [r2, #0]
   268fa:	6833      	ldr	r3, [r6, #0]
   268fc:	682a      	ldr	r2, [r5, #0]
   268fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   26902:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   26906:	6033      	str	r3, [r6, #0]
   26908:	682a      	ldr	r2, [r5, #0]
   2690a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2690e:	6033      	str	r3, [r6, #0]
   26910:	4638      	mov	r0, r7
   26912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26916:	4f17      	ldr	r7, [pc, #92]	; (26974 <startTrngHW+0x14c>)
   26918:	4638      	mov	r0, r7
   2691a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2691e:	4f16      	ldr	r7, [pc, #88]	; (26978 <startTrngHW+0x150>)
   26920:	4638      	mov	r0, r7
   26922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26926:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2692a:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   2692e:	3101      	adds	r1, #1
   26930:	d002      	beq.n	26938 <startTrngHW+0x110>
   26932:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   26936:	e7d1      	b.n	268dc <startTrngHW+0xb4>
   26938:	2316      	movs	r3, #22
   2693a:	e7d3      	b.n	268e4 <startTrngHW+0xbc>
   2693c:	f04f 0803 	mov.w	r8, #3
   26940:	e79e      	b.n	26880 <startTrngHW+0x58>
   26942:	f04f 0802 	mov.w	r8, #2
   26946:	e79b      	b.n	26880 <startTrngHW+0x58>
   26948:	5002b1c4 	.word	0x5002b1c4
   2694c:	5002b140 	.word	0x5002b140
   26950:	5002b130 	.word	0x5002b130
   26954:	5002b12c 	.word	0x5002b12c
   26958:	5002b100 	.word	0x5002b100
   2695c:	0ffffffe 	.word	0x0ffffffe
   26960:	5002b10c 	.word	0x5002b10c
   26964:	5002ba04 	.word	0x5002ba04
   26968:	5002b138 	.word	0x5002b138
   2696c:	aaaaaaab 	.word	0xaaaaaaab
   26970:	5002b1d8 	.word	0x5002b1d8
   26974:	00f10c31 	.word	0x00f10c31
   26978:	00f10c35 	.word	0x00f10c35

0002697c <LLF_RND_RepetitionCounterTest.part.0>:
   2697c:	b4f0      	push	{r4, r5, r6, r7}
   2697e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   26982:	2400      	movs	r4, #0
   26984:	f10c 3cff 	add.w	ip, ip, #4294967295
   26988:	4626      	mov	r6, r4
   2698a:	4627      	mov	r7, r4
   2698c:	e006      	b.n	2699c <LLF_RND_RepetitionCounterTest.part.0+0x20>
   2698e:	429f      	cmp	r7, r3
   26990:	d016      	beq.n	269c0 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   26992:	2601      	movs	r6, #1
   26994:	4565      	cmp	r5, ip
   26996:	d819      	bhi.n	269cc <LLF_RND_RepetitionCounterTest.part.0+0x50>
   26998:	462c      	mov	r4, r5
   2699a:	461f      	mov	r7, r3
   2699c:	0963      	lsrs	r3, r4, #5
   2699e:	f004 011f 	and.w	r1, r4, #31
   269a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   269a6:	291f      	cmp	r1, #31
   269a8:	fa23 f301 	lsr.w	r3, r3, r1
   269ac:	f104 0501 	add.w	r5, r4, #1
   269b0:	bf18      	it	ne
   269b2:	f003 0301 	andne.w	r3, r3, #1
   269b6:	2c00      	cmp	r4, #0
   269b8:	d1e9      	bne.n	2698e <LLF_RND_RepetitionCounterTest.part.0+0x12>
   269ba:	2601      	movs	r6, #1
   269bc:	4635      	mov	r5, r6
   269be:	e7eb      	b.n	26998 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   269c0:	3601      	adds	r6, #1
   269c2:	4296      	cmp	r6, r2
   269c4:	d1e6      	bne.n	26994 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   269c6:	4803      	ldr	r0, [pc, #12]	; (269d4 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   269c8:	bcf0      	pop	{r4, r5, r6, r7}
   269ca:	4770      	bx	lr
   269cc:	2000      	movs	r0, #0
   269ce:	bcf0      	pop	{r4, r5, r6, r7}
   269d0:	4770      	bx	lr
   269d2:	bf00      	nop
   269d4:	00f10c36 	.word	0x00f10c36

000269d8 <LLF_RND_AdaptiveProportionTest>:
   269d8:	2800      	cmp	r0, #0
   269da:	d061      	beq.n	26aa0 <LLF_RND_AdaptiveProportionTest+0xc8>
   269dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   269e0:	1e4c      	subs	r4, r1, #1
   269e2:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   269e6:	d227      	bcs.n	26a38 <LLF_RND_AdaptiveProportionTest+0x60>
   269e8:	b333      	cbz	r3, 26a38 <LLF_RND_AdaptiveProportionTest+0x60>
   269ea:	b32a      	cbz	r2, 26a38 <LLF_RND_AdaptiveProportionTest+0x60>
   269ec:	00cd      	lsls	r5, r1, #3
   269ee:	2b01      	cmp	r3, #1
   269f0:	f105 3eff 	add.w	lr, r5, #4294967295
   269f4:	d030      	beq.n	26a58 <LLF_RND_AdaptiveProportionTest+0x80>
   269f6:	2100      	movs	r1, #0
   269f8:	468c      	mov	ip, r1
   269fa:	460f      	mov	r7, r1
   269fc:	460e      	mov	r6, r1
   269fe:	f103 38ff 	add.w	r8, r3, #4294967295
   26a02:	094c      	lsrs	r4, r1, #5
   26a04:	f001 051f 	and.w	r5, r1, #31
   26a08:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   26a0c:	2d1f      	cmp	r5, #31
   26a0e:	fa24 f405 	lsr.w	r4, r4, r5
   26a12:	bf18      	it	ne
   26a14:	f004 0401 	andne.w	r4, r4, #1
   26a18:	b921      	cbnz	r1, 26a24 <LLF_RND_AdaptiveProportionTest+0x4c>
   26a1a:	2601      	movs	r6, #1
   26a1c:	46b4      	mov	ip, r6
   26a1e:	4631      	mov	r1, r6
   26a20:	4627      	mov	r7, r4
   26a22:	e7ee      	b.n	26a02 <LLF_RND_AdaptiveProportionTest+0x2a>
   26a24:	42b3      	cmp	r3, r6
   26a26:	d013      	beq.n	26a50 <LLF_RND_AdaptiveProportionTest+0x78>
   26a28:	42a7      	cmp	r7, r4
   26a2a:	d101      	bne.n	26a30 <LLF_RND_AdaptiveProportionTest+0x58>
   26a2c:	f10c 0c01 	add.w	ip, ip, #1
   26a30:	4546      	cmp	r6, r8
   26a32:	d104      	bne.n	26a3e <LLF_RND_AdaptiveProportionTest+0x66>
   26a34:	4562      	cmp	r2, ip
   26a36:	d202      	bcs.n	26a3e <LLF_RND_AdaptiveProportionTest+0x66>
   26a38:	481a      	ldr	r0, [pc, #104]	; (26aa4 <LLF_RND_AdaptiveProportionTest+0xcc>)
   26a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26a3e:	463c      	mov	r4, r7
   26a40:	3101      	adds	r1, #1
   26a42:	458e      	cmp	lr, r1
   26a44:	f106 0601 	add.w	r6, r6, #1
   26a48:	d2ea      	bcs.n	26a20 <LLF_RND_AdaptiveProportionTest+0x48>
   26a4a:	2000      	movs	r0, #0
   26a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26a50:	2600      	movs	r6, #0
   26a52:	f04f 0c01 	mov.w	ip, #1
   26a56:	e7f3      	b.n	26a40 <LLF_RND_AdaptiveProportionTest+0x68>
   26a58:	2600      	movs	r6, #0
   26a5a:	46b4      	mov	ip, r6
   26a5c:	4637      	mov	r7, r6
   26a5e:	4634      	mov	r4, r6
   26a60:	0961      	lsrs	r1, r4, #5
   26a62:	f004 031f 	and.w	r3, r4, #31
   26a66:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   26a6a:	2b1f      	cmp	r3, #31
   26a6c:	fa21 f103 	lsr.w	r1, r1, r3
   26a70:	bf18      	it	ne
   26a72:	f001 0101 	andne.w	r1, r1, #1
   26a76:	b13c      	cbz	r4, 26a88 <LLF_RND_AdaptiveProportionTest+0xb0>
   26a78:	b95f      	cbnz	r7, 26a92 <LLF_RND_AdaptiveProportionTest+0xba>
   26a7a:	458c      	cmp	ip, r1
   26a7c:	d001      	beq.n	26a82 <LLF_RND_AdaptiveProportionTest+0xaa>
   26a7e:	4661      	mov	r1, ip
   26a80:	e008      	b.n	26a94 <LLF_RND_AdaptiveProportionTest+0xbc>
   26a82:	3601      	adds	r6, #1
   26a84:	4661      	mov	r1, ip
   26a86:	e005      	b.n	26a94 <LLF_RND_AdaptiveProportionTest+0xbc>
   26a88:	2601      	movs	r6, #1
   26a8a:	4634      	mov	r4, r6
   26a8c:	468c      	mov	ip, r1
   26a8e:	2701      	movs	r7, #1
   26a90:	e7e6      	b.n	26a60 <LLF_RND_AdaptiveProportionTest+0x88>
   26a92:	463e      	mov	r6, r7
   26a94:	42b2      	cmp	r2, r6
   26a96:	d3cf      	bcc.n	26a38 <LLF_RND_AdaptiveProportionTest+0x60>
   26a98:	3401      	adds	r4, #1
   26a9a:	42ac      	cmp	r4, r5
   26a9c:	d1f6      	bne.n	26a8c <LLF_RND_AdaptiveProportionTest+0xb4>
   26a9e:	e7d4      	b.n	26a4a <LLF_RND_AdaptiveProportionTest+0x72>
   26aa0:	4800      	ldr	r0, [pc, #0]	; (26aa4 <LLF_RND_AdaptiveProportionTest+0xcc>)
   26aa2:	4770      	bx	lr
   26aa4:	00f10c37 	.word	0x00f10c37

00026aa8 <getTrngSource>:
   26aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26aac:	b08d      	sub	sp, #52	; 0x34
   26aae:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   26ab2:	4607      	mov	r7, r0
   26ab4:	460c      	mov	r4, r1
   26ab6:	2d00      	cmp	r5, #0
   26ab8:	d14c      	bne.n	26b54 <getTrngSource+0xac>
   26aba:	f8d1 a010 	ldr.w	sl, [r1, #16]
   26abe:	601e      	str	r6, [r3, #0]
   26ac0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   26ac2:	2100      	movs	r1, #0
   26ac4:	6019      	str	r1, [r3, #0]
   26ac6:	2a00      	cmp	r2, #0
   26ac8:	f000 811b 	beq.w	26d02 <getTrngSource+0x25a>
   26acc:	4a99      	ldr	r2, [pc, #612]	; (26d34 <getTrngSource+0x28c>)
   26ace:	4b9a      	ldr	r3, [pc, #616]	; (26d38 <getTrngSource+0x290>)
   26ad0:	6811      	ldr	r1, [r2, #0]
   26ad2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   26ad4:	681b      	ldr	r3, [r3, #0]
   26ad6:	429a      	cmp	r2, r3
   26ad8:	d147      	bne.n	26b6a <getTrngSource+0xc2>
   26ada:	290a      	cmp	r1, #10
   26adc:	d145      	bne.n	26b6a <getTrngSource+0xc2>
   26ade:	78fb      	ldrb	r3, [r7, #3]
   26ae0:	9304      	str	r3, [sp, #16]
   26ae2:	4b96      	ldr	r3, [pc, #600]	; (26d3c <getTrngSource+0x294>)
   26ae4:	fba3 230a 	umull	r2, r3, r3, sl
   26ae8:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   26aec:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   26af0:	f106 0208 	add.w	r2, r6, #8
   26af4:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   26af8:	2304      	movs	r3, #4
   26afa:	9203      	str	r2, [sp, #12]
   26afc:	9302      	str	r3, [sp, #8]
   26afe:	46b8      	mov	r8, r7
   26b00:	9b16      	ldr	r3, [sp, #88]	; 0x58
   26b02:	f8c3 a000 	str.w	sl, [r3]
   26b06:	f1ba 0f00 	cmp.w	sl, #0
   26b0a:	f000 80c0 	beq.w	26c8e <getTrngSource+0x1e6>
   26b0e:	9e03      	ldr	r6, [sp, #12]
   26b10:	4655      	mov	r5, sl
   26b12:	f04f 0900 	mov.w	r9, #0
   26b16:	f000 fab3 	bl	27080 <LLF_RND_TurnOffTrng>
   26b1a:	2300      	movs	r3, #0
   26b1c:	9305      	str	r3, [sp, #20]
   26b1e:	f1b8 0f00 	cmp.w	r8, #0
   26b22:	f000 80e2 	beq.w	26cea <getTrngSource+0x242>
   26b26:	2c00      	cmp	r4, #0
   26b28:	f000 80df 	beq.w	26cea <getTrngSource+0x242>
   26b2c:	9b04      	ldr	r3, [sp, #16]
   26b2e:	2b00      	cmp	r3, #0
   26b30:	f000 80d9 	beq.w	26ce6 <getTrngSource+0x23e>
   26b34:	a904      	add	r1, sp, #16
   26b36:	4620      	mov	r0, r4
   26b38:	f000 fa92 	bl	27060 <LLF_RND_GetFastestRosc>
   26b3c:	b1b8      	cbz	r0, 26b6e <getTrngSource+0xc6>
   26b3e:	4b80      	ldr	r3, [pc, #512]	; (26d40 <getTrngSource+0x298>)
   26b40:	4298      	cmp	r0, r3
   26b42:	f040 80a4 	bne.w	26c8e <getTrngSource+0x1e6>
   26b46:	9002      	str	r0, [sp, #8]
   26b48:	f000 fa9a 	bl	27080 <LLF_RND_TurnOffTrng>
   26b4c:	9802      	ldr	r0, [sp, #8]
   26b4e:	b00d      	add	sp, #52	; 0x34
   26b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b54:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   26b58:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   26b5c:	3001      	adds	r0, #1
   26b5e:	bf14      	ite	ne
   26b60:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   26b64:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   26b68:	e7a9      	b.n	26abe <getTrngSource+0x16>
   26b6a:	4876      	ldr	r0, [pc, #472]	; (26d44 <getTrngSource+0x29c>)
   26b6c:	e7eb      	b.n	26b46 <getTrngSource+0x9e>
   26b6e:	9804      	ldr	r0, [sp, #16]
   26b70:	4621      	mov	r1, r4
   26b72:	f000 fa57 	bl	27024 <LLF_RND_GetRoscSampleCnt>
   26b76:	2800      	cmp	r0, #0
   26b78:	d1e1      	bne.n	26b3e <getTrngSource+0x96>
   26b7a:	9f04      	ldr	r7, [sp, #16]
   26b7c:	2f08      	cmp	r7, #8
   26b7e:	f000 80b6 	beq.w	26cee <getTrngSource+0x246>
   26b82:	2f04      	cmp	r7, #4
   26b84:	f000 80b5 	beq.w	26cf2 <getTrngSource+0x24a>
   26b88:	f1a7 0702 	sub.w	r7, r7, #2
   26b8c:	fab7 f787 	clz	r7, r7
   26b90:	097f      	lsrs	r7, r7, #5
   26b92:	496d      	ldr	r1, [pc, #436]	; (26d48 <getTrngSource+0x2a0>)
   26b94:	2301      	movs	r3, #1
   26b96:	600b      	str	r3, [r1, #0]
   26b98:	f841 3c84 	str.w	r3, [r1, #-132]
   26b9c:	4619      	mov	r1, r3
   26b9e:	4b6a      	ldr	r3, [pc, #424]	; (26d48 <getTrngSource+0x2a0>)
   26ba0:	4865      	ldr	r0, [pc, #404]	; (26d38 <getTrngSource+0x290>)
   26ba2:	6019      	str	r1, [r3, #0]
   26ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26ba6:	6003      	str	r3, [r0, #0]
   26ba8:	6800      	ldr	r0, [r0, #0]
   26baa:	4283      	cmp	r3, r0
   26bac:	d1f7      	bne.n	26b9e <getTrngSource+0xf6>
   26bae:	4a67      	ldr	r2, [pc, #412]	; (26d4c <getTrngSource+0x2a4>)
   26bb0:	2300      	movs	r3, #0
   26bb2:	6013      	str	r3, [r2, #0]
   26bb4:	f04f 30ff 	mov.w	r0, #4294967295
   26bb8:	f7ff fd30 	bl	2661c <CC_HalClearInterruptBit>
   26bbc:	4864      	ldr	r0, [pc, #400]	; (26d50 <getTrngSource+0x2a8>)
   26bbe:	4965      	ldr	r1, [pc, #404]	; (26d54 <getTrngSource+0x2ac>)
   26bc0:	6001      	str	r1, [r0, #0]
   26bc2:	2300      	movs	r3, #0
   26bc4:	4618      	mov	r0, r3
   26bc6:	f7ff fd37 	bl	26638 <CC_HalMaskInterrupt>
   26bca:	4963      	ldr	r1, [pc, #396]	; (26d58 <getTrngSource+0x2b0>)
   26bcc:	4b63      	ldr	r3, [pc, #396]	; (26d5c <getTrngSource+0x2b4>)
   26bce:	600f      	str	r7, [r1, #0]
   26bd0:	6818      	ldr	r0, [r3, #0]
   26bd2:	4f5a      	ldr	r7, [pc, #360]	; (26d3c <getTrngSource+0x294>)
   26bd4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   26bd8:	f7ff fd2e 	bl	26638 <CC_HalMaskInterrupt>
   26bdc:	4b55      	ldr	r3, [pc, #340]	; (26d34 <getTrngSource+0x28c>)
   26bde:	4860      	ldr	r0, [pc, #384]	; (26d60 <getTrngSource+0x2b8>)
   26be0:	210a      	movs	r1, #10
   26be2:	6019      	str	r1, [r3, #0]
   26be4:	6921      	ldr	r1, [r4, #16]
   26be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26be8:	fba7 c101 	umull	ip, r1, r7, r1
   26bec:	0909      	lsrs	r1, r1, #4
   26bee:	fb03 f301 	mul.w	r3, r3, r1
   26bf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26bf6:	03db      	lsls	r3, r3, #15
   26bf8:	099b      	lsrs	r3, r3, #6
   26bfa:	6003      	str	r3, [r0, #0]
   26bfc:	4b53      	ldr	r3, [pc, #332]	; (26d4c <getTrngSource+0x2a4>)
   26bfe:	2201      	movs	r2, #1
   26c00:	601a      	str	r2, [r3, #0]
   26c02:	9904      	ldr	r1, [sp, #16]
   26c04:	f8d8 2000 	ldr.w	r2, [r8]
   26c08:	020b      	lsls	r3, r1, #8
   26c0a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   26c0e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   26c12:	4313      	orrs	r3, r2
   26c14:	f8c8 3000 	str.w	r3, [r8]
   26c18:	a805      	add	r0, sp, #20
   26c1a:	f000 f9f3 	bl	27004 <LLF_RND_WaitRngInterrupt>
   26c1e:	2800      	cmp	r0, #0
   26c20:	d18d      	bne.n	26b3e <getTrngSource+0x96>
   26c22:	4a50      	ldr	r2, [pc, #320]	; (26d64 <getTrngSource+0x2bc>)
   26c24:	4b50      	ldr	r3, [pc, #320]	; (26d68 <getTrngSource+0x2c0>)
   26c26:	6812      	ldr	r2, [r2, #0]
   26c28:	9206      	str	r2, [sp, #24]
   26c2a:	681a      	ldr	r2, [r3, #0]
   26c2c:	9207      	str	r2, [sp, #28]
   26c2e:	685a      	ldr	r2, [r3, #4]
   26c30:	9208      	str	r2, [sp, #32]
   26c32:	689a      	ldr	r2, [r3, #8]
   26c34:	9209      	str	r2, [sp, #36]	; 0x24
   26c36:	68da      	ldr	r2, [r3, #12]
   26c38:	920a      	str	r2, [sp, #40]	; 0x28
   26c3a:	3310      	adds	r3, #16
   26c3c:	fba7 2705 	umull	r2, r7, r7, r5
   26c40:	681b      	ldr	r3, [r3, #0]
   26c42:	930b      	str	r3, [sp, #44]	; 0x2c
   26c44:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   26c48:	d102      	bne.n	26c50 <getTrngSource+0x1a8>
   26c4a:	f1bb 0f00 	cmp.w	fp, #0
   26c4e:	d141      	bne.n	26cd4 <getTrngSource+0x22c>
   26c50:	2218      	movs	r2, #24
   26c52:	4630      	mov	r0, r6
   26c54:	eb0d 0102 	add.w	r1, sp, r2
   26c58:	f000 f97a 	bl	26f50 <CC_PalMemCopyPlat>
   26c5c:	3d18      	subs	r5, #24
   26c5e:	3618      	adds	r6, #24
   26c60:	f109 0901 	add.w	r9, r9, #1
   26c64:	2d00      	cmp	r5, #0
   26c66:	f47f af56 	bne.w	26b16 <getTrngSource+0x6e>
   26c6a:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   26c6e:	d85d      	bhi.n	26d2c <getTrngSource+0x284>
   26c70:	9d03      	ldr	r5, [sp, #12]
   26c72:	6962      	ldr	r2, [r4, #20]
   26c74:	4651      	mov	r1, sl
   26c76:	4628      	mov	r0, r5
   26c78:	f7ff fe80 	bl	2697c <LLF_RND_RepetitionCounterTest.part.0>
   26c7c:	2800      	cmp	r0, #0
   26c7e:	d04b      	beq.n	26d18 <getTrngSource+0x270>
   26c80:	9a16      	ldr	r2, [sp, #88]	; 0x58
   26c82:	2300      	movs	r3, #0
   26c84:	6013      	str	r3, [r2, #0]
   26c86:	4b2e      	ldr	r3, [pc, #184]	; (26d40 <getTrngSource+0x298>)
   26c88:	4298      	cmp	r0, r3
   26c8a:	f43f af5c 	beq.w	26b46 <getTrngSource+0x9e>
   26c8e:	9d04      	ldr	r5, [sp, #16]
   26c90:	2d08      	cmp	r5, #8
   26c92:	d034      	beq.n	26cfe <getTrngSource+0x256>
   26c94:	2200      	movs	r2, #0
   26c96:	ab04      	add	r3, sp, #16
   26c98:	006d      	lsls	r5, r5, #1
   26c9a:	9200      	str	r2, [sp, #0]
   26c9c:	4621      	mov	r1, r4
   26c9e:	4640      	mov	r0, r8
   26ca0:	9504      	str	r5, [sp, #16]
   26ca2:	f7ff fdc1 	bl	26828 <startTrngHW>
   26ca6:	4b31      	ldr	r3, [pc, #196]	; (26d6c <getTrngSource+0x2c4>)
   26ca8:	4298      	cmp	r0, r3
   26caa:	d024      	beq.n	26cf6 <getTrngSource+0x24e>
   26cac:	2800      	cmp	r0, #0
   26cae:	f47f af4a 	bne.w	26b46 <getTrngSource+0x9e>
   26cb2:	f8d8 2000 	ldr.w	r2, [r8]
   26cb6:	0a13      	lsrs	r3, r2, #8
   26cb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   26cbc:	4313      	orrs	r3, r2
   26cbe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   26cc2:	f8c8 3000 	str.w	r3, [r8]
   26cc6:	9b02      	ldr	r3, [sp, #8]
   26cc8:	3b01      	subs	r3, #1
   26cca:	9302      	str	r3, [sp, #8]
   26ccc:	f47f af18 	bne.w	26b00 <getTrngSource+0x58>
   26cd0:	2000      	movs	r0, #0
   26cd2:	e738      	b.n	26b46 <getTrngSource+0x9e>
   26cd4:	4630      	mov	r0, r6
   26cd6:	465a      	mov	r2, fp
   26cd8:	a906      	add	r1, sp, #24
   26cda:	f000 f939 	bl	26f50 <CC_PalMemCopyPlat>
   26cde:	eba5 050b 	sub.w	r5, r5, fp
   26ce2:	445e      	add	r6, fp
   26ce4:	e7bc      	b.n	26c60 <getTrngSource+0x1b8>
   26ce6:	4821      	ldr	r0, [pc, #132]	; (26d6c <getTrngSource+0x2c4>)
   26ce8:	e729      	b.n	26b3e <getTrngSource+0x96>
   26cea:	4821      	ldr	r0, [pc, #132]	; (26d70 <getTrngSource+0x2c8>)
   26cec:	e727      	b.n	26b3e <getTrngSource+0x96>
   26cee:	2703      	movs	r7, #3
   26cf0:	e74f      	b.n	26b92 <getTrngSource+0xea>
   26cf2:	2702      	movs	r7, #2
   26cf4:	e74d      	b.n	26b92 <getTrngSource+0xea>
   26cf6:	6a23      	ldr	r3, [r4, #32]
   26cf8:	2b00      	cmp	r3, #0
   26cfa:	f43f af24 	beq.w	26b46 <getTrngSource+0x9e>
   26cfe:	481d      	ldr	r0, [pc, #116]	; (26d74 <getTrngSource+0x2cc>)
   26d00:	e721      	b.n	26b46 <getTrngSource+0x9e>
   26d02:	9500      	str	r5, [sp, #0]
   26d04:	ab04      	add	r3, sp, #16
   26d06:	2201      	movs	r2, #1
   26d08:	4621      	mov	r1, r4
   26d0a:	4638      	mov	r0, r7
   26d0c:	f7ff fd8c 	bl	26828 <startTrngHW>
   26d10:	2800      	cmp	r0, #0
   26d12:	f43f aee6 	beq.w	26ae2 <getTrngSource+0x3a>
   26d16:	e716      	b.n	26b46 <getTrngSource+0x9e>
   26d18:	69a2      	ldr	r2, [r4, #24]
   26d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   26d1e:	4651      	mov	r1, sl
   26d20:	4628      	mov	r0, r5
   26d22:	f7ff fe59 	bl	269d8 <LLF_RND_AdaptiveProportionTest>
   26d26:	2800      	cmp	r0, #0
   26d28:	d1aa      	bne.n	26c80 <getTrngSource+0x1d8>
   26d2a:	e7d1      	b.n	26cd0 <getTrngSource+0x228>
   26d2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   26d2e:	601d      	str	r5, [r3, #0]
   26d30:	e7ad      	b.n	26c8e <getTrngSource+0x1e6>
   26d32:	bf00      	nop
   26d34:	5002b138 	.word	0x5002b138
   26d38:	5002b130 	.word	0x5002b130
   26d3c:	aaaaaaab 	.word	0xaaaaaaab
   26d40:	00f10c02 	.word	0x00f10c02
   26d44:	00f10c30 	.word	0x00f10c30
   26d48:	5002b1c4 	.word	0x5002b1c4
   26d4c:	5002b12c 	.word	0x5002b12c
   26d50:	5002b100 	.word	0x5002b100
   26d54:	0ffffffe 	.word	0x0ffffffe
   26d58:	5002b10c 	.word	0x5002b10c
   26d5c:	5002ba04 	.word	0x5002ba04
   26d60:	5002b1d8 	.word	0x5002b1d8
   26d64:	5002b114 	.word	0x5002b114
   26d68:	5002b118 	.word	0x5002b118
   26d6c:	00f10c31 	.word	0x00f10c31
   26d70:	00f10c35 	.word	0x00f10c35
   26d74:	00f10c32 	.word	0x00f10c32

00026d78 <LLF_RND_GetTrngSource>:
   26d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26d7c:	4e1f      	ldr	r6, [pc, #124]	; (26dfc <LLF_RND_GetTrngSource+0x84>)
   26d7e:	b084      	sub	sp, #16
   26d80:	4604      	mov	r4, r0
   26d82:	460d      	mov	r5, r1
   26d84:	6830      	ldr	r0, [r6, #0]
   26d86:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   26d88:	f04f 31ff 	mov.w	r1, #4294967295
   26d8c:	4690      	mov	r8, r2
   26d8e:	f7ff fcd9 	bl	26744 <CC_PalMutexLock>
   26d92:	b9d8      	cbnz	r0, 26dcc <LLF_RND_GetTrngSource+0x54>
   26d94:	2000      	movs	r0, #0
   26d96:	f7ff fd05 	bl	267a4 <CC_PalPowerSaveModeSelect>
   26d9a:	b9f8      	cbnz	r0, 26ddc <LLF_RND_GetTrngSource+0x64>
   26d9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   26d9e:	9200      	str	r2, [sp, #0]
   26da0:	2300      	movs	r3, #0
   26da2:	4620      	mov	r0, r4
   26da4:	9302      	str	r3, [sp, #8]
   26da6:	9701      	str	r7, [sp, #4]
   26da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26daa:	4642      	mov	r2, r8
   26dac:	4629      	mov	r1, r5
   26dae:	f7ff fe7b 	bl	26aa8 <getTrngSource>
   26db2:	4604      	mov	r4, r0
   26db4:	2001      	movs	r0, #1
   26db6:	f7ff fcf5 	bl	267a4 <CC_PalPowerSaveModeSelect>
   26dba:	b9d0      	cbnz	r0, 26df2 <LLF_RND_GetTrngSource+0x7a>
   26dbc:	6830      	ldr	r0, [r6, #0]
   26dbe:	f7ff fcc9 	bl	26754 <CC_PalMutexUnlock>
   26dc2:	b978      	cbnz	r0, 26de4 <LLF_RND_GetTrngSource+0x6c>
   26dc4:	4620      	mov	r0, r4
   26dc6:	b004      	add	sp, #16
   26dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26dcc:	480c      	ldr	r0, [pc, #48]	; (26e00 <LLF_RND_GetTrngSource+0x88>)
   26dce:	f7ff fac9 	bl	26364 <CC_PalAbort>
   26dd2:	2000      	movs	r0, #0
   26dd4:	f7ff fce6 	bl	267a4 <CC_PalPowerSaveModeSelect>
   26dd8:	2800      	cmp	r0, #0
   26dda:	d0df      	beq.n	26d9c <LLF_RND_GetTrngSource+0x24>
   26ddc:	4809      	ldr	r0, [pc, #36]	; (26e04 <LLF_RND_GetTrngSource+0x8c>)
   26dde:	f7ff fac1 	bl	26364 <CC_PalAbort>
   26de2:	e7db      	b.n	26d9c <LLF_RND_GetTrngSource+0x24>
   26de4:	4808      	ldr	r0, [pc, #32]	; (26e08 <LLF_RND_GetTrngSource+0x90>)
   26de6:	f7ff fabd 	bl	26364 <CC_PalAbort>
   26dea:	4620      	mov	r0, r4
   26dec:	b004      	add	sp, #16
   26dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26df2:	4806      	ldr	r0, [pc, #24]	; (26e0c <LLF_RND_GetTrngSource+0x94>)
   26df4:	f7ff fab6 	bl	26364 <CC_PalAbort>
   26df8:	e7e0      	b.n	26dbc <LLF_RND_GetTrngSource+0x44>
   26dfa:	bf00      	nop
   26dfc:	20001a1c 	.word	0x20001a1c
   26e00:	000301d8 	.word	0x000301d8
   26e04:	00030208 	.word	0x00030208
   26e08:	000301f0 	.word	0x000301f0
   26e0c:	00030228 	.word	0x00030228

00026e10 <LLF_RND_RunTrngStartupTest>:
   26e10:	b510      	push	{r4, lr}
   26e12:	b086      	sub	sp, #24
   26e14:	ab05      	add	r3, sp, #20
   26e16:	2401      	movs	r4, #1
   26e18:	e9cd 2401 	strd	r2, r4, [sp, #4]
   26e1c:	9300      	str	r3, [sp, #0]
   26e1e:	2200      	movs	r2, #0
   26e20:	ab04      	add	r3, sp, #16
   26e22:	f7ff fe41 	bl	26aa8 <getTrngSource>
   26e26:	b006      	add	sp, #24
   26e28:	bd10      	pop	{r4, pc}
   26e2a:	bf00      	nop

00026e2c <mbedtls_hardware_poll>:
   26e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26e30:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
   26e34:	460f      	mov	r7, r1
   26e36:	9205      	str	r2, [sp, #20]
   26e38:	2100      	movs	r1, #0
   26e3a:	4614      	mov	r4, r2
   26e3c:	a812      	add	r0, sp, #72	; 0x48
   26e3e:	f44f 7208 	mov.w	r2, #544	; 0x220
   26e42:	461e      	mov	r6, r3
   26e44:	f007 fa6c 	bl	2e320 <memset>
   26e48:	2100      	movs	r1, #0
   26e4a:	a808      	add	r0, sp, #32
   26e4c:	2228      	movs	r2, #40	; 0x28
   26e4e:	9106      	str	r1, [sp, #24]
   26e50:	f007 fa66 	bl	2e320 <memset>
   26e54:	2f00      	cmp	r7, #0
   26e56:	d03c      	beq.n	26ed2 <mbedtls_hardware_poll+0xa6>
   26e58:	2e00      	cmp	r6, #0
   26e5a:	d03a      	beq.n	26ed2 <mbedtls_hardware_poll+0xa6>
   26e5c:	2c00      	cmp	r4, #0
   26e5e:	d038      	beq.n	26ed2 <mbedtls_hardware_poll+0xa6>
   26e60:	2104      	movs	r1, #4
   26e62:	a806      	add	r0, sp, #24
   26e64:	f000 f876 	bl	26f54 <CC_PalMemSetZeroPlat>
   26e68:	a808      	add	r0, sp, #32
   26e6a:	2128      	movs	r1, #40	; 0x28
   26e6c:	f000 f872 	bl	26f54 <CC_PalMemSetZeroPlat>
   26e70:	a808      	add	r0, sp, #32
   26e72:	f000 f831 	bl	26ed8 <RNG_PLAT_SetUserRngParameters>
   26e76:	b178      	cbz	r0, 26e98 <mbedtls_hardware_poll+0x6c>
   26e78:	f04f 35ff 	mov.w	r5, #4294967295
   26e7c:	a812      	add	r0, sp, #72	; 0x48
   26e7e:	f44f 7108 	mov.w	r1, #544	; 0x220
   26e82:	f000 f90b 	bl	2709c <mbedtls_platform_zeroize>
   26e86:	a806      	add	r0, sp, #24
   26e88:	2104      	movs	r1, #4
   26e8a:	f000 f907 	bl	2709c <mbedtls_platform_zeroize>
   26e8e:	4628      	mov	r0, r5
   26e90:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   26e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26e98:	ab12      	add	r3, sp, #72	; 0x48
   26e9a:	f10d 081c 	add.w	r8, sp, #28
   26e9e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   26ea2:	9003      	str	r0, [sp, #12]
   26ea4:	4602      	mov	r2, r0
   26ea6:	ab05      	add	r3, sp, #20
   26ea8:	a908      	add	r1, sp, #32
   26eaa:	f8cd 8000 	str.w	r8, [sp]
   26eae:	a806      	add	r0, sp, #24
   26eb0:	f7ff ff62 	bl	26d78 <LLF_RND_GetTrngSource>
   26eb4:	4605      	mov	r5, r0
   26eb6:	2800      	cmp	r0, #0
   26eb8:	d1de      	bne.n	26e78 <mbedtls_hardware_poll+0x4c>
   26eba:	6833      	ldr	r3, [r6, #0]
   26ebc:	42a3      	cmp	r3, r4
   26ebe:	d3db      	bcc.n	26e78 <mbedtls_hardware_poll+0x4c>
   26ec0:	f8d8 1000 	ldr.w	r1, [r8]
   26ec4:	4638      	mov	r0, r7
   26ec6:	3108      	adds	r1, #8
   26ec8:	4622      	mov	r2, r4
   26eca:	f000 f841 	bl	26f50 <CC_PalMemCopyPlat>
   26ece:	6034      	str	r4, [r6, #0]
   26ed0:	e7d4      	b.n	26e7c <mbedtls_hardware_poll+0x50>
   26ed2:	f04f 35ff 	mov.w	r5, #4294967295
   26ed6:	e7da      	b.n	26e8e <mbedtls_hardware_poll+0x62>

00026ed8 <RNG_PLAT_SetUserRngParameters>:
   26ed8:	b530      	push	{r4, r5, lr}
   26eda:	b083      	sub	sp, #12
   26edc:	231c      	movs	r3, #28
   26ede:	a901      	add	r1, sp, #4
   26ee0:	4604      	mov	r4, r0
   26ee2:	9301      	str	r3, [sp, #4]
   26ee4:	f000 f83a 	bl	26f5c <CC_PalTrngParamGet>
   26ee8:	4605      	mov	r5, r0
   26eea:	b938      	cbnz	r0, 26efc <RNG_PLAT_SetUserRngParameters+0x24>
   26eec:	9b01      	ldr	r3, [sp, #4]
   26eee:	2b1c      	cmp	r3, #28
   26ef0:	d007      	beq.n	26f02 <RNG_PLAT_SetUserRngParameters+0x2a>
   26ef2:	4d15      	ldr	r5, [pc, #84]	; (26f48 <RNG_PLAT_SetUserRngParameters+0x70>)
   26ef4:	4620      	mov	r0, r4
   26ef6:	211c      	movs	r1, #28
   26ef8:	f000 f82c 	bl	26f54 <CC_PalMemSetZeroPlat>
   26efc:	4628      	mov	r0, r5
   26efe:	b003      	add	sp, #12
   26f00:	bd30      	pop	{r4, r5, pc}
   26f02:	e9d4 3200 	ldrd	r3, r2, [r4]
   26f06:	2101      	movs	r1, #1
   26f08:	3b00      	subs	r3, #0
   26f0a:	bf18      	it	ne
   26f0c:	2301      	movne	r3, #1
   26f0e:	61e1      	str	r1, [r4, #28]
   26f10:	b10a      	cbz	r2, 26f16 <RNG_PLAT_SetUserRngParameters+0x3e>
   26f12:	f043 0302 	orr.w	r3, r3, #2
   26f16:	68a2      	ldr	r2, [r4, #8]
   26f18:	b932      	cbnz	r2, 26f28 <RNG_PLAT_SetUserRngParameters+0x50>
   26f1a:	68e2      	ldr	r2, [r4, #12]
   26f1c:	b942      	cbnz	r2, 26f30 <RNG_PLAT_SetUserRngParameters+0x58>
   26f1e:	e9c4 3208 	strd	r3, r2, [r4, #32]
   26f22:	b97b      	cbnz	r3, 26f44 <RNG_PLAT_SetUserRngParameters+0x6c>
   26f24:	4d09      	ldr	r5, [pc, #36]	; (26f4c <RNG_PLAT_SetUserRngParameters+0x74>)
   26f26:	e7e5      	b.n	26ef4 <RNG_PLAT_SetUserRngParameters+0x1c>
   26f28:	68e2      	ldr	r2, [r4, #12]
   26f2a:	f043 0304 	orr.w	r3, r3, #4
   26f2e:	b13a      	cbz	r2, 26f40 <RNG_PLAT_SetUserRngParameters+0x68>
   26f30:	f043 0308 	orr.w	r3, r3, #8
   26f34:	2200      	movs	r2, #0
   26f36:	4628      	mov	r0, r5
   26f38:	e9c4 3208 	strd	r3, r2, [r4, #32]
   26f3c:	b003      	add	sp, #12
   26f3e:	bd30      	pop	{r4, r5, pc}
   26f40:	e9c4 3208 	strd	r3, r2, [r4, #32]
   26f44:	4615      	mov	r5, r2
   26f46:	e7d9      	b.n	26efc <RNG_PLAT_SetUserRngParameters+0x24>
   26f48:	00f00c37 	.word	0x00f00c37
   26f4c:	00f00c0e 	.word	0x00f00c0e

00026f50 <CC_PalMemCopyPlat>:
   26f50:	f007 b9cc 	b.w	2e2ec <memmove>

00026f54 <CC_PalMemSetZeroPlat>:
   26f54:	460a      	mov	r2, r1
   26f56:	2100      	movs	r1, #0
   26f58:	f007 b9e2 	b.w	2e320 <memset>

00026f5c <CC_PalTrngParamGet>:
   26f5c:	b118      	cbz	r0, 26f66 <CC_PalTrngParamGet+0xa>
   26f5e:	b111      	cbz	r1, 26f66 <CC_PalTrngParamGet+0xa>
   26f60:	680b      	ldr	r3, [r1, #0]
   26f62:	2b1c      	cmp	r3, #28
   26f64:	d001      	beq.n	26f6a <CC_PalTrngParamGet+0xe>
   26f66:	2001      	movs	r0, #1
   26f68:	4770      	bx	lr
   26f6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26f6e:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   26f72:	3201      	adds	r2, #1
   26f74:	bf14      	ite	ne
   26f76:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   26f7a:	f241 225c 	movweq	r2, #4700	; 0x125c
   26f7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26f82:	6002      	str	r2, [r0, #0]
   26f84:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   26f88:	3201      	adds	r2, #1
   26f8a:	bf14      	ite	ne
   26f8c:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   26f90:	f641 1264 	movweq	r2, #6500	; 0x1964
   26f94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26f98:	6042      	str	r2, [r0, #4]
   26f9a:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   26f9e:	3201      	adds	r2, #1
   26fa0:	bf14      	ite	ne
   26fa2:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   26fa6:	f640 62d8 	movweq	r2, #3800	; 0xed8
   26faa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26fae:	6082      	str	r2, [r0, #8]
   26fb0:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   26fb4:	3201      	adds	r2, #1
   26fb6:	bf14      	ite	ne
   26fb8:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   26fbc:	f241 3288 	movweq	r2, #5000	; 0x1388
   26fc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26fc4:	60c2      	str	r2, [r0, #12]
   26fc6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   26fca:	3201      	adds	r2, #1
   26fcc:	bf14      	ite	ne
   26fce:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   26fd2:	2290      	moveq	r2, #144	; 0x90
   26fd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26fd8:	6102      	str	r2, [r0, #16]
   26fda:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   26fde:	3201      	adds	r2, #1
   26fe0:	bf14      	ite	ne
   26fe2:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   26fe6:	2251      	moveq	r2, #81	; 0x51
   26fe8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26fec:	6142      	str	r2, [r0, #20]
   26fee:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   26ff2:	3201      	adds	r2, #1
   26ff4:	bf14      	ite	ne
   26ff6:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   26ffa:	f240 3337 	movweq	r3, #823	; 0x337
   26ffe:	6183      	str	r3, [r0, #24]
   27000:	2000      	movs	r0, #0
   27002:	4770      	bx	lr

00027004 <LLF_RND_WaitRngInterrupt>:
   27004:	b508      	push	{r3, lr}
   27006:	4601      	mov	r1, r0
   27008:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2700c:	f7ff fb1a 	bl	26644 <CC_HalWaitInterruptRND>
   27010:	4902      	ldr	r1, [pc, #8]	; (2701c <LLF_RND_WaitRngInterrupt+0x18>)
   27012:	4a03      	ldr	r2, [pc, #12]	; (27020 <LLF_RND_WaitRngInterrupt+0x1c>)
   27014:	2300      	movs	r3, #0
   27016:	600b      	str	r3, [r1, #0]
   27018:	6013      	str	r3, [r2, #0]
   2701a:	bd08      	pop	{r3, pc}
   2701c:	5002b1c8 	.word	0x5002b1c8
   27020:	5002b12c 	.word	0x5002b12c

00027024 <LLF_RND_GetRoscSampleCnt>:
   27024:	3801      	subs	r0, #1
   27026:	2807      	cmp	r0, #7
   27028:	d805      	bhi.n	27036 <LLF_RND_GetRoscSampleCnt+0x12>
   2702a:	e8df f000 	tbb	[pc, r0]
   2702e:	0e0a      	.short	0x0e0a
   27030:	04041204 	.word	0x04041204
   27034:	0604      	.short	0x0604
   27036:	4809      	ldr	r0, [pc, #36]	; (2705c <LLF_RND_GetRoscSampleCnt+0x38>)
   27038:	4770      	bx	lr
   2703a:	68cb      	ldr	r3, [r1, #12]
   2703c:	624b      	str	r3, [r1, #36]	; 0x24
   2703e:	2000      	movs	r0, #0
   27040:	4770      	bx	lr
   27042:	680b      	ldr	r3, [r1, #0]
   27044:	624b      	str	r3, [r1, #36]	; 0x24
   27046:	2000      	movs	r0, #0
   27048:	4770      	bx	lr
   2704a:	684b      	ldr	r3, [r1, #4]
   2704c:	624b      	str	r3, [r1, #36]	; 0x24
   2704e:	2000      	movs	r0, #0
   27050:	4770      	bx	lr
   27052:	688b      	ldr	r3, [r1, #8]
   27054:	624b      	str	r3, [r1, #36]	; 0x24
   27056:	2000      	movs	r0, #0
   27058:	4770      	bx	lr
   2705a:	bf00      	nop
   2705c:	00f10c31 	.word	0x00f10c31

00027060 <LLF_RND_GetFastestRosc>:
   27060:	680b      	ldr	r3, [r1, #0]
   27062:	e002      	b.n	2706a <LLF_RND_GetFastestRosc+0xa>
   27064:	2b08      	cmp	r3, #8
   27066:	600b      	str	r3, [r1, #0]
   27068:	d806      	bhi.n	27078 <LLF_RND_GetFastestRosc+0x18>
   2706a:	6a02      	ldr	r2, [r0, #32]
   2706c:	4213      	tst	r3, r2
   2706e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   27072:	d0f7      	beq.n	27064 <LLF_RND_GetFastestRosc+0x4>
   27074:	2000      	movs	r0, #0
   27076:	4770      	bx	lr
   27078:	4800      	ldr	r0, [pc, #0]	; (2707c <LLF_RND_GetFastestRosc+0x1c>)
   2707a:	4770      	bx	lr
   2707c:	00f10c31 	.word	0x00f10c31

00027080 <LLF_RND_TurnOffTrng>:
   27080:	4904      	ldr	r1, [pc, #16]	; (27094 <LLF_RND_TurnOffTrng+0x14>)
   27082:	4a05      	ldr	r2, [pc, #20]	; (27098 <LLF_RND_TurnOffTrng+0x18>)
   27084:	2300      	movs	r3, #0
   27086:	600b      	str	r3, [r1, #0]
   27088:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2708c:	6013      	str	r3, [r2, #0]
   2708e:	f7ff bac5 	b.w	2661c <CC_HalClearInterruptBit>
   27092:	bf00      	nop
   27094:	5002b12c 	.word	0x5002b12c
   27098:	5002b1c4 	.word	0x5002b1c4

0002709c <mbedtls_platform_zeroize>:
   2709c:	b138      	cbz	r0, 270ae <mbedtls_platform_zeroize+0x12>
   2709e:	b131      	cbz	r1, 270ae <mbedtls_platform_zeroize+0x12>
   270a0:	4401      	add	r1, r0
   270a2:	2200      	movs	r2, #0
   270a4:	4603      	mov	r3, r0
   270a6:	3001      	adds	r0, #1
   270a8:	4281      	cmp	r1, r0
   270aa:	701a      	strb	r2, [r3, #0]
   270ac:	d1fa      	bne.n	270a4 <mbedtls_platform_zeroize+0x8>
   270ae:	4770      	bx	lr

000270b0 <malloc>:
   270b0:	4b02      	ldr	r3, [pc, #8]	; (270bc <malloc+0xc>)
   270b2:	4601      	mov	r1, r0
   270b4:	6818      	ldr	r0, [r3, #0]
   270b6:	f000 b803 	b.w	270c0 <_malloc_r>
   270ba:	bf00      	nop
   270bc:	20001a20 	.word	0x20001a20

000270c0 <_malloc_r>:
   270c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   270c2:	1ccd      	adds	r5, r1, #3
   270c4:	f025 0503 	bic.w	r5, r5, #3
   270c8:	3508      	adds	r5, #8
   270ca:	2d0c      	cmp	r5, #12
   270cc:	bf38      	it	cc
   270ce:	250c      	movcc	r5, #12
   270d0:	2d00      	cmp	r5, #0
   270d2:	4606      	mov	r6, r0
   270d4:	db01      	blt.n	270da <_malloc_r+0x1a>
   270d6:	42a9      	cmp	r1, r5
   270d8:	d903      	bls.n	270e2 <_malloc_r+0x22>
   270da:	230c      	movs	r3, #12
   270dc:	6033      	str	r3, [r6, #0]
   270de:	2000      	movs	r0, #0
   270e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   270e2:	f000 faf9 	bl	276d8 <__malloc_lock>
   270e6:	4921      	ldr	r1, [pc, #132]	; (2716c <_malloc_r+0xac>)
   270e8:	680a      	ldr	r2, [r1, #0]
   270ea:	4614      	mov	r4, r2
   270ec:	b99c      	cbnz	r4, 27116 <_malloc_r+0x56>
   270ee:	4f20      	ldr	r7, [pc, #128]	; (27170 <_malloc_r+0xb0>)
   270f0:	683b      	ldr	r3, [r7, #0]
   270f2:	b923      	cbnz	r3, 270fe <_malloc_r+0x3e>
   270f4:	4621      	mov	r1, r4
   270f6:	4630      	mov	r0, r6
   270f8:	f000 fa58 	bl	275ac <_sbrk_r>
   270fc:	6038      	str	r0, [r7, #0]
   270fe:	4629      	mov	r1, r5
   27100:	4630      	mov	r0, r6
   27102:	f000 fa53 	bl	275ac <_sbrk_r>
   27106:	1c43      	adds	r3, r0, #1
   27108:	d123      	bne.n	27152 <_malloc_r+0x92>
   2710a:	230c      	movs	r3, #12
   2710c:	6033      	str	r3, [r6, #0]
   2710e:	4630      	mov	r0, r6
   27110:	f000 fae8 	bl	276e4 <__malloc_unlock>
   27114:	e7e3      	b.n	270de <_malloc_r+0x1e>
   27116:	6823      	ldr	r3, [r4, #0]
   27118:	1b5b      	subs	r3, r3, r5
   2711a:	d417      	bmi.n	2714c <_malloc_r+0x8c>
   2711c:	2b0b      	cmp	r3, #11
   2711e:	d903      	bls.n	27128 <_malloc_r+0x68>
   27120:	6023      	str	r3, [r4, #0]
   27122:	441c      	add	r4, r3
   27124:	6025      	str	r5, [r4, #0]
   27126:	e004      	b.n	27132 <_malloc_r+0x72>
   27128:	6863      	ldr	r3, [r4, #4]
   2712a:	42a2      	cmp	r2, r4
   2712c:	bf0c      	ite	eq
   2712e:	600b      	streq	r3, [r1, #0]
   27130:	6053      	strne	r3, [r2, #4]
   27132:	4630      	mov	r0, r6
   27134:	f000 fad6 	bl	276e4 <__malloc_unlock>
   27138:	f104 000b 	add.w	r0, r4, #11
   2713c:	1d23      	adds	r3, r4, #4
   2713e:	f020 0007 	bic.w	r0, r0, #7
   27142:	1ac2      	subs	r2, r0, r3
   27144:	d0cc      	beq.n	270e0 <_malloc_r+0x20>
   27146:	1a1b      	subs	r3, r3, r0
   27148:	50a3      	str	r3, [r4, r2]
   2714a:	e7c9      	b.n	270e0 <_malloc_r+0x20>
   2714c:	4622      	mov	r2, r4
   2714e:	6864      	ldr	r4, [r4, #4]
   27150:	e7cc      	b.n	270ec <_malloc_r+0x2c>
   27152:	1cc4      	adds	r4, r0, #3
   27154:	f024 0403 	bic.w	r4, r4, #3
   27158:	42a0      	cmp	r0, r4
   2715a:	d0e3      	beq.n	27124 <_malloc_r+0x64>
   2715c:	1a21      	subs	r1, r4, r0
   2715e:	4630      	mov	r0, r6
   27160:	f000 fa24 	bl	275ac <_sbrk_r>
   27164:	3001      	adds	r0, #1
   27166:	d1dd      	bne.n	27124 <_malloc_r+0x64>
   27168:	e7cf      	b.n	2710a <_malloc_r+0x4a>
   2716a:	bf00      	nop
   2716c:	20005504 	.word	0x20005504
   27170:	20005508 	.word	0x20005508

00027174 <_printf_float>:
   27174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27178:	b091      	sub	sp, #68	; 0x44
   2717a:	460c      	mov	r4, r1
   2717c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   2717e:	4693      	mov	fp, r2
   27180:	461e      	mov	r6, r3
   27182:	4605      	mov	r5, r0
   27184:	f000 faa4 	bl	276d0 <_localeconv_r>
   27188:	6803      	ldr	r3, [r0, #0]
   2718a:	9309      	str	r3, [sp, #36]	; 0x24
   2718c:	4618      	mov	r0, r3
   2718e:	f7da fe3b 	bl	1e08 <strlen>
   27192:	2300      	movs	r3, #0
   27194:	930e      	str	r3, [sp, #56]	; 0x38
   27196:	683b      	ldr	r3, [r7, #0]
   27198:	900a      	str	r0, [sp, #40]	; 0x28
   2719a:	3307      	adds	r3, #7
   2719c:	f023 0307 	bic.w	r3, r3, #7
   271a0:	f103 0208 	add.w	r2, r3, #8
   271a4:	f894 8018 	ldrb.w	r8, [r4, #24]
   271a8:	f8d4 a000 	ldr.w	sl, [r4]
   271ac:	603a      	str	r2, [r7, #0]
   271ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   271b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   271b6:	e9d4 9712 	ldrd	r9, r7, [r4, #72]	; 0x48
   271ba:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
   271be:	930b      	str	r3, [sp, #44]	; 0x2c
   271c0:	f04f 32ff 	mov.w	r2, #4294967295
   271c4:	4ba5      	ldr	r3, [pc, #660]	; (2745c <_printf_float+0x2e8>)
   271c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   271c8:	4648      	mov	r0, r9
   271ca:	f7da fdfd 	bl	1dc8 <__aeabi_dcmpun>
   271ce:	bb68      	cbnz	r0, 2722c <_printf_float+0xb8>
   271d0:	f04f 32ff 	mov.w	r2, #4294967295
   271d4:	4ba1      	ldr	r3, [pc, #644]	; (2745c <_printf_float+0x2e8>)
   271d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   271d8:	4648      	mov	r0, r9
   271da:	f7da fdd7 	bl	1d8c <__aeabi_dcmple>
   271de:	bb28      	cbnz	r0, 2722c <_printf_float+0xb8>
   271e0:	2200      	movs	r2, #0
   271e2:	2300      	movs	r3, #0
   271e4:	4648      	mov	r0, r9
   271e6:	4639      	mov	r1, r7
   271e8:	f7da fdc6 	bl	1d78 <__aeabi_dcmplt>
   271ec:	b110      	cbz	r0, 271f4 <_printf_float+0x80>
   271ee:	232d      	movs	r3, #45	; 0x2d
   271f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   271f4:	4f9a      	ldr	r7, [pc, #616]	; (27460 <_printf_float+0x2ec>)
   271f6:	4b9b      	ldr	r3, [pc, #620]	; (27464 <_printf_float+0x2f0>)
   271f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   271fc:	bf88      	it	hi
   271fe:	461f      	movhi	r7, r3
   27200:	2303      	movs	r3, #3
   27202:	6123      	str	r3, [r4, #16]
   27204:	f02a 0304 	bic.w	r3, sl, #4
   27208:	6023      	str	r3, [r4, #0]
   2720a:	f04f 0900 	mov.w	r9, #0
   2720e:	9600      	str	r6, [sp, #0]
   27210:	465b      	mov	r3, fp
   27212:	aa0f      	add	r2, sp, #60	; 0x3c
   27214:	4621      	mov	r1, r4
   27216:	4628      	mov	r0, r5
   27218:	f007 f923 	bl	2e462 <_printf_common>
   2721c:	3001      	adds	r0, #1
   2721e:	f040 808e 	bne.w	2733e <_printf_float+0x1ca>
   27222:	f04f 30ff 	mov.w	r0, #4294967295
   27226:	b011      	add	sp, #68	; 0x44
   27228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2722c:	464a      	mov	r2, r9
   2722e:	463b      	mov	r3, r7
   27230:	4648      	mov	r0, r9
   27232:	4639      	mov	r1, r7
   27234:	f7da fdc8 	bl	1dc8 <__aeabi_dcmpun>
   27238:	b138      	cbz	r0, 2724a <_printf_float+0xd6>
   2723a:	2f00      	cmp	r7, #0
   2723c:	bfbc      	itt	lt
   2723e:	232d      	movlt	r3, #45	; 0x2d
   27240:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   27244:	4f88      	ldr	r7, [pc, #544]	; (27468 <_printf_float+0x2f4>)
   27246:	4b89      	ldr	r3, [pc, #548]	; (2746c <_printf_float+0x2f8>)
   27248:	e7d6      	b.n	271f8 <_printf_float+0x84>
   2724a:	6863      	ldr	r3, [r4, #4]
   2724c:	1c5a      	adds	r2, r3, #1
   2724e:	f008 01df 	and.w	r1, r8, #223	; 0xdf
   27252:	d142      	bne.n	272da <_printf_float+0x166>
   27254:	2306      	movs	r3, #6
   27256:	6063      	str	r3, [r4, #4]
   27258:	2200      	movs	r2, #0
   2725a:	9206      	str	r2, [sp, #24]
   2725c:	aa0e      	add	r2, sp, #56	; 0x38
   2725e:	e9cd 8204 	strd	r8, r2, [sp, #16]
   27262:	aa0d      	add	r2, sp, #52	; 0x34
   27264:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
   27268:	9203      	str	r2, [sp, #12]
   2726a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   2726e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   27272:	6023      	str	r3, [r4, #0]
   27274:	6863      	ldr	r3, [r4, #4]
   27276:	9300      	str	r3, [sp, #0]
   27278:	464a      	mov	r2, r9
   2727a:	463b      	mov	r3, r7
   2727c:	4628      	mov	r0, r5
   2727e:	910b      	str	r1, [sp, #44]	; 0x2c
   27280:	f007 f85f 	bl	2e342 <__cvt>
   27284:	990b      	ldr	r1, [sp, #44]	; 0x2c
   27286:	2947      	cmp	r1, #71	; 0x47
   27288:	4607      	mov	r7, r0
   2728a:	990d      	ldr	r1, [sp, #52]	; 0x34
   2728c:	d108      	bne.n	272a0 <_printf_float+0x12c>
   2728e:	1cc8      	adds	r0, r1, #3
   27290:	db02      	blt.n	27298 <_printf_float+0x124>
   27292:	6863      	ldr	r3, [r4, #4]
   27294:	4299      	cmp	r1, r3
   27296:	dd40      	ble.n	2731a <_printf_float+0x1a6>
   27298:	f1a8 0802 	sub.w	r8, r8, #2
   2729c:	fa5f f888 	uxtb.w	r8, r8
   272a0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   272a4:	d81f      	bhi.n	272e6 <_printf_float+0x172>
   272a6:	3901      	subs	r1, #1
   272a8:	4642      	mov	r2, r8
   272aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
   272ae:	910d      	str	r1, [sp, #52]	; 0x34
   272b0:	f007 f8a5 	bl	2e3fe <__exponent>
   272b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   272b6:	1813      	adds	r3, r2, r0
   272b8:	2a01      	cmp	r2, #1
   272ba:	4681      	mov	r9, r0
   272bc:	6123      	str	r3, [r4, #16]
   272be:	dc02      	bgt.n	272c6 <_printf_float+0x152>
   272c0:	6822      	ldr	r2, [r4, #0]
   272c2:	07d2      	lsls	r2, r2, #31
   272c4:	d501      	bpl.n	272ca <_printf_float+0x156>
   272c6:	3301      	adds	r3, #1
   272c8:	6123      	str	r3, [r4, #16]
   272ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   272ce:	2b00      	cmp	r3, #0
   272d0:	d09d      	beq.n	2720e <_printf_float+0x9a>
   272d2:	232d      	movs	r3, #45	; 0x2d
   272d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   272d8:	e799      	b.n	2720e <_printf_float+0x9a>
   272da:	2947      	cmp	r1, #71	; 0x47
   272dc:	d1bc      	bne.n	27258 <_printf_float+0xe4>
   272de:	2b00      	cmp	r3, #0
   272e0:	d1ba      	bne.n	27258 <_printf_float+0xe4>
   272e2:	2301      	movs	r3, #1
   272e4:	e7b7      	b.n	27256 <_printf_float+0xe2>
   272e6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   272ea:	d118      	bne.n	2731e <_printf_float+0x1aa>
   272ec:	2900      	cmp	r1, #0
   272ee:	6863      	ldr	r3, [r4, #4]
   272f0:	dd0b      	ble.n	2730a <_printf_float+0x196>
   272f2:	6121      	str	r1, [r4, #16]
   272f4:	b913      	cbnz	r3, 272fc <_printf_float+0x188>
   272f6:	6822      	ldr	r2, [r4, #0]
   272f8:	07d0      	lsls	r0, r2, #31
   272fa:	d502      	bpl.n	27302 <_printf_float+0x18e>
   272fc:	3301      	adds	r3, #1
   272fe:	440b      	add	r3, r1
   27300:	6123      	str	r3, [r4, #16]
   27302:	65a1      	str	r1, [r4, #88]	; 0x58
   27304:	f04f 0900 	mov.w	r9, #0
   27308:	e7df      	b.n	272ca <_printf_float+0x156>
   2730a:	b913      	cbnz	r3, 27312 <_printf_float+0x19e>
   2730c:	6822      	ldr	r2, [r4, #0]
   2730e:	07d2      	lsls	r2, r2, #31
   27310:	d501      	bpl.n	27316 <_printf_float+0x1a2>
   27312:	3302      	adds	r3, #2
   27314:	e7f4      	b.n	27300 <_printf_float+0x18c>
   27316:	2301      	movs	r3, #1
   27318:	e7f2      	b.n	27300 <_printf_float+0x18c>
   2731a:	f04f 0867 	mov.w	r8, #103	; 0x67
   2731e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27320:	4299      	cmp	r1, r3
   27322:	db05      	blt.n	27330 <_printf_float+0x1bc>
   27324:	6823      	ldr	r3, [r4, #0]
   27326:	6121      	str	r1, [r4, #16]
   27328:	07d8      	lsls	r0, r3, #31
   2732a:	d5ea      	bpl.n	27302 <_printf_float+0x18e>
   2732c:	1c4b      	adds	r3, r1, #1
   2732e:	e7e7      	b.n	27300 <_printf_float+0x18c>
   27330:	2900      	cmp	r1, #0
   27332:	bfd4      	ite	le
   27334:	f1c1 0202 	rsble	r2, r1, #2
   27338:	2201      	movgt	r2, #1
   2733a:	4413      	add	r3, r2
   2733c:	e7e0      	b.n	27300 <_printf_float+0x18c>
   2733e:	6823      	ldr	r3, [r4, #0]
   27340:	055a      	lsls	r2, r3, #21
   27342:	d407      	bmi.n	27354 <_printf_float+0x1e0>
   27344:	6923      	ldr	r3, [r4, #16]
   27346:	463a      	mov	r2, r7
   27348:	4659      	mov	r1, fp
   2734a:	4628      	mov	r0, r5
   2734c:	47b0      	blx	r6
   2734e:	3001      	adds	r0, #1
   27350:	d129      	bne.n	273a6 <_printf_float+0x232>
   27352:	e766      	b.n	27222 <_printf_float+0xae>
   27354:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   27358:	f240 80d7 	bls.w	2750a <_printf_float+0x396>
   2735c:	2200      	movs	r2, #0
   2735e:	2300      	movs	r3, #0
   27360:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   27364:	f7da fcfe 	bl	1d64 <__aeabi_dcmpeq>
   27368:	b388      	cbz	r0, 273ce <_printf_float+0x25a>
   2736a:	2301      	movs	r3, #1
   2736c:	4a40      	ldr	r2, [pc, #256]	; (27470 <_printf_float+0x2fc>)
   2736e:	4659      	mov	r1, fp
   27370:	4628      	mov	r0, r5
   27372:	47b0      	blx	r6
   27374:	3001      	adds	r0, #1
   27376:	f43f af54 	beq.w	27222 <_printf_float+0xae>
   2737a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2737e:	429a      	cmp	r2, r3
   27380:	db02      	blt.n	27388 <_printf_float+0x214>
   27382:	6823      	ldr	r3, [r4, #0]
   27384:	07d8      	lsls	r0, r3, #31
   27386:	d50e      	bpl.n	273a6 <_printf_float+0x232>
   27388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2738c:	4659      	mov	r1, fp
   2738e:	4628      	mov	r0, r5
   27390:	47b0      	blx	r6
   27392:	3001      	adds	r0, #1
   27394:	f43f af45 	beq.w	27222 <_printf_float+0xae>
   27398:	2700      	movs	r7, #0
   2739a:	f104 081a 	add.w	r8, r4, #26
   2739e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   273a0:	3b01      	subs	r3, #1
   273a2:	42bb      	cmp	r3, r7
   273a4:	dc09      	bgt.n	273ba <_printf_float+0x246>
   273a6:	6823      	ldr	r3, [r4, #0]
   273a8:	079f      	lsls	r7, r3, #30
   273aa:	f100 80fa 	bmi.w	275a2 <_printf_float+0x42e>
   273ae:	68e0      	ldr	r0, [r4, #12]
   273b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   273b2:	4298      	cmp	r0, r3
   273b4:	bfb8      	it	lt
   273b6:	4618      	movlt	r0, r3
   273b8:	e735      	b.n	27226 <_printf_float+0xb2>
   273ba:	2301      	movs	r3, #1
   273bc:	4642      	mov	r2, r8
   273be:	4659      	mov	r1, fp
   273c0:	4628      	mov	r0, r5
   273c2:	47b0      	blx	r6
   273c4:	3001      	adds	r0, #1
   273c6:	f43f af2c 	beq.w	27222 <_printf_float+0xae>
   273ca:	3701      	adds	r7, #1
   273cc:	e7e7      	b.n	2739e <_printf_float+0x22a>
   273ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   273d0:	2b00      	cmp	r3, #0
   273d2:	dc2b      	bgt.n	2742c <_printf_float+0x2b8>
   273d4:	2301      	movs	r3, #1
   273d6:	4a26      	ldr	r2, [pc, #152]	; (27470 <_printf_float+0x2fc>)
   273d8:	4659      	mov	r1, fp
   273da:	4628      	mov	r0, r5
   273dc:	47b0      	blx	r6
   273de:	3001      	adds	r0, #1
   273e0:	f43f af1f 	beq.w	27222 <_printf_float+0xae>
   273e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   273e8:	4313      	orrs	r3, r2
   273ea:	d102      	bne.n	273f2 <_printf_float+0x27e>
   273ec:	6823      	ldr	r3, [r4, #0]
   273ee:	07d9      	lsls	r1, r3, #31
   273f0:	d5d9      	bpl.n	273a6 <_printf_float+0x232>
   273f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   273f6:	4659      	mov	r1, fp
   273f8:	4628      	mov	r0, r5
   273fa:	47b0      	blx	r6
   273fc:	3001      	adds	r0, #1
   273fe:	f43f af10 	beq.w	27222 <_printf_float+0xae>
   27402:	f04f 0800 	mov.w	r8, #0
   27406:	f104 091a 	add.w	r9, r4, #26
   2740a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2740c:	425b      	negs	r3, r3
   2740e:	4543      	cmp	r3, r8
   27410:	dc01      	bgt.n	27416 <_printf_float+0x2a2>
   27412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27414:	e797      	b.n	27346 <_printf_float+0x1d2>
   27416:	2301      	movs	r3, #1
   27418:	464a      	mov	r2, r9
   2741a:	4659      	mov	r1, fp
   2741c:	4628      	mov	r0, r5
   2741e:	47b0      	blx	r6
   27420:	3001      	adds	r0, #1
   27422:	f43f aefe 	beq.w	27222 <_printf_float+0xae>
   27426:	f108 0801 	add.w	r8, r8, #1
   2742a:	e7ee      	b.n	2740a <_printf_float+0x296>
   2742c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2742e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   27430:	429a      	cmp	r2, r3
   27432:	bfa8      	it	ge
   27434:	461a      	movge	r2, r3
   27436:	2a00      	cmp	r2, #0
   27438:	4690      	mov	r8, r2
   2743a:	dd07      	ble.n	2744c <_printf_float+0x2d8>
   2743c:	4613      	mov	r3, r2
   2743e:	4659      	mov	r1, fp
   27440:	463a      	mov	r2, r7
   27442:	4628      	mov	r0, r5
   27444:	47b0      	blx	r6
   27446:	3001      	adds	r0, #1
   27448:	f43f aeeb 	beq.w	27222 <_printf_float+0xae>
   2744c:	f104 031a 	add.w	r3, r4, #26
   27450:	f04f 0a00 	mov.w	sl, #0
   27454:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   27458:	930b      	str	r3, [sp, #44]	; 0x2c
   2745a:	e015      	b.n	27488 <_printf_float+0x314>
   2745c:	7fefffff 	.word	0x7fefffff
   27460:	00036e64 	.word	0x00036e64
   27464:	00036e68 	.word	0x00036e68
   27468:	00036e6c 	.word	0x00036e6c
   2746c:	00036e70 	.word	0x00036e70
   27470:	0003148f 	.word	0x0003148f
   27474:	2301      	movs	r3, #1
   27476:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   27478:	4659      	mov	r1, fp
   2747a:	4628      	mov	r0, r5
   2747c:	47b0      	blx	r6
   2747e:	3001      	adds	r0, #1
   27480:	f43f aecf 	beq.w	27222 <_printf_float+0xae>
   27484:	f10a 0a01 	add.w	sl, sl, #1
   27488:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
   2748c:	eba9 0308 	sub.w	r3, r9, r8
   27490:	4553      	cmp	r3, sl
   27492:	dcef      	bgt.n	27474 <_printf_float+0x300>
   27494:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   27498:	429a      	cmp	r2, r3
   2749a:	db1a      	blt.n	274d2 <_printf_float+0x35e>
   2749c:	6823      	ldr	r3, [r4, #0]
   2749e:	07da      	lsls	r2, r3, #31
   274a0:	d417      	bmi.n	274d2 <_printf_float+0x35e>
   274a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   274a6:	4591      	cmp	r9, r2
   274a8:	db1b      	blt.n	274e2 <_printf_float+0x36e>
   274aa:	eba3 0809 	sub.w	r8, r3, r9
   274ae:	f1b8 0f00 	cmp.w	r8, #0
   274b2:	dd08      	ble.n	274c6 <_printf_float+0x352>
   274b4:	4643      	mov	r3, r8
   274b6:	eb07 0209 	add.w	r2, r7, r9
   274ba:	4659      	mov	r1, fp
   274bc:	4628      	mov	r0, r5
   274be:	47b0      	blx	r6
   274c0:	3001      	adds	r0, #1
   274c2:	f43f aeae 	beq.w	27222 <_printf_float+0xae>
   274c6:	2700      	movs	r7, #0
   274c8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   274cc:	f104 091a 	add.w	r9, r4, #26
   274d0:	e013      	b.n	274fa <_printf_float+0x386>
   274d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   274d6:	4659      	mov	r1, fp
   274d8:	4628      	mov	r0, r5
   274da:	47b0      	blx	r6
   274dc:	3001      	adds	r0, #1
   274de:	d1e0      	bne.n	274a2 <_printf_float+0x32e>
   274e0:	e69f      	b.n	27222 <_printf_float+0xae>
   274e2:	eba3 0802 	sub.w	r8, r3, r2
   274e6:	e7e2      	b.n	274ae <_printf_float+0x33a>
   274e8:	2301      	movs	r3, #1
   274ea:	464a      	mov	r2, r9
   274ec:	4659      	mov	r1, fp
   274ee:	4628      	mov	r0, r5
   274f0:	47b0      	blx	r6
   274f2:	3001      	adds	r0, #1
   274f4:	f43f ae95 	beq.w	27222 <_printf_float+0xae>
   274f8:	3701      	adds	r7, #1
   274fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   274fe:	1a9b      	subs	r3, r3, r2
   27500:	eba3 0308 	sub.w	r3, r3, r8
   27504:	42bb      	cmp	r3, r7
   27506:	dcef      	bgt.n	274e8 <_printf_float+0x374>
   27508:	e74d      	b.n	273a6 <_printf_float+0x232>
   2750a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2750c:	2a01      	cmp	r2, #1
   2750e:	dc01      	bgt.n	27514 <_printf_float+0x3a0>
   27510:	07db      	lsls	r3, r3, #31
   27512:	d534      	bpl.n	2757e <_printf_float+0x40a>
   27514:	2301      	movs	r3, #1
   27516:	463a      	mov	r2, r7
   27518:	4659      	mov	r1, fp
   2751a:	4628      	mov	r0, r5
   2751c:	47b0      	blx	r6
   2751e:	3001      	adds	r0, #1
   27520:	f43f ae7f 	beq.w	27222 <_printf_float+0xae>
   27524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   27528:	4659      	mov	r1, fp
   2752a:	4628      	mov	r0, r5
   2752c:	47b0      	blx	r6
   2752e:	3001      	adds	r0, #1
   27530:	f43f ae77 	beq.w	27222 <_printf_float+0xae>
   27534:	2200      	movs	r2, #0
   27536:	2300      	movs	r3, #0
   27538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2753c:	f7da fc12 	bl	1d64 <__aeabi_dcmpeq>
   27540:	b9c8      	cbnz	r0, 27576 <_printf_float+0x402>
   27542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27544:	1c7a      	adds	r2, r7, #1
   27546:	3b01      	subs	r3, #1
   27548:	4659      	mov	r1, fp
   2754a:	4628      	mov	r0, r5
   2754c:	47b0      	blx	r6
   2754e:	3001      	adds	r0, #1
   27550:	d10d      	bne.n	2756e <_printf_float+0x3fa>
   27552:	e666      	b.n	27222 <_printf_float+0xae>
   27554:	2301      	movs	r3, #1
   27556:	4642      	mov	r2, r8
   27558:	4659      	mov	r1, fp
   2755a:	4628      	mov	r0, r5
   2755c:	47b0      	blx	r6
   2755e:	3001      	adds	r0, #1
   27560:	f43f ae5f 	beq.w	27222 <_printf_float+0xae>
   27564:	3701      	adds	r7, #1
   27566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27568:	3b01      	subs	r3, #1
   2756a:	42bb      	cmp	r3, r7
   2756c:	dcf2      	bgt.n	27554 <_printf_float+0x3e0>
   2756e:	464b      	mov	r3, r9
   27570:	f104 0250 	add.w	r2, r4, #80	; 0x50
   27574:	e6e8      	b.n	27348 <_printf_float+0x1d4>
   27576:	2700      	movs	r7, #0
   27578:	f104 081a 	add.w	r8, r4, #26
   2757c:	e7f3      	b.n	27566 <_printf_float+0x3f2>
   2757e:	2301      	movs	r3, #1
   27580:	463a      	mov	r2, r7
   27582:	e7e1      	b.n	27548 <_printf_float+0x3d4>
   27584:	2301      	movs	r3, #1
   27586:	4642      	mov	r2, r8
   27588:	4659      	mov	r1, fp
   2758a:	4628      	mov	r0, r5
   2758c:	47b0      	blx	r6
   2758e:	3001      	adds	r0, #1
   27590:	f43f ae47 	beq.w	27222 <_printf_float+0xae>
   27594:	3701      	adds	r7, #1
   27596:	68e3      	ldr	r3, [r4, #12]
   27598:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2759a:	1a9b      	subs	r3, r3, r2
   2759c:	42bb      	cmp	r3, r7
   2759e:	dcf1      	bgt.n	27584 <_printf_float+0x410>
   275a0:	e705      	b.n	273ae <_printf_float+0x23a>
   275a2:	2700      	movs	r7, #0
   275a4:	f104 0819 	add.w	r8, r4, #25
   275a8:	e7f5      	b.n	27596 <_printf_float+0x422>
   275aa:	bf00      	nop

000275ac <_sbrk_r>:
   275ac:	b538      	push	{r3, r4, r5, lr}
   275ae:	4c06      	ldr	r4, [pc, #24]	; (275c8 <_sbrk_r+0x1c>)
   275b0:	2300      	movs	r3, #0
   275b2:	4605      	mov	r5, r0
   275b4:	4608      	mov	r0, r1
   275b6:	6023      	str	r3, [r4, #0]
   275b8:	f7e0 ff3c 	bl	8434 <_sbrk>
   275bc:	1c43      	adds	r3, r0, #1
   275be:	d102      	bne.n	275c6 <_sbrk_r+0x1a>
   275c0:	6823      	ldr	r3, [r4, #0]
   275c2:	b103      	cbz	r3, 275c6 <_sbrk_r+0x1a>
   275c4:	602b      	str	r3, [r5, #0]
   275c6:	bd38      	pop	{r3, r4, r5, pc}
   275c8:	200058a0 	.word	0x200058a0

000275cc <_strtol_l.isra.0>:
   275cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   275d0:	4f39      	ldr	r7, [pc, #228]	; (276b8 <_strtol_l.isra.0+0xec>)
   275d2:	4686      	mov	lr, r0
   275d4:	4608      	mov	r0, r1
   275d6:	4605      	mov	r5, r0
   275d8:	f815 4b01 	ldrb.w	r4, [r5], #1
   275dc:	5de6      	ldrb	r6, [r4, r7]
   275de:	f016 0608 	ands.w	r6, r6, #8
   275e2:	d134      	bne.n	2764e <_strtol_l.isra.0+0x82>
   275e4:	2c2d      	cmp	r4, #45	; 0x2d
   275e6:	d134      	bne.n	27652 <_strtol_l.isra.0+0x86>
   275e8:	782c      	ldrb	r4, [r5, #0]
   275ea:	f04f 0801 	mov.w	r8, #1
   275ee:	1c85      	adds	r5, r0, #2
   275f0:	2b00      	cmp	r3, #0
   275f2:	d05c      	beq.n	276ae <_strtol_l.isra.0+0xe2>
   275f4:	2b10      	cmp	r3, #16
   275f6:	d109      	bne.n	2760c <_strtol_l.isra.0+0x40>
   275f8:	2c30      	cmp	r4, #48	; 0x30
   275fa:	d107      	bne.n	2760c <_strtol_l.isra.0+0x40>
   275fc:	7828      	ldrb	r0, [r5, #0]
   275fe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   27602:	2858      	cmp	r0, #88	; 0x58
   27604:	d14e      	bne.n	276a4 <_strtol_l.isra.0+0xd8>
   27606:	786c      	ldrb	r4, [r5, #1]
   27608:	2310      	movs	r3, #16
   2760a:	3502      	adds	r5, #2
   2760c:	f1b8 0f00 	cmp.w	r8, #0
   27610:	bf14      	ite	ne
   27612:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   27616:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   2761a:	2700      	movs	r7, #0
   2761c:	fbbc f9f3 	udiv	r9, ip, r3
   27620:	4638      	mov	r0, r7
   27622:	fb03 ca19 	mls	sl, r3, r9, ip
   27626:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2762a:	2e09      	cmp	r6, #9
   2762c:	d818      	bhi.n	27660 <_strtol_l.isra.0+0x94>
   2762e:	4634      	mov	r4, r6
   27630:	42a3      	cmp	r3, r4
   27632:	dd24      	ble.n	2767e <_strtol_l.isra.0+0xb2>
   27634:	1c7e      	adds	r6, r7, #1
   27636:	d007      	beq.n	27648 <_strtol_l.isra.0+0x7c>
   27638:	4581      	cmp	r9, r0
   2763a:	d31d      	bcc.n	27678 <_strtol_l.isra.0+0xac>
   2763c:	d101      	bne.n	27642 <_strtol_l.isra.0+0x76>
   2763e:	45a2      	cmp	sl, r4
   27640:	db1a      	blt.n	27678 <_strtol_l.isra.0+0xac>
   27642:	fb00 4003 	mla	r0, r0, r3, r4
   27646:	2701      	movs	r7, #1
   27648:	f815 4b01 	ldrb.w	r4, [r5], #1
   2764c:	e7eb      	b.n	27626 <_strtol_l.isra.0+0x5a>
   2764e:	4628      	mov	r0, r5
   27650:	e7c1      	b.n	275d6 <_strtol_l.isra.0+0xa>
   27652:	2c2b      	cmp	r4, #43	; 0x2b
   27654:	bf08      	it	eq
   27656:	782c      	ldrbeq	r4, [r5, #0]
   27658:	46b0      	mov	r8, r6
   2765a:	bf08      	it	eq
   2765c:	1c85      	addeq	r5, r0, #2
   2765e:	e7c7      	b.n	275f0 <_strtol_l.isra.0+0x24>
   27660:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   27664:	2e19      	cmp	r6, #25
   27666:	d801      	bhi.n	2766c <_strtol_l.isra.0+0xa0>
   27668:	3c37      	subs	r4, #55	; 0x37
   2766a:	e7e1      	b.n	27630 <_strtol_l.isra.0+0x64>
   2766c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   27670:	2e19      	cmp	r6, #25
   27672:	d804      	bhi.n	2767e <_strtol_l.isra.0+0xb2>
   27674:	3c57      	subs	r4, #87	; 0x57
   27676:	e7db      	b.n	27630 <_strtol_l.isra.0+0x64>
   27678:	f04f 37ff 	mov.w	r7, #4294967295
   2767c:	e7e4      	b.n	27648 <_strtol_l.isra.0+0x7c>
   2767e:	1c7b      	adds	r3, r7, #1
   27680:	d106      	bne.n	27690 <_strtol_l.isra.0+0xc4>
   27682:	2322      	movs	r3, #34	; 0x22
   27684:	f8ce 3000 	str.w	r3, [lr]
   27688:	4660      	mov	r0, ip
   2768a:	b942      	cbnz	r2, 2769e <_strtol_l.isra.0+0xd2>
   2768c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27690:	f1b8 0f00 	cmp.w	r8, #0
   27694:	d000      	beq.n	27698 <_strtol_l.isra.0+0xcc>
   27696:	4240      	negs	r0, r0
   27698:	2a00      	cmp	r2, #0
   2769a:	d0f7      	beq.n	2768c <_strtol_l.isra.0+0xc0>
   2769c:	b107      	cbz	r7, 276a0 <_strtol_l.isra.0+0xd4>
   2769e:	1e69      	subs	r1, r5, #1
   276a0:	6011      	str	r1, [r2, #0]
   276a2:	e7f3      	b.n	2768c <_strtol_l.isra.0+0xc0>
   276a4:	2430      	movs	r4, #48	; 0x30
   276a6:	2b00      	cmp	r3, #0
   276a8:	d1b0      	bne.n	2760c <_strtol_l.isra.0+0x40>
   276aa:	2308      	movs	r3, #8
   276ac:	e7ae      	b.n	2760c <_strtol_l.isra.0+0x40>
   276ae:	2c30      	cmp	r4, #48	; 0x30
   276b0:	d0a4      	beq.n	275fc <_strtol_l.isra.0+0x30>
   276b2:	230a      	movs	r3, #10
   276b4:	e7aa      	b.n	2760c <_strtol_l.isra.0+0x40>
   276b6:	bf00      	nop
   276b8:	00036d64 	.word	0x00036d64

000276bc <strtol>:
   276bc:	4613      	mov	r3, r2
   276be:	460a      	mov	r2, r1
   276c0:	4601      	mov	r1, r0
   276c2:	4802      	ldr	r0, [pc, #8]	; (276cc <strtol+0x10>)
   276c4:	6800      	ldr	r0, [r0, #0]
   276c6:	f7ff bf81 	b.w	275cc <_strtol_l.isra.0>
   276ca:	bf00      	nop
   276cc:	20001a20 	.word	0x20001a20

000276d0 <_localeconv_r>:
   276d0:	4800      	ldr	r0, [pc, #0]	; (276d4 <_localeconv_r+0x4>)
   276d2:	4770      	bx	lr
   276d4:	20001b74 	.word	0x20001b74

000276d8 <__malloc_lock>:
   276d8:	4801      	ldr	r0, [pc, #4]	; (276e0 <__malloc_lock+0x8>)
   276da:	f007 bab4 	b.w	2ec46 <__retarget_lock_acquire_recursive>
   276de:	bf00      	nop
   276e0:	200058a8 	.word	0x200058a8

000276e4 <__malloc_unlock>:
   276e4:	4801      	ldr	r0, [pc, #4]	; (276ec <__malloc_unlock+0x8>)
   276e6:	f007 baaf 	b.w	2ec48 <__retarget_lock_release_recursive>
   276ea:	bf00      	nop
   276ec:	200058a8 	.word	0x200058a8

000276f0 <__pow5mult>:
   276f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   276f4:	4615      	mov	r5, r2
   276f6:	f012 0203 	ands.w	r2, r2, #3
   276fa:	4606      	mov	r6, r0
   276fc:	460f      	mov	r7, r1
   276fe:	d007      	beq.n	27710 <__pow5mult+0x20>
   27700:	3a01      	subs	r2, #1
   27702:	4c21      	ldr	r4, [pc, #132]	; (27788 <__pow5mult+0x98>)
   27704:	2300      	movs	r3, #0
   27706:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2770a:	f007 f852 	bl	2e7b2 <__multadd>
   2770e:	4607      	mov	r7, r0
   27710:	10ad      	asrs	r5, r5, #2
   27712:	d035      	beq.n	27780 <__pow5mult+0x90>
   27714:	6a74      	ldr	r4, [r6, #36]	; 0x24
   27716:	b93c      	cbnz	r4, 27728 <__pow5mult+0x38>
   27718:	2010      	movs	r0, #16
   2771a:	f7ff fcc9 	bl	270b0 <malloc>
   2771e:	e9c0 4401 	strd	r4, r4, [r0, #4]
   27722:	6270      	str	r0, [r6, #36]	; 0x24
   27724:	6004      	str	r4, [r0, #0]
   27726:	60c4      	str	r4, [r0, #12]
   27728:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   2772c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   27730:	b94c      	cbnz	r4, 27746 <__pow5mult+0x56>
   27732:	f240 2171 	movw	r1, #625	; 0x271
   27736:	4630      	mov	r0, r6
   27738:	f007 f8c6 	bl	2e8c8 <__i2b>
   2773c:	2300      	movs	r3, #0
   2773e:	f8c8 0008 	str.w	r0, [r8, #8]
   27742:	4604      	mov	r4, r0
   27744:	6003      	str	r3, [r0, #0]
   27746:	f04f 0800 	mov.w	r8, #0
   2774a:	07eb      	lsls	r3, r5, #31
   2774c:	d50a      	bpl.n	27764 <__pow5mult+0x74>
   2774e:	4639      	mov	r1, r7
   27750:	4622      	mov	r2, r4
   27752:	4630      	mov	r0, r6
   27754:	f007 f8c1 	bl	2e8da <__multiply>
   27758:	4639      	mov	r1, r7
   2775a:	4681      	mov	r9, r0
   2775c:	4630      	mov	r0, r6
   2775e:	f007 f811 	bl	2e784 <_Bfree>
   27762:	464f      	mov	r7, r9
   27764:	106d      	asrs	r5, r5, #1
   27766:	d00b      	beq.n	27780 <__pow5mult+0x90>
   27768:	6820      	ldr	r0, [r4, #0]
   2776a:	b938      	cbnz	r0, 2777c <__pow5mult+0x8c>
   2776c:	4622      	mov	r2, r4
   2776e:	4621      	mov	r1, r4
   27770:	4630      	mov	r0, r6
   27772:	f007 f8b2 	bl	2e8da <__multiply>
   27776:	6020      	str	r0, [r4, #0]
   27778:	f8c0 8000 	str.w	r8, [r0]
   2777c:	4604      	mov	r4, r0
   2777e:	e7e4      	b.n	2774a <__pow5mult+0x5a>
   27780:	4638      	mov	r0, r7
   27782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27786:	bf00      	nop
   27788:	00030268 	.word	0x00030268

0002778c <prov_reset>:
	bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
   2778c:	2003      	movs	r0, #3
   2778e:	f7ef be4d 	b.w	1742c <bt_mesh_prov_enable>

00027792 <k_sleep>:
	return z_impl_k_sleep(timeout);
   27792:	f7fd bbc1 	b.w	24f18 <z_impl_k_sleep>

00027796 <get>:
	get_elsterid_canbus(val);
   27796:	4610      	mov	r0, r2
   27798:	f7dc bc3c 	b.w	4014 <get_elsterid_canbus>

0002779c <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   2779c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
	uint8_t num_digits = 0;
   2779e:	2300      	movs	r3, #0
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   277a0:	2504      	movs	r5, #4
	uint8_t divisor = 100;
   277a2:	2464      	movs	r4, #100	; 0x64
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   277a4:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   277a8:	b111      	cbz	r1, 277b0 <u8_to_dec+0x14>
   277aa:	3d01      	subs	r5, #1
   277ac:	d102      	bne.n	277b4 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   277ae:	7005      	strb	r5, [r0, #0]
	}

	return num_digits;
}
   277b0:	4618      	mov	r0, r3
   277b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   277b4:	42a2      	cmp	r2, r4
		digit = value / divisor;
   277b6:	fbb2 f7f4 	udiv	r7, r2, r4
   277ba:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   277bc:	d202      	bcs.n	277c4 <u8_to_dec+0x28>
   277be:	2c01      	cmp	r4, #1
   277c0:	d000      	beq.n	277c4 <u8_to_dec+0x28>
   277c2:	b133      	cbz	r3, 277d2 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   277c4:	3630      	adds	r6, #48	; 0x30
			buflen--;
   277c6:	3901      	subs	r1, #1
			num_digits++;
   277c8:	3301      	adds	r3, #1
			*buf = (char)digit + '0';
   277ca:	f800 6b01 	strb.w	r6, [r0], #1
			buflen--;
   277ce:	b2c9      	uxtb	r1, r1
			num_digits++;
   277d0:	b2db      	uxtb	r3, r3
		value -= digit * divisor;
   277d2:	fb04 2217 	mls	r2, r4, r7, r2
   277d6:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   277d8:	fbb4 f4fc 	udiv	r4, r4, ip
   277dc:	e7e4      	b.n	277a8 <u8_to_dec+0xc>

000277de <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   277de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   277e2:	b2db      	uxtb	r3, r3
   277e4:	2b09      	cmp	r3, #9
   277e6:	d802      	bhi.n	277ee <char2hex+0x10>
		*x = c - '0';
   277e8:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   277ea:	2000      	movs	r0, #0
   277ec:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   277ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   277f2:	2b05      	cmp	r3, #5
   277f4:	d802      	bhi.n	277fc <char2hex+0x1e>
		*x = c - 'a' + 10;
   277f6:	3857      	subs	r0, #87	; 0x57
   277f8:	7008      	strb	r0, [r1, #0]
   277fa:	e7f6      	b.n	277ea <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   277fc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   27800:	2b05      	cmp	r3, #5
   27802:	d801      	bhi.n	27808 <char2hex+0x2a>
		*x = c - 'A' + 10;
   27804:	3837      	subs	r0, #55	; 0x37
   27806:	e7f7      	b.n	277f8 <char2hex+0x1a>
		return -EINVAL;
   27808:	f06f 0015 	mvn.w	r0, #21
}
   2780c:	4770      	bx	lr

0002780e <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2780e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   27810:	084e      	lsrs	r6, r1, #1
   27812:	f001 0101 	and.w	r1, r1, #1
   27816:	1875      	adds	r5, r6, r1
   27818:	429d      	cmp	r5, r3
{
   2781a:	4604      	mov	r4, r0
	if (buflen < hexlen / 2 + hexlen % 2) {
   2781c:	d903      	bls.n	27826 <hex2bin+0x18>
		return 0;
   2781e:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   27820:	4628      	mov	r0, r5
   27822:	b003      	add	sp, #12
   27824:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   27826:	b159      	cbz	r1, 27840 <hex2bin+0x32>
		if (char2hex(hex[0], &dec) < 0) {
   27828:	f10d 0107 	add.w	r1, sp, #7
   2782c:	7800      	ldrb	r0, [r0, #0]
   2782e:	f7ff ffd6 	bl	277de <char2hex>
   27832:	2800      	cmp	r0, #0
   27834:	dbf3      	blt.n	2781e <hex2bin+0x10>
		buf[0] = dec;
   27836:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2783a:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   2783e:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   27840:	3a01      	subs	r2, #1
   27842:	eb04 0646 	add.w	r6, r4, r6, lsl #1
   27846:	42b4      	cmp	r4, r6
   27848:	d0ea      	beq.n	27820 <hex2bin+0x12>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2784a:	f10d 0107 	add.w	r1, sp, #7
   2784e:	7820      	ldrb	r0, [r4, #0]
   27850:	f7ff ffc5 	bl	277de <char2hex>
   27854:	2800      	cmp	r0, #0
   27856:	dbe2      	blt.n	2781e <hex2bin+0x10>
		buf[i] = dec << 4;
   27858:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2785c:	011b      	lsls	r3, r3, #4
   2785e:	7053      	strb	r3, [r2, #1]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   27860:	7860      	ldrb	r0, [r4, #1]
   27862:	f10d 0107 	add.w	r1, sp, #7
   27866:	f7ff ffba 	bl	277de <char2hex>
   2786a:	2800      	cmp	r0, #0
   2786c:	f104 0402 	add.w	r4, r4, #2
   27870:	dbd5      	blt.n	2781e <hex2bin+0x10>
		buf[i] += dec;
   27872:	7853      	ldrb	r3, [r2, #1]
   27874:	f89d 1007 	ldrb.w	r1, [sp, #7]
   27878:	440b      	add	r3, r1
   2787a:	f802 3f01 	strb.w	r3, [r2, #1]!
   2787e:	e7e2      	b.n	27846 <hex2bin+0x38>

00027880 <sys_notify_validate>:
	if (notify == NULL) {
   27880:	b140      	cbz	r0, 27894 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27882:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   27884:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   27888:	2b02      	cmp	r3, #2
   2788a:	d006      	beq.n	2789a <sys_notify_validate+0x1a>
   2788c:	2b03      	cmp	r3, #3
   2788e:	d004      	beq.n	2789a <sys_notify_validate+0x1a>
   27890:	2b01      	cmp	r3, #1
   27892:	d005      	beq.n	278a0 <sys_notify_validate+0x20>
		return -EINVAL;
   27894:	f06f 0015 	mvn.w	r0, #21
}
   27898:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2789a:	6803      	ldr	r3, [r0, #0]
   2789c:	2b00      	cmp	r3, #0
   2789e:	d0f9      	beq.n	27894 <sys_notify_validate+0x14>
		notify->result = 0;
   278a0:	2300      	movs	r3, #0
   278a2:	6083      	str	r3, [r0, #8]
   278a4:	4618      	mov	r0, r3
   278a6:	4770      	bx	lr

000278a8 <arch_printk_char_out>:
}
   278a8:	2000      	movs	r0, #0
   278aa:	4770      	bx	lr

000278ac <str_out>:
{
   278ac:	b530      	push	{r4, r5, lr}
   278ae:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   278b0:	680c      	ldr	r4, [r1, #0]
   278b2:	1c55      	adds	r5, r2, #1
   278b4:	b114      	cbz	r4, 278bc <str_out+0x10>
   278b6:	684b      	ldr	r3, [r1, #4]
   278b8:	4293      	cmp	r3, r2
   278ba:	dc01      	bgt.n	278c0 <str_out+0x14>
		ctx->count++;
   278bc:	608d      	str	r5, [r1, #8]
}
   278be:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   278c0:	3b01      	subs	r3, #1
   278c2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   278c4:	bf08      	it	eq
   278c6:	2200      	moveq	r2, #0
   278c8:	608d      	str	r5, [r1, #8]
   278ca:	bf0c      	ite	eq
   278cc:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   278ce:	54a0      	strbne	r0, [r4, r2]
   278d0:	e7f5      	b.n	278be <str_out+0x12>

000278d2 <printk>:
{
   278d2:	b40f      	push	{r0, r1, r2, r3}
   278d4:	b507      	push	{r0, r1, r2, lr}
   278d6:	a904      	add	r1, sp, #16
   278d8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   278dc:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   278de:	f7dc ffab 	bl	4838 <vprintk>
}
   278e2:	b003      	add	sp, #12
   278e4:	f85d eb04 	ldr.w	lr, [sp], #4
   278e8:	b004      	add	sp, #16
   278ea:	4770      	bx	lr

000278ec <snprintk>:
{
   278ec:	b40c      	push	{r2, r3}
   278ee:	b507      	push	{r0, r1, r2, lr}
   278f0:	ab04      	add	r3, sp, #16
   278f2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   278f6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   278f8:	f7dc ffac 	bl	4854 <vsnprintk>
}
   278fc:	b003      	add	sp, #12
   278fe:	f85d eb04 	ldr.w	lr, [sp], #4
   27902:	b002      	add	sp, #8
   27904:	4770      	bx	lr

00027906 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27906:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   27908:	f013 0307 	ands.w	r3, r3, #7
   2790c:	d105      	bne.n	2791a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2790e:	6803      	ldr	r3, [r0, #0]
   27910:	2b00      	cmp	r3, #0
		evt = EVT_START;
   27912:	bf0c      	ite	eq
   27914:	2000      	moveq	r0, #0
   27916:	2003      	movne	r0, #3
   27918:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2791a:	2b02      	cmp	r3, #2
   2791c:	d105      	bne.n	2792a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2791e:	8bc3      	ldrh	r3, [r0, #30]
   27920:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   27922:	bf14      	ite	ne
   27924:	2000      	movne	r0, #0
   27926:	2004      	moveq	r0, #4
   27928:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2792a:	2b01      	cmp	r3, #1
   2792c:	d105      	bne.n	2793a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2792e:	6803      	ldr	r3, [r0, #0]
   27930:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   27932:	bf0c      	ite	eq
   27934:	2000      	moveq	r0, #0
   27936:	2005      	movne	r0, #5
   27938:	4770      	bx	lr
	int evt = EVT_NOP;
   2793a:	2000      	movs	r0, #0
}
   2793c:	4770      	bx	lr

0002793e <notify_one>:
{
   2793e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27942:	460d      	mov	r5, r1
   27944:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   27946:	4619      	mov	r1, r3
   27948:	1d28      	adds	r0, r5, #4
{
   2794a:	4690      	mov	r8, r2
   2794c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2794e:	f7dc ff39 	bl	47c4 <sys_notify_finalize>
	if (cb) {
   27952:	4604      	mov	r4, r0
   27954:	b138      	cbz	r0, 27966 <notify_one+0x28>
		cb(mgr, cli, state, res);
   27956:	4633      	mov	r3, r6
   27958:	4642      	mov	r2, r8
   2795a:	4629      	mov	r1, r5
   2795c:	4638      	mov	r0, r7
   2795e:	46a4      	mov	ip, r4
}
   27960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   27964:	4760      	bx	ip
}
   27966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002796a <validate_args>:
{
   2796a:	b510      	push	{r4, lr}
   2796c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2796e:	b140      	cbz	r0, 27982 <validate_args+0x18>
   27970:	b139      	cbz	r1, 27982 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   27972:	1d08      	adds	r0, r1, #4
   27974:	f7ff ff84 	bl	27880 <sys_notify_validate>
	if ((rv == 0)
   27978:	b928      	cbnz	r0, 27986 <validate_args+0x1c>
	    && ((cli->notify.flags
   2797a:	68a3      	ldr	r3, [r4, #8]
   2797c:	f033 0303 	bics.w	r3, r3, #3
   27980:	d001      	beq.n	27986 <validate_args+0x1c>
		rv = -EINVAL;
   27982:	f06f 0015 	mvn.w	r0, #21
}
   27986:	bd10      	pop	{r4, pc}

00027988 <onoff_manager_init>:
{
   27988:	b538      	push	{r3, r4, r5, lr}
   2798a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2798c:	4605      	mov	r5, r0
   2798e:	b158      	cbz	r0, 279a8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   27990:	b151      	cbz	r1, 279a8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   27992:	680b      	ldr	r3, [r1, #0]
   27994:	b143      	cbz	r3, 279a8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   27996:	684b      	ldr	r3, [r1, #4]
   27998:	b133      	cbz	r3, 279a8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2799a:	2220      	movs	r2, #32
   2799c:	2100      	movs	r1, #0
   2799e:	f006 fcbf 	bl	2e320 <memset>
   279a2:	612c      	str	r4, [r5, #16]
	return 0;
   279a4:	2000      	movs	r0, #0
}
   279a6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   279a8:	f06f 0015 	mvn.w	r0, #21
   279ac:	e7fb      	b.n	279a6 <onoff_manager_init+0x1e>

000279ae <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   279ae:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   279b0:	f7fd fb04 	bl	24fbc <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   279b4:	2000      	movs	r0, #0
   279b6:	bd08      	pop	{r3, pc}

000279b8 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   279b8:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   279ba:	f7fd fb3b 	bl	25034 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   279be:	f110 0f0b 	cmn.w	r0, #11
   279c2:	d005      	beq.n	279d0 <sys_sem_take+0x18>
   279c4:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   279c8:	bf08      	it	eq
   279ca:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   279ce:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   279d0:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   279d4:	e7fb      	b.n	279ce <sys_sem_take+0x16>

000279d6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   279d6:	4604      	mov	r4, r0
   279d8:	b508      	push	{r3, lr}
   279da:	4608      	mov	r0, r1
   279dc:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   279de:	461a      	mov	r2, r3
   279e0:	47a0      	blx	r4
	return z_impl_k_current_get();
   279e2:	f7fd fae5 	bl	24fb0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   279e6:	f7e0 fbd9 	bl	819c <z_impl_k_thread_abort>

000279ea <chunk_field>:
	if (big_heap(h)) {
   279ea:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   279ec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   279f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   279f4:	bf2c      	ite	cs
   279f6:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   279fa:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   279fe:	4770      	bx	lr

00027a00 <chunk_set>:
	void *cmem = &buf[c];
   27a00:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   27a04:	6880      	ldr	r0, [r0, #8]
   27a06:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   27a0a:	bf2c      	ite	cs
   27a0c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   27a10:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   27a14:	4770      	bx	lr

00027a16 <chunk_used>:
{
   27a16:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   27a18:	2201      	movs	r2, #1
   27a1a:	f7ff ffe6 	bl	279ea <chunk_field>
}
   27a1e:	f000 0001 	and.w	r0, r0, #1
   27a22:	bd08      	pop	{r3, pc}

00027a24 <chunk_size>:
{
   27a24:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   27a26:	2201      	movs	r2, #1
   27a28:	f7ff ffdf 	bl	279ea <chunk_field>
}
   27a2c:	0840      	lsrs	r0, r0, #1
   27a2e:	bd08      	pop	{r3, pc}

00027a30 <set_chunk_used>:
	if (big_heap(h)) {
   27a30:	6883      	ldr	r3, [r0, #8]
   27a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   27a36:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   27a3a:	d308      	bcc.n	27a4e <set_chunk_used+0x1e>
		if (used) {
   27a3c:	684b      	ldr	r3, [r1, #4]
   27a3e:	b11a      	cbz	r2, 27a48 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   27a40:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   27a44:	604b      	str	r3, [r1, #4]
   27a46:	4770      	bx	lr
   27a48:	f023 0301 	bic.w	r3, r3, #1
   27a4c:	e7fa      	b.n	27a44 <set_chunk_used+0x14>
		if (used) {
   27a4e:	884b      	ldrh	r3, [r1, #2]
   27a50:	b11a      	cbz	r2, 27a5a <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27a52:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   27a56:	804b      	strh	r3, [r1, #2]
}
   27a58:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   27a5a:	f023 0301 	bic.w	r3, r3, #1
   27a5e:	e7fa      	b.n	27a56 <set_chunk_used+0x26>

00027a60 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27a60:	0053      	lsls	r3, r2, #1
   27a62:	2201      	movs	r2, #1
   27a64:	f7ff bfcc 	b.w	27a00 <chunk_set>

00027a68 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   27a68:	6883      	ldr	r3, [r0, #8]
   27a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   27a6e:	bf2c      	ite	cs
   27a70:	2008      	movcs	r0, #8
   27a72:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27a74:	3107      	adds	r1, #7
   27a76:	4408      	add	r0, r1
}
   27a78:	08c0      	lsrs	r0, r0, #3
   27a7a:	4770      	bx	lr

00027a7c <bucket_idx>:
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
   27a7c:	460a      	mov	r2, r1
   27a7e:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   27a80:	2101      	movs	r1, #1
   27a82:	f7ff fff1 	bl	27a68 <bytes_to_chunksz>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   27a86:	3201      	adds	r2, #1
   27a88:	1a10      	subs	r0, r2, r0
	return 31 - __builtin_clz(usable_sz);
   27a8a:	fab0 f080 	clz	r0, r0
}
   27a8e:	f1c0 001f 	rsb	r0, r0, #31
   27a92:	bd08      	pop	{r3, pc}

00027a94 <merge_chunks>:
{
   27a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27a98:	4616      	mov	r6, r2
   27a9a:	4604      	mov	r4, r0
   27a9c:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   27a9e:	f7ff ffc1 	bl	27a24 <chunk_size>
   27aa2:	4631      	mov	r1, r6
   27aa4:	4605      	mov	r5, r0
   27aa6:	4620      	mov	r0, r4
   27aa8:	f7ff ffbc 	bl	27a24 <chunk_size>
   27aac:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   27aae:	462a      	mov	r2, r5
   27ab0:	4639      	mov	r1, r7
   27ab2:	4620      	mov	r0, r4
   27ab4:	f7ff ffd4 	bl	27a60 <set_chunk_size>
	return c + chunk_size(h, c);
   27ab8:	4631      	mov	r1, r6
   27aba:	4620      	mov	r0, r4
   27abc:	f7ff ffb2 	bl	27a24 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   27ac0:	462b      	mov	r3, r5
   27ac2:	1831      	adds	r1, r6, r0
   27ac4:	2200      	movs	r2, #0
   27ac6:	4620      	mov	r0, r4
}
   27ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27acc:	f7ff bf98 	b.w	27a00 <chunk_set>

00027ad0 <split_chunks>:
{
   27ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27ad4:	4614      	mov	r4, r2
   27ad6:	4605      	mov	r5, r0
   27ad8:	460f      	mov	r7, r1
	size_t sz0 = chunk_size(h, lc);
   27ada:	f7ff ffa3 	bl	27a24 <chunk_size>
	size_t lsz = rc - lc;
   27ade:	eba4 0807 	sub.w	r8, r4, r7
	size_t rsz = sz0 - lsz;
   27ae2:	1b3e      	subs	r6, r7, r4
   27ae4:	4406      	add	r6, r0
	set_chunk_size(h, lc, lsz);
   27ae6:	4642      	mov	r2, r8
   27ae8:	4639      	mov	r1, r7
   27aea:	4628      	mov	r0, r5
   27aec:	f7ff ffb8 	bl	27a60 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   27af0:	4632      	mov	r2, r6
   27af2:	4621      	mov	r1, r4
   27af4:	4628      	mov	r0, r5
   27af6:	f7ff ffb3 	bl	27a60 <set_chunk_size>
   27afa:	4643      	mov	r3, r8
   27afc:	2200      	movs	r2, #0
   27afe:	4621      	mov	r1, r4
   27b00:	4628      	mov	r0, r5
   27b02:	f7ff ff7d 	bl	27a00 <chunk_set>
	return c + chunk_size(h, c);
   27b06:	4621      	mov	r1, r4
   27b08:	4628      	mov	r0, r5
   27b0a:	f7ff ff8b 	bl	27a24 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   27b0e:	4633      	mov	r3, r6
   27b10:	1821      	adds	r1, r4, r0
   27b12:	2200      	movs	r2, #0
   27b14:	4628      	mov	r0, r5
}
   27b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27b1a:	f7ff bf71 	b.w	27a00 <chunk_set>

00027b1e <free_list_remove_bidx>:
{
   27b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27b22:	4690      	mov	r8, r2
	return chunk_field(h, c, FREE_NEXT);
   27b24:	2203      	movs	r2, #3
   27b26:	460e      	mov	r6, r1
   27b28:	4604      	mov	r4, r0
   27b2a:	f7ff ff5e 	bl	279ea <chunk_field>
	if (next_free_chunk(h, c) == c) {
   27b2e:	4286      	cmp	r6, r0
   27b30:	4605      	mov	r5, r0
   27b32:	f108 0704 	add.w	r7, r8, #4
   27b36:	d10b      	bne.n	27b50 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   27b38:	2301      	movs	r3, #1
   27b3a:	fa03 f208 	lsl.w	r2, r3, r8
   27b3e:	68e3      	ldr	r3, [r4, #12]
   27b40:	ea23 0302 	bic.w	r3, r3, r2
   27b44:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   27b46:	2300      	movs	r3, #0
   27b48:	f844 3027 	str.w	r3, [r4, r7, lsl #2]
}
   27b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   27b50:	4631      	mov	r1, r6
   27b52:	2202      	movs	r2, #2
   27b54:	4620      	mov	r0, r4
   27b56:	f7ff ff48 	bl	279ea <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   27b5a:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   27b5c:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   27b5e:	4601      	mov	r1, r0
		b->next = second;
   27b60:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
   27b64:	4620      	mov	r0, r4
   27b66:	2203      	movs	r2, #3
   27b68:	f7ff ff4a 	bl	27a00 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   27b6c:	4633      	mov	r3, r6
   27b6e:	4629      	mov	r1, r5
   27b70:	4620      	mov	r0, r4
   27b72:	2202      	movs	r2, #2
}
   27b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27b78:	f7ff bf42 	b.w	27a00 <chunk_set>

00027b7c <free_list_remove>:
{
   27b7c:	b538      	push	{r3, r4, r5, lr}
   27b7e:	4604      	mov	r4, r0
   27b80:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   27b82:	f7ff ff4f 	bl	27a24 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   27b86:	68a3      	ldr	r3, [r4, #8]
   27b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   27b8c:	4601      	mov	r1, r0
   27b8e:	d301      	bcc.n	27b94 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   27b90:	2801      	cmp	r0, #1
   27b92:	d009      	beq.n	27ba8 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   27b94:	4620      	mov	r0, r4
   27b96:	f7ff ff71 	bl	27a7c <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   27b9a:	4629      	mov	r1, r5
   27b9c:	4602      	mov	r2, r0
   27b9e:	4620      	mov	r0, r4
}
   27ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   27ba4:	f7ff bfbb 	b.w	27b1e <free_list_remove_bidx>
}
   27ba8:	bd38      	pop	{r3, r4, r5, pc}

00027baa <alloc_chunk>:
{
   27baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27bae:	4604      	mov	r4, r0
   27bb0:	468a      	mov	sl, r1
	int bi = bucket_idx(h, sz);
   27bb2:	f7ff ff63 	bl	27a7c <bucket_idx>
	if (bi > bucket_idx(h, h->len)) {
   27bb6:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   27bb8:	4606      	mov	r6, r0
	if (bi > bucket_idx(h, h->len)) {
   27bba:	4620      	mov	r0, r4
   27bbc:	f7ff ff5e 	bl	27a7c <bucket_idx>
   27bc0:	42b0      	cmp	r0, r6
   27bc2:	da03      	bge.n	27bcc <alloc_chunk+0x22>
		return 0;
   27bc4:	2500      	movs	r5, #0
}
   27bc6:	4628      	mov	r0, r5
   27bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   27bcc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   27bd0:	f8d7 9010 	ldr.w	r9, [r7, #16]
   27bd4:	f1b9 0f00 	cmp.w	r9, #0
   27bd8:	d019      	beq.n	27c0e <alloc_chunk+0x64>
   27bda:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   27bde:	693d      	ldr	r5, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   27be0:	4620      	mov	r0, r4
   27be2:	4629      	mov	r1, r5
   27be4:	f7ff ff1e 	bl	27a24 <chunk_size>
   27be8:	4550      	cmp	r0, sl
   27bea:	d305      	bcc.n	27bf8 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   27bec:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   27bee:	4629      	mov	r1, r5
   27bf0:	4620      	mov	r0, r4
   27bf2:	f7ff ff94 	bl	27b1e <free_list_remove_bidx>
		return c;
   27bf6:	e7e6      	b.n	27bc6 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   27bf8:	2203      	movs	r2, #3
   27bfa:	4629      	mov	r1, r5
   27bfc:	4620      	mov	r0, r4
   27bfe:	f7ff fef4 	bl	279ea <chunk_field>
		} while (--i && b->next != first);
   27c02:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   27c06:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   27c08:	d001      	beq.n	27c0e <alloc_chunk+0x64>
   27c0a:	4581      	cmp	r9, r0
   27c0c:	d1e7      	bne.n	27bde <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   27c0e:	3601      	adds	r6, #1
   27c10:	f04f 32ff 	mov.w	r2, #4294967295
   27c14:	68e3      	ldr	r3, [r4, #12]
   27c16:	40b2      	lsls	r2, r6
	if ((bmask & h->avail_buckets) != 0U) {
   27c18:	401a      	ands	r2, r3
   27c1a:	d0d3      	beq.n	27bc4 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   27c1c:	fa92 f2a2 	rbit	r2, r2
   27c20:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   27c24:	1d13      	adds	r3, r2, #4
   27c26:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   27c2a:	e7e0      	b.n	27bee <alloc_chunk+0x44>

00027c2c <free_list_add>:
{
   27c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27c30:	4604      	mov	r4, r0
   27c32:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   27c34:	f7ff fef6 	bl	27a24 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   27c38:	68a3      	ldr	r3, [r4, #8]
   27c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   27c3e:	4601      	mov	r1, r0
   27c40:	d301      	bcc.n	27c46 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   27c42:	2801      	cmp	r0, #1
   27c44:	d035      	beq.n	27cb2 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   27c46:	4620      	mov	r0, r4
   27c48:	f7ff ff18 	bl	27a7c <bucket_idx>
	if (b->next == 0U) {
   27c4c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   27c50:	6916      	ldr	r6, [r2, #16]
   27c52:	b99e      	cbnz	r6, 27c7c <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   27c54:	2301      	movs	r3, #1
   27c56:	fa03 f000 	lsl.w	r0, r3, r0
   27c5a:	68e3      	ldr	r3, [r4, #12]
   27c5c:	4303      	orrs	r3, r0
   27c5e:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   27c60:	4629      	mov	r1, r5
		b->next = c;
   27c62:	6115      	str	r5, [r2, #16]
   27c64:	462b      	mov	r3, r5
   27c66:	2202      	movs	r2, #2
   27c68:	4620      	mov	r0, r4
   27c6a:	f7ff fec9 	bl	27a00 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   27c6e:	2203      	movs	r2, #3
   27c70:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   27c72:	4620      	mov	r0, r4
}
   27c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27c78:	f7ff bec2 	b.w	27a00 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   27c7c:	2202      	movs	r2, #2
   27c7e:	4631      	mov	r1, r6
   27c80:	4620      	mov	r0, r4
   27c82:	f7ff feb2 	bl	279ea <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   27c86:	2202      	movs	r2, #2
   27c88:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   27c8a:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   27c8c:	4629      	mov	r1, r5
   27c8e:	4620      	mov	r0, r4
   27c90:	f7ff feb6 	bl	27a00 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   27c94:	4633      	mov	r3, r6
   27c96:	2203      	movs	r2, #3
   27c98:	4629      	mov	r1, r5
   27c9a:	4620      	mov	r0, r4
   27c9c:	f7ff feb0 	bl	27a00 <chunk_set>
   27ca0:	2203      	movs	r2, #3
   27ca2:	4639      	mov	r1, r7
   27ca4:	462b      	mov	r3, r5
   27ca6:	4620      	mov	r0, r4
   27ca8:	f7ff feaa 	bl	27a00 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   27cac:	2202      	movs	r2, #2
   27cae:	4631      	mov	r1, r6
   27cb0:	e7df      	b.n	27c72 <free_list_add+0x46>
   27cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027cb6 <free_chunk>:
{
   27cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27cb8:	460c      	mov	r4, r1
   27cba:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   27cbc:	f7ff feb2 	bl	27a24 <chunk_size>
   27cc0:	1826      	adds	r6, r4, r0
	if (!chunk_used(h, right_chunk(h, c))) {
   27cc2:	4631      	mov	r1, r6
   27cc4:	4628      	mov	r0, r5
   27cc6:	f7ff fea6 	bl	27a16 <chunk_used>
   27cca:	b960      	cbnz	r0, 27ce6 <free_chunk+0x30>
		free_list_remove(h, right_chunk(h, c));
   27ccc:	4631      	mov	r1, r6
   27cce:	4628      	mov	r0, r5
   27cd0:	f7ff ff54 	bl	27b7c <free_list_remove>
   27cd4:	4621      	mov	r1, r4
   27cd6:	4628      	mov	r0, r5
   27cd8:	f7ff fea4 	bl	27a24 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   27cdc:	4621      	mov	r1, r4
   27cde:	1822      	adds	r2, r4, r0
   27ce0:	4628      	mov	r0, r5
   27ce2:	f7ff fed7 	bl	27a94 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   27ce6:	2200      	movs	r2, #0
   27ce8:	4621      	mov	r1, r4
   27cea:	4628      	mov	r0, r5
   27cec:	f7ff fe7d 	bl	279ea <chunk_field>
   27cf0:	1a27      	subs	r7, r4, r0
	if (!chunk_used(h, left_chunk(h, c))) {
   27cf2:	4639      	mov	r1, r7
   27cf4:	4628      	mov	r0, r5
   27cf6:	f7ff fe8e 	bl	27a16 <chunk_used>
   27cfa:	4606      	mov	r6, r0
   27cfc:	b998      	cbnz	r0, 27d26 <free_chunk+0x70>
		free_list_remove(h, left_chunk(h, c));
   27cfe:	4639      	mov	r1, r7
   27d00:	4628      	mov	r0, r5
   27d02:	f7ff ff3b 	bl	27b7c <free_list_remove>
   27d06:	4621      	mov	r1, r4
   27d08:	4632      	mov	r2, r6
   27d0a:	4628      	mov	r0, r5
   27d0c:	f7ff fe6d 	bl	279ea <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   27d10:	4622      	mov	r2, r4
   27d12:	1a21      	subs	r1, r4, r0
   27d14:	4628      	mov	r0, r5
   27d16:	f7ff febd 	bl	27a94 <merge_chunks>
   27d1a:	4621      	mov	r1, r4
   27d1c:	4632      	mov	r2, r6
   27d1e:	4628      	mov	r0, r5
   27d20:	f7ff fe63 	bl	279ea <chunk_field>
   27d24:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   27d26:	4621      	mov	r1, r4
   27d28:	4628      	mov	r0, r5
}
   27d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   27d2e:	f7ff bf7d 	b.w	27c2c <free_list_add>

00027d32 <sys_heap_alloc>:
{
   27d32:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   27d34:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   27d36:	b909      	cbnz	r1, 27d3c <sys_heap_alloc+0xa>
		return NULL;
   27d38:	2000      	movs	r0, #0
}
   27d3a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   27d3c:	68a3      	ldr	r3, [r4, #8]
   27d3e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   27d42:	d9f9      	bls.n	27d38 <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   27d44:	4620      	mov	r0, r4
   27d46:	f7ff fe8f 	bl	27a68 <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   27d4a:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   27d4c:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   27d4e:	4620      	mov	r0, r4
   27d50:	f7ff ff2b 	bl	27baa <alloc_chunk>
	if (c == 0U) {
   27d54:	4605      	mov	r5, r0
   27d56:	2800      	cmp	r0, #0
   27d58:	d0ee      	beq.n	27d38 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   27d5a:	4601      	mov	r1, r0
   27d5c:	4620      	mov	r0, r4
   27d5e:	f7ff fe61 	bl	27a24 <chunk_size>
   27d62:	42b0      	cmp	r0, r6
   27d64:	d909      	bls.n	27d7a <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   27d66:	442e      	add	r6, r5
   27d68:	4629      	mov	r1, r5
   27d6a:	4620      	mov	r0, r4
   27d6c:	4632      	mov	r2, r6
   27d6e:	f7ff feaf 	bl	27ad0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   27d72:	4631      	mov	r1, r6
   27d74:	4620      	mov	r0, r4
   27d76:	f7ff ff59 	bl	27c2c <free_list_add>
	set_chunk_used(h, c, true);
   27d7a:	4620      	mov	r0, r4
   27d7c:	2201      	movs	r2, #1
   27d7e:	4629      	mov	r1, r5
   27d80:	f7ff fe56 	bl	27a30 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   27d84:	68a3      	ldr	r3, [r4, #8]
   27d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   27d8a:	bf2c      	ite	cs
   27d8c:	2008      	movcs	r0, #8
   27d8e:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   27d90:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   27d94:	4420      	add	r0, r4
	return chunk_mem(h, c);
   27d96:	e7d0      	b.n	27d3a <sys_heap_alloc+0x8>

00027d98 <outs>:
{
   27d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27d9c:	4607      	mov	r7, r0
   27d9e:	4688      	mov	r8, r1
   27da0:	4615      	mov	r5, r2
   27da2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   27da4:	4614      	mov	r4, r2
   27da6:	42b4      	cmp	r4, r6
   27da8:	eba4 0005 	sub.w	r0, r4, r5
   27dac:	d302      	bcc.n	27db4 <outs+0x1c>
   27dae:	b93e      	cbnz	r6, 27dc0 <outs+0x28>
   27db0:	7823      	ldrb	r3, [r4, #0]
   27db2:	b12b      	cbz	r3, 27dc0 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   27db4:	4641      	mov	r1, r8
   27db6:	f814 0b01 	ldrb.w	r0, [r4], #1
   27dba:	47b8      	blx	r7
		if (rc < 0) {
   27dbc:	2800      	cmp	r0, #0
   27dbe:	daf2      	bge.n	27da6 <outs+0xe>
}
   27dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027dc4 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   27dc4:	4040      	eors	r0, r0
   27dc6:	f380 8811 	msr	BASEPRI, r0
   27dca:	f04f 0004 	mov.w	r0, #4
   27dce:	df02      	svc	2
}
   27dd0:	4770      	bx	lr

00027dd2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   27dd2:	4770      	bx	lr

00027dd4 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   27dd4:	6883      	ldr	r3, [r0, #8]
   27dd6:	68db      	ldr	r3, [r3, #12]
   27dd8:	4718      	bx	r3

00027dda <nvs_flash_rd>:
{
   27dda:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   27ddc:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27dde:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   27de0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27de2:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   27de4:	fa16 f181 	uxtah	r1, r6, r1
   27de8:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   27dec:	6884      	ldr	r4, [r0, #8]
   27dee:	6824      	ldr	r4, [r4, #0]
   27df0:	46a4      	mov	ip, r4
}
   27df2:	bc70      	pop	{r4, r5, r6}
   27df4:	4760      	bx	ip

00027df6 <nvs_flash_block_cmp>:
{
   27df6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27dfa:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   27dfc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   27dfe:	681d      	ldr	r5, [r3, #0]
   27e00:	426d      	negs	r5, r5
{
   27e02:	b089      	sub	sp, #36	; 0x24
   27e04:	4681      	mov	r9, r0
   27e06:	460f      	mov	r7, r1
   27e08:	4690      	mov	r8, r2
	block_size =
   27e0a:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   27e0e:	b91c      	cbnz	r4, 27e18 <nvs_flash_block_cmp+0x22>
	return 0;
   27e10:	4620      	mov	r0, r4
}
   27e12:	b009      	add	sp, #36	; 0x24
   27e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   27e18:	42ac      	cmp	r4, r5
   27e1a:	4626      	mov	r6, r4
   27e1c:	bf28      	it	cs
   27e1e:	462e      	movcs	r6, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   27e20:	4633      	mov	r3, r6
   27e22:	466a      	mov	r2, sp
   27e24:	4639      	mov	r1, r7
   27e26:	4648      	mov	r0, r9
   27e28:	f7ff ffd7 	bl	27dda <nvs_flash_rd>
		if (rc) {
   27e2c:	2800      	cmp	r0, #0
   27e2e:	d1f0      	bne.n	27e12 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   27e30:	4632      	mov	r2, r6
   27e32:	4669      	mov	r1, sp
   27e34:	4640      	mov	r0, r8
   27e36:	f006 fa2a 	bl	2e28e <memcmp>
		if (rc) {
   27e3a:	b918      	cbnz	r0, 27e44 <nvs_flash_block_cmp+0x4e>
		len -= bytes_to_cmp;
   27e3c:	1ba4      	subs	r4, r4, r6
		addr += bytes_to_cmp;
   27e3e:	4437      	add	r7, r6
		data8 += bytes_to_cmp;
   27e40:	44b0      	add	r8, r6
   27e42:	e7e4      	b.n	27e0e <nvs_flash_block_cmp+0x18>
			return 1;
   27e44:	2001      	movs	r0, #1
   27e46:	e7e4      	b.n	27e12 <nvs_flash_block_cmp+0x1c>

00027e48 <nvs_flash_cmp_const>:
{
   27e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27e4c:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   27e4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   27e50:	681c      	ldr	r4, [r3, #0]
   27e52:	4264      	negs	r4, r4
{
   27e54:	b088      	sub	sp, #32
	block_size =
   27e56:	f004 0420 	and.w	r4, r4, #32
{
   27e5a:	4680      	mov	r8, r0
   27e5c:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   27e5e:	2320      	movs	r3, #32
{
   27e60:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   27e62:	4668      	mov	r0, sp
   27e64:	4622      	mov	r2, r4
   27e66:	f006 fa63 	bl	2e330 <__memset_chk>
	while (len) {
   27e6a:	b91d      	cbnz	r5, 27e74 <nvs_flash_cmp_const+0x2c>
	return 0;
   27e6c:	4628      	mov	r0, r5
}
   27e6e:	b008      	add	sp, #32
   27e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   27e74:	42a5      	cmp	r5, r4
   27e76:	462f      	mov	r7, r5
   27e78:	bf28      	it	cs
   27e7a:	4627      	movcs	r7, r4
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   27e7c:	463b      	mov	r3, r7
   27e7e:	466a      	mov	r2, sp
   27e80:	4631      	mov	r1, r6
   27e82:	4640      	mov	r0, r8
   27e84:	f7ff ffb7 	bl	27df6 <nvs_flash_block_cmp>
		if (rc) {
   27e88:	2800      	cmp	r0, #0
   27e8a:	d1f0      	bne.n	27e6e <nvs_flash_cmp_const+0x26>
		len -= bytes_to_cmp;
   27e8c:	1bed      	subs	r5, r5, r7
		addr += bytes_to_cmp;
   27e8e:	443e      	add	r6, r7
   27e90:	e7eb      	b.n	27e6a <nvs_flash_cmp_const+0x22>

00027e92 <nvs_ate_crc8_check>:
{
   27e92:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27e94:	4601      	mov	r1, r0
{
   27e96:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27e98:	2207      	movs	r2, #7
   27e9a:	20ff      	movs	r0, #255	; 0xff
   27e9c:	f7dc fc7c 	bl	4798 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   27ea0:	79e3      	ldrb	r3, [r4, #7]
}
   27ea2:	1a18      	subs	r0, r3, r0
   27ea4:	bf18      	it	ne
   27ea6:	2001      	movne	r0, #1
   27ea8:	bd10      	pop	{r4, pc}

00027eaa <nvs_ate_crc8_update>:
{
   27eaa:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27eac:	4601      	mov	r1, r0
{
   27eae:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27eb0:	2207      	movs	r2, #7
   27eb2:	20ff      	movs	r0, #255	; 0xff
   27eb4:	f7dc fc70 	bl	4798 <crc8_ccitt>
	entry->crc8 = crc8;
   27eb8:	71e0      	strb	r0, [r4, #7]
}
   27eba:	bd10      	pop	{r4, pc}

00027ebc <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   27ebc:	7803      	ldrb	r3, [r0, #0]
   27ebe:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   27ec0:	bf81      	itttt	hi
   27ec2:	18c9      	addhi	r1, r1, r3
   27ec4:	f101 31ff 	addhi.w	r1, r1, #4294967295
   27ec8:	425b      	neghi	r3, r3
   27eca:	4019      	andhi	r1, r3
}
   27ecc:	4608      	mov	r0, r1
   27ece:	4770      	bx	lr

00027ed0 <nvs_sector_advance.isra.1>:
	*addr += (1 << ADDR_SECT_SHIFT);
   27ed0:	680b      	ldr	r3, [r1, #0]
   27ed2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   27ed6:	0c1a      	lsrs	r2, r3, #16
   27ed8:	4282      	cmp	r2, r0
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   27eda:	bf08      	it	eq
   27edc:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   27ee0:	600b      	str	r3, [r1, #0]
}
   27ee2:	4770      	bx	lr

00027ee4 <nvs_flash_erase_sector>:
{
   27ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   27ee8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   27eea:	8983      	ldrh	r3, [r0, #12]
   27eec:	7912      	ldrb	r2, [r2, #4]
	addr &= ADDR_SECT_MASK;
   27eee:	0c0d      	lsrs	r5, r1, #16
   27ef0:	042d      	lsls	r5, r5, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   27ef2:	4629      	mov	r1, r5
{
   27ef4:	4604      	mov	r4, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   27ef6:	f7ff ffa7 	bl	27e48 <nvs_flash_cmp_const>
	if (rc <= 0) {
   27efa:	1e06      	subs	r6, r0, #0
   27efc:	dd17      	ble.n	27f2e <nvs_flash_erase_sector+0x4a>
	rc = flash_write_protection_set(fs->flash_device, false);
   27efe:	2100      	movs	r1, #0
   27f00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	offset = fs->offset;
   27f02:	6827      	ldr	r7, [r4, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27f04:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   27f08:	f7ff ff64 	bl	27dd4 <flash_write_protection_set>
	if (rc) {
   27f0c:	4606      	mov	r6, r0
   27f0e:	b970      	cbnz	r0, 27f2e <nvs_flash_erase_sector+0x4a>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   27f10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   27f12:	89a2      	ldrh	r2, [r4, #12]
	return api->erase(dev, offset, size);
   27f14:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27f16:	0c29      	lsrs	r1, r5, #16
   27f18:	689b      	ldr	r3, [r3, #8]
   27f1a:	fb08 7101 	mla	r1, r8, r1, r7
   27f1e:	4798      	blx	r3
	if (rc) {
   27f20:	4606      	mov	r6, r0
   27f22:	b920      	cbnz	r0, 27f2e <nvs_flash_erase_sector+0x4a>
	(void) flash_write_protection_set(fs->flash_device, true);
   27f24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->write_protection(dev, enable);
   27f26:	6883      	ldr	r3, [r0, #8]
   27f28:	2101      	movs	r1, #1
   27f2a:	68db      	ldr	r3, [r3, #12]
   27f2c:	4798      	blx	r3
}
   27f2e:	4630      	mov	r0, r6
   27f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027f34 <nvs_prev_ate>:
{
   27f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27f36:	4604      	mov	r4, r0
   27f38:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   27f3a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   27f3c:	2108      	movs	r1, #8
   27f3e:	f7ff ffbd 	bl	27ebc <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   27f42:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   27f44:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   27f46:	6829      	ldr	r1, [r5, #0]
   27f48:	4620      	mov	r0, r4
   27f4a:	f7ff ff46 	bl	27dda <nvs_flash_rd>
	if (rc) {
   27f4e:	2800      	cmp	r0, #0
   27f50:	d13e      	bne.n	27fd0 <nvs_prev_ate+0x9c>
	*addr += ate_size;
   27f52:	6829      	ldr	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   27f54:	89a3      	ldrh	r3, [r4, #12]
	*addr += ate_size;
   27f56:	4431      	add	r1, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   27f58:	b28a      	uxth	r2, r1
   27f5a:	1b9b      	subs	r3, r3, r6
   27f5c:	429a      	cmp	r2, r3
	*addr += ate_size;
   27f5e:	6029      	str	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   27f60:	d136      	bne.n	27fd0 <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   27f62:	0c0b      	lsrs	r3, r1, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   27f64:	bf03      	ittte	eq
   27f66:	89e3      	ldrheq	r3, [r4, #14]
   27f68:	f103 33ff 	addeq.w	r3, r3, #4294967295
   27f6c:	eb01 4103 	addeq.w	r1, r1, r3, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   27f70:	f5a1 3180 	subne.w	r1, r1, #65536	; 0x10000
   27f74:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   27f76:	2308      	movs	r3, #8
   27f78:	466a      	mov	r2, sp
   27f7a:	4620      	mov	r0, r4
   27f7c:	f7ff ff2d 	bl	27dda <nvs_flash_rd>
	if (rc) {
   27f80:	bb30      	cbnz	r0, 27fd0 <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   27f82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   27f84:	466a      	mov	r2, sp
   27f86:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   27f88:	4603      	mov	r3, r0
		if (data8[i] != value) {
   27f8a:	f812 7b01 	ldrb.w	r7, [r2], #1
   27f8e:	42b9      	cmp	r1, r7
   27f90:	d115      	bne.n	27fbe <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   27f92:	3301      	adds	r3, #1
   27f94:	2b08      	cmp	r3, #8
   27f96:	d1f8      	bne.n	27f8a <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   27f98:	6863      	ldr	r3, [r4, #4]
   27f9a:	e00e      	b.n	27fba <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   27f9c:	89a3      	ldrh	r3, [r4, #12]
   27f9e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   27fa2:	1b9b      	subs	r3, r3, r6
   27fa4:	429a      	cmp	r2, r3
   27fa6:	d20f      	bcs.n	27fc8 <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   27fa8:	fbb2 f3f6 	udiv	r3, r2, r6
   27fac:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   27fb0:	b956      	cbnz	r6, 27fc8 <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   27fb2:	682b      	ldr	r3, [r5, #0]
   27fb4:	0c1b      	lsrs	r3, r3, #16
   27fb6:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   27fb8:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   27fba:	602b      	str	r3, [r5, #0]
		return 0;
   27fbc:	e008      	b.n	27fd0 <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   27fbe:	4668      	mov	r0, sp
   27fc0:	f7ff ff67 	bl	27e92 <nvs_ate_crc8_check>
   27fc4:	2800      	cmp	r0, #0
   27fc6:	d0e9      	beq.n	27f9c <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   27fc8:	4629      	mov	r1, r5
   27fca:	4620      	mov	r0, r4
   27fcc:	f7dd fc20 	bl	5810 <nvs_recover_last_ate>
}
   27fd0:	b003      	add	sp, #12
   27fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027fd4 <nvs_flash_al_wrt.part.3>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   27fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27fd8:	4607      	mov	r7, r0
   27fda:	b088      	sub	sp, #32
   27fdc:	460d      	mov	r5, r1
	offset = fs->offset;
   27fde:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27fe2:	8986      	ldrh	r6, [r0, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   27fe4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   27fe6:	2100      	movs	r1, #0
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   27fe8:	4690      	mov	r8, r2
   27fea:	461c      	mov	r4, r3
	rc = flash_write_protection_set(fs->flash_device, false);
   27fec:	f7ff fef2 	bl	27dd4 <flash_write_protection_set>
	if (rc) {
   27ff0:	2800      	cmp	r0, #0
   27ff2:	d133      	bne.n	2805c <nvs_flash_al_wrt.part.3+0x88>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   27ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27ff6:	ea4f 4915 	mov.w	r9, r5, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   27ffa:	fa1a f585 	uxtah	r5, sl, r5
   27ffe:	fb06 5909 	mla	r9, r6, r9, r5
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   28002:	681d      	ldr	r5, [r3, #0]
   28004:	426d      	negs	r5, r5
	if (blen > 0) {
   28006:	4025      	ands	r5, r4
   28008:	d00b      	beq.n	28022 <nvs_flash_al_wrt.part.3+0x4e>
   2800a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	return api->write(dev, offset, data, len);
   2800c:	6883      	ldr	r3, [r0, #8]
   2800e:	4642      	mov	r2, r8
   28010:	685e      	ldr	r6, [r3, #4]
   28012:	4649      	mov	r1, r9
   28014:	462b      	mov	r3, r5
   28016:	47b0      	blx	r6
		if (rc) {
   28018:	4606      	mov	r6, r0
   2801a:	b9d0      	cbnz	r0, 28052 <nvs_flash_al_wrt.part.3+0x7e>
		len -= blen;
   2801c:	1b64      	subs	r4, r4, r5
		offset += blen;
   2801e:	44a9      	add	r9, r5
		data8 += blen;
   28020:	44a8      	add	r8, r5
	if (len) {
   28022:	b1f4      	cbz	r4, 28062 <nvs_flash_al_wrt.part.3+0x8e>
		memcpy(buf, data8, len);
   28024:	2320      	movs	r3, #32
   28026:	4622      	mov	r2, r4
   28028:	4641      	mov	r1, r8
   2802a:	4668      	mov	r0, sp
   2802c:	6abe      	ldr	r6, [r7, #40]	; 0x28
   2802e:	f006 f94a 	bl	2e2c6 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   28032:	6afd      	ldr	r5, [r7, #44]	; 0x2c
   28034:	682a      	ldr	r2, [r5, #0]
   28036:	7929      	ldrb	r1, [r5, #4]
   28038:	1b12      	subs	r2, r2, r4
   2803a:	eb0d 0004 	add.w	r0, sp, r4
   2803e:	f006 f96f 	bl	2e320 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   28042:	682b      	ldr	r3, [r5, #0]
   28044:	68b2      	ldr	r2, [r6, #8]
   28046:	4630      	mov	r0, r6
   28048:	6854      	ldr	r4, [r2, #4]
   2804a:	4649      	mov	r1, r9
   2804c:	466a      	mov	r2, sp
   2804e:	47a0      	blx	r4
   28050:	4606      	mov	r6, r0
	(void) flash_write_protection_set(fs->flash_device, true);
   28052:	2101      	movs	r1, #1
   28054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   28056:	f7ff febd 	bl	27dd4 <flash_write_protection_set>
	return rc;
   2805a:	4630      	mov	r0, r6
}
   2805c:	b008      	add	sp, #32
   2805e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   28062:	4626      	mov	r6, r4
   28064:	e7f5      	b.n	28052 <nvs_flash_al_wrt.part.3+0x7e>

00028066 <nvs_flash_ate_wrt>:
{
   28066:	b510      	push	{r4, lr}
   28068:	2308      	movs	r3, #8
   2806a:	460a      	mov	r2, r1
   2806c:	6841      	ldr	r1, [r0, #4]
   2806e:	4604      	mov	r4, r0
   28070:	f7ff ffb0 	bl	27fd4 <nvs_flash_al_wrt.part.3>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   28074:	2108      	movs	r1, #8
   28076:	4602      	mov	r2, r0
   28078:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2807a:	f7ff ff1f 	bl	27ebc <nvs_al_size.isra.0>
   2807e:	6863      	ldr	r3, [r4, #4]
   28080:	1a18      	subs	r0, r3, r0
   28082:	6060      	str	r0, [r4, #4]
}
   28084:	4610      	mov	r0, r2
   28086:	bd10      	pop	{r4, pc}

00028088 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   28088:	2300      	movs	r3, #0
   2808a:	461a      	mov	r2, r3
   2808c:	f7dd bde0 	b.w	5c50 <nvs_write>

00028090 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   28090:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   28092:	2400      	movs	r4, #0
   28094:	9400      	str	r4, [sp, #0]
   28096:	f7dd feb5 	bl	5e04 <nvs_read_hist>
	return rc;
}
   2809a:	b002      	add	sp, #8
   2809c:	bd10      	pop	{r4, pc}

0002809e <device_get_binding>:
   2809e:	f7fb b949 	b.w	23334 <z_impl_device_get_binding>

000280a2 <get_sectors_cb>:
{
   280a2:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   280a4:	6802      	ldr	r2, [r0, #0]
   280a6:	684c      	ldr	r4, [r1, #4]
   280a8:	42a2      	cmp	r2, r4
   280aa:	d316      	bcc.n	280da <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   280ac:	688b      	ldr	r3, [r1, #8]
   280ae:	4423      	add	r3, r4
   280b0:	429a      	cmp	r2, r3
   280b2:	d206      	bcs.n	280c2 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   280b4:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   280b8:	42ab      	cmp	r3, r5
   280ba:	d304      	bcc.n	280c6 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   280bc:	f06f 030b 	mvn.w	r3, #11
   280c0:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   280c2:	2000      	movs	r0, #0
   280c4:	e00a      	b.n	280dc <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   280c6:	68cd      	ldr	r5, [r1, #12]
   280c8:	1b12      	subs	r2, r2, r4
   280ca:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   280ce:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   280d2:	6842      	ldr	r2, [r0, #4]
   280d4:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   280d6:	3301      	adds	r3, #1
   280d8:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   280da:	2001      	movs	r0, #1
}
   280dc:	bd70      	pop	{r4, r5, r6, pc}

000280de <settings_load>:
	return settings_load_subtree(NULL);
   280de:	2000      	movs	r0, #0
   280e0:	f7dd bf74 	b.w	5fcc <settings_load_subtree>

000280e4 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   280e4:	2200      	movs	r2, #0
   280e6:	4611      	mov	r1, r2
   280e8:	f7dd bf38 	b.w	5f5c <settings_save_one>

000280ec <settings_name_steq>:
{
   280ec:	b530      	push	{r4, r5, lr}
	if (next) {
   280ee:	b10a      	cbz	r2, 280f4 <settings_name_steq+0x8>
		*next = NULL;
   280f0:	2300      	movs	r3, #0
   280f2:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   280f4:	b190      	cbz	r0, 2811c <settings_name_steq+0x30>
   280f6:	b151      	cbz	r1, 2810e <settings_name_steq+0x22>
   280f8:	1e4d      	subs	r5, r1, #1
	while ((*key != '\0') && (*key == *name) &&
   280fa:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   280fe:	4603      	mov	r3, r0
   28100:	f810 1b01 	ldrb.w	r1, [r0], #1
   28104:	b15c      	cbz	r4, 2811e <settings_name_steq+0x32>
   28106:	428c      	cmp	r4, r1
   28108:	d101      	bne.n	2810e <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2810a:	2c3d      	cmp	r4, #61	; 0x3d
   2810c:	d1f5      	bne.n	280fa <settings_name_steq+0xe>
	return 0;
   2810e:	2000      	movs	r0, #0
   28110:	e004      	b.n	2811c <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   28112:	293d      	cmp	r1, #61	; 0x3d
   28114:	d008      	beq.n	28128 <settings_name_steq+0x3c>
   28116:	fab1 f081 	clz	r0, r1
   2811a:	0940      	lsrs	r0, r0, #5
}
   2811c:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2811e:	292f      	cmp	r1, #47	; 0x2f
   28120:	d1f7      	bne.n	28112 <settings_name_steq+0x26>
		if (next) {
   28122:	b10a      	cbz	r2, 28128 <settings_name_steq+0x3c>
			*next = name + 1;
   28124:	3301      	adds	r3, #1
   28126:	6013      	str	r3, [r2, #0]
		return 1;
   28128:	2001      	movs	r0, #1
   2812a:	e7f7      	b.n	2811c <settings_name_steq+0x30>

0002812c <settings_name_next>:
{
   2812c:	b530      	push	{r4, r5, lr}
   2812e:	4603      	mov	r3, r0
	if (next) {
   28130:	b109      	cbz	r1, 28136 <settings_name_next+0xa>
		*next = NULL;
   28132:	2200      	movs	r2, #0
   28134:	600a      	str	r2, [r1, #0]
	if (!name) {
   28136:	b16b      	cbz	r3, 28154 <settings_name_next+0x28>
   28138:	461a      	mov	r2, r3
   2813a:	4614      	mov	r4, r2
   2813c:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2813e:	f812 5b01 	ldrb.w	r5, [r2], #1
   28142:	b135      	cbz	r5, 28152 <settings_name_next+0x26>
   28144:	2d3d      	cmp	r5, #61	; 0x3d
   28146:	d004      	beq.n	28152 <settings_name_next+0x26>
   28148:	2d2f      	cmp	r5, #47	; 0x2f
   2814a:	d1f6      	bne.n	2813a <settings_name_next+0xe>
		if (next) {
   2814c:	b109      	cbz	r1, 28152 <settings_name_next+0x26>
			*next = name + 1;
   2814e:	3401      	adds	r4, #1
   28150:	600c      	str	r4, [r1, #0]
}
   28152:	bd30      	pop	{r4, r5, pc}
		return 0;
   28154:	4618      	mov	r0, r3
   28156:	e7fc      	b.n	28152 <settings_name_next+0x26>

00028158 <settings_nvs_read_fn>:
{
   28158:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2815a:	4613      	mov	r3, r2
{
   2815c:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2815e:	460a      	mov	r2, r1
   28160:	8881      	ldrh	r1, [r0, #4]
   28162:	6800      	ldr	r0, [r0, #0]
   28164:	f7ff ff94 	bl	28090 <nvs_read>
}
   28168:	42a0      	cmp	r0, r4
   2816a:	bfa8      	it	ge
   2816c:	4620      	movge	r0, r4
   2816e:	bd10      	pop	{r4, pc}

00028170 <settings_nvs_save>:
{
   28170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28174:	b097      	sub	sp, #92	; 0x5c
   28176:	4604      	mov	r4, r0
   28178:	9201      	str	r2, [sp, #4]
   2817a:	469b      	mov	fp, r3
	if (!name) {
   2817c:	468a      	mov	sl, r1
   2817e:	2900      	cmp	r1, #0
   28180:	d06b      	beq.n	2825a <settings_nvs_save+0xea>
	delete = ((value == NULL) || (val_len == 0));
   28182:	b1da      	cbz	r2, 281bc <settings_nvs_save+0x4c>
   28184:	fabb f78b 	clz	r7, fp
   28188:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2818a:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   2818c:	3501      	adds	r5, #1
   2818e:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   28190:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   28192:	f104 0908 	add.w	r9, r4, #8
		name_id--;
   28196:	1e6e      	subs	r6, r5, #1
   28198:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2819a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2819e:	d02d      	beq.n	281fc <settings_nvs_save+0x8c>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   281a0:	234a      	movs	r3, #74	; 0x4a
   281a2:	aa03      	add	r2, sp, #12
   281a4:	4631      	mov	r1, r6
   281a6:	4648      	mov	r0, r9
   281a8:	f7ff ff72 	bl	28090 <nvs_read>
		if (rc < 0) {
   281ac:	2800      	cmp	r0, #0
   281ae:	da07      	bge.n	281c0 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   281b0:	f110 0f02 	cmn.w	r0, #2
   281b4:	bf08      	it	eq
   281b6:	46b0      	moveq	r8, r6
   281b8:	4635      	mov	r5, r6
   281ba:	e7ec      	b.n	28196 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   281bc:	2701      	movs	r7, #1
   281be:	e7e4      	b.n	2818a <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   281c0:	ab16      	add	r3, sp, #88	; 0x58
   281c2:	4418      	add	r0, r3
   281c4:	2300      	movs	r3, #0
   281c6:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   281ca:	a903      	add	r1, sp, #12
   281cc:	4650      	mov	r0, sl
   281ce:	f7d9 fe11 	bl	1df4 <strcmp>
   281d2:	2800      	cmp	r0, #0
   281d4:	d1f0      	bne.n	281b8 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   281d6:	b1a7      	cbz	r7, 28202 <settings_nvs_save+0x92>
   281d8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   281da:	42b3      	cmp	r3, r6
   281dc:	d143      	bne.n	28266 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   281de:	4622      	mov	r2, r4
   281e0:	1e73      	subs	r3, r6, #1
   281e2:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   281e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   281ea:	2302      	movs	r3, #2
   281ec:	4648      	mov	r0, r9
   281ee:	f7dd fd2f 	bl	5c50 <nvs_write>
			if (rc < 0) {
   281f2:	2800      	cmp	r0, #0
   281f4:	da37      	bge.n	28266 <settings_nvs_save+0xf6>
}
   281f6:	b017      	add	sp, #92	; 0x5c
   281f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   281fc:	b1ff      	cbz	r7, 2823e <settings_nvs_save+0xce>
		return 0;
   281fe:	2000      	movs	r0, #0
   28200:	e7f9      	b.n	281f6 <settings_nvs_save+0x86>
   28202:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   28204:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   28208:	d02a      	beq.n	28260 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2820a:	f104 0508 	add.w	r5, r4, #8
   2820e:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   28212:	465b      	mov	r3, fp
   28214:	9a01      	ldr	r2, [sp, #4]
   28216:	b289      	uxth	r1, r1
   28218:	4628      	mov	r0, r5
   2821a:	f7dd fd19 	bl	5c50 <nvs_write>
	if (rc < 0) {
   2821e:	2800      	cmp	r0, #0
   28220:	dbe9      	blt.n	281f6 <settings_nvs_save+0x86>
	if (write_name) {
   28222:	b977      	cbnz	r7, 28242 <settings_nvs_save+0xd2>
	if (write_name_id > cf->last_name_id) {
   28224:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   28226:	4543      	cmp	r3, r8
   28228:	d2e9      	bcs.n	281fe <settings_nvs_save+0x8e>
		cf->last_name_id = write_name_id;
   2822a:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2822c:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   2822e:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   28232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   28236:	4628      	mov	r0, r5
   28238:	f7dd fd0a 	bl	5c50 <nvs_write>
   2823c:	e020      	b.n	28280 <settings_nvs_save+0x110>
	write_name = true;
   2823e:	2701      	movs	r7, #1
   28240:	e7e0      	b.n	28204 <settings_nvs_save+0x94>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   28242:	4650      	mov	r0, sl
   28244:	f7d9 fde0 	bl	1e08 <strlen>
   28248:	4652      	mov	r2, sl
   2824a:	4603      	mov	r3, r0
   2824c:	4641      	mov	r1, r8
   2824e:	4628      	mov	r0, r5
   28250:	f7dd fcfe 	bl	5c50 <nvs_write>
		if (rc < 0) {
   28254:	2800      	cmp	r0, #0
   28256:	dae5      	bge.n	28224 <settings_nvs_save+0xb4>
   28258:	e7cd      	b.n	281f6 <settings_nvs_save+0x86>
		return -EINVAL;
   2825a:	f06f 0015 	mvn.w	r0, #21
   2825e:	e7ca      	b.n	281f6 <settings_nvs_save+0x86>
		return -ENOMEM;
   28260:	f06f 000b 	mvn.w	r0, #11
   28264:	e7c7      	b.n	281f6 <settings_nvs_save+0x86>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   28266:	4631      	mov	r1, r6
   28268:	4648      	mov	r0, r9
   2826a:	f7ff ff0d 	bl	28088 <nvs_delete>
			if (rc >= 0) {
   2826e:	2800      	cmp	r0, #0
   28270:	dbc1      	blt.n	281f6 <settings_nvs_save+0x86>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   28272:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   28276:	313f      	adds	r1, #63	; 0x3f
   28278:	b289      	uxth	r1, r1
   2827a:	4648      	mov	r0, r9
   2827c:	f7ff ff04 	bl	28088 <nvs_delete>
	if (rc < 0) {
   28280:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   28284:	e7b7      	b.n	281f6 <settings_nvs_save+0x86>

00028286 <settings_nvs_backend_init>:
{
   28286:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   28288:	f100 0608 	add.w	r6, r0, #8
   2828c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   2828e:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   28290:	4630      	mov	r0, r6
   28292:	f7dd fba7 	bl	59e4 <nvs_init>
	if (rc) {
   28296:	4605      	mov	r5, r0
   28298:	b970      	cbnz	r0, 282b8 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   2829a:	2302      	movs	r3, #2
   2829c:	f10d 0206 	add.w	r2, sp, #6
   282a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   282a4:	4630      	mov	r0, r6
   282a6:	f7ff fef3 	bl	28090 <nvs_read>
	if (rc < 0) {
   282aa:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   282ac:	bfb4      	ite	lt
   282ae:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   282b2:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   282b6:	8723      	strh	r3, [r4, #56]	; 0x38
}
   282b8:	4628      	mov	r0, r5
   282ba:	b002      	add	sp, #8
   282bc:	bd70      	pop	{r4, r5, r6, pc}

000282be <set_starting_state>:
{
   282be:	b510      	push	{r4, lr}
	__asm__ volatile(
   282c0:	f04f 0320 	mov.w	r3, #32
   282c4:	f3ef 8211 	mrs	r2, BASEPRI
   282c8:	f383 8811 	msr	BASEPRI, r3
   282cc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   282d0:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   282d2:	f003 0407 	and.w	r4, r3, #7
   282d6:	2c01      	cmp	r4, #1
   282d8:	d106      	bne.n	282e8 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   282da:	6001      	str	r1, [r0, #0]
	int err = 0;
   282dc:	2000      	movs	r0, #0
	__asm__ volatile(
   282de:	f382 8811 	msr	BASEPRI, r2
   282e2:	f3bf 8f6f 	isb	sy
}
   282e6:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   282e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   282ec:	428b      	cmp	r3, r1
		err = -EALREADY;
   282ee:	bf14      	ite	ne
   282f0:	f04f 30ff 	movne.w	r0, #4294967295
   282f4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   282f8:	e7f1      	b.n	282de <set_starting_state+0x20>

000282fa <set_on_state>:
	__asm__ volatile(
   282fa:	f04f 0320 	mov.w	r3, #32
   282fe:	f3ef 8211 	mrs	r2, BASEPRI
   28302:	f383 8811 	msr	BASEPRI, r3
   28306:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2830a:	6803      	ldr	r3, [r0, #0]
   2830c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   28310:	f043 0302 	orr.w	r3, r3, #2
   28314:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   28316:	f382 8811 	msr	BASEPRI, r2
   2831a:	f3bf 8f6f 	isb	sy
}
   2831e:	4770      	bx	lr

00028320 <onoff_started_callback>:
	return &data->mgr[type];
   28320:	68c0      	ldr	r0, [r0, #12]
   28322:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   28324:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   28328:	2100      	movs	r1, #0
   2832a:	4710      	bx	r2

0002832c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2832c:	2000      	movs	r0, #0
   2832e:	f7fa bbff 	b.w	22b30 <nrfx_clock_start>

00028332 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   28332:	2000      	movs	r0, #0
   28334:	f7fa bc4a 	b.w	22bcc <nrfx_clock_stop>

00028338 <api_stop>:
	return stop(dev, subsys, CTX_API);
   28338:	2280      	movs	r2, #128	; 0x80
   2833a:	f7de b8b3 	b.w	64a4 <stop>

0002833e <blocking_start_callback>:
	z_impl_k_sem_give(sem);
   2833e:	4610      	mov	r0, r2
   28340:	f7fc be3c 	b.w	24fbc <z_impl_k_sem_give>

00028344 <api_start>:
{
   28344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28348:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   2834a:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2834c:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   2834e:	434c      	muls	r4, r1
{
   28350:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   28352:	f104 0048 	add.w	r0, r4, #72	; 0x48
   28356:	2180      	movs	r1, #128	; 0x80
   28358:	4428      	add	r0, r5
{
   2835a:	4690      	mov	r8, r2
   2835c:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   2835e:	f7ff ffae 	bl	282be <set_starting_state>
	if (err < 0) {
   28362:	2800      	cmp	r0, #0
   28364:	db06      	blt.n	28374 <api_start+0x30>
	subdata->cb = cb;
   28366:	4425      	add	r5, r4
	subdata->user_data = user_data;
   28368:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2836c:	6873      	ldr	r3, [r6, #4]
   2836e:	591b      	ldr	r3, [r3, r4]
   28370:	4798      	blx	r3
	return 0;
   28372:	2000      	movs	r0, #0
}
   28374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028378 <can_calc_prescaler>:
}
#endif

int can_calc_prescaler(const struct device *dev, struct can_timing *timing,
		       uint32_t bitrate)
{
   28378:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2837c:	460e      	mov	r6, r1
   2837e:	4615      	mov	r5, r2
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
   28380:	884c      	ldrh	r4, [r1, #2]
   28382:	f8b1 8004 	ldrh.w	r8, [r1, #4]
   28386:	88cf      	ldrh	r7, [r1, #6]
	return api->get_core_clock(dev, rate);
   28388:	6883      	ldr	r3, [r0, #8]
   2838a:	a901      	add	r1, sp, #4
   2838c:	69db      	ldr	r3, [r3, #28]
   2838e:	4798      	blx	r3
		   CAN_SYNC_SEG;
	uint32_t core_clock;
	int ret;

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
   28390:	b978      	cbnz	r0, 283b2 <can_calc_prescaler+0x3a>
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
   28392:	eb04 0308 	add.w	r3, r4, r8
   28396:	3301      	adds	r3, #1
   28398:	443b      	add	r3, r7
		return ret;
	}

	timing->prescaler = core_clock / (bitrate * ts);
   2839a:	9901      	ldr	r1, [sp, #4]
   2839c:	fb05 f203 	mul.w	r2, r5, r3
   283a0:	fbb1 f2f2 	udiv	r2, r1, r2
   283a4:	8132      	strh	r2, [r6, #8]

	return core_clock % (ts * timing->prescaler);
   283a6:	b292      	uxth	r2, r2
   283a8:	4353      	muls	r3, r2
   283aa:	fbb1 f0f3 	udiv	r0, r1, r3
   283ae:	fb03 1010 	mls	r0, r3, r0, r1
}
   283b2:	b002      	add	sp, #8
   283b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000283b8 <z_impl_spi_transceive>:

static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
   283b8:	b410      	push	{r4}
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   283ba:	6884      	ldr	r4, [r0, #8]
   283bc:	6824      	ldr	r4, [r4, #0]
   283be:	46a4      	mov	ip, r4
}
   283c0:	bc10      	pop	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   283c2:	4760      	bx	ip

000283c4 <mcp2515_convert_mcp2515frame_to_zcanframe>:
{
   283c4:	b510      	push	{r4, lr}
	if (source[MCP2515_FRAME_OFFSET_SIDL] & BIT(3)) {
   283c6:	7843      	ldrb	r3, [r0, #1]
   283c8:	f013 0208 	ands.w	r2, r3, #8
   283cc:	78cb      	ldrb	r3, [r1, #3]
   283ce:	d02b      	beq.n	28428 <mcp2515_convert_mcp2515frame_to_zcanframe+0x64>
		target->id_type = CAN_EXTENDED_IDENTIFIER;
   283d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   283d4:	70cb      	strb	r3, [r1, #3]
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   283d6:	7883      	ldrb	r3, [r0, #2]
			(source[MCP2515_FRAME_OFFSET_SIDH] << 21) |
   283d8:	7804      	ldrb	r4, [r0, #0]
			((source[MCP2515_FRAME_OFFSET_SIDL] >> 5) << 18) |
   283da:	7842      	ldrb	r2, [r0, #1]
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   283dc:	021b      	lsls	r3, r3, #8
   283de:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
			source[MCP2515_FRAME_OFFSET_EID0];
   283e2:	78c4      	ldrb	r4, [r0, #3]
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   283e4:	4323      	orrs	r3, r4
			((source[MCP2515_FRAME_OFFSET_SIDL] >> 5) << 18) |
   283e6:	0954      	lsrs	r4, r2, #5
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
   283e8:	0412      	lsls	r2, r2, #16
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   283ea:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
   283ee:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   283f2:	4313      	orrs	r3, r2
		target->id = (source[MCP2515_FRAME_OFFSET_SIDH] << 3) |
   283f4:	680a      	ldr	r2, [r1, #0]
   283f6:	f363 021c 	bfi	r2, r3, #0, #29
   283fa:	600a      	str	r2, [r1, #0]
	target->dlc = source[MCP2515_FRAME_OFFSET_DLC] & 0x0F;
   283fc:	7903      	ldrb	r3, [r0, #4]
	target->rtr = source[MCP2515_FRAME_OFFSET_DLC] & BIT(6) ?
   283fe:	78cc      	ldrb	r4, [r1, #3]
	target->dlc = source[MCP2515_FRAME_OFFSET_DLC] & 0x0F;
   28400:	f003 030f 	and.w	r3, r3, #15
   28404:	710b      	strb	r3, [r1, #4]
		      CAN_REMOTEREQUEST : CAN_DATAFRAME;
   28406:	4603      	mov	r3, r0
   28408:	3108      	adds	r1, #8
   2840a:	f813 2f04 	ldrb.w	r2, [r3, #4]!
   2840e:	0992      	lsrs	r2, r2, #6
	target->rtr = source[MCP2515_FRAME_OFFSET_DLC] & BIT(6) ?
   28410:	f362 1486 	bfi	r4, r2, #6, #1
   28414:	f801 4c05 	strb.w	r4, [r1, #-5]
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   28418:	300c      	adds	r0, #12
		target->data[data_idx] = source[MCP2515_FRAME_OFFSET_D0 +
   2841a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2841e:	f801 2b01 	strb.w	r2, [r1], #1
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   28422:	4283      	cmp	r3, r0
   28424:	d1f9      	bne.n	2841a <mcp2515_convert_mcp2515frame_to_zcanframe+0x56>
}
   28426:	bd10      	pop	{r4, pc}
		target->id_type = CAN_STANDARD_IDENTIFIER;
   28428:	f362 13c7 	bfi	r3, r2, #7, #1
   2842c:	70cb      	strb	r3, [r1, #3]
				 (source[MCP2515_FRAME_OFFSET_SIDL] >> 5);
   2842e:	7843      	ldrb	r3, [r0, #1]
		target->id = (source[MCP2515_FRAME_OFFSET_SIDH] << 3) |
   28430:	7802      	ldrb	r2, [r0, #0]
				 (source[MCP2515_FRAME_OFFSET_SIDL] >> 5);
   28432:	095b      	lsrs	r3, r3, #5
		target->id = (source[MCP2515_FRAME_OFFSET_SIDH] << 3) |
   28434:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   28438:	e7dc      	b.n	283f4 <mcp2515_convert_mcp2515frame_to_zcanframe+0x30>

0002843a <mcp2515_get_core_clock>:
	*rate = dev_cfg->osc_freq / 2;
   2843a:	6843      	ldr	r3, [r0, #4]
   2843c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2843e:	085b      	lsrs	r3, r3, #1
   28440:	600b      	str	r3, [r1, #0]
}
   28442:	2000      	movs	r0, #0
   28444:	4770      	bx	lr

00028446 <mcp2515_register_state_change_isr>:
	dev_data->state_change_isr = isr;
   28446:	68c3      	ldr	r3, [r0, #12]
   28448:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
}
   2844c:	4770      	bx	lr

0002844e <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   2844e:	f7fb bb71 	b.w	23b34 <z_impl_k_mutex_unlock>

00028452 <k_sem_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   28452:	f005 bdf6 	b.w	2e042 <z_impl_k_sem_init>

00028456 <k_mutex_lock.constprop.20>:
	return z_impl_k_mutex_lock(mutex, timeout);
   28456:	f7fb ba99 	b.w	2398c <z_impl_k_mutex_lock>

0002845a <mcp2515_rx_filter.isra.4>:
static void mcp2515_rx_filter(const struct device *dev,
   2845a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2845e:	f500 7ad8 	add.w	sl, r0, #432	; 0x1b0
static void mcp2515_rx_filter(const struct device *dev,
   28462:	4681      	mov	r9, r0
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   28464:	f04f 32ff 	mov.w	r2, #4294967295
   28468:	f04f 33ff 	mov.w	r3, #4294967295
   2846c:	4650      	mov	r0, sl
static void mcp2515_rx_filter(const struct device *dev,
   2846e:	460c      	mov	r4, r1
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   28470:	f7ff fff1 	bl	28456 <k_mutex_lock.constprop.20>
	for (; filter_idx < CONFIG_CAN_MAX_FILTER; filter_idx++) {
   28474:	f509 78ae 	add.w	r8, r9, #348	; 0x15c
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   28478:	2500      	movs	r5, #0
		tmp_msg = *msg;
   2847a:	466e      	mov	r6, sp
		if (!(BIT(filter_idx) & dev_data->filter_usage)) {
   2847c:	f8d9 3158 	ldr.w	r3, [r9, #344]	; 0x158
   28480:	40eb      	lsrs	r3, r5
   28482:	07df      	lsls	r7, r3, #31
   28484:	d524      	bpl.n	284d0 <mcp2515_rx_filter.isra.4+0x76>
	if (msg->id_type != filter->id_type) {
   28486:	f105 0330 	add.w	r3, r5, #48	; 0x30
   2848a:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
   2848e:	78e2      	ldrb	r2, [r4, #3]
   28490:	79d9      	ldrb	r1, [r3, #7]
   28492:	ea82 0001 	eor.w	r0, r2, r1
   28496:	0600      	lsls	r0, r0, #24
   28498:	d41a      	bmi.n	284d0 <mcp2515_rx_filter.isra.4+0x76>
	if ((msg->rtr ^ filter->rtr) & filter->rtr_mask) {
   2849a:	f3c1 1180 	ubfx	r1, r1, #6, #1
   2849e:	f3c2 1280 	ubfx	r2, r2, #6, #1
   284a2:	404a      	eors	r2, r1
   284a4:	7ad9      	ldrb	r1, [r3, #11]
   284a6:	ea12 1291 	ands.w	r2, r2, r1, lsr #6
   284aa:	d111      	bne.n	284d0 <mcp2515_rx_filter.isra.4+0x76>
	if ((msg->id ^ filter->id) & filter->id_mask) {
   284ac:	685a      	ldr	r2, [r3, #4]
   284ae:	6821      	ldr	r1, [r4, #0]
   284b0:	689b      	ldr	r3, [r3, #8]
   284b2:	404a      	eors	r2, r1
   284b4:	f3c3 031c 	ubfx	r3, r3, #0, #29
   284b8:	421a      	tst	r2, r3
   284ba:	d109      	bne.n	284d0 <mcp2515_rx_filter.isra.4+0x76>
		tmp_msg = *msg;
   284bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
		callback = dev_data->rx_cb[filter_idx];
   284c0:	f8d8 7000 	ldr.w	r7, [r8]
		tmp_msg = *msg;
   284c4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		callback(&tmp_msg, dev_data->cb_arg[filter_idx]);
   284c8:	f8d8 1014 	ldr.w	r1, [r8, #20]
   284cc:	4630      	mov	r0, r6
   284ce:	47b8      	blx	r7
   284d0:	3501      	adds	r5, #1
	for (; filter_idx < CONFIG_CAN_MAX_FILTER; filter_idx++) {
   284d2:	2d05      	cmp	r5, #5
   284d4:	f108 0804 	add.w	r8, r8, #4
   284d8:	d1d0      	bne.n	2847c <mcp2515_rx_filter.isra.4+0x22>
	k_mutex_unlock(&dev_data->mutex);
   284da:	4650      	mov	r0, sl
   284dc:	f7ff ffb7 	bl	2844e <k_mutex_unlock>
}
   284e0:	b004      	add	sp, #16
   284e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000284e6 <mcp2515_detach>:
{
   284e6:	b570      	push	{r4, r5, r6, lr}
	struct mcp2515_data *dev_data = DEV_DATA(dev);
   284e8:	68c4      	ldr	r4, [r0, #12]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   284ea:	f504 75d8 	add.w	r5, r4, #432	; 0x1b0
   284ee:	f04f 33ff 	mov.w	r3, #4294967295
   284f2:	4628      	mov	r0, r5
   284f4:	f04f 32ff 	mov.w	r2, #4294967295
{
   284f8:	460e      	mov	r6, r1
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   284fa:	f7ff ffac 	bl	28456 <k_mutex_lock.constprop.20>
	dev_data->filter_usage &= ~BIT(filter_nr);
   284fe:	2301      	movs	r3, #1
   28500:	fa03 f106 	lsl.w	r1, r3, r6
   28504:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
   28508:	ea23 0301 	bic.w	r3, r3, r1
   2850c:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	k_mutex_unlock(&dev_data->mutex);
   28510:	4628      	mov	r0, r5
}
   28512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_mutex_unlock(&dev_data->mutex);
   28516:	f7ff bf9a 	b.w	2844e <k_mutex_unlock>

0002851a <mcp2515_int_gpio_callback>:
	z_impl_k_sem_give(sem);
   2851a:	f101 00a4 	add.w	r0, r1, #164	; 0xa4
   2851e:	f7fc bd4d 	b.w	24fbc <z_impl_k_sem_give>

00028522 <mcp2515_cmd_read_reg.isra.3>:
static int mcp2515_cmd_read_reg(const struct device *dev, uint8_t reg_addr,
   28522:	b530      	push	{r4, r5, lr}
   28524:	b08f      	sub	sp, #60	; 0x3c
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ, reg_addr };
   28526:	2403      	movs	r4, #3
   28528:	f88d 1005 	strb.w	r1, [sp, #5]
	struct spi_buf tx_buf[] = {
   2852c:	a901      	add	r1, sp, #4
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ, reg_addr };
   2852e:	f88d 4004 	strb.w	r4, [sp, #4]
	struct spi_buf tx_buf[] = {
   28532:	9106      	str	r1, [sp, #24]
   28534:	2400      	movs	r4, #0
   28536:	2102      	movs	r1, #2
   28538:	9309      	str	r3, [sp, #36]	; 0x24
	const struct spi_buf_set tx = {
   2853a:	ad06      	add	r5, sp, #24
	struct spi_buf rx_buf[] = {
   2853c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	const struct spi_buf_set rx = {
   28540:	ab0a      	add	r3, sp, #40	; 0x28
	struct spi_buf tx_buf[] = {
   28542:	e9cd 1407 	strd	r1, r4, [sp, #28]
	const struct spi_buf_set tx = {
   28546:	e9cd 5102 	strd	r5, r1, [sp, #8]
	struct spi_buf rx_buf[] = {
   2854a:	e9cd 410a 	strd	r4, r1, [sp, #40]	; 0x28
	const struct spi_buf_set rx = {
   2854e:	e9cd 3104 	strd	r3, r1, [sp, #16]
	return spi_transceive(DEV_DATA(dev)->spi, &DEV_DATA(dev)->spi_cfg,
   28552:	4601      	mov	r1, r0
   28554:	f851 0b04 	ldr.w	r0, [r1], #4
   28558:	ab04      	add	r3, sp, #16
   2855a:	aa02      	add	r2, sp, #8
   2855c:	f7ff ff2c 	bl	283b8 <z_impl_spi_transceive>
}
   28560:	b00f      	add	sp, #60	; 0x3c
   28562:	bd30      	pop	{r4, r5, pc}

00028564 <mcp2515_cmd_soft_reset.isra.0>:
static int mcp2515_cmd_soft_reset(const struct device *dev)
   28564:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RESET };
   28566:	23c0      	movs	r3, #192	; 0xc0
   28568:	f88d 3004 	strb.w	r3, [sp, #4]
	return spi_write(DEV_DATA(dev)->spi, &DEV_DATA(dev)->spi_cfg, &tx);
   2856c:	4601      	mov	r1, r0
	const struct spi_buf tx_buf = {
   2856e:	ab01      	add	r3, sp, #4
   28570:	9302      	str	r3, [sp, #8]
	const struct spi_buf_set tx = {
   28572:	aa02      	add	r2, sp, #8
	const struct spi_buf tx_buf = {
   28574:	2301      	movs	r3, #1
   28576:	9303      	str	r3, [sp, #12]
	const struct spi_buf_set tx = {
   28578:	e9cd 2304 	strd	r2, r3, [sp, #16]
	return spi_write(DEV_DATA(dev)->spi, &DEV_DATA(dev)->spi_cfg, &tx);
   2857c:	f851 0b04 	ldr.w	r0, [r1], #4
   28580:	2300      	movs	r3, #0
   28582:	aa04      	add	r2, sp, #16
   28584:	f7ff ff18 	bl	283b8 <z_impl_spi_transceive>
}
   28588:	b007      	add	sp, #28
   2858a:	f85d fb04 	ldr.w	pc, [sp], #4

0002858e <mcp2515_tx_done.isra.8>:
	if (dev_data->tx_cb[tx_idx].cb == NULL) {
   2858e:	eb00 1241 	add.w	r2, r0, r1, lsl #5
static void mcp2515_tx_done(const struct device *dev, uint8_t tx_idx)
   28592:	b570      	push	{r4, r5, r6, lr}
	if (dev_data->tx_cb[tx_idx].cb == NULL) {
   28594:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
static void mcp2515_tx_done(const struct device *dev, uint8_t tx_idx)
   28598:	4604      	mov	r4, r0
   2859a:	460d      	mov	r5, r1
	if (dev_data->tx_cb[tx_idx].cb == NULL) {
   2859c:	b9f3      	cbnz	r3, 285dc <mcp2515_tx_done.isra.8+0x4e>
		k_sem_give(&dev_data->tx_cb[tx_idx].sem);
   2859e:	4610      	mov	r0, r2
   285a0:	30f4      	adds	r0, #244	; 0xf4
   285a2:	f7fc fd0b 	bl	24fbc <z_impl_k_sem_give>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   285a6:	f504 76d8 	add.w	r6, r4, #432	; 0x1b0
   285aa:	f04f 32ff 	mov.w	r2, #4294967295
   285ae:	f04f 33ff 	mov.w	r3, #4294967295
   285b2:	4630      	mov	r0, r6
   285b4:	f7ff ff4f 	bl	28456 <k_mutex_lock.constprop.20>
	dev_data->tx_busy_map &= ~BIT(tx_idx);
   285b8:	2101      	movs	r1, #1
   285ba:	fa01 f305 	lsl.w	r3, r1, r5
   285be:	f894 1154 	ldrb.w	r1, [r4, #340]	; 0x154
   285c2:	ea21 0103 	bic.w	r1, r1, r3
   285c6:	f884 1154 	strb.w	r1, [r4, #340]	; 0x154
	k_mutex_unlock(&dev_data->mutex);
   285ca:	4630      	mov	r0, r6
   285cc:	f7ff ff3f 	bl	2844e <k_mutex_unlock>
   285d0:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
}
   285d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   285d8:	f7fc bcf0 	b.w	24fbc <z_impl_k_sem_give>
		dev_data->tx_cb[tx_idx].cb(0, dev_data->tx_cb[tx_idx].cb_arg);
   285dc:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   285e0:	2000      	movs	r0, #0
   285e2:	4798      	blx	r3
   285e4:	e7df      	b.n	285a6 <mcp2515_tx_done.isra.8+0x18>

000285e6 <mcp2515_cmd_bit_modify.isra.1>:
static int mcp2515_cmd_bit_modify(const struct device *dev, uint8_t reg_addr,
   285e6:	b510      	push	{r4, lr}
   285e8:	b086      	sub	sp, #24
	uint8_t cmd_buf[] = { MCP2515_OPCODE_BIT_MODIFY, reg_addr, mask, data };
   285ea:	2405      	movs	r4, #5
   285ec:	f88d 3007 	strb.w	r3, [sp, #7]
	const struct spi_buf tx_buf = {
   285f0:	ab01      	add	r3, sp, #4
   285f2:	9302      	str	r3, [sp, #8]
   285f4:	2304      	movs	r3, #4
	uint8_t cmd_buf[] = { MCP2515_OPCODE_BIT_MODIFY, reg_addr, mask, data };
   285f6:	f88d 1005 	strb.w	r1, [sp, #5]
	const struct spi_buf tx_buf = {
   285fa:	9303      	str	r3, [sp, #12]
	return spi_write(DEV_DATA(dev)->spi, &DEV_DATA(dev)->spi_cfg, &tx);
   285fc:	4601      	mov	r1, r0
	const struct spi_buf_set tx = {
   285fe:	ab02      	add	r3, sp, #8
   28600:	9304      	str	r3, [sp, #16]
   28602:	2301      	movs	r3, #1
	uint8_t cmd_buf[] = { MCP2515_OPCODE_BIT_MODIFY, reg_addr, mask, data };
   28604:	f88d 4004 	strb.w	r4, [sp, #4]
   28608:	f88d 2006 	strb.w	r2, [sp, #6]
	const struct spi_buf_set tx = {
   2860c:	9305      	str	r3, [sp, #20]
	return spi_write(DEV_DATA(dev)->spi, &DEV_DATA(dev)->spi_cfg, &tx);
   2860e:	f851 0b04 	ldr.w	r0, [r1], #4
   28612:	2300      	movs	r3, #0
   28614:	aa04      	add	r2, sp, #16
   28616:	f7ff fecf 	bl	283b8 <z_impl_spi_transceive>
}
   2861a:	b006      	add	sp, #24
   2861c:	bd10      	pop	{r4, pc}

0002861e <z_impl_hwinfo_get_device_id>:
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   2861e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   28622:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28624:	6e56      	ldr	r6, [r2, #100]	; 0x64
   28626:	6e55      	ldr	r5, [r2, #100]	; 0x64
   28628:	6e54      	ldr	r4, [r2, #100]	; 0x64
   2862a:	6e53      	ldr	r3, [r2, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   2862c:	0a2d      	lsrs	r5, r5, #8
   2862e:	061b      	lsls	r3, r3, #24
   28630:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   28634:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   28638:	0224      	lsls	r4, r4, #8
   2863a:	432b      	orrs	r3, r5
   2863c:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   28640:	4323      	orrs	r3, r4
   28642:	9300      	str	r3, [sp, #0]
   28644:	6e16      	ldr	r6, [r2, #96]	; 0x60
   28646:	6e15      	ldr	r5, [r2, #96]	; 0x60
   28648:	6e14      	ldr	r4, [r2, #96]	; 0x60
   2864a:	6e13      	ldr	r3, [r2, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   2864c:	0a2a      	lsrs	r2, r5, #8
   2864e:	061b      	lsls	r3, r3, #24
   28650:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   28654:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   28658:	2908      	cmp	r1, #8
   2865a:	ea43 0302 	orr.w	r3, r3, r2
   2865e:	ea4f 2204 	mov.w	r2, r4, lsl #8
   28662:	bf28      	it	cs
   28664:	2108      	movcs	r1, #8
   28666:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   2866a:	4313      	orrs	r3, r2
   2866c:	460c      	mov	r4, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2866e:	460a      	mov	r2, r1
   28670:	4669      	mov	r1, sp
   28672:	9301      	str	r3, [sp, #4]
   28674:	f005 fe19 	bl	2e2aa <memcpy>
	}

	memcpy(buffer, dev_id.id, length);

	return length;
}
   28678:	4620      	mov	r0, r4
   2867a:	b002      	add	sp, #8
   2867c:	bd70      	pop	{r4, r5, r6, pc}

0002867e <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   2867e:	4770      	bx	lr

00028680 <sys_clock_disable>:
   28680:	4770      	bx	lr

00028682 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   28682:	2000      	movs	r0, #0
   28684:	f7dd be8c 	b.w	63a0 <sys_reboot>

00028688 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   28688:	428b      	cmp	r3, r1
{
   2868a:	b538      	push	{r3, r4, r5, lr}
   2868c:	4615      	mov	r5, r2
   2868e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   28690:	d805      	bhi.n	2869e <_copy+0x16>
   28692:	461a      	mov	r2, r3
   28694:	4629      	mov	r1, r5
   28696:	f005 fe08 	bl	2e2aa <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2869a:	4620      	mov	r0, r4
   2869c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2869e:	2400      	movs	r4, #0
   286a0:	e7fb      	b.n	2869a <_copy+0x12>

000286a2 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   286a2:	f005 be3d 	b.w	2e320 <memset>

000286a6 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   286a6:	09c3      	lsrs	r3, r0, #7
   286a8:	005a      	lsls	r2, r3, #1
   286aa:	4413      	add	r3, r2
   286ac:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   286b0:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   286b4:	b2c0      	uxtb	r0, r0
   286b6:	4770      	bx	lr

000286b8 <_set_secure.constprop.0>:
   286b8:	460a      	mov	r2, r1
 * @param len IN -- number of times the value will be copied
 */
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
   286ba:	b508      	push	{r3, lr}
   286bc:	2100      	movs	r1, #0
   286be:	f005 fe2f 	bl	2e320 <memset>
{
  (void) memset(to, val, len);
#ifdef __GNUC__
  __asm__ __volatile__("" :: "g"(to) : "memory");
#endif /* __GNUC__ */
}
   286c2:	bd08      	pop	{r3, pc}

000286c4 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   286c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   286c8:	4606      	mov	r6, r0
   286ca:	b0a8      	sub	sp, #160	; 0xa0
   286cc:	460f      	mov	r7, r1
   286ce:	4614      	mov	r4, r2
   286d0:	2540      	movs	r5, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   286d2:	f102 0824 	add.w	r8, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   286d6:	f7de fff3 	bl	76c0 <uECC_get_rng>
		if (!rng_function ||
   286da:	4603      	mov	r3, r0
   286dc:	2800      	cmp	r0, #0
   286de:	d03c      	beq.n	2875a <uECC_make_key+0x96>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   286e0:	2140      	movs	r1, #64	; 0x40
   286e2:	a808      	add	r0, sp, #32
   286e4:	4798      	blx	r3
		if (!rng_function ||
   286e6:	b3c0      	cbz	r0, 2875a <uECC_make_key+0x96>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   286e8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   286ec:	f112 031f 	adds.w	r3, r2, #31
   286f0:	bf48      	it	mi
   286f2:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   286f6:	a908      	add	r1, sp, #32
   286f8:	4642      	mov	r2, r8
   286fa:	4668      	mov	r0, sp
   286fc:	f343 1347 	sbfx	r3, r3, #5, #8
   28700:	f000 f9fc 	bl	28afc <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   28704:	4622      	mov	r2, r4
   28706:	4669      	mov	r1, sp
   28708:	a818      	add	r0, sp, #96	; 0x60
   2870a:	f000 fe12 	bl	29332 <EccPoint_compute_public_key>
   2870e:	b310      	cbz	r0, 28756 <uECC_make_key+0x92>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   28710:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   28714:	1dd9      	adds	r1, r3, #7
   28716:	bf48      	it	mi
   28718:	f103 010e 	addmi.w	r1, r3, #14
   2871c:	466a      	mov	r2, sp
   2871e:	10c9      	asrs	r1, r1, #3
   28720:	4638      	mov	r0, r7
   28722:	f000 fe2e 	bl	29382 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   28726:	aa18      	add	r2, sp, #96	; 0x60
   28728:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2872c:	4630      	mov	r0, r6
   2872e:	f000 fe28 	bl	29382 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   28732:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   28736:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2873a:	ab18      	add	r3, sp, #96	; 0x60
   2873c:	1870      	adds	r0, r6, r1
   2873e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   28742:	f000 fe1e 	bl	29382 <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);
   28746:	4668      	mov	r0, sp
   28748:	2120      	movs	r1, #32
   2874a:	f7ff ffb5 	bl	286b8 <_set_secure.constprop.0>

      			return 1;
   2874e:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   28750:	b028      	add	sp, #160	; 0xa0
   28752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   28756:	3d01      	subs	r5, #1
   28758:	d1bd      	bne.n	286d6 <uECC_make_key+0x12>
        		return 0;
   2875a:	2000      	movs	r0, #0
   2875c:	e7f8      	b.n	28750 <uECC_make_key+0x8c>

0002875e <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   2875e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28762:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   28764:	f993 6001 	ldrsb.w	r6, [r3, #1]
	wordcount_t num_words = curve->num_words;
   28768:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   2876c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   28770:	b0a4      	sub	sp, #144	; 0x90
   28772:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   28774:	1dda      	adds	r2, r3, #7
   28776:	bf48      	it	mi
   28778:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   2877c:	ad04      	add	r5, sp, #16
{
   2877e:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   28780:	af0c      	add	r7, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   28782:	4628      	mov	r0, r5
   28784:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   28786:	9502      	str	r5, [sp, #8]
   28788:	9703      	str	r7, [sp, #12]
	uECC_vli_bytesToNative(_private,
   2878a:	f000 fe0e 	bl	293aa <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   2878e:	4632      	mov	r2, r6
   28790:	4649      	mov	r1, r9
   28792:	a814      	add	r0, sp, #80	; 0x50
   28794:	f000 fe09 	bl	293aa <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   28798:	ab14      	add	r3, sp, #80	; 0x50
   2879a:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   2879e:	4632      	mov	r2, r6
   287a0:	eb09 0106 	add.w	r1, r9, r6
   287a4:	f000 fe01 	bl	293aa <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   287a8:	4623      	mov	r3, r4
   287aa:	463a      	mov	r2, r7
   287ac:	4629      	mov	r1, r5
   287ae:	4628      	mov	r0, r5
   287b0:	f000 fd92 	bl	292d8 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   287b4:	fab0 f080 	clz	r0, r0
   287b8:	9401      	str	r4, [sp, #4]
   287ba:	ab24      	add	r3, sp, #144	; 0x90
   287bc:	0940      	lsrs	r0, r0, #5
   287be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   287c2:	8863      	ldrh	r3, [r4, #2]
   287c4:	3301      	adds	r3, #1
   287c6:	b21b      	sxth	r3, r3
   287c8:	9300      	str	r3, [sp, #0]
   287ca:	a914      	add	r1, sp, #80	; 0x50
   287cc:	2300      	movs	r3, #0
   287ce:	f850 2c88 	ldr.w	r2, [r0, #-136]
   287d2:	4608      	mov	r0, r1
   287d4:	f000 fcb1 	bl	2913a <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   287d8:	aa14      	add	r2, sp, #80	; 0x50
   287da:	4631      	mov	r1, r6
   287dc:	4640      	mov	r0, r8
   287de:	f000 fdd0 	bl	29382 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   287e2:	4621      	mov	r1, r4
   287e4:	a814      	add	r0, sp, #80	; 0x50
   287e6:	f000 fc1f 	bl	29028 <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	_set_secure(p2, 0, sizeof(p2));
   287ea:	2108      	movs	r1, #8
	r = !EccPoint_isZero(_public, curve);
   287ec:	4604      	mov	r4, r0
	_set_secure(p2, 0, sizeof(p2));
   287ee:	eb0d 0001 	add.w	r0, sp, r1
   287f2:	f7ff ff61 	bl	286b8 <_set_secure.constprop.0>
	_set_secure(tmp, 0, sizeof(tmp));
   287f6:	4638      	mov	r0, r7
   287f8:	2120      	movs	r1, #32
   287fa:	f7ff ff5d 	bl	286b8 <_set_secure.constprop.0>
	_set_secure(_private, 0, sizeof(_private));
   287fe:	4628      	mov	r0, r5
   28800:	2120      	movs	r1, #32
   28802:	f7ff ff59 	bl	286b8 <_set_secure.constprop.0>

	return r;
}
   28806:	fab4 f084 	clz	r0, r4
   2880a:	0940      	lsrs	r0, r0, #5
   2880c:	b024      	add	sp, #144	; 0x90
   2880e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028812 <uECC_vli_add>:
{
   28812:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   28814:	2400      	movs	r4, #0
{
   28816:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   28818:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2881a:	b265      	sxtb	r5, r4
   2881c:	42ab      	cmp	r3, r5
   2881e:	dc00      	bgt.n	28822 <uECC_vli_add+0x10>
}
   28820:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   28822:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   28826:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   2882a:	4435      	add	r5, r6
   2882c:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   2882e:	42ae      	cmp	r6, r5
		uECC_word_t val = (sum < left[i]);
   28830:	bf8c      	ite	hi
   28832:	2601      	movhi	r6, #1
   28834:	2600      	movls	r6, #0
		result[i] = sum;
   28836:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2883a:	bf18      	it	ne
   2883c:	4630      	movne	r0, r6
		result[i] = sum;
   2883e:	3401      	adds	r4, #1
   28840:	e7eb      	b.n	2881a <uECC_vli_add+0x8>

00028842 <uECC_vli_rshift1>:
	vli += num_words;
   28842:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   28846:	2300      	movs	r3, #0
	while (vli-- > end) {
   28848:	4288      	cmp	r0, r1
   2884a:	d300      	bcc.n	2884e <uECC_vli_rshift1+0xc>
}
   2884c:	4770      	bx	lr
		uECC_word_t temp = *vli;
   2884e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   28852:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   28856:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   28858:	07d3      	lsls	r3, r2, #31
   2885a:	e7f5      	b.n	28848 <uECC_vli_rshift1+0x6>

0002885c <vli_modInv_update>:
	if (!EVEN(uv)) {
   2885c:	6803      	ldr	r3, [r0, #0]
{
   2885e:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   28860:	f013 0601 	ands.w	r6, r3, #1
{
   28864:	4605      	mov	r5, r0
   28866:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   28868:	d005      	beq.n	28876 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   2886a:	4613      	mov	r3, r2
   2886c:	460a      	mov	r2, r1
   2886e:	4601      	mov	r1, r0
   28870:	f7ff ffcf 	bl	28812 <uECC_vli_add>
   28874:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   28876:	4621      	mov	r1, r4
   28878:	4628      	mov	r0, r5
   2887a:	f7ff ffe2 	bl	28842 <uECC_vli_rshift1>
	if (carry) {
   2887e:	b146      	cbz	r6, 28892 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   28880:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   28884:	3a01      	subs	r2, #1
   28886:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   2888a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2888e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   28892:	bd70      	pop	{r4, r5, r6, pc}

00028894 <uECC_vli_mult>:
{
   28894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   28898:	2500      	movs	r5, #0
{
   2889a:	b087      	sub	sp, #28
   2889c:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   288a0:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   288a2:	462a      	mov	r2, r5
   288a4:	fa4f f885 	sxtb.w	r8, r5
	for (k = 0; k < num_words; ++k) {
   288a8:	4543      	cmp	r3, r8
   288aa:	dc16      	bgt.n	288da <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   288ac:	f04f 35ff 	mov.w	r5, #4294967295
   288b0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   288b4:	9502      	str	r5, [sp, #8]
   288b6:	f04f 0a00 	mov.w	sl, #0
   288ba:	fa5f f58a 	uxtb.w	r5, sl
   288be:	eb05 0c03 	add.w	ip, r5, r3
   288c2:	9e02      	ldr	r6, [sp, #8]
   288c4:	fa4f fc8c 	sxtb.w	ip, ip
   288c8:	45b4      	cmp	ip, r6
   288ca:	db2d      	blt.n	28928 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   288cc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   288d0:	f840 2c04 	str.w	r2, [r0, #-4]
}
   288d4:	b007      	add	sp, #28
   288d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   288da:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   288dc:	f04f 0c00 	mov.w	ip, #0
   288e0:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   288e4:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   288e6:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   288ea:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   288ec:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   288f0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   288f4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   288f8:	fba7 ab06 	umull	sl, fp, r7, r6
   288fc:	eb1a 0601 	adds.w	r6, sl, r1
   28900:	f10c 0c01 	add.w	ip, ip, #1
   28904:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   28908:	fa4f fa8c 	sxtb.w	sl, ip
   2890c:	bf2c      	ite	cs
   2890e:	2201      	movcs	r2, #1
   28910:	2200      	movcc	r2, #0
   28912:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   28914:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   28916:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   28918:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   2891a:	dde4      	ble.n	288e6 <uECC_vli_mult+0x52>
		result[k] = r0;
   2891c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   28920:	463a      	mov	r2, r7
   28922:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   28924:	4674      	mov	r4, lr
   28926:	e7bd      	b.n	288a4 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   28928:	3501      	adds	r5, #1
   2892a:	b26d      	sxtb	r5, r5
   2892c:	9e01      	ldr	r6, [sp, #4]
   2892e:	9900      	ldr	r1, [sp, #0]
   28930:	ebac 0e05 	sub.w	lr, ip, r5
   28934:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   28938:	eb01 0b85 	add.w	fp, r1, r5, lsl #2
   2893c:	4626      	mov	r6, r4
   2893e:	2400      	movs	r4, #0
   28940:	429d      	cmp	r5, r3
   28942:	db05      	blt.n	28950 <uECC_vli_mult+0xbc>
		result[k] = r0;
   28944:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
		r2 = 0;
   28948:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   2894c:	4632      	mov	r2, r6
   2894e:	e7b4      	b.n	288ba <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   28950:	e9cd 2604 	strd	r2, r6, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   28954:	f85e 7904 	ldr.w	r7, [lr], #-4
   28958:	f85b 8b04 	ldr.w	r8, [fp], #4
	r01 += p;
   2895c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   28960:	fba8 8907 	umull	r8, r9, r8, r7
   28964:	eb18 0601 	adds.w	r6, r8, r1
   28968:	eb59 0702 	adcs.w	r7, r9, r2
   2896c:	bf2c      	ite	cs
   2896e:	2201      	movcs	r2, #1
   28970:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   28972:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   28974:	4414      	add	r4, r2
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   28976:	b26d      	sxtb	r5, r5
	*r0 = (uECC_word_t)r01;
   28978:	4632      	mov	r2, r6
	*r1 = r01 >> uECC_WORD_BITS;
   2897a:	463e      	mov	r6, r7
   2897c:	e7e0      	b.n	28940 <uECC_vli_mult+0xac>

0002897e <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   2897e:	2300      	movs	r3, #0
{
   28980:	b510      	push	{r4, lr}
		 vli[i] = 0;
   28982:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   28984:	b25a      	sxtb	r2, r3
   28986:	4291      	cmp	r1, r2
   28988:	dc00      	bgt.n	2898c <uECC_vli_clear+0xe>
}
   2898a:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   2898c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   28990:	3301      	adds	r3, #1
   28992:	e7f7      	b.n	28984 <uECC_vli_clear+0x6>

00028994 <uECC_vli_isZero>:
{
   28994:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   28996:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   28998:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   2899a:	b25c      	sxtb	r4, r3
   2899c:	42a1      	cmp	r1, r4
   2899e:	dc03      	bgt.n	289a8 <uECC_vli_isZero+0x14>
}
   289a0:	fab2 f082 	clz	r0, r2
   289a4:	0940      	lsrs	r0, r0, #5
   289a6:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   289a8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   289ac:	3301      	adds	r3, #1
   289ae:	4322      	orrs	r2, r4
   289b0:	e7f3      	b.n	2899a <uECC_vli_isZero+0x6>

000289b2 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   289b2:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   289b4:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   289b6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   289ba:	f001 011f 	and.w	r1, r1, #31
   289be:	fa03 f101 	lsl.w	r1, r3, r1
}
   289c2:	4008      	ands	r0, r1
   289c4:	4770      	bx	lr

000289c6 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   289c6:	3901      	subs	r1, #1
   289c8:	b249      	sxtb	r1, r1
   289ca:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   289ce:	2900      	cmp	r1, #0
   289d0:	da04      	bge.n	289dc <uECC_vli_numBits+0x16>
	return (i + 1);
   289d2:	3101      	adds	r1, #1
   289d4:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
   289d6:	b941      	cbnz	r1, 289ea <uECC_vli_numBits+0x24>
		return 0;
   289d8:	4608      	mov	r0, r1
}
   289da:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   289dc:	f853 2904 	ldr.w	r2, [r3], #-4
   289e0:	2a00      	cmp	r2, #0
   289e2:	d1f6      	bne.n	289d2 <uECC_vli_numBits+0xc>
   289e4:	3901      	subs	r1, #1
   289e6:	b249      	sxtb	r1, r1
   289e8:	e7f1      	b.n	289ce <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
   289ea:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   289ee:	3b01      	subs	r3, #1
   289f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
   289f4:	2000      	movs	r0, #0
   289f6:	b923      	cbnz	r3, 28a02 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   289f8:	3901      	subs	r1, #1
   289fa:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   289fe:	b208      	sxth	r0, r1
   28a00:	4770      	bx	lr
		digit >>= 1;
   28a02:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   28a04:	3001      	adds	r0, #1
   28a06:	e7f6      	b.n	289f6 <uECC_vli_numBits+0x30>

00028a08 <uECC_vli_set>:
{
   28a08:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   28a0a:	2300      	movs	r3, #0
   28a0c:	b25c      	sxtb	r4, r3
   28a0e:	42a2      	cmp	r2, r4
   28a10:	dc00      	bgt.n	28a14 <uECC_vli_set+0xc>
}
   28a12:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   28a14:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   28a18:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   28a1c:	3301      	adds	r3, #1
   28a1e:	e7f5      	b.n	28a0c <uECC_vli_set+0x4>

00028a20 <uECC_vli_cmp_unsafe>:
{
   28a20:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   28a22:	3a01      	subs	r2, #1
   28a24:	b252      	sxtb	r2, r2
   28a26:	0093      	lsls	r3, r2, #2
   28a28:	2a00      	cmp	r2, #0
   28a2a:	da01      	bge.n	28a30 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   28a2c:	2000      	movs	r0, #0
}
   28a2e:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   28a30:	58c5      	ldr	r5, [r0, r3]
   28a32:	58cc      	ldr	r4, [r1, r3]
   28a34:	42a5      	cmp	r5, r4
   28a36:	d805      	bhi.n	28a44 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   28a38:	f1a3 0304 	sub.w	r3, r3, #4
   28a3c:	d304      	bcc.n	28a48 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   28a3e:	3a01      	subs	r2, #1
   28a40:	b252      	sxtb	r2, r2
   28a42:	e7f1      	b.n	28a28 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   28a44:	2001      	movs	r0, #1
   28a46:	e7f2      	b.n	28a2e <uECC_vli_cmp_unsafe+0xe>
			return -1;
   28a48:	f04f 30ff 	mov.w	r0, #4294967295
   28a4c:	e7ef      	b.n	28a2e <uECC_vli_cmp_unsafe+0xe>

00028a4e <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   28a4e:	3a01      	subs	r2, #1
   28a50:	b252      	sxtb	r2, r2
{
   28a52:	b570      	push	{r4, r5, r6, lr}
   28a54:	0093      	lsls	r3, r2, #2
	uECC_word_t diff = 0;
   28a56:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   28a58:	2a00      	cmp	r2, #0
   28a5a:	da03      	bge.n	28a64 <uECC_vli_equal+0x16>
}
   28a5c:	1c20      	adds	r0, r4, #0
   28a5e:	bf18      	it	ne
   28a60:	2001      	movne	r0, #1
   28a62:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   28a64:	58c5      	ldr	r5, [r0, r3]
   28a66:	58ce      	ldr	r6, [r1, r3]
	for (i = num_words - 1; i >= 0; --i) {
   28a68:	3a01      	subs	r2, #1
		diff |= (left[i] ^ right[i]);
   28a6a:	4075      	eors	r5, r6
   28a6c:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   28a6e:	b252      	sxtb	r2, r2
   28a70:	3b04      	subs	r3, #4
   28a72:	e7f1      	b.n	28a58 <uECC_vli_equal+0xa>

00028a74 <uECC_vli_sub>:
{
   28a74:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   28a76:	2400      	movs	r4, #0
{
   28a78:	4607      	mov	r7, r0
   28a7a:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   28a7c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   28a7e:	b265      	sxtb	r5, r4
   28a80:	45ac      	cmp	ip, r5
   28a82:	dc00      	bgt.n	28a86 <uECC_vli_sub+0x12>
}
   28a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   28a86:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   28a8a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   28a8e:	1a35      	subs	r5, r6, r0
   28a90:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   28a92:	42ae      	cmp	r6, r5
		uECC_word_t val = (diff > left[i]);
   28a94:	bf34      	ite	cc
   28a96:	2601      	movcc	r6, #1
   28a98:	2600      	movcs	r6, #0
		result[i] = diff;
   28a9a:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   28a9e:	bf18      	it	ne
   28aa0:	4630      	movne	r0, r6
		result[i] = diff;
   28aa2:	3401      	adds	r4, #1
   28aa4:	e7eb      	b.n	28a7e <uECC_vli_sub+0xa>

00028aa6 <uECC_vli_modAdd>:
{
   28aa6:	b570      	push	{r4, r5, r6, lr}
   28aa8:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   28aac:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   28aae:	4623      	mov	r3, r4
{
   28ab0:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   28ab2:	f7ff feae 	bl	28812 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   28ab6:	b930      	cbnz	r0, 28ac6 <uECC_vli_modAdd+0x20>
   28ab8:	4622      	mov	r2, r4
   28aba:	4629      	mov	r1, r5
   28abc:	4630      	mov	r0, r6
   28abe:	f7ff ffaf 	bl	28a20 <uECC_vli_cmp_unsafe>
   28ac2:	2801      	cmp	r0, #1
   28ac4:	d007      	beq.n	28ad6 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   28ac6:	4623      	mov	r3, r4
   28ac8:	4632      	mov	r2, r6
   28aca:	4629      	mov	r1, r5
   28acc:	4628      	mov	r0, r5
}
   28ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   28ad2:	f7ff bfcf 	b.w	28a74 <uECC_vli_sub>
}
   28ad6:	bd70      	pop	{r4, r5, r6, pc}

00028ad8 <uECC_vli_modSub>:
{
   28ad8:	b570      	push	{r4, r5, r6, lr}
   28ada:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   28ade:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   28ae0:	4623      	mov	r3, r4
{
   28ae2:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   28ae4:	f7ff ffc6 	bl	28a74 <uECC_vli_sub>
	if (l_borrow) {
   28ae8:	b138      	cbz	r0, 28afa <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   28aea:	4623      	mov	r3, r4
   28aec:	4632      	mov	r2, r6
   28aee:	4629      	mov	r1, r5
   28af0:	4628      	mov	r0, r5
}
   28af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   28af6:	f7ff be8c 	b.w	28812 <uECC_vli_add>
}
   28afa:	bd70      	pop	{r4, r5, r6, pc}

00028afc <uECC_vli_mmod>:
{
   28afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b00:	b0a5      	sub	sp, #148	; 0x94
   28b02:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   28b04:	ab14      	add	r3, sp, #80	; 0x50
   28b06:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   28b0a:	4681      	mov	r9, r0
			   uECC_vli_numBits(mod, num_words);
   28b0c:	4629      	mov	r1, r5
   28b0e:	4610      	mov	r0, r2
{
   28b10:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   28b12:	f7ff ff58 	bl	289c6 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   28b16:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   28b1a:	b204      	sxth	r4, r0
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   28b1c:	2c00      	cmp	r4, #0
   28b1e:	4626      	mov	r6, r4
   28b20:	bfb8      	it	lt
   28b22:	f104 061f 	addlt.w	r6, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   28b26:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   28b28:	f346 1647 	sbfx	r6, r6, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   28b2c:	f003 031f 	and.w	r3, r3, #31
   28b30:	f004 081f 	and.w	r8, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   28b34:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   28b36:	bf58      	it	pl
   28b38:	f1c3 0800 	rsbpl	r8, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
   28b3c:	4631      	mov	r1, r6
   28b3e:	f7ff ff1e 	bl	2897e <uECC_vli_clear>
	if (bit_shift > 0) {
   28b42:	f1b8 0f00 	cmp.w	r8, #0
   28b46:	b230      	sxth	r0, r6
   28b48:	dd2d      	ble.n	28ba6 <uECC_vli_mmod+0xaa>
   28b4a:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   28b4c:	2200      	movs	r2, #0
   28b4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   28b52:	f1c8 0c20 	rsb	ip, r8, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   28b56:	4613      	mov	r3, r2
   28b58:	429d      	cmp	r5, r3
   28b5a:	d819      	bhi.n	28b90 <uECC_vli_mmod+0x94>
		for (i = 0; i < num_words * 2; ++i) {
   28b5c:	b22f      	sxth	r7, r5
   28b5e:	007b      	lsls	r3, r7, #1
   28b60:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   28b62:	ab04      	add	r3, sp, #16
   28b64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28b68:	f105 38ff 	add.w	r8, r5, #4294967295
   28b6c:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   28b6e:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28b70:	eb03 0888 	add.w	r8, r3, r8, lsl #2
	for (index = 1; shift >= 0; --shift) {
   28b74:	2c00      	cmp	r4, #0
   28b76:	da54      	bge.n	28c22 <uECC_vli_mmod+0x126>
	uECC_vli_set(result, v[index], num_words);
   28b78:	ab24      	add	r3, sp, #144	; 0x90
   28b7a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   28b7e:	462a      	mov	r2, r5
   28b80:	f856 1c88 	ldr.w	r1, [r6, #-136]
   28b84:	4648      	mov	r0, r9
   28b86:	f7ff ff3f 	bl	28a08 <uECC_vli_set>
}
   28b8a:	b025      	add	sp, #148	; 0x94
   28b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   28b90:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
   28b94:	fa06 f108 	lsl.w	r1, r6, r8
   28b98:	430a      	orrs	r2, r1
   28b9a:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   28b9e:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   28ba0:	fa26 f20c 	lsr.w	r2, r6, ip
   28ba4:	e7d8      	b.n	28b58 <uECC_vli_mmod+0x5c>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   28ba6:	ab04      	add	r3, sp, #16
   28ba8:	462a      	mov	r2, r5
   28baa:	4639      	mov	r1, r7
   28bac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   28bb0:	f7ff ff2a 	bl	28a08 <uECC_vli_set>
   28bb4:	e7d2      	b.n	28b5c <uECC_vli_mmod+0x60>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   28bb6:	fa0f fe82 	sxth.w	lr, r2
   28bba:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   28bbe:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   28bc2:	ab24      	add	r3, sp, #144	; 0x90
   28bc4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   28bc8:	3001      	adds	r0, #1
   28bca:	f852 3c80 	ldr.w	r3, [r2, #-128]
   28bce:	440b      	add	r3, r1
   28bd0:	ebbb 0303 	subs.w	r3, fp, r3
   28bd4:	bf34      	ite	cc
   28bd6:	2201      	movcc	r2, #1
   28bd8:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   28bda:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   28bdc:	bf18      	it	ne
   28bde:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   28be0:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   28be4:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   28be8:	9b01      	ldr	r3, [sp, #4]
   28bea:	b242      	sxtb	r2, r0
   28bec:	429a      	cmp	r2, r3
   28bee:	dbe2      	blt.n	28bb6 <uECC_vli_mmod+0xba>
		index = !(index ^ borrow);
   28bf0:	1a73      	subs	r3, r6, r1
   28bf2:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   28bf4:	4629      	mov	r1, r5
   28bf6:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   28bf8:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   28bfa:	f7ff fe22 	bl	28842 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28bfe:	ab24      	add	r3, sp, #144	; 0x90
   28c00:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   28c04:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28c06:	f853 2c80 	ldr.w	r2, [r3, #-128]
   28c0a:	f858 3c80 	ldr.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   28c0e:	4638      	mov	r0, r7
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28c10:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   28c14:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28c16:	f848 3c80 	str.w	r3, [r8, #-128]
	for (index = 1; shift >= 0; --shift) {
   28c1a:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   28c1c:	f7ff fe11 	bl	28842 <uECC_vli_rshift1>
   28c20:	e7a8      	b.n	28b74 <uECC_vli_mmod+0x78>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   28c22:	ab24      	add	r3, sp, #144	; 0x90
   28c24:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   28c26:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   28c2a:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   28c2c:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   28c30:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   28c34:	e7d8      	b.n	28be8 <uECC_vli_mmod+0xec>

00028c36 <uECC_vli_modMult_fast>:
{
   28c36:	b530      	push	{r4, r5, lr}
   28c38:	461c      	mov	r4, r3
   28c3a:	b091      	sub	sp, #68	; 0x44
   28c3c:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   28c3e:	f993 3000 	ldrsb.w	r3, [r3]
   28c42:	4668      	mov	r0, sp
   28c44:	f7ff fe26 	bl	28894 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   28c48:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   28c4c:	4669      	mov	r1, sp
   28c4e:	4628      	mov	r0, r5
   28c50:	4798      	blx	r3
}
   28c52:	b011      	add	sp, #68	; 0x44
   28c54:	bd30      	pop	{r4, r5, pc}

00028c56 <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
   28c56:	4613      	mov	r3, r2
   28c58:	460a      	mov	r2, r1
   28c5a:	f7ff bfec 	b.w	28c36 <uECC_vli_modMult_fast>

00028c5e <double_jacobian_default>:
{
   28c5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   28c62:	f993 6000 	ldrsb.w	r6, [r3]
{
   28c66:	b092      	sub	sp, #72	; 0x48
   28c68:	4604      	mov	r4, r0
   28c6a:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   28c6c:	4610      	mov	r0, r2
   28c6e:	4631      	mov	r1, r6
{
   28c70:	4615      	mov	r5, r2
   28c72:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   28c74:	f7ff fe8e 	bl	28994 <uECC_vli_isZero>
   28c78:	2800      	cmp	r0, #0
   28c7a:	f040 8091 	bne.w	28da0 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   28c7e:	4642      	mov	r2, r8
   28c80:	4649      	mov	r1, r9
   28c82:	a802      	add	r0, sp, #8
   28c84:	f7ff ffe7 	bl	28c56 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   28c88:	4643      	mov	r3, r8
   28c8a:	aa02      	add	r2, sp, #8
   28c8c:	4621      	mov	r1, r4
   28c8e:	a80a      	add	r0, sp, #40	; 0x28
   28c90:	f7ff ffd1 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   28c94:	a902      	add	r1, sp, #8
   28c96:	4608      	mov	r0, r1
   28c98:	4642      	mov	r2, r8
   28c9a:	f7ff ffdc 	bl	28c56 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   28c9e:	4643      	mov	r3, r8
   28ca0:	462a      	mov	r2, r5
   28ca2:	4649      	mov	r1, r9
   28ca4:	4648      	mov	r0, r9
   28ca6:	f7ff ffc6 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   28caa:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   28cae:	4642      	mov	r2, r8
   28cb0:	4629      	mov	r1, r5
   28cb2:	4628      	mov	r0, r5
   28cb4:	f7ff ffcf 	bl	28c56 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   28cb8:	463b      	mov	r3, r7
   28cba:	462a      	mov	r2, r5
   28cbc:	4621      	mov	r1, r4
   28cbe:	4620      	mov	r0, r4
   28cc0:	9600      	str	r6, [sp, #0]
   28cc2:	f7ff fef0 	bl	28aa6 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   28cc6:	463b      	mov	r3, r7
   28cc8:	462a      	mov	r2, r5
   28cca:	4629      	mov	r1, r5
   28ccc:	4628      	mov	r0, r5
   28cce:	9600      	str	r6, [sp, #0]
   28cd0:	f7ff fee9 	bl	28aa6 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   28cd4:	463b      	mov	r3, r7
   28cd6:	462a      	mov	r2, r5
   28cd8:	4621      	mov	r1, r4
   28cda:	4628      	mov	r0, r5
   28cdc:	9600      	str	r6, [sp, #0]
   28cde:	f7ff fefb 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   28ce2:	4643      	mov	r3, r8
   28ce4:	462a      	mov	r2, r5
   28ce6:	4621      	mov	r1, r4
   28ce8:	4620      	mov	r0, r4
   28cea:	f7ff ffa4 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   28cee:	463b      	mov	r3, r7
   28cf0:	4622      	mov	r2, r4
   28cf2:	4621      	mov	r1, r4
   28cf4:	4628      	mov	r0, r5
   28cf6:	9600      	str	r6, [sp, #0]
   28cf8:	f7ff fed5 	bl	28aa6 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   28cfc:	463b      	mov	r3, r7
   28cfe:	9600      	str	r6, [sp, #0]
   28d00:	462a      	mov	r2, r5
   28d02:	4621      	mov	r1, r4
   28d04:	4620      	mov	r0, r4
   28d06:	f7ff fece 	bl	28aa6 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   28d0a:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   28d0c:	07db      	lsls	r3, r3, #31
   28d0e:	d54a      	bpl.n	28da6 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   28d10:	4633      	mov	r3, r6
   28d12:	463a      	mov	r2, r7
   28d14:	4621      	mov	r1, r4
   28d16:	4620      	mov	r0, r4
   28d18:	f7ff fd7b 	bl	28812 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   28d1c:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   28d1e:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   28d20:	4620      	mov	r0, r4
   28d22:	f7ff fd8e 	bl	28842 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   28d26:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   28d2a:	3b01      	subs	r3, #1
   28d2c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   28d30:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   28d34:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   28d38:	4642      	mov	r2, r8
   28d3a:	4621      	mov	r1, r4
   28d3c:	4628      	mov	r0, r5
   28d3e:	f7ff ff8a 	bl	28c56 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   28d42:	463b      	mov	r3, r7
   28d44:	aa0a      	add	r2, sp, #40	; 0x28
   28d46:	4629      	mov	r1, r5
   28d48:	4628      	mov	r0, r5
   28d4a:	9600      	str	r6, [sp, #0]
   28d4c:	f7ff fec4 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   28d50:	463b      	mov	r3, r7
   28d52:	aa0a      	add	r2, sp, #40	; 0x28
   28d54:	4629      	mov	r1, r5
   28d56:	4628      	mov	r0, r5
   28d58:	9600      	str	r6, [sp, #0]
   28d5a:	f7ff febd 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   28d5e:	a90a      	add	r1, sp, #40	; 0x28
   28d60:	4608      	mov	r0, r1
   28d62:	463b      	mov	r3, r7
   28d64:	462a      	mov	r2, r5
   28d66:	9600      	str	r6, [sp, #0]
   28d68:	f7ff feb6 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   28d6c:	4643      	mov	r3, r8
   28d6e:	aa0a      	add	r2, sp, #40	; 0x28
   28d70:	4621      	mov	r1, r4
   28d72:	4620      	mov	r0, r4
   28d74:	f7ff ff5f 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   28d78:	aa02      	add	r2, sp, #8
   28d7a:	463b      	mov	r3, r7
   28d7c:	4610      	mov	r0, r2
   28d7e:	4621      	mov	r1, r4
   28d80:	9600      	str	r6, [sp, #0]
   28d82:	f7ff fea9 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   28d86:	4632      	mov	r2, r6
   28d88:	4629      	mov	r1, r5
   28d8a:	4620      	mov	r0, r4
   28d8c:	f7ff fe3c 	bl	28a08 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   28d90:	4649      	mov	r1, r9
   28d92:	4628      	mov	r0, r5
   28d94:	f7ff fe38 	bl	28a08 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   28d98:	a902      	add	r1, sp, #8
   28d9a:	4648      	mov	r0, r9
   28d9c:	f7ff fe34 	bl	28a08 <uECC_vli_set>
}
   28da0:	b012      	add	sp, #72	; 0x48
   28da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   28da6:	4631      	mov	r1, r6
   28da8:	4620      	mov	r0, r4
   28daa:	f7ff fd4a 	bl	28842 <uECC_vli_rshift1>
   28dae:	e7c3      	b.n	28d38 <double_jacobian_default+0xda>

00028db0 <x_side_default>:
{
   28db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28db4:	4615      	mov	r5, r2
   28db6:	b08a      	sub	sp, #40	; 0x28
   28db8:	4604      	mov	r4, r0
   28dba:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   28dbc:	221c      	movs	r2, #28
   28dbe:	2100      	movs	r1, #0
   28dc0:	a803      	add	r0, sp, #12
   28dc2:	f005 faad 	bl	2e320 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   28dc6:	1d2e      	adds	r6, r5, #4
	wordcount_t num_words = curve->num_words;
   28dc8:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   28dcc:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   28dce:	462a      	mov	r2, r5
   28dd0:	4641      	mov	r1, r8
   28dd2:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   28dd4:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   28dd6:	f7ff ff3e 	bl	28c56 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   28dda:	4633      	mov	r3, r6
   28ddc:	aa02      	add	r2, sp, #8
   28dde:	4621      	mov	r1, r4
   28de0:	4620      	mov	r0, r4
   28de2:	9700      	str	r7, [sp, #0]
   28de4:	f7ff fe78 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   28de8:	462b      	mov	r3, r5
   28dea:	4642      	mov	r2, r8
   28dec:	4621      	mov	r1, r4
   28dee:	4620      	mov	r0, r4
   28df0:	f7ff ff21 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   28df4:	9700      	str	r7, [sp, #0]
   28df6:	4633      	mov	r3, r6
   28df8:	f105 0284 	add.w	r2, r5, #132	; 0x84
   28dfc:	4621      	mov	r1, r4
   28dfe:	4620      	mov	r0, r4
   28e00:	f7ff fe51 	bl	28aa6 <uECC_vli_modAdd>
}
   28e04:	b00a      	add	sp, #40	; 0x28
   28e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028e0a <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   28e0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28e0e:	b09b      	sub	sp, #108	; 0x6c
   28e10:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   28e12:	9c22      	ldr	r4, [sp, #136]	; 0x88
   28e14:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   28e18:	9500      	str	r5, [sp, #0]
{
   28e1a:	4698      	mov	r8, r3
   28e1c:	4607      	mov	r7, r0
   28e1e:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   28e20:	4623      	mov	r3, r4
   28e22:	4602      	mov	r2, r0
   28e24:	4631      	mov	r1, r6
   28e26:	a802      	add	r0, sp, #8
   28e28:	f7ff fe56 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   28e2c:	a902      	add	r1, sp, #8
   28e2e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   28e30:	4608      	mov	r0, r1
   28e32:	f7ff ff10 	bl	28c56 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   28e36:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28e38:	aa02      	add	r2, sp, #8
   28e3a:	4639      	mov	r1, r7
   28e3c:	4638      	mov	r0, r7
   28e3e:	f7ff fefa 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   28e42:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28e44:	aa02      	add	r2, sp, #8
   28e46:	4631      	mov	r1, r6
   28e48:	4630      	mov	r0, r6
   28e4a:	f7ff fef4 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   28e4e:	4623      	mov	r3, r4
   28e50:	464a      	mov	r2, r9
   28e52:	4641      	mov	r1, r8
   28e54:	a802      	add	r0, sp, #8
   28e56:	9500      	str	r5, [sp, #0]
   28e58:	f7ff fe25 	bl	28aa6 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   28e5c:	4623      	mov	r3, r4
   28e5e:	464a      	mov	r2, r9
   28e60:	4641      	mov	r1, r8
   28e62:	4640      	mov	r0, r8
   28e64:	9500      	str	r5, [sp, #0]
   28e66:	f7ff fe37 	bl	28ad8 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   28e6a:	4623      	mov	r3, r4
   28e6c:	463a      	mov	r2, r7
   28e6e:	4631      	mov	r1, r6
   28e70:	a80a      	add	r0, sp, #40	; 0x28
   28e72:	9500      	str	r5, [sp, #0]
   28e74:	f7ff fe30 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   28e78:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28e7a:	aa0a      	add	r2, sp, #40	; 0x28
   28e7c:	4649      	mov	r1, r9
   28e7e:	4648      	mov	r0, r9
   28e80:	f7ff fed9 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   28e84:	4623      	mov	r3, r4
   28e86:	4632      	mov	r2, r6
   28e88:	4639      	mov	r1, r7
   28e8a:	a80a      	add	r0, sp, #40	; 0x28
   28e8c:	9500      	str	r5, [sp, #0]
   28e8e:	f7ff fe0a 	bl	28aa6 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   28e92:	9a22      	ldr	r2, [sp, #136]	; 0x88
   28e94:	4641      	mov	r1, r8
   28e96:	4630      	mov	r0, r6
   28e98:	f7ff fedd 	bl	28c56 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   28e9c:	4623      	mov	r3, r4
   28e9e:	aa0a      	add	r2, sp, #40	; 0x28
   28ea0:	4631      	mov	r1, r6
   28ea2:	4630      	mov	r0, r6
   28ea4:	9500      	str	r5, [sp, #0]
   28ea6:	f7ff fe17 	bl	28ad8 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   28eaa:	4623      	mov	r3, r4
   28eac:	4632      	mov	r2, r6
   28eae:	4639      	mov	r1, r7
   28eb0:	a812      	add	r0, sp, #72	; 0x48
   28eb2:	9500      	str	r5, [sp, #0]
   28eb4:	f7ff fe10 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   28eb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28eba:	aa12      	add	r2, sp, #72	; 0x48
   28ebc:	4641      	mov	r1, r8
   28ebe:	4640      	mov	r0, r8
   28ec0:	f7ff feb9 	bl	28c36 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   28ec4:	4623      	mov	r3, r4
   28ec6:	464a      	mov	r2, r9
   28ec8:	4641      	mov	r1, r8
   28eca:	4640      	mov	r0, r8
   28ecc:	9500      	str	r5, [sp, #0]
   28ece:	f7ff fe03 	bl	28ad8 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   28ed2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   28ed4:	a902      	add	r1, sp, #8
   28ed6:	a812      	add	r0, sp, #72	; 0x48
   28ed8:	f7ff febd 	bl	28c56 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   28edc:	a912      	add	r1, sp, #72	; 0x48
   28ede:	4623      	mov	r3, r4
   28ee0:	aa0a      	add	r2, sp, #40	; 0x28
   28ee2:	4608      	mov	r0, r1
   28ee4:	9500      	str	r5, [sp, #0]
   28ee6:	f7ff fdf7 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   28eea:	4623      	mov	r3, r4
   28eec:	463a      	mov	r2, r7
   28eee:	a912      	add	r1, sp, #72	; 0x48
   28ef0:	a80a      	add	r0, sp, #40	; 0x28
   28ef2:	9500      	str	r5, [sp, #0]
   28ef4:	f7ff fdf0 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   28ef8:	a90a      	add	r1, sp, #40	; 0x28
   28efa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28efc:	aa02      	add	r2, sp, #8
   28efe:	4608      	mov	r0, r1
   28f00:	f7ff fe99 	bl	28c36 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   28f04:	4623      	mov	r3, r4
   28f06:	464a      	mov	r2, r9
   28f08:	a90a      	add	r1, sp, #40	; 0x28
   28f0a:	4648      	mov	r0, r9
   28f0c:	9500      	str	r5, [sp, #0]
   28f0e:	f7ff fde3 	bl	28ad8 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   28f12:	462a      	mov	r2, r5
   28f14:	a912      	add	r1, sp, #72	; 0x48
   28f16:	4638      	mov	r0, r7
   28f18:	f7ff fd76 	bl	28a08 <uECC_vli_set>
}
   28f1c:	b01b      	add	sp, #108	; 0x6c
   28f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00028f22 <uECC_vli_modInv>:
{
   28f22:	b5f0      	push	{r4, r5, r6, r7, lr}
   28f24:	460f      	mov	r7, r1
   28f26:	b0a1      	sub	sp, #132	; 0x84
   28f28:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   28f2a:	4619      	mov	r1, r3
   28f2c:	4638      	mov	r0, r7
{
   28f2e:	4615      	mov	r5, r2
   28f30:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   28f32:	f7ff fd2f 	bl	28994 <uECC_vli_isZero>
   28f36:	b120      	cbz	r0, 28f42 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   28f38:	4630      	mov	r0, r6
   28f3a:	f7ff fd20 	bl	2897e <uECC_vli_clear>
}
   28f3e:	b021      	add	sp, #132	; 0x84
   28f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   28f42:	4622      	mov	r2, r4
   28f44:	4639      	mov	r1, r7
   28f46:	4668      	mov	r0, sp
   28f48:	f7ff fd5e 	bl	28a08 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   28f4c:	4629      	mov	r1, r5
   28f4e:	a808      	add	r0, sp, #32
   28f50:	f7ff fd5a 	bl	28a08 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   28f54:	a810      	add	r0, sp, #64	; 0x40
   28f56:	4621      	mov	r1, r4
   28f58:	f7ff fd11 	bl	2897e <uECC_vli_clear>
	u[0] = 1;
   28f5c:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   28f5e:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   28f60:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   28f62:	f7ff fd0c 	bl	2897e <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   28f66:	4622      	mov	r2, r4
   28f68:	a908      	add	r1, sp, #32
   28f6a:	4668      	mov	r0, sp
   28f6c:	f7ff fd58 	bl	28a20 <uECC_vli_cmp_unsafe>
   28f70:	b928      	cbnz	r0, 28f7e <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   28f72:	4622      	mov	r2, r4
   28f74:	a910      	add	r1, sp, #64	; 0x40
   28f76:	4630      	mov	r0, r6
   28f78:	f7ff fd46 	bl	28a08 <uECC_vli_set>
   28f7c:	e7df      	b.n	28f3e <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   28f7e:	9b00      	ldr	r3, [sp, #0]
   28f80:	07da      	lsls	r2, r3, #31
   28f82:	d409      	bmi.n	28f98 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   28f84:	4621      	mov	r1, r4
   28f86:	4668      	mov	r0, sp
   28f88:	f7ff fc5b 	bl	28842 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   28f8c:	4622      	mov	r2, r4
   28f8e:	4629      	mov	r1, r5
   28f90:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   28f92:	f7ff fc63 	bl	2885c <vli_modInv_update>
   28f96:	e7e6      	b.n	28f66 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   28f98:	9b08      	ldr	r3, [sp, #32]
   28f9a:	07db      	lsls	r3, r3, #31
   28f9c:	d407      	bmi.n	28fae <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   28f9e:	4621      	mov	r1, r4
   28fa0:	a808      	add	r0, sp, #32
   28fa2:	f7ff fc4e 	bl	28842 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   28fa6:	4622      	mov	r2, r4
   28fa8:	4629      	mov	r1, r5
   28faa:	a818      	add	r0, sp, #96	; 0x60
   28fac:	e7f1      	b.n	28f92 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   28fae:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   28fb0:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   28fb2:	dd1c      	ble.n	28fee <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   28fb4:	aa08      	add	r2, sp, #32
   28fb6:	4669      	mov	r1, sp
   28fb8:	4668      	mov	r0, sp
   28fba:	f7ff fd5b 	bl	28a74 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   28fbe:	4621      	mov	r1, r4
   28fc0:	4668      	mov	r0, sp
   28fc2:	f7ff fc3e 	bl	28842 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   28fc6:	4622      	mov	r2, r4
   28fc8:	a918      	add	r1, sp, #96	; 0x60
   28fca:	a810      	add	r0, sp, #64	; 0x40
   28fcc:	f7ff fd28 	bl	28a20 <uECC_vli_cmp_unsafe>
   28fd0:	2800      	cmp	r0, #0
   28fd2:	da05      	bge.n	28fe0 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   28fd4:	a910      	add	r1, sp, #64	; 0x40
   28fd6:	4623      	mov	r3, r4
   28fd8:	462a      	mov	r2, r5
   28fda:	4608      	mov	r0, r1
   28fdc:	f7ff fc19 	bl	28812 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   28fe0:	a910      	add	r1, sp, #64	; 0x40
   28fe2:	4623      	mov	r3, r4
   28fe4:	aa18      	add	r2, sp, #96	; 0x60
   28fe6:	4608      	mov	r0, r1
   28fe8:	f7ff fd44 	bl	28a74 <uECC_vli_sub>
   28fec:	e7ce      	b.n	28f8c <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   28fee:	a908      	add	r1, sp, #32
   28ff0:	466a      	mov	r2, sp
   28ff2:	4608      	mov	r0, r1
   28ff4:	f7ff fd3e 	bl	28a74 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   28ff8:	4621      	mov	r1, r4
   28ffa:	a808      	add	r0, sp, #32
   28ffc:	f7ff fc21 	bl	28842 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   29000:	4622      	mov	r2, r4
   29002:	a910      	add	r1, sp, #64	; 0x40
   29004:	a818      	add	r0, sp, #96	; 0x60
   29006:	f7ff fd0b 	bl	28a20 <uECC_vli_cmp_unsafe>
   2900a:	2800      	cmp	r0, #0
   2900c:	da05      	bge.n	2901a <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   2900e:	a918      	add	r1, sp, #96	; 0x60
   29010:	4623      	mov	r3, r4
   29012:	462a      	mov	r2, r5
   29014:	4608      	mov	r0, r1
   29016:	f7ff fbfc 	bl	28812 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   2901a:	a918      	add	r1, sp, #96	; 0x60
   2901c:	4623      	mov	r3, r4
   2901e:	aa10      	add	r2, sp, #64	; 0x40
   29020:	4608      	mov	r0, r1
   29022:	f7ff fd27 	bl	28a74 <uECC_vli_sub>
   29026:	e7be      	b.n	28fa6 <uECC_vli_modInv+0x84>

00029028 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   29028:	7809      	ldrb	r1, [r1, #0]
   2902a:	0049      	lsls	r1, r1, #1
   2902c:	b249      	sxtb	r1, r1
   2902e:	f7ff bcb1 	b.w	28994 <uECC_vli_isZero>

00029032 <apply_z>:
{
   29032:	b5f0      	push	{r4, r5, r6, r7, lr}
   29034:	4615      	mov	r5, r2
   29036:	b089      	sub	sp, #36	; 0x24
   29038:	461c      	mov	r4, r3
   2903a:	4607      	mov	r7, r0
   2903c:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2903e:	461a      	mov	r2, r3
   29040:	4629      	mov	r1, r5
   29042:	4668      	mov	r0, sp
   29044:	f7ff fe07 	bl	28c56 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   29048:	4623      	mov	r3, r4
   2904a:	466a      	mov	r2, sp
   2904c:	4639      	mov	r1, r7
   2904e:	4638      	mov	r0, r7
   29050:	f7ff fdf1 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   29054:	4623      	mov	r3, r4
   29056:	462a      	mov	r2, r5
   29058:	4669      	mov	r1, sp
   2905a:	4668      	mov	r0, sp
   2905c:	f7ff fdeb 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   29060:	4623      	mov	r3, r4
   29062:	466a      	mov	r2, sp
   29064:	4631      	mov	r1, r6
   29066:	4630      	mov	r0, r6
   29068:	f7ff fde5 	bl	28c36 <uECC_vli_modMult_fast>
}
   2906c:	b009      	add	sp, #36	; 0x24
   2906e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029070 <XYcZ_add>:
{
   29070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29074:	b08b      	sub	sp, #44	; 0x2c
   29076:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
   29078:	9d12      	ldr	r5, [sp, #72]	; 0x48
   2907a:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2907e:	9600      	str	r6, [sp, #0]
{
   29080:	461f      	mov	r7, r3
   29082:	4680      	mov	r8, r0
   29084:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   29086:	462b      	mov	r3, r5
   29088:	4602      	mov	r2, r0
   2908a:	4621      	mov	r1, r4
   2908c:	a802      	add	r0, sp, #8
   2908e:	f7ff fd23 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   29092:	a902      	add	r1, sp, #8
   29094:	9a12      	ldr	r2, [sp, #72]	; 0x48
   29096:	4608      	mov	r0, r1
   29098:	f7ff fddd 	bl	28c56 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2909c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2909e:	aa02      	add	r2, sp, #8
   290a0:	4641      	mov	r1, r8
   290a2:	4640      	mov	r0, r8
   290a4:	f7ff fdc7 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   290a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   290aa:	aa02      	add	r2, sp, #8
   290ac:	4621      	mov	r1, r4
   290ae:	4620      	mov	r0, r4
   290b0:	f7ff fdc1 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   290b4:	462b      	mov	r3, r5
   290b6:	464a      	mov	r2, r9
   290b8:	4639      	mov	r1, r7
   290ba:	4638      	mov	r0, r7
   290bc:	9600      	str	r6, [sp, #0]
   290be:	f7ff fd0b 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   290c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   290c4:	4639      	mov	r1, r7
   290c6:	a802      	add	r0, sp, #8
   290c8:	f7ff fdc5 	bl	28c56 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   290cc:	a902      	add	r1, sp, #8
   290ce:	462b      	mov	r3, r5
   290d0:	4642      	mov	r2, r8
   290d2:	4608      	mov	r0, r1
   290d4:	9600      	str	r6, [sp, #0]
   290d6:	f7ff fcff 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   290da:	a902      	add	r1, sp, #8
   290dc:	462b      	mov	r3, r5
   290de:	4622      	mov	r2, r4
   290e0:	4608      	mov	r0, r1
   290e2:	9600      	str	r6, [sp, #0]
   290e4:	f7ff fcf8 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   290e8:	462b      	mov	r3, r5
   290ea:	4642      	mov	r2, r8
   290ec:	4621      	mov	r1, r4
   290ee:	4620      	mov	r0, r4
   290f0:	9600      	str	r6, [sp, #0]
   290f2:	f7ff fcf1 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   290f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   290f8:	4622      	mov	r2, r4
   290fa:	4649      	mov	r1, r9
   290fc:	4648      	mov	r0, r9
   290fe:	f7ff fd9a 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   29102:	462b      	mov	r3, r5
   29104:	aa02      	add	r2, sp, #8
   29106:	4641      	mov	r1, r8
   29108:	4620      	mov	r0, r4
   2910a:	9600      	str	r6, [sp, #0]
   2910c:	f7ff fce4 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   29110:	9b12      	ldr	r3, [sp, #72]	; 0x48
   29112:	4622      	mov	r2, r4
   29114:	4639      	mov	r1, r7
   29116:	4638      	mov	r0, r7
   29118:	f7ff fd8d 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2911c:	462b      	mov	r3, r5
   2911e:	464a      	mov	r2, r9
   29120:	4639      	mov	r1, r7
   29122:	4638      	mov	r0, r7
   29124:	9600      	str	r6, [sp, #0]
   29126:	f7ff fcd7 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2912a:	4632      	mov	r2, r6
   2912c:	a902      	add	r1, sp, #8
   2912e:	4620      	mov	r0, r4
   29130:	f7ff fc6a 	bl	28a08 <uECC_vli_set>
}
   29134:	b00b      	add	sp, #44	; 0x2c
   29136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002913a <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2913a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2913e:	b0b1      	sub	sp, #196	; 0xc4
   29140:	e9cd 0104 	strd	r0, r1, [sp, #16]
   29144:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   29146:	9206      	str	r2, [sp, #24]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   29148:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   2914c:	a818      	add	r0, sp, #96	; 0x60
   2914e:	463a      	mov	r2, r7
{
   29150:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   29152:	f7ff fc59 	bl	28a08 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   29156:	00bb      	lsls	r3, r7, #2
   29158:	9307      	str	r3, [sp, #28]
   2915a:	9b05      	ldr	r3, [sp, #20]
   2915c:	00ba      	lsls	r2, r7, #2
   2915e:	4413      	add	r3, r2
   29160:	4619      	mov	r1, r3
   29162:	463a      	mov	r2, r7
   29164:	a828      	add	r0, sp, #160	; 0xa0
   29166:	9302      	str	r3, [sp, #8]
   29168:	f7ff fc4e 	bl	28a08 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   2916c:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   29170:	2e00      	cmp	r6, #0
   29172:	f000 8087 	beq.w	29284 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   29176:	462a      	mov	r2, r5
   29178:	4631      	mov	r1, r6
   2917a:	a808      	add	r0, sp, #32
   2917c:	f7ff fc44 	bl	28a08 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   29180:	ae10      	add	r6, sp, #64	; 0x40
   29182:	462a      	mov	r2, r5
   29184:	a918      	add	r1, sp, #96	; 0x60
   29186:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
   29188:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   2918c:	f7ff fc3c 	bl	28a08 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   29190:	a928      	add	r1, sp, #160	; 0xa0
   29192:	4648      	mov	r0, r9
   29194:	f7ff fc38 	bl	28a08 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   29198:	4623      	mov	r3, r4
   2919a:	aa08      	add	r2, sp, #32
   2919c:	a928      	add	r1, sp, #160	; 0xa0
   2919e:	a818      	add	r0, sp, #96	; 0x60
   291a0:	f7ff ff47 	bl	29032 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   291a4:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   291a8:	4623      	mov	r3, r4
   291aa:	aa08      	add	r2, sp, #32
   291ac:	a928      	add	r1, sp, #160	; 0xa0
   291ae:	a818      	add	r0, sp, #96	; 0x60
   291b0:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   291b2:	4623      	mov	r3, r4
   291b4:	aa08      	add	r2, sp, #32
   291b6:	4649      	mov	r1, r9
   291b8:	4630      	mov	r0, r6
   291ba:	f7ff ff3a 	bl	29032 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   291be:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   291c2:	3d02      	subs	r5, #2
   291c4:	b22d      	sxth	r5, r5
   291c6:	2d00      	cmp	r5, #0
   291c8:	dc63      	bgt.n	29292 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   291ca:	9b06      	ldr	r3, [sp, #24]
   291cc:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   291ce:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   291d0:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   291d4:	ab10      	add	r3, sp, #64	; 0x40
   291d6:	0176      	lsls	r6, r6, #5
   291d8:	43ed      	mvns	r5, r5
   291da:	eb03 0806 	add.w	r8, r3, r6
   291de:	f005 0501 	and.w	r5, r5, #1
   291e2:	ab20      	add	r3, sp, #128	; 0x80
   291e4:	441e      	add	r6, r3
   291e6:	016d      	lsls	r5, r5, #5
   291e8:	ab10      	add	r3, sp, #64	; 0x40
   291ea:	eb03 0905 	add.w	r9, r3, r5
   291ee:	ab20      	add	r3, sp, #128	; 0x80
   291f0:	441d      	add	r5, r3

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   291f2:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   291f6:	462b      	mov	r3, r5
   291f8:	464a      	mov	r2, r9
   291fa:	4631      	mov	r1, r6
   291fc:	4640      	mov	r0, r8
   291fe:	f7ff fe04 	bl	28e0a <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   29202:	4653      	mov	r3, sl
   29204:	aa10      	add	r2, sp, #64	; 0x40
   29206:	a918      	add	r1, sp, #96	; 0x60
   29208:	a808      	add	r0, sp, #32
   2920a:	9700      	str	r7, [sp, #0]
   2920c:	f7ff fc64 	bl	28ad8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   29210:	a908      	add	r1, sp, #32
   29212:	4623      	mov	r3, r4
   29214:	4632      	mov	r2, r6
   29216:	4608      	mov	r0, r1
   29218:	f7ff fd0d 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2921c:	a908      	add	r1, sp, #32
   2921e:	4623      	mov	r3, r4
   29220:	9a05      	ldr	r2, [sp, #20]
   29222:	4608      	mov	r0, r1
   29224:	f7ff fd07 	bl	28c36 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   29228:	a908      	add	r1, sp, #32
   2922a:	463b      	mov	r3, r7
   2922c:	4652      	mov	r2, sl
   2922e:	4608      	mov	r0, r1
   29230:	f7ff fe77 	bl	28f22 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   29234:	a908      	add	r1, sp, #32
   29236:	4623      	mov	r3, r4
   29238:	9a02      	ldr	r2, [sp, #8]
   2923a:	4608      	mov	r0, r1
   2923c:	f7ff fcfb 	bl	28c36 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   29240:	a908      	add	r1, sp, #32
   29242:	4623      	mov	r3, r4
   29244:	4642      	mov	r2, r8
   29246:	4608      	mov	r0, r1
   29248:	f7ff fcf5 	bl	28c36 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2924c:	9400      	str	r4, [sp, #0]
   2924e:	4633      	mov	r3, r6
   29250:	4642      	mov	r2, r8
   29252:	4629      	mov	r1, r5
   29254:	4648      	mov	r0, r9
   29256:	f7ff ff0b 	bl	29070 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2925a:	4623      	mov	r3, r4
   2925c:	aa08      	add	r2, sp, #32
   2925e:	a920      	add	r1, sp, #128	; 0x80
   29260:	a810      	add	r0, sp, #64	; 0x40
   29262:	f7ff fee6 	bl	29032 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   29266:	463a      	mov	r2, r7
   29268:	a910      	add	r1, sp, #64	; 0x40
   2926a:	9804      	ldr	r0, [sp, #16]
   2926c:	f7ff fbcc 	bl	28a08 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   29270:	9b04      	ldr	r3, [sp, #16]
   29272:	9c07      	ldr	r4, [sp, #28]
   29274:	4423      	add	r3, r4
   29276:	a920      	add	r1, sp, #128	; 0x80
   29278:	4618      	mov	r0, r3
   2927a:	f7ff fbc5 	bl	28a08 <uECC_vli_set>
}
   2927e:	b031      	add	sp, #196	; 0xc4
   29280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   29284:	4629      	mov	r1, r5
   29286:	a808      	add	r0, sp, #32
   29288:	f7ff fb79 	bl	2897e <uECC_vli_clear>
		z[0] = 1;
   2928c:	2301      	movs	r3, #1
   2928e:	9308      	str	r3, [sp, #32]
   29290:	e776      	b.n	29180 <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
   29292:	4629      	mov	r1, r5
   29294:	9806      	ldr	r0, [sp, #24]
   29296:	f7ff fb8c 	bl	289b2 <uECC_vli_testBit>
   2929a:	fab0 f080 	clz	r0, r0
   2929e:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   292a0:	f1c0 0801 	rsb	r8, r0, #1
   292a4:	ea4f 1848 	mov.w	r8, r8, lsl #5
   292a8:	0140      	lsls	r0, r0, #5
   292aa:	eb06 0b08 	add.w	fp, r6, r8
   292ae:	eb06 0a00 	add.w	sl, r6, r0
   292b2:	44c8      	add	r8, r9
   292b4:	eb09 0300 	add.w	r3, r9, r0
   292b8:	4652      	mov	r2, sl
   292ba:	4641      	mov	r1, r8
   292bc:	4658      	mov	r0, fp
   292be:	9400      	str	r4, [sp, #0]
   292c0:	9303      	str	r3, [sp, #12]
   292c2:	f7ff fda2 	bl	28e0a <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   292c6:	9400      	str	r4, [sp, #0]
   292c8:	4643      	mov	r3, r8
   292ca:	465a      	mov	r2, fp
   292cc:	9903      	ldr	r1, [sp, #12]
   292ce:	4650      	mov	r0, sl
   292d0:	f7ff fece 	bl	29070 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   292d4:	3d01      	subs	r5, #1
   292d6:	e775      	b.n	291c4 <EccPoint_mult+0x8a>

000292d8 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   292d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   292dc:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
   292e0:	f114 051f 	adds.w	r5, r4, #31
   292e4:	bf48      	it	mi
   292e6:	f104 053e 	addmi.w	r5, r4, #62	; 0x3e
{
   292ea:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   292ec:	f103 0624 	add.w	r6, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   292f0:	f345 1547 	sbfx	r5, r5, #5, #8
{
   292f4:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   292f6:	4601      	mov	r1, r0
   292f8:	462b      	mov	r3, r5
   292fa:	4632      	mov	r2, r6
   292fc:	4638      	mov	r0, r7
   292fe:	f7ff fa88 	bl	28812 <uECC_vli_add>
   29302:	b990      	cbnz	r0, 2932a <regularize_k+0x52>
   29304:	ebb4 1f45 	cmp.w	r4, r5, lsl #5
   29308:	da11      	bge.n	2932e <regularize_k+0x56>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2930a:	4621      	mov	r1, r4
   2930c:	4638      	mov	r0, r7
   2930e:	f7ff fb50 	bl	289b2 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   29312:	1c04      	adds	r4, r0, #0
   29314:	bf18      	it	ne
   29316:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   29318:	462b      	mov	r3, r5
   2931a:	4632      	mov	r2, r6
   2931c:	4639      	mov	r1, r7
   2931e:	4640      	mov	r0, r8
   29320:	f7ff fa77 	bl	28812 <uECC_vli_add>

	return carry;
}
   29324:	4620      	mov	r0, r4
   29326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2932a:	2401      	movs	r4, #1
   2932c:	e7f4      	b.n	29318 <regularize_k+0x40>
   2932e:	4604      	mov	r4, r0
   29330:	e7f2      	b.n	29318 <regularize_k+0x40>

00029332 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   29332:	b530      	push	{r4, r5, lr}
   29334:	4614      	mov	r4, r2
   29336:	b095      	sub	sp, #84	; 0x54
   29338:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2933a:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2933c:	4623      	mov	r3, r4
{
   2933e:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   29340:	a904      	add	r1, sp, #16
   29342:	9102      	str	r1, [sp, #8]
   29344:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   29346:	f7ff ffc7 	bl	292d8 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   2934a:	fab0 f080 	clz	r0, r0
   2934e:	ab14      	add	r3, sp, #80	; 0x50
   29350:	0940      	lsrs	r0, r0, #5
   29352:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   29356:	8863      	ldrh	r3, [r4, #2]
   29358:	9401      	str	r4, [sp, #4]
   2935a:	3301      	adds	r3, #1
   2935c:	b21b      	sxth	r3, r3
   2935e:	9300      	str	r3, [sp, #0]
   29360:	f850 2c48 	ldr.w	r2, [r0, #-72]
   29364:	2300      	movs	r3, #0
   29366:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2936a:	4628      	mov	r0, r5
   2936c:	f7ff fee5 	bl	2913a <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   29370:	4621      	mov	r1, r4
   29372:	4628      	mov	r0, r5
   29374:	f7ff fe58 	bl	29028 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   29378:	fab0 f080 	clz	r0, r0
   2937c:	0940      	lsrs	r0, r0, #5
   2937e:	b015      	add	sp, #84	; 0x54
   29380:	bd30      	pop	{r4, r5, pc}

00029382 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   29382:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   29384:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   29386:	1e4f      	subs	r7, r1, #1
   29388:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   2938a:	428c      	cmp	r4, r1
   2938c:	f105 0501 	add.w	r5, r5, #1
   29390:	db00      	blt.n	29394 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   29392:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   29394:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   29396:	f023 0603 	bic.w	r6, r3, #3
   2939a:	f003 0303 	and.w	r3, r3, #3
   2939e:	5996      	ldr	r6, [r2, r6]
   293a0:	00db      	lsls	r3, r3, #3
   293a2:	fa26 f303 	lsr.w	r3, r6, r3
   293a6:	5503      	strb	r3, [r0, r4]
   293a8:	e7ee      	b.n	29388 <uECC_vli_nativeToBytes+0x6>

000293aa <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   293aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   293ac:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   293ae:	1cd1      	adds	r1, r2, #3
   293b0:	bf48      	it	mi
   293b2:	1d91      	addmi	r1, r2, #6
{
   293b4:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   293b6:	f341 0187 	sbfx	r1, r1, #2, #8
{
   293ba:	4605      	mov	r5, r0
	for (i = 0; i < num_bytes; ++i) {
		unsigned b = num_bytes - 1 - i;
   293bc:	1e67      	subs	r7, r4, #1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   293be:	f7ff fade 	bl	2897e <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   293c2:	2100      	movs	r1, #0
   293c4:	b24a      	sxtb	r2, r1
   293c6:	42a2      	cmp	r2, r4
   293c8:	f101 0101 	add.w	r1, r1, #1
   293cc:	db00      	blt.n	293d0 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   293ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   293d0:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   293d2:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   293d6:	5cb2      	ldrb	r2, [r6, r2]
   293d8:	f003 0303 	and.w	r3, r3, #3
   293dc:	00db      	lsls	r3, r3, #3
   293de:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   293e2:	582a      	ldr	r2, [r5, r0]
   293e4:	431a      	orrs	r2, r3
   293e6:	502a      	str	r2, [r5, r0]
   293e8:	e7ec      	b.n	293c4 <uECC_vli_bytesToNative+0x1a>

000293ea <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   293ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   293ee:	b090      	sub	sp, #64	; 0x40
   293f0:	4606      	mov	r6, r0
   293f2:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   293f4:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   293f8:	f7ff fe16 	bl	29028 <EccPoint_isZero>
   293fc:	bb40      	cbnz	r0, 29450 <uECC_valid_point+0x66>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   293fe:	f104 0804 	add.w	r8, r4, #4
   29402:	462a      	mov	r2, r5
   29404:	4631      	mov	r1, r6
   29406:	4640      	mov	r0, r8
   29408:	f7ff fb0a 	bl	28a20 <uECC_vli_cmp_unsafe>
   2940c:	2801      	cmp	r0, #1
   2940e:	d122      	bne.n	29456 <uECC_valid_point+0x6c>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   29410:	eb06 0785 	add.w	r7, r6, r5, lsl #2
   29414:	462a      	mov	r2, r5
   29416:	4639      	mov	r1, r7
   29418:	4640      	mov	r0, r8
   2941a:	f7ff fb01 	bl	28a20 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2941e:	2801      	cmp	r0, #1
   29420:	d119      	bne.n	29456 <uECC_valid_point+0x6c>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   29422:	4622      	mov	r2, r4
   29424:	4668      	mov	r0, sp
   29426:	f7ff fc16 	bl	28c56 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   2942a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2942e:	4622      	mov	r2, r4
   29430:	4631      	mov	r1, r6
   29432:	a808      	add	r0, sp, #32
   29434:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   29436:	462a      	mov	r2, r5
   29438:	a908      	add	r1, sp, #32
   2943a:	4668      	mov	r0, sp
   2943c:	f7ff fb07 	bl	28a4e <uECC_vli_equal>
   29440:	2800      	cmp	r0, #0
		return -3;
   29442:	bf0c      	ite	eq
   29444:	2000      	moveq	r0, #0
   29446:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   2944a:	b010      	add	sp, #64	; 0x40
   2944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   29450:	f04f 30ff 	mov.w	r0, #4294967295
   29454:	e7f9      	b.n	2944a <uECC_valid_point+0x60>
		return -2;
   29456:	f06f 0001 	mvn.w	r0, #1
   2945a:	e7f6      	b.n	2944a <uECC_valid_point+0x60>

0002945c <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   2945c:	b570      	push	{r4, r5, r6, lr}
   2945e:	460c      	mov	r4, r1
   29460:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   29462:	4625      	mov	r5, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   29464:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   29468:	4606      	mov	r6, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2946a:	4601      	mov	r1, r0
   2946c:	4668      	mov	r0, sp
   2946e:	f7ff ff9c 	bl	293aa <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   29472:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   29476:	f915 0b44 	ldrsb.w	r0, [r5], #68
	uECC_vli_bytesToNative(
   2947a:	18b1      	adds	r1, r6, r2
   2947c:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   29480:	f7ff ff93 	bl	293aa <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   29484:	2210      	movs	r2, #16
   29486:	4629      	mov	r1, r5
   29488:	4668      	mov	r0, sp
   2948a:	f7ff fac9 	bl	28a20 <uECC_vli_cmp_unsafe>
   2948e:	b128      	cbz	r0, 2949c <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   29490:	4621      	mov	r1, r4
   29492:	4668      	mov	r0, sp
   29494:	f7ff ffa9 	bl	293ea <uECC_valid_point>
}
   29498:	b010      	add	sp, #64	; 0x40
   2949a:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   2949c:	f06f 0003 	mvn.w	r0, #3
   294a0:	e7fa      	b.n	29498 <uECC_valid_public_key+0x3c>

000294a2 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   294a2:	78cb      	ldrb	r3, [r1, #3]
   294a4:	7802      	ldrb	r2, [r0, #0]
   294a6:	4053      	eors	r3, r2
   294a8:	7003      	strb	r3, [r0, #0]
   294aa:	884b      	ldrh	r3, [r1, #2]
   294ac:	7842      	ldrb	r2, [r0, #1]
   294ae:	4053      	eors	r3, r2
   294b0:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   294b2:	680a      	ldr	r2, [r1, #0]
   294b4:	7883      	ldrb	r3, [r0, #2]
   294b6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   294ba:	7083      	strb	r3, [r0, #2]
   294bc:	680a      	ldr	r2, [r1, #0]
   294be:	78c3      	ldrb	r3, [r0, #3]
   294c0:	4053      	eors	r3, r2
   294c2:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   294c4:	79cb      	ldrb	r3, [r1, #7]
   294c6:	7902      	ldrb	r2, [r0, #4]
   294c8:	4053      	eors	r3, r2
   294ca:	7103      	strb	r3, [r0, #4]
   294cc:	88cb      	ldrh	r3, [r1, #6]
   294ce:	7942      	ldrb	r2, [r0, #5]
   294d0:	4053      	eors	r3, r2
   294d2:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   294d4:	684a      	ldr	r2, [r1, #4]
   294d6:	7983      	ldrb	r3, [r0, #6]
   294d8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   294dc:	7183      	strb	r3, [r0, #6]
   294de:	684a      	ldr	r2, [r1, #4]
   294e0:	79c3      	ldrb	r3, [r0, #7]
   294e2:	4053      	eors	r3, r2
   294e4:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   294e6:	7acb      	ldrb	r3, [r1, #11]
   294e8:	7a02      	ldrb	r2, [r0, #8]
   294ea:	4053      	eors	r3, r2
   294ec:	7203      	strb	r3, [r0, #8]
   294ee:	7a42      	ldrb	r2, [r0, #9]
   294f0:	894b      	ldrh	r3, [r1, #10]
   294f2:	4053      	eors	r3, r2
   294f4:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   294f6:	688a      	ldr	r2, [r1, #8]
   294f8:	7a83      	ldrb	r3, [r0, #10]
   294fa:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   294fe:	7283      	strb	r3, [r0, #10]
   29500:	688a      	ldr	r2, [r1, #8]
   29502:	7ac3      	ldrb	r3, [r0, #11]
   29504:	4053      	eors	r3, r2
   29506:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   29508:	7bcb      	ldrb	r3, [r1, #15]
   2950a:	7b02      	ldrb	r2, [r0, #12]
   2950c:	4053      	eors	r3, r2
   2950e:	7303      	strb	r3, [r0, #12]
   29510:	89cb      	ldrh	r3, [r1, #14]
   29512:	7b42      	ldrb	r2, [r0, #13]
   29514:	4053      	eors	r3, r2
   29516:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   29518:	68ca      	ldr	r2, [r1, #12]
   2951a:	7b83      	ldrb	r3, [r0, #14]
   2951c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   29520:	7383      	strb	r3, [r0, #14]
   29522:	68ca      	ldr	r2, [r1, #12]
   29524:	7bc3      	ldrb	r3, [r0, #15]
   29526:	4053      	eors	r3, r2
   29528:	73c3      	strb	r3, [r0, #15]
}
   2952a:	4770      	bx	lr

0002952c <shift_rows>:
{
   2952c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2952e:	7802      	ldrb	r2, [r0, #0]
   29530:	f88d 2000 	strb.w	r2, [sp]
   29534:	7942      	ldrb	r2, [r0, #5]
   29536:	f88d 2001 	strb.w	r2, [sp, #1]
   2953a:	7a82      	ldrb	r2, [r0, #10]
   2953c:	f88d 2002 	strb.w	r2, [sp, #2]
   29540:	7bc2      	ldrb	r2, [r0, #15]
   29542:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   29546:	7902      	ldrb	r2, [r0, #4]
   29548:	f88d 2004 	strb.w	r2, [sp, #4]
   2954c:	7a42      	ldrb	r2, [r0, #9]
   2954e:	f88d 2005 	strb.w	r2, [sp, #5]
   29552:	7b82      	ldrb	r2, [r0, #14]
   29554:	f88d 2006 	strb.w	r2, [sp, #6]
   29558:	78c2      	ldrb	r2, [r0, #3]
   2955a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2955e:	7a02      	ldrb	r2, [r0, #8]
   29560:	f88d 2008 	strb.w	r2, [sp, #8]
   29564:	7b42      	ldrb	r2, [r0, #13]
   29566:	f88d 2009 	strb.w	r2, [sp, #9]
   2956a:	7882      	ldrb	r2, [r0, #2]
   2956c:	f88d 200a 	strb.w	r2, [sp, #10]
   29570:	79c2      	ldrb	r2, [r0, #7]
   29572:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   29576:	7b02      	ldrb	r2, [r0, #12]
   29578:	f88d 200c 	strb.w	r2, [sp, #12]
   2957c:	7842      	ldrb	r2, [r0, #1]
   2957e:	f88d 200d 	strb.w	r2, [sp, #13]
   29582:	7ac3      	ldrb	r3, [r0, #11]
   29584:	7982      	ldrb	r2, [r0, #6]
   29586:	f88d 200e 	strb.w	r2, [sp, #14]
   2958a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2958e:	2310      	movs	r3, #16
   29590:	466a      	mov	r2, sp
   29592:	4619      	mov	r1, r3
   29594:	f7ff f878 	bl	28688 <_copy>
}
   29598:	b005      	add	sp, #20
   2959a:	f85d fb04 	ldr.w	pc, [sp], #4

0002959e <mult_row_column>:
{
   2959e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   295a0:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   295a2:	7808      	ldrb	r0, [r1, #0]
{
   295a4:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   295a6:	f7ff f87e 	bl	286a6 <_double_byte>
   295aa:	4605      	mov	r5, r0
   295ac:	7860      	ldrb	r0, [r4, #1]
   295ae:	f7ff f87a 	bl	286a6 <_double_byte>
   295b2:	78a2      	ldrb	r2, [r4, #2]
   295b4:	7863      	ldrb	r3, [r4, #1]
   295b6:	4053      	eors	r3, r2
   295b8:	78e2      	ldrb	r2, [r4, #3]
   295ba:	4053      	eors	r3, r2
   295bc:	405d      	eors	r5, r3
   295be:	4045      	eors	r5, r0
   295c0:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   295c2:	7860      	ldrb	r0, [r4, #1]
   295c4:	7827      	ldrb	r7, [r4, #0]
   295c6:	f7ff f86e 	bl	286a6 <_double_byte>
   295ca:	4605      	mov	r5, r0
   295cc:	78a0      	ldrb	r0, [r4, #2]
   295ce:	f7ff f86a 	bl	286a6 <_double_byte>
   295d2:	78a3      	ldrb	r3, [r4, #2]
   295d4:	405f      	eors	r7, r3
   295d6:	78e3      	ldrb	r3, [r4, #3]
   295d8:	405f      	eors	r7, r3
   295da:	407d      	eors	r5, r7
   295dc:	4045      	eors	r5, r0
   295de:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   295e0:	78a0      	ldrb	r0, [r4, #2]
   295e2:	7865      	ldrb	r5, [r4, #1]
   295e4:	7827      	ldrb	r7, [r4, #0]
   295e6:	f7ff f85e 	bl	286a6 <_double_byte>
   295ea:	406f      	eors	r7, r5
   295ec:	4605      	mov	r5, r0
   295ee:	78e0      	ldrb	r0, [r4, #3]
   295f0:	f7ff f859 	bl	286a6 <_double_byte>
   295f4:	78e3      	ldrb	r3, [r4, #3]
   295f6:	405f      	eors	r7, r3
   295f8:	407d      	eors	r5, r7
   295fa:	4045      	eors	r5, r0
   295fc:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   295fe:	7820      	ldrb	r0, [r4, #0]
   29600:	f7ff f851 	bl	286a6 <_double_byte>
   29604:	7863      	ldrb	r3, [r4, #1]
   29606:	7825      	ldrb	r5, [r4, #0]
   29608:	405d      	eors	r5, r3
   2960a:	78a3      	ldrb	r3, [r4, #2]
   2960c:	405d      	eors	r5, r3
   2960e:	4045      	eors	r5, r0
   29610:	78e0      	ldrb	r0, [r4, #3]
   29612:	f7ff f848 	bl	286a6 <_double_byte>
   29616:	b2ed      	uxtb	r5, r5
   29618:	4068      	eors	r0, r5
   2961a:	70f0      	strb	r0, [r6, #3]
}
   2961c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002961e <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2961e:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29620:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   29622:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29624:	f912 3b10 	ldrsb.w	r3, [r2], #16
   29628:	2b00      	cmp	r3, #0
   2962a:	bfb4      	ite	lt
   2962c:	2387      	movlt	r3, #135	; 0x87
   2962e:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   29630:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   29634:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   29638:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2963a:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2963e:	d002      	beq.n	29646 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   29640:	7813      	ldrb	r3, [r2, #0]
   29642:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   29644:	e7f4      	b.n	29630 <gf_double+0x12>
	}
}
   29646:	bd10      	pop	{r4, pc}

00029648 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   29648:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2964a:	b120      	cbz	r0, 29656 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2964c:	2258      	movs	r2, #88	; 0x58
   2964e:	2100      	movs	r1, #0
   29650:	f7ff f827 	bl	286a2 <_set>
   29654:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   29656:	bd08      	pop	{r3, pc}

00029658 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   29658:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2965a:	4604      	mov	r4, r0
   2965c:	b188      	cbz	r0, 29682 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2965e:	2210      	movs	r2, #16
   29660:	2100      	movs	r1, #0
   29662:	f7ff f81e 	bl	286a2 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   29666:	2210      	movs	r2, #16
   29668:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2966c:	2100      	movs	r1, #0
   2966e:	f7ff f818 	bl	286a2 <_set>
	s->leftover_offset = 0;
   29672:	2300      	movs	r3, #0
   29674:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   29676:	2200      	movs	r2, #0
   29678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2967c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   29680:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   29682:	bd10      	pop	{r4, pc}

00029684 <tc_cmac_setup>:
{
   29684:	b570      	push	{r4, r5, r6, lr}
   29686:	460d      	mov	r5, r1
   29688:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2968a:	4604      	mov	r4, r0
   2968c:	b310      	cbz	r0, 296d4 <tc_cmac_setup+0x50>
   2968e:	b311      	cbz	r1, 296d6 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   29690:	2258      	movs	r2, #88	; 0x58
   29692:	2100      	movs	r1, #0
   29694:	f7ff f805 	bl	286a2 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   29698:	4629      	mov	r1, r5
	s->sched = sched;
   2969a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2969c:	4630      	mov	r0, r6
   2969e:	f7de f8e5 	bl	786c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   296a2:	2210      	movs	r2, #16
   296a4:	2100      	movs	r1, #0
   296a6:	4620      	mov	r0, r4
   296a8:	f7fe fffb 	bl	286a2 <_set>
	gf_double (s->K1, s->iv);
   296ac:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   296b0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   296b2:	4621      	mov	r1, r4
   296b4:	4620      	mov	r0, r4
   296b6:	f7de f92f 	bl	7918 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   296ba:	4621      	mov	r1, r4
   296bc:	4628      	mov	r0, r5
   296be:	f7ff ffae 	bl	2961e <gf_double>
	gf_double (s->K2, s->K1);
   296c2:	4629      	mov	r1, r5
   296c4:	f104 0020 	add.w	r0, r4, #32
   296c8:	f7ff ffa9 	bl	2961e <gf_double>
	tc_cmac_init(s);
   296cc:	4620      	mov	r0, r4
   296ce:	f7ff ffc3 	bl	29658 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   296d2:	2001      	movs	r0, #1
}
   296d4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   296d6:	4608      	mov	r0, r1
   296d8:	e7fc      	b.n	296d4 <tc_cmac_setup+0x50>

000296da <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   296da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   296de:	460d      	mov	r5, r1
   296e0:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   296e2:	4604      	mov	r4, r0
   296e4:	2800      	cmp	r0, #0
   296e6:	d060      	beq.n	297aa <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   296e8:	b912      	cbnz	r2, 296f0 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   296ea:	2001      	movs	r0, #1
}
   296ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   296f0:	2900      	cmp	r1, #0
   296f2:	d05a      	beq.n	297aa <tc_cmac_update+0xd0>
	if (s->countdown == 0) {
   296f4:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   296f8:	ea50 0301 	orrs.w	r3, r0, r1
   296fc:	d055      	beq.n	297aa <tc_cmac_update+0xd0>
	s->countdown--;
   296fe:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   29702:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   29706:	f141 33ff 	adc.w	r3, r1, #4294967295
   2970a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2970e:	f1b8 0f00 	cmp.w	r8, #0
   29712:	d029      	beq.n	29768 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   29714:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   29718:	f108 0030 	add.w	r0, r8, #48	; 0x30
   2971c:	42be      	cmp	r6, r7
   2971e:	4420      	add	r0, r4
   29720:	d208      	bcs.n	29734 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   29722:	4633      	mov	r3, r6
   29724:	4631      	mov	r1, r6
   29726:	462a      	mov	r2, r5
   29728:	f7fe ffae 	bl	28688 <_copy>
			s->leftover_offset += data_length;
   2972c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2972e:	441e      	add	r6, r3
		s->leftover_offset = data_length;
   29730:	6466      	str	r6, [r4, #68]	; 0x44
   29732:	e7da      	b.n	296ea <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   29734:	463b      	mov	r3, r7
   29736:	462a      	mov	r2, r5
   29738:	4639      	mov	r1, r7
   2973a:	f7fe ffa5 	bl	28688 <_copy>
		data_length -= remaining_space;
   2973e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   29740:	2300      	movs	r3, #0
   29742:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   29744:	4446      	add	r6, r8
		data += remaining_space;
   29746:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29748:	1e63      	subs	r3, r4, #1
   2974a:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
   2974e:	785a      	ldrb	r2, [r3, #1]
   29750:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
   29754:	404a      	eors	r2, r1
   29756:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2975a:	4283      	cmp	r3, r0
   2975c:	d1f7      	bne.n	2974e <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2975e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29760:	4621      	mov	r1, r4
   29762:	4620      	mov	r0, r4
   29764:	f7de f8d8 	bl	7918 <tc_aes_encrypt>
   29768:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2976c:	2e10      	cmp	r6, #16
   2976e:	d809      	bhi.n	29784 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   29770:	2e00      	cmp	r6, #0
   29772:	d0ba      	beq.n	296ea <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   29774:	4633      	mov	r3, r6
   29776:	462a      	mov	r2, r5
   29778:	4631      	mov	r1, r6
   2977a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2977e:	f7fe ff83 	bl	28688 <_copy>
   29782:	e7d5      	b.n	29730 <tc_cmac_update+0x56>
   29784:	1e63      	subs	r3, r4, #1
   29786:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   29788:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2978c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29790:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   29792:	ea82 0200 	eor.w	r2, r2, r0
   29796:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29798:	d1f6      	bne.n	29788 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2979a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2979c:	4621      	mov	r1, r4
   2979e:	4620      	mov	r0, r4
   297a0:	f7de f8ba 	bl	7918 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   297a4:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   297a6:	3e10      	subs	r6, #16
   297a8:	e7e0      	b.n	2976c <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   297aa:	2000      	movs	r0, #0
   297ac:	e79e      	b.n	296ec <tc_cmac_update+0x12>

000297ae <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   297ae:	b570      	push	{r4, r5, r6, lr}
   297b0:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   297b2:	4605      	mov	r5, r0
   297b4:	b1e8      	cbz	r0, 297f2 <tc_cmac_final+0x44>
   297b6:	b369      	cbz	r1, 29814 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   297b8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   297ba:	2a10      	cmp	r2, #16
   297bc:	d11a      	bne.n	297f4 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   297be:	f101 0210 	add.w	r2, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   297c2:	1e61      	subs	r1, r4, #1
   297c4:	3a01      	subs	r2, #1
   297c6:	f104 060f 	add.w	r6, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   297ca:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
   297ce:	784b      	ldrb	r3, [r1, #1]
   297d0:	4043      	eors	r3, r0
   297d2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   297d6:	4043      	eors	r3, r0
   297d8:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   297dc:	428e      	cmp	r6, r1
   297de:	d1f4      	bne.n	297ca <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   297e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   297e2:	4621      	mov	r1, r4
   297e4:	4628      	mov	r0, r5
   297e6:	f7de f897 	bl	7918 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   297ea:	4620      	mov	r0, r4
   297ec:	f7ff ff2c 	bl	29648 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   297f0:	2001      	movs	r0, #1
}
   297f2:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   297f4:	f102 0030 	add.w	r0, r2, #48	; 0x30
   297f8:	2100      	movs	r1, #0
   297fa:	f1c2 0210 	rsb	r2, r2, #16
   297fe:	4420      	add	r0, r4
   29800:	f7fe ff4f 	bl	286a2 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   29804:	6c63      	ldr	r3, [r4, #68]	; 0x44
   29806:	4423      	add	r3, r4
   29808:	2280      	movs	r2, #128	; 0x80
   2980a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2980e:	f104 0220 	add.w	r2, r4, #32
   29812:	e7d6      	b.n	297c2 <tc_cmac_final+0x14>
		return TC_CRYPTO_FAIL;
   29814:	4608      	mov	r0, r1
   29816:	e7ec      	b.n	297f2 <tc_cmac_final+0x44>

00029818 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   29818:	2100      	movs	r1, #0
   2981a:	2001      	movs	r0, #1
   2981c:	f7de ba14 	b.w	7c48 <z_arm_fatal_error>

00029820 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   29820:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   29822:	6800      	ldr	r0, [r0, #0]
   29824:	f7de ba10 	b.w	7c48 <z_arm_fatal_error>

00029828 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   29828:	b508      	push	{r3, lr}
	handler();
   2982a:	f7de fa3b 	bl	7ca4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2982e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   29832:	f7de bc99 	b.w	8168 <z_arm_exc_exit>

00029836 <_stdout_hook_default>:
}
   29836:	f04f 30ff 	mov.w	r0, #4294967295
   2983a:	4770      	bx	lr

0002983c <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2983c:	f7f9 b834 	b.w	228a8 <SystemInit>

00029840 <send_cmd_status>:
{
   29840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   29844:	f04f 32ff 	mov.w	r2, #4294967295
{
   29848:	4680      	mov	r8, r0
   2984a:	460f      	mov	r7, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2984c:	f04f 33ff 	mov.w	r3, #4294967295
   29850:	2100      	movs	r1, #0
   29852:	200f      	movs	r0, #15
   29854:	f7df fa2c 	bl	8cb0 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   29858:	2501      	movs	r5, #1
	return net_buf_simple_add(&buf->b, len);
   2985a:	f100 0608 	add.w	r6, r0, #8
   2985e:	4604      	mov	r4, r0
   29860:	7505      	strb	r5, [r0, #20]
   29862:	2102      	movs	r1, #2
   29864:	4630      	mov	r0, r6
   29866:	f7f6 fb9b 	bl	1ffa0 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2986a:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   2986c:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2986e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   29870:	7041      	strb	r1, [r0, #1]
   29872:	4630      	mov	r0, r6
   29874:	f7f6 fb94 	bl	1ffa0 <net_buf_simple_add>
	evt->ncmd = 1U;
   29878:	7045      	strb	r5, [r0, #1]
	evt->status = status;
   2987a:	7007      	strb	r7, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   2987c:	f8a0 8002 	strh.w	r8, [r0, #2]
		bt_recv_prio(buf);
   29880:	4620      	mov	r0, r4
}
   29882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   29886:	f7e0 bb4f 	b.w	9f28 <bt_recv_prio>

0002988a <default_CSPRNG>:
{
   2988a:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   2988c:	f003 f83c 	bl	2c908 <bt_rand>
}
   29890:	fab0 f080 	clz	r0, r0
   29894:	0940      	lsrs	r0, r0, #5
   29896:	bd08      	pop	{r3, pc}

00029898 <bt_settings_decode_key>:
{
   29898:	b570      	push	{r4, r5, r6, lr}
   2989a:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   2989c:	2100      	movs	r1, #0
{
   2989e:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   298a0:	f7fe fc44 	bl	2812c <settings_name_next>
   298a4:	280d      	cmp	r0, #13
   298a6:	d118      	bne.n	298da <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   298a8:	7b23      	ldrb	r3, [r4, #12]
   298aa:	2b30      	cmp	r3, #48	; 0x30
   298ac:	d111      	bne.n	298d2 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   298ae:	2300      	movs	r3, #0
   298b0:	702b      	strb	r3, [r5, #0]
   298b2:	f104 060c 	add.w	r6, r4, #12
   298b6:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   298b8:	462a      	mov	r2, r5
   298ba:	4620      	mov	r0, r4
   298bc:	2301      	movs	r3, #1
   298be:	2102      	movs	r1, #2
   298c0:	3402      	adds	r4, #2
   298c2:	f7fd ffa4 	bl	2780e <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   298c6:	42b4      	cmp	r4, r6
   298c8:	f105 35ff 	add.w	r5, r5, #4294967295
   298cc:	d1f4      	bne.n	298b8 <bt_settings_decode_key+0x20>
	return 0;
   298ce:	2000      	movs	r0, #0
}
   298d0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   298d2:	2b31      	cmp	r3, #49	; 0x31
   298d4:	d101      	bne.n	298da <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   298d6:	2301      	movs	r3, #1
   298d8:	e7ea      	b.n	298b0 <bt_settings_decode_key+0x18>
		return -EINVAL;
   298da:	f06f 0015 	mvn.w	r0, #21
   298de:	e7f7      	b.n	298d0 <bt_settings_decode_key+0x38>

000298e0 <xor16>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_HCI_CORE)
#define LOG_MODULE_NAME bt_aes_ccm
#include "common/log.h"

static inline void xor16(uint8_t *dst, const uint8_t *a, const uint8_t *b)
{
   298e0:	b510      	push	{r4, lr}
	dst[0] = a[0] ^ b[0];
   298e2:	780b      	ldrb	r3, [r1, #0]
   298e4:	7814      	ldrb	r4, [r2, #0]
   298e6:	4063      	eors	r3, r4
   298e8:	7003      	strb	r3, [r0, #0]
	dst[1] = a[1] ^ b[1];
   298ea:	7854      	ldrb	r4, [r2, #1]
   298ec:	784b      	ldrb	r3, [r1, #1]
   298ee:	4063      	eors	r3, r4
   298f0:	7043      	strb	r3, [r0, #1]
	dst[2] = a[2] ^ b[2];
   298f2:	7894      	ldrb	r4, [r2, #2]
   298f4:	788b      	ldrb	r3, [r1, #2]
   298f6:	4063      	eors	r3, r4
   298f8:	7083      	strb	r3, [r0, #2]
	dst[3] = a[3] ^ b[3];
   298fa:	78d4      	ldrb	r4, [r2, #3]
   298fc:	78cb      	ldrb	r3, [r1, #3]
   298fe:	4063      	eors	r3, r4
   29900:	70c3      	strb	r3, [r0, #3]
	dst[4] = a[4] ^ b[4];
   29902:	7914      	ldrb	r4, [r2, #4]
   29904:	790b      	ldrb	r3, [r1, #4]
   29906:	4063      	eors	r3, r4
   29908:	7103      	strb	r3, [r0, #4]
	dst[5] = a[5] ^ b[5];
   2990a:	7954      	ldrb	r4, [r2, #5]
   2990c:	794b      	ldrb	r3, [r1, #5]
   2990e:	4063      	eors	r3, r4
   29910:	7143      	strb	r3, [r0, #5]
	dst[6] = a[6] ^ b[6];
   29912:	7994      	ldrb	r4, [r2, #6]
   29914:	798b      	ldrb	r3, [r1, #6]
   29916:	4063      	eors	r3, r4
   29918:	7183      	strb	r3, [r0, #6]
	dst[7] = a[7] ^ b[7];
   2991a:	79d4      	ldrb	r4, [r2, #7]
   2991c:	79cb      	ldrb	r3, [r1, #7]
   2991e:	4063      	eors	r3, r4
   29920:	71c3      	strb	r3, [r0, #7]
	dst[8] = a[8] ^ b[8];
   29922:	7a14      	ldrb	r4, [r2, #8]
   29924:	7a0b      	ldrb	r3, [r1, #8]
   29926:	4063      	eors	r3, r4
   29928:	7203      	strb	r3, [r0, #8]
	dst[9] = a[9] ^ b[9];
   2992a:	7a54      	ldrb	r4, [r2, #9]
   2992c:	7a4b      	ldrb	r3, [r1, #9]
   2992e:	4063      	eors	r3, r4
   29930:	7243      	strb	r3, [r0, #9]
	dst[10] = a[10] ^ b[10];
   29932:	7a8b      	ldrb	r3, [r1, #10]
   29934:	7a94      	ldrb	r4, [r2, #10]
   29936:	4063      	eors	r3, r4
   29938:	7283      	strb	r3, [r0, #10]
	dst[11] = a[11] ^ b[11];
   2993a:	7ad4      	ldrb	r4, [r2, #11]
   2993c:	7acb      	ldrb	r3, [r1, #11]
   2993e:	4063      	eors	r3, r4
   29940:	72c3      	strb	r3, [r0, #11]
	dst[12] = a[12] ^ b[12];
   29942:	7b14      	ldrb	r4, [r2, #12]
   29944:	7b0b      	ldrb	r3, [r1, #12]
   29946:	4063      	eors	r3, r4
   29948:	7303      	strb	r3, [r0, #12]
	dst[13] = a[13] ^ b[13];
   2994a:	7b54      	ldrb	r4, [r2, #13]
   2994c:	7b4b      	ldrb	r3, [r1, #13]
   2994e:	4063      	eors	r3, r4
   29950:	7343      	strb	r3, [r0, #13]
	dst[14] = a[14] ^ b[14];
   29952:	7b94      	ldrb	r4, [r2, #14]
   29954:	7b8b      	ldrb	r3, [r1, #14]
   29956:	4063      	eors	r3, r4
   29958:	7383      	strb	r3, [r0, #14]
	dst[15] = a[15] ^ b[15];
   2995a:	7bcb      	ldrb	r3, [r1, #15]
   2995c:	7bd2      	ldrb	r2, [r2, #15]
   2995e:	4053      	eors	r3, r2
   29960:	73c3      	strb	r3, [r0, #15]
}
   29962:	bd10      	pop	{r4, pc}

00029964 <ccm_crypt>:
	return 0;
}

static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
		     const uint8_t *in_msg, uint8_t *out_msg, size_t msg_len)
{
   29964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29968:	b089      	sub	sp, #36	; 0x24
   2996a:	4698      	mov	r8, r3
   2996c:	9d12      	ldr	r5, [sp, #72]	; 0x48
	blk_cnt = (msg_len + 15) / 16;
	if (!last_blk) {
		last_blk = 16U;
	}

	a_i[0] = 0x01;
   2996e:	2301      	movs	r3, #1
	blk_cnt = (msg_len + 15) / 16;
   29970:	f105 060f 	add.w	r6, r5, #15
		last_blk = 16U;
   29974:	f015 050f 	ands.w	r5, r5, #15
{
   29978:	4617      	mov	r7, r2
	a_i[0] = 0x01;
   2997a:	f88d 3000 	strb.w	r3, [sp]
{
   2997e:	4681      	mov	r9, r0
	blk_cnt = (msg_len + 15) / 16;
   29980:	ea4f 1616 	mov.w	r6, r6, lsr #4
		last_blk = 16U;
   29984:	bf08      	it	eq
   29986:	2510      	moveq	r5, #16
	memcpy(&a_i[1], nonce, 13);
   29988:	446b      	add	r3, sp
   2998a:	f101 020c 	add.w	r2, r1, #12
   2998e:	f851 0b04 	ldr.w	r0, [r1], #4
   29992:	f843 0b04 	str.w	r0, [r3], #4
   29996:	4291      	cmp	r1, r2
   29998:	d1f9      	bne.n	2998e <ccm_crypt+0x2a>
   2999a:	780a      	ldrb	r2, [r1, #0]
   2999c:	701a      	strb	r2, [r3, #0]

	for (j = 0; j < blk_cnt; j++) {
   2999e:	b2b6      	uxth	r6, r6
   299a0:	2400      	movs	r4, #0
		if (err) {
			return err;
		}

		/* Encrypted = Payload[0-15] ^ C_1 */
		if (j < blk_cnt - 1) {
   299a2:	f106 3aff 	add.w	sl, r6, #4294967295
	for (j = 0; j < blk_cnt; j++) {
   299a6:	42b4      	cmp	r4, r6
   299a8:	d303      	bcc.n	299b2 <ccm_crypt+0x4e>
				out_msg[(j * 16) + i] =
					in_msg[(j * 16) + i] ^ s_i[i];
			}
		}
	}
	return 0;
   299aa:	2000      	movs	r0, #0
}
   299ac:	b009      	add	sp, #36	; 0x24
   299ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dst[0] = val >> 8;
   299b2:	f104 0b01 	add.w	fp, r4, #1
   299b6:	f3cb 2307 	ubfx	r3, fp, #8, #8
		err = bt_encrypt_be(key, a_i, s_i);
   299ba:	aa04      	add	r2, sp, #16
   299bc:	4669      	mov	r1, sp
   299be:	4648      	mov	r0, r9
   299c0:	f88d 300e 	strb.w	r3, [sp, #14]
	dst[1] = val;
   299c4:	f88d b00f 	strb.w	fp, [sp, #15]
   299c8:	f002 ffa0 	bl	2c90c <bt_encrypt_be>
		if (err) {
   299cc:	2800      	cmp	r0, #0
   299ce:	d1ed      	bne.n	299ac <ccm_crypt+0x48>
		if (j < blk_cnt - 1) {
   299d0:	45a2      	cmp	sl, r4
   299d2:	ea4f 1404 	mov.w	r4, r4, lsl #4
   299d6:	d907      	bls.n	299e8 <ccm_crypt+0x84>
			xor16(&out_msg[j * 16], s_i, &in_msg[j * 16]);
   299d8:	193a      	adds	r2, r7, r4
   299da:	a904      	add	r1, sp, #16
   299dc:	eb08 0004 	add.w	r0, r8, r4
   299e0:	f7ff ff7e 	bl	298e0 <xor16>
	for (j = 0; j < blk_cnt; j++) {
   299e4:	465c      	mov	r4, fp
   299e6:	e7de      	b.n	299a6 <ccm_crypt+0x42>
   299e8:	1939      	adds	r1, r7, r4
   299ea:	aa04      	add	r2, sp, #16
   299ec:	4444      	add	r4, r8
					in_msg[(j * 16) + i] ^ s_i[i];
   299ee:	f811 3b01 	ldrb.w	r3, [r1], #1
   299f2:	f812 cb01 	ldrb.w	ip, [r2], #1
			for (i = 0; i < last_blk; i++) {
   299f6:	3001      	adds	r0, #1
				out_msg[(j * 16) + i] =
   299f8:	ea83 030c 	eor.w	r3, r3, ip
			for (i = 0; i < last_blk; i++) {
   299fc:	4285      	cmp	r5, r0
				out_msg[(j * 16) + i] =
   299fe:	f804 3b01 	strb.w	r3, [r4], #1
			for (i = 0; i < last_blk; i++) {
   29a02:	d8f4      	bhi.n	299ee <ccm_crypt+0x8a>
   29a04:	e7ee      	b.n	299e4 <ccm_crypt+0x80>

00029a06 <ccm_auth>:
{
   29a06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29a0a:	b091      	sub	sp, #68	; 0x44
		last_blk = 16U;
   29a0c:	f013 070f 	ands.w	r7, r3, #15
{
   29a10:	461e      	mov	r6, r3
   29a12:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   29a14:	9201      	str	r2, [sp, #4]
	b[0] = 0x01;
   29a16:	f04f 0301 	mov.w	r3, #1
   29a1a:	f88d 3010 	strb.w	r3, [sp, #16]
{
   29a1e:	4680      	mov	r8, r0
		last_blk = 16U;
   29a20:	bf08      	it	eq
   29a22:	2710      	moveq	r7, #16
	memcpy(b + 1, nonce, 13);
   29a24:	f10d 0311 	add.w	r3, sp, #17
   29a28:	f101 020c 	add.w	r2, r1, #12
   29a2c:	f851 0b04 	ldr.w	r0, [r1], #4
   29a30:	f843 0b04 	str.w	r0, [r3], #4
   29a34:	4291      	cmp	r1, r2
   29a36:	d1f9      	bne.n	29a2c <ccm_auth+0x26>
   29a38:	780a      	ldrb	r2, [r1, #0]
   29a3a:	701a      	strb	r2, [r3, #0]
	err = bt_encrypt_be(key, b, s0);
   29a3c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
   29a40:	f10d 0b10 	add.w	fp, sp, #16
	dst[0] = val >> 8;
   29a44:	2300      	movs	r3, #0
   29a46:	4652      	mov	r2, sl
   29a48:	4659      	mov	r1, fp
   29a4a:	4640      	mov	r0, r8
   29a4c:	f8ad 301e 	strh.w	r3, [sp, #30]
   29a50:	f002 ff5c 	bl	2c90c <bt_encrypt_be>
	if (err) {
   29a54:	4605      	mov	r5, r0
   29a56:	2800      	cmp	r0, #0
   29a58:	d165      	bne.n	29b26 <ccm_auth+0x120>
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   29a5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   29a5c:	f88d 001e 	strb.w	r0, [sp, #30]
   29a60:	3b02      	subs	r3, #2
   29a62:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   29a66:	ea4f 0383 	mov.w	r3, r3, lsl #2
   29a6a:	bf14      	ite	ne
   29a6c:	2240      	movne	r2, #64	; 0x40
   29a6e:	2200      	moveq	r2, #0
   29a70:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   29a74:	4313      	orrs	r3, r2
	err = bt_encrypt_be(key, b, X0);
   29a76:	f10d 0920 	add.w	r9, sp, #32
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   29a7a:	f043 0301 	orr.w	r3, r3, #1
	err = bt_encrypt_be(key, b, X0);
   29a7e:	464a      	mov	r2, r9
   29a80:	4659      	mov	r1, fp
   29a82:	4640      	mov	r0, r8
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   29a84:	f88d 3010 	strb.w	r3, [sp, #16]
	dst[1] = val;
   29a88:	f88d 601f 	strb.w	r6, [sp, #31]
	err = bt_encrypt_be(key, b, X0);
   29a8c:	f002 ff3e 	bl	2c90c <bt_encrypt_be>
	if (err) {
   29a90:	4603      	mov	r3, r0
   29a92:	bbb8      	cbnz	r0, 29b04 <ccm_auth+0xfe>
	if (aad_len) {
   29a94:	b3b4      	cbz	r4, 29b04 <ccm_auth+0xfe>
			b[i] = X0[i] ^ b[i];
   29a96:	f89d 2020 	ldrb.w	r2, [sp, #32]
   29a9a:	f88d 2010 	strb.w	r2, [sp, #16]
   29a9e:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   29aa2:	4062      	eors	r2, r4
		aad_len += sizeof(uint16_t);
   29aa4:	3402      	adds	r4, #2
			b[i] = X0[i] ^ b[i];
   29aa6:	f88d 2011 	strb.w	r2, [sp, #17]
		aad_len += sizeof(uint16_t);
   29aaa:	b2e4      	uxtb	r4, r4
   29aac:	2002      	movs	r0, #2
   29aae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
		while (aad_len > 16) {
   29ab0:	2c10      	cmp	r4, #16
   29ab2:	441a      	add	r2, r3
   29ab4:	d80b      	bhi.n	29ace <ccm_auth+0xc8>
   29ab6:	4613      	mov	r3, r2
   29ab8:	aa08      	add	r2, sp, #32
		for (; i < aad_len; i++, j++) {
   29aba:	42a0      	cmp	r0, r4
   29abc:	4621      	mov	r1, r4
   29abe:	db36      	blt.n	29b2e <ccm_auth+0x128>
		for (i = aad_len; i < 16; i++) {
   29ac0:	290f      	cmp	r1, #15
   29ac2:	dd40      	ble.n	29b46 <ccm_auth+0x140>
		err = bt_encrypt_be(key, b, X0);
   29ac4:	a904      	add	r1, sp, #16
   29ac6:	4640      	mov	r0, r8
   29ac8:	f002 ff20 	bl	2c90c <bt_encrypt_be>
		if (err) {
   29acc:	e01a      	b.n	29b04 <ccm_auth+0xfe>
		while (aad_len > 16) {
   29ace:	4601      	mov	r1, r0
				b[i] = X0[i] ^ aad[j];
   29ad0:	f811 e009 	ldrb.w	lr, [r1, r9]
   29ad4:	f812 cb01 	ldrb.w	ip, [r2], #1
   29ad8:	ea8c 0c0e 	eor.w	ip, ip, lr
   29adc:	f801 c00b 	strb.w	ip, [r1, fp]
				i++, j++;
   29ae0:	3101      	adds	r1, #1
			} while (i < 16);
   29ae2:	2910      	cmp	r1, #16
   29ae4:	d1f4      	bne.n	29ad0 <ccm_auth+0xca>
   29ae6:	f1c0 0010 	rsb	r0, r0, #16
   29aea:	4403      	add	r3, r0
			err = bt_encrypt_be(key, b, X0);
   29aec:	464a      	mov	r2, r9
   29aee:	4659      	mov	r1, fp
   29af0:	4640      	mov	r0, r8
   29af2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   29af6:	f002 ff09 	bl	2c90c <bt_encrypt_be>
   29afa:	3c10      	subs	r4, #16
   29afc:	b2e4      	uxtb	r4, r4
			if (err) {
   29afe:	9b02      	ldr	r3, [sp, #8]
   29b00:	2800      	cmp	r0, #0
   29b02:	d0d4      	beq.n	29aae <ccm_auth+0xa8>
	blk_cnt = (msg_len + 15) / 16;
   29b04:	f106 040f 	add.w	r4, r6, #15
			memcpy(&b[i], &Xn[i], 16 - i);
   29b08:	ab04      	add	r3, sp, #16
   29b0a:	f8dd 9004 	ldr.w	r9, [sp, #4]
	for (j = 0; j < blk_cnt; j++) {
   29b0e:	f3c4 140f 	ubfx	r4, r4, #4, #16
   29b12:	2600      	movs	r6, #0
			memcpy(&b[i], &Xn[i], 16 - i);
   29b14:	eb03 0b07 	add.w	fp, r3, r7
	for (j = 0; j < blk_cnt; j++) {
   29b18:	42b4      	cmp	r4, r6
   29b1a:	dc19      	bgt.n	29b50 <ccm_auth+0x14a>
	for (i = 0; i < mic_size; i++) {
   29b1c:	2300      	movs	r3, #0
		mic[i] = s0[i] ^ Xn[i];
   29b1e:	a908      	add	r1, sp, #32
	for (i = 0; i < mic_size; i++) {
   29b20:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   29b22:	4293      	cmp	r3, r2
   29b24:	d13f      	bne.n	29ba6 <ccm_auth+0x1a0>
}
   29b26:	4628      	mov	r0, r5
   29b28:	b011      	add	sp, #68	; 0x44
   29b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			b[i] = X0[i] ^ aad[j];
   29b2e:	f812 c000 	ldrb.w	ip, [r2, r0]
   29b32:	f813 1b01 	ldrb.w	r1, [r3], #1
   29b36:	ea81 010c 	eor.w	r1, r1, ip
   29b3a:	f10d 0c10 	add.w	ip, sp, #16
   29b3e:	f80c 1000 	strb.w	r1, [ip, r0]
		for (; i < aad_len; i++, j++) {
   29b42:	3001      	adds	r0, #1
   29b44:	e7b9      	b.n	29aba <ccm_auth+0xb4>
			b[i] = X0[i];
   29b46:	a804      	add	r0, sp, #16
   29b48:	5c53      	ldrb	r3, [r2, r1]
   29b4a:	5443      	strb	r3, [r0, r1]
		for (i = aad_len; i < 16; i++) {
   29b4c:	3101      	adds	r1, #1
   29b4e:	e7b7      	b.n	29ac0 <ccm_auth+0xba>
		if (j + 1 == blk_cnt) {
   29b50:	3601      	adds	r6, #1
   29b52:	42a6      	cmp	r6, r4
   29b54:	d121      	bne.n	29b9a <ccm_auth+0x194>
   29b56:	f10d 0c20 	add.w	ip, sp, #32
   29b5a:	a904      	add	r1, sp, #16
   29b5c:	4648      	mov	r0, r9
			for (i = 0; i < last_blk; i++) {
   29b5e:	2300      	movs	r3, #0
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   29b60:	f81c 2b01 	ldrb.w	r2, [ip], #1
   29b64:	f810 eb01 	ldrb.w	lr, [r0], #1
			for (i = 0; i < last_blk; i++) {
   29b68:	3301      	adds	r3, #1
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   29b6a:	ea82 020e 	eor.w	r2, r2, lr
			for (i = 0; i < last_blk; i++) {
   29b6e:	429f      	cmp	r7, r3
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   29b70:	f801 2b01 	strb.w	r2, [r1], #1
			for (i = 0; i < last_blk; i++) {
   29b74:	dcf4      	bgt.n	29b60 <ccm_auth+0x15a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29b76:	ab08      	add	r3, sp, #32
   29b78:	f1c7 0210 	rsb	r2, r7, #16
   29b7c:	19d9      	adds	r1, r3, r7
   29b7e:	4658      	mov	r0, fp
   29b80:	f004 fb93 	bl	2e2aa <memcpy>
		err = bt_encrypt_be(key, b, Xn);
   29b84:	aa08      	add	r2, sp, #32
   29b86:	a904      	add	r1, sp, #16
   29b88:	4640      	mov	r0, r8
   29b8a:	f002 febf 	bl	2c90c <bt_encrypt_be>
		if (err) {
   29b8e:	f109 0910 	add.w	r9, r9, #16
   29b92:	2800      	cmp	r0, #0
   29b94:	d0c0      	beq.n	29b18 <ccm_auth+0x112>
		err = bt_encrypt_be(key, b, Xn);
   29b96:	4605      	mov	r5, r0
   29b98:	e7c5      	b.n	29b26 <ccm_auth+0x120>
			xor16(b, Xn, &cleartext_msg[j * 16]);
   29b9a:	464a      	mov	r2, r9
   29b9c:	a908      	add	r1, sp, #32
   29b9e:	a804      	add	r0, sp, #16
   29ba0:	f7ff fe9e 	bl	298e0 <xor16>
   29ba4:	e7ee      	b.n	29b84 <ccm_auth+0x17e>
		mic[i] = s0[i] ^ Xn[i];
   29ba6:	5c58      	ldrb	r0, [r3, r1]
   29ba8:	f81a 2003 	ldrb.w	r2, [sl, r3]
   29bac:	4042      	eors	r2, r0
   29bae:	981c      	ldr	r0, [sp, #112]	; 0x70
   29bb0:	54c2      	strb	r2, [r0, r3]
	for (i = 0; i < mic_size; i++) {
   29bb2:	3301      	adds	r3, #1
   29bb4:	e7b4      	b.n	29b20 <ccm_auth+0x11a>

00029bb6 <bt_ccm_decrypt>:

int bt_ccm_decrypt(const uint8_t key[16], uint8_t nonce[13], const uint8_t *enc_msg,
		   size_t msg_len, const uint8_t *aad, size_t aad_len,
		   uint8_t *out_msg, size_t mic_size)
{
   29bb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29bba:	b088      	sub	sp, #32
   29bbc:	4681      	mov	r9, r0
   29bbe:	9f11      	ldr	r7, [sp, #68]	; 0x44
   29bc0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	uint8_t mic[16];

	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   29bc2:	f5b7 4f7f 	cmp.w	r7, #65280	; 0xff00
{
   29bc6:	468a      	mov	sl, r1
   29bc8:	4690      	mov	r8, r2
   29bca:	461c      	mov	r4, r3
	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   29bcc:	d21e      	bcs.n	29c0c <bt_ccm_decrypt+0x56>
   29bce:	2d10      	cmp	r5, #16
   29bd0:	d81c      	bhi.n	29c0c <bt_ccm_decrypt+0x56>
		return -EINVAL;
	}

	ccm_crypt(key, nonce, enc_msg, out_msg, msg_len);
   29bd2:	9300      	str	r3, [sp, #0]
   29bd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   29bd6:	f7ff fec5 	bl	29964 <ccm_crypt>

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   29bda:	ae04      	add	r6, sp, #16
   29bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29bde:	9300      	str	r3, [sp, #0]
   29be0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   29be2:	9503      	str	r5, [sp, #12]
   29be4:	4623      	mov	r3, r4
   29be6:	4651      	mov	r1, sl
   29be8:	e9cd 7601 	strd	r7, r6, [sp, #4]
   29bec:	4648      	mov	r0, r9
   29bee:	f7ff ff0a 	bl	29a06 <ccm_auth>

	if (memcmp(mic, enc_msg + msg_len, mic_size)) {
   29bf2:	462a      	mov	r2, r5
   29bf4:	eb08 0104 	add.w	r1, r8, r4
   29bf8:	4630      	mov	r0, r6
   29bfa:	f004 fb48 	bl	2e28e <memcmp>
   29bfe:	2800      	cmp	r0, #0
		return -EBADMSG;
   29c00:	bf18      	it	ne
   29c02:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}

	return 0;
}
   29c06:	b008      	add	sp, #32
   29c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   29c0c:	f06f 0015 	mvn.w	r0, #21
   29c10:	e7f9      	b.n	29c06 <bt_ccm_decrypt+0x50>

00029c12 <bt_ccm_encrypt>:

int bt_ccm_encrypt(const uint8_t key[16], uint8_t nonce[13], const uint8_t *msg,
		   size_t msg_len, const uint8_t *aad, size_t aad_len,
		   uint8_t *out_msg, size_t mic_size)
{
   29c12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29c16:	b085      	sub	sp, #20
   29c18:	4691      	mov	r9, r2
   29c1a:	e9dd 240d 	ldrd	r2, r4, [sp, #52]	; 0x34
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", msg_len, bt_hex(msg, msg_len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00 || mic_size > 16) {
   29c1e:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
{
   29c22:	4607      	mov	r7, r0
   29c24:	4688      	mov	r8, r1
   29c26:	461d      	mov	r5, r3
   29c28:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	uint8_t *mic = out_msg + msg_len;
   29c2a:	eb04 0c03 	add.w	ip, r4, r3
	if (aad_len >= 0xff00 || mic_size > 16) {
   29c2e:	d214      	bcs.n	29c5a <bt_ccm_encrypt+0x48>
   29c30:	2e10      	cmp	r6, #16
   29c32:	d812      	bhi.n	29c5a <bt_ccm_encrypt+0x48>
		return -EINVAL;
	}

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   29c34:	9201      	str	r2, [sp, #4]
   29c36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   29c38:	9200      	str	r2, [sp, #0]
   29c3a:	e9cd c602 	strd	ip, r6, [sp, #8]
   29c3e:	4622      	mov	r2, r4
   29c40:	f7ff fee1 	bl	29a06 <ccm_auth>

	ccm_crypt(key, nonce, msg, out_msg, msg_len);
   29c44:	9500      	str	r5, [sp, #0]
   29c46:	4623      	mov	r3, r4
   29c48:	464a      	mov	r2, r9
   29c4a:	4641      	mov	r1, r8
   29c4c:	4638      	mov	r0, r7
   29c4e:	f7ff fe89 	bl	29964 <ccm_crypt>

	return 0;
   29c52:	2000      	movs	r0, #0
}
   29c54:	b005      	add	sp, #20
   29c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   29c5a:	f06f 0015 	mvn.w	r0, #21
   29c5e:	e7f9      	b.n	29c54 <bt_ccm_encrypt+0x42>

00029c60 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   29c60:	b510      	push	{r4, lr}
   29c62:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   29c64:	7801      	ldrb	r1, [r0, #0]
   29c66:	7822      	ldrb	r2, [r4, #0]
   29c68:	428a      	cmp	r2, r1
{
   29c6a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   29c6c:	d00e      	beq.n	29c8c <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   29c6e:	4669      	mov	r1, sp
   29c70:	f7de ff8a 	bl	8b88 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   29c74:	a905      	add	r1, sp, #20
   29c76:	4620      	mov	r0, r4
   29c78:	f7de ff86 	bl	8b88 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   29c7c:	2210      	movs	r2, #16
   29c7e:	f10d 0115 	add.w	r1, sp, #21
   29c82:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   29c86:	f004 fb02 	bl	2e28e <memcmp>
   29c8a:	e006      	b.n	29c9a <bt_uuid_cmp+0x3a>
	switch (u1->type) {
   29c8c:	2a01      	cmp	r2, #1
   29c8e:	d00a      	beq.n	29ca6 <bt_uuid_cmp+0x46>
   29c90:	b12a      	cbz	r2, 29c9e <bt_uuid_cmp+0x3e>
   29c92:	2a02      	cmp	r2, #2
   29c94:	d00a      	beq.n	29cac <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
   29c96:	f06f 0015 	mvn.w	r0, #21
}
   29c9a:	b00a      	add	sp, #40	; 0x28
   29c9c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   29c9e:	8840      	ldrh	r0, [r0, #2]
   29ca0:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   29ca2:	1ac0      	subs	r0, r0, r3
   29ca4:	e7f9      	b.n	29c9a <bt_uuid_cmp+0x3a>
   29ca6:	6840      	ldr	r0, [r0, #4]
   29ca8:	6863      	ldr	r3, [r4, #4]
   29caa:	e7fa      	b.n	29ca2 <bt_uuid_cmp+0x42>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   29cac:	2210      	movs	r2, #16
   29cae:	1c61      	adds	r1, r4, #1
   29cb0:	3001      	adds	r0, #1
   29cb2:	e7e8      	b.n	29c86 <bt_uuid_cmp+0x26>

00029cb4 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   29cb4:	2a04      	cmp	r2, #4
{
   29cb6:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   29cb8:	d00d      	beq.n	29cd6 <bt_uuid_create+0x22>
   29cba:	2a10      	cmp	r2, #16
   29cbc:	d019      	beq.n	29cf2 <bt_uuid_create+0x3e>
   29cbe:	2a02      	cmp	r2, #2
   29cc0:	f04f 0300 	mov.w	r3, #0
   29cc4:	d121      	bne.n	29d0a <bt_uuid_create+0x56>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   29cc6:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   29cc8:	784a      	ldrb	r2, [r1, #1]
   29cca:	780b      	ldrb	r3, [r1, #0]
   29ccc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   29cd0:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   29cd2:	2001      	movs	r0, #1
}
   29cd4:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   29cd6:	2301      	movs	r3, #1
   29cd8:	7003      	strb	r3, [r0, #0]
   29cda:	788a      	ldrb	r2, [r1, #2]
   29cdc:	78cc      	ldrb	r4, [r1, #3]
   29cde:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   29ce0:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   29ce4:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   29ce6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   29cea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   29cee:	6042      	str	r2, [r0, #4]
		break;
   29cf0:	e7ef      	b.n	29cd2 <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   29cf2:	2302      	movs	r3, #2
   29cf4:	f800 3b01 	strb.w	r3, [r0], #1
   29cf8:	f101 0310 	add.w	r3, r1, #16
   29cfc:	f851 2b04 	ldr.w	r2, [r1], #4
   29d00:	f840 2b04 	str.w	r2, [r0], #4
   29d04:	4299      	cmp	r1, r3
   29d06:	d1f9      	bne.n	29cfc <bt_uuid_create+0x48>
   29d08:	e7e3      	b.n	29cd2 <bt_uuid_create+0x1e>
		return false;
   29d0a:	4618      	mov	r0, r3
   29d0c:	e7e2      	b.n	29cd4 <bt_uuid_create+0x20>

00029d0e <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   29d0e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   29d10:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   29d12:	2106      	movs	r1, #6
{
   29d14:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   29d16:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   29d1a:	f002 fdf5 	bl	2c908 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   29d1e:	b918      	cbnz	r0, 29d28 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   29d20:	79a3      	ldrb	r3, [r4, #6]
   29d22:	f063 033f 	orn	r3, r3, #63	; 0x3f
   29d26:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   29d28:	bd10      	pop	{r4, pc}

00029d2a <get_adv_channel_map>:
		channel_map &= ~0x01;
   29d2a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   29d2e:	bf0c      	ite	eq
   29d30:	2307      	moveq	r3, #7
   29d32:	2306      	movne	r3, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   29d34:	03c1      	lsls	r1, r0, #15
		channel_map &= ~0x02;
   29d36:	bf48      	it	mi
   29d38:	f003 0305 	andmi.w	r3, r3, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   29d3c:	0382      	lsls	r2, r0, #14
		channel_map &= ~0x04;
   29d3e:	bf48      	it	mi
   29d40:	f003 03fb 	andmi.w	r3, r3, #251	; 0xfb
}
   29d44:	4618      	mov	r0, r3
   29d46:	4770      	bx	lr

00029d48 <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29d48:	f3bf 8f5b 	dmb	ish
   29d4c:	e850 3f00 	ldrex	r3, [r0]
   29d50:	ea43 0201 	orr.w	r2, r3, r1
   29d54:	e840 2c00 	strex	ip, r2, [r0]
   29d58:	f1bc 0f00 	cmp.w	ip, #0
   29d5c:	d1f6      	bne.n	29d4c <atomic_or+0x4>
   29d5e:	f3bf 8f5b 	dmb	ish
}
   29d62:	4618      	mov	r0, r3
   29d64:	4770      	bx	lr

00029d66 <atomic_test_and_set_bit>:
{
   29d66:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   29d68:	2401      	movs	r4, #1
   29d6a:	408c      	lsls	r4, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   29d6c:	4621      	mov	r1, r4
   29d6e:	f7ff ffeb 	bl	29d48 <atomic_or>
	return (old & mask) != 0;
   29d72:	4204      	tst	r4, r0
}
   29d74:	bf14      	ite	ne
   29d76:	2001      	movne	r0, #1
   29d78:	2000      	moveq	r0, #0
   29d7a:	bd10      	pop	{r4, pc}

00029d7c <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29d7c:	f3bf 8f5b 	dmb	ish
   29d80:	e850 3f00 	ldrex	r3, [r0]
   29d84:	ea03 0201 	and.w	r2, r3, r1
   29d88:	e840 2c00 	strex	ip, r2, [r0]
   29d8c:	f1bc 0f00 	cmp.w	ip, #0
   29d90:	d1f6      	bne.n	29d80 <atomic_and+0x4>
   29d92:	f3bf 8f5b 	dmb	ish
}
   29d96:	4618      	mov	r0, r3
   29d98:	4770      	bx	lr

00029d9a <atomic_set_bit_to>:
{
   29d9a:	460b      	mov	r3, r1
   29d9c:	b410      	push	{r4}
   29d9e:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   29da0:	f001 041f 	and.w	r4, r1, #31
   29da4:	2101      	movs	r1, #1
   29da6:	40a1      	lsls	r1, r4
	if (val) {
   29da8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   29dac:	b112      	cbz	r2, 29db4 <atomic_set_bit_to+0x1a>
}
   29dae:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   29db0:	f7ff bfca 	b.w	29d48 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29db4:	43c9      	mvns	r1, r1
}
   29db6:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29db8:	f7ff bfe0 	b.w	29d7c <atomic_and>

00029dbc <bt_addr_le_cmp>:
   29dbc:	2207      	movs	r2, #7
   29dbe:	f004 ba66 	b.w	2e28e <memcmp>

00029dc2 <bt_addr_copy>:
   29dc2:	680b      	ldr	r3, [r1, #0]
   29dc4:	6003      	str	r3, [r0, #0]
   29dc6:	888b      	ldrh	r3, [r1, #4]
   29dc8:	8083      	strh	r3, [r0, #4]
}
   29dca:	4770      	bx	lr

00029dcc <bt_addr_le_copy>:
   29dcc:	680b      	ldr	r3, [r1, #0]
   29dce:	6003      	str	r3, [r0, #0]
   29dd0:	888b      	ldrh	r3, [r1, #4]
   29dd2:	8083      	strh	r3, [r0, #4]
   29dd4:	798b      	ldrb	r3, [r1, #6]
   29dd6:	7183      	strb	r3, [r0, #6]
}
   29dd8:	4770      	bx	lr

00029dda <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29dda:	f3bf 8f5b 	dmb	ish
   29dde:	6800      	ldr	r0, [r0, #0]
   29de0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29de4:	4108      	asrs	r0, r1
}
   29de6:	f000 0001 	and.w	r0, r0, #1
   29dea:	4770      	bx	lr

00029dec <le_adv_set_private_addr.isra.27>:
static int le_adv_set_private_addr(struct bt_le_ext_adv *adv)
   29dec:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   29dee:	2106      	movs	r1, #6
   29df0:	4668      	mov	r0, sp
   29df2:	f002 fd89 	bl	2c908 <bt_rand>
	if (err) {
   29df6:	b940      	cbnz	r0, 29e0a <le_adv_set_private_addr.isra.27+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   29df8:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   29dfc:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   29dfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   29e02:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   29e06:	f7df feb7 	bl	9b78 <set_random_address>
}
   29e0a:	b003      	add	sp, #12
   29e0c:	f85d fb04 	ldr.w	pc, [sp], #4

00029e10 <bt_hci_disconnect>:
{
   29e10:	b570      	push	{r4, r5, r6, lr}
   29e12:	4606      	mov	r6, r0
   29e14:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   29e16:	f240 4006 	movw	r0, #1030	; 0x406
   29e1a:	2103      	movs	r1, #3
   29e1c:	f7df fc00 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
   29e20:	4604      	mov	r4, r0
   29e22:	b168      	cbz	r0, 29e40 <bt_hci_disconnect+0x30>
   29e24:	2103      	movs	r1, #3
   29e26:	3008      	adds	r0, #8
   29e28:	f7f6 f8ba 	bl	1ffa0 <net_buf_simple_add>
	disconn->reason = reason;
   29e2c:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   29e2e:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   29e30:	4621      	mov	r1, r4
   29e32:	2200      	movs	r2, #0
   29e34:	f240 4006 	movw	r0, #1030	; 0x406
}
   29e38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   29e3c:	f7df bd2e 	b.w	989c <bt_hci_cmd_send_sync>
}
   29e40:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29e44:	bd70      	pop	{r4, r5, r6, pc}

00029e46 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   29e46:	8802      	ldrh	r2, [r0, #0]
   29e48:	8843      	ldrh	r3, [r0, #2]
   29e4a:	429a      	cmp	r2, r3
{
   29e4c:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   29e4e:	d818      	bhi.n	29e82 <bt_le_conn_params_valid+0x3c>
   29e50:	2a05      	cmp	r2, #5
   29e52:	d916      	bls.n	29e82 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   29e54:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   29e58:	d813      	bhi.n	29e82 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   29e5a:	8884      	ldrh	r4, [r0, #4]
   29e5c:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   29e60:	d20f      	bcs.n	29e82 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   29e62:	88c1      	ldrh	r1, [r0, #6]
   29e64:	f1a1 020a 	sub.w	r2, r1, #10
   29e68:	b292      	uxth	r2, r2
   29e6a:	f640 4076 	movw	r0, #3190	; 0xc76
   29e6e:	4282      	cmp	r2, r0
   29e70:	d807      	bhi.n	29e82 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   29e72:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   29e76:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   29e7a:	bf34      	ite	cc
   29e7c:	2001      	movcc	r0, #1
   29e7e:	2000      	movcs	r0, #0
}
   29e80:	bd10      	pop	{r4, pc}
		return false;
   29e82:	2000      	movs	r0, #0
   29e84:	e7fc      	b.n	29e80 <bt_le_conn_params_valid+0x3a>

00029e86 <bt_send>:
		return bt_hci_ecc_send(buf);
   29e86:	f7de bcdb 	b.w	8840 <bt_hci_ecc_send>

00029e8a <bt_addr_le_is_bonded>:
}
   29e8a:	2000      	movs	r0, #0
   29e8c:	4770      	bx	lr

00029e8e <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   29e8e:	6880      	ldr	r0, [r0, #8]
   29e90:	f7e0 bd76 	b.w	a980 <enh_conn_complete>

00029e94 <le_legacy_conn_complete>:
{
   29e94:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   29e96:	6881      	ldr	r1, [r0, #8]
{
   29e98:	b08d      	sub	sp, #52	; 0x34
	enh.status         = evt->status;
   29e9a:	780b      	ldrb	r3, [r1, #0]
   29e9c:	f88d 3010 	strb.w	r3, [sp, #16]
	enh.handle         = evt->handle;
   29ea0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   29ea4:	f8ad 3011 	strh.w	r3, [sp, #17]
	enh.role           = evt->role;
   29ea8:	78cb      	ldrb	r3, [r1, #3]
   29eaa:	f88d 3013 	strb.w	r3, [sp, #19]
	enh.interval       = evt->interval;
   29eae:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   29eb2:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
	enh.latency        = evt->latency;
   29eb6:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   29eba:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.supv_timeout   = evt->supv_timeout;
   29ebe:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   29ec2:	f8ad 302b 	strh.w	r3, [sp, #43]	; 0x2b
	enh.clock_accuracy = evt->clock_accuracy;
   29ec6:	7c4b      	ldrb	r3, [r1, #17]
   29ec8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   29ecc:	a805      	add	r0, sp, #20
   29ece:	3104      	adds	r1, #4
   29ed0:	f7ff ff7c 	bl	29dcc <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   29ed4:	2200      	movs	r2, #0
   29ed6:	4669      	mov	r1, sp
   29ed8:	f10d 001b 	add.w	r0, sp, #27
   29edc:	9200      	str	r2, [sp, #0]
   29ede:	f8ad 2004 	strh.w	r2, [sp, #4]
   29ee2:	f7ff ff6e 	bl	29dc2 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   29ee6:	a902      	add	r1, sp, #8
   29ee8:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   29eec:	9202      	str	r2, [sp, #8]
   29eee:	f8ad 200c 	strh.w	r2, [sp, #12]
   29ef2:	f7ff ff66 	bl	29dc2 <bt_addr_copy>
	enh_conn_complete(&enh);
   29ef6:	a804      	add	r0, sp, #16
   29ef8:	f7e0 fd42 	bl	a980 <enh_conn_complete>
}
   29efc:	b00d      	add	sp, #52	; 0x34
   29efe:	f85d fb04 	ldr.w	pc, [sp], #4

00029f02 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   29f02:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   29f04:	f04f 32ff 	mov.w	r2, #4294967295
{
   29f08:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   29f0a:	f04f 33ff 	mov.w	r3, #4294967295
   29f0e:	2100      	movs	r1, #0
{
   29f10:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   29f12:	f7de fecd 	bl	8cb0 <bt_buf_get_evt>
   29f16:	2102      	movs	r1, #2
   29f18:	4604      	mov	r4, r0
   29f1a:	3008      	adds	r0, #8
   29f1c:	f7f6 f840 	bl	1ffa0 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   29f20:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   29f22:	7045      	strb	r5, [r0, #1]

	return buf;
}
   29f24:	4620      	mov	r0, r4
   29f26:	bd70      	pop	{r4, r5, r6, pc}

00029f28 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   29f28:	3103      	adds	r1, #3
{
   29f2a:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   29f2c:	b2c9      	uxtb	r1, r1
{
   29f2e:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   29f30:	200e      	movs	r0, #14
   29f32:	f7ff ffe6 	bl	29f02 <bt_hci_evt_create>
   29f36:	2103      	movs	r1, #3
   29f38:	4604      	mov	r4, r0
   29f3a:	3008      	adds	r0, #8
   29f3c:	f7f6 f830 	bl	1ffa0 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   29f40:	2301      	movs	r3, #1
   29f42:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   29f44:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   29f48:	4620      	mov	r0, r4
   29f4a:	bd38      	pop	{r3, r4, r5, pc}

00029f4c <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   29f4c:	b570      	push	{r4, r5, r6, lr}
   29f4e:	4605      	mov	r5, r0
   29f50:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   29f52:	200f      	movs	r0, #15
   29f54:	2104      	movs	r1, #4
   29f56:	f7ff ffd4 	bl	29f02 <bt_hci_evt_create>
   29f5a:	2104      	movs	r1, #4
   29f5c:	4604      	mov	r4, r0
   29f5e:	3008      	adds	r0, #8
   29f60:	f7f6 f81e 	bl	1ffa0 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   29f64:	2301      	movs	r3, #1
	cs->status = status;
   29f66:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   29f68:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   29f6a:	8045      	strh	r5, [r0, #2]

	return buf;
}
   29f6c:	4620      	mov	r0, r4
   29f6e:	bd70      	pop	{r4, r5, r6, pc}

00029f70 <bt_conn_new.part.10>:
struct bt_conn *bt_conn_new(struct bt_conn *conns, size_t size)
   29f70:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   29f72:	2200      	movs	r2, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   29f74:	2401      	movs	r4, #1
   29f76:	428a      	cmp	r2, r1
   29f78:	d102      	bne.n	29f80 <bt_conn_new.part.10+0x10>
		return NULL;
   29f7a:	2300      	movs	r3, #0
}
   29f7c:	4618      	mov	r0, r3
   29f7e:	bd38      	pop	{r3, r4, r5, pc}
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   29f80:	4603      	mov	r3, r0
   29f82:	30b8      	adds	r0, #184	; 0xb8
   29f84:	f3bf 8f5b 	dmb	ish
   29f88:	e850 5f00 	ldrex	r5, [r0]
   29f8c:	2d00      	cmp	r5, #0
   29f8e:	d104      	bne.n	29f9a <bt_conn_new.part.10+0x2a>
   29f90:	e840 4c00 	strex	ip, r4, [r0]
   29f94:	f1bc 0f00 	cmp.w	ip, #0
   29f98:	d1f6      	bne.n	29f88 <bt_conn_new.part.10+0x18>
   29f9a:	f3bf 8f5b 	dmb	ish
   29f9e:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   29fa2:	d001      	beq.n	29fa8 <bt_conn_new.part.10+0x38>
	for (i = 0; i < size; i++) {
   29fa4:	3201      	adds	r2, #1
   29fa6:	e7e6      	b.n	29f76 <bt_conn_new.part.10+0x6>
	if (!conn) {
   29fa8:	2b00      	cmp	r3, #0
   29faa:	d0e7      	beq.n	29f7c <bt_conn_new.part.10+0xc>
__ssp_bos_icheck3(memset, void *, int)
   29fac:	4618      	mov	r0, r3
   29fae:	22b8      	movs	r2, #184	; 0xb8
   29fb0:	2100      	movs	r1, #0
   29fb2:	f004 f9b5 	bl	2e320 <memset>
   29fb6:	4603      	mov	r3, r0
   29fb8:	e7e0      	b.n	29f7c <bt_conn_new.part.10+0xc>

00029fba <tx_notify>:
{
   29fba:	b570      	push	{r4, r5, r6, lr}
   29fbc:	4604      	mov	r4, r0
	__asm__ volatile(
   29fbe:	f04f 0220 	mov.w	r2, #32
   29fc2:	f3ef 8311 	mrs	r3, BASEPRI
   29fc6:	f382 8811 	msr	BASEPRI, r2
   29fca:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   29fce:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   29fd0:	b920      	cbnz	r0, 29fdc <tx_notify+0x22>
	__asm__ volatile(
   29fd2:	f383 8811 	msr	BASEPRI, r3
   29fd6:	f3bf 8f6f 	isb	sy
}
   29fda:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29fdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   29fde:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   29fe0:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29fe2:	4288      	cmp	r0, r1
	list->tail = node;
   29fe4:	bf08      	it	eq
   29fe6:	6262      	streq	r2, [r4, #36]	; 0x24
   29fe8:	f383 8811 	msr	BASEPRI, r3
   29fec:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   29ff0:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   29ff4:	f7e0 fed2 	bl	ad9c <tx_free>
		cb(conn, user_data);
   29ff8:	4631      	mov	r1, r6
   29ffa:	4620      	mov	r0, r4
   29ffc:	47a8      	blx	r5
	while (1) {
   29ffe:	e7de      	b.n	29fbe <tx_notify+0x4>

0002a000 <tx_complete_work>:
	tx_notify(conn);
   2a000:	3828      	subs	r0, #40	; 0x28
   2a002:	f7ff bfda 	b.w	29fba <tx_notify>

0002a006 <bt_conn_ref.part.12>:
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
   2a006:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   2a008:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a00c:	f3bf 8f5b 	dmb	ish
   2a010:	6813      	ldr	r3, [r2, #0]
   2a012:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2a016:	b17b      	cbz	r3, 2a038 <bt_conn_ref.part.12+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a018:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2a01c:	1c59      	adds	r1, r3, #1
   2a01e:	e852 4f00 	ldrex	r4, [r2]
   2a022:	429c      	cmp	r4, r3
   2a024:	d104      	bne.n	2a030 <bt_conn_ref.part.12+0x2a>
   2a026:	e842 1c00 	strex	ip, r1, [r2]
   2a02a:	f1bc 0f00 	cmp.w	ip, #0
   2a02e:	d1f6      	bne.n	2a01e <bt_conn_ref.part.12+0x18>
   2a030:	f3bf 8f5b 	dmb	ish
   2a034:	d1ea      	bne.n	2a00c <bt_conn_ref.part.12+0x6>
}
   2a036:	bd10      	pop	{r4, pc}
			return NULL;
   2a038:	4618      	mov	r0, r3
   2a03a:	e7fc      	b.n	2a036 <bt_conn_ref.part.12+0x30>

0002a03c <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a03c:	f3bf 8f5b 	dmb	ish
   2a040:	6800      	ldr	r0, [r0, #0]
   2a042:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a046:	4108      	asrs	r0, r1
}
   2a048:	f000 0001 	and.w	r0, r0, #1
   2a04c:	4770      	bx	lr

0002a04e <bt_conn_get_security>:
}
   2a04e:	2001      	movs	r0, #1
   2a050:	4770      	bx	lr

0002a052 <bt_conn_reset_rx_state>:
{
   2a052:	b510      	push	{r4, lr}
   2a054:	4604      	mov	r4, r0
	if (!conn->rx) {
   2a056:	6900      	ldr	r0, [r0, #16]
   2a058:	b118      	cbz	r0, 2a062 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2a05a:	f7f5 fe51 	bl	1fd00 <net_buf_unref>
	conn->rx = NULL;
   2a05e:	2300      	movs	r3, #0
   2a060:	6123      	str	r3, [r4, #16]
}
   2a062:	bd10      	pop	{r4, pc}

0002a064 <bt_conn_is_peer_addr_le>:
{
   2a064:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2a066:	7a03      	ldrb	r3, [r0, #8]
   2a068:	428b      	cmp	r3, r1
{
   2a06a:	4604      	mov	r4, r0
   2a06c:	4615      	mov	r5, r2
	if (id != conn->id) {
   2a06e:	d115      	bne.n	2a09c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2a070:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2a074:	2207      	movs	r2, #7
   2a076:	4628      	mov	r0, r5
   2a078:	f004 f909 	bl	2e28e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2a07c:	b180      	cbz	r0, 2a0a0 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   2a07e:	78e3      	ldrb	r3, [r4, #3]
   2a080:	2207      	movs	r2, #7
   2a082:	b943      	cbnz	r3, 2a096 <bt_conn_is_peer_addr_le+0x32>
   2a084:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2a088:	4628      	mov	r0, r5
   2a08a:	f004 f900 	bl	2e28e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2a08e:	fab0 f080 	clz	r0, r0
   2a092:	0940      	lsrs	r0, r0, #5
}
   2a094:	bd38      	pop	{r3, r4, r5, pc}
   2a096:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2a09a:	e7f5      	b.n	2a088 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2a09c:	2000      	movs	r0, #0
   2a09e:	e7f9      	b.n	2a094 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2a0a0:	2001      	movs	r0, #1
   2a0a2:	e7f7      	b.n	2a094 <bt_conn_is_peer_addr_le+0x30>

0002a0a4 <bt_conn_ref>:
{
   2a0a4:	f7ff bfaf 	b.w	2a006 <bt_conn_ref.part.12>

0002a0a8 <conn_lookup_handle>:
{
   2a0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a0ac:	4606      	mov	r6, r0
   2a0ae:	460d      	mov	r5, r1
   2a0b0:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   2a0b2:	2400      	movs	r4, #0
   2a0b4:	f04f 08c0 	mov.w	r8, #192	; 0xc0
   2a0b8:	f04f 0901 	mov.w	r9, #1
   2a0bc:	42ac      	cmp	r4, r5
   2a0be:	d103      	bne.n	2a0c8 <conn_lookup_handle+0x20>
	return NULL;
   2a0c0:	2300      	movs	r3, #0
}
   2a0c2:	4618      	mov	r0, r3
   2a0c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
   2a0c8:	fb08 6004 	mla	r0, r8, r4, r6
   2a0cc:	f7ff ff9b 	bl	2a006 <bt_conn_ref.part.12>
		if (!conn) {
   2a0d0:	4603      	mov	r3, r0
   2a0d2:	b160      	cbz	r0, 2a0ee <conn_lookup_handle+0x46>
		if (!bt_conn_is_handle_valid(conn)) {
   2a0d4:	7a82      	ldrb	r2, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2a0d6:	2a08      	cmp	r2, #8
   2a0d8:	d80b      	bhi.n	2a0f2 <conn_lookup_handle+0x4a>
   2a0da:	fa09 f202 	lsl.w	r2, r9, r2
   2a0de:	f412 7fc1 	tst.w	r2, #386	; 0x182
   2a0e2:	d006      	beq.n	2a0f2 <conn_lookup_handle+0x4a>
		if (conn->handle != handle) {
   2a0e4:	8802      	ldrh	r2, [r0, #0]
   2a0e6:	42ba      	cmp	r2, r7
   2a0e8:	d0eb      	beq.n	2a0c2 <conn_lookup_handle+0x1a>
			bt_conn_unref(conn);
   2a0ea:	f7e1 f8f7 	bl	b2dc <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2a0ee:	3401      	adds	r4, #1
   2a0f0:	e7e4      	b.n	2a0bc <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   2a0f2:	4618      	mov	r0, r3
   2a0f4:	e7f9      	b.n	2a0ea <conn_lookup_handle+0x42>

0002a0f6 <bt_conn_lookup_addr_le>:
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2a0f6:	f7e1 b9fb 	b.w	b4f0 <bt_conn_lookup_addr_le.part.13>

0002a0fa <bt_conn_le_conn_update>:
{
   2a0fa:	b570      	push	{r4, r5, r6, lr}
   2a0fc:	4606      	mov	r6, r0
   2a0fe:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2a100:	f242 0013 	movw	r0, #8211	; 0x2013
   2a104:	210e      	movs	r1, #14
   2a106:	f7df fa8b 	bl	9620 <bt_hci_cmd_create>
	if (!buf) {
   2a10a:	4605      	mov	r5, r0
   2a10c:	b1c8      	cbz	r0, 2a142 <bt_conn_le_conn_update+0x48>
   2a10e:	210e      	movs	r1, #14
   2a110:	3008      	adds	r0, #8
   2a112:	f7f5 ff45 	bl	1ffa0 <net_buf_simple_add>
   2a116:	220e      	movs	r2, #14
   2a118:	2100      	movs	r1, #0
   2a11a:	f004 f901 	bl	2e320 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2a11e:	8832      	ldrh	r2, [r6, #0]
   2a120:	8002      	strh	r2, [r0, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2a122:	8822      	ldrh	r2, [r4, #0]
   2a124:	8042      	strh	r2, [r0, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2a126:	8862      	ldrh	r2, [r4, #2]
   2a128:	8082      	strh	r2, [r0, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2a12a:	88a2      	ldrh	r2, [r4, #4]
   2a12c:	80c2      	strh	r2, [r0, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2a12e:	88e2      	ldrh	r2, [r4, #6]
   2a130:	8102      	strh	r2, [r0, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2a132:	4629      	mov	r1, r5
   2a134:	2200      	movs	r2, #0
   2a136:	f242 0013 	movw	r0, #8211	; 0x2013
}
   2a13a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2a13e:	f7df bbad 	b.w	989c <bt_hci_cmd_send_sync>
}
   2a142:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a146:	bd70      	pop	{r4, r5, r6, pc}

0002a148 <l2cap_connected>:
}
   2a148:	4770      	bx	lr

0002a14a <l2cap_disconnected>:
   2a14a:	4770      	bx	lr

0002a14c <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a14c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2a14e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a150:	b17b      	cbz	r3, 2a172 <bt_l2cap_chan_remove+0x26>
   2a152:	3b08      	subs	r3, #8
   2a154:	2200      	movs	r2, #0
   2a156:	b163      	cbz	r3, 2a172 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   2a158:	428b      	cmp	r3, r1
   2a15a:	f103 0408 	add.w	r4, r3, #8
   2a15e:	d10f      	bne.n	2a180 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   2a160:	688b      	ldr	r3, [r1, #8]
   2a162:	b93a      	cbnz	r2, 2a174 <bt_l2cap_chan_remove+0x28>
   2a164:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   2a166:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   2a168:	4294      	cmp	r4, r2
   2a16a:	d100      	bne.n	2a16e <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   2a16c:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   2a16e:	2300      	movs	r3, #0
   2a170:	608b      	str	r3, [r1, #8]
}
   2a172:	bd10      	pop	{r4, pc}
   2a174:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a176:	6d43      	ldr	r3, [r0, #84]	; 0x54
   2a178:	429c      	cmp	r4, r3
	list->tail = node;
   2a17a:	bf08      	it	eq
   2a17c:	6542      	streq	r2, [r0, #84]	; 0x54
   2a17e:	e7f6      	b.n	2a16e <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a180:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a182:	2b00      	cmp	r3, #0
   2a184:	d0f5      	beq.n	2a172 <bt_l2cap_chan_remove+0x26>
   2a186:	3b08      	subs	r3, #8
   2a188:	4622      	mov	r2, r4
   2a18a:	e7e4      	b.n	2a156 <bt_l2cap_chan_remove+0xa>

0002a18c <bt_l2cap_chan_del>:
{
   2a18c:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2a18e:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2a192:	4604      	mov	r4, r0
	if (!chan->conn) {
   2a194:	b123      	cbz	r3, 2a1a0 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2a196:	686b      	ldr	r3, [r5, #4]
   2a198:	b103      	cbz	r3, 2a19c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2a19a:	4798      	blx	r3
	chan->conn = NULL;
   2a19c:	2300      	movs	r3, #0
   2a19e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2a1a0:	68e3      	ldr	r3, [r4, #12]
   2a1a2:	b10b      	cbz	r3, 2a1a8 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2a1a4:	4620      	mov	r0, r4
   2a1a6:	4798      	blx	r3
	if (ops->released) {
   2a1a8:	69eb      	ldr	r3, [r5, #28]
   2a1aa:	b11b      	cbz	r3, 2a1b4 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2a1ac:	4620      	mov	r0, r4
}
   2a1ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2a1b2:	4718      	bx	r3
}
   2a1b4:	bd70      	pop	{r4, r5, r6, pc}

0002a1b6 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a1b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2a1b8:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a1ba:	b173      	cbz	r3, 2a1da <bt_l2cap_disconnected+0x24>
   2a1bc:	f1b3 0008 	subs.w	r0, r3, #8
   2a1c0:	d00b      	beq.n	2a1da <bt_l2cap_disconnected+0x24>
   2a1c2:	681c      	ldr	r4, [r3, #0]
   2a1c4:	b104      	cbz	r4, 2a1c8 <bt_l2cap_disconnected+0x12>
   2a1c6:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2a1c8:	f7ff ffe0 	bl	2a18c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a1cc:	b12c      	cbz	r4, 2a1da <bt_l2cap_disconnected+0x24>
   2a1ce:	68a3      	ldr	r3, [r4, #8]
   2a1d0:	b103      	cbz	r3, 2a1d4 <bt_l2cap_disconnected+0x1e>
   2a1d2:	3b08      	subs	r3, #8
{
   2a1d4:	4620      	mov	r0, r4
   2a1d6:	461c      	mov	r4, r3
   2a1d8:	e7f6      	b.n	2a1c8 <bt_l2cap_disconnected+0x12>
}
   2a1da:	bd10      	pop	{r4, pc}

0002a1dc <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2a1dc:	3104      	adds	r1, #4
   2a1de:	f7e1 baa7 	b.w	b730 <bt_conn_create_pdu_timeout>

0002a1e2 <bt_l2cap_send_cb>:
{
   2a1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a1e6:	4614      	mov	r4, r2
   2a1e8:	4605      	mov	r5, r0
   2a1ea:	4688      	mov	r8, r1
	return net_buf_simple_push(&buf->b, len);
   2a1ec:	f102 0008 	add.w	r0, r2, #8
   2a1f0:	2104      	movs	r1, #4
   2a1f2:	461e      	mov	r6, r3
   2a1f4:	9f06      	ldr	r7, [sp, #24]
   2a1f6:	f7f5 fe7b 	bl	1fef0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2a1fa:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2a1fc:	f8a0 8002 	strh.w	r8, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2a200:	3904      	subs	r1, #4
   2a202:	8001      	strh	r1, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2a204:	463b      	mov	r3, r7
   2a206:	4632      	mov	r2, r6
   2a208:	4621      	mov	r1, r4
   2a20a:	4628      	mov	r0, r5
}
   2a20c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2a210:	f7e0 bf94 	b.w	b13c <bt_conn_send_cb>

0002a214 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a214:	6d00      	ldr	r0, [r0, #80]	; 0x50
   2a216:	b108      	cbz	r0, 2a21c <bt_l2cap_le_lookup_tx_cid+0x8>
   2a218:	3808      	subs	r0, #8
   2a21a:	b900      	cbnz	r0, 2a21e <bt_l2cap_le_lookup_tx_cid+0xa>
}
   2a21c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2a21e:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   2a222:	428b      	cmp	r3, r1
   2a224:	d0fa      	beq.n	2a21c <bt_l2cap_le_lookup_tx_cid+0x8>
   2a226:	6880      	ldr	r0, [r0, #8]
   2a228:	e7f5      	b.n	2a216 <bt_l2cap_le_lookup_tx_cid+0x2>

0002a22a <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a22a:	6d00      	ldr	r0, [r0, #80]	; 0x50
   2a22c:	b108      	cbz	r0, 2a232 <bt_l2cap_le_lookup_rx_cid+0x8>
   2a22e:	3808      	subs	r0, #8
   2a230:	b900      	cbnz	r0, 2a234 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   2a232:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2a234:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   2a238:	428b      	cmp	r3, r1
   2a23a:	d0fa      	beq.n	2a232 <bt_l2cap_le_lookup_rx_cid+0x8>
   2a23c:	6880      	ldr	r0, [r0, #8]
   2a23e:	e7f5      	b.n	2a22c <bt_l2cap_le_lookup_rx_cid+0x2>

0002a240 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2a240:	4770      	bx	lr

0002a242 <sys_slist_get>:
Z_GENLIST_IS_EMPTY(slist)
   2a242:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2a244:	b12b      	cbz	r3, 2a252 <sys_slist_get+0x10>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a246:	6841      	ldr	r1, [r0, #4]
   2a248:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   2a24a:	6002      	str	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a24c:	428b      	cmp	r3, r1
	list->tail = node;
   2a24e:	bf08      	it	eq
   2a250:	6042      	streq	r2, [r0, #4]
Z_GENLIST_GET(slist, snode)
   2a252:	4618      	mov	r0, r3
   2a254:	4770      	bx	lr

0002a256 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a256:	6803      	ldr	r3, [r0, #0]
   2a258:	2200      	movs	r2, #0
   2a25a:	b90b      	cbnz	r3, 2a260 <sys_slist_find_and_remove+0xa>
   2a25c:	4618      	mov	r0, r3
   2a25e:	4770      	bx	lr
   2a260:	428b      	cmp	r3, r1
   2a262:	d110      	bne.n	2a286 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2a264:	680b      	ldr	r3, [r1, #0]
   2a266:	b942      	cbnz	r2, 2a27a <sys_slist_find_and_remove+0x24>
   2a268:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2a26a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a26c:	4291      	cmp	r1, r2
   2a26e:	d100      	bne.n	2a272 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2a270:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2a272:	2300      	movs	r3, #0
   2a274:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a276:	2001      	movs	r0, #1
   2a278:	4770      	bx	lr
	parent->next = child;
   2a27a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a27c:	6843      	ldr	r3, [r0, #4]
   2a27e:	4299      	cmp	r1, r3
	list->tail = node;
   2a280:	bf08      	it	eq
   2a282:	6042      	streq	r2, [r0, #4]
   2a284:	e7f5      	b.n	2a272 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a286:	461a      	mov	r2, r3
   2a288:	681b      	ldr	r3, [r3, #0]
   2a28a:	e7e6      	b.n	2a25a <sys_slist_find_and_remove+0x4>

0002a28c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2a28c:	4603      	mov	r3, r0
	size_t bytes = 0;
   2a28e:	2000      	movs	r0, #0

	while (buf) {
   2a290:	b903      	cbnz	r3, 2a294 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2a292:	4770      	bx	lr
		bytes += buf->len;
   2a294:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2a296:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2a298:	4410      	add	r0, r2
		buf = buf->frags;
   2a29a:	e7f9      	b.n	2a290 <net_buf_frags_len+0x4>

0002a29c <att_sent>:
	if (chan->ops->sent) {
   2a29c:	684b      	ldr	r3, [r1, #4]
   2a29e:	695b      	ldr	r3, [r3, #20]
   2a2a0:	b10b      	cbz	r3, 2a2a6 <att_sent+0xa>
		chan->ops->sent(chan);
   2a2a2:	4608      	mov	r0, r1
   2a2a4:	4718      	bx	r3
}
   2a2a6:	4770      	bx	lr

0002a2a8 <attr_read_type_cb>:
{
   2a2a8:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2a2aa:	68d4      	ldr	r4, [r2, #12]
   2a2ac:	7823      	ldrb	r3, [r4, #0]
   2a2ae:	3102      	adds	r1, #2
   2a2b0:	b913      	cbnz	r3, 2a2b8 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2a2b2:	7021      	strb	r1, [r4, #0]
	return true;
   2a2b4:	2001      	movs	r0, #1
   2a2b6:	e006      	b.n	2a2c6 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2a2b8:	428b      	cmp	r3, r1
   2a2ba:	d0fb      	beq.n	2a2b4 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2a2bc:	8983      	ldrh	r3, [r0, #12]
   2a2be:	3b02      	subs	r3, #2
   2a2c0:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2a2c2:	2000      	movs	r0, #0
   2a2c4:	6110      	str	r0, [r2, #16]
}
   2a2c6:	bd10      	pop	{r4, pc}

0002a2c8 <att_prepare_write_req>:
}
   2a2c8:	2006      	movs	r0, #6
   2a2ca:	4770      	bx	lr

0002a2cc <att_op_get_type>:
	switch (op) {
   2a2cc:	280e      	cmp	r0, #14
   2a2ce:	d00a      	beq.n	2a2e6 <att_op_get_type+0x1a>
   2a2d0:	d81e      	bhi.n	2a310 <att_op_get_type+0x44>
   2a2d2:	2807      	cmp	r0, #7
   2a2d4:	d015      	beq.n	2a302 <att_op_get_type+0x36>
   2a2d6:	d80d      	bhi.n	2a2f4 <att_op_get_type+0x28>
   2a2d8:	2803      	cmp	r0, #3
   2a2da:	d012      	beq.n	2a302 <att_op_get_type+0x36>
   2a2dc:	d805      	bhi.n	2a2ea <att_op_get_type+0x1e>
   2a2de:	2801      	cmp	r0, #1
   2a2e0:	d00f      	beq.n	2a302 <att_op_get_type+0x36>
   2a2e2:	2802      	cmp	r0, #2
   2a2e4:	d12b      	bne.n	2a33e <att_op_get_type+0x72>
		return ATT_REQUEST;
   2a2e6:	2001      	movs	r0, #1
   2a2e8:	4770      	bx	lr
	switch (op) {
   2a2ea:	2805      	cmp	r0, #5
		return ATT_REQUEST;
   2a2ec:	bf0c      	ite	eq
   2a2ee:	2002      	moveq	r0, #2
   2a2f0:	2001      	movne	r0, #1
   2a2f2:	4770      	bx	lr
	switch (op) {
   2a2f4:	280a      	cmp	r0, #10
   2a2f6:	d0f6      	beq.n	2a2e6 <att_op_get_type+0x1a>
   2a2f8:	d805      	bhi.n	2a306 <att_op_get_type+0x3a>
   2a2fa:	2808      	cmp	r0, #8
   2a2fc:	d0f3      	beq.n	2a2e6 <att_op_get_type+0x1a>
   2a2fe:	2809      	cmp	r0, #9
   2a300:	d11d      	bne.n	2a33e <att_op_get_type+0x72>
		return ATT_RESPONSE;
   2a302:	2002      	movs	r0, #2
   2a304:	4770      	bx	lr
	switch (op) {
   2a306:	280c      	cmp	r0, #12
		return ATT_RESPONSE;
   2a308:	bf0c      	ite	eq
   2a30a:	2001      	moveq	r0, #1
   2a30c:	2002      	movne	r0, #2
   2a30e:	4770      	bx	lr
	switch (op) {
   2a310:	2817      	cmp	r0, #23
   2a312:	d0f6      	beq.n	2a302 <att_op_get_type+0x36>
   2a314:	d80b      	bhi.n	2a32e <att_op_get_type+0x62>
   2a316:	2811      	cmp	r0, #17
   2a318:	d0f3      	beq.n	2a302 <att_op_get_type+0x36>
   2a31a:	d803      	bhi.n	2a324 <att_op_get_type+0x58>
   2a31c:	280f      	cmp	r0, #15
   2a31e:	d0f0      	beq.n	2a302 <att_op_get_type+0x36>
   2a320:	2810      	cmp	r0, #16
   2a322:	e7df      	b.n	2a2e4 <att_op_get_type+0x18>
   2a324:	2813      	cmp	r0, #19
   2a326:	d0ec      	beq.n	2a302 <att_op_get_type+0x36>
   2a328:	d3dd      	bcc.n	2a2e6 <att_op_get_type+0x1a>
   2a32a:	2816      	cmp	r0, #22
   2a32c:	e7da      	b.n	2a2e4 <att_op_get_type+0x18>
   2a32e:	281d      	cmp	r0, #29
   2a330:	d013      	beq.n	2a35a <att_op_get_type+0x8e>
   2a332:	d80a      	bhi.n	2a34a <att_op_get_type+0x7e>
   2a334:	2819      	cmp	r0, #25
   2a336:	d0e4      	beq.n	2a302 <att_op_get_type+0x36>
   2a338:	d3d5      	bcc.n	2a2e6 <att_op_get_type+0x1a>
   2a33a:	281b      	cmp	r0, #27
   2a33c:	d00f      	beq.n	2a35e <att_op_get_type+0x92>
	if (op & ATT_CMD_MASK) {
   2a33e:	f010 0f40 	tst.w	r0, #64	; 0x40
		return ATT_COMMAND;
   2a342:	bf0c      	ite	eq
   2a344:	2006      	moveq	r0, #6
   2a346:	2000      	movne	r0, #0
   2a348:	4770      	bx	lr
	switch (op) {
   2a34a:	2852      	cmp	r0, #82	; 0x52
   2a34c:	d009      	beq.n	2a362 <att_op_get_type+0x96>
   2a34e:	28d2      	cmp	r0, #210	; 0xd2
   2a350:	d007      	beq.n	2a362 <att_op_get_type+0x96>
   2a352:	281e      	cmp	r0, #30
   2a354:	d1f3      	bne.n	2a33e <att_op_get_type+0x72>
		return ATT_CONFIRMATION;
   2a356:	2004      	movs	r0, #4
}
   2a358:	4770      	bx	lr
		return ATT_INDICATION;
   2a35a:	2005      	movs	r0, #5
   2a35c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2a35e:	2003      	movs	r0, #3
   2a360:	4770      	bx	lr
		return ATT_COMMAND;
   2a362:	2000      	movs	r0, #0
   2a364:	4770      	bx	lr

0002a366 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a366:	f3bf 8f5b 	dmb	ish
   2a36a:	6800      	ldr	r0, [r0, #0]
   2a36c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a370:	4108      	asrs	r0, r1
}
   2a372:	f000 0001 	and.w	r0, r0, #1
   2a376:	4770      	bx	lr

0002a378 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2a378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2a37a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2a37e:	2300      	movs	r3, #0
   2a380:	9300      	str	r3, [sp, #0]
   2a382:	461a      	mov	r2, r3
   2a384:	f7e3 fa66 	bl	d854 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2a388:	b005      	add	sp, #20
   2a38a:	f85d fb04 	ldr.w	pc, [sp], #4

0002a38e <att_chan_read>:
{
   2a38e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a392:	4680      	mov	r8, r0
   2a394:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2a396:	4610      	mov	r0, r2
{
   2a398:	469a      	mov	sl, r3
   2a39a:	468b      	mov	fp, r1
   2a39c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2a39e:	f7ff ff75 	bl	2a28c <net_buf_frags_len>
   2a3a2:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   2a3a6:	4283      	cmp	r3, r0
   2a3a8:	d97a      	bls.n	2a4a0 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2a3aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2a3ae:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2a3b0:	4630      	mov	r0, r6
   2a3b2:	f7f5 fd01 	bl	1fdb8 <net_buf_frag_last>
	size_t len, total = 0;
   2a3b6:	f04f 0900 	mov.w	r9, #0
	frag = net_buf_frag_last(buf);
   2a3ba:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2a3bc:	4630      	mov	r0, r6
   2a3be:	f7ff ff65 	bl	2a28c <net_buf_frags_len>
   2a3c2:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   2a3c6:	f105 0708 	add.w	r7, r5, #8
   2a3ca:	1a24      	subs	r4, r4, r0
   2a3cc:	4638      	mov	r0, r7
   2a3ce:	f003 f8ed 	bl	2d5ac <net_buf_simple_tailroom>
   2a3d2:	4284      	cmp	r4, r0
   2a3d4:	d211      	bcs.n	2a3fa <att_chan_read+0x6c>
   2a3d6:	4630      	mov	r0, r6
   2a3d8:	f7ff ff58 	bl	2a28c <net_buf_frags_len>
   2a3dc:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   2a3e0:	1a24      	subs	r4, r4, r0
		if (!len) {
   2a3e2:	bb34      	cbnz	r4, 2a432 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2a3e4:	79b0      	ldrb	r0, [r6, #6]
   2a3e6:	f7f5 fa77 	bl	1f8d8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2a3ea:	2200      	movs	r2, #0
   2a3ec:	2300      	movs	r3, #0
   2a3ee:	f003 f871 	bl	2d4d4 <net_buf_alloc_fixed>
			if (!frag) {
   2a3f2:	4605      	mov	r5, r0
   2a3f4:	b930      	cbnz	r0, 2a404 <att_chan_read+0x76>
	return total;
   2a3f6:	464f      	mov	r7, r9
   2a3f8:	e02c      	b.n	2a454 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2a3fa:	4638      	mov	r0, r7
   2a3fc:	f003 f8d6 	bl	2d5ac <net_buf_simple_tailroom>
   2a400:	4604      	mov	r4, r0
   2a402:	e7ee      	b.n	2a3e2 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2a404:	4601      	mov	r1, r0
   2a406:	4630      	mov	r0, r6
   2a408:	f7f5 fd16 	bl	1fe38 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2a40c:	4630      	mov	r0, r6
   2a40e:	f7ff ff3d 	bl	2a28c <net_buf_frags_len>
   2a412:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   2a416:	f105 0708 	add.w	r7, r5, #8
   2a41a:	1a24      	subs	r4, r4, r0
   2a41c:	4638      	mov	r0, r7
   2a41e:	f003 f8c5 	bl	2d5ac <net_buf_simple_tailroom>
   2a422:	4284      	cmp	r4, r0
   2a424:	d21a      	bcs.n	2a45c <att_chan_read+0xce>
   2a426:	4630      	mov	r0, r6
   2a428:	f7ff ff30 	bl	2a28c <net_buf_frags_len>
   2a42c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   2a430:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2a432:	68a9      	ldr	r1, [r5, #8]
   2a434:	89aa      	ldrh	r2, [r5, #12]
   2a436:	f8db 7004 	ldr.w	r7, [fp, #4]
   2a43a:	f8cd a000 	str.w	sl, [sp]
   2a43e:	440a      	add	r2, r1
   2a440:	b2a3      	uxth	r3, r4
   2a442:	4659      	mov	r1, fp
   2a444:	9803      	ldr	r0, [sp, #12]
   2a446:	47b8      	blx	r7
		if (read < 0) {
   2a448:	1e07      	subs	r7, r0, #0
   2a44a:	da0c      	bge.n	2a466 <att_chan_read+0xd8>
				return total;
   2a44c:	f1b9 0f00 	cmp.w	r9, #0
   2a450:	bf18      	it	ne
   2a452:	464f      	movne	r7, r9
}
   2a454:	4638      	mov	r0, r7
   2a456:	b005      	add	sp, #20
   2a458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a45c:	4638      	mov	r0, r7
   2a45e:	f003 f8a5 	bl	2d5ac <net_buf_simple_tailroom>
   2a462:	4604      	mov	r4, r0
   2a464:	e7e5      	b.n	2a432 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2a466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a468:	b993      	cbnz	r3, 2a490 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2a46a:	4639      	mov	r1, r7
   2a46c:	f105 0008 	add.w	r0, r5, #8
   2a470:	f7f5 fd96 	bl	1ffa0 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2a474:	4630      	mov	r0, r6
   2a476:	f7ff ff09 	bl	2a28c <net_buf_frags_len>
   2a47a:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   2a47e:	44ba      	add	sl, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2a480:	4283      	cmp	r3, r0
		total += read;
   2a482:	44b9      	add	r9, r7
		offset += read;
   2a484:	fa1f fa8a 	uxth.w	sl, sl
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2a488:	d9b5      	bls.n	2a3f6 <att_chan_read+0x68>
   2a48a:	42a7      	cmp	r7, r4
   2a48c:	d096      	beq.n	2a3bc <att_chan_read+0x2e>
   2a48e:	e7b2      	b.n	2a3f6 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2a490:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2a492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a494:	4639      	mov	r1, r7
   2a496:	4628      	mov	r0, r5
   2a498:	4798      	blx	r3
   2a49a:	2800      	cmp	r0, #0
   2a49c:	d1e5      	bne.n	2a46a <att_chan_read+0xdc>
   2a49e:	e7aa      	b.n	2a3f6 <att_chan_read+0x68>
		return 0;
   2a4a0:	2700      	movs	r7, #0
   2a4a2:	e7d7      	b.n	2a454 <att_chan_read+0xc6>

0002a4a4 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2a4a4:	68d0      	ldr	r0, [r2, #12]
   2a4a6:	7803      	ldrb	r3, [r0, #0]
   2a4a8:	3104      	adds	r1, #4
   2a4aa:	b913      	cbnz	r3, 2a4b2 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2a4ac:	7001      	strb	r1, [r0, #0]
	return true;
   2a4ae:	2001      	movs	r0, #1
}
   2a4b0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2a4b2:	428b      	cmp	r3, r1
   2a4b4:	d0fb      	beq.n	2a4ae <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2a4b6:	6891      	ldr	r1, [r2, #8]
   2a4b8:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2a4ba:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2a4bc:	3b04      	subs	r3, #4
   2a4be:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2a4c0:	6110      	str	r0, [r2, #16]
		return false;
   2a4c2:	4770      	bx	lr

0002a4c4 <process_queue>:
{
   2a4c4:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2a4c6:	2200      	movs	r2, #0
{
   2a4c8:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2a4ca:	2300      	movs	r3, #0
   2a4cc:	4608      	mov	r0, r1
{
   2a4ce:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2a4d0:	f7f5 fafc 	bl	1facc <net_buf_get>
	if (buf) {
   2a4d4:	4605      	mov	r5, r0
   2a4d6:	b160      	cbz	r0, 2a4f2 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2a4d8:	4601      	mov	r1, r0
   2a4da:	2200      	movs	r2, #0
   2a4dc:	4620      	mov	r0, r4
   2a4de:	f7e1 fd0f 	bl	bf00 <chan_send>
		if (err) {
   2a4e2:	4604      	mov	r4, r0
   2a4e4:	b118      	cbz	r0, 2a4ee <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2a4e6:	4629      	mov	r1, r5
   2a4e8:	4630      	mov	r0, r6
   2a4ea:	f003 fd5c 	bl	2dfa6 <k_queue_prepend>
}
   2a4ee:	4620      	mov	r0, r4
   2a4f0:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2a4f2:	f06f 0401 	mvn.w	r4, #1
   2a4f6:	e7fa      	b.n	2a4ee <process_queue+0x2a>

0002a4f8 <find_info_cb>:
{
   2a4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2a4fa:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2a4fc:	6816      	ldr	r6, [r2, #0]
{
   2a4fe:	4605      	mov	r5, r0
   2a500:	460f      	mov	r7, r1
   2a502:	4614      	mov	r4, r2
	if (!data->rsp) {
   2a504:	b963      	cbnz	r3, 2a520 <find_info_cb+0x28>
   2a506:	6850      	ldr	r0, [r2, #4]
   2a508:	2101      	movs	r1, #1
   2a50a:	3008      	adds	r0, #8
   2a50c:	f7f5 fd48 	bl	1ffa0 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2a510:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2a512:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2a514:	781b      	ldrb	r3, [r3, #0]
   2a516:	2b00      	cmp	r3, #0
   2a518:	bf0c      	ite	eq
   2a51a:	2301      	moveq	r3, #1
   2a51c:	2302      	movne	r3, #2
   2a51e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2a520:	68a3      	ldr	r3, [r4, #8]
   2a522:	781b      	ldrb	r3, [r3, #0]
   2a524:	2b01      	cmp	r3, #1
   2a526:	d003      	beq.n	2a530 <find_info_cb+0x38>
   2a528:	2b02      	cmp	r3, #2
   2a52a:	d019      	beq.n	2a560 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2a52c:	2000      	movs	r0, #0
   2a52e:	e016      	b.n	2a55e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2a530:	682b      	ldr	r3, [r5, #0]
   2a532:	781b      	ldrb	r3, [r3, #0]
   2a534:	2b00      	cmp	r3, #0
   2a536:	d1f9      	bne.n	2a52c <find_info_cb+0x34>
   2a538:	6860      	ldr	r0, [r4, #4]
   2a53a:	2104      	movs	r1, #4
   2a53c:	3008      	adds	r0, #8
   2a53e:	f7f5 fd2f 	bl	1ffa0 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2a542:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2a544:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2a546:	885b      	ldrh	r3, [r3, #2]
   2a548:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2a54a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2a54c:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2a54e:	899b      	ldrh	r3, [r3, #12]
   2a550:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   2a554:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2a556:	2804      	cmp	r0, #4
   2a558:	bf94      	ite	ls
   2a55a:	2000      	movls	r0, #0
   2a55c:	2001      	movhi	r0, #1
}
   2a55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2a560:	682b      	ldr	r3, [r5, #0]
   2a562:	781b      	ldrb	r3, [r3, #0]
   2a564:	2b02      	cmp	r3, #2
   2a566:	d1e1      	bne.n	2a52c <find_info_cb+0x34>
   2a568:	6860      	ldr	r0, [r4, #4]
   2a56a:	2112      	movs	r1, #18
   2a56c:	3008      	adds	r0, #8
   2a56e:	f7f5 fd17 	bl	1ffa0 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a572:	682b      	ldr	r3, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2a574:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2a576:	f820 7b02 	strh.w	r7, [r0], #2
   2a57a:	1c5a      	adds	r2, r3, #1
   2a57c:	3311      	adds	r3, #17
   2a57e:	f852 1b04 	ldr.w	r1, [r2], #4
   2a582:	f840 1b04 	str.w	r1, [r0], #4
   2a586:	429a      	cmp	r2, r3
   2a588:	d1f9      	bne.n	2a57e <find_info_cb+0x86>
		if (chan->chan.tx.mtu - data->buf->len >
   2a58a:	6863      	ldr	r3, [r4, #4]
   2a58c:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   2a590:	899b      	ldrh	r3, [r3, #12]
   2a592:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2a594:	2812      	cmp	r0, #18
   2a596:	e7df      	b.n	2a558 <find_info_cb+0x60>

0002a598 <att_exec_write_req>:
   2a598:	2006      	movs	r0, #6
   2a59a:	4770      	bx	lr

0002a59c <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a59c:	30c8      	adds	r0, #200	; 0xc8
   2a59e:	f3bf 8f5b 	dmb	ish
   2a5a2:	e850 3f00 	ldrex	r3, [r0]
   2a5a6:	f023 0301 	bic.w	r3, r3, #1
   2a5aa:	e840 3200 	strex	r2, r3, [r0]
   2a5ae:	2a00      	cmp	r2, #0
   2a5b0:	d1f7      	bne.n	2a5a2 <chan_rsp_sent+0x6>
   2a5b2:	f3bf 8f5b 	dmb	ish
}
   2a5b6:	4770      	bx	lr

0002a5b8 <chan_cfm_sent>:
   2a5b8:	30c8      	adds	r0, #200	; 0xc8
   2a5ba:	f3bf 8f5b 	dmb	ish
   2a5be:	e850 3f00 	ldrex	r3, [r0]
   2a5c2:	f023 0302 	bic.w	r3, r3, #2
   2a5c6:	e840 3200 	strex	r2, r3, [r0]
   2a5ca:	2a00      	cmp	r2, #0
   2a5cc:	d1f7      	bne.n	2a5be <chan_cfm_sent+0x6>
   2a5ce:	f3bf 8f5b 	dmb	ish
}
   2a5d2:	4770      	bx	lr

0002a5d4 <chan_req_send>:
{
   2a5d4:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2a5d6:	690e      	ldr	r6, [r1, #16]
{
   2a5d8:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2a5da:	4630      	mov	r0, r6
{
   2a5dc:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2a5de:	f7ff fe55 	bl	2a28c <net_buf_frags_len>
   2a5e2:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   2a5e6:	4283      	cmp	r3, r0
   2a5e8:	d317      	bcc.n	2a61a <chan_req_send+0x46>
	chan->req = req;
   2a5ea:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   2a5ee:	f106 0008 	add.w	r0, r6, #8
   2a5f2:	f002 ffd7 	bl	2d5a4 <net_buf_simple_headroom>
	state->len = buf->len;
   2a5f6:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   2a5f8:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   2a5fa:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   2a5fc:	6920      	ldr	r0, [r4, #16]
   2a5fe:	f7f5 fbc3 	bl	1fd88 <net_buf_ref>
   2a602:	2200      	movs	r2, #0
   2a604:	4601      	mov	r1, r0
   2a606:	4628      	mov	r0, r5
   2a608:	f7e1 fc7a 	bl	bf00 <chan_send>
	if (err) {
   2a60c:	4605      	mov	r5, r0
   2a60e:	b110      	cbz	r0, 2a616 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   2a610:	6920      	ldr	r0, [r4, #16]
   2a612:	f7f5 fb75 	bl	1fd00 <net_buf_unref>
}
   2a616:	4628      	mov	r0, r5
   2a618:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2a61a:	f06f 0579 	mvn.w	r5, #121	; 0x79
   2a61e:	e7fa      	b.n	2a616 <chan_req_send+0x42>

0002a620 <bt_att_status>:
{
   2a620:	b538      	push	{r3, r4, r5, lr}
   2a622:	4605      	mov	r5, r0
   2a624:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2a626:	2100      	movs	r1, #0
   2a628:	f7ff fe9d 	bl	2a366 <atomic_test_bit>
   2a62c:	b1c8      	cbz	r0, 2a662 <bt_att_status+0x42>
	if (!chan->att) {
   2a62e:	f855 0c08 	ldr.w	r0, [r5, #-8]
   2a632:	b1b0      	cbz	r0, 2a662 <bt_att_status+0x42>
	if (chan->req) {
   2a634:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   2a638:	b99b      	cbnz	r3, 2a662 <bt_att_status+0x42>
	node = sys_slist_get(&chan->att->reqs);
   2a63a:	3004      	adds	r0, #4
   2a63c:	f7ff fe01 	bl	2a242 <sys_slist_get>
	if (!node) {
   2a640:	4604      	mov	r4, r0
   2a642:	b170      	cbz	r0, 2a662 <bt_att_status+0x42>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a644:	4601      	mov	r1, r0
   2a646:	f1a5 0008 	sub.w	r0, r5, #8
   2a64a:	f7e1 fda7 	bl	c19c <bt_att_chan_req_send>
   2a64e:	2800      	cmp	r0, #0
   2a650:	da07      	bge.n	2a662 <bt_att_status+0x42>
	sys_slist_prepend(&chan->att->reqs, node);
   2a652:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   2a656:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2a658:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2a65a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2a65c:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a65e:	b902      	cbnz	r2, 2a662 <bt_att_status+0x42>
	list->tail = node;
   2a660:	609c      	str	r4, [r3, #8]
}
   2a662:	bd38      	pop	{r3, r4, r5, pc}

0002a664 <write_cb>:
{
   2a664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a666:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2a668:	4601      	mov	r1, r0
{
   2a66a:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2a66c:	222a      	movs	r2, #42	; 0x2a
   2a66e:	6820      	ldr	r0, [r4, #0]
   2a670:	f000 fb6e 	bl	2ad50 <bt_gatt_check_perm>
   2a674:	4605      	mov	r5, r0
   2a676:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2a678:	bb00      	cbnz	r0, 2a6bc <write_cb+0x58>
	if (!data->req) {
   2a67a:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   2a67c:	68b7      	ldr	r7, [r6, #8]
   2a67e:	68e2      	ldr	r2, [r4, #12]
   2a680:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   2a682:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2a684:	bf14      	ite	ne
   2a686:	2300      	movne	r3, #0
   2a688:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2a68a:	9301      	str	r3, [sp, #4]
   2a68c:	8a63      	ldrh	r3, [r4, #18]
   2a68e:	9300      	str	r3, [sp, #0]
   2a690:	4631      	mov	r1, r6
   2a692:	8a23      	ldrh	r3, [r4, #16]
   2a694:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2a696:	2800      	cmp	r0, #0
   2a698:	db05      	blt.n	2a6a6 <write_cb+0x42>
   2a69a:	8a23      	ldrh	r3, [r4, #16]
   2a69c:	4298      	cmp	r0, r3
   2a69e:	d10b      	bne.n	2a6b8 <write_cb+0x54>
	data->err = 0U;
   2a6a0:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2a6a2:	2501      	movs	r5, #1
   2a6a4:	e005      	b.n	2a6b2 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   2a6a6:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2a6aa:	d305      	bcc.n	2a6b8 <write_cb+0x54>
		return -err;
   2a6ac:	4240      	negs	r0, r0
   2a6ae:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2a6b0:	7520      	strb	r0, [r4, #20]
}
   2a6b2:	4628      	mov	r0, r5
   2a6b4:	b003      	add	sp, #12
   2a6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2a6b8:	200e      	movs	r0, #14
   2a6ba:	e7f9      	b.n	2a6b0 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   2a6bc:	2500      	movs	r5, #0
   2a6be:	e7f8      	b.n	2a6b2 <write_cb+0x4e>

0002a6c0 <bt_att_sent>:
{
   2a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   2a6c2:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
	struct bt_att *att = chan->att;
   2a6c6:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2a6ca:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2a6cc:	f1a0 0608 	sub.w	r6, r0, #8
	if (chan->sent) {
   2a6d0:	b10b      	cbz	r3, 2a6d6 <bt_att_sent+0x16>
		chan->sent(chan);
   2a6d2:	4630      	mov	r0, r6
   2a6d4:	4798      	blx	r3
   2a6d6:	f3bf 8f5b 	dmb	ish
   2a6da:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   2a6de:	e853 2f00 	ldrex	r2, [r3]
   2a6e2:	f022 0210 	bic.w	r2, r2, #16
   2a6e6:	e843 2100 	strex	r1, r2, [r3]
   2a6ea:	2900      	cmp	r1, #0
   2a6ec:	d1f7      	bne.n	2a6de <bt_att_sent+0x1e>
   2a6ee:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2a6f2:	b334      	cbz	r4, 2a742 <bt_att_sent+0x82>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2a6f4:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   2a6f8:	b98b      	cbnz	r3, 2a71e <bt_att_sent+0x5e>
   2a6fa:	6863      	ldr	r3, [r4, #4]
   2a6fc:	b17b      	cbz	r3, 2a71e <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2a6fe:	1d20      	adds	r0, r4, #4
   2a700:	f7ff fd9f 	bl	2a242 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a704:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2a706:	4607      	mov	r7, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a708:	4630      	mov	r0, r6
   2a70a:	f7ff ff63 	bl	2a5d4 <chan_req_send>
   2a70e:	2800      	cmp	r0, #0
   2a710:	da17      	bge.n	2a742 <bt_att_sent+0x82>
Z_GENLIST_PREPEND(slist, snode)
   2a712:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2a714:	603b      	str	r3, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
   2a716:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2a718:	6067      	str	r7, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a71a:	b903      	cbnz	r3, 2a71e <bt_att_sent+0x5e>
	list->tail = node;
   2a71c:	60a7      	str	r7, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2a71e:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
   2a722:	4630      	mov	r0, r6
   2a724:	f7ff fece 	bl	2a4c4 <process_queue>
	if (!err) {
   2a728:	b158      	cbz	r0, 2a742 <bt_att_sent+0x82>
	err = process_queue(chan, &att->tx_queue);
   2a72a:	f104 010c 	add.w	r1, r4, #12
   2a72e:	4630      	mov	r0, r6
   2a730:	f7ff fec8 	bl	2a4c4 <process_queue>
	if (!err) {
   2a734:	b128      	cbz	r0, 2a742 <bt_att_sent+0x82>
   2a736:	f505 708c 	add.w	r0, r5, #280	; 0x118
}
   2a73a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a73e:	f7fa bc3d 	b.w	24fbc <z_impl_k_sem_give>
   2a742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a744 <read_cb>:
{
   2a744:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2a748:	6817      	ldr	r7, [r2, #0]
{
   2a74a:	4680      	mov	r8, r0
	data->err = 0x00;
   2a74c:	2600      	movs	r6, #0
{
   2a74e:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2a750:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   2a752:	7316      	strb	r6, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2a754:	4641      	mov	r1, r8
   2a756:	2215      	movs	r2, #21
   2a758:	f000 fafa 	bl	2ad50 <bt_gatt_check_perm>
   2a75c:	4604      	mov	r4, r0
   2a75e:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2a760:	b9a0      	cbnz	r0, 2a78c <read_cb+0x48>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2a762:	e9cd 0000 	strd	r0, r0, [sp]
   2a766:	88ab      	ldrh	r3, [r5, #4]
   2a768:	68aa      	ldr	r2, [r5, #8]
   2a76a:	4641      	mov	r1, r8
   2a76c:	4638      	mov	r0, r7
   2a76e:	f7ff fe0e 	bl	2a38e <att_chan_read>
	if (ret < 0) {
   2a772:	2800      	cmp	r0, #0
   2a774:	da0c      	bge.n	2a790 <read_cb+0x4c>
	if (err < 0 && err >= -0xff) {
   2a776:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2a77a:	bf26      	itte	cs
   2a77c:	4240      	negcs	r0, r0
   2a77e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2a780:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   2a782:	7328      	strb	r0, [r5, #12]
}
   2a784:	4620      	mov	r0, r4
   2a786:	b002      	add	sp, #8
   2a788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2a78c:	4634      	mov	r4, r6
   2a78e:	e7f9      	b.n	2a784 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   2a790:	2401      	movs	r4, #1
   2a792:	e7f7      	b.n	2a784 <read_cb+0x40>

0002a794 <send_err_rsp.part.12>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2a794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a798:	4688      	mov	r8, r1
   2a79a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2a79c:	2101      	movs	r1, #1
   2a79e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2a7a0:	4605      	mov	r5, r0
   2a7a2:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2a7a4:	f7e1 fd84 	bl	c2b0 <bt_att_chan_create_pdu>
	if (!buf) {
   2a7a8:	4604      	mov	r4, r0
   2a7aa:	b170      	cbz	r0, 2a7ca <send_err_rsp.part.12+0x36>
	return net_buf_simple_add(&buf->b, len);
   2a7ac:	2104      	movs	r1, #4
   2a7ae:	3008      	adds	r0, #8
   2a7b0:	f7f5 fbf6 	bl	1ffa0 <net_buf_simple_add>
	rsp->request = req;
   2a7b4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2a7b8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2a7ba:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2a7be:	4621      	mov	r1, r4
   2a7c0:	4628      	mov	r0, r5
}
   2a7c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2a7c6:	f7e1 bc97 	b.w	c0f8 <bt_att_chan_send_rsp.constprop.24>
}
   2a7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a7ce <att_read_blob_req>:
{
   2a7ce:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2a7d0:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2a7d2:	8813      	ldrh	r3, [r2, #0]
   2a7d4:	8852      	ldrh	r2, [r2, #2]
   2a7d6:	9200      	str	r2, [sp, #0]
   2a7d8:	210c      	movs	r1, #12
   2a7da:	220d      	movs	r2, #13
   2a7dc:	f7e1 ff72 	bl	c6c4 <att_read_rsp>
}
   2a7e0:	b003      	add	sp, #12
   2a7e2:	f85d fb04 	ldr.w	pc, [sp], #4

0002a7e6 <att_read_req>:
{
   2a7e6:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2a7e8:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2a7ea:	2200      	movs	r2, #0
   2a7ec:	881b      	ldrh	r3, [r3, #0]
   2a7ee:	9200      	str	r2, [sp, #0]
   2a7f0:	210a      	movs	r1, #10
   2a7f2:	220b      	movs	r2, #11
   2a7f4:	f7e1 ff66 	bl	c6c4 <att_read_rsp>
}
   2a7f8:	b003      	add	sp, #12
   2a7fa:	f85d fb04 	ldr.w	pc, [sp], #4

0002a7fe <att_mtu_req>:
{
   2a7fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a800:	4606      	mov	r6, r0
	struct bt_conn *conn = chan->att->conn;
   2a802:	f850 3bc8 	ldr.w	r3, [r0], #200
{
   2a806:	460a      	mov	r2, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2a808:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2a80a:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2a80c:	f7ff fdab 	bl	2a366 <atomic_test_bit>
   2a810:	4604      	mov	r4, r0
   2a812:	b9f0      	cbnz	r0, 2a852 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2a814:	6892      	ldr	r2, [r2, #8]
   2a816:	8815      	ldrh	r5, [r2, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2a818:	2d16      	cmp	r5, #22
   2a81a:	d91c      	bls.n	2a856 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2a81c:	2202      	movs	r2, #2
   2a81e:	2103      	movs	r1, #3
   2a820:	4618      	mov	r0, r3
   2a822:	f7e1 fe5f 	bl	c4e4 <bt_att_create_pdu>
	if (!pdu) {
   2a826:	4607      	mov	r7, r0
   2a828:	b1b8      	cbz	r0, 2a85a <att_mtu_req+0x5c>
   2a82a:	2102      	movs	r1, #2
   2a82c:	3008      	adds	r0, #8
   2a82e:	f7f5 fbb7 	bl	1ffa0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2a832:	2345      	movs	r3, #69	; 0x45
   2a834:	7003      	strb	r3, [r0, #0]
   2a836:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   2a838:	4639      	mov	r1, r7
   2a83a:	4630      	mov	r0, r6
   2a83c:	f7e1 fc5c 	bl	c0f8 <bt_att_chan_send_rsp.constprop.24>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2a840:	2d45      	cmp	r5, #69	; 0x45
   2a842:	bf28      	it	cs
   2a844:	2545      	movcs	r5, #69	; 0x45
   2a846:	f8a6 5052 	strh.w	r5, [r6, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2a84a:	f8a6 505e 	strh.w	r5, [r6, #94]	; 0x5e
	return 0;
   2a84e:	4620      	mov	r0, r4
}
   2a850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2a852:	2006      	movs	r0, #6
   2a854:	e7fc      	b.n	2a850 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2a856:	2004      	movs	r0, #4
   2a858:	e7fa      	b.n	2a850 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2a85a:	200e      	movs	r0, #14
   2a85c:	e7f8      	b.n	2a850 <att_mtu_req+0x52>

0002a85e <bt_att_init>:
	bt_gatt_init();
   2a85e:	f7e2 bf61 	b.w	d724 <bt_gatt_init>

0002a862 <bt_att_get_mtu>:
{
   2a862:	b508      	push	{r3, lr}
	att = att_get(conn);
   2a864:	f7e1 fbb8 	bl	bfd8 <att_get>
	if (!att) {
   2a868:	b1c0      	cbz	r0, 2a89c <bt_att_get_mtu+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a86a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2a86c:	b1b0      	cbz	r0, 2a89c <bt_att_get_mtu+0x3a>
   2a86e:	f5b0 719e 	subs.w	r1, r0, #316	; 0x13c
   2a872:	d012      	beq.n	2a89a <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a874:	6803      	ldr	r3, [r0, #0]
   2a876:	b10b      	cbz	r3, 2a87c <bt_att_get_mtu+0x1a>
   2a878:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   2a87c:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   2a87e:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   2a882:	4290      	cmp	r0, r2
   2a884:	bf38      	it	cc
   2a886:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a888:	b143      	cbz	r3, 2a89c <bt_att_get_mtu+0x3a>
   2a88a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   2a88e:	b10a      	cbz	r2, 2a894 <bt_att_get_mtu+0x32>
   2a890:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   2a894:	4619      	mov	r1, r3
   2a896:	4613      	mov	r3, r2
   2a898:	e7f1      	b.n	2a87e <bt_att_get_mtu+0x1c>
		return 0;
   2a89a:	4608      	mov	r0, r1
}
   2a89c:	bd08      	pop	{r3, pc}

0002a89e <att_req_destroy>:
{
   2a89e:	b510      	push	{r4, lr}
   2a8a0:	4604      	mov	r4, r0
	if (req->buf) {
   2a8a2:	6900      	ldr	r0, [r0, #16]
   2a8a4:	b108      	cbz	r0, 2a8aa <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   2a8a6:	f7f5 fa2b 	bl	1fd00 <net_buf_unref>
	if (req->destroy) {
   2a8aa:	68a3      	ldr	r3, [r4, #8]
   2a8ac:	b10b      	cbz	r3, 2a8b2 <att_req_destroy+0x14>
		req->destroy(req);
   2a8ae:	4620      	mov	r0, r4
   2a8b0:	4798      	blx	r3
	bt_att_req_free(req);
   2a8b2:	4620      	mov	r0, r4
}
   2a8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   2a8b8:	f7e2 b862 	b.w	c980 <bt_att_req_free>

0002a8bc <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2a8bc:	898a      	ldrh	r2, [r1, #12]
   2a8be:	6889      	ldr	r1, [r1, #8]
   2a8c0:	2300      	movs	r3, #0
   2a8c2:	f7e2 b869 	b.w	c998 <att_handle_rsp>

0002a8c6 <att_chan_detach.part.15>:
static void att_chan_detach(struct bt_att_chan *chan)
   2a8c6:	b570      	push	{r4, r5, r6, lr}
   2a8c8:	4604      	mov	r4, r0
   2a8ca:	2508      	movs	r5, #8
		k_sem_give(&chan->tx_sem);
   2a8cc:	f500 7690 	add.w	r6, r0, #288	; 0x120
   2a8d0:	4630      	mov	r0, r6
   2a8d2:	f7fa fb73 	bl	24fbc <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   2a8d6:	3d01      	subs	r5, #1
   2a8d8:	d1fa      	bne.n	2a8d0 <att_chan_detach.part.15+0xa>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2a8da:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   2a8de:	2200      	movs	r2, #0
   2a8e0:	2300      	movs	r3, #0
   2a8e2:	4628      	mov	r0, r5
   2a8e4:	f7f5 f8f2 	bl	1facc <net_buf_get>
   2a8e8:	4602      	mov	r2, r0
   2a8ea:	b950      	cbnz	r0, 2a902 <att_chan_detach.part.15+0x3c>
	if (chan->req) {
   2a8ec:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   2a8f0:	b123      	cbz	r3, 2a8fc <att_chan_detach.part.15+0x36>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2a8f2:	4601      	mov	r1, r0
   2a8f4:	230e      	movs	r3, #14
   2a8f6:	4620      	mov	r0, r4
   2a8f8:	f7e2 f84e 	bl	c998 <att_handle_rsp>
	chan->att = NULL;
   2a8fc:	2300      	movs	r3, #0
   2a8fe:	6023      	str	r3, [r4, #0]
}
   2a900:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2a902:	f7f5 f9fd 	bl	1fd00 <net_buf_unref>
   2a906:	e7ea      	b.n	2a8de <att_chan_detach.part.15+0x18>

0002a908 <bt_att_disconnected>:
{
   2a908:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = att_chan->att;
   2a90a:	4606      	mov	r6, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2a90c:	f500 719a 	add.w	r1, r0, #308	; 0x134
	struct bt_att *att = att_chan->att;
   2a910:	f856 5d08 	ldr.w	r5, [r6, #-8]!
{
   2a914:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2a916:	f105 0028 	add.w	r0, r5, #40	; 0x28
   2a91a:	f7ff fc9c 	bl	2a256 <sys_slist_find_and_remove>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   2a91e:	4630      	mov	r0, r6
   2a920:	f7ff ffd1 	bl	2a8c6 <att_chan_detach.part.15>
	if (!sys_slist_is_empty(&att->chans)) {
   2a924:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2a926:	b93b      	cbnz	r3, 2a938 <bt_att_disconnected+0x30>
	att_reset(att);
   2a928:	4628      	mov	r0, r5
   2a92a:	f7e2 f89d 	bl	ca68 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   2a92e:	6820      	ldr	r0, [r4, #0]
}
   2a930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_gatt_disconnected(ch->chan.conn);
   2a934:	f7e3 bd00 	b.w	e338 <bt_gatt_disconnected>
}
   2a938:	bd70      	pop	{r4, r5, r6, pc}

0002a93a <found_attr>:
	*found = attr;
   2a93a:	6010      	str	r0, [r2, #0]
}
   2a93c:	2000      	movs	r0, #0
   2a93e:	4770      	bx	lr

0002a940 <gatt_ccc_changed>:
{
   2a940:	460b      	mov	r3, r1
   2a942:	8909      	ldrh	r1, [r1, #8]
   2a944:	8a5a      	ldrh	r2, [r3, #18]
   2a946:	428a      	cmp	r2, r1
   2a948:	bf38      	it	cc
   2a94a:	460a      	movcc	r2, r1
		if (ccc->cfg[i].value > value) {
   2a94c:	8b99      	ldrh	r1, [r3, #28]
   2a94e:	4291      	cmp	r1, r2
   2a950:	bf38      	it	cc
   2a952:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   2a954:	8bda      	ldrh	r2, [r3, #30]
   2a956:	428a      	cmp	r2, r1
   2a958:	d003      	beq.n	2a962 <gatt_ccc_changed+0x22>
		ccc->value = value;
   2a95a:	83d9      	strh	r1, [r3, #30]
		if (ccc->cfg_changed) {
   2a95c:	6a1b      	ldr	r3, [r3, #32]
   2a95e:	b103      	cbz	r3, 2a962 <gatt_ccc_changed+0x22>
			ccc->cfg_changed(attr, value);
   2a960:	4718      	bx	r3
}
   2a962:	4770      	bx	lr

0002a964 <gatt_indicate_rsp>:
{
   2a964:	b510      	push	{r4, lr}
   2a966:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   2a968:	7da3      	ldrb	r3, [r4, #22]
   2a96a:	3b01      	subs	r3, #1
   2a96c:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   2a96e:	460a      	mov	r2, r1
   2a970:	68a3      	ldr	r3, [r4, #8]
   2a972:	4621      	mov	r1, r4
   2a974:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   2a976:	68e3      	ldr	r3, [r4, #12]
   2a978:	b12b      	cbz	r3, 2a986 <gatt_indicate_rsp+0x22>
   2a97a:	7da2      	ldrb	r2, [r4, #22]
   2a97c:	b91a      	cbnz	r2, 2a986 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   2a97e:	4620      	mov	r0, r4
}
   2a980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2a984:	4718      	bx	r3
}
   2a986:	bd10      	pop	{r4, pc}

0002a988 <match_uuid>:
	data->attr = attr;
   2a988:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2a98a:	8091      	strh	r1, [r2, #4]
}
   2a98c:	2000      	movs	r0, #0
   2a98e:	4770      	bx	lr

0002a990 <ccc_set_cb>:
}
   2a990:	2000      	movs	r0, #0
   2a992:	4770      	bx	lr

0002a994 <gen_hash_m>:
{
   2a994:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2a996:	6806      	ldr	r6, [r0, #0]
   2a998:	7835      	ldrb	r5, [r6, #0]
{
   2a99a:	b089      	sub	sp, #36	; 0x24
   2a99c:	4607      	mov	r7, r0
   2a99e:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2a9a0:	b10d      	cbz	r5, 2a9a6 <gen_hash_m+0x12>
		return BT_GATT_ITER_CONTINUE;
   2a9a2:	2501      	movs	r5, #1
   2a9a4:	e014      	b.n	2a9d0 <gen_hash_m+0x3c>
	switch (u16->val) {
   2a9a6:	8873      	ldrh	r3, [r6, #2]
   2a9a8:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2a9ac:	d004      	beq.n	2a9b8 <gen_hash_m+0x24>
   2a9ae:	d812      	bhi.n	2a9d6 <gen_hash_m+0x42>
   2a9b0:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2a9b4:	2b03      	cmp	r3, #3
   2a9b6:	d8f4      	bhi.n	2a9a2 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2a9b8:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a9bc:	2202      	movs	r2, #2
   2a9be:	f10d 010e 	add.w	r1, sp, #14
   2a9c2:	4620      	mov	r0, r4
   2a9c4:	f7fe fe89 	bl	296da <tc_cmac_update>
   2a9c8:	b9d0      	cbnz	r0, 2aa00 <gen_hash_m+0x6c>
			state->err = -EINVAL;
   2a9ca:	f06f 0315 	mvn.w	r3, #21
   2a9ce:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2a9d0:	4628      	mov	r0, r5
   2a9d2:	b009      	add	sp, #36	; 0x24
   2a9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2a9d6:	f642 1205 	movw	r2, #10501	; 0x2905
   2a9da:	4293      	cmp	r3, r2
   2a9dc:	d8e1      	bhi.n	2a9a2 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2a9de:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a9e2:	2202      	movs	r2, #2
   2a9e4:	f10d 010e 	add.w	r1, sp, #14
   2a9e8:	4620      	mov	r0, r4
   2a9ea:	f7fe fe76 	bl	296da <tc_cmac_update>
   2a9ee:	2800      	cmp	r0, #0
   2a9f0:	d0eb      	beq.n	2a9ca <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2a9f2:	8873      	ldrh	r3, [r6, #2]
   2a9f4:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a9f8:	2202      	movs	r2, #2
   2a9fa:	f10d 010e 	add.w	r1, sp, #14
   2a9fe:	e017      	b.n	2aa30 <gen_hash_m+0x9c>
		value = sys_cpu_to_le16(u16->val);
   2aa00:	8873      	ldrh	r3, [r6, #2]
   2aa02:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2aa06:	2202      	movs	r2, #2
   2aa08:	f10d 010e 	add.w	r1, sp, #14
   2aa0c:	4620      	mov	r0, r4
   2aa0e:	f7fe fe64 	bl	296da <tc_cmac_update>
   2aa12:	2800      	cmp	r0, #0
   2aa14:	d0d9      	beq.n	2a9ca <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2aa16:	2000      	movs	r0, #0
   2aa18:	2310      	movs	r3, #16
   2aa1a:	eb0d 0203 	add.w	r2, sp, r3
   2aa1e:	9000      	str	r0, [sp, #0]
   2aa20:	687e      	ldr	r6, [r7, #4]
   2aa22:	4639      	mov	r1, r7
   2aa24:	47b0      	blx	r6
		if (len < 0) {
   2aa26:	1e02      	subs	r2, r0, #0
   2aa28:	da01      	bge.n	2aa2e <gen_hash_m+0x9a>
			state->err = len;
   2aa2a:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2aa2c:	e7d0      	b.n	2a9d0 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2aa2e:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2aa30:	4620      	mov	r0, r4
   2aa32:	f7fe fe52 	bl	296da <tc_cmac_update>
   2aa36:	2800      	cmp	r0, #0
   2aa38:	d1b3      	bne.n	2a9a2 <gen_hash_m+0xe>
   2aa3a:	e7c6      	b.n	2a9ca <gen_hash_m+0x36>

0002aa3c <atomic_and>:
   2aa3c:	f3bf 8f5b 	dmb	ish
   2aa40:	e850 3f00 	ldrex	r3, [r0]
   2aa44:	ea03 0201 	and.w	r2, r3, r1
   2aa48:	e840 2c00 	strex	ip, r2, [r0]
   2aa4c:	f1bc 0f00 	cmp.w	ip, #0
   2aa50:	d1f6      	bne.n	2aa40 <atomic_and+0x4>
   2aa52:	f3bf 8f5b 	dmb	ish
}
   2aa56:	4618      	mov	r0, r3
   2aa58:	4770      	bx	lr

0002aa5a <bt_addr_le_copy>:
   2aa5a:	680b      	ldr	r3, [r1, #0]
   2aa5c:	6003      	str	r3, [r0, #0]
   2aa5e:	888b      	ldrh	r3, [r1, #4]
   2aa60:	8083      	strh	r3, [r0, #4]
   2aa62:	798b      	ldrb	r3, [r1, #6]
   2aa64:	7183      	strb	r3, [r0, #6]
}
   2aa66:	4770      	bx	lr

0002aa68 <clear_ccc_cfg>:
{
   2aa68:	b513      	push	{r0, r1, r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2aa6a:	2200      	movs	r2, #0
{
   2aa6c:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2aa6e:	4669      	mov	r1, sp
   2aa70:	3001      	adds	r0, #1
   2aa72:	9200      	str	r2, [sp, #0]
   2aa74:	f8cd 2003 	str.w	r2, [sp, #3]
   2aa78:	f7ff ffef 	bl	2aa5a <bt_addr_le_copy>
	cfg->id = 0U;
   2aa7c:	7022      	strb	r2, [r4, #0]
	cfg->value = 0U;
   2aa7e:	8122      	strh	r2, [r4, #8]
}
   2aa80:	b002      	add	sp, #8
   2aa82:	bd10      	pop	{r4, pc}

0002aa84 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2aa84:	2300      	movs	r3, #0
   2aa86:	6003      	str	r3, [r0, #0]
   2aa88:	6043      	str	r3, [r0, #4]
   2aa8a:	6083      	str	r3, [r0, #8]
}
   2aa8c:	4770      	bx	lr

0002aa8e <bt_gatt_attr_read.constprop.24>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2aa8e:	b538      	push	{r3, r4, r5, lr}
   2aa90:	4615      	mov	r5, r2
   2aa92:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	if (offset > value_len) {
   2aa96:	42aa      	cmp	r2, r5
   2aa98:	d30a      	bcc.n	2aab0 <bt_gatt_attr_read.constprop.24+0x22>
	len = MIN(buf_len, value_len - offset);
   2aa9a:	1b54      	subs	r4, r2, r5
   2aa9c:	428c      	cmp	r4, r1
   2aa9e:	bfa8      	it	ge
   2aaa0:	460c      	movge	r4, r1
   2aaa2:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2aaa4:	4622      	mov	r2, r4
   2aaa6:	1959      	adds	r1, r3, r5
   2aaa8:	f003 fbff 	bl	2e2aa <memcpy>
}
   2aaac:	4620      	mov	r0, r4
   2aaae:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2aab0:	f06f 0406 	mvn.w	r4, #6
   2aab4:	e7fa      	b.n	2aaac <bt_gatt_attr_read.constprop.24+0x1e>

0002aab6 <bt_gatt_attr_read_service>:
{
   2aab6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2aab8:	461c      	mov	r4, r3
	struct bt_uuid *uuid = attr->user_data;
   2aaba:	68cb      	ldr	r3, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2aabc:	7819      	ldrb	r1, [r3, #0]
{
   2aabe:	4610      	mov	r0, r2
   2aac0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2aac4:	b959      	cbnz	r1, 2aade <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2aac6:	885b      	ldrh	r3, [r3, #2]
   2aac8:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2aacc:	2302      	movs	r3, #2
   2aace:	9300      	str	r3, [sp, #0]
   2aad0:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2aad4:	4621      	mov	r1, r4
   2aad6:	f7ff ffda 	bl	2aa8e <bt_gatt_attr_read.constprop.24>
}
   2aada:	b004      	add	sp, #16
   2aadc:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2aade:	2110      	movs	r1, #16
   2aae0:	9100      	str	r1, [sp, #0]
   2aae2:	3301      	adds	r3, #1
   2aae4:	e7f6      	b.n	2aad4 <bt_gatt_attr_read_service+0x1e>

0002aae6 <read_name>:
{
   2aae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aaea:	4614      	mov	r4, r2
   2aaec:	461d      	mov	r5, r3
   2aaee:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   2aaf2:	f7df fc93 	bl	a41c <bt_get_name>
   2aaf6:	4607      	mov	r7, r0
				 strlen(name));
   2aaf8:	f7d7 f986 	bl	1e08 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2aafc:	b280      	uxth	r0, r0
   2aafe:	9006      	str	r0, [sp, #24]
   2ab00:	463b      	mov	r3, r7
   2ab02:	4632      	mov	r2, r6
   2ab04:	4629      	mov	r1, r5
   2ab06:	4620      	mov	r0, r4
}
   2ab08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2ab0c:	f7ff bfbf 	b.w	2aa8e <bt_gatt_attr_read.constprop.24>

0002ab10 <read_appearance>:
{
   2ab10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2ab12:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2ab14:	2300      	movs	r3, #0
   2ab16:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2ab1a:	2302      	movs	r3, #2
   2ab1c:	9300      	str	r3, [sp, #0]
{
   2ab1e:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2ab20:	f10d 030e 	add.w	r3, sp, #14
   2ab24:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2ab28:	f7ff ffb1 	bl	2aa8e <bt_gatt_attr_read.constprop.24>
}
   2ab2c:	b005      	add	sp, #20
   2ab2e:	f85d fb04 	ldr.w	pc, [sp], #4

0002ab32 <clear_cf_cfg>:
{
   2ab32:	b513      	push	{r0, r1, r4, lr}
   2ab34:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2ab36:	2400      	movs	r4, #0
   2ab38:	4669      	mov	r1, sp
   2ab3a:	3001      	adds	r0, #1
   2ab3c:	9400      	str	r4, [sp, #0]
   2ab3e:	f8cd 4003 	str.w	r4, [sp, #3]
   2ab42:	f7ff ff8a 	bl	2aa5a <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   2ab46:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ab48:	320c      	adds	r2, #12
   2ab4a:	f3bf 8f5b 	dmb	ish
   2ab4e:	e852 3f00 	ldrex	r3, [r2]
   2ab52:	e842 4100 	strex	r1, r4, [r2]
   2ab56:	2900      	cmp	r1, #0
   2ab58:	d1f9      	bne.n	2ab4e <clear_cf_cfg+0x1c>
   2ab5a:	f3bf 8f5b 	dmb	ish
}
   2ab5e:	b002      	add	sp, #8
   2ab60:	bd10      	pop	{r4, pc}

0002ab62 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ab62:	f3bf 8f5b 	dmb	ish
   2ab66:	6800      	ldr	r0, [r0, #0]
   2ab68:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2ab6c:	4108      	asrs	r0, r1
}
   2ab6e:	f000 0001 	and.w	r0, r0, #1
   2ab72:	4770      	bx	lr

0002ab74 <ccc_find_cfg>:
{
   2ab74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ab78:	4604      	mov	r4, r0
   2ab7a:	460f      	mov	r7, r1
   2ab7c:	4690      	mov	r8, r2
   2ab7e:	f100 061e 	add.w	r6, r0, #30
   2ab82:	4605      	mov	r5, r0
		if (id == ccc->cfg[i].id &&
   2ab84:	782b      	ldrb	r3, [r5, #0]
   2ab86:	4543      	cmp	r3, r8
   2ab88:	d10b      	bne.n	2aba2 <ccc_find_cfg+0x2e>
	return memcmp(a, b, sizeof(*a));
   2ab8a:	2207      	movs	r2, #7
   2ab8c:	4639      	mov	r1, r7
   2ab8e:	1c68      	adds	r0, r5, #1
   2ab90:	eba5 0904 	sub.w	r9, r5, r4
   2ab94:	f003 fb7b 	bl	2e28e <memcmp>
   2ab98:	b918      	cbnz	r0, 2aba2 <ccc_find_cfg+0x2e>
			return &ccc->cfg[i];
   2ab9a:	eb04 0009 	add.w	r0, r4, r9
}
   2ab9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2aba2:	350a      	adds	r5, #10
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2aba4:	42b5      	cmp	r5, r6
   2aba6:	d1ed      	bne.n	2ab84 <ccc_find_cfg+0x10>
	return NULL;
   2aba8:	2000      	movs	r0, #0
   2abaa:	e7f8      	b.n	2ab9e <ccc_find_cfg+0x2a>

0002abac <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2abac:	2a02      	cmp	r2, #2
{
   2abae:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2abb0:	d108      	bne.n	2abc4 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2abb2:	2300      	movs	r3, #0
   2abb4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2abb8:	461a      	mov	r2, r3
   2abba:	7a00      	ldrb	r0, [r0, #8]
   2abbc:	f7e2 f9c2 	bl	cf44 <sc_save>
}
   2abc0:	2002      	movs	r0, #2
   2abc2:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2abc4:	f7e2 fa24 	bl	d010 <sc_clear>
   2abc8:	e7fa      	b.n	2abc0 <sc_ccc_cfg_write+0x14>

0002abca <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2abca:	2301      	movs	r3, #1
   2abcc:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2abd0:	f3bf 8f5b 	dmb	ish
   2abd4:	e850 3f00 	ldrex	r3, [r0]
   2abd8:	430b      	orrs	r3, r1
   2abda:	e840 3200 	strex	r2, r3, [r0]
   2abde:	2a00      	cmp	r2, #0
   2abe0:	d1f8      	bne.n	2abd4 <atomic_set_bit+0xa>
   2abe2:	f3bf 8f5b 	dmb	ish
}
   2abe6:	4770      	bx	lr

0002abe8 <sc_restore_rsp>:
{
   2abe8:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   2abea:	f7e2 fae3 	bl	d1b4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2abee:	b140      	cbz	r0, 2ac02 <sc_restore_rsp+0x1a>
   2abf0:	7a03      	ldrb	r3, [r0, #8]
   2abf2:	07db      	lsls	r3, r3, #31
   2abf4:	d505      	bpl.n	2ac02 <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2abf6:	2100      	movs	r1, #0
   2abf8:	300c      	adds	r0, #12
}
   2abfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2abfe:	f7ff bfe4 	b.w	2abca <atomic_set_bit>
}
   2ac02:	bd08      	pop	{r3, pc}

0002ac04 <cf_read>:
{
   2ac04:	b530      	push	{r4, r5, lr}
   2ac06:	b085      	sub	sp, #20
   2ac08:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2ac0a:	2300      	movs	r3, #0
{
   2ac0c:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2ac0e:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2ac12:	f7e2 facf 	bl	d1b4 <find_cf_cfg>
	if (cfg) {
   2ac16:	b110      	cbz	r0, 2ac1e <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2ac18:	7a03      	ldrb	r3, [r0, #8]
   2ac1a:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2ac1e:	2301      	movs	r3, #1
   2ac20:	9300      	str	r3, [sp, #0]
   2ac22:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2ac26:	ab03      	add	r3, sp, #12
   2ac28:	4629      	mov	r1, r5
   2ac2a:	4620      	mov	r0, r4
   2ac2c:	f7ff ff2f 	bl	2aa8e <bt_gatt_attr_read.constprop.24>
}
   2ac30:	b005      	add	sp, #20
   2ac32:	bd30      	pop	{r4, r5, pc}

0002ac34 <find_ccc_cfg>:
{
   2ac34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ac36:	4605      	mov	r5, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2ac38:	1c4c      	adds	r4, r1, #1
   2ac3a:	f101 061f 	add.w	r6, r1, #31
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   2ac3e:	1e67      	subs	r7, r4, #1
		if (conn) {
   2ac40:	b16d      	cbz	r5, 2ac5e <find_ccc_cfg+0x2a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2ac42:	4622      	mov	r2, r4
   2ac44:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   2ac48:	4628      	mov	r0, r5
   2ac4a:	f7ff fa0b 	bl	2a064 <bt_conn_is_peer_addr_le>
   2ac4e:	b918      	cbnz	r0, 2ac58 <find_ccc_cfg+0x24>
   2ac50:	340a      	adds	r4, #10
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2ac52:	42b4      	cmp	r4, r6
   2ac54:	d1f3      	bne.n	2ac3e <find_ccc_cfg+0xa>
	return NULL;
   2ac56:	2700      	movs	r7, #0
}
   2ac58:	4638      	mov	r0, r7
   2ac5a:	b003      	add	sp, #12
   2ac5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ac5e:	2207      	movs	r2, #7
   2ac60:	4669      	mov	r1, sp
   2ac62:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2ac64:	9500      	str	r5, [sp, #0]
   2ac66:	f8cd 5003 	str.w	r5, [sp, #3]
   2ac6a:	f003 fb10 	bl	2e28e <memcmp>
   2ac6e:	2800      	cmp	r0, #0
   2ac70:	d1ee      	bne.n	2ac50 <find_ccc_cfg+0x1c>
   2ac72:	e7f1      	b.n	2ac58 <find_ccc_cfg+0x24>

0002ac74 <bt_gatt_attr_read_ccc>:
{
   2ac74:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2ac76:	68c9      	ldr	r1, [r1, #12]
{
   2ac78:	b085      	sub	sp, #20
   2ac7a:	4614      	mov	r4, r2
   2ac7c:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2ac7e:	f7ff ffd9 	bl	2ac34 <find_ccc_cfg>
	if (cfg) {
   2ac82:	b100      	cbz	r0, 2ac86 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2ac84:	8900      	ldrh	r0, [r0, #8]
   2ac86:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2ac8a:	2302      	movs	r3, #2
   2ac8c:	9300      	str	r3, [sp, #0]
   2ac8e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2ac92:	f10d 030e 	add.w	r3, sp, #14
   2ac96:	4629      	mov	r1, r5
   2ac98:	4620      	mov	r0, r4
   2ac9a:	f7ff fef8 	bl	2aa8e <bt_gatt_attr_read.constprop.24>
}
   2ac9e:	b005      	add	sp, #20
   2aca0:	bd30      	pop	{r4, r5, pc}

0002aca2 <bt_gatt_attr_value_handle>:
{
   2aca2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2aca4:	4604      	mov	r4, r0
   2aca6:	b910      	cbnz	r0, 2acae <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2aca8:	2000      	movs	r0, #0
}
   2acaa:	b002      	add	sp, #8
   2acac:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2acae:	2300      	movs	r3, #0
   2acb0:	f88d 3004 	strb.w	r3, [sp, #4]
   2acb4:	a901      	add	r1, sp, #4
   2acb6:	f642 0303 	movw	r3, #10243	; 0x2803
   2acba:	6800      	ldr	r0, [r0, #0]
   2acbc:	f8ad 3006 	strh.w	r3, [sp, #6]
   2acc0:	f7fe ffce 	bl	29c60 <bt_uuid_cmp>
   2acc4:	2800      	cmp	r0, #0
   2acc6:	d1ef      	bne.n	2aca8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2acc8:	68e3      	ldr	r3, [r4, #12]
   2acca:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2accc:	2800      	cmp	r0, #0
   2acce:	d1ec      	bne.n	2acaa <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2acd0:	4620      	mov	r0, r4
   2acd2:	f7e2 fd7b 	bl	d7cc <bt_gatt_attr_get_handle>
   2acd6:	3001      	adds	r0, #1
   2acd8:	b280      	uxth	r0, r0
	return handle;
   2acda:	e7e6      	b.n	2acaa <bt_gatt_attr_value_handle+0x8>

0002acdc <bt_gatt_attr_read_chrc>:
{
   2acdc:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2acde:	68cc      	ldr	r4, [r1, #12]
{
   2ace0:	b088      	sub	sp, #32
   2ace2:	4608      	mov	r0, r1
   2ace4:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2ace6:	79a3      	ldrb	r3, [r4, #6]
   2ace8:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2acec:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2acee:	f7ff ffd8 	bl	2aca2 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2acf2:	6823      	ldr	r3, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2acf4:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2acf8:	781a      	ldrb	r2, [r3, #0]
   2acfa:	b96a      	cbnz	r2, 2ad18 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2acfc:	885b      	ldrh	r3, [r3, #2]
   2acfe:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2ad02:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2ad04:	9300      	str	r3, [sp, #0]
   2ad06:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2ad0a:	ab03      	add	r3, sp, #12
   2ad0c:	4631      	mov	r1, r6
   2ad0e:	4628      	mov	r0, r5
   2ad10:	f7ff febd 	bl	2aa8e <bt_gatt_attr_read.constprop.24>
}
   2ad14:	b008      	add	sp, #32
   2ad16:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2ad18:	1c5a      	adds	r2, r3, #1
   2ad1a:	f10d 000f 	add.w	r0, sp, #15
   2ad1e:	3311      	adds	r3, #17
   2ad20:	f852 1b04 	ldr.w	r1, [r2], #4
   2ad24:	f840 1b04 	str.w	r1, [r0], #4
   2ad28:	429a      	cmp	r2, r3
   2ad2a:	d1f9      	bne.n	2ad20 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2ad2c:	2313      	movs	r3, #19
   2ad2e:	e7e9      	b.n	2ad04 <bt_gatt_attr_read_chrc+0x28>

0002ad30 <bt_gatt_foreach_attr>:
{
   2ad30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2ad32:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2ad36:	2300      	movs	r3, #0
   2ad38:	9300      	str	r3, [sp, #0]
   2ad3a:	461a      	mov	r2, r3
   2ad3c:	f7e2 fd8a 	bl	d854 <bt_gatt_foreach_attr_type>
}
   2ad40:	b005      	add	sp, #20
   2ad42:	f85d fb04 	ldr.w	pc, [sp], #4

0002ad46 <db_hash_process>:
	db_hash_gen(true);
   2ad46:	2001      	movs	r0, #1
   2ad48:	f7e2 be3a 	b.w	d9c0 <db_hash_gen>

0002ad4c <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   2ad4c:	f7ff bd89 	b.w	2a862 <bt_att_get_mtu>

0002ad50 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2ad50:	07d3      	lsls	r3, r2, #31
{
   2ad52:	b510      	push	{r4, lr}
   2ad54:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2ad56:	d504      	bpl.n	2ad62 <bt_gatt_check_perm+0x12>
   2ad58:	f014 0f15 	tst.w	r4, #21
   2ad5c:	d017      	beq.n	2ad8e <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2ad5e:	684b      	ldr	r3, [r1, #4]
   2ad60:	b1ab      	cbz	r3, 2ad8e <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2ad62:	0793      	lsls	r3, r2, #30
   2ad64:	d504      	bpl.n	2ad70 <bt_gatt_check_perm+0x20>
   2ad66:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   2ad6a:	d012      	beq.n	2ad92 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2ad6c:	688b      	ldr	r3, [r1, #8]
   2ad6e:	b183      	cbz	r3, 2ad92 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   2ad70:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2ad72:	f014 0f30 	tst.w	r4, #48	; 0x30
   2ad76:	d104      	bne.n	2ad82 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2ad78:	f014 000c 	ands.w	r0, r4, #12
   2ad7c:	bf18      	it	ne
   2ad7e:	200f      	movne	r0, #15
}
   2ad80:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2ad82:	f7ff f964 	bl	2a04e <bt_conn_get_security>
   2ad86:	2802      	cmp	r0, #2
   2ad88:	d8f6      	bhi.n	2ad78 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   2ad8a:	2005      	movs	r0, #5
   2ad8c:	e7f8      	b.n	2ad80 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2ad8e:	2002      	movs	r0, #2
   2ad90:	e7f6      	b.n	2ad80 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2ad92:	2003      	movs	r0, #3
   2ad94:	e7f4      	b.n	2ad80 <bt_gatt_check_perm+0x30>

0002ad96 <bt_gatt_change_aware>:
{
   2ad96:	b570      	push	{r4, r5, r6, lr}
   2ad98:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   2ad9a:	f7e2 fa0b 	bl	d1b4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2ad9e:	b910      	cbnz	r0, 2ada6 <bt_gatt_change_aware+0x10>
		return true;
   2ada0:	2501      	movs	r5, #1
}
   2ada2:	4628      	mov	r0, r5
   2ada4:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2ada6:	7a03      	ldrb	r3, [r0, #8]
   2ada8:	07db      	lsls	r3, r3, #31
   2adaa:	d5f9      	bpl.n	2ada0 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2adac:	f100 040c 	add.w	r4, r0, #12
   2adb0:	2100      	movs	r1, #0
   2adb2:	4620      	mov	r0, r4
   2adb4:	f7ff fed5 	bl	2ab62 <atomic_test_bit>
   2adb8:	4606      	mov	r6, r0
   2adba:	2800      	cmp	r0, #0
   2adbc:	d1f0      	bne.n	2ada0 <bt_gatt_change_aware+0xa>
	if (!req) {
   2adbe:	2d00      	cmp	r5, #0
   2adc0:	d0ef      	beq.n	2ada2 <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2adc2:	2101      	movs	r1, #1
   2adc4:	4620      	mov	r0, r4
   2adc6:	f7ff fecc 	bl	2ab62 <atomic_test_bit>
   2adca:	4605      	mov	r5, r0
   2adcc:	b148      	cbz	r0, 2ade2 <bt_gatt_change_aware+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2adce:	f06f 0102 	mvn.w	r1, #2
   2add2:	4620      	mov	r0, r4
   2add4:	f7ff fe32 	bl	2aa3c <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2add8:	4631      	mov	r1, r6
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2adda:	4620      	mov	r0, r4
   2addc:	f7ff fef5 	bl	2abca <atomic_set_bit>
	return false;
   2ade0:	e7df      	b.n	2ada2 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2ade2:	2101      	movs	r1, #1
   2ade4:	e7f9      	b.n	2adda <bt_gatt_change_aware+0x44>

0002ade6 <bt_smp_recv>:
{
   2ade6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   2ade8:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   2adea:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2adec:	f04f 32ff 	mov.w	r2, #4294967295
   2adf0:	f04f 33ff 	mov.w	r3, #4294967295
   2adf4:	4608      	mov	r0, r1
   2adf6:	f7ff f9f1 	bl	2a1dc <bt_l2cap_create_pdu_timeout>
   2adfa:	f100 0608 	add.w	r6, r0, #8
   2adfe:	4605      	mov	r5, r0
   2ae00:	2101      	movs	r1, #1
   2ae02:	4630      	mov	r0, r6
   2ae04:	f7f5 f8cc 	bl	1ffa0 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2ae08:	2405      	movs	r4, #5
   2ae0a:	7004      	strb	r4, [r0, #0]
   2ae0c:	2101      	movs	r1, #1
   2ae0e:	4630      	mov	r0, r6
   2ae10:	f7f5 f8c6 	bl	1ffa0 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2ae14:	7004      	strb	r4, [r0, #0]
   2ae16:	2400      	movs	r4, #0
   2ae18:	9400      	str	r4, [sp, #0]
   2ae1a:	4623      	mov	r3, r4
   2ae1c:	462a      	mov	r2, r5
   2ae1e:	2106      	movs	r1, #6
   2ae20:	4638      	mov	r0, r7
   2ae22:	f7ff f9de 	bl	2a1e2 <bt_l2cap_send_cb>
}
   2ae26:	4620      	mov	r0, r4
   2ae28:	b003      	add	sp, #12
   2ae2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ae2c <bt_smp_sign>:
   2ae2c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ae30:	4770      	bx	lr

0002ae32 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2ae32:	2000      	movs	r0, #0
   2ae34:	4770      	bx	lr

0002ae36 <model_start>:
	if (mod->cb && mod->cb->start) {
   2ae36:	6943      	ldr	r3, [r0, #20]
   2ae38:	b113      	cbz	r3, 2ae40 <model_start+0xa>
   2ae3a:	685b      	ldr	r3, [r3, #4]
   2ae3c:	b103      	cbz	r3, 2ae40 <model_start+0xa>
		mod->cb->start(mod);
   2ae3e:	4718      	bx	r3
}
   2ae40:	4770      	bx	lr

0002ae42 <bt_mesh_is_provisioned>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
   2ae42:	f7e3 bb15 	b.w	e470 <atomic_test_bit.constprop.4>

0002ae46 <bt_mesh_init>:
{
   2ae46:	b538      	push	{r3, r4, r5, lr}
   2ae48:	4605      	mov	r5, r0
	err = bt_mesh_comp_register(comp);
   2ae4a:	4608      	mov	r0, r1
   2ae4c:	f7e7 ff5c 	bl	12d08 <bt_mesh_comp_register>
	if (err) {
   2ae50:	4604      	mov	r4, r0
   2ae52:	b9a0      	cbnz	r0, 2ae7e <bt_mesh_init+0x38>
		bt_mesh_proxy_init();
   2ae54:	f7ed ff28 	bl	18ca8 <bt_mesh_proxy_init>
		err = bt_mesh_prov_init(prov);
   2ae58:	4628      	mov	r0, r5
   2ae5a:	f7eb fed3 	bl	16c04 <bt_mesh_prov_init>
		if (err) {
   2ae5e:	4604      	mov	r4, r0
   2ae60:	b968      	cbnz	r0, 2ae7e <bt_mesh_init+0x38>
	bt_mesh_cfg_init();
   2ae62:	f7e3 fccd 	bl	e800 <bt_mesh_cfg_init>
	bt_mesh_net_init();
   2ae66:	f7e4 fea5 	bl	fbb4 <bt_mesh_net_init>
	bt_mesh_trans_init();
   2ae6a:	f7e6 fa4b 	bl	11304 <bt_mesh_trans_init>
	bt_mesh_hb_init();
   2ae6e:	f7e7 fa8f 	bl	12390 <bt_mesh_hb_init>
	bt_mesh_beacon_init();
   2ae72:	f7e3 ff8b 	bl	ed8c <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   2ae76:	f7ea fa3b 	bl	152f0 <bt_mesh_adv_init>
		bt_mesh_settings_init();
   2ae7a:	f7ea fb35 	bl	154e8 <bt_mesh_settings_init>
}
   2ae7e:	4620      	mov	r0, r4
   2ae80:	bd38      	pop	{r3, r4, r5, pc}

0002ae82 <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ae82:	f3bf 8f5b 	dmb	ish
   2ae86:	e850 3f00 	ldrex	r3, [r0]
   2ae8a:	ea43 0201 	orr.w	r2, r3, r1
   2ae8e:	e840 2c00 	strex	ip, r2, [r0]
   2ae92:	f1bc 0f00 	cmp.w	ip, #0
   2ae96:	d1f6      	bne.n	2ae86 <atomic_or+0x4>
   2ae98:	f3bf 8f5b 	dmb	ish
}
   2ae9c:	4618      	mov	r0, r3
   2ae9e:	4770      	bx	lr

0002aea0 <bt_mesh_beacon_enabled>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
   2aea0:	2007      	movs	r0, #7
   2aea2:	f7e3 bbb1 	b.w	e608 <atomic_test_bit.constprop.7>

0002aea6 <bt_mesh_gatt_proxy_set>:
{
   2aea6:	b510      	push	{r4, lr}
	err = feature_set(BT_MESH_GATT_PROXY, gatt_proxy);
   2aea8:	4601      	mov	r1, r0
   2aeaa:	2008      	movs	r0, #8
   2aeac:	f7e3 fbba 	bl	e624 <feature_set>
	if (err) {
   2aeb0:	4604      	mov	r4, r0
   2aeb2:	b948      	cbnz	r0, 2aec8 <bt_mesh_gatt_proxy_set+0x22>
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_PROXY);
   2aeb4:	2002      	movs	r0, #2
   2aeb6:	f7e7 fa5f 	bl	12378 <bt_mesh_hb_feature_changed>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   2aeba:	4620      	mov	r0, r4
   2aebc:	f7e3 fba4 	bl	e608 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2aec0:	b110      	cbz	r0, 2aec8 <bt_mesh_gatt_proxy_set+0x22>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   2aec2:	2007      	movs	r0, #7
   2aec4:	f7ea fab0 	bl	15428 <bt_mesh_settings_store_schedule>
}
   2aec8:	4620      	mov	r0, r4
   2aeca:	bd10      	pop	{r4, pc}

0002aecc <bt_mesh_gatt_proxy_get>:
	return atomic_test_bit(bt_mesh.flags, feature_flag) ?
   2aecc:	2008      	movs	r0, #8
   2aece:	f7e3 bb9b 	b.w	e608 <atomic_test_bit.constprop.7>

0002aed2 <bt_mesh_friend_set>:
{
   2aed2:	b538      	push	{r3, r4, r5, lr}
	err = feature_set(BT_MESH_FRIEND, friendship);
   2aed4:	4601      	mov	r1, r0
{
   2aed6:	4605      	mov	r5, r0
	err = feature_set(BT_MESH_FRIEND, friendship);
   2aed8:	2009      	movs	r0, #9
   2aeda:	f7e3 fba3 	bl	e624 <feature_set>
	if (err) {
   2aede:	4604      	mov	r4, r0
   2aee0:	b960      	cbnz	r0, 2aefc <bt_mesh_friend_set+0x2a>
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_FRIEND);
   2aee2:	2004      	movs	r0, #4
   2aee4:	f7e7 fa48 	bl	12378 <bt_mesh_hb_feature_changed>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   2aee8:	4620      	mov	r0, r4
   2aeea:	f7e3 fb8d 	bl	e608 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2aeee:	b110      	cbz	r0, 2aef6 <bt_mesh_friend_set+0x24>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   2aef0:	2007      	movs	r0, #7
   2aef2:	f7ea fa99 	bl	15428 <bt_mesh_settings_store_schedule>
	if (friendship == BT_MESH_FEATURE_DISABLED) {
   2aef6:	b90d      	cbnz	r5, 2aefc <bt_mesh_friend_set+0x2a>
		bt_mesh_friends_clear();
   2aef8:	f7ea ff60 	bl	15dbc <bt_mesh_friends_clear>
}
   2aefc:	4620      	mov	r0, r4
   2aefe:	bd38      	pop	{r3, r4, r5, pc}

0002af00 <bt_mesh_friend_get>:
	return atomic_test_bit(bt_mesh.flags, feature_flag) ?
   2af00:	2009      	movs	r0, #9
   2af02:	f7e3 bb81 	b.w	e608 <atomic_test_bit.constprop.7>

0002af06 <bt_mesh_relay_get>:
   2af06:	2006      	movs	r0, #6
   2af08:	f7e3 bb7e 	b.w	e608 <atomic_test_bit.constprop.7>

0002af0c <bt_mesh_fixed_group_match>:
	switch (addr) {
   2af0c:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
   2af10:	38fc      	subs	r0, #252	; 0xfc
{
   2af12:	b508      	push	{r3, lr}
	switch (addr) {
   2af14:	2803      	cmp	r0, #3
   2af16:	d803      	bhi.n	2af20 <bt_mesh_fixed_group_match+0x14>
   2af18:	e8df f000 	tbb	[pc, r0]
   2af1c:	100d0a04 	.word	0x100d0a04
		return false;
   2af20:	2000      	movs	r0, #0
}
   2af22:	bd08      	pop	{r3, pc}
		return (bt_mesh_gatt_proxy_get() == BT_MESH_FEATURE_ENABLED);
   2af24:	f7ff ffd2 	bl	2aecc <bt_mesh_gatt_proxy_get>
		return (bt_mesh_friend_get() == BT_MESH_FEATURE_ENABLED);
   2af28:	1e43      	subs	r3, r0, #1
   2af2a:	4258      	negs	r0, r3
   2af2c:	4158      	adcs	r0, r3
   2af2e:	e7f8      	b.n	2af22 <bt_mesh_fixed_group_match+0x16>
   2af30:	f7ff ffe6 	bl	2af00 <bt_mesh_friend_get>
   2af34:	e7f8      	b.n	2af28 <bt_mesh_fixed_group_match+0x1c>
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   2af36:	f7ff ffe6 	bl	2af06 <bt_mesh_relay_get>
   2af3a:	e7f5      	b.n	2af28 <bt_mesh_fixed_group_match+0x1c>
		return true;
   2af3c:	2001      	movs	r0, #1
   2af3e:	e7f0      	b.n	2af22 <bt_mesh_fixed_group_match+0x16>

0002af40 <sub_update_beacon_observation>:
	sub->beacons_last = sub->beacons_cur;
   2af40:	7943      	ldrb	r3, [r0, #5]
   2af42:	7103      	strb	r3, [r0, #4]
	sub->beacons_cur = 0U;
   2af44:	2300      	movs	r3, #0
   2af46:	7143      	strb	r3, [r0, #5]
}
   2af48:	4770      	bx	lr

0002af4a <cache_check>:
{
   2af4a:	b508      	push	{r3, lr}
	return !memcmp(sub->beacon_cache, beacon_data, 21);
   2af4c:	2215      	movs	r2, #21
   2af4e:	3006      	adds	r0, #6
   2af50:	f003 f99d 	bl	2e28e <memcmp>
}
   2af54:	fab0 f080 	clz	r0, r0
   2af58:	0940      	lsrs	r0, r0, #5
   2af5a:	bd08      	pop	{r3, pc}

0002af5c <beacon_complete>:
{
   2af5c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   2af60:	460d      	mov	r5, r1
	return z_impl_k_uptime_ticks();
   2af62:	f003 f902 	bl	2e16a <z_impl_k_uptime_ticks>
   2af66:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2af6a:	fba0 bc04 	umull	fp, ip, r0, r4
   2af6e:	fb04 cc01 	mla	ip, r4, r1, ip
   2af72:	ea4f 32db 	mov.w	r2, fp, lsr #15
   2af76:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
	return (uint32_t)k_uptime_get();
   2af7a:	602a      	str	r2, [r5, #0]
}
   2af7c:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

0002af80 <subnet_evt>:
	if (evt != BT_MESH_KEY_DELETED) {
   2af80:	2901      	cmp	r1, #1
   2af82:	d001      	beq.n	2af88 <subnet_evt+0x8>
		bt_mesh_beacon_update(sub);
   2af84:	f7e3 beda 	b.w	ed3c <bt_mesh_beacon_update>
}
   2af88:	4770      	bx	lr

0002af8a <subnet_beacon_enable>:
	sub->beacons_last = 0U;
   2af8a:	2200      	movs	r2, #0
   2af8c:	8082      	strh	r2, [r0, #4]
	bt_mesh_beacon_update(sub);
   2af8e:	f7e3 bed5 	b.w	ed3c <bt_mesh_beacon_update>

0002af92 <sys_get_be24>:
	return ((uint16_t)src[0] << 8) | src[1];
   2af92:	7842      	ldrb	r2, [r0, #1]
   2af94:	7883      	ldrb	r3, [r0, #2]
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   2af96:	7800      	ldrb	r0, [r0, #0]
   2af98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
}
   2af9c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   2afa0:	4770      	bx	lr

0002afa2 <send_cb_finalize>:
void bt_mesh_net_clear(void);
void bt_mesh_net_settings_commit(void);

static inline void send_cb_finalize(const struct bt_mesh_send_cb *cb,
				    void *cb_data)
{
   2afa2:	b570      	push	{r4, r5, r6, lr}
   2afa4:	460d      	mov	r5, r1
	if (!cb) {
   2afa6:	4604      	mov	r4, r0
   2afa8:	b160      	cbz	r0, 2afc4 <send_cb_finalize+0x22>
		return;
	}

	if (cb->start) {
   2afaa:	6803      	ldr	r3, [r0, #0]
   2afac:	b11b      	cbz	r3, 2afb6 <send_cb_finalize+0x14>
		cb->start(0, 0, cb_data);
   2afae:	460a      	mov	r2, r1
   2afb0:	2100      	movs	r1, #0
   2afb2:	4608      	mov	r0, r1
   2afb4:	4798      	blx	r3
	}

	if (cb->end) {
   2afb6:	6863      	ldr	r3, [r4, #4]
   2afb8:	b123      	cbz	r3, 2afc4 <send_cb_finalize+0x22>
		cb->end(0, cb_data);
   2afba:	4629      	mov	r1, r5
   2afbc:	2000      	movs	r0, #0
	}
}
   2afbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb->end(0, cb_data);
   2afc2:	4718      	bx	r3
}
   2afc4:	bd70      	pop	{r4, r5, r6, pc}

0002afc6 <net_encrypt>:
{
   2afc6:	b570      	push	{r4, r5, r6, lr}
   2afc8:	460d      	mov	r5, r1
   2afca:	4604      	mov	r4, r0
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   2afcc:	4601      	mov	r1, r0
   2afce:	1c68      	adds	r0, r5, #1
{
   2afd0:	4616      	mov	r6, r2
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   2afd2:	f000 fb33 	bl	2b63c <bt_mesh_net_encrypt>
	if (err) {
   2afd6:	b938      	cbnz	r0, 2afe8 <net_encrypt+0x22>
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   2afd8:	f105 0211 	add.w	r2, r5, #17
   2afdc:	4631      	mov	r1, r6
   2afde:	6820      	ldr	r0, [r4, #0]
}
   2afe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   2afe4:	f000 bafc 	b.w	2b5e0 <bt_mesh_net_obfuscate>
}
   2afe8:	bd70      	pop	{r4, r5, r6, pc}

0002afea <bt_mesh_net_clear>:
{
   2afea:	b508      	push	{r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_NET_PENDING);
   2afec:	2003      	movs	r0, #3
   2afee:	f7ea fa1b 	bl	15428 <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
   2aff2:	2004      	movs	r0, #4
   2aff4:	f7ea fa18 	bl	15428 <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   2aff8:	2007      	movs	r0, #7
}
   2affa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   2affe:	f7ea ba13 	b.w	15428 <bt_mesh_settings_store_schedule>

0002b002 <subnet_del>:
{
   2b002:	b510      	push	{r4, lr}
   2b004:	4604      	mov	r4, r0
		update_subnet_settings(sub->net_idx, false);
   2b006:	2100      	movs	r1, #0
   2b008:	8b80      	ldrh	r0, [r0, #28]
   2b00a:	f7e4 ff67 	bl	fedc <update_subnet_settings>
	bt_mesh_net_loopback_clear(sub->net_idx);
   2b00e:	8ba0      	ldrh	r0, [r4, #28]
   2b010:	f7e4 fbbc 	bl	f78c <bt_mesh_net_loopback_clear>
	subnet_evt(sub, BT_MESH_KEY_DELETED);
   2b014:	2101      	movs	r1, #1
   2b016:	4620      	mov	r0, r4
   2b018:	f7e4 fe92 	bl	fd40 <subnet_evt>
   2b01c:	22e0      	movs	r2, #224	; 0xe0
   2b01e:	2100      	movs	r1, #0
   2b020:	4620      	mov	r0, r4
   2b022:	f003 f97d 	bl	2e320 <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   2b026:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b02a:	83a3      	strh	r3, [r4, #28]
}
   2b02c:	bd10      	pop	{r4, pc}

0002b02e <bt_mesh_subnet_store>:
	update_subnet_settings(net_idx, true);
   2b02e:	2101      	movs	r1, #1
   2b030:	f7e4 bf54 	b.w	fedc <update_subnet_settings>

0002b034 <key_refresh>:
{
   2b034:	b538      	push	{r3, r4, r5, lr}
   2b036:	4604      	mov	r4, r0
	switch (new_phase) {
   2b038:	2903      	cmp	r1, #3
   2b03a:	d809      	bhi.n	2b050 <key_refresh+0x1c>
   2b03c:	e8df f001 	tbb	[pc, r1]
   2b040:	110d0213 	.word	0x110d0213
		sub->kr_phase = new_phase;
   2b044:	2301      	movs	r3, #1
   2b046:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_UPDATED);
   2b048:	2102      	movs	r1, #2
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   2b04a:	4620      	mov	r0, r4
   2b04c:	f7e4 fe78 	bl	fd40 <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
   2b050:	8ba0      	ldrh	r0, [r4, #28]
}
   2b052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_subnet_store(sub->net_idx);
   2b056:	f7ff bfea 	b.w	2b02e <bt_mesh_subnet_store>
		sub->kr_phase = new_phase;
   2b05a:	2302      	movs	r3, #2
   2b05c:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_SWAPPED);
   2b05e:	2103      	movs	r1, #3
   2b060:	e7f3      	b.n	2b04a <key_refresh+0x16>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
   2b062:	7f83      	ldrb	r3, [r0, #30]
   2b064:	b163      	cbz	r3, 2b080 <key_refresh+0x4c>
		sub->kr_phase = BT_MESH_KR_NORMAL;
   2b066:	2500      	movs	r5, #0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b068:	f104 0186 	add.w	r1, r4, #134	; 0x86
   2b06c:	77a5      	strb	r5, [r4, #30]
   2b06e:	225a      	movs	r2, #90	; 0x5a
   2b070:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   2b074:	f003 f919 	bl	2e2aa <memcpy>
		sub->keys[1].valid = 0U;
   2b078:	f884 5086 	strb.w	r5, [r4, #134]	; 0x86
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   2b07c:	2104      	movs	r1, #4
   2b07e:	e7e4      	b.n	2b04a <key_refresh+0x16>
}
   2b080:	bd38      	pop	{r3, r4, r5, pc}

0002b082 <bt_mesh_kr_update>:
	if (!new_key) {
   2b082:	b16a      	cbz	r2, 2b0a0 <bt_mesh_kr_update+0x1e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
   2b084:	7f83      	ldrb	r3, [r0, #30]
   2b086:	2b01      	cmp	r3, #1
   2b088:	d105      	bne.n	2b096 <bt_mesh_kr_update+0x14>
		key_refresh(sub, (kr_flag ? BT_MESH_KR_PHASE_2 :
   2b08a:	2900      	cmp	r1, #0
   2b08c:	bf14      	ite	ne
   2b08e:	2102      	movne	r1, #2
   2b090:	2103      	moveq	r1, #3
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   2b092:	f7ff bfcf 	b.w	2b034 <key_refresh>
	} else if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !kr_flag) {
   2b096:	2b02      	cmp	r3, #2
   2b098:	d102      	bne.n	2b0a0 <bt_mesh_kr_update+0x1e>
   2b09a:	b909      	cbnz	r1, 2b0a0 <bt_mesh_kr_update+0x1e>
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   2b09c:	2103      	movs	r1, #3
   2b09e:	e7f8      	b.n	2b092 <bt_mesh_kr_update+0x10>
}
   2b0a0:	4770      	bx	lr

0002b0a2 <bt_mesh_subnet_exists>:
{
   2b0a2:	b508      	push	{r3, lr}
   2b0a4:	f7e4 fec8 	bl	fe38 <bt_mesh_subnet_get.part.1>
}
   2b0a8:	3000      	adds	r0, #0
   2b0aa:	bf18      	it	ne
   2b0ac:	2001      	movne	r0, #1
   2b0ae:	bd08      	pop	{r3, pc}

0002b0b0 <bt_mesh_subnet_update>:
{
   2b0b0:	b538      	push	{r3, r4, r5, lr}
   2b0b2:	460c      	mov	r4, r1
   2b0b4:	f7e4 fec0 	bl	fe38 <bt_mesh_subnet_get.part.1>
	if (!sub) {
   2b0b8:	4605      	mov	r5, r0
   2b0ba:	b330      	cbz	r0, 2b10a <bt_mesh_subnet_update+0x5a>
	switch (sub->kr_phase) {
   2b0bc:	7f83      	ldrb	r3, [r0, #30]
   2b0be:	2b03      	cmp	r3, #3
   2b0c0:	d815      	bhi.n	2b0ee <bt_mesh_subnet_update+0x3e>
   2b0c2:	e8df f003 	tbb	[pc, r3]
   2b0c6:	0b02      	.short	0x0b02
   2b0c8:	1212      	.short	0x1212
		if (!memcmp(key, sub->keys[0].net, 16)) {
   2b0ca:	f100 012d 	add.w	r1, r0, #45	; 0x2d
   2b0ce:	2210      	movs	r2, #16
   2b0d0:	4620      	mov	r0, r4
   2b0d2:	f003 f8dc 	bl	2e28e <memcmp>
   2b0d6:	b950      	cbnz	r0, 2b0ee <bt_mesh_subnet_update+0x3e>
			return STATUS_IDX_ALREADY_STORED;
   2b0d8:	2006      	movs	r0, #6
   2b0da:	e015      	b.n	2b108 <bt_mesh_subnet_update+0x58>
		if (!memcmp(key, sub->keys[1].net, 16)) {
   2b0dc:	f100 0187 	add.w	r1, r0, #135	; 0x87
   2b0e0:	2210      	movs	r2, #16
   2b0e2:	4620      	mov	r0, r4
   2b0e4:	f003 f8d3 	bl	2e28e <memcmp>
   2b0e8:	b170      	cbz	r0, 2b108 <bt_mesh_subnet_update+0x58>
		return STATUS_CANNOT_UPDATE;
   2b0ea:	200b      	movs	r0, #11
   2b0ec:	e00c      	b.n	2b108 <bt_mesh_subnet_update+0x58>
	err = net_keys_create(&sub->keys[1], key);
   2b0ee:	4621      	mov	r1, r4
   2b0f0:	f105 0086 	add.w	r0, r5, #134	; 0x86
   2b0f4:	f7e4 fe4a 	bl	fd8c <net_keys_create>
	if (err) {
   2b0f8:	4604      	mov	r4, r0
   2b0fa:	2800      	cmp	r0, #0
   2b0fc:	d1f5      	bne.n	2b0ea <bt_mesh_subnet_update+0x3a>
	key_refresh(sub, BT_MESH_KR_PHASE_1);
   2b0fe:	4628      	mov	r0, r5
   2b100:	2101      	movs	r1, #1
   2b102:	f7ff ff97 	bl	2b034 <key_refresh>
	return STATUS_SUCCESS;
   2b106:	4620      	mov	r0, r4
}
   2b108:	bd38      	pop	{r3, r4, r5, pc}
		return STATUS_INVALID_NETKEY;
   2b10a:	2004      	movs	r0, #4
   2b10c:	e7fc      	b.n	2b108 <bt_mesh_subnet_update+0x58>

0002b10e <bt_mesh_subnet_del>:
{
   2b10e:	b508      	push	{r3, lr}
   2b110:	f7e4 fe92 	bl	fe38 <bt_mesh_subnet_get.part.1>
	if (!sub) {
   2b114:	b118      	cbz	r0, 2b11e <bt_mesh_subnet_del+0x10>
	subnet_del(sub);
   2b116:	f7ff ff74 	bl	2b002 <subnet_del>
	return STATUS_SUCCESS;
   2b11a:	2000      	movs	r0, #0
}
   2b11c:	bd08      	pop	{r3, pc}
		return STATUS_INVALID_NETKEY;
   2b11e:	2004      	movs	r0, #4
   2b120:	e7fc      	b.n	2b11c <bt_mesh_subnet_del+0xe>

0002b122 <bt_mesh_friend_cred_create>:
{
   2b122:	b530      	push	{r4, r5, lr}
   2b124:	b087      	sub	sp, #28
	p[0] = 0x01;
   2b126:	2501      	movs	r5, #1
{
   2b128:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	p[0] = 0x01;
   2b12c:	f88d 500c 	strb.w	r5, [sp, #12]
	dst[1] = val;
   2b130:	f88d 100e 	strb.w	r1, [sp, #14]
	dst[0] = val >> 8;
   2b134:	0a0d      	lsrs	r5, r1, #8
	dst[1] = val;
   2b136:	f88d 2010 	strb.w	r2, [sp, #16]
	dst[0] = val >> 8;
   2b13a:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   2b13c:	f88d 3012 	strb.w	r3, [sp, #18]
	dst[0] = val >> 8;
   2b140:	0a1a      	lsrs	r2, r3, #8
   2b142:	0a23      	lsrs	r3, r4, #8
   2b144:	f88d 3013 	strb.w	r3, [sp, #19]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
   2b148:	f100 0311 	add.w	r3, r0, #17
   2b14c:	9301      	str	r3, [sp, #4]
   2b14e:	1c43      	adds	r3, r0, #1
   2b150:	f88d 100f 	strb.w	r1, [sp, #15]
   2b154:	f88d 2011 	strb.w	r2, [sp, #17]
   2b158:	9300      	str	r3, [sp, #0]
   2b15a:	2209      	movs	r2, #9
   2b15c:	4603      	mov	r3, r0
   2b15e:	a903      	add	r1, sp, #12
   2b160:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2b162:	f88d 500d 	strb.w	r5, [sp, #13]
	dst[1] = val;
   2b166:	f88d 4014 	strb.w	r4, [sp, #20]
   2b16a:	f7e7 f98b 	bl	12484 <bt_mesh_k2>
}
   2b16e:	b007      	add	sp, #28
   2b170:	bd30      	pop	{r4, r5, pc}

0002b172 <bt_mesh_subnet_kr_phase_get>:
{
   2b172:	b508      	push	{r3, lr}
   2b174:	f7e4 fe60 	bl	fe38 <bt_mesh_subnet_get.part.1>
	if (!sub) {
   2b178:	b118      	cbz	r0, 2b182 <bt_mesh_subnet_kr_phase_get+0x10>
	*phase = sub->kr_phase;
   2b17a:	7f83      	ldrb	r3, [r0, #30]
	return STATUS_SUCCESS;
   2b17c:	2000      	movs	r0, #0
   2b17e:	700b      	strb	r3, [r1, #0]
}
   2b180:	bd08      	pop	{r3, pc}
		*phase = BT_MESH_KR_NORMAL;
   2b182:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   2b184:	2004      	movs	r0, #4
   2b186:	e7fa      	b.n	2b17e <bt_mesh_subnet_kr_phase_get+0xc>

0002b188 <bt_mesh_subnet_node_id_set>:
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   2b188:	2902      	cmp	r1, #2
{
   2b18a:	b508      	push	{r3, lr}
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   2b18c:	d00c      	beq.n	2b1a8 <bt_mesh_subnet_node_id_set+0x20>
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
   2b18e:	f7e4 fe53 	bl	fe38 <bt_mesh_subnet_get.part.1>
	if (!sub) {
   2b192:	b158      	cbz	r0, 2b1ac <bt_mesh_subnet_node_id_set+0x24>
	if (node_id) {
   2b194:	b129      	cbz	r1, 2b1a2 <bt_mesh_subnet_node_id_set+0x1a>
		bt_mesh_proxy_identity_start(sub);
   2b196:	f7ed fad1 	bl	1873c <bt_mesh_proxy_identity_start>
	bt_mesh_adv_update();
   2b19a:	f7ea f8a3 	bl	152e4 <bt_mesh_adv_update>
	return STATUS_SUCCESS;
   2b19e:	2000      	movs	r0, #0
}
   2b1a0:	bd08      	pop	{r3, pc}
		bt_mesh_proxy_identity_stop(sub);
   2b1a2:	f001 f835 	bl	2c210 <bt_mesh_proxy_identity_stop>
   2b1a6:	e7f8      	b.n	2b19a <bt_mesh_subnet_node_id_set+0x12>
		return STATUS_CANNOT_SET;
   2b1a8:	200f      	movs	r0, #15
   2b1aa:	e7f9      	b.n	2b1a0 <bt_mesh_subnet_node_id_set+0x18>
		return STATUS_INVALID_NETKEY;
   2b1ac:	2004      	movs	r0, #4
   2b1ae:	e7f7      	b.n	2b1a0 <bt_mesh_subnet_node_id_set+0x18>

0002b1b0 <bt_mesh_subnet_node_id_get>:
{
   2b1b0:	b508      	push	{r3, lr}
   2b1b2:	f7e4 fe41 	bl	fe38 <bt_mesh_subnet_get.part.1>
	if (!sub) {
   2b1b6:	b118      	cbz	r0, 2b1c0 <bt_mesh_subnet_node_id_get+0x10>
	*node_id = sub->node_id;
   2b1b8:	7fc3      	ldrb	r3, [r0, #31]
	return STATUS_SUCCESS;
   2b1ba:	2000      	movs	r0, #0
   2b1bc:	700b      	strb	r3, [r1, #0]
}
   2b1be:	bd08      	pop	{r3, pc}
		*node_id = 0x00;
   2b1c0:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   2b1c2:	2004      	movs	r0, #4
   2b1c4:	e7fa      	b.n	2b1bc <bt_mesh_subnet_node_id_get+0xc>

0002b1c6 <bt_mesh_subnet_get>:
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
   2b1c6:	f7e4 be37 	b.w	fe38 <bt_mesh_subnet_get.part.1>

0002b1ca <app_key_del>:
{
   2b1ca:	b510      	push	{r4, lr}
		update_app_key_settings(app->app_idx, false);
   2b1cc:	2100      	movs	r1, #0
{
   2b1ce:	4604      	mov	r4, r0
		update_app_key_settings(app->app_idx, false);
   2b1d0:	8840      	ldrh	r0, [r0, #2]
   2b1d2:	f7e5 f8ed 	bl	103b0 <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_DELETED);
   2b1d6:	4620      	mov	r0, r4
   2b1d8:	2101      	movs	r1, #1
   2b1da:	f7e5 f87f 	bl	102dc <app_key_evt>
	app->net_idx = BT_MESH_KEY_UNUSED;
   2b1de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b1e2:	8023      	strh	r3, [r4, #0]
	app->app_idx = BT_MESH_KEY_UNUSED;
   2b1e4:	8063      	strh	r3, [r4, #2]
__ssp_bos_icheck3(memset, void *, int)
   2b1e6:	1d60      	adds	r0, r4, #5
   2b1e8:	2222      	movs	r2, #34	; 0x22
   2b1ea:	2100      	movs	r1, #0
}
   2b1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b1f0:	f003 b896 	b.w	2e320 <memset>

0002b1f4 <send_cb_finalize>:
{
   2b1f4:	b570      	push	{r4, r5, r6, lr}
   2b1f6:	460d      	mov	r5, r1
	if (!cb) {
   2b1f8:	4604      	mov	r4, r0
   2b1fa:	b160      	cbz	r0, 2b216 <send_cb_finalize+0x22>
	if (cb->start) {
   2b1fc:	6803      	ldr	r3, [r0, #0]
   2b1fe:	b11b      	cbz	r3, 2b208 <send_cb_finalize+0x14>
		cb->start(0, 0, cb_data);
   2b200:	460a      	mov	r2, r1
   2b202:	2100      	movs	r1, #0
   2b204:	4608      	mov	r0, r1
   2b206:	4798      	blx	r3
	if (cb->end) {
   2b208:	6863      	ldr	r3, [r4, #4]
   2b20a:	b123      	cbz	r3, 2b216 <send_cb_finalize+0x22>
		cb->end(0, cb_data);
   2b20c:	4629      	mov	r1, r5
   2b20e:	2000      	movs	r0, #0
}
   2b210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb->end(0, cb_data);
   2b214:	4718      	bx	r3
}
   2b216:	bd70      	pop	{r4, r5, r6, pc}

0002b218 <seg_tx_buf_build>:
{
   2b218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2b21c:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
   2b220:	f8b0 8038 	ldrh.w	r8, [r0, #56]	; 0x38
		return BT_MESH_APP_SEG_SDU_MAX;
   2b224:	f013 0f02 	tst.w	r3, #2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2b228:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
		return BT_MESH_APP_SEG_SDU_MAX;
   2b22c:	bf14      	ite	ne
   2b22e:	2608      	movne	r6, #8
   2b230:	260c      	moveq	r6, #12
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2b232:	fb06 3311 	mls	r3, r6, r1, r3
{
   2b236:	4604      	mov	r4, r0
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2b238:	429e      	cmp	r6, r3
{
   2b23a:	460f      	mov	r7, r1
	net_buf_simple_add_u8(buf, tx->hdr);
   2b23c:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
   2b240:	4610      	mov	r0, r2
{
   2b242:	4615      	mov	r5, r2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2b244:	bfa8      	it	ge
   2b246:	b2de      	uxtbge	r6, r3
	net_buf_simple_add_u8(buf, tx->hdr);
   2b248:	f002 f9c4 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   2b24c:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
   2b250:	f3c8 080c 	ubfx	r8, r8, #0, #13
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   2b254:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2b258:	ea4f 1198 	mov.w	r1, r8, lsr #6
   2b25c:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
   2b260:	4628      	mov	r0, r5
   2b262:	f002 f9b7 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
   2b266:	08f9      	lsrs	r1, r7, #3
   2b268:	ea41 0188 	orr.w	r1, r1, r8, lsl #2
   2b26c:	b2c9      	uxtb	r1, r1
   2b26e:	4628      	mov	r0, r5
   2b270:	f002 f9b0 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
   2b274:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   2b278:	eb04 0487 	add.w	r4, r4, r7, lsl #2
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
   2b27c:	ea41 1147 	orr.w	r1, r1, r7, lsl #5
   2b280:	b2c9      	uxtb	r1, r1
   2b282:	4628      	mov	r0, r5
   2b284:	f002 f9a6 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   2b288:	4632      	mov	r2, r6
   2b28a:	6861      	ldr	r1, [r4, #4]
   2b28c:	4628      	mov	r0, r5
}
   2b28e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   2b292:	f002 b993 	b.w	2d5bc <net_buf_simple_add_mem>

0002b296 <ack_timeout>:
{
   2b296:	b538      	push	{r3, r4, r5, lr}
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   2b298:	f890 4020 	ldrb.w	r4, [r0, #32]
   2b29c:	2cff      	cmp	r4, #255	; 0xff
{
   2b29e:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   2b2a0:	d102      	bne.n	2b2a8 <ack_timeout+0x12>
		ttl = bt_mesh_default_ttl_get();
   2b2a2:	f7e3 fa31 	bl	e708 <bt_mesh_default_ttl_get>
   2b2a6:	4604      	mov	r4, r0
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   2b2a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
   2b2aa:	f7d6 fb87 	bl	19bc <__popcountsi2>
   2b2ae:	7feb      	ldrb	r3, [r5, #31]
   2b2b0:	f003 031f 	and.w	r3, r3, #31
   2b2b4:	1a18      	subs	r0, r3, r0
   2b2b6:	2364      	movs	r3, #100	; 0x64
   2b2b8:	fb00 3303 	mla	r3, r0, r3, r3
	to = 150 + (ttl * 50U);
   2b2bc:	2296      	movs	r2, #150	; 0x96
   2b2be:	2032      	movs	r0, #50	; 0x32
   2b2c0:	fb10 2004 	smlabb	r0, r0, r4, r2
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   2b2c4:	4418      	add	r0, r3
}
   2b2c6:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   2b2ca:	bfb8      	it	lt
   2b2cc:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   2b2d0:	bd38      	pop	{r3, r4, r5, pc}

0002b2d2 <seg_rx_assemble>:
{
   2b2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->data = buf->__buf;
   2b2d6:	688b      	ldr	r3, [r1, #8]
   2b2d8:	600b      	str	r3, [r1, #0]
	buf->len  = 0U;
   2b2da:	2400      	movs	r4, #0
   2b2dc:	4606      	mov	r6, r0
   2b2de:	460d      	mov	r5, r1
   2b2e0:	4617      	mov	r7, r2
   2b2e2:	808c      	strh	r4, [r1, #4]
	for (i = 0; i <= rx->seg_n; i++) {
   2b2e4:	f100 0804 	add.w	r8, r0, #4
				       MIN(seg_len(rx->ctl),
   2b2e8:	7ff3      	ldrb	r3, [r6, #31]
		net_buf_simple_add_mem(buf, rx->seg[i],
   2b2ea:	f858 1b04 	ldr.w	r1, [r8], #4
		return BT_MESH_APP_SEG_SDU_MAX;
   2b2ee:	f013 0f20 	tst.w	r3, #32
				       MIN(seg_len(rx->ctl),
   2b2f2:	8bb3      	ldrh	r3, [r6, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
   2b2f4:	bf14      	ite	ne
   2b2f6:	2208      	movne	r2, #8
   2b2f8:	220c      	moveq	r2, #12
				       MIN(seg_len(rx->ctl),
   2b2fa:	fb04 3312 	mls	r3, r4, r2, r3
		net_buf_simple_add_mem(buf, rx->seg[i],
   2b2fe:	429a      	cmp	r2, r3
   2b300:	bfa8      	it	ge
   2b302:	461a      	movge	r2, r3
   2b304:	4628      	mov	r0, r5
   2b306:	f002 f959 	bl	2d5bc <net_buf_simple_add_mem>
	for (i = 0; i <= rx->seg_n; i++) {
   2b30a:	7ff3      	ldrb	r3, [r6, #31]
   2b30c:	3401      	adds	r4, #1
   2b30e:	461a      	mov	r2, r3
   2b310:	f003 031f 	and.w	r3, r3, #31
   2b314:	42a3      	cmp	r3, r4
   2b316:	dae7      	bge.n	2b2e8 <seg_rx_assemble+0x16>
	if (!rx->ctl) {
   2b318:	0693      	lsls	r3, r2, #26
   2b31a:	d407      	bmi.n	2b32c <seg_rx_assemble+0x5a>
		buf->len -= APP_MIC_LEN(aszmic);
   2b31c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   2b320:	2f00      	cmp	r7, #0
   2b322:	bf14      	ite	ne
   2b324:	2208      	movne	r2, #8
   2b326:	2204      	moveq	r2, #4
   2b328:	1a9b      	subs	r3, r3, r2
   2b32a:	80ab      	strh	r3, [r5, #4]
}
   2b32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b330 <sdu_try_decrypt>:
	if (ctx->seg) {
   2b330:	69d0      	ldr	r0, [r2, #28]
{
   2b332:	b570      	push	{r4, r5, r6, lr}
   2b334:	460d      	mov	r5, r1
   2b336:	4614      	mov	r4, r2
	if (ctx->seg) {
   2b338:	b118      	cbz	r0, 2b342 <sdu_try_decrypt+0x12>
		seg_rx_assemble(ctx->seg, ctx->buf, ctx->crypto.aszmic);
   2b33a:	7852      	ldrb	r2, [r2, #1]
   2b33c:	6961      	ldr	r1, [r4, #20]
   2b33e:	f7ff ffc8 	bl	2b2d2 <seg_rx_assemble>
	net_buf_simple_reset(ctx->sdu);
   2b342:	69a3      	ldr	r3, [r4, #24]
   2b344:	2200      	movs	r2, #0
   2b346:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   2b348:	689a      	ldr	r2, [r3, #8]
   2b34a:	601a      	str	r2, [r3, #0]
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   2b34c:	4621      	mov	r1, r4
   2b34e:	6962      	ldr	r2, [r4, #20]
   2b350:	4628      	mov	r0, r5
}
   2b352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   2b356:	f000 ba3c 	b.w	2b7d2 <bt_mesh_app_decrypt>

0002b35a <schedule_retransmit>:
{
   2b35a:	b570      	push	{r4, r5, r6, lr}
	if (!tx->nack_count) {
   2b35c:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
   2b360:	2b00      	cmp	r3, #0
   2b362:	d039      	beq.n	2b3d8 <schedule_retransmit+0x7e>
	if (--tx->seg_pending || tx->sending) {
   2b364:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
   2b368:	3b01      	subs	r3, #1
   2b36a:	b2db      	uxtb	r3, r3
   2b36c:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
   2b370:	bb93      	cbnz	r3, 2b3d8 <schedule_retransmit+0x7e>
   2b372:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   2b376:	06db      	lsls	r3, r3, #27
   2b378:	d42e      	bmi.n	2b3d8 <schedule_retransmit+0x7e>
	k_delayed_work_submit(&tx->retransmit,
   2b37a:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
   2b37e:	f100 0458 	add.w	r4, r0, #88	; 0x58
   2b382:	b133      	cbz	r3, 2b392 <schedule_retransmit+0x38>
   2b384:	2200      	movs	r2, #0
   2b386:	2300      	movs	r3, #0
   2b388:	4620      	mov	r0, r4
}
   2b38a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit(&tx->retransmit,
   2b38e:	f7e5 ba87 	b.w	108a0 <k_delayed_work_submit>
					  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
   2b392:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
   2b396:	2b00      	cmp	r3, #0
   2b398:	bfc1      	itttt	gt
   2b39a:	f890 104c 	ldrbgt.w	r1, [r0, #76]	; 0x4c
   2b39e:	2232      	movgt	r2, #50	; 0x32
   2b3a0:	f44f 73c8 	movgt.w	r3, #400	; 0x190
   2b3a4:	fb12 3201 	smlabbgt	r2, r2, r1, r3
   2b3a8:	bfce      	itee	gt
   2b3aa:	17d3      	asrgt	r3, r2, #31
   2b3ac:	2232      	movle	r2, #50	; 0x32
   2b3ae:	2300      	movle	r3, #0
   2b3b0:	03d9      	lsls	r1, r3, #15
   2b3b2:	03d0      	lsls	r0, r2, #15
   2b3b4:	f240 35e7 	movw	r5, #999	; 0x3e7
   2b3b8:	1940      	adds	r0, r0, r5
   2b3ba:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
   2b3be:	f04f 0500 	mov.w	r5, #0
   2b3c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b3c6:	f04f 0300 	mov.w	r3, #0
   2b3ca:	eb45 0101 	adc.w	r1, r5, r1
   2b3ce:	f7d6 fadd 	bl	198c <__aeabi_uldivmod>
   2b3d2:	4602      	mov	r2, r0
   2b3d4:	460b      	mov	r3, r1
   2b3d6:	e7d7      	b.n	2b388 <schedule_retransmit+0x2e>
}
   2b3d8:	bd70      	pop	{r4, r5, r6, pc}

0002b3da <seg_sent>:
	schedule_retransmit(tx);
   2b3da:	4608      	mov	r0, r1
   2b3dc:	f7ff bfbd 	b.w	2b35a <schedule_retransmit>

0002b3e0 <seg_send_start>:
{
   2b3e0:	b538      	push	{r3, r4, r5, lr}
	if (!tx->started && tx->cb && tx->cb->start) {
   2b3e2:	f892 304e 	ldrb.w	r3, [r2, #78]	; 0x4e
   2b3e6:	071b      	lsls	r3, r3, #28
{
   2b3e8:	460d      	mov	r5, r1
   2b3ea:	4614      	mov	r4, r2
	if (!tx->started && tx->cb && tx->cb->start) {
   2b3ec:	d40b      	bmi.n	2b406 <seg_send_start+0x26>
   2b3ee:	6d13      	ldr	r3, [r2, #80]	; 0x50
   2b3f0:	b14b      	cbz	r3, 2b406 <seg_send_start+0x26>
   2b3f2:	681b      	ldr	r3, [r3, #0]
   2b3f4:	b13b      	cbz	r3, 2b406 <seg_send_start+0x26>
		tx->cb->start(duration, err, tx->cb_data);
   2b3f6:	6d52      	ldr	r2, [r2, #84]	; 0x54
   2b3f8:	4798      	blx	r3
		tx->started = 1U;
   2b3fa:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   2b3fe:	f043 0308 	orr.w	r3, r3, #8
   2b402:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	if (err) {
   2b406:	b125      	cbz	r5, 2b412 <seg_send_start+0x32>
		schedule_retransmit(tx);
   2b408:	4620      	mov	r0, r4
}
   2b40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		schedule_retransmit(tx);
   2b40e:	f7ff bfa4 	b.w	2b35a <schedule_retransmit>
}
   2b412:	bd38      	pop	{r3, r4, r5, pc}

0002b414 <seg_retransmit>:
	seg_tx_send_unacked(tx);
   2b414:	3858      	subs	r0, #88	; 0x58
   2b416:	f7e5 bb67 	b.w	10ae8 <seg_tx_send_unacked>

0002b41a <send_ack>:
{
   2b41a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b41c:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   2b41e:	8b87      	ldrh	r7, [r0, #28]
{
   2b420:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
   2b424:	f8ad 7010 	strh.w	r7, [sp, #16]
{
   2b428:	460e      	mov	r6, r1
	struct bt_mesh_msg_ctx ctx = {
   2b42a:	2100      	movs	r1, #0
   2b42c:	f8ad 101a 	strh.w	r1, [sp, #26]
   2b430:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2b434:	f88d 301b 	strb.w	r3, [sp, #27]
	struct bt_mesh_net_tx tx = {
   2b438:	ab04      	add	r3, sp, #16
{
   2b43a:	9d11      	ldr	r5, [sp, #68]	; 0x44
	struct bt_mesh_msg_ctx ctx = {
   2b43c:	f8cd 1016 	str.w	r1, [sp, #22]
   2b440:	f8ad 7012 	strh.w	r7, [sp, #18]
   2b444:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
   2b448:	9109      	str	r1, [sp, #36]	; 0x24
   2b44a:	9007      	str	r0, [sp, #28]
   2b44c:	9308      	str	r3, [sp, #32]
   2b44e:	b33c      	cbz	r4, 2b4a0 <send_ack+0x86>
		.src = obo ? bt_mesh_primary_addr() : src,
   2b450:	f7e7 fc8c 	bl	12d6c <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   2b454:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   2b458:	f7e3 f970 	bl	e73c <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   2b45c:	b236      	sxth	r6, r6
   2b45e:	2e00      	cmp	r6, #0
	struct bt_mesh_net_tx tx = {
   2b460:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   2b464:	dd1e      	ble.n	2b4a4 <send_ack+0x8a>
	uint16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
   2b466:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b468:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
   2b46a:	03e4      	lsls	r4, r4, #15
   2b46c:	f3c3 030c 	ubfx	r3, r3, #0, #13
   2b470:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	sys_put_be16(val >> 16, dst);
   2b474:	0c2b      	lsrs	r3, r5, #16
	dst[0] = val >> 8;
   2b476:	0a1a      	lsrs	r2, r3, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
   2b478:	2100      	movs	r1, #0
   2b47a:	ba64      	rev16	r4, r4
   2b47c:	f88d 200a 	strb.w	r2, [sp, #10]
	dst[1] = val;
   2b480:	f88d 300b 	strb.w	r3, [sp, #11]
	dst[0] = val >> 8;
   2b484:	ba6d      	rev16	r5, r5
   2b486:	e9cd 1100 	strd	r1, r1, [sp]
   2b48a:	2306      	movs	r3, #6
   2b48c:	aa02      	add	r2, sp, #8
   2b48e:	a807      	add	r0, sp, #28
   2b490:	f8ad 4008 	strh.w	r4, [sp, #8]
   2b494:	f8ad 500c 	strh.w	r5, [sp, #12]
   2b498:	f7e5 fe7e 	bl	11198 <bt_mesh_ctl_send>
}
   2b49c:	b00b      	add	sp, #44	; 0x2c
   2b49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
   2b4a0:	4630      	mov	r0, r6
   2b4a2:	e7d7      	b.n	2b454 <send_ack+0x3a>
		return 0;
   2b4a4:	2000      	movs	r0, #0
   2b4a6:	e7f9      	b.n	2b49c <send_ack+0x82>

0002b4a8 <bt_mesh_rpl_update>:
	rpl->src = rx->ctx.addr;
   2b4a8:	890b      	ldrh	r3, [r1, #8]
   2b4aa:	8003      	strh	r3, [r0, #0]
	rpl->seq = rx->seq;
   2b4ac:	690b      	ldr	r3, [r1, #16]
   2b4ae:	6043      	str	r3, [r0, #4]
	rpl->old_iv = rx->old_iv;
   2b4b0:	7d0b      	ldrb	r3, [r1, #20]
   2b4b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
   2b4b6:	7083      	strb	r3, [r0, #2]
	entry->store = true;
   2b4b8:	2301      	movs	r3, #1
   2b4ba:	70c3      	strb	r3, [r0, #3]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   2b4bc:	2000      	movs	r0, #0
   2b4be:	f7e9 bfb3 	b.w	15428 <bt_mesh_settings_store_schedule>

0002b4c2 <bt_mesh_rpl_clear>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   2b4c2:	2000      	movs	r0, #0
   2b4c4:	f7e9 bfb0 	b.w	15428 <bt_mesh_settings_store_schedule>

0002b4c8 <sub_end>:
	notify_sub_end();
   2b4c8:	f7e6 bd10 	b.w	11eec <notify_sub_end>

0002b4cc <hb_publish_start_cb>:
	if (err) {
   2b4cc:	4608      	mov	r0, r1
   2b4ce:	b111      	cbz	r1, 2b4d6 <hb_publish_start_cb+0xa>
		hb_publish_end_cb(err, cb_data);
   2b4d0:	4611      	mov	r1, r2
   2b4d2:	f7e6 bd37 	b.w	11f44 <hb_publish_end_cb>
}
   2b4d6:	4770      	bx	lr

0002b4d8 <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   2b4d8:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   2b4da:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   2b4dc:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   2b4de:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2b4e2:	700a      	strb	r2, [r1, #0]
   2b4e4:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   2b4e6:	70c8      	strb	r0, [r1, #3]
}
   2b4e8:	4770      	bx	lr

0002b4ea <create_app_nonce>:
{
   2b4ea:	b538      	push	{r3, r4, r5, lr}
	if (ctx->dev_key) {
   2b4ec:	780b      	ldrb	r3, [r1, #0]
{
   2b4ee:	460c      	mov	r4, r1
	if (ctx->dev_key) {
   2b4f0:	2b00      	cmp	r3, #0
   2b4f2:	4601      	mov	r1, r0
		nonce[0] = 0x01;
   2b4f4:	bf14      	ite	ne
   2b4f6:	2302      	movne	r3, #2
   2b4f8:	2301      	moveq	r3, #1
   2b4fa:	f801 3b01 	strb.w	r3, [r1], #1
{
   2b4fe:	4605      	mov	r5, r0
	sys_put_be32((ctx->seq_num | ((uint32_t)ctx->aszmic << 31)), &nonce[1]);
   2b500:	68a3      	ldr	r3, [r4, #8]
   2b502:	7860      	ldrb	r0, [r4, #1]
   2b504:	ea43 70c0 	orr.w	r0, r3, r0, lsl #31
   2b508:	f7ff ffe6 	bl	2b4d8 <sys_put_be32>
	sys_put_be16(ctx->src, &nonce[5]);
   2b50c:	8863      	ldrh	r3, [r4, #2]
	dst[1] = val;
   2b50e:	71ab      	strb	r3, [r5, #6]
	dst[0] = val >> 8;
   2b510:	0a1a      	lsrs	r2, r3, #8
   2b512:	716a      	strb	r2, [r5, #5]
	sys_put_be16(ctx->dst, &nonce[7]);
   2b514:	88a3      	ldrh	r3, [r4, #4]
	dst[1] = val;
   2b516:	722b      	strb	r3, [r5, #8]
	dst[0] = val >> 8;
   2b518:	0a1a      	lsrs	r2, r3, #8
   2b51a:	71ea      	strb	r2, [r5, #7]
	sys_put_be32(ctx->iv_index, &nonce[9]);
   2b51c:	f105 0109 	add.w	r1, r5, #9
   2b520:	68e0      	ldr	r0, [r4, #12]
}
   2b522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_put_be32(ctx->iv_index, &nonce[9]);
   2b526:	f7ff bfd7 	b.w	2b4d8 <sys_put_be32>

0002b52a <bt_mesh_aes_cmac>:
{
   2b52a:	b570      	push	{r4, r5, r6, lr}
   2b52c:	b0c2      	sub	sp, #264	; 0x108
   2b52e:	460d      	mov	r5, r1
   2b530:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2b532:	4601      	mov	r1, r0
   2b534:	aa16      	add	r2, sp, #88	; 0x58
   2b536:	4668      	mov	r0, sp
{
   2b538:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2b53a:	f7fe f8a3 	bl	29684 <tc_cmac_setup>
   2b53e:	b130      	cbz	r0, 2b54e <bt_mesh_aes_cmac+0x24>
   2b540:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   2b542:	b944      	cbnz	r4, 2b556 <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   2b544:	4669      	mov	r1, sp
   2b546:	4630      	mov	r0, r6
   2b548:	f7fe f931 	bl	297ae <tc_cmac_final>
   2b54c:	b968      	cbnz	r0, 2b56a <bt_mesh_aes_cmac+0x40>
		return -EIO;
   2b54e:	f06f 0004 	mvn.w	r0, #4
}
   2b552:	b042      	add	sp, #264	; 0x108
   2b554:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   2b556:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   2b55a:	4668      	mov	r0, sp
   2b55c:	f7fe f8bd 	bl	296da <tc_cmac_update>
   2b560:	3508      	adds	r5, #8
   2b562:	2800      	cmp	r0, #0
   2b564:	d0f3      	beq.n	2b54e <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   2b566:	3c01      	subs	r4, #1
   2b568:	e7eb      	b.n	2b542 <bt_mesh_aes_cmac+0x18>
	return 0;
   2b56a:	4620      	mov	r0, r4
   2b56c:	e7f1      	b.n	2b552 <bt_mesh_aes_cmac+0x28>

0002b56e <bt_mesh_aes_cmac_one>:
{
   2b56e:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   2b570:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   2b574:	2201      	movs	r2, #1
   2b576:	4669      	mov	r1, sp
   2b578:	f7ff ffd7 	bl	2b52a <bt_mesh_aes_cmac>
}
   2b57c:	b003      	add	sp, #12
   2b57e:	f85d fb04 	ldr.w	pc, [sp], #4

0002b582 <bt_mesh_s1>:
{
   2b582:	b530      	push	{r4, r5, lr}
   2b584:	b085      	sub	sp, #20
   2b586:	4604      	mov	r4, r0
   2b588:	460d      	mov	r5, r1
	const uint8_t zero[16] = { 0 };
   2b58a:	2210      	movs	r2, #16
   2b58c:	2100      	movs	r1, #0
   2b58e:	4668      	mov	r0, sp
   2b590:	f002 fec6 	bl	2e320 <memset>
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   2b594:	4620      	mov	r0, r4
   2b596:	f7d6 fc37 	bl	1e08 <strlen>
   2b59a:	462b      	mov	r3, r5
   2b59c:	4602      	mov	r2, r0
   2b59e:	4621      	mov	r1, r4
   2b5a0:	4668      	mov	r0, sp
   2b5a2:	f7ff ffe4 	bl	2b56e <bt_mesh_aes_cmac_one>
}
   2b5a6:	3000      	adds	r0, #0
   2b5a8:	bf18      	it	ne
   2b5aa:	2001      	movne	r0, #1
   2b5ac:	b005      	add	sp, #20
   2b5ae:	bd30      	pop	{r4, r5, pc}

0002b5b0 <bt_mesh_k1>:
{
   2b5b0:	b570      	push	{r4, r5, r6, lr}
   2b5b2:	9d04      	ldr	r5, [sp, #16]
   2b5b4:	4616      	mov	r6, r2
   2b5b6:	461c      	mov	r4, r3
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   2b5b8:	460a      	mov	r2, r1
   2b5ba:	462b      	mov	r3, r5
   2b5bc:	4601      	mov	r1, r0
   2b5be:	4630      	mov	r0, r6
   2b5c0:	f7ff ffd5 	bl	2b56e <bt_mesh_aes_cmac_one>
	if (err < 0) {
   2b5c4:	2800      	cmp	r0, #0
   2b5c6:	db0a      	blt.n	2b5de <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   2b5c8:	4620      	mov	r0, r4
   2b5ca:	f7d6 fc1d 	bl	1e08 <strlen>
   2b5ce:	462b      	mov	r3, r5
   2b5d0:	4602      	mov	r2, r0
   2b5d2:	4621      	mov	r1, r4
   2b5d4:	4628      	mov	r0, r5
}
   2b5d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   2b5da:	f7ff bfc8 	b.w	2b56e <bt_mesh_aes_cmac_one>
}
   2b5de:	bd70      	pop	{r4, r5, r6, pc}

0002b5e0 <bt_mesh_net_obfuscate>:
{
   2b5e0:	b570      	push	{r4, r5, r6, lr}
   2b5e2:	b088      	sub	sp, #32
   2b5e4:	4604      	mov	r4, r0
   2b5e6:	460e      	mov	r6, r1
   2b5e8:	4615      	mov	r5, r2
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   2b5ea:	2100      	movs	r1, #0
   2b5ec:	2210      	movs	r2, #16
   2b5ee:	4668      	mov	r0, sp
   2b5f0:	f002 fe96 	bl	2e320 <memset>
	sys_put_be32(iv_index, &priv_rand[5]);
   2b5f4:	f10d 0105 	add.w	r1, sp, #5
   2b5f8:	4630      	mov	r0, r6
   2b5fa:	f7ff ff6d 	bl	2b4d8 <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
   2b5fe:	4623      	mov	r3, r4
	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
   2b600:	4669      	mov	r1, sp
	memcpy(&priv_rand[9], &pdu[7], 7);
   2b602:	f853 2f07 	ldr.w	r2, [r3, #7]!
   2b606:	f8cd 2009 	str.w	r2, [sp, #9]
   2b60a:	889a      	ldrh	r2, [r3, #4]
   2b60c:	f8ad 200d 	strh.w	r2, [sp, #13]
   2b610:	799b      	ldrb	r3, [r3, #6]
   2b612:	f88d 300f 	strb.w	r3, [sp, #15]
	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
   2b616:	aa04      	add	r2, sp, #16
   2b618:	4628      	mov	r0, r5
   2b61a:	f001 f977 	bl	2c90c <bt_encrypt_be>
	if (err) {
   2b61e:	b958      	cbnz	r0, 2b638 <bt_mesh_net_obfuscate+0x58>
   2b620:	4623      	mov	r3, r4
   2b622:	aa04      	add	r2, sp, #16
   2b624:	3406      	adds	r4, #6
		pdu[1 + i] ^= tmp[i];
   2b626:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   2b62a:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
   2b62e:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
   2b630:	ea81 0105 	eor.w	r1, r1, r5
   2b634:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
   2b636:	d1f6      	bne.n	2b626 <bt_mesh_net_obfuscate+0x46>
}
   2b638:	b008      	add	sp, #32
   2b63a:	bd70      	pop	{r4, r5, r6, pc}

0002b63c <bt_mesh_net_encrypt>:
{
   2b63c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b640:	460c      	mov	r4, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2b642:	6809      	ldr	r1, [r1, #0]
   2b644:	f891 9001 	ldrb.w	r9, [r1, #1]
   2b648:	f891 8002 	ldrb.w	r8, [r1, #2]
   2b64c:	f891 e003 	ldrb.w	lr, [r1, #3]
   2b650:	f891 c004 	ldrb.w	ip, [r1, #4]
   2b654:	794f      	ldrb	r7, [r1, #5]
   2b656:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   2b65a:	4605      	mov	r5, r0
   2b65c:	b089      	sub	sp, #36	; 0x24
   2b65e:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2b660:	bf14      	ite	ne
   2b662:	2608      	movne	r6, #8
   2b664:	2604      	moveq	r6, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   2b666:	798a      	ldrb	r2, [r1, #6]
   2b668:	b363      	cbz	r3, 2b6c4 <bt_mesh_net_encrypt+0x88>
	nonce[0] = 0x03;
   2b66a:	2303      	movs	r3, #3
   2b66c:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   2b670:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2b674:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2b678:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2b67c:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   2b680:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   2b684:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   2b686:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   2b68a:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   2b68e:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   2b692:	f7ff ff21 	bl	2b4d8 <sys_put_be32>
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2b696:	6822      	ldr	r2, [r4, #0]
   2b698:	88a3      	ldrh	r3, [r4, #4]
   2b69a:	3207      	adds	r2, #7
   2b69c:	2100      	movs	r1, #0
   2b69e:	e9cd 1100 	strd	r1, r1, [sp]
   2b6a2:	4628      	mov	r0, r5
   2b6a4:	e9cd 2602 	strd	r2, r6, [sp, #8]
   2b6a8:	3b07      	subs	r3, #7
   2b6aa:	a904      	add	r1, sp, #16
   2b6ac:	f7fe fab1 	bl	29c12 <bt_ccm_encrypt>
	if (!err) {
   2b6b0:	4605      	mov	r5, r0
   2b6b2:	b918      	cbnz	r0, 2b6bc <bt_mesh_net_encrypt+0x80>
		net_buf_simple_add(buf, mic_len);
   2b6b4:	4631      	mov	r1, r6
   2b6b6:	4620      	mov	r0, r4
   2b6b8:	f7f4 fc72 	bl	1ffa0 <net_buf_simple_add>
}
   2b6bc:	4628      	mov	r0, r5
   2b6be:	b009      	add	sp, #36	; 0x24
   2b6c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   2b6c4:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   2b6c8:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   2b6cc:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2b6d0:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2b6d4:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2b6d8:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   2b6dc:	f88d 2016 	strb.w	r2, [sp, #22]
   2b6e0:	e7d1      	b.n	2b686 <bt_mesh_net_encrypt+0x4a>

0002b6e2 <bt_mesh_net_decrypt>:
{
   2b6e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b6e6:	460e      	mov	r6, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2b6e8:	6809      	ldr	r1, [r1, #0]
   2b6ea:	f891 9001 	ldrb.w	r9, [r1, #1]
   2b6ee:	f891 8002 	ldrb.w	r8, [r1, #2]
   2b6f2:	f891 e003 	ldrb.w	lr, [r1, #3]
   2b6f6:	f891 c004 	ldrb.w	ip, [r1, #4]
   2b6fa:	794f      	ldrb	r7, [r1, #5]
   2b6fc:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   2b700:	4605      	mov	r5, r0
   2b702:	b089      	sub	sp, #36	; 0x24
   2b704:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2b706:	bf14      	ite	ne
   2b708:	2408      	movne	r4, #8
   2b70a:	2404      	moveq	r4, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   2b70c:	798a      	ldrb	r2, [r1, #6]
   2b70e:	b343      	cbz	r3, 2b762 <bt_mesh_net_decrypt+0x80>
	nonce[0] = 0x03;
   2b710:	2303      	movs	r3, #3
   2b712:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   2b716:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2b71a:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2b71e:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2b722:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   2b726:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   2b72a:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   2b72c:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   2b730:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   2b734:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   2b738:	f7ff fece 	bl	2b4d8 <sys_put_be32>
	buf->len -= mic_len;
   2b73c:	88b3      	ldrh	r3, [r6, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2b73e:	6832      	ldr	r2, [r6, #0]
	buf->len -= mic_len;
   2b740:	1b1b      	subs	r3, r3, r4
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2b742:	3207      	adds	r2, #7
	buf->len -= mic_len;
   2b744:	b29b      	uxth	r3, r3
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2b746:	2100      	movs	r1, #0
	buf->len -= mic_len;
   2b748:	80b3      	strh	r3, [r6, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2b74a:	e9cd 1100 	strd	r1, r1, [sp]
   2b74e:	e9cd 2402 	strd	r2, r4, [sp, #8]
   2b752:	3b07      	subs	r3, #7
   2b754:	a904      	add	r1, sp, #16
   2b756:	4628      	mov	r0, r5
   2b758:	f7fe fa2d 	bl	29bb6 <bt_ccm_decrypt>
}
   2b75c:	b009      	add	sp, #36	; 0x24
   2b75e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   2b762:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   2b766:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   2b76a:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2b76e:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2b772:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2b776:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   2b77a:	f88d 2016 	strb.w	r2, [sp, #22]
   2b77e:	e7d5      	b.n	2b72c <bt_mesh_net_decrypt+0x4a>

0002b780 <bt_mesh_app_encrypt>:
{
   2b780:	b570      	push	{r4, r5, r6, lr}
   2b782:	460d      	mov	r5, r1
   2b784:	b088      	sub	sp, #32
   2b786:	4606      	mov	r6, r0
	create_app_nonce(nonce, ctx);
   2b788:	a804      	add	r0, sp, #16
{
   2b78a:	4614      	mov	r4, r2
	create_app_nonce(nonce, ctx);
   2b78c:	f7ff fead 	bl	2b4ea <create_app_nonce>
	err = bt_ccm_encrypt(key, nonce, buf->data, buf->len, ctx->ad,
   2b790:	692b      	ldr	r3, [r5, #16]
   2b792:	7868      	ldrb	r0, [r5, #1]
   2b794:	6822      	ldr	r2, [r4, #0]
   2b796:	2b00      	cmp	r3, #0
   2b798:	bf14      	ite	ne
   2b79a:	2110      	movne	r1, #16
   2b79c:	2100      	moveq	r1, #0
   2b79e:	2800      	cmp	r0, #0
   2b7a0:	bf14      	ite	ne
   2b7a2:	2008      	movne	r0, #8
   2b7a4:	2004      	moveq	r0, #4
   2b7a6:	e9cd 3100 	strd	r3, r1, [sp]
   2b7aa:	e9cd 2002 	strd	r2, r0, [sp, #8]
   2b7ae:	88a3      	ldrh	r3, [r4, #4]
   2b7b0:	4630      	mov	r0, r6
   2b7b2:	a904      	add	r1, sp, #16
   2b7b4:	f7fe fa2d 	bl	29c12 <bt_ccm_encrypt>
	if (!err) {
   2b7b8:	4606      	mov	r6, r0
   2b7ba:	b938      	cbnz	r0, 2b7cc <bt_mesh_app_encrypt+0x4c>
		net_buf_simple_add(buf, APP_MIC_LEN(ctx->aszmic));
   2b7bc:	786b      	ldrb	r3, [r5, #1]
   2b7be:	2b00      	cmp	r3, #0
   2b7c0:	bf14      	ite	ne
   2b7c2:	2108      	movne	r1, #8
   2b7c4:	2104      	moveq	r1, #4
   2b7c6:	4620      	mov	r0, r4
   2b7c8:	f7f4 fbea 	bl	1ffa0 <net_buf_simple_add>
}
   2b7cc:	4630      	mov	r0, r6
   2b7ce:	b008      	add	sp, #32
   2b7d0:	bd70      	pop	{r4, r5, r6, pc}

0002b7d2 <bt_mesh_app_decrypt>:
{
   2b7d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b7d4:	460d      	mov	r5, r1
   2b7d6:	b089      	sub	sp, #36	; 0x24
   2b7d8:	4607      	mov	r7, r0
	create_app_nonce(nonce, ctx);
   2b7da:	a804      	add	r0, sp, #16
{
   2b7dc:	4614      	mov	r4, r2
   2b7de:	461e      	mov	r6, r3
	create_app_nonce(nonce, ctx);
   2b7e0:	f7ff fe83 	bl	2b4ea <create_app_nonce>
	err = bt_ccm_decrypt(key, nonce, buf->data, buf->len, ctx->ad,
   2b7e4:	692b      	ldr	r3, [r5, #16]
   2b7e6:	7868      	ldrb	r0, [r5, #1]
   2b7e8:	6831      	ldr	r1, [r6, #0]
   2b7ea:	2b00      	cmp	r3, #0
   2b7ec:	bf14      	ite	ne
   2b7ee:	2210      	movne	r2, #16
   2b7f0:	2200      	moveq	r2, #0
   2b7f2:	2800      	cmp	r0, #0
   2b7f4:	bf14      	ite	ne
   2b7f6:	2008      	movne	r0, #8
   2b7f8:	2004      	moveq	r0, #4
   2b7fa:	e9cd 1002 	strd	r1, r0, [sp, #8]
   2b7fe:	e9cd 3200 	strd	r3, r2, [sp]
   2b802:	a904      	add	r1, sp, #16
   2b804:	88a3      	ldrh	r3, [r4, #4]
   2b806:	6822      	ldr	r2, [r4, #0]
   2b808:	4638      	mov	r0, r7
   2b80a:	f7fe f9d4 	bl	29bb6 <bt_ccm_decrypt>
	if (!err) {
   2b80e:	4605      	mov	r5, r0
   2b810:	b918      	cbnz	r0, 2b81a <bt_mesh_app_decrypt+0x48>
		net_buf_simple_add(out, buf->len);
   2b812:	88a1      	ldrh	r1, [r4, #4]
   2b814:	4630      	mov	r0, r6
   2b816:	f7f4 fbc3 	bl	1ffa0 <net_buf_simple_add>
}
   2b81a:	4628      	mov	r0, r5
   2b81c:	b009      	add	sp, #36	; 0x24
   2b81e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b820 <bt_mesh_prov_conf_salt>:
{
   2b820:	b530      	push	{r4, r5, lr}
   2b822:	b085      	sub	sp, #20
   2b824:	4604      	mov	r4, r0
   2b826:	460d      	mov	r5, r1
	const uint8_t conf_salt_key[16] = { 0 };
   2b828:	2210      	movs	r2, #16
   2b82a:	2100      	movs	r1, #0
   2b82c:	4668      	mov	r0, sp
   2b82e:	f002 fd77 	bl	2e320 <memset>
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
   2b832:	462b      	mov	r3, r5
   2b834:	2291      	movs	r2, #145	; 0x91
   2b836:	4621      	mov	r1, r4
   2b838:	4668      	mov	r0, sp
   2b83a:	f7ff fe98 	bl	2b56e <bt_mesh_aes_cmac_one>
}
   2b83e:	b005      	add	sp, #20
   2b840:	bd30      	pop	{r4, r5, pc}

0002b842 <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const uint8_t conf_key[16], const uint8_t rand[16],
		      const uint8_t auth[16], uint8_t conf[16])
{
   2b842:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
   2b844:	9100      	str	r1, [sp, #0]
   2b846:	2110      	movs	r1, #16
   2b848:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2b84c:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
   2b84e:	2202      	movs	r2, #2
   2b850:	4669      	mov	r1, sp
   2b852:	f7ff fe6a 	bl	2b52a <bt_mesh_aes_cmac>
}
   2b856:	b005      	add	sp, #20
   2b858:	f85d fb04 	ldr.w	pc, [sp], #4

0002b85c <bt_mesh_prov_decrypt>:

int bt_mesh_prov_decrypt(const uint8_t key[16], uint8_t nonce[13],
			 const uint8_t data[25 + 8], uint8_t out[25])
{
   2b85c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
   2b85e:	2408      	movs	r4, #8
   2b860:	e9cd 3402 	strd	r3, r4, [sp, #8]
   2b864:	2300      	movs	r3, #0
   2b866:	e9cd 3300 	strd	r3, r3, [sp]
   2b86a:	2319      	movs	r3, #25
   2b86c:	f7fe f9a3 	bl	29bb6 <bt_ccm_decrypt>
}
   2b870:	b004      	add	sp, #16
   2b872:	bd10      	pop	{r4, pc}

0002b874 <bt_mesh_beacon_auth>:
}

int bt_mesh_beacon_auth(const uint8_t beacon_key[16], uint8_t flags,
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8])
{
   2b874:	b530      	push	{r4, r5, lr}
   2b876:	b089      	sub	sp, #36	; 0x24
   2b878:	4605      	mov	r5, r0

	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
   2b87a:	f88d 1000 	strb.w	r1, [sp]
	memcpy(&msg[1], net_id, 8);
   2b87e:	6811      	ldr	r1, [r2, #0]
   2b880:	f8cd 1001 	str.w	r1, [sp, #1]
   2b884:	6851      	ldr	r1, [r2, #4]
   2b886:	f8cd 1005 	str.w	r1, [sp, #5]
	sys_put_be32(iv_index, &msg[9]);
   2b88a:	4618      	mov	r0, r3
   2b88c:	f10d 0109 	add.w	r1, sp, #9
{
   2b890:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sys_put_be32(iv_index, &msg[9]);
   2b892:	f7ff fe21 	bl	2b4d8 <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   2b896:	220d      	movs	r2, #13
   2b898:	ab04      	add	r3, sp, #16
   2b89a:	4669      	mov	r1, sp
   2b89c:	4628      	mov	r0, r5
   2b89e:	f7ff fe66 	bl	2b56e <bt_mesh_aes_cmac_one>
	if (!err) {
   2b8a2:	4602      	mov	r2, r0
   2b8a4:	b918      	cbnz	r0, 2b8ae <bt_mesh_beacon_auth+0x3a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b8a6:	ab04      	add	r3, sp, #16
   2b8a8:	cb03      	ldmia	r3!, {r0, r1}
   2b8aa:	6020      	str	r0, [r4, #0]
   2b8ac:	6061      	str	r1, [r4, #4]
		memcpy(auth, tmp, 8);
	}

	return err;
}
   2b8ae:	4610      	mov	r0, r2
   2b8b0:	b009      	add	sp, #36	; 0x24
   2b8b2:	bd30      	pop	{r4, r5, pc}

0002b8b4 <k_uptime_get_32>:
{
   2b8b4:	b510      	push	{r4, lr}
   2b8b6:	f002 fc58 	bl	2e16a <z_impl_k_uptime_ticks>
   2b8ba:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2b8be:	fba0 2304 	umull	r2, r3, r0, r4
   2b8c2:	fb04 3301 	mla	r3, r4, r1, r3
   2b8c6:	0bd0      	lsrs	r0, r2, #15
}
   2b8c8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2b8cc:	bd10      	pop	{r4, pc}

0002b8ce <sig_mod_set>:
{
   2b8ce:	b507      	push	{r0, r1, r2, lr}
	return mod_set(false, name, len_rd, read_cb, cb_arg);
   2b8d0:	9300      	str	r3, [sp, #0]
   2b8d2:	4613      	mov	r3, r2
   2b8d4:	460a      	mov	r2, r1
   2b8d6:	4601      	mov	r1, r0
   2b8d8:	2000      	movs	r0, #0
   2b8da:	f7e7 f941 	bl	12b60 <mod_set>
}
   2b8de:	b003      	add	sp, #12
   2b8e0:	f85d fb04 	ldr.w	pc, [sp], #4

0002b8e4 <vnd_mod_set>:
{
   2b8e4:	b507      	push	{r0, r1, r2, lr}
	return mod_set(true, name, len_rd, read_cb, cb_arg);
   2b8e6:	9300      	str	r3, [sp, #0]
   2b8e8:	4613      	mov	r3, r2
   2b8ea:	460a      	mov	r2, r1
   2b8ec:	4601      	mov	r1, r0
   2b8ee:	2001      	movs	r0, #1
   2b8f0:	f7e7 f936 	bl	12b60 <mod_set>
}
   2b8f4:	b003      	add	sp, #12
   2b8f6:	f85d fb04 	ldr.w	pc, [sp], #4

0002b8fa <bt_mesh_model_find_group>:
		.mod = *mod,
   2b8fa:	6800      	ldr	r0, [r0, #0]
		if (mod->groups[i] == addr) {
   2b8fc:	89c3      	ldrh	r3, [r0, #14]
   2b8fe:	428b      	cmp	r3, r1
			return &mod->groups[i];
   2b900:	bf0c      	ite	eq
   2b902:	300e      	addeq	r0, #14
	ctx->entry = model_group_get(mod, ctx->addr);
   2b904:	2000      	movne	r0, #0
}
   2b906:	4770      	bx	lr

0002b908 <bt_mesh_model_msg_init>:
{
   2b908:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   2b90a:	6883      	ldr	r3, [r0, #8]
   2b90c:	4604      	mov	r4, r0
   2b90e:	b913      	cbnz	r3, 2b916 <bt_mesh_model_msg_init+0xe>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   2b910:	f100 030c 	add.w	r3, r0, #12
   2b914:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   2b916:	68a3      	ldr	r3, [r4, #8]
   2b918:	6023      	str	r3, [r4, #0]
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   2b91a:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0U;
   2b91c:	f04f 0300 	mov.w	r3, #0
   2b920:	80a3      	strh	r3, [r4, #4]
   2b922:	d805      	bhi.n	2b930 <bt_mesh_model_msg_init+0x28>
		net_buf_simple_add_u8(msg, opcode);
   2b924:	4620      	mov	r0, r4
   2b926:	b2c9      	uxtb	r1, r1
}
   2b928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   2b92c:	f001 be52 	b.w	2d5d4 <net_buf_simple_add_u8>
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   2b930:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   2b934:	b28d      	uxth	r5, r1
   2b936:	d205      	bcs.n	2b944 <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   2b938:	4629      	mov	r1, r5
   2b93a:	4620      	mov	r0, r4
}
   2b93c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   2b940:	f001 be58 	b.w	2d5f4 <net_buf_simple_add_be16>
		net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   2b944:	f3c1 4107 	ubfx	r1, r1, #16, #8
   2b948:	4620      	mov	r0, r4
   2b94a:	f001 fe43 	bl	2d5d4 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   2b94e:	4629      	mov	r1, r5
   2b950:	4620      	mov	r0, r4
}
   2b952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   2b956:	f001 be44 	b.w	2d5e2 <net_buf_simple_add_le16>

0002b95a <bt_mesh_model_send>:
{
   2b95a:	b570      	push	{r4, r5, r6, lr}
   2b95c:	b086      	sub	sp, #24
   2b95e:	4615      	mov	r5, r2
	struct bt_mesh_net_tx tx = {
   2b960:	2200      	movs	r2, #0
{
   2b962:	461e      	mov	r6, r3
	struct bt_mesh_net_tx tx = {
   2b964:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   2b968:	4604      	mov	r4, r0
	struct bt_mesh_net_tx tx = {
   2b96a:	9203      	str	r2, [sp, #12]
		.src = bt_mesh_model_elem(model)->addr,
   2b96c:	f7e7 f8be 	bl	12aec <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   2b970:	8803      	ldrh	r3, [r0, #0]
   2b972:	f8ad 3014 	strh.w	r3, [sp, #20]
	return model_send(model, &tx, false, msg, cb, cb_data);
   2b976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b978:	a903      	add	r1, sp, #12
   2b97a:	e9cd 6300 	strd	r6, r3, [sp]
   2b97e:	4620      	mov	r0, r4
   2b980:	462b      	mov	r3, r5
   2b982:	f7e6 febb 	bl	126fc <model_send>
}
   2b986:	b006      	add	sp, #24
   2b988:	bd70      	pop	{r4, r5, r6, pc}

0002b98a <bt_mesh_model_find_vnd>:
{
   2b98a:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2b98c:	7947      	ldrb	r7, [r0, #5]
{
   2b98e:	4605      	mov	r5, r0
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2b990:	2300      	movs	r3, #0
		if (elem->vnd_models[i].vnd.company == company &&
   2b992:	f04f 0c1c 	mov.w	ip, #28
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2b996:	b2d8      	uxtb	r0, r3
   2b998:	4287      	cmp	r7, r0
   2b99a:	d801      	bhi.n	2b9a0 <bt_mesh_model_find_vnd+0x16>
	return NULL;
   2b99c:	2000      	movs	r0, #0
}
   2b99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   2b9a0:	fb0c f403 	mul.w	r4, ip, r3
   2b9a4:	68ee      	ldr	r6, [r5, #12]
   2b9a6:	1930      	adds	r0, r6, r4
   2b9a8:	5b34      	ldrh	r4, [r6, r4]
   2b9aa:	428c      	cmp	r4, r1
   2b9ac:	d102      	bne.n	2b9b4 <bt_mesh_model_find_vnd+0x2a>
   2b9ae:	8844      	ldrh	r4, [r0, #2]
   2b9b0:	4294      	cmp	r4, r2
   2b9b2:	d0f4      	beq.n	2b99e <bt_mesh_model_find_vnd+0x14>
   2b9b4:	3301      	adds	r3, #1
   2b9b6:	e7ee      	b.n	2b996 <bt_mesh_model_find_vnd+0xc>

0002b9b8 <bt_mesh_model_find>:
{
   2b9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->model_count; i++) {
   2b9ba:	7906      	ldrb	r6, [r0, #4]
   2b9bc:	2300      	movs	r3, #0
		if (elem->models[i].id == id) {
   2b9be:	271c      	movs	r7, #28
	for (i = 0U; i < elem->model_count; i++) {
   2b9c0:	b2da      	uxtb	r2, r3
   2b9c2:	4296      	cmp	r6, r2
   2b9c4:	d801      	bhi.n	2b9ca <bt_mesh_model_find+0x12>
	return NULL;
   2b9c6:	2200      	movs	r2, #0
   2b9c8:	e008      	b.n	2b9dc <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
   2b9ca:	fb07 f403 	mul.w	r4, r7, r3
   2b9ce:	6885      	ldr	r5, [r0, #8]
   2b9d0:	192a      	adds	r2, r5, r4
   2b9d2:	5b2c      	ldrh	r4, [r5, r4]
   2b9d4:	428c      	cmp	r4, r1
   2b9d6:	f103 0301 	add.w	r3, r3, #1
   2b9da:	d1f1      	bne.n	2b9c0 <bt_mesh_model_find+0x8>
}
   2b9dc:	4610      	mov	r0, r2
   2b9de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b9e0 <bt_mesh_model_root>:
}
   2b9e0:	4770      	bx	lr

0002b9e2 <bt_mesh_model_tree_walk>:
{
   2b9e2:	460b      	mov	r3, r1
		    cb(m, (uint32_t)depth, user_data) == BT_MESH_WALK_STOP) {
   2b9e4:	2100      	movs	r1, #0
   2b9e6:	4718      	bx	r3

0002b9e8 <bt_mesh_model_bind_store>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   2b9e8:	88c3      	ldrh	r3, [r0, #6]
   2b9ea:	f043 0301 	orr.w	r3, r3, #1
   2b9ee:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   2b9f0:	2008      	movs	r0, #8
   2b9f2:	f7e9 bd19 	b.w	15428 <bt_mesh_settings_store_schedule>

0002b9f6 <bt_mesh_model_sub_store>:
	mod->flags |= BT_MESH_MOD_SUB_PENDING;
   2b9f6:	88c3      	ldrh	r3, [r0, #6]
   2b9f8:	f043 0302 	orr.w	r3, r3, #2
   2b9fc:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   2b9fe:	2008      	movs	r0, #8
   2ba00:	f7e9 bd12 	b.w	15428 <bt_mesh_settings_store_schedule>

0002ba04 <bt_mesh_model_pub_store>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   2ba04:	88c3      	ldrh	r3, [r0, #6]
   2ba06:	f043 0304 	orr.w	r3, r3, #4
   2ba0a:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   2ba0c:	2008      	movs	r0, #8
   2ba0e:	f7e9 bd0b 	b.w	15428 <bt_mesh_settings_store_schedule>

0002ba12 <key_idx_pack>:

#include <sys/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				uint16_t idx1, uint16_t idx2)
{
   2ba12:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   2ba14:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   2ba18:	4605      	mov	r5, r0
   2ba1a:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   2ba1c:	b289      	uxth	r1, r1
   2ba1e:	f001 fde0 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   2ba22:	f3c4 1107 	ubfx	r1, r4, #4, #8
   2ba26:	4628      	mov	r0, r5
}
   2ba28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   2ba2c:	f001 bdd2 	b.w	2d5d4 <net_buf_simple_add_u8>

0002ba30 <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  uint16_t *idx1, uint16_t *idx2)
{
   2ba30:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   2ba32:	6804      	ldr	r4, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2ba34:	7865      	ldrb	r5, [r4, #1]
   2ba36:	7823      	ldrb	r3, [r4, #0]
   2ba38:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2ba3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2ba40:	800b      	strh	r3, [r1, #0]
   2ba42:	78a1      	ldrb	r1, [r4, #2]
   2ba44:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   2ba46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2ba4a:	091b      	lsrs	r3, r3, #4
   2ba4c:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   2ba4e:	2103      	movs	r1, #3
}
   2ba50:	bc30      	pop	{r4, r5}
	net_buf_simple_pull(buf, 3);
   2ba52:	f7f4 ba6b 	b.w	1ff2c <net_buf_simple_pull>

0002ba56 <bt_mesh_hb_pwr2>:
	if (!val) {
   2ba56:	b158      	cbz	r0, 2ba70 <bt_mesh_hb_pwr2+0x1a>
	} else if (val == 0xff || val == 0x11) {
   2ba58:	28ff      	cmp	r0, #255	; 0xff
   2ba5a:	d007      	beq.n	2ba6c <bt_mesh_hb_pwr2+0x16>
   2ba5c:	2811      	cmp	r0, #17
   2ba5e:	d005      	beq.n	2ba6c <bt_mesh_hb_pwr2+0x16>
		return (1 << (val - 1));
   2ba60:	2301      	movs	r3, #1
   2ba62:	3801      	subs	r0, #1
   2ba64:	fa03 f000 	lsl.w	r0, r3, r0
   2ba68:	b280      	uxth	r0, r0
   2ba6a:	4770      	bx	lr
		return 0xffff;
   2ba6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   2ba70:	4770      	bx	lr

0002ba72 <mod_sub_clear_visitor>:
{
   2ba72:	b508      	push	{r3, lr}
   2ba74:	300e      	adds	r0, #14
   2ba76:	f7e7 fe61 	bl	1373c <mod_sub_list_clear.isra.3.part.4>
}
   2ba7a:	2001      	movs	r0, #1
   2ba7c:	bd08      	pop	{r3, pc}

0002ba7e <mod_reset>:
{
   2ba7e:	b510      	push	{r4, lr}
   2ba80:	4604      	mov	r4, r0
   2ba82:	300e      	adds	r0, #14
   2ba84:	f7e7 fe5a 	bl	1373c <mod_sub_list_clear.isra.3.part.4>
		if (clear_count) {
   2ba88:	b110      	cbz	r0, 2ba90 <mod_reset+0x12>
			bt_mesh_model_sub_store(mod);
   2ba8a:	4620      	mov	r0, r4
   2ba8c:	f7ff ffb3 	bl	2b9f6 <bt_mesh_model_sub_store>
	if (mod->cb && mod->cb->reset) {
   2ba90:	6963      	ldr	r3, [r4, #20]
   2ba92:	b12b      	cbz	r3, 2baa0 <mod_reset+0x22>
   2ba94:	68db      	ldr	r3, [r3, #12]
   2ba96:	b11b      	cbz	r3, 2baa0 <mod_reset+0x22>
		mod->cb->reset(mod);
   2ba98:	4620      	mov	r0, r4
}
   2ba9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mod->cb->reset(mod);
   2ba9e:	4718      	bx	r3
}
   2baa0:	bd10      	pop	{r4, pc}

0002baa2 <app_key_del>:
{
   2baa2:	b530      	push	{r4, r5, lr}
   2baa4:	b085      	sub	sp, #20
   2baa6:	4604      	mov	r4, r0
   2baa8:	460d      	mov	r5, r1
   2baaa:	4610      	mov	r0, r2
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   2baac:	a903      	add	r1, sp, #12
   2baae:	f10d 020e 	add.w	r2, sp, #14
   2bab2:	f7ff ffbd 	bl	2ba30 <key_idx_unpack>
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   2bab6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2baba:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2babe:	f7e4 fd6f 	bl	105a0 <bt_mesh_app_key_del>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2bac2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2bac6:	9300      	str	r3, [sp, #0]
   2bac8:	4602      	mov	r2, r0
   2baca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2bace:	4629      	mov	r1, r5
   2bad0:	4620      	mov	r0, r4
   2bad2:	f7e7 fff7 	bl	13ac4 <send_app_key_status>
}
   2bad6:	b005      	add	sp, #20
   2bad8:	bd30      	pop	{r4, r5, pc}

0002bada <app_key_update>:
{
   2bada:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2badc:	4614      	mov	r4, r2
   2bade:	4605      	mov	r5, r0
   2bae0:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   2bae2:	f10d 020e 	add.w	r2, sp, #14
   2bae6:	a903      	add	r1, sp, #12
   2bae8:	4620      	mov	r0, r4
   2baea:	f7ff ffa1 	bl	2ba30 <key_idx_unpack>
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   2baee:	6822      	ldr	r2, [r4, #0]
   2baf0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2baf4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2baf8:	f7e4 fd08 	bl	1050c <bt_mesh_app_key_update>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2bafc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2bb00:	9300      	str	r3, [sp, #0]
   2bb02:	4602      	mov	r2, r0
   2bb04:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2bb08:	4631      	mov	r1, r6
   2bb0a:	4628      	mov	r0, r5
   2bb0c:	f7e7 ffda 	bl	13ac4 <send_app_key_status>
}
   2bb10:	b004      	add	sp, #16
   2bb12:	bd70      	pop	{r4, r5, r6, pc}

0002bb14 <app_key_add>:
{
   2bb14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2bb16:	4614      	mov	r4, r2
   2bb18:	4605      	mov	r5, r0
   2bb1a:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   2bb1c:	f10d 020e 	add.w	r2, sp, #14
   2bb20:	a903      	add	r1, sp, #12
   2bb22:	4620      	mov	r0, r4
   2bb24:	f7ff ff84 	bl	2ba30 <key_idx_unpack>
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   2bb28:	6822      	ldr	r2, [r4, #0]
   2bb2a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2bb2e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2bb32:	f7e4 fca7 	bl	10484 <bt_mesh_app_key_add>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2bb36:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2bb3a:	9300      	str	r3, [sp, #0]
   2bb3c:	4602      	mov	r2, r0
   2bb3e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2bb42:	4631      	mov	r1, r6
   2bb44:	4628      	mov	r0, r5
   2bb46:	f7e7 ffbd 	bl	13ac4 <send_app_key_status>
}
   2bb4a:	b004      	add	sp, #16
   2bb4c:	bd70      	pop	{r4, r5, r6, pc}

0002bb4e <friend_get>:
	send_friend_status(model, ctx);
   2bb4e:	f7e7 bfe5 	b.w	13b1c <send_friend_status>

0002bb52 <get_model>:
{
   2bb52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   2bb54:	888b      	ldrh	r3, [r1, #4]
   2bb56:	2b03      	cmp	r3, #3
{
   2bb58:	4605      	mov	r5, r0
   2bb5a:	460c      	mov	r4, r1
   2bb5c:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   2bb5e:	4608      	mov	r0, r1
	if (buf->len < 4) {
   2bb60:	d809      	bhi.n	2bb76 <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   2bb62:	f001 fced 	bl	2d540 <net_buf_simple_pull_le16>
		*vnd = false;
   2bb66:	2300      	movs	r3, #0
   2bb68:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
   2bb6a:	4601      	mov	r1, r0
   2bb6c:	4628      	mov	r0, r5
}
   2bb6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   2bb72:	f7ff bf21 	b.w	2b9b8 <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   2bb76:	f001 fce3 	bl	2d540 <net_buf_simple_pull_le16>
   2bb7a:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   2bb7c:	4620      	mov	r0, r4
   2bb7e:	f001 fcdf 	bl	2d540 <net_buf_simple_pull_le16>
		*vnd = true;
   2bb82:	2301      	movs	r3, #1
   2bb84:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
   2bb86:	4602      	mov	r2, r0
   2bb88:	4639      	mov	r1, r7
   2bb8a:	4628      	mov	r0, r5
}
   2bb8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   2bb90:	f7ff befb 	b.w	2b98a <bt_mesh_model_find_vnd>

0002bb94 <create_mod_app_status.isra.13>:
static void create_mod_app_status(struct net_buf_simple *msg,
   2bb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bb98:	4604      	mov	r4, r0
   2bb9a:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   2bb9c:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   2bba0:	4690      	mov	r8, r2
   2bba2:	461f      	mov	r7, r3
   2bba4:	9d07      	ldr	r5, [sp, #28]
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   2bba6:	f7ff feaf 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   2bbaa:	f89d 1018 	ldrb.w	r1, [sp, #24]
   2bbae:	4620      	mov	r0, r4
   2bbb0:	f001 fd10 	bl	2d5d4 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   2bbb4:	4641      	mov	r1, r8
   2bbb6:	4620      	mov	r0, r4
   2bbb8:	f001 fd13 	bl	2d5e2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   2bbbc:	4639      	mov	r1, r7
   2bbbe:	4620      	mov	r0, r4
   2bbc0:	f001 fd0f 	bl	2d5e2 <net_buf_simple_add_le16>
	if (vnd) {
   2bbc4:	b13e      	cbz	r6, 2bbd6 <create_mod_app_status.isra.13+0x42>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   2bbc6:	2104      	movs	r1, #4
   2bbc8:	4620      	mov	r0, r4
   2bbca:	f7f4 f9e9 	bl	1ffa0 <net_buf_simple_add>
   2bbce:	682b      	ldr	r3, [r5, #0]
   2bbd0:	6003      	str	r3, [r0, #0]
}
   2bbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   2bbd6:	2102      	movs	r1, #2
   2bbd8:	4620      	mov	r0, r4
   2bbda:	f7f4 f9e1 	bl	1ffa0 <net_buf_simple_add>
   2bbde:	882b      	ldrh	r3, [r5, #0]
   2bbe0:	8003      	strh	r3, [r0, #0]
   2bbe2:	e7f6      	b.n	2bbd2 <create_mod_app_status.isra.13+0x3e>

0002bbe4 <gatt_proxy_get>:
	send_gatt_proxy_status(model, ctx);
   2bbe4:	f7e8 bc46 	b.w	14474 <send_gatt_proxy_status>

0002bbe8 <mod_unbind.part.2.constprop.28>:
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   2bbe8:	b530      	push	{r4, r5, lr}
		if (model->keys[i] != key_idx) {
   2bbea:	8985      	ldrh	r5, [r0, #12]
   2bbec:	428d      	cmp	r5, r1
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   2bbee:	b085      	sub	sp, #20
   2bbf0:	4604      	mov	r4, r0
		if (model->keys[i] != key_idx) {
   2bbf2:	d114      	bne.n	2bc1e <mod_unbind.part.2.constprop.28+0x36>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   2bbf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2bbf8:	8183      	strh	r3, [r0, #12]
			bt_mesh_model_bind_store(model);
   2bbfa:	f7ff fef5 	bl	2b9e8 <bt_mesh_model_bind_store>
		if (model->pub && model->pub->key == key_idx) {
   2bbfe:	68a3      	ldr	r3, [r4, #8]
   2bc00:	b16b      	cbz	r3, 2bc1e <mod_unbind.part.2.constprop.28+0x36>
   2bc02:	88db      	ldrh	r3, [r3, #6]
   2bc04:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2bc08:	42ab      	cmp	r3, r5
   2bc0a:	d108      	bne.n	2bc1e <mod_unbind.part.2.constprop.28+0x36>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   2bc0c:	2300      	movs	r3, #0
   2bc0e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2bc12:	9300      	str	r3, [sp, #0]
   2bc14:	461a      	mov	r2, r3
   2bc16:	4619      	mov	r1, r3
   2bc18:	4620      	mov	r0, r4
   2bc1a:	f7e8 fd79 	bl	14710 <_mod_pub_set.constprop.29>
}
   2bc1e:	2000      	movs	r0, #0
   2bc20:	b005      	add	sp, #20
   2bc22:	bd30      	pop	{r4, r5, pc}

0002bc24 <heartbeat_sub_get>:
{
   2bc24:	b530      	push	{r4, r5, lr}
   2bc26:	b085      	sub	sp, #20
   2bc28:	4604      	mov	r4, r0
   2bc2a:	460d      	mov	r5, r1
	bt_mesh_hb_sub_get(&sub);
   2bc2c:	4668      	mov	r0, sp
   2bc2e:	f7e6 fb97 	bl	12360 <bt_mesh_hb_sub_get>
	hb_sub_send_status(model, ctx, &sub);
   2bc32:	466a      	mov	r2, sp
   2bc34:	4629      	mov	r1, r5
   2bc36:	4620      	mov	r0, r4
   2bc38:	f7e8 ff24 	bl	14a84 <hb_sub_send_status>
}
   2bc3c:	b005      	add	sp, #20
   2bc3e:	bd30      	pop	{r4, r5, pc}

0002bc40 <heartbeat_pub_get>:
{
   2bc40:	b530      	push	{r4, r5, lr}
   2bc42:	b085      	sub	sp, #20
   2bc44:	4604      	mov	r4, r0
   2bc46:	460d      	mov	r5, r1
	bt_mesh_hb_pub_get(&pub);
   2bc48:	4668      	mov	r0, sp
   2bc4a:	f7e6 fb13 	bl	12274 <bt_mesh_hb_pub_get>
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, &pub);
   2bc4e:	466b      	mov	r3, sp
   2bc50:	2200      	movs	r2, #0
   2bc52:	4629      	mov	r1, r5
   2bc54:	4620      	mov	r0, r4
   2bc56:	f7e8 ffab 	bl	14bb0 <hb_pub_send_status>
}
   2bc5a:	b005      	add	sp, #20
   2bc5c:	bd30      	pop	{r4, r5, pc}

0002bc5e <mod_app_key_del>:
{
   2bc5e:	b538      	push	{r3, r4, r5, lr}
	mod_unbind(mod, *app_idx, true);
   2bc60:	9b04      	ldr	r3, [sp, #16]
   2bc62:	881c      	ldrh	r4, [r3, #0]
{
   2bc64:	4605      	mov	r5, r0
	if (!bt_mesh_app_key_exists(key_idx)) {
   2bc66:	4620      	mov	r0, r4
   2bc68:	f7e4 fd42 	bl	106f0 <bt_mesh_app_key_exists>
   2bc6c:	b128      	cbz	r0, 2bc7a <mod_app_key_del+0x1c>
   2bc6e:	4621      	mov	r1, r4
   2bc70:	4628      	mov	r0, r5
}
   2bc72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2bc76:	f7ff bfb7 	b.w	2bbe8 <mod_unbind.part.2.constprop.28>
   2bc7a:	bd38      	pop	{r3, r4, r5, pc}

0002bc7c <attention_off>:
	if (srv->cb && srv->cb->attn_off) {
   2bc7c:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2bc80:	b123      	cbz	r3, 2bc8c <attention_off+0x10>
   2bc82:	695b      	ldr	r3, [r3, #20]
   2bc84:	b113      	cbz	r3, 2bc8c <attention_off+0x10>
		srv->cb->attn_off(srv->model);
   2bc86:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2bc8a:	4718      	bx	r3
}
   2bc8c:	4770      	bx	lr

0002bc8e <health_fault_test_unrel>:
{
   2bc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   2bc92:	6987      	ldr	r7, [r0, #24]
{
   2bc94:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   2bc96:	4610      	mov	r0, r2
{
   2bc98:	4615      	mov	r5, r2
	test_id = net_buf_simple_pull_u8(buf);
   2bc9a:	f001 fc49 	bl	2d530 <net_buf_simple_pull_u8>
   2bc9e:	4606      	mov	r6, r0
	company_id = net_buf_simple_pull_le16(buf);
   2bca0:	4628      	mov	r0, r5
   2bca2:	f001 fc4d 	bl	2d540 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   2bca6:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   2bca8:	4602      	mov	r2, r0
	if (srv->cb && srv->cb->fault_test) {
   2bcaa:	b133      	cbz	r3, 2bcba <health_fault_test_unrel+0x2c>
   2bcac:	68db      	ldr	r3, [r3, #12]
   2bcae:	b123      	cbz	r3, 2bcba <health_fault_test_unrel+0x2c>
		srv->cb->fault_test(model, test_id, company_id);
   2bcb0:	4631      	mov	r1, r6
   2bcb2:	4620      	mov	r0, r4
}
   2bcb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		srv->cb->fault_test(model, test_id, company_id);
   2bcb8:	4718      	bx	r3
}
   2bcba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bcbe <health_fault_clear_unrel>:
{
   2bcbe:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   2bcc0:	6985      	ldr	r5, [r0, #24]
{
   2bcc2:	4604      	mov	r4, r0
	company_id = net_buf_simple_pull_le16(buf);
   2bcc4:	4610      	mov	r0, r2
   2bcc6:	f001 fc3b 	bl	2d540 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   2bcca:	686b      	ldr	r3, [r5, #4]
	company_id = net_buf_simple_pull_le16(buf);
   2bccc:	4601      	mov	r1, r0
	if (srv->cb && srv->cb->fault_clear) {
   2bcce:	b12b      	cbz	r3, 2bcdc <health_fault_clear_unrel+0x1e>
   2bcd0:	689b      	ldr	r3, [r3, #8]
   2bcd2:	b11b      	cbz	r3, 2bcdc <health_fault_clear_unrel+0x1e>
		srv->cb->fault_clear(model, company_id);
   2bcd4:	4620      	mov	r0, r4
}
   2bcd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		srv->cb->fault_clear(model, company_id);
   2bcda:	4718      	bx	r3
}
   2bcdc:	bd70      	pop	{r4, r5, r6, pc}

0002bcde <health_period_set>:
{
   2bcde:	b538      	push	{r3, r4, r5, lr}
   2bce0:	4604      	mov	r4, r0
   2bce2:	460d      	mov	r5, r1
	health_period_set_unrel(model, ctx, buf);
   2bce4:	f7e9 f816 	bl	14d14 <health_period_set_unrel>
	send_health_period_status(model, ctx);
   2bce8:	4629      	mov	r1, r5
   2bcea:	4620      	mov	r0, r4
}
   2bcec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_health_period_status(model, ctx);
   2bcf0:	f7e9 b912 	b.w	14f18 <send_health_period_status>

0002bcf4 <health_period_get>:
	send_health_period_status(model, ctx);
   2bcf4:	f7e9 b910 	b.w	14f18 <send_health_period_status>

0002bcf8 <attention_get>:
	send_attention_status(model, ctx);
   2bcf8:	f7e9 b934 	b.w	14f64 <send_attention_status>

0002bcfc <attention_set_unrel>:
{
   2bcfc:	b510      	push	{r4, lr}
   2bcfe:	4604      	mov	r4, r0
	time = net_buf_simple_pull_u8(buf);
   2bd00:	4610      	mov	r0, r2
   2bd02:	f001 fc15 	bl	2d530 <net_buf_simple_pull_u8>
	bt_mesh_attention(model, time);
   2bd06:	4601      	mov	r1, r0
   2bd08:	4620      	mov	r0, r4
}
   2bd0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_attention(model, time);
   2bd0e:	f7e9 b9d5 	b.w	150bc <bt_mesh_attention>

0002bd12 <attention_set>:
{
   2bd12:	b538      	push	{r3, r4, r5, lr}
   2bd14:	4604      	mov	r4, r0
   2bd16:	460d      	mov	r5, r1
	attention_set_unrel(model, ctx, buf);
   2bd18:	f7ff fff0 	bl	2bcfc <attention_set_unrel>
	send_attention_status(model, ctx);
   2bd1c:	4629      	mov	r1, r5
   2bd1e:	4620      	mov	r0, r4
}
   2bd20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_attention_status(model, ctx);
   2bd24:	f7e9 b91e 	b.w	14f64 <send_attention_status>

0002bd28 <bt_mesh_adv_buf_ready>:
}
   2bd28:	4770      	bx	lr

0002bd2a <store_pending>:
{
   2bd2a:	b508      	push	{r3, lr}
	if (atomic_test_and_clear_bit(pending_flags,
   2bd2c:	2000      	movs	r0, #0
   2bd2e:	f7e9 fb1d 	bl	1536c <atomic_test_and_clear_bit.constprop.5>
   2bd32:	b108      	cbz	r0, 2bd38 <store_pending+0xe>
		bt_mesh_rpl_pending_store();
   2bd34:	f7e6 f882 	bl	11e3c <bt_mesh_rpl_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2bd38:	2001      	movs	r0, #1
   2bd3a:	f7e9 fb17 	bl	1536c <atomic_test_and_clear_bit.constprop.5>
   2bd3e:	b108      	cbz	r0, 2bd44 <store_pending+0x1a>
		bt_mesh_subnet_pending_store();
   2bd40:	f7e4 fa9e 	bl	10280 <bt_mesh_subnet_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2bd44:	2002      	movs	r0, #2
   2bd46:	f7e9 fb11 	bl	1536c <atomic_test_and_clear_bit.constprop.5>
   2bd4a:	b108      	cbz	r0, 2bd50 <store_pending+0x26>
		bt_mesh_app_key_pending_store();
   2bd4c:	f7e4 fd92 	bl	10874 <bt_mesh_app_key_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2bd50:	2003      	movs	r0, #3
   2bd52:	f7e9 fb0b 	bl	1536c <atomic_test_and_clear_bit.constprop.5>
   2bd56:	b108      	cbz	r0, 2bd5c <store_pending+0x32>
		bt_mesh_net_pending_net_store();
   2bd58:	f7e3 ff76 	bl	fc48 <bt_mesh_net_pending_net_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2bd5c:	2004      	movs	r0, #4
   2bd5e:	f7e9 fb05 	bl	1536c <atomic_test_and_clear_bit.constprop.5>
   2bd62:	b108      	cbz	r0, 2bd68 <store_pending+0x3e>
		bt_mesh_net_pending_iv_store();
   2bd64:	f7e3 ff3e 	bl	fbe4 <bt_mesh_net_pending_iv_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2bd68:	2005      	movs	r0, #5
   2bd6a:	f7e9 faff 	bl	1536c <atomic_test_and_clear_bit.constprop.5>
   2bd6e:	b108      	cbz	r0, 2bd74 <store_pending+0x4a>
		bt_mesh_net_pending_seq_store();
   2bd70:	f7e3 ff9e 	bl	fcb0 <bt_mesh_net_pending_seq_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2bd74:	2006      	movs	r0, #6
   2bd76:	f7e9 faf9 	bl	1536c <atomic_test_and_clear_bit.constprop.5>
   2bd7a:	b108      	cbz	r0, 2bd80 <store_pending+0x56>
		bt_mesh_hb_pub_pending_store();
   2bd7c:	f7e6 fb3a 	bl	123f4 <bt_mesh_hb_pub_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2bd80:	2007      	movs	r0, #7
   2bd82:	f7e9 faf3 	bl	1536c <atomic_test_and_clear_bit.constprop.5>
   2bd86:	b108      	cbz	r0, 2bd8c <store_pending+0x62>
		bt_mesh_cfg_pending_store();
   2bd88:	f7e2 fd5a 	bl	e840 <bt_mesh_cfg_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2bd8c:	2008      	movs	r0, #8
   2bd8e:	f7e9 faed 	bl	1536c <atomic_test_and_clear_bit.constprop.5>
   2bd92:	b108      	cbz	r0, 2bd98 <store_pending+0x6e>
		bt_mesh_model_pending_store();
   2bd94:	f7e7 fa12 	bl	131bc <bt_mesh_model_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2bd98:	2009      	movs	r0, #9
   2bd9a:	f7e9 fae7 	bl	1536c <atomic_test_and_clear_bit.constprop.5>
   2bd9e:	b118      	cbz	r0, 2bda8 <store_pending+0x7e>
}
   2bda0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_va_pending_store();
   2bda4:	f7e5 bf48 	b.w	11c38 <bt_mesh_va_pending_store>
}
   2bda8:	bd08      	pop	{r3, pc}

0002bdaa <friend_recv_delay>:
{
   2bdaa:	b5d0      	push	{r4, r6, r7, lr}
	frnd->pending_req = 1U;
   2bdac:	78c3      	ldrb	r3, [r0, #3]
	return (int32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
   2bdae:	7881      	ldrb	r1, [r0, #2]
	frnd->pending_req = 1U;
   2bdb0:	f043 0304 	orr.w	r3, r3, #4
{
   2bdb4:	4604      	mov	r4, r0
	frnd->pending_req = 1U;
   2bdb6:	70c3      	strb	r3, [r0, #3]
	return (int32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
   2bdb8:	3133      	adds	r1, #51	; 0x33
   2bdba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2bdbe:	f240 36e7 	movw	r6, #999	; 0x3e7
   2bdc2:	2700      	movs	r7, #0
   2bdc4:	fbc0 6701 	smlal	r6, r7, r0, r1
   2bdc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2bdcc:	2300      	movs	r3, #0
   2bdce:	4630      	mov	r0, r6
   2bdd0:	4639      	mov	r1, r7
   2bdd2:	f7d5 fddb 	bl	198c <__aeabi_uldivmod>
	k_delayed_work_submit(&frnd->timer, K_MSEC(delay));
   2bdd6:	4602      	mov	r2, r0
   2bdd8:	460b      	mov	r3, r1
   2bdda:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   2bdde:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit(&frnd->timer, K_MSEC(delay));
   2bde2:	f7e9 bbd5 	b.w	15590 <k_delayed_work_submit>

0002bde6 <friend_clear_sent>:
			      K_SECONDS(frnd->clear.repeat_sec));
   2bde6:	f8b1 30b6 	ldrh.w	r3, [r1, #182]	; 0xb6
{
   2bdea:	b5d0      	push	{r4, r6, r7, lr}
   2bdec:	460c      	mov	r4, r1
			      K_SECONDS(frnd->clear.repeat_sec));
   2bdee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2bdf2:	4359      	muls	r1, r3
   2bdf4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2bdf8:	f240 36e7 	movw	r6, #999	; 0x3e7
   2bdfc:	2700      	movs	r7, #0
   2bdfe:	fbe0 6701 	umlal	r6, r7, r0, r1
   2be02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2be06:	2300      	movs	r3, #0
   2be08:	4630      	mov	r0, r6
   2be0a:	4639      	mov	r1, r7
   2be0c:	f7d5 fdbe 	bl	198c <__aeabi_uldivmod>
	k_delayed_work_submit(&frnd->clear.timer,
   2be10:	4602      	mov	r2, r0
   2be12:	460b      	mov	r3, r1
   2be14:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   2be18:	f7e9 fbba 	bl	15590 <k_delayed_work_submit>
	frnd->clear.repeat_sec *= 2U;
   2be1c:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
   2be20:	005b      	lsls	r3, r3, #1
   2be22:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
}
   2be26:	bdd0      	pop	{r4, r6, r7, pc}

0002be28 <clear_timeout>:
{
   2be28:	b5d0      	push	{r4, r6, r7, lr}
   2be2a:	4604      	mov	r4, r0
   2be2c:	f002 f99d 	bl	2e16a <z_impl_k_uptime_ticks>
   2be30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2be34:	fba0 6703 	umull	r6, r7, r0, r3
   2be38:	fb03 7701 	mla	r7, r3, r1, r7
   2be3c:	0bf3      	lsrs	r3, r6, #15
	duration = k_uptime_get_32() - frnd->clear.start;
   2be3e:	f854 1c08 	ldr.w	r1, [r4, #-8]
	if (duration > 2 * frnd->poll_to) {
   2be42:	f854 2cb4 	ldr.w	r2, [r4, #-180]
   2be46:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
	duration = k_uptime_get_32() - frnd->clear.start;
   2be4a:	1a5b      	subs	r3, r3, r1
	if (duration > 2 * frnd->poll_to) {
   2be4c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   2be50:	d903      	bls.n	2be5a <clear_timeout+0x32>
		frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
   2be52:	2300      	movs	r3, #0
   2be54:	f824 3c04 	strh.w	r3, [r4, #-4]
}
   2be58:	bdd0      	pop	{r4, r6, r7, pc}
	send_friend_clear(frnd);
   2be5a:	f1a4 00b8 	sub.w	r0, r4, #184	; 0xb8
}
   2be5e:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	send_friend_clear(frnd);
   2be62:	f7e9 bb59 	b.w	15518 <send_friend_clear>

0002be66 <net_buf_skip>:
{
   2be66:	b538      	push	{r3, r4, r5, lr}
   2be68:	460d      	mov	r5, r1
			buf = net_buf_frag_del(NULL, buf);
   2be6a:	4604      	mov	r4, r0
	while (buf && len--) {
   2be6c:	b114      	cbz	r4, 2be74 <net_buf_skip+0xe>
   2be6e:	f115 35ff 	adds.w	r5, r5, #4294967295
   2be72:	d201      	bcs.n	2be78 <net_buf_skip+0x12>
}
   2be74:	4620      	mov	r0, r4
   2be76:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_simple_pull_u8(&buf->b);
   2be78:	f104 0008 	add.w	r0, r4, #8
   2be7c:	f001 fb58 	bl	2d530 <net_buf_simple_pull_u8>
		if (!buf->len) {
   2be80:	89a0      	ldrh	r0, [r4, #12]
   2be82:	2800      	cmp	r0, #0
   2be84:	d1f2      	bne.n	2be6c <net_buf_skip+0x6>
			buf = net_buf_frag_del(NULL, buf);
   2be86:	4621      	mov	r1, r4
   2be88:	f7f3 fff8 	bl	1fe7c <net_buf_frag_del>
   2be8c:	e7ed      	b.n	2be6a <net_buf_skip+0x4>

0002be8e <friend_lpn_matches>:
{
   2be8e:	b510      	push	{r4, lr}
	if (!frnd->established) {
   2be90:	78c4      	ldrb	r4, [r0, #3]
   2be92:	f014 0410 	ands.w	r4, r4, #16
   2be96:	d01f      	beq.n	2bed8 <friend_lpn_matches+0x4a>
	if (net_idx != frnd->subnet->net_idx) {
   2be98:	6903      	ldr	r3, [r0, #16]
   2be9a:	8b9b      	ldrh	r3, [r3, #28]
   2be9c:	428b      	cmp	r3, r1
   2be9e:	d11b      	bne.n	2bed8 <friend_lpn_matches+0x4a>
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   2bea0:	b213      	sxth	r3, r2
   2bea2:	2b00      	cmp	r3, #0
   2bea4:	dc0d      	bgt.n	2bec2 <friend_lpn_matches+0x34>
		if (frnd->sub_list[i] == addr) {
   2bea6:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
   2beaa:	4293      	cmp	r3, r2
   2beac:	d016      	beq.n	2bedc <friend_lpn_matches+0x4e>
   2beae:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
   2beb2:	4293      	cmp	r3, r2
   2beb4:	d012      	beq.n	2bedc <friend_lpn_matches+0x4e>
   2beb6:	f8b0 005a 	ldrh.w	r0, [r0, #90]	; 0x5a
   2beba:	1a83      	subs	r3, r0, r2
   2bebc:	4258      	negs	r0, r3
   2bebe:	4158      	adcs	r0, r3
}
   2bec0:	bd10      	pop	{r4, pc}
	if (frnd->lpn == BT_MESH_ADDR_UNASSIGNED) {
   2bec2:	8803      	ldrh	r3, [r0, #0]
   2bec4:	b163      	cbz	r3, 2bee0 <friend_lpn_matches+0x52>
	return (addr >= frnd->lpn && addr < (frnd->lpn + frnd->num_elem));
   2bec6:	429a      	cmp	r2, r3
   2bec8:	d306      	bcc.n	2bed8 <friend_lpn_matches+0x4a>
   2beca:	7a00      	ldrb	r0, [r0, #8]
   2becc:	4418      	add	r0, r3
   2bece:	4282      	cmp	r2, r0
   2bed0:	bfac      	ite	ge
   2bed2:	2000      	movge	r0, #0
   2bed4:	2001      	movlt	r0, #1
   2bed6:	e7f3      	b.n	2bec0 <friend_lpn_matches+0x32>
		return false;
   2bed8:	2000      	movs	r0, #0
   2beda:	e7f1      	b.n	2bec0 <friend_lpn_matches+0x32>
			return true;
   2bedc:	2001      	movs	r0, #1
   2bede:	e7ef      	b.n	2bec0 <friend_lpn_matches+0x32>
		return false;
   2bee0:	4618      	mov	r0, r3
   2bee2:	e7ed      	b.n	2bec0 <friend_lpn_matches+0x32>

0002bee4 <buf_send_start>:
{
   2bee4:	b538      	push	{r3, r4, r5, lr}
	frnd->pending_buf = 0U;
   2bee6:	78d3      	ldrb	r3, [r2, #3]
   2bee8:	f36f 03c3 	bfc	r3, #3, #1
	if (!frnd->established && frnd->last) {
   2beec:	f013 0410 	ands.w	r4, r3, #16
{
   2bef0:	4615      	mov	r5, r2
	frnd->pending_buf = 0U;
   2bef2:	70d3      	strb	r3, [r2, #3]
	if (!frnd->established && frnd->last) {
   2bef4:	d106      	bne.n	2bf04 <buf_send_start+0x20>
   2bef6:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   2befa:	b118      	cbz	r0, 2bf04 <buf_send_start+0x20>
		net_buf_unref(frnd->last);
   2befc:	f7f3 ff00 	bl	1fd00 <net_buf_unref>
		frnd->last = NULL;
   2bf00:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
}
   2bf04:	bd38      	pop	{r3, r4, r5, pc}

0002bf06 <friend_purge_old_ack>:
{
   2bf06:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (cur = sys_slist_peek_head(&frnd->queue);
   2bf0a:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
{
   2bf0e:	4682      	mov	sl, r0
   2bf10:	460f      	mov	r7, r1
   2bf12:	4690      	mov	r8, r2
	sys_snode_t *cur, *prev = NULL;
   2bf14:	2500      	movs	r5, #0
	for (cur = sys_slist_peek_head(&frnd->queue);
   2bf16:	b90c      	cbnz	r4, 2bf1c <friend_purge_old_ack+0x16>
}
   2bf18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (buf->len != 16) {
   2bf1c:	89a3      	ldrh	r3, [r4, #12]
   2bf1e:	2b10      	cmp	r3, #16
   2bf20:	d158      	bne.n	2bfd4 <friend_purge_old_ack+0xce>
	net_buf_simple_save(&buf->b, &state);
   2bf22:	f104 0b08 	add.w	fp, r4, #8
	state->offset = net_buf_simple_headroom(buf);
   2bf26:	4658      	mov	r0, fp
   2bf28:	f001 fb3c 	bl	2d5a4 <net_buf_simple_headroom>
	net_buf_skip(buf, 1); /* skip IVI, NID */
   2bf2c:	2101      	movs	r1, #1
   2bf2e:	4606      	mov	r6, r0
   2bf30:	4620      	mov	r0, r4
	state->len = buf->len;
   2bf32:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   2bf36:	f7ff ff96 	bl	2be66 <net_buf_skip>
	return net_buf_simple_pull_u8(&buf->b);
   2bf3a:	4658      	mov	r0, fp
   2bf3c:	f001 faf8 	bl	2d530 <net_buf_simple_pull_u8>
	if (!(net_buf_pull_u8(buf) >> 7)) {
   2bf40:	0602      	lsls	r2, r0, #24
   2bf42:	d41e      	bmi.n	2bf82 <friend_purge_old_ack+0x7c>
	bool found = false;
   2bf44:	2300      	movs	r3, #0
	buf->data = buf->__buf + state->offset;
   2bf46:	6922      	ldr	r2, [r4, #16]
	buf->len = state->len;
   2bf48:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2bf4c:	fa12 f686 	uxtah	r6, r2, r6
   2bf50:	60a6      	str	r6, [r4, #8]
		if (is_segack(buf, seq_auth, src)) {
   2bf52:	2b00      	cmp	r3, #0
   2bf54:	d03e      	beq.n	2bfd4 <friend_purge_old_ack+0xce>
Z_GENLIST_REMOVE(slist, snode)
   2bf56:	6823      	ldr	r3, [r4, #0]
   2bf58:	bba5      	cbnz	r5, 2bfc4 <friend_purge_old_ack+0xbe>
   2bf5a:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
	list->head = node;
   2bf5e:	f8ca 30a0 	str.w	r3, [sl, #160]	; 0xa0
Z_GENLIST_REMOVE(slist, snode)
   2bf62:	4294      	cmp	r4, r2
   2bf64:	d101      	bne.n	2bf6a <friend_purge_old_ack+0x64>
	list->tail = node;
   2bf66:	f8ca 30a4 	str.w	r3, [sl, #164]	; 0xa4
			frnd->queue_size--;
   2bf6a:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
   2bf6e:	3b01      	subs	r3, #1
   2bf70:	f8ca 30a8 	str.w	r3, [sl, #168]	; 0xa8
			buf->frags = NULL;
   2bf74:	2300      	movs	r3, #0
   2bf76:	6023      	str	r3, [r4, #0]
			net_buf_unref(buf);
   2bf78:	4620      	mov	r0, r4
}
   2bf7a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			net_buf_unref(buf);
   2bf7e:	f7f3 bebf 	b.w	1fd00 <net_buf_unref>
	return net_buf_simple_pull(&buf->b, len);
   2bf82:	2103      	movs	r1, #3
   2bf84:	4658      	mov	r0, fp
   2bf86:	f7f3 ffd1 	bl	1ff2c <net_buf_simple_pull>
	return net_buf_simple_pull_be16(&buf->b);
   2bf8a:	4658      	mov	r0, fp
   2bf8c:	f001 fae0 	bl	2d550 <net_buf_simple_pull_be16>
	if (src != net_buf_pull_be16(buf)) {
   2bf90:	4580      	cmp	r8, r0
   2bf92:	d1d7      	bne.n	2bf44 <friend_purge_old_ack+0x3e>
	net_buf_skip(buf, 2); /* skip dst */
   2bf94:	2102      	movs	r1, #2
   2bf96:	4620      	mov	r0, r4
   2bf98:	f7ff ff65 	bl	2be66 <net_buf_skip>
	return net_buf_simple_pull_mem(&buf->b, len);
   2bf9c:	2101      	movs	r1, #1
   2bf9e:	4658      	mov	r0, fp
   2bfa0:	f7f3 ffe0 	bl	1ff64 <net_buf_simple_pull_mem>
	if (TRANS_CTL_OP((uint8_t *) net_buf_pull_mem(buf, 1)) != TRANS_CTL_OP_ACK) {
   2bfa4:	7803      	ldrb	r3, [r0, #0]
   2bfa6:	065b      	lsls	r3, r3, #25
   2bfa8:	d1cc      	bne.n	2bf44 <friend_purge_old_ack+0x3e>
	return net_buf_simple_pull_be16(&buf->b);
   2bfaa:	4658      	mov	r0, fp
   2bfac:	f001 fad0 	bl	2d550 <net_buf_simple_pull_be16>
	found = ((net_buf_pull_be16(buf) >> 2) & TRANS_SEQ_ZERO_MASK) ==
   2bfb0:	f3c0 038f 	ubfx	r3, r0, #2, #16
   2bfb4:	6838      	ldr	r0, [r7, #0]
   2bfb6:	4043      	eors	r3, r0
   2bfb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
   2bfbc:	fab3 f383 	clz	r3, r3
   2bfc0:	095b      	lsrs	r3, r3, #5
   2bfc2:	e7c0      	b.n	2bf46 <friend_purge_old_ack+0x40>
	parent->next = child;
   2bfc4:	602b      	str	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   2bfc6:	f8da 30a4 	ldr.w	r3, [sl, #164]	; 0xa4
   2bfca:	429c      	cmp	r4, r3
	list->tail = node;
   2bfcc:	bf08      	it	eq
   2bfce:	f8ca 50a4 	streq.w	r5, [sl, #164]	; 0xa4
   2bfd2:	e7ca      	b.n	2bf6a <friend_purge_old_ack+0x64>
	     cur != NULL; prev = cur, cur = sys_slist_peek_next(cur)) {
   2bfd4:	4625      	mov	r5, r4
   2bfd6:	6824      	ldr	r4, [r4, #0]
   2bfd8:	e79d      	b.n	2bf16 <friend_purge_old_ack+0x10>

0002bfda <purge_buffers>:
{
   2bfda:	b538      	push	{r3, r4, r5, lr}
   2bfdc:	4604      	mov	r4, r0
		buf->frags = NULL;
   2bfde:	2500      	movs	r5, #0
Z_GENLIST_IS_EMPTY(slist)
   2bfe0:	6820      	ldr	r0, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   2bfe2:	b900      	cbnz	r0, 2bfe6 <purge_buffers+0xc>
}
   2bfe4:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2bfe6:	6862      	ldr	r2, [r4, #4]
   2bfe8:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   2bfea:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2bfec:	4290      	cmp	r0, r2
	list->tail = node;
   2bfee:	bf08      	it	eq
   2bff0:	6063      	streq	r3, [r4, #4]
		buf->flags &= ~NET_BUF_FRAGS;
   2bff2:	7943      	ldrb	r3, [r0, #5]
		buf->frags = NULL;
   2bff4:	6005      	str	r5, [r0, #0]
		buf->flags &= ~NET_BUF_FRAGS;
   2bff6:	f023 0301 	bic.w	r3, r3, #1
   2bffa:	7143      	strb	r3, [r0, #5]
		net_buf_unref(buf);
   2bffc:	f7f3 fe80 	bl	1fd00 <net_buf_unref>
   2c000:	e7ee      	b.n	2bfe0 <purge_buffers+0x6>

0002c002 <is_seg>:
{
   2c002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *buf = (void *)sys_slist_peek_head(&seg->queue);
   2c006:	6804      	ldr	r4, [r0, #0]
{
   2c008:	4689      	mov	r9, r1
   2c00a:	4617      	mov	r7, r2
	if (!buf) {
   2c00c:	b33c      	cbz	r4, 2c05e <is_seg+0x5c>
	net_buf_simple_save(&buf->b, &state);
   2c00e:	f104 0608 	add.w	r6, r4, #8
	state->offset = net_buf_simple_headroom(buf);
   2c012:	4630      	mov	r0, r6
   2c014:	f001 fac6 	bl	2d5a4 <net_buf_simple_headroom>
	net_buf_skip(buf, 5);   /* skip IVI, NID, CTL, TTL, SEQ */
   2c018:	2105      	movs	r1, #5
   2c01a:	4605      	mov	r5, r0
   2c01c:	4620      	mov	r0, r4
	state->len = buf->len;
   2c01e:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   2c022:	f7ff ff20 	bl	2be66 <net_buf_skip>
	return net_buf_simple_pull_be16(&buf->b);
   2c026:	4630      	mov	r0, r6
   2c028:	f001 fa92 	bl	2d550 <net_buf_simple_pull_be16>
	net_buf_skip(buf, 3);   /* skip DST, OP/AID */
   2c02c:	2103      	movs	r1, #3
   2c02e:	4680      	mov	r8, r0
   2c030:	4620      	mov	r0, r4
   2c032:	f7ff ff18 	bl	2be66 <net_buf_skip>
   2c036:	4630      	mov	r0, r6
   2c038:	f001 fa8a 	bl	2d550 <net_buf_simple_pull_be16>
	buf->data = buf->__buf + state->offset;
   2c03c:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2c03e:	f8a4 a00c 	strh.w	sl, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2c042:	fa13 f585 	uxtah	r5, r3, r5
	return ((src == buf_src) && (seq_zero == buf_seq_zero));
   2c046:	45c1      	cmp	r9, r8
   2c048:	60a5      	str	r5, [r4, #8]
   2c04a:	d106      	bne.n	2c05a <is_seg+0x58>
   2c04c:	f3c0 008c 	ubfx	r0, r0, #2, #13
   2c050:	1bc3      	subs	r3, r0, r7
   2c052:	4258      	negs	r0, r3
   2c054:	4158      	adcs	r0, r3
}
   2c056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return ((src == buf_src) && (seq_zero == buf_seq_zero));
   2c05a:	2000      	movs	r0, #0
   2c05c:	e7fb      	b.n	2c056 <is_seg+0x54>
		return false;
   2c05e:	4620      	mov	r0, r4
   2c060:	e7f9      	b.n	2c056 <is_seg+0x54>

0002c062 <friend_queue_has_space.part.18>:
static bool friend_queue_has_space(struct bt_mesh_friend *frnd, uint16_t addr,
   2c062:	b538      	push	{r3, r4, r5, lr}
   2c064:	4604      	mov	r4, r0
   2c066:	461d      	mov	r5, r3
		if (seq_auth && is_seg(seg, addr, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   2c068:	b942      	cbnz	r2, 2c07c <friend_queue_has_space.part.18+0x1a>
		total += seg->seg_count;
   2c06a:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
	return (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - total) > seg_count;
   2c06e:	f1c0 0010 	rsb	r0, r0, #16
   2c072:	42a8      	cmp	r0, r5
   2c074:	bf94      	ite	ls
   2c076:	2000      	movls	r0, #0
   2c078:	2001      	movhi	r0, #1
}
   2c07a:	bd38      	pop	{r3, r4, r5, pc}
		if (seq_auth && is_seg(seg, addr, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   2c07c:	8812      	ldrh	r2, [r2, #0]
   2c07e:	3090      	adds	r0, #144	; 0x90
   2c080:	f3c2 020c 	ubfx	r2, r2, #0, #13
   2c084:	f7ff ffbd 	bl	2c002 <is_seg>
   2c088:	2800      	cmp	r0, #0
   2c08a:	d0ee      	beq.n	2c06a <friend_queue_has_space.part.18+0x8>
   2c08c:	e7f5      	b.n	2c07a <friend_queue_has_space.part.18+0x18>

0002c08e <bt_mesh_friend_find>:
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   2c08e:	f7e9 be63 	b.w	15d58 <bt_mesh_friend_find.part.21>

0002c092 <bt_mesh_prov_buf_init>:
}

static inline void bt_mesh_prov_buf_init(struct net_buf_simple *buf, uint8_t type)
{
   2c092:	b538      	push	{r3, r4, r5, lr}
   2c094:	4604      	mov	r4, r0
   2c096:	460d      	mov	r5, r1
	net_buf_simple_reserve(buf, PROV_BEARER_BUF_HEADROOM);
   2c098:	2105      	movs	r1, #5
   2c09a:	f7f3 fd47 	bl	1fb2c <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, type);
   2c09e:	4629      	mov	r1, r5
   2c0a0:	4620      	mov	r0, r4
}
   2c0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, type);
   2c0a6:	f001 ba95 	b.w	2d5d4 <net_buf_simple_add_u8>

0002c0aa <prov_fail>:
	prov_send_fail_msg(reason);
   2c0aa:	f7ea bdf3 	b.w	16c94 <prov_send_fail_msg>

0002c0ae <net_buf_add_u8>:
	return net_buf_simple_add_u8(&buf->b, val);
   2c0ae:	3008      	adds	r0, #8
   2c0b0:	f001 ba90 	b.w	2d5d4 <net_buf_simple_add_u8>

0002c0b4 <pb_adv_reset>:

void pb_adv_reset(void)
{
	reset_adv_link();
   2c0b4:	f7eb ba46 	b.w	17544 <reset_adv_link>

0002c0b8 <clear_tx>:
}
   2c0b8:	4770      	bx	lr

0002c0ba <protocol_timeout>:
	link_closed(PROV_BEARER_LINK_STATUS_TIMEOUT);
   2c0ba:	2001      	movs	r0, #1
   2c0bc:	f7eb bf66 	b.w	17f8c <link_closed>

0002c0c0 <pb_gatt_reset>:

void pb_gatt_reset(void)
{
	reset_state();
   2c0c0:	f7eb bf50 	b.w	17f64 <reset_state>

0002c0c4 <prov_ccc_changed>:
}
   2c0c4:	4770      	bx	lr

0002c0c6 <sub_count_cb>:
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   2c0c6:	8b82      	ldrh	r2, [r0, #28]
   2c0c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c0cc:	429a      	cmp	r2, r3
{
   2c0ce:	b510      	push	{r4, lr}
   2c0d0:	460c      	mov	r4, r1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   2c0d2:	d005      	beq.n	2c0e0 <sub_count_cb+0x1a>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   2c0d4:	7fc3      	ldrb	r3, [r0, #31]
   2c0d6:	2b01      	cmp	r3, #1
   2c0d8:	d104      	bne.n	2c0e4 <sub_count_cb+0x1e>
		(*count)++;
   2c0da:	6823      	ldr	r3, [r4, #0]
   2c0dc:	3301      	adds	r3, #1
   2c0de:	6023      	str	r3, [r4, #0]
}
   2c0e0:	2000      	movs	r0, #0
   2c0e2:	bd10      	pop	{r4, pc}
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   2c0e4:	f7fe fef2 	bl	2aecc <bt_mesh_gatt_proxy_get>
	if (advertise_subnet(sub)) {
   2c0e8:	2801      	cmp	r0, #1
   2c0ea:	d1f9      	bne.n	2c0e0 <sub_count_cb+0x1a>
   2c0ec:	e7f5      	b.n	2c0da <sub_count_cb+0x14>

0002c0ee <filter_add>:
{
   2c0ee:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   2c0f0:	b179      	cbz	r1, 2c112 <filter_add+0x24>
		if (client->filter[i] == addr) {
   2c0f2:	8883      	ldrh	r3, [r0, #4]
   2c0f4:	4299      	cmp	r1, r3
   2c0f6:	d00c      	beq.n	2c112 <filter_add+0x24>
   2c0f8:	88c4      	ldrh	r4, [r0, #6]
   2c0fa:	42a1      	cmp	r1, r4
   2c0fc:	d009      	beq.n	2c112 <filter_add+0x24>
   2c0fe:	8902      	ldrh	r2, [r0, #8]
   2c100:	4291      	cmp	r1, r2
   2c102:	d006      	beq.n	2c112 <filter_add+0x24>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
   2c104:	b113      	cbz	r3, 2c10c <filter_add+0x1e>
   2c106:	b12c      	cbz	r4, 2c114 <filter_add+0x26>
   2c108:	b91a      	cbnz	r2, 2c112 <filter_add+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   2c10a:	2302      	movs	r3, #2
			client->filter[i] = addr;
   2c10c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   2c110:	8081      	strh	r1, [r0, #4]
}
   2c112:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   2c114:	2301      	movs	r3, #1
   2c116:	e7f9      	b.n	2c10c <filter_add+0x1e>

0002c118 <proxy_segment_and_send>:
{
   2c118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c11c:	4688      	mov	r8, r1
   2c11e:	4614      	mov	r4, r2
   2c120:	4607      	mov	r7, r0
	mtu = bt_gatt_get_mtu(conn) - 3;
   2c122:	f7fe fe13 	bl	2ad4c <bt_gatt_get_mtu>
	if (mtu > msg->len) {
   2c126:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
   2c128:	3803      	subs	r0, #3
   2c12a:	b285      	uxth	r5, r0
	if (mtu > msg->len) {
   2c12c:	42ab      	cmp	r3, r5
   2c12e:	f008 063f 	and.w	r6, r8, #63	; 0x3f
   2c132:	d20a      	bcs.n	2c14a <proxy_segment_and_send+0x32>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   2c134:	4631      	mov	r1, r6
   2c136:	4620      	mov	r0, r4
   2c138:	f001 f9e7 	bl	2d50a <net_buf_simple_push_u8>
		return proxy_send(conn, msg->data, msg->len);
   2c13c:	88a2      	ldrh	r2, [r4, #4]
   2c13e:	6821      	ldr	r1, [r4, #0]
   2c140:	4638      	mov	r0, r7
}
   2c142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return proxy_send(conn, msg->data, msg->len);
   2c146:	f7ec b8af 	b.w	182a8 <proxy_send>
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
   2c14a:	f046 0140 	orr.w	r1, r6, #64	; 0x40
   2c14e:	4620      	mov	r0, r4
   2c150:	f001 f9db 	bl	2d50a <net_buf_simple_push_u8>
	proxy_send(conn, msg->data, mtu);
   2c154:	462a      	mov	r2, r5
   2c156:	6821      	ldr	r1, [r4, #0]
   2c158:	4638      	mov	r0, r7
   2c15a:	f7ec f8a5 	bl	182a8 <proxy_send>
	net_buf_simple_pull(msg, mtu);
   2c15e:	4629      	mov	r1, r5
   2c160:	4620      	mov	r0, r4
   2c162:	f7f3 fee3 	bl	1ff2c <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   2c166:	f046 0680 	orr.w	r6, r6, #128	; 0x80
	while (msg->len) {
   2c16a:	88a3      	ldrh	r3, [r4, #4]
   2c16c:	b163      	cbz	r3, 2c188 <proxy_segment_and_send+0x70>
		if (msg->len + 1 < mtu) {
   2c16e:	3301      	adds	r3, #1
   2c170:	42ab      	cmp	r3, r5
   2c172:	da0c      	bge.n	2c18e <proxy_segment_and_send+0x76>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   2c174:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
   2c178:	4620      	mov	r0, r4
   2c17a:	f001 f9c6 	bl	2d50a <net_buf_simple_push_u8>
			proxy_send(conn, msg->data, msg->len);
   2c17e:	88a2      	ldrh	r2, [r4, #4]
   2c180:	6821      	ldr	r1, [r4, #0]
   2c182:	4638      	mov	r0, r7
   2c184:	f7ec f890 	bl	182a8 <proxy_send>
}
   2c188:	2000      	movs	r0, #0
   2c18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   2c18e:	4631      	mov	r1, r6
   2c190:	4620      	mov	r0, r4
   2c192:	f001 f9ba 	bl	2d50a <net_buf_simple_push_u8>
		proxy_send(conn, msg->data, mtu);
   2c196:	6821      	ldr	r1, [r4, #0]
   2c198:	462a      	mov	r2, r5
   2c19a:	4638      	mov	r0, r7
   2c19c:	f7ec f884 	bl	182a8 <proxy_send>
		net_buf_simple_pull(msg, mtu);
   2c1a0:	4629      	mov	r1, r5
   2c1a2:	4620      	mov	r0, r4
   2c1a4:	f7f3 fec2 	bl	1ff2c <net_buf_simple_pull>
   2c1a8:	e7df      	b.n	2c16a <proxy_segment_and_send+0x52>

0002c1aa <beacon_send>:
{
   2c1aa:	b530      	push	{r4, r5, lr}
   2c1ac:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   2c1ae:	ab04      	add	r3, sp, #16
   2c1b0:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
{
   2c1b4:	4604      	mov	r4, r0
   2c1b6:	460d      	mov	r5, r1
	net_buf_simple_reserve(&buf, 1);
   2c1b8:	a801      	add	r0, sp, #4
   2c1ba:	2101      	movs	r1, #1
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   2c1bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2c1c0:	9301      	str	r3, [sp, #4]
	net_buf_simple_reserve(&buf, 1);
   2c1c2:	f7f3 fcb3 	bl	1fb2c <net_buf_simple_reserve>
	bt_mesh_beacon_create(sub, &buf);
   2c1c6:	a901      	add	r1, sp, #4
   2c1c8:	4628      	mov	r0, r5
   2c1ca:	f7e2 fd4d 	bl	ec68 <bt_mesh_beacon_create>
	return proxy_segment_and_send(conn, BT_MESH_PROXY_BEACON, &buf);
   2c1ce:	aa01      	add	r2, sp, #4
   2c1d0:	2101      	movs	r1, #1
   2c1d2:	4620      	mov	r0, r4
   2c1d4:	f7ff ffa0 	bl	2c118 <proxy_segment_and_send>
}
   2c1d8:	b00b      	add	sp, #44	; 0x2c
   2c1da:	bd30      	pop	{r4, r5, pc}

0002c1dc <send_beacon_cb>:
{
   2c1dc:	460b      	mov	r3, r1
	return beacon_send(client->conn, sub);
   2c1de:	4601      	mov	r1, r0
   2c1e0:	6818      	ldr	r0, [r3, #0]
   2c1e2:	f7ff bfe2 	b.w	2c1aa <beacon_send>

0002c1e6 <proxy_ccc_changed>:
   2c1e6:	4770      	bx	lr

0002c1e8 <node_id_start>:
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   2c1e8:	2301      	movs	r3, #1
{
   2c1ea:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   2c1ee:	4604      	mov	r4, r0
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   2c1f0:	77c3      	strb	r3, [r0, #31]
   2c1f2:	f001 ffba 	bl	2e16a <z_impl_k_uptime_ticks>
   2c1f6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   2c1fa:	fba0 bc05 	umull	fp, ip, r0, r5
   2c1fe:	fb05 cc01 	mla	ip, r5, r1, ip
   2c202:	ea4f 32db 	mov.w	r2, fp, lsr #15
   2c206:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
	return (uint32_t)k_uptime_get();
   2c20a:	6222      	str	r2, [r4, #32]
}
   2c20c:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

0002c210 <bt_mesh_proxy_identity_stop>:
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   2c210:	2300      	movs	r3, #0
   2c212:	77c3      	strb	r3, [r0, #31]
	sub->node_id_start = 0U;
   2c214:	6203      	str	r3, [r0, #32]
}
   2c216:	4770      	bx	lr

0002c218 <bt_mesh_proxy_addr_add>:
	if (client->filter_type == WHITELIST) {
   2c218:	f810 3c3e 	ldrb.w	r3, [r0, #-62]
   2c21c:	2b01      	cmp	r3, #1
{
   2c21e:	460a      	mov	r2, r1
	if (client->filter_type == WHITELIST) {
   2c220:	d102      	bne.n	2c228 <bt_mesh_proxy_addr_add+0x10>
		filter_add(client, addr);
   2c222:	3848      	subs	r0, #72	; 0x48
   2c224:	f7ff bf63 	b.w	2c0ee <filter_add>
	} else if (client->filter_type == BLACKLIST) {
   2c228:	2b02      	cmp	r3, #2
   2c22a:	d111      	bne.n	2c250 <bt_mesh_proxy_addr_add+0x38>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   2c22c:	b181      	cbz	r1, 2c250 <bt_mesh_proxy_addr_add+0x38>
		if (client->filter[i] == addr) {
   2c22e:	f830 1c44 	ldrh.w	r1, [r0, #-68]
   2c232:	4291      	cmp	r1, r2
   2c234:	d00d      	beq.n	2c252 <bt_mesh_proxy_addr_add+0x3a>
   2c236:	f830 1c42 	ldrh.w	r1, [r0, #-66]
   2c23a:	4291      	cmp	r1, r2
   2c23c:	d00b      	beq.n	2c256 <bt_mesh_proxy_addr_add+0x3e>
   2c23e:	f830 1c40 	ldrh.w	r1, [r0, #-64]
   2c242:	4291      	cmp	r1, r2
   2c244:	d104      	bne.n	2c250 <bt_mesh_proxy_addr_add+0x38>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   2c246:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   2c24a:	2300      	movs	r3, #0
   2c24c:	f820 3c44 	strh.w	r3, [r0, #-68]
}
   2c250:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   2c252:	2300      	movs	r3, #0
   2c254:	e7f7      	b.n	2c246 <bt_mesh_proxy_addr_add+0x2e>
   2c256:	2301      	movs	r3, #1
   2c258:	e7f5      	b.n	2c246 <bt_mesh_proxy_addr_add+0x2e>

0002c25a <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   2c25a:	b530      	push	{r4, r5, lr}
	*mem_head = mem_pool;
   2c25c:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2c25e:	1dc3      	adds	r3, r0, #7
   2c260:	f023 0303 	bic.w	r3, r3, #3
__ssp_bos_icheck3(memset, void *, int)
   2c264:	2400      	movs	r4, #0
   2c266:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2c268:	3a01      	subs	r2, #1
   2c26a:	b292      	uxth	r2, r2
   2c26c:	fb01 f302 	mul.w	r3, r1, r2
   2c270:	50c4      	str	r4, [r0, r3]
		     sizeof(mem_pool));
	while (mem_count--) {
   2c272:	f64f 74ff 	movw	r4, #65535	; 0xffff
   2c276:	3a01      	subs	r2, #1
   2c278:	b292      	uxth	r2, r2
   2c27a:	42a2      	cmp	r2, r4
   2c27c:	d100      	bne.n	2c280 <mem_init+0x26>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   2c27e:	bd30      	pop	{r4, r5, pc}
			       (mem_size * (mem_count + 1)));
   2c280:	fb02 1301 	mla	r3, r2, r1, r1
		next = (uint32_t)((uint8_t *) mem_pool +
   2c284:	18c5      	adds	r5, r0, r3
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   2c286:	1a5b      	subs	r3, r3, r1
   2c288:	50c5      	str	r5, [r0, r3]
   2c28a:	e7f4      	b.n	2c276 <mem_init+0x1c>

0002c28c <mem_acquire>:

void *mem_acquire(void **mem_head)
{
	if (*mem_head) {
   2c28c:	6803      	ldr	r3, [r0, #0]
{
   2c28e:	b510      	push	{r4, lr}
	if (*mem_head) {
   2c290:	b15b      	cbz	r3, 2c2aa <mem_acquire+0x1e>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   2c292:	681a      	ldr	r2, [r3, #0]

		/* Store free mem_count after the list's next pointer */
		if (head) {
   2c294:	b142      	cbz	r2, 2c2a8 <mem_acquire+0x1c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   2c296:	1dd9      	adds	r1, r3, #7
   2c298:	f021 0103 	bic.w	r1, r1, #3
   2c29c:	880c      	ldrh	r4, [r1, #0]
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   2c29e:	1dd1      	adds	r1, r2, #7
   2c2a0:	f021 0103 	bic.w	r1, r1, #3
		free_count--;
   2c2a4:	3c01      	subs	r4, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   2c2a6:	800c      	strh	r4, [r1, #0]
				free_count;
		}

		*mem_head = head;
   2c2a8:	6002      	str	r2, [r0, #0]
		return mem;
	}

	return NULL;
}
   2c2aa:	4618      	mov	r0, r3
   2c2ac:	bd10      	pop	{r4, pc}

0002c2ae <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   2c2ae:	680b      	ldr	r3, [r1, #0]
{
   2c2b0:	b510      	push	{r4, lr}
	if (*mem_head) {
   2c2b2:	b11b      	cbz	r3, 2c2bc <mem_release+0xe>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   2c2b4:	3307      	adds	r3, #7
   2c2b6:	f023 0303 	bic.w	r3, r3, #3
   2c2ba:	881b      	ldrh	r3, [r3, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c2bc:	680c      	ldr	r4, [r1, #0]
   2c2be:	4602      	mov	r2, r0
					       sizeof(mem_head)));
	}
	free_count++;
   2c2c0:	3301      	adds	r3, #1
   2c2c2:	f842 4b07 	str.w	r4, [r2], #7

	memcpy(mem, mem_head, sizeof(mem));

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   2c2c6:	f022 0203 	bic.w	r2, r2, #3
   2c2ca:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   2c2cc:	6008      	str	r0, [r1, #0]
}
   2c2ce:	bd10      	pop	{r4, pc}

0002c2d0 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   2c2d0:	fb02 0001 	mla	r0, r2, r1, r0
   2c2d4:	4770      	bx	lr

0002c2d6 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   2c2d6:	1a40      	subs	r0, r0, r1
   2c2d8:	b280      	uxth	r0, r0
}
   2c2da:	fbb0 f0f2 	udiv	r0, r0, r2
   2c2de:	4770      	bx	lr

0002c2e0 <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
   2c2e0:	b510      	push	{r4, lr}
	src += len;
   2c2e2:	4411      	add	r1, r2
	while (len--) {
   2c2e4:	3801      	subs	r0, #1
   2c2e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c2ea:	3a01      	subs	r2, #1
   2c2ec:	b292      	uxth	r2, r2
   2c2ee:	429a      	cmp	r2, r3
   2c2f0:	d100      	bne.n	2c2f4 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   2c2f2:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   2c2f4:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   2c2f8:	f800 4f01 	strb.w	r4, [r0, #1]!
   2c2fc:	e7f5      	b.n	2c2ea <mem_rcopy+0xa>

0002c2fe <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   2c2fe:	4401      	add	r1, r0
   2c300:	4288      	cmp	r0, r1
   2c302:	d101      	bne.n	2c308 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   2c304:	2000      	movs	r0, #0
   2c306:	4770      	bx	lr
		if (*src++) {
   2c308:	f810 3b01 	ldrb.w	r3, [r0], #1
   2c30c:	2b00      	cmp	r3, #0
   2c30e:	d0f7      	beq.n	2c300 <mem_nz+0x2>
			return 1;
   2c310:	2001      	movs	r0, #1
}
   2c312:	4770      	bx	lr

0002c314 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   2c314:	6010      	str	r0, [r2, #0]
   2c316:	6008      	str	r0, [r1, #0]

	return link;
}
   2c318:	4770      	bx	lr

0002c31a <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   2c31a:	6803      	ldr	r3, [r0, #0]
   2c31c:	680a      	ldr	r2, [r1, #0]
   2c31e:	4293      	cmp	r3, r2
   2c320:	f04f 0200 	mov.w	r2, #0
		return NULL;
   2c324:	bf12      	itee	ne
   2c326:	4613      	movne	r3, r2
	}

	old_head = *head;
	*head = *tail = NULL;
   2c328:	600a      	streq	r2, [r1, #0]
   2c32a:	6002      	streq	r2, [r0, #0]

	return old_head;
}
   2c32c:	4618      	mov	r0, r3
   2c32e:	4770      	bx	lr

0002c330 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   2c330:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   2c332:	6814      	ldr	r4, [r2, #0]
   2c334:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   2c336:	6814      	ldr	r4, [r2, #0]
   2c338:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
   2c33a:	6010      	str	r0, [r2, #0]

	return link;
}
   2c33c:	bd10      	pop	{r4, pc}

0002c33e <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   2c33e:	4288      	cmp	r0, r1
   2c340:	d003      	beq.n	2c34a <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   2c342:	b11a      	cbz	r2, 2c34c <memq_peek+0xe>
		*mem = head->mem;
   2c344:	6843      	ldr	r3, [r0, #4]
   2c346:	6013      	str	r3, [r2, #0]
   2c348:	4770      	bx	lr
		return NULL;
   2c34a:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   2c34c:	4770      	bx	lr

0002c34e <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   2c34e:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   2c350:	4283      	cmp	r3, r0
   2c352:	d009      	beq.n	2c368 <memq_dequeue+0x1a>
	if (mem) {
   2c354:	b122      	cbz	r2, 2c360 <memq_dequeue+0x12>
		*mem = head->mem;
   2c356:	6858      	ldr	r0, [r3, #4]
   2c358:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   2c35a:	681a      	ldr	r2, [r3, #0]
   2c35c:	600a      	str	r2, [r1, #0]

	return old_head;
   2c35e:	e001      	b.n	2c364 <memq_dequeue+0x16>
	if (old_head == NULL) {
   2c360:	2b00      	cmp	r3, #0
   2c362:	d1fa      	bne.n	2c35a <memq_dequeue+0xc>
}
   2c364:	4618      	mov	r0, r3
   2c366:	4770      	bx	lr
		return NULL; /* queue is empty */
   2c368:	2300      	movs	r3, #0
   2c36a:	e7fb      	b.n	2c364 <memq_dequeue+0x16>

0002c36c <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
   2c36c:	b510      	push	{r4, lr}
   2c36e:	1e42      	subs	r2, r0, #1
	uint8_t one_count = 0U;
   2c370:	2000      	movs	r0, #0

	while (octets_len--) {
   2c372:	3901      	subs	r1, #1
   2c374:	b2c9      	uxtb	r1, r1
   2c376:	29ff      	cmp	r1, #255	; 0xff
   2c378:	d100      	bne.n	2c37c <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   2c37a:	bd10      	pop	{r4, pc}
		bite = *octets;
   2c37c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   2c380:	2b00      	cmp	r3, #0
   2c382:	d0f6      	beq.n	2c372 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   2c384:	b25b      	sxtb	r3, r3
   2c386:	1e5c      	subs	r4, r3, #1
   2c388:	4023      	ands	r3, r4
			one_count++;
   2c38a:	3001      	adds	r0, #1
			bite &= (bite - 1);
   2c38c:	b2db      	uxtb	r3, r3
			one_count++;
   2c38e:	b2c0      	uxtb	r0, r0
   2c390:	e7f6      	b.n	2c380 <util_ones_count_get+0x14>

0002c392 <ticks_to_expire_prep>:
{
   2c392:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   2c394:	1a55      	subs	r5, r2, r1
   2c396:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   2c39a:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   2c39c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   2c39e:	d109      	bne.n	2c3b4 <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2c3a0:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   2c3a4:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   2c3a6:	42a2      	cmp	r2, r4
   2c3a8:	d90e      	bls.n	2c3c8 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   2c3aa:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0U;
   2c3ac:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   2c3ae:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   2c3b0:	6144      	str	r4, [r0, #20]
}
   2c3b2:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2c3b4:	1a8a      	subs	r2, r1, r2
   2c3b6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   2c3ba:	4293      	cmp	r3, r2
   2c3bc:	d901      	bls.n	2c3c2 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   2c3be:	1a9a      	subs	r2, r3, r2
   2c3c0:	e7f1      	b.n	2c3a6 <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   2c3c2:	4422      	add	r2, r4
   2c3c4:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0U;
   2c3c6:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   2c3c8:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0U;
   2c3ca:	2200      	movs	r2, #0
   2c3cc:	e7ef      	b.n	2c3ae <ticks_to_expire_prep+0x1c>

0002c3ce <ticker_job_op_cb>:
{
   2c3ce:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   2c3d0:	2200      	movs	r2, #0
   2c3d2:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   2c3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	user_op->status = status;
   2c3d6:	6299      	str	r1, [r3, #40]	; 0x28
{
   2c3d8:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   2c3da:	b10a      	cbz	r2, 2c3e0 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   2c3dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2c3de:	4710      	bx	r2
}
   2c3e0:	4770      	bx	lr

0002c3e2 <ticker_job_list_insert>:
{
   2c3e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c3e6:	b08b      	sub	sp, #44	; 0x2c
	node = &instance->nodes[0];
   2c3e8:	6803      	ldr	r3, [r0, #0]
   2c3ea:	9302      	str	r3, [sp, #8]
	count_user = instance->count_user;
   2c3ec:	f890 b009 	ldrb.w	fp, [r0, #9]
	users = &instance->users[0];
   2c3f0:	6843      	ldr	r3, [r0, #4]
   2c3f2:	9307      	str	r3, [sp, #28]
{
   2c3f4:	4607      	mov	r7, r0
   2c3f6:	468a      	mov	sl, r1
	while (count_user--) {
   2c3f8:	f10b 33ff 	add.w	r3, fp, #4294967295
   2c3fc:	fa5f fb83 	uxtb.w	fp, r3
   2c400:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   2c404:	d102      	bne.n	2c40c <ticker_job_list_insert+0x2a>
}
   2c406:	b00b      	add	sp, #44	; 0x2c
   2c408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		user = &users[count_user];
   2c40c:	9b07      	ldr	r3, [sp, #28]
   2c40e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   2c412:	9301      	str	r3, [sp, #4]
		user_ops = (void *)&user->user_op[0];
   2c414:	685b      	ldr	r3, [r3, #4]
   2c416:	9304      	str	r3, [sp, #16]
		user_ops_first = user->first;
   2c418:	9b01      	ldr	r3, [sp, #4]
   2c41a:	785e      	ldrb	r6, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
   2c41c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   2c420:	d071      	beq.n	2c506 <ticker_job_list_insert+0x124>
				ticker = &node[id_insert];
   2c422:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   2c426:	011b      	lsls	r3, r3, #4
   2c428:	9a02      	ldr	r2, [sp, #8]
   2c42a:	46d0      	mov	r8, sl
				insert_head = ticker->next;
   2c42c:	f812 a003 	ldrb.w	sl, [r2, r3]
				ticker = &node[id_insert];
   2c430:	18d4      	adds	r4, r2, r3
				user_op = NULL;
   2c432:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   2c434:	23ff      	movs	r3, #255	; 0xff
   2c436:	7023      	strb	r3, [r4, #0]
	ticker_new = &node[id];
   2c438:	fa0f f288 	sxth.w	r2, r8
	node = &instance->nodes[0];
   2c43c:	6839      	ldr	r1, [r7, #0]
	previous = TICKER_NULL;
   2c43e:	9303      	str	r3, [sp, #12]
	ticker_new = &node[id];
   2c440:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2c444:	0112      	lsls	r2, r2, #4
   2c446:	eb01 0902 	add.w	r9, r1, r2
   2c44a:	9205      	str	r2, [sp, #20]
	ticks_to_expire = ticker_new->ticks_to_expire;
   2c44c:	f8d9 0008 	ldr.w	r0, [r9, #8]
	current = instance->ticker_id_head;
   2c450:	7f7a      	ldrb	r2, [r7, #29]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2c452:	2aff      	cmp	r2, #255	; 0xff
   2c454:	d00b      	beq.n	2c46e <ticker_job_list_insert+0x8c>
		(ticker_current = &node[current])->ticks_to_expire))) {
   2c456:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
   2c45a:	ea4f 130e 	mov.w	r3, lr, lsl #4
   2c45e:	9306      	str	r3, [sp, #24]
   2c460:	18cb      	adds	r3, r1, r3
   2c462:	469e      	mov	lr, r3
		(ticks_to_expire_current =
   2c464:	f8d3 c008 	ldr.w	ip, [r3, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2c468:	4560      	cmp	r0, ip
   2c46a:	f080 8082 	bcs.w	2c572 <ticker_job_list_insert+0x190>
	ticker_new->next = current;
   2c46e:	9b05      	ldr	r3, [sp, #20]
	ticker_new->ticks_to_expire = ticks_to_expire;
   2c470:	f8c9 0008 	str.w	r0, [r9, #8]
	ticker_new->next = current;
   2c474:	54ca      	strb	r2, [r1, r3]
	if (previous == TICKER_NULL) {
   2c476:	9b03      	ldr	r3, [sp, #12]
   2c478:	2bff      	cmp	r3, #255	; 0xff
		node[previous].next = id;
   2c47a:	bf17      	itett	ne
   2c47c:	f9bd 300c 	ldrshne.w	r3, [sp, #12]
		instance->ticker_id_head = id;
   2c480:	f887 801d 	strbeq.w	r8, [r7, #29]
		node[previous].next = id;
   2c484:	eb03 0343 	addne.w	r3, r3, r3, lsl #1
   2c488:	011b      	lslne	r3, r3, #4
   2c48a:	bf18      	it	ne
   2c48c:	f801 8003 	strbne.w	r8, [r1, r3]
	if (current != TICKER_NULL) {
   2c490:	2aff      	cmp	r2, #255	; 0xff
   2c492:	d006      	beq.n	2c4a2 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   2c494:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2c498:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   2c49c:	6893      	ldr	r3, [r2, #8]
   2c49e:	1a18      	subs	r0, r3, r0
   2c4a0:	6090      	str	r0, [r2, #8]
	ticker->req = ticker->ack + 1;
   2c4a2:	78a3      	ldrb	r3, [r4, #2]
   2c4a4:	3301      	adds	r3, #1
   2c4a6:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   2c4a8:	2d00      	cmp	r5, #0
   2c4aa:	d0b7      	beq.n	2c41c <ticker_job_list_insert+0x3a>
				ticker_job_op_cb(user_op, status);
   2c4ac:	2100      	movs	r1, #0
   2c4ae:	4628      	mov	r0, r5
   2c4b0:	f7ff ff8d 	bl	2c3ce <ticker_job_op_cb>
				if ((ticker->ticks_periodic == 0U) &&
   2c4b4:	6863      	ldr	r3, [r4, #4]
   2c4b6:	2b00      	cmp	r3, #0
   2c4b8:	d1b0      	bne.n	2c41c <ticker_job_list_insert+0x3a>
					ticker->fp_op_func =
   2c4ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2c4bc:	6223      	str	r3, [r4, #32]
					ticker->op_context =
   2c4be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2c4c0:	6263      	str	r3, [r4, #36]	; 0x24
   2c4c2:	e7ab      	b.n	2c41c <ticker_job_list_insert+0x3a>
				user_op = &user_ops[user_ops_first];
   2c4c4:	9a04      	ldr	r2, [sp, #16]
   2c4c6:	2334      	movs	r3, #52	; 0x34
   2c4c8:	fb16 f303 	smulbb	r3, r6, r3
   2c4cc:	18d5      	adds	r5, r2, r3
				if (first == user->count_user_op) {
   2c4ce:	9a01      	ldr	r2, [sp, #4]
				first = user_ops_first + 1;
   2c4d0:	3601      	adds	r6, #1
				if (first == user->count_user_op) {
   2c4d2:	7812      	ldrb	r2, [r2, #0]
				first = user_ops_first + 1;
   2c4d4:	b2f6      	uxtb	r6, r6
					first = 0U;
   2c4d6:	42b2      	cmp	r2, r6
   2c4d8:	bf08      	it	eq
   2c4da:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   2c4dc:	9a04      	ldr	r2, [sp, #16]
   2c4de:	5cd3      	ldrb	r3, [r2, r3]
   2c4e0:	2b04      	cmp	r3, #4
   2c4e2:	d110      	bne.n	2c506 <ticker_job_list_insert+0x124>
				id_insert = user_op->id;
   2c4e4:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   2c4e8:	9b02      	ldr	r3, [sp, #8]
   2c4ea:	eb08 0448 	add.w	r4, r8, r8, lsl #1
   2c4ee:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				if (((ticker->req -
   2c4f2:	7863      	ldrb	r3, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   2c4f4:	78a2      	ldrb	r2, [r4, #2]
				if (((ticker->req -
   2c4f6:	1a9b      	subs	r3, r3, r2
   2c4f8:	f013 0fff 	tst.w	r3, #255	; 0xff
   2c4fc:	d008      	beq.n	2c510 <ticker_job_list_insert+0x12e>
					ticker_job_op_cb(user_op,
   2c4fe:	2101      	movs	r1, #1
   2c500:	4628      	mov	r0, r5
   2c502:	f7ff ff64 	bl	2c3ce <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   2c506:	9b01      	ldr	r3, [sp, #4]
   2c508:	789b      	ldrb	r3, [r3, #2]
   2c50a:	42b3      	cmp	r3, r6
   2c50c:	d1da      	bne.n	2c4c4 <ticker_job_list_insert+0xe2>
   2c50e:	e773      	b.n	2c3f8 <ticker_job_list_insert+0x16>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   2c510:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   2c512:	6979      	ldr	r1, [r7, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   2c514:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   2c518:	4293      	cmp	r3, r2
   2c51a:	d006      	beq.n	2c52a <ticker_job_list_insert+0x148>
		ticker->must_expire =
   2c51c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2c520:	1a98      	subs	r0, r3, r2
   2c522:	4242      	negs	r2, r0
   2c524:	4142      	adcs	r2, r0
   2c526:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   2c52a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2c52c:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   2c52e:	68ea      	ldr	r2, [r5, #12]
   2c530:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   2c532:	692a      	ldr	r2, [r5, #16]
   2c534:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   2c536:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   2c53a:	4293      	cmp	r3, r2
   2c53c:	bf88      	it	hi
   2c53e:	2300      	movhi	r3, #0
   2c540:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   2c542:	69ab      	ldr	r3, [r5, #24]
   2c544:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   2c546:	69eb      	ldr	r3, [r5, #28]
   2c548:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   2c54a:	6a2b      	ldr	r3, [r5, #32]
   2c54c:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
   2c54e:	f04f 0900 	mov.w	r9, #0
	ticker->ticks_to_expire = start->ticks_first;
   2c552:	68ab      	ldr	r3, [r5, #8]
   2c554:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   2c556:	f8c4 9014 	str.w	r9, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   2c55a:	686a      	ldr	r2, [r5, #4]
   2c55c:	4620      	mov	r0, r4
   2c55e:	f7ff ff18 	bl	2c392 <ticks_to_expire_prep>
	ticker->force = 1U;
   2c562:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   2c566:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   2c56a:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   2c56e:	70e3      	strb	r3, [r4, #3]
   2c570:	e760      	b.n	2c434 <ticker_job_list_insert+0x52>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   2c572:	ebb0 000c 	subs.w	r0, r0, ip
   2c576:	d10a      	bne.n	2c58e <ticker_job_list_insert+0x1ac>
   2c578:	f8b9 301e 	ldrh.w	r3, [r9, #30]
   2c57c:	9308      	str	r3, [sp, #32]
   2c57e:	f8be 301e 	ldrh.w	r3, [lr, #30]
   2c582:	9309      	str	r3, [sp, #36]	; 0x24
   2c584:	9b08      	ldr	r3, [sp, #32]
   2c586:	469e      	mov	lr, r3
   2c588:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2c58a:	459e      	cmp	lr, r3
   2c58c:	d803      	bhi.n	2c596 <ticker_job_list_insert+0x1b4>
		current = ticker_current->next;
   2c58e:	9b06      	ldr	r3, [sp, #24]
   2c590:	9203      	str	r2, [sp, #12]
   2c592:	5cca      	ldrb	r2, [r1, r3]
   2c594:	e75d      	b.n	2c452 <ticker_job_list_insert+0x70>
		(ticks_to_expire_current =
   2c596:	4660      	mov	r0, ip
   2c598:	e769      	b.n	2c46e <ticker_job_list_insert+0x8c>

0002c59a <ticker_worker>:
{
   2c59a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   2c59e:	7f86      	ldrb	r6, [r0, #30]
	instance->worker_trigger = 1U;
   2c5a0:	2301      	movs	r3, #1
{
   2c5a2:	b08b      	sub	sp, #44	; 0x2c
   2c5a4:	4605      	mov	r5, r0
	instance->worker_trigger = 1U;
   2c5a6:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   2c5a8:	b91e      	cbnz	r6, 2c5b2 <ticker_worker+0x18>
	if (instance->ticker_id_head == TICKER_NULL) {
   2c5aa:	7f43      	ldrb	r3, [r0, #29]
   2c5ac:	2bff      	cmp	r3, #255	; 0xff
   2c5ae:	d103      	bne.n	2c5b8 <ticker_worker+0x1e>
		instance->worker_trigger = 0U;
   2c5b0:	77c6      	strb	r6, [r0, #31]
}
   2c5b2:	b00b      	add	sp, #44	; 0x2c
   2c5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   2c5b8:	f7f2 fd02 	bl	1efc0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2c5bc:	696b      	ldr	r3, [r5, #20]
	ticker_id_head = instance->ticker_id_head;
   2c5be:	7f6f      	ldrb	r7, [r5, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2c5c0:	1ac0      	subs	r0, r0, r3
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   2c5c2:	7f2b      	ldrb	r3, [r5, #28]
   2c5c4:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2c5c6:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   2c5ca:	d004      	beq.n	2c5d6 <ticker_worker+0x3c>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   2c5cc:	69ae      	ldr	r6, [r5, #24]
	uint8_t slot_reserved = 0;
   2c5ce:	455e      	cmp	r6, fp
   2c5d0:	bf94      	ite	ls
   2c5d2:	2600      	movls	r6, #0
   2c5d4:	2601      	movhi	r6, #1
	ticks_expired = 0U;
   2c5d6:	2300      	movs	r3, #0
	node = &instance->nodes[0];
   2c5d8:	f8d5 8000 	ldr.w	r8, [r5]
	ticks_expired = 0U;
   2c5dc:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
   2c5de:	2fff      	cmp	r7, #255	; 0xff
   2c5e0:	d11a      	bne.n	2c618 <ticker_worker+0x7e>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   2c5e2:	7aea      	ldrb	r2, [r5, #11]
   2c5e4:	7aab      	ldrb	r3, [r5, #10]
   2c5e6:	4293      	cmp	r3, r2
   2c5e8:	d105      	bne.n	2c5f6 <ticker_worker+0x5c>
	uint8_t idx = *ticks_elapsed_index + 1;
   2c5ea:	3301      	adds	r3, #1
   2c5ec:	b2db      	uxtb	r3, r3
		idx = 0U;
   2c5ee:	2b02      	cmp	r3, #2
   2c5f0:	bf08      	it	eq
   2c5f2:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   2c5f4:	72eb      	strb	r3, [r5, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   2c5f6:	7aeb      	ldrb	r3, [r5, #11]
   2c5f8:	9a01      	ldr	r2, [sp, #4]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2c5fa:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   2c5fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2c600:	2104      	movs	r1, #4
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   2c602:	60da      	str	r2, [r3, #12]
	instance->worker_trigger = 0U;
   2c604:	2300      	movs	r3, #0
   2c606:	77eb      	strb	r3, [r5, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2c608:	2201      	movs	r2, #1
   2c60a:	462b      	mov	r3, r5
   2c60c:	2003      	movs	r0, #3
   2c60e:	46a4      	mov	ip, r4
}
   2c610:	b00b      	add	sp, #44	; 0x2c
   2c612:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2c616:	4760      	bx	ip
		ticker = &node[ticker_id_head];
   2c618:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   2c61c:	013f      	lsls	r7, r7, #4
   2c61e:	eb08 0407 	add.w	r4, r8, r7
		ticks_to_expire = ticker->ticks_to_expire;
   2c622:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   2c624:	459b      	cmp	fp, r3
   2c626:	d3dc      	bcc.n	2c5e2 <ticker_worker+0x48>
		ticks_expired += ticks_to_expire;
   2c628:	9a01      	ldr	r2, [sp, #4]
		ticker_id_head = ticker->next;
   2c62a:	f818 7007 	ldrb.w	r7, [r8, r7]
		ticks_expired += ticks_to_expire;
   2c62e:	441a      	add	r2, r3
		ticks_elapsed -= ticks_to_expire;
   2c630:	ebab 0b03 	sub.w	fp, fp, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   2c634:	78a3      	ldrb	r3, [r4, #2]
   2c636:	9302      	str	r3, [sp, #8]
		ticks_expired += ticks_to_expire;
   2c638:	9201      	str	r2, [sp, #4]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   2c63a:	7863      	ldrb	r3, [r4, #1]
   2c63c:	9a02      	ldr	r2, [sp, #8]
   2c63e:	1a9b      	subs	r3, r3, r2
   2c640:	b2db      	uxtb	r3, r3
   2c642:	2b01      	cmp	r3, #1
   2c644:	d1cb      	bne.n	2c5de <ticker_worker+0x44>
		if (ticker->ticks_slot != 0U &&
   2c646:	69a3      	ldr	r3, [r4, #24]
   2c648:	9303      	str	r3, [sp, #12]
   2c64a:	2b00      	cmp	r3, #0
   2c64c:	d030      	beq.n	2c6b0 <ticker_worker+0x116>
   2c64e:	2e00      	cmp	r6, #0
   2c650:	f040 8095 	bne.w	2c77e <ticker_worker+0x1e4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   2c654:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   2c658:	9304      	str	r3, [sp, #16]
   2c65a:	3380      	adds	r3, #128	; 0x80
   2c65c:	d028      	beq.n	2c6b0 <ticker_worker+0x116>
   2c65e:	2fff      	cmp	r7, #255	; 0xff
   2c660:	d026      	beq.n	2c6b0 <ticker_worker+0x116>
		int32_t lazy_current = ticker->lazy_current;
   2c662:	8be1      	ldrh	r1, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   2c664:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   2c666:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
   2c668:	2000      	movs	r0, #0
		if (lazy_current >= ticker->lazy_periodic) {
   2c66a:	4299      	cmp	r1, r3
		uint32_t acc_ticks_to_expire = 0U;
   2c66c:	9005      	str	r0, [sp, #20]
				(lazy_current - ticker->priority);
   2c66e:	9804      	ldr	r0, [sp, #16]
			lazy_current -= ticker->lazy_periodic;
   2c670:	bf28      	it	cs
   2c672:	1ac9      	subcs	r1, r1, r3
		uint32_t current_age = ticker->ticks_periodic +
   2c674:	fb01 2302 	mla	r3, r1, r2, r2
				(lazy_current - ticker->priority);
   2c678:	1a09      	subs	r1, r1, r0
		uint32_t current_age = ticker->ticks_periodic +
   2c67a:	9308      	str	r3, [sp, #32]
				(lazy_current - ticker->priority);
   2c67c:	9109      	str	r1, [sp, #36]	; 0x24
		uint32_t current_age = ticker->ticks_periodic +
   2c67e:	463b      	mov	r3, r7
			struct ticker_node *ticker_next = &nodes[id_head];
   2c680:	b21b      	sxth	r3, r3
   2c682:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2c686:	011b      	lsls	r3, r3, #4
   2c688:	eb08 0a03 	add.w	sl, r8, r3
   2c68c:	9307      	str	r3, [sp, #28]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   2c68e:	f8da 9008 	ldr.w	r9, [sl, #8]
   2c692:	9b05      	ldr	r3, [sp, #20]
   2c694:	444b      	add	r3, r9
   2c696:	9305      	str	r3, [sp, #20]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   2c698:	9905      	ldr	r1, [sp, #20]
   2c69a:	9b03      	ldr	r3, [sp, #12]
   2c69c:	428b      	cmp	r3, r1
   2c69e:	d307      	bcc.n	2c6b0 <ticker_worker+0x116>
			if (ticker_next->ticks_slot == 0U) {
   2c6a0:	f8da 3018 	ldr.w	r3, [sl, #24]
   2c6a4:	bb73      	cbnz	r3, 2c704 <ticker_worker+0x16a>
			id_head = ticker_next->next;
   2c6a6:	9b07      	ldr	r3, [sp, #28]
   2c6a8:	f818 3003 	ldrb.w	r3, [r8, r3]
		while (id_head != TICKER_NULL) {
   2c6ac:	2bff      	cmp	r3, #255	; 0xff
   2c6ae:	d1e7      	bne.n	2c680 <ticker_worker+0xe6>
		must_expire_skip = 0U;
   2c6b0:	f04f 0900 	mov.w	r9, #0
		if (ticker->ext_data) {
   2c6b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c6b6:	b113      	cbz	r3, 2c6be <ticker_worker+0x124>
			ticker->ext_data->ticks_drift = 0U;
   2c6b8:	2200      	movs	r2, #0
   2c6ba:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
   2c6bc:	721a      	strb	r2, [r3, #8]
		ticker->ack--;
   2c6be:	9b02      	ldr	r3, [sp, #8]
		if (ticker->timeout_func) {
   2c6c0:	f8d4 a00c 	ldr.w	sl, [r4, #12]
		ticker->ack--;
   2c6c4:	3b01      	subs	r3, #1
   2c6c6:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   2c6c8:	f1ba 0f00 	cmp.w	sl, #0
   2c6cc:	d087      	beq.n	2c5de <ticker_worker+0x44>
					   ticks_expired -
   2c6ce:	9b01      	ldr	r3, [sp, #4]
   2c6d0:	6960      	ldr	r0, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   2c6d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   2c6d4:	1a18      	subs	r0, r3, r0
   2c6d6:	696b      	ldr	r3, [r5, #20]
   2c6d8:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   2c6da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   2c6de:	f1b9 0f00 	cmp.w	r9, #0
   2c6e2:	d175      	bne.n	2c7d0 <ticker_worker+0x236>
   2c6e4:	8be2      	ldrh	r2, [r4, #30]
   2c6e6:	6923      	ldr	r3, [r4, #16]
   2c6e8:	47d0      	blx	sl
			if (must_expire_skip == 0U) {
   2c6ea:	f1b9 0f00 	cmp.w	r9, #0
   2c6ee:	f47f af76 	bne.w	2c5de <ticker_worker+0x44>
				if (ticker->ticks_slot != 0U) {
   2c6f2:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   2c6f4:	f8a4 901e 	strh.w	r9, [r4, #30]
					slot_reserved = 1U;
   2c6f8:	2b00      	cmp	r3, #0
				ticker->force = 0U;
   2c6fa:	f884 9003 	strb.w	r9, [r4, #3]
					slot_reserved = 1U;
   2c6fe:	bf18      	it	ne
   2c700:	2601      	movne	r6, #1
   2c702:	e76c      	b.n	2c5de <ticker_worker+0x44>
			int32_t lazy_next = ticker_next->lazy_current;
   2c704:	f8ba 101e 	ldrh.w	r1, [sl, #30]
				ticker_next->lazy_periodic > lazy_next;
   2c708:	f8ba c01c 	ldrh.w	ip, [sl, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   2c70c:	f8da e004 	ldr.w	lr, [sl, #4]
			int32_t lazy_next = ticker_next->lazy_current;
   2c710:	9106      	str	r1, [sp, #24]
			if (!lazy_next_periodic_skip) {
   2c712:	4561      	cmp	r1, ip
				lazy_next -= ticker_next->lazy_periodic;
   2c714:	bf24      	itt	cs
   2c716:	eba1 030c 	subcs.w	r3, r1, ip
   2c71a:	9306      	strcs	r3, [sp, #24]
				ticker_next->priority;
   2c71c:	f99a 002d 	ldrsb.w	r0, [sl, #45]	; 0x2d
					  0U :
   2c720:	f1be 0f00 	cmp.w	lr, #0
   2c724:	d049      	beq.n	2c7ba <ticker_worker+0x220>
   2c726:	ebae 0909 	sub.w	r9, lr, r9
				(ticker->ticks_periodic == 0U) ||
   2c72a:	2a00      	cmp	r2, #0
   2c72c:	d047      	beq.n	2c7be <ticker_worker+0x224>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   2c72e:	9b06      	ldr	r3, [sp, #24]
   2c730:	fb0e 9e03 	mla	lr, lr, r3, r9
				(ticker->ticks_periodic == 0U) ||
   2c734:	9b08      	ldr	r3, [sp, #32]
   2c736:	4573      	cmp	r3, lr
   2c738:	bf8c      	ite	hi
   2c73a:	f04f 0901 	movhi.w	r9, #1
   2c73e:	f04f 0900 	movls.w	r9, #0
					(ticker->ticks_periodic != 0U) &&
   2c742:	bf34      	ite	cc
   2c744:	f04f 0e01 	movcc.w	lr, #1
   2c748:	f04f 0e00 	movcs.w	lr, #0
			if (!lazy_next_periodic_skip &&
   2c74c:	4561      	cmp	r1, ip
			uint8_t next_force = (ticker_next->force > ticker->force);
   2c74e:	f89a 3003 	ldrb.w	r3, [sl, #3]
   2c752:	f894 a003 	ldrb.w	sl, [r4, #3]
			if (!lazy_next_periodic_skip &&
   2c756:	d3a6      	bcc.n	2c6a6 <ticker_worker+0x10c>
   2c758:	4553      	cmp	r3, sl
   2c75a:	d810      	bhi.n	2c77e <ticker_worker+0x1e4>
			    (next_force ||
   2c75c:	f110 0f80 	cmn.w	r0, #128	; 0x80
   2c760:	d00d      	beq.n	2c77e <ticker_worker+0x1e4>
				(lazy_next - ticker_next->priority) >
   2c762:	9b06      	ldr	r3, [sp, #24]
			     next_is_critical ||
   2c764:	9909      	ldr	r1, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   2c766:	1a1b      	subs	r3, r3, r0
			     next_is_critical ||
   2c768:	428b      	cmp	r3, r1
   2c76a:	dd02      	ble.n	2c772 <ticker_worker+0x1d8>
			     (next_has_priority && !current_is_older) ||
   2c76c:	f1b9 0f00 	cmp.w	r9, #0
   2c770:	d005      	beq.n	2c77e <ticker_worker+0x1e4>
   2c772:	9b04      	ldr	r3, [sp, #16]
   2c774:	4283      	cmp	r3, r0
   2c776:	d196      	bne.n	2c6a6 <ticker_worker+0x10c>
			     (equal_priority && next_is_older))) {
   2c778:	f1be 0f00 	cmp.w	lr, #0
   2c77c:	d093      	beq.n	2c6a6 <ticker_worker+0x10c>
			struct ticker_ext *ext_data = ticker->ext_data;
   2c77e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   2c780:	8be2      	ldrh	r2, [r4, #30]
   2c782:	b14b      	cbz	r3, 2c798 <ticker_worker+0x1fe>
   2c784:	6819      	ldr	r1, [r3, #0]
   2c786:	b1f1      	cbz	r1, 2c7c6 <ticker_worker+0x22c>
			    ext_data->ticks_slot_window != 0U &&
   2c788:	7a19      	ldrb	r1, [r3, #8]
   2c78a:	b9e1      	cbnz	r1, 2c7c6 <ticker_worker+0x22c>
			    TICKER_RESCHEDULE_STATE_NONE &&
   2c78c:	8ba1      	ldrh	r1, [r4, #28]
   2c78e:	4291      	cmp	r1, r2
   2c790:	d819      	bhi.n	2c7c6 <ticker_worker+0x22c>
				ext_data->reschedule_state =
   2c792:	f04f 0101 	mov.w	r1, #1
				ext_data->reschedule_state =
   2c796:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
   2c798:	3201      	adds	r2, #1
			if ((ticker->must_expire == 0U) ||
   2c79a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   2c79e:	b292      	uxth	r2, r2
   2c7a0:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   2c7a2:	b131      	cbz	r1, 2c7b2 <ticker_worker+0x218>
   2c7a4:	8ba1      	ldrh	r1, [r4, #28]
   2c7a6:	4291      	cmp	r1, r2
   2c7a8:	d203      	bcs.n	2c7b2 <ticker_worker+0x218>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   2c7aa:	b173      	cbz	r3, 2c7ca <ticker_worker+0x230>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   2c7ac:	7a1b      	ldrb	r3, [r3, #8]
   2c7ae:	2b01      	cmp	r3, #1
   2c7b0:	d10b      	bne.n	2c7ca <ticker_worker+0x230>
				ticker->ack--;
   2c7b2:	9b02      	ldr	r3, [sp, #8]
   2c7b4:	3b01      	subs	r3, #1
   2c7b6:	70a3      	strb	r3, [r4, #2]
				continue;
   2c7b8:	e711      	b.n	2c5de <ticker_worker+0x44>
					  0U :
   2c7ba:	46f1      	mov	r9, lr
   2c7bc:	e7b5      	b.n	2c72a <ticker_worker+0x190>
				(ticker->ticks_periodic == 0U) ||
   2c7be:	f04f 0901 	mov.w	r9, #1
					(ticker->ticks_periodic != 0U) &&
   2c7c2:	4696      	mov	lr, r2
   2c7c4:	e7c2      	b.n	2c74c <ticker_worker+0x1b2>
				ext_data->reschedule_state =
   2c7c6:	2100      	movs	r1, #0
   2c7c8:	e7e5      	b.n	2c796 <ticker_worker+0x1fc>
			must_expire_skip = 1U;
   2c7ca:	f04f 0901 	mov.w	r9, #1
   2c7ce:	e771      	b.n	2c6b4 <ticker_worker+0x11a>
			ticker->timeout_func(ticks_at_expire,
   2c7d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2c7d4:	e787      	b.n	2c6e6 <ticker_worker+0x14c>

0002c7d6 <ticker_start>:
{
   2c7d6:	b510      	push	{r4, lr}
   2c7d8:	b08a      	sub	sp, #40	; 0x28
	return ticker_start_ext(instance_index, user_id, ticker_id,
   2c7da:	2400      	movs	r4, #0
   2c7dc:	9409      	str	r4, [sp, #36]	; 0x24
   2c7de:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2c7e0:	9408      	str	r4, [sp, #32]
   2c7e2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   2c7e4:	9407      	str	r4, [sp, #28]
   2c7e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
   2c7e8:	9406      	str	r4, [sp, #24]
   2c7ea:	9c11      	ldr	r4, [sp, #68]	; 0x44
   2c7ec:	9405      	str	r4, [sp, #20]
   2c7ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
   2c7f0:	9404      	str	r4, [sp, #16]
   2c7f2:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
   2c7f6:	9403      	str	r4, [sp, #12]
   2c7f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   2c7fa:	9402      	str	r4, [sp, #8]
   2c7fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   2c7fe:	9401      	str	r4, [sp, #4]
   2c800:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c802:	9400      	str	r4, [sp, #0]
   2c804:	f7ed f834 	bl	19870 <ticker_start_ext>
}
   2c808:	b00a      	add	sp, #40	; 0x28
   2c80a:	bd10      	pop	{r4, pc}

0002c80c <ticker_update>:
{
   2c80c:	b510      	push	{r4, lr}
   2c80e:	b088      	sub	sp, #32
	return ticker_update_ext(instance_index, user_id, ticker_id,
   2c810:	2400      	movs	r4, #0
   2c812:	9407      	str	r4, [sp, #28]
   2c814:	9c10      	ldr	r4, [sp, #64]	; 0x40
   2c816:	9406      	str	r4, [sp, #24]
   2c818:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2c81a:	9405      	str	r4, [sp, #20]
   2c81c:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   2c820:	9404      	str	r4, [sp, #16]
   2c822:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
   2c826:	9403      	str	r4, [sp, #12]
   2c828:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c82a:	9402      	str	r4, [sp, #8]
   2c82c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2c82e:	9401      	str	r4, [sp, #4]
   2c830:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2c832:	9400      	str	r4, [sp, #0]
   2c834:	f7ed f868 	bl	19908 <ticker_update_ext>
}
   2c838:	b008      	add	sp, #32
   2c83a:	bd10      	pop	{r4, pc}

0002c83c <ticker_ticks_now_get>:
	return cntr_cnt_get();
   2c83c:	f7f2 bbc0 	b.w	1efc0 <cntr_cnt_get>

0002c840 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2c840:	1a40      	subs	r0, r0, r1
}
   2c842:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2c846:	4770      	bx	lr

0002c848 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   2c848:	2802      	cmp	r0, #2
{
   2c84a:	b538      	push	{r3, r4, r5, lr}
   2c84c:	4604      	mov	r4, r0
   2c84e:	461d      	mov	r5, r3
	switch (handle_type) {
   2c850:	d107      	bne.n	2c862 <ll_tx_pwr_lvl_get+0x1a>
#endif /* CONFIG_BT_OBSERVER && CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL*/
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
   2c852:	4608      	mov	r0, r1
   2c854:	f000 f99c 	bl	2cb90 <ll_connected_get>
			if (!conn) {
   2c858:	b108      	cbz	r0, 2c85e <ll_tx_pwr_lvl_get+0x16>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
				/* Level desired is maximum available */
				*tx_pwr_lvl = lll_radio_tx_pwr_max_get();
#else  /* !CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
				/* Return default if not multiple TXP */
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   2c85a:	2400      	movs	r4, #0
   2c85c:	702c      	strb	r4, [r5, #0]
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   2c85e:	4620      	mov	r0, r4
   2c860:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_UNKNOWN_CMD;
   2c862:	2401      	movs	r4, #1
   2c864:	e7fb      	b.n	2c85e <ll_tx_pwr_lvl_get+0x16>

0002c866 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   2c866:	2300      	movs	r3, #0
   2c868:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   2c86a:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   2c86c:	4770      	bx	lr

0002c86e <sys_get_le64>:
{
   2c86e:	4603      	mov	r3, r0
}
   2c870:	6800      	ldr	r0, [r0, #0]
   2c872:	6859      	ldr	r1, [r3, #4]
   2c874:	4770      	bx	lr

0002c876 <meta_evt>:
{
   2c876:	b570      	push	{r4, r5, r6, lr}
	return net_buf_simple_add(&buf->b, len);
   2c878:	f100 0408 	add.w	r4, r0, #8
   2c87c:	460e      	mov	r6, r1
   2c87e:	4620      	mov	r0, r4
   2c880:	2102      	movs	r1, #2
   2c882:	4615      	mov	r5, r2
   2c884:	f7f3 fb8c 	bl	1ffa0 <net_buf_simple_add>
	hdr->evt = evt;
   2c888:	233e      	movs	r3, #62	; 0x3e
   2c88a:	7003      	strb	r3, [r0, #0]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   2c88c:	1c6b      	adds	r3, r5, #1
	hdr->len = len;
   2c88e:	7043      	strb	r3, [r0, #1]
   2c890:	2101      	movs	r1, #1
   2c892:	4620      	mov	r0, r4
   2c894:	f7f3 fb84 	bl	1ffa0 <net_buf_simple_add>
	me->subevent = subevt;
   2c898:	7006      	strb	r6, [r0, #0]
   2c89a:	4629      	mov	r1, r5
   2c89c:	4620      	mov	r0, r4
}
   2c89e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c8a2:	f7f3 bb7d 	b.w	1ffa0 <net_buf_simple_add>

0002c8a6 <hci_num_cmplt_encode>:
{
   2c8a6:	b570      	push	{r4, r5, r6, lr}
   2c8a8:	f100 0408 	add.w	r4, r0, #8
   2c8ac:	460e      	mov	r6, r1
   2c8ae:	4620      	mov	r0, r4
   2c8b0:	2102      	movs	r1, #2
   2c8b2:	4615      	mov	r5, r2
   2c8b4:	f7f3 fb74 	bl	1ffa0 <net_buf_simple_add>
	hdr->evt = evt;
   2c8b8:	2313      	movs	r3, #19
	hdr->len = len;
   2c8ba:	2105      	movs	r1, #5
	hdr->evt = evt;
   2c8bc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   2c8be:	7041      	strb	r1, [r0, #1]
   2c8c0:	4620      	mov	r0, r4
   2c8c2:	f7f3 fb6d 	bl	1ffa0 <net_buf_simple_add>
	ep->num_handles = num_handles;
   2c8c6:	2301      	movs	r3, #1
   2c8c8:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   2c8ca:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   2c8ce:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   2c8d2:	bd70      	pop	{r4, r5, r6, pc}

0002c8d4 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   2c8d4:	7903      	ldrb	r3, [r0, #4]
   2c8d6:	2b03      	cmp	r3, #3
   2c8d8:	d00c      	beq.n	2c8f4 <hci_get_class+0x20>
		switch (node_rx->hdr.type) {
   2c8da:	2b13      	cmp	r3, #19
   2c8dc:	d012      	beq.n	2c904 <hci_get_class+0x30>
   2c8de:	d804      	bhi.n	2c8ea <hci_get_class+0x16>
   2c8e0:	2b04      	cmp	r3, #4
			return HCI_CLASS_NONE;
   2c8e2:	bf0c      	ite	eq
   2c8e4:	2002      	moveq	r0, #2
   2c8e6:	2000      	movne	r0, #0
   2c8e8:	4770      	bx	lr
		switch (node_rx->hdr.type) {
   2c8ea:	2b15      	cmp	r3, #21
			return HCI_CLASS_EVT_CONNECTION;
   2c8ec:	bf8c      	ite	hi
   2c8ee:	2000      	movhi	r0, #0
   2c8f0:	2003      	movls	r0, #3
   2c8f2:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   2c8f4:	7f03      	ldrb	r3, [r0, #28]
   2c8f6:	f003 0303 	and.w	r3, r3, #3
   2c8fa:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   2c8fc:	bf0c      	ite	eq
   2c8fe:	2004      	moveq	r0, #4
   2c900:	2005      	movne	r0, #5
   2c902:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   2c904:	2001      	movs	r0, #1
}
   2c906:	4770      	bx	lr

0002c908 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   2c908:	f7f0 bfba 	b.w	1d880 <lll_csrand_get>

0002c90c <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   2c90c:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   2c90e:	f000 fcae 	bl	2d26e <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   2c912:	2000      	movs	r0, #0
   2c914:	bd08      	pop	{r3, pc}

0002c916 <disabled_cb>:
	z_impl_k_sem_give(sem);
   2c916:	f7f8 bb51 	b.w	24fbc <z_impl_k_sem_give>

0002c91a <rx_demux_conn_tx_ack>:
{
   2c91a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c91c:	4605      	mov	r5, r0
   2c91e:	4614      	mov	r4, r2
   2c920:	9300      	str	r3, [sp, #0]
   2c922:	f8ad 1006 	strh.w	r1, [sp, #6]
		ull_conn_ack_dequeue();
   2c926:	f7f0 fbf5 	bl	1d114 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   2c92a:	4621      	mov	r1, r4
   2c92c:	9a00      	ldr	r2, [sp, #0]
   2c92e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   2c932:	f7f0 fc31 	bl	1d198 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   2c936:	4620      	mov	r0, r4
   2c938:	f7f0 fbb2 	bl	1d0a0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   2c93c:	466a      	mov	r2, sp
   2c93e:	f10d 0106 	add.w	r1, sp, #6
   2c942:	4628      	mov	r0, r5
   2c944:	f7f0 fbd0 	bl	1d0e8 <ull_conn_ack_by_last_peek>
	} while (link);
   2c948:	4604      	mov	r4, r0
   2c94a:	2800      	cmp	r0, #0
   2c94c:	d1eb      	bne.n	2c926 <rx_demux_conn_tx_ack+0xc>
			ll_rx_sched();
   2c94e:	f7ee fbd3 	bl	1b0f8 <ll_rx_sched>
}
   2c952:	b003      	add	sp, #12
   2c954:	bd30      	pop	{r4, r5, pc}

0002c956 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   2c956:	2300      	movs	r3, #0
   2c958:	7003      	strb	r3, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   2c95a:	2308      	movs	r3, #8
   2c95c:	700b      	strb	r3, [r1, #0]
}
   2c95e:	4770      	bx	lr

0002c960 <ll_radio_state_is_idle>:
	return lll_radio_is_idle();
   2c960:	f000 baa2 	b.w	2cea8 <lll_radio_is_idle>

0002c964 <adva_update.isra.4>:

	/* All legacy PDUs have AdvA at the same offset */
	return pdu->adv_ind.addr;
}

static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
   2c964:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	} else if (ll_adv_cmds_is_ext() && pdu->tx_addr) {
		tx_addr = ll_adv_aux_random_addr_get(adv, NULL);
#endif
	} else {
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
   2c966:	4604      	mov	r4, r0
static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
   2c968:	4605      	mov	r5, r0
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
   2c96a:	f814 0b02 	ldrb.w	r0, [r4], #2
   2c96e:	2100      	movs	r1, #0
   2c970:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2c974:	f7ed f84c 	bl	19a10 <ll_addr_get>
   2c978:	6803      	ldr	r3, [r0, #0]
   2c97a:	f8c5 3002 	str.w	r3, [r5, #2]
   2c97e:	8883      	ldrh	r3, [r0, #4]
   2c980:	80a3      	strh	r3, [r4, #4]

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);

	return adv_addr;
}
   2c982:	4620      	mov	r0, r4
   2c984:	bd38      	pop	{r3, r4, r5, pc}

0002c986 <ull_adv_init>:
{
   2c986:	b508      	push	{r3, lr}
   2c988:	f7ef f848 	bl	1ba1c <init_reset.part.3>
}
   2c98c:	2000      	movs	r0, #0
   2c98e:	bd08      	pop	{r3, pc}

0002c990 <ull_adv_reset>:
{
   2c990:	b508      	push	{r3, lr}
		(void)disable(handle);
   2c992:	f7ef f925 	bl	1bbe0 <disable.constprop.6>
}
   2c996:	2000      	movs	r0, #0
   2c998:	bd08      	pop	{r3, pc}

0002c99a <ull_adv_is_enabled>:
{
   2c99a:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   2c99c:	f7ef f912 	bl	1bbc4 <ull_adv_is_enabled_get>
}
   2c9a0:	3000      	adds	r0, #0
   2c9a2:	bf18      	it	ne
   2c9a4:	2001      	movne	r0, #1
   2c9a6:	bd08      	pop	{r3, pc}

0002c9a8 <ull_adv_filter_pol_get>:
{
   2c9a8:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   2c9aa:	f7ef f90b 	bl	1bbc4 <ull_adv_is_enabled_get>
	if (!adv) {
   2c9ae:	b118      	cbz	r0, 2c9b8 <ull_adv_filter_pol_get+0x10>
	return adv->lll.filter_policy;
   2c9b0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   2c9b4:	f000 0003 	and.w	r0, r0, #3
}
   2c9b8:	bd08      	pop	{r3, pc}

0002c9ba <ull_scan_rsp_set>:
{
   2c9ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   2c9bc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   2c9c0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2c9c4:	460e      	mov	r6, r1
   2c9c6:	4605      	mov	r5, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   2c9c8:	f10d 0107 	add.w	r1, sp, #7
   2c9cc:	3038      	adds	r0, #56	; 0x38
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   2c9ce:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   2c9d0:	4617      	mov	r7, r2
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   2c9d2:	f7f1 f9d7 	bl	1dd84 <lll_adv_pdu_alloc>
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   2c9d6:	7803      	ldrb	r3, [r0, #0]
   2c9d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2c9dc:	f043 0304 	orr.w	r3, r3, #4
   2c9e0:	7003      	strb	r3, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
   2c9e2:	7822      	ldrb	r2, [r4, #0]
   2c9e4:	b2db      	uxtb	r3, r3
   2c9e6:	f3c2 1280 	ubfx	r2, r2, #6, #1
   2c9ea:	f362 1386 	bfi	r3, r2, #6, #1
	pdu->rx_addr = 0;
   2c9ee:	f36f 13c7 	bfc	r3, #7, #1
   2c9f2:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   2c9f4:	1db3      	adds	r3, r6, #6
   2c9f6:	7043      	strb	r3, [r0, #1]
   2c9f8:	4623      	mov	r3, r4
   2c9fa:	4639      	mov	r1, r7
   2c9fc:	f853 2f02 	ldr.w	r2, [r3, #2]!
   2ca00:	f8c0 2002 	str.w	r2, [r0, #2]
   2ca04:	889b      	ldrh	r3, [r3, #4]
   2ca06:	80c3      	strh	r3, [r0, #6]
   2ca08:	4632      	mov	r2, r6
   2ca0a:	3008      	adds	r0, #8
   2ca0c:	f001 fc4d 	bl	2e2aa <memcpy>
	pdu->last = idx;
   2ca10:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2ca14:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
   2ca18:	2000      	movs	r0, #0
   2ca1a:	b003      	add	sp, #12
   2ca1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ca1e <ull_scan_init>:
}
   2ca1e:	2000      	movs	r0, #0
   2ca20:	4770      	bx	lr

0002ca22 <disable.constprop.1>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
   2ca22:	b510      	push	{r4, lr}
{
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
   2ca24:	2000      	movs	r0, #0
   2ca26:	f7ef fa35 	bl	1be94 <ull_scan_is_enabled_get>
	if (!scan) {
   2ca2a:	4604      	mov	r4, r0
   2ca2c:	b158      	cbz	r0, 2ca46 <disable.constprop.1+0x24>
	if (scan->lll.conn) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   2ca2e:	4601      	mov	r1, r0
   2ca30:	2000      	movs	r0, #0
   2ca32:	f7ef fa09 	bl	1be48 <ull_scan_disable>
	if (ret) {
   2ca36:	b928      	cbnz	r0, 2ca44 <disable.constprop.1+0x22>
		return ret;
	}

	scan->is_enabled = 0U;
   2ca38:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2ca3c:	f360 0300 	bfi	r3, r0, #0, #1
   2ca40:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   2ca44:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2ca46:	200c      	movs	r0, #12
   2ca48:	e7fc      	b.n	2ca44 <disable.constprop.1+0x22>

0002ca4a <ull_scan_reset>:
{
   2ca4a:	b508      	push	{r3, lr}
		(void)disable(handle);
   2ca4c:	f7ff ffe9 	bl	2ca22 <disable.constprop.1>
}
   2ca50:	2000      	movs	r0, #0
   2ca52:	bd08      	pop	{r3, pc}

0002ca54 <ll_scan_enable>:
{
   2ca54:	b510      	push	{r4, lr}
	if (!enable) {
   2ca56:	b918      	cbnz	r0, 2ca60 <ll_scan_enable+0xc>
}
   2ca58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = disable(SCAN_HANDLE_1M);
   2ca5c:	f7ff bfe1 	b.w	2ca22 <disable.constprop.1>
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   2ca60:	2000      	movs	r0, #0
   2ca62:	f7ef fa25 	bl	1beb0 <ull_scan_is_disabled_get>
	if (!scan) {
   2ca66:	4604      	mov	r4, r0
   2ca68:	b198      	cbz	r0, 2ca92 <ll_scan_enable+0x3e>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   2ca6a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   2ca6e:	079b      	lsls	r3, r3, #30
   2ca70:	d404      	bmi.n	2ca7c <ll_scan_enable+0x28>
		err = ull_scan_enable(scan);
   2ca72:	4620      	mov	r0, r4
}
   2ca74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = ull_scan_enable(scan);
   2ca78:	f7d5 bbd2 	b.w	2220 <ull_scan_enable>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
   2ca7c:	2100      	movs	r1, #0
   2ca7e:	2001      	movs	r0, #1
   2ca80:	f7ec ffc6 	bl	19a10 <ll_addr_get>
   2ca84:	2106      	movs	r1, #6
   2ca86:	f7ff fc3a 	bl	2c2fe <mem_nz>
   2ca8a:	2800      	cmp	r0, #0
   2ca8c:	d1f1      	bne.n	2ca72 <ll_scan_enable+0x1e>
			return BT_HCI_ERR_INVALID_PARAM;
   2ca8e:	2012      	movs	r0, #18
}
   2ca90:	bd10      	pop	{r4, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   2ca92:	200c      	movs	r0, #12
   2ca94:	e7fc      	b.n	2ca90 <ll_scan_enable+0x3c>

0002ca96 <ull_scan_is_enabled>:
{
   2ca96:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   2ca98:	f7ef f9fc 	bl	1be94 <ull_scan_is_enabled_get>
	if (!scan) {
   2ca9c:	b140      	cbz	r0, 2cab0 <ull_scan_is_enabled+0x1a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   2ca9e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   2caa2:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   2caa6:	f003 0301 	and.w	r3, r3, #1
   2caaa:	09c0      	lsrs	r0, r0, #7
   2caac:	fa03 f000 	lsl.w	r0, r3, r0
}
   2cab0:	bd08      	pop	{r3, pc}

0002cab2 <ull_scan_filter_pol_get>:
{
   2cab2:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   2cab4:	f7ef f9ee 	bl	1be94 <ull_scan_is_enabled_get>
	if (!scan) {
   2cab8:	b118      	cbz	r0, 2cac2 <ull_scan_filter_pol_get+0x10>
	return scan->lll.filter_policy;
   2caba:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   2cabe:	f3c0 00c1 	ubfx	r0, r0, #3, #2
}
   2cac2:	bd08      	pop	{r3, pc}

0002cac4 <tx_ull_dequeue>:
{
   2cac4:	4603      	mov	r3, r0
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   2cac6:	e9d0 2045 	ldrd	r2, r0, [r0, #276]	; 0x114
{
   2caca:	b510      	push	{r4, lr}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   2cacc:	b978      	cbnz	r0, 2caee <tx_ull_dequeue+0x2a>
   2cace:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   2cad2:	4290      	cmp	r0, r2
   2cad4:	d00b      	beq.n	2caee <tx_ull_dequeue+0x2a>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2cad6:	7910      	ldrb	r0, [r2, #4]
   2cad8:	f000 0003 	and.w	r0, r0, #3
   2cadc:	2803      	cmp	r0, #3
   2cade:	d104      	bne.n	2caea <tx_ull_dequeue+0x26>
		    ((pdu_data_tx->llctrl.opcode !=
   2cae0:	79d0      	ldrb	r0, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2cae2:	2803      	cmp	r0, #3
   2cae4:	d003      	beq.n	2caee <tx_ull_dequeue+0x2a>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   2cae6:	280a      	cmp	r0, #10
   2cae8:	d001      	beq.n	2caee <tx_ull_dequeue+0x2a>
			conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   2caea:	e9c3 2246 	strd	r2, r2, [r3, #280]	; 0x118
	if (conn->tx_head == conn->tx_ctrl) {
   2caee:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
   2caf2:	6810      	ldr	r0, [r2, #0]
   2caf4:	4294      	cmp	r4, r2
   2caf6:	d10d      	bne.n	2cb14 <tx_ull_dequeue+0x50>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   2caf8:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
		conn->tx_head = conn->tx_head->next;
   2cafc:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   2cb00:	42a2      	cmp	r2, r4
			conn->tx_ctrl = NULL;
   2cb02:	bf06      	itte	eq
   2cb04:	2200      	moveq	r2, #0
			conn->tx_ctrl_last = NULL;
   2cb06:	e9c3 2246 	strdeq	r2, r2, [r3, #280]	; 0x118
			conn->tx_ctrl = conn->tx_head;
   2cb0a:	f8c3 0118 	strne.w	r0, [r3, #280]	; 0x118
		tx->next = tx;
   2cb0e:	6009      	str	r1, [r1, #0]
}
   2cb10:	4608      	mov	r0, r1
   2cb12:	bd10      	pop	{r4, pc}
		if (conn->tx_head == conn->tx_data) {
   2cb14:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
		conn->tx_head = conn->tx_head->next;
   2cb18:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
		if (conn->tx_head == conn->tx_data) {
   2cb1c:	4294      	cmp	r4, r2
			conn->tx_data = conn->tx_data->next;
   2cb1e:	bf08      	it	eq
   2cb20:	f8c3 0120 	streq.w	r0, [r3, #288]	; 0x120
		tx->next = NULL;
   2cb24:	2300      	movs	r3, #0
   2cb26:	600b      	str	r3, [r1, #0]
   2cb28:	e7f2      	b.n	2cb10 <tx_ull_dequeue+0x4c>

0002cb2a <feat_get>:
	       (features[1] << 8) | (features[2] << 16);
   2cb2a:	7883      	ldrb	r3, [r0, #2]
   2cb2c:	7842      	ldrb	r2, [r0, #1]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   2cb2e:	7800      	ldrb	r0, [r0, #0]
	       (features[1] << 8) | (features[2] << 16);
   2cb30:	041b      	lsls	r3, r3, #16
   2cb32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cb36:	4318      	orrs	r0, r3
   2cb38:	f3c0 0010 	ubfx	r0, r0, #0, #17
}
   2cb3c:	f440 5043 	orr.w	r0, r0, #12480	; 0x30c0
   2cb40:	f040 0010 	orr.w	r0, r0, #16
   2cb44:	4770      	bx	lr

0002cb46 <ctrl_tx_enqueue>:
	if (
   2cb46:	e9d0 3245 	ldrd	r3, r2, [r0, #276]	; 0x114
{
   2cb4a:	b510      	push	{r4, lr}
	if (
   2cb4c:	b18b      	cbz	r3, 2cb72 <ctrl_tx_enqueue+0x2c>
		if (conn->tx_head == conn->tx_data) {
   2cb4e:	f8d0 4120 	ldr.w	r4, [r0, #288]	; 0x120
   2cb52:	42a3      	cmp	r3, r4
			conn->tx_data = conn->tx_data->next;
   2cb54:	bf04      	itt	eq
   2cb56:	681c      	ldreq	r4, [r3, #0]
   2cb58:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
		if (!conn->tx_ctrl) {
   2cb5c:	b992      	cbnz	r2, 2cb84 <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head->next;
   2cb5e:	681a      	ldr	r2, [r3, #0]
   2cb60:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   2cb62:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl = tx;
   2cb64:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
	if (!tx->next) {
   2cb68:	680b      	ldr	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   2cb6a:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
	if (!tx->next) {
   2cb6e:	b133      	cbz	r3, 2cb7e <ctrl_tx_enqueue+0x38>
}
   2cb70:	bd10      	pop	{r4, pc}
		if (!conn->tx_ctrl) {
   2cb72:	b93a      	cbnz	r2, 2cb84 <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head;
   2cb74:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl = tx;
   2cb76:	e9c0 1145 	strd	r1, r1, [r0, #276]	; 0x114
				conn->tx_ctrl_last = tx;
   2cb7a:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
		conn->tx_data_last = tx;
   2cb7e:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
}
   2cb82:	e7f5      	b.n	2cb70 <ctrl_tx_enqueue+0x2a>
	tx->next = conn->tx_ctrl_last->next;
   2cb84:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   2cb88:	681a      	ldr	r2, [r3, #0]
   2cb8a:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   2cb8c:	6019      	str	r1, [r3, #0]
   2cb8e:	e7eb      	b.n	2cb68 <ctrl_tx_enqueue+0x22>

0002cb90 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   2cb90:	2802      	cmp	r0, #2
{
   2cb92:	b510      	push	{r4, lr}
   2cb94:	4604      	mov	r4, r0
	if (handle >= CONFIG_BT_MAX_CONN) {
   2cb96:	d804      	bhi.n	2cba2 <ll_connected_get+0x12>
	conn = ll_conn_get(handle);
   2cb98:	f7ef fb4a 	bl	1c230 <ll_conn_get>
	if (conn->lll.handle != handle) {
   2cb9c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   2cb9e:	42a3      	cmp	r3, r4
   2cba0:	d000      	beq.n	2cba4 <ll_connected_get+0x14>
		return NULL;
   2cba2:	2000      	movs	r0, #0
}
   2cba4:	bd10      	pop	{r4, pc}

0002cba6 <ll_conn_update>:
{
   2cba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cbaa:	4680      	mov	r8, r0
   2cbac:	460c      	mov	r4, r1
   2cbae:	4691      	mov	r9, r2
   2cbb0:	469a      	mov	sl, r3
   2cbb2:	f8bd 7020 	ldrh.w	r7, [sp, #32]
   2cbb6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
   2cbba:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	conn = ll_connected_get(handle);
   2cbbe:	f7ff ffe7 	bl	2cb90 <ll_connected_get>
	if (!conn) {
   2cbc2:	2800      	cmp	r0, #0
   2cbc4:	d06b      	beq.n	2cc9e <ll_conn_update+0xf8>
	if (!cmd) {
   2cbc6:	bb84      	cbnz	r4, 2cc2a <ll_conn_update+0x84>
		if (!conn->llcp_conn_param.disabled &&
   2cbc8:	f890 30ee 	ldrb.w	r3, [r0, #238]	; 0xee
   2cbcc:	06da      	lsls	r2, r3, #27
   2cbce:	d408      	bmi.n	2cbe2 <ll_conn_update+0x3c>
		    (!conn->common.fex_valid ||
   2cbd0:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
		if (!conn->llcp_conn_param.disabled &&
   2cbd4:	f011 0101 	ands.w	r1, r1, #1
   2cbd8:	d042      	beq.n	2cc60 <ll_conn_update+0xba>
		     (conn->llcp_feature.features_conn &
   2cbda:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
		    (!conn->common.fex_valid ||
   2cbde:	0793      	lsls	r3, r2, #30
   2cbe0:	d424      	bmi.n	2cc2c <ll_conn_update+0x86>
		} else if (conn->lll.role) {
   2cbe2:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   2cbe6:	2b00      	cmp	r3, #0
   2cbe8:	db5b      	blt.n	2cca2 <ll_conn_update+0xfc>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   2cbea:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
   2cbee:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
   2cbf2:	429a      	cmp	r2, r3
   2cbf4:	d157      	bne.n	2cca6 <ll_conn_update+0x100>
		conn->llcp_cu.win_size = 1U;
   2cbf6:	2301      	movs	r3, #1
   2cbf8:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2cbfc:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
		conn->llcp_cu.interval = interval_max;
   2cc00:	f8a0 70a4 	strh.w	r7, [r0, #164]	; 0xa4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2cc04:	f023 0307 	bic.w	r3, r3, #7
		conn->llcp_cu.win_offset_us = 0U;
   2cc08:	2400      	movs	r4, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2cc0a:	f043 0305 	orr.w	r3, r3, #5
		conn->llcp_cu.req++;
   2cc0e:	3201      	adds	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   2cc10:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		conn->llcp_cu.latency = latency;
   2cc14:	f8a0 60a6 	strh.w	r6, [r0, #166]	; 0xa6
		conn->llcp_cu.timeout = timeout;
   2cc18:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2cc1c:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
		conn->llcp_cu.req++;
   2cc20:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
}
   2cc24:	4620      	mov	r0, r4
   2cc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2cc2a:	4621      	mov	r1, r4
		cmd--;
   2cc2c:	3901      	subs	r1, #1
		if (cmd) {
   2cc2e:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
   2cc32:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   2cc36:	f890 20ed 	ldrb.w	r2, [r0, #237]	; 0xed
   2cc3a:	d013      	beq.n	2cc64 <ll_conn_update+0xbe>
			if ((conn->llcp_conn_param.req ==
   2cc3c:	4293      	cmp	r3, r2
   2cc3e:	d032      	beq.n	2cca6 <ll_conn_update+0x100>
			    (conn->llcp_conn_param.state !=
   2cc40:	f890 30ee 	ldrb.w	r3, [r0, #238]	; 0xee
			     conn->llcp_conn_param.ack) ||
   2cc44:	f003 0207 	and.w	r2, r3, #7
   2cc48:	2a03      	cmp	r2, #3
   2cc4a:	d12c      	bne.n	2cca6 <ll_conn_update+0x100>
			conn->llcp_conn_param.state = cmd;
   2cc4c:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1U;
   2cc50:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   2cc54:	f880 90ef 	strb.w	r9, [r0, #239]	; 0xef
			conn->llcp_conn_param.cmd = 1U;
   2cc58:	f880 30ee 	strb.w	r3, [r0, #238]	; 0xee
	return 0;
   2cc5c:	2400      	movs	r4, #0
   2cc5e:	e7e1      	b.n	2cc24 <ll_conn_update+0x7e>
			cmd++;
   2cc60:	2101      	movs	r1, #1
   2cc62:	e7e3      	b.n	2cc2c <ll_conn_update+0x86>
			if (conn->llcp_conn_param.req !=
   2cc64:	4293      	cmp	r3, r2
   2cc66:	d11e      	bne.n	2cca6 <ll_conn_update+0x100>
			conn->llcp_conn_param.state = cmd;
   2cc68:	f8b0 20ee 	ldrh.w	r2, [r0, #238]	; 0xee
			conn->llcp_conn_param.interval_min = interval_min;
   2cc6c:	f8a0 a0f0 	strh.w	sl, [r0, #240]	; 0xf0
			conn->llcp_conn_param.req++;
   2cc70:	3301      	adds	r3, #1
   2cc72:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2cc76:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
			conn->llcp_conn_param.interval_max = interval_max;
   2cc7a:	f8a0 70f2 	strh.w	r7, [r0, #242]	; 0xf2
			conn->llcp_conn_param.state = cmd;
   2cc7e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   2cc82:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2cc86:	2b00      	cmp	r3, #0
			conn->llcp_conn_param.latency = latency;
   2cc88:	f8a0 60f4 	strh.w	r6, [r0, #244]	; 0xf4
			conn->llcp_conn_param.timeout = timeout;
   2cc8c:	f8a0 50f6 	strh.w	r5, [r0, #246]	; 0xf6
			conn->llcp_conn_param.state = cmd;
   2cc90:	f8a0 20ee 	strh.w	r2, [r0, #238]	; 0xee
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2cc94:	dac6      	bge.n	2cc24 <ll_conn_update+0x7e>
				ull_slave_latency_cancel(conn, handle);
   2cc96:	4641      	mov	r1, r8
   2cc98:	f7f0 fb64 	bl	1d364 <ull_slave_latency_cancel>
   2cc9c:	e7c2      	b.n	2cc24 <ll_conn_update+0x7e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2cc9e:	2402      	movs	r4, #2
   2cca0:	e7c0      	b.n	2cc24 <ll_conn_update+0x7e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   2cca2:	241a      	movs	r4, #26
   2cca4:	e7be      	b.n	2cc24 <ll_conn_update+0x7e>
			return BT_HCI_ERR_CMD_DISALLOWED;
   2cca6:	240c      	movs	r4, #12
   2cca8:	e7bc      	b.n	2cc24 <ll_conn_update+0x7e>

0002ccaa <ll_chm_get>:
{
   2ccaa:	b538      	push	{r3, r4, r5, lr}
   2ccac:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   2ccae:	f7ff ff6f 	bl	2cb90 <ll_connected_get>
	if (!conn) {
   2ccb2:	4603      	mov	r3, r0
   2ccb4:	b168      	cbz	r0, 2ccd2 <ll_chm_get+0x28>
		conn->chm_updated = 0U;
   2ccb6:	2500      	movs	r5, #0
   2ccb8:	f100 0238 	add.w	r2, r0, #56	; 0x38
   2ccbc:	f883 5128 	strb.w	r5, [r3, #296]	; 0x128
   2ccc0:	6811      	ldr	r1, [r2, #0]
   2ccc2:	6021      	str	r1, [r4, #0]
   2ccc4:	7911      	ldrb	r1, [r2, #4]
   2ccc6:	7121      	strb	r1, [r4, #4]
	} while (conn->chm_updated);
   2ccc8:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   2cccc:	2800      	cmp	r0, #0
   2ccce:	d1f5      	bne.n	2ccbc <ll_chm_get+0x12>
}
   2ccd0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2ccd2:	2002      	movs	r0, #2
   2ccd4:	e7fc      	b.n	2ccd0 <ll_chm_get+0x26>

0002ccd6 <ll_terminate_ind_send>:
	switch (reason) {
   2ccd6:	2915      	cmp	r1, #21
{
   2ccd8:	b538      	push	{r3, r4, r5, lr}
   2ccda:	4605      	mov	r5, r0
   2ccdc:	460c      	mov	r4, r1
	switch (reason) {
   2ccde:	d817      	bhi.n	2cd10 <ll_terminate_ind_send+0x3a>
   2cce0:	2913      	cmp	r1, #19
   2cce2:	d201      	bcs.n	2cce8 <ll_terminate_ind_send+0x12>
   2cce4:	2905      	cmp	r1, #5
   2cce6:	d119      	bne.n	2cd1c <ll_terminate_ind_send+0x46>
	conn = ll_connected_get(handle);
   2cce8:	4628      	mov	r0, r5
   2ccea:	f7ff ff51 	bl	2cb90 <ll_connected_get>
	if (!conn) {
   2ccee:	b1b8      	cbz	r0, 2cd20 <ll_terminate_ind_send+0x4a>
	conn->llcp_terminate.req++;
   2ccf0:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2ccf4:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   2ccf8:	f880 40ca 	strb.w	r4, [r0, #202]	; 0xca
	conn->llcp_terminate.req++;
   2ccfc:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2ccfe:	2b00      	cmp	r3, #0
	conn->llcp_terminate.req++;
   2cd00:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2cd04:	da02      	bge.n	2cd0c <ll_terminate_ind_send+0x36>
		ull_slave_latency_cancel(conn, handle);
   2cd06:	4629      	mov	r1, r5
   2cd08:	f7f0 fb2c 	bl	1d364 <ull_slave_latency_cancel>
	return 0;
   2cd0c:	2000      	movs	r0, #0
   2cd0e:	e006      	b.n	2cd1e <ll_terminate_ind_send+0x48>
	switch (reason) {
   2cd10:	2929      	cmp	r1, #41	; 0x29
   2cd12:	d0e9      	beq.n	2cce8 <ll_terminate_ind_send+0x12>
   2cd14:	293b      	cmp	r1, #59	; 0x3b
   2cd16:	d0e7      	beq.n	2cce8 <ll_terminate_ind_send+0x12>
   2cd18:	291a      	cmp	r1, #26
   2cd1a:	e7e4      	b.n	2cce6 <ll_terminate_ind_send+0x10>
		return BT_HCI_ERR_INVALID_PARAM;
   2cd1c:	2012      	movs	r0, #18
}
   2cd1e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2cd20:	2002      	movs	r0, #2
   2cd22:	e7fc      	b.n	2cd1e <ll_terminate_ind_send+0x48>

0002cd24 <ll_feature_req_send>:
{
   2cd24:	b510      	push	{r4, lr}
   2cd26:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   2cd28:	f7ff ff32 	bl	2cb90 <ll_connected_get>
	if (!conn) {
   2cd2c:	b188      	cbz	r0, 2cd52 <ll_feature_req_send+0x2e>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   2cd2e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
   2cd32:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   2cd36:	428a      	cmp	r2, r1
   2cd38:	d10d      	bne.n	2cd56 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2cd3a:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   2cd3e:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2cd40:	2b00      	cmp	r3, #0
	conn->llcp_feature.req++;
   2cd42:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2cd46:	da02      	bge.n	2cd4e <ll_feature_req_send+0x2a>
		ull_slave_latency_cancel(conn, handle);
   2cd48:	4621      	mov	r1, r4
   2cd4a:	f7f0 fb0b 	bl	1d364 <ull_slave_latency_cancel>
	return 0;
   2cd4e:	2000      	movs	r0, #0
   2cd50:	e000      	b.n	2cd54 <ll_feature_req_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2cd52:	2002      	movs	r0, #2
}
   2cd54:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2cd56:	200c      	movs	r0, #12
   2cd58:	e7fc      	b.n	2cd54 <ll_feature_req_send+0x30>

0002cd5a <ll_version_ind_send>:
{
   2cd5a:	b510      	push	{r4, lr}
   2cd5c:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   2cd5e:	f7ff ff17 	bl	2cb90 <ll_connected_get>
	if (!conn) {
   2cd62:	b188      	cbz	r0, 2cd88 <ll_version_ind_send+0x2e>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   2cd64:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   2cd68:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   2cd6c:	428a      	cmp	r2, r1
   2cd6e:	d10d      	bne.n	2cd8c <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2cd70:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   2cd74:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2cd76:	2b00      	cmp	r3, #0
	conn->llcp_version.req++;
   2cd78:	f880 20c0 	strb.w	r2, [r0, #192]	; 0xc0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2cd7c:	da02      	bge.n	2cd84 <ll_version_ind_send+0x2a>
		ull_slave_latency_cancel(conn, handle);
   2cd7e:	4621      	mov	r1, r4
   2cd80:	f7f0 faf0 	bl	1d364 <ull_slave_latency_cancel>
	return 0;
   2cd84:	2000      	movs	r0, #0
   2cd86:	e000      	b.n	2cd8a <ll_version_ind_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2cd88:	2002      	movs	r0, #2
}
   2cd8a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2cd8c:	200c      	movs	r0, #12
   2cd8e:	e7fc      	b.n	2cd8a <ll_version_ind_send+0x30>

0002cd90 <ull_conn_init>:
	err = init_reset();
   2cd90:	f7ef b8b8 	b.w	1bf04 <init_reset>

0002cd94 <tx_demux>:
{
   2cd94:	b510      	push	{r4, lr}
   2cd96:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   2cd98:	2001      	movs	r0, #1
   2cd9a:	f7ef ffb9 	bl	1cd10 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   2cd9e:	4620      	mov	r0, r4
   2cda0:	2101      	movs	r1, #1
}
   2cda2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   2cda6:	f7f0 b947 	b.w	1d038 <ull_conn_tx_lll_enqueue>

0002cdaa <ull_conn_lll_max_tx_octets_get>:
}
   2cdaa:	201b      	movs	r0, #27
   2cdac:	4770      	bx	lr

0002cdae <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   2cdae:	b570      	push	{r4, r5, r6, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   2cdb0:	fb02 1101 	mla	r1, r2, r1, r1
   2cdb4:	7802      	ldrb	r2, [r0, #0]
{
   2cdb6:	f89d 5010 	ldrb.w	r5, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   2cdba:	440a      	add	r2, r1
   2cdbc:	2125      	movs	r1, #37	; 0x25
   2cdbe:	fbb2 f4f1 	udiv	r4, r2, r1
   2cdc2:	fb01 2414 	mls	r4, r1, r4, r2
   2cdc6:	b2e1      	uxtb	r1, r4
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   2cdc8:	08ca      	lsrs	r2, r1, #3
	*chan_use = chan_next;
   2cdca:	7001      	strb	r1, [r0, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   2cdcc:	5c9a      	ldrb	r2, [r3, r2]
   2cdce:	f004 0407 	and.w	r4, r4, #7
   2cdd2:	4122      	asrs	r2, r4
   2cdd4:	f012 0201 	ands.w	r2, r2, #1
   2cdd8:	d109      	bne.n	2cdee <lll_chan_sel_1+0x40>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   2cdda:	fbb1 f0f5 	udiv	r0, r1, r5
   2cdde:	fb05 1010 	mls	r0, r5, r0, r1
   2cde2:	b2c0      	uxtb	r0, r0
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   2cde4:	1e5d      	subs	r5, r3, #1
	chan_next = 0U;
   2cde6:	4611      	mov	r1, r2
   2cde8:	3304      	adds	r3, #4
	while (byte_count--) {
   2cdea:	42ab      	cmp	r3, r5
   2cdec:	d101      	bne.n	2cdf2 <lll_chan_sel_1+0x44>
}
   2cdee:	4608      	mov	r0, r1
   2cdf0:	bd70      	pop	{r4, r5, r6, pc}
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   2cdf2:	f101 0408 	add.w	r4, r1, #8
   2cdf6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   2cdfa:	b2e4      	uxtb	r4, r4
		bite = *chan_map;
   2cdfc:	460a      	mov	r2, r1
		while (bit_count--) {
   2cdfe:	42a2      	cmp	r2, r4
   2ce00:	4621      	mov	r1, r4
   2ce02:	d0f2      	beq.n	2cdea <lll_chan_sel_1+0x3c>
			if (bite & 0x01) {
   2ce04:	07f1      	lsls	r1, r6, #31
   2ce06:	d502      	bpl.n	2ce0e <lll_chan_sel_1+0x60>
				if (chan_index == 0U) {
   2ce08:	b128      	cbz	r0, 2ce16 <lll_chan_sel_1+0x68>
					break;
				}
				chan_index--;
   2ce0a:	3801      	subs	r0, #1
   2ce0c:	b2c0      	uxtb	r0, r0
			}
			chan_next++;
   2ce0e:	3201      	adds	r2, #1
   2ce10:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   2ce12:	0876      	lsrs	r6, r6, #1
   2ce14:	e7f3      	b.n	2cdfe <lll_chan_sel_1+0x50>
				if (chan_index == 0U) {
   2ce16:	4611      	mov	r1, r2
   2ce18:	e7e9      	b.n	2cdee <lll_chan_sel_1+0x40>

0002ce1a <ll_wl_size_get>:
}
   2ce1a:	2008      	movs	r0, #8
   2ce1c:	4770      	bx	lr

0002ce1e <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   2ce1e:	2000      	movs	r0, #0
   2ce20:	f7ec b836 	b.w	18e90 <mayfly_run>

0002ce24 <isr_race>:
	radio_status_reset();
   2ce24:	f7f2 ba70 	b.w	1f308 <radio_status_reset>

0002ce28 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   2ce28:	4668      	mov	r0, sp
   2ce2a:	f020 0107 	bic.w	r1, r0, #7
   2ce2e:	468d      	mov	sp, r1
   2ce30:	b501      	push	{r0, lr}
	isr_radio();
   2ce32:	f7f2 f979 	bl	1f128 <isr_radio>
	ISR_DIRECT_PM();
   2ce36:	f7da fe8b 	bl	7b50 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   2ce3a:	f7db f995 	bl	8168 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   2ce3e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2ce42:	4685      	mov	sp, r0
   2ce44:	4770      	bx	lr

0002ce46 <lll_rand_isr_get>:
   2ce46:	f7f0 bd3b 	b.w	1d8c0 <lll_csrand_isr_get>

0002ce4a <lll_reset>:
}
   2ce4a:	2000      	movs	r0, #0
   2ce4c:	4770      	bx	lr

0002ce4e <lll_prepare>:
{
   2ce4e:	b513      	push	{r0, r1, r4, lr}
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   2ce50:	2400      	movs	r4, #0
   2ce52:	9401      	str	r4, [sp, #4]
   2ce54:	9c04      	ldr	r4, [sp, #16]
   2ce56:	9400      	str	r4, [sp, #0]
   2ce58:	f7f0 fbe6 	bl	1d628 <prepare>
}
   2ce5c:	b002      	add	sp, #8
   2ce5e:	bd10      	pop	{r4, pc}

0002ce60 <lll_prepare_done>:
}
   2ce60:	2000      	movs	r0, #0
   2ce62:	4770      	bx	lr

0002ce64 <lll_is_abort_cb>:
}
   2ce64:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2ce68:	4770      	bx	lr

0002ce6a <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   2ce6a:	e9d0 2300 	ldrd	r2, r3, [r0]
   2ce6e:	2a00      	cmp	r2, #0
   2ce70:	da04      	bge.n	2ce7c <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   2ce72:	6880      	ldr	r0, [r0, #8]
   2ce74:	4298      	cmp	r0, r3
   2ce76:	bf38      	it	cc
   2ce78:	4618      	movcc	r0, r3
   2ce7a:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   2ce7c:	429a      	cmp	r2, r3
   2ce7e:	bf38      	it	cc
   2ce80:	461a      	movcc	r2, r3
   2ce82:	4610      	mov	r0, r2
}
   2ce84:	4770      	bx	lr

0002ce86 <lll_preempt_calc>:
{
   2ce86:	b510      	push	{r4, lr}
   2ce88:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   2ce8a:	f7ff fcd7 	bl	2c83c <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   2ce8e:	4621      	mov	r1, r4
   2ce90:	f7ff fcd6 	bl	2c840 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   2ce94:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   2ce96:	0203      	lsls	r3, r0, #8
   2ce98:	d404      	bmi.n	2cea4 <lll_preempt_calc+0x1e>
   2ce9a:	2809      	cmp	r0, #9
   2ce9c:	bf94      	ite	ls
   2ce9e:	2000      	movls	r0, #0
   2cea0:	2001      	movhi	r0, #1
}
   2cea2:	bd10      	pop	{r4, pc}
	return 0;
   2cea4:	2000      	movs	r0, #0
   2cea6:	e7fc      	b.n	2cea2 <lll_preempt_calc+0x1c>

0002cea8 <lll_radio_is_idle>:
	return radio_is_idle();
   2cea8:	f7f2 ba4e 	b.w	1f348 <radio_is_idle>

0002ceac <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   2ceac:	f000 ba57 	b.w	2d35e <radio_rx_ready_delay_get>

0002ceb0 <lll_isr_tx_status_reset>:
{
   2ceb0:	b508      	push	{r3, lr}
	radio_status_reset();
   2ceb2:	f7f2 fa29 	bl	1f308 <radio_status_reset>
}
   2ceb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   2ceba:	f7f2 baf1 	b.w	1f4a0 <radio_tmr_status_reset>

0002cebe <lll_isr_rx_status_reset>:
{
   2cebe:	b508      	push	{r3, lr}
	radio_status_reset();
   2cec0:	f7f2 fa22 	bl	1f308 <radio_status_reset>
	radio_tmr_status_reset();
   2cec4:	f7f2 faec 	bl	1f4a0 <radio_tmr_status_reset>
}
   2cec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   2cecc:	f7f2 ba98 	b.w	1f400 <radio_rssi_status_reset>

0002ced0 <lll_isr_status_reset>:
{
   2ced0:	b508      	push	{r3, lr}
	radio_status_reset();
   2ced2:	f7f2 fa19 	bl	1f308 <radio_status_reset>
	radio_tmr_status_reset();
   2ced6:	f7f2 fae3 	bl	1f4a0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   2ceda:	f7f2 fac9 	bl	1f470 <radio_filter_status_reset>
	radio_ar_status_reset();
   2cede:	f7f2 fbf5 	bl	1f6cc <radio_ar_status_reset>
}
   2cee2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   2cee6:	f7f2 ba8b 	b.w	1f400 <radio_rssi_status_reset>

0002ceea <lll_isr_abort>:
{
   2ceea:	b510      	push	{r4, lr}
   2ceec:	4604      	mov	r4, r0
	lll_isr_status_reset();
   2ceee:	f7ff ffef 	bl	2ced0 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   2cef2:	4620      	mov	r0, r4
}
   2cef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2cef8:	f7f0 bdcc 	b.w	1da94 <lll_isr_cleanup>

0002cefc <clock_ready>:
   2cefc:	f101 0010 	add.w	r0, r1, #16
   2cf00:	f7f8 b85c 	b.w	24fbc <z_impl_k_sem_give>

0002cf04 <lll_clock_ppm_local_get>:
}
   2cf04:	2014      	movs	r0, #20
   2cf06:	4770      	bx	lr

0002cf08 <isr_abort>:
{
   2cf08:	b510      	push	{r4, lr}
   2cf0a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   2cf0c:	f7ff ffe0 	bl	2ced0 <lll_isr_status_reset>
	radio_filter_disable();
   2cf10:	f7f2 faa4 	bl	1f45c <radio_filter_disable>
	lll_isr_cleanup(param);
   2cf14:	4620      	mov	r0, r4
}
   2cf16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2cf1a:	f7f0 bdbb 	b.w	1da94 <lll_isr_cleanup>

0002cf1e <lll_adv_reset>:
   2cf1e:	f7f0 bf09 	b.w	1dd34 <lll_adv_init>

0002cf22 <lll_adv_data_reset>:
	pdu->first = 0U;
   2cf22:	2300      	movs	r3, #0
   2cf24:	7003      	strb	r3, [r0, #0]
	pdu->last = 0U;
   2cf26:	7043      	strb	r3, [r0, #1]
	pdu->pdu[1] = NULL;
   2cf28:	6083      	str	r3, [r0, #8]
}
   2cf2a:	4618      	mov	r0, r3
   2cf2c:	4770      	bx	lr

0002cf2e <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   2cf2e:	68c3      	ldr	r3, [r0, #12]
{
   2cf30:	b570      	push	{r4, r5, r6, lr}
   2cf32:	4604      	mov	r4, r0
	evt = HDR_LLL2EVT(p->param);
   2cf34:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   2cf36:	f7ff fc81 	bl	2c83c <ticker_ticks_now_get>
   2cf3a:	4605      	mov	r5, r0
   2cf3c:	4630      	mov	r0, r6
   2cf3e:	f7ff ff94 	bl	2ce6a <lll_evt_offset_get>
	p->remainder = 0;
   2cf42:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   2cf44:	1a28      	subs	r0, r5, r0
   2cf46:	6020      	str	r0, [r4, #0]
	p->remainder = 0;
   2cf48:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   2cf4a:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   2cf4c:	4620      	mov	r0, r4
}
   2cf4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   2cf52:	f7f1 b83b 	b.w	1dfcc <prepare_cb>

0002cf56 <isr_done>:
{
   2cf56:	b510      	push	{r4, lr}
   2cf58:	4604      	mov	r4, r0
	lll_isr_status_reset();
   2cf5a:	f7ff ffb9 	bl	2ced0 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   2cf5e:	7b23      	ldrb	r3, [r4, #12]
   2cf60:	f003 0271 	and.w	r2, r3, #113	; 0x71
   2cf64:	2a01      	cmp	r2, #1
		lll->chan_map_curr = lll->chan_map;
   2cf66:	bf02      	ittt	eq
   2cf68:	f3c3 0242 	ubfxeq	r2, r3, #1, #3
   2cf6c:	f362 1306 	bfieq	r3, r2, #4, #3
   2cf70:	7323      	strbeq	r3, [r4, #12]
	if (lll->chan_map_curr) {
   2cf72:	7b23      	ldrb	r3, [r4, #12]
   2cf74:	f013 0f70 	tst.w	r3, #112	; 0x70
   2cf78:	d008      	beq.n	2cf8c <isr_done+0x36>
		pdu = chan_prepare(lll);
   2cf7a:	4620      	mov	r0, r4
   2cf7c:	f7f0 ffcc 	bl	1df18 <chan_prepare>
		radio_tx_enable();
   2cf80:	f7f2 f9aa 	bl	1f2d8 <radio_tx_enable>
}
   2cf84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   2cf88:	f7f2 bb86 	b.w	1f698 <radio_tmr_end_capture>
	radio_filter_disable();
   2cf8c:	f7f2 fa66 	bl	1f45c <radio_filter_disable>
	lll_isr_cleanup(param);
   2cf90:	4620      	mov	r0, r4
}
   2cf92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2cf96:	f7f0 bd7d 	b.w	1da94 <lll_isr_cleanup>

0002cf9a <lll_adv_scan_req_check>:
{
   2cf9a:	b510      	push	{r4, lr}
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   2cf9c:	7b40      	ldrb	r0, [r0, #13]
{
   2cf9e:	f89d 4008 	ldrb.w	r4, [sp, #8]
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   2cfa2:	07c0      	lsls	r0, r0, #31
   2cfa4:	d500      	bpl.n	2cfa8 <lll_adv_scan_req_check+0xe>
   2cfa6:	b174      	cbz	r4, 2cfc6 <lll_adv_scan_req_check+0x2c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   2cfa8:	7808      	ldrb	r0, [r1, #0]
   2cfaa:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
   2cfae:	d108      	bne.n	2cfc2 <lll_adv_scan_req_check+0x28>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   2cfb0:	2206      	movs	r2, #6
   2cfb2:	3108      	adds	r1, #8
   2cfb4:	4618      	mov	r0, r3
   2cfb6:	f001 f96a 	bl	2e28e <memcmp>
	return (tx_addr == sr->rx_addr) &&
   2cfba:	fab0 f080 	clz	r0, r0
   2cfbe:	0940      	lsrs	r0, r0, #5
}
   2cfc0:	bd10      	pop	{r4, pc}
	return (tx_addr == sr->rx_addr) &&
   2cfc2:	2000      	movs	r0, #0
   2cfc4:	e7fc      	b.n	2cfc0 <lll_adv_scan_req_check+0x26>
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   2cfc6:	4620      	mov	r0, r4
   2cfc8:	e7fa      	b.n	2cfc0 <lll_adv_scan_req_check+0x26>

0002cfca <lll_adv_connect_ind_check>:
{
   2cfca:	b538      	push	{r3, r4, r5, lr}
   2cfcc:	9d05      	ldr	r5, [sp, #20]
   2cfce:	460c      	mov	r4, r1
   2cfd0:	f89d 1018 	ldrb.w	r1, [sp, #24]
	if (tgt_addr) {
   2cfd4:	b1fd      	cbz	r5, 2d016 <lll_adv_connect_ind_check+0x4c>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   2cfd6:	7821      	ldrb	r1, [r4, #0]
   2cfd8:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   2cfdc:	d003      	beq.n	2cfe6 <lll_adv_connect_ind_check+0x1c>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   2cfde:	2000      	movs	r0, #0
   2cfe0:	f000 0001 	and.w	r0, r0, #1
}
   2cfe4:	bd38      	pop	{r3, r4, r5, pc}
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   2cfe6:	2206      	movs	r2, #6
   2cfe8:	f104 0108 	add.w	r1, r4, #8
   2cfec:	4618      	mov	r0, r3
   2cfee:	f001 f94e 	bl	2e28e <memcmp>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   2cff2:	2800      	cmp	r0, #0
   2cff4:	d1f3      	bne.n	2cfde <lll_adv_connect_ind_check+0x14>
	return (rx_addr == ci->tx_addr) &&
   2cff6:	7823      	ldrb	r3, [r4, #0]
   2cff8:	f89d 2010 	ldrb.w	r2, [sp, #16]
   2cffc:	f3c3 1380 	ubfx	r3, r3, #6, #1
   2d000:	4293      	cmp	r3, r2
   2d002:	d1ed      	bne.n	2cfe0 <lll_adv_connect_ind_check+0x16>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   2d004:	2206      	movs	r2, #6
   2d006:	1ca1      	adds	r1, r4, #2
   2d008:	4628      	mov	r0, r5
   2d00a:	f001 f940 	bl	2e28e <memcmp>
	return (rx_addr == ci->tx_addr) &&
   2d00e:	fab0 f080 	clz	r0, r0
   2d012:	0940      	lsrs	r0, r0, #5
   2d014:	e7e4      	b.n	2cfe0 <lll_adv_connect_ind_check+0x16>
	return (((lll->filter_policy & 0x02) == 0) ||
   2d016:	7b40      	ldrb	r0, [r0, #13]
		(devmatch_ok)) &&
   2d018:	0780      	lsls	r0, r0, #30
   2d01a:	d500      	bpl.n	2d01e <lll_adv_connect_ind_check+0x54>
	return (((lll->filter_policy & 0x02) == 0) ||
   2d01c:	b179      	cbz	r1, 2d03e <lll_adv_connect_ind_check+0x74>
	return (tx_addr == ci->rx_addr) &&
   2d01e:	7821      	ldrb	r1, [r4, #0]
   2d020:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   2d024:	d109      	bne.n	2d03a <lll_adv_connect_ind_check+0x70>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   2d026:	2206      	movs	r2, #6
   2d028:	f104 0108 	add.w	r1, r4, #8
   2d02c:	4618      	mov	r0, r3
   2d02e:	f001 f92e 	bl	2e28e <memcmp>
	return (tx_addr == ci->rx_addr) &&
   2d032:	fab0 f080 	clz	r0, r0
   2d036:	0940      	lsrs	r0, r0, #5
   2d038:	e7d4      	b.n	2cfe4 <lll_adv_connect_ind_check+0x1a>
   2d03a:	2000      	movs	r0, #0
   2d03c:	e7d2      	b.n	2cfe4 <lll_adv_connect_ind_check+0x1a>
		(devmatch_ok)) &&
   2d03e:	4608      	mov	r0, r1
   2d040:	e7d0      	b.n	2cfe4 <lll_adv_connect_ind_check+0x1a>

0002d042 <isr_done_cleanup>:
{
   2d042:	b538      	push	{r3, r4, r5, lr}
   2d044:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   2d046:	f7f0 fcef 	bl	1da28 <lll_is_done>
   2d04a:	4605      	mov	r5, r0
   2d04c:	b998      	cbnz	r0, 2d076 <isr_done_cleanup+0x34>
	radio_filter_disable();
   2d04e:	f7f2 fa05 	bl	1f45c <radio_filter_disable>
	if (++lll->chan == 3U) {
   2d052:	7a23      	ldrb	r3, [r4, #8]
   2d054:	f3c3 0241 	ubfx	r2, r3, #1, #2
   2d058:	3201      	adds	r2, #1
   2d05a:	f002 0203 	and.w	r2, r2, #3
   2d05e:	2a03      	cmp	r2, #3
   2d060:	bf14      	ite	ne
   2d062:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   2d066:	f365 0342 	bfieq	r3, r5, #1, #2
   2d06a:	7223      	strb	r3, [r4, #8]
	lll_isr_cleanup(param);
   2d06c:	4620      	mov	r0, r4
}
   2d06e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   2d072:	f7f0 bd0f 	b.w	1da94 <lll_isr_cleanup>
}
   2d076:	bd38      	pop	{r3, r4, r5, pc}

0002d078 <isr_done>:
{
   2d078:	b508      	push	{r3, lr}
	isr_common_done(param);
   2d07a:	f7f1 fa29 	bl	1e4d0 <isr_common_done>
	radio_rx_enable();
   2d07e:	f7f2 f925 	bl	1f2cc <radio_rx_enable>
}
   2d082:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   2d086:	f7f2 bb07 	b.w	1f698 <radio_tmr_end_capture>

0002d08a <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   2d08a:	68c3      	ldr	r3, [r0, #12]
{
   2d08c:	b570      	push	{r4, r5, r6, lr}
   2d08e:	4604      	mov	r4, r0
	evt = HDR_LLL2EVT(p->param);
   2d090:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   2d092:	f7ff fbd3 	bl	2c83c <ticker_ticks_now_get>
   2d096:	4605      	mov	r5, r0
   2d098:	4630      	mov	r0, r6
   2d09a:	f7ff fee6 	bl	2ce6a <lll_evt_offset_get>
	p->remainder = 0;
   2d09e:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   2d0a0:	1a28      	subs	r0, r5, r0
   2d0a2:	6020      	str	r0, [r4, #0]
	p->remainder = 0;
   2d0a4:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   2d0a6:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   2d0a8:	4620      	mov	r0, r4
}
   2d0aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   2d0ae:	f7f1 b93b 	b.w	1e328 <prepare_cb>

0002d0b2 <isr_window>:
{
   2d0b2:	b510      	push	{r4, lr}
   2d0b4:	4604      	mov	r4, r0
	isr_common_done(param);
   2d0b6:	f7f1 fa0b 	bl	1e4d0 <isr_common_done>
	if (++lll->chan == 3U) {
   2d0ba:	7a23      	ldrb	r3, [r4, #8]
   2d0bc:	f3c3 0241 	ubfx	r2, r3, #1, #2
   2d0c0:	3201      	adds	r2, #1
   2d0c2:	f002 0203 	and.w	r2, r2, #3
   2d0c6:	2a03      	cmp	r2, #3
   2d0c8:	bf14      	ite	ne
   2d0ca:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   2d0ce:	f36f 0342 	bfceq	r3, #1, #2
   2d0d2:	7223      	strb	r3, [r4, #8]
	lll_chan_set(37 + lll->chan);
   2d0d4:	7a20      	ldrb	r0, [r4, #8]
   2d0d6:	f3c0 0041 	ubfx	r0, r0, #1, #2
   2d0da:	3025      	adds	r0, #37	; 0x25
   2d0dc:	f7f0 fcac 	bl	1da38 <lll_chan_set>
	ticks_at_start = ticker_ticks_now_get() +
   2d0e0:	f7ff fbac 	bl	2c83c <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   2d0e4:	1cc1      	adds	r1, r0, #3
   2d0e6:	2000      	movs	r0, #0
   2d0e8:	f7f2 fa66 	bl	1f5b8 <radio_tmr_start_tick>
}
   2d0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   2d0f0:	f7f2 bad2 	b.w	1f698 <radio_tmr_end_capture>

0002d0f4 <isr_rx_scan_report.isra.5>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   2d0f4:	b570      	push	{r4, r5, r6, lr}
   2d0f6:	4606      	mov	r6, r0
				uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   2d0f8:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   2d0fa:	460d      	mov	r5, r1
	node_rx = ull_pdu_rx_alloc_peek(3);
   2d0fc:	f7ee f942 	bl	1b384 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   2d100:	4604      	mov	r4, r0
   2d102:	b1b0      	cbz	r0, 2d132 <isr_rx_scan_report.isra.5+0x3e>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   2d104:	f7ee f956 	bl	1b3b4 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   2d108:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2d10c:	80e3      	strh	r3, [r4, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   2d10e:	2304      	movs	r3, #4
   2d110:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   2d112:	b166      	cbz	r6, 2d12e <isr_rx_scan_report.isra.5+0x3a>
   2d114:	f7f2 f96e 	bl	1f3f4 <radio_rssi_get>
   2d118:	b2c0      	uxtb	r0, r0
   2d11a:	7620      	strb	r0, [r4, #24]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   2d11c:	4621      	mov	r1, r4
   2d11e:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   2d120:	7665      	strb	r5, [r4, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   2d122:	f7ee f95d 	bl	1b3e0 <ull_rx_put>
	ull_rx_sched();
   2d126:	f7ee f96b 	bl	1b400 <ull_rx_sched>

	return 0;
   2d12a:	2000      	movs	r0, #0
}
   2d12c:	bd70      	pop	{r4, r5, r6, pc}
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   2d12e:	207f      	movs	r0, #127	; 0x7f
   2d130:	e7f3      	b.n	2d11a <isr_rx_scan_report.isra.5+0x26>
		return -ENOBUFS;
   2d132:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d136:	e7f9      	b.n	2d12c <isr_rx_scan_report.isra.5+0x38>

0002d138 <isr_abort>:
{
   2d138:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d13a:	4605      	mov	r5, r0
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   2d13c:	2400      	movs	r4, #0
	lll_isr_status_reset();
   2d13e:	f7ff fec7 	bl	2ced0 <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   2d142:	4623      	mov	r3, r4
   2d144:	2203      	movs	r2, #3
   2d146:	4621      	mov	r1, r4
   2d148:	9400      	str	r4, [sp, #0]
   2d14a:	4620      	mov	r0, r4
   2d14c:	f7ec fc26 	bl	1999c <ticker_stop>
	radio_disable();
   2d150:	f7f2 f8c8 	bl	1f2e4 <radio_disable>
	radio_filter_disable();
   2d154:	f7f2 f982 	bl	1f45c <radio_filter_disable>
	if (++lll->chan == 3U) {
   2d158:	7a2b      	ldrb	r3, [r5, #8]
   2d15a:	f3c3 0241 	ubfx	r2, r3, #1, #2
   2d15e:	3201      	adds	r2, #1
   2d160:	f002 0203 	and.w	r2, r2, #3
   2d164:	2a03      	cmp	r2, #3
   2d166:	bf14      	ite	ne
   2d168:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   2d16c:	f364 0342 	bfieq	r3, r4, #1, #2
	lll_isr_cleanup(param);
   2d170:	4628      	mov	r0, r5
		lll->chan = 0U;
   2d172:	722b      	strb	r3, [r5, #8]
}
   2d174:	b003      	add	sp, #12
   2d176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	lll_isr_cleanup(param);
   2d17a:	f7f0 bc8b 	b.w	1da94 <lll_isr_cleanup>

0002d17e <lll_scan_init>:
}
   2d17e:	2000      	movs	r0, #0
   2d180:	4770      	bx	lr

0002d182 <lll_scan_reset>:
   2d182:	2000      	movs	r0, #0
   2d184:	4770      	bx	lr

0002d186 <lll_conn_init>:
{
   2d186:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   2d188:	f7f2 f8fe 	bl	1f388 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   2d18c:	7803      	ldrb	r3, [r0, #0]
   2d18e:	2201      	movs	r2, #1
   2d190:	f362 0301 	bfi	r3, r2, #0, #2
   2d194:	7003      	strb	r3, [r0, #0]
}
   2d196:	2000      	movs	r0, #0
   2d198:	bd08      	pop	{r3, pc}

0002d19a <lll_conn_reset>:
}
   2d19a:	2000      	movs	r0, #0
   2d19c:	4770      	bx	lr

0002d19e <lll_conn_flush>:
}
   2d19e:	4770      	bx	lr

0002d1a0 <lll_conn_tx_pkt_set>:
{
   2d1a0:	b510      	push	{r4, lr}
   2d1a2:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
   2d1a4:	2100      	movs	r1, #0
   2d1a6:	4608      	mov	r0, r1
   2d1a8:	f7f2 f812 	bl	1f1d0 <radio_phy_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   2d1ac:	2008      	movs	r0, #8
   2d1ae:	2201      	movs	r2, #1
   2d1b0:	211b      	movs	r1, #27
   2d1b2:	f7f2 f853 	bl	1f25c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   2d1b6:	4620      	mov	r0, r4
}
   2d1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_tx_set(pdu_data_tx);
   2d1bc:	f7f2 b880 	b.w	1f2c0 <radio_pkt_tx_set>

0002d1c0 <lll_conn_pdu_tx_prep>:
{
   2d1c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2d1c4:	4606      	mov	r6, r0
   2d1c6:	4688      	mov	r8, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   2d1c8:	aa01      	add	r2, sp, #4
   2d1ca:	e9d0 0110 	ldrd	r0, r1, [r0, #64]	; 0x40
   2d1ce:	f7ff f8b6 	bl	2c33e <memq_peek>
	if (lll->empty || !link) {
   2d1d2:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
   2d1d6:	075b      	lsls	r3, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   2d1d8:	4681      	mov	r9, r0
	if (lll->empty || !link) {
   2d1da:	d400      	bmi.n	2d1de <lll_conn_pdu_tx_prep+0x1e>
   2d1dc:	b9b8      	cbnz	r0, 2d20e <lll_conn_pdu_tx_prep+0x4e>
		lll->empty = 1U;
   2d1de:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
   2d1e2:	f043 0304 	orr.w	r3, r3, #4
   2d1e6:	f886 3056 	strb.w	r3, [r6, #86]	; 0x56
		p = (void *)radio_pkt_empty_get();
   2d1ea:	f7f2 f8cd 	bl	1f388 <radio_pkt_empty_get>
   2d1ee:	4607      	mov	r7, r0
		if (link || FORCE_MD_CNT_GET()) {
   2d1f0:	7803      	ldrb	r3, [r0, #0]
   2d1f2:	f1b9 0f00 	cmp.w	r9, #0
   2d1f6:	d007      	beq.n	2d208 <lll_conn_pdu_tx_prep+0x48>
			p->md = 1U;
   2d1f8:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   2d1fc:	703b      	strb	r3, [r7, #0]
	*pdu_data_tx = p;
   2d1fe:	f8c8 7000 	str.w	r7, [r8]
}
   2d202:	b003      	add	sp, #12
   2d204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			p->md = 0U;
   2d208:	f369 1304 	bfi	r3, r9, #4, #1
   2d20c:	e7f6      	b.n	2d1fc <lll_conn_pdu_tx_prep+0x3c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   2d20e:	9d01      	ldr	r5, [sp, #4]
   2d210:	f896 4055 	ldrb.w	r4, [r6, #85]	; 0x55
		if (!lll->packet_tx_head_len) {
   2d214:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   2d218:	3504      	adds	r5, #4
   2d21a:	192f      	adds	r7, r5, r4
		if (!lll->packet_tx_head_len) {
   2d21c:	b913      	cbnz	r3, 2d224 <lll_conn_pdu_tx_prep+0x64>
			lll->packet_tx_head_len = p->len;
   2d21e:	787b      	ldrb	r3, [r7, #1]
   2d220:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
		if (lll->packet_tx_head_offset) {
   2d224:	b124      	cbz	r4, 2d230 <lll_conn_pdu_tx_prep+0x70>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   2d226:	5d2b      	ldrb	r3, [r5, r4]
   2d228:	2201      	movs	r2, #1
   2d22a:	f362 0301 	bfi	r3, r2, #0, #2
   2d22e:	552b      	strb	r3, [r5, r4]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   2d230:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
   2d234:	1b1b      	subs	r3, r3, r4
   2d236:	707b      	strb	r3, [r7, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   2d238:	4630      	mov	r0, r6
   2d23a:	f7ff fdb6 	bl	2cdaa <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   2d23e:	787b      	ldrb	r3, [r7, #1]
   2d240:	4283      	cmp	r3, r0
   2d242:	d90b      	bls.n	2d25c <lll_conn_pdu_tx_prep+0x9c>
			p->len = max_tx_octets;
   2d244:	7078      	strb	r0, [r7, #1]
			p->md = 1U;
   2d246:	5d2b      	ldrb	r3, [r5, r4]
			p->md = 1U;
   2d248:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   2d24c:	552b      	strb	r3, [r5, r4]
		p->rfu = 0U;
   2d24e:	5d2b      	ldrb	r3, [r5, r4]
   2d250:	f36f 1347 	bfc	r3, #5, #3
   2d254:	552b      	strb	r3, [r5, r4]
		p->resv = 0U;
   2d256:	2300      	movs	r3, #0
   2d258:	70bb      	strb	r3, [r7, #2]
   2d25a:	e7d0      	b.n	2d1fe <lll_conn_pdu_tx_prep+0x3e>
		} else if ((link->next != lll->memq_tx.tail) ||
   2d25c:	6c73      	ldr	r3, [r6, #68]	; 0x44
   2d25e:	f8d9 2000 	ldr.w	r2, [r9]
   2d262:	429a      	cmp	r2, r3
   2d264:	5d2b      	ldrb	r3, [r5, r4]
   2d266:	d1ef      	bne.n	2d248 <lll_conn_pdu_tx_prep+0x88>
			p->md = 0U;
   2d268:	f36f 1304 	bfc	r3, #4, #1
   2d26c:	e7ee      	b.n	2d24c <lll_conn_pdu_tx_prep+0x8c>

0002d26e <ecb_encrypt_be>:

void ecb_encrypt_be(uint8_t const *const key_be, uint8_t const *const clear_text_be,
		    uint8_t * const cipher_text_be)
{
   2d26e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d270:	b08d      	sub	sp, #52	; 0x34
   2d272:	4614      	mov	r4, r2
   2d274:	460b      	mov	r3, r1
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   2d276:	4602      	mov	r2, r0
   2d278:	466e      	mov	r6, sp
   2d27a:	f100 0710 	add.w	r7, r0, #16
   2d27e:	6810      	ldr	r0, [r2, #0]
   2d280:	6851      	ldr	r1, [r2, #4]
   2d282:	4635      	mov	r5, r6
   2d284:	c503      	stmia	r5!, {r0, r1}
   2d286:	3208      	adds	r2, #8
   2d288:	42ba      	cmp	r2, r7
   2d28a:	462e      	mov	r6, r5
   2d28c:	d1f7      	bne.n	2d27e <ecb_encrypt_be+0x10>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   2d28e:	ad04      	add	r5, sp, #16
   2d290:	f103 0610 	add.w	r6, r3, #16
   2d294:	6818      	ldr	r0, [r3, #0]
   2d296:	6859      	ldr	r1, [r3, #4]
   2d298:	462a      	mov	r2, r5
   2d29a:	c203      	stmia	r2!, {r0, r1}
   2d29c:	3308      	adds	r3, #8
   2d29e:	42b3      	cmp	r3, r6
   2d2a0:	4615      	mov	r5, r2
   2d2a2:	d1f7      	bne.n	2d294 <ecb_encrypt_be+0x26>

	do_ecb(&ecb);
   2d2a4:	4668      	mov	r0, sp
   2d2a6:	f7f1 fe99 	bl	1efdc <do_ecb>
   2d2aa:	ad08      	add	r5, sp, #32
   2d2ac:	4622      	mov	r2, r4
   2d2ae:	ac0c      	add	r4, sp, #48	; 0x30
   2d2b0:	462b      	mov	r3, r5
   2d2b2:	cb03      	ldmia	r3!, {r0, r1}
   2d2b4:	42a3      	cmp	r3, r4
   2d2b6:	6010      	str	r0, [r2, #0]
   2d2b8:	6051      	str	r1, [r2, #4]
   2d2ba:	461d      	mov	r5, r3
   2d2bc:	f102 0208 	add.w	r2, r2, #8
   2d2c0:	d1f6      	bne.n	2d2b0 <ecb_encrypt_be+0x42>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}
   2d2c2:	b00d      	add	sp, #52	; 0x34
   2d2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d2c6 <ecb_encrypt>:

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   2d2c6:	b570      	push	{r4, r5, r6, lr}
   2d2c8:	b08c      	sub	sp, #48	; 0x30
   2d2ca:	460e      	mov	r6, r1
   2d2cc:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   2d2ce:	4601      	mov	r1, r0
   2d2d0:	2210      	movs	r2, #16
   2d2d2:	4668      	mov	r0, sp
{
   2d2d4:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   2d2d6:	f7ff f803 	bl	2c2e0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   2d2da:	2210      	movs	r2, #16
   2d2dc:	eb0d 0002 	add.w	r0, sp, r2
   2d2e0:	4631      	mov	r1, r6
   2d2e2:	f7fe fffd 	bl	2c2e0 <mem_rcopy>

	do_ecb(&ecb);
   2d2e6:	4668      	mov	r0, sp
   2d2e8:	f7f1 fe78 	bl	1efdc <do_ecb>

	if (cipher_text_le) {
   2d2ec:	b125      	cbz	r5, 2d2f8 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   2d2ee:	2210      	movs	r2, #16
   2d2f0:	a908      	add	r1, sp, #32
   2d2f2:	4628      	mov	r0, r5
   2d2f4:	f7fe fff4 	bl	2c2e0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   2d2f8:	b15c      	cbz	r4, 2d312 <ecb_encrypt+0x4c>
   2d2fa:	4623      	mov	r3, r4
   2d2fc:	ad08      	add	r5, sp, #32
   2d2fe:	ac0c      	add	r4, sp, #48	; 0x30
   2d300:	462a      	mov	r2, r5
   2d302:	ca03      	ldmia	r2!, {r0, r1}
   2d304:	42a2      	cmp	r2, r4
   2d306:	6018      	str	r0, [r3, #0]
   2d308:	6059      	str	r1, [r3, #4]
   2d30a:	4615      	mov	r5, r2
   2d30c:	f103 0308 	add.w	r3, r3, #8
   2d310:	d1f6      	bne.n	2d300 <ecb_encrypt+0x3a>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
			 sizeof(ecb.cipher_text));
	}
}
   2d312:	b00c      	add	sp, #48	; 0x30
   2d314:	bd70      	pop	{r4, r5, r6, pc}

0002d316 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   2d316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2d31a:	f04f 32ff 	mov.w	r2, #4294967295
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   2d31e:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   2d320:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   2d324:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   2d328:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   2d32c:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   2d330:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   2d334:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   2d338:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   2d33c:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   2d340:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   2d344:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   2d348:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   2d34c:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   2d350:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   2d354:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   2d358:	4770      	bx	lr

0002d35a <radio_tx_chain_delay_get>:
}
   2d35a:	2001      	movs	r0, #1
   2d35c:	4770      	bx	lr

0002d35e <radio_rx_ready_delay_get>:
}
   2d35e:	2029      	movs	r0, #41	; 0x29
   2d360:	4770      	bx	lr

0002d362 <radio_rx_chain_delay_get>:
	switch (phy) {
   2d362:	2802      	cmp	r0, #2
}
   2d364:	bf14      	ite	ne
   2d366:	200a      	movne	r0, #10
   2d368:	2005      	moveq	r0, #5
   2d36a:	4770      	bx	lr

0002d36c <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   2d36c:	4288      	cmp	r0, r1
   2d36e:	d00c      	beq.n	2d38a <mayfly_prio_is_equal+0x1e>
	return (caller_id == callee_id) ||
   2d370:	b978      	cbnz	r0, 2d392 <mayfly_prio_is_equal+0x26>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   2d372:	1e48      	subs	r0, r1, #1
   2d374:	2801      	cmp	r0, #1
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   2d376:	bf8c      	ite	hi
   2d378:	2000      	movhi	r0, #0
   2d37a:	2001      	movls	r0, #1
   2d37c:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   2d37e:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   2d382:	bf0c      	ite	eq
   2d384:	2001      	moveq	r0, #1
   2d386:	2000      	movne	r0, #0
   2d388:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   2d38a:	2001      	movs	r0, #1
   2d38c:	4770      	bx	lr
   2d38e:	2000      	movs	r0, #0
}
   2d390:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   2d392:	2801      	cmp	r0, #1
   2d394:	d0f3      	beq.n	2d37e <mayfly_prio_is_equal+0x12>
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   2d396:	2802      	cmp	r0, #2
   2d398:	d1f9      	bne.n	2d38e <mayfly_prio_is_equal+0x22>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   2d39a:	2901      	cmp	r1, #1
   2d39c:	e7eb      	b.n	2d376 <mayfly_prio_is_equal+0xa>

0002d39e <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
	cntr_cmp_set(0, value);
   2d39e:	4601      	mov	r1, r0
   2d3a0:	2000      	movs	r0, #0
   2d3a2:	f7f1 be13 	b.w	1efcc <cntr_cmp_set>

0002d3a6 <sys_put_le32>:
	dst[1] = val >> 8;
   2d3a6:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2d3aa:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   2d3ac:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   2d3ae:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   2d3b0:	0a00      	lsrs	r0, r0, #8
   2d3b2:	704b      	strb	r3, [r1, #1]
   2d3b4:	70c8      	strb	r0, [r1, #3]
}
   2d3b6:	4770      	bx	lr

0002d3b8 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2d3b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   2d3bc:	b510      	push	{r4, lr}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2d3be:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   2d3c2:	3201      	adds	r2, #1
{
   2d3c4:	4604      	mov	r4, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2d3c6:	d106      	bne.n	2d3d6 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   2d3c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2d3cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   2d3d0:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2d3d2:	4293      	cmp	r3, r2
   2d3d4:	d044      	beq.n	2d460 <hci_vendor_read_static_addr+0xa8>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   2d3d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2d3da:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   2d3de:	f010 0001 	ands.w	r0, r0, #1
   2d3e2:	d036      	beq.n	2d452 <hci_vendor_read_static_addr+0x9a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   2d3e4:	4621      	mov	r1, r4
   2d3e6:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
   2d3ea:	f7ff ffdc 	bl	2d3a6 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   2d3ee:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   2d3f2:	7123      	strb	r3, [r4, #4]
	dst[1] = val >> 8;
   2d3f4:	f3c3 2307 	ubfx	r3, r3, #8, #8

		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   2d3f8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2d3fc:	7163      	strb	r3, [r4, #5]

		/* If no public address is provided and a static address is
		 * available, then it is recommended to return an identity root
		 * key (if available) from this command.
		 */
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   2d3fe:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   2d402:	3101      	adds	r1, #1
   2d404:	f104 0306 	add.w	r3, r4, #6
   2d408:	d024      	beq.n	2d454 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   2d40a:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   2d40e:	3101      	adds	r1, #1
   2d410:	d020      	beq.n	2d454 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   2d412:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   2d416:	3101      	adds	r1, #1
   2d418:	d01c      	beq.n	2d454 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   2d41a:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   2d41e:	3101      	adds	r1, #1
   2d420:	d018      	beq.n	2d454 <hci_vendor_read_static_addr+0x9c>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   2d422:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   2d426:	4619      	mov	r1, r3
   2d428:	f7ff ffbd 	bl	2d3a6 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   2d42c:	f104 010a 	add.w	r1, r4, #10
   2d430:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   2d434:	f7ff ffb7 	bl	2d3a6 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   2d438:	f104 010e 	add.w	r1, r4, #14
   2d43c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   2d440:	f7ff ffb1 	bl	2d3a6 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   2d444:	f104 0112 	add.w	r1, r4, #18
   2d448:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   2d44c:	f7ff ffab 	bl	2d3a6 <sys_put_le32>
		} else {
			/* Mark IR as invalid */
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
		}

		return 1;
   2d450:	2001      	movs	r0, #1
	}

	return 0;
}
   2d452:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memset, void *, int)
   2d454:	2210      	movs	r2, #16
   2d456:	2100      	movs	r1, #0
   2d458:	4618      	mov	r0, r3
   2d45a:	f000 ff61 	bl	2e320 <memset>
   2d45e:	e7f7      	b.n	2d450 <hci_vendor_read_static_addr+0x98>
	return 0;
   2d460:	2000      	movs	r0, #0
   2d462:	e7f6      	b.n	2d452 <hci_vendor_read_static_addr+0x9a>

0002d464 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   2d464:	b510      	push	{r4, lr}
   2d466:	2210      	movs	r2, #16
   2d468:	460c      	mov	r4, r1
   2d46a:	2100      	movs	r1, #0
   2d46c:	f000 ff58 	bl	2e320 <memset>
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   2d470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2d474:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   2d478:	3301      	adds	r3, #1
   2d47a:	d023      	beq.n	2d4c4 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   2d47c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   2d480:	3301      	adds	r3, #1
   2d482:	d01f      	beq.n	2d4c4 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   2d484:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   2d488:	3301      	adds	r3, #1
   2d48a:	d01b      	beq.n	2d4c4 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   2d48c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   2d490:	3301      	adds	r3, #1
   2d492:	d017      	beq.n	2d4c4 <hci_vendor_read_key_hierarchy_roots+0x60>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   2d494:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   2d498:	4621      	mov	r1, r4
   2d49a:	f7ff ff84 	bl	2d3a6 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   2d49e:	1d21      	adds	r1, r4, #4
   2d4a0:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   2d4a4:	f7ff ff7f 	bl	2d3a6 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   2d4a8:	f104 0108 	add.w	r1, r4, #8
   2d4ac:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   2d4b0:	f7ff ff79 	bl	2d3a6 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   2d4b4:	f104 010c 	add.w	r1, r4, #12
   2d4b8:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   2d4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   2d4c0:	f7ff bf71 	b.w	2d3a6 <sys_put_le32>
   2d4c4:	4620      	mov	r0, r4
   2d4c6:	2210      	movs	r2, #16
   2d4c8:	2100      	movs	r1, #0
}
   2d4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d4ce:	f000 bf27 	b.w	2e320 <memset>

0002d4d2 <fixed_data_unref>:
}
   2d4d2:	4770      	bx	lr

0002d4d4 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2d4d4:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2d4d6:	6849      	ldr	r1, [r1, #4]
   2d4d8:	6809      	ldr	r1, [r1, #0]
   2d4da:	f7f2 ba4f 	b.w	1f97c <net_buf_alloc_len>

0002d4de <net_buf_simple_init_with_data>:
	buf->size  = size;
   2d4de:	b292      	uxth	r2, r2
	buf->__buf = data;
   2d4e0:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2d4e2:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2d4e4:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2d4e6:	8082      	strh	r2, [r0, #4]
}
   2d4e8:	4770      	bx	lr

0002d4ea <net_buf_simple_clone>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d4ea:	6803      	ldr	r3, [r0, #0]
   2d4ec:	600b      	str	r3, [r1, #0]
   2d4ee:	6843      	ldr	r3, [r0, #4]
   2d4f0:	604b      	str	r3, [r1, #4]
   2d4f2:	6883      	ldr	r3, [r0, #8]
   2d4f4:	608b      	str	r3, [r1, #8]
}
   2d4f6:	4770      	bx	lr

0002d4f8 <net_buf_simple_push_be16>:
{
   2d4f8:	b510      	push	{r4, lr}
   2d4fa:	460c      	mov	r4, r1
	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
   2d4fc:	2102      	movs	r1, #2
   2d4fe:	f7f2 fcf7 	bl	1fef0 <net_buf_simple_push>
	dst[0] = val >> 8;
   2d502:	0a23      	lsrs	r3, r4, #8
   2d504:	7003      	strb	r3, [r0, #0]
	dst[1] = val;
   2d506:	7044      	strb	r4, [r0, #1]
}
   2d508:	bd10      	pop	{r4, pc}

0002d50a <net_buf_simple_push_u8>:
{
   2d50a:	b510      	push	{r4, lr}
   2d50c:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   2d50e:	2101      	movs	r1, #1
   2d510:	f7f2 fcee 	bl	1fef0 <net_buf_simple_push>
	*data = val;
   2d514:	7004      	strb	r4, [r0, #0]
}
   2d516:	bd10      	pop	{r4, pc}

0002d518 <net_buf_simple_push_be24>:
{
   2d518:	b510      	push	{r4, lr}
   2d51a:	460c      	mov	r4, r1
	sys_put_be24(val, net_buf_simple_push(buf, 3));
   2d51c:	2103      	movs	r1, #3
   2d51e:	f7f2 fce7 	bl	1fef0 <net_buf_simple_push>
	dst[0] = val >> 16;
   2d522:	0c23      	lsrs	r3, r4, #16
   2d524:	7003      	strb	r3, [r0, #0]
	dst[0] = val >> 8;
   2d526:	f3c4 2307 	ubfx	r3, r4, #8, #8
   2d52a:	7043      	strb	r3, [r0, #1]
	dst[1] = val;
   2d52c:	7084      	strb	r4, [r0, #2]
}
   2d52e:	bd10      	pop	{r4, pc}

0002d530 <net_buf_simple_pull_u8>:
{
   2d530:	b510      	push	{r4, lr}
	val = buf->data[0];
   2d532:	6803      	ldr	r3, [r0, #0]
   2d534:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2d536:	2101      	movs	r1, #1
   2d538:	f7f2 fcf8 	bl	1ff2c <net_buf_simple_pull>
}
   2d53c:	4620      	mov	r0, r4
   2d53e:	bd10      	pop	{r4, pc}

0002d540 <net_buf_simple_pull_le16>:
{
   2d540:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2d542:	6803      	ldr	r3, [r0, #0]
   2d544:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2d546:	2102      	movs	r1, #2
   2d548:	f7f2 fcf0 	bl	1ff2c <net_buf_simple_pull>
}
   2d54c:	4620      	mov	r0, r4
   2d54e:	bd10      	pop	{r4, pc}

0002d550 <net_buf_simple_pull_be16>:
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2d550:	6803      	ldr	r3, [r0, #0]
{
   2d552:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2d554:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2d556:	2102      	movs	r1, #2
   2d558:	f7f2 fce8 	bl	1ff2c <net_buf_simple_pull>
	return sys_be16_to_cpu(val);
   2d55c:	0220      	lsls	r0, r4, #8
   2d55e:	ea40 2014 	orr.w	r0, r0, r4, lsr #8
}
   2d562:	b280      	uxth	r0, r0
   2d564:	bd10      	pop	{r4, pc}

0002d566 <net_buf_simple_pull_le24>:
	val = UNALIGNED_GET((struct uint24 *)buf->data);
   2d566:	6803      	ldr	r3, [r0, #0]
{
   2d568:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((struct uint24 *)buf->data);
   2d56a:	785a      	ldrb	r2, [r3, #1]
   2d56c:	781c      	ldrb	r4, [r3, #0]
   2d56e:	789b      	ldrb	r3, [r3, #2]
   2d570:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
   2d574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
	net_buf_simple_pull(buf, sizeof(val));
   2d578:	2103      	movs	r1, #3
   2d57a:	f7f2 fcd7 	bl	1ff2c <net_buf_simple_pull>
}
   2d57e:	4620      	mov	r0, r4
   2d580:	bd10      	pop	{r4, pc}

0002d582 <net_buf_simple_pull_le32>:
{
   2d582:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint32_t *)buf->data);
   2d584:	6803      	ldr	r3, [r0, #0]
   2d586:	681c      	ldr	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2d588:	2104      	movs	r1, #4
   2d58a:	f7f2 fccf 	bl	1ff2c <net_buf_simple_pull>
}
   2d58e:	4620      	mov	r0, r4
   2d590:	bd10      	pop	{r4, pc}

0002d592 <net_buf_simple_pull_be32>:
{
   2d592:	b510      	push	{r4, lr}
   2d594:	6803      	ldr	r3, [r0, #0]
   2d596:	681c      	ldr	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2d598:	2104      	movs	r1, #4
   2d59a:	ba24      	rev	r4, r4
   2d59c:	f7f2 fcc6 	bl	1ff2c <net_buf_simple_pull>
}
   2d5a0:	4620      	mov	r0, r4
   2d5a2:	bd10      	pop	{r4, pc}

0002d5a4 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2d5a4:	6802      	ldr	r2, [r0, #0]
   2d5a6:	6880      	ldr	r0, [r0, #8]
}
   2d5a8:	1a10      	subs	r0, r2, r0
   2d5aa:	4770      	bx	lr

0002d5ac <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2d5ac:	8883      	ldrh	r3, [r0, #4]
   2d5ae:	88c2      	ldrh	r2, [r0, #6]
   2d5b0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2d5b2:	6803      	ldr	r3, [r0, #0]
   2d5b4:	6880      	ldr	r0, [r0, #8]
   2d5b6:	1a18      	subs	r0, r3, r0
}
   2d5b8:	1a10      	subs	r0, r2, r0
   2d5ba:	4770      	bx	lr

0002d5bc <net_buf_simple_add_mem>:
{
   2d5bc:	b538      	push	{r3, r4, r5, lr}
   2d5be:	460d      	mov	r5, r1
   2d5c0:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2d5c2:	4611      	mov	r1, r2
   2d5c4:	f7f2 fcec 	bl	1ffa0 <net_buf_simple_add>
   2d5c8:	4622      	mov	r2, r4
   2d5ca:	4629      	mov	r1, r5
}
   2d5cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2d5d0:	f000 be6b 	b.w	2e2aa <memcpy>

0002d5d4 <net_buf_simple_add_u8>:
{
   2d5d4:	b510      	push	{r4, lr}
   2d5d6:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2d5d8:	2101      	movs	r1, #1
   2d5da:	f7f2 fce1 	bl	1ffa0 <net_buf_simple_add>
	*u8 = val;
   2d5de:	7004      	strb	r4, [r0, #0]
}
   2d5e0:	bd10      	pop	{r4, pc}

0002d5e2 <net_buf_simple_add_le16>:
{
   2d5e2:	b510      	push	{r4, lr}
   2d5e4:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   2d5e6:	2102      	movs	r1, #2
   2d5e8:	f7f2 fcda 	bl	1ffa0 <net_buf_simple_add>
	dst[0] = val;
   2d5ec:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2d5ee:	0a24      	lsrs	r4, r4, #8
   2d5f0:	7044      	strb	r4, [r0, #1]
}
   2d5f2:	bd10      	pop	{r4, pc}

0002d5f4 <net_buf_simple_add_be16>:
{
   2d5f4:	b510      	push	{r4, lr}
   2d5f6:	460c      	mov	r4, r1
	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
   2d5f8:	2102      	movs	r1, #2
   2d5fa:	f7f2 fcd1 	bl	1ffa0 <net_buf_simple_add>
	dst[0] = val >> 8;
   2d5fe:	0a23      	lsrs	r3, r4, #8
   2d600:	7003      	strb	r3, [r0, #0]
	dst[1] = val;
   2d602:	7044      	strb	r4, [r0, #1]
}
   2d604:	bd10      	pop	{r4, pc}

0002d606 <net_buf_simple_add_le24>:
{
   2d606:	b510      	push	{r4, lr}
   2d608:	460c      	mov	r4, r1
	sys_put_le24(val, net_buf_simple_add(buf, 3));
   2d60a:	2103      	movs	r1, #3
   2d60c:	f7f2 fcc8 	bl	1ffa0 <net_buf_simple_add>
	dst[1] = val >> 8;
   2d610:	f3c4 2307 	ubfx	r3, r4, #8, #8
	dst[0] = val;
   2d614:	7004      	strb	r4, [r0, #0]
	dst[2] = val >> 16;
   2d616:	0c24      	lsrs	r4, r4, #16
	dst[1] = val >> 8;
   2d618:	7043      	strb	r3, [r0, #1]
	dst[2] = val >> 16;
   2d61a:	7084      	strb	r4, [r0, #2]
}
   2d61c:	bd10      	pop	{r4, pc}

0002d61e <net_buf_simple_add_le32>:
{
   2d61e:	b510      	push	{r4, lr}
   2d620:	460c      	mov	r4, r1
	sys_put_le32(val, net_buf_simple_add(buf, sizeof(val)));
   2d622:	2104      	movs	r1, #4
   2d624:	f7f2 fcbc 	bl	1ffa0 <net_buf_simple_add>
	dst[1] = val >> 8;
   2d628:	f3c4 2307 	ubfx	r3, r4, #8, #8
	dst[0] = val;
   2d62c:	7004      	strb	r4, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   2d62e:	0c24      	lsrs	r4, r4, #16
	dst[0] = val;
   2d630:	7084      	strb	r4, [r0, #2]
	dst[1] = val >> 8;
   2d632:	0a24      	lsrs	r4, r4, #8
   2d634:	7043      	strb	r3, [r0, #1]
   2d636:	70c4      	strb	r4, [r0, #3]
}
   2d638:	bd10      	pop	{r4, pc}

0002d63a <net_buf_simple_add_be32>:
{
   2d63a:	b510      	push	{r4, lr}
   2d63c:	460c      	mov	r4, r1
	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   2d63e:	2104      	movs	r1, #4
   2d640:	f7f2 fcae 	bl	1ffa0 <net_buf_simple_add>
	sys_put_be16(val >> 16, dst);
   2d644:	0c23      	lsrs	r3, r4, #16
	dst[0] = val >> 8;
   2d646:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   2d648:	7043      	strb	r3, [r0, #1]
	dst[0] = val >> 8;
   2d64a:	f3c4 2307 	ubfx	r3, r4, #8, #8
   2d64e:	7002      	strb	r2, [r0, #0]
   2d650:	7083      	strb	r3, [r0, #2]
	dst[1] = val;
   2d652:	70c4      	strb	r4, [r0, #3]
}
   2d654:	bd10      	pop	{r4, pc}

0002d656 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d656:	6843      	ldr	r3, [r0, #4]
   2d658:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2d65a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2d65e:	600b      	str	r3, [r1, #0]
}
   2d660:	2000      	movs	r0, #0
   2d662:	4770      	bx	lr

0002d664 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d664:	6843      	ldr	r3, [r0, #4]
   2d666:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2d668:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2d66c:	4042      	eors	r2, r0
   2d66e:	400a      	ands	r2, r1
   2d670:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2d672:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2d676:	2000      	movs	r0, #0
   2d678:	4770      	bx	lr

0002d67a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d67a:	6843      	ldr	r3, [r0, #4]
   2d67c:	685b      	ldr	r3, [r3, #4]
}
   2d67e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2d680:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2d684:	4770      	bx	lr

0002d686 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d686:	6843      	ldr	r3, [r0, #4]
   2d688:	685b      	ldr	r3, [r3, #4]
}
   2d68a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2d68c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2d690:	4770      	bx	lr

0002d692 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d692:	6843      	ldr	r3, [r0, #4]
   2d694:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2d696:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2d69a:	4059      	eors	r1, r3
    p_reg->OUT = value;
   2d69c:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   2d6a0:	2000      	movs	r0, #0
   2d6a2:	4770      	bx	lr

0002d6a4 <nrf_gpio_cfg_sense_set>:
{
   2d6a4:	b513      	push	{r0, r1, r4, lr}
   2d6a6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d6a8:	a801      	add	r0, sp, #4
{
   2d6aa:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d6ac:	f7f2 fd04 	bl	200b8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   2d6b0:	9a01      	ldr	r2, [sp, #4]
   2d6b2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   2d6b6:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   2d6ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2d6be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   2d6c2:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   2d6c6:	b002      	add	sp, #8
   2d6c8:	bd10      	pop	{r4, pc}

0002d6ca <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   2d6ca:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2d6cc:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   2d6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   2d6d4:	68dc      	ldr	r4, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2d6d6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2d6da:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   2d6dc:	430a      	orrs	r2, r1
   2d6de:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   2d6e2:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   2d6e6:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2d6ea:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   2d6ec:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   2d6f0:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2d6f2:	2700      	movs	r7, #0
	while (level_pins) {
   2d6f4:	b914      	cbnz	r4, 2d6fc <check_level_trigger_pins+0x32>
}
   2d6f6:	4628      	mov	r0, r5
   2d6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2d6fc:	4234      	tst	r4, r6
   2d6fe:	d00a      	beq.n	2d716 <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2d700:	f898 3008 	ldrb.w	r3, [r8, #8]
   2d704:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2d708:	2100      	movs	r1, #0
   2d70a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   2d70e:	f7ff ffc9 	bl	2d6a4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2d712:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2d716:	3701      	adds	r7, #1
		bit <<= 1;
   2d718:	0076      	lsls	r6, r6, #1
   2d71a:	e7eb      	b.n	2d6f4 <check_level_trigger_pins+0x2a>

0002d71c <cfg_level_pins>:
{
   2d71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   2d720:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2d722:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   2d726:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2d728:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   2d72c:	4313      	orrs	r3, r2
   2d72e:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   2d732:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2d734:	2500      	movs	r5, #0
	while (level_pins) {
   2d736:	b90c      	cbnz	r4, 2d73c <cfg_level_pins+0x20>
}
   2d738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2d73c:	4226      	tst	r6, r4
   2d73e:	d010      	beq.n	2d762 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2d740:	693b      	ldr	r3, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2d742:	f898 2008 	ldrb.w	r2, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2d746:	40eb      	lsrs	r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   2d748:	f013 0f01 	tst.w	r3, #1
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2d74c:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2d750:	bf0c      	ite	eq
   2d752:	2103      	moveq	r1, #3
   2d754:	2102      	movne	r1, #2
   2d756:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
   2d75a:	f7ff ffa3 	bl	2d6a4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2d75e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2d762:	3501      	adds	r5, #1
		bit <<= 1;
   2d764:	0076      	lsls	r6, r6, #1
   2d766:	e7e6      	b.n	2d736 <cfg_level_pins+0x1a>

0002d768 <_spi_context_cs_control.isra.5>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   2d768:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   2d76a:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   2d76c:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   2d76e:	b1fd      	cbz	r5, 2d7b0 <_spi_context_cs_control.isra.5+0x48>
   2d770:	68ab      	ldr	r3, [r5, #8]
   2d772:	b1eb      	cbz	r3, 2d7b0 <_spi_context_cs_control.isra.5+0x48>
   2d774:	6818      	ldr	r0, [r3, #0]
   2d776:	b1d8      	cbz	r0, 2d7b0 <_spi_context_cs_control.isra.5+0x48>
		if (on) {
   2d778:	b151      	cbz	r1, 2d790 <_spi_context_cs_control.isra.5+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2d77a:	7a19      	ldrb	r1, [r3, #8]
   2d77c:	2201      	movs	r2, #1
   2d77e:	f7f2 fe8d 	bl	2049c <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   2d782:	6823      	ldr	r3, [r4, #0]
   2d784:	689b      	ldr	r3, [r3, #8]
   2d786:	6858      	ldr	r0, [r3, #4]
}
   2d788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2d78c:	f000 bc6f 	b.w	2e06e <z_impl_k_busy_wait>
			if (!force_off &&
   2d790:	b912      	cbnz	r2, 2d798 <_spi_context_cs_control.isra.5+0x30>
   2d792:	88aa      	ldrh	r2, [r5, #4]
   2d794:	0492      	lsls	r2, r2, #18
   2d796:	d40b      	bmi.n	2d7b0 <_spi_context_cs_control.isra.5+0x48>
			k_busy_wait(ctx->config->cs->delay);
   2d798:	6858      	ldr	r0, [r3, #4]
   2d79a:	f000 fc68 	bl	2e06e <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2d79e:	6823      	ldr	r3, [r4, #0]
   2d7a0:	689b      	ldr	r3, [r3, #8]
   2d7a2:	2200      	movs	r2, #0
   2d7a4:	7a19      	ldrb	r1, [r3, #8]
   2d7a6:	6818      	ldr	r0, [r3, #0]
}
   2d7a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2d7ac:	f7f2 be76 	b.w	2049c <gpio_pin_set>
}
   2d7b0:	bd38      	pop	{r3, r4, r5, pc}

0002d7b2 <spi_context_unlock_unconditionally>:
{
   2d7b2:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2d7b4:	2201      	movs	r2, #1
   2d7b6:	2100      	movs	r1, #0
{
   2d7b8:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2d7ba:	f7ff ffd5 	bl	2d768 <_spi_context_cs_control.isra.5>
	if (!k_sem_count_get(&ctx->lock)) {
   2d7be:	6923      	ldr	r3, [r4, #16]
   2d7c0:	b933      	cbnz	r3, 2d7d0 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2d7c2:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2d7c4:	f104 0008 	add.w	r0, r4, #8
}
   2d7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d7cc:	f7f7 bbf6 	b.w	24fbc <z_impl_k_sem_give>
   2d7d0:	bd10      	pop	{r4, pc}

0002d7d2 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   2d7d2:	68c0      	ldr	r0, [r0, #12]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2d7d4:	6803      	ldr	r3, [r0, #0]
   2d7d6:	428b      	cmp	r3, r1
{
   2d7d8:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2d7da:	d106      	bne.n	2d7ea <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2d7dc:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   2d7e0:	b934      	cbnz	r4, 2d7f0 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2d7e2:	f7ff ffe6 	bl	2d7b2 <spi_context_unlock_unconditionally>
	return 0;
   2d7e6:	4620      	mov	r0, r4
}
   2d7e8:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2d7ea:	f06f 0015 	mvn.w	r0, #21
   2d7ee:	e7fb      	b.n	2d7e8 <spi_nrfx_release+0x16>
		return -EBUSY;
   2d7f0:	f06f 000f 	mvn.w	r0, #15
   2d7f4:	e7f8      	b.n	2d7e8 <spi_nrfx_release+0x16>

0002d7f6 <flash_nrf_write_protection>:
}
   2d7f6:	2000      	movs	r0, #0
   2d7f8:	4770      	bx	lr

0002d7fa <is_regular_addr_valid>:
{
   2d7fa:	b538      	push	{r3, r4, r5, lr}
   2d7fc:	4604      	mov	r4, r0
   2d7fe:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2d800:	f000 fb26 	bl	2de50 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2d804:	4284      	cmp	r4, r0
   2d806:	d209      	bcs.n	2d81c <is_regular_addr_valid+0x22>
   2d808:	2c00      	cmp	r4, #0
   2d80a:	db07      	blt.n	2d81c <is_regular_addr_valid+0x22>
	    addr < 0 ||
   2d80c:	42a8      	cmp	r0, r5
   2d80e:	d305      	bcc.n	2d81c <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2d810:	442c      	add	r4, r5
	    len > flash_size ||
   2d812:	4284      	cmp	r4, r0
   2d814:	bf8c      	ite	hi
   2d816:	2000      	movhi	r0, #0
   2d818:	2001      	movls	r0, #1
}
   2d81a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   2d81c:	2000      	movs	r0, #0
   2d81e:	e7fc      	b.n	2d81a <is_regular_addr_valid+0x20>

0002d820 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   2d820:	2000      	movs	r0, #0
   2d822:	f7ec b807 	b.w	19834 <ticker_is_initialized>

0002d826 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   2d826:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2d82a:	461d      	mov	r5, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   2d82c:	6883      	ldr	r3, [r0, #8]
{
   2d82e:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   2d830:	695b      	ldr	r3, [r3, #20]
   2d832:	4669      	mov	r1, sp
{
   2d834:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
   2d836:	aa01      	add	r2, sp, #4
   2d838:	4798      	blx	r3

	while (layout_size--) {
   2d83a:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d83e:	2300      	movs	r3, #0
   2d840:	3a01      	subs	r2, #1
	off_t end = 0;
   2d842:	4618      	mov	r0, r3
	off_t group_offs = 0;
   2d844:	469e      	mov	lr, r3
	size_t page_count = 0;
   2d846:	469c      	mov	ip, r3
	while (layout_size--) {
   2d848:	1c57      	adds	r7, r2, #1
   2d84a:	d102      	bne.n	2d852 <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   2d84c:	f06f 0015 	mvn.w	r0, #21
   2d850:	e01a      	b.n	2d888 <flash_get_page_info+0x62>
		if (use_addr) {
   2d852:	f8d1 8000 	ldr.w	r8, [r1]
   2d856:	b1d6      	cbz	r6, 2d88e <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   2d858:	684f      	ldr	r7, [r1, #4]
   2d85a:	fb07 0008 	mla	r0, r7, r8, r0
		if (offs < end) {
   2d85e:	42a0      	cmp	r0, r4
   2d860:	f102 37ff 	add.w	r7, r2, #4294967295
   2d864:	dd18      	ble.n	2d898 <flash_get_page_info+0x72>
   2d866:	9201      	str	r2, [sp, #4]
   2d868:	b103      	cbz	r3, 2d86c <flash_get_page_info+0x46>
   2d86a:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   2d86c:	9b00      	ldr	r3, [sp, #0]
   2d86e:	685b      	ldr	r3, [r3, #4]
   2d870:	606b      	str	r3, [r5, #4]
			if (use_addr) {
   2d872:	b176      	cbz	r6, 2d892 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   2d874:	eba4 040e 	sub.w	r4, r4, lr
   2d878:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   2d87c:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   2d880:	4464      	add	r4, ip
			info->start_offset = group_offs +
   2d882:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
   2d884:	60ac      	str	r4, [r5, #8]
			return 0;
   2d886:	2000      	movs	r0, #0
}
   2d888:	b002      	add	sp, #8
   2d88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   2d88e:	4440      	add	r0, r8
   2d890:	e7e5      	b.n	2d85e <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   2d892:	eba4 040c 	sub.w	r4, r4, ip
   2d896:	e7f1      	b.n	2d87c <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   2d898:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   2d89a:	44c4      	add	ip, r8
		group_offs += layout->pages_count * layout->pages_size;
   2d89c:	fb03 ee08 	mla	lr, r3, r8, lr
		layout++;
   2d8a0:	3108      	adds	r1, #8
   2d8a2:	2301      	movs	r3, #1
   2d8a4:	463a      	mov	r2, r7
   2d8a6:	e7cf      	b.n	2d848 <flash_get_page_info+0x22>

0002d8a8 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
	return flash_get_page_info(dev, offs, true, info);
   2d8a8:	4613      	mov	r3, r2
   2d8aa:	2201      	movs	r2, #1
   2d8ac:	f7ff bfbb 	b.w	2d826 <flash_get_page_info>

0002d8b0 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2d8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2d8b4:	6883      	ldr	r3, [r0, #8]
{
   2d8b6:	b086      	sub	sp, #24
   2d8b8:	4689      	mov	r9, r1
   2d8ba:	4692      	mov	sl, r2
	api->page_layout(dev, &layout, &num_blocks);
   2d8bc:	695b      	ldr	r3, [r3, #20]
   2d8be:	aa02      	add	r2, sp, #8
   2d8c0:	a901      	add	r1, sp, #4
   2d8c2:	4798      	blx	r3
	off_t off = 0;
   2d8c4:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2d8c6:	46a0      	mov	r8, r4

	for (block = 0; block < num_blocks; block++) {
   2d8c8:	4625      	mov	r5, r4
   2d8ca:	9b02      	ldr	r3, [sp, #8]
   2d8cc:	42ab      	cmp	r3, r5
   2d8ce:	d802      	bhi.n	2d8d6 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2d8d0:	b006      	add	sp, #24
   2d8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2d8d6:	9f01      	ldr	r7, [sp, #4]
   2d8d8:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2d8dc:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2d8de:	687b      	ldr	r3, [r7, #4]
   2d8e0:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2d8e2:	683a      	ldr	r2, [r7, #0]
   2d8e4:	42b2      	cmp	r2, r6
   2d8e6:	eb08 0306 	add.w	r3, r8, r6
   2d8ea:	d802      	bhi.n	2d8f2 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2d8ec:	3501      	adds	r5, #1
   2d8ee:	4698      	mov	r8, r3
   2d8f0:	e7eb      	b.n	2d8ca <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2d8f2:	4651      	mov	r1, sl
   2d8f4:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   2d8f6:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2d8f8:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2d8fa:	47c8      	blx	r9
   2d8fc:	2800      	cmp	r0, #0
   2d8fe:	d0e7      	beq.n	2d8d0 <flash_page_foreach+0x20>
			off += page_info.size;
   2d900:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2d902:	3601      	adds	r6, #1
			off += page_info.size;
   2d904:	441c      	add	r4, r3
			page++;
   2d906:	e7ec      	b.n	2d8e2 <flash_page_foreach+0x32>

0002d908 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   2d908:	6843      	ldr	r3, [r0, #4]
   2d90a:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   2d90c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2d910:	05d2      	lsls	r2, r2, #23
   2d912:	d518      	bpl.n	2d946 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d914:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   2d918:	b1aa      	cbz	r2, 2d946 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   2d91a:	f04f 0120 	mov.w	r1, #32
   2d91e:	f3ef 8211 	mrs	r2, BASEPRI
   2d922:	f381 8811 	msr	BASEPRI, r1
   2d926:	f3bf 8f6f 	isb	sy
   2d92a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2d92e:	b131      	cbz	r1, 2d93e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d930:	2100      	movs	r1, #0
   2d932:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2d936:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d93a:	2101      	movs	r1, #1
   2d93c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2d93e:	f382 8811 	msr	BASEPRI, r2
   2d942:	f3bf 8f6f 	isb	sy
}
   2d946:	4770      	bx	lr

0002d948 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2d948:	68c3      	ldr	r3, [r0, #12]
   2d94a:	3304      	adds	r3, #4
{
   2d94c:	460a      	mov	r2, r1
	*cfg = get_dev_data(dev)->uart_config;
   2d94e:	e893 0003 	ldmia.w	r3, {r0, r1}
   2d952:	e882 0003 	stmia.w	r2, {r0, r1}
}
   2d956:	2000      	movs	r0, #0
   2d958:	4770      	bx	lr

0002d95a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2d95a:	6843      	ldr	r3, [r0, #4]
   2d95c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2d95e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2d962:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2d966:	4770      	bx	lr

0002d968 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2d968:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2d96a:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d96c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2d970:	b938      	cbnz	r0, 2d982 <is_tx_ready+0x1a>
   2d972:	7992      	ldrb	r2, [r2, #6]
   2d974:	b932      	cbnz	r2, 2d984 <is_tx_ready+0x1c>
   2d976:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   2d97a:	3000      	adds	r0, #0
   2d97c:	bf18      	it	ne
   2d97e:	2001      	movne	r0, #1
   2d980:	4770      	bx	lr
   2d982:	2001      	movs	r0, #1
}
   2d984:	4770      	bx	lr

0002d986 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2d986:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2d988:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2d98a:	681b      	ldr	r3, [r3, #0]
   2d98c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2d990:	b148      	cbz	r0, 2d9a6 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2d992:	7c52      	ldrb	r2, [r2, #17]
   2d994:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d996:	2000      	movs	r0, #0
   2d998:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2d99c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d9a0:	2201      	movs	r2, #1
   2d9a2:	601a      	str	r2, [r3, #0]
	return 0;
   2d9a4:	4770      	bx	lr
		return -1;
   2d9a6:	f04f 30ff 	mov.w	r0, #4294967295
}
   2d9aa:	4770      	bx	lr

0002d9ac <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   2d9ac:	2000      	movs	r0, #0
   2d9ae:	4770      	bx	lr

0002d9b0 <model_send>:
	return encoded_delay * DELAY_TIME_STEP_MS;
}

int model_send(struct bt_mesh_model *mod, struct bt_mesh_msg_ctx *ctx,
	       struct net_buf_simple *buf)
{
   2d9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d9b2:	4613      	mov	r3, r2
   2d9b4:	4604      	mov	r4, r0
	if (!ctx && !mod->pub) {
   2d9b6:	b921      	cbnz	r1, 2d9c2 <model_send+0x12>
   2d9b8:	6882      	ldr	r2, [r0, #8]
   2d9ba:	b942      	cbnz	r2, 2d9ce <model_send+0x1e>
		return -ENOTSUP;
   2d9bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d9c0:	e003      	b.n	2d9ca <model_send+0x1a>
	}

	if (ctx) {
		return bt_mesh_model_send(mod, ctx, buf, NULL, 0);
   2d9c2:	2300      	movs	r3, #0
   2d9c4:	9300      	str	r3, [sp, #0]
   2d9c6:	f7fd ffc8 	bl	2b95a <bt_mesh_model_send>

	net_buf_simple_reset(mod->pub->msg);
	net_buf_simple_add_mem(mod->pub->msg, buf->data, buf->len);

	return bt_mesh_model_publish(mod);
}
   2d9ca:	b003      	add	sp, #12
   2d9cc:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reset(mod->pub->msg);
   2d9ce:	6910      	ldr	r0, [r2, #16]
	buf->data = buf->__buf;
   2d9d0:	6882      	ldr	r2, [r0, #8]
	buf->len  = 0U;
   2d9d2:	8081      	strh	r1, [r0, #4]
	buf->data = buf->__buf;
   2d9d4:	6002      	str	r2, [r0, #0]
	net_buf_simple_add_mem(mod->pub->msg, buf->data, buf->len);
   2d9d6:	6819      	ldr	r1, [r3, #0]
   2d9d8:	889a      	ldrh	r2, [r3, #4]
   2d9da:	f7ff fdef 	bl	2d5bc <net_buf_simple_add_mem>
	return bt_mesh_model_publish(mod);
   2d9de:	4620      	mov	r0, r4
}
   2d9e0:	b003      	add	sp, #12
   2d9e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_mesh_model_publish(mod);
   2d9e6:	f7e5 bac3 	b.w	12f70 <bt_mesh_model_publish>

0002d9ea <prop_get>:
	if (!srv || id == BT_MESH_PROP_ID_PROHIBITED) {
   2d9ea:	b178      	cbz	r0, 2da0c <prop_get+0x22>
   2d9ec:	b169      	cbz	r1, 2da0a <prop_get+0x20>
	PROP_FOREACH(srv, prop)
   2d9ee:	e9d0 233a 	ldrd	r2, r3, [r0, #232]	; 0xe8
   2d9f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2d9f6:	4610      	mov	r0, r2
   2d9f8:	4283      	cmp	r3, r0
   2d9fa:	d101      	bne.n	2da00 <prop_get+0x16>
		return NULL;
   2d9fc:	2000      	movs	r0, #0
   2d9fe:	4770      	bx	lr
		if (prop->id == id) {
   2da00:	8802      	ldrh	r2, [r0, #0]
   2da02:	428a      	cmp	r2, r1
   2da04:	d002      	beq.n	2da0c <prop_get+0x22>
	PROP_FOREACH(srv, prop)
   2da06:	3004      	adds	r0, #4
   2da08:	e7f6      	b.n	2d9f8 <prop_get+0xe>
		return NULL;
   2da0a:	4608      	mov	r0, r1
}
   2da0c:	4770      	bx	lr

0002da0e <bt_mesh_prop_srv_settings_set>:
{
   2da0e:	b570      	push	{r4, r5, r6, lr}
	ssize_t size = MIN(sizeof(entries), len_rd);
   2da10:	2a40      	cmp	r2, #64	; 0x40
{
   2da12:	b090      	sub	sp, #64	; 0x40
	struct bt_mesh_prop_srv *srv = model->user_data;
   2da14:	6986      	ldr	r6, [r0, #24]
	ssize_t size = MIN(sizeof(entries), len_rd);
   2da16:	bf28      	it	cs
   2da18:	2240      	movcs	r2, #64	; 0x40
	if (name) {
   2da1a:	460c      	mov	r4, r1
   2da1c:	b9c9      	cbnz	r1, 2da52 <bt_mesh_prop_srv_settings_set+0x44>
	size = read_cb(cb_arg, &entries, size);
   2da1e:	4669      	mov	r1, sp
   2da20:	9814      	ldr	r0, [sp, #80]	; 0x50
   2da22:	4798      	blx	r3
	if (size < srv->property_count) {
   2da24:	f8d6 50ec 	ldr.w	r5, [r6, #236]	; 0xec
   2da28:	4285      	cmp	r5, r0
   2da2a:	d815      	bhi.n	2da58 <bt_mesh_prop_srv_settings_set+0x4a>
   2da2c:	4621      	mov	r1, r4
   2da2e:	b2cb      	uxtb	r3, r1
	for (uint8_t i = 0; i < srv->property_count; ++i) {
   2da30:	429d      	cmp	r5, r3
   2da32:	f101 0101 	add.w	r1, r1, #1
   2da36:	d802      	bhi.n	2da3e <bt_mesh_prop_srv_settings_set+0x30>
	return 0;
   2da38:	2000      	movs	r0, #0
}
   2da3a:	b010      	add	sp, #64	; 0x40
   2da3c:	bd70      	pop	{r4, r5, r6, pc}
		srv->properties[i].user_access = entries[i];
   2da3e:	aa10      	add	r2, sp, #64	; 0x40
   2da40:	441a      	add	r2, r3
   2da42:	f812 0c40 	ldrb.w	r0, [r2, #-64]
   2da46:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
   2da4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2da4e:	7098      	strb	r0, [r3, #2]
   2da50:	e7ed      	b.n	2da2e <bt_mesh_prop_srv_settings_set+0x20>
		return -ENOENT;
   2da52:	f06f 0001 	mvn.w	r0, #1
   2da56:	e7f0      	b.n	2da3a <bt_mesh_prop_srv_settings_set+0x2c>
		return -EINVAL;
   2da58:	f06f 0015 	mvn.w	r0, #21
   2da5c:	e7ed      	b.n	2da3a <bt_mesh_prop_srv_settings_set+0x2c>

0002da5e <bt_mesh_prop_srv_reset>:
{
   2da5e:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_prop_srv *srv = mod->user_data;
   2da60:	6980      	ldr	r0, [r0, #24]
	net_buf_simple_reset(srv->pub.msg);
   2da62:	6982      	ldr	r2, [r0, #24]
	buf->len  = 0U;
   2da64:	2300      	movs	r3, #0
	buf->data = buf->__buf;
   2da66:	6891      	ldr	r1, [r2, #8]
	buf->len  = 0U;
   2da68:	8093      	strh	r3, [r2, #4]
	buf->data = buf->__buf;
   2da6a:	6011      	str	r1, [r2, #0]
		(void)bt_mesh_model_data_store(srv->mod, false, NULL, NULL, 0);
   2da6c:	9300      	str	r3, [sp, #0]
   2da6e:	461a      	mov	r2, r3
   2da70:	4619      	mov	r1, r3
   2da72:	6800      	ldr	r0, [r0, #0]
   2da74:	f7e5 fba8 	bl	131c8 <bt_mesh_model_data_store>
}
   2da78:	b003      	add	sp, #12
   2da7a:	f85d fb04 	ldr.w	pc, [sp], #4

0002da7e <handle_owner_properties_get>:
{
   2da7e:	b570      	push	{r4, r5, r6, lr}
	if (buf->len != BT_MESH_PROP_MSG_LEN_PROPS_GET) {
   2da80:	8894      	ldrh	r4, [r2, #4]
{
   2da82:	b0a8      	sub	sp, #160	; 0xa0
   2da84:	4605      	mov	r5, r0
   2da86:	460e      	mov	r6, r1
	if (buf->len != BT_MESH_PROP_MSG_LEN_PROPS_GET) {
   2da88:	b98c      	cbnz	r4, 2daae <handle_owner_properties_get+0x30>
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_PROP_OP_ADMIN_PROPS_STATUS,
   2da8a:	ab06      	add	r3, sp, #24
   2da8c:	f44f 0205 	mov.w	r2, #8716288	; 0x850000
   2da90:	e9cd 2304 	strd	r2, r3, [sp, #16]
	pub_list_build(mod->user_data, &rsp, 0);
   2da94:	a903      	add	r1, sp, #12
   2da96:	4622      	mov	r2, r4
   2da98:	6980      	ldr	r0, [r0, #24]
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_PROP_OP_ADMIN_PROPS_STATUS,
   2da9a:	9303      	str	r3, [sp, #12]
	pub_list_build(mod->user_data, &rsp, 0);
   2da9c:	f7f3 fdbc 	bl	21618 <pub_list_build>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   2daa0:	9400      	str	r4, [sp, #0]
   2daa2:	4623      	mov	r3, r4
   2daa4:	aa03      	add	r2, sp, #12
   2daa6:	4631      	mov	r1, r6
   2daa8:	4628      	mov	r0, r5
   2daaa:	f7fd ff56 	bl	2b95a <bt_mesh_model_send>
}
   2daae:	b028      	add	sp, #160	; 0xa0
   2dab0:	bd70      	pop	{r4, r5, r6, pc}

0002dab2 <handle_owner_property_set_unack>:
	owner_property_set(mod, ctx, buf, false);
   2dab2:	2300      	movs	r3, #0
   2dab4:	f7f3 bece 	b.w	21854 <owner_property_set>

0002dab8 <handle_owner_property_set>:
	owner_property_set(mod, ctx, buf, true);
   2dab8:	2301      	movs	r3, #1
   2daba:	f7f3 becb 	b.w	21854 <owner_property_set>

0002dabe <sensor_get>:
	SENSOR_FOR_EACH(&srv->sensors, sensor)
   2dabe:	6840      	ldr	r0, [r0, #4]
   2dac0:	b108      	cbz	r0, 2dac6 <sensor_get+0x8>
   2dac2:	3848      	subs	r0, #72	; 0x48
   2dac4:	b900      	cbnz	r0, 2dac8 <sensor_get+0xa>
}
   2dac6:	4770      	bx	lr
		if (sensor->type->id == id) {
   2dac8:	6803      	ldr	r3, [r0, #0]
   2daca:	881b      	ldrh	r3, [r3, #0]
   2dacc:	428b      	cmp	r3, r1
   2dace:	d0fa      	beq.n	2dac6 <sensor_get+0x8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2dad0:	6c80      	ldr	r0, [r0, #72]	; 0x48
   2dad2:	e7f5      	b.n	2dac0 <sensor_get+0x2>

0002dad4 <handle_settings_get>:
{
   2dad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   2dad8:	6985      	ldr	r5, [r0, #24]
{
   2dada:	b08c      	sub	sp, #48	; 0x30
   2dadc:	4606      	mov	r6, r0
	uint16_t id = net_buf_simple_pull_le16(buf);
   2dade:	4610      	mov	r0, r2
{
   2dae0:	460f      	mov	r7, r1
	uint16_t id = net_buf_simple_pull_le16(buf);
   2dae2:	f7ff fd2d 	bl	2d540 <net_buf_simple_pull_le16>
	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   2dae6:	4604      	mov	r4, r0
   2dae8:	b1d0      	cbz	r0, 2db20 <handle_settings_get+0x4c>
	BT_MESH_MODEL_BUF_DEFINE(
   2daea:	ab06      	add	r3, sp, #24
   2daec:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTINGS_STATUS);
   2daf0:	2158      	movs	r1, #88	; 0x58
   2daf2:	a803      	add	r0, sp, #12
	BT_MESH_MODEL_BUF_DEFINE(
   2daf4:	9303      	str	r3, [sp, #12]
   2daf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTINGS_STATUS);
   2dafa:	f7fd ff05 	bl	2b908 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   2dafe:	4621      	mov	r1, r4
   2db00:	a803      	add	r0, sp, #12
   2db02:	f7ff fd6e 	bl	2d5e2 <net_buf_simple_add_le16>
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   2db06:	4628      	mov	r0, r5
   2db08:	4621      	mov	r1, r4
   2db0a:	f7ff ffd8 	bl	2dabe <sensor_get>
	if (!sensor) {
   2db0e:	4605      	mov	r5, r0
   2db10:	b9c8      	cbnz	r0, 2db46 <handle_settings_get+0x72>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   2db12:	2300      	movs	r3, #0
   2db14:	9300      	str	r3, [sp, #0]
   2db16:	aa03      	add	r2, sp, #12
   2db18:	4639      	mov	r1, r7
   2db1a:	4630      	mov	r0, r6
   2db1c:	f7fd ff1d 	bl	2b95a <bt_mesh_model_send>
}
   2db20:	b00c      	add	sp, #48	; 0x30
   2db22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					sensor->settings.list[i].type->id);
   2db26:	68aa      	ldr	r2, [r5, #8]
   2db28:	fb08 f304 	mul.w	r3, r8, r4
		net_buf_simple_add_le16(&rsp,
   2db2c:	a803      	add	r0, sp, #12
   2db2e:	58d3      	ldr	r3, [r2, r3]
   2db30:	8819      	ldrh	r1, [r3, #0]
   2db32:	f7ff fd56 	bl	2d5e2 <net_buf_simple_add_le16>
	     ++i) {
   2db36:	3401      	adds	r4, #1
	for (uint32_t i = 0; i < MIN(CONFIG_BT_MESH_SENSOR_SRV_SETTINGS_MAX,
   2db38:	68eb      	ldr	r3, [r5, #12]
   2db3a:	2b08      	cmp	r3, #8
   2db3c:	bf28      	it	cs
   2db3e:	2308      	movcs	r3, #8
   2db40:	429c      	cmp	r4, r3
   2db42:	d3f0      	bcc.n	2db26 <handle_settings_get+0x52>
   2db44:	e7e5      	b.n	2db12 <handle_settings_get+0x3e>
   2db46:	2400      	movs	r4, #0
					sensor->settings.list[i].type->id);
   2db48:	f04f 080c 	mov.w	r8, #12
   2db4c:	e7f4      	b.n	2db38 <handle_settings_get+0x64>

0002db4e <handle_setting_set_unack>:
	setting_set(mod, ctx, buf, false);
   2db4e:	2300      	movs	r3, #0
   2db50:	f7f4 b918 	b.w	21d84 <setting_set>

0002db54 <handle_setting_set>:
	setting_set(mod, ctx, buf, true);
   2db54:	2301      	movs	r3, #1
   2db56:	f7f4 b915 	b.w	21d84 <setting_set>

0002db5a <handle_cadence_set_unack>:
	cadence_set(mod, ctx, buf, false);
   2db5a:	2300      	movs	r3, #0
   2db5c:	f7f4 b9d4 	b.w	21f08 <cadence_set>

0002db60 <handle_cadence_set>:
	cadence_set(mod, ctx, buf, true);
   2db60:	2301      	movs	r3, #1
   2db62:	f7f4 b9d1 	b.w	21f08 <cadence_set>

0002db66 <update_handler>:
{
   2db66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   2db6a:	6985      	ldr	r5, [r0, #24]
{
   2db6c:	4604      	mov	r4, r0
   2db6e:	b08b      	sub	sp, #44	; 0x2c
	bt_mesh_model_msg_init(srv->pub.msg, BT_MESH_SENSOR_OP_STATUS);
   2db70:	2152      	movs	r1, #82	; 0x52
   2db72:	6a28      	ldr	r0, [r5, #32]
   2db74:	f7fd fec8 	bl	2b908 <bt_mesh_model_msg_init>
	uint32_t original_len = srv->pub.msg->len;
   2db78:	6a2b      	ldr	r3, [r5, #32]
   2db7a:	f8b3 a004 	ldrh.w	sl, [r3, #4]
	uint8_t period_div = srv->pub.period_div;
   2db7e:	7eeb      	ldrb	r3, [r5, #27]
   2db80:	f003 080f 	and.w	r8, r3, #15
	srv->pub.period_div = 0;
   2db84:	f023 031f 	bic.w	r3, r3, #31
	uint32_t base_period = bt_mesh_model_pub_period_get(mod);
   2db88:	4620      	mov	r0, r4
	srv->pub.period_div = 0;
   2db8a:	76eb      	strb	r3, [r5, #27]
	uint32_t base_period = bt_mesh_model_pub_period_get(mod);
   2db8c:	f7e4 ff24 	bl	129d8 <bt_mesh_model_pub_period_get>
	SENSOR_FOR_EACH(&srv->sensors, s)
   2db90:	686c      	ldr	r4, [r5, #4]
   2db92:	b14c      	cbz	r4, 2dba8 <update_handler+0x42>
	uint32_t pub_int = (base_period >> period_div);
   2db94:	fa20 f708 	lsr.w	r7, r0, r8
	SENSOR_FOR_EACH(&srv->sensors, s)
   2db98:	3c48      	subs	r4, #72	; 0x48
   2db9a:	f107 3bff 	add.w	fp, r7, #4294967295
	uint32_t min_int = (1 << sensor->state.min_int);
   2db9e:	f04f 0901 	mov.w	r9, #1
	struct sensor_value value[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX] = {};
   2dba2:	466e      	mov	r6, sp
   2dba4:	89ab      	ldrh	r3, [r5, #12]
	SENSOR_FOR_EACH(&srv->sensors, s)
   2dba6:	b964      	cbnz	r4, 2dbc2 <update_handler+0x5c>
	srv->seq++;
   2dba8:	89ab      	ldrh	r3, [r5, #12]
   2dbaa:	3301      	adds	r3, #1
   2dbac:	81ab      	strh	r3, [r5, #12]
	return (srv->pub.msg->len > original_len) ? 0 : -ENOENT;
   2dbae:	6a2b      	ldr	r3, [r5, #32]
   2dbb0:	889b      	ldrh	r3, [r3, #4]
   2dbb2:	4553      	cmp	r3, sl
   2dbb4:	bf8c      	ite	hi
   2dbb6:	2000      	movhi	r0, #0
   2dbb8:	f06f 0001 	mvnls.w	r0, #1
}
   2dbbc:	b00b      	add	sp, #44	; 0x2c
   2dbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (srv->seq - s->state.seq < min_int) {
   2dbc2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   2dbc6:	1a9a      	subs	r2, r3, r2
	uint32_t min_int = (1 << sensor->state.min_int);
   2dbc8:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   2dbcc:	fa09 f303 	lsl.w	r3, r9, r3
	return ceiling_fraction(min_int, pub_int);
   2dbd0:	445b      	add	r3, fp
   2dbd2:	fbb3 f3f7 	udiv	r3, r3, r7
	if (srv->seq - s->state.seq < min_int) {
   2dbd6:	b29b      	uxth	r3, r3
   2dbd8:	429a      	cmp	r2, r3
   2dbda:	db33      	blt.n	2dc44 <update_handler+0xde>
	struct sensor_value value[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX] = {};
   2dbdc:	2228      	movs	r2, #40	; 0x28
   2dbde:	2100      	movs	r1, #0
   2dbe0:	4630      	mov	r0, r6
   2dbe2:	f000 fb9d 	bl	2e320 <memset>
	err = value_get(s, NULL, value);
   2dbe6:	4632      	mov	r2, r6
   2dbe8:	2100      	movs	r1, #0
   2dbea:	4620      	mov	r0, r4
   2dbec:	f7f3 ffec 	bl	21bc8 <value_get>
	if (err) {
   2dbf0:	bb40      	cbnz	r0, 2dc44 <update_handler+0xde>
	bool delta_triggered = bt_mesh_sensor_delta_threshold(s, value);
   2dbf2:	4631      	mov	r1, r6
   2dbf4:	4620      	mov	r0, r4
   2dbf6:	f7d5 fa9f 	bl	3138 <bt_mesh_sensor_delta_threshold>
	if (!delta_triggered && srv->seq - s->state.seq < interval) {
   2dbfa:	b9a0      	cbnz	r0, 2dc26 <update_handler+0xc0>
   2dbfc:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
	uint8_t div = (sensor->state.pub_div * sensor->state.fast_pub);
   2dc00:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
	if (!delta_triggered && srv->seq - s->state.seq < interval) {
   2dc04:	89aa      	ldrh	r2, [r5, #12]
   2dc06:	1ad2      	subs	r2, r2, r3
	uint8_t div = (sensor->state.pub_div * sensor->state.fast_pub);
   2dc08:	f3c1 0303 	ubfx	r3, r1, #0, #4
   2dc0c:	f3c1 1100 	ubfx	r1, r1, #4, #1
   2dc10:	fb13 f301 	smulbb	r3, r3, r1
	return (1U << MAX(0, period_div - div));
   2dc14:	b2db      	uxtb	r3, r3
   2dc16:	eba8 0303 	sub.w	r3, r8, r3
   2dc1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2dc1e:	fa09 f303 	lsl.w	r3, r9, r3
	if (!delta_triggered && srv->seq - s->state.seq < interval) {
   2dc22:	429a      	cmp	r2, r3
   2dc24:	db0e      	blt.n	2dc44 <update_handler+0xde>
	err = sensor_status_encode(srv->pub.msg, s, value);
   2dc26:	4632      	mov	r2, r6
   2dc28:	4621      	mov	r1, r4
   2dc2a:	6a28      	ldr	r0, [r5, #32]
   2dc2c:	f000 f8c2 	bl	2ddb4 <sensor_status_encode>
	if (err) {
   2dc30:	b940      	cbnz	r0, 2dc44 <update_handler+0xde>
	s->state.prev = value[0];
   2dc32:	e896 0003 	ldmia.w	r6, {r0, r1}
   2dc36:	f104 034c 	add.w	r3, r4, #76	; 0x4c
   2dc3a:	e883 0003 	stmia.w	r3, {r0, r1}
	s->state.seq = srv->seq;
   2dc3e:	89ab      	ldrh	r3, [r5, #12]
   2dc40:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
		if (s->state.fast_pub) {
   2dc44:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
   2dc48:	06d3      	lsls	r3, r2, #27
   2dc4a:	d50c      	bpl.n	2dc66 <update_handler+0x100>
			srv->pub.fast_period = true;
   2dc4c:	7eeb      	ldrb	r3, [r5, #27]
				MAX(srv->pub.period_div, s->state.pub_div);
   2dc4e:	f043 0310 	orr.w	r3, r3, #16
   2dc52:	f002 020f 	and.w	r2, r2, #15
   2dc56:	f003 010f 	and.w	r1, r3, #15
   2dc5a:	428a      	cmp	r2, r1
   2dc5c:	bf38      	it	cc
   2dc5e:	460a      	movcc	r2, r1
			srv->pub.period_div =
   2dc60:	f362 0303 	bfi	r3, r2, #0, #4
   2dc64:	76eb      	strb	r3, [r5, #27]
   2dc66:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	SENSOR_FOR_EACH(&srv->sensors, s)
   2dc68:	2c00      	cmp	r4, #0
   2dc6a:	d09d      	beq.n	2dba8 <update_handler+0x42>
   2dc6c:	3c48      	subs	r4, #72	; 0x48
   2dc6e:	e799      	b.n	2dba4 <update_handler+0x3e>

0002dc70 <scalar_max>:
	const struct scalar_repr *repr = format->user_data;
   2dc70:	6883      	ldr	r3, [r0, #8]
	if (repr->flags & HAS_MAX) {
   2dc72:	781a      	ldrb	r2, [r3, #0]
{
   2dc74:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (repr->flags & HAS_MAX) {
   2dc76:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   2dc7a:	d002      	beq.n	2dc82 <scalar_max+0x12>
		return repr->max;
   2dc7c:	6858      	ldr	r0, [r3, #4]
   2dc7e:	2100      	movs	r1, #0
}
   2dc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (repr->flags & SIGNED) {
   2dc82:	68c3      	ldr	r3, [r0, #12]
   2dc84:	f012 0702 	ands.w	r7, r2, #2
   2dc88:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   2dc8c:	f04f 0401 	mov.w	r4, #1
   2dc90:	d00d      	beq.n	2dcae <scalar_max+0x3e>
		return BIT64(8 * format->size - 1) - 1;
   2dc92:	1e5d      	subs	r5, r3, #1
   2dc94:	f1c5 0220 	rsb	r2, r5, #32
   2dc98:	3b21      	subs	r3, #33	; 0x21
   2dc9a:	fa04 f103 	lsl.w	r1, r4, r3
   2dc9e:	fa24 f202 	lsr.w	r2, r4, r2
   2dca2:	4311      	orrs	r1, r2
   2dca4:	fa04 f005 	lsl.w	r0, r4, r5
	int64_t max_value = BIT64(8 * format->size) - 1;
   2dca8:	f110 30ff 	adds.w	r0, r0, #4294967295
   2dcac:	e00f      	b.n	2dcce <scalar_max+0x5e>
   2dcae:	f1a3 0620 	sub.w	r6, r3, #32
   2dcb2:	f1c3 0520 	rsb	r5, r3, #32
   2dcb6:	fa04 f106 	lsl.w	r1, r4, r6
   2dcba:	fa24 f505 	lsr.w	r5, r4, r5
	if (repr->flags & (HAS_HIGHER_THAN | HAS_INVALID)) {
   2dcbe:	f012 0f30 	tst.w	r2, #48	; 0x30
	int64_t max_value = BIT64(8 * format->size) - 1;
   2dcc2:	ea41 0105 	orr.w	r1, r1, r5
   2dcc6:	fa04 f003 	lsl.w	r0, r4, r3
	if (repr->flags & (HAS_HIGHER_THAN | HAS_INVALID)) {
   2dcca:	d003      	beq.n	2dcd4 <scalar_max+0x64>
		max_value -= 2;
   2dccc:	3803      	subs	r0, #3
		max_value -= 1;
   2dcce:	f141 31ff 	adc.w	r1, r1, #4294967295
   2dcd2:	e7d5      	b.n	2dc80 <scalar_max+0x10>
	} else if (repr->flags & HAS_UNDEFINED) {
   2dcd4:	0713      	lsls	r3, r2, #28
   2dcd6:	d5e7      	bpl.n	2dca8 <scalar_max+0x38>
		max_value -= 1;
   2dcd8:	3802      	subs	r0, #2
   2dcda:	e7f8      	b.n	2dcce <scalar_max+0x5e>

0002dcdc <sensor_status_id_encode>:
{
   2dcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((len > 0 && len <= 16) && id < 2048) {
   2dce0:	f101 38ff 	add.w	r8, r1, #4294967295
   2dce4:	fa5f f688 	uxtb.w	r6, r8
   2dce8:	2e0f      	cmp	r6, #15
{
   2dcea:	4607      	mov	r7, r0
   2dcec:	460d      	mov	r5, r1
   2dcee:	4614      	mov	r4, r2
	if ((len > 0 && len <= 16) && id < 2048) {
   2dcf0:	d814      	bhi.n	2dd1c <sensor_status_id_encode+0x40>
   2dcf2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2dcf6:	d211      	bcs.n	2dd1c <sensor_status_id_encode+0x40>
		if (net_buf_simple_tailroom(buf) < 2 + len) {
   2dcf8:	f7ff fc58 	bl	2d5ac <net_buf_simple_tailroom>
   2dcfc:	3502      	adds	r5, #2
   2dcfe:	42a8      	cmp	r0, r5
   2dd00:	d203      	bcs.n	2dd0a <sensor_status_id_encode+0x2e>
			return -ENOMEM;
   2dd02:	f06f 000b 	mvn.w	r0, #11
}
   2dd06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_add_le16(buf, ((len - 1) << 1) | (id << 5));
   2dd0a:	0161      	lsls	r1, r4, #5
   2dd0c:	ea41 0148 	orr.w	r1, r1, r8, lsl #1
   2dd10:	b289      	uxth	r1, r1
		net_buf_simple_add_le16(buf, id);
   2dd12:	4638      	mov	r0, r7
   2dd14:	f7ff fc65 	bl	2d5e2 <net_buf_simple_add_le16>
	return 0;
   2dd18:	2000      	movs	r0, #0
   2dd1a:	e7f4      	b.n	2dd06 <sensor_status_id_encode+0x2a>
		if (net_buf_simple_tailroom(buf) < 3 + len) {
   2dd1c:	4638      	mov	r0, r7
   2dd1e:	f7ff fc45 	bl	2d5ac <net_buf_simple_tailroom>
   2dd22:	3503      	adds	r5, #3
   2dd24:	42a8      	cmp	r0, r5
   2dd26:	d3ec      	bcc.n	2dd02 <sensor_status_id_encode+0x26>
						     << 1));
   2dd28:	0071      	lsls	r1, r6, #1
		net_buf_simple_add_u8(buf, BIT(0) | (((len - 1) & BIT_MASK(7))
   2dd2a:	f041 0101 	orr.w	r1, r1, #1
   2dd2e:	b2c9      	uxtb	r1, r1
   2dd30:	4638      	mov	r0, r7
   2dd32:	f7ff fc4f 	bl	2d5d4 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(buf, id);
   2dd36:	4621      	mov	r1, r4
   2dd38:	e7eb      	b.n	2dd12 <sensor_status_id_encode+0x36>

0002dd3a <sensor_ch_encode>:
{
   2dd3a:	460b      	mov	r3, r1
   2dd3c:	b410      	push	{r4}
	return format->encode(format, value, buf);
   2dd3e:	681c      	ldr	r4, [r3, #0]
{
   2dd40:	4611      	mov	r1, r2
	return format->encode(format, value, buf);
   2dd42:	4602      	mov	r2, r0
   2dd44:	4618      	mov	r0, r3
   2dd46:	4623      	mov	r3, r4
}
   2dd48:	bc10      	pop	{r4}
	return format->encode(format, value, buf);
   2dd4a:	4718      	bx	r3

0002dd4c <sensor_value_encode>:
{
   2dd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dd4e:	4606      	mov	r6, r0
   2dd50:	460d      	mov	r5, r1
   2dd52:	4617      	mov	r7, r2
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2dd54:	2400      	movs	r4, #0
   2dd56:	78eb      	ldrb	r3, [r5, #3]
   2dd58:	42a3      	cmp	r3, r4
   2dd5a:	d801      	bhi.n	2dd60 <sensor_value_encode+0x14>
	return 0;
   2dd5c:	2000      	movs	r0, #0
}
   2dd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = sensor_ch_encode(buf, type->channels[i].format,
   2dd60:	686b      	ldr	r3, [r5, #4]
   2dd62:	eb07 02c4 	add.w	r2, r7, r4, lsl #3
   2dd66:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   2dd6a:	4630      	mov	r0, r6
   2dd6c:	f7ff ffe5 	bl	2dd3a <sensor_ch_encode>
		if (err) {
   2dd70:	2800      	cmp	r0, #0
   2dd72:	d1f4      	bne.n	2dd5e <sensor_value_encode+0x12>
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2dd74:	3401      	adds	r4, #1
   2dd76:	e7ee      	b.n	2dd56 <sensor_value_encode+0xa>

0002dd78 <sensor_ch_decode>:
{
   2dd78:	b410      	push	{r4}
	return format->decode(format, buf, value);
   2dd7a:	684c      	ldr	r4, [r1, #4]
{
   2dd7c:	460b      	mov	r3, r1
	return format->decode(format, buf, value);
   2dd7e:	4601      	mov	r1, r0
   2dd80:	4618      	mov	r0, r3
   2dd82:	4623      	mov	r3, r4
}
   2dd84:	bc10      	pop	{r4}
	return format->decode(format, buf, value);
   2dd86:	4718      	bx	r3

0002dd88 <sensor_value_decode>:
{
   2dd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dd8a:	4606      	mov	r6, r0
   2dd8c:	460d      	mov	r5, r1
   2dd8e:	4617      	mov	r7, r2
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2dd90:	2400      	movs	r4, #0
   2dd92:	78eb      	ldrb	r3, [r5, #3]
   2dd94:	42a3      	cmp	r3, r4
   2dd96:	d801      	bhi.n	2dd9c <sensor_value_decode+0x14>
	return 0;
   2dd98:	2000      	movs	r0, #0
}
   2dd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = sensor_ch_decode(buf, type->channels[i].format,
   2dd9c:	686b      	ldr	r3, [r5, #4]
   2dd9e:	eb07 02c4 	add.w	r2, r7, r4, lsl #3
   2dda2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   2dda6:	4630      	mov	r0, r6
   2dda8:	f7ff ffe6 	bl	2dd78 <sensor_ch_decode>
		if (err) {
   2ddac:	2800      	cmp	r0, #0
   2ddae:	d1f4      	bne.n	2dd9a <sensor_value_decode+0x12>
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2ddb0:	3401      	adds	r4, #1
   2ddb2:	e7ee      	b.n	2dd92 <sensor_value_decode+0xa>

0002ddb4 <sensor_status_encode>:
{
   2ddb4:	b570      	push	{r4, r5, r6, lr}
	const struct bt_mesh_sensor_type *type = sensor->type;
   2ddb6:	680c      	ldr	r4, [r1, #0]
{
   2ddb8:	4616      	mov	r6, r2
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2ddba:	2300      	movs	r3, #0
   2ddbc:	78e2      	ldrb	r2, [r4, #3]
{
   2ddbe:	4605      	mov	r5, r0
	size_t size = 0;
   2ddc0:	4619      	mov	r1, r3
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2ddc2:	429a      	cmp	r2, r3
   2ddc4:	d80c      	bhi.n	2dde0 <sensor_status_encode+0x2c>
	err = sensor_status_id_encode(buf, size, type->id);
   2ddc6:	8822      	ldrh	r2, [r4, #0]
   2ddc8:	b2c9      	uxtb	r1, r1
   2ddca:	4628      	mov	r0, r5
   2ddcc:	f7ff ff86 	bl	2dcdc <sensor_status_id_encode>
	if (err) {
   2ddd0:	b968      	cbnz	r0, 2ddee <sensor_status_encode+0x3a>
	return sensor_value_encode(buf, type, values);
   2ddd2:	4632      	mov	r2, r6
   2ddd4:	4621      	mov	r1, r4
   2ddd6:	4628      	mov	r0, r5
}
   2ddd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return sensor_value_encode(buf, type, values);
   2dddc:	f7ff bfb6 	b.w	2dd4c <sensor_value_encode>
		size += type->channels[i].format->size;
   2dde0:	6860      	ldr	r0, [r4, #4]
   2dde2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2dde6:	68c0      	ldr	r0, [r0, #12]
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2dde8:	3301      	adds	r3, #1
		size += type->channels[i].format->size;
   2ddea:	4401      	add	r1, r0
   2ddec:	e7e9      	b.n	2ddc2 <sensor_status_encode+0xe>
}
   2ddee:	bd70      	pop	{r4, r5, r6, pc}

0002ddf0 <bt_mesh_sensor_value_in_column>:
	return (value->val1 > col->start.val1 ||
   2ddf0:	6803      	ldr	r3, [r0, #0]
   2ddf2:	680a      	ldr	r2, [r1, #0]
		 value->val2 >= col->start.val2)) &&
   2ddf4:	4293      	cmp	r3, r2
{
   2ddf6:	b510      	push	{r4, lr}
		 value->val2 >= col->start.val2)) &&
   2ddf8:	dc04      	bgt.n	2de04 <bt_mesh_sensor_value_in_column+0x14>
	return (value->val1 > col->start.val1 ||
   2ddfa:	d110      	bne.n	2de1e <bt_mesh_sensor_value_in_column+0x2e>
		(value->val1 == col->start.val1 &&
   2ddfc:	6844      	ldr	r4, [r0, #4]
   2ddfe:	684a      	ldr	r2, [r1, #4]
   2de00:	4294      	cmp	r4, r2
   2de02:	db0c      	blt.n	2de1e <bt_mesh_sensor_value_in_column+0x2e>
	       (value->val1 < col->end.val1 ||
   2de04:	688a      	ldr	r2, [r1, #8]
		 value->val2 >= col->start.val2)) &&
   2de06:	4293      	cmp	r3, r2
   2de08:	db07      	blt.n	2de1a <bt_mesh_sensor_value_in_column+0x2a>
	       (value->val1 < col->end.val1 ||
   2de0a:	d108      	bne.n	2de1e <bt_mesh_sensor_value_in_column+0x2e>
		(value->val1 == col->end.val1 && value->val2 <= col->end.val2));
   2de0c:	6840      	ldr	r0, [r0, #4]
   2de0e:	68cb      	ldr	r3, [r1, #12]
   2de10:	4298      	cmp	r0, r3
   2de12:	bfcc      	ite	gt
   2de14:	2000      	movgt	r0, #0
   2de16:	2001      	movle	r0, #1
}
   2de18:	bd10      	pop	{r4, pc}
		 value->val2 >= col->start.val2)) &&
   2de1a:	2001      	movs	r0, #1
   2de1c:	e7fc      	b.n	2de18 <bt_mesh_sensor_value_in_column+0x28>
   2de1e:	2000      	movs	r0, #0
   2de20:	e7fa      	b.n	2de18 <bt_mesh_sensor_value_in_column+0x28>

0002de22 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2de22:	4700      	bx	r0

0002de24 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2de24:	f000 b923 	b.w	2e06e <z_impl_k_busy_wait>

0002de28 <is_valid_address>:
    return p_reg->CODEPAGESIZE;
   2de28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
{
   2de2c:	b510      	push	{r4, lr}
   2de2e:	6914      	ldr	r4, [r2, #16]
    return p_reg->CODESIZE;
   2de30:	6953      	ldr	r3, [r2, #20]
    return flash_page_size_get() * flash_page_count_get();
   2de32:	4363      	muls	r3, r4
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2de34:	4298      	cmp	r0, r3
   2de36:	d309      	bcc.n	2de4c <is_valid_address+0x24>
    if (uicr_allowed &&
   2de38:	b131      	cbz	r1, 2de48 <is_valid_address+0x20>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   2de3a:	f1a0 2110 	sub.w	r1, r0, #268439552	; 0x10001000
    if (uicr_allowed &&
   2de3e:	f5b1 7f42 	cmp.w	r1, #776	; 0x308
   2de42:	bf2c      	ite	cs
   2de44:	2100      	movcs	r1, #0
   2de46:	2101      	movcc	r1, #1
}
   2de48:	4608      	mov	r0, r1
   2de4a:	bd10      	pop	{r4, pc}
        return true;
   2de4c:	2101      	movs	r1, #1
   2de4e:	e7fb      	b.n	2de48 <is_valid_address+0x20>

0002de50 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   2de50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2de54:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   2de56:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2de58:	4350      	muls	r0, r2
   2de5a:	4770      	bx	lr

0002de5c <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2de5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2de60:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2de62:	4770      	bx	lr

0002de64 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2de64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2de68:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2de6a:	4770      	bx	lr

0002de6c <transfer_byte>:
{
   2de6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   2de6e:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2de72:	698a      	ldr	r2, [r1, #24]
   2de74:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   2de76:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2de7a:	6a0b      	ldr	r3, [r1, #32]
   2de7c:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   2de7e:	bf3e      	ittt	cc
   2de80:	694a      	ldrcc	r2, [r1, #20]
   2de82:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   2de86:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   2de88:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   2de8a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   2de8e:	1c53      	adds	r3, r2, #1
   2de90:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   2de92:	3202      	adds	r2, #2
    if (p_cb->abort)
   2de94:	b13c      	cbz	r4, 2dea6 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2de96:	690c      	ldr	r4, [r1, #16]
   2de98:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2de9a:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   2de9c:	bf38      	it	cc
   2de9e:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2dea0:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   2dea2:	bf88      	it	hi
   2dea4:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2dea6:	690d      	ldr	r5, [r1, #16]
   2dea8:	4295      	cmp	r5, r2
   2deaa:	d905      	bls.n	2deb8 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   2deac:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   2deae:	5c9b      	ldrb	r3, [r3, r2]
   2deb0:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2deb4:	2001      	movs	r0, #1
   2deb6:	e00a      	b.n	2dece <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2deb8:	698c      	ldr	r4, [r1, #24]
   2deba:	4294      	cmp	r4, r2
   2debc:	d901      	bls.n	2dec2 <transfer_byte+0x56>
   2debe:	7fcb      	ldrb	r3, [r1, #31]
   2dec0:	e7f6      	b.n	2deb0 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2dec2:	42ab      	cmp	r3, r5
   2dec4:	d3f6      	bcc.n	2deb4 <transfer_byte+0x48>
   2dec6:	42a3      	cmp	r3, r4
   2dec8:	bf2c      	ite	cs
   2deca:	2000      	movcs	r0, #0
   2decc:	2001      	movcc	r0, #1
}
   2dece:	b003      	add	sp, #12
   2ded0:	bd30      	pop	{r4, r5, pc}

0002ded2 <nrf_gpio_pin_clear>:
{
   2ded2:	b507      	push	{r0, r1, r2, lr}
   2ded4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ded6:	a801      	add	r0, sp, #4
   2ded8:	f7f5 f818 	bl	22f0c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2dedc:	9a01      	ldr	r2, [sp, #4]
   2dede:	2301      	movs	r3, #1
   2dee0:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2dee2:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   2dee6:	b003      	add	sp, #12
   2dee8:	f85d fb04 	ldr.w	pc, [sp], #4

0002deec <nrf_gpio_pin_set>:
{
   2deec:	b507      	push	{r0, r1, r2, lr}
   2deee:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2def0:	a801      	add	r0, sp, #4
   2def2:	f7f5 f80b 	bl	22f0c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2def6:	9a01      	ldr	r2, [sp, #4]
   2def8:	2301      	movs	r3, #1
   2defa:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2defc:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   2df00:	b003      	add	sp, #12
   2df02:	f85d fb04 	ldr.w	pc, [sp], #4

0002df06 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   2df06:	f7fa bbba 	b.w	2867e <z_clock_idle_exit>

0002df0a <k_heap_init>:
{
   2df0a:	b410      	push	{r4}
   2df0c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2df10:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2df14:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2df16:	f7d7 b857 	b.w	4fc8 <sys_heap_init>

0002df1a <k_mem_slab_init>:
{
   2df1a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2df1c:	2400      	movs	r4, #0
   2df1e:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2df20:	ea41 0402 	orr.w	r4, r1, r2
   2df24:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2df28:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2df2c:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2df2e:	d10c      	bne.n	2df4a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2df30:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2df32:	42a3      	cmp	r3, r4
   2df34:	d103      	bne.n	2df3e <k_mem_slab_init+0x24>
   2df36:	e9c0 0000 	strd	r0, r0, [r0]
   2df3a:	2000      	movs	r0, #0
}
   2df3c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2df3e:	6945      	ldr	r5, [r0, #20]
   2df40:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2df42:	3401      	adds	r4, #1
		slab->free_list = p;
   2df44:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2df46:	4411      	add	r1, r2
   2df48:	e7f3      	b.n	2df32 <k_mem_slab_init+0x18>
		return -EINVAL;
   2df4a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2df4e:	e7f5      	b.n	2df3c <k_mem_slab_init+0x22>

0002df50 <z_impl_k_mutex_init>:
{
   2df50:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2df52:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2df54:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2df58:	e9c3 3300 	strd	r3, r3, [r3]
}
   2df5c:	4770      	bx	lr

0002df5e <z_queue_node_peek>:
{
   2df5e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2df60:	4604      	mov	r4, r0
   2df62:	b130      	cbz	r0, 2df72 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2df64:	6802      	ldr	r2, [r0, #0]
   2df66:	0793      	lsls	r3, r2, #30
   2df68:	d003      	beq.n	2df72 <z_queue_node_peek+0x14>
		ret = anode->data;
   2df6a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2df6c:	b109      	cbz	r1, 2df72 <z_queue_node_peek+0x14>
			k_free(anode);
   2df6e:	f000 f97f 	bl	2e270 <k_free>
}
   2df72:	4620      	mov	r0, r4
   2df74:	bd10      	pop	{r4, pc}

0002df76 <z_impl_k_queue_init>:
	list->head = NULL;
   2df76:	2300      	movs	r3, #0
	list->tail = NULL;
   2df78:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2df7c:	6083      	str	r3, [r0, #8]
   2df7e:	f100 030c 	add.w	r3, r0, #12
   2df82:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2df86:	f100 0314 	add.w	r3, r0, #20
   2df8a:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2df8e:	4770      	bx	lr

0002df90 <k_queue_append>:
{
   2df90:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2df92:	2301      	movs	r3, #1
   2df94:	9300      	str	r3, [sp, #0]
   2df96:	2300      	movs	r3, #0
   2df98:	460a      	mov	r2, r1
   2df9a:	4619      	mov	r1, r3
   2df9c:	f7f5 fe6c 	bl	23c78 <queue_insert>
}
   2dfa0:	b003      	add	sp, #12
   2dfa2:	f85d fb04 	ldr.w	pc, [sp], #4

0002dfa6 <k_queue_prepend>:
{
   2dfa6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2dfa8:	2300      	movs	r3, #0
   2dfaa:	460a      	mov	r2, r1
   2dfac:	9300      	str	r3, [sp, #0]
   2dfae:	4619      	mov	r1, r3
   2dfb0:	f7f5 fe62 	bl	23c78 <queue_insert>
}
   2dfb4:	b003      	add	sp, #12
   2dfb6:	f85d fb04 	ldr.w	pc, [sp], #4

0002dfba <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2dfba:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2dfbe:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2dfc2:	4298      	cmp	r0, r3
   2dfc4:	bfac      	ite	ge
   2dfc6:	2000      	movge	r0, #0
   2dfc8:	2001      	movlt	r0, #1
   2dfca:	4770      	bx	lr

0002dfcc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2dfcc:	4603      	mov	r3, r0
   2dfce:	b920      	cbnz	r0, 2dfda <z_reschedule_irqlock+0xe>
   2dfd0:	f3ef 8205 	mrs	r2, IPSR
   2dfd4:	b90a      	cbnz	r2, 2dfda <z_reschedule_irqlock+0xe>
   2dfd6:	f7d9 bd09 	b.w	79ec <arch_swap>
   2dfda:	f383 8811 	msr	BASEPRI, r3
   2dfde:	f3bf 8f6f 	isb	sy
}
   2dfe2:	4770      	bx	lr

0002dfe4 <z_reschedule_unlocked>:
	__asm__ volatile(
   2dfe4:	f04f 0320 	mov.w	r3, #32
   2dfe8:	f3ef 8011 	mrs	r0, BASEPRI
   2dfec:	f383 8811 	msr	BASEPRI, r3
   2dff0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2dff4:	f7ff bfea 	b.w	2dfcc <z_reschedule_irqlock>

0002dff8 <unpend_thread_no_timeout>:
{
   2dff8:	b510      	push	{r4, lr}
   2dffa:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2dffc:	3008      	adds	r0, #8
   2dffe:	f7f5 ffa9 	bl	23f54 <pended_on.isra.19>
   2e002:	4621      	mov	r1, r4
   2e004:	f7f6 f8ae 	bl	24164 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2e008:	7b63      	ldrb	r3, [r4, #13]
   2e00a:	f023 0302 	bic.w	r3, r3, #2
   2e00e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2e010:	2300      	movs	r3, #0
   2e012:	60a3      	str	r3, [r4, #8]
}
   2e014:	bd10      	pop	{r4, pc}

0002e016 <z_priq_dumb_best>:
	return list->head == list;
   2e016:	6803      	ldr	r3, [r0, #0]
}
   2e018:	4298      	cmp	r0, r3
   2e01a:	bf14      	ite	ne
   2e01c:	4618      	movne	r0, r3
   2e01e:	2000      	moveq	r0, #0
   2e020:	4770      	bx	lr

0002e022 <z_unpend_all>:
{
   2e022:	b538      	push	{r3, r4, r5, lr}
   2e024:	4605      	mov	r5, r0
	int need_sched = 0;
   2e026:	2000      	movs	r0, #0
   2e028:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e02a:	42a5      	cmp	r5, r4
   2e02c:	d000      	beq.n	2e030 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2e02e:	b904      	cbnz	r4, 2e032 <z_unpend_all+0x10>
}
   2e030:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2e032:	4620      	mov	r0, r4
   2e034:	f7f6 f8c2 	bl	241bc <z_unpend_thread>
		z_ready_thread(thread);
   2e038:	4620      	mov	r0, r4
   2e03a:	f7f6 f9d7 	bl	243ec <z_ready_thread>
		need_sched = 1;
   2e03e:	2001      	movs	r0, #1
   2e040:	e7f2      	b.n	2e028 <z_unpend_all+0x6>

0002e042 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2e042:	b15a      	cbz	r2, 2e05c <z_impl_k_sem_init+0x1a>
   2e044:	428a      	cmp	r2, r1
   2e046:	d309      	bcc.n	2e05c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2e048:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2e04c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2e050:	e9c0 0000 	strd	r0, r0, [r0]
   2e054:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2e058:	2000      	movs	r0, #0
   2e05a:	4770      	bx	lr
		return -EINVAL;
   2e05c:	f06f 0015 	mvn.w	r0, #21
}
   2e060:	4770      	bx	lr

0002e062 <k_is_in_isr>:
   2e062:	f3ef 8005 	mrs	r0, IPSR
}
   2e066:	3000      	adds	r0, #0
   2e068:	bf18      	it	ne
   2e06a:	2001      	movne	r0, #1
   2e06c:	4770      	bx	lr

0002e06e <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   2e06e:	b108      	cbz	r0, 2e074 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   2e070:	f7da ba3e 	b.w	84f0 <arch_busy_wait>
}
   2e074:	4770      	bx	lr

0002e076 <z_impl_k_thread_name_set>:
}
   2e076:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2e07a:	4770      	bx	lr

0002e07c <k_thread_name_get>:
}
   2e07c:	2000      	movs	r0, #0
   2e07e:	4770      	bx	lr

0002e080 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2e080:	f7f6 b9ea 	b.w	24458 <z_sched_start>

0002e084 <k_work_submit_to_queue>:
{
   2e084:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e086:	f101 0308 	add.w	r3, r1, #8
   2e08a:	f3bf 8f5b 	dmb	ish
   2e08e:	e853 2f00 	ldrex	r2, [r3]
   2e092:	f042 0c01 	orr.w	ip, r2, #1
   2e096:	e843 ce00 	strex	lr, ip, [r3]
   2e09a:	f1be 0f00 	cmp.w	lr, #0
   2e09e:	d1f6      	bne.n	2e08e <k_work_submit_to_queue+0xa>
   2e0a0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2e0a4:	07d3      	lsls	r3, r2, #31
   2e0a6:	d403      	bmi.n	2e0b0 <k_work_submit_to_queue+0x2c>
}
   2e0a8:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2e0ac:	f7ff bf70 	b.w	2df90 <k_queue_append>
}
   2e0b0:	f85d fb04 	ldr.w	pc, [sp], #4

0002e0b4 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2e0b4:	f1a0 0110 	sub.w	r1, r0, #16
   2e0b8:	6980      	ldr	r0, [r0, #24]
   2e0ba:	f7ff bfe3 	b.w	2e084 <k_work_submit_to_queue>

0002e0be <work_cancel>:
{
   2e0be:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e0c0:	f3bf 8f5b 	dmb	ish
   2e0c4:	6883      	ldr	r3, [r0, #8]
   2e0c6:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   2e0ca:	07db      	lsls	r3, r3, #31
{
   2e0cc:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2e0ce:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   2e0d2:	d532      	bpl.n	2e13a <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2e0d4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2e0d6:	6813      	ldr	r3, [r2, #0]
   2e0d8:	2100      	movs	r1, #0
   2e0da:	b913      	cbnz	r3, 2e0e2 <work_cancel+0x24>
			return -EINVAL;
   2e0dc:	f06f 0015 	mvn.w	r0, #21
}
   2e0e0:	bd70      	pop	{r4, r5, r6, pc}
   2e0e2:	429c      	cmp	r4, r3
   2e0e4:	d124      	bne.n	2e130 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   2e0e6:	6823      	ldr	r3, [r4, #0]
   2e0e8:	6856      	ldr	r6, [r2, #4]
   2e0ea:	f023 0003 	bic.w	r0, r3, #3
   2e0ee:	b9b1      	cbnz	r1, 2e11e <work_cancel+0x60>
   2e0f0:	42b4      	cmp	r4, r6
	list->head = node;
   2e0f2:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2e0f4:	d100      	bne.n	2e0f8 <work_cancel+0x3a>
	list->tail = node;
   2e0f6:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e0f8:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e0fa:	f003 0303 	and.w	r3, r3, #3
   2e0fe:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2e100:	2000      	movs	r0, #0
   2e102:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e104:	f3bf 8f5b 	dmb	ish
   2e108:	e855 3f00 	ldrex	r3, [r5]
   2e10c:	f023 0301 	bic.w	r3, r3, #1
   2e110:	e845 3200 	strex	r2, r3, [r5]
   2e114:	2a00      	cmp	r2, #0
   2e116:	d1f7      	bne.n	2e108 <work_cancel+0x4a>
   2e118:	f3bf 8f5b 	dmb	ish
   2e11c:	e7e0      	b.n	2e0e0 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e11e:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e120:	f003 0303 	and.w	r3, r3, #3
   2e124:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   2e126:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e128:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2e12a:	bf08      	it	eq
   2e12c:	6051      	streq	r1, [r2, #4]
   2e12e:	e7e3      	b.n	2e0f8 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2e130:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2e132:	4619      	mov	r1, r3
   2e134:	f020 0303 	bic.w	r3, r0, #3
   2e138:	e7cf      	b.n	2e0da <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   2e13a:	3010      	adds	r0, #16
   2e13c:	f7f7 fbb8 	bl	258b0 <z_abort_timeout>
		if (err) {
   2e140:	2800      	cmp	r0, #0
   2e142:	d0dd      	beq.n	2e100 <work_cancel+0x42>
			return -EALREADY;
   2e144:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2e148:	e7ca      	b.n	2e0e0 <work_cancel+0x22>

0002e14a <k_delayed_work_pending>:

bool k_delayed_work_pending(struct k_delayed_work *work)
{
	return !z_is_inactive_timeout(&work->timeout) ||
   2e14a:	6903      	ldr	r3, [r0, #16]
   2e14c:	b93b      	cbnz	r3, 2e15e <k_delayed_work_pending+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e14e:	f3bf 8f5b 	dmb	ish
   2e152:	6880      	ldr	r0, [r0, #8]
   2e154:	f3bf 8f5b 	dmb	ish
   2e158:	f000 0001 	and.w	r0, r0, #1
   2e15c:	4770      	bx	lr
   2e15e:	2001      	movs	r0, #1
	       k_work_pending(&work->work);
}
   2e160:	4770      	bx	lr

0002e162 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2e162:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2e164:	f7f7 fd3e 	bl	25be4 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2e168:	bd08      	pop	{r3, pc}

0002e16a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2e16a:	f7f7 bd3b 	b.w	25be4 <z_tick_get>

0002e16e <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   2e16e:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2e170:	1c4b      	adds	r3, r1, #1
   2e172:	bf08      	it	eq
   2e174:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2e178:	4604      	mov	r4, r0
   2e17a:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2e17c:	d013      	beq.n	2e1a6 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2e17e:	ea54 0105 	orrs.w	r1, r4, r5
   2e182:	d103      	bne.n	2e18c <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   2e184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2e188:	f7f7 bd2c 	b.w	25be4 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2e18c:	f06f 0101 	mvn.w	r1, #1
   2e190:	1a0a      	subs	r2, r1, r0
   2e192:	f04f 31ff 	mov.w	r1, #4294967295
   2e196:	eb61 0305 	sbc.w	r3, r1, r5
   2e19a:	2a00      	cmp	r2, #0
   2e19c:	f173 0100 	sbcs.w	r1, r3, #0
   2e1a0:	db02      	blt.n	2e1a8 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2e1a2:	4610      	mov	r0, r2
   2e1a4:	4619      	mov	r1, r3
}
   2e1a6:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2e1a8:	f7f7 fd1c 	bl	25be4 <z_tick_get>
   2e1ac:	2c01      	cmp	r4, #1
   2e1ae:	f175 0300 	sbcs.w	r3, r5, #0
   2e1b2:	bfbc      	itt	lt
   2e1b4:	2401      	movlt	r4, #1
   2e1b6:	2500      	movlt	r5, #0
   2e1b8:	1820      	adds	r0, r4, r0
   2e1ba:	eb45 0101 	adc.w	r1, r5, r1
   2e1be:	e7f2      	b.n	2e1a6 <z_timeout_end_calc+0x38>

0002e1c0 <k_work_submit_to_queue>:
{
   2e1c0:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e1c2:	f101 0308 	add.w	r3, r1, #8
   2e1c6:	f3bf 8f5b 	dmb	ish
   2e1ca:	e853 2f00 	ldrex	r2, [r3]
   2e1ce:	f042 0c01 	orr.w	ip, r2, #1
   2e1d2:	e843 ce00 	strex	lr, ip, [r3]
   2e1d6:	f1be 0f00 	cmp.w	lr, #0
   2e1da:	d1f6      	bne.n	2e1ca <k_work_submit_to_queue+0xa>
   2e1dc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2e1e0:	07d3      	lsls	r3, r2, #31
   2e1e2:	d403      	bmi.n	2e1ec <k_work_submit_to_queue+0x2c>
}
   2e1e4:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2e1e8:	f7ff bed2 	b.w	2df90 <k_queue_append>
}
   2e1ec:	f85d fb04 	ldr.w	pc, [sp], #4

0002e1f0 <add_event>:
{
   2e1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e1f2:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2e1f4:	e9d0 2300 	ldrd	r2, r3, [r0]
   2e1f8:	4290      	cmp	r0, r2
   2e1fa:	4604      	mov	r4, r0
   2e1fc:	460d      	mov	r5, r1
   2e1fe:	d106      	bne.n	2e20e <add_event+0x1e>
	node->prev = list->tail;
   2e200:	6863      	ldr	r3, [r4, #4]
   2e202:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2e204:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2e206:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2e208:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2e20a:	6065      	str	r5, [r4, #4]
}
   2e20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2e20e:	2b00      	cmp	r3, #0
   2e210:	d0f6      	beq.n	2e200 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2e212:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2e214:	b100      	cbz	r0, 2e218 <add_event+0x28>
   2e216:	386c      	subs	r0, #108	; 0x6c
   2e218:	b107      	cbz	r7, 2e21c <add_event+0x2c>
   2e21a:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2e21c:	4639      	mov	r1, r7
   2e21e:	f7ff fecc 	bl	2dfba <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2e222:	2800      	cmp	r0, #0
   2e224:	d1ec      	bne.n	2e200 <add_event+0x10>
	return list->head == list;
   2e226:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e228:	42b4      	cmp	r4, r6
   2e22a:	d0e9      	beq.n	2e200 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2e22c:	2e00      	cmp	r6, #0
   2e22e:	d0e7      	beq.n	2e200 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2e230:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2e232:	b101      	cbz	r1, 2e236 <add_event+0x46>
   2e234:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2e236:	4638      	mov	r0, r7
   2e238:	f7ff febf 	bl	2dfba <z_is_t1_higher_prio_than_t2>
   2e23c:	b128      	cbz	r0, 2e24a <add_event+0x5a>
	node->prev = successor->prev;
   2e23e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2e240:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2e244:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2e246:	6075      	str	r5, [r6, #4]
			return;
   2e248:	e7e0      	b.n	2e20c <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2e24a:	6863      	ldr	r3, [r4, #4]
   2e24c:	429e      	cmp	r6, r3
   2e24e:	d0d7      	beq.n	2e200 <add_event+0x10>
   2e250:	6836      	ldr	r6, [r6, #0]
   2e252:	e7eb      	b.n	2e22c <add_event+0x3c>

0002e254 <z_handle_obj_poll_events>:
	return list->head == list;
   2e254:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2e256:	4298      	cmp	r0, r3
   2e258:	d009      	beq.n	2e26e <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2e25a:	e9d3 2000 	ldrd	r2, r0, [r3]
   2e25e:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   2e260:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   2e262:	2200      	movs	r2, #0
	node->prev = NULL;
   2e264:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
   2e268:	4618      	mov	r0, r3
   2e26a:	f7f7 bd81 	b.w	25d70 <signal_poll_event>
}
   2e26e:	4770      	bx	lr

0002e270 <k_free>:
	if (ptr != NULL) {
   2e270:	b138      	cbz	r0, 2e282 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   2e272:	1f03      	subs	r3, r0, #4
   2e274:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   2e276:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   2e27a:	1c42      	adds	r2, r0, #1
   2e27c:	d0fa      	beq.n	2e274 <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   2e27e:	f7f5 ba67 	b.w	23750 <k_heap_free>
}
   2e282:	4770      	bx	lr

0002e284 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2e284:	4770      	bx	lr

0002e286 <abs>:
   2e286:	2800      	cmp	r0, #0
   2e288:	bfb8      	it	lt
   2e28a:	4240      	neglt	r0, r0
   2e28c:	4770      	bx	lr

0002e28e <memcmp>:
   2e28e:	b530      	push	{r4, r5, lr}
   2e290:	3901      	subs	r1, #1
   2e292:	2400      	movs	r4, #0
   2e294:	42a2      	cmp	r2, r4
   2e296:	d101      	bne.n	2e29c <memcmp+0xe>
   2e298:	2000      	movs	r0, #0
   2e29a:	e005      	b.n	2e2a8 <memcmp+0x1a>
   2e29c:	5d03      	ldrb	r3, [r0, r4]
   2e29e:	3401      	adds	r4, #1
   2e2a0:	5d0d      	ldrb	r5, [r1, r4]
   2e2a2:	42ab      	cmp	r3, r5
   2e2a4:	d0f6      	beq.n	2e294 <memcmp+0x6>
   2e2a6:	1b58      	subs	r0, r3, r5
   2e2a8:	bd30      	pop	{r4, r5, pc}

0002e2aa <memcpy>:
   2e2aa:	440a      	add	r2, r1
   2e2ac:	4291      	cmp	r1, r2
   2e2ae:	f100 33ff 	add.w	r3, r0, #4294967295
   2e2b2:	d100      	bne.n	2e2b6 <memcpy+0xc>
   2e2b4:	4770      	bx	lr
   2e2b6:	b510      	push	{r4, lr}
   2e2b8:	f811 4b01 	ldrb.w	r4, [r1], #1
   2e2bc:	f803 4f01 	strb.w	r4, [r3, #1]!
   2e2c0:	4291      	cmp	r1, r2
   2e2c2:	d1f9      	bne.n	2e2b8 <memcpy+0xe>
   2e2c4:	bd10      	pop	{r4, pc}

0002e2c6 <__memcpy_chk>:
   2e2c6:	429a      	cmp	r2, r3
   2e2c8:	b508      	push	{r3, lr}
   2e2ca:	d901      	bls.n	2e2d0 <__memcpy_chk+0xa>
   2e2cc:	f7da f8d4 	bl	8478 <__chk_fail>
   2e2d0:	4281      	cmp	r1, r0
   2e2d2:	d804      	bhi.n	2e2de <__memcpy_chk+0x18>
   2e2d4:	188b      	adds	r3, r1, r2
   2e2d6:	4298      	cmp	r0, r3
   2e2d8:	d3f8      	bcc.n	2e2cc <__memcpy_chk+0x6>
   2e2da:	4281      	cmp	r1, r0
   2e2dc:	d102      	bne.n	2e2e4 <__memcpy_chk+0x1e>
   2e2de:	1883      	adds	r3, r0, r2
   2e2e0:	4299      	cmp	r1, r3
   2e2e2:	d3f3      	bcc.n	2e2cc <__memcpy_chk+0x6>
   2e2e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2e2e8:	f7ff bfdf 	b.w	2e2aa <memcpy>

0002e2ec <memmove>:
   2e2ec:	4288      	cmp	r0, r1
   2e2ee:	b510      	push	{r4, lr}
   2e2f0:	eb01 0302 	add.w	r3, r1, r2
   2e2f4:	d902      	bls.n	2e2fc <memmove+0x10>
   2e2f6:	4283      	cmp	r3, r0
   2e2f8:	461c      	mov	r4, r3
   2e2fa:	d807      	bhi.n	2e30c <memmove+0x20>
   2e2fc:	1e42      	subs	r2, r0, #1
   2e2fe:	4299      	cmp	r1, r3
   2e300:	d008      	beq.n	2e314 <memmove+0x28>
   2e302:	f811 4b01 	ldrb.w	r4, [r1], #1
   2e306:	f802 4f01 	strb.w	r4, [r2, #1]!
   2e30a:	e7f8      	b.n	2e2fe <memmove+0x12>
   2e30c:	1883      	adds	r3, r0, r2
   2e30e:	1a9a      	subs	r2, r3, r2
   2e310:	429a      	cmp	r2, r3
   2e312:	d100      	bne.n	2e316 <memmove+0x2a>
   2e314:	bd10      	pop	{r4, pc}
   2e316:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   2e31a:	f803 1d01 	strb.w	r1, [r3, #-1]!
   2e31e:	e7f7      	b.n	2e310 <memmove+0x24>

0002e320 <memset>:
   2e320:	4402      	add	r2, r0
   2e322:	4603      	mov	r3, r0
   2e324:	4293      	cmp	r3, r2
   2e326:	d100      	bne.n	2e32a <memset+0xa>
   2e328:	4770      	bx	lr
   2e32a:	f803 1b01 	strb.w	r1, [r3], #1
   2e32e:	e7f9      	b.n	2e324 <memset+0x4>

0002e330 <__memset_chk>:
   2e330:	429a      	cmp	r2, r3
   2e332:	b508      	push	{r3, lr}
   2e334:	d901      	bls.n	2e33a <__memset_chk+0xa>
   2e336:	f7da f89f 	bl	8478 <__chk_fail>
   2e33a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2e33e:	f7ff bfef 	b.w	2e320 <memset>

0002e342 <__cvt>:
   2e342:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e346:	b088      	sub	sp, #32
   2e348:	2b00      	cmp	r3, #0
   2e34a:	9f14      	ldr	r7, [sp, #80]	; 0x50
   2e34c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   2e34e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   2e352:	461e      	mov	r6, r3
   2e354:	4614      	mov	r4, r2
   2e356:	bfb8      	it	lt
   2e358:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   2e35c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2e35e:	f027 0720 	bic.w	r7, r7, #32
   2e362:	bfb6      	itet	lt
   2e364:	461e      	movlt	r6, r3
   2e366:	2300      	movge	r3, #0
   2e368:	232d      	movlt	r3, #45	; 0x2d
   2e36a:	2f46      	cmp	r7, #70	; 0x46
   2e36c:	7013      	strb	r3, [r2, #0]
   2e36e:	d004      	beq.n	2e37a <__cvt+0x38>
   2e370:	2f45      	cmp	r7, #69	; 0x45
   2e372:	d100      	bne.n	2e376 <__cvt+0x34>
   2e374:	3501      	adds	r5, #1
   2e376:	2302      	movs	r3, #2
   2e378:	e000      	b.n	2e37c <__cvt+0x3a>
   2e37a:	2303      	movs	r3, #3
   2e37c:	aa07      	add	r2, sp, #28
   2e37e:	9204      	str	r2, [sp, #16]
   2e380:	aa06      	add	r2, sp, #24
   2e382:	e9cd a202 	strd	sl, r2, [sp, #8]
   2e386:	e9cd 3500 	strd	r3, r5, [sp]
   2e38a:	4622      	mov	r2, r4
   2e38c:	4633      	mov	r3, r6
   2e38e:	f7d4 ff9f 	bl	32d0 <_dtoa_r>
   2e392:	2f47      	cmp	r7, #71	; 0x47
   2e394:	4680      	mov	r8, r0
   2e396:	d102      	bne.n	2e39e <__cvt+0x5c>
   2e398:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2e39a:	07db      	lsls	r3, r3, #31
   2e39c:	d522      	bpl.n	2e3e4 <__cvt+0xa2>
   2e39e:	2f46      	cmp	r7, #70	; 0x46
   2e3a0:	eb08 0905 	add.w	r9, r8, r5
   2e3a4:	d111      	bne.n	2e3ca <__cvt+0x88>
   2e3a6:	f898 3000 	ldrb.w	r3, [r8]
   2e3aa:	2b30      	cmp	r3, #48	; 0x30
   2e3ac:	d10a      	bne.n	2e3c4 <__cvt+0x82>
   2e3ae:	2200      	movs	r2, #0
   2e3b0:	2300      	movs	r3, #0
   2e3b2:	4620      	mov	r0, r4
   2e3b4:	4631      	mov	r1, r6
   2e3b6:	f7d3 fcd5 	bl	1d64 <__aeabi_dcmpeq>
   2e3ba:	b918      	cbnz	r0, 2e3c4 <__cvt+0x82>
   2e3bc:	f1c5 0501 	rsb	r5, r5, #1
   2e3c0:	f8ca 5000 	str.w	r5, [sl]
   2e3c4:	f8da 3000 	ldr.w	r3, [sl]
   2e3c8:	4499      	add	r9, r3
   2e3ca:	2200      	movs	r2, #0
   2e3cc:	2300      	movs	r3, #0
   2e3ce:	4620      	mov	r0, r4
   2e3d0:	4631      	mov	r1, r6
   2e3d2:	f7d3 fcc7 	bl	1d64 <__aeabi_dcmpeq>
   2e3d6:	b108      	cbz	r0, 2e3dc <__cvt+0x9a>
   2e3d8:	f8cd 901c 	str.w	r9, [sp, #28]
   2e3dc:	2230      	movs	r2, #48	; 0x30
   2e3de:	9b07      	ldr	r3, [sp, #28]
   2e3e0:	454b      	cmp	r3, r9
   2e3e2:	d308      	bcc.n	2e3f6 <__cvt+0xb4>
   2e3e4:	9b07      	ldr	r3, [sp, #28]
   2e3e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2e3e8:	eba3 0308 	sub.w	r3, r3, r8
   2e3ec:	4640      	mov	r0, r8
   2e3ee:	6013      	str	r3, [r2, #0]
   2e3f0:	b008      	add	sp, #32
   2e3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e3f6:	1c59      	adds	r1, r3, #1
   2e3f8:	9107      	str	r1, [sp, #28]
   2e3fa:	701a      	strb	r2, [r3, #0]
   2e3fc:	e7ef      	b.n	2e3de <__cvt+0x9c>

0002e3fe <__exponent>:
   2e3fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e400:	2900      	cmp	r1, #0
   2e402:	bfba      	itte	lt
   2e404:	4249      	neglt	r1, r1
   2e406:	232d      	movlt	r3, #45	; 0x2d
   2e408:	232b      	movge	r3, #43	; 0x2b
   2e40a:	2909      	cmp	r1, #9
   2e40c:	7002      	strb	r2, [r0, #0]
   2e40e:	7043      	strb	r3, [r0, #1]
   2e410:	dd21      	ble.n	2e456 <__exponent+0x58>
   2e412:	f10d 0307 	add.w	r3, sp, #7
   2e416:	461f      	mov	r7, r3
   2e418:	260a      	movs	r6, #10
   2e41a:	fb91 f2f6 	sdiv	r2, r1, r6
   2e41e:	fb06 1412 	mls	r4, r6, r2, r1
   2e422:	3430      	adds	r4, #48	; 0x30
   2e424:	2963      	cmp	r1, #99	; 0x63
   2e426:	f103 35ff 	add.w	r5, r3, #4294967295
   2e42a:	f803 4c01 	strb.w	r4, [r3, #-1]
   2e42e:	dc0a      	bgt.n	2e446 <__exponent+0x48>
   2e430:	3230      	adds	r2, #48	; 0x30
   2e432:	f805 2c01 	strb.w	r2, [r5, #-1]
   2e436:	3b02      	subs	r3, #2
   2e438:	1c82      	adds	r2, r0, #2
   2e43a:	42bb      	cmp	r3, r7
   2e43c:	4614      	mov	r4, r2
   2e43e:	d305      	bcc.n	2e44c <__exponent+0x4e>
   2e440:	1a20      	subs	r0, r4, r0
   2e442:	b003      	add	sp, #12
   2e444:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e446:	462b      	mov	r3, r5
   2e448:	4611      	mov	r1, r2
   2e44a:	e7e6      	b.n	2e41a <__exponent+0x1c>
   2e44c:	f813 1b01 	ldrb.w	r1, [r3], #1
   2e450:	f802 1b01 	strb.w	r1, [r2], #1
   2e454:	e7f1      	b.n	2e43a <__exponent+0x3c>
   2e456:	2330      	movs	r3, #48	; 0x30
   2e458:	4419      	add	r1, r3
   2e45a:	7083      	strb	r3, [r0, #2]
   2e45c:	1d04      	adds	r4, r0, #4
   2e45e:	70c1      	strb	r1, [r0, #3]
   2e460:	e7ee      	b.n	2e440 <__exponent+0x42>

0002e462 <_printf_common>:
   2e462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e466:	4691      	mov	r9, r2
   2e468:	461f      	mov	r7, r3
   2e46a:	688a      	ldr	r2, [r1, #8]
   2e46c:	690b      	ldr	r3, [r1, #16]
   2e46e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2e472:	4293      	cmp	r3, r2
   2e474:	bfb8      	it	lt
   2e476:	4613      	movlt	r3, r2
   2e478:	f8c9 3000 	str.w	r3, [r9]
   2e47c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2e480:	4606      	mov	r6, r0
   2e482:	460c      	mov	r4, r1
   2e484:	b112      	cbz	r2, 2e48c <_printf_common+0x2a>
   2e486:	3301      	adds	r3, #1
   2e488:	f8c9 3000 	str.w	r3, [r9]
   2e48c:	6823      	ldr	r3, [r4, #0]
   2e48e:	0699      	lsls	r1, r3, #26
   2e490:	bf42      	ittt	mi
   2e492:	f8d9 3000 	ldrmi.w	r3, [r9]
   2e496:	3302      	addmi	r3, #2
   2e498:	f8c9 3000 	strmi.w	r3, [r9]
   2e49c:	6825      	ldr	r5, [r4, #0]
   2e49e:	f015 0506 	ands.w	r5, r5, #6
   2e4a2:	d107      	bne.n	2e4b4 <_printf_common+0x52>
   2e4a4:	f104 0a19 	add.w	sl, r4, #25
   2e4a8:	68e3      	ldr	r3, [r4, #12]
   2e4aa:	f8d9 2000 	ldr.w	r2, [r9]
   2e4ae:	1a9b      	subs	r3, r3, r2
   2e4b0:	42ab      	cmp	r3, r5
   2e4b2:	dc28      	bgt.n	2e506 <_printf_common+0xa4>
   2e4b4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   2e4b8:	6822      	ldr	r2, [r4, #0]
   2e4ba:	3300      	adds	r3, #0
   2e4bc:	bf18      	it	ne
   2e4be:	2301      	movne	r3, #1
   2e4c0:	0692      	lsls	r2, r2, #26
   2e4c2:	d42d      	bmi.n	2e520 <_printf_common+0xbe>
   2e4c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2e4c8:	4639      	mov	r1, r7
   2e4ca:	4630      	mov	r0, r6
   2e4cc:	47c0      	blx	r8
   2e4ce:	3001      	adds	r0, #1
   2e4d0:	d020      	beq.n	2e514 <_printf_common+0xb2>
   2e4d2:	6823      	ldr	r3, [r4, #0]
   2e4d4:	68e5      	ldr	r5, [r4, #12]
   2e4d6:	f8d9 2000 	ldr.w	r2, [r9]
   2e4da:	f003 0306 	and.w	r3, r3, #6
   2e4de:	2b04      	cmp	r3, #4
   2e4e0:	bf08      	it	eq
   2e4e2:	1aad      	subeq	r5, r5, r2
   2e4e4:	68a3      	ldr	r3, [r4, #8]
   2e4e6:	6922      	ldr	r2, [r4, #16]
   2e4e8:	bf0c      	ite	eq
   2e4ea:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2e4ee:	2500      	movne	r5, #0
   2e4f0:	4293      	cmp	r3, r2
   2e4f2:	bfc4      	itt	gt
   2e4f4:	1a9b      	subgt	r3, r3, r2
   2e4f6:	18ed      	addgt	r5, r5, r3
   2e4f8:	f04f 0900 	mov.w	r9, #0
   2e4fc:	341a      	adds	r4, #26
   2e4fe:	454d      	cmp	r5, r9
   2e500:	d11a      	bne.n	2e538 <_printf_common+0xd6>
   2e502:	2000      	movs	r0, #0
   2e504:	e008      	b.n	2e518 <_printf_common+0xb6>
   2e506:	2301      	movs	r3, #1
   2e508:	4652      	mov	r2, sl
   2e50a:	4639      	mov	r1, r7
   2e50c:	4630      	mov	r0, r6
   2e50e:	47c0      	blx	r8
   2e510:	3001      	adds	r0, #1
   2e512:	d103      	bne.n	2e51c <_printf_common+0xba>
   2e514:	f04f 30ff 	mov.w	r0, #4294967295
   2e518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e51c:	3501      	adds	r5, #1
   2e51e:	e7c3      	b.n	2e4a8 <_printf_common+0x46>
   2e520:	18e1      	adds	r1, r4, r3
   2e522:	1c5a      	adds	r2, r3, #1
   2e524:	2030      	movs	r0, #48	; 0x30
   2e526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2e52a:	4422      	add	r2, r4
   2e52c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2e530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2e534:	3302      	adds	r3, #2
   2e536:	e7c5      	b.n	2e4c4 <_printf_common+0x62>
   2e538:	2301      	movs	r3, #1
   2e53a:	4622      	mov	r2, r4
   2e53c:	4639      	mov	r1, r7
   2e53e:	4630      	mov	r0, r6
   2e540:	47c0      	blx	r8
   2e542:	3001      	adds	r0, #1
   2e544:	d0e6      	beq.n	2e514 <_printf_common+0xb2>
   2e546:	f109 0901 	add.w	r9, r9, #1
   2e54a:	e7d8      	b.n	2e4fe <_printf_common+0x9c>

0002e54c <__strcat_chk>:
   2e54c:	b538      	push	{r3, r4, r5, lr}
   2e54e:	4604      	mov	r4, r0
   2e550:	4623      	mov	r3, r4
   2e552:	f814 5b01 	ldrb.w	r5, [r4], #1
   2e556:	b935      	cbnz	r5, 2e566 <__strcat_chk+0x1a>
   2e558:	3901      	subs	r1, #1
   2e55a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2e55e:	b93c      	cbnz	r4, 2e570 <__strcat_chk+0x24>
   2e560:	b112      	cbz	r2, 2e568 <__strcat_chk+0x1c>
   2e562:	701c      	strb	r4, [r3, #0]
   2e564:	bd38      	pop	{r3, r4, r5, pc}
   2e566:	b90a      	cbnz	r2, 2e56c <__strcat_chk+0x20>
   2e568:	f7d9 ff86 	bl	8478 <__chk_fail>
   2e56c:	3a01      	subs	r2, #1
   2e56e:	e7ef      	b.n	2e550 <__strcat_chk+0x4>
   2e570:	2a00      	cmp	r2, #0
   2e572:	d0f9      	beq.n	2e568 <__strcat_chk+0x1c>
   2e574:	f803 4b01 	strb.w	r4, [r3], #1
   2e578:	3a01      	subs	r2, #1
   2e57a:	e7ee      	b.n	2e55a <__strcat_chk+0xe>

0002e57c <strcpy>:
   2e57c:	4603      	mov	r3, r0
   2e57e:	f811 2b01 	ldrb.w	r2, [r1], #1
   2e582:	f803 2b01 	strb.w	r2, [r3], #1
   2e586:	2a00      	cmp	r2, #0
   2e588:	d1f9      	bne.n	2e57e <strcpy+0x2>
   2e58a:	4770      	bx	lr

0002e58c <__strncat_chk>:
   2e58c:	b570      	push	{r4, r5, r6, lr}
   2e58e:	b1b2      	cbz	r2, 2e5be <__strncat_chk+0x32>
   2e590:	429a      	cmp	r2, r3
   2e592:	d815      	bhi.n	2e5c0 <__strncat_chk+0x34>
   2e594:	4604      	mov	r4, r0
   2e596:	4625      	mov	r5, r4
   2e598:	f815 6b01 	ldrb.w	r6, [r5], #1
   2e59c:	b996      	cbnz	r6, 2e5c4 <__strncat_chk+0x38>
   2e59e:	440a      	add	r2, r1
   2e5a0:	f811 6b01 	ldrb.w	r6, [r1], #1
   2e5a4:	7026      	strb	r6, [r4, #0]
   2e5a6:	4625      	mov	r5, r4
   2e5a8:	3401      	adds	r4, #1
   2e5aa:	b12e      	cbz	r6, 2e5b8 <__strncat_chk+0x2c>
   2e5ac:	1e5e      	subs	r6, r3, #1
   2e5ae:	b13b      	cbz	r3, 2e5c0 <__strncat_chk+0x34>
   2e5b0:	4291      	cmp	r1, r2
   2e5b2:	4625      	mov	r5, r4
   2e5b4:	4633      	mov	r3, r6
   2e5b6:	d1f3      	bne.n	2e5a0 <__strncat_chk+0x14>
   2e5b8:	b113      	cbz	r3, 2e5c0 <__strncat_chk+0x34>
   2e5ba:	2300      	movs	r3, #0
   2e5bc:	702b      	strb	r3, [r5, #0]
   2e5be:	bd70      	pop	{r4, r5, r6, pc}
   2e5c0:	f7d9 ff5a 	bl	8478 <__chk_fail>
   2e5c4:	2b00      	cmp	r3, #0
   2e5c6:	d0fb      	beq.n	2e5c0 <__strncat_chk+0x34>
   2e5c8:	3b01      	subs	r3, #1
   2e5ca:	462c      	mov	r4, r5
   2e5cc:	e7e3      	b.n	2e596 <__strncat_chk+0xa>

0002e5ce <strncmp>:
   2e5ce:	b510      	push	{r4, lr}
   2e5d0:	b16a      	cbz	r2, 2e5ee <strncmp+0x20>
   2e5d2:	3901      	subs	r1, #1
   2e5d4:	1884      	adds	r4, r0, r2
   2e5d6:	f810 3b01 	ldrb.w	r3, [r0], #1
   2e5da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2e5de:	4293      	cmp	r3, r2
   2e5e0:	d103      	bne.n	2e5ea <strncmp+0x1c>
   2e5e2:	42a0      	cmp	r0, r4
   2e5e4:	d001      	beq.n	2e5ea <strncmp+0x1c>
   2e5e6:	2b00      	cmp	r3, #0
   2e5e8:	d1f5      	bne.n	2e5d6 <strncmp+0x8>
   2e5ea:	1a98      	subs	r0, r3, r2
   2e5ec:	bd10      	pop	{r4, pc}
   2e5ee:	4610      	mov	r0, r2
   2e5f0:	e7fc      	b.n	2e5ec <strncmp+0x1e>

0002e5f2 <strnlen>:
   2e5f2:	b510      	push	{r4, lr}
   2e5f4:	4602      	mov	r2, r0
   2e5f6:	4401      	add	r1, r0
   2e5f8:	428a      	cmp	r2, r1
   2e5fa:	4613      	mov	r3, r2
   2e5fc:	d003      	beq.n	2e606 <strnlen+0x14>
   2e5fe:	781c      	ldrb	r4, [r3, #0]
   2e600:	3201      	adds	r2, #1
   2e602:	2c00      	cmp	r4, #0
   2e604:	d1f8      	bne.n	2e5f8 <strnlen+0x6>
   2e606:	1a18      	subs	r0, r3, r0
   2e608:	bd10      	pop	{r4, pc}

0002e60a <quorem>:
   2e60a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e60e:	6903      	ldr	r3, [r0, #16]
   2e610:	690c      	ldr	r4, [r1, #16]
   2e612:	42a3      	cmp	r3, r4
   2e614:	4680      	mov	r8, r0
   2e616:	db7f      	blt.n	2e718 <quorem+0x10e>
   2e618:	3c01      	subs	r4, #1
   2e61a:	f101 0714 	add.w	r7, r1, #20
   2e61e:	00a0      	lsls	r0, r4, #2
   2e620:	f108 0514 	add.w	r5, r8, #20
   2e624:	182b      	adds	r3, r5, r0
   2e626:	9301      	str	r3, [sp, #4]
   2e628:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2e62c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2e630:	3301      	adds	r3, #1
   2e632:	429a      	cmp	r2, r3
   2e634:	eb07 0900 	add.w	r9, r7, r0
   2e638:	fbb2 f6f3 	udiv	r6, r2, r3
   2e63c:	d331      	bcc.n	2e6a2 <quorem+0x98>
   2e63e:	f04f 0a00 	mov.w	sl, #0
   2e642:	46bc      	mov	ip, r7
   2e644:	46ae      	mov	lr, r5
   2e646:	46d3      	mov	fp, sl
   2e648:	f85c 2b04 	ldr.w	r2, [ip], #4
   2e64c:	b293      	uxth	r3, r2
   2e64e:	fb06 a303 	mla	r3, r6, r3, sl
   2e652:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2e656:	b29b      	uxth	r3, r3
   2e658:	ebab 0303 	sub.w	r3, fp, r3
   2e65c:	0c12      	lsrs	r2, r2, #16
   2e65e:	f8de b000 	ldr.w	fp, [lr]
   2e662:	fb06 a202 	mla	r2, r6, r2, sl
   2e666:	fa13 f38b 	uxtah	r3, r3, fp
   2e66a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   2e66e:	fa1f fb82 	uxth.w	fp, r2
   2e672:	f8de 2000 	ldr.w	r2, [lr]
   2e676:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   2e67a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2e67e:	b29b      	uxth	r3, r3
   2e680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2e684:	45e1      	cmp	r9, ip
   2e686:	ea4f 4b22 	mov.w	fp, r2, asr #16
   2e68a:	f84e 3b04 	str.w	r3, [lr], #4
   2e68e:	d2db      	bcs.n	2e648 <quorem+0x3e>
   2e690:	582b      	ldr	r3, [r5, r0]
   2e692:	b933      	cbnz	r3, 2e6a2 <quorem+0x98>
   2e694:	9b01      	ldr	r3, [sp, #4]
   2e696:	3b04      	subs	r3, #4
   2e698:	429d      	cmp	r5, r3
   2e69a:	461a      	mov	r2, r3
   2e69c:	d330      	bcc.n	2e700 <quorem+0xf6>
   2e69e:	f8c8 4010 	str.w	r4, [r8, #16]
   2e6a2:	4640      	mov	r0, r8
   2e6a4:	f000 f9fc 	bl	2eaa0 <__mcmp>
   2e6a8:	2800      	cmp	r0, #0
   2e6aa:	db25      	blt.n	2e6f8 <quorem+0xee>
   2e6ac:	3601      	adds	r6, #1
   2e6ae:	4628      	mov	r0, r5
   2e6b0:	f04f 0c00 	mov.w	ip, #0
   2e6b4:	f857 2b04 	ldr.w	r2, [r7], #4
   2e6b8:	f8d0 e000 	ldr.w	lr, [r0]
   2e6bc:	b293      	uxth	r3, r2
   2e6be:	ebac 0303 	sub.w	r3, ip, r3
   2e6c2:	0c12      	lsrs	r2, r2, #16
   2e6c4:	fa13 f38e 	uxtah	r3, r3, lr
   2e6c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   2e6cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2e6d0:	b29b      	uxth	r3, r3
   2e6d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2e6d6:	45b9      	cmp	r9, r7
   2e6d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
   2e6dc:	f840 3b04 	str.w	r3, [r0], #4
   2e6e0:	d2e8      	bcs.n	2e6b4 <quorem+0xaa>
   2e6e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2e6e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2e6ea:	b92a      	cbnz	r2, 2e6f8 <quorem+0xee>
   2e6ec:	3b04      	subs	r3, #4
   2e6ee:	429d      	cmp	r5, r3
   2e6f0:	461a      	mov	r2, r3
   2e6f2:	d30b      	bcc.n	2e70c <quorem+0x102>
   2e6f4:	f8c8 4010 	str.w	r4, [r8, #16]
   2e6f8:	4630      	mov	r0, r6
   2e6fa:	b003      	add	sp, #12
   2e6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e700:	6812      	ldr	r2, [r2, #0]
   2e702:	3b04      	subs	r3, #4
   2e704:	2a00      	cmp	r2, #0
   2e706:	d1ca      	bne.n	2e69e <quorem+0x94>
   2e708:	3c01      	subs	r4, #1
   2e70a:	e7c5      	b.n	2e698 <quorem+0x8e>
   2e70c:	6812      	ldr	r2, [r2, #0]
   2e70e:	3b04      	subs	r3, #4
   2e710:	2a00      	cmp	r2, #0
   2e712:	d1ef      	bne.n	2e6f4 <quorem+0xea>
   2e714:	3c01      	subs	r4, #1
   2e716:	e7ea      	b.n	2e6ee <quorem+0xe4>
   2e718:	2000      	movs	r0, #0
   2e71a:	e7ee      	b.n	2e6fa <quorem+0xf0>

0002e71c <_Balloc>:
   2e71c:	b570      	push	{r4, r5, r6, lr}
   2e71e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2e720:	4604      	mov	r4, r0
   2e722:	460e      	mov	r6, r1
   2e724:	b93d      	cbnz	r5, 2e736 <_Balloc+0x1a>
   2e726:	2010      	movs	r0, #16
   2e728:	f7f8 fcc2 	bl	270b0 <malloc>
   2e72c:	e9c0 5501 	strd	r5, r5, [r0, #4]
   2e730:	6260      	str	r0, [r4, #36]	; 0x24
   2e732:	6005      	str	r5, [r0, #0]
   2e734:	60c5      	str	r5, [r0, #12]
   2e736:	6a65      	ldr	r5, [r4, #36]	; 0x24
   2e738:	68eb      	ldr	r3, [r5, #12]
   2e73a:	b183      	cbz	r3, 2e75e <_Balloc+0x42>
   2e73c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e73e:	68db      	ldr	r3, [r3, #12]
   2e740:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   2e744:	b9b8      	cbnz	r0, 2e776 <_Balloc+0x5a>
   2e746:	2101      	movs	r1, #1
   2e748:	fa01 f506 	lsl.w	r5, r1, r6
   2e74c:	1d6a      	adds	r2, r5, #5
   2e74e:	0092      	lsls	r2, r2, #2
   2e750:	4620      	mov	r0, r4
   2e752:	f000 fa6a 	bl	2ec2a <_calloc_r>
   2e756:	b160      	cbz	r0, 2e772 <_Balloc+0x56>
   2e758:	e9c0 6501 	strd	r6, r5, [r0, #4]
   2e75c:	e00e      	b.n	2e77c <_Balloc+0x60>
   2e75e:	2221      	movs	r2, #33	; 0x21
   2e760:	2104      	movs	r1, #4
   2e762:	4620      	mov	r0, r4
   2e764:	f000 fa61 	bl	2ec2a <_calloc_r>
   2e768:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e76a:	60e8      	str	r0, [r5, #12]
   2e76c:	68db      	ldr	r3, [r3, #12]
   2e76e:	2b00      	cmp	r3, #0
   2e770:	d1e4      	bne.n	2e73c <_Balloc+0x20>
   2e772:	2000      	movs	r0, #0
   2e774:	bd70      	pop	{r4, r5, r6, pc}
   2e776:	6802      	ldr	r2, [r0, #0]
   2e778:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   2e77c:	2300      	movs	r3, #0
   2e77e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2e782:	e7f7      	b.n	2e774 <_Balloc+0x58>

0002e784 <_Bfree>:
   2e784:	b570      	push	{r4, r5, r6, lr}
   2e786:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2e788:	4606      	mov	r6, r0
   2e78a:	460d      	mov	r5, r1
   2e78c:	b93c      	cbnz	r4, 2e79e <_Bfree+0x1a>
   2e78e:	2010      	movs	r0, #16
   2e790:	f7f8 fc8e 	bl	270b0 <malloc>
   2e794:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2e798:	6270      	str	r0, [r6, #36]	; 0x24
   2e79a:	6004      	str	r4, [r0, #0]
   2e79c:	60c4      	str	r4, [r0, #12]
   2e79e:	b13d      	cbz	r5, 2e7b0 <_Bfree+0x2c>
   2e7a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
   2e7a2:	686a      	ldr	r2, [r5, #4]
   2e7a4:	68db      	ldr	r3, [r3, #12]
   2e7a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2e7aa:	6029      	str	r1, [r5, #0]
   2e7ac:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2e7b0:	bd70      	pop	{r4, r5, r6, pc}

0002e7b2 <__multadd>:
   2e7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e7b6:	690d      	ldr	r5, [r1, #16]
   2e7b8:	461f      	mov	r7, r3
   2e7ba:	4606      	mov	r6, r0
   2e7bc:	460c      	mov	r4, r1
   2e7be:	f101 0c14 	add.w	ip, r1, #20
   2e7c2:	2300      	movs	r3, #0
   2e7c4:	f8dc 0000 	ldr.w	r0, [ip]
   2e7c8:	b281      	uxth	r1, r0
   2e7ca:	fb02 7101 	mla	r1, r2, r1, r7
   2e7ce:	0c0f      	lsrs	r7, r1, #16
   2e7d0:	0c00      	lsrs	r0, r0, #16
   2e7d2:	fb02 7000 	mla	r0, r2, r0, r7
   2e7d6:	b289      	uxth	r1, r1
   2e7d8:	3301      	adds	r3, #1
   2e7da:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   2e7de:	429d      	cmp	r5, r3
   2e7e0:	ea4f 4710 	mov.w	r7, r0, lsr #16
   2e7e4:	f84c 1b04 	str.w	r1, [ip], #4
   2e7e8:	dcec      	bgt.n	2e7c4 <__multadd+0x12>
   2e7ea:	b1d7      	cbz	r7, 2e822 <__multadd+0x70>
   2e7ec:	68a3      	ldr	r3, [r4, #8]
   2e7ee:	42ab      	cmp	r3, r5
   2e7f0:	dc12      	bgt.n	2e818 <__multadd+0x66>
   2e7f2:	6861      	ldr	r1, [r4, #4]
   2e7f4:	4630      	mov	r0, r6
   2e7f6:	3101      	adds	r1, #1
   2e7f8:	f7ff ff90 	bl	2e71c <_Balloc>
   2e7fc:	6922      	ldr	r2, [r4, #16]
   2e7fe:	3202      	adds	r2, #2
   2e800:	f104 010c 	add.w	r1, r4, #12
   2e804:	4680      	mov	r8, r0
   2e806:	0092      	lsls	r2, r2, #2
   2e808:	300c      	adds	r0, #12
   2e80a:	f7ff fd4e 	bl	2e2aa <memcpy>
   2e80e:	4621      	mov	r1, r4
   2e810:	4630      	mov	r0, r6
   2e812:	f7ff ffb7 	bl	2e784 <_Bfree>
   2e816:	4644      	mov	r4, r8
   2e818:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   2e81c:	3501      	adds	r5, #1
   2e81e:	615f      	str	r7, [r3, #20]
   2e820:	6125      	str	r5, [r4, #16]
   2e822:	4620      	mov	r0, r4
   2e824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e828 <__hi0bits>:
   2e828:	0c02      	lsrs	r2, r0, #16
   2e82a:	0412      	lsls	r2, r2, #16
   2e82c:	4603      	mov	r3, r0
   2e82e:	b9ca      	cbnz	r2, 2e864 <__hi0bits+0x3c>
   2e830:	0403      	lsls	r3, r0, #16
   2e832:	2010      	movs	r0, #16
   2e834:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2e838:	bf04      	itt	eq
   2e83a:	021b      	lsleq	r3, r3, #8
   2e83c:	3008      	addeq	r0, #8
   2e83e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2e842:	bf04      	itt	eq
   2e844:	011b      	lsleq	r3, r3, #4
   2e846:	3004      	addeq	r0, #4
   2e848:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2e84c:	bf04      	itt	eq
   2e84e:	009b      	lsleq	r3, r3, #2
   2e850:	3002      	addeq	r0, #2
   2e852:	2b00      	cmp	r3, #0
   2e854:	db05      	blt.n	2e862 <__hi0bits+0x3a>
   2e856:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2e85a:	f100 0001 	add.w	r0, r0, #1
   2e85e:	bf08      	it	eq
   2e860:	2020      	moveq	r0, #32
   2e862:	4770      	bx	lr
   2e864:	2000      	movs	r0, #0
   2e866:	e7e5      	b.n	2e834 <__hi0bits+0xc>

0002e868 <__lo0bits>:
   2e868:	6803      	ldr	r3, [r0, #0]
   2e86a:	f013 0207 	ands.w	r2, r3, #7
   2e86e:	4601      	mov	r1, r0
   2e870:	d00b      	beq.n	2e88a <__lo0bits+0x22>
   2e872:	07da      	lsls	r2, r3, #31
   2e874:	d424      	bmi.n	2e8c0 <__lo0bits+0x58>
   2e876:	0798      	lsls	r0, r3, #30
   2e878:	bf49      	itett	mi
   2e87a:	085b      	lsrmi	r3, r3, #1
   2e87c:	089b      	lsrpl	r3, r3, #2
   2e87e:	2001      	movmi	r0, #1
   2e880:	600b      	strmi	r3, [r1, #0]
   2e882:	bf5c      	itt	pl
   2e884:	600b      	strpl	r3, [r1, #0]
   2e886:	2002      	movpl	r0, #2
   2e888:	4770      	bx	lr
   2e88a:	b298      	uxth	r0, r3
   2e88c:	b9b0      	cbnz	r0, 2e8bc <__lo0bits+0x54>
   2e88e:	0c1b      	lsrs	r3, r3, #16
   2e890:	2010      	movs	r0, #16
   2e892:	f013 0fff 	tst.w	r3, #255	; 0xff
   2e896:	bf04      	itt	eq
   2e898:	0a1b      	lsreq	r3, r3, #8
   2e89a:	3008      	addeq	r0, #8
   2e89c:	071a      	lsls	r2, r3, #28
   2e89e:	bf04      	itt	eq
   2e8a0:	091b      	lsreq	r3, r3, #4
   2e8a2:	3004      	addeq	r0, #4
   2e8a4:	079a      	lsls	r2, r3, #30
   2e8a6:	bf04      	itt	eq
   2e8a8:	089b      	lsreq	r3, r3, #2
   2e8aa:	3002      	addeq	r0, #2
   2e8ac:	07da      	lsls	r2, r3, #31
   2e8ae:	d403      	bmi.n	2e8b8 <__lo0bits+0x50>
   2e8b0:	085b      	lsrs	r3, r3, #1
   2e8b2:	f100 0001 	add.w	r0, r0, #1
   2e8b6:	d005      	beq.n	2e8c4 <__lo0bits+0x5c>
   2e8b8:	600b      	str	r3, [r1, #0]
   2e8ba:	4770      	bx	lr
   2e8bc:	4610      	mov	r0, r2
   2e8be:	e7e8      	b.n	2e892 <__lo0bits+0x2a>
   2e8c0:	2000      	movs	r0, #0
   2e8c2:	4770      	bx	lr
   2e8c4:	2020      	movs	r0, #32
   2e8c6:	4770      	bx	lr

0002e8c8 <__i2b>:
   2e8c8:	b510      	push	{r4, lr}
   2e8ca:	460c      	mov	r4, r1
   2e8cc:	2101      	movs	r1, #1
   2e8ce:	f7ff ff25 	bl	2e71c <_Balloc>
   2e8d2:	2201      	movs	r2, #1
   2e8d4:	6144      	str	r4, [r0, #20]
   2e8d6:	6102      	str	r2, [r0, #16]
   2e8d8:	bd10      	pop	{r4, pc}

0002e8da <__multiply>:
   2e8da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e8de:	4690      	mov	r8, r2
   2e8e0:	690a      	ldr	r2, [r1, #16]
   2e8e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2e8e6:	429a      	cmp	r2, r3
   2e8e8:	bfb8      	it	lt
   2e8ea:	460b      	movlt	r3, r1
   2e8ec:	460c      	mov	r4, r1
   2e8ee:	bfbc      	itt	lt
   2e8f0:	4644      	movlt	r4, r8
   2e8f2:	4698      	movlt	r8, r3
   2e8f4:	6927      	ldr	r7, [r4, #16]
   2e8f6:	f8d8 9010 	ldr.w	r9, [r8, #16]
   2e8fa:	68a3      	ldr	r3, [r4, #8]
   2e8fc:	6861      	ldr	r1, [r4, #4]
   2e8fe:	eb07 0609 	add.w	r6, r7, r9
   2e902:	42b3      	cmp	r3, r6
   2e904:	bfb8      	it	lt
   2e906:	3101      	addlt	r1, #1
   2e908:	f7ff ff08 	bl	2e71c <_Balloc>
   2e90c:	f100 0514 	add.w	r5, r0, #20
   2e910:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   2e914:	462b      	mov	r3, r5
   2e916:	2200      	movs	r2, #0
   2e918:	4573      	cmp	r3, lr
   2e91a:	d316      	bcc.n	2e94a <__multiply+0x70>
   2e91c:	f104 0314 	add.w	r3, r4, #20
   2e920:	f108 0214 	add.w	r2, r8, #20
   2e924:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   2e928:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   2e92c:	9300      	str	r3, [sp, #0]
   2e92e:	9b00      	ldr	r3, [sp, #0]
   2e930:	9201      	str	r2, [sp, #4]
   2e932:	4293      	cmp	r3, r2
   2e934:	d80c      	bhi.n	2e950 <__multiply+0x76>
   2e936:	2e00      	cmp	r6, #0
   2e938:	dd03      	ble.n	2e942 <__multiply+0x68>
   2e93a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   2e93e:	2b00      	cmp	r3, #0
   2e940:	d059      	beq.n	2e9f6 <__multiply+0x11c>
   2e942:	6106      	str	r6, [r0, #16]
   2e944:	b003      	add	sp, #12
   2e946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e94a:	f843 2b04 	str.w	r2, [r3], #4
   2e94e:	e7e3      	b.n	2e918 <__multiply+0x3e>
   2e950:	f8b2 a000 	ldrh.w	sl, [r2]
   2e954:	f1ba 0f00 	cmp.w	sl, #0
   2e958:	d023      	beq.n	2e9a2 <__multiply+0xc8>
   2e95a:	f104 0914 	add.w	r9, r4, #20
   2e95e:	46ac      	mov	ip, r5
   2e960:	f04f 0800 	mov.w	r8, #0
   2e964:	f859 1b04 	ldr.w	r1, [r9], #4
   2e968:	f8dc b000 	ldr.w	fp, [ip]
   2e96c:	b28b      	uxth	r3, r1
   2e96e:	fa1f fb8b 	uxth.w	fp, fp
   2e972:	fb0a b303 	mla	r3, sl, r3, fp
   2e976:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   2e97a:	f8dc 1000 	ldr.w	r1, [ip]
   2e97e:	4443      	add	r3, r8
   2e980:	ea4f 4811 	mov.w	r8, r1, lsr #16
   2e984:	fb0a 810b 	mla	r1, sl, fp, r8
   2e988:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2e98c:	b29b      	uxth	r3, r3
   2e98e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2e992:	454f      	cmp	r7, r9
   2e994:	ea4f 4811 	mov.w	r8, r1, lsr #16
   2e998:	f84c 3b04 	str.w	r3, [ip], #4
   2e99c:	d8e2      	bhi.n	2e964 <__multiply+0x8a>
   2e99e:	f8cc 8000 	str.w	r8, [ip]
   2e9a2:	9b01      	ldr	r3, [sp, #4]
   2e9a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   2e9a8:	3204      	adds	r2, #4
   2e9aa:	f1b9 0f00 	cmp.w	r9, #0
   2e9ae:	d020      	beq.n	2e9f2 <__multiply+0x118>
   2e9b0:	682b      	ldr	r3, [r5, #0]
   2e9b2:	f104 0814 	add.w	r8, r4, #20
   2e9b6:	46ac      	mov	ip, r5
   2e9b8:	f04f 0a00 	mov.w	sl, #0
   2e9bc:	f8b8 1000 	ldrh.w	r1, [r8]
   2e9c0:	f8bc b002 	ldrh.w	fp, [ip, #2]
   2e9c4:	fb09 b101 	mla	r1, r9, r1, fp
   2e9c8:	448a      	add	sl, r1
   2e9ca:	b29b      	uxth	r3, r3
   2e9cc:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   2e9d0:	f84c 3b04 	str.w	r3, [ip], #4
   2e9d4:	f858 3b04 	ldr.w	r3, [r8], #4
   2e9d8:	f8bc 1000 	ldrh.w	r1, [ip]
   2e9dc:	0c1b      	lsrs	r3, r3, #16
   2e9de:	fb09 1303 	mla	r3, r9, r3, r1
   2e9e2:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   2e9e6:	4547      	cmp	r7, r8
   2e9e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2e9ec:	d8e6      	bhi.n	2e9bc <__multiply+0xe2>
   2e9ee:	f8cc 3000 	str.w	r3, [ip]
   2e9f2:	3504      	adds	r5, #4
   2e9f4:	e79b      	b.n	2e92e <__multiply+0x54>
   2e9f6:	3e01      	subs	r6, #1
   2e9f8:	e79d      	b.n	2e936 <__multiply+0x5c>

0002e9fa <__lshift>:
   2e9fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e9fe:	460c      	mov	r4, r1
   2ea00:	ea4f 1a62 	mov.w	sl, r2, asr #5
   2ea04:	6923      	ldr	r3, [r4, #16]
   2ea06:	6849      	ldr	r1, [r1, #4]
   2ea08:	eb0a 0903 	add.w	r9, sl, r3
   2ea0c:	68a3      	ldr	r3, [r4, #8]
   2ea0e:	4607      	mov	r7, r0
   2ea10:	4616      	mov	r6, r2
   2ea12:	f109 0501 	add.w	r5, r9, #1
   2ea16:	42ab      	cmp	r3, r5
   2ea18:	db33      	blt.n	2ea82 <__lshift+0x88>
   2ea1a:	4638      	mov	r0, r7
   2ea1c:	f7ff fe7e 	bl	2e71c <_Balloc>
   2ea20:	2300      	movs	r3, #0
   2ea22:	4680      	mov	r8, r0
   2ea24:	f100 0114 	add.w	r1, r0, #20
   2ea28:	f100 0210 	add.w	r2, r0, #16
   2ea2c:	4618      	mov	r0, r3
   2ea2e:	4553      	cmp	r3, sl
   2ea30:	db2a      	blt.n	2ea88 <__lshift+0x8e>
   2ea32:	6920      	ldr	r0, [r4, #16]
   2ea34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   2ea38:	f104 0314 	add.w	r3, r4, #20
   2ea3c:	f016 021f 	ands.w	r2, r6, #31
   2ea40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   2ea44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2ea48:	d022      	beq.n	2ea90 <__lshift+0x96>
   2ea4a:	f1c2 0e20 	rsb	lr, r2, #32
   2ea4e:	2000      	movs	r0, #0
   2ea50:	681e      	ldr	r6, [r3, #0]
   2ea52:	4096      	lsls	r6, r2
   2ea54:	4330      	orrs	r0, r6
   2ea56:	f841 0b04 	str.w	r0, [r1], #4
   2ea5a:	f853 0b04 	ldr.w	r0, [r3], #4
   2ea5e:	459c      	cmp	ip, r3
   2ea60:	fa20 f00e 	lsr.w	r0, r0, lr
   2ea64:	d8f4      	bhi.n	2ea50 <__lshift+0x56>
   2ea66:	6008      	str	r0, [r1, #0]
   2ea68:	b108      	cbz	r0, 2ea6e <__lshift+0x74>
   2ea6a:	f109 0502 	add.w	r5, r9, #2
   2ea6e:	3d01      	subs	r5, #1
   2ea70:	4638      	mov	r0, r7
   2ea72:	f8c8 5010 	str.w	r5, [r8, #16]
   2ea76:	4621      	mov	r1, r4
   2ea78:	f7ff fe84 	bl	2e784 <_Bfree>
   2ea7c:	4640      	mov	r0, r8
   2ea7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ea82:	3101      	adds	r1, #1
   2ea84:	005b      	lsls	r3, r3, #1
   2ea86:	e7c6      	b.n	2ea16 <__lshift+0x1c>
   2ea88:	f842 0f04 	str.w	r0, [r2, #4]!
   2ea8c:	3301      	adds	r3, #1
   2ea8e:	e7ce      	b.n	2ea2e <__lshift+0x34>
   2ea90:	3904      	subs	r1, #4
   2ea92:	f853 2b04 	ldr.w	r2, [r3], #4
   2ea96:	f841 2f04 	str.w	r2, [r1, #4]!
   2ea9a:	459c      	cmp	ip, r3
   2ea9c:	d8f9      	bhi.n	2ea92 <__lshift+0x98>
   2ea9e:	e7e6      	b.n	2ea6e <__lshift+0x74>

0002eaa0 <__mcmp>:
   2eaa0:	6903      	ldr	r3, [r0, #16]
   2eaa2:	690a      	ldr	r2, [r1, #16]
   2eaa4:	1a9b      	subs	r3, r3, r2
   2eaa6:	b530      	push	{r4, r5, lr}
   2eaa8:	d10c      	bne.n	2eac4 <__mcmp+0x24>
   2eaaa:	0092      	lsls	r2, r2, #2
   2eaac:	3014      	adds	r0, #20
   2eaae:	3114      	adds	r1, #20
   2eab0:	1884      	adds	r4, r0, r2
   2eab2:	4411      	add	r1, r2
   2eab4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   2eab8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2eabc:	4295      	cmp	r5, r2
   2eabe:	d003      	beq.n	2eac8 <__mcmp+0x28>
   2eac0:	d305      	bcc.n	2eace <__mcmp+0x2e>
   2eac2:	2301      	movs	r3, #1
   2eac4:	4618      	mov	r0, r3
   2eac6:	bd30      	pop	{r4, r5, pc}
   2eac8:	42a0      	cmp	r0, r4
   2eaca:	d3f3      	bcc.n	2eab4 <__mcmp+0x14>
   2eacc:	e7fa      	b.n	2eac4 <__mcmp+0x24>
   2eace:	f04f 33ff 	mov.w	r3, #4294967295
   2ead2:	e7f7      	b.n	2eac4 <__mcmp+0x24>

0002ead4 <__mdiff>:
   2ead4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ead8:	460d      	mov	r5, r1
   2eada:	4607      	mov	r7, r0
   2eadc:	4611      	mov	r1, r2
   2eade:	4628      	mov	r0, r5
   2eae0:	4614      	mov	r4, r2
   2eae2:	f7ff ffdd 	bl	2eaa0 <__mcmp>
   2eae6:	1e06      	subs	r6, r0, #0
   2eae8:	d108      	bne.n	2eafc <__mdiff+0x28>
   2eaea:	4631      	mov	r1, r6
   2eaec:	4638      	mov	r0, r7
   2eaee:	f7ff fe15 	bl	2e71c <_Balloc>
   2eaf2:	2301      	movs	r3, #1
   2eaf4:	e9c0 3604 	strd	r3, r6, [r0, #16]
   2eaf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2eafc:	bfa4      	itt	ge
   2eafe:	4623      	movge	r3, r4
   2eb00:	462c      	movge	r4, r5
   2eb02:	4638      	mov	r0, r7
   2eb04:	6861      	ldr	r1, [r4, #4]
   2eb06:	bfa6      	itte	ge
   2eb08:	461d      	movge	r5, r3
   2eb0a:	2600      	movge	r6, #0
   2eb0c:	2601      	movlt	r6, #1
   2eb0e:	f7ff fe05 	bl	2e71c <_Balloc>
   2eb12:	692b      	ldr	r3, [r5, #16]
   2eb14:	60c6      	str	r6, [r0, #12]
   2eb16:	6926      	ldr	r6, [r4, #16]
   2eb18:	f105 0914 	add.w	r9, r5, #20
   2eb1c:	f104 0214 	add.w	r2, r4, #20
   2eb20:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   2eb24:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   2eb28:	f100 0514 	add.w	r5, r0, #20
   2eb2c:	f04f 0e00 	mov.w	lr, #0
   2eb30:	f852 ab04 	ldr.w	sl, [r2], #4
   2eb34:	f859 4b04 	ldr.w	r4, [r9], #4
   2eb38:	fa1e f18a 	uxtah	r1, lr, sl
   2eb3c:	b2a3      	uxth	r3, r4
   2eb3e:	1ac9      	subs	r1, r1, r3
   2eb40:	0c23      	lsrs	r3, r4, #16
   2eb42:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
   2eb46:	eb03 4321 	add.w	r3, r3, r1, asr #16
   2eb4a:	b289      	uxth	r1, r1
   2eb4c:	ea4f 4e23 	mov.w	lr, r3, asr #16
   2eb50:	45c8      	cmp	r8, r9
   2eb52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   2eb56:	4694      	mov	ip, r2
   2eb58:	f845 3b04 	str.w	r3, [r5], #4
   2eb5c:	d8e8      	bhi.n	2eb30 <__mdiff+0x5c>
   2eb5e:	45bc      	cmp	ip, r7
   2eb60:	d304      	bcc.n	2eb6c <__mdiff+0x98>
   2eb62:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   2eb66:	b183      	cbz	r3, 2eb8a <__mdiff+0xb6>
   2eb68:	6106      	str	r6, [r0, #16]
   2eb6a:	e7c5      	b.n	2eaf8 <__mdiff+0x24>
   2eb6c:	f85c 1b04 	ldr.w	r1, [ip], #4
   2eb70:	fa1e f381 	uxtah	r3, lr, r1
   2eb74:	141a      	asrs	r2, r3, #16
   2eb76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   2eb7a:	b29b      	uxth	r3, r3
   2eb7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2eb80:	ea4f 4e22 	mov.w	lr, r2, asr #16
   2eb84:	f845 3b04 	str.w	r3, [r5], #4
   2eb88:	e7e9      	b.n	2eb5e <__mdiff+0x8a>
   2eb8a:	3e01      	subs	r6, #1
   2eb8c:	e7e9      	b.n	2eb62 <__mdiff+0x8e>

0002eb8e <__d2b>:
   2eb8e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2eb92:	2101      	movs	r1, #1
   2eb94:	461c      	mov	r4, r3
   2eb96:	4690      	mov	r8, r2
   2eb98:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   2eb9c:	f7ff fdbe 	bl	2e71c <_Balloc>
   2eba0:	f3c4 0213 	ubfx	r2, r4, #0, #20
   2eba4:	f3c4 540a 	ubfx	r4, r4, #20, #11
   2eba8:	4607      	mov	r7, r0
   2ebaa:	bb2c      	cbnz	r4, 2ebf8 <__d2b+0x6a>
   2ebac:	9201      	str	r2, [sp, #4]
   2ebae:	f1b8 0200 	subs.w	r2, r8, #0
   2ebb2:	d026      	beq.n	2ec02 <__d2b+0x74>
   2ebb4:	4668      	mov	r0, sp
   2ebb6:	9200      	str	r2, [sp, #0]
   2ebb8:	f7ff fe56 	bl	2e868 <__lo0bits>
   2ebbc:	9900      	ldr	r1, [sp, #0]
   2ebbe:	b1f0      	cbz	r0, 2ebfe <__d2b+0x70>
   2ebc0:	9a01      	ldr	r2, [sp, #4]
   2ebc2:	f1c0 0320 	rsb	r3, r0, #32
   2ebc6:	fa02 f303 	lsl.w	r3, r2, r3
   2ebca:	430b      	orrs	r3, r1
   2ebcc:	40c2      	lsrs	r2, r0
   2ebce:	617b      	str	r3, [r7, #20]
   2ebd0:	9201      	str	r2, [sp, #4]
   2ebd2:	9b01      	ldr	r3, [sp, #4]
   2ebd4:	61bb      	str	r3, [r7, #24]
   2ebd6:	2b00      	cmp	r3, #0
   2ebd8:	bf14      	ite	ne
   2ebda:	2102      	movne	r1, #2
   2ebdc:	2101      	moveq	r1, #1
   2ebde:	6139      	str	r1, [r7, #16]
   2ebe0:	b1c4      	cbz	r4, 2ec14 <__d2b+0x86>
   2ebe2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   2ebe6:	4404      	add	r4, r0
   2ebe8:	6034      	str	r4, [r6, #0]
   2ebea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2ebee:	6028      	str	r0, [r5, #0]
   2ebf0:	4638      	mov	r0, r7
   2ebf2:	b002      	add	sp, #8
   2ebf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ebf8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2ebfc:	e7d6      	b.n	2ebac <__d2b+0x1e>
   2ebfe:	6179      	str	r1, [r7, #20]
   2ec00:	e7e7      	b.n	2ebd2 <__d2b+0x44>
   2ec02:	a801      	add	r0, sp, #4
   2ec04:	f7ff fe30 	bl	2e868 <__lo0bits>
   2ec08:	9b01      	ldr	r3, [sp, #4]
   2ec0a:	617b      	str	r3, [r7, #20]
   2ec0c:	2101      	movs	r1, #1
   2ec0e:	6139      	str	r1, [r7, #16]
   2ec10:	3020      	adds	r0, #32
   2ec12:	e7e5      	b.n	2ebe0 <__d2b+0x52>
   2ec14:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   2ec18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2ec1c:	6030      	str	r0, [r6, #0]
   2ec1e:	6918      	ldr	r0, [r3, #16]
   2ec20:	f7ff fe02 	bl	2e828 <__hi0bits>
   2ec24:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2ec28:	e7e1      	b.n	2ebee <__d2b+0x60>

0002ec2a <_calloc_r>:
   2ec2a:	b538      	push	{r3, r4, r5, lr}
   2ec2c:	fb02 f401 	mul.w	r4, r2, r1
   2ec30:	4621      	mov	r1, r4
   2ec32:	f7f8 fa45 	bl	270c0 <_malloc_r>
   2ec36:	4605      	mov	r5, r0
   2ec38:	b118      	cbz	r0, 2ec42 <_calloc_r+0x18>
   2ec3a:	4622      	mov	r2, r4
   2ec3c:	2100      	movs	r1, #0
   2ec3e:	f7ff fb6f 	bl	2e320 <memset>
   2ec42:	4628      	mov	r0, r5
   2ec44:	bd38      	pop	{r3, r4, r5, pc}

0002ec46 <__retarget_lock_acquire_recursive>:
   2ec46:	4770      	bx	lr

0002ec48 <__retarget_lock_release_recursive>:
   2ec48:	4770      	bx	lr

0002ec4a <__ascii_mbtowc>:
   2ec4a:	b082      	sub	sp, #8
   2ec4c:	b901      	cbnz	r1, 2ec50 <__ascii_mbtowc+0x6>
   2ec4e:	a901      	add	r1, sp, #4
   2ec50:	b142      	cbz	r2, 2ec64 <__ascii_mbtowc+0x1a>
   2ec52:	b14b      	cbz	r3, 2ec68 <__ascii_mbtowc+0x1e>
   2ec54:	7813      	ldrb	r3, [r2, #0]
   2ec56:	600b      	str	r3, [r1, #0]
   2ec58:	7812      	ldrb	r2, [r2, #0]
   2ec5a:	1c10      	adds	r0, r2, #0
   2ec5c:	bf18      	it	ne
   2ec5e:	2001      	movne	r0, #1
   2ec60:	b002      	add	sp, #8
   2ec62:	4770      	bx	lr
   2ec64:	4610      	mov	r0, r2
   2ec66:	e7fb      	b.n	2ec60 <__ascii_mbtowc+0x16>
   2ec68:	f06f 0001 	mvn.w	r0, #1
   2ec6c:	e7f8      	b.n	2ec60 <__ascii_mbtowc+0x16>

0002ec6e <__ascii_wctomb>:
   2ec6e:	b149      	cbz	r1, 2ec84 <__ascii_wctomb+0x16>
   2ec70:	2aff      	cmp	r2, #255	; 0xff
   2ec72:	bf85      	ittet	hi
   2ec74:	238a      	movhi	r3, #138	; 0x8a
   2ec76:	6003      	strhi	r3, [r0, #0]
   2ec78:	700a      	strbls	r2, [r1, #0]
   2ec7a:	f04f 30ff 	movhi.w	r0, #4294967295
   2ec7e:	bf98      	it	ls
   2ec80:	2001      	movls	r0, #1
   2ec82:	4770      	bx	lr
   2ec84:	4608      	mov	r0, r1
   2ec86:	4770      	bx	lr
