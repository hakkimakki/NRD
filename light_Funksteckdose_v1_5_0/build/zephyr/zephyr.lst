
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	sys_slist_append(&pm_notifiers, &notifier->_node);
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

int pm_notifier_unregister(struct pm_notifier *notifier)
{
   0:	20005dc0 	.word	0x20005dc0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   4:	00004a81 	.word	0x00004a81
   8:	00023f9d 	.word	0x00023f9d
   c:	00004ab1 	.word	0x00004ab1
  10:	00004ab1 	.word	0x00004ab1
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
  14:	00004ab1 	.word	0x00004ab1
  18:	00004ab1 	.word	0x00004ab1
	...
  2c:	000047cd 	.word	0x000047cd
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
  30:	00004ab1 	.word	0x00004ab1
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
  34:	00000000 	.word	0x00000000
  38:	00004775 	.word	0x00004775
	int ret = -EINVAL;
  3c:	00004021 	.word	0x00004021

00000040 <_irq_vector_table>:
  40:	00004a41 0002783d 00004a41 00004a41     AJ..=x..AJ..AJ..
Z_GENLIST_REMOVE(slist, snode)
  50:	00004a41 00004a41 00004a41 00004a41     AJ..AJ..AJ..AJ..
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
  60:	00004a41 00004a41 00004a41 00004a41     AJ..AJ..AJ..AJ..
  70:	00004a41 00004a41 00004a41 00004a41     AJ..AJ..AJ..AJ..
  80:	00004a41 00004a41 00004a41 00004a41     AJ..AJ..AJ..AJ..
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
  90:	00004a41 00004a41 00004a41 00004a41     AJ..AJ..AJ..AJ..
 * @retval -EADDRINUSE Work item was submitted to a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
  a0:	00004a41 00004a41 00004a41 00004a41     AJ..AJ..AJ..AJ..
		}

		k_spin_unlock(&lock, key);

		if (err) {
			LOG_ERR("Cannot enable callbacks");
  b0:	00004a41 00004a41 00004a41 00004a41     AJ..AJ..AJ..AJ..
			handler->cb(button_state, has_changed);
  c0:	00004a41 00004a41 00004a41 00004a41     AJ..AJ..AJ..AJ..
  d0:	00004a41 00004a41 00004a41 00004a41     AJ..AJ..AJ..AJ..
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
  e0:	00004a41 00004a41 00004a41 00004a41     AJ..AJ..AJ..AJ..
  f0:	00004a41 00004a41 00004a41 00004a41     AJ..AJ..AJ..AJ..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
		switch (state) {
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
			state = STATE_WAITING;
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
			err = gpio_pin_interrupt_configure(button_devs[i],
     10c:	f04f 31ff 	movne.w	r1, #4294967295
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b988 	b.w	428 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f81a 	bl	158 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__popcountsi2>:
     130:	0843      	lsrs	r3, r0, #1
     132:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     136:	1ac0      	subs	r0, r0, r3
     138:	0883      	lsrs	r3, r0, #2
     13a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
		if (err) {
     13e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
			LOG_ERR("Cannot enable callbacks");
     142:	4418      	add	r0, r3
     144:	eb00 1010 	add.w	r0, r0, r0, lsr #4
			__ASSERT_NO_MSG(false);
     148:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     14c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     150:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     154:	0e00      	lsrs	r0, r0, #24
     156:	4770      	bx	lr

00000158 <__udivmoddi4>:
		int err = 0;
     158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (val < 0) {
     15c:	9e08      	ldr	r6, [sp, #32]
			LOG_ERR("Cannot read gpio pin");
     15e:	4604      	mov	r4, r0
     160:	4688      	mov	r8, r1
     162:	2b00      	cmp	r3, #0
     164:	f040 8085 	bne.w	272 <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x7e>
			return 0;
     168:	428a      	cmp	r2, r1
     16a:	4615      	mov	r5, r2
     16c:	d948      	bls.n	200 <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0xc>
     16e:	fab2 f282 	clz	r2, r2
     172:	b14a      	cbz	r2, 188 <__udivmoddi4+0x30>
     174:	f1c2 0720 	rsb	r7, r2, #32
     178:	fa01 f302 	lsl.w	r3, r1, r2
     17c:	fa20 f707 	lsr.w	r7, r0, r7
     180:	4095      	lsls	r5, r2
     182:	ea47 0803 	orr.w	r8, r7, r3
     186:	4094      	lsls	r4, r2
     188:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     18c:	0c23      	lsrs	r3, r4, #16
     18e:	fbb8 f7fe 	udiv	r7, r8, lr
     192:	fa1f fc85 	uxth.w	ip, r5
     196:	fb0e 8817 	mls	r8, lr, r7, r8
     19a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     19e:	fb07 f10c 	mul.w	r1, r7, ip
     1a2:	4299      	cmp	r1, r3
     1a4:	d909      	bls.n	1ba <CONFIG_BT_MESH_TX_SEG_RETRANS_TIMEOUT_UNICAST+0x2a>
     1a6:	18eb      	adds	r3, r5, r3
     1a8:	f107 30ff 	add.w	r0, r7, #4294967295
     1ac:	f080 80e3 	bcs.w	376 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x76>
     1b0:	4299      	cmp	r1, r3
     1b2:	f240 80e0 	bls.w	376 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x76>
     1b6:	3f02      	subs	r7, #2
     1b8:	442b      	add	r3, r5
     1ba:	1a5b      	subs	r3, r3, r1
     1bc:	b2a4      	uxth	r4, r4
     1be:	fbb3 f0fe 	udiv	r0, r3, lr
     1c2:	fb0e 3310 	mls	r3, lr, r0, r3
     1c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ca:	fb00 fc0c 	mul.w	ip, r0, ip
     1ce:	45a4      	cmp	ip, r4
     1d0:	d909      	bls.n	1e6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x26>
     1d2:	192c      	adds	r4, r5, r4
     1d4:	f100 33ff 	add.w	r3, r0, #4294967295
     1d8:	f080 80cb 	bcs.w	372 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x72>
     1dc:	45a4      	cmp	ip, r4
     1de:	f240 80c8 	bls.w	372 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x72>
     1e2:	3802      	subs	r0, #2
     1e4:	442c      	add	r4, r5
     1e6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     1ea:	eba4 040c 	sub.w	r4, r4, ip
     1ee:	2700      	movs	r7, #0
     1f0:	b11e      	cbz	r6, 1fa <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x6>
     1f2:	40d4      	lsrs	r4, r2
     1f4:	2300      	movs	r3, #0
     1f6:	e9c6 4300 	strd	r4, r3, [r6]
     1fa:	4639      	mov	r1, r7
     1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     200:	2a00      	cmp	r2, #0
     202:	d053      	beq.n	2ac <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     204:	fab2 f282 	clz	r2, r2
     208:	2a00      	cmp	r2, #0
     20a:	f040 80b6 	bne.w	37a <CONFIG_BT_MESH_ADV_STACK_SIZE+0x7a>
     20e:	1b49      	subs	r1, r1, r5
     210:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     214:	fa1f f885 	uxth.w	r8, r5
     218:	2701      	movs	r7, #1
     21a:	fbb1 fcfe 	udiv	ip, r1, lr
     21e:	0c23      	lsrs	r3, r4, #16
     220:	fb0e 111c 	mls	r1, lr, ip, r1
     224:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     228:	fb08 f10c 	mul.w	r1, r8, ip
     22c:	4299      	cmp	r1, r3
     22e:	d907      	bls.n	240 <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x4c>
     230:	18eb      	adds	r3, r5, r3
     232:	f10c 30ff 	add.w	r0, ip, #4294967295
     236:	d202      	bcs.n	23e <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x4a>
     238:	4299      	cmp	r1, r3
     23a:	f200 80ec 	bhi.w	416 <CONFIG_FLASH_SIZE+0x16>
     23e:	4684      	mov	ip, r0
     240:	1a59      	subs	r1, r3, r1
     242:	b2a3      	uxth	r3, r4
     244:	fbb1 f0fe 	udiv	r0, r1, lr
     248:	fb0e 1410 	mls	r4, lr, r0, r1
     24c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     250:	fb08 f800 	mul.w	r8, r8, r0
     254:	45a0      	cmp	r8, r4
     256:	d907      	bls.n	268 <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x74>
     258:	192c      	adds	r4, r5, r4
     25a:	f100 33ff 	add.w	r3, r0, #4294967295
     25e:	d202      	bcs.n	266 <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x72>
     260:	45a0      	cmp	r8, r4
     262:	f200 80dc 	bhi.w	41e <CONFIG_FLASH_SIZE+0x1e>
     266:	4618      	mov	r0, r3
     268:	eba4 0408 	sub.w	r4, r4, r8
     26c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     270:	e7be      	b.n	1f0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x30>
     272:	428b      	cmp	r3, r1
     274:	d908      	bls.n	288 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     276:	2e00      	cmp	r6, #0
     278:	d078      	beq.n	36c <CONFIG_BT_MESH_ADV_STACK_SIZE+0x6c>
     27a:	2700      	movs	r7, #0
     27c:	e9c6 0100 	strd	r0, r1, [r6]
     280:	4638      	mov	r0, r7
     282:	4639      	mov	r1, r7
     284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     288:	fab3 f783 	clz	r7, r3
     28c:	b97f      	cbnz	r7, 2ae <CONFIG_BT_HCI_TX_STACK_SIZE+0x2e>
     28e:	428b      	cmp	r3, r1
     290:	d302      	bcc.n	298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     292:	4282      	cmp	r2, r0
     294:	f200 80bd 	bhi.w	412 <CONFIG_FLASH_SIZE+0x12>
     298:	1a84      	subs	r4, r0, r2
     29a:	eb61 0303 	sbc.w	r3, r1, r3
     29e:	2001      	movs	r0, #1
     2a0:	4698      	mov	r8, r3
     2a2:	2e00      	cmp	r6, #0
     2a4:	d0a9      	beq.n	1fa <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x6>
     2a6:	e9c6 4800 	strd	r4, r8, [r6]
     2aa:	e7a6      	b.n	1fa <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x6>
     2ac:	deff      	udf	#255	; 0xff
     2ae:	f1c7 0520 	rsb	r5, r7, #32
     2b2:	40bb      	lsls	r3, r7
     2b4:	fa22 fc05 	lsr.w	ip, r2, r5
     2b8:	ea4c 0c03 	orr.w	ip, ip, r3
     2bc:	fa01 f407 	lsl.w	r4, r1, r7
     2c0:	fa20 f805 	lsr.w	r8, r0, r5
     2c4:	fa21 f305 	lsr.w	r3, r1, r5
     2c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
     2cc:	ea48 0404 	orr.w	r4, r8, r4
     2d0:	fbb3 f9fe 	udiv	r9, r3, lr
     2d4:	0c21      	lsrs	r1, r4, #16
     2d6:	fb0e 3319 	mls	r3, lr, r9, r3
     2da:	fa1f f88c 	uxth.w	r8, ip
     2de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     2e2:	fb09 fa08 	mul.w	sl, r9, r8
     2e6:	459a      	cmp	sl, r3
     2e8:	fa02 f207 	lsl.w	r2, r2, r7
     2ec:	fa00 f107 	lsl.w	r1, r0, r7
     2f0:	d90b      	bls.n	30a <CONFIG_BT_MESH_ADV_STACK_SIZE+0xa>
     2f2:	eb1c 0303 	adds.w	r3, ip, r3
     2f6:	f109 30ff 	add.w	r0, r9, #4294967295
     2fa:	f080 8088 	bcs.w	40e <CONFIG_FLASH_SIZE+0xe>
     2fe:	459a      	cmp	sl, r3
     300:	f240 8085 	bls.w	40e <CONFIG_FLASH_SIZE+0xe>
     304:	f1a9 0902 	sub.w	r9, r9, #2
     308:	4463      	add	r3, ip
     30a:	eba3 030a 	sub.w	r3, r3, sl
     30e:	b2a4      	uxth	r4, r4
     310:	fbb3 f0fe 	udiv	r0, r3, lr
     314:	fb0e 3310 	mls	r3, lr, r0, r3
     318:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     31c:	fb00 f808 	mul.w	r8, r0, r8
     320:	45a0      	cmp	r8, r4
     322:	d908      	bls.n	336 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x36>
     324:	eb1c 0404 	adds.w	r4, ip, r4
     328:	f100 33ff 	add.w	r3, r0, #4294967295
     32c:	d26b      	bcs.n	406 <CONFIG_FLASH_SIZE+0x6>
     32e:	45a0      	cmp	r8, r4
     330:	d969      	bls.n	406 <CONFIG_FLASH_SIZE+0x6>
     332:	3802      	subs	r0, #2
     334:	4464      	add	r4, ip
     336:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     33a:	eba4 0408 	sub.w	r4, r4, r8
     33e:	fba0 8902 	umull	r8, r9, r0, r2
     342:	454c      	cmp	r4, r9
     344:	46c6      	mov	lr, r8
     346:	464b      	mov	r3, r9
     348:	d354      	bcc.n	3f4 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xf4>
     34a:	d051      	beq.n	3f0 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xf0>
     34c:	2e00      	cmp	r6, #0
     34e:	d069      	beq.n	424 <CONFIG_FLASH_SIZE+0x24>
     350:	ebb1 020e 	subs.w	r2, r1, lr
     354:	eb64 0403 	sbc.w	r4, r4, r3
     358:	fa04 f505 	lsl.w	r5, r4, r5
     35c:	fa22 f307 	lsr.w	r3, r2, r7
     360:	40fc      	lsrs	r4, r7
     362:	431d      	orrs	r5, r3
     364:	e9c6 5400 	strd	r5, r4, [r6]
     368:	2700      	movs	r7, #0
     36a:	e746      	b.n	1fa <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x6>
     36c:	4637      	mov	r7, r6
     36e:	4630      	mov	r0, r6
     370:	e743      	b.n	1fa <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x6>
     372:	4618      	mov	r0, r3
     374:	e737      	b.n	1e6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x26>
     376:	4607      	mov	r7, r0
     378:	e71f      	b.n	1ba <CONFIG_BT_MESH_TX_SEG_RETRANS_TIMEOUT_UNICAST+0x2a>
     37a:	f1c2 0320 	rsb	r3, r2, #32
     37e:	fa20 f703 	lsr.w	r7, r0, r3
     382:	4095      	lsls	r5, r2
     384:	fa01 f002 	lsl.w	r0, r1, r2
     388:	fa21 f303 	lsr.w	r3, r1, r3
     38c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     390:	4338      	orrs	r0, r7
     392:	0c01      	lsrs	r1, r0, #16
     394:	fbb3 f7fe 	udiv	r7, r3, lr
     398:	fa1f f885 	uxth.w	r8, r5
     39c:	fb0e 3317 	mls	r3, lr, r7, r3
     3a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3a4:	fb07 f308 	mul.w	r3, r7, r8
     3a8:	428b      	cmp	r3, r1
     3aa:	fa04 f402 	lsl.w	r4, r4, r2
     3ae:	d907      	bls.n	3c0 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xc0>
     3b0:	1869      	adds	r1, r5, r1
     3b2:	f107 3cff 	add.w	ip, r7, #4294967295
     3b6:	d228      	bcs.n	40a <CONFIG_FLASH_SIZE+0xa>
     3b8:	428b      	cmp	r3, r1
     3ba:	d926      	bls.n	40a <CONFIG_FLASH_SIZE+0xa>
     3bc:	3f02      	subs	r7, #2
     3be:	4429      	add	r1, r5
     3c0:	1acb      	subs	r3, r1, r3
     3c2:	b281      	uxth	r1, r0
     3c4:	fbb3 f0fe 	udiv	r0, r3, lr
     3c8:	fb0e 3310 	mls	r3, lr, r0, r3
     3cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3d0:	fb00 f308 	mul.w	r3, r0, r8
     3d4:	428b      	cmp	r3, r1
     3d6:	d907      	bls.n	3e8 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xe8>
     3d8:	1869      	adds	r1, r5, r1
     3da:	f100 3cff 	add.w	ip, r0, #4294967295
     3de:	d210      	bcs.n	402 <CONFIG_FLASH_SIZE+0x2>
     3e0:	428b      	cmp	r3, r1
     3e2:	d90e      	bls.n	402 <CONFIG_FLASH_SIZE+0x2>
     3e4:	3802      	subs	r0, #2
     3e6:	4429      	add	r1, r5
     3e8:	1ac9      	subs	r1, r1, r3
     3ea:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     3ee:	e714      	b.n	21a <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x26>
     3f0:	4541      	cmp	r1, r8
     3f2:	d2ab      	bcs.n	34c <CONFIG_BT_MESH_ADV_STACK_SIZE+0x4c>
     3f4:	ebb8 0e02 	subs.w	lr, r8, r2
     3f8:	eb69 020c 	sbc.w	r2, r9, ip
     3fc:	3801      	subs	r0, #1
     3fe:	4613      	mov	r3, r2
     400:	e7a4      	b.n	34c <CONFIG_BT_MESH_ADV_STACK_SIZE+0x4c>
     402:	4660      	mov	r0, ip
     404:	e7f0      	b.n	3e8 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xe8>
     406:	4618      	mov	r0, r3
     408:	e795      	b.n	336 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x36>
     40a:	4667      	mov	r7, ip
     40c:	e7d8      	b.n	3c0 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xc0>
     40e:	4681      	mov	r9, r0
     410:	e77b      	b.n	30a <CONFIG_BT_MESH_ADV_STACK_SIZE+0xa>
     412:	4638      	mov	r0, r7
     414:	e745      	b.n	2a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x22>
     416:	f1ac 0c02 	sub.w	ip, ip, #2
     41a:	442b      	add	r3, r5
     41c:	e710      	b.n	240 <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x4c>
     41e:	3802      	subs	r0, #2
     420:	442c      	add	r4, r5
     422:	e721      	b.n	268 <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x74>
     424:	4637      	mov	r7, r6
     426:	e6e8      	b.n	1fa <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x6>

00000428 <__aeabi_idiv0>:
     428:	4770      	bx	lr
     42a:	bf00      	nop
     42c:	0000      	movs	r0, r0
	...

00000430 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     434:	4689      	mov	r9, r1
	uint32_t window_widening_event_us;
	uint32_t preamble_to_addr_us;

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
     436:	e9d0 710a 	ldrd	r7, r1, [r0, #40]	; 0x28
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     43a:	6b06      	ldr	r6, [r0, #48]	; 0x30
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
     43c:	4d16      	ldr	r5, [pc, #88]	; (498 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4c>)
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     43e:	198c      	adds	r4, r1, r6
	start_to_address_expected_us = EVENT_JITTER_US +
     440:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     442:	42a7      	cmp	r7, r4
{
     444:	4690      	mov	r8, r2
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     446:	a312      	add	r3, pc, #72	; (adr r3, 490 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x44>)
     448:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     44c:	d815      	bhi.n	47a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2e>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     44e:	fba1 0105 	umull	r0, r1, r1, r5
     452:	f7ff fe55 	bl	100 <__aeabi_uldivmod>
     456:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     45a:	f8c9 0000 	str.w	r0, [r9]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     45e:	1be0      	subs	r0, r4, r7
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     460:	a30b      	add	r3, pc, #44	; (adr r3, 490 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x44>)
     462:	e9d3 2300 	ldrd	r2, r3, [r3]
     466:	fba0 0105 	umull	r0, r1, r0, r5
     46a:	f7ff fe49 	bl	100 <__aeabi_uldivmod>
     46e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     472:	f8c8 0000 	str.w	r0, [r8]
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     47a:	fba7 0105 	umull	r0, r1, r7, r5
     47e:	f7ff fe3f 	bl	100 <__aeabi_uldivmod>
     482:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     486:	f8c9 0000 	str.w	r0, [r9]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     48a:	f106 0030 	add.w	r0, r6, #48	; 0x30
     48e:	e7e7      	b.n	460 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14>
     490:	1afd498d 	.word	0x1afd498d
     494:	00000007 	.word	0x00000007
     498:	3b9aca00 	.word	0x3b9aca00
     49c:	00000000 	.word	0x00000000

000004a0 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4a4:	b08d      	sub	sp, #52	; 0x34
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
     4a6:	b930      	cbnz	r0, 4b6 <ll_adv_enable+0x16>
		return disable(handle);
     4a8:	f018 f950 	bl	1874c <disable.constprop.6>
     4ac:	4606      	mov	r6, r0
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
     4ae:	4630      	mov	r0, r6
     4b0:	b00d      	add	sp, #52	; 0x34
     4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     4b6:	4bca      	ldr	r3, [pc, #808]	; (7e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x204>)
     4b8:	f893 604e 	ldrb.w	r6, [r3, #78]	; 0x4e
     4bc:	f016 0601 	ands.w	r6, r6, #1
     4c0:	461d      	mov	r5, r3
     4c2:	d001      	beq.n	4c8 <ll_adv_enable+0x28>
	return BT_HCI_ERR_CMD_DISALLOWED;
     4c4:	260c      	movs	r6, #12
     4c6:	e7f2      	b.n	4ae <ll_adv_enable+0xe>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     4c8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
     4cc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     4d0:	6b17      	ldr	r7, [r2, #48]	; 0x30
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     4d2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
     4d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     4da:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
	if (pdu_adv_to_update) {
     4de:	b147      	cbz	r7, 4f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa>
	adv_addr = adva_update(adv, pdu);
     4e0:	4638      	mov	r0, r7
     4e2:	f026 ff46 	bl	27372 <adva_update.isra.4>
		if (pdu_adv_to_update->tx_addr &&
     4e6:	783b      	ldrb	r3, [r7, #0]
     4e8:	065a      	lsls	r2, r3, #25
     4ea:	d417      	bmi.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
	adv_addr = adva_update(adv, pdu);
     4ec:	4640      	mov	r0, r8
     4ee:	f026 ff40 	bl	27372 <adva_update.isra.4>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     4f2:	783b      	ldrb	r3, [r7, #0]
     4f4:	f013 0f0e 	tst.w	r3, #14
     4f8:	f040 8098 	bne.w	62c <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x50>
		if (lll->conn) {
     4fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     4fe:	2b00      	cmp	r3, #0
     500:	d1e0      	bne.n	4c4 <ll_adv_enable+0x24>
		link = ll_rx_link_alloc();
     502:	f017 fb91 	bl	17c28 <ll_rx_link_alloc>
		if (!link) {
     506:	4681      	mov	r9, r0
     508:	b130      	cbz	r0, 518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>
		node_rx = ll_rx_alloc();
     50a:	f017 fb99 	bl	17c40 <ll_rx_alloc>
		if (!node_rx) {
     50e:	4682      	mov	sl, r0
     510:	b958      	cbnz	r0, 52a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x42>
			ll_rx_link_release(link);
     512:	4648      	mov	r0, r9
     514:	f017 fb8e 	bl	17c34 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     518:	2607      	movs	r6, #7
     51a:	e7c8      	b.n	4ae <ll_adv_enable+0xe>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     51c:	2106      	movs	r1, #6
     51e:	f026 fbf5 	bl	26d0c <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     522:	2800      	cmp	r0, #0
     524:	d1e2      	bne.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
			return BT_HCI_ERR_INVALID_PARAM;
     526:	2612      	movs	r6, #18
     528:	e7c1      	b.n	4ae <ll_adv_enable+0xe>
		conn = ll_conn_acquire();
     52a:	f018 fbb9 	bl	18ca0 <ll_conn_acquire>
		if (!conn) {
     52e:	4604      	mov	r4, r0
     530:	b918      	cbnz	r0, 53a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x52>
			ll_rx_release(node_rx);
     532:	4650      	mov	r0, sl
     534:	f017 fb8a 	bl	17c4c <ll_rx_release>
     538:	e7eb      	b.n	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
		conn_lll->handle = 0xFFFF;
     53a:	f64f 73ff 	movw	r3, #65535	; 0xffff
     53e:	8583      	strh	r3, [r0, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     540:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
		conn_lll = &conn->lll;
     542:	f100 0b1c 	add.w	fp, r0, #28
		if (!conn_lll->link_tx_free) {
     546:	b913      	cbnz	r3, 54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     548:	f100 0364 	add.w	r3, r0, #100	; 0x64
     54c:	66c3      	str	r3, [r0, #108]	; 0x6c
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     54e:	f104 0260 	add.w	r2, r4, #96	; 0x60
     552:	f104 015c 	add.w	r1, r4, #92	; 0x5c
     556:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
     558:	f026 fbe3 	bl	26d22 <memq_init>
		conn_lll->sn = 0;
     55c:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
		conn->llcp_terminate.node_rx.hdr.link = link;
     560:	f8c4 90cc 	str.w	r9, [r4, #204]	; 0xcc
		conn_lll->sn = 0;
     564:	f022 0207 	bic.w	r2, r2, #7
     568:	f884 2072 	strb.w	r2, [r4, #114]	; 0x72
		conn_lll->data_chan_sel = 0;
     56c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
     570:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     574:	f062 027f 	orn	r2, r2, #127	; 0x7f
     578:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		conn_lll->slave.latency_enabled = 0;
     57c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
		conn_lll->link_tx_free = NULL;
     580:	2300      	movs	r3, #0
		conn_lll->slave.latency_enabled = 0;
     582:	f363 0200 	bfi	r2, r3, #0, #1
     586:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
		conn->connect_expire = 6;
     58a:	2206      	movs	r2, #6
     58c:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
		conn->common.fex_valid = 0;
     590:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
		conn_lll->link_tx_free = NULL;
     594:	66e3      	str	r3, [r4, #108]	; 0x6c
		conn->common.fex_valid = 0;
     596:	f022 0203 	bic.w	r2, r2, #3
     59a:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
		conn->llcp_feature.features_conn = LL_FEAT;
     59e:	228e      	movs	r2, #142	; 0x8e
		conn->llcp_feature.features_peer = 0;
     5a0:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     5a4:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		conn_lll->packet_tx_head_len = 0;
     5a8:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     5ac:	f022 0203 	bic.w	r2, r2, #3
		conn_lll->data_chan_use = 0;
     5b0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
     5b4:	8663      	strh	r3, [r4, #50]	; 0x32
		conn_lll->latency_event = 0;
     5b6:	6363      	str	r3, [r4, #52]	; 0x34
		conn_lll->slave.window_widening_event_us = 0;
     5b8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		conn_lll->slave.window_size_prepare_us = 0;
     5bc:	6563      	str	r3, [r4, #84]	; 0x54
		conn->supervision_expire = 0;
     5be:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
		conn->procedure_expire = 0;
     5c2:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     5c6:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
     5ca:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
		conn->llcp_rx = NULL;
     5ce:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     5d2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     5d6:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     5da:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     5de:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp_terminate.reason_peer = 0;
     5e2:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
		conn->llcp_conn_param.req = 0;
     5e6:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
		conn->llcp_conn_param.disabled = 0;
     5ea:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
		lll->conn = conn_lll;
     5ee:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
		adv->node_rx_cc_free = node_rx;
     5f2:	e9c5 9a11 	strd	r9, sl, [r5, #68]	; 0x44
		conn->llcp_conn_param.disabled = 0;
     5f6:	f363 1204 	bfi	r2, r3, #4, #1
     5fa:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     5fe:	f894 2020 	ldrb.w	r2, [r4, #32]
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     602:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
     606:	f363 0200 	bfi	r2, r3, #0, #1
		conn->tx_data = conn->tx_data_last = 0;
     60a:	e9c4 3348 	strd	r3, r3, [r4, #288]	; 0x120
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     60e:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     612:	e9c4 3305 	strd	r3, r3, [r4, #20]
	hdr->parent = parent;
     616:	61e4      	str	r4, [r4, #28]
	hdr->is_stop = 0U;
     618:	f884 2020 	strb.w	r2, [r4, #32]
		err = lll_clock_wait();
     61c:	f01a f854 	bl	1a6c8 <lll_clock_wait>
		if (err) {
     620:	b120      	cbz	r0, 62c <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x50>
			conn_release(adv);
     622:	486f      	ldr	r0, [pc, #444]	; (7e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x204>)
     624:	f017 ff18 	bl	18458 <conn_release>
			return BT_HCI_ERR_HW_FAILURE;
     628:	2603      	movs	r6, #3
     62a:	e740      	b.n	4ae <ll_adv_enable+0xe>
	uint8_t ch_map = lll->chan_map;
     62c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     630:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     632:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     636:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
	uint8_t ch_map = lll->chan_map;
     63a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     63e:	f026 fb9c 	bl	26d7a <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     642:	2800      	cmp	r0, #0
     644:	f000 80bf 	beq.w	7c6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x1ea>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     648:	783a      	ldrb	r2, [r7, #0]
     64a:	f002 020f 	and.w	r2, r2, #15
     64e:	2a02      	cmp	r2, #2
     650:	f100 34ff 	add.w	r4, r0, #4294967295
     654:	d172      	bne.n	73c <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x160>
			adv_size += pdu_adv->len;
     656:	787a      	ldrb	r2, [r7, #1]
     658:	3210      	adds	r2, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     65a:	00d2      	lsls	r2, r2, #3
     65c:	4350      	muls	r0, r2
     65e:	f500 72aa 	add.w	r2, r0, #340	; 0x154
     662:	2064      	movs	r0, #100	; 0x64
     664:	fb00 2004 	mla	r0, r0, r4, r2
     668:	f895 3020 	ldrb.w	r3, [r5, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     66c:	495d      	ldr	r1, [pc, #372]	; (7e4 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x208>)
	hdr->parent = parent;
     66e:	61ed      	str	r5, [r5, #28]
     670:	2400      	movs	r4, #0
	hdr->is_stop = 0U;
     672:	f364 0300 	bfi	r3, r4, #0, #1
     676:	f885 3020 	strb.w	r3, [r5, #32]
	adv->evt.ticks_xtal_to_start =
     67a:	2331      	movs	r3, #49	; 0x31
     67c:	602b      	str	r3, [r5, #0]
     67e:	e9c5 4405 	strd	r4, r4, [r5, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     682:	a355      	add	r3, pc, #340	; (adr r3, 7d8 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x1fc>)
     684:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_active_to_start = 0;
     688:	606c      	str	r4, [r5, #4]
	adv->evt.ticks_preempt_to_start =
     68a:	60ac      	str	r4, [r5, #8]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     68c:	fba0 0101 	umull	r0, r1, r0, r1
     690:	f7ff fd36 	bl	100 <__aeabi_uldivmod>
     694:	60e8      	str	r0, [r5, #12]
	uint16_t interval = adv->interval;
     696:	f8b5 804c 	ldrh.w	r8, [r5, #76]	; 0x4c
	ticks_anchor = ticker_ticks_now_get();
     69a:	f026 fdd6 	bl	2724a <ticker_ticks_now_get>
     69e:	4681      	mov	r9, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     6a0:	f1b8 0f00 	cmp.w	r8, #0
     6a4:	d105      	bne.n	6b2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xd6>
     6a6:	783c      	ldrb	r4, [r7, #0]
     6a8:	f004 040f 	and.w	r4, r4, #15
     6ac:	1e63      	subs	r3, r4, #1
     6ae:	425c      	negs	r4, r3
     6b0:	415c      	adcs	r4, r3
     6b2:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
     6b6:	68eb      	ldr	r3, [r5, #12]
     6b8:	f8df b13c 	ldr.w	fp, [pc, #316]	; 7f8 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x21c>
     6bc:	f364 0200 	bfi	r2, r4, #0, #1
	if (lll->is_hdcd) {
     6c0:	f012 0401 	ands.w	r4, r2, #1
     6c4:	f04f 0a02 	mov.w	sl, #2
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     6c8:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
	if (lll->is_hdcd) {
     6cc:	af0b      	add	r7, sp, #44	; 0x2c
     6ce:	4a46      	ldr	r2, [pc, #280]	; (7e8 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x20c>)
		ret_cb = TICKER_STATUS_BUSY;
     6d0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	if (lll->is_hdcd) {
     6d4:	d053      	beq.n	77e <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x1a2>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     6d6:	2000      	movs	r0, #0
     6d8:	e9cd 2505 	strd	r2, r5, [sp, #20]
     6dc:	9304      	str	r3, [sp, #16]
     6de:	e9cd 0300 	strd	r0, r3, [sp]
     6e2:	2103      	movs	r1, #3
     6e4:	e9cd b707 	strd	fp, r7, [sp, #28]
     6e8:	e9cd 0002 	strd	r0, r0, [sp, #8]
     6ec:	464b      	mov	r3, r9
     6ee:	4652      	mov	r2, sl
     6f0:	f026 fd78 	bl	271e4 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     6f4:	4639      	mov	r1, r7
     6f6:	f017 fb35 	bl	17d64 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     6fa:	2800      	cmp	r0, #0
     6fc:	d163      	bne.n	7c6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x1ea>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     6fe:	4a3b      	ldr	r2, [pc, #236]	; (7ec <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x210>)
     700:	9506      	str	r5, [sp, #24]
     702:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
     706:	e9cd 0204 	strd	r0, r2, [sp, #16]
     70a:	9300      	str	r3, [sp, #0]
     70c:	e9cd b707 	strd	fp, r7, [sp, #28]
     710:	e9cd 0002 	strd	r0, r0, [sp, #8]
     714:	9001      	str	r0, [sp, #4]
     716:	464b      	mov	r3, r9
     718:	2201      	movs	r2, #1
     71a:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     71c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     720:	f026 fd60 	bl	271e4 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     724:	4639      	mov	r1, r7
     726:	f017 fb1d 	bl	17d64 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     72a:	2800      	cmp	r0, #0
     72c:	d14b      	bne.n	7c6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x1ea>
	adv->is_enabled = 1;
     72e:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
     732:	f043 0301 	orr.w	r3, r3, #1
     736:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
	return 0;
     73a:	e6b8      	b.n	4ae <ll_adv_enable+0xe>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     73c:	2a01      	cmp	r2, #1
     73e:	d016      	beq.n	76e <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x192>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
     740:	f898 3001 	ldrb.w	r3, [r8, #1]
     744:	3310      	adds	r3, #16
		const uint16_t scan_rsp_us =
     746:	00db      	lsls	r3, r3, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     748:	b95a      	cbnz	r2, 762 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x186>
				adv_size += pdu_adv->len;
     74a:	787a      	ldrb	r2, [r7, #1]
     74c:	3210      	adds	r2, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
     74e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     752:	00d2      	lsls	r2, r2, #3
     754:	3398      	adds	r3, #152	; 0x98
     756:	4413      	add	r3, r2
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
     758:	f502 729a 	add.w	r2, r2, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     75c:	fb04 3002 	mla	r0, r4, r2, r3
     760:	e782      	b.n	668 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x8c>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     762:	2a06      	cmp	r2, #6
     764:	d107      	bne.n	776 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x19a>
				adv_size += pdu_adv->len;
     766:	7879      	ldrb	r1, [r7, #1]
     768:	f101 0210 	add.w	r2, r1, #16
     76c:	e7ef      	b.n	74e <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x172>
				adv_size += TARGETA_SIZE;
     76e:	2216      	movs	r2, #22
				slot_us += conn_ind_us;
     770:	f44f 732d 	mov.w	r3, #692	; 0x2b4
     774:	e7ed      	b.n	752 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x176>
		uint32_t adv_size		= PDU_OVERHEAD_SIZE(phy) +
     776:	2210      	movs	r2, #16
	uint32_t slot_us = EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
     778:	f44f 73aa 	mov.w	r3, #340	; 0x154
     77c:	e7e9      	b.n	752 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x176>
		ll_adv_ticker_ext[handle].ticks_slot_window =
     77e:	491c      	ldr	r1, [pc, #112]	; (7f0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x214>)
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     780:	f203 1047 	addw	r0, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     784:	6008      	str	r0, [r1, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     786:	481b      	ldr	r0, [pc, #108]	; (7f4 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x218>)
		ret = ticker_start_ext(
     788:	e9cd 3204 	strd	r3, r2, [sp, #16]
     78c:	e9cd 5b06 	strd	r5, fp, [sp, #24]
     790:	f64f 73ff 	movw	r3, #65535	; 0xffff
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     794:	fa1f fb88 	uxth.w	fp, r8
		ret = ticker_start_ext(
     798:	e9cd 7108 	strd	r7, r1, [sp, #32]
     79c:	e9cd 4302 	strd	r4, r3, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     7a0:	fbab 0100 	umull	r0, r1, fp, r0
     7a4:	2391      	movs	r3, #145	; 0x91
     7a6:	fb03 110b 	mla	r1, r3, fp, r1
     7aa:	a30b      	add	r3, pc, #44	; (adr r3, 7d8 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x1fc>)
     7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
     7b0:	f7ff fca6 	bl	100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     7b4:	464b      	mov	r3, r9
     7b6:	e9cd 4000 	strd	r4, r0, [sp]
     7ba:	4652      	mov	r2, sl
     7bc:	2103      	movs	r1, #3
     7be:	4620      	mov	r0, r4
     7c0:	f015 fe06 	bl	163d0 <ticker_start_ext>
     7c4:	e7ae      	b.n	724 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x148>
	if (adv->lll.conn) {
     7c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     7c8:	2b00      	cmp	r3, #0
     7ca:	f43f ae7b 	beq.w	4c4 <ll_adv_enable+0x24>
		conn_release(adv);
     7ce:	4804      	ldr	r0, [pc, #16]	; (7e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x204>)
     7d0:	f017 fe42 	bl	18458 <conn_release>
     7d4:	e676      	b.n	4c4 <ll_adv_enable+0x24>
     7d6:	bf00      	nop
     7d8:	1afd498d 	.word	0x1afd498d
     7dc:	00000007 	.word	0x00000007
     7e0:	20003874 	.word	0x20003874
     7e4:	3b9aca00 	.word	0x3b9aca00
     7e8:	00018369 	.word	0x00018369
     7ec:	000185a9 	.word	0x000185a9
     7f0:	200038c4 	.word	0x200038c4
     7f4:	84e72a00 	.word	0x84e72a00
     7f8:	0001768d 	.word	0x0001768d
     7fc:	00000000 	.word	0x00000000

00000800 <ull_scan_enable>:
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
						   SCAN_INT_UNIT_US);
}

uint8_t ull_scan_enable(struct ll_scan_set *scan)
{
     800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t volatile ret_cb;
	uint32_t ticks_interval;
	uint32_t ticks_anchor;
	uint32_t ret;

	lll->chan = 0;
     804:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	ll_addr_get(lll->init_addr_type, lll->init_addr);

	ull_hdr_init(&scan->ull);
	lll_hdr_init(lll, scan);

	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     808:	4f41      	ldr	r7, [pc, #260]	; (910 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x110>)
{
     80a:	4604      	mov	r4, r0
	lll->init_addr_type = scan->own_addr_type;
     80c:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
     810:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
     814:	f3c0 0040 	ubfx	r0, r0, #1, #1
     818:	f360 1386 	bfi	r3, r0, #6, #1
{
     81c:	b08d      	sub	sp, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
     81e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	ll_addr_get(lll->init_addr_type, lll->init_addr);
     822:	f104 0125 	add.w	r1, r4, #37	; 0x25
     826:	f015 fea3 	bl	16570 <ll_addr_get>
     82a:	f894 3020 	ldrb.w	r3, [r4, #32]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     82e:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
	hdr->parent = parent;
     832:	61e4      	str	r4, [r4, #28]
     834:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
     836:	f365 0300 	bfi	r3, r5, #0, #1
     83a:	fba8 0107 	umull	r0, r1, r8, r7
     83e:	f884 3020 	strb.w	r3, [r4, #32]
     842:	2391      	movs	r3, #145	; 0x91
     844:	fb03 1108 	mla	r1, r3, r8, r1
     848:	e9c4 5505 	strd	r5, r5, [r4, #20]
     84c:	a32e      	add	r3, pc, #184	; (adr r3, 908 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x108>)
     84e:	e9d3 2300 	ldrd	r2, r3, [r3]
     852:	f7ff fc55 	bl	100 <__aeabi_uldivmod>
						SCAN_INT_UNIT_US);

	/* TODO: active_to_start feature port */
	scan->evt.ticks_active_to_start = 0U;
	scan->evt.ticks_xtal_to_start =
     856:	2331      	movs	r3, #49	; 0x31
     858:	6023      	str	r3, [r4, #0]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	scan->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	if ((lll->ticks_window +
     85a:	6b63      	ldr	r3, [r4, #52]	; 0x34
	scan->evt.ticks_active_to_start = 0U;
     85c:	6065      	str	r5, [r4, #4]
	if ((lll->ticks_window +
     85e:	3309      	adds	r3, #9
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) <
	    (ticks_interval -
     860:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
     864:	4293      	cmp	r3, r2
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US))) {
		scan->evt.ticks_slot =
     866:	bf32      	itee	cc
     868:	60e3      	strcc	r3, [r4, #12]
			(lll->ticks_window +
			 HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US));
	} else {
		if (IS_ENABLED(CONFIG_BT_CTLR_SCAN_UNRESERVED)) {
			scan->evt.ticks_slot = 0U;
     86a:	60e5      	strcs	r5, [r4, #12]
		} else {
			scan->evt.ticks_slot = ticks_interval -
				HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
		}

		lll->ticks_window = 0U;
     86c:	6365      	strcs	r5, [r4, #52]	; 0x34
	scan->evt.ticks_preempt_to_start =
     86e:	60a5      	str	r5, [r4, #8]
	return &ll_scan[handle];
}

uint8_t ull_scan_handle_get(struct ll_scan_set *scan)
{
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     870:	4d28      	ldr	r5, [pc, #160]	; (914 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x114>)
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     872:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
     874:	f026 fce9 	bl	2724a <ticker_ticks_now_get>
	ret_cb = TICKER_STATUS_BUSY;
     878:	2302      	movs	r3, #2
     87a:	930b      	str	r3, [sp, #44]	; 0x2c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     87c:	1b65      	subs	r5, r4, r5
     87e:	233c      	movs	r3, #60	; 0x3c
     880:	fbb5 f5f3 	udiv	r5, r5, r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     884:	4b24      	ldr	r3, [pc, #144]	; (918 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x118>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     886:	f8b4 b032 	ldrh.w	fp, [r4, #50]	; 0x32
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     88a:	e9cd 4306 	strd	r4, r3, [sp, #24]
     88e:	4b23      	ldr	r3, [pc, #140]	; (91c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x11c>)
     890:	9305      	str	r3, [sp, #20]
     892:	46ba      	mov	sl, r7
     894:	68e3      	ldr	r3, [r4, #12]
     896:	9304      	str	r3, [sp, #16]
	ticks_anchor = ticker_ticks_now_get();
     898:	4607      	mov	r7, r0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     89a:	2391      	movs	r3, #145	; 0x91
     89c:	fbab 010a 	umull	r0, r1, fp, sl
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     8a0:	f04f 0800 	mov.w	r8, #0
     8a4:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     8a8:	fb03 110b 	mla	r1, r3, fp, r1
     8ac:	a316      	add	r3, pc, #88	; (adr r3, 908 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x108>)
     8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     8b2:	f8cd 9020 	str.w	r9, [sp, #32]
     8b6:	f8cd 800c 	str.w	r8, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     8ba:	f7ff fc21 	bl	100 <__aeabi_uldivmod>
     8be:	4610      	mov	r0, r2
     8c0:	4619      	mov	r1, r3
     8c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8c6:	2300      	movs	r3, #0
     8c8:	f7ff fc1a 	bl	100 <__aeabi_uldivmod>
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
     8cc:	3504      	adds	r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     8ce:	b2ed      	uxtb	r5, r5
     8d0:	e9cd 6001 	strd	r6, r0, [sp, #4]
     8d4:	2103      	movs	r1, #3
     8d6:	f8cd 8000 	str.w	r8, [sp]
     8da:	463b      	mov	r3, r7
     8dc:	462a      	mov	r2, r5
     8de:	4640      	mov	r0, r8
     8e0:	f026 fc80 	bl	271e4 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     8e4:	4649      	mov	r1, r9
     8e6:	f017 fa3d 	bl	17d64 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     8ea:	b940      	cbnz	r0, 8fe <ull_scan_enable+0xfe>
	scan->is_enabled = 1U;
     8ec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
     8f0:	f043 0301 	orr.w	r3, r3, #1
     8f4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
     8f8:	b00d      	add	sp, #52	; 0x34
     8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     8fe:	200c      	movs	r0, #12
     900:	e7fa      	b.n	8f8 <ull_scan_enable+0xf8>
     902:	bf00      	nop
     904:	f3af 8000 	nop.w
     908:	1afd498d 	.word	0x1afd498d
     90c:	00000007 	.word	0x00000007
     910:	84e72a00 	.word	0x84e72a00
     914:	200038e8 	.word	0x200038e8
     918:	0001768d 	.word	0x0001768d
     91c:	0001893d 	.word	0x0001893d

00000920 <ll_scan_params_set>:
{
     920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     922:	4606      	mov	r6, r0
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
     924:	2000      	movs	r0, #0
{
     926:	4615      	mov	r5, r2
     928:	461f      	mov	r7, r3
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
     92a:	f018 f875 	bl	18a18 <ull_scan_is_disabled_get>
	if (!scan) {
     92e:	4604      	mov	r4, r0
     930:	b1f8      	cbz	r0, 972 <ll_scan_params_set+0x52>
	scan->own_addr_type = own_addr_type;
     932:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
	lll->type = type;
     936:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	lll->interval = interval;
     93a:	8641      	strh	r1, [r0, #50]	; 0x32
	scan->own_addr_type = own_addr_type;
     93c:	f367 0242 	bfi	r2, r7, #1, #2
     940:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	lll->filter_policy = filter_policy;
     944:	f89d 2018 	ldrb.w	r2, [sp, #24]
	lll->type = type;
     948:	f366 13c7 	bfi	r3, r6, #7, #1
	lll->filter_policy = filter_policy;
     94c:	f362 03c4 	bfi	r3, r2, #3, #2
     950:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     954:	480a      	ldr	r0, [pc, #40]	; (980 <ll_scan_params_set+0x60>)
     956:	b2ad      	uxth	r5, r5
     958:	fba5 0100 	umull	r0, r1, r5, r0
     95c:	2391      	movs	r3, #145	; 0x91
     95e:	fb03 1105 	mla	r1, r3, r5, r1
     962:	a305      	add	r3, pc, #20	; (adr r3, 978 <ll_scan_params_set+0x58>)
     964:	e9d3 2300 	ldrd	r2, r3, [r3]
     968:	f7ff fbca 	bl	100 <__aeabi_uldivmod>
     96c:	6360      	str	r0, [r4, #52]	; 0x34
	return 0;
     96e:	2000      	movs	r0, #0
}
     970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     972:	200c      	movs	r0, #12
     974:	e7fc      	b.n	970 <ll_scan_params_set+0x50>
     976:	bf00      	nop
     978:	1afd498d 	.word	0x1afd498d
     97c:	00000007 	.word	0x00000007
     980:	84e72a00 	.word	0x84e72a00
     984:	00000000 	.word	0x00000000

00000988 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
     988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     98c:	4693      	mov	fp, r2
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
     98e:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
     992:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
     996:	4293      	cmp	r3, r2
{
     998:	b08d      	sub	sp, #52	; 0x34
     99a:	4604      	mov	r4, r0
     99c:	4688      	mov	r8, r1
	if ((conn->llcp_ack == conn->llcp_req) &&
     99e:	d10b      	bne.n	9b8 <ull_conn_llcp+0x30>
#endif /* !CONFIG_BT_CTLR_LE_ENC */

		/* TODO: Optimize the checks below, maybe have common flag */

		/* check if connection update procedure is requested */
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
     9a0:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
     9a4:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
     9a8:	4291      	cmp	r1, r2
     9aa:	d024      	beq.n	9f6 <ull_conn_llcp+0x6e>
			/* switch to LLCP_CONN_UPD state machine */
			conn->llcp_type = LLCP_CONN_UPD;
     9ac:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
     9ae:	3b02      	subs	r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
     9b0:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
			conn->llcp_ack -= 2U;
     9b4:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     9b8:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
     9bc:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
     9c0:	1ad3      	subs	r3, r2, r3
     9c2:	f003 0303 	and.w	r3, r3, #3
     9c6:	2b02      	cmp	r3, #2
     9c8:	f040 8265 	bne.w	e96 <ull_conn_llcp+0x50e>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Process procedures with instants or encryption setup */
		/* FIXME: Make LE Ping cacheable */
		switch (conn->llcp_type) {
     9cc:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
     9d0:	2b01      	cmp	r3, #1
     9d2:	f000 820e 	beq.w	df2 <ull_conn_llcp+0x46a>
     9d6:	2b02      	cmp	r3, #2
     9d8:	f000 8418 	beq.w	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
		}
		break;
#endif /* CONFIG_BT_CTLR_PHY */

		default:
			LL_ASSERT(0);
     9dc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
     9e0:	49ca      	ldr	r1, [pc, #808]	; (d0c <ull_conn_llcp+0x384>)
     9e2:	48cb      	ldr	r0, [pc, #812]	; (d10 <ull_conn_llcp+0x388>)
     9e4:	f021 fa71 	bl	21eca <printk>
     9e8:	4040      	eors	r0, r0
     9ea:	f380 8811 	msr	BASEPRI, r0
     9ee:	f04f 0003 	mov.w	r0, #3
     9f2:	df02      	svc	2
			break;
     9f4:	e24f      	b.n	e96 <ull_conn_llcp+0x50e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
     9f6:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
     9fa:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
     9fe:	428b      	cmp	r3, r1
     a00:	d063      	beq.n	aca <ull_conn_llcp+0x142>
static inline void event_fex_prep(struct ll_conn *conn)
{
	struct node_tx *tx;

	/* If waiting for response, do nothing */
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
     a02:	1a5b      	subs	r3, r3, r1
     a04:	07de      	lsls	r6, r3, #31
     a06:	d5d7      	bpl.n	9b8 <ull_conn_llcp+0x30>
		return;
	}

	if (conn->common.fex_valid) {
     a08:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
     a0c:	f011 0601 	ands.w	r6, r1, #1
     a10:	d02a      	beq.n	a68 <ull_conn_llcp+0xe0>
		struct node_rx_pdu *rx;
		struct pdu_data *pdu;

		/* get a rx node for ULL->LL */
		rx = ll_pdu_rx_alloc();
     a12:	f017 f949 	bl	17ca8 <ll_pdu_rx_alloc>
		if (!rx) {
     a16:	4605      	mov	r5, r0
     a18:	2800      	cmp	r0, #0
     a1a:	d0cd      	beq.n	9b8 <ull_conn_llcp+0x30>
			return;
		}

		/* procedure request acked */
		conn->llcp_feature.ack = conn->llcp_feature.req;
     a1c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
     a20:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5

		/* prepare feature rsp structure */
		rx->hdr.handle = conn->lll.handle;
     a24:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     a26:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     a28:	2303      	movs	r3, #3
     a2a:	7103      	strb	r3, [r0, #4]
		pdu = (void *)rx->pdu;
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     a2c:	7f03      	ldrb	r3, [r0, #28]
     a2e:	f043 0303 	orr.w	r3, r3, #3
     a32:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
     a34:	2309      	movs	r3, #9
     a36:	7743      	strb	r3, [r0, #29]
			   sizeof(struct pdu_data_llctrl_feature_rsp);
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
     a38:	77c3      	strb	r3, [r0, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
     a3a:	2208      	movs	r2, #8
     a3c:	2100      	movs	r1, #0
     a3e:	3020      	adds	r0, #32
     a40:	f023 fbaf 	bl	241a2 <memset>
			sizeof(pdu->llctrl.feature_rsp.features));
		sys_put_le24(conn->llcp_feature.features_peer,
     a44:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
     a48:	f885 3020 	strb.w	r3, [r5, #32]
	dst[1] = val >> 8;
     a4c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le24(uint32_t val, uint8_t dst[3])
{
	sys_put_le16(val, dst);
	dst[2] = val >> 16;
     a50:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
     a52:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	dst[2] = val >> 16;
     a56:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
			     pdu->llctrl.feature_req.features);

		/* enqueue feature rsp structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     a5a:	4629      	mov	r1, r5
			sys_cpu_to_le16(conn->llcp_version.company_id);
		pdu->llctrl.version_ind.sub_version_number =
			sys_cpu_to_le16(conn->llcp_version.sub_version_number);

		/* enqueue version ind structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     a5c:	6808      	ldr	r0, [r1, #0]
     a5e:	f017 f8fb 	bl	17c58 <ll_rx_put>
		ll_rx_sched();
     a62:	f017 f903 	bl	17c6c <ll_rx_sched>
     a66:	e7a7      	b.n	9b8 <ull_conn_llcp+0x30>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     a68:	48aa      	ldr	r0, [pc, #680]	; (d14 <ull_conn_llcp+0x38c>)
     a6a:	f026 f90a 	bl	26c82 <mem_acquire>
	if (tx) {
     a6e:	4605      	mov	r5, r0
     a70:	2800      	cmp	r0, #0
     a72:	d0a1      	beq.n	9b8 <ull_conn_llcp+0x30>
		conn->llcp_feature.ack--;
     a74:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
     a78:	3b01      	subs	r3, #1
     a7a:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
		conn->llcp_feature.features_conn = LL_FEAT;
     a7e:	238e      	movs	r3, #142	; 0x8e
     a80:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     a84:	7903      	ldrb	r3, [r0, #4]
     a86:	f043 0303 	orr.w	r3, r3, #3
     a8a:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
     a8c:	2309      	movs	r3, #9
     a8e:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
     a90:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
     a94:	2b00      	cmp	r3, #0
     a96:	bfac      	ite	ge
     a98:	2308      	movge	r3, #8
     a9a:	230e      	movlt	r3, #14
		(void)memset(&pdu->llctrl.feature_req.features[0],
     a9c:	2208      	movs	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
     a9e:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
     aa0:	4631      	mov	r1, r6
     aa2:	4410      	add	r0, r2
     aa4:	f023 fb7d 	bl	241a2 <memset>
		sys_put_le24(conn->llcp_feature.features_conn,
     aa8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	dst[0] = val;
     aac:	722b      	strb	r3, [r5, #8]
	dst[1] = val >> 8;
     aae:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
     ab2:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
     ab4:	726a      	strb	r2, [r5, #9]
	dst[2] = val >> 16;
     ab6:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, tx);
     ab8:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, tx);
     aba:	4620      	mov	r0, r4
     abc:	f026 fd4c 	bl	27558 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
     ac0:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
     ac4:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
     ac8:	e776      	b.n	9b8 <ull_conn_llcp+0x30>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
     aca:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
     ace:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
     ad2:	428b      	cmp	r3, r1
     ad4:	d05e      	beq.n	b94 <ull_conn_llcp+0x20c>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
     ad6:	1a5b      	subs	r3, r3, r1
     ad8:	07dd      	lsls	r5, r3, #31
     ada:	f57f af6d 	bpl.w	9b8 <ull_conn_llcp+0x30>
	if (conn->llcp_version.tx == 0U) {
     ade:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
     ae2:	f013 0501 	ands.w	r5, r3, #1
     ae6:	d123      	bne.n	b30 <ull_conn_llcp+0x1a8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     ae8:	488a      	ldr	r0, [pc, #552]	; (d14 <ull_conn_llcp+0x38c>)
     aea:	f026 f8ca 	bl	26c82 <mem_acquire>
		if (tx) {
     aee:	4601      	mov	r1, r0
     af0:	2800      	cmp	r0, #0
     af2:	f43f af61 	beq.w	9b8 <ull_conn_llcp+0x30>
			conn->llcp_version.ack--;
     af6:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
     afa:	3b01      	subs	r3, #1
     afc:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
			conn->llcp_version.tx = 1U;
     b00:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
     b04:	f043 0301 	orr.w	r3, r3, #1
     b08:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
			pdu->ll_id = PDU_DATA_LLID_CTRL;
     b0c:	7903      	ldrb	r3, [r0, #4]
			pdu->llctrl.version_ind.company_id = cid;
     b0e:	7285      	strb	r5, [r0, #10]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
     b10:	f043 0303 	orr.w	r3, r3, #3
     b14:	7103      	strb	r3, [r0, #4]
			pdu->len =
     b16:	2306      	movs	r3, #6
     b18:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
     b1a:	230c      	movs	r3, #12
     b1c:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
     b1e:	230b      	movs	r3, #11
     b20:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
     b22:	2359      	movs	r3, #89	; 0x59
     b24:	7243      	strb	r3, [r0, #9]
			pdu->llctrl.version_ind.sub_version_number = svn;
     b26:	f04f 33ff 	mov.w	r3, #4294967295
     b2a:	72c3      	strb	r3, [r0, #11]
     b2c:	7303      	strb	r3, [r0, #12]
     b2e:	e7c4      	b.n	aba <ull_conn_llcp+0x132>
	} else if (conn->llcp_version.rx) {
     b30:	0798      	lsls	r0, r3, #30
     b32:	d522      	bpl.n	b7a <ull_conn_llcp+0x1f2>
		rx = ll_pdu_rx_alloc();
     b34:	f017 f8b8 	bl	17ca8 <ll_pdu_rx_alloc>
		if (!rx) {
     b38:	4601      	mov	r1, r0
     b3a:	2800      	cmp	r0, #0
     b3c:	f43f af3c 	beq.w	9b8 <ull_conn_llcp+0x30>
		conn->llcp_version.ack = conn->llcp_version.req;
     b40:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
     b44:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		rx->hdr.handle = conn->lll.handle;
     b48:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     b4a:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     b4c:	2303      	movs	r3, #3
     b4e:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     b50:	7f03      	ldrb	r3, [r0, #28]
     b52:	f043 0303 	orr.w	r3, r3, #3
     b56:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
     b58:	2306      	movs	r3, #6
     b5a:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
     b5c:	230c      	movs	r3, #12
     b5e:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
     b60:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
     b64:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
     b68:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
     b6c:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
     b70:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
     b74:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
     b78:	e770      	b.n	a5c <ull_conn_llcp+0xd4>
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
     b7a:	f640 327a 	movw	r2, #2938	; 0xb7a
	case LLCP_CPR_STATE_UPD:
		/* Do nothing */
		break;

	default:
		LL_ASSERT(0);
     b7e:	4963      	ldr	r1, [pc, #396]	; (d0c <ull_conn_llcp+0x384>)
     b80:	4863      	ldr	r0, [pc, #396]	; (d10 <ull_conn_llcp+0x388>)
     b82:	f021 f9a2 	bl	21eca <printk>
     b86:	4040      	eors	r0, r0
     b88:	f380 8811 	msr	BASEPRI, r0
     b8c:	f04f 0003 	mov.w	r0, #3
     b90:	df02      	svc	2
		break;
     b92:	e711      	b.n	9b8 <ull_conn_llcp+0x30>
		} else if (conn->llcp_conn_param.ack !=
     b94:	f890 10ed 	ldrb.w	r1, [r0, #237]	; 0xed
     b98:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
     b9c:	4299      	cmp	r1, r3
     b9e:	f43f af0b 	beq.w	9b8 <ull_conn_llcp+0x30>
	conn_upd = conn_upd_curr;
     ba2:	4d5d      	ldr	r5, [pc, #372]	; (d18 <ull_conn_llcp+0x390>)
     ba4:	682b      	ldr	r3, [r5, #0]
	if (conn_upd && (conn_upd != conn)) {
     ba6:	b113      	cbz	r3, bae <ull_conn_llcp+0x226>
     ba8:	4298      	cmp	r0, r3
     baa:	f47f af05 	bne.w	9b8 <ull_conn_llcp+0x30>
	switch (conn->llcp_conn_param.state) {
     bae:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
     bb2:	f003 0307 	and.w	r3, r3, #7
     bb6:	2b05      	cmp	r3, #5
     bb8:	f200 8118 	bhi.w	dec <ull_conn_llcp+0x464>
     bbc:	a101      	add	r1, pc, #4	; (adr r1, bc4 <ull_conn_llcp+0x23c>)
     bbe:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     bc2:	bf00      	nop
     bc4:	00000bdd 	.word	0x00000bdd
     bc8:	00000c57 	.word	0x00000c57
     bcc:	00000da3 	.word	0x00000da3
     bd0:	000009b9 	.word	0x000009b9
     bd4:	000009b9 	.word	0x000009b9
     bd8:	000009b9 	.word	0x000009b9
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     bdc:	484d      	ldr	r0, [pc, #308]	; (d14 <ull_conn_llcp+0x38c>)
			event_counter = lll->event_counter +
     bde:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
     be0:	8e67      	ldrh	r7, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     be2:	f026 f84e 	bl	26c82 <mem_acquire>
	if (!tx) {
     be6:	4601      	mov	r1, r0
     be8:	2800      	cmp	r0, #0
     bea:	f43f aee5 	beq.w	9b8 <ull_conn_llcp+0x30>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
     bee:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
     bf2:	2204      	movs	r2, #4
     bf4:	f362 0302 	bfi	r3, r2, #0, #3
     bf8:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     bfc:	7903      	ldrb	r3, [r0, #4]
     bfe:	f043 0303 	orr.w	r3, r3, #3
     c02:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     c04:	2318      	movs	r3, #24
     c06:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     c08:	230f      	movs	r3, #15
     c0a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
     c0c:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
     c10:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
     c12:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
     c16:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
     c18:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
     c1c:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
     c1e:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
     c22:	81c3      	strh	r3, [r0, #14]
			event_counter = lll->event_counter +
     c24:	443e      	add	r6, r7
	p->preferred_periodicity = 0U;
     c26:	2300      	movs	r3, #0
     c28:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
     c2a:	74c3      	strb	r3, [r0, #19]
     c2c:	7503      	strb	r3, [r0, #20]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
     c2e:	445e      	add	r6, fp
	p->offset1 = sys_cpu_to_le16(0xffff);
     c30:	f04f 33ff 	mov.w	r3, #4294967295
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
     c34:	f8a0 6011 	strh.w	r6, [r0, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
     c38:	7543      	strb	r3, [r0, #21]
     c3a:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
     c3c:	75c3      	strb	r3, [r0, #23]
     c3e:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
     c40:	7643      	strb	r3, [r0, #25]
     c42:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
     c44:	76c3      	strb	r3, [r0, #27]
     c46:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
     c48:	7743      	strb	r3, [r0, #29]
     c4a:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, tx);
     c4c:	4620      	mov	r0, r4
     c4e:	f026 fc83 	bl	27558 <ctrl_tx_enqueue>
	conn_upd_curr = conn;
     c52:	602c      	str	r4, [r5, #0]
	conn->procedure_expire = conn->procedure_reload;
     c54:	e734      	b.n	ac0 <ull_conn_llcp+0x138>
	if (conn->llcp_conn_param.status) {
     c56:	f894 60ef 	ldrb.w	r6, [r4, #239]	; 0xef
     c5a:	b1ee      	cbz	r6, c98 <ull_conn_llcp+0x310>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     c5c:	482d      	ldr	r0, [pc, #180]	; (d14 <ull_conn_llcp+0x38c>)
     c5e:	f026 f810 	bl	26c82 <mem_acquire>
		if (!tx) {
     c62:	4601      	mov	r1, r0
     c64:	2800      	cmp	r0, #0
     c66:	f43f aea7 	beq.w	9b8 <ull_conn_llcp+0x30>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     c6a:	7903      	ldrb	r3, [r0, #4]
     c6c:	f043 0303 	orr.w	r3, r3, #3
     c70:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
     c72:	2311      	movs	r3, #17
     c74:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
     c76:	2303      	movs	r3, #3
     c78:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     c7a:	230f      	movs	r3, #15
     c7c:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
     c7e:	f894 30ef 	ldrb.w	r3, [r4, #239]	; 0xef
     c82:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, tx);
     c84:	4620      	mov	r0, r4
     c86:	f026 fc67 	bl	27558 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     c8a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
     c8e:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn_upd_curr = NULL;
     c92:	2300      	movs	r3, #0
     c94:	602b      	str	r3, [r5, #0]
		return;
     c96:	e68f      	b.n	9b8 <ull_conn_llcp+0x30>
	if (!conn->lll.role) {
     c98:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
     c9c:	2b00      	cmp	r3, #0
     c9e:	db3d      	blt.n	d1c <ull_conn_llcp+0x394>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     ca0:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
		conn->llcp_cu.win_offset_us = 0U;
     ca4:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     ca8:	2105      	movs	r1, #5
     caa:	f361 0302 	bfi	r3, r1, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
     cae:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     cb2:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
		conn->llcp_cu.win_size = 1U;
     cb6:	2301      	movs	r3, #1
     cb8:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		if (conn->llcp_conn_param.preferred_periodicity) {
     cbc:	b311      	cbz	r1, d04 <ull_conn_llcp+0x37c>
				((conn->llcp_conn_param.interval_min /
     cbe:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
     cc2:	fbb3 f3f1 	udiv	r3, r3, r1
				  conn->llcp_conn_param.preferred_periodicity) +
     cc6:	3301      	adds	r3, #1
			conn->llcp_cu.interval =
     cc8:	fb13 f301 	smulbb	r3, r3, r1
     ccc:	b29b      	uxth	r3, r3
     cce:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
     cd2:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
     cd6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
     cda:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
     cde:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
     ce2:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
     ce6:	2102      	movs	r1, #2
     ce8:	f361 0301 	bfi	r3, r1, #0, #2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
     cec:	f894 10ee 	ldrb.w	r1, [r4, #238]	; 0xee
     cf0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
     cf4:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_cu.ack--;
     cf8:	3a01      	subs	r2, #1
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
     cfa:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.ack--;
     cfe:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
		return;
     d02:	e659      	b.n	9b8 <ull_conn_llcp+0x30>
				conn->llcp_conn_param.interval_max;
     d04:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
     d08:	e7e1      	b.n	cce <ull_conn_llcp+0x346>
     d0a:	bf00      	nop
     d0c:	0002f46e 	.word	0x0002f46e
     d10:	0002a026 	.word	0x0002a026
     d14:	20003d40 	.word	0x20003d40
     d18:	20003cbc 	.word	0x20003cbc
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     d1c:	4863      	ldr	r0, [pc, #396]	; (eac <ull_conn_llcp+0x524>)
     d1e:	f025 ffb0 	bl	26c82 <mem_acquire>
	if (!tx) {
     d22:	4601      	mov	r1, r0
     d24:	2800      	cmp	r0, #0
     d26:	f43f ae47 	beq.w	9b8 <ull_conn_llcp+0x30>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     d2a:	7903      	ldrb	r3, [r0, #4]
     d2c:	f043 0303 	orr.w	r3, r3, #3
     d30:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
     d32:	2318      	movs	r3, #24
     d34:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
     d36:	2310      	movs	r3, #16
     d38:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min =
     d3a:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
     d3e:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
     d40:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
     d44:	8143      	strh	r3, [r0, #10]
	rsp->latency =
     d46:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
     d4a:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
     d4c:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
     d50:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
     d52:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
     d56:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
     d58:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
     d5c:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
     d60:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     d64:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
     d68:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     d6c:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
     d70:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
     d74:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
     d78:	f8b4 3102 	ldrh.w	r3, [r4, #258]	; 0x102
     d7c:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
     d80:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
     d84:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
     d88:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
     d8c:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, tx);
     d90:	4620      	mov	r0, r4
     d92:	f026 fbe1 	bl	27558 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     d96:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
     d9a:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn_upd_curr = NULL;
     d9e:	602e      	str	r6, [r5, #0]
     da0:	e60a      	b.n	9b8 <ull_conn_llcp+0x30>
	rx = ll_pdu_rx_alloc();
     da2:	f016 ff81 	bl	17ca8 <ll_pdu_rx_alloc>
	if (!rx) {
     da6:	4601      	mov	r1, r0
     da8:	2800      	cmp	r0, #0
     daa:	f43f ae05 	beq.w	9b8 <ull_conn_llcp+0x30>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
     dae:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
     db2:	2303      	movs	r3, #3
     db4:	f363 0202 	bfi	r2, r3, #0, #3
     db8:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
	rx->hdr.handle = conn->lll.handle;
     dbc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     dbe:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     dc0:	7f03      	ldrb	r3, [r0, #28]
	rx->hdr.handle = conn->lll.handle;
     dc2:	80c2      	strh	r2, [r0, #6]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     dc4:	f043 0303 	orr.w	r3, r3, #3
     dc8:	7703      	strb	r3, [r0, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     dca:	2318      	movs	r3, #24
     dcc:	7743      	strb	r3, [r0, #29]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     dce:	230f      	movs	r3, #15
     dd0:	77c3      	strb	r3, [r0, #31]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
     dd2:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
     dd6:	8403      	strh	r3, [r0, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
     dd8:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
     ddc:	8443      	strh	r3, [r0, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
     dde:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
     de2:	8483      	strh	r3, [r0, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
     de4:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
     de8:	84c3      	strh	r3, [r0, #38]	; 0x26
	ll_rx_put(rx->hdr.link, rx);
     dea:	e637      	b.n	a5c <ull_conn_llcp+0xd4>
		LL_ASSERT(0);
     dec:	f640 4287 	movw	r2, #3207	; 0xc87
     df0:	e6c5      	b.n	b7e <ull_conn_llcp+0x1f6>
	conn_upd = conn_upd_curr;
     df2:	4b2f      	ldr	r3, [pc, #188]	; (eb0 <ull_conn_llcp+0x528>)
	if (!conn_upd) {
     df4:	6819      	ldr	r1, [r3, #0]
     df6:	b901      	cbnz	r1, dfa <ull_conn_llcp+0x472>
		conn_upd_curr = conn;
     df8:	601c      	str	r4, [r3, #0]
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     dfa:	8e61      	ldrh	r1, [r4, #50]	; 0x32
     dfc:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
     dfe:	440e      	add	r6, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     e00:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     e04:	445e      	add	r6, fp
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     e06:	f011 0003 	ands.w	r0, r1, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     e0a:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     e0c:	d052      	beq.n	eb4 <ull_conn_llcp+0x52c>
		rx = ll_pdu_rx_alloc_peek(1);
     e0e:	2001      	movs	r0, #1
     e10:	f016 ff32 	bl	17c78 <ll_pdu_rx_alloc_peek>
		if (!rx) {
     e14:	4607      	mov	r7, r0
     e16:	2800      	cmp	r0, #0
     e18:	d03d      	beq.n	e96 <ull_conn_llcp+0x50e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     e1a:	4824      	ldr	r0, [pc, #144]	; (eac <ull_conn_llcp+0x524>)
     e1c:	f025 ff31 	bl	26c82 <mem_acquire>
		if (!tx) {
     e20:	4605      	mov	r5, r0
     e22:	b3c0      	cbz	r0, e96 <ull_conn_llcp+0x50e>
		(void)ll_pdu_rx_alloc();
     e24:	f016 ff40 	bl	17ca8 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
     e28:	683b      	ldr	r3, [r7, #0]
     e2a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
     e2e:	605a      	str	r2, [r3, #4]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     e30:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_rx = rx;
     e34:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     e38:	f36f 0301 	bfc	r3, #0, #2
     e3c:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
     e40:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     e42:	441e      	add	r6, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e44:	792b      	ldrb	r3, [r5, #4]
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
     e46:	3606      	adds	r6, #6
     e48:	b2b6      	uxth	r6, r6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e4a:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
     e4e:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e52:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     e54:	230c      	movs	r3, #12
     e56:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     e58:	2300      	movs	r3, #0
     e5a:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
     e5c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
     e60:	722b      	strb	r3, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     e62:	f240 42e2 	movw	r2, #1250	; 0x4e2
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
     e66:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     e6a:	fbb3 f3f2 	udiv	r3, r3, r2
     e6e:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
     e72:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
     e76:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
     e7a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
     e7e:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
     e82:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
     e86:	f8a5 300f 	strh.w	r3, [r5, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
     e8a:	f8a5 6011 	strh.w	r6, [r5, #17]
			ctrl_tx_enqueue(conn, tx);
     e8e:	4629      	mov	r1, r5
     e90:	4620      	mov	r0, r4
     e92:	f026 fb61 	bl	27558 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
     e96:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
     e9a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
     e9e:	429a      	cmp	r2, r3
     ea0:	f040 8204 	bne.w	12ac <CONFIG_FPROTECT_BLOCK_SIZE+0x2ac>
	return 0;
     ea4:	2000      	movs	r0, #0
}
     ea6:	b00d      	add	sp, #52	; 0x34
     ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     eac:	20003d40 	.word	0x20003d40
     eb0:	20003cbc 	.word	0x20003cbc
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     eb4:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
     eb8:	910a      	str	r1, [sp, #40]	; 0x28
     eba:	1a77      	subs	r7, r6, r1
     ebc:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
     ebe:	0439      	lsls	r1, r7, #16
     ec0:	d4e9      	bmi.n	e96 <ull_conn_llcp+0x50e>
		conn->llcp_cu.ack = conn->llcp_cu.req;
     ec2:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
     ec6:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
		conn->llcp_ack = conn->llcp_req;
     eca:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     ece:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
     ed2:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
     ed6:	428a      	cmp	r2, r1
     ed8:	d009      	beq.n	eee <ull_conn_llcp+0x566>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     eda:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     ede:	f002 0207 	and.w	r2, r2, #7
     ee2:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     ee4:	bf04      	itt	eq
     ee6:	f884 10ed 	strbeq.w	r1, [r4, #237]	; 0xed
			conn->procedure_expire = 0U;
     eea:	f8a4 007c 	strheq.w	r0, [r4, #124]	; 0x7c
		if (conn_upd_curr == conn) {
     eee:	681a      	ldr	r2, [r3, #0]
		rx = conn->llcp_rx;
     ef0:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
		if (conn_upd_curr == conn) {
     ef4:	4294      	cmp	r4, r2
	conn_upd_curr = NULL;
     ef6:	bf04      	itt	eq
     ef8:	2200      	moveq	r2, #0
     efa:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
     efc:	b10d      	cbz	r5, f02 <ull_conn_llcp+0x57a>
     efe:	682b      	ldr	r3, [r5, #0]
     f00:	b95b      	cbnz	r3, f1a <ull_conn_llcp+0x592>
     f02:	f640 120e 	movw	r2, #2318	; 0x90e
     f06:	49b8      	ldr	r1, [pc, #736]	; (11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>)
     f08:	48b8      	ldr	r0, [pc, #736]	; (11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>)
     f0a:	f020 ffde 	bl	21eca <printk>
     f0e:	4040      	eors	r0, r0
     f10:	f380 8811 	msr	BASEPRI, r0
     f14:	f04f 0003 	mov.w	r0, #3
     f18:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
     f1a:	6828      	ldr	r0, [r5, #0]
		if ((conn->llcp_cu.interval != lll->interval) ||
     f1c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
		conn->llcp_rx = rx->hdr.link->mem;
     f20:	6843      	ldr	r3, [r0, #4]
     f22:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		if ((conn->llcp_cu.interval != lll->interval) ||
     f26:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
     f28:	f8b4 c0a6 	ldrh.w	ip, [r4, #166]	; 0xa6
     f2c:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
     f30:	429a      	cmp	r2, r3
     f32:	d113      	bne.n	f5c <ull_conn_llcp+0x5d4>
     f34:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     f36:	4563      	cmp	r3, ip
     f38:	d110      	bne.n	f5c <ull_conn_llcp+0x5d4>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
     f3a:	f240 43e2 	movw	r3, #1250	; 0x4e2
     f3e:	fb03 fe02 	mul.w	lr, r3, r2
     f42:	f242 7310 	movw	r3, #10000	; 0x2710
     f46:	fb03 e301 	mla	r3, r3, r1, lr
     f4a:	3b01      	subs	r3, #1
     f4c:	fbb3 f3fe 	udiv	r3, r3, lr
		    (conn->llcp_cu.latency != lll->latency) ||
     f50:	f8b4 e076 	ldrh.w	lr, [r4, #118]	; 0x76
     f54:	b29b      	uxth	r3, r3
     f56:	459e      	cmp	lr, r3
     f58:	f000 8120 	beq.w	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
			rx->hdr.handle = lll->handle;
     f5c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     f5e:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     f60:	2315      	movs	r3, #21
     f62:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
     f64:	2300      	movs	r3, #0
     f66:	772b      	strb	r3, [r5, #28]
			cu->interval = conn->llcp_cu.interval;
     f68:	83ea      	strh	r2, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
     f6a:	f8a5 c020 	strh.w	ip, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
     f6e:	8469      	strh	r1, [r5, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
     f70:	4629      	mov	r1, r5
     f72:	f016 fe71 	bl	17c58 <ll_rx_put>
		ll_rx_sched();
     f76:	f016 fe79 	bl	17c6c <ll_rx_sched>
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
     f7a:	6823      	ldr	r3, [r4, #0]
     f7c:	2b00      	cmp	r3, #0
     f7e:	da0a      	bge.n	f96 <ull_conn_llcp+0x60e>
			uint32_t ticks_prepare_to_start =
     f80:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
     f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
     f88:	4290      	cmp	r0, r2
     f8a:	bf2c      	ite	cs
     f8c:	4480      	addcs	r8, r0
     f8e:	4490      	addcc	r8, r2
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
     f90:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
     f92:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * lll->interval;
     f96:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
     f98:	f8b4 50a4 	ldrh.w	r5, [r4, #164]	; 0xa4
     f9c:	f8df a268 	ldr.w	sl, [pc, #616]	; 1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
		conn_interval_old = instant_latency * lll->interval;
     fa0:	fb13 f307 	smulbb	r3, r3, r7
     fa4:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
     fa6:	fbb3 f1f5 	udiv	r1, r3, r5
     faa:	fa1f f981 	uxth.w	r9, r1
		conn_interval_new = latency * conn->llcp_cu.interval;
     fae:	fb15 f209 	smulbb	r2, r5, r9
     fb2:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
     fb4:	4293      	cmp	r3, r2
     fb6:	f240 40e2 	movw	r0, #1250	; 0x4e2
     fba:	f080 80f2 	bcs.w	11a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a2>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     fbe:	1ad3      	subs	r3, r2, r3
     fc0:	4358      	muls	r0, r3
     fc2:	fba0 010a 	umull	r0, r1, r0, sl
     fc6:	a386      	add	r3, pc, #536	; (adr r3, 11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>)
     fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
     fcc:	f7ff f898 	bl	100 <__aeabi_uldivmod>
     fd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     fd4:	4480      	add	r8, r0
		lll->latency_prepare += lazy;
     fd6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     fd8:	449b      	add	fp, r3
		lll->latency_prepare -= (instant_latency - latency);
     fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     fdc:	1b9e      	subs	r6, r3, r6
		} else if (lll->role) {
     fde:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
     fe2:	444e      	add	r6, r9
     fe4:	445e      	add	r6, fp
		} else if (lll->role) {
     fe6:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
     fe8:	f240 4be2 	movw	fp, #1250	; 0x4e2
		lll->latency_prepare -= (instant_latency - latency);
     fec:	8666      	strh	r6, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval *
     fee:	fb0b f505 	mul.w	r5, fp, r5
		} else if (lll->role) {
     ff2:	f280 80e4 	bge.w	11be <CONFIG_FPROTECT_BLOCK_SIZE+0x1be>
			lll->slave.window_widening_prepare_us -=
     ff6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
     ff8:	6c63      	ldr	r3, [r4, #68]	; 0x44
			lll->slave.window_widening_prepare_us -=
     ffa:	fb03 2717 	mls	r7, r3, r7, r2
     ffe:	64e7      	str	r7, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
    1000:	f026 fc8a 	bl	27918 <lll_clock_ppm_local_get>
    1004:	4606      	mov	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1006:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
    100a:	f3c0 0082 	ubfx	r0, r0, #2, #3
    100e:	f019 fba9 	bl	1a764 <lll_clock_ppm_get>
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1012:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
				(((lll_clock_ppm_local_get() +
    1016:	4406      	add	r6, r0
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1018:	fb0b f202 	mul.w	r2, fp, r2
			lll->slave.window_size_prepare_us =
    101c:	6562      	str	r2, [r4, #84]	; 0x54
				   lll_clock_ppm_get(conn->slave.sca)) *
    101e:	436e      	muls	r6, r5
			conn->slave.ticks_to_offset = 0U;
    1020:	2200      	movs	r2, #0
    1022:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1026:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
			lll->slave.window_widening_prepare_us +=
    102a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    102c:	4870      	ldr	r0, [pc, #448]	; (11f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f0>)
    102e:	f206 263f 	addw	r6, r6, #575	; 0x23f
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1032:	086b      	lsrs	r3, r5, #1
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1034:	fbb6 f6f0 	udiv	r6, r6, r0
				lll->slave.window_widening_periodic_us *
    1038:	fb06 f009 	mul.w	r0, r6, r9
				(conn_interval_us >> 1) - EVENT_IFS_US;
    103c:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    103e:	4402      	add	r2, r0
			lll->slave.window_widening_max_us =
    1040:	64a3      	str	r3, [r4, #72]	; 0x48
			lll->slave.window_widening_prepare_us +=
    1042:	429a      	cmp	r2, r3
    1044:	bf94      	ite	ls
    1046:	64e2      	strls	r2, [r4, #76]	; 0x4c
    1048:	64e3      	strhi	r3, [r4, #76]	; 0x4c
			lll->slave.window_widening_periodic_us =
    104a:	6466      	str	r6, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    104c:	a364      	add	r3, pc, #400	; (adr r3, 11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>)
    104e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1052:	fba0 010a 	umull	r0, r1, r0, sl
    1056:	f7ff f853 	bl	100 <__aeabi_uldivmod>
    105a:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    105e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    1062:	fbb0 f0fb 	udiv	r0, r0, fp
    1066:	fb0b f000 	mul.w	r0, fp, r0
    106a:	a35d      	add	r3, pc, #372	; (adr r3, 11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>)
    106c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1070:	fba0 010a 	umull	r0, r1, r0, sl
    1074:	f7ff f844 	bl	100 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    1078:	eba5 0906 	sub.w	r9, r5, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    107c:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		lll->interval = conn->llcp_cu.interval;
    1080:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    1084:	85e3      	strh	r3, [r4, #46]	; 0x2e
		lll->latency = conn->llcp_cu.latency;
    1086:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    108a:	8623      	strh	r3, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    108c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    1090:	f242 7210 	movw	r2, #10000	; 0x2710
    1094:	fb02 5303 	mla	r3, r2, r3, r5
    1098:	3b01      	subs	r3, #1
    109a:	fbb3 f3f5 	udiv	r3, r3, r5
    109e:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    10a2:	4b54      	ldr	r3, [pc, #336]	; (11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>)
    10a4:	442b      	add	r3, r5
    10a6:	fbb3 f5f5 	udiv	r5, r3, r5
		if (conn->llcp_cu.cmd) {
    10aa:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    10ae:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
		if (conn->llcp_cu.cmd) {
    10b2:	075a      	lsls	r2, r3, #29
			conn->supervision_expire = 0U;
    10b4:	bf44      	itt	mi
    10b6:	2300      	movmi	r3, #0
    10b8:	f8a4 3078 	strhmi.w	r3, [r4, #120]	; 0x78
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    10bc:	2102      	movs	r1, #2
    10be:	2001      	movs	r0, #1
    10c0:	f01b f8fc 	bl	1c2bc <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    10c4:	2200      	movs	r2, #0
    10c6:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    10c8:	4606      	mov	r6, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    10ca:	2001      	movs	r0, #1
    10cc:	f014 fc18 	bl	15900 <mayfly_enable>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    10d0:	4620      	mov	r0, r4
    10d2:	f017 fdf1 	bl	18cb8 <ll_conn_handle_get>
    10d6:	3005      	adds	r0, #5
    10d8:	b2c5      	uxtb	r5, r0
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    10da:	4b47      	ldr	r3, [pc, #284]	; (11f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>)
    10dc:	9400      	str	r4, [sp, #0]
    10de:	462a      	mov	r2, r5
    10e0:	2101      	movs	r1, #1
    10e2:	2000      	movs	r0, #0
    10e4:	f015 fa0a 	bl	164fc <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    10e8:	f030 0302 	bics.w	r3, r0, #2
    10ec:	d00b      	beq.n	1106 <CONFIG_FPROTECT_BLOCK_SIZE+0x106>
    10ee:	f640 12b7 	movw	r2, #2487	; 0x9b7
    10f2:	493d      	ldr	r1, [pc, #244]	; (11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>)
    10f4:	483d      	ldr	r0, [pc, #244]	; (11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>)
    10f6:	f020 fee8 	bl	21eca <printk>
    10fa:	4040      	eors	r0, r0
    10fc:	f380 8811 	msr	BASEPRI, r0
    1100:	f04f 0003 	mov.w	r0, #3
    1104:	df02      	svc	2
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1106:	fba9 230a 	umull	r2, r3, r9, sl
    110a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    110e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1112:	a333      	add	r3, pc, #204	; (adr r3, 11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>)
    1114:	e9d3 2300 	ldrd	r2, r3, [r3]
    1118:	f7fe fff2 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    111c:	4b37      	ldr	r3, [pc, #220]	; (11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>)
    111e:	9408      	str	r4, [sp, #32]
    1120:	e9cd 4306 	strd	r4, r3, [sp, #24]
    1124:	4b36      	ldr	r3, [pc, #216]	; (1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>)
    1126:	9305      	str	r3, [sp, #20]
    1128:	68e3      	ldr	r3, [r4, #12]
    112a:	9304      	str	r3, [sp, #16]
    112c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    1130:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1132:	4b34      	ldr	r3, [pc, #208]	; (1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>)
    1134:	990a      	ldr	r1, [sp, #40]	; 0x28
    1136:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    113a:	fba4 ab03 	umull	sl, fp, r4, r3
    113e:	ebb1 000a 	subs.w	r0, r1, sl
    1142:	f04f 0307 	mov.w	r3, #7
    1146:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1148:	fb03 bb04 	mla	fp, r3, r4, fp
    114c:	eb61 010b 	sbc.w	r1, r1, fp
    1150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1154:	2300      	movs	r3, #0
    1156:	f7fe ffd3 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    115a:	4643      	mov	r3, r8
    115c:	e9cd 4001 	strd	r4, r0, [sp, #4]
    1160:	9700      	str	r7, [sp, #0]
    1162:	462a      	mov	r2, r5
    1164:	2101      	movs	r1, #1
    1166:	2000      	movs	r0, #0
    1168:	f026 f83c 	bl	271e4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    116c:	f030 0302 	bics.w	r3, r0, #2
    1170:	d00b      	beq.n	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
    1172:	f640 12d1 	movw	r2, #2513	; 0x9d1
    1176:	491c      	ldr	r1, [pc, #112]	; (11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>)
    1178:	481c      	ldr	r0, [pc, #112]	; (11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>)
    117a:	f020 fea6 	bl	21eca <printk>
    117e:	4040      	eors	r0, r0
    1180:	f380 8811 	msr	BASEPRI, r0
    1184:	f04f 0003 	mov.w	r0, #3
    1188:	df02      	svc	2
		if (mayfly_was_enabled) {
    118a:	b126      	cbz	r6, 1196 <CONFIG_FPROTECT_BLOCK_SIZE+0x196>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    118c:	2201      	movs	r2, #1
    118e:	2102      	movs	r1, #2
    1190:	4610      	mov	r0, r2
    1192:	f014 fbb5 	bl	15900 <mayfly_enable>
				return -ECANCELED;
    1196:	f06f 0047 	mvn.w	r0, #71	; 0x47
    119a:	e684      	b.n	ea6 <ull_conn_llcp+0x51e>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    119c:	2301      	movs	r3, #1
    119e:	712b      	strb	r3, [r5, #4]
    11a0:	e6e6      	b.n	f70 <ull_conn_llcp+0x5e8>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    11a2:	fb05 3111 	mls	r1, r5, r1, r3
    11a6:	b289      	uxth	r1, r1
    11a8:	4348      	muls	r0, r1
    11aa:	a30d      	add	r3, pc, #52	; (adr r3, 11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>)
    11ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    11b0:	fba0 010a 	umull	r0, r1, r0, sl
    11b4:	f7fe ffa4 	bl	100 <__aeabi_uldivmod>
    11b8:	eba8 0800 	sub.w	r8, r8, r0
    11bc:	e70b      	b.n	fd6 <ull_conn_llcp+0x64e>
			LL_ASSERT(0);
    11be:	f640 1287 	movw	r2, #2439	; 0x987
    11c2:	4909      	ldr	r1, [pc, #36]	; (11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>)
    11c4:	4809      	ldr	r0, [pc, #36]	; (11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>)
    11c6:	f020 fe80 	bl	21eca <printk>
    11ca:	4040      	eors	r0, r0
    11cc:	f380 8811 	msr	BASEPRI, r0
    11d0:	f04f 0003 	mov.w	r0, #3
    11d4:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    11d6:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    11d8:	46a9      	mov	r9, r5
    11da:	e751      	b.n	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
    11dc:	f3af 8000 	nop.w
    11e0:	1afd498d 	.word	0x1afd498d
    11e4:	00000007 	.word	0x00000007
    11e8:	0002f46e 	.word	0x0002f46e
    11ec:	0002a026 	.word	0x0002a026
    11f0:	000f4240 	.word	0x000f4240
    11f4:	026259ff 	.word	0x026259ff
    11f8:	00018b59 	.word	0x00018b59
    11fc:	00018b0d 	.word	0x00018b0d
    1200:	00019e3d 	.word	0x00019e3d
    1204:	1afd498d 	.word	0x1afd498d
    1208:	3b9aca00 	.word	0x3b9aca00
			event_counter = lll->event_counter +
    120c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    120e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    1210:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
    1212:	449b      	add	fp, r3
	if (conn->llcp.chan_map.initiate) {
    1214:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    1218:	07db      	lsls	r3, r3, #31
			event_counter = lll->event_counter +
    121a:	fa1f fb8b 	uxth.w	fp, fp
	if (conn->llcp.chan_map.initiate) {
    121e:	d525      	bpl.n	126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1220:	4835      	ldr	r0, [pc, #212]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    1222:	f025 fd2e 	bl	26c82 <mem_acquire>
		if (tx) {
    1226:	4605      	mov	r5, r0
    1228:	2800      	cmp	r0, #0
    122a:	f43f ae34 	beq.w	e96 <ull_conn_llcp+0x50e>
			conn->llcp.chan_map.initiate = 0U;
    122e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    1232:	f36f 0300 	bfc	r3, #0, #1
    1236:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			conn->llcp.chan_map.instant = event_counter +
    123a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    123c:	449b      	add	fp, r3
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    123e:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    1240:	f10b 0b06 	add.w	fp, fp, #6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1244:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.instant = event_counter +
    1248:	f8a4 b096 	strh.w	fp, [r4, #150]	; 0x96
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    124c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    124e:	2308      	movs	r3, #8
    1250:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1252:	2301      	movs	r3, #1
    1254:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    1256:	2205      	movs	r2, #5
    1258:	f104 0191 	add.w	r1, r4, #145	; 0x91
    125c:	3008      	adds	r0, #8
    125e:	f022 ff76 	bl	2414e <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    1262:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    1266:	f8a5 300d 	strh.w	r3, [r5, #13]
    126a:	e610      	b.n	e8e <ull_conn_llcp+0x506>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    126c:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    1270:	ebab 0b03 	sub.w	fp, fp, r3
    1274:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
    1278:	f47f ae0d 	bne.w	e96 <ull_conn_llcp+0x50e>
		memcpy(&lll->data_chan_map[0],
    127c:	f104 0538 	add.w	r5, r4, #56	; 0x38
		conn->llcp_ack = conn->llcp_req;
    1280:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
		memcpy(&lll->data_chan_map[0],
    1284:	f104 0191 	add.w	r1, r4, #145	; 0x91
    1288:	2205      	movs	r2, #5
    128a:	4628      	mov	r0, r5
    128c:	f022 ff5f 	bl	2414e <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    1290:	2105      	movs	r1, #5
    1292:	4628      	mov	r0, r5
    1294:	f025 fd71 	bl	26d7a <util_ones_count_get>
		lll->data_chan_count =
    1298:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    129c:	f360 0305 	bfi	r3, r0, #0, #6
    12a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    12a4:	2301      	movs	r3, #1
    12a6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    12aa:	e5f4      	b.n	e96 <ull_conn_llcp+0x50e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    12ac:	4812      	ldr	r0, [pc, #72]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    12ae:	f025 fce8 	bl	26c82 <mem_acquire>
		if (tx) {
    12b2:	4601      	mov	r1, r0
    12b4:	b180      	cbz	r0, 12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    12b6:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    12ba:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    12be:	7903      	ldrb	r3, [r0, #4]
    12c0:	f043 0303 	orr.w	r3, r3, #3
    12c4:	7103      	strb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    12c6:	2302      	movs	r3, #2
    12c8:	7143      	strb	r3, [r0, #5]
			pdu_tx->llctrl.opcode =
    12ca:	71c3      	strb	r3, [r0, #7]
			pdu_tx->llctrl.terminate_ind.error_code =
    12cc:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    12d0:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, tx);
    12d2:	4620      	mov	r0, r4
    12d4:	f026 f940 	bl	27558 <ctrl_tx_enqueue>
		if (!conn->procedure_expire) {
    12d8:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    12dc:	2800      	cmp	r0, #0
    12de:	f47f ade1 	bne.w	ea4 <ull_conn_llcp+0x51c>
			conn->procedure_expire = conn->supervision_reload;
    12e2:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
			if (conn->procedure_expire <= 1U) {
    12e6:	2b01      	cmp	r3, #1
    12e8:	d902      	bls.n	12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>
			conn->procedure_expire = conn->supervision_reload;
    12ea:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    12ee:	e5d9      	b.n	ea4 <ull_conn_llcp+0x51c>
				conn->procedure_expire++;
    12f0:	3301      	adds	r3, #1
    12f2:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    12f6:	e5d6      	b.n	ea6 <ull_conn_llcp+0x51e>
    12f8:	20003d40 	.word	0x20003d40
    12fc:	00000000 	.word	0x00000000

00001300 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    1300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1304:	b091      	sub	sp, #68	; 0x44
    1306:	461e      	mov	r6, r3
    1308:	900c      	str	r0, [sp, #48]	; 0x30
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    130a:	4630      	mov	r0, r6
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    130c:	6813      	ldr	r3, [r2, #0]
	conn = lll->hdr.parent;
    130e:	f850 5b0c 	ldr.w	r5, [r0], #12
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1312:	f8d3 a000 	ldr.w	sl, [r3]
{
    1316:	460c      	mov	r4, r1
    1318:	4691      	mov	r9, r2

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    131a:	312e      	adds	r1, #46	; 0x2e
    131c:	2203      	movs	r2, #3
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    131e:	f106 0b08 	add.w	fp, r6, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1322:	f022 ff14 	bl	2414e <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1326:	f106 071c 	add.w	r7, r6, #28
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    132a:	2204      	movs	r2, #4
    132c:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    1330:	4658      	mov	r0, fp
    1332:	f022 ff0c 	bl	2414e <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1336:	2205      	movs	r2, #5
    1338:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    133c:	4638      	mov	r0, r7
    133e:	f022 ff06 	bl	2414e <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1342:	2105      	movs	r1, #5
    1344:	4638      	mov	r0, r7
    1346:	f025 fd18 	bl	26d7a <util_ones_count_get>
    134a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    134e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    1352:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    1356:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1358:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    135c:	f240 812a 	bls.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1360:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    1364:	f3c3 0304 	ubfx	r3, r3, #0, #5
    1368:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    136c:	3b05      	subs	r3, #5
    136e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    1372:	2b0b      	cmp	r3, #11
    1374:	f200 811e 	bhi.w	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		return;
	}

	((struct lll_adv *)ftr->param)->conn = NULL;
    1378:	f8d9 3000 	ldr.w	r3, [r9]
    137c:	f04f 0800 	mov.w	r8, #0
    1380:	f8c3 8008 	str.w	r8, [r3, #8]

	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1384:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
	lll->interval = interval;
    1386:	8277      	strh	r7, [r6, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1388:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
    138c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    1390:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1394:	82b3      	strh	r3, [r6, #20]

	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1396:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1398:	930b      	str	r3, [sp, #44]	; 0x2c
	conn_interval_us = interval * CONN_INT_UNIT_US;
    139a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    139e:	435f      	muls	r7, r3
	} else {
		win_delay_us = WIN_DELAY_LEGACY;
	}

	/* calculate the window widening */
	conn->slave.sca = pdu_adv->connect_ind.sca;
    13a0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    13a4:	f895 2080 	ldrb.w	r2, [r5, #128]	; 0x80
    13a8:	095b      	lsrs	r3, r3, #5
    13aa:	f363 0284 	bfi	r2, r3, #2, #3
    13ae:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
	lll->slave.window_widening_periodic_us =
		(((lll_clock_ppm_local_get() +
    13b2:	f026 fab1 	bl	27918 <lll_clock_ppm_local_get>
    13b6:	900d      	str	r0, [sp, #52]	; 0x34
		   lll_clock_ppm_get(conn->slave.sca)) *
    13b8:	f895 0080 	ldrb.w	r0, [r5, #128]	; 0x80
    13bc:	f3c0 0082 	ubfx	r0, r0, #2, #3
    13c0:	f019 f9d0 	bl	1a764 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    13c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    13c6:	4418      	add	r0, r3
		   lll_clock_ppm_get(conn->slave.sca)) *
    13c8:	4378      	muls	r0, r7
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    13ca:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    13ce:	4b7e      	ldr	r3, [pc, #504]	; (15c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x240>)
    13d0:	f200 203f 	addw	r0, r0, #575	; 0x23f
    13d4:	fbb0 f0f3 	udiv	r0, r0, r3
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    13d8:	087b      	lsrs	r3, r7, #1
    13da:	3b96      	subs	r3, #150	; 0x96
    13dc:	62f3      	str	r3, [r6, #44]	; 0x2c
					    EVENT_IFS_US;
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    13de:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
	lll->slave.window_widening_periodic_us =
    13e2:	62b0      	str	r0, [r6, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    13e4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    13e8:	4353      	muls	r3, r2
    13ea:	63f3      	str	r3, [r6, #60]	; 0x3c
		CONN_INT_UNIT_US;

	/* procedure timeouts */
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    13ec:	8f23      	ldrh	r3, [r4, #56]	; 0x38
	conn->supervision_reload =
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    13ee:	930d      	str	r3, [sp, #52]	; 0x34
    13f0:	f242 7210 	movw	r2, #10000	; 0x2710
    13f4:	fb02 7203 	mla	r2, r2, r3, r7
    13f8:	3a01      	subs	r2, #1
    13fa:	fbb2 f2f7 	udiv	r2, r2, r7
    13fe:	f8a5 2076 	strh.w	r2, [r5, #118]	; 0x76
	conn->procedure_reload =
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1402:	4a72      	ldr	r2, [pc, #456]	; (15cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x244>)
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
			     (conn->apto_reload - (lll->latency + 6)) :
			     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    1404:	4659      	mov	r1, fp
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1406:	443a      	add	r2, r7
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    1408:	f105 0084 	add.w	r0, r5, #132	; 0x84
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    140c:	fbb2 f2f7 	udiv	r2, r2, r7
    1410:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    1414:	2204      	movs	r2, #4
    1416:	f022 fe9a 	bl	2414e <memcpy>
	       sizeof(conn->slave.force));

	peer_addr_type = pdu_adv->tx_addr;
    141a:	f894 b01c 	ldrb.w	fp, [r4, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    141e:	f104 011e 	add.w	r1, r4, #30
    1422:	2206      	movs	r2, #6
    1424:	a80e      	add	r0, sp, #56	; 0x38
    1426:	f022 fe92 	bl	2414e <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    142a:	f3cb 1b80 	ubfx	fp, fp, #6, #1
	} else {
		chan_sel = pdu_adv->chan_sel;
	}

	cc = (void *)pdu_adv;
	cc->status = 0U;
    142e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1432:	83a2      	strh	r2, [r4, #28]
	} else {
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = peer_addr_type;
    1434:	f884 b01e 	strb.w	fp, [r4, #30]
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    1438:	a90e      	add	r1, sp, #56	; 0x38
    143a:	2206      	movs	r2, #6
    143c:	f104 001f 	add.w	r0, r4, #31
    1440:	f022 fe85 	bl	2414e <memcpy>
	}

	cc->interval = lll->interval;
    1444:	8a72      	ldrh	r2, [r6, #18]
	cc->latency = lll->latency;
	cc->timeout = timeout;
    1446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	cc->interval = lll->interval;
    1448:	84e2      	strh	r2, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    144a:	8ab2      	ldrh	r2, [r6, #20]
	cc->timeout = timeout;
    144c:	8563      	strh	r3, [r4, #42]	; 0x2a
	cc->sca = conn->slave.sca;
    144e:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
	cc->latency = lll->latency;
    1452:	8522      	strh	r2, [r4, #40]	; 0x28
	cc->sca = conn->slave.sca;
    1454:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1458:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	lll->handle = ll_conn_handle_get(conn);
    145c:	4628      	mov	r0, r5
    145e:	f017 fc2b 	bl	18cb8 <ll_conn_handle_get>
		rx->rx_ftr.param_adv_term.conn_handle = lll->handle;
		rx->rx_ftr.param_adv_term.num_events = 0U;
	}
#endif

	ll_rx_put(link, rx);
    1462:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    1464:	8230      	strh	r0, [r6, #16]
	rx->handle = lll->handle;
    1466:	80e0      	strh	r0, [r4, #6]
	ll_rx_put(link, rx);
    1468:	980c      	ldr	r0, [sp, #48]	; 0x30
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    146a:	4c59      	ldr	r4, [pc, #356]	; (15d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x248>)
	ll_rx_put(link, rx);
    146c:	f016 fbf4 	bl	17c58 <ll_rx_put>
	ll_rx_sched();
    1470:	f016 fbfc 	bl	17c6c <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    1474:	4641      	mov	r1, r8
    1476:	4640      	mov	r0, r8
    1478:	f026 fa22 	bl	278c0 <lll_radio_rx_ready_delay_get>
	conn->evt.ticks_xtal_to_start =
    147c:	2331      	movs	r3, #49	; 0x31
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    147e:	4683      	mov	fp, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1480:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    1484:	602b      	str	r3, [r5, #0]
	conn->evt.ticks_active_to_start = 0U;
    1486:	f8c5 8004 	str.w	r8, [r5, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    148a:	a34d      	add	r3, pc, #308	; (adr r3, 15c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x238>)
    148c:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->evt.ticks_preempt_to_start =
    1490:	f8c5 8008 	str.w	r8, [r5, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1494:	fba0 0104 	umull	r0, r1, r0, r4
    1498:	f7fe fe32 	bl	100 <__aeabi_uldivmod>
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us -= lll->slave.window_widening_periodic_us;
    149c:	6ab3      	ldr	r3, [r6, #40]	; 0x28

	conn_offset_us = ftr->radio_end_us;
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    149e:	990b      	ldr	r1, [sp, #44]	; 0x2c
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    14a0:	1aff      	subs	r7, r7, r3
	conn_offset_us = ftr->radio_end_us;
    14a2:	f8d9 300c 	ldr.w	r3, [r9, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    14a6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    14aa:	fb02 3301 	mla	r3, r2, r1, r3
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    14ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_delay_us;
	conn_offset_us -= EVENT_OVERHEAD_START_US;
	conn_offset_us -= EVENT_TICKER_RES_MARGIN_US;
	conn_offset_us -= EVENT_JITTER_US;
    14b2:	f203 3386 	addw	r3, r3, #902	; 0x386
	conn_offset_us -= ready_delay_us;
    14b6:	eba3 030b 	sub.w	r3, r3, fp

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    14ba:	4642      	mov	r2, r8
    14bc:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    14be:	60e8      	str	r0, [r5, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    14c0:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    14c2:	930b      	str	r3, [sp, #44]	; 0x2c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    14c4:	f014 fa1c 	bl	15900 <mayfly_enable>
		aux->is_started = 0U;
	}
#endif

	/* Stop Advertiser */
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    14c8:	4650      	mov	r0, sl
    14ca:	f017 f91d 	bl	18708 <ull_adv_handle_get>
    14ce:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    14d0:	4b40      	ldr	r3, [pc, #256]	; (15d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24c>)
    14d2:	f8cd a000 	str.w	sl, [sp]
    14d6:	b2d2      	uxtb	r2, r2
    14d8:	2101      	movs	r1, #1
    14da:	4640      	mov	r0, r8
    14dc:	f015 f80e 	bl	164fc <ticker_stop>
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_adv, ticker_op_stop_adv_cb, adv);
	ticker_op_stop_adv_cb(ticker_status, adv);
    14e0:	4651      	mov	r1, sl
    14e2:	f018 fc91 	bl	19e08 <ticker_op_stop_adv_cb>

	/* Stop Direct Adv Stop */
	if (adv->lll.is_hdcd) {
    14e6:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    14ea:	07db      	lsls	r3, r3, #31
    14ec:	d507      	bpl.n	14fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x176>
		/* Advertiser stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    14ee:	2201      	movs	r2, #1
    14f0:	f8cd 8000 	str.w	r8, [sp]
    14f4:	4643      	mov	r3, r8
    14f6:	4611      	mov	r1, r2
    14f8:	4640      	mov	r0, r8
    14fa:	f014 ffff 	bl	164fc <ticker_stop>
			    TICKER_ID_ADV_STOP, NULL, NULL);
	}

	/* Start Slave */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    14fe:	4628      	mov	r0, r5
    1500:	f017 fbda 	bl	18cb8 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1504:	fba7 6704 	umull	r6, r7, r7, r4
    1508:	a32d      	add	r3, pc, #180	; (adr r3, 15c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x238>)
    150a:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    150e:	4680      	mov	r8, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1510:	4639      	mov	r1, r7
    1512:	4630      	mov	r0, r6
    1514:	f7fe fdf4 	bl	100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1518:	f8d9 3008 	ldr.w	r3, [r9, #8]
    151c:	f1a3 0931 	sub.w	r9, r3, #49	; 0x31
    1520:	f44f 73b6 	mov.w	r3, #364	; 0x16c
    1524:	9308      	str	r3, [sp, #32]
    1526:	4b2c      	ldr	r3, [pc, #176]	; (15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>)
    1528:	e9cd 5306 	strd	r5, r3, [sp, #24]
    152c:	4b2b      	ldr	r3, [pc, #172]	; (15dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x254>)
    152e:	9305      	str	r3, [sp, #20]
    1530:	68eb      	ldr	r3, [r5, #12]
    1532:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1534:	4b2a      	ldr	r3, [pc, #168]	; (15e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x258>)
    1536:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    153a:	fba5 bc03 	umull	fp, ip, r5, r3
    153e:	2307      	movs	r3, #7
    1540:	fb03 cc05 	mla	ip, r3, r5, ip
    1544:	ebb6 000b 	subs.w	r0, r6, fp
    1548:	eb67 010c 	sbc.w	r1, r7, ip
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    154c:	f04f 0a00 	mov.w	sl, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1554:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1556:	f8cd a00c 	str.w	sl, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    155a:	f7fe fdd1 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    155e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1560:	a317      	add	r3, pc, #92	; (adr r3, 15c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x238>)
    1562:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1566:	e9cd 5001 	strd	r5, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    156a:	fba1 0104 	umull	r0, r1, r1, r4
    156e:	f7fe fdc7 	bl	100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1572:	f108 0805 	add.w	r8, r8, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1576:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    157a:	fa5f f888 	uxtb.w	r8, r8
    157e:	9000      	str	r0, [sp, #0]
    1580:	464b      	mov	r3, r9
    1582:	4642      	mov	r2, r8
    1584:	2101      	movs	r1, #1
    1586:	4650      	mov	r0, sl
    1588:	f025 fe2c 	bl	271e4 <ticker_start>
				     TICKER_NULL_LAZY,
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_slave_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    158c:	f030 0302 	bics.w	r3, r0, #2
    1590:	d00b      	beq.n	15aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x222>
    1592:	f44f 72b7 	mov.w	r2, #366	; 0x16e
    1596:	4913      	ldr	r1, [pc, #76]	; (15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>)
    1598:	4813      	ldr	r0, [pc, #76]	; (15e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x260>)
    159a:	f020 fc96 	bl	21eca <printk>
    159e:	4040      	eors	r0, r0
    15a0:	f380 8811 	msr	BASEPRI, r0
    15a4:	f04f 0003 	mov.w	r0, #3
    15a8:	df02      	svc	2

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    15aa:	2201      	movs	r2, #1
    15ac:	2102      	movs	r1, #2
    15ae:	4610      	mov	r0, r2
    15b0:	f014 f9a6 	bl	15900 <mayfly_enable>
#endif
}
    15b4:	b011      	add	sp, #68	; 0x44
    15b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15ba:	bf00      	nop
    15bc:	f3af 8000 	nop.w
    15c0:	1afd498d 	.word	0x1afd498d
    15c4:	00000007 	.word	0x00000007
    15c8:	000f4240 	.word	0x000f4240
    15cc:	026259ff 	.word	0x026259ff
    15d0:	3b9aca00 	.word	0x3b9aca00
    15d4:	00019e09 	.word	0x00019e09
    15d8:	00019de1 	.word	0x00019de1
    15dc:	00019e3d 	.word	0x00019e3d
    15e0:	1afd498d 	.word	0x1afd498d
    15e4:	0002f4c0 	.word	0x0002f4c0
    15e8:	0002a026 	.word	0x0002a026
    15ec:	00000000 	.word	0x00000000

000015f0 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    15f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15f4:	b08f      	sub	sp, #60	; 0x3c
    15f6:	4683      	mov	fp, r0
	uint8_t instance_index;
	uint8_t ticker_id;
	int result;
	uint32_t err;

	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    15f8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    15fc:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    1600:	f025 feb0 	bl	27364 <ll_timeslice_ticker_id_get>
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    1604:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 16e0 <nrf_flash_sync_exe+0xf0>
	err = ticker_start(instance_index,
    1608:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    160c:	930a      	str	r3, [sp, #40]	; 0x28
    160e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    1612:	930b      	str	r3, [sp, #44]	; 0x2c
			   HAL_TICKER_US_TO_TICKS(
    1614:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 16e4 <nrf_flash_sync_exe+0xf4>
	err = ticker_start(instance_index,
    1618:	f025 fe17 	bl	2724a <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    161c:	f8d8 4000 	ldr.w	r4, [r8]
    1620:	fba4 4509 	umull	r4, r5, r4, r9
    1624:	a328      	add	r3, pc, #160	; (adr r3, 16c8 <nrf_flash_sync_exe+0xd8>)
    1626:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    162a:	4682      	mov	sl, r0
			   HAL_TICKER_US_TO_TICKS(
    162c:	4629      	mov	r1, r5
    162e:	4620      	mov	r0, r4
    1630:	f7fe fd66 	bl	100 <__aeabi_uldivmod>
    1634:	4606      	mov	r6, r0
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    1636:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    163a:	4b25      	ldr	r3, [pc, #148]	; (16d0 <nrf_flash_sync_exe+0xe0>)
    163c:	9305      	str	r3, [sp, #20]
    163e:	2700      	movs	r7, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    1640:	a321      	add	r3, pc, #132	; (adr r3, 16c8 <nrf_flash_sync_exe+0xd8>)
    1642:	e9d3 2300 	ldrd	r2, r3, [r3]
    1646:	fba0 0109 	umull	r0, r1, r0, r9
	err = ticker_start(instance_index,
    164a:	f8cd b018 	str.w	fp, [sp, #24]
    164e:	e9cd 7707 	strd	r7, r7, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    1652:	f7fe fd55 	bl	100 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    1656:	4b1f      	ldr	r3, [pc, #124]	; (16d4 <nrf_flash_sync_exe+0xe4>)
    1658:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    165c:	fba6 bc03 	umull	fp, ip, r6, r3
	err = ticker_start(instance_index,
    1660:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    1664:	2307      	movs	r3, #7
    1666:	fb03 cc06 	mla	ip, r3, r6, ip
	err = ticker_start(instance_index,
    166a:	e9cd 7003 	strd	r7, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    166e:	ebb4 000b 	subs.w	r0, r4, fp
    1672:	eb65 010c 	sbc.w	r1, r5, ip
    1676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    167a:	2300      	movs	r3, #0
    167c:	f7fe fd40 	bl	100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    1680:	4653      	mov	r3, sl
    1682:	e9cd 6001 	strd	r6, r0, [sp, #4]
    1686:	9700      	str	r7, [sp, #0]
    1688:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    168a:	980a      	ldr	r0, [sp, #40]	; 0x28
    168c:	2103      	movs	r1, #3
    168e:	f025 fda9 	bl	271e4 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    1692:	f030 0302 	bics.w	r3, r0, #2
    1696:	d114      	bne.n	16c2 <nrf_flash_sync_exe+0xd2>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1698:	4a0f      	ldr	r2, [pc, #60]	; (16d8 <nrf_flash_sync_exe+0xe8>)
    169a:	4810      	ldr	r0, [pc, #64]	; (16dc <nrf_flash_sync_exe+0xec>)
    169c:	2300      	movs	r3, #0
    169e:	f01e fb29 	bl	1fcf4 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    16a2:	b158      	cbz	r0, 16bc <nrf_flash_sync_exe+0xcc>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);
    16a4:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    16a8:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    16ac:	2103      	movs	r1, #3
    16ae:	f01b fe6b 	bl	1d388 <_ticker_stop>

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    16b2:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    16b6:	b00f      	add	sp, #60	; 0x3c
    16b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    16bc:	f8d8 000c 	ldr.w	r0, [r8, #12]
    16c0:	e7f9      	b.n	16b6 <nrf_flash_sync_exe+0xc6>
		result = -ECANCELED;
    16c2:	f06f 0047 	mvn.w	r0, #71	; 0x47
	return result;
    16c6:	e7f6      	b.n	16b6 <nrf_flash_sync_exe+0xc6>
    16c8:	1afd498d 	.word	0x1afd498d
    16cc:	00000007 	.word	0x00000007
    16d0:	0001d42d 	.word	0x0001d42d
    16d4:	1afd498d 	.word	0x1afd498d
    16d8:	000b7b44 	.word	0x000b7b44
    16dc:	20004214 	.word	0x20004214
    16e0:	20004204 	.word	0x20004204
    16e4:	3b9aca00 	.word	0x3b9aca00

000016e8 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    16e8:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    16ea:	4d0f      	ldr	r5, [pc, #60]	; (1728 <nrf_flash_sync_check_time_limit+0x40>)
{
    16ec:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    16ee:	f025 fdac 	bl	2724a <ticker_ticks_now_get>
    16f2:	68a9      	ldr	r1, [r5, #8]
    16f4:	f025 fdab 	bl	2724e <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    16f8:	490c      	ldr	r1, [pc, #48]	; (172c <nrf_flash_sync_check_time_limit+0x44>)
	if (ticks_diff + ticks_diff/iteration >
    16fa:	fbb0 f4f4 	udiv	r4, r0, r4
    16fe:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    1700:	6868      	ldr	r0, [r5, #4]
    1702:	a307      	add	r3, pc, #28	; (adr r3, 1720 <nrf_flash_sync_check_time_limit+0x38>)
    1704:	e9d3 2300 	ldrd	r2, r3, [r3]
    1708:	fba0 0101 	umull	r0, r1, r0, r1
    170c:	f7fe fcf8 	bl	100 <__aeabi_uldivmod>
    1710:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    1714:	4284      	cmp	r4, r0
    1716:	bf94      	ite	ls
    1718:	2000      	movls	r0, #0
    171a:	2001      	movhi	r0, #1
    171c:	bd38      	pop	{r3, r4, r5, pc}
    171e:	bf00      	nop
    1720:	1afd498d 	.word	0x1afd498d
    1724:	00000007 	.word	0x00000007
    1728:	20004204 	.word	0x20004204
    172c:	3b9aca00 	.word	0x3b9aca00

00001730 <prov_complete>:

static bool initialized=false; // Flag if the Stack is initialized

static void prov_complete(uint16_t net_idx, uint16_t src)
{
	printk("Prov complete! Addr: 0x%04x\n", src);
    1730:	4801      	ldr	r0, [pc, #4]	; (1738 <prov_complete+0x8>)
    1732:	f020 bbca 	b.w	21eca <printk>
    1736:	bf00      	nop
    1738:	00029d9c 	.word	0x00029d9c

0000173c <input_complete>:
	return 0;
}

static void input_complete(void)
{
	printk("Input Complete");
    173c:	4801      	ldr	r0, [pc, #4]	; (1744 <input_complete+0x8>)
    173e:	f020 bbc4 	b.w	21eca <printk>
    1742:	bf00      	nop
    1744:	00029d5b 	.word	0x00029d5b

00001748 <input>:
{
    1748:	b508      	push	{r3, lr}
	printk("Press a button to set the right number.");
    174a:	4802      	ldr	r0, [pc, #8]	; (1754 <input+0xc>)
    174c:	f020 fbbd 	bl	21eca <printk>
}
    1750:	2000      	movs	r0, #0
    1752:	bd08      	pop	{r3, pc}
    1754:	00029d33 	.word	0x00029d33

00001758 <output_string>:

	return -ENOTSUP;
}

static int output_string(const char *string)
{
    1758:	b508      	push	{r3, lr}
	printk("OOB String: %s\n", string);
    175a:	4601      	mov	r1, r0
    175c:	4802      	ldr	r0, [pc, #8]	; (1768 <output_string+0x10>)
    175e:	f020 fbb4 	bl	21eca <printk>
	return 0;
}
    1762:	2000      	movs	r0, #0
    1764:	bd08      	pop	{r3, pc}
    1766:	bf00      	nop
    1768:	00029d8c 	.word	0x00029d8c

0000176c <output_number>:
	if (action == BT_MESH_DISPLAY_NUMBER) {
    176c:	2808      	cmp	r0, #8
{
    176e:	b508      	push	{r3, lr}
	if (action == BT_MESH_DISPLAY_NUMBER) {
    1770:	d104      	bne.n	177c <output_number+0x10>
		printk("OOB Number: %u\n", number);
    1772:	4806      	ldr	r0, [pc, #24]	; (178c <output_number+0x20>)
		printk("Blinking %u times", number);
    1774:	f020 fba9 	bl	21eca <printk>
		return 0;
    1778:	2000      	movs	r0, #0
}
    177a:	bd08      	pop	{r3, pc}
	if (action == BT_MESH_BLINK) {
    177c:	2801      	cmp	r0, #1
    177e:	d101      	bne.n	1784 <output_number+0x18>
		printk("Blinking %u times", number);
    1780:	4803      	ldr	r0, [pc, #12]	; (1790 <output_number+0x24>)
    1782:	e7f7      	b.n	1774 <output_number+0x8>
	return -ENOTSUP;
    1784:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1788:	e7f7      	b.n	177a <output_number+0xe>
    178a:	bf00      	nop
    178c:	00029d6a 	.word	0x00029d6a
    1790:	00029d7a 	.word	0x00029d7a

00001794 <bt_ready>:
	.input_complete = input_complete,
	.reset = prov_reset
	};

// Init the rest while Bluetooth is enabled
static void bt_ready(int err){
    1794:	b510      	push	{r4, lr}

	/* --------------- Init Board ------------*/
	printk("Init Buttons and LEDs...\n");
    1796:	4825      	ldr	r0, [pc, #148]	; (182c <bt_ready+0x98>)
    1798:	f020 fb97 	bl	21eca <printk>
	
	printk("Buttons and LEDs initialized\n");
    179c:	4824      	ldr	r0, [pc, #144]	; (1830 <bt_ready+0x9c>)
    179e:	f020 fb94 	bl	21eca <printk>
	/* ===================================*/
	
	/* --------------- Init Mesh ------------*/
	printk("Init Mesh...\n");
    17a2:	4824      	ldr	r0, [pc, #144]	; (1834 <bt_ready+0xa0>)
    17a4:	f020 fb91 	bl	21eca <printk>
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    17a8:	4c23      	ldr	r4, [pc, #140]	; (1838 <bt_ready+0xa4>)
    17aa:	2110      	movs	r1, #16
    17ac:	4620      	mov	r0, r4
    17ae:	f021 faf1 	bl	22d94 <z_impl_hwinfo_get_device_id>
	
	hwinfo_get_device_id(dev_uuid, sizeof(dev_uuid));
	// Do catch for nrf53 -> no HWINFO set (0xFFFF)
	if (dev_uuid[0] == 0xFF && dev_uuid[1] == 0xFF && dev_uuid[5] == 0xFF){
    17b2:	7862      	ldrb	r2, [r4, #1]
    17b4:	7823      	ldrb	r3, [r4, #0]
    17b6:	4013      	ands	r3, r2
    17b8:	7962      	ldrb	r2, [r4, #5]
    17ba:	4013      	ands	r3, r2
    17bc:	2bff      	cmp	r3, #255	; 0xff
    17be:	d10d      	bne.n	17dc <bt_ready+0x48>
		uint8_t *p0 = (uint8_t*)&NRF_FICR->DEVICEADDR[0]; // Use MAC Address for UUID
		dev_uuid[0] = p0[0];
    17c0:	4b1e      	ldr	r3, [pc, #120]	; (183c <bt_ready+0xa8>)
    17c2:	781a      	ldrb	r2, [r3, #0]
    17c4:	7022      	strb	r2, [r4, #0]
		dev_uuid[1] = p0[1];
    17c6:	785a      	ldrb	r2, [r3, #1]
    17c8:	7062      	strb	r2, [r4, #1]
		dev_uuid[2] = p0[2];
    17ca:	789a      	ldrb	r2, [r3, #2]
    17cc:	70a2      	strb	r2, [r4, #2]
		dev_uuid[3] = p0[3];
    17ce:	78db      	ldrb	r3, [r3, #3]
    17d0:	70e3      	strb	r3, [r4, #3]
		uint8_t *p1 = (uint8_t*)&NRF_FICR->DEVICEADDR[1]; // Use MAC Address for UUID
		dev_uuid[4] = p1[0];
    17d2:	4b1b      	ldr	r3, [pc, #108]	; (1840 <bt_ready+0xac>)
    17d4:	781a      	ldrb	r2, [r3, #0]
    17d6:	7122      	strb	r2, [r4, #4]
		dev_uuid[5] = p1[1];
    17d8:	785b      	ldrb	r3, [r3, #1]
    17da:	7163      	strb	r3, [r4, #5]
	}

	err = bt_mesh_init(&prov, bm_blemesh_model_handler_init());
    17dc:	f000 f8ce 	bl	197c <bm_blemesh_model_handler_init>
    17e0:	4601      	mov	r1, r0
    17e2:	4818      	ldr	r0, [pc, #96]	; (1844 <bt_ready+0xb0>)
    17e4:	f024 f821 	bl	2582a <bt_mesh_init>
	if (err)
    17e8:	4601      	mov	r1, r0
    17ea:	b120      	cbz	r0, 17f6 <bt_ready+0x62>
	{
		printk("Initializing mesh failed (err %d)\n", err);
    17ec:	4816      	ldr	r0, [pc, #88]	; (1848 <bt_ready+0xb4>)
		printk("Provisioning completed\n");
	}
	/* ===================================*/

	initialized = true;
}
    17ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Provisioning failed (err %d)\n", err);
    17f2:	f020 bb6a 	b.w	21eca <printk>
	printk("Mesh initialized\n");
    17f6:	4815      	ldr	r0, [pc, #84]	; (184c <bt_ready+0xb8>)
    17f8:	f020 fb67 	bl	21eca <printk>
	printk("Provisioning...\n");
    17fc:	4814      	ldr	r0, [pc, #80]	; (1850 <bt_ready+0xbc>)
    17fe:	f020 fb64 	bl	21eca <printk>
		settings_load();
    1802:	f021 f99c 	bl	22b3e <settings_load>
	err = bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
    1806:	2003      	movs	r0, #3
    1808:	f012 fbbc 	bl	13f84 <bt_mesh_prov_enable>
	if (err == -EALREADY)
    180c:	f110 0f45 	cmn.w	r0, #69	; 0x45
	err = bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
    1810:	4601      	mov	r1, r0
	if (err == -EALREADY)
    1812:	d106      	bne.n	1822 <bt_ready+0x8e>
		printk("Already Provisioned (Restored Settings)\n");
    1814:	480f      	ldr	r0, [pc, #60]	; (1854 <bt_ready+0xc0>)
		printk("Provisioning completed\n");
    1816:	f020 fb58 	bl	21eca <printk>
	initialized = true;
    181a:	4b0f      	ldr	r3, [pc, #60]	; (1858 <bt_ready+0xc4>)
    181c:	2201      	movs	r2, #1
    181e:	701a      	strb	r2, [r3, #0]
}
    1820:	bd10      	pop	{r4, pc}
	else if (err)
    1822:	b108      	cbz	r0, 1828 <bt_ready+0x94>
		printk("Provisioning failed (err %d)\n", err);
    1824:	480d      	ldr	r0, [pc, #52]	; (185c <bt_ready+0xc8>)
    1826:	e7e2      	b.n	17ee <bt_ready+0x5a>
		printk("Provisioning completed\n");
    1828:	480d      	ldr	r0, [pc, #52]	; (1860 <bt_ready+0xcc>)
    182a:	e7f4      	b.n	1816 <bt_ready+0x82>
    182c:	00029c48 	.word	0x00029c48
    1830:	00029c62 	.word	0x00029c62
    1834:	00029c80 	.word	0x00029c80
    1838:	200043aa 	.word	0x200043aa
    183c:	100000a4 	.word	0x100000a4
    1840:	100000a8 	.word	0x100000a8
    1844:	20000468 	.word	0x20000468
    1848:	00029c8e 	.word	0x00029c8e
    184c:	00029cb1 	.word	0x00029cb1
    1850:	00029cc3 	.word	0x00029cc3
    1854:	00029cd4 	.word	0x00029cd4
    1858:	200043ba 	.word	0x200043ba
    185c:	00029cfd 	.word	0x00029cfd
    1860:	00029d1b 	.word	0x00029d1b

00001864 <bm_blemesh_enable>:

void bm_blemesh_enable(void)
{
    1864:	b538      	push	{r3, r4, r5, lr}
	int err;

	/* ---------- Init Bluetooth ---------- */
	printk("Enabling Bluetooth...\n");
    1866:	480f      	ldr	r0, [pc, #60]	; (18a4 <bm_blemesh_enable+0x40>)
	err = bt_enable(bt_ready);
	while (initialized == false){
    1868:	4d0f      	ldr	r5, [pc, #60]	; (18a8 <bm_blemesh_enable+0x44>)
	printk("Enabling Bluetooth...\n");
    186a:	f020 fb2e 	bl	21eca <printk>
	err = bt_enable(bt_ready);
    186e:	480f      	ldr	r0, [pc, #60]	; (18ac <bm_blemesh_enable+0x48>)
    1870:	f005 fbb6 	bl	6fe0 <bt_enable>
    1874:	4604      	mov	r4, r0
	while (initialized == false){
    1876:	782b      	ldrb	r3, [r5, #0]
    1878:	b133      	cbz	r3, 1888 <bm_blemesh_enable+0x24>
		k_sleep(K_MSEC(10));
	}
	if (err)
    187a:	b15c      	cbz	r4, 1894 <bm_blemesh_enable+0x30>
	{
		printk("Bluetooth init failed (err %d)\n", err);
    187c:	4621      	mov	r1, r4
    187e:	480c      	ldr	r0, [pc, #48]	; (18b0 <bm_blemesh_enable+0x4c>)
	*/	
	printk("Configuring done\n");

	//bm_led0_set(true); // Signal that the Configuring was sucessfull
	/* ===================================*/	
}
    1880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    1884:	f020 bb21 	b.w	21eca <printk>
	return z_impl_k_sleep(timeout);
    1888:	2100      	movs	r1, #0
    188a:	f44f 70a4 	mov.w	r0, #328	; 0x148
    188e:	f01e f9bf 	bl	1fc10 <z_impl_k_sleep>
    1892:	e7f0      	b.n	1876 <bm_blemesh_enable+0x12>
	printk("Bluetooth initialized\n");
    1894:	4807      	ldr	r0, [pc, #28]	; (18b4 <bm_blemesh_enable+0x50>)
    1896:	f020 fb18 	bl	21eca <printk>
	printk("Configuring done\n");
    189a:	4807      	ldr	r0, [pc, #28]	; (18b8 <bm_blemesh_enable+0x54>)
}
    189c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printk("Configuring done\n");
    18a0:	f020 bb13 	b.w	21eca <printk>
    18a4:	00029be8 	.word	0x00029be8
    18a8:	200043ba 	.word	0x200043ba
    18ac:	00001795 	.word	0x00001795
    18b0:	00029bff 	.word	0x00029bff
    18b4:	00029c1f 	.word	0x00029c1f
    18b8:	00029c36 	.word	0x00029c36

000018bc <attention_off>:
	printk("attention_on()\n");
}

static void attention_off(struct bt_mesh_model *model)
{
	printk("attention_off()\n");
    18bc:	4801      	ldr	r0, [pc, #4]	; (18c4 <attention_off+0x8>)
    18be:	f020 bb04 	b.w	21eca <printk>
    18c2:	bf00      	nop
    18c4:	00029db9 	.word	0x00029db9

000018c8 <attention_on>:
	printk("attention_on()\n");
    18c8:	4801      	ldr	r0, [pc, #4]	; (18d0 <attention_on+0x8>)
    18ca:	f020 bafe 	b.w	21eca <printk>
    18ce:	bf00      	nop
    18d0:	00029dca 	.word	0x00029dca

000018d4 <pulse_cb>:
{
    18d4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	return z_impl_k_uptime_ticks();
    18d8:	f026 ffc7 	bl	2886a <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    18dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    18e0:	fba0 4503 	umull	r4, r5, r0, r3
	if ((k_uptime_get() - last_switch_server) > 1000)
    18e4:	4816      	ldr	r0, [pc, #88]	; (1940 <pulse_cb+0x6c>)
    18e6:	fb03 5501 	mla	r5, r3, r1, r5
    18ea:	e9d0 1000 	ldrd	r1, r0, [r0]
    18ee:	0be2      	lsrs	r2, r4, #15
    18f0:	ea42 4245 	orr.w	r2, r2, r5, lsl #17
    18f4:	ebb2 0801 	subs.w	r8, r2, r1
    18f8:	ea4f 33d5 	mov.w	r3, r5, lsr #15
    18fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1900:	eb63 0900 	sbc.w	r9, r3, r0
    1904:	2300      	movs	r3, #0
    1906:	4542      	cmp	r2, r8
    1908:	eb73 0309 	sbcs.w	r3, r3, r9
    190c:	f04f 0600 	mov.w	r6, #0
    1910:	da12      	bge.n	1938 <pulse_cb+0x64>
		struct bt_mesh_onoff_set set = {
    1912:	e9cd 6600 	strd	r6, r6, [sp]
			.on_off = (bm_signal_state_get()),
    1916:	f000 fb97 	bl	2048 <bm_signal_state_get>
		bt_mesh_onoff_cli_set(&on_off_cli, NULL, &set, NULL);
    191a:	4633      	mov	r3, r6
		struct bt_mesh_onoff_set set = {
    191c:	f88d 0000 	strb.w	r0, [sp]
		bt_mesh_onoff_cli_set(&on_off_cli, NULL, &set, NULL);
    1920:	466a      	mov	r2, sp
    1922:	4631      	mov	r1, r6
    1924:	4807      	ldr	r0, [pc, #28]	; (1944 <pulse_cb+0x70>)
    1926:	f026 fe17 	bl	28558 <bt_mesh_onoff_cli_set>
		bm_led2_set(!bm_led2_get()); // Toggle the Blue LED
    192a:	f000 fb71 	bl	2010 <bm_led2_get>
    192e:	f080 0001 	eor.w	r0, r0, #1
    1932:	b2c0      	uxtb	r0, r0
    1934:	f000 fb5c 	bl	1ff0 <bm_led2_set>
}
    1938:	b002      	add	sp, #8
    193a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    193e:	bf00      	nop
    1940:	20001188 	.word	0x20001188
    1944:	20000080 	.word	0x20000080

00001948 <led_set>:
{
    1948:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	bm_switch_set(set->on_off);
    194c:	7810      	ldrb	r0, [r2, #0]
    194e:	f000 fb65 	bl	201c <bm_switch_set>
    1952:	f026 ff8a 	bl	2886a <z_impl_k_uptime_ticks>
    1956:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    195a:	fba0 bc05 	umull	fp, ip, r0, r5
    195e:	fb05 cc01 	mla	ip, r5, r1, ip
	last_switch_server = k_uptime_get();
    1962:	4c05      	ldr	r4, [pc, #20]	; (1978 <led_set+0x30>)
    1964:	ea4f 32db 	mov.w	r2, fp, lsr #15
    1968:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
    196c:	ea4f 33dc 	mov.w	r3, ip, lsr #15
    1970:	e9c4 2300 	strd	r2, r3, [r4]
}
    1974:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
    1978:	20001188 	.word	0x20001188

0000197c <bm_blemesh_model_handler_init>:
	.elem = elements,
	.elem_count = ARRAY_SIZE(elements),
};

const struct bt_mesh_comp *bm_blemesh_model_handler_init(void)
{
    197c:	b510      	push	{r4, lr}
	bm_init_buttons(pulse_cb); // Init Buttons
    197e:	4c06      	ldr	r4, [pc, #24]	; (1998 <bm_blemesh_model_handler_init+0x1c>)
    1980:	4620      	mov	r0, r4
    1982:	f000 f965 	bl	1c50 <bm_init_buttons>
	bm_init_pulse(pulse_cb);   // Init Pulse input
    1986:	4620      	mov	r0, r4
    1988:	f000 fa22 	bl	1dd0 <bm_init_pulse>
	bm_init_signal(signal_cb); // Init Signal input
    198c:	4803      	ldr	r0, [pc, #12]	; (199c <bm_blemesh_model_handler_init+0x20>)
    198e:	f000 f9bf 	bl	1d10 <bm_init_signal>
	return &comp;
}
    1992:	4803      	ldr	r0, [pc, #12]	; (19a0 <bm_blemesh_model_handler_init+0x24>)
    1994:	bd10      	pop	{r4, pc}
    1996:	bf00      	nop
    1998:	000018d5 	.word	0x000018d5
    199c:	00021d6d 	.word	0x00021d6d
    19a0:	00028fd8 	.word	0x00028fd8

000019a4 <buttons_debounce_fn>:
static struct k_delayed_work buttons_debounce, signal_debounce, pulse_debounce;

static void (*button0_callback)(), (*signal_callback)(), (*pulse_callback)();

static void buttons_debounce_fn(struct k_work *work) {
  button0_toggel_state = !button0_toggel_state;
    19a4:	4a03      	ldr	r2, [pc, #12]	; (19b4 <buttons_debounce_fn+0x10>)
    19a6:	7813      	ldrb	r3, [r2, #0]
    19a8:	f083 0301 	eor.w	r3, r3, #1
    19ac:	7013      	strb	r3, [r2, #0]
  button0_callback();
    19ae:	4b02      	ldr	r3, [pc, #8]	; (19b8 <buttons_debounce_fn+0x14>)
    19b0:	681b      	ldr	r3, [r3, #0]
    19b2:	4718      	bx	r3
    19b4:	200043bb 	.word	0x200043bb
    19b8:	20002228 	.word	0x20002228

000019bc <signal_debounce_fn>:
}

static void signal_debounce_fn(struct k_work *work) {
  signal_toggel_state = !signal_toggel_state;
    19bc:	4a03      	ldr	r2, [pc, #12]	; (19cc <signal_debounce_fn+0x10>)
    19be:	7813      	ldrb	r3, [r2, #0]
    19c0:	f083 0301 	eor.w	r3, r3, #1
    19c4:	7013      	strb	r3, [r2, #0]
  signal_callback();
    19c6:	4b02      	ldr	r3, [pc, #8]	; (19d0 <signal_debounce_fn+0x14>)
    19c8:	681b      	ldr	r3, [r3, #0]
    19ca:	4718      	bx	r3
    19cc:	200043be 	.word	0x200043be
    19d0:	2000226c 	.word	0x2000226c

000019d4 <pulse_debounce_fn>:
}

static void pulse_debounce_fn(struct k_work *work) {
  pulse_toggel_state = !pulse_toggel_state;
    19d4:	4a03      	ldr	r2, [pc, #12]	; (19e4 <pulse_debounce_fn+0x10>)
    19d6:	7813      	ldrb	r3, [r2, #0]
    19d8:	f083 0301 	eor.w	r3, r3, #1
    19dc:	7013      	strb	r3, [r2, #0]
  pulse_callback();
    19de:	4b02      	ldr	r3, [pc, #8]	; (19e8 <pulse_debounce_fn+0x14>)
    19e0:	681b      	ldr	r3, [r3, #0]
    19e2:	4718      	bx	r3
    19e4:	20000de8 	.word	0x20000de8
    19e8:	20002258 	.word	0x20002258

000019ec <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
    19ec:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
    19f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
    19f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19f8:	4605      	mov	r5, r0
    19fa:	460f      	mov	r7, r1
    19fc:	4614      	mov	r4, r2
	const struct gpio_driver_config *const cfg =
    19fe:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
	const struct gpio_driver_data *const data =
    1a02:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
    1a06:	d14f      	bne.n	1aa8 <z_impl_gpio_pin_interrupt_configure+0xbc>
    1a08:	492d      	ldr	r1, [pc, #180]	; (1ac0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    1a0a:	482e      	ldr	r0, [pc, #184]	; (1ac4 <z_impl_gpio_pin_interrupt_configure+0xd8>)
    1a0c:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
    1a10:	f020 fa5b 	bl	21eca <printk>
    1a14:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
    1a18:	4829      	ldr	r0, [pc, #164]	; (1ac0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    1a1a:	f020 fd08 	bl	2242e <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
    1a1e:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
    1a22:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
    1a26:	d10a      	bne.n	1a3e <z_impl_gpio_pin_interrupt_configure+0x52>
    1a28:	4925      	ldr	r1, [pc, #148]	; (1ac0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    1a2a:	4826      	ldr	r0, [pc, #152]	; (1ac4 <z_impl_gpio_pin_interrupt_configure+0xd8>)
    1a2c:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
    1a30:	f020 fa4b 	bl	21eca <printk>
    1a34:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    1a38:	4821      	ldr	r0, [pc, #132]	; (1ac0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    1a3a:	f020 fcf8 	bl	2242e <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
    1a3e:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
    1a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    1a46:	d10a      	bne.n	1a5e <z_impl_gpio_pin_interrupt_configure+0x72>
    1a48:	491d      	ldr	r1, [pc, #116]	; (1ac0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    1a4a:	481e      	ldr	r0, [pc, #120]	; (1ac4 <z_impl_gpio_pin_interrupt_configure+0xd8>)
    1a4c:	f240 12fb 	movw	r2, #507	; 0x1fb
    1a50:	f020 fa3b 	bl	21eca <printk>
    1a54:	f240 11fb 	movw	r1, #507	; 0x1fb
    1a58:	4819      	ldr	r0, [pc, #100]	; (1ac0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    1a5a:	f020 fce8 	bl	2242e <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1a5e:	2601      	movs	r6, #1
    1a60:	f8da 3000 	ldr.w	r3, [sl]
    1a64:	40be      	lsls	r6, r7
    1a66:	421e      	tst	r6, r3
    1a68:	d10a      	bne.n	1a80 <z_impl_gpio_pin_interrupt_configure+0x94>
    1a6a:	4915      	ldr	r1, [pc, #84]	; (1ac0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    1a6c:	4815      	ldr	r0, [pc, #84]	; (1ac4 <z_impl_gpio_pin_interrupt_configure+0xd8>)
    1a6e:	f240 12ff 	movw	r2, #511	; 0x1ff
    1a72:	f020 fa2a 	bl	21eca <printk>
    1a76:	f240 11ff 	movw	r1, #511	; 0x1ff
    1a7a:	4811      	ldr	r0, [pc, #68]	; (1ac0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    1a7c:	f020 fcd7 	bl	2242e <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    1a80:	0423      	lsls	r3, r4, #16
    1a82:	d505      	bpl.n	1a90 <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    1a84:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    1a88:	421e      	tst	r6, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    1a8a:	bf18      	it	ne
    1a8c:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
    1a90:	f8d8 6018 	ldr.w	r6, [r8, #24]
    1a94:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
    1a98:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
    1a9c:	4639      	mov	r1, r7
    1a9e:	4628      	mov	r0, r5
    1aa0:	46b4      	mov	ip, r6
}
    1aa2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    1aa6:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d1b8      	bne.n	1a1e <z_impl_gpio_pin_interrupt_configure+0x32>
    1aac:	4904      	ldr	r1, [pc, #16]	; (1ac0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
    1aae:	4805      	ldr	r0, [pc, #20]	; (1ac4 <z_impl_gpio_pin_interrupt_configure+0xd8>)
    1ab0:	f240 12ef 	movw	r2, #495	; 0x1ef
    1ab4:	f020 fa09 	bl	21eca <printk>
    1ab8:	f240 11ef 	movw	r1, #495	; 0x1ef
    1abc:	e7ac      	b.n	1a18 <z_impl_gpio_pin_interrupt_configure+0x2c>
    1abe:	bf00      	nop
    1ac0:	00029ffc 	.word	0x00029ffc
    1ac4:	0002a026 	.word	0x0002a026

00001ac8 <gpio_pin_configure>:
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_configure(const struct device *port,
				     gpio_pin_t pin,
				     gpio_flags_t flags)
{
    1ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;
	int ret;

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    1acc:	f002 0330 	and.w	r3, r2, #48	; 0x30
    1ad0:	2b30      	cmp	r3, #48	; 0x30
{
    1ad2:	4606      	mov	r6, r0
    1ad4:	4688      	mov	r8, r1
    1ad6:	4614      	mov	r4, r2
	const struct gpio_driver_config *const cfg =
    1ad8:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct gpio_driver_data *data =
    1adc:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    1ade:	d10a      	bne.n	1af6 <gpio_pin_configure+0x2e>
    1ae0:	4921      	ldr	r1, [pc, #132]	; (1b68 <gpio_pin_configure+0xa0>)
    1ae2:	4822      	ldr	r0, [pc, #136]	; (1b6c <gpio_pin_configure+0xa4>)
    1ae4:	f240 222b 	movw	r2, #555	; 0x22b
    1ae8:	f020 f9ef 	bl	21eca <printk>
    1aec:	f240 212b 	movw	r1, #555	; 0x22b
    1af0:	481d      	ldr	r0, [pc, #116]	; (1b68 <gpio_pin_configure+0xa0>)
    1af2:	f020 fc9c 	bl	2242e <assert_post_action>
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    1af6:	f414 6540 	ands.w	r5, r4, #3072	; 0xc00
    1afa:	d00c      	beq.n	1b16 <gpio_pin_configure+0x4e>
    1afc:	05a3      	lsls	r3, r4, #22
    1afe:	d40a      	bmi.n	1b16 <gpio_pin_configure+0x4e>
    1b00:	4919      	ldr	r1, [pc, #100]	; (1b68 <gpio_pin_configure+0xa0>)
    1b02:	481a      	ldr	r0, [pc, #104]	; (1b6c <gpio_pin_configure+0xa4>)
    1b04:	f240 2236 	movw	r2, #566	; 0x236
    1b08:	f020 f9df 	bl	21eca <printk>
    1b0c:	f240 2136 	movw	r1, #566	; 0x236
    1b10:	4815      	ldr	r0, [pc, #84]	; (1b68 <gpio_pin_configure+0xa0>)
    1b12:	f020 fc8c 	bl	2242e <assert_post_action>

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    1b16:	04e0      	lsls	r0, r4, #19
    1b18:	d504      	bpl.n	1b24 <gpio_pin_configure+0x5c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    1b1a:	b11d      	cbz	r5, 1b24 <gpio_pin_configure+0x5c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    1b1c:	07e1      	lsls	r1, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
    1b1e:	bf48      	it	mi
    1b20:	f484 54e0 	eormi.w	r4, r4, #7168	; 0x1c00
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1b24:	2301      	movs	r3, #1
    1b26:	fa03 f508 	lsl.w	r5, r3, r8
    1b2a:	f8d9 3000 	ldr.w	r3, [r9]
    1b2e:	421d      	tst	r5, r3
    1b30:	d10a      	bne.n	1b48 <gpio_pin_configure+0x80>
    1b32:	490d      	ldr	r1, [pc, #52]	; (1b68 <gpio_pin_configure+0xa0>)
    1b34:	480d      	ldr	r0, [pc, #52]	; (1b6c <gpio_pin_configure+0xa4>)
    1b36:	f240 2245 	movw	r2, #581	; 0x245
    1b3a:	f020 f9c6 	bl	21eca <printk>
    1b3e:	f240 2145 	movw	r1, #581	; 0x245
    1b42:	4809      	ldr	r0, [pc, #36]	; (1b68 <gpio_pin_configure+0xa0>)
    1b44:	f020 fc73 	bl	2242e <assert_post_action>
	return api->pin_configure(port, pin, flags);
    1b48:	68b3      	ldr	r3, [r6, #8]
    1b4a:	4622      	mov	r2, r4
    1b4c:	681b      	ldr	r3, [r3, #0]
    1b4e:	4641      	mov	r1, r8
    1b50:	4630      	mov	r0, r6
    1b52:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    1b54:	b928      	cbnz	r0, 1b62 <gpio_pin_configure+0x9a>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    1b56:	683b      	ldr	r3, [r7, #0]
    1b58:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    1b5a:	bf4c      	ite	mi
    1b5c:	432b      	orrmi	r3, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    1b5e:	43ab      	bicpl	r3, r5
    1b60:	603b      	str	r3, [r7, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
    1b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1b66:	bf00      	nop
    1b68:	00029ffc 	.word	0x00029ffc
    1b6c:	0002a026 	.word	0x0002a026

00001b70 <gpio_pin_set>:
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1b70:	6843      	ldr	r3, [r0, #4]
{
    1b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1b76:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
    1b78:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1b7a:	2501      	movs	r5, #1
    1b7c:	408d      	lsls	r5, r1
    1b7e:	421d      	tst	r5, r3
{
    1b80:	4604      	mov	r4, r0
    1b82:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1b84:	d10a      	bne.n	1b9c <gpio_pin_set+0x2c>
    1b86:	4915      	ldr	r1, [pc, #84]	; (1bdc <gpio_pin_set+0x6c>)
    1b88:	4815      	ldr	r0, [pc, #84]	; (1be0 <gpio_pin_set+0x70>)
    1b8a:	f240 32eb 	movw	r2, #1003	; 0x3eb
    1b8e:	f020 f99c 	bl	21eca <printk>
    1b92:	f240 31eb 	movw	r1, #1003	; 0x3eb
    1b96:	4811      	ldr	r0, [pc, #68]	; (1bdc <gpio_pin_set+0x6c>)
    1b98:	f020 fc49 	bl	2242e <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1b9c:	683b      	ldr	r3, [r7, #0]
    1b9e:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1ba0:	6863      	ldr	r3, [r4, #4]
    1ba2:	681b      	ldr	r3, [r3, #0]
    1ba4:	bf18      	it	ne
    1ba6:	f086 0601 	eorne.w	r6, r6, #1
    1baa:	421d      	tst	r5, r3
    1bac:	d10a      	bne.n	1bc4 <gpio_pin_set+0x54>
    1bae:	490b      	ldr	r1, [pc, #44]	; (1bdc <gpio_pin_set+0x6c>)
    1bb0:	480b      	ldr	r0, [pc, #44]	; (1be0 <gpio_pin_set+0x70>)
    1bb2:	f240 32c1 	movw	r2, #961	; 0x3c1
    1bb6:	f020 f988 	bl	21eca <printk>
    1bba:	f240 31c1 	movw	r1, #961	; 0x3c1
    1bbe:	4807      	ldr	r0, [pc, #28]	; (1bdc <gpio_pin_set+0x6c>)
    1bc0:	f020 fc35 	bl	2242e <assert_post_action>
	if (value != 0)	{
    1bc4:	b136      	cbz	r6, 1bd4 <gpio_pin_set+0x64>
	return api->port_set_bits_raw(port, pins);
    1bc6:	68a3      	ldr	r3, [r4, #8]
    1bc8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    1bca:	4629      	mov	r1, r5
    1bcc:	4620      	mov	r0, r4
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
    1bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
    1bd2:	4718      	bx	r3
    1bd4:	68a3      	ldr	r3, [r4, #8]
    1bd6:	691b      	ldr	r3, [r3, #16]
    1bd8:	e7f7      	b.n	1bca <gpio_pin_set+0x5a>
    1bda:	bf00      	nop
    1bdc:	00029ffc 	.word	0x00029ffc
    1be0:	0002a026 	.word	0x0002a026

00001be4 <pulse_pressed>:
  //printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
}

void pulse_pressed(struct device *dev, struct gpio_callback *cb,
    uint32_t pins) {
  if (dev == dev_pulse) {
    1be4:	4b05      	ldr	r3, [pc, #20]	; (1bfc <pulse_pressed+0x18>)
    1be6:	681b      	ldr	r3, [r3, #0]
    1be8:	4283      	cmp	r3, r0
    1bea:	d106      	bne.n	1bfa <pulse_pressed+0x16>
    1bec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1bf0:	2300      	movs	r3, #0
    1bf2:	4903      	ldr	r1, [pc, #12]	; (1c00 <pulse_pressed+0x1c>)
    1bf4:	4803      	ldr	r0, [pc, #12]	; (1c04 <pulse_pressed+0x20>)
    1bf6:	f01e baaf 	b.w	20158 <k_delayed_work_submit_to_queue>
    k_delayed_work_submit(&pulse_debounce, K_MSEC(500)); // Debounce the Pulse
                                                           //button0_callback();
  }
  //printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
}
    1bfa:	4770      	bx	lr
    1bfc:	2000224c 	.word	0x2000224c
    1c00:	200011c0 	.word	0x200011c0
    1c04:	20002170 	.word	0x20002170

00001c08 <button_pressed>:
  if (dev == dev_button0) {
    1c08:	4b05      	ldr	r3, [pc, #20]	; (1c20 <button_pressed+0x18>)
    1c0a:	681b      	ldr	r3, [r3, #0]
    1c0c:	4283      	cmp	r3, r0
    1c0e:	d106      	bne.n	1c1e <button_pressed+0x16>
    1c10:	f241 52c3 	movw	r2, #5571	; 0x15c3
    1c14:	2300      	movs	r3, #0
    1c16:	4903      	ldr	r1, [pc, #12]	; (1c24 <button_pressed+0x1c>)
    1c18:	4803      	ldr	r0, [pc, #12]	; (1c28 <button_pressed+0x20>)
    1c1a:	f01e ba9d 	b.w	20158 <k_delayed_work_submit_to_queue>
}
    1c1e:	4770      	bx	lr
    1c20:	20002238 	.word	0x20002238
    1c24:	20001190 	.word	0x20001190
    1c28:	20002170 	.word	0x20002170

00001c2c <signal_pressed>:
  if (dev == dev_signal) {
    1c2c:	4b05      	ldr	r3, [pc, #20]	; (1c44 <signal_pressed+0x18>)
    1c2e:	681b      	ldr	r3, [r3, #0]
    1c30:	4283      	cmp	r3, r0
    1c32:	d106      	bne.n	1c42 <signal_pressed+0x16>
    1c34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1c38:	2300      	movs	r3, #0
    1c3a:	4903      	ldr	r1, [pc, #12]	; (1c48 <signal_pressed+0x1c>)
    1c3c:	4803      	ldr	r0, [pc, #12]	; (1c4c <signal_pressed+0x20>)
    1c3e:	f01e ba8b 	b.w	20158 <k_delayed_work_submit_to_queue>
}
    1c42:	4770      	bx	lr
    1c44:	20002250 	.word	0x20002250
    1c48:	200011f0 	.word	0x200011f0
    1c4c:	20002170 	.word	0x20002170

00001c50 <bm_init_buttons>:

/* Init the Buttons */
void bm_init_buttons(void (*button0_cb)()) {
    1c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c54:	4607      	mov	r7, r0
  dev_button0 = device_get_binding(SW0_GPIO_LABEL);
    1c56:	4821      	ldr	r0, [pc, #132]	; (1cdc <bm_init_buttons+0x8c>)
    1c58:	4d21      	ldr	r5, [pc, #132]	; (1ce0 <bm_init_buttons+0x90>)
    1c5a:	f020 f899 	bl	21d90 <device_get_binding>
    1c5e:	6028      	str	r0, [r5, #0]
  if (dev_button0 == NULL) {
    1c60:	b928      	cbnz	r0, 1c6e <bm_init_buttons+0x1e>
    printk("Error: didn't find %s device\n", SW0_GPIO_LABEL);
    1c62:	491e      	ldr	r1, [pc, #120]	; (1cdc <bm_init_buttons+0x8c>)
    1c64:	481f      	ldr	r0, [pc, #124]	; (1ce4 <bm_init_buttons+0x94>)
  gpio_add_callback(dev_button0, &button_cb_data);
  printk("Set up button at %s pin %d\n", SW0_GPIO_LABEL, SW0_GPIO_PIN);
  button0_callback = button0_cb;

  k_delayed_work_init(&buttons_debounce, buttons_debounce_fn);
}
    1c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printk("Error: didn't find %s device\n", SW0_GPIO_LABEL);
    1c6a:	f020 b92e 	b.w	21eca <printk>
  ret = gpio_pin_configure(dev_button0, SW0_GPIO_PIN, SW0_GPIO_FLAGS);
    1c6e:	2106      	movs	r1, #6
    1c70:	4a1d      	ldr	r2, [pc, #116]	; (1ce8 <bm_init_buttons+0x98>)
    1c72:	4e1e      	ldr	r6, [pc, #120]	; (1cec <bm_init_buttons+0x9c>)
    1c74:	f7ff ff28 	bl	1ac8 <gpio_pin_configure>
    1c78:	4601      	mov	r1, r0
    1c7a:	6030      	str	r0, [r6, #0]
  if (ret != 0) {
    1c7c:	b130      	cbz	r0, 1c8c <bm_init_buttons+0x3c>
    printk("Error %d: failed to configure %s pin %d\n",
    1c7e:	4a17      	ldr	r2, [pc, #92]	; (1cdc <bm_init_buttons+0x8c>)
    1c80:	481b      	ldr	r0, [pc, #108]	; (1cf0 <bm_init_buttons+0xa0>)
    1c82:	2306      	movs	r3, #6
}
    1c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printk("Error %d: failed to configure interrupt on %s pin %d\n",
    1c88:	f020 b91f 	b.w	21eca <printk>
  ret = gpio_pin_interrupt_configure(dev_button0,
    1c8c:	6828      	ldr	r0, [r5, #0]
    1c8e:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
    1c92:	2106      	movs	r1, #6
    1c94:	f7ff feaa 	bl	19ec <z_impl_gpio_pin_interrupt_configure>
    1c98:	4604      	mov	r4, r0
    1c9a:	6030      	str	r0, [r6, #0]
  if (ret != 0) {
    1c9c:	b120      	cbz	r0, 1ca8 <bm_init_buttons+0x58>
    printk("Error %d: failed to configure interrupt on %s pin %d\n",
    1c9e:	4601      	mov	r1, r0
    1ca0:	2306      	movs	r3, #6
    1ca2:	4a0e      	ldr	r2, [pc, #56]	; (1cdc <bm_init_buttons+0x8c>)
    1ca4:	4813      	ldr	r0, [pc, #76]	; (1cf4 <bm_init_buttons+0xa4>)
    1ca6:	e7ed      	b.n	1c84 <bm_init_buttons+0x34>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    1ca8:	4913      	ldr	r1, [pc, #76]	; (1cf8 <bm_init_buttons+0xa8>)
    1caa:	4b14      	ldr	r3, [pc, #80]	; (1cfc <bm_init_buttons+0xac>)
    1cac:	604b      	str	r3, [r1, #4]
  gpio_add_callback(dev_button0, &button_cb_data);
    1cae:	6828      	ldr	r0, [r5, #0]
	callback->pin_mask = pin_mask;
    1cb0:	2340      	movs	r3, #64	; 0x40
    1cb2:	608b      	str	r3, [r1, #8]
    1cb4:	f020 f864 	bl	21d80 <gpio_add_callback>
  printk("Set up button at %s pin %d\n", SW0_GPIO_LABEL, SW0_GPIO_PIN);
    1cb8:	2206      	movs	r2, #6
    1cba:	4908      	ldr	r1, [pc, #32]	; (1cdc <bm_init_buttons+0x8c>)
    1cbc:	4810      	ldr	r0, [pc, #64]	; (1d00 <bm_init_buttons+0xb0>)
    1cbe:	f020 f904 	bl	21eca <printk>
  button0_callback = button0_cb;
    1cc2:	4b10      	ldr	r3, [pc, #64]	; (1d04 <bm_init_buttons+0xb4>)
    1cc4:	601f      	str	r7, [r3, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    1cc6:	4b10      	ldr	r3, [pc, #64]	; (1d08 <bm_init_buttons+0xb8>)
    1cc8:	2230      	movs	r2, #48	; 0x30
    1cca:	4621      	mov	r1, r4
    1ccc:	4618      	mov	r0, r3
    1cce:	f022 fa68 	bl	241a2 <memset>
    1cd2:	4a0e      	ldr	r2, [pc, #56]	; (1d0c <bm_init_buttons+0xbc>)
    1cd4:	6042      	str	r2, [r0, #4]
}
    1cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1cda:	bf00      	nop
    1cdc:	00029dda 	.word	0x00029dda
    1ce0:	20002238 	.word	0x20002238
    1ce4:	00029de1 	.word	0x00029de1
    1ce8:	00080111 	.word	0x00080111
    1cec:	20002268 	.word	0x20002268
    1cf0:	00029dff 	.word	0x00029dff
    1cf4:	00029e28 	.word	0x00029e28
    1cf8:	2000222c 	.word	0x2000222c
    1cfc:	00001c09 	.word	0x00001c09
    1d00:	00029e5e 	.word	0x00029e5e
    1d04:	20002228 	.word	0x20002228
    1d08:	20001190 	.word	0x20001190
    1d0c:	000019a5 	.word	0x000019a5

00001d10 <bm_init_signal>:

/* Init the Signal */
void bm_init_signal(void (*signal_cb)()) {
    1d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d14:	4607      	mov	r7, r0
  dev_signal = device_get_binding(SIGNAL_GPIO_LABEL);
    1d16:	4822      	ldr	r0, [pc, #136]	; (1da0 <bm_init_signal+0x90>)
    1d18:	4d22      	ldr	r5, [pc, #136]	; (1da4 <bm_init_signal+0x94>)
    1d1a:	f020 f839 	bl	21d90 <device_get_binding>
    1d1e:	6028      	str	r0, [r5, #0]
  if (dev_signal == NULL) {
    1d20:	b928      	cbnz	r0, 1d2e <bm_init_signal+0x1e>
    printk("Error: didn't find %s device\n", SIGNAL_GPIO_LABEL);
    1d22:	491f      	ldr	r1, [pc, #124]	; (1da0 <bm_init_signal+0x90>)
    1d24:	4820      	ldr	r0, [pc, #128]	; (1da8 <bm_init_signal+0x98>)
  gpio_add_callback(dev_signal, &signal_cb_data);
  printk("Set up signal at %s pin %d\n", SIGNAL_GPIO_LABEL, SIGNAL_GPIO_PIN);
  signal_callback = signal_cb;

  k_delayed_work_init(&signal_debounce, signal_debounce_fn);
}
    1d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printk("Error: didn't find %s device\n", SIGNAL_GPIO_LABEL);
    1d2a:	f020 b8ce 	b.w	21eca <printk>
  ret = gpio_pin_configure(dev_signal, SIGNAL_GPIO_PIN, GPIO_PULL_DOWN | GPIO_INPUT);
    1d2e:	210d      	movs	r1, #13
    1d30:	f44f 7290 	mov.w	r2, #288	; 0x120
    1d34:	f7ff fec8 	bl	1ac8 <gpio_pin_configure>
    1d38:	4e1c      	ldr	r6, [pc, #112]	; (1dac <bm_init_signal+0x9c>)
    1d3a:	4601      	mov	r1, r0
    1d3c:	6030      	str	r0, [r6, #0]
  if (ret != 0) {
    1d3e:	b130      	cbz	r0, 1d4e <bm_init_signal+0x3e>
    printk("Error %d: failed to configure %s pin %d\n",
    1d40:	4a17      	ldr	r2, [pc, #92]	; (1da0 <bm_init_signal+0x90>)
    1d42:	481b      	ldr	r0, [pc, #108]	; (1db0 <bm_init_signal+0xa0>)
    1d44:	230d      	movs	r3, #13
}
    1d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printk("Error %d: failed to configure interrupt on %s pin %d\n",
    1d4a:	f020 b8be 	b.w	21eca <printk>
  ret = gpio_pin_interrupt_configure(dev_signal,
    1d4e:	6828      	ldr	r0, [r5, #0]
    1d50:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
    1d54:	210d      	movs	r1, #13
    1d56:	f7ff fe49 	bl	19ec <z_impl_gpio_pin_interrupt_configure>
    1d5a:	4604      	mov	r4, r0
    1d5c:	6030      	str	r0, [r6, #0]
  if (ret != 0) {
    1d5e:	b120      	cbz	r0, 1d6a <bm_init_signal+0x5a>
    printk("Error %d: failed to configure interrupt on %s pin %d\n",
    1d60:	4601      	mov	r1, r0
    1d62:	230d      	movs	r3, #13
    1d64:	4a0e      	ldr	r2, [pc, #56]	; (1da0 <bm_init_signal+0x90>)
    1d66:	4813      	ldr	r0, [pc, #76]	; (1db4 <bm_init_signal+0xa4>)
    1d68:	e7ed      	b.n	1d46 <bm_init_signal+0x36>
	callback->handler = handler;
    1d6a:	4913      	ldr	r1, [pc, #76]	; (1db8 <bm_init_signal+0xa8>)
    1d6c:	4b13      	ldr	r3, [pc, #76]	; (1dbc <bm_init_signal+0xac>)
    1d6e:	604b      	str	r3, [r1, #4]
  gpio_add_callback(dev_signal, &signal_cb_data);
    1d70:	6828      	ldr	r0, [r5, #0]
	callback->pin_mask = pin_mask;
    1d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1d76:	608b      	str	r3, [r1, #8]
    1d78:	f020 f802 	bl	21d80 <gpio_add_callback>
  printk("Set up signal at %s pin %d\n", SIGNAL_GPIO_LABEL, SIGNAL_GPIO_PIN);
    1d7c:	220d      	movs	r2, #13
    1d7e:	4908      	ldr	r1, [pc, #32]	; (1da0 <bm_init_signal+0x90>)
    1d80:	480f      	ldr	r0, [pc, #60]	; (1dc0 <bm_init_signal+0xb0>)
    1d82:	f020 f8a2 	bl	21eca <printk>
  signal_callback = signal_cb;
    1d86:	4b0f      	ldr	r3, [pc, #60]	; (1dc4 <bm_init_signal+0xb4>)
    1d88:	601f      	str	r7, [r3, #0]
    1d8a:	4b0f      	ldr	r3, [pc, #60]	; (1dc8 <bm_init_signal+0xb8>)
    1d8c:	2230      	movs	r2, #48	; 0x30
    1d8e:	4621      	mov	r1, r4
    1d90:	4618      	mov	r0, r3
    1d92:	f022 fa06 	bl	241a2 <memset>
    1d96:	4a0d      	ldr	r2, [pc, #52]	; (1dcc <bm_init_signal+0xbc>)
    1d98:	6042      	str	r2, [r0, #4]
}
    1d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d9e:	bf00      	nop
    1da0:	00029dda 	.word	0x00029dda
    1da4:	20002250 	.word	0x20002250
    1da8:	00029de1 	.word	0x00029de1
    1dac:	20002268 	.word	0x20002268
    1db0:	00029dff 	.word	0x00029dff
    1db4:	00029e28 	.word	0x00029e28
    1db8:	20002270 	.word	0x20002270
    1dbc:	00001c2d 	.word	0x00001c2d
    1dc0:	00029f9c 	.word	0x00029f9c
    1dc4:	2000226c 	.word	0x2000226c
    1dc8:	200011f0 	.word	0x200011f0
    1dcc:	000019bd 	.word	0x000019bd

00001dd0 <bm_init_pulse>:

/* Init the Pulse */
void bm_init_pulse(void (*pulse_cb)()) {
    1dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1dd4:	4607      	mov	r7, r0
  dev_pulse = device_get_binding(PULSE_GPIO_LABEL);
    1dd6:	4822      	ldr	r0, [pc, #136]	; (1e60 <bm_init_pulse+0x90>)
    1dd8:	4d22      	ldr	r5, [pc, #136]	; (1e64 <bm_init_pulse+0x94>)
    1dda:	f01f ffd9 	bl	21d90 <device_get_binding>
    1dde:	6028      	str	r0, [r5, #0]
  if (dev_pulse == NULL) {
    1de0:	b928      	cbnz	r0, 1dee <bm_init_pulse+0x1e>
    printk("Error: didn't find %s device\n", PULSE_GPIO_LABEL);
    1de2:	491f      	ldr	r1, [pc, #124]	; (1e60 <bm_init_pulse+0x90>)
    1de4:	4820      	ldr	r0, [pc, #128]	; (1e68 <bm_init_pulse+0x98>)
  gpio_add_callback(dev_pulse, &pulse_cb_data);
  printk("Set up pulse at %s pin %d\n", PULSE_GPIO_LABEL, PULSE_GPIO_PIN);
  pulse_callback = pulse_cb;

  k_delayed_work_init(&pulse_debounce, pulse_debounce_fn);
}
    1de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printk("Error: didn't find %s device\n", PULSE_GPIO_LABEL);
    1dea:	f020 b86e 	b.w	21eca <printk>
  ret = gpio_pin_configure(dev_pulse, PULSE_GPIO_PIN, GPIO_PULL_DOWN | GPIO_INPUT);
    1dee:	210f      	movs	r1, #15
    1df0:	f44f 7290 	mov.w	r2, #288	; 0x120
    1df4:	f7ff fe68 	bl	1ac8 <gpio_pin_configure>
    1df8:	4e1c      	ldr	r6, [pc, #112]	; (1e6c <bm_init_pulse+0x9c>)
    1dfa:	4601      	mov	r1, r0
    1dfc:	6030      	str	r0, [r6, #0]
  if (ret != 0) {
    1dfe:	b130      	cbz	r0, 1e0e <bm_init_pulse+0x3e>
    printk("Error %d: failed to configure %s pin %d\n",
    1e00:	4a17      	ldr	r2, [pc, #92]	; (1e60 <bm_init_pulse+0x90>)
    1e02:	481b      	ldr	r0, [pc, #108]	; (1e70 <bm_init_pulse+0xa0>)
    1e04:	230f      	movs	r3, #15
}
    1e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printk("Error %d: failed to configure interrupt on %s pin %d\n",
    1e0a:	f020 b85e 	b.w	21eca <printk>
  ret = gpio_pin_interrupt_configure(dev_pulse,
    1e0e:	6828      	ldr	r0, [r5, #0]
    1e10:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
    1e14:	210f      	movs	r1, #15
    1e16:	f7ff fde9 	bl	19ec <z_impl_gpio_pin_interrupt_configure>
    1e1a:	4604      	mov	r4, r0
    1e1c:	6030      	str	r0, [r6, #0]
  if (ret != 0) {
    1e1e:	b120      	cbz	r0, 1e2a <bm_init_pulse+0x5a>
    printk("Error %d: failed to configure interrupt on %s pin %d\n",
    1e20:	4601      	mov	r1, r0
    1e22:	230f      	movs	r3, #15
    1e24:	4a0e      	ldr	r2, [pc, #56]	; (1e60 <bm_init_pulse+0x90>)
    1e26:	4813      	ldr	r0, [pc, #76]	; (1e74 <bm_init_pulse+0xa4>)
    1e28:	e7ed      	b.n	1e06 <bm_init_pulse+0x36>
	callback->handler = handler;
    1e2a:	4913      	ldr	r1, [pc, #76]	; (1e78 <bm_init_pulse+0xa8>)
    1e2c:	4b13      	ldr	r3, [pc, #76]	; (1e7c <bm_init_pulse+0xac>)
    1e2e:	604b      	str	r3, [r1, #4]
  gpio_add_callback(dev_pulse, &pulse_cb_data);
    1e30:	6828      	ldr	r0, [r5, #0]
	callback->pin_mask = pin_mask;
    1e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1e36:	608b      	str	r3, [r1, #8]
    1e38:	f01f ffa2 	bl	21d80 <gpio_add_callback>
  printk("Set up pulse at %s pin %d\n", PULSE_GPIO_LABEL, PULSE_GPIO_PIN);
    1e3c:	220f      	movs	r2, #15
    1e3e:	4908      	ldr	r1, [pc, #32]	; (1e60 <bm_init_pulse+0x90>)
    1e40:	480f      	ldr	r0, [pc, #60]	; (1e80 <bm_init_pulse+0xb0>)
    1e42:	f020 f842 	bl	21eca <printk>
  pulse_callback = pulse_cb;
    1e46:	4b0f      	ldr	r3, [pc, #60]	; (1e84 <bm_init_pulse+0xb4>)
    1e48:	601f      	str	r7, [r3, #0]
    1e4a:	4b0f      	ldr	r3, [pc, #60]	; (1e88 <bm_init_pulse+0xb8>)
    1e4c:	2230      	movs	r2, #48	; 0x30
    1e4e:	4621      	mov	r1, r4
    1e50:	4618      	mov	r0, r3
    1e52:	f022 f9a6 	bl	241a2 <memset>
    1e56:	4a0d      	ldr	r2, [pc, #52]	; (1e8c <bm_init_pulse+0xbc>)
    1e58:	6042      	str	r2, [r0, #4]
}
    1e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e5e:	bf00      	nop
    1e60:	00029dda 	.word	0x00029dda
    1e64:	2000224c 	.word	0x2000224c
    1e68:	00029de1 	.word	0x00029de1
    1e6c:	20002268 	.word	0x20002268
    1e70:	00029dff 	.word	0x00029dff
    1e74:	00029e28 	.word	0x00029e28
    1e78:	2000225c 	.word	0x2000225c
    1e7c:	00001be5 	.word	0x00001be5
    1e80:	00029f81 	.word	0x00029f81
    1e84:	20002258 	.word	0x20002258
    1e88:	200011c0 	.word	0x200011c0
    1e8c:	000019d5 	.word	0x000019d5

00001e90 <bm_init_leds>:

/* Init the Leds */
void bm_init_leds() {
    1e90:	b510      	push	{r4, lr}
  dev_led0 = device_get_binding(LED0);
    1e92:	482a      	ldr	r0, [pc, #168]	; (1f3c <bm_init_leds+0xac>)
    1e94:	f01f ff7c 	bl	21d90 <device_get_binding>
    1e98:	4a29      	ldr	r2, [pc, #164]	; (1f40 <bm_init_leds+0xb0>)
    1e9a:	6010      	str	r0, [r2, #0]
  if (dev_led0 == NULL) {
    1e9c:	b920      	cbnz	r0, 1ea8 <bm_init_leds+0x18>
    printk("Error no LED0 found");
    1e9e:	4829      	ldr	r0, [pc, #164]	; (1f44 <bm_init_leds+0xb4>)
  ret = gpio_pin_configure(dev_led3, PIN_LED3, GPIO_OUTPUT_INACTIVE | FLAGS_LED3);
  if (ret < 0) {
    printk("Error in configuration of led3 pin (err %d)", ret);
    return;
  }
}
    1ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("Error no LED1 found");
    1ea4:	f020 b811 	b.w	21eca <printk>
  ret = gpio_pin_configure(dev_led0, PIN_LED0, GPIO_OUTPUT_INACTIVE | FLAGS_LED0);
    1ea8:	2106      	movs	r1, #6
    1eaa:	f241 6201 	movw	r2, #5633	; 0x1601
    1eae:	f7ff fe0b 	bl	1ac8 <gpio_pin_configure>
    1eb2:	4c25      	ldr	r4, [pc, #148]	; (1f48 <bm_init_leds+0xb8>)
  if (ret < 0) {
    1eb4:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led0, PIN_LED0, GPIO_OUTPUT_INACTIVE | FLAGS_LED0);
    1eb6:	4601      	mov	r1, r0
    1eb8:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    1eba:	da04      	bge.n	1ec6 <bm_init_leds+0x36>
    printk("Error in configuration of led0 pin (err %d)", ret);
    1ebc:	4823      	ldr	r0, [pc, #140]	; (1f4c <bm_init_leds+0xbc>)
}
    1ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("Error in configuration of led3 pin (err %d)", ret);
    1ec2:	f020 b802 	b.w	21eca <printk>
  dev_led1 = device_get_binding(LED1);
    1ec6:	481d      	ldr	r0, [pc, #116]	; (1f3c <bm_init_leds+0xac>)
    1ec8:	f01f ff62 	bl	21d90 <device_get_binding>
    1ecc:	4a20      	ldr	r2, [pc, #128]	; (1f50 <bm_init_leds+0xc0>)
    1ece:	6010      	str	r0, [r2, #0]
  if (dev_led1 == NULL) {
    1ed0:	b908      	cbnz	r0, 1ed6 <bm_init_leds+0x46>
    printk("Error no LED1 found");
    1ed2:	4820      	ldr	r0, [pc, #128]	; (1f54 <bm_init_leds+0xc4>)
    1ed4:	e7e4      	b.n	1ea0 <bm_init_leds+0x10>
  ret = gpio_pin_configure(dev_led1, PIN_LED1, GPIO_OUTPUT_INACTIVE | FLAGS_LED1);
    1ed6:	2108      	movs	r1, #8
    1ed8:	f241 6201 	movw	r2, #5633	; 0x1601
    1edc:	f7ff fdf4 	bl	1ac8 <gpio_pin_configure>
  if (ret < 0) {
    1ee0:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led1, PIN_LED1, GPIO_OUTPUT_INACTIVE | FLAGS_LED1);
    1ee2:	4601      	mov	r1, r0
    1ee4:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    1ee6:	da01      	bge.n	1eec <bm_init_leds+0x5c>
    printk("Error in configuration of led1 pin (err %d)", ret);
    1ee8:	481b      	ldr	r0, [pc, #108]	; (1f58 <bm_init_leds+0xc8>)
    1eea:	e7e8      	b.n	1ebe <bm_init_leds+0x2e>
  dev_led2 = device_get_binding(LED2);
    1eec:	481b      	ldr	r0, [pc, #108]	; (1f5c <bm_init_leds+0xcc>)
    1eee:	f01f ff4f 	bl	21d90 <device_get_binding>
    1ef2:	4a1b      	ldr	r2, [pc, #108]	; (1f60 <bm_init_leds+0xd0>)
    1ef4:	6010      	str	r0, [r2, #0]
  if (dev_led2 == NULL) {
    1ef6:	b908      	cbnz	r0, 1efc <bm_init_leds+0x6c>
    printk("Error no LED2 found");
    1ef8:	481a      	ldr	r0, [pc, #104]	; (1f64 <bm_init_leds+0xd4>)
    1efa:	e7d1      	b.n	1ea0 <bm_init_leds+0x10>
  ret = gpio_pin_configure(dev_led2, PIN_LED2, GPIO_OUTPUT_INACTIVE | FLAGS_LED2);
    1efc:	2109      	movs	r1, #9
    1efe:	f241 6201 	movw	r2, #5633	; 0x1601
    1f02:	f7ff fde1 	bl	1ac8 <gpio_pin_configure>
  if (ret < 0) {
    1f06:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led2, PIN_LED2, GPIO_OUTPUT_INACTIVE | FLAGS_LED2);
    1f08:	4601      	mov	r1, r0
    1f0a:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    1f0c:	da01      	bge.n	1f12 <bm_init_leds+0x82>
    printk("Error in configuration of led2 pin (err %d)", ret);
    1f0e:	4816      	ldr	r0, [pc, #88]	; (1f68 <bm_init_leds+0xd8>)
    1f10:	e7d5      	b.n	1ebe <bm_init_leds+0x2e>
  dev_led3 = device_get_binding(LED3);
    1f12:	480a      	ldr	r0, [pc, #40]	; (1f3c <bm_init_leds+0xac>)
    1f14:	f01f ff3c 	bl	21d90 <device_get_binding>
    1f18:	4a14      	ldr	r2, [pc, #80]	; (1f6c <bm_init_leds+0xdc>)
    1f1a:	6010      	str	r0, [r2, #0]
  if (dev_led3 == NULL) {
    1f1c:	b908      	cbnz	r0, 1f22 <bm_init_leds+0x92>
    printk("Error no LED3 found");
    1f1e:	4814      	ldr	r0, [pc, #80]	; (1f70 <bm_init_leds+0xe0>)
    1f20:	e7be      	b.n	1ea0 <bm_init_leds+0x10>
  ret = gpio_pin_configure(dev_led3, PIN_LED3, GPIO_OUTPUT_INACTIVE | FLAGS_LED3);
    1f22:	210c      	movs	r1, #12
    1f24:	f241 6201 	movw	r2, #5633	; 0x1601
    1f28:	f7ff fdce 	bl	1ac8 <gpio_pin_configure>
  if (ret < 0) {
    1f2c:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led3, PIN_LED3, GPIO_OUTPUT_INACTIVE | FLAGS_LED3);
    1f2e:	4601      	mov	r1, r0
    1f30:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    1f32:	da01      	bge.n	1f38 <bm_init_leds+0xa8>
    printk("Error in configuration of led3 pin (err %d)", ret);
    1f34:	480f      	ldr	r0, [pc, #60]	; (1f74 <bm_init_leds+0xe4>)
    1f36:	e7c2      	b.n	1ebe <bm_init_leds+0x2e>
}
    1f38:	bd10      	pop	{r4, pc}
    1f3a:	bf00      	nop
    1f3c:	00029e7a 	.word	0x00029e7a
    1f40:	2000223c 	.word	0x2000223c
    1f44:	00029e81 	.word	0x00029e81
    1f48:	20002268 	.word	0x20002268
    1f4c:	00029e95 	.word	0x00029e95
    1f50:	20002240 	.word	0x20002240
    1f54:	00029ec1 	.word	0x00029ec1
    1f58:	00029ed5 	.word	0x00029ed5
    1f5c:	00029dda 	.word	0x00029dda
    1f60:	20002244 	.word	0x20002244
    1f64:	00029f01 	.word	0x00029f01
    1f68:	00029f15 	.word	0x00029f15
    1f6c:	20002248 	.word	0x20002248
    1f70:	00029f41 	.word	0x00029f41
    1f74:	00029f55 	.word	0x00029f55

00001f78 <bm_init_switch>:

/* Init the Switch */
void bm_init_switch() {
    1f78:	b508      	push	{r3, lr}
  dev_switch = device_get_binding(SWITCH);
    1f7a:	480d      	ldr	r0, [pc, #52]	; (1fb0 <bm_init_switch+0x38>)
    1f7c:	f01f ff08 	bl	21d90 <device_get_binding>
    1f80:	4a0c      	ldr	r2, [pc, #48]	; (1fb4 <bm_init_switch+0x3c>)
    1f82:	6010      	str	r0, [r2, #0]
  if (dev_switch == NULL) {
    1f84:	b920      	cbnz	r0, 1f90 <bm_init_switch+0x18>
    printk("Error no SWITCH found");
    1f86:	480c      	ldr	r0, [pc, #48]	; (1fb8 <bm_init_switch+0x40>)
  ret = gpio_pin_configure(dev_switch, PIN_SWITCH, GPIO_OUTPUT_INACTIVE);
  if (ret < 0) {
    printk("Error in configuration of switch pin (err %d)", ret);
    return;
  }
}
    1f88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printk("Error no SWITCH found");
    1f8c:	f01f bf9d 	b.w	21eca <printk>
  ret = gpio_pin_configure(dev_switch, PIN_SWITCH, GPIO_OUTPUT_INACTIVE);
    1f90:	210a      	movs	r1, #10
    1f92:	f44f 52b0 	mov.w	r2, #5632	; 0x1600
    1f96:	f7ff fd97 	bl	1ac8 <gpio_pin_configure>
    1f9a:	4b08      	ldr	r3, [pc, #32]	; (1fbc <bm_init_switch+0x44>)
  if (ret < 0) {
    1f9c:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_switch, PIN_SWITCH, GPIO_OUTPUT_INACTIVE);
    1f9e:	4601      	mov	r1, r0
    1fa0:	6018      	str	r0, [r3, #0]
  if (ret < 0) {
    1fa2:	da04      	bge.n	1fae <bm_init_switch+0x36>
    printk("Error in configuration of switch pin (err %d)", ret);
    1fa4:	4806      	ldr	r0, [pc, #24]	; (1fc0 <bm_init_switch+0x48>)
}
    1fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printk("Error in configuration of switch pin (err %d)", ret);
    1faa:	f01f bf8e 	b.w	21eca <printk>
}
    1fae:	bd08      	pop	{r3, pc}
    1fb0:	00029dda 	.word	0x00029dda
    1fb4:	20002254 	.word	0x20002254
    1fb8:	00029fb8 	.word	0x00029fb8
    1fbc:	20002268 	.word	0x20002268
    1fc0:	00029fce 	.word	0x00029fce

00001fc4 <bm_led1_set>:
  return led0_is_on;
}

/* Set LED1. pca10059 -> Red LED (RGB) */
void bm_led1_set(bool state) {
  gpio_pin_set(dev_led1, PIN_LED1, (int)state);
    1fc4:	4b05      	ldr	r3, [pc, #20]	; (1fdc <bm_led1_set+0x18>)
void bm_led1_set(bool state) {
    1fc6:	b510      	push	{r4, lr}
  gpio_pin_set(dev_led1, PIN_LED1, (int)state);
    1fc8:	4602      	mov	r2, r0
void bm_led1_set(bool state) {
    1fca:	4604      	mov	r4, r0
  gpio_pin_set(dev_led1, PIN_LED1, (int)state);
    1fcc:	2108      	movs	r1, #8
    1fce:	6818      	ldr	r0, [r3, #0]
    1fd0:	f7ff fdce 	bl	1b70 <gpio_pin_set>
  led1_is_on = state;
    1fd4:	4b02      	ldr	r3, [pc, #8]	; (1fe0 <bm_led1_set+0x1c>)
    1fd6:	701c      	strb	r4, [r3, #0]
}
    1fd8:	bd10      	pop	{r4, pc}
    1fda:	bf00      	nop
    1fdc:	20002240 	.word	0x20002240
    1fe0:	200043bc 	.word	0x200043bc

00001fe4 <bm_led1_get>:

/* Get LED1 */
bool bm_led1_get() {
  return led1_is_on;
}
    1fe4:	4b01      	ldr	r3, [pc, #4]	; (1fec <bm_led1_get+0x8>)
    1fe6:	7818      	ldrb	r0, [r3, #0]
    1fe8:	4770      	bx	lr
    1fea:	bf00      	nop
    1fec:	200043bc 	.word	0x200043bc

00001ff0 <bm_led2_set>:

/* Set LED2. pca10059 -> Green LED (RGB) */
void bm_led2_set(bool state) {
  gpio_pin_set(dev_led2, PIN_LED2, (int)state);
    1ff0:	4b05      	ldr	r3, [pc, #20]	; (2008 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8>)
void bm_led2_set(bool state) {
    1ff2:	b510      	push	{r4, lr}
  gpio_pin_set(dev_led2, PIN_LED2, (int)state);
    1ff4:	4602      	mov	r2, r0
void bm_led2_set(bool state) {
    1ff6:	4604      	mov	r4, r0
  gpio_pin_set(dev_led2, PIN_LED2, (int)state);
    1ff8:	2109      	movs	r1, #9
    1ffa:	6818      	ldr	r0, [r3, #0]
    1ffc:	f7ff fdb8 	bl	1b70 <gpio_pin_set>
  led2_is_on = state;
    2000:	4b02      	ldr	r3, [pc, #8]	; (200c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc>)
    2002:	701c      	strb	r4, [r3, #0]
}
    2004:	bd10      	pop	{r4, pc}
    2006:	bf00      	nop
    2008:	20002244 	.word	0x20002244
    200c:	200043bd 	.word	0x200043bd

00002010 <bm_led2_get>:

/* Get LED2 */
bool bm_led2_get() {
  return led2_is_on;
}
    2010:	4b01      	ldr	r3, [pc, #4]	; (2018 <bm_led2_get+0x8>)
    2012:	7818      	ldrb	r0, [r3, #0]
    2014:	4770      	bx	lr
    2016:	bf00      	nop
    2018:	200043bd 	.word	0x200043bd

0000201c <bm_switch_set>:
  return led3_is_on;
}

/* Set SWITCH */
void bm_switch_set(bool state) {
  gpio_pin_set(dev_switch, PIN_SWITCH, (int)state);
    201c:	4b05      	ldr	r3, [pc, #20]	; (2034 <bm_switch_set+0x18>)
void bm_switch_set(bool state) {
    201e:	b510      	push	{r4, lr}
  gpio_pin_set(dev_switch, PIN_SWITCH, (int)state);
    2020:	4602      	mov	r2, r0
void bm_switch_set(bool state) {
    2022:	4604      	mov	r4, r0
  gpio_pin_set(dev_switch, PIN_SWITCH, (int)state);
    2024:	210a      	movs	r1, #10
    2026:	6818      	ldr	r0, [r3, #0]
    2028:	f7ff fda2 	bl	1b70 <gpio_pin_set>
  switch_is_on = state;
    202c:	4b02      	ldr	r3, [pc, #8]	; (2038 <bm_switch_set+0x1c>)
    202e:	701c      	strb	r4, [r3, #0]
}
    2030:	bd10      	pop	{r4, pc}
    2032:	bf00      	nop
    2034:	20002254 	.word	0x20002254
    2038:	20000de9 	.word	0x20000de9

0000203c <bm_switch_get>:

/* Get Switch */
bool bm_switch_get() {
  return switch_is_on;
}
    203c:	4b01      	ldr	r3, [pc, #4]	; (2044 <bm_switch_get+0x8>)
    203e:	7818      	ldrb	r0, [r3, #0]
    2040:	4770      	bx	lr
    2042:	bf00      	nop
    2044:	20000de9 	.word	0x20000de9

00002048 <bm_signal_state_get>:
}

/* Get SIGNAL State*/
bool bm_signal_state_get() {
  //gpio_pin_get(dev_led0, PIN_LED0, (int)state);
  return (bool) gpio_pin_get(dev_signal, SIGNAL_GPIO_PIN);
    2048:	4b11      	ldr	r3, [pc, #68]	; (2090 <bm_signal_state_get+0x48>)
bool bm_signal_state_get() {
    204a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return (bool) gpio_pin_get(dev_signal, SIGNAL_GPIO_PIN);
    204c:	681c      	ldr	r4, [r3, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    204e:	6863      	ldr	r3, [r4, #4]
    2050:	681b      	ldr	r3, [r3, #0]
    2052:	049b      	lsls	r3, r3, #18
    2054:	d40a      	bmi.n	206c <bm_signal_state_get+0x24>
    2056:	490f      	ldr	r1, [pc, #60]	; (2094 <bm_signal_state_get+0x4c>)
    2058:	480f      	ldr	r0, [pc, #60]	; (2098 <bm_signal_state_get+0x50>)
    205a:	f240 329f 	movw	r2, #927	; 0x39f
    205e:	f01f ff34 	bl	21eca <printk>
    2062:	f240 319f 	movw	r1, #927	; 0x39f
    2066:	480b      	ldr	r0, [pc, #44]	; (2094 <bm_signal_state_get+0x4c>)
    2068:	f020 f9e1 	bl	2242e <assert_post_action>
	const struct gpio_driver_data *const data =
    206c:	68e5      	ldr	r5, [r4, #12]
	return api->port_get_raw(port, value);
    206e:	68a3      	ldr	r3, [r4, #8]
    2070:	a901      	add	r1, sp, #4
    2072:	685b      	ldr	r3, [r3, #4]
    2074:	4620      	mov	r0, r4
    2076:	4798      	blx	r3
	if (ret == 0) {
    2078:	b920      	cbnz	r0, 2084 <bm_signal_state_get+0x3c>
		*value ^= data->invert;
    207a:	682b      	ldr	r3, [r5, #0]
    207c:	9801      	ldr	r0, [sp, #4]
    207e:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    2080:	f3c0 3040 	ubfx	r0, r0, #13, #1
}
    2084:	3000      	adds	r0, #0
    2086:	bf18      	it	ne
    2088:	2001      	movne	r0, #1
    208a:	b003      	add	sp, #12
    208c:	bd30      	pop	{r4, r5, pc}
    208e:	bf00      	nop
    2090:	20002250 	.word	0x20002250
    2094:	00029ffc 	.word	0x00029ffc
    2098:	0002a026 	.word	0x0002a026

0000209c <main>:
#include "bm_simple_buttons_and_leds.h"
#include <zephyr.h>

/**@brief Function for application main entry.
 */
void main(void) {
    209c:	b508      	push	{r3, lr}
  // Start Application
  printk("Starting Application...\n");
    209e:	4809      	ldr	r0, [pc, #36]	; (20c4 <main+0x28>)
    20a0:	f01f ff13 	bl	21eca <printk>
  // Init MAC Address
  uint32_t LSB_MAC_Address = NRF_FICR->DEVICEADDR[0];
    20a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  printk("Preprogrammed Randomly Static MAC-Address (LSB): 0x%x, %u \n", LSB_MAC_Address, LSB_MAC_Address);
    20a8:	4807      	ldr	r0, [pc, #28]	; (20c8 <main+0x2c>)
  uint32_t LSB_MAC_Address = NRF_FICR->DEVICEADDR[0];
    20aa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  printk("Preprogrammed Randomly Static MAC-Address (LSB): 0x%x, %u \n", LSB_MAC_Address, LSB_MAC_Address);
    20ae:	4611      	mov	r1, r2
    20b0:	f01f ff0b 	bl	21eca <printk>
  // Init Leds
  bm_init_leds();
    20b4:	f7ff feec 	bl	1e90 <bm_init_leds>
  bm_init_switch();
    20b8:	f7ff ff5e 	bl	1f78 <bm_init_switch>
  // Start Mesh Operation
  bm_blemesh_enable(); // Will return faster than the Stack is realy ready... keep on waiting in the transition.
    20bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  bm_blemesh_enable(); // Will return faster than the Stack is realy ready... keep on waiting in the transition.
    20c0:	f7ff bbd0 	b.w	1864 <bm_blemesh_enable>
    20c4:	0002a03e 	.word	0x0002a03e
    20c8:	0002a057 	.word	0x0002a057

000020cc <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    20cc:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    20ce:	4c09      	ldr	r4, [pc, #36]	; (20f4 <crc8_ccitt+0x28>)
    20d0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    20d2:	4291      	cmp	r1, r2
    20d4:	d100      	bne.n	20d8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    20d6:	bd10      	pop	{r4, pc}
		val ^= p[i];
    20d8:	f811 3b01 	ldrb.w	r3, [r1], #1
    20dc:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    20de:	0918      	lsrs	r0, r3, #4
    20e0:	5c20      	ldrb	r0, [r4, r0]
    20e2:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    20e6:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    20e8:	0918      	lsrs	r0, r3, #4
    20ea:	5c20      	ldrb	r0, [r4, r0]
    20ec:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    20f0:	b2c0      	uxtb	r0, r0
    20f2:	e7ee      	b.n	20d2 <crc8_ccitt+0x6>
    20f4:	0002a093 	.word	0x0002a093

000020f8 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    20f8:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    20fa:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    20fc:	f003 0303 	and.w	r3, r3, #3
    2100:	4605      	mov	r5, r0

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    2102:	2b02      	cmp	r3, #2
{
    2104:	460e      	mov	r6, r1
	notify->result = res;
    2106:	60a9      	str	r1, [r5, #8]
	switch (method) {
    2108:	d010      	beq.n	212c <sys_notify_finalize+0x34>
    210a:	2b03      	cmp	r3, #3
    210c:	d004      	beq.n	2118 <sys_notify_finalize+0x20>
    210e:	2b01      	cmp	r3, #1
    2110:	d10f      	bne.n	2132 <sys_notify_finalize+0x3a>
	sys_notify_generic_callback rv = 0;
    2112:	2400      	movs	r4, #0
	struct k_poll_signal *sig = NULL;
    2114:	4620      	mov	r0, r4
    2116:	e001      	b.n	211c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    2118:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    211a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    211c:	2300      	movs	r3, #0
    211e:	606b      	str	r3, [r5, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    2120:	b110      	cbz	r0, 2128 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    2122:	4631      	mov	r1, r6
    2124:	f01e feca 	bl	20ebc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    2128:	4620      	mov	r0, r4
    212a:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
    212c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    212e:	2400      	movs	r4, #0
		break;
    2130:	e7f4      	b.n	211c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    2132:	2245      	movs	r2, #69	; 0x45
    2134:	4904      	ldr	r1, [pc, #16]	; (2148 <sys_notify_finalize+0x50>)
    2136:	4805      	ldr	r0, [pc, #20]	; (214c <sys_notify_finalize+0x54>)
    2138:	f01f fec7 	bl	21eca <printk>
    213c:	2145      	movs	r1, #69	; 0x45
    213e:	4802      	ldr	r0, [pc, #8]	; (2148 <sys_notify_finalize+0x50>)
    2140:	f020 f975 	bl	2242e <assert_post_action>
	sys_notify_generic_callback rv = 0;
    2144:	2400      	movs	r4, #0
    2146:	e7e8      	b.n	211a <sys_notify_finalize+0x22>
    2148:	0002a0a3 	.word	0x0002a0a3
    214c:	0002a026 	.word	0x0002a026

00002150 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2150:	680b      	ldr	r3, [r1, #0]
    2152:	3301      	adds	r3, #1
    2154:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2156:	4b01      	ldr	r3, [pc, #4]	; (215c <char_out+0xc>)
    2158:	681b      	ldr	r3, [r3, #0]
    215a:	4718      	bx	r3
    215c:	20000538 	.word	0x20000538

00002160 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2160:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
    2162:	2300      	movs	r3, #0
    2164:	9301      	str	r3, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2166:	4602      	mov	r2, r0
    2168:	460b      	mov	r3, r1
    216a:	4803      	ldr	r0, [pc, #12]	; (2178 <vprintk+0x18>)
    216c:	a901      	add	r1, sp, #4
    216e:	f000 fc47 	bl	2a00 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2172:	b003      	add	sp, #12
    2174:	f85d fb04 	ldr.w	pc, [sp], #4
    2178:	00002151 	.word	0x00002151

0000217c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    217c:	b530      	push	{r4, r5, lr}
    217e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    2180:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    2184:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    2186:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    2188:	a901      	add	r1, sp, #4
    218a:	4805      	ldr	r0, [pc, #20]	; (21a0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    218c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    218e:	f000 fc37 	bl	2a00 <cbvprintf>

	if (ctx.count < ctx.max) {
    2192:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    2196:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    2198:	bfb8      	it	lt
    219a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    219c:	b005      	add	sp, #20
    219e:	bd30      	pop	{r4, r5, pc}
    21a0:	00021ea5 	.word	0x00021ea5

000021a4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    21a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    21a8:	f8b0 801c 	ldrh.w	r8, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    21ac:	f018 0f08 	tst.w	r8, #8
{
    21b0:	4604      	mov	r4, r0
    21b2:	4693      	mov	fp, r2
	if (processing) {
    21b4:	d01c      	beq.n	21f0 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    21b6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    21b8:	bf0c      	ite	eq
    21ba:	f048 0810 	orreq.w	r8, r8, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    21be:	f048 0820 	orrne.w	r8, r8, #32
    21c2:	f8a0 801c 	strh.w	r8, [r0, #28]
    21c6:	f104 0014 	add.w	r0, r4, #20
    21ca:	f01d ff5b 	bl	20084 <z_spin_unlock_valid>
    21ce:	b940      	cbnz	r0, 21e2 <process_event+0x3e>
    21d0:	49b9      	ldr	r1, [pc, #740]	; (24b8 <process_event+0x314>)
    21d2:	48ba      	ldr	r0, [pc, #744]	; (24bc <process_event+0x318>)
    21d4:	22a7      	movs	r2, #167	; 0xa7
    21d6:	f01f fe78 	bl	21eca <printk>
    21da:	21a7      	movs	r1, #167	; 0xa7
    21dc:	48b6      	ldr	r0, [pc, #728]	; (24b8 <process_event+0x314>)
    21de:	f020 f926 	bl	2242e <assert_post_action>
    21e2:	f38b 8811 	msr	BASEPRI, fp
    21e6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    21ea:	b003      	add	sp, #12
    21ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    21f0:	4eb3      	ldr	r6, [pc, #716]	; (24c0 <process_event+0x31c>)
    21f2:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 24bc <process_event+0x318>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    21f6:	f008 0807 	and.w	r8, r8, #7
		if (evt == EVT_RECHECK) {
    21fa:	2902      	cmp	r1, #2
    21fc:	d106      	bne.n	220c <process_event+0x68>
			evt = process_recheck(mgr);
    21fe:	4620      	mov	r0, r4
    2200:	f01f fe7d 	bl	21efe <process_recheck>
		if (evt == EVT_NOP) {
    2204:	2800      	cmp	r0, #0
    2206:	d0de      	beq.n	21c6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    2208:	2801      	cmp	r0, #1
    220a:	d161      	bne.n	22d0 <process_event+0x12c>
			res = mgr->last_res;
    220c:	f8d4 a018 	ldr.w	sl, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2210:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    2212:	f1ba 0f00 	cmp.w	sl, #0
    2216:	da19      	bge.n	224c <process_event+0xa8>
	list->head = NULL;
    2218:	2700      	movs	r7, #0
		*clients = mgr->clients;
    221a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    221c:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    2220:	e9c4 7700 	strd	r7, r7, [r4]
    2224:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2228:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    222a:	8ba3      	ldrh	r3, [r4, #28]
    222c:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2230:	4542      	cmp	r2, r8
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2232:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    2234:	d003      	beq.n	223e <process_event+0x9a>
		if (do_monitors
    2236:	68a2      	ldr	r2, [r4, #8]
    2238:	2a00      	cmp	r2, #0
    223a:	f040 80ef 	bne.w	241c <process_event+0x278>
		    || !sys_slist_is_empty(&clients)
    223e:	b915      	cbnz	r5, 2246 <process_event+0xa2>
		    || (transit != NULL)) {
    2240:	2f00      	cmp	r7, #0
    2242:	f000 8129 	beq.w	2498 <process_event+0x2f4>
    2246:	f04f 0800 	mov.w	r8, #0
    224a:	e0e9      	b.n	2420 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    224c:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    2250:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2252:	2901      	cmp	r1, #1
    2254:	d81e      	bhi.n	2294 <process_event+0xf0>
	list->head = NULL;
    2256:	2100      	movs	r1, #0
    2258:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    225c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    225e:	6825      	ldr	r5, [r4, #0]
    2260:	b29b      	uxth	r3, r3
	list->tail = NULL;
    2262:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    2266:	d10a      	bne.n	227e <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2268:	b13d      	cbz	r5, 227a <process_event+0xd6>
    226a:	8be2      	ldrh	r2, [r4, #30]
    226c:	4629      	mov	r1, r5
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    226e:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    2270:	3201      	adds	r2, #1
    2272:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2274:	2900      	cmp	r1, #0
    2276:	d1fa      	bne.n	226e <process_event+0xca>
    2278:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    227a:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    227e:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    2280:	4620      	mov	r0, r4
    2282:	f01f fe3c 	bl	21efe <process_recheck>
    2286:	b118      	cbz	r0, 2290 <process_event+0xec>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2288:	8ba3      	ldrh	r3, [r4, #28]
    228a:	f043 0320 	orr.w	r3, r3, #32
    228e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    2290:	2700      	movs	r7, #0
    2292:	e7ca      	b.n	222a <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    2294:	2a04      	cmp	r2, #4
    2296:	d10f      	bne.n	22b8 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2298:	f023 0307 	bic.w	r3, r3, #7
    229c:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    229e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    22a0:	4620      	mov	r0, r4
    22a2:	f01f fe2c 	bl	21efe <process_recheck>
    22a6:	2800      	cmp	r0, #0
    22a8:	f000 80b6 	beq.w	2418 <process_event+0x274>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    22ac:	f042 0220 	orr.w	r2, r2, #32
    22b0:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    22b2:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    22b4:	462f      	mov	r7, r5
    22b6:	e7b8      	b.n	222a <process_event+0x86>
		__ASSERT_NO_MSG(false);
    22b8:	4631      	mov	r1, r6
    22ba:	4648      	mov	r0, r9
    22bc:	f240 1219 	movw	r2, #281	; 0x119
    22c0:	f01f fe03 	bl	21eca <printk>
    22c4:	f240 1119 	movw	r1, #281	; 0x119
    22c8:	4630      	mov	r0, r6
    22ca:	f020 f8b0 	bl	2242e <assert_post_action>
    22ce:	e7f0      	b.n	22b2 <process_event+0x10e>
		} else if (evt == EVT_START) {
    22d0:	2803      	cmp	r0, #3
    22d2:	d131      	bne.n	2338 <process_event+0x194>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    22d4:	f1b8 0f00 	cmp.w	r8, #0
    22d8:	d00a      	beq.n	22f0 <process_event+0x14c>
    22da:	4631      	mov	r1, r6
    22dc:	4648      	mov	r0, r9
    22de:	f44f 72aa 	mov.w	r2, #340	; 0x154
    22e2:	f01f fdf2 	bl	21eca <printk>
    22e6:	f44f 71aa 	mov.w	r1, #340	; 0x154
    22ea:	4630      	mov	r0, r6
    22ec:	f020 f89f 	bl	2242e <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    22f0:	6823      	ldr	r3, [r4, #0]
    22f2:	b953      	cbnz	r3, 230a <process_event+0x166>
    22f4:	4631      	mov	r1, r6
    22f6:	4648      	mov	r0, r9
    22f8:	f240 1255 	movw	r2, #341	; 0x155
    22fc:	f01f fde5 	bl	21eca <printk>
    2300:	f240 1155 	movw	r1, #341	; 0x155
    2304:	4630      	mov	r0, r6
    2306:	f020 f892 	bl	2242e <assert_post_action>
			transit = mgr->transitions->start;
    230a:	6923      	ldr	r3, [r4, #16]
    230c:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    230e:	b957      	cbnz	r7, 2326 <process_event+0x182>
    2310:	4631      	mov	r1, r6
    2312:	4648      	mov	r0, r9
    2314:	f44f 72ac 	mov.w	r2, #344	; 0x158
    2318:	f01f fdd7 	bl	21eca <printk>
    231c:	f44f 71ac 	mov.w	r1, #344	; 0x158
    2320:	4630      	mov	r0, r6
    2322:	f020 f884 	bl	2242e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2326:	8ba3      	ldrh	r3, [r4, #28]
    2328:	f023 0307 	bic.w	r3, r3, #7
    232c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    2330:	83a3      	strh	r3, [r4, #28]
    2332:	2500      	movs	r5, #0
		res = 0;
    2334:	46aa      	mov	sl, r5
    2336:	e778      	b.n	222a <process_event+0x86>
		} else if (evt == EVT_STOP) {
    2338:	2804      	cmp	r0, #4
    233a:	d12e      	bne.n	239a <process_event+0x1f6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    233c:	f1b8 0f02 	cmp.w	r8, #2
    2340:	d00a      	beq.n	2358 <process_event+0x1b4>
    2342:	4631      	mov	r1, r6
    2344:	4648      	mov	r0, r9
    2346:	f240 125b 	movw	r2, #347	; 0x15b
    234a:	f01f fdbe 	bl	21eca <printk>
    234e:	f240 115b 	movw	r1, #347	; 0x15b
    2352:	4630      	mov	r0, r6
    2354:	f020 f86b 	bl	2242e <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    2358:	8be3      	ldrh	r3, [r4, #30]
    235a:	b153      	cbz	r3, 2372 <process_event+0x1ce>
    235c:	4631      	mov	r1, r6
    235e:	4648      	mov	r0, r9
    2360:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    2364:	f01f fdb1 	bl	21eca <printk>
    2368:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    236c:	4630      	mov	r0, r6
    236e:	f020 f85e 	bl	2242e <assert_post_action>
			transit = mgr->transitions->stop;
    2372:	6923      	ldr	r3, [r4, #16]
    2374:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    2376:	b957      	cbnz	r7, 238e <process_event+0x1ea>
    2378:	4631      	mov	r1, r6
    237a:	4648      	mov	r0, r9
    237c:	f240 125f 	movw	r2, #351	; 0x15f
    2380:	f01f fda3 	bl	21eca <printk>
    2384:	f240 115f 	movw	r1, #351	; 0x15f
    2388:	4630      	mov	r0, r6
    238a:	f020 f850 	bl	2242e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    238e:	8ba3      	ldrh	r3, [r4, #28]
    2390:	f023 0307 	bic.w	r3, r3, #7
    2394:	f043 0304 	orr.w	r3, r3, #4
    2398:	e7ca      	b.n	2330 <process_event+0x18c>
		} else if (evt == EVT_RESET) {
    239a:	2805      	cmp	r0, #5
    239c:	d12e      	bne.n	23fc <process_event+0x258>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    239e:	f1b8 0f01 	cmp.w	r8, #1
    23a2:	d00a      	beq.n	23ba <process_event+0x216>
    23a4:	4631      	mov	r1, r6
    23a6:	4648      	mov	r0, r9
    23a8:	f44f 72b1 	mov.w	r2, #354	; 0x162
    23ac:	f01f fd8d 	bl	21eca <printk>
    23b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
    23b4:	4630      	mov	r0, r6
    23b6:	f020 f83a 	bl	2242e <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    23ba:	6823      	ldr	r3, [r4, #0]
    23bc:	b953      	cbnz	r3, 23d4 <process_event+0x230>
    23be:	4631      	mov	r1, r6
    23c0:	4648      	mov	r0, r9
    23c2:	f240 1263 	movw	r2, #355	; 0x163
    23c6:	f01f fd80 	bl	21eca <printk>
    23ca:	f240 1163 	movw	r1, #355	; 0x163
    23ce:	4630      	mov	r0, r6
    23d0:	f020 f82d 	bl	2242e <assert_post_action>
			transit = mgr->transitions->reset;
    23d4:	6923      	ldr	r3, [r4, #16]
    23d6:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    23d8:	b957      	cbnz	r7, 23f0 <process_event+0x24c>
    23da:	4631      	mov	r1, r6
    23dc:	4648      	mov	r0, r9
    23de:	f44f 72b3 	mov.w	r2, #358	; 0x166
    23e2:	f01f fd72 	bl	21eca <printk>
    23e6:	f44f 71b3 	mov.w	r1, #358	; 0x166
    23ea:	4630      	mov	r0, r6
    23ec:	f020 f81f 	bl	2242e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    23f0:	8ba3      	ldrh	r3, [r4, #28]
    23f2:	f023 0307 	bic.w	r3, r3, #7
    23f6:	f043 0305 	orr.w	r3, r3, #5
    23fa:	e799      	b.n	2330 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    23fc:	f240 1269 	movw	r2, #361	; 0x169
    2400:	4631      	mov	r1, r6
    2402:	4648      	mov	r0, r9
    2404:	f01f fd61 	bl	21eca <printk>
    2408:	2500      	movs	r5, #0
    240a:	f240 1169 	movw	r1, #361	; 0x169
    240e:	4630      	mov	r0, r6
    2410:	f020 f80d 	bl	2242e <assert_post_action>
		onoff_transition_fn transit = NULL;
    2414:	462f      	mov	r7, r5
    2416:	e78d      	b.n	2334 <process_event+0x190>
		if (process_recheck(mgr) != EVT_NOP) {
    2418:	4605      	mov	r5, r0
    241a:	e74b      	b.n	22b4 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    241c:	f04f 0801 	mov.w	r8, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2420:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    2424:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    2426:	f104 0314 	add.w	r3, r4, #20
    242a:	4618      	mov	r0, r3
    242c:	9301      	str	r3, [sp, #4]
    242e:	f01d fe29 	bl	20084 <z_spin_unlock_valid>
    2432:	b940      	cbnz	r0, 2446 <process_event+0x2a2>
    2434:	4920      	ldr	r1, [pc, #128]	; (24b8 <process_event+0x314>)
    2436:	4648      	mov	r0, r9
    2438:	22a7      	movs	r2, #167	; 0xa7
    243a:	f01f fd46 	bl	21eca <printk>
    243e:	21a7      	movs	r1, #167	; 0xa7
    2440:	481d      	ldr	r0, [pc, #116]	; (24b8 <process_event+0x314>)
    2442:	f01f fff4 	bl	2242e <assert_post_action>
    2446:	f38b 8811 	msr	BASEPRI, fp
    244a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    244e:	f1b8 0f00 	cmp.w	r8, #0
    2452:	d139      	bne.n	24c8 <process_event+0x324>
	while (!sys_slist_is_empty(list)) {
    2454:	2d00      	cmp	r5, #0
    2456:	d149      	bne.n	24ec <process_event+0x348>
			if (transit != NULL) {
    2458:	b117      	cbz	r7, 2460 <process_event+0x2bc>
				transit(mgr, transition_complete);
    245a:	491a      	ldr	r1, [pc, #104]	; (24c4 <process_event+0x320>)
    245c:	4620      	mov	r0, r4
    245e:	47b8      	blx	r7
	__asm__ volatile(
    2460:	f04f 0320 	mov.w	r3, #32
    2464:	f3ef 8b11 	mrs	fp, BASEPRI
    2468:	f383 8811 	msr	BASEPRI, r3
    246c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2470:	9801      	ldr	r0, [sp, #4]
    2472:	f01d fdf9 	bl	20068 <z_spin_lock_valid>
    2476:	b940      	cbnz	r0, 248a <process_event+0x2e6>
    2478:	490f      	ldr	r1, [pc, #60]	; (24b8 <process_event+0x314>)
    247a:	4648      	mov	r0, r9
    247c:	227c      	movs	r2, #124	; 0x7c
    247e:	f01f fd24 	bl	21eca <printk>
    2482:	217c      	movs	r1, #124	; 0x7c
    2484:	480c      	ldr	r0, [pc, #48]	; (24b8 <process_event+0x314>)
    2486:	f01f ffd2 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
    248a:	9801      	ldr	r0, [sp, #4]
    248c:	f01d fe0a 	bl	200a4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2490:	8ba3      	ldrh	r3, [r4, #28]
    2492:	f023 0308 	bic.w	r3, r3, #8
    2496:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2498:	8ba3      	ldrh	r3, [r4, #28]
    249a:	06da      	lsls	r2, r3, #27
    249c:	d530      	bpl.n	2500 <process_event+0x35c>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    249e:	f023 0310 	bic.w	r3, r3, #16
    24a2:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    24a4:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    24a6:	f8b4 801c 	ldrh.w	r8, [r4, #28]
    24aa:	f008 0807 	and.w	r8, r8, #7
	} while (evt != EVT_NOP);
    24ae:	2900      	cmp	r1, #0
    24b0:	f47f aea3 	bne.w	21fa <process_event+0x56>
out:
    24b4:	e687      	b.n	21c6 <process_event+0x22>
    24b6:	bf00      	nop
    24b8:	0002a0e8 	.word	0x0002a0e8
    24bc:	0002a026 	.word	0x0002a026
    24c0:	0002a0c6 	.word	0x0002a0c6
    24c4:	00002511 	.word	0x00002511
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    24c8:	68a1      	ldr	r1, [r4, #8]
    24ca:	2900      	cmp	r1, #0
    24cc:	d0c2      	beq.n	2454 <process_event+0x2b0>
    24ce:	f8d1 8000 	ldr.w	r8, [r1]
		mon->callback(mgr, mon, state, res);
    24d2:	f8d1 b004 	ldr.w	fp, [r1, #4]
    24d6:	9a00      	ldr	r2, [sp, #0]
    24d8:	4653      	mov	r3, sl
    24da:	4620      	mov	r0, r4
    24dc:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    24de:	f1b8 0f00 	cmp.w	r8, #0
    24e2:	d0b7      	beq.n	2454 <process_event+0x2b0>
    24e4:	4641      	mov	r1, r8
    24e6:	f8d8 8000 	ldr.w	r8, [r8]
    24ea:	e7f2      	b.n	24d2 <process_event+0x32e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    24ec:	f8d5 8000 	ldr.w	r8, [r5]
		notify_one(mgr, cli, state, res);
    24f0:	9a00      	ldr	r2, [sp, #0]
    24f2:	4629      	mov	r1, r5
    24f4:	4653      	mov	r3, sl
    24f6:	4620      	mov	r0, r4
    24f8:	f01f fd1d 	bl	21f36 <notify_one>
	while (!sys_slist_is_empty(list)) {
    24fc:	4645      	mov	r5, r8
    24fe:	e7a9      	b.n	2454 <process_event+0x2b0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2500:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2504:	bf1e      	ittt	ne
    2506:	f023 0320 	bicne.w	r3, r3, #32
    250a:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    250c:	2102      	movne	r1, #2
    250e:	e7ca      	b.n	24a6 <process_event+0x302>

00002510 <transition_complete>:
{
    2510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2512:	4604      	mov	r4, r0
    2514:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2516:	f100 0514 	add.w	r5, r0, #20
    251a:	f04f 0320 	mov.w	r3, #32
    251e:	f3ef 8611 	mrs	r6, BASEPRI
    2522:	f383 8811 	msr	BASEPRI, r3
    2526:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    252a:	4628      	mov	r0, r5
    252c:	f01d fd9c 	bl	20068 <z_spin_lock_valid>
    2530:	b940      	cbnz	r0, 2544 <transition_complete+0x34>
    2532:	490a      	ldr	r1, [pc, #40]	; (255c <transition_complete+0x4c>)
    2534:	480a      	ldr	r0, [pc, #40]	; (2560 <transition_complete+0x50>)
    2536:	227c      	movs	r2, #124	; 0x7c
    2538:	f01f fcc7 	bl	21eca <printk>
    253c:	217c      	movs	r1, #124	; 0x7c
    253e:	4807      	ldr	r0, [pc, #28]	; (255c <transition_complete+0x4c>)
    2540:	f01f ff75 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
    2544:	4628      	mov	r0, r5
    2546:	f01d fdad 	bl	200a4 <z_spin_lock_set_owner>
	mgr->last_res = res;
    254a:	61a7      	str	r7, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    254c:	4632      	mov	r2, r6
    254e:	4620      	mov	r0, r4
    2550:	2101      	movs	r1, #1
}
    2552:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    2556:	f7ff be25 	b.w	21a4 <process_event>
    255a:	bf00      	nop
    255c:	0002a0e8 	.word	0x0002a0e8
    2560:	0002a026 	.word	0x0002a026

00002564 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    2564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2568:	4604      	mov	r4, r0
    256a:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    256c:	f01f fcf9 	bl	21f62 <validate_args>

	if (rv < 0) {
    2570:	1e06      	subs	r6, r0, #0
    2572:	db52      	blt.n	261a <onoff_request+0xb6>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2574:	f104 0914 	add.w	r9, r4, #20
    2578:	f04f 0320 	mov.w	r3, #32
    257c:	f3ef 8a11 	mrs	sl, BASEPRI
    2580:	f383 8811 	msr	BASEPRI, r3
    2584:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2588:	4648      	mov	r0, r9
    258a:	f01d fd6d 	bl	20068 <z_spin_lock_valid>
    258e:	b940      	cbnz	r0, 25a2 <onoff_request+0x3e>
    2590:	4932      	ldr	r1, [pc, #200]	; (265c <onoff_request+0xf8>)
    2592:	4833      	ldr	r0, [pc, #204]	; (2660 <onoff_request+0xfc>)
    2594:	227c      	movs	r2, #124	; 0x7c
    2596:	f01f fc98 	bl	21eca <printk>
    259a:	217c      	movs	r1, #124	; 0x7c
    259c:	482f      	ldr	r0, [pc, #188]	; (265c <onoff_request+0xf8>)
    259e:	f01f ff46 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
    25a2:	4648      	mov	r0, r9
    25a4:	f01d fd7e 	bl	200a4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    25a8:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    25aa:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    25ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    25b0:	428b      	cmp	r3, r1
    25b2:	f002 0507 	and.w	r5, r2, #7
    25b6:	d04a      	beq.n	264e <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    25b8:	2d02      	cmp	r5, #2
    25ba:	d11c      	bne.n	25f6 <onoff_request+0x92>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    25bc:	3301      	adds	r3, #1
    25be:	83e3      	strh	r3, [r4, #30]
	rv = state;
    25c0:	462e      	mov	r6, r5
		notify = true;
    25c2:	2701      	movs	r7, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    25c4:	4648      	mov	r0, r9
    25c6:	f01d fd5d 	bl	20084 <z_spin_unlock_valid>
    25ca:	b940      	cbnz	r0, 25de <onoff_request+0x7a>
    25cc:	4923      	ldr	r1, [pc, #140]	; (265c <onoff_request+0xf8>)
    25ce:	4824      	ldr	r0, [pc, #144]	; (2660 <onoff_request+0xfc>)
    25d0:	22a7      	movs	r2, #167	; 0xa7
    25d2:	f01f fc7a 	bl	21eca <printk>
    25d6:	21a7      	movs	r1, #167	; 0xa7
    25d8:	4820      	ldr	r0, [pc, #128]	; (265c <onoff_request+0xf8>)
    25da:	f01f ff28 	bl	2242e <assert_post_action>
	__asm__ volatile(
    25de:	f38a 8811 	msr	BASEPRI, sl
    25e2:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    25e6:	b1c7      	cbz	r7, 261a <onoff_request+0xb6>
			notify_one(mgr, cli, state, 0);
    25e8:	2300      	movs	r3, #0
    25ea:	462a      	mov	r2, r5
    25ec:	4641      	mov	r1, r8
    25ee:	4620      	mov	r0, r4
    25f0:	f01f fca1 	bl	21f36 <notify_one>
    25f4:	e011      	b.n	261a <onoff_request+0xb6>
	} else if ((state == ONOFF_STATE_OFF)
    25f6:	0793      	lsls	r3, r2, #30
    25f8:	d001      	beq.n	25fe <onoff_request+0x9a>
		   || (state == ONOFF_STATE_TO_ON)) {
    25fa:	2d06      	cmp	r5, #6
    25fc:	d110      	bne.n	2620 <onoff_request+0xbc>
	parent->next = child;
    25fe:	2300      	movs	r3, #0
    2600:	f8c8 3000 	str.w	r3, [r8]
Z_GENLIST_APPEND(slist, snode)
    2604:	6863      	ldr	r3, [r4, #4]
    2606:	b9eb      	cbnz	r3, 2644 <onoff_request+0xe0>
	list->head = node;
    2608:	e9c4 8800 	strd	r8, r8, [r4]
	if (start) {
    260c:	462e      	mov	r6, r5
    260e:	bb05      	cbnz	r5, 2652 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    2610:	4652      	mov	r2, sl
    2612:	2102      	movs	r1, #2
    2614:	4620      	mov	r0, r4
    2616:	f7ff fdc5 	bl	21a4 <process_event>
		}
	}

	return rv;
}
    261a:	4630      	mov	r0, r6
    261c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    2620:	2d05      	cmp	r5, #5
    2622:	d018      	beq.n	2656 <onoff_request+0xf2>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2624:	2d01      	cmp	r5, #1
    2626:	d00a      	beq.n	263e <onoff_request+0xda>
    2628:	490e      	ldr	r1, [pc, #56]	; (2664 <onoff_request+0x100>)
    262a:	480d      	ldr	r0, [pc, #52]	; (2660 <onoff_request+0xfc>)
    262c:	f240 12c5 	movw	r2, #453	; 0x1c5
    2630:	f01f fc4b 	bl	21eca <printk>
    2634:	f240 11c5 	movw	r1, #453	; 0x1c5
    2638:	480a      	ldr	r0, [pc, #40]	; (2664 <onoff_request+0x100>)
    263a:	f01f fef8 	bl	2242e <assert_post_action>
		rv = -EIO;
    263e:	f06f 0604 	mvn.w	r6, #4
    2642:	e006      	b.n	2652 <onoff_request+0xee>
	parent->next = child;
    2644:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
    2648:	f8c4 8004 	str.w	r8, [r4, #4]
    264c:	e7de      	b.n	260c <onoff_request+0xa8>
		rv = -EAGAIN;
    264e:	f06f 060a 	mvn.w	r6, #10
    2652:	2700      	movs	r7, #0
    2654:	e7b6      	b.n	25c4 <onoff_request+0x60>
		rv = -ENOTSUP;
    2656:	f06f 0622 	mvn.w	r6, #34	; 0x22
    265a:	e7fa      	b.n	2652 <onoff_request+0xee>
    265c:	0002a0e8 	.word	0x0002a0e8
    2660:	0002a026 	.word	0x0002a026
    2664:	0002a0c6 	.word	0x0002a0c6

00002668 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    2668:	b570      	push	{r4, r5, r6, lr}
    266a:	4604      	mov	r4, r0
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    266c:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    2670:	f04f 0320 	mov.w	r3, #32
    2674:	f3ef 8611 	mrs	r6, BASEPRI
    2678:	f383 8811 	msr	BASEPRI, r3
    267c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2680:	4628      	mov	r0, r5
    2682:	f01d fcf1 	bl	20068 <z_spin_lock_valid>
    2686:	b940      	cbnz	r0, 269a <onoff_release+0x32>
    2688:	4922      	ldr	r1, [pc, #136]	; (2714 <onoff_release+0xac>)
    268a:	4823      	ldr	r0, [pc, #140]	; (2718 <onoff_release+0xb0>)
    268c:	227c      	movs	r2, #124	; 0x7c
    268e:	f01f fc1c 	bl	21eca <printk>
    2692:	217c      	movs	r1, #124	; 0x7c
    2694:	481f      	ldr	r0, [pc, #124]	; (2714 <onoff_release+0xac>)
    2696:	f01f feca 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
    269a:	4628      	mov	r0, r5
    269c:	f01d fd02 	bl	200a4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    26a0:	8ba3      	ldrh	r3, [r4, #28]
    26a2:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    26a6:	2b02      	cmp	r3, #2
    26a8:	d017      	beq.n	26da <onoff_release+0x72>
		if (state == ONOFF_STATE_ERROR) {
    26aa:	2b01      	cmp	r3, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    26ac:	bf0c      	ite	eq
    26ae:	f06f 0404 	mvneq.w	r4, #4
    26b2:	f06f 0422 	mvnne.w	r4, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    26b6:	4628      	mov	r0, r5
    26b8:	f01d fce4 	bl	20084 <z_spin_unlock_valid>
    26bc:	b940      	cbnz	r0, 26d0 <onoff_release+0x68>
    26be:	4915      	ldr	r1, [pc, #84]	; (2714 <onoff_release+0xac>)
    26c0:	4815      	ldr	r0, [pc, #84]	; (2718 <onoff_release+0xb0>)
    26c2:	22a7      	movs	r2, #167	; 0xa7
    26c4:	f01f fc01 	bl	21eca <printk>
    26c8:	21a7      	movs	r1, #167	; 0xa7
    26ca:	4812      	ldr	r0, [pc, #72]	; (2714 <onoff_release+0xac>)
    26cc:	f01f feaf 	bl	2242e <assert_post_action>
	__asm__ volatile(
    26d0:	f386 8811 	msr	BASEPRI, r6
    26d4:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    26d8:	e017      	b.n	270a <onoff_release+0xa2>
	__ASSERT_NO_MSG(mgr->refs > 0);
    26da:	8be3      	ldrh	r3, [r4, #30]
    26dc:	b953      	cbnz	r3, 26f4 <onoff_release+0x8c>
    26de:	490f      	ldr	r1, [pc, #60]	; (271c <onoff_release+0xb4>)
    26e0:	480d      	ldr	r0, [pc, #52]	; (2718 <onoff_release+0xb0>)
    26e2:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
    26e6:	f01f fbf0 	bl	21eca <printk>
    26ea:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    26ee:	480b      	ldr	r0, [pc, #44]	; (271c <onoff_release+0xb4>)
    26f0:	f01f fe9d 	bl	2242e <assert_post_action>
	mgr->refs -= 1U;
    26f4:	8be3      	ldrh	r3, [r4, #30]
    26f6:	3b01      	subs	r3, #1
    26f8:	b29b      	uxth	r3, r3
    26fa:	83e3      	strh	r3, [r4, #30]
	if (stop) {
    26fc:	b93b      	cbnz	r3, 270e <onoff_release+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    26fe:	4620      	mov	r0, r4
    2700:	4632      	mov	r2, r6
    2702:	2102      	movs	r1, #2
    2704:	f7ff fd4e 	bl	21a4 <process_event>
	int rv = state;
    2708:	2402      	movs	r4, #2
}
    270a:	4620      	mov	r0, r4
    270c:	bd70      	pop	{r4, r5, r6, pc}
	int rv = state;
    270e:	2402      	movs	r4, #2
    2710:	e7d1      	b.n	26b6 <onoff_release+0x4e>
    2712:	bf00      	nop
    2714:	0002a0e8 	.word	0x0002a0e8
    2718:	0002a026 	.word	0x0002a026
    271c:	0002a0c6 	.word	0x0002a0c6

00002720 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    2720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    2724:	4d16      	ldr	r5, [pc, #88]	; (2780 <z_work_q_main+0x60>)
    2726:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2784 <z_work_q_main+0x64>
{
    272a:	4607      	mov	r7, r0
	return z_impl_k_queue_get(queue, timeout);
    272c:	f04f 32ff 	mov.w	r2, #4294967295
    2730:	f04f 33ff 	mov.w	r3, #4294967295
    2734:	4638      	mov	r0, r7
    2736:	f01c fa2f 	bl	1eb98 <z_impl_k_queue_get>
		if (work == NULL) {
    273a:	4604      	mov	r4, r0
    273c:	2800      	cmp	r0, #0
    273e:	d0f5      	beq.n	272c <z_work_q_main+0xc>
		handler = work->handler;
    2740:	6846      	ldr	r6, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    2742:	b946      	cbnz	r6, 2756 <z_work_q_main+0x36>
    2744:	4629      	mov	r1, r5
    2746:	4640      	mov	r0, r8
    2748:	221c      	movs	r2, #28
    274a:	f01f fbbe 	bl	21eca <printk>
    274e:	211c      	movs	r1, #28
    2750:	4628      	mov	r0, r5
    2752:	f01f fe6c 	bl	2242e <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2756:	f3bf 8f5b 	dmb	ish
    275a:	f104 0308 	add.w	r3, r4, #8
    275e:	e853 2f00 	ldrex	r2, [r3]
    2762:	f022 0101 	bic.w	r1, r2, #1
    2766:	e843 1000 	strex	r0, r1, [r3]
    276a:	2800      	cmp	r0, #0
    276c:	d1f7      	bne.n	275e <z_work_q_main+0x3e>
    276e:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    2772:	07d3      	lsls	r3, r2, #31
    2774:	d501      	bpl.n	277a <z_work_q_main+0x5a>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    2776:	4620      	mov	r0, r4
    2778:	47b0      	blx	r6
	z_impl_k_yield();
    277a:	f01d f93b 	bl	1f9f4 <z_impl_k_yield>
    277e:	e7d5      	b.n	272c <z_work_q_main+0xc>
    2780:	0002a10e 	.word	0x0002a10e
    2784:	0002a026 	.word	0x0002a026

00002788 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    2788:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    278a:	2900      	cmp	r1, #0
    278c:	d037      	beq.n	27fe <sys_heap_free+0x76>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    278e:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    2790:	68ab      	ldr	r3, [r5, #8]
    2792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    2796:	bf2c      	ite	cs
    2798:	2408      	movcs	r4, #8
    279a:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    279c:	1b0c      	subs	r4, r1, r4
    279e:	1b64      	subs	r4, r4, r5
    27a0:	08e4      	lsrs	r4, r4, #3

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    27a2:	4621      	mov	r1, r4
    27a4:	4628      	mov	r0, r5
    27a6:	f01f fc1e 	bl	21fe6 <chunk_used>
    27aa:	b940      	cbnz	r0, 27be <sys_heap_free+0x36>
    27ac:	4914      	ldr	r1, [pc, #80]	; (2800 <sys_heap_free+0x78>)
    27ae:	4815      	ldr	r0, [pc, #84]	; (2804 <sys_heap_free+0x7c>)
    27b0:	229b      	movs	r2, #155	; 0x9b
    27b2:	f01f fb8a 	bl	21eca <printk>
    27b6:	219b      	movs	r1, #155	; 0x9b
    27b8:	4811      	ldr	r0, [pc, #68]	; (2800 <sys_heap_free+0x78>)
    27ba:	f01f fe38 	bl	2242e <assert_post_action>
	return c + chunk_size(h, c);
    27be:	4621      	mov	r1, r4
    27c0:	4628      	mov	r0, r5
    27c2:	f01f fc17 	bl	21ff4 <chunk_size>
    27c6:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    27c8:	2200      	movs	r2, #0
    27ca:	4631      	mov	r1, r6
    27cc:	4628      	mov	r0, r5
    27ce:	f01f fbf4 	bl	21fba <chunk_field>
    27d2:	1a30      	subs	r0, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    27d4:	4284      	cmp	r4, r0
    27d6:	d008      	beq.n	27ea <sys_heap_free+0x62>
    27d8:	4909      	ldr	r1, [pc, #36]	; (2800 <sys_heap_free+0x78>)
    27da:	480a      	ldr	r0, [pc, #40]	; (2804 <sys_heap_free+0x7c>)
    27dc:	22a4      	movs	r2, #164	; 0xa4
    27de:	f01f fb74 	bl	21eca <printk>
    27e2:	21a4      	movs	r1, #164	; 0xa4
    27e4:	4806      	ldr	r0, [pc, #24]	; (2800 <sys_heap_free+0x78>)
    27e6:	f01f fe22 	bl	2242e <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    27ea:	4621      	mov	r1, r4
    27ec:	4628      	mov	r0, r5
    27ee:	2200      	movs	r2, #0
    27f0:	f01f fc06 	bl	22000 <set_chunk_used>
	free_chunk(h, c);
    27f4:	4621      	mov	r1, r4
}
    27f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    27fa:	f01f bd44 	b.w	22286 <free_chunk>
}
    27fe:	bd70      	pop	{r4, r5, r6, pc}
    2800:	0002a131 	.word	0x0002a131
    2804:	0002a026 	.word	0x0002a026

00002808 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    2808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    280c:	f101 3aff 	add.w	sl, r1, #4294967295
    2810:	ea1a 0f01 	tst.w	sl, r1
{
    2814:	4606      	mov	r6, r0
    2816:	4689      	mov	r9, r1
    2818:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    281a:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    281c:	d008      	beq.n	2830 <sys_heap_aligned_alloc+0x28>
    281e:	4932      	ldr	r1, [pc, #200]	; (28e8 <sys_heap_aligned_alloc+0xe0>)
    2820:	4832      	ldr	r0, [pc, #200]	; (28ec <sys_heap_aligned_alloc+0xe4>)
    2822:	22fc      	movs	r2, #252	; 0xfc
    2824:	f01f fb51 	bl	21eca <printk>
    2828:	21fc      	movs	r1, #252	; 0xfc
    282a:	482f      	ldr	r0, [pc, #188]	; (28e8 <sys_heap_aligned_alloc+0xe0>)
    282c:	f01f fdff 	bl	2242e <assert_post_action>
	return big_heap(h) ? 8 : 4;
    2830:	68aa      	ldr	r2, [r5, #8]
    2832:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2836:	bf2c      	ite	cs
    2838:	2308      	movcs	r3, #8
    283a:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    283c:	4599      	cmp	r9, r3
    283e:	d805      	bhi.n	284c <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    2840:	4621      	mov	r1, r4
    2842:	4630      	mov	r0, r6
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    2844:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sys_heap_alloc(heap, bytes);
    2848:	f01f bd5b 	b.w	22302 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    284c:	b91c      	cbnz	r4, 2856 <sys_heap_aligned_alloc+0x4e>
		return NULL;
    284e:	2700      	movs	r7, #0
}
    2850:	4638      	mov	r0, r7
    2852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    2856:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
    285a:	d9f8      	bls.n	284e <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    285c:	eb09 0104 	add.w	r1, r9, r4
    2860:	1ac9      	subs	r1, r1, r3
    2862:	4628      	mov	r0, r5
    2864:	f01f fbe8 	bl	22038 <bytes_to_chunksz>
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    2868:	4601      	mov	r1, r0
    286a:	4628      	mov	r0, r5
    286c:	f01f fc85 	bl	2217a <alloc_chunk>
	if (c0 == 0) {
    2870:	4680      	mov	r8, r0
    2872:	2800      	cmp	r0, #0
    2874:	d0eb      	beq.n	284e <sys_heap_aligned_alloc+0x46>
    2876:	68ab      	ldr	r3, [r5, #8]
    2878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    287c:	bf2c      	ite	cs
    287e:	2608      	movcs	r6, #8
    2880:	2604      	movcc	r6, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    2882:	eb06 07c0 	add.w	r7, r6, r0, lsl #3
    2886:	442f      	add	r7, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    2888:	4457      	add	r7, sl
    288a:	f1c9 0900 	rsb	r9, r9, #0
    288e:	ea07 0709 	and.w	r7, r7, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    2892:	1bbe      	subs	r6, r7, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    2894:	443c      	add	r4, r7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    2896:	1b76      	subs	r6, r6, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    2898:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    289a:	08f6      	lsrs	r6, r6, #3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    289c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    28a0:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    28a2:	42b0      	cmp	r0, r6
	chunkid_t c_end = end - chunk_buf(h);
    28a4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    28a8:	d208      	bcs.n	28bc <sys_heap_aligned_alloc+0xb4>
		split_chunks(h, c0, c);
    28aa:	4601      	mov	r1, r0
    28ac:	4632      	mov	r2, r6
    28ae:	4628      	mov	r0, r5
    28b0:	f01f fbf6 	bl	220a0 <split_chunks>
		free_list_add(h, c0);
    28b4:	4641      	mov	r1, r8
    28b6:	4628      	mov	r0, r5
    28b8:	f01f fca0 	bl	221fc <free_list_add>
	return c + chunk_size(h, c);
    28bc:	4631      	mov	r1, r6
    28be:	4628      	mov	r0, r5
    28c0:	f01f fb98 	bl	21ff4 <chunk_size>
    28c4:	4430      	add	r0, r6
	if (right_chunk(h, c) > c_end) {
    28c6:	4284      	cmp	r4, r0
    28c8:	d208      	bcs.n	28dc <sys_heap_aligned_alloc+0xd4>
		split_chunks(h, c, c_end);
    28ca:	4631      	mov	r1, r6
    28cc:	4628      	mov	r0, r5
    28ce:	4622      	mov	r2, r4
    28d0:	f01f fbe6 	bl	220a0 <split_chunks>
		free_list_add(h, c_end);
    28d4:	4621      	mov	r1, r4
    28d6:	4628      	mov	r0, r5
    28d8:	f01f fc90 	bl	221fc <free_list_add>
	set_chunk_used(h, c, true);
    28dc:	2201      	movs	r2, #1
    28de:	4631      	mov	r1, r6
    28e0:	4628      	mov	r0, r5
    28e2:	f01f fb8d 	bl	22000 <set_chunk_used>
	return mem;
    28e6:	e7b3      	b.n	2850 <sys_heap_aligned_alloc+0x48>
    28e8:	0002a131 	.word	0x0002a131
    28ec:	0002a026 	.word	0x0002a026

000028f0 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    28f0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    28f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28f6:	4607      	mov	r7, r0
    28f8:	460d      	mov	r5, r1
    28fa:	4616      	mov	r6, r2
    28fc:	d20e      	bcs.n	291c <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    28fe:	2a04      	cmp	r2, #4
    2900:	d80a      	bhi.n	2918 <sys_heap_init+0x28>
    2902:	493d      	ldr	r1, [pc, #244]	; (29f8 <sys_heap_init+0x108>)
    2904:	483d      	ldr	r0, [pc, #244]	; (29fc <sys_heap_init+0x10c>)
    2906:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    290a:	f01f fade 	bl	21eca <printk>
    290e:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    2912:	4839      	ldr	r0, [pc, #228]	; (29f8 <sys_heap_init+0x108>)
    2914:	f01f fd8b 	bl	2242e <assert_post_action>
    2918:	2304      	movs	r3, #4
    291a:	e000      	b.n	291e <sys_heap_init+0x2e>
    291c:	2308      	movs	r3, #8
	bytes -= heap_footer_bytes(bytes);
    291e:	1af6      	subs	r6, r6, r3

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2920:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2922:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2924:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2928:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    292c:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    292e:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    2930:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    2934:	d80a      	bhi.n	294c <sys_heap_init+0x5c>
    2936:	4930      	ldr	r1, [pc, #192]	; (29f8 <sys_heap_init+0x108>)
    2938:	4830      	ldr	r0, [pc, #192]	; (29fc <sys_heap_init+0x10c>)
    293a:	f240 1275 	movw	r2, #373	; 0x175
    293e:	f01f fac4 	bl	21eca <printk>
    2942:	f240 1175 	movw	r1, #373	; 0x175
    2946:	482c      	ldr	r0, [pc, #176]	; (29f8 <sys_heap_init+0x108>)
    2948:	f01f fd71 	bl	2242e <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    294c:	2200      	movs	r2, #0
    294e:	2300      	movs	r3, #0
	heap->heap = h;
    2950:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
    2952:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    2956:	2300      	movs	r3, #0
    2958:	60e3      	str	r3, [r4, #12]

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    295a:	4631      	mov	r1, r6
	h->len = buf_sz;
    295c:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    295e:	4620      	mov	r0, r4
    2960:	f01f fb74 	bl	2204c <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
    2964:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    2966:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    2968:	1c47      	adds	r7, r0, #1
    296a:	4620      	mov	r0, r4
    296c:	f01f fb64 	bl	22038 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    2970:	351b      	adds	r5, #27
    2972:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    2974:	4428      	add	r0, r5
    2976:	42b0      	cmp	r0, r6
    2978:	d30a      	bcc.n	2990 <sys_heap_init+0xa0>
    297a:	491f      	ldr	r1, [pc, #124]	; (29f8 <sys_heap_init+0x108>)
    297c:	481f      	ldr	r0, [pc, #124]	; (29fc <sys_heap_init+0x10c>)
    297e:	f240 1281 	movw	r2, #385	; 0x181
    2982:	f01f faa2 	bl	21eca <printk>
    2986:	f240 1181 	movw	r1, #385	; 0x181
    298a:	481b      	ldr	r0, [pc, #108]	; (29f8 <sys_heap_init+0x108>)
    298c:	f01f fd4f 	bl	2242e <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    2990:	2300      	movs	r3, #0
    2992:	f104 0210 	add.w	r2, r4, #16

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    2996:	4619      	mov	r1, r3
	for (int i = 0; i < nb_buckets; i++) {
    2998:	42bb      	cmp	r3, r7
    299a:	db29      	blt.n	29f0 <sys_heap_init+0x100>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    299c:	462a      	mov	r2, r5
    299e:	4620      	mov	r0, r4
    29a0:	2100      	movs	r1, #0
    29a2:	f01f fb45 	bl	22030 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    29a6:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
    29a8:	4620      	mov	r0, r4
    29aa:	2201      	movs	r2, #1
    29ac:	2100      	movs	r1, #0
    29ae:	f01f fb27 	bl	22000 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    29b2:	463a      	mov	r2, r7
    29b4:	4629      	mov	r1, r5
    29b6:	f01f fb3b 	bl	22030 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    29ba:	462b      	mov	r3, r5
    29bc:	4629      	mov	r1, r5
    29be:	4620      	mov	r0, r4
    29c0:	2200      	movs	r2, #0
    29c2:	f01f fb05 	bl	21fd0 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    29c6:	4631      	mov	r1, r6
    29c8:	4620      	mov	r0, r4
    29ca:	2200      	movs	r2, #0
    29cc:	f01f fb30 	bl	22030 <set_chunk_size>
    29d0:	463b      	mov	r3, r7
    29d2:	4631      	mov	r1, r6
    29d4:	4620      	mov	r0, r4
    29d6:	2200      	movs	r2, #0
    29d8:	f01f fafa 	bl	21fd0 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    29dc:	4631      	mov	r1, r6
    29de:	4620      	mov	r0, r4
    29e0:	2201      	movs	r2, #1
    29e2:	f01f fb0d 	bl	22000 <set_chunk_used>

	free_list_add(h, chunk0_size);
    29e6:	4629      	mov	r1, r5
}
    29e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    29ec:	f01f bc06 	b.w	221fc <free_list_add>
		h->buckets[i].next = 0;
    29f0:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    29f4:	3301      	adds	r3, #1
    29f6:	e7cf      	b.n	2998 <sys_heap_init+0xa8>
    29f8:	0002a131 	.word	0x0002a131
    29fc:	0002a026 	.word	0x0002a026

00002a00 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a04:	b093      	sub	sp, #76	; 0x4c
    2a06:	468a      	mov	sl, r1
    2a08:	9003      	str	r0, [sp, #12]
    2a0a:	4693      	mov	fp, r2
    2a0c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2a0e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2a10:	f89b 0000 	ldrb.w	r0, [fp]
    2a14:	b908      	cbnz	r0, 2a1a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    2a16:	4628      	mov	r0, r5
    2a18:	e317      	b.n	304a <cbvprintf+0x64a>
		if (*fp != '%') {
    2a1a:	2825      	cmp	r0, #37	; 0x25
    2a1c:	f10b 0701 	add.w	r7, fp, #1
    2a20:	d007      	beq.n	2a32 <cbvprintf+0x32>
			OUTC('%');
    2a22:	4651      	mov	r1, sl
    2a24:	9b03      	ldr	r3, [sp, #12]
    2a26:	4798      	blx	r3
    2a28:	2800      	cmp	r0, #0
    2a2a:	f2c0 830e 	blt.w	304a <cbvprintf+0x64a>
    2a2e:	3501      	adds	r5, #1
			break;
    2a30:	e200      	b.n	2e34 <cbvprintf+0x434>
		} state = {
    2a32:	2218      	movs	r2, #24
    2a34:	2100      	movs	r1, #0
    2a36:	a80c      	add	r0, sp, #48	; 0x30
    2a38:	f021 fbb3 	bl	241a2 <memset>
	if (*sp == '%') {
    2a3c:	f89b 3001 	ldrb.w	r3, [fp, #1]
    2a40:	2b25      	cmp	r3, #37	; 0x25
    2a42:	d07c      	beq.n	2b3e <cbvprintf+0x13e>
    2a44:	2200      	movs	r2, #0
    2a46:	e9cd 2204 	strd	r2, r2, [sp, #16]
    2a4a:	46bc      	mov	ip, r7
    2a4c:	4610      	mov	r0, r2
    2a4e:	4691      	mov	r9, r2
    2a50:	4617      	mov	r7, r2
    2a52:	4690      	mov	r8, r2
    2a54:	4616      	mov	r6, r2
    2a56:	4696      	mov	lr, r2
    2a58:	4663      	mov	r3, ip
		switch (*sp) {
    2a5a:	f81c 1b01 	ldrb.w	r1, [ip], #1
    2a5e:	292b      	cmp	r1, #43	; 0x2b
    2a60:	f000 809f 	beq.w	2ba2 <cbvprintf+0x1a2>
    2a64:	f200 8095 	bhi.w	2b92 <cbvprintf+0x192>
    2a68:	2920      	cmp	r1, #32
    2a6a:	f000 809d 	beq.w	2ba8 <cbvprintf+0x1a8>
    2a6e:	2923      	cmp	r1, #35	; 0x23
    2a70:	f000 809d 	beq.w	2bae <cbvprintf+0x1ae>
    2a74:	b12e      	cbz	r6, 2a82 <cbvprintf+0x82>
    2a76:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
    2a7a:	f36e 0682 	bfi	r6, lr, #2, #1
    2a7e:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
    2a82:	b12f      	cbz	r7, 2a90 <cbvprintf+0x90>
    2a84:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
    2a88:	f368 06c3 	bfi	r6, r8, #3, #1
    2a8c:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
    2a90:	b128      	cbz	r0, 2a9e <cbvprintf+0x9e>
    2a92:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    2a96:	f369 1004 	bfi	r0, r9, #4, #1
    2a9a:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    2a9e:	9804      	ldr	r0, [sp, #16]
    2aa0:	b128      	cbz	r0, 2aae <cbvprintf+0xae>
    2aa2:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    2aa6:	f040 0020 	orr.w	r0, r0, #32
    2aaa:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    2aae:	b132      	cbz	r2, 2abe <cbvprintf+0xbe>
    2ab0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2ab4:	9805      	ldr	r0, [sp, #20]
    2ab6:	f360 1286 	bfi	r2, r0, #6, #1
    2aba:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    2abe:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2ac2:	f002 0044 	and.w	r0, r2, #68	; 0x44
    2ac6:	2844      	cmp	r0, #68	; 0x44
    2ac8:	d103      	bne.n	2ad2 <cbvprintf+0xd2>
		conv->flag_zero = false;
    2aca:	f36f 1286 	bfc	r2, #6, #1
    2ace:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    2ad2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    2ad6:	292a      	cmp	r1, #42	; 0x2a
	conv->width_present = true;
    2ad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2adc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    2ae0:	f040 8081 	bne.w	2be6 <cbvprintf+0x1e6>
    2ae4:	1c5a      	adds	r2, r3, #1
		conv->width_star = true;
    2ae6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2aea:	f043 0301 	orr.w	r3, r3, #1
    2aee:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    2af2:	7813      	ldrb	r3, [r2, #0]
    2af4:	2b2e      	cmp	r3, #46	; 0x2e
    2af6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2afa:	bf0c      	ite	eq
    2afc:	2101      	moveq	r1, #1
    2afe:	2100      	movne	r1, #0
    2b00:	f361 0341 	bfi	r3, r1, #1, #1
    2b04:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    2b08:	d179      	bne.n	2bfe <cbvprintf+0x1fe>
	if (*sp == '*') {
    2b0a:	7853      	ldrb	r3, [r2, #1]
    2b0c:	2b2a      	cmp	r3, #42	; 0x2a
    2b0e:	d06f      	beq.n	2bf0 <cbvprintf+0x1f0>
    2b10:	3201      	adds	r2, #1
	size_t val = 0;
    2b12:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    2b14:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    2b16:	4610      	mov	r0, r2
    2b18:	f810 3b01 	ldrb.w	r3, [r0], #1
    2b1c:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    2b20:	2f09      	cmp	r7, #9
    2b22:	f240 8093 	bls.w	2c4c <cbvprintf+0x24c>
	conv->unsupported |= ((conv->prec_value < 0)
    2b26:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    2b2a:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    2b2c:	f3c3 0040 	ubfx	r0, r3, #1, #1
    2b30:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    2b34:	f361 0341 	bfi	r3, r1, #1, #1
    2b38:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    2b3c:	e05f      	b.n	2bfe <cbvprintf+0x1fe>
		conv->specifier = *sp++;
    2b3e:	f10b 0702 	add.w	r7, fp, #2
    2b42:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    2b46:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2b4a:	07d9      	lsls	r1, r3, #31
    2b4c:	f140 8119 	bpl.w	2d82 <cbvprintf+0x382>
			width = va_arg(ap, int);
    2b50:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    2b54:	f1b9 0f00 	cmp.w	r9, #0
    2b58:	da07      	bge.n	2b6a <cbvprintf+0x16a>
				conv->flag_dash = true;
    2b5a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2b5e:	f042 0204 	orr.w	r2, r2, #4
    2b62:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    2b66:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    2b6a:	075a      	lsls	r2, r3, #29
    2b6c:	f140 8112 	bpl.w	2d94 <cbvprintf+0x394>
			int arg = va_arg(ap, int);
    2b70:	4623      	mov	r3, r4
    2b72:	f853 8b04 	ldr.w	r8, [r3], #4
			if (arg < 0) {
    2b76:	f1b8 0f00 	cmp.w	r8, #0
    2b7a:	f280 8125 	bge.w	2dc8 <cbvprintf+0x3c8>
				conv->prec_present = false;
    2b7e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2b82:	f36f 0241 	bfc	r2, #1, #1
    2b86:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			int arg = va_arg(ap, int);
    2b8a:	461c      	mov	r4, r3
		int precision = -1;
    2b8c:	f04f 38ff 	mov.w	r8, #4294967295
    2b90:	e105      	b.n	2d9e <cbvprintf+0x39e>
		switch (*sp) {
    2b92:	292d      	cmp	r1, #45	; 0x2d
    2b94:	d00e      	beq.n	2bb4 <cbvprintf+0x1b4>
    2b96:	2930      	cmp	r1, #48	; 0x30
    2b98:	f47f af6c 	bne.w	2a74 <cbvprintf+0x74>
    2b9c:	2201      	movs	r2, #1
			conv->flag_zero = true;
    2b9e:	9205      	str	r2, [sp, #20]
			++sp;
    2ba0:	e75a      	b.n	2a58 <cbvprintf+0x58>
		switch (*sp) {
    2ba2:	2701      	movs	r7, #1
			conv->flag_plus = true;
    2ba4:	46b8      	mov	r8, r7
    2ba6:	e757      	b.n	2a58 <cbvprintf+0x58>
		switch (*sp) {
    2ba8:	2001      	movs	r0, #1
			conv->flag_space = true;
    2baa:	4681      	mov	r9, r0
    2bac:	e754      	b.n	2a58 <cbvprintf+0x58>
			conv->flag_hash = true;
    2bae:	2301      	movs	r3, #1
    2bb0:	9304      	str	r3, [sp, #16]
    2bb2:	e751      	b.n	2a58 <cbvprintf+0x58>
		switch (*sp) {
    2bb4:	2601      	movs	r6, #1
			conv->flag_dash = true;
    2bb6:	46b6      	mov	lr, r6
    2bb8:	e74e      	b.n	2a58 <cbvprintf+0x58>
		val = 10U * val + *sp++ - '0';
    2bba:	fb0c 0101 	mla	r1, ip, r1, r0
    2bbe:	3930      	subs	r1, #48	; 0x30
    2bc0:	4632      	mov	r2, r6
    2bc2:	4616      	mov	r6, r2
    2bc4:	f816 0b01 	ldrb.w	r0, [r6], #1
    2bc8:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    2bcc:	2f09      	cmp	r7, #9
    2bce:	d9f4      	bls.n	2bba <cbvprintf+0x1ba>
	if (sp != wp) {
    2bd0:	4293      	cmp	r3, r2
    2bd2:	d08e      	beq.n	2af2 <cbvprintf+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    2bd4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
		conv->width_value = width;
    2bd8:	910f      	str	r1, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    2bda:	0fc9      	lsrs	r1, r1, #31
		conv->unsupported |= ((conv->width_value < 0)
    2bdc:	f361 0341 	bfi	r3, r1, #1, #1
    2be0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    2be4:	e785      	b.n	2af2 <cbvprintf+0xf2>
	if (*sp == '*') {
    2be6:	461a      	mov	r2, r3
	size_t val = 0;
    2be8:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    2bea:	f04f 0c0a 	mov.w	ip, #10
    2bee:	e7e8      	b.n	2bc2 <cbvprintf+0x1c2>
		conv->prec_star = true;
    2bf0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2bf4:	f043 0304 	orr.w	r3, r3, #4
    2bf8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    2bfc:	3202      	adds	r2, #2
	switch (*sp) {
    2bfe:	4617      	mov	r7, r2
    2c00:	f817 3b01 	ldrb.w	r3, [r7], #1
    2c04:	2b6a      	cmp	r3, #106	; 0x6a
    2c06:	d047      	beq.n	2c98 <cbvprintf+0x298>
    2c08:	d825      	bhi.n	2c56 <cbvprintf+0x256>
    2c0a:	2b4c      	cmp	r3, #76	; 0x4c
    2c0c:	d050      	beq.n	2cb0 <cbvprintf+0x2b0>
    2c0e:	2b68      	cmp	r3, #104	; 0x68
    2c10:	d02e      	beq.n	2c70 <cbvprintf+0x270>
    2c12:	4617      	mov	r7, r2
	conv->specifier = *sp++;
    2c14:	f817 2b01 	ldrb.w	r2, [r7], #1
    2c18:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    2c1c:	2a67      	cmp	r2, #103	; 0x67
    2c1e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2c22:	d860      	bhi.n	2ce6 <cbvprintf+0x2e6>
    2c24:	2a65      	cmp	r2, #101	; 0x65
    2c26:	d255      	bcs.n	2cd4 <cbvprintf+0x2d4>
    2c28:	2a58      	cmp	r2, #88	; 0x58
    2c2a:	f000 8098 	beq.w	2d5e <cbvprintf+0x35e>
    2c2e:	d84c      	bhi.n	2cca <cbvprintf+0x2ca>
    2c30:	2a41      	cmp	r2, #65	; 0x41
    2c32:	d04f      	beq.n	2cd4 <cbvprintf+0x2d4>
    2c34:	d302      	bcc.n	2c3c <cbvprintf+0x23c>
    2c36:	3a45      	subs	r2, #69	; 0x45
    2c38:	2a02      	cmp	r2, #2
    2c3a:	d94b      	bls.n	2cd4 <cbvprintf+0x2d4>
		conv->invalid = true;
    2c3c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2c40:	f043 0301 	orr.w	r3, r3, #1
    2c44:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    2c48:	2300      	movs	r3, #0
    2c4a:	e06a      	b.n	2d22 <cbvprintf+0x322>
		val = 10U * val + *sp++ - '0';
    2c4c:	fb06 3101 	mla	r1, r6, r1, r3
    2c50:	3930      	subs	r1, #48	; 0x30
    2c52:	4602      	mov	r2, r0
    2c54:	e75f      	b.n	2b16 <cbvprintf+0x116>
	switch (*sp) {
    2c56:	2b74      	cmp	r3, #116	; 0x74
    2c58:	d026      	beq.n	2ca8 <cbvprintf+0x2a8>
    2c5a:	2b7a      	cmp	r3, #122	; 0x7a
    2c5c:	d020      	beq.n	2ca0 <cbvprintf+0x2a0>
    2c5e:	2b6c      	cmp	r3, #108	; 0x6c
    2c60:	d1d7      	bne.n	2c12 <cbvprintf+0x212>
		if (*++sp == 'l') {
    2c62:	7853      	ldrb	r3, [r2, #1]
    2c64:	2b6c      	cmp	r3, #108	; 0x6c
    2c66:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2c6a:	d113      	bne.n	2c94 <cbvprintf+0x294>
			conv->length_mod = LENGTH_LL;
    2c6c:	2104      	movs	r1, #4
    2c6e:	e005      	b.n	2c7c <cbvprintf+0x27c>
		if (*++sp == 'h') {
    2c70:	7853      	ldrb	r3, [r2, #1]
    2c72:	2b68      	cmp	r3, #104	; 0x68
    2c74:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2c78:	d106      	bne.n	2c88 <cbvprintf+0x288>
			conv->length_mod = LENGTH_HH;
    2c7a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    2c7c:	f361 03c6 	bfi	r3, r1, #3, #4
    2c80:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
			++sp;
    2c84:	1c97      	adds	r7, r2, #2
    2c86:	e7c5      	b.n	2c14 <cbvprintf+0x214>
			conv->length_mod = LENGTH_H;
    2c88:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    2c8a:	f362 03c6 	bfi	r3, r2, #3, #4
    2c8e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    2c92:	e7bf      	b.n	2c14 <cbvprintf+0x214>
			conv->length_mod = LENGTH_L;
    2c94:	2203      	movs	r2, #3
    2c96:	e7f8      	b.n	2c8a <cbvprintf+0x28a>
		conv->length_mod = LENGTH_J;
    2c98:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2c9c:	2205      	movs	r2, #5
    2c9e:	e7f4      	b.n	2c8a <cbvprintf+0x28a>
		conv->length_mod = LENGTH_Z;
    2ca0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2ca4:	2206      	movs	r2, #6
    2ca6:	e7f0      	b.n	2c8a <cbvprintf+0x28a>
		conv->length_mod = LENGTH_T;
    2ca8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2cac:	2207      	movs	r2, #7
    2cae:	e7ec      	b.n	2c8a <cbvprintf+0x28a>
		conv->unsupported = true;
    2cb0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    2cb4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    2cb8:	f023 0302 	bic.w	r3, r3, #2
    2cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2cc0:	f043 0302 	orr.w	r3, r3, #2
    2cc4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    2cc8:	e7a4      	b.n	2c14 <cbvprintf+0x214>
	switch (conv->specifier) {
    2cca:	2a63      	cmp	r2, #99	; 0x63
    2ccc:	d047      	beq.n	2d5e <cbvprintf+0x35e>
    2cce:	d812      	bhi.n	2cf6 <cbvprintf+0x2f6>
    2cd0:	2a61      	cmp	r2, #97	; 0x61
    2cd2:	d1b3      	bne.n	2c3c <cbvprintf+0x23c>
		conv->specifier_cat = SPECIFIER_FP;
    2cd4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2cd8:	2204      	movs	r2, #4
    2cda:	f362 0302 	bfi	r3, r2, #0, #3
    2cde:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    2ce2:	2301      	movs	r3, #1
    2ce4:	e01d      	b.n	2d22 <cbvprintf+0x322>
	switch (conv->specifier) {
    2ce6:	2a70      	cmp	r2, #112	; 0x70
    2ce8:	d02c      	beq.n	2d44 <cbvprintf+0x344>
    2cea:	d824      	bhi.n	2d36 <cbvprintf+0x336>
    2cec:	2a6e      	cmp	r2, #110	; 0x6e
    2cee:	d03a      	beq.n	2d66 <cbvprintf+0x366>
    2cf0:	d835      	bhi.n	2d5e <cbvprintf+0x35e>
    2cf2:	2a69      	cmp	r2, #105	; 0x69
    2cf4:	d1a2      	bne.n	2c3c <cbvprintf+0x23c>
		conv->specifier_cat = SPECIFIER_SINT;
    2cf6:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    2cfa:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    2cfc:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    2d00:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2d04:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2d06:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    2d0a:	bf02      	ittt	eq
    2d0c:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    2d10:	f041 0101 	orreq.w	r1, r1, #1
    2d14:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    2d18:	2a63      	cmp	r2, #99	; 0x63
    2d1a:	d195      	bne.n	2c48 <cbvprintf+0x248>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2d1c:	3300      	adds	r3, #0
    2d1e:	bf18      	it	ne
    2d20:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    2d22:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2d26:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2d2a:	430b      	orrs	r3, r1
    2d2c:	f363 0241 	bfi	r2, r3, #1, #1
    2d30:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    2d34:	e707      	b.n	2b46 <cbvprintf+0x146>
	switch (conv->specifier) {
    2d36:	2a75      	cmp	r2, #117	; 0x75
    2d38:	d011      	beq.n	2d5e <cbvprintf+0x35e>
    2d3a:	2a78      	cmp	r2, #120	; 0x78
    2d3c:	d00f      	beq.n	2d5e <cbvprintf+0x35e>
    2d3e:	2a73      	cmp	r2, #115	; 0x73
    2d40:	f47f af7c 	bne.w	2c3c <cbvprintf+0x23c>
		conv->specifier_cat = SPECIFIER_PTR;
    2d44:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    2d48:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    2d4a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    2d4e:	f361 0202 	bfi	r2, r1, #0, #3
    2d52:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    2d56:	bf14      	ite	ne
    2d58:	2301      	movne	r3, #1
    2d5a:	2300      	moveq	r3, #0
    2d5c:	e7e1      	b.n	2d22 <cbvprintf+0x322>
		conv->specifier_cat = SPECIFIER_UINT;
    2d5e:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    2d62:	2002      	movs	r0, #2
    2d64:	e7ca      	b.n	2cfc <cbvprintf+0x2fc>
		conv->specifier_cat = SPECIFIER_PTR;
    2d66:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2d6a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2d6e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    2d72:	2103      	movs	r1, #3
    2d74:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2d78:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    2d7a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2d7e:	4143      	adcs	r3, r0
    2d80:	e7cf      	b.n	2d22 <cbvprintf+0x322>
		} else if (conv->width_present) {
    2d82:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    2d86:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2d88:	bfb4      	ite	lt
    2d8a:	f8dd 903c 	ldrlt.w	r9, [sp, #60]	; 0x3c
		int width = -1;
    2d8e:	f04f 39ff 	movge.w	r9, #4294967295
    2d92:	e6ea      	b.n	2b6a <cbvprintf+0x16a>
		} else if (conv->prec_present) {
    2d94:	079b      	lsls	r3, r3, #30
    2d96:	f57f aef9 	bpl.w	2b8c <cbvprintf+0x18c>
			precision = conv->prec_value;
    2d9a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    2d9e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    2da2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2da4:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    2da8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    2dac:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2db0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2db2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2db6:	d13f      	bne.n	2e38 <cbvprintf+0x438>
			switch (length_mod) {
    2db8:	1ed3      	subs	r3, r2, #3
    2dba:	2b04      	cmp	r3, #4
    2dbc:	d814      	bhi.n	2de8 <cbvprintf+0x3e8>
    2dbe:	e8df f003 	tbb	[pc, r3]
    2dc2:	0d05      	.short	0x0d05
    2dc4:	130d      	.short	0x130d
    2dc6:	13          	.byte	0x13
    2dc7:	00          	.byte	0x00
			int arg = va_arg(ap, int);
    2dc8:	461c      	mov	r4, r3
    2dca:	e7e8      	b.n	2d9e <cbvprintf+0x39e>
					value->sint = va_arg(ap, long);
    2dcc:	4623      	mov	r3, r4
    2dce:	f853 0b04 	ldr.w	r0, [r3], #4
    2dd2:	17c1      	asrs	r1, r0, #31
				value->sint =
    2dd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
			value->ptr = va_arg(ap, void *);
    2dd8:	461c      	mov	r4, r3
    2dda:	e01c      	b.n	2e16 <cbvprintf+0x416>
					(sint_value_type)va_arg(ap, long long);
    2ddc:	3407      	adds	r4, #7
    2dde:	f024 0307 	bic.w	r3, r4, #7
				value->sint =
    2de2:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    2de6:	e7f5      	b.n	2dd4 <cbvprintf+0x3d4>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2de8:	4623      	mov	r3, r4
			if (length_mod == LENGTH_HH) {
    2dea:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2dec:	f853 0b04 	ldr.w	r0, [r3], #4
    2df0:	ea4f 71e0 	mov.w	r1, r0, asr #31
    2df4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    2df8:	461c      	mov	r4, r3
			if (length_mod == LENGTH_HH) {
    2dfa:	d105      	bne.n	2e08 <cbvprintf+0x408>
				value->uint = (unsigned char)value->uint;
    2dfc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    2e00:	930c      	str	r3, [sp, #48]	; 0x30
    2e02:	2300      	movs	r3, #0
    2e04:	930d      	str	r3, [sp, #52]	; 0x34
    2e06:	e006      	b.n	2e16 <cbvprintf+0x416>
			} else if (length_mod == LENGTH_H) {
    2e08:	2a02      	cmp	r2, #2
    2e0a:	d104      	bne.n	2e16 <cbvprintf+0x416>
				value->sint = (short)value->sint;
    2e0c:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
    2e10:	17c1      	asrs	r1, r0, #31
    2e12:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    2e16:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2e1a:	f013 0603 	ands.w	r6, r3, #3
    2e1e:	d03f      	beq.n	2ea0 <cbvprintf+0x4a0>
			OUTS(sp, fp);
    2e20:	463b      	mov	r3, r7
    2e22:	465a      	mov	r2, fp
    2e24:	4651      	mov	r1, sl
    2e26:	9803      	ldr	r0, [sp, #12]
    2e28:	f01f faeb 	bl	22402 <outs>
    2e2c:	2800      	cmp	r0, #0
    2e2e:	f2c0 810c 	blt.w	304a <cbvprintf+0x64a>
    2e32:	4405      	add	r5, r0
			continue;
    2e34:	46bb      	mov	fp, r7
    2e36:	e5eb      	b.n	2a10 <cbvprintf+0x10>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2e38:	2b02      	cmp	r3, #2
    2e3a:	d120      	bne.n	2e7e <cbvprintf+0x47e>
			switch (length_mod) {
    2e3c:	1ed3      	subs	r3, r2, #3
    2e3e:	2b04      	cmp	r3, #4
    2e40:	d80e      	bhi.n	2e60 <cbvprintf+0x460>
    2e42:	e8df f003 	tbb	[pc, r3]
    2e46:	0903      	.short	0x0903
    2e48:	0d09      	.short	0x0d09
    2e4a:	0d          	.byte	0x0d
    2e4b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    2e4c:	6820      	ldr	r0, [r4, #0]
    2e4e:	900c      	str	r0, [sp, #48]	; 0x30
    2e50:	2100      	movs	r1, #0
    2e52:	1d23      	adds	r3, r4, #4
    2e54:	910d      	str	r1, [sp, #52]	; 0x34
    2e56:	e7bf      	b.n	2dd8 <cbvprintf+0x3d8>
					(uint_value_type)va_arg(ap,
    2e58:	1de3      	adds	r3, r4, #7
    2e5a:	f023 0307 	bic.w	r3, r3, #7
    2e5e:	e7c0      	b.n	2de2 <cbvprintf+0x3e2>
					(uint_value_type)va_arg(ap, size_t);
    2e60:	4623      	mov	r3, r4
			if (length_mod == LENGTH_HH) {
    2e62:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    2e64:	f853 1b04 	ldr.w	r1, [r3], #4
    2e68:	910c      	str	r1, [sp, #48]	; 0x30
    2e6a:	f04f 0100 	mov.w	r1, #0
    2e6e:	910d      	str	r1, [sp, #52]	; 0x34
    2e70:	461c      	mov	r4, r3
			if (length_mod == LENGTH_HH) {
    2e72:	d0c3      	beq.n	2dfc <cbvprintf+0x3fc>
			} else if (length_mod == LENGTH_H) {
    2e74:	2a02      	cmp	r2, #2
    2e76:	d1ce      	bne.n	2e16 <cbvprintf+0x416>
				value->uint = (unsigned short)value->uint;
    2e78:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    2e7c:	e7c0      	b.n	2e00 <cbvprintf+0x400>
		} else if (specifier_cat == SPECIFIER_FP) {
    2e7e:	2b04      	cmp	r3, #4
    2e80:	d107      	bne.n	2e92 <cbvprintf+0x492>
			if (length_mod == LENGTH_UPPER_L) {
    2e82:	1de3      	adds	r3, r4, #7
    2e84:	f023 0407 	bic.w	r4, r3, #7
    2e88:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    2e8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    2e90:	e7c1      	b.n	2e16 <cbvprintf+0x416>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2e92:	2b03      	cmp	r3, #3
    2e94:	d1bf      	bne.n	2e16 <cbvprintf+0x416>
			value->ptr = va_arg(ap, void *);
    2e96:	4623      	mov	r3, r4
    2e98:	f853 1b04 	ldr.w	r1, [r3], #4
    2e9c:	910c      	str	r1, [sp, #48]	; 0x30
    2e9e:	e79b      	b.n	2dd8 <cbvprintf+0x3d8>
		switch (conv->specifier) {
    2ea0:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    2ea4:	286e      	cmp	r0, #110	; 0x6e
    2ea6:	f000 80a8 	beq.w	2ffa <cbvprintf+0x5fa>
    2eaa:	d83c      	bhi.n	2f26 <cbvprintf+0x526>
    2eac:	2863      	cmp	r0, #99	; 0x63
    2eae:	d071      	beq.n	2f94 <cbvprintf+0x594>
    2eb0:	d822      	bhi.n	2ef8 <cbvprintf+0x4f8>
    2eb2:	2825      	cmp	r0, #37	; 0x25
    2eb4:	f43f adb5 	beq.w	2a22 <cbvprintf+0x22>
    2eb8:	2858      	cmp	r0, #88	; 0x58
    2eba:	d1bb      	bne.n	2e34 <cbvprintf+0x434>
			bps = encode_uint(value->uint, conv, buf, bpe);
    2ebc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    2ec0:	9300      	str	r3, [sp, #0]
    2ec2:	aa0e      	add	r2, sp, #56	; 0x38
    2ec4:	ab06      	add	r3, sp, #24
    2ec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2eca:	f01f fa4d 	bl	22368 <encode_uint>
    2ece:	4683      	mov	fp, r0
			if (precision >= 0) {
    2ed0:	f1b8 0f00 	cmp.w	r8, #0
    2ed4:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    2ed8:	db0c      	blt.n	2ef4 <cbvprintf+0x4f4>
				conv->flag_zero = false;
    2eda:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    2ede:	eba0 030b 	sub.w	r3, r0, fp
				conv->flag_zero = false;
    2ee2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    2ee6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    2ee8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    2eec:	d902      	bls.n	2ef4 <cbvprintf+0x4f4>
					conv->pad0_value = precision - (int)len;
    2eee:	eba8 0303 	sub.w	r3, r8, r3
    2ef2:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    2ef4:	4680      	mov	r8, r0
    2ef6:	e045      	b.n	2f84 <cbvprintf+0x584>
		switch (conv->specifier) {
    2ef8:	2864      	cmp	r0, #100	; 0x64
    2efa:	d001      	beq.n	2f00 <cbvprintf+0x500>
    2efc:	2869      	cmp	r0, #105	; 0x69
    2efe:	d199      	bne.n	2e34 <cbvprintf+0x434>
			if (conv->flag_plus) {
    2f00:	071e      	lsls	r6, r3, #28
    2f02:	d478      	bmi.n	2ff6 <cbvprintf+0x5f6>
				sign = ' ';
    2f04:	f013 0610 	ands.w	r6, r3, #16
    2f08:	bf18      	it	ne
    2f0a:	2620      	movne	r6, #32
			if (value->sint < 0) {
    2f0c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    2f10:	2a00      	cmp	r2, #0
    2f12:	f173 0100 	sbcs.w	r1, r3, #0
    2f16:	dad1      	bge.n	2ebc <cbvprintf+0x4bc>
				value->uint = (uint_value_type)-value->sint;
    2f18:	4252      	negs	r2, r2
    2f1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2f1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    2f22:	262d      	movs	r6, #45	; 0x2d
    2f24:	e7ca      	b.n	2ebc <cbvprintf+0x4bc>
		switch (conv->specifier) {
    2f26:	2873      	cmp	r0, #115	; 0x73
    2f28:	d020      	beq.n	2f6c <cbvprintf+0x56c>
    2f2a:	d81b      	bhi.n	2f64 <cbvprintf+0x564>
    2f2c:	286f      	cmp	r0, #111	; 0x6f
    2f2e:	d0c5      	beq.n	2ebc <cbvprintf+0x4bc>
    2f30:	2870      	cmp	r0, #112	; 0x70
    2f32:	f47f af7f 	bne.w	2e34 <cbvprintf+0x434>
			if (value->ptr != NULL) {
    2f36:	980c      	ldr	r0, [sp, #48]	; 0x30
    2f38:	2800      	cmp	r0, #0
    2f3a:	d073      	beq.n	3024 <cbvprintf+0x624>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2f3c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    2f40:	9300      	str	r3, [sp, #0]
    2f42:	aa0e      	add	r2, sp, #56	; 0x38
    2f44:	ab06      	add	r3, sp, #24
    2f46:	4631      	mov	r1, r6
    2f48:	f01f fa0e 	bl	22368 <encode_uint>
				conv->altform_0c = true;
    2f4c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    2f50:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2f54:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2f58:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2f5c:	4683      	mov	fp, r0
				conv->altform_0c = true;
    2f5e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
    2f62:	e7b5      	b.n	2ed0 <cbvprintf+0x4d0>
		switch (conv->specifier) {
    2f64:	2875      	cmp	r0, #117	; 0x75
    2f66:	d0a9      	beq.n	2ebc <cbvprintf+0x4bc>
    2f68:	2878      	cmp	r0, #120	; 0x78
    2f6a:	e7a6      	b.n	2eba <cbvprintf+0x4ba>
			if (precision >= 0) {
    2f6c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    2f70:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
			if (precision >= 0) {
    2f74:	db0a      	blt.n	2f8c <cbvprintf+0x58c>
				len = strnlen(bps, precision);
    2f76:	4641      	mov	r1, r8
    2f78:	4658      	mov	r0, fp
    2f7a:	f021 f89d 	bl	240b8 <strnlen>
			bpe = bps + len;
    2f7e:	eb0b 0800 	add.w	r8, fp, r0
		char sign = 0;
    2f82:	2600      	movs	r6, #0
		if (bps == NULL) {
    2f84:	f1bb 0f00 	cmp.w	fp, #0
    2f88:	d10b      	bne.n	2fa2 <cbvprintf+0x5a2>
    2f8a:	e753      	b.n	2e34 <cbvprintf+0x434>
				len = strlen(bps);
    2f8c:	4658      	mov	r0, fp
    2f8e:	f021 f88c 	bl	240aa <strlen>
    2f92:	e7f4      	b.n	2f7e <cbvprintf+0x57e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2f94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f96:	f88d 3018 	strb.w	r3, [sp, #24]
			bpe = buf + 1;
    2f9a:	f10d 0819 	add.w	r8, sp, #25
			bps = buf;
    2f9e:	f10d 0b18 	add.w	fp, sp, #24
		size_t nj_len = (bpe - bps);
    2fa2:	eba8 030b 	sub.w	r3, r8, fp
		if (sign != 0) {
    2fa6:	b106      	cbz	r6, 2faa <cbvprintf+0x5aa>
			nj_len += 1U;
    2fa8:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    2faa:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    2fae:	06d0      	lsls	r0, r2, #27
    2fb0:	d53e      	bpl.n	3030 <cbvprintf+0x630>
			nj_len += 2U;
    2fb2:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    2fb4:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    2fb6:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    2fb8:	bf48      	it	mi
    2fba:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    2fbc:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    2fbe:	bf48      	it	mi
    2fc0:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    2fc2:	f1b9 0f00 	cmp.w	r9, #0
    2fc6:	dd4d      	ble.n	3064 <cbvprintf+0x664>
			if (!conv->flag_dash) {
    2fc8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    2fcc:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    2fd0:	f3c2 0380 	ubfx	r3, r2, #2, #1
    2fd4:	9304      	str	r3, [sp, #16]
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d144      	bne.n	3064 <cbvprintf+0x664>
				if (conv->flag_zero) {
    2fda:	0650      	lsls	r0, r2, #25
    2fdc:	d538      	bpl.n	3050 <cbvprintf+0x650>
					if (sign != 0) {
    2fde:	b146      	cbz	r6, 2ff2 <cbvprintf+0x5f2>
						OUTC(sign);
    2fe0:	4651      	mov	r1, sl
    2fe2:	4630      	mov	r0, r6
    2fe4:	9b03      	ldr	r3, [sp, #12]
    2fe6:	4798      	blx	r3
    2fe8:	2800      	cmp	r0, #0
    2fea:	db2e      	blt.n	304a <cbvprintf+0x64a>
						sign = 0;
    2fec:	9b04      	ldr	r3, [sp, #16]
						OUTC(sign);
    2fee:	3501      	adds	r5, #1
						sign = 0;
    2ff0:	461e      	mov	r6, r3
					pad = '0';
    2ff2:	2330      	movs	r3, #48	; 0x30
    2ff4:	e02d      	b.n	3052 <cbvprintf+0x652>
				sign = '+';
    2ff6:	262b      	movs	r6, #43	; 0x2b
    2ff8:	e788      	b.n	2f0c <cbvprintf+0x50c>
				store_count(conv, value->ptr, count);
    2ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    2ffc:	2a07      	cmp	r2, #7
    2ffe:	f63f af19 	bhi.w	2e34 <cbvprintf+0x434>
    3002:	e8df f002 	tbb	[pc, r2]
    3006:	040d      	.short	0x040d
    3008:	08080d06 	.word	0x08080d06
    300c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    300e:	701d      	strb	r5, [r3, #0]
		break;
    3010:	e710      	b.n	2e34 <cbvprintf+0x434>
		*(short *)dp = (short)count;
    3012:	801d      	strh	r5, [r3, #0]
		break;
    3014:	e70e      	b.n	2e34 <cbvprintf+0x434>
		*(intmax_t *)dp = (intmax_t)count;
    3016:	4628      	mov	r0, r5
    3018:	17e9      	asrs	r1, r5, #31
    301a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    301e:	e709      	b.n	2e34 <cbvprintf+0x434>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3020:	601d      	str	r5, [r3, #0]
		break;
    3022:	e707      	b.n	2e34 <cbvprintf+0x434>
			bpe = bps + 5;
    3024:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 30f0 <cbvprintf+0x6f0>
    3028:	4606      	mov	r6, r0
			bps = "(nil)";
    302a:	f1a8 0b05 	sub.w	fp, r8, #5
    302e:	e7b8      	b.n	2fa2 <cbvprintf+0x5a2>
		} else if (conv->altform_0) {
    3030:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    3032:	bf48      	it	mi
    3034:	3301      	addmi	r3, #1
    3036:	e7bd      	b.n	2fb4 <cbvprintf+0x5b4>
					OUTC(pad);
    3038:	4618      	mov	r0, r3
    303a:	9304      	str	r3, [sp, #16]
    303c:	4651      	mov	r1, sl
    303e:	9b03      	ldr	r3, [sp, #12]
    3040:	4798      	blx	r3
    3042:	2800      	cmp	r0, #0
				while (width-- > 0) {
    3044:	464a      	mov	r2, r9
					OUTC(pad);
    3046:	9b04      	ldr	r3, [sp, #16]
    3048:	da05      	bge.n	3056 <cbvprintf+0x656>
#undef OUTS
#undef OUTC
}
    304a:	b013      	add	sp, #76	; 0x4c
    304c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    3050:	2320      	movs	r3, #32
					pad = '0';
    3052:	464a      	mov	r2, r9
    3054:	444d      	add	r5, r9
				while (width-- > 0) {
    3056:	2a00      	cmp	r2, #0
    3058:	eba5 0102 	sub.w	r1, r5, r2
    305c:	f102 39ff 	add.w	r9, r2, #4294967295
    3060:	dcea      	bgt.n	3038 <cbvprintf+0x638>
    3062:	460d      	mov	r5, r1
		if (sign != 0) {
    3064:	b136      	cbz	r6, 3074 <cbvprintf+0x674>
			OUTC(sign);
    3066:	4651      	mov	r1, sl
    3068:	4630      	mov	r0, r6
    306a:	9b03      	ldr	r3, [sp, #12]
    306c:	4798      	blx	r3
    306e:	2800      	cmp	r0, #0
    3070:	dbeb      	blt.n	304a <cbvprintf+0x64a>
    3072:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    3074:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3078:	06d9      	lsls	r1, r3, #27
    307a:	d401      	bmi.n	3080 <cbvprintf+0x680>
    307c:	071a      	lsls	r2, r3, #28
    307e:	d506      	bpl.n	308e <cbvprintf+0x68e>
				OUTC('0');
    3080:	4651      	mov	r1, sl
    3082:	2030      	movs	r0, #48	; 0x30
    3084:	9b03      	ldr	r3, [sp, #12]
    3086:	4798      	blx	r3
    3088:	2800      	cmp	r0, #0
    308a:	dbde      	blt.n	304a <cbvprintf+0x64a>
    308c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    308e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3092:	06db      	lsls	r3, r3, #27
    3094:	d507      	bpl.n	30a6 <cbvprintf+0x6a6>
				OUTC(conv->specifier);
    3096:	4651      	mov	r1, sl
    3098:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    309c:	9b03      	ldr	r3, [sp, #12]
    309e:	4798      	blx	r3
    30a0:	2800      	cmp	r0, #0
    30a2:	dbd2      	blt.n	304a <cbvprintf+0x64a>
    30a4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    30a6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    30a8:	442e      	add	r6, r5
    30aa:	1b73      	subs	r3, r6, r5
    30ac:	2b00      	cmp	r3, #0
    30ae:	dc16      	bgt.n	30de <cbvprintf+0x6de>
			OUTS(bps, bpe);
    30b0:	4643      	mov	r3, r8
    30b2:	465a      	mov	r2, fp
    30b4:	4651      	mov	r1, sl
    30b6:	9803      	ldr	r0, [sp, #12]
    30b8:	f01f f9a3 	bl	22402 <outs>
    30bc:	2800      	cmp	r0, #0
    30be:	dbc4      	blt.n	304a <cbvprintf+0x64a>
    30c0:	4405      	add	r5, r0
		while (width > 0) {
    30c2:	44a9      	add	r9, r5
    30c4:	eba9 0305 	sub.w	r3, r9, r5
    30c8:	2b00      	cmp	r3, #0
    30ca:	f77f aeb3 	ble.w	2e34 <cbvprintf+0x434>
			OUTC(' ');
    30ce:	4651      	mov	r1, sl
    30d0:	2020      	movs	r0, #32
    30d2:	9b03      	ldr	r3, [sp, #12]
    30d4:	4798      	blx	r3
    30d6:	2800      	cmp	r0, #0
    30d8:	dbb7      	blt.n	304a <cbvprintf+0x64a>
    30da:	3501      	adds	r5, #1
			--width;
    30dc:	e7f2      	b.n	30c4 <cbvprintf+0x6c4>
				OUTC('0');
    30de:	4651      	mov	r1, sl
    30e0:	2030      	movs	r0, #48	; 0x30
    30e2:	9b03      	ldr	r3, [sp, #12]
    30e4:	4798      	blx	r3
    30e6:	2800      	cmp	r0, #0
    30e8:	dbaf      	blt.n	304a <cbvprintf+0x64a>
    30ea:	3501      	adds	r5, #1
    30ec:	e7dd      	b.n	30aa <cbvprintf+0x6aa>
    30ee:	bf00      	nop
    30f0:	0002a157 	.word	0x0002a157

000030f4 <fcb_append>:
	return 0;
}

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
    30f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30f8:	b085      	sub	sp, #20
    30fa:	460d      	mov	r5, r1
    30fc:	4617      	mov	r7, r2
	struct fcb_entry *active;
	int cnt;
	int rc;
	uint8_t tmp_str[8];

	cnt = fcb_put_len(fcb, tmp_str, len);
    30fe:	460a      	mov	r2, r1
    3100:	a902      	add	r1, sp, #8
{
    3102:	4604      	mov	r4, r0
	cnt = fcb_put_len(fcb, tmp_str, len);
    3104:	f01f fa33 	bl	2256e <fcb_put_len>
	if (cnt < 0) {
    3108:	f1b0 0800 	subs.w	r8, r0, #0
    310c:	db73      	blt.n	31f6 <fcb_append+0x102>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
    310e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
int fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len);
int fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
	if (fcb->f_align <= 1U) {
    3112:	2b01      	cmp	r3, #1
    3114:	fa1f f688 	uxth.w	r6, r8
    3118:	d906      	bls.n	3128 <fcb_append+0x34>
		return len;
	}
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
    311a:	1e59      	subs	r1, r3, #1
    311c:	3d01      	subs	r5, #1
    311e:	425a      	negs	r2, r3
    3120:	440e      	add	r6, r1
    3122:	441d      	add	r5, r3
    3124:	4016      	ands	r6, r2
    3126:	4015      	ands	r5, r2
	if (fcb->f_align <= 1U) {
    3128:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
    312a:	bf86      	itte	hi
    312c:	425a      	neghi	r2, r3
    312e:	4013      	andhi	r3, r2
		return len;
    3130:	2301      	movls	r3, #1
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
    3132:	b22d      	sxth	r5, r5
    3134:	441d      	add	r5, r3

	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
    3136:	2e08      	cmp	r6, #8
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
    3138:	b2ad      	uxth	r5, r5
	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
    313a:	dd08      	ble.n	314e <fcb_append+0x5a>
    313c:	4935      	ldr	r1, [pc, #212]	; (3214 <fcb_append+0x120>)
    313e:	4836      	ldr	r0, [pc, #216]	; (3218 <fcb_append+0x124>)
    3140:	224b      	movs	r2, #75	; 0x4b
    3142:	f01e fec2 	bl	21eca <printk>
    3146:	214b      	movs	r1, #75	; 0x4b
    3148:	4832      	ldr	r0, [pc, #200]	; (3214 <fcb_append+0x120>)
    314a:	f01f f970 	bl	2242e <assert_post_action>

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
    314e:	f104 0a0c 	add.w	sl, r4, #12
	return z_impl_k_mutex_lock(mutex, timeout);
    3152:	f04f 32ff 	mov.w	r2, #4294967295
    3156:	f04f 33ff 	mov.w	r3, #4294967295
    315a:	4650      	mov	r0, sl
    315c:	f01b fa92 	bl	1e684 <z_impl_k_mutex_lock>
	if (rc) {
    3160:	4680      	mov	r8, r0
    3162:	2800      	cmp	r0, #0
    3164:	d153      	bne.n	320e <fcb_append+0x11a>
		return -EINVAL;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
    3166:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
    316a:	4433      	add	r3, r6
    316c:	684a      	ldr	r2, [r1, #4]
    316e:	442b      	add	r3, r5
    3170:	4293      	cmp	r3, r2
    3172:	d92b      	bls.n	31cc <fcb_append+0xd8>
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
    3174:	f894 b006 	ldrb.w	fp, [r4, #6]
	prev = NULL;
    3178:	4681      	mov	r9, r0
		cur = fcb_getnext_sector(fcb, cur);
    317a:	4620      	mov	r0, r4
    317c:	f01f fba9 	bl	228d2 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
    3180:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
    3182:	f1b9 0f00 	cmp.w	r9, #0
    3186:	bf08      	it	eq
    3188:	4681      	moveq	r9, r0
		if (cur == fcb->f_oldest) {
    318a:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
    318c:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
    318e:	d038      	beq.n	3202 <fcb_append+0x10e>
	} while (i++ < cnt);
    3190:	45c3      	cmp	fp, r8
    3192:	f108 0301 	add.w	r3, r8, #1
    3196:	dc32      	bgt.n	31fe <fcb_append+0x10a>
		if (!sector || (sector->fs_size <
    3198:	f1b9 0f00 	cmp.w	r9, #0
    319c:	d031      	beq.n	3202 <fcb_append+0x10e>
			sizeof(struct fcb_disk_area) + len + cnt)) {
    319e:	f106 0308 	add.w	r3, r6, #8
		if (!sector || (sector->fs_size <
    31a2:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
    31a6:	442b      	add	r3, r5
		if (!sector || (sector->fs_size <
    31a8:	429a      	cmp	r2, r3
    31aa:	d32a      	bcc.n	3202 <fcb_append+0x10e>
			rc = -ENOSPC;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
    31ac:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    31ae:	3201      	adds	r2, #1
    31b0:	b292      	uxth	r2, r2
    31b2:	4649      	mov	r1, r9
    31b4:	4620      	mov	r0, r4
    31b6:	f01f fa1c 	bl	225f2 <fcb_sector_hdr_init>
		if (rc) {
    31ba:	4680      	mov	r8, r0
    31bc:	b9c0      	cbnz	r0, 31f0 <fcb_append+0xfc>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
    31be:	2308      	movs	r3, #8
    31c0:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
    31c2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
    31c4:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		fcb->f_active_id++;
    31c8:	3301      	adds	r3, #1
    31ca:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
    31cc:	9600      	str	r6, [sp, #0]
    31ce:	ab02      	add	r3, sp, #8
    31d0:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
    31d4:	4620      	mov	r0, r4
    31d6:	f01f f998 	bl	2250a <fcb_flash_write>
	if (rc) {
    31da:	4680      	mov	r8, r0
    31dc:	b9a0      	cbnz	r0, 3208 <fcb_append+0x114>
		rc = -EIO;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
    31de:	6a63      	ldr	r3, [r4, #36]	; 0x24
    31e0:	603b      	str	r3, [r7, #0]
	append_loc->fe_elem_off = active->fe_elem_off;
    31e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    31e4:	607b      	str	r3, [r7, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
    31e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    31e8:	441e      	add	r6, r3
    31ea:	60be      	str	r6, [r7, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
    31ec:	442e      	add	r6, r5
    31ee:	62a6      	str	r6, [r4, #40]	; 0x28
	return z_impl_k_mutex_unlock(mutex);
    31f0:	4650      	mov	r0, sl
    31f2:	f01b fb1b 	bl	1e82c <z_impl_k_mutex_unlock>

	return 0;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
    31f6:	4640      	mov	r0, r8
    31f8:	b005      	add	sp, #20
    31fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
    31fe:	4698      	mov	r8, r3
    3200:	e7bb      	b.n	317a <fcb_append+0x86>
			rc = -ENOSPC;
    3202:	f06f 081b 	mvn.w	r8, #27
    3206:	e7f3      	b.n	31f0 <fcb_append+0xfc>
		rc = -EIO;
    3208:	f06f 0804 	mvn.w	r8, #4
    320c:	e7f0      	b.n	31f0 <fcb_append+0xfc>
		return -EINVAL;
    320e:	f06f 0815 	mvn.w	r8, #21
    3212:	e7f0      	b.n	31f6 <fcb_append+0x102>
    3214:	0002a158 	.word	0x0002a158
    3218:	0002a026 	.word	0x0002a026

0000321c <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    321c:	4b08      	ldr	r3, [pc, #32]	; (3240 <get_flash_area_from_id+0x24>)
{
    321e:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    3220:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    3222:	4b08      	ldr	r3, [pc, #32]	; (3244 <get_flash_area_from_id+0x28>)
    3224:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    3226:	2300      	movs	r3, #0
    3228:	429d      	cmp	r5, r3
    322a:	dc02      	bgt.n	3232 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    322c:	2200      	movs	r2, #0
}
    322e:	4610      	mov	r0, r2
    3230:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    3232:	011c      	lsls	r4, r3, #4
    3234:	190a      	adds	r2, r1, r4
    3236:	5d0c      	ldrb	r4, [r1, r4]
    3238:	4284      	cmp	r4, r0
    323a:	d0f8      	beq.n	322e <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
    323c:	3301      	adds	r3, #1
    323e:	e7f3      	b.n	3228 <get_flash_area_from_id+0xc>
    3240:	00029058 	.word	0x00029058
    3244:	2000053c 	.word	0x2000053c

00003248 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    3248:	4b08      	ldr	r3, [pc, #32]	; (326c <flash_area_open+0x24>)
    324a:	681b      	ldr	r3, [r3, #0]
{
    324c:	b510      	push	{r4, lr}
    324e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    3250:	b12b      	cbz	r3, 325e <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    3252:	f7ff ffe3 	bl	321c <get_flash_area_from_id>
	if (area == NULL) {
    3256:	b128      	cbz	r0, 3264 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    3258:	6020      	str	r0, [r4, #0]
	return 0;
    325a:	2000      	movs	r0, #0
}
    325c:	bd10      	pop	{r4, pc}
		return -EACCES;
    325e:	f06f 000c 	mvn.w	r0, #12
    3262:	e7fb      	b.n	325c <flash_area_open+0x14>
		return -ENOENT;
    3264:	f06f 0001 	mvn.w	r0, #1
    3268:	e7f8      	b.n	325c <flash_area_open+0x14>
    326a:	bf00      	nop
    326c:	2000053c 	.word	0x2000053c

00003270 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    3270:	b530      	push	{r4, r5, lr}
    3272:	b089      	sub	sp, #36	; 0x24
    3274:	460c      	mov	r4, r1
    3276:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    3278:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    327a:	f7ff ffcf 	bl	321c <get_flash_area_from_id>
	if (fa == NULL) {
    327e:	b1b8      	cbz	r0, 32b0 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    3280:	6843      	ldr	r3, [r0, #4]
    3282:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    3284:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    3286:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    3288:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    328a:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    328e:	2300      	movs	r3, #0
    3290:	9305      	str	r3, [sp, #20]
	cb_data->status = 0;
    3292:	e9cd 2306 	strd	r2, r3, [sp, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
    3296:	f01f fbbc 	bl	22a12 <device_get_binding>
	if (flash_dev == NULL) {
    329a:	b160      	cbz	r0, 32b6 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    329c:	aa01      	add	r2, sp, #4
    329e:	4907      	ldr	r1, [pc, #28]	; (32bc <flash_area_get_sectors+0x4c>)
    32a0:	f024 ff45 	bl	2812e <flash_page_foreach>
	if (cb_data->status == 0) {
    32a4:	9807      	ldr	r0, [sp, #28]
    32a6:	b908      	cbnz	r0, 32ac <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    32a8:	9b05      	ldr	r3, [sp, #20]
    32aa:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    32ac:	b009      	add	sp, #36	; 0x24
    32ae:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    32b0:	f06f 0015 	mvn.w	r0, #21
    32b4:	e7fa      	b.n	32ac <flash_area_get_sectors+0x3c>
		return -ENODEV;
    32b6:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    32ba:	e7f7      	b.n	32ac <flash_area_get_sectors+0x3c>
    32bc:	00022a17 	.word	0x00022a17

000032c0 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    32c0:	4b0f      	ldr	r3, [pc, #60]	; (3300 <settings_save_one+0x40>)
{
    32c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    32c6:	681c      	ldr	r4, [r3, #0]
{
    32c8:	4606      	mov	r6, r0
    32ca:	460f      	mov	r7, r1
    32cc:	4690      	mov	r8, r2
	if (!cs) {
    32ce:	b1a4      	cbz	r4, 32fa <settings_save_one+0x3a>
	return z_impl_k_mutex_lock(mutex, timeout);
    32d0:	f04f 32ff 	mov.w	r2, #4294967295
    32d4:	f04f 33ff 	mov.w	r3, #4294967295
    32d8:	480a      	ldr	r0, [pc, #40]	; (3304 <settings_save_one+0x44>)
    32da:	f01b f9d3 	bl	1e684 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    32de:	6863      	ldr	r3, [r4, #4]
    32e0:	463a      	mov	r2, r7
    32e2:	689d      	ldr	r5, [r3, #8]
    32e4:	4631      	mov	r1, r6
    32e6:	4643      	mov	r3, r8
    32e8:	4620      	mov	r0, r4
    32ea:	47a8      	blx	r5
    32ec:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    32ee:	4805      	ldr	r0, [pc, #20]	; (3304 <settings_save_one+0x44>)
    32f0:	f01b fa9c 	bl	1e82c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    32f4:	4620      	mov	r0, r4
    32f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    32fa:	f06f 0401 	mvn.w	r4, #1
    32fe:	e7f9      	b.n	32f4 <settings_save_one+0x34>
    3300:	20002284 	.word	0x20002284
    3304:	20000f4c 	.word	0x20000f4c

00003308 <settings_src_register>:
	parent->next = child;
    3308:	2300      	movs	r3, #0
    330a:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    330c:	4b04      	ldr	r3, [pc, #16]	; (3320 <settings_src_register+0x18>)
    330e:	685a      	ldr	r2, [r3, #4]
    3310:	b912      	cbnz	r2, 3318 <settings_src_register+0x10>
	list->head = node;
    3312:	e9c3 0000 	strd	r0, r0, [r3]
    3316:	4770      	bx	lr
	parent->next = child;
    3318:	6010      	str	r0, [r2, #0]
	list->tail = node;
    331a:	6058      	str	r0, [r3, #4]
}
    331c:	4770      	bx	lr
    331e:	bf00      	nop
    3320:	2000227c 	.word	0x2000227c

00003324 <settings_dst_register>:
	settings_save_dst = cs;
    3324:	4b01      	ldr	r3, [pc, #4]	; (332c <settings_dst_register+0x8>)
    3326:	6018      	str	r0, [r3, #0]
}
    3328:	4770      	bx	lr
    332a:	bf00      	nop
    332c:	20002284 	.word	0x20002284

00003330 <settings_load_subtree>:
{
    3330:	b530      	push	{r4, r5, lr}
    3332:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    3334:	2300      	movs	r3, #0
{
    3336:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    3338:	e9cd 3302 	strd	r3, r3, [sp, #8]
    333c:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    333e:	f04f 33ff 	mov.w	r3, #4294967295
    3342:	f04f 32ff 	mov.w	r2, #4294967295
    3346:	480b      	ldr	r0, [pc, #44]	; (3374 <settings_load_subtree+0x44>)
    3348:	f01b f99c 	bl	1e684 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    334c:	4b0a      	ldr	r3, [pc, #40]	; (3378 <settings_load_subtree+0x48>)
    334e:	681c      	ldr	r4, [r3, #0]
    3350:	b134      	cbz	r4, 3360 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    3352:	6863      	ldr	r3, [r4, #4]
    3354:	4620      	mov	r0, r4
    3356:	681b      	ldr	r3, [r3, #0]
    3358:	a901      	add	r1, sp, #4
    335a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    335c:	6824      	ldr	r4, [r4, #0]
	return node->next;
    335e:	e7f7      	b.n	3350 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    3360:	4628      	mov	r0, r5
    3362:	f000 f8cb 	bl	34fc <settings_commit_subtree>
    3366:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    3368:	4802      	ldr	r0, [pc, #8]	; (3374 <settings_load_subtree+0x44>)
    336a:	f01b fa5f 	bl	1e82c <z_impl_k_mutex_unlock>
}
    336e:	4620      	mov	r0, r4
    3370:	b005      	add	sp, #20
    3372:	bd30      	pop	{r4, r5, pc}
    3374:	20000f4c 	.word	0x20000f4c
    3378:	2000227c 	.word	0x2000227c

0000337c <settings_load_subtree_direct>:
{
    337c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    337e:	e9cd 0101 	strd	r0, r1, [sp, #4]
    3382:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    3384:	f04f 33ff 	mov.w	r3, #4294967295
    3388:	f04f 32ff 	mov.w	r2, #4294967295
    338c:	4809      	ldr	r0, [pc, #36]	; (33b4 <settings_load_subtree_direct+0x38>)
    338e:	f01b f979 	bl	1e684 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    3392:	4b09      	ldr	r3, [pc, #36]	; (33b8 <settings_load_subtree_direct+0x3c>)
    3394:	681c      	ldr	r4, [r3, #0]
    3396:	b134      	cbz	r4, 33a6 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    3398:	6863      	ldr	r3, [r4, #4]
    339a:	4620      	mov	r0, r4
    339c:	681b      	ldr	r3, [r3, #0]
    339e:	a901      	add	r1, sp, #4
    33a0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    33a2:	6824      	ldr	r4, [r4, #0]
	return node->next;
    33a4:	e7f7      	b.n	3396 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    33a6:	4803      	ldr	r0, [pc, #12]	; (33b4 <settings_load_subtree_direct+0x38>)
    33a8:	f01b fa40 	bl	1e82c <z_impl_k_mutex_unlock>
}
    33ac:	2000      	movs	r0, #0
    33ae:	b004      	add	sp, #16
    33b0:	bd10      	pop	{r4, pc}
    33b2:	bf00      	nop
    33b4:	20000f4c 	.word	0x20000f4c
    33b8:	2000227c 	.word	0x2000227c

000033bc <settings_store_init>:
	list->head = NULL;
    33bc:	4b02      	ldr	r3, [pc, #8]	; (33c8 <settings_store_init+0xc>)
    33be:	2200      	movs	r2, #0
	list->tail = NULL;
    33c0:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    33c4:	4770      	bx	lr
    33c6:	bf00      	nop
    33c8:	2000227c 	.word	0x2000227c

000033cc <settings_init>:
	list->head = NULL;
    33cc:	4b02      	ldr	r3, [pc, #8]	; (33d8 <settings_init+0xc>)
    33ce:	2200      	movs	r2, #0
	list->tail = NULL;
    33d0:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    33d4:	f7ff bff2 	b.w	33bc <settings_store_init>
    33d8:	20002288 	.word	0x20002288

000033dc <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    33dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    33e0:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    33e2:	460e      	mov	r6, r1
    33e4:	b109      	cbz	r1, 33ea <settings_parse_and_lookup+0xe>
		*next = NULL;
    33e6:	2300      	movs	r3, #0
    33e8:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    33ea:	f8df 8098 	ldr.w	r8, [pc, #152]	; 3484 <settings_parse_and_lookup+0xa8>
    33ee:	4c22      	ldr	r4, [pc, #136]	; (3478 <settings_parse_and_lookup+0x9c>)
    33f0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 3488 <settings_parse_and_lookup+0xac>
    33f4:	2500      	movs	r5, #0
    33f6:	46c2      	mov	sl, r8
    33f8:	4544      	cmp	r4, r8
    33fa:	d908      	bls.n	340e <settings_parse_and_lookup+0x32>
    33fc:	4649      	mov	r1, r9
    33fe:	481f      	ldr	r0, [pc, #124]	; (347c <settings_parse_and_lookup+0xa0>)
    3400:	2294      	movs	r2, #148	; 0x94
    3402:	f01e fd62 	bl	21eca <printk>
    3406:	2194      	movs	r1, #148	; 0x94
    3408:	4648      	mov	r0, r9
    340a:	f01f f810 	bl	2242e <assert_post_action>
    340e:	4554      	cmp	r4, sl
    3410:	d308      	bcc.n	3424 <settings_parse_and_lookup+0x48>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    3412:	4b1b      	ldr	r3, [pc, #108]	; (3480 <settings_parse_and_lookup+0xa4>)
    3414:	681c      	ldr	r4, [r3, #0]
    3416:	b10c      	cbz	r4, 341c <settings_parse_and_lookup+0x40>
    3418:	3c14      	subs	r4, #20
    341a:	b9c4      	cbnz	r4, 344e <settings_parse_and_lookup+0x72>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    341c:	4628      	mov	r0, r5
    341e:	b002      	add	sp, #8
    3420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    3424:	aa01      	add	r2, sp, #4
    3426:	6821      	ldr	r1, [r4, #0]
    3428:	4638      	mov	r0, r7
    342a:	f01f fb8f 	bl	22b4c <settings_name_steq>
    342e:	b160      	cbz	r0, 344a <settings_parse_and_lookup+0x6e>
		if (!bestmatch) {
    3430:	b925      	cbnz	r5, 343c <settings_parse_and_lookup+0x60>
			if (next) {
    3432:	b10e      	cbz	r6, 3438 <settings_parse_and_lookup+0x5c>
				*next = tmpnext;
    3434:	9b01      	ldr	r3, [sp, #4]
    3436:	6033      	str	r3, [r6, #0]
    3438:	4625      	mov	r5, r4
    343a:	e006      	b.n	344a <settings_parse_and_lookup+0x6e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    343c:	2200      	movs	r2, #0
    343e:	6829      	ldr	r1, [r5, #0]
    3440:	6820      	ldr	r0, [r4, #0]
    3442:	f01f fb83 	bl	22b4c <settings_name_steq>
    3446:	2800      	cmp	r0, #0
    3448:	d1f3      	bne.n	3432 <settings_parse_and_lookup+0x56>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    344a:	3414      	adds	r4, #20
    344c:	e7d4      	b.n	33f8 <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    344e:	aa01      	add	r2, sp, #4
    3450:	6821      	ldr	r1, [r4, #0]
    3452:	4638      	mov	r0, r7
    3454:	f01f fb7a 	bl	22b4c <settings_name_steq>
    3458:	b160      	cbz	r0, 3474 <settings_parse_and_lookup+0x98>
		if (!bestmatch) {
    345a:	b925      	cbnz	r5, 3466 <settings_parse_and_lookup+0x8a>
			if (next) {
    345c:	b10e      	cbz	r6, 3462 <settings_parse_and_lookup+0x86>
				*next = tmpnext;
    345e:	9b01      	ldr	r3, [sp, #4]
    3460:	6033      	str	r3, [r6, #0]
    3462:	4625      	mov	r5, r4
    3464:	e006      	b.n	3474 <settings_parse_and_lookup+0x98>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    3466:	2200      	movs	r2, #0
    3468:	6829      	ldr	r1, [r5, #0]
    346a:	6820      	ldr	r0, [r4, #0]
    346c:	f01f fb6e 	bl	22b4c <settings_name_steq>
    3470:	2800      	cmp	r0, #0
    3472:	d1f3      	bne.n	345c <settings_parse_and_lookup+0x80>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3474:	6964      	ldr	r4, [r4, #20]
    3476:	e7ce      	b.n	3416 <settings_parse_and_lookup+0x3a>
    3478:	00028bd0 	.word	0x00028bd0
    347c:	0002a026 	.word	0x0002a026
    3480:	20002288 	.word	0x20002288
    3484:	00028d24 	.word	0x00028d24
    3488:	0002a1c3 	.word	0x0002a1c3

0000348c <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    348c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3490:	b085      	sub	sp, #20
    3492:	4605      	mov	r5, r0
    3494:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
    3496:	9003      	str	r0, [sp, #12]
{
    3498:	460e      	mov	r6, r1
    349a:	4617      	mov	r7, r2
    349c:	4698      	mov	r8, r3

	if (load_arg && load_arg->subtree &&
    349e:	b1b4      	cbz	r4, 34ce <settings_call_set_handler+0x42>
    34a0:	6821      	ldr	r1, [r4, #0]
    34a2:	b179      	cbz	r1, 34c4 <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    34a4:	aa03      	add	r2, sp, #12
    34a6:	f01f fb51 	bl	22b4c <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    34aa:	b958      	cbnz	r0, 34c4 <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    34ac:	2000      	movs	r0, #0
    34ae:	e006      	b.n	34be <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    34b0:	68a3      	ldr	r3, [r4, #8]
    34b2:	9300      	str	r3, [sp, #0]
    34b4:	463a      	mov	r2, r7
    34b6:	4643      	mov	r3, r8
    34b8:	4631      	mov	r1, r6
    34ba:	9803      	ldr	r0, [sp, #12]
    34bc:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    34be:	b005      	add	sp, #20
    34c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    34c4:	f8d4 9004 	ldr.w	r9, [r4, #4]
    34c8:	f1b9 0f00 	cmp.w	r9, #0
    34cc:	d1f0      	bne.n	34b0 <settings_call_set_handler+0x24>
		ch = settings_parse_and_lookup(name, &name_key);
    34ce:	a903      	add	r1, sp, #12
    34d0:	4628      	mov	r0, r5
    34d2:	f7ff ff83 	bl	33dc <settings_parse_and_lookup>
		if (!ch) {
    34d6:	2800      	cmp	r0, #0
    34d8:	d0e8      	beq.n	34ac <settings_call_set_handler+0x20>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    34da:	6884      	ldr	r4, [r0, #8]
    34dc:	9803      	ldr	r0, [sp, #12]
    34de:	4643      	mov	r3, r8
    34e0:	463a      	mov	r2, r7
    34e2:	4631      	mov	r1, r6
    34e4:	47a0      	blx	r4
		if (rc != 0) {
    34e6:	4603      	mov	r3, r0
    34e8:	2800      	cmp	r0, #0
    34ea:	d0df      	beq.n	34ac <settings_call_set_handler+0x20>
			LOG_ERR("set-value failure. key: %s error(%d)",
    34ec:	462a      	mov	r2, r5
    34ee:	2145      	movs	r1, #69	; 0x45
    34f0:	4801      	ldr	r0, [pc, #4]	; (34f8 <settings_call_set_handler+0x6c>)
    34f2:	f01e fcea 	bl	21eca <printk>
    34f6:	e7d9      	b.n	34ac <settings_call_set_handler+0x20>
    34f8:	0002a199 	.word	0x0002a199

000034fc <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    34fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3500:	4f1f      	ldr	r7, [pc, #124]	; (3580 <settings_commit_subtree+0x84>)
    3502:	4c20      	ldr	r4, [pc, #128]	; (3584 <settings_commit_subtree+0x88>)
    3504:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3590 <settings_commit_subtree+0x94>
{
    3508:	4606      	mov	r6, r0
	rc = 0;
    350a:	2500      	movs	r5, #0
    350c:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    350e:	42bc      	cmp	r4, r7
    3510:	d908      	bls.n	3524 <settings_commit_subtree+0x28>
    3512:	4641      	mov	r1, r8
    3514:	481c      	ldr	r0, [pc, #112]	; (3588 <settings_commit_subtree+0x8c>)
    3516:	22f4      	movs	r2, #244	; 0xf4
    3518:	f01e fcd7 	bl	21eca <printk>
    351c:	21f4      	movs	r1, #244	; 0xf4
    351e:	4640      	mov	r0, r8
    3520:	f01e ff85 	bl	2242e <assert_post_action>
    3524:	454c      	cmp	r4, r9
    3526:	d307      	bcc.n	3538 <settings_commit_subtree+0x3c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    3528:	4b18      	ldr	r3, [pc, #96]	; (358c <settings_commit_subtree+0x90>)
    352a:	681c      	ldr	r4, [r3, #0]
    352c:	b10c      	cbz	r4, 3532 <settings_commit_subtree+0x36>
    352e:	3c14      	subs	r4, #20
    3530:	b9a4      	cbnz	r4, 355c <settings_commit_subtree+0x60>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    3532:	4628      	mov	r0, r5
    3534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3538:	b91e      	cbnz	r6, 3542 <settings_commit_subtree+0x46>
		if (ch->h_commit) {
    353a:	68e3      	ldr	r3, [r4, #12]
    353c:	b94b      	cbnz	r3, 3552 <settings_commit_subtree+0x56>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    353e:	3414      	adds	r4, #20
    3540:	e7e5      	b.n	350e <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3542:	2200      	movs	r2, #0
    3544:	4631      	mov	r1, r6
    3546:	6820      	ldr	r0, [r4, #0]
    3548:	f01f fb00 	bl	22b4c <settings_name_steq>
    354c:	2800      	cmp	r0, #0
    354e:	d1f4      	bne.n	353a <settings_commit_subtree+0x3e>
    3550:	e7f5      	b.n	353e <settings_commit_subtree+0x42>
			rc2 = ch->h_commit();
    3552:	4798      	blx	r3
				rc = rc2;
    3554:	2d00      	cmp	r5, #0
    3556:	bf08      	it	eq
    3558:	4605      	moveq	r5, r0
    355a:	e7f0      	b.n	353e <settings_commit_subtree+0x42>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    355c:	b91e      	cbnz	r6, 3566 <settings_commit_subtree+0x6a>
		if (ch->h_commit) {
    355e:	68e3      	ldr	r3, [r4, #12]
    3560:	b94b      	cbnz	r3, 3576 <settings_commit_subtree+0x7a>
    3562:	6964      	ldr	r4, [r4, #20]
    3564:	e7e2      	b.n	352c <settings_commit_subtree+0x30>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3566:	2200      	movs	r2, #0
    3568:	4631      	mov	r1, r6
    356a:	6820      	ldr	r0, [r4, #0]
    356c:	f01f faee 	bl	22b4c <settings_name_steq>
    3570:	2800      	cmp	r0, #0
    3572:	d1f4      	bne.n	355e <settings_commit_subtree+0x62>
    3574:	e7f5      	b.n	3562 <settings_commit_subtree+0x66>
			rc2 = ch->h_commit();
    3576:	4798      	blx	r3
				rc = rc2;
    3578:	2d00      	cmp	r5, #0
    357a:	bf08      	it	eq
    357c:	4605      	moveq	r5, r0
    357e:	e7f0      	b.n	3562 <settings_commit_subtree+0x66>
    3580:	00028d24 	.word	0x00028d24
    3584:	00028bd0 	.word	0x00028bd0
    3588:	0002a026 	.word	0x0002a026
    358c:	20002288 	.word	0x20002288
    3590:	0002a1c3 	.word	0x0002a1c3

00003594 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    3594:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    3596:	4c06      	ldr	r4, [pc, #24]	; (35b0 <settings_subsys_init+0x1c>)
    3598:	7823      	ldrb	r3, [r4, #0]
    359a:	b93b      	cbnz	r3, 35ac <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    359c:	f7ff ff16 	bl	33cc <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    35a0:	f000 fa94 	bl	3acc <settings_backend_init>

	if (!err) {
    35a4:	b908      	cbnz	r0, 35aa <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    35a6:	2301      	movs	r3, #1
    35a8:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    35aa:	bd10      	pop	{r4, pc}
		return 0;
    35ac:	2000      	movs	r0, #0
    35ae:	e7fc      	b.n	35aa <settings_subsys_init+0x16>
    35b0:	200043bf 	.word	0x200043bf

000035b4 <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
    35b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35b8:	b08b      	sub	sp, #44	; 0x2c
    35ba:	468a      	mov	sl, r1
    35bc:	9302      	str	r3, [sp, #8]
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	uint8_t rbs = settings_io_cb.rwbs;
    35be:	4b2a      	ldr	r3, [pc, #168]	; (3668 <settings_line_raw_read_until+0xb4>)
    35c0:	7b19      	ldrb	r1, [r3, #12]
    35c2:	9101      	str	r1, [sp, #4]
{
    35c4:	4680      	mov	r8, r0
	off_t off;
	int rc = -EINVAL;

	if (len_req == 0) {
    35c6:	4615      	mov	r5, r2
    35c8:	2a00      	cmp	r2, #0
    35ca:	d046      	beq.n	365a <settings_line_raw_read_until+0xa6>
    35cc:	4616      	mov	r6, r2
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
    35ce:	4699      	mov	r9, r3
		read_size = sizeof(temp_buf);
    35d0:	2310      	movs	r3, #16
    35d2:	9305      	str	r3, [sp, #20]
		off = seek / rbs * rbs;
    35d4:	9b01      	ldr	r3, [sp, #4]
    35d6:	fb98 f4f3 	sdiv	r4, r8, r3
    35da:	435c      	muls	r4, r3
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
    35dc:	f8d9 7000 	ldr.w	r7, [r9]
    35e0:	9815      	ldr	r0, [sp, #84]	; 0x54
    35e2:	ab05      	add	r3, sp, #20
    35e4:	aa06      	add	r2, sp, #24
    35e6:	4621      	mov	r1, r4
    35e8:	47b8      	blx	r7
		if (rc) {
    35ea:	4607      	mov	r7, r0
    35ec:	2800      	cmp	r0, #0
    35ee:	d137      	bne.n	3660 <settings_line_raw_read_until+0xac>
			return -EIO;
		}

		off = seek - off;
		len = read_size - off;
    35f0:	eba8 0b04 	sub.w	fp, r8, r4
    35f4:	9c05      	ldr	r4, [sp, #20]
    35f6:	ab06      	add	r3, sp, #24
    35f8:	eba4 040b 	sub.w	r4, r4, fp
		len = MIN(rem_size, len);
    35fc:	449b      	add	fp, r3

		if (until_char != NULL) {
    35fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
		len = MIN(rem_size, len);
    3600:	42b4      	cmp	r4, r6
    3602:	bf28      	it	cs
    3604:	4634      	movcs	r4, r6
		if (until_char != NULL) {
    3606:	b323      	cbz	r3, 3652 <settings_line_raw_read_until+0x9e>
			char *pend;
			pend = memchr(&temp_buf[off], *until_char, len);
    3608:	4622      	mov	r2, r4
    360a:	7819      	ldrb	r1, [r3, #0]
    360c:	4658      	mov	r0, fp
    360e:	f020 fdea 	bl	241e6 <memchr>
			if (pend != NULL) {
    3612:	b300      	cbz	r0, 3656 <settings_line_raw_read_until+0xa2>
				len = pend - &temp_buf[off];
    3614:	eba0 040b 	sub.w	r4, r0, fp
				rc = 1; /* will cause loop expiration */
    3618:	2301      	movs	r3, #1
			}
		}

		memcpy(out, &temp_buf[off], len);
    361a:	4622      	mov	r2, r4
    361c:	4659      	mov	r1, fp
    361e:	4650      	mov	r0, sl
    3620:	9303      	str	r3, [sp, #12]
    3622:	f020 fd94 	bl	2414e <memcpy>

		rem_size -= len;

		if (exp_size > read_size || rc) {
    3626:	9a05      	ldr	r2, [sp, #20]
    3628:	9b03      	ldr	r3, [sp, #12]
    362a:	2a0f      	cmp	r2, #15
		rem_size -= len;
    362c:	eba6 0604 	sub.w	r6, r6, r4
		if (exp_size > read_size || rc) {
    3630:	d904      	bls.n	363c <settings_line_raw_read_until+0x88>
    3632:	b91b      	cbnz	r3, 363c <settings_line_raw_read_until+0x88>
			break;
		}

		out += len;
    3634:	44a2      	add	sl, r4
		seek += len;
    3636:	44a0      	add	r8, r4
	while (rem_size) {
    3638:	2e00      	cmp	r6, #0
    363a:	d1c9      	bne.n	35d0 <settings_line_raw_read_until+0x1c>
	}

	*len_read = len_req - rem_size;
    363c:	9a02      	ldr	r2, [sp, #8]
    363e:	1bad      	subs	r5, r5, r6
    3640:	6015      	str	r5, [r2, #0]

	if (until_char != NULL) {
    3642:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3644:	b10a      	cbz	r2, 364a <settings_line_raw_read_until+0x96>
		return (rc) ? 0 : 1;
    3646:	f083 0701 	eor.w	r7, r3, #1
	}

	return 0;
}
    364a:	4638      	mov	r0, r7
    364c:	b00b      	add	sp, #44	; 0x2c
    364e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
    3652:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3654:	e7e1      	b.n	361a <settings_line_raw_read_until+0x66>
    3656:	463b      	mov	r3, r7
    3658:	e7df      	b.n	361a <settings_line_raw_read_until+0x66>
		return -EINVAL;
    365a:	f06f 0715 	mvn.w	r7, #21
    365e:	e7f4      	b.n	364a <settings_line_raw_read_until+0x96>
			return -EIO;
    3660:	f06f 0704 	mvn.w	r7, #4
    3664:	e7f1      	b.n	364a <settings_line_raw_read_until+0x96>
    3666:	bf00      	nop
    3668:	20002290 	.word	0x20002290

0000366c <settings_line_write>:
{
    366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t wbs = settings_io_cb.rwbs;
    3670:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 372c <settings_line_write+0xc0>
{
    3674:	b087      	sub	sp, #28
	uint8_t wbs = settings_io_cb.rwbs;
    3676:	f89a 700c 	ldrb.w	r7, [sl, #12]
{
    367a:	9301      	str	r3, [sp, #4]
    367c:	4683      	mov	fp, r0
    367e:	4689      	mov	r9, r1
    3680:	4690      	mov	r8, r2
	rem = strlen(name);
    3682:	f020 fd12 	bl	240aa <strlen>
	w_size = rem - rem % wbs;
    3686:	fbb0 f4f7 	udiv	r4, r0, r7
    368a:	fb07 0414 	mls	r4, r7, r4, r0
    368e:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
    3690:	462b      	mov	r3, r5
    3692:	465a      	mov	r2, fp
    3694:	9901      	ldr	r1, [sp, #4]
    3696:	9810      	ldr	r0, [sp, #64]	; 0x40
    3698:	f8da 6004 	ldr.w	r6, [sl, #4]
    369c:	47b0      	blx	r6
	w_loc += w_size;
    369e:	9b01      	ldr	r3, [sp, #4]
    36a0:	442b      	add	r3, r5
    36a2:	9301      	str	r3, [sp, #4]
	if (rem) {
    36a4:	b12c      	cbz	r4, 36b2 <settings_line_write+0x46>
		memcpy(w_buf, name, rem);
    36a6:	4622      	mov	r2, r4
    36a8:	eb0b 0105 	add.w	r1, fp, r5
    36ac:	a802      	add	r0, sp, #8
    36ae:	f020 fd4e 	bl	2414e <memcpy>
	w_buf[rem] = '=';
    36b2:	ab06      	add	r3, sp, #24
    36b4:	4423      	add	r3, r4
    36b6:	223d      	movs	r2, #61	; 0x3d
    36b8:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
    36bc:	3401      	adds	r4, #1
		while (w_size < sizeof(w_buf)) {
    36be:	2c0f      	cmp	r4, #15
    36c0:	d90d      	bls.n	36de <settings_line_write+0x72>
    36c2:	2500      	movs	r5, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
    36c4:	4623      	mov	r3, r4
    36c6:	aa02      	add	r2, sp, #8
    36c8:	9901      	ldr	r1, [sp, #4]
    36ca:	9810      	ldr	r0, [sp, #64]	; 0x40
    36cc:	f8da 6004 	ldr.w	r6, [sl, #4]
    36d0:	47b0      	blx	r6
		if (rc) {
    36d2:	bb30      	cbnz	r0, 3722 <settings_line_write+0xb6>
		if (done) {
    36d4:	bb3d      	cbnz	r5, 3726 <settings_line_write+0xba>
		w_loc += w_size;
    36d6:	9b01      	ldr	r3, [sp, #4]
    36d8:	4423      	add	r3, r4
    36da:	9301      	str	r3, [sp, #4]
		w_size = 0;
    36dc:	462c      	mov	r4, r5
			if (rem) {
    36de:	f1b8 0f00 	cmp.w	r8, #0
    36e2:	d00f      	beq.n	3704 <settings_line_write+0x98>
				add = MIN(rem, sizeof(w_buf) - w_size);
    36e4:	f1c4 0510 	rsb	r5, r4, #16
    36e8:	4545      	cmp	r5, r8
    36ea:	bf28      	it	cs
    36ec:	4645      	movcs	r5, r8
				memcpy(&w_buf[w_size], value, add);
    36ee:	ab02      	add	r3, sp, #8
    36f0:	4649      	mov	r1, r9
    36f2:	1918      	adds	r0, r3, r4
    36f4:	462a      	mov	r2, r5
    36f6:	f020 fd2a 	bl	2414e <memcpy>
				value += add;
    36fa:	44a9      	add	r9, r5
				rem -= add;
    36fc:	eba8 0805 	sub.w	r8, r8, r5
				w_size += add;
    3700:	442c      	add	r4, r5
    3702:	e7dc      	b.n	36be <settings_line_write+0x52>
				add = (w_size) % wbs;
    3704:	fbb4 f5f7 	udiv	r5, r4, r7
    3708:	fb07 4515 	mls	r5, r7, r5, r4
				if (add) {
    370c:	b13d      	cbz	r5, 371e <settings_line_write+0xb2>
					add = wbs - add;
    370e:	1b7d      	subs	r5, r7, r5
					memset(&w_buf[w_size], '\0',
    3710:	ab02      	add	r3, sp, #8
    3712:	1918      	adds	r0, r3, r4
    3714:	462a      	mov	r2, r5
    3716:	4641      	mov	r1, r8
    3718:	f020 fd43 	bl	241a2 <memset>
					w_size += add;
    371c:	442c      	add	r4, r5
				done = true;
    371e:	2501      	movs	r5, #1
    3720:	e7d0      	b.n	36c4 <settings_line_write+0x58>
			return -EIO;
    3722:	f06f 0004 	mvn.w	r0, #4
}
    3726:	b007      	add	sp, #28
    3728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    372c:	20002290 	.word	0x20002290

00003730 <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
    3730:	4b03      	ldr	r3, [pc, #12]	; (3740 <settings_line_val_get_len+0x10>)
{
    3732:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
    3734:	689b      	ldr	r3, [r3, #8]
{
    3736:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
    3738:	4608      	mov	r0, r1
    373a:	4798      	blx	r3

	return len - val_off;
}
    373c:	1b00      	subs	r0, r0, r4
    373e:	bd10      	pop	{r4, pc}
    3740:	20002290 	.word	0x20002290

00003744 <settings_line_entry_copy>:
}


int settings_line_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			     off_t src_off, size_t len)
{
    3744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3748:	b086      	sub	sp, #24
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
    374a:	4f19      	ldr	r7, [pc, #100]	; (37b0 <settings_line_entry_copy+0x6c>)
{
    374c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    3750:	4681      	mov	r9, r0
    3752:	460d      	mov	r5, r1
    3754:	4692      	mov	sl, r2
    3756:	461e      	mov	r6, r3
	int rc = -EINVAL;
    3758:	f06f 0015 	mvn.w	r0, #21
	while (len) {
    375c:	f1b8 0f00 	cmp.w	r8, #0
    3760:	d102      	bne.n	3768 <settings_line_entry_copy+0x24>
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
    3762:	b006      	add	sp, #24
    3764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
    3768:	4643      	mov	r3, r8
    376a:	2b10      	cmp	r3, #16
    376c:	bf28      	it	cs
    376e:	2310      	movcs	r3, #16
    3770:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
    3772:	aa02      	add	r2, sp, #8
    3774:	ab01      	add	r3, sp, #4
    3776:	4631      	mov	r1, r6
    3778:	4650      	mov	r0, sl
    377a:	683c      	ldr	r4, [r7, #0]
    377c:	47a0      	blx	r4
		if (rc) {
    377e:	2800      	cmp	r0, #0
    3780:	d1ef      	bne.n	3762 <settings_line_entry_copy+0x1e>
		size_t write_size = chunk_size;
    3782:	9b01      	ldr	r3, [sp, #4]
		if (chunk_size % settings_io_cb.rwbs) {
    3784:	7b39      	ldrb	r1, [r7, #12]
    3786:	fbb3 f2f1 	udiv	r2, r3, r1
    378a:	fb01 3212 	mls	r2, r1, r2, r3
    378e:	b10a      	cbz	r2, 3794 <settings_line_entry_copy+0x50>
			write_size += settings_io_cb.rwbs -
    3790:	440b      	add	r3, r1
    3792:	1a9b      	subs	r3, r3, r2
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, write_size);
    3794:	aa02      	add	r2, sp, #8
    3796:	4629      	mov	r1, r5
    3798:	4648      	mov	r0, r9
    379a:	687c      	ldr	r4, [r7, #4]
    379c:	47a0      	blx	r4
		if (rc) {
    379e:	2800      	cmp	r0, #0
    37a0:	d1df      	bne.n	3762 <settings_line_entry_copy+0x1e>
		src_off += chunk_size;
    37a2:	9b01      	ldr	r3, [sp, #4]
    37a4:	441e      	add	r6, r3
		dst_off += chunk_size;
    37a6:	441d      	add	r5, r3
		len -= chunk_size;
    37a8:	eba8 0803 	sub.w	r8, r8, r3
    37ac:	e7d6      	b.n	375c <settings_line_entry_copy+0x18>
    37ae:	bf00      	nop
    37b0:	20002290 	.word	0x20002290

000037b4 <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  uint8_t io_rwbs)
{
    37b4:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
    37b6:	4c03      	ldr	r4, [pc, #12]	; (37c4 <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
    37b8:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
    37bc:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
    37be:	7323      	strb	r3, [r4, #12]
}
    37c0:	bd10      	pop	{r4, pc}
    37c2:	bf00      	nop
    37c4:	20002290 	.word	0x20002290

000037c8 <settings_line_load_cb>:
	return -1;
}

int settings_line_load_cb(const char *name, void *val_read_cb_ctx, off_t off,
			  void *cb_arg)
{
    37c8:	b530      	push	{r4, r5, lr}
    37ca:	4604      	mov	r4, r0
    37cc:	b085      	sub	sp, #20
	size_t len;
	struct settings_line_read_value_cb_ctx value_ctx;
	struct settings_load_arg *arg = cb_arg;
	value_ctx.read_cb_ctx = val_read_cb_ctx;
	value_ctx.off = off;
	len = settings_line_val_get_len(off, val_read_cb_ctx);
    37ce:	4610      	mov	r0, r2
{
    37d0:	461d      	mov	r5, r3
	value_ctx.off = off;
    37d2:	e9cd 1202 	strd	r1, r2, [sp, #8]
	len = settings_line_val_get_len(off, val_read_cb_ctx);
    37d6:	f7ff ffab 	bl	3730 <settings_line_val_get_len>

	return settings_call_set_handler(name, len, settings_line_read_cb,
    37da:	9500      	str	r5, [sp, #0]
    37dc:	4601      	mov	r1, r0
    37de:	ab02      	add	r3, sp, #8
    37e0:	4a02      	ldr	r2, [pc, #8]	; (37ec <settings_line_load_cb+0x24>)
    37e2:	4620      	mov	r0, r4
    37e4:	f7ff fe52 	bl	348c <settings_call_set_handler>
					 &value_ctx, arg);
}
    37e8:	b005      	add	sp, #20
    37ea:	bd30      	pop	{r4, r5, pc}
    37ec:	00022bd9 	.word	0x00022bd9

000037f0 <settings_fcb_load_priv>:

static int settings_fcb_load_priv(struct settings_store *cs,
				  line_load_cb cb,
				  void *cb_arg,
				  bool filter_duplicates)
{
    37f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37f4:	4607      	mov	r7, r0
    37f6:	b0b3      	sub	sp, #204	; 0xcc
    37f8:	4688      	mov	r8, r1
    37fa:	4691      	mov	r9, r2
	struct settings_fcb *cf = (struct settings_fcb *)cs;
	struct fcb_entry_ctx entry_ctx = {
    37fc:	2100      	movs	r1, #0
    37fe:	2210      	movs	r2, #16
    3800:	a802      	add	r0, sp, #8
{
    3802:	469a      	mov	sl, r3
			LOG_ERR("failed to load line");
    3804:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 38b4 <settings_fcb_load_priv+0xc4>
	struct fcb_entry_ctx entry_ctx = {
    3808:	f020 fccb 	bl	241a2 <memset>
    380c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    380e:	9306      	str	r3, [sp, #24]
		{.fe_sector = NULL, .fe_elem_off = 0},
		.fap = cf->cf_fcb.fap
	};
	int rc;

	while ((rc = fcb_getnext(&cf->cf_fcb, &entry_ctx.loc)) == 0) {
    3810:	f107 0608 	add.w	r6, r7, #8
    3814:	a902      	add	r1, sp, #8
    3816:	4630      	mov	r0, r6
    3818:	f01f f8a5 	bl	22966 <fcb_getnext>
    381c:	b118      	cbz	r0, 3826 <settings_fcb_load_priv+0x36>
	}
	if (rc == -ENOTSUP) {
		rc = 0;
	}
	return 0;
}
    381e:	2000      	movs	r0, #0
    3820:	b033      	add	sp, #204	; 0xcc
    3822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_line_name_read(name, sizeof(name), &name_len,
    3826:	466a      	mov	r2, sp
    3828:	ab02      	add	r3, sp, #8
    382a:	214a      	movs	r1, #74	; 0x4a
    382c:	a80c      	add	r0, sp, #48	; 0x30
    382e:	f01f f9e2 	bl	22bf6 <settings_line_name_read>
		if (rc) {
    3832:	4602      	mov	r2, r0
    3834:	b120      	cbz	r0, 3840 <settings_fcb_load_priv+0x50>
			LOG_ERR("Failed to load line name: %d", rc);
    3836:	2145      	movs	r1, #69	; 0x45
    3838:	481d      	ldr	r0, [pc, #116]	; (38b0 <settings_fcb_load_priv+0xc0>)
    383a:	f01e fb46 	bl	21eca <printk>
			continue;
    383e:	e7e7      	b.n	3810 <settings_fcb_load_priv+0x20>
		name[name_len] = '\0';
    3840:	9b00      	ldr	r3, [sp, #0]
    3842:	a932      	add	r1, sp, #200	; 0xc8
    3844:	4419      	add	r1, r3
    3846:	f801 0c98 	strb.w	r0, [r1, #-152]
		if (filter_duplicates &&
    384a:	f1ba 0f00 	cmp.w	sl, #0
    384e:	d00f      	beq.n	3870 <settings_fcb_load_priv+0x80>
	if (off >= entry_ctx->loc.fe_data_len) {
    3850:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    3854:	3301      	adds	r3, #1
    3856:	4293      	cmp	r3, r2
    3858:	dada      	bge.n	3810 <settings_fcb_load_priv+0x20>
	struct fcb_entry_ctx entry2_ctx = *entry_ctx;
    385a:	ad02      	add	r5, sp, #8
    385c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    385e:	ac07      	add	r4, sp, #28
    3860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3862:	682b      	ldr	r3, [r5, #0]
    3864:	6023      	str	r3, [r4, #0]
	while (fcb_getnext(&cf->cf_fcb, &entry2_ctx.loc) == 0) {
    3866:	a907      	add	r1, sp, #28
    3868:	4630      	mov	r0, r6
    386a:	f01f f87c 	bl	22966 <fcb_getnext>
    386e:	b130      	cbz	r0, 387e <settings_fcb_load_priv+0x8e>
			cb(name, &entry_ctx, name_len + 1, cb_arg);
    3870:	9a00      	ldr	r2, [sp, #0]
    3872:	464b      	mov	r3, r9
    3874:	3201      	adds	r2, #1
    3876:	a902      	add	r1, sp, #8
    3878:	a80c      	add	r0, sp, #48	; 0x30
    387a:	47c0      	blx	r8
    387c:	e7c8      	b.n	3810 <settings_fcb_load_priv+0x20>
		if (settings_line_name_read(name2, sizeof(name2), &name2_len,
    387e:	ab07      	add	r3, sp, #28
    3880:	aa01      	add	r2, sp, #4
    3882:	214a      	movs	r1, #74	; 0x4a
    3884:	a81f      	add	r0, sp, #124	; 0x7c
    3886:	f01f f9b6 	bl	22bf6 <settings_line_name_read>
    388a:	b120      	cbz	r0, 3896 <settings_fcb_load_priv+0xa6>
			LOG_ERR("failed to load line");
    388c:	2145      	movs	r1, #69	; 0x45
    388e:	4658      	mov	r0, fp
    3890:	f01e fb1b 	bl	21eca <printk>
			continue;
    3894:	e7e7      	b.n	3866 <settings_fcb_load_priv+0x76>
		name2[name2_len] = '\0';
    3896:	9b01      	ldr	r3, [sp, #4]
    3898:	aa32      	add	r2, sp, #200	; 0xc8
    389a:	4413      	add	r3, r2
		if (!strcmp(name, name2)) {
    389c:	a91f      	add	r1, sp, #124	; 0x7c
		name2[name2_len] = '\0';
    389e:	f803 0c4c 	strb.w	r0, [r3, #-76]
		if (!strcmp(name, name2)) {
    38a2:	a80c      	add	r0, sp, #48	; 0x30
    38a4:	f020 fc11 	bl	240ca <strcmp>
    38a8:	2800      	cmp	r0, #0
    38aa:	d1dc      	bne.n	3866 <settings_fcb_load_priv+0x76>
    38ac:	e7b0      	b.n	3810 <settings_fcb_load_priv+0x20>
    38ae:	bf00      	nop
    38b0:	0002a1f5 	.word	0x0002a1f5
    38b4:	0002a217 	.word	0x0002a217

000038b8 <settings_fcb_load>:

static int settings_fcb_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
	return settings_fcb_load_priv(
    38b8:	460a      	mov	r2, r1
    38ba:	2301      	movs	r3, #1
    38bc:	4901      	ldr	r1, [pc, #4]	; (38c4 <settings_fcb_load+0xc>)
    38be:	f7ff bf97 	b.w	37f0 <settings_fcb_load_priv>
    38c2:	bf00      	nop
    38c4:	000037c9 	.word	0x000037c9

000038c8 <settings_fcb_save>:
	return rc;
}

static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
    38c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38cc:	4606      	mov	r6, r0
    38ce:	b0bf      	sub	sp, #252	; 0xfc
    38d0:	460f      	mov	r7, r1
    38d2:	4692      	mov	sl, r2
	struct settings_line_dup_check_arg cdca;

	if (val_len > 0 && value == NULL) {
    38d4:	4698      	mov	r8, r3
    38d6:	b103      	cbz	r3, 38da <settings_fcb_save+0x12>
    38d8:	b17a      	cbz	r2, 38fa <settings_fcb_save+0x32>
	/*
	 * Check if we're writing the same value again.
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
    38da:	2400      	movs	r4, #0
	cdca.val_len = val_len;
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
    38dc:	4623      	mov	r3, r4
    38de:	aa05      	add	r2, sp, #20
    38e0:	495b      	ldr	r1, [pc, #364]	; (3a50 <settings_fcb_save+0x188>)
    38e2:	4630      	mov	r0, r6
	cdca.val = (char *)value;
    38e4:	e9cd 7a05 	strd	r7, sl, [sp, #20]
	cdca.val_len = val_len;
    38e8:	e9cd 8407 	strd	r8, r4, [sp, #28]
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
    38ec:	f7ff ff80 	bl	37f0 <settings_fcb_load_priv>
	if (cdca.is_dup == 1) {
    38f0:	9b08      	ldr	r3, [sp, #32]
    38f2:	2b01      	cmp	r3, #1
    38f4:	f000 80a7 	beq.w	3a46 <settings_fcb_save+0x17e>
	if (!name) {
    38f8:	b917      	cbnz	r7, 3900 <settings_fcb_save+0x38>
		return -EINVAL;
    38fa:	f06f 0415 	mvn.w	r4, #21
    38fe:	e0a2      	b.n	3a46 <settings_fcb_save+0x17e>
	len = settings_line_len_calc(name, val_len);
    3900:	4641      	mov	r1, r8
    3902:	4638      	mov	r0, r7
    3904:	f01f f958 	bl	22bb8 <settings_line_len_calc>
    3908:	4683      	mov	fp, r0
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
    390a:	7b73      	ldrb	r3, [r6, #13]
    390c:	429c      	cmp	r4, r3
    390e:	daf4      	bge.n	38fa <settings_fcb_save+0x32>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
    3910:	f106 0508 	add.w	r5, r6, #8
    3914:	f10d 0924 	add.w	r9, sp, #36	; 0x24
    3918:	464a      	mov	r2, r9
    391a:	fa1f f18b 	uxth.w	r1, fp
    391e:	4628      	mov	r0, r5
    3920:	f7ff fbe8 	bl	30f4 <fcb_append>
		if (rc != -ENOSPC) {
    3924:	f110 0f1c 	cmn.w	r0, #28
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
    3928:	4603      	mov	r3, r0
		if (rc != -ENOSPC) {
    392a:	d176      	bne.n	3a1a <settings_fcb_save+0x152>
		if (i < (cf->cf_fcb.f_sector_cnt - 1)) {
    392c:	7b73      	ldrb	r3, [r6, #13]
    392e:	3b01      	subs	r3, #1
    3930:	42a3      	cmp	r3, r4
    3932:	dd1b      	ble.n	396c <settings_fcb_save+0xa4>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
    3934:	4628      	mov	r0, r5
    3936:	f01e fd82 	bl	2243e <fcb_append_to_scratch>
	if (rc) {
    393a:	4681      	mov	r9, r0
    393c:	b9b0      	cbnz	r0, 396c <settings_fcb_save+0xa4>
	rbs = flash_area_align(cf->cf_fcb.fap);
    393e:	6c30      	ldr	r0, [r6, #64]	; 0x40
    3940:	f01f f8f4 	bl	22b2c <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
    3944:	6c33      	ldr	r3, [r6, #64]	; 0x40
    3946:	9312      	str	r3, [sp, #72]	; 0x48
	loc1.loc.fe_elem_off = 0U;
    3948:	e9cd 990e 	strd	r9, r9, [sp, #56]	; 0x38
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
    394c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 3a58 <settings_fcb_save+0x190>
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
    3950:	a90e      	add	r1, sp, #56	; 0x38
    3952:	4628      	mov	r0, r5
    3954:	f01f f807 	bl	22966 <fcb_getnext>
    3958:	b150      	cbz	r0, 3970 <settings_fcb_save+0xa8>
	rc = fcb_rotate(&cf->cf_fcb);
    395a:	4628      	mov	r0, r5
    395c:	f01f f81d 	bl	2299a <fcb_rotate>
	if (rc != 0) {
    3960:	4602      	mov	r2, r0
    3962:	b118      	cbz	r0, 396c <settings_fcb_save+0xa4>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
    3964:	2145      	movs	r1, #69	; 0x45
    3966:	483b      	ldr	r0, [pc, #236]	; (3a54 <settings_fcb_save+0x18c>)
    3968:	f01e faaf 	bl	21eca <printk>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
    396c:	3401      	adds	r4, #1
    396e:	e7cc      	b.n	390a <settings_fcb_save+0x42>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
    3970:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3974:	429a      	cmp	r2, r3
    3976:	d1f0      	bne.n	395a <settings_fcb_save+0x92>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
    3978:	ab0e      	add	r3, sp, #56	; 0x38
    397a:	aa03      	add	r2, sp, #12
    397c:	2149      	movs	r1, #73	; 0x49
    397e:	a818      	add	r0, sp, #96	; 0x60
    3980:	f01f f939 	bl	22bf6 <settings_line_name_read>
		if (rc) {
    3984:	2800      	cmp	r0, #0
    3986:	d1e3      	bne.n	3950 <settings_fcb_save+0x88>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
    3988:	9b03      	ldr	r3, [sp, #12]
    398a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    398e:	3301      	adds	r3, #1
    3990:	4293      	cmp	r3, r2
    3992:	d0dd      	beq.n	3950 <settings_fcb_save+0x88>
		loc2 = loc1;
    3994:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
    3998:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    399c:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
    39a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    39a4:	f8de 3000 	ldr.w	r3, [lr]
    39a8:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
    39ac:	a913      	add	r1, sp, #76	; 0x4c
    39ae:	4628      	mov	r0, r5
    39b0:	f01e ffd9 	bl	22966 <fcb_getnext>
    39b4:	b1f0      	cbz	r0, 39f4 <settings_fcb_save+0x12c>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
    39b6:	aa13      	add	r2, sp, #76	; 0x4c
    39b8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    39bc:	4628      	mov	r0, r5
    39be:	f7ff fb99 	bl	30f4 <fcb_append>
		if (rc) {
    39c2:	4603      	mov	r3, r0
    39c4:	2800      	cmp	r0, #0
    39c6:	d1c3      	bne.n	3950 <settings_fcb_save+0x88>
		rc = settings_line_entry_copy(&loc2, 0, &loc1, 0,
    39c8:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    39cc:	9200      	str	r2, [sp, #0]
    39ce:	4601      	mov	r1, r0
    39d0:	aa0e      	add	r2, sp, #56	; 0x38
    39d2:	a813      	add	r0, sp, #76	; 0x4c
    39d4:	f7ff feb6 	bl	3744 <settings_line_entry_copy>
		if (rc) {
    39d8:	2800      	cmp	r0, #0
    39da:	d1b9      	bne.n	3950 <settings_fcb_save+0x88>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
    39dc:	a913      	add	r1, sp, #76	; 0x4c
    39de:	4628      	mov	r0, r5
    39e0:	f01e fd49 	bl	22476 <fcb_append_finish>
		if (rc != 0) {
    39e4:	4602      	mov	r2, r0
    39e6:	2800      	cmp	r0, #0
    39e8:	d0b2      	beq.n	3950 <settings_fcb_save+0x88>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
    39ea:	2145      	movs	r1, #69	; 0x45
    39ec:	4648      	mov	r0, r9
    39ee:	f01e fa6c 	bl	21eca <printk>
    39f2:	e7ad      	b.n	3950 <settings_fcb_save+0x88>
			rc = settings_line_name_read(name2, sizeof(name2),
    39f4:	ab13      	add	r3, sp, #76	; 0x4c
    39f6:	aa04      	add	r2, sp, #16
    39f8:	2149      	movs	r1, #73	; 0x49
    39fa:	a82b      	add	r0, sp, #172	; 0xac
    39fc:	f01f f8fb 	bl	22bf6 <settings_line_name_read>
			if (rc) {
    3a00:	2800      	cmp	r0, #0
    3a02:	d1d3      	bne.n	39ac <settings_fcb_save+0xe4>
			if ((val1_off == val2_off) &&
    3a04:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    3a08:	429a      	cmp	r2, r3
    3a0a:	d1cf      	bne.n	39ac <settings_fcb_save+0xe4>
			    !memcmp(name1, name2, val1_off)) {
    3a0c:	a92b      	add	r1, sp, #172	; 0xac
    3a0e:	a818      	add	r0, sp, #96	; 0x60
    3a10:	f020 fb76 	bl	24100 <memcmp>
			if ((val1_off == val2_off) &&
    3a14:	2800      	cmp	r0, #0
    3a16:	d1c9      	bne.n	39ac <settings_fcb_save+0xe4>
    3a18:	e79a      	b.n	3950 <settings_fcb_save+0x88>
	if (rc) {
    3a1a:	2800      	cmp	r0, #0
    3a1c:	f47f af6d 	bne.w	38fa <settings_fcb_save+0x32>
	loc.fap = cf->cf_fcb.fap;
    3a20:	6c32      	ldr	r2, [r6, #64]	; 0x40
    3a22:	920d      	str	r2, [sp, #52]	; 0x34
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
    3a24:	f8cd 9000 	str.w	r9, [sp]
    3a28:	4642      	mov	r2, r8
    3a2a:	4651      	mov	r1, sl
    3a2c:	4638      	mov	r0, r7
    3a2e:	f7ff fe1d 	bl	366c <settings_line_write>
	if (rc != -EIO) {
    3a32:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
    3a34:	4604      	mov	r4, r0
	if (rc != -EIO) {
    3a36:	d006      	beq.n	3a46 <settings_fcb_save+0x17e>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
    3a38:	4649      	mov	r1, r9
    3a3a:	4628      	mov	r0, r5
    3a3c:	f01e fd1b 	bl	22476 <fcb_append_finish>
			rc = i;
    3a40:	2c00      	cmp	r4, #0
    3a42:	bf08      	it	eq
    3a44:	4604      	moveq	r4, r0
		return 0;
	}
	return settings_fcb_save_priv(cs, name, (char *)value, val_len);
}
    3a46:	4620      	mov	r0, r4
    3a48:	b03f      	add	sp, #252	; 0xfc
    3a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a4e:	bf00      	nop
    3a50:	00022c17 	.word	0x00022c17
    3a54:	0002a256 	.word	0x0002a256
    3a58:	0002a230 	.word	0x0002a230

00003a5c <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
    3a5c:	2301      	movs	r3, #1
{
    3a5e:	b570      	push	{r4, r5, r6, lr}
    3a60:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
    3a62:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
    3a64:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(FLASH_AREA_ID(storage), &cf->cf_fcb);
    3a66:	f100 0608 	add.w	r6, r0, #8
    3a6a:	4631      	mov	r1, r6
    3a6c:	2003      	movs	r0, #3
    3a6e:	f01e fe06 	bl	2267e <fcb_init>
		if (rc) {
    3a72:	4605      	mov	r5, r0
    3a74:	b9b0      	cbnz	r0, 3aa4 <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
    3a76:	4630      	mov	r0, r6
    3a78:	f01e fd67 	bl	2254a <fcb_free_sector_cnt>
    3a7c:	2800      	cmp	r0, #0
    3a7e:	dc0a      	bgt.n	3a96 <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
    3a80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
    3a82:	6c20      	ldr	r0, [r4, #64]	; 0x40
    3a84:	e9d3 1200 	ldrd	r1, r2, [r3]
    3a88:	f01f f82a 	bl	22ae0 <flash_area_erase>
			if (rc) {
    3a8c:	2800      	cmp	r0, #0
    3a8e:	d0ec      	beq.n	3a6a <settings_fcb_src+0xe>
				return -EIO;
    3a90:	f06f 0504 	mvn.w	r5, #4
    3a94:	e004      	b.n	3aa0 <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
    3a96:	4b05      	ldr	r3, [pc, #20]	; (3aac <settings_fcb_src+0x50>)
    3a98:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
    3a9a:	4620      	mov	r0, r4
    3a9c:	f7ff fc34 	bl	3308 <settings_src_register>
}
    3aa0:	4628      	mov	r0, r5
    3aa2:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    3aa4:	f06f 0515 	mvn.w	r5, #21
    3aa8:	e7fa      	b.n	3aa0 <settings_fcb_src+0x44>
    3aaa:	bf00      	nop
    3aac:	0002905c 	.word	0x0002905c

00003ab0 <settings_mount_fcb_backend>:
{
	uint8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
    3ab0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    3ab4:	4a02      	ldr	r2, [pc, #8]	; (3ac0 <settings_mount_fcb_backend+0x10>)
    3ab6:	4903      	ldr	r1, [pc, #12]	; (3ac4 <settings_mount_fcb_backend+0x14>)
    3ab8:	4803      	ldr	r0, [pc, #12]	; (3ac8 <settings_mount_fcb_backend+0x18>)
    3aba:	f7ff be7b 	b.w	37b4 <settings_line_io_init>
    3abe:	bf00      	nop
    3ac0:	00022c93 	.word	0x00022c93
    3ac4:	00022c97 	.word	0x00022c97
    3ac8:	00022cab 	.word	0x00022cab

00003acc <settings_backend_init>:
}

int settings_backend_init(void)
{
    3acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
		settings_fcb_area[CONFIG_SETTINGS_FCB_NUM_AREAS + 1];
	static struct settings_fcb config_init_settings_fcb = {
		.cf_fcb.f_magic = CONFIG_SETTINGS_FCB_MAGIC,
		.cf_fcb.f_sectors = settings_fcb_area,
	};
	uint32_t cnt = sizeof(settings_fcb_area) /
    3ace:	2309      	movs	r3, #9
		    sizeof(settings_fcb_area[0]);
	int rc;
	const struct flash_area *fap;

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
    3ad0:	4a22      	ldr	r2, [pc, #136]	; (3b5c <settings_backend_init+0x90>)
	uint32_t cnt = sizeof(settings_fcb_area) /
    3ad2:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
    3ad4:	4669      	mov	r1, sp
    3ad6:	2003      	movs	r0, #3
    3ad8:	f7ff fbca 	bl	3270 <flash_area_get_sectors>
				    settings_fcb_area);
	if (rc == -ENODEV) {
    3adc:	f110 0f13 	cmn.w	r0, #19
    3ae0:	d03a      	beq.n	3b58 <settings_backend_init+0x8c>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    3ae2:	b138      	cbz	r0, 3af4 <settings_backend_init+0x28>
    3ae4:	300c      	adds	r0, #12
    3ae6:	d005      	beq.n	3af4 <settings_backend_init+0x28>
		k_panic();
    3ae8:	4040      	eors	r0, r0
    3aea:	f380 8811 	msr	BASEPRI, r0
    3aee:	f04f 0004 	mov.w	r0, #4
    3af2:	df02      	svc	2
	}

	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
    3af4:	4c1a      	ldr	r4, [pc, #104]	; (3b60 <settings_backend_init+0x94>)
    3af6:	9b00      	ldr	r3, [sp, #0]
    3af8:	7363      	strb	r3, [r4, #13]

	rc = settings_fcb_src(&config_init_settings_fcb);
    3afa:	4620      	mov	r0, r4
    3afc:	f7ff ffae 	bl	3a5c <settings_fcb_src>

	if (rc != 0) {
    3b00:	b308      	cbz	r0, 3b46 <settings_backend_init+0x7a>
		rc = flash_area_open(FLASH_AREA_ID(storage), &fap);
    3b02:	a901      	add	r1, sp, #4
    3b04:	2003      	movs	r0, #3
    3b06:	f7ff fb9f 	bl	3248 <flash_area_open>

		if (rc == 0) {
    3b0a:	4601      	mov	r1, r0
    3b0c:	b160      	cbz	r0, 3b28 <settings_backend_init+0x5c>
			rc = flash_area_erase(fap, 0, fap->fa_size);
			flash_area_close(fap);
		}

		if (rc != 0) {
			k_panic();
    3b0e:	4040      	eors	r0, r0
    3b10:	f380 8811 	msr	BASEPRI, r0
    3b14:	f04f 0004 	mov.w	r0, #4
    3b18:	df02      	svc	2
			rc = settings_fcb_src(&config_init_settings_fcb);
		}
	}

	if (rc != 0) {
		k_panic();
    3b1a:	4040      	eors	r0, r0
    3b1c:	f380 8811 	msr	BASEPRI, r0
    3b20:	f04f 0004 	mov.w	r0, #4
    3b24:	df02      	svc	2
    3b26:	e00e      	b.n	3b46 <settings_backend_init+0x7a>
			rc = flash_area_erase(fap, 0, fap->fa_size);
    3b28:	9801      	ldr	r0, [sp, #4]
    3b2a:	6882      	ldr	r2, [r0, #8]
    3b2c:	f01e ffd8 	bl	22ae0 <flash_area_erase>
    3b30:	4605      	mov	r5, r0
			flash_area_close(fap);
    3b32:	9801      	ldr	r0, [sp, #4]
    3b34:	f01e ff8d 	bl	22a52 <flash_area_close>
		if (rc != 0) {
    3b38:	2d00      	cmp	r5, #0
    3b3a:	d1e8      	bne.n	3b0e <settings_backend_init+0x42>
			rc = settings_fcb_src(&config_init_settings_fcb);
    3b3c:	4620      	mov	r0, r4
    3b3e:	f7ff ff8d 	bl	3a5c <settings_fcb_src>
	if (rc != 0) {
    3b42:	2800      	cmp	r0, #0
    3b44:	d1e9      	bne.n	3b1a <settings_backend_init+0x4e>
	cf->cf_store.cs_itf = &settings_fcb_itf;
    3b46:	4b07      	ldr	r3, [pc, #28]	; (3b64 <settings_backend_init+0x98>)
	settings_dst_register(&cf->cf_store);
    3b48:	4805      	ldr	r0, [pc, #20]	; (3b60 <settings_backend_init+0x94>)
	cf->cf_store.cs_itf = &settings_fcb_itf;
    3b4a:	6063      	str	r3, [r4, #4]
	settings_dst_register(&cf->cf_store);
    3b4c:	f7ff fbea 	bl	3324 <settings_dst_register>

	if (rc != 0) {
		k_panic();
	}

	settings_mount_fcb_backend(&config_init_settings_fcb);
    3b50:	4803      	ldr	r0, [pc, #12]	; (3b60 <settings_backend_init+0x94>)
    3b52:	f7ff ffad 	bl	3ab0 <settings_mount_fcb_backend>

	return rc;
    3b56:	2000      	movs	r0, #0
}
    3b58:	b003      	add	sp, #12
    3b5a:	bd30      	pop	{r4, r5, pc}
    3b5c:	200022a0 	.word	0x200022a0
    3b60:	20000540 	.word	0x20000540
    3b64:	0002905c 	.word	0x0002905c

00003b68 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    3b68:	b508      	push	{r3, lr}
    3b6a:	4604      	mov	r4, r0
	__asm__ volatile(
    3b6c:	f04f 0220 	mov.w	r2, #32
    3b70:	f3ef 8311 	mrs	r3, BASEPRI
    3b74:	f382 8811 	msr	BASEPRI, r2
    3b78:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    3b7c:	f01f f93b 	bl	22df6 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    3b80:	4620      	mov	r0, r4
    3b82:	f001 faf3 	bl	516c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    3b86:	4803      	ldr	r0, [pc, #12]	; (3b94 <sys_reboot+0x2c>)
    3b88:	f01e f99f 	bl	21eca <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3b8c:	f000 feec 	bl	4968 <arch_cpu_idle>
    3b90:	e7fc      	b.n	3b8c <sys_reboot+0x24>
    3b92:	bf00      	nop
    3b94:	0002a27b 	.word	0x0002a27b

00003b98 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3b9c:	4c0e      	ldr	r4, [pc, #56]	; (3bd8 <onoff_start+0x40>)
    3b9e:	1b05      	subs	r5, r0, r4
    3ba0:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    3ba4:	250c      	movs	r5, #12
    3ba6:	435d      	muls	r5, r3
{
    3ba8:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    3baa:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
    3bae:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    3bb0:	4420      	add	r0, r4
    3bb2:	2140      	movs	r1, #64	; 0x40
    3bb4:	f01f f891 	bl	22cda <set_starting_state>
	if (err < 0) {
    3bb8:	1e01      	subs	r1, r0, #0
    3bba:	db08      	blt.n	3bce <onoff_start+0x36>
	subdata->cb = cb;
    3bbc:	4b07      	ldr	r3, [pc, #28]	; (3bdc <onoff_start+0x44>)
    3bbe:	442c      	add	r4, r5
	subdata->user_data = user_data;
    3bc0:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    3bc4:	4b06      	ldr	r3, [pc, #24]	; (3be0 <onoff_start+0x48>)
    3bc6:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    3bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    3bcc:	4718      	bx	r3
		notify(mgr, err);
    3bce:	4638      	mov	r0, r7
    3bd0:	4633      	mov	r3, r6
}
    3bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    3bd6:	4718      	bx	r3
    3bd8:	200022f8 	.word	0x200022f8
    3bdc:	00022d3d 	.word	0x00022d3d
    3be0:	00029080 	.word	0x00029080

00003be4 <get_status>:
{
    3be4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3be6:	b2cc      	uxtb	r4, r1
    3be8:	2c01      	cmp	r4, #1
{
    3bea:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3bec:	d908      	bls.n	3c00 <get_status+0x1c>
    3bee:	4908      	ldr	r1, [pc, #32]	; (3c10 <get_status+0x2c>)
    3bf0:	4808      	ldr	r0, [pc, #32]	; (3c14 <get_status+0x30>)
    3bf2:	227e      	movs	r2, #126	; 0x7e
    3bf4:	f01e f969 	bl	21eca <printk>
    3bf8:	217e      	movs	r1, #126	; 0x7e
    3bfa:	4805      	ldr	r0, [pc, #20]	; (3c10 <get_status+0x2c>)
    3bfc:	f01e fc17 	bl	2242e <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3c00:	68eb      	ldr	r3, [r5, #12]
    3c02:	210c      	movs	r1, #12
    3c04:	fb04 3101 	mla	r1, r4, r1, r3
    3c08:	6c88      	ldr	r0, [r1, #72]	; 0x48
}
    3c0a:	f000 0007 	and.w	r0, r0, #7
    3c0e:	bd38      	pop	{r3, r4, r5, pc}
    3c10:	0002a2a4 	.word	0x0002a2a4
    3c14:	0002a026 	.word	0x0002a026

00003c18 <stop>:
{
    3c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c1a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3c1c:	2c01      	cmp	r4, #1
{
    3c1e:	4605      	mov	r5, r0
    3c20:	4617      	mov	r7, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    3c22:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3c24:	d90a      	bls.n	3c3c <stop+0x24>
    3c26:	4918      	ldr	r1, [pc, #96]	; (3c88 <stop+0x70>)
    3c28:	4818      	ldr	r0, [pc, #96]	; (3c8c <stop+0x74>)
    3c2a:	f240 1253 	movw	r2, #339	; 0x153
    3c2e:	f01e f94c 	bl	21eca <printk>
    3c32:	f240 1153 	movw	r1, #339	; 0x153
    3c36:	4814      	ldr	r0, [pc, #80]	; (3c88 <stop+0x70>)
    3c38:	f01e fbf9 	bl	2242e <assert_post_action>
    3c3c:	f04f 0320 	mov.w	r3, #32
    3c40:	f3ef 8111 	mrs	r1, BASEPRI
    3c44:	f383 8811 	msr	BASEPRI, r3
    3c48:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3c4c:	230c      	movs	r3, #12
    3c4e:	fb03 6204 	mla	r2, r3, r4, r6
    3c52:	6c92      	ldr	r2, [r2, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3c54:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    3c58:	d001      	beq.n	3c5e <stop+0x46>
    3c5a:	4297      	cmp	r7, r2
    3c5c:	d111      	bne.n	3c82 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    3c5e:	fb03 6304 	mla	r3, r3, r4, r6
    3c62:	2201      	movs	r2, #1
    3c64:	649a      	str	r2, [r3, #72]	; 0x48
	int err = 0;
    3c66:	2000      	movs	r0, #0
	__asm__ volatile(
    3c68:	f381 8811 	msr	BASEPRI, r1
    3c6c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3c70:	b930      	cbnz	r0, 3c80 <stop+0x68>
	get_sub_config(dev, type)->stop();
    3c72:	686b      	ldr	r3, [r5, #4]
    3c74:	220c      	movs	r2, #12
    3c76:	fb02 3404 	mla	r4, r2, r4, r3
    3c7a:	6863      	ldr	r3, [r4, #4]
    3c7c:	4798      	blx	r3
	return 0;
    3c7e:	2000      	movs	r0, #0
}
    3c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    3c82:	f04f 30ff 	mov.w	r0, #4294967295
    3c86:	e7ef      	b.n	3c68 <stop+0x50>
    3c88:	0002a2a4 	.word	0x0002a2a4
    3c8c:	0002a026 	.word	0x0002a026

00003c90 <onoff_stop>:
{
    3c90:	b570      	push	{r4, r5, r6, lr}
    3c92:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3c94:	4906      	ldr	r1, [pc, #24]	; (3cb0 <onoff_stop+0x20>)
    3c96:	1a41      	subs	r1, r0, r1
{
    3c98:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3c9a:	1149      	asrs	r1, r1, #5
    3c9c:	2240      	movs	r2, #64	; 0x40
    3c9e:	4805      	ldr	r0, [pc, #20]	; (3cb4 <onoff_stop+0x24>)
    3ca0:	f7ff ffba 	bl	3c18 <stop>
	notify(mgr, res);
    3ca4:	462b      	mov	r3, r5
    3ca6:	4601      	mov	r1, r0
    3ca8:	4620      	mov	r0, r4
}
    3caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3cae:	4718      	bx	r3
    3cb0:	200022f8 	.word	0x200022f8
    3cb4:	20000e1c 	.word	0x20000e1c

00003cb8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3cb8:	2200      	movs	r2, #0
{
    3cba:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3cbc:	2101      	movs	r1, #1
{
    3cbe:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3cc0:	4610      	mov	r0, r2
    3cc2:	f000 fdc5 	bl	4850 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    3cc6:	2000      	movs	r0, #0
    3cc8:	f000 fd90 	bl	47ec <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3ccc:	480f      	ldr	r0, [pc, #60]	; (3d0c <clk_init+0x54>)
    3cce:	f019 ff79 	bl	1dbc4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3cd2:	4b0f      	ldr	r3, [pc, #60]	; (3d10 <clk_init+0x58>)
    3cd4:	4298      	cmp	r0, r3
    3cd6:	d115      	bne.n	3d04 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3cd8:	f019 ff94 	bl	1dc04 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3cdc:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3cde:	490d      	ldr	r1, [pc, #52]	; (3d14 <clk_init+0x5c>)
    3ce0:	4630      	mov	r0, r6
    3ce2:	f01e f94d 	bl	21f80 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3ce6:	2800      	cmp	r0, #0
    3ce8:	db0b      	blt.n	3d02 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3cea:	2501      	movs	r5, #1
    3cec:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    3cee:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3cf0:	4908      	ldr	r1, [pc, #32]	; (3d14 <clk_init+0x5c>)
    3cf2:	f104 0020 	add.w	r0, r4, #32
    3cf6:	f01e f943 	bl	21f80 <onoff_manager_init>
		if (err < 0) {
    3cfa:	2800      	cmp	r0, #0
    3cfc:	db01      	blt.n	3d02 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3cfe:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    3d00:	2000      	movs	r0, #0
}
    3d02:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3d04:	f06f 0004 	mvn.w	r0, #4
    3d08:	e7fb      	b.n	3d02 <clk_init+0x4a>
    3d0a:	bf00      	nop
    3d0c:	00003d4d 	.word	0x00003d4d
    3d10:	0bad0000 	.word	0x0bad0000
    3d14:	00029098 	.word	0x00029098

00003d18 <clkstarted_handle.constprop.13>:
static void clkstarted_handle(const struct device *dev,
    3d18:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3d1a:	230c      	movs	r3, #12
    3d1c:	4809      	ldr	r0, [pc, #36]	; (3d44 <clkstarted_handle.constprop.13+0x2c>)
    3d1e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    3d20:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3d22:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3d24:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    3d28:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3d2a:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    3d2c:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    3d2e:	4418      	add	r0, r3
    3d30:	f01e fff1 	bl	22d16 <set_on_state>
	if (callback) {
    3d34:	b12d      	cbz	r5, 3d42 <clkstarted_handle.constprop.13+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3d36:	4632      	mov	r2, r6
    3d38:	462b      	mov	r3, r5
    3d3a:	4803      	ldr	r0, [pc, #12]	; (3d48 <clkstarted_handle.constprop.13+0x30>)
}
    3d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3d40:	4718      	bx	r3
}
    3d42:	bd70      	pop	{r4, r5, r6, pc}
    3d44:	200022f8 	.word	0x200022f8
    3d48:	20000e1c 	.word	0x20000e1c

00003d4c <clock_event_handler>:
	switch (event) {
    3d4c:	2801      	cmp	r0, #1
{
    3d4e:	b508      	push	{r3, lr}
	switch (event) {
    3d50:	d010      	beq.n	3d74 <clock_event_handler+0x28>
    3d52:	b150      	cbz	r0, 3d6a <clock_event_handler+0x1e>
    3d54:	2803      	cmp	r0, #3
    3d56:	d011      	beq.n	3d7c <clock_event_handler+0x30>
		__ASSERT_NO_MSG(0);
    3d58:	490f      	ldr	r1, [pc, #60]	; (3d98 <clock_event_handler+0x4c>)
    3d5a:	4810      	ldr	r0, [pc, #64]	; (3d9c <clock_event_handler+0x50>)
    3d5c:	f240 226a 	movw	r2, #618	; 0x26a
    3d60:	f01e f8b3 	bl	21eca <printk>
    3d64:	f240 216a 	movw	r1, #618	; 0x26a
    3d68:	e010      	b.n	3d8c <clock_event_handler+0x40>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3d6a:	4b0d      	ldr	r3, [pc, #52]	; (3da0 <clock_event_handler+0x54>)
    3d6c:	6c98      	ldr	r0, [r3, #72]	; 0x48
    3d6e:	f010 0007 	ands.w	r0, r0, #7
    3d72:	d110      	bne.n	3d96 <clock_event_handler+0x4a>
}
    3d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3d78:	f7ff bfce 	b.w	3d18 <clkstarted_handle.constprop.13>
			__ASSERT_NO_MSG(false);
    3d7c:	4906      	ldr	r1, [pc, #24]	; (3d98 <clock_event_handler+0x4c>)
    3d7e:	4807      	ldr	r0, [pc, #28]	; (3d9c <clock_event_handler+0x50>)
    3d80:	f240 2266 	movw	r2, #614	; 0x266
    3d84:	f01e f8a1 	bl	21eca <printk>
    3d88:	f240 2166 	movw	r1, #614	; 0x266
		__ASSERT_NO_MSG(0);
    3d8c:	4802      	ldr	r0, [pc, #8]	; (3d98 <clock_event_handler+0x4c>)
}
    3d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    3d92:	f01e bb4c 	b.w	2242e <assert_post_action>
}
    3d96:	bd08      	pop	{r3, pc}
    3d98:	0002a2a4 	.word	0x0002a2a4
    3d9c:	0002a026 	.word	0x0002a026
    3da0:	200022f8 	.word	0x200022f8

00003da4 <generic_hfclk_start>:
{
    3da4:	b508      	push	{r3, lr}
	__asm__ volatile(
    3da6:	f04f 0320 	mov.w	r3, #32
    3daa:	f3ef 8111 	mrs	r1, BASEPRI
    3dae:	f383 8811 	msr	BASEPRI, r3
    3db2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3db6:	4a12      	ldr	r2, [pc, #72]	; (3e00 <generic_hfclk_start+0x5c>)
    3db8:	6813      	ldr	r3, [r2, #0]
    3dba:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3dbe:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3dc2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3dc4:	d00c      	beq.n	3de0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3dca:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3dce:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3dd2:	f013 0301 	ands.w	r3, r3, #1
    3dd6:	d003      	beq.n	3de0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3dd8:	480a      	ldr	r0, [pc, #40]	; (3e04 <generic_hfclk_start+0x60>)
    3dda:	f01e ff9c 	bl	22d16 <set_on_state>
			already_started = true;
    3dde:	2301      	movs	r3, #1
	__asm__ volatile(
    3de0:	f381 8811 	msr	BASEPRI, r1
    3de4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3de8:	b123      	cbz	r3, 3df4 <generic_hfclk_start+0x50>
		clkstarted_handle(CLOCK_DEVICE,
    3dea:	2000      	movs	r0, #0
}
    3dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3df0:	f7ff bf92 	b.w	3d18 <clkstarted_handle.constprop.13>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3df4:	2001      	movs	r0, #1
}
    3df6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3dfa:	f019 bf1f 	b.w	1dc3c <nrfx_clock_start>
    3dfe:	bf00      	nop
    3e00:	20002350 	.word	0x20002350
    3e04:	20002340 	.word	0x20002340

00003e08 <generic_hfclk_stop>:
    3e08:	4b09      	ldr	r3, [pc, #36]	; (3e30 <generic_hfclk_stop+0x28>)
    3e0a:	f3bf 8f5b 	dmb	ish
    3e0e:	e853 2f00 	ldrex	r2, [r3]
    3e12:	f022 0102 	bic.w	r1, r2, #2
    3e16:	e843 1000 	strex	r0, r1, [r3]
    3e1a:	2800      	cmp	r0, #0
    3e1c:	d1f7      	bne.n	3e0e <generic_hfclk_stop+0x6>
    3e1e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3e22:	07d3      	lsls	r3, r2, #31
    3e24:	d402      	bmi.n	3e2c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3e26:	2001      	movs	r0, #1
    3e28:	f019 bf56 	b.w	1dcd8 <nrfx_clock_stop>
}
    3e2c:	4770      	bx	lr
    3e2e:	bf00      	nop
    3e30:	20002350 	.word	0x20002350

00003e34 <api_blocking_start>:
{
    3e34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3e36:	2200      	movs	r2, #0
    3e38:	2301      	movs	r3, #1
    3e3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    3e3e:	ab04      	add	r3, sp, #16
    3e40:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3e44:	4a09      	ldr	r2, [pc, #36]	; (3e6c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3e46:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3e4a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3e4c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3e50:	f01e ff86 	bl	22d60 <api_start>
	if (err < 0) {
    3e54:	2800      	cmp	r0, #0
    3e56:	db05      	blt.n	3e64 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    3e58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3e5c:	2300      	movs	r3, #0
    3e5e:	4668      	mov	r0, sp
    3e60:	f01b ff48 	bl	1fcf4 <z_impl_k_sem_take>
}
    3e64:	b007      	add	sp, #28
    3e66:	f85d fb04 	ldr.w	pc, [sp], #4
    3e6a:	bf00      	nop
    3e6c:	00022d5b 	.word	0x00022d5b

00003e70 <z_nrf_clock_control_get_onoff>:
}
    3e70:	4b02      	ldr	r3, [pc, #8]	; (3e7c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    3e72:	b2c0      	uxtb	r0, r0
}
    3e74:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    3e78:	4770      	bx	lr
    3e7a:	bf00      	nop
    3e7c:	200022f8 	.word	0x200022f8

00003e80 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3e80:	4b09      	ldr	r3, [pc, #36]	; (3ea8 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    3e82:	f3bf 8f5b 	dmb	ish
    3e86:	e853 2f00 	ldrex	r2, [r3]
    3e8a:	f042 0101 	orr.w	r1, r2, #1
    3e8e:	e843 1000 	strex	r0, r1, [r3]
    3e92:	2800      	cmp	r0, #0
    3e94:	d1f7      	bne.n	3e86 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    3e96:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    3e9a:	0793      	lsls	r3, r2, #30
    3e9c:	d402      	bmi.n	3ea4 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3e9e:	2001      	movs	r0, #1
    3ea0:	f019 becc 	b.w	1dc3c <nrfx_clock_start>
}
    3ea4:	4770      	bx	lr
    3ea6:	bf00      	nop
    3ea8:	20002350 	.word	0x20002350

00003eac <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3eac:	4b09      	ldr	r3, [pc, #36]	; (3ed4 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    3eae:	f3bf 8f5b 	dmb	ish
    3eb2:	e853 2f00 	ldrex	r2, [r3]
    3eb6:	f022 0101 	bic.w	r1, r2, #1
    3eba:	e843 1000 	strex	r0, r1, [r3]
    3ebe:	2800      	cmp	r0, #0
    3ec0:	d1f7      	bne.n	3eb2 <z_nrf_clock_bt_ctlr_hf_release+0x6>
    3ec2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    3ec6:	0793      	lsls	r3, r2, #30
    3ec8:	d402      	bmi.n	3ed0 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3eca:	2001      	movs	r0, #1
    3ecc:	f019 bf04 	b.w	1dcd8 <nrfx_clock_stop>
}
    3ed0:	4770      	bx	lr
    3ed2:	bf00      	nop
    3ed4:	20002350 	.word	0x20002350

00003ed8 <z_nrf_clock_control_lf_on>:
{
    3ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3edc:	4947      	ldr	r1, [pc, #284]	; (3ffc <z_nrf_clock_control_lf_on+0x124>)
    3ede:	f3bf 8f5b 	dmb	ish
    3ee2:	4605      	mov	r5, r0
    3ee4:	2201      	movs	r2, #1
    3ee6:	e851 3f00 	ldrex	r3, [r1]
    3eea:	e841 2000 	strex	r0, r2, [r1]
    3eee:	2800      	cmp	r0, #0
    3ef0:	d1f9      	bne.n	3ee6 <z_nrf_clock_control_lf_on+0xe>
    3ef2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3ef6:	b99b      	cbnz	r3, 3f20 <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3ef8:	4941      	ldr	r1, [pc, #260]	; (4000 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    3efa:	4842      	ldr	r0, [pc, #264]	; (4004 <z_nrf_clock_control_lf_on+0x12c>)
    3efc:	604b      	str	r3, [r1, #4]
    3efe:	60cb      	str	r3, [r1, #12]
    3f00:	608a      	str	r2, [r1, #8]
    3f02:	f7fe fb2f 	bl	2564 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    3f06:	2800      	cmp	r0, #0
    3f08:	da0a      	bge.n	3f20 <z_nrf_clock_control_lf_on+0x48>
    3f0a:	493f      	ldr	r1, [pc, #252]	; (4008 <z_nrf_clock_control_lf_on+0x130>)
    3f0c:	483f      	ldr	r0, [pc, #252]	; (400c <z_nrf_clock_control_lf_on+0x134>)
    3f0e:	f240 2226 	movw	r2, #550	; 0x226
    3f12:	f01d ffda 	bl	21eca <printk>
    3f16:	f240 2126 	movw	r1, #550	; 0x226
    3f1a:	483b      	ldr	r0, [pc, #236]	; (4008 <z_nrf_clock_control_lf_on+0x130>)
    3f1c:	f01e fa87 	bl	2242e <assert_post_action>
	switch (start_mode) {
    3f20:	b395      	cbz	r5, 3f88 <z_nrf_clock_control_lf_on+0xb0>
    3f22:	2d02      	cmp	r5, #2
    3f24:	d854      	bhi.n	3fd0 <z_nrf_clock_control_lf_on+0xf8>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3f26:	2d01      	cmp	r5, #1
    3f28:	d107      	bne.n	3f3a <z_nrf_clock_control_lf_on+0x62>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3f2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f2e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3f32:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3f36:	2b01      	cmp	r3, #1
    3f38:	d026      	beq.n	3f88 <z_nrf_clock_control_lf_on+0xb0>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3f3a:	f024 fc11 	bl	28760 <k_is_in_isr>
    3f3e:	b918      	cbnz	r0, 3f48 <z_nrf_clock_control_lf_on+0x70>
	return !z_sys_post_kernel;
    3f40:	4b33      	ldr	r3, [pc, #204]	; (4010 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
    3f42:	781b      	ldrb	r3, [r3, #0]
    3f44:	2b00      	cmp	r3, #0
    3f46:	d150      	bne.n	3fea <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
    3f48:	f04f 0320 	mov.w	r3, #32
    3f4c:	f3ef 8911 	mrs	r9, BASEPRI
    3f50:	f383 8811 	msr	BASEPRI, r3
    3f54:	f3bf 8f6f 	isb	sy
    3f58:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3f5a:	4e2e      	ldr	r6, [pc, #184]	; (4014 <z_nrf_clock_control_lf_on+0x13c>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f5c:	4f2e      	ldr	r7, [pc, #184]	; (4018 <z_nrf_clock_control_lf_on+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f5e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 401c <z_nrf_clock_control_lf_on+0x144>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3f62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3f66:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3f6a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3f6e:	03d2      	lsls	r2, r2, #15
    3f70:	d50c      	bpl.n	3f8c <z_nrf_clock_control_lf_on+0xb4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3f72:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3f76:	2b01      	cmp	r3, #1
    3f78:	d001      	beq.n	3f7e <z_nrf_clock_control_lf_on+0xa6>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3f7a:	2d01      	cmp	r5, #1
    3f7c:	d106      	bne.n	3f8c <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
    3f7e:	b30c      	cbz	r4, 3fc4 <z_nrf_clock_control_lf_on+0xec>
	__asm__ volatile(
    3f80:	f389 8811 	msr	BASEPRI, r9
    3f84:	f3bf 8f6f 	isb	sy
}
    3f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    3f8c:	b1ac      	cbz	r4, 3fba <z_nrf_clock_control_lf_on+0xe2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3f8e:	4648      	mov	r0, r9
    3f90:	f000 fcf8 	bl	4984 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3f94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3f98:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3f9c:	2b00      	cmp	r3, #0
    3f9e:	d1e0      	bne.n	3f62 <z_nrf_clock_control_lf_on+0x8a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3fa0:	6831      	ldr	r1, [r6, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    3fa2:	2900      	cmp	r1, #0
    3fa4:	d0dd      	beq.n	3f62 <z_nrf_clock_control_lf_on+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3fa6:	6033      	str	r3, [r6, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3fa8:	6833      	ldr	r3, [r6, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    3faa:	2301      	movs	r3, #1
    3fac:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    3fb0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fb4:	f8c8 3000 	str.w	r3, [r8]
    3fb8:	e7d3      	b.n	3f62 <z_nrf_clock_control_lf_on+0x8a>
	return z_impl_k_sleep(timeout);
    3fba:	2100      	movs	r1, #0
    3fbc:	2021      	movs	r0, #33	; 0x21
    3fbe:	f01b fe27 	bl	1fc10 <z_impl_k_sleep>
    3fc2:	e7e7      	b.n	3f94 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
    3fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fc8:	2202      	movs	r2, #2
    3fca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    3fce:	e7db      	b.n	3f88 <z_nrf_clock_control_lf_on+0xb0>
		__ASSERT_NO_MSG(false);
    3fd0:	490d      	ldr	r1, [pc, #52]	; (4008 <z_nrf_clock_control_lf_on+0x130>)
    3fd2:	480e      	ldr	r0, [pc, #56]	; (400c <z_nrf_clock_control_lf_on+0x134>)
    3fd4:	f44f 720e 	mov.w	r2, #568	; 0x238
    3fd8:	f01d ff77 	bl	21eca <printk>
    3fdc:	f44f 710e 	mov.w	r1, #568	; 0x238
    3fe0:	4809      	ldr	r0, [pc, #36]	; (4008 <z_nrf_clock_control_lf_on+0x130>)
}
    3fe2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    3fe6:	f01e ba22 	b.w	2242e <assert_post_action>
    p_reg->INTENCLR = mask;
    3fea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fee:	2202      	movs	r2, #2
    3ff0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3ff4:	4604      	mov	r4, r0
	int key = isr_mode ? irq_lock() : 0;
    3ff6:	4681      	mov	r9, r0
    3ff8:	e7af      	b.n	3f5a <z_nrf_clock_control_lf_on+0x82>
    3ffa:	bf00      	nop
    3ffc:	20002354 	.word	0x20002354
    4000:	200022e8 	.word	0x200022e8
    4004:	20002318 	.word	0x20002318
    4008:	0002a2a4 	.word	0x0002a2a4
    400c:	0002a026 	.word	0x0002a026
    4010:	2000456e 	.word	0x2000456e
    4014:	40000104 	.word	0x40000104
    4018:	e000e100 	.word	0xe000e100
    401c:	40000008 	.word	0x40000008

00004020 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    4020:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    4022:	4c06      	ldr	r4, [pc, #24]	; (403c <z_clock_isr+0x1c>)
    4024:	4806      	ldr	r0, [pc, #24]	; (4040 <z_clock_isr+0x20>)
    4026:	4621      	mov	r1, r4
    4028:	2217      	movs	r2, #23
    402a:	f01d ff4e 	bl	21eca <printk>
    402e:	4620      	mov	r0, r4
    4030:	2117      	movs	r1, #23
}
    4032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    4036:	f01e b9fa 	b.w	2242e <assert_post_action>
    403a:	bf00      	nop
    403c:	0002a30b 	.word	0x0002a30b
    4040:	0002a026 	.word	0x0002a026

00004044 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    4044:	4a04      	ldr	r2, [pc, #16]	; (4058 <sys_clock_timeout_handler+0x14>)
    4046:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    4048:	1ac9      	subs	r1, r1, r3
    404a:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    404e:	4403      	add	r3, r0
    4050:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4052:	f01c bb6b 	b.w	2072c <z_clock_announce>
    4056:	bf00      	nop
    4058:	20002364 	.word	0x20002364

0000405c <set_absolute_alarm>:
{
    405c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4060:	0085      	lsls	r5, r0, #2
    4062:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4066:	f100 0450 	add.w	r4, r0, #80	; 0x50
    406a:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
    406e:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4070:	b2a4      	uxth	r4, r4
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    4072:	f8df 807c 	ldr.w	r8, [pc, #124]	; 40f0 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    4076:	f8d5 2540 	ldr.w	r2, [r5, #1344]	; 0x540
			cc_val = now + 2;
    407a:	f8df a078 	ldr.w	sl, [pc, #120]	; 40f4 <set_absolute_alarm+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    407e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4082:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4086:	f021 467f 	bic.w	r6, r1, #4278190080	; 0xff000000
    408a:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    408e:	4087      	lsls	r7, r0
    4090:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    4092:	f8d8 b504 	ldr.w	fp, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4096:	eba2 020b 	sub.w	r2, r2, fp
    409a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    409e:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    40a2:	2a01      	cmp	r2, #1
    p_reg->CC[ch] = cc_val;
    40a4:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    40a8:	d102      	bne.n	40b0 <set_absolute_alarm+0x54>
	z_impl_k_busy_wait(usec_to_wait);
    40aa:	2013      	movs	r0, #19
    40ac:	f024 fb5e 	bl	2876c <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    40b0:	f10b 0202 	add.w	r2, fp, #2
	return (a - b) & COUNTER_MAX;
    40b4:	1ab3      	subs	r3, r6, r2
    40b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    40ba:	4553      	cmp	r3, sl
    40bc:	bf28      	it	cs
    40be:	4616      	movcs	r6, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    40c0:	2300      	movs	r3, #0
    40c2:	6023      	str	r3, [r4, #0]
    40c4:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    40c6:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    40ca:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    40ce:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
    40d2:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    40d6:	459b      	cmp	fp, r3
    40d8:	d007      	beq.n	40ea <set_absolute_alarm+0x8e>
	return (a - b) & COUNTER_MAX;
    40da:	1af3      	subs	r3, r6, r3
    40dc:	3b02      	subs	r3, #2
    40de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    40e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
		prev_cc = cc_val;
    40e6:	4632      	mov	r2, r6
	} while ((now2 != now) &&
    40e8:	d8d3      	bhi.n	4092 <set_absolute_alarm+0x36>
}
    40ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40ee:	bf00      	nop
    40f0:	40011000 	.word	0x40011000
    40f4:	00800001 	.word	0x00800001

000040f8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    40f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    40fa:	4e10      	ldr	r6, [pc, #64]	; (413c <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    40fc:	4f10      	ldr	r7, [pc, #64]	; (4140 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    40fe:	2500      	movs	r5, #0
    4100:	4b10      	ldr	r3, [pc, #64]	; (4144 <rtc_nrf_isr+0x4c>)
    4102:	2000      	movs	r0, #0
    4104:	681c      	ldr	r4, [r3, #0]
    4106:	461a      	mov	r2, r3
    4108:	b105      	cbz	r5, 410c <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    410a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    410c:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    4110:	03c9      	lsls	r1, r1, #15
    4112:	d5fa      	bpl.n	410a <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4114:	6839      	ldr	r1, [r7, #0]
    4116:	2900      	cmp	r1, #0
    4118:	d0f7      	beq.n	410a <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    411a:	603d      	str	r5, [r7, #0]
    411c:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    411e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    4122:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    4126:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    412a:	2501      	movs	r5, #1
			if (handler) {
    412c:	b11c      	cbz	r4, 4136 <rtc_nrf_isr+0x3e>
    412e:	6018      	str	r0, [r3, #0]
				handler(chan, cc_val,
    4130:	685a      	ldr	r2, [r3, #4]
    4132:	47a0      	blx	r4
    4134:	e7e4      	b.n	4100 <rtc_nrf_isr+0x8>
    4136:	6014      	str	r4, [r2, #0]
}
    4138:	e7e7      	b.n	410a <rtc_nrf_isr+0x12>
    413a:	bf00      	nop
    413c:	40011000 	.word	0x40011000
    4140:	40011140 	.word	0x40011140
    4144:	20002358 	.word	0x20002358

00004148 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    4148:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    414a:	4d10      	ldr	r5, [pc, #64]	; (418c <z_clock_driver_init+0x44>)
    414c:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    414e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    4152:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    4156:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    415a:	4b0d      	ldr	r3, [pc, #52]	; (4190 <z_clock_driver_init+0x48>)
    415c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4160:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4164:	2101      	movs	r1, #1
    4166:	4622      	mov	r2, r4
    4168:	2011      	movs	r0, #17
    416a:	f000 fb71 	bl	4850 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    416e:	2011      	movs	r0, #17
    4170:	f000 fb3c 	bl	47ec <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4174:	4a07      	ldr	r2, [pc, #28]	; (4194 <z_clock_driver_init+0x4c>)
    4176:	2301      	movs	r3, #1
    4178:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    417a:	4a07      	ldr	r2, [pc, #28]	; (4198 <z_clock_driver_init+0x50>)
    417c:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    417e:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    4180:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    4182:	f7ff fea9 	bl	3ed8 <z_nrf_clock_control_lf_on>

	return 0;
}
    4186:	4620      	mov	r0, r4
    4188:	bd38      	pop	{r3, r4, r5, pc}
    418a:	bf00      	nop
    418c:	40011000 	.word	0x40011000
    4190:	e000e100 	.word	0xe000e100
    4194:	40011008 	.word	0x40011008
    4198:	20002360 	.word	0x20002360

0000419c <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    419c:	4b13      	ldr	r3, [pc, #76]	; (41ec <z_clock_set_timeout+0x50>)
    419e:	f1b0 3fff 	cmp.w	r0, #4294967295
    41a2:	bf08      	it	eq
    41a4:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    41a6:	3801      	subs	r0, #1
    41a8:	2800      	cmp	r0, #0
    41aa:	dd1c      	ble.n	41e6 <z_clock_set_timeout+0x4a>
    41ac:	4298      	cmp	r0, r3
    41ae:	bfa8      	it	ge
    41b0:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    41b2:	4b0f      	ldr	r3, [pc, #60]	; (41f0 <z_clock_set_timeout+0x54>)
    41b4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    41b8:	4b0e      	ldr	r3, [pc, #56]	; (41f4 <z_clock_set_timeout+0x58>)
    41ba:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    41bc:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    41be:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    41c2:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    41c6:	bf18      	it	ne
    41c8:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    41ca:	4a0b      	ldr	r2, [pc, #44]	; (41f8 <z_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    41cc:	3301      	adds	r3, #1
    41ce:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    41d0:	480a      	ldr	r0, [pc, #40]	; (41fc <z_clock_set_timeout+0x60>)
    41d2:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    41d4:	2000      	movs	r0, #0
    41d6:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    41d8:	4a04      	ldr	r2, [pc, #16]	; (41ec <z_clock_set_timeout+0x50>)
    41da:	4293      	cmp	r3, r2
    41dc:	bf94      	ite	ls
    41de:	18c9      	addls	r1, r1, r3
    41e0:	1889      	addhi	r1, r1, r2
    41e2:	f7ff bf3b 	b.w	405c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    41e6:	2000      	movs	r0, #0
    41e8:	e7e3      	b.n	41b2 <z_clock_set_timeout+0x16>
    41ea:	bf00      	nop
    41ec:	007fffff 	.word	0x007fffff
    41f0:	40011000 	.word	0x40011000
    41f4:	20002364 	.word	0x20002364
    41f8:	20002358 	.word	0x20002358
    41fc:	00004045 	.word	0x00004045

00004200 <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    4200:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4202:	f04f 0320 	mov.w	r3, #32
    4206:	f3ef 8511 	mrs	r5, BASEPRI
    420a:	f383 8811 	msr	BASEPRI, r3
    420e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4212:	4815      	ldr	r0, [pc, #84]	; (4268 <z_clock_elapsed+0x68>)
    4214:	f01b ff28 	bl	20068 <z_spin_lock_valid>
    4218:	b940      	cbnz	r0, 422c <z_clock_elapsed+0x2c>
    421a:	4914      	ldr	r1, [pc, #80]	; (426c <z_clock_elapsed+0x6c>)
    421c:	4814      	ldr	r0, [pc, #80]	; (4270 <z_clock_elapsed+0x70>)
    421e:	227c      	movs	r2, #124	; 0x7c
    4220:	f01d fe53 	bl	21eca <printk>
    4224:	217c      	movs	r1, #124	; 0x7c
    4226:	4811      	ldr	r0, [pc, #68]	; (426c <z_clock_elapsed+0x6c>)
    4228:	f01e f901 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
    422c:	480e      	ldr	r0, [pc, #56]	; (4268 <z_clock_elapsed+0x68>)
    422e:	f01b ff39 	bl	200a4 <z_spin_lock_set_owner>
    4232:	4b10      	ldr	r3, [pc, #64]	; (4274 <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4234:	480c      	ldr	r0, [pc, #48]	; (4268 <z_clock_elapsed+0x68>)
    4236:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    423a:	4b0f      	ldr	r3, [pc, #60]	; (4278 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    423c:	681b      	ldr	r3, [r3, #0]
    423e:	1ae4      	subs	r4, r4, r3
    4240:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    4244:	f01b ff1e 	bl	20084 <z_spin_unlock_valid>
    4248:	b940      	cbnz	r0, 425c <z_clock_elapsed+0x5c>
    424a:	4908      	ldr	r1, [pc, #32]	; (426c <z_clock_elapsed+0x6c>)
    424c:	4808      	ldr	r0, [pc, #32]	; (4270 <z_clock_elapsed+0x70>)
    424e:	22a7      	movs	r2, #167	; 0xa7
    4250:	f01d fe3b 	bl	21eca <printk>
    4254:	21a7      	movs	r1, #167	; 0xa7
    4256:	4805      	ldr	r0, [pc, #20]	; (426c <z_clock_elapsed+0x6c>)
    4258:	f01e f8e9 	bl	2242e <assert_post_action>
	__asm__ volatile(
    425c:	f385 8811 	msr	BASEPRI, r5
    4260:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    4264:	4620      	mov	r0, r4
    4266:	bd38      	pop	{r3, r4, r5, pc}
    4268:	20002368 	.word	0x20002368
    426c:	0002a0e8 	.word	0x0002a0e8
    4270:	0002a026 	.word	0x0002a026
    4274:	40011000 	.word	0x40011000
    4278:	20002364 	.word	0x20002364

0000427c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    427c:	4801      	ldr	r0, [pc, #4]	; (4284 <nrf_cc3xx_platform_abort_init+0x8>)
    427e:	f01c bee5 	b.w	2104c <nrf_cc3xx_platform_set_abort>
    4282:	bf00      	nop
    4284:	000290a4 	.word	0x000290a4

00004288 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4288:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    428a:	b1d0      	cbz	r0, 42c2 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    428c:	6843      	ldr	r3, [r0, #4]
    428e:	2b04      	cmp	r3, #4
    4290:	d111      	bne.n	42b6 <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4292:	2200      	movs	r2, #0
    4294:	6803      	ldr	r3, [r0, #0]
    4296:	f3bf 8f5b 	dmb	ish
    429a:	e853 1f00 	ldrex	r1, [r3]
    429e:	2901      	cmp	r1, #1
    42a0:	d103      	bne.n	42aa <mutex_unlock_platform+0x22>
    42a2:	e843 2000 	strex	r0, r2, [r3]
    42a6:	2800      	cmp	r0, #0
    42a8:	d1f7      	bne.n	429a <mutex_unlock_platform+0x12>
    42aa:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    42ae:	4807      	ldr	r0, [pc, #28]	; (42cc <mutex_unlock_platform+0x44>)
    42b0:	bf08      	it	eq
    42b2:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    42b4:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    42b6:	b13b      	cbz	r3, 42c8 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    42b8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    42ba:	f01a fab7 	bl	1e82c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    42be:	2000      	movs	r0, #0
    42c0:	e7f8      	b.n	42b4 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    42c2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    42c6:	e7f5      	b.n	42b4 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    42c8:	4801      	ldr	r0, [pc, #4]	; (42d0 <mutex_unlock_platform+0x48>)
    42ca:	e7f3      	b.n	42b4 <mutex_unlock_platform+0x2c>
    42cc:	ffff8fe9 	.word	0xffff8fe9
    42d0:	ffff8fea 	.word	0xffff8fea

000042d4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    42d4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    42d6:	4604      	mov	r4, r0
    42d8:	b918      	cbnz	r0, 42e2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    42da:	4b0d      	ldr	r3, [pc, #52]	; (4310 <mutex_free_platform+0x3c>)
    42dc:	480d      	ldr	r0, [pc, #52]	; (4314 <mutex_free_platform+0x40>)
    42de:	685b      	ldr	r3, [r3, #4]
    42e0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    42e2:	6861      	ldr	r1, [r4, #4]
    42e4:	2908      	cmp	r1, #8
    42e6:	d00d      	beq.n	4304 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    42e8:	f031 0304 	bics.w	r3, r1, #4
    42ec:	d00a      	beq.n	4304 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    42ee:	f011 0102 	ands.w	r1, r1, #2
    42f2:	d008      	beq.n	4306 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    42f4:	4621      	mov	r1, r4
    42f6:	4808      	ldr	r0, [pc, #32]	; (4318 <mutex_free_platform+0x44>)
    42f8:	f01a f976 	bl	1e5e8 <k_mem_slab_free>
        mutex->mutex = NULL;
    42fc:	2300      	movs	r3, #0
    42fe:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    4300:	2300      	movs	r3, #0
    4302:	6063      	str	r3, [r4, #4]
}
    4304:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4306:	2214      	movs	r2, #20
    4308:	6820      	ldr	r0, [r4, #0]
    430a:	f01f ff4a 	bl	241a2 <memset>
    430e:	e7f7      	b.n	4300 <mutex_free_platform+0x2c>
    4310:	20000cbc 	.word	0x20000cbc
    4314:	0002a36e 	.word	0x0002a36e
    4318:	2000236c 	.word	0x2000236c

0000431c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    431c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    431e:	4604      	mov	r4, r0
    4320:	b918      	cbnz	r0, 432a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    4322:	4b16      	ldr	r3, [pc, #88]	; (437c <mutex_init_platform+0x60>)
    4324:	4816      	ldr	r0, [pc, #88]	; (4380 <mutex_init_platform+0x64>)
    4326:	685b      	ldr	r3, [r3, #4]
    4328:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    432a:	6863      	ldr	r3, [r4, #4]
    432c:	2b04      	cmp	r3, #4
    432e:	d023      	beq.n	4378 <mutex_init_platform+0x5c>
    4330:	2b08      	cmp	r3, #8
    4332:	d021      	beq.n	4378 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    4334:	b9cb      	cbnz	r3, 436a <mutex_init_platform+0x4e>
    4336:	6823      	ldr	r3, [r4, #0]
    4338:	b9bb      	cbnz	r3, 436a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    433a:	f04f 32ff 	mov.w	r2, #4294967295
    433e:	f04f 33ff 	mov.w	r3, #4294967295
    4342:	4621      	mov	r1, r4
    4344:	480f      	ldr	r0, [pc, #60]	; (4384 <mutex_init_platform+0x68>)
    4346:	f01a f8f5 	bl	1e534 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    434a:	b908      	cbnz	r0, 4350 <mutex_init_platform+0x34>
    434c:	6823      	ldr	r3, [r4, #0]
    434e:	b91b      	cbnz	r3, 4358 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    4350:	4b0a      	ldr	r3, [pc, #40]	; (437c <mutex_init_platform+0x60>)
    4352:	480d      	ldr	r0, [pc, #52]	; (4388 <mutex_init_platform+0x6c>)
    4354:	685b      	ldr	r3, [r3, #4]
    4356:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4358:	2214      	movs	r2, #20
    435a:	2100      	movs	r1, #0
    435c:	6820      	ldr	r0, [r4, #0]
    435e:	f01f ff20 	bl	241a2 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    4362:	6863      	ldr	r3, [r4, #4]
    4364:	f043 0302 	orr.w	r3, r3, #2
    4368:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    436a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    436c:	f024 f96f 	bl	2864e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    4370:	6863      	ldr	r3, [r4, #4]
    4372:	f043 0301 	orr.w	r3, r3, #1
    4376:	6063      	str	r3, [r4, #4]
}
    4378:	bd10      	pop	{r4, pc}
    437a:	bf00      	nop
    437c:	20000cbc 	.word	0x20000cbc
    4380:	0002a36e 	.word	0x0002a36e
    4384:	2000236c 	.word	0x2000236c
    4388:	0002a394 	.word	0x0002a394

0000438c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    438c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    438e:	b1f8      	cbz	r0, 43d0 <mutex_lock_platform+0x44>
    switch (mutex->flags) {
    4390:	6843      	ldr	r3, [r0, #4]
    4392:	2b04      	cmp	r3, #4
    4394:	d110      	bne.n	43b8 <mutex_lock_platform+0x2c>
    4396:	2201      	movs	r2, #1
    4398:	6803      	ldr	r3, [r0, #0]
    439a:	f3bf 8f5b 	dmb	ish
    439e:	e853 1f00 	ldrex	r1, [r3]
    43a2:	2900      	cmp	r1, #0
    43a4:	d103      	bne.n	43ae <mutex_lock_platform+0x22>
    43a6:	e843 2000 	strex	r0, r2, [r3]
    43aa:	2800      	cmp	r0, #0
    43ac:	d1f7      	bne.n	439e <mutex_lock_platform+0x12>
    43ae:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    43b2:	d10b      	bne.n	43cc <mutex_lock_platform+0x40>
    43b4:	2000      	movs	r0, #0
}
    43b6:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    43b8:	b16b      	cbz	r3, 43d6 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    43ba:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    43bc:	f04f 32ff 	mov.w	r2, #4294967295
    43c0:	f04f 33ff 	mov.w	r3, #4294967295
    43c4:	f01a f95e 	bl	1e684 <z_impl_k_mutex_lock>
        if (ret == 0) {
    43c8:	2800      	cmp	r0, #0
    43ca:	d0f3      	beq.n	43b4 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    43cc:	4803      	ldr	r0, [pc, #12]	; (43dc <mutex_lock_platform+0x50>)
    43ce:	e7f2      	b.n	43b6 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    43d0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    43d4:	e7ef      	b.n	43b6 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    43d6:	4802      	ldr	r0, [pc, #8]	; (43e0 <mutex_lock_platform+0x54>)
    43d8:	e7ed      	b.n	43b6 <mutex_lock_platform+0x2a>
    43da:	bf00      	nop
    43dc:	ffff8fe9 	.word	0xffff8fe9
    43e0:	ffff8fea 	.word	0xffff8fea

000043e4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    43e4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    43e6:	4906      	ldr	r1, [pc, #24]	; (4400 <nrf_cc3xx_platform_mutex_init+0x1c>)
    43e8:	4806      	ldr	r0, [pc, #24]	; (4404 <nrf_cc3xx_platform_mutex_init+0x20>)
    43ea:	2340      	movs	r3, #64	; 0x40
    43ec:	2214      	movs	r2, #20
    43ee:	f024 f913 	bl	28618 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    43f2:	4905      	ldr	r1, [pc, #20]	; (4408 <nrf_cc3xx_platform_mutex_init+0x24>)
    43f4:	4805      	ldr	r0, [pc, #20]	; (440c <nrf_cc3xx_platform_mutex_init+0x28>)
}
    43f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    43fa:	f01c bea5 	b.w	21148 <nrf_cc3xx_platform_set_mutexes>
    43fe:	bf00      	nop
    4400:	20002388 	.word	0x20002388
    4404:	2000236c 	.word	0x2000236c
    4408:	000290bc 	.word	0x000290bc
    440c:	000290ac 	.word	0x000290ac

00004410 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    4410:	4b01      	ldr	r3, [pc, #4]	; (4418 <uECC_get_rng+0x8>)
    4412:	6818      	ldr	r0, [r3, #0]
    4414:	4770      	bx	lr
    4416:	bf00      	nop
    4418:	200005a8 	.word	0x200005a8

0000441c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    441c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    441e:	2208      	movs	r2, #8
{
    4420:	b089      	sub	sp, #36	; 0x24
    4422:	460c      	mov	r4, r1
    4424:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    4426:	f01e fea9 	bl	2317c <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    442a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    442c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    442e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    4430:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    4432:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    4434:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    4436:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    4438:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    443a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    443c:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    443e:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4440:	2308      	movs	r3, #8
    4442:	466a      	mov	r2, sp
    4444:	4669      	mov	r1, sp
    4446:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    4448:	e9cd 7701 	strd	r7, r7, [sp, #4]
    444c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    444e:	f01e fd9a 	bl	22f86 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4452:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4454:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4456:	466a      	mov	r2, sp
    4458:	4631      	mov	r1, r6
    445a:	4630      	mov	r0, r6
    445c:	f01e fd93 	bl	22f86 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    4460:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4462:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    4464:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4466:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    4468:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    446a:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    446c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    446e:	4405      	add	r5, r0
	tmp[7] = 0;
    4470:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4474:	466a      	mov	r2, sp
    4476:	2308      	movs	r3, #8
    4478:	4669      	mov	r1, sp
    447a:	4668      	mov	r0, sp
    447c:	f01e fd83 	bl	22f86 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4480:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4482:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4484:	2308      	movs	r3, #8
    4486:	466a      	mov	r2, sp
    4488:	4630      	mov	r0, r6
    448a:	f01e fd7c 	bl	22f86 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    448e:	6a23      	ldr	r3, [r4, #32]
    4490:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    4492:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4494:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    4496:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4498:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    449a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    449c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    449e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    44a0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    44a2:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    44a4:	2308      	movs	r3, #8
    44a6:	466a      	mov	r2, sp
    44a8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    44aa:	e9cd 7704 	strd	r7, r7, [sp, #16]
    44ae:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    44b0:	f01e fd69 	bl	22f86 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    44b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    44b6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    44b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    44ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    44bc:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    44be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    44c0:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    44c2:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    44c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    44c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    44c8:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    44ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    44ce:	6a23      	ldr	r3, [r4, #32]
    44d0:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    44d2:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    44d4:	2308      	movs	r3, #8
    44d6:	466a      	mov	r2, sp
    44d8:	4630      	mov	r0, r6
    44da:	f01e fd54 	bl	22f86 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    44de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    44e0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    44e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    44e4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    44e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    44e8:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    44ea:	6a23      	ldr	r3, [r4, #32]
    44ec:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    44ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    44f0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    44f2:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    44f4:	2308      	movs	r3, #8
    44f6:	466a      	mov	r2, sp
    44f8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    44fa:	e9cd 7704 	strd	r7, r7, [sp, #16]
    44fe:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    4500:	f01e fe72 	bl	231e8 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    4504:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4506:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    4508:	6b63      	ldr	r3, [r4, #52]	; 0x34
    450a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    450c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    450e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    4510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4512:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    4514:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4516:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    4518:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    451a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    451c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    451e:	2308      	movs	r3, #8
    4520:	466a      	mov	r2, sp
    4522:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    4524:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    4528:	f01e fe5e 	bl	231e8 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    452c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    452e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    4530:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4532:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    4534:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4536:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    4538:	6a23      	ldr	r3, [r4, #32]
    453a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    453c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    453e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    4540:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    4542:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    4546:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4548:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    454a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    454c:	2308      	movs	r3, #8
    454e:	466a      	mov	r2, sp
    4550:	4630      	mov	r0, r6
    4552:	f01e fe49 	bl	231e8 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    4556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4558:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    455a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    455c:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    4560:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4562:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    4564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4566:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    4568:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    456a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    456e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4570:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    4572:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    4574:	2308      	movs	r3, #8
    4576:	466a      	mov	r2, sp
    4578:	4630      	mov	r0, r6
    457a:	f01e fe35 	bl	231e8 <uECC_vli_sub>

	if (carry < 0) {
    457e:	1a2d      	subs	r5, r5, r0
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    4580:	4c0d      	ldr	r4, [pc, #52]	; (45b8 <vli_mmod_fast_secp256r1+0x19c>)
	if (carry < 0) {
    4582:	d40f      	bmi.n	45a4 <vli_mmod_fast_secp256r1+0x188>
		}
		while (carry < 0);
	} else  {
		while (carry || 
    4584:	b935      	cbnz	r5, 4594 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    4586:	2208      	movs	r2, #8
    4588:	4631      	mov	r1, r6
    458a:	4620      	mov	r0, r4
    458c:	f01e fe02 	bl	23194 <uECC_vli_cmp_unsafe>
		while (carry || 
    4590:	2801      	cmp	r0, #1
    4592:	d00f      	beq.n	45b4 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    4594:	2308      	movs	r3, #8
    4596:	4622      	mov	r2, r4
    4598:	4631      	mov	r1, r6
    459a:	4630      	mov	r0, r6
    459c:	f01e fe24 	bl	231e8 <uECC_vli_sub>
    45a0:	1a2d      	subs	r5, r5, r0
    45a2:	e7ef      	b.n	4584 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    45a4:	2308      	movs	r3, #8
    45a6:	4622      	mov	r2, r4
    45a8:	4631      	mov	r1, r6
    45aa:	4630      	mov	r0, r6
    45ac:	f01e fceb 	bl	22f86 <uECC_vli_add>
		while (carry < 0);
    45b0:	182d      	adds	r5, r5, r0
    45b2:	d4f7      	bmi.n	45a4 <vli_mmod_fast_secp256r1+0x188>
		}
	}
}
    45b4:	b009      	add	sp, #36	; 0x24
    45b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45b8:	000290d4 	.word	0x000290d4

000045bc <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    45bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    45be:	4e28      	ldr	r6, [pc, #160]	; (4660 <tc_aes128_set_encrypt_key+0xa4>)
{
    45c0:	4607      	mov	r7, r0
    45c2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    45c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    45c6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    45c8:	ad01      	add	r5, sp, #4
    45ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    45cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    45ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    45d0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    45d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    45d8:	2f00      	cmp	r7, #0
    45da:	d03c      	beq.n	4656 <tc_aes128_set_encrypt_key+0x9a>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    45dc:	2c00      	cmp	r4, #0
    45de:	d03c      	beq.n	465a <tc_aes128_set_encrypt_key+0x9e>
    45e0:	1f38      	subs	r0, r7, #4
    45e2:	4621      	mov	r1, r4
    45e4:	4602      	mov	r2, r0
    45e6:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    45e8:	784b      	ldrb	r3, [r1, #1]
    45ea:	780d      	ldrb	r5, [r1, #0]
    45ec:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    45ee:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    45f2:	78cd      	ldrb	r5, [r1, #3]
    45f4:	432b      	orrs	r3, r5
    45f6:	788d      	ldrb	r5, [r1, #2]
    45f8:	3104      	adds	r1, #4
    45fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    45fe:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    4600:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    4604:	d1f0      	bne.n	45e8 <tc_aes128_set_encrypt_key+0x2c>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    4606:	4c17      	ldr	r4, [pc, #92]	; (4664 <tc_aes128_set_encrypt_key+0xa8>)
    4608:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    460a:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    460c:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    460e:	d118      	bne.n	4642 <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    4610:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    4614:	0e1a      	lsrs	r2, r3, #24
    4616:	5ca5      	ldrb	r5, [r4, r2]
    4618:	b2da      	uxtb	r2, r3
    461a:	5ca2      	ldrb	r2, [r4, r2]
    461c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    4620:	f3c3 4507 	ubfx	r5, r3, #16, #8
    4624:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4628:	5d65      	ldrb	r5, [r4, r5]
    462a:	5ce3      	ldrb	r3, [r4, r3]
    462c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    4630:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    4634:	ad0c      	add	r5, sp, #48	; 0x30
    4636:	f021 0303 	bic.w	r3, r1, #3
    463a:	442b      	add	r3, r5
    463c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    4640:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    4642:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    4646:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    4648:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    464a:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    464c:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    464e:	d1dc      	bne.n	460a <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    4650:	2001      	movs	r0, #1
}
    4652:	b00d      	add	sp, #52	; 0x34
    4654:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    4656:	4638      	mov	r0, r7
    4658:	e7fb      	b.n	4652 <tc_aes128_set_encrypt_key+0x96>
    465a:	4620      	mov	r0, r4
    465c:	e7f9      	b.n	4652 <tc_aes128_set_encrypt_key+0x96>
    465e:	bf00      	nop
    4660:	00028f30 	.word	0x00028f30
    4664:	0002a3c1 	.word	0x0002a3c1

00004668 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    4668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    466c:	4615      	mov	r5, r2
    466e:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    4670:	4607      	mov	r7, r0
    4672:	2800      	cmp	r0, #0
    4674:	d059      	beq.n	472a <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    4676:	2900      	cmp	r1, #0
    4678:	d05a      	beq.n	4730 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    467a:	2a00      	cmp	r2, #0
    467c:	d05a      	beq.n	4734 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    467e:	2310      	movs	r3, #16
    4680:	460a      	mov	r2, r1
    4682:	4668      	mov	r0, sp
    4684:	4619      	mov	r1, r3
    4686:	f01e fbba 	bl	22dfe <_copy>
	add_round_key(state, s->words);
    468a:	4629      	mov	r1, r5
    468c:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    468e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 4738 <tc_aes_encrypt+0xd0>
	add_round_key(state, s->words);
    4692:	f01f fac0 	bl	23c16 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    4696:	f105 0610 	add.w	r6, r5, #16
    469a:	46c8      	mov	r8, r9
    469c:	35a0      	adds	r5, #160	; 0xa0
    469e:	466c      	mov	r4, sp
{
    46a0:	466a      	mov	r2, sp
    46a2:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    46a4:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    46a6:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    46a8:	f819 1001 	ldrb.w	r1, [r9, r1]
    46ac:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    46b0:	d1f8      	bne.n	46a4 <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
    46b2:	4668      	mov	r0, sp
    46b4:	f01f faf4 	bl	23ca0 <shift_rows>
	mult_row_column(t, s);
    46b8:	4669      	mov	r1, sp
    46ba:	a804      	add	r0, sp, #16
    46bc:	f01f fb29 	bl	23d12 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    46c0:	a901      	add	r1, sp, #4
    46c2:	a805      	add	r0, sp, #20
    46c4:	f01f fb25 	bl	23d12 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    46c8:	a902      	add	r1, sp, #8
    46ca:	a806      	add	r0, sp, #24
    46cc:	f01f fb21 	bl	23d12 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    46d0:	a903      	add	r1, sp, #12
    46d2:	a807      	add	r0, sp, #28
    46d4:	f01f fb1d 	bl	23d12 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    46d8:	2310      	movs	r3, #16
    46da:	4619      	mov	r1, r3
    46dc:	eb0d 0203 	add.w	r2, sp, r3
    46e0:	4668      	mov	r0, sp
    46e2:	f01e fb8c 	bl	22dfe <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    46e6:	4631      	mov	r1, r6
    46e8:	4668      	mov	r0, sp
    46ea:	3610      	adds	r6, #16
    46ec:	f01f fa93 	bl	23c16 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    46f0:	42ae      	cmp	r6, r5
    46f2:	d1d4      	bne.n	469e <tc_aes_encrypt+0x36>
    46f4:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
    46f6:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    46f8:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
    46fa:	f818 3003 	ldrb.w	r3, [r8, r3]
    46fe:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    4702:	d1f8      	bne.n	46f6 <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
    4704:	4668      	mov	r0, sp
    4706:	f01f facb 	bl	23ca0 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    470a:	4629      	mov	r1, r5
    470c:	4668      	mov	r0, sp
    470e:	f01f fa82 	bl	23c16 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    4712:	2310      	movs	r3, #16
    4714:	4619      	mov	r1, r3
    4716:	466a      	mov	r2, sp
    4718:	4638      	mov	r0, r7
    471a:	f01e fb70 	bl	22dfe <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    471e:	4668      	mov	r0, sp
    4720:	2210      	movs	r2, #16
    4722:	4631      	mov	r1, r6
    4724:	f01e fb78 	bl	22e18 <_set>

	return TC_CRYPTO_SUCCESS;
    4728:	2001      	movs	r0, #1
}
    472a:	b009      	add	sp, #36	; 0x24
    472c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    4730:	4608      	mov	r0, r1
    4732:	e7fa      	b.n	472a <tc_aes_encrypt+0xc2>
    4734:	4610      	mov	r0, r2
    4736:	e7f8      	b.n	472a <tc_aes_encrypt+0xc2>
    4738:	0002a3c1 	.word	0x0002a3c1

0000473c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    473c:	4a0a      	ldr	r2, [pc, #40]	; (4768 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    473e:	490b      	ldr	r1, [pc, #44]	; (476c <arch_swap+0x30>)
	_current->arch.basepri = key;
    4740:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    4742:	6809      	ldr	r1, [r1, #0]
    4744:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4748:	4909      	ldr	r1, [pc, #36]	; (4770 <arch_swap+0x34>)
	_current->arch.basepri = key;
    474a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    474e:	684b      	ldr	r3, [r1, #4]
    4750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4754:	604b      	str	r3, [r1, #4]
    4756:	2300      	movs	r3, #0
    4758:	f383 8811 	msr	BASEPRI, r3
    475c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4760:	6893      	ldr	r3, [r2, #8]
}
    4762:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    4766:	4770      	bx	lr
    4768:	200042f0 	.word	0x200042f0
    476c:	00029ac8 	.word	0x00029ac8
    4770:	e000ed00 	.word	0xe000ed00

00004774 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4774:	4913      	ldr	r1, [pc, #76]	; (47c4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4776:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4778:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    477c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    477e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4782:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4786:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4788:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    478c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4790:	4f0d      	ldr	r7, [pc, #52]	; (47c8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4792:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4796:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    4798:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    479a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    479c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    47a0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    47a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    47a6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    47aa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    47ac:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    47ae:	f000 fbc5 	bl	4f3c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    47b2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    47b6:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    47ba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    47be:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    47c2:	4770      	bx	lr
    ldr r1, =_kernel
    47c4:	200042f0 	.word	0x200042f0
    ldr v4, =_SCS_ICSR
    47c8:	e000ed04 	.word	0xe000ed04

000047cc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    47cc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    47d0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    47d2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    47d6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    47da:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    47dc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    47e0:	2902      	cmp	r1, #2
    beq _oops
    47e2:	d0ff      	beq.n	47e4 <_oops>

000047e4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    47e4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    47e6:	f01f fbd5 	bl	23f94 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    47ea:	bd01      	pop	{r0, pc}

000047ec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    47ec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    47ee:	2b00      	cmp	r3, #0
    47f0:	db08      	blt.n	4804 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    47f2:	2201      	movs	r2, #1
    47f4:	f000 001f 	and.w	r0, r0, #31
    47f8:	fa02 f000 	lsl.w	r0, r2, r0
    47fc:	095b      	lsrs	r3, r3, #5
    47fe:	4a02      	ldr	r2, [pc, #8]	; (4808 <arch_irq_enable+0x1c>)
    4800:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    4804:	4770      	bx	lr
    4806:	bf00      	nop
    4808:	e000e100 	.word	0xe000e100

0000480c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    480c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    480e:	2b00      	cmp	r3, #0
    4810:	db0d      	blt.n	482e <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4812:	2201      	movs	r2, #1
    4814:	095b      	lsrs	r3, r3, #5
    4816:	f000 001f 	and.w	r0, r0, #31
    481a:	fa02 f000 	lsl.w	r0, r2, r0
    481e:	3320      	adds	r3, #32
    4820:	4a03      	ldr	r2, [pc, #12]	; (4830 <arch_irq_disable+0x24>)
    4822:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4826:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    482a:	f3bf 8f6f 	isb	sy
}
    482e:	4770      	bx	lr
    4830:	e000e100 	.word	0xe000e100

00004834 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4834:	0942      	lsrs	r2, r0, #5
    4836:	4b05      	ldr	r3, [pc, #20]	; (484c <arch_irq_is_enabled+0x18>)
    4838:	f000 001f 	and.w	r0, r0, #31
    483c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4840:	2301      	movs	r3, #1
    4842:	fa03 f000 	lsl.w	r0, r3, r0
}
    4846:	4010      	ands	r0, r2
    4848:	4770      	bx	lr
    484a:	bf00      	nop
    484c:	e000e100 	.word	0xe000e100

00004850 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    4850:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    4852:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    4854:	2c07      	cmp	r4, #7
{
    4856:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    4858:	d908      	bls.n	486c <z_arm_irq_priority_set+0x1c>
    485a:	490e      	ldr	r1, [pc, #56]	; (4894 <z_arm_irq_priority_set+0x44>)
    485c:	480e      	ldr	r0, [pc, #56]	; (4898 <z_arm_irq_priority_set+0x48>)
    485e:	225f      	movs	r2, #95	; 0x5f
    4860:	f01d fb33 	bl	21eca <printk>
    4864:	215f      	movs	r1, #95	; 0x5f
    4866:	480b      	ldr	r0, [pc, #44]	; (4894 <z_arm_irq_priority_set+0x44>)
    4868:	f01d fde1 	bl	2242e <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    486c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    486e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4870:	bfa8      	it	ge
    4872:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    4876:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    487a:	bfbc      	itt	lt
    487c:	f005 050f 	andlt.w	r5, r5, #15
    4880:	4b06      	ldrlt	r3, [pc, #24]	; (489c <z_arm_irq_priority_set+0x4c>)
    4882:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4884:	bfaa      	itet	ge
    4886:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    488a:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    488c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    4890:	bd38      	pop	{r3, r4, r5, pc}
    4892:	bf00      	nop
    4894:	0002a4c1 	.word	0x0002a4c1
    4898:	0002a026 	.word	0x0002a026
    489c:	e000ed14 	.word	0xe000ed14

000048a0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    48a0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    48a2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    48a4:	4b04      	ldr	r3, [pc, #16]	; (48b8 <_arch_isr_direct_pm+0x18>)
    48a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    48a8:	b118      	cbz	r0, 48b2 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    48aa:	2200      	movs	r2, #0
    48ac:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
    48ae:	f023 fea9 	bl	28604 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    48b2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    48b4:	bd08      	pop	{r3, pc}
    48b6:	bf00      	nop
    48b8:	200042f0 	.word	0x200042f0

000048bc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    48bc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    48c0:	9b00      	ldr	r3, [sp, #0]
    48c2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    48c6:	490a      	ldr	r1, [pc, #40]	; (48f0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    48c8:	9b01      	ldr	r3, [sp, #4]
    48ca:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    48ce:	9b02      	ldr	r3, [sp, #8]
    48d0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    48d4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    48d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    48dc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    48e0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    48e4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    48e6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    48e8:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    48ea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    48ee:	4770      	bx	lr
    48f0:	00021fa7 	.word	0x00021fa7

000048f4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    48f4:	4b0b      	ldr	r3, [pc, #44]	; (4924 <z_check_thread_stack_fail+0x30>)
{
    48f6:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
    48f8:	6898      	ldr	r0, [r3, #8]

	if (!thread) {
    48fa:	b190      	cbz	r0, 4922 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    48fc:	f112 0f16 	cmn.w	r2, #22
    4900:	6f40      	ldr	r0, [r0, #116]	; 0x74
    4902:	d005      	beq.n	4910 <z_check_thread_stack_fail+0x1c>
    4904:	f1a0 0320 	sub.w	r3, r0, #32
    4908:	4293      	cmp	r3, r2
    490a:	d806      	bhi.n	491a <z_check_thread_stack_fail+0x26>
    490c:	4282      	cmp	r2, r0
    490e:	d204      	bcs.n	491a <z_check_thread_stack_fail+0x26>
    4910:	4281      	cmp	r1, r0
    4912:	bf2c      	ite	cs
    4914:	2100      	movcs	r1, #0
    4916:	2101      	movcc	r1, #1
    4918:	e000      	b.n	491c <z_check_thread_stack_fail+0x28>
    491a:	2100      	movs	r1, #0
    491c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    491e:	bf08      	it	eq
    4920:	2000      	moveq	r0, #0
}
    4922:	4770      	bx	lr
    4924:	200042f0 	.word	0x200042f0

00004928 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4928:	b508      	push	{r3, lr}
    492a:	4604      	mov	r4, r0
    492c:	460e      	mov	r6, r1
    492e:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    4930:	f000 faf8 	bl	4f24 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4934:	4b08      	ldr	r3, [pc, #32]	; (4958 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    4936:	4620      	mov	r0, r4
	_current = main_thread;
    4938:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    493a:	f000 faff 	bl	4f3c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    493e:	4628      	mov	r0, r5
    4940:	f386 8809 	msr	PSP, r6
    4944:	2100      	movs	r1, #0
    4946:	b663      	cpsie	if
    4948:	f381 8811 	msr	BASEPRI, r1
    494c:	f3bf 8f6f 	isb	sy
    4950:	2200      	movs	r2, #0
    4952:	2300      	movs	r3, #0
    4954:	f01d fb27 	bl	21fa6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4958:	200042f0 	.word	0x200042f0

0000495c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    495c:	4901      	ldr	r1, [pc, #4]	; (4964 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    495e:	2210      	movs	r2, #16
	str	r2, [r1]
    4960:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4962:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4964:	e000ed10 	.word	0xe000ed10

00004968 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4968:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    496a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    496c:	f380 8811 	msr	BASEPRI, r0
	isb
    4970:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4974:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4978:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    497a:	b662      	cpsie	i
	isb
    497c:	f3bf 8f6f 	isb	sy

	bx	lr
    4980:	4770      	bx	lr
    4982:	bf00      	nop

00004984 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4984:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4986:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4988:	f381 8811 	msr	BASEPRI, r1

	wfe
    498c:	bf20      	wfe

	msr	BASEPRI, r0
    498e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4992:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4994:	4770      	bx	lr
    4996:	bf00      	nop

00004998 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4998:	b537      	push	{r0, r1, r2, r4, r5, lr}
    499a:	4605      	mov	r5, r0

	if (esf != NULL) {
    499c:	460c      	mov	r4, r1
    499e:	b1c9      	cbz	r1, 49d4 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    49a0:	688b      	ldr	r3, [r1, #8]
    49a2:	9300      	str	r3, [sp, #0]
    49a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    49a8:	480e      	ldr	r0, [pc, #56]	; (49e4 <z_arm_fatal_error+0x4c>)
    49aa:	2145      	movs	r1, #69	; 0x45
    49ac:	f01d fa8d 	bl	21eca <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    49b0:	6963      	ldr	r3, [r4, #20]
    49b2:	9300      	str	r3, [sp, #0]
    49b4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    49b8:	2145      	movs	r1, #69	; 0x45
    49ba:	480b      	ldr	r0, [pc, #44]	; (49e8 <z_arm_fatal_error+0x50>)
    49bc:	f01d fa85 	bl	21eca <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    49c0:	69e2      	ldr	r2, [r4, #28]
    49c2:	480a      	ldr	r0, [pc, #40]	; (49ec <z_arm_fatal_error+0x54>)
    49c4:	2145      	movs	r1, #69	; 0x45
    49c6:	f01d fa80 	bl	21eca <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    49ca:	69a2      	ldr	r2, [r4, #24]
    49cc:	4808      	ldr	r0, [pc, #32]	; (49f0 <z_arm_fatal_error+0x58>)
    49ce:	2145      	movs	r1, #69	; 0x45
    49d0:	f01d fa7b 	bl	21eca <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    49d4:	4621      	mov	r1, r4
    49d6:	4628      	mov	r0, r5
}
    49d8:	b003      	add	sp, #12
    49da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    49de:	f019 bb4d 	b.w	1e07c <z_fatal_error>
    49e2:	bf00      	nop
    49e4:	0002a4f7 	.word	0x0002a4f7
    49e8:	0002a52b 	.word	0x0002a52b
    49ec:	0002a55f 	.word	0x0002a55f
    49f0:	0002a573 	.word	0x0002a573

000049f4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    49f4:	bf30      	wfi
    b z_SysNmiOnReset
    49f6:	f7ff bffd 	b.w	49f4 <z_SysNmiOnReset>
    49fa:	bf00      	nop

000049fc <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    49fc:	4a0e      	ldr	r2, [pc, #56]	; (4a38 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    49fe:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4a00:	4b0e      	ldr	r3, [pc, #56]	; (4a3c <z_arm_prep_c+0x40>)
    4a02:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4a06:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4a08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4a0c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4a10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4a14:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    4a1c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    4a20:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    4a24:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4a28:	f019 fbb4 	bl	1e194 <z_bss_zero>
	z_data_copy();
    4a2c:	f01b fc40 	bl	202b0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4a30:	f000 fa4a 	bl	4ec8 <z_arm_interrupt_init>
	z_cstart();
    4a34:	f019 fbd2 	bl	1e1dc <z_cstart>
    4a38:	00000000 	.word	0x00000000
    4a3c:	e000ed00 	.word	0xe000ed00

00004a40 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4a40:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4a42:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4a44:	4a0b      	ldr	r2, [pc, #44]	; (4a74 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4a46:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    4a48:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4a4a:	bf1e      	ittt	ne
	movne	r1, #0
    4a4c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4a4e:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    4a50:	f023 fdd8 	blne	28604 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4a54:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4a56:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4a5a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4a5e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4a62:	4905      	ldr	r1, [pc, #20]	; (4a78 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4a64:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4a66:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4a68:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4a6a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4a6e:	4903      	ldr	r1, [pc, #12]	; (4a7c <_isr_wrapper+0x3c>)
	bx r1
    4a70:	4708      	bx	r1
    4a72:	0000      	.short	0x0000
	ldr r2, =_kernel
    4a74:	200042f0 	.word	0x200042f0
	ldr r1, =_sw_isr_table
    4a78:	00028a08 	.word	0x00028a08
	ldr r1, =z_arm_int_exit
    4a7c:	00004ead 	.word	0x00004ead

00004a80 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    4a80:	f01f fbc1 	bl	24206 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4a84:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4a86:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4a8a:	4808      	ldr	r0, [pc, #32]	; (4aac <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4a8c:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    4a90:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4a92:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4a96:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4a9a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4a9c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4a9e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4aa2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4aa6:	f7ff ffa9 	bl	49fc <z_arm_prep_c>
    4aaa:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    4aac:	20005f40 	.word	0x20005f40

00004ab0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4ab0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4ab4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4ab8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4aba:	4672      	mov	r2, lr
	bl z_arm_fault
    4abc:	f000 f92c 	bl	4d18 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4ac0:	bd01      	pop	{r0, pc}
    4ac2:	bf00      	nop

00004ac4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    4ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4ac8:	4c36      	ldr	r4, [pc, #216]	; (4ba4 <mem_manage_fault+0xe0>)
{
    4aca:	4605      	mov	r5, r0
    4acc:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    4ace:	4836      	ldr	r0, [pc, #216]	; (4ba8 <mem_manage_fault+0xe4>)
    4ad0:	2145      	movs	r1, #69	; 0x45
{
    4ad2:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    4ad4:	f01d f9f9 	bl	21eca <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4ad8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4ada:	06d7      	lsls	r7, r2, #27
    4adc:	d503      	bpl.n	4ae6 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4ade:	2145      	movs	r1, #69	; 0x45
    4ae0:	4832      	ldr	r0, [pc, #200]	; (4bac <mem_manage_fault+0xe8>)
    4ae2:	f01d f9f2 	bl	21eca <printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4ae6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4ae8:	0718      	lsls	r0, r3, #28
    4aea:	d503      	bpl.n	4af4 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
    4aec:	2145      	movs	r1, #69	; 0x45
    4aee:	4830      	ldr	r0, [pc, #192]	; (4bb0 <mem_manage_fault+0xec>)
    4af0:	f01d f9eb 	bl	21eca <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4af4:	4c2b      	ldr	r4, [pc, #172]	; (4ba4 <mem_manage_fault+0xe0>)
    4af6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4af8:	0799      	lsls	r1, r3, #30
    4afa:	d422      	bmi.n	4b42 <mem_manage_fault+0x7e>
	uint32_t mmfar = -EINVAL;
    4afc:	f06f 0715 	mvn.w	r7, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4b00:	4c28      	ldr	r4, [pc, #160]	; (4ba4 <mem_manage_fault+0xe0>)
    4b02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4b04:	07d3      	lsls	r3, r2, #31
    4b06:	d503      	bpl.n	4b10 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
    4b08:	2145      	movs	r1, #69	; 0x45
    4b0a:	482a      	ldr	r0, [pc, #168]	; (4bb4 <mem_manage_fault+0xf0>)
    4b0c:	f01d f9dd 	bl	21eca <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4b10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4b12:	069c      	lsls	r4, r3, #26
    4b14:	d503      	bpl.n	4b1e <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
    4b16:	2145      	movs	r1, #69	; 0x45
    4b18:	4827      	ldr	r0, [pc, #156]	; (4bb8 <mem_manage_fault+0xf4>)
    4b1a:	f01d f9d6 	bl	21eca <printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4b1e:	4c21      	ldr	r4, [pc, #132]	; (4ba4 <mem_manage_fault+0xe0>)
    4b20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4b22:	06d8      	lsls	r0, r3, #27
    4b24:	d422      	bmi.n	4b6c <mem_manage_fault+0xa8>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4b26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4b28:	0799      	lsls	r1, r3, #30
    4b2a:	d41f      	bmi.n	4b6c <mem_manage_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4b2c:	2500      	movs	r5, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4b2e:	4a1d      	ldr	r2, [pc, #116]	; (4ba4 <mem_manage_fault+0xe0>)
    4b30:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4b32:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4b36:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    4b38:	2300      	movs	r3, #0
    4b3a:	7033      	strb	r3, [r6, #0]

	return reason;
}
    4b3c:	4628      	mov	r0, r5
    4b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    4b42:	2145      	movs	r1, #69	; 0x45
    4b44:	481d      	ldr	r0, [pc, #116]	; (4bbc <mem_manage_fault+0xf8>)
    4b46:	f01d f9c0 	bl	21eca <printk>
		uint32_t temp = SCB->MMFAR;
    4b4a:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4b4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4b4e:	061a      	lsls	r2, r3, #24
    4b50:	d5d4      	bpl.n	4afc <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4b52:	463a      	mov	r2, r7
    4b54:	2145      	movs	r1, #69	; 0x45
    4b56:	481a      	ldr	r0, [pc, #104]	; (4bc0 <mem_manage_fault+0xfc>)
    4b58:	f01d f9b7 	bl	21eca <printk>
			if (from_hard_fault) {
    4b5c:	f1b8 0f00 	cmp.w	r8, #0
    4b60:	d0ce      	beq.n	4b00 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4b62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4b68:	62a3      	str	r3, [r4, #40]	; 0x28
    4b6a:	e7c9      	b.n	4b00 <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4b6c:	6863      	ldr	r3, [r4, #4]
    4b6e:	051a      	lsls	r2, r3, #20
    4b70:	d5dc      	bpl.n	4b2c <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4b72:	4629      	mov	r1, r5
    4b74:	4638      	mov	r0, r7
    4b76:	f7ff febd 	bl	48f4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4b7a:	4605      	mov	r5, r0
    4b7c:	b118      	cbz	r0, 4b86 <mem_manage_fault+0xc2>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4b7e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4b82:	2502      	movs	r5, #2
    4b84:	e7d3      	b.n	4b2e <mem_manage_fault+0x6a>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    4b86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4b88:	06db      	lsls	r3, r3, #27
    4b8a:	d5cf      	bpl.n	4b2c <mem_manage_fault+0x68>
    4b8c:	f44f 72a1 	mov.w	r2, #322	; 0x142
    4b90:	490c      	ldr	r1, [pc, #48]	; (4bc4 <mem_manage_fault+0x100>)
    4b92:	480d      	ldr	r0, [pc, #52]	; (4bc8 <mem_manage_fault+0x104>)
    4b94:	f01d f999 	bl	21eca <printk>
    4b98:	f44f 71a1 	mov.w	r1, #322	; 0x142
    4b9c:	4809      	ldr	r0, [pc, #36]	; (4bc4 <mem_manage_fault+0x100>)
    4b9e:	f01d fc46 	bl	2242e <assert_post_action>
    4ba2:	e7c4      	b.n	4b2e <mem_manage_fault+0x6a>
    4ba4:	e000ed00 	.word	0xe000ed00
    4ba8:	0002a64c 	.word	0x0002a64c
    4bac:	0002a667 	.word	0x0002a667
    4bb0:	0002a69f 	.word	0x0002a69f
    4bb4:	0002a6ef 	.word	0x0002a6ef
    4bb8:	0002a713 	.word	0x0002a713
    4bbc:	0002a6b7 	.word	0x0002a6b7
    4bc0:	0002a6d4 	.word	0x0002a6d4
    4bc4:	0002a747 	.word	0x0002a747
    4bc8:	0002a026 	.word	0x0002a026

00004bcc <bus_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4bcc:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4bce:	4c23      	ldr	r4, [pc, #140]	; (4c5c <bus_fault.isra.2+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4bd0:	4606      	mov	r6, r0
    4bd2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    4bd4:	4822      	ldr	r0, [pc, #136]	; (4c60 <bus_fault.isra.2+0x94>)
    4bd6:	2145      	movs	r1, #69	; 0x45
    4bd8:	f01d f977 	bl	21eca <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4bdc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4bde:	04d1      	lsls	r1, r2, #19
    4be0:	d503      	bpl.n	4bea <bus_fault.isra.2+0x1e>
		PR_FAULT_INFO("  Stacking error");
    4be2:	2145      	movs	r1, #69	; 0x45
    4be4:	481f      	ldr	r0, [pc, #124]	; (4c64 <bus_fault.isra.2+0x98>)
    4be6:	f01d f970 	bl	21eca <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4bea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4bec:	051a      	lsls	r2, r3, #20
    4bee:	d503      	bpl.n	4bf8 <bus_fault.isra.2+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    4bf0:	2145      	movs	r1, #69	; 0x45
    4bf2:	481d      	ldr	r0, [pc, #116]	; (4c68 <bus_fault.isra.2+0x9c>)
    4bf4:	f01d f969 	bl	21eca <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4bf8:	4c18      	ldr	r4, [pc, #96]	; (4c5c <bus_fault.isra.2+0x90>)
    4bfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4bfc:	059b      	lsls	r3, r3, #22
    4bfe:	d510      	bpl.n	4c22 <bus_fault.isra.2+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    4c00:	481a      	ldr	r0, [pc, #104]	; (4c6c <bus_fault.isra.2+0xa0>)
    4c02:	2145      	movs	r1, #69	; 0x45
    4c04:	f01d f961 	bl	21eca <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4c08:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4c0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4c0c:	0418      	lsls	r0, r3, #16
    4c0e:	d508      	bpl.n	4c22 <bus_fault.isra.2+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4c10:	2145      	movs	r1, #69	; 0x45
    4c12:	4817      	ldr	r0, [pc, #92]	; (4c70 <bus_fault.isra.2+0xa4>)
    4c14:	f01d f959 	bl	21eca <printk>
			if (from_hard_fault) {
    4c18:	b11e      	cbz	r6, 4c22 <bus_fault.isra.2+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4c1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4c1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4c20:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4c22:	4c0e      	ldr	r4, [pc, #56]	; (4c5c <bus_fault.isra.2+0x90>)
    4c24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4c26:	0559      	lsls	r1, r3, #21
    4c28:	d503      	bpl.n	4c32 <bus_fault.isra.2+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    4c2a:	2145      	movs	r1, #69	; 0x45
    4c2c:	4811      	ldr	r0, [pc, #68]	; (4c74 <bus_fault.isra.2+0xa8>)
    4c2e:	f01d f94c 	bl	21eca <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4c32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4c34:	05da      	lsls	r2, r3, #23
    4c36:	d50b      	bpl.n	4c50 <bus_fault.isra.2+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    4c38:	480f      	ldr	r0, [pc, #60]	; (4c78 <bus_fault.isra.2+0xac>)
    4c3a:	2145      	movs	r1, #69	; 0x45
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4c3c:	f01d f945 	bl	21eca <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4c40:	4a06      	ldr	r2, [pc, #24]	; (4c5c <bus_fault.isra.2+0x90>)
    4c42:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    4c44:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4c46:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4c4a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4c4c:	7028      	strb	r0, [r5, #0]

	return reason;
}
    4c4e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4c50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4c52:	049b      	lsls	r3, r3, #18
    4c54:	d5f4      	bpl.n	4c40 <bus_fault.isra.2+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4c56:	2145      	movs	r1, #69	; 0x45
    4c58:	4808      	ldr	r0, [pc, #32]	; (4c7c <bus_fault.isra.2+0xb0>)
    4c5a:	e7ef      	b.n	4c3c <bus_fault.isra.2+0x70>
    4c5c:	e000ed00 	.word	0xe000ed00
    4c60:	0002a5a6 	.word	0x0002a5a6
    4c64:	0002a5c1 	.word	0x0002a5c1
    4c68:	0002a69f 	.word	0x0002a69f
    4c6c:	0002a5d7 	.word	0x0002a5d7
    4c70:	0002a5f5 	.word	0x0002a5f5
    4c74:	0002a60f 	.word	0x0002a60f
    4c78:	0002a62f 	.word	0x0002a62f
    4c7c:	0002a713 	.word	0x0002a713

00004c80 <usage_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    4c80:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4c82:	4c1d      	ldr	r4, [pc, #116]	; (4cf8 <usage_fault.isra.3+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    4c84:	481d      	ldr	r0, [pc, #116]	; (4cfc <usage_fault.isra.3+0x7c>)
    4c86:	2145      	movs	r1, #69	; 0x45
    4c88:	f01d f91f 	bl	21eca <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4c8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4c8e:	0193      	lsls	r3, r2, #6
    4c90:	d503      	bpl.n	4c9a <usage_fault.isra.3+0x1a>
		PR_FAULT_INFO("  Division by zero");
    4c92:	2145      	movs	r1, #69	; 0x45
    4c94:	481a      	ldr	r0, [pc, #104]	; (4d00 <usage_fault.isra.3+0x80>)
    4c96:	f01d f918 	bl	21eca <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4c9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4c9c:	01dc      	lsls	r4, r3, #7
    4c9e:	d503      	bpl.n	4ca8 <usage_fault.isra.3+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    4ca0:	2145      	movs	r1, #69	; 0x45
    4ca2:	4818      	ldr	r0, [pc, #96]	; (4d04 <usage_fault.isra.3+0x84>)
    4ca4:	f01d f911 	bl	21eca <printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4ca8:	4c13      	ldr	r4, [pc, #76]	; (4cf8 <usage_fault.isra.3+0x78>)
    4caa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4cac:	0310      	lsls	r0, r2, #12
    4cae:	d503      	bpl.n	4cb8 <usage_fault.isra.3+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
    4cb0:	2145      	movs	r1, #69	; 0x45
    4cb2:	4815      	ldr	r0, [pc, #84]	; (4d08 <usage_fault.isra.3+0x88>)
    4cb4:	f01d f909 	bl	21eca <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4cb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4cba:	0359      	lsls	r1, r3, #13
    4cbc:	d503      	bpl.n	4cc6 <usage_fault.isra.3+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4cbe:	2145      	movs	r1, #69	; 0x45
    4cc0:	4812      	ldr	r0, [pc, #72]	; (4d0c <usage_fault.isra.3+0x8c>)
    4cc2:	f01d f902 	bl	21eca <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4cc6:	4c0c      	ldr	r4, [pc, #48]	; (4cf8 <usage_fault.isra.3+0x78>)
    4cc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4cca:	0392      	lsls	r2, r2, #14
    4ccc:	d503      	bpl.n	4cd6 <usage_fault.isra.3+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4cce:	2145      	movs	r1, #69	; 0x45
    4cd0:	480f      	ldr	r0, [pc, #60]	; (4d10 <usage_fault.isra.3+0x90>)
    4cd2:	f01d f8fa 	bl	21eca <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4cd8:	03db      	lsls	r3, r3, #15
    4cda:	d503      	bpl.n	4ce4 <usage_fault.isra.3+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4cdc:	2145      	movs	r1, #69	; 0x45
    4cde:	480d      	ldr	r0, [pc, #52]	; (4d14 <usage_fault.isra.3+0x94>)
    4ce0:	f01d f8f3 	bl	21eca <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4ce4:	4a04      	ldr	r2, [pc, #16]	; (4cf8 <usage_fault.isra.3+0x78>)
    4ce6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4ce8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4cec:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4cf0:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    4cf2:	2000      	movs	r0, #0
    4cf4:	bd10      	pop	{r4, pc}
    4cf6:	bf00      	nop
    4cf8:	e000ed00 	.word	0xe000ed00
    4cfc:	0002a781 	.word	0x0002a781
    4d00:	0002a79e 	.word	0x0002a79e
    4d04:	0002a7b6 	.word	0x0002a7b6
    4d08:	0002a7d5 	.word	0x0002a7d5
    4d0c:	0002a7f8 	.word	0x0002a7f8
    4d10:	0002a822 	.word	0x0002a822
    4d14:	0002a841 	.word	0x0002a841

00004d18 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4d1c:	4b51      	ldr	r3, [pc, #324]	; (4e64 <z_arm_fault+0x14c>)
    4d1e:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    4d22:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4d24:	f3c8 0708 	ubfx	r7, r8, #0, #9
    4d28:	2500      	movs	r5, #0
    4d2a:	f385 8811 	msr	BASEPRI, r5
    4d2e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4d32:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4d36:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4d3a:	d107      	bne.n	4d4c <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4d3c:	f002 030c 	and.w	r3, r2, #12
    4d40:	2b08      	cmp	r3, #8
    4d42:	d110      	bne.n	4d66 <z_arm_fault+0x4e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4d44:	2145      	movs	r1, #69	; 0x45
    4d46:	4848      	ldr	r0, [pc, #288]	; (4e68 <z_arm_fault+0x150>)
    4d48:	f01d f8bf 	bl	21eca <printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    4d4c:	f240 32c5 	movw	r2, #965	; 0x3c5
    4d50:	4946      	ldr	r1, [pc, #280]	; (4e6c <z_arm_fault+0x154>)
    4d52:	4847      	ldr	r0, [pc, #284]	; (4e70 <z_arm_fault+0x158>)
    4d54:	f01d f8b9 	bl	21eca <printk>
    4d58:	f240 31c5 	movw	r1, #965	; 0x3c5
    4d5c:	4843      	ldr	r0, [pc, #268]	; (4e6c <z_arm_fault+0x154>)
    4d5e:	f01d fb66 	bl	2242e <assert_post_action>
    4d62:	2600      	movs	r6, #0
    4d64:	e006      	b.n	4d74 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4d66:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    4d68:	bf4e      	itee	mi
    4d6a:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
    4d6c:	4606      	movpl	r6, r0
			*nested_exc = true;
    4d6e:	2501      	movpl	r5, #1
	__ASSERT(esf != NULL,
    4d70:	2e00      	cmp	r6, #0
    4d72:	d0eb      	beq.n	4d4c <z_arm_fault+0x34>
	*recoverable = false;
    4d74:	2300      	movs	r3, #0
	switch (fault) {
    4d76:	1efa      	subs	r2, r7, #3
	*recoverable = false;
    4d78:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    4d7c:	461c      	mov	r4, r3
    4d7e:	4613      	mov	r3, r2
    4d80:	2b09      	cmp	r3, #9
    4d82:	d85c      	bhi.n	4e3e <z_arm_fault+0x126>
    4d84:	e8df f003 	tbb	[pc, r3]
    4d88:	34545005 	.word	0x34545005
    4d8c:	5b5b5b5b 	.word	0x5b5b5b5b
    4d90:	585b      	.short	0x585b
	PR_FAULT_INFO("***** HARD FAULT *****");
    4d92:	2145      	movs	r1, #69	; 0x45
    4d94:	4837      	ldr	r0, [pc, #220]	; (4e74 <z_arm_fault+0x15c>)
    4d96:	f01d f898 	bl	21eca <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4d9a:	4b32      	ldr	r3, [pc, #200]	; (4e64 <z_arm_fault+0x14c>)
	*recoverable = false;
    4d9c:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4da0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    4da2:	f014 0402 	ands.w	r4, r4, #2
    4da6:	d005      	beq.n	4db4 <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
    4da8:	4833      	ldr	r0, [pc, #204]	; (4e78 <z_arm_fault+0x160>)
    4daa:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
    4dac:	f01d f88d 	bl	21eca <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4db0:	2400      	movs	r4, #0
    4db2:	e020      	b.n	4df6 <z_arm_fault+0xde>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4db6:	005b      	lsls	r3, r3, #1
    4db8:	d51d      	bpl.n	4df6 <z_arm_fault+0xde>
		PR_EXC("  Fault escalation (see below)");
    4dba:	2145      	movs	r1, #69	; 0x45
    4dbc:	482f      	ldr	r0, [pc, #188]	; (4e7c <z_arm_fault+0x164>)
    4dbe:	f01d f884 	bl	21eca <printk>
		if (SCB_MMFSR != 0) {
    4dc2:	4b2f      	ldr	r3, [pc, #188]	; (4e80 <z_arm_fault+0x168>)
    4dc4:	781b      	ldrb	r3, [r3, #0]
    4dc6:	b133      	cbz	r3, 4dd6 <z_arm_fault+0xbe>
			reason = mem_manage_fault(esf, 1, recoverable);
    4dc8:	f10d 0207 	add.w	r2, sp, #7
    4dcc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4dce:	4630      	mov	r0, r6
    4dd0:	f7ff fe78 	bl	4ac4 <mem_manage_fault>
    4dd4:	e00e      	b.n	4df4 <z_arm_fault+0xdc>
		} else if (SCB_BFSR != 0) {
    4dd6:	4b2b      	ldr	r3, [pc, #172]	; (4e84 <z_arm_fault+0x16c>)
    4dd8:	781b      	ldrb	r3, [r3, #0]
    4dda:	b12b      	cbz	r3, 4de8 <z_arm_fault+0xd0>
			reason = bus_fault(esf, 1, recoverable);
    4ddc:	f10d 0107 	add.w	r1, sp, #7
    4de0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4de2:	f7ff fef3 	bl	4bcc <bus_fault.isra.2>
    4de6:	e005      	b.n	4df4 <z_arm_fault+0xdc>
		} else if (SCB_UFSR != 0) {
    4de8:	4b27      	ldr	r3, [pc, #156]	; (4e88 <z_arm_fault+0x170>)
    4dea:	881b      	ldrh	r3, [r3, #0]
    4dec:	b29b      	uxth	r3, r3
    4dee:	b113      	cbz	r3, 4df6 <z_arm_fault+0xde>
			reason = usage_fault(esf);
    4df0:	f7ff ff46 	bl	4c80 <usage_fault.isra.3>
    4df4:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4df6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4dfa:	b993      	cbnz	r3, 4e22 <z_arm_fault+0x10a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4dfc:	2220      	movs	r2, #32
    4dfe:	4631      	mov	r1, r6
    4e00:	a802      	add	r0, sp, #8
    4e02:	f01f f9a4 	bl	2414e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4e08:	b335      	cbz	r5, 4e58 <z_arm_fault+0x140>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4e0e:	b922      	cbnz	r2, 4e1a <z_arm_fault+0x102>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4e10:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4e14:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4e18:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4e1a:	a902      	add	r1, sp, #8
    4e1c:	4620      	mov	r0, r4
    4e1e:	f7ff fdbb 	bl	4998 <z_arm_fatal_error>
}
    4e22:	b00a      	add	sp, #40	; 0x28
    4e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    4e28:	f10d 0207 	add.w	r2, sp, #7
    4e2c:	2100      	movs	r1, #0
    4e2e:	e7ce      	b.n	4dce <z_arm_fault+0xb6>
		reason = bus_fault(esf, 0, recoverable);
    4e30:	f10d 0107 	add.w	r1, sp, #7
    4e34:	2000      	movs	r0, #0
    4e36:	e7d4      	b.n	4de2 <z_arm_fault+0xca>
	PR_FAULT_INFO(
    4e38:	2145      	movs	r1, #69	; 0x45
    4e3a:	4814      	ldr	r0, [pc, #80]	; (4e8c <z_arm_fault+0x174>)
    4e3c:	e7b6      	b.n	4dac <z_arm_fault+0x94>
	PR_FAULT_INFO("***** %s %d) *****",
    4e3e:	4914      	ldr	r1, [pc, #80]	; (4e90 <z_arm_fault+0x178>)
    4e40:	4a14      	ldr	r2, [pc, #80]	; (4e94 <z_arm_fault+0x17c>)
    4e42:	4815      	ldr	r0, [pc, #84]	; (4e98 <z_arm_fault+0x180>)
    4e44:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    4e48:	bf08      	it	eq
    4e4a:	460a      	moveq	r2, r1
    4e4c:	f1a7 0310 	sub.w	r3, r7, #16
    4e50:	2145      	movs	r1, #69	; 0x45
    4e52:	f01d f83a 	bl	21eca <printk>
    4e56:	e7ab      	b.n	4db0 <z_arm_fault+0x98>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4e58:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4e5c:	f023 0301 	bic.w	r3, r3, #1
    4e60:	e7da      	b.n	4e18 <z_arm_fault+0x100>
    4e62:	bf00      	nop
    4e64:	e000ed00 	.word	0xe000ed00
    4e68:	0002a89f 	.word	0x0002a89f
    4e6c:	0002a747 	.word	0x0002a747
    4e70:	0002a026 	.word	0x0002a026
    4e74:	0002a8cf 	.word	0x0002a8cf
    4e78:	0002a8eb 	.word	0x0002a8eb
    4e7c:	0002a911 	.word	0x0002a911
    4e80:	e000ed28 	.word	0xe000ed28
    4e84:	e000ed29 	.word	0xe000ed29
    4e88:	e000ed2a 	.word	0xe000ed2a
    4e8c:	0002a935 	.word	0x0002a935
    4e90:	0002a871 	.word	0x0002a871
    4e94:	0002a886 	.word	0x0002a886
    4e98:	0002a970 	.word	0x0002a970

00004e9c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4e9c:	4a02      	ldr	r2, [pc, #8]	; (4ea8 <z_arm_fault_init+0xc>)
    4e9e:	6953      	ldr	r3, [r2, #20]
    4ea0:	f043 0310 	orr.w	r3, r3, #16
    4ea4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4ea6:	4770      	bx	lr
    4ea8:	e000ed00 	.word	0xe000ed00

00004eac <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4eac:	4b04      	ldr	r3, [pc, #16]	; (4ec0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4eae:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4eb0:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    4eb2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4eb4:	d003      	beq.n	4ebe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4eb6:	4903      	ldr	r1, [pc, #12]	; (4ec4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4ebc:	600a      	str	r2, [r1, #0]

00004ebe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4ebe:	4770      	bx	lr
	ldr r3, =_kernel
    4ec0:	200042f0 	.word	0x200042f0
	ldr r1, =_SCS_ICSR
    4ec4:	e000ed04 	.word	0xe000ed04

00004ec8 <z_arm_interrupt_init>:
    4ec8:	4804      	ldr	r0, [pc, #16]	; (4edc <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4eca:	2300      	movs	r3, #0
    4ecc:	2120      	movs	r1, #32
    4ece:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4ed0:	3301      	adds	r3, #1
    4ed2:	2b30      	cmp	r3, #48	; 0x30
    4ed4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4ed8:	d1f9      	bne.n	4ece <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4eda:	4770      	bx	lr
    4edc:	e000e100 	.word	0xe000e100

00004ee0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4ee0:	b508      	push	{r3, lr}
	if (_current == thread) {
    4ee2:	4b0e      	ldr	r3, [pc, #56]	; (4f1c <z_impl_k_thread_abort+0x3c>)
    4ee4:	689b      	ldr	r3, [r3, #8]
    4ee6:	4283      	cmp	r3, r0
    4ee8:	d107      	bne.n	4efa <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4eea:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4eee:	b193      	cbz	r3, 4f16 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4ef0:	4a0b      	ldr	r2, [pc, #44]	; (4f20 <z_impl_k_thread_abort+0x40>)
    4ef2:	6853      	ldr	r3, [r2, #4]
    4ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4ef8:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    4efa:	f01a fab9 	bl	1f470 <z_thread_single_abort>
	__asm__ volatile(
    4efe:	f04f 0320 	mov.w	r3, #32
    4f02:	f3ef 8011 	mrs	r0, BASEPRI
    4f06:	f383 8811 	msr	BASEPRI, r3
    4f0a:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    4f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    4f12:	f023 bbda 	b.w	286ca <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    4f16:	f01b f8cd 	bl	200b4 <z_self_abort>
    4f1a:	bf00      	nop
    4f1c:	200042f0 	.word	0x200042f0
    4f20:	e000ed00 	.word	0xe000ed00

00004f24 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4f24:	4b02      	ldr	r3, [pc, #8]	; (4f30 <z_arm_configure_static_mpu_regions+0xc>)
    4f26:	4a03      	ldr	r2, [pc, #12]	; (4f34 <z_arm_configure_static_mpu_regions+0x10>)
    4f28:	4803      	ldr	r0, [pc, #12]	; (4f38 <z_arm_configure_static_mpu_regions+0x14>)
    4f2a:	2101      	movs	r1, #1
    4f2c:	f000 b8c0 	b.w	50b0 <arm_core_mpu_configure_static_mpu_regions>
    4f30:	20040000 	.word	0x20040000
    4f34:	20000000 	.word	0x20000000
    4f38:	00029180 	.word	0x00029180

00004f3c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4f3c:	6f42      	ldr	r2, [r0, #116]	; 0x74
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4f3e:	4b05      	ldr	r3, [pc, #20]	; (4f54 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    4f40:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    4f42:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4f44:	4a04      	ldr	r2, [pc, #16]	; (4f58 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4f46:	2120      	movs	r1, #32
    4f48:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4f4c:	4618      	mov	r0, r3
    4f4e:	2101      	movs	r1, #1
    4f50:	f000 b8cc 	b.w	50ec <arm_core_mpu_configure_dynamic_mpu_regions>
    4f54:	20002888 	.word	0x20002888
    4f58:	150b0000 	.word	0x150b0000

00004f5c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    4f5e:	4f22      	ldr	r7, [pc, #136]	; (4fe8 <mpu_configure_regions+0x8c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4f60:	2600      	movs	r6, #0
    4f62:	428e      	cmp	r6, r1
    4f64:	da0f      	bge.n	4f86 <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
    4f66:	6844      	ldr	r4, [r0, #4]
    4f68:	2c00      	cmp	r4, #0
    4f6a:	d039      	beq.n	4fe0 <mpu_configure_regions+0x84>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    4f6c:	b19b      	cbz	r3, 4f96 <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4f6e:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4f72:	ea14 0f0c 	tst.w	r4, ip
    4f76:	d008      	beq.n	4f8a <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    4f78:	481c      	ldr	r0, [pc, #112]	; (4fec <mpu_configure_regions+0x90>)
    4f7a:	4632      	mov	r2, r6
    4f7c:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4f7e:	f01c ffa4 	bl	21eca <printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4f82:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4f86:	4610      	mov	r0, r2
    4f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    4f8a:	2c1f      	cmp	r4, #31
    4f8c:	d9f4      	bls.n	4f78 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
    4f8e:	6805      	ldr	r5, [r0, #0]
		&&
    4f90:	ea1c 0f05 	tst.w	ip, r5
    4f94:	d1f0      	bne.n	4f78 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4f96:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4f98:	b2d2      	uxtb	r2, r2
	region_conf.base = new_region->start;
    4f9a:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    4f9c:	f8d0 c008 	ldr.w	ip, [r0, #8]
    4fa0:	d90f      	bls.n	4fc2 <mpu_configure_regions+0x66>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    4fa2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4fa6:	d80e      	bhi.n	4fc6 <mpu_configure_regions+0x6a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4fa8:	3c01      	subs	r4, #1
    4faa:	fab4 f484 	clz	r4, r4
    4fae:	f1c4 041f 	rsb	r4, r4, #31
    4fb2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4fb4:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4fb6:	ea4c 0404 	orr.w	r4, ip, r4
    4fba:	d906      	bls.n	4fca <mpu_configure_regions+0x6e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4fbc:	2145      	movs	r1, #69	; 0x45
    4fbe:	480c      	ldr	r0, [pc, #48]	; (4ff0 <mpu_configure_regions+0x94>)
    4fc0:	e7dd      	b.n	4f7e <mpu_configure_regions+0x22>
		return REGION_32B;
    4fc2:	2408      	movs	r4, #8
    4fc4:	e7f6      	b.n	4fb4 <mpu_configure_regions+0x58>
		return REGION_4G;
    4fc6:	243e      	movs	r4, #62	; 0x3e
    4fc8:	e7f4      	b.n	4fb4 <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4fca:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    4fce:	4315      	orrs	r5, r2
    4fd0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4fd4:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    4fd8:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4fda:	60fd      	str	r5, [r7, #12]
		reg_index++;
    4fdc:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4fde:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    4fe0:	3601      	adds	r6, #1
    4fe2:	300c      	adds	r0, #12
    4fe4:	e7bd      	b.n	4f62 <mpu_configure_regions+0x6>
    4fe6:	bf00      	nop
    4fe8:	e000ed90 	.word	0xe000ed90
    4fec:	0002a9cc 	.word	0x0002a9cc
    4ff0:	0002a9f4 	.word	0x0002a9f4

00004ff4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4ff4:	4b03      	ldr	r3, [pc, #12]	; (5004 <arm_core_mpu_enable+0x10>)
    4ff6:	2205      	movs	r2, #5
    4ff8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4ffa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4ffe:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    5002:	4770      	bx	lr
    5004:	e000ed90 	.word	0xe000ed90

00005008 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    5008:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    500c:	4b01      	ldr	r3, [pc, #4]	; (5014 <arm_core_mpu_disable+0xc>)
    500e:	2200      	movs	r2, #0
    5010:	605a      	str	r2, [r3, #4]
}
    5012:	4770      	bx	lr
    5014:	e000ed90 	.word	0xe000ed90

00005018 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    5018:	4920      	ldr	r1, [pc, #128]	; (509c <arm_mpu_init+0x84>)
{
    501a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    501c:	680c      	ldr	r4, [r1, #0]
    501e:	2c08      	cmp	r4, #8
    5020:	d90d      	bls.n	503e <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    5022:	f240 123f 	movw	r2, #319	; 0x13f
    5026:	491e      	ldr	r1, [pc, #120]	; (50a0 <arm_mpu_init+0x88>)
    5028:	481e      	ldr	r0, [pc, #120]	; (50a4 <arm_mpu_init+0x8c>)
    502a:	f01c ff4e 	bl	21eca <printk>
    502e:	481c      	ldr	r0, [pc, #112]	; (50a0 <arm_mpu_init+0x88>)
    5030:	f240 113f 	movw	r1, #319	; 0x13f
    5034:	f01d f9fb 	bl	2242e <assert_post_action>
    5038:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    503c:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    503e:	f7ff ffe3 	bl	5008 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5042:	6848      	ldr	r0, [r1, #4]
    5044:	4918      	ldr	r1, [pc, #96]	; (50a8 <arm_mpu_init+0x90>)
    5046:	2200      	movs	r2, #0
    5048:	4294      	cmp	r4, r2
    504a:	f100 000c 	add.w	r0, r0, #12
    504e:	d115      	bne.n	507c <arm_mpu_init+0x64>
	static_regions_num = mpu_config.num_regions;
    5050:	4b16      	ldr	r3, [pc, #88]	; (50ac <arm_mpu_init+0x94>)
    5052:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    5054:	f7ff ffce 	bl	4ff4 <arm_core_mpu_enable>
	__ASSERT(
    5058:	680b      	ldr	r3, [r1, #0]
    505a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    505e:	2b08      	cmp	r3, #8
    5060:	d00a      	beq.n	5078 <arm_mpu_init+0x60>
    5062:	490f      	ldr	r1, [pc, #60]	; (50a0 <arm_mpu_init+0x88>)
    5064:	480f      	ldr	r0, [pc, #60]	; (50a4 <arm_mpu_init+0x8c>)
    5066:	f44f 72b2 	mov.w	r2, #356	; 0x164
    506a:	f01c ff2e 	bl	21eca <printk>
    506e:	f44f 71b2 	mov.w	r1, #356	; 0x164
    5072:	480b      	ldr	r0, [pc, #44]	; (50a0 <arm_mpu_init+0x88>)
    5074:	f01d f9db 	bl	2242e <assert_post_action>
	return 0;
    5078:	2000      	movs	r0, #0
    507a:	e7df      	b.n	503c <arm_mpu_init+0x24>
	MPU->RNR = index;
    507c:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    507e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    5082:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    5086:	4313      	orrs	r3, r2
    5088:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    508c:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    508e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    5092:	f043 0301 	orr.w	r3, r3, #1
    5096:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5098:	3201      	adds	r2, #1
    509a:	e7d5      	b.n	5048 <arm_mpu_init+0x30>
    509c:	0002918c 	.word	0x0002918c
    50a0:	0002a98c 	.word	0x0002a98c
    50a4:	0002a026 	.word	0x0002a026
    50a8:	e000ed90 	.word	0xe000ed90
    50ac:	200043c0 	.word	0x200043c0

000050b0 <arm_core_mpu_configure_static_mpu_regions>:
{
    50b0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    50b2:	4c0b      	ldr	r4, [pc, #44]	; (50e0 <arm_core_mpu_configure_static_mpu_regions+0x30>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    50b4:	2301      	movs	r3, #1
    50b6:	7822      	ldrb	r2, [r4, #0]
    50b8:	f7ff ff50 	bl	4f5c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    50bc:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    50be:	3016      	adds	r0, #22
    50c0:	d10c      	bne.n	50dc <arm_core_mpu_configure_static_mpu_regions+0x2c>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    50c2:	4908      	ldr	r1, [pc, #32]	; (50e4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    50c4:	4808      	ldr	r0, [pc, #32]	; (50e8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    50c6:	f240 1205 	movw	r2, #261	; 0x105
    50ca:	f01c fefe 	bl	21eca <printk>
    50ce:	f240 1105 	movw	r1, #261	; 0x105
    50d2:	4804      	ldr	r0, [pc, #16]	; (50e4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
}
    50d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    50d8:	f01d b9a9 	b.w	2242e <assert_post_action>
}
    50dc:	bd10      	pop	{r4, pc}
    50de:	bf00      	nop
    50e0:	200043c0 	.word	0x200043c0
    50e4:	0002a98c 	.word	0x0002a98c
    50e8:	0002a026 	.word	0x0002a026

000050ec <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    50ec:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    50ee:	4a0f      	ldr	r2, [pc, #60]	; (512c <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    50f0:	2300      	movs	r3, #0
    50f2:	7812      	ldrb	r2, [r2, #0]
    50f4:	f7ff ff32 	bl	4f5c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    50f8:	f110 0f16 	cmn.w	r0, #22
    50fc:	d008      	beq.n	5110 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    50fe:	4b0c      	ldr	r3, [pc, #48]	; (5130 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
    5100:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    5102:	2807      	cmp	r0, #7
    5104:	dd00      	ble.n	5108 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    5106:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    5108:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    510a:	611a      	str	r2, [r3, #16]
    510c:	3001      	adds	r0, #1
    510e:	e7f8      	b.n	5102 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    5110:	4908      	ldr	r1, [pc, #32]	; (5134 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
    5112:	4809      	ldr	r0, [pc, #36]	; (5138 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    5114:	f44f 7292 	mov.w	r2, #292	; 0x124
    5118:	f01c fed7 	bl	21eca <printk>
    511c:	f44f 7192 	mov.w	r1, #292	; 0x124
    5120:	4804      	ldr	r0, [pc, #16]	; (5134 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
}
    5122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    5126:	f01d b982 	b.w	2242e <assert_post_action>
    512a:	bf00      	nop
    512c:	200043c0 	.word	0x200043c0
    5130:	e000ed90 	.word	0xe000ed90
    5134:	0002a98c 	.word	0x0002a98c
    5138:	0002a026 	.word	0x0002a026

0000513c <nordicsemi_nrf52_init>:
    513c:	f04f 0320 	mov.w	r3, #32
    5140:	f3ef 8211 	mrs	r2, BASEPRI
    5144:	f383 8811 	msr	BASEPRI, r3
    5148:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    514c:	4906      	ldr	r1, [pc, #24]	; (5168 <nordicsemi_nrf52_init+0x2c>)
    514e:	2301      	movs	r3, #1
    5150:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5154:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5158:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    515c:	f382 8811 	msr	BASEPRI, r2
    5160:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5164:	2000      	movs	r0, #0
    5166:	4770      	bx	lr
    5168:	4001e000 	.word	0x4001e000

0000516c <sys_arch_reboot>:
    *p_gpregret = val;
    516c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5170:	b2c0      	uxtb	r0, r0
    5172:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    5176:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    517a:	4905      	ldr	r1, [pc, #20]	; (5190 <sys_arch_reboot+0x24>)
    517c:	4b05      	ldr	r3, [pc, #20]	; (5194 <sys_arch_reboot+0x28>)
    517e:	68ca      	ldr	r2, [r1, #12]
    5180:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5184:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5186:	60cb      	str	r3, [r1, #12]
    5188:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    518c:	bf00      	nop
    518e:	e7fd      	b.n	518c <sys_arch_reboot+0x20>
    5190:	e000ed00 	.word	0xe000ed00
    5194:	05fa0004 	.word	0x05fa0004

00005198 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5198:	b120      	cbz	r0, 51a4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    519a:	4b03      	ldr	r3, [pc, #12]	; (51a8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    519c:	0180      	lsls	r0, r0, #6
    519e:	f043 0301 	orr.w	r3, r3, #1
    51a2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    51a4:	4770      	bx	lr
    51a6:	bf00      	nop
    51a8:	00028fd0 	.word	0x00028fd0

000051ac <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    51ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    51b0:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    51b4:	07db      	lsls	r3, r3, #31
    51b6:	d52e      	bpl.n	5216 <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    51b8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    51bc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    51c0:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    51c4:	2b07      	cmp	r3, #7
    51c6:	d126      	bne.n	5216 <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    51c8:	4b14      	ldr	r3, [pc, #80]	; (521c <board_nrf52840dongle_nrf52840_init+0x70>)
    51ca:	2201      	movs	r2, #1
    51cc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    51d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    51d4:	2a00      	cmp	r2, #0
    51d6:	d0fb      	beq.n	51d0 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    51d8:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    51dc:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    51e0:	f022 0207 	bic.w	r2, r2, #7
    51e4:	f042 0204 	orr.w	r2, r2, #4
		NRF_UICR->REGOUT0 =
    51e8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    51ec:	2200      	movs	r2, #0
    51ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    51f2:	4a0a      	ldr	r2, [pc, #40]	; (521c <board_nrf52840dongle_nrf52840_init+0x70>)
    51f4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    51f8:	2b00      	cmp	r3, #0
    51fa:	d0fb      	beq.n	51f4 <board_nrf52840dongle_nrf52840_init+0x48>
    51fc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5200:	4907      	ldr	r1, [pc, #28]	; (5220 <board_nrf52840dongle_nrf52840_init+0x74>)
    5202:	4b08      	ldr	r3, [pc, #32]	; (5224 <board_nrf52840dongle_nrf52840_init+0x78>)
    5204:	68ca      	ldr	r2, [r1, #12]
    5206:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    520a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    520c:	60cb      	str	r3, [r1, #12]
    520e:	f3bf 8f4f 	dsb	sy
    __NOP();
    5212:	bf00      	nop
    5214:	e7fd      	b.n	5212 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    5216:	2000      	movs	r0, #0
    5218:	4770      	bx	lr
    521a:	bf00      	nop
    521c:	4001e000 	.word	0x4001e000
    5220:	e000ed00 	.word	0xe000ed00
    5224:	05fa0004 	.word	0x05fa0004

00005228 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    5228:	2940      	cmp	r1, #64	; 0x40
    522a:	4b0e      	ldr	r3, [pc, #56]	; (5264 <bt_hex_real+0x3c>)
{
    522c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    522e:	bf28      	it	cs
    5230:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    5232:	4c0d      	ldr	r4, [pc, #52]	; (5268 <bt_hex_real+0x40>)
    5234:	1846      	adds	r6, r0, r1
    5236:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    5238:	42b0      	cmp	r0, r6
    523a:	f103 0302 	add.w	r3, r3, #2
    523e:	d104      	bne.n	524a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    5240:	2300      	movs	r3, #0
    5242:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    5246:	4807      	ldr	r0, [pc, #28]	; (5264 <bt_hex_real+0x3c>)
    5248:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    524a:	7802      	ldrb	r2, [r0, #0]
    524c:	0912      	lsrs	r2, r2, #4
    524e:	5ca2      	ldrb	r2, [r4, r2]
    5250:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    5254:	f810 2b01 	ldrb.w	r2, [r0], #1
    5258:	f002 020f 	and.w	r2, r2, #15
    525c:	5ca2      	ldrb	r2, [r4, r2]
    525e:	f803 2c01 	strb.w	r2, [r3, #-1]
    5262:	e7e9      	b.n	5238 <bt_hex_real+0x10>
    5264:	200043c1 	.word	0x200043c1
    5268:	0002aa7e 	.word	0x0002aa7e

0000526c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    526c:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    526e:	7803      	ldrb	r3, [r0, #0]
    5270:	b08b      	sub	sp, #44	; 0x2c
    5272:	4604      	mov	r4, r0
    5274:	ad07      	add	r5, sp, #28
    5276:	2b03      	cmp	r3, #3
    5278:	d821      	bhi.n	52be <bt_addr_le_str_real+0x52>
    527a:	e8df f003 	tbb	[pc, r3]
    527e:	1a02      	.short	0x1a02
    5280:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    5282:	4912      	ldr	r1, [pc, #72]	; (52cc <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    5284:	4628      	mov	r0, r5
    5286:	f01e ff06 	bl	24096 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    528a:	7863      	ldrb	r3, [r4, #1]
    528c:	9304      	str	r3, [sp, #16]
    528e:	78a3      	ldrb	r3, [r4, #2]
    5290:	9303      	str	r3, [sp, #12]
    5292:	78e3      	ldrb	r3, [r4, #3]
    5294:	9302      	str	r3, [sp, #8]
    5296:	7923      	ldrb	r3, [r4, #4]
    5298:	9301      	str	r3, [sp, #4]
    529a:	7963      	ldrb	r3, [r4, #5]
    529c:	9300      	str	r3, [sp, #0]
    529e:	9505      	str	r5, [sp, #20]
    52a0:	79a3      	ldrb	r3, [r4, #6]
    52a2:	4a0b      	ldr	r2, [pc, #44]	; (52d0 <bt_addr_le_str_real+0x64>)
    52a4:	480b      	ldr	r0, [pc, #44]	; (52d4 <bt_addr_le_str_real+0x68>)
    52a6:	211e      	movs	r1, #30
    52a8:	f01c fe1c 	bl	21ee4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    52ac:	4809      	ldr	r0, [pc, #36]	; (52d4 <bt_addr_le_str_real+0x68>)
    52ae:	b00b      	add	sp, #44	; 0x2c
    52b0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    52b2:	4909      	ldr	r1, [pc, #36]	; (52d8 <bt_addr_le_str_real+0x6c>)
    52b4:	e7e6      	b.n	5284 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    52b6:	4909      	ldr	r1, [pc, #36]	; (52dc <bt_addr_le_str_real+0x70>)
    52b8:	e7e4      	b.n	5284 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    52ba:	4909      	ldr	r1, [pc, #36]	; (52e0 <bt_addr_le_str_real+0x74>)
    52bc:	e7e2      	b.n	5284 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    52be:	4a09      	ldr	r2, [pc, #36]	; (52e4 <bt_addr_le_str_real+0x78>)
    52c0:	210a      	movs	r1, #10
    52c2:	4628      	mov	r0, r5
    52c4:	f01c fe0e 	bl	21ee4 <snprintk>
		break;
    52c8:	e7df      	b.n	528a <bt_addr_le_str_real+0x1e>
    52ca:	bf00      	nop
    52cc:	0002aa32 	.word	0x0002aa32
    52d0:	0002aa5b 	.word	0x0002aa5b
    52d4:	20004442 	.word	0x20004442
    52d8:	0002aa39 	.word	0x0002aa39
    52dc:	0002aa40 	.word	0x0002aa40
    52e0:	0002aa4a 	.word	0x0002aa4a
    52e4:	0002aa54 	.word	0x0002aa54

000052e8 <sys_memcpy_swap.constprop.2>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    52e8:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
    52ea:	b570      	push	{r4, r5, r6, lr}
    52ec:	4604      	mov	r4, r0
    52ee:	460e      	mov	r6, r1
    52f0:	f101 0520 	add.w	r5, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    52f4:	d915      	bls.n	5322 <sys_memcpy_swap.constprop.2+0x3a>
    52f6:	42a8      	cmp	r0, r5
    52f8:	d20a      	bcs.n	5310 <sys_memcpy_swap.constprop.2+0x28>
    52fa:	490c      	ldr	r1, [pc, #48]	; (532c <sys_memcpy_swap.constprop.2+0x44>)
    52fc:	480c      	ldr	r0, [pc, #48]	; (5330 <sys_memcpy_swap.constprop.2+0x48>)
    52fe:	f240 2219 	movw	r2, #537	; 0x219
    5302:	f01c fde2 	bl	21eca <printk>
    5306:	f240 2119 	movw	r1, #537	; 0x219
    530a:	4808      	ldr	r0, [pc, #32]	; (532c <sys_memcpy_swap.constprop.2+0x44>)
    530c:	f01d f88f 	bl	2242e <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
    5310:	462b      	mov	r3, r5
    5312:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
    5314:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    5318:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
    531c:	42b3      	cmp	r3, r6
    531e:	d1f9      	bne.n	5314 <sys_memcpy_swap.constprop.2+0x2c>
	}
}
    5320:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    5322:	d0ea      	beq.n	52fa <sys_memcpy_swap.constprop.2+0x12>
    5324:	f100 0320 	add.w	r3, r0, #32
    5328:	4299      	cmp	r1, r3
    532a:	e7e5      	b.n	52f8 <sys_memcpy_swap.constprop.2+0x10>
    532c:	0002ab48 	.word	0x0002ab48
    5330:	0002a026 	.word	0x0002a026

00005334 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    5334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5338:	4e60      	ldr	r6, [pc, #384]	; (54bc <ecc_thread+0x188>)
	return z_impl_k_sem_take(sem, timeout);
    533a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 54e4 <ecc_thread+0x1b0>
    533e:	4635      	mov	r5, r6
    5340:	f04f 32ff 	mov.w	r2, #4294967295
    5344:	f04f 33ff 	mov.w	r3, #4294967295
    5348:	4640      	mov	r0, r8
    534a:	f01a fcd3 	bl	1fcf4 <z_impl_k_sem_take>
    534e:	f3bf 8f5b 	dmb	ish
    5352:	6834      	ldr	r4, [r6, #0]
    5354:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    5358:	f014 0401 	ands.w	r4, r4, #1
    535c:	d054      	beq.n	5408 <ecc_thread+0xd4>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    535e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 54d4 <ecc_thread+0x1a0>
    5362:	4c57      	ldr	r4, [pc, #348]	; (54c0 <ecc_thread+0x18c>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    5364:	4f57      	ldr	r7, [pc, #348]	; (54c4 <ecc_thread+0x190>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    5366:	4858      	ldr	r0, [pc, #352]	; (54c8 <ecc_thread+0x194>)
    5368:	464a      	mov	r2, r9
    536a:	4621      	mov	r1, r4
    536c:	f01d fd5f 	bl	22e2e <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    5370:	bbc0      	cbnz	r0, 53e4 <ecc_thread+0xb0>
			BT_ERR("Failed to create ECC public/private pair");
    5372:	2145      	movs	r1, #69	; 0x45
    5374:	4855      	ldr	r0, [pc, #340]	; (54cc <ecc_thread+0x198>)
    5376:	f01c fda8 	bl	21eca <printk>
			return BT_HCI_ERR_UNSPECIFIED;
    537a:	241f      	movs	r4, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    537c:	f04f 32ff 	mov.w	r2, #4294967295
    5380:	f04f 33ff 	mov.w	r3, #4294967295
    5384:	2001      	movs	r0, #1
    5386:	f000 fa91 	bl	58ac <bt_buf_get_rx>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    538a:	f100 0708 	add.w	r7, r0, #8
    538e:	2102      	movs	r1, #2
    5390:	4681      	mov	r9, r0
    5392:	4638      	mov	r0, r7
    5394:	f017 fbb8 	bl	1cb08 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5398:	233e      	movs	r3, #62	; 0x3e
    539a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    539c:	2342      	movs	r3, #66	; 0x42
    539e:	7043      	strb	r3, [r0, #1]
    53a0:	2101      	movs	r1, #1
    53a2:	4638      	mov	r0, r7
    53a4:	f017 fbb0 	bl	1cb08 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    53a8:	2308      	movs	r3, #8
    53aa:	7003      	strb	r3, [r0, #0]
    53ac:	2141      	movs	r1, #65	; 0x41
    53ae:	4638      	mov	r0, r7
    53b0:	f017 fbaa 	bl	1cb08 <net_buf_simple_add>
    53b4:	4607      	mov	r7, r0
	evt->status = status;
    53b6:	f800 4b01 	strb.w	r4, [r0], #1
	if (status) {
    53ba:	b1e4      	cbz	r4, 53f6 <ecc_thread+0xc2>
		(void)memset(evt->key, 0, sizeof(evt->key));
    53bc:	2240      	movs	r2, #64	; 0x40
    53be:	2100      	movs	r1, #0
    53c0:	f01e feef 	bl	241a2 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    53c4:	f3bf 8f5b 	dmb	ish
    53c8:	e855 3f00 	ldrex	r3, [r5]
    53cc:	f023 0301 	bic.w	r3, r3, #1
    53d0:	e845 3200 	strex	r2, r3, [r5]
    53d4:	2a00      	cmp	r2, #0
    53d6:	d1f7      	bne.n	53c8 <ecc_thread+0x94>
    53d8:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    53dc:	4648      	mov	r0, r9
    53de:	f001 fb55 	bl	6a8c <bt_recv>
    53e2:	e7ad      	b.n	5340 <ecc_thread+0xc>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    53e4:	2220      	movs	r2, #32
    53e6:	4639      	mov	r1, r7
    53e8:	4620      	mov	r0, r4
    53ea:	f01e fe89 	bl	24100 <memcmp>
    53ee:	2800      	cmp	r0, #0
    53f0:	d0b9      	beq.n	5366 <ecc_thread+0x32>
	return 0;
    53f2:	2400      	movs	r4, #0
    53f4:	e7c2      	b.n	537c <ecc_thread+0x48>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    53f6:	4934      	ldr	r1, [pc, #208]	; (54c8 <ecc_thread+0x194>)
    53f8:	f7ff ff76 	bl	52e8 <sys_memcpy_swap.constprop.2>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    53fc:	4934      	ldr	r1, [pc, #208]	; (54d0 <ecc_thread+0x19c>)
    53fe:	f107 0021 	add.w	r0, r7, #33	; 0x21
    5402:	f7ff ff71 	bl	52e8 <sys_memcpy_swap.constprop.2>
    5406:	e7dd      	b.n	53c4 <ecc_thread+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5408:	f3bf 8f5b 	dmb	ish
    540c:	6833      	ldr	r3, [r6, #0]
    540e:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    5412:	079b      	lsls	r3, r3, #30
    5414:	d548      	bpl.n	54a8 <ecc_thread+0x174>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    5416:	492f      	ldr	r1, [pc, #188]	; (54d4 <ecc_thread+0x1a0>)
    5418:	482b      	ldr	r0, [pc, #172]	; (54c8 <ecc_thread+0x194>)
    541a:	f01e fbd9 	bl	23bd0 <uECC_valid_public_key>
	if (ret < 0) {
    541e:	1e02      	subs	r2, r0, #0
    5420:	da33      	bge.n	548a <ecc_thread+0x156>
		BT_ERR("public key is not valid (ret %d)", ret);
    5422:	2145      	movs	r1, #69	; 0x45
    5424:	482c      	ldr	r0, [pc, #176]	; (54d8 <ecc_thread+0x1a4>)
    5426:	f01c fd50 	bl	21eca <printk>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    542a:	f04f 32ff 	mov.w	r2, #4294967295
    542e:	f04f 33ff 	mov.w	r3, #4294967295
    5432:	2001      	movs	r0, #1
    5434:	f000 fa3a 	bl	58ac <bt_buf_get_rx>
    5438:	f100 0708 	add.w	r7, r0, #8
    543c:	2102      	movs	r1, #2
    543e:	4681      	mov	r9, r0
    5440:	4638      	mov	r0, r7
    5442:	f017 fb61 	bl	1cb08 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5446:	233e      	movs	r3, #62	; 0x3e
    5448:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    544a:	2322      	movs	r3, #34	; 0x22
    544c:	7043      	strb	r3, [r0, #1]
    544e:	2101      	movs	r1, #1
    5450:	4638      	mov	r0, r7
    5452:	f017 fb59 	bl	1cb08 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    5456:	2309      	movs	r3, #9
    5458:	7003      	strb	r3, [r0, #0]
    545a:	2121      	movs	r1, #33	; 0x21
    545c:	4638      	mov	r0, r7
    545e:	f017 fb53 	bl	1cb08 <net_buf_simple_add>
    5462:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    5464:	3001      	adds	r0, #1
    5466:	b9cc      	cbnz	r4, 549c <ecc_thread+0x168>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    5468:	221f      	movs	r2, #31
    546a:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    546c:	21ff      	movs	r1, #255	; 0xff
    546e:	2220      	movs	r2, #32
    5470:	f01e fe97 	bl	241a2 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5474:	f3bf 8f5b 	dmb	ish
    5478:	e855 3f00 	ldrex	r3, [r5]
    547c:	f023 0302 	bic.w	r3, r3, #2
    5480:	e845 3200 	strex	r2, r3, [r5]
    5484:	2a00      	cmp	r2, #0
    5486:	d0a7      	beq.n	53d8 <ecc_thread+0xa4>
    5488:	e7f6      	b.n	5478 <ecc_thread+0x144>
		ret = uECC_shared_secret(ecc.public_key_be, ecc.private_key_be,
    548a:	4a0f      	ldr	r2, [pc, #60]	; (54c8 <ecc_thread+0x194>)
    548c:	4b11      	ldr	r3, [pc, #68]	; (54d4 <ecc_thread+0x1a0>)
    548e:	f1a2 0120 	sub.w	r1, r2, #32
    5492:	4610      	mov	r0, r2
    5494:	f01d fd1a 	bl	22ecc <uECC_shared_secret>
    5498:	4604      	mov	r4, r0
    549a:	e7c6      	b.n	542a <ecc_thread+0xf6>
		evt->status = 0U;
    549c:	2200      	movs	r2, #0
    549e:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    54a0:	4909      	ldr	r1, [pc, #36]	; (54c8 <ecc_thread+0x194>)
    54a2:	f7ff ff21 	bl	52e8 <sys_memcpy_swap.constprop.2>
    54a6:	e7e5      	b.n	5474 <ecc_thread+0x140>
			emulate_le_generate_dhkey();
		} else {
			__ASSERT(0, "Unhandled ECC command");
    54a8:	22e0      	movs	r2, #224	; 0xe0
    54aa:	490c      	ldr	r1, [pc, #48]	; (54dc <ecc_thread+0x1a8>)
    54ac:	480c      	ldr	r0, [pc, #48]	; (54e0 <ecc_thread+0x1ac>)
    54ae:	f01c fd0c 	bl	21eca <printk>
    54b2:	21e0      	movs	r1, #224	; 0xe0
    54b4:	4809      	ldr	r0, [pc, #36]	; (54dc <ecc_thread+0x1a8>)
    54b6:	f01c ffba 	bl	2242e <assert_post_action>
    54ba:	e741      	b.n	5340 <ecc_thread+0xc>
    54bc:	20002894 	.word	0x20002894
    54c0:	20004460 	.word	0x20004460
    54c4:	0002aa96 	.word	0x0002aa96
    54c8:	20004480 	.word	0x20004480
    54cc:	0002aab6 	.word	0x0002aab6
    54d0:	200044a0 	.word	0x200044a0
    54d4:	000291ac 	.word	0x000291ac
    54d8:	0002aae4 	.word	0x0002aae4
    54dc:	0002ab0a 	.word	0x0002ab0a
    54e0:	0002a026 	.word	0x0002a026
    54e4:	20000f74 	.word	0x20000f74

000054e8 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    54e8:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    54ea:	7d05      	ldrb	r5, [r0, #20]
    54ec:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    54ee:	b9ad      	cbnz	r5, 551c <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    54f0:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    54f2:	881a      	ldrh	r2, [r3, #0]
    54f4:	f242 0125 	movw	r1, #8229	; 0x2025
    54f8:	428a      	cmp	r2, r1
    54fa:	d017      	beq.n	552c <bt_hci_ecc_send+0x44>
    54fc:	f242 0126 	movw	r1, #8230	; 0x2026
    5500:	428a      	cmp	r2, r1
    5502:	d03c      	beq.n	557e <bt_hci_ecc_send+0x96>
    5504:	f242 0101 	movw	r1, #8193	; 0x2001
    5508:	428a      	cmp	r2, r1
    550a:	d107      	bne.n	551c <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    550c:	78da      	ldrb	r2, [r3, #3]
    550e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5512:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    5514:	791a      	ldrb	r2, [r3, #4]
    5516:	f022 0201 	bic.w	r2, r2, #1
    551a:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    551c:	4b32      	ldr	r3, [pc, #200]	; (55e8 <bt_hci_ecc_send+0x100>)
    551e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    5522:	4620      	mov	r0, r4
    5524:	691b      	ldr	r3, [r3, #16]
}
    5526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    552a:	4718      	bx	r3
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    552c:	2103      	movs	r1, #3
    552e:	3008      	adds	r0, #8
    5530:	f017 fab0 	bl	1ca94 <net_buf_simple_pull>
	net_buf_unref(buf);
    5534:	4620      	mov	r0, r4
    5536:	f017 f997 	bl	1c868 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    553a:	f3bf 8f5b 	dmb	ish
    553e:	4b2b      	ldr	r3, [pc, #172]	; (55ec <bt_hci_ecc_send+0x104>)
    5540:	681a      	ldr	r2, [r3, #0]
    5542:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    5546:	0790      	lsls	r0, r2, #30
    5548:	d507      	bpl.n	555a <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    554a:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    554c:	4629      	mov	r1, r5
    554e:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    5552:	f01e fe5a 	bl	2420a <send_cmd_status>
}
    5556:	2000      	movs	r0, #0
    5558:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    555a:	f3bf 8f5b 	dmb	ish
    555e:	e853 2f00 	ldrex	r2, [r3]
    5562:	f042 0101 	orr.w	r1, r2, #1
    5566:	e843 1000 	strex	r0, r1, [r3]
    556a:	2800      	cmp	r0, #0
    556c:	d1f7      	bne.n	555e <bt_hci_ecc_send+0x76>
    556e:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    5572:	07d1      	lsls	r1, r2, #31
    5574:	d4e9      	bmi.n	554a <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    5576:	481e      	ldr	r0, [pc, #120]	; (55f0 <bt_hci_ecc_send+0x108>)
    5578:	f01a fb80 	bl	1fc7c <z_impl_k_sem_give>
    557c:	e7e6      	b.n	554c <bt_hci_ecc_send+0x64>
    557e:	2103      	movs	r1, #3
    5580:	3008      	adds	r0, #8
    5582:	f017 fa87 	bl	1ca94 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5586:	f3bf 8f5b 	dmb	ish
    558a:	4b18      	ldr	r3, [pc, #96]	; (55ec <bt_hci_ecc_send+0x104>)
    558c:	681a      	ldr	r2, [r3, #0]
    558e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    5592:	07d2      	lsls	r2, r2, #31
    5594:	d507      	bpl.n	55a6 <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    5596:	250c      	movs	r5, #12
	net_buf_unref(buf);
    5598:	4620      	mov	r0, r4
    559a:	f017 f965 	bl	1c868 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    559e:	4629      	mov	r1, r5
    55a0:	f242 0026 	movw	r0, #8230	; 0x2026
    55a4:	e7d5      	b.n	5552 <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    55a6:	89a2      	ldrh	r2, [r4, #12]
    55a8:	2a3f      	cmp	r2, #63	; 0x3f
    55aa:	d91b      	bls.n	55e4 <bt_hci_ecc_send+0xfc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    55ac:	f3bf 8f5b 	dmb	ish
    55b0:	e853 2f00 	ldrex	r2, [r3]
    55b4:	f042 0102 	orr.w	r1, r2, #2
    55b8:	e843 1000 	strex	r0, r1, [r3]
    55bc:	2800      	cmp	r0, #0
    55be:	d1f7      	bne.n	55b0 <bt_hci_ecc_send+0xc8>
    55c0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    55c4:	0793      	lsls	r3, r2, #30
    55c6:	d4e6      	bmi.n	5596 <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    55c8:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.public_key_be, cmd->key, 32);
    55ca:	480a      	ldr	r0, [pc, #40]	; (55f4 <bt_hci_ecc_send+0x10c>)
    55cc:	4631      	mov	r1, r6
    55ce:	f7ff fe8b 	bl	52e8 <sys_memcpy_swap.constprop.2>
	sys_memcpy_swap(&ecc.public_key_be[32], &cmd->key[32], 32);
    55d2:	f106 0120 	add.w	r1, r6, #32
    55d6:	4808      	ldr	r0, [pc, #32]	; (55f8 <bt_hci_ecc_send+0x110>)
    55d8:	f7ff fe86 	bl	52e8 <sys_memcpy_swap.constprop.2>
    55dc:	4804      	ldr	r0, [pc, #16]	; (55f0 <bt_hci_ecc_send+0x108>)
    55de:	f01a fb4d 	bl	1fc7c <z_impl_k_sem_give>
    55e2:	e7d9      	b.n	5598 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    55e4:	2512      	movs	r5, #18
    55e6:	e7d7      	b.n	5598 <bt_hci_ecc_send+0xb0>
    55e8:	20000198 	.word	0x20000198
    55ec:	20002894 	.word	0x20002894
    55f0:	20000f74 	.word	0x20000f74
    55f4:	20004480 	.word	0x20004480
    55f8:	200044a0 	.word	0x200044a0

000055fc <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    55fc:	b510      	push	{r4, lr}
    55fe:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5600:	4c0c      	ldr	r4, [pc, #48]	; (5634 <bt_hci_ecc_init+0x38>)
    5602:	490d      	ldr	r1, [pc, #52]	; (5638 <bt_hci_ecc_init+0x3c>)
    5604:	2200      	movs	r2, #0
    5606:	2300      	movs	r3, #0
    5608:	e9cd 2306 	strd	r2, r3, [sp, #24]
    560c:	2300      	movs	r3, #0
    560e:	220a      	movs	r2, #10
    5610:	e9cd 2303 	strd	r2, r3, [sp, #12]
    5614:	e9cd 3301 	strd	r3, r3, [sp, #4]
    5618:	9300      	str	r3, [sp, #0]
    561a:	f44f 628a 	mov.w	r2, #1104	; 0x450
    561e:	4b07      	ldr	r3, [pc, #28]	; (563c <bt_hci_ecc_init+0x40>)
    5620:	4620      	mov	r0, r4
    5622:	f01a fc5b 	bl	1fedc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    5626:	4906      	ldr	r1, [pc, #24]	; (5640 <bt_hci_ecc_init+0x44>)
    5628:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    562a:	b008      	add	sp, #32
    562c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5630:	f023 b8a0 	b.w	28774 <z_impl_k_thread_name_set>
    5634:	20001220 	.word	0x20001220
    5638:	20004580 	.word	0x20004580
    563c:	00005335 	.word	0x00005335
    5640:	0002aa8f 	.word	0x0002aa8f

00005644 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    5644:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
    5646:	2149      	movs	r1, #73	; 0x49
    5648:	4809      	ldr	r0, [pc, #36]	; (5670 <save_id+0x2c>)
    564a:	f01c fc3e 	bl	21eca <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    564e:	4909      	ldr	r1, [pc, #36]	; (5674 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    5650:	4809      	ldr	r0, [pc, #36]	; (5678 <save_id+0x34>)
    5652:	79ca      	ldrb	r2, [r1, #7]
    5654:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    5658:	f7fd fe32 	bl	32c0 <settings_save_one>
	if (err) {
    565c:	4602      	mov	r2, r0
    565e:	b128      	cbz	r0, 566c <save_id+0x28>
		BT_ERR("Failed to save ID (err %d)", err);
    5660:	2145      	movs	r1, #69	; 0x45
    5662:	4806      	ldr	r0, [pc, #24]	; (567c <save_id+0x38>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    5664:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    5668:	f01c bc2f 	b.w	21eca <printk>
}
    566c:	bd08      	pop	{r3, pc}
    566e:	bf00      	nop
    5670:	0002ac0b 	.word	0x0002ac0b
    5674:	20000198 	.word	0x20000198
    5678:	0002ac1a 	.word	0x0002ac1a
    567c:	0002ac20 	.word	0x0002ac20

00005680 <set>:
{
    5680:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5684:	4617      	mov	r7, r2
    5686:	4698      	mov	r8, r3
	if (!name) {
    5688:	4604      	mov	r4, r0
    568a:	b930      	cbnz	r0, 569a <set+0x1a>
		BT_ERR("Insufficient number of arguments");
    568c:	2145      	movs	r1, #69	; 0x45
    568e:	481d      	ldr	r0, [pc, #116]	; (5704 <set+0x84>)
    5690:	f01c fc1b 	bl	21eca <printk>
	return -ENOENT;
    5694:	f06f 0401 	mvn.w	r4, #1
    5698:	e018      	b.n	56cc <set+0x4c>
	len = settings_name_next(name, &next);
    569a:	a901      	add	r1, sp, #4
    569c:	f01d fa76 	bl	22b8c <settings_name_next>
	if (!strncmp(name, "id", len)) {
    56a0:	4919      	ldr	r1, [pc, #100]	; (5708 <set+0x88>)
    56a2:	4602      	mov	r2, r0
    56a4:	4620      	mov	r0, r4
    56a6:	f01e fd1c 	bl	240e2 <strncmp>
    56aa:	4606      	mov	r6, r0
    56ac:	2800      	cmp	r0, #0
    56ae:	d1f1      	bne.n	5694 <set+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    56b0:	f3bf 8f5b 	dmb	ish
    56b4:	4d15      	ldr	r5, [pc, #84]	; (570c <set+0x8c>)
    56b6:	682c      	ldr	r4, [r5, #0]
    56b8:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    56bc:	f3c4 0480 	ubfx	r4, r4, #2, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    56c0:	b144      	cbz	r4, 56d4 <set+0x54>
			BT_WARN("Ignoring identities stored in flash");
    56c2:	2157      	movs	r1, #87	; 0x57
    56c4:	4812      	ldr	r0, [pc, #72]	; (5710 <set+0x90>)
    56c6:	f01c fc00 	bl	21eca <printk>
			return 0;
    56ca:	4634      	mov	r4, r6
}
    56cc:	4620      	mov	r0, r4
    56ce:	b002      	add	sp, #8
    56d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    56d4:	3d94      	subs	r5, #148	; 0x94
    56d6:	2207      	movs	r2, #7
    56d8:	4629      	mov	r1, r5
    56da:	4640      	mov	r0, r8
    56dc:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
    56de:	2806      	cmp	r0, #6
    56e0:	d80a      	bhi.n	56f8 <set+0x78>
				BT_ERR("Invalid length ID address in storage");
    56e2:	2145      	movs	r1, #69	; 0x45
    56e4:	480b      	ldr	r0, [pc, #44]	; (5714 <set+0x94>)
    56e6:	f01c fbf0 	bl	21eca <printk>
			(void)memset(bt_dev.id_addr, 0,
    56ea:	2207      	movs	r2, #7
    56ec:	4621      	mov	r1, r4
    56ee:	4628      	mov	r0, r5
    56f0:	f01e fd57 	bl	241a2 <memset>
			bt_dev.id_count = 0U;
    56f4:	71ec      	strb	r4, [r5, #7]
    56f6:	e7e9      	b.n	56cc <set+0x4c>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    56f8:	2307      	movs	r3, #7
    56fa:	fbb0 f0f3 	udiv	r0, r0, r3
    56fe:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    5700:	e7e4      	b.n	56cc <set+0x4c>
    5702:	bf00      	nop
    5704:	0002ac40 	.word	0x0002ac40
    5708:	0002aa47 	.word	0x0002aa47
    570c:	2000022c 	.word	0x2000022c
    5710:	0002ac66 	.word	0x0002ac66
    5714:	0002ac8f 	.word	0x0002ac8f

00005718 <bt_settings_encode_key>:
{
    5718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    571c:	b088      	sub	sp, #32
    571e:	799c      	ldrb	r4, [r3, #6]
    5720:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    5724:	795d      	ldrb	r5, [r3, #5]
    5726:	791e      	ldrb	r6, [r3, #4]
    5728:	78df      	ldrb	r7, [r3, #3]
    572a:	f893 c002 	ldrb.w	ip, [r3, #2]
    572e:	f893 e001 	ldrb.w	lr, [r3, #1]
    5732:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    5734:	f1b8 0f00 	cmp.w	r8, #0
    5738:	d00e      	beq.n	5758 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    573a:	e9cd 3806 	strd	r3, r8, [sp, #24]
    573e:	e9cd ce04 	strd	ip, lr, [sp, #16]
    5742:	4613      	mov	r3, r2
    5744:	e9cd 6702 	strd	r6, r7, [sp, #8]
    5748:	e9cd 4500 	strd	r4, r5, [sp]
    574c:	4a08      	ldr	r2, [pc, #32]	; (5770 <bt_settings_encode_key+0x58>)
    574e:	f01c fbc9 	bl	21ee4 <snprintk>
}
    5752:	b008      	add	sp, #32
    5754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    5758:	e9cd e305 	strd	lr, r3, [sp, #20]
    575c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    5760:	4613      	mov	r3, r2
    5762:	e9cd 5601 	strd	r5, r6, [sp, #4]
    5766:	9400      	str	r4, [sp, #0]
    5768:	4a02      	ldr	r2, [pc, #8]	; (5774 <bt_settings_encode_key+0x5c>)
    576a:	f01c fbbb 	bl	21ee4 <snprintk>
}
    576e:	e7f0      	b.n	5752 <bt_settings_encode_key+0x3a>
    5770:	0002ab73 	.word	0x0002ab73
    5774:	0002ab97 	.word	0x0002ab97

00005778 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5778:	4909      	ldr	r1, [pc, #36]	; (57a0 <bt_settings_save_id+0x28>)
    577a:	f3bf 8f5b 	dmb	ish
    577e:	e851 3f00 	ldrex	r3, [r1]
    5782:	f043 0201 	orr.w	r2, r3, #1
    5786:	e841 2000 	strex	r0, r2, [r1]
    578a:	2800      	cmp	r0, #0
    578c:	d1f7      	bne.n	577e <bt_settings_save_id+0x6>
    578e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5792:	07db      	lsls	r3, r3, #31
    5794:	d403      	bmi.n	579e <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    5796:	3908      	subs	r1, #8
    5798:	4802      	ldr	r0, [pc, #8]	; (57a4 <bt_settings_save_id+0x2c>)
    579a:	f022 bf78 	b.w	2868e <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    579e:	4770      	bx	lr
    57a0:	200005b4 	.word	0x200005b4
    57a4:	20002170 	.word	0x20002170

000057a8 <commit>:

static int commit(void)
{
    57a8:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    57aa:	4c17      	ldr	r4, [pc, #92]	; (5808 <commit+0x60>)
    57ac:	79e3      	ldrb	r3, [r4, #7]
    57ae:	b96b      	cbnz	r3, 57cc <commit+0x24>
		bt_setup_public_id_addr();
    57b0:	f001 fcbe 	bl	7130 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    57b4:	79e3      	ldrb	r3, [r4, #7]
    57b6:	b94b      	cbnz	r3, 57cc <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    57b8:	f001 fd46 	bl	7248 <bt_setup_random_id_addr>
		if (err) {
    57bc:	4604      	mov	r4, r0
    57be:	b128      	cbz	r0, 57cc <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    57c0:	2145      	movs	r1, #69	; 0x45
    57c2:	4812      	ldr	r0, [pc, #72]	; (580c <commit+0x64>)
    57c4:	f01c fb81 	bl	21eca <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    57c8:	4620      	mov	r0, r4
    57ca:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    57cc:	4d10      	ldr	r5, [pc, #64]	; (5810 <commit+0x68>)
    57ce:	f3bf 8f5b 	dmb	ish
    57d2:	682b      	ldr	r3, [r5, #0]
    57d4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    57d8:	079b      	lsls	r3, r3, #30
    57da:	d401      	bmi.n	57e0 <commit+0x38>
		bt_finalize_init();
    57dc:	f001 fa1a 	bl	6c14 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    57e0:	f3bf 8f5b 	dmb	ish
    57e4:	e855 4f00 	ldrex	r4, [r5]
    57e8:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    57ec:	e845 3200 	strex	r2, r3, [r5]
    57f0:	2a00      	cmp	r2, #0
    57f2:	d1f7      	bne.n	57e4 <commit+0x3c>
    57f4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    57f8:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    57fc:	d0e4      	beq.n	57c8 <commit+0x20>
		bt_settings_save_id();
    57fe:	f7ff ffbb 	bl	5778 <bt_settings_save_id>
	return 0;
    5802:	2400      	movs	r4, #0
    5804:	e7e0      	b.n	57c8 <commit+0x20>
    5806:	bf00      	nop
    5808:	20000198 	.word	0x20000198
    580c:	0002abe2 	.word	0x0002abe2
    5810:	2000022c 	.word	0x2000022c

00005814 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    5814:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    5816:	f7fd febd 	bl	3594 <settings_subsys_init>
	if (err) {
    581a:	4604      	mov	r4, r0
    581c:	b120      	cbz	r0, 5828 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    581e:	4602      	mov	r2, r0
    5820:	2145      	movs	r1, #69	; 0x45
    5822:	4802      	ldr	r0, [pc, #8]	; (582c <bt_settings_init+0x18>)
    5824:	f01c fb51 	bl	21eca <printk>
		return err;
	}

	return 0;
}
    5828:	4620      	mov	r0, r4
    582a:	bd10      	pop	{r4, pc}
    582c:	0002abb8 	.word	0x0002abb8

00005830 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    5830:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    5832:	7802      	ldrb	r2, [r0, #0]
    5834:	2a01      	cmp	r2, #1
{
    5836:	4604      	mov	r4, r0
    5838:	460b      	mov	r3, r1
	switch (src->type) {
    583a:	d017      	beq.n	586c <uuid_to_uuid128+0x3c>
    583c:	b11a      	cbz	r2, 5846 <uuid_to_uuid128+0x16>
    583e:	2a02      	cmp	r2, #2
    5840:	d02c      	beq.n	589c <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    5842:	bcf0      	pop	{r4, r5, r6, r7}
    5844:	4770      	bx	lr
		*dst = uuid128_base;
    5846:	4a18      	ldr	r2, [pc, #96]	; (58a8 <uuid_to_uuid128+0x78>)
    5848:	460d      	mov	r5, r1
    584a:	f102 0710 	add.w	r7, r2, #16
    584e:	6810      	ldr	r0, [r2, #0]
    5850:	6851      	ldr	r1, [r2, #4]
    5852:	462e      	mov	r6, r5
    5854:	c603      	stmia	r6!, {r0, r1}
    5856:	3208      	adds	r2, #8
    5858:	42ba      	cmp	r2, r7
    585a:	4635      	mov	r5, r6
    585c:	d1f7      	bne.n	584e <uuid_to_uuid128+0x1e>
    585e:	7812      	ldrb	r2, [r2, #0]
    5860:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    5862:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    5864:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    5866:	0a12      	lsrs	r2, r2, #8
    5868:	739a      	strb	r2, [r3, #14]
    586a:	e7ea      	b.n	5842 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    586c:	4a0e      	ldr	r2, [pc, #56]	; (58a8 <uuid_to_uuid128+0x78>)
    586e:	460d      	mov	r5, r1
    5870:	f102 0710 	add.w	r7, r2, #16
    5874:	6810      	ldr	r0, [r2, #0]
    5876:	6851      	ldr	r1, [r2, #4]
    5878:	462e      	mov	r6, r5
    587a:	c603      	stmia	r6!, {r0, r1}
    587c:	3208      	adds	r2, #8
    587e:	42ba      	cmp	r2, r7
    5880:	4635      	mov	r5, r6
    5882:	d1f7      	bne.n	5874 <uuid_to_uuid128+0x44>
    5884:	7812      	ldrb	r2, [r2, #0]
    5886:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    5888:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    588a:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    588c:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    5890:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    5892:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    5894:	0a12      	lsrs	r2, r2, #8
    5896:	7399      	strb	r1, [r3, #14]
    5898:	741a      	strb	r2, [r3, #16]
    589a:	e7d2      	b.n	5842 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    589c:	4601      	mov	r1, r0
    589e:	2211      	movs	r2, #17
    58a0:	4618      	mov	r0, r3
}
    58a2:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    58a4:	f01e bc53 	b.w	2414e <memcpy>
    58a8:	0002acd3 	.word	0x0002acd3

000058ac <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    58ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58ae:	461f      	mov	r7, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    58b0:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    58b4:	2b01      	cmp	r3, #1
{
    58b6:	4605      	mov	r5, r0
    58b8:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    58ba:	d00a      	beq.n	58d2 <bt_buf_get_rx+0x26>
    58bc:	2805      	cmp	r0, #5
    58be:	d008      	beq.n	58d2 <bt_buf_get_rx+0x26>
    58c0:	490b      	ldr	r1, [pc, #44]	; (58f0 <bt_buf_get_rx+0x44>)
    58c2:	480c      	ldr	r0, [pc, #48]	; (58f4 <bt_buf_get_rx+0x48>)
    58c4:	2234      	movs	r2, #52	; 0x34
    58c6:	f01c fb00 	bl	21eca <printk>
    58ca:	2134      	movs	r1, #52	; 0x34
    58cc:	4808      	ldr	r0, [pc, #32]	; (58f0 <bt_buf_get_rx+0x44>)
    58ce:	f01c fdae 	bl	2242e <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    58d2:	4632      	mov	r2, r6
    58d4:	463b      	mov	r3, r7
    58d6:	4808      	ldr	r0, [pc, #32]	; (58f8 <bt_buf_get_rx+0x4c>)
    58d8:	f022 faec 	bl	27eb4 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    58dc:	4604      	mov	r4, r0
    58de:	b120      	cbz	r0, 58ea <bt_buf_get_rx+0x3e>
	net_buf_simple_reserve(&buf->b, reserve);
    58e0:	2100      	movs	r1, #0
    58e2:	3008      	adds	r0, #8
    58e4:	f016 fed6 	bl	1c694 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    58e8:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    58ea:	4620      	mov	r0, r4
    58ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58ee:	bf00      	nop
    58f0:	0002ace4 	.word	0x0002ace4
    58f4:	0002a026 	.word	0x0002a026
    58f8:	20001100 	.word	0x20001100

000058fc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    58fc:	b5d0      	push	{r4, r6, r7, lr}
    58fe:	460f      	mov	r7, r1
	__asm__ volatile(
    5900:	f04f 0320 	mov.w	r3, #32
    5904:	f3ef 8211 	mrs	r2, BASEPRI
    5908:	f383 8811 	msr	BASEPRI, r3
    590c:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    5910:	4b0d      	ldr	r3, [pc, #52]	; (5948 <bt_buf_get_cmd_complete+0x4c>)
	bt_dev.sent_cmd = NULL;
    5912:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    5914:	f8d3 40f8 	ldr.w	r4, [r3, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    5918:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
	__asm__ volatile(
    591c:	f382 8811 	msr	BASEPRI, r2
    5920:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    5924:	b934      	cbnz	r4, 5934 <bt_buf_get_cmd_complete+0x38>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5926:	4602      	mov	r2, r0
    5928:	463b      	mov	r3, r7
    592a:	2001      	movs	r0, #1
}
    592c:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5930:	f7ff bfbc 	b.w	58ac <bt_buf_get_rx>
    5934:	2301      	movs	r3, #1
    5936:	f104 0008 	add.w	r0, r4, #8
    593a:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    593c:	81a1      	strh	r1, [r4, #12]
    593e:	f016 fea9 	bl	1c694 <net_buf_simple_reserve>
}
    5942:	4620      	mov	r0, r4
    5944:	bdd0      	pop	{r4, r6, r7, pc}
    5946:	bf00      	nop
    5948:	20000198 	.word	0x20000198

0000594c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    594c:	b570      	push	{r4, r5, r6, lr}
    594e:	4604      	mov	r4, r0
	switch (evt) {
    5950:	2c0e      	cmp	r4, #14
{
    5952:	460d      	mov	r5, r1
    5954:	4610      	mov	r0, r2
    5956:	4619      	mov	r1, r3
	switch (evt) {
    5958:	d314      	bcc.n	5984 <bt_buf_get_evt+0x38>
    595a:	2c0f      	cmp	r4, #15
    595c:	d90e      	bls.n	597c <bt_buf_get_evt+0x30>
    595e:	2c13      	cmp	r4, #19
    5960:	d110      	bne.n	5984 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    5962:	480d      	ldr	r0, [pc, #52]	; (5998 <bt_buf_get_evt+0x4c>)
    5964:	f022 faa6 	bl	27eb4 <net_buf_alloc_fixed>
#if defined(CONFIG_BT_DISCARDABLE_BUF_COUNT)
		if (discardable) {
			struct net_buf *buf;

			buf = net_buf_alloc(&discardable_pool, timeout);
			if (buf) {
    5968:	4604      	mov	r4, r0
    596a:	b128      	cbz	r0, 5978 <bt_buf_get_evt+0x2c>
	net_buf_simple_reserve(&buf->b, reserve);
    596c:	2100      	movs	r1, #0
    596e:	3008      	adds	r0, #8
    5970:	f016 fe90 	bl	1c694 <net_buf_simple_reserve>
    5974:	2301      	movs	r3, #1
    5976:	7523      	strb	r3, [r4, #20]
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    5978:	4620      	mov	r0, r4
    597a:	bd70      	pop	{r4, r5, r6, pc}
    597c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    5980:	f7ff bfbc 	b.w	58fc <bt_buf_get_cmd_complete>
	return net_buf_alloc_fixed(pool, timeout);
    5984:	4602      	mov	r2, r0
    5986:	460b      	mov	r3, r1
		if (discardable) {
    5988:	b10d      	cbz	r5, 598e <bt_buf_get_evt+0x42>
    598a:	4804      	ldr	r0, [pc, #16]	; (599c <bt_buf_get_evt+0x50>)
    598c:	e7ea      	b.n	5964 <bt_buf_get_evt+0x18>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    598e:	2001      	movs	r0, #1
}
    5990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5994:	f7ff bf8a 	b.w	58ac <bt_buf_get_rx>
    5998:	20001158 	.word	0x20001158
    599c:	20001050 	.word	0x20001050

000059a0 <le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    59a0:	4905      	ldr	r1, [pc, #20]	; (59b8 <le_dhkey_complete+0x18>)
    59a2:	680b      	ldr	r3, [r1, #0]
    59a4:	b133      	cbz	r3, 59b4 <le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    59a6:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    59a8:	2000      	movs	r0, #0
    59aa:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    59ac:	7811      	ldrb	r1, [r2, #0]
    59ae:	b901      	cbnz	r1, 59b2 <le_dhkey_complete+0x12>
    59b0:	1c50      	adds	r0, r2, #1
    59b2:	4718      	bx	r3
	}
}
    59b4:	4770      	bx	lr
    59b6:	bf00      	nop
    59b8:	200028b0 	.word	0x200028b0

000059bc <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    59bc:	6883      	ldr	r3, [r0, #8]
    59be:	4802      	ldr	r0, [pc, #8]	; (59c8 <hci_data_buf_overflow+0xc>)
    59c0:	781a      	ldrb	r2, [r3, #0]
    59c2:	2157      	movs	r1, #87	; 0x57
    59c4:	f01c ba81 	b.w	21eca <printk>
    59c8:	0002b176 	.word	0x0002b176

000059cc <hci_disconn_complete_prio>:
{
    59cc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    59ce:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    59d0:	781a      	ldrb	r2, [r3, #0]
    59d2:	b9aa      	cbnz	r2, 5a00 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    59d4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    59d8:	4620      	mov	r0, r4
    59da:	f002 fafd 	bl	7fd8 <bt_conn_lookup_handle>
	if (!conn) {
    59de:	4605      	mov	r5, r0
    59e0:	b930      	cbnz	r0, 59f0 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    59e2:	4622      	mov	r2, r4
    59e4:	2145      	movs	r1, #69	; 0x45
    59e6:	4807      	ldr	r0, [pc, #28]	; (5a04 <hci_disconn_complete_prio+0x38>)
}
    59e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    59ec:	f01c ba6d 	b.w	21eca <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    59f0:	2101      	movs	r1, #1
    59f2:	f002 faf9 	bl	7fe8 <bt_conn_set_state>
	bt_conn_unref(conn);
    59f6:	4628      	mov	r0, r5
}
    59f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    59fc:	f002 bac0 	b.w	7f80 <bt_conn_unref>
}
    5a00:	bd38      	pop	{r3, r4, r5, pc}
    5a02:	bf00      	nop
    5a04:	0002b1a3 	.word	0x0002b1a3

00005a08 <hci_disconn_complete>:
{
    5a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    5a0a:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    5a0c:	7835      	ldrb	r5, [r6, #0]
    5a0e:	b9c5      	cbnz	r5, 5a42 <hci_disconn_complete+0x3a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5a10:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    5a14:	4638      	mov	r0, r7
    5a16:	f002 fadf 	bl	7fd8 <bt_conn_lookup_handle>
	if (!conn) {
    5a1a:	4604      	mov	r4, r0
    5a1c:	b930      	cbnz	r0, 5a2c <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    5a1e:	463a      	mov	r2, r7
    5a20:	2145      	movs	r1, #69	; 0x45
    5a22:	4808      	ldr	r0, [pc, #32]	; (5a44 <hci_disconn_complete+0x3c>)
}
    5a24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    5a28:	f01c ba4f 	b.w	21eca <printk>
	conn->err = evt->reason;
    5a2c:	78f3      	ldrb	r3, [r6, #3]
    5a2e:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5a30:	4629      	mov	r1, r5
    5a32:	f002 fad9 	bl	7fe8 <bt_conn_set_state>
	conn->handle = 0U;
    5a36:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    5a38:	4620      	mov	r0, r4
}
    5a3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    5a3e:	f002 ba9f 	b.w	7f80 <bt_conn_unref>
}
    5a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a44:	0002b1a3 	.word	0x0002b1a3

00005a48 <le_pkey_complete>:
{
    5a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    5a4a:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5a4c:	480f      	ldr	r0, [pc, #60]	; (5a8c <le_pkey_complete+0x44>)
    5a4e:	f06f 0110 	mvn.w	r1, #16
    5a52:	f01e fe6b 	bl	2472c <atomic_and>
	if (!evt->status) {
    5a56:	7833      	ldrb	r3, [r6, #0]
    5a58:	b943      	cbnz	r3, 5a6c <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    5a5a:	1c71      	adds	r1, r6, #1
    5a5c:	2240      	movs	r2, #64	; 0x40
    5a5e:	480c      	ldr	r0, [pc, #48]	; (5a90 <le_pkey_complete+0x48>)
    5a60:	f01e fb75 	bl	2414e <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5a64:	2108      	movs	r1, #8
    5a66:	4809      	ldr	r0, [pc, #36]	; (5a8c <le_pkey_complete+0x44>)
    5a68:	f01e fe46 	bl	246f8 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5a6c:	4d09      	ldr	r5, [pc, #36]	; (5a94 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    5a6e:	4f08      	ldr	r7, [pc, #32]	; (5a90 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5a70:	682c      	ldr	r4, [r5, #0]
    5a72:	b90c      	cbnz	r4, 5a78 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    5a74:	602c      	str	r4, [r5, #0]
}
    5a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    5a78:	7832      	ldrb	r2, [r6, #0]
    5a7a:	6823      	ldr	r3, [r4, #0]
    5a7c:	2a00      	cmp	r2, #0
    5a7e:	bf0c      	ite	eq
    5a80:	4638      	moveq	r0, r7
    5a82:	2000      	movne	r0, #0
    5a84:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5a86:	6864      	ldr	r4, [r4, #4]
    5a88:	e7f3      	b.n	5a72 <le_pkey_complete+0x2a>
    5a8a:	bf00      	nop
    5a8c:	2000022c 	.word	0x2000022c
    5a90:	200044c0 	.word	0x200044c0
    5a94:	200028b4 	.word	0x200028b4

00005a98 <hci_hardware_error>:
{
    5a98:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    5a9a:	2101      	movs	r1, #1
    5a9c:	3008      	adds	r0, #8
    5a9e:	f017 f815 	bl	1cacc <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    5aa2:	2145      	movs	r1, #69	; 0x45
    5aa4:	7802      	ldrb	r2, [r0, #0]
    5aa6:	4802      	ldr	r0, [pc, #8]	; (5ab0 <hci_hardware_error+0x18>)
}
    5aa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    5aac:	f01c ba0d 	b.w	21eca <printk>
    5ab0:	0002b1ce 	.word	0x0002b1ce

00005ab4 <hci_vendor_event>:
	return 0;
}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

static void hci_vendor_event(struct net_buf *buf)
{
    5ab4:	b508      	push	{r3, lr}
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
    5ab6:	8981      	ldrh	r1, [r0, #12]
    5ab8:	6880      	ldr	r0, [r0, #8]
    5aba:	f7ff fbb5 	bl	5228 <bt_hex_real>
    5abe:	2157      	movs	r1, #87	; 0x57
    5ac0:	4602      	mov	r2, r0
			bt_hex(buf->data, buf->len));
	}
}
    5ac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    5ac6:	4801      	ldr	r0, [pc, #4]	; (5acc <hci_vendor_event+0x18>)
    5ac8:	f01c b9ff 	b.w	21eca <printk>
    5acc:	0002b2f1 	.word	0x0002b2f1

00005ad0 <le_conn_update_complete>:
{
    5ad0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    5ad2:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    5ad4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    5ad8:	4630      	mov	r0, r6
    5ada:	f002 fa7d 	bl	7fd8 <bt_conn_lookup_handle>
	if (!conn) {
    5ade:	4604      	mov	r4, r0
    5ae0:	b930      	cbnz	r0, 5af0 <le_conn_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5ae2:	4632      	mov	r2, r6
    5ae4:	2145      	movs	r1, #69	; 0x45
    5ae6:	481a      	ldr	r0, [pc, #104]	; (5b50 <le_conn_update_complete+0x80>)
    5ae8:	f01c f9ef 	bl	21eca <printk>
}
    5aec:	b002      	add	sp, #8
    5aee:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    5af0:	782b      	ldrb	r3, [r5, #0]
    5af2:	b9bb      	cbnz	r3, 5b24 <le_conn_update_complete+0x54>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    5af4:	792a      	ldrb	r2, [r5, #4]
    5af6:	78eb      	ldrb	r3, [r5, #3]
    5af8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5afc:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    5b00:	79aa      	ldrb	r2, [r5, #6]
    5b02:	796b      	ldrb	r3, [r5, #5]
    5b04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5b08:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5b0c:	79eb      	ldrb	r3, [r5, #7]
    5b0e:	7a2a      	ldrb	r2, [r5, #8]
    5b10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5b14:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    5b18:	f002 f862 	bl	7be0 <notify_le_param_updated>
	bt_conn_unref(conn);
    5b1c:	4620      	mov	r0, r4
    5b1e:	f002 fa2f 	bl	7f80 <bt_conn_unref>
    5b22:	e7e3      	b.n	5aec <le_conn_update_complete+0x1c>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    5b24:	2b1a      	cmp	r3, #26
    5b26:	d1f9      	bne.n	5b1c <le_conn_update_complete+0x4c>
    5b28:	78c3      	ldrb	r3, [r0, #3]
    5b2a:	2b01      	cmp	r3, #1
    5b2c:	d1f6      	bne.n	5b1c <le_conn_update_complete+0x4c>
		   !atomic_test_and_set_bit(conn->flags,
    5b2e:	210a      	movs	r1, #10
    5b30:	3004      	adds	r0, #4
    5b32:	f01e fdf0 	bl	24716 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    5b36:	2800      	cmp	r0, #0
    5b38:	d1f0      	bne.n	5b1c <le_conn_update_complete+0x4c>
		param.interval_min = conn->le.interval_min;
    5b3a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    5b3e:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    5b40:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    5b42:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    5b46:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    5b48:	4620      	mov	r0, r4
    5b4a:	f002 fe8d 	bl	8868 <bt_l2cap_update_conn_param>
    5b4e:	e7e5      	b.n	5b1c <le_conn_update_complete+0x4c>
    5b50:	0002b36a 	.word	0x0002b36a

00005b54 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    5b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    5b56:	4e0a      	ldr	r6, [pc, #40]	; (5b80 <id_find+0x2c>)
{
    5b58:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    5b5a:	2500      	movs	r5, #0
    5b5c:	79f3      	ldrb	r3, [r6, #7]
    5b5e:	b2ec      	uxtb	r4, r5
    5b60:	42a3      	cmp	r3, r4
    5b62:	d802      	bhi.n	5b6a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    5b64:	f06f 0401 	mvn.w	r4, #1
    5b68:	e008      	b.n	5b7c <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    5b6a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    5b6e:	4431      	add	r1, r6
    5b70:	4638      	mov	r0, r7
    5b72:	f01e fdfb 	bl	2476c <bt_addr_le_cmp>
    5b76:	3501      	adds	r5, #1
    5b78:	2800      	cmp	r0, #0
    5b7a:	d1ef      	bne.n	5b5c <id_find+0x8>
}
    5b7c:	4620      	mov	r0, r4
    5b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b80:	20000198 	.word	0x20000198

00005b84 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    5b84:	6843      	ldr	r3, [r0, #4]
{
    5b86:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5b88:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    5b8a:	0558      	lsls	r0, r3, #21
    5b8c:	d502      	bpl.n	5b94 <valid_adv_param+0x10>
		return false;
    5b8e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    5b90:	b003      	add	sp, #12
    5b92:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5b94:	6922      	ldr	r2, [r4, #16]
    5b96:	b10a      	cbz	r2, 5b9c <valid_adv_param+0x18>
    5b98:	07d9      	lsls	r1, r3, #31
    5b9a:	d5f8      	bpl.n	5b8e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    5b9c:	4d1a      	ldr	r5, [pc, #104]	; (5c08 <valid_adv_param+0x84>)
    5b9e:	7820      	ldrb	r0, [r4, #0]
    5ba0:	79eb      	ldrb	r3, [r5, #7]
    5ba2:	4283      	cmp	r3, r0
    5ba4:	d9f3      	bls.n	5b8e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    5ba6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    5baa:	2300      	movs	r3, #0
    5bac:	4669      	mov	r1, sp
    5bae:	4428      	add	r0, r5
    5bb0:	9300      	str	r3, [sp, #0]
    5bb2:	f8cd 3003 	str.w	r3, [sp, #3]
    5bb6:	f01e fdd9 	bl	2476c <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    5bba:	2800      	cmp	r0, #0
    5bbc:	d0e7      	beq.n	5b8e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5bbe:	6860      	ldr	r0, [r4, #4]
    5bc0:	07c2      	lsls	r2, r0, #31
    5bc2:	d406      	bmi.n	5bd2 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    5bc4:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    5bc8:	2b08      	cmp	r3, #8
    5bca:	d802      	bhi.n	5bd2 <valid_adv_param+0x4e>
    5bcc:	68a3      	ldr	r3, [r4, #8]
    5bce:	2b9f      	cmp	r3, #159	; 0x9f
    5bd0:	d9dd      	bls.n	5b8e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    5bd2:	f010 0f30 	tst.w	r0, #48	; 0x30
    5bd6:	d002      	beq.n	5bde <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    5bd8:	6923      	ldr	r3, [r4, #16]
    5bda:	2b00      	cmp	r3, #0
    5bdc:	d0d7      	beq.n	5b8e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    5bde:	06c3      	lsls	r3, r0, #27
    5be0:	d401      	bmi.n	5be6 <valid_adv_param+0x62>
    5be2:	6923      	ldr	r3, [r4, #16]
    5be4:	b943      	cbnz	r3, 5bf8 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    5be6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    5bea:	429a      	cmp	r2, r3
    5bec:	d8cf      	bhi.n	5b8e <valid_adv_param+0xa>
    5bee:	2a1f      	cmp	r2, #31
    5bf0:	d9cd      	bls.n	5b8e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    5bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    5bf6:	d8ca      	bhi.n	5b8e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    5bf8:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    5bfc:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    5c00:	bf18      	it	ne
    5c02:	2001      	movne	r0, #1
    5c04:	e7c4      	b.n	5b90 <valid_adv_param+0xc>
    5c06:	bf00      	nop
    5c08:	20000198 	.word	0x20000198

00005c0c <hci_cmd_done>:
{
    5c0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5c10:	4680      	mov	r8, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    5c12:	7990      	ldrb	r0, [r2, #6]
    5c14:	4e2b      	ldr	r6, [pc, #172]	; (5cc4 <hci_cmd_done+0xb8>)
{
    5c16:	460f      	mov	r7, r1
    5c18:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    5c1a:	f016 fc11 	bl	1c440 <net_buf_pool_get>
    5c1e:	4286      	cmp	r6, r0
    5c20:	d00e      	beq.n	5c40 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    5c22:	79ac      	ldrb	r4, [r5, #6]
    5c24:	4620      	mov	r0, r4
    5c26:	f016 fc0b 	bl	1c440 <net_buf_pool_get>
    5c2a:	4623      	mov	r3, r4
    5c2c:	e9cd 0600 	strd	r0, r6, [sp]
    5c30:	4642      	mov	r2, r8
    5c32:	2157      	movs	r1, #87	; 0x57
    5c34:	4824      	ldr	r0, [pc, #144]	; (5cc8 <hci_cmd_done+0xbc>)
    5c36:	f01c f948 	bl	21eca <printk>
}
    5c3a:	b002      	add	sp, #8
    5c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    5c40:	4628      	mov	r0, r5
    5c42:	f016 fc05 	bl	1c450 <net_buf_id>
    5c46:	4c21      	ldr	r4, [pc, #132]	; (5ccc <hci_cmd_done+0xc0>)
    5c48:	260c      	movs	r6, #12
    5c4a:	fb06 4000 	mla	r0, r6, r0, r4
    5c4e:	8843      	ldrh	r3, [r0, #2]
    5c50:	4543      	cmp	r3, r8
    5c52:	d00a      	beq.n	5c6a <hci_cmd_done+0x5e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    5c54:	4628      	mov	r0, r5
    5c56:	f016 fbfb 	bl	1c450 <net_buf_id>
    5c5a:	fb06 4000 	mla	r0, r6, r0, r4
    5c5e:	4642      	mov	r2, r8
    5c60:	8843      	ldrh	r3, [r0, #2]
    5c62:	481b      	ldr	r0, [pc, #108]	; (5cd0 <hci_cmd_done+0xc4>)
    5c64:	2157      	movs	r1, #87	; 0x57
    5c66:	f01c f930 	bl	21eca <printk>
	if (cmd(buf)->state && !status) {
    5c6a:	4628      	mov	r0, r5
    5c6c:	f016 fbf0 	bl	1c450 <net_buf_id>
    5c70:	260c      	movs	r6, #12
    5c72:	fb06 4000 	mla	r0, r6, r0, r4
    5c76:	6843      	ldr	r3, [r0, #4]
    5c78:	b15b      	cbz	r3, 5c92 <hci_cmd_done+0x86>
    5c7a:	b957      	cbnz	r7, 5c92 <hci_cmd_done+0x86>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    5c7c:	4628      	mov	r0, r5
    5c7e:	f016 fbe7 	bl	1c450 <net_buf_id>
    5c82:	fb06 4000 	mla	r0, r6, r0, r4
    5c86:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    5c88:	7a1a      	ldrb	r2, [r3, #8]
    5c8a:	e9d3 0100 	ldrd	r0, r1, [r3]
    5c8e:	f01e fd5c 	bl	2474a <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    5c92:	4628      	mov	r0, r5
    5c94:	f016 fbdc 	bl	1c450 <net_buf_id>
    5c98:	260c      	movs	r6, #12
    5c9a:	fb06 4000 	mla	r0, r6, r0, r4
    5c9e:	6883      	ldr	r3, [r0, #8]
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d0ca      	beq.n	5c3a <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    5ca4:	4628      	mov	r0, r5
    5ca6:	f016 fbd3 	bl	1c450 <net_buf_id>
    5caa:	4370      	muls	r0, r6
    5cac:	5427      	strb	r7, [r4, r0]
		k_sem_give(cmd(buf)->sync);
    5cae:	4628      	mov	r0, r5
    5cb0:	f016 fbce 	bl	1c450 <net_buf_id>
    5cb4:	fb06 4000 	mla	r0, r6, r0, r4
    5cb8:	6880      	ldr	r0, [r0, #8]
}
    5cba:	b002      	add	sp, #8
    5cbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    5cc0:	f019 bfdc 	b.w	1fc7c <z_impl_k_sem_give>
    5cc4:	200010d4 	.word	0x200010d4
    5cc8:	0002b104 	.word	0x0002b104
    5ccc:	20002898 	.word	0x20002898
    5cd0:	0002b13e 	.word	0x0002b13e

00005cd4 <handle_event>:
{
    5cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5cd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5cda:	4604      	mov	r4, r0
    5cdc:	4608      	mov	r0, r1
		if (handler->event != event) {
    5cde:	7811      	ldrb	r1, [r2, #0]
    5ce0:	42a1      	cmp	r1, r4
    5ce2:	d010      	beq.n	5d06 <handle_event+0x32>
			continue;
    5ce4:	3208      	adds	r2, #8
	for (i = 0; i < num_handlers; i++) {
    5ce6:	429a      	cmp	r2, r3
    5ce8:	d1f9      	bne.n	5cde <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    5cea:	8985      	ldrh	r5, [r0, #12]
    5cec:	6880      	ldr	r0, [r0, #8]
    5cee:	4629      	mov	r1, r5
    5cf0:	f7ff fa9a 	bl	5228 <bt_hex_real>
    5cf4:	462b      	mov	r3, r5
    5cf6:	9000      	str	r0, [sp, #0]
    5cf8:	4622      	mov	r2, r4
    5cfa:	2157      	movs	r1, #87	; 0x57
    5cfc:	480b      	ldr	r0, [pc, #44]	; (5d2c <handle_event+0x58>)
    5cfe:	f01c f8e4 	bl	21eca <printk>
}
    5d02:	b003      	add	sp, #12
    5d04:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    5d06:	8981      	ldrh	r1, [r0, #12]
    5d08:	7853      	ldrb	r3, [r2, #1]
    5d0a:	428b      	cmp	r3, r1
    5d0c:	d908      	bls.n	5d20 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    5d0e:	4808      	ldr	r0, [pc, #32]	; (5d30 <handle_event+0x5c>)
    5d10:	460a      	mov	r2, r1
    5d12:	4623      	mov	r3, r4
    5d14:	2145      	movs	r1, #69	; 0x45
}
    5d16:	b003      	add	sp, #12
    5d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    5d1c:	f01c b8d5 	b.w	21eca <printk>
		handler->handler(buf);
    5d20:	6853      	ldr	r3, [r2, #4]
}
    5d22:	b003      	add	sp, #12
    5d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    5d28:	4718      	bx	r3
    5d2a:	bf00      	nop
    5d2c:	0002b0dd 	.word	0x0002b0dd
    5d30:	0002b0b6 	.word	0x0002b0b6

00005d34 <hci_le_meta_event>:
{
    5d34:	b510      	push	{r4, lr}
    5d36:	2101      	movs	r1, #1
    5d38:	4604      	mov	r4, r0
    5d3a:	3008      	adds	r0, #8
    5d3c:	f016 fec6 	bl	1cacc <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    5d40:	4621      	mov	r1, r4
    5d42:	2308      	movs	r3, #8
    5d44:	4a02      	ldr	r2, [pc, #8]	; (5d50 <hci_le_meta_event+0x1c>)
    5d46:	7800      	ldrb	r0, [r0, #0]
}
    5d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    5d4c:	f7ff bfc2 	b.w	5cd4 <handle_event>
    5d50:	0002928c 	.word	0x0002928c

00005d54 <find_pending_connect.part.21>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    5d54:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    5d56:	4c0c      	ldr	r4, [pc, #48]	; (5d88 <find_pending_connect.part.21+0x34>)
    5d58:	4601      	mov	r1, r0
    5d5a:	2205      	movs	r2, #5
    5d5c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    5d60:	f002 fa58 	bl	8214 <bt_conn_lookup_state_le>
		if (!conn) {
    5d64:	b970      	cbnz	r0, 5d84 <find_pending_connect.part.21+0x30>
						       BT_ADDR_LE_NONE,
    5d66:	4b09      	ldr	r3, [pc, #36]	; (5d8c <find_pending_connect.part.21+0x38>)
    5d68:	6818      	ldr	r0, [r3, #0]
    5d6a:	889a      	ldrh	r2, [r3, #4]
    5d6c:	9000      	str	r0, [sp, #0]
    5d6e:	799b      	ldrb	r3, [r3, #6]
    5d70:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    5d74:	4669      	mov	r1, sp
    5d76:	2204      	movs	r2, #4
    5d78:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    5d7c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    5d80:	f002 fa48 	bl	8214 <bt_conn_lookup_state_le>
}
    5d84:	b002      	add	sp, #8
    5d86:	bd10      	pop	{r4, pc}
    5d88:	20000198 	.word	0x20000198
    5d8c:	00028f94 	.word	0x00028f94

00005d90 <hci_tx_thread>:
{
    5d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    5d94:	f8df 8128 	ldr.w	r8, [pc, #296]	; 5ec0 <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
    5d98:	f8df 9148 	ldr.w	r9, [pc, #328]	; 5ee4 <hci_tx_thread+0x154>
			ev_count += bt_conn_prepare_events(&events[1]);
    5d9c:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    5da0:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    5da4:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    5da6:	f36f 3310 	bfc	r3, #12, #5
    5daa:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    5dae:	f002 f86f 	bl	7e90 <bt_conn_prepare_events>
    5db2:	1c47      	adds	r7, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    5db4:	f04f 32ff 	mov.w	r2, #4294967295
    5db8:	f04f 33ff 	mov.w	r3, #4294967295
    5dbc:	4639      	mov	r1, r7
    5dbe:	4840      	ldr	r0, [pc, #256]	; (5ec0 <hci_tx_thread+0x130>)
    5dc0:	f01a ffa6 	bl	20d10 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    5dc4:	b158      	cbz	r0, 5dde <hci_tx_thread+0x4e>
    5dc6:	f241 4271 	movw	r2, #5233	; 0x1471
    5dca:	4649      	mov	r1, r9
    5dcc:	483d      	ldr	r0, [pc, #244]	; (5ec4 <hci_tx_thread+0x134>)
    5dce:	f01c f87c 	bl	21eca <printk>
    5dd2:	4040      	eors	r0, r0
    5dd4:	f380 8811 	msr	BASEPRI, r0
    5dd8:	f04f 0003 	mov.w	r0, #3
    5ddc:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    5dde:	4c3a      	ldr	r4, [pc, #232]	; (5ec8 <hci_tx_thread+0x138>)
{
    5de0:	4e37      	ldr	r6, [pc, #220]	; (5ec0 <hci_tx_thread+0x130>)
    5de2:	f104 0be0 	add.w	fp, r4, #224	; 0xe0
	for (; count; ev++, count--) {
    5de6:	b917      	cbnz	r7, 5dee <hci_tx_thread+0x5e>
	z_impl_k_yield();
    5de8:	f019 fe04 	bl	1f9f4 <z_impl_k_yield>
    5dec:	e7d8      	b.n	5da0 <hci_tx_thread+0x10>
		switch (ev->state) {
    5dee:	68f2      	ldr	r2, [r6, #12]
    5df0:	f3c2 3204 	ubfx	r2, r2, #12, #5
    5df4:	2a01      	cmp	r2, #1
    5df6:	d953      	bls.n	5ea0 <hci_tx_thread+0x110>
    5df8:	2a04      	cmp	r2, #4
    5dfa:	d15b      	bne.n	5eb4 <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
    5dfc:	7b33      	ldrb	r3, [r6, #12]
    5dfe:	2b00      	cmp	r3, #0
    5e00:	d151      	bne.n	5ea6 <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    5e02:	2200      	movs	r2, #0
    5e04:	2300      	movs	r3, #0
    5e06:	4831      	ldr	r0, [pc, #196]	; (5ecc <hci_tx_thread+0x13c>)
    5e08:	f016 fc14 	bl	1c634 <net_buf_get>
	BT_ASSERT(buf);
    5e0c:	4605      	mov	r5, r0
    5e0e:	b958      	cbnz	r0, 5e28 <hci_tx_thread+0x98>
    5e10:	f241 420e 	movw	r2, #5134	; 0x140e
    5e14:	4649      	mov	r1, r9
    5e16:	482b      	ldr	r0, [pc, #172]	; (5ec4 <hci_tx_thread+0x134>)
    5e18:	f01c f857 	bl	21eca <printk>
    5e1c:	4040      	eors	r0, r0
    5e1e:	f380 8811 	msr	BASEPRI, r0
    5e22:	f04f 0003 	mov.w	r0, #3
    5e26:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    5e28:	f04f 33ff 	mov.w	r3, #4294967295
    5e2c:	f04f 32ff 	mov.w	r2, #4294967295
    5e30:	4658      	mov	r0, fp
    5e32:	f019 ff5f 	bl	1fcf4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    5e36:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    5e3a:	b153      	cbz	r3, 5e52 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
    5e3c:	2145      	movs	r1, #69	; 0x45
    5e3e:	4824      	ldr	r0, [pc, #144]	; (5ed0 <hci_tx_thread+0x140>)
    5e40:	f01c f843 	bl	21eca <printk>
		net_buf_unref(bt_dev.sent_cmd);
    5e44:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
    5e48:	f016 fd0e 	bl	1c868 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5e4c:	2300      	movs	r3, #0
    5e4e:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    5e52:	4628      	mov	r0, r5
    5e54:	f016 fd4c 	bl	1c8f0 <net_buf_ref>
    5e58:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
		return bt_hci_ecc_send(buf);
    5e5c:	4628      	mov	r0, r5
    5e5e:	f7ff fb43 	bl	54e8 <bt_hci_ecc_send>
	if (err) {
    5e62:	4602      	mov	r2, r0
    5e64:	b1e0      	cbz	r0, 5ea0 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    5e66:	2145      	movs	r1, #69	; 0x45
    5e68:	481a      	ldr	r0, [pc, #104]	; (5ed4 <hci_tx_thread+0x144>)
    5e6a:	f01c f82e 	bl	21eca <printk>
	z_impl_k_sem_give(sem);
    5e6e:	481a      	ldr	r0, [pc, #104]	; (5ed8 <hci_tx_thread+0x148>)
    5e70:	f019 ff04 	bl	1fc7c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    5e74:	4628      	mov	r0, r5
    5e76:	f016 faeb 	bl	1c450 <net_buf_id>
    5e7a:	4a18      	ldr	r2, [pc, #96]	; (5edc <hci_tx_thread+0x14c>)
    5e7c:	230c      	movs	r3, #12
    5e7e:	fb03 2000 	mla	r0, r3, r0, r2
    5e82:	211f      	movs	r1, #31
    5e84:	462a      	mov	r2, r5
    5e86:	8840      	ldrh	r0, [r0, #2]
    5e88:	f7ff fec0 	bl	5c0c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    5e8c:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
    5e90:	f016 fcea 	bl	1c868 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5e94:	2300      	movs	r3, #0
		net_buf_unref(buf);
    5e96:	4628      	mov	r0, r5
		bt_dev.sent_cmd = NULL;
    5e98:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		net_buf_unref(buf);
    5e9c:	f016 fce4 	bl	1c868 <net_buf_unref>
	for (; count; ev++, count--) {
    5ea0:	3614      	adds	r6, #20
    5ea2:	3f01      	subs	r7, #1
    5ea4:	e79f      	b.n	5de6 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    5ea6:	2b01      	cmp	r3, #1
    5ea8:	d1fa      	bne.n	5ea0 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    5eaa:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    5eac:	3834      	subs	r0, #52	; 0x34
    5eae:	f002 fafd 	bl	84ac <bt_conn_process_tx>
    5eb2:	e7f5      	b.n	5ea0 <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    5eb4:	2157      	movs	r1, #87	; 0x57
    5eb6:	480a      	ldr	r0, [pc, #40]	; (5ee0 <hci_tx_thread+0x150>)
    5eb8:	f01c f807 	bl	21eca <printk>
    5ebc:	e7f0      	b.n	5ea0 <hci_tx_thread+0x110>
    5ebe:	bf00      	nop
    5ec0:	200005b8 	.word	0x200005b8
    5ec4:	0002a026 	.word	0x0002a026
    5ec8:	20000198 	.word	0x20000198
    5ecc:	20000294 	.word	0x20000294
    5ed0:	0002b284 	.word	0x0002b284
    5ed4:	0002b2a4 	.word	0x0002b2a4
    5ed8:	20000278 	.word	0x20000278
    5edc:	20002898 	.word	0x20002898
    5ee0:	0002b2cb 	.word	0x0002b2cb
    5ee4:	0002b250 	.word	0x0002b250

00005ee8 <hci_num_completed_packets>:
{
    5ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    5eec:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    5eee:	6887      	ldr	r7, [r0, #8]
    5ef0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 5fd8 <hci_num_completed_packets+0xf0>
			tx->pending_no_cb = 0U;
    5ef4:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
    5ef6:	783b      	ldrb	r3, [r7, #0]
    5ef8:	429d      	cmp	r5, r3
    5efa:	db01      	blt.n	5f00 <hci_num_completed_packets+0x18>
}
    5efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    5f00:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    5f04:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    5f08:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    5f0c:	4650      	mov	r0, sl
    5f0e:	f002 f863 	bl	7fd8 <bt_conn_lookup_handle>
		if (!conn) {
    5f12:	4604      	mov	r4, r0
    5f14:	b1d0      	cbz	r0, 5f4c <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5f16:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    5f1a:	b37e      	cbz	r6, 5f7c <hci_num_completed_packets+0x94>
	__asm__ volatile(
    5f1c:	f04f 0320 	mov.w	r3, #32
    5f20:	f3ef 8211 	mrs	r2, BASEPRI
    5f24:	f383 8811 	msr	BASEPRI, r3
    5f28:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    5f2c:	69e3      	ldr	r3, [r4, #28]
    5f2e:	b1a3      	cbz	r3, 5f5a <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    5f30:	3b01      	subs	r3, #1
    5f32:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    5f34:	f382 8811 	msr	BASEPRI, r2
    5f38:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    5f3c:	4620      	mov	r0, r4
    5f3e:	f001 fe4b 	bl	7bd8 <bt_conn_get_pkts>
    5f42:	3e01      	subs	r6, #1
    5f44:	f019 fe9a 	bl	1fc7c <z_impl_k_sem_give>
    5f48:	b2b6      	uxth	r6, r6
    5f4a:	e7e6      	b.n	5f1a <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    5f4c:	4652      	mov	r2, sl
    5f4e:	2145      	movs	r1, #69	; 0x45
    5f50:	481f      	ldr	r0, [pc, #124]	; (5fd0 <hci_num_completed_packets+0xe8>)
    5f52:	f01b ffba 	bl	21eca <printk>
	for (i = 0; i < evt->num_handles; i++) {
    5f56:	3501      	adds	r5, #1
    5f58:	e7cd      	b.n	5ef6 <hci_num_completed_packets+0xe>
Z_GENLIST_IS_EMPTY(slist)
    5f5a:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    5f5c:	b12b      	cbz	r3, 5f6a <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5f5e:	69a1      	ldr	r1, [r4, #24]
    5f60:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    5f62:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5f64:	428b      	cmp	r3, r1
	list->tail = node;
    5f66:	bf08      	it	eq
    5f68:	61a0      	streq	r0, [r4, #24]
    5f6a:	f382 8811 	msr	BASEPRI, r2
    5f6e:	f3bf 8f6f 	isb	sy
			if (!node) {
    5f72:	b93b      	cbnz	r3, 5f84 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    5f74:	2145      	movs	r1, #69	; 0x45
    5f76:	4817      	ldr	r0, [pc, #92]	; (5fd4 <hci_num_completed_packets+0xec>)
    5f78:	f01b ffa7 	bl	21eca <printk>
		bt_conn_unref(conn);
    5f7c:	4620      	mov	r0, r4
    5f7e:	f001 ffff 	bl	7f80 <bt_conn_unref>
    5f82:	e7e8      	b.n	5f56 <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    5f84:	f04f 0220 	mov.w	r2, #32
    5f88:	f3ef 8111 	mrs	r1, BASEPRI
    5f8c:	f382 8811 	msr	BASEPRI, r2
    5f90:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    5f94:	68da      	ldr	r2, [r3, #12]
    5f96:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    5f98:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    5f9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    5f9e:	f8c3 800c 	str.w	r8, [r3, #12]
    5fa2:	b98a      	cbnz	r2, 5fc8 <hci_num_completed_packets+0xe0>
	list->head = node;
    5fa4:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    5fa8:	f381 8811 	msr	BASEPRI, r1
    5fac:	f3bf 8f6f 	isb	sy
    5fb0:	2100      	movs	r1, #0
    5fb2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5fb6:	f01e fbae 	bl	24716 <atomic_test_and_set_bit>
    5fba:	2800      	cmp	r0, #0
    5fbc:	d1be      	bne.n	5f3c <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    5fbe:	4651      	mov	r1, sl
    5fc0:	4648      	mov	r0, r9
    5fc2:	f022 fb64 	bl	2868e <k_queue_append>
    5fc6:	e7b9      	b.n	5f3c <hci_num_completed_packets+0x54>
	parent->next = child;
    5fc8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5fca:	6263      	str	r3, [r4, #36]	; 0x24
    5fcc:	e7ec      	b.n	5fa8 <hci_num_completed_packets+0xc0>
    5fce:	bf00      	nop
    5fd0:	0002b1f5 	.word	0x0002b1f5
    5fd4:	0002b216 	.word	0x0002b216
    5fd8:	20002170 	.word	0x20002170

00005fdc <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    5fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    5fde:	4b28      	ldr	r3, [pc, #160]	; (6080 <le_adv_start_add_conn+0xa4>)
	struct adv_id_check_data check_data = {
		.id = adv->id,
    5fe0:	7804      	ldrb	r4, [r0, #0]
{
    5fe2:	b085      	sub	sp, #20
    5fe4:	4606      	mov	r6, r0
    5fe6:	460f      	mov	r7, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    5fe8:	f103 0028 	add.w	r0, r3, #40	; 0x28
    5fec:	2106      	movs	r1, #6
    5fee:	f01e fbc0 	bl	24772 <atomic_test_bit>
    5ff2:	461a      	mov	r2, r3
    5ff4:	b140      	cbz	r0, 6008 <le_adv_start_add_conn+0x2c>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    5ff6:	2108      	movs	r1, #8
    5ff8:	f103 0028 	add.w	r0, r3, #40	; 0x28
    5ffc:	f01e fbb9 	bl	24772 <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    6000:	b110      	cbz	r0, 6008 <le_adv_start_add_conn+0x2c>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    6002:	7e1b      	ldrb	r3, [r3, #24]
    6004:	42a3      	cmp	r3, r4
    6006:	d134      	bne.n	6072 <le_adv_start_add_conn+0x96>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    6008:	4635      	mov	r5, r6

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    600a:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    600c:	f815 3b09 	ldrb.w	r3, [r5], #9
    6010:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    6014:	4628      	mov	r0, r5
    6016:	2300      	movs	r3, #0
    6018:	9300      	str	r3, [sp, #0]
    601a:	f8cd 3003 	str.w	r3, [sp, #3]
    601e:	f01e fba5 	bl	2476c <bt_addr_le_cmp>
    6022:	4604      	mov	r4, r0
    6024:	7830      	ldrb	r0, [r6, #0]
    6026:	b164      	cbz	r4, 6042 <le_adv_start_add_conn+0x66>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    6028:	4629      	mov	r1, r5
    602a:	f002 f8d7 	bl	81dc <bt_conn_exists_le>
    602e:	4604      	mov	r4, r0
    6030:	bb10      	cbnz	r0, 6078 <le_adv_start_add_conn+0x9c>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    6032:	4629      	mov	r1, r5
    6034:	7830      	ldrb	r0, [r6, #0]
    6036:	f001 ff77 	bl	7f28 <bt_conn_add_le>
	if (!conn) {
    603a:	4605      	mov	r5, r0
    603c:	b178      	cbz	r0, 605e <le_adv_start_add_conn+0x82>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    603e:	2105      	movs	r1, #5
    6040:	e013      	b.n	606a <le_adv_start_add_conn+0x8e>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    6042:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    6046:	9302      	str	r3, [sp, #8]
    6048:	a902      	add	r1, sp, #8
    604a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    604e:	f8ad 300c 	strh.w	r3, [sp, #12]
    6052:	f88d 300e 	strb.w	r3, [sp, #14]
    6056:	f001 ff67 	bl	7f28 <bt_conn_add_le>
		if (!conn) {
    605a:	4605      	mov	r5, r0
    605c:	b920      	cbnz	r0, 6068 <le_adv_start_add_conn+0x8c>
			return -ENOMEM;
    605e:	f06f 040b 	mvn.w	r4, #11
	*out_conn = conn;
	return 0;
}
    6062:	4620      	mov	r0, r4
    6064:	b005      	add	sp, #20
    6066:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    6068:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    606a:	f001 ffbd 	bl	7fe8 <bt_conn_set_state>
	*out_conn = conn;
    606e:	603d      	str	r5, [r7, #0]
	return 0;
    6070:	e7f7      	b.n	6062 <le_adv_start_add_conn+0x86>
		return -ENOTSUP;
    6072:	f06f 0422 	mvn.w	r4, #34	; 0x22
    6076:	e7f4      	b.n	6062 <le_adv_start_add_conn+0x86>
		return -EINVAL;
    6078:	f06f 0415 	mvn.w	r4, #21
    607c:	e7f1      	b.n	6062 <le_adv_start_add_conn+0x86>
    607e:	bf00      	nop
    6080:	20000198 	.word	0x20000198

00006084 <id_create.isra.22>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    6084:	b530      	push	{r4, r5, lr}
    6086:	4d17      	ldr	r5, [pc, #92]	; (60e4 <id_create.isra.22+0x60>)
    6088:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    608c:	b085      	sub	sp, #20
    608e:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6090:	460c      	mov	r4, r1
    6092:	b1a9      	cbz	r1, 60c0 <id_create.isra.22+0x3c>
    6094:	2300      	movs	r3, #0
    6096:	a902      	add	r1, sp, #8
    6098:	4620      	mov	r0, r4
    609a:	9302      	str	r3, [sp, #8]
    609c:	f8cd 300b 	str.w	r3, [sp, #11]
    60a0:	f01e fb64 	bl	2476c <bt_addr_le_cmp>
    60a4:	b160      	cbz	r0, 60c0 <id_create.isra.22+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    60a6:	4621      	mov	r1, r4
    60a8:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    60aa:	f01e fb22 	bl	246f2 <bt_addr_le_copy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    60ae:	2101      	movs	r1, #1
    60b0:	480d      	ldr	r0, [pc, #52]	; (60e8 <id_create.isra.22+0x64>)
    60b2:	f01e fb5e 	bl	24772 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    60b6:	b108      	cbz	r0, 60bc <id_create.isra.22+0x38>
		bt_settings_save_id();
    60b8:	f7ff fb5e 	bl	5778 <bt_settings_save_id>
}
    60bc:	b005      	add	sp, #20
    60be:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    60c0:	4668      	mov	r0, sp
    60c2:	f01e faf9 	bl	246b8 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    60c6:	4668      	mov	r0, sp
    60c8:	f7ff fd44 	bl	5b54 <id_find>
    60cc:	2800      	cmp	r0, #0
    60ce:	daf7      	bge.n	60c0 <id_create.isra.22+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    60d0:	4669      	mov	r1, sp
    60d2:	4628      	mov	r0, r5
    60d4:	f01e fb0d 	bl	246f2 <bt_addr_le_copy>
		if (addr) {
    60d8:	2c00      	cmp	r4, #0
    60da:	d0e8      	beq.n	60ae <id_create.isra.22+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    60dc:	4629      	mov	r1, r5
    60de:	4620      	mov	r0, r4
    60e0:	e7e3      	b.n	60aa <id_create.isra.22+0x26>
    60e2:	bf00      	nop
    60e4:	20000198 	.word	0x20000198
    60e8:	2000022c 	.word	0x2000022c

000060ec <le_adv_report>:
{
    60ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    60f0:	f100 0508 	add.w	r5, r0, #8
    60f4:	b08b      	sub	sp, #44	; 0x2c
    60f6:	4604      	mov	r4, r0
    60f8:	4628      	mov	r0, r5
    60fa:	f021 ff08 	bl	27f0e <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    60fe:	f8df b154 	ldr.w	fp, [pc, #340]	; 6254 <le_adv_report+0x168>
    6102:	4680      	mov	r8, r0
	while (num_reports--) {
    6104:	f1b8 0f00 	cmp.w	r8, #0
    6108:	d006      	beq.n	6118 <le_adv_report+0x2c>
		if (buf->len < sizeof(*evt)) {
    610a:	89a3      	ldrh	r3, [r4, #12]
    610c:	2b08      	cmp	r3, #8
    610e:	d806      	bhi.n	611e <le_adv_report+0x32>
			BT_ERR("Unexpected end of buffer");
    6110:	2145      	movs	r1, #69	; 0x45
    6112:	484c      	ldr	r0, [pc, #304]	; (6244 <le_adv_report+0x158>)
    6114:	f01b fed9 	bl	21eca <printk>
}
    6118:	b00b      	add	sp, #44	; 0x2c
    611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    611e:	2109      	movs	r1, #9
    6120:	4628      	mov	r0, r5
    6122:	f016 fcd3 	bl	1cacc <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    6126:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    612a:	237f      	movs	r3, #127	; 0x7f
    612c:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
    6130:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    6134:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    6136:	7a5b      	ldrb	r3, [r3, #9]
    6138:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
    613c:	23ff      	movs	r3, #255	; 0xff
    613e:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
    6142:	2300      	movs	r3, #0
    6144:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    6148:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
		adv_info.adv_type = evt->evt_type;
    614c:	7802      	ldrb	r2, [r0, #0]
    614e:	f88d 201f 	strb.w	r2, [sp, #31]
    6152:	2a04      	cmp	r2, #4
    6154:	bf9c      	itt	ls
    6156:	4b3c      	ldrls	r3, [pc, #240]	; (6248 <le_adv_report+0x15c>)
    6158:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    615a:	f8ad 3020 	strh.w	r3, [sp, #32]
    615e:	4606      	mov	r6, r0
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    6160:	1c43      	adds	r3, r0, #1
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    6162:	2106      	movs	r1, #6
    6164:	4839      	ldr	r0, [pc, #228]	; (624c <le_adv_report+0x160>)
    6166:	f01e fb04 	bl	24772 <atomic_test_bit>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    616a:	b168      	cbz	r0, 6188 <le_adv_report+0x9c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    616c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    6170:	0752      	lsls	r2, r2, #29
    6172:	d509      	bpl.n	6188 <le_adv_report+0x9c>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    6174:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    6176:	4628      	mov	r0, r5
    6178:	3101      	adds	r1, #1
    617a:	f108 38ff 	add.w	r8, r8, #4294967295
    617e:	f016 fc89 	bl	1ca94 <net_buf_simple_pull>
    6182:	fa5f f888 	uxtb.w	r8, r8
    6186:	e7bd      	b.n	6104 <le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    6188:	7872      	ldrb	r2, [r6, #1]
    618a:	1e91      	subs	r1, r2, #2
    618c:	2901      	cmp	r1, #1
    618e:	d84c      	bhi.n	622a <le_adv_report+0x13e>
		bt_addr_le_copy(&id_addr, addr);
    6190:	4619      	mov	r1, r3
    6192:	a802      	add	r0, sp, #8
    6194:	f01e faad 	bl	246f2 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    6198:	f89d 3008 	ldrb.w	r3, [sp, #8]
    619c:	3b02      	subs	r3, #2
    619e:	f88d 3008 	strb.w	r3, [sp, #8]
	info->addr = &id_addr;
    61a2:	ab02      	add	r3, sp, #8
    61a4:	9306      	str	r3, [sp, #24]
	if (scan_dev_found_cb) {
    61a6:	f8db 3000 	ldr.w	r3, [fp]
    61aa:	b1b3      	cbz	r3, 61da <le_adv_report+0xee>
	state->offset = net_buf_simple_headroom(buf);
    61ac:	4628      	mov	r0, r5
    61ae:	f021 fed2 	bl	27f56 <net_buf_simple_headroom>
	state->len = buf->len;
    61b2:	89a3      	ldrh	r3, [r4, #12]
    61b4:	9300      	str	r3, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    61b6:	4682      	mov	sl, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    61b8:	462b      	mov	r3, r5
		buf->len = len;
    61ba:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    61be:	f89d 201f 	ldrb.w	r2, [sp, #31]
    61c2:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    61c6:	f8db 7000 	ldr.w	r7, [fp]
    61ca:	a802      	add	r0, sp, #8
    61cc:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    61ce:	6923      	ldr	r3, [r4, #16]
    61d0:	fa13 f38a 	uxtah	r3, r3, sl
    61d4:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    61d6:	9b00      	ldr	r3, [sp, #0]
    61d8:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    61da:	4b1d      	ldr	r3, [pc, #116]	; (6250 <le_adv_report+0x164>)
    61dc:	681b      	ldr	r3, [r3, #0]
    61de:	2b00      	cmp	r3, #0
    61e0:	d0c8      	beq.n	6174 <le_adv_report+0x88>
    61e2:	f1b3 0208 	subs.w	r2, r3, #8
    61e6:	d0c5      	beq.n	6174 <le_adv_report+0x88>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    61e8:	681f      	ldr	r7, [r3, #0]
    61ea:	b107      	cbz	r7, 61ee <le_adv_report+0x102>
    61ec:	3f08      	subs	r7, #8
		if (listener->recv) {
    61ee:	6813      	ldr	r3, [r2, #0]
    61f0:	9201      	str	r2, [sp, #4]
    61f2:	b193      	cbz	r3, 621a <le_adv_report+0x12e>
	state->offset = net_buf_simple_headroom(buf);
    61f4:	4628      	mov	r0, r5
    61f6:	f021 feae 	bl	27f56 <net_buf_simple_headroom>
			listener->recv(info, &buf->b);
    61fa:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
    61fc:	89a3      	ldrh	r3, [r4, #12]
    61fe:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
    6200:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    6204:	4682      	mov	sl, r0
			listener->recv(info, &buf->b);
    6206:	4629      	mov	r1, r5
    6208:	a806      	add	r0, sp, #24
	state->len = buf->len;
    620a:	9300      	str	r3, [sp, #0]
    620c:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    620e:	6922      	ldr	r2, [r4, #16]
	buf->len = state->len;
    6210:	9b00      	ldr	r3, [sp, #0]
    6212:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6214:	fa12 f28a 	uxtah	r2, r2, sl
    6218:	60a2      	str	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    621a:	2f00      	cmp	r7, #0
    621c:	d0aa      	beq.n	6174 <le_adv_report+0x88>
    621e:	68bb      	ldr	r3, [r7, #8]
    6220:	b103      	cbz	r3, 6224 <le_adv_report+0x138>
    6222:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    6224:	463a      	mov	r2, r7
    6226:	461f      	mov	r7, r3
    6228:	e7e1      	b.n	61ee <le_adv_report+0x102>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    622a:	2aff      	cmp	r2, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    622c:	bf06      	itte	eq
    622e:	2300      	moveq	r3, #0
    6230:	a904      	addeq	r1, sp, #16
		bt_addr_le_copy(&id_addr,
    6232:	4619      	movne	r1, r3
    6234:	a802      	add	r0, sp, #8
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    6236:	bf04      	itt	eq
    6238:	9304      	streq	r3, [sp, #16]
    623a:	f8cd 3013 	streq.w	r3, [sp, #19]
		bt_addr_le_copy(&id_addr,
    623e:	f01e fa58 	bl	246f2 <bt_addr_le_copy>
    6242:	e7ae      	b.n	61a2 <le_adv_report+0xb6>
    6244:	0002b31a 	.word	0x0002b31a
    6248:	0002ad1a 	.word	0x0002ad1a
    624c:	2000022c 	.word	0x2000022c
    6250:	200028bc 	.word	0x200028bc
    6254:	200028c4 	.word	0x200028c4

00006258 <hci_cmd_status>:
{
    6258:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
    625a:	2104      	movs	r1, #4
    625c:	4604      	mov	r4, r0
    625e:	3008      	adds	r0, #8
    6260:	f016 fc34 	bl	1cacc <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    6264:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    6266:	7801      	ldrb	r1, [r0, #0]
    6268:	8840      	ldrh	r0, [r0, #2]
    626a:	4622      	mov	r2, r4
    626c:	f7ff fcce 	bl	5c0c <hci_cmd_done>
	if (ncmd) {
    6270:	b125      	cbz	r5, 627c <hci_cmd_status+0x24>
    6272:	4803      	ldr	r0, [pc, #12]	; (6280 <hci_cmd_status+0x28>)
}
    6274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6278:	f019 bd00 	b.w	1fc7c <z_impl_k_sem_give>
    627c:	bd38      	pop	{r3, r4, r5, pc}
    627e:	bf00      	nop
    6280:	20000278 	.word	0x20000278

00006284 <hci_cmd_complete>:
{
    6284:	b538      	push	{r3, r4, r5, lr}
    6286:	2103      	movs	r1, #3
    6288:	4604      	mov	r4, r0
    628a:	3008      	adds	r0, #8
    628c:	f016 fc1e 	bl	1cacc <net_buf_simple_pull_mem>
	status = buf->data[0];
    6290:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    6292:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    6294:	7819      	ldrb	r1, [r3, #0]
    6296:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    629a:	4622      	mov	r2, r4
    629c:	f7ff fcb6 	bl	5c0c <hci_cmd_done>
	if (ncmd) {
    62a0:	b125      	cbz	r5, 62ac <hci_cmd_complete+0x28>
    62a2:	4803      	ldr	r0, [pc, #12]	; (62b0 <hci_cmd_complete+0x2c>)
}
    62a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    62a8:	f019 bce8 	b.w	1fc7c <z_impl_k_sem_give>
    62ac:	bd38      	pop	{r3, r4, r5, pc}
    62ae:	bf00      	nop
    62b0:	20000278 	.word	0x20000278

000062b4 <bt_hci_cmd_create>:
{
    62b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    62b8:	f04f 32ff 	mov.w	r2, #4294967295
    62bc:	4682      	mov	sl, r0
    62be:	f04f 33ff 	mov.w	r3, #4294967295
    62c2:	481c      	ldr	r0, [pc, #112]	; (6334 <bt_hci_cmd_create+0x80>)
    62c4:	4689      	mov	r9, r1
    62c6:	f021 fdf5 	bl	27eb4 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    62ca:	4604      	mov	r4, r0
    62cc:	b950      	cbnz	r0, 62e4 <bt_hci_cmd_create+0x30>
    62ce:	491a      	ldr	r1, [pc, #104]	; (6338 <bt_hci_cmd_create+0x84>)
    62d0:	481a      	ldr	r0, [pc, #104]	; (633c <bt_hci_cmd_create+0x88>)
    62d2:	f44f 7281 	mov.w	r2, #258	; 0x102
    62d6:	f01b fdf8 	bl	21eca <printk>
    62da:	f44f 7181 	mov.w	r1, #258	; 0x102
    62de:	4816      	ldr	r0, [pc, #88]	; (6338 <bt_hci_cmd_create+0x84>)
    62e0:	f01c f8a5 	bl	2242e <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
    62e4:	f104 0808 	add.w	r8, r4, #8
    62e8:	2100      	movs	r1, #0
    62ea:	2600      	movs	r6, #0
    62ec:	4640      	mov	r0, r8
    62ee:	f016 f9d1 	bl	1c694 <net_buf_simple_reserve>
    62f2:	7526      	strb	r6, [r4, #20]
	cmd(buf)->opcode = opcode;
    62f4:	4620      	mov	r0, r4
    62f6:	f016 f8ab 	bl	1c450 <net_buf_id>
    62fa:	4f11      	ldr	r7, [pc, #68]	; (6340 <bt_hci_cmd_create+0x8c>)
    62fc:	250c      	movs	r5, #12
    62fe:	fb05 7000 	mla	r0, r5, r0, r7
    6302:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
    6306:	4620      	mov	r0, r4
    6308:	f016 f8a2 	bl	1c450 <net_buf_id>
    630c:	fb05 7000 	mla	r0, r5, r0, r7
    6310:	6086      	str	r6, [r0, #8]
	cmd(buf)->state = NULL;
    6312:	4620      	mov	r0, r4
    6314:	f016 f89c 	bl	1c450 <net_buf_id>
    6318:	fb05 7000 	mla	r0, r5, r0, r7
	return net_buf_simple_add(&buf->b, len);
    631c:	2103      	movs	r1, #3
    631e:	6046      	str	r6, [r0, #4]
    6320:	4640      	mov	r0, r8
    6322:	f016 fbf1 	bl	1cb08 <net_buf_simple_add>
	hdr->param_len = param_len;
    6326:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    632a:	f8a0 a000 	strh.w	sl, [r0]
}
    632e:	4620      	mov	r0, r4
    6330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6334:	200010d4 	.word	0x200010d4
    6338:	0002b250 	.word	0x0002b250
    633c:	0002a026 	.word	0x0002a026
    6340:	20002898 	.word	0x20002898

00006344 <bt_hci_cmd_send>:
{
    6344:	b538      	push	{r3, r4, r5, lr}
    6346:	4604      	mov	r4, r0
	if (!buf) {
    6348:	460d      	mov	r5, r1
    634a:	b919      	cbnz	r1, 6354 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    634c:	f7ff ffb2 	bl	62b4 <bt_hci_cmd_create>
		if (!buf) {
    6350:	4605      	mov	r5, r0
    6352:	b1c0      	cbz	r0, 6386 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    6354:	f640 4335 	movw	r3, #3125	; 0xc35
    6358:	429c      	cmp	r4, r3
    635a:	d10e      	bne.n	637a <bt_hci_cmd_send+0x36>
		return bt_hci_ecc_send(buf);
    635c:	4628      	mov	r0, r5
    635e:	f7ff f8c3 	bl	54e8 <bt_hci_ecc_send>
		if (err) {
    6362:	4604      	mov	r4, r0
    6364:	b138      	cbz	r0, 6376 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    6366:	4602      	mov	r2, r0
    6368:	2145      	movs	r1, #69	; 0x45
    636a:	4808      	ldr	r0, [pc, #32]	; (638c <bt_hci_cmd_send+0x48>)
    636c:	f01b fdad 	bl	21eca <printk>
			net_buf_unref(buf);
    6370:	4628      	mov	r0, r5
    6372:	f016 fa79 	bl	1c868 <net_buf_unref>
}
    6376:	4620      	mov	r0, r4
    6378:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    637a:	4629      	mov	r1, r5
    637c:	4804      	ldr	r0, [pc, #16]	; (6390 <bt_hci_cmd_send+0x4c>)
    637e:	f016 fa45 	bl	1c80c <net_buf_put>
	return 0;
    6382:	2400      	movs	r4, #0
    6384:	e7f7      	b.n	6376 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    6386:	f06f 0436 	mvn.w	r4, #54	; 0x36
    638a:	e7f4      	b.n	6376 <bt_hci_cmd_send+0x32>
    638c:	0002b2a4 	.word	0x0002b2a4
    6390:	20000294 	.word	0x20000294

00006394 <le_conn_param_neg_reply>:
{
    6394:	b570      	push	{r4, r5, r6, lr}
    6396:	4606      	mov	r6, r0
    6398:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    639a:	f242 0021 	movw	r0, #8225	; 0x2021
    639e:	2103      	movs	r1, #3
    63a0:	f7ff ff88 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
    63a4:	4604      	mov	r4, r0
    63a6:	b928      	cbnz	r0, 63b4 <le_conn_param_neg_reply+0x20>
		BT_ERR("Unable to allocate buffer");
    63a8:	2145      	movs	r1, #69	; 0x45
    63aa:	4809      	ldr	r0, [pc, #36]	; (63d0 <le_conn_param_neg_reply+0x3c>)
}
    63ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    63b0:	f01b bd8b 	b.w	21eca <printk>
    63b4:	2103      	movs	r1, #3
    63b6:	3008      	adds	r0, #8
    63b8:	f016 fba6 	bl	1cb08 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    63bc:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    63be:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    63c0:	4621      	mov	r1, r4
    63c2:	f242 0021 	movw	r0, #8225	; 0x2021
}
    63c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    63ca:	f7ff bfbb 	b.w	6344 <bt_hci_cmd_send>
    63ce:	bf00      	nop
    63d0:	0002b34b 	.word	0x0002b34b

000063d4 <le_conn_param_req>:
{
    63d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    63d6:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    63d8:	78d9      	ldrb	r1, [r3, #3]
    63da:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    63dc:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    63de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    63e2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    63e6:	7959      	ldrb	r1, [r3, #5]
    63e8:	791a      	ldrb	r2, [r3, #4]
    63ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    63ee:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    63f2:	799a      	ldrb	r2, [r3, #6]
    63f4:	79d9      	ldrb	r1, [r3, #7]
    63f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    63fa:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    63fe:	7a1a      	ldrb	r2, [r3, #8]
    6400:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    6402:	b2b4      	uxth	r4, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6404:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    6408:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    640a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    640e:	f001 fde3 	bl	7fd8 <bt_conn_lookup_handle>
	if (!conn) {
    6412:	4607      	mov	r7, r0
    6414:	b950      	cbnz	r0, 642c <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6416:	2145      	movs	r1, #69	; 0x45
    6418:	481c      	ldr	r0, [pc, #112]	; (648c <le_conn_param_req+0xb8>)
    641a:	4622      	mov	r2, r4
    641c:	f01b fd55 	bl	21eca <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    6420:	2102      	movs	r1, #2
    6422:	4620      	mov	r0, r4
    6424:	f7ff ffb6 	bl	6394 <le_conn_param_neg_reply>
}
    6428:	b003      	add	sp, #12
    642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    642c:	4669      	mov	r1, sp
    642e:	f001 fc0b 	bl	7c48 <le_param_req>
    6432:	b938      	cbnz	r0, 6444 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    6434:	211e      	movs	r1, #30
    6436:	4620      	mov	r0, r4
    6438:	f7ff ffac 	bl	6394 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    643c:	4638      	mov	r0, r7
    643e:	f001 fd9f 	bl	7f80 <bt_conn_unref>
    6442:	e7f1      	b.n	6428 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    6444:	210e      	movs	r1, #14
    6446:	f242 0020 	movw	r0, #8224	; 0x2020
    644a:	f7ff ff33 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
    644e:	4605      	mov	r5, r0
    6450:	2800      	cmp	r0, #0
    6452:	d0f3      	beq.n	643c <le_conn_param_req+0x68>
    6454:	210e      	movs	r1, #14
    6456:	3008      	adds	r0, #8
    6458:	f016 fb56 	bl	1cb08 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    645c:	220e      	movs	r2, #14
    645e:	4604      	mov	r4, r0
    6460:	2100      	movs	r1, #0
    6462:	f01d fe9e 	bl	241a2 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    6466:	f8bd 3000 	ldrh.w	r3, [sp]
    646a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    646c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6470:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    6472:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6476:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    6478:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    647c:	8026      	strh	r6, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    647e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    6480:	4629      	mov	r1, r5
    6482:	f242 0020 	movw	r0, #8224	; 0x2020
    6486:	f7ff ff5d 	bl	6344 <bt_hci_cmd_send>
    648a:	e7d7      	b.n	643c <le_conn_param_req+0x68>
    648c:	0002b36a 	.word	0x0002b36a

00006490 <conn_auto_initiate>:
{
    6490:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    6492:	7a83      	ldrb	r3, [r0, #10]
    6494:	2b07      	cmp	r3, #7
{
    6496:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6498:	d11f      	bne.n	64da <conn_auto_initiate+0x4a>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    649a:	210d      	movs	r1, #13
    649c:	3004      	adds	r0, #4
    649e:	f01e f968 	bl	24772 <atomic_test_bit>
    64a2:	b9d0      	cbnz	r0, 64da <conn_auto_initiate+0x4a>
    64a4:	78e3      	ldrb	r3, [r4, #3]
    64a6:	b123      	cbz	r3, 64b2 <conn_auto_initiate+0x22>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    64a8:	4b0c      	ldr	r3, [pc, #48]	; (64dc <conn_auto_initiate+0x4c>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    64aa:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    64ae:	071b      	lsls	r3, r3, #28
    64b0:	d513      	bpl.n	64da <conn_auto_initiate+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    64b2:	2102      	movs	r1, #2
    64b4:	f242 0016 	movw	r0, #8214	; 0x2016
    64b8:	f7ff fefc 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
    64bc:	4605      	mov	r5, r0
    64be:	b160      	cbz	r0, 64da <conn_auto_initiate+0x4a>
    64c0:	2102      	movs	r1, #2
    64c2:	3008      	adds	r0, #8
    64c4:	f016 fb20 	bl	1cb08 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    64c8:	8823      	ldrh	r3, [r4, #0]
    64ca:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    64cc:	4629      	mov	r1, r5
    64ce:	f242 0016 	movw	r0, #8214	; 0x2016
}
    64d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    64d6:	f7ff bf35 	b.w	6344 <bt_hci_cmd_send>
}
    64da:	bd38      	pop	{r3, r4, r5, pc}
    64dc:	20000198 	.word	0x20000198

000064e0 <le_remote_feat_complete>:
{
    64e0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    64e2:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    64e4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    64e8:	4630      	mov	r0, r6
    64ea:	f001 fd75 	bl	7fd8 <bt_conn_lookup_handle>
	if (!conn) {
    64ee:	4604      	mov	r4, r0
    64f0:	b930      	cbnz	r0, 6500 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    64f2:	4632      	mov	r2, r6
    64f4:	2145      	movs	r1, #69	; 0x45
    64f6:	480c      	ldr	r0, [pc, #48]	; (6528 <le_remote_feat_complete+0x48>)
}
    64f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    64fc:	f01b bce5 	b.w	21eca <printk>
	if (!evt->status) {
    6500:	782b      	ldrb	r3, [r5, #0]
    6502:	b923      	cbnz	r3, 650e <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    6504:	2208      	movs	r2, #8
    6506:	1ce9      	adds	r1, r5, #3
    6508:	30ac      	adds	r0, #172	; 0xac
    650a:	f01d fe20 	bl	2414e <memcpy>
    650e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    6512:	1d20      	adds	r0, r4, #4
    6514:	f01e f8f0 	bl	246f8 <atomic_or>
	conn_auto_initiate(conn);
    6518:	4620      	mov	r0, r4
    651a:	f7ff ffb9 	bl	6490 <conn_auto_initiate>
	bt_conn_unref(conn);
    651e:	4620      	mov	r0, r4
}
    6520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    6524:	f001 bd2c 	b.w	7f80 <bt_conn_unref>
    6528:	0002b36a 	.word	0x0002b36a

0000652c <bt_hci_cmd_send_sync>:
{
    652c:	b5f0      	push	{r4, r5, r6, r7, lr}
    652e:	4607      	mov	r7, r0
    6530:	b087      	sub	sp, #28
    6532:	4615      	mov	r5, r2
	if (!buf) {
    6534:	460c      	mov	r4, r1
    6536:	b921      	cbnz	r1, 6542 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    6538:	f7ff febc 	bl	62b4 <bt_hci_cmd_create>
		if (!buf) {
    653c:	4604      	mov	r4, r0
    653e:	2800      	cmp	r0, #0
    6540:	d048      	beq.n	65d4 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    6542:	2201      	movs	r2, #1
    6544:	2100      	movs	r1, #0
    6546:	4668      	mov	r0, sp
    6548:	f022 f8fa 	bl	28740 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    654c:	4620      	mov	r0, r4
    654e:	f015 ff7f 	bl	1c450 <net_buf_id>
    6552:	4e22      	ldr	r6, [pc, #136]	; (65dc <bt_hci_cmd_send_sync+0xb0>)
    6554:	230c      	movs	r3, #12
    6556:	fb03 6000 	mla	r0, r3, r0, r6
    655a:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    655e:	4620      	mov	r0, r4
    6560:	f016 f9c6 	bl	1c8f0 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    6564:	4621      	mov	r1, r4
    6566:	481e      	ldr	r0, [pc, #120]	; (65e0 <bt_hci_cmd_send_sync+0xb4>)
    6568:	f016 f950 	bl	1c80c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    656c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    6570:	2300      	movs	r3, #0
    6572:	4668      	mov	r0, sp
    6574:	f019 fbbe 	bl	1fcf4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    6578:	b158      	cbz	r0, 6592 <bt_hci_cmd_send_sync+0x66>
    657a:	f240 124d 	movw	r2, #333	; 0x14d
    657e:	4919      	ldr	r1, [pc, #100]	; (65e4 <bt_hci_cmd_send_sync+0xb8>)
    6580:	4819      	ldr	r0, [pc, #100]	; (65e8 <bt_hci_cmd_send_sync+0xbc>)
    6582:	f01b fca2 	bl	21eca <printk>
    6586:	4040      	eors	r0, r0
    6588:	f380 8811 	msr	BASEPRI, r0
    658c:	f04f 0003 	mov.w	r0, #3
    6590:	df02      	svc	2
	status = cmd(buf)->status;
    6592:	4620      	mov	r0, r4
    6594:	f015 ff5c 	bl	1c450 <net_buf_id>
    6598:	230c      	movs	r3, #12
    659a:	4358      	muls	r0, r3
    659c:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    659e:	b186      	cbz	r6, 65c2 <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    65a0:	4633      	mov	r3, r6
    65a2:	463a      	mov	r2, r7
    65a4:	2157      	movs	r1, #87	; 0x57
    65a6:	4811      	ldr	r0, [pc, #68]	; (65ec <bt_hci_cmd_send_sync+0xc0>)
    65a8:	f01b fc8f 	bl	21eca <printk>
		net_buf_unref(buf);
    65ac:	4620      	mov	r0, r4
    65ae:	f016 f95b 	bl	1c868 <net_buf_unref>
			return -EIO;
    65b2:	2e09      	cmp	r6, #9
    65b4:	bf0c      	ite	eq
    65b6:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    65ba:	f06f 0004 	mvnne.w	r0, #4
}
    65be:	b007      	add	sp, #28
    65c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    65c2:	b115      	cbz	r5, 65ca <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
    65c4:	602c      	str	r4, [r5, #0]
	return 0;
    65c6:	4630      	mov	r0, r6
    65c8:	e7f9      	b.n	65be <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    65ca:	4620      	mov	r0, r4
    65cc:	f016 f94c 	bl	1c868 <net_buf_unref>
	return 0;
    65d0:	4628      	mov	r0, r5
    65d2:	e7f4      	b.n	65be <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    65d4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    65d8:	e7f1      	b.n	65be <bt_hci_cmd_send_sync+0x92>
    65da:	bf00      	nop
    65dc:	20002898 	.word	0x20002898
    65e0:	20000294 	.word	0x20000294
    65e4:	0002b250 	.word	0x0002b250
    65e8:	0002a026 	.word	0x0002a026
    65ec:	0002ad64 	.word	0x0002ad64

000065f0 <set_le_scan_enable_legacy>:
{
    65f0:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    65f2:	2102      	movs	r1, #2
{
    65f4:	b085      	sub	sp, #20
    65f6:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    65f8:	f242 000c 	movw	r0, #8204	; 0x200c
    65fc:	f7ff fe5a 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
    6600:	4605      	mov	r5, r0
    6602:	b340      	cbz	r0, 6656 <set_le_scan_enable_legacy+0x66>
    6604:	2102      	movs	r1, #2
    6606:	3008      	adds	r0, #8
    6608:	f016 fa7e 	bl	1cb08 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    660c:	2c01      	cmp	r4, #1
    660e:	4603      	mov	r3, r0
    6610:	d11e      	bne.n	6650 <set_le_scan_enable_legacy+0x60>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    6612:	2108      	movs	r1, #8
    6614:	4811      	ldr	r0, [pc, #68]	; (665c <set_le_scan_enable_legacy+0x6c>)
    6616:	f01e f8ac 	bl	24772 <atomic_test_bit>
    661a:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    661c:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    661e:	4b0f      	ldr	r3, [pc, #60]	; (665c <set_le_scan_enable_legacy+0x6c>)
    6620:	9301      	str	r3, [sp, #4]
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    6622:	f004 0401 	and.w	r4, r4, #1
	state->bit = bit;
    6626:	2305      	movs	r3, #5
	cmd(buf)->state = &state;
    6628:	4628      	mov	r0, r5
    662a:	9302      	str	r3, [sp, #8]
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    662c:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    6630:	f015 ff0e 	bl	1c450 <net_buf_id>
    6634:	4a0a      	ldr	r2, [pc, #40]	; (6660 <set_le_scan_enable_legacy+0x70>)
    6636:	230c      	movs	r3, #12
    6638:	fb03 2000 	mla	r0, r3, r0, r2
    663c:	ab01      	add	r3, sp, #4
    663e:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    6640:	2200      	movs	r2, #0
    6642:	4629      	mov	r1, r5
    6644:	f242 000c 	movw	r0, #8204	; 0x200c
    6648:	f7ff ff70 	bl	652c <bt_hci_cmd_send_sync>
}
    664c:	b005      	add	sp, #20
    664e:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    6650:	2200      	movs	r2, #0
    6652:	7042      	strb	r2, [r0, #1]
    6654:	e7e2      	b.n	661c <set_le_scan_enable_legacy+0x2c>
		return -ENOBUFS;
    6656:	f06f 0036 	mvn.w	r0, #54	; 0x36
    665a:	e7f7      	b.n	664c <set_le_scan_enable_legacy+0x5c>
    665c:	2000022c 	.word	0x2000022c
    6660:	20002898 	.word	0x20002898

00006664 <hci_set_ad>:
{
    6664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6668:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    666a:	2120      	movs	r1, #32
{
    666c:	4683      	mov	fp, r0
    666e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    6670:	f7ff fe20 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
    6674:	4607      	mov	r7, r0
    6676:	2800      	cmp	r0, #0
    6678:	d053      	beq.n	6722 <hci_set_ad+0xbe>
    667a:	2120      	movs	r1, #32
    667c:	3008      	adds	r0, #8
    667e:	f016 fa43 	bl	1cb08 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    6682:	2100      	movs	r1, #0
    6684:	2220      	movs	r2, #32
    6686:	4682      	mov	sl, r0
    6688:	f01d fd8b 	bl	241a2 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    668c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    6690:	f10a 0901 	add.w	r9, sl, #1
static int set_data_add(uint8_t *set_data, uint8_t set_data_len_max,
    6694:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    6696:	2100      	movs	r1, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    6698:	6825      	ldr	r5, [r4, #0]
    669a:	2300      	movs	r3, #0
    669c:	6862      	ldr	r2, [r4, #4]
    669e:	4293      	cmp	r3, r2
    66a0:	d30d      	bcc.n	66be <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
    66a2:	9b00      	ldr	r3, [sp, #0]
    66a4:	3408      	adds	r4, #8
    66a6:	429c      	cmp	r4, r3
    66a8:	d1f6      	bne.n	6698 <hci_set_ad+0x34>
	*data_len = set_data_len;
    66aa:	f88a 1000 	strb.w	r1, [sl]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    66ae:	2200      	movs	r2, #0
    66b0:	4639      	mov	r1, r7
    66b2:	4658      	mov	r0, fp
}
    66b4:	b003      	add	sp, #12
    66b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    66ba:	f7ff bf37 	b.w	652c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    66be:	786a      	ldrb	r2, [r5, #1]
			uint8_t type = data[j].type;
    66c0:	7828      	ldrb	r0, [r5, #0]
			if ((set_data_len + len + 2) > set_data_len_max) {
    66c2:	1c8e      	adds	r6, r1, #2
    66c4:	eb06 0c02 	add.w	ip, r6, r2
    66c8:	f1bc 0f1f 	cmp.w	ip, #31
    66cc:	d912      	bls.n	66f4 <hci_set_ad+0x90>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    66ce:	2809      	cmp	r0, #9
				ssize_t shortened_len = set_data_len_max -
    66d0:	f1c1 021d 	rsb	r2, r1, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    66d4:	d101      	bne.n	66da <hci_set_ad+0x76>
    66d6:	2a00      	cmp	r2, #0
    66d8:	dc0b      	bgt.n	66f2 <hci_set_ad+0x8e>
					BT_ERR("Too big advertising data");
    66da:	2145      	movs	r1, #69	; 0x45
    66dc:	4812      	ldr	r0, [pc, #72]	; (6728 <hci_set_ad+0xc4>)
    66de:	f01b fbf4 	bl	21eca <printk>
		net_buf_unref(buf);
    66e2:	4638      	mov	r0, r7
    66e4:	f016 f8c0 	bl	1c868 <net_buf_unref>
					return -EINVAL;
    66e8:	f06f 0015 	mvn.w	r0, #21
}
    66ec:	b003      	add	sp, #12
    66ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    66f2:	2008      	movs	r0, #8
			set_data[set_data_len++] = len + 1;
    66f4:	fa5f f882 	uxtb.w	r8, r2
    66f8:	f108 0c01 	add.w	ip, r8, #1
    66fc:	f809 c001 	strb.w	ip, [r9, r1]
    6700:	3101      	adds	r1, #1
			set_data[set_data_len++] = type;
    6702:	b2c9      	uxtb	r1, r1
    6704:	b2f6      	uxtb	r6, r6
    6706:	f809 0001 	strb.w	r0, [r9, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    670a:	eb09 0006 	add.w	r0, r9, r6
    670e:	6869      	ldr	r1, [r5, #4]
    6710:	9301      	str	r3, [sp, #4]
    6712:	f01d fd1c 	bl	2414e <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    6716:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    6718:	4446      	add	r6, r8
    671a:	b2f1      	uxtb	r1, r6
		for (size_t j = 0; j < ad[i].len; j++) {
    671c:	3301      	adds	r3, #1
    671e:	3508      	adds	r5, #8
    6720:	e7bc      	b.n	669c <hci_set_ad+0x38>
		return -ENOBUFS;
    6722:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6726:	e7e1      	b.n	66ec <hci_set_ad+0x88>
    6728:	0002b232 	.word	0x0002b232

0000672c <le_adv_update.constprop.37>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6730:	b087      	sub	sp, #28
    6732:	4607      	mov	r7, r0
    6734:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
    6738:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    673c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    6740:	460c      	mov	r4, r1
    6742:	4692      	mov	sl, r2
	struct bt_ad d[2] = {};
    6744:	2100      	movs	r1, #0
    6746:	2210      	movs	r2, #16
    6748:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    674a:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
    674c:	f01d fd29 	bl	241a2 <memset>
	if (use_name) {
    6750:	b175      	cbz	r5, 6770 <le_adv_update.constprop.37+0x44>
		if ((ad && ad_has_name(ad, ad_len)) ||
    6752:	bba4      	cbnz	r4, 67be <le_adv_update.constprop.37+0x92>
    6754:	2e00      	cmp	r6, #0
    6756:	d13d      	bne.n	67d4 <le_adv_update.constprop.37+0xa8>
		data = (struct bt_data)BT_DATA(
    6758:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 6804 <le_adv_update.constprop.37+0xd8>
    675c:	4658      	mov	r0, fp
    675e:	f01d fca4 	bl	240aa <strlen>
    6762:	2309      	movs	r3, #9
    6764:	f88d 3000 	strb.w	r3, [sp]
    6768:	f88d 0001 	strb.w	r0, [sp, #1]
    676c:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    6770:	e9cd 4a02 	strd	r4, sl, [sp, #8]
		if (use_name && !scannable) {
    6774:	b385      	cbz	r5, 67d8 <le_adv_update.constprop.37+0xac>
    6776:	f1b9 0f00 	cmp.w	r9, #0
    677a:	d12d      	bne.n	67d8 <le_adv_update.constprop.37+0xac>
			d[1].len = 1;
    677c:	2301      	movs	r3, #1
			d[1].data = &data;
    677e:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    6782:	9305      	str	r3, [sp, #20]
			d_len = 2;
    6784:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    6786:	a902      	add	r1, sp, #8
    6788:	f242 0008 	movw	r0, #8200	; 0x2008
    678c:	f7ff ff6a 	bl	6664 <hci_set_ad>
		if (err) {
    6790:	4604      	mov	r4, r0
    6792:	b938      	cbnz	r0, 67a4 <le_adv_update.constprop.37+0x78>
	if (scannable) {
    6794:	f1b9 0f00 	cmp.w	r9, #0
    6798:	d120      	bne.n	67dc <le_adv_update.constprop.37+0xb0>
    679a:	2104      	movs	r1, #4
    679c:	f107 0010 	add.w	r0, r7, #16
    67a0:	f01d ffaa 	bl	246f8 <atomic_or>
}
    67a4:	4620      	mov	r0, r4
    67a6:	b007      	add	sp, #28
    67a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    67ac:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    67b0:	3a08      	subs	r2, #8
    67b2:	2a01      	cmp	r2, #1
    67b4:	d923      	bls.n	67fe <le_adv_update.constprop.37+0xd2>
	for (i = 0; i < ad_len; i++) {
    67b6:	3301      	adds	r3, #1
    67b8:	459a      	cmp	sl, r3
    67ba:	d1f7      	bne.n	67ac <le_adv_update.constprop.37+0x80>
    67bc:	e7ca      	b.n	6754 <le_adv_update.constprop.37+0x28>
    67be:	2300      	movs	r3, #0
    67c0:	e7fa      	b.n	67b8 <le_adv_update.constprop.37+0x8c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    67c2:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
    67c6:	3a08      	subs	r2, #8
    67c8:	2a01      	cmp	r2, #1
    67ca:	d918      	bls.n	67fe <le_adv_update.constprop.37+0xd2>
	for (i = 0; i < ad_len; i++) {
    67cc:	3301      	adds	r3, #1
    67ce:	4598      	cmp	r8, r3
    67d0:	d1f7      	bne.n	67c2 <le_adv_update.constprop.37+0x96>
    67d2:	e7c1      	b.n	6758 <le_adv_update.constprop.37+0x2c>
    67d4:	2300      	movs	r3, #0
    67d6:	e7fa      	b.n	67ce <le_adv_update.constprop.37+0xa2>
		d_len = 1;
    67d8:	2201      	movs	r2, #1
    67da:	e7d4      	b.n	6786 <le_adv_update.constprop.37+0x5a>
		d[0].len = sd_len;
    67dc:	e9cd 6802 	strd	r6, r8, [sp, #8]
		if (use_name) {
    67e0:	2201      	movs	r2, #1
    67e2:	b11d      	cbz	r5, 67ec <le_adv_update.constprop.37+0xc0>
			d[1].len = 1;
    67e4:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    67e6:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    67ea:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    67ec:	a902      	add	r1, sp, #8
    67ee:	f242 0009 	movw	r0, #8201	; 0x2009
    67f2:	f7ff ff37 	bl	6664 <hci_set_ad>
		if (err) {
    67f6:	2800      	cmp	r0, #0
    67f8:	d0cf      	beq.n	679a <le_adv_update.constprop.37+0x6e>
    67fa:	4604      	mov	r4, r0
    67fc:	e7d2      	b.n	67a4 <le_adv_update.constprop.37+0x78>
			return -EINVAL;
    67fe:	f06f 0415 	mvn.w	r4, #21
    6802:	e7cf      	b.n	67a4 <le_adv_update.constprop.37+0x78>
    6804:	0002b338 	.word	0x0002b338

00006808 <set_random_address>:
{
    6808:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    680a:	4d15      	ldr	r5, [pc, #84]	; (6860 <set_random_address+0x58>)
    680c:	2206      	movs	r2, #6
    680e:	f105 012d 	add.w	r1, r5, #45	; 0x2d
    6812:	4606      	mov	r6, r0
    6814:	f01d fc74 	bl	24100 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    6818:	4604      	mov	r4, r0
    681a:	b1e0      	cbz	r0, 6856 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    681c:	2106      	movs	r1, #6
    681e:	f242 0005 	movw	r0, #8197	; 0x2005
    6822:	f7ff fd47 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
    6826:	4604      	mov	r4, r0
    6828:	b1b8      	cbz	r0, 685a <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    682a:	2206      	movs	r2, #6
    682c:	4631      	mov	r1, r6
    682e:	3008      	adds	r0, #8
    6830:	f021 fb9d 	bl	27f6e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    6834:	4621      	mov	r1, r4
    6836:	2200      	movs	r2, #0
    6838:	f242 0005 	movw	r0, #8197	; 0x2005
    683c:	f7ff fe76 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    6840:	4604      	mov	r4, r0
    6842:	b940      	cbnz	r0, 6856 <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    6844:	2206      	movs	r2, #6
    6846:	4631      	mov	r1, r6
    6848:	f105 002d 	add.w	r0, r5, #45	; 0x2d
    684c:	f01d fc7f 	bl	2414e <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    6850:	2301      	movs	r3, #1
    6852:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
    6856:	4620      	mov	r0, r4
    6858:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    685a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    685e:	e7fa      	b.n	6856 <set_random_address+0x4e>
    6860:	20000198 	.word	0x20000198

00006864 <le_adv_set_random_addr.isra.28>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    6864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    6868:	f011 0401 	ands.w	r4, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    686c:	4606      	mov	r6, r0
    686e:	460d      	mov	r5, r1
    6870:	4692      	mov	sl, r2
    6872:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    6874:	d02b      	beq.n	68ce <le_adv_set_random_addr.isra.28+0x6a>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    6876:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 6938 <le_adv_set_random_addr.isra.28+0xd4>
    687a:	b12a      	cbz	r2, 6888 <le_adv_set_random_addr.isra.28+0x24>
    687c:	0688      	lsls	r0, r1, #26
    687e:	d503      	bpl.n	6888 <le_adv_set_random_addr.isra.28+0x24>
    6880:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    6884:	0659      	lsls	r1, r3, #25
    6886:	d554      	bpl.n	6932 <le_adv_set_random_addr.isra.28+0xce>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    6888:	ea4f 09c6 	mov.w	r9, r6, lsl #3
    688c:	eba9 0306 	sub.w	r3, r9, r6
    6890:	f818 3003 	ldrb.w	r3, [r8, r3]
    6894:	2b01      	cmp	r3, #1
    6896:	d009      	beq.n	68ac <le_adv_set_random_addr.isra.28+0x48>
			*own_addr_type = id_addr->type;
    6898:	eba9 0606 	sub.w	r6, r9, r6
    689c:	f818 3006 	ldrb.w	r3, [r8, r6]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    68a0:	f1ba 0f00 	cmp.w	sl, #0
    68a4:	d10e      	bne.n	68c4 <le_adv_set_random_addr.isra.28+0x60>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    68a6:	703b      	strb	r3, [r7, #0]
	return 0;
    68a8:	2400      	movs	r4, #0
    68aa:	e008      	b.n	68be <le_adv_set_random_addr.isra.28+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    68ac:	2007      	movs	r0, #7
    68ae:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    68b2:	4440      	add	r0, r8
    68b4:	f7ff ffa8 	bl	6808 <set_random_address>
				if (err) {
    68b8:	4604      	mov	r4, r0
    68ba:	2800      	cmp	r0, #0
    68bc:	d0ec      	beq.n	6898 <le_adv_set_random_addr.isra.28+0x34>
}
    68be:	4620      	mov	r0, r4
    68c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    68c4:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    68c6:	bf48      	it	mi
    68c8:	f043 0302 	orrmi.w	r3, r3, #2
    68cc:	e7eb      	b.n	68a6 <le_adv_set_random_addr.isra.28+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    68ce:	f011 0504 	ands.w	r5, r1, #4
    68d2:	d013      	beq.n	68fc <le_adv_set_random_addr.isra.28+0x98>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    68d4:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    68d8:	4d17      	ldr	r5, [pc, #92]	; (6938 <le_adv_set_random_addr.isra.28+0xd4>)
    68da:	eba8 0300 	sub.w	r3, r8, r0
    68de:	5ceb      	ldrb	r3, [r5, r3]
    68e0:	2b01      	cmp	r3, #1
    68e2:	d106      	bne.n	68f2 <le_adv_set_random_addr.isra.28+0x8e>
				err = set_adv_random_address(adv, &id_addr->a);
    68e4:	2007      	movs	r0, #7
    68e6:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    68ea:	4428      	add	r0, r5
    68ec:	f7ff ff8c 	bl	6808 <set_random_address>
    68f0:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    68f2:	eba8 0606 	sub.w	r6, r8, r6
    68f6:	5dab      	ldrb	r3, [r5, r6]
    68f8:	703b      	strb	r3, [r7, #0]
    68fa:	e7e0      	b.n	68be <le_adv_set_random_addr.isra.28+0x5a>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    68fc:	2105      	movs	r1, #5
    68fe:	480f      	ldr	r0, [pc, #60]	; (693c <le_adv_set_random_addr.isra.28+0xd8>)
    6900:	f01d ff37 	bl	24772 <atomic_test_bit>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    6904:	b950      	cbnz	r0, 691c <le_adv_set_random_addr.isra.28+0xb8>
			bool scan_enabled = false;
    6906:	2600      	movs	r6, #0
			err = le_adv_set_private_addr(adv);
    6908:	f01d ff3c 	bl	24784 <le_adv_set_private_addr.isra.27>
    690c:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    690e:	2001      	movs	r0, #1
    6910:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    6912:	2e00      	cmp	r6, #0
    6914:	d0d3      	beq.n	68be <le_adv_set_random_addr.isra.28+0x5a>
	return set_le_scan_enable_legacy(enable);
    6916:	f7ff fe6b 	bl	65f0 <set_le_scan_enable_legacy>
		if (err) {
    691a:	e7d0      	b.n	68be <le_adv_set_random_addr.isra.28+0x5a>
			    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    691c:	2107      	movs	r1, #7
    691e:	4807      	ldr	r0, [pc, #28]	; (693c <le_adv_set_random_addr.isra.28+0xd8>)
    6920:	f01d ff27 	bl	24772 <atomic_test_bit>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    6924:	4606      	mov	r6, r0
    6926:	2800      	cmp	r0, #0
    6928:	d0ed      	beq.n	6906 <le_adv_set_random_addr.isra.28+0xa2>
	return set_le_scan_enable_legacy(enable);
    692a:	4628      	mov	r0, r5
    692c:	f7ff fe60 	bl	65f0 <set_le_scan_enable_legacy>
    6930:	e7ea      	b.n	6908 <le_adv_set_random_addr.isra.28+0xa4>
			return -ENOTSUP;
    6932:	f06f 0422 	mvn.w	r4, #34	; 0x22
    6936:	e7c2      	b.n	68be <le_adv_set_random_addr.isra.28+0x5a>
    6938:	20000198 	.word	0x20000198
    693c:	2000022c 	.word	0x2000022c

00006940 <set_le_adv_enable_legacy>:
{
    6940:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6942:	4606      	mov	r6, r0
    6944:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    6946:	f242 000a 	movw	r0, #8202	; 0x200a
    694a:	2101      	movs	r1, #1
    694c:	f7ff fcb2 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
    6950:	4604      	mov	r4, r0
    6952:	b1e8      	cbz	r0, 6990 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    6954:	3008      	adds	r0, #8
    6956:	b1cd      	cbz	r5, 698c <set_le_adv_enable_legacy+0x4c>
	return net_buf_simple_add_u8(&buf->b, val);
    6958:	2101      	movs	r1, #1
    695a:	f021 fb14 	bl	27f86 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    695e:	3610      	adds	r6, #16
    6960:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    6962:	4620      	mov	r0, r4
    6964:	9302      	str	r3, [sp, #8]
	state->target = target;
    6966:	9601      	str	r6, [sp, #4]
	state->val = val;
    6968:	f88d 500c 	strb.w	r5, [sp, #12]
    696c:	f015 fd70 	bl	1c450 <net_buf_id>
    6970:	4a09      	ldr	r2, [pc, #36]	; (6998 <set_le_adv_enable_legacy+0x58>)
    6972:	230c      	movs	r3, #12
    6974:	fb03 2000 	mla	r0, r3, r0, r2
    6978:	ab01      	add	r3, sp, #4
    697a:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    697c:	2200      	movs	r2, #0
    697e:	4621      	mov	r1, r4
    6980:	f242 000a 	movw	r0, #8202	; 0x200a
    6984:	f7ff fdd2 	bl	652c <bt_hci_cmd_send_sync>
}
    6988:	b004      	add	sp, #16
    698a:	bd70      	pop	{r4, r5, r6, pc}
    698c:	4629      	mov	r1, r5
    698e:	e7e4      	b.n	695a <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    6990:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6994:	e7f8      	b.n	6988 <set_le_adv_enable_legacy+0x48>
    6996:	bf00      	nop
    6998:	20002898 	.word	0x20002898

0000699c <bt_le_scan_random_addr_check>:
{
    699c:	b508      	push	{r3, lr}
	    !atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    699e:	2106      	movs	r1, #6
    69a0:	4802      	ldr	r0, [pc, #8]	; (69ac <bt_le_scan_random_addr_check+0x10>)
    69a2:	f01d fee6 	bl	24772 <atomic_test_bit>
}
    69a6:	2001      	movs	r0, #1
    69a8:	bd08      	pop	{r3, pc}
    69aa:	bf00      	nop
    69ac:	200001c0 	.word	0x200001c0

000069b0 <bt_le_scan_update>:
{
    69b0:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    69b2:	2106      	movs	r1, #6
    69b4:	4808      	ldr	r0, [pc, #32]	; (69d8 <bt_le_scan_update+0x28>)
    69b6:	f01d fedc 	bl	24772 <atomic_test_bit>
    69ba:	4603      	mov	r3, r0
    69bc:	b948      	cbnz	r0, 69d2 <bt_le_scan_update+0x22>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    69be:	2105      	movs	r1, #5
    69c0:	4805      	ldr	r0, [pc, #20]	; (69d8 <bt_le_scan_update+0x28>)
    69c2:	f01d fed6 	bl	24772 <atomic_test_bit>
    69c6:	b120      	cbz	r0, 69d2 <bt_le_scan_update+0x22>
	return set_le_scan_enable_legacy(enable);
    69c8:	4618      	mov	r0, r3
}
    69ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return set_le_scan_enable_legacy(enable);
    69ce:	f7ff be0f 	b.w	65f0 <set_le_scan_enable_legacy>
}
    69d2:	2000      	movs	r0, #0
    69d4:	bd08      	pop	{r3, pc}
    69d6:	bf00      	nop
    69d8:	2000022c 	.word	0x2000022c

000069dc <hci_event_prio>:
{
    69dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69e0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    69e2:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    69e6:	4628      	mov	r0, r5
    69e8:	f021 fab5 	bl	27f56 <net_buf_simple_headroom>
	state->len = buf->len;
    69ec:	89a7      	ldrh	r7, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    69ee:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
    69f0:	4606      	mov	r6, r0
    69f2:	d80b      	bhi.n	6a0c <hci_event_prio+0x30>
    69f4:	f641 02ae 	movw	r2, #6318	; 0x18ae
    69f8:	4920      	ldr	r1, [pc, #128]	; (6a7c <hci_event_prio+0xa0>)
    69fa:	4821      	ldr	r0, [pc, #132]	; (6a80 <hci_event_prio+0xa4>)
    69fc:	f01b fa65 	bl	21eca <printk>
    6a00:	4040      	eors	r0, r0
    6a02:	f380 8811 	msr	BASEPRI, r0
    6a06:	f04f 0003 	mov.w	r0, #3
    6a0a:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    6a0c:	2102      	movs	r1, #2
    6a0e:	4628      	mov	r0, r5
    6a10:	f016 f85c 	bl	1cacc <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6a14:	7803      	ldrb	r3, [r0, #0]
    6a16:	2b1a      	cmp	r3, #26
    6a18:	4680      	mov	r8, r0
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    6a1a:	d828      	bhi.n	6a6e <hci_event_prio+0x92>
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
    6a1c:	2501      	movs	r5, #1
    6a1e:	4a19      	ldr	r2, [pc, #100]	; (6a84 <hci_event_prio+0xa8>)
    6a20:	fa05 f303 	lsl.w	r3, r5, r3
    6a24:	4213      	tst	r3, r2
    6a26:	d104      	bne.n	6a32 <hci_event_prio+0x56>
    6a28:	f013 0f20 	tst.w	r3, #32
#endif /* defined(CONFIG_BT_CONN) */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
    6a2c:	bf14      	ite	ne
    6a2e:	2503      	movne	r5, #3
    6a30:	2502      	moveq	r5, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6a32:	07ea      	lsls	r2, r5, #31
    6a34:	d40b      	bmi.n	6a4e <hci_event_prio+0x72>
    6a36:	f641 02b2 	movw	r2, #6322	; 0x18b2
    6a3a:	4910      	ldr	r1, [pc, #64]	; (6a7c <hci_event_prio+0xa0>)
    6a3c:	4810      	ldr	r0, [pc, #64]	; (6a80 <hci_event_prio+0xa4>)
    6a3e:	f01b fa44 	bl	21eca <printk>
    6a42:	4040      	eors	r0, r0
    6a44:	f380 8811 	msr	BASEPRI, r0
    6a48:	f04f 0003 	mov.w	r0, #3
    6a4c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    6a4e:	2305      	movs	r3, #5
    6a50:	4a0d      	ldr	r2, [pc, #52]	; (6a88 <hci_event_prio+0xac>)
    6a52:	f898 0000 	ldrb.w	r0, [r8]
    6a56:	4621      	mov	r1, r4
    6a58:	f7ff f93c 	bl	5cd4 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    6a5c:	07ab      	lsls	r3, r5, #30
    6a5e:	d508      	bpl.n	6a72 <hci_event_prio+0x96>
	buf->data = buf->__buf + state->offset;
    6a60:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    6a62:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6a64:	fa13 f686 	uxtah	r6, r3, r6
    6a68:	60a6      	str	r6, [r4, #8]
}
    6a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a6e:	2502      	movs	r5, #2
    6a70:	e7df      	b.n	6a32 <hci_event_prio+0x56>
		net_buf_unref(buf);
    6a72:	4620      	mov	r0, r4
}
    6a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    6a78:	f015 bef6 	b.w	1c868 <net_buf_unref>
    6a7c:	0002b250 	.word	0x0002b250
    6a80:	0002a026 	.word	0x0002a026
    6a84:	0408c000 	.word	0x0408c000
    6a88:	000292fc 	.word	0x000292fc

00006a8c <bt_recv>:
{
    6a8c:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    6a8e:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    6a90:	2d01      	cmp	r5, #1
{
    6a92:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    6a94:	d03e      	beq.n	6b14 <bt_recv+0x88>
    6a96:	2d03      	cmp	r5, #3
    6a98:	d175      	bne.n	6b86 <bt_recv+0xfa>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6a9a:	8983      	ldrh	r3, [r0, #12]
    6a9c:	2b03      	cmp	r3, #3
    6a9e:	d80b      	bhi.n	6ab8 <bt_recv+0x2c>
    6aa0:	f240 42ac 	movw	r2, #1196	; 0x4ac
    6aa4:	493d      	ldr	r1, [pc, #244]	; (6b9c <bt_recv+0x110>)
    6aa6:	483e      	ldr	r0, [pc, #248]	; (6ba0 <bt_recv+0x114>)
    6aa8:	f01b fa0f 	bl	21eca <printk>
    6aac:	4040      	eors	r0, r0
    6aae:	f380 8811 	msr	BASEPRI, r0
    6ab2:	f04f 0003 	mov.w	r0, #3
    6ab6:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    6ab8:	2104      	movs	r1, #4
    6aba:	f104 0008 	add.w	r0, r4, #8
    6abe:	f016 f805 	bl	1cacc <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    6ac2:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    6ac4:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    6ac6:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    6ac8:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    6aca:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    6acc:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    6ad0:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    6ad2:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    6ad4:	d007      	beq.n	6ae6 <bt_recv+0x5a>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    6ad6:	2145      	movs	r1, #69	; 0x45
    6ad8:	4832      	ldr	r0, [pc, #200]	; (6ba4 <bt_recv+0x118>)
    6ada:	f01b f9f6 	bl	21eca <printk>
	net_buf_unref(buf);
    6ade:	4620      	mov	r0, r4
    6ae0:	f015 fec2 	bl	1c868 <net_buf_unref>
    6ae4:	e014      	b.n	6b10 <bt_recv+0x84>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    6ae6:	f001 fa77 	bl	7fd8 <bt_conn_lookup_handle>
	if (!conn) {
    6aea:	4605      	mov	r5, r0
    6aec:	b928      	cbnz	r0, 6afa <bt_recv+0x6e>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    6aee:	8ae2      	ldrh	r2, [r4, #22]
    6af0:	482d      	ldr	r0, [pc, #180]	; (6ba8 <bt_recv+0x11c>)
    6af2:	2145      	movs	r1, #69	; 0x45
    6af4:	f01b f9e9 	bl	21eca <printk>
		net_buf_unref(buf);
    6af8:	e7f1      	b.n	6ade <bt_recv+0x52>
	acl(buf)->index = bt_conn_index(conn);
    6afa:	f001 fd3d 	bl	8578 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    6afe:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    6b00:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    6b02:	4621      	mov	r1, r4
    6b04:	4628      	mov	r0, r5
    6b06:	f001 f907 	bl	7d18 <bt_conn_recv>
	bt_conn_unref(conn);
    6b0a:	4628      	mov	r0, r5
    6b0c:	f001 fa38 	bl	7f80 <bt_conn_unref>
		return 0;
    6b10:	2000      	movs	r0, #0
}
    6b12:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6b14:	8983      	ldrh	r3, [r0, #12]
    6b16:	2b01      	cmp	r3, #1
    6b18:	d80b      	bhi.n	6b32 <bt_recv+0xa6>
    6b1a:	f241 32fb 	movw	r2, #5115	; 0x13fb
    6b1e:	491f      	ldr	r1, [pc, #124]	; (6b9c <bt_recv+0x110>)
    6b20:	481f      	ldr	r0, [pc, #124]	; (6ba0 <bt_recv+0x114>)
    6b22:	f01b f9d2 	bl	21eca <printk>
    6b26:	4040      	eors	r0, r0
    6b28:	f380 8811 	msr	BASEPRI, r0
    6b2c:	f04f 0003 	mov.w	r0, #3
    6b30:	df02      	svc	2
    6b32:	2102      	movs	r1, #2
    6b34:	f104 0008 	add.w	r0, r4, #8
    6b38:	f015 ffc8 	bl	1cacc <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    6b3c:	7802      	ldrb	r2, [r0, #0]
    6b3e:	2a1a      	cmp	r2, #26
    6b40:	4606      	mov	r6, r0
	switch (evt) {
    6b42:	d81e      	bhi.n	6b82 <bt_recv+0xf6>
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
    6b44:	2301      	movs	r3, #1
    6b46:	4093      	lsls	r3, r2
    6b48:	4a18      	ldr	r2, [pc, #96]	; (6bac <bt_recv+0x120>)
    6b4a:	4213      	tst	r3, r2
    6b4c:	d104      	bne.n	6b58 <bt_recv+0xcc>
    6b4e:	f013 0f20 	tst.w	r3, #32
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    6b52:	bf0c      	ite	eq
    6b54:	2502      	moveq	r5, #2
    6b56:	2503      	movne	r5, #3
    6b58:	07ab      	lsls	r3, r5, #30
    6b5a:	d40b      	bmi.n	6b74 <bt_recv+0xe8>
    6b5c:	f241 32ff 	movw	r2, #5119	; 0x13ff
    6b60:	490e      	ldr	r1, [pc, #56]	; (6b9c <bt_recv+0x110>)
    6b62:	480f      	ldr	r0, [pc, #60]	; (6ba0 <bt_recv+0x114>)
    6b64:	f01b f9b1 	bl	21eca <printk>
    6b68:	4040      	eors	r0, r0
    6b6a:	f380 8811 	msr	BASEPRI, r0
    6b6e:	f04f 0003 	mov.w	r0, #3
    6b72:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    6b74:	2304      	movs	r3, #4
    6b76:	4a0e      	ldr	r2, [pc, #56]	; (6bb0 <bt_recv+0x124>)
    6b78:	7830      	ldrb	r0, [r6, #0]
    6b7a:	4621      	mov	r1, r4
    6b7c:	f7ff f8aa 	bl	5cd4 <handle_event>
    6b80:	e7ad      	b.n	6ade <bt_recv+0x52>
		return BT_HCI_EVT_FLAG_RECV;
    6b82:	2502      	movs	r5, #2
    6b84:	e7e8      	b.n	6b58 <bt_recv+0xcc>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    6b86:	462a      	mov	r2, r5
    6b88:	2145      	movs	r1, #69	; 0x45
    6b8a:	480a      	ldr	r0, [pc, #40]	; (6bb4 <bt_recv+0x128>)
    6b8c:	f01b f99d 	bl	21eca <printk>
		net_buf_unref(buf);
    6b90:	4620      	mov	r0, r4
    6b92:	f015 fe69 	bl	1c868 <net_buf_unref>
		return -EINVAL;
    6b96:	f06f 0015 	mvn.w	r0, #21
    6b9a:	e7ba      	b.n	6b12 <bt_recv+0x86>
    6b9c:	0002b250 	.word	0x0002b250
    6ba0:	0002a026 	.word	0x0002a026
    6ba4:	0002afca 	.word	0x0002afca
    6ba8:	0002aff3 	.word	0x0002aff3
    6bac:	0408c000 	.word	0x0408c000
    6bb0:	000292dc 	.word	0x000292dc
    6bb4:	0002b01a 	.word	0x0002b01a

00006bb8 <bt_recv_prio>:
{
    6bb8:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6bba:	7d03      	ldrb	r3, [r0, #20]
    6bbc:	2b01      	cmp	r3, #1
{
    6bbe:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6bc0:	d00b      	beq.n	6bda <bt_recv_prio+0x22>
    6bc2:	f641 02f5 	movw	r2, #6389	; 0x18f5
    6bc6:	4907      	ldr	r1, [pc, #28]	; (6be4 <bt_recv_prio+0x2c>)
    6bc8:	4807      	ldr	r0, [pc, #28]	; (6be8 <bt_recv_prio+0x30>)
    6bca:	f01b f97e 	bl	21eca <printk>
    6bce:	4040      	eors	r0, r0
    6bd0:	f380 8811 	msr	BASEPRI, r0
    6bd4:	f04f 0003 	mov.w	r0, #3
    6bd8:	df02      	svc	2
	hci_event_prio(buf);
    6bda:	4620      	mov	r0, r4
    6bdc:	f7ff fefe 	bl	69dc <hci_event_prio>
}
    6be0:	2000      	movs	r0, #0
    6be2:	bd10      	pop	{r4, pc}
    6be4:	0002b250 	.word	0x0002b250
    6be8:	0002a026 	.word	0x0002a026

00006bec <bt_hci_driver_register>:
	if (bt_dev.drv) {
    6bec:	4a08      	ldr	r2, [pc, #32]	; (6c10 <bt_hci_driver_register+0x24>)
    6bee:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    6bf2:	b93b      	cbnz	r3, 6c04 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    6bf4:	68c1      	ldr	r1, [r0, #12]
    6bf6:	b141      	cbz	r1, 6c0a <bt_hci_driver_register+0x1e>
    6bf8:	6901      	ldr	r1, [r0, #16]
    6bfa:	b131      	cbz	r1, 6c0a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    6bfc:	f8c2 0118 	str.w	r0, [r2, #280]	; 0x118
	return 0;
    6c00:	4618      	mov	r0, r3
    6c02:	4770      	bx	lr
		return -EALREADY;
    6c04:	f06f 0044 	mvn.w	r0, #68	; 0x44
    6c08:	4770      	bx	lr
		return -EINVAL;
    6c0a:	f06f 0015 	mvn.w	r0, #21
}
    6c0e:	4770      	bx	lr
    6c10:	20000198 	.word	0x20000198

00006c14 <bt_finalize_init>:
{
    6c14:	b508      	push	{r3, lr}
    6c16:	2102      	movs	r1, #2
    6c18:	4803      	ldr	r0, [pc, #12]	; (6c28 <bt_finalize_init+0x14>)
    6c1a:	f01d fd6d 	bl	246f8 <atomic_or>
		bt_le_scan_update(false);
    6c1e:	2000      	movs	r0, #0
}
    6c20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    6c24:	f7ff bec4 	b.w	69b0 <bt_le_scan_update>
    6c28:	2000022c 	.word	0x2000022c

00006c2c <bt_init>:
{
    6c2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    6c2e:	4dbc      	ldr	r5, [pc, #752]	; (6f20 <bt_init+0x2f4>)
    6c30:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    6c34:	6899      	ldr	r1, [r3, #8]
    6c36:	f011 0101 	ands.w	r1, r1, #1
    6c3a:	d123      	bne.n	6c84 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    6c3c:	aa01      	add	r2, sp, #4
    6c3e:	f640 4003 	movw	r0, #3075	; 0xc03
    6c42:	f7ff fc73 	bl	652c <bt_hci_cmd_send_sync>
		if (err) {
    6c46:	4604      	mov	r4, r0
    6c48:	2800      	cmp	r0, #0
    6c4a:	d172      	bne.n	6d32 <bt_init+0x106>
		hci_reset_complete(rsp);
    6c4c:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
    6c4e:	689b      	ldr	r3, [r3, #8]
	if (status) {
    6c50:	781b      	ldrb	r3, [r3, #0]
    6c52:	b9a3      	cbnz	r3, 6c7e <bt_init+0x52>
	scan_dev_found_cb = NULL;
    6c54:	4ab3      	ldr	r2, [pc, #716]	; (6f24 <bt_init+0x2f8>)
    6c56:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6c58:	462b      	mov	r3, r5
    6c5a:	f3bf 8f5b 	dmb	ish
    6c5e:	f853 2f94 	ldr.w	r2, [r3, #148]!
    6c62:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    6c66:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6c6a:	f3bf 8f5b 	dmb	ish
    6c6e:	e853 1f00 	ldrex	r1, [r3]
    6c72:	e843 2000 	strex	r0, r2, [r3]
    6c76:	2800      	cmp	r0, #0
    6c78:	d1f9      	bne.n	6c6e <bt_init+0x42>
    6c7a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    6c7e:	9801      	ldr	r0, [sp, #4]
    6c80:	f015 fdf2 	bl	1c868 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    6c84:	aa01      	add	r2, sp, #4
    6c86:	2100      	movs	r1, #0
    6c88:	f241 0003 	movw	r0, #4099	; 0x1003
    6c8c:	f7ff fc4e 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    6c90:	4604      	mov	r4, r0
    6c92:	2800      	cmp	r0, #0
    6c94:	d14d      	bne.n	6d32 <bt_init+0x106>
	read_local_features_complete(rsp);
    6c96:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    6c98:	48a3      	ldr	r0, [pc, #652]	; (6f28 <bt_init+0x2fc>)
    6c9a:	6899      	ldr	r1, [r3, #8]
    6c9c:	2208      	movs	r2, #8
    6c9e:	3101      	adds	r1, #1
    6ca0:	f01d fa55 	bl	2414e <memcpy>
	net_buf_unref(rsp);
    6ca4:	9801      	ldr	r0, [sp, #4]
    6ca6:	f015 fddf 	bl	1c868 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    6caa:	4621      	mov	r1, r4
    6cac:	aa01      	add	r2, sp, #4
    6cae:	f241 0001 	movw	r0, #4097	; 0x1001
    6cb2:	f7ff fc3b 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    6cb6:	4604      	mov	r4, r0
    6cb8:	2800      	cmp	r0, #0
    6cba:	d13a      	bne.n	6d32 <bt_init+0x106>
	read_local_ver_complete(rsp);
    6cbc:	9801      	ldr	r0, [sp, #4]
    6cbe:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    6cc0:	785a      	ldrb	r2, [r3, #1]
    6cc2:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    6cc6:	78d9      	ldrb	r1, [r3, #3]
    6cc8:	789a      	ldrb	r2, [r3, #2]
    6cca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6cce:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    6cd0:	791a      	ldrb	r2, [r3, #4]
    6cd2:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    6cd6:	7a19      	ldrb	r1, [r3, #8]
    6cd8:	79da      	ldrb	r2, [r3, #7]
    6cda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6cde:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    6ce0:	795a      	ldrb	r2, [r3, #5]
    6ce2:	799b      	ldrb	r3, [r3, #6]
    6ce4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    6ce8:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    6cea:	f015 fdbd 	bl	1c868 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    6cee:	4621      	mov	r1, r4
    6cf0:	aa01      	add	r2, sp, #4
    6cf2:	f241 0002 	movw	r0, #4098	; 0x1002
    6cf6:	f7ff fc19 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    6cfa:	4604      	mov	r4, r0
    6cfc:	b9c8      	cbnz	r0, 6d32 <bt_init+0x106>
	read_supported_commands_complete(rsp);
    6cfe:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    6d00:	488a      	ldr	r0, [pc, #552]	; (6f2c <bt_init+0x300>)
    6d02:	6899      	ldr	r1, [r3, #8]
    6d04:	2240      	movs	r2, #64	; 0x40
    6d06:	3101      	adds	r1, #1
    6d08:	f01d fa21 	bl	2414e <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
    6d0c:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    6d10:	9801      	ldr	r0, [sp, #4]
		bt_dev.supported_commands[34] |= 0x04;
    6d12:	f043 0306 	orr.w	r3, r3, #6
    6d16:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    6d1a:	f015 fda5 	bl	1c868 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    6d1e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    6d22:	0658      	lsls	r0, r3, #25
    6d24:	d408      	bmi.n	6d38 <bt_init+0x10c>
		BT_ERR("Non-LE capable controller detected!");
    6d26:	2145      	movs	r1, #69	; 0x45
    6d28:	4881      	ldr	r0, [pc, #516]	; (6f30 <bt_init+0x304>)
    6d2a:	f01b f8ce 	bl	21eca <printk>
		return -ENODEV;
    6d2e:	f06f 0412 	mvn.w	r4, #18
}
    6d32:	4620      	mov	r0, r4
    6d34:	b002      	add	sp, #8
    6d36:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    6d38:	4621      	mov	r1, r4
    6d3a:	aa01      	add	r2, sp, #4
    6d3c:	f242 0003 	movw	r0, #8195	; 0x2003
    6d40:	f7ff fbf4 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    6d44:	4604      	mov	r4, r0
    6d46:	2800      	cmp	r0, #0
    6d48:	d1f3      	bne.n	6d32 <bt_init+0x106>
	read_le_features_complete(rsp);
    6d4a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    6d4c:	4879      	ldr	r0, [pc, #484]	; (6f34 <bt_init+0x308>)
    6d4e:	6899      	ldr	r1, [r3, #8]
    6d50:	2208      	movs	r2, #8
    6d52:	3101      	adds	r1, #1
    6d54:	f01d f9fb 	bl	2414e <memcpy>
	net_buf_unref(rsp);
    6d58:	9801      	ldr	r0, [sp, #4]
    6d5a:	f015 fd85 	bl	1c868 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    6d5e:	4621      	mov	r1, r4
    6d60:	aa01      	add	r2, sp, #4
    6d62:	f242 0002 	movw	r0, #8194	; 0x2002
    6d66:	f7ff fbe1 	bl	652c <bt_hci_cmd_send_sync>
		if (err) {
    6d6a:	4604      	mov	r4, r0
    6d6c:	2800      	cmp	r0, #0
    6d6e:	d1e0      	bne.n	6d32 <bt_init+0x106>
		le_read_buffer_size_complete(rsp);
    6d70:	9b01      	ldr	r3, [sp, #4]
    6d72:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    6d74:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    6d78:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
    6d7c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    6d7e:	b121      	cbz	r1, 6d8a <bt_init+0x15e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    6d80:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    6d82:	486d      	ldr	r0, [pc, #436]	; (6f38 <bt_init+0x30c>)
    6d84:	4611      	mov	r1, r2
    6d86:	f021 fcdb 	bl	28740 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    6d8a:	9801      	ldr	r0, [sp, #4]
    6d8c:	f015 fd6c 	bl	1c868 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    6d90:	f895 4040 	ldrb.w	r4, [r5, #64]	; 0x40
    6d94:	f014 0420 	ands.w	r4, r4, #32
    6d98:	f000 8092 	beq.w	6ec0 <bt_init+0x294>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    6d9c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    6da0:	0719      	lsls	r1, r3, #28
    6da2:	f100 80a9 	bmi.w	6ef8 <bt_init+0x2cc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    6da6:	2108      	movs	r1, #8
    6da8:	f242 0001 	movw	r0, #8193	; 0x2001
    6dac:	f7ff fa82 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
    6db0:	4604      	mov	r4, r0
    6db2:	2800      	cmp	r0, #0
    6db4:	f000 808b 	beq.w	6ece <bt_init+0x2a2>
	return net_buf_simple_add(&buf->b, len);
    6db8:	2108      	movs	r1, #8
    6dba:	4408      	add	r0, r1
    6dbc:	f015 fea4 	bl	1cb08 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    6dc0:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    6dc4:	f895 2066 	ldrb.w	r2, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    6dc8:	f013 0f02 	tst.w	r3, #2
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    6dcc:	f002 0206 	and.w	r2, r2, #6
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    6dd0:	bf0c      	ite	eq
    6dd2:	230f      	moveq	r3, #15
    6dd4:	232f      	movne	r3, #47	; 0x2f
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    6dd6:	2a06      	cmp	r2, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    6dd8:	bf08      	it	eq
    6dda:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	dst[0] = val;
    6dde:	2200      	movs	r2, #0
    6de0:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    6de2:	0a1b      	lsrs	r3, r3, #8
    6de4:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    6de6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    6de8:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    6dea:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    6dec:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    6dee:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    6df0:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    6df2:	4621      	mov	r1, r4
    6df4:	f242 0001 	movw	r0, #8193	; 0x2001
    6df8:	f7ff fb98 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    6dfc:	4604      	mov	r4, r0
    6dfe:	2800      	cmp	r0, #0
    6e00:	d197      	bne.n	6d32 <bt_init+0x106>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    6e02:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    6e06:	069a      	lsls	r2, r3, #26
    6e08:	d41d      	bmi.n	6e46 <bt_init+0x21a>
	if (bt_dev.le.acl_mtu) {
    6e0a:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    6e0e:	b9d1      	cbnz	r1, 6e46 <bt_init+0x21a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    6e10:	aa01      	add	r2, sp, #4
    6e12:	f241 0005 	movw	r0, #4101	; 0x1005
    6e16:	f7ff fb89 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    6e1a:	4604      	mov	r4, r0
    6e1c:	2800      	cmp	r0, #0
    6e1e:	d188      	bne.n	6d32 <bt_init+0x106>
	if (bt_dev.le.acl_mtu) {
    6e20:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    6e24:	b963      	cbnz	r3, 6e40 <bt_init+0x214>
	read_buffer_size_complete(rsp);
    6e26:	9b01      	ldr	r3, [sp, #4]
    6e28:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    6e2a:	785a      	ldrb	r2, [r3, #1]
    6e2c:	7899      	ldrb	r1, [r3, #2]
    6e2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6e32:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    6e36:	889a      	ldrh	r2, [r3, #4]
    6e38:	483f      	ldr	r0, [pc, #252]	; (6f38 <bt_init+0x30c>)
    6e3a:	4611      	mov	r1, r2
    6e3c:	f021 fc80 	bl	28740 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    6e40:	9801      	ldr	r0, [sp, #4]
    6e42:	f015 fd11 	bl	1c868 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    6e46:	2108      	movs	r1, #8
    6e48:	f640 4001 	movw	r0, #3073	; 0xc01
    6e4c:	f7ff fa32 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
    6e50:	4604      	mov	r4, r0
    6e52:	2800      	cmp	r0, #0
    6e54:	d03b      	beq.n	6ece <bt_init+0x2a2>
    6e56:	2108      	movs	r1, #8
    6e58:	4408      	add	r0, r1
    6e5a:	f015 fe55 	bl	1cb08 <net_buf_simple_add>
	dst[0] = val;
    6e5e:	2310      	movs	r3, #16
    6e60:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    6e62:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    6e64:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    6e66:	7043      	strb	r3, [r0, #1]
    6e68:	2602      	movs	r6, #2
    6e6a:	2320      	movs	r3, #32
	dst[0] = val;
    6e6c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    6e6e:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    6e70:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    6e72:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    6e74:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    6e76:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    6e78:	4621      	mov	r1, r4
    6e7a:	f640 4001 	movw	r0, #3073	; 0xc01
    6e7e:	f7ff fb55 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    6e82:	4604      	mov	r4, r0
    6e84:	2800      	cmp	r0, #0
    6e86:	f47f af54 	bne.w	6d32 <bt_init+0x106>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    6e8a:	4601      	mov	r1, r0
    6e8c:	aa01      	add	r2, sp, #4
    6e8e:	f64f 4001 	movw	r0, #64513	; 0xfc01
    6e92:	f7ff fb4b 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    6e96:	4604      	mov	r4, r0
    6e98:	2800      	cmp	r0, #0
    6e9a:	d053      	beq.n	6f44 <bt_init+0x318>
		BT_WARN("Vendor HCI extensions not available");
    6e9c:	4827      	ldr	r0, [pc, #156]	; (6f3c <bt_init+0x310>)
    6e9e:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed to read supported vendor features");
    6ea0:	f01b f813 	bl	21eca <printk>
		err = bt_conn_init();
    6ea4:	f001 fb86 	bl	85b4 <bt_conn_init>
		if (err) {
    6ea8:	4604      	mov	r4, r0
    6eaa:	2800      	cmp	r0, #0
    6eac:	f47f af41 	bne.w	6d32 <bt_init+0x106>
		if (!bt_dev.id_count) {
    6eb0:	79eb      	ldrb	r3, [r5, #7]
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	d177      	bne.n	6fa6 <bt_init+0x37a>
			BT_INFO("No ID address. App must call settings_load()");
    6eb6:	2149      	movs	r1, #73	; 0x49
    6eb8:	4821      	ldr	r0, [pc, #132]	; (6f40 <bt_init+0x314>)
    6eba:	f01b f806 	bl	21eca <printk>
			return 0;
    6ebe:	e738      	b.n	6d32 <bt_init+0x106>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    6ec0:	2102      	movs	r1, #2
    6ec2:	f640 406d 	movw	r0, #3181	; 0xc6d
    6ec6:	f7ff f9f5 	bl	62b4 <bt_hci_cmd_create>
		if (!buf) {
    6eca:	4606      	mov	r6, r0
    6ecc:	b910      	cbnz	r0, 6ed4 <bt_init+0x2a8>
		return -ENOBUFS;
    6ece:	f06f 0436 	mvn.w	r4, #54	; 0x36
    6ed2:	e72e      	b.n	6d32 <bt_init+0x106>
    6ed4:	2102      	movs	r1, #2
    6ed6:	3008      	adds	r0, #8
    6ed8:	f015 fe16 	bl	1cb08 <net_buf_simple_add>
		cp_le->le = 0x01;
    6edc:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    6ede:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    6ee0:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    6ee2:	4622      	mov	r2, r4
    6ee4:	4631      	mov	r1, r6
    6ee6:	f640 406d 	movw	r0, #3181	; 0xc6d
    6eea:	f7ff fb1f 	bl	652c <bt_hci_cmd_send_sync>
		if (err) {
    6eee:	4604      	mov	r4, r0
    6ef0:	2800      	cmp	r0, #0
    6ef2:	f43f af53 	beq.w	6d9c <bt_init+0x170>
    6ef6:	e71c      	b.n	6d32 <bt_init+0x106>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    6ef8:	aa01      	add	r2, sp, #4
    6efa:	2100      	movs	r1, #0
    6efc:	f242 001c 	movw	r0, #8220	; 0x201c
    6f00:	f7ff fb14 	bl	652c <bt_hci_cmd_send_sync>
		if (err) {
    6f04:	4604      	mov	r4, r0
    6f06:	2800      	cmp	r0, #0
    6f08:	f47f af13 	bne.w	6d32 <bt_init+0x106>
		le_read_supp_states_complete(rsp);
    6f0c:	9801      	ldr	r0, [sp, #4]
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    6f0e:	6883      	ldr	r3, [r0, #8]
    6f10:	f853 2f01 	ldr.w	r2, [r3, #1]!
    6f14:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    6f16:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    6f1a:	f015 fca5 	bl	1c868 <net_buf_unref>
    6f1e:	e742      	b.n	6da6 <bt_init+0x17a>
    6f20:	20000198 	.word	0x20000198
    6f24:	200028c4 	.word	0x200028c4
    6f28:	200001d4 	.word	0x200001d4
    6f2c:	200001dc 	.word	0x200001dc
    6f30:	0002adb8 	.word	0x0002adb8
    6f34:	20000230 	.word	0x20000230
    6f38:	20000260 	.word	0x20000260
    6f3c:	0002ade1 	.word	0x0002ade1
    6f40:	0002ae66 	.word	0x0002ae66
	net_buf_unref(rsp);
    6f44:	9801      	ldr	r0, [sp, #4]
    6f46:	f015 fc8f 	bl	1c868 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    6f4a:	4621      	mov	r1, r4
    6f4c:	aa01      	add	r2, sp, #4
    6f4e:	f64f 4002 	movw	r0, #64514	; 0xfc02
    6f52:	f7ff faeb 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    6f56:	4604      	mov	r4, r0
    6f58:	b110      	cbz	r0, 6f60 <bt_init+0x334>
		BT_WARN("Failed to read supported vendor commands");
    6f5a:	2157      	movs	r1, #87	; 0x57
    6f5c:	4815      	ldr	r0, [pc, #84]	; (6fb4 <bt_init+0x388>)
    6f5e:	e79f      	b.n	6ea0 <bt_init+0x274>
	rp.cmds = (void *)rsp->data;
    6f60:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    6f62:	4815      	ldr	r0, [pc, #84]	; (6fb8 <bt_init+0x38c>)
    6f64:	6899      	ldr	r1, [r3, #8]
    6f66:	4632      	mov	r2, r6
    6f68:	3101      	adds	r1, #1
    6f6a:	f01d f8f0 	bl	2414e <memcpy>
	net_buf_unref(rsp);
    6f6e:	9801      	ldr	r0, [sp, #4]
    6f70:	f015 fc7a 	bl	1c868 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    6f74:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    6f78:	075b      	lsls	r3, r3, #29
    6f7a:	d593      	bpl.n	6ea4 <bt_init+0x278>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    6f7c:	aa01      	add	r2, sp, #4
    6f7e:	4621      	mov	r1, r4
    6f80:	f64f 4003 	movw	r0, #64515	; 0xfc03
    6f84:	f7ff fad2 	bl	652c <bt_hci_cmd_send_sync>
		if (err) {
    6f88:	b110      	cbz	r0, 6f90 <bt_init+0x364>
			BT_WARN("Failed to read supported vendor features");
    6f8a:	2157      	movs	r1, #87	; 0x57
    6f8c:	480b      	ldr	r0, [pc, #44]	; (6fbc <bt_init+0x390>)
    6f8e:	e787      	b.n	6ea0 <bt_init+0x274>
		rp.feat = (void *)rsp->data;
    6f90:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    6f92:	480b      	ldr	r0, [pc, #44]	; (6fc0 <bt_init+0x394>)
    6f94:	6899      	ldr	r1, [r3, #8]
    6f96:	2201      	movs	r2, #1
    6f98:	4411      	add	r1, r2
    6f9a:	f01d f8d8 	bl	2414e <memcpy>
		net_buf_unref(rsp);
    6f9e:	9801      	ldr	r0, [sp, #4]
    6fa0:	f015 fc62 	bl	1c868 <net_buf_unref>
    6fa4:	e77e      	b.n	6ea4 <bt_init+0x278>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6fa6:	2104      	movs	r1, #4
    6fa8:	4806      	ldr	r0, [pc, #24]	; (6fc4 <bt_init+0x398>)
    6faa:	f01d fba5 	bl	246f8 <atomic_or>
	bt_finalize_init();
    6fae:	f7ff fe31 	bl	6c14 <bt_finalize_init>
	return 0;
    6fb2:	e6be      	b.n	6d32 <bt_init+0x106>
    6fb4:	0002ae0a 	.word	0x0002ae0a
    6fb8:	2000021d 	.word	0x2000021d
    6fbc:	0002ae38 	.word	0x0002ae38
    6fc0:	2000021c 	.word	0x2000021c
    6fc4:	2000022c 	.word	0x2000022c

00006fc8 <init_work>:
{
    6fc8:	b510      	push	{r4, lr}
	err = bt_init();
    6fca:	f7ff fe2f 	bl	6c2c <bt_init>
	if (ready_cb) {
    6fce:	4b03      	ldr	r3, [pc, #12]	; (6fdc <init_work+0x14>)
    6fd0:	681b      	ldr	r3, [r3, #0]
    6fd2:	b113      	cbz	r3, 6fda <init_work+0x12>
}
    6fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    6fd8:	4718      	bx	r3
}
    6fda:	bd10      	pop	{r4, pc}
    6fdc:	200028b8 	.word	0x200028b8

00006fe0 <bt_enable>:
{
    6fe0:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    6fe2:	4d2b      	ldr	r5, [pc, #172]	; (7090 <bt_enable+0xb0>)
    6fe4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
{
    6fe8:	b088      	sub	sp, #32
    6fea:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    6fec:	b943      	cbnz	r3, 7000 <bt_enable+0x20>
		BT_ERR("No HCI driver registered");
    6fee:	2145      	movs	r1, #69	; 0x45
    6ff0:	4828      	ldr	r0, [pc, #160]	; (7094 <bt_enable+0xb4>)
    6ff2:	f01a ff6a 	bl	21eca <printk>
		return -ENODEV;
    6ff6:	f06f 0412 	mvn.w	r4, #18
}
    6ffa:	4620      	mov	r0, r4
    6ffc:	b008      	add	sp, #32
    6ffe:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    7000:	2100      	movs	r1, #0
    7002:	f105 0094 	add.w	r0, r5, #148	; 0x94
    7006:	f01d fb86 	bl	24716 <atomic_test_and_set_bit>
    700a:	2800      	cmp	r0, #0
    700c:	d13d      	bne.n	708a <bt_enable+0xaa>
		err = bt_settings_init();
    700e:	f7fe fc01 	bl	5814 <bt_settings_init>
		if (err) {
    7012:	4604      	mov	r4, r0
    7014:	2800      	cmp	r0, #0
    7016:	d1f0      	bne.n	6ffa <bt_enable+0x1a>
	ready_cb = cb;
    7018:	4b1f      	ldr	r3, [pc, #124]	; (7098 <bt_enable+0xb8>)
    701a:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    701c:	2200      	movs	r2, #0
    701e:	2300      	movs	r3, #0
    7020:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7024:	f06f 0308 	mvn.w	r3, #8
    7028:	e9cd 0302 	strd	r0, r3, [sp, #8]
    702c:	9004      	str	r0, [sp, #16]
    702e:	e9cd 0000 	strd	r0, r0, [sp]
    7032:	4b1a      	ldr	r3, [pc, #104]	; (709c <bt_enable+0xbc>)
    7034:	491a      	ldr	r1, [pc, #104]	; (70a0 <bt_enable+0xc0>)
    7036:	481b      	ldr	r0, [pc, #108]	; (70a4 <bt_enable+0xc4>)
    7038:	f44f 7220 	mov.w	r2, #640	; 0x280
    703c:	f018 ff4e 	bl	1fedc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    7040:	4919      	ldr	r1, [pc, #100]	; (70a8 <bt_enable+0xc8>)
    7042:	4818      	ldr	r0, [pc, #96]	; (70a4 <bt_enable+0xc4>)
    7044:	f021 fb96 	bl	28774 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    7048:	f7fe fad8 	bl	55fc <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    704c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    7050:	68db      	ldr	r3, [r3, #12]
    7052:	4798      	blx	r3
	if (err) {
    7054:	4604      	mov	r4, r0
    7056:	b128      	cbz	r0, 7064 <bt_enable+0x84>
		BT_ERR("HCI driver open failed (%d)", err);
    7058:	4602      	mov	r2, r0
    705a:	2145      	movs	r1, #69	; 0x45
    705c:	4813      	ldr	r0, [pc, #76]	; (70ac <bt_enable+0xcc>)
    705e:	f01a ff34 	bl	21eca <printk>
		return err;
    7062:	e7ca      	b.n	6ffa <bt_enable+0x1a>
	if (!cb) {
    7064:	b926      	cbnz	r6, 7070 <bt_enable+0x90>
}
    7066:	b008      	add	sp, #32
    7068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    706c:	f7ff bdde 	b.w	6c2c <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7070:	4601      	mov	r1, r0
    7072:	f105 0090 	add.w	r0, r5, #144	; 0x90
    7076:	f01d fb4e 	bl	24716 <atomic_test_and_set_bit>
    707a:	2800      	cmp	r0, #0
    707c:	d1bd      	bne.n	6ffa <bt_enable+0x1a>
		k_queue_append(&work_q->queue, work);
    707e:	f105 0188 	add.w	r1, r5, #136	; 0x88
    7082:	480b      	ldr	r0, [pc, #44]	; (70b0 <bt_enable+0xd0>)
    7084:	f021 fb03 	bl	2868e <k_queue_append>
    7088:	e7b7      	b.n	6ffa <bt_enable+0x1a>
		return -EALREADY;
    708a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    708e:	e7b4      	b.n	6ffa <bt_enable+0x1a>
    7090:	20000198 	.word	0x20000198
    7094:	0002ad1f 	.word	0x0002ad1f
    7098:	200028b8 	.word	0x200028b8
    709c:	00005d91 	.word	0x00005d91
    70a0:	20004a00 	.word	0x20004a00
    70a4:	200012b0 	.word	0x200012b0
    70a8:	0002ad3d 	.word	0x0002ad3d
    70ac:	0002ad43 	.word	0x0002ad43
    70b0:	20002170 	.word	0x20002170

000070b4 <bt_get_name>:
}
    70b4:	4800      	ldr	r0, [pc, #0]	; (70b8 <bt_get_name+0x4>)
    70b6:	4770      	bx	lr
    70b8:	0002b338 	.word	0x0002b338

000070bc <bt_id_create>:
{
    70bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    70be:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    70c0:	4605      	mov	r5, r0
    70c2:	b918      	cbnz	r0, 70cc <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    70c4:	b304      	cbz	r4, 7108 <bt_id_create+0x4c>
		return -EINVAL;
    70c6:	f06f 0415 	mvn.w	r4, #21
    70ca:	e027      	b.n	711c <bt_id_create+0x60>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    70cc:	2300      	movs	r3, #0
    70ce:	4669      	mov	r1, sp
    70d0:	9300      	str	r3, [sp, #0]
    70d2:	f8cd 3003 	str.w	r3, [sp, #3]
    70d6:	f01d fb49 	bl	2476c <bt_addr_le_cmp>
    70da:	2800      	cmp	r0, #0
    70dc:	d0f2      	beq.n	70c4 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    70de:	782b      	ldrb	r3, [r5, #0]
    70e0:	2b01      	cmp	r3, #1
    70e2:	d104      	bne.n	70ee <bt_id_create+0x32>
    70e4:	79ab      	ldrb	r3, [r5, #6]
    70e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    70ea:	2bc0      	cmp	r3, #192	; 0xc0
    70ec:	d004      	beq.n	70f8 <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
    70ee:	2145      	movs	r1, #69	; 0x45
    70f0:	480d      	ldr	r0, [pc, #52]	; (7128 <bt_id_create+0x6c>)
    70f2:	f01a feea 	bl	21eca <printk>
			return -EINVAL;
    70f6:	e7e6      	b.n	70c6 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    70f8:	4628      	mov	r0, r5
    70fa:	f7fe fd2b 	bl	5b54 <id_find>
    70fe:	2800      	cmp	r0, #0
    7100:	dbe0      	blt.n	70c4 <bt_id_create+0x8>
			return -EALREADY;
    7102:	f06f 0444 	mvn.w	r4, #68	; 0x44
    7106:	e009      	b.n	711c <bt_id_create+0x60>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    7108:	4b08      	ldr	r3, [pc, #32]	; (712c <bt_id_create+0x70>)
    710a:	79dc      	ldrb	r4, [r3, #7]
    710c:	2c01      	cmp	r4, #1
    710e:	d008      	beq.n	7122 <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
    7110:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    7112:	4629      	mov	r1, r5
    7114:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    7116:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    7118:	f7fe ffb4 	bl	6084 <id_create.isra.22>
}
    711c:	4620      	mov	r0, r4
    711e:	b003      	add	sp, #12
    7120:	bd30      	pop	{r4, r5, pc}
		return -ENOMEM;
    7122:	f06f 040b 	mvn.w	r4, #11
    7126:	e7f9      	b.n	711c <bt_id_create+0x60>
    7128:	0002ad85 	.word	0x0002ad85
    712c:	20000198 	.word	0x20000198

00007130 <bt_setup_public_id_addr>:
{
    7130:	b570      	push	{r4, r5, r6, lr}
    7132:	b088      	sub	sp, #32
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    7134:	aa01      	add	r2, sp, #4
    7136:	2100      	movs	r1, #0
    7138:	f241 0009 	movw	r0, #4105	; 0x1009
    713c:	f7ff f9f6 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    7140:	4e1c      	ldr	r6, [pc, #112]	; (71b4 <bt_setup_public_id_addr+0x84>)
    7142:	4604      	mov	r4, r0
    7144:	b138      	cbz	r0, 7156 <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
    7146:	2157      	movs	r1, #87	; 0x57
    7148:	481b      	ldr	r0, [pc, #108]	; (71b8 <bt_setup_public_id_addr+0x88>)
    714a:	f01a febe 	bl	21eca <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
    714e:	2300      	movs	r3, #0
    7150:	71f3      	strb	r3, [r6, #7]
}
    7152:	b008      	add	sp, #32
    7154:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    7156:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    7158:	9004      	str	r0, [sp, #16]
    715a:	689d      	ldr	r5, [r3, #8]
    715c:	f8ad 0014 	strh.w	r0, [sp, #20]
    7160:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    7162:	2206      	movs	r2, #6
    7164:	a904      	add	r1, sp, #16
    7166:	4628      	mov	r0, r5
    7168:	f01c ffca 	bl	24100 <memcmp>
    716c:	b918      	cbnz	r0, 7176 <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
    716e:	9801      	ldr	r0, [sp, #4]
    7170:	f015 fb7a 	bl	1c868 <net_buf_unref>
    7174:	e7eb      	b.n	714e <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    7176:	4b11      	ldr	r3, [pc, #68]	; (71bc <bt_setup_public_id_addr+0x8c>)
    7178:	6818      	ldr	r0, [r3, #0]
    717a:	9002      	str	r0, [sp, #8]
    717c:	889b      	ldrh	r3, [r3, #4]
    717e:	f8ad 300c 	strh.w	r3, [sp, #12]
    7182:	2206      	movs	r2, #6
    7184:	a902      	add	r1, sp, #8
    7186:	4628      	mov	r0, r5
    7188:	f01c ffba 	bl	24100 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    718c:	2800      	cmp	r0, #0
    718e:	d0ee      	beq.n	716e <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
    7190:	4629      	mov	r1, r5
    7192:	2206      	movs	r2, #6
    7194:	f10d 0019 	add.w	r0, sp, #25
    7198:	f01c ffd9 	bl	2414e <memcpy>
	net_buf_unref(rsp);
    719c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    719e:	f88d 4018 	strb.w	r4, [sp, #24]
	net_buf_unref(rsp);
    71a2:	f015 fb61 	bl	1c868 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    71a6:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    71a8:	a906      	add	r1, sp, #24
    71aa:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    71ac:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    71ae:	f7fe ff69 	bl	6084 <id_create.isra.22>
    71b2:	e7ce      	b.n	7152 <bt_setup_public_id_addr+0x22>
    71b4:	20000198 	.word	0x20000198
    71b8:	0002b033 	.word	0x0002b033
    71bc:	00028f9b 	.word	0x00028f9b

000071c0 <bt_read_static_addr>:
{
    71c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    71c4:	4b1c      	ldr	r3, [pc, #112]	; (7238 <bt_read_static_addr+0x78>)
    71c6:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    71ca:	f014 0401 	ands.w	r4, r4, #1
{
    71ce:	4607      	mov	r7, r0
    71d0:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    71d2:	d104      	bne.n	71de <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
    71d4:	4819      	ldr	r0, [pc, #100]	; (723c <bt_read_static_addr+0x7c>)
    71d6:	2157      	movs	r1, #87	; 0x57
		BT_WARN("No static addresses stored in controller");
    71d8:	f01a fe77 	bl	21eca <printk>
    71dc:	e00c      	b.n	71f8 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    71de:	aa01      	add	r2, sp, #4
    71e0:	2100      	movs	r1, #0
    71e2:	f64f 4009 	movw	r0, #64521	; 0xfc09
    71e6:	f7ff f9a1 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    71ea:	4605      	mov	r5, r0
    71ec:	b140      	cbz	r0, 7200 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
    71ee:	2157      	movs	r1, #87	; 0x57
    71f0:	4813      	ldr	r0, [pc, #76]	; (7240 <bt_read_static_addr+0x80>)
    71f2:	f01a fe6a 	bl	21eca <printk>
    71f6:	2400      	movs	r4, #0
}
    71f8:	4620      	mov	r0, r4
    71fa:	b002      	add	sp, #8
    71fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    7200:	9b01      	ldr	r3, [sp, #4]
    7202:	6899      	ldr	r1, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    7204:	784c      	ldrb	r4, [r1, #1]
    7206:	42b4      	cmp	r4, r6
    7208:	bf28      	it	cs
    720a:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    720c:	f04f 0816 	mov.w	r8, #22
    7210:	1c8e      	adds	r6, r1, #2
	for (i = 0; i < cnt; i++) {
    7212:	42ac      	cmp	r4, r5
    7214:	dc07      	bgt.n	7226 <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
    7216:	9801      	ldr	r0, [sp, #4]
    7218:	f015 fb26 	bl	1c868 <net_buf_unref>
	if (!cnt) {
    721c:	2c00      	cmp	r4, #0
    721e:	d1eb      	bne.n	71f8 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
    7220:	2157      	movs	r1, #87	; 0x57
    7222:	4808      	ldr	r0, [pc, #32]	; (7244 <bt_read_static_addr+0x84>)
    7224:	e7d8      	b.n	71d8 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    7226:	fb08 7005 	mla	r0, r8, r5, r7
    722a:	2216      	movs	r2, #22
    722c:	4631      	mov	r1, r6
    722e:	f01c ff8e 	bl	2414e <memcpy>
	for (i = 0; i < cnt; i++) {
    7232:	3501      	adds	r5, #1
    7234:	e7ed      	b.n	7212 <bt_read_static_addr+0x52>
    7236:	bf00      	nop
    7238:	20000198 	.word	0x20000198
    723c:	0002af46 	.word	0x0002af46
    7240:	0002af77 	.word	0x0002af77
    7244:	0002af9c 	.word	0x0002af9c

00007248 <bt_setup_random_id_addr>:
{
    7248:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    724a:	4d14      	ldr	r5, [pc, #80]	; (729c <bt_setup_random_id_addr+0x54>)
    724c:	79ec      	ldrb	r4, [r5, #7]
{
    724e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    7250:	b9f4      	cbnz	r4, 7290 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    7252:	2101      	movs	r1, #1
    7254:	a802      	add	r0, sp, #8
    7256:	f7ff ffb3 	bl	71c0 <bt_read_static_addr>
    725a:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    725c:	b1c0      	cbz	r0, 7290 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    725e:	2716      	movs	r7, #22
    7260:	e00f      	b.n	7282 <bt_setup_random_id_addr+0x3a>
    7262:	ab02      	add	r3, sp, #8
    7264:	fb07 3106 	mla	r1, r7, r6, r3
    7268:	2206      	movs	r2, #6
    726a:	f10d 0001 	add.w	r0, sp, #1
    726e:	f01c ff6e 	bl	2414e <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    7272:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    7274:	4669      	mov	r1, sp
    7276:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    7278:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    727c:	f7fe ff02 	bl	6084 <id_create.isra.22>
    7280:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    7282:	79eb      	ldrb	r3, [r5, #7]
    7284:	b2e6      	uxtb	r6, r4
    7286:	42b3      	cmp	r3, r6
    7288:	d8eb      	bhi.n	7262 <bt_setup_random_id_addr+0x1a>
			return 0;
    728a:	2000      	movs	r0, #0
}
    728c:	b009      	add	sp, #36	; 0x24
    728e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    7290:	2100      	movs	r1, #0
    7292:	4608      	mov	r0, r1
    7294:	f7ff ff12 	bl	70bc <bt_id_create>
    7298:	e7f8      	b.n	728c <bt_setup_random_id_addr+0x44>
    729a:	bf00      	nop
    729c:	20000198 	.word	0x20000198

000072a0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    72a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    72a4:	690d      	ldr	r5, [r1, #16]
{
    72a6:	b08f      	sub	sp, #60	; 0x3c
    72a8:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    72aa:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    72ac:	ebb5 0b03 	subs.w	fp, r5, r3
{
    72b0:	4606      	mov	r6, r0
    72b2:	460c      	mov	r4, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    72b4:	4887      	ldr	r0, [pc, #540]	; (74d4 <bt_le_adv_start_legacy+0x234>)
	struct bt_conn *conn = NULL;
    72b6:	9307      	str	r3, [sp, #28]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    72b8:	f04f 0101 	mov.w	r1, #1
	bool dir_adv = (param->peer != NULL), scannable;
    72bc:	bf18      	it	ne
    72be:	f04f 0b01 	movne.w	fp, #1
{
    72c2:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    72c4:	f01d fa55 	bl	24772 <atomic_test_bit>
    72c8:	2800      	cmp	r0, #0
    72ca:	f000 80f4 	beq.w	74b6 <bt_le_adv_start_legacy+0x216>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    72ce:	4620      	mov	r0, r4
    72d0:	f7fe fc58 	bl	5b84 <valid_adv_param>
    72d4:	4680      	mov	r8, r0
    72d6:	2800      	cmp	r0, #0
    72d8:	f000 80f0 	beq.w	74bc <bt_le_adv_start_legacy+0x21c>
	    !(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    72dc:	210b      	movs	r1, #11
    72de:	487d      	ldr	r0, [pc, #500]	; (74d4 <bt_le_adv_start_legacy+0x234>)
    72e0:	f01d fa47 	bl	24772 <atomic_test_bit>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
    72e4:	b918      	cbnz	r0, 72ee <bt_le_adv_start_legacy+0x4e>
	      atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING))) {
    72e6:	2105      	movs	r1, #5
    72e8:	487a      	ldr	r0, [pc, #488]	; (74d4 <bt_le_adv_start_legacy+0x234>)
    72ea:	f01d fa42 	bl	24772 <atomic_test_bit>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    72ee:	f106 0710 	add.w	r7, r6, #16
    72f2:	2106      	movs	r1, #6
    72f4:	4638      	mov	r0, r7
    72f6:	f01d fa3c 	bl	24772 <atomic_test_bit>
    72fa:	2800      	cmp	r0, #0
    72fc:	f040 80e1 	bne.w	74c2 <bt_le_adv_start_legacy+0x222>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    7300:	4601      	mov	r1, r0
    7302:	220f      	movs	r2, #15
    7304:	9005      	str	r0, [sp, #20]
    7306:	a80a      	add	r0, sp, #40	; 0x28
    7308:	f01c ff4b 	bl	241a2 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    730c:	68a2      	ldr	r2, [r4, #8]
    730e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    7312:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    7314:	68e2      	ldr	r2, [r4, #12]
    7316:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    731a:	f01d f9db 	bl	246d4 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);
    731e:	9b05      	ldr	r3, [sp, #20]
    7320:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

	if (adv->id != param->id) {
    7324:	7832      	ldrb	r2, [r6, #0]
    7326:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    7328:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    732c:	429a      	cmp	r2, r3
    732e:	d004      	beq.n	733a <bt_le_adv_start_legacy+0x9a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7330:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    7334:	4867      	ldr	r0, [pc, #412]	; (74d4 <bt_le_adv_start_legacy+0x234>)
    7336:	f01d f9f9 	bl	2472c <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
    733a:	4b67      	ldr	r3, [pc, #412]	; (74d8 <bt_le_adv_start_legacy+0x238>)
	adv->id = param->id;
    733c:	7820      	ldrb	r0, [r4, #0]
    733e:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    7340:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    7344:	465a      	mov	r2, fp
    7346:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    734a:	6861      	ldr	r1, [r4, #4]
    734c:	f7ff fa8a 	bl	6864 <le_adv_set_random_addr.isra.28>
				     &set_param.own_addr_type);
	if (err) {
    7350:	4683      	mov	fp, r0
    7352:	2800      	cmp	r0, #0
    7354:	d16d      	bne.n	7432 <bt_le_adv_start_legacy+0x192>
		return err;
	}

	if (dir_adv) {
    7356:	f106 0009 	add.w	r0, r6, #9
    735a:	2d00      	cmp	r5, #0
    735c:	d042      	beq.n	73e4 <bt_le_adv_start_legacy+0x144>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    735e:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    7360:	f01d f9c7 	bl	246f2 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    7364:	6863      	ldr	r3, [r4, #4]
    7366:	07d9      	lsls	r1, r3, #31
    7368:	d544      	bpl.n	73f4 <bt_le_adv_start_legacy+0x154>
		scannable = true;

		if (dir_adv) {
    736a:	2d00      	cmp	r5, #0
    736c:	d03f      	beq.n	73ee <bt_le_adv_start_legacy+0x14e>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    736e:	f013 0f10 	tst.w	r3, #16
    7372:	bf14      	ite	ne
    7374:	2304      	movne	r3, #4
    7376:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    7378:	6921      	ldr	r1, [r4, #16]
    737a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    737e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    7382:	f01d f9b6 	bl	246f2 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    7386:	210f      	movs	r1, #15
    7388:	f242 0006 	movw	r0, #8198	; 0x2006
    738c:	f7fe ff92 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
    7390:	4683      	mov	fp, r0
    7392:	2800      	cmp	r0, #0
    7394:	f000 8098 	beq.w	74c8 <bt_le_adv_start_legacy+0x228>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7398:	220f      	movs	r2, #15
    739a:	a90a      	add	r1, sp, #40	; 0x28
    739c:	3008      	adds	r0, #8
    739e:	f020 fde6 	bl	27f6e <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    73a2:	2200      	movs	r2, #0
    73a4:	4659      	mov	r1, fp
    73a6:	f242 0006 	movw	r0, #8198	; 0x2006
    73aa:	f7ff f8bf 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    73ae:	2800      	cmp	r0, #0
    73b0:	f040 808d 	bne.w	74ce <bt_le_adv_start_legacy+0x22e>
		return err;
	}

	if (!dir_adv) {
    73b4:	b36d      	cbz	r5, 7412 <bt_le_adv_start_legacy+0x172>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    73b6:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    73b8:	07da      	lsls	r2, r3, #31
    73ba:	d43e      	bmi.n	743a <bt_le_adv_start_legacy+0x19a>
	return set_le_adv_enable_legacy(adv, enable);
    73bc:	2101      	movs	r1, #1
    73be:	4630      	mov	r0, r6
    73c0:	f7ff fabe 	bl	6940 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    73c4:	4683      	mov	fp, r0
    73c6:	2800      	cmp	r0, #0
    73c8:	d06e      	beq.n	74a8 <bt_le_adv_start_legacy+0x208>
		BT_ERR("Failed to start advertiser");
    73ca:	4844      	ldr	r0, [pc, #272]	; (74dc <bt_le_adv_start_legacy+0x23c>)
    73cc:	2145      	movs	r1, #69	; 0x45
    73ce:	f01a fd7c 	bl	21eca <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    73d2:	9807      	ldr	r0, [sp, #28]
    73d4:	b368      	cbz	r0, 7432 <bt_le_adv_start_legacy+0x192>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    73d6:	2100      	movs	r1, #0
    73d8:	f000 fe06 	bl	7fe8 <bt_conn_set_state>
			bt_conn_unref(conn);
    73dc:	9807      	ldr	r0, [sp, #28]
    73de:	f000 fdcf 	bl	7f80 <bt_conn_unref>
    73e2:	e026      	b.n	7432 <bt_le_adv_start_legacy+0x192>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    73e4:	9508      	str	r5, [sp, #32]
    73e6:	a908      	add	r1, sp, #32
    73e8:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
    73ec:	e7b8      	b.n	7360 <bt_le_adv_start_legacy+0xc0>
			set_param.type = BT_HCI_ADV_IND;
    73ee:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    73f2:	e7c8      	b.n	7386 <bt_le_adv_start_legacy+0xe6>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    73f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    73f6:	b952      	cbnz	r2, 740e <bt_le_adv_start_legacy+0x16e>
    73f8:	f003 0308 	and.w	r3, r3, #8
    73fc:	2b00      	cmp	r3, #0
    73fe:	bf0a      	itet	eq
    7400:	f04f 0800 	moveq.w	r8, #0
    7404:	2302      	movne	r3, #2
    7406:	2303      	moveq	r3, #3
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    7408:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    740c:	e7bb      	b.n	7386 <bt_le_adv_start_legacy+0xe6>
    740e:	2302      	movs	r3, #2
    7410:	e7fa      	b.n	7408 <bt_le_adv_start_legacy+0x168>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    7412:	6863      	ldr	r3, [r4, #4]
    7414:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    7418:	e9cd 8301 	strd	r8, r3, [sp, #4]
    741c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    741e:	9300      	str	r3, [sp, #0]
    7420:	4652      	mov	r2, sl
    7422:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7424:	4649      	mov	r1, r9
    7426:	4630      	mov	r0, r6
    7428:	f7ff f980 	bl	672c <le_adv_update.constprop.37>
		if (err) {
    742c:	4683      	mov	fp, r0
    742e:	2800      	cmp	r0, #0
    7430:	d0c1      	beq.n	73b6 <bt_le_adv_start_legacy+0x116>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    7432:	4658      	mov	r0, fp
    7434:	b00f      	add	sp, #60	; 0x3c
    7436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    743a:	a907      	add	r1, sp, #28
    743c:	4630      	mov	r0, r6
    743e:	f7fe fdcd 	bl	5fdc <le_adv_start_add_conn>
		if (err) {
    7442:	4683      	mov	fp, r0
    7444:	2800      	cmp	r0, #0
    7446:	d0b9      	beq.n	73bc <bt_le_adv_start_legacy+0x11c>
			if (err == -ENOMEM && !dir_adv &&
    7448:	f110 0f0c 	cmn.w	r0, #12
    744c:	d1f1      	bne.n	7432 <bt_le_adv_start_legacy+0x192>
    744e:	2d00      	cmp	r5, #0
    7450:	d1ef      	bne.n	7432 <bt_le_adv_start_legacy+0x192>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    7452:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    7454:	079b      	lsls	r3, r3, #30
    7456:	d4ec      	bmi.n	7432 <bt_le_adv_start_legacy+0x192>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    7458:	6860      	ldr	r0, [r4, #4]
    745a:	f080 0002 	eor.w	r0, r0, #2
    745e:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    7462:	f00b 0201 	and.w	r2, fp, #1
    7466:	210c      	movs	r1, #12
    7468:	4638      	mov	r0, r7
    746a:	f01d f96e 	bl	2474a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    746e:	6862      	ldr	r2, [r4, #4]
    7470:	2107      	movs	r1, #7
    7472:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    7476:	4638      	mov	r0, r7
    7478:	f01d f967 	bl	2474a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    747c:	6862      	ldr	r2, [r4, #4]
    747e:	2108      	movs	r1, #8
    7480:	f002 0201 	and.w	r2, r2, #1
    7484:	4638      	mov	r0, r7
    7486:	f01d f960 	bl	2474a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    748a:	4642      	mov	r2, r8
    748c:	2109      	movs	r1, #9
    748e:	4638      	mov	r0, r7
    7490:	f01d f95b 	bl	2474a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    7494:	6862      	ldr	r2, [r4, #4]
    7496:	210b      	movs	r1, #11
    7498:	f3c2 0280 	ubfx	r2, r2, #2, #1
    749c:	4638      	mov	r0, r7
    749e:	f01d f954 	bl	2474a <atomic_set_bit_to>
	return 0;
    74a2:	f04f 0b00 	mov.w	fp, #0
    74a6:	e7c4      	b.n	7432 <bt_le_adv_start_legacy+0x192>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    74a8:	9807      	ldr	r0, [sp, #28]
    74aa:	b108      	cbz	r0, 74b0 <bt_le_adv_start_legacy+0x210>
		bt_conn_unref(conn);
    74ac:	f000 fd68 	bl	7f80 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    74b0:	2d00      	cmp	r5, #0
    74b2:	d1d6      	bne.n	7462 <bt_le_adv_start_legacy+0x1c2>
    74b4:	e7d0      	b.n	7458 <bt_le_adv_start_legacy+0x1b8>
		return -EAGAIN;
    74b6:	f06f 0b0a 	mvn.w	fp, #10
    74ba:	e7ba      	b.n	7432 <bt_le_adv_start_legacy+0x192>
		return -EINVAL;
    74bc:	f06f 0b15 	mvn.w	fp, #21
    74c0:	e7b7      	b.n	7432 <bt_le_adv_start_legacy+0x192>
		return -EALREADY;
    74c2:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    74c6:	e7b4      	b.n	7432 <bt_le_adv_start_legacy+0x192>
		return -ENOBUFS;
    74c8:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    74cc:	e7b1      	b.n	7432 <bt_le_adv_start_legacy+0x192>
    74ce:	4683      	mov	fp, r0
    74d0:	e7af      	b.n	7432 <bt_le_adv_start_legacy+0x192>
    74d2:	bf00      	nop
    74d4:	2000022c 	.word	0x2000022c
    74d8:	20000198 	.word	0x20000198
    74dc:	0002ae98 	.word	0x0002ae98

000074e0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    74e0:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    74e2:	9c04      	ldr	r4, [sp, #16]
    74e4:	e9cd 3400 	strd	r3, r4, [sp]
    74e8:	4613      	mov	r3, r2
    74ea:	460a      	mov	r2, r1
    74ec:	4601      	mov	r1, r0
    74ee:	4802      	ldr	r0, [pc, #8]	; (74f8 <bt_le_adv_start+0x18>)
    74f0:	f7ff fed6 	bl	72a0 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    74f4:	b002      	add	sp, #8
    74f6:	bd10      	pop	{r4, pc}
    74f8:	200001b0 	.word	0x200001b0

000074fc <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    74fc:	b530      	push	{r4, r5, lr}
    74fe:	4c2a      	ldr	r4, [pc, #168]	; (75a8 <bt_le_adv_stop+0xac>)
    7500:	b085      	sub	sp, #20
    7502:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    7506:	f104 0028 	add.w	r0, r4, #40	; 0x28
    750a:	f01d f90f 	bl	2472c <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    750e:	2106      	movs	r1, #6
    7510:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7514:	f01d f92d 	bl	24772 <atomic_test_bit>
    7518:	b918      	cbnz	r0, 7522 <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
    751a:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    751c:	4620      	mov	r0, r4
    751e:	b005      	add	sp, #20
    7520:	bd30      	pop	{r4, r5, pc}
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    7522:	2108      	movs	r1, #8
    7524:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7528:	f01d f923 	bl	24772 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    752c:	b308      	cbz	r0, 7572 <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    752e:	2300      	movs	r3, #0
    7530:	4669      	mov	r1, sp
    7532:	f104 0021 	add.w	r0, r4, #33	; 0x21
    7536:	9300      	str	r3, [sp, #0]
    7538:	f8cd 3003 	str.w	r3, [sp, #3]
    753c:	f01d f916 	bl	2476c <bt_addr_le_cmp>
    7540:	7e25      	ldrb	r5, [r4, #24]
    7542:	bb60      	cbnz	r0, 759e <bt_le_adv_stop+0xa2>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    7544:	4b19      	ldr	r3, [pc, #100]	; (75ac <bt_le_adv_stop+0xb0>)
    7546:	889a      	ldrh	r2, [r3, #4]
    7548:	6818      	ldr	r0, [r3, #0]
    754a:	799b      	ldrb	r3, [r3, #6]
    754c:	f8ad 200c 	strh.w	r2, [sp, #12]
    7550:	9002      	str	r0, [sp, #8]
    7552:	f88d 300e 	strb.w	r3, [sp, #14]
    7556:	2204      	movs	r2, #4
    7558:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    755a:	4628      	mov	r0, r5
    755c:	f000 fe5a 	bl	8214 <bt_conn_lookup_state_le>
    7560:	4604      	mov	r4, r0
	if (conn) {
    7562:	b130      	cbz	r0, 7572 <bt_le_adv_stop+0x76>
		conn->err = status;
    7564:	2100      	movs	r1, #0
    7566:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7568:	f000 fd3e 	bl	7fe8 <bt_conn_set_state>
		bt_conn_unref(conn);
    756c:	4620      	mov	r0, r4
    756e:	f000 fd07 	bl	7f80 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
    7572:	2100      	movs	r1, #0
    7574:	480e      	ldr	r0, [pc, #56]	; (75b0 <bt_le_adv_stop+0xb4>)
    7576:	f7ff f9e3 	bl	6940 <set_le_adv_enable_legacy>
		if (err) {
    757a:	4604      	mov	r4, r0
    757c:	2800      	cmp	r0, #0
    757e:	d1cd      	bne.n	751c <bt_le_adv_stop+0x20>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    7580:	2105      	movs	r1, #5
    7582:	480c      	ldr	r0, [pc, #48]	; (75b4 <bt_le_adv_stop+0xb8>)
    7584:	f01d f8f5 	bl	24772 <atomic_test_bit>
    7588:	2800      	cmp	r0, #0
    758a:	d0c6      	beq.n	751a <bt_le_adv_stop+0x1e>
	return set_le_scan_enable_legacy(enable);
    758c:	4620      	mov	r0, r4
    758e:	f7ff f82f 	bl	65f0 <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
    7592:	f01d f8f7 	bl	24784 <le_adv_set_private_addr.isra.27>
	return set_le_scan_enable_legacy(enable);
    7596:	2001      	movs	r0, #1
    7598:	f7ff f82a 	bl	65f0 <set_le_scan_enable_legacy>
    759c:	e7be      	b.n	751c <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    759e:	2205      	movs	r2, #5
    75a0:	f104 0121 	add.w	r1, r4, #33	; 0x21
    75a4:	e7d9      	b.n	755a <bt_le_adv_stop+0x5e>
    75a6:	bf00      	nop
    75a8:	20000198 	.word	0x20000198
    75ac:	00028f94 	.word	0x00028f94
    75b0:	200001b0 	.word	0x200001b0
    75b4:	2000022c 	.word	0x2000022c

000075b8 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    75b8:	b513      	push	{r0, r1, r4, lr}
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    75ba:	210c      	movs	r1, #12
    75bc:	4817      	ldr	r0, [pc, #92]	; (761c <bt_le_adv_resume+0x64>)
    75be:	f01d f8d8 	bl	24772 <atomic_test_bit>
    75c2:	b340      	cbz	r0, 7616 <bt_le_adv_resume+0x5e>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
    75c4:	2106      	movs	r1, #6
    75c6:	4815      	ldr	r0, [pc, #84]	; (761c <bt_le_adv_resume+0x64>)
    75c8:	f01d f8d3 	bl	24772 <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    75cc:	4604      	mov	r4, r0
    75ce:	bb10      	cbnz	r0, 7616 <bt_le_adv_resume+0x5e>
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    75d0:	2108      	movs	r1, #8
    75d2:	4812      	ldr	r0, [pc, #72]	; (761c <bt_le_adv_resume+0x64>)
    75d4:	f01d f8cd 	bl	24772 <atomic_test_bit>
    75d8:	b1e8      	cbz	r0, 7616 <bt_le_adv_resume+0x5e>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    75da:	a901      	add	r1, sp, #4
    75dc:	4810      	ldr	r0, [pc, #64]	; (7620 <bt_le_adv_resume+0x68>)
    75de:	f7fe fcfd 	bl	5fdc <le_adv_start_add_conn>
	if (err) {
    75e2:	b9c0      	cbnz	r0, 7616 <bt_le_adv_resume+0x5e>
	return set_le_adv_enable_legacy(adv, enable);
    75e4:	2101      	movs	r1, #1
    75e6:	480e      	ldr	r0, [pc, #56]	; (7620 <bt_le_adv_resume+0x68>)
    75e8:	f7ff f9aa 	bl	6940 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    75ec:	b150      	cbz	r0, 7604 <bt_le_adv_resume+0x4c>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    75ee:	4621      	mov	r1, r4
    75f0:	9801      	ldr	r0, [sp, #4]
    75f2:	f000 fcf9 	bl	7fe8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    75f6:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    75fa:	4808      	ldr	r0, [pc, #32]	; (761c <bt_le_adv_resume+0x64>)
    75fc:	f01d f896 	bl	2472c <atomic_and>
	return (old & mask) != 0;
    7600:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    7604:	9801      	ldr	r0, [sp, #4]
    7606:	f000 fcbb 	bl	7f80 <bt_conn_unref>
	if (persist_paused) {
    760a:	b124      	cbz	r4, 7616 <bt_le_adv_resume+0x5e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    760c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7610:	4802      	ldr	r0, [pc, #8]	; (761c <bt_le_adv_resume+0x64>)
    7612:	f01d f871 	bl	246f8 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    7616:	b002      	add	sp, #8
    7618:	bd10      	pop	{r4, pc}
    761a:	bf00      	nop
    761c:	200001c0 	.word	0x200001c0
    7620:	200001b0 	.word	0x200001b0

00007624 <enh_conn_complete>:
{
    7624:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    7628:	7805      	ldrb	r5, [r0, #0]
{
    762a:	4604      	mov	r4, r0
	if (evt->status) {
    762c:	b305      	cbz	r5, 7670 <enh_conn_complete+0x4c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    762e:	2d3c      	cmp	r5, #60	; 0x3c
    7630:	d118      	bne.n	7664 <enh_conn_complete+0x40>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7632:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7636:	484d      	ldr	r0, [pc, #308]	; (776c <enh_conn_complete+0x148>)
    7638:	f01d f878 	bl	2472c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    763c:	2000      	movs	r0, #0
    763e:	f7fe fb89 	bl	5d54 <find_pending_connect.part.21>
		if (!conn) {
    7642:	4604      	mov	r4, r0
    7644:	b930      	cbnz	r0, 7654 <enh_conn_complete+0x30>
			BT_ERR("No pending slave connection");
    7646:	2145      	movs	r1, #69	; 0x45
    7648:	4849      	ldr	r0, [pc, #292]	; (7770 <enh_conn_complete+0x14c>)
    764a:	f01a fc3e 	bl	21eca <printk>
}
    764e:	b004      	add	sp, #16
    7650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    7654:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7656:	2100      	movs	r1, #0
    7658:	f000 fcc6 	bl	7fe8 <bt_conn_set_state>
		bt_conn_unref(conn);
    765c:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    765e:	f000 fc8f 	bl	7f80 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7662:	e7f4      	b.n	764e <enh_conn_complete+0x2a>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    7664:	462a      	mov	r2, r5
    7666:	2157      	movs	r1, #87	; 0x57
    7668:	4842      	ldr	r0, [pc, #264]	; (7774 <enh_conn_complete+0x150>)
    766a:	f01a fc2e 	bl	21eca <printk>
		return;
    766e:	e7ee      	b.n	764e <enh_conn_complete+0x2a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    7670:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7672:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    7676:	3b02      	subs	r3, #2
    7678:	1d06      	adds	r6, r0, #4
    767a:	2b01      	cmp	r3, #1
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    767c:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    7680:	4631      	mov	r1, r6
    7682:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    7684:	d82d      	bhi.n	76e2 <enh_conn_complete+0xbe>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    7686:	f01d f834 	bl	246f2 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    768a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    768e:	2206      	movs	r2, #6
    7690:	3b02      	subs	r3, #2
    7692:	f104 0111 	add.w	r1, r4, #17
    7696:	f10d 0001 	add.w	r0, sp, #1
    769a:	f88d 3008 	strb.w	r3, [sp, #8]
    769e:	f01c fd56 	bl	2414e <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    76a2:	2301      	movs	r3, #1
    76a4:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    76a8:	78e3      	ldrb	r3, [r4, #3]
    76aa:	2b01      	cmp	r3, #1
    76ac:	d10c      	bne.n	76c8 <enh_conn_complete+0xa4>
    76ae:	a802      	add	r0, sp, #8
    76b0:	f7fe fb50 	bl	5d54 <find_pending_connect.part.21>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    76b4:	78e3      	ldrb	r3, [r4, #3]
    76b6:	2b01      	cmp	r3, #1
    76b8:	4605      	mov	r5, r0
    76ba:	d104      	bne.n	76c6 <enh_conn_complete+0xa2>
    76bc:	f06f 0140 	mvn.w	r1, #64	; 0x40
    76c0:	482a      	ldr	r0, [pc, #168]	; (776c <enh_conn_complete+0x148>)
    76c2:	f01d f833 	bl	2472c <atomic_and>
	if (!conn) {
    76c6:	b99d      	cbnz	r5, 76f0 <enh_conn_complete+0xcc>
		BT_ERR("No pending conn for peer %s",
    76c8:	4630      	mov	r0, r6
    76ca:	f7fd fdcf 	bl	526c <bt_addr_le_str_real>
    76ce:	2145      	movs	r1, #69	; 0x45
    76d0:	4602      	mov	r2, r0
    76d2:	4829      	ldr	r0, [pc, #164]	; (7778 <enh_conn_complete+0x154>)
    76d4:	f01a fbf9 	bl	21eca <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    76d8:	211f      	movs	r1, #31
    76da:	4640      	mov	r0, r8
    76dc:	f01d f864 	bl	247a8 <bt_hci_disconnect>
		return;
    76e0:	e7b5      	b.n	764e <enh_conn_complete+0x2a>
		bt_addr_le_copy(&id_addr,
    76e2:	f01d f806 	bl	246f2 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    76e6:	4631      	mov	r1, r6
    76e8:	4668      	mov	r0, sp
    76ea:	f01d f802 	bl	246f2 <bt_addr_le_copy>
    76ee:	e7db      	b.n	76a8 <enh_conn_complete+0x84>
	conn->handle = handle;
    76f0:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    76f2:	a902      	add	r1, sp, #8
	conn->handle = handle;
    76f4:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    76f8:	f01c fffb 	bl	246f2 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    76fc:	7e22      	ldrb	r2, [r4, #24]
    76fe:	7de3      	ldrb	r3, [r4, #23]
    7700:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7704:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    7708:	7ea2      	ldrb	r2, [r4, #26]
    770a:	7e63      	ldrb	r3, [r4, #25]
    770c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7710:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    7714:	7ee3      	ldrb	r3, [r4, #27]
    7716:	7f22      	ldrb	r2, [r4, #28]
    7718:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    771c:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    7720:	78e3      	ldrb	r3, [r4, #3]
    7722:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    7724:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7726:	2b01      	cmp	r3, #1
	conn->err = 0U;
    7728:	726c      	strb	r4, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    772a:	d116      	bne.n	775a <enh_conn_complete+0x136>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    772c:	4669      	mov	r1, sp
    772e:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    7732:	f01c ffde 	bl	246f2 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    7736:	7a29      	ldrb	r1, [r5, #8]
    7738:	4e10      	ldr	r6, [pc, #64]	; (777c <enh_conn_complete+0x158>)
    773a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    773e:	4431      	add	r1, r6
    7740:	f105 0096 	add.w	r0, r5, #150	; 0x96
    7744:	f01c ffd5 	bl	246f2 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    7748:	f8d6 10a4 	ldr.w	r1, [r6, #164]	; 0xa4
    774c:	4622      	mov	r2, r4
    774e:	f001 0340 	and.w	r3, r1, #64	; 0x40
    7752:	4313      	orrs	r3, r2
    7754:	d001      	beq.n	775a <enh_conn_complete+0x136>
			bt_le_adv_resume();
    7756:	f7ff ff2f 	bl	75b8 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    775a:	2107      	movs	r1, #7
    775c:	4628      	mov	r0, r5
    775e:	f000 fc43 	bl	7fe8 <bt_conn_set_state>
	conn_auto_initiate(conn);
    7762:	4628      	mov	r0, r5
    7764:	f7fe fe94 	bl	6490 <conn_auto_initiate>
	bt_conn_unref(conn);
    7768:	4628      	mov	r0, r5
    776a:	e778      	b.n	765e <enh_conn_complete+0x3a>
    776c:	200001c0 	.word	0x200001c0
    7770:	0002b056 	.word	0x0002b056
    7774:	0002b077 	.word	0x0002b077
    7778:	0002b095 	.word	0x0002b095
    777c:	20000198 	.word	0x20000198

00007780 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    7780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7784:	4605      	mov	r5, r0
    7786:	4688      	mov	r8, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7788:	4858      	ldr	r0, [pc, #352]	; (78ec <bt_le_scan_start+0x16c>)
    778a:	2101      	movs	r1, #1
    778c:	f01c fff1 	bl	24772 <atomic_test_bit>
    7790:	2800      	cmp	r0, #0
    7792:	f000 80a7 	beq.w	78e4 <bt_le_scan_start+0x164>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    7796:	782a      	ldrb	r2, [r5, #0]
    7798:	2a01      	cmp	r2, #1
    779a:	d905      	bls.n	77a8 <bt_le_scan_start+0x28>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    779c:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    77a0:	4620      	mov	r0, r4
    77a2:	b003      	add	sp, #12
    77a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    77a8:	686b      	ldr	r3, [r5, #4]
    77aa:	f033 030f 	bics.w	r3, r3, #15
    77ae:	d1f5      	bne.n	779c <bt_le_scan_start+0x1c>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    77b0:	8928      	ldrh	r0, [r5, #8]
    77b2:	1f03      	subs	r3, r0, #4
    77b4:	b29b      	uxth	r3, r3
    77b6:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    77ba:	42a3      	cmp	r3, r4
    77bc:	d8ee      	bhi.n	779c <bt_le_scan_start+0x1c>
	if (param->window < 0x0004 || param->window > 0x4000) {
    77be:	8969      	ldrh	r1, [r5, #10]
    77c0:	1f0b      	subs	r3, r1, #4
    77c2:	b29b      	uxth	r3, r3
    77c4:	42a3      	cmp	r3, r4
    77c6:	d8e9      	bhi.n	779c <bt_le_scan_start+0x1c>
	if (param->window > param->interval) {
    77c8:	4288      	cmp	r0, r1
    77ca:	d3e7      	bcc.n	779c <bt_le_scan_start+0x1c>
	if (param->type && !bt_le_scan_random_addr_check()) {
    77cc:	b942      	cbnz	r2, 77e0 <bt_le_scan_start+0x60>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    77ce:	2106      	movs	r1, #6
    77d0:	4846      	ldr	r0, [pc, #280]	; (78ec <bt_le_scan_start+0x16c>)
    77d2:	f01c ffa0 	bl	24716 <atomic_test_and_set_bit>
    77d6:	4603      	mov	r3, r0
    77d8:	b138      	cbz	r0, 77ea <bt_le_scan_start+0x6a>
		return -EALREADY;
    77da:	f06f 0444 	mvn.w	r4, #68	; 0x44
    77de:	e7df      	b.n	77a0 <bt_le_scan_start+0x20>
	if (param->type && !bt_le_scan_random_addr_check()) {
    77e0:	f7ff f8dc 	bl	699c <bt_le_scan_random_addr_check>
    77e4:	2800      	cmp	r0, #0
    77e6:	d1f2      	bne.n	77ce <bt_le_scan_start+0x4e>
    77e8:	e7d8      	b.n	779c <bt_le_scan_start+0x1c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    77ea:	2105      	movs	r1, #5
    77ec:	483f      	ldr	r0, [pc, #252]	; (78ec <bt_le_scan_start+0x16c>)
    77ee:	f01c ffc0 	bl	24772 <atomic_test_bit>
    77f2:	b150      	cbz	r0, 780a <bt_le_scan_start+0x8a>
	return set_le_scan_enable_legacy(enable);
    77f4:	4618      	mov	r0, r3
    77f6:	f7fe fefb 	bl	65f0 <set_le_scan_enable_legacy>
		if (err) {
    77fa:	4604      	mov	r4, r0
    77fc:	b128      	cbz	r0, 780a <bt_le_scan_start+0x8a>
    77fe:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7802:	483a      	ldr	r0, [pc, #232]	; (78ec <bt_le_scan_start+0x16c>)
    7804:	f01c ff92 	bl	2472c <atomic_and>
		return err;
    7808:	e7ca      	b.n	77a0 <bt_le_scan_start+0x20>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    780a:	686a      	ldr	r2, [r5, #4]
    780c:	4e38      	ldr	r6, [pc, #224]	; (78f0 <bt_le_scan_start+0x170>)
    780e:	f002 0201 	and.w	r2, r2, #1
    7812:	2108      	movs	r1, #8
    7814:	f106 0094 	add.w	r0, r6, #148	; 0x94
    7818:	f01c ff97 	bl	2474a <atomic_set_bit_to>
		if (param->timeout) {
    781c:	89ac      	ldrh	r4, [r5, #12]
    781e:	b144      	cbz	r4, 7832 <bt_le_scan_start+0xb2>
    7820:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7824:	f106 0094 	add.w	r0, r6, #148	; 0x94
    7828:	f01c ff80 	bl	2472c <atomic_and>
			return -ENOTSUP;
    782c:	f06f 0422 	mvn.w	r4, #34	; 0x22
    7830:	e7b6      	b.n	77a0 <bt_le_scan_start+0x20>
		err = start_le_scan_legacy(param->type, param->interval,
    7832:	782f      	ldrb	r7, [r5, #0]
    7834:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    7838:	896d      	ldrh	r5, [r5, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
    783a:	4621      	mov	r1, r4
    783c:	2207      	movs	r2, #7
    783e:	4668      	mov	r0, sp
    7840:	f01c fcaf 	bl	241a2 <memset>
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
    7844:	1e7b      	subs	r3, r7, #1
		*own_addr_type = bt_dev.id_addr[0].type;
    7846:	4630      	mov	r0, r6
	set_param.window = sys_cpu_to_le16(window);
    7848:	f8ad 5003 	strh.w	r5, [sp, #3]
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
    784c:	425d      	negs	r5, r3
    784e:	415d      	adcs	r5, r3
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
    7850:	2106      	movs	r1, #6
		*own_addr_type = bt_dev.id_addr[0].type;
    7852:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    7856:	f88d 7000 	strb.w	r7, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    785a:	f8ad 9001 	strh.w	r9, [sp, #1]
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    785e:	f88d 4006 	strb.w	r4, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    7862:	f88d 3005 	strb.w	r3, [sp, #5]
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
    7866:	f01c ff84 	bl	24772 <atomic_test_bit>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    786a:	b9a0      	cbnz	r0, 7896 <bt_le_scan_start+0x116>
			err = le_set_private_addr(BT_ID_DEFAULT);
    786c:	f01c ff8a 	bl	24784 <le_adv_set_private_addr.isra.27>
			if (err) {
    7870:	4604      	mov	r4, r0
    7872:	b168      	cbz	r0, 7890 <bt_le_scan_start+0x110>
				if (active_scan || !is_adv_using_rand_addr()) {
    7874:	2f01      	cmp	r7, #1
    7876:	d0c2      	beq.n	77fe <bt_le_scan_start+0x7e>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
    7878:	2106      	movs	r1, #6
    787a:	f106 0028 	add.w	r0, r6, #40	; 0x28
    787e:	f01c ff78 	bl	24772 <atomic_test_bit>
				if (active_scan || !is_adv_using_rand_addr()) {
    7882:	2800      	cmp	r0, #0
    7884:	d0bb      	beq.n	77fe <bt_le_scan_start+0x7e>
					BT_WARN("Ignoring failure to set "
    7886:	4622      	mov	r2, r4
    7888:	2157      	movs	r1, #87	; 0x57
    788a:	481a      	ldr	r0, [pc, #104]	; (78f4 <bt_le_scan_start+0x174>)
    788c:	f01a fb1d 	bl	21eca <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    7890:	2301      	movs	r3, #1
    7892:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    7896:	2107      	movs	r1, #7
    7898:	f242 000b 	movw	r0, #8203	; 0x200b
    789c:	f7fe fd0a 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
    78a0:	4604      	mov	r4, r0
    78a2:	b1e0      	cbz	r0, 78de <bt_le_scan_start+0x15e>
    78a4:	2207      	movs	r2, #7
    78a6:	4669      	mov	r1, sp
    78a8:	3008      	adds	r0, #8
    78aa:	f020 fb60 	bl	27f6e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    78ae:	4621      	mov	r1, r4
    78b0:	2200      	movs	r2, #0
    78b2:	f242 000b 	movw	r0, #8203	; 0x200b
    78b6:	f7fe fe39 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    78ba:	4604      	mov	r4, r0
    78bc:	2800      	cmp	r0, #0
    78be:	d19e      	bne.n	77fe <bt_le_scan_start+0x7e>
	return set_le_scan_enable_legacy(enable);
    78c0:	2001      	movs	r0, #1
    78c2:	f7fe fe95 	bl	65f0 <set_le_scan_enable_legacy>
	if (err) {
    78c6:	4604      	mov	r4, r0
    78c8:	2800      	cmp	r0, #0
    78ca:	d198      	bne.n	77fe <bt_le_scan_start+0x7e>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    78cc:	462a      	mov	r2, r5
    78ce:	2107      	movs	r1, #7
    78d0:	4806      	ldr	r0, [pc, #24]	; (78ec <bt_le_scan_start+0x16c>)
    78d2:	f01c ff3a 	bl	2474a <atomic_set_bit_to>
	scan_dev_found_cb = cb;
    78d6:	4b08      	ldr	r3, [pc, #32]	; (78f8 <bt_le_scan_start+0x178>)
    78d8:	f8c3 8000 	str.w	r8, [r3]
	return 0;
    78dc:	e760      	b.n	77a0 <bt_le_scan_start+0x20>
		return -ENOBUFS;
    78de:	f06f 0436 	mvn.w	r4, #54	; 0x36
    78e2:	e78c      	b.n	77fe <bt_le_scan_start+0x7e>
		return -EAGAIN;
    78e4:	f06f 040a 	mvn.w	r4, #10
    78e8:	e75a      	b.n	77a0 <bt_le_scan_start+0x20>
    78ea:	bf00      	nop
    78ec:	2000022c 	.word	0x2000022c
    78f0:	20000198 	.word	0x20000198
    78f4:	0002aeb8 	.word	0x0002aeb8
    78f8:	200028c4 	.word	0x200028c4

000078fc <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    78fc:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    78fe:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7902:	4807      	ldr	r0, [pc, #28]	; (7920 <bt_le_scan_stop+0x24>)
    7904:	f01c ff12 	bl	2472c <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    7908:	0643      	lsls	r3, r0, #25
    790a:	d506      	bpl.n	791a <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    790c:	4b05      	ldr	r3, [pc, #20]	; (7924 <bt_le_scan_stop+0x28>)
    790e:	2000      	movs	r0, #0
    7910:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    7912:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    7916:	f7ff b84b 	b.w	69b0 <bt_le_scan_update>
}
    791a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    791e:	bd08      	pop	{r3, pc}
    7920:	2000022c 	.word	0x2000022c
    7924:	200028c4 	.word	0x200028c4

00007928 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    7928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    792a:	4e1b      	ldr	r6, [pc, #108]	; (7998 <bt_pub_key_gen+0x70>)
    792c:	f896 3066 	ldrb.w	r3, [r6, #102]	; 0x66
    7930:	f003 0306 	and.w	r3, r3, #6
    7934:	2b06      	cmp	r3, #6
    7936:	d007      	beq.n	7948 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    7938:	2157      	movs	r1, #87	; 0x57
    793a:	4818      	ldr	r0, [pc, #96]	; (799c <bt_pub_key_gen+0x74>)
    793c:	f01a fac5 	bl	21eca <printk>
		return -ENOTSUP;
    7940:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    7944:	4620      	mov	r0, r4
    7946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    7948:	4f15      	ldr	r7, [pc, #84]	; (79a0 <bt_pub_key_gen+0x78>)
    794a:	683b      	ldr	r3, [r7, #0]
    794c:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    794e:	6038      	str	r0, [r7, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    7950:	2104      	movs	r1, #4
    7952:	f106 0094 	add.w	r0, r6, #148	; 0x94
    7956:	f01c fede 	bl	24716 <atomic_test_and_set_bit>
    795a:	4605      	mov	r5, r0
    795c:	b9d0      	cbnz	r0, 7994 <bt_pub_key_gen+0x6c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    795e:	f06f 0108 	mvn.w	r1, #8
    7962:	f106 0094 	add.w	r0, r6, #148	; 0x94
    7966:	f01c fee1 	bl	2472c <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    796a:	462a      	mov	r2, r5
    796c:	4629      	mov	r1, r5
    796e:	f242 0025 	movw	r0, #8229	; 0x2025
    7972:	f7fe fddb 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    7976:	4604      	mov	r4, r0
    7978:	2800      	cmp	r0, #0
    797a:	d0e3      	beq.n	7944 <bt_pub_key_gen+0x1c>
		BT_ERR("Sending LE P256 Public Key command failed");
    797c:	2145      	movs	r1, #69	; 0x45
    797e:	4809      	ldr	r0, [pc, #36]	; (79a4 <bt_pub_key_gen+0x7c>)
    7980:	f01a faa3 	bl	21eca <printk>
    7984:	f06f 0110 	mvn.w	r1, #16
    7988:	f106 0094 	add.w	r0, r6, #148	; 0x94
    798c:	f01c fece 	bl	2472c <atomic_and>
		pub_key_cb = NULL;
    7990:	603d      	str	r5, [r7, #0]
		return err;
    7992:	e7d7      	b.n	7944 <bt_pub_key_gen+0x1c>
		return 0;
    7994:	2400      	movs	r4, #0
    7996:	e7d5      	b.n	7944 <bt_pub_key_gen+0x1c>
    7998:	20000198 	.word	0x20000198
    799c:	0002aef3 	.word	0x0002aef3
    79a0:	200028b4 	.word	0x200028b4
    79a4:	0002af17 	.word	0x0002af17

000079a8 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    79a8:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    79aa:	2103      	movs	r1, #3
    79ac:	4803      	ldr	r0, [pc, #12]	; (79bc <bt_pub_key_get+0x14>)
    79ae:	f01c fee0 	bl	24772 <atomic_test_bit>
    79b2:	2800      	cmp	r0, #0
		return pub_key;
	}

	return NULL;
}
    79b4:	4802      	ldr	r0, [pc, #8]	; (79c0 <bt_pub_key_get+0x18>)
    79b6:	bf08      	it	eq
    79b8:	2000      	moveq	r0, #0
    79ba:	bd08      	pop	{r3, pc}
    79bc:	2000022c 	.word	0x2000022c
    79c0:	200044c0 	.word	0x200044c0

000079c4 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    79c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb == cb) {
    79c6:	4c1d      	ldr	r4, [pc, #116]	; (7a3c <bt_dh_key_gen+0x78>)
    79c8:	6822      	ldr	r2, [r4, #0]
    79ca:	428a      	cmp	r2, r1
{
    79cc:	4607      	mov	r7, r0
    79ce:	460b      	mov	r3, r1
	if (dh_key_cb == cb) {
    79d0:	d02d      	beq.n	7a2e <bt_dh_key_gen+0x6a>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    79d2:	b112      	cbz	r2, 79da <bt_dh_key_gen+0x16>
		return -EBUSY;
    79d4:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    79d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    79da:	2104      	movs	r1, #4
    79dc:	4818      	ldr	r0, [pc, #96]	; (7a40 <bt_dh_key_gen+0x7c>)
    79de:	f01c fec8 	bl	24772 <atomic_test_bit>
    79e2:	4606      	mov	r6, r0
    79e4:	2800      	cmp	r0, #0
    79e6:	d1f5      	bne.n	79d4 <bt_dh_key_gen+0x10>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    79e8:	2103      	movs	r1, #3
    79ea:	4815      	ldr	r0, [pc, #84]	; (7a40 <bt_dh_key_gen+0x7c>)
    79ec:	f01c fec1 	bl	24772 <atomic_test_bit>
    79f0:	b300      	cbz	r0, 7a34 <bt_dh_key_gen+0x70>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    79f2:	2140      	movs	r1, #64	; 0x40
    79f4:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    79f8:	6023      	str	r3, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    79fa:	f7fe fc5b 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
    79fe:	4605      	mov	r5, r0
    7a00:	b918      	cbnz	r0, 7a0a <bt_dh_key_gen+0x46>
		dh_key_cb = NULL;
    7a02:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    7a04:	f06f 0036 	mvn.w	r0, #54	; 0x36
    7a08:	e7e6      	b.n	79d8 <bt_dh_key_gen+0x14>
	return net_buf_simple_add(&buf->b, len);
    7a0a:	2140      	movs	r1, #64	; 0x40
    7a0c:	3008      	adds	r0, #8
    7a0e:	f015 f87b 	bl	1cb08 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    7a12:	2240      	movs	r2, #64	; 0x40
    7a14:	4639      	mov	r1, r7
    7a16:	f01c fb9a 	bl	2414e <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    7a1a:	4632      	mov	r2, r6
    7a1c:	4629      	mov	r1, r5
    7a1e:	f242 0026 	movw	r0, #8230	; 0x2026
    7a22:	f7fe fd83 	bl	652c <bt_hci_cmd_send_sync>
	if (err) {
    7a26:	2800      	cmp	r0, #0
    7a28:	d0d6      	beq.n	79d8 <bt_dh_key_gen+0x14>
		dh_key_cb = NULL;
    7a2a:	6026      	str	r6, [r4, #0]
		return err;
    7a2c:	e7d4      	b.n	79d8 <bt_dh_key_gen+0x14>
		return -EALREADY;
    7a2e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    7a32:	e7d1      	b.n	79d8 <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
    7a34:	f06f 0030 	mvn.w	r0, #48	; 0x30
    7a38:	e7ce      	b.n	79d8 <bt_dh_key_gen+0x14>
    7a3a:	bf00      	nop
    7a3c:	200028b0 	.word	0x200028b0
    7a40:	2000022c 	.word	0x2000022c

00007a44 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    7a44:	2300      	movs	r3, #0
{
    7a46:	4601      	mov	r1, r0
	tx->user_data = NULL;
    7a48:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
    7a4c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    7a4e:	4801      	ldr	r0, [pc, #4]	; (7a54 <tx_free+0x10>)
    7a50:	f020 be1d 	b.w	2868e <k_queue_append>
    7a54:	20000fc0 	.word	0x20000fc0

00007a58 <notify_connected>:
{
    7a58:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    7a5a:	4b09      	ldr	r3, [pc, #36]	; (7a80 <notify_connected+0x28>)
    7a5c:	681c      	ldr	r4, [r3, #0]
{
    7a5e:	4605      	mov	r5, r0
    7a60:	7a69      	ldrb	r1, [r5, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
    7a62:	b92c      	cbnz	r4, 7a70 <notify_connected+0x18>
	if (!conn->err) {
    7a64:	b951      	cbnz	r1, 7a7c <notify_connected+0x24>
		bt_gatt_connected(conn);
    7a66:	4628      	mov	r0, r5
}
    7a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    7a6c:	f003 b9b2 	b.w	add4 <bt_gatt_connected>
		if (cb->connected) {
    7a70:	6823      	ldr	r3, [r4, #0]
    7a72:	b10b      	cbz	r3, 7a78 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    7a74:	4628      	mov	r0, r5
    7a76:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7a78:	6924      	ldr	r4, [r4, #16]
    7a7a:	e7f1      	b.n	7a60 <notify_connected+0x8>
}
    7a7c:	bd38      	pop	{r3, r4, r5, pc}
    7a7e:	bf00      	nop
    7a80:	200028c8 	.word	0x200028c8

00007a84 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    7a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7a88:	4604      	mov	r4, r0
    7a8a:	460e      	mov	r6, r1
    7a8c:	4617      	mov	r7, r2
    7a8e:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    7a90:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
    7a92:	f04f 33ff 	mov.w	r3, #4294967295
    7a96:	f04f 32ff 	mov.w	r2, #4294967295
    7a9a:	484b      	ldr	r0, [pc, #300]	; (7bc8 <send_frag+0x144>)
    7a9c:	f018 f92a 	bl	1fcf4 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    7aa0:	7aa3      	ldrb	r3, [r4, #10]
    7aa2:	2b07      	cmp	r3, #7
    7aa4:	d14d      	bne.n	7b42 <send_frag+0xbe>
	__asm__ volatile(
    7aa6:	f04f 0320 	mov.w	r3, #32
    7aaa:	f3ef 8211 	mrs	r2, BASEPRI
    7aae:	f383 8811 	msr	BASEPRI, r3
    7ab2:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    7ab6:	2d00      	cmp	r5, #0
    7ab8:	d058      	beq.n	7b6c <send_frag+0xe8>
	parent->next = child;
    7aba:	2300      	movs	r3, #0
    7abc:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    7abe:	69a3      	ldr	r3, [r4, #24]
    7ac0:	2b00      	cmp	r3, #0
    7ac2:	d150      	bne.n	7b66 <send_frag+0xe2>
	list->head = node;
    7ac4:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    7ac8:	f382 8811 	msr	BASEPRI, r2
    7acc:	f3bf 8f6f 	isb	sy
	switch (flags) {
    7ad0:	2f01      	cmp	r7, #1
    7ad2:	d002      	beq.n	7ada <send_frag+0x56>
		flags = BT_ACL_START_NO_FLUSH;
    7ad4:	1efb      	subs	r3, r7, #3
    7ad6:	425f      	negs	r7, r3
    7ad8:	415f      	adcs	r7, r3
	return net_buf_simple_push(&buf->b, len);
    7ada:	2104      	movs	r1, #4
    7adc:	f106 0008 	add.w	r0, r6, #8
    7ae0:	f014 ffba 	bl	1ca58 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7ae4:	8823      	ldrh	r3, [r4, #0]
    7ae6:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7aea:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7aec:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7aee:	3b04      	subs	r3, #4
    7af0:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    7af2:	2302      	movs	r3, #2
    7af4:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    7af6:	4630      	mov	r0, r6
    7af8:	f01c fe91 	bl	2481e <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    7afc:	4602      	mov	r2, r0
    7afe:	2800      	cmp	r0, #0
    7b00:	d05e      	beq.n	7bc0 <send_frag+0x13c>
		BT_ERR("Unable to send to driver (err %d)", err);
    7b02:	2145      	movs	r1, #69	; 0x45
    7b04:	4831      	ldr	r0, [pc, #196]	; (7bcc <send_frag+0x148>)
    7b06:	f01a f9e0 	bl	21eca <printk>
	__asm__ volatile(
    7b0a:	f04f 0320 	mov.w	r3, #32
    7b0e:	f3ef 8711 	mrs	r7, BASEPRI
    7b12:	f383 8811 	msr	BASEPRI, r3
    7b16:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    7b1a:	2d00      	cmp	r5, #0
    7b1c:	d03c      	beq.n	7b98 <send_frag+0x114>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7b1e:	6963      	ldr	r3, [r4, #20]
    7b20:	2200      	movs	r2, #0
    7b22:	b153      	cbz	r3, 7b3a <send_frag+0xb6>
    7b24:	429d      	cmp	r5, r3
    7b26:	d134      	bne.n	7b92 <send_frag+0x10e>
Z_GENLIST_REMOVE(slist, snode)
    7b28:	682b      	ldr	r3, [r5, #0]
    7b2a:	bb62      	cbnz	r2, 7b86 <send_frag+0x102>
    7b2c:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    7b2e:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    7b30:	4295      	cmp	r5, r2
    7b32:	d100      	bne.n	7b36 <send_frag+0xb2>
	list->tail = node;
    7b34:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    7b36:	2300      	movs	r3, #0
    7b38:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    7b3a:	f387 8811 	msr	BASEPRI, r7
    7b3e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    7b42:	4821      	ldr	r0, [pc, #132]	; (7bc8 <send_frag+0x144>)
    7b44:	f018 f89a 	bl	1fc7c <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    7b48:	b115      	cbz	r5, 7b50 <send_frag+0xcc>
		tx_free(tx);
    7b4a:	4628      	mov	r0, r5
    7b4c:	f7ff ff7a 	bl	7a44 <tx_free>
	}

	if (always_consume) {
    7b50:	f1b9 0f00 	cmp.w	r9, #0
    7b54:	d004      	beq.n	7b60 <send_frag+0xdc>
		net_buf_unref(buf);
    7b56:	4630      	mov	r0, r6
    7b58:	f014 fe86 	bl	1c868 <net_buf_unref>
	}
	return false;
    7b5c:	f04f 0900 	mov.w	r9, #0
}
    7b60:	4648      	mov	r0, r9
    7b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7b66:	601d      	str	r5, [r3, #0]
	list->tail = node;
    7b68:	61a5      	str	r5, [r4, #24]
    7b6a:	e7ad      	b.n	7ac8 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    7b6c:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    7b6e:	b133      	cbz	r3, 7b7e <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    7b70:	f103 080c 	add.w	r8, r3, #12
    7b74:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    7b76:	3301      	adds	r3, #1
    7b78:	f8c8 3000 	str.w	r3, [r8]
    7b7c:	e7a4      	b.n	7ac8 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    7b7e:	f104 081c 	add.w	r8, r4, #28
    7b82:	69e3      	ldr	r3, [r4, #28]
    7b84:	e7f7      	b.n	7b76 <send_frag+0xf2>
	parent->next = child;
    7b86:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    7b88:	69a3      	ldr	r3, [r4, #24]
    7b8a:	429d      	cmp	r5, r3
	list->tail = node;
    7b8c:	bf08      	it	eq
    7b8e:	61a2      	streq	r2, [r4, #24]
    7b90:	e7d1      	b.n	7b36 <send_frag+0xb2>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7b92:	461a      	mov	r2, r3
    7b94:	681b      	ldr	r3, [r3, #0]
    7b96:	e7c4      	b.n	7b22 <send_frag+0x9e>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
    7b98:	f8d8 3000 	ldr.w	r3, [r8]
    7b9c:	b953      	cbnz	r3, 7bb4 <send_frag+0x130>
    7b9e:	490c      	ldr	r1, [pc, #48]	; (7bd0 <send_frag+0x14c>)
    7ba0:	480c      	ldr	r0, [pc, #48]	; (7bd4 <send_frag+0x150>)
    7ba2:	f240 4292 	movw	r2, #1170	; 0x492
    7ba6:	f01a f990 	bl	21eca <printk>
    7baa:	f240 4192 	movw	r1, #1170	; 0x492
    7bae:	4808      	ldr	r0, [pc, #32]	; (7bd0 <send_frag+0x14c>)
    7bb0:	f01a fc3d 	bl	2242e <assert_post_action>
			(*pending_no_cb)--;
    7bb4:	f8d8 3000 	ldr.w	r3, [r8]
    7bb8:	3b01      	subs	r3, #1
    7bba:	f8c8 3000 	str.w	r3, [r8]
    7bbe:	e7bc      	b.n	7b3a <send_frag+0xb6>
	return true;
    7bc0:	f04f 0901 	mov.w	r9, #1
    7bc4:	e7cc      	b.n	7b60 <send_frag+0xdc>
    7bc6:	bf00      	nop
    7bc8:	20000260 	.word	0x20000260
    7bcc:	0002b2a4 	.word	0x0002b2a4
    7bd0:	0002b594 	.word	0x0002b594
    7bd4:	0002a026 	.word	0x0002a026

00007bd8 <bt_conn_get_pkts>:
}
    7bd8:	4800      	ldr	r0, [pc, #0]	; (7bdc <bt_conn_get_pkts+0x4>)
    7bda:	4770      	bx	lr
    7bdc:	20000260 	.word	0x20000260

00007be0 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7be0:	1d03      	adds	r3, r0, #4
{
    7be2:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7be4:	2109      	movs	r1, #9
{
    7be6:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7be8:	4618      	mov	r0, r3
    7bea:	f01c fef4 	bl	249d6 <atomic_test_bit>
    7bee:	b1c8      	cbz	r0, 7c24 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    7bf0:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7bf4:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    7bf8:	4291      	cmp	r1, r2
    7bfa:	d813      	bhi.n	7c24 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    7bfc:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    7c00:	4291      	cmp	r1, r2
    7c02:	d30f      	bcc.n	7c24 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    7c04:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    7c08:	4291      	cmp	r1, r2
    7c0a:	d10b      	bne.n	7c24 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7c0c:	f3bf 8f5b 	dmb	ish
    7c10:	e853 2f00 	ldrex	r2, [r3]
    7c14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    7c18:	e843 2100 	strex	r1, r2, [r3]
    7c1c:	2900      	cmp	r1, #0
    7c1e:	d1f7      	bne.n	7c10 <notify_le_param_updated+0x30>
    7c20:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    7c24:	4b07      	ldr	r3, [pc, #28]	; (7c44 <notify_le_param_updated+0x64>)
    7c26:	681d      	ldr	r5, [r3, #0]
    7c28:	b905      	cbnz	r5, 7c2c <notify_le_param_updated+0x4c>
}
    7c2a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    7c2c:	68ee      	ldr	r6, [r5, #12]
    7c2e:	b13e      	cbz	r6, 7c40 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    7c30:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    7c34:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    7c38:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    7c3c:	4620      	mov	r0, r4
    7c3e:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    7c40:	692d      	ldr	r5, [r5, #16]
    7c42:	e7f1      	b.n	7c28 <notify_le_param_updated+0x48>
    7c44:	200028c8 	.word	0x200028c8

00007c48 <le_param_req>:
{
    7c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c4a:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    7c4c:	4608      	mov	r0, r1
{
    7c4e:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    7c50:	f01c fdc5 	bl	247de <bt_le_conn_params_valid>
    7c54:	4605      	mov	r5, r0
    7c56:	b910      	cbnz	r0, 7c5e <le_param_req+0x16>
		return false;
    7c58:	2500      	movs	r5, #0
}
    7c5a:	4628      	mov	r0, r5
    7c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    7c5e:	4b09      	ldr	r3, [pc, #36]	; (7c84 <le_param_req+0x3c>)
    7c60:	681c      	ldr	r4, [r3, #0]
    7c62:	2c00      	cmp	r4, #0
    7c64:	d0f9      	beq.n	7c5a <le_param_req+0x12>
		if (!cb->le_param_req) {
    7c66:	68a3      	ldr	r3, [r4, #8]
    7c68:	b90b      	cbnz	r3, 7c6e <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    7c6a:	6924      	ldr	r4, [r4, #16]
    7c6c:	e7f9      	b.n	7c62 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    7c6e:	4631      	mov	r1, r6
    7c70:	4638      	mov	r0, r7
    7c72:	4798      	blx	r3
    7c74:	2800      	cmp	r0, #0
    7c76:	d0ef      	beq.n	7c58 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    7c78:	4630      	mov	r0, r6
    7c7a:	f01c fdb0 	bl	247de <bt_le_conn_params_valid>
    7c7e:	2800      	cmp	r0, #0
    7c80:	d1f3      	bne.n	7c6a <le_param_req+0x22>
    7c82:	e7e9      	b.n	7c58 <le_param_req+0x10>
    7c84:	200028c8 	.word	0x200028c8

00007c88 <bt_conn_cb_register>:
	cb->_next = callback_list;
    7c88:	4b02      	ldr	r3, [pc, #8]	; (7c94 <bt_conn_cb_register+0xc>)
    7c8a:	681a      	ldr	r2, [r3, #0]
    7c8c:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    7c8e:	6018      	str	r0, [r3, #0]
}
    7c90:	4770      	bx	lr
    7c92:	bf00      	nop
    7c94:	200028c8 	.word	0x200028c8

00007c98 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    7c98:	b570      	push	{r4, r5, r6, lr}
    7c9a:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    7c9c:	f100 0634 	add.w	r6, r0, #52	; 0x34
    7ca0:	2200      	movs	r2, #0
    7ca2:	2300      	movs	r3, #0
    7ca4:	4630      	mov	r0, r6
    7ca6:	f014 fcc5 	bl	1c634 <net_buf_get>
    7caa:	4605      	mov	r5, r0
    7cac:	bb28      	cbnz	r0, 7cfa <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
    7cae:	6963      	ldr	r3, [r4, #20]
    7cb0:	b153      	cbz	r3, 7cc8 <conn_cleanup+0x30>
    7cb2:	4916      	ldr	r1, [pc, #88]	; (7d0c <conn_cleanup+0x74>)
    7cb4:	4816      	ldr	r0, [pc, #88]	; (7d10 <conn_cleanup+0x78>)
    7cb6:	f240 520c 	movw	r2, #1292	; 0x50c
    7cba:	f01a f906 	bl	21eca <printk>
    7cbe:	f240 510c 	movw	r1, #1292	; 0x50c
    7cc2:	4812      	ldr	r0, [pc, #72]	; (7d0c <conn_cleanup+0x74>)
    7cc4:	f01a fbb3 	bl	2242e <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
    7cc8:	69e3      	ldr	r3, [r4, #28]
    7cca:	b153      	cbz	r3, 7ce2 <conn_cleanup+0x4a>
    7ccc:	490f      	ldr	r1, [pc, #60]	; (7d0c <conn_cleanup+0x74>)
    7cce:	4810      	ldr	r0, [pc, #64]	; (7d10 <conn_cleanup+0x78>)
    7cd0:	f240 520d 	movw	r2, #1293	; 0x50d
    7cd4:	f01a f8f9 	bl	21eca <printk>
    7cd8:	f240 510d 	movw	r1, #1293	; 0x50d
    7cdc:	480b      	ldr	r0, [pc, #44]	; (7d0c <conn_cleanup+0x74>)
    7cde:	f01a fba6 	bl	2242e <assert_post_action>

	bt_conn_reset_rx_state(conn);
    7ce2:	4620      	mov	r0, r4
    7ce4:	f01c fe82 	bl	249ec <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7ce8:	f104 0158 	add.w	r1, r4, #88	; 0x58
    7cec:	2200      	movs	r2, #0
    7cee:	2300      	movs	r3, #0
    7cf0:	4808      	ldr	r0, [pc, #32]	; (7d14 <conn_cleanup+0x7c>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    7cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7cf6:	f018 ba2f 	b.w	20158 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    7cfa:	6968      	ldr	r0, [r5, #20]
    7cfc:	b108      	cbz	r0, 7d02 <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
    7cfe:	f7ff fea1 	bl	7a44 <tx_free>
		net_buf_unref(buf);
    7d02:	4628      	mov	r0, r5
    7d04:	f014 fdb0 	bl	1c868 <net_buf_unref>
    7d08:	e7ca      	b.n	7ca0 <conn_cleanup+0x8>
    7d0a:	bf00      	nop
    7d0c:	0002b594 	.word	0x0002b594
    7d10:	0002a026 	.word	0x0002a026
    7d14:	20002170 	.word	0x20002170

00007d18 <bt_conn_recv>:
{
    7d18:	b570      	push	{r4, r5, r6, lr}
    7d1a:	4616      	mov	r6, r2
    7d1c:	4604      	mov	r4, r0
    7d1e:	460d      	mov	r5, r1
	tx_notify(conn);
    7d20:	f01c fe18 	bl	24954 <tx_notify>
	switch (flags) {
    7d24:	2e01      	cmp	r6, #1
    7d26:	d022      	beq.n	7d6e <bt_conn_recv+0x56>
    7d28:	2e02      	cmp	r6, #2
    7d2a:	d143      	bne.n	7db4 <bt_conn_recv+0x9c>
		if (conn->rx) {
    7d2c:	6923      	ldr	r3, [r4, #16]
    7d2e:	b133      	cbz	r3, 7d3e <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
    7d30:	4827      	ldr	r0, [pc, #156]	; (7dd0 <bt_conn_recv+0xb8>)
    7d32:	2145      	movs	r1, #69	; 0x45
    7d34:	f01a f8c9 	bl	21eca <printk>
			bt_conn_reset_rx_state(conn);
    7d38:	4620      	mov	r0, r4
    7d3a:	f01c fe57 	bl	249ec <bt_conn_reset_rx_state>
		conn->rx = buf;
    7d3e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    7d40:	6921      	ldr	r1, [r4, #16]
    7d42:	898a      	ldrh	r2, [r1, #12]
    7d44:	2a01      	cmp	r2, #1
    7d46:	d942      	bls.n	7dce <bt_conn_recv+0xb6>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    7d48:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    7d4a:	7845      	ldrb	r5, [r0, #1]
    7d4c:	7803      	ldrb	r3, [r0, #0]
    7d4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    7d52:	3304      	adds	r3, #4
    7d54:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    7d56:	4293      	cmp	r3, r2
    7d58:	d839      	bhi.n	7dce <bt_conn_recv+0xb6>
	if (conn->rx->len > acl_total_len) {
    7d5a:	d231      	bcs.n	7dc0 <bt_conn_recv+0xa8>
		BT_ERR("ACL len mismatch (%u > %u)",
    7d5c:	481d      	ldr	r0, [pc, #116]	; (7dd4 <bt_conn_recv+0xbc>)
    7d5e:	2145      	movs	r1, #69	; 0x45
    7d60:	f01a f8b3 	bl	21eca <printk>
		bt_conn_reset_rx_state(conn);
    7d64:	4620      	mov	r0, r4
}
    7d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    7d6a:	f01c be3f 	b.w	249ec <bt_conn_reset_rx_state>
		if (!conn->rx) {
    7d6e:	6920      	ldr	r0, [r4, #16]
    7d70:	b938      	cbnz	r0, 7d82 <bt_conn_recv+0x6a>
			BT_ERR("Unexpected L2CAP continuation");
    7d72:	4819      	ldr	r0, [pc, #100]	; (7dd8 <bt_conn_recv+0xc0>)
    7d74:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Not enough buffer space for L2CAP data");
    7d76:	f01a f8a8 	bl	21eca <printk>
			bt_conn_reset_rx_state(conn);
    7d7a:	4620      	mov	r0, r4
    7d7c:	f01c fe36 	bl	249ec <bt_conn_reset_rx_state>
    7d80:	e001      	b.n	7d86 <bt_conn_recv+0x6e>
		if (!buf->len) {
    7d82:	89ae      	ldrh	r6, [r5, #12]
    7d84:	b926      	cbnz	r6, 7d90 <bt_conn_recv+0x78>
			net_buf_unref(buf);
    7d86:	4628      	mov	r0, r5
}
    7d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    7d8c:	f014 bd6c 	b.w	1c868 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    7d90:	3008      	adds	r0, #8
    7d92:	f020 f8e4 	bl	27f5e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    7d96:	42b0      	cmp	r0, r6
    7d98:	d202      	bcs.n	7da0 <bt_conn_recv+0x88>
			BT_ERR("Not enough buffer space for L2CAP data");
    7d9a:	2145      	movs	r1, #69	; 0x45
    7d9c:	480f      	ldr	r0, [pc, #60]	; (7ddc <bt_conn_recv+0xc4>)
    7d9e:	e7ea      	b.n	7d76 <bt_conn_recv+0x5e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7da0:	6920      	ldr	r0, [r4, #16]
    7da2:	89aa      	ldrh	r2, [r5, #12]
    7da4:	68a9      	ldr	r1, [r5, #8]
    7da6:	3008      	adds	r0, #8
    7da8:	f020 f8e1 	bl	27f6e <net_buf_simple_add_mem>
		net_buf_unref(buf);
    7dac:	4628      	mov	r0, r5
    7dae:	f014 fd5b 	bl	1c868 <net_buf_unref>
		break;
    7db2:	e7c5      	b.n	7d40 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    7db4:	4632      	mov	r2, r6
    7db6:	2145      	movs	r1, #69	; 0x45
    7db8:	4809      	ldr	r0, [pc, #36]	; (7de0 <bt_conn_recv+0xc8>)
    7dba:	f01a f886 	bl	21eca <printk>
		bt_conn_reset_rx_state(conn);
    7dbe:	e7dc      	b.n	7d7a <bt_conn_recv+0x62>
	conn->rx = NULL;
    7dc0:	2300      	movs	r3, #0
    7dc2:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
    7dc4:	4620      	mov	r0, r4
}
    7dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    7dca:	f000 bd25 	b.w	8818 <bt_l2cap_recv>
}
    7dce:	bd70      	pop	{r4, r5, r6, pc}
    7dd0:	0002b421 	.word	0x0002b421
    7dd4:	0002b4b5 	.word	0x0002b4b5
    7dd8:	0002b443 	.word	0x0002b443
    7ddc:	0002b466 	.word	0x0002b466
    7de0:	0002b492 	.word	0x0002b492

00007de4 <bt_conn_send_cb>:
{
    7de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7de8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    7dea:	7a83      	ldrb	r3, [r0, #10]
    7dec:	2b07      	cmp	r3, #7
{
    7dee:	4606      	mov	r6, r0
    7df0:	460d      	mov	r5, r1
    7df2:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    7df4:	d009      	beq.n	7e0a <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
    7df6:	4821      	ldr	r0, [pc, #132]	; (7e7c <bt_conn_send_cb+0x98>)
    7df8:	2145      	movs	r1, #69	; 0x45
    7dfa:	f01a f866 	bl	21eca <printk>
		net_buf_unref(buf);
    7dfe:	4628      	mov	r0, r5
    7e00:	f014 fd32 	bl	1c868 <net_buf_unref>
			return -ENOTCONN;
    7e04:	f06f 0038 	mvn.w	r0, #56	; 0x38
    7e08:	e01a      	b.n	7e40 <bt_conn_send_cb+0x5c>
	if (cb) {
    7e0a:	2a00      	cmp	r2, #0
    7e0c:	d034      	beq.n	7e78 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
    7e0e:	f017 ff2f 	bl	1fc70 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    7e12:	4b1b      	ldr	r3, [pc, #108]	; (7e80 <bt_conn_send_cb+0x9c>)
    7e14:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    7e16:	481b      	ldr	r0, [pc, #108]	; (7e84 <bt_conn_send_cb+0xa0>)
    7e18:	bf07      	ittee	eq
    7e1a:	2200      	moveq	r2, #0
    7e1c:	2300      	moveq	r3, #0
    7e1e:	f04f 32ff 	movne.w	r2, #4294967295
    7e22:	f04f 33ff 	movne.w	r3, #4294967295
    7e26:	f016 feb7 	bl	1eb98 <z_impl_k_queue_get>
    7e2a:	4604      	mov	r4, r0
		if (!tx) {
    7e2c:	b950      	cbnz	r0, 7e44 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
    7e2e:	2145      	movs	r1, #69	; 0x45
    7e30:	4815      	ldr	r0, [pc, #84]	; (7e88 <bt_conn_send_cb+0xa4>)
    7e32:	f01a f84a 	bl	21eca <printk>
			net_buf_unref(buf);
    7e36:	4628      	mov	r0, r5
    7e38:	f014 fd16 	bl	1c868 <net_buf_unref>
			return -ENOBUFS;
    7e3c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    7e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    7e44:	7ab3      	ldrb	r3, [r6, #10]
    7e46:	2b07      	cmp	r3, #7
    7e48:	d00a      	beq.n	7e60 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
    7e4a:	2157      	movs	r1, #87	; 0x57
    7e4c:	480f      	ldr	r0, [pc, #60]	; (7e8c <bt_conn_send_cb+0xa8>)
    7e4e:	f01a f83c 	bl	21eca <printk>
			net_buf_unref(buf);
    7e52:	4628      	mov	r0, r5
    7e54:	f014 fd08 	bl	1c868 <net_buf_unref>
			tx_free(tx);
    7e58:	4620      	mov	r0, r4
    7e5a:	f7ff fdf3 	bl	7a44 <tx_free>
    7e5e:	e7d1      	b.n	7e04 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
    7e60:	2300      	movs	r3, #0
		tx->user_data = user_data;
    7e62:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    7e66:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    7e68:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    7e6a:	f106 0034 	add.w	r0, r6, #52	; 0x34
    7e6e:	4629      	mov	r1, r5
    7e70:	f014 fccc 	bl	1c80c <net_buf_put>
	return 0;
    7e74:	2000      	movs	r0, #0
    7e76:	e7e3      	b.n	7e40 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
    7e78:	616a      	str	r2, [r5, #20]
    7e7a:	e7f6      	b.n	7e6a <bt_conn_send_cb+0x86>
    7e7c:	0002b4d5 	.word	0x0002b4d5
    7e80:	20002190 	.word	0x20002190
    7e84:	20000fc0 	.word	0x20000fc0
    7e88:	0002b4e9 	.word	0x0002b4e9
    7e8c:	0002b50c 	.word	0x0002b50c

00007e90 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    7e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    7e94:	4b22      	ldr	r3, [pc, #136]	; (7f20 <bt_conn_prepare_events+0x90>)
    7e96:	4d23      	ldr	r5, [pc, #140]	; (7f24 <bt_conn_prepare_events+0x94>)
    7e98:	2400      	movs	r4, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7e9a:	4622      	mov	r2, r4
    7e9c:	2101      	movs	r1, #1
{
    7e9e:	4680      	mov	r8, r0
	conn_change.signaled = 0U;
    7ea0:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7ea2:	f018 fefb 	bl	20c9c <k_poll_event_init>
    7ea6:	2601      	movs	r6, #1
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    7ea8:	f04f 0914 	mov.w	r9, #20
		conn_cleanup(conn);
    7eac:	f1a5 0ab8 	sub.w	sl, r5, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7eb0:	f3bf 8f5b 	dmb	ish
    7eb4:	682b      	ldr	r3, [r5, #0]
    7eb6:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
    7eba:	fb09 8706 	mla	r7, r9, r6, r8
	if (!atomic_get(&conn->ref)) {
    7ebe:	b1bb      	cbz	r3, 7ef0 <bt_conn_prepare_events+0x60>
	if (conn->state == BT_CONN_DISCONNECTED &&
    7ec0:	f815 3cae 	ldrb.w	r3, [r5, #-174]
    7ec4:	b9e3      	cbnz	r3, 7f00 <bt_conn_prepare_events+0x70>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7ec6:	f3bf 8f5b 	dmb	ish
    7eca:	f1a5 03b4 	sub.w	r3, r5, #180	; 0xb4
    7ece:	e853 2f00 	ldrex	r2, [r3]
    7ed2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    7ed6:	e843 1000 	strex	r0, r1, [r3]
    7eda:	2800      	cmp	r0, #0
    7edc:	d1f7      	bne.n	7ece <bt_conn_prepare_events+0x3e>
    7ede:	f3bf 8f5b 	dmb	ish
    7ee2:	0653      	lsls	r3, r2, #25
    7ee4:	d50c      	bpl.n	7f00 <bt_conn_prepare_events+0x70>
		conn_cleanup(conn);
    7ee6:	20c0      	movs	r0, #192	; 0xc0
    7ee8:	fb00 a004 	mla	r0, r0, r4, sl
    7eec:	f7ff fed4 	bl	7c98 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    7ef0:	3401      	adds	r4, #1
    7ef2:	2c03      	cmp	r4, #3
    7ef4:	f105 05c0 	add.w	r5, r5, #192	; 0xc0
    7ef8:	d1da      	bne.n	7eb0 <bt_conn_prepare_events+0x20>
		}
	}
#endif

	return ev_count;
}
    7efa:	4630      	mov	r0, r6
    7efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (conn->state != BT_CONN_CONNECTED) {
    7f00:	f815 3cae 	ldrb.w	r3, [r5, #-174]
    7f04:	2b07      	cmp	r3, #7
    7f06:	d1f3      	bne.n	7ef0 <bt_conn_prepare_events+0x60>
	k_poll_event_init(&events[0],
    7f08:	f1a5 0384 	sub.w	r3, r5, #132	; 0x84
    7f0c:	2200      	movs	r2, #0
    7f0e:	2104      	movs	r1, #4
    7f10:	4638      	mov	r0, r7
    7f12:	f018 fec3 	bl	20c9c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    7f16:	2301      	movs	r3, #1
    7f18:	733b      	strb	r3, [r7, #12]
			ev_count++;
    7f1a:	441e      	add	r6, r3
    7f1c:	e7e8      	b.n	7ef0 <bt_conn_prepare_events+0x60>
    7f1e:	bf00      	nop
    7f20:	2000061c 	.word	0x2000061c
    7f24:	200013f8 	.word	0x200013f8

00007f28 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    7f28:	b570      	push	{r4, r5, r6, lr}
    7f2a:	4606      	mov	r6, r0
    7f2c:	460d      	mov	r5, r1
    7f2e:	4810      	ldr	r0, [pc, #64]	; (7f70 <bt_conn_add_le+0x48>)
    7f30:	2103      	movs	r1, #3
    7f32:	f01c fcea 	bl	2490a <bt_conn_new.part.10>
	if (!conn) {
    7f36:	4604      	mov	r4, r0
    7f38:	b1b8      	cbz	r0, 7f6a <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    7f3a:	2230      	movs	r2, #48	; 0x30
    7f3c:	2100      	movs	r1, #0
    7f3e:	3058      	adds	r0, #88	; 0x58
    7f40:	f01c f92f 	bl	241a2 <memset>
    7f44:	4b0b      	ldr	r3, [pc, #44]	; (7f74 <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    7f46:	4a0c      	ldr	r2, [pc, #48]	; (7f78 <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    7f48:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    7f4a:	2300      	movs	r3, #0
    7f4c:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    7f50:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    7f52:	7226      	strb	r6, [r4, #8]
	memcpy(dst, src, sizeof(*dst));
    7f54:	2207      	movs	r2, #7
    7f56:	4629      	mov	r1, r5
    7f58:	f104 0088 	add.w	r0, r4, #136	; 0x88
    7f5c:	f01c f8f7 	bl	2414e <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    7f60:	2301      	movs	r3, #1
    7f62:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    7f64:	4b05      	ldr	r3, [pc, #20]	; (7f7c <bt_conn_add_le+0x54>)
    7f66:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    7f6a:	4620      	mov	r0, r4
    7f6c:	bd70      	pop	{r4, r5, r6, pc}
    7f6e:	bf00      	nop
    7f70:	20001340 	.word	0x20001340
    7f74:	00008339 	.word	0x00008339
    7f78:	0002499b 	.word	0x0002499b
    7f7c:	00280018 	.word	0x00280018

00007f80 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
    7f80:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    7f82:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
{
    7f86:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    7f88:	f3bf 8f5b 	dmb	ish
    7f8c:	e853 2f00 	ldrex	r2, [r3]
    7f90:	1e51      	subs	r1, r2, #1
    7f92:	e843 1000 	strex	r0, r1, [r3]
    7f96:	2800      	cmp	r0, #0
    7f98:	d1f8      	bne.n	7f8c <bt_conn_unref+0xc>
    7f9a:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
    7f9e:	2a00      	cmp	r2, #0
    7fa0:	dc0a      	bgt.n	7fb8 <bt_conn_unref+0x38>
    7fa2:	490b      	ldr	r1, [pc, #44]	; (7fd0 <bt_conn_unref+0x50>)
    7fa4:	480b      	ldr	r0, [pc, #44]	; (7fd4 <bt_conn_unref+0x54>)
    7fa6:	f240 7265 	movw	r2, #1893	; 0x765
    7faa:	f019 ff8e 	bl	21eca <printk>
    7fae:	f240 7165 	movw	r1, #1893	; 0x765
    7fb2:	4807      	ldr	r0, [pc, #28]	; (7fd0 <bt_conn_unref+0x50>)
    7fb4:	f01a fa3b 	bl	2242e <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7fb8:	f3bf 8f5b 	dmb	ish
    7fbc:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    7fc0:	f3bf 8f5b 	dmb	ish

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7fc4:	b91b      	cbnz	r3, 7fce <bt_conn_unref+0x4e>
	    atomic_get(&conn->ref) == 0) {
		bt_le_adv_resume();
	}
}
    7fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
    7fca:	f7ff baf5 	b.w	75b8 <bt_le_adv_resume>
}
    7fce:	bd10      	pop	{r4, pc}
    7fd0:	0002b594 	.word	0x0002b594
    7fd4:	0002a026 	.word	0x0002a026

00007fd8 <bt_conn_lookup_handle>:
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    7fd8:	4602      	mov	r2, r0
    7fda:	2103      	movs	r1, #3
    7fdc:	4801      	ldr	r0, [pc, #4]	; (7fe4 <bt_conn_lookup_handle+0xc>)
    7fde:	f01c bd30 	b.w	24a42 <conn_lookup_handle>
    7fe2:	bf00      	nop
    7fe4:	20001340 	.word	0x20001340

00007fe8 <bt_conn_set_state>:
{
    7fe8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    7fea:	7a85      	ldrb	r5, [r0, #10]
    7fec:	428d      	cmp	r5, r1
{
    7fee:	4604      	mov	r4, r0
    7ff0:	460e      	mov	r6, r1
	if (conn->state == state) {
    7ff2:	d10b      	bne.n	800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
	switch (state) {
    7ff4:	2d08      	cmp	r5, #8
    7ff6:	bf96      	itet	ls
    7ff8:	4b5e      	ldrls	r3, [pc, #376]	; (8174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>)
	if (conn->state == state) {
    7ffa:	4a5f      	ldrhi	r2, [pc, #380]	; (8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    7ffc:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
    8000:	485e      	ldr	r0, [pc, #376]	; (817c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>)
    8002:	2157      	movs	r1, #87	; 0x57
}
    8004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    8008:	f019 bf5f 	b.w	21eca <printk>
	conn->state = state;
    800c:	72a1      	strb	r1, [r4, #10]
	switch (old_state) {
    800e:	b90d      	cbnz	r5, 8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
		bt_conn_ref(conn);
    8010:	f01c fd15 	bl	24a3e <bt_conn_ref>
	switch (conn->state) {
    8014:	7aa3      	ldrb	r3, [r4, #10]
    8016:	2b08      	cmp	r3, #8
    8018:	f200 80a7 	bhi.w	816a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16a>
    801c:	e8df f003 	tbb	[pc, r3]
    8020:	a9a9053e 	.word	0xa9a9053e
    8024:	1ca9a9a9 	.word	0x1ca9a9a9
    8028:	a9          	.byte	0xa9
    8029:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    802a:	4d55      	ldr	r5, [pc, #340]	; (8180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>)
		tx->pending_no_cb = 0U;
    802c:	2600      	movs	r6, #0
	__asm__ volatile(
    802e:	f04f 0320 	mov.w	r3, #32
    8032:	f3ef 8211 	mrs	r2, BASEPRI
    8036:	f383 8811 	msr	BASEPRI, r3
    803a:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    803e:	69e3      	ldr	r3, [r4, #28]
    8040:	2b00      	cmp	r3, #0
    8042:	d073      	beq.n	812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>
			conn->pending_no_cb--;
    8044:	3b01      	subs	r3, #1
    8046:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    8048:	f382 8811 	msr	BASEPRI, r2
    804c:	f3bf 8f6f 	isb	sy
    8050:	4628      	mov	r0, r5
    8052:	f017 fe13 	bl	1fc7c <z_impl_k_sem_give>
    8056:	e7ea      	b.n	802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    8058:	78a3      	ldrb	r3, [r4, #2]
    805a:	2b04      	cmp	r3, #4
    805c:	f000 8089 	beq.w	8172 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x172>
	z_impl_k_queue_init(queue);
    8060:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8064:	f020 fb06 	bl	28674 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
    8068:	2100      	movs	r1, #0
    806a:	4846      	ldr	r0, [pc, #280]	; (8184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x184>)
    806c:	f018 ff26 	bl	20ebc <z_impl_k_poll_signal_raise>
	list->head = NULL;
    8070:	2300      	movs	r3, #0
	list->tail = NULL;
    8072:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		bt_l2cap_connected(conn);
    8076:	4620      	mov	r0, r4
    8078:	f000 fb0e 	bl	8698 <bt_l2cap_connected>
		notify_connected(conn);
    807c:	4620      	mov	r0, r4
    807e:	f7ff fceb 	bl	7a58 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8082:	78e3      	ldrb	r3, [r4, #3]
    8084:	2b01      	cmp	r3, #1
    8086:	d174      	bne.n	8172 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x172>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8088:	f104 0158 	add.w	r1, r4, #88	; 0x58
    808c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    8090:	2300      	movs	r3, #0
    8092:	483d      	ldr	r0, [pc, #244]	; (8188 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188>)
}
    8094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8098:	f018 b85e 	b.w	20158 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    809c:	78a3      	ldrb	r3, [r4, #2]
    809e:	2b04      	cmp	r3, #4
    80a0:	d104      	bne.n	80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
			bt_conn_unref(conn);
    80a2:	4620      	mov	r0, r4
}
    80a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    80a8:	f7ff bf6a 	b.w	7f80 <bt_conn_unref>
		switch (old_state) {
    80ac:	2d08      	cmp	r5, #8
    80ae:	d860      	bhi.n	8172 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x172>
    80b0:	a301      	add	r3, pc, #4	; (adr r3, 80b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>)
    80b2:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    80b6:	bf00      	nop
    80b8:	00008125 	.word	0x00008125
    80bc:	000080dd 	.word	0x000080dd
    80c0:	00008117 	.word	0x00008117
    80c4:	000080a3 	.word	0x000080a3
    80c8:	000080a3 	.word	0x000080a3
    80cc:	00008117 	.word	0x00008117
    80d0:	00008117 	.word	0x00008117
    80d4:	00008125 	.word	0x00008125
    80d8:	00008125 	.word	0x00008125
			tx_notify(conn);
    80dc:	4620      	mov	r0, r4
    80de:	f01c fc39 	bl	24954 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    80e2:	78a3      	ldrb	r3, [r4, #2]
    80e4:	2b01      	cmp	r3, #1
    80e6:	d103      	bne.n	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
				k_delayed_work_cancel(&conn->deferred_work);
    80e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
    80ec:	f018 f8a4 	bl	20238 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    80f0:	f3bf 8f5b 	dmb	ish
    80f4:	3404      	adds	r4, #4
    80f6:	e854 3f00 	ldrex	r3, [r4]
    80fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    80fe:	e844 3200 	strex	r2, r3, [r4]
    8102:	2a00      	cmp	r2, #0
    8104:	d1f7      	bne.n	80f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf6>
    8106:	f3bf 8f5b 	dmb	ish
    810a:	2100      	movs	r1, #0
    810c:	481d      	ldr	r0, [pc, #116]	; (8184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x184>)
}
    810e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8112:	f018 bed3 	b.w	20ebc <z_impl_k_poll_signal_raise>
			if (conn->err) {
    8116:	7a63      	ldrb	r3, [r4, #9]
    8118:	2b00      	cmp	r3, #0
    811a:	d0c2      	beq.n	80a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2>
				notify_connected(conn);
    811c:	4620      	mov	r0, r4
    811e:	f7ff fc9b 	bl	7a58 <notify_connected>
    8122:	e7be      	b.n	80a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2>
			BT_WARN("Invalid (%u) old state", state);
    8124:	4632      	mov	r2, r6
    8126:	2157      	movs	r1, #87	; 0x57
    8128:	4818      	ldr	r0, [pc, #96]	; (818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>)
    812a:	e76b      	b.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
Z_GENLIST_IS_EMPTY(slist)
    812c:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    812e:	b128      	cbz	r0, 813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8130:	69a1      	ldr	r1, [r4, #24]
    8132:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    8134:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8136:	4288      	cmp	r0, r1
	list->tail = node;
    8138:	bf08      	it	eq
    813a:	61a3      	streq	r3, [r4, #24]
    813c:	f382 8811 	msr	BASEPRI, r2
    8140:	f3bf 8f6f 	isb	sy
		if (!node) {
    8144:	b1a8      	cbz	r0, 8172 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x172>
	__asm__ volatile(
    8146:	f04f 0220 	mov.w	r2, #32
    814a:	f3ef 8311 	mrs	r3, BASEPRI
    814e:	f382 8811 	msr	BASEPRI, r2
    8152:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    8156:	68c2      	ldr	r2, [r0, #12]
    8158:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    815a:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    815c:	f383 8811 	msr	BASEPRI, r3
    8160:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    8164:	f7ff fc6e 	bl	7a44 <tx_free>
    8168:	e772      	b.n	8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
		BT_WARN("no valid (%u) state was set", state);
    816a:	4632      	mov	r2, r6
    816c:	2157      	movs	r1, #87	; 0x57
    816e:	4808      	ldr	r0, [pc, #32]	; (8190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>)
    8170:	e748      	b.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
}
    8172:	bd70      	pop	{r4, r5, r6, pc}
    8174:	00029324 	.word	0x00029324
    8178:	0002b537 	.word	0x0002b537
    817c:	0002b541 	.word	0x0002b541
    8180:	20000260 	.word	0x20000260
    8184:	2000061c 	.word	0x2000061c
    8188:	20002170 	.word	0x20002170
    818c:	0002b557 	.word	0x0002b557
    8190:	0002b573 	.word	0x0002b573

00008194 <bt_conn_lookup_addr_le.part.13>:
struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
    8194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8198:	4e0f      	ldr	r6, [pc, #60]	; (81d8 <bt_conn_lookup_addr_le.part.13+0x44>)
    819a:	4607      	mov	r7, r0
    819c:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    819e:	2500      	movs	r5, #0
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
    81a0:	4630      	mov	r0, r6
    81a2:	f01c fbfd 	bl	249a0 <bt_conn_ref.part.12>
		if (!conn) {
    81a6:	4604      	mov	r4, r0
    81a8:	b120      	cbz	r0, 81b4 <bt_conn_lookup_addr_le.part.13+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
    81aa:	7883      	ldrb	r3, [r0, #2]
    81ac:	2b01      	cmp	r3, #1
    81ae:	d00a      	beq.n	81c6 <bt_conn_lookup_addr_le.part.13+0x32>
			bt_conn_unref(conn);
    81b0:	f7ff fee6 	bl	7f80 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    81b4:	3501      	adds	r5, #1
    81b6:	2d03      	cmp	r5, #3
    81b8:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
    81bc:	d1f0      	bne.n	81a0 <bt_conn_lookup_addr_le.part.13+0xc>
	return NULL;
    81be:	2400      	movs	r4, #0
}
    81c0:	4620      	mov	r0, r4
    81c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    81c6:	4642      	mov	r2, r8
    81c8:	4639      	mov	r1, r7
    81ca:	f01c fc18 	bl	249fe <bt_conn_is_peer_addr_le>
    81ce:	2800      	cmp	r0, #0
    81d0:	d1f6      	bne.n	81c0 <bt_conn_lookup_addr_le.part.13+0x2c>
			bt_conn_unref(conn);
    81d2:	4620      	mov	r0, r4
    81d4:	e7ec      	b.n	81b0 <bt_conn_lookup_addr_le.part.13+0x1c>
    81d6:	bf00      	nop
    81d8:	20001340 	.word	0x20001340

000081dc <bt_conn_exists_le>:
{
    81dc:	b510      	push	{r4, lr}
    81de:	f7ff ffd9 	bl	8194 <bt_conn_lookup_addr_le.part.13>
	if (conn) {
    81e2:	4604      	mov	r4, r0
    81e4:	b170      	cbz	r0, 8204 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
    81e6:	7a83      	ldrb	r3, [r0, #10]
    81e8:	4807      	ldr	r0, [pc, #28]	; (8208 <bt_conn_exists_le+0x2c>)
    81ea:	2b08      	cmp	r3, #8
    81ec:	bf96      	itet	ls
    81ee:	4a07      	ldrls	r2, [pc, #28]	; (820c <bt_conn_exists_le+0x30>)
    81f0:	4a07      	ldrhi	r2, [pc, #28]	; (8210 <bt_conn_exists_le+0x34>)
    81f2:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
    81f6:	2157      	movs	r1, #87	; 0x57
    81f8:	f019 fe67 	bl	21eca <printk>
		bt_conn_unref(conn);
    81fc:	4620      	mov	r0, r4
    81fe:	f7ff febf 	bl	7f80 <bt_conn_unref>
		return true;
    8202:	2001      	movs	r0, #1
}
    8204:	bd10      	pop	{r4, pc}
    8206:	bf00      	nop
    8208:	0002b3f9 	.word	0x0002b3f9
    820c:	00029324 	.word	0x00029324
    8210:	0002b537 	.word	0x0002b537

00008214 <bt_conn_lookup_state_le>:
{
    8214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8218:	f8df a054 	ldr.w	sl, [pc, #84]	; 8270 <bt_conn_lookup_state_le+0x5c>
    821c:	4606      	mov	r6, r0
    821e:	460f      	mov	r7, r1
    8220:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    8222:	2500      	movs	r5, #0
    8224:	f04f 09c0 	mov.w	r9, #192	; 0xc0
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
    8228:	fb09 a005 	mla	r0, r9, r5, sl
    822c:	f01c fbb8 	bl	249a0 <bt_conn_ref.part.12>
		if (!conn) {
    8230:	4604      	mov	r4, r0
    8232:	b120      	cbz	r0, 823e <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
    8234:	7883      	ldrb	r3, [r0, #2]
    8236:	2b01      	cmp	r3, #1
    8238:	d006      	beq.n	8248 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
    823a:	f01c fc00 	bl	24a3e <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    823e:	3501      	adds	r5, #1
    8240:	2d03      	cmp	r5, #3
    8242:	d1f1      	bne.n	8228 <bt_conn_lookup_state_le+0x14>
	return NULL;
    8244:	2400      	movs	r4, #0
    8246:	e00f      	b.n	8268 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    8248:	b147      	cbz	r7, 825c <bt_conn_lookup_state_le+0x48>
    824a:	463a      	mov	r2, r7
    824c:	4631      	mov	r1, r6
    824e:	f01c fbd6 	bl	249fe <bt_conn_is_peer_addr_le>
    8252:	b918      	cbnz	r0, 825c <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
    8254:	4620      	mov	r0, r4
    8256:	f7ff fe93 	bl	7f80 <bt_conn_unref>
			continue;
    825a:	e7f0      	b.n	823e <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
    825c:	7aa3      	ldrb	r3, [r4, #10]
    825e:	4543      	cmp	r3, r8
    8260:	d1f8      	bne.n	8254 <bt_conn_lookup_state_le+0x40>
    8262:	7a23      	ldrb	r3, [r4, #8]
    8264:	42b3      	cmp	r3, r6
    8266:	d1f5      	bne.n	8254 <bt_conn_lookup_state_le+0x40>
}
    8268:	4620      	mov	r0, r4
    826a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    826e:	bf00      	nop
    8270:	20001340 	.word	0x20001340

00008274 <bt_conn_disconnect>:
			     param->pref_rx_phy, phy_opts);
}
#endif

int bt_conn_disconnect(struct bt_conn *conn, uint8_t reason)
{
    8274:	b538      	push	{r3, r4, r5, lr}
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}
#endif /* !defined(CONFIG_BT_WHITELIST) */

	switch (conn->state) {
    8276:	7a83      	ldrb	r3, [r0, #10]
    8278:	3b02      	subs	r3, #2
{
    827a:	4604      	mov	r4, r0
    827c:	460d      	mov	r5, r1
	switch (conn->state) {
    827e:	2b06      	cmp	r3, #6
    8280:	d805      	bhi.n	828e <bt_conn_disconnect+0x1a>
    8282:	e8df f003 	tbb	[pc, r3]
    8286:	0408      	.short	0x0408
    8288:	1b0c0e04 	.word	0x1b0c0e04
    828c:	0c          	.byte	0x0c
    828d:	00          	.byte	0x00
		return conn_disconnect(conn, reason);
	case BT_CONN_DISCONNECT:
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
    828e:	f06f 0538 	mvn.w	r5, #56	; 0x38
	}
}
    8292:	4628      	mov	r0, r5
    8294:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    8296:	7261      	strb	r1, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8298:	2100      	movs	r1, #0
    829a:	f7ff fea5 	bl	7fe8 <bt_conn_set_state>
		return 0;
    829e:	2500      	movs	r5, #0
    82a0:	e7f7      	b.n	8292 <bt_conn_disconnect+0x1e>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    82a2:	2157      	movs	r1, #87	; 0x57
    82a4:	480b      	ldr	r0, [pc, #44]	; (82d4 <bt_conn_disconnect+0x60>)
    82a6:	f019 fe10 	bl	21eca <printk>
		conn->err = reason;
    82aa:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    82ac:	4620      	mov	r0, r4
    82ae:	2100      	movs	r1, #0
    82b0:	f7ff fe9a 	bl	7fe8 <bt_conn_set_state>
}
    82b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
    82b8:	f7ff b920 	b.w	74fc <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
    82bc:	8800      	ldrh	r0, [r0, #0]
    82be:	f01c fa73 	bl	247a8 <bt_hci_disconnect>
	if (err) {
    82c2:	4605      	mov	r5, r0
    82c4:	2800      	cmp	r0, #0
    82c6:	d1e4      	bne.n	8292 <bt_conn_disconnect+0x1e>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    82c8:	2108      	movs	r1, #8
    82ca:	4620      	mov	r0, r4
    82cc:	f7ff fe8c 	bl	7fe8 <bt_conn_set_state>
	return 0;
    82d0:	e7df      	b.n	8292 <bt_conn_disconnect+0x1e>
    82d2:	bf00      	nop
    82d4:	0002b3cd 	.word	0x0002b3cd

000082d8 <send_conn_le_param_update>:
{
    82d8:	b538      	push	{r3, r4, r5, lr}
    82da:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    82dc:	4608      	mov	r0, r1
{
    82de:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    82e0:	f01c fa7d 	bl	247de <bt_le_conn_params_valid>
    82e4:	b310      	cbz	r0, 832c <send_conn_le_param_update+0x54>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    82e6:	4b13      	ldr	r3, [pc, #76]	; (8334 <send_conn_le_param_update+0x5c>)
    82e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    82ec:	079a      	lsls	r2, r3, #30
    82ee:	d407      	bmi.n	8300 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    82f0:	78e3      	ldrb	r3, [r4, #3]
    82f2:	b17b      	cbz	r3, 8314 <send_conn_le_param_update+0x3c>
	return bt_l2cap_update_conn_param(conn, param);
    82f4:	4629      	mov	r1, r5
    82f6:	4620      	mov	r0, r4
}
    82f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    82fc:	f000 bab4 	b.w	8868 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8300:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    8304:	079b      	lsls	r3, r3, #30
    8306:	d5f3      	bpl.n	82f0 <send_conn_le_param_update+0x18>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    8308:	210a      	movs	r1, #10
    830a:	1d20      	adds	r0, r4, #4
    830c:	f01c fb63 	bl	249d6 <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    8310:	2800      	cmp	r0, #0
    8312:	d1ed      	bne.n	82f0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    8314:	4629      	mov	r1, r5
    8316:	4620      	mov	r0, r4
    8318:	f01c fbbc 	bl	24a94 <bt_conn_le_conn_update>
		if (rc == 0) {
    831c:	b928      	cbnz	r0, 832a <send_conn_le_param_update+0x52>
			conn->le.pending_latency = param->latency;
    831e:	88ab      	ldrh	r3, [r5, #4]
    8320:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    8324:	88eb      	ldrh	r3, [r5, #6]
    8326:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    832a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    832c:	f06f 0015 	mvn.w	r0, #21
    8330:	e7fb      	b.n	832a <send_conn_le_param_update+0x52>
    8332:	bf00      	nop
    8334:	20000198 	.word	0x20000198

00008338 <deferred_work>:
{
    8338:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    833a:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    833e:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    8340:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    8344:	b993      	cbnz	r3, 836c <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    8346:	4630      	mov	r0, r6
    8348:	f01c fc03 	bl	24b52 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    834c:	4b1f      	ldr	r3, [pc, #124]	; (83cc <deferred_work+0x94>)
    834e:	681d      	ldr	r5, [r3, #0]
    8350:	b925      	cbnz	r5, 835c <deferred_work+0x24>
		bt_conn_unref(conn);
    8352:	4630      	mov	r0, r6
    8354:	f7ff fe14 	bl	7f80 <bt_conn_unref>
}
    8358:	b004      	add	sp, #16
    835a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    835c:	686b      	ldr	r3, [r5, #4]
    835e:	b11b      	cbz	r3, 8368 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    8360:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    8364:	4630      	mov	r0, r6
    8366:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8368:	692d      	ldr	r5, [r5, #16]
    836a:	e7f1      	b.n	8350 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    836c:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    8370:	2b01      	cmp	r3, #1
    8372:	d1f1      	bne.n	8358 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8374:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    8378:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    837c:	e855 3f00 	ldrex	r3, [r5]
    8380:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    8384:	e845 2100 	strex	r1, r2, [r5]
    8388:	2900      	cmp	r1, #0
    838a:	d1f7      	bne.n	837c <deferred_work+0x44>
    838c:	f3bf 8f5b 	dmb	ish
    8390:	059b      	lsls	r3, r3, #22
    8392:	d514      	bpl.n	83be <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    8394:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    8396:	9300      	str	r3, [sp, #0]
    8398:	6d23      	ldr	r3, [r4, #80]	; 0x50
    839a:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    839c:	4669      	mov	r1, sp
		send_conn_le_param_update(conn, param);
    839e:	4630      	mov	r0, r6
    83a0:	f7ff ff9a 	bl	82d8 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    83a4:	f3bf 8f5b 	dmb	ish
    83a8:	e855 3f00 	ldrex	r3, [r5]
    83ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    83b0:	e845 3200 	strex	r2, r3, [r5]
    83b4:	2a00      	cmp	r2, #0
    83b6:	d1f7      	bne.n	83a8 <deferred_work+0x70>
    83b8:	f3bf 8f5b 	dmb	ish
    83bc:	e7cc      	b.n	8358 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    83be:	4a04      	ldr	r2, [pc, #16]	; (83d0 <deferred_work+0x98>)
    83c0:	6851      	ldr	r1, [r2, #4]
    83c2:	6810      	ldr	r0, [r2, #0]
    83c4:	ab02      	add	r3, sp, #8
    83c6:	c303      	stmia	r3!, {r0, r1}
		send_conn_le_param_update(conn, param);
    83c8:	a902      	add	r1, sp, #8
    83ca:	e7e8      	b.n	839e <deferred_work+0x66>
    83cc:	200028c8 	.word	0x200028c8
    83d0:	00028f8c 	.word	0x00028f8c

000083d4 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    83d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83d6:	4604      	mov	r4, r0
    83d8:	460d      	mov	r5, r1
    83da:	4616      	mov	r6, r2
    83dc:	461f      	mov	r7, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
    83de:	f020 f9bf 	bl	28760 <k_is_in_isr>
    83e2:	b150      	cbz	r0, 83fa <bt_conn_create_pdu_timeout+0x26>
    83e4:	490f      	ldr	r1, [pc, #60]	; (8424 <bt_conn_create_pdu_timeout+0x50>)
    83e6:	4810      	ldr	r0, [pc, #64]	; (8428 <bt_conn_create_pdu_timeout+0x54>)
    83e8:	f640 12ee 	movw	r2, #2542	; 0x9ee
    83ec:	f019 fd6d 	bl	21eca <printk>
    83f0:	f640 11ee 	movw	r1, #2542	; 0x9ee
    83f4:	480b      	ldr	r0, [pc, #44]	; (8424 <bt_conn_create_pdu_timeout+0x50>)
    83f6:	f01a f81a 	bl	2242e <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    83fa:	480c      	ldr	r0, [pc, #48]	; (842c <bt_conn_create_pdu_timeout+0x58>)
    83fc:	4632      	mov	r2, r6
    83fe:	2c00      	cmp	r4, #0
    8400:	bf18      	it	ne
    8402:	4620      	movne	r0, r4
    8404:	463b      	mov	r3, r7
    8406:	f01f fd55 	bl	27eb4 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    840a:	4604      	mov	r4, r0
    840c:	b928      	cbnz	r0, 841a <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
    840e:	2157      	movs	r1, #87	; 0x57
    8410:	4807      	ldr	r0, [pc, #28]	; (8430 <bt_conn_create_pdu_timeout+0x5c>)
    8412:	f019 fd5a 	bl	21eca <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    8416:	4620      	mov	r0, r4
    8418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    841a:	1d29      	adds	r1, r5, #4
    841c:	3008      	adds	r0, #8
    841e:	f014 f939 	bl	1c694 <net_buf_simple_reserve>
	return buf;
    8422:	e7f8      	b.n	8416 <bt_conn_create_pdu_timeout+0x42>
    8424:	0002b594 	.word	0x0002b594
    8428:	0002a026 	.word	0x0002a026
    842c:	20000ff8 	.word	0x20000ff8
    8430:	0002b39f 	.word	0x0002b39f

00008434 <bt_conn_create_frag_timeout>:
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    8434:	4601      	mov	r1, r0
    8436:	4801      	ldr	r0, [pc, #4]	; (843c <bt_conn_create_frag_timeout+0x8>)
    8438:	f7ff bfcc 	b.w	83d4 <bt_conn_create_pdu_timeout>
    843c:	2000107c 	.word	0x2000107c

00008440 <create_frag.isra.16>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    8440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8444:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    8446:	f04f 33ff 	mov.w	r3, #4294967295
    844a:	f04f 32ff 	mov.w	r2, #4294967295
    844e:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    8450:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    8452:	f7ff ffef 	bl	8434 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    8456:	7833      	ldrb	r3, [r6, #0]
    8458:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    845a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    845c:	f04f 0600 	mov.w	r6, #0
    8460:	d005      	beq.n	846e <create_frag.isra.16+0x2e>
		net_buf_unref(frag);
    8462:	f014 fa01 	bl	1c868 <net_buf_unref>
		return NULL;
    8466:	4635      	mov	r5, r6
}
    8468:	4628      	mov	r0, r5
    846a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    846e:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    8470:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    8474:	4e0c      	ldr	r6, [pc, #48]	; (84a8 <create_frag.isra.16+0x68>)
    8476:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    8478:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    847c:	f01f fd6f 	bl	27f5e <net_buf_simple_tailroom>
    8480:	4580      	cmp	r8, r0
    8482:	d20c      	bcs.n	849e <create_frag.isra.16+0x5e>
	return bt_dev.le.acl_mtu;
    8484:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
    8488:	f854 1f08 	ldr.w	r1, [r4, #8]!
    848c:	4632      	mov	r2, r6
    848e:	4638      	mov	r0, r7
    8490:	f01f fd6d 	bl	27f6e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    8494:	4631      	mov	r1, r6
    8496:	4620      	mov	r0, r4
    8498:	f014 fafc 	bl	1ca94 <net_buf_simple_pull>
    849c:	e7e4      	b.n	8468 <create_frag.isra.16+0x28>
	return net_buf_simple_tailroom(&buf->b);
    849e:	4638      	mov	r0, r7
    84a0:	f01f fd5d 	bl	27f5e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    84a4:	b286      	uxth	r6, r0
    84a6:	e7ef      	b.n	8488 <create_frag.isra.16+0x48>
    84a8:	20000198 	.word	0x20000198

000084ac <bt_conn_process_tx>:
{
    84ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    84ae:	7a83      	ldrb	r3, [r0, #10]
{
    84b0:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    84b2:	b993      	cbnz	r3, 84da <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    84b4:	f3bf 8f5b 	dmb	ish
    84b8:	1d03      	adds	r3, r0, #4
    84ba:	e853 2f00 	ldrex	r2, [r3]
    84be:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    84c2:	e843 1400 	strex	r4, r1, [r3]
    84c6:	2c00      	cmp	r4, #0
    84c8:	d1f7      	bne.n	84ba <bt_conn_process_tx+0xe>
    84ca:	f3bf 8f5b 	dmb	ish
    84ce:	0653      	lsls	r3, r2, #25
    84d0:	d503      	bpl.n	84da <bt_conn_process_tx+0x2e>
}
    84d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    84d6:	f7ff bbdf 	b.w	7c98 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    84da:	2200      	movs	r2, #0
    84dc:	2300      	movs	r3, #0
    84de:	f105 0034 	add.w	r0, r5, #52	; 0x34
    84e2:	f014 f8a7 	bl	1c634 <net_buf_get>
	BT_ASSERT(buf);
    84e6:	4604      	mov	r4, r0
    84e8:	b958      	cbnz	r0, 8502 <bt_conn_process_tx+0x56>
    84ea:	f240 525f 	movw	r2, #1375	; 0x55f
    84ee:	491f      	ldr	r1, [pc, #124]	; (856c <bt_conn_process_tx+0xc0>)
    84f0:	481f      	ldr	r0, [pc, #124]	; (8570 <bt_conn_process_tx+0xc4>)
    84f2:	f019 fcea 	bl	21eca <printk>
    84f6:	4040      	eors	r0, r0
    84f8:	f380 8811 	msr	BASEPRI, r0
    84fc:	f04f 0003 	mov.w	r0, #3
    8500:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    8502:	4e1c      	ldr	r6, [pc, #112]	; (8574 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
    8504:	89a1      	ldrh	r1, [r4, #12]
    8506:	f8b6 20c4 	ldrh.w	r2, [r6, #196]	; 0xc4
    850a:	4291      	cmp	r1, r2
    850c:	d807      	bhi.n	851e <bt_conn_process_tx+0x72>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    850e:	2300      	movs	r3, #0
    8510:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    8512:	4621      	mov	r1, r4
    8514:	4628      	mov	r0, r5
    8516:	f7ff fab5 	bl	7a84 <send_frag>
	if (!send_buf(conn, buf)) {
    851a:	b140      	cbz	r0, 852e <bt_conn_process_tx+0x82>
}
    851c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    851e:	f105 070a 	add.w	r7, r5, #10
    8522:	4621      	mov	r1, r4
    8524:	4638      	mov	r0, r7
    8526:	f7ff ff8b 	bl	8440 <create_frag.isra.16>
	if (!frag) {
    852a:	4601      	mov	r1, r0
    852c:	b920      	cbnz	r0, 8538 <bt_conn_process_tx+0x8c>
		net_buf_unref(buf);
    852e:	4620      	mov	r0, r4
}
    8530:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    8534:	f014 b998 	b.w	1c868 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    8538:	2301      	movs	r3, #1
    853a:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    853c:	4628      	mov	r0, r5
    853e:	f7ff faa1 	bl	7a84 <send_frag>
    8542:	2800      	cmp	r0, #0
    8544:	d0f3      	beq.n	852e <bt_conn_process_tx+0x82>
	while (buf->len > conn_mtu(conn)) {
    8546:	89a2      	ldrh	r2, [r4, #12]
    8548:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
    854c:	429a      	cmp	r2, r3
    854e:	d802      	bhi.n	8556 <bt_conn_process_tx+0xaa>
	return send_frag(conn, buf, FRAG_END, false);
    8550:	2300      	movs	r3, #0
    8552:	2203      	movs	r2, #3
    8554:	e7dd      	b.n	8512 <bt_conn_process_tx+0x66>
		frag = create_frag(conn, buf);
    8556:	4621      	mov	r1, r4
    8558:	4638      	mov	r0, r7
    855a:	f7ff ff71 	bl	8440 <create_frag.isra.16>
		if (!frag) {
    855e:	4601      	mov	r1, r0
    8560:	2800      	cmp	r0, #0
    8562:	d0e4      	beq.n	852e <bt_conn_process_tx+0x82>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    8564:	2301      	movs	r3, #1
    8566:	461a      	mov	r2, r3
    8568:	e7e8      	b.n	853c <bt_conn_process_tx+0x90>
    856a:	bf00      	nop
    856c:	0002b594 	.word	0x0002b594
    8570:	0002a026 	.word	0x0002a026
    8574:	20000198 	.word	0x20000198

00008578 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    8578:	4b0a      	ldr	r3, [pc, #40]	; (85a4 <bt_conn_index+0x2c>)
{
    857a:	b510      	push	{r4, lr}
		index = conn - acl_conns;
    857c:	1ac0      	subs	r0, r0, r3
    857e:	4c0a      	ldr	r4, [pc, #40]	; (85a8 <bt_conn_index+0x30>)
    8580:	1180      	asrs	r0, r0, #6
    8582:	4344      	muls	r4, r0
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
    8584:	2c02      	cmp	r4, #2
    8586:	d90a      	bls.n	859e <bt_conn_index+0x26>
    8588:	4908      	ldr	r1, [pc, #32]	; (85ac <bt_conn_index+0x34>)
    858a:	4809      	ldr	r0, [pc, #36]	; (85b0 <bt_conn_index+0x38>)
    858c:	f640 2296 	movw	r2, #2710	; 0xa96
    8590:	f019 fc9b 	bl	21eca <printk>
    8594:	f640 2196 	movw	r1, #2710	; 0xa96
    8598:	4804      	ldr	r0, [pc, #16]	; (85ac <bt_conn_index+0x34>)
    859a:	f019 ff48 	bl	2242e <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    859e:	b2e0      	uxtb	r0, r4
    85a0:	bd10      	pop	{r4, pc}
    85a2:	bf00      	nop
    85a4:	20001340 	.word	0x20001340
    85a8:	aaaaaaab 	.word	0xaaaaaaab
    85ac:	0002b594 	.word	0x0002b594
    85b0:	0002a026 	.word	0x0002a026

000085b4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    85b4:	b570      	push	{r4, r5, r6, lr}
    85b6:	4d0b      	ldr	r5, [pc, #44]	; (85e4 <bt_conn_init+0x30>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    85b8:	4e0b      	ldr	r6, [pc, #44]	; (85e8 <bt_conn_init+0x34>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    85ba:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    85bc:	4629      	mov	r1, r5
    85be:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    85c0:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    85c2:	f020 f864 	bl	2868e <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    85c6:	2c08      	cmp	r4, #8
    85c8:	f105 0510 	add.w	r5, r5, #16
    85cc:	d1f6      	bne.n	85bc <bt_conn_init+0x8>
	}

	bt_att_init();
    85ce:	f01c fe10 	bl	251f2 <bt_att_init>

	err = bt_smp_init();
    85d2:	f01d f920 	bl	25816 <bt_smp_init>
	if (err) {
    85d6:	4604      	mov	r4, r0
    85d8:	b908      	cbnz	r0, 85de <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    85da:	f01c faff 	bl	24bdc <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    85de:	4620      	mov	r0, r4
    85e0:	bd70      	pop	{r4, r5, r6, pc}
    85e2:	bf00      	nop
    85e4:	200028cc 	.word	0x200028cc
    85e8:	20000fc0 	.word	0x20000fc0

000085ec <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    85ec:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    85ee:	4c0e      	ldr	r4, [pc, #56]	; (8628 <l2cap_accept+0x3c>)
    85f0:	6823      	ldr	r3, [r4, #0]
{
    85f2:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
    85f4:	4625      	mov	r5, r4
    85f6:	b16b      	cbz	r3, 8614 <l2cap_accept+0x28>
    85f8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    85fc:	b14b      	cbz	r3, 8612 <l2cap_accept+0x26>
    85fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    8602:	b17b      	cbz	r3, 8624 <l2cap_accept+0x38>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    8604:	4809      	ldr	r0, [pc, #36]	; (862c <l2cap_accept+0x40>)
    8606:	2145      	movs	r1, #69	; 0x45
    8608:	f019 fc5f 	bl	21eca <printk>
    860c:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
    8610:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    8612:	2301      	movs	r3, #1
		l2cap->chan.chan.ops = &ops;
    8614:	22c0      	movs	r2, #192	; 0xc0
    8616:	fb02 5303 	mla	r3, r2, r3, r5
    861a:	4a05      	ldr	r2, [pc, #20]	; (8630 <l2cap_accept+0x44>)
    861c:	605a      	str	r2, [r3, #4]
		return 0;
    861e:	2000      	movs	r0, #0
		*chan = &l2cap->chan.chan;
    8620:	600b      	str	r3, [r1, #0]
		return 0;
    8622:	e7f5      	b.n	8610 <l2cap_accept+0x24>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    8624:	2302      	movs	r3, #2
    8626:	e7f5      	b.n	8614 <l2cap_accept+0x28>
    8628:	20001580 	.word	0x20001580
    862c:	0002b6ab 	.word	0x0002b6ab
    8630:	00029368 	.word	0x00029368

00008634 <l2cap_create_le_sig_pdu.isra.8>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    8634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8636:	4605      	mov	r5, r0
    8638:	460f      	mov	r7, r1
    863a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    863c:	2300      	movs	r3, #0
    863e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8642:	2104      	movs	r1, #4
    8644:	2000      	movs	r0, #0
    8646:	f7ff fec5 	bl	83d4 <bt_conn_create_pdu_timeout>
	if (!buf) {
    864a:	4604      	mov	r4, r0
    864c:	b930      	cbnz	r0, 865c <l2cap_create_le_sig_pdu.isra.8+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    864e:	462a      	mov	r2, r5
    8650:	2145      	movs	r1, #69	; 0x45
    8652:	4806      	ldr	r0, [pc, #24]	; (866c <l2cap_create_le_sig_pdu.isra.8+0x38>)
    8654:	f019 fc39 	bl	21eca <printk>
}
    8658:	4620      	mov	r0, r4
    865a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    865c:	2104      	movs	r1, #4
    865e:	3008      	adds	r0, #8
    8660:	f014 fa52 	bl	1cb08 <net_buf_simple_add>
	hdr->code = code;
    8664:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    8666:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    8668:	8046      	strh	r6, [r0, #2]
	return buf;
    866a:	e7f5      	b.n	8658 <l2cap_create_le_sig_pdu.isra.8+0x24>
    866c:	0002b6d7 	.word	0x0002b6d7

00008670 <l2cap_rtx_timeout>:
{
    8670:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
    8672:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
    8674:	2145      	movs	r1, #69	; 0x45
	struct bt_conn *conn = chan->chan.conn;
    8676:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    867a:	4806      	ldr	r0, [pc, #24]	; (8694 <l2cap_rtx_timeout+0x24>)
    867c:	4622      	mov	r2, r4
    867e:	f019 fc24 	bl	21eca <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
    8682:	4628      	mov	r0, r5
    8684:	4621      	mov	r1, r4
    8686:	f01c fa2f 	bl	24ae8 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    868a:	4620      	mov	r0, r4
}
    868c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    8690:	f01c ba4a 	b.w	24b28 <bt_l2cap_chan_del>
    8694:	0002b7b7 	.word	0x0002b7b7

00008698 <bt_l2cap_connected>:
{
    8698:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    869c:	4f31      	ldr	r7, [pc, #196]	; (8764 <bt_l2cap_connected+0xcc>)
    869e:	4d32      	ldr	r5, [pc, #200]	; (8768 <bt_l2cap_connected+0xd0>)
    86a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8774 <bt_l2cap_connected+0xdc>
{
    86a4:	4606      	mov	r6, r0
    86a6:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    86a8:	42bd      	cmp	r5, r7
    86aa:	d90a      	bls.n	86c2 <bt_l2cap_connected+0x2a>
    86ac:	4641      	mov	r1, r8
    86ae:	482f      	ldr	r0, [pc, #188]	; (876c <bt_l2cap_connected+0xd4>)
    86b0:	f240 1267 	movw	r2, #359	; 0x167
    86b4:	f019 fc09 	bl	21eca <printk>
    86b8:	f240 1167 	movw	r1, #359	; 0x167
    86bc:	4640      	mov	r0, r8
    86be:	f019 feb6 	bl	2242e <assert_post_action>
    86c2:	454d      	cmp	r5, r9
    86c4:	d302      	bcc.n	86cc <bt_l2cap_connected+0x34>
}
    86c6:	b002      	add	sp, #8
    86c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
    86cc:	686b      	ldr	r3, [r5, #4]
    86ce:	a901      	add	r1, sp, #4
    86d0:	4630      	mov	r0, r6
    86d2:	4798      	blx	r3
    86d4:	2800      	cmp	r0, #0
    86d6:	db40      	blt.n	875a <bt_l2cap_connected+0xc2>
		ch = BT_L2CAP_LE_CHAN(chan);
    86d8:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    86da:	882b      	ldrh	r3, [r5, #0]
    86dc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    86e0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    86e4:	2230      	movs	r2, #48	; 0x30
    86e6:	2100      	movs	r1, #0
    86e8:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    86ec:	f8d5 a008 	ldr.w	sl, [r5, #8]
    86f0:	f01b fd57 	bl	241a2 <memset>
    86f4:	4b1e      	ldr	r3, [pc, #120]	; (8770 <bt_l2cap_connected+0xd8>)
    86f6:	6163      	str	r3, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    86f8:	2200      	movs	r2, #0
    86fa:	f104 0340 	add.w	r3, r4, #64	; 0x40
    86fe:	f3bf 8f5b 	dmb	ish
    8702:	e853 1f00 	ldrex	r1, [r3]
    8706:	e843 2000 	strex	r0, r2, [r3]
    870a:	2800      	cmp	r0, #0
    870c:	d1f9      	bne.n	8702 <bt_l2cap_connected+0x6a>
    870e:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    8712:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    8714:	6d72      	ldr	r2, [r6, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    8716:	f104 0308 	add.w	r3, r4, #8
    871a:	bb02      	cbnz	r2, 875e <bt_l2cap_connected+0xc6>
	list->head = node;
    871c:	e9c6 3314 	strd	r3, r3, [r6, #80]	; 0x50
		if (chan->ops->connected) {
    8720:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    8722:	6026      	str	r6, [r4, #0]
		if (chan->ops->connected) {
    8724:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    8726:	f8c4 a00c 	str.w	sl, [r4, #12]
		if (chan->ops->connected) {
    872a:	681b      	ldr	r3, [r3, #0]
    872c:	b103      	cbz	r3, 8730 <bt_l2cap_connected+0x98>
			chan->ops->connected(chan);
    872e:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8730:	9b01      	ldr	r3, [sp, #4]
    8732:	f3bf 8f5b 	dmb	ish
    8736:	3340      	adds	r3, #64	; 0x40
    8738:	e853 2f00 	ldrex	r2, [r3]
    873c:	f042 0201 	orr.w	r2, r2, #1
    8740:	e843 2100 	strex	r1, r2, [r3]
    8744:	2900      	cmp	r1, #0
    8746:	d1f7      	bne.n	8738 <bt_l2cap_connected+0xa0>
    8748:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    874c:	9801      	ldr	r0, [sp, #4]
    874e:	6843      	ldr	r3, [r0, #4]
    8750:	699b      	ldr	r3, [r3, #24]
    8752:	b113      	cbz	r3, 875a <bt_l2cap_connected+0xc2>
			chan->ops->status(chan, chan->status);
    8754:	f100 0140 	add.w	r1, r0, #64	; 0x40
    8758:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    875a:	350c      	adds	r5, #12
    875c:	e7a4      	b.n	86a8 <bt_l2cap_connected+0x10>
	parent->next = child;
    875e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8760:	6573      	str	r3, [r6, #84]	; 0x54
    8762:	e7dd      	b.n	8720 <bt_l2cap_connected+0x88>
    8764:	00028bac 	.word	0x00028bac
    8768:	00028b88 	.word	0x00028b88
    876c:	0002a026 	.word	0x0002a026
    8770:	00008671 	.word	0x00008671
    8774:	0002b62e 	.word	0x0002b62e

00008778 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    8778:	898b      	ldrh	r3, [r1, #12]
    877a:	2b03      	cmp	r3, #3
{
    877c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    877e:	4606      	mov	r6, r0
    8780:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    8782:	d804      	bhi.n	878e <l2cap_recv+0x16>
		BT_ERR("Too small L2CAP signaling PDU");
    8784:	481f      	ldr	r0, [pc, #124]	; (8804 <l2cap_recv+0x8c>)
    8786:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid ident value in L2CAP PDU");
    8788:	f019 fb9f 	bl	21eca <printk>
		return 0;
    878c:	e00d      	b.n	87aa <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
    878e:	2104      	movs	r1, #4
    8790:	f105 0008 	add.w	r0, r5, #8
    8794:	f014 f99a 	bl	1cacc <net_buf_simple_pull_mem>
	if (buf->len != len) {
    8798:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    879a:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
    879c:	4293      	cmp	r3, r2
    879e:	4604      	mov	r4, r0
    87a0:	d006      	beq.n	87b0 <l2cap_recv+0x38>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    87a2:	2145      	movs	r1, #69	; 0x45
    87a4:	4818      	ldr	r0, [pc, #96]	; (8808 <l2cap_recv+0x90>)
    87a6:	f019 fb90 	bl	21eca <printk>
}
    87aa:	2000      	movs	r0, #0
    87ac:	b002      	add	sp, #8
    87ae:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    87b0:	7842      	ldrb	r2, [r0, #1]
    87b2:	b912      	cbnz	r2, 87ba <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
    87b4:	2145      	movs	r1, #69	; 0x45
    87b6:	4815      	ldr	r0, [pc, #84]	; (880c <l2cap_recv+0x94>)
    87b8:	e7e6      	b.n	8788 <l2cap_recv+0x10>
	switch (hdr->code) {
    87ba:	7802      	ldrb	r2, [r0, #0]
    87bc:	2a01      	cmp	r2, #1
    87be:	d0f4      	beq.n	87aa <l2cap_recv+0x32>
    87c0:	2a13      	cmp	r2, #19
    87c2:	d104      	bne.n	87ce <l2cap_recv+0x56>
	if (buf->len < sizeof(*rsp)) {
    87c4:	2b01      	cmp	r3, #1
    87c6:	d8f0      	bhi.n	87aa <l2cap_recv+0x32>
		BT_ERR("Too small LE conn param rsp");
    87c8:	2145      	movs	r1, #69	; 0x45
    87ca:	4811      	ldr	r0, [pc, #68]	; (8810 <l2cap_recv+0x98>)
    87cc:	e7dc      	b.n	8788 <l2cap_recv+0x10>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    87ce:	2157      	movs	r1, #87	; 0x57
    87d0:	4810      	ldr	r0, [pc, #64]	; (8814 <l2cap_recv+0x9c>)
    87d2:	f019 fb7a 	bl	21eca <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    87d6:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    87d8:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    87da:	2202      	movs	r2, #2
    87dc:	2001      	movs	r0, #1
    87de:	f7ff ff29 	bl	8634 <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    87e2:	4604      	mov	r4, r0
    87e4:	2800      	cmp	r0, #0
    87e6:	d0e0      	beq.n	87aa <l2cap_recv+0x32>
	return net_buf_simple_add(&buf->b, len);
    87e8:	2102      	movs	r1, #2
    87ea:	3008      	adds	r0, #8
    87ec:	f014 f98c 	bl	1cb08 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    87f0:	2300      	movs	r3, #0
    87f2:	7003      	strb	r3, [r0, #0]
    87f4:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    87f6:	4622      	mov	r2, r4
    87f8:	9300      	str	r3, [sp, #0]
    87fa:	2105      	movs	r1, #5
    87fc:	4628      	mov	r0, r5
    87fe:	f01c f9be 	bl	24b7e <bt_l2cap_send_cb>
    8802:	e7d2      	b.n	87aa <l2cap_recv+0x32>
    8804:	0002b704 	.word	0x0002b704
    8808:	0002b727 	.word	0x0002b727
    880c:	0002b74d 	.word	0x0002b74d
    8810:	0002b773 	.word	0x0002b773
    8814:	0002b794 	.word	0x0002b794

00008818 <bt_l2cap_recv>:
{
    8818:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    881a:	898b      	ldrh	r3, [r1, #12]
    881c:	2b03      	cmp	r3, #3
{
    881e:	4605      	mov	r5, r0
    8820:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    8822:	d808      	bhi.n	8836 <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
    8824:	2145      	movs	r1, #69	; 0x45
    8826:	480e      	ldr	r0, [pc, #56]	; (8860 <bt_l2cap_recv+0x48>)
    8828:	f019 fb4f 	bl	21eca <printk>
	net_buf_unref(buf);
    882c:	4620      	mov	r0, r4
}
    882e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    8832:	f014 b819 	b.w	1c868 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    8836:	2104      	movs	r1, #4
    8838:	f104 0008 	add.w	r0, r4, #8
    883c:	f014 f946 	bl	1cacc <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    8840:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    8842:	4628      	mov	r0, r5
    8844:	4611      	mov	r1, r2
    8846:	f01c f9be 	bl	24bc6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    884a:	b920      	cbnz	r0, 8856 <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    884c:	2157      	movs	r1, #87	; 0x57
    884e:	4805      	ldr	r0, [pc, #20]	; (8864 <bt_l2cap_recv+0x4c>)
    8850:	f019 fb3b 	bl	21eca <printk>
		net_buf_unref(buf);
    8854:	e7ea      	b.n	882c <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
    8856:	6843      	ldr	r3, [r0, #4]
    8858:	4621      	mov	r1, r4
    885a:	691b      	ldr	r3, [r3, #16]
    885c:	4798      	blx	r3
    885e:	e7e5      	b.n	882c <bt_l2cap_recv+0x14>
    8860:	0002b65f 	.word	0x0002b65f
    8864:	0002b681 	.word	0x0002b681

00008868 <bt_l2cap_update_conn_param>:
{
    8868:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    886a:	4b15      	ldr	r3, [pc, #84]	; (88c0 <bt_l2cap_update_conn_param+0x58>)
    886c:	781a      	ldrb	r2, [r3, #0]
    886e:	3201      	adds	r2, #1
	if (!ident) {
    8870:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    8874:	bf08      	it	eq
    8876:	2201      	moveq	r2, #1
    8878:	701a      	strb	r2, [r3, #0]
{
    887a:	4605      	mov	r5, r0
    887c:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    887e:	2208      	movs	r2, #8
    8880:	7819      	ldrb	r1, [r3, #0]
    8882:	2012      	movs	r0, #18
    8884:	f7ff fed6 	bl	8634 <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    8888:	4606      	mov	r6, r0
    888a:	b1b0      	cbz	r0, 88ba <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    888c:	2108      	movs	r1, #8
    888e:	4408      	add	r0, r1
    8890:	f014 f93a 	bl	1cb08 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    8894:	8823      	ldrh	r3, [r4, #0]
    8896:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    8898:	8863      	ldrh	r3, [r4, #2]
    889a:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    889c:	88a3      	ldrh	r3, [r4, #4]
    889e:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    88a0:	88e3      	ldrh	r3, [r4, #6]
    88a2:	80c3      	strh	r3, [r0, #6]
    88a4:	2400      	movs	r4, #0
    88a6:	9400      	str	r4, [sp, #0]
    88a8:	4623      	mov	r3, r4
    88aa:	4632      	mov	r2, r6
    88ac:	2105      	movs	r1, #5
    88ae:	4628      	mov	r0, r5
    88b0:	f01c f965 	bl	24b7e <bt_l2cap_send_cb>
	return 0;
    88b4:	4620      	mov	r0, r4
}
    88b6:	b002      	add	sp, #8
    88b8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    88ba:	f06f 000b 	mvn.w	r0, #11
    88be:	e7fa      	b.n	88b6 <bt_l2cap_update_conn_param+0x4e>
    88c0:	20004500 	.word	0x20004500

000088c4 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    88c4:	4b02      	ldr	r3, [pc, #8]	; (88d0 <att_cfm_sent+0xc>)
    88c6:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
    88ca:	f01c b9b5 	b.w	24c38 <att_sent>
    88ce:	bf00      	nop
    88d0:	00024f4d 	.word	0x00024f4d

000088d4 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    88d4:	4b02      	ldr	r3, [pc, #8]	; (88e0 <att_rsp_sent+0xc>)
    88d6:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
    88da:	f01c b9ad 	b.w	24c38 <att_sent>
    88de:	bf00      	nop
    88e0:	00024f31 	.word	0x00024f31

000088e4 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    88e4:	4b02      	ldr	r3, [pc, #8]	; (88f0 <att_req_sent+0xc>)
    88e6:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
    88ea:	f01c b9a5 	b.w	24c38 <att_sent>
    88ee:	bf00      	nop
    88f0:	00008d81 	.word	0x00008d81

000088f4 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    88f4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    88f6:	3808      	subs	r0, #8
    88f8:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    88fa:	a901      	add	r1, sp, #4
    88fc:	4802      	ldr	r0, [pc, #8]	; (8908 <bt_att_released+0x14>)
    88fe:	f015 fe73 	bl	1e5e8 <k_mem_slab_free>
}
    8902:	b003      	add	sp, #12
    8904:	f85d fb04 	ldr.w	pc, [sp], #4
    8908:	20000ebc 	.word	0x20000ebc

0000890c <read_group_cb>:
{
    890c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8910:	4606      	mov	r6, r0
    8912:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8914:	f04f 0800 	mov.w	r8, #0
    8918:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    891c:	a902      	add	r1, sp, #8
    891e:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    8920:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8922:	f88d 8008 	strb.w	r8, [sp, #8]
{
    8926:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8928:	f8ad 300a 	strh.w	r3, [sp, #10]
    892c:	f01b fe72 	bl	24614 <bt_uuid_cmp>
    8930:	b190      	cbz	r0, 8958 <read_group_cb+0x4c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8932:	f642 0301 	movw	r3, #10241	; 0x2801
    8936:	a903      	add	r1, sp, #12
    8938:	6830      	ldr	r0, [r6, #0]
    893a:	f88d 800c 	strb.w	r8, [sp, #12]
    893e:	f8ad 300e 	strh.w	r3, [sp, #14]
    8942:	f01b fe67 	bl	24614 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8946:	b138      	cbz	r0, 8958 <read_group_cb+0x4c>
		if (data->group &&
    8948:	6923      	ldr	r3, [r4, #16]
    894a:	b11b      	cbz	r3, 8954 <read_group_cb+0x48>
    894c:	885a      	ldrh	r2, [r3, #2]
    894e:	42aa      	cmp	r2, r5
    8950:	d200      	bcs.n	8954 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    8952:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8954:	2001      	movs	r0, #1
    8956:	e012      	b.n	897e <read_group_cb+0x72>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8958:	6861      	ldr	r1, [r4, #4]
    895a:	6830      	ldr	r0, [r6, #0]
    895c:	f01b fe5a 	bl	24614 <bt_uuid_cmp>
    8960:	b110      	cbz	r0, 8968 <read_group_cb+0x5c>
		data->group = NULL;
    8962:	2300      	movs	r3, #0
    8964:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    8966:	e7f5      	b.n	8954 <read_group_cb+0x48>
	if (data->rsp->len &&
    8968:	68e3      	ldr	r3, [r4, #12]
    896a:	68a0      	ldr	r0, [r4, #8]
    896c:	781a      	ldrb	r2, [r3, #0]
    896e:	b14a      	cbz	r2, 8984 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8970:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    8974:	8981      	ldrh	r1, [r0, #12]
    8976:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8978:	4293      	cmp	r3, r2
    897a:	da03      	bge.n	8984 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    897c:	2000      	movs	r0, #0
}
    897e:	b004      	add	sp, #16
    8980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8984:	2104      	movs	r1, #4
    8986:	3008      	adds	r0, #8
    8988:	f014 f8be 	bl	1cb08 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    898c:	4b09      	ldr	r3, [pc, #36]	; (89b4 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    898e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8990:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    8992:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8994:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8996:	4631      	mov	r1, r6
    8998:	9300      	str	r3, [sp, #0]
    899a:	9401      	str	r4, [sp, #4]
    899c:	2300      	movs	r3, #0
    899e:	4638      	mov	r0, r7
    89a0:	f01c f9c3 	bl	24d2a <att_chan_read>
	if (read < 0) {
    89a4:	2800      	cmp	r0, #0
    89a6:	dbe9      	blt.n	897c <read_group_cb+0x70>
	if (!data->group) {
    89a8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    89aa:	3000      	adds	r0, #0
    89ac:	bf18      	it	ne
    89ae:	2001      	movne	r0, #1
    89b0:	e7e5      	b.n	897e <read_group_cb+0x72>
    89b2:	bf00      	nop
    89b4:	00024ed9 	.word	0x00024ed9

000089b8 <read_type_cb>:
{
    89b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    89bc:	6816      	ldr	r6, [r2, #0]
{
    89be:	4607      	mov	r7, r0
    89c0:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    89c2:	6800      	ldr	r0, [r0, #0]
    89c4:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    89c6:	68b5      	ldr	r5, [r6, #8]
{
    89c8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    89ca:	f01b fe23 	bl	24614 <bt_uuid_cmp>
    89ce:	4680      	mov	r8, r0
    89d0:	2800      	cmp	r0, #0
    89d2:	d13f      	bne.n	8a54 <read_type_cb+0x9c>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    89d4:	4628      	mov	r0, r5
    89d6:	2215      	movs	r2, #21
    89d8:	4639      	mov	r1, r7
    89da:	f01c feab 	bl	25734 <bt_gatt_check_perm>
    89de:	4605      	mov	r5, r0
    89e0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    89e2:	b150      	cbz	r0, 89fa <read_type_cb+0x42>
		if (data->rsp->len) {
    89e4:	68e3      	ldr	r3, [r4, #12]
    89e6:	781b      	ldrb	r3, [r3, #0]
    89e8:	b923      	cbnz	r3, 89f4 <read_type_cb+0x3c>
		return BT_GATT_ITER_STOP;
    89ea:	2500      	movs	r5, #0
}
    89ec:	4628      	mov	r0, r5
    89ee:	b003      	add	sp, #12
    89f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    89f4:	f884 8014 	strb.w	r8, [r4, #20]
    89f8:	e7f7      	b.n	89ea <read_type_cb+0x32>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    89fa:	68a0      	ldr	r0, [r4, #8]
    89fc:	f013 ff90 	bl	1c920 <net_buf_frag_last>
    8a00:	2102      	movs	r1, #2
    8a02:	3008      	adds	r0, #8
    8a04:	f014 f880 	bl	1cb08 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8a08:	4b13      	ldr	r3, [pc, #76]	; (8a58 <read_type_cb+0xa0>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8a0a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8a0c:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    8a0e:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8a12:	4639      	mov	r1, r7
    8a14:	9300      	str	r3, [sp, #0]
    8a16:	9401      	str	r4, [sp, #4]
    8a18:	462b      	mov	r3, r5
    8a1a:	4630      	mov	r0, r6
    8a1c:	f01c f985 	bl	24d2a <att_chan_read>
	if (read < 0) {
    8a20:	2800      	cmp	r0, #0
    8a22:	da07      	bge.n	8a34 <read_type_cb+0x7c>
	if (err < 0 && err >= -0xff) {
    8a24:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    8a28:	bf26      	itte	cs
    8a2a:	4240      	negcs	r0, r0
    8a2c:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    8a2e:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    8a30:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8a32:	e7db      	b.n	89ec <read_type_cb+0x34>
	if (!data->item) {
    8a34:	6923      	ldr	r3, [r4, #16]
    8a36:	2b00      	cmp	r3, #0
    8a38:	d0d7      	beq.n	89ea <read_type_cb+0x32>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8a3a:	68a0      	ldr	r0, [r4, #8]
    8a3c:	f01c f8f4 	bl	24c28 <net_buf_frags_len>
    8a40:	f8b6 505e 	ldrh.w	r5, [r6, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8a44:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8a46:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8a48:	7818      	ldrb	r0, [r3, #0]
    8a4a:	4285      	cmp	r5, r0
    8a4c:	bf94      	ite	ls
    8a4e:	2500      	movls	r5, #0
    8a50:	2501      	movhi	r5, #1
    8a52:	e7cb      	b.n	89ec <read_type_cb+0x34>
		return BT_GATT_ITER_CONTINUE;
    8a54:	2501      	movs	r5, #1
    8a56:	e7c9      	b.n	89ec <read_type_cb+0x34>
    8a58:	00024c45 	.word	0x00024c45

00008a5c <find_type_cb>:
{
    8a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    8a60:	f8d2 8000 	ldr.w	r8, [r2]
{
    8a64:	b093      	sub	sp, #76	; 0x4c
    8a66:	4607      	mov	r7, r0
    8a68:	460d      	mov	r5, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8a6a:	2600      	movs	r6, #0
    8a6c:	f642 0301 	movw	r3, #10241	; 0x2801
    8a70:	a902      	add	r1, sp, #8
    8a72:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    8a74:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8a78:	f88d 6008 	strb.w	r6, [sp, #8]
{
    8a7c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8a7e:	f8ad 300a 	strh.w	r3, [sp, #10]
    8a82:	f01b fdc7 	bl	24614 <bt_uuid_cmp>
    8a86:	2800      	cmp	r0, #0
    8a88:	d061      	beq.n	8b4e <find_type_cb+0xf2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    8a8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8a8e:	a903      	add	r1, sp, #12
    8a90:	6838      	ldr	r0, [r7, #0]
    8a92:	f88d 600c 	strb.w	r6, [sp, #12]
    8a96:	f8ad 300e 	strh.w	r3, [sp, #14]
    8a9a:	f01b fdbb 	bl	24614 <bt_uuid_cmp>
    8a9e:	b138      	cbz	r0, 8ab0 <find_type_cb+0x54>
		if (data->group &&
    8aa0:	68a3      	ldr	r3, [r4, #8]
    8aa2:	b11b      	cbz	r3, 8aac <find_type_cb+0x50>
    8aa4:	885a      	ldrh	r2, [r3, #2]
    8aa6:	42aa      	cmp	r2, r5
    8aa8:	d200      	bcs.n	8aac <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    8aaa:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8aac:	2001      	movs	r0, #1
    8aae:	e009      	b.n	8ac4 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    8ab0:	6861      	ldr	r1, [r4, #4]
    8ab2:	4608      	mov	r0, r1
    8ab4:	f01c f8b8 	bl	24c28 <net_buf_frags_len>
    8ab8:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
    8abc:	1a18      	subs	r0, r3, r0
    8abe:	2803      	cmp	r0, #3
    8ac0:	d803      	bhi.n	8aca <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    8ac2:	2000      	movs	r0, #0
}
    8ac4:	b013      	add	sp, #76	; 0x4c
    8ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    8aca:	4608      	mov	r0, r1
    8acc:	f013 ff28 	bl	1c920 <net_buf_frag_last>
    8ad0:	4606      	mov	r6, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    8ad2:	6860      	ldr	r0, [r4, #4]
    8ad4:	f01c f8a8 	bl	24c28 <net_buf_frags_len>
    8ad8:	f8b8 a05e 	ldrh.w	sl, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    8adc:	f106 0b08 	add.w	fp, r6, #8
    8ae0:	ebaa 0a00 	sub.w	sl, sl, r0
    8ae4:	4658      	mov	r0, fp
    8ae6:	f01f fa3a 	bl	27f5e <net_buf_simple_tailroom>
    8aea:	4582      	cmp	sl, r0
    8aec:	d232      	bcs.n	8b54 <find_type_cb+0xf8>
    8aee:	6860      	ldr	r0, [r4, #4]
    8af0:	f01c f89a 	bl	24c28 <net_buf_frags_len>
    8af4:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
    8af8:	1a18      	subs	r0, r3, r0
	if (!len) {
    8afa:	b970      	cbnz	r0, 8b1a <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    8afc:	6863      	ldr	r3, [r4, #4]
    8afe:	7998      	ldrb	r0, [r3, #6]
    8b00:	f013 fc9e 	bl	1c440 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    8b04:	2200      	movs	r2, #0
    8b06:	2300      	movs	r3, #0
    8b08:	f01f f9d4 	bl	27eb4 <net_buf_alloc_fixed>
		if (!frag) {
    8b0c:	4606      	mov	r6, r0
    8b0e:	2800      	cmp	r0, #0
    8b10:	d0d7      	beq.n	8ac2 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    8b12:	4601      	mov	r1, r0
    8b14:	6860      	ldr	r0, [r4, #4]
    8b16:	f013 ff43 	bl	1c9a0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    8b1a:	2300      	movs	r3, #0
    8b1c:	9300      	str	r3, [sp, #0]
    8b1e:	2310      	movs	r3, #16
    8b20:	f8d7 8004 	ldr.w	r8, [r7, #4]
    8b24:	4639      	mov	r1, r7
    8b26:	eb0d 0203 	add.w	r2, sp, r3
    8b2a:	4648      	mov	r0, r9
    8b2c:	47c0      	blx	r8
	if (read < 0) {
    8b2e:	1e07      	subs	r7, r0, #0
    8b30:	db0d      	blt.n	8b4e <find_type_cb+0xf2>
	if (read != data->value_len) {
    8b32:	7c22      	ldrb	r2, [r4, #16]
    8b34:	68e0      	ldr	r0, [r4, #12]
    8b36:	42ba      	cmp	r2, r7
    8b38:	d02b      	beq.n	8b92 <find_type_cb+0x136>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    8b3a:	4601      	mov	r1, r0
    8b3c:	a80d      	add	r0, sp, #52	; 0x34
    8b3e:	f01b fd93 	bl	24668 <bt_uuid_create>
    8b42:	b958      	cbnz	r0, 8b5c <find_type_cb+0x100>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    8b44:	7c22      	ldrb	r2, [r4, #16]
    8b46:	4815      	ldr	r0, [pc, #84]	; (8b9c <find_type_cb+0x140>)
    8b48:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unable to create UUID: size %d", read);
    8b4a:	f019 f9be 	bl	21eca <printk>
	data->group = NULL;
    8b4e:	2300      	movs	r3, #0
    8b50:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    8b52:	e7ab      	b.n	8aac <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    8b54:	4658      	mov	r0, fp
    8b56:	f01f fa02 	bl	27f5e <net_buf_simple_tailroom>
    8b5a:	e7ce      	b.n	8afa <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    8b5c:	b2fa      	uxtb	r2, r7
    8b5e:	a904      	add	r1, sp, #16
    8b60:	a808      	add	r0, sp, #32
    8b62:	f01b fd81 	bl	24668 <bt_uuid_create>
    8b66:	b918      	cbnz	r0, 8b70 <find_type_cb+0x114>
			BT_WARN("Unable to create UUID: size %d", read);
    8b68:	463a      	mov	r2, r7
    8b6a:	2157      	movs	r1, #87	; 0x57
    8b6c:	480c      	ldr	r0, [pc, #48]	; (8ba0 <find_type_cb+0x144>)
    8b6e:	e7ec      	b.n	8b4a <find_type_cb+0xee>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    8b70:	a908      	add	r1, sp, #32
    8b72:	a80d      	add	r0, sp, #52	; 0x34
    8b74:	f01b fd4e 	bl	24614 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    8b78:	2800      	cmp	r0, #0
    8b7a:	d1e8      	bne.n	8b4e <find_type_cb+0xf2>
	data->err = 0x00;
    8b7c:	2300      	movs	r3, #0
    8b7e:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    8b80:	2104      	movs	r1, #4
    8b82:	f106 0008 	add.w	r0, r6, #8
    8b86:	f013 ffbf 	bl	1cb08 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    8b8a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    8b8c:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8b8e:	8045      	strh	r5, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    8b90:	e78c      	b.n	8aac <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    8b92:	a904      	add	r1, sp, #16
    8b94:	f01b fab4 	bl	24100 <memcmp>
    8b98:	e7ee      	b.n	8b78 <find_type_cb+0x11c>
    8b9a:	bf00      	nop
    8b9c:	0002b9f2 	.word	0x0002b9f2
    8ba0:	0002ba16 	.word	0x0002ba16

00008ba4 <chan_send>:
{
    8ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8ba8:	688b      	ldr	r3, [r1, #8]
    8baa:	781b      	ldrb	r3, [r3, #0]
    8bac:	2bd2      	cmp	r3, #210	; 0xd2
{
    8bae:	4605      	mov	r5, r0
    8bb0:	460c      	mov	r4, r1
    8bb2:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8bb4:	d110      	bne.n	8bd8 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
    8bb6:	6803      	ldr	r3, [r0, #0]
    8bb8:	6818      	ldr	r0, [r3, #0]
    8bba:	f01c fe29 	bl	25810 <bt_smp_sign>
		if (err) {
    8bbe:	4606      	mov	r6, r0
    8bc0:	b150      	cbz	r0, 8bd8 <chan_send+0x34>
			BT_ERR("Error signing data");
    8bc2:	2145      	movs	r1, #69	; 0x45
    8bc4:	4824      	ldr	r0, [pc, #144]	; (8c58 <chan_send+0xb4>)
    8bc6:	f019 f980 	bl	21eca <printk>
		net_buf_unref(buf);
    8bca:	4620      	mov	r0, r4
    8bcc:	f013 fe4c 	bl	1c868 <net_buf_unref>
}
    8bd0:	4630      	mov	r0, r6
    8bd2:	b003      	add	sp, #12
    8bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    8bd8:	f104 0008 	add.w	r0, r4, #8
    8bdc:	f01f f9bb 	bl	27f56 <net_buf_simple_headroom>
	state->len = buf->len;
    8be0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8be4:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    8be6:	f1b9 0f00 	cmp.w	r9, #0
    8bea:	d10a      	bne.n	8c02 <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
    8bec:	68a3      	ldr	r3, [r4, #8]
    8bee:	7818      	ldrb	r0, [r3, #0]
    8bf0:	f01c f83a 	bl	24c68 <att_op_get_type>
    8bf4:	3801      	subs	r0, #1
    8bf6:	b2c0      	uxtb	r0, r0
    8bf8:	2804      	cmp	r0, #4
    8bfa:	bf9c      	itt	ls
    8bfc:	4b17      	ldrls	r3, [pc, #92]	; (8c5c <chan_send+0xb8>)
    8bfe:	f853 9020 	ldrls.w	r9, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8c02:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    8c04:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8c08:	4620      	mov	r0, r4
    8c0a:	681e      	ldr	r6, [r3, #0]
    8c0c:	f013 fe70 	bl	1c8f0 <net_buf_ref>
    8c10:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
    8c14:	4b12      	ldr	r3, [pc, #72]	; (8c60 <chan_send+0xbc>)
    8c16:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8c18:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    8c1a:	d019      	beq.n	8c50 <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
    8c1c:	4b11      	ldr	r3, [pc, #68]	; (8c64 <chan_send+0xc0>)
    8c1e:	4299      	cmp	r1, r3
    8c20:	d018      	beq.n	8c54 <chan_send+0xb0>
		return att_sent;
    8c22:	f8df c054 	ldr.w	ip, [pc, #84]	; 8c78 <chan_send+0xd4>
    8c26:	4b10      	ldr	r3, [pc, #64]	; (8c68 <chan_send+0xc4>)
    8c28:	4810      	ldr	r0, [pc, #64]	; (8c6c <chan_send+0xc8>)
    8c2a:	4561      	cmp	r1, ip
    8c2c:	bf18      	it	ne
    8c2e:	4603      	movne	r3, r0
				&chan->chan.chan);
    8c30:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8c32:	4630      	mov	r0, r6
    8c34:	9500      	str	r5, [sp, #0]
    8c36:	2104      	movs	r1, #4
    8c38:	f01b ffa1 	bl	24b7e <bt_l2cap_send_cb>
	if (!err) {
    8c3c:	4606      	mov	r6, r0
    8c3e:	2800      	cmp	r0, #0
    8c40:	d0c3      	beq.n	8bca <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
    8c42:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    8c44:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8c48:	fa13 f787 	uxtah	r7, r3, r7
    8c4c:	60a7      	str	r7, [r4, #8]
	buf->len = state->len;
    8c4e:	e7bf      	b.n	8bd0 <chan_send+0x2c>
		return att_rsp_sent;
    8c50:	4b07      	ldr	r3, [pc, #28]	; (8c70 <chan_send+0xcc>)
    8c52:	e7ed      	b.n	8c30 <chan_send+0x8c>
		return att_cfm_sent;
    8c54:	4b07      	ldr	r3, [pc, #28]	; (8c74 <chan_send+0xd0>)
    8c56:	e7eb      	b.n	8c30 <chan_send+0x8c>
    8c58:	0002b9da 	.word	0x0002b9da
    8c5c:	00029388 	.word	0x00029388
    8c60:	00024f31 	.word	0x00024f31
    8c64:	00024f4d 	.word	0x00024f4d
    8c68:	000088e5 	.word	0x000088e5
    8c6c:	00024c39 	.word	0x00024c39
    8c70:	000088d5 	.word	0x000088d5
    8c74:	000088c5 	.word	0x000088c5
    8c78:	00008d81 	.word	0x00008d81

00008c7c <att_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    8c7c:	7a83      	ldrb	r3, [r0, #10]
    8c7e:	2b07      	cmp	r3, #7
{
    8c80:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    8c82:	d005      	beq.n	8c90 <att_get+0x14>
		BT_WARN("Not connected");
    8c84:	480d      	ldr	r0, [pc, #52]	; (8cbc <att_get+0x40>)
    8c86:	2157      	movs	r1, #87	; 0x57
		BT_WARN("ATT channel flagged as disconnected");
    8c88:	f019 f91f 	bl	21eca <printk>
		return NULL;
    8c8c:	2400      	movs	r4, #0
    8c8e:	e008      	b.n	8ca2 <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    8c90:	2104      	movs	r1, #4
    8c92:	f01b ff98 	bl	24bc6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8c96:	4604      	mov	r4, r0
    8c98:	b928      	cbnz	r0, 8ca6 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
    8c9a:	2145      	movs	r1, #69	; 0x45
    8c9c:	4808      	ldr	r0, [pc, #32]	; (8cc0 <att_get+0x44>)
    8c9e:	f019 f914 	bl	21eca <printk>
}
    8ca2:	4620      	mov	r0, r4
    8ca4:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    8ca6:	2102      	movs	r1, #2
    8ca8:	30c0      	adds	r0, #192	; 0xc0
    8caa:	f01c f82a 	bl	24d02 <atomic_test_bit>
    8cae:	b110      	cbz	r0, 8cb6 <att_get+0x3a>
		BT_WARN("ATT channel flagged as disconnected");
    8cb0:	2157      	movs	r1, #87	; 0x57
    8cb2:	4804      	ldr	r0, [pc, #16]	; (8cc4 <att_get+0x48>)
    8cb4:	e7e8      	b.n	8c88 <att_get+0xc>
	return att_chan->att;
    8cb6:	f854 4c08 	ldr.w	r4, [r4, #-8]
    8cba:	e7f2      	b.n	8ca2 <att_get+0x26>
    8cbc:	0002b7dc 	.word	0x0002b7dc
    8cc0:	0002b7ef 	.word	0x0002b7ef
    8cc4:	0002b80f 	.word	0x0002b80f

00008cc8 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    8cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8cca:	2300      	movs	r3, #0
{
    8ccc:	4607      	mov	r7, r0
    8cce:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8cd0:	2200      	movs	r2, #0
    8cd2:	4669      	mov	r1, sp
    8cd4:	4825      	ldr	r0, [pc, #148]	; (8d6c <bt_att_accept+0xa4>)
    8cd6:	f015 fc2d 	bl	1e534 <k_mem_slab_alloc>
    8cda:	4605      	mov	r5, r0
    8cdc:	b148      	cbz	r0, 8cf2 <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
    8cde:	4824      	ldr	r0, [pc, #144]	; (8d70 <bt_att_accept+0xa8>)
    8ce0:	463a      	mov	r2, r7
    8ce2:	2145      	movs	r1, #69	; 0x45
		BT_ERR("No available ATT channel for conn %p", att->conn);
    8ce4:	f019 f8f1 	bl	21eca <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    8ce8:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    8cec:	4628      	mov	r0, r5
    8cee:	b003      	add	sp, #12
    8cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    8cf2:	4601      	mov	r1, r0
    8cf4:	2230      	movs	r2, #48	; 0x30
    8cf6:	9800      	ldr	r0, [sp, #0]
    8cf8:	f01b fa53 	bl	241a2 <memset>
	att->conn = conn;
    8cfc:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8cfe:	481d      	ldr	r0, [pc, #116]	; (8d74 <bt_att_accept+0xac>)
	list->tail = NULL;
    8d00:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
    8d02:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
    8d06:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    8d0a:	2200      	movs	r2, #0
    8d0c:	2300      	movs	r3, #0
    8d0e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    8d10:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8d12:	f015 fc0f 	bl	1e534 <k_mem_slab_alloc>
    8d16:	4605      	mov	r5, r0
    8d18:	b118      	cbz	r0, 8d22 <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
    8d1a:	6822      	ldr	r2, [r4, #0]
    8d1c:	4816      	ldr	r0, [pc, #88]	; (8d78 <bt_att_accept+0xb0>)
    8d1e:	2145      	movs	r1, #69	; 0x45
    8d20:	e7e0      	b.n	8ce4 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
    8d22:	4601      	mov	r1, r0
    8d24:	f44f 72a0 	mov.w	r2, #320	; 0x140
    8d28:	9801      	ldr	r0, [sp, #4]
    8d2a:	f01b fa3a 	bl	241a2 <memset>
	chan->chan.chan.ops = &ops;
    8d2e:	9801      	ldr	r0, [sp, #4]
    8d30:	4b12      	ldr	r3, [pc, #72]	; (8d7c <bt_att_accept+0xb4>)
    8d32:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    8d34:	30d0      	adds	r0, #208	; 0xd0
    8d36:	f01f fc9d 	bl	28674 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    8d3a:	9801      	ldr	r0, [sp, #4]
    8d3c:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
    8d40:	2208      	movs	r2, #8
    8d42:	4611      	mov	r1, r2
    8d44:	f01f fcfc 	bl	28740 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8d48:	9b01      	ldr	r3, [sp, #4]
    8d4a:	f3bf 8f5b 	dmb	ish
    8d4e:	33c8      	adds	r3, #200	; 0xc8
    8d50:	e853 2f00 	ldrex	r2, [r3]
    8d54:	e843 5100 	strex	r1, r5, [r3]
    8d58:	2900      	cmp	r1, #0
    8d5a:	d1f9      	bne.n	8d50 <bt_att_accept+0x88>
    8d5c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    8d60:	9b01      	ldr	r3, [sp, #4]
    8d62:	f843 4b08 	str.w	r4, [r3], #8
	*ch = &chan->chan.chan;
    8d66:	6033      	str	r3, [r6, #0]
	return 0;
    8d68:	e7c0      	b.n	8cec <bt_att_accept+0x24>
    8d6a:	bf00      	nop
    8d6c:	20000ea0 	.word	0x20000ea0
    8d70:	0002b865 	.word	0x0002b865
    8d74:	20000ebc 	.word	0x20000ebc
    8d78:	0002b88f 	.word	0x0002b88f
    8d7c:	2000062c 	.word	0x2000062c

00008d80 <chan_req_sent>:
	if (chan->req) {
    8d80:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    8d84:	b13b      	cbz	r3, 8d96 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8d86:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
    8d8a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    8d8e:	2300      	movs	r3, #0
    8d90:	4801      	ldr	r0, [pc, #4]	; (8d98 <chan_req_sent+0x18>)
    8d92:	f017 b9e1 	b.w	20158 <k_delayed_work_submit_to_queue>
}
    8d96:	4770      	bx	lr
    8d98:	20002170 	.word	0x20002170

00008d9c <bt_att_chan_send_rsp.constprop.24>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    8d9c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    8d9e:	4a07      	ldr	r2, [pc, #28]	; (8dbc <bt_att_chan_send_rsp.constprop.24+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    8da0:	4604      	mov	r4, r0
    8da2:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    8da4:	f7ff fefe 	bl	8ba4 <chan_send>
	if (err) {
    8da8:	b130      	cbz	r0, 8db8 <bt_att_chan_send_rsp.constprop.24+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    8daa:	4629      	mov	r1, r5
    8dac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
    8db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    8db4:	f013 bd2a 	b.w	1c80c <net_buf_put>
}
    8db8:	bd38      	pop	{r3, r4, r5, pc}
    8dba:	bf00      	nop
    8dbc:	00024f31 	.word	0x00024f31

00008dc0 <bt_att_connected>:
{
    8dc0:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8dc2:	2104      	movs	r1, #4
{
    8dc4:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8dc6:	6800      	ldr	r0, [r0, #0]
    8dc8:	f01b fef2 	bl	24bb0 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
    8dcc:	4605      	mov	r5, r0
    8dce:	b950      	cbnz	r0, 8de6 <bt_att_connected+0x26>
    8dd0:	4918      	ldr	r1, [pc, #96]	; (8e34 <bt_att_connected+0x74>)
    8dd2:	4819      	ldr	r0, [pc, #100]	; (8e38 <bt_att_connected+0x78>)
    8dd4:	f640 2248 	movw	r2, #2632	; 0xa48
    8dd8:	f019 f877 	bl	21eca <printk>
    8ddc:	f640 2148 	movw	r1, #2632	; 0xa48
    8de0:	4814      	ldr	r0, [pc, #80]	; (8e34 <bt_att_connected+0x74>)
    8de2:	f019 fb24 	bl	2242e <assert_post_action>
	struct bt_att *att = att_chan->att;
    8de6:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    8dea:	6aab      	ldr	r3, [r5, #40]	; 0x28
    8dec:	b91b      	cbnz	r3, 8df6 <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
    8dee:	f105 000c 	add.w	r0, r5, #12
    8df2:	f01f fc3f 	bl	28674 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    8df6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
    8df8:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
    8dfc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
    8dfe:	f504 739a 	add.w	r3, r4, #308	; 0x134
	list->head = node;
    8e02:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
    8e04:	b902      	cbnz	r2, 8e08 <bt_att_connected+0x48>
	list->tail = node;
    8e06:	62eb      	str	r3, [r5, #44]	; 0x2c
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    8e08:	2103      	movs	r1, #3
    8e0a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    8e0e:	f01b ff78 	bl	24d02 <atomic_test_bit>
    8e12:	b920      	cbnz	r0, 8e1e <bt_att_connected+0x5e>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8e14:	2317      	movs	r3, #23
    8e16:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8e1a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    8e1e:	2230      	movs	r2, #48	; 0x30
    8e20:	2100      	movs	r1, #0
    8e22:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    8e26:	f01b f9bc 	bl	241a2 <memset>
    8e2a:	4b04      	ldr	r3, [pc, #16]	; (8e3c <bt_att_connected+0x7c>)
    8e2c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
    8e30:	bd38      	pop	{r3, r4, r5, pc}
    8e32:	bf00      	nop
    8e34:	0002b8e3 	.word	0x0002b8e3
    8e38:	0002a026 	.word	0x0002a026
    8e3c:	00009769 	.word	0x00009769

00008e40 <bt_att_chan_req_send>:
{
    8e40:	b570      	push	{r4, r5, r6, lr}
    8e42:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
    8e44:	4604      	mov	r4, r0
    8e46:	b950      	cbnz	r0, 8e5e <bt_att_chan_req_send+0x1e>
    8e48:	4924      	ldr	r1, [pc, #144]	; (8edc <bt_att_chan_req_send+0x9c>)
    8e4a:	4825      	ldr	r0, [pc, #148]	; (8ee0 <bt_att_chan_req_send+0xa0>)
    8e4c:	f240 2237 	movw	r2, #567	; 0x237
    8e50:	f019 f83b 	bl	21eca <printk>
    8e54:	f240 2137 	movw	r1, #567	; 0x237
    8e58:	4820      	ldr	r0, [pc, #128]	; (8edc <bt_att_chan_req_send+0x9c>)
    8e5a:	f019 fae8 	bl	2242e <assert_post_action>
	__ASSERT_NO_MSG(req);
    8e5e:	b955      	cbnz	r5, 8e76 <bt_att_chan_req_send+0x36>
    8e60:	491e      	ldr	r1, [pc, #120]	; (8edc <bt_att_chan_req_send+0x9c>)
    8e62:	481f      	ldr	r0, [pc, #124]	; (8ee0 <bt_att_chan_req_send+0xa0>)
    8e64:	f44f 720e 	mov.w	r2, #568	; 0x238
    8e68:	f019 f82f 	bl	21eca <printk>
    8e6c:	f44f 710e 	mov.w	r1, #568	; 0x238
    8e70:	481a      	ldr	r0, [pc, #104]	; (8edc <bt_att_chan_req_send+0x9c>)
    8e72:	f019 fadc 	bl	2242e <assert_post_action>
	__ASSERT_NO_MSG(req->func);
    8e76:	686b      	ldr	r3, [r5, #4]
    8e78:	b953      	cbnz	r3, 8e90 <bt_att_chan_req_send+0x50>
    8e7a:	4918      	ldr	r1, [pc, #96]	; (8edc <bt_att_chan_req_send+0x9c>)
    8e7c:	4818      	ldr	r0, [pc, #96]	; (8ee0 <bt_att_chan_req_send+0xa0>)
    8e7e:	f240 2239 	movw	r2, #569	; 0x239
    8e82:	f019 f822 	bl	21eca <printk>
    8e86:	f240 2139 	movw	r1, #569	; 0x239
    8e8a:	4814      	ldr	r0, [pc, #80]	; (8edc <bt_att_chan_req_send+0x9c>)
    8e8c:	f019 facf 	bl	2242e <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
    8e90:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    8e94:	b153      	cbz	r3, 8eac <bt_att_chan_req_send+0x6c>
    8e96:	4911      	ldr	r1, [pc, #68]	; (8edc <bt_att_chan_req_send+0x9c>)
    8e98:	4811      	ldr	r0, [pc, #68]	; (8ee0 <bt_att_chan_req_send+0xa0>)
    8e9a:	f240 223a 	movw	r2, #570	; 0x23a
    8e9e:	f019 f814 	bl	21eca <printk>
    8ea2:	f240 213a 	movw	r1, #570	; 0x23a
    8ea6:	480d      	ldr	r0, [pc, #52]	; (8edc <bt_att_chan_req_send+0x9c>)
    8ea8:	f019 fac1 	bl	2242e <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
    8eac:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
    8eb0:	2200      	movs	r2, #0
    8eb2:	2300      	movs	r3, #0
    8eb4:	4630      	mov	r0, r6
    8eb6:	f016 ff1d 	bl	1fcf4 <z_impl_k_sem_take>
    8eba:	2800      	cmp	r0, #0
    8ebc:	db0a      	blt.n	8ed4 <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
    8ebe:	4620      	mov	r0, r4
    8ec0:	4629      	mov	r1, r5
    8ec2:	f01c f851 	bl	24f68 <chan_req_send>
	if (err < 0) {
    8ec6:	1e04      	subs	r4, r0, #0
    8ec8:	da02      	bge.n	8ed0 <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
    8eca:	4630      	mov	r0, r6
    8ecc:	f016 fed6 	bl	1fc7c <z_impl_k_sem_give>
}
    8ed0:	4620      	mov	r0, r4
    8ed2:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    8ed4:	f06f 040a 	mvn.w	r4, #10
    8ed8:	e7fa      	b.n	8ed0 <bt_att_chan_req_send+0x90>
    8eda:	bf00      	nop
    8edc:	0002b8e3 	.word	0x0002b8e3
    8ee0:	0002a026 	.word	0x0002a026

00008ee4 <att_write_cmd>:
{
    8ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ee6:	4604      	mov	r4, r0
    8ee8:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    8eea:	f101 0008 	add.w	r0, r1, #8
    8eee:	460d      	mov	r5, r1
    8ef0:	f01f f815 	bl	27f1e <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8ef4:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
    8ef6:	68af      	ldr	r7, [r5, #8]
    8ef8:	89ad      	ldrh	r5, [r5, #12]
    8efa:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8efc:	2100      	movs	r1, #0
    8efe:	6818      	ldr	r0, [r3, #0]
    8f00:	f01c fc3b 	bl	2577a <bt_gatt_change_aware>
    8f04:	b320      	cbz	r0, 8f50 <att_write_cmd+0x6c>
	if (!handle) {
    8f06:	b32e      	cbz	r6, 8f54 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
    8f08:	2218      	movs	r2, #24
    8f0a:	2100      	movs	r1, #0
    8f0c:	4668      	mov	r0, sp
    8f0e:	f01b f948 	bl	241a2 <memset>
	data.conn = chan->att->conn;
    8f12:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8f14:	4a10      	ldr	r2, [pc, #64]	; (8f58 <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
    8f16:	681b      	ldr	r3, [r3, #0]
    8f18:	9300      	str	r3, [sp, #0]
	data.req = req;
    8f1a:	2300      	movs	r3, #0
    8f1c:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
    8f20:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8f24:	2301      	movs	r3, #1
    8f26:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8f2a:	4631      	mov	r1, r6
    8f2c:	466b      	mov	r3, sp
    8f2e:	4630      	mov	r0, r6
	data.value = value;
    8f30:	9703      	str	r7, [sp, #12]
	data.len = len;
    8f32:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8f36:	f01b feed 	bl	24d14 <bt_gatt_foreach_attr>
	if (data.err) {
    8f3a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8f3e:	b923      	cbnz	r3, 8f4a <att_write_cmd+0x66>
	if (data.buf) {
    8f40:	9901      	ldr	r1, [sp, #4]
    8f42:	b111      	cbz	r1, 8f4a <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8f44:	4620      	mov	r0, r4
    8f46:	f7ff ff29 	bl	8d9c <bt_att_chan_send_rsp.constprop.24>
    8f4a:	2000      	movs	r0, #0
}
    8f4c:	b007      	add	sp, #28
    8f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8f50:	2012      	movs	r0, #18
    8f52:	e7fb      	b.n	8f4c <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
    8f54:	2001      	movs	r0, #1
    8f56:	e7f9      	b.n	8f4c <att_write_cmd+0x68>
    8f58:	00024ff9 	.word	0x00024ff9

00008f5c <bt_att_chan_create_pdu>:
{
    8f5c:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    8f5e:	1c53      	adds	r3, r2, #1
    8f60:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    8f64:	4293      	cmp	r3, r2
{
    8f66:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    8f68:	d906      	bls.n	8f78 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    8f6a:	2157      	movs	r1, #87	; 0x57
    8f6c:	4813      	ldr	r0, [pc, #76]	; (8fbc <bt_att_chan_create_pdu+0x60>)
    8f6e:	f018 ffac 	bl	21eca <printk>
		return NULL;
    8f72:	2400      	movs	r4, #0
}
    8f74:	4620      	mov	r0, r4
    8f76:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    8f78:	4608      	mov	r0, r1
    8f7a:	f01b fe75 	bl	24c68 <att_op_get_type>
    8f7e:	2802      	cmp	r0, #2
    8f80:	d001      	beq.n	8f86 <bt_att_chan_create_pdu+0x2a>
    8f82:	2804      	cmp	r0, #4
    8f84:	d10e      	bne.n	8fa4 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    8f86:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    8f8a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    8f8c:	2100      	movs	r1, #0
    8f8e:	4608      	mov	r0, r1
    8f90:	f01b fdf2 	bl	24b78 <bt_l2cap_create_pdu_timeout>
    8f94:	4604      	mov	r4, r0
	if (!buf) {
    8f96:	b950      	cbnz	r0, 8fae <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    8f98:	462a      	mov	r2, r5
    8f9a:	2145      	movs	r1, #69	; 0x45
    8f9c:	4808      	ldr	r0, [pc, #32]	; (8fc0 <bt_att_chan_create_pdu+0x64>)
    8f9e:	f018 ff94 	bl	21eca <printk>
		return NULL;
    8fa2:	e7e7      	b.n	8f74 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
    8fa4:	f04f 32ff 	mov.w	r2, #4294967295
    8fa8:	f04f 33ff 	mov.w	r3, #4294967295
    8fac:	e7ee      	b.n	8f8c <bt_att_chan_create_pdu+0x30>
	return net_buf_simple_add(&buf->b, len);
    8fae:	2101      	movs	r1, #1
    8fb0:	3008      	adds	r0, #8
    8fb2:	f013 fda9 	bl	1cb08 <net_buf_simple_add>
	hdr->code = op;
    8fb6:	7005      	strb	r5, [r0, #0]
	return buf;
    8fb8:	e7dc      	b.n	8f74 <bt_att_chan_create_pdu+0x18>
    8fba:	bf00      	nop
    8fbc:	0002b8b9 	.word	0x0002b8b9
    8fc0:	0002b6d7 	.word	0x0002b6d7

00008fc4 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    8fc4:	898b      	ldrh	r3, [r1, #12]
{
    8fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fca:	4604      	mov	r4, r0
    8fcc:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    8fce:	b933      	cbnz	r3, 8fde <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
    8fd0:	483c      	ldr	r0, [pc, #240]	; (90c4 <bt_att_recv+0x100>)
    8fd2:	2145      	movs	r1, #69	; 0x45
			BT_WARN("Ignoring unexpected indication");
    8fd4:	f018 ff79 	bl	21eca <printk>
}
    8fd8:	2000      	movs	r0, #0
    8fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    8fde:	2101      	movs	r1, #1
    8fe0:	f108 0008 	add.w	r0, r8, #8
    8fe4:	f013 fd72 	bl	1cacc <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    8fe8:	f854 3c08 	ldr.w	r3, [r4, #-8]
    8fec:	4605      	mov	r5, r0
    8fee:	2b00      	cmp	r3, #0
    8ff0:	d0f2      	beq.n	8fd8 <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
    8ff2:	4935      	ldr	r1, [pc, #212]	; (90c8 <bt_att_recv+0x104>)
    8ff4:	7802      	ldrb	r2, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    8ff6:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8ffa:	2300      	movs	r3, #0
    8ffc:	4608      	mov	r0, r1
		if (hdr->code == handlers[i].op) {
    8ffe:	f811 7033 	ldrb.w	r7, [r1, r3, lsl #3]
    9002:	4297      	cmp	r7, r2
    9004:	d117      	bne.n	9036 <bt_att_recv+0x72>
		if (handler->type == ATT_REQUEST &&
    9006:	00db      	lsls	r3, r3, #3
    9008:	4419      	add	r1, r3
    900a:	788f      	ldrb	r7, [r1, #2]
    900c:	2f01      	cmp	r7, #1
    900e:	d127      	bne.n	9060 <bt_att_recv+0x9c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9010:	f3bf 8f5b 	dmb	ish
    9014:	34c0      	adds	r4, #192	; 0xc0
    9016:	e854 2f00 	ldrex	r2, [r4]
    901a:	f042 0101 	orr.w	r1, r2, #1
    901e:	e844 1c00 	strex	ip, r1, [r4]
    9022:	f1bc 0f00 	cmp.w	ip, #0
    9026:	d1f6      	bne.n	9016 <bt_att_recv+0x52>
    9028:	f3bf 8f5b 	dmb	ish
    902c:	07d1      	lsls	r1, r2, #31
    902e:	d52c      	bpl.n	908a <bt_att_recv+0xc6>
			BT_WARN("Ignoring unexpected request");
    9030:	2157      	movs	r1, #87	; 0x57
    9032:	4826      	ldr	r0, [pc, #152]	; (90cc <bt_att_recv+0x108>)
    9034:	e7ce      	b.n	8fd4 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9036:	3301      	adds	r3, #1
    9038:	2b0d      	cmp	r3, #13
    903a:	d1e0      	bne.n	8ffe <bt_att_recv+0x3a>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    903c:	2157      	movs	r1, #87	; 0x57
    903e:	4824      	ldr	r0, [pc, #144]	; (90d0 <bt_att_recv+0x10c>)
    9040:	f018 ff43 	bl	21eca <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    9044:	7829      	ldrb	r1, [r5, #0]
    9046:	4608      	mov	r0, r1
    9048:	f01b fe0e 	bl	24c68 <att_op_get_type>
    904c:	2800      	cmp	r0, #0
    904e:	d0c3      	beq.n	8fd8 <bt_att_recv+0x14>
	if (!req) {
    9050:	2900      	cmp	r1, #0
    9052:	d0c1      	beq.n	8fd8 <bt_att_recv+0x14>
    9054:	2306      	movs	r3, #6
    9056:	2200      	movs	r2, #0
    9058:	4630      	mov	r0, r6
    905a:	f01c f865 	bl	25128 <send_err_rsp.part.12>
    905e:	e7bb      	b.n	8fd8 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
    9060:	2f05      	cmp	r7, #5
    9062:	d112      	bne.n	908a <bt_att_recv+0xc6>
    9064:	f3bf 8f5b 	dmb	ish
    9068:	34c0      	adds	r4, #192	; 0xc0
    906a:	e854 2f00 	ldrex	r2, [r4]
    906e:	f042 0102 	orr.w	r1, r2, #2
    9072:	e844 1c00 	strex	ip, r1, [r4]
    9076:	f1bc 0f00 	cmp.w	ip, #0
    907a:	d1f6      	bne.n	906a <bt_att_recv+0xa6>
    907c:	f3bf 8f5b 	dmb	ish
    9080:	0792      	lsls	r2, r2, #30
    9082:	d502      	bpl.n	908a <bt_att_recv+0xc6>
			BT_WARN("Ignoring unexpected indication");
    9084:	2157      	movs	r1, #87	; 0x57
    9086:	4813      	ldr	r0, [pc, #76]	; (90d4 <bt_att_recv+0x110>)
    9088:	e7a4      	b.n	8fd4 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
    908a:	4403      	add	r3, r0
    908c:	f8b8 200c 	ldrh.w	r2, [r8, #12]
    9090:	7859      	ldrb	r1, [r3, #1]
    9092:	4291      	cmp	r1, r2
    9094:	d908      	bls.n	90a8 <bt_att_recv+0xe4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    9096:	782b      	ldrb	r3, [r5, #0]
    9098:	480f      	ldr	r0, [pc, #60]	; (90d8 <bt_att_recv+0x114>)
    909a:	2145      	movs	r1, #69	; 0x45
    909c:	f018 ff15 	bl	21eca <printk>
	if (handler->type == ATT_REQUEST && err) {
    90a0:	2f01      	cmp	r7, #1
    90a2:	d199      	bne.n	8fd8 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
    90a4:	2304      	movs	r3, #4
    90a6:	e008      	b.n	90ba <bt_att_recv+0xf6>
		err = handler->func(att_chan, buf);
    90a8:	685b      	ldr	r3, [r3, #4]
    90aa:	4641      	mov	r1, r8
    90ac:	4630      	mov	r0, r6
    90ae:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    90b0:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    90b2:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    90b4:	d190      	bne.n	8fd8 <bt_att_recv+0x14>
    90b6:	2800      	cmp	r0, #0
    90b8:	d08e      	beq.n	8fd8 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
    90ba:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    90bc:	2900      	cmp	r1, #0
    90be:	d08b      	beq.n	8fd8 <bt_att_recv+0x14>
    90c0:	e7c9      	b.n	9056 <bt_att_recv+0x92>
    90c2:	bf00      	nop
    90c4:	0002b932 	.word	0x0002b932
    90c8:	0002939c 	.word	0x0002939c
    90cc:	0002b952 	.word	0x0002b952
    90d0:	0002b9bb 	.word	0x0002b9bb
    90d4:	0002b973 	.word	0x0002b973
    90d8:	0002b997 	.word	0x0002b997

000090dc <att_write_req>:
{
    90dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    90e0:	4605      	mov	r5, r0
    90e2:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    90e4:	f101 0008 	add.w	r0, r1, #8
    90e8:	460c      	mov	r4, r1
    90ea:	f01e ff18 	bl	27f1e <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    90ee:	682b      	ldr	r3, [r5, #0]
			     handle, 0, buf->data, buf->len);
    90f0:	f8d4 9008 	ldr.w	r9, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    90f4:	89a4      	ldrh	r4, [r4, #12]
    90f6:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    90f8:	2101      	movs	r1, #1
    90fa:	6818      	ldr	r0, [r3, #0]
    90fc:	f01c fb3d 	bl	2577a <bt_gatt_change_aware>
    9100:	2800      	cmp	r0, #0
    9102:	d03f      	beq.n	9184 <att_write_req+0xa8>
	if (!handle) {
    9104:	2e00      	cmp	r6, #0
    9106:	d03f      	beq.n	9188 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
    9108:	2218      	movs	r2, #24
    910a:	2100      	movs	r1, #0
    910c:	4668      	mov	r0, sp
    910e:	f01b f848 	bl	241a2 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    9112:	2200      	movs	r2, #0
    9114:	2113      	movs	r1, #19
    9116:	4628      	mov	r0, r5
    9118:	f7ff ff20 	bl	8f5c <bt_att_chan_create_pdu>
    911c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    911e:	b378      	cbz	r0, 9180 <att_write_req+0xa4>
	data.conn = chan->att->conn;
    9120:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9122:	4a1a      	ldr	r2, [pc, #104]	; (918c <att_write_req+0xb0>)
	data.conn = chan->att->conn;
    9124:	681b      	ldr	r3, [r3, #0]
    9126:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9128:	2301      	movs	r3, #1
    912a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
    912e:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    9132:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9134:	466b      	mov	r3, sp
    9136:	4631      	mov	r1, r6
    9138:	4630      	mov	r0, r6
	data.len = len;
    913a:	f8ad 4010 	strh.w	r4, [sp, #16]
	data.req = req;
    913e:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    9142:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    9146:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    914a:	f01b fde3 	bl	24d14 <bt_gatt_foreach_attr>
	if (data.err) {
    914e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9152:	b174      	cbz	r4, 9172 <att_write_req+0x96>
			net_buf_unref(data.buf);
    9154:	9801      	ldr	r0, [sp, #4]
    9156:	f013 fb87 	bl	1c868 <net_buf_unref>
	if (!req) {
    915a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    915e:	4632      	mov	r2, r6
    9160:	4641      	mov	r1, r8
    9162:	4628      	mov	r0, r5
    9164:	f01b ffe0 	bl	25128 <send_err_rsp.part.12>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    9168:	463c      	mov	r4, r7
}
    916a:	4620      	mov	r0, r4
    916c:	b007      	add	sp, #28
    916e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    9172:	9901      	ldr	r1, [sp, #4]
    9174:	2900      	cmp	r1, #0
    9176:	d0f8      	beq.n	916a <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9178:	4628      	mov	r0, r5
    917a:	f7ff fe0f 	bl	8d9c <bt_att_chan_send_rsp.constprop.24>
    917e:	e7f4      	b.n	916a <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
    9180:	240e      	movs	r4, #14
    9182:	e7f2      	b.n	916a <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9184:	2412      	movs	r4, #18
    9186:	e7f0      	b.n	916a <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
    9188:	2401      	movs	r4, #1
    918a:	e7ee      	b.n	916a <att_write_req+0x8e>
    918c:	00024ff9 	.word	0x00024ff9

00009190 <bt_att_create_pdu>:
{
    9190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9192:	460f      	mov	r7, r1
    9194:	4616      	mov	r6, r2
	att = att_get(conn);
    9196:	f7ff fd71 	bl	8c7c <att_get>
	if (!att) {
    919a:	b198      	cbz	r0, 91c4 <bt_att_create_pdu+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    919c:	6a83      	ldr	r3, [r0, #40]	; 0x28
	return list->head;
    919e:	1c75      	adds	r5, r6, #1
    91a0:	b15b      	cbz	r3, 91ba <bt_att_create_pdu+0x2a>
    91a2:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
    91a6:	d008      	beq.n	91ba <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    91a8:	681b      	ldr	r3, [r3, #0]
    91aa:	b10b      	cbz	r3, 91b0 <bt_att_create_pdu+0x20>
    91ac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    91b0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    91b4:	4295      	cmp	r5, r2
    91b6:	d907      	bls.n	91c8 <bt_att_create_pdu+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    91b8:	b963      	cbnz	r3, 91d4 <bt_att_create_pdu+0x44>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    91ba:	462a      	mov	r2, r5
    91bc:	2157      	movs	r1, #87	; 0x57
    91be:	4809      	ldr	r0, [pc, #36]	; (91e4 <bt_att_create_pdu+0x54>)
    91c0:	f018 fe83 	bl	21eca <printk>
}
    91c4:	2000      	movs	r0, #0
    91c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    91c8:	4632      	mov	r2, r6
    91ca:	4639      	mov	r1, r7
}
    91cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    91d0:	f7ff bec4 	b.w	8f5c <bt_att_chan_create_pdu>
    91d4:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    91d8:	b10c      	cbz	r4, 91de <bt_att_create_pdu+0x4e>
    91da:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
    91de:	4618      	mov	r0, r3
    91e0:	4623      	mov	r3, r4
    91e2:	e7e5      	b.n	91b0 <bt_att_create_pdu+0x20>
    91e4:	0002b912 	.word	0x0002b912

000091e8 <att_read_group_req>:
{
    91e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    91ec:	7b0c      	ldrb	r4, [r1, #12]
    91ee:	3c04      	subs	r4, #4
    91f0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    91f2:	2c02      	cmp	r4, #2
{
    91f4:	4606      	mov	r6, r0
    91f6:	b08c      	sub	sp, #48	; 0x30
    91f8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    91fa:	d001      	beq.n	9200 <att_read_group_req+0x18>
    91fc:	2c10      	cmp	r4, #16
    91fe:	d16e      	bne.n	92de <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    9200:	2104      	movs	r1, #4
    9202:	3008      	adds	r0, #8
    9204:	f013 fc62 	bl	1cacc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9208:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    920c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    920e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9210:	1d01      	adds	r1, r0, #4
    9212:	4622      	mov	r2, r4
    9214:	4640      	mov	r0, r8
    9216:	f01b fa27 	bl	24668 <bt_uuid_create>
    921a:	2800      	cmp	r0, #0
    921c:	d061      	beq.n	92e2 <att_read_group_req+0xfa>
	if (!start || !end) {
    921e:	2d00      	cmp	r5, #0
    9220:	d03a      	beq.n	9298 <att_read_group_req+0xb0>
    9222:	2400      	movs	r4, #0
    9224:	2f00      	cmp	r7, #0
    9226:	d036      	beq.n	9296 <att_read_group_req+0xae>
	if (start > end) {
    9228:	42bd      	cmp	r5, r7
    922a:	d835      	bhi.n	9298 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    922c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9230:	4669      	mov	r1, sp
    9232:	4640      	mov	r0, r8
    9234:	f88d 4000 	strb.w	r4, [sp]
    9238:	f8ad 3002 	strh.w	r3, [sp, #2]
    923c:	f01b f9ea 	bl	24614 <bt_uuid_cmp>
    9240:	2800      	cmp	r0, #0
    9242:	d134      	bne.n	92ae <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    9244:	68b4      	ldr	r4, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
    9246:	2214      	movs	r2, #20
    9248:	2100      	movs	r1, #0
    924a:	a807      	add	r0, sp, #28
    924c:	f01a ffa9 	bl	241a2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    9250:	2201      	movs	r2, #1
    9252:	2111      	movs	r1, #17
    9254:	4620      	mov	r0, r4
    9256:	f7ff ff9b 	bl	9190 <bt_att_create_pdu>
    925a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    925c:	2800      	cmp	r0, #0
    925e:	d040      	beq.n	92e2 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    9260:	2101      	movs	r1, #1
    9262:	3008      	adds	r0, #8
	data.uuid = uuid;
    9264:	e9cd 6807 	strd	r6, r8, [sp, #28]
    9268:	f013 fc4e 	bl	1cb08 <net_buf_simple_add>
	data.rsp->len = 0U;
    926c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9270:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9272:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    9274:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9278:	4a1b      	ldr	r2, [pc, #108]	; (92e8 <att_read_group_req+0x100>)
	data.group = NULL;
    927a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    927e:	4639      	mov	r1, r7
    9280:	4628      	mov	r0, r5
    9282:	f01b fd47 	bl	24d14 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    9286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9288:	781c      	ldrb	r4, [r3, #0]
    928a:	bb1c      	cbnz	r4, 92d4 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    928c:	9809      	ldr	r0, [sp, #36]	; 0x24
    928e:	f013 faeb 	bl	1c868 <net_buf_unref>
	if (!req) {
    9292:	230a      	movs	r3, #10
    9294:	e018      	b.n	92c8 <att_read_group_req+0xe0>
			*err = 0U;
    9296:	463d      	mov	r5, r7
	if (!req) {
    9298:	2301      	movs	r3, #1
    929a:	462a      	mov	r2, r5
    929c:	2110      	movs	r1, #16
    929e:	4630      	mov	r0, r6
    92a0:	f01b ff42 	bl	25128 <send_err_rsp.part.12>
		return 0;
    92a4:	2400      	movs	r4, #0
}
    92a6:	4620      	mov	r0, r4
    92a8:	b00c      	add	sp, #48	; 0x30
    92aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    92ae:	f642 0301 	movw	r3, #10241	; 0x2801
    92b2:	a901      	add	r1, sp, #4
    92b4:	4640      	mov	r0, r8
    92b6:	f88d 4004 	strb.w	r4, [sp, #4]
    92ba:	f8ad 3006 	strh.w	r3, [sp, #6]
    92be:	f01b f9a9 	bl	24614 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    92c2:	2800      	cmp	r0, #0
    92c4:	d0be      	beq.n	9244 <att_read_group_req+0x5c>
	if (!req) {
    92c6:	2310      	movs	r3, #16
    92c8:	462a      	mov	r2, r5
    92ca:	2110      	movs	r1, #16
    92cc:	4630      	mov	r0, r6
    92ce:	f01b ff2b 	bl	25128 <send_err_rsp.part.12>
		return 0;
    92d2:	e7e8      	b.n	92a6 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    92d4:	9909      	ldr	r1, [sp, #36]	; 0x24
    92d6:	4630      	mov	r0, r6
    92d8:	f7ff fd60 	bl	8d9c <bt_att_chan_send_rsp.constprop.24>
	return 0;
    92dc:	e7e2      	b.n	92a4 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    92de:	2404      	movs	r4, #4
    92e0:	e7e1      	b.n	92a6 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    92e2:	240e      	movs	r4, #14
    92e4:	e7df      	b.n	92a6 <att_read_group_req+0xbe>
    92e6:	bf00      	nop
    92e8:	0000890d 	.word	0x0000890d

000092ec <att_read_mult_req>:
{
    92ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    92f0:	6886      	ldr	r6, [r0, #8]
{
    92f2:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    92f4:	2210      	movs	r2, #16
{
    92f6:	4604      	mov	r4, r0
    92f8:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    92fa:	4668      	mov	r0, sp
    92fc:	2100      	movs	r1, #0
    92fe:	f01a ff50 	bl	241a2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    9302:	2200      	movs	r2, #0
    9304:	210f      	movs	r1, #15
    9306:	4630      	mov	r0, r6
    9308:	f7ff ff42 	bl	9190 <bt_att_create_pdu>
    930c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    930e:	b358      	cbz	r0, 9368 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9310:	f8df 9058 	ldr.w	r9, [pc, #88]	; 936c <att_read_mult_req+0x80>
	data.chan = chan;
    9314:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    9316:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    931a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    931e:	89ab      	ldrh	r3, [r5, #12]
    9320:	2b01      	cmp	r3, #1
    9322:	d804      	bhi.n	932e <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9324:	9902      	ldr	r1, [sp, #8]
    9326:	4620      	mov	r0, r4
    9328:	f7ff fd38 	bl	8d9c <bt_att_chan_send_rsp.constprop.24>
    932c:	e018      	b.n	9360 <att_read_mult_req+0x74>
    932e:	4638      	mov	r0, r7
    9330:	f01e fdf5 	bl	27f1e <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9334:	466b      	mov	r3, sp
    9336:	464a      	mov	r2, r9
    9338:	4601      	mov	r1, r0
    933a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    933c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9340:	f01b fce8 	bl	24d14 <bt_gatt_foreach_attr>
		if (data.err) {
    9344:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9348:	2b00      	cmp	r3, #0
    934a:	d0e8      	beq.n	931e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    934c:	9802      	ldr	r0, [sp, #8]
    934e:	f013 fa8b 	bl	1c868 <net_buf_unref>
	if (!req) {
    9352:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9356:	4632      	mov	r2, r6
    9358:	210e      	movs	r1, #14
    935a:	4620      	mov	r0, r4
    935c:	f01b fee4 	bl	25128 <send_err_rsp.part.12>
	return 0;
    9360:	2000      	movs	r0, #0
}
    9362:	b005      	add	sp, #20
    9364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    9368:	200e      	movs	r0, #14
    936a:	e7fa      	b.n	9362 <att_read_mult_req+0x76>
    936c:	000250d9 	.word	0x000250d9

00009370 <att_read_rsp>:
{
    9370:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    9374:	6884      	ldr	r4, [r0, #8]
{
    9376:	4605      	mov	r5, r0
    9378:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    937a:	4620      	mov	r0, r4
    937c:	2101      	movs	r1, #1
{
    937e:	4690      	mov	r8, r2
    9380:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    9382:	f01c f9fa 	bl	2577a <bt_gatt_change_aware>
    9386:	b388      	cbz	r0, 93ec <att_read_rsp+0x7c>
	if (!handle) {
    9388:	b396      	cbz	r6, 93f0 <att_read_rsp+0x80>
	(void)memset(&data, 0, sizeof(data));
    938a:	2210      	movs	r2, #16
    938c:	2100      	movs	r1, #0
    938e:	4668      	mov	r0, sp
    9390:	f01a ff07 	bl	241a2 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    9394:	2200      	movs	r2, #0
    9396:	4641      	mov	r1, r8
    9398:	4620      	mov	r0, r4
    939a:	f7ff fef9 	bl	9190 <bt_att_create_pdu>
    939e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    93a0:	b340      	cbz	r0, 93f4 <att_read_rsp+0x84>
	data.offset = offset;
    93a2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    93a6:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    93aa:	2301      	movs	r3, #1
    93ac:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    93b0:	4a11      	ldr	r2, [pc, #68]	; (93f8 <att_read_rsp+0x88>)
	data.chan = chan;
    93b2:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    93b4:	466b      	mov	r3, sp
    93b6:	4631      	mov	r1, r6
    93b8:	4630      	mov	r0, r6
    93ba:	f01b fcab 	bl	24d14 <bt_gatt_foreach_attr>
	if (data.err) {
    93be:	f89d 400c 	ldrb.w	r4, [sp, #12]
    93c2:	b174      	cbz	r4, 93e2 <att_read_rsp+0x72>
		net_buf_unref(data.buf);
    93c4:	9802      	ldr	r0, [sp, #8]
    93c6:	f013 fa4f 	bl	1c868 <net_buf_unref>
	if (!req) {
    93ca:	f89d 300c 	ldrb.w	r3, [sp, #12]
    93ce:	4632      	mov	r2, r6
    93d0:	4639      	mov	r1, r7
    93d2:	4628      	mov	r0, r5
    93d4:	f01b fea8 	bl	25128 <send_err_rsp.part.12>
		return 0;
    93d8:	2400      	movs	r4, #0
}
    93da:	4620      	mov	r0, r4
    93dc:	b004      	add	sp, #16
    93de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    93e2:	9902      	ldr	r1, [sp, #8]
    93e4:	4628      	mov	r0, r5
    93e6:	f7ff fcd9 	bl	8d9c <bt_att_chan_send_rsp.constprop.24>
	return 0;
    93ea:	e7f6      	b.n	93da <att_read_rsp+0x6a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    93ec:	2412      	movs	r4, #18
    93ee:	e7f4      	b.n	93da <att_read_rsp+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
    93f0:	2401      	movs	r4, #1
    93f2:	e7f2      	b.n	93da <att_read_rsp+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    93f4:	240e      	movs	r4, #14
    93f6:	e7f0      	b.n	93da <att_read_rsp+0x6a>
    93f8:	000250d9 	.word	0x000250d9

000093fc <att_read_type_req>:
{
    93fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    9400:	7b0c      	ldrb	r4, [r1, #12]
    9402:	3c04      	subs	r4, #4
    9404:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    9406:	2c02      	cmp	r4, #2
{
    9408:	4606      	mov	r6, r0
    940a:	b08c      	sub	sp, #48	; 0x30
    940c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    940e:	d001      	beq.n	9414 <att_read_type_req+0x18>
    9410:	2c10      	cmp	r4, #16
    9412:	d14f      	bne.n	94b4 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    9414:	2104      	movs	r1, #4
    9416:	3008      	adds	r0, #8
    9418:	f013 fb58 	bl	1cacc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    941c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    9420:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9422:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9424:	1d01      	adds	r1, r0, #4
    9426:	4622      	mov	r2, r4
    9428:	4640      	mov	r0, r8
    942a:	f01b f91d 	bl	24668 <bt_uuid_create>
    942e:	b188      	cbz	r0, 9454 <att_read_type_req+0x58>
	if (!start || !end) {
    9430:	b19d      	cbz	r5, 945a <att_read_type_req+0x5e>
    9432:	b18f      	cbz	r7, 9458 <att_read_type_req+0x5c>
	if (start > end) {
    9434:	42bd      	cmp	r5, r7
    9436:	d810      	bhi.n	945a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    9438:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    943a:	68b4      	ldr	r4, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
    943c:	2100      	movs	r1, #0
    943e:	eb0d 0002 	add.w	r0, sp, r2
    9442:	f01a feae 	bl	241a2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    9446:	2201      	movs	r2, #1
    9448:	2109      	movs	r1, #9
    944a:	4620      	mov	r0, r4
    944c:	f7ff fea0 	bl	9190 <bt_att_create_pdu>
    9450:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    9452:	b968      	cbnz	r0, 9470 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    9454:	240e      	movs	r4, #14
    9456:	e007      	b.n	9468 <att_read_type_req+0x6c>
			*err = 0U;
    9458:	463d      	mov	r5, r7
	if (!req) {
    945a:	2301      	movs	r3, #1
    945c:	462a      	mov	r2, r5
    945e:	2108      	movs	r1, #8
    9460:	4630      	mov	r0, r6
    9462:	f01b fe61 	bl	25128 <send_err_rsp.part.12>
		return 0;
    9466:	2400      	movs	r4, #0
}
    9468:	4620      	mov	r0, r4
    946a:	b00c      	add	sp, #48	; 0x30
    946c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    9470:	2101      	movs	r1, #1
    9472:	3008      	adds	r0, #8
	data.uuid = uuid;
    9474:	e9cd 6806 	strd	r6, r8, [sp, #24]
    9478:	f013 fb46 	bl	1cb08 <net_buf_simple_add>
	data.rsp->len = 0U;
    947c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9480:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9482:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9484:	4a0c      	ldr	r2, [pc, #48]	; (94b8 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    9486:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    948a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    948c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9490:	4628      	mov	r0, r5
    9492:	ab06      	add	r3, sp, #24
    9494:	f01b fc3e 	bl	24d14 <bt_gatt_foreach_attr>
	if (data.err) {
    9498:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    949c:	b12c      	cbz	r4, 94aa <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    949e:	9808      	ldr	r0, [sp, #32]
    94a0:	f013 f9e2 	bl	1c868 <net_buf_unref>
	if (!req) {
    94a4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    94a8:	e7d8      	b.n	945c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    94aa:	9908      	ldr	r1, [sp, #32]
    94ac:	4630      	mov	r0, r6
    94ae:	f7ff fc75 	bl	8d9c <bt_att_chan_send_rsp.constprop.24>
	return 0;
    94b2:	e7d9      	b.n	9468 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    94b4:	2404      	movs	r4, #4
    94b6:	e7d7      	b.n	9468 <att_read_type_req+0x6c>
    94b8:	000089b9 	.word	0x000089b9

000094bc <att_find_type_req>:
{
    94bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    94c0:	4689      	mov	r9, r1
    94c2:	b088      	sub	sp, #32
    94c4:	4606      	mov	r6, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    94c6:	2106      	movs	r1, #6
    94c8:	f109 0008 	add.w	r0, r9, #8
    94cc:	f013 fafe 	bl	1cacc <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    94d0:	8805      	ldrh	r5, [r0, #0]
	if (!start || !end) {
    94d2:	b315      	cbz	r5, 951a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    94d4:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	if (!start || !end) {
    94d8:	f1b8 0f00 	cmp.w	r8, #0
    94dc:	d01c      	beq.n	9518 <att_find_type_req+0x5c>
	if (start > end) {
    94de:	4545      	cmp	r5, r8
    94e0:	d81b      	bhi.n	951a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    94e2:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    94e4:	f8ad 3006 	strh.w	r3, [sp, #6]
    94e8:	2400      	movs	r4, #0
    94ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    94ee:	a902      	add	r1, sp, #8
    94f0:	a801      	add	r0, sp, #4
	value = buf->data;
    94f2:	f8d9 a008 	ldr.w	sl, [r9, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    94f6:	f88d 4004 	strb.w	r4, [sp, #4]
    94fa:	f88d 4008 	strb.w	r4, [sp, #8]
    94fe:	f8ad 300a 	strh.w	r3, [sp, #10]
    9502:	f01b f887 	bl	24614 <bt_uuid_cmp>
    9506:	4607      	mov	r7, r0
    9508:	b190      	cbz	r0, 9530 <att_find_type_req+0x74>
	if (!req) {
    950a:	230a      	movs	r3, #10
    950c:	462a      	mov	r2, r5
    950e:	2106      	movs	r1, #6
    9510:	4630      	mov	r0, r6
    9512:	f01b fe09 	bl	25128 <send_err_rsp.part.12>
		return 0;
    9516:	e007      	b.n	9528 <att_find_type_req+0x6c>
			*err = 0U;
    9518:	4645      	mov	r5, r8
	if (!req) {
    951a:	2301      	movs	r3, #1
    951c:	462a      	mov	r2, r5
    951e:	2106      	movs	r1, #6
    9520:	4630      	mov	r0, r6
    9522:	f01b fe01 	bl	25128 <send_err_rsp.part.12>
		return 0;
    9526:	2400      	movs	r4, #0
}
    9528:	4620      	mov	r0, r4
    952a:	b008      	add	sp, #32
    952c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    9530:	f899 400c 	ldrb.w	r4, [r9, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    9534:	f8d6 9008 	ldr.w	r9, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
    9538:	4601      	mov	r1, r0
    953a:	2214      	movs	r2, #20
    953c:	a803      	add	r0, sp, #12
    953e:	f01a fe30 	bl	241a2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    9542:	463a      	mov	r2, r7
    9544:	2107      	movs	r1, #7
    9546:	4648      	mov	r0, r9
    9548:	f7ff fe22 	bl	9190 <bt_att_create_pdu>
    954c:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    954e:	b1d8      	cbz	r0, 9588 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9550:	230a      	movs	r3, #10
    9552:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9556:	4a0d      	ldr	r2, [pc, #52]	; (958c <att_find_type_req+0xd0>)
	data.value_len = value_len;
    9558:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    955c:	ab03      	add	r3, sp, #12
    955e:	4641      	mov	r1, r8
    9560:	4628      	mov	r0, r5
	data.chan = chan;
    9562:	9603      	str	r6, [sp, #12]
	data.value = value;
    9564:	e9cd 7a05 	strd	r7, sl, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9568:	f01b fbd4 	bl	24d14 <bt_gatt_foreach_attr>
	if (data.err) {
    956c:	f89d 401d 	ldrb.w	r4, [sp, #29]
    9570:	b12c      	cbz	r4, 957e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    9572:	9804      	ldr	r0, [sp, #16]
    9574:	f013 f978 	bl	1c868 <net_buf_unref>
	if (!req) {
    9578:	f89d 301d 	ldrb.w	r3, [sp, #29]
    957c:	e7ce      	b.n	951c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    957e:	9904      	ldr	r1, [sp, #16]
    9580:	4630      	mov	r0, r6
    9582:	f7ff fc0b 	bl	8d9c <bt_att_chan_send_rsp.constprop.24>
	return 0;
    9586:	e7cf      	b.n	9528 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    9588:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    958a:	e7cd      	b.n	9528 <att_find_type_req+0x6c>
    958c:	00008a5d 	.word	0x00008a5d

00009590 <att_find_info_req>:
{
    9590:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    9592:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    9594:	881d      	ldrh	r5, [r3, #0]
{
    9596:	b085      	sub	sp, #20
    9598:	4606      	mov	r6, r0
	if (!start || !end) {
    959a:	b19d      	cbz	r5, 95c4 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    959c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    959e:	b184      	cbz	r4, 95c2 <att_find_info_req+0x32>
	if (start > end) {
    95a0:	42a5      	cmp	r5, r4
    95a2:	d80f      	bhi.n	95c4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    95a4:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    95a6:	2210      	movs	r2, #16
    95a8:	2100      	movs	r1, #0
    95aa:	4668      	mov	r0, sp
    95ac:	f01a fdf9 	bl	241a2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    95b0:	2200      	movs	r2, #0
    95b2:	2105      	movs	r1, #5
    95b4:	4638      	mov	r0, r7
    95b6:	f7ff fdeb 	bl	9190 <bt_att_create_pdu>
    95ba:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    95bc:	b958      	cbnz	r0, 95d6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    95be:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    95c0:	e007      	b.n	95d2 <att_find_info_req+0x42>
			*err = 0U;
    95c2:	4625      	mov	r5, r4
	if (!req) {
    95c4:	2301      	movs	r3, #1
    95c6:	462a      	mov	r2, r5
    95c8:	2104      	movs	r1, #4
    95ca:	4630      	mov	r0, r6
    95cc:	f01b fdac 	bl	25128 <send_err_rsp.part.12>
	return 0;
    95d0:	2000      	movs	r0, #0
}
    95d2:	b005      	add	sp, #20
    95d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    95d6:	4621      	mov	r1, r4
    95d8:	466b      	mov	r3, sp
    95da:	4a08      	ldr	r2, [pc, #32]	; (95fc <att_find_info_req+0x6c>)
	data.chan = chan;
    95dc:	9600      	str	r6, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    95de:	4628      	mov	r0, r5
    95e0:	f01b fb98 	bl	24d14 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    95e4:	9c02      	ldr	r4, [sp, #8]
    95e6:	b924      	cbnz	r4, 95f2 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    95e8:	9801      	ldr	r0, [sp, #4]
    95ea:	f013 f93d 	bl	1c868 <net_buf_unref>
	if (!req) {
    95ee:	230a      	movs	r3, #10
    95f0:	e7e9      	b.n	95c6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    95f2:	9901      	ldr	r1, [sp, #4]
    95f4:	4630      	mov	r0, r6
    95f6:	f7ff fbd1 	bl	8d9c <bt_att_chan_send_rsp.constprop.24>
    95fa:	e7e9      	b.n	95d0 <att_find_info_req+0x40>
    95fc:	00024e41 	.word	0x00024e41

00009600 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    9600:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    9602:	4602      	mov	r2, r0
    9604:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
    9606:	2400      	movs	r4, #0
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    9608:	a901      	add	r1, sp, #4
    960a:	4807      	ldr	r0, [pc, #28]	; (9628 <bt_att_req_alloc+0x28>)
	struct bt_att_req *req = NULL;
    960c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    960e:	f014 ff91 	bl	1e534 <k_mem_slab_alloc>
    9612:	4601      	mov	r1, r0
    9614:	b930      	cbnz	r0, 9624 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    9616:	2218      	movs	r2, #24
    9618:	9801      	ldr	r0, [sp, #4]
    961a:	f01a fdc2 	bl	241a2 <memset>

	return req;
    961e:	9801      	ldr	r0, [sp, #4]
}
    9620:	b002      	add	sp, #8
    9622:	bd10      	pop	{r4, pc}
		return NULL;
    9624:	4620      	mov	r0, r4
    9626:	e7fb      	b.n	9620 <bt_att_req_alloc+0x20>
    9628:	20000ed8 	.word	0x20000ed8

0000962c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    962c:	b507      	push	{r0, r1, r2, lr}
    962e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    9630:	a901      	add	r1, sp, #4
    9632:	4803      	ldr	r0, [pc, #12]	; (9640 <bt_att_req_free+0x14>)
    9634:	f014 ffd8 	bl	1e5e8 <k_mem_slab_free>
}
    9638:	b003      	add	sp, #12
    963a:	f85d fb04 	ldr.w	pc, [sp], #4
    963e:	bf00      	nop
    9640:	20000ed8 	.word	0x20000ed8

00009644 <att_handle_rsp>:
{
    9644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9648:	4605      	mov	r5, r0
    964a:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    964c:	30f0      	adds	r0, #240	; 0xf0
{
    964e:	4689      	mov	r9, r1
    9650:	4692      	mov	sl, r2
    9652:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    9654:	f016 fdf0 	bl	20238 <k_delayed_work_cancel>
	if (!chan->req) {
    9658:	f8d5 40cc 	ldr.w	r4, [r5, #204]	; 0xcc
    965c:	2600      	movs	r6, #0
    965e:	b9fc      	cbnz	r4, 96a0 <att_handle_rsp+0x5c>
		BT_WARN("No pending ATT request");
    9660:	2157      	movs	r1, #87	; 0x57
    9662:	482a      	ldr	r0, [pc, #168]	; (970c <att_handle_rsp+0xc8>)
    9664:	f018 fc31 	bl	21eca <printk>
	att_process(chan->att);
    9668:	682f      	ldr	r7, [r5, #0]
	node = sys_slist_get(&att->reqs);
    966a:	1d38      	adds	r0, r7, #4
    966c:	f01b fab7 	bl	24bde <sys_slist_get>
	if (!node) {
    9670:	4603      	mov	r3, r0
    9672:	2800      	cmp	r0, #0
    9674:	d035      	beq.n	96e2 <att_handle_rsp+0x9e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9676:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9678:	b15a      	cbz	r2, 9692 <att_handle_rsp+0x4e>
    967a:	f5b2 709e 	subs.w	r0, r2, #316	; 0x13c
    967e:	d008      	beq.n	9692 <att_handle_rsp+0x4e>
    9680:	6816      	ldr	r6, [r2, #0]
    9682:	b10e      	cbz	r6, 9688 <att_handle_rsp+0x44>
    9684:	f5a6 769e 	sub.w	r6, r6, #316	; 0x13c
		if (!chan->req) {
    9688:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
    968c:	b312      	cbz	r2, 96d4 <att_handle_rsp+0x90>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    968e:	2e00      	cmp	r6, #0
    9690:	d134      	bne.n	96fc <att_handle_rsp+0xb8>
Z_GENLIST_PREPEND(slist, snode)
    9692:	687a      	ldr	r2, [r7, #4]
	parent->next = child;
    9694:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    9696:	68ba      	ldr	r2, [r7, #8]
	list->head = node;
    9698:	607b      	str	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    969a:	bb12      	cbnz	r2, 96e2 <att_handle_rsp+0x9e>
	list->tail = node;
    969c:	60bb      	str	r3, [r7, #8]
    969e:	e020      	b.n	96e2 <att_handle_rsp+0x9e>
	if (chan->req == &cancel) {
    96a0:	4b1b      	ldr	r3, [pc, #108]	; (9710 <att_handle_rsp+0xcc>)
    96a2:	429c      	cmp	r4, r3
    96a4:	d103      	bne.n	96ae <att_handle_rsp+0x6a>
		chan->req = NULL;
    96a6:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
	bt_att_func_t func = NULL;
    96aa:	4634      	mov	r4, r6
		goto process;
    96ac:	e7dc      	b.n	9668 <att_handle_rsp+0x24>
	if (chan->req->buf) {
    96ae:	6920      	ldr	r0, [r4, #16]
    96b0:	b120      	cbz	r0, 96bc <att_handle_rsp+0x78>
		net_buf_unref(chan->req->buf);
    96b2:	f013 f8d9 	bl	1c868 <net_buf_unref>
		chan->req->buf = NULL;
    96b6:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    96ba:	611e      	str	r6, [r3, #16]
	func = chan->req->func;
    96bc:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
	chan->req->func = NULL;
    96c0:	2600      	movs	r6, #0
	func = chan->req->func;
    96c2:	6844      	ldr	r4, [r0, #4]
	chan->req->func = NULL;
    96c4:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    96c6:	f8d0 b014 	ldr.w	fp, [r0, #20]
	att_req_destroy(chan->req);
    96ca:	f01b fdb2 	bl	25232 <att_req_destroy>
	chan->req = NULL;
    96ce:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
    96d2:	e7c9      	b.n	9668 <att_handle_rsp+0x24>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    96d4:	4619      	mov	r1, r3
    96d6:	9303      	str	r3, [sp, #12]
    96d8:	f7ff fbb2 	bl	8e40 <bt_att_chan_req_send>
    96dc:	2800      	cmp	r0, #0
    96de:	9b03      	ldr	r3, [sp, #12]
    96e0:	dbd5      	blt.n	968e <att_handle_rsp+0x4a>
	if (func) {
    96e2:	b13c      	cbz	r4, 96f4 <att_handle_rsp+0xb0>
		func(chan->att->conn, err, pdu, len, params);
    96e4:	6828      	ldr	r0, [r5, #0]
    96e6:	f8cd b000 	str.w	fp, [sp]
    96ea:	4653      	mov	r3, sl
    96ec:	464a      	mov	r2, r9
    96ee:	4641      	mov	r1, r8
    96f0:	6800      	ldr	r0, [r0, #0]
    96f2:	47a0      	blx	r4
}
    96f4:	2000      	movs	r0, #0
    96f6:	b005      	add	sp, #20
    96f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    96fc:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9700:	b10a      	cbz	r2, 9706 <att_handle_rsp+0xc2>
    9702:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
	bt_att_func_t func = NULL;
    9706:	4630      	mov	r0, r6
    9708:	4616      	mov	r6, r2
    970a:	e7bd      	b.n	9688 <att_handle_rsp+0x44>
    970c:	0002b838 	.word	0x0002b838
    9710:	2000294c 	.word	0x2000294c

00009714 <att_reset>:
{
    9714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9716:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    9718:	9803      	ldr	r0, [sp, #12]
    971a:	2200      	movs	r2, #0
    971c:	2300      	movs	r3, #0
    971e:	300c      	adds	r0, #12
    9720:	f012 ff88 	bl	1c634 <net_buf_get>
    9724:	b948      	cbnz	r0, 973a <att_reset+0x26>
	att->conn = NULL;
    9726:	9b03      	ldr	r3, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9728:	685c      	ldr	r4, [r3, #4]
	att->conn = NULL;
    972a:	6018      	str	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    972c:	b944      	cbnz	r4, 9740 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
    972e:	a903      	add	r1, sp, #12
    9730:	480c      	ldr	r0, [pc, #48]	; (9764 <att_reset+0x50>)
    9732:	f014 ff59 	bl	1e5e8 <k_mem_slab_free>
}
    9736:	b004      	add	sp, #16
    9738:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    973a:	f013 f895 	bl	1c868 <net_buf_unref>
    973e:	e7eb      	b.n	9718 <att_reset+0x4>
    9740:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
    9742:	6866      	ldr	r6, [r4, #4]
    9744:	b136      	cbz	r6, 9754 <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    9746:	6963      	ldr	r3, [r4, #20]
    9748:	9300      	str	r3, [sp, #0]
    974a:	2300      	movs	r3, #0
    974c:	461a      	mov	r2, r3
    974e:	210e      	movs	r1, #14
    9750:	4618      	mov	r0, r3
    9752:	47b0      	blx	r6
		att_req_destroy(req);
    9754:	4620      	mov	r0, r4
    9756:	f01b fd6c 	bl	25232 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    975a:	2d00      	cmp	r5, #0
    975c:	d0e7      	beq.n	972e <att_reset+0x1a>
    975e:	462c      	mov	r4, r5
    9760:	682d      	ldr	r5, [r5, #0]
    9762:	e7ee      	b.n	9742 <att_reset+0x2e>
    9764:	20000ea0 	.word	0x20000ea0

00009768 <att_timeout>:
{
    9768:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
    976a:	4605      	mov	r5, r0
{
    976c:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    976e:	2145      	movs	r1, #69	; 0x45
    9770:	480d      	ldr	r0, [pc, #52]	; (97a8 <att_timeout+0x40>)
	struct bt_att *att = chan->att;
    9772:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
    9776:	f018 fba8 	bl	21eca <printk>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    977a:	f854 0cf0 	ldr.w	r0, [r4, #-240]
    977e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    9782:	3028      	adds	r0, #40	; 0x28
    9784:	f01b fa35 	bl	24bf2 <sys_slist_find_and_remove>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    9788:	4628      	mov	r0, r5
    978a:	f01b fd66 	bl	2525a <att_chan_detach.part.15>
	if (!sys_slist_is_empty(&att->chans)) {
    978e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    9790:	b945      	cbnz	r5, 97a4 <att_timeout+0x3c>
	att_reset(att);
    9792:	4630      	mov	r0, r6
    9794:	f7ff ffbe 	bl	9714 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    9798:	f854 0ce8 	ldr.w	r0, [r4, #-232]
    979c:	f001 fc3c 	bl	b018 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    97a0:	f844 5ce8 	str.w	r5, [r4, #-232]
}
    97a4:	bd70      	pop	{r4, r5, r6, pc}
    97a6:	bf00      	nop
    97a8:	0002b854 	.word	0x0002b854

000097ac <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
    97ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    97b0:	460e      	mov	r6, r1
    97b2:	4617      	mov	r7, r2
    97b4:	461d      	mov	r5, r3
	struct bt_att_chan *chan, *tmp;
	struct bt_att *att;
	int ret;

	__ASSERT_NO_MSG(conn);
    97b6:	4604      	mov	r4, r0
    97b8:	b950      	cbnz	r0, 97d0 <bt_att_send+0x24>
    97ba:	4931      	ldr	r1, [pc, #196]	; (9880 <bt_att_send+0xd4>)
    97bc:	4831      	ldr	r0, [pc, #196]	; (9884 <bt_att_send+0xd8>)
    97be:	f640 32b8 	movw	r2, #3000	; 0xbb8
    97c2:	f018 fb82 	bl	21eca <printk>
    97c6:	f640 31b8 	movw	r1, #3000	; 0xbb8
    97ca:	482d      	ldr	r0, [pc, #180]	; (9880 <bt_att_send+0xd4>)
    97cc:	f018 fe2f 	bl	2242e <assert_post_action>
	__ASSERT_NO_MSG(buf);
    97d0:	b956      	cbnz	r6, 97e8 <bt_att_send+0x3c>
    97d2:	492b      	ldr	r1, [pc, #172]	; (9880 <bt_att_send+0xd4>)
    97d4:	482b      	ldr	r0, [pc, #172]	; (9884 <bt_att_send+0xd8>)
    97d6:	f640 32b9 	movw	r2, #3001	; 0xbb9
    97da:	f018 fb76 	bl	21eca <printk>
    97de:	f640 31b9 	movw	r1, #3001	; 0xbb9
    97e2:	4827      	ldr	r0, [pc, #156]	; (9880 <bt_att_send+0xd4>)
    97e4:	f018 fe23 	bl	2242e <assert_post_action>

	att = att_get(conn);
    97e8:	4620      	mov	r0, r4
    97ea:	f7ff fa47 	bl	8c7c <att_get>
	if (!att) {
    97ee:	4680      	mov	r8, r0
    97f0:	b938      	cbnz	r0, 9802 <bt_att_send+0x56>
		net_buf_unref(buf);
    97f2:	4630      	mov	r0, r6
    97f4:	f013 f838 	bl	1c868 <net_buf_unref>
		return -ENOTCONN;
    97f8:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
    97fc:	b002      	add	sp, #8
    97fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
    9802:	b13f      	cbz	r7, 9814 <bt_att_send+0x68>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
    9804:	9500      	str	r5, [sp, #0]
    9806:	463b      	mov	r3, r7
    9808:	4632      	mov	r2, r6
    980a:	2104      	movs	r1, #4
    980c:	4620      	mov	r0, r4
    980e:	f01b f9b6 	bl	24b7e <bt_l2cap_send_cb>
    9812:	e7f3      	b.n	97fc <bt_att_send+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9814:	6a84      	ldr	r4, [r0, #40]	; 0x28
    9816:	b184      	cbz	r4, 983a <bt_att_send+0x8e>
    9818:	f5b4 759e 	subs.w	r5, r4, #316	; 0x13c
    981c:	d00f      	beq.n	983e <bt_att_send+0x92>
    981e:	6824      	ldr	r4, [r4, #0]
    9820:	b10c      	cbz	r4, 9826 <bt_att_send+0x7a>
    9822:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
    9826:	2000      	movs	r0, #0
    9828:	b95d      	cbnz	r5, 9842 <bt_att_send+0x96>
	if (ret < 0) {
    982a:	b1c8      	cbz	r0, 9860 <bt_att_send+0xb4>
		net_buf_put(&att->tx_queue, buf);
    982c:	f108 000c 	add.w	r0, r8, #12
    9830:	4631      	mov	r1, r6
    9832:	f012 ffeb 	bl	1c80c <net_buf_put>
	return 0;
    9836:	4628      	mov	r0, r5
    9838:	e7e0      	b.n	97fc <bt_att_send+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    983a:	463d      	mov	r5, r7
    983c:	e7f3      	b.n	9826 <bt_att_send+0x7a>
    983e:	463c      	mov	r4, r7
    9840:	e7f1      	b.n	9826 <bt_att_send+0x7a>
	return z_impl_k_sem_take(sem, timeout);
    9842:	2200      	movs	r2, #0
    9844:	2300      	movs	r3, #0
    9846:	f505 7090 	add.w	r0, r5, #288	; 0x120
    984a:	f016 fa53 	bl	1fcf4 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
    984e:	2800      	cmp	r0, #0
    9850:	db08      	blt.n	9864 <bt_att_send+0xb8>
	return chan_send(chan, buf, cb);
    9852:	2200      	movs	r2, #0
    9854:	4631      	mov	r1, r6
    9856:	4628      	mov	r0, r5
    9858:	f7ff f9a4 	bl	8ba4 <chan_send>
		if (ret >= 0) {
    985c:	2800      	cmp	r0, #0
    985e:	db03      	blt.n	9868 <bt_att_send+0xbc>
	return 0;
    9860:	2000      	movs	r0, #0
    9862:	e7cb      	b.n	97fc <bt_att_send+0x50>
			return -EAGAIN;
    9864:	f06f 000a 	mvn.w	r0, #10
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9868:	b13c      	cbz	r4, 987a <bt_att_send+0xce>
    986a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    986e:	b10b      	cbz	r3, 9874 <bt_att_send+0xc8>
    9870:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
    9874:	4625      	mov	r5, r4
    9876:	461c      	mov	r4, r3
    9878:	e7d6      	b.n	9828 <bt_att_send+0x7c>
    987a:	4623      	mov	r3, r4
    987c:	e7fa      	b.n	9874 <bt_att_send+0xc8>
    987e:	bf00      	nop
    9880:	0002b8e3 	.word	0x0002b8e3
    9884:	0002a026 	.word	0x0002a026

00009888 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    9888:	b570      	push	{r4, r5, r6, lr}
    988a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
    988c:	4605      	mov	r5, r0
    988e:	b950      	cbnz	r0, 98a6 <bt_att_req_send+0x1e>
    9890:	4924      	ldr	r1, [pc, #144]	; (9924 <bt_att_req_send+0x9c>)
    9892:	4825      	ldr	r0, [pc, #148]	; (9928 <bt_att_req_send+0xa0>)
    9894:	f640 32e2 	movw	r2, #3042	; 0xbe2
    9898:	f018 fb17 	bl	21eca <printk>
    989c:	f640 31e2 	movw	r1, #3042	; 0xbe2
    98a0:	4820      	ldr	r0, [pc, #128]	; (9924 <bt_att_req_send+0x9c>)
    98a2:	f018 fdc4 	bl	2242e <assert_post_action>
	__ASSERT_NO_MSG(req);
    98a6:	b954      	cbnz	r4, 98be <bt_att_req_send+0x36>
    98a8:	491e      	ldr	r1, [pc, #120]	; (9924 <bt_att_req_send+0x9c>)
    98aa:	481f      	ldr	r0, [pc, #124]	; (9928 <bt_att_req_send+0xa0>)
    98ac:	f640 32e3 	movw	r2, #3043	; 0xbe3
    98b0:	f018 fb0b 	bl	21eca <printk>
    98b4:	f640 31e3 	movw	r1, #3043	; 0xbe3
    98b8:	481a      	ldr	r0, [pc, #104]	; (9924 <bt_att_req_send+0x9c>)
    98ba:	f018 fdb8 	bl	2242e <assert_post_action>

	att = att_get(conn);
    98be:	4628      	mov	r0, r5
    98c0:	f7ff f9dc 	bl	8c7c <att_get>
	if (!att) {
    98c4:	4605      	mov	r5, r0
    98c6:	b930      	cbnz	r0, 98d6 <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
    98c8:	6920      	ldr	r0, [r4, #16]
    98ca:	f012 ffcd 	bl	1c868 <net_buf_unref>
		req->buf = NULL;
    98ce:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
    98d0:	f06f 0038 	mvn.w	r0, #56	; 0x38
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
    98d4:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    98d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    98d8:	b153      	cbz	r3, 98f0 <bt_att_req_send+0x68>
    98da:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
    98de:	d007      	beq.n	98f0 <bt_att_req_send+0x68>
    98e0:	681e      	ldr	r6, [r3, #0]
    98e2:	b10e      	cbz	r6, 98e8 <bt_att_req_send+0x60>
    98e4:	f5a6 769e 	sub.w	r6, r6, #316	; 0x13c
		if (!chan->req) {
    98e8:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    98ec:	b143      	cbz	r3, 9900 <bt_att_req_send+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    98ee:	b96e      	cbnz	r6, 990c <bt_att_req_send+0x84>
	parent->next = child;
    98f0:	2000      	movs	r0, #0
    98f2:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    98f4:	68ab      	ldr	r3, [r5, #8]
    98f6:	b98b      	cbnz	r3, 991c <bt_att_req_send+0x94>
	list->head = node;
    98f8:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
    98fc:	4618      	mov	r0, r3
    98fe:	e7e9      	b.n	98d4 <bt_att_req_send+0x4c>
			ret = bt_att_chan_req_send(chan, req);
    9900:	4621      	mov	r1, r4
    9902:	f7ff fa9d 	bl	8e40 <bt_att_chan_req_send>
			if (ret >= 0) {
    9906:	2800      	cmp	r0, #0
    9908:	dbf1      	blt.n	98ee <bt_att_req_send+0x66>
    990a:	e7e3      	b.n	98d4 <bt_att_req_send+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    990c:	f8d6 313c 	ldr.w	r3, [r6, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9910:	b10b      	cbz	r3, 9916 <bt_att_req_send+0x8e>
    9912:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
    9916:	4630      	mov	r0, r6
    9918:	461e      	mov	r6, r3
    991a:	e7e5      	b.n	98e8 <bt_att_req_send+0x60>
	parent->next = child;
    991c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    991e:	60ac      	str	r4, [r5, #8]
    9920:	e7d8      	b.n	98d4 <bt_att_req_send+0x4c>
    9922:	bf00      	nop
    9924:	0002b8e3 	.word	0x0002b8e3
    9928:	0002a026 	.word	0x0002a026

0000992c <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    992c:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    992e:	4908      	ldr	r1, [pc, #32]	; (9950 <db_hash_set+0x24>)
{
    9930:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    9932:	4618      	mov	r0, r3
    9934:	2210      	movs	r2, #16
    9936:	47a0      	blx	r4
	if (len < 0) {
    9938:	1e04      	subs	r4, r0, #0
    993a:	da06      	bge.n	994a <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
    993c:	4622      	mov	r2, r4
    993e:	2145      	movs	r1, #69	; 0x45
    9940:	4804      	ldr	r0, [pc, #16]	; (9954 <db_hash_set+0x28>)
    9942:	f018 fac2 	bl	21eca <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    9946:	4620      	mov	r0, r4
    9948:	bd10      	pop	{r4, pc}
	return 0;
    994a:	2400      	movs	r4, #0
    994c:	e7fb      	b.n	9946 <db_hash_set+0x1a>
    994e:	bf00      	nop
    9950:	20004511 	.word	0x20004511
    9954:	0002bbd5 	.word	0x0002bbd5

00009958 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    9958:	2210      	movs	r2, #16
{
    995a:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    995c:	4906      	ldr	r1, [pc, #24]	; (9978 <db_hash_store+0x20>)
    995e:	4807      	ldr	r0, [pc, #28]	; (997c <db_hash_store+0x24>)
    9960:	f7f9 fcae 	bl	32c0 <settings_save_one>
	if (err) {
    9964:	4602      	mov	r2, r0
    9966:	b128      	cbz	r0, 9974 <db_hash_store+0x1c>
		BT_ERR("Failed to save Database Hash (err %d)", err);
    9968:	2145      	movs	r1, #69	; 0x45
    996a:	4805      	ldr	r0, [pc, #20]	; (9980 <db_hash_store+0x28>)
}
    996c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    9970:	f018 baab 	b.w	21eca <printk>
}
    9974:	bd08      	pop	{r3, pc}
    9976:	bf00      	nop
    9978:	20004501 	.word	0x20004501
    997c:	0002bbfb 	.word	0x0002bbfb
    9980:	0002bc03 	.word	0x0002bc03

00009984 <sc_store>:
{
    9984:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    9986:	4604      	mov	r4, r0
{
    9988:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    998a:	f814 2b01 	ldrb.w	r2, [r4], #1
{
    998e:	4605      	mov	r5, r0
	if (cfg->id) {
    9990:	b1ca      	cbz	r2, 99c6 <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    9992:	ae02      	add	r6, sp, #8
    9994:	2104      	movs	r1, #4
    9996:	4630      	mov	r0, r6
    9998:	f018 f9fc 	bl	21d94 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    999c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    999e:	4623      	mov	r3, r4
    99a0:	4a0a      	ldr	r2, [pc, #40]	; (99cc <sc_store+0x48>)
    99a2:	2124      	movs	r1, #36	; 0x24
    99a4:	a803      	add	r0, sp, #12
    99a6:	f7fb feb7 	bl	5718 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    99aa:	2204      	movs	r2, #4
    99ac:	f105 0108 	add.w	r1, r5, #8
    99b0:	a803      	add	r0, sp, #12
    99b2:	f7f9 fc85 	bl	32c0 <settings_save_one>
	if (err) {
    99b6:	4602      	mov	r2, r0
    99b8:	b118      	cbz	r0, 99c2 <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
    99ba:	2145      	movs	r1, #69	; 0x45
    99bc:	4804      	ldr	r0, [pc, #16]	; (99d0 <sc_store+0x4c>)
    99be:	f018 fa84 	bl	21eca <printk>
}
    99c2:	b00c      	add	sp, #48	; 0x30
    99c4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    99c6:	9200      	str	r2, [sp, #0]
    99c8:	e7e9      	b.n	999e <sc_store+0x1a>
    99ca:	bf00      	nop
    99cc:	0002bd58 	.word	0x0002bd58
    99d0:	0002bd2e 	.word	0x0002bd2e

000099d4 <bt_gatt_service_init.part.12>:
static void bt_gatt_service_init(void)
    99d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    99d6:	4d0d      	ldr	r5, [pc, #52]	; (9a0c <bt_gatt_service_init.part.12+0x38>)
    99d8:	4c0d      	ldr	r4, [pc, #52]	; (9a10 <bt_gatt_service_init.part.12+0x3c>)
    99da:	4e0e      	ldr	r6, [pc, #56]	; (9a14 <bt_gatt_service_init.part.12+0x40>)
    99dc:	462f      	mov	r7, r5
    99de:	42ac      	cmp	r4, r5
    99e0:	d90a      	bls.n	99f8 <bt_gatt_service_init.part.12+0x24>
    99e2:	4631      	mov	r1, r6
    99e4:	480c      	ldr	r0, [pc, #48]	; (9a18 <bt_gatt_service_init.part.12+0x44>)
    99e6:	f44f 6283 	mov.w	r2, #1048	; 0x418
    99ea:	f018 fa6e 	bl	21eca <printk>
    99ee:	f44f 6183 	mov.w	r1, #1048	; 0x418
    99f2:	4630      	mov	r0, r6
    99f4:	f018 fd1b 	bl	2242e <assert_post_action>
    99f8:	42bc      	cmp	r4, r7
    99fa:	d300      	bcc.n	99fe <bt_gatt_service_init.part.12+0x2a>
}
    99fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		last_static_handle += svc->attr_count;
    99fe:	4a07      	ldr	r2, [pc, #28]	; (9a1c <bt_gatt_service_init.part.12+0x48>)
    9a00:	6863      	ldr	r3, [r4, #4]
    9a02:	8811      	ldrh	r1, [r2, #0]
    9a04:	440b      	add	r3, r1
    9a06:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    9a08:	3408      	adds	r4, #8
    9a0a:	e7e8      	b.n	99de <bt_gatt_service_init.part.12+0xa>
    9a0c:	00028bbc 	.word	0x00028bbc
    9a10:	00028bac 	.word	0x00028bac
    9a14:	0002bab0 	.word	0x0002bab0
    9a18:	0002a026 	.word	0x0002a026
    9a1c:	20004364 	.word	0x20004364

00009a20 <sc_commit.part.14>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9a20:	f44f 72a4 	mov.w	r2, #328	; 0x148
    9a24:	2300      	movs	r3, #0
    9a26:	4902      	ldr	r1, [pc, #8]	; (9a30 <sc_commit.part.14+0x10>)
    9a28:	4802      	ldr	r0, [pc, #8]	; (9a34 <sc_commit.part.14+0x14>)
    9a2a:	f016 bb95 	b.w	20158 <k_delayed_work_submit_to_queue>
    9a2e:	bf00      	nop
    9a30:	20001810 	.word	0x20001810
    9a34:	20002170 	.word	0x20002170

00009a38 <sc_commit>:
{
    9a38:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9a3a:	f06f 0102 	mvn.w	r1, #2
    9a3e:	4806      	ldr	r0, [pc, #24]	; (9a58 <sc_commit+0x20>)
    9a40:	f01b fcd7 	bl	253f2 <atomic_and>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9a44:	2100      	movs	r1, #0
    9a46:	4804      	ldr	r0, [pc, #16]	; (9a58 <sc_commit+0x20>)
    9a48:	f01b fcff 	bl	2544a <atomic_test_bit>
    9a4c:	b108      	cbz	r0, 9a52 <sc_commit+0x1a>
    9a4e:	f7ff ffe7 	bl	9a20 <sc_commit.part.14>
}
    9a52:	2000      	movs	r0, #0
    9a54:	bd08      	pop	{r3, pc}
    9a56:	bf00      	nop
    9a58:	20001840 	.word	0x20001840

00009a5c <find_cf_cfg_by_addr>:
{
    9a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9a60:	4c0d      	ldr	r4, [pc, #52]	; (9a98 <find_cf_cfg_by_addr+0x3c>)
    9a62:	4607      	mov	r7, r0
    9a64:	4688      	mov	r8, r1
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    9a66:	2600      	movs	r6, #0
    9a68:	4625      	mov	r5, r4
			if (id == cf_cfg[i].id &&
    9a6a:	7823      	ldrb	r3, [r4, #0]
    9a6c:	42bb      	cmp	r3, r7
    9a6e:	d10b      	bne.n	9a88 <find_cf_cfg_by_addr+0x2c>
	return memcmp(a, b, sizeof(*a));
    9a70:	2207      	movs	r2, #7
    9a72:	1c61      	adds	r1, r4, #1
    9a74:	4640      	mov	r0, r8
    9a76:	ea4f 1906 	mov.w	r9, r6, lsl #4
    9a7a:	f01a fb41 	bl	24100 <memcmp>
    9a7e:	b918      	cbnz	r0, 9a88 <find_cf_cfg_by_addr+0x2c>
				return &cf_cfg[i];
    9a80:	eb05 0009 	add.w	r0, r5, r9
}
    9a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    9a88:	3601      	adds	r6, #1
    9a8a:	2e03      	cmp	r6, #3
    9a8c:	f104 0410 	add.w	r4, r4, #16
    9a90:	d1eb      	bne.n	9a6a <find_cf_cfg_by_addr+0xe>
	return NULL;
    9a92:	2000      	movs	r0, #0
    9a94:	e7f6      	b.n	9a84 <find_cf_cfg_by_addr+0x28>
    9a96:	bf00      	nop
    9a98:	20002964 	.word	0x20002964

00009a9c <ccc_save>:
{
    9a9c:	b538      	push	{r3, r4, r5, lr}
    9a9e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9aa0:	4b0b      	ldr	r3, [pc, #44]	; (9ad0 <ccc_save+0x34>)
    9aa2:	6882      	ldr	r2, [r0, #8]
    9aa4:	429a      	cmp	r2, r3
{
    9aa6:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9aa8:	d10f      	bne.n	9aca <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    9aaa:	7922      	ldrb	r2, [r4, #4]
    9aac:	6821      	ldr	r1, [r4, #0]
    9aae:	68c0      	ldr	r0, [r0, #12]
    9ab0:	f01b fcd4 	bl	2545c <ccc_find_cfg>
	if (!cfg) {
    9ab4:	b148      	cbz	r0, 9aca <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    9ab6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    9aba:	8901      	ldrh	r1, [r0, #8]
    9abc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    9ac0:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    9ac2:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    9ac4:	8151      	strh	r1, [r2, #10]
	save->count++;
    9ac6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    9aca:	2001      	movs	r0, #1
    9acc:	bd38      	pop	{r3, r4, r5, pc}
    9ace:	bf00      	nop
    9ad0:	00009d09 	.word	0x00009d09

00009ad4 <ccc_load>:
{
    9ad4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9ad6:	4b21      	ldr	r3, [pc, #132]	; (9b5c <ccc_load+0x88>)
{
    9ad8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9ada:	6882      	ldr	r2, [r0, #8]
    9adc:	429a      	cmp	r2, r3
    9ade:	d002      	beq.n	9ae6 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    9ae0:	2001      	movs	r0, #1
}
    9ae2:	b002      	add	sp, #8
    9ae4:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    9ae6:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
    9ae8:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    9aea:	b94b      	cbnz	r3, 9b00 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    9aec:	7922      	ldrb	r2, [r4, #4]
    9aee:	6821      	ldr	r1, [r4, #0]
    9af0:	4630      	mov	r0, r6
    9af2:	f01b fcb3 	bl	2545c <ccc_find_cfg>
	if (!cfg) {
    9af6:	2800      	cmp	r0, #0
    9af8:	d0f2      	beq.n	9ae0 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    9afa:	f01b fc6c 	bl	253d6 <clear_ccc_cfg>
    9afe:	e7ef      	b.n	9ae0 <ccc_load+0xc>
	} else if (!load->count) {
    9b00:	68e0      	ldr	r0, [r4, #12]
    9b02:	2800      	cmp	r0, #0
    9b04:	d0ed      	beq.n	9ae2 <ccc_load+0xe>
	if (load->entry->handle != handle) {
    9b06:	881b      	ldrh	r3, [r3, #0]
    9b08:	4299      	cmp	r1, r3
    9b0a:	d00a      	beq.n	9b22 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    9b0c:	d9e8      	bls.n	9ae0 <ccc_load+0xc>
	load->count--;
    9b0e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    9b10:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    9b12:	3801      	subs	r0, #1
	load->entry++;
    9b14:	3304      	adds	r3, #4
	load->count--;
    9b16:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9b18:	3000      	adds	r0, #0
	load->entry++;
    9b1a:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9b1c:	bf18      	it	ne
    9b1e:	2001      	movne	r0, #1
    9b20:	e7df      	b.n	9ae2 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    9b22:	7922      	ldrb	r2, [r4, #4]
    9b24:	6821      	ldr	r1, [r4, #0]
    9b26:	4630      	mov	r0, r6
    9b28:	f01b fc98 	bl	2545c <ccc_find_cfg>
	if (!cfg) {
    9b2c:	4605      	mov	r5, r0
    9b2e:	b980      	cbnz	r0, 9b52 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    9b30:	9000      	str	r0, [sp, #0]
    9b32:	4602      	mov	r2, r0
    9b34:	f8cd 0003 	str.w	r0, [sp, #3]
    9b38:	4669      	mov	r1, sp
    9b3a:	4630      	mov	r0, r6
    9b3c:	f01b fc8e 	bl	2545c <ccc_find_cfg>
		if (!cfg) {
    9b40:	4605      	mov	r5, r0
    9b42:	2800      	cmp	r0, #0
    9b44:	d0e3      	beq.n	9b0e <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    9b46:	6821      	ldr	r1, [r4, #0]
    9b48:	3001      	adds	r0, #1
    9b4a:	f01b fc41 	bl	253d0 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    9b4e:	7923      	ldrb	r3, [r4, #4]
    9b50:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    9b52:	68a3      	ldr	r3, [r4, #8]
    9b54:	885b      	ldrh	r3, [r3, #2]
    9b56:	812b      	strh	r3, [r5, #8]
    9b58:	e7d9      	b.n	9b0e <ccc_load+0x3a>
    9b5a:	bf00      	nop
    9b5c:	00009d09 	.word	0x00009d09

00009b60 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    9b60:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b62:	6881      	ldr	r1, [r0, #8]
{
    9b64:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b66:	4a07      	ldr	r2, [pc, #28]	; (9b84 <remove_peer_from_attr+0x24>)
    9b68:	4291      	cmp	r1, r2
    9b6a:	d109      	bne.n	9b80 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    9b6c:	791a      	ldrb	r2, [r3, #4]
    9b6e:	6819      	ldr	r1, [r3, #0]
    9b70:	68c0      	ldr	r0, [r0, #12]
    9b72:	f01b fc73 	bl	2545c <ccc_find_cfg>
	if (cfg) {
    9b76:	b118      	cbz	r0, 9b80 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
    9b78:	220a      	movs	r2, #10
    9b7a:	2100      	movs	r1, #0
    9b7c:	f01a fb11 	bl	241a2 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    9b80:	2001      	movs	r0, #1
    9b82:	bd08      	pop	{r3, pc}
    9b84:	00009d09 	.word	0x00009d09

00009b88 <find_sc_cfg>:
{
    9b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b8c:	4c0e      	ldr	r4, [pc, #56]	; (9bc8 <find_sc_cfg+0x40>)
    9b8e:	4607      	mov	r7, r0
    9b90:	4688      	mov	r8, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9b92:	2600      	movs	r6, #0
    9b94:	4625      	mov	r5, r4
    9b96:	f04f 090c 	mov.w	r9, #12
		if (id == sc_cfg[i].id &&
    9b9a:	7823      	ldrb	r3, [r4, #0]
    9b9c:	42bb      	cmp	r3, r7
    9b9e:	d10b      	bne.n	9bb8 <find_sc_cfg+0x30>
    9ba0:	2207      	movs	r2, #7
    9ba2:	4641      	mov	r1, r8
    9ba4:	1c60      	adds	r0, r4, #1
    9ba6:	fb09 fa06 	mul.w	sl, r9, r6
    9baa:	f01a faa9 	bl	24100 <memcmp>
    9bae:	b918      	cbnz	r0, 9bb8 <find_sc_cfg+0x30>
			return &sc_cfg[i];
    9bb0:	eb05 000a 	add.w	r0, r5, sl
}
    9bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9bb8:	3601      	adds	r6, #1
    9bba:	2e03      	cmp	r6, #3
    9bbc:	f104 040c 	add.w	r4, r4, #12
    9bc0:	d1eb      	bne.n	9b9a <find_sc_cfg+0x12>
	return NULL;
    9bc2:	2000      	movs	r0, #0
    9bc4:	e7f6      	b.n	9bb4 <find_sc_cfg+0x2c>
    9bc6:	bf00      	nop
    9bc8:	20004366 	.word	0x20004366

00009bcc <sc_save>:
{
    9bcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9bd0:	4680      	mov	r8, r0
    9bd2:	460f      	mov	r7, r1
    9bd4:	4616      	mov	r6, r2
    9bd6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    9bd8:	f7ff ffd6 	bl	9b88 <find_sc_cfg>
	if (!cfg) {
    9bdc:	4604      	mov	r4, r0
    9bde:	b998      	cbnz	r0, 9c08 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    9be0:	4669      	mov	r1, sp
    9be2:	9000      	str	r0, [sp, #0]
    9be4:	f8cd 0003 	str.w	r0, [sp, #3]
    9be8:	f7ff ffce 	bl	9b88 <find_sc_cfg>
		if (!cfg) {
    9bec:	4604      	mov	r4, r0
    9bee:	b930      	cbnz	r0, 9bfe <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
    9bf0:	2145      	movs	r1, #69	; 0x45
    9bf2:	4812      	ldr	r0, [pc, #72]	; (9c3c <sc_save+0x70>)
    9bf4:	f018 f969 	bl	21eca <printk>
}
    9bf8:	b002      	add	sp, #8
    9bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    9bfe:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    9c02:	4639      	mov	r1, r7
    9c04:	f01b fbe4 	bl	253d0 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    9c08:	8922      	ldrh	r2, [r4, #8]
    9c0a:	8963      	ldrh	r3, [r4, #10]
    9c0c:	b96a      	cbnz	r2, 9c2a <sc_save+0x5e>
    9c0e:	b973      	cbnz	r3, 9c2e <sc_save+0x62>
		cfg->data.start = start;
    9c10:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    9c12:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    9c14:	4621      	mov	r1, r4
    9c16:	f811 0b01 	ldrb.w	r0, [r1], #1
    9c1a:	f01a fe02 	bl	24822 <bt_addr_le_is_bonded>
    9c1e:	2800      	cmp	r0, #0
    9c20:	d0ea      	beq.n	9bf8 <sc_save+0x2c>
		sc_store(cfg);
    9c22:	4620      	mov	r0, r4
    9c24:	f7ff feae 	bl	9984 <sc_store>
    9c28:	e7e6      	b.n	9bf8 <sc_save+0x2c>
	if (new_start >= *start && new_end <= *end) {
    9c2a:	4296      	cmp	r6, r2
    9c2c:	d302      	bcc.n	9c34 <sc_save+0x68>
    9c2e:	429d      	cmp	r5, r3
    9c30:	d8ef      	bhi.n	9c12 <sc_save+0x46>
    9c32:	e7e1      	b.n	9bf8 <sc_save+0x2c>
	if (*end < new_end) {
    9c34:	429d      	cmp	r5, r3
		*start = new_start;
    9c36:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    9c38:	d9ec      	bls.n	9c14 <sc_save+0x48>
    9c3a:	e7ea      	b.n	9c12 <sc_save+0x46>
    9c3c:	0002bcc2 	.word	0x0002bcc2

00009c40 <sc_set>:
{
    9c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9c44:	460e      	mov	r6, r1
    9c46:	b087      	sub	sp, #28
    9c48:	4690      	mov	r8, r2
    9c4a:	4699      	mov	r9, r3
	if (!name) {
    9c4c:	4605      	mov	r5, r0
    9c4e:	b948      	cbnz	r0, 9c64 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
    9c50:	2145      	movs	r1, #69	; 0x45
    9c52:	4829      	ldr	r0, [pc, #164]	; (9cf8 <sc_set+0xb8>)
    9c54:	f018 f939 	bl	21eca <printk>
		return -EINVAL;
    9c58:	f06f 0415 	mvn.w	r4, #21
}
    9c5c:	4620      	mov	r0, r4
    9c5e:	b007      	add	sp, #28
    9c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    9c64:	a902      	add	r1, sp, #8
    9c66:	f01a fafc 	bl	24262 <bt_settings_decode_key>
	if (err) {
    9c6a:	4604      	mov	r4, r0
    9c6c:	b128      	cbz	r0, 9c7a <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    9c6e:	462a      	mov	r2, r5
    9c70:	2145      	movs	r1, #69	; 0x45
    9c72:	4822      	ldr	r0, [pc, #136]	; (9cfc <sc_set+0xbc>)
    9c74:	f018 f929 	bl	21eca <printk>
    9c78:	e7ee      	b.n	9c58 <sc_set+0x18>
	settings_name_next(name, &next);
    9c7a:	a901      	add	r1, sp, #4
    9c7c:	4628      	mov	r0, r5
    9c7e:	f018 ff85 	bl	22b8c <settings_name_next>
	if (!next) {
    9c82:	9801      	ldr	r0, [sp, #4]
    9c84:	b1d8      	cbz	r0, 9cbe <sc_set+0x7e>
		id = strtol(next, NULL, 10);
    9c86:	220a      	movs	r2, #10
    9c88:	4621      	mov	r1, r4
    9c8a:	f01a f98e 	bl	23faa <strtol>
    9c8e:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    9c90:	a902      	add	r1, sp, #8
    9c92:	4638      	mov	r0, r7
    9c94:	f7ff ff78 	bl	9b88 <find_sc_cfg>
	if (!cfg && len_rd) {
    9c98:	4605      	mov	r5, r0
    9c9a:	bb28      	cbnz	r0, 9ce8 <sc_set+0xa8>
    9c9c:	2e00      	cmp	r6, #0
    9c9e:	d0dd      	beq.n	9c5c <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    9ca0:	a904      	add	r1, sp, #16
    9ca2:	9004      	str	r0, [sp, #16]
    9ca4:	f8cd 0013 	str.w	r0, [sp, #19]
    9ca8:	f7ff ff6e 	bl	9b88 <find_sc_cfg>
		if (!cfg) {
    9cac:	4605      	mov	r5, r0
    9cae:	b940      	cbnz	r0, 9cc2 <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
    9cb0:	2145      	movs	r1, #69	; 0x45
    9cb2:	4813      	ldr	r0, [pc, #76]	; (9d00 <sc_set+0xc0>)
    9cb4:	f018 f909 	bl	21eca <printk>
			return -ENOMEM;
    9cb8:	f06f 040b 	mvn.w	r4, #11
    9cbc:	e7ce      	b.n	9c5c <sc_set+0x1c>
		id = BT_ID_DEFAULT;
    9cbe:	4627      	mov	r7, r4
    9cc0:	e7e6      	b.n	9c90 <sc_set+0x50>
		cfg->id = id;
    9cc2:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    9cc6:	a902      	add	r1, sp, #8
    9cc8:	f01b fb82 	bl	253d0 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    9ccc:	f105 0108 	add.w	r1, r5, #8
    9cd0:	2204      	movs	r2, #4
    9cd2:	4648      	mov	r0, r9
    9cd4:	47c0      	blx	r8
		if (len < 0) {
    9cd6:	1e05      	subs	r5, r0, #0
    9cd8:	dac0      	bge.n	9c5c <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
    9cda:	462a      	mov	r2, r5
    9cdc:	2145      	movs	r1, #69	; 0x45
    9cde:	4809      	ldr	r0, [pc, #36]	; (9d04 <sc_set+0xc4>)
    9ce0:	f018 f8f3 	bl	21eca <printk>
			return len;
    9ce4:	462c      	mov	r4, r5
    9ce6:	e7b9      	b.n	9c5c <sc_set+0x1c>
	if (len_rd) {
    9ce8:	2e00      	cmp	r6, #0
    9cea:	d1ef      	bne.n	9ccc <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
    9cec:	220c      	movs	r2, #12
    9cee:	4631      	mov	r1, r6
    9cf0:	f01a fa57 	bl	241a2 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    9cf4:	e7b2      	b.n	9c5c <sc_set+0x1c>
    9cf6:	bf00      	nop
    9cf8:	0002ac40 	.word	0x0002ac40
    9cfc:	0002bce6 	.word	0x0002bce6
    9d00:	0002bd07 	.word	0x0002bd07
    9d04:	0002bbd5 	.word	0x0002bbd5

00009d08 <bt_gatt_attr_write_ccc>:
{
    9d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9d0c:	4698      	mov	r8, r3
    9d0e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9d12:	68ce      	ldr	r6, [r1, #12]
{
    9d14:	4607      	mov	r7, r0
    9d16:	4689      	mov	r9, r1
	if (offset) {
    9d18:	2b00      	cmp	r3, #0
    9d1a:	d144      	bne.n	9da6 <bt_gatt_attr_write_ccc+0x9e>
	if (!len || len > sizeof(uint16_t)) {
    9d1c:	f108 33ff 	add.w	r3, r8, #4294967295
    9d20:	2b01      	cmp	r3, #1
    9d22:	d843      	bhi.n	9dac <bt_gatt_attr_write_ccc+0xa4>
	if (len < sizeof(uint16_t)) {
    9d24:	f1b8 0f01 	cmp.w	r8, #1
		value = *(uint8_t *)buf;
    9d28:	7814      	ldrb	r4, [r2, #0]
    9d2a:	bf18      	it	ne
    9d2c:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    9d2e:	4631      	mov	r1, r6
		value = *(uint8_t *)buf;
    9d30:	bf0c      	ite	eq
    9d32:	b2a4      	uxtheq	r4, r4
    9d34:	ea44 2403 	orrne.w	r4, r4, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    9d38:	f01b fbbb 	bl	254b2 <find_ccc_cfg>
	if (!cfg) {
    9d3c:	4605      	mov	r5, r0
    9d3e:	b9b0      	cbnz	r0, 9d6e <bt_gatt_attr_write_ccc+0x66>
		if (!value) {
    9d40:	b914      	cbnz	r4, 9d48 <bt_gatt_attr_write_ccc+0x40>
			return len;
    9d42:	4640      	mov	r0, r8
}
    9d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    9d48:	4631      	mov	r1, r6
    9d4a:	f01b fbb2 	bl	254b2 <find_ccc_cfg>
		if (!cfg) {
    9d4e:	4605      	mov	r5, r0
    9d50:	b930      	cbnz	r0, 9d60 <bt_gatt_attr_write_ccc+0x58>
			BT_WARN("No space to store CCC cfg");
    9d52:	4818      	ldr	r0, [pc, #96]	; (9db4 <bt_gatt_attr_write_ccc+0xac>)
    9d54:	2157      	movs	r1, #87	; 0x57
    9d56:	f018 f8b8 	bl	21eca <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    9d5a:	f06f 0010 	mvn.w	r0, #16
    9d5e:	e7f1      	b.n	9d44 <bt_gatt_attr_write_ccc+0x3c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9d60:	f107 0188 	add.w	r1, r7, #136	; 0x88
    9d64:	3001      	adds	r0, #1
    9d66:	f01b fb33 	bl	253d0 <bt_addr_le_copy>
		cfg->id = conn->id;
    9d6a:	7a3b      	ldrb	r3, [r7, #8]
    9d6c:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
    9d6e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    9d70:	b96b      	cbnz	r3, 9d8e <bt_gatt_attr_write_ccc+0x86>
	if (cfg->value != ccc->value) {
    9d72:	8bf3      	ldrh	r3, [r6, #30]
	cfg->value = value;
    9d74:	812c      	strh	r4, [r5, #8]
	if (cfg->value != ccc->value) {
    9d76:	42a3      	cmp	r3, r4
    9d78:	d003      	beq.n	9d82 <bt_gatt_attr_write_ccc+0x7a>
		gatt_ccc_changed(attr, ccc);
    9d7a:	4631      	mov	r1, r6
    9d7c:	4648      	mov	r0, r9
    9d7e:	f01b faa9 	bl	252d4 <gatt_ccc_changed>
	if (!value) {
    9d82:	2c00      	cmp	r4, #0
    9d84:	d1dd      	bne.n	9d42 <bt_gatt_attr_write_ccc+0x3a>
		clear_ccc_cfg(cfg);
    9d86:	4628      	mov	r0, r5
    9d88:	f01b fb25 	bl	253d6 <clear_ccc_cfg>
    9d8c:	e7d9      	b.n	9d42 <bt_gatt_attr_write_ccc+0x3a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    9d8e:	4622      	mov	r2, r4
    9d90:	4649      	mov	r1, r9
    9d92:	4638      	mov	r0, r7
    9d94:	4798      	blx	r3
		if (write < 0) {
    9d96:	2800      	cmp	r0, #0
    9d98:	dbd4      	blt.n	9d44 <bt_gatt_attr_write_ccc+0x3c>
		if (write != sizeof(value) && write != 1) {
    9d9a:	3801      	subs	r0, #1
    9d9c:	2801      	cmp	r0, #1
    9d9e:	d9e8      	bls.n	9d72 <bt_gatt_attr_write_ccc+0x6a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    9da0:	f06f 000d 	mvn.w	r0, #13
    9da4:	e7ce      	b.n	9d44 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9da6:	f06f 0006 	mvn.w	r0, #6
    9daa:	e7cb      	b.n	9d44 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    9dac:	f06f 000c 	mvn.w	r0, #12
    9db0:	e7c8      	b.n	9d44 <bt_gatt_attr_write_ccc+0x3c>
    9db2:	bf00      	nop
    9db4:	0002ba41 	.word	0x0002ba41

00009db8 <find_cf_cfg>:
{
    9db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9dba:	4c0f      	ldr	r4, [pc, #60]	; (9df8 <find_cf_cfg+0x40>)
    9dbc:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    9dbe:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    9dc0:	4627      	mov	r7, r4
		if (!conn) {
    9dc2:	1c60      	adds	r0, r4, #1
    9dc4:	b985      	cbnz	r5, 9de8 <find_cf_cfg+0x30>
    9dc6:	2207      	movs	r2, #7
    9dc8:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9dca:	9500      	str	r5, [sp, #0]
    9dcc:	f8cd 5003 	str.w	r5, [sp, #3]
    9dd0:	f01a f996 	bl	24100 <memcmp>
    9dd4:	b128      	cbz	r0, 9de2 <find_cf_cfg+0x2a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    9dd6:	3601      	adds	r6, #1
    9dd8:	2e03      	cmp	r6, #3
    9dda:	f104 0410 	add.w	r4, r4, #16
    9dde:	d1ef      	bne.n	9dc0 <find_cf_cfg+0x8>
	return NULL;
    9de0:	2700      	movs	r7, #0
}
    9de2:	4638      	mov	r0, r7
    9de4:	b003      	add	sp, #12
    9de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9de8:	4602      	mov	r2, r0
    9dea:	7821      	ldrb	r1, [r4, #0]
    9dec:	4628      	mov	r0, r5
    9dee:	f01a fe06 	bl	249fe <bt_conn_is_peer_addr_le>
    9df2:	2800      	cmp	r0, #0
    9df4:	d0ef      	beq.n	9dd6 <find_cf_cfg+0x1e>
    9df6:	e7f4      	b.n	9de2 <find_cf_cfg+0x2a>
    9df8:	20002964 	.word	0x20002964

00009dfc <cf_write>:
{
    9dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e00:	f8bd 1018 	ldrh.w	r1, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    9e04:	2901      	cmp	r1, #1
{
    9e06:	4606      	mov	r6, r0
    9e08:	4617      	mov	r7, r2
    9e0a:	4698      	mov	r8, r3
	if (offset > sizeof(cfg->data)) {
    9e0c:	d842      	bhi.n	9e94 <cf_write+0x98>
	if (offset + len > sizeof(cfg->data)) {
    9e0e:	4419      	add	r1, r3
    9e10:	2901      	cmp	r1, #1
    9e12:	461d      	mov	r5, r3
    9e14:	dc41      	bgt.n	9e9a <cf_write+0x9e>
	cfg = find_cf_cfg(conn);
    9e16:	f7ff ffcf 	bl	9db8 <find_cf_cfg>
	if (!cfg) {
    9e1a:	4604      	mov	r4, r0
    9e1c:	b960      	cbnz	r0, 9e38 <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
    9e1e:	f7ff ffcb 	bl	9db8 <find_cf_cfg>
	if (!cfg) {
    9e22:	4604      	mov	r4, r0
    9e24:	b940      	cbnz	r0, 9e38 <cf_write+0x3c>
		BT_WARN("No space to store Client Supported Features");
    9e26:	2157      	movs	r1, #87	; 0x57
    9e28:	481f      	ldr	r0, [pc, #124]	; (9ea8 <cf_write+0xac>)
    9e2a:	f018 f84e 	bl	21eca <printk>
    9e2e:	f06f 0510 	mvn.w	r5, #16
}
    9e32:	4628      	mov	r0, r5
    9e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    9e38:	463b      	mov	r3, r7
    9e3a:	eb08 0c07 	add.w	ip, r8, r7
	for (i = 0U; i < len && i <= last_byte; i++) {
    9e3e:	459c      	cmp	ip, r3
    9e40:	d115      	bne.n	9e6e <cf_write+0x72>
	for (i = 0U; i < len && i < last_byte; i++) {
    9e42:	f1b8 0f00 	cmp.w	r8, #0
    9e46:	d005      	beq.n	9e54 <cf_write+0x58>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    9e48:	783b      	ldrb	r3, [r7, #0]
    9e4a:	7a22      	ldrb	r2, [r4, #8]
    9e4c:	f003 0307 	and.w	r3, r3, #7
    9e50:	4313      	orrs	r3, r2
    9e52:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9e54:	f106 0188 	add.w	r1, r6, #136	; 0x88
    9e58:	1c60      	adds	r0, r4, #1
    9e5a:	f01b fab9 	bl	253d0 <bt_addr_le_copy>
	cfg->id = conn->id;
    9e5e:	4620      	mov	r0, r4
    9e60:	7a33      	ldrb	r3, [r6, #8]
    9e62:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9e66:	2100      	movs	r1, #0
    9e68:	f01b fb14 	bl	25494 <atomic_set_bit>
	return len;
    9e6c:	e7e1      	b.n	9e32 <cf_write+0x36>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    9e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
    9e72:	7a20      	ldrb	r0, [r4, #8]
    9e74:	2100      	movs	r1, #0
    9e76:	4042      	eors	r2, r0
			if ((BIT(bit) & chg_bits) &&
    9e78:	fa22 fe01 	lsr.w	lr, r2, r1
    9e7c:	f01e 0f01 	tst.w	lr, #1
    9e80:	d004      	beq.n	9e8c <cf_write+0x90>
    9e82:	fa20 fe01 	lsr.w	lr, r0, r1
    9e86:	f01e 0f01 	tst.w	lr, #1
    9e8a:	d109      	bne.n	9ea0 <cf_write+0xa4>
    9e8c:	3101      	adds	r1, #1
		for (bit = 0U; bit <= last_bit; bit++) {
    9e8e:	2903      	cmp	r1, #3
    9e90:	d1f2      	bne.n	9e78 <cf_write+0x7c>
    9e92:	e7d4      	b.n	9e3e <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9e94:	f06f 0506 	mvn.w	r5, #6
    9e98:	e7cb      	b.n	9e32 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    9e9a:	f06f 050c 	mvn.w	r5, #12
    9e9e:	e7c8      	b.n	9e32 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    9ea0:	f06f 0512 	mvn.w	r5, #18
    9ea4:	e7c5      	b.n	9e32 <cf_write+0x36>
    9ea6:	bf00      	nop
    9ea8:	0002bb68 	.word	0x0002bb68

00009eac <sc_indicate_rsp>:
{
    9eac:	b510      	push	{r4, lr}
    9eae:	f06f 0102 	mvn.w	r1, #2
    9eb2:	4604      	mov	r4, r0
    9eb4:	480d      	ldr	r0, [pc, #52]	; (9eec <sc_indicate_rsp+0x40>)
    9eb6:	f01b fa9c 	bl	253f2 <atomic_and>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9eba:	2100      	movs	r1, #0
    9ebc:	480b      	ldr	r0, [pc, #44]	; (9eec <sc_indicate_rsp+0x40>)
    9ebe:	f01b fac4 	bl	2544a <atomic_test_bit>
    9ec2:	b128      	cbz	r0, 9ed0 <sc_indicate_rsp+0x24>
    9ec4:	2200      	movs	r2, #0
    9ec6:	2300      	movs	r3, #0
    9ec8:	4909      	ldr	r1, [pc, #36]	; (9ef0 <sc_indicate_rsp+0x44>)
    9eca:	480a      	ldr	r0, [pc, #40]	; (9ef4 <sc_indicate_rsp+0x48>)
    9ecc:	f016 f944 	bl	20158 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    9ed0:	4620      	mov	r0, r4
    9ed2:	f7ff ff71 	bl	9db8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    9ed6:	b140      	cbz	r0, 9eea <sc_indicate_rsp+0x3e>
    9ed8:	7a03      	ldrb	r3, [r0, #8]
    9eda:	07db      	lsls	r3, r3, #31
    9edc:	d505      	bpl.n	9eea <sc_indicate_rsp+0x3e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9ede:	2100      	movs	r1, #0
    9ee0:	300c      	adds	r0, #12
}
    9ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9ee6:	f01b bad5 	b.w	25494 <atomic_set_bit>
}
    9eea:	bd10      	pop	{r4, pc}
    9eec:	20001840 	.word	0x20001840
    9ef0:	20001810 	.word	0x20001810
    9ef4:	20002170 	.word	0x20002170

00009ef8 <cf_set>:
{
    9ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9efc:	4689      	mov	r9, r1
    9efe:	b085      	sub	sp, #20
    9f00:	4617      	mov	r7, r2
    9f02:	4698      	mov	r8, r3
	if (!name) {
    9f04:	4605      	mov	r5, r0
    9f06:	b948      	cbnz	r0, 9f1c <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
    9f08:	2145      	movs	r1, #69	; 0x45
    9f0a:	4826      	ldr	r0, [pc, #152]	; (9fa4 <cf_set+0xac>)
    9f0c:	f017 ffdd 	bl	21eca <printk>
		return -EINVAL;
    9f10:	f06f 0415 	mvn.w	r4, #21
}
    9f14:	4620      	mov	r0, r4
    9f16:	b005      	add	sp, #20
    9f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    9f1c:	a902      	add	r1, sp, #8
    9f1e:	f01a f9a0 	bl	24262 <bt_settings_decode_key>
	if (err) {
    9f22:	4604      	mov	r4, r0
    9f24:	b128      	cbz	r0, 9f32 <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    9f26:	462a      	mov	r2, r5
    9f28:	2145      	movs	r1, #69	; 0x45
    9f2a:	481f      	ldr	r0, [pc, #124]	; (9fa8 <cf_set+0xb0>)
    9f2c:	f017 ffcd 	bl	21eca <printk>
    9f30:	e7ee      	b.n	9f10 <cf_set+0x18>
	settings_name_next(name, &next);
    9f32:	a901      	add	r1, sp, #4
    9f34:	4628      	mov	r0, r5
    9f36:	f018 fe29 	bl	22b8c <settings_name_next>
	if (!next) {
    9f3a:	9801      	ldr	r0, [sp, #4]
    9f3c:	b1a8      	cbz	r0, 9f6a <cf_set+0x72>
		id = strtol(next, NULL, 10);
    9f3e:	220a      	movs	r2, #10
    9f40:	4621      	mov	r1, r4
    9f42:	f01a f832 	bl	23faa <strtol>
    9f46:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    9f48:	a902      	add	r1, sp, #8
    9f4a:	4630      	mov	r0, r6
    9f4c:	f7ff fd86 	bl	9a5c <find_cf_cfg_by_addr>
	if (!cfg) {
    9f50:	4605      	mov	r5, r0
    9f52:	b988      	cbnz	r0, 9f78 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
    9f54:	f7ff ff30 	bl	9db8 <find_cf_cfg>
		if (!cfg) {
    9f58:	4605      	mov	r5, r0
    9f5a:	b940      	cbnz	r0, 9f6e <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
    9f5c:	2145      	movs	r1, #69	; 0x45
    9f5e:	4813      	ldr	r0, [pc, #76]	; (9fac <cf_set+0xb4>)
    9f60:	f017 ffb3 	bl	21eca <printk>
			return -ENOMEM;
    9f64:	f06f 040b 	mvn.w	r4, #11
    9f68:	e7d4      	b.n	9f14 <cf_set+0x1c>
		id = BT_ID_DEFAULT;
    9f6a:	4626      	mov	r6, r4
    9f6c:	e7ec      	b.n	9f48 <cf_set+0x50>
		cfg->id = id;
    9f6e:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    9f72:	a902      	add	r1, sp, #8
    9f74:	f01b fa2c 	bl	253d0 <bt_addr_le_copy>
	if (len_rd) {
    9f78:	f1b9 0f00 	cmp.w	r9, #0
    9f7c:	d00d      	beq.n	9f9a <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    9f7e:	f105 0108 	add.w	r1, r5, #8
    9f82:	2201      	movs	r2, #1
    9f84:	4640      	mov	r0, r8
    9f86:	47b8      	blx	r7
		if (len < 0) {
    9f88:	1e05      	subs	r5, r0, #0
    9f8a:	dac3      	bge.n	9f14 <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
    9f8c:	462a      	mov	r2, r5
    9f8e:	2145      	movs	r1, #69	; 0x45
    9f90:	4807      	ldr	r0, [pc, #28]	; (9fb0 <cf_set+0xb8>)
    9f92:	f017 ff9a 	bl	21eca <printk>
			return len;
    9f96:	462c      	mov	r4, r5
    9f98:	e7bc      	b.n	9f14 <cf_set+0x1c>
		clear_cf_cfg(cfg);
    9f9a:	4628      	mov	r0, r5
    9f9c:	f01b fa38 	bl	25410 <clear_cf_cfg>
    9fa0:	e7b8      	b.n	9f14 <cf_set+0x1c>
    9fa2:	bf00      	nop
    9fa4:	0002ac40 	.word	0x0002ac40
    9fa8:	0002bce6 	.word	0x0002bce6
    9fac:	0002bb41 	.word	0x0002bb41
    9fb0:	0002bbd5 	.word	0x0002bbd5

00009fb4 <db_changed>:
{
    9fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9fb6:	2300      	movs	r3, #0
    9fb8:	f44f 72a4 	mov.w	r2, #328	; 0x148
    9fbc:	4912      	ldr	r1, [pc, #72]	; (a008 <db_changed+0x54>)
    9fbe:	4813      	ldr	r0, [pc, #76]	; (a00c <db_changed+0x58>)
    9fc0:	4c13      	ldr	r4, [pc, #76]	; (a010 <db_changed+0x5c>)
    9fc2:	f016 f8c9 	bl	20158 <k_delayed_work_submit_to_queue>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    9fc6:	2500      	movs	r5, #0
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9fc8:	462f      	mov	r7, r5
    9fca:	2207      	movs	r2, #7
    9fcc:	4669      	mov	r1, sp
    9fce:	4620      	mov	r0, r4
    9fd0:	9700      	str	r7, [sp, #0]
    9fd2:	f8cd 7003 	str.w	r7, [sp, #3]
    9fd6:	f01a f893 	bl	24100 <memcmp>
    9fda:	b170      	cbz	r0, 9ffa <db_changed+0x46>
		if (CF_ROBUST_CACHING(cfg)) {
    9fdc:	79e3      	ldrb	r3, [r4, #7]
    9fde:	07db      	lsls	r3, r3, #31
    9fe0:	d50b      	bpl.n	9ffa <db_changed+0x46>
			atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
    9fe2:	f104 060b 	add.w	r6, r4, #11
    9fe6:	f06f 0102 	mvn.w	r1, #2
    9fea:	4630      	mov	r0, r6
    9fec:	f01b fa01 	bl	253f2 <atomic_and>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9ff0:	f06f 0101 	mvn.w	r1, #1
    9ff4:	4630      	mov	r0, r6
    9ff6:	f01b f9fc 	bl	253f2 <atomic_and>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    9ffa:	3501      	adds	r5, #1
    9ffc:	2d03      	cmp	r5, #3
    9ffe:	f104 0410 	add.w	r4, r4, #16
    a002:	d1e2      	bne.n	9fca <db_changed+0x16>
}
    a004:	b003      	add	sp, #12
    a006:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a008:	200017c0 	.word	0x200017c0
    a00c:	20002170 	.word	0x20002170
    a010:	20002965 	.word	0x20002965

0000a014 <gatt_notify>:
{
    a014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a018:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    a01a:	8992      	ldrh	r2, [r2, #12]
{
    a01c:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    a01e:	3202      	adds	r2, #2
    a020:	211b      	movs	r1, #27
{
    a022:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    a024:	f7ff f8b4 	bl	9190 <bt_att_create_pdu>
	if (!buf) {
    a028:	4605      	mov	r5, r0
    a02a:	b1c8      	cbz	r0, a060 <gatt_notify+0x4c>
	return net_buf_simple_add(&buf->b, len);
    a02c:	f100 0708 	add.w	r7, r0, #8
    a030:	2102      	movs	r1, #2
    a032:	4638      	mov	r0, r7
    a034:	f012 fd68 	bl	1cb08 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    a038:	4606      	mov	r6, r0
    a03a:	89a1      	ldrh	r1, [r4, #12]
    a03c:	f826 9b02 	strh.w	r9, [r6], #2
    a040:	4638      	mov	r0, r7
    a042:	f012 fd61 	bl	1cb08 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    a046:	89a2      	ldrh	r2, [r4, #12]
    a048:	68a1      	ldr	r1, [r4, #8]
    a04a:	4630      	mov	r0, r6
    a04c:	f01a f87f 	bl	2414e <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    a050:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    a054:	4629      	mov	r1, r5
    a056:	4640      	mov	r0, r8
}
    a058:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    a05c:	f7ff bba6 	b.w	97ac <bt_att_send>
		BT_WARN("No buffer available to send notification");
    a060:	2157      	movs	r1, #87	; 0x57
    a062:	4803      	ldr	r0, [pc, #12]	; (a070 <gatt_notify+0x5c>)
    a064:	f017 ff31 	bl	21eca <printk>
}
    a068:	f06f 000b 	mvn.w	r0, #11
    a06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a070:	0002bc79 	.word	0x0002bc79

0000a074 <read_ppcp>:
{
    a074:	b513      	push	{r0, r1, r4, lr}
    a076:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    a07a:	4c0b      	ldr	r4, [pc, #44]	; (a0a8 <read_ppcp+0x34>)
{
    a07c:	4610      	mov	r0, r2
	if (offset > value_len) {
    a07e:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    a080:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    a084:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    a088:	d80b      	bhi.n	a0a2 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    a08a:	f1c1 0408 	rsb	r4, r1, #8
    a08e:	429c      	cmp	r4, r3
    a090:	bfa8      	it	ge
    a092:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    a094:	4622      	mov	r2, r4
    a096:	4469      	add	r1, sp
    a098:	f01a f859 	bl	2414e <memcpy>
}
    a09c:	4620      	mov	r0, r4
    a09e:	b002      	add	sp, #8
    a0a0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a0a2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    a0a6:	e7f9      	b.n	a09c <read_ppcp+0x28>
    a0a8:	00280018 	.word	0x00280018

0000a0ac <bt_gatt_clear_sc>:
{
    a0ac:	b570      	push	{r4, r5, r6, lr}
    a0ae:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    a0b0:	f7ff fd6a 	bl	9b88 <find_sc_cfg>
	if (!cfg) {
    a0b4:	4605      	mov	r5, r0
    a0b6:	b1e8      	cbz	r0, a0f4 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
    a0b8:	4604      	mov	r4, r0
    a0ba:	f814 2b01 	ldrb.w	r2, [r4], #1
    a0be:	b1e2      	cbz	r2, a0fa <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    a0c0:	ae02      	add	r6, sp, #8
    a0c2:	2104      	movs	r1, #4
    a0c4:	4630      	mov	r0, r6
    a0c6:	f017 fe65 	bl	21d94 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    a0ca:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    a0cc:	4a0c      	ldr	r2, [pc, #48]	; (a100 <bt_gatt_clear_sc+0x54>)
    a0ce:	4623      	mov	r3, r4
    a0d0:	2124      	movs	r1, #36	; 0x24
    a0d2:	a803      	add	r0, sp, #12
    a0d4:	f7fb fb20 	bl	5718 <bt_settings_encode_key>
		err = settings_delete(key);
    a0d8:	a803      	add	r0, sp, #12
    a0da:	f018 fd33 	bl	22b44 <settings_delete>
		if (err) {
    a0de:	4602      	mov	r2, r0
    a0e0:	b118      	cbz	r0, a0ea <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
    a0e2:	2145      	movs	r1, #69	; 0x45
    a0e4:	4807      	ldr	r0, [pc, #28]	; (a104 <bt_gatt_clear_sc+0x58>)
    a0e6:	f017 fef0 	bl	21eca <printk>
	memset(cfg, 0, sizeof(*cfg));
    a0ea:	220c      	movs	r2, #12
    a0ec:	2100      	movs	r1, #0
    a0ee:	4628      	mov	r0, r5
    a0f0:	f01a f857 	bl	241a2 <memset>
}
    a0f4:	2000      	movs	r0, #0
    a0f6:	b00c      	add	sp, #48	; 0x30
    a0f8:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    a0fa:	9200      	str	r2, [sp, #0]
    a0fc:	e7e6      	b.n	a0cc <bt_gatt_clear_sc+0x20>
    a0fe:	bf00      	nop
    a100:	0002bd58 	.word	0x0002bd58
    a104:	0002ba60 	.word	0x0002ba60

0000a108 <sc_clear>:
{
    a108:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a10a:	f100 0488 	add.w	r4, r0, #136	; 0x88
{
    a10e:	4605      	mov	r5, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a110:	4621      	mov	r1, r4
    a112:	7a00      	ldrb	r0, [r0, #8]
    a114:	f01a fb85 	bl	24822 <bt_addr_le_is_bonded>
    a118:	4606      	mov	r6, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    a11a:	4621      	mov	r1, r4
    a11c:	7a28      	ldrb	r0, [r5, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a11e:	b14e      	cbz	r6, a134 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    a120:	f7ff ffc4 	bl	a0ac <bt_gatt_clear_sc>
		if (err) {
    a124:	4602      	mov	r2, r0
    a126:	b170      	cbz	r0, a146 <sc_clear+0x3e>
			BT_ERR("Failed to clear SC %d", err);
    a128:	2145      	movs	r1, #69	; 0x45
    a12a:	4807      	ldr	r0, [pc, #28]	; (a148 <sc_clear+0x40>)
}
    a12c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
    a130:	f017 becb 	b.w	21eca <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    a134:	f7ff fd28 	bl	9b88 <find_sc_cfg>
		if (cfg) {
    a138:	b128      	cbz	r0, a146 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
    a13a:	4631      	mov	r1, r6
    a13c:	220c      	movs	r2, #12
}
    a13e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    a142:	f01a b82e 	b.w	241a2 <memset>
}
    a146:	bd70      	pop	{r4, r5, r6, pc}
    a148:	0002bca7 	.word	0x0002bca7

0000a14c <disconnected_cb>:
{
    a14c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a150:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a152:	4b23      	ldr	r3, [pc, #140]	; (a1e0 <disconnected_cb+0x94>)
    a154:	6882      	ldr	r2, [r0, #8]
    a156:	429a      	cmp	r2, r3
{
    a158:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    a15a:	d12a      	bne.n	a1b2 <disconnected_cb+0x66>
	ccc = attr->user_data;
    a15c:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    a15e:	8beb      	ldrh	r3, [r5, #30]
    a160:	b33b      	cbz	r3, a1b2 <disconnected_cb+0x66>
				if (ccc == &sc_ccc) {
    a162:	f8df b080 	ldr.w	fp, [pc, #128]	; a1e4 <disconnected_cb+0x98>
    a166:	1c6c      	adds	r4, r5, #1
    a168:	f105 0a1f 	add.w	sl, r5, #31
	value_used = false;
    a16c:	2600      	movs	r6, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a16e:	f107 0988 	add.w	r9, r7, #136	; 0x88
		if (!cfg->value) {
    a172:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    a176:	b193      	cbz	r3, a19e <disconnected_cb+0x52>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a178:	4622      	mov	r2, r4
    a17a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    a17e:	4638      	mov	r0, r7
    a180:	f01a fc3d 	bl	249fe <bt_conn_is_peer_addr_le>
    a184:	b9c0      	cbnz	r0, a1b8 <disconnected_cb+0x6c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    a186:	4621      	mov	r1, r4
    a188:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    a18c:	f01a fc80 	bl	24a90 <bt_conn_lookup_addr_le>
			if (tmp) {
    a190:	b128      	cbz	r0, a19e <disconnected_cb+0x52>
				if (tmp->state == BT_CONN_CONNECTED) {
    a192:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
    a194:	2b07      	cmp	r3, #7
    a196:	bf08      	it	eq
    a198:	2601      	moveq	r6, #1
				bt_conn_unref(tmp);
    a19a:	f7fd fef1 	bl	7f80 <bt_conn_unref>
    a19e:	340a      	adds	r4, #10
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    a1a0:	45a2      	cmp	sl, r4
    a1a2:	d1e6      	bne.n	a172 <disconnected_cb+0x26>
	if (!value_used) {
    a1a4:	b92e      	cbnz	r6, a1b2 <disconnected_cb+0x66>
		if (ccc->cfg_changed) {
    a1a6:	6a2b      	ldr	r3, [r5, #32]
		ccc->value = 0U;
    a1a8:	83ee      	strh	r6, [r5, #30]
		if (ccc->cfg_changed) {
    a1aa:	b113      	cbz	r3, a1b2 <disconnected_cb+0x66>
			ccc->cfg_changed(attr, ccc->value);
    a1ac:	4631      	mov	r1, r6
    a1ae:	4640      	mov	r0, r8
    a1b0:	4798      	blx	r3
}
    a1b2:	2001      	movs	r0, #1
    a1b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a1b8:	4649      	mov	r1, r9
    a1ba:	7a38      	ldrb	r0, [r7, #8]
    a1bc:	f01a fb31 	bl	24822 <bt_addr_le_is_bonded>
    a1c0:	b940      	cbnz	r0, a1d4 <disconnected_cb+0x88>
				if (ccc == &sc_ccc) {
    a1c2:	455d      	cmp	r5, fp
    a1c4:	d102      	bne.n	a1cc <disconnected_cb+0x80>
					sc_clear(conn);
    a1c6:	4638      	mov	r0, r7
    a1c8:	f7ff ff9e 	bl	a108 <sc_clear>
				clear_ccc_cfg(cfg);
    a1cc:	1e60      	subs	r0, r4, #1
    a1ce:	f01b f902 	bl	253d6 <clear_ccc_cfg>
    a1d2:	e7e4      	b.n	a19e <disconnected_cb+0x52>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a1d4:	4649      	mov	r1, r9
    a1d6:	4620      	mov	r0, r4
    a1d8:	f01b f8fa 	bl	253d0 <bt_addr_le_copy>
    a1dc:	e7df      	b.n	a19e <disconnected_cb+0x52>
    a1de:	bf00      	nop
    a1e0:	00009d09 	.word	0x00009d09
    a1e4:	2000067c 	.word	0x2000067c

0000a1e8 <sc_indicate>:
{
    a1e8:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a1ea:	4a16      	ldr	r2, [pc, #88]	; (a244 <sc_indicate+0x5c>)
    a1ec:	f3bf 8f5b 	dmb	ish
    a1f0:	f102 0350 	add.w	r3, r2, #80	; 0x50
    a1f4:	e853 4f00 	ldrex	r4, [r3]
    a1f8:	f044 0c01 	orr.w	ip, r4, #1
    a1fc:	e843 ce00 	strex	lr, ip, [r3]
    a200:	f1be 0f00 	cmp.w	lr, #0
    a204:	d1f6      	bne.n	a1f4 <sc_indicate+0xc>
    a206:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a20a:	f014 0f01 	tst.w	r4, #1
    a20e:	4613      	mov	r3, r2
    a210:	d10a      	bne.n	a228 <sc_indicate+0x40>
		gatt_sc.start = start;
    a212:	8310      	strh	r0, [r2, #24]
		gatt_sc.end = end;
    a214:	8351      	strh	r1, [r2, #26]
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    a216:	2101      	movs	r1, #1
    a218:	480b      	ldr	r0, [pc, #44]	; (a248 <sc_indicate+0x60>)
    a21a:	f01b f916 	bl	2544a <atomic_test_bit>
    a21e:	b978      	cbnz	r0, a240 <sc_indicate+0x58>
}
    a220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a224:	f7ff bbfc 	b.w	9a20 <sc_commit.part.14>
	if (new_start >= *start && new_end <= *end) {
    a228:	8b1c      	ldrh	r4, [r3, #24]
    a22a:	8b52      	ldrh	r2, [r2, #26]
    a22c:	4284      	cmp	r4, r0
    a22e:	d803      	bhi.n	a238 <sc_indicate+0x50>
    a230:	4291      	cmp	r1, r2
    a232:	d905      	bls.n	a240 <sc_indicate+0x58>
		*end = new_end;
    a234:	8359      	strh	r1, [r3, #26]
    a236:	e7ee      	b.n	a216 <sc_indicate+0x2e>
	if (*end < new_end) {
    a238:	4291      	cmp	r1, r2
		*start = new_start;
    a23a:	8318      	strh	r0, [r3, #24]
	if (*end < new_end) {
    a23c:	d9eb      	bls.n	a216 <sc_indicate+0x2e>
    a23e:	e7f9      	b.n	a234 <sc_indicate+0x4c>
}
    a240:	bd10      	pop	{r4, pc}
    a242:	bf00      	nop
    a244:	200017f0 	.word	0x200017f0
    a248:	20001840 	.word	0x20001840

0000a24c <gatt_indicate>:
{
    a24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a250:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    a252:	8a92      	ldrh	r2, [r2, #20]
{
    a254:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a256:	3202      	adds	r2, #2
    a258:	211d      	movs	r1, #29
{
    a25a:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a25c:	f7fe ff98 	bl	9190 <bt_att_create_pdu>
	if (!buf) {
    a260:	4606      	mov	r6, r0
    a262:	b930      	cbnz	r0, a272 <gatt_indicate+0x26>
		BT_WARN("No buffer available to send indication");
    a264:	2157      	movs	r1, #87	; 0x57
    a266:	4821      	ldr	r0, [pc, #132]	; (a2ec <gatt_indicate+0xa0>)
    a268:	f017 fe2f 	bl	21eca <printk>
			return -ENOMEM;
    a26c:	f06f 040b 	mvn.w	r4, #11
    a270:	e01f      	b.n	a2b2 <gatt_indicate+0x66>
    a272:	f100 0508 	add.w	r5, r0, #8
    a276:	2102      	movs	r1, #2
    a278:	4628      	mov	r0, r5
    a27a:	f012 fc45 	bl	1cb08 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    a27e:	4607      	mov	r7, r0
    a280:	8aa1      	ldrh	r1, [r4, #20]
    a282:	f827 9b02 	strh.w	r9, [r7], #2
    a286:	4628      	mov	r0, r5
    a288:	f012 fc3e 	bl	1cb08 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    a28c:	8aa2      	ldrh	r2, [r4, #20]
    a28e:	6921      	ldr	r1, [r4, #16]
    a290:	4638      	mov	r0, r7
    a292:	f019 ff5c 	bl	2414e <memcpy>
	if (!params->func) {
    a296:	68a3      	ldr	r3, [r4, #8]
    a298:	b973      	cbnz	r3, a2b8 <gatt_indicate+0x6c>
		err = bt_att_send(conn, buf, NULL, NULL);
    a29a:	461a      	mov	r2, r3
    a29c:	4631      	mov	r1, r6
    a29e:	4640      	mov	r0, r8
    a2a0:	f7ff fa84 	bl	97ac <bt_att_send>
	if (err) {
    a2a4:	4604      	mov	r4, r0
    a2a6:	b120      	cbz	r0, a2b2 <gatt_indicate+0x66>
		BT_ERR("Error sending ATT PDU: %d", err);
    a2a8:	4622      	mov	r2, r4
    a2aa:	2145      	movs	r1, #69	; 0x45
    a2ac:	4810      	ldr	r0, [pc, #64]	; (a2f0 <gatt_indicate+0xa4>)
    a2ae:	f017 fe0c 	bl	21eca <printk>
}
    a2b2:	4620      	mov	r0, r4
    a2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    a2b8:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    a2bc:	2100      	movs	r1, #0
    a2be:	f7ff f99f 	bl	9600 <bt_att_req_alloc>
		if (!req) {
    a2c2:	4605      	mov	r5, r0
    a2c4:	2800      	cmp	r0, #0
    a2c6:	d0d1      	beq.n	a26c <gatt_indicate+0x20>
		req->func = func;
    a2c8:	4b0a      	ldr	r3, [pc, #40]	; (a2f4 <gatt_indicate+0xa8>)
    a2ca:	6043      	str	r3, [r0, #4]
		req->destroy = destroy;
    a2cc:	2300      	movs	r3, #0
		req->user_data = params;
    a2ce:	6144      	str	r4, [r0, #20]
		req->buf = buf;
    a2d0:	6106      	str	r6, [r0, #16]
		req->destroy = destroy;
    a2d2:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    a2d4:	4601      	mov	r1, r0
    a2d6:	4640      	mov	r0, r8
    a2d8:	f7ff fad6 	bl	9888 <bt_att_req_send>
		if (err) {
    a2dc:	4604      	mov	r4, r0
    a2de:	2800      	cmp	r0, #0
    a2e0:	d0e7      	beq.n	a2b2 <gatt_indicate+0x66>
			bt_att_req_free(req);
    a2e2:	4628      	mov	r0, r5
    a2e4:	f7ff f9a2 	bl	962c <bt_att_req_free>
    a2e8:	e7de      	b.n	a2a8 <gatt_indicate+0x5c>
    a2ea:	bf00      	nop
    a2ec:	0002bc2e 	.word	0x0002bc2e
    a2f0:	0002bc5a 	.word	0x0002bc5a
    a2f4:	000252f9 	.word	0x000252f9

0000a2f8 <notify_cb>:
{
    a2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a2fc:	4b38      	ldr	r3, [pc, #224]	; (a3e0 <notify_cb+0xe8>)
{
    a2fe:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a300:	6882      	ldr	r2, [r0, #8]
    a302:	429a      	cmp	r2, r3
{
    a304:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    a306:	d003      	beq.n	a310 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    a308:	2001      	movs	r0, #1
}
    a30a:	b003      	add	sp, #12
    a30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    a310:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    a312:	4b34      	ldr	r3, [pc, #208]	; (a3e4 <notify_cb+0xec>)
    a314:	429f      	cmp	r7, r3
    a316:	d019      	beq.n	a34c <notify_cb+0x54>
    a318:	1c7d      	adds	r5, r7, #1
    a31a:	f107 0a1f 	add.w	sl, r7, #31
    a31e:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    a322:	f8b5 2007 	ldrh.w	r2, [r5, #7]
    a326:	89a3      	ldrh	r3, [r4, #12]
    a328:	429a      	cmp	r2, r3
    a32a:	d10b      	bne.n	a344 <notify_cb+0x4c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    a32c:	4629      	mov	r1, r5
    a32e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    a332:	f01a fbad 	bl	24a90 <bt_conn_lookup_addr_le>
		if (!conn) {
    a336:	4606      	mov	r6, r0
    a338:	b120      	cbz	r0, a344 <notify_cb+0x4c>
		if (conn->state != BT_CONN_CONNECTED) {
    a33a:	7a83      	ldrb	r3, [r0, #10]
    a33c:	2b07      	cmp	r3, #7
    a33e:	d02b      	beq.n	a398 <notify_cb+0xa0>
			bt_conn_unref(conn);
    a340:	f7fd fe1e 	bl	7f80 <bt_conn_unref>
			continue;
    a344:	350a      	adds	r5, #10
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    a346:	4555      	cmp	r5, sl
    a348:	d1eb      	bne.n	a322 <notify_cb+0x2a>
    a34a:	e7dd      	b.n	a308 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    a34c:	2600      	movs	r6, #0
    a34e:	4d26      	ldr	r5, [pc, #152]	; (a3e8 <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    a350:	46b1      	mov	r9, r6
    a352:	2207      	movs	r2, #7
    a354:	4669      	mov	r1, sp
    a356:	4628      	mov	r0, r5
    a358:	f8cd 9000 	str.w	r9, [sp]
    a35c:	f8cd 9003 	str.w	r9, [sp, #3]
    a360:	f019 fece 	bl	24100 <memcmp>
    a364:	b178      	cbz	r0, a386 <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    a366:	2207      	movs	r2, #7
    a368:	4629      	mov	r1, r5
    a36a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    a36e:	f7fd ff51 	bl	8214 <bt_conn_lookup_state_le>
			if (!conn) {
    a372:	b970      	cbnz	r0, a392 <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
    a374:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    a376:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    a37a:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    a37c:	4629      	mov	r1, r5
    a37e:	8853      	ldrh	r3, [r2, #2]
    a380:	8812      	ldrh	r2, [r2, #0]
    a382:	f7ff fc23 	bl	9bcc <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    a386:	3601      	adds	r6, #1
    a388:	2e03      	cmp	r6, #3
    a38a:	f105 050c 	add.w	r5, r5, #12
    a38e:	d1e0      	bne.n	a352 <notify_cb+0x5a>
    a390:	e7c2      	b.n	a318 <notify_cb+0x20>
			bt_conn_unref(conn);
    a392:	f7fd fdf5 	bl	7f80 <bt_conn_unref>
    a396:	e7f6      	b.n	a386 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    a398:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a39a:	b123      	cbz	r3, a3a6 <notify_cb+0xae>
    a39c:	4641      	mov	r1, r8
    a39e:	4798      	blx	r3
    a3a0:	b908      	cbnz	r0, a3a6 <notify_cb+0xae>
			bt_conn_unref(conn);
    a3a2:	4630      	mov	r0, r6
    a3a4:	e7cc      	b.n	a340 <notify_cb+0x48>
		if (data->type == BT_GATT_CCC_INDICATE) {
    a3a6:	89a3      	ldrh	r3, [r4, #12]
    a3a8:	88a1      	ldrh	r1, [r4, #4]
    a3aa:	6922      	ldr	r2, [r4, #16]
    a3ac:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    a3ae:	4630      	mov	r0, r6
		if (data->type == BT_GATT_CCC_INDICATE) {
    a3b0:	d110      	bne.n	a3d4 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
    a3b2:	f7ff ff4b 	bl	a24c <gatt_indicate>
			if (err == 0) {
    a3b6:	4681      	mov	r9, r0
    a3b8:	b918      	cbnz	r0, a3c2 <notify_cb+0xca>
				data->ind_params->_ref++;
    a3ba:	6922      	ldr	r2, [r4, #16]
    a3bc:	7d93      	ldrb	r3, [r2, #22]
    a3be:	3301      	adds	r3, #1
    a3c0:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    a3c2:	4630      	mov	r0, r6
    a3c4:	f7fd fddc 	bl	7f80 <bt_conn_unref>
		if (err < 0) {
    a3c8:	f1b9 0f00 	cmp.w	r9, #0
    a3cc:	db06      	blt.n	a3dc <notify_cb+0xe4>
		data->err = 0;
    a3ce:	f8c4 b008 	str.w	fp, [r4, #8]
    a3d2:	e7b7      	b.n	a344 <notify_cb+0x4c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    a3d4:	f7ff fe1e 	bl	a014 <gatt_notify>
    a3d8:	4681      	mov	r9, r0
    a3da:	e7f2      	b.n	a3c2 <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    a3dc:	2000      	movs	r0, #0
    a3de:	e794      	b.n	a30a <notify_cb+0x12>
    a3e0:	00009d09 	.word	0x00009d09
    a3e4:	2000067c 	.word	0x2000067c
    a3e8:	20004367 	.word	0x20004367

0000a3ec <bt_gatt_init>:
{
    a3ec:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a3ee:	4b22      	ldr	r3, [pc, #136]	; (a478 <bt_gatt_init+0x8c>)
    a3f0:	f3bf 8f5b 	dmb	ish
    a3f4:	2201      	movs	r2, #1
    a3f6:	e853 1f00 	ldrex	r1, [r3]
    a3fa:	2900      	cmp	r1, #0
    a3fc:	d103      	bne.n	a406 <bt_gatt_init+0x1a>
    a3fe:	e843 2000 	strex	r0, r2, [r3]
    a402:	2800      	cmp	r0, #0
    a404:	d1f7      	bne.n	a3f6 <bt_gatt_init+0xa>
    a406:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    a40a:	d134      	bne.n	a476 <bt_gatt_init+0x8a>
    a40c:	f3bf 8f5b 	dmb	ish
    a410:	4b1a      	ldr	r3, [pc, #104]	; (a47c <bt_gatt_init+0x90>)
    a412:	e853 1f00 	ldrex	r1, [r3]
    a416:	2900      	cmp	r1, #0
    a418:	d103      	bne.n	a422 <bt_gatt_init+0x36>
    a41a:	e843 2000 	strex	r0, r2, [r3]
    a41e:	2800      	cmp	r0, #0
    a420:	d1f7      	bne.n	a412 <bt_gatt_init+0x26>
    a422:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    a426:	d101      	bne.n	a42c <bt_gatt_init+0x40>
    a428:	f7ff fad4 	bl	99d4 <bt_gatt_service_init.part.12>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a42c:	4c14      	ldr	r4, [pc, #80]	; (a480 <bt_gatt_init+0x94>)
    a42e:	2230      	movs	r2, #48	; 0x30
    a430:	2100      	movs	r1, #0
    a432:	4620      	mov	r0, r4
    a434:	f019 feb5 	bl	241a2 <memset>
    a438:	4b12      	ldr	r3, [pc, #72]	; (a484 <bt_gatt_init+0x98>)
    a43a:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a43c:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a43e:	4c12      	ldr	r4, [pc, #72]	; (a488 <bt_gatt_init+0x9c>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a440:	4812      	ldr	r0, [pc, #72]	; (a48c <bt_gatt_init+0xa0>)
    a442:	2300      	movs	r3, #0
    a444:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a448:	f015 fe86 	bl	20158 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a44c:	f104 0020 	add.w	r0, r4, #32
    a450:	2230      	movs	r2, #48	; 0x30
    a452:	2100      	movs	r1, #0
    a454:	f019 fea5 	bl	241a2 <memset>
    a458:	4b0d      	ldr	r3, [pc, #52]	; (a490 <bt_gatt_init+0xa4>)
    a45a:	6263      	str	r3, [r4, #36]	; 0x24
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a45c:	3450      	adds	r4, #80	; 0x50
    a45e:	f3bf 8f5b 	dmb	ish
    a462:	e854 3f00 	ldrex	r3, [r4]
    a466:	f043 0302 	orr.w	r3, r3, #2
    a46a:	e844 3200 	strex	r2, r3, [r4]
    a46e:	2a00      	cmp	r2, #0
    a470:	d1f7      	bne.n	a462 <bt_gatt_init+0x76>
    a472:	f3bf 8f5b 	dmb	ish
}
    a476:	bd10      	pop	{r4, pc}
    a478:	2000299c 	.word	0x2000299c
    a47c:	200029e8 	.word	0x200029e8
    a480:	200017c0 	.word	0x200017c0
    a484:	0002572b 	.word	0x0002572b
    a488:	200017f0 	.word	0x200017f0
    a48c:	20002170 	.word	0x20002170
    a490:	0000ac69 	.word	0x0000ac69

0000a494 <bt_gatt_attr_get_handle>:
{
    a494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
    a498:	4605      	mov	r5, r0
    a49a:	b910      	cbnz	r0, a4a2 <bt_gatt_attr_get_handle+0xe>
		return 0;
    a49c:	2000      	movs	r0, #0
}
    a49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
    a4a2:	8a00      	ldrh	r0, [r0, #16]
    a4a4:	2800      	cmp	r0, #0
    a4a6:	d1fa      	bne.n	a49e <bt_gatt_attr_get_handle+0xa>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a4a8:	4e18      	ldr	r6, [pc, #96]	; (a50c <bt_gatt_attr_get_handle+0x78>)
    a4aa:	4c19      	ldr	r4, [pc, #100]	; (a510 <bt_gatt_attr_get_handle+0x7c>)
    a4ac:	4f19      	ldr	r7, [pc, #100]	; (a514 <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
    a4ae:	f04f 0901 	mov.w	r9, #1
    a4b2:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a4b4:	42b4      	cmp	r4, r6
    a4b6:	d90a      	bls.n	a4ce <bt_gatt_attr_get_handle+0x3a>
    a4b8:	4639      	mov	r1, r7
    a4ba:	4817      	ldr	r0, [pc, #92]	; (a518 <bt_gatt_attr_get_handle+0x84>)
    a4bc:	f240 522d 	movw	r2, #1325	; 0x52d
    a4c0:	f017 fd03 	bl	21eca <printk>
    a4c4:	f240 512d 	movw	r1, #1325	; 0x52d
    a4c8:	4638      	mov	r0, r7
    a4ca:	f017 ffb0 	bl	2242e <assert_post_action>
    a4ce:	4544      	cmp	r4, r8
    a4d0:	d2e4      	bcs.n	a49c <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
    a4d2:	e9d4 c100 	ldrd	ip, r1, [r4]
    a4d6:	4565      	cmp	r5, ip
    a4d8:	d305      	bcc.n	a4e6 <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    a4da:	2214      	movs	r2, #20
    a4dc:	fb02 c301 	mla	r3, r2, r1, ip
    a4e0:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
    a4e2:	429d      	cmp	r5, r3
    a4e4:	d910      	bls.n	a508 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
    a4e6:	eb09 0001 	add.w	r0, r9, r1
    a4ea:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a4ec:	3408      	adds	r4, #8
    a4ee:	4681      	mov	r9, r0
    a4f0:	e7e0      	b.n	a4b4 <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
    a4f2:	fb02 ce03 	mla	lr, r2, r3, ip
    a4f6:	4575      	cmp	r5, lr
    a4f8:	d0d1      	beq.n	a49e <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    a4fa:	3301      	adds	r3, #1
    a4fc:	eb09 0003 	add.w	r0, r9, r3
    a500:	428b      	cmp	r3, r1
    a502:	b280      	uxth	r0, r0
    a504:	d1f5      	bne.n	a4f2 <bt_gatt_attr_get_handle+0x5e>
    a506:	e7f1      	b.n	a4ec <bt_gatt_attr_get_handle+0x58>
    a508:	2300      	movs	r3, #0
    a50a:	e7f7      	b.n	a4fc <bt_gatt_attr_get_handle+0x68>
    a50c:	00028bbc 	.word	0x00028bbc
    a510:	00028bac 	.word	0x00028bac
    a514:	0002bab0 	.word	0x0002bab0
    a518:	0002a026 	.word	0x0002a026

0000a51c <bt_gatt_foreach_attr_type>:
{
    a51c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a520:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
    a524:	9100      	str	r1, [sp, #0]
    a526:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    a528:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a52c:	2c00      	cmp	r4, #0
    a52e:	bf08      	it	eq
    a530:	461c      	moveq	r4, r3
	if (start_handle <= last_static_handle) {
    a532:	4b4f      	ldr	r3, [pc, #316]	; (a670 <bt_gatt_foreach_attr_type+0x154>)
    a534:	881b      	ldrh	r3, [r3, #0]
    a536:	4283      	cmp	r3, r0
{
    a538:	4607      	mov	r7, r0
    a53a:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    a53c:	d267      	bcs.n	a60e <bt_gatt_foreach_attr_type+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a53e:	4b4d      	ldr	r3, [pc, #308]	; (a674 <bt_gatt_foreach_attr_type+0x158>)
    a540:	681d      	ldr	r5, [r3, #0]
    a542:	2d00      	cmp	r5, #0
    a544:	d058      	beq.n	a5f8 <bt_gatt_foreach_attr_type+0xdc>
    a546:	3d08      	subs	r5, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    a548:	f04f 0b14 	mov.w	fp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a54c:	2d00      	cmp	r5, #0
    a54e:	d053      	beq.n	a5f8 <bt_gatt_foreach_attr_type+0xdc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a550:	68ab      	ldr	r3, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    a552:	2b00      	cmp	r3, #0
    a554:	f000 808a 	beq.w	a66c <bt_gatt_foreach_attr_type+0x150>
		if (next) {
    a558:	f1b3 0608 	subs.w	r6, r3, #8
    a55c:	d005      	beq.n	a56a <bt_gatt_foreach_attr_type+0x4e>
			if (next->attrs[0].handle <= start_handle) {
    a55e:	f853 3c08 	ldr.w	r3, [r3, #-8]
    a562:	8a1b      	ldrh	r3, [r3, #16]
    a564:	42bb      	cmp	r3, r7
    a566:	d903      	bls.n	a570 <bt_gatt_foreach_attr_type+0x54>
    a568:	2600      	movs	r6, #0
		for (i = 0; i < svc->attr_count; i++) {
    a56a:	686b      	ldr	r3, [r5, #4]
    a56c:	429e      	cmp	r6, r3
    a56e:	d351      	bcc.n	a614 <bt_gatt_foreach_attr_type+0xf8>
    a570:	68ad      	ldr	r5, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a572:	2d00      	cmp	r5, #0
    a574:	d040      	beq.n	a5f8 <bt_gatt_foreach_attr_type+0xdc>
    a576:	3d08      	subs	r5, #8
    a578:	e7e8      	b.n	a54c <bt_gatt_foreach_attr_type+0x30>
			if (handle + static_svc->attr_count < start_handle) {
    a57a:	6873      	ldr	r3, [r6, #4]
    a57c:	442b      	add	r3, r5
    a57e:	42bb      	cmp	r3, r7
    a580:	d242      	bcs.n	a608 <bt_gatt_foreach_attr_type+0xec>
				handle += static_svc->attr_count;
    a582:	b29d      	uxth	r5, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a584:	3608      	adds	r6, #8
    a586:	4b3c      	ldr	r3, [pc, #240]	; (a678 <bt_gatt_foreach_attr_type+0x15c>)
    a588:	429e      	cmp	r6, r3
    a58a:	d90a      	bls.n	a5a2 <bt_gatt_foreach_attr_type+0x86>
    a58c:	493b      	ldr	r1, [pc, #236]	; (a67c <bt_gatt_foreach_attr_type+0x160>)
    a58e:	483c      	ldr	r0, [pc, #240]	; (a680 <bt_gatt_foreach_attr_type+0x164>)
    a590:	f240 52f1 	movw	r2, #1521	; 0x5f1
    a594:	f017 fc99 	bl	21eca <printk>
    a598:	f240 51f1 	movw	r1, #1521	; 0x5f1
    a59c:	4837      	ldr	r0, [pc, #220]	; (a67c <bt_gatt_foreach_attr_type+0x160>)
    a59e:	f017 ff46 	bl	2242e <assert_post_action>
    a5a2:	4b35      	ldr	r3, [pc, #212]	; (a678 <bt_gatt_foreach_attr_type+0x15c>)
    a5a4:	429e      	cmp	r6, r3
    a5a6:	d3e8      	bcc.n	a57a <bt_gatt_foreach_attr_type+0x5e>
    a5a8:	e7c9      	b.n	a53e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a5aa:	58d1      	ldr	r1, [r2, r3]
    a5ac:	4640      	mov	r0, r8
    a5ae:	f01a f831 	bl	24614 <bt_uuid_cmp>
    a5b2:	b1a0      	cbz	r0, a5de <bt_gatt_foreach_attr_type+0xc2>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a5b4:	3501      	adds	r5, #1
    a5b6:	f10a 0a01 	add.w	sl, sl, #1
    a5ba:	b2ad      	uxth	r5, r5
    a5bc:	6873      	ldr	r3, [r6, #4]
    a5be:	4553      	cmp	r3, sl
    a5c0:	d9e0      	bls.n	a584 <bt_gatt_foreach_attr_type+0x68>
	if (handle > end_handle) {
    a5c2:	9b00      	ldr	r3, [sp, #0]
    a5c4:	429d      	cmp	r5, r3
    a5c6:	d817      	bhi.n	a5f8 <bt_gatt_foreach_attr_type+0xdc>
	if (handle < start_handle) {
    a5c8:	42bd      	cmp	r5, r7
    a5ca:	d3f3      	bcc.n	a5b4 <bt_gatt_foreach_attr_type+0x98>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a5cc:	2314      	movs	r3, #20
    a5ce:	6832      	ldr	r2, [r6, #0]
    a5d0:	fb03 f30a 	mul.w	r3, r3, sl
    a5d4:	eb02 0b03 	add.w	fp, r2, r3
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a5d8:	f1b8 0f00 	cmp.w	r8, #0
    a5dc:	d1e5      	bne.n	a5aa <bt_gatt_foreach_attr_type+0x8e>
	if (attr_data && attr_data != attr->user_data) {
    a5de:	f1b9 0f00 	cmp.w	r9, #0
    a5e2:	d10c      	bne.n	a5fe <bt_gatt_foreach_attr_type+0xe2>
	*num_matches -= 1;
    a5e4:	3c01      	subs	r4, #1
    a5e6:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    a5e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a5ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a5ec:	4629      	mov	r1, r5
    a5ee:	4658      	mov	r0, fp
    a5f0:	4798      	blx	r3
	if (!*num_matches) {
    a5f2:	b10c      	cbz	r4, a5f8 <bt_gatt_foreach_attr_type+0xdc>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a5f4:	2800      	cmp	r0, #0
    a5f6:	d1dd      	bne.n	a5b4 <bt_gatt_foreach_attr_type+0x98>
}
    a5f8:	b003      	add	sp, #12
    a5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    a5fe:	f8db 300c 	ldr.w	r3, [fp, #12]
    a602:	4599      	cmp	r9, r3
    a604:	d1d6      	bne.n	a5b4 <bt_gatt_foreach_attr_type+0x98>
    a606:	e7ed      	b.n	a5e4 <bt_gatt_foreach_attr_type+0xc8>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a608:	f04f 0a00 	mov.w	sl, #0
    a60c:	e7d6      	b.n	a5bc <bt_gatt_foreach_attr_type+0xa0>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a60e:	4e1d      	ldr	r6, [pc, #116]	; (a684 <bt_gatt_foreach_attr_type+0x168>)
		uint16_t handle = 1;
    a610:	2501      	movs	r5, #1
    a612:	e7b8      	b.n	a586 <bt_gatt_foreach_attr_type+0x6a>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    a614:	6829      	ldr	r1, [r5, #0]
	if (handle > end_handle) {
    a616:	9800      	ldr	r0, [sp, #0]
			struct bt_gatt_attr *attr = &svc->attrs[i];
    a618:	fb0b f206 	mul.w	r2, fp, r6
    a61c:	eb01 0a02 	add.w	sl, r1, r2
			if (gatt_foreach_iter(attr, attr->handle,
    a620:	f8ba 3010 	ldrh.w	r3, [sl, #16]
	if (handle > end_handle) {
    a624:	4298      	cmp	r0, r3
    a626:	d3e7      	bcc.n	a5f8 <bt_gatt_foreach_attr_type+0xdc>
	if (handle < start_handle) {
    a628:	429f      	cmp	r7, r3
    a62a:	d818      	bhi.n	a65e <bt_gatt_foreach_attr_type+0x142>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a62c:	f1b8 0f00 	cmp.w	r8, #0
    a630:	d10d      	bne.n	a64e <bt_gatt_foreach_attr_type+0x132>
	if (attr_data && attr_data != attr->user_data) {
    a632:	f1b9 0f00 	cmp.w	r9, #0
    a636:	d114      	bne.n	a662 <bt_gatt_foreach_attr_type+0x146>
	*num_matches -= 1;
    a638:	3c01      	subs	r4, #1
    a63a:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    a63c:	4619      	mov	r1, r3
    a63e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a642:	4650      	mov	r0, sl
    a644:	4798      	blx	r3
	if (!*num_matches) {
    a646:	2c00      	cmp	r4, #0
    a648:	d0d6      	beq.n	a5f8 <bt_gatt_foreach_attr_type+0xdc>
			if (gatt_foreach_iter(attr, attr->handle,
    a64a:	b940      	cbnz	r0, a65e <bt_gatt_foreach_attr_type+0x142>
    a64c:	e7d4      	b.n	a5f8 <bt_gatt_foreach_attr_type+0xdc>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a64e:	5889      	ldr	r1, [r1, r2]
    a650:	9301      	str	r3, [sp, #4]
    a652:	4640      	mov	r0, r8
    a654:	f019 ffde 	bl	24614 <bt_uuid_cmp>
    a658:	9b01      	ldr	r3, [sp, #4]
    a65a:	2800      	cmp	r0, #0
    a65c:	d0e9      	beq.n	a632 <bt_gatt_foreach_attr_type+0x116>
		for (i = 0; i < svc->attr_count; i++) {
    a65e:	3601      	adds	r6, #1
    a660:	e783      	b.n	a56a <bt_gatt_foreach_attr_type+0x4e>
	if (attr_data && attr_data != attr->user_data) {
    a662:	f8da 200c 	ldr.w	r2, [sl, #12]
    a666:	4591      	cmp	r9, r2
    a668:	d1f9      	bne.n	a65e <bt_gatt_foreach_attr_type+0x142>
    a66a:	e7e5      	b.n	a638 <bt_gatt_foreach_attr_type+0x11c>
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    a66c:	461e      	mov	r6, r3
    a66e:	e77c      	b.n	a56a <bt_gatt_foreach_attr_type+0x4e>
    a670:	20004364 	.word	0x20004364
    a674:	20002994 	.word	0x20002994
    a678:	00028bbc 	.word	0x00028bbc
    a67c:	0002bab0 	.word	0x0002bab0
    a680:	0002a026 	.word	0x0002a026
    a684:	00028bac 	.word	0x00028bac

0000a688 <db_hash_gen>:
{
    a688:	b530      	push	{r4, r5, lr}
    a68a:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    a68c:	2210      	movs	r2, #16
    a68e:	2100      	movs	r1, #0
{
    a690:	4604      	mov	r4, r0
	uint8_t key[16] = {};
    a692:	4668      	mov	r0, sp
    a694:	f019 fd85 	bl	241a2 <memset>
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a698:	aa1c      	add	r2, sp, #112	; 0x70
    a69a:	4669      	mov	r1, sp
    a69c:	a804      	add	r0, sp, #16
    a69e:	f019 fbab 	bl	23df8 <tc_cmac_setup>
    a6a2:	b928      	cbnz	r0, a6b0 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
    a6a4:	4813      	ldr	r0, [pc, #76]	; (a6f4 <db_hash_gen+0x6c>)
    a6a6:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to calculate hash");
    a6a8:	f017 fc0f 	bl	21eca <printk>
}
    a6ac:	b049      	add	sp, #292	; 0x124
    a6ae:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    a6b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a6b4:	2001      	movs	r0, #1
    a6b6:	ab04      	add	r3, sp, #16
    a6b8:	4a0f      	ldr	r2, [pc, #60]	; (a6f8 <db_hash_gen+0x70>)
    a6ba:	f01b f82b 	bl	25714 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    a6be:	a904      	add	r1, sp, #16
    a6c0:	480e      	ldr	r0, [pc, #56]	; (a6fc <db_hash_gen+0x74>)
    a6c2:	f019 fc2e 	bl	23f22 <tc_cmac_final>
    a6c6:	b910      	cbnz	r0, a6ce <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
    a6c8:	2145      	movs	r1, #69	; 0x45
    a6ca:	480d      	ldr	r0, [pc, #52]	; (a700 <db_hash_gen+0x78>)
    a6cc:	e7ec      	b.n	a6a8 <db_hash_gen+0x20>
    a6ce:	4b0b      	ldr	r3, [pc, #44]	; (a6fc <db_hash_gen+0x74>)
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    a6d0:	2200      	movs	r2, #0
    a6d2:	f103 0110 	add.w	r1, r3, #16
    a6d6:	3201      	adds	r2, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
    a6d8:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    a6da:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    a6de:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    a6e2:	2a08      	cmp	r2, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
    a6e4:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    a6e6:	d1f6      	bne.n	a6d6 <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    a6e8:	2c00      	cmp	r4, #0
    a6ea:	d0df      	beq.n	a6ac <db_hash_gen+0x24>
		db_hash_store();
    a6ec:	f7ff f934 	bl	9958 <db_hash_store>
    a6f0:	e7dc      	b.n	a6ac <db_hash_gen+0x24>
    a6f2:	bf00      	nop
    a6f4:	0002bb99 	.word	0x0002bb99
    a6f8:	00025329 	.word	0x00025329
    a6fc:	20004501 	.word	0x20004501
    a700:	0002bbb7 	.word	0x0002bbb7

0000a704 <db_hash_commit>:
{
    a704:	b508      	push	{r3, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    a706:	480f      	ldr	r0, [pc, #60]	; (a744 <db_hash_commit+0x40>)
    a708:	f015 fd96 	bl	20238 <k_delayed_work_cancel>
	if (!err) {
    a70c:	b908      	cbnz	r0, a712 <db_hash_commit+0xe>
		db_hash_gen(false);
    a70e:	f7ff ffbb 	bl	a688 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    a712:	2210      	movs	r2, #16
    a714:	490c      	ldr	r1, [pc, #48]	; (a748 <db_hash_commit+0x44>)
    a716:	480d      	ldr	r0, [pc, #52]	; (a74c <db_hash_commit+0x48>)
    a718:	f019 fcf2 	bl	24100 <memcmp>
    a71c:	b948      	cbnz	r0, a732 <db_hash_commit+0x2e>
		k_delayed_work_cancel(&gatt_sc.work);
    a71e:	480c      	ldr	r0, [pc, #48]	; (a750 <db_hash_commit+0x4c>)
    a720:	f015 fd8a 	bl	20238 <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a724:	f06f 0101 	mvn.w	r1, #1
    a728:	480a      	ldr	r0, [pc, #40]	; (a754 <db_hash_commit+0x50>)
    a72a:	f01a fe62 	bl	253f2 <atomic_and>
}
    a72e:	2000      	movs	r0, #0
    a730:	bd08      	pop	{r3, pc}
	sc_indicate(0x0001, 0xffff);
    a732:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a736:	2001      	movs	r0, #1
    a738:	f7ff fd56 	bl	a1e8 <sc_indicate>
	db_hash_store();
    a73c:	f7ff f90c 	bl	9958 <db_hash_store>
	return 0;
    a740:	e7f5      	b.n	a72e <db_hash_commit+0x2a>
    a742:	bf00      	nop
    a744:	200017c0 	.word	0x200017c0
    a748:	20004501 	.word	0x20004501
    a74c:	20004511 	.word	0x20004511
    a750:	20001810 	.word	0x20001810
    a754:	20001840 	.word	0x20001840

0000a758 <bt_gatt_service_register>:
{
    a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(svc, "invalid parameters\n");
    a75c:	4604      	mov	r4, r0
{
    a75e:	b085      	sub	sp, #20
	__ASSERT(svc, "invalid parameters\n");
    a760:	b950      	cbnz	r0, a778 <bt_gatt_service_register+0x20>
    a762:	4972      	ldr	r1, [pc, #456]	; (a92c <bt_gatt_service_register+0x1d4>)
    a764:	4872      	ldr	r0, [pc, #456]	; (a930 <bt_gatt_service_register+0x1d8>)
    a766:	f240 42ae 	movw	r2, #1198	; 0x4ae
    a76a:	f017 fbae 	bl	21eca <printk>
    a76e:	f240 41ae 	movw	r1, #1198	; 0x4ae
    a772:	486e      	ldr	r0, [pc, #440]	; (a92c <bt_gatt_service_register+0x1d4>)
    a774:	f017 fe5b 	bl	2242e <assert_post_action>
	__ASSERT(svc->attrs, "invalid parameters\n");
    a778:	6823      	ldr	r3, [r4, #0]
    a77a:	b953      	cbnz	r3, a792 <bt_gatt_service_register+0x3a>
    a77c:	496b      	ldr	r1, [pc, #428]	; (a92c <bt_gatt_service_register+0x1d4>)
    a77e:	486c      	ldr	r0, [pc, #432]	; (a930 <bt_gatt_service_register+0x1d8>)
    a780:	f240 42af 	movw	r2, #1199	; 0x4af
    a784:	f017 fba1 	bl	21eca <printk>
    a788:	f240 41af 	movw	r1, #1199	; 0x4af
    a78c:	4867      	ldr	r0, [pc, #412]	; (a92c <bt_gatt_service_register+0x1d4>)
    a78e:	f017 fe4e 	bl	2242e <assert_post_action>
	__ASSERT(svc->attr_count, "invalid parameters\n");
    a792:	6863      	ldr	r3, [r4, #4]
    a794:	b953      	cbnz	r3, a7ac <bt_gatt_service_register+0x54>
    a796:	4965      	ldr	r1, [pc, #404]	; (a92c <bt_gatt_service_register+0x1d4>)
    a798:	4865      	ldr	r0, [pc, #404]	; (a930 <bt_gatt_service_register+0x1d8>)
    a79a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    a79e:	f017 fb94 	bl	21eca <printk>
    a7a2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
    a7a6:	4861      	ldr	r0, [pc, #388]	; (a92c <bt_gatt_service_register+0x1d4>)
    a7a8:	f017 fe41 	bl	2242e <assert_post_action>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a7ac:	f3bf 8f5b 	dmb	ish
    a7b0:	4b60      	ldr	r3, [pc, #384]	; (a934 <bt_gatt_service_register+0x1dc>)
    a7b2:	2201      	movs	r2, #1
    a7b4:	e853 1f00 	ldrex	r1, [r3]
    a7b8:	2900      	cmp	r1, #0
    a7ba:	d103      	bne.n	a7c4 <bt_gatt_service_register+0x6c>
    a7bc:	e843 2000 	strex	r0, r2, [r3]
    a7c0:	2800      	cmp	r0, #0
    a7c2:	d1f7      	bne.n	a7b4 <bt_gatt_service_register+0x5c>
    a7c4:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    a7c8:	d101      	bne.n	a7ce <bt_gatt_service_register+0x76>
    a7ca:	f7ff f903 	bl	99d4 <bt_gatt_service_init.part.12>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a7ce:	6823      	ldr	r3, [r4, #0]
    a7d0:	2500      	movs	r5, #0
    a7d2:	6818      	ldr	r0, [r3, #0]
    a7d4:	f88d 5004 	strb.w	r5, [sp, #4]
    a7d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    a7dc:	a901      	add	r1, sp, #4
    a7de:	f8ad 3006 	strh.w	r3, [sp, #6]
    a7e2:	f019 ff17 	bl	24614 <bt_uuid_cmp>
    a7e6:	b920      	cbnz	r0, a7f2 <bt_gatt_service_register+0x9a>
		return -EALREADY;
    a7e8:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    a7ec:	b005      	add	sp, #20
    a7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    a7f2:	6823      	ldr	r3, [r4, #0]
    a7f4:	a902      	add	r1, sp, #8
    a7f6:	6818      	ldr	r0, [r3, #0]
    a7f8:	f88d 5008 	strb.w	r5, [sp, #8]
    a7fc:	f641 0301 	movw	r3, #6145	; 0x1801
    a800:	f8ad 300a 	strh.w	r3, [sp, #10]
    a804:	f019 ff06 	bl	24614 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a808:	2800      	cmp	r0, #0
    a80a:	d0ed      	beq.n	a7e8 <bt_gatt_service_register+0x90>
Z_GENLIST_IS_EMPTY(slist)
    a80c:	4d4a      	ldr	r5, [pc, #296]	; (a938 <bt_gatt_service_register+0x1e0>)
	struct bt_gatt_attr *attrs = svc->attrs;
    a80e:	f8d4 8000 	ldr.w	r8, [r4]
	if (sys_slist_is_empty(&db)) {
    a812:	682e      	ldr	r6, [r5, #0]
	uint16_t count = svc->attr_count;
    a814:	f8b4 9004 	ldrh.w	r9, [r4, #4]
	if (sys_slist_is_empty(&db)) {
    a818:	b936      	cbnz	r6, a828 <bt_gatt_service_register+0xd0>
		handle = last_static_handle;
    a81a:	4b48      	ldr	r3, [pc, #288]	; (a93c <bt_gatt_service_register+0x1e4>)
    a81c:	881f      	ldrh	r7, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    a81e:	f8df b128 	ldr.w	fp, [pc, #296]	; a948 <bt_gatt_service_register+0x1f0>
	const struct bt_gatt_attr *attr = NULL;
    a822:	f04f 0a00 	mov.w	sl, #0
    a826:	e01a      	b.n	a85e <bt_gatt_service_register+0x106>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    a828:	686b      	ldr	r3, [r5, #4]
    a82a:	2b00      	cmp	r3, #0
    a82c:	d07c      	beq.n	a928 <bt_gatt_service_register+0x1d0>
	handle = last->attrs[last->attr_count - 1].handle;
    a82e:	e953 3202 	ldrd	r3, r2, [r3, #-8]
    a832:	2114      	movs	r1, #20
    a834:	fb01 3302 	mla	r3, r1, r2, r3
    a838:	f833 7c04 	ldrh.w	r7, [r3, #-4]
    a83c:	463e      	mov	r6, r7
    a83e:	e7ee      	b.n	a81e <bt_gatt_service_register+0xc6>
		if (!attrs->handle) {
    a840:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    a844:	2900      	cmp	r1, #0
    a846:	d134      	bne.n	a8b2 <bt_gatt_service_register+0x15a>
			attrs->handle = ++handle;
    a848:	1c79      	adds	r1, r7, #1
    a84a:	b289      	uxth	r1, r1
    a84c:	f8a8 1010 	strh.w	r1, [r8, #16]
	for (; attrs && count; attrs++, count--) {
    a850:	f109 39ff 	add.w	r9, r9, #4294967295
    a854:	f108 0814 	add.w	r8, r8, #20
    a858:	fa1f f989 	uxth.w	r9, r9
    a85c:	460f      	mov	r7, r1
    a85e:	f1b8 0f00 	cmp.w	r8, #0
    a862:	d002      	beq.n	a86a <bt_gatt_service_register+0x112>
    a864:	f1b9 0f00 	cmp.w	r9, #0
    a868:	d1ea      	bne.n	a840 <bt_gatt_service_register+0xe8>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
    a86a:	b11e      	cbz	r6, a874 <bt_gatt_service_register+0x11c>
    a86c:	6823      	ldr	r3, [r4, #0]
    a86e:	8a18      	ldrh	r0, [r3, #16]
    a870:	4286      	cmp	r6, r0
    a872:	d234      	bcs.n	a8de <bt_gatt_service_register+0x186>
	parent->next = child;
    a874:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
    a876:	f104 0308 	add.w	r3, r4, #8
    a87a:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    a87c:	686a      	ldr	r2, [r5, #4]
    a87e:	2a00      	cmp	r2, #0
    a880:	d142      	bne.n	a908 <bt_gatt_service_register+0x1b0>
	list->head = node;
    a882:	e9c5 3300 	strd	r3, r3, [r5]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a886:	f3bf 8f5b 	dmb	ish
    a88a:	4b2d      	ldr	r3, [pc, #180]	; (a940 <bt_gatt_service_register+0x1e8>)
    a88c:	6818      	ldr	r0, [r3, #0]
    a88e:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&init)) {
    a892:	2800      	cmp	r0, #0
    a894:	d0aa      	beq.n	a7ec <bt_gatt_service_register+0x94>
		    svc->attrs[svc->attr_count - 1].handle);
    a896:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
    a89a:	2114      	movs	r1, #20
    a89c:	fb01 2303 	mla	r3, r1, r3, r2
    a8a0:	8a10      	ldrh	r0, [r2, #16]
    a8a2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    a8a6:	f7ff fc9f 	bl	a1e8 <sc_indicate>
	db_changed();
    a8aa:	f7ff fb83 	bl	9fb4 <db_changed>
	return 0;
    a8ae:	2000      	movs	r0, #0
    a8b0:	e79c      	b.n	a7ec <bt_gatt_service_register+0x94>
		} else if (attrs->handle > handle) {
    a8b2:	42b9      	cmp	r1, r7
    a8b4:	d8cc      	bhi.n	a850 <bt_gatt_service_register+0xf8>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    a8b6:	ab03      	add	r3, sp, #12
    a8b8:	465a      	mov	r2, fp
    a8ba:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
    a8bc:	f8cd a00c 	str.w	sl, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    a8c0:	f01a ff28 	bl	25714 <bt_gatt_foreach_attr>
	return attr;
    a8c4:	9b03      	ldr	r3, [sp, #12]
		} else if (find_attr(attrs->handle)) {
    a8c6:	b143      	cbz	r3, a8da <bt_gatt_service_register+0x182>
			BT_ERR("Unable to register handle 0x%04x",
    a8c8:	481e      	ldr	r0, [pc, #120]	; (a944 <bt_gatt_service_register+0x1ec>)
    a8ca:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    a8ce:	2145      	movs	r1, #69	; 0x45
    a8d0:	f017 fafb 	bl	21eca <printk>
			return -EINVAL;
    a8d4:	f06f 0015 	mvn.w	r0, #21
    a8d8:	e788      	b.n	a7ec <bt_gatt_service_register+0x94>
		} else if (find_attr(attrs->handle)) {
    a8da:	4639      	mov	r1, r7
    a8dc:	e7b8      	b.n	a850 <bt_gatt_service_register+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    a8de:	6829      	ldr	r1, [r5, #0]
    a8e0:	2900      	cmp	r1, #0
    a8e2:	d0d0      	beq.n	a886 <bt_gatt_service_register+0x12e>
    a8e4:	f1a1 0308 	sub.w	r3, r1, #8
    a8e8:	2200      	movs	r2, #0
    a8ea:	2b00      	cmp	r3, #0
    a8ec:	d0cb      	beq.n	a886 <bt_gatt_service_register+0x12e>
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
    a8ee:	681e      	ldr	r6, [r3, #0]
    a8f0:	8a36      	ldrh	r6, [r6, #16]
    a8f2:	4286      	cmp	r6, r0
    a8f4:	d911      	bls.n	a91a <bt_gatt_service_register+0x1c2>
			if (prev) {
    a8f6:	f104 0308 	add.w	r3, r4, #8
    a8fa:	b142      	cbz	r2, a90e <bt_gatt_service_register+0x1b6>
Z_GENLIST_INSERT(slist, snode)
    a8fc:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
    a8fe:	60a1      	str	r1, [r4, #8]
Z_GENLIST_INSERT(slist, snode)
    a900:	2900      	cmp	r1, #0
    a902:	d0bb      	beq.n	a87c <bt_gatt_service_register+0x124>
	parent->next = child;
    a904:	6093      	str	r3, [r2, #8]
	if (err < 0) {
    a906:	e7be      	b.n	a886 <bt_gatt_service_register+0x12e>
    a908:	6013      	str	r3, [r2, #0]
	list->tail = node;
    a90a:	606b      	str	r3, [r5, #4]
    a90c:	e7bb      	b.n	a886 <bt_gatt_service_register+0x12e>
Z_GENLIST_PREPEND(slist, snode)
    a90e:	686a      	ldr	r2, [r5, #4]
	parent->next = child;
    a910:	60a1      	str	r1, [r4, #8]
	list->head = node;
    a912:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    a914:	2a00      	cmp	r2, #0
    a916:	d1b6      	bne.n	a886 <bt_gatt_service_register+0x12e>
    a918:	e7f7      	b.n	a90a <bt_gatt_service_register+0x1b2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a91a:	689e      	ldr	r6, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    a91c:	2e00      	cmp	r6, #0
    a91e:	d0b2      	beq.n	a886 <bt_gatt_service_register+0x12e>
    a920:	461a      	mov	r2, r3
    a922:	f1a6 0308 	sub.w	r3, r6, #8
    a926:	e7e0      	b.n	a8ea <bt_gatt_service_register+0x192>
	handle = last->attrs[last->attr_count - 1].handle;
    a928:	681b      	ldr	r3, [r3, #0]
    a92a:	deff      	udf	#255	; 0xff
    a92c:	0002bab0 	.word	0x0002bab0
    a930:	0002a026 	.word	0x0002a026
    a934:	200029e8 	.word	0x200029e8
    a938:	20002994 	.word	0x20002994
    a93c:	20004364 	.word	0x20004364
    a940:	2000299c 	.word	0x2000299c
    a944:	0002bae0 	.word	0x0002bae0
    a948:	000252cf 	.word	0x000252cf

0000a94c <ccc_set_direct>:
{
    a94c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a950:	b0b9      	sub	sp, #228	; 0xe4
    a952:	4689      	mov	r9, r1
    a954:	4617      	mov	r7, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    a956:	492a      	ldr	r1, [pc, #168]	; (aa00 <ccc_set_direct+0xb4>)
    a958:	9840      	ldr	r0, [sp, #256]	; 0x100
    a95a:	466a      	mov	r2, sp
{
    a95c:	4698      	mov	r8, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    a95e:	f018 f8f5 	bl	22b4c <settings_name_steq>
    a962:	b948      	cbnz	r0, a978 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
    a964:	2145      	movs	r1, #69	; 0x45
    a966:	4827      	ldr	r0, [pc, #156]	; (aa04 <ccc_set_direct+0xb8>)
    a968:	f017 faaf 	bl	21eca <printk>
    a96c:	f06f 0515 	mvn.w	r5, #21
}
    a970:	4628      	mov	r0, r5
    a972:	b039      	add	sp, #228	; 0xe4
    a974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    a978:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
    a97a:	a901      	add	r1, sp, #4
    a97c:	4620      	mov	r0, r4
    a97e:	f018 f905 	bl	22b8c <settings_name_next>
		if (!name) {
    a982:	b93c      	cbnz	r4, a994 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
    a984:	2145      	movs	r1, #69	; 0x45
    a986:	4820      	ldr	r0, [pc, #128]	; (aa08 <ccc_set_direct+0xbc>)
    a988:	f017 fa9f 	bl	21eca <printk>
			return -EINVAL;
    a98c:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    a990:	4625      	mov	r5, r4
    a992:	e7ed      	b.n	a970 <ccc_set_direct+0x24>
		} else if (!next) {
    a994:	9801      	ldr	r0, [sp, #4]
    a996:	b970      	cbnz	r0, a9b6 <ccc_set_direct+0x6a>
		err = bt_settings_decode_key(name, &addr);
    a998:	ae02      	add	r6, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    a99a:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    a99e:	4631      	mov	r1, r6
    a9a0:	4620      	mov	r0, r4
    a9a2:	f019 fc5e 	bl	24262 <bt_settings_decode_key>
		if (err) {
    a9a6:	4605      	mov	r5, r0
    a9a8:	b150      	cbz	r0, a9c0 <ccc_set_direct+0x74>
			BT_ERR("Unable to decode address %s", log_strdup(name));
    a9aa:	4622      	mov	r2, r4
    a9ac:	2145      	movs	r1, #69	; 0x45
    a9ae:	4817      	ldr	r0, [pc, #92]	; (aa0c <ccc_set_direct+0xc0>)
    a9b0:	f017 fa8b 	bl	21eca <printk>
    a9b4:	e7ea      	b.n	a98c <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
    a9b6:	220a      	movs	r2, #10
    a9b8:	2100      	movs	r1, #0
    a9ba:	f019 faf6 	bl	23faa <strtol>
    a9be:	e7eb      	b.n	a998 <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
    a9c0:	9604      	str	r6, [sp, #16]
		if (len_rd) {
    a9c2:	f1b9 0f00 	cmp.w	r9, #0
    a9c6:	d017      	beq.n	a9f8 <ccc_set_direct+0xac>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    a9c8:	ae08      	add	r6, sp, #32
    a9ca:	22c0      	movs	r2, #192	; 0xc0
    a9cc:	4631      	mov	r1, r6
    a9ce:	4640      	mov	r0, r8
    a9d0:	47b8      	blx	r7
			if (len < 0) {
    a9d2:	1e04      	subs	r4, r0, #0
    a9d4:	da05      	bge.n	a9e2 <ccc_set_direct+0x96>
				BT_ERR("Failed to decode value (err %zd)", len);
    a9d6:	4622      	mov	r2, r4
    a9d8:	2145      	movs	r1, #69	; 0x45
    a9da:	480d      	ldr	r0, [pc, #52]	; (aa10 <ccc_set_direct+0xc4>)
    a9dc:	f017 fa75 	bl	21eca <printk>
				return len;
    a9e0:	e7d6      	b.n	a990 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
    a9e2:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    a9e4:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    a9e6:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    a9e8:	ab04      	add	r3, sp, #16
    a9ea:	4a0a      	ldr	r2, [pc, #40]	; (aa14 <ccc_set_direct+0xc8>)
    a9ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a9f0:	2001      	movs	r0, #1
    a9f2:	f01a fe8f 	bl	25714 <bt_gatt_foreach_attr>
	return 0;
    a9f6:	e7bb      	b.n	a970 <ccc_set_direct+0x24>
			load.count = 0;
    a9f8:	e9cd 0006 	strd	r0, r0, [sp, #24]
    a9fc:	e7f4      	b.n	a9e8 <ccc_set_direct+0x9c>
    a9fe:	bf00      	nop
    aa00:	0002bb29 	.word	0x0002bb29
    aa04:	0002bb30 	.word	0x0002bb30
    aa08:	0002ac40 	.word	0x0002ac40
    aa0c:	0002bce6 	.word	0x0002bce6
    aa10:	0002bbd5 	.word	0x0002bbd5
    aa14:	00009ad5 	.word	0x00009ad5

0000aa18 <bt_gatt_notify_cb>:
{
    aa18:	b530      	push	{r4, r5, lr}
    aa1a:	4604      	mov	r4, r0
    aa1c:	b08d      	sub	sp, #52	; 0x34
	__ASSERT(params, "invalid parameters\n");
    aa1e:	460d      	mov	r5, r1
    aa20:	b951      	cbnz	r1, aa38 <bt_gatt_notify_cb+0x20>
    aa22:	4941      	ldr	r1, [pc, #260]	; (ab28 <bt_gatt_notify_cb+0x110>)
    aa24:	4841      	ldr	r0, [pc, #260]	; (ab2c <bt_gatt_notify_cb+0x114>)
    aa26:	f640 023d 	movw	r2, #2109	; 0x83d
    aa2a:	f017 fa4e 	bl	21eca <printk>
    aa2e:	f640 013d 	movw	r1, #2109	; 0x83d
    aa32:	483d      	ldr	r0, [pc, #244]	; (ab28 <bt_gatt_notify_cb+0x110>)
    aa34:	f017 fcfb 	bl	2242e <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    aa38:	686b      	ldr	r3, [r5, #4]
    aa3a:	b953      	cbnz	r3, aa52 <bt_gatt_notify_cb+0x3a>
    aa3c:	493a      	ldr	r1, [pc, #232]	; (ab28 <bt_gatt_notify_cb+0x110>)
    aa3e:	483b      	ldr	r0, [pc, #236]	; (ab2c <bt_gatt_notify_cb+0x114>)
    aa40:	f640 023e 	movw	r2, #2110	; 0x83e
    aa44:	f017 fa41 	bl	21eca <printk>
    aa48:	f640 013e 	movw	r1, #2110	; 0x83e
    aa4c:	4836      	ldr	r0, [pc, #216]	; (ab28 <bt_gatt_notify_cb+0x110>)
    aa4e:	f017 fcee 	bl	2242e <assert_post_action>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    aa52:	2101      	movs	r1, #1
    aa54:	4836      	ldr	r0, [pc, #216]	; (ab30 <bt_gatt_notify_cb+0x118>)
    aa56:	f01a fcf8 	bl	2544a <atomic_test_bit>
    aa5a:	2800      	cmp	r0, #0
    aa5c:	d05a      	beq.n	ab14 <bt_gatt_notify_cb+0xfc>
	data.attr = params->attr;
    aa5e:	6868      	ldr	r0, [r5, #4]
    aa60:	9007      	str	r0, [sp, #28]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    aa62:	b114      	cbz	r4, aa6a <bt_gatt_notify_cb+0x52>
    aa64:	7aa3      	ldrb	r3, [r4, #10]
    aa66:	2b07      	cmp	r3, #7
    aa68:	d157      	bne.n	ab1a <bt_gatt_notify_cb+0x102>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    aa6a:	f7ff fd13 	bl	a494 <bt_gatt_attr_get_handle>
    aa6e:	f8ad 0020 	strh.w	r0, [sp, #32]
	if (!data.handle) {
    aa72:	b918      	cbnz	r0, aa7c <bt_gatt_notify_cb+0x64>
		return -ENOENT;
    aa74:	f06f 0001 	mvn.w	r0, #1
}
    aa78:	b00d      	add	sp, #52	; 0x34
    aa7a:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    aa7c:	682a      	ldr	r2, [r5, #0]
    aa7e:	b9aa      	cbnz	r2, aaac <bt_gatt_notify_cb+0x94>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    aa80:	9b07      	ldr	r3, [sp, #28]
    aa82:	6818      	ldr	r0, [r3, #0]
    aa84:	2300      	movs	r3, #0
    aa86:	f88d 3014 	strb.w	r3, [sp, #20]
    aa8a:	a905      	add	r1, sp, #20
    aa8c:	f642 0303 	movw	r3, #10243	; 0x2803
    aa90:	f8ad 3016 	strh.w	r3, [sp, #22]
    aa94:	f019 fdbe 	bl	24614 <bt_uuid_cmp>
    aa98:	b1c0      	cbz	r0, aacc <bt_gatt_notify_cb+0xb4>
	if (conn) {
    aa9a:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    aa9e:	b1fc      	cbz	r4, aae0 <bt_gatt_notify_cb+0xc8>
		return gatt_notify(conn, data.handle, params);
    aaa0:	4601      	mov	r1, r0
    aaa2:	462a      	mov	r2, r5
    aaa4:	4620      	mov	r0, r4
    aaa6:	f7ff fab5 	bl	a014 <gatt_notify>
    aaaa:	e7e5      	b.n	aa78 <bt_gatt_notify_cb+0x60>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    aaac:	a907      	add	r1, sp, #28
    aaae:	9102      	str	r1, [sp, #8]
    aab0:	4920      	ldr	r1, [pc, #128]	; (ab34 <bt_gatt_notify_cb+0x11c>)
    aab2:	9101      	str	r1, [sp, #4]
    aab4:	2101      	movs	r1, #1
	found->attr = NULL;
    aab6:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    aab8:	9100      	str	r1, [sp, #0]
    aaba:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    aabe:	9307      	str	r3, [sp, #28]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    aac0:	f7ff fd2c 	bl	a51c <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    aac4:	9b07      	ldr	r3, [sp, #28]
    aac6:	2b00      	cmp	r3, #0
    aac8:	d1da      	bne.n	aa80 <bt_gatt_notify_cb+0x68>
    aaca:	e7d3      	b.n	aa74 <bt_gatt_notify_cb+0x5c>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    aacc:	9807      	ldr	r0, [sp, #28]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    aace:	68c3      	ldr	r3, [r0, #12]
    aad0:	799b      	ldrb	r3, [r3, #6]
    aad2:	06db      	lsls	r3, r3, #27
    aad4:	d524      	bpl.n	ab20 <bt_gatt_notify_cb+0x108>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    aad6:	f01a fdcf 	bl	25678 <bt_gatt_attr_value_handle>
    aada:	f8ad 0020 	strh.w	r0, [sp, #32]
    aade:	e7dc      	b.n	aa9a <bt_gatt_notify_cb+0x82>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    aae0:	f642 1202 	movw	r2, #10498	; 0x2902
    aae4:	f8ad 201a 	strh.w	r2, [sp, #26]
    aae8:	aa07      	add	r2, sp, #28
	data.err = -ENOTCONN;
    aaea:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    aaee:	9202      	str	r2, [sp, #8]
    aaf0:	4a11      	ldr	r2, [pc, #68]	; (ab38 <bt_gatt_notify_cb+0x120>)
	data.err = -ENOTCONN;
    aaf2:	9309      	str	r3, [sp, #36]	; 0x24
	data.type = BT_GATT_CCC_NOTIFY;
    aaf4:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    aaf6:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    aafa:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    aafe:	aa06      	add	r2, sp, #24
    ab00:	4623      	mov	r3, r4
    ab02:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    ab06:	950b      	str	r5, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    ab08:	f88d 4018 	strb.w	r4, [sp, #24]
    ab0c:	f7ff fd06 	bl	a51c <bt_gatt_foreach_attr_type>
	return data.err;
    ab10:	9809      	ldr	r0, [sp, #36]	; 0x24
    ab12:	e7b1      	b.n	aa78 <bt_gatt_notify_cb+0x60>
		return -EAGAIN;
    ab14:	f06f 000a 	mvn.w	r0, #10
    ab18:	e7ae      	b.n	aa78 <bt_gatt_notify_cb+0x60>
		return -ENOTCONN;
    ab1a:	f06f 0038 	mvn.w	r0, #56	; 0x38
    ab1e:	e7ab      	b.n	aa78 <bt_gatt_notify_cb+0x60>
			return -EINVAL;
    ab20:	f06f 0015 	mvn.w	r0, #21
    ab24:	e7a8      	b.n	aa78 <bt_gatt_notify_cb+0x60>
    ab26:	bf00      	nop
    ab28:	0002bab0 	.word	0x0002bab0
    ab2c:	0002a026 	.word	0x0002a026
    ab30:	2000022c 	.word	0x2000022c
    ab34:	0002531d 	.word	0x0002531d
    ab38:	0000a2f9 	.word	0x0000a2f9

0000ab3c <bt_gatt_indicate>:
{
    ab3c:	b530      	push	{r4, r5, lr}
    ab3e:	4605      	mov	r5, r0
    ab40:	b08d      	sub	sp, #52	; 0x34
	__ASSERT(params, "invalid parameters\n");
    ab42:	460c      	mov	r4, r1
    ab44:	b951      	cbnz	r1, ab5c <bt_gatt_indicate+0x20>
    ab46:	4943      	ldr	r1, [pc, #268]	; (ac54 <bt_gatt_indicate+0x118>)
    ab48:	4843      	ldr	r0, [pc, #268]	; (ac58 <bt_gatt_indicate+0x11c>)
    ab4a:	f640 0289 	movw	r2, #2185	; 0x889
    ab4e:	f017 f9bc 	bl	21eca <printk>
    ab52:	f640 0189 	movw	r1, #2185	; 0x889
    ab56:	483f      	ldr	r0, [pc, #252]	; (ac54 <bt_gatt_indicate+0x118>)
    ab58:	f017 fc69 	bl	2242e <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    ab5c:	6863      	ldr	r3, [r4, #4]
    ab5e:	b953      	cbnz	r3, ab76 <bt_gatt_indicate+0x3a>
    ab60:	493c      	ldr	r1, [pc, #240]	; (ac54 <bt_gatt_indicate+0x118>)
    ab62:	483d      	ldr	r0, [pc, #244]	; (ac58 <bt_gatt_indicate+0x11c>)
    ab64:	f640 028a 	movw	r2, #2186	; 0x88a
    ab68:	f017 f9af 	bl	21eca <printk>
    ab6c:	f640 018a 	movw	r1, #2186	; 0x88a
    ab70:	4838      	ldr	r0, [pc, #224]	; (ac54 <bt_gatt_indicate+0x118>)
    ab72:	f017 fc5c 	bl	2242e <assert_post_action>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ab76:	2101      	movs	r1, #1
    ab78:	4838      	ldr	r0, [pc, #224]	; (ac5c <bt_gatt_indicate+0x120>)
    ab7a:	f01a fc66 	bl	2544a <atomic_test_bit>
    ab7e:	2800      	cmp	r0, #0
    ab80:	d05e      	beq.n	ac40 <bt_gatt_indicate+0x104>
	data.attr = params->attr;
    ab82:	6860      	ldr	r0, [r4, #4]
    ab84:	9007      	str	r0, [sp, #28]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    ab86:	b115      	cbz	r5, ab8e <bt_gatt_indicate+0x52>
    ab88:	7aab      	ldrb	r3, [r5, #10]
    ab8a:	2b07      	cmp	r3, #7
    ab8c:	d15b      	bne.n	ac46 <bt_gatt_indicate+0x10a>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    ab8e:	f7ff fc81 	bl	a494 <bt_gatt_attr_get_handle>
    ab92:	f8ad 0020 	strh.w	r0, [sp, #32]
	if (!data.handle) {
    ab96:	b918      	cbnz	r0, aba0 <bt_gatt_indicate+0x64>
		return -ENOENT;
    ab98:	f06f 0001 	mvn.w	r0, #1
}
    ab9c:	b00d      	add	sp, #52	; 0x34
    ab9e:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    aba0:	6822      	ldr	r2, [r4, #0]
    aba2:	b9ba      	cbnz	r2, abd4 <bt_gatt_indicate+0x98>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    aba4:	9b07      	ldr	r3, [sp, #28]
    aba6:	6818      	ldr	r0, [r3, #0]
    aba8:	2300      	movs	r3, #0
    abaa:	f88d 3014 	strb.w	r3, [sp, #20]
    abae:	a905      	add	r1, sp, #20
    abb0:	f642 0303 	movw	r3, #10243	; 0x2803
    abb4:	f8ad 3016 	strh.w	r3, [sp, #22]
    abb8:	f019 fd2c 	bl	24614 <bt_uuid_cmp>
    abbc:	b1d0      	cbz	r0, abf4 <bt_gatt_indicate+0xb8>
	if (conn) {
    abbe:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    abc2:	b30d      	cbz	r5, ac08 <bt_gatt_indicate+0xcc>
		params->_ref = 1;
    abc4:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    abc6:	4601      	mov	r1, r0
		params->_ref = 1;
    abc8:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
    abca:	4622      	mov	r2, r4
    abcc:	4628      	mov	r0, r5
    abce:	f7ff fb3d 	bl	a24c <gatt_indicate>
    abd2:	e7e3      	b.n	ab9c <bt_gatt_indicate+0x60>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    abd4:	a907      	add	r1, sp, #28
    abd6:	9102      	str	r1, [sp, #8]
    abd8:	4921      	ldr	r1, [pc, #132]	; (ac60 <bt_gatt_indicate+0x124>)
    abda:	9101      	str	r1, [sp, #4]
    abdc:	2101      	movs	r1, #1
	found->attr = NULL;
    abde:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    abe0:	9100      	str	r1, [sp, #0]
    abe2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    abe6:	9307      	str	r3, [sp, #28]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    abe8:	f7ff fc98 	bl	a51c <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    abec:	9b07      	ldr	r3, [sp, #28]
    abee:	2b00      	cmp	r3, #0
    abf0:	d1d8      	bne.n	aba4 <bt_gatt_indicate+0x68>
    abf2:	e7d1      	b.n	ab98 <bt_gatt_indicate+0x5c>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    abf4:	9807      	ldr	r0, [sp, #28]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    abf6:	68c3      	ldr	r3, [r0, #12]
    abf8:	799b      	ldrb	r3, [r3, #6]
    abfa:	069b      	lsls	r3, r3, #26
    abfc:	d526      	bpl.n	ac4c <bt_gatt_indicate+0x110>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    abfe:	f01a fd3b 	bl	25678 <bt_gatt_attr_value_handle>
    ac02:	f8ad 0020 	strh.w	r0, [sp, #32]
    ac06:	e7da      	b.n	abbe <bt_gatt_indicate+0x82>
	data.err = -ENOTCONN;
    ac08:	f06f 0338 	mvn.w	r3, #56	; 0x38
    ac0c:	9309      	str	r3, [sp, #36]	; 0x24
	data.type = BT_GATT_CCC_INDICATE;
    ac0e:	2302      	movs	r3, #2
    ac10:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    ac14:	f642 1302 	movw	r3, #10498	; 0x2902
    ac18:	f8ad 301a 	strh.w	r3, [sp, #26]
    ac1c:	ab07      	add	r3, sp, #28
	params->_ref = 0;
    ac1e:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    ac20:	9302      	str	r3, [sp, #8]
    ac22:	4b10      	ldr	r3, [pc, #64]	; (ac64 <bt_gatt_indicate+0x128>)
    ac24:	9301      	str	r3, [sp, #4]
    ac26:	2301      	movs	r3, #1
    ac28:	9300      	str	r3, [sp, #0]
    ac2a:	aa06      	add	r2, sp, #24
    ac2c:	462b      	mov	r3, r5
    ac2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    ac32:	940b      	str	r4, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    ac34:	f88d 5018 	strb.w	r5, [sp, #24]
    ac38:	f7ff fc70 	bl	a51c <bt_gatt_foreach_attr_type>
	return data.err;
    ac3c:	9809      	ldr	r0, [sp, #36]	; 0x24
    ac3e:	e7ad      	b.n	ab9c <bt_gatt_indicate+0x60>
		return -EAGAIN;
    ac40:	f06f 000a 	mvn.w	r0, #10
    ac44:	e7aa      	b.n	ab9c <bt_gatt_indicate+0x60>
		return -ENOTCONN;
    ac46:	f06f 0038 	mvn.w	r0, #56	; 0x38
    ac4a:	e7a7      	b.n	ab9c <bt_gatt_indicate+0x60>
			return -EINVAL;
    ac4c:	f06f 0015 	mvn.w	r0, #21
    ac50:	e7a4      	b.n	ab9c <bt_gatt_indicate+0x60>
    ac52:	bf00      	nop
    ac54:	0002bab0 	.word	0x0002bab0
    ac58:	0002a026 	.word	0x0002a026
    ac5c:	2000022c 	.word	0x2000022c
    ac60:	0002531d 	.word	0x0002531d
    ac64:	0000a2f9 	.word	0x0000a2f9

0000ac68 <sc_process>:
{
    ac68:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    ac6a:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    ac6e:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    ac70:	2101      	movs	r1, #1
    ac72:	4628      	mov	r0, r5
    ac74:	f01a fbe9 	bl	2544a <atomic_test_bit>
    ac78:	b150      	cbz	r0, ac90 <sc_process+0x28>
    ac7a:	4917      	ldr	r1, [pc, #92]	; (acd8 <sc_process+0x70>)
    ac7c:	4817      	ldr	r0, [pc, #92]	; (acdc <sc_process+0x74>)
    ac7e:	f240 32af 	movw	r2, #943	; 0x3af
    ac82:	f017 f922 	bl	21eca <printk>
    ac86:	f240 31af 	movw	r1, #943	; 0x3af
    ac8a:	4813      	ldr	r0, [pc, #76]	; (acd8 <sc_process+0x70>)
    ac8c:	f017 fbcf 	bl	2242e <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
    ac90:	f854 3c08 	ldr.w	r3, [r4, #-8]
    ac94:	9301      	str	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ac96:	f06f 0101 	mvn.w	r1, #1
    ac9a:	4628      	mov	r0, r5
    ac9c:	f01a fba9 	bl	253f2 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    aca0:	4b0f      	ldr	r3, [pc, #60]	; (ace0 <sc_process+0x78>)
    aca2:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    aca6:	4b0f      	ldr	r3, [pc, #60]	; (ace4 <sc_process+0x7c>)
    aca8:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    acac:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    acae:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    acb0:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    acb4:	2304      	movs	r3, #4
	sc->start = 0U;
    acb6:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    acba:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    acbe:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    acc2:	f1a4 0120 	sub.w	r1, r4, #32
    acc6:	f7ff ff39 	bl	ab3c <bt_gatt_indicate>
    acca:	b918      	cbnz	r0, acd4 <sc_process+0x6c>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    accc:	2101      	movs	r1, #1
    acce:	4628      	mov	r0, r5
    acd0:	f01a fbe0 	bl	25494 <atomic_set_bit>
}
    acd4:	b003      	add	sp, #12
    acd6:	bd30      	pop	{r4, r5, pc}
    acd8:	0002bab0 	.word	0x0002bab0
    acdc:	0002a026 	.word	0x0002a026
    ace0:	0002942c 	.word	0x0002942c
    ace4:	00009ead 	.word	0x00009ead

0000ace8 <update_ccc>:
{
    ace8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    acec:	4b32      	ldr	r3, [pc, #200]	; (adb8 <update_ccc+0xd0>)
    acee:	6881      	ldr	r1, [r0, #8]
    acf0:	4299      	cmp	r1, r3
{
    acf2:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    acf4:	d15c      	bne.n	adb0 <update_ccc+0xc8>
	ccc = attr->user_data;
    acf6:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
    acf8:	6815      	ldr	r5, [r2, #0]
				BT_WARN("CCC %p not writable", attr);
    acfa:	f8df 90d4 	ldr.w	r9, [pc, #212]	; add0 <update_ccc+0xe8>
    acfe:	1c7c      	adds	r4, r7, #1
    ad00:	f107 081f 	add.w	r8, r7, #31
		if (!cfg->value ||
    ad04:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    ad08:	b193      	cbz	r3, ad30 <update_ccc+0x48>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    ad0a:	4622      	mov	r2, r4
    ad0c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    ad10:	4628      	mov	r0, r5
    ad12:	f019 fe74 	bl	249fe <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    ad16:	b158      	cbz	r0, ad30 <update_ccc+0x48>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    ad18:	222a      	movs	r2, #42	; 0x2a
    ad1a:	4631      	mov	r1, r6
    ad1c:	4628      	mov	r0, r5
    ad1e:	f01a fd09 	bl	25734 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    ad22:	2803      	cmp	r0, #3
    ad24:	d108      	bne.n	ad38 <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
    ad26:	4632      	mov	r2, r6
    ad28:	2157      	movs	r1, #87	; 0x57
    ad2a:	4648      	mov	r0, r9
    ad2c:	f017 f8cd 	bl	21eca <printk>
				continue;
    ad30:	340a      	adds	r4, #10
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    ad32:	4544      	cmp	r4, r8
    ad34:	d1e6      	bne.n	ad04 <update_ccc+0x1c>
    ad36:	e03b      	b.n	adb0 <update_ccc+0xc8>
		gatt_ccc_changed(attr, ccc);
    ad38:	4639      	mov	r1, r7
    ad3a:	4630      	mov	r0, r6
    ad3c:	f01a faca 	bl	252d4 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    ad40:	4b1e      	ldr	r3, [pc, #120]	; (adbc <update_ccc+0xd4>)
    ad42:	429f      	cmp	r7, r3
    ad44:	d134      	bne.n	adb0 <update_ccc+0xc8>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    ad46:	f105 0188 	add.w	r1, r5, #136	; 0x88
    ad4a:	7a28      	ldrb	r0, [r5, #8]
    ad4c:	f7fe ff1c 	bl	9b88 <find_sc_cfg>
	if (!cfg) {
    ad50:	4604      	mov	r4, r0
    ad52:	b368      	cbz	r0, adb0 <update_ccc+0xc8>
	if (!(cfg->data.start || cfg->data.end)) {
    ad54:	8902      	ldrh	r2, [r0, #8]
    ad56:	8943      	ldrh	r3, [r0, #10]
    ad58:	ea52 0103 	orrs.w	r1, r2, r3
    ad5c:	d028      	beq.n	adb0 <update_ccc+0xc8>
	index = bt_conn_index(conn);
    ad5e:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    ad60:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    ad64:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    ad68:	f7fd fc06 	bl	8578 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    ad6c:	4914      	ldr	r1, [pc, #80]	; (adc0 <update_ccc+0xd8>)
    ad6e:	4a15      	ldr	r2, [pc, #84]	; (adc4 <update_ccc+0xdc>)
    ad70:	2318      	movs	r3, #24
    ad72:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    ad76:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    ad78:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    ad7a:	4a13      	ldr	r2, [pc, #76]	; (adc8 <update_ccc+0xe0>)
    ad7c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    ad7e:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    ad80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
    ad84:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    ad86:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    ad88:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
    ad8c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    ad8e:	4628      	mov	r0, r5
    ad90:	f7ff fed4 	bl	ab3c <bt_gatt_indicate>
    ad94:	b118      	cbz	r0, ad9e <update_ccc+0xb6>
		BT_ERR("SC restore indication failed");
    ad96:	2145      	movs	r1, #69	; 0x45
    ad98:	480c      	ldr	r0, [pc, #48]	; (adcc <update_ccc+0xe4>)
    ad9a:	f017 f896 	bl	21eca <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
    ad9e:	2204      	movs	r2, #4
    ada0:	2100      	movs	r1, #0
    ada2:	f104 0008 	add.w	r0, r4, #8
    ada6:	f019 f9fc 	bl	241a2 <memset>
		sc_store(cfg);
    adaa:	4620      	mov	r0, r4
    adac:	f7fe fdea 	bl	9984 <sc_store>
}
    adb0:	2001      	movs	r0, #1
    adb2:	b003      	add	sp, #12
    adb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    adb8:	00009d09 	.word	0x00009d09
    adbc:	2000067c 	.word	0x2000067c
    adc0:	200029a0 	.word	0x200029a0
    adc4:	0002942c 	.word	0x0002942c
    adc8:	000254f3 	.word	0x000254f3
    adcc:	0002bd7c 	.word	0x0002bd7c
    add0:	0002bd63 	.word	0x0002bd63

0000add4 <bt_gatt_connected>:
{
    add4:	b530      	push	{r4, r5, lr}
    add6:	b08f      	sub	sp, #60	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    add8:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    addc:	4604      	mov	r4, r0
	data.conn = conn;
    adde:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    ade0:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    ade2:	4629      	mov	r1, r5
    ade4:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    ade6:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    adea:	f019 fd1a 	bl	24822 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    adee:	b190      	cbz	r0, ae16 <bt_gatt_connected+0x42>
		if (conn->id) {
    adf0:	7a22      	ldrb	r2, [r4, #8]
    adf2:	b1ca      	cbz	r2, ae28 <bt_gatt_connected+0x54>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    adf4:	ac02      	add	r4, sp, #8
    adf6:	2104      	movs	r1, #4
    adf8:	4620      	mov	r0, r4
    adfa:	f016 ffcb 	bl	21d94 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    adfe:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    ae00:	4a0a      	ldr	r2, [pc, #40]	; (ae2c <bt_gatt_connected+0x58>)
    ae02:	2124      	movs	r1, #36	; 0x24
    ae04:	a805      	add	r0, sp, #20
    ae06:	462b      	mov	r3, r5
    ae08:	f7fa fc86 	bl	5718 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    ae0c:	aa05      	add	r2, sp, #20
    ae0e:	4908      	ldr	r1, [pc, #32]	; (ae30 <bt_gatt_connected+0x5c>)
    ae10:	4610      	mov	r0, r2
    ae12:	f7f8 fab3 	bl	337c <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ae16:	ab03      	add	r3, sp, #12
    ae18:	4a06      	ldr	r2, [pc, #24]	; (ae34 <bt_gatt_connected+0x60>)
    ae1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ae1e:	2001      	movs	r0, #1
    ae20:	f01a fc78 	bl	25714 <bt_gatt_foreach_attr>
}
    ae24:	b00f      	add	sp, #60	; 0x3c
    ae26:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    ae28:	9200      	str	r2, [sp, #0]
    ae2a:	e7e9      	b.n	ae00 <bt_gatt_connected+0x2c>
    ae2c:	0002bb2c 	.word	0x0002bb2c
    ae30:	0000a94d 	.word	0x0000a94d
    ae34:	0000ace9 	.word	0x0000ace9

0000ae38 <db_hash_read>:
{
    ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae3a:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    ae3c:	4810      	ldr	r0, [pc, #64]	; (ae80 <db_hash_read+0x48>)
{
    ae3e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    ae42:	4616      	mov	r6, r2
    ae44:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    ae46:	f015 f9f7 	bl	20238 <k_delayed_work_cancel>
	if (!err) {
    ae4a:	b910      	cbnz	r0, ae52 <db_hash_read+0x1a>
		db_hash_gen(true);
    ae4c:	2001      	movs	r0, #1
    ae4e:	f7ff fc1b 	bl	a688 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    ae52:	2101      	movs	r1, #1
    ae54:	4620      	mov	r0, r4
    ae56:	f01a fc90 	bl	2577a <bt_gatt_change_aware>
	if (offset > value_len) {
    ae5a:	2d10      	cmp	r5, #16
    ae5c:	d80c      	bhi.n	ae78 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
    ae5e:	f1c5 0410 	rsb	r4, r5, #16
    ae62:	42bc      	cmp	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    ae64:	4907      	ldr	r1, [pc, #28]	; (ae84 <db_hash_read+0x4c>)
	len = MIN(buf_len, value_len - offset);
    ae66:	bfa8      	it	ge
    ae68:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    ae6a:	4622      	mov	r2, r4
    ae6c:	4429      	add	r1, r5
    ae6e:	4630      	mov	r0, r6
    ae70:	f019 f96d 	bl	2414e <memcpy>
}
    ae74:	4620      	mov	r0, r4
    ae76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ae78:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    ae7c:	e7fa      	b.n	ae74 <db_hash_read+0x3c>
    ae7e:	bf00      	nop
    ae80:	200017c0 	.word	0x200017c0
    ae84:	20004501 	.word	0x20004501

0000ae88 <bt_gatt_store_ccc>:
{
    ae88:	b570      	push	{r4, r5, r6, lr}
    ae8a:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    ae8c:	2300      	movs	r3, #0
{
    ae8e:	4604      	mov	r4, r0
    ae90:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    ae92:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    ae94:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    ae98:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    ae9a:	4a15      	ldr	r2, [pc, #84]	; (aef0 <bt_gatt_store_ccc+0x68>)
    ae9c:	ab0d      	add	r3, sp, #52	; 0x34
    ae9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    aea2:	2001      	movs	r0, #1
    aea4:	f01a fc36 	bl	25714 <bt_gatt_foreach_attr>
	if (id) {
    aea8:	b1ec      	cbz	r4, aee6 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
    aeaa:	ae03      	add	r6, sp, #12
    aeac:	4622      	mov	r2, r4
    aeae:	2104      	movs	r1, #4
    aeb0:	4630      	mov	r0, r6
    aeb2:	f016 ff6f 	bl	21d94 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    aeb6:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    aeb8:	4a0e      	ldr	r2, [pc, #56]	; (aef4 <bt_gatt_store_ccc+0x6c>)
    aeba:	462b      	mov	r3, r5
    aebc:	2124      	movs	r1, #36	; 0x24
    aebe:	a804      	add	r0, sp, #16
    aec0:	f7fa fc2a 	bl	5718 <bt_settings_encode_key>
	if (save.count) {
    aec4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    aec6:	b182      	cbz	r2, aeea <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
    aec8:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    aeca:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    aecc:	a804      	add	r0, sp, #16
    aece:	f7f8 f9f7 	bl	32c0 <settings_save_one>
	if (err) {
    aed2:	4604      	mov	r4, r0
    aed4:	b120      	cbz	r0, aee0 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
    aed6:	4602      	mov	r2, r0
    aed8:	2145      	movs	r1, #69	; 0x45
    aeda:	4807      	ldr	r0, [pc, #28]	; (aef8 <bt_gatt_store_ccc+0x70>)
    aedc:	f016 fff5 	bl	21eca <printk>
}
    aee0:	4620      	mov	r0, r4
    aee2:	b040      	add	sp, #256	; 0x100
    aee4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    aee6:	9400      	str	r4, [sp, #0]
    aee8:	e7e6      	b.n	aeb8 <bt_gatt_store_ccc+0x30>
		str = NULL;
    aeea:	4611      	mov	r1, r2
    aeec:	e7ee      	b.n	aecc <bt_gatt_store_ccc+0x44>
    aeee:	bf00      	nop
    aef0:	00009a9d 	.word	0x00009a9d
    aef4:	0002bb2c 	.word	0x0002bb2c
    aef8:	0002bb06 	.word	0x0002bb06

0000aefc <bt_gatt_service_unregister>:
{
    aefc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(svc, "invalid parameters\n");
    af00:	4605      	mov	r5, r0
    af02:	b950      	cbnz	r0, af1a <bt_gatt_service_unregister+0x1e>
    af04:	493f      	ldr	r1, [pc, #252]	; (b004 <bt_gatt_service_unregister+0x108>)
    af06:	4840      	ldr	r0, [pc, #256]	; (b008 <bt_gatt_service_unregister+0x10c>)
    af08:	f240 42d1 	movw	r2, #1233	; 0x4d1
    af0c:	f016 ffdd 	bl	21eca <printk>
    af10:	f240 41d1 	movw	r1, #1233	; 0x4d1
    af14:	483b      	ldr	r0, [pc, #236]	; (b004 <bt_gatt_service_unregister+0x108>)
    af16:	f017 fa8a 	bl	2242e <assert_post_action>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    af1a:	4b3c      	ldr	r3, [pc, #240]	; (b00c <bt_gatt_service_unregister+0x110>)
    af1c:	681a      	ldr	r2, [r3, #0]
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
    af1e:	f105 0008 	add.w	r0, r5, #8
    af22:	2100      	movs	r1, #0
    af24:	b922      	cbnz	r2, af30 <bt_gatt_service_unregister+0x34>
		return -ENOENT;
    af26:	f06f 0001 	mvn.w	r0, #1
}
    af2a:	b003      	add	sp, #12
    af2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af30:	4290      	cmp	r0, r2
    af32:	d12d      	bne.n	af90 <bt_gatt_service_unregister+0x94>
Z_GENLIST_REMOVE(slist, snode)
    af34:	68aa      	ldr	r2, [r5, #8]
    af36:	bb29      	cbnz	r1, af84 <bt_gatt_service_unregister+0x88>
    af38:	6859      	ldr	r1, [r3, #4]
	list->head = node;
    af3a:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    af3c:	4288      	cmp	r0, r1
    af3e:	d100      	bne.n	af42 <bt_gatt_service_unregister+0x46>
	list->tail = node;
    af40:	605a      	str	r2, [r3, #4]
	parent->next = child;
    af42:	2600      	movs	r6, #0
		if (attr->write == bt_gatt_attr_write_ccc) {
    af44:	f8df 90cc 	ldr.w	r9, [pc, #204]	; b014 <bt_gatt_service_unregister+0x118>
    af48:	60ae      	str	r6, [r5, #8]
		struct bt_gatt_attr *attr = &svc->attrs[i];
    af4a:	f04f 0814 	mov.w	r8, #20
	ccc->value = 0;
    af4e:	4637      	mov	r7, r6
	for (uint16_t i = 0; i < svc->attr_count; i++) {
    af50:	686a      	ldr	r2, [r5, #4]
    af52:	b2b3      	uxth	r3, r6
    af54:	429a      	cmp	r2, r3
    af56:	d81e      	bhi.n	af96 <bt_gatt_service_unregister+0x9a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    af58:	f3bf 8f5b 	dmb	ish
    af5c:	4b2c      	ldr	r3, [pc, #176]	; (b010 <bt_gatt_service_unregister+0x114>)
    af5e:	6818      	ldr	r0, [r3, #0]
    af60:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&init)) {
    af64:	2800      	cmp	r0, #0
    af66:	d0e0      	beq.n	af2a <bt_gatt_service_unregister+0x2e>
		    svc->attrs[svc->attr_count - 1].handle);
    af68:	e9d5 2300 	ldrd	r2, r3, [r5]
	sc_indicate(svc->attrs[0].handle,
    af6c:	2114      	movs	r1, #20
    af6e:	fb01 2303 	mla	r3, r1, r3, r2
    af72:	8a10      	ldrh	r0, [r2, #16]
    af74:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    af78:	f7ff f936 	bl	a1e8 <sc_indicate>
	db_changed();
    af7c:	f7ff f81a 	bl	9fb4 <db_changed>
	return 0;
    af80:	2000      	movs	r0, #0
    af82:	e7d2      	b.n	af2a <bt_gatt_service_unregister+0x2e>
    af84:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    af86:	685a      	ldr	r2, [r3, #4]
    af88:	4290      	cmp	r0, r2
	list->tail = node;
    af8a:	bf08      	it	eq
    af8c:	6059      	streq	r1, [r3, #4]
    af8e:	e7d8      	b.n	af42 <bt_gatt_service_unregister+0x46>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    af90:	4611      	mov	r1, r2
    af92:	6812      	ldr	r2, [r2, #0]
    af94:	e7c6      	b.n	af24 <bt_gatt_service_unregister+0x28>
		struct bt_gatt_attr *attr = &svc->attrs[i];
    af96:	682a      	ldr	r2, [r5, #0]
    af98:	fb08 2303 	mla	r3, r8, r3, r2
		if (attr->write == bt_gatt_attr_write_ccc) {
    af9c:	689a      	ldr	r2, [r3, #8]
    af9e:	454a      	cmp	r2, r9
    afa0:	d001      	beq.n	afa6 <bt_gatt_service_unregister+0xaa>
    afa2:	3601      	adds	r6, #1
    afa4:	e7d4      	b.n	af50 <bt_gatt_service_unregister+0x54>
			gatt_unregister_ccc(attr->user_data);
    afa6:	68db      	ldr	r3, [r3, #12]
	ccc->value = 0;
    afa8:	83df      	strh	r7, [r3, #30]
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    afaa:	1c5c      	adds	r4, r3, #1
    afac:	f103 0a1f 	add.w	sl, r3, #31
    afb0:	2207      	movs	r2, #7
    afb2:	4669      	mov	r1, sp
    afb4:	4620      	mov	r0, r4
		if (bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    afb6:	9700      	str	r7, [sp, #0]
    afb8:	f8cd 7003 	str.w	r7, [sp, #3]
    afbc:	f019 f8a0 	bl	24100 <memcmp>
    afc0:	b1d8      	cbz	r0, affa <bt_gatt_service_unregister+0xfe>
			conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    afc2:	4621      	mov	r1, r4
    afc4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    afc8:	f019 fd62 	bl	24a90 <bt_conn_lookup_addr_le>
			if (conn) {
    afcc:	b958      	cbnz	r0, afe6 <bt_gatt_service_unregister+0xea>
			    bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    afce:	4621      	mov	r1, r4
    afd0:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    afd4:	f019 fc25 	bl	24822 <bt_addr_le_is_bonded>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    afd8:	b160      	cbz	r0, aff4 <bt_gatt_service_unregister+0xf8>
				bt_gatt_store_ccc(cfg->id, &cfg->peer);
    afda:	4621      	mov	r1, r4
    afdc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    afe0:	f7ff ff52 	bl	ae88 <bt_gatt_store_ccc>
    afe4:	e006      	b.n	aff4 <bt_gatt_service_unregister+0xf8>
				if (conn->state == BT_CONN_CONNECTED) {
    afe6:	f890 b00a 	ldrb.w	fp, [r0, #10]
				bt_conn_unref(conn);
    afea:	f7fc ffc9 	bl	7f80 <bt_conn_unref>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    afee:	f1bb 0f07 	cmp.w	fp, #7
    aff2:	d1ec      	bne.n	afce <bt_gatt_service_unregister+0xd2>
			clear_ccc_cfg(cfg);
    aff4:	1e60      	subs	r0, r4, #1
    aff6:	f01a f9ee 	bl	253d6 <clear_ccc_cfg>
    affa:	340a      	adds	r4, #10
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    affc:	45a2      	cmp	sl, r4
    affe:	d1d7      	bne.n	afb0 <bt_gatt_service_unregister+0xb4>
    b000:	e7cf      	b.n	afa2 <bt_gatt_service_unregister+0xa6>
    b002:	bf00      	nop
    b004:	0002bab0 	.word	0x0002bab0
    b008:	0002a026 	.word	0x0002a026
    b00c:	20002994 	.word	0x20002994
    b010:	2000299c 	.word	0x2000299c
    b014:	00009d09 	.word	0x00009d09

0000b018 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    b018:	b5f0      	push	{r4, r5, r6, r7, lr}
    b01a:	4604      	mov	r4, r0
    b01c:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b01e:	4603      	mov	r3, r0
    b020:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b024:	2001      	movs	r0, #1
    b026:	4a34      	ldr	r2, [pc, #208]	; (b0f8 <bt_gatt_disconnected+0xe0>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b028:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b02c:	f01a fb72 	bl	25714 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b030:	4629      	mov	r1, r5
    b032:	7a20      	ldrb	r0, [r4, #8]
    b034:	f019 fbf5 	bl	24822 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b038:	b378      	cbz	r0, b09a <bt_gatt_disconnected+0x82>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    b03a:	4629      	mov	r1, r5
    b03c:	7a20      	ldrb	r0, [r4, #8]
    b03e:	f7ff ff23 	bl	ae88 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    b042:	4620      	mov	r0, r4
    b044:	f7fe feb8 	bl	9db8 <find_cf_cfg>
	if (!cfg) {
    b048:	4606      	mov	r6, r0
    b04a:	2800      	cmp	r0, #0
    b04c:	d044      	beq.n	b0d8 <bt_gatt_disconnected+0xc0>
		if (conn->id) {
    b04e:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    b050:	3608      	adds	r6, #8
		if (conn->id) {
    b052:	2a00      	cmp	r2, #0
    b054:	d042      	beq.n	b0dc <bt_gatt_disconnected+0xc4>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b056:	af02      	add	r7, sp, #8
    b058:	2104      	movs	r1, #4
    b05a:	4638      	mov	r0, r7
    b05c:	f016 fe9a 	bl	21d94 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    b060:	9700      	str	r7, [sp, #0]
    b062:	462b      	mov	r3, r5
    b064:	4a25      	ldr	r2, [pc, #148]	; (b0fc <bt_gatt_disconnected+0xe4>)
    b066:	2124      	movs	r1, #36	; 0x24
    b068:	a803      	add	r0, sp, #12
    b06a:	f7fa fb55 	bl	5718 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    b06e:	7a23      	ldrb	r3, [r4, #8]
    b070:	2701      	movs	r7, #1
    b072:	b93b      	cbnz	r3, b084 <bt_gatt_disconnected+0x6c>
		bt_settings_encode_key(key, sizeof(key), "cf",
    b074:	2300      	movs	r3, #0
    b076:	9300      	str	r3, [sp, #0]
    b078:	4a20      	ldr	r2, [pc, #128]	; (b0fc <bt_gatt_disconnected+0xe4>)
    b07a:	462b      	mov	r3, r5
    b07c:	2124      	movs	r1, #36	; 0x24
    b07e:	a803      	add	r0, sp, #12
    b080:	f7fa fb4a 	bl	5718 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    b084:	463a      	mov	r2, r7
    b086:	4631      	mov	r1, r6
    b088:	a803      	add	r0, sp, #12
    b08a:	f7f8 f919 	bl	32c0 <settings_save_one>
	if (err) {
    b08e:	4602      	mov	r2, r0
    b090:	b118      	cbz	r0, b09a <bt_gatt_disconnected+0x82>
		BT_ERR("Failed to store Client Features (err %d)", err);
    b092:	2145      	movs	r1, #69	; 0x45
    b094:	481a      	ldr	r0, [pc, #104]	; (b100 <bt_gatt_disconnected+0xe8>)
    b096:	f016 ff18 	bl	21eca <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b09a:	4629      	mov	r1, r5
    b09c:	7a20      	ldrb	r0, [r4, #8]
    b09e:	f019 fbc0 	bl	24822 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    b0a2:	b150      	cbz	r0, b0ba <bt_gatt_disconnected+0xa2>
		struct addr_with_id addr_with_id = {
    b0a4:	7a23      	ldrb	r3, [r4, #8]
    b0a6:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    b0aa:	4a16      	ldr	r2, [pc, #88]	; (b104 <bt_gatt_disconnected+0xec>)
		struct addr_with_id addr_with_id = {
    b0ac:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    b0ae:	ab03      	add	r3, sp, #12
    b0b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b0b4:	2001      	movs	r0, #1
    b0b6:	f01a fb2d 	bl	25714 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    b0ba:	4620      	mov	r0, r4
    b0bc:	f7fe fe7c 	bl	9db8 <find_cf_cfg>
	if (!cfg) {
    b0c0:	4606      	mov	r6, r0
    b0c2:	b138      	cbz	r0, b0d4 <bt_gatt_disconnected+0xbc>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b0c4:	4629      	mov	r1, r5
    b0c6:	7a20      	ldrb	r0, [r4, #8]
    b0c8:	f019 fbab 	bl	24822 <bt_addr_le_is_bonded>
    b0cc:	b940      	cbnz	r0, b0e0 <bt_gatt_disconnected+0xc8>
		clear_cf_cfg(cfg);
    b0ce:	4630      	mov	r0, r6
    b0d0:	f01a f99e 	bl	25410 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    b0d4:	b00d      	add	sp, #52	; 0x34
    b0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
    b0d8:	4607      	mov	r7, r0
    b0da:	e7cb      	b.n	b074 <bt_gatt_disconnected+0x5c>
		if (conn->id) {
    b0dc:	2701      	movs	r7, #1
    b0de:	e7c9      	b.n	b074 <bt_gatt_disconnected+0x5c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b0e0:	4629      	mov	r1, r5
    b0e2:	1c70      	adds	r0, r6, #1
    b0e4:	f01a f974 	bl	253d0 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b0e8:	f06f 0102 	mvn.w	r1, #2
    b0ec:	f106 000c 	add.w	r0, r6, #12
    b0f0:	f01a f97f 	bl	253f2 <atomic_and>
}
    b0f4:	e7ee      	b.n	b0d4 <bt_gatt_disconnected+0xbc>
    b0f6:	bf00      	nop
    b0f8:	0000a14d 	.word	0x0000a14d
    b0fc:	0002bd52 	.word	0x0002bd52
    b100:	0002ba82 	.word	0x0002ba82
    b104:	00009b61 	.word	0x00009b61

0000b108 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    b108:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    b10a:	4c0e      	ldr	r4, [pc, #56]	; (b144 <bt_smp_accept+0x3c>)
    b10c:	6823      	ldr	r3, [r4, #0]
{
    b10e:	4602      	mov	r2, r0
		if (smp->chan.conn) {
    b110:	4625      	mov	r5, r4
    b112:	b16b      	cbz	r3, b130 <bt_smp_accept+0x28>
    b114:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    b118:	b14b      	cbz	r3, b12e <bt_smp_accept+0x26>
    b11a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    b11e:	b17b      	cbz	r3, b140 <bt_smp_accept+0x38>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
    b120:	4809      	ldr	r0, [pc, #36]	; (b148 <bt_smp_accept+0x40>)
    b122:	2145      	movs	r1, #69	; 0x45
    b124:	f016 fed1 	bl	21eca <printk>
    b128:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
    b12c:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b12e:	2301      	movs	r3, #1
		smp->chan.ops = &ops;
    b130:	22c0      	movs	r2, #192	; 0xc0
    b132:	fb02 5303 	mla	r3, r2, r3, r5
    b136:	4a05      	ldr	r2, [pc, #20]	; (b14c <bt_smp_accept+0x44>)
    b138:	605a      	str	r2, [r3, #4]
		return 0;
    b13a:	2000      	movs	r0, #0
		*chan = &smp->chan;
    b13c:	600b      	str	r3, [r1, #0]
		return 0;
    b13e:	e7f5      	b.n	b12c <bt_smp_accept+0x24>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b140:	2302      	movs	r3, #2
    b142:	e7f5      	b.n	b130 <bt_smp_accept+0x28>
    b144:	20001848 	.word	0x20001848
    b148:	0002bd9e 	.word	0x0002bd9e
    b14c:	00029530 	.word	0x00029530

0000b150 <atomic_test_bit.constprop.4>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b150:	4b04      	ldr	r3, [pc, #16]	; (b164 <atomic_test_bit.constprop.4+0x14>)
    b152:	f3bf 8f5b 	dmb	ish
    b156:	6818      	ldr	r0, [r3, #0]
    b158:	f3bf 8f5b 	dmb	ish
}
    b15c:	f000 0001 	and.w	r0, r0, #1
    b160:	4770      	bx	lr
    b162:	bf00      	nop
    b164:	20001ac0 	.word	0x20001ac0

0000b168 <bt_mesh_reset>:

	return -ENOTSUP;
}

void bt_mesh_reset(void)
{
    b168:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    b16a:	f7ff fff1 	bl	b150 <atomic_test_bit.constprop.4>
    b16e:	b378      	cbz	r0, b1d0 <bt_mesh_reset+0x68>
		return;
	}

	bt_mesh.iv_index = 0U;
    b170:	4c18      	ldr	r4, [pc, #96]	; (b1d4 <bt_mesh_reset+0x6c>)
    b172:	2500      	movs	r5, #0
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    b174:	4629      	mov	r1, r5
    b176:	2204      	movs	r2, #4
    b178:	f104 0008 	add.w	r0, r4, #8
	bt_mesh.seq = 0U;
    b17c:	e9c4 5500 	strd	r5, r5, [r4]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    b180:	f019 f80f 	bl	241a2 <memset>

	k_delayed_work_cancel(&bt_mesh.ivu_timer);
    b184:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
    b188:	f015 f856 	bl	20238 <k_delayed_work_cancel>

	bt_mesh_cfg_reset();
    b18c:	f006 fb8c 	bl	118a8 <bt_mesh_cfg_reset>
	bt_mesh_trans_reset();
    b190:	f002 feae 	bl	def0 <bt_mesh_trans_reset>
	bt_mesh_app_keys_reset();
    b194:	f002 f98a 	bl	d4ac <bt_mesh_app_keys_reset>
	bt_mesh_net_keys_reset();
    b198:	f001 fe40 	bl	ce1c <bt_mesh_net_keys_reset>

	bt_mesh_net_loopback_clear(BT_MESH_KEY_ANY);
    b19c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    b1a0:	f001 f95a 	bl	c458 <bt_mesh_net_loopback_clear>

		bt_mesh_lpn_disable(true);
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friends_clear();
    b1a4:	f007 fbd8 	bl	12958 <bt_mesh_friends_clear>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_proxy_gatt_disable();
    b1a8:	f00a f940 	bl	1542c <bt_mesh_proxy_gatt_disable>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_net_clear();
    b1ac:	f01a fc0f 	bl	259ce <bt_mesh_net_clear>
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    b1b0:	4629      	mov	r1, r5
    b1b2:	2210      	movs	r2, #16
    b1b4:	f504 700a 	add.w	r0, r4, #552	; 0x228
    b1b8:	f018 fff3 	bl	241a2 <memset>

	bt_mesh_scan_disable();
    b1bc:	f000 fab6 	bl	b72c <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
    b1c0:	f000 fd5c 	bl	bc7c <bt_mesh_beacon_disable>

	bt_mesh_comp_unprovision();
    b1c4:	f004 fbce 	bl	f964 <bt_mesh_comp_unprovision>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
    b1c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_prov_reset();
    b1cc:	f008 bad2 	b.w	13774 <bt_mesh_prov_reset>
}
    b1d0:	bd38      	pop	{r3, r4, r5, pc}
    b1d2:	bf00      	nop
    b1d4:	20001ab8 	.word	0x20001ab8

0000b1d8 <bt_mesh_start>:
		mod->cb->start(mod);
	}
}

int bt_mesh_start(void)
{
    b1d8:	b538      	push	{r3, r4, r5, lr}
	int err;

	err = bt_mesh_adv_enable();
    b1da:	f006 fe81 	bl	11ee0 <bt_mesh_adv_enable>
	if (err) {
    b1de:	4604      	mov	r4, r0
    b1e0:	b128      	cbz	r0, b1ee <bt_mesh_start+0x16>
		BT_ERR("Failed enabling advertiser");
    b1e2:	2145      	movs	r1, #69	; 0x45
    b1e4:	4814      	ldr	r0, [pc, #80]	; (b238 <bt_mesh_start+0x60>)
    b1e6:	f016 fe70 	bl	21eca <printk>
	bt_mesh_hb_start();

	bt_mesh_model_foreach(model_start, NULL);

	return 0;
}
    b1ea:	4620      	mov	r0, r4
    b1ec:	bd38      	pop	{r3, r4, r5, pc}
	if (bt_mesh_beacon_enabled()) {
    b1ee:	f01a fb49 	bl	25884 <bt_mesh_beacon_enabled>
    b1f2:	b1f0      	cbz	r0, b232 <bt_mesh_start+0x5a>
		bt_mesh_beacon_enable();
    b1f4:	f000 fd32 	bl	bc5c <bt_mesh_beacon_enable>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
    b1f8:	f01a fb5a 	bl	258b0 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    b1fc:	2802      	cmp	r0, #2
    b1fe:	d003      	beq.n	b208 <bt_mesh_start+0x30>
		bt_mesh_proxy_gatt_enable();
    b200:	f00a f8d4 	bl	153ac <bt_mesh_proxy_gatt_enable>
		bt_mesh_adv_update();
    b204:	f006 fe3e 	bl	11e84 <bt_mesh_adv_update>
		bt_mesh_scan_enable();
    b208:	f000 fa6e 	bl	b6e8 <bt_mesh_scan_enable>
		bt_mesh_friend_init();
    b20c:	f007 ff14 	bl	13038 <bt_mesh_friend_init>
		struct bt_mesh_subnet *sub = bt_mesh_subnet_next(NULL);
    b210:	2000      	movs	r0, #0
    b212:	f001 fdeb 	bl	cdec <bt_mesh_subnet_next>
    b216:	4605      	mov	r5, r0
		uint16_t addr = bt_mesh_primary_addr();
    b218:	f004 fbaa 	bl	f970 <bt_mesh_primary_addr>
		bt_mesh_prov_complete(sub->net_idx, addr);
    b21c:	4601      	mov	r1, r0
    b21e:	8ba8      	ldrh	r0, [r5, #28]
    b220:	f008 faa0 	bl	13764 <bt_mesh_prov_complete>
	bt_mesh_hb_start();
    b224:	f003 fee0 	bl	efe8 <bt_mesh_hb_start>
	bt_mesh_model_foreach(model_start, NULL);
    b228:	2100      	movs	r1, #0
    b22a:	4804      	ldr	r0, [pc, #16]	; (b23c <bt_mesh_start+0x64>)
    b22c:	f004 f998 	bl	f560 <bt_mesh_model_foreach>
	return 0;
    b230:	e7db      	b.n	b1ea <bt_mesh_start+0x12>
		bt_mesh_beacon_disable();
    b232:	f000 fd23 	bl	bc7c <bt_mesh_beacon_disable>
    b236:	e7df      	b.n	b1f8 <bt_mesh_start+0x20>
    b238:	0002bdec 	.word	0x0002bdec
    b23c:	0002581b 	.word	0x0002581b

0000b240 <bt_mesh_provision>:
{
    b240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b244:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b248:	4c25      	ldr	r4, [pc, #148]	; (b2e0 <bt_mesh_provision+0xa0>)
    b24a:	4680      	mov	r8, r0
    b24c:	460d      	mov	r5, r1
    b24e:	4617      	mov	r7, r2
	BT_INFO("Primary Element: 0x%04x", addr);
    b250:	2149      	movs	r1, #73	; 0x49
    b252:	4632      	mov	r2, r6
    b254:	4823      	ldr	r0, [pc, #140]	; (b2e4 <bt_mesh_provision+0xa4>)
{
    b256:	4699      	mov	r9, r3
	BT_INFO("Primary Element: 0x%04x", addr);
    b258:	f016 fe37 	bl	21eca <printk>
    b25c:	f3bf 8f5b 	dmb	ish
    b260:	e854 0f00 	ldrex	r0, [r4]
    b264:	f040 0301 	orr.w	r3, r0, #1
    b268:	e844 3200 	strex	r2, r3, [r4]
    b26c:	2a00      	cmp	r2, #0
    b26e:	d1f7      	bne.n	b260 <bt_mesh_provision+0x20>
    b270:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
    b274:	f010 0001 	ands.w	r0, r0, #1
    b278:	d12e      	bne.n	b2d8 <bt_mesh_provision+0x98>
		if (bt_mesh_proxy_prov_disable(false) == 0) {
    b27a:	f00a f867 	bl	1534c <bt_mesh_proxy_prov_disable>
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    b27e:	464b      	mov	r3, r9
		if (bt_mesh_proxy_prov_disable(false) == 0) {
    b280:	4682      	mov	sl, r0
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    b282:	4642      	mov	r2, r8
    b284:	4628      	mov	r0, r5
    b286:	4639      	mov	r1, r7
    b288:	f000 fe9a 	bl	bfc0 <bt_mesh_net_create>
	if (err) {
    b28c:	4605      	mov	r5, r0
    b28e:	b198      	cbz	r0, b2b8 <bt_mesh_provision+0x78>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b290:	f3bf 8f5b 	dmb	ish
    b294:	e854 3f00 	ldrex	r3, [r4]
    b298:	f023 0301 	bic.w	r3, r3, #1
    b29c:	e844 3200 	strex	r2, r3, [r4]
    b2a0:	2a00      	cmp	r2, #0
    b2a2:	d1f7      	bne.n	b294 <bt_mesh_provision+0x54>
    b2a4:	f3bf 8f5b 	dmb	ish
		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) && pb_gatt_enabled) {
    b2a8:	f1ba 0f00 	cmp.w	sl, #0
    b2ac:	d101      	bne.n	b2b2 <bt_mesh_provision+0x72>
			bt_mesh_proxy_prov_enable();
    b2ae:	f00a f81f 	bl	152f0 <bt_mesh_proxy_prov_enable>
}
    b2b2:	4628      	mov	r0, r5
    b2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_mesh.seq = 0U;
    b2b8:	f844 0c04 	str.w	r0, [r4, #-4]
	bt_mesh_comp_provision(addr);
    b2bc:	4630      	mov	r0, r6
    b2be:	f004 fb3b 	bl	f938 <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
    b2c2:	2210      	movs	r2, #16
    b2c4:	9909      	ldr	r1, [sp, #36]	; 0x24
    b2c6:	f504 7008 	add.w	r0, r4, #544	; 0x220
    b2ca:	f018 ff40 	bl	2414e <memcpy>
		bt_mesh_net_pending_net_store();
    b2ce:	f001 fb21 	bl	c914 <bt_mesh_net_pending_net_store>
	bt_mesh_start();
    b2d2:	f7ff ff81 	bl	b1d8 <bt_mesh_start>
	return 0;
    b2d6:	e7ec      	b.n	b2b2 <bt_mesh_provision+0x72>
		return -EALREADY;
    b2d8:	f06f 0544 	mvn.w	r5, #68	; 0x44
    b2dc:	e7e9      	b.n	b2b2 <bt_mesh_provision+0x72>
    b2de:	bf00      	nop
    b2e0:	20001ac0 	.word	0x20001ac0
    b2e4:	0002bdcf 	.word	0x0002bdcf

0000b2e8 <atomic_test_bit.constprop.7>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b2e8:	4b05      	ldr	r3, [pc, #20]	; (b300 <atomic_test_bit.constprop.7+0x18>)
    b2ea:	f3bf 8f5b 	dmb	ish
    b2ee:	681b      	ldr	r3, [r3, #0]
    b2f0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    b2f4:	fa43 f000 	asr.w	r0, r3, r0
}
    b2f8:	f000 0001 	and.w	r0, r0, #1
    b2fc:	4770      	bx	lr
    b2fe:	bf00      	nop
    b300:	20001ac0 	.word	0x20001ac0

0000b304 <feature_set>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
}

static int feature_set(int feature_flag, enum bt_mesh_feat_state state)
{
	if (state != BT_MESH_FEATURE_DISABLED &&
    b304:	2901      	cmp	r1, #1
{
    b306:	b508      	push	{r3, lr}
    b308:	4602      	mov	r2, r0
	if (state != BT_MESH_FEATURE_DISABLED &&
    b30a:	d81e      	bhi.n	b34a <feature_set+0x46>
	    state != BT_MESH_FEATURE_ENABLED) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
    b30c:	f7ff ffec 	bl	b2e8 <atomic_test_bit.constprop.7>
    b310:	f001 0301 	and.w	r3, r1, #1
    b314:	4298      	cmp	r0, r3
    b316:	d01b      	beq.n	b350 <feature_set+0x4c>
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    b318:	2001      	movs	r0, #1

	if (val) {
    b31a:	2901      	cmp	r1, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    b31c:	fa00 f002 	lsl.w	r0, r0, r2
	if (val) {
    b320:	d105      	bne.n	b32e <feature_set+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    b322:	4601      	mov	r1, r0
    b324:	480c      	ldr	r0, [pc, #48]	; (b358 <feature_set+0x54>)
    b326:	f01a fa9e 	bl	25866 <atomic_or>
	}

	atomic_set_bit_to(bt_mesh.flags, feature_flag,
			  (state == BT_MESH_FEATURE_ENABLED));

	return 0;
    b32a:	2000      	movs	r0, #0
}
    b32c:	bd08      	pop	{r3, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b32e:	4b0a      	ldr	r3, [pc, #40]	; (b358 <feature_set+0x54>)
    b330:	f3bf 8f5b 	dmb	ish
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b334:	43c0      	mvns	r0, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b336:	e853 2f00 	ldrex	r2, [r3]
    b33a:	4002      	ands	r2, r0
    b33c:	e843 2100 	strex	r1, r2, [r3]
    b340:	2900      	cmp	r1, #0
    b342:	d1f8      	bne.n	b336 <feature_set+0x32>
    b344:	f3bf 8f5b 	dmb	ish
    b348:	e7ef      	b.n	b32a <feature_set+0x26>
		return -EINVAL;
    b34a:	f06f 0015 	mvn.w	r0, #21
    b34e:	e7ed      	b.n	b32c <feature_set+0x28>
		return -EALREADY;
    b350:	f06f 0044 	mvn.w	r0, #68	; 0x44
    b354:	e7ea      	b.n	b32c <feature_set+0x28>
    b356:	bf00      	nop
    b358:	20001ac0 	.word	0x20001ac0

0000b35c <bt_mesh_beacon_set>:
{
    b35c:	4602      	mov	r2, r0
    b35e:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON) == beacon) {
    b360:	2007      	movs	r0, #7
    b362:	f7ff ffc1 	bl	b2e8 <atomic_test_bit.constprop.7>
    b366:	4290      	cmp	r0, r2
    b368:	d01f      	beq.n	b3aa <bt_mesh_beacon_set+0x4e>
	if (val) {
    b36a:	b172      	cbz	r2, b38a <bt_mesh_beacon_set+0x2e>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    b36c:	2180      	movs	r1, #128	; 0x80
    b36e:	480f      	ldr	r0, [pc, #60]	; (b3ac <bt_mesh_beacon_set+0x50>)
    b370:	f01a fa79 	bl	25866 <atomic_or>
		bt_mesh_beacon_enable();
    b374:	f000 fc72 	bl	bc5c <bt_mesh_beacon_enable>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    b378:	2000      	movs	r0, #0
    b37a:	f7ff ffb5 	bl	b2e8 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b37e:	b1a0      	cbz	r0, b3aa <bt_mesh_beacon_set+0x4e>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    b380:	2007      	movs	r0, #7
}
    b382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    b386:	f006 be1f 	b.w	11fc8 <bt_mesh_settings_store_schedule>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b38a:	4b08      	ldr	r3, [pc, #32]	; (b3ac <bt_mesh_beacon_set+0x50>)
    b38c:	f3bf 8f5b 	dmb	ish
    b390:	e853 2f00 	ldrex	r2, [r3]
    b394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b398:	e843 2100 	strex	r1, r2, [r3]
    b39c:	2900      	cmp	r1, #0
    b39e:	d1f7      	bne.n	b390 <bt_mesh_beacon_set+0x34>
    b3a0:	f3bf 8f5b 	dmb	ish
		bt_mesh_beacon_disable();
    b3a4:	f000 fc6a 	bl	bc7c <bt_mesh_beacon_disable>
    b3a8:	e7e6      	b.n	b378 <bt_mesh_beacon_set+0x1c>
}
    b3aa:	bd08      	pop	{r3, pc}
    b3ac:	20001ac0 	.word	0x20001ac0

0000b3b0 <bt_mesh_default_ttl_set>:
	return feature_get(BT_MESH_GATT_PROXY);
}

int bt_mesh_default_ttl_set(uint8_t default_ttl)
{
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    b3b0:	2801      	cmp	r0, #1
{
    b3b2:	b508      	push	{r3, lr}
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    b3b4:	d013      	beq.n	b3de <bt_mesh_default_ttl_set+0x2e>
    b3b6:	0603      	lsls	r3, r0, #24
    b3b8:	d411      	bmi.n	b3de <bt_mesh_default_ttl_set+0x2e>
		return -EINVAL;
	}

	if (default_ttl == bt_mesh.default_ttl) {
    b3ba:	4b0a      	ldr	r3, [pc, #40]	; (b3e4 <bt_mesh_default_ttl_set+0x34>)
    b3bc:	f893 21f3 	ldrb.w	r2, [r3, #499]	; 0x1f3
    b3c0:	4282      	cmp	r2, r0
    b3c2:	d101      	bne.n	b3c8 <bt_mesh_default_ttl_set+0x18>

	bt_mesh.default_ttl = default_ttl;

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    b3c4:	2000      	movs	r0, #0
	}

	return 0;
}
    b3c6:	bd08      	pop	{r3, pc}
	bt_mesh.default_ttl = default_ttl;
    b3c8:	f883 01f3 	strb.w	r0, [r3, #499]	; 0x1f3
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    b3cc:	2000      	movs	r0, #0
    b3ce:	f7ff ff8b 	bl	b2e8 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b3d2:	2800      	cmp	r0, #0
    b3d4:	d0f6      	beq.n	b3c4 <bt_mesh_default_ttl_set+0x14>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    b3d6:	2007      	movs	r0, #7
    b3d8:	f006 fdf6 	bl	11fc8 <bt_mesh_settings_store_schedule>
    b3dc:	e7f2      	b.n	b3c4 <bt_mesh_default_ttl_set+0x14>
		return -EINVAL;
    b3de:	f06f 0015 	mvn.w	r0, #21
    b3e2:	e7f0      	b.n	b3c6 <bt_mesh_default_ttl_set+0x16>
    b3e4:	20001ab8 	.word	0x20001ab8

0000b3e8 <bt_mesh_default_ttl_get>:

uint8_t bt_mesh_default_ttl_get(void)
{
	return bt_mesh.default_ttl;
}
    b3e8:	4b01      	ldr	r3, [pc, #4]	; (b3f0 <bt_mesh_default_ttl_get+0x8>)
    b3ea:	f893 01f3 	ldrb.w	r0, [r3, #499]	; 0x1f3
    b3ee:	4770      	bx	lr
    b3f0:	20001ab8 	.word	0x20001ab8

0000b3f4 <bt_mesh_net_transmit_set>:

	return feature_get(BT_MESH_FRIEND);
}

void bt_mesh_net_transmit_set(uint8_t xmit)
{
    b3f4:	b508      	push	{r3, lr}
	if (bt_mesh.net_xmit == xmit) {
    b3f6:	4b08      	ldr	r3, [pc, #32]	; (b418 <bt_mesh_net_transmit_set+0x24>)
    b3f8:	f893 21f1 	ldrb.w	r2, [r3, #497]	; 0x1f1
    b3fc:	4282      	cmp	r2, r0
    b3fe:	d00a      	beq.n	b416 <bt_mesh_net_transmit_set+0x22>
		return;
	}

	bt_mesh.net_xmit = xmit;
    b400:	f883 01f1 	strb.w	r0, [r3, #497]	; 0x1f1

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    b404:	2000      	movs	r0, #0
    b406:	f7ff ff6f 	bl	b2e8 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b40a:	b120      	cbz	r0, b416 <bt_mesh_net_transmit_set+0x22>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    b40c:	2007      	movs	r0, #7
	}
}
    b40e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    b412:	f006 bdd9 	b.w	11fc8 <bt_mesh_settings_store_schedule>
}
    b416:	bd08      	pop	{r3, pc}
    b418:	20001ab8 	.word	0x20001ab8

0000b41c <bt_mesh_net_transmit_get>:

uint8_t bt_mesh_net_transmit_get(void)
{
	return bt_mesh.net_xmit;
}
    b41c:	4b01      	ldr	r3, [pc, #4]	; (b424 <bt_mesh_net_transmit_get+0x8>)
    b41e:	f893 01f1 	ldrb.w	r0, [r3, #497]	; 0x1f1
    b422:	4770      	bx	lr
    b424:	20001ab8 	.word	0x20001ab8

0000b428 <bt_mesh_relay_set>:

int bt_mesh_relay_set(enum bt_mesh_feat_state relay, uint8_t xmit)
{
    b428:	b510      	push	{r4, lr}
    b42a:	460c      	mov	r4, r1

	if (!IS_ENABLED(CONFIG_BT_MESH_RELAY)) {
		return -ENOTSUP;
	}

	err = feature_set(BT_MESH_RELAY, relay);
    b42c:	4601      	mov	r1, r0
    b42e:	2006      	movs	r0, #6
    b430:	f7ff ff68 	bl	b304 <feature_set>
	if (err == -EINVAL) {
    b434:	f110 0f16 	cmn.w	r0, #22
    b438:	d014      	beq.n	b464 <bt_mesh_relay_set+0x3c>
		return err;
	}

	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
    b43a:	f110 0f45 	cmn.w	r0, #69	; 0x45
    b43e:	4b0a      	ldr	r3, [pc, #40]	; (b468 <bt_mesh_relay_set+0x40>)
    b440:	d103      	bne.n	b44a <bt_mesh_relay_set+0x22>
    b442:	f893 21f2 	ldrb.w	r2, [r3, #498]	; 0x1f2
    b446:	42a2      	cmp	r2, r4
    b448:	d00c      	beq.n	b464 <bt_mesh_relay_set+0x3c>
		return -EALREADY;
	}

	bt_mesh.relay_xmit = xmit;
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    b44a:	2001      	movs	r0, #1
	bt_mesh.relay_xmit = xmit;
    b44c:	f883 41f2 	strb.w	r4, [r3, #498]	; 0x1f2
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    b450:	f003 fd9c 	bl	ef8c <bt_mesh_hb_feature_changed>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    b454:	2000      	movs	r0, #0
    b456:	f7ff ff47 	bl	b2e8 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b45a:	b118      	cbz	r0, b464 <bt_mesh_relay_set+0x3c>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    b45c:	2007      	movs	r0, #7
    b45e:	f006 fdb3 	bl	11fc8 <bt_mesh_settings_store_schedule>
	}

	return 0;
    b462:	2000      	movs	r0, #0
}
    b464:	bd10      	pop	{r4, pc}
    b466:	bf00      	nop
    b468:	20001ab8 	.word	0x20001ab8

0000b46c <cfg_set>:
	}
}

static int cfg_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
    b46c:	b513      	push	{r0, r1, r4, lr}
    b46e:	4610      	mov	r0, r2
    b470:	461c      	mov	r4, r3
	struct cfg_val cfg;
	int err;

	if (len_rd == 0) {
    b472:	b359      	cbz	r1, b4cc <cfg_set+0x60>
		BT_DBG("Cleared configuration state");
		return 0;
	}

	err = bt_mesh_settings_set(read_cb, cb_arg, &cfg, sizeof(cfg));
    b474:	4621      	mov	r1, r4
    b476:	2307      	movs	r3, #7
    b478:	466a      	mov	r2, sp
    b47a:	f006 fd83 	bl	11f84 <bt_mesh_settings_set>
	if (err) {
    b47e:	4604      	mov	r4, r0
    b480:	b130      	cbz	r0, b490 <cfg_set+0x24>
		BT_ERR("Failed to set \'cfg\'");
    b482:	2145      	movs	r1, #69	; 0x45
    b484:	4812      	ldr	r0, [pc, #72]	; (b4d0 <cfg_set+0x64>)
    b486:	f016 fd20 	bl	21eca <printk>
	bt_mesh_default_ttl_set(cfg.default_ttl);

	BT_DBG("Restored configuration state");

	return 0;
}
    b48a:	4620      	mov	r0, r4
    b48c:	b002      	add	sp, #8
    b48e:	bd10      	pop	{r4, pc}
	bt_mesh_net_transmit_set(cfg.net_transmit);
    b490:	f89d 0000 	ldrb.w	r0, [sp]
    b494:	f7ff ffae 	bl	b3f4 <bt_mesh_net_transmit_set>
	bt_mesh_relay_set(cfg.relay, cfg.relay_retransmit);
    b498:	f89d 1002 	ldrb.w	r1, [sp, #2]
    b49c:	f89d 0001 	ldrb.w	r0, [sp, #1]
    b4a0:	f7ff ffc2 	bl	b428 <bt_mesh_relay_set>
	bt_mesh_beacon_set(cfg.beacon);
    b4a4:	f89d 0003 	ldrb.w	r0, [sp, #3]
    b4a8:	3000      	adds	r0, #0
    b4aa:	bf18      	it	ne
    b4ac:	2001      	movne	r0, #1
    b4ae:	f7ff ff55 	bl	b35c <bt_mesh_beacon_set>
	bt_mesh_gatt_proxy_set(cfg.gatt_proxy);
    b4b2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b4b6:	f01a f9e8 	bl	2588a <bt_mesh_gatt_proxy_set>
	bt_mesh_friend_set(cfg.frnd);
    b4ba:	f89d 0005 	ldrb.w	r0, [sp, #5]
    b4be:	f01a f9fa 	bl	258b6 <bt_mesh_friend_set>
	bt_mesh_default_ttl_set(cfg.default_ttl);
    b4c2:	f89d 0006 	ldrb.w	r0, [sp, #6]
    b4c6:	f7ff ff73 	bl	b3b0 <bt_mesh_default_ttl_set>
	return 0;
    b4ca:	e7de      	b.n	b48a <cfg_set+0x1e>
		return 0;
    b4cc:	460c      	mov	r4, r1
    b4ce:	e7dc      	b.n	b48a <cfg_set+0x1e>
    b4d0:	0002be71 	.word	0x0002be71

0000b4d4 <bt_mesh_relay_retransmit_get>:
}
    b4d4:	4b01      	ldr	r3, [pc, #4]	; (b4dc <bt_mesh_relay_retransmit_get+0x8>)
    b4d6:	f893 01f2 	ldrb.w	r0, [r3, #498]	; 0x1f2
    b4da:	4770      	bx	lr
    b4dc:	20001ab8 	.word	0x20001ab8

0000b4e0 <bt_mesh_cfg_init>:
{
    b4e0:	b510      	push	{r4, lr}
	bt_mesh.net_xmit =
    b4e2:	4c0e      	ldr	r4, [pc, #56]	; (b51c <bt_mesh_cfg_init+0x3c>)
    b4e4:	230a      	movs	r3, #10
    b4e6:	f884 31f1 	strb.w	r3, [r4, #497]	; 0x1f1
	bt_mesh.relay_xmit =
    b4ea:	f240 730a 	movw	r3, #1802	; 0x70a
    b4ee:	f8a4 31f2 	strh.w	r3, [r4, #498]	; 0x1f2
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    b4f2:	3408      	adds	r4, #8
    b4f4:	2140      	movs	r1, #64	; 0x40
    b4f6:	4620      	mov	r0, r4
    b4f8:	f01a f9b5 	bl	25866 <atomic_or>
    b4fc:	2180      	movs	r1, #128	; 0x80
    b4fe:	4620      	mov	r0, r4
    b500:	f01a f9b1 	bl	25866 <atomic_or>
    b504:	f44f 7180 	mov.w	r1, #256	; 0x100
    b508:	4620      	mov	r0, r4
    b50a:	f01a f9ac 	bl	25866 <atomic_or>
    b50e:	4620      	mov	r0, r4
    b510:	f44f 7100 	mov.w	r1, #512	; 0x200
}
    b514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b518:	f01a b9a5 	b.w	25866 <atomic_or>
    b51c:	20001ab8 	.word	0x20001ab8

0000b520 <bt_mesh_cfg_pending_store>:
		BT_HEXDUMP_DBG(&val, sizeof(val), "raw value");
	}
}

void bt_mesh_cfg_pending_store(void)
{
    b520:	b507      	push	{r0, r1, r2, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    b522:	2000      	movs	r0, #0
    b524:	f7ff fee0 	bl	b2e8 <atomic_test_bit.constprop.7>
    b528:	b348      	cbz	r0, b57e <bt_mesh_cfg_pending_store+0x5e>
	return bt_mesh.net_xmit;
    b52a:	4a19      	ldr	r2, [pc, #100]	; (b590 <bt_mesh_cfg_pending_store+0x70>)
	val.net_transmit = bt_mesh_net_transmit_get();
    b52c:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
    b530:	f88d 3000 	strb.w	r3, [sp]
	val.relay = bt_mesh_relay_get();
    b534:	f01a f9d9 	bl	258ea <bt_mesh_relay_get>
	val.relay_retransmit = bt_mesh_relay_retransmit_get();
    b538:	f892 31f2 	ldrb.w	r3, [r2, #498]	; 0x1f2
    b53c:	f88d 3002 	strb.w	r3, [sp, #2]
	val.relay = bt_mesh_relay_get();
    b540:	f88d 0001 	strb.w	r0, [sp, #1]
	val.beacon = bt_mesh_beacon_enabled();
    b544:	f01a f99e 	bl	25884 <bt_mesh_beacon_enabled>
    b548:	f88d 0003 	strb.w	r0, [sp, #3]
	val.gatt_proxy = bt_mesh_gatt_proxy_get();
    b54c:	f01a f9b0 	bl	258b0 <bt_mesh_gatt_proxy_get>
    b550:	f88d 0004 	strb.w	r0, [sp, #4]
	val.frnd = bt_mesh_friend_get();
    b554:	f01a f9c6 	bl	258e4 <bt_mesh_friend_get>
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    b558:	4669      	mov	r1, sp
	val.default_ttl = bt_mesh_default_ttl_get();
    b55a:	f892 31f3 	ldrb.w	r3, [r2, #499]	; 0x1f3
	val.frnd = bt_mesh_friend_get();
    b55e:	f88d 0005 	strb.w	r0, [sp, #5]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    b562:	2207      	movs	r2, #7
    b564:	480b      	ldr	r0, [pc, #44]	; (b594 <bt_mesh_cfg_pending_store+0x74>)
	val.default_ttl = bt_mesh_default_ttl_get();
    b566:	f88d 3006 	strb.w	r3, [sp, #6]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    b56a:	f7f7 fea9 	bl	32c0 <settings_save_one>
	if (err) {
    b56e:	b118      	cbz	r0, b578 <bt_mesh_cfg_pending_store+0x58>
		BT_ERR("Failed to store configuration value");
    b570:	4809      	ldr	r0, [pc, #36]	; (b598 <bt_mesh_cfg_pending_store+0x78>)
    b572:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to clear configuration");
    b574:	f016 fca9 	bl	21eca <printk>
		store_pending_cfg();
	} else {
		clear_cfg();
	}
}
    b578:	b003      	add	sp, #12
    b57a:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/Cfg");
    b57e:	4805      	ldr	r0, [pc, #20]	; (b594 <bt_mesh_cfg_pending_store+0x74>)
    b580:	f017 fae0 	bl	22b44 <settings_delete>
	if (err) {
    b584:	2800      	cmp	r0, #0
    b586:	d0f7      	beq.n	b578 <bt_mesh_cfg_pending_store+0x58>
		BT_ERR("Failed to clear configuration");
    b588:	2145      	movs	r1, #69	; 0x45
    b58a:	4804      	ldr	r0, [pc, #16]	; (b59c <bt_mesh_cfg_pending_store+0x7c>)
    b58c:	e7f2      	b.n	b574 <bt_mesh_cfg_pending_store+0x54>
    b58e:	bf00      	nop
    b590:	20001ab8 	.word	0x20001ab8
    b594:	0002be19 	.word	0x0002be19
    b598:	0002be25 	.word	0x0002be25
    b59c:	0002be4e 	.word	0x0002be4e

0000b5a0 <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
    b5a0:	4b02      	ldr	r3, [pc, #8]	; (b5ac <adv_alloc+0xc>)
    b5a2:	220c      	movs	r2, #12
    b5a4:	fb02 3000 	mla	r0, r2, r0, r3
    b5a8:	4770      	bx	lr
    b5aa:	bf00      	nop
    b5ac:	200029ec 	.word	0x200029ec

0000b5b0 <bt_mesh_scan_cb>:
}

static void bt_mesh_scan_cb(const bt_addr_le_t *addr, int8_t rssi,
			    uint8_t adv_type, struct net_buf_simple *buf)
{
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    b5b0:	2a03      	cmp	r2, #3
{
    b5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5b6:	460f      	mov	r7, r1
    b5b8:	461c      	mov	r4, r3
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    b5ba:	d025      	beq.n	b608 <bt_mesh_scan_cb+0x58>
		}

		net_buf_simple_restore(buf, &state);
		net_buf_simple_pull(buf, len);
	}
}
    b5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state->offset = net_buf_simple_headroom(buf);
    b5c0:	4620      	mov	r0, r4
    b5c2:	f01c fcc8 	bl	27f56 <net_buf_simple_headroom>
    b5c6:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
    b5c8:	4620      	mov	r0, r4
	state->len = buf->len;
    b5ca:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    b5ce:	f01c fc9e 	bl	27f0e <net_buf_simple_pull_u8>
		buf->len = len - 1;
    b5d2:	1e6b      	subs	r3, r5, #1
		switch (type) {
    b5d4:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
    b5d6:	80a3      	strh	r3, [r4, #4]
		switch (type) {
    b5d8:	d007      	beq.n	b5ea <bt_mesh_scan_cb+0x3a>
    b5da:	282b      	cmp	r0, #43	; 0x2b
    b5dc:	d027      	beq.n	b62e <bt_mesh_scan_cb+0x7e>
    b5de:	2829      	cmp	r0, #41	; 0x29
    b5e0:	d108      	bne.n	b5f4 <bt_mesh_scan_cb+0x44>
			bt_mesh_pb_adv_recv(buf);
    b5e2:	4620      	mov	r0, r4
    b5e4:	f009 fa02 	bl	149ec <bt_mesh_pb_adv_recv>
			break;
    b5e8:	e004      	b.n	b5f4 <bt_mesh_scan_cb+0x44>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
    b5ea:	2200      	movs	r2, #0
    b5ec:	4639      	mov	r1, r7
    b5ee:	4620      	mov	r0, r4
    b5f0:	f001 f832 	bl	c658 <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
    b5f4:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    b5f6:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
    b5fa:	fa13 f686 	uxtah	r6, r3, r6
    b5fe:	6026      	str	r6, [r4, #0]
		net_buf_simple_pull(buf, len);
    b600:	4629      	mov	r1, r5
    b602:	4620      	mov	r0, r4
    b604:	f011 fa46 	bl	1ca94 <net_buf_simple_pull>
	while (buf->len > 1) {
    b608:	88a3      	ldrh	r3, [r4, #4]
    b60a:	2b01      	cmp	r3, #1
    b60c:	d9d6      	bls.n	b5bc <bt_mesh_scan_cb+0xc>
		len = net_buf_simple_pull_u8(buf);
    b60e:	4620      	mov	r0, r4
    b610:	f01c fc7d 	bl	27f0e <net_buf_simple_pull_u8>
		if (len == 0U) {
    b614:	4605      	mov	r5, r0
    b616:	2800      	cmp	r0, #0
    b618:	d0d0      	beq.n	b5bc <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
    b61a:	88a2      	ldrh	r2, [r4, #4]
    b61c:	b283      	uxth	r3, r0
    b61e:	429a      	cmp	r2, r3
    b620:	d2ce      	bcs.n	b5c0 <bt_mesh_scan_cb+0x10>
			BT_WARN("AD malformed");
    b622:	2157      	movs	r1, #87	; 0x57
    b624:	4804      	ldr	r0, [pc, #16]	; (b638 <bt_mesh_scan_cb+0x88>)
}
    b626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("AD malformed");
    b62a:	f016 bc4e 	b.w	21eca <printk>
			bt_mesh_beacon_recv(buf);
    b62e:	4620      	mov	r0, r4
    b630:	f000 fa58 	bl	bae4 <bt_mesh_beacon_recv>
			break;
    b634:	e7de      	b.n	b5f4 <bt_mesh_scan_cb+0x44>
    b636:	bf00      	nop
    b638:	0002becb 	.word	0x0002becb

0000b63c <bt_mesh_adv_create_from_pool>:
{
    b63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b640:	461f      	mov	r7, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b642:	4b14      	ldr	r3, [pc, #80]	; (b694 <bt_mesh_adv_create_from_pool+0x58>)
    b644:	f3bf 8f5b 	dmb	ish
    b648:	681d      	ldr	r5, [r3, #0]
    b64a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    b64e:	f3c5 0540 	ubfx	r5, r5, #1, #1
    b652:	460c      	mov	r4, r1
    b654:	4690      	mov	r8, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    b656:	b13d      	cbz	r5, b668 <bt_mesh_adv_create_from_pool+0x2c>
		BT_WARN("Refusing to allocate buffer while suspended");
    b658:	2157      	movs	r1, #87	; 0x57
    b65a:	480f      	ldr	r0, [pc, #60]	; (b698 <bt_mesh_adv_create_from_pool+0x5c>)
    b65c:	f016 fc35 	bl	21eca <printk>
    b660:	2600      	movs	r6, #0
}
    b662:	4630      	mov	r0, r6
    b664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    b668:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b66c:	f01c fc22 	bl	27eb4 <net_buf_alloc_fixed>
	if (!buf) {
    b670:	4606      	mov	r6, r0
    b672:	2800      	cmp	r0, #0
    b674:	d0f5      	beq.n	b662 <bt_mesh_adv_create_from_pool+0x26>
	adv = get_id(net_buf_id(buf));
    b676:	f010 feeb 	bl	1c450 <net_buf_id>
    b67a:	47a0      	blx	r4
    b67c:	4604      	mov	r4, r0
	BT_MESH_ADV(buf) = adv;
    b67e:	6170      	str	r0, [r6, #20]
	(void)memset(adv, 0, sizeof(*adv));
    b680:	220c      	movs	r2, #12
    b682:	4629      	mov	r1, r5
    b684:	f018 fd8d 	bl	241a2 <memset>
	adv->type         = type;
    b688:	7a23      	ldrb	r3, [r4, #8]
	adv->xmit         = xmit;
    b68a:	7267      	strb	r7, [r4, #9]
	adv->type         = type;
    b68c:	f368 0301 	bfi	r3, r8, #0, #2
    b690:	7223      	strb	r3, [r4, #8]
	return buf;
    b692:	e7e6      	b.n	b662 <bt_mesh_adv_create_from_pool+0x26>
    b694:	20001ac0 	.word	0x20001ac0
    b698:	0002be96 	.word	0x0002be96

0000b69c <bt_mesh_adv_create>:
{
    b69c:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    b69e:	e9cd 2300 	strd	r2, r3, [sp]
    b6a2:	460b      	mov	r3, r1
    b6a4:	4602      	mov	r2, r0
    b6a6:	4903      	ldr	r1, [pc, #12]	; (b6b4 <bt_mesh_adv_create+0x18>)
    b6a8:	4803      	ldr	r0, [pc, #12]	; (b6b8 <bt_mesh_adv_create+0x1c>)
    b6aa:	f7ff ffc7 	bl	b63c <bt_mesh_adv_create_from_pool>
}
    b6ae:	b003      	add	sp, #12
    b6b0:	f85d fb04 	ldr.w	pc, [sp], #4
    b6b4:	0000b5a1 	.word	0x0000b5a1
    b6b8:	20001024 	.word	0x20001024

0000b6bc <bt_mesh_adv_send>:
{
    b6bc:	b510      	push	{r4, lr}
	BT_MESH_ADV(buf)->cb = cb;
    b6be:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    b6c0:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    b6c4:	6942      	ldr	r2, [r0, #20]
    b6c6:	7a13      	ldrb	r3, [r2, #8]
    b6c8:	f043 0304 	orr.w	r3, r3, #4
    b6cc:	7213      	strb	r3, [r2, #8]
	net_buf_put(&bt_mesh_adv_queue, net_buf_ref(buf));
    b6ce:	f011 f90f 	bl	1c8f0 <net_buf_ref>
    b6d2:	4601      	mov	r1, r0
    b6d4:	4803      	ldr	r0, [pc, #12]	; (b6e4 <bt_mesh_adv_send+0x28>)
    b6d6:	f011 f899 	bl	1c80c <net_buf_put>
}
    b6da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_buf_ready();
    b6de:	f01b b813 	b.w	26708 <bt_mesh_adv_buf_ready>
    b6e2:	bf00      	nop
    b6e4:	20000fa4 	.word	0x20000fa4

0000b6e8 <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
    b6e8:	b510      	push	{r4, lr}
    b6ea:	b086      	sub	sp, #24
	struct bt_le_scan_param scan_param = {
    b6ec:	2214      	movs	r2, #20
    b6ee:	2100      	movs	r1, #0
    b6f0:	a801      	add	r0, sp, #4
    b6f2:	f018 fd56 	bl	241a2 <memset>
    b6f6:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
			.window     = MESH_SCAN_WINDOW };
	int err;

	BT_DBG("");

	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    b6fa:	490a      	ldr	r1, [pc, #40]	; (b724 <bt_mesh_scan_enable+0x3c>)
	struct bt_le_scan_param scan_param = {
    b6fc:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    b6fe:	a801      	add	r0, sp, #4
    b700:	f7fc f83e 	bl	7780 <bt_le_scan_start>
	if (err && err != -EALREADY) {
    b704:	4604      	mov	r4, r0
    b706:	b138      	cbz	r0, b718 <bt_mesh_scan_enable+0x30>
    b708:	f110 0f45 	cmn.w	r0, #69	; 0x45
    b70c:	d007      	beq.n	b71e <bt_mesh_scan_enable+0x36>
		BT_ERR("starting scan failed (err %d)", err);
    b70e:	4602      	mov	r2, r0
    b710:	2145      	movs	r1, #69	; 0x45
    b712:	4805      	ldr	r0, [pc, #20]	; (b728 <bt_mesh_scan_enable+0x40>)
    b714:	f016 fbd9 	bl	21eca <printk>
		return err;
	}

	return 0;
}
    b718:	4620      	mov	r0, r4
    b71a:	b006      	add	sp, #24
    b71c:	bd10      	pop	{r4, pc}
	return 0;
    b71e:	2400      	movs	r4, #0
    b720:	e7fa      	b.n	b718 <bt_mesh_scan_enable+0x30>
    b722:	bf00      	nop
    b724:	0000b5b1 	.word	0x0000b5b1
    b728:	0002bf00 	.word	0x0002bf00

0000b72c <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
    b72c:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = bt_le_scan_stop();
    b72e:	f7fc f8e5 	bl	78fc <bt_le_scan_stop>
	if (err && err != -EALREADY) {
    b732:	4604      	mov	r4, r0
    b734:	b138      	cbz	r0, b746 <bt_mesh_scan_disable+0x1a>
    b736:	f110 0f45 	cmn.w	r0, #69	; 0x45
    b73a:	d006      	beq.n	b74a <bt_mesh_scan_disable+0x1e>
		BT_ERR("stopping scan failed (err %d)", err);
    b73c:	4602      	mov	r2, r0
    b73e:	2145      	movs	r1, #69	; 0x45
    b740:	4803      	ldr	r0, [pc, #12]	; (b750 <bt_mesh_scan_disable+0x24>)
    b742:	f016 fbc2 	bl	21eca <printk>
		return err;
	}

	return 0;
}
    b746:	4620      	mov	r0, r4
    b748:	bd10      	pop	{r4, pc}
	return 0;
    b74a:	2400      	movs	r4, #0
    b74c:	e7fb      	b.n	b746 <bt_mesh_scan_disable+0x1a>
    b74e:	bf00      	nop
    b750:	0002bedd 	.word	0x0002bedd

0000b754 <subnet_by_id>:

	return true;
}

static int subnet_by_id(struct bt_mesh_subnet *sub, void *cb_data)
{
    b754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Authentication Value %s != %s",
    b758:	f8df 8070 	ldr.w	r8, [pc, #112]	; b7cc <subnet_by_id+0x78>
{
    b75c:	b085      	sub	sp, #20
    b75e:	460d      	mov	r5, r1
	struct beacon_params *params = cb_data;

	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    b760:	f100 045e 	add.w	r4, r0, #94	; 0x5e
    b764:	2600      	movs	r6, #0
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
    b766:	af02      	add	r7, sp, #8
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
    b768:	f814 3c32 	ldrb.w	r3, [r4, #-50]
    b76c:	b313      	cbz	r3, b7b4 <subnet_by_id+0x60>
	if (memcmp(params->net_id, keys->net_id, 8)) {
    b76e:	2208      	movs	r2, #8
    b770:	4621      	mov	r1, r4
    b772:	6828      	ldr	r0, [r5, #0]
    b774:	f018 fcc4 	bl	24100 <memcmp>
    b778:	b9e0      	cbnz	r0, b7b4 <subnet_by_id+0x60>
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
    b77a:	4622      	mov	r2, r4
    b77c:	7b29      	ldrb	r1, [r5, #12]
    b77e:	9700      	str	r7, [sp, #0]
    b780:	68ab      	ldr	r3, [r5, #8]
    b782:	f104 0018 	add.w	r0, r4, #24
    b786:	f01a fd61 	bl	2624c <bt_mesh_beacon_auth>
	if (memcmp(params->auth, net_auth, 8)) {
    b78a:	2208      	movs	r2, #8
    b78c:	4639      	mov	r1, r7
    b78e:	6868      	ldr	r0, [r5, #4]
    b790:	f018 fcb6 	bl	24100 <memcmp>
    b794:	b1a0      	cbz	r0, b7c0 <subnet_by_id+0x6c>
		BT_WARN("Authentication Value %s != %s",
    b796:	2108      	movs	r1, #8
    b798:	6868      	ldr	r0, [r5, #4]
    b79a:	f7f9 fd45 	bl	5228 <bt_hex_real>
    b79e:	2108      	movs	r1, #8
    b7a0:	4681      	mov	r9, r0
    b7a2:	4638      	mov	r0, r7
    b7a4:	f7f9 fd40 	bl	5228 <bt_hex_real>
    b7a8:	464a      	mov	r2, r9
    b7aa:	4603      	mov	r3, r0
    b7ac:	2157      	movs	r1, #87	; 0x57
    b7ae:	4640      	mov	r0, r8
    b7b0:	f016 fb8b 	bl	21eca <printk>
		return false;
    b7b4:	345a      	adds	r4, #90	; 0x5a
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    b7b6:	b10e      	cbz	r6, b7bc <subnet_by_id+0x68>
			params->new_key = (i > 0);
			return true;
		}
	}

	return false;
    b7b8:	2000      	movs	r0, #0
    b7ba:	e003      	b.n	b7c4 <subnet_by_id+0x70>
    b7bc:	2601      	movs	r6, #1
    b7be:	e7d3      	b.n	b768 <subnet_by_id+0x14>
			params->new_key = (i > 0);
    b7c0:	736e      	strb	r6, [r5, #13]
			return true;
    b7c2:	2001      	movs	r0, #1
}
    b7c4:	b005      	add	sp, #20
    b7c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b7ca:	bf00      	nop
    b7cc:	0002c0ce 	.word	0x0002c0ce

0000b7d0 <k_delayed_work_submit.constprop.7>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b7d0:	4602      	mov	r2, r0
    b7d2:	460b      	mov	r3, r1
    b7d4:	4801      	ldr	r0, [pc, #4]	; (b7dc <k_delayed_work_submit.constprop.7+0xc>)
    b7d6:	4902      	ldr	r1, [pc, #8]	; (b7e0 <k_delayed_work_submit.constprop.7+0x10>)
    b7d8:	f014 bcbe 	b.w	20158 <k_delayed_work_submit_to_queue>
    b7dc:	20002170 	.word	0x20002170
    b7e0:	20001a88 	.word	0x20001a88

0000b7e4 <beacon_send>:
{
    b7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7e8:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) && bt_mesh_prov_active()) {
    b7ea:	f007 ffab 	bl	13744 <bt_mesh_prov_active>
    b7ee:	b110      	cbz	r0, b7f6 <beacon_send+0x12>
		k_delayed_work_submit(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    b7f0:	f44f 3020 	mov.w	r0, #163840	; 0x28000
    b7f4:	e015      	b.n	b822 <beacon_send+0x3e>
	if (bt_mesh_is_provisioned()) {
    b7f6:	f01a f816 	bl	25826 <bt_mesh_is_provisioned>
    b7fa:	4607      	mov	r7, r0
    b7fc:	b300      	cbz	r0, b840 <beacon_send+0x5c>
	first_half = !first_half;
    b7fe:	4a4c      	ldr	r2, [pc, #304]	; (b930 <beacon_send+0x14c>)
    b800:	7813      	ldrb	r3, [r2, #0]
    b802:	f083 0301 	eor.w	r3, r3, #1
    b806:	7013      	strb	r3, [r2, #0]
	if (first_half) {
    b808:	b913      	cbnz	r3, b810 <beacon_send+0x2c>
	bt_mesh_subnet_foreach(sub_update_beacon_observation);
    b80a:	484a      	ldr	r0, [pc, #296]	; (b934 <beacon_send+0x150>)
    b80c:	f001 fade 	bl	cdcc <bt_mesh_subnet_foreach>
		(void)bt_mesh_subnet_find(secure_beacon_send, NULL);
    b810:	2100      	movs	r1, #0
    b812:	4849      	ldr	r0, [pc, #292]	; (b938 <beacon_send+0x154>)
    b814:	f001 fac8 	bl	cda8 <bt_mesh_subnet_find>
		if (bt_mesh_beacon_enabled() ||
    b818:	f01a f834 	bl	25884 <bt_mesh_beacon_enabled>
    b81c:	b128      	cbz	r0, b82a <beacon_send+0x46>
			k_delayed_work_submit(&beacon_timer,
    b81e:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
		k_delayed_work_submit(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    b822:	2100      	movs	r1, #0
    b824:	f7ff ffd4 	bl	b7d0 <k_delayed_work_submit.constprop.7>
    b828:	e007      	b.n	b83a <beacon_send+0x56>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b82a:	4b44      	ldr	r3, [pc, #272]	; (b93c <beacon_send+0x158>)
    b82c:	f3bf 8f5b 	dmb	ish
    b830:	681b      	ldr	r3, [r3, #0]
    b832:	f3bf 8f5b 	dmb	ish
		if (bt_mesh_beacon_enabled() ||
    b836:	071b      	lsls	r3, r3, #28
    b838:	d4f1      	bmi.n	b81e <beacon_send+0x3a>
}
    b83a:	b00a      	add	sp, #40	; 0x28
    b83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t uri_hash[16] = { 0 };
    b840:	4601      	mov	r1, r0
    b842:	2210      	movs	r2, #16
    b844:	a802      	add	r0, sp, #8
    b846:	f018 fcac 	bl	241a2 <memset>
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, UNPROV_XMIT, K_NO_WAIT);
    b84a:	2200      	movs	r2, #0
    b84c:	2300      	movs	r3, #0
    b84e:	210a      	movs	r1, #10
    b850:	2002      	movs	r0, #2
    b852:	f7ff ff23 	bl	b69c <bt_mesh_adv_create>
	if (!buf) {
    b856:	4605      	mov	r5, r0
    b858:	b920      	cbnz	r0, b864 <beacon_send+0x80>
		BT_ERR("Unable to allocate beacon buffer");
    b85a:	4839      	ldr	r0, [pc, #228]	; (b940 <beacon_send+0x15c>)
    b85c:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to allocate URI buffer");
    b85e:	f016 fb34 	bl	21eca <printk>
			return -ENOBUFS;
    b862:	e7c5      	b.n	b7f0 <beacon_send+0xc>
	prov = bt_mesh_prov_get();
    b864:	f007 ff68 	bl	13738 <bt_mesh_prov_get>
	return net_buf_simple_add_u8(&buf->b, val);
    b868:	f105 0608 	add.w	r6, r5, #8
    b86c:	4604      	mov	r4, r0
    b86e:	4639      	mov	r1, r7
    b870:	4630      	mov	r0, r6
    b872:	f01c fb88 	bl	27f86 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b876:	2210      	movs	r2, #16
    b878:	6821      	ldr	r1, [r4, #0]
    b87a:	4630      	mov	r0, r6
    b87c:	f01c fb77 	bl	27f6e <net_buf_simple_add_mem>
	if (prov->uri && bt_mesh_s1(prov->uri, uri_hash) == 0) {
    b880:	f8d4 8004 	ldr.w	r8, [r4, #4]
    b884:	f1b8 0f00 	cmp.w	r8, #0
    b888:	d031      	beq.n	b8ee <beacon_send+0x10a>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
}

static inline bool bt_mesh_s1(const char *m, uint8_t salt[16])
{
	const uint8_t zero[16] = { 0 };
    b88a:	2210      	movs	r2, #16
    b88c:	4639      	mov	r1, r7
    b88e:	a806      	add	r0, sp, #24
    b890:	f018 fc87 	bl	241a2 <memset>

	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    b894:	4640      	mov	r0, r8
    b896:	f018 fc08 	bl	240aa <strlen>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    b89a:	ab02      	add	r3, sp, #8
	struct bt_mesh_sg sg = { m, len };
    b89c:	e9cd 8000 	strd	r8, r0, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    b8a0:	2201      	movs	r2, #1
    b8a2:	4669      	mov	r1, sp
    b8a4:	a806      	add	r0, sp, #24
    b8a6:	f01a fb31 	bl	25f0c <bt_mesh_aes_cmac>
    b8aa:	bb00      	cbnz	r0, b8ee <beacon_send+0x10a>
		oob_info = prov->oob_info | BT_MESH_PROV_OOB_URI;
    b8ac:	8921      	ldrh	r1, [r4, #8]
    b8ae:	f041 0102 	orr.w	r1, r1, #2
	net_buf_simple_add_be16(&buf->b, val);
    b8b2:	4630      	mov	r0, r6
    b8b4:	f01c fb77 	bl	27fa6 <net_buf_simple_add_be16>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b8b8:	2204      	movs	r2, #4
    b8ba:	a902      	add	r1, sp, #8
    b8bc:	4630      	mov	r0, r6
    b8be:	f01c fb56 	bl	27f6e <net_buf_simple_add_mem>
	bt_mesh_adv_send(buf, NULL, NULL);
    b8c2:	2200      	movs	r2, #0
    b8c4:	4611      	mov	r1, r2
    b8c6:	4628      	mov	r0, r5
    b8c8:	f7ff fef8 	bl	b6bc <bt_mesh_adv_send>
	net_buf_unref(buf);
    b8cc:	4628      	mov	r0, r5
    b8ce:	f010 ffcb 	bl	1c868 <net_buf_unref>
	if (prov->uri) {
    b8d2:	6863      	ldr	r3, [r4, #4]
    b8d4:	2b00      	cmp	r3, #0
    b8d6:	d08b      	beq.n	b7f0 <beacon_send+0xc>
		buf = bt_mesh_adv_create(BT_MESH_ADV_URI, UNPROV_XMIT,
    b8d8:	2200      	movs	r2, #0
    b8da:	2300      	movs	r3, #0
    b8dc:	210a      	movs	r1, #10
    b8de:	2003      	movs	r0, #3
    b8e0:	f7ff fedc 	bl	b69c <bt_mesh_adv_create>
		if (!buf) {
    b8e4:	4605      	mov	r5, r0
    b8e6:	b920      	cbnz	r0, b8f2 <beacon_send+0x10e>
			BT_ERR("Unable to allocate URI buffer");
    b8e8:	2145      	movs	r1, #69	; 0x45
    b8ea:	4816      	ldr	r0, [pc, #88]	; (b944 <beacon_send+0x160>)
    b8ec:	e7b7      	b.n	b85e <beacon_send+0x7a>
		oob_info = prov->oob_info;
    b8ee:	8921      	ldrh	r1, [r4, #8]
    b8f0:	e7df      	b.n	b8b2 <beacon_send+0xce>
		len = strlen(prov->uri);
    b8f2:	6860      	ldr	r0, [r4, #4]
    b8f4:	f018 fbd9 	bl	240aa <strlen>
	return net_buf_simple_tailroom(&buf->b);
    b8f8:	f105 0608 	add.w	r6, r5, #8
    b8fc:	4607      	mov	r7, r0
    b8fe:	4630      	mov	r0, r6
    b900:	f01c fb2d 	bl	27f5e <net_buf_simple_tailroom>
		if (net_buf_tailroom(buf) < len) {
    b904:	4287      	cmp	r7, r0
    b906:	d907      	bls.n	b918 <beacon_send+0x134>
			BT_WARN("Too long URI to fit advertising data");
    b908:	2157      	movs	r1, #87	; 0x57
    b90a:	480f      	ldr	r0, [pc, #60]	; (b948 <beacon_send+0x164>)
    b90c:	f016 fadd 	bl	21eca <printk>
		net_buf_unref(buf);
    b910:	4628      	mov	r0, r5
    b912:	f010 ffa9 	bl	1c868 <net_buf_unref>
    b916:	e76b      	b.n	b7f0 <beacon_send+0xc>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b918:	463a      	mov	r2, r7
    b91a:	6861      	ldr	r1, [r4, #4]
    b91c:	4630      	mov	r0, r6
    b91e:	f01c fb26 	bl	27f6e <net_buf_simple_add_mem>
			bt_mesh_adv_send(buf, NULL, NULL);
    b922:	2200      	movs	r2, #0
    b924:	4611      	mov	r1, r2
    b926:	4628      	mov	r0, r5
    b928:	f7ff fec8 	bl	b6bc <bt_mesh_adv_send>
    b92c:	e7f0      	b.n	b910 <beacon_send+0x12c>
    b92e:	bf00      	nop
    b930:	20004521 	.word	0x20004521
    b934:	00025925 	.word	0x00025925
    b938:	0000b9a1 	.word	0x0000b9a1
    b93c:	20001ac0 	.word	0x20001ac0
    b940:	0002bf2f 	.word	0x0002bf2f
    b944:	0002bf55 	.word	0x0002bf55
    b948:	0002bf78 	.word	0x0002bf78

0000b94c <bt_mesh_beacon_create>:
{
    b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b94e:	460c      	mov	r4, r1
    b950:	4606      	mov	r6, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    b952:	f001 f939 	bl	cbc8 <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    b956:	2101      	movs	r1, #1
	uint8_t flags = bt_mesh_net_flags(sub);
    b958:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    b95a:	4620      	mov	r0, r4
    b95c:	f01c fb13 	bl	27f86 <net_buf_simple_add_u8>
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    b960:	7fb5      	ldrb	r5, [r6, #30]
    b962:	1eab      	subs	r3, r5, #2
    b964:	425d      	negs	r5, r3
	net_buf_simple_add_u8(buf, flags);
    b966:	4639      	mov	r1, r7
    b968:	4620      	mov	r0, r4
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    b96a:	415d      	adcs	r5, r3
	net_buf_simple_add_u8(buf, flags);
    b96c:	f01c fb0b 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    b970:	215a      	movs	r1, #90	; 0x5a
    b972:	fb01 6105 	mla	r1, r1, r5, r6
    b976:	2208      	movs	r2, #8
    b978:	315e      	adds	r1, #94	; 0x5e
    b97a:	4620      	mov	r0, r4
    b97c:	f01c faf7 	bl	27f6e <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    b980:	4b06      	ldr	r3, [pc, #24]	; (b99c <bt_mesh_beacon_create+0x50>)
    b982:	4620      	mov	r0, r4
    b984:	6819      	ldr	r1, [r3, #0]
    b986:	f01c fb23 	bl	27fd0 <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
    b98a:	f106 0124 	add.w	r1, r6, #36	; 0x24
    b98e:	4620      	mov	r0, r4
    b990:	2208      	movs	r2, #8
}
    b992:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    b996:	f01c baea 	b.w	27f6e <net_buf_simple_add_mem>
    b99a:	bf00      	nop
    b99c:	20001ab8 	.word	0x20001ab8

0000b9a0 <secure_beacon_send>:
{
    b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b9a2:	4605      	mov	r5, r0
	return z_impl_k_uptime_ticks();
    b9a4:	f01c ff61 	bl	2886a <z_impl_k_uptime_ticks>
    b9a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b9ac:	fba0 6703 	umull	r6, r7, r0, r3
    b9b0:	fb03 7701 	mla	r7, r3, r1, r7
	time_diff = now - sub->beacon_sent;
    b9b4:	682a      	ldr	r2, [r5, #0]
    b9b6:	0bf3      	lsrs	r3, r6, #15
    b9b8:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
    b9bc:	1a9a      	subs	r2, r3, r2
	if (time_diff < (600 * MSEC_PER_SEC) &&
    b9be:	4b15      	ldr	r3, [pc, #84]	; (ba14 <secure_beacon_send+0x74>)
    b9c0:	429a      	cmp	r2, r3
    b9c2:	d809      	bhi.n	b9d8 <secure_beacon_send+0x38>
		time_diff < BEACON_THRESHOLD(sub)) {
    b9c4:	7929      	ldrb	r1, [r5, #4]
    b9c6:	f242 7310 	movw	r3, #10000	; 0x2710
    b9ca:	fb01 3303 	mla	r3, r1, r3, r3
    b9ce:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
    b9d2:	3b08      	subs	r3, #8
	if (time_diff < (600 * MSEC_PER_SEC) &&
    b9d4:	429a      	cmp	r2, r3
    b9d6:	d31b      	bcc.n	ba10 <secure_beacon_send+0x70>
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, PROV_XMIT, K_NO_WAIT);
    b9d8:	2200      	movs	r2, #0
    b9da:	2300      	movs	r3, #0
    b9dc:	2108      	movs	r1, #8
    b9de:	2002      	movs	r0, #2
    b9e0:	f7ff fe5c 	bl	b69c <bt_mesh_adv_create>
	if (!buf) {
    b9e4:	4604      	mov	r4, r0
    b9e6:	b930      	cbnz	r0, b9f6 <secure_beacon_send+0x56>
		BT_ERR("Unable to allocate beacon buffer");
    b9e8:	480b      	ldr	r0, [pc, #44]	; (ba18 <secure_beacon_send+0x78>)
    b9ea:	2145      	movs	r1, #69	; 0x45
    b9ec:	f016 fa6d 	bl	21eca <printk>
    b9f0:	f06f 000b 	mvn.w	r0, #11
}
    b9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	bt_mesh_beacon_create(sub, &buf->b);
    b9f6:	f100 0108 	add.w	r1, r0, #8
    b9fa:	4628      	mov	r0, r5
    b9fc:	f7ff ffa6 	bl	b94c <bt_mesh_beacon_create>
	bt_mesh_adv_send(buf, &send_cb, sub);
    ba00:	4620      	mov	r0, r4
    ba02:	462a      	mov	r2, r5
    ba04:	4905      	ldr	r1, [pc, #20]	; (ba1c <secure_beacon_send+0x7c>)
    ba06:	f7ff fe59 	bl	b6bc <bt_mesh_adv_send>
	net_buf_unref(buf);
    ba0a:	4620      	mov	r0, r4
    ba0c:	f010 ff2c 	bl	1c868 <net_buf_unref>
		return 0;
    ba10:	2000      	movs	r0, #0
    ba12:	e7ef      	b.n	b9f4 <secure_beacon_send+0x54>
    ba14:	000927bf 	.word	0x000927bf
    ba18:	0002bf2f 	.word	0x0002bf2f
    ba1c:	00029560 	.word	0x00029560

0000ba20 <bt_mesh_beacon_update>:
		break;
	}
}

void bt_mesh_beacon_update(struct bt_mesh_subnet *sub)
{
    ba20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ba22:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    ba24:	f001 f8d0 	bl	cbc8 <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;
	int err;

	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    ba28:	7fab      	ldrb	r3, [r5, #30]
    ba2a:	3b02      	subs	r3, #2
    ba2c:	425a      	negs	r2, r3
    ba2e:	415a      	adcs	r2, r3
    ba30:	235a      	movs	r3, #90	; 0x5a
    ba32:	4353      	muls	r3, r2

	BT_DBG("NetIndex 0x%03x Using %s key", sub->net_idx,
	       SUBNET_KEY_TX_IDX(sub) ? "new" : "current");
	BT_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);

	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    ba34:	f103 025e 	add.w	r2, r3, #94	; 0x5e
    ba38:	f103 0476 	add.w	r4, r3, #118	; 0x76
				   bt_mesh.iv_index, sub->auth);
    ba3c:	f105 0324 	add.w	r3, r5, #36	; 0x24
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    ba40:	9300      	str	r3, [sp, #0]
    ba42:	4b09      	ldr	r3, [pc, #36]	; (ba68 <bt_mesh_beacon_update+0x48>)
    ba44:	4601      	mov	r1, r0
    ba46:	681b      	ldr	r3, [r3, #0]
    ba48:	442a      	add	r2, r5
    ba4a:	1928      	adds	r0, r5, r4
    ba4c:	f01a fbfe 	bl	2624c <bt_mesh_beacon_auth>
	if (err) {
    ba50:	b138      	cbz	r0, ba62 <bt_mesh_beacon_update+0x42>
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    ba52:	8baa      	ldrh	r2, [r5, #28]
    ba54:	4805      	ldr	r0, [pc, #20]	; (ba6c <bt_mesh_beacon_update+0x4c>)
    ba56:	2145      	movs	r1, #69	; 0x45
	}
}
    ba58:	b003      	add	sp, #12
    ba5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    ba5e:	f016 ba34 	b.w	21eca <printk>
}
    ba62:	b003      	add	sp, #12
    ba64:	bd30      	pop	{r4, r5, pc}
    ba66:	bf00      	nop
    ba68:	20001ab8 	.word	0x20001ab8
    ba6c:	0002c094 	.word	0x0002c094

0000ba70 <bt_mesh_beacon_init>:
}

BT_MESH_SUBNET_CB_DEFINE(subnet_evt);

void bt_mesh_beacon_init(void)
{
    ba70:	b508      	push	{r3, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    ba72:	4b04      	ldr	r3, [pc, #16]	; (ba84 <bt_mesh_beacon_init+0x14>)
    ba74:	2230      	movs	r2, #48	; 0x30
    ba76:	2100      	movs	r1, #0
    ba78:	4618      	mov	r0, r3
    ba7a:	f018 fb92 	bl	241a2 <memset>
    ba7e:	4a02      	ldr	r2, [pc, #8]	; (ba88 <bt_mesh_beacon_init+0x18>)
    ba80:	6042      	str	r2, [r0, #4]
	k_delayed_work_init(&beacon_timer, beacon_send);
}
    ba82:	bd08      	pop	{r3, pc}
    ba84:	20001a88 	.word	0x20001a88
    ba88:	0000b7e5 	.word	0x0000b7e5

0000ba8c <bt_mesh_beacon_ivu_initiator>:

void bt_mesh_beacon_ivu_initiator(bool enable)
{
    ba8c:	b508      	push	{r3, lr}
    ba8e:	4b13      	ldr	r3, [pc, #76]	; (badc <bt_mesh_beacon_ivu_initiator+0x50>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ba90:	f3bf 8f5b 	dmb	ish
	if (val) {
    ba94:	b178      	cbz	r0, bab6 <bt_mesh_beacon_ivu_initiator+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ba96:	e853 2f00 	ldrex	r2, [r3]
    ba9a:	f042 0208 	orr.w	r2, r2, #8
    ba9e:	e843 2100 	strex	r1, r2, [r3]
    baa2:	2900      	cmp	r1, #0
    baa4:	d1f7      	bne.n	ba96 <bt_mesh_beacon_ivu_initiator+0xa>
    baa6:	f3bf 8f5b 	dmb	ish
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_INITIATOR, enable);

	if (enable) {
		k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    baaa:	2000      	movs	r0, #0
    baac:	2100      	movs	r1, #0
	} else if (!bt_mesh_beacon_enabled()) {
		k_delayed_work_cancel(&beacon_timer);
	}
}
    baae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    bab2:	f7ff be8d 	b.w	b7d0 <k_delayed_work_submit.constprop.7>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bab6:	e853 2f00 	ldrex	r2, [r3]
    baba:	f022 0208 	bic.w	r2, r2, #8
    babe:	e843 2100 	strex	r1, r2, [r3]
    bac2:	2900      	cmp	r1, #0
    bac4:	d1f7      	bne.n	bab6 <bt_mesh_beacon_ivu_initiator+0x2a>
    bac6:	f3bf 8f5b 	dmb	ish
	} else if (!bt_mesh_beacon_enabled()) {
    baca:	f019 fedb 	bl	25884 <bt_mesh_beacon_enabled>
    bace:	b920      	cbnz	r0, bada <bt_mesh_beacon_ivu_initiator+0x4e>
		k_delayed_work_cancel(&beacon_timer);
    bad0:	4803      	ldr	r0, [pc, #12]	; (bae0 <bt_mesh_beacon_ivu_initiator+0x54>)
}
    bad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&beacon_timer);
    bad6:	f014 bbaf 	b.w	20238 <k_delayed_work_cancel>
}
    bada:	bd08      	pop	{r3, pc}
    badc:	20001ac0 	.word	0x20001ac0
    bae0:	20001a88 	.word	0x20001a88

0000bae4 <bt_mesh_beacon_recv>:
{
    bae4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < 1) {
    bae6:	8883      	ldrh	r3, [r0, #4]
{
    bae8:	b085      	sub	sp, #20
    baea:	4604      	mov	r4, r0
	if (buf->len < 1) {
    baec:	b923      	cbnz	r3, baf8 <bt_mesh_beacon_recv+0x14>
		BT_ERR("Too short beacon");
    baee:	4852      	ldr	r0, [pc, #328]	; (bc38 <bt_mesh_beacon_recv+0x154>)
    baf0:	2145      	movs	r1, #69	; 0x45
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    baf2:	f016 f9ea 	bl	21eca <printk>
		return;
    baf6:	e02c      	b.n	bb52 <bt_mesh_beacon_recv+0x6e>
	type = net_buf_simple_pull_u8(buf);
    baf8:	f01c fa09 	bl	27f0e <net_buf_simple_pull_u8>
	switch (type) {
    bafc:	4605      	mov	r5, r0
    bafe:	b128      	cbz	r0, bb0c <bt_mesh_beacon_recv+0x28>
    bb00:	2801      	cmp	r0, #1
    bb02:	d028      	beq.n	bb56 <bt_mesh_beacon_recv+0x72>
		BT_WARN("Unknown beacon type 0x%02x", type);
    bb04:	4602      	mov	r2, r0
    bb06:	2157      	movs	r1, #87	; 0x57
    bb08:	484c      	ldr	r0, [pc, #304]	; (bc3c <bt_mesh_beacon_recv+0x158>)
    bb0a:	e006      	b.n	bb1a <bt_mesh_beacon_recv+0x36>
	if (buf->len != 18 && buf->len != 22) {
    bb0c:	88a2      	ldrh	r2, [r4, #4]
    bb0e:	f022 0304 	bic.w	r3, r2, #4
    bb12:	2b12      	cmp	r3, #18
    bb14:	d004      	beq.n	bb20 <bt_mesh_beacon_recv+0x3c>
		BT_ERR("Invalid unprovisioned beacon length (%u)", buf->len);
    bb16:	484a      	ldr	r0, [pc, #296]	; (bc40 <bt_mesh_beacon_recv+0x15c>)
    bb18:	2145      	movs	r1, #69	; 0x45
		BT_WARN("Unknown beacon type 0x%02x", type);
    bb1a:	f016 f9d6 	bl	21eca <printk>
    bb1e:	e018      	b.n	bb52 <bt_mesh_beacon_recv+0x6e>
	uuid = net_buf_simple_pull_mem(buf, 16);
    bb20:	2110      	movs	r1, #16
    bb22:	4620      	mov	r0, r4
    bb24:	f010 ffd2 	bl	1cacc <net_buf_simple_pull_mem>
    bb28:	4606      	mov	r6, r0
	oob_info = net_buf_simple_pull_be16(buf);
    bb2a:	4620      	mov	r0, r4
    bb2c:	f01c f9ff 	bl	27f2e <net_buf_simple_pull_be16>
	if (buf->len == 4) {
    bb30:	88a3      	ldrh	r3, [r4, #4]
    bb32:	2b04      	cmp	r3, #4
	oob_info = net_buf_simple_pull_be16(buf);
    bb34:	4607      	mov	r7, r0
	if (buf->len == 4) {
    bb36:	d104      	bne.n	bb42 <bt_mesh_beacon_recv+0x5e>
		uri_hash_val = net_buf_simple_pull_be32(buf);
    bb38:	4620      	mov	r0, r4
    bb3a:	f01c fa03 	bl	27f44 <net_buf_simple_pull_be32>
		uri_hash = &uri_hash_val;
    bb3e:	466d      	mov	r5, sp
		uri_hash_val = net_buf_simple_pull_be32(buf);
    bb40:	9000      	str	r0, [sp, #0]
	prov = bt_mesh_prov_get();
    bb42:	f007 fdf9 	bl	13738 <bt_mesh_prov_get>
	if (prov->unprovisioned_beacon) {
    bb46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    bb48:	b11b      	cbz	r3, bb52 <bt_mesh_beacon_recv+0x6e>
		prov->unprovisioned_beacon(uuid,
    bb4a:	462a      	mov	r2, r5
    bb4c:	4639      	mov	r1, r7
    bb4e:	4630      	mov	r0, r6
    bb50:	4798      	blx	r3
}
    bb52:	b005      	add	sp, #20
    bb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < 21) {
    bb56:	88a2      	ldrh	r2, [r4, #4]
    bb58:	2a14      	cmp	r2, #20
    bb5a:	d802      	bhi.n	bb62 <bt_mesh_beacon_recv+0x7e>
		BT_ERR("Too short secure beacon (len %u)", buf->len);
    bb5c:	2145      	movs	r1, #69	; 0x45
    bb5e:	4839      	ldr	r0, [pc, #228]	; (bc44 <bt_mesh_beacon_recv+0x160>)
    bb60:	e7db      	b.n	bb1a <bt_mesh_beacon_recv+0x36>
	sub = bt_mesh_subnet_find(cache_check, buf->data);
    bb62:	6821      	ldr	r1, [r4, #0]
    bb64:	4838      	ldr	r0, [pc, #224]	; (bc48 <bt_mesh_beacon_recv+0x164>)
    bb66:	f001 f91f 	bl	cda8 <bt_mesh_subnet_find>
	if (sub) {
    bb6a:	4605      	mov	r5, r0
    bb6c:	2800      	cmp	r0, #0
    bb6e:	d138      	bne.n	bbe2 <bt_mesh_beacon_recv+0xfe>
	params.flags = net_buf_simple_pull_u8(buf);
    bb70:	4620      	mov	r0, r4
	data = buf->data;
    bb72:	6826      	ldr	r6, [r4, #0]
	params.flags = net_buf_simple_pull_u8(buf);
    bb74:	f01c f9cb 	bl	27f0e <net_buf_simple_pull_u8>
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    bb78:	2108      	movs	r1, #8
	params.flags = net_buf_simple_pull_u8(buf);
    bb7a:	f88d 000c 	strb.w	r0, [sp, #12]
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    bb7e:	4620      	mov	r0, r4
    bb80:	f010 ffa4 	bl	1cacc <net_buf_simple_pull_mem>
    bb84:	9000      	str	r0, [sp, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    bb86:	4620      	mov	r0, r4
    bb88:	f01c f9dc 	bl	27f44 <net_buf_simple_pull_be32>
	params.auth = buf->data;
    bb8c:	6823      	ldr	r3, [r4, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    bb8e:	9002      	str	r0, [sp, #8]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    bb90:	4669      	mov	r1, sp
    bb92:	482e      	ldr	r0, [pc, #184]	; (bc4c <bt_mesh_beacon_recv+0x168>)
	params.auth = buf->data;
    bb94:	9301      	str	r3, [sp, #4]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    bb96:	f001 f907 	bl	cda8 <bt_mesh_subnet_find>
	if (!sub) {
    bb9a:	4605      	mov	r5, r0
    bb9c:	2800      	cmp	r0, #0
    bb9e:	d0d8      	beq.n	bb52 <bt_mesh_beacon_recv+0x6e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !params.new_key) {
    bba0:	7f83      	ldrb	r3, [r0, #30]
    bba2:	2b02      	cmp	r3, #2
    bba4:	d105      	bne.n	bbb2 <bt_mesh_beacon_recv+0xce>
    bba6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    bbaa:	b913      	cbnz	r3, bbb2 <bt_mesh_beacon_recv+0xce>
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    bbac:	2157      	movs	r1, #87	; 0x57
    bbae:	4828      	ldr	r0, [pc, #160]	; (bc50 <bt_mesh_beacon_recv+0x16c>)
    bbb0:	e79f      	b.n	baf2 <bt_mesh_beacon_recv+0xe>
	memcpy(sub->beacon_cache, data, 21);
    bbb2:	2215      	movs	r2, #21
    bbb4:	4631      	mov	r1, r6
    bbb6:	1da8      	adds	r0, r5, #6
    bbb8:	f018 fac9 	bl	2414e <memcpy>
	bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(params.flags),
    bbbc:	f89d 100c 	ldrb.w	r1, [sp, #12]
    bbc0:	f89d 200d 	ldrb.w	r2, [sp, #13]
    bbc4:	4628      	mov	r0, r5
    bbc6:	f001 0101 	and.w	r1, r1, #1
    bbca:	f019 ff4c 	bl	25a66 <bt_mesh_kr_update>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    bbce:	2000      	movs	r0, #0
    bbd0:	f019 ffeb 	bl	25baa <bt_mesh_subnet_get>
    bbd4:	b178      	cbz	r0, bbf6 <bt_mesh_beacon_recv+0x112>
    bbd6:	8bab      	ldrh	r3, [r5, #28]
    bbd8:	b16b      	cbz	r3, bbf6 <bt_mesh_beacon_recv+0x112>
		BT_WARN("Ignoring secure beacon on non-primary subnet");
    bbda:	2157      	movs	r1, #87	; 0x57
    bbdc:	481d      	ldr	r0, [pc, #116]	; (bc54 <bt_mesh_beacon_recv+0x170>)
    bbde:	f016 f974 	bl	21eca <printk>
	if (bt_mesh_beacon_enabled() &&
    bbe2:	f019 fe4f 	bl	25884 <bt_mesh_beacon_enabled>
    bbe6:	2800      	cmp	r0, #0
    bbe8:	d0b3      	beq.n	bb52 <bt_mesh_beacon_recv+0x6e>
	    sub->beacons_cur < 0xff) {
    bbea:	796b      	ldrb	r3, [r5, #5]
	if (bt_mesh_beacon_enabled() &&
    bbec:	2bff      	cmp	r3, #255	; 0xff
    bbee:	d0b0      	beq.n	bb52 <bt_mesh_beacon_recv+0x6e>
		sub->beacons_cur++;
    bbf0:	3301      	adds	r3, #1
    bbf2:	716b      	strb	r3, [r5, #5]
    bbf4:	e7ad      	b.n	bb52 <bt_mesh_beacon_recv+0x6e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bbf6:	4b18      	ldr	r3, [pc, #96]	; (bc58 <bt_mesh_beacon_recv+0x174>)
    bbf8:	f3bf 8f5b 	dmb	ish
    bbfc:	681a      	ldr	r2, [r3, #0]
    bbfe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    bc02:	0712      	lsls	r2, r2, #28
    bc04:	d50f      	bpl.n	bc26 <bt_mesh_beacon_recv+0x142>
    bc06:	f3bf 8f5b 	dmb	ish
    bc0a:	681b      	ldr	r3, [r3, #0]
    bc0c:	f3bf 8f5b 	dmb	ish
	     BT_MESH_IV_UPDATE(params.flags))) {
    bc10:	f89d 200c 	ldrb.w	r2, [sp, #12]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    bc14:	f3c3 0380 	ubfx	r3, r3, #2, #1
	     BT_MESH_IV_UPDATE(params.flags))) {
    bc18:	f3c2 0240 	ubfx	r2, r2, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    bc1c:	429a      	cmp	r2, r3
    bc1e:	d102      	bne.n	bc26 <bt_mesh_beacon_recv+0x142>
		bt_mesh_beacon_ivu_initiator(false);
    bc20:	2000      	movs	r0, #0
    bc22:	f7ff ff33 	bl	ba8c <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(params.iv_index, BT_MESH_IV_UPDATE(params.flags));
    bc26:	f89d 100c 	ldrb.w	r1, [sp, #12]
    bc2a:	9802      	ldr	r0, [sp, #8]
    bc2c:	f3c1 0140 	ubfx	r1, r1, #1, #1
    bc30:	f000 fa02 	bl	c038 <bt_mesh_net_iv_update>
    bc34:	e7d5      	b.n	bbe2 <bt_mesh_beacon_recv+0xfe>
    bc36:	bf00      	nop
    bc38:	0002bfa2 	.word	0x0002bfa2
    bc3c:	0002c074 	.word	0x0002c074
    bc40:	0002bfb8 	.word	0x0002bfb8
    bc44:	0002bfe6 	.word	0x0002bfe6
    bc48:	0002592f 	.word	0x0002592f
    bc4c:	0000b755 	.word	0x0000b755
    bc50:	0002c00c 	.word	0x0002c00c
    bc54:	0002c042 	.word	0x0002c042
    bc58:	20001ac0 	.word	0x20001ac0

0000bc5c <bt_mesh_beacon_enable>:

	bt_mesh_beacon_update(sub);
}

void bt_mesh_beacon_enable(void)
{
    bc5c:	b508      	push	{r3, lr}
	if (!bt_mesh_is_provisioned()) {
    bc5e:	f019 fde2 	bl	25826 <bt_mesh_is_provisioned>
    bc62:	b928      	cbnz	r0, bc70 <bt_mesh_beacon_enable+0x14>
		return;
	}

	bt_mesh_subnet_foreach(subnet_beacon_enable);

	k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    bc64:	2000      	movs	r0, #0
    bc66:	2100      	movs	r1, #0
}
    bc68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    bc6c:	f7ff bdb0 	b.w	b7d0 <k_delayed_work_submit.constprop.7>
	bt_mesh_subnet_foreach(subnet_beacon_enable);
    bc70:	4801      	ldr	r0, [pc, #4]	; (bc78 <bt_mesh_beacon_enable+0x1c>)
    bc72:	f001 f8ab 	bl	cdcc <bt_mesh_subnet_foreach>
    bc76:	e7f5      	b.n	bc64 <bt_mesh_beacon_enable+0x8>
    bc78:	0002596f 	.word	0x0002596f

0000bc7c <bt_mesh_beacon_disable>:
    bc7c:	4b05      	ldr	r3, [pc, #20]	; (bc94 <bt_mesh_beacon_disable+0x18>)
    bc7e:	f3bf 8f5b 	dmb	ish
    bc82:	681b      	ldr	r3, [r3, #0]
    bc84:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    bc88:	071b      	lsls	r3, r3, #28
    bc8a:	d402      	bmi.n	bc92 <bt_mesh_beacon_disable+0x16>
		k_delayed_work_cancel(&beacon_timer);
    bc8c:	4802      	ldr	r0, [pc, #8]	; (bc98 <bt_mesh_beacon_disable+0x1c>)
    bc8e:	f014 bad3 	b.w	20238 <k_delayed_work_cancel>
	}
}
    bc92:	4770      	bx	lr
    bc94:	20001ac0 	.word	0x20001ac0
    bc98:	20001a88 	.word	0x20001a88

0000bc9c <bt_mesh_net_local>:

	return seq;
}

static void bt_mesh_net_local(struct k_work *work)
{
    bc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_buf *buf;

	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    bca0:	4c2e      	ldr	r4, [pc, #184]	; (bd5c <bt_mesh_net_local+0xc0>)
{
    bca2:	b086      	sub	sp, #24
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    bca4:	f104 0518 	add.w	r5, r4, #24
    bca8:	4628      	mov	r0, r5
    bcaa:	f010 fd53 	bl	1c754 <net_buf_slist_get>
    bcae:	4606      	mov	r6, r0
    bcb0:	b910      	cbnz	r0, bcb8 <bt_mesh_net_local+0x1c>
		       rx.ctx.addr, rx.seq, sub);

		(void) bt_mesh_trans_recv(&buf->b, &rx);
		net_buf_unref(buf);
	}
}
    bcb2:	b006      	add	sp, #24
    bcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_mesh_subnet *sub = LOOPBACK_BUF_SUB(buf);
    bcb8:	f8d6 8014 	ldr.w	r8, [r6, #20]
				.addr = SRC(buf->data),
    bcbc:	4637      	mov	r7, r6
		struct bt_mesh_net_rx rx = {
    bcbe:	2210      	movs	r2, #16
    bcc0:	2100      	movs	r1, #0
    bcc2:	a802      	add	r0, sp, #8
    bcc4:	f018 fa6d 	bl	241a2 <memset>
    bcc8:	f8b8 301c 	ldrh.w	r3, [r8, #28]
				.addr = SRC(buf->data),
    bccc:	f857 1f08 	ldr.w	r1, [r7, #8]!
		struct bt_mesh_net_rx rx = {
    bcd0:	f8ad 3004 	strh.w	r3, [sp, #4]
    bcd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bcd8:	f8ad 3006 	strh.w	r3, [sp, #6]
	return ((uint16_t)src[0] << 8) | src[1];
    bcdc:	794a      	ldrb	r2, [r1, #5]
    bcde:	798b      	ldrb	r3, [r1, #6]
    bce0:	f8cd 8000 	str.w	r8, [sp]
    bce4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bce8:	f8ad 3008 	strh.w	r3, [sp, #8]
    bcec:	79ca      	ldrb	r2, [r1, #7]
    bcee:	7a0b      	ldrb	r3, [r1, #8]
    bcf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bcf4:	f8ad 300a 	strh.w	r3, [sp, #10]
				.recv_ttl = TTL(buf->data),
    bcf8:	784b      	ldrb	r3, [r1, #1]
    bcfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		struct bt_mesh_net_rx rx = {
    bcfe:	f88d 300d 	strb.w	r3, [sp, #13]
			.seq = SEQ(buf->data),
    bd02:	1c88      	adds	r0, r1, #2
		struct bt_mesh_net_rx rx = {
    bd04:	2301      	movs	r3, #1
    bd06:	f88d 300f 	strb.w	r3, [sp, #15]
			.seq = SEQ(buf->data),
    bd0a:	f019 fe34 	bl	25976 <sys_get_be24>
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    bd0e:	6823      	ldr	r3, [r4, #0]
		struct bt_mesh_net_rx rx = {
    bd10:	9004      	str	r0, [sp, #16]
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    bd12:	780a      	ldrb	r2, [r1, #0]
    bd14:	f003 0301 	and.w	r3, r3, #1
		struct bt_mesh_net_rx rx = {
    bd18:	ea83 12d2 	eor.w	r2, r3, r2, lsr #7
    bd1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    bd20:	f362 0300 	bfi	r3, r2, #0, #1
			.new_key = SUBNET_KEY_TX_IDX(sub),
    bd24:	f898 201e 	ldrb.w	r2, [r8, #30]
    bd28:	1e90      	subs	r0, r2, #2
    bd2a:	4242      	negs	r2, r0
    bd2c:	4142      	adcs	r2, r0
		struct bt_mesh_net_rx rx = {
    bd2e:	f362 0341 	bfi	r3, r2, #1, #1
    bd32:	f88d 3014 	strb.w	r3, [sp, #20]
			.ctl = CTL(buf->data),
    bd36:	784a      	ldrb	r2, [r1, #1]
		struct bt_mesh_net_rx rx = {
    bd38:	b2db      	uxtb	r3, r3
			.ctl = CTL(buf->data),
    bd3a:	09d2      	lsrs	r2, r2, #7
		struct bt_mesh_net_rx rx = {
    bd3c:	f362 03c3 	bfi	r3, r2, #3, #1
    bd40:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    bd44:	f043 0350 	orr.w	r3, r3, #80	; 0x50
		(void) bt_mesh_trans_recv(&buf->b, &rx);
    bd48:	4669      	mov	r1, sp
    bd4a:	4638      	mov	r0, r7
		struct bt_mesh_net_rx rx = {
    bd4c:	f88d 3014 	strb.w	r3, [sp, #20]
		(void) bt_mesh_trans_recv(&buf->b, &rx);
    bd50:	f002 fa90 	bl	e274 <bt_mesh_trans_recv>
		net_buf_unref(buf);
    bd54:	4630      	mov	r0, r6
    bd56:	f010 fd87 	bl	1c868 <net_buf_unref>
    bd5a:	e7a5      	b.n	bca8 <bt_mesh_net_local+0xc>
    bd5c:	20001ab8 	.word	0x20001ab8

0000bd60 <net_decrypt>:
}

static bool net_decrypt(struct bt_mesh_net_rx *rx, struct net_buf_simple *in,
			struct net_buf_simple *out,
			const struct bt_mesh_net_cred *cred)
{
    bd60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd64:	461f      	mov	r7, r3
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);

	if (NID(in->data) != cred->nid) {
    bd66:	680b      	ldr	r3, [r1, #0]
{
    bd68:	4614      	mov	r4, r2
	if (NID(in->data) != cred->nid) {
    bd6a:	781a      	ldrb	r2, [r3, #0]
{
    bd6c:	4680      	mov	r8, r0
	if (NID(in->data) != cred->nid) {
    bd6e:	7838      	ldrb	r0, [r7, #0]
    bd70:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    bd74:	4298      	cmp	r0, r3
    bd76:	d002      	beq.n	bd7e <net_decrypt+0x1e>
		return false;
    bd78:	2000      	movs	r0, #0

	BT_DBG("src 0x%04x", rx->ctx.addr);

	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
				   proxy) == 0;
}
    bd7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    bd7e:	4d33      	ldr	r5, [pc, #204]	; (be4c <net_decrypt+0xec>)
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    bd80:	f898 6014 	ldrb.w	r6, [r8, #20]
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    bd84:	682b      	ldr	r3, [r5, #0]
    bd86:	f003 0301 	and.w	r3, r3, #1
    bd8a:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    bd8e:	4632      	mov	r2, r6
    bd90:	f363 0200 	bfi	r2, r3, #0, #1
	buf->len  = 0U;
    bd94:	2300      	movs	r3, #0
    bd96:	f888 2014 	strb.w	r2, [r8, #20]
    bd9a:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    bd9c:	68a3      	ldr	r3, [r4, #8]
    bd9e:	6023      	str	r3, [r4, #0]
	net_buf_simple_add_mem(out, in->data, in->len);
    bda0:	888a      	ldrh	r2, [r1, #4]
    bda2:	6809      	ldr	r1, [r1, #0]
    bda4:	4620      	mov	r0, r4
    bda6:	f01c f8e2 	bl	27f6e <net_buf_simple_add_mem>
	if (bt_mesh_net_obfuscate(out->data, BT_MESH_NET_IVI_RX(rx),
    bdaa:	f898 3014 	ldrb.w	r3, [r8, #20]
    bdae:	6829      	ldr	r1, [r5, #0]
    bdb0:	6820      	ldr	r0, [r4, #0]
    bdb2:	f003 0301 	and.w	r3, r3, #1
    bdb6:	f107 0211 	add.w	r2, r7, #17
    bdba:	1ac9      	subs	r1, r1, r3
    bdbc:	f01a f901 	bl	25fc2 <bt_mesh_net_obfuscate>
    bdc0:	2800      	cmp	r0, #0
    bdc2:	d1d9      	bne.n	bd78 <net_decrypt+0x18>
	rx->ctx.addr = SRC(out->data);
    bdc4:	6823      	ldr	r3, [r4, #0]
    bdc6:	7959      	ldrb	r1, [r3, #5]
    bdc8:	799a      	ldrb	r2, [r3, #6]
    bdca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    bdce:	b212      	sxth	r2, r2
    bdd0:	b290      	uxth	r0, r2
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    bdd2:	2a00      	cmp	r2, #0
	rx->ctx.addr = SRC(out->data);
    bdd4:	f8a8 0008 	strh.w	r0, [r8, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    bdd8:	ddce      	ble.n	bd78 <net_decrypt+0x18>
	if (bt_mesh_elem_find(rx->ctx.addr)) {
    bdda:	f003 fdcf 	bl	f97c <bt_mesh_elem_find>
    bdde:	2800      	cmp	r0, #0
    bde0:	d1ca      	bne.n	bd78 <net_decrypt+0x18>
	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(out)) {
    bde2:	f898 8014 	ldrb.w	r8, [r8, #20]
    bde6:	f018 0130 	ands.w	r1, r8, #48	; 0x30
    bdea:	d11c      	bne.n	be26 <net_decrypt+0xc6>
		if (msg_cache[i].src == SRC(pdu->data) &&
    bdec:	6823      	ldr	r3, [r4, #0]
    bdee:	f8df b060 	ldr.w	fp, [pc, #96]	; be50 <net_decrypt+0xf0>
    bdf2:	795a      	ldrb	r2, [r3, #5]
    bdf4:	f893 a006 	ldrb.w	sl, [r3, #6]
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    bdf8:	f103 0902 	add.w	r9, r3, #2
		if (msg_cache[i].src == SRC(pdu->data) &&
    bdfc:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
    be00:	f83b 3021 	ldrh.w	r3, [fp, r1, lsl #2]
    be04:	f3c3 030e 	ubfx	r3, r3, #0, #15
    be08:	4553      	cmp	r3, sl
    be0a:	d109      	bne.n	be20 <net_decrypt+0xc0>
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    be0c:	4648      	mov	r0, r9
    be0e:	f019 fdb2 	bl	25976 <sys_get_be24>
    be12:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
    be16:	f3c0 0010 	ubfx	r0, r0, #0, #17
		if (msg_cache[i].src == SRC(pdu->data) &&
    be1a:	ebb0 3fd3 	cmp.w	r0, r3, lsr #15
    be1e:	d0ab      	beq.n	bd78 <net_decrypt+0x18>
    be20:	3101      	adds	r1, #1
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    be22:	290a      	cmp	r1, #10
    be24:	d1ec      	bne.n	be00 <net_decrypt+0xa0>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    be26:	f006 0330 	and.w	r3, r6, #48	; 0x30
	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
    be2a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    be2e:	682a      	ldr	r2, [r5, #0]
    be30:	424b      	negs	r3, r1
    be32:	f008 0801 	and.w	r8, r8, #1
    be36:	414b      	adcs	r3, r1
    be38:	eba2 0208 	sub.w	r2, r2, r8
    be3c:	4621      	mov	r1, r4
    be3e:	1c78      	adds	r0, r7, #1
    be40:	f01a f93b 	bl	260ba <bt_mesh_net_decrypt>
				   proxy) == 0;
    be44:	fab0 f080 	clz	r0, r0
    be48:	0940      	lsrs	r0, r0, #5
    be4a:	e796      	b.n	bd7a <net_decrypt+0x1a>
    be4c:	20001ab8 	.word	0x20001ab8
    be50:	20002ab4 	.word	0x20002ab4

0000be54 <seq_set>:

BT_MESH_SETTINGS_DEFINE(iv, "IV", iv_set);

static int seq_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		   void *cb_arg)
{
    be54:	b513      	push	{r0, r1, r4, lr}
    be56:	4610      	mov	r0, r2
    be58:	461c      	mov	r4, r3
	struct seq_val seq;
	int err;

	if (len_rd == 0) {
    be5a:	b929      	cbnz	r1, be68 <seq_set+0x14>
		BT_DBG("val (null)");

		bt_mesh.seq = 0U;
    be5c:	4b10      	ldr	r3, [pc, #64]	; (bea0 <seq_set+0x4c>)
		return 0;
    be5e:	460c      	mov	r4, r1
		bt_mesh.seq = 0U;
    be60:	6059      	str	r1, [r3, #4]
	}

	BT_DBG("Sequence Number 0x%06x", bt_mesh.seq);

	return 0;
}
    be62:	4620      	mov	r0, r4
    be64:	b002      	add	sp, #8
    be66:	bd10      	pop	{r4, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &seq, sizeof(seq));
    be68:	4621      	mov	r1, r4
    be6a:	2303      	movs	r3, #3
    be6c:	aa01      	add	r2, sp, #4
    be6e:	f006 f889 	bl	11f84 <bt_mesh_settings_set>
	if (err) {
    be72:	4604      	mov	r4, r0
    be74:	b120      	cbz	r0, be80 <seq_set+0x2c>
		BT_ERR("Failed to set \'seq\'");
    be76:	2145      	movs	r1, #69	; 0x45
    be78:	480a      	ldr	r0, [pc, #40]	; (bea4 <seq_set+0x50>)
    be7a:	f016 f826 	bl	21eca <printk>
		return err;
    be7e:	e7f0      	b.n	be62 <seq_set+0xe>
	return ((uint16_t)src[1] << 8) | src[0];
    be80:	f89d 2005 	ldrb.w	r2, [sp, #5]
    be84:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
    be88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    be8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    be90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
    be94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		bt_mesh.seq--;
    be98:	4a01      	ldr	r2, [pc, #4]	; (bea0 <seq_set+0x4c>)
    be9a:	337f      	adds	r3, #127	; 0x7f
    be9c:	6053      	str	r3, [r2, #4]
	return 0;
    be9e:	e7e0      	b.n	be62 <seq_set+0xe>
    bea0:	20001ab8 	.word	0x20001ab8
    bea4:	0002c48b 	.word	0x0002c48b

0000bea8 <net_set>:
{
    bea8:	b530      	push	{r4, r5, lr}
    beaa:	4610      	mov	r0, r2
    beac:	b087      	sub	sp, #28
    beae:	461d      	mov	r5, r3
	if (len_rd == 0) {
    beb0:	460c      	mov	r4, r1
    beb2:	b949      	cbnz	r1, bec8 <net_set+0x20>
		bt_mesh_comp_unprovision();
    beb4:	f003 fd56 	bl	f964 <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    beb8:	2210      	movs	r2, #16
    beba:	4621      	mov	r1, r4
    bebc:	480e      	ldr	r0, [pc, #56]	; (bef8 <net_set+0x50>)
    bebe:	f018 f970 	bl	241a2 <memset>
}
    bec2:	4620      	mov	r0, r4
    bec4:	b007      	add	sp, #28
    bec6:	bd30      	pop	{r4, r5, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &net, sizeof(net));
    bec8:	2312      	movs	r3, #18
    beca:	aa01      	add	r2, sp, #4
    becc:	4629      	mov	r1, r5
    bece:	f006 f859 	bl	11f84 <bt_mesh_settings_set>
	if (err) {
    bed2:	4604      	mov	r4, r0
    bed4:	b120      	cbz	r0, bee0 <net_set+0x38>
		BT_ERR("Failed to set \'net\'");
    bed6:	2145      	movs	r1, #69	; 0x45
    bed8:	4808      	ldr	r0, [pc, #32]	; (befc <net_set+0x54>)
    beda:	f015 fff6 	bl	21eca <printk>
		return err;
    bede:	e7f0      	b.n	bec2 <net_set+0x1a>
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
    bee0:	2210      	movs	r2, #16
    bee2:	f10d 0106 	add.w	r1, sp, #6
    bee6:	4804      	ldr	r0, [pc, #16]	; (bef8 <net_set+0x50>)
    bee8:	f018 f931 	bl	2414e <memcpy>
	bt_mesh_comp_provision(net.primary_addr);
    beec:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    bef0:	f003 fd22 	bl	f938 <bt_mesh_comp_provision>
	return 0;
    bef4:	e7e5      	b.n	bec2 <net_set+0x1a>
    bef6:	bf00      	nop
    bef8:	20001ce0 	.word	0x20001ce0
    befc:	0002c472 	.word	0x0002c472

0000bf00 <atomic_test_bit.constprop.12>:
    bf00:	4b05      	ldr	r3, [pc, #20]	; (bf18 <atomic_test_bit.constprop.12+0x18>)
    bf02:	f3bf 8f5b 	dmb	ish
    bf06:	689b      	ldr	r3, [r3, #8]
    bf08:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    bf0c:	fa43 f000 	asr.w	r0, r3, r0
}
    bf10:	f000 0001 	and.w	r0, r0, #1
    bf14:	4770      	bx	lr
    bf16:	bf00      	nop
    bf18:	20001ab8 	.word	0x20001ab8

0000bf1c <atomic_set_bit_to.constprop.13>:
	if (val) {
    bf1c:	4b0b      	ldr	r3, [pc, #44]	; (bf4c <atomic_set_bit_to.constprop.13+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bf1e:	f3bf 8f5b 	dmb	ish
	if (val) {
    bf22:	b150      	cbz	r0, bf3a <atomic_set_bit_to.constprop.13+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bf24:	e853 2f00 	ldrex	r2, [r3]
    bf28:	f042 0204 	orr.w	r2, r2, #4
    bf2c:	e843 2100 	strex	r1, r2, [r3]
    bf30:	2900      	cmp	r1, #0
    bf32:	d1f7      	bne.n	bf24 <atomic_set_bit_to.constprop.13+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bf34:	f3bf 8f5b 	dmb	ish
	}
}
    bf38:	4770      	bx	lr
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bf3a:	e853 2f00 	ldrex	r2, [r3]
    bf3e:	f022 0204 	bic.w	r2, r2, #4
    bf42:	e843 2100 	strex	r1, r2, [r3]
    bf46:	2900      	cmp	r1, #0
    bf48:	d0f4      	beq.n	bf34 <atomic_set_bit_to.constprop.13+0x18>
    bf4a:	e7f6      	b.n	bf3a <atomic_set_bit_to.constprop.13+0x1e>
    bf4c:	20001ac0 	.word	0x20001ac0

0000bf50 <iv_set>:
{
    bf50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bf52:	4610      	mov	r0, r2
    bf54:	461c      	mov	r4, r3
	if (len_rd == 0) {
    bf56:	b991      	cbnz	r1, bf7e <iv_set+0x2e>
		bt_mesh.iv_index = 0U;
    bf58:	4b17      	ldr	r3, [pc, #92]	; (bfb8 <iv_set+0x68>)
    bf5a:	f843 1b08 	str.w	r1, [r3], #8
    bf5e:	f3bf 8f5b 	dmb	ish
    bf62:	e853 2f00 	ldrex	r2, [r3]
    bf66:	f022 0204 	bic.w	r2, r2, #4
    bf6a:	e843 2000 	strex	r0, r2, [r3]
    bf6e:	2800      	cmp	r0, #0
    bf70:	d1f7      	bne.n	bf62 <iv_set+0x12>
    bf72:	f3bf 8f5b 	dmb	ish
    bf76:	460c      	mov	r4, r1
}
    bf78:	4620      	mov	r0, r4
    bf7a:	b003      	add	sp, #12
    bf7c:	bd30      	pop	{r4, r5, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &iv, sizeof(iv));
    bf7e:	4621      	mov	r1, r4
    bf80:	2305      	movs	r3, #5
    bf82:	466a      	mov	r2, sp
    bf84:	f005 fffe 	bl	11f84 <bt_mesh_settings_set>
	if (err) {
    bf88:	4604      	mov	r4, r0
    bf8a:	b120      	cbz	r0, bf96 <iv_set+0x46>
		BT_ERR("Failed to set \'iv\'");
    bf8c:	2145      	movs	r1, #69	; 0x45
    bf8e:	480b      	ldr	r0, [pc, #44]	; (bfbc <iv_set+0x6c>)
    bf90:	f015 ff9b 	bl	21eca <printk>
		return err;
    bf94:	e7f0      	b.n	bf78 <iv_set+0x28>
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    bf96:	f89d 0004 	ldrb.w	r0, [sp, #4]
	bt_mesh.iv_index = iv.iv_index;
    bf9a:	4d07      	ldr	r5, [pc, #28]	; (bfb8 <iv_set+0x68>)
    bf9c:	9b00      	ldr	r3, [sp, #0]
    bf9e:	602b      	str	r3, [r5, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    bfa0:	f000 0001 	and.w	r0, r0, #1
    bfa4:	f7ff ffba 	bl	bf1c <atomic_set_bit_to.constprop.13>
	bt_mesh.ivu_duration = iv.iv_duration;
    bfa8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    bfac:	f3c3 0346 	ubfx	r3, r3, #1, #7
    bfb0:	f885 31f0 	strb.w	r3, [r5, #496]	; 0x1f0
	return 0;
    bfb4:	e7e0      	b.n	bf78 <iv_set+0x28>
    bfb6:	bf00      	nop
    bfb8:	20001ab8 	.word	0x20001ab8
    bfbc:	0002c40e 	.word	0x0002c40e

0000bfc0 <bt_mesh_net_create>:
{
    bfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfc4:	460d      	mov	r5, r1
    bfc6:	4698      	mov	r8, r3
	if (BT_MESH_KEY_REFRESH(flags)) {
    bfc8:	f015 0301 	ands.w	r3, r5, #1
{
    bfcc:	4611      	mov	r1, r2
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_PHASE_2, NULL, key);
    bfce:	bf1d      	ittte	ne
    bfd0:	4613      	movne	r3, r2
    bfd2:	2102      	movne	r1, #2
    bfd4:	2200      	movne	r2, #0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    bfd6:	4619      	moveq	r1, r3
{
    bfd8:	4607      	mov	r7, r0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    bfda:	f000 fe7f 	bl	ccdc <bt_mesh_subnet_set>
    bfde:	4604      	mov	r4, r0
	if (err) {
    bfe0:	b130      	cbz	r0, bff0 <bt_mesh_net_create+0x30>
		BT_ERR("Failed creating subnet");
    bfe2:	2145      	movs	r1, #69	; 0x45
    bfe4:	4810      	ldr	r0, [pc, #64]	; (c028 <bt_mesh_net_create+0x68>)
    bfe6:	f015 ff70 	bl	21eca <printk>
}
    bfea:	4620      	mov	r0, r4
    bfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    bff0:	4601      	mov	r1, r0
    bff2:	2228      	movs	r2, #40	; 0x28
    bff4:	480d      	ldr	r0, [pc, #52]	; (c02c <bt_mesh_net_create+0x6c>)
	bt_mesh.iv_index = iv_index;
    bff6:	4e0e      	ldr	r6, [pc, #56]	; (c030 <bt_mesh_net_create+0x70>)
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    bff8:	f018 f8d3 	bl	241a2 <memset>
	msg_cache_next = 0U;
    bffc:	4b0d      	ldr	r3, [pc, #52]	; (c034 <bt_mesh_net_create+0x74>)
	bt_mesh.iv_index = iv_index;
    bffe:	f8c6 8000 	str.w	r8, [r6]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    c002:	f3c5 0040 	ubfx	r0, r5, #1, #1
	msg_cache_next = 0U;
    c006:	801c      	strh	r4, [r3, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    c008:	f7ff ff88 	bl	bf1c <atomic_set_bit_to.constprop.13>
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    c00c:	2360      	movs	r3, #96	; 0x60
		bt_mesh_subnet_store(idx);
    c00e:	4638      	mov	r0, r7
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    c010:	f886 31f0 	strb.w	r3, [r6, #496]	; 0x1f0
		bt_mesh_subnet_store(idx);
    c014:	f019 fcfd 	bl	25a12 <bt_mesh_subnet_store>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    c018:	2004      	movs	r0, #4
    c01a:	f005 ffd5 	bl	11fc8 <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    c01e:	2005      	movs	r0, #5
    c020:	f005 ffd2 	bl	11fc8 <bt_mesh_settings_store_schedule>
    c024:	e7e1      	b.n	bfea <bt_mesh_net_create+0x2a>
    c026:	bf00      	nop
    c028:	0002c0f1 	.word	0x0002c0f1
    c02c:	20002ab4 	.word	0x20002ab4
    c030:	20001ab8 	.word	0x20001ab8
    c034:	2000438a 	.word	0x2000438a

0000c038 <bt_mesh_net_iv_update>:
{
    c038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c03a:	4606      	mov	r6, r0
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c03c:	2002      	movs	r0, #2
{
    c03e:	460c      	mov	r4, r1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c040:	f7ff ff5e 	bl	bf00 <atomic_test_bit.constprop.12>
    c044:	4d3d      	ldr	r5, [pc, #244]	; (c13c <bt_mesh_net_iv_update+0x104>)
    c046:	4607      	mov	r7, r0
		if (iv_index != bt_mesh.iv_index) {
    c048:	682b      	ldr	r3, [r5, #0]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c04a:	b160      	cbz	r0, c066 <bt_mesh_net_iv_update+0x2e>
		if (iv_index != bt_mesh.iv_index) {
    c04c:	42b3      	cmp	r3, r6
    c04e:	d005      	beq.n	c05c <bt_mesh_net_iv_update+0x24>
			BT_WARN("IV Index mismatch: 0x%08x != 0x%08x",
    c050:	483b      	ldr	r0, [pc, #236]	; (c140 <bt_mesh_net_iv_update+0x108>)
    c052:	4632      	mov	r2, r6
    c054:	2157      	movs	r1, #87	; 0x57
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    c056:	f015 ff38 	bl	21eca <printk>
    c05a:	e001      	b.n	c060 <bt_mesh_net_iv_update+0x28>
		if (iv_update) {
    c05c:	2900      	cmp	r1, #0
    c05e:	d048      	beq.n	c0f2 <bt_mesh_net_iv_update+0xba>
			return false;
    c060:	2400      	movs	r4, #0
}
    c062:	4620      	mov	r0, r4
    c064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_index == bt_mesh.iv_index) {
    c066:	42b3      	cmp	r3, r6
    c068:	d066      	beq.n	c138 <bt_mesh_net_iv_update+0x100>
		if (iv_index < bt_mesh.iv_index ||
    c06a:	d803      	bhi.n	c074 <bt_mesh_net_iv_update+0x3c>
		    iv_index > bt_mesh.iv_index + 42) {
    c06c:	f103 022a 	add.w	r2, r3, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    c070:	42b2      	cmp	r2, r6
    c072:	d203      	bcs.n	c07c <bt_mesh_net_iv_update+0x44>
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    c074:	4632      	mov	r2, r6
    c076:	2145      	movs	r1, #69	; 0x45
    c078:	4832      	ldr	r0, [pc, #200]	; (c144 <bt_mesh_net_iv_update+0x10c>)
    c07a:	e7ec      	b.n	c056 <bt_mesh_net_iv_update+0x1e>
		if (iv_index > bt_mesh.iv_index + 1) {
    c07c:	3301      	adds	r3, #1
    c07e:	42b3      	cmp	r3, r6
    c080:	d22e      	bcs.n	c0e0 <bt_mesh_net_iv_update+0xa8>
			BT_WARN("Performing IV Index Recovery");
    c082:	2157      	movs	r1, #87	; 0x57
    c084:	4830      	ldr	r0, [pc, #192]	; (c148 <bt_mesh_net_iv_update+0x110>)
    c086:	f015 ff20 	bl	21eca <printk>
			bt_mesh_rpl_clear();
    c08a:	f019 ff0b 	bl	25ea4 <bt_mesh_rpl_clear>
			bt_mesh.seq = 0U;
    c08e:	e9c5 6700 	strd	r6, r7, [r5]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
    c092:	4620      	mov	r0, r4
    c094:	f7ff ff42 	bl	bf1c <atomic_set_bit_to.constprop.13>
	bt_mesh.ivu_duration = 0U;
    c098:	2300      	movs	r3, #0
    c09a:	f885 31f0 	strb.w	r3, [r5, #496]	; 0x1f0
	if (iv_update) {
    c09e:	2c00      	cmp	r4, #0
    c0a0:	d048      	beq.n	c134 <bt_mesh_net_iv_update+0xfc>
		bt_mesh.iv_index = iv_index;
    c0a2:	602e      	str	r6, [r5, #0]
		bt_mesh_rpl_reset();
    c0a4:	f002 fcb6 	bl	ea14 <bt_mesh_rpl_reset>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c0a8:	4a28      	ldr	r2, [pc, #160]	; (c14c <bt_mesh_net_iv_update+0x114>)
    c0aa:	4929      	ldr	r1, [pc, #164]	; (c150 <bt_mesh_net_iv_update+0x118>)
    c0ac:	4829      	ldr	r0, [pc, #164]	; (c154 <bt_mesh_net_iv_update+0x11c>)
    c0ae:	2300      	movs	r3, #0
    c0b0:	f014 f852 	bl	20158 <k_delayed_work_submit_to_queue>
		bt_mesh_friend_sec_update(BT_MESH_KEY_ANY);
    c0b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c0b8:	f006 fc64 	bl	12984 <bt_mesh_friend_sec_update>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    c0bc:	f019 fbf8 	bl	258b0 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    c0c0:	2801      	cmp	r0, #1
    c0c2:	d102      	bne.n	c0ca <bt_mesh_net_iv_update+0x92>
		bt_mesh_proxy_beacon_send(NULL);
    c0c4:	2000      	movs	r0, #0
    c0c6:	f008 fed7 	bl	14e78 <bt_mesh_proxy_beacon_send>
	bt_mesh_subnet_foreach(bt_mesh_beacon_update);
    c0ca:	4823      	ldr	r0, [pc, #140]	; (c158 <bt_mesh_net_iv_update+0x120>)
    c0cc:	f000 fe7e 	bl	cdcc <bt_mesh_subnet_foreach>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    c0d0:	2004      	movs	r0, #4
    c0d2:	f005 ff79 	bl	11fc8 <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    c0d6:	2005      	movs	r0, #5
    c0d8:	f005 ff76 	bl	11fc8 <bt_mesh_settings_store_schedule>
	return true;
    c0dc:	2401      	movs	r4, #1
    c0de:	e7c0      	b.n	c062 <bt_mesh_net_iv_update+0x2a>
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
    c0e0:	d105      	bne.n	c0ee <bt_mesh_net_iv_update+0xb6>
    c0e2:	b931      	cbnz	r1, c0f2 <bt_mesh_net_iv_update+0xba>
			BT_WARN("Ignoring new index in normal mode");
    c0e4:	2157      	movs	r1, #87	; 0x57
    c0e6:	481d      	ldr	r0, [pc, #116]	; (c15c <bt_mesh_net_iv_update+0x124>)
    c0e8:	f015 feef 	bl	21eca <printk>
			return false;
    c0ec:	e7b9      	b.n	c062 <bt_mesh_net_iv_update+0x2a>
		if (!iv_update) {
    c0ee:	2900      	cmp	r1, #0
    c0f0:	d0b7      	beq.n	c062 <bt_mesh_net_iv_update+0x2a>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c0f2:	f895 31f0 	ldrb.w	r3, [r5, #496]	; 0x1f0
    c0f6:	2b5f      	cmp	r3, #95	; 0x5f
    c0f8:	d804      	bhi.n	c104 <bt_mesh_net_iv_update+0xcc>
			BT_WARN("IV Update before minimum duration");
    c0fa:	2157      	movs	r1, #87	; 0x57
    c0fc:	4818      	ldr	r0, [pc, #96]	; (c160 <bt_mesh_net_iv_update+0x128>)
    c0fe:	f015 fee4 	bl	21eca <printk>
			return false;
    c102:	e7ad      	b.n	c060 <bt_mesh_net_iv_update+0x28>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    c104:	2c00      	cmp	r4, #0
    c106:	d1c4      	bne.n	c092 <bt_mesh_net_iv_update+0x5a>
    c108:	f001 fe50 	bl	ddac <bt_mesh_tx_in_progress>
    c10c:	2800      	cmp	r0, #0
    c10e:	d0c0      	beq.n	c092 <bt_mesh_net_iv_update+0x5a>
		BT_WARN("IV Update deferred because of pending transfer");
    c110:	2157      	movs	r1, #87	; 0x57
    c112:	4814      	ldr	r0, [pc, #80]	; (c164 <bt_mesh_net_iv_update+0x12c>)
    c114:	f015 fed9 	bl	21eca <printk>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c118:	f3bf 8f5b 	dmb	ish
    c11c:	4b12      	ldr	r3, [pc, #72]	; (c168 <bt_mesh_net_iv_update+0x130>)
    c11e:	e853 2f00 	ldrex	r2, [r3]
    c122:	f042 0220 	orr.w	r2, r2, #32
    c126:	e843 2100 	strex	r1, r2, [r3]
    c12a:	2900      	cmp	r1, #0
    c12c:	d1f7      	bne.n	c11e <bt_mesh_net_iv_update+0xe6>
    c12e:	f3bf 8f5b 	dmb	ish
    c132:	e796      	b.n	c062 <bt_mesh_net_iv_update+0x2a>
		bt_mesh.seq = 0U;
    c134:	606c      	str	r4, [r5, #4]
    c136:	e7b7      	b.n	c0a8 <bt_mesh_net_iv_update+0x70>
			return false;
    c138:	4604      	mov	r4, r0
    c13a:	e792      	b.n	c062 <bt_mesh_net_iv_update+0x2a>
    c13c:	20001ab8 	.word	0x20001ab8
    c140:	0002c1a6 	.word	0x0002c1a6
    c144:	0002c1cf 	.word	0x0002c1cf
    c148:	0002c1fb 	.word	0x0002c1fb
    c14c:	a8c00000 	.word	0xa8c00000
    c150:	20001cb0 	.word	0x20001cb0
    c154:	20002170 	.word	0x20002170
    c158:	0000ba21 	.word	0x0000ba21
    c15c:	0002c21d 	.word	0x0002c21d
    c160:	0002c244 	.word	0x0002c244
    c164:	0002c26b 	.word	0x0002c26b
    c168:	20001ac0 	.word	0x20001ac0

0000c16c <ivu_refresh>:
{
    c16c:	b510      	push	{r4, lr}
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    c16e:	4c15      	ldr	r4, [pc, #84]	; (c1c4 <ivu_refresh+0x58>)
    c170:	f894 31f0 	ldrb.w	r3, [r4, #496]	; 0x1f0
    c174:	3318      	adds	r3, #24
    c176:	2bff      	cmp	r3, #255	; 0xff
    c178:	461a      	mov	r2, r3
    c17a:	bfa8      	it	ge
    c17c:	22ff      	movge	r2, #255	; 0xff
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c17e:	2b5f      	cmp	r3, #95	; 0x5f
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    c180:	f884 21f0 	strb.w	r2, [r4, #496]	; 0x1f0
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c184:	dc0b      	bgt.n	c19e <ivu_refresh+0x32>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    c186:	2004      	movs	r0, #4
    c188:	f005 ff1e 	bl	11fc8 <bt_mesh_settings_store_schedule>
    c18c:	f504 71fc 	add.w	r1, r4, #504	; 0x1f8
    c190:	4a0d      	ldr	r2, [pc, #52]	; (c1c8 <ivu_refresh+0x5c>)
    c192:	480e      	ldr	r0, [pc, #56]	; (c1cc <ivu_refresh+0x60>)
    c194:	2300      	movs	r3, #0
}
    c196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c19a:	f013 bfdd 	b.w	20158 <k_delayed_work_submit_to_queue>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c19e:	2002      	movs	r0, #2
    c1a0:	f7ff feae 	bl	bf00 <atomic_test_bit.constprop.12>
    c1a4:	b140      	cbz	r0, c1b8 <ivu_refresh+0x4c>
		bt_mesh_beacon_ivu_initiator(true);
    c1a6:	2001      	movs	r0, #1
    c1a8:	f7ff fc70 	bl	ba8c <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    c1ac:	6820      	ldr	r0, [r4, #0]
    c1ae:	2100      	movs	r1, #0
}
    c1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    c1b4:	f7ff bf40 	b.w	c038 <bt_mesh_net_iv_update>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    c1b8:	2004      	movs	r0, #4
}
    c1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    c1be:	f005 bf03 	b.w	11fc8 <bt_mesh_settings_store_schedule>
    c1c2:	bf00      	nop
    c1c4:	20001ab8 	.word	0x20001ab8
    c1c8:	a8c00000 	.word	0xa8c00000
    c1cc:	20002170 	.word	0x20002170

0000c1d0 <bt_mesh_next_seq>:
{
    c1d0:	b538      	push	{r3, r4, r5, lr}
	uint32_t seq = bt_mesh.seq++;
    c1d2:	4c0f      	ldr	r4, [pc, #60]	; (c210 <bt_mesh_next_seq+0x40>)
    c1d4:	6865      	ldr	r5, [r4, #4]
    c1d6:	1c6a      	adds	r2, r5, #1
	if (CONFIG_BT_MESH_SEQ_STORE_RATE &&
    c1d8:	0653      	lsls	r3, r2, #25
	uint32_t seq = bt_mesh.seq++;
    c1da:	6062      	str	r2, [r4, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE &&
    c1dc:	d102      	bne.n	c1e4 <bt_mesh_next_seq+0x14>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    c1de:	2005      	movs	r0, #5
    c1e0:	f005 fef2 	bl	11fc8 <bt_mesh_settings_store_schedule>
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    c1e4:	2002      	movs	r0, #2
    c1e6:	f7ff fe8b 	bl	bf00 <atomic_test_bit.constprop.12>
    c1ea:	b970      	cbnz	r0, c20a <bt_mesh_next_seq+0x3a>
    c1ec:	6862      	ldr	r2, [r4, #4]
    c1ee:	4b09      	ldr	r3, [pc, #36]	; (c214 <bt_mesh_next_seq+0x44>)
    c1f0:	429a      	cmp	r2, r3
    c1f2:	d90a      	bls.n	c20a <bt_mesh_next_seq+0x3a>
	    bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY)) {
    c1f4:	f019 fcd9 	bl	25baa <bt_mesh_subnet_get>
	    bt_mesh.seq > IV_UPDATE_SEQ_LIMIT &&
    c1f8:	b138      	cbz	r0, c20a <bt_mesh_next_seq+0x3a>
		bt_mesh_beacon_ivu_initiator(true);
    c1fa:	2001      	movs	r0, #1
    c1fc:	f7ff fc46 	bl	ba8c <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    c200:	6820      	ldr	r0, [r4, #0]
    c202:	2101      	movs	r1, #1
    c204:	4408      	add	r0, r1
    c206:	f7ff ff17 	bl	c038 <bt_mesh_net_iv_update>
}
    c20a:	4628      	mov	r0, r5
    c20c:	bd38      	pop	{r3, r4, r5, pc}
    c20e:	bf00      	nop
    c210:	20001ab8 	.word	0x20001ab8
    c214:	007a1200 	.word	0x007a1200

0000c218 <net_header_encode>:
{
    c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    c21a:	6843      	ldr	r3, [r0, #4]
    c21c:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    c21e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c222:	429f      	cmp	r7, r3
{
    c224:	4605      	mov	r5, r0
    c226:	460e      	mov	r6, r1
    c228:	4614      	mov	r4, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    c22a:	d10b      	bne.n	c244 <net_header_encode+0x2c>
    c22c:	4610      	mov	r0, r2
    c22e:	f01b fe96 	bl	27f5e <net_buf_simple_tailroom>
    c232:	2807      	cmp	r0, #7
    c234:	d806      	bhi.n	c244 <net_header_encode+0x2c>
		BT_ERR("Insufficient MIC space for CTL PDU");
    c236:	481b      	ldr	r0, [pc, #108]	; (c2a4 <net_header_encode+0x8c>)
    c238:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Insufficient MIC space for PDU");
    c23a:	f015 fe46 	bl	21eca <printk>
		return -EINVAL;
    c23e:	f06f 0015 	mvn.w	r0, #21
}
    c242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (net_buf_simple_tailroom(buf) < 4) {
    c244:	4620      	mov	r0, r4
    c246:	f01b fe8a 	bl	27f5e <net_buf_simple_tailroom>
    c24a:	2803      	cmp	r0, #3
    c24c:	d802      	bhi.n	c254 <net_header_encode+0x3c>
		BT_ERR("Insufficient MIC space for PDU");
    c24e:	2145      	movs	r1, #69	; 0x45
    c250:	4815      	ldr	r0, [pc, #84]	; (c2a8 <net_header_encode+0x90>)
    c252:	e7f2      	b.n	c23a <net_header_encode+0x22>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    c254:	686b      	ldr	r3, [r5, #4]
    c256:	4620      	mov	r0, r4
    c258:	8899      	ldrh	r1, [r3, #4]
    c25a:	f01b fe3c 	bl	27ed6 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    c25e:	8929      	ldrh	r1, [r5, #8]
    c260:	4620      	mov	r0, r4
    c262:	f01b fe38 	bl	27ed6 <net_buf_simple_push_be16>
	net_buf_simple_push_be24(buf, bt_mesh_next_seq());
    c266:	f7ff ffb3 	bl	c1d0 <bt_mesh_next_seq>
    c26a:	4601      	mov	r1, r0
    c26c:	4620      	mov	r0, r4
    c26e:	f01b fe42 	bl	27ef6 <net_buf_simple_push_be24>
	if (ctl) {
    c272:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c276:	429f      	cmp	r7, r3
    c278:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    c27a:	7ad9      	ldrb	r1, [r3, #11]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    c27c:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    c27e:	bf08      	it	eq
    c280:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    c284:	f01b fe30 	bl	27ee8 <net_buf_simple_push_u8>
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    c288:	4b08      	ldr	r3, [pc, #32]	; (c2ac <net_header_encode+0x94>)
    c28a:	2002      	movs	r0, #2
    c28c:	7819      	ldrb	r1, [r3, #0]
    c28e:	f7ff fe37 	bl	bf00 <atomic_test_bit.constprop.12>
    c292:	1a09      	subs	r1, r1, r0
    c294:	ea46 11c1 	orr.w	r1, r6, r1, lsl #7
    c298:	4620      	mov	r0, r4
    c29a:	b2c9      	uxtb	r1, r1
    c29c:	f01b fe24 	bl	27ee8 <net_buf_simple_push_u8>
	return 0;
    c2a0:	2000      	movs	r0, #0
    c2a2:	e7ce      	b.n	c242 <net_header_encode+0x2a>
    c2a4:	0002c426 	.word	0x0002c426
    c2a8:	0002c44e 	.word	0x0002c44e
    c2ac:	20001ab8 	.word	0x20001ab8

0000c2b0 <bt_mesh_net_encode>:
{
    c2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2b4:	4617      	mov	r7, r2
	tx->friend_cred = 0U;
    c2b6:	7ac2      	ldrb	r2, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    c2b8:	6805      	ldr	r5, [r0, #0]
	tx->friend_cred = 0U;
    c2ba:	f36f 0200 	bfc	r2, #0, #1
    c2be:	72c2      	strb	r2, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    c2c0:	7fac      	ldrb	r4, [r5, #30]
    c2c2:	1ea3      	subs	r3, r4, #2
{
    c2c4:	460e      	mov	r6, r1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    c2c6:	4259      	negs	r1, r3
    c2c8:	4159      	adcs	r1, r3
	err = net_header_encode(tx, cred->nid, buf);
    c2ca:	245a      	movs	r4, #90	; 0x5a
    c2cc:	434c      	muls	r4, r1
    c2ce:	192b      	adds	r3, r5, r4
    c2d0:	4632      	mov	r2, r6
    c2d2:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    c2d6:	f7ff ff9f 	bl	c218 <net_header_encode>
	if (err) {
    c2da:	b970      	cbnz	r0, c2fa <bt_mesh_net_encode+0x4a>
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    c2dc:	4b08      	ldr	r3, [pc, #32]	; (c300 <bt_mesh_net_encode+0x50>)
    c2de:	2002      	movs	r0, #2
    c2e0:	681a      	ldr	r2, [r3, #0]
    c2e2:	f7ff fe0d 	bl	bf00 <atomic_test_bit.constprop.12>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    c2e6:	f104 013d 	add.w	r1, r4, #61	; 0x3d
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    c2ea:	463b      	mov	r3, r7
    c2ec:	1a12      	subs	r2, r2, r0
    c2ee:	4429      	add	r1, r5
    c2f0:	4630      	mov	r0, r6
}
    c2f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    c2f6:	f019 bb58 	b.w	259aa <net_encrypt>
}
    c2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c2fe:	bf00      	nop
    c300:	20001ab8 	.word	0x20001ab8

0000c304 <bt_mesh_net_send>:
{
    c304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c308:	4699      	mov	r9, r3
	tx->friend_cred = 0U;
    c30a:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    c30c:	f8d0 b000 	ldr.w	fp, [r0]
	tx->friend_cred = 0U;
    c310:	f36f 0300 	bfc	r3, #0, #1
    c314:	72c3      	strb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    c316:	f89b 701e 	ldrb.w	r7, [fp, #30]
    c31a:	1ebb      	subs	r3, r7, #2
    c31c:	425f      	negs	r7, r3
    c31e:	415f      	adcs	r7, r3
	err = net_header_encode(tx, cred->nid, &buf->b);
    c320:	235a      	movs	r3, #90	; 0x5a
    c322:	fb03 b307 	mla	r3, r3, r7, fp
    c326:	f101 0a08 	add.w	sl, r1, #8
{
    c32a:	460e      	mov	r6, r1
    c32c:	4690      	mov	r8, r2
	err = net_header_encode(tx, cred->nid, &buf->b);
    c32e:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    c332:	4652      	mov	r2, sl
{
    c334:	4604      	mov	r4, r0
	err = net_header_encode(tx, cred->nid, &buf->b);
    c336:	f7ff ff6f 	bl	c218 <net_header_encode>
	if (err) {
    c33a:	4605      	mov	r5, r0
    c33c:	2800      	cmp	r0, #0
    c33e:	d178      	bne.n	c432 <bt_mesh_net_send+0x12e>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    c340:	6863      	ldr	r3, [r4, #4]
    c342:	8898      	ldrh	r0, [r3, #4]
    c344:	f019 fad4 	bl	258f0 <bt_mesh_fixed_group_match>
    c348:	2800      	cmp	r0, #0
    c34a:	d03c      	beq.n	c3c6 <bt_mesh_net_send+0xc2>
		err = loopback(tx, buf->data, buf->len);
    c34c:	89b3      	ldrh	r3, [r6, #12]
    c34e:	68b1      	ldr	r1, [r6, #8]
    c350:	9300      	str	r3, [sp, #0]
	return net_buf_alloc_fixed(pool, timeout);
    c352:	2200      	movs	r2, #0
    c354:	2300      	movs	r3, #0
    c356:	483a      	ldr	r0, [pc, #232]	; (c440 <bt_mesh_net_send+0x13c>)
    c358:	9101      	str	r1, [sp, #4]
    c35a:	f01b fdab 	bl	27eb4 <net_buf_alloc_fixed>
	if (!buf) {
    c35e:	9901      	ldr	r1, [sp, #4]
    c360:	4603      	mov	r3, r0
    c362:	2800      	cmp	r0, #0
    c364:	d13c      	bne.n	c3e0 <bt_mesh_net_send+0xdc>
		BT_WARN("Unable to allocate loopback");
    c366:	2157      	movs	r1, #87	; 0x57
    c368:	4836      	ldr	r0, [pc, #216]	; (c444 <bt_mesh_net_send+0x140>)
    c36a:	f015 fdae 	bl	21eca <printk>
		return -ENOMEM;
    c36e:	f06f 050b 	mvn.w	r5, #11
		if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) ||
    c372:	6863      	ldr	r3, [r4, #4]
    c374:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    c378:	2a00      	cmp	r2, #0
    c37a:	dc55      	bgt.n	c428 <bt_mesh_net_send+0x124>
    c37c:	7adb      	ldrb	r3, [r3, #11]
    c37e:	2b01      	cmp	r3, #1
    c380:	d052      	beq.n	c428 <bt_mesh_net_send+0x124>
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    c382:	4b31      	ldr	r3, [pc, #196]	; (c448 <bt_mesh_net_send+0x144>)
    c384:	2002      	movs	r0, #2
    c386:	681a      	ldr	r2, [r3, #0]
    c388:	f7ff fdba 	bl	bf00 <atomic_test_bit.constprop.12>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    c38c:	215a      	movs	r1, #90	; 0x5a
    c38e:	fb01 b107 	mla	r1, r1, r7, fp
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    c392:	1a12      	subs	r2, r2, r0
    c394:	2300      	movs	r3, #0
    c396:	313d      	adds	r1, #61	; 0x3d
    c398:	4650      	mov	r0, sl
    c39a:	f019 fb06 	bl	259aa <net_encrypt>
	if (err) {
    c39e:	4605      	mov	r5, r0
    c3a0:	2800      	cmp	r0, #0
    c3a2:	d146      	bne.n	c432 <bt_mesh_net_send+0x12e>
	    bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    c3a4:	6863      	ldr	r3, [r4, #4]
    c3a6:	4650      	mov	r0, sl
    c3a8:	8899      	ldrh	r1, [r3, #4]
    c3aa:	f009 f881 	bl	154b0 <bt_mesh_proxy_relay>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    c3ae:	b120      	cbz	r0, c3ba <bt_mesh_net_send+0xb6>
	    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    c3b0:	6863      	ldr	r3, [r4, #4]
	    bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    c3b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    c3b6:	2b00      	cmp	r3, #0
    c3b8:	dc37      	bgt.n	c42a <bt_mesh_net_send+0x126>
	bt_mesh_adv_send(buf, cb, cb_data);
    c3ba:	464a      	mov	r2, r9
    c3bc:	4641      	mov	r1, r8
    c3be:	4630      	mov	r0, r6
    c3c0:	f7ff f97c 	bl	b6bc <bt_mesh_adv_send>
    c3c4:	e035      	b.n	c432 <bt_mesh_net_send+0x12e>
	    bt_mesh_elem_find(tx->ctx->addr)) {
    c3c6:	6863      	ldr	r3, [r4, #4]
    c3c8:	8898      	ldrh	r0, [r3, #4]
    c3ca:	f003 fad7 	bl	f97c <bt_mesh_elem_find>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    c3ce:	2800      	cmp	r0, #0
    c3d0:	d1bc      	bne.n	c34c <bt_mesh_net_send+0x48>
	if (tx->ctx->send_ttl == 1U) {
    c3d2:	6863      	ldr	r3, [r4, #4]
    c3d4:	7adb      	ldrb	r3, [r3, #11]
    c3d6:	2b01      	cmp	r3, #1
    c3d8:	d1d3      	bne.n	c382 <bt_mesh_net_send+0x7e>
		err = -EINVAL;
    c3da:	f06f 0515 	mvn.w	r5, #21
    c3de:	e028      	b.n	c432 <bt_mesh_net_send+0x12e>
	LOOPBACK_BUF_SUB(buf) = tx->sub;
    c3e0:	6822      	ldr	r2, [r4, #0]
    c3e2:	6142      	str	r2, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c3e4:	9a00      	ldr	r2, [sp, #0]
    c3e6:	9300      	str	r3, [sp, #0]
    c3e8:	3008      	adds	r0, #8
    c3ea:	f01b fdc0 	bl	27f6e <net_buf_simple_add_mem>
	net_buf_slist_put(&bt_mesh.local_queue, buf);
    c3ee:	9b00      	ldr	r3, [sp, #0]
    c3f0:	4816      	ldr	r0, [pc, #88]	; (c44c <bt_mesh_net_send+0x148>)
    c3f2:	4619      	mov	r1, r3
    c3f4:	f010 f972 	bl	1c6dc <net_buf_slist_put>
    c3f8:	f3bf 8f5b 	dmb	ish
    c3fc:	4914      	ldr	r1, [pc, #80]	; (c450 <bt_mesh_net_send+0x14c>)
    c3fe:	e851 3f00 	ldrex	r3, [r1]
    c402:	f043 0201 	orr.w	r2, r3, #1
    c406:	e841 2000 	strex	r0, r2, [r1]
    c40a:	2800      	cmp	r0, #0
    c40c:	d1f7      	bne.n	c3fe <bt_mesh_net_send+0xfa>
    c40e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    c412:	f013 0301 	ands.w	r3, r3, #1
    c416:	d1ac      	bne.n	c372 <bt_mesh_net_send+0x6e>
		k_queue_append(&work_q->queue, work);
    c418:	3908      	subs	r1, #8
    c41a:	480e      	ldr	r0, [pc, #56]	; (c454 <bt_mesh_net_send+0x150>)
    c41c:	9300      	str	r3, [sp, #0]
    c41e:	f01c f936 	bl	2868e <k_queue_append>
	return 0;
    c422:	9b00      	ldr	r3, [sp, #0]
    c424:	461d      	mov	r5, r3
    c426:	e7a4      	b.n	c372 <bt_mesh_net_send+0x6e>
			if (!err) {
    c428:	b91d      	cbnz	r5, c432 <bt_mesh_net_send+0x12e>
		send_cb_finalize(cb, cb_data);
    c42a:	4649      	mov	r1, r9
    c42c:	4640      	mov	r0, r8
    c42e:	f019 faaa 	bl	25986 <send_cb_finalize>
	net_buf_unref(buf);
    c432:	4630      	mov	r0, r6
    c434:	f010 fa18 	bl	1c868 <net_buf_unref>
}
    c438:	4628      	mov	r0, r5
    c43a:	b003      	add	sp, #12
    c43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c440:	2000112c 	.word	0x2000112c
    c444:	0002c3ed 	.word	0x0002c3ed
    c448:	20001ab8 	.word	0x20001ab8
    c44c:	20001ad0 	.word	0x20001ad0
    c450:	20001acc 	.word	0x20001acc
    c454:	20002170 	.word	0x20002170

0000c458 <bt_mesh_net_loopback_clear>:
{
    c458:	b573      	push	{r0, r1, r4, r5, r6, lr}
	list->head = NULL;
    c45a:	2300      	movs	r3, #0
	list->tail = NULL;
    c45c:	e9cd 3300 	strd	r3, r3, [sp]
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    c460:	4c0e      	ldr	r4, [pc, #56]	; (c49c <bt_mesh_net_loopback_clear+0x44>)
{
    c462:	4605      	mov	r5, r0
		if (net_idx == BT_MESH_KEY_ANY || net_idx == sub->net_idx) {
    c464:	f64f 76ff 	movw	r6, #65535	; 0xffff
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    c468:	480c      	ldr	r0, [pc, #48]	; (c49c <bt_mesh_net_loopback_clear+0x44>)
    c46a:	f010 f973 	bl	1c754 <net_buf_slist_get>
    c46e:	b930      	cbnz	r0, c47e <bt_mesh_net_loopback_clear+0x26>
	bt_mesh.local_queue = new_list;
    c470:	ab02      	add	r3, sp, #8
    c472:	e913 0003 	ldmdb	r3, {r0, r1}
    c476:	e884 0003 	stmia.w	r4, {r0, r1}
}
    c47a:	b002      	add	sp, #8
    c47c:	bd70      	pop	{r4, r5, r6, pc}
		if (net_idx == BT_MESH_KEY_ANY || net_idx == sub->net_idx) {
    c47e:	42b5      	cmp	r5, r6
    c480:	d003      	beq.n	c48a <bt_mesh_net_loopback_clear+0x32>
    c482:	6943      	ldr	r3, [r0, #20]
    c484:	8b9b      	ldrh	r3, [r3, #28]
    c486:	42ab      	cmp	r3, r5
    c488:	d102      	bne.n	c490 <bt_mesh_net_loopback_clear+0x38>
			net_buf_unref(buf);
    c48a:	f010 f9ed 	bl	1c868 <net_buf_unref>
    c48e:	e7eb      	b.n	c468 <bt_mesh_net_loopback_clear+0x10>
			net_buf_slist_put(&new_list, buf);
    c490:	4601      	mov	r1, r0
    c492:	4668      	mov	r0, sp
    c494:	f010 f922 	bl	1c6dc <net_buf_slist_put>
    c498:	e7e6      	b.n	c468 <bt_mesh_net_loopback_clear+0x10>
    c49a:	bf00      	nop
    c49c:	20001ad0 	.word	0x20001ad0

0000c4a0 <bt_mesh_net_header_parse>:
{
    c4a0:	b510      	push	{r4, lr}
	rx->old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01));
    c4a2:	4b12      	ldr	r3, [pc, #72]	; (c4ec <bt_mesh_net_header_parse+0x4c>)
    c4a4:	6804      	ldr	r4, [r0, #0]
    c4a6:	681b      	ldr	r3, [r3, #0]
    c4a8:	7822      	ldrb	r2, [r4, #0]
    c4aa:	f003 0301 	and.w	r3, r3, #1
    c4ae:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    c4b2:	7d0a      	ldrb	r2, [r1, #20]
    c4b4:	f363 0200 	bfi	r2, r3, #0, #1
    c4b8:	750a      	strb	r2, [r1, #20]
	rx->ctl = CTL(buf->data);
    c4ba:	7863      	ldrb	r3, [r4, #1]
    c4bc:	b2d2      	uxtb	r2, r2
    c4be:	09db      	lsrs	r3, r3, #7
    c4c0:	f363 02c3 	bfi	r2, r3, #3, #1
    c4c4:	750a      	strb	r2, [r1, #20]
	rx->ctx.recv_ttl = TTL(buf->data);
    c4c6:	7863      	ldrb	r3, [r4, #1]
    c4c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c4cc:	734b      	strb	r3, [r1, #13]
	rx->seq = SEQ(buf->data);
    c4ce:	1ca0      	adds	r0, r4, #2
    c4d0:	f019 fa51 	bl	25976 <sys_get_be24>
    c4d4:	6108      	str	r0, [r1, #16]
	return ((uint16_t)src[0] << 8) | src[1];
    c4d6:	7962      	ldrb	r2, [r4, #5]
    c4d8:	79a3      	ldrb	r3, [r4, #6]
    c4da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rx->ctx.addr = SRC(buf->data);
    c4de:	810b      	strh	r3, [r1, #8]
    c4e0:	79e2      	ldrb	r2, [r4, #7]
    c4e2:	7a23      	ldrb	r3, [r4, #8]
    c4e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rx->ctx.recv_dst = DST(buf->data);
    c4e8:	814b      	strh	r3, [r1, #10]
}
    c4ea:	bd10      	pop	{r4, pc}
    c4ec:	20001ab8 	.word	0x20001ab8

0000c4f0 <bt_mesh_net_decode>:
{
    c4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4f2:	4614      	mov	r4, r2
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    c4f4:	8882      	ldrh	r2, [r0, #4]
    c4f6:	2a11      	cmp	r2, #17
{
    c4f8:	4606      	mov	r6, r0
    c4fa:	460d      	mov	r5, r1
    c4fc:	461f      	mov	r7, r3
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    c4fe:	d80f      	bhi.n	c520 <bt_mesh_net_decode+0x30>
		BT_WARN("Dropping too short mesh packet (len %u)", in->len);
    c500:	2157      	movs	r1, #87	; 0x57
    c502:	484c      	ldr	r0, [pc, #304]	; (c634 <bt_mesh_net_decode+0x144>)
    c504:	f015 fce1 	bl	21eca <printk>
		BT_WARN("%s", bt_hex(in->data, in->len));
    c508:	88b1      	ldrh	r1, [r6, #4]
    c50a:	6830      	ldr	r0, [r6, #0]
    c50c:	f7f8 fe8c 	bl	5228 <bt_hex_real>
    c510:	4602      	mov	r2, r0
    c512:	4849      	ldr	r0, [pc, #292]	; (c638 <bt_mesh_net_decode+0x148>)
    c514:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    c516:	f015 fcd8 	bl	21eca <printk>
		return -EINVAL;
    c51a:	f06f 0015 	mvn.w	r0, #21
}
    c51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (in->len > BT_MESH_NET_MAX_PDU_LEN) {
    c520:	2a1d      	cmp	r2, #29
    c522:	d902      	bls.n	c52a <bt_mesh_net_decode+0x3a>
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    c524:	2157      	movs	r1, #87	; 0x57
    c526:	4845      	ldr	r0, [pc, #276]	; (c63c <bt_mesh_net_decode+0x14c>)
    c528:	e7f5      	b.n	c516 <bt_mesh_net_decode+0x26>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(in)) {
    c52a:	bb91      	cbnz	r1, c592 <bt_mesh_net_decode+0xa2>
	return buf->data + buf->len;
    c52c:	6803      	ldr	r3, [r0, #0]
    c52e:	441a      	add	r2, r3
    c530:	f812 3c07 	ldrb.w	r3, [r2, #-7]
    c534:	f812 1c08 	ldrb.w	r1, [r2, #-8]
    c538:	f812 0c06 	ldrb.w	r0, [r2, #-6]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    c53c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    c540:	f812 3c05 	ldrb.w	r3, [r2, #-5]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    c544:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    c548:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	return ((uint16_t)src[0] << 8) | src[1];
    c54c:	f812 0c04 	ldrb.w	r0, [r2, #-4]
    c550:	f812 1c03 	ldrb.w	r1, [r2, #-3]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    c554:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    c558:	f812 0c02 	ldrb.w	r0, [r2, #-2]
    c55c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    c560:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    c564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    c568:	4935      	ldr	r1, [pc, #212]	; (c640 <bt_mesh_net_decode+0x150>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    c56a:	4053      	eors	r3, r2
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    c56c:	468c      	mov	ip, r1
    c56e:	462a      	mov	r2, r5
		if (dup_cache[i] == val) {
    c570:	f851 0b04 	ldr.w	r0, [r1], #4
    c574:	4283      	cmp	r3, r0
    c576:	d0d0      	beq.n	c51a <bt_mesh_net_decode+0x2a>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    c578:	3201      	adds	r2, #1
    c57a:	2a0a      	cmp	r2, #10
    c57c:	d1f8      	bne.n	c570 <bt_mesh_net_decode+0x80>
	dup_cache[dup_cache_next++] = val;
    c57e:	4831      	ldr	r0, [pc, #196]	; (c644 <bt_mesh_net_decode+0x154>)
    c580:	6801      	ldr	r1, [r0, #0]
    c582:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    c586:	1c4b      	adds	r3, r1, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    c588:	fb93 f1f2 	sdiv	r1, r3, r2
    c58c:	fb02 3211 	mls	r2, r2, r1, r3
    c590:	6002      	str	r2, [r0, #0]
	rx->net_if = net_if;
    c592:	7d23      	ldrb	r3, [r4, #20]
    c594:	f365 1305 	bfi	r3, r5, #4, #2
    c598:	7523      	strb	r3, [r4, #20]
	if (!bt_mesh_net_cred_find(rx, in, out, net_decrypt)) {
    c59a:	463a      	mov	r2, r7
    c59c:	4b2a      	ldr	r3, [pc, #168]	; (c648 <bt_mesh_net_decode+0x158>)
    c59e:	4631      	mov	r1, r6
    c5a0:	4620      	mov	r0, r4
    c5a2:	f000 fc47 	bl	ce34 <bt_mesh_net_cred_find>
    c5a6:	2800      	cmp	r0, #0
    c5a8:	d040      	beq.n	c62c <bt_mesh_net_decode+0x13c>
	rx->ctx.recv_ttl = TTL(out->data);
    c5aa:	6839      	ldr	r1, [r7, #0]
	rx->ctl = CTL(out->data);
    c5ac:	7d22      	ldrb	r2, [r4, #20]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    c5ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c5b2:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(out->data);
    c5b4:	784b      	ldrb	r3, [r1, #1]
    c5b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c5ba:	7363      	strb	r3, [r4, #13]
	if (rx->ctx.recv_ttl == 0U) {
    c5bc:	3300      	adds	r3, #0
    c5be:	bf18      	it	ne
    c5c0:	2301      	movne	r3, #1
    c5c2:	425b      	negs	r3, r3
    c5c4:	73e3      	strb	r3, [r4, #15]
	rx->ctl = CTL(out->data);
    c5c6:	784b      	ldrb	r3, [r1, #1]
    c5c8:	09db      	lsrs	r3, r3, #7
    c5ca:	f363 02c3 	bfi	r2, r3, #3, #1
    c5ce:	7522      	strb	r2, [r4, #20]
	rx->seq = SEQ(out->data);
    c5d0:	1c88      	adds	r0, r1, #2
    c5d2:	f019 f9d0 	bl	25976 <sys_get_be24>
    c5d6:	6120      	str	r0, [r4, #16]
	return ((uint16_t)src[0] << 8) | src[1];
    c5d8:	79ca      	ldrb	r2, [r1, #7]
    c5da:	7a0b      	ldrb	r3, [r1, #8]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    c5dc:	2d03      	cmp	r5, #3
    c5de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rx->ctx.recv_dst = DST(out->data);
    c5e2:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    c5e4:	d007      	beq.n	c5f6 <bt_mesh_net_decode+0x106>
    c5e6:	b933      	cbnz	r3, c5f6 <bt_mesh_net_decode+0x106>
		BT_ERR("Destination address is unassigned; dropping packet");
    c5e8:	4818      	ldr	r0, [pc, #96]	; (c64c <bt_mesh_net_decode+0x15c>)
    c5ea:	2145      	movs	r1, #69	; 0x45
    c5ec:	f015 fc6d 	bl	21eca <printk>
		return -EBADMSG;
    c5f0:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    c5f4:	e793      	b.n	c51e <bt_mesh_net_decode+0x2e>
	rx->msg_cache_idx = msg_cache_next++;
    c5f6:	4916      	ldr	r1, [pc, #88]	; (c650 <bt_mesh_net_decode+0x160>)
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    c5f8:	4a16      	ldr	r2, [pc, #88]	; (c654 <bt_mesh_net_decode+0x164>)
	rx->msg_cache_idx = msg_cache_next++;
    c5fa:	880b      	ldrh	r3, [r1, #0]
    c5fc:	82e3      	strh	r3, [r4, #22]
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    c5fe:	f832 5023 	ldrh.w	r5, [r2, r3, lsl #2]
    c602:	8924      	ldrh	r4, [r4, #8]
    c604:	f364 050e 	bfi	r5, r4, #0, #15
    c608:	f822 5023 	strh.w	r5, [r2, r3, lsl #2]
	msg_cache[rx->msg_cache_idx].seq = rx->seq;
    c60c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    c610:	f360 34df 	bfi	r4, r0, #15, #17
    c614:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	rx->msg_cache_idx = msg_cache_next++;
    c618:	3301      	adds	r3, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    c61a:	200a      	movs	r0, #10
    c61c:	b29b      	uxth	r3, r3
    c61e:	fbb3 f2f0 	udiv	r2, r3, r0
    c622:	fb00 3312 	mls	r3, r0, r2, r3
    c626:	800b      	strh	r3, [r1, #0]
	return 0;
    c628:	2000      	movs	r0, #0
    c62a:	e778      	b.n	c51e <bt_mesh_net_decode+0x2e>
		return -ENOENT;
    c62c:	f06f 0001 	mvn.w	r0, #1
    c630:	e775      	b.n	c51e <bt_mesh_net_decode+0x2e>
    c632:	bf00      	nop
    c634:	0002c10d 	.word	0x0002c10d
    c638:	0002c13a 	.word	0x0002c13a
    c63c:	0002c142 	.word	0x0002c142
    c640:	20002a88 	.word	0x20002a88
    c644:	20002ab0 	.word	0x20002ab0
    c648:	0000bd61 	.word	0x0000bd61
    c64c:	0002c16e 	.word	0x0002c16e
    c650:	2000438a 	.word	0x2000438a
    c654:	20002ab4 	.word	0x20002ab4

0000c658 <bt_mesh_net_recv>:
{
    c658:	b5f0      	push	{r4, r5, r6, r7, lr}
    c65a:	b093      	sub	sp, #76	; 0x4c
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    c65c:	ab0a      	add	r3, sp, #40	; 0x28
{
    c65e:	4617      	mov	r7, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    c660:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
{
    c664:	460c      	mov	r4, r1
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    c666:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
    c66a:	4606      	mov	r6, r0
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    c66c:	2218      	movs	r2, #24
    c66e:	2100      	movs	r1, #0
    c670:	a804      	add	r0, sp, #16
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    c672:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    c674:	f017 fd95 	bl	241a2 <memset>
    c678:	f88d 401c 	strb.w	r4, [sp, #28]
	if (!bt_mesh_is_provisioned()) {
    c67c:	f019 f8d3 	bl	25826 <bt_mesh_is_provisioned>
    c680:	2800      	cmp	r0, #0
    c682:	d074      	beq.n	c76e <bt_mesh_net_recv+0x116>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    c684:	ab01      	add	r3, sp, #4
    c686:	aa04      	add	r2, sp, #16
    c688:	4639      	mov	r1, r7
    c68a:	4630      	mov	r0, r6
    c68c:	f7ff ff30 	bl	c4f0 <bt_mesh_net_decode>
    c690:	2800      	cmp	r0, #0
    c692:	d16c      	bne.n	c76e <bt_mesh_net_recv+0x116>
	state->offset = net_buf_simple_headroom(buf);
    c694:	a801      	add	r0, sp, #4
    c696:	f01b fc5e 	bl	27f56 <net_buf_simple_headroom>
    c69a:	4604      	mov	r4, r0
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    c69c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	state->len = buf->len;
    c6a0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    c6a4:	f019 f924 	bl	258f0 <bt_mesh_fixed_group_match>
    c6a8:	bb10      	cbnz	r0, c6f0 <bt_mesh_net_recv+0x98>
			  bt_mesh_elem_find(rx.ctx.recv_dst));
    c6aa:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    c6ae:	f003 f965 	bl	f97c <bt_mesh_elem_find>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    c6b2:	3000      	adds	r0, #0
    c6b4:	bf18      	it	ne
    c6b6:	2001      	movne	r0, #1
    c6b8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    c6bc:	2f02      	cmp	r7, #2
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    c6be:	f360 1386 	bfi	r3, r0, #6, #1
    c6c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    c6c6:	d115      	bne.n	c6f4 <bt_mesh_net_recv+0x9c>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
    c6c8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    c6cc:	4630      	mov	r0, r6
    c6ce:	f01a fa93 	bl	26bf8 <bt_mesh_proxy_addr_add>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    c6d2:	f019 f8ed 	bl	258b0 <bt_mesh_gatt_proxy_get>
		    !rx.local_match) {
    c6d6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    c6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    c6de:	4318      	orrs	r0, r3
    c6e0:	f010 0fff 	tst.w	r0, #255	; 0xff
    c6e4:	d106      	bne.n	c6f4 <bt_mesh_net_recv+0x9c>
			BT_INFO("Proxy is disabled; ignoring message");
    c6e6:	485f      	ldr	r0, [pc, #380]	; (c864 <bt_mesh_net_recv+0x20c>)
    c6e8:	2149      	movs	r1, #73	; 0x49
		BT_ERR("Out of relay buffers");
    c6ea:	f015 fbee 	bl	21eca <printk>
		return;
    c6ee:	e03e      	b.n	c76e <bt_mesh_net_recv+0x116>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    c6f0:	2001      	movs	r0, #1
    c6f2:	e7e1      	b.n	c6b8 <bt_mesh_net_recv+0x60>
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    c6f4:	a904      	add	r1, sp, #16
    c6f6:	a801      	add	r0, sp, #4
    c6f8:	f001 fdbc 	bl	e274 <bt_mesh_trans_recv>
    c6fc:	300b      	adds	r0, #11
    c6fe:	d10e      	bne.n	c71e <bt_mesh_net_recv+0xc6>
		BT_WARN("Removing rejected message from Network Message Cache");
    c700:	2157      	movs	r1, #87	; 0x57
    c702:	4859      	ldr	r0, [pc, #356]	; (c868 <bt_mesh_net_recv+0x210>)
    c704:	f015 fbe1 	bl	21eca <printk>
		msg_cache[rx.msg_cache_idx].src = BT_MESH_ADDR_UNASSIGNED;
    c708:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    c70c:	4a57      	ldr	r2, [pc, #348]	; (c86c <bt_mesh_net_recv+0x214>)
    c70e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    c712:	f36f 010e 	bfc	r1, #0, #15
    c716:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		msg_cache_next = rx.msg_cache_idx;
    c71a:	4a55      	ldr	r2, [pc, #340]	; (c870 <bt_mesh_net_recv+0x218>)
    c71c:	8013      	strh	r3, [r2, #0]
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    c71e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    c722:	2b00      	cmp	r3, #0
    c724:	dd04      	ble.n	c730 <bt_mesh_net_recv+0xd8>
	    (!rx.local_match && !rx.friend_match)) {
    c726:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    c72a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    c72e:	d11e      	bne.n	c76e <bt_mesh_net_recv+0x116>
	buf->data = buf->__buf + state->offset;
    c730:	9b03      	ldr	r3, [sp, #12]
	buf->len = state->len;
    c732:	f8ad 5008 	strh.w	r5, [sp, #8]
	buf->data = buf->__buf + state->offset;
    c736:	fa13 f484 	uxtah	r4, r3, r4
	if (rx->ctx.recv_ttl <= 1U) {
    c73a:	f89d 301d 	ldrb.w	r3, [sp, #29]
    c73e:	9401      	str	r4, [sp, #4]
    c740:	2b01      	cmp	r3, #1
    c742:	d914      	bls.n	c76e <bt_mesh_net_recv+0x116>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    c744:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    c748:	f013 0f34 	tst.w	r3, #52	; 0x34
    c74c:	d108      	bne.n	c760 <bt_mesh_net_recv+0x108>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    c74e:	f019 f8cc 	bl	258ea <bt_mesh_relay_get>
	    !rx->friend_cred &&
    c752:	2801      	cmp	r0, #1
    c754:	d107      	bne.n	c766 <bt_mesh_net_recv+0x10e>
	if (rx->net_if == BT_MESH_NET_IF_ADV && !rx->friend_cred) {
    c756:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    c75a:	f013 0f34 	tst.w	r3, #52	; 0x34
    c75e:	d008      	beq.n	c772 <bt_mesh_net_recv+0x11a>
		transmit = bt_mesh_net_transmit_get();
    c760:	f7fe fe5c 	bl	b41c <bt_mesh_net_transmit_get>
    c764:	e007      	b.n	c776 <bt_mesh_net_recv+0x11e>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    c766:	f019 f8a3 	bl	258b0 <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    c76a:	2801      	cmp	r0, #1
    c76c:	d0f3      	beq.n	c756 <bt_mesh_net_recv+0xfe>
}
    c76e:	b013      	add	sp, #76	; 0x4c
    c770:	bdf0      	pop	{r4, r5, r6, r7, pc}
		transmit = bt_mesh_relay_retransmit_get();
    c772:	f7fe feaf 	bl	b4d4 <bt_mesh_relay_retransmit_get>
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, transmit, K_NO_WAIT);
    c776:	4601      	mov	r1, r0
    c778:	2200      	movs	r2, #0
    c77a:	2300      	movs	r3, #0
    c77c:	2001      	movs	r0, #1
    c77e:	f7fe ff8d 	bl	b69c <bt_mesh_adv_create>
	if (!buf) {
    c782:	4604      	mov	r4, r0
    c784:	b910      	cbnz	r0, c78c <bt_mesh_net_recv+0x134>
		BT_ERR("Out of relay buffers");
    c786:	2145      	movs	r1, #69	; 0x45
    c788:	483a      	ldr	r0, [pc, #232]	; (c874 <bt_mesh_net_recv+0x21c>)
    c78a:	e7ae      	b.n	c6ea <bt_mesh_net_recv+0x92>
	sbuf->data[1] &= 0x80;
    c78c:	9a01      	ldr	r2, [sp, #4]
    c78e:	7853      	ldrb	r3, [r2, #1]
    c790:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    c794:	7053      	strb	r3, [r2, #1]
	sbuf->data[1] |= rx->ctx.recv_ttl - 1U;
    c796:	9a01      	ldr	r2, [sp, #4]
    c798:	f89d 301d 	ldrb.w	r3, [sp, #29]
    c79c:	7851      	ldrb	r1, [r2, #1]
    c79e:	3b01      	subs	r3, #1
    c7a0:	430b      	orrs	r3, r1
    c7a2:	7053      	strb	r3, [r2, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c7a4:	f100 0508 	add.w	r5, r0, #8
    c7a8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    c7ac:	9901      	ldr	r1, [sp, #4]
    c7ae:	4628      	mov	r0, r5
    c7b0:	f01b fbdd 	bl	27f6e <net_buf_simple_add_mem>
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    c7b4:	9b04      	ldr	r3, [sp, #16]
    c7b6:	7f9a      	ldrb	r2, [r3, #30]
    c7b8:	1e90      	subs	r0, r2, #2
    c7ba:	4241      	negs	r1, r0
    c7bc:	4141      	adcs	r1, r0
    c7be:	225a      	movs	r2, #90	; 0x5a
	if (rx->friend_cred) {
    c7c0:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    c7c4:	434a      	muls	r2, r1
    c7c6:	f102 013d 	add.w	r1, r2, #61	; 0x3d
	if (rx->friend_cred) {
    c7ca:	0746      	lsls	r6, r0, #29
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    c7cc:	4419      	add	r1, r3
	if (rx->friend_cred) {
    c7ce:	d50b      	bpl.n	c7e8 <bt_mesh_net_recv+0x190>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    c7d0:	68a6      	ldr	r6, [r4, #8]
    c7d2:	7830      	ldrb	r0, [r6, #0]
    c7d4:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
    c7d8:	7030      	strb	r0, [r6, #0]
		buf->data[0] |= cred->nid;
    c7da:	68a0      	ldr	r0, [r4, #8]
    c7dc:	4413      	add	r3, r2
    c7de:	7802      	ldrb	r2, [r0, #0]
    c7e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    c7e4:	4313      	orrs	r3, r2
    c7e6:	7003      	strb	r3, [r0, #0]
	if (net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_RX(rx), false)) {
    c7e8:	4b23      	ldr	r3, [pc, #140]	; (c878 <bt_mesh_net_recv+0x220>)
    c7ea:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    c7ee:	6818      	ldr	r0, [r3, #0]
    c7f0:	f002 0201 	and.w	r2, r2, #1
    c7f4:	1a82      	subs	r2, r0, r2
    c7f6:	2300      	movs	r3, #0
    c7f8:	4628      	mov	r0, r5
    c7fa:	f019 f8d6 	bl	259aa <net_encrypt>
    c7fe:	b138      	cbz	r0, c810 <bt_mesh_net_recv+0x1b8>
		BT_ERR("Re-encrypting failed");
    c800:	2145      	movs	r1, #69	; 0x45
    c802:	481e      	ldr	r0, [pc, #120]	; (c87c <bt_mesh_net_recv+0x224>)
    c804:	f015 fb61 	bl	21eca <printk>
	net_buf_unref(buf);
    c808:	4620      	mov	r0, r4
    c80a:	f010 f82d 	bl	1c868 <net_buf_unref>
    c80e:	e7ae      	b.n	c76e <bt_mesh_net_recv+0x116>
	    (rx->friend_cred ||
    c810:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    c814:	0759      	lsls	r1, r3, #29
    c816:	d510      	bpl.n	c83a <bt_mesh_net_recv+0x1e2>
		bt_mesh_proxy_relay(&buf->b, rx->ctx.recv_dst);
    c818:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    c81c:	4628      	mov	r0, r5
    c81e:	f008 fe47 	bl	154b0 <bt_mesh_proxy_relay>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    c822:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    c826:	f3c3 1301 	ubfx	r3, r3, #4, #2
	switch (net_if) {
    c82a:	b15b      	cbz	r3, c844 <bt_mesh_net_recv+0x1ec>
    c82c:	2b02      	cmp	r3, #2
    c82e:	d016      	beq.n	c85e <bt_mesh_net_recv+0x206>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    c830:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    c834:	075b      	lsls	r3, r3, #29
    c836:	d40c      	bmi.n	c852 <bt_mesh_net_recv+0x1fa>
    c838:	e7e6      	b.n	c808 <bt_mesh_net_recv+0x1b0>
	     bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED)) {
    c83a:	f019 f839 	bl	258b0 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    c83e:	2801      	cmp	r0, #1
    c840:	d1ef      	bne.n	c822 <bt_mesh_net_recv+0x1ca>
    c842:	e7e9      	b.n	c818 <bt_mesh_net_recv+0x1c0>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    c844:	f019 f851 	bl	258ea <bt_mesh_relay_get>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    c848:	1e42      	subs	r2, r0, #1
    c84a:	4250      	negs	r0, r2
    c84c:	4150      	adcs	r0, r2
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    c84e:	2800      	cmp	r0, #0
    c850:	d0ee      	beq.n	c830 <bt_mesh_net_recv+0x1d8>
		bt_mesh_adv_send(buf, NULL, NULL);
    c852:	2200      	movs	r2, #0
    c854:	4611      	mov	r1, r2
    c856:	4620      	mov	r0, r4
    c858:	f7fe ff30 	bl	b6bc <bt_mesh_adv_send>
    c85c:	e7d4      	b.n	c808 <bt_mesh_net_recv+0x1b0>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    c85e:	f019 f827 	bl	258b0 <bt_mesh_gatt_proxy_get>
    c862:	e7f1      	b.n	c848 <bt_mesh_net_recv+0x1f0>
    c864:	0002c356 	.word	0x0002c356
    c868:	0002c37f 	.word	0x0002c37f
    c86c:	20002ab4 	.word	0x20002ab4
    c870:	2000438a 	.word	0x2000438a
    c874:	0002c3b9 	.word	0x0002c3b9
    c878:	20001ab8 	.word	0x20001ab8
    c87c:	0002c3d3 	.word	0x0002c3d3

0000c880 <bt_mesh_net_init>:
{
    c880:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c882:	4c08      	ldr	r4, [pc, #32]	; (c8a4 <bt_mesh_net_init+0x24>)
    c884:	2230      	movs	r2, #48	; 0x30
    c886:	2100      	movs	r1, #0
    c888:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
    c88c:	f017 fc89 	bl	241a2 <memset>
    c890:	4b05      	ldr	r3, [pc, #20]	; (c8a8 <bt_mesh_net_init+0x28>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    c892:	4a06      	ldr	r2, [pc, #24]	; (c8ac <bt_mesh_net_init+0x2c>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c894:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    c898:	2300      	movs	r3, #0
    c89a:	60e3      	str	r3, [r4, #12]
    c89c:	e9c4 2304 	strd	r2, r3, [r4, #16]
}
    c8a0:	bd10      	pop	{r4, pc}
    c8a2:	bf00      	nop
    c8a4:	20001ab8 	.word	0x20001ab8
    c8a8:	0000c16d 	.word	0x0000c16d
    c8ac:	0000bc9d 	.word	0x0000bc9d

0000c8b0 <bt_mesh_net_pending_iv_store>:
		BT_DBG("Stored IV value");
	}
}

void bt_mesh_net_pending_iv_store(void)
{
    c8b0:	b507      	push	{r0, r1, r2, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    c8b2:	2000      	movs	r0, #0
    c8b4:	f7ff fb24 	bl	bf00 <atomic_test_bit.constprop.12>
    c8b8:	b1e0      	cbz	r0, c8f4 <bt_mesh_net_pending_iv_store+0x44>
	iv.iv_index = bt_mesh.iv_index;
    c8ba:	4a12      	ldr	r2, [pc, #72]	; (c904 <bt_mesh_net_pending_iv_store+0x54>)
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    c8bc:	2002      	movs	r0, #2
	iv.iv_index = bt_mesh.iv_index;
    c8be:	6813      	ldr	r3, [r2, #0]
    c8c0:	9300      	str	r3, [sp, #0]
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    c8c2:	f7ff fb1d 	bl	bf00 <atomic_test_bit.constprop.12>
    c8c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
	iv.iv_duration = bt_mesh.ivu_duration;
    c8ca:	f892 21f0 	ldrb.w	r2, [r2, #496]	; 0x1f0
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    c8ce:	f360 0300 	bfi	r3, r0, #0, #1
	iv.iv_duration = bt_mesh.ivu_duration;
    c8d2:	f362 0347 	bfi	r3, r2, #1, #7
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
    c8d6:	4669      	mov	r1, sp
    c8d8:	2205      	movs	r2, #5
    c8da:	480b      	ldr	r0, [pc, #44]	; (c908 <bt_mesh_net_pending_iv_store+0x58>)
	iv.iv_duration = bt_mesh.ivu_duration;
    c8dc:	f88d 3004 	strb.w	r3, [sp, #4]
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
    c8e0:	f7f6 fcee 	bl	32c0 <settings_save_one>
	if (err) {
    c8e4:	b118      	cbz	r0, c8ee <bt_mesh_net_pending_iv_store+0x3e>
		BT_ERR("Failed to store IV value");
    c8e6:	4809      	ldr	r0, [pc, #36]	; (c90c <bt_mesh_net_pending_iv_store+0x5c>)
    c8e8:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to clear IV");
    c8ea:	f015 faee 	bl	21eca <printk>
		store_pending_iv();
	} else {
		clear_iv();
	}
}
    c8ee:	b003      	add	sp, #12
    c8f0:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/IV");
    c8f4:	4804      	ldr	r0, [pc, #16]	; (c908 <bt_mesh_net_pending_iv_store+0x58>)
    c8f6:	f016 f925 	bl	22b44 <settings_delete>
	if (err) {
    c8fa:	2800      	cmp	r0, #0
    c8fc:	d0f7      	beq.n	c8ee <bt_mesh_net_pending_iv_store+0x3e>
		BT_ERR("Failed to clear IV");
    c8fe:	2145      	movs	r1, #69	; 0x45
    c900:	4803      	ldr	r0, [pc, #12]	; (c910 <bt_mesh_net_pending_iv_store+0x60>)
    c902:	e7f2      	b.n	c8ea <bt_mesh_net_pending_iv_store+0x3a>
    c904:	20001ab8 	.word	0x20001ab8
    c908:	0002c29f 	.word	0x0002c29f
    c90c:	0002c2aa 	.word	0x0002c2aa
    c910:	0002c2c8 	.word	0x0002c2c8

0000c914 <bt_mesh_net_pending_net_store>:
		BT_DBG("Stored Network value");
	}
}

void bt_mesh_net_pending_net_store(void)
{
    c914:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    c916:	2000      	movs	r0, #0
    c918:	f7ff faf2 	bl	bf00 <atomic_test_bit.constprop.12>
    c91c:	b1b0      	cbz	r0, c94c <bt_mesh_net_pending_net_store+0x38>
	net.primary_addr = bt_mesh_primary_addr();
    c91e:	f003 f827 	bl	f970 <bt_mesh_primary_addr>
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
    c922:	2210      	movs	r2, #16
	net.primary_addr = bt_mesh_primary_addr();
    c924:	f8ad 0004 	strh.w	r0, [sp, #4]
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
    c928:	490c      	ldr	r1, [pc, #48]	; (c95c <bt_mesh_net_pending_net_store+0x48>)
    c92a:	f10d 0006 	add.w	r0, sp, #6
    c92e:	f017 fc0e 	bl	2414e <memcpy>
	err = settings_save_one("bt/mesh/Net", &net, sizeof(net));
    c932:	2212      	movs	r2, #18
    c934:	a901      	add	r1, sp, #4
    c936:	480a      	ldr	r0, [pc, #40]	; (c960 <bt_mesh_net_pending_net_store+0x4c>)
    c938:	f7f6 fcc2 	bl	32c0 <settings_save_one>
	if (err) {
    c93c:	b118      	cbz	r0, c946 <bt_mesh_net_pending_net_store+0x32>
		BT_ERR("Failed to store Network value");
    c93e:	4809      	ldr	r0, [pc, #36]	; (c964 <bt_mesh_net_pending_net_store+0x50>)
    c940:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to clear Network");
    c942:	f015 fac2 	bl	21eca <printk>
		store_pending_net();
	} else {
		clear_net();
	}
}
    c946:	b007      	add	sp, #28
    c948:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/Net");
    c94c:	4804      	ldr	r0, [pc, #16]	; (c960 <bt_mesh_net_pending_net_store+0x4c>)
    c94e:	f016 f8f9 	bl	22b44 <settings_delete>
	if (err) {
    c952:	2800      	cmp	r0, #0
    c954:	d0f7      	beq.n	c946 <bt_mesh_net_pending_net_store+0x32>
		BT_ERR("Failed to clear Network");
    c956:	2145      	movs	r1, #69	; 0x45
    c958:	4803      	ldr	r0, [pc, #12]	; (c968 <bt_mesh_net_pending_net_store+0x54>)
    c95a:	e7f2      	b.n	c942 <bt_mesh_net_pending_net_store+0x2e>
    c95c:	20001ce0 	.word	0x20001ce0
    c960:	0002c2e0 	.word	0x0002c2e0
    c964:	0002c2ec 	.word	0x0002c2ec
    c968:	0002c30f 	.word	0x0002c30f

0000c96c <bt_mesh_net_pending_seq_store>:

void bt_mesh_net_pending_seq_store(void)
{
    c96c:	b507      	push	{r0, r1, r2, lr}
	struct seq_val seq;
	int err;

	sys_put_le24(bt_mesh.seq, seq.val);
    c96e:	4b0a      	ldr	r3, [pc, #40]	; (c998 <bt_mesh_net_pending_seq_store+0x2c>)

	err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
    c970:	480a      	ldr	r0, [pc, #40]	; (c99c <bt_mesh_net_pending_seq_store+0x30>)
	dst[0] = val;
    c972:	889a      	ldrh	r2, [r3, #4]
    c974:	f8ad 2004 	strh.w	r2, [sp, #4]
	dst[2] = val >> 16;
    c978:	88db      	ldrh	r3, [r3, #6]
    c97a:	f88d 3006 	strb.w	r3, [sp, #6]
    c97e:	2203      	movs	r2, #3
    c980:	a901      	add	r1, sp, #4
    c982:	f7f6 fc9d 	bl	32c0 <settings_save_one>
	if (err) {
    c986:	b118      	cbz	r0, c990 <bt_mesh_net_pending_seq_store+0x24>
		BT_ERR("Failed to stor Seq value");
    c988:	2145      	movs	r1, #69	; 0x45
    c98a:	4805      	ldr	r0, [pc, #20]	; (c9a0 <bt_mesh_net_pending_seq_store+0x34>)
    c98c:	f015 fa9d 	bl	21eca <printk>
	} else {
		BT_DBG("Stored Seq value");
	}
}
    c990:	b003      	add	sp, #12
    c992:	f85d fb04 	ldr.w	pc, [sp], #4
    c996:	bf00      	nop
    c998:	20001ab8 	.word	0x20001ab8
    c99c:	0002c32c 	.word	0x0002c32c
    c9a0:	0002c338 	.word	0x0002c338

0000c9a4 <bt_mesh_net_settings_commit>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
}

void bt_mesh_net_settings_commit(void)
{
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c9a4:	4906      	ldr	r1, [pc, #24]	; (c9c0 <bt_mesh_net_settings_commit+0x1c>)
    c9a6:	f891 31f0 	ldrb.w	r3, [r1, #496]	; 0x1f0
    c9aa:	2b5f      	cmp	r3, #95	; 0x5f
    c9ac:	d806      	bhi.n	c9bc <bt_mesh_net_settings_commit+0x18>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c9ae:	4a05      	ldr	r2, [pc, #20]	; (c9c4 <bt_mesh_net_settings_commit+0x20>)
    c9b0:	4805      	ldr	r0, [pc, #20]	; (c9c8 <bt_mesh_net_settings_commit+0x24>)
    c9b2:	2300      	movs	r3, #0
    c9b4:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
    c9b8:	f013 bbce 	b.w	20158 <k_delayed_work_submit_to_queue>
		k_delayed_work_submit(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
	}
}
    c9bc:	4770      	bx	lr
    c9be:	bf00      	nop
    c9c0:	20001ab8 	.word	0x20001ab8
    c9c4:	a8c00000 	.word	0xa8c00000
    c9c8:	20002170 	.word	0x20002170

0000c9cc <clear_net_key>:
		cb->evt_handler(sub, evt);
	}
}

static void clear_net_key(uint16_t net_idx)
{
    c9cc:	b510      	push	{r4, lr}
    c9ce:	b086      	sub	sp, #24
	char path[20];
	int err;

	BT_DBG("NetKeyIndex 0x%03x", net_idx);

	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    c9d0:	4603      	mov	r3, r0
{
    c9d2:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    c9d4:	4a07      	ldr	r2, [pc, #28]	; (c9f4 <clear_net_key+0x28>)
    c9d6:	2114      	movs	r1, #20
    c9d8:	a801      	add	r0, sp, #4
    c9da:	f015 fa83 	bl	21ee4 <snprintk>
	err = settings_delete(path);
    c9de:	a801      	add	r0, sp, #4
    c9e0:	f016 f8b0 	bl	22b44 <settings_delete>
	if (err) {
    c9e4:	b120      	cbz	r0, c9f0 <clear_net_key+0x24>
		BT_ERR("Failed to clear NetKeyIndex 0x%03x", net_idx);
    c9e6:	4622      	mov	r2, r4
    c9e8:	2145      	movs	r1, #69	; 0x45
    c9ea:	4803      	ldr	r0, [pc, #12]	; (c9f8 <clear_net_key+0x2c>)
    c9ec:	f015 fa6d 	bl	21eca <printk>
	} else {
		BT_DBG("Cleared NetKeyIndex 0x%03x", net_idx);
	}
}
    c9f0:	b006      	add	sp, #24
    c9f2:	bd10      	pop	{r4, pc}
    c9f4:	0002c4dd 	.word	0x0002c4dd
    c9f8:	0002c4ef 	.word	0x0002c4ef

0000c9fc <subnet_evt>:
{
    c9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    ca00:	4d0d      	ldr	r5, [pc, #52]	; (ca38 <subnet_evt+0x3c>)
    ca02:	4c0e      	ldr	r4, [pc, #56]	; (ca3c <subnet_evt+0x40>)
    ca04:	4e0e      	ldr	r6, [pc, #56]	; (ca40 <subnet_evt+0x44>)
{
    ca06:	4680      	mov	r8, r0
    ca08:	4689      	mov	r9, r1
    ca0a:	462f      	mov	r7, r5
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    ca0c:	42ac      	cmp	r4, r5
    ca0e:	d908      	bls.n	ca22 <subnet_evt+0x26>
    ca10:	4631      	mov	r1, r6
    ca12:	480c      	ldr	r0, [pc, #48]	; (ca44 <subnet_evt+0x48>)
    ca14:	2245      	movs	r2, #69	; 0x45
    ca16:	f015 fa58 	bl	21eca <printk>
    ca1a:	2145      	movs	r1, #69	; 0x45
    ca1c:	4630      	mov	r0, r6
    ca1e:	f015 fd06 	bl	2242e <assert_post_action>
    ca22:	42bc      	cmp	r4, r7
    ca24:	d301      	bcc.n	ca2a <subnet_evt+0x2e>
}
    ca26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cb->evt_handler(sub, evt);
    ca2a:	f854 3b04 	ldr.w	r3, [r4], #4
    ca2e:	4649      	mov	r1, r9
    ca30:	4640      	mov	r0, r8
    ca32:	4798      	blx	r3
    ca34:	e7ea      	b.n	ca0c <subnet_evt+0x10>
    ca36:	bf00      	nop
    ca38:	00028bcc 	.word	0x00028bcc
    ca3c:	00028bbc 	.word	0x00028bbc
    ca40:	0002c639 	.word	0x0002c639
    ca44:	0002a026 	.word	0x0002a026

0000ca48 <net_keys_create>:
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
}

static int net_keys_create(struct bt_mesh_subnet_keys *keys,
			   const uint8_t key[16])
{
    ca48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t p = 0;
    ca4a:	2300      	movs	r3, #0
    ca4c:	f88d 300f 	strb.w	r3, [sp, #15]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    ca50:	f100 0322 	add.w	r3, r0, #34	; 0x22
{
    ca54:	460e      	mov	r6, r1
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    ca56:	9301      	str	r3, [sp, #4]
    ca58:	f100 0312 	add.w	r3, r0, #18
    ca5c:	9300      	str	r3, [sp, #0]
{
    ca5e:	4605      	mov	r5, r0
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    ca60:	f100 0311 	add.w	r3, r0, #17
    ca64:	2201      	movs	r2, #1
    ca66:	f10d 010f 	add.w	r1, sp, #15
    ca6a:	4630      	mov	r0, r6
    ca6c:	f002 fb14 	bl	f098 <bt_mesh_k2>
	int err;

	err = msg_cred_create(&keys->msg, &p, 1, key);
	if (err) {
    ca70:	4604      	mov	r4, r0
    ca72:	b130      	cbz	r0, ca82 <net_keys_create+0x3a>
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
    ca74:	4817      	ldr	r0, [pc, #92]	; (cad4 <net_keys_create+0x8c>)
    ca76:	2145      	movs	r1, #69	; 0x45
	BT_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
#endif /* GATT_PROXY */

	err = bt_mesh_beacon_key(key, keys->beacon);
	if (err) {
		BT_ERR("Unable to generate beacon key");
    ca78:	f015 fa27 	bl	21eca <printk>
	BT_DBG("BeaconKey %s", bt_hex(keys->beacon, 16));

	keys->valid = 1U;

	return 0;
}
    ca7c:	4620      	mov	r0, r4
    ca7e:	b004      	add	sp, #16
    ca80:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(keys->net, key, 16);
    ca82:	2210      	movs	r2, #16
    ca84:	4631      	mov	r1, r6
    ca86:	1c68      	adds	r0, r5, #1
    ca88:	f017 fb61 	bl	2414e <memcpy>
	err = bt_mesh_k3(key, keys->net_id);
    ca8c:	f105 0132 	add.w	r1, r5, #50	; 0x32
    ca90:	4630      	mov	r0, r6
    ca92:	f002 fb59 	bl	f148 <bt_mesh_k3>
	if (err) {
    ca96:	4604      	mov	r4, r0
    ca98:	b110      	cbz	r0, caa0 <net_keys_create+0x58>
		BT_ERR("Unable to generate Net ID");
    ca9a:	2145      	movs	r1, #69	; 0x45
    ca9c:	480e      	ldr	r0, [pc, #56]	; (cad8 <net_keys_create+0x90>)
    ca9e:	e7eb      	b.n	ca78 <net_keys_create+0x30>
}

static inline int bt_mesh_identity_key(const uint8_t net_key[16],
				       uint8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
    caa0:	f105 023a 	add.w	r2, r5, #58	; 0x3a
    caa4:	490d      	ldr	r1, [pc, #52]	; (cadc <net_keys_create+0x94>)
    caa6:	4630      	mov	r0, r6
    caa8:	f002 fba4 	bl	f1f4 <bt_mesh_id128>
	if (err) {
    caac:	4604      	mov	r4, r0
    caae:	b110      	cbz	r0, cab6 <net_keys_create+0x6e>
		BT_ERR("Unable to generate IdentityKey");
    cab0:	2145      	movs	r1, #69	; 0x45
    cab2:	480b      	ldr	r0, [pc, #44]	; (cae0 <net_keys_create+0x98>)
    cab4:	e7e0      	b.n	ca78 <net_keys_create+0x30>
}

static inline int bt_mesh_beacon_key(const uint8_t net_key[16],
				     uint8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    cab6:	f105 024a 	add.w	r2, r5, #74	; 0x4a
    caba:	490a      	ldr	r1, [pc, #40]	; (cae4 <net_keys_create+0x9c>)
    cabc:	4630      	mov	r0, r6
    cabe:	f002 fb99 	bl	f1f4 <bt_mesh_id128>
	if (err) {
    cac2:	4604      	mov	r4, r0
    cac4:	b110      	cbz	r0, cacc <net_keys_create+0x84>
		BT_ERR("Unable to generate beacon key");
    cac6:	2145      	movs	r1, #69	; 0x45
    cac8:	4807      	ldr	r0, [pc, #28]	; (cae8 <net_keys_create+0xa0>)
    caca:	e7d5      	b.n	ca78 <net_keys_create+0x30>
	keys->valid = 1U;
    cacc:	2301      	movs	r3, #1
    cace:	702b      	strb	r3, [r5, #0]
	return 0;
    cad0:	e7d4      	b.n	ca7c <net_keys_create+0x34>
    cad2:	bf00      	nop
    cad4:	0002c534 	.word	0x0002c534
    cad8:	0002c565 	.word	0x0002c565
    cadc:	0002c584 	.word	0x0002c584
    cae0:	0002c589 	.word	0x0002c589
    cae4:	0002c5ad 	.word	0x0002c5ad
    cae8:	0002c5b2 	.word	0x0002c5b2

0000caec <bt_mesh_subnet_get.part.1>:
struct bt_mesh_subnet *bt_mesh_subnet_get(uint16_t net_idx)
{
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == net_idx) {
    caec:	4b03      	ldr	r3, [pc, #12]	; (cafc <bt_mesh_subnet_get.part.1+0x10>)
    caee:	8b9a      	ldrh	r2, [r3, #28]
			return sub;
		}
	}

	return NULL;
}
    caf0:	4282      	cmp	r2, r0
    caf2:	bf0c      	ite	eq
    caf4:	4618      	moveq	r0, r3
    caf6:	2000      	movne	r0, #0
    caf8:	4770      	bx	lr
    cafa:	bf00      	nop
    cafc:	200006a8 	.word	0x200006a8

0000cb00 <store_subnet>:
{
    cb00:	b510      	push	{r4, lr}
    cb02:	b08e      	sub	sp, #56	; 0x38
    cb04:	4601      	mov	r1, r0
    cb06:	f7ff fff1 	bl	caec <bt_mesh_subnet_get.part.1>
	if (!sub) {
    cb0a:	4604      	mov	r4, r0
    cb0c:	b930      	cbnz	r0, cb1c <store_subnet+0x1c>
		BT_WARN("NetKeyIndex 0x%03x not found", net_idx);
    cb0e:	460a      	mov	r2, r1
    cb10:	4817      	ldr	r0, [pc, #92]	; (cb70 <store_subnet+0x70>)
    cb12:	2157      	movs	r1, #87	; 0x57
    cb14:	f015 f9d9 	bl	21eca <printk>
}
    cb18:	b00e      	add	sp, #56	; 0x38
    cb1a:	bd10      	pop	{r4, pc}
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    cb1c:	460b      	mov	r3, r1
    cb1e:	4a15      	ldr	r2, [pc, #84]	; (cb74 <store_subnet+0x74>)
    cb20:	2114      	movs	r1, #20
    cb22:	4668      	mov	r0, sp
    cb24:	f015 f9de 	bl	21ee4 <snprintk>
	memcpy(&key.val[0], sub->keys[0].net, 16);
    cb28:	2210      	movs	r2, #16
    cb2a:	f104 012d 	add.w	r1, r4, #45	; 0x2d
    cb2e:	f10d 0015 	add.w	r0, sp, #21
    cb32:	f017 fb0c 	bl	2414e <memcpy>
	memcpy(&key.val[1], sub->keys[1].net, 16);
    cb36:	2210      	movs	r2, #16
    cb38:	f104 0187 	add.w	r1, r4, #135	; 0x87
    cb3c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    cb40:	f017 fb05 	bl	2414e <memcpy>
	key.kr_flag = 0U; /* Deprecated */
    cb44:	f89d 3014 	ldrb.w	r3, [sp, #20]
	key.kr_phase = sub->kr_phase;
    cb48:	7fa2      	ldrb	r2, [r4, #30]
    cb4a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    cb4e:	f362 0347 	bfi	r3, r2, #1, #7
	err = settings_save_one(path, &key, sizeof(key));
    cb52:	a905      	add	r1, sp, #20
    cb54:	2221      	movs	r2, #33	; 0x21
    cb56:	4668      	mov	r0, sp
	key.kr_phase = sub->kr_phase;
    cb58:	f88d 3014 	strb.w	r3, [sp, #20]
	err = settings_save_one(path, &key, sizeof(key));
    cb5c:	f7f6 fbb0 	bl	32c0 <settings_save_one>
	if (err) {
    cb60:	2800      	cmp	r0, #0
    cb62:	d0d9      	beq.n	cb18 <store_subnet+0x18>
		BT_ERR("Failed to store NetKey value");
    cb64:	2145      	movs	r1, #69	; 0x45
    cb66:	4804      	ldr	r0, [pc, #16]	; (cb78 <store_subnet+0x78>)
    cb68:	f015 f9af 	bl	21eca <printk>
    cb6c:	e7d4      	b.n	cb18 <store_subnet+0x18>
    cb6e:	bf00      	nop
    cb70:	0002c5d5 	.word	0x0002c5d5
    cb74:	0002c4dd 	.word	0x0002c4dd
    cb78:	0002c5f7 	.word	0x0002c5f7

0000cb7c <update_subnet_settings>:
		if (update->key_idx == key_idx) {
    cb7c:	4a11      	ldr	r2, [pc, #68]	; (cbc4 <update_subnet_settings+0x48>)
		if (!update->valid) {
    cb7e:	7853      	ldrb	r3, [r2, #1]
{
    cb80:	b470      	push	{r4, r5, r6}
		if (update->key_idx == key_idx) {
    cb82:	8814      	ldrh	r4, [r2, #0]
		if (!update->valid) {
    cb84:	f013 0f10 	tst.w	r3, #16
	uint8_t clear = store ? 0U : 1U;
    cb88:	f081 0501 	eor.w	r5, r1, #1
		if (update->key_idx == key_idx) {
    cb8c:	f3c4 040b 	ubfx	r4, r4, #0, #12
		if (!update->valid) {
    cb90:	d10f      	bne.n	cbb2 <update_subnet_settings+0x36>
	free_slot->valid = 1U;
    cb92:	f043 0310 	orr.w	r3, r3, #16
    cb96:	7053      	strb	r3, [r2, #1]
	free_slot->key_idx = net_idx;
    cb98:	8813      	ldrh	r3, [r2, #0]
    cb9a:	f360 030b 	bfi	r3, r0, #0, #12
    cb9e:	8013      	strh	r3, [r2, #0]
	free_slot->clear = clear;
    cba0:	f3c3 2307 	ubfx	r3, r3, #8, #8
		update->clear = clear;
    cba4:	f365 1345 	bfi	r3, r5, #5, #1
    cba8:	7053      	strb	r3, [r2, #1]
		bt_mesh_settings_store_schedule(
    cbaa:	2001      	movs	r0, #1
}
    cbac:	bc70      	pop	{r4, r5, r6}
		bt_mesh_settings_store_schedule(
    cbae:	f005 ba0b 	b.w	11fc8 <bt_mesh_settings_store_schedule>
		if (update->key_idx == key_idx) {
    cbb2:	4284      	cmp	r4, r0
    cbb4:	d0f6      	beq.n	cba4 <update_subnet_settings+0x28>
		if (store) {
    cbb6:	b111      	cbz	r1, cbbe <update_subnet_settings+0x42>
}
    cbb8:	bc70      	pop	{r4, r5, r6}
			store_subnet(net_idx);
    cbba:	f7ff bfa1 	b.w	cb00 <store_subnet>
}
    cbbe:	bc70      	pop	{r4, r5, r6}
			clear_net_key(net_idx);
    cbc0:	f7ff bf04 	b.w	c9cc <clear_net_key>
    cbc4:	2000438c 	.word	0x2000438c

0000cbc8 <bt_mesh_net_flags>:
	if (sub && (sub->kr_phase == BT_MESH_KR_PHASE_2)) {
    cbc8:	b118      	cbz	r0, cbd2 <bt_mesh_net_flags+0xa>
    cbca:	7f80      	ldrb	r0, [r0, #30]
	uint8_t flags = 0x00;
    cbcc:	1e82      	subs	r2, r0, #2
    cbce:	4250      	negs	r0, r2
    cbd0:	4150      	adcs	r0, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cbd2:	4b05      	ldr	r3, [pc, #20]	; (cbe8 <bt_mesh_net_flags+0x20>)
    cbd4:	f3bf 8f5b 	dmb	ish
    cbd8:	681b      	ldr	r3, [r3, #0]
    cbda:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    cbde:	075b      	lsls	r3, r3, #29
		flags |= BT_MESH_NET_FLAG_IVU;
    cbe0:	bf48      	it	mi
    cbe2:	f040 0002 	orrmi.w	r0, r0, #2
}
    cbe6:	4770      	bx	lr
    cbe8:	20001ac0 	.word	0x20001ac0

0000cbec <bt_mesh_subnet_add>:
{
    cbec:	b570      	push	{r4, r5, r6, lr}
		if (subnets[i].net_idx == net_idx) {
    cbee:	4d14      	ldr	r5, [pc, #80]	; (cc40 <bt_mesh_subnet_add+0x54>)
    cbf0:	8bab      	ldrh	r3, [r5, #28]
{
    cbf2:	4606      	mov	r6, r0
		if (subnets[i].net_idx == net_idx) {
    cbf4:	429e      	cmp	r6, r3
{
    cbf6:	4608      	mov	r0, r1
		if (subnets[i].net_idx == net_idx) {
    cbf8:	d00b      	beq.n	cc12 <bt_mesh_subnet_add+0x26>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    cbfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cbfe:	4293      	cmp	r3, r2
    cc00:	d11c      	bne.n	cc3c <bt_mesh_subnet_add+0x50>
	err = net_keys_create(&sub->keys[0], key);
    cc02:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    cc06:	f7ff ff1f 	bl	ca48 <net_keys_create>
	if (err) {
    cc0a:	4604      	mov	r4, r0
    cc0c:	b158      	cbz	r0, cc26 <bt_mesh_subnet_add+0x3a>
		return STATUS_UNSPECIFIED;
    cc0e:	2010      	movs	r0, #16
    cc10:	e008      	b.n	cc24 <bt_mesh_subnet_add+0x38>
		if (memcmp(key, sub->keys[0].net, 16)) {
    cc12:	2210      	movs	r2, #16
    cc14:	f105 012d 	add.w	r1, r5, #45	; 0x2d
    cc18:	f017 fa72 	bl	24100 <memcmp>
    cc1c:	2800      	cmp	r0, #0
		return STATUS_SUCCESS;
    cc1e:	bf14      	ite	ne
    cc20:	2006      	movne	r0, #6
    cc22:	2000      	moveq	r0, #0
}
    cc24:	bd70      	pop	{r4, r5, r6, pc}
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    cc26:	4601      	mov	r1, r0
	sub->kr_phase = BT_MESH_KR_NORMAL;
    cc28:	83e8      	strh	r0, [r5, #30]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    cc2a:	4628      	mov	r0, r5
	sub->net_idx = net_idx;
    cc2c:	83ae      	strh	r6, [r5, #28]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    cc2e:	f7ff fee5 	bl	c9fc <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
    cc32:	8ba8      	ldrh	r0, [r5, #28]
    cc34:	f018 feed 	bl	25a12 <bt_mesh_subnet_store>
	return STATUS_SUCCESS;
    cc38:	4620      	mov	r0, r4
    cc3a:	e7f3      	b.n	cc24 <bt_mesh_subnet_add+0x38>
		return STATUS_INSUFF_RESOURCES;
    cc3c:	2005      	movs	r0, #5
    cc3e:	e7f1      	b.n	cc24 <bt_mesh_subnet_add+0x38>
    cc40:	200006a8 	.word	0x200006a8

0000cc44 <bt_mesh_subnet_kr_phase_set>:
{
    cc44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const uint8_t valid_transitions[] = {
    cc46:	f640 4308 	movw	r3, #3080	; 0xc08
    cc4a:	f8ad 3004 	strh.w	r3, [sp, #4]
    cc4e:	2308      	movs	r3, #8
{
    cc50:	460c      	mov	r4, r1
	const uint8_t valid_transitions[] = {
    cc52:	f88d 3006 	strb.w	r3, [sp, #6]
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    cc56:	f7ff ff49 	bl	caec <bt_mesh_subnet_get.part.1>
	if (!sub) {
    cc5a:	4605      	mov	r5, r0
    cc5c:	b918      	cbnz	r0, cc66 <bt_mesh_subnet_kr_phase_set+0x22>
		*phase = 0x00;
    cc5e:	7020      	strb	r0, [r4, #0]
		return STATUS_INVALID_NETKEY;
    cc60:	2004      	movs	r0, #4
}
    cc62:	b003      	add	sp, #12
    cc64:	bd30      	pop	{r4, r5, pc}
	if (*phase == sub->kr_phase) {
    cc66:	780b      	ldrb	r3, [r1, #0]
    cc68:	7f82      	ldrb	r2, [r0, #30]
    cc6a:	4293      	cmp	r3, r2
    cc6c:	d00d      	beq.n	cc8a <bt_mesh_subnet_kr_phase_set+0x46>
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    cc6e:	2a02      	cmp	r2, #2
    cc70:	d80d      	bhi.n	cc8e <bt_mesh_subnet_kr_phase_set+0x4a>
	    valid_transitions[sub->kr_phase] & BIT(*phase)) {
    cc72:	a902      	add	r1, sp, #8
    cc74:	4411      	add	r1, r2
    cc76:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    cc7a:	40d9      	lsrs	r1, r3
    cc7c:	07c9      	lsls	r1, r1, #31
    cc7e:	d506      	bpl.n	cc8e <bt_mesh_subnet_kr_phase_set+0x4a>
		key_refresh(sub, *phase);
    cc80:	4619      	mov	r1, r3
    cc82:	f018 fec9 	bl	25a18 <key_refresh>
		*phase = sub->kr_phase;
    cc86:	7fab      	ldrb	r3, [r5, #30]
    cc88:	7023      	strb	r3, [r4, #0]
		return STATUS_SUCCESS;
    cc8a:	2000      	movs	r0, #0
    cc8c:	e7e9      	b.n	cc62 <bt_mesh_subnet_kr_phase_set+0x1e>
	BT_WARN("Invalid KR transition: 0x%02x -> 0x%02x", sub->kr_phase,
    cc8e:	4804      	ldr	r0, [pc, #16]	; (cca0 <bt_mesh_subnet_kr_phase_set+0x5c>)
    cc90:	2157      	movs	r1, #87	; 0x57
    cc92:	f015 f91a 	bl	21eca <printk>
	*phase = sub->kr_phase;
    cc96:	7fab      	ldrb	r3, [r5, #30]
    cc98:	7023      	strb	r3, [r4, #0]
	return STATUS_CANNOT_UPDATE;
    cc9a:	200b      	movs	r0, #11
    cc9c:	e7e1      	b.n	cc62 <bt_mesh_subnet_kr_phase_set+0x1e>
    cc9e:	bf00      	nop
    cca0:	0002c4b0 	.word	0x0002c4b0

0000cca4 <bt_mesh_subnets_get>:
{
    cca4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    cca6:	2400      	movs	r4, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    cca8:	4e0b      	ldr	r6, [pc, #44]	; (ccd8 <bt_mesh_subnets_get+0x34>)
	size_t count = 0;
    ccaa:	4623      	mov	r3, r4
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    ccac:	f64f 77ff 	movw	r7, #65535	; 0xffff
    ccb0:	8bb5      	ldrh	r5, [r6, #28]
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    ccb2:	b10c      	cbz	r4, ccb8 <bt_mesh_subnets_get+0x14>
	return count;
    ccb4:	4618      	mov	r0, r3
}
    ccb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    ccb8:	42bd      	cmp	r5, r7
    ccba:	d0fb      	beq.n	ccb4 <bt_mesh_subnets_get+0x10>
		if (skip) {
    ccbc:	b112      	cbz	r2, ccc4 <bt_mesh_subnets_get+0x20>
			skip--;
    ccbe:	3a01      	subs	r2, #1
			continue;
    ccc0:	2401      	movs	r4, #1
    ccc2:	e7f5      	b.n	ccb0 <bt_mesh_subnets_get+0xc>
		if (count >= max) {
    ccc4:	428b      	cmp	r3, r1
    ccc6:	d203      	bcs.n	ccd0 <bt_mesh_subnets_get+0x2c>
		net_idxs[count++] = sub->net_idx;
    ccc8:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
    cccc:	3301      	adds	r3, #1
    ccce:	e7f7      	b.n	ccc0 <bt_mesh_subnets_get+0x1c>
			return -ENOMEM;
    ccd0:	f06f 000b 	mvn.w	r0, #11
    ccd4:	e7ef      	b.n	ccb6 <bt_mesh_subnets_get+0x12>
    ccd6:	bf00      	nop
    ccd8:	200006a8 	.word	0x200006a8

0000ccdc <bt_mesh_subnet_set>:

int bt_mesh_subnet_set(uint16_t net_idx, uint8_t kr_phase,
		       const uint8_t old_key[16], const uint8_t new_key[16])
{
    ccdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (subnets[i].net_idx == net_idx) {
    ccde:	4d16      	ldr	r5, [pc, #88]	; (cd38 <bt_mesh_subnet_set+0x5c>)
{
    cce0:	461c      	mov	r4, r3
		if (subnets[i].net_idx == net_idx) {
    cce2:	8bab      	ldrh	r3, [r5, #28]
    cce4:	4298      	cmp	r0, r3
{
    cce6:	4606      	mov	r6, r0
    cce8:	460f      	mov	r7, r1
		if (subnets[i].net_idx == net_idx) {
    ccea:	d01f      	beq.n	cd2c <bt_mesh_subnet_set+0x50>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    ccec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ccf0:	428b      	cmp	r3, r1
    ccf2:	d11e      	bne.n	cd32 <bt_mesh_subnet_set+0x56>
	if (sub->net_idx == net_idx) {
		return -EALREADY;
	}

	for (int i = 0; i < ARRAY_SIZE(keys); i++) {
		if (!keys[i]) {
    ccf4:	b94a      	cbnz	r2, cd0a <bt_mesh_subnet_set+0x2e>
    ccf6:	b994      	cbnz	r4, cd1e <bt_mesh_subnet_set+0x42>

	sub->net_idx = net_idx;
	sub->kr_phase = kr_phase;

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    ccf8:	2400      	movs	r4, #0
	} else {
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
	}

	/* Make sure we have valid beacon data to be sent */
	bt_mesh_beacon_update(sub);
    ccfa:	480f      	ldr	r0, [pc, #60]	; (cd38 <bt_mesh_subnet_set+0x5c>)
	sub->net_idx = net_idx;
    ccfc:	83ae      	strh	r6, [r5, #28]
	sub->kr_phase = kr_phase;
    ccfe:	77af      	strb	r7, [r5, #30]
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    cd00:	77ec      	strb	r4, [r5, #31]
	bt_mesh_beacon_update(sub);
    cd02:	f7fe fe8d 	bl	ba20 <bt_mesh_beacon_update>

	return 0;
    cd06:	4620      	mov	r0, r4
    cd08:	e008      	b.n	cd1c <bt_mesh_subnet_set+0x40>
		if (net_keys_create(&sub->keys[i], keys[i])) {
    cd0a:	4611      	mov	r1, r2
    cd0c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    cd10:	f7ff fe9a 	bl	ca48 <net_keys_create>
    cd14:	2800      	cmp	r0, #0
    cd16:	d0ee      	beq.n	ccf6 <bt_mesh_subnet_set+0x1a>
			return -EIO;
    cd18:	f06f 0004 	mvn.w	r0, #4
}
    cd1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (net_keys_create(&sub->keys[i], keys[i])) {
    cd1e:	4621      	mov	r1, r4
    cd20:	4806      	ldr	r0, [pc, #24]	; (cd3c <bt_mesh_subnet_set+0x60>)
    cd22:	f7ff fe91 	bl	ca48 <net_keys_create>
    cd26:	2800      	cmp	r0, #0
    cd28:	d0e6      	beq.n	ccf8 <bt_mesh_subnet_set+0x1c>
    cd2a:	e7f5      	b.n	cd18 <bt_mesh_subnet_set+0x3c>
		return -EALREADY;
    cd2c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    cd30:	e7f4      	b.n	cd1c <bt_mesh_subnet_set+0x40>
		return -ENOMEM;
    cd32:	f06f 000b 	mvn.w	r0, #11
    cd36:	e7f1      	b.n	cd1c <bt_mesh_subnet_set+0x40>
    cd38:	200006a8 	.word	0x200006a8
    cd3c:	2000072e 	.word	0x2000072e

0000cd40 <net_key_set>:
	return false;
}

static int net_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    cd40:	b570      	push	{r4, r5, r6, lr}
    cd42:	4614      	mov	r4, r2
    cd44:	b08a      	sub	sp, #40	; 0x28
    cd46:	461e      	mov	r6, r3
	struct net_key_val key;
	int err;
	uint16_t net_idx;

	if (!name) {
    cd48:	b940      	cbnz	r0, cd5c <net_key_set+0x1c>
		BT_ERR("Insufficient number of arguments");
    cd4a:	2145      	movs	r1, #69	; 0x45
    cd4c:	4814      	ldr	r0, [pc, #80]	; (cda0 <net_key_set+0x60>)
    cd4e:	f015 f8bc 	bl	21eca <printk>
    cd52:	f06f 0401 	mvn.w	r4, #1
	BT_DBG("NetKeyIndex 0x%03x recovered from storage", net_idx);

	return bt_mesh_subnet_set(
		net_idx, key.kr_phase, key.val[0],
		(key.kr_phase != BT_MESH_KR_NORMAL) ? key.val[1] : NULL);
}
    cd56:	4620      	mov	r0, r4
    cd58:	b00a      	add	sp, #40	; 0x28
    cd5a:	bd70      	pop	{r4, r5, r6, pc}
	net_idx = strtol(name, NULL, 16);
    cd5c:	2210      	movs	r2, #16
    cd5e:	2100      	movs	r1, #0
    cd60:	f017 f923 	bl	23faa <strtol>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    cd64:	2321      	movs	r3, #33	; 0x21
	net_idx = strtol(name, NULL, 16);
    cd66:	b285      	uxth	r5, r0
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    cd68:	aa01      	add	r2, sp, #4
    cd6a:	4620      	mov	r0, r4
    cd6c:	4631      	mov	r1, r6
    cd6e:	f005 f909 	bl	11f84 <bt_mesh_settings_set>
	if (err) {
    cd72:	4604      	mov	r4, r0
    cd74:	b120      	cbz	r0, cd80 <net_key_set+0x40>
		BT_ERR("Failed to set \'net-key\'");
    cd76:	2145      	movs	r1, #69	; 0x45
    cd78:	480a      	ldr	r0, [pc, #40]	; (cda4 <net_key_set+0x64>)
    cd7a:	f015 f8a6 	bl	21eca <printk>
		return err;
    cd7e:	e7ea      	b.n	cd56 <net_key_set+0x16>
		net_idx, key.kr_phase, key.val[0],
    cd80:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return bt_mesh_subnet_set(
    cd84:	0859      	lsrs	r1, r3, #1
    cd86:	f013 03fe 	ands.w	r3, r3, #254	; 0xfe
    cd8a:	bf18      	it	ne
    cd8c:	f10d 0315 	addne.w	r3, sp, #21
    cd90:	f10d 0205 	add.w	r2, sp, #5
    cd94:	4628      	mov	r0, r5
    cd96:	f7ff ffa1 	bl	ccdc <bt_mesh_subnet_set>
    cd9a:	4604      	mov	r4, r0
    cd9c:	e7db      	b.n	cd56 <net_key_set+0x16>
    cd9e:	bf00      	nop
    cda0:	0002ac40 	.word	0x0002ac40
    cda4:	0002c517 	.word	0x0002c517

0000cda8 <bt_mesh_subnet_find>:
{
    cda8:	4603      	mov	r3, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    cdaa:	4807      	ldr	r0, [pc, #28]	; (cdc8 <bt_mesh_subnet_find+0x20>)
{
    cdac:	b510      	push	{r4, lr}
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    cdae:	8b84      	ldrh	r4, [r0, #28]
    cdb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cdb4:	4294      	cmp	r4, r2
    cdb6:	d005      	beq.n	cdc4 <bt_mesh_subnet_find+0x1c>
		if (!cb || cb(&subnets[i], cb_data)) {
    cdb8:	b90b      	cbnz	r3, cdbe <bt_mesh_subnet_find+0x16>
			return &subnets[i];
    cdba:	4803      	ldr	r0, [pc, #12]	; (cdc8 <bt_mesh_subnet_find+0x20>)
}
    cdbc:	bd10      	pop	{r4, pc}
		if (!cb || cb(&subnets[i], cb_data)) {
    cdbe:	4798      	blx	r3
    cdc0:	2800      	cmp	r0, #0
    cdc2:	d1fa      	bne.n	cdba <bt_mesh_subnet_find+0x12>
	return NULL;
    cdc4:	2000      	movs	r0, #0
    cdc6:	e7f9      	b.n	cdbc <bt_mesh_subnet_find+0x14>
    cdc8:	200006a8 	.word	0x200006a8

0000cdcc <bt_mesh_subnet_foreach>:
{
    cdcc:	b508      	push	{r3, lr}
    cdce:	4603      	mov	r3, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    cdd0:	4805      	ldr	r0, [pc, #20]	; (cde8 <bt_mesh_subnet_foreach+0x1c>)
    cdd2:	8b81      	ldrh	r1, [r0, #28]
    cdd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cdd8:	4291      	cmp	r1, r2
    cdda:	d002      	beq.n	cde2 <bt_mesh_subnet_foreach+0x16>
		cb(&subnets[i]);
    cddc:	4798      	blx	r3
		count++;
    cdde:	2001      	movs	r0, #1
}
    cde0:	bd08      	pop	{r3, pc}
    cde2:	2000      	movs	r0, #0
	return count;
    cde4:	e7fc      	b.n	cde0 <bt_mesh_subnet_foreach+0x14>
    cde6:	bf00      	nop
    cde8:	200006a8 	.word	0x200006a8

0000cdec <bt_mesh_subnet_next>:
	if (sub) {
    cdec:	b178      	cbz	r0, ce0e <bt_mesh_subnet_next+0x22>
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
    cdee:	4a09      	ldr	r2, [pc, #36]	; (ce14 <bt_mesh_subnet_next+0x28>)
		sub++;
    cdf0:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
		sub = &subnets[0];
    cdf4:	f1a2 01e0 	sub.w	r1, r2, #224	; 0xe0
    cdf8:	4293      	cmp	r3, r2
    cdfa:	bf08      	it	eq
    cdfc:	460b      	moveq	r3, r1
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    cdfe:	8b98      	ldrh	r0, [r3, #28]
}
    ce00:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ce04:	4290      	cmp	r0, r2
    ce06:	bf14      	ite	ne
    ce08:	4618      	movne	r0, r3
    ce0a:	2000      	moveq	r0, #0
    ce0c:	4770      	bx	lr
		sub = &subnets[0];
    ce0e:	4b02      	ldr	r3, [pc, #8]	; (ce18 <bt_mesh_subnet_next+0x2c>)
    ce10:	e7f5      	b.n	cdfe <bt_mesh_subnet_next+0x12>
    ce12:	bf00      	nop
    ce14:	20000788 	.word	0x20000788
    ce18:	200006a8 	.word	0x200006a8

0000ce1c <bt_mesh_net_keys_reset>:
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    ce1c:	4804      	ldr	r0, [pc, #16]	; (ce30 <bt_mesh_net_keys_reset+0x14>)
    ce1e:	8b82      	ldrh	r2, [r0, #28]
    ce20:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ce24:	429a      	cmp	r2, r3
    ce26:	d001      	beq.n	ce2c <bt_mesh_net_keys_reset+0x10>
			subnet_del(sub);
    ce28:	f018 bddd 	b.w	259e6 <subnet_del>
}
    ce2c:	4770      	bx	lr
    ce2e:	bf00      	nop
    ce30:	200006a8 	.word	0x200006a8

0000ce34 <bt_mesh_net_cred_find>:
{
    ce34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce38:	461d      	mov	r5, r3
		if (!frnd->subnet) {
    ce3a:	4b34      	ldr	r3, [pc, #208]	; (cf0c <bt_mesh_net_cred_find+0xd8>)
    ce3c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
{
    ce40:	4604      	mov	r4, r0
    ce42:	460e      	mov	r6, r1
    ce44:	4617      	mov	r7, r2
    ce46:	4698      	mov	r8, r3
		if (!frnd->subnet) {
    ce48:	f1bc 0f00 	cmp.w	ip, #0
    ce4c:	d013      	beq.n	ce76 <bt_mesh_net_cred_find+0x42>
		rx->sub = frnd->subnet;
    ce4e:	f8c0 c000 	str.w	ip, [r0]
			if (!rx->sub->keys[j].valid) {
    ce52:	f89c c02c 	ldrb.w	ip, [ip, #44]	; 0x2c
    ce56:	f1bc 0f00 	cmp.w	ip, #0
    ce5a:	d002      	beq.n	ce62 <bt_mesh_net_cred_find+0x2e>
			if (cb(rx, in, out, &frnd->cred[j])) {
    ce5c:	3334      	adds	r3, #52	; 0x34
    ce5e:	47a8      	blx	r5
    ce60:	bb68      	cbnz	r0, cebe <bt_mesh_net_cred_find+0x8a>
			if (!rx->sub->keys[j].valid) {
    ce62:	6823      	ldr	r3, [r4, #0]
    ce64:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
    ce68:	b12b      	cbz	r3, ce76 <bt_mesh_net_cred_find+0x42>
			if (cb(rx, in, out, &frnd->cred[j])) {
    ce6a:	4b29      	ldr	r3, [pc, #164]	; (cf10 <bt_mesh_net_cred_find+0xdc>)
    ce6c:	463a      	mov	r2, r7
    ce6e:	4631      	mov	r1, r6
    ce70:	4620      	mov	r0, r4
    ce72:	47a8      	blx	r5
    ce74:	b9b0      	cbnz	r0, cea4 <bt_mesh_net_cred_find+0x70>
		if (!frnd->subnet) {
    ce76:	f8d8 3118 	ldr.w	r3, [r8, #280]	; 0x118
    ce7a:	b313      	cbz	r3, cec2 <bt_mesh_net_cred_find+0x8e>
		rx->sub = frnd->subnet;
    ce7c:	6023      	str	r3, [r4, #0]
			if (!rx->sub->keys[j].valid) {
    ce7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    ce82:	b12b      	cbz	r3, ce90 <bt_mesh_net_cred_find+0x5c>
			if (cb(rx, in, out, &frnd->cred[j])) {
    ce84:	4b23      	ldr	r3, [pc, #140]	; (cf14 <bt_mesh_net_cred_find+0xe0>)
    ce86:	463a      	mov	r2, r7
    ce88:	4631      	mov	r1, r6
    ce8a:	4620      	mov	r0, r4
    ce8c:	47a8      	blx	r5
    ce8e:	b9b0      	cbnz	r0, cebe <bt_mesh_net_cred_find+0x8a>
			if (!rx->sub->keys[j].valid) {
    ce90:	6823      	ldr	r3, [r4, #0]
    ce92:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
    ce96:	b1a3      	cbz	r3, cec2 <bt_mesh_net_cred_find+0x8e>
			if (cb(rx, in, out, &frnd->cred[j])) {
    ce98:	4b1f      	ldr	r3, [pc, #124]	; (cf18 <bt_mesh_net_cred_find+0xe4>)
    ce9a:	463a      	mov	r2, r7
    ce9c:	4631      	mov	r1, r6
    ce9e:	4620      	mov	r0, r4
    cea0:	47a8      	blx	r5
    cea2:	b170      	cbz	r0, cec2 <bt_mesh_net_cred_find+0x8e>
		for (j = 0; j < ARRAY_SIZE(frnd->cred); j++) {
    cea4:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
    cea6:	7d23      	ldrb	r3, [r4, #20]
    cea8:	f362 0341 	bfi	r3, r2, #1, #1
				rx->friend_cred = 1U;
    ceac:	f043 0304 	orr.w	r3, r3, #4
				rx->friend_cred = 0U;
    ceb0:	7523      	strb	r3, [r4, #20]
				rx->ctx.net_idx = rx->sub->net_idx;
    ceb2:	6823      	ldr	r3, [r4, #0]
    ceb4:	8b9b      	ldrh	r3, [r3, #28]
    ceb6:	80a3      	strh	r3, [r4, #4]
				return true;
    ceb8:	2001      	movs	r0, #1
}
    ceba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (j = 0; j < ARRAY_SIZE(frnd->cred); j++) {
    cebe:	2200      	movs	r2, #0
    cec0:	e7f1      	b.n	cea6 <bt_mesh_net_cred_find+0x72>
		rx->sub = &subnets[i];
    cec2:	4b16      	ldr	r3, [pc, #88]	; (cf1c <bt_mesh_net_cred_find+0xe8>)
    cec4:	6023      	str	r3, [r4, #0]
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    cec6:	8b99      	ldrh	r1, [r3, #28]
    cec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cecc:	4291      	cmp	r1, r2
    cece:	d01b      	beq.n	cf08 <bt_mesh_net_cred_find+0xd4>
			if (!rx->sub->keys[j].valid) {
    ced0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    ced4:	b12a      	cbz	r2, cee2 <bt_mesh_net_cred_find+0xae>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    ced6:	333d      	adds	r3, #61	; 0x3d
    ced8:	463a      	mov	r2, r7
    ceda:	4631      	mov	r1, r6
    cedc:	4620      	mov	r0, r4
    cede:	47a8      	blx	r5
    cee0:	b980      	cbnz	r0, cf04 <bt_mesh_net_cred_find+0xd0>
			if (!rx->sub->keys[j].valid) {
    cee2:	6823      	ldr	r3, [r4, #0]
    cee4:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    cee8:	b172      	cbz	r2, cf08 <bt_mesh_net_cred_find+0xd4>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    ceea:	3397      	adds	r3, #151	; 0x97
    ceec:	463a      	mov	r2, r7
    ceee:	4631      	mov	r1, r6
    cef0:	4620      	mov	r0, r4
    cef2:	47a8      	blx	r5
    cef4:	b140      	cbz	r0, cf08 <bt_mesh_net_cred_find+0xd4>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    cef6:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
    cef8:	7d23      	ldrb	r3, [r4, #20]
    cefa:	f362 0341 	bfi	r3, r2, #1, #1
				rx->friend_cred = 0U;
    cefe:	f36f 0382 	bfc	r3, #2, #1
    cf02:	e7d5      	b.n	ceb0 <bt_mesh_net_cred_find+0x7c>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    cf04:	2200      	movs	r2, #0
    cf06:	e7f7      	b.n	cef8 <bt_mesh_net_cred_find+0xc4>
	return false;
    cf08:	2000      	movs	r0, #0
    cf0a:	e7d6      	b.n	ceba <bt_mesh_net_cred_find+0x86>
    cf0c:	20001ab8 	.word	0x20001ab8
    cf10:	20001b0d 	.word	0x20001b0d
    cf14:	20001bd4 	.word	0x20001bd4
    cf18:	20001bf5 	.word	0x20001bf5
    cf1c:	200006a8 	.word	0x200006a8

0000cf20 <bt_mesh_subnet_pending_store>:

BT_MESH_SETTINGS_DEFINE(subnet, "NetKey", net_key_set);

void bt_mesh_subnet_pending_store(void)
{
    cf20:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(net_key_updates); i++) {
		struct net_key_update *update = &net_key_updates[i];

		if (!update->valid) {
    cf22:	4c09      	ldr	r4, [pc, #36]	; (cf48 <bt_mesh_subnet_pending_store+0x28>)
    cf24:	7863      	ldrb	r3, [r4, #1]
    cf26:	06da      	lsls	r2, r3, #27
    cf28:	d50a      	bpl.n	cf40 <bt_mesh_subnet_pending_store+0x20>
			continue;
		}

		if (update->clear) {
    cf2a:	8820      	ldrh	r0, [r4, #0]
    cf2c:	069b      	lsls	r3, r3, #26
    cf2e:	f3c0 000b 	ubfx	r0, r0, #0, #12
    cf32:	d506      	bpl.n	cf42 <bt_mesh_subnet_pending_store+0x22>
			clear_net_key(update->key_idx);
    cf34:	f7ff fd4a 	bl	c9cc <clear_net_key>
		} else {
			store_subnet(update->key_idx);
		}

		update->valid = 0U;
    cf38:	7863      	ldrb	r3, [r4, #1]
    cf3a:	f36f 1304 	bfc	r3, #4, #1
    cf3e:	7063      	strb	r3, [r4, #1]
	}
}
    cf40:	bd10      	pop	{r4, pc}
			store_subnet(update->key_idx);
    cf42:	f7ff fddd 	bl	cb00 <store_subnet>
    cf46:	e7f7      	b.n	cf38 <bt_mesh_subnet_pending_store+0x18>
    cf48:	2000438c 	.word	0x2000438c

0000cf4c <clear_app_key>:

	return NULL;
}

static void clear_app_key(uint16_t app_idx)
{
    cf4c:	b510      	push	{r4, lr}
    cf4e:	b086      	sub	sp, #24
	char path[20];
	int err;

	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    cf50:	4603      	mov	r3, r0
{
    cf52:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    cf54:	4a07      	ldr	r2, [pc, #28]	; (cf74 <clear_app_key+0x28>)
    cf56:	2114      	movs	r1, #20
    cf58:	a801      	add	r0, sp, #4
    cf5a:	f014 ffc3 	bl	21ee4 <snprintk>
	err = settings_delete(path);
    cf5e:	a801      	add	r0, sp, #4
    cf60:	f015 fdf0 	bl	22b44 <settings_delete>
	if (err) {
    cf64:	b120      	cbz	r0, cf70 <clear_app_key+0x24>
		BT_ERR("Failed to clear AppKeyIndex 0x%03x", app_idx);
    cf66:	4622      	mov	r2, r4
    cf68:	2145      	movs	r1, #69	; 0x45
    cf6a:	4803      	ldr	r0, [pc, #12]	; (cf78 <clear_app_key+0x2c>)
    cf6c:	f014 ffad 	bl	21eca <printk>
	} else {
		BT_DBG("Cleared AppKeyIndex 0x%03x", app_idx);
	}
}
    cf70:	b006      	add	sp, #24
    cf72:	bd10      	pop	{r4, pc}
    cf74:	0002c70c 	.word	0x0002c70c
    cf78:	0002c71e 	.word	0x0002c71e

0000cf7c <app_key_evt>:

	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
}

static void app_key_evt(struct app_key *app, enum bt_mesh_key_evt evt)
{
    cf7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    cf80:	4e0d      	ldr	r6, [pc, #52]	; (cfb8 <app_key_evt+0x3c>)
    cf82:	4c0e      	ldr	r4, [pc, #56]	; (cfbc <app_key_evt+0x40>)
    cf84:	4f0e      	ldr	r7, [pc, #56]	; (cfc0 <app_key_evt+0x44>)
{
    cf86:	4605      	mov	r5, r0
    cf88:	4689      	mov	r9, r1
    cf8a:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    cf8c:	42b4      	cmp	r4, r6
    cf8e:	d908      	bls.n	cfa2 <app_key_evt+0x26>
    cf90:	4639      	mov	r1, r7
    cf92:	480c      	ldr	r0, [pc, #48]	; (cfc4 <app_key_evt+0x48>)
    cf94:	22b2      	movs	r2, #178	; 0xb2
    cf96:	f014 ff98 	bl	21eca <printk>
    cf9a:	21b2      	movs	r1, #178	; 0xb2
    cf9c:	4638      	mov	r0, r7
    cf9e:	f015 fa46 	bl	2242e <assert_post_action>
    cfa2:	4544      	cmp	r4, r8
    cfa4:	d301      	bcc.n	cfaa <app_key_evt+0x2e>
		cb->evt_handler(app->app_idx, app->net_idx, evt);
	}
}
    cfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cb->evt_handler(app->app_idx, app->net_idx, evt);
    cfaa:	f854 3b04 	ldr.w	r3, [r4], #4
    cfae:	8829      	ldrh	r1, [r5, #0]
    cfb0:	8868      	ldrh	r0, [r5, #2]
    cfb2:	464a      	mov	r2, r9
    cfb4:	4798      	blx	r3
    cfb6:	e7e9      	b.n	cf8c <app_key_evt+0x10>
    cfb8:	00028bd0 	.word	0x00028bd0
    cfbc:	00028bcc 	.word	0x00028bcc
    cfc0:	0002c66b 	.word	0x0002c66b
    cfc4:	0002a026 	.word	0x0002a026

0000cfc8 <store_app_key>:
{
    cfc8:	b530      	push	{r4, r5, lr}
		if (apps[i].app_idx == app_idx) {
    cfca:	4c18      	ldr	r4, [pc, #96]	; (d02c <store_app_key+0x64>)
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    cfcc:	4a18      	ldr	r2, [pc, #96]	; (d030 <store_app_key+0x68>)
{
    cfce:	b08f      	sub	sp, #60	; 0x3c
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    cfd0:	4603      	mov	r3, r0
{
    cfd2:	4605      	mov	r5, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    cfd4:	2114      	movs	r1, #20
    cfd6:	4668      	mov	r0, sp
    cfd8:	f014 ff84 	bl	21ee4 <snprintk>
		if (apps[i].app_idx == app_idx) {
    cfdc:	8863      	ldrh	r3, [r4, #2]
    cfde:	42ab      	cmp	r3, r5
    cfe0:	d006      	beq.n	cff0 <store_app_key+0x28>
		BT_WARN("ApKeyIndex 0x%03x not found", app_idx);
    cfe2:	4814      	ldr	r0, [pc, #80]	; (d034 <store_app_key+0x6c>)
    cfe4:	462a      	mov	r2, r5
    cfe6:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
    cfe8:	f014 ff6f 	bl	21eca <printk>
}
    cfec:	b00f      	add	sp, #60	; 0x3c
    cfee:	bd30      	pop	{r4, r5, pc}
	key.net_idx = app->net_idx,
    cff0:	8823      	ldrh	r3, [r4, #0]
    cff2:	f8ad 3014 	strh.w	r3, [sp, #20]
	memcpy(key.val[0], app->keys[0].val, 16);
    cff6:	2210      	movs	r2, #16
	key.updated = app->updated,
    cff8:	7923      	ldrb	r3, [r4, #4]
    cffa:	f88d 3016 	strb.w	r3, [sp, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
    cffe:	1da1      	adds	r1, r4, #6
    d000:	f10d 0017 	add.w	r0, sp, #23
    d004:	f017 f8a3 	bl	2414e <memcpy>
	memcpy(key.val[1], app->keys[1].val, 16);
    d008:	2210      	movs	r2, #16
    d00a:	f104 0117 	add.w	r1, r4, #23
    d00e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    d012:	f017 f89c 	bl	2414e <memcpy>
	err = settings_save_one(path, &key, sizeof(key));
    d016:	2223      	movs	r2, #35	; 0x23
    d018:	a905      	add	r1, sp, #20
    d01a:	4668      	mov	r0, sp
    d01c:	f7f6 f950 	bl	32c0 <settings_save_one>
	if (err) {
    d020:	2800      	cmp	r0, #0
    d022:	d0e3      	beq.n	cfec <store_app_key+0x24>
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
    d024:	466a      	mov	r2, sp
    d026:	2145      	movs	r1, #69	; 0x45
    d028:	4803      	ldr	r0, [pc, #12]	; (d038 <store_app_key+0x70>)
    d02a:	e7dd      	b.n	cfe8 <store_app_key+0x20>
    d02c:	20000d78 	.word	0x20000d78
    d030:	0002c70c 	.word	0x0002c70c
    d034:	0002c746 	.word	0x0002c746
    d038:	0002c767 	.word	0x0002c767

0000d03c <update_app_key_settings>:
		if (update->key_idx == key_idx) {
    d03c:	4a11      	ldr	r2, [pc, #68]	; (d084 <update_app_key_settings+0x48>)
		if (!update->valid) {
    d03e:	7853      	ldrb	r3, [r2, #1]
{
    d040:	b470      	push	{r4, r5, r6}
		if (update->key_idx == key_idx) {
    d042:	8814      	ldrh	r4, [r2, #0]
		if (!update->valid) {
    d044:	f013 0f10 	tst.w	r3, #16
	uint8_t clear = store ? 0U : 1U;
    d048:	f081 0501 	eor.w	r5, r1, #1
		if (update->key_idx == key_idx) {
    d04c:	f3c4 040b 	ubfx	r4, r4, #0, #12
		if (!update->valid) {
    d050:	d10f      	bne.n	d072 <update_app_key_settings+0x36>
	free_slot->valid = 1U;
    d052:	f043 0310 	orr.w	r3, r3, #16
    d056:	7053      	strb	r3, [r2, #1]
	free_slot->key_idx = app_idx;
    d058:	8813      	ldrh	r3, [r2, #0]
    d05a:	f360 030b 	bfi	r3, r0, #0, #12
    d05e:	8013      	strh	r3, [r2, #0]
	free_slot->clear = clear;
    d060:	f3c3 2307 	ubfx	r3, r3, #8, #8
		update->clear = clear;
    d064:	f365 1345 	bfi	r3, r5, #5, #1
    d068:	7053      	strb	r3, [r2, #1]
		bt_mesh_settings_store_schedule(
    d06a:	2002      	movs	r0, #2
}
    d06c:	bc70      	pop	{r4, r5, r6}
		bt_mesh_settings_store_schedule(
    d06e:	f004 bfab 	b.w	11fc8 <bt_mesh_settings_store_schedule>
		if (update->key_idx == key_idx) {
    d072:	4284      	cmp	r4, r0
    d074:	d0f6      	beq.n	d064 <update_app_key_settings+0x28>
		if (store) {
    d076:	b111      	cbz	r1, d07e <update_app_key_settings+0x42>
}
    d078:	bc70      	pop	{r4, r5, r6}
			store_app_key(app_idx);
    d07a:	f7ff bfa5 	b.w	cfc8 <store_app_key>
}
    d07e:	bc70      	pop	{r4, r5, r6}
			clear_app_key(app_idx);
    d080:	f7ff bf64 	b.w	cf4c <clear_app_key>
    d084:	2000438e 	.word	0x2000438e

0000d088 <subnet_evt>:
	return BT_MESH_KEY_UNUSED;
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    d088:	f011 0ffd 	tst.w	r1, #253	; 0xfd
{
    d08c:	b538      	push	{r3, r4, r5, lr}
    d08e:	460d      	mov	r5, r1
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    d090:	d031      	beq.n	d0f6 <subnet_evt+0x6e>
	}

	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		struct app_key *app = &apps[i];

		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    d092:	4c19      	ldr	r4, [pc, #100]	; (d0f8 <subnet_evt+0x70>)
    d094:	8862      	ldrh	r2, [r4, #2]
    d096:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d09a:	429a      	cmp	r2, r3
    d09c:	d02b      	beq.n	d0f6 <subnet_evt+0x6e>
			continue;
		}

		if (app->net_idx != sub->net_idx) {
    d09e:	8822      	ldrh	r2, [r4, #0]
    d0a0:	8b83      	ldrh	r3, [r0, #28]
    d0a2:	429a      	cmp	r2, r3
    d0a4:	d127      	bne.n	d0f6 <subnet_evt+0x6e>
			continue;
		}

		if (evt == BT_MESH_KEY_DELETED) {
    d0a6:	2d01      	cmp	r5, #1
    d0a8:	d104      	bne.n	d0b4 <subnet_evt+0x2c>
			app_key_del(app);
    d0aa:	4620      	mov	r0, r4
			app_key_revoke(app);
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
		}
	}
}
    d0ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			app_key_del(app);
    d0b0:	f018 bd7d 	b.w	25bae <app_key_del>
		} else if (evt == BT_MESH_KEY_REVOKED) {
    d0b4:	2d04      	cmp	r5, #4
    d0b6:	d119      	bne.n	d0ec <subnet_evt+0x64>
	if (!app->updated) {
    d0b8:	7923      	ldrb	r3, [r4, #4]
    d0ba:	b1e3      	cbz	r3, d0f6 <subnet_evt+0x6e>
	memcpy(&app->keys[0], &app->keys[1], sizeof(app->keys[0]));
    d0bc:	2211      	movs	r2, #17
    d0be:	f104 0116 	add.w	r1, r4, #22
    d0c2:	1d60      	adds	r0, r4, #5
    d0c4:	f017 f843 	bl	2414e <memcpy>
	memset(&app->keys[1], 0, sizeof(app->keys[1]));
    d0c8:	2211      	movs	r2, #17
    d0ca:	2100      	movs	r1, #0
    d0cc:	f104 0016 	add.w	r0, r4, #22
    d0d0:	f017 f867 	bl	241a2 <memset>
	app->updated = false;
    d0d4:	2300      	movs	r3, #0
		update_app_key_settings(app->app_idx, true);
    d0d6:	2101      	movs	r1, #1
    d0d8:	8860      	ldrh	r0, [r4, #2]
	app->updated = false;
    d0da:	7123      	strb	r3, [r4, #4]
		update_app_key_settings(app->app_idx, true);
    d0dc:	f7ff ffae 	bl	d03c <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_REVOKED);
    d0e0:	4629      	mov	r1, r5
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
    d0e2:	4620      	mov	r0, r4
}
    d0e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
    d0e8:	f7ff bf48 	b.w	cf7c <app_key_evt>
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
    d0ec:	2d03      	cmp	r5, #3
    d0ee:	d102      	bne.n	d0f6 <subnet_evt+0x6e>
    d0f0:	7923      	ldrb	r3, [r4, #4]
    d0f2:	2b00      	cmp	r3, #0
    d0f4:	d1f5      	bne.n	d0e2 <subnet_evt+0x5a>
}
    d0f6:	bd38      	pop	{r3, r4, r5, pc}
    d0f8:	20000d78 	.word	0x20000d78

0000d0fc <bt_mesh_app_key_add>:
{
    d0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d100:	4680      	mov	r8, r0
	if (!bt_mesh_subnet_get(net_idx)) {
    d102:	4608      	mov	r0, r1
{
    d104:	460f      	mov	r7, r1
    d106:	4616      	mov	r6, r2
	if (!bt_mesh_subnet_get(net_idx)) {
    d108:	f018 fd4f 	bl	25baa <bt_mesh_subnet_get>
    d10c:	b380      	cbz	r0, d170 <bt_mesh_app_key_add+0x74>
		if (apps[i].app_idx == app_idx) {
    d10e:	4d1b      	ldr	r5, [pc, #108]	; (d17c <bt_mesh_app_key_add+0x80>)
    d110:	886b      	ldrh	r3, [r5, #2]
    d112:	4598      	cmp	r8, r3
    d114:	d00b      	beq.n	d12e <bt_mesh_app_key_add+0x32>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    d116:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d11a:	4293      	cmp	r3, r2
    d11c:	d12a      	bne.n	d174 <bt_mesh_app_key_add+0x78>
			const uint8_t net_id[16], uint32_t iv_index,
			uint8_t auth[8]);

static inline int bt_mesh_app_id(const uint8_t app_key[16], uint8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
    d11e:	1d69      	adds	r1, r5, #5
    d120:	4630      	mov	r0, r6
    d122:	f002 f83f 	bl	f1a4 <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[0].id)) {
    d126:	4604      	mov	r4, r0
    d128:	b178      	cbz	r0, d14a <bt_mesh_app_key_add+0x4e>
		return STATUS_CANNOT_SET;
    d12a:	200f      	movs	r0, #15
    d12c:	e00b      	b.n	d146 <bt_mesh_app_key_add+0x4a>
		if (app->net_idx != net_idx) {
    d12e:	882b      	ldrh	r3, [r5, #0]
    d130:	42bb      	cmp	r3, r7
    d132:	d121      	bne.n	d178 <bt_mesh_app_key_add+0x7c>
		if (memcmp(key, app->keys[0].val, 16)) {
    d134:	2210      	movs	r2, #16
    d136:	1da9      	adds	r1, r5, #6
    d138:	4630      	mov	r0, r6
    d13a:	f016 ffe1 	bl	24100 <memcmp>
		return STATUS_SUCCESS;
    d13e:	2800      	cmp	r0, #0
    d140:	bf14      	ite	ne
    d142:	2006      	movne	r0, #6
    d144:	2000      	moveq	r0, #0
}
    d146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(app->keys[0].val, key, 16);
    d14a:	2210      	movs	r2, #16
	app->updated = false;
    d14c:	7128      	strb	r0, [r5, #4]
	memcpy(app->keys[0].val, key, 16);
    d14e:	4631      	mov	r1, r6
    d150:	1da8      	adds	r0, r5, #6
	app->net_idx = net_idx;
    d152:	802f      	strh	r7, [r5, #0]
	app->app_idx = app_idx;
    d154:	f8a5 8002 	strh.w	r8, [r5, #2]
	memcpy(app->keys[0].val, key, 16);
    d158:	f016 fff9 	bl	2414e <memcpy>
		update_app_key_settings(app->app_idx, true);
    d15c:	2101      	movs	r1, #1
    d15e:	8868      	ldrh	r0, [r5, #2]
    d160:	f7ff ff6c 	bl	d03c <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_ADDED);
    d164:	4628      	mov	r0, r5
    d166:	4621      	mov	r1, r4
    d168:	f7ff ff08 	bl	cf7c <app_key_evt>
	return STATUS_SUCCESS;
    d16c:	4620      	mov	r0, r4
    d16e:	e7ea      	b.n	d146 <bt_mesh_app_key_add+0x4a>
		return STATUS_INVALID_NETKEY;
    d170:	2004      	movs	r0, #4
    d172:	e7e8      	b.n	d146 <bt_mesh_app_key_add+0x4a>
		return STATUS_INSUFF_RESOURCES;
    d174:	2005      	movs	r0, #5
    d176:	e7e6      	b.n	d146 <bt_mesh_app_key_add+0x4a>
			return STATUS_INVALID_BINDING;
    d178:	2011      	movs	r0, #17
    d17a:	e7e4      	b.n	d146 <bt_mesh_app_key_add+0x4a>
    d17c:	20000d78 	.word	0x20000d78

0000d180 <bt_mesh_app_key_update>:
{
    d180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (apps[i].app_idx == app_idx) {
    d182:	4b1f      	ldr	r3, [pc, #124]	; (d200 <bt_mesh_app_key_update+0x80>)
{
    d184:	4617      	mov	r7, r2
		if (apps[i].app_idx == app_idx) {
    d186:	885a      	ldrh	r2, [r3, #2]
    d188:	4282      	cmp	r2, r0
    d18a:	461d      	mov	r5, r3
    d18c:	d131      	bne.n	d1f2 <bt_mesh_app_key_update+0x72>
	if (net_idx != BT_MESH_KEY_UNUSED && app->net_idx != net_idx) {
    d18e:	8818      	ldrh	r0, [r3, #0]
    d190:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d194:	4299      	cmp	r1, r3
    d196:	d001      	beq.n	d19c <bt_mesh_app_key_update+0x1c>
    d198:	4288      	cmp	r0, r1
    d19a:	d12c      	bne.n	d1f6 <bt_mesh_app_key_update+0x76>
	sub = bt_mesh_subnet_get(app->net_idx);
    d19c:	f018 fd05 	bl	25baa <bt_mesh_subnet_get>
	if (!sub) {
    d1a0:	b358      	cbz	r0, d1fa <bt_mesh_app_key_update+0x7a>
	if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
    d1a2:	7f86      	ldrb	r6, [r0, #30]
    d1a4:	2e01      	cmp	r6, #1
    d1a6:	d001      	beq.n	d1ac <bt_mesh_app_key_update+0x2c>
		return STATUS_CANNOT_UPDATE;
    d1a8:	200b      	movs	r0, #11
}
    d1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (app->updated) {
    d1ac:	792b      	ldrb	r3, [r5, #4]
    d1ae:	b14b      	cbz	r3, d1c4 <bt_mesh_app_key_update+0x44>
		if (memcmp(app->keys[1].val, key, 16)) {
    d1b0:	2210      	movs	r2, #16
    d1b2:	4639      	mov	r1, r7
    d1b4:	4813      	ldr	r0, [pc, #76]	; (d204 <bt_mesh_app_key_update+0x84>)
    d1b6:	f016 ffa3 	bl	24100 <memcmp>
		return STATUS_SUCCESS;
    d1ba:	2800      	cmp	r0, #0
    d1bc:	bf14      	ite	ne
    d1be:	2006      	movne	r0, #6
    d1c0:	2000      	moveq	r0, #0
    d1c2:	e7f2      	b.n	d1aa <bt_mesh_app_key_update+0x2a>
    d1c4:	4910      	ldr	r1, [pc, #64]	; (d208 <bt_mesh_app_key_update+0x88>)
    d1c6:	4638      	mov	r0, r7
    d1c8:	f001 ffec 	bl	f1a4 <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[1].id)) {
    d1cc:	4604      	mov	r4, r0
    d1ce:	2800      	cmp	r0, #0
    d1d0:	d1ea      	bne.n	d1a8 <bt_mesh_app_key_update+0x28>
	memcpy(app->keys[1].val, key, 16);
    d1d2:	2210      	movs	r2, #16
    d1d4:	4639      	mov	r1, r7
	app->updated = true;
    d1d6:	712e      	strb	r6, [r5, #4]
	memcpy(app->keys[1].val, key, 16);
    d1d8:	480a      	ldr	r0, [pc, #40]	; (d204 <bt_mesh_app_key_update+0x84>)
    d1da:	f016 ffb8 	bl	2414e <memcpy>
		update_app_key_settings(app->app_idx, true);
    d1de:	4631      	mov	r1, r6
    d1e0:	8868      	ldrh	r0, [r5, #2]
    d1e2:	f7ff ff2b 	bl	d03c <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_UPDATED);
    d1e6:	4806      	ldr	r0, [pc, #24]	; (d200 <bt_mesh_app_key_update+0x80>)
    d1e8:	2102      	movs	r1, #2
    d1ea:	f7ff fec7 	bl	cf7c <app_key_evt>
	return STATUS_SUCCESS;
    d1ee:	4620      	mov	r0, r4
    d1f0:	e7db      	b.n	d1aa <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_APPKEY;
    d1f2:	2003      	movs	r0, #3
    d1f4:	e7d9      	b.n	d1aa <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_BINDING;
    d1f6:	2011      	movs	r0, #17
    d1f8:	e7d7      	b.n	d1aa <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_NETKEY;
    d1fa:	2004      	movs	r0, #4
    d1fc:	e7d5      	b.n	d1aa <bt_mesh_app_key_update+0x2a>
    d1fe:	bf00      	nop
    d200:	20000d78 	.word	0x20000d78
    d204:	20000d8f 	.word	0x20000d8f
    d208:	20000d8e 	.word	0x20000d8e

0000d20c <bt_mesh_app_key_del>:
{
    d20c:	b538      	push	{r3, r4, r5, lr}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    d20e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d212:	4299      	cmp	r1, r3
{
    d214:	4605      	mov	r5, r0
    d216:	460c      	mov	r4, r1
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    d218:	d105      	bne.n	d226 <bt_mesh_app_key_del+0x1a>
		if (apps[i].app_idx == app_idx) {
    d21a:	4b0d      	ldr	r3, [pc, #52]	; (d250 <bt_mesh_app_key_del+0x44>)
    d21c:	885a      	ldrh	r2, [r3, #2]
    d21e:	42aa      	cmp	r2, r5
    d220:	d008      	beq.n	d234 <bt_mesh_app_key_del+0x28>
	return STATUS_SUCCESS;
    d222:	2000      	movs	r0, #0
}
    d224:	bd38      	pop	{r3, r4, r5, pc}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    d226:	4608      	mov	r0, r1
    d228:	f018 fcbf 	bl	25baa <bt_mesh_subnet_get>
    d22c:	2800      	cmp	r0, #0
    d22e:	d1f4      	bne.n	d21a <bt_mesh_app_key_del+0xe>
		return STATUS_INVALID_NETKEY;
    d230:	2004      	movs	r0, #4
    d232:	e7f7      	b.n	d224 <bt_mesh_app_key_del+0x18>
	if (net_idx != BT_MESH_KEY_UNUSED && net_idx != app->net_idx) {
    d234:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d238:	4294      	cmp	r4, r2
    d23a:	d002      	beq.n	d242 <bt_mesh_app_key_del+0x36>
    d23c:	881b      	ldrh	r3, [r3, #0]
    d23e:	42a3      	cmp	r3, r4
    d240:	d103      	bne.n	d24a <bt_mesh_app_key_del+0x3e>
	app_key_del(app);
    d242:	4803      	ldr	r0, [pc, #12]	; (d250 <bt_mesh_app_key_del+0x44>)
    d244:	f018 fcb3 	bl	25bae <app_key_del>
    d248:	e7eb      	b.n	d222 <bt_mesh_app_key_del+0x16>
		return STATUS_INVALID_BINDING;
    d24a:	2011      	movs	r0, #17
    d24c:	e7ea      	b.n	d224 <bt_mesh_app_key_del+0x18>
    d24e:	bf00      	nop
    d250:	20000d78 	.word	0x20000d78

0000d254 <bt_mesh_app_key_set>:
{
    d254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (apps[i].app_idx == app_idx) {
    d258:	4c1b      	ldr	r4, [pc, #108]	; (d2c8 <bt_mesh_app_key_set+0x74>)
{
    d25a:	461d      	mov	r5, r3
		if (apps[i].app_idx == app_idx) {
    d25c:	8863      	ldrh	r3, [r4, #2]
    d25e:	4298      	cmp	r0, r3
{
    d260:	4607      	mov	r7, r0
    d262:	4688      	mov	r8, r1
    d264:	4616      	mov	r6, r2
		if (apps[i].app_idx == app_idx) {
    d266:	d02a      	beq.n	d2be <bt_mesh_app_key_set+0x6a>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    d268:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d26c:	4293      	cmp	r3, r2
    d26e:	d128      	bne.n	d2c2 <bt_mesh_app_key_set+0x6e>
	memcpy(app->keys[0].val, old_key, 16);
    d270:	4631      	mov	r1, r6
    d272:	2210      	movs	r2, #16
    d274:	1da0      	adds	r0, r4, #6
    d276:	f016 ff6a 	bl	2414e <memcpy>
    d27a:	4630      	mov	r0, r6
    d27c:	1d61      	adds	r1, r4, #5
    d27e:	f001 ff91 	bl	f1a4 <bt_mesh_k4>
	if (bt_mesh_app_id(old_key, &app->keys[0].id)) {
    d282:	4606      	mov	r6, r0
    d284:	b120      	cbz	r0, d290 <bt_mesh_app_key_set+0x3c>
		return -EIO;
    d286:	f06f 0604 	mvn.w	r6, #4
}
    d28a:	4630      	mov	r0, r6
    d28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (new_key) {
    d290:	b93d      	cbnz	r5, d2a2 <bt_mesh_app_key_set+0x4e>
	app->updated = !!new_key;
    d292:	3500      	adds	r5, #0
    d294:	bf18      	it	ne
    d296:	2501      	movne	r5, #1
	app->net_idx = net_idx;
    d298:	f8a4 8000 	strh.w	r8, [r4]
	app->app_idx = app_idx;
    d29c:	8067      	strh	r7, [r4, #2]
	app->updated = !!new_key;
    d29e:	7125      	strb	r5, [r4, #4]
	return 0;
    d2a0:	e7f3      	b.n	d28a <bt_mesh_app_key_set+0x36>
		memcpy(app->keys[1].val, new_key, 16);
    d2a2:	4629      	mov	r1, r5
    d2a4:	2210      	movs	r2, #16
    d2a6:	f104 0017 	add.w	r0, r4, #23
    d2aa:	f016 ff50 	bl	2414e <memcpy>
    d2ae:	f104 0116 	add.w	r1, r4, #22
    d2b2:	4628      	mov	r0, r5
    d2b4:	f001 ff76 	bl	f1a4 <bt_mesh_k4>
		if (bt_mesh_app_id(new_key, &app->keys[1].id)) {
    d2b8:	2800      	cmp	r0, #0
    d2ba:	d0ea      	beq.n	d292 <bt_mesh_app_key_set+0x3e>
    d2bc:	e7e3      	b.n	d286 <bt_mesh_app_key_set+0x32>
		return 0;
    d2be:	2600      	movs	r6, #0
    d2c0:	e7e3      	b.n	d28a <bt_mesh_app_key_set+0x36>
		return -ENOMEM;
    d2c2:	f06f 060b 	mvn.w	r6, #11
    d2c6:	e7e0      	b.n	d28a <bt_mesh_app_key_set+0x36>
    d2c8:	20000d78 	.word	0x20000d78

0000d2cc <app_key_set>:
	}
}

static int app_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    d2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2ce:	460c      	mov	r4, r1
    d2d0:	b08b      	sub	sp, #44	; 0x2c
    d2d2:	4616      	mov	r6, r2
    d2d4:	461f      	mov	r7, r3
	struct app_key_val key;
	uint16_t app_idx;
	int err;

	if (!name) {
    d2d6:	b940      	cbnz	r0, d2ea <app_key_set+0x1e>
		BT_ERR("Insufficient number of arguments");
    d2d8:	2145      	movs	r1, #69	; 0x45
    d2da:	4817      	ldr	r0, [pc, #92]	; (d338 <app_key_set+0x6c>)
    d2dc:	f014 fdf5 	bl	21eca <printk>
    d2e0:	f06f 0401 	mvn.w	r4, #1
	}

	BT_DBG("AppKeyIndex 0x%03x recovered from storage", app_idx);

	return 0;
}
    d2e4:	4620      	mov	r0, r4
    d2e6:	b00b      	add	sp, #44	; 0x2c
    d2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	app_idx = strtol(name, NULL, 16);
    d2ea:	2210      	movs	r2, #16
    d2ec:	2100      	movs	r1, #0
    d2ee:	f016 fe5c 	bl	23faa <strtol>
    d2f2:	4605      	mov	r5, r0
	if (!len_rd) {
    d2f4:	2c00      	cmp	r4, #0
    d2f6:	d0f5      	beq.n	d2e4 <app_key_set+0x18>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    d2f8:	2323      	movs	r3, #35	; 0x23
    d2fa:	aa01      	add	r2, sp, #4
    d2fc:	4639      	mov	r1, r7
    d2fe:	4630      	mov	r0, r6
    d300:	f004 fe40 	bl	11f84 <bt_mesh_settings_set>
	if (err < 0) {
    d304:	2800      	cmp	r0, #0
    d306:	db13      	blt.n	d330 <app_key_set+0x64>
	err = bt_mesh_app_key_set(app_idx, key.net_idx, key.val[0],
    d308:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d30c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    d310:	b10b      	cbz	r3, d316 <app_key_set+0x4a>
    d312:	f10d 0317 	add.w	r3, sp, #23
    d316:	f10d 0207 	add.w	r2, sp, #7
    d31a:	b2a8      	uxth	r0, r5
    d31c:	f7ff ff9a 	bl	d254 <bt_mesh_app_key_set>
	if (err) {
    d320:	4604      	mov	r4, r0
    d322:	2800      	cmp	r0, #0
    d324:	d0de      	beq.n	d2e4 <app_key_set+0x18>
		BT_ERR("Failed to set \'app-key\'");
    d326:	2145      	movs	r1, #69	; 0x45
    d328:	4804      	ldr	r0, [pc, #16]	; (d33c <app_key_set+0x70>)
    d32a:	f014 fdce 	bl	21eca <printk>
		return err;
    d32e:	e7d9      	b.n	d2e4 <app_key_set+0x18>
		return -EINVAL;
    d330:	f06f 0415 	mvn.w	r4, #21
    d334:	e7d6      	b.n	d2e4 <app_key_set+0x18>
    d336:	bf00      	nop
    d338:	0002ac40 	.word	0x0002ac40
    d33c:	0002c69f 	.word	0x0002c69f

0000d340 <bt_mesh_app_key_exists>:
		if (apps[i].app_idx == app_idx) {
    d340:	4b02      	ldr	r3, [pc, #8]	; (d34c <bt_mesh_app_key_exists+0xc>)
    d342:	885b      	ldrh	r3, [r3, #2]
}
    d344:	1a1b      	subs	r3, r3, r0
    d346:	4258      	negs	r0, r3
    d348:	4158      	adcs	r0, r3
    d34a:	4770      	bx	lr
    d34c:	20000d78 	.word	0x20000d78

0000d350 <bt_mesh_app_keys_get>:
{
    d350:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    d352:	2500      	movs	r5, #0
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    d354:	4f0d      	ldr	r7, [pc, #52]	; (d38c <bt_mesh_app_keys_get+0x3c>)
	size_t count = 0;
    d356:	462c      	mov	r4, r5
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    d358:	f64f 7cff 	movw	ip, #65535	; 0xffff
    d35c:	887e      	ldrh	r6, [r7, #2]
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    d35e:	b10d      	cbz	r5, d364 <bt_mesh_app_keys_get+0x14>
	return count;
    d360:	4620      	mov	r0, r4
}
    d362:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    d364:	4566      	cmp	r6, ip
    d366:	d0fb      	beq.n	d360 <bt_mesh_app_keys_get+0x10>
		if (net_idx != BT_MESH_KEY_ANY && app->net_idx != net_idx) {
    d368:	4560      	cmp	r0, ip
    d36a:	d002      	beq.n	d372 <bt_mesh_app_keys_get+0x22>
    d36c:	883d      	ldrh	r5, [r7, #0]
    d36e:	4285      	cmp	r5, r0
    d370:	d101      	bne.n	d376 <bt_mesh_app_keys_get+0x26>
		if (skip) {
    d372:	b113      	cbz	r3, d37a <bt_mesh_app_keys_get+0x2a>
			skip--;
    d374:	3b01      	subs	r3, #1
			continue;
    d376:	2501      	movs	r5, #1
    d378:	e7f0      	b.n	d35c <bt_mesh_app_keys_get+0xc>
		if (count >= max) {
    d37a:	4294      	cmp	r4, r2
    d37c:	d203      	bcs.n	d386 <bt_mesh_app_keys_get+0x36>
		app_idxs[count++] = app->app_idx;
    d37e:	f821 6014 	strh.w	r6, [r1, r4, lsl #1]
    d382:	3401      	adds	r4, #1
    d384:	e7f7      	b.n	d376 <bt_mesh_app_keys_get+0x26>
			return -ENOMEM;
    d386:	f06f 000b 	mvn.w	r0, #11
    d38a:	e7ea      	b.n	d362 <bt_mesh_app_keys_get+0x12>
    d38c:	20000d78 	.word	0x20000d78

0000d390 <bt_mesh_keys_resolve>:
{
    d390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d394:	4615      	mov	r5, r2
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    d396:	8842      	ldrh	r2, [r0, #2]
{
    d398:	461e      	mov	r6, r3
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    d39a:	1cd3      	adds	r3, r2, #3
    d39c:	b29b      	uxth	r3, r3
    d39e:	2b01      	cmp	r3, #1
{
    d3a0:	4604      	mov	r4, r0
    d3a2:	460f      	mov	r7, r1
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    d3a4:	d914      	bls.n	d3d0 <bt_mesh_keys_resolve+0x40>
		if (apps[i].app_idx == app_idx) {
    d3a6:	4c1f      	ldr	r4, [pc, #124]	; (d424 <bt_mesh_keys_resolve+0x94>)
    d3a8:	8863      	ldrh	r3, [r4, #2]
    d3aa:	4293      	cmp	r3, r2
    d3ac:	46a0      	mov	r8, r4
    d3ae:	d12f      	bne.n	d410 <bt_mesh_keys_resolve+0x80>
	*sub = bt_mesh_subnet_get(app->net_idx);
    d3b0:	8820      	ldrh	r0, [r4, #0]
    d3b2:	f018 fbfa 	bl	25baa <bt_mesh_subnet_get>
    d3b6:	6038      	str	r0, [r7, #0]
	if (!*sub) {
    d3b8:	b178      	cbz	r0, d3da <bt_mesh_keys_resolve+0x4a>
	if ((*sub)->kr_phase == BT_MESH_KR_PHASE_2 && app->updated) {
    d3ba:	7f83      	ldrb	r3, [r0, #30]
    d3bc:	2b02      	cmp	r3, #2
    d3be:	d12a      	bne.n	d416 <bt_mesh_keys_resolve+0x86>
    d3c0:	7923      	ldrb	r3, [r4, #4]
    d3c2:	b343      	cbz	r3, d416 <bt_mesh_keys_resolve+0x86>
		*aid = app->keys[1].id;
    d3c4:	7da3      	ldrb	r3, [r4, #22]
    d3c6:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[1].val;
    d3c8:	3417      	adds	r4, #23
    d3ca:	602c      	str	r4, [r5, #0]
	return 0;
    d3cc:	2000      	movs	r0, #0
    d3ce:	e01d      	b.n	d40c <bt_mesh_keys_resolve+0x7c>
		*sub = bt_mesh_subnet_get(ctx->net_idx);
    d3d0:	8800      	ldrh	r0, [r0, #0]
    d3d2:	f018 fbea 	bl	25baa <bt_mesh_subnet_get>
    d3d6:	6038      	str	r0, [r7, #0]
		if (!*sub) {
    d3d8:	b918      	cbnz	r0, d3e2 <bt_mesh_keys_resolve+0x52>
		BT_WARN("Unknown NetKey 0x%03x", app->net_idx);
    d3da:	8822      	ldrh	r2, [r4, #0]
    d3dc:	4812      	ldr	r0, [pc, #72]	; (d428 <bt_mesh_keys_resolve+0x98>)
    d3de:	2157      	movs	r1, #87	; 0x57
    d3e0:	e00b      	b.n	d3fa <bt_mesh_keys_resolve+0x6a>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    d3e2:	8862      	ldrh	r2, [r4, #2]
    d3e4:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    d3e8:	429a      	cmp	r2, r3
    d3ea:	d10b      	bne.n	d404 <bt_mesh_keys_resolve+0x74>
		    !bt_mesh_elem_find(ctx->addr)) {
    d3ec:	88a0      	ldrh	r0, [r4, #4]
    d3ee:	f002 fac5 	bl	f97c <bt_mesh_elem_find>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    d3f2:	b938      	cbnz	r0, d404 <bt_mesh_keys_resolve+0x74>
				BT_WARN("No DevKey for 0x%04x", ctx->addr);
    d3f4:	88a2      	ldrh	r2, [r4, #4]
    d3f6:	480d      	ldr	r0, [pc, #52]	; (d42c <bt_mesh_keys_resolve+0x9c>)
    d3f8:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Unknown NetKey 0x%03x", app->net_idx);
    d3fa:	f014 fd66 	bl	21eca <printk>
		return -EINVAL;
    d3fe:	f06f 0015 	mvn.w	r0, #21
    d402:	e003      	b.n	d40c <bt_mesh_keys_resolve+0x7c>
			*app_key = bt_mesh.dev_key;
    d404:	4b0a      	ldr	r3, [pc, #40]	; (d430 <bt_mesh_keys_resolve+0xa0>)
    d406:	602b      	str	r3, [r5, #0]
		*aid = 0;
    d408:	2000      	movs	r0, #0
    d40a:	7030      	strb	r0, [r6, #0]
}
    d40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("Unknown AppKey 0x%03x", ctx->app_idx);
    d410:	2157      	movs	r1, #87	; 0x57
    d412:	4808      	ldr	r0, [pc, #32]	; (d434 <bt_mesh_keys_resolve+0xa4>)
    d414:	e7f1      	b.n	d3fa <bt_mesh_keys_resolve+0x6a>
		*aid = app->keys[0].id;
    d416:	f898 3005 	ldrb.w	r3, [r8, #5]
    d41a:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[0].val;
    d41c:	4b06      	ldr	r3, [pc, #24]	; (d438 <bt_mesh_keys_resolve+0xa8>)
    d41e:	602b      	str	r3, [r5, #0]
    d420:	e7d4      	b.n	d3cc <bt_mesh_keys_resolve+0x3c>
    d422:	bf00      	nop
    d424:	20000d78 	.word	0x20000d78
    d428:	0002c6bc 	.word	0x0002c6bc
    d42c:	0002c6d7 	.word	0x0002c6d7
    d430:	20001ce0 	.word	0x20001ce0
    d434:	0002c6f1 	.word	0x0002c6f1
    d438:	20000d7e 	.word	0x20000d7e

0000d43c <bt_mesh_app_key_find>:
{
    d43c:	b570      	push	{r4, r5, r6, lr}
    d43e:	4615      	mov	r5, r2
	if (dev_key) {
    d440:	b180      	cbz	r0, d464 <bt_mesh_app_key_find+0x28>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    d442:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
    d446:	2a00      	cmp	r2, #0
    d448:	dd04      	ble.n	d454 <bt_mesh_app_key_find+0x18>
			err = cb(rx, bt_mesh.dev_key, cb_data);
    d44a:	9a04      	ldr	r2, [sp, #16]
    d44c:	4915      	ldr	r1, [pc, #84]	; (d4a4 <bt_mesh_app_key_find+0x68>)
    d44e:	4628      	mov	r0, r5
    d450:	4798      	blx	r3
			if (!err) {
    d452:	b120      	cbz	r0, d45e <bt_mesh_app_key_find+0x22>
		return BT_MESH_KEY_UNUSED;
    d454:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    d458:	bd70      	pop	{r4, r5, r6, pc}
			cred = &app->keys[0];
    d45a:	1d60      	adds	r0, r4, #5
    d45c:	e017      	b.n	d48e <bt_mesh_app_key_find+0x52>
				return BT_MESH_KEY_DEV_LOCAL;
    d45e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    d462:	e7f9      	b.n	d458 <bt_mesh_app_key_find+0x1c>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    d464:	4c10      	ldr	r4, [pc, #64]	; (d4a8 <bt_mesh_app_key_find+0x6c>)
    d466:	8860      	ldrh	r0, [r4, #2]
    d468:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d46c:	4290      	cmp	r0, r2
    d46e:	d0f1      	beq.n	d454 <bt_mesh_app_key_find+0x18>
		if (app->net_idx != rx->sub->net_idx) {
    d470:	682a      	ldr	r2, [r5, #0]
    d472:	8820      	ldrh	r0, [r4, #0]
    d474:	8b92      	ldrh	r2, [r2, #28]
    d476:	4290      	cmp	r0, r2
    d478:	d1ec      	bne.n	d454 <bt_mesh_app_key_find+0x18>
		if (rx->new_key && app->updated) {
    d47a:	7d2a      	ldrb	r2, [r5, #20]
    d47c:	0792      	lsls	r2, r2, #30
    d47e:	d5ec      	bpl.n	d45a <bt_mesh_app_key_find+0x1e>
    d480:	7926      	ldrb	r6, [r4, #4]
			cred = &app->keys[1];
    d482:	1d60      	adds	r0, r4, #5
    d484:	f104 0216 	add.w	r2, r4, #22
    d488:	2e00      	cmp	r6, #0
    d48a:	bf18      	it	ne
    d48c:	4610      	movne	r0, r2
		if (cred->id != aid) {
    d48e:	7802      	ldrb	r2, [r0, #0]
    d490:	428a      	cmp	r2, r1
    d492:	d1df      	bne.n	d454 <bt_mesh_app_key_find+0x18>
		err = cb(rx, cred->val, cb_data);
    d494:	1c41      	adds	r1, r0, #1
    d496:	9a04      	ldr	r2, [sp, #16]
    d498:	4628      	mov	r0, r5
    d49a:	4798      	blx	r3
		if (err) {
    d49c:	2800      	cmp	r0, #0
    d49e:	d1d9      	bne.n	d454 <bt_mesh_app_key_find+0x18>
		return app->app_idx;
    d4a0:	8860      	ldrh	r0, [r4, #2]
    d4a2:	e7d9      	b.n	d458 <bt_mesh_app_key_find+0x1c>
    d4a4:	20001ce0 	.word	0x20001ce0
    d4a8:	20000d78 	.word	0x20000d78

0000d4ac <bt_mesh_app_keys_reset>:
		if (app->app_idx != BT_MESH_KEY_UNUSED) {
    d4ac:	4804      	ldr	r0, [pc, #16]	; (d4c0 <bt_mesh_app_keys_reset+0x14>)
    d4ae:	8842      	ldrh	r2, [r0, #2]
    d4b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d4b4:	429a      	cmp	r2, r3
    d4b6:	d001      	beq.n	d4bc <bt_mesh_app_keys_reset+0x10>
			app_key_del(app);
    d4b8:	f018 bb79 	b.w	25bae <app_key_del>
}
    d4bc:	4770      	bx	lr
    d4be:	bf00      	nop
    d4c0:	20000d78 	.word	0x20000d78

0000d4c4 <bt_mesh_app_key_pending_store>:

BT_MESH_SETTINGS_DEFINE(app, "AppKey", app_key_set);

void bt_mesh_app_key_pending_store(void)
{
    d4c4:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(app_key_updates); i++) {
		struct app_key_update *update = &app_key_updates[i];

		if (!update->valid) {
    d4c6:	4c09      	ldr	r4, [pc, #36]	; (d4ec <bt_mesh_app_key_pending_store+0x28>)
    d4c8:	7863      	ldrb	r3, [r4, #1]
    d4ca:	06da      	lsls	r2, r3, #27
    d4cc:	d50a      	bpl.n	d4e4 <bt_mesh_app_key_pending_store+0x20>
			continue;
		}

		if (update->clear) {
    d4ce:	8820      	ldrh	r0, [r4, #0]
    d4d0:	069b      	lsls	r3, r3, #26
    d4d2:	f3c0 000b 	ubfx	r0, r0, #0, #12
    d4d6:	d506      	bpl.n	d4e6 <bt_mesh_app_key_pending_store+0x22>
			clear_app_key(update->key_idx);
    d4d8:	f7ff fd38 	bl	cf4c <clear_app_key>
		} else {
			store_app_key(update->key_idx);
		}

		update->valid = 0U;
    d4dc:	7863      	ldrb	r3, [r4, #1]
    d4de:	f36f 1304 	bfc	r3, #4, #1
    d4e2:	7063      	strb	r3, [r4, #1]
	}
}
    d4e4:	bd10      	pop	{r4, pc}
			store_app_key(update->key_idx);
    d4e6:	f7ff fd6f 	bl	cfc8 <store_app_key>
    d4ea:	e7f7      	b.n	d4dc <bt_mesh_app_key_pending_store+0x18>
    d4ec:	2000438e 	.word	0x2000438e

0000d4f0 <k_delayed_work_submit>:
    d4f0:	4601      	mov	r1, r0
    d4f2:	4801      	ldr	r0, [pc, #4]	; (d4f8 <k_delayed_work_submit+0x8>)
    d4f4:	f012 be30 	b.w	20158 <k_delayed_work_submit_to_queue>
    d4f8:	20002170 	.word	0x20002170

0000d4fc <seg_rx_reset>:
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
				NULL, NULL);
}

static void seg_rx_reset(struct seg_rx *rx, bool full_reset)
{
    d4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d500:	4604      	mov	r4, r0
	int i;

	BT_DBG("rx %p", rx);

	k_delayed_work_cancel(&rx->ack);
    d502:	3030      	adds	r0, #48	; 0x30
{
    d504:	460d      	mov	r5, r1
	k_delayed_work_cancel(&rx->ack);
    d506:	f012 fe97 	bl	20238 <k_delayed_work_cancel>

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    d50a:	f994 301f 	ldrsb.w	r3, [r4, #31]
    d50e:	2b00      	cmp	r3, #0
    d510:	da14      	bge.n	d53c <seg_rx_reset+0x40>
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
    d512:	7fe3      	ldrb	r3, [r4, #31]
    d514:	f003 031f 	and.w	r3, r3, #31
    d518:	1c5a      	adds	r2, r3, #1
    d51a:	2301      	movs	r3, #1
    d51c:	4093      	lsls	r3, r2
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    d51e:	6a62      	ldr	r2, [r4, #36]	; 0x24
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
    d520:	3b01      	subs	r3, #1
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    d522:	429a      	cmp	r2, r3
    d524:	d00a      	beq.n	d53c <seg_rx_reset+0x40>
		BT_WARN("Clearing incomplete buffers from Friend queue");
    d526:	2157      	movs	r1, #87	; 0x57
    d528:	4815      	ldr	r0, [pc, #84]	; (d580 <seg_rx_reset+0x84>)
    d52a:	f014 fcce 	bl	21eca <printk>
		bt_mesh_friend_clear_incomplete(rx->sub, rx->src, rx->dst,
    d52e:	f104 0310 	add.w	r3, r4, #16
    d532:	8b62      	ldrh	r2, [r4, #26]
    d534:	8b21      	ldrh	r1, [r4, #24]
    d536:	6820      	ldr	r0, [r4, #0]
    d538:	f005 ff34 	bl	133a4 <bt_mesh_friend_clear_incomplete>
{
    d53c:	2600      	movs	r6, #0
	for (i = 0; i <= rx->seg_n; i++) {
		if (!rx->seg[i]) {
			continue;
		}

		k_mem_slab_free(&segs, &rx->seg[i]);
    d53e:	f8df 8044 	ldr.w	r8, [pc, #68]	; d584 <seg_rx_reset+0x88>
    d542:	1d21      	adds	r1, r4, #4
		rx->seg[i] = NULL;
    d544:	46b1      	mov	r9, r6
		if (!rx->seg[i]) {
    d546:	460f      	mov	r7, r1
    d548:	f857 3b04 	ldr.w	r3, [r7], #4
    d54c:	b123      	cbz	r3, d558 <seg_rx_reset+0x5c>
		k_mem_slab_free(&segs, &rx->seg[i]);
    d54e:	4640      	mov	r0, r8
    d550:	f011 f84a 	bl	1e5e8 <k_mem_slab_free>
		rx->seg[i] = NULL;
    d554:	f847 9c04 	str.w	r9, [r7, #-4]
	for (i = 0; i <= rx->seg_n; i++) {
    d558:	7fe3      	ldrb	r3, [r4, #31]
    d55a:	3601      	adds	r6, #1
    d55c:	f003 021f 	and.w	r2, r3, #31
    d560:	42b2      	cmp	r2, r6
    d562:	4639      	mov	r1, r7
    d564:	daef      	bge.n	d546 <seg_rx_reset+0x4a>
	}

	rx->in_use = 0U;
    d566:	f36f 1386 	bfc	r3, #6, #1
    d56a:	77e3      	strb	r3, [r4, #31]

	/* We don't always reset these values since we need to be able to
	 * send an ack if we receive a segment after we've already received
	 * the full SDU.
	 */
	if (full_reset) {
    d56c:	b135      	cbz	r5, d57c <seg_rx_reset+0x80>
		rx->seq_auth = 0U;
    d56e:	2000      	movs	r0, #0
    d570:	2100      	movs	r1, #0
    d572:	e9c4 0104 	strd	r0, r1, [r4, #16]
		rx->sub = NULL;
    d576:	2300      	movs	r3, #0
    d578:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    d57a:	61a3      	str	r3, [r4, #24]
		rx->dst = BT_MESH_ADDR_UNASSIGNED;
	}
}
    d57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d580:	0002cc20 	.word	0x0002cc20
    d584:	20000ef4 	.word	0x20000ef4

0000d588 <va_set>:
}

#if CONFIG_BT_MESH_LABEL_COUNT > 0
static int va_set(const char *name, size_t len_rd,
		  settings_read_cb read_cb, void *cb_arg)
{
    d588:	b5f0      	push	{r4, r5, r6, r7, lr}
    d58a:	460c      	mov	r4, r1
    d58c:	b087      	sub	sp, #28
    d58e:	4616      	mov	r6, r2
    d590:	461f      	mov	r7, r3
	struct va_val va;
	struct virtual_addr *lab;
	uint16_t index;
	int err;

	if (!name) {
    d592:	b940      	cbnz	r0, d5a6 <va_set+0x1e>
		BT_ERR("Insufficient number of arguments");
    d594:	2145      	movs	r1, #69	; 0x45
    d596:	481e      	ldr	r0, [pc, #120]	; (d610 <va_set+0x88>)
    d598:	f014 fc97 	bl	21eca <printk>
		return -ENOENT;
    d59c:	f06f 0401 	mvn.w	r4, #1

	BT_DBG("Restored Virtual Address, addr 0x%04x ref 0x%04x",
	       lab->addr, lab->ref);

	return 0;
}
    d5a0:	4620      	mov	r0, r4
    d5a2:	b007      	add	sp, #28
    d5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	index = strtol(name, NULL, 16);
    d5a6:	2210      	movs	r2, #16
    d5a8:	2100      	movs	r1, #0
    d5aa:	f016 fcfe 	bl	23faa <strtol>
    d5ae:	4605      	mov	r5, r0
	if (len_rd == 0) {
    d5b0:	b924      	cbnz	r4, d5bc <va_set+0x34>
		BT_WARN("Mesh Virtual Address length = 0");
    d5b2:	4818      	ldr	r0, [pc, #96]	; (d614 <va_set+0x8c>)
    d5b4:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
    d5b6:	f014 fc88 	bl	21eca <printk>
		return 0;
    d5ba:	e7f1      	b.n	d5a0 <va_set+0x18>
	err = bt_mesh_settings_set(read_cb, cb_arg, &va, sizeof(va));
    d5bc:	2314      	movs	r3, #20
    d5be:	aa01      	add	r2, sp, #4
    d5c0:	4639      	mov	r1, r7
    d5c2:	4630      	mov	r0, r6
    d5c4:	f004 fcde 	bl	11f84 <bt_mesh_settings_set>
	if (err) {
    d5c8:	4604      	mov	r4, r0
    d5ca:	b110      	cbz	r0, d5d2 <va_set+0x4a>
		BT_ERR("Failed to set \'virtual address\'");
    d5cc:	2145      	movs	r1, #69	; 0x45
    d5ce:	4812      	ldr	r0, [pc, #72]	; (d618 <va_set+0x90>)
    d5d0:	e7f1      	b.n	d5b6 <va_set+0x2e>
	if (va.ref == 0) {
    d5d2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d5d6:	b913      	cbnz	r3, d5de <va_set+0x56>
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
    d5d8:	2157      	movs	r1, #87	; 0x57
    d5da:	4810      	ldr	r0, [pc, #64]	; (d61c <va_set+0x94>)
    d5dc:	e7eb      	b.n	d5b6 <va_set+0x2e>
	if (index >= ARRAY_SIZE(virtual_addrs)) {
    d5de:	b2ad      	uxth	r5, r5
    d5e0:	b135      	cbz	r5, d5f0 <va_set+0x68>
		BT_WARN("Out of labels buffers");
    d5e2:	2157      	movs	r1, #87	; 0x57
    d5e4:	480e      	ldr	r0, [pc, #56]	; (d620 <va_set+0x98>)
    d5e6:	f014 fc70 	bl	21eca <printk>
		return -ENOBUFS;
    d5ea:	f06f 0436 	mvn.w	r4, #54	; 0x36
    d5ee:	e7d7      	b.n	d5a0 <va_set+0x18>
	memcpy(lab->uuid, va.uuid, 16);
    d5f0:	4d0c      	ldr	r5, [pc, #48]	; (d624 <va_set+0x9c>)
    d5f2:	2210      	movs	r2, #16
    d5f4:	a902      	add	r1, sp, #8
    d5f6:	1d28      	adds	r0, r5, #4
    d5f8:	f016 fda9 	bl	2414e <memcpy>
	lab->addr = va.addr;
    d5fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d600:	806b      	strh	r3, [r5, #2]
	lab->ref = va.ref;
    d602:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d606:	882b      	ldrh	r3, [r5, #0]
    d608:	f362 030e 	bfi	r3, r2, #0, #15
    d60c:	802b      	strh	r3, [r5, #0]
	return 0;
    d60e:	e7c7      	b.n	d5a0 <va_set+0x18>
    d610:	0002ac40 	.word	0x0002ac40
    d614:	0002cd77 	.word	0x0002cd77
    d618:	0002cd9c 	.word	0x0002cd9c
    d61c:	0002cdc1 	.word	0x0002cdc1
    d620:	0002cdea 	.word	0x0002cdea
    d624:	20004390 	.word	0x20004390

0000d628 <seg_tx_reset>:
{
    d628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d62c:	4604      	mov	r4, r0
	k_delayed_work_cancel(&tx->retransmit);
    d62e:	3050      	adds	r0, #80	; 0x50
    d630:	f012 fe02 	bl	20238 <k_delayed_work_cancel>
	tx->cb = NULL;
    d634:	2500      	movs	r5, #0
	tx->blocked = false;
    d636:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    d63a:	4f20      	ldr	r7, [pc, #128]	; (d6bc <seg_tx_reset+0x94>)
	tx->sub = NULL;
    d63c:	6025      	str	r5, [r4, #0]
	tx->seq_auth = 0U;
    d63e:	2000      	movs	r0, #0
    d640:	2100      	movs	r1, #0
	tx->cb_data = NULL;
    d642:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
	tx->seq_auth = 0U;
    d646:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	tx->blocked = false;
    d64a:	f365 0200 	bfi	r2, r5, #0, #1
	tx->src = BT_MESH_ADDR_UNASSIGNED;
    d64e:	63a5      	str	r5, [r4, #56]	; 0x38
	tx->blocked = false;
    d650:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    d654:	1d26      	adds	r6, r4, #4
	tx->seg[seg_idx] = NULL;
    d656:	46a8      	mov	r8, r5
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    d658:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    d65c:	b19b      	cbz	r3, d686 <seg_tx_reset+0x5e>
		if (!tx->seg[i]) {
    d65e:	6833      	ldr	r3, [r6, #0]
    d660:	b153      	cbz	r3, d678 <seg_tx_reset+0x50>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    d662:	4631      	mov	r1, r6
    d664:	4638      	mov	r0, r7
    d666:	f010 ffbf 	bl	1e5e8 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
    d66a:	f8c6 8000 	str.w	r8, [r6]
	tx->nack_count--;
    d66e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    d672:	3b01      	subs	r3, #1
    d674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    d678:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    d67c:	3501      	adds	r5, #1
    d67e:	42ab      	cmp	r3, r5
    d680:	f106 0604 	add.w	r6, r6, #4
    d684:	dae8      	bge.n	d658 <seg_tx_reset+0x30>
	tx->nack_count = 0;
    d686:	2100      	movs	r1, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d688:	4b0d      	ldr	r3, [pc, #52]	; (d6c0 <seg_tx_reset+0x98>)
    d68a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    d68e:	f3bf 8f5b 	dmb	ish
    d692:	e853 2f00 	ldrex	r2, [r3]
    d696:	f022 0020 	bic.w	r0, r2, #32
    d69a:	e843 0400 	strex	r4, r0, [r3]
    d69e:	2c00      	cmp	r4, #0
    d6a0:	d1f7      	bne.n	d692 <seg_tx_reset+0x6a>
    d6a2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
    d6a6:	0692      	lsls	r2, r2, #26
    d6a8:	d505      	bpl.n	d6b6 <seg_tx_reset+0x8e>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    d6aa:	f853 0c08 	ldr.w	r0, [r3, #-8]
}
    d6ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    d6b2:	f7fe bcc1 	b.w	c038 <bt_mesh_net_iv_update>
}
    d6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d6ba:	bf00      	nop
    d6bc:	20000ef4 	.word	0x20000ef4
    d6c0:	20001ac0 	.word	0x20001ac0

0000d6c4 <seg_tx_complete>:
{
    d6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6c8:	4604      	mov	r4, r0
	void *cb_data = tx->cb_data;
    d6ca:	e9d0 5712 	ldrd	r5, r7, [r0, #72]	; 0x48
		if (&seg_tx[i] != tx &&
    d6ce:	4813      	ldr	r0, [pc, #76]	; (d71c <seg_tx_complete+0x58>)
    d6d0:	4284      	cmp	r4, r0
{
    d6d2:	460e      	mov	r6, r1
		if (&seg_tx[i] != tx &&
    d6d4:	d014      	beq.n	d700 <seg_tx_complete+0x3c>
		    seg_tx[i].blocked &&
    d6d6:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
		if (&seg_tx[i] != tx &&
    d6da:	07da      	lsls	r2, r3, #31
    d6dc:	d510      	bpl.n	d700 <seg_tx_complete+0x3c>
	return (tx->src == src) && (tx->dst == dst);
    d6de:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    d6e0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    d6e2:	4291      	cmp	r1, r2
    d6e4:	d10c      	bne.n	d700 <seg_tx_complete+0x3c>
    d6e6:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
    d6e8:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    d6ea:	4291      	cmp	r1, r2
    d6ec:	d108      	bne.n	d700 <seg_tx_complete+0x3c>
		blocked->blocked = false;
    d6ee:	f36f 0300 	bfc	r3, #0, #1
    d6f2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
		k_delayed_work_submit(&blocked->retransmit, K_NO_WAIT);
    d6f6:	2200      	movs	r2, #0
    d6f8:	2300      	movs	r3, #0
    d6fa:	3050      	adds	r0, #80	; 0x50
    d6fc:	f7ff fef8 	bl	d4f0 <k_delayed_work_submit>
	seg_tx_reset(tx);
    d700:	4620      	mov	r0, r4
    d702:	f7ff ff91 	bl	d628 <seg_tx_reset>
	if (cb && cb->end) {
    d706:	b135      	cbz	r5, d716 <seg_tx_complete+0x52>
    d708:	686b      	ldr	r3, [r5, #4]
    d70a:	b123      	cbz	r3, d716 <seg_tx_complete+0x52>
		cb->end(err, cb_data);
    d70c:	4639      	mov	r1, r7
    d70e:	4630      	mov	r0, r6
}
    d710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb->end(err, cb_data);
    d714:	4718      	bx	r3
}
    d716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d71a:	bf00      	nop
    d71c:	20001d50 	.word	0x20001d50

0000d720 <seg_tx_send_unacked>:
{
    d720:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!tx->nack_count) {
    d722:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
    d726:	b087      	sub	sp, #28
    d728:	4604      	mov	r4, r0
	if (!tx->nack_count) {
    d72a:	b3bb      	cbz	r3, d79c <seg_tx_send_unacked+0x7c>
		.net_idx = tx->sub->net_idx,
    d72c:	6801      	ldr	r1, [r0, #0]
	struct bt_mesh_net_tx net_tx = {
    d72e:	9103      	str	r1, [sp, #12]
	struct bt_mesh_msg_ctx ctx = {
    d730:	2300      	movs	r3, #0
    d732:	2501      	movs	r5, #1
    d734:	f8cd 3006 	str.w	r3, [sp, #6]
    d738:	8b8b      	ldrh	r3, [r1, #28]
    d73a:	f8ad 3000 	strh.w	r3, [sp]
	struct bt_mesh_net_tx net_tx = {
    d73e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
	struct bt_mesh_msg_ctx ctx = {
    d740:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
    d744:	f88d 500a 	strb.w	r5, [sp, #10]
    d748:	f890 5044 	ldrb.w	r5, [r0, #68]	; 0x44
    d74c:	f88d 500b 	strb.w	r5, [sp, #11]
	struct bt_mesh_net_tx net_tx = {
    d750:	f8ad 1014 	strh.w	r1, [sp, #20]
    d754:	f890 503e 	ldrb.w	r5, [r0, #62]	; 0x3e
    d758:	f890 103f 	ldrb.w	r1, [r0, #63]	; 0x3f
    d75c:	f88d 1016 	strb.w	r1, [sp, #22]
    d760:	f3c3 1140 	ubfx	r1, r3, #5, #1
	struct bt_mesh_msg_ctx ctx = {
    d764:	f343 0240 	sbfx	r2, r3, #1, #1
	struct bt_mesh_net_tx net_tx = {
    d768:	f365 0187 	bfi	r1, r5, #2, #6
	struct bt_mesh_msg_ctx ctx = {
    d76c:	f8ad 2002 	strh.w	r2, [sp, #2]
		.addr = tx->dst,
    d770:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
	struct bt_mesh_net_tx net_tx = {
    d772:	f88d 1017 	strb.w	r1, [sp, #23]
	if (!tx->attempts) {
    d776:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
	struct bt_mesh_msg_ctx ctx = {
    d77a:	f8ad 2004 	strh.w	r2, [sp, #4]
	struct bt_mesh_net_tx net_tx = {
    d77e:	f8cd d010 	str.w	sp, [sp, #16]
	if (!tx->attempts) {
    d782:	b969      	cbnz	r1, d7a0 <seg_tx_send_unacked+0x80>
		if (BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    d784:	b212      	sxth	r2, r2
    d786:	2a00      	cmp	r2, #0
    d788:	dd06      	ble.n	d798 <seg_tx_send_unacked+0x78>
			BT_ERR("Ran out of retransmit attempts");
    d78a:	2145      	movs	r1, #69	; 0x45
    d78c:	483f      	ldr	r0, [pc, #252]	; (d88c <seg_tx_send_unacked+0x16c>)
    d78e:	f014 fb9c 	bl	21eca <printk>
			seg_tx_complete(tx, -ETIMEDOUT);
    d792:	f06f 013b 	mvn.w	r1, #59	; 0x3b
    d796:	4620      	mov	r0, r4
			seg_tx_complete(tx, 0);
    d798:	f7ff ff94 	bl	d6c4 <seg_tx_complete>
}
    d79c:	b007      	add	sp, #28
    d79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tx->sending = 1U;
    d7a0:	f043 0310 	orr.w	r3, r3, #16
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    d7a4:	4e3a      	ldr	r6, [pc, #232]	; (d890 <seg_tx_send_unacked+0x170>)
	tx->sending = 1U;
    d7a6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    d7aa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    d7ae:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    d7b2:	429a      	cmp	r2, r3
    d7b4:	d208      	bcs.n	d7c8 <seg_tx_send_unacked+0xa8>
	tx->seg_o = 0U;
    d7b6:	2300      	movs	r3, #0
    d7b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	tx->attempts--;
    d7bc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    d7c0:	3b01      	subs	r3, #1
    d7c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    d7c6:	e02a      	b.n	d81e <seg_tx_send_unacked+0xfe>
		if (!tx->seg[tx->seg_o]) {
    d7c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    d7cc:	685b      	ldr	r3, [r3, #4]
    d7ce:	2b00      	cmp	r3, #0
    d7d0:	d056      	beq.n	d880 <seg_tx_send_unacked+0x160>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit,
    d7d2:	2200      	movs	r2, #0
    d7d4:	2300      	movs	r3, #0
    d7d6:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
    d7da:	2001      	movs	r0, #1
    d7dc:	f7fd ff5e 	bl	b69c <bt_mesh_adv_create>
		if (!seg) {
    d7e0:	4605      	mov	r5, r0
    d7e2:	b1e0      	cbz	r0, d81e <seg_tx_send_unacked+0xfe>
	net_buf_simple_reserve(&buf->b, reserve);
    d7e4:	f100 0708 	add.w	r7, r0, #8
    d7e8:	2109      	movs	r1, #9
    d7ea:	4638      	mov	r0, r7
    d7ec:	f00e ff52 	bl	1c694 <net_buf_simple_reserve>
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
    d7f0:	463a      	mov	r2, r7
    d7f2:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    d7f6:	4620      	mov	r0, r4
    d7f8:	f018 fa00 	bl	25bfc <seg_tx_buf_build>
		tx->seg_pending++;
    d7fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    d800:	3301      	adds	r3, #1
    d802:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    d806:	4632      	mov	r2, r6
    d808:	4623      	mov	r3, r4
    d80a:	4629      	mov	r1, r5
    d80c:	a803      	add	r0, sp, #12
    d80e:	f7fe fd79 	bl	c304 <bt_mesh_net_send>
		if (err) {
    d812:	b3a8      	cbz	r0, d880 <seg_tx_send_unacked+0x160>
			tx->seg_pending--;
    d814:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    d818:	3b01      	subs	r3, #1
    d81a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	if (!tx->seg_pending) {
    d81e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    d822:	bb33      	cbnz	r3, d872 <seg_tx_send_unacked+0x152>
				      K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
    d824:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
    d828:	2b00      	cmp	r3, #0
    d82a:	bfc1      	itttt	gt
    d82c:	f894 1044 	ldrbgt.w	r1, [r4, #68]	; 0x44
    d830:	2232      	movgt	r2, #50	; 0x32
    d832:	f44f 73c8 	movgt.w	r3, #400	; 0x190
    d836:	fb12 3201 	smlabbgt	r2, r2, r1, r3
    d83a:	bfce      	itee	gt
    d83c:	17d3      	asrgt	r3, r2, #31
    d83e:	2232      	movle	r2, #50	; 0x32
    d840:	2300      	movle	r3, #0
    d842:	03d9      	lsls	r1, r3, #15
    d844:	03d0      	lsls	r0, r2, #15
    d846:	f240 36e7 	movw	r6, #999	; 0x3e7
    d84a:	1980      	adds	r0, r0, r6
    d84c:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
    d850:	f04f 0600 	mov.w	r6, #0
    d854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d858:	f04f 0300 	mov.w	r3, #0
    d85c:	eb46 0101 	adc.w	r1, r6, r1
    d860:	f7f2 fc4e 	bl	100 <__aeabi_uldivmod>
		k_delayed_work_submit(&tx->retransmit,
    d864:	f104 0550 	add.w	r5, r4, #80	; 0x50
    d868:	4602      	mov	r2, r0
    d86a:	460b      	mov	r3, r1
    d86c:	4628      	mov	r0, r5
    d86e:	f7ff fe3f 	bl	d4f0 <k_delayed_work_submit>
	tx->sending = 0U;
    d872:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    d876:	f36f 1304 	bfc	r3, #4, #1
    d87a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    d87e:	e78d      	b.n	d79c <seg_tx_send_unacked+0x7c>
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    d880:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    d884:	3301      	adds	r3, #1
    d886:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    d88a:	e78e      	b.n	d7aa <seg_tx_send_unacked+0x8a>
    d88c:	0002cc53 	.word	0x0002cc53
    d890:	00029578 	.word	0x00029578

0000d894 <ctl_recv>:
{
    d894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (ctl_op) {
    d898:	f011 0a7f 	ands.w	sl, r1, #127	; 0x7f
{
    d89c:	4604      	mov	r4, r0
    d89e:	4616      	mov	r6, r2
    d8a0:	461d      	mov	r5, r3
	switch (ctl_op) {
    d8a2:	d012      	beq.n	d8ca <ctl_recv+0x36>
    d8a4:	f1ba 0f0a 	cmp.w	sl, #10
    d8a8:	f000 80ae 	beq.w	da08 <ctl_recv+0x174>
	if (!rx->local_match) {
    d8ac:	7d03      	ldrb	r3, [r0, #20]
    d8ae:	f013 0540 	ands.w	r5, r3, #64	; 0x40
    d8b2:	d02f      	beq.n	d914 <ctl_recv+0x80>
		switch (ctl_op) {
    d8b4:	f10a 33ff 	add.w	r3, sl, #4294967295
    d8b8:	2b07      	cmp	r3, #7
    d8ba:	f200 80c8 	bhi.w	da4e <ctl_recv+0x1ba>
    d8be:	e8df f003 	tbb	[pc, r3]
    d8c2:	c6a8      	.short	0xc6a8
    d8c4:	b7b2c6ad 	.word	0xb7b2c6ad
    d8c8:	c1bc      	.short	0xc1bc
	if (buf->len < 6) {
    d8ca:	8893      	ldrh	r3, [r2, #4]
    d8cc:	2b05      	cmp	r3, #5
    d8ce:	d806      	bhi.n	d8de <ctl_recv+0x4a>
		BT_ERR("Too short ack message");
    d8d0:	4864      	ldr	r0, [pc, #400]	; (da64 <ctl_recv+0x1d0>)
    d8d2:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Received ack for group seg");
    d8d4:	f014 faf9 	bl	21eca <printk>
		return -EINVAL;
    d8d8:	f06f 0515 	mvn.w	r5, #21
    d8dc:	e01a      	b.n	d914 <ctl_recv+0x80>
	seq_zero = net_buf_simple_pull_be16(buf);
    d8de:	4610      	mov	r0, r2
    d8e0:	f01a fb25 	bl	27f2e <net_buf_simple_pull_be16>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
    d8e4:	f994 3014 	ldrsb.w	r3, [r4, #20]
	obo = seq_zero >> 15;
    d8e8:	f3c0 3bcf 	ubfx	fp, r0, #15, #16
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
    d8ec:	2b00      	cmp	r3, #0
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    d8ee:	f3c0 008c 	ubfx	r0, r0, #2, #13
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
    d8f2:	fa1f f880 	uxth.w	r8, r0
    d8f6:	f04f 0900 	mov.w	r9, #0
    d8fa:	da0e      	bge.n	d91a <ctl_recv+0x86>
		*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(rx), seq_zero);
    d8fc:	7d20      	ldrb	r0, [r4, #20]
    d8fe:	4a5a      	ldr	r2, [pc, #360]	; (da68 <ctl_recv+0x1d4>)
    d900:	f000 0301 	and.w	r3, r0, #1
    d904:	6810      	ldr	r0, [r2, #0]
    d906:	1ac0      	subs	r0, r0, r3
    d908:	0a03      	lsrs	r3, r0, #8
    d90a:	ea48 6000 	orr.w	r0, r8, r0, lsl #24
    d90e:	e9c5 0300 	strd	r0, r3, [r5]
		return 0;
    d912:	4655      	mov	r5, sl
}
    d914:	4628      	mov	r0, r5
    d916:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ack = net_buf_simple_pull_be32(buf);
    d91a:	4630      	mov	r0, r6
    d91c:	f01a fb12 	bl	27f44 <net_buf_simple_pull_be32>
    d920:	4607      	mov	r7, r0
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    d922:	8920      	ldrh	r0, [r4, #8]
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    d924:	4c51      	ldr	r4, [pc, #324]	; (da6c <ctl_recv+0x1d8>)
    d926:	e9d4 160c 	ldrd	r1, r6, [r4, #48]	; 0x30
    d92a:	45ca      	cmp	sl, r9
    d92c:	f3c1 020c 	ubfx	r2, r1, #0, #13
    d930:	bf08      	it	eq
    d932:	4542      	cmpeq	r2, r8
    d934:	f040 8093 	bne.w	da5e <ctl_recv+0x1ca>
		if (tx->dst == addr) {
    d938:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    d93a:	4283      	cmp	r3, r0
    d93c:	d00c      	beq.n	d958 <ctl_recv+0xc4>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    d93e:	f1bb 0f00 	cmp.w	fp, #0
    d942:	f000 808c 	beq.w	da5e <ctl_recv+0x1ca>
    d946:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    d94a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    d94e:	3301      	adds	r3, #1
    d950:	429a      	cmp	r2, r3
    d952:	f040 8084 	bne.w	da5e <ctl_recv+0x1ca>
			tx->dst = addr;
    d956:	8760      	strh	r0, [r4, #58]	; 0x3a
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    d958:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
    d95c:	2b00      	cmp	r3, #0
    d95e:	dc02      	bgt.n	d966 <ctl_recv+0xd2>
		BT_ERR("Received ack for group seg");
    d960:	2145      	movs	r1, #69	; 0x45
    d962:	4843      	ldr	r0, [pc, #268]	; (da70 <ctl_recv+0x1dc>)
    d964:	e7b6      	b.n	d8d4 <ctl_recv+0x40>
	*seq_auth = tx->seq_auth;
    d966:	e9c5 1600 	strd	r1, r6, [r5]
	if (!ack) {
    d96a:	b957      	cbnz	r7, d982 <ctl_recv+0xee>
		BT_WARN("SDU canceled");
    d96c:	2157      	movs	r1, #87	; 0x57
    d96e:	4841      	ldr	r0, [pc, #260]	; (da74 <ctl_recv+0x1e0>)
    d970:	f014 faab 	bl	21eca <printk>
		seg_tx_complete(tx, -ECANCELED);
    d974:	f06f 0147 	mvn.w	r1, #71	; 0x47
    d978:	483c      	ldr	r0, [pc, #240]	; (da6c <ctl_recv+0x1d8>)
    d97a:	f7ff fea3 	bl	d6c4 <seg_tx_complete>
		return 0;
    d97e:	463d      	mov	r5, r7
    d980:	e7c8      	b.n	d914 <ctl_recv+0x80>
{
	if (op == 0) {
		return 0;
	}

	return 32 - __builtin_clz(op);
    d982:	fab7 f387 	clz	r3, r7
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    d986:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    d98a:	f1c3 031f 	rsb	r3, r3, #31
    d98e:	4293      	cmp	r3, r2
    d990:	d902      	bls.n	d998 <ctl_recv+0x104>
		BT_ERR("Too large segment number in ack");
    d992:	2145      	movs	r1, #69	; 0x45
    d994:	4838      	ldr	r0, [pc, #224]	; (da78 <ctl_recv+0x1e4>)
    d996:	e79d      	b.n	d8d4 <ctl_recv+0x40>
	k_delayed_work_cancel(&tx->retransmit);
    d998:	4838      	ldr	r0, [pc, #224]	; (da7c <ctl_recv+0x1e8>)
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    d99a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; da88 <ctl_recv+0x1f4>
	k_delayed_work_cancel(&tx->retransmit);
    d99e:	f012 fc4b 	bl	20238 <k_delayed_work_cancel>
	tx->seg[seg_idx] = NULL;
    d9a2:	f04f 0900 	mov.w	r9, #0
		ack &= ~BIT(bit - 1);
    d9a6:	f04f 0a01 	mov.w	sl, #1
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    d9aa:	2f00      	cmp	r7, #0
    d9ac:	fa97 f6a7 	rbit	r6, r7
    d9b0:	fab6 f686 	clz	r6, r6
    d9b4:	bf08      	it	eq
    d9b6:	f04f 36ff 	moveq.w	r6, #4294967295
	while ((bit = find_lsb_set(ack))) {
    d9ba:	1c75      	adds	r5, r6, #1
    d9bc:	d106      	bne.n	d9cc <ctl_recv+0x138>
	if (tx->nack_count) {
    d9be:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    d9c2:	b1e3      	cbz	r3, d9fe <ctl_recv+0x16a>
		seg_tx_send_unacked(tx);
    d9c4:	4829      	ldr	r0, [pc, #164]	; (da6c <ctl_recv+0x1d8>)
    d9c6:	f7ff feab 	bl	d720 <seg_tx_send_unacked>
    d9ca:	e7a3      	b.n	d914 <ctl_recv+0x80>
		if (tx->seg[bit - 1]) {
    d9cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    d9d0:	685b      	ldr	r3, [r3, #4]
    d9d2:	b17b      	cbz	r3, d9f4 <ctl_recv+0x160>
			seg_tx_done(tx, bit - 1);
    d9d4:	b2f5      	uxtb	r5, r6
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    d9d6:	1c69      	adds	r1, r5, #1
    d9d8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    d9dc:	4640      	mov	r0, r8
    d9de:	f010 fe03 	bl	1e5e8 <k_mem_slab_free>
	tx->nack_count--;
    d9e2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	tx->seg[seg_idx] = NULL;
    d9e6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
	tx->nack_count--;
    d9ea:	3b01      	subs	r3, #1
	tx->seg[seg_idx] = NULL;
    d9ec:	f8c5 9004 	str.w	r9, [r5, #4]
	tx->nack_count--;
    d9f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		ack &= ~BIT(bit - 1);
    d9f4:	fa0a f606 	lsl.w	r6, sl, r6
    d9f8:	ea27 0706 	bic.w	r7, r7, r6
    d9fc:	e7d5      	b.n	d9aa <ctl_recv+0x116>
		seg_tx_complete(tx, 0);
    d9fe:	4629      	mov	r1, r5
    da00:	481a      	ldr	r0, [pc, #104]	; (da6c <ctl_recv+0x1d8>)
    da02:	f7ff fe5f 	bl	d6c4 <seg_tx_complete>
    da06:	e785      	b.n	d914 <ctl_recv+0x80>
		return bt_mesh_hb_recv(rx, buf);
    da08:	4611      	mov	r1, r2
}
    da0a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return bt_mesh_hb_recv(rx, buf);
    da0e:	f001 b953 	b.w	ecb8 <bt_mesh_hb_recv>
			return bt_mesh_friend_poll(rx, buf);
    da12:	4631      	mov	r1, r6
}
    da14:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_poll(rx, buf);
    da18:	f005 b8e8 	b.w	12bec <bt_mesh_friend_poll>
			return bt_mesh_friend_req(rx, buf);
    da1c:	4631      	mov	r1, r6
}
    da1e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_req(rx, buf);
    da22:	f005 b9b5 	b.w	12d90 <bt_mesh_friend_req>
			return bt_mesh_friend_clear(rx, buf);
    da26:	4631      	mov	r1, r6
}
    da28:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_clear(rx, buf);
    da2c:	f004 bfd0 	b.w	129d0 <bt_mesh_friend_clear>
			return bt_mesh_friend_clear_cfm(rx, buf);
    da30:	4631      	mov	r1, r6
}
    da32:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_clear_cfm(rx, buf);
    da36:	f005 b961 	b.w	12cfc <bt_mesh_friend_clear_cfm>
			return bt_mesh_friend_sub_add(rx, buf);
    da3a:	4631      	mov	r1, r6
}
    da3c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_sub_add(rx, buf);
    da40:	f005 b82a 	b.w	12a98 <bt_mesh_friend_sub_add>
			return bt_mesh_friend_sub_rem(rx, buf);
    da44:	4631      	mov	r1, r6
}
    da46:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_sub_rem(rx, buf);
    da4a:	f005 b87b 	b.w	12b44 <bt_mesh_friend_sub_rem>
	BT_WARN("Unhandled TransOpCode 0x%02x", ctl_op);
    da4e:	4652      	mov	r2, sl
    da50:	2157      	movs	r1, #87	; 0x57
    da52:	480b      	ldr	r0, [pc, #44]	; (da80 <ctl_recv+0x1ec>)
    da54:	f014 fa39 	bl	21eca <printk>
	return -ENOENT;
    da58:	f06f 0501 	mvn.w	r5, #1
    da5c:	e75a      	b.n	d914 <ctl_recv+0x80>
		BT_WARN("No matching TX context for ack");
    da5e:	2157      	movs	r1, #87	; 0x57
    da60:	4808      	ldr	r0, [pc, #32]	; (da84 <ctl_recv+0x1f0>)
    da62:	e737      	b.n	d8d4 <ctl_recv+0x40>
    da64:	0002cb4a 	.word	0x0002cb4a
    da68:	20001ab8 	.word	0x20001ab8
    da6c:	20001d50 	.word	0x20001d50
    da70:	0002cb65 	.word	0x0002cb65
    da74:	0002cb85 	.word	0x0002cb85
    da78:	0002cb97 	.word	0x0002cb97
    da7c:	20001da0 	.word	0x20001da0
    da80:	0002cbbc 	.word	0x0002cbbc
    da84:	0002cbde 	.word	0x0002cbde
    da88:	20000ef4 	.word	0x20000ef4

0000da8c <send_seg>:
{
    da8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (seg_tx[i].nack_count) {
    da90:	4c82      	ldr	r4, [pc, #520]	; (dc9c <send_seg+0x210>)
{
    da92:	b08f      	sub	sp, #60	; 0x3c
    da94:	4605      	mov	r5, r0
    da96:	460e      	mov	r6, r1
    da98:	9303      	str	r3, [sp, #12]
		if (seg_tx[i].nack_count) {
    da9a:	8901      	ldrh	r1, [r0, #8]
    da9c:	6843      	ldr	r3, [r0, #4]
    da9e:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
{
    daa2:	9f18      	ldr	r7, [sp, #96]	; 0x60
    daa4:	4693      	mov	fp, r2
    daa6:	889a      	ldrh	r2, [r3, #4]
		if (seg_tx[i].nack_count) {
    daa8:	b140      	cbz	r0, dabc <send_seg+0x30>
		BT_ERR("No multi-segment message contexts available");
    daaa:	487d      	ldr	r0, [pc, #500]	; (dca0 <send_seg+0x214>)
    daac:	2145      	movs	r1, #69	; 0x45
    daae:	f014 fa0c 	bl	21eca <printk>
		return -EBUSY;
    dab2:	f06f 000f 	mvn.w	r0, #15
}
    dab6:	b00f      	add	sp, #60	; 0x3c
    dab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ctl_op) {
    dabc:	2f00      	cmp	r7, #0
    dabe:	d077      	beq.n	dbb0 <send_seg+0x124>
		tx->hdr = TRANS_CTL_HDR(*ctl_op, 1);
    dac0:	783b      	ldrb	r3, [r7, #0]
    dac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
		tx->hdr = SEG_HDR(1, net_tx->aid);
    dac6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	tx->src = net_tx->src;
    daca:	8721      	strh	r1, [r4, #56]	; 0x38
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    dacc:	88b1      	ldrh	r1, [r6, #4]
	tx->dst = net_tx->ctx->addr;
    dace:	8762      	strh	r2, [r4, #58]	; 0x3a
		return BT_MESH_APP_SEG_SDU_MAX;
    dad0:	2f00      	cmp	r7, #0
	tx->len = sdu->len;
    dad2:	87a1      	strh	r1, [r4, #60]	; 0x3c
	tx->seg_o = 0;
    dad4:	f04f 0200 	mov.w	r2, #0
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    dad8:	f101 33ff 	add.w	r3, r1, #4294967295
		return BT_MESH_APP_SEG_SDU_MAX;
    dadc:	bf18      	it	ne
    dade:	f04f 0908 	movne.w	r9, #8
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    dae2:	4970      	ldr	r1, [pc, #448]	; (dca4 <send_seg+0x218>)
	tx->seg_o = 0;
    dae4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
		return BT_MESH_APP_SEG_SDU_MAX;
    dae8:	bf08      	it	eq
    daea:	f04f 090c 	moveq.w	r9, #12
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    daee:	fb93 f3f9 	sdiv	r3, r3, r9
    daf2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	tx->nack_count = tx->seg_n + 1;
    daf6:	f103 0301 	add.w	r3, r3, #1
    dafa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    dafe:	680b      	ldr	r3, [r1, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    db00:	f3bf 8f5b 	dmb	ish
    db04:	6888      	ldr	r0, [r1, #8]
    db06:	f3bf 8f5b 	dmb	ish
    db0a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    db0e:	6849      	ldr	r1, [r1, #4]
    db10:	f8df 8194 	ldr.w	r8, [pc, #404]	; dca8 <send_seg+0x21c>
    db14:	eba3 0300 	sub.w	r3, r3, r0
    db18:	ea4f 2013 	mov.w	r0, r3, lsr #8
    db1c:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
    db20:	e9c4 300c 	strd	r3, r0, [r4, #48]	; 0x30
	tx->cb_data = cb_data;
    db24:	9b03      	ldr	r3, [sp, #12]
	tx->sub = net_tx->sub;
    db26:	6828      	ldr	r0, [r5, #0]
	tx->cb_data = cb_data;
    db28:	64e3      	str	r3, [r4, #76]	; 0x4c
	tx->attempts = SEG_RETRANSMIT_ATTEMPTS;
    db2a:	f04f 0304 	mov.w	r3, #4
    db2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	tx->cb = cb;
    db32:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	tx->xmit = net_tx->xmit;
    db36:	7aab      	ldrb	r3, [r5, #10]
    db38:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	tx->aszmic = net_tx->aszmic;
    db3c:	7ae9      	ldrb	r1, [r5, #11]
    db3e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	tx->sub = net_tx->sub;
    db42:	6020      	str	r0, [r4, #0]
	tx->aszmic = net_tx->aszmic;
    db44:	f3c1 0140 	ubfx	r1, r1, #1, #1
    db48:	f361 0382 	bfi	r3, r1, #2, #1
	tx->friend_cred = net_tx->friend_cred;
    db4c:	7ae9      	ldrb	r1, [r5, #11]
	tx->seg_pending = 0;
    db4e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
	tx->friend_cred = net_tx->friend_cred;
    db52:	f3c1 0100 	ubfx	r1, r1, #0, #1
    db56:	f361 1345 	bfi	r3, r1, #5, #1
	tx->ctl = !!ctl_op;
    db5a:	bf18      	it	ne
    db5c:	2201      	movne	r2, #1
    db5e:	f003 03f6 	and.w	r3, r3, #246	; 0xf6
    db62:	f362 0341 	bfi	r3, r2, #1, #1
    db66:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	tx->ttl = net_tx->ctx->send_ttl;
    db6a:	686b      	ldr	r3, [r5, #4]
    db6c:	7adb      	ldrb	r3, [r3, #11]
    db6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
					    tx->seg_n + 1) &&
    db72:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	    !bt_mesh_friend_queue_has_space(tx->sub->net_idx, net_tx->src,
    db76:	8b80      	ldrh	r0, [r0, #28]
    db78:	8929      	ldrh	r1, [r5, #8]
					    tx->seg_n + 1) &&
    db7a:	3301      	adds	r3, #1
	    !bt_mesh_friend_queue_has_space(tx->sub->net_idx, net_tx->src,
    db7c:	b2db      	uxtb	r3, r3
    db7e:	9300      	str	r3, [sp, #0]
    db80:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    db82:	4b49      	ldr	r3, [pc, #292]	; (dca8 <send_seg+0x21c>)
    db84:	f005 faa4 	bl	130d0 <bt_mesh_friend_queue_has_space>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) &&
    db88:	2800      	cmp	r0, #0
    db8a:	d17b      	bne.n	dc84 <send_seg+0x1f8>
					    tx->seg_n + 1) &&
    db8c:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
    db90:	2b00      	cmp	r3, #0
    db92:	dd77      	ble.n	dc84 <send_seg+0x1f8>
		BT_ERR("Not enough space in Friend Queue for %u segments",
    db94:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    db98:	4844      	ldr	r0, [pc, #272]	; (dcac <send_seg+0x220>)
    db9a:	3201      	adds	r2, #1
    db9c:	2145      	movs	r1, #69	; 0x45
    db9e:	f014 f994 	bl	21eca <printk>
		seg_tx_reset(tx);
    dba2:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
			seg_tx_reset(tx);
    dba6:	f7ff fd3f 	bl	d628 <seg_tx_reset>
			return -ENOBUFS;
    dbaa:	f06f 0036 	mvn.w	r0, #54	; 0x36
    dbae:	e782      	b.n	dab6 <send_seg+0x2a>
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
    dbb0:	885b      	ldrh	r3, [r3, #2]
    dbb2:	3303      	adds	r3, #3
    dbb4:	b29b      	uxth	r3, r3
    dbb6:	2b01      	cmp	r3, #1
		tx->hdr = SEG_HDR(1, net_tx->aid);
    dbb8:	bf85      	ittet	hi
    dbba:	7aeb      	ldrbhi	r3, [r5, #11]
    dbbc:	f3c3 0385 	ubfxhi	r3, r3, #2, #6
		tx->hdr = SEG_HDR(0, 0);
    dbc0:	2380      	movls	r3, #128	; 0x80
		tx->hdr = SEG_HDR(1, net_tx->aid);
    dbc2:	f063 033f 	ornhi	r3, r3, #63	; 0x3f
    dbc6:	e77e      	b.n	dac6 <send_seg+0x3a>
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    dbc8:	2200      	movs	r2, #0
    dbca:	2300      	movs	r3, #0
    dbcc:	a906      	add	r1, sp, #24
    dbce:	4838      	ldr	r0, [pc, #224]	; (dcb0 <send_seg+0x224>)
    dbd0:	f010 fcb0 	bl	1e534 <k_mem_slab_alloc>
		if (err) {
    dbd4:	9002      	str	r0, [sp, #8]
    dbd6:	b128      	cbz	r0, dbe4 <send_seg+0x158>
			BT_ERR("Out of segment buffers");
    dbd8:	4836      	ldr	r0, [pc, #216]	; (dcb4 <send_seg+0x228>)
    dbda:	2145      	movs	r1, #69	; 0x45
    dbdc:	f014 f975 	bl	21eca <printk>
			seg_tx_reset(tx);
    dbe0:	482e      	ldr	r0, [pc, #184]	; (dc9c <send_seg+0x210>)
    dbe2:	e7e0      	b.n	dba6 <send_seg+0x11a>
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    dbe4:	88b2      	ldrh	r2, [r6, #4]
    dbe6:	f8dd a018 	ldr.w	sl, [sp, #24]
    dbea:	454a      	cmp	r2, r9
    dbec:	bf28      	it	cs
    dbee:	464a      	movcs	r2, r9
    dbf0:	4611      	mov	r1, r2
    dbf2:	4630      	mov	r0, r6
    dbf4:	9205      	str	r2, [sp, #20]
    dbf6:	f00e ff69 	bl	1cacc <net_buf_simple_pull_mem>
    dbfa:	9a05      	ldr	r2, [sp, #20]
    dbfc:	4601      	mov	r1, r0
    dbfe:	4650      	mov	r0, sl
		tx->seg[seg_o] = buf;
    dc00:	eb04 0a87 	add.w	sl, r4, r7, lsl #2
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    dc04:	f016 faa3 	bl	2414e <memcpy>
		tx->seg[seg_o] = buf;
    dc08:	9b06      	ldr	r3, [sp, #24]
    dc0a:	f8ca 3004 	str.w	r3, [sl, #4]
			NET_BUF_SIMPLE_DEFINE(seg, 16);
    dc0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    dc12:	ab0a      	add	r3, sp, #40	; 0x28
    dc14:	e9cd 2308 	strd	r2, r3, [sp, #32]
    dc18:	9307      	str	r3, [sp, #28]
			seg_tx_buf_build(tx, seg_o, &seg);
    dc1a:	ab07      	add	r3, sp, #28
    dc1c:	461a      	mov	r2, r3
    dc1e:	4639      	mov	r1, r7
    dc20:	481e      	ldr	r0, [pc, #120]	; (dc9c <send_seg+0x210>)
    dc22:	f017 ffeb 	bl	25bfc <seg_tx_buf_build>
			if (seg_o == tx->seg_n) {
    dc26:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
			if (bt_mesh_friend_enqueue_tx(
    dc2a:	ab07      	add	r3, sp, #28
				    tx->seg_n + 1, &seg) &&
    dc2c:	1c4a      	adds	r2, r1, #1
			if (bt_mesh_friend_enqueue_tx(
    dc2e:	9300      	str	r3, [sp, #0]
    dc30:	428f      	cmp	r7, r1
    dc32:	bf0c      	ite	eq
    dc34:	2102      	moveq	r1, #2
    dc36:	2101      	movne	r1, #1
    dc38:	b2d3      	uxtb	r3, r2
    dc3a:	4628      	mov	r0, r5
    dc3c:	9a04      	ldr	r2, [sp, #16]
    dc3e:	f005 fb13 	bl	13268 <bt_mesh_friend_enqueue_tx>
    dc42:	b158      	cbz	r0, dc5c <send_seg+0x1d0>
			    BT_MESH_ADDR_IS_UNICAST(net_tx->ctx->addr)) {
    dc44:	686b      	ldr	r3, [r5, #4]
				    tx->seg_n + 1, &seg) &&
    dc46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    dc4a:	2b00      	cmp	r3, #0
    dc4c:	dd06      	ble.n	dc5c <send_seg+0x1d0>
				k_mem_slab_free(&segs, &buf);
    dc4e:	a906      	add	r1, sp, #24
    dc50:	4817      	ldr	r0, [pc, #92]	; (dcb0 <send_seg+0x224>)
    dc52:	f010 fcc9 	bl	1e5e8 <k_mem_slab_free>
				tx->seg[seg_o] = NULL;
    dc56:	9b02      	ldr	r3, [sp, #8]
    dc58:	f8ca 3004 	str.w	r3, [sl, #4]
    dc5c:	f108 0801 	add.w	r8, r8, #1
	for (seg_o = 0U; sdu->len; seg_o++) {
    dc60:	f8b6 a004 	ldrh.w	sl, [r6, #4]
    dc64:	fa5f f788 	uxtb.w	r7, r8
    dc68:	f1ba 0f00 	cmp.w	sl, #0
    dc6c:	d1ac      	bne.n	dbc8 <send_seg+0x13c>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !tx->seg[0]) {
    dc6e:	6864      	ldr	r4, [r4, #4]
		seg_tx_reset(tx);
    dc70:	480a      	ldr	r0, [pc, #40]	; (dc9c <send_seg+0x210>)
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !tx->seg[0]) {
    dc72:	b97c      	cbnz	r4, dc94 <send_seg+0x208>
		seg_tx_reset(tx);
    dc74:	f7ff fcd8 	bl	d628 <seg_tx_reset>
		send_cb_finalize(cb, cb_data);
    dc78:	4658      	mov	r0, fp
    dc7a:	9903      	ldr	r1, [sp, #12]
    dc7c:	f017 ffac 	bl	25bd8 <send_cb_finalize>
		return 0;
    dc80:	4620      	mov	r0, r4
    dc82:	e718      	b.n	dab6 <send_seg+0x2a>
    dc84:	2f00      	cmp	r7, #0
    dc86:	bf0c      	ite	eq
    dc88:	4643      	moveq	r3, r8
    dc8a:	2300      	movne	r3, #0
    dc8c:	9304      	str	r3, [sp, #16]
				type = BT_MESH_FRIEND_PDU_PARTIAL;
    dc8e:	f04f 0800 	mov.w	r8, #0
    dc92:	e7e5      	b.n	dc60 <send_seg+0x1d4>
	seg_tx_send_unacked(tx);
    dc94:	f7ff fd44 	bl	d720 <seg_tx_send_unacked>
	return 0;
    dc98:	4650      	mov	r0, sl
    dc9a:	e70c      	b.n	dab6 <send_seg+0x2a>
    dc9c:	20001d50 	.word	0x20001d50
    dca0:	0002cc77 	.word	0x0002cc77
    dca4:	20001ab8 	.word	0x20001ab8
    dca8:	20001d80 	.word	0x20001d80
    dcac:	0002cca8 	.word	0x0002cca8
    dcb0:	20000ef4 	.word	0x20000ef4
    dcb4:	0002ccde 	.word	0x0002ccde

0000dcb8 <send_unseg>:
{
    dcb8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    dcbc:	4604      	mov	r4, r0
    dcbe:	468a      	mov	sl, r1
    dcc0:	4690      	mov	r8, r2
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    dcc2:	7a81      	ldrb	r1, [r0, #10]
{
    dcc4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    dcc6:	4699      	mov	r9, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    dcc8:	2200      	movs	r2, #0
    dcca:	2300      	movs	r3, #0
    dccc:	2001      	movs	r0, #1
    dcce:	f7fd fce5 	bl	b69c <bt_mesh_adv_create>
	if (!buf) {
    dcd2:	4606      	mov	r6, r0
    dcd4:	b940      	cbnz	r0, dce8 <send_unseg+0x30>
		BT_ERR("Out of network buffers");
    dcd6:	2145      	movs	r1, #69	; 0x45
    dcd8:	4831      	ldr	r0, [pc, #196]	; (dda0 <send_unseg+0xe8>)
    dcda:	f014 f8f6 	bl	21eca <printk>
				return -ENOBUFS;
    dcde:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    dce2:	b002      	add	sp, #8
    dce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dce8:	f100 0508 	add.w	r5, r0, #8
    dcec:	2109      	movs	r1, #9
    dcee:	4628      	mov	r0, r5
    dcf0:	f00e fcd0 	bl	1c694 <net_buf_simple_reserve>
	if (ctl_op) {
    dcf4:	b327      	cbz	r7, dd40 <send_unseg+0x88>
		net_buf_add_u8(buf, TRANS_CTL_HDR(*ctl_op, 0));
    dcf6:	7839      	ldrb	r1, [r7, #0]
	return net_buf_simple_add_u8(&buf->b, val);
    dcf8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    dcfc:	4628      	mov	r0, r5
    dcfe:	f01a f942 	bl	27f86 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    dd02:	f8ba 2004 	ldrh.w	r2, [sl, #4]
    dd06:	f8da 1000 	ldr.w	r1, [sl]
    dd0a:	4628      	mov	r0, r5
    dd0c:	f01a f92f 	bl	27f6e <net_buf_simple_add_mem>
		if (!bt_mesh_friend_queue_has_space(tx->sub->net_idx,
    dd10:	6863      	ldr	r3, [r4, #4]
    dd12:	8921      	ldrh	r1, [r4, #8]
    dd14:	889a      	ldrh	r2, [r3, #4]
    dd16:	6823      	ldr	r3, [r4, #0]
    dd18:	2701      	movs	r7, #1
    dd1a:	8b98      	ldrh	r0, [r3, #28]
    dd1c:	9700      	str	r7, [sp, #0]
    dd1e:	2300      	movs	r3, #0
    dd20:	f005 f9d6 	bl	130d0 <bt_mesh_friend_queue_has_space>
    dd24:	bb28      	cbnz	r0, dd72 <send_unseg+0xba>
			if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    dd26:	6863      	ldr	r3, [r4, #4]
    dd28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    dd2c:	2b00      	cmp	r3, #0
    dd2e:	dd13      	ble.n	dd58 <send_unseg+0xa0>
				BT_ERR("Not enough space in Friend Queue");
    dd30:	2145      	movs	r1, #69	; 0x45
    dd32:	481c      	ldr	r0, [pc, #112]	; (dda4 <send_unseg+0xec>)
    dd34:	f014 f8c9 	bl	21eca <printk>
				net_buf_unref(buf);
    dd38:	4630      	mov	r0, r6
    dd3a:	f00e fd95 	bl	1c868 <net_buf_unref>
    dd3e:	e7ce      	b.n	dcde <send_unseg+0x26>
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
    dd40:	6863      	ldr	r3, [r4, #4]
    dd42:	885b      	ldrh	r3, [r3, #2]
    dd44:	3303      	adds	r3, #3
    dd46:	b29b      	uxth	r3, r3
    dd48:	2b01      	cmp	r3, #1
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    dd4a:	bf85      	ittet	hi
    dd4c:	7ae1      	ldrbhi	r1, [r4, #11]
    dd4e:	0889      	lsrhi	r1, r1, #2
	return net_buf_simple_add_u8(&buf->b, val);
    dd50:	4639      	movls	r1, r7
    dd52:	f041 0140 	orrhi.w	r1, r1, #64	; 0x40
    dd56:	e7d1      	b.n	dcfc <send_unseg+0x44>
				BT_WARN("No space in Friend Queue");
    dd58:	2157      	movs	r1, #87	; 0x57
    dd5a:	4813      	ldr	r0, [pc, #76]	; (dda8 <send_unseg+0xf0>)
    dd5c:	f014 f8b5 	bl	21eca <printk>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    dd60:	464b      	mov	r3, r9
    dd62:	4642      	mov	r2, r8
    dd64:	4631      	mov	r1, r6
    dd66:	4620      	mov	r0, r4
}
    dd68:	b002      	add	sp, #8
    dd6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    dd6e:	f7fe bac9 	b.w	c304 <bt_mesh_net_send>
		if (bt_mesh_friend_enqueue_tx(tx, BT_MESH_FRIEND_PDU_SINGLE,
    dd72:	2200      	movs	r2, #0
    dd74:	9500      	str	r5, [sp, #0]
    dd76:	463b      	mov	r3, r7
    dd78:	4611      	mov	r1, r2
    dd7a:	4620      	mov	r0, r4
    dd7c:	f005 fa74 	bl	13268 <bt_mesh_friend_enqueue_tx>
    dd80:	2800      	cmp	r0, #0
    dd82:	d0ed      	beq.n	dd60 <send_unseg+0xa8>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    dd84:	6863      	ldr	r3, [r4, #4]
					      NULL, 1, &buf->b) &&
    dd86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    dd8a:	2b00      	cmp	r3, #0
    dd8c:	dde8      	ble.n	dd60 <send_unseg+0xa8>
			net_buf_unref(buf);
    dd8e:	4630      	mov	r0, r6
    dd90:	f00e fd6a 	bl	1c868 <net_buf_unref>
			send_cb_finalize(cb, cb_data);
    dd94:	4640      	mov	r0, r8
    dd96:	4649      	mov	r1, r9
    dd98:	f017 ff1e 	bl	25bd8 <send_cb_finalize>
			return 0;
    dd9c:	2000      	movs	r0, #0
    dd9e:	e7a0      	b.n	dce2 <send_unseg+0x2a>
    dda0:	0002ccfa 	.word	0x0002ccfa
    dda4:	0002cd16 	.word	0x0002cd16
    dda8:	0002cd3c 	.word	0x0002cd3c

0000ddac <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
    ddac:	4b03      	ldr	r3, [pc, #12]	; (ddbc <bt_mesh_tx_in_progress+0x10>)
    ddae:	f893 0042 	ldrb.w	r0, [r3, #66]	; 0x42
}
    ddb2:	3000      	adds	r0, #0
    ddb4:	bf18      	it	ne
    ddb6:	2001      	movne	r0, #1
    ddb8:	4770      	bx	lr
    ddba:	bf00      	nop
    ddbc:	20001d50 	.word	0x20001d50

0000ddc0 <bt_mesh_ctl_send>:
{
    ddc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    ddc2:	6846      	ldr	r6, [r0, #4]
{
    ddc4:	461d      	mov	r5, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    ddc6:	7af3      	ldrb	r3, [r6, #11]
{
    ddc8:	b089      	sub	sp, #36	; 0x24
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    ddca:	2bff      	cmp	r3, #255	; 0xff
{
    ddcc:	4604      	mov	r4, r0
    ddce:	4617      	mov	r7, r2
    ddd0:	f88d 100f 	strb.w	r1, [sp, #15]
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    ddd4:	d119      	bne.n	de0a <bt_mesh_ctl_send+0x4a>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    ddd6:	f7fd fb07 	bl	b3e8 <bt_mesh_default_ttl_get>
    ddda:	72f0      	strb	r0, [r6, #11]
	net_buf_simple_init_with_data(&buf, data, data_len);
    dddc:	462a      	mov	r2, r5
    ddde:	4639      	mov	r1, r7
    dde0:	a805      	add	r0, sp, #20
    dde2:	f01a f86c 	bl	27ebe <net_buf_simple_init_with_data>
	if (data_len > BT_MESH_SDU_UNSEG_MAX) {
    dde6:	6863      	ldr	r3, [r4, #4]
    dde8:	2d0b      	cmp	r5, #11
		tx->ctx->send_rel = true;
    ddea:	bf84      	itt	hi
    ddec:	2201      	movhi	r2, #1
    ddee:	729a      	strbhi	r2, [r3, #10]
	tx->ctx->app_idx = BT_MESH_KEY_UNUSED;
    ddf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ddf4:	805a      	strh	r2, [r3, #2]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
    ddf6:	889a      	ldrh	r2, [r3, #4]
    ddf8:	b122      	cbz	r2, de04 <bt_mesh_ctl_send+0x44>
    ddfa:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
    ddfe:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    de02:	d20c      	bcs.n	de1e <bt_mesh_ctl_send+0x5e>
		BT_ERR("Invalid destination address");
    de04:	2145      	movs	r1, #69	; 0x45
    de06:	480f      	ldr	r0, [pc, #60]	; (de44 <bt_mesh_ctl_send+0x84>)
    de08:	e003      	b.n	de12 <bt_mesh_ctl_send+0x52>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
    de0a:	061b      	lsls	r3, r3, #24
    de0c:	d5e6      	bpl.n	dddc <bt_mesh_ctl_send+0x1c>
		BT_ERR("TTL too large (max 127)");
    de0e:	480e      	ldr	r0, [pc, #56]	; (de48 <bt_mesh_ctl_send+0x88>)
    de10:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid destination address");
    de12:	f014 f85a 	bl	21eca <printk>
		return -EINVAL;
    de16:	f06f 0015 	mvn.w	r0, #21
}
    de1a:	b009      	add	sp, #36	; 0x24
    de1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tx->ctx->send_rel) {
    de1e:	7a9a      	ldrb	r2, [r3, #10]
    de20:	f10d 030f 	add.w	r3, sp, #15
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
    de24:	9300      	str	r3, [sp, #0]
    de26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	if (tx->ctx->send_rel) {
    de28:	b12a      	cbz	r2, de36 <bt_mesh_ctl_send+0x76>
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
    de2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    de2c:	a905      	add	r1, sp, #20
    de2e:	4620      	mov	r0, r4
    de30:	f7ff fe2c 	bl	da8c <send_seg>
    de34:	e7f1      	b.n	de1a <bt_mesh_ctl_send+0x5a>
		return send_unseg(tx, &buf, cb, cb_data, &ctl_op);
    de36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    de38:	a905      	add	r1, sp, #20
    de3a:	4620      	mov	r0, r4
    de3c:	f7ff ff3c 	bl	dcb8 <send_unseg>
    de40:	e7eb      	b.n	de1a <bt_mesh_ctl_send+0x5a>
    de42:	bf00      	nop
    de44:	0002c7c9 	.word	0x0002c7c9
    de48:	0002c7ac 	.word	0x0002c7ac

0000de4c <seg_ack>:
{
    de4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    de4e:	4604      	mov	r4, r0
    de50:	b085      	sub	sp, #20
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);
    de52:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
    de56:	f01a fd08 	bl	2886a <z_impl_k_uptime_ticks>
    de5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    de5e:	fba0 6703 	umull	r6, r7, r0, r3
    de62:	fb03 7701 	mla	r7, r3, r1, r7
	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
    de66:	f854 2c08 	ldr.w	r2, [r4, #-8]
    de6a:	0bf3      	lsrs	r3, r6, #15
    de6c:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
    de70:	1a9b      	subs	r3, r3, r2
    de72:	f64e 2260 	movw	r2, #60000	; 0xea60
    de76:	4293      	cmp	r3, r2
    de78:	d90a      	bls.n	de90 <seg_ack+0x44>
		BT_WARN("Incomplete timer expired");
    de7a:	2157      	movs	r1, #87	; 0x57
    de7c:	481b      	ldr	r0, [pc, #108]	; (deec <seg_ack+0xa0>)
    de7e:	f014 f824 	bl	21eca <printk>
		seg_rx_reset(rx, false);
    de82:	2100      	movs	r1, #0
    de84:	4628      	mov	r0, r5
}
    de86:	b005      	add	sp, #20
    de88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		seg_rx_reset(rx, false);
    de8c:	f7ff bb36 	b.w	d4fc <seg_rx_reset>
		 rx->block, rx->obo);
    de90:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
    de94:	f834 2c18 	ldrh.w	r2, [r4, #-24]
    de98:	f834 1c16 	ldrh.w	r1, [r4, #-22]
    de9c:	f854 0c30 	ldr.w	r0, [r4, #-48]
    dea0:	09db      	lsrs	r3, r3, #7
    dea2:	9302      	str	r3, [sp, #8]
    dea4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    dea8:	9301      	str	r3, [sp, #4]
    deaa:	f1a4 0320 	sub.w	r3, r4, #32
    deae:	9300      	str	r3, [sp, #0]
    deb0:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    deb4:	f017 ffa2 	bl	25dfc <send_ack>
	timeout = ack_timeout(rx);
    deb8:	4628      	mov	r0, r5
    deba:	f017 fedd 	bl	25c78 <ack_timeout>
    debe:	f44f 4500 	mov.w	r5, #32768	; 0x8000
	k_delayed_work_submit(&rx->ack, K_MSEC(timeout));
    dec2:	ea20 76e0 	bic.w	r6, r0, r0, asr #31
    dec6:	2100      	movs	r1, #0
    dec8:	f240 30e7 	movw	r0, #999	; 0x3e7
    decc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ded0:	2300      	movs	r3, #0
    ded2:	fbc5 0106 	smlal	r0, r1, r5, r6
    ded6:	f7f2 f913 	bl	100 <__aeabi_uldivmod>
    deda:	4602      	mov	r2, r0
    dedc:	460b      	mov	r3, r1
    dede:	4620      	mov	r0, r4
}
    dee0:	b005      	add	sp, #20
    dee2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_delayed_work_submit(&rx->ack, K_MSEC(timeout));
    dee6:	f7ff bb03 	b.w	d4f0 <k_delayed_work_submit>
    deea:	bf00      	nop
    deec:	0002cc02 	.word	0x0002cc02

0000def0 <bt_mesh_trans_reset>:
{
    def0:	b508      	push	{r3, lr}
		seg_rx_reset(&seg_rx[i], true);
    def2:	2101      	movs	r1, #1
    def4:	480a      	ldr	r0, [pc, #40]	; (df20 <bt_mesh_trans_reset+0x30>)
    def6:	f7ff fb01 	bl	d4fc <seg_rx_reset>
		seg_tx_reset(&seg_tx[i]);
    defa:	480a      	ldr	r0, [pc, #40]	; (df24 <bt_mesh_trans_reset+0x34>)
    defc:	f7ff fb94 	bl	d628 <seg_tx_reset>
		if (virtual_addrs[i].ref) {
    df00:	4a09      	ldr	r2, [pc, #36]	; (df28 <bt_mesh_trans_reset+0x38>)
    df02:	8813      	ldrh	r3, [r2, #0]
    df04:	f3c3 030e 	ubfx	r3, r3, #0, #15
    df08:	b113      	cbz	r3, df10 <bt_mesh_trans_reset+0x20>
			virtual_addrs[i].ref = 0U;
    df0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    df0e:	8013      	strh	r3, [r2, #0]
	bt_mesh_rpl_clear();
    df10:	f017 ffc8 	bl	25ea4 <bt_mesh_rpl_clear>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    df14:	2009      	movs	r0, #9
}
    df16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    df1a:	f004 b855 	b.w	11fc8 <bt_mesh_settings_store_schedule>
    df1e:	bf00      	nop
    df20:	20001cf0 	.word	0x20001cf0
    df24:	20001d50 	.word	0x20001d50
    df28:	20004390 	.word	0x20004390

0000df2c <bt_mesh_trans_init>:
{
    df2c:	b538      	push	{r3, r4, r5, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    df2e:	4c09      	ldr	r4, [pc, #36]	; (df54 <bt_mesh_trans_init+0x28>)
    df30:	2530      	movs	r5, #48	; 0x30
    df32:	462a      	mov	r2, r5
    df34:	2100      	movs	r1, #0
    df36:	f104 0050 	add.w	r0, r4, #80	; 0x50
    df3a:	f016 f932 	bl	241a2 <memset>
    df3e:	4b06      	ldr	r3, [pc, #24]	; (df58 <bt_mesh_trans_init+0x2c>)
    df40:	6563      	str	r3, [r4, #84]	; 0x54
    df42:	4c06      	ldr	r4, [pc, #24]	; (df5c <bt_mesh_trans_init+0x30>)
    df44:	462a      	mov	r2, r5
    df46:	2100      	movs	r1, #0
    df48:	1960      	adds	r0, r4, r5
    df4a:	f016 f92a 	bl	241a2 <memset>
    df4e:	4b04      	ldr	r3, [pc, #16]	; (df60 <bt_mesh_trans_init+0x34>)
    df50:	6363      	str	r3, [r4, #52]	; 0x34
}
    df52:	bd38      	pop	{r3, r4, r5, pc}
    df54:	20001d50 	.word	0x20001d50
    df58:	00025df7 	.word	0x00025df7
    df5c:	20001cf0 	.word	0x20001cf0
    df60:	0000de4d 	.word	0x0000de4d

0000df64 <bt_mesh_va_add>:
{
    df64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!virtual_addrs[i].ref) {
    df66:	4c1b      	ldr	r4, [pc, #108]	; (dfd4 <bt_mesh_va_add+0x70>)
    df68:	8826      	ldrh	r6, [r4, #0]
    df6a:	f3c6 060e 	ubfx	r6, r6, #0, #15
    df6e:	b2b3      	uxth	r3, r6
{
    df70:	4605      	mov	r5, r0
    df72:	460f      	mov	r7, r1
	memcpy(va->uuid, uuid, ARRAY_SIZE(va->uuid));
    df74:	2210      	movs	r2, #16
		if (!virtual_addrs[i].ref) {
    df76:	b1ab      	cbz	r3, dfa4 <bt_mesh_va_add+0x40>
		if (!memcmp(uuid, virtual_addrs[i].uuid,
    df78:	1d21      	adds	r1, r4, #4
    df7a:	f016 f8c1 	bl	24100 <memcmp>
    df7e:	4605      	mov	r5, r0
    df80:	bb30      	cbnz	r0, dfd0 <bt_mesh_va_add+0x6c>
			*addr = virtual_addrs[i].addr;
    df82:	8863      	ldrh	r3, [r4, #2]
    df84:	803b      	strh	r3, [r7, #0]
			virtual_addrs[i].ref++;
    df86:	8823      	ldrh	r3, [r4, #0]
    df88:	1c5a      	adds	r2, r3, #1
    df8a:	f362 030e 	bfi	r3, r2, #0, #15
    df8e:	8023      	strh	r3, [r4, #0]
	store->changed = 1U;
    df90:	f3c3 2307 	ubfx	r3, r3, #8, #8
    df94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    df98:	2009      	movs	r0, #9
	store->changed = 1U;
    df9a:	7063      	strb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    df9c:	f004 f814 	bl	11fc8 <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
    dfa0:	4628      	mov	r0, r5
    dfa2:	e00b      	b.n	dfbc <bt_mesh_va_add+0x58>
	memcpy(va->uuid, uuid, ARRAY_SIZE(va->uuid));
    dfa4:	4601      	mov	r1, r0
    dfa6:	1d20      	adds	r0, r4, #4
    dfa8:	f016 f8d1 	bl	2414e <memcpy>
	err = bt_mesh_virtual_addr(uuid, &va->addr);
    dfac:	4628      	mov	r0, r5
    dfae:	1ca1      	adds	r1, r4, #2
    dfb0:	f001 f95c 	bl	f26c <bt_mesh_virtual_addr>
	if (err) {
    dfb4:	4605      	mov	r5, r0
    dfb6:	b110      	cbz	r0, dfbe <bt_mesh_va_add+0x5a>
		va->addr = BT_MESH_ADDR_UNASSIGNED;
    dfb8:	8066      	strh	r6, [r4, #2]
		return STATUS_UNSPECIFIED;
    dfba:	2010      	movs	r0, #16
}
    dfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	va->ref = 1;
    dfbe:	f248 0301 	movw	r3, #32769	; 0x8001
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    dfc2:	2009      	movs	r0, #9
	va->ref = 1;
    dfc4:	8023      	strh	r3, [r4, #0]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    dfc6:	f003 ffff 	bl	11fc8 <bt_mesh_settings_store_schedule>
	*addr = va->addr;
    dfca:	8863      	ldrh	r3, [r4, #2]
    dfcc:	803b      	strh	r3, [r7, #0]
    dfce:	e7e7      	b.n	dfa0 <bt_mesh_va_add+0x3c>
		return STATUS_INSUFF_RESOURCES;
    dfd0:	2005      	movs	r0, #5
    dfd2:	e7f3      	b.n	dfbc <bt_mesh_va_add+0x58>
    dfd4:	20004390 	.word	0x20004390

0000dfd8 <bt_mesh_va_del>:
{
    dfd8:	b538      	push	{r3, r4, r5, lr}
		if (virtual_addrs[i].ref &&
    dfda:	4c10      	ldr	r4, [pc, #64]	; (e01c <bt_mesh_va_del+0x44>)
    dfdc:	8823      	ldrh	r3, [r4, #0]
    dfde:	f3c3 030e 	ubfx	r3, r3, #0, #15
{
    dfe2:	460d      	mov	r5, r1
		if (virtual_addrs[i].ref &&
    dfe4:	b90b      	cbnz	r3, dfea <bt_mesh_va_del+0x12>
		return STATUS_CANNOT_REMOVE;
    dfe6:	200c      	movs	r0, #12
}
    dfe8:	bd38      	pop	{r3, r4, r5, pc}
		    !memcmp(uuid, virtual_addrs[i].uuid,
    dfea:	2210      	movs	r2, #16
    dfec:	1d21      	adds	r1, r4, #4
    dfee:	f016 f887 	bl	24100 <memcmp>
		if (virtual_addrs[i].ref &&
    dff2:	2800      	cmp	r0, #0
    dff4:	d1f7      	bne.n	dfe6 <bt_mesh_va_del+0xe>
	va->ref--;
    dff6:	8823      	ldrh	r3, [r4, #0]
    dff8:	f503 42ff 	add.w	r2, r3, #32640	; 0x7f80
    dffc:	327f      	adds	r2, #127	; 0x7f
    dffe:	f362 030e 	bfi	r3, r2, #0, #15
    e002:	8023      	strh	r3, [r4, #0]
	if (addr) {
    e004:	b10d      	cbz	r5, e00a <bt_mesh_va_del+0x32>
		*addr = va->addr;
    e006:	8863      	ldrh	r3, [r4, #2]
    e008:	802b      	strh	r3, [r5, #0]
	store->changed = 1U;
    e00a:	7863      	ldrb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    e00c:	2009      	movs	r0, #9
	store->changed = 1U;
    e00e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e012:	7063      	strb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    e014:	f003 ffd8 	bl	11fc8 <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
    e018:	2000      	movs	r0, #0
    e01a:	e7e5      	b.n	dfe8 <bt_mesh_va_del+0x10>
    e01c:	20004390 	.word	0x20004390

0000e020 <bt_mesh_va_label_get>:
{
    e020:	4602      	mov	r2, r0
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
    e022:	4808      	ldr	r0, [pc, #32]	; (e044 <bt_mesh_va_label_get+0x24>)
    e024:	8801      	ldrh	r1, [r0, #0]
    e026:	f3c1 010e 	ubfx	r1, r1, #0, #15
{
    e02a:	b508      	push	{r3, lr}
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
    e02c:	b111      	cbz	r1, e034 <bt_mesh_va_label_get+0x14>
    e02e:	8841      	ldrh	r1, [r0, #2]
    e030:	4291      	cmp	r1, r2
    e032:	d005      	beq.n	e040 <bt_mesh_va_label_get+0x20>
	BT_WARN("No matching Label UUID for 0x%04x", addr);
    e034:	4804      	ldr	r0, [pc, #16]	; (e048 <bt_mesh_va_label_get+0x28>)
    e036:	2157      	movs	r1, #87	; 0x57
    e038:	f013 ff47 	bl	21eca <printk>
	return NULL;
    e03c:	2000      	movs	r0, #0
}
    e03e:	bd08      	pop	{r3, pc}
			return virtual_addrs[i].uuid;
    e040:	3004      	adds	r0, #4
    e042:	e7fc      	b.n	e03e <bt_mesh_va_label_get+0x1e>
    e044:	20004390 	.word	0x20004390
    e048:	0002cae4 	.word	0x0002cae4

0000e04c <bt_mesh_trans_send>:
{
    e04c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e050:	4616      	mov	r6, r2
	if (msg->len < 1) {
    e052:	888a      	ldrh	r2, [r1, #4]
{
    e054:	b08b      	sub	sp, #44	; 0x2c
    e056:	4604      	mov	r4, r0
    e058:	460d      	mov	r5, r1
    e05a:	461f      	mov	r7, r3
	if (msg->len < 1) {
    e05c:	b932      	cbnz	r2, e06c <bt_mesh_trans_send+0x20>
		BT_ERR("Zero-length SDU not allowed");
    e05e:	4855      	ldr	r0, [pc, #340]	; (e1b4 <bt_mesh_trans_send+0x168>)
    e060:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid destination address");
    e062:	f013 ff32 	bl	21eca <printk>
		return -EINVAL;
    e066:	f06f 0015 	mvn.w	r0, #21
    e06a:	e007      	b.n	e07c <bt_mesh_trans_send+0x30>
	if (msg->len > BT_MESH_TX_SDU_MAX) {
    e06c:	2a78      	cmp	r2, #120	; 0x78
    e06e:	d908      	bls.n	e082 <bt_mesh_trans_send+0x36>
		BT_ERR("Not enough segment buffers for length %u", msg->len);
    e070:	4851      	ldr	r0, [pc, #324]	; (e1b8 <bt_mesh_trans_send+0x16c>)
    e072:	2145      	movs	r1, #69	; 0x45
    e074:	f013 ff29 	bl	21eca <printk>
		return -EMSGSIZE;
    e078:	f06f 0023 	mvn.w	r0, #35	; 0x23
}
    e07c:	b00b      	add	sp, #44	; 0x2c
    e07e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (net_buf_simple_tailroom(msg) < 4) {
    e082:	4608      	mov	r0, r1
    e084:	f019 ff6b 	bl	27f5e <net_buf_simple_tailroom>
    e088:	2803      	cmp	r0, #3
    e08a:	d802      	bhi.n	e092 <bt_mesh_trans_send+0x46>
		BT_ERR("Insufficient tailroom for Transport MIC");
    e08c:	2145      	movs	r1, #69	; 0x45
    e08e:	484b      	ldr	r0, [pc, #300]	; (e1bc <bt_mesh_trans_send+0x170>)
    e090:	e7e7      	b.n	e062 <bt_mesh_trans_send+0x16>
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    e092:	f8d4 8004 	ldr.w	r8, [r4, #4]
    e096:	f898 300b 	ldrb.w	r3, [r8, #11]
    e09a:	2bff      	cmp	r3, #255	; 0xff
    e09c:	d116      	bne.n	e0cc <bt_mesh_trans_send+0x80>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    e09e:	f7fd f9a3 	bl	b3e8 <bt_mesh_default_ttl_get>
    e0a2:	f888 000b 	strb.w	r0, [r8, #11]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
    e0a6:	88ab      	ldrh	r3, [r5, #4]
    e0a8:	6860      	ldr	r0, [r4, #4]
    e0aa:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = true;
    e0ac:	bf84      	itt	hi
    e0ae:	2301      	movhi	r3, #1
    e0b0:	7283      	strbhi	r3, [r0, #10]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
    e0b2:	8883      	ldrh	r3, [r0, #4]
    e0b4:	b13b      	cbz	r3, e0c6 <bt_mesh_trans_send+0x7a>
    e0b6:	b21b      	sxth	r3, r3
    e0b8:	2b00      	cmp	r3, #0
    e0ba:	dc0c      	bgt.n	e0d6 <bt_mesh_trans_send+0x8a>
	     BT_MESH_IS_DEV_KEY(tx->ctx->app_idx))) {
    e0bc:	8843      	ldrh	r3, [r0, #2]
    e0be:	3303      	adds	r3, #3
	    (!BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) &&
    e0c0:	b29b      	uxth	r3, r3
    e0c2:	2b01      	cmp	r3, #1
    e0c4:	d807      	bhi.n	e0d6 <bt_mesh_trans_send+0x8a>
		BT_ERR("Invalid destination address");
    e0c6:	2145      	movs	r1, #69	; 0x45
    e0c8:	483d      	ldr	r0, [pc, #244]	; (e1c0 <bt_mesh_trans_send+0x174>)
    e0ca:	e7ca      	b.n	e062 <bt_mesh_trans_send+0x16>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
    e0cc:	061b      	lsls	r3, r3, #24
    e0ce:	d5ea      	bpl.n	e0a6 <bt_mesh_trans_send+0x5a>
		BT_ERR("TTL too large (max 127)");
    e0d0:	2145      	movs	r1, #69	; 0x45
    e0d2:	483c      	ldr	r0, [pc, #240]	; (e1c4 <bt_mesh_trans_send+0x178>)
    e0d4:	e7c5      	b.n	e062 <bt_mesh_trans_send+0x16>
	err = bt_mesh_keys_resolve(tx->ctx, &tx->sub, &key, &aid);
    e0d6:	f10d 030f 	add.w	r3, sp, #15
    e0da:	aa04      	add	r2, sp, #16
    e0dc:	4621      	mov	r1, r4
    e0de:	f7ff f957 	bl	d390 <bt_mesh_keys_resolve>
	if (err) {
    e0e2:	2800      	cmp	r0, #0
    e0e4:	d1ca      	bne.n	e07c <bt_mesh_trans_send+0x30>
	tx->xmit = bt_mesh_net_transmit_get();
    e0e6:	f7fd f999 	bl	b41c <bt_mesh_net_transmit_get>
	tx->aid = aid;
    e0ea:	7ae3      	ldrb	r3, [r4, #11]
    e0ec:	f89d 200f 	ldrb.w	r2, [sp, #15]
	tx->xmit = bt_mesh_net_transmit_get();
    e0f0:	72a0      	strb	r0, [r4, #10]
	tx->aid = aid;
    e0f2:	f362 0387 	bfi	r3, r2, #2, #6
    e0f6:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
    e0f8:	6863      	ldr	r3, [r4, #4]
    e0fa:	f893 900a 	ldrb.w	r9, [r3, #10]
    e0fe:	f1b9 0f00 	cmp.w	r9, #0
    e102:	d008      	beq.n	e116 <bt_mesh_trans_send+0xca>
    e104:	4628      	mov	r0, r5
    e106:	f019 ff2a 	bl	27f5e <net_buf_simple_tailroom>
    e10a:	2807      	cmp	r0, #7
    e10c:	bf94      	ite	ls
    e10e:	f04f 0900 	movls.w	r9, #0
    e112:	f04f 0901 	movhi.w	r9, #1
    e116:	7ae3      	ldrb	r3, [r4, #11]
	err = trans_encrypt(tx, key, msg);
    e118:	f8dd 8010 	ldr.w	r8, [sp, #16]
    e11c:	f369 0341 	bfi	r3, r9, #1, #1
    e120:	72e3      	strb	r3, [r4, #11]
	struct bt_mesh_app_crypto_ctx crypto = {
    e122:	220e      	movs	r2, #14
    e124:	2100      	movs	r1, #0
    e126:	f10d 001a 	add.w	r0, sp, #26
    e12a:	f016 f83a 	bl	241a2 <memset>
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    e12e:	6862      	ldr	r2, [r4, #4]
	struct bt_mesh_app_crypto_ctx crypto = {
    e130:	f88d 9015 	strb.w	r9, [sp, #21]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    e134:	8853      	ldrh	r3, [r2, #2]
    e136:	3303      	adds	r3, #3
    e138:	b29b      	uxth	r3, r3
    e13a:	2b01      	cmp	r3, #1
    e13c:	bf8c      	ite	hi
    e13e:	2300      	movhi	r3, #0
    e140:	2301      	movls	r3, #1
    e142:	f88d 3014 	strb.w	r3, [sp, #20]
	struct bt_mesh_app_crypto_ctx crypto = {
    e146:	8923      	ldrh	r3, [r4, #8]
    e148:	f8ad 3016 	strh.w	r3, [sp, #22]
    e14c:	8893      	ldrh	r3, [r2, #4]
		.seq_num = bt_mesh.seq,
    e14e:	4a1e      	ldr	r2, [pc, #120]	; (e1c8 <bt_mesh_trans_send+0x17c>)
	struct bt_mesh_app_crypto_ctx crypto = {
    e150:	f8ad 3018 	strh.w	r3, [sp, #24]
    e154:	6853      	ldr	r3, [r2, #4]
    e156:	9307      	str	r3, [sp, #28]
		.iv_index = BT_MESH_NET_IVI_TX,
    e158:	6813      	ldr	r3, [r2, #0]
    e15a:	f3bf 8f5b 	dmb	ish
    e15e:	6892      	ldr	r2, [r2, #8]
    e160:	f3bf 8f5b 	dmb	ish
    e164:	f3c2 0280 	ubfx	r2, r2, #2, #1
    e168:	1a9b      	subs	r3, r3, r2
	struct bt_mesh_app_crypto_ctx crypto = {
    e16a:	9308      	str	r3, [sp, #32]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
    e16c:	6863      	ldr	r3, [r4, #4]
    e16e:	8898      	ldrh	r0, [r3, #4]
    e170:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    e174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    e178:	d202      	bcs.n	e180 <bt_mesh_trans_send+0x134>
		crypto.ad = bt_mesh_va_label_get(tx->ctx->addr);
    e17a:	f7ff ff51 	bl	e020 <bt_mesh_va_label_get>
    e17e:	9009      	str	r0, [sp, #36]	; 0x24
	return bt_mesh_app_encrypt(key, &crypto, msg);
    e180:	462a      	mov	r2, r5
    e182:	a905      	add	r1, sp, #20
    e184:	4640      	mov	r0, r8
    e186:	f017 ffe7 	bl	26158 <bt_mesh_app_encrypt>
	if (err) {
    e18a:	2800      	cmp	r0, #0
    e18c:	f47f af76 	bne.w	e07c <bt_mesh_trans_send+0x30>
	if (tx->ctx->send_rel) {
    e190:	6863      	ldr	r3, [r4, #4]
    e192:	7a9b      	ldrb	r3, [r3, #10]
		err = send_seg(tx, msg, cb, cb_data, NULL);
    e194:	9000      	str	r0, [sp, #0]
	if (tx->ctx->send_rel) {
    e196:	b133      	cbz	r3, e1a6 <bt_mesh_trans_send+0x15a>
		err = send_seg(tx, msg, cb, cb_data, NULL);
    e198:	463b      	mov	r3, r7
    e19a:	4632      	mov	r2, r6
    e19c:	4629      	mov	r1, r5
    e19e:	4620      	mov	r0, r4
    e1a0:	f7ff fc74 	bl	da8c <send_seg>
    e1a4:	e76a      	b.n	e07c <bt_mesh_trans_send+0x30>
		err = send_unseg(tx, msg, cb, cb_data, NULL);
    e1a6:	463b      	mov	r3, r7
    e1a8:	4632      	mov	r2, r6
    e1aa:	4629      	mov	r1, r5
    e1ac:	4620      	mov	r0, r4
    e1ae:	f7ff fd83 	bl	dcb8 <send_unseg>
    e1b2:	e763      	b.n	e07c <bt_mesh_trans_send+0x30>
    e1b4:	0002ca68 	.word	0x0002ca68
    e1b8:	0002ca89 	.word	0x0002ca89
    e1bc:	0002cab7 	.word	0x0002cab7
    e1c0:	0002c7c9 	.word	0x0002c7c9
    e1c4:	0002c7ac 	.word	0x0002c7ac
    e1c8:	20001ab8 	.word	0x20001ab8

0000e1cc <sdu_recv>:
{
    e1cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e1d0:	4691      	mov	r9, r2
    e1d2:	b08b      	sub	sp, #44	; 0x2c
	struct decrypt_ctx ctx = {
    e1d4:	220e      	movs	r2, #14
{
    e1d6:	4604      	mov	r4, r0
    e1d8:	460f      	mov	r7, r1
	struct decrypt_ctx ctx = {
    e1da:	eb0d 0002 	add.w	r0, sp, r2
    e1de:	2100      	movs	r1, #0
{
    e1e0:	4698      	mov	r8, r3
    e1e2:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	struct decrypt_ctx ctx = {
    e1e6:	f015 ffdc 	bl	241a2 <memset>
			.dev_key = !AKF(&hdr),
    e1ea:	ea6f 1397 	mvn.w	r3, r7, lsr #6
    e1ee:	f003 0301 	and.w	r3, r3, #1
    e1f2:	f88d 3008 	strb.w	r3, [sp, #8]
			.dst = rx->ctx.recv_dst,
    e1f6:	8960      	ldrh	r0, [r4, #10]
	struct decrypt_ctx ctx = {
    e1f8:	8923      	ldrh	r3, [r4, #8]
    e1fa:	f88d 9009 	strb.w	r9, [sp, #9]
    e1fe:	f8ad 300a 	strh.w	r3, [sp, #10]
    e202:	f8ad 000c 	strh.w	r0, [sp, #12]
    e206:	b375      	cbz	r5, e266 <sdu_recv+0x9a>
    e208:	692a      	ldr	r2, [r5, #16]
    e20a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    e20e:	9204      	str	r2, [sp, #16]
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    e210:	4a16      	ldr	r2, [pc, #88]	; (e26c <sdu_recv+0xa0>)
    e212:	7d23      	ldrb	r3, [r4, #20]
    e214:	6812      	ldr	r2, [r2, #0]
	struct decrypt_ctx ctx = {
    e216:	9509      	str	r5, [sp, #36]	; 0x24
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    e218:	f003 0101 	and.w	r1, r3, #1
    e21c:	1a52      	subs	r2, r2, r1
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !rx->local_match) {
    e21e:	065b      	lsls	r3, r3, #25
	struct decrypt_ctx ctx = {
    e220:	9205      	str	r2, [sp, #20]
    e222:	e9cd 8607 	strd	r8, r6, [sp, #28]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !rx->local_match) {
    e226:	d51a      	bpl.n	e25e <sdu_recv+0x92>
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    e228:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    e22c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    e230:	d202      	bcs.n	e238 <sdu_recv+0x6c>
		ctx.crypto.ad = bt_mesh_va_label_get(rx->ctx.recv_dst);
    e232:	f7ff fef5 	bl	e020 <bt_mesh_va_label_get>
    e236:	9006      	str	r0, [sp, #24]
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    e238:	ab02      	add	r3, sp, #8
    e23a:	9300      	str	r3, [sp, #0]
    e23c:	4622      	mov	r2, r4
    e23e:	4b0c      	ldr	r3, [pc, #48]	; (e270 <sdu_recv+0xa4>)
    e240:	f89d 0008 	ldrb.w	r0, [sp, #8]
    e244:	f007 013f 	and.w	r1, r7, #63	; 0x3f
    e248:	f7ff f8f8 	bl	d43c <bt_mesh_app_key_find>
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    e24c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e250:	4298      	cmp	r0, r3
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    e252:	80e0      	strh	r0, [r4, #6]
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    e254:	d003      	beq.n	e25e <sdu_recv+0x92>
	bt_mesh_model_recv(rx, sdu);
    e256:	4631      	mov	r1, r6
    e258:	4620      	mov	r0, r4
    e25a:	f001 fbcf 	bl	f9fc <bt_mesh_model_recv>
}
    e25e:	2000      	movs	r0, #0
    e260:	b00b      	add	sp, #44	; 0x2c
    e262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct decrypt_ctx ctx = {
    e266:	6922      	ldr	r2, [r4, #16]
    e268:	e7d1      	b.n	e20e <sdu_recv+0x42>
    e26a:	bf00      	nop
    e26c:	20001ab8 	.word	0x20001ab8
    e270:	00025d13 	.word	0x00025d13

0000e274 <bt_mesh_trans_recv>:
{
    e274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    e278:	f04f 32ff 	mov.w	r2, #4294967295
{
    e27c:	b099      	sub	sp, #100	; 0x64
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    e27e:	f04f 33ff 	mov.w	r3, #4294967295
    e282:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
    e286:	680b      	ldr	r3, [r1, #0]
{
    e288:	4606      	mov	r6, r0
    e28a:	460c      	mov	r4, r1
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
    e28c:	8b98      	ldrh	r0, [r3, #28]
    e28e:	8949      	ldrh	r1, [r1, #10]
    e290:	f004 ff0c 	bl	130ac <bt_mesh_friend_match>
    e294:	7d23      	ldrb	r3, [r4, #20]
    e296:	f360 13c7 	bfi	r3, r0, #7, #1
    e29a:	7523      	strb	r3, [r4, #20]
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    e29c:	2109      	movs	r1, #9
    e29e:	4630      	mov	r0, r6
    e2a0:	f00e fbf8 	bl	1ca94 <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
    e2a4:	4630      	mov	r0, r6
    e2a6:	f019 fe56 	bl	27f56 <net_buf_simple_headroom>
	if (SEG(buf->data)) {
    e2aa:	f8d6 a000 	ldr.w	sl, [r6]
	state->len = buf->len;
    e2ae:	88b3      	ldrh	r3, [r6, #4]
    e2b0:	9306      	str	r3, [sp, #24]
    e2b2:	f99a 3000 	ldrsb.w	r3, [sl]
	state->offset = net_buf_simple_headroom(buf);
    e2b6:	9009      	str	r0, [sp, #36]	; 0x24
    e2b8:	2b00      	cmp	r3, #0
    e2ba:	f280 825e 	bge.w	e77a <bt_mesh_trans_recv+0x506>
		if (!rx->local_match && !rx->friend_match) {
    e2be:	f894 b014 	ldrb.w	fp, [r4, #20]
    e2c2:	f01b 0bc0 	ands.w	fp, fp, #192	; 0xc0
    e2c6:	f04f 0900 	mov.w	r9, #0
    e2ca:	f000 8115 	beq.w	e4f8 <bt_mesh_trans_recv+0x284>
	if (buf->len < 5) {
    e2ce:	9b06      	ldr	r3, [sp, #24]
	struct bt_mesh_rpl *rpl = NULL;
    e2d0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	if (buf->len < 5) {
    e2d4:	2b04      	cmp	r3, #4
    e2d6:	d806      	bhi.n	e2e6 <bt_mesh_trans_recv+0x72>
		BT_ERR("Too short segmented message (len %u)", buf->len);
    e2d8:	461a      	mov	r2, r3
    e2da:	2145      	movs	r1, #69	; 0x45
    e2dc:	4888      	ldr	r0, [pc, #544]	; (e500 <bt_mesh_trans_recv+0x28c>)
    e2de:	f013 fdf4 	bl	21eca <printk>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    e2e2:	2500      	movs	r5, #0
    e2e4:	e294      	b.n	e810 <bt_mesh_trans_recv+0x59c>
	if (bt_mesh_rpl_check(net_rx, &rpl)) {
    e2e6:	a90b      	add	r1, sp, #44	; 0x2c
    e2e8:	4620      	mov	r0, r4
    e2ea:	f000 fb59 	bl	e9a0 <bt_mesh_rpl_check>
    e2ee:	4605      	mov	r5, r0
    e2f0:	b140      	cbz	r0, e304 <bt_mesh_trans_recv+0x90>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
    e2f2:	6923      	ldr	r3, [r4, #16]
    e2f4:	9300      	str	r3, [sp, #0]
    e2f6:	8922      	ldrh	r2, [r4, #8]
    e2f8:	8963      	ldrh	r3, [r4, #10]
    e2fa:	4882      	ldr	r0, [pc, #520]	; (e504 <bt_mesh_trans_recv+0x290>)
    e2fc:	2157      	movs	r1, #87	; 0x57
    e2fe:	f013 fde4 	bl	21eca <printk>
		return -EINVAL;
    e302:	e7ee      	b.n	e2e2 <bt_mesh_trans_recv+0x6e>
	net_buf_simple_pull(buf, 1);
    e304:	2101      	movs	r1, #1
    e306:	4630      	mov	r0, r6
    e308:	f00e fbc4 	bl	1ca94 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
    e30c:	4630      	mov	r0, r6
    e30e:	f019 fe0e 	bl	27f2e <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
    e312:	00c7      	lsls	r7, r0, #3
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    e314:	f3c0 088c 	ubfx	r8, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
    e318:	4630      	mov	r0, r6
    e31a:	f019 fdf8 	bl	27f0e <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
    e31e:	f007 0718 	and.w	r7, r7, #24
	seg_o |= seg_n >> 5;
    e322:	ea47 1750 	orr.w	r7, r7, r0, lsr #5
	seg_n &= 0x1f;
    e326:	f000 031f 	and.w	r3, r0, #31
	seg_o |= seg_n >> 5;
    e32a:	b2ff      	uxtb	r7, r7
	if (seg_o > seg_n) {
    e32c:	429f      	cmp	r7, r3
	seg_n = net_buf_simple_pull_u8(buf);
    e32e:	9007      	str	r0, [sp, #28]
	seg_n &= 0x1f;
    e330:	9305      	str	r3, [sp, #20]
	if (seg_o > seg_n) {
    e332:	d906      	bls.n	e342 <bt_mesh_trans_recv+0xce>
		BT_ERR("SegO greater than SegN (%u > %u)", seg_o, seg_n);
    e334:	463a      	mov	r2, r7
    e336:	2145      	movs	r1, #69	; 0x45
    e338:	4873      	ldr	r0, [pc, #460]	; (e508 <bt_mesh_trans_recv+0x294>)
    e33a:	f013 fdc6 	bl	21eca <printk>
	uint8_t seg_count = 0;
    e33e:	46a9      	mov	r9, r5
    e340:	e7cf      	b.n	e2e2 <bt_mesh_trans_recv+0x6e>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    e342:	6921      	ldr	r1, [r4, #16]
    e344:	4871      	ldr	r0, [pc, #452]	; (e50c <bt_mesh_trans_recv+0x298>)
    e346:	7d23      	ldrb	r3, [r4, #20]
    e348:	6800      	ldr	r0, [r0, #0]
    e34a:	eba1 0808 	sub.w	r8, r1, r8
    e34e:	f003 0201 	and.w	r2, r3, #1
    e352:	f3c8 080c 	ubfx	r8, r8, #0, #13
    e356:	1a82      	subs	r2, r0, r2
    e358:	eba1 0808 	sub.w	r8, r1, r8
    e35c:	ea48 6b02 	orr.w	fp, r8, r2, lsl #24
    e360:	ea4f 2c12 	mov.w	ip, r2, lsr #8
	*seg_count = seg_n + 1;
    e364:	9a05      	ldr	r2, [sp, #20]
		if (rx->src != net_rx->ctx.addr ||
    e366:	486a      	ldr	r0, [pc, #424]	; (e510 <bt_mesh_trans_recv+0x29c>)
	*seg_count = seg_n + 1;
    e368:	3201      	adds	r2, #1
    e36a:	9208      	str	r2, [sp, #32]
		if (rx->src != net_rx->ctx.addr ||
    e36c:	6981      	ldr	r1, [r0, #24]
    e36e:	68a2      	ldr	r2, [r4, #8]
	*seg_count = seg_n + 1;
    e370:	f89d 9020 	ldrb.w	r9, [sp, #32]
		if (rx->src != net_rx->ctx.addr ||
    e374:	4291      	cmp	r1, r2
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    e376:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
		if (rx->src != net_rx->ctx.addr ||
    e37a:	4680      	mov	r8, r0
    e37c:	d113      	bne.n	e3a6 <bt_mesh_trans_recv+0x132>
		if (rx->seq_auth >= *seq_auth) {
    e37e:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
    e382:	4561      	cmp	r1, ip
    e384:	bf08      	it	eq
    e386:	4558      	cmpeq	r0, fp
    e388:	f080 8239 	bcs.w	e7fe <bt_mesh_trans_recv+0x58a>
		if (rx->in_use) {
    e38c:	f898 301f 	ldrb.w	r3, [r8, #31]
    e390:	065a      	lsls	r2, r3, #25
    e392:	d508      	bpl.n	e3a6 <bt_mesh_trans_recv+0x132>
			BT_WARN("Duplicate SDU from src 0x%04x",
    e394:	2157      	movs	r1, #87	; 0x57
    e396:	485f      	ldr	r0, [pc, #380]	; (e514 <bt_mesh_trans_recv+0x2a0>)
    e398:	8922      	ldrh	r2, [r4, #8]
    e39a:	f013 fd96 	bl	21eca <printk>
			seg_rx_reset(rx, true);
    e39e:	2101      	movs	r1, #1
    e3a0:	4640      	mov	r0, r8
    e3a2:	f7ff f8ab 	bl	d4fc <seg_rx_reset>
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    e3a6:	9b05      	ldr	r3, [sp, #20]
    e3a8:	2b02      	cmp	r3, #2
    e3aa:	d952      	bls.n	e452 <bt_mesh_trans_recv+0x1de>
		BT_ERR("Too big incoming SDU length");
    e3ac:	2145      	movs	r1, #69	; 0x45
    e3ae:	485a      	ldr	r0, [pc, #360]	; (e518 <bt_mesh_trans_recv+0x2a4>)
    e3b0:	f013 fd8b 	bl	21eca <printk>
			 net_rx->friend_match);
    e3b4:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    e3b6:	8922      	ldrh	r2, [r4, #8]
    e3b8:	8961      	ldrh	r1, [r4, #10]
    e3ba:	6820      	ldr	r0, [r4, #0]
    e3bc:	09db      	lsrs	r3, r3, #7
    e3be:	9302      	str	r3, [sp, #8]
    e3c0:	2500      	movs	r5, #0
    e3c2:	ab0c      	add	r3, sp, #48	; 0x30
    e3c4:	9300      	str	r3, [sp, #0]
    e3c6:	9501      	str	r5, [sp, #4]
    e3c8:	7be3      	ldrb	r3, [r4, #15]
    e3ca:	f017 fd17 	bl	25dfc <send_ack>
			return -EMSGSIZE;
    e3ce:	f06f 0b23 	mvn.w	fp, #35	; 0x23
    e3d2:	e074      	b.n	e4be <bt_mesh_trans_recv+0x24a>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
    e3d4:	f89a 1000 	ldrb.w	r1, [sl]
    e3d8:	f898 201e 	ldrb.w	r2, [r8, #30]
    e3dc:	4291      	cmp	r1, r2
    e3de:	d106      	bne.n	e3ee <bt_mesh_trans_recv+0x17a>
    e3e0:	f898 101f 	ldrb.w	r1, [r8, #31]
    e3e4:	9a05      	ldr	r2, [sp, #20]
    e3e6:	f001 011f 	and.w	r1, r1, #31
    e3ea:	4291      	cmp	r1, r2
    e3ec:	d004      	beq.n	e3f8 <bt_mesh_trans_recv+0x184>
		BT_ERR("Invalid segment for ongoing session");
    e3ee:	484b      	ldr	r0, [pc, #300]	; (e51c <bt_mesh_trans_recv+0x2a8>)
    e3f0:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Inconsistent CTL in segment");
    e3f2:	f013 fd6a 	bl	21eca <printk>
		return false;
    e3f6:	e774      	b.n	e2e2 <bt_mesh_trans_recv+0x6e>
	if (rx->ctl != net_rx->ctl) {
    e3f8:	f898 201f 	ldrb.w	r2, [r8, #31]
    e3fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    e400:	f3c2 1040 	ubfx	r0, r2, #5, #1
    e404:	4298      	cmp	r0, r3
    e406:	d002      	beq.n	e40e <bt_mesh_trans_recv+0x19a>
		BT_ERR("Inconsistent CTL in segment");
    e408:	2145      	movs	r1, #69	; 0x45
    e40a:	4845      	ldr	r0, [pc, #276]	; (e520 <bt_mesh_trans_recv+0x2ac>)
    e40c:	e7f1      	b.n	e3f2 <bt_mesh_trans_recv+0x17e>
		if (rx->in_use) {
    e40e:	f012 0540 	ands.w	r5, r2, #64	; 0x40
    e412:	f040 80bb 	bne.w	e58c <bt_mesh_trans_recv+0x318>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    e416:	3101      	adds	r1, #1
    e418:	2301      	movs	r3, #1
    e41a:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    e41e:	408b      	lsls	r3, r1
    e420:	3b01      	subs	r3, #1
    e422:	4283      	cmp	r3, r0
    e424:	d112      	bne.n	e44c <bt_mesh_trans_recv+0x1d8>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    e426:	09d2      	lsrs	r2, r2, #7
    e428:	e9cd 3201 	strd	r3, r2, [sp, #4]
    e42c:	ab0c      	add	r3, sp, #48	; 0x30
    e42e:	9300      	str	r3, [sp, #0]
    e430:	8922      	ldrh	r2, [r4, #8]
    e432:	7be3      	ldrb	r3, [r4, #15]
    e434:	8961      	ldrh	r1, [r4, #10]
    e436:	6820      	ldr	r0, [r4, #0]
    e438:	f017 fce0 	bl	25dfc <send_ack>
			if (rpl) {
    e43c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e43e:	b110      	cbz	r0, e446 <bt_mesh_trans_recv+0x1d2>
				bt_mesh_rpl_update(rpl, net_rx);
    e440:	4621      	mov	r1, r4
    e442:	f017 fd22 	bl	25e8a <bt_mesh_rpl_update>
		return -EALREADY;
    e446:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    e44a:	e038      	b.n	e4be <bt_mesh_trans_recv+0x24a>
		BT_WARN("Got segment for canceled SDU");
    e44c:	2157      	movs	r1, #87	; 0x57
    e44e:	4835      	ldr	r0, [pc, #212]	; (e524 <bt_mesh_trans_recv+0x2b0>)
    e450:	e1dc      	b.n	e80c <bt_mesh_trans_recv+0x598>
	    net_rx->friend_match && !net_rx->local_match &&
    e452:	7d23      	ldrb	r3, [r4, #20]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) &&
    e454:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e458:	2b80      	cmp	r3, #128	; 0x80
    e45a:	d120      	bne.n	e49e <bt_mesh_trans_recv+0x22a>
	    !bt_mesh_friend_queue_has_space(net_rx->sub->net_idx,
    e45c:	6823      	ldr	r3, [r4, #0]
    e45e:	8962      	ldrh	r2, [r4, #10]
    e460:	8b98      	ldrh	r0, [r3, #28]
    e462:	8921      	ldrh	r1, [r4, #8]
    e464:	f8cd 9000 	str.w	r9, [sp]
    e468:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
    e46c:	465b      	mov	r3, fp
    e46e:	f004 fe2f 	bl	130d0 <bt_mesh_friend_queue_has_space>
	    net_rx->friend_match && !net_rx->local_match &&
    e472:	4605      	mov	r5, r0
    e474:	b998      	cbnz	r0, e49e <bt_mesh_trans_recv+0x22a>
		BT_ERR("No space in Friend Queue for %u segments", *seg_count);
    e476:	9a08      	ldr	r2, [sp, #32]
    e478:	482b      	ldr	r0, [pc, #172]	; (e528 <bt_mesh_trans_recv+0x2b4>)
    e47a:	2145      	movs	r1, #69	; 0x45
    e47c:	f013 fd25 	bl	21eca <printk>
			 net_rx->friend_match);
    e480:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    e482:	f8cd b000 	str.w	fp, [sp]
    e486:	09db      	lsrs	r3, r3, #7
    e488:	e9cd 5301 	strd	r5, r3, [sp, #4]
    e48c:	8922      	ldrh	r2, [r4, #8]
    e48e:	7be3      	ldrb	r3, [r4, #15]
    e490:	8961      	ldrh	r1, [r4, #10]
    e492:	6820      	ldr	r0, [r4, #0]
    e494:	f017 fcb2 	bl	25dfc <send_ack>
		return -ENOBUFS;
    e498:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    e49c:	e00f      	b.n	e4be <bt_mesh_trans_recv+0x24a>
	return slab->num_blocks - slab->num_used;
    e49e:	4b23      	ldr	r3, [pc, #140]	; (e52c <bt_mesh_trans_recv+0x2b8>)
	if (k_mem_slab_num_free_get(&segs) < 1) {
    e4a0:	689a      	ldr	r2, [r3, #8]
    e4a2:	699b      	ldr	r3, [r3, #24]
    e4a4:	429a      	cmp	r2, r3
    e4a6:	d147      	bne.n	e538 <bt_mesh_trans_recv+0x2c4>
		BT_WARN("Not enough segments for incoming message");
    e4a8:	2157      	movs	r1, #87	; 0x57
    e4aa:	4821      	ldr	r0, [pc, #132]	; (e530 <bt_mesh_trans_recv+0x2bc>)
    e4ac:	f013 fd0d 	bl	21eca <printk>
		BT_WARN("No free slots for new incoming segmented messages");
    e4b0:	2157      	movs	r1, #87	; 0x57
    e4b2:	4820      	ldr	r0, [pc, #128]	; (e534 <bt_mesh_trans_recv+0x2c0>)
    e4b4:	f013 fd09 	bl	21eca <printk>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    e4b8:	2500      	movs	r5, #0
		return -ENOMEM;
    e4ba:	f06f 0b0b 	mvn.w	fp, #11
	buf->data = buf->__buf + state->offset;
    e4be:	68b3      	ldr	r3, [r6, #8]
    e4c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e4c2:	fa13 f382 	uxtah	r3, r3, r2
    e4c6:	6033      	str	r3, [r6, #0]
	buf->len = state->len;
    e4c8:	9b06      	ldr	r3, [sp, #24]
    e4ca:	80b3      	strh	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match && !err) {
    e4cc:	f994 3014 	ldrsb.w	r3, [r4, #20]
    e4d0:	2b00      	cmp	r3, #0
    e4d2:	da11      	bge.n	e4f8 <bt_mesh_trans_recv+0x284>
    e4d4:	f1bb 0f00 	cmp.w	fp, #0
    e4d8:	d10e      	bne.n	e4f8 <bt_mesh_trans_recv+0x284>
		if (seq_auth == TRANS_SEQ_AUTH_NVAL) {
    e4da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    e4de:	3301      	adds	r3, #1
    e4e0:	bf08      	it	eq
    e4e2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
			bt_mesh_friend_enqueue_rx(rx, pdu_type, NULL,
    e4e6:	9600      	str	r6, [sp, #0]
    e4e8:	464b      	mov	r3, r9
    e4ea:	bf0c      	ite	eq
    e4ec:	465a      	moveq	r2, fp
			bt_mesh_friend_enqueue_rx(rx, pdu_type, &seq_auth,
    e4ee:	aa0c      	addne	r2, sp, #48	; 0x30
    e4f0:	4629      	mov	r1, r5
    e4f2:	4620      	mov	r0, r4
    e4f4:	f004 fe22 	bl	1313c <bt_mesh_friend_enqueue_rx>
}
    e4f8:	4658      	mov	r0, fp
    e4fa:	b019      	add	sp, #100	; 0x64
    e4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e500:	0002c7ea 	.word	0x0002c7ea
    e504:	0002c814 	.word	0x0002c814
    e508:	0002c842 	.word	0x0002c842
    e50c:	20001ab8 	.word	0x20001ab8
    e510:	20001cf0 	.word	0x20001cf0
    e514:	0002c868 	.word	0x0002c868
    e518:	0002c911 	.word	0x0002c911
    e51c:	0002c8a5 	.word	0x0002c8a5
    e520:	0002c8ce 	.word	0x0002c8ce
    e524:	0002c8ef 	.word	0x0002c8ef
    e528:	0002c932 	.word	0x0002c932
    e52c:	20000ef4 	.word	0x20000ef4
    e530:	0002c960 	.word	0x0002c960
    e534:	0002c98e 	.word	0x0002c98e
		if (rx->in_use) {
    e538:	49b7      	ldr	r1, [pc, #732]	; (e818 <bt_mesh_trans_recv+0x5a4>)
    e53a:	7fcb      	ldrb	r3, [r1, #31]
    e53c:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    e540:	d1b6      	bne.n	e4b0 <bt_mesh_trans_recv+0x23c>
		rx->in_use = 1U;
    e542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e546:	77cb      	strb	r3, [r1, #31]
		rx->sub = net_rx->sub;
    e548:	6823      	ldr	r3, [r4, #0]
    e54a:	600b      	str	r3, [r1, #0]
		rx->ctl = net_rx->ctl;
    e54c:	7d23      	ldrb	r3, [r4, #20]
    e54e:	7fcd      	ldrb	r5, [r1, #31]
    e550:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    e554:	f363 1545 	bfi	r5, r3, #5, #1
		rx->seq_auth = *seq_auth;
    e558:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    e55c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		rx->seg_n = seg_n;
    e560:	9a07      	ldr	r2, [sp, #28]
    e562:	462b      	mov	r3, r5
    e564:	f362 0304 	bfi	r3, r2, #0, #5
    e568:	77cb      	strb	r3, [r1, #31]
		rx->hdr = *hdr;
    e56a:	f89a 3000 	ldrb.w	r3, [sl]
    e56e:	778b      	strb	r3, [r1, #30]
		rx->ttl = net_rx->ctx.send_ttl;
    e570:	7be3      	ldrb	r3, [r4, #15]
    e572:	f881 3020 	strb.w	r3, [r1, #32]
		rx->src = net_rx->ctx.addr;
    e576:	8923      	ldrh	r3, [r4, #8]
    e578:	830b      	strh	r3, [r1, #24]
		rx->dst = net_rx->ctx.recv_dst;
    e57a:	8963      	ldrh	r3, [r4, #10]
    e57c:	834b      	strh	r3, [r1, #26]
	rx->obo = net_rx->friend_match;
    e57e:	7d23      	ldrb	r3, [r4, #20]
    e580:	7fca      	ldrb	r2, [r1, #31]
		rx->block = 0U;
    e582:	6248      	str	r0, [r1, #36]	; 0x24
	rx->obo = net_rx->friend_match;
    e584:	09db      	lsrs	r3, r3, #7
    e586:	f363 12c7 	bfi	r2, r3, #7, #1
    e58a:	77ca      	strb	r2, [r1, #31]
	if (BIT(seg_o) & rx->block) {
    e58c:	f8df b288 	ldr.w	fp, [pc, #648]	; e818 <bt_mesh_trans_recv+0x5a4>
    e590:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
    e594:	40fd      	lsrs	r5, r7
    e596:	f015 0501 	ands.w	r5, r5, #1
    e59a:	f040 80ec 	bne.w	e776 <bt_mesh_trans_recv+0x502>
	if (seg_o == seg_n) {
    e59e:	9b05      	ldr	r3, [sp, #20]
    e5a0:	f89b 201f 	ldrb.w	r2, [fp, #31]
    e5a4:	88b1      	ldrh	r1, [r6, #4]
    e5a6:	429f      	cmp	r7, r3
    e5a8:	f3c2 1240 	ubfx	r2, r2, #5, #1
    e5ac:	d120      	bne.n	e5f0 <bt_mesh_trans_recv+0x37c>
		return BT_MESH_APP_SEG_SDU_MAX;
    e5ae:	2a00      	cmp	r2, #0
    e5b0:	bf14      	ite	ne
    e5b2:	2308      	movne	r3, #8
    e5b4:	230c      	moveq	r3, #12
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    e5b6:	fb03 1307 	mla	r3, r3, r7, r1
    e5ba:	b29b      	uxth	r3, r3
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    e5bc:	2b24      	cmp	r3, #36	; 0x24
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    e5be:	f8ab 301c 	strh.w	r3, [fp, #28]
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    e5c2:	d91e      	bls.n	e602 <bt_mesh_trans_recv+0x38e>
			BT_ERR("Too large SDU len");
    e5c4:	2145      	movs	r1, #69	; 0x45
    e5c6:	4895      	ldr	r0, [pc, #596]	; (e81c <bt_mesh_trans_recv+0x5a8>)
    e5c8:	f013 fc7f 	bl	21eca <printk>
				 seq_auth, 0, rx->obo);
    e5cc:	f89b 301f 	ldrb.w	r3, [fp, #31]
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    e5d0:	8961      	ldrh	r1, [r4, #10]
    e5d2:	8922      	ldrh	r2, [r4, #8]
    e5d4:	6820      	ldr	r0, [r4, #0]
    e5d6:	09db      	lsrs	r3, r3, #7
    e5d8:	e9cd 5301 	strd	r5, r3, [sp, #4]
    e5dc:	ab0c      	add	r3, sp, #48	; 0x30
    e5de:	9300      	str	r3, [sp, #0]
    e5e0:	7be3      	ldrb	r3, [r4, #15]
    e5e2:	f017 fc0b 	bl	25dfc <send_ack>
			seg_rx_reset(rx, true);
    e5e6:	2101      	movs	r1, #1
    e5e8:	4658      	mov	r0, fp
    e5ea:	f7fe ff87 	bl	d4fc <seg_rx_reset>
    e5ee:	e6ee      	b.n	e3ce <bt_mesh_trans_recv+0x15a>
		return BT_MESH_APP_SEG_SDU_MAX;
    e5f0:	2a00      	cmp	r2, #0
		if (buf->len != seg_len(rx->ctl)) {
    e5f2:	bf14      	ite	ne
    e5f4:	2308      	movne	r3, #8
    e5f6:	230c      	moveq	r3, #12
    e5f8:	4299      	cmp	r1, r3
    e5fa:	d002      	beq.n	e602 <bt_mesh_trans_recv+0x38e>
			BT_ERR("Incorrect segment size for message type");
    e5fc:	2145      	movs	r1, #69	; 0x45
    e5fe:	4888      	ldr	r0, [pc, #544]	; (e820 <bt_mesh_trans_recv+0x5ac>)
    e600:	e104      	b.n	e80c <bt_mesh_trans_recv+0x598>
    e602:	f01a f932 	bl	2886a <z_impl_k_uptime_ticks>
    e606:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    e60a:	fba0 bc05 	umull	fp, ip, r0, r5
    e60e:	fb05 cc01 	mla	ip, r5, r1, ip
    e612:	ea4f 32db 	mov.w	r2, fp, lsr #15
    e616:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
	return (uint32_t)k_uptime_get();
    e61a:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
    e61e:	4881      	ldr	r0, [pc, #516]	; (e824 <bt_mesh_trans_recv+0x5b0>)
    e620:	f011 ffd6 	bl	205d0 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    e624:	fba0 0105 	umull	r0, r1, r0, r5
    e628:	0bc3      	lsrs	r3, r0, #15
	if (!k_delayed_work_remaining_get(&rx->ack) &&
    e62a:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
    e62e:	d115      	bne.n	e65c <bt_mesh_trans_recv+0x3e8>
		int32_t timeout = ack_timeout(rx);
    e630:	4879      	ldr	r0, [pc, #484]	; (e818 <bt_mesh_trans_recv+0x5a4>)
    e632:	f017 fb21 	bl	25c78 <ack_timeout>
			return (t * to_hz + off) / from_hz;
    e636:	f44f 4500 	mov.w	r5, #32768	; 0x8000
		k_delayed_work_submit(&rx->ack, K_MSEC(timeout));
    e63a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
    e63e:	2100      	movs	r1, #0
    e640:	f240 30e7 	movw	r0, #999	; 0x3e7
    e644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e648:	2300      	movs	r3, #0
    e64a:	fbc5 010c 	smlal	r0, r1, r5, ip
    e64e:	f7f1 fd57 	bl	100 <__aeabi_uldivmod>
    e652:	4602      	mov	r2, r0
    e654:	460b      	mov	r3, r1
    e656:	4874      	ldr	r0, [pc, #464]	; (e828 <bt_mesh_trans_recv+0x5b4>)
    e658:	f7fe ff4a 	bl	d4f0 <k_delayed_work_submit>
	err = k_mem_slab_alloc(&segs, &rx->seg[seg_o], K_NO_WAIT);
    e65c:	1c79      	adds	r1, r7, #1
    e65e:	2200      	movs	r2, #0
    e660:	2300      	movs	r3, #0
    e662:	eb08 0181 	add.w	r1, r8, r1, lsl #2
    e666:	4871      	ldr	r0, [pc, #452]	; (e82c <bt_mesh_trans_recv+0x5b8>)
    e668:	f00f ff64 	bl	1e534 <k_mem_slab_alloc>
	if (err) {
    e66c:	4683      	mov	fp, r0
    e66e:	b130      	cbz	r0, e67e <bt_mesh_trans_recv+0x40a>
		BT_WARN("Unable allocate buffer for Seg %u", seg_o);
    e670:	463a      	mov	r2, r7
    e672:	2157      	movs	r1, #87	; 0x57
    e674:	486e      	ldr	r0, [pc, #440]	; (e830 <bt_mesh_trans_recv+0x5bc>)
    e676:	f013 fc28 	bl	21eca <printk>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    e67a:	2500      	movs	r5, #0
    e67c:	e70c      	b.n	e498 <bt_mesh_trans_recv+0x224>
	memcpy(rx->seg[seg_o], buf->data, buf->len);
    e67e:	eb08 0387 	add.w	r3, r8, r7, lsl #2
    e682:	88b2      	ldrh	r2, [r6, #4]
    e684:	6858      	ldr	r0, [r3, #4]
    e686:	6831      	ldr	r1, [r6, #0]
    e688:	f015 fd61 	bl	2414e <memcpy>
	rx->block |= BIT(seg_o);
    e68c:	2501      	movs	r5, #1
    e68e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    e692:	fa05 f707 	lsl.w	r7, r5, r7
    e696:	431f      	orrs	r7, r3
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    e698:	9b05      	ldr	r3, [sp, #20]
	rx->block |= BIT(seg_o);
    e69a:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    e69e:	442b      	add	r3, r5
    e6a0:	fa05 f303 	lsl.w	r3, r5, r3
    e6a4:	3b01      	subs	r3, #1
    e6a6:	429f      	cmp	r7, r3
    e6a8:	f47f af09 	bne.w	e4be <bt_mesh_trans_recv+0x24a>
	if (rpl) {
    e6ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e6ae:	b110      	cbz	r0, e6b6 <bt_mesh_trans_recv+0x442>
		bt_mesh_rpl_update(rpl, net_rx);
    e6b0:	4621      	mov	r1, r4
    e6b2:	f017 fbea 	bl	25e8a <bt_mesh_rpl_update>
	k_delayed_work_cancel(&rx->ack);
    e6b6:	485c      	ldr	r0, [pc, #368]	; (e828 <bt_mesh_trans_recv+0x5b4>)
    e6b8:	f011 fdbe 	bl	20238 <k_delayed_work_cancel>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
    e6bc:	f898 301f 	ldrb.w	r3, [r8, #31]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    e6c0:	8922      	ldrh	r2, [r4, #8]
    e6c2:	8961      	ldrh	r1, [r4, #10]
    e6c4:	6820      	ldr	r0, [r4, #0]
    e6c6:	09db      	lsrs	r3, r3, #7
    e6c8:	9302      	str	r3, [sp, #8]
    e6ca:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    e6ce:	9301      	str	r3, [sp, #4]
    e6d0:	ad0c      	add	r5, sp, #48	; 0x30
    e6d2:	7be3      	ldrb	r3, [r4, #15]
    e6d4:	9500      	str	r5, [sp, #0]
    e6d6:	f017 fb91 	bl	25dfc <send_ack>
	if (net_rx->ctl) {
    e6da:	7d23      	ldrb	r3, [r4, #20]
    e6dc:	071b      	lsls	r3, r3, #28
    e6de:	d513      	bpl.n	e708 <bt_mesh_trans_recv+0x494>
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    e6e0:	ab12      	add	r3, sp, #72	; 0x48
    e6e2:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
    e6e6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		seg_rx_assemble(rx, &sdu, 0U);
    e6ea:	a90f      	add	r1, sp, #60	; 0x3c
    e6ec:	2200      	movs	r2, #0
    e6ee:	484a      	ldr	r0, [pc, #296]	; (e818 <bt_mesh_trans_recv+0x5a4>)
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    e6f0:	930f      	str	r3, [sp, #60]	; 0x3c
		seg_rx_assemble(rx, &sdu, 0U);
    e6f2:	f017 fadf 	bl	25cb4 <seg_rx_assemble>
		err = ctl_recv(net_rx, *hdr, &sdu, seq_auth);
    e6f6:	462b      	mov	r3, r5
    e6f8:	aa0f      	add	r2, sp, #60	; 0x3c
    e6fa:	f89a 1000 	ldrb.w	r1, [sl]
    e6fe:	4620      	mov	r0, r4
    e700:	f7ff f8c8 	bl	d894 <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
    e704:	4683      	mov	fp, r0
    e706:	e00f      	b.n	e728 <bt_mesh_trans_recv+0x4b4>
	} else if (rx->len < 1 + APP_MIC_LEN(ASZMIC(hdr))) {
    e708:	f89a 3001 	ldrb.w	r3, [sl, #1]
    e70c:	f8b8 201c 	ldrh.w	r2, [r8, #28]
    e710:	09db      	lsrs	r3, r3, #7
    e712:	bf14      	ite	ne
    e714:	2309      	movne	r3, #9
    e716:	2305      	moveq	r3, #5
    e718:	429a      	cmp	r2, r3
    e71a:	da0b      	bge.n	e734 <bt_mesh_trans_recv+0x4c0>
		BT_ERR("Too short SDU + MIC");
    e71c:	2145      	movs	r1, #69	; 0x45
    e71e:	4845      	ldr	r0, [pc, #276]	; (e834 <bt_mesh_trans_recv+0x5c0>)
    e720:	f013 fbd3 	bl	21eca <printk>
		err = -EINVAL;
    e724:	f06f 0b15 	mvn.w	fp, #21
	seg_rx_reset(rx, false);
    e728:	2100      	movs	r1, #0
    e72a:	483b      	ldr	r0, [pc, #236]	; (e818 <bt_mesh_trans_recv+0x5a4>)
    e72c:	f7fe fee6 	bl	d4fc <seg_rx_reset>
	*pdu_type = BT_MESH_FRIEND_PDU_COMPLETE;
    e730:	2502      	movs	r5, #2
    e732:	e6c4      	b.n	e4be <bt_mesh_trans_recv+0x24a>
	if (!buf->__buf) {
    e734:	4b40      	ldr	r3, [pc, #256]	; (e838 <bt_mesh_trans_recv+0x5c4>)
    e736:	6899      	ldr	r1, [r3, #8]
    e738:	b911      	cbnz	r1, e740 <bt_mesh_trans_recv+0x4cc>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
    e73a:	f103 010c 	add.w	r1, r3, #12
    e73e:	6099      	str	r1, [r3, #8]
	buf->data = buf->__buf + reserve_head;
    e740:	6899      	ldr	r1, [r3, #8]
    e742:	6019      	str	r1, [r3, #0]
	buf->len = 0U;
    e744:	2000      	movs	r0, #0
    e746:	8098      	strh	r0, [r3, #4]
			&sdu, seg_buf.data, rx->len - APP_MIC_LEN(ASZMIC(hdr)));
    e748:	f89a 3001 	ldrb.w	r3, [sl, #1]
    e74c:	09db      	lsrs	r3, r3, #7
    e74e:	bf14      	ite	ne
    e750:	2308      	movne	r3, #8
    e752:	2304      	moveq	r3, #4
		net_buf_simple_init_with_data(
    e754:	ad12      	add	r5, sp, #72	; 0x48
    e756:	1ad2      	subs	r2, r2, r3
    e758:	4628      	mov	r0, r5
    e75a:	f019 fbb0 	bl	27ebe <net_buf_simple_init_with_data>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
    e75e:	f89a 2001 	ldrb.w	r2, [sl, #1]
    e762:	f89a 1000 	ldrb.w	r1, [sl]
    e766:	4b34      	ldr	r3, [pc, #208]	; (e838 <bt_mesh_trans_recv+0x5c4>)
    e768:	e9cd 5800 	strd	r5, r8, [sp]
    e76c:	09d2      	lsrs	r2, r2, #7
    e76e:	4620      	mov	r0, r4
    e770:	f7ff fd2c 	bl	e1cc <sdu_recv>
    e774:	e7c6      	b.n	e704 <bt_mesh_trans_recv+0x490>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    e776:	2500      	movs	r5, #0
    e778:	e665      	b.n	e446 <bt_mesh_trans_recv+0x1d2>
	if (buf->len < 1) {
    e77a:	9b06      	ldr	r3, [sp, #24]
    e77c:	b933      	cbnz	r3, e78c <bt_mesh_trans_recv+0x518>
		BT_ERR("Too small unsegmented PDU");
    e77e:	2145      	movs	r1, #69	; 0x45
    e780:	482e      	ldr	r0, [pc, #184]	; (e83c <bt_mesh_trans_recv+0x5c8>)
    e782:	f013 fba2 	bl	21eca <printk>
		seg_count = 1;
    e786:	f04f 0901 	mov.w	r9, #1
    e78a:	e5aa      	b.n	e2e2 <bt_mesh_trans_recv+0x6e>
	if (bt_mesh_rpl_check(rx, NULL)) {
    e78c:	2100      	movs	r1, #0
    e78e:	4620      	mov	r0, r4
    e790:	f000 f906 	bl	e9a0 <bt_mesh_rpl_check>
    e794:	4607      	mov	r7, r0
    e796:	b140      	cbz	r0, e7aa <bt_mesh_trans_recv+0x536>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
    e798:	6923      	ldr	r3, [r4, #16]
    e79a:	9300      	str	r3, [sp, #0]
    e79c:	8922      	ldrh	r2, [r4, #8]
    e79e:	8963      	ldrh	r3, [r4, #10]
    e7a0:	4827      	ldr	r0, [pc, #156]	; (e840 <bt_mesh_trans_recv+0x5cc>)
    e7a2:	2157      	movs	r1, #87	; 0x57
    e7a4:	f013 fb91 	bl	21eca <printk>
    e7a8:	e7ed      	b.n	e786 <bt_mesh_trans_recv+0x512>
	hdr = net_buf_simple_pull_u8(buf);
    e7aa:	4630      	mov	r0, r6
    e7ac:	f019 fbaf 	bl	27f0e <net_buf_simple_pull_u8>
	if (rx->ctl) {
    e7b0:	7d25      	ldrb	r5, [r4, #20]
    e7b2:	f015 0508 	ands.w	r5, r5, #8
	hdr = net_buf_simple_pull_u8(buf);
    e7b6:	4601      	mov	r1, r0
	if (rx->ctl) {
    e7b8:	d009      	beq.n	e7ce <bt_mesh_trans_recv+0x55a>
		return ctl_recv(rx, hdr, buf, seq_auth);
    e7ba:	ab0c      	add	r3, sp, #48	; 0x30
    e7bc:	4632      	mov	r2, r6
    e7be:	4620      	mov	r0, r4
    e7c0:	f7ff f868 	bl	d894 <ctl_recv>
		seg_count = 1;
    e7c4:	f04f 0901 	mov.w	r9, #1
		return ctl_recv(rx, hdr, buf, seq_auth);
    e7c8:	4683      	mov	fp, r0
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    e7ca:	463d      	mov	r5, r7
    e7cc:	e677      	b.n	e4be <bt_mesh_trans_recv+0x24a>
	if (buf->len < 1 + APP_MIC_LEN(0)) {
    e7ce:	88b3      	ldrh	r3, [r6, #4]
    e7d0:	2b04      	cmp	r3, #4
    e7d2:	d806      	bhi.n	e7e2 <bt_mesh_trans_recv+0x56e>
		BT_ERR("Too short SDU + MIC");
    e7d4:	2145      	movs	r1, #69	; 0x45
    e7d6:	4817      	ldr	r0, [pc, #92]	; (e834 <bt_mesh_trans_recv+0x5c0>)
    e7d8:	f013 fb77 	bl	21eca <printk>
		seg_count = 1;
    e7dc:	f04f 0901 	mov.w	r9, #1
    e7e0:	e016      	b.n	e810 <bt_mesh_trans_recv+0x59c>
	buf->len -= APP_MIC_LEN(0);
    e7e2:	3b04      	subs	r3, #4
    e7e4:	80b3      	strh	r3, [r6, #4]
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
    e7e6:	4b17      	ldr	r3, [pc, #92]	; (e844 <bt_mesh_trans_recv+0x5d0>)
    e7e8:	9300      	str	r3, [sp, #0]
    e7ea:	9501      	str	r5, [sp, #4]
    e7ec:	4633      	mov	r3, r6
    e7ee:	462a      	mov	r2, r5
    e7f0:	4620      	mov	r0, r4
    e7f2:	f7ff fceb 	bl	e1cc <sdu_recv>
		seg_count = 1;
    e7f6:	f04f 0901 	mov.w	r9, #1
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
    e7fa:	4683      	mov	fp, r0
    e7fc:	e65f      	b.n	e4be <bt_mesh_trans_recv+0x24a>
		if (rx->seq_auth > *seq_auth) {
    e7fe:	458c      	cmp	ip, r1
    e800:	bf08      	it	eq
    e802:	4583      	cmpeq	fp, r0
    e804:	f4bf ade6 	bcs.w	e3d4 <bt_mesh_trans_recv+0x160>
			BT_WARN("Ignoring old SeqAuth");
    e808:	480f      	ldr	r0, [pc, #60]	; (e848 <bt_mesh_trans_recv+0x5d4>)
    e80a:	2157      	movs	r1, #87	; 0x57
			BT_ERR("Incorrect segment size for message type");
    e80c:	f013 fb5d 	bl	21eca <printk>
		return -EINVAL;
    e810:	f06f 0b15 	mvn.w	fp, #21
    e814:	e653      	b.n	e4be <bt_mesh_trans_recv+0x24a>
    e816:	bf00      	nop
    e818:	20001cf0 	.word	0x20001cf0
    e81c:	0002c9c5 	.word	0x0002c9c5
    e820:	0002c9dc 	.word	0x0002c9dc
    e824:	20001d30 	.word	0x20001d30
    e828:	20001d20 	.word	0x20001d20
    e82c:	20000ef4 	.word	0x20000ef4
    e830:	0002ca09 	.word	0x0002ca09
    e834:	0002ca30 	.word	0x0002ca30
    e838:	20000794 	.word	0x20000794
    e83c:	0002ca49 	.word	0x0002ca49
    e840:	0002c814 	.word	0x0002c814
    e844:	20000788 	.word	0x20000788
    e848:	0002c88b 	.word	0x0002c88b

0000e84c <bt_mesh_va_pending_store>:
BT_MESH_SETTINGS_DEFINE(va, "Va", va_set);
#endif /* CONFIG_BT_MESH_LABEL_COUNT > 0 */

#define IS_VA_DEL(_label)	((_label)->ref == 0)
void bt_mesh_va_pending_store(void)
{
    e84c:	b510      	push	{r4, lr}
	char path[18];
	uint16_t i;
	int err;

	for (i = 0; (lab = bt_mesh_va_get(i)) != NULL; i++) {
		if (!lab->changed) {
    e84e:	4c1d      	ldr	r4, [pc, #116]	; (e8c4 <bt_mesh_va_pending_store+0x78>)
    e850:	f994 3001 	ldrsb.w	r3, [r4, #1]
    e854:	2b00      	cmp	r3, #0
{
    e856:	b08c      	sub	sp, #48	; 0x30
		if (!lab->changed) {
    e858:	da1f      	bge.n	e89a <bt_mesh_va_pending_store+0x4e>
			continue;
		}

		lab->changed = 0U;
    e85a:	7863      	ldrb	r3, [r4, #1]

		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
    e85c:	4a1a      	ldr	r2, [pc, #104]	; (e8c8 <bt_mesh_va_pending_store+0x7c>)
		lab->changed = 0U;
    e85e:	f36f 13c7 	bfc	r3, #7, #1
    e862:	7063      	strb	r3, [r4, #1]
		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
    e864:	2112      	movs	r1, #18
    e866:	2300      	movs	r3, #0
    e868:	a802      	add	r0, sp, #8
    e86a:	f013 fb3b 	bl	21ee4 <snprintk>

		if (IS_VA_DEL(lab)) {
    e86e:	8823      	ldrh	r3, [r4, #0]
    e870:	f3c3 020e 	ubfx	r2, r3, #0, #15
    e874:	b99a      	cbnz	r2, e89e <bt_mesh_va_pending_store+0x52>
			err = settings_delete(path);
    e876:	a802      	add	r0, sp, #8
    e878:	f014 f964 	bl	22b44 <settings_delete>
			memcpy(va.uuid, lab->uuid, 16);

			err = settings_save_one(path, &va, sizeof(va));
		}

		if (err) {
    e87c:	b168      	cbz	r0, e89a <bt_mesh_va_pending_store+0x4e>
			BT_ERR("Failed to %s %s value (err %d)",
    e87e:	8821      	ldrh	r1, [r4, #0]
    e880:	9000      	str	r0, [sp, #0]
    e882:	4a12      	ldr	r2, [pc, #72]	; (e8cc <bt_mesh_va_pending_store+0x80>)
    e884:	4812      	ldr	r0, [pc, #72]	; (e8d0 <bt_mesh_va_pending_store+0x84>)
    e886:	f3c1 010e 	ubfx	r1, r1, #0, #15
    e88a:	2900      	cmp	r1, #0
    e88c:	bf08      	it	eq
    e88e:	4602      	moveq	r2, r0
    e890:	ab02      	add	r3, sp, #8
    e892:	2145      	movs	r1, #69	; 0x45
    e894:	480f      	ldr	r0, [pc, #60]	; (e8d4 <bt_mesh_va_pending_store+0x88>)
    e896:	f013 fb18 	bl	21eca <printk>
			BT_DBG("%s %s value",
			       IS_VA_DEL(lab) ? "Deleted" : "Stored",
			       log_strdup(path));
		}
	}
}
    e89a:	b00c      	add	sp, #48	; 0x30
    e89c:	bd10      	pop	{r4, pc}
			va.ref = lab->ref;
    e89e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    e8a2:	f8ad 301c 	strh.w	r3, [sp, #28]
			memcpy(va.uuid, lab->uuid, 16);
    e8a6:	1d21      	adds	r1, r4, #4
			va.addr = lab->addr;
    e8a8:	8863      	ldrh	r3, [r4, #2]
    e8aa:	f8ad 301e 	strh.w	r3, [sp, #30]
			memcpy(va.uuid, lab->uuid, 16);
    e8ae:	2210      	movs	r2, #16
    e8b0:	a808      	add	r0, sp, #32
    e8b2:	f015 fc4c 	bl	2414e <memcpy>
			err = settings_save_one(path, &va, sizeof(va));
    e8b6:	2214      	movs	r2, #20
    e8b8:	a907      	add	r1, sp, #28
    e8ba:	a802      	add	r0, sp, #8
    e8bc:	f7f4 fd00 	bl	32c0 <settings_save_one>
    e8c0:	e7dc      	b.n	e87c <bt_mesh_va_pending_store+0x30>
    e8c2:	bf00      	nop
    e8c4:	20004390 	.word	0x20004390
    e8c8:	0002cb18 	.word	0x0002cb18
    e8cc:	0002cb12 	.word	0x0002cb12
    e8d0:	0002cb0b 	.word	0x0002cb0b
    e8d4:	0002cb26 	.word	0x0002cb26

0000e8d8 <rpl_set>:
	}
}

static int rpl_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
    e8d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e8da:	460c      	mov	r4, r1
    e8dc:	4616      	mov	r6, r2
    e8de:	461f      	mov	r7, r3
	struct bt_mesh_rpl *entry;
	struct rpl_val rpl;
	int err;
	uint16_t src;

	if (!name) {
    e8e0:	b940      	cbnz	r0, e8f4 <rpl_set+0x1c>
		BT_ERR("Insufficient number of arguments");
    e8e2:	2145      	movs	r1, #69	; 0x45
    e8e4:	4829      	ldr	r0, [pc, #164]	; (e98c <rpl_set+0xb4>)
    e8e6:	f013 faf0 	bl	21eca <printk>
		return -ENOENT;
    e8ea:	f06f 0401 	mvn.w	r4, #1

	BT_DBG("RPL entry for 0x%04x: Seq 0x%06x old_iv %u", entry->src,
	       entry->seq, entry->old_iv);

	return 0;
}
    e8ee:	4620      	mov	r0, r4
    e8f0:	b003      	add	sp, #12
    e8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	src = strtol(name, NULL, 16);
    e8f4:	2210      	movs	r2, #16
    e8f6:	2100      	movs	r1, #0
    e8f8:	f015 fb57 	bl	23faa <strtol>
		if (replay_list[i].src == src) {
    e8fc:	4a24      	ldr	r2, [pc, #144]	; (e990 <rpl_set+0xb8>)
	src = strtol(name, NULL, 16);
    e8fe:	b281      	uxth	r1, r0
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    e900:	2300      	movs	r3, #0
    e902:	4615      	mov	r5, r2
		if (replay_list[i].src == src) {
    e904:	f832 c033 	ldrh.w	ip, [r2, r3, lsl #3]
    e908:	458c      	cmp	ip, r1
    e90a:	d110      	bne.n	e92e <rpl_set+0x56>
			return &replay_list[i];
    e90c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
	if (len_rd == 0) {
    e910:	b1d4      	cbz	r4, e948 <rpl_set+0x70>
	err = bt_mesh_settings_set(read_cb, cb_arg, &rpl, sizeof(rpl));
    e912:	2304      	movs	r3, #4
    e914:	eb0d 0203 	add.w	r2, sp, r3
    e918:	4639      	mov	r1, r7
    e91a:	4630      	mov	r0, r6
    e91c:	f003 fb32 	bl	11f84 <bt_mesh_settings_set>
	if (err) {
    e920:	4604      	mov	r4, r0
    e922:	b340      	cbz	r0, e976 <rpl_set+0x9e>
		BT_ERR("Failed to set `net`");
    e924:	2145      	movs	r1, #69	; 0x45
    e926:	481b      	ldr	r0, [pc, #108]	; (e994 <rpl_set+0xbc>)
    e928:	f013 facf 	bl	21eca <printk>
		return err;
    e92c:	e7df      	b.n	e8ee <rpl_set+0x16>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    e92e:	3301      	adds	r3, #1
    e930:	2b0a      	cmp	r3, #10
    e932:	d1e7      	bne.n	e904 <rpl_set+0x2c>
	if (len_rd == 0) {
    e934:	b174      	cbz	r4, e954 <rpl_set+0x7c>
    e936:	2300      	movs	r3, #0
		if (!replay_list[i].src) {
    e938:	f835 2033 	ldrh.w	r2, [r5, r3, lsl #3]
    e93c:	b982      	cbnz	r2, e960 <rpl_set+0x88>
			replay_list[i].src = src;
    e93e:	f825 1033 	strh.w	r1, [r5, r3, lsl #3]
			return &replay_list[i];
    e942:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		if (!entry) {
    e946:	e7e4      	b.n	e912 <rpl_set+0x3a>
			(void)memset(entry, 0, sizeof(*entry));
    e948:	2208      	movs	r2, #8
    e94a:	4621      	mov	r1, r4
    e94c:	4628      	mov	r0, r5
    e94e:	f015 fc28 	bl	241a2 <memset>
    e952:	e7cc      	b.n	e8ee <rpl_set+0x16>
			BT_WARN("Unable to find RPL entry for 0x%04x", src);
    e954:	b282      	uxth	r2, r0
    e956:	2157      	movs	r1, #87	; 0x57
    e958:	480f      	ldr	r0, [pc, #60]	; (e998 <rpl_set+0xc0>)
    e95a:	f013 fab6 	bl	21eca <printk>
    e95e:	e7c6      	b.n	e8ee <rpl_set+0x16>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    e960:	3301      	adds	r3, #1
    e962:	2b0a      	cmp	r3, #10
    e964:	d1e8      	bne.n	e938 <rpl_set+0x60>
			BT_ERR("Unable to allocate RPL entry for 0x%04x", src);
    e966:	b282      	uxth	r2, r0
    e968:	2145      	movs	r1, #69	; 0x45
    e96a:	480c      	ldr	r0, [pc, #48]	; (e99c <rpl_set+0xc4>)
    e96c:	f013 faad 	bl	21eca <printk>
			return -ENOMEM;
    e970:	f06f 040b 	mvn.w	r4, #11
    e974:	e7bb      	b.n	e8ee <rpl_set+0x16>
	entry->seq = rpl.seq;
    e976:	9b01      	ldr	r3, [sp, #4]
    e978:	f3c3 0317 	ubfx	r3, r3, #0, #24
    e97c:	606b      	str	r3, [r5, #4]
	entry->old_iv = rpl.old_iv;
    e97e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e982:	f3c3 0300 	ubfx	r3, r3, #0, #1
    e986:	70ab      	strb	r3, [r5, #2]
	return 0;
    e988:	e7b1      	b.n	e8ee <rpl_set+0x16>
    e98a:	bf00      	nop
    e98c:	0002ac40 	.word	0x0002ac40
    e990:	20002adc 	.word	0x20002adc
    e994:	0002ce8a 	.word	0x0002ce8a
    e998:	0002ce61 	.word	0x0002ce61
    e99c:	0002cea3 	.word	0x0002cea3

0000e9a0 <bt_mesh_rpl_check>:
{
    e9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e9a2:	460c      	mov	r4, r1
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    e9a4:	7d01      	ldrb	r1, [r0, #20]
    e9a6:	f001 0330 	and.w	r3, r1, #48	; 0x30
    e9aa:	2b10      	cmp	r3, #16
{
    e9ac:	4605      	mov	r5, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    e9ae:	d009      	beq.n	e9c4 <bt_mesh_rpl_check+0x24>
	if (!rx->local_match) {
    e9b0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
    e9b4:	d006      	beq.n	e9c4 <bt_mesh_rpl_check+0x24>
    e9b6:	4815      	ldr	r0, [pc, #84]	; (ea0c <bt_mesh_rpl_check+0x6c>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    e9b8:	2200      	movs	r2, #0
    e9ba:	4606      	mov	r6, r0
		if (!rpl->src) {
    e9bc:	8803      	ldrh	r3, [r0, #0]
    e9be:	b91b      	cbnz	r3, e9c8 <bt_mesh_rpl_check+0x28>
				if (match) {
    e9c0:	b1ac      	cbz	r4, e9ee <bt_mesh_rpl_check+0x4e>
					*match = rpl;
    e9c2:	6020      	str	r0, [r4, #0]
		return false;
    e9c4:	2000      	movs	r0, #0
}
    e9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
    e9c8:	892f      	ldrh	r7, [r5, #8]
    e9ca:	429f      	cmp	r7, r3
    e9cc:	d113      	bne.n	e9f6 <bt_mesh_rpl_check+0x56>
			if (rx->old_iv && !rpl->old_iv) {
    e9ce:	00d2      	lsls	r2, r2, #3
    e9d0:	18b3      	adds	r3, r6, r2
    e9d2:	07c9      	lsls	r1, r1, #31
    e9d4:	789b      	ldrb	r3, [r3, #2]
    e9d6:	d502      	bpl.n	e9de <bt_mesh_rpl_check+0x3e>
    e9d8:	b91b      	cbnz	r3, e9e2 <bt_mesh_rpl_check+0x42>
				return true;
    e9da:	2001      	movs	r0, #1
    e9dc:	e7f3      	b.n	e9c6 <bt_mesh_rpl_check+0x26>
			if ((!rx->old_iv && rpl->old_iv) ||
    e9de:	2b00      	cmp	r3, #0
    e9e0:	d1ee      	bne.n	e9c0 <bt_mesh_rpl_check+0x20>
			    rpl->seq < rx->seq) {
    e9e2:	4432      	add	r2, r6
			if ((!rx->old_iv && rpl->old_iv) ||
    e9e4:	692b      	ldr	r3, [r5, #16]
    e9e6:	6852      	ldr	r2, [r2, #4]
    e9e8:	429a      	cmp	r2, r3
    e9ea:	d2f6      	bcs.n	e9da <bt_mesh_rpl_check+0x3a>
    e9ec:	e7e8      	b.n	e9c0 <bt_mesh_rpl_check+0x20>
					bt_mesh_rpl_update(rpl, rx);
    e9ee:	4629      	mov	r1, r5
    e9f0:	f017 fa4b 	bl	25e8a <bt_mesh_rpl_update>
    e9f4:	e7e6      	b.n	e9c4 <bt_mesh_rpl_check+0x24>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    e9f6:	3201      	adds	r2, #1
    e9f8:	2a0a      	cmp	r2, #10
    e9fa:	f100 0008 	add.w	r0, r0, #8
    e9fe:	d1dd      	bne.n	e9bc <bt_mesh_rpl_check+0x1c>
	BT_ERR("RPL is full!");
    ea00:	2145      	movs	r1, #69	; 0x45
    ea02:	4803      	ldr	r0, [pc, #12]	; (ea10 <bt_mesh_rpl_check+0x70>)
    ea04:	f013 fa61 	bl	21eca <printk>
	return true;
    ea08:	e7e7      	b.n	e9da <bt_mesh_rpl_check+0x3a>
    ea0a:	bf00      	nop
    ea0c:	20002adc 	.word	0x20002adc
    ea10:	0002ce05 	.word	0x0002ce05

0000ea14 <bt_mesh_rpl_reset>:
{
    ea14:	b570      	push	{r4, r5, r6, lr}
    ea16:	4c0c      	ldr	r4, [pc, #48]	; (ea48 <bt_mesh_rpl_reset+0x34>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    ea18:	2500      	movs	r5, #0
	entry->store = true;
    ea1a:	2601      	movs	r6, #1
		if (rpl->src) {
    ea1c:	8823      	ldrh	r3, [r4, #0]
    ea1e:	b153      	cbz	r3, ea36 <bt_mesh_rpl_reset+0x22>
			if (rpl->old_iv) {
    ea20:	78a3      	ldrb	r3, [r4, #2]
    ea22:	b173      	cbz	r3, ea42 <bt_mesh_rpl_reset+0x2e>
				(void)memset(rpl, 0, sizeof(*rpl));
    ea24:	2208      	movs	r2, #8
    ea26:	2100      	movs	r1, #0
    ea28:	4620      	mov	r0, r4
    ea2a:	f015 fbba 	bl	241a2 <memset>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
    ea2e:	2000      	movs	r0, #0
	entry->store = true;
    ea30:	70e6      	strb	r6, [r4, #3]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
    ea32:	f003 fac9 	bl	11fc8 <bt_mesh_settings_store_schedule>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    ea36:	3501      	adds	r5, #1
    ea38:	2d0a      	cmp	r5, #10
    ea3a:	f104 0408 	add.w	r4, r4, #8
    ea3e:	d1ed      	bne.n	ea1c <bt_mesh_rpl_reset+0x8>
}
    ea40:	bd70      	pop	{r4, r5, r6, pc}
				rpl->old_iv = true;
    ea42:	70a6      	strb	r6, [r4, #2]
    ea44:	e7f3      	b.n	ea2e <bt_mesh_rpl_reset+0x1a>
    ea46:	bf00      	nop
    ea48:	20002adc 	.word	0x20002adc

0000ea4c <bt_mesh_rpl_pending_store>:
#endif
	store_rpl(rpl);
}

void bt_mesh_rpl_pending_store(void)
{
    ea4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea50:	4c26      	ldr	r4, [pc, #152]	; (eaec <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8c>)
    ea52:	4f27      	ldr	r7, [pc, #156]	; (eaf0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>)
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
    ea54:	4e27      	ldr	r6, [pc, #156]	; (eaf4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x94>)
		BT_ERR("Failed to clear RPL");
    ea56:	f8df 80a4 	ldr.w	r8, [pc, #164]	; eafc <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9c>
{
    ea5a:	b086      	sub	sp, #24
	int i;

	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    ea5c:	2500      	movs	r5, #0
    ea5e:	f3bf 8f5b 	dmb	ish
    ea62:	683b      	ldr	r3, [r7, #0]
    ea64:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    ea68:	07db      	lsls	r3, r3, #31
    ea6a:	d529      	bpl.n	eac0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>
	if (!rpl->store) {
    ea6c:	78e3      	ldrb	r3, [r4, #3]
    ea6e:	b1fb      	cbz	r3, eab0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>
	rpl->store = false;
    ea70:	2300      	movs	r3, #0
	rpl.seq = entry->seq;
    ea72:	6862      	ldr	r2, [r4, #4]
	rpl->store = false;
    ea74:	70e3      	strb	r3, [r4, #3]
	rpl.seq = entry->seq;
    ea76:	9b00      	ldr	r3, [sp, #0]
    ea78:	f362 0317 	bfi	r3, r2, #0, #24
	rpl.old_iv = entry->old_iv;
    ea7c:	78a2      	ldrb	r2, [r4, #2]
	rpl.seq = entry->seq;
    ea7e:	9300      	str	r3, [sp, #0]
	rpl.old_iv = entry->old_iv;
    ea80:	f3c3 6307 	ubfx	r3, r3, #24, #8
    ea84:	f362 0300 	bfi	r3, r2, #0, #1
    ea88:	f88d 3003 	strb.w	r3, [sp, #3]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
    ea8c:	4632      	mov	r2, r6
    ea8e:	2112      	movs	r1, #18
    ea90:	8823      	ldrh	r3, [r4, #0]
    ea92:	a801      	add	r0, sp, #4
    ea94:	f013 fa26 	bl	21ee4 <snprintk>
	err = settings_save_one(path, &rpl, sizeof(rpl));
    ea98:	2204      	movs	r2, #4
    ea9a:	4669      	mov	r1, sp
    ea9c:	eb0d 0002 	add.w	r0, sp, r2
    eaa0:	f7f4 fc0e 	bl	32c0 <settings_save_one>
	if (err) {
    eaa4:	b120      	cbz	r0, eab0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>
		BT_ERR("Failed to store RPL %s value", log_strdup(path));
    eaa6:	aa01      	add	r2, sp, #4
    eaa8:	2145      	movs	r1, #69	; 0x45
    eaaa:	4813      	ldr	r0, [pc, #76]	; (eaf8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>)
    eaac:	f013 fa0d 	bl	21eca <printk>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    eab0:	3501      	adds	r5, #1
    eab2:	2d0a      	cmp	r5, #10
    eab4:	f104 0408 	add.w	r4, r4, #8
    eab8:	d1d1      	bne.n	ea5e <bt_mesh_rpl_pending_store+0x12>
			store_pending_rpl(&replay_list[i]);
		} else {
			clear_rpl(&replay_list[i]);
		}
	}
}
    eaba:	b006      	add	sp, #24
    eabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!rpl->src) {
    eac0:	8823      	ldrh	r3, [r4, #0]
    eac2:	2b00      	cmp	r3, #0
    eac4:	d0f4      	beq.n	eab0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
    eac6:	4632      	mov	r2, r6
    eac8:	2112      	movs	r1, #18
    eaca:	a801      	add	r0, sp, #4
    eacc:	f013 fa0a 	bl	21ee4 <snprintk>
	err = settings_delete(path);
    ead0:	a801      	add	r0, sp, #4
    ead2:	f014 f837 	bl	22b44 <settings_delete>
	if (err) {
    ead6:	b118      	cbz	r0, eae0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80>
		BT_ERR("Failed to clear RPL");
    ead8:	2145      	movs	r1, #69	; 0x45
    eada:	4640      	mov	r0, r8
    eadc:	f013 f9f5 	bl	21eca <printk>
	(void)memset(rpl, 0, sizeof(*rpl));
    eae0:	2208      	movs	r2, #8
    eae2:	2100      	movs	r1, #0
    eae4:	4620      	mov	r0, r4
    eae6:	f015 fb5c 	bl	241a2 <memset>
    eaea:	e7e1      	b.n	eab0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>
    eaec:	20002adc 	.word	0x20002adc
    eaf0:	20001ac0 	.word	0x20001ac0
    eaf4:	0002ce17 	.word	0x0002ce17
    eaf8:	0002ce26 	.word	0x0002ce26
    eafc:	0002ce48 	.word	0x0002ce48

0000eb00 <notify_sub_end>:
		}
	}
}

static void notify_sub_end(void)
{
    eb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sub.remaining = 0;
    eb02:	4b0d      	ldr	r3, [pc, #52]	; (eb38 <notify_sub_end+0x38>)

	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    eb04:	4d0d      	ldr	r5, [pc, #52]	; (eb3c <notify_sub_end+0x3c>)
    eb06:	4c0e      	ldr	r4, [pc, #56]	; (eb40 <notify_sub_end+0x40>)
    eb08:	4e0e      	ldr	r6, [pc, #56]	; (eb44 <notify_sub_end+0x44>)
	sub.remaining = 0;
    eb0a:	2200      	movs	r2, #0
    eb0c:	605a      	str	r2, [r3, #4]
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    eb0e:	462f      	mov	r7, r5
    eb10:	42ac      	cmp	r4, r5
    eb12:	d908      	bls.n	eb26 <notify_sub_end+0x26>
    eb14:	4631      	mov	r1, r6
    eb16:	480c      	ldr	r0, [pc, #48]	; (eb48 <notify_sub_end+0x48>)
    eb18:	2247      	movs	r2, #71	; 0x47
    eb1a:	f013 f9d6 	bl	21eca <printk>
    eb1e:	2147      	movs	r1, #71	; 0x47
    eb20:	4630      	mov	r0, r6
    eb22:	f013 fc84 	bl	2242e <assert_post_action>
    eb26:	42bc      	cmp	r4, r7
    eb28:	d300      	bcc.n	eb2c <notify_sub_end+0x2c>
		if (cb->sub_end) {
			cb->sub_end(&sub);
		}
	}
}
    eb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->sub_end) {
    eb2c:	6863      	ldr	r3, [r4, #4]
    eb2e:	b10b      	cbz	r3, eb34 <notify_sub_end+0x34>
			cb->sub_end(&sub);
    eb30:	4801      	ldr	r0, [pc, #4]	; (eb38 <notify_sub_end+0x38>)
    eb32:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    eb34:	3408      	adds	r4, #8
    eb36:	e7eb      	b.n	eb10 <notify_sub_end+0x10>
    eb38:	20002b3c 	.word	0x20002b3c
    eb3c:	00028bd0 	.word	0x00028bd0
    eb40:	00028bd0 	.word	0x00028bd0
    eb44:	0002d00c 	.word	0x0002d00c
    eb48:	0002a026 	.word	0x0002a026

0000eb4c <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    eb4c:	4601      	mov	r1, r0
    eb4e:	4801      	ldr	r0, [pc, #4]	; (eb54 <k_delayed_work_submit+0x8>)
    eb50:	f011 bb02 	b.w	20158 <k_delayed_work_submit_to_queue>
    eb54:	20002170 	.word	0x20002170

0000eb58 <hb_publish_end_cb>:
{
    eb58:	b5d0      	push	{r4, r6, r7, lr}
	if (pub.period && pub.count > 1) {
    eb5a:	4c12      	ldr	r4, [pc, #72]	; (eba4 <hb_publish_end_cb+0x4c>)
    eb5c:	68e3      	ldr	r3, [r4, #12]
    eb5e:	b1c3      	cbz	r3, eb92 <hb_publish_end_cb+0x3a>
    eb60:	8862      	ldrh	r2, [r4, #2]
    eb62:	2a01      	cmp	r2, #1
    eb64:	d915      	bls.n	eb92 <hb_publish_end_cb+0x3a>
		k_delayed_work_submit(&pub_timer, K_SECONDS(pub.period));
    eb66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    eb6a:	4359      	muls	r1, r3
    eb6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    eb70:	f240 36e7 	movw	r6, #999	; 0x3e7
    eb74:	2700      	movs	r7, #0
    eb76:	fbe0 6701 	umlal	r6, r7, r0, r1
    eb7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eb7e:	2300      	movs	r3, #0
    eb80:	4630      	mov	r0, r6
    eb82:	4639      	mov	r1, r7
    eb84:	f7f1 fabc 	bl	100 <__aeabi_uldivmod>
    eb88:	4602      	mov	r2, r0
    eb8a:	460b      	mov	r3, r1
    eb8c:	4806      	ldr	r0, [pc, #24]	; (eba8 <hb_publish_end_cb+0x50>)
    eb8e:	f7ff ffdd 	bl	eb4c <k_delayed_work_submit>
	if (pub.count != 0xffff) {
    eb92:	8863      	ldrh	r3, [r4, #2]
    eb94:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eb98:	4293      	cmp	r3, r2
		pub.count--;
    eb9a:	bf1c      	itt	ne
    eb9c:	f103 33ff 	addne.w	r3, r3, #4294967295
    eba0:	8063      	strhne	r3, [r4, #2]
}
    eba2:	bdd0      	pop	{r4, r6, r7, pc}
    eba4:	20002b2c 	.word	0x20002b2c
    eba8:	20001dd0 	.word	0x20001dd0

0000ebac <heartbeat_send.constprop.3>:
static void sub_end(struct k_work *work)
{
	notify_sub_end();
}

static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    ebac:	b530      	push	{r4, r5, lr}
	struct __packed {
		uint8_t init_ttl;
		uint16_t feat;
	} hb;
	struct bt_mesh_msg_ctx ctx = {
		.net_idx = pub.net_idx,
    ebae:	4c25      	ldr	r4, [pc, #148]	; (ec44 <heartbeat_send.constprop.3+0x98>)
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    ebb0:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
    ebb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ebb6:	f8ad 2012 	strh.w	r2, [sp, #18]
    ebba:	8822      	ldrh	r2, [r4, #0]
    ebbc:	f8ad 2014 	strh.w	r2, [sp, #20]
    ebc0:	2300      	movs	r3, #0
    ebc2:	7922      	ldrb	r2, [r4, #4]
    ebc4:	f8ad 301a 	strh.w	r3, [sp, #26]
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    ebc8:	4605      	mov	r5, r0
		.net_idx = pub.net_idx,
    ebca:	8920      	ldrh	r0, [r4, #8]
	struct bt_mesh_msg_ctx ctx = {
    ebcc:	f88d 201b 	strb.w	r2, [sp, #27]
    ebd0:	f8cd 3016 	str.w	r3, [sp, #22]
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = pub.dst,
		.send_ttl = pub.ttl,
	};
	struct bt_mesh_net_tx tx = {
    ebd4:	e9cd 3307 	strd	r3, r3, [sp, #28]
    ebd8:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
    ebda:	f8ad 0010 	strh.w	r0, [sp, #16]
		.sub = bt_mesh_subnet_get(pub.net_idx),
    ebde:	f016 ffe4 	bl	25baa <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
    ebe2:	ab04      	add	r3, sp, #16
    ebe4:	9308      	str	r3, [sp, #32]
    ebe6:	9007      	str	r0, [sp, #28]
		.ctx = &ctx,
		.src = bt_mesh_primary_addr(),
    ebe8:	f000 fec2 	bl	f970 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
    ebec:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    ebf0:	f7fc fc14 	bl	b41c <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
    ebf4:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	};

	/* Do nothing if heartbeat publication is not enabled */
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    ebf8:	8820      	ldrh	r0, [r4, #0]
    ebfa:	b300      	cbz	r0, ec3e <heartbeat_send.constprop.3+0x92>
		return 0U;
	}

	hb.init_ttl = pub.ttl;
    ebfc:	7923      	ldrb	r3, [r4, #4]
    ebfe:	f88d 300c 	strb.w	r3, [sp, #12]

	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
    ec02:	f016 fe72 	bl	258ea <bt_mesh_relay_get>
	uint16_t feat = 0U;
    ec06:	1e43      	subs	r3, r0, #1
    ec08:	425c      	negs	r4, r3
    ec0a:	415c      	adcs	r4, r3
		feat |= BT_MESH_FEAT_RELAY;
	}

	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    ec0c:	f016 fe50 	bl	258b0 <bt_mesh_gatt_proxy_get>
    ec10:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
    ec12:	bf08      	it	eq
    ec14:	f044 0402 	orreq.w	r4, r4, #2
	}

	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
    ec18:	f016 fe64 	bl	258e4 <bt_mesh_friend_get>
    ec1c:	2801      	cmp	r0, #1

	hb.feat = sys_cpu_to_be16(feat);

	BT_DBG("InitTTL %u feat 0x%04x", pub.ttl, feat);

	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    ec1e:	f04f 0300 	mov.w	r3, #0
		feat |= BT_MESH_FEAT_FRIEND;
    ec22:	bf08      	it	eq
    ec24:	f044 0404 	orreq.w	r4, r4, #4
	hb.feat = sys_cpu_to_be16(feat);
    ec28:	0224      	lsls	r4, r4, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    ec2a:	e9cd 5300 	strd	r5, r3, [sp]
    ec2e:	aa03      	add	r2, sp, #12
    ec30:	2303      	movs	r3, #3
    ec32:	210a      	movs	r1, #10
    ec34:	a807      	add	r0, sp, #28
	hb.feat = sys_cpu_to_be16(feat);
    ec36:	f8ad 400d 	strh.w	r4, [sp, #13]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    ec3a:	f7ff f8c1 	bl	ddc0 <bt_mesh_ctl_send>
				cb, cb_data);
}
    ec3e:	b00b      	add	sp, #44	; 0x2c
    ec40:	bd30      	pop	{r4, r5, pc}
    ec42:	bf00      	nop
    ec44:	20002b2c 	.word	0x20002b2c

0000ec48 <hb_publish>:
		hb_publish_end_cb(err, cb_data);
	}
}

static void hb_publish(struct k_work *work)
{
    ec48:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_subnet *sub;
	int err;

	BT_DBG("hb_pub.count: %u", pub.count);

	sub = bt_mesh_subnet_get(pub.net_idx);
    ec4a:	4c0d      	ldr	r4, [pc, #52]	; (ec80 <hb_publish+0x38>)
    ec4c:	8920      	ldrh	r0, [r4, #8]
    ec4e:	f016 ffac 	bl	25baa <bt_mesh_subnet_get>
	if (!sub) {
    ec52:	4605      	mov	r5, r0
    ec54:	b930      	cbnz	r0, ec64 <hb_publish+0x1c>
		BT_ERR("No matching subnet for idx 0x%02x", pub.net_idx);
    ec56:	8922      	ldrh	r2, [r4, #8]
    ec58:	480a      	ldr	r0, [pc, #40]	; (ec84 <hb_publish+0x3c>)
    ec5a:	2145      	movs	r1, #69	; 0x45
    ec5c:	f013 f935 	bl	21eca <printk>
		pub.dst = BT_MESH_ADDR_UNASSIGNED;
    ec60:	8025      	strh	r5, [r4, #0]

	err = heartbeat_send(&publish_cb, NULL);
	if (err) {
		hb_publish_end_cb(err, NULL);
	}
}
    ec62:	bd38      	pop	{r3, r4, r5, pc}
	if (pub.count == 0U) {
    ec64:	8863      	ldrh	r3, [r4, #2]
    ec66:	2b00      	cmp	r3, #0
    ec68:	d0fb      	beq.n	ec62 <hb_publish+0x1a>
	err = heartbeat_send(&publish_cb, NULL);
    ec6a:	4807      	ldr	r0, [pc, #28]	; (ec88 <hb_publish+0x40>)
    ec6c:	f7ff ff9e 	bl	ebac <heartbeat_send.constprop.3>
	if (err) {
    ec70:	2800      	cmp	r0, #0
    ec72:	d0f6      	beq.n	ec62 <hb_publish+0x1a>
		hb_publish_end_cb(err, NULL);
    ec74:	2100      	movs	r1, #0
}
    ec76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		hb_publish_end_cb(err, NULL);
    ec7a:	f7ff bf6d 	b.w	eb58 <hb_publish_end_cb>
    ec7e:	bf00      	nop
    ec80:	20002b2c 	.word	0x20002b2c
    ec84:	0002cfe5 	.word	0x0002cfe5
    ec88:	00029580 	.word	0x00029580

0000ec8c <sub_remaining>:
{
    ec8c:	b508      	push	{r3, lr}
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
    ec8e:	4b08      	ldr	r3, [pc, #32]	; (ecb0 <sub_remaining+0x24>)
    ec90:	8958      	ldrh	r0, [r3, #10]
    ec92:	b158      	cbz	r0, ecac <sub_remaining+0x20>
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
    ec94:	4807      	ldr	r0, [pc, #28]	; (ecb4 <sub_remaining+0x28>)
    ec96:	f011 fc9b 	bl	205d0 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    ec9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ec9e:	fba0 0102 	umull	r0, r1, r0, r2
    eca2:	0bc3      	lsrs	r3, r0, #15
    eca4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return k_delayed_work_remaining_get(&sub_timer) / MSEC_PER_SEC;
    eca8:	fbb3 f0f2 	udiv	r0, r3, r2
}
    ecac:	2100      	movs	r1, #0
    ecae:	bd08      	pop	{r3, pc}
    ecb0:	20002b3c 	.word	0x20002b3c
    ecb4:	20001e10 	.word	0x20001e10

0000ecb8 <bt_mesh_hb_recv>:

int bt_mesh_hb_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
    ecb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t init_ttl, hops;
	uint16_t feat;

	if (buf->len < 3) {
    ecbc:	888b      	ldrh	r3, [r1, #4]
    ecbe:	2b02      	cmp	r3, #2
{
    ecc0:	4607      	mov	r7, r0
    ecc2:	460d      	mov	r5, r1
	if (buf->len < 3) {
    ecc4:	d807      	bhi.n	ecd6 <bt_mesh_hb_recv+0x1e>
		BT_ERR("Too short heartbeat message");
    ecc6:	4828      	ldr	r0, [pc, #160]	; (ed68 <bt_mesh_hb_recv+0xb0>)
    ecc8:	2145      	movs	r1, #69	; 0x45
    ecca:	f013 f8fe 	bl	21eca <printk>
		return -EINVAL;
    ecce:	f06f 0015 	mvn.w	r0, #21
	       (hops == 1U) ? "" : "s", feat);

	notify_recv(hops, feat);

	return 0;
}
    ecd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    ecd6:	4608      	mov	r0, r1
    ecd8:	f019 f919 	bl	27f0e <net_buf_simple_pull_u8>
    ecdc:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
    ecde:	4628      	mov	r0, r5
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    ece0:	4d22      	ldr	r5, [pc, #136]	; (ed6c <bt_mesh_hb_recv+0xb4>)
	feat = net_buf_simple_pull_be16(buf);
    ece2:	f019 f924 	bl	27f2e <net_buf_simple_pull_be16>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    ece6:	68ba      	ldr	r2, [r7, #8]
    ece8:	68ab      	ldr	r3, [r5, #8]
    ecea:	429a      	cmp	r2, r3
	feat = net_buf_simple_pull_be16(buf);
    ecec:	4606      	mov	r6, r0
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    ecee:	d001      	beq.n	ecf4 <bt_mesh_hb_recv+0x3c>
		return 0;
    ecf0:	2000      	movs	r0, #0
    ecf2:	e7ee      	b.n	ecd2 <bt_mesh_hb_recv+0x1a>
	if (!k_delayed_work_pending(&sub_timer)) {
    ecf4:	481e      	ldr	r0, [pc, #120]	; (ed70 <bt_mesh_hb_recv+0xb8>)
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    ecf6:	7b7f      	ldrb	r7, [r7, #13]
	if (!k_delayed_work_pending(&sub_timer)) {
    ecf8:	f019 fda6 	bl	28848 <k_delayed_work_pending>
    ecfc:	2800      	cmp	r0, #0
    ecfe:	d0f7      	beq.n	ecf0 <bt_mesh_hb_recv+0x38>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    ed00:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    ed04:	1be4      	subs	r4, r4, r7
	sub.min_hops = MIN(sub.min_hops, hops);
    ed06:	7bab      	ldrb	r3, [r5, #14]
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    ed08:	4f1a      	ldr	r7, [pc, #104]	; (ed74 <bt_mesh_hb_recv+0xbc>)
    ed0a:	f8df 8074 	ldr.w	r8, [pc, #116]	; ed80 <bt_mesh_hb_recv+0xc8>
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    ed0e:	3401      	adds	r4, #1
    ed10:	b2e4      	uxtb	r4, r4
	sub.min_hops = MIN(sub.min_hops, hops);
    ed12:	42a3      	cmp	r3, r4
    ed14:	bf28      	it	cs
    ed16:	4623      	movcs	r3, r4
    ed18:	73ab      	strb	r3, [r5, #14]
	sub.max_hops = MAX(sub.max_hops, hops);
    ed1a:	7beb      	ldrb	r3, [r5, #15]
    ed1c:	42a3      	cmp	r3, r4
    ed1e:	bf38      	it	cc
    ed20:	4623      	movcc	r3, r4
    ed22:	73eb      	strb	r3, [r5, #15]
	if (sub.count < 0xffff) {
    ed24:	89ab      	ldrh	r3, [r5, #12]
    ed26:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ed2a:	4293      	cmp	r3, r2
		sub.count++;
    ed2c:	bf1c      	itt	ne
    ed2e:	3301      	addne	r3, #1
    ed30:	81ab      	strhne	r3, [r5, #12]
	sub.remaining = sub_remaining();
    ed32:	f7ff ffab 	bl	ec8c <sub_remaining>
    ed36:	6068      	str	r0, [r5, #4]
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    ed38:	4d0f      	ldr	r5, [pc, #60]	; (ed78 <bt_mesh_hb_recv+0xc0>)
    ed3a:	46b9      	mov	r9, r7
    ed3c:	42bd      	cmp	r5, r7
    ed3e:	d908      	bls.n	ed52 <bt_mesh_hb_recv+0x9a>
    ed40:	4641      	mov	r1, r8
    ed42:	480e      	ldr	r0, [pc, #56]	; (ed7c <bt_mesh_hb_recv+0xc4>)
    ed44:	223c      	movs	r2, #60	; 0x3c
    ed46:	f013 f8c0 	bl	21eca <printk>
    ed4a:	213c      	movs	r1, #60	; 0x3c
    ed4c:	4640      	mov	r0, r8
    ed4e:	f013 fb6e 	bl	2242e <assert_post_action>
    ed52:	454d      	cmp	r5, r9
    ed54:	d2cc      	bcs.n	ecf0 <bt_mesh_hb_recv+0x38>
		if (cb->recv) {
    ed56:	682b      	ldr	r3, [r5, #0]
    ed58:	b11b      	cbz	r3, ed62 <bt_mesh_hb_recv+0xaa>
			cb->recv(&sub, hops, feat);
    ed5a:	4632      	mov	r2, r6
    ed5c:	4621      	mov	r1, r4
    ed5e:	4803      	ldr	r0, [pc, #12]	; (ed6c <bt_mesh_hb_recv+0xb4>)
    ed60:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    ed62:	3508      	adds	r5, #8
    ed64:	e7ea      	b.n	ed3c <bt_mesh_hb_recv+0x84>
    ed66:	bf00      	nop
    ed68:	0002cf3c 	.word	0x0002cf3c
    ed6c:	20002b3c 	.word	0x20002b3c
    ed70:	20001e00 	.word	0x20001e00
    ed74:	00028bd0 	.word	0x00028bd0
    ed78:	00028bd0 	.word	0x00028bd0
    ed7c:	0002a026 	.word	0x0002a026
    ed80:	0002d00c 	.word	0x0002d00c

0000ed84 <bt_mesh_hb_pub_set>:

	k_delayed_work_cancel(&pub_timer);
}

uint8_t bt_mesh_hb_pub_set(struct bt_mesh_hb_pub *new_pub)
{
    ed84:	b538      	push	{r3, r4, r5, lr}
	if (!new_pub || new_pub->dst == BT_MESH_ADDR_UNASSIGNED) {
    ed86:	4604      	mov	r4, r0
    ed88:	b108      	cbz	r0, ed8e <bt_mesh_hb_pub_set+0xa>
    ed8a:	8803      	ldrh	r3, [r0, #0]
    ed8c:	b963      	cbnz	r3, eda8 <bt_mesh_hb_pub_set+0x24>
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
    ed8e:	4b1b      	ldr	r3, [pc, #108]	; (edfc <bt_mesh_hb_pub_set+0x78>)
	k_delayed_work_cancel(&pub_timer);
    ed90:	481b      	ldr	r0, [pc, #108]	; (ee00 <bt_mesh_hb_pub_set+0x7c>)
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
    ed92:	2200      	movs	r2, #0
    ed94:	601a      	str	r2, [r3, #0]
	pub.ttl = 0U;
    ed96:	711a      	strb	r2, [r3, #4]
	pub.period = 0U;
    ed98:	60da      	str	r2, [r3, #12]
	k_delayed_work_cancel(&pub_timer);
    ed9a:	f011 fa4d 	bl	20238 <k_delayed_work_cancel>
		pub_disable();

		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
		    bt_mesh_is_provisioned()) {
    ed9e:	f016 fd42 	bl	25826 <bt_mesh_is_provisioned>
		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    eda2:	bb10      	cbnz	r0, edea <bt_mesh_hb_pub_set+0x66>
			bt_mesh_settings_store_schedule(
					BT_MESH_SETTINGS_HB_PUB_PENDING);
		}

		return STATUS_SUCCESS;
    eda4:	2000      	movs	r0, #0
		bt_mesh_settings_store_schedule(
					BT_MESH_SETTINGS_HB_PUB_PENDING);
	}

	return STATUS_SUCCESS;
}
    eda6:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_mesh_subnet_get(new_pub->net_idx)) {
    eda8:	8900      	ldrh	r0, [r0, #8]
    edaa:	f016 fefe 	bl	25baa <bt_mesh_subnet_get>
    edae:	b930      	cbnz	r0, edbe <bt_mesh_hb_pub_set+0x3a>
		BT_ERR("Unknown NetKey 0x%04x", new_pub->net_idx);
    edb0:	4814      	ldr	r0, [pc, #80]	; (ee04 <bt_mesh_hb_pub_set+0x80>)
    edb2:	8922      	ldrh	r2, [r4, #8]
    edb4:	2145      	movs	r1, #69	; 0x45
    edb6:	f013 f888 	bl	21eca <printk>
		return STATUS_INVALID_NETKEY;
    edba:	2004      	movs	r0, #4
    edbc:	e7f3      	b.n	eda6 <bt_mesh_hb_pub_set+0x22>
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
    edbe:	88e3      	ldrh	r3, [r4, #6]
	pub = *new_pub;
    edc0:	4d0e      	ldr	r5, [pc, #56]	; (edfc <bt_mesh_hb_pub_set+0x78>)
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
    edc2:	f003 030f 	and.w	r3, r3, #15
    edc6:	80e3      	strh	r3, [r4, #6]
	pub = *new_pub;
    edc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    edcc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (!bt_mesh_is_provisioned()) {
    edd0:	f016 fd29 	bl	25826 <bt_mesh_is_provisioned>
    edd4:	2800      	cmp	r0, #0
    edd6:	d0e5      	beq.n	eda4 <bt_mesh_hb_pub_set+0x20>
	if (pub.period && pub.count) {
    edd8:	68eb      	ldr	r3, [r5, #12]
    edda:	b153      	cbz	r3, edf2 <bt_mesh_hb_pub_set+0x6e>
    eddc:	886b      	ldrh	r3, [r5, #2]
    edde:	b143      	cbz	r3, edf2 <bt_mesh_hb_pub_set+0x6e>
		k_delayed_work_submit(&pub_timer, K_NO_WAIT);
    ede0:	2200      	movs	r2, #0
    ede2:	2300      	movs	r3, #0
    ede4:	4806      	ldr	r0, [pc, #24]	; (ee00 <bt_mesh_hb_pub_set+0x7c>)
    ede6:	f7ff feb1 	bl	eb4c <k_delayed_work_submit>
			bt_mesh_settings_store_schedule(
    edea:	2006      	movs	r0, #6
    edec:	f003 f8ec 	bl	11fc8 <bt_mesh_settings_store_schedule>
    edf0:	e7d8      	b.n	eda4 <bt_mesh_hb_pub_set+0x20>
		k_delayed_work_cancel(&pub_timer);
    edf2:	4803      	ldr	r0, [pc, #12]	; (ee00 <bt_mesh_hb_pub_set+0x7c>)
    edf4:	f011 fa20 	bl	20238 <k_delayed_work_cancel>
    edf8:	e7f7      	b.n	edea <bt_mesh_hb_pub_set+0x66>
    edfa:	bf00      	nop
    edfc:	20002b2c 	.word	0x20002b2c
    ee00:	20001dd0 	.word	0x20001dd0
    ee04:	0002cf21 	.word	0x0002cf21

0000ee08 <hb_pub_set>:
	}
}

static int hb_pub_set(const char *name, size_t len_rd,
		      settings_read_cb read_cb, void *cb_arg)
{
    ee08:	b510      	push	{r4, lr}
    ee0a:	b086      	sub	sp, #24
    ee0c:	4610      	mov	r0, r2
    ee0e:	4619      	mov	r1, r3
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val hb_val;
	int err;

	err = bt_mesh_settings_set(read_cb, cb_arg, &hb_val, sizeof(hb_val));
    ee10:	466a      	mov	r2, sp
    ee12:	2308      	movs	r3, #8
    ee14:	f003 f8b6 	bl	11f84 <bt_mesh_settings_set>
	if (err) {
    ee18:	4604      	mov	r4, r0
    ee1a:	b130      	cbz	r0, ee2a <hb_pub_set+0x22>
		BT_ERR("Failed to set \'hb_val\'");
    ee1c:	2145      	movs	r1, #69	; 0x45
    ee1e:	4819      	ldr	r0, [pc, #100]	; (ee84 <hb_pub_set+0x7c>)
    ee20:	f013 f853 	bl	21eca <printk>
	(void)bt_mesh_hb_pub_set(&pub);

	BT_DBG("Restored heartbeat publication");

	return 0;
}
    ee24:	4620      	mov	r0, r4
    ee26:	b006      	add	sp, #24
    ee28:	bd10      	pop	{r4, pc}
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
    ee2a:	f89d 2002 	ldrb.w	r2, [sp, #2]
	pub.dst = hb_val.dst;
    ee2e:	f8bd 3000 	ldrh.w	r3, [sp]
    ee32:	f8ad 3008 	strh.w	r3, [sp, #8]
 * SPDX-License-Identifier: Apache-2.0
 */

static inline uint16_t bt_mesh_hb_pwr2(uint8_t val)
{
	if (!val) {
    ee36:	b302      	cbz	r2, ee7a <hb_pub_set+0x72>
		return 0x0000;
	} else if (val == 0xff || val == 0x11) {
    ee38:	2aff      	cmp	r2, #255	; 0xff
    ee3a:	d020      	beq.n	ee7e <hb_pub_set+0x76>
    ee3c:	2a11      	cmp	r2, #17
    ee3e:	d01e      	beq.n	ee7e <hb_pub_set+0x76>
		return 0xffff;
	} else {
		return (1 << (val - 1));
    ee40:	3a01      	subs	r2, #1
    ee42:	2301      	movs	r3, #1
    ee44:	4093      	lsls	r3, r2
    ee46:	b29b      	uxth	r3, r3
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
    ee48:	9305      	str	r3, [sp, #20]
	pub.ttl = hb_val.ttl;
    ee4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ee4e:	f88d 300c 	strb.w	r3, [sp, #12]
	pub.feat = hb_val.feat;
    ee52:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ee56:	f8ad 300e 	strh.w	r3, [sp, #14]
	pub.net_idx = hb_val.net_idx;
    ee5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ee5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ee62:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (hb_val.indefinite) {
    ee66:	f89d 3007 	ldrb.w	r3, [sp, #7]
	(void)bt_mesh_hb_pub_set(&pub);
    ee6a:	a802      	add	r0, sp, #8
	if (hb_val.indefinite) {
    ee6c:	f343 1300 	sbfx	r3, r3, #4, #1
    ee70:	f8ad 300a 	strh.w	r3, [sp, #10]
	(void)bt_mesh_hb_pub_set(&pub);
    ee74:	f7ff ff86 	bl	ed84 <bt_mesh_hb_pub_set>
	return 0;
    ee78:	e7d4      	b.n	ee24 <hb_pub_set+0x1c>
		return 0x0000;
    ee7a:	4603      	mov	r3, r0
    ee7c:	e7e4      	b.n	ee48 <hb_pub_set+0x40>
		return 0xffff;
    ee7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ee82:	e7e1      	b.n	ee48 <hb_pub_set+0x40>
    ee84:	0002cfc9 	.word	0x0002cfc9

0000ee88 <bt_mesh_hb_pub_get>:
	*get = pub;
    ee88:	4b03      	ldr	r3, [pc, #12]	; (ee98 <bt_mesh_hb_pub_get+0x10>)
{
    ee8a:	b510      	push	{r4, lr}
    ee8c:	4604      	mov	r4, r0
	*get = pub;
    ee8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    ee90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    ee94:	bd10      	pop	{r4, pc}
    ee96:	bf00      	nop
    ee98:	20002b2c 	.word	0x20002b2c

0000ee9c <bt_mesh_hb_sub_set>:
{
    ee9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
    ee9e:	0403      	lsls	r3, r0, #16
{
    eea0:	4607      	mov	r7, r0
    eea2:	460d      	mov	r5, r1
    eea4:	4616      	mov	r6, r2
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
    eea6:	d505      	bpl.n	eeb4 <bt_mesh_hb_sub_set+0x18>
		BT_WARN("Prohibited source address");
    eea8:	482a      	ldr	r0, [pc, #168]	; (ef54 <bt_mesh_hb_sub_set+0xb8>)
    eeaa:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Prohibited destination address");
    eeac:	f013 f80d 	bl	21eca <printk>
		return STATUS_INVALID_ADDRESS;
    eeb0:	2001      	movs	r0, #1
}
    eeb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
    eeb4:	f481 4300 	eor.w	r3, r1, #32768	; 0x8000
    eeb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    eebc:	d202      	bcs.n	eec4 <bt_mesh_hb_sub_set+0x28>
		BT_WARN("Prohibited destination address");
    eebe:	2157      	movs	r1, #87	; 0x57
    eec0:	4825      	ldr	r0, [pc, #148]	; (ef58 <bt_mesh_hb_sub_set+0xbc>)
    eec2:	e7f3      	b.n	eeac <bt_mesh_hb_sub_set+0x10>
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
    eec4:	f501 7380 	add.w	r3, r1, #256	; 0x100
    eec8:	b29b      	uxth	r3, r3
    eeca:	2bfb      	cmp	r3, #251	; 0xfb
    eecc:	d9f7      	bls.n	eebe <bt_mesh_hb_sub_set+0x22>
    eece:	b20b      	sxth	r3, r1
    eed0:	2b00      	cmp	r3, #0
    eed2:	dd03      	ble.n	eedc <bt_mesh_hb_sub_set+0x40>
	    (BT_MESH_ADDR_IS_UNICAST(dst) && dst != bt_mesh_primary_addr())) {
    eed4:	f000 fd4c 	bl	f970 <bt_mesh_primary_addr>
    eed8:	42a8      	cmp	r0, r5
    eeda:	d1f0      	bne.n	eebe <bt_mesh_hb_sub_set+0x22>
	if (period > (1U << 16)) {
    eedc:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
    eee0:	d906      	bls.n	eef0 <bt_mesh_hb_sub_set+0x54>
		BT_WARN("Prohibited subscription period %u s", period);
    eee2:	481e      	ldr	r0, [pc, #120]	; (ef5c <bt_mesh_hb_sub_set+0xc0>)
    eee4:	4632      	mov	r2, r6
    eee6:	2157      	movs	r1, #87	; 0x57
    eee8:	f012 ffef 	bl	21eca <printk>
		return STATUS_CANNOT_SET;
    eeec:	200f      	movs	r0, #15
    eeee:	e7e0      	b.n	eeb2 <bt_mesh_hb_sub_set+0x16>
	if (src == BT_MESH_ADDR_UNASSIGNED || dst == BT_MESH_ADDR_UNASSIGNED) {
    eef0:	4c1b      	ldr	r4, [pc, #108]	; (ef60 <bt_mesh_hb_sub_set+0xc4>)
    eef2:	b107      	cbz	r7, eef6 <bt_mesh_hb_sub_set+0x5a>
    eef4:	b985      	cbnz	r5, ef18 <bt_mesh_hb_sub_set+0x7c>
		sub.src = BT_MESH_ADDR_UNASSIGNED;
    eef6:	2300      	movs	r3, #0
		sub.count = 0U;
    eef8:	e9c4 3302 	strd	r3, r3, [r4, #8]
		sub.period = sub.period - sub_remaining();
    eefc:	6825      	ldr	r5, [r4, #0]
    eefe:	f7ff fec5 	bl	ec8c <sub_remaining>
    ef02:	1a28      	subs	r0, r5, r0
    ef04:	6020      	str	r0, [r4, #0]
		if (!k_delayed_work_cancel(&sub_timer)) {
    ef06:	4817      	ldr	r0, [pc, #92]	; (ef64 <bt_mesh_hb_sub_set+0xc8>)
    ef08:	f011 f996 	bl	20238 <k_delayed_work_cancel>
    ef0c:	b108      	cbz	r0, ef12 <bt_mesh_hb_sub_set+0x76>
	return STATUS_SUCCESS;
    ef0e:	2000      	movs	r0, #0
    ef10:	e7cf      	b.n	eeb2 <bt_mesh_hb_sub_set+0x16>
			notify_sub_end();
    ef12:	f7ff fdf5 	bl	eb00 <notify_sub_end>
    ef16:	e7fa      	b.n	ef0e <bt_mesh_hb_sub_set+0x72>
	} else if (period) {
    ef18:	2e00      	cmp	r6, #0
    ef1a:	d0ef      	beq.n	eefc <bt_mesh_hb_sub_set+0x60>
		sub.count = 0U;
    ef1c:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
		k_delayed_work_submit(&sub_timer, K_SECONDS(period));
    ef20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		sub.src = src;
    ef24:	8127      	strh	r7, [r4, #8]
		sub.dst = dst;
    ef26:	8165      	strh	r5, [r4, #10]
		sub.count = 0U;
    ef28:	60e3      	str	r3, [r4, #12]
		sub.period = period;
    ef2a:	6026      	str	r6, [r4, #0]
			return (t * to_hz + off) / from_hz;
    ef2c:	f240 30e7 	movw	r0, #999	; 0x3e7
		k_delayed_work_submit(&sub_timer, K_SECONDS(period));
    ef30:	4356      	muls	r6, r2
    ef32:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    ef36:	2100      	movs	r1, #0
    ef38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ef3c:	2300      	movs	r3, #0
    ef3e:	fbe4 0106 	umlal	r0, r1, r4, r6
    ef42:	f7f1 f8dd 	bl	100 <__aeabi_uldivmod>
    ef46:	4602      	mov	r2, r0
    ef48:	460b      	mov	r3, r1
    ef4a:	4806      	ldr	r0, [pc, #24]	; (ef64 <bt_mesh_hb_sub_set+0xc8>)
    ef4c:	f7ff fdfe 	bl	eb4c <k_delayed_work_submit>
    ef50:	e7dd      	b.n	ef0e <bt_mesh_hb_sub_set+0x72>
    ef52:	bf00      	nop
    ef54:	0002cf5d 	.word	0x0002cf5d
    ef58:	0002cf7c 	.word	0x0002cf7c
    ef5c:	0002cfa0 	.word	0x0002cfa0
    ef60:	20002b3c 	.word	0x20002b3c
    ef64:	20001e00 	.word	0x20001e00

0000ef68 <bt_mesh_hb_sub_reset_count>:
	sub.count = 0;
    ef68:	4b01      	ldr	r3, [pc, #4]	; (ef70 <bt_mesh_hb_sub_reset_count+0x8>)
    ef6a:	2200      	movs	r2, #0
    ef6c:	819a      	strh	r2, [r3, #12]
}
    ef6e:	4770      	bx	lr
    ef70:	20002b3c 	.word	0x20002b3c

0000ef74 <bt_mesh_hb_sub_get>:
	*get = sub;
    ef74:	4b04      	ldr	r3, [pc, #16]	; (ef88 <bt_mesh_hb_sub_get+0x14>)
{
    ef76:	b510      	push	{r4, lr}
    ef78:	4604      	mov	r4, r0
	*get = sub;
    ef7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    ef7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	get->remaining = sub_remaining();
    ef80:	f7ff fe84 	bl	ec8c <sub_remaining>
    ef84:	6060      	str	r0, [r4, #4]
}
    ef86:	bd10      	pop	{r4, pc}
    ef88:	20002b3c 	.word	0x20002b3c

0000ef8c <bt_mesh_hb_feature_changed>:
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    ef8c:	4b04      	ldr	r3, [pc, #16]	; (efa0 <bt_mesh_hb_feature_changed+0x14>)
    ef8e:	881a      	ldrh	r2, [r3, #0]
    ef90:	b12a      	cbz	r2, ef9e <bt_mesh_hb_feature_changed+0x12>
	if (!(pub.feat & features)) {
    ef92:	88db      	ldrh	r3, [r3, #6]
    ef94:	4218      	tst	r0, r3
    ef96:	d002      	beq.n	ef9e <bt_mesh_hb_feature_changed+0x12>
	heartbeat_send(NULL, NULL);
    ef98:	2000      	movs	r0, #0
    ef9a:	f7ff be07 	b.w	ebac <heartbeat_send.constprop.3>
}
    ef9e:	4770      	bx	lr
    efa0:	20002b2c 	.word	0x20002b2c

0000efa4 <bt_mesh_hb_init>:
	pub.net_idx = BT_MESH_KEY_UNUSED;
    efa4:	4b0b      	ldr	r3, [pc, #44]	; (efd4 <bt_mesh_hb_init+0x30>)
    efa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
    efaa:	b510      	push	{r4, lr}
	pub.net_idx = BT_MESH_KEY_UNUSED;
    efac:	811a      	strh	r2, [r3, #8]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    efae:	4b0a      	ldr	r3, [pc, #40]	; (efd8 <bt_mesh_hb_init+0x34>)
    efb0:	2430      	movs	r4, #48	; 0x30
    efb2:	4622      	mov	r2, r4
    efb4:	2100      	movs	r1, #0
    efb6:	4618      	mov	r0, r3
    efb8:	f015 f8f3 	bl	241a2 <memset>
    efbc:	4b07      	ldr	r3, [pc, #28]	; (efdc <bt_mesh_hb_init+0x38>)
    efbe:	4a08      	ldr	r2, [pc, #32]	; (efe0 <bt_mesh_hb_init+0x3c>)
    efc0:	6042      	str	r2, [r0, #4]
    efc2:	2100      	movs	r1, #0
    efc4:	4622      	mov	r2, r4
    efc6:	4618      	mov	r0, r3
    efc8:	f015 f8eb 	bl	241a2 <memset>
    efcc:	4a05      	ldr	r2, [pc, #20]	; (efe4 <bt_mesh_hb_init+0x40>)
    efce:	6042      	str	r2, [r0, #4]
}
    efd0:	bd10      	pop	{r4, pc}
    efd2:	bf00      	nop
    efd4:	20002b2c 	.word	0x20002b2c
    efd8:	20001dd0 	.word	0x20001dd0
    efdc:	20001e00 	.word	0x20001e00
    efe0:	0000ec49 	.word	0x0000ec49
    efe4:	00025eab 	.word	0x00025eab

0000efe8 <bt_mesh_hb_start>:
	if (pub.count && pub.period) {
    efe8:	4b05      	ldr	r3, [pc, #20]	; (f000 <bt_mesh_hb_start+0x18>)
    efea:	885a      	ldrh	r2, [r3, #2]
    efec:	b132      	cbz	r2, effc <bt_mesh_hb_start+0x14>
    efee:	68db      	ldr	r3, [r3, #12]
    eff0:	b123      	cbz	r3, effc <bt_mesh_hb_start+0x14>
		k_delayed_work_submit(&pub_timer, K_NO_WAIT);
    eff2:	2200      	movs	r2, #0
    eff4:	2300      	movs	r3, #0
    eff6:	4803      	ldr	r0, [pc, #12]	; (f004 <bt_mesh_hb_start+0x1c>)
    eff8:	f7ff bda8 	b.w	eb4c <k_delayed_work_submit>
}
    effc:	4770      	bx	lr
    effe:	bf00      	nop
    f000:	20002b2c 	.word	0x20002b2c
    f004:	20001dd0 	.word	0x20001dd0

0000f008 <bt_mesh_hb_pub_pending_store>:

BT_MESH_SETTINGS_DEFINE(pub, "HBPub", hb_pub_set);

void bt_mesh_hb_pub_pending_store(void)
{
    f008:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val val;
	int err;

	bt_mesh_hb_pub_get(&pub);
    f00a:	a802      	add	r0, sp, #8
    f00c:	f7ff ff3c 	bl	ee88 <bt_mesh_hb_pub_get>
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    f010:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    f014:	b951      	cbnz	r1, f02c <bt_mesh_hb_pub_pending_store+0x24>
		err = settings_delete("bt/mesh/HBPub");
    f016:	481e      	ldr	r0, [pc, #120]	; (f090 <bt_mesh_hb_pub_pending_store+0x88>)
    f018:	f013 fd94 	bl	22b44 <settings_delete>
		val.net_idx = pub.net_idx;

		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
	}

	if (err) {
    f01c:	b118      	cbz	r0, f026 <bt_mesh_hb_pub_pending_store+0x1e>
		BT_ERR("Failed to store Heartbeat Publication");
    f01e:	2145      	movs	r1, #69	; 0x45
    f020:	481c      	ldr	r0, [pc, #112]	; (f094 <bt_mesh_hb_pub_pending_store+0x8c>)
    f022:	f012 ff52 	bl	21eca <printk>
	} else {
		BT_DBG("Stored Heartbeat Publication");
	}
}
    f026:	b007      	add	sp, #28
    f028:	f85d fb04 	ldr.w	pc, [sp], #4
		val.indefinite = (pub.count == 0xffff);
    f02c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
		val.dst = pub.dst;
    f030:	f8ad 1000 	strh.w	r1, [sp]
		val.indefinite = (pub.count == 0xffff);
    f034:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f038:	1a98      	subs	r0, r3, r2
    f03a:	4243      	negs	r3, r0
    f03c:	4143      	adcs	r3, r0
    f03e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f042:	f363 1004 	bfi	r0, r3, #4, #1
		val.period = bt_mesh_hb_log(pub.period);
    f046:	9b05      	ldr	r3, [sp, #20]
		val.indefinite = (pub.count == 0xffff);
    f048:	f88d 0007 	strb.w	r0, [sp, #7]
	}
}

static inline uint8_t bt_mesh_hb_log(uint32_t val)
{
	if (!val) {
    f04c:	b13b      	cbz	r3, f05e <bt_mesh_hb_pub_pending_store+0x56>
		return 0x00;
	} else if (val == 0xffff) {
    f04e:	4293      	cmp	r3, r2
		return 0xff;
	} else {
		return 32 - __builtin_clz(val);
    f050:	bf1d      	ittte	ne
    f052:	fab3 f383 	clzne	r3, r3
    f056:	f1c3 0320 	rsbne	r3, r3, #32
    f05a:	b2db      	uxtbne	r3, r3
		return 0xff;
    f05c:	23ff      	moveq	r3, #255	; 0xff
		val.period = bt_mesh_hb_log(pub.period);
    f05e:	f88d 3002 	strb.w	r3, [sp, #2]
		val.ttl = pub.ttl;
    f062:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f066:	f88d 3003 	strb.w	r3, [sp, #3]
		val.feat = pub.feat;
    f06a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		val.net_idx = pub.net_idx;
    f06e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
		val.feat = pub.feat;
    f072:	f8ad 3004 	strh.w	r3, [sp, #4]
		val.net_idx = pub.net_idx;
    f076:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
    f07a:	4805      	ldr	r0, [pc, #20]	; (f090 <bt_mesh_hb_pub_pending_store+0x88>)
		val.net_idx = pub.net_idx;
    f07c:	f362 030b 	bfi	r3, r2, #0, #12
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
    f080:	4669      	mov	r1, sp
    f082:	2208      	movs	r2, #8
		val.net_idx = pub.net_idx;
    f084:	f8ad 3006 	strh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
    f088:	f7f4 f91a 	bl	32c0 <settings_save_one>
    f08c:	e7c6      	b.n	f01c <bt_mesh_hb_pub_pending_store+0x14>
    f08e:	bf00      	nop
    f090:	0002cee8 	.word	0x0002cee8
    f094:	0002cef6 	.word	0x0002cef6

0000f098 <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const uint8_t n[16], const uint8_t *p, size_t p_len,
	       uint8_t net_id[1], uint8_t enc_key[16], uint8_t priv_key[16])
{
    f098:	b5f0      	push	{r4, r5, r6, r7, lr}
    f09a:	b095      	sub	sp, #84	; 0x54
    f09c:	4604      	mov	r4, r0
    f09e:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
    f0a0:	4828      	ldr	r0, [pc, #160]	; (f144 <bt_mesh_k2+0xac>)
    f0a2:	a902      	add	r1, sp, #8
{
    f0a4:	4615      	mov	r5, r2
    f0a6:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
    f0a8:	f016 ff5c 	bl	25f64 <bt_mesh_s1>
	if (err) {
    f0ac:	2800      	cmp	r0, #0
    f0ae:	d146      	bne.n	f13e <bt_mesh_k2+0xa6>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
    f0b0:	4621      	mov	r1, r4
    f0b2:	ab0a      	add	r3, sp, #40	; 0x28
    f0b4:	2210      	movs	r2, #16
    f0b6:	a802      	add	r0, sp, #8
    f0b8:	f016 ff4a 	bl	25f50 <bt_mesh_aes_cmac_one>
	if (err) {
    f0bc:	4604      	mov	r4, r0
    f0be:	2800      	cmp	r0, #0
    f0c0:	d13a      	bne.n	f138 <bt_mesh_k2+0xa0>
		return err;
	}

	pad = 0x01;
    f0c2:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
    f0c4:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
    f0c8:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    f0cc:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
    f0ce:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	pad = 0x01;
    f0d2:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = 0;
    f0d6:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    f0da:	462b      	mov	r3, r5
    f0dc:	2203      	movs	r2, #3
    f0de:	a90e      	add	r1, sp, #56	; 0x38
    f0e0:	a80a      	add	r0, sp, #40	; 0x28
    f0e2:	f016 ff13 	bl	25f0c <bt_mesh_aes_cmac>
	if (err) {
    f0e6:	4604      	mov	r4, r0
    f0e8:	bb30      	cbnz	r0, f138 <bt_mesh_k2+0xa0>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
    f0ea:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
    f0ee:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
    f0f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f0f4:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
	pad = 0x02;
    f0f6:	2302      	movs	r3, #2
    f0f8:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
    f0fc:	2610      	movs	r6, #16

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    f0fe:	462b      	mov	r3, r5
    f100:	2203      	movs	r2, #3
    f102:	a90e      	add	r1, sp, #56	; 0x38
    f104:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
    f106:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    f108:	f016 ff00 	bl	25f0c <bt_mesh_aes_cmac>
	if (err) {
    f10c:	4604      	mov	r4, r0
    f10e:	b998      	cbnz	r0, f138 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(enc_key, out, 16);
    f110:	4632      	mov	r2, r6
    f112:	4629      	mov	r1, r5
    f114:	981a      	ldr	r0, [sp, #104]	; 0x68
    f116:	f015 f81a 	bl	2414e <memcpy>

	pad = 0x03;
    f11a:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    f11c:	462b      	mov	r3, r5
    f11e:	a90e      	add	r1, sp, #56	; 0x38
    f120:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
    f122:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    f126:	f016 fef1 	bl	25f0c <bt_mesh_aes_cmac>
	if (err) {
    f12a:	4604      	mov	r4, r0
    f12c:	b920      	cbnz	r0, f138 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(priv_key, out, 16);
    f12e:	4632      	mov	r2, r6
    f130:	4629      	mov	r1, r5
    f132:	981b      	ldr	r0, [sp, #108]	; 0x6c
    f134:	f015 f80b 	bl	2414e <memcpy>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
    f138:	4620      	mov	r0, r4
    f13a:	b015      	add	sp, #84	; 0x54
    f13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return err;
    f13e:	2401      	movs	r4, #1
    f140:	e7fa      	b.n	f138 <bt_mesh_k2+0xa0>
    f142:	bf00      	nop
    f144:	0002d053 	.word	0x0002d053

0000f148 <bt_mesh_k3>:

int bt_mesh_k3(const uint8_t n[16], uint8_t out[8])
{
    f148:	b530      	push	{r4, r5, lr}
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    f14a:	4b14      	ldr	r3, [pc, #80]	; (f19c <bt_mesh_k3+0x54>)
{
    f14c:	b08b      	sub	sp, #44	; 0x2c
    f14e:	4604      	mov	r4, r0
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    f150:	6818      	ldr	r0, [r3, #0]
    f152:	9000      	str	r0, [sp, #0]
{
    f154:	460d      	mov	r5, r1
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    f156:	791b      	ldrb	r3, [r3, #4]
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
    f158:	4811      	ldr	r0, [pc, #68]	; (f1a0 <bt_mesh_k3+0x58>)
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    f15a:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_mesh_s1("smk3", tmp);
    f15e:	a902      	add	r1, sp, #8
    f160:	f016 ff00 	bl	25f64 <bt_mesh_s1>
	if (err) {
    f164:	b9b8      	cbnz	r0, f196 <bt_mesh_k3+0x4e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    f166:	4621      	mov	r1, r4
    f168:	ab06      	add	r3, sp, #24
    f16a:	2210      	movs	r2, #16
    f16c:	a802      	add	r0, sp, #8
    f16e:	f016 feef 	bl	25f50 <bt_mesh_aes_cmac_one>
	if (err) {
    f172:	4604      	mov	r4, r0
    f174:	b960      	cbnz	r0, f190 <bt_mesh_k3+0x48>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
    f176:	ab02      	add	r3, sp, #8
    f178:	2205      	movs	r2, #5
    f17a:	4669      	mov	r1, sp
    f17c:	a806      	add	r0, sp, #24
    f17e:	f016 fee7 	bl	25f50 <bt_mesh_aes_cmac_one>
	if (err) {
    f182:	4604      	mov	r4, r0
    f184:	b920      	cbnz	r0, f190 <bt_mesh_k3+0x48>
		return err;
	}

	memcpy(out, tmp + 8, 8);
    f186:	2208      	movs	r2, #8
    f188:	a904      	add	r1, sp, #16
    f18a:	4628      	mov	r0, r5
    f18c:	f014 ffdf 	bl	2414e <memcpy>

	return 0;
}
    f190:	4620      	mov	r0, r4
    f192:	b00b      	add	sp, #44	; 0x2c
    f194:	bd30      	pop	{r4, r5, pc}
		return err;
    f196:	2401      	movs	r4, #1
    f198:	e7fa      	b.n	f190 <bt_mesh_k3+0x48>
    f19a:	bf00      	nop
    f19c:	00028fa1 	.word	0x00028fa1
    f1a0:	0002d058 	.word	0x0002d058

0000f1a4 <bt_mesh_k4>:

int bt_mesh_k4(const uint8_t n[16], uint8_t out[1])
{
    f1a4:	b530      	push	{r4, r5, lr}
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
    f1a6:	4b11      	ldr	r3, [pc, #68]	; (f1ec <bt_mesh_k4+0x48>)
{
    f1a8:	b08b      	sub	sp, #44	; 0x2c
    f1aa:	4605      	mov	r5, r0
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
    f1ac:	6818      	ldr	r0, [r3, #0]
    f1ae:	9001      	str	r0, [sp, #4]
{
    f1b0:	460c      	mov	r4, r1
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
    f1b2:	480f      	ldr	r0, [pc, #60]	; (f1f0 <bt_mesh_k4+0x4c>)
    f1b4:	a902      	add	r1, sp, #8
    f1b6:	f016 fed5 	bl	25f64 <bt_mesh_s1>
	if (err) {
    f1ba:	b9a8      	cbnz	r0, f1e8 <bt_mesh_k4+0x44>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    f1bc:	ab06      	add	r3, sp, #24
    f1be:	2210      	movs	r2, #16
    f1c0:	4629      	mov	r1, r5
    f1c2:	a802      	add	r0, sp, #8
    f1c4:	f016 fec4 	bl	25f50 <bt_mesh_aes_cmac_one>
	if (err) {
    f1c8:	b960      	cbnz	r0, f1e4 <bt_mesh_k4+0x40>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
    f1ca:	2204      	movs	r2, #4
    f1cc:	ab02      	add	r3, sp, #8
    f1ce:	eb0d 0102 	add.w	r1, sp, r2
    f1d2:	a806      	add	r0, sp, #24
    f1d4:	f016 febc 	bl	25f50 <bt_mesh_aes_cmac_one>
	if (err) {
    f1d8:	b920      	cbnz	r0, f1e4 <bt_mesh_k4+0x40>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
    f1da:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f1de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f1e2:	7023      	strb	r3, [r4, #0]

	return 0;
}
    f1e4:	b00b      	add	sp, #44	; 0x2c
    f1e6:	bd30      	pop	{r4, r5, pc}
		return err;
    f1e8:	2001      	movs	r0, #1
    f1ea:	e7fb      	b.n	f1e4 <bt_mesh_k4+0x40>
    f1ec:	00028fa6 	.word	0x00028fa6
    f1f0:	0002d05d 	.word	0x0002d05d

0000f1f4 <bt_mesh_id128>:

int bt_mesh_id128(const uint8_t n[16], const char *s, uint8_t out[16])
{
    f1f4:	b530      	push	{r4, r5, lr}
    f1f6:	b087      	sub	sp, #28
    f1f8:	4604      	mov	r4, r0
    f1fa:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	uint8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
    f1fc:	a902      	add	r1, sp, #8
{
    f1fe:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
    f200:	f016 feb0 	bl	25f64 <bt_mesh_s1>
	if (err) {
    f204:	b940      	cbnz	r0, f218 <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
    f206:	9500      	str	r5, [sp, #0]
    f208:	4b04      	ldr	r3, [pc, #16]	; (f21c <bt_mesh_id128+0x28>)
    f20a:	aa02      	add	r2, sp, #8
    f20c:	2110      	movs	r1, #16
    f20e:	4620      	mov	r0, r4
    f210:	f016 febf 	bl	25f92 <bt_mesh_k1>
}
    f214:	b007      	add	sp, #28
    f216:	bd30      	pop	{r4, r5, pc}
		return err;
    f218:	2001      	movs	r0, #1
    f21a:	e7fb      	b.n	f214 <bt_mesh_id128+0x20>
    f21c:	0002d04c 	.word	0x0002d04c

0000f220 <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

uint8_t bt_mesh_fcs_calc(const uint8_t *data, uint8_t data_len)
{
    f220:	b510      	push	{r4, lr}
	uint8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
    f222:	4a06      	ldr	r2, [pc, #24]	; (f23c <bt_mesh_fcs_calc+0x1c>)
    f224:	4401      	add	r1, r0
	uint8_t fcs = 0xff;
    f226:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    f228:	4288      	cmp	r0, r1
    f22a:	d102      	bne.n	f232 <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
    f22c:	43d8      	mvns	r0, r3
}
    f22e:	b2c0      	uxtb	r0, r0
    f230:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
    f232:	f810 4b01 	ldrb.w	r4, [r0], #1
    f236:	4063      	eors	r3, r4
    f238:	5cd3      	ldrb	r3, [r2, r3]
    f23a:	e7f5      	b.n	f228 <bt_mesh_fcs_calc+0x8>
    f23c:	0002d06c 	.word	0x0002d06c

0000f240 <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, uint8_t received_fcs)
{
	const uint8_t *data = buf->data;
    f240:	6802      	ldr	r2, [r0, #0]
	uint16_t data_len = buf->len;
	uint8_t fcs = 0xff;

	while (data_len--) {
    f242:	8880      	ldrh	r0, [r0, #4]
{
    f244:	b530      	push	{r4, r5, lr}
    f246:	4c08      	ldr	r4, [pc, #32]	; (f268 <bt_mesh_fcs_check+0x28>)
    f248:	4410      	add	r0, r2
	uint8_t fcs = 0xff;
    f24a:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    f24c:	4282      	cmp	r2, r0
    f24e:	d106      	bne.n	f25e <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
    f250:	404b      	eors	r3, r1
    f252:	5ce0      	ldrb	r0, [r4, r3]
}
    f254:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
    f258:	4258      	negs	r0, r3
    f25a:	4158      	adcs	r0, r3
    f25c:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
    f25e:	f812 5b01 	ldrb.w	r5, [r2], #1
    f262:	406b      	eors	r3, r5
    f264:	5ce3      	ldrb	r3, [r4, r3]
    f266:	e7f1      	b.n	f24c <bt_mesh_fcs_check+0xc>
    f268:	0002d06c 	.word	0x0002d06c

0000f26c <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const uint8_t virtual_label[16], uint16_t *addr)
{
    f26c:	b530      	push	{r4, r5, lr}
    f26e:	b089      	sub	sp, #36	; 0x24
    f270:	4605      	mov	r5, r0
    f272:	460c      	mov	r4, r1
	uint8_t salt[16];
	uint8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
    f274:	480e      	ldr	r0, [pc, #56]	; (f2b0 <bt_mesh_virtual_addr+0x44>)
    f276:	4669      	mov	r1, sp
    f278:	f016 fe74 	bl	25f64 <bt_mesh_s1>
	if (err) {
    f27c:	b9a8      	cbnz	r0, f2aa <bt_mesh_virtual_addr+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
    f27e:	ab04      	add	r3, sp, #16
    f280:	2210      	movs	r2, #16
    f282:	4629      	mov	r1, r5
    f284:	4668      	mov	r0, sp
    f286:	f016 fe63 	bl	25f50 <bt_mesh_aes_cmac_one>
	if (err) {
    f28a:	b960      	cbnz	r0, f2a6 <bt_mesh_virtual_addr+0x3a>
	return ((uint16_t)src[0] << 8) | src[1];
    f28c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    f290:	f89d 301f 	ldrb.w	r3, [sp, #31]
    f294:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
    f298:	f3c3 030d 	ubfx	r3, r3, #0, #14
    f29c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    f2a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    f2a4:	8023      	strh	r3, [r4, #0]

	return 0;
}
    f2a6:	b009      	add	sp, #36	; 0x24
    f2a8:	bd30      	pop	{r4, r5, pc}
		return err;
    f2aa:	2001      	movs	r0, #1
    f2ac:	e7fb      	b.n	f2a6 <bt_mesh_virtual_addr+0x3a>
    f2ae:	bf00      	nop
    f2b0:	0002d067 	.word	0x0002d067

0000f2b4 <bt_mesh_prov_conf_key>:
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
}

int bt_mesh_prov_conf_key(const uint8_t dhkey[32], const uint8_t conf_salt[16],
			  uint8_t conf_key[16])
{
    f2b4:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
    f2b6:	4b04      	ldr	r3, [pc, #16]	; (f2c8 <bt_mesh_prov_conf_key+0x14>)
    f2b8:	9200      	str	r2, [sp, #0]
    f2ba:	460a      	mov	r2, r1
    f2bc:	2120      	movs	r1, #32
    f2be:	f016 fe68 	bl	25f92 <bt_mesh_k1>
}
    f2c2:	b003      	add	sp, #12
    f2c4:	f85d fb04 	ldr.w	pc, [sp], #4
    f2c8:	0002d062 	.word	0x0002d062

0000f2cc <encode_mod_path>:

BT_MESH_SETTINGS_DEFINE(vnd_mod, "v", vnd_mod_set);

static void encode_mod_path(struct bt_mesh_model *mod, bool vnd,
			    const char *key, char *path, size_t path_len)
{
    f2cc:	b470      	push	{r4, r5, r6}
    f2ce:	4605      	mov	r5, r0
    f2d0:	4618      	mov	r0, r3
	uint16_t mod_key = (((uint16_t)mod->elem_idx << 8) | mod->mod_idx);
    f2d2:	792e      	ldrb	r6, [r5, #4]
    f2d4:	796b      	ldrb	r3, [r5, #5]
{
    f2d6:	9c03      	ldr	r4, [sp, #12]

	if (vnd) {
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
    f2d8:	9203      	str	r2, [sp, #12]
    f2da:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	if (vnd) {
    f2de:	b121      	cbz	r1, f2ea <encode_mod_path+0x1e>
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
    f2e0:	4a03      	ldr	r2, [pc, #12]	; (f2f0 <encode_mod_path+0x24>)
	} else {
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
    f2e2:	4621      	mov	r1, r4
	}
}
    f2e4:	bc70      	pop	{r4, r5, r6}
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
    f2e6:	f012 bdfd 	b.w	21ee4 <snprintk>
    f2ea:	4a02      	ldr	r2, [pc, #8]	; (f2f4 <encode_mod_path+0x28>)
    f2ec:	e7f9      	b.n	f2e2 <encode_mod_path+0x16>
    f2ee:	bf00      	nop
    f2f0:	0002d2e1 	.word	0x0002d2e1
    f2f4:	0002d2f1 	.word	0x0002d2f1

0000f2f8 <model_send>:
{
    f2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f2fc:	4680      	mov	r8, r0
    f2fe:	460d      	mov	r5, r1
    f300:	4691      	mov	r9, r2
    f302:	461c      	mov	r4, r3
    f304:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
	if (!bt_mesh_is_provisioned()) {
    f308:	f016 fa8d 	bl	25826 <bt_mesh_is_provisioned>
    f30c:	b938      	cbnz	r0, f31e <model_send+0x26>
		BT_ERR("Local node is not yet provisioned");
    f30e:	481e      	ldr	r0, [pc, #120]	; (f388 <model_send+0x90>)
    f310:	2145      	movs	r1, #69	; 0x45
    f312:	f012 fdda 	bl	21eca <printk>
		return -EAGAIN;
    f316:	f06f 000a 	mvn.w	r0, #10
}
    f31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (net_buf_simple_tailroom(msg) < 4) {
    f31e:	4620      	mov	r0, r4
    f320:	f018 fe1d 	bl	27f5e <net_buf_simple_tailroom>
    f324:	2803      	cmp	r0, #3
    f326:	d806      	bhi.n	f336 <model_send+0x3e>
		BT_ERR("Not enough tailroom for TransMIC");
    f328:	2145      	movs	r1, #69	; 0x45
    f32a:	4818      	ldr	r0, [pc, #96]	; (f38c <model_send+0x94>)
    f32c:	f012 fdcd 	bl	21eca <printk>
		return -EINVAL;
    f330:	f06f 0015 	mvn.w	r0, #21
    f334:	e7f1      	b.n	f31a <model_send+0x22>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
    f336:	88a3      	ldrh	r3, [r4, #4]
    f338:	2b74      	cmp	r3, #116	; 0x74
    f33a:	d906      	bls.n	f34a <model_send+0x52>
		BT_ERR("Too big message");
    f33c:	4814      	ldr	r0, [pc, #80]	; (f390 <model_send+0x98>)
    f33e:	2145      	movs	r1, #69	; 0x45
    f340:	f012 fdc3 	bl	21eca <printk>
		return -EMSGSIZE;
    f344:	f06f 0023 	mvn.w	r0, #35	; 0x23
    f348:	e7e7      	b.n	f31a <model_send+0x22>
	if (!implicit_bind && !model_has_key(model, tx->ctx->app_idx)) {
    f34a:	f1b9 0f00 	cmp.w	r9, #0
    f34e:	d10d      	bne.n	f36c <model_send+0x74>
    f350:	686b      	ldr	r3, [r5, #4]
    f352:	885a      	ldrh	r2, [r3, #2]
		if (mod->keys[i] == key ||
    f354:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    f358:	429a      	cmp	r2, r3
    f35a:	d007      	beq.n	f36c <model_send+0x74>
    f35c:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    f360:	428b      	cmp	r3, r1
    f362:	d10b      	bne.n	f37c <model_send+0x84>
		     BT_MESH_IS_DEV_KEY(key))) {
    f364:	1cd3      	adds	r3, r2, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
    f366:	b29b      	uxth	r3, r3
    f368:	2b01      	cmp	r3, #1
    f36a:	d807      	bhi.n	f37c <model_send+0x84>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
    f36c:	463b      	mov	r3, r7
    f36e:	4632      	mov	r2, r6
    f370:	4621      	mov	r1, r4
    f372:	4628      	mov	r0, r5
}
    f374:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
    f378:	f7fe be68 	b.w	e04c <bt_mesh_trans_send>
		BT_ERR("Model not bound to AppKey 0x%04x", tx->ctx->app_idx);
    f37c:	2145      	movs	r1, #69	; 0x45
    f37e:	4805      	ldr	r0, [pc, #20]	; (f394 <model_send+0x9c>)
    f380:	f012 fda3 	bl	21eca <printk>
    f384:	e7d4      	b.n	f330 <model_send+0x38>
    f386:	bf00      	nop
    f388:	0002d434 	.word	0x0002d434
    f38c:	0002d45b 	.word	0x0002d45b
    f390:	0002d481 	.word	0x0002d481
    f394:	0002d496 	.word	0x0002d496

0000f398 <publish_start>:
{
    f398:	b510      	push	{r4, lr}
	if (err) {
    f39a:	b131      	cbz	r1, f3aa <publish_start+0x12>
		BT_ERR("Failed to publish: err %d", err);
    f39c:	460a      	mov	r2, r1
    f39e:	4809      	ldr	r0, [pc, #36]	; (f3c4 <publish_start+0x2c>)
    f3a0:	2145      	movs	r1, #69	; 0x45
}
    f3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to publish: err %d", err);
    f3a6:	f012 bd90 	b.w	21eca <printk>
	struct bt_mesh_model_pub *pub = mod->pub;
    f3aa:	6894      	ldr	r4, [r2, #8]
	if (pub->count == BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit)) {
    f3ac:	7a63      	ldrb	r3, [r4, #9]
    f3ae:	7ae2      	ldrb	r2, [r4, #11]
    f3b0:	f003 0307 	and.w	r3, r3, #7
    f3b4:	ebb3 1f52 	cmp.w	r3, r2, lsr #5
    f3b8:	d102      	bne.n	f3c0 <publish_start+0x28>
		pub->period_start = k_uptime_get_32();
    f3ba:	f016 ff69 	bl	26290 <k_uptime_get_32>
    f3be:	60e0      	str	r0, [r4, #12]
}
    f3c0:	bd10      	pop	{r4, pc}
    f3c2:	bf00      	nop
    f3c4:	0002d4f1 	.word	0x0002d4f1

0000f3c8 <store_pending_mod>:
}

static void store_pending_mod(struct bt_mesh_model *mod,
			      struct bt_mesh_elem *elem, bool vnd,
			      bool primary, void *user_data)
{
    f3c8:	b570      	push	{r4, r5, r6, lr}
	if (!mod->flags) {
    f3ca:	88c3      	ldrh	r3, [r0, #6]
{
    f3cc:	b08a      	sub	sp, #40	; 0x28
    f3ce:	4604      	mov	r4, r0
    f3d0:	4616      	mov	r6, r2
	if (!mod->flags) {
    f3d2:	2b00      	cmp	r3, #0
    f3d4:	d05e      	beq.n	f494 <store_pending_mod+0xcc>
		return;
	}

	if (mod->flags & BT_MESH_MOD_BIND_PENDING) {
    f3d6:	07d8      	lsls	r0, r3, #31
    f3d8:	d522      	bpl.n	f420 <store_pending_mod+0x58>
		mod->flags &= ~BT_MESH_MOD_BIND_PENDING;
    f3da:	f023 0301 	bic.w	r3, r3, #1
    f3de:	80e3      	strh	r3, [r4, #6]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
    f3e0:	89a3      	ldrh	r3, [r4, #12]
    f3e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f3e6:	4293      	cmp	r3, r2
			keys[count++] = mod->keys[i];
    f3e8:	bf18      	it	ne
    f3ea:	f8ad 300c 	strhne.w	r3, [sp, #12]
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
    f3ee:	f04f 0314 	mov.w	r3, #20
			keys[count++] = mod->keys[i];
    f3f2:	bf14      	ite	ne
    f3f4:	2501      	movne	r5, #1
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
    f3f6:	2500      	moveq	r5, #0
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
    f3f8:	9300      	str	r3, [sp, #0]
    f3fa:	4a3a      	ldr	r2, [pc, #232]	; (f4e4 <store_pending_mod+0x11c>)
    f3fc:	446b      	add	r3, sp
    f3fe:	4631      	mov	r1, r6
    f400:	4620      	mov	r0, r4
    f402:	f7ff ff63 	bl	f2cc <encode_mod_path>
	if (count) {
    f406:	2d00      	cmp	r5, #0
    f408:	d046      	beq.n	f498 <store_pending_mod+0xd0>
		err = settings_save_one(path, keys, count * sizeof(keys[0]));
    f40a:	2202      	movs	r2, #2
    f40c:	a903      	add	r1, sp, #12
    f40e:	a805      	add	r0, sp, #20
    f410:	f7f3 ff56 	bl	32c0 <settings_save_one>
	if (err) {
    f414:	b120      	cbz	r0, f420 <store_pending_mod+0x58>
		BT_ERR("Failed to store %s value", log_strdup(path));
    f416:	aa05      	add	r2, sp, #20
    f418:	2145      	movs	r1, #69	; 0x45
    f41a:	4833      	ldr	r0, [pc, #204]	; (f4e8 <store_pending_mod+0x120>)
    f41c:	f012 fd55 	bl	21eca <printk>
		store_pending_mod_bind(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_SUB_PENDING) {
    f420:	88e3      	ldrh	r3, [r4, #6]
    f422:	0799      	lsls	r1, r3, #30
    f424:	d51b      	bpl.n	f45e <store_pending_mod+0x96>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    f426:	89e5      	ldrh	r5, [r4, #14]
		mod->flags &= ~BT_MESH_MOD_SUB_PENDING;
    f428:	f023 0302 	bic.w	r3, r3, #2
    f42c:	80e3      	strh	r3, [r4, #6]
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    f42e:	b115      	cbz	r5, f436 <store_pending_mod+0x6e>
			groups[count++] = mod->groups[i];
    f430:	f8ad 500c 	strh.w	r5, [sp, #12]
    f434:	2501      	movs	r5, #1
	encode_mod_path(mod, vnd, "sub", path, sizeof(path));
    f436:	2314      	movs	r3, #20
    f438:	9300      	str	r3, [sp, #0]
    f43a:	4a2c      	ldr	r2, [pc, #176]	; (f4ec <store_pending_mod+0x124>)
    f43c:	446b      	add	r3, sp
    f43e:	4631      	mov	r1, r6
    f440:	4620      	mov	r0, r4
    f442:	f7ff ff43 	bl	f2cc <encode_mod_path>
	if (count) {
    f446:	b35d      	cbz	r5, f4a0 <store_pending_mod+0xd8>
		err = settings_save_one(path, groups,
    f448:	2202      	movs	r2, #2
    f44a:	a903      	add	r1, sp, #12
    f44c:	a805      	add	r0, sp, #20
    f44e:	f7f3 ff37 	bl	32c0 <settings_save_one>
	if (err) {
    f452:	b120      	cbz	r0, f45e <store_pending_mod+0x96>
		BT_ERR("Failed to store %s value", log_strdup(path));
    f454:	aa05      	add	r2, sp, #20
    f456:	2145      	movs	r1, #69	; 0x45
    f458:	4823      	ldr	r0, [pc, #140]	; (f4e8 <store_pending_mod+0x120>)
    f45a:	f012 fd36 	bl	21eca <printk>
		store_pending_mod_sub(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_PUB_PENDING) {
    f45e:	88e3      	ldrh	r3, [r4, #6]
    f460:	075a      	lsls	r2, r3, #29
    f462:	d517      	bpl.n	f494 <store_pending_mod+0xcc>
		mod->flags &= ~BT_MESH_MOD_PUB_PENDING;
    f464:	f023 0304 	bic.w	r3, r3, #4
    f468:	80e3      	strh	r3, [r4, #6]
	encode_mod_path(mod, vnd, "pub", path, sizeof(path));
    f46a:	2314      	movs	r3, #20
    f46c:	9300      	str	r3, [sp, #0]
    f46e:	4a20      	ldr	r2, [pc, #128]	; (f4f0 <store_pending_mod+0x128>)
    f470:	446b      	add	r3, sp
    f472:	4631      	mov	r1, r6
    f474:	4620      	mov	r0, r4
    f476:	f7ff ff29 	bl	f2cc <encode_mod_path>
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    f47a:	68a3      	ldr	r3, [r4, #8]
    f47c:	b10b      	cbz	r3, f482 <store_pending_mod+0xba>
    f47e:	889a      	ldrh	r2, [r3, #4]
    f480:	b992      	cbnz	r2, f4a8 <store_pending_mod+0xe0>
		err = settings_delete(path);
    f482:	a805      	add	r0, sp, #20
    f484:	f013 fb5e 	bl	22b44 <settings_delete>
	if (err) {
    f488:	b120      	cbz	r0, f494 <store_pending_mod+0xcc>
		BT_ERR("Failed to store %s value", log_strdup(path));
    f48a:	aa05      	add	r2, sp, #20
    f48c:	2145      	movs	r1, #69	; 0x45
    f48e:	4816      	ldr	r0, [pc, #88]	; (f4e8 <store_pending_mod+0x120>)
    f490:	f012 fd1b 	bl	21eca <printk>
		store_pending_mod_pub(mod, vnd);
	}
}
    f494:	b00a      	add	sp, #40	; 0x28
    f496:	bd70      	pop	{r4, r5, r6, pc}
		err = settings_delete(path);
    f498:	a805      	add	r0, sp, #20
    f49a:	f013 fb53 	bl	22b44 <settings_delete>
    f49e:	e7b9      	b.n	f414 <store_pending_mod+0x4c>
		err = settings_delete(path);
    f4a0:	a805      	add	r0, sp, #20
    f4a2:	f013 fb4f 	bl	22b44 <settings_delete>
    f4a6:	e7d4      	b.n	f452 <store_pending_mod+0x8a>
		pub.addr = mod->pub->addr;
    f4a8:	f8ad 200c 	strh.w	r2, [sp, #12]
		pub.key = mod->pub->key;
    f4ac:	88da      	ldrh	r2, [r3, #6]
    f4ae:	f3c2 020b 	ubfx	r2, r2, #0, #12
    f4b2:	f8ad 200e 	strh.w	r2, [sp, #14]
		pub.ttl = mod->pub->ttl;
    f4b6:	6899      	ldr	r1, [r3, #8]
    f4b8:	9a04      	ldr	r2, [sp, #16]
    f4ba:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
    f4be:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    f4c2:	430a      	orrs	r2, r1
    f4c4:	9204      	str	r2, [sp, #16]
		pub.cred = mod->pub->cred;
    f4c6:	79db      	ldrb	r3, [r3, #7]
    f4c8:	f89d 2013 	ldrb.w	r2, [sp, #19]
    f4cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
    f4d0:	f363 1204 	bfi	r2, r3, #4, #1
    f4d4:	f88d 2013 	strb.w	r2, [sp, #19]
		err = settings_save_one(path, &pub, sizeof(pub));
    f4d8:	a903      	add	r1, sp, #12
    f4da:	2208      	movs	r2, #8
    f4dc:	a805      	add	r0, sp, #20
    f4de:	f7f3 feef 	bl	32c0 <settings_save_one>
    f4e2:	e7d1      	b.n	f488 <store_pending_mod+0xc0>
    f4e4:	0002d510 	.word	0x0002d510
    f4e8:	0002d515 	.word	0x0002d515
    f4ec:	0002d533 	.word	0x0002d533
    f4f0:	0002d537 	.word	0x0002d537

0000f4f4 <mod_init>:
{
    f4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f4f8:	9d06      	ldr	r5, [sp, #24]
    f4fa:	460e      	mov	r6, r1
	if (*err) {
    f4fc:	6829      	ldr	r1, [r5, #0]
{
    f4fe:	4604      	mov	r4, r0
    f500:	4690      	mov	r8, r2
	if (*err) {
    f502:	bb19      	cbnz	r1, f54c <mod_init+0x58>
	if (mod->pub) {
    f504:	6887      	ldr	r7, [r0, #8]
    f506:	b13f      	cbz	r7, f518 <mod_init+0x24>
		mod->pub->mod = mod;
    f508:	4638      	mov	r0, r7
    f50a:	2230      	movs	r2, #48	; 0x30
    f50c:	f840 4b18 	str.w	r4, [r0], #24
    f510:	f014 fe47 	bl	241a2 <memset>
    f514:	4b0f      	ldr	r3, [pc, #60]	; (f554 <mod_init+0x60>)
    f516:	61fb      	str	r3, [r7, #28]
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    f518:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f51c:	81a3      	strh	r3, [r4, #12]
	mod->elem_idx = elem - dev_comp->elem;
    f51e:	4b0e      	ldr	r3, [pc, #56]	; (f558 <mod_init+0x64>)
    f520:	681b      	ldr	r3, [r3, #0]
    f522:	68db      	ldr	r3, [r3, #12]
    f524:	1af3      	subs	r3, r6, r3
    f526:	111b      	asrs	r3, r3, #4
    f528:	7123      	strb	r3, [r4, #4]
	if (vnd) {
    f52a:	4b0c      	ldr	r3, [pc, #48]	; (f55c <mod_init+0x68>)
    f52c:	f1b8 0f00 	cmp.w	r8, #0
    f530:	d00e      	beq.n	f550 <mod_init+0x5c>
		mod->mod_idx = mod - elem->vnd_models;
    f532:	68f2      	ldr	r2, [r6, #12]
		mod->mod_idx = mod - elem->models;
    f534:	1aa2      	subs	r2, r4, r2
    f536:	1092      	asrs	r2, r2, #2
    f538:	4353      	muls	r3, r2
    f53a:	b2db      	uxtb	r3, r3
    f53c:	7163      	strb	r3, [r4, #5]
	if (mod->cb && mod->cb->init) {
    f53e:	6963      	ldr	r3, [r4, #20]
    f540:	b123      	cbz	r3, f54c <mod_init+0x58>
    f542:	689b      	ldr	r3, [r3, #8]
    f544:	b113      	cbz	r3, f54c <mod_init+0x58>
		*err = mod->cb->init(mod);
    f546:	4620      	mov	r0, r4
    f548:	4798      	blx	r3
    f54a:	6028      	str	r0, [r5, #0]
}
    f54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mod->mod_idx = mod - elem->models;
    f550:	68b2      	ldr	r2, [r6, #8]
    f552:	e7ef      	b.n	f534 <mod_init+0x40>
    f554:	0000fc61 	.word	0x0000fc61
    f558:	20002b4c 	.word	0x20002b4c
    f55c:	b6db6db7 	.word	0xb6db6db7

0000f560 <bt_mesh_model_foreach>:
{
    f560:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
    f564:	f8df a068 	ldr.w	sl, [pc, #104]	; f5d0 <bt_mesh_model_foreach+0x70>
{
    f568:	4607      	mov	r7, r0
    f56a:	4688      	mov	r8, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
    f56c:	2500      	movs	r5, #0
			struct bt_mesh_model *model = &elem->models[j];
    f56e:	f04f 091c 	mov.w	r9, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
    f572:	f8da 3000 	ldr.w	r3, [sl]
    f576:	689a      	ldr	r2, [r3, #8]
    f578:	42aa      	cmp	r2, r5
    f57a:	d802      	bhi.n	f582 <bt_mesh_model_foreach+0x22>
}
    f57c:	b002      	add	sp, #8
    f57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f582:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
    f584:	2600      	movs	r6, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f586:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
    f58a:	7923      	ldrb	r3, [r4, #4]
    f58c:	42b3      	cmp	r3, r6
    f58e:	dc05      	bgt.n	f59c <bt_mesh_model_foreach+0x3c>
		for (j = 0; j < elem->vnd_model_count; j++) {
    f590:	2600      	movs	r6, #0
    f592:	7963      	ldrb	r3, [r4, #5]
    f594:	42b3      	cmp	r3, r6
    f596:	dc0e      	bgt.n	f5b6 <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
    f598:	3501      	adds	r5, #1
    f59a:	e7ea      	b.n	f572 <bt_mesh_model_foreach+0x12>
			struct bt_mesh_model *model = &elem->models[j];
    f59c:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
    f59e:	f8cd 8000 	str.w	r8, [sp]
    f5a2:	fab5 f385 	clz	r3, r5
    f5a6:	fb09 0006 	mla	r0, r9, r6, r0
    f5aa:	095b      	lsrs	r3, r3, #5
    f5ac:	2200      	movs	r2, #0
    f5ae:	4621      	mov	r1, r4
    f5b0:	47b8      	blx	r7
		for (j = 0; j < elem->model_count; j++) {
    f5b2:	3601      	adds	r6, #1
    f5b4:	e7e9      	b.n	f58a <bt_mesh_model_foreach+0x2a>
			struct bt_mesh_model *model = &elem->vnd_models[j];
    f5b6:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
    f5b8:	f8cd 8000 	str.w	r8, [sp]
    f5bc:	fab5 f385 	clz	r3, r5
    f5c0:	fb09 0006 	mla	r0, r9, r6, r0
    f5c4:	095b      	lsrs	r3, r3, #5
    f5c6:	2201      	movs	r2, #1
    f5c8:	4621      	mov	r1, r4
    f5ca:	47b8      	blx	r7
		for (j = 0; j < elem->vnd_model_count; j++) {
    f5cc:	3601      	adds	r6, #1
    f5ce:	e7e0      	b.n	f592 <bt_mesh_model_foreach+0x32>
    f5d0:	20002b4c 	.word	0x20002b4c

0000f5d4 <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
    f5d4:	6882      	ldr	r2, [r0, #8]
    f5d6:	b302      	cbz	r2, f61a <bt_mesh_model_pub_period_get+0x46>
	switch (mod->pub->period >> 6) {
    f5d8:	7a93      	ldrb	r3, [r2, #10]
    f5da:	0999      	lsrs	r1, r3, #6
    f5dc:	2902      	cmp	r1, #2
    f5de:	d013      	beq.n	f608 <bt_mesh_model_pub_period_get+0x34>
    f5e0:	2903      	cmp	r1, #3
    f5e2:	d016      	beq.n	f612 <bt_mesh_model_pub_period_get+0x3e>
    f5e4:	2901      	cmp	r1, #1
    f5e6:	d009      	beq.n	f5fc <bt_mesh_model_pub_period_get+0x28>
		period = (mod->pub->period & BIT_MASK(6)) * 100U;
    f5e8:	2064      	movs	r0, #100	; 0x64
    f5ea:	fb13 f000 	smulbb	r0, r3, r0
	if (mod->pub->fast_period) {
    f5ee:	7ad3      	ldrb	r3, [r2, #11]
    f5f0:	06da      	lsls	r2, r3, #27
    f5f2:	d513      	bpl.n	f61c <bt_mesh_model_pub_period_get+0x48>
		return period >> mod->pub->period_div;
    f5f4:	f003 030f 	and.w	r3, r3, #15
    f5f8:	4118      	asrs	r0, r3
    f5fa:	4770      	bx	lr
		period = (mod->pub->period & BIT_MASK(6)) * MSEC_PER_SEC;
    f5fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
    f604:	4358      	muls	r0, r3
		break;
    f606:	e7f2      	b.n	f5ee <bt_mesh_model_pub_period_get+0x1a>
		period = (mod->pub->period & BIT_MASK(6)) * 10U * MSEC_PER_SEC;
    f608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f60c:	f242 7010 	movw	r0, #10000	; 0x2710
    f610:	e7f8      	b.n	f604 <bt_mesh_model_pub_period_get+0x30>
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
    f612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f616:	4802      	ldr	r0, [pc, #8]	; (f620 <bt_mesh_model_pub_period_get+0x4c>)
    f618:	e7f4      	b.n	f604 <bt_mesh_model_pub_period_get+0x30>
		return 0;
    f61a:	4610      	mov	r0, r2
}
    f61c:	4770      	bx	lr
    f61e:	bf00      	nop
    f620:	000927c0 	.word	0x000927c0

0000f624 <publish_sent>:
{
    f624:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub->count) {
    f626:	688e      	ldr	r6, [r1, #8]
    f628:	7af3      	ldrb	r3, [r6, #11]
    f62a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
{
    f62e:	460d      	mov	r5, r1
	if (mod->pub->count) {
    f630:	d01c      	beq.n	f66c <publish_sent+0x48>
		delay = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
    f632:	7a70      	ldrb	r0, [r6, #9]
    f634:	08c4      	lsrs	r4, r0, #3
    f636:	2032      	movs	r0, #50	; 0x32
    f638:	fb04 0000 	mla	r0, r4, r0, r0
		k_delayed_work_submit(&mod->pub->timer, K_MSEC(delay));
    f63c:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    f640:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    f644:	f240 30e7 	movw	r0, #999	; 0x3e7
    f648:	2100      	movs	r1, #0
    f64a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f64e:	2300      	movs	r3, #0
    f650:	fbc6 0104 	smlal	r0, r1, r6, r4
    f654:	f7f0 fd54 	bl	100 <__aeabi_uldivmod>
    f658:	68ad      	ldr	r5, [r5, #8]
    f65a:	3518      	adds	r5, #24
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    f65c:	4602      	mov	r2, r0
    f65e:	460b      	mov	r3, r1
    f660:	480d      	ldr	r0, [pc, #52]	; (f698 <publish_sent+0x74>)
    f662:	4629      	mov	r1, r5
}
    f664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f668:	f010 bd76 	b.w	20158 <k_delayed_work_submit_to_queue>
	period = bt_mesh_model_pub_period_get(mod);
    f66c:	4608      	mov	r0, r1
    f66e:	f7ff ffb1 	bl	f5d4 <bt_mesh_model_pub_period_get>
	if (!period) {
    f672:	4604      	mov	r4, r0
    f674:	b170      	cbz	r0, f694 <publish_sent+0x70>
	elapsed = k_uptime_get_32() - pub->period_start;
    f676:	f016 fe0b 	bl	26290 <k_uptime_get_32>
    f67a:	68f3      	ldr	r3, [r6, #12]
    f67c:	1ac2      	subs	r2, r0, r3
	if (elapsed >= period) {
    f67e:	4294      	cmp	r4, r2
    f680:	d805      	bhi.n	f68e <publish_sent+0x6a>
		BT_WARN("Publication sending took longer than the period");
    f682:	4806      	ldr	r0, [pc, #24]	; (f69c <publish_sent+0x78>)
    f684:	2157      	movs	r1, #87	; 0x57
    f686:	f012 fc20 	bl	21eca <printk>
		return 1;
    f68a:	2001      	movs	r0, #1
    f68c:	e7d6      	b.n	f63c <publish_sent+0x18>
	return period - elapsed;
    f68e:	441c      	add	r4, r3
	if (delay) {
    f690:	1a20      	subs	r0, r4, r0
    f692:	d1d3      	bne.n	f63c <publish_sent+0x18>
}
    f694:	bd70      	pop	{r4, r5, r6, pc}
    f696:	bf00      	nop
    f698:	20002170 	.word	0x20002170
    f69c:	0002d4bc 	.word	0x0002d4bc

0000f6a0 <commit_mod>:
	return err;
}

static void commit_mod(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		       bool vnd, bool primary, void *user_data)
{
    f6a0:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub && mod->pub->update &&
    f6a2:	6884      	ldr	r4, [r0, #8]
    f6a4:	b1e4      	cbz	r4, f6e0 <commit_mod+0x40>
    f6a6:	6963      	ldr	r3, [r4, #20]
    f6a8:	b1d3      	cbz	r3, f6e0 <commit_mod+0x40>
    f6aa:	88a3      	ldrh	r3, [r4, #4]
    f6ac:	b1c3      	cbz	r3, f6e0 <commit_mod+0x40>
	    mod->pub->addr != BT_MESH_ADDR_UNASSIGNED) {
		int32_t ms = bt_mesh_model_pub_period_get(mod);
    f6ae:	f7ff ff91 	bl	f5d4 <bt_mesh_model_pub_period_get>

		if (ms > 0) {
    f6b2:	1e06      	subs	r6, r0, #0
    f6b4:	dd14      	ble.n	f6e0 <commit_mod+0x40>
    f6b6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    f6ba:	f240 30e7 	movw	r0, #999	; 0x3e7
    f6be:	2100      	movs	r1, #0
    f6c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f6c4:	2300      	movs	r3, #0
    f6c6:	fbc5 0106 	smlal	r0, r1, r5, r6
    f6ca:	f7f0 fd19 	bl	100 <__aeabi_uldivmod>
    f6ce:	4602      	mov	r2, r0
    f6d0:	460b      	mov	r3, r1
    f6d2:	4804      	ldr	r0, [pc, #16]	; (f6e4 <commit_mod+0x44>)
    f6d4:	f104 0118 	add.w	r1, r4, #24
	for (int i = 0; i < ARRAY_SIZE(mod->groups); i++) {
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
			bt_mesh_lpn_group_add(mod->groups[i]);
		}
	}
}
    f6d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f6dc:	f010 bd3c 	b.w	20158 <k_delayed_work_submit_to_queue>
    f6e0:	bd70      	pop	{r4, r5, r6, pc}
    f6e2:	bf00      	nop
    f6e4:	20002170 	.word	0x20002170

0000f6e8 <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
    f6e8:	4b03      	ldr	r3, [pc, #12]	; (f6f8 <bt_mesh_model_elem+0x10>)
    f6ea:	7900      	ldrb	r0, [r0, #4]
    f6ec:	681b      	ldr	r3, [r3, #0]
    f6ee:	68db      	ldr	r3, [r3, #12]
}
    f6f0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    f6f4:	4770      	bx	lr
    f6f6:	bf00      	nop
    f6f8:	20002b4c 	.word	0x20002b4c

0000f6fc <bt_mesh_model_get>:
{
    f6fc:	b538      	push	{r3, r4, r5, lr}
	if (elem_idx >= dev_comp->elem_count) {
    f6fe:	4b13      	ldr	r3, [pc, #76]	; (f74c <bt_mesh_model_get+0x50>)
    f700:	681b      	ldr	r3, [r3, #0]
    f702:	689d      	ldr	r5, [r3, #8]
    f704:	42a9      	cmp	r1, r5
{
    f706:	4604      	mov	r4, r0
	if (elem_idx >= dev_comp->elem_count) {
    f708:	d306      	bcc.n	f718 <bt_mesh_model_get+0x1c>
		BT_ERR("Invalid element index %u", elem_idx);
    f70a:	4811      	ldr	r0, [pc, #68]	; (f750 <bt_mesh_model_get+0x54>)
    f70c:	460a      	mov	r2, r1
    f70e:	2145      	movs	r1, #69	; 0x45
    f710:	f012 fbdb 	bl	21eca <printk>
		return NULL;
    f714:	2000      	movs	r0, #0
}
    f716:	bd38      	pop	{r3, r4, r5, pc}
	elem = &dev_comp->elem[elem_idx];
    f718:	68db      	ldr	r3, [r3, #12]
    f71a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	if (vnd) {
    f71e:	b15c      	cbz	r4, f738 <bt_mesh_model_get+0x3c>
		if (mod_idx >= elem->vnd_model_count) {
    f720:	794b      	ldrb	r3, [r1, #5]
    f722:	4293      	cmp	r3, r2
    f724:	d802      	bhi.n	f72c <bt_mesh_model_get+0x30>
			BT_ERR("Invalid vendor model index %u", mod_idx);
    f726:	2145      	movs	r1, #69	; 0x45
    f728:	480a      	ldr	r0, [pc, #40]	; (f754 <bt_mesh_model_get+0x58>)
    f72a:	e7f1      	b.n	f710 <bt_mesh_model_get+0x14>
		return &elem->vnd_models[mod_idx];
    f72c:	68c8      	ldr	r0, [r1, #12]
    f72e:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
		return &elem->models[mod_idx];
    f732:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    f736:	e7ee      	b.n	f716 <bt_mesh_model_get+0x1a>
		if (mod_idx >= elem->model_count) {
    f738:	790b      	ldrb	r3, [r1, #4]
    f73a:	4293      	cmp	r3, r2
    f73c:	d802      	bhi.n	f744 <bt_mesh_model_get+0x48>
			BT_ERR("Invalid SIG model index %u", mod_idx);
    f73e:	2145      	movs	r1, #69	; 0x45
    f740:	4805      	ldr	r0, [pc, #20]	; (f758 <bt_mesh_model_get+0x5c>)
    f742:	e7e5      	b.n	f710 <bt_mesh_model_get+0x14>
		return &elem->models[mod_idx];
    f744:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
    f748:	6888      	ldr	r0, [r1, #8]
    f74a:	e7f2      	b.n	f732 <bt_mesh_model_get+0x36>
    f74c:	20002b4c 	.word	0x20002b4c
    f750:	0002d17b 	.word	0x0002d17b
    f754:	0002d199 	.word	0x0002d199
    f758:	0002d1bc 	.word	0x0002d1bc

0000f75c <mod_set>:
{
    f75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f760:	b086      	sub	sp, #24
    f762:	4605      	mov	r5, r0
    f764:	4616      	mov	r6, r2
    f766:	461f      	mov	r7, r3
    f768:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	if (!name) {
    f76c:	4689      	mov	r9, r1
    f76e:	b931      	cbnz	r1, f77e <mod_set+0x22>
		BT_ERR("Insufficient number of arguments");
    f770:	2145      	movs	r1, #69	; 0x45
    f772:	485c      	ldr	r0, [pc, #368]	; (f8e4 <mod_set+0x188>)
    f774:	f012 fba9 	bl	21eca <printk>
	return -ENOENT;
    f778:	f06f 0401 	mvn.w	r4, #1
    f77c:	e027      	b.n	f7ce <mod_set+0x72>
	mod_key = strtol(name, NULL, 16);
    f77e:	2210      	movs	r2, #16
    f780:	2100      	movs	r1, #0
    f782:	4648      	mov	r0, r9
    f784:	f014 fc11 	bl	23faa <strtol>
	elem_idx = mod_key >> 8;
    f788:	f3c0 2a07 	ubfx	sl, r0, #8, #8
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
    f78c:	b2c4      	uxtb	r4, r0
    f78e:	4622      	mov	r2, r4
    f790:	4628      	mov	r0, r5
    f792:	4651      	mov	r1, sl
    f794:	f7ff ffb2 	bl	f6fc <bt_mesh_model_get>
	if (!mod) {
    f798:	4605      	mov	r5, r0
    f79a:	b930      	cbnz	r0, f7aa <mod_set+0x4e>
		BT_ERR("Failed to get model for elem_idx %u mod_idx %u",
    f79c:	4623      	mov	r3, r4
    f79e:	4652      	mov	r2, sl
    f7a0:	2145      	movs	r1, #69	; 0x45
    f7a2:	4851      	ldr	r0, [pc, #324]	; (f8e8 <mod_set+0x18c>)
    f7a4:	f012 fb91 	bl	21eca <printk>
		return -ENOENT;
    f7a8:	e7e6      	b.n	f778 <mod_set+0x1c>
	len = settings_name_next(name, &next);
    f7aa:	4648      	mov	r0, r9
    f7ac:	a903      	add	r1, sp, #12
    f7ae:	f013 f9ed 	bl	22b8c <settings_name_next>
    f7b2:	4681      	mov	r9, r0
	if (!next) {
    f7b4:	9803      	ldr	r0, [sp, #12]
    f7b6:	2800      	cmp	r0, #0
    f7b8:	d0da      	beq.n	f770 <mod_set+0x14>
	if (!strncmp(next, "bind", len)) {
    f7ba:	464a      	mov	r2, r9
    f7bc:	494b      	ldr	r1, [pc, #300]	; (f8ec <mod_set+0x190>)
    f7be:	f014 fc90 	bl	240e2 <strncmp>
    f7c2:	b9a8      	cbnz	r0, f7f0 <mod_set+0x94>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    f7c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f7c8:	81ab      	strh	r3, [r5, #12]
	if (len_rd == 0) {
    f7ca:	b926      	cbnz	r6, f7d6 <mod_set+0x7a>
		return 0;
    f7cc:	2400      	movs	r4, #0
}
    f7ce:	4620      	mov	r0, r4
    f7d0:	b006      	add	sp, #24
    f7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	len = read_cb(cb_arg, mod->keys, sizeof(mod->keys));
    f7d6:	2202      	movs	r2, #2
    f7d8:	f105 010c 	add.w	r1, r5, #12
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
    f7dc:	4640      	mov	r0, r8
    f7de:	47b8      	blx	r7
	if (len < 0) {
    f7e0:	1e04      	subs	r4, r0, #0
    f7e2:	daf3      	bge.n	f7cc <mod_set+0x70>
		BT_ERR("Failed to read value (err %zd)", len);
    f7e4:	4622      	mov	r2, r4
    f7e6:	2145      	movs	r1, #69	; 0x45
    f7e8:	4841      	ldr	r0, [pc, #260]	; (f8f0 <mod_set+0x194>)
    f7ea:	f012 fb6e 	bl	21eca <printk>
		return len;
    f7ee:	e7ee      	b.n	f7ce <mod_set+0x72>
	if (!strncmp(next, "sub", len)) {
    f7f0:	4940      	ldr	r1, [pc, #256]	; (f8f4 <mod_set+0x198>)
    f7f2:	9803      	ldr	r0, [sp, #12]
    f7f4:	464a      	mov	r2, r9
    f7f6:	f014 fc74 	bl	240e2 <strncmp>
    f7fa:	4601      	mov	r1, r0
    f7fc:	b948      	cbnz	r0, f812 <mod_set+0xb6>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
    f7fe:	350e      	adds	r5, #14
    f800:	2202      	movs	r2, #2
    f802:	4628      	mov	r0, r5
    f804:	f014 fccd 	bl	241a2 <memset>
	if (len_rd == 0) {
    f808:	2e00      	cmp	r6, #0
    f80a:	d0df      	beq.n	f7cc <mod_set+0x70>
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
    f80c:	2202      	movs	r2, #2
    f80e:	4629      	mov	r1, r5
    f810:	e7e4      	b.n	f7dc <mod_set+0x80>
	if (!strncmp(next, "pub", len)) {
    f812:	464a      	mov	r2, r9
    f814:	4938      	ldr	r1, [pc, #224]	; (f8f8 <mod_set+0x19c>)
    f816:	9803      	ldr	r0, [sp, #12]
    f818:	f014 fc63 	bl	240e2 <strncmp>
    f81c:	4604      	mov	r4, r0
    f81e:	2800      	cmp	r0, #0
    f820:	d13d      	bne.n	f89e <mod_set+0x142>
	if (!mod->pub) {
    f822:	68ab      	ldr	r3, [r5, #8]
    f824:	b933      	cbnz	r3, f834 <mod_set+0xd8>
		BT_WARN("Model has no publication context!");
    f826:	2157      	movs	r1, #87	; 0x57
    f828:	4834      	ldr	r0, [pc, #208]	; (f8fc <mod_set+0x1a0>)
    f82a:	f012 fb4e 	bl	21eca <printk>
		return -EINVAL;
    f82e:	f06f 0415 	mvn.w	r4, #21
    f832:	e7cc      	b.n	f7ce <mod_set+0x72>
	if (len_rd == 0) {
    f834:	b946      	cbnz	r6, f848 <mod_set+0xec>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
    f836:	685a      	ldr	r2, [r3, #4]
    f838:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    f83c:	605a      	str	r2, [r3, #4]
		mod->pub->ttl = 0U;
    f83e:	689a      	ldr	r2, [r3, #8]
    f840:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
    f844:	609a      	str	r2, [r3, #8]
		return 0;
    f846:	e7c2      	b.n	f7ce <mod_set+0x72>
	err = bt_mesh_settings_set(read_cb, cb_arg, &pub, sizeof(pub));
    f848:	2308      	movs	r3, #8
    f84a:	aa04      	add	r2, sp, #16
    f84c:	4641      	mov	r1, r8
    f84e:	4638      	mov	r0, r7
    f850:	f002 fb98 	bl	11f84 <bt_mesh_settings_set>
	if (err) {
    f854:	4604      	mov	r4, r0
    f856:	b120      	cbz	r0, f862 <mod_set+0x106>
		BT_ERR("Failed to set \'model-pub\'");
    f858:	2145      	movs	r1, #69	; 0x45
    f85a:	4829      	ldr	r0, [pc, #164]	; (f900 <mod_set+0x1a4>)
    f85c:	f012 fb35 	bl	21eca <printk>
		return err;
    f860:	e7b5      	b.n	f7ce <mod_set+0x72>
	mod->pub->addr = pub.addr;
    f862:	68ab      	ldr	r3, [r5, #8]
    f864:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	mod->pub->key = pub.key;
    f868:	f8bd 1012 	ldrh.w	r1, [sp, #18]
	mod->pub->addr = pub.addr;
    f86c:	809a      	strh	r2, [r3, #4]
	mod->pub->key = pub.key;
    f86e:	88da      	ldrh	r2, [r3, #6]
    f870:	f361 020b 	bfi	r2, r1, #0, #12
	mod->pub->cred = pub.cred;
    f874:	f89d 1017 	ldrb.w	r1, [sp, #23]
	mod->pub->key = pub.key;
    f878:	80da      	strh	r2, [r3, #6]
	mod->pub->cred = pub.cred;
    f87a:	f3c1 1100 	ubfx	r1, r1, #4, #1
    f87e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    f882:	f361 1204 	bfi	r2, r1, #4, #1
    f886:	71da      	strb	r2, [r3, #7]
	mod->pub->period = pub.period;
    f888:	f89d 2016 	ldrb.w	r2, [sp, #22]
	mod->pub->ttl = pub.ttl;
    f88c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
	mod->pub->period = pub.period;
    f890:	729a      	strb	r2, [r3, #10]
	mod->pub->count = 0U;
    f892:	7ada      	ldrb	r2, [r3, #11]
	mod->pub->ttl = pub.ttl;
    f894:	8119      	strh	r1, [r3, #8]
	mod->pub->count = 0U;
    f896:	f360 1247 	bfi	r2, r0, #5, #3
    f89a:	72da      	strb	r2, [r3, #11]
		return mod_set_pub(mod, len_rd, read_cb, cb_arg);
    f89c:	e797      	b.n	f7ce <mod_set+0x72>
	if (!strncmp(next, "data", len)) {
    f89e:	464a      	mov	r2, r9
    f8a0:	4918      	ldr	r1, [pc, #96]	; (f904 <mod_set+0x1a8>)
    f8a2:	9803      	ldr	r0, [sp, #12]
    f8a4:	f014 fc1d 	bl	240e2 <strncmp>
    f8a8:	4604      	mov	r4, r0
    f8aa:	b9a0      	cbnz	r0, f8d6 <mod_set+0x17a>
	settings_name_next(name, &next);
    f8ac:	a904      	add	r1, sp, #16
    f8ae:	9803      	ldr	r0, [sp, #12]
    f8b0:	f013 f96c 	bl	22b8c <settings_name_next>
	if (mod->cb && mod->cb->settings_set) {
    f8b4:	696b      	ldr	r3, [r5, #20]
    f8b6:	2b00      	cmp	r3, #0
    f8b8:	d089      	beq.n	f7ce <mod_set+0x72>
    f8ba:	f8d3 9000 	ldr.w	r9, [r3]
    f8be:	f1b9 0f00 	cmp.w	r9, #0
    f8c2:	d084      	beq.n	f7ce <mod_set+0x72>
		return mod->cb->settings_set(mod, next, len_rd,
    f8c4:	f8cd 8000 	str.w	r8, [sp]
    f8c8:	463b      	mov	r3, r7
    f8ca:	4632      	mov	r2, r6
    f8cc:	9904      	ldr	r1, [sp, #16]
    f8ce:	4628      	mov	r0, r5
    f8d0:	47c8      	blx	r9
    f8d2:	4604      	mov	r4, r0
		return mod_data_set(mod, next, len_rd, read_cb, cb_arg);
    f8d4:	e77b      	b.n	f7ce <mod_set+0x72>
	BT_WARN("Unknown module key %s", next);
    f8d6:	9a03      	ldr	r2, [sp, #12]
    f8d8:	480b      	ldr	r0, [pc, #44]	; (f908 <mod_set+0x1ac>)
    f8da:	2157      	movs	r1, #87	; 0x57
    f8dc:	f012 faf5 	bl	21eca <printk>
    f8e0:	e74a      	b.n	f778 <mod_set+0x1c>
    f8e2:	bf00      	nop
    f8e4:	0002ac40 	.word	0x0002ac40
    f8e8:	0002d376 	.word	0x0002d376
    f8ec:	0002d510 	.word	0x0002d510
    f8f0:	0002d3aa 	.word	0x0002d3aa
    f8f4:	0002d533 	.word	0x0002d533
    f8f8:	0002d537 	.word	0x0002d537
    f8fc:	0002d3ce 	.word	0x0002d3ce
    f900:	0002d3f5 	.word	0x0002d3f5
    f904:	0002d414 	.word	0x0002d414
    f908:	0002d419 	.word	0x0002d419

0000f90c <bt_mesh_comp_register>:
	if (!comp->elem_count) {
    f90c:	6883      	ldr	r3, [r0, #8]
{
    f90e:	b507      	push	{r0, r1, r2, lr}
	if (!comp->elem_count) {
    f910:	b15b      	cbz	r3, f92a <bt_mesh_comp_register+0x1e>
	dev_comp = comp;
    f912:	4b07      	ldr	r3, [pc, #28]	; (f930 <bt_mesh_comp_register+0x24>)
	bt_mesh_model_foreach(mod_init, &err);
    f914:	a901      	add	r1, sp, #4
	dev_comp = comp;
    f916:	6018      	str	r0, [r3, #0]
	err = 0;
    f918:	2300      	movs	r3, #0
	bt_mesh_model_foreach(mod_init, &err);
    f91a:	4806      	ldr	r0, [pc, #24]	; (f934 <bt_mesh_comp_register+0x28>)
	err = 0;
    f91c:	9301      	str	r3, [sp, #4]
	bt_mesh_model_foreach(mod_init, &err);
    f91e:	f7ff fe1f 	bl	f560 <bt_mesh_model_foreach>
	return err;
    f922:	9801      	ldr	r0, [sp, #4]
}
    f924:	b003      	add	sp, #12
    f926:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
    f92a:	f06f 0015 	mvn.w	r0, #21
    f92e:	e7f9      	b.n	f924 <bt_mesh_comp_register+0x18>
    f930:	20002b4c 	.word	0x20002b4c
    f934:	0000f4f5 	.word	0x0000f4f5

0000f938 <bt_mesh_comp_provision>:
	dev_primary_addr = addr;
    f938:	4b08      	ldr	r3, [pc, #32]	; (f95c <bt_mesh_comp_provision+0x24>)
{
    f93a:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
    f93c:	8018      	strh	r0, [r3, #0]
	for (i = 0; i < dev_comp->elem_count; i++) {
    f93e:	4b08      	ldr	r3, [pc, #32]	; (f960 <bt_mesh_comp_provision+0x28>)
    f940:	6819      	ldr	r1, [r3, #0]
    f942:	688c      	ldr	r4, [r1, #8]
    f944:	2300      	movs	r3, #0
    f946:	18c2      	adds	r2, r0, r3
    f948:	42a3      	cmp	r3, r4
    f94a:	b292      	uxth	r2, r2
    f94c:	d100      	bne.n	f950 <bt_mesh_comp_provision+0x18>
}
    f94e:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
    f950:	011d      	lsls	r5, r3, #4
    f952:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
    f954:	3301      	adds	r3, #1
		elem->addr = addr++;
    f956:	5372      	strh	r2, [r6, r5]
		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
    f958:	e7f5      	b.n	f946 <bt_mesh_comp_provision+0xe>
    f95a:	bf00      	nop
    f95c:	200043a4 	.word	0x200043a4
    f960:	20002b4c 	.word	0x20002b4c

0000f964 <bt_mesh_comp_unprovision>:
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    f964:	4b01      	ldr	r3, [pc, #4]	; (f96c <bt_mesh_comp_unprovision+0x8>)
    f966:	2200      	movs	r2, #0
    f968:	801a      	strh	r2, [r3, #0]
}
    f96a:	4770      	bx	lr
    f96c:	200043a4 	.word	0x200043a4

0000f970 <bt_mesh_primary_addr>:
}
    f970:	4b01      	ldr	r3, [pc, #4]	; (f978 <bt_mesh_primary_addr+0x8>)
    f972:	8818      	ldrh	r0, [r3, #0]
    f974:	4770      	bx	lr
    f976:	bf00      	nop
    f978:	200043a4 	.word	0x200043a4

0000f97c <bt_mesh_elem_find>:
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    f97c:	4b1b      	ldr	r3, [pc, #108]	; (f9ec <bt_mesh_elem_find+0x70>)
{
    f97e:	b5f0      	push	{r4, r5, r6, r7, lr}
    f980:	681d      	ldr	r5, [r3, #0]
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    f982:	b203      	sxth	r3, r0
    f984:	2b00      	cmp	r3, #0
{
    f986:	4604      	mov	r4, r0
    f988:	68ae      	ldr	r6, [r5, #8]
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    f98a:	dd27      	ble.n	f9dc <bt_mesh_elem_find+0x60>
		index = (addr - dev_comp->elem[0].addr);
    f98c:	68ea      	ldr	r2, [r5, #12]
    f98e:	8813      	ldrh	r3, [r2, #0]
    f990:	1ac0      	subs	r0, r0, r3
		if (index < dev_comp->elem_count) {
    f992:	b280      	uxth	r0, r0
    f994:	42b0      	cmp	r0, r6
    f996:	d226      	bcs.n	f9e6 <bt_mesh_elem_find+0x6a>
			return &dev_comp->elem[index];
    f998:	eb02 1000 	add.w	r0, r2, r0, lsl #4
}
    f99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[index];
    f99e:	68e8      	ldr	r0, [r5, #12]
    f9a0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
	for (i = 0; i < elem->model_count; i++) {
    f9a4:	2200      	movs	r2, #0
    f9a6:	f890 c004 	ldrb.w	ip, [r0, #4]
    f9aa:	4562      	cmp	r2, ip
    f9ac:	db06      	blt.n	f9bc <bt_mesh_elem_find+0x40>
	for (i = 0; i < elem->vnd_model_count; i++) {
    f9ae:	f890 c005 	ldrb.w	ip, [r0, #5]
    f9b2:	2200      	movs	r2, #0
    f9b4:	4562      	cmp	r2, ip
    f9b6:	db09      	blt.n	f9cc <bt_mesh_elem_find+0x50>
    f9b8:	3301      	adds	r3, #1
    f9ba:	e011      	b.n	f9e0 <bt_mesh_elem_find+0x64>
		if (mod->groups[i] == addr) {
    f9bc:	6881      	ldr	r1, [r0, #8]
    f9be:	fb07 1102 	mla	r1, r7, r2, r1
    f9c2:	89c9      	ldrh	r1, [r1, #14]
    f9c4:	42a1      	cmp	r1, r4
    f9c6:	d0e9      	beq.n	f99c <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->model_count; i++) {
    f9c8:	3201      	adds	r2, #1
    f9ca:	e7ee      	b.n	f9aa <bt_mesh_elem_find+0x2e>
		if (mod->groups[i] == addr) {
    f9cc:	68c1      	ldr	r1, [r0, #12]
    f9ce:	fb07 1102 	mla	r1, r7, r2, r1
    f9d2:	89c9      	ldrh	r1, [r1, #14]
    f9d4:	42a1      	cmp	r1, r4
    f9d6:	d0e1      	beq.n	f99c <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->vnd_model_count; i++) {
    f9d8:	3201      	adds	r2, #1
    f9da:	e7eb      	b.n	f9b4 <bt_mesh_elem_find+0x38>
    f9dc:	2300      	movs	r3, #0
		if (mod->groups[i] == addr) {
    f9de:	271c      	movs	r7, #28
    f9e0:	b29a      	uxth	r2, r3
	for (index = 0; index < dev_comp->elem_count; index++) {
    f9e2:	42b2      	cmp	r2, r6
    f9e4:	d3db      	bcc.n	f99e <bt_mesh_elem_find+0x22>
			return NULL;
    f9e6:	2000      	movs	r0, #0
    f9e8:	e7d8      	b.n	f99c <bt_mesh_elem_find+0x20>
    f9ea:	bf00      	nop
    f9ec:	20002b4c 	.word	0x20002b4c

0000f9f0 <bt_mesh_elem_count>:
	return dev_comp->elem_count;
    f9f0:	4b01      	ldr	r3, [pc, #4]	; (f9f8 <bt_mesh_elem_count+0x8>)
    f9f2:	681b      	ldr	r3, [r3, #0]
}
    f9f4:	7a18      	ldrb	r0, [r3, #8]
    f9f6:	4770      	bx	lr
    f9f8:	20002b4c 	.word	0x20002b4c

0000f9fc <bt_mesh_model_recv>:
{
    f9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
    fa00:	680b      	ldr	r3, [r1, #0]
    fa02:	781b      	ldrb	r3, [r3, #0]
    fa04:	099a      	lsrs	r2, r3, #6
    fa06:	2a02      	cmp	r2, #2
{
    fa08:	b085      	sub	sp, #20
    fa0a:	4680      	mov	r8, r0
    fa0c:	460c      	mov	r4, r1
	switch (buf->data[0] >> 6) {
    fa0e:	d01e      	beq.n	fa4e <bt_mesh_model_recv+0x52>
    fa10:	2a03      	cmp	r2, #3
    fa12:	d026      	beq.n	fa62 <bt_mesh_model_recv+0x66>
		if (buf->data[0] == 0x7f) {
    fa14:	2b7f      	cmp	r3, #127	; 0x7f
    fa16:	d10a      	bne.n	fa2e <bt_mesh_model_recv+0x32>
			BT_ERR("Ignoring RFU OpCode");
    fa18:	4850      	ldr	r0, [pc, #320]	; (fb5c <bt_mesh_model_recv+0x160>)
    fa1a:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Too short payload for 2-octet OpCode");
    fa1c:	f012 fa55 	bl	21eca <printk>
		BT_WARN("Unable to decode OpCode");
    fa20:	484f      	ldr	r0, [pc, #316]	; (fb60 <bt_mesh_model_recv+0x164>)
    fa22:	2157      	movs	r1, #87	; 0x57
}
    fa24:	b005      	add	sp, #20
    fa26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_WARN("Unable to decode OpCode");
    fa2a:	f012 ba4e 	b.w	21eca <printk>
		*opcode = net_buf_simple_pull_u8(buf);
    fa2e:	4608      	mov	r0, r1
    fa30:	f018 fa6d 	bl	27f0e <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
    fa34:	4606      	mov	r6, r0
		op->func(model, &rx->ctx, buf);
    fa36:	f108 0304 	add.w	r3, r8, #4
	for (i = 0; i < dev_comp->elem_count; i++) {
    fa3a:	2700      	movs	r7, #0
		op->func(model, &rx->ctx, buf);
    fa3c:	9301      	str	r3, [sp, #4]
	for (i = 0; i < dev_comp->elem_count; i++) {
    fa3e:	4b49      	ldr	r3, [pc, #292]	; (fb64 <bt_mesh_model_recv+0x168>)
    fa40:	681b      	ldr	r3, [r3, #0]
    fa42:	689a      	ldr	r2, [r3, #8]
    fa44:	42ba      	cmp	r2, r7
    fa46:	d81c      	bhi.n	fa82 <bt_mesh_model_recv+0x86>
}
    fa48:	b005      	add	sp, #20
    fa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
    fa4e:	888b      	ldrh	r3, [r1, #4]
    fa50:	2b01      	cmp	r3, #1
    fa52:	d802      	bhi.n	fa5a <bt_mesh_model_recv+0x5e>
			BT_ERR("Too short payload for 2-octet OpCode");
    fa54:	2145      	movs	r1, #69	; 0x45
    fa56:	4844      	ldr	r0, [pc, #272]	; (fb68 <bt_mesh_model_recv+0x16c>)
    fa58:	e7e0      	b.n	fa1c <bt_mesh_model_recv+0x20>
		*opcode = net_buf_simple_pull_be16(buf);
    fa5a:	4608      	mov	r0, r1
    fa5c:	f018 fa67 	bl	27f2e <net_buf_simple_pull_be16>
    fa60:	e7e8      	b.n	fa34 <bt_mesh_model_recv+0x38>
		if (buf->len < 3) {
    fa62:	888b      	ldrh	r3, [r1, #4]
    fa64:	2b02      	cmp	r3, #2
    fa66:	d802      	bhi.n	fa6e <bt_mesh_model_recv+0x72>
			BT_ERR("Too short payload for 3-octet OpCode");
    fa68:	2145      	movs	r1, #69	; 0x45
    fa6a:	4840      	ldr	r0, [pc, #256]	; (fb6c <bt_mesh_model_recv+0x170>)
    fa6c:	e7d6      	b.n	fa1c <bt_mesh_model_recv+0x20>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
    fa6e:	4608      	mov	r0, r1
    fa70:	f018 fa4d 	bl	27f0e <net_buf_simple_pull_u8>
    fa74:	4606      	mov	r6, r0
		*opcode |= net_buf_simple_pull_le16(buf);
    fa76:	4620      	mov	r0, r4
    fa78:	f018 fa51 	bl	27f1e <net_buf_simple_pull_le16>
    fa7c:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
		return 0;
    fa80:	e7d9      	b.n	fa36 <bt_mesh_model_recv+0x3a>
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    fa82:	68d8      	ldr	r0, [r3, #12]
    fa84:	eb00 1307 	add.w	r3, r0, r7, lsl #4
			models = elem->vnd_models;
    fa88:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
		if (BT_MESH_MODEL_OP_LEN(opcode) < 3) {
    fa8c:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
			count = elem->model_count;
    fa90:	bf36      	itet	cc
    fa92:	f893 c004 	ldrbcc.w	ip, [r3, #4]
			count = elem->vnd_model_count;
    fa96:	f893 c005 	ldrbcs.w	ip, [r3, #5]
			models = elem->models;
    fa9a:	4615      	movcc	r5, r2
    fa9c:	2100      	movs	r1, #0
	for (i = 0U; i < model_count; i++) {
    fa9e:	b2cb      	uxtb	r3, r1
    faa0:	4563      	cmp	r3, ip
    faa2:	d301      	bcc.n	faa8 <bt_mesh_model_recv+0xac>
	for (i = 0; i < dev_comp->elem_count; i++) {
    faa4:	3701      	adds	r7, #1
    faa6:	e7ca      	b.n	fa3e <bt_mesh_model_recv+0x42>
		for (op = (*model)->op; op->func; op++) {
    faa8:	f8d5 a010 	ldr.w	sl, [r5, #16]
    faac:	f8da 2008 	ldr.w	r2, [sl, #8]
    fab0:	b912      	cbnz	r2, fab8 <bt_mesh_model_recv+0xbc>
    fab2:	3101      	adds	r1, #1
    fab4:	351c      	adds	r5, #28
    fab6:	e7f2      	b.n	fa9e <bt_mesh_model_recv+0xa2>
			if (op->opcode == opcode) {
    fab8:	f8da 2000 	ldr.w	r2, [sl]
    fabc:	42b2      	cmp	r2, r6
    fabe:	d026      	beq.n	fb0e <bt_mesh_model_recv+0x112>
		for (op = (*model)->op; op->func; op++) {
    fac0:	f10a 0a0c 	add.w	sl, sl, #12
    fac4:	e7f2      	b.n	faac <bt_mesh_model_recv+0xb0>
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst)) {
    fac6:	f481 4200 	eor.w	r2, r1, #32768	; 0x8000
    faca:	f5b2 4ffe 	cmp.w	r2, #32512	; 0x7f00
    face:	d806      	bhi.n	fade <bt_mesh_model_recv+0xe2>
		return !!bt_mesh_model_find_group(&mod, dst);
    fad0:	a803      	add	r0, sp, #12
    fad2:	f016 fc00 	bl	262d6 <bt_mesh_model_find_group>
    fad6:	3000      	adds	r0, #0
    fad8:	bf18      	it	ne
    fada:	2001      	movne	r0, #1
    fadc:	e030      	b.n	fb40 <bt_mesh_model_recv+0x144>
	return mod->elem_idx == 0;
    fade:	7928      	ldrb	r0, [r5, #4]
    fae0:	fab0 f080 	clz	r0, r0
    fae4:	0940      	lsrs	r0, r0, #5
    fae6:	e02b      	b.n	fb40 <bt_mesh_model_recv+0x144>
	state->offset = net_buf_simple_headroom(buf);
    fae8:	4620      	mov	r0, r4
    faea:	f018 fa34 	bl	27f56 <net_buf_simple_headroom>
		op->func(model, &rx->ctx, buf);
    faee:	f8da 3008 	ldr.w	r3, [sl, #8]
    faf2:	9901      	ldr	r1, [sp, #4]
	state->len = buf->len;
    faf4:	f8b4 b004 	ldrh.w	fp, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
    faf8:	4681      	mov	r9, r0
    fafa:	4622      	mov	r2, r4
    fafc:	4628      	mov	r0, r5
    fafe:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    fb00:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    fb02:	f8a4 b004 	strh.w	fp, [r4, #4]
	buf->data = buf->__buf + state->offset;
    fb06:	fa13 f389 	uxtah	r3, r3, r9
    fb0a:	6023      	str	r3, [r4, #0]
	buf->len = state->len;
    fb0c:	e7ca      	b.n	faa4 <bt_mesh_model_recv+0xa8>
		if (!model_has_key(model, rx->ctx.app_idx)) {
    fb0e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
		if (mod->keys[i] == key ||
    fb12:	89a9      	ldrh	r1, [r5, #12]
    fb14:	428a      	cmp	r2, r1
    fb16:	d007      	beq.n	fb28 <bt_mesh_model_recv+0x12c>
    fb18:	f64f 7cfc 	movw	ip, #65532	; 0xfffc
    fb1c:	4561      	cmp	r1, ip
    fb1e:	d1c1      	bne.n	faa4 <bt_mesh_model_recv+0xa8>
		     BT_MESH_IS_DEV_KEY(key))) {
    fb20:	3203      	adds	r2, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
    fb22:	b292      	uxth	r2, r2
    fb24:	2a01      	cmp	r2, #1
    fb26:	d8bd      	bhi.n	faa4 <bt_mesh_model_recv+0xa8>
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    fb28:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    fb2c:	9503      	str	r5, [sp, #12]
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
    fb2e:	b20a      	sxth	r2, r1
    fb30:	2a00      	cmp	r2, #0
    fb32:	ddc8      	ble.n	fac6 <bt_mesh_model_recv+0xca>
		return (dev_comp->elem[mod->elem_idx].addr == dst);
    fb34:	792a      	ldrb	r2, [r5, #4]
    fb36:	0112      	lsls	r2, r2, #4
    fb38:	5a80      	ldrh	r0, [r0, r2]
    fb3a:	1a43      	subs	r3, r0, r1
    fb3c:	4258      	negs	r0, r3
    fb3e:	4158      	adcs	r0, r3
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    fb40:	2800      	cmp	r0, #0
    fb42:	d0af      	beq.n	faa4 <bt_mesh_model_recv+0xa8>
		if (buf->len < op->min_len) {
    fb44:	88a1      	ldrh	r1, [r4, #4]
    fb46:	f8da 2004 	ldr.w	r2, [sl, #4]
    fb4a:	4291      	cmp	r1, r2
    fb4c:	d2cc      	bcs.n	fae8 <bt_mesh_model_recv+0xec>
			BT_ERR("Too short message for OpCode 0x%08x", opcode);
    fb4e:	4632      	mov	r2, r6
    fb50:	2145      	movs	r1, #69	; 0x45
    fb52:	4807      	ldr	r0, [pc, #28]	; (fb70 <bt_mesh_model_recv+0x174>)
    fb54:	f012 f9b9 	bl	21eca <printk>
			continue;
    fb58:	e7a4      	b.n	faa4 <bt_mesh_model_recv+0xa8>
    fb5a:	bf00      	nop
    fb5c:	0002d22e 	.word	0x0002d22e
    fb60:	0002d29b 	.word	0x0002d29b
    fb64:	20002b4c 	.word	0x20002b4c
    fb68:	0002d247 	.word	0x0002d247
    fb6c:	0002d271 	.word	0x0002d271
    fb70:	0002d2b8 	.word	0x0002d2b8

0000fb74 <bt_mesh_model_publish>:
{
    fb74:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_model_pub *pub = model->pub;
    fb76:	6884      	ldr	r4, [r0, #8]
{
    fb78:	b0aa      	sub	sp, #168	; 0xa8
		.app_idx = pub->key,
    fb7a:	88e1      	ldrh	r1, [r4, #6]
		.addr = pub->addr,
    fb7c:	88a6      	ldrh	r6, [r4, #4]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    fb7e:	ab0c      	add	r3, sp, #48	; 0x30
    fb80:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
    fb84:	e9cd 2304 	strd	r2, r3, [sp, #16]
    fb88:	9303      	str	r3, [sp, #12]
		.app_idx = pub->key,
    fb8a:	f3c1 010b 	ubfx	r1, r1, #0, #12
	struct bt_mesh_msg_ctx ctx = {
    fb8e:	2300      	movs	r3, #0
    fb90:	e9cd 3306 	strd	r3, r3, [sp, #24]
    fb94:	f8ad 101a 	strh.w	r1, [sp, #26]
		.send_rel = pub->send_rel,
    fb98:	79e1      	ldrb	r1, [r4, #7]
	struct bt_mesh_msg_ctx ctx = {
    fb9a:	f8ad 3020 	strh.w	r3, [sp, #32]
		.send_rel = pub->send_rel,
    fb9e:	f3c1 1140 	ubfx	r1, r1, #5, #1
	struct bt_mesh_msg_ctx ctx = {
    fba2:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
    fba6:	7a21      	ldrb	r1, [r4, #8]
    fba8:	f8ad 601c 	strh.w	r6, [sp, #28]
    fbac:	aa06      	add	r2, sp, #24
	struct bt_mesh_net_tx tx = {
    fbae:	9309      	str	r3, [sp, #36]	; 0x24
    fbb0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
{
    fbb4:	4605      	mov	r5, r0
	struct bt_mesh_msg_ctx ctx = {
    fbb6:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
		.src = bt_mesh_model_elem(model)->addr,
    fbba:	f7ff fd95 	bl	f6e8 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    fbbe:	8803      	ldrh	r3, [r0, #0]
    fbc0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    fbc4:	2e00      	cmp	r6, #0
    fbc6:	d041      	beq.n	fc4c <bt_mesh_model_publish+0xd8>
	if (pub->msg->len + 4 > BT_MESH_TX_SDU_MAX) {
    fbc8:	6923      	ldr	r3, [r4, #16]
    fbca:	889b      	ldrh	r3, [r3, #4]
    fbcc:	3304      	adds	r3, #4
    fbce:	2b78      	cmp	r3, #120	; 0x78
    fbd0:	dd08      	ble.n	fbe4 <bt_mesh_model_publish+0x70>
		BT_ERR("Message does not fit maximum SDU size");
    fbd2:	2145      	movs	r1, #69	; 0x45
    fbd4:	481f      	ldr	r0, [pc, #124]	; (fc54 <bt_mesh_model_publish+0xe0>)
    fbd6:	f012 f978 	bl	21eca <printk>
		return -EMSGSIZE;
    fbda:	f06f 0523 	mvn.w	r5, #35	; 0x23
}
    fbde:	4628      	mov	r0, r5
    fbe0:	b02a      	add	sp, #168	; 0xa8
    fbe2:	bd70      	pop	{r4, r5, r6, pc}
	if (pub->count) {
    fbe4:	7ae3      	ldrb	r3, [r4, #11]
    fbe6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    fbea:	d007      	beq.n	fbfc <bt_mesh_model_publish+0x88>
		BT_WARN("Clearing publish retransmit timer");
    fbec:	481a      	ldr	r0, [pc, #104]	; (fc58 <bt_mesh_model_publish+0xe4>)
    fbee:	2157      	movs	r1, #87	; 0x57
    fbf0:	f012 f96b 	bl	21eca <printk>
		k_delayed_work_cancel(&pub->timer);
    fbf4:	f104 0018 	add.w	r0, r4, #24
    fbf8:	f010 fb1e 	bl	20238 <k_delayed_work_cancel>
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    fbfc:	6923      	ldr	r3, [r4, #16]
    fbfe:	a803      	add	r0, sp, #12
    fc00:	889a      	ldrh	r2, [r3, #4]
    fc02:	6819      	ldr	r1, [r3, #0]
    fc04:	f018 f9b3 	bl	27f6e <net_buf_simple_add_mem>
	tx.friend_cred = pub->cred;
    fc08:	79e3      	ldrb	r3, [r4, #7]
    fc0a:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    fc0e:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fc12:	f363 0200 	bfi	r2, r3, #0, #1
    fc16:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    fc1a:	7ae3      	ldrb	r3, [r4, #11]
    fc1c:	7a62      	ldrb	r2, [r4, #9]
    fc1e:	f362 1347 	bfi	r3, r2, #5, #3
    fc22:	72e3      	strb	r3, [r4, #11]
	err = model_send(model, &tx, true, &sdu, &pub_sent_cb, model);
    fc24:	4b0d      	ldr	r3, [pc, #52]	; (fc5c <bt_mesh_model_publish+0xe8>)
    fc26:	9501      	str	r5, [sp, #4]
    fc28:	9300      	str	r3, [sp, #0]
    fc2a:	4628      	mov	r0, r5
    fc2c:	ab03      	add	r3, sp, #12
    fc2e:	2201      	movs	r2, #1
    fc30:	a909      	add	r1, sp, #36	; 0x24
    fc32:	f7ff fb61 	bl	f2f8 <model_send>
	if (err) {
    fc36:	4605      	mov	r5, r0
    fc38:	2800      	cmp	r0, #0
    fc3a:	d0d0      	beq.n	fbde <bt_mesh_model_publish+0x6a>
	pub->count = 0U;
    fc3c:	7ae3      	ldrb	r3, [r4, #11]
	publish_sent(err, pub->mod);
    fc3e:	6821      	ldr	r1, [r4, #0]
	pub->count = 0U;
    fc40:	f36f 1347 	bfc	r3, #5, #3
    fc44:	72e3      	strb	r3, [r4, #11]
	publish_sent(err, pub->mod);
    fc46:	f7ff fced 	bl	f624 <publish_sent>
    fc4a:	e7c8      	b.n	fbde <bt_mesh_model_publish+0x6a>
		return -EADDRNOTAVAIL;
    fc4c:	f06f 0530 	mvn.w	r5, #48	; 0x30
    fc50:	e7c5      	b.n	fbde <bt_mesh_model_publish+0x6a>
    fc52:	bf00      	nop
    fc54:	0002d1dc 	.word	0x0002d1dc
    fc58:	0002d207 	.word	0x0002d207
    fc5c:	00029588 	.word	0x00029588

0000fc60 <mod_publish>:
{
    fc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    fc64:	f850 8c18 	ldr.w	r8, [r0, #-24]
{
    fc68:	4604      	mov	r4, r0
    fc6a:	b0a8      	sub	sp, #160	; 0xa0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    fc6c:	4640      	mov	r0, r8
    fc6e:	f7ff fcb1 	bl	f5d4 <bt_mesh_model_pub_period_get>
	if (pub->count) {
    fc72:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    fc76:	f013 0fe0 	tst.w	r3, #224	; 0xe0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    fc7a:	4607      	mov	r7, r0
	if (pub->count) {
    fc7c:	d05c      	beq.n	fd38 <mod_publish+0xd8>
	struct bt_mesh_model_pub *pub = mod->pub;
    fc7e:	f8d8 5008 	ldr.w	r5, [r8, #8]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    fc82:	ab0a      	add	r3, sp, #40	; 0x28
    fc84:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
    fc88:	e9cd 2302 	strd	r2, r3, [sp, #8]
	struct bt_mesh_msg_ctx ctx = {
    fc8c:	2600      	movs	r6, #0
		.app_idx = pub->key,
    fc8e:	88ea      	ldrh	r2, [r5, #6]
	struct bt_mesh_msg_ctx ctx = {
    fc90:	9606      	str	r6, [sp, #24]
    fc92:	e9cd 6604 	strd	r6, r6, [sp, #16]
		.app_idx = pub->key,
    fc96:	f3c2 020b 	ubfx	r2, r2, #0, #12
	struct bt_mesh_msg_ctx ctx = {
    fc9a:	f8ad 2012 	strh.w	r2, [sp, #18]
    fc9e:	88aa      	ldrh	r2, [r5, #4]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    fca0:	9301      	str	r3, [sp, #4]
	struct bt_mesh_msg_ctx ctx = {
    fca2:	f8ad 2014 	strh.w	r2, [sp, #20]
    fca6:	ab04      	add	r3, sp, #16
    fca8:	7a2a      	ldrb	r2, [r5, #8]
    fcaa:	f88d 201b 	strb.w	r2, [sp, #27]
		.src = bt_mesh_model_elem(mod)->addr,
    fcae:	4640      	mov	r0, r8
	struct bt_mesh_net_tx tx = {
    fcb0:	e9cd 3608 	strd	r3, r6, [sp, #32]
    fcb4:	9607      	str	r6, [sp, #28]
		.src = bt_mesh_model_elem(mod)->addr,
    fcb6:	f7ff fd17 	bl	f6e8 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    fcba:	8803      	ldrh	r3, [r0, #0]
    fcbc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		.friend_cred = pub->cred,
    fcc0:	79eb      	ldrb	r3, [r5, #7]
	struct bt_mesh_net_tx tx = {
    fcc2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		.friend_cred = pub->cred,
    fcc6:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
    fcca:	f363 0200 	bfi	r2, r3, #0, #1
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    fcce:	692b      	ldr	r3, [r5, #16]
	struct bt_mesh_net_tx tx = {
    fcd0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    fcd4:	889a      	ldrh	r2, [r3, #4]
    fcd6:	6819      	ldr	r1, [r3, #0]
    fcd8:	a801      	add	r0, sp, #4
    fcda:	f018 f948 	bl	27f6e <net_buf_simple_add_mem>
	pub->count--;
    fcde:	7aeb      	ldrb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    fce0:	4a2e      	ldr	r2, [pc, #184]	; (fd9c <mod_publish+0x13c>)
	pub->count--;
    fce2:	33e0      	adds	r3, #224	; 0xe0
    fce4:	72eb      	strb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    fce6:	a901      	add	r1, sp, #4
    fce8:	4643      	mov	r3, r8
    fcea:	a807      	add	r0, sp, #28
    fcec:	f7fe f9ae 	bl	e04c <bt_mesh_trans_send>
		if (err) {
    fcf0:	4602      	mov	r2, r0
    fcf2:	b1f0      	cbz	r0, fd32 <mod_publish+0xd2>
			BT_ERR("Failed to retransmit (err %d)", err);
    fcf4:	2145      	movs	r1, #69	; 0x45
    fcf6:	482a      	ldr	r0, [pc, #168]	; (fda0 <mod_publish+0x140>)
    fcf8:	f012 f8e7 	bl	21eca <printk>
			pub->count = 0U;
    fcfc:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    fd00:	f366 1347 	bfi	r3, r6, #5, #3
    fd04:	f804 3c0d 	strb.w	r3, [r4, #-13]
			if (period_ms) {
    fd08:	b19f      	cbz	r7, fd32 <mod_publish+0xd2>
						      K_MSEC(period_ms));
    fd0a:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
    fd0e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    fd12:	f240 30e7 	movw	r0, #999	; 0x3e7
    fd16:	2100      	movs	r1, #0
    fd18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fd1c:	2300      	movs	r3, #0
    fd1e:	fbc5 0107 	smlal	r0, r1, r5, r7
    fd22:	f7f0 f9ed 	bl	100 <__aeabi_uldivmod>
    fd26:	4602      	mov	r2, r0
    fd28:	460b      	mov	r3, r1
    fd2a:	481e      	ldr	r0, [pc, #120]	; (fda4 <mod_publish+0x144>)
    fd2c:	4621      	mov	r1, r4
    fd2e:	f010 fa13 	bl	20158 <k_delayed_work_submit_to_queue>
}
    fd32:	b028      	add	sp, #160	; 0xa0
    fd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!period_ms) {
    fd38:	2800      	cmp	r0, #0
    fd3a:	d0fa      	beq.n	fd32 <mod_publish+0xd2>
	__ASSERT_NO_MSG(pub->update != NULL);
    fd3c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    fd40:	b943      	cbnz	r3, fd54 <mod_publish+0xf4>
    fd42:	4919      	ldr	r1, [pc, #100]	; (fda8 <mod_publish+0x148>)
    fd44:	4819      	ldr	r0, [pc, #100]	; (fdac <mod_publish+0x14c>)
    fd46:	22f2      	movs	r2, #242	; 0xf2
    fd48:	f012 f8bf 	bl	21eca <printk>
    fd4c:	21f2      	movs	r1, #242	; 0xf2
    fd4e:	4816      	ldr	r0, [pc, #88]	; (fda8 <mod_publish+0x148>)
    fd50:	f012 fb6d 	bl	2242e <assert_post_action>
	err = pub->update(pub->mod);
    fd54:	f854 3c04 	ldr.w	r3, [r4, #-4]
    fd58:	f854 0c18 	ldr.w	r0, [r4, #-24]
    fd5c:	4798      	blx	r3
	if (err) {
    fd5e:	4605      	mov	r5, r0
    fd60:	b178      	cbz	r0, fd82 <mod_publish+0x122>
		pub->period_start = k_uptime_get_32();
    fd62:	f016 fa95 	bl	26290 <k_uptime_get_32>
	pub->count = 0U;
    fd66:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
		pub->period_start = k_uptime_get_32();
    fd6a:	f844 0c0c 	str.w	r0, [r4, #-12]
	pub->count = 0U;
    fd6e:	f36f 1347 	bfc	r3, #5, #3
    fd72:	f804 3c0d 	strb.w	r3, [r4, #-13]
	publish_sent(err, pub->mod);
    fd76:	f854 1c18 	ldr.w	r1, [r4, #-24]
    fd7a:	4628      	mov	r0, r5
    fd7c:	f7ff fc52 	bl	f624 <publish_sent>
    fd80:	e7d7      	b.n	fd32 <mod_publish+0xd2>
	err = bt_mesh_model_publish(pub->mod);
    fd82:	f854 0c18 	ldr.w	r0, [r4, #-24]
    fd86:	f7ff fef5 	bl	fb74 <bt_mesh_model_publish>
	if (err) {
    fd8a:	4602      	mov	r2, r0
    fd8c:	2800      	cmp	r0, #0
    fd8e:	d0d0      	beq.n	fd32 <mod_publish+0xd2>
		BT_ERR("Publishing failed (err %d)", err);
    fd90:	2145      	movs	r1, #69	; 0x45
    fd92:	4807      	ldr	r0, [pc, #28]	; (fdb0 <mod_publish+0x150>)
    fd94:	f012 f899 	bl	21eca <printk>
    fd98:	e7cb      	b.n	fd32 <mod_publish+0xd2>
    fd9a:	bf00      	nop
    fd9c:	00029588 	.word	0x00029588
    fda0:	0002d301 	.word	0x0002d301
    fda4:	20002170 	.word	0x20002170
    fda8:	0002d324 	.word	0x0002d324
    fdac:	0002a026 	.word	0x0002a026
    fdb0:	0002d356 	.word	0x0002d356

0000fdb4 <bt_mesh_comp_get>:
}
    fdb4:	4b01      	ldr	r3, [pc, #4]	; (fdbc <bt_mesh_comp_get+0x8>)
    fdb6:	6818      	ldr	r0, [r3, #0]
    fdb8:	4770      	bx	lr
    fdba:	bf00      	nop
    fdbc:	20002b4c 	.word	0x20002b4c

0000fdc0 <bt_mesh_model_pending_store>:
	bt_mesh_model_foreach(store_pending_mod, NULL);
    fdc0:	2100      	movs	r1, #0
    fdc2:	4801      	ldr	r0, [pc, #4]	; (fdc8 <bt_mesh_model_pending_store+0x8>)
    fdc4:	f7ff bbcc 	b.w	f560 <bt_mesh_model_foreach>
    fdc8:	0000f3c9 	.word	0x0000f3c9

0000fdcc <bt_mesh_model_settings_commit>:

void bt_mesh_model_settings_commit(void)
{
	bt_mesh_model_foreach(commit_mod, NULL);
    fdcc:	2100      	movs	r1, #0
    fdce:	4801      	ldr	r0, [pc, #4]	; (fdd4 <bt_mesh_model_settings_commit+0x8>)
    fdd0:	f7ff bbc6 	b.w	f560 <bt_mesh_model_foreach>
    fdd4:	0000f6a1 	.word	0x0000f6a1

0000fdd8 <app_key_evt>:
	mod_unbind(mod, *app_idx, true);
}

static void app_key_evt(uint16_t app_idx, uint16_t net_idx,
			enum bt_mesh_key_evt evt)
{
    fdd8:	b507      	push	{r0, r1, r2, lr}
	if (evt == BT_MESH_KEY_DELETED) {
    fdda:	2a01      	cmp	r2, #1
{
    fddc:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (evt == BT_MESH_KEY_DELETED) {
    fde0:	d104      	bne.n	fdec <app_key_evt+0x14>
		bt_mesh_model_foreach(&mod_app_key_del, &app_idx);
    fde2:	f10d 0106 	add.w	r1, sp, #6
    fde6:	4803      	ldr	r0, [pc, #12]	; (fdf4 <app_key_evt+0x1c>)
    fde8:	f7ff fbba 	bl	f560 <bt_mesh_model_foreach>
	}
}
    fdec:	b003      	add	sp, #12
    fdee:	f85d fb04 	ldr.w	pc, [sp], #4
    fdf2:	bf00      	nop
    fdf4:	0002663f 	.word	0x0002663f

0000fdf8 <lpn_timeout_get>:
}

static void lpn_timeout_get(struct bt_mesh_model *model,
			    struct bt_mesh_msg_ctx *ctx,
			    struct net_buf_simple *buf)
{
    fdf8:	b570      	push	{r4, r5, r6, lr}
    fdfa:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
    fdfc:	ab02      	add	r3, sp, #8
{
    fdfe:	4604      	mov	r4, r0
    fe00:	460d      	mov	r5, r1
	struct bt_mesh_friend *frnd;
	uint16_t lpn_addr;
	int32_t timeout_ms;

	lpn_addr = net_buf_simple_pull_le16(buf);
    fe02:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
    fe04:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
    fe08:	9305      	str	r3, [sp, #20]
    fe0a:	e9cd 1306 	strd	r1, r3, [sp, #24]
	lpn_addr = net_buf_simple_pull_le16(buf);
    fe0e:	f018 f886 	bl	27f1e <net_buf_simple_pull_le16>

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x lpn_addr 0x%02x",
	       ctx->net_idx, ctx->app_idx, ctx->addr, lpn_addr);

	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
    fe12:	b203      	sxth	r3, r0
    fe14:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
    fe16:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
    fe18:	dc05      	bgt.n	fe26 <lpn_timeout_get+0x2e>
		BT_WARN("Invalid LPNAddress; ignoring msg");
    fe1a:	481a      	ldr	r0, [pc, #104]	; (fe84 <lpn_timeout_get+0x8c>)
    fe1c:	2157      	movs	r1, #87	; 0x57

send_rsp:
	net_buf_simple_add_le24(&msg, timeout_ms);

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
		BT_ERR("Unable to send LPN PollTimeout Status");
    fe1e:	f012 f854 	bl	21eca <printk>
	}
}
    fe22:	b008      	add	sp, #32
    fe24:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
    fe26:	f248 012e 	movw	r1, #32814	; 0x802e
    fe2a:	a805      	add	r0, sp, #20
    fe2c:	f016 fa5a 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
    fe30:	4631      	mov	r1, r6
    fe32:	a805      	add	r0, sp, #20
    fe34:	f018 f8ae 	bl	27f94 <net_buf_simple_add_le16>
	frnd = bt_mesh_friend_find(BT_MESH_KEY_ANY, lpn_addr, true, true);
    fe38:	2301      	movs	r3, #1
    fe3a:	461a      	mov	r2, r3
    fe3c:	4631      	mov	r1, r6
    fe3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    fe42:	f016 fe14 	bl	26a6e <bt_mesh_friend_find>
	if (!frnd) {
    fe46:	b1d8      	cbz	r0, fe80 <lpn_timeout_get+0x88>
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
    fe48:	3070      	adds	r0, #112	; 0x70
    fe4a:	f010 fbc1 	bl	205d0 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    fe4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fe52:	fba0 2302 	umull	r2, r3, r0, r2
    fe56:	0bd1      	lsrs	r1, r2, #15
    fe58:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
	timeout_ms = k_delayed_work_remaining_get(&frnd->timer) / 100;
    fe5c:	2064      	movs	r0, #100	; 0x64
    fe5e:	fbb1 f1f0 	udiv	r1, r1, r0
	net_buf_simple_add_le24(&msg, timeout_ms);
    fe62:	a805      	add	r0, sp, #20
    fe64:	f018 f8a8 	bl	27fb8 <net_buf_simple_add_le24>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    fe68:	2300      	movs	r3, #0
    fe6a:	9300      	str	r3, [sp, #0]
    fe6c:	aa05      	add	r2, sp, #20
    fe6e:	4629      	mov	r1, r5
    fe70:	4620      	mov	r0, r4
    fe72:	f016 fa60 	bl	26336 <bt_mesh_model_send>
    fe76:	2800      	cmp	r0, #0
    fe78:	d0d3      	beq.n	fe22 <lpn_timeout_get+0x2a>
		BT_ERR("Unable to send LPN PollTimeout Status");
    fe7a:	2145      	movs	r1, #69	; 0x45
    fe7c:	4802      	ldr	r0, [pc, #8]	; (fe88 <lpn_timeout_get+0x90>)
    fe7e:	e7ce      	b.n	fe1e <lpn_timeout_get+0x26>
		timeout_ms = 0;
    fe80:	4601      	mov	r1, r0
    fe82:	e7ee      	b.n	fe62 <lpn_timeout_get+0x6a>
    fe84:	0002d806 	.word	0x0002d806
    fe88:	0002d82c 	.word	0x0002d82c

0000fe8c <node_reset>:
{
    fe8c:	b530      	push	{r4, r5, lr}
    fe8e:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
    fe90:	ab03      	add	r3, sp, #12
    fe92:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
{
    fe96:	4604      	mov	r4, r0
    fe98:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
    fe9a:	a805      	add	r0, sp, #20
    fe9c:	f248 014a 	movw	r1, #32842	; 0x804a
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
    fea0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fea4:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
    fea6:	f016 fa1d 	bl	262e4 <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    feaa:	2300      	movs	r3, #0
    feac:	9300      	str	r3, [sp, #0]
    feae:	aa05      	add	r2, sp, #20
    feb0:	4629      	mov	r1, r5
    feb2:	4620      	mov	r0, r4
    feb4:	f016 fa3f 	bl	26336 <bt_mesh_model_send>
    feb8:	b118      	cbz	r0, fec2 <node_reset+0x36>
		BT_ERR("Unable to send Node Reset Status");
    feba:	2145      	movs	r1, #69	; 0x45
    febc:	4803      	ldr	r0, [pc, #12]	; (fecc <node_reset+0x40>)
    febe:	f012 f804 	bl	21eca <printk>
	bt_mesh_proxy_on_idle(&proxy_idle);
    fec2:	4803      	ldr	r0, [pc, #12]	; (fed0 <node_reset+0x44>)
    fec4:	f005 fcda 	bl	1587c <bt_mesh_proxy_on_idle>
}
    fec8:	b009      	add	sp, #36	; 0x24
    feca:	bd30      	pop	{r4, r5, pc}
    fecc:	0002da9e 	.word	0x0002da9e
    fed0:	200007a0 	.word	0x200007a0

0000fed4 <send_mod_sub_status>:
{
    fed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fed8:	b08a      	sub	sp, #40	; 0x28
    feda:	461f      	mov	r7, r3
    fedc:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
    fede:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
    fee2:	a906      	add	r1, sp, #24
{
    fee4:	4690      	mov	r8, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
    fee6:	e9cd 3104 	strd	r3, r1, [sp, #16]
    feea:	9103      	str	r1, [sp, #12]
{
    feec:	4604      	mov	r4, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
    feee:	f248 011f 	movw	r1, #32799	; 0x801f
    fef2:	a803      	add	r0, sp, #12
{
    fef4:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
    fef8:	f016 f9f4 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
    fefc:	4641      	mov	r1, r8
    fefe:	a803      	add	r0, sp, #12
    ff00:	f018 f841 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
    ff04:	4639      	mov	r1, r7
    ff06:	a803      	add	r0, sp, #12
    ff08:	f018 f844 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
    ff0c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    ff10:	a803      	add	r0, sp, #12
    ff12:	f018 f83f 	bl	27f94 <net_buf_simple_add_le16>
	if (vnd) {
    ff16:	b1b6      	cbz	r6, ff46 <send_mod_sub_status+0x72>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
    ff18:	2104      	movs	r1, #4
    ff1a:	a803      	add	r0, sp, #12
    ff1c:	f00c fdf4 	bl	1cb08 <net_buf_simple_add>
    ff20:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
    ff22:	9911      	ldr	r1, [sp, #68]	; 0x44
    ff24:	f014 f913 	bl	2414e <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    ff28:	2300      	movs	r3, #0
    ff2a:	9300      	str	r3, [sp, #0]
    ff2c:	aa03      	add	r2, sp, #12
    ff2e:	4629      	mov	r1, r5
    ff30:	4620      	mov	r0, r4
    ff32:	f016 fa00 	bl	26336 <bt_mesh_model_send>
    ff36:	b118      	cbz	r0, ff40 <send_mod_sub_status+0x6c>
		BT_ERR("Unable to send Model Subscription Status");
    ff38:	2145      	movs	r1, #69	; 0x45
    ff3a:	4806      	ldr	r0, [pc, #24]	; (ff54 <send_mod_sub_status+0x80>)
    ff3c:	f011 ffc5 	bl	21eca <printk>
}
    ff40:	b00a      	add	sp, #40	; 0x28
    ff42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
    ff46:	2102      	movs	r1, #2
    ff48:	a803      	add	r0, sp, #12
    ff4a:	f00c fddd 	bl	1cb08 <net_buf_simple_add>
    ff4e:	2202      	movs	r2, #2
    ff50:	e7e7      	b.n	ff22 <send_mod_sub_status+0x4e>
    ff52:	bf00      	nop
    ff54:	0002dc0d 	.word	0x0002dc0d

0000ff58 <net_key_get>:
{
    ff58:	b530      	push	{r4, r5, lr}
    ff5a:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
    ff5c:	ab03      	add	r3, sp, #12
    ff5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
    ff62:	4604      	mov	r4, r0
    ff64:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
    ff66:	a805      	add	r0, sp, #20
    ff68:	f248 0143 	movw	r1, #32835	; 0x8043
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
    ff6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ff70:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
    ff72:	f016 f9b7 	bl	262e4 <bt_mesh_model_msg_init>
	count = bt_mesh_subnets_get(net_idx, ARRAY_SIZE(net_idx), 0);
    ff76:	2200      	movs	r2, #0
    ff78:	2101      	movs	r1, #1
    ff7a:	a802      	add	r0, sp, #8
    ff7c:	f7fc fe92 	bl	cca4 <bt_mesh_subnets_get>
	if (count < 0 || count > ARRAY_SIZE(net_idx)) {
    ff80:	b120      	cbz	r0, ff8c <net_key_get+0x34>
		net_buf_simple_add_le16(&msg, net_idx[i]);
    ff82:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    ff86:	a805      	add	r0, sp, #20
    ff88:	f018 f804 	bl	27f94 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    ff8c:	2300      	movs	r3, #0
    ff8e:	9300      	str	r3, [sp, #0]
    ff90:	aa05      	add	r2, sp, #20
    ff92:	4629      	mov	r1, r5
    ff94:	4620      	mov	r0, r4
    ff96:	f016 f9ce 	bl	26336 <bt_mesh_model_send>
    ff9a:	b118      	cbz	r0, ffa4 <net_key_get+0x4c>
		BT_ERR("Unable to send NetKey List");
    ff9c:	2145      	movs	r1, #69	; 0x45
    ff9e:	4802      	ldr	r0, [pc, #8]	; (ffa8 <net_key_get+0x50>)
    ffa0:	f011 ff93 	bl	21eca <printk>
}
    ffa4:	b009      	add	sp, #36	; 0x24
    ffa6:	bd30      	pop	{r4, r5, pc}
    ffa8:	0002d9fd 	.word	0x0002d9fd

0000ffac <mod_sub_get_vnd>:
{
    ffac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ffb0:	4614      	mov	r4, r2
    ffb2:	b0a6      	sub	sp, #152	; 0x98
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    ffb4:	ab08      	add	r3, sp, #32
    ffb6:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
{
    ffba:	4681      	mov	r9, r0
	addr = net_buf_simple_pull_le16(buf);
    ffbc:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    ffbe:	9305      	str	r3, [sp, #20]
    ffc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
    ffc4:	468a      	mov	sl, r1
	addr = net_buf_simple_pull_le16(buf);
    ffc6:	f017 ffaa 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    ffca:	b203      	sxth	r3, r0
    ffcc:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
    ffce:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    ffd0:	dc06      	bgt.n	ffe0 <mod_sub_get_vnd+0x34>
		BT_WARN("Prohibited element address");
    ffd2:	482d      	ldr	r0, [pc, #180]	; (10088 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x89>)
    ffd4:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Vendor Model Subscription List");
    ffd6:	f011 ff78 	bl	21eca <printk>
}
    ffda:	b026      	add	sp, #152	; 0x98
    ffdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	company = net_buf_simple_pull_le16(buf);
    ffe0:	4620      	mov	r0, r4
    ffe2:	f017 ff9c 	bl	27f1e <net_buf_simple_pull_le16>
    ffe6:	4607      	mov	r7, r0
	id = net_buf_simple_pull_le16(buf);
    ffe8:	4620      	mov	r0, r4
    ffea:	f017 ff98 	bl	27f1e <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
    ffee:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
    fff0:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
    fff2:	f248 012c 	movw	r1, #32812	; 0x802c
    fff6:	4620      	mov	r0, r4
    fff8:	f016 f974 	bl	262e4 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
    fffc:	4628      	mov	r0, r5
    fffe:	f7ff fcbd 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   10002:	b9d8      	cbnz	r0, 1003c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   10004:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   10006:	4620      	mov	r0, r4
   10008:	f017 ffbd 	bl	27f86 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   1000c:	4629      	mov	r1, r5
   1000e:	4620      	mov	r0, r4
   10010:	f017 ffc0 	bl	27f94 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
   10014:	4639      	mov	r1, r7
   10016:	4620      	mov	r0, r4
   10018:	f017 ffbc 	bl	27f94 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   1001c:	4631      	mov	r1, r6
   1001e:	4620      	mov	r0, r4
   10020:	f017 ffb8 	bl	27f94 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10024:	2300      	movs	r3, #0
   10026:	9300      	str	r3, [sp, #0]
   10028:	4622      	mov	r2, r4
   1002a:	4651      	mov	r1, sl
   1002c:	4648      	mov	r0, r9
   1002e:	f016 f982 	bl	26336 <bt_mesh_model_send>
   10032:	2800      	cmp	r0, #0
   10034:	d0d1      	beq.n	ffda <mod_sub_get_vnd+0x2e>
		BT_ERR("Unable to send Vendor Model Subscription List");
   10036:	2145      	movs	r1, #69	; 0x45
   10038:	4814      	ldr	r0, [pc, #80]	; (1008c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8d>)
   1003a:	e7cc      	b.n	ffd6 <mod_sub_get_vnd+0x2a>
	mod = bt_mesh_model_find_vnd(elem, company, id);
   1003c:	4632      	mov	r2, r6
   1003e:	4639      	mov	r1, r7
   10040:	f016 f991 	bl	26366 <bt_mesh_model_find_vnd>
	if (!mod) {
   10044:	4680      	mov	r8, r0
   10046:	b908      	cbnz	r0, 1004c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4d>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   10048:	2102      	movs	r1, #2
   1004a:	e7dc      	b.n	10006 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   1004c:	2100      	movs	r1, #0
   1004e:	4620      	mov	r0, r4
   10050:	f017 ff99 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   10054:	4629      	mov	r1, r5
   10056:	4620      	mov	r0, r4
   10058:	f017 ff9c 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
   1005c:	4639      	mov	r1, r7
   1005e:	4620      	mov	r0, r4
   10060:	f017 ff98 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   10064:	4631      	mov	r1, r6
   10066:	4620      	mov	r0, r4
   10068:	f017 ff94 	bl	27f94 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   1006c:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
   1006e:	f898 3004 	ldrb.w	r3, [r8, #4]
   10072:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_list_visitor,
   10076:	4640      	mov	r0, r8
   10078:	f016 f9a0 	bl	263bc <bt_mesh_model_root>
   1007c:	aa03      	add	r2, sp, #12
   1007e:	4904      	ldr	r1, [pc, #16]	; (10090 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x91>)
   10080:	f016 f99d 	bl	263be <bt_mesh_model_tree_walk>
   10084:	e7ce      	b.n	10024 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x25>
   10086:	bf00      	nop
   10088:	0002d974 	.word	0x0002d974
   1008c:	0002d994 	.word	0x0002d994
   10090:	00010d89 	.word	0x00010d89

00010094 <mod_sub_get>:
{
   10094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10098:	4614      	mov	r4, r2
   1009a:	b0a7      	sub	sp, #156	; 0x9c
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   1009c:	ab08      	add	r3, sp, #32
   1009e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
{
   100a2:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
   100a4:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   100a6:	9305      	str	r3, [sp, #20]
   100a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   100ac:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
   100ae:	f017 ff36 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   100b2:	b203      	sxth	r3, r0
   100b4:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   100b6:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   100b8:	dc06      	bgt.n	100c8 <mod_sub_get+0x34>
		BT_WARN("Prohibited element address");
   100ba:	4826      	ldr	r0, [pc, #152]	; (10154 <mod_sub_get+0xc0>)
   100bc:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model Subscription List");
   100be:	f011 ff04 	bl	21eca <printk>
}
   100c2:	b027      	add	sp, #156	; 0x9c
   100c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	id = net_buf_simple_pull_le16(buf);
   100c8:	4620      	mov	r0, r4
   100ca:	f017 ff28 	bl	27f1e <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   100ce:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
   100d0:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   100d2:	f248 012a 	movw	r1, #32810	; 0x802a
   100d6:	4620      	mov	r0, r4
   100d8:	f016 f904 	bl	262e4 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   100dc:	4628      	mov	r0, r5
   100de:	f7ff fc4d 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   100e2:	b9b8      	cbnz	r0, 10114 <mod_sub_get+0x80>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   100e4:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   100e6:	4620      	mov	r0, r4
   100e8:	f017 ff4d 	bl	27f86 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   100ec:	4629      	mov	r1, r5
   100ee:	4620      	mov	r0, r4
   100f0:	f017 ff50 	bl	27f94 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   100f4:	4631      	mov	r1, r6
   100f6:	4620      	mov	r0, r4
   100f8:	f017 ff4c 	bl	27f94 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   100fc:	2300      	movs	r3, #0
   100fe:	9300      	str	r3, [sp, #0]
   10100:	4622      	mov	r2, r4
   10102:	4649      	mov	r1, r9
   10104:	4640      	mov	r0, r8
   10106:	f016 f916 	bl	26336 <bt_mesh_model_send>
   1010a:	2800      	cmp	r0, #0
   1010c:	d0d9      	beq.n	100c2 <mod_sub_get+0x2e>
		BT_ERR("Unable to send Model Subscription List");
   1010e:	2145      	movs	r1, #69	; 0x45
   10110:	4811      	ldr	r0, [pc, #68]	; (10158 <mod_sub_get+0xc4>)
   10112:	e7d4      	b.n	100be <mod_sub_get+0x2a>
	mod = bt_mesh_model_find(elem, id);
   10114:	4631      	mov	r1, r6
   10116:	f016 f93d 	bl	26394 <bt_mesh_model_find>
	if (!mod) {
   1011a:	4607      	mov	r7, r0
   1011c:	b908      	cbnz	r0, 10122 <mod_sub_get+0x8e>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1011e:	2102      	movs	r1, #2
   10120:	e7e1      	b.n	100e6 <mod_sub_get+0x52>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   10122:	2100      	movs	r1, #0
   10124:	4620      	mov	r0, r4
   10126:	f017 ff2e 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   1012a:	4629      	mov	r1, r5
   1012c:	4620      	mov	r0, r4
   1012e:	f017 ff31 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   10132:	4631      	mov	r1, r6
   10134:	4620      	mov	r0, r4
   10136:	f017 ff2d 	bl	27f94 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   1013a:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
   1013c:	793b      	ldrb	r3, [r7, #4]
   1013e:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_list_visitor,
   10142:	4638      	mov	r0, r7
   10144:	f016 f93a 	bl	263bc <bt_mesh_model_root>
   10148:	aa03      	add	r2, sp, #12
   1014a:	4904      	ldr	r1, [pc, #16]	; (1015c <mod_sub_get+0xc8>)
   1014c:	f016 f937 	bl	263be <bt_mesh_model_tree_walk>
   10150:	e7d4      	b.n	100fc <mod_sub_get+0x68>
   10152:	bf00      	nop
   10154:	0002d974 	.word	0x0002d974
   10158:	0002d948 	.word	0x0002d948
   1015c:	00010d89 	.word	0x00010d89

00010160 <relay_set>:
{
   10160:	b530      	push	{r4, r5, lr}
   10162:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   10164:	ab03      	add	r3, sp, #12
{
   10166:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   10168:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1016c:	e9cd 1306 	strd	r1, r3, [sp, #24]
   10170:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   10172:	6813      	ldr	r3, [r2, #0]
   10174:	781a      	ldrb	r2, [r3, #0]
   10176:	2a01      	cmp	r2, #1
{
   10178:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1017a:	d905      	bls.n	10188 <relay_set+0x28>
		BT_WARN("Invalid Relay value 0x%02x", buf->data[0]);
   1017c:	2157      	movs	r1, #87	; 0x57
   1017e:	4814      	ldr	r0, [pc, #80]	; (101d0 <relay_set+0x70>)
   10180:	f011 fea3 	bl	21eca <printk>
}
   10184:	b009      	add	sp, #36	; 0x24
   10186:	bd30      	pop	{r4, r5, pc}
	(void)bt_mesh_relay_set(buf->data[0], buf->data[1]);
   10188:	7859      	ldrb	r1, [r3, #1]
   1018a:	4610      	mov	r0, r2
   1018c:	f7fb f94c 	bl	b428 <bt_mesh_relay_set>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   10190:	f248 0128 	movw	r1, #32808	; 0x8028
   10194:	a805      	add	r0, sp, #20
   10196:	f016 f8a5 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   1019a:	f015 fba6 	bl	258ea <bt_mesh_relay_get>
   1019e:	4601      	mov	r1, r0
   101a0:	a805      	add	r0, sp, #20
   101a2:	f017 fef0 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   101a6:	f7fb f995 	bl	b4d4 <bt_mesh_relay_retransmit_get>
   101aa:	4601      	mov	r1, r0
   101ac:	a805      	add	r0, sp, #20
   101ae:	f017 feea 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   101b2:	2300      	movs	r3, #0
   101b4:	9300      	str	r3, [sp, #0]
   101b6:	aa05      	add	r2, sp, #20
   101b8:	4629      	mov	r1, r5
   101ba:	4620      	mov	r0, r4
   101bc:	f016 f8bb 	bl	26336 <bt_mesh_model_send>
   101c0:	2800      	cmp	r0, #0
   101c2:	d0df      	beq.n	10184 <relay_set+0x24>
		BT_ERR("Unable to send Relay Status response");
   101c4:	2145      	movs	r1, #69	; 0x45
   101c6:	4803      	ldr	r0, [pc, #12]	; (101d4 <relay_set+0x74>)
   101c8:	f011 fe7f 	bl	21eca <printk>
   101cc:	e7da      	b.n	10184 <relay_set+0x24>
   101ce:	bf00      	nop
   101d0:	0002daf5 	.word	0x0002daf5
   101d4:	0002db15 	.word	0x0002db15

000101d8 <beacon_set>:
{
   101d8:	b570      	push	{r4, r5, r6, lr}
   101da:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   101dc:	ab03      	add	r3, sp, #12
{
   101de:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   101e0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   101e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   101e8:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   101ea:	6823      	ldr	r3, [r4, #0]
   101ec:	781a      	ldrb	r2, [r3, #0]
   101ee:	2a01      	cmp	r2, #1
{
   101f0:	4605      	mov	r5, r0
   101f2:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   101f4:	d905      	bls.n	10202 <beacon_set+0x2a>
		BT_WARN("Invalid Config Beacon value 0x%02x", buf->data[0]);
   101f6:	2157      	movs	r1, #87	; 0x57
   101f8:	4810      	ldr	r0, [pc, #64]	; (1023c <beacon_set+0x64>)
   101fa:	f011 fe66 	bl	21eca <printk>
}
   101fe:	b008      	add	sp, #32
   10200:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_beacon_set(buf->data[0]);
   10202:	f002 0001 	and.w	r0, r2, #1
   10206:	f7fb f8a9 	bl	b35c <bt_mesh_beacon_set>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   1020a:	f248 010b 	movw	r1, #32779	; 0x800b
   1020e:	a805      	add	r0, sp, #20
   10210:	f016 f868 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   10214:	6823      	ldr	r3, [r4, #0]
   10216:	a805      	add	r0, sp, #20
   10218:	7819      	ldrb	r1, [r3, #0]
   1021a:	f017 feb4 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1021e:	2300      	movs	r3, #0
   10220:	9300      	str	r3, [sp, #0]
   10222:	aa05      	add	r2, sp, #20
   10224:	4631      	mov	r1, r6
   10226:	4628      	mov	r0, r5
   10228:	f016 f885 	bl	26336 <bt_mesh_model_send>
   1022c:	2800      	cmp	r0, #0
   1022e:	d0e6      	beq.n	101fe <beacon_set+0x26>
		BT_ERR("Unable to send Config Beacon Status response");
   10230:	2145      	movs	r1, #69	; 0x45
   10232:	4803      	ldr	r0, [pc, #12]	; (10240 <beacon_set+0x68>)
   10234:	f011 fe49 	bl	21eca <printk>
   10238:	e7e1      	b.n	101fe <beacon_set+0x26>
   1023a:	bf00      	nop
   1023c:	0002d59e 	.word	0x0002d59e
   10240:	0002d5c6 	.word	0x0002d5c6

00010244 <app_key_get>:
{
   10244:	b5f0      	push	{r4, r5, r6, r7, lr}
   10246:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   10248:	ab04      	add	r3, sp, #16
{
   1024a:	4606      	mov	r6, r0
   1024c:	460f      	mov	r7, r1
	get_idx = net_buf_simple_pull_le16(buf);
   1024e:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   10250:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   10254:	9307      	str	r3, [sp, #28]
   10256:	e9cd 1308 	strd	r1, r3, [sp, #32]
	get_idx = net_buf_simple_pull_le16(buf);
   1025a:	f017 fe60 	bl	27f1e <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
   1025e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
   10262:	4604      	mov	r4, r0
	if (get_idx > 0xfff) {
   10264:	d306      	bcc.n	10274 <app_key_get+0x30>
		BT_ERR("Invalid NetKeyIndex 0x%04x", get_idx);
   10266:	4602      	mov	r2, r0
   10268:	2145      	movs	r1, #69	; 0x45
   1026a:	481a      	ldr	r0, [pc, #104]	; (102d4 <app_key_get+0x90>)
   1026c:	f011 fe2d 	bl	21eca <printk>
}
   10270:	b00b      	add	sp, #44	; 0x2c
   10272:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
   10274:	f248 0102 	movw	r1, #32770	; 0x8002
   10278:	a807      	add	r0, sp, #28
   1027a:	f016 f833 	bl	262e4 <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_exists(get_idx)) {
   1027e:	4620      	mov	r0, r4
   10280:	f015 fc01 	bl	25a86 <bt_mesh_subnet_exists>
		status = STATUS_SUCCESS;
   10284:	2800      	cmp	r0, #0
   10286:	bf0c      	ite	eq
   10288:	2504      	moveq	r5, #4
   1028a:	2500      	movne	r5, #0
	net_buf_simple_add_u8(&msg, status);
   1028c:	4629      	mov	r1, r5
   1028e:	a807      	add	r0, sp, #28
   10290:	f017 fe79 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
   10294:	4621      	mov	r1, r4
   10296:	a807      	add	r0, sp, #28
   10298:	f017 fe7c 	bl	27f94 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   1029c:	b95d      	cbnz	r5, 102b6 <app_key_get+0x72>
	count = bt_mesh_app_keys_get(get_idx, app_idx, ARRAY_SIZE(app_idx), 0);
   1029e:	462b      	mov	r3, r5
   102a0:	2201      	movs	r2, #1
   102a2:	a903      	add	r1, sp, #12
   102a4:	4620      	mov	r0, r4
   102a6:	f7fd f853 	bl	d350 <bt_mesh_app_keys_get>
	if (count < 0 || count > ARRAY_SIZE(app_idx)) {
   102aa:	b120      	cbz	r0, 102b6 <app_key_get+0x72>
		net_buf_simple_add_le16(&msg, app_idx[i]);
   102ac:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   102b0:	a807      	add	r0, sp, #28
   102b2:	f017 fe6f 	bl	27f94 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   102b6:	2300      	movs	r3, #0
   102b8:	9300      	str	r3, [sp, #0]
   102ba:	aa07      	add	r2, sp, #28
   102bc:	4639      	mov	r1, r7
   102be:	4630      	mov	r0, r6
   102c0:	f016 f839 	bl	26336 <bt_mesh_model_send>
   102c4:	2800      	cmp	r0, #0
   102c6:	d0d3      	beq.n	10270 <app_key_get+0x2c>
		BT_ERR("Unable to send AppKey List");
   102c8:	2145      	movs	r1, #69	; 0x45
   102ca:	4803      	ldr	r0, [pc, #12]	; (102d8 <app_key_get+0x94>)
   102cc:	f011 fdfd 	bl	21eca <printk>
   102d0:	e7ce      	b.n	10270 <app_key_get+0x2c>
   102d2:	bf00      	nop
   102d4:	0002d55e 	.word	0x0002d55e
   102d8:	0002d57e 	.word	0x0002d57e

000102dc <mod_sub_list_clear.isra.3.part.4>:
static size_t mod_sub_list_clear(struct bt_mesh_model *mod)
   102dc:	b538      	push	{r3, r4, r5, lr}
   102de:	4605      	mov	r5, r0
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
   102e0:	8800      	ldrh	r0, [r0, #0]
   102e2:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   102e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   102ea:	f04f 0400 	mov.w	r4, #0
   102ee:	d303      	bcc.n	102f8 <mod_sub_list_clear.isra.3.part.4+0x1c>
			if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   102f0:	b108      	cbz	r0, 102f6 <mod_sub_list_clear.isra.3.part.4+0x1a>
				mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   102f2:	802c      	strh	r4, [r5, #0]
		clear_count++;
   102f4:	2001      	movs	r0, #1
}
   102f6:	bd38      	pop	{r3, r4, r5, pc}
		label_uuid = bt_mesh_va_label_get(mod->groups[i]);
   102f8:	f7fd fe92 	bl	e020 <bt_mesh_va_label_get>
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   102fc:	802c      	strh	r4, [r5, #0]
		if (label_uuid) {
   102fe:	b118      	cbz	r0, 10308 <mod_sub_list_clear.isra.3.part.4+0x2c>
			bt_mesh_va_del(label_uuid, NULL);
   10300:	4621      	mov	r1, r4
   10302:	f7fd fe69 	bl	dfd8 <bt_mesh_va_del>
   10306:	e7f5      	b.n	102f4 <mod_sub_list_clear.isra.3.part.4+0x18>
			BT_ERR("Label UUID not found");
   10308:	2145      	movs	r1, #69	; 0x45
   1030a:	4802      	ldr	r0, [pc, #8]	; (10314 <mod_sub_list_clear.isra.3.part.4+0x38>)
   1030c:	f011 fddd 	bl	21eca <printk>
   10310:	e7f0      	b.n	102f4 <mod_sub_list_clear.isra.3.part.4+0x18>
   10312:	bf00      	nop
   10314:	0002d9c7 	.word	0x0002d9c7

00010318 <cfg_srv_init>:
	{ OP_HEARTBEAT_SUB_SET,        5,   heartbeat_sub_set },
	BT_MESH_MODEL_OP_END,
};

static int cfg_srv_init(struct bt_mesh_model *model)
{
   10318:	b508      	push	{r3, lr}
	if (!bt_mesh_model_in_primary(model)) {
   1031a:	7903      	ldrb	r3, [r0, #4]
   1031c:	b133      	cbz	r3, 1032c <cfg_srv_init+0x14>
		BT_ERR("Configuration Server only allowed in primary element");
   1031e:	4806      	ldr	r0, [pc, #24]	; (10338 <cfg_srv_init+0x20>)
   10320:	2145      	movs	r1, #69	; 0x45
   10322:	f011 fdd2 	bl	21eca <printk>
   10326:	f06f 0015 	mvn.w	r0, #21
	 * device-key is allowed to access this model.
	 */
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;

	return 0;
}
   1032a:	bd08      	pop	{r3, pc}
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;
   1032c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   10330:	8182      	strh	r2, [r0, #12]
	return 0;
   10332:	4618      	mov	r0, r3
   10334:	e7f9      	b.n	1032a <cfg_srv_init+0x12>
   10336:	bf00      	nop
   10338:	0002d5f8 	.word	0x0002d5f8

0001033c <send_krp_status>:
{
   1033c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1033e:	b089      	sub	sp, #36	; 0x24
   10340:	460d      	mov	r5, r1
   10342:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   10344:	a902      	add	r1, sp, #8
   10346:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   1034a:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   1034e:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   10350:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   10352:	a805      	add	r0, sp, #20
   10354:	f248 0117 	movw	r1, #32791	; 0x8017
{
   10358:	4617      	mov	r7, r2
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   1035a:	f015 ffc3 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1035e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   10362:	a805      	add	r0, sp, #20
   10364:	f017 fe0f 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   10368:	4639      	mov	r1, r7
   1036a:	a805      	add	r0, sp, #20
   1036c:	f017 fe12 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
   10370:	4631      	mov	r1, r6
   10372:	a805      	add	r0, sp, #20
   10374:	f017 fe07 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10378:	2300      	movs	r3, #0
   1037a:	9300      	str	r3, [sp, #0]
   1037c:	aa05      	add	r2, sp, #20
   1037e:	4629      	mov	r1, r5
   10380:	4620      	mov	r0, r4
   10382:	f015 ffd8 	bl	26336 <bt_mesh_model_send>
   10386:	b118      	cbz	r0, 10390 <send_krp_status+0x54>
		BT_ERR("Unable to send Key Refresh State Status");
   10388:	2145      	movs	r1, #69	; 0x45
   1038a:	4802      	ldr	r0, [pc, #8]	; (10394 <send_krp_status+0x58>)
   1038c:	f011 fd9d 	bl	21eca <printk>
}
   10390:	b009      	add	sp, #36	; 0x24
   10392:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10394:	0002dbb3 	.word	0x0002dbb3

00010398 <krp_set>:
{
   10398:	b5f0      	push	{r4, r5, r6, r7, lr}
   1039a:	4606      	mov	r6, r0
   1039c:	b085      	sub	sp, #20
	idx = net_buf_simple_pull_le16(buf);
   1039e:	4610      	mov	r0, r2
{
   103a0:	4615      	mov	r5, r2
   103a2:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
   103a4:	f017 fdbb 	bl	27f1e <net_buf_simple_pull_le16>
   103a8:	4604      	mov	r4, r0
	phase = net_buf_simple_pull_u8(buf);
   103aa:	4628      	mov	r0, r5
   103ac:	f017 fdaf 	bl	27f0e <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
   103b0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
   103b4:	f88d 000f 	strb.w	r0, [sp, #15]
	if (idx > 0xfff) {
   103b8:	d306      	bcc.n	103c8 <krp_set+0x30>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   103ba:	480d      	ldr	r0, [pc, #52]	; (103f0 <krp_set+0x58>)
   103bc:	4622      	mov	r2, r4
   103be:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid kr phase transition 0x%02x", phase);
   103c0:	f011 fd83 	bl	21eca <printk>
}
   103c4:	b005      	add	sp, #20
   103c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = bt_mesh_subnet_kr_phase_set(idx, &phase);
   103c8:	f10d 010f 	add.w	r1, sp, #15
   103cc:	4620      	mov	r0, r4
   103ce:	f7fc fc39 	bl	cc44 <bt_mesh_subnet_kr_phase_set>
	if (status == STATUS_CANNOT_UPDATE) {
   103d2:	280b      	cmp	r0, #11
   103d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   103d8:	d103      	bne.n	103e2 <krp_set+0x4a>
		BT_ERR("Invalid kr phase transition 0x%02x", phase);
   103da:	461a      	mov	r2, r3
   103dc:	2145      	movs	r1, #69	; 0x45
   103de:	4805      	ldr	r0, [pc, #20]	; (103f4 <krp_set+0x5c>)
   103e0:	e7ee      	b.n	103c0 <krp_set+0x28>
	send_krp_status(model, ctx, idx, phase, status);
   103e2:	9000      	str	r0, [sp, #0]
   103e4:	4622      	mov	r2, r4
   103e6:	4639      	mov	r1, r7
   103e8:	4630      	mov	r0, r6
   103ea:	f7ff ffa7 	bl	1033c <send_krp_status>
   103ee:	e7e9      	b.n	103c4 <krp_set+0x2c>
   103f0:	0002d55e 	.word	0x0002d55e
   103f4:	0002d7de 	.word	0x0002d7de

000103f8 <krp_get>:
{
   103f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   103fa:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   103fc:	4610      	mov	r0, r2
{
   103fe:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   10400:	f017 fd8d 	bl	27f1e <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   10404:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   10408:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1040a:	d306      	bcc.n	1041a <krp_get+0x22>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1040c:	4602      	mov	r2, r0
   1040e:	2145      	movs	r1, #69	; 0x45
   10410:	4808      	ldr	r0, [pc, #32]	; (10434 <krp_get+0x3c>)
   10412:	f011 fd5a 	bl	21eca <printk>
}
   10416:	b004      	add	sp, #16
   10418:	bd70      	pop	{r4, r5, r6, pc}
	status = bt_mesh_subnet_kr_phase_get(idx, &kr_phase);
   1041a:	f10d 010f 	add.w	r1, sp, #15
   1041e:	f015 fb9a 	bl	25b56 <bt_mesh_subnet_kr_phase_get>
	send_krp_status(model, ctx, idx, kr_phase, status);
   10422:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10426:	9000      	str	r0, [sp, #0]
   10428:	4622      	mov	r2, r4
   1042a:	4631      	mov	r1, r6
   1042c:	4628      	mov	r0, r5
   1042e:	f7ff ff85 	bl	1033c <send_krp_status>
   10432:	e7f0      	b.n	10416 <krp_get+0x1e>
   10434:	0002d55e 	.word	0x0002d55e

00010438 <send_node_id_status>:
{
   10438:	b5f0      	push	{r4, r5, r6, r7, lr}
   1043a:	b089      	sub	sp, #36	; 0x24
   1043c:	460d      	mov	r5, r1
   1043e:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   10440:	a902      	add	r1, sp, #8
   10442:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
{
   10446:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   10448:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   1044c:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   1044e:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   10450:	a805      	add	r0, sp, #20
   10452:	f248 0148 	movw	r1, #32840	; 0x8048
   10456:	f015 ff45 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1045a:	4639      	mov	r1, r7
   1045c:	a805      	add	r0, sp, #20
   1045e:	f017 fd92 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, net_idx);
   10462:	4631      	mov	r1, r6
   10464:	a805      	add	r0, sp, #20
   10466:	f017 fd95 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, node_id);
   1046a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1046e:	a805      	add	r0, sp, #20
   10470:	f017 fd89 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10474:	2300      	movs	r3, #0
   10476:	9300      	str	r3, [sp, #0]
   10478:	aa05      	add	r2, sp, #20
   1047a:	4629      	mov	r1, r5
   1047c:	4620      	mov	r0, r4
   1047e:	f015 ff5a 	bl	26336 <bt_mesh_model_send>
   10482:	b118      	cbz	r0, 1048c <send_node_id_status+0x54>
		BT_ERR("Unable to send Node Identity Status");
   10484:	2145      	movs	r1, #69	; 0x45
   10486:	4802      	ldr	r0, [pc, #8]	; (10490 <send_node_id_status+0x58>)
   10488:	f011 fd1f 	bl	21eca <printk>
}
   1048c:	b009      	add	sp, #36	; 0x24
   1048e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10490:	0002dc5d 	.word	0x0002dc5d

00010494 <node_identity_set>:
{
   10494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10496:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   10498:	4610      	mov	r0, r2
{
   1049a:	460f      	mov	r7, r1
   1049c:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   1049e:	f017 fd3e 	bl	27f1e <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   104a2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   104a6:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   104a8:	d307      	bcc.n	104ba <node_identity_set+0x26>
		BT_WARN("Invalid NetKeyIndex 0x%04x", idx);
   104aa:	4602      	mov	r2, r0
   104ac:	4814      	ldr	r0, [pc, #80]	; (10500 <node_identity_set+0x6c>)
   104ae:	2157      	movs	r1, #87	; 0x57
}
   104b0:	b003      	add	sp, #12
   104b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   104b6:	f011 bd08 	b.w	21eca <printk>
	node_id = net_buf_simple_pull_u8(buf);
   104ba:	4628      	mov	r0, r5
   104bc:	f017 fd27 	bl	27f0e <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   104c0:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   104c2:	4605      	mov	r5, r0
	if (node_id != 0x00 && node_id != 0x01) {
   104c4:	d903      	bls.n	104ce <node_identity_set+0x3a>
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   104c6:	4602      	mov	r2, r0
   104c8:	2157      	movs	r1, #87	; 0x57
   104ca:	480e      	ldr	r0, [pc, #56]	; (10504 <node_identity_set+0x70>)
   104cc:	e7f0      	b.n	104b0 <node_identity_set+0x1c>
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   104ce:	4601      	mov	r1, r0
   104d0:	4620      	mov	r0, r4
   104d2:	f015 fb4b 	bl	25b6c <bt_mesh_subnet_node_id_set>
	if (status == STATUS_INVALID_NETKEY) {
   104d6:	2804      	cmp	r0, #4
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   104d8:	4602      	mov	r2, r0
	if (status == STATUS_INVALID_NETKEY) {
   104da:	d103      	bne.n	104e4 <node_identity_set+0x50>
		send_node_id_status(model, ctx, status, idx,
   104dc:	2300      	movs	r3, #0
   104de:	9300      	str	r3, [sp, #0]
	send_node_id_status(model, ctx, status, idx, node_id);
   104e0:	4623      	mov	r3, r4
   104e2:	e005      	b.n	104f0 <node_identity_set+0x5c>
	if (status == STATUS_FEAT_NOT_SUPP) {
   104e4:	280a      	cmp	r0, #10
   104e6:	d109      	bne.n	104fc <node_identity_set+0x68>
		send_node_id_status(model, ctx, STATUS_SUCCESS, idx,
   104e8:	2302      	movs	r3, #2
   104ea:	9300      	str	r3, [sp, #0]
   104ec:	2200      	movs	r2, #0
   104ee:	4623      	mov	r3, r4
	send_node_id_status(model, ctx, status, idx, node_id);
   104f0:	4639      	mov	r1, r7
   104f2:	4630      	mov	r0, r6
   104f4:	f7ff ffa0 	bl	10438 <send_node_id_status>
}
   104f8:	b003      	add	sp, #12
   104fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	send_node_id_status(model, ctx, status, idx, node_id);
   104fc:	9500      	str	r5, [sp, #0]
   104fe:	e7ef      	b.n	104e0 <node_identity_set+0x4c>
   10500:	0002d55e 	.word	0x0002d55e
   10504:	0002da7c 	.word	0x0002da7c

00010508 <node_identity_get>:
{
   10508:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1050a:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   1050c:	4610      	mov	r0, r2
{
   1050e:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   10510:	f017 fd05 	bl	27f1e <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   10514:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   10518:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1051a:	d306      	bcc.n	1052a <node_identity_get+0x22>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1051c:	4602      	mov	r2, r0
   1051e:	2145      	movs	r1, #69	; 0x45
   10520:	4809      	ldr	r0, [pc, #36]	; (10548 <node_identity_get+0x40>)
   10522:	f011 fcd2 	bl	21eca <printk>
}
   10526:	b004      	add	sp, #16
   10528:	bd70      	pop	{r4, r5, r6, pc}
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   1052a:	f10d 010f 	add.w	r1, sp, #15
   1052e:	f015 fb31 	bl	25b94 <bt_mesh_subnet_node_id_get>
	send_node_id_status(model, ctx, status, idx, node_id);
   10532:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10536:	9300      	str	r3, [sp, #0]
   10538:	4602      	mov	r2, r0
   1053a:	4623      	mov	r3, r4
   1053c:	4631      	mov	r1, r6
   1053e:	4628      	mov	r0, r5
   10540:	f7ff ff7a 	bl	10438 <send_node_id_status>
   10544:	e7ef      	b.n	10526 <node_identity_get+0x1e>
   10546:	bf00      	nop
   10548:	0002d55e 	.word	0x0002d55e

0001054c <send_net_key_status>:
{
   1054c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1054e:	b089      	sub	sp, #36	; 0x24
   10550:	460d      	mov	r5, r1
   10552:	461f      	mov	r7, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   10554:	a902      	add	r1, sp, #8
   10556:	f44f 2310 	mov.w	r3, #589824	; 0x90000
   1055a:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   1055e:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   10560:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   10562:	a805      	add	r0, sp, #20
   10564:	f248 0144 	movw	r1, #32836	; 0x8044
{
   10568:	4616      	mov	r6, r2
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   1056a:	f015 febb 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1056e:	4639      	mov	r1, r7
   10570:	a805      	add	r0, sp, #20
   10572:	f017 fd08 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   10576:	4631      	mov	r1, r6
   10578:	a805      	add	r0, sp, #20
   1057a:	f017 fd0b 	bl	27f94 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1057e:	2300      	movs	r3, #0
   10580:	9300      	str	r3, [sp, #0]
   10582:	aa05      	add	r2, sp, #20
   10584:	4629      	mov	r1, r5
   10586:	4620      	mov	r0, r4
   10588:	f015 fed5 	bl	26336 <bt_mesh_model_send>
   1058c:	b118      	cbz	r0, 10596 <send_net_key_status+0x4a>
		BT_ERR("Unable to send NetKey Status");
   1058e:	2145      	movs	r1, #69	; 0x45
   10590:	4802      	ldr	r0, [pc, #8]	; (1059c <send_net_key_status+0x50>)
   10592:	f011 fc9a 	bl	21eca <printk>
}
   10596:	b009      	add	sp, #36	; 0x24
   10598:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1059a:	bf00      	nop
   1059c:	0002dc3b 	.word	0x0002dc3b

000105a0 <net_key_del>:
{
   105a0:	b570      	push	{r4, r5, r6, lr}
   105a2:	4606      	mov	r6, r0
	del_idx = net_buf_simple_pull_le16(buf);
   105a4:	4610      	mov	r0, r2
{
   105a6:	460d      	mov	r5, r1
	del_idx = net_buf_simple_pull_le16(buf);
   105a8:	f017 fcb9 	bl	27f1e <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   105ac:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   105b0:	4604      	mov	r4, r0
	if (del_idx > 0xfff) {
   105b2:	d306      	bcc.n	105c2 <net_key_del+0x22>
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   105b4:	4602      	mov	r2, r0
   105b6:	2145      	movs	r1, #69	; 0x45
   105b8:	4809      	ldr	r0, [pc, #36]	; (105e0 <net_key_del+0x40>)
}
   105ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   105be:	f011 bc84 	b.w	21eca <printk>
	if (ctx->net_idx == del_idx) {
   105c2:	882a      	ldrh	r2, [r5, #0]
   105c4:	4282      	cmp	r2, r0
   105c6:	d106      	bne.n	105d6 <net_key_del+0x36>
		send_net_key_status(model, ctx, del_idx,
   105c8:	230c      	movs	r3, #12
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   105ca:	4629      	mov	r1, r5
   105cc:	4630      	mov	r0, r6
}
   105ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   105d2:	f7ff bfbb 	b.w	1054c <send_net_key_status>
	bt_mesh_subnet_del(del_idx);
   105d6:	f015 fa8c 	bl	25af2 <bt_mesh_subnet_del>
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   105da:	2300      	movs	r3, #0
   105dc:	4622      	mov	r2, r4
   105de:	e7f4      	b.n	105ca <net_key_del+0x2a>
   105e0:	0002d55e 	.word	0x0002d55e

000105e4 <net_key_update>:
{
   105e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105e8:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   105ea:	4610      	mov	r0, r2
{
   105ec:	460f      	mov	r7, r1
   105ee:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   105f0:	f017 fc95 	bl	27f1e <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   105f4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   105f8:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   105fa:	d306      	bcc.n	1060a <net_key_update+0x26>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   105fc:	4602      	mov	r2, r0
   105fe:	2145      	movs	r1, #69	; 0x45
   10600:	4807      	ldr	r0, [pc, #28]	; (10620 <net_key_update+0x3c>)
}
   10602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10606:	f011 bc60 	b.w	21eca <printk>
	status = bt_mesh_subnet_update(idx, buf->data);
   1060a:	6829      	ldr	r1, [r5, #0]
   1060c:	f015 fa42 	bl	25a94 <bt_mesh_subnet_update>
	send_net_key_status(model, ctx, idx, status);
   10610:	4622      	mov	r2, r4
   10612:	4603      	mov	r3, r0
   10614:	4639      	mov	r1, r7
   10616:	4630      	mov	r0, r6
}
   10618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, status);
   1061c:	f7ff bf96 	b.w	1054c <send_net_key_status>
   10620:	0002d55e 	.word	0x0002d55e

00010624 <net_key_add>:
{
   10624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10628:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   1062a:	4610      	mov	r0, r2
{
   1062c:	460f      	mov	r7, r1
   1062e:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   10630:	f017 fc75 	bl	27f1e <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   10634:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   10638:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1063a:	d306      	bcc.n	1064a <net_key_add+0x26>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1063c:	4602      	mov	r2, r0
   1063e:	2145      	movs	r1, #69	; 0x45
   10640:	4807      	ldr	r0, [pc, #28]	; (10660 <net_key_add+0x3c>)
}
   10642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10646:	f011 bc40 	b.w	21eca <printk>
	status = bt_mesh_subnet_add(idx, buf->data);
   1064a:	6829      	ldr	r1, [r5, #0]
   1064c:	f7fc face 	bl	cbec <bt_mesh_subnet_add>
	send_net_key_status(model, ctx, idx, status);
   10650:	4622      	mov	r2, r4
   10652:	4603      	mov	r3, r0
   10654:	4639      	mov	r1, r7
   10656:	4630      	mov	r0, r6
}
   10658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, status);
   1065c:	f7ff bf76 	b.w	1054c <send_net_key_status>
   10660:	0002d55e 	.word	0x0002d55e

00010664 <send_app_key_status>:
{
   10664:	b5f0      	push	{r4, r5, r6, r7, lr}
   10666:	b089      	sub	sp, #36	; 0x24
   10668:	460d      	mov	r5, r1
   1066a:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   1066c:	a902      	add	r1, sp, #8
   1066e:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   10672:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   10676:	4617      	mov	r7, r2
   10678:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   1067a:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   1067c:	a805      	add	r0, sp, #20
   1067e:	f248 0103 	movw	r1, #32771	; 0x8003
   10682:	f015 fe2f 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   10686:	4639      	mov	r1, r7
   10688:	a805      	add	r0, sp, #20
   1068a:	f017 fc7c 	bl	27f86 <net_buf_simple_add_u8>
	key_idx_pack(&msg, net_idx, app_idx);
   1068e:	4632      	mov	r2, r6
   10690:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   10694:	a805      	add	r0, sp, #20
   10696:	f015 feaa 	bl	263ee <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1069a:	2300      	movs	r3, #0
   1069c:	9300      	str	r3, [sp, #0]
   1069e:	aa05      	add	r2, sp, #20
   106a0:	4629      	mov	r1, r5
   106a2:	4620      	mov	r0, r4
   106a4:	f015 fe47 	bl	26336 <bt_mesh_model_send>
   106a8:	b118      	cbz	r0, 106b2 <send_app_key_status+0x4e>
		BT_ERR("Unable to send App Key Status response");
   106aa:	2145      	movs	r1, #69	; 0x45
   106ac:	4802      	ldr	r0, [pc, #8]	; (106b8 <send_app_key_status+0x54>)
   106ae:	f011 fc0c 	bl	21eca <printk>
}
   106b2:	b009      	add	sp, #36	; 0x24
   106b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106b6:	bf00      	nop
   106b8:	0002db3f 	.word	0x0002db3f

000106bc <send_friend_status>:
{
   106bc:	b530      	push	{r4, r5, lr}
   106be:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   106c0:	ab03      	add	r3, sp, #12
   106c2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   106c6:	4604      	mov	r4, r0
   106c8:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   106ca:	a805      	add	r0, sp, #20
   106cc:	f248 0111 	movw	r1, #32785	; 0x8011
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   106d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   106d4:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   106d6:	f015 fe05 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_friend_get());
   106da:	f015 f903 	bl	258e4 <bt_mesh_friend_get>
   106de:	4601      	mov	r1, r0
   106e0:	a805      	add	r0, sp, #20
   106e2:	f017 fc50 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   106e6:	2300      	movs	r3, #0
   106e8:	9300      	str	r3, [sp, #0]
   106ea:	aa05      	add	r2, sp, #20
   106ec:	4629      	mov	r1, r5
   106ee:	4620      	mov	r0, r4
   106f0:	f015 fe21 	bl	26336 <bt_mesh_model_send>
   106f4:	b118      	cbz	r0, 106fe <send_friend_status+0x42>
		BT_ERR("Unable to send Friend Status");
   106f6:	2145      	movs	r1, #69	; 0x45
   106f8:	4802      	ldr	r0, [pc, #8]	; (10704 <send_friend_status+0x48>)
   106fa:	f011 fbe6 	bl	21eca <printk>
}
   106fe:	b009      	add	sp, #36	; 0x24
   10700:	bd30      	pop	{r4, r5, pc}
   10702:	bf00      	nop
   10704:	0002db6b 	.word	0x0002db6b

00010708 <friend_set>:
{
   10708:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1070a:	6813      	ldr	r3, [r2, #0]
   1070c:	781a      	ldrb	r2, [r3, #0]
   1070e:	2a01      	cmp	r2, #1
{
   10710:	4604      	mov	r4, r0
   10712:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   10714:	d905      	bls.n	10722 <friend_set+0x1a>
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   10716:	2157      	movs	r1, #87	; 0x57
   10718:	4806      	ldr	r0, [pc, #24]	; (10734 <friend_set+0x2c>)
}
   1071a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   1071e:	f011 bbd4 	b.w	21eca <printk>
	(void)bt_mesh_friend_set(buf->data[0]);
   10722:	4610      	mov	r0, r2
   10724:	f015 f8c7 	bl	258b6 <bt_mesh_friend_set>
	send_friend_status(model, ctx);
   10728:	4629      	mov	r1, r5
   1072a:	4620      	mov	r0, r4
}
   1072c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_friend_status(model, ctx);
   10730:	f7ff bfc4 	b.w	106bc <send_friend_status>
   10734:	0002d70a 	.word	0x0002d70a

00010738 <mod_app_get>:
{
   10738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1073c:	4614      	mov	r4, r2
   1073e:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(msg,
   10740:	ab07      	add	r3, sp, #28
   10742:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   10746:	4606      	mov	r6, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   10748:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg,
   1074a:	9304      	str	r3, [sp, #16]
   1074c:	e9cd 2305 	strd	r2, r3, [sp, #20]
{
   10750:	460f      	mov	r7, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   10752:	f017 fbe4 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10756:	b203      	sxth	r3, r0
   10758:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1075a:	4681      	mov	r9, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1075c:	dc06      	bgt.n	1076c <mod_app_get+0x34>
		BT_WARN("Prohibited element address");
   1075e:	4828      	ldr	r0, [pc, #160]	; (10800 <mod_app_get+0xc8>)
   10760:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model Application List message");
   10762:	f011 fbb2 	bl	21eca <printk>
}
   10766:	b00d      	add	sp, #52	; 0x34
   10768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod_id = buf->data;
   1076c:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10770:	f7ff f904 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   10774:	4605      	mov	r5, r0
   10776:	bb58      	cbnz	r0, 107d0 <mod_app_get+0x98>
		vnd = (buf->len == 4U);
   10778:	88a3      	ldrh	r3, [r4, #4]
   1077a:	1f1a      	subs	r2, r3, #4
   1077c:	4253      	negs	r3, r2
   1077e:	4153      	adcs	r3, r2
   10780:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
   10784:	2401      	movs	r4, #1
	if (vnd) {
   10786:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1078a:	b35b      	cbz	r3, 107e4 <mod_app_get+0xac>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
   1078c:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   10790:	a804      	add	r0, sp, #16
   10792:	f015 fda7 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   10796:	4621      	mov	r1, r4
   10798:	a804      	add	r0, sp, #16
   1079a:	f017 fbf4 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   1079e:	4649      	mov	r1, r9
   107a0:	a804      	add	r0, sp, #16
   107a2:	f017 fbf7 	bl	27f94 <net_buf_simple_add_le16>
	if (vnd) {
   107a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   107aa:	b1f3      	cbz	r3, 107ea <mod_app_get+0xb2>
		net_buf_simple_add_mem(&msg, mod_id, 4);
   107ac:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
   107ae:	4641      	mov	r1, r8
   107b0:	a804      	add	r0, sp, #16
   107b2:	f017 fbdc 	bl	27f6e <net_buf_simple_add_mem>
	if (mod) {
   107b6:	b9d5      	cbnz	r5, 107ee <mod_app_get+0xb6>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   107b8:	2300      	movs	r3, #0
   107ba:	9300      	str	r3, [sp, #0]
   107bc:	aa04      	add	r2, sp, #16
   107be:	4639      	mov	r1, r7
   107c0:	4630      	mov	r0, r6
   107c2:	f015 fdb8 	bl	26336 <bt_mesh_model_send>
   107c6:	2800      	cmp	r0, #0
   107c8:	d0cd      	beq.n	10766 <mod_app_get+0x2e>
		BT_ERR("Unable to send Model Application List message");
   107ca:	2145      	movs	r1, #69	; 0x45
   107cc:	480d      	ldr	r0, [pc, #52]	; (10804 <mod_app_get+0xcc>)
   107ce:	e7c8      	b.n	10762 <mod_app_get+0x2a>
	mod = get_model(elem, buf, &vnd);
   107d0:	4621      	mov	r1, r4
   107d2:	f10d 020f 	add.w	r2, sp, #15
   107d6:	f015 feaa 	bl	2652e <get_model>
		status = STATUS_INVALID_MODEL;
   107da:	1e05      	subs	r5, r0, #0
   107dc:	bf14      	ite	ne
   107de:	2400      	movne	r4, #0
   107e0:	2402      	moveq	r4, #2
   107e2:	e7d0      	b.n	10786 <mod_app_get+0x4e>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   107e4:	f248 014c 	movw	r1, #32844	; 0x804c
   107e8:	e7d2      	b.n	10790 <mod_app_get+0x58>
		net_buf_simple_add_mem(&msg, mod_id, 2);
   107ea:	2202      	movs	r2, #2
   107ec:	e7df      	b.n	107ae <mod_app_get+0x76>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   107ee:	89a9      	ldrh	r1, [r5, #12]
   107f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   107f4:	4299      	cmp	r1, r3
   107f6:	d0df      	beq.n	107b8 <mod_app_get+0x80>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   107f8:	a804      	add	r0, sp, #16
   107fa:	f017 fbcb 	bl	27f94 <net_buf_simple_add_le16>
   107fe:	e7db      	b.n	107b8 <mod_app_get+0x80>
   10800:	0002d974 	.word	0x0002d974
   10804:	0002d8c2 	.word	0x0002d8c2

00010808 <mod_sub_del_all>:
{
   10808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1080c:	4606      	mov	r6, r0
   1080e:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   10810:	4610      	mov	r0, r2
{
   10812:	460f      	mov	r7, r1
   10814:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10816:	f017 fb82 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1081a:	b203      	sxth	r3, r0
   1081c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1081e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10820:	dc06      	bgt.n	10830 <mod_sub_del_all+0x28>
		BT_WARN("Prohibited element address");
   10822:	2157      	movs	r1, #87	; 0x57
   10824:	4818      	ldr	r0, [pc, #96]	; (10888 <mod_sub_del_all+0x80>)
   10826:	f011 fb50 	bl	21eca <printk>
}
   1082a:	b006      	add	sp, #24
   1082c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod_id = buf->data;
   10830:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10834:	f7ff f8a2 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   10838:	b990      	cbnz	r0, 10860 <mod_sub_del_all+0x58>
		vnd = (buf->len == 4U);
   1083a:	88a3      	ldrh	r3, [r4, #4]
   1083c:	1f1a      	subs	r2, r3, #4
   1083e:	4253      	negs	r3, r2
   10840:	4153      	adcs	r3, r2
   10842:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   10846:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr,
   10848:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1084c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   10850:	2300      	movs	r3, #0
   10852:	9300      	str	r3, [sp, #0]
   10854:	4639      	mov	r1, r7
   10856:	462b      	mov	r3, r5
   10858:	4630      	mov	r0, r6
   1085a:	f7ff fb3b 	bl	fed4 <send_mod_sub_status>
   1085e:	e7e4      	b.n	1082a <mod_sub_del_all+0x22>
	mod = get_model(elem, buf, &vnd);
   10860:	4621      	mov	r1, r4
   10862:	f10d 0217 	add.w	r2, sp, #23
   10866:	f015 fe62 	bl	2652e <get_model>
	if (!mod) {
   1086a:	4604      	mov	r4, r0
   1086c:	b150      	cbz	r0, 10884 <mod_sub_del_all+0x7c>
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_clear_visitor,
   1086e:	f015 fda5 	bl	263bc <bt_mesh_model_root>
   10872:	2200      	movs	r2, #0
   10874:	4905      	ldr	r1, [pc, #20]	; (1088c <mod_sub_del_all+0x84>)
   10876:	f015 fda2 	bl	263be <bt_mesh_model_tree_walk>
		bt_mesh_model_sub_store(mod);
   1087a:	4620      	mov	r0, r4
   1087c:	f015 fda9 	bl	263d2 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   10880:	2200      	movs	r2, #0
   10882:	e7e1      	b.n	10848 <mod_sub_del_all+0x40>
		status = STATUS_INVALID_MODEL;
   10884:	2202      	movs	r2, #2
   10886:	e7df      	b.n	10848 <mod_sub_del_all+0x40>
   10888:	0002d974 	.word	0x0002d974
   1088c:	0002644f 	.word	0x0002644f

00010890 <mod_sub_overwrite>:
{
   10890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10894:	4607      	mov	r7, r0
   10896:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   10898:	4610      	mov	r0, r2
{
   1089a:	4688      	mov	r8, r1
   1089c:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1089e:	f017 fb3e 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   108a2:	b203      	sxth	r3, r0
   108a4:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   108a6:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   108a8:	dc06      	bgt.n	108b8 <mod_sub_overwrite+0x28>
		BT_WARN("Prohibited element address");
   108aa:	2157      	movs	r1, #87	; 0x57
   108ac:	481e      	ldr	r0, [pc, #120]	; (10928 <mod_sub_overwrite+0x98>)
   108ae:	f011 fb0c 	bl	21eca <printk>
}
   108b2:	b007      	add	sp, #28
   108b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   108b8:	4620      	mov	r0, r4
   108ba:	f017 fb30 	bl	27f1e <net_buf_simple_pull_le16>
   108be:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   108c0:	4628      	mov	r0, r5
	mod_id = buf->data;
   108c2:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   108c6:	f7ff f859 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   108ca:	b938      	cbnz	r0, 108dc <mod_sub_overwrite+0x4c>
		vnd = (buf->len == 4U);
   108cc:	88a3      	ldrh	r3, [r4, #4]
   108ce:	1f1a      	subs	r2, r3, #4
   108d0:	4253      	negs	r3, r2
   108d2:	4153      	adcs	r3, r2
   108d4:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   108d8:	2201      	movs	r2, #1
   108da:	e017      	b.n	1090c <mod_sub_overwrite+0x7c>
	mod = get_model(elem, buf, &vnd);
   108dc:	4621      	mov	r1, r4
   108de:	f10d 0217 	add.w	r2, sp, #23
   108e2:	f015 fe24 	bl	2652e <get_model>
	if (!mod) {
   108e6:	4604      	mov	r4, r0
   108e8:	b1d8      	cbz	r0, 10922 <mod_sub_overwrite+0x92>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   108ea:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   108ee:	b29b      	uxth	r3, r3
   108f0:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   108f4:	d8f0      	bhi.n	108d8 <mod_sub_overwrite+0x48>
		bt_mesh_model_tree_walk(bt_mesh_model_root(mod),
   108f6:	f015 fd61 	bl	263bc <bt_mesh_model_root>
   108fa:	2200      	movs	r2, #0
   108fc:	490b      	ldr	r1, [pc, #44]	; (1092c <mod_sub_overwrite+0x9c>)
   108fe:	f015 fd5e 	bl	263be <bt_mesh_model_tree_walk>
		mod->groups[0] = sub_addr;
   10902:	81e6      	strh	r6, [r4, #14]
			bt_mesh_model_sub_store(mod);
   10904:	4620      	mov	r0, r4
   10906:	f015 fd64 	bl	263d2 <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   1090a:	2200      	movs	r2, #0
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1090c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10910:	9600      	str	r6, [sp, #0]
   10912:	e9cd 9301 	strd	r9, r3, [sp, #4]
   10916:	4641      	mov	r1, r8
   10918:	462b      	mov	r3, r5
   1091a:	4638      	mov	r0, r7
   1091c:	f7ff fada 	bl	fed4 <send_mod_sub_status>
   10920:	e7c7      	b.n	108b2 <mod_sub_overwrite+0x22>
		status = STATUS_INVALID_MODEL;
   10922:	2202      	movs	r2, #2
   10924:	e7f2      	b.n	1090c <mod_sub_overwrite+0x7c>
   10926:	bf00      	nop
   10928:	0002d974 	.word	0x0002d974
   1092c:	0002644f 	.word	0x0002644f

00010930 <mod_sub_va_overwrite>:
{
   10930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10934:	b086      	sub	sp, #24
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   10936:	2300      	movs	r3, #0
{
   10938:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1093a:	4610      	mov	r0, r2
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1093c:	f8ad 3016 	strh.w	r3, [sp, #22]
{
   10940:	4688      	mov	r8, r1
   10942:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10944:	f017 faeb 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10948:	b203      	sxth	r3, r0
   1094a:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1094c:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1094e:	dc06      	bgt.n	1095e <mod_sub_va_overwrite+0x2e>
		BT_WARN("Prohibited element address");
   10950:	2157      	movs	r1, #87	; 0x57
   10952:	4822      	ldr	r0, [pc, #136]	; (109dc <mod_sub_va_overwrite+0xac>)
   10954:	f011 fab9 	bl	21eca <printk>
}
   10958:	b006      	add	sp, #24
   1095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   1095e:	2110      	movs	r1, #16
   10960:	4620      	mov	r0, r4
   10962:	f00c f8b3 	bl	1cacc <net_buf_simple_pull_mem>
   10966:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
   10968:	4630      	mov	r0, r6
	mod_id = buf->data;
   1096a:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1096e:	f7ff f805 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   10972:	b9a0      	cbnz	r0, 1099e <mod_sub_va_overwrite+0x6e>
		vnd = (buf->len == 4U);
   10974:	88a3      	ldrh	r3, [r4, #4]
   10976:	1f1a      	subs	r2, r3, #4
   10978:	4253      	negs	r3, r2
   1097a:	4153      	adcs	r3, r2
   1097c:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   10980:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10982:	f89d 3015 	ldrb.w	r3, [sp, #21]
   10986:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1098a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1098e:	9300      	str	r3, [sp, #0]
   10990:	4622      	mov	r2, r4
   10992:	4633      	mov	r3, r6
   10994:	4641      	mov	r1, r8
   10996:	4638      	mov	r0, r7
   10998:	f7ff fa9c 	bl	fed4 <send_mod_sub_status>
   1099c:	e7dc      	b.n	10958 <mod_sub_va_overwrite+0x28>
	mod = get_model(elem, buf, &vnd);
   1099e:	f10d 0215 	add.w	r2, sp, #21
   109a2:	4621      	mov	r1, r4
   109a4:	f015 fdc3 	bl	2652e <get_model>
	if (!mod) {
   109a8:	4605      	mov	r5, r0
   109aa:	b1a8      	cbz	r0, 109d8 <mod_sub_va_overwrite+0xa8>
		status = bt_mesh_va_add(label_uuid, &sub_addr);
   109ac:	f10d 0116 	add.w	r1, sp, #22
   109b0:	4650      	mov	r0, sl
   109b2:	f7fd fad7 	bl	df64 <bt_mesh_va_add>
		if (status == STATUS_SUCCESS) {
   109b6:	4604      	mov	r4, r0
   109b8:	2800      	cmp	r0, #0
   109ba:	d1e2      	bne.n	10982 <mod_sub_va_overwrite+0x52>
			bt_mesh_model_tree_walk(bt_mesh_model_root(mod),
   109bc:	4628      	mov	r0, r5
   109be:	f015 fcfd 	bl	263bc <bt_mesh_model_root>
   109c2:	4622      	mov	r2, r4
   109c4:	4906      	ldr	r1, [pc, #24]	; (109e0 <mod_sub_va_overwrite+0xb0>)
   109c6:	f015 fcfa 	bl	263be <bt_mesh_model_tree_walk>
			mod->groups[0] = sub_addr;
   109ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   109ce:	81eb      	strh	r3, [r5, #14]
				bt_mesh_model_sub_store(mod);
   109d0:	4628      	mov	r0, r5
   109d2:	f015 fcfe 	bl	263d2 <bt_mesh_model_sub_store>
   109d6:	e7d4      	b.n	10982 <mod_sub_va_overwrite+0x52>
		status = STATUS_INVALID_MODEL;
   109d8:	2402      	movs	r4, #2
   109da:	e7d2      	b.n	10982 <mod_sub_va_overwrite+0x52>
   109dc:	0002d974 	.word	0x0002d974
   109e0:	0002644f 	.word	0x0002644f

000109e4 <mod_sub_va_del>:
{
   109e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   109e8:	4606      	mov	r6, r0
   109ea:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   109ec:	4610      	mov	r0, r2
{
   109ee:	460f      	mov	r7, r1
   109f0:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   109f2:	f017 fa94 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   109f6:	b203      	sxth	r3, r0
   109f8:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   109fa:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   109fc:	dc06      	bgt.n	10a0c <mod_sub_va_del+0x28>
		BT_WARN("Prohibited element address");
   109fe:	2157      	movs	r1, #87	; 0x57
   10a00:	4824      	ldr	r0, [pc, #144]	; (10a94 <mod_sub_va_del+0xb0>)
   10a02:	f011 fa62 	bl	21eca <printk>
}
   10a06:	b007      	add	sp, #28
   10a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   10a0c:	2110      	movs	r1, #16
   10a0e:	4620      	mov	r0, r4
   10a10:	f00c f85c 	bl	1cacc <net_buf_simple_pull_mem>
   10a14:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
   10a16:	4628      	mov	r0, r5
	mod_id = buf->data;
   10a18:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10a1c:	f7fe ffae 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   10a20:	b9b0      	cbnz	r0, 10a50 <mod_sub_va_del+0x6c>
		vnd = (buf->len == 4U);
   10a22:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   10a24:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   10a26:	1f19      	subs	r1, r3, #4
   10a28:	424b      	negs	r3, r1
   10a2a:	414b      	adcs	r3, r1
   10a2c:	f88d 3011 	strb.w	r3, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   10a30:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   10a34:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10a36:	f89d 3011 	ldrb.w	r3, [sp, #17]
   10a3a:	e9cd 8301 	strd	r8, r3, [sp, #4]
   10a3e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   10a42:	9300      	str	r3, [sp, #0]
   10a44:	4639      	mov	r1, r7
   10a46:	462b      	mov	r3, r5
   10a48:	4630      	mov	r0, r6
   10a4a:	f7ff fa43 	bl	fed4 <send_mod_sub_status>
   10a4e:	e7da      	b.n	10a06 <mod_sub_va_del+0x22>
	mod = get_model(elem, buf, &vnd);
   10a50:	f10d 0211 	add.w	r2, sp, #17
   10a54:	4621      	mov	r1, r4
   10a56:	f015 fd6a 	bl	2652e <get_model>
   10a5a:	9005      	str	r0, [sp, #20]
	if (!mod) {
   10a5c:	b918      	cbnz	r0, 10a66 <mod_sub_va_del+0x82>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   10a5e:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   10a62:	2202      	movs	r2, #2
		goto send_status;
   10a64:	e7e7      	b.n	10a36 <mod_sub_va_del+0x52>
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   10a66:	f10d 0112 	add.w	r1, sp, #18
   10a6a:	4648      	mov	r0, r9
   10a6c:	f7fd fab4 	bl	dfd8 <bt_mesh_va_del>
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   10a70:	f8bd 1012 	ldrh.w	r1, [sp, #18]
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   10a74:	4602      	mov	r2, r0
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   10a76:	2900      	cmp	r1, #0
   10a78:	d0dd      	beq.n	10a36 <mod_sub_va_del+0x52>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   10a7a:	a805      	add	r0, sp, #20
   10a7c:	f015 fc2b 	bl	262d6 <bt_mesh_model_find_group>
	if (match) {
   10a80:	b130      	cbz	r0, 10a90 <mod_sub_va_del+0xac>
		*match = BT_MESH_ADDR_UNASSIGNED;
   10a82:	2400      	movs	r4, #0
   10a84:	8004      	strh	r4, [r0, #0]
			bt_mesh_model_sub_store(mod);
   10a86:	9805      	ldr	r0, [sp, #20]
   10a88:	f015 fca3 	bl	263d2 <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   10a8c:	4622      	mov	r2, r4
   10a8e:	e7d2      	b.n	10a36 <mod_sub_va_del+0x52>
		status = STATUS_CANNOT_REMOVE;
   10a90:	220c      	movs	r2, #12
   10a92:	e7d0      	b.n	10a36 <mod_sub_va_del+0x52>
   10a94:	0002d974 	.word	0x0002d974

00010a98 <mod_sub_del>:
{
   10a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10a9c:	4607      	mov	r7, r0
   10a9e:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   10aa0:	4610      	mov	r0, r2
{
   10aa2:	4688      	mov	r8, r1
   10aa4:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10aa6:	f017 fa3a 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10aaa:	b203      	sxth	r3, r0
   10aac:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10aae:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10ab0:	dc06      	bgt.n	10ac0 <mod_sub_del+0x28>
		BT_WARN("Prohibited element address");
   10ab2:	2157      	movs	r1, #87	; 0x57
   10ab4:	481f      	ldr	r0, [pc, #124]	; (10b34 <mod_sub_del+0x9c>)
   10ab6:	f011 fa08 	bl	21eca <printk>
}
   10aba:	b007      	add	sp, #28
   10abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   10ac0:	4620      	mov	r0, r4
   10ac2:	f017 fa2c 	bl	27f1e <net_buf_simple_pull_le16>
   10ac6:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   10ac8:	4628      	mov	r0, r5
	mod_id = buf->data;
   10aca:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10ace:	f7fe ff55 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   10ad2:	b940      	cbnz	r0, 10ae6 <mod_sub_del+0x4e>
		vnd = (buf->len == 4U);
   10ad4:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   10ad6:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   10ad8:	1f1a      	subs	r2, r3, #4
   10ada:	4253      	negs	r3, r2
   10adc:	4153      	adcs	r3, r2
   10ade:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   10ae2:	2201      	movs	r2, #1
   10ae4:	e017      	b.n	10b16 <mod_sub_del+0x7e>
	mod = get_model(elem, buf, &vnd);
   10ae6:	f10d 0213 	add.w	r2, sp, #19
   10aea:	4621      	mov	r1, r4
   10aec:	f015 fd1f 	bl	2652e <get_model>
   10af0:	9005      	str	r0, [sp, #20]
	if (!mod) {
   10af2:	b1d8      	cbz	r0, 10b2c <mod_sub_del+0x94>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   10af4:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   10af8:	b29b      	uxth	r3, r3
   10afa:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   10afe:	d8f0      	bhi.n	10ae2 <mod_sub_del+0x4a>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   10b00:	4631      	mov	r1, r6
   10b02:	a805      	add	r0, sp, #20
   10b04:	f015 fbe7 	bl	262d6 <bt_mesh_model_find_group>
	if (match) {
   10b08:	2400      	movs	r4, #0
   10b0a:	b188      	cbz	r0, 10b30 <mod_sub_del+0x98>
		*match = BT_MESH_ADDR_UNASSIGNED;
   10b0c:	8004      	strh	r4, [r0, #0]
			bt_mesh_model_sub_store(mod);
   10b0e:	9805      	ldr	r0, [sp, #20]
   10b10:	f015 fc5f 	bl	263d2 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   10b14:	4622      	mov	r2, r4
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10b16:	f89d 3013 	ldrb.w	r3, [sp, #19]
   10b1a:	9600      	str	r6, [sp, #0]
   10b1c:	e9cd 9301 	strd	r9, r3, [sp, #4]
   10b20:	4641      	mov	r1, r8
   10b22:	462b      	mov	r3, r5
   10b24:	4638      	mov	r0, r7
   10b26:	f7ff f9d5 	bl	fed4 <send_mod_sub_status>
   10b2a:	e7c6      	b.n	10aba <mod_sub_del+0x22>
		status = STATUS_INVALID_MODEL;
   10b2c:	2202      	movs	r2, #2
   10b2e:	e7f2      	b.n	10b16 <mod_sub_del+0x7e>
	status = STATUS_SUCCESS;
   10b30:	4602      	mov	r2, r0
   10b32:	e7f0      	b.n	10b16 <mod_sub_del+0x7e>
   10b34:	0002d974 	.word	0x0002d974

00010b38 <mod_sub_va_add>:
{
   10b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10b3c:	4607      	mov	r7, r0
   10b3e:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   10b40:	4610      	mov	r0, r2
{
   10b42:	4688      	mov	r8, r1
   10b44:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10b46:	f017 f9ea 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10b4a:	b203      	sxth	r3, r0
   10b4c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10b4e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10b50:	dc06      	bgt.n	10b60 <mod_sub_va_add+0x28>
		BT_WARN("Prohibited element address");
   10b52:	2157      	movs	r1, #87	; 0x57
   10b54:	482b      	ldr	r0, [pc, #172]	; (10c04 <mod_sub_va_add+0xcc>)
   10b56:	f011 f9b8 	bl	21eca <printk>
}
   10b5a:	b007      	add	sp, #28
   10b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   10b60:	2110      	movs	r1, #16
   10b62:	4620      	mov	r0, r4
   10b64:	f00b ffb2 	bl	1cacc <net_buf_simple_pull_mem>
   10b68:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   10b6a:	4628      	mov	r0, r5
	mod_id = buf->data;
   10b6c:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10b70:	f7fe ff04 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   10b74:	b9b8      	cbnz	r0, 10ba6 <mod_sub_va_add+0x6e>
		vnd = (buf->len == 4U);
   10b76:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   10b78:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   10b7a:	1f19      	subs	r1, r3, #4
   10b7c:	424b      	negs	r3, r1
   10b7e:	414b      	adcs	r3, r1
   10b80:	f88d 3011 	strb.w	r3, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   10b84:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   10b88:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10b8a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   10b8e:	e9cd 9301 	strd	r9, r3, [sp, #4]
   10b92:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   10b96:	9300      	str	r3, [sp, #0]
   10b98:	4622      	mov	r2, r4
   10b9a:	462b      	mov	r3, r5
   10b9c:	4641      	mov	r1, r8
   10b9e:	4638      	mov	r0, r7
   10ba0:	f7ff f998 	bl	fed4 <send_mod_sub_status>
   10ba4:	e7d9      	b.n	10b5a <mod_sub_va_add+0x22>
	mod = get_model(elem, buf, &vnd);
   10ba6:	f10d 0211 	add.w	r2, sp, #17
   10baa:	4621      	mov	r1, r4
   10bac:	f015 fcbf 	bl	2652e <get_model>
   10bb0:	9005      	str	r0, [sp, #20]
	if (!mod) {
   10bb2:	b918      	cbnz	r0, 10bbc <mod_sub_va_add+0x84>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   10bb4:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   10bb8:	2402      	movs	r4, #2
		goto send_status;
   10bba:	e7e6      	b.n	10b8a <mod_sub_va_add+0x52>
	status = bt_mesh_va_add(label_uuid, &sub_addr);
   10bbc:	f10d 0112 	add.w	r1, sp, #18
   10bc0:	4630      	mov	r0, r6
   10bc2:	f7fd f9cf 	bl	df64 <bt_mesh_va_add>
	if (status != STATUS_SUCCESS) {
   10bc6:	4604      	mov	r4, r0
   10bc8:	2800      	cmp	r0, #0
   10bca:	d1de      	bne.n	10b8a <mod_sub_va_add+0x52>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   10bcc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   10bd0:	a805      	add	r0, sp, #20
   10bd2:	f015 fb80 	bl	262d6 <bt_mesh_model_find_group>
		bt_mesh_va_del(label_uuid, NULL);
   10bd6:	4621      	mov	r1, r4
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   10bd8:	b118      	cbz	r0, 10be2 <mod_sub_va_add+0xaa>
		bt_mesh_va_del(label_uuid, NULL);
   10bda:	4630      	mov	r0, r6
   10bdc:	f7fd f9fc 	bl	dfd8 <bt_mesh_va_del>
		goto send_status;
   10be0:	e7d3      	b.n	10b8a <mod_sub_va_add+0x52>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   10be2:	a805      	add	r0, sp, #20
   10be4:	f015 fb77 	bl	262d6 <bt_mesh_model_find_group>
	if (!entry) {
   10be8:	b928      	cbnz	r0, 10bf6 <mod_sub_va_add+0xbe>
		bt_mesh_va_del(label_uuid, NULL);
   10bea:	4621      	mov	r1, r4
   10bec:	4630      	mov	r0, r6
   10bee:	f7fd f9f3 	bl	dfd8 <bt_mesh_va_del>
		status = STATUS_INSUFF_RESOURCES;
   10bf2:	2405      	movs	r4, #5
		goto send_status;
   10bf4:	e7c9      	b.n	10b8a <mod_sub_va_add+0x52>
	*entry = sub_addr;
   10bf6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   10bfa:	8003      	strh	r3, [r0, #0]
		bt_mesh_model_sub_store(mod);
   10bfc:	9805      	ldr	r0, [sp, #20]
   10bfe:	f015 fbe8 	bl	263d2 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   10c02:	e7c2      	b.n	10b8a <mod_sub_va_add+0x52>
   10c04:	0002d974 	.word	0x0002d974

00010c08 <mod_sub_add>:
{
   10c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10c0c:	4607      	mov	r7, r0
   10c0e:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   10c10:	4610      	mov	r0, r2
{
   10c12:	4688      	mov	r8, r1
   10c14:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10c16:	f017 f982 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10c1a:	b203      	sxth	r3, r0
   10c1c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10c1e:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10c20:	dc06      	bgt.n	10c30 <mod_sub_add+0x28>
		BT_WARN("Prohibited element address");
   10c22:	2157      	movs	r1, #87	; 0x57
   10c24:	4821      	ldr	r0, [pc, #132]	; (10cac <mod_sub_add+0xa4>)
   10c26:	f011 f950 	bl	21eca <printk>
}
   10c2a:	b007      	add	sp, #28
   10c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   10c30:	4620      	mov	r0, r4
   10c32:	f017 f974 	bl	27f1e <net_buf_simple_pull_le16>
   10c36:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   10c38:	4630      	mov	r0, r6
	mod_id = buf->data;
   10c3a:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10c3e:	f7fe fe9d 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   10c42:	b940      	cbnz	r0, 10c56 <mod_sub_add+0x4e>
		vnd = (buf->len == 4U);
   10c44:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   10c46:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   10c48:	1f1a      	subs	r2, r3, #4
   10c4a:	4253      	negs	r3, r2
   10c4c:	4153      	adcs	r3, r2
   10c4e:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   10c52:	2201      	movs	r2, #1
   10c54:	e01d      	b.n	10c92 <mod_sub_add+0x8a>
	mod = get_model(elem, buf, &vnd);
   10c56:	f10d 0213 	add.w	r2, sp, #19
   10c5a:	4621      	mov	r1, r4
   10c5c:	f015 fc67 	bl	2652e <get_model>
   10c60:	9005      	str	r0, [sp, #20]
	if (!mod) {
   10c62:	b1a8      	cbz	r0, 10c90 <mod_sub_add+0x88>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   10c64:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   10c68:	b29b      	uxth	r3, r3
   10c6a:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   10c6e:	d8f0      	bhi.n	10c52 <mod_sub_add+0x4a>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   10c70:	4629      	mov	r1, r5
   10c72:	a805      	add	r0, sp, #20
   10c74:	f015 fb2f 	bl	262d6 <bt_mesh_model_find_group>
   10c78:	b940      	cbnz	r0, 10c8c <mod_sub_add+0x84>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   10c7a:	4601      	mov	r1, r0
   10c7c:	a805      	add	r0, sp, #20
   10c7e:	f015 fb2a 	bl	262d6 <bt_mesh_model_find_group>
	if (!entry) {
   10c82:	b188      	cbz	r0, 10ca8 <mod_sub_add+0xa0>
	*entry = sub_addr;
   10c84:	8005      	strh	r5, [r0, #0]
		bt_mesh_model_sub_store(mod);
   10c86:	9805      	ldr	r0, [sp, #20]
   10c88:	f015 fba3 	bl	263d2 <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   10c8c:	2200      	movs	r2, #0
   10c8e:	e000      	b.n	10c92 <mod_sub_add+0x8a>
		status = STATUS_INVALID_MODEL;
   10c90:	2202      	movs	r2, #2
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10c92:	f89d 3013 	ldrb.w	r3, [sp, #19]
   10c96:	9500      	str	r5, [sp, #0]
   10c98:	e9cd 9301 	strd	r9, r3, [sp, #4]
   10c9c:	4641      	mov	r1, r8
   10c9e:	4633      	mov	r3, r6
   10ca0:	4638      	mov	r0, r7
   10ca2:	f7ff f917 	bl	fed4 <send_mod_sub_status>
   10ca6:	e7c0      	b.n	10c2a <mod_sub_add+0x22>
		status = STATUS_INSUFF_RESOURCES;
   10ca8:	2205      	movs	r2, #5
   10caa:	e7f2      	b.n	10c92 <mod_sub_add+0x8a>
   10cac:	0002d974 	.word	0x0002d974

00010cb0 <mod_app_bind>:
{
   10cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10cb4:	4614      	mov	r4, r2
   10cb6:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   10cb8:	ab06      	add	r3, sp, #24
   10cba:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   10cbe:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   10cc0:	4620      	mov	r0, r4
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   10cc2:	9303      	str	r3, [sp, #12]
   10cc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   10cc8:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   10cca:	f017 f928 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10cce:	b203      	sxth	r3, r0
   10cd0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10cd2:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10cd4:	dc06      	bgt.n	10ce4 <mod_app_bind+0x34>
		BT_WARN("Prohibited element address");
   10cd6:	4829      	ldr	r0, [pc, #164]	; (10d7c <mod_app_bind+0xcc>)
   10cd8:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model App Bind Status response");
   10cda:	f011 f8f6 	bl	21eca <printk>
}
   10cde:	b00b      	add	sp, #44	; 0x2c
   10ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
   10ce4:	4620      	mov	r0, r4
   10ce6:	f017 f91a 	bl	27f1e <net_buf_simple_pull_le16>
   10cea:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   10cec:	4630      	mov	r0, r6
	mod_id = buf->data;
   10cee:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10cf2:	f7fe fe43 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   10cf6:	b9d8      	cbnz	r0, 10d30 <mod_app_bind+0x80>
		vnd = (buf->len == 4U);
   10cf8:	88a3      	ldrh	r3, [r4, #4]
   10cfa:	1f1a      	subs	r2, r3, #4
   10cfc:	4253      	negs	r3, r2
   10cfe:	4153      	adcs	r3, r2
   10d00:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   10d04:	2301      	movs	r3, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   10d06:	e9cd 3900 	strd	r3, r9, [sp]
   10d0a:	4632      	mov	r2, r6
   10d0c:	462b      	mov	r3, r5
   10d0e:	f89d 100b 	ldrb.w	r1, [sp, #11]
   10d12:	a803      	add	r0, sp, #12
   10d14:	f015 fc2c 	bl	26570 <create_mod_app_status.isra.13>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10d18:	2300      	movs	r3, #0
   10d1a:	9300      	str	r3, [sp, #0]
   10d1c:	aa03      	add	r2, sp, #12
   10d1e:	4641      	mov	r1, r8
   10d20:	4638      	mov	r0, r7
   10d22:	f015 fb08 	bl	26336 <bt_mesh_model_send>
   10d26:	2800      	cmp	r0, #0
   10d28:	d0d9      	beq.n	10cde <mod_app_bind+0x2e>
		BT_ERR("Unable to send Model App Bind Status response");
   10d2a:	2145      	movs	r1, #69	; 0x45
   10d2c:	4814      	ldr	r0, [pc, #80]	; (10d80 <mod_app_bind+0xd0>)
   10d2e:	e7d4      	b.n	10cda <mod_app_bind+0x2a>
	mod = get_model(elem, buf, &vnd);
   10d30:	4621      	mov	r1, r4
   10d32:	f10d 020b 	add.w	r2, sp, #11
   10d36:	f015 fbfa 	bl	2652e <get_model>
	if (!mod) {
   10d3a:	4604      	mov	r4, r0
   10d3c:	b1c0      	cbz	r0, 10d70 <mod_app_bind+0xc0>
	if (model == mod) {
   10d3e:	42b8      	cmp	r0, r7
   10d40:	d105      	bne.n	10d4e <mod_app_bind+0x9e>
		BT_ERR("Client tried to bind AppKey to Configuration Model");
   10d42:	2145      	movs	r1, #69	; 0x45
   10d44:	480f      	ldr	r0, [pc, #60]	; (10d84 <mod_app_bind+0xd4>)
   10d46:	f011 f8c0 	bl	21eca <printk>
		status = STATUS_CANNOT_BIND;
   10d4a:	230d      	movs	r3, #13
		goto send_status;
   10d4c:	e7db      	b.n	10d06 <mod_app_bind+0x56>
	if (!bt_mesh_app_key_exists(key_idx)) {
   10d4e:	4628      	mov	r0, r5
   10d50:	f7fc faf6 	bl	d340 <bt_mesh_app_key_exists>
   10d54:	b170      	cbz	r0, 10d74 <mod_app_bind+0xc4>
		if (model->keys[i] == key_idx) {
   10d56:	89a3      	ldrh	r3, [r4, #12]
   10d58:	429d      	cmp	r5, r3
   10d5a:	d007      	beq.n	10d6c <mod_app_bind+0xbc>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   10d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10d60:	4293      	cmp	r3, r2
   10d62:	d109      	bne.n	10d78 <mod_app_bind+0xc8>
			model->keys[i] = key_idx;
   10d64:	81a5      	strh	r5, [r4, #12]
				bt_mesh_model_bind_store(model);
   10d66:	4620      	mov	r0, r4
   10d68:	f015 fb2c 	bl	263c4 <bt_mesh_model_bind_store>
			return STATUS_SUCCESS;
   10d6c:	2300      	movs	r3, #0
   10d6e:	e7ca      	b.n	10d06 <mod_app_bind+0x56>
		status = STATUS_INVALID_MODEL;
   10d70:	2302      	movs	r3, #2
   10d72:	e7c8      	b.n	10d06 <mod_app_bind+0x56>
		return STATUS_INVALID_APPKEY;
   10d74:	2303      	movs	r3, #3
   10d76:	e7c6      	b.n	10d06 <mod_app_bind+0x56>
	return STATUS_INSUFF_RESOURCES;
   10d78:	2305      	movs	r3, #5
   10d7a:	e7c4      	b.n	10d06 <mod_app_bind+0x56>
   10d7c:	0002d974 	.word	0x0002d974
   10d80:	0002d88f 	.word	0x0002d88f
   10d84:	0002d857 	.word	0x0002d857

00010d88 <mod_sub_list_visitor>:
{
   10d88:	b538      	push	{r3, r4, r5, lr}
   10d8a:	4615      	mov	r5, r2
	if (mod->elem_idx != visit->elem_idx) {
   10d8c:	7902      	ldrb	r2, [r0, #4]
   10d8e:	882b      	ldrh	r3, [r5, #0]
   10d90:	429a      	cmp	r2, r3
{
   10d92:	4604      	mov	r4, r0
	if (mod->elem_idx != visit->elem_idx) {
   10d94:	d110      	bne.n	10db8 <mod_sub_list_visitor+0x30>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   10d96:	89c3      	ldrh	r3, [r0, #14]
   10d98:	b173      	cbz	r3, 10db8 <mod_sub_list_visitor+0x30>
		if (net_buf_simple_tailroom(visit->msg) <
   10d9a:	6868      	ldr	r0, [r5, #4]
   10d9c:	f017 f8df 	bl	27f5e <net_buf_simple_tailroom>
   10da0:	2805      	cmp	r0, #5
   10da2:	d805      	bhi.n	10db0 <mod_sub_list_visitor+0x28>
			BT_WARN("No room for all groups");
   10da4:	4805      	ldr	r0, [pc, #20]	; (10dbc <mod_sub_list_visitor+0x34>)
   10da6:	2157      	movs	r1, #87	; 0x57
   10da8:	f011 f88f 	bl	21eca <printk>
   10dac:	2000      	movs	r0, #0
}
   10dae:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   10db0:	89e1      	ldrh	r1, [r4, #14]
   10db2:	6868      	ldr	r0, [r5, #4]
   10db4:	f017 f8ee 	bl	27f94 <net_buf_simple_add_le16>
		return BT_MESH_WALK_CONTINUE;
   10db8:	2001      	movs	r0, #1
   10dba:	e7f8      	b.n	10dae <mod_sub_list_visitor+0x26>
   10dbc:	0002d9e1 	.word	0x0002d9e1

00010dc0 <send_mod_pub_status.isra.17>:
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   10dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10dc4:	b08a      	sub	sp, #40	; 0x28
   10dc6:	460e      	mov	r6, r1
   10dc8:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
   10dcc:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   10dd0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   10dd2:	a905      	add	r1, sp, #20
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   10dd4:	4699      	mov	r9, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   10dd6:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
   10dda:	e9cd 3103 	strd	r3, r1, [sp, #12]
   10dde:	9102      	str	r1, [sp, #8]
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   10de0:	4605      	mov	r5, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   10de2:	f248 0119 	movw	r1, #32793	; 0x8019
   10de6:	a802      	add	r0, sp, #8
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   10de8:	4692      	mov	sl, r2
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   10dea:	f015 fa7b 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   10dee:	4641      	mov	r1, r8
   10df0:	a802      	add	r0, sp, #8
   10df2:	f017 f8c8 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   10df6:	4651      	mov	r1, sl
   10df8:	a802      	add	r0, sp, #8
   10dfa:	f017 f8cb 	bl	27f94 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   10dfe:	f1b8 0f00 	cmp.w	r8, #0
   10e02:	d020      	beq.n	10e46 <send_mod_pub_status.isra.17+0x86>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
   10e04:	2107      	movs	r1, #7
   10e06:	a802      	add	r0, sp, #8
   10e08:	f00b fe7e 	bl	1cb08 <net_buf_simple_add>
   10e0c:	2207      	movs	r2, #7
   10e0e:	2100      	movs	r1, #0
   10e10:	f013 f9c7 	bl	241a2 <memset>
	if (vnd) {
   10e14:	2f00      	cmp	r7, #0
   10e16:	d036      	beq.n	10e86 <send_mod_pub_status.isra.17+0xc6>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   10e18:	2104      	movs	r1, #4
   10e1a:	a802      	add	r0, sp, #8
   10e1c:	f00b fe74 	bl	1cb08 <net_buf_simple_add>
   10e20:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   10e22:	9915      	ldr	r1, [sp, #84]	; 0x54
   10e24:	f013 f993 	bl	2414e <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   10e28:	2300      	movs	r3, #0
   10e2a:	9300      	str	r3, [sp, #0]
   10e2c:	aa02      	add	r2, sp, #8
   10e2e:	4631      	mov	r1, r6
   10e30:	4628      	mov	r0, r5
   10e32:	f015 fa80 	bl	26336 <bt_mesh_model_send>
   10e36:	b118      	cbz	r0, 10e40 <send_mod_pub_status.isra.17+0x80>
		BT_ERR("Unable to send Model Publication Status");
   10e38:	2145      	movs	r1, #69	; 0x45
   10e3a:	4816      	ldr	r0, [pc, #88]	; (10e94 <send_mod_pub_status.isra.17+0xd4>)
   10e3c:	f011 f845 	bl	21eca <printk>
}
   10e40:	b00a      	add	sp, #40	; 0x28
   10e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
   10e46:	4649      	mov	r1, r9
   10e48:	a802      	add	r0, sp, #8
   10e4a:	f017 f8a3 	bl	27f94 <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (uint16_t)mod->pub->cred << 12;
   10e4e:	6823      	ldr	r3, [r4, #0]
   10e50:	79d9      	ldrb	r1, [r3, #7]
   10e52:	88db      	ldrh	r3, [r3, #6]
   10e54:	f3c1 1100 	ubfx	r1, r1, #4, #1
   10e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
		net_buf_simple_add_le16(&msg, idx_cred);
   10e5c:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
   10e60:	a802      	add	r0, sp, #8
   10e62:	f017 f897 	bl	27f94 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
   10e66:	6823      	ldr	r3, [r4, #0]
   10e68:	a802      	add	r0, sp, #8
   10e6a:	7a19      	ldrb	r1, [r3, #8]
   10e6c:	f017 f88b 	bl	27f86 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
   10e70:	6823      	ldr	r3, [r4, #0]
   10e72:	a802      	add	r0, sp, #8
   10e74:	7a99      	ldrb	r1, [r3, #10]
   10e76:	f017 f886 	bl	27f86 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
   10e7a:	6823      	ldr	r3, [r4, #0]
   10e7c:	a802      	add	r0, sp, #8
   10e7e:	7a59      	ldrb	r1, [r3, #9]
   10e80:	f017 f881 	bl	27f86 <net_buf_simple_add_u8>
   10e84:	e7c6      	b.n	10e14 <send_mod_pub_status.isra.17+0x54>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   10e86:	2102      	movs	r1, #2
   10e88:	a802      	add	r0, sp, #8
   10e8a:	f00b fe3d 	bl	1cb08 <net_buf_simple_add>
   10e8e:	2202      	movs	r2, #2
   10e90:	e7c7      	b.n	10e22 <send_mod_pub_status.isra.17+0x62>
   10e92:	bf00      	nop
   10e94:	0002dbe0 	.word	0x0002dbe0

00010e98 <mod_pub_get>:
{
   10e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e9c:	4605      	mov	r5, r0
   10e9e:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   10ea0:	4610      	mov	r0, r2
{
   10ea2:	460e      	mov	r6, r1
   10ea4:	4690      	mov	r8, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10ea6:	f017 f83a 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10eaa:	b203      	sxth	r3, r0
   10eac:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10eae:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10eb0:	dc06      	bgt.n	10ec0 <mod_pub_get+0x28>
		BT_WARN("Prohibited element address");
   10eb2:	2157      	movs	r1, #87	; 0x57
   10eb4:	4818      	ldr	r0, [pc, #96]	; (10f18 <mod_pub_get+0x80>)
   10eb6:	f011 f808 	bl	21eca <printk>
}
   10eba:	b006      	add	sp, #24
   10ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod_id = buf->data;
   10ec0:	f8d8 7000 	ldr.w	r7, [r8]
	elem = bt_mesh_elem_find(elem_addr);
   10ec4:	f7fe fd5a 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   10ec8:	4602      	mov	r2, r0
   10eca:	b948      	cbnz	r0, 10ee0 <mod_pub_get+0x48>
		vnd = (buf->len == 4U);
   10ecc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   10ed0:	1f19      	subs	r1, r3, #4
   10ed2:	424b      	negs	r3, r1
   10ed4:	414b      	adcs	r3, r1
   10ed6:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   10eda:	2101      	movs	r1, #1
	uint16_t elem_addr, pub_addr = 0U;
   10edc:	4613      	mov	r3, r2
   10ede:	e00a      	b.n	10ef6 <mod_pub_get+0x5e>
	mod = get_model(elem, buf, &vnd);
   10ee0:	f10d 0217 	add.w	r2, sp, #23
   10ee4:	4641      	mov	r1, r8
   10ee6:	f015 fb22 	bl	2652e <get_model>
	if (!mod) {
   10eea:	4602      	mov	r2, r0
   10eec:	b180      	cbz	r0, 10f10 <mod_pub_get+0x78>
	if (!mod->pub) {
   10eee:	6883      	ldr	r3, [r0, #8]
   10ef0:	b183      	cbz	r3, 10f14 <mod_pub_get+0x7c>
	pub_addr = mod->pub->addr;
   10ef2:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
   10ef4:	2100      	movs	r1, #0
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   10ef6:	3208      	adds	r2, #8
   10ef8:	9201      	str	r2, [sp, #4]
   10efa:	f89d 2017 	ldrb.w	r2, [sp, #23]
   10efe:	9200      	str	r2, [sp, #0]
   10f00:	e9cd 1702 	strd	r1, r7, [sp, #8]
   10f04:	4622      	mov	r2, r4
   10f06:	4631      	mov	r1, r6
   10f08:	4628      	mov	r0, r5
   10f0a:	f7ff ff59 	bl	10dc0 <send_mod_pub_status.isra.17>
   10f0e:	e7d4      	b.n	10eba <mod_pub_get+0x22>
		status = STATUS_INVALID_MODEL;
   10f10:	2102      	movs	r1, #2
   10f12:	e7e3      	b.n	10edc <mod_pub_get+0x44>
		status = STATUS_NVAL_PUB_PARAM;
   10f14:	2107      	movs	r1, #7
   10f16:	e7ee      	b.n	10ef6 <mod_pub_get+0x5e>
   10f18:	0002d974 	.word	0x0002d974

00010f1c <relay_get>:
{
   10f1c:	b530      	push	{r4, r5, lr}
   10f1e:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   10f20:	ab03      	add	r3, sp, #12
   10f22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   10f26:	4604      	mov	r4, r0
   10f28:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   10f2a:	a805      	add	r0, sp, #20
   10f2c:	f248 0128 	movw	r1, #32808	; 0x8028
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   10f30:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10f34:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   10f36:	f015 f9d5 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   10f3a:	f014 fcd6 	bl	258ea <bt_mesh_relay_get>
   10f3e:	4601      	mov	r1, r0
   10f40:	a805      	add	r0, sp, #20
   10f42:	f017 f820 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   10f46:	f7fa fac5 	bl	b4d4 <bt_mesh_relay_retransmit_get>
   10f4a:	4601      	mov	r1, r0
   10f4c:	a805      	add	r0, sp, #20
   10f4e:	f017 f81a 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10f52:	2300      	movs	r3, #0
   10f54:	9300      	str	r3, [sp, #0]
   10f56:	aa05      	add	r2, sp, #20
   10f58:	4629      	mov	r1, r5
   10f5a:	4620      	mov	r0, r4
   10f5c:	f015 f9eb 	bl	26336 <bt_mesh_model_send>
   10f60:	b118      	cbz	r0, 10f6a <relay_get+0x4e>
		BT_ERR("Unable to send Config Relay Status response");
   10f62:	2145      	movs	r1, #69	; 0x45
   10f64:	4802      	ldr	r0, [pc, #8]	; (10f70 <relay_get+0x54>)
   10f66:	f010 ffb0 	bl	21eca <printk>
}
   10f6a:	b009      	add	sp, #36	; 0x24
   10f6c:	bd30      	pop	{r4, r5, pc}
   10f6e:	bf00      	nop
   10f70:	0002dac4 	.word	0x0002dac4

00010f74 <net_transmit_set>:
{
   10f74:	b570      	push	{r4, r5, r6, lr}
   10f76:	b088      	sub	sp, #32
   10f78:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   10f7a:	ab03      	add	r3, sp, #12
   10f7c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   10f80:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10f84:	9305      	str	r3, [sp, #20]
	bt_mesh_net_transmit_set(buf->data[0]);
   10f86:	6823      	ldr	r3, [r4, #0]
{
   10f88:	4605      	mov	r5, r0
	bt_mesh_net_transmit_set(buf->data[0]);
   10f8a:	7818      	ldrb	r0, [r3, #0]
{
   10f8c:	460e      	mov	r6, r1
	bt_mesh_net_transmit_set(buf->data[0]);
   10f8e:	f7fa fa31 	bl	b3f4 <bt_mesh_net_transmit_set>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   10f92:	f248 0125 	movw	r1, #32805	; 0x8025
   10f96:	a805      	add	r0, sp, #20
   10f98:	f015 f9a4 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   10f9c:	6823      	ldr	r3, [r4, #0]
   10f9e:	a805      	add	r0, sp, #20
   10fa0:	7819      	ldrb	r1, [r3, #0]
   10fa2:	f016 fff0 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10fa6:	2300      	movs	r3, #0
   10fa8:	9300      	str	r3, [sp, #0]
   10faa:	aa05      	add	r2, sp, #20
   10fac:	4631      	mov	r1, r6
   10fae:	4628      	mov	r0, r5
   10fb0:	f015 f9c1 	bl	26336 <bt_mesh_model_send>
   10fb4:	b118      	cbz	r0, 10fbe <net_transmit_set+0x4a>
		BT_ERR("Unable to send Network Transmit Status");
   10fb6:	2145      	movs	r1, #69	; 0x45
   10fb8:	4802      	ldr	r0, [pc, #8]	; (10fc4 <net_transmit_set+0x50>)
   10fba:	f010 ff86 	bl	21eca <printk>
}
   10fbe:	b008      	add	sp, #32
   10fc0:	bd70      	pop	{r4, r5, r6, pc}
   10fc2:	bf00      	nop
   10fc4:	0002da50 	.word	0x0002da50

00010fc8 <net_transmit_get>:
{
   10fc8:	b530      	push	{r4, r5, lr}
   10fca:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   10fcc:	ab03      	add	r3, sp, #12
   10fce:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   10fd2:	4604      	mov	r4, r0
   10fd4:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   10fd6:	a805      	add	r0, sp, #20
   10fd8:	f248 0125 	movw	r1, #32805	; 0x8025
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   10fdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10fe0:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   10fe2:	f015 f97f 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   10fe6:	f7fa fa19 	bl	b41c <bt_mesh_net_transmit_get>
   10fea:	4601      	mov	r1, r0
   10fec:	a805      	add	r0, sp, #20
   10fee:	f016 ffca 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10ff2:	2300      	movs	r3, #0
   10ff4:	9300      	str	r3, [sp, #0]
   10ff6:	aa05      	add	r2, sp, #20
   10ff8:	4629      	mov	r1, r5
   10ffa:	4620      	mov	r0, r4
   10ffc:	f015 f99b 	bl	26336 <bt_mesh_model_send>
   11000:	b118      	cbz	r0, 1100a <net_transmit_get+0x42>
		BT_ERR("Unable to send Config Network Transmit Status");
   11002:	2145      	movs	r1, #69	; 0x45
   11004:	4802      	ldr	r0, [pc, #8]	; (11010 <net_transmit_get+0x48>)
   11006:	f010 ff60 	bl	21eca <printk>
}
   1100a:	b009      	add	sp, #36	; 0x24
   1100c:	bd30      	pop	{r4, r5, pc}
   1100e:	bf00      	nop
   11010:	0002da1d 	.word	0x0002da1d

00011014 <send_gatt_proxy_status>:
{
   11014:	b530      	push	{r4, r5, lr}
   11016:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   11018:	ab03      	add	r3, sp, #12
   1101a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1101e:	4604      	mov	r4, r0
   11020:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   11022:	a805      	add	r0, sp, #20
   11024:	f248 0114 	movw	r1, #32788	; 0x8014
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   11028:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1102c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   1102e:	f015 f959 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   11032:	f014 fc3d 	bl	258b0 <bt_mesh_gatt_proxy_get>
   11036:	4601      	mov	r1, r0
   11038:	a805      	add	r0, sp, #20
   1103a:	f016 ffa4 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1103e:	2300      	movs	r3, #0
   11040:	9300      	str	r3, [sp, #0]
   11042:	aa05      	add	r2, sp, #20
   11044:	4629      	mov	r1, r5
   11046:	4620      	mov	r0, r4
   11048:	f015 f975 	bl	26336 <bt_mesh_model_send>
   1104c:	b118      	cbz	r0, 11056 <send_gatt_proxy_status+0x42>
		BT_ERR("Unable to send GATT Proxy Status");
   1104e:	2145      	movs	r1, #69	; 0x45
   11050:	4802      	ldr	r0, [pc, #8]	; (1105c <send_gatt_proxy_status+0x48>)
   11052:	f010 ff3a 	bl	21eca <printk>
}
   11056:	b009      	add	sp, #36	; 0x24
   11058:	bd30      	pop	{r4, r5, pc}
   1105a:	bf00      	nop
   1105c:	0002db8d 	.word	0x0002db8d

00011060 <gatt_proxy_set>:
{
   11060:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   11062:	6813      	ldr	r3, [r2, #0]
   11064:	781a      	ldrb	r2, [r3, #0]
   11066:	2a01      	cmp	r2, #1
{
   11068:	4604      	mov	r4, r0
   1106a:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1106c:	d905      	bls.n	1107a <gatt_proxy_set+0x1a>
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   1106e:	2157      	movs	r1, #87	; 0x57
   11070:	4806      	ldr	r0, [pc, #24]	; (1108c <gatt_proxy_set+0x2c>)
}
   11072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   11076:	f010 bf28 	b.w	21eca <printk>
	(void)bt_mesh_gatt_proxy_set(buf->data[0]);
   1107a:	4610      	mov	r0, r2
   1107c:	f014 fc05 	bl	2588a <bt_mesh_gatt_proxy_set>
	send_gatt_proxy_status(model, ctx);
   11080:	4629      	mov	r1, r5
   11082:	4620      	mov	r0, r4
}
   11084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_gatt_proxy_status(model, ctx);
   11088:	f7ff bfc4 	b.w	11014 <send_gatt_proxy_status>
   1108c:	0002d72b 	.word	0x0002d72b

00011090 <default_ttl_set>:
{
   11090:	b5f0      	push	{r4, r5, r6, r7, lr}
   11092:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   11094:	ab03      	add	r3, sp, #12
{
   11096:	4615      	mov	r5, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   11098:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   1109c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   110a0:	9305      	str	r3, [sp, #20]
	err = bt_mesh_default_ttl_set(buf->data[0]);
   110a2:	682b      	ldr	r3, [r5, #0]
{
   110a4:	4606      	mov	r6, r0
	err = bt_mesh_default_ttl_set(buf->data[0]);
   110a6:	7818      	ldrb	r0, [r3, #0]
{
   110a8:	460f      	mov	r7, r1
	err = bt_mesh_default_ttl_set(buf->data[0]);
   110aa:	f7fa f981 	bl	b3b0 <bt_mesh_default_ttl_set>
	if (err) {
   110ae:	4604      	mov	r4, r0
   110b0:	b138      	cbz	r0, 110c2 <default_ttl_set+0x32>
		BT_WARN("Prohibited Default TTL value 0x%02x", buf->data[0]);
   110b2:	682b      	ldr	r3, [r5, #0]
   110b4:	480f      	ldr	r0, [pc, #60]	; (110f4 <default_ttl_set+0x64>)
   110b6:	781a      	ldrb	r2, [r3, #0]
   110b8:	2157      	movs	r1, #87	; 0x57
   110ba:	f010 ff06 	bl	21eca <printk>
}
   110be:	b009      	add	sp, #36	; 0x24
   110c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   110c2:	f248 010e 	movw	r1, #32782	; 0x800e
   110c6:	a805      	add	r0, sp, #20
   110c8:	f015 f90c 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   110cc:	682b      	ldr	r3, [r5, #0]
   110ce:	a805      	add	r0, sp, #20
   110d0:	7819      	ldrb	r1, [r3, #0]
   110d2:	f016 ff58 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   110d6:	9400      	str	r4, [sp, #0]
   110d8:	4623      	mov	r3, r4
   110da:	aa05      	add	r2, sp, #20
   110dc:	4639      	mov	r1, r7
   110de:	4630      	mov	r0, r6
   110e0:	f015 f929 	bl	26336 <bt_mesh_model_send>
   110e4:	2800      	cmp	r0, #0
   110e6:	d0ea      	beq.n	110be <default_ttl_set+0x2e>
		BT_ERR("Unable to send Default TTL Status response");
   110e8:	2145      	movs	r1, #69	; 0x45
   110ea:	4803      	ldr	r0, [pc, #12]	; (110f8 <default_ttl_set+0x68>)
   110ec:	f010 feed 	bl	21eca <printk>
   110f0:	e7e5      	b.n	110be <default_ttl_set+0x2e>
   110f2:	bf00      	nop
   110f4:	0002d632 	.word	0x0002d632
   110f8:	0002d65b 	.word	0x0002d65b

000110fc <default_ttl_get>:
{
   110fc:	b530      	push	{r4, r5, lr}
   110fe:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   11100:	ab03      	add	r3, sp, #12
   11102:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   11106:	4604      	mov	r4, r0
   11108:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   1110a:	a805      	add	r0, sp, #20
   1110c:	f248 010e 	movw	r1, #32782	; 0x800e
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   11110:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11114:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   11116:	f015 f8e5 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   1111a:	f7fa f965 	bl	b3e8 <bt_mesh_default_ttl_get>
   1111e:	4601      	mov	r1, r0
   11120:	a805      	add	r0, sp, #20
   11122:	f016 ff30 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11126:	2300      	movs	r3, #0
   11128:	9300      	str	r3, [sp, #0]
   1112a:	aa05      	add	r2, sp, #20
   1112c:	4629      	mov	r1, r5
   1112e:	4620      	mov	r0, r4
   11130:	f015 f901 	bl	26336 <bt_mesh_model_send>
   11134:	b118      	cbz	r0, 1113e <default_ttl_get+0x42>
		BT_ERR("Unable to send Default TTL Status response");
   11136:	2145      	movs	r1, #69	; 0x45
   11138:	4802      	ldr	r0, [pc, #8]	; (11144 <default_ttl_get+0x48>)
   1113a:	f010 fec6 	bl	21eca <printk>
}
   1113e:	b009      	add	sp, #36	; 0x24
   11140:	bd30      	pop	{r4, r5, pc}
   11142:	bf00      	nop
   11144:	0002d65b 	.word	0x0002d65b

00011148 <beacon_get>:
{
   11148:	b530      	push	{r4, r5, lr}
   1114a:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   1114c:	ab03      	add	r3, sp, #12
   1114e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   11152:	4604      	mov	r4, r0
   11154:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   11156:	a805      	add	r0, sp, #20
   11158:	f248 010b 	movw	r1, #32779	; 0x800b
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   1115c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11160:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   11162:	f015 f8bf 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_enabled());
   11166:	f014 fb8d 	bl	25884 <bt_mesh_beacon_enabled>
   1116a:	4601      	mov	r1, r0
   1116c:	a805      	add	r0, sp, #20
   1116e:	f016 ff0a 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11172:	2300      	movs	r3, #0
   11174:	9300      	str	r3, [sp, #0]
   11176:	aa05      	add	r2, sp, #20
   11178:	4629      	mov	r1, r5
   1117a:	4620      	mov	r0, r4
   1117c:	f015 f8db 	bl	26336 <bt_mesh_model_send>
   11180:	b118      	cbz	r0, 1118a <beacon_get+0x42>
		BT_ERR("Unable to send Config Beacon Status response");
   11182:	2145      	movs	r1, #69	; 0x45
   11184:	4802      	ldr	r0, [pc, #8]	; (11190 <beacon_get+0x48>)
   11186:	f010 fea0 	bl	21eca <printk>
}
   1118a:	b009      	add	sp, #36	; 0x24
   1118c:	bd30      	pop	{r4, r5, pc}
   1118e:	bf00      	nop
   11190:	0002d5c6 	.word	0x0002d5c6

00011194 <dev_comp_data_get>:
{
   11194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11198:	b0a7      	sub	sp, #156	; 0x9c
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1119a:	ab08      	add	r3, sp, #32
{
   1119c:	4681      	mov	r9, r0
   1119e:	468a      	mov	sl, r1
	page = net_buf_simple_pull_u8(buf);
   111a0:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   111a2:	f44f 01f0 	mov.w	r1, #7864320	; 0x780000
   111a6:	e9cd 1306 	strd	r1, r3, [sp, #24]
   111aa:	9305      	str	r3, [sp, #20]
	page = net_buf_simple_pull_u8(buf);
   111ac:	f016 feaf 	bl	27f0e <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   111b0:	2102      	movs	r1, #2
   111b2:	a805      	add	r0, sp, #20
   111b4:	f015 f896 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   111b8:	2100      	movs	r1, #0
   111ba:	a805      	add	r0, sp, #20
   111bc:	f016 fee3 	bl	27f86 <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   111c0:	f7fe fdf8 	bl	fdb4 <bt_mesh_comp_get>
   111c4:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   111c6:	8801      	ldrh	r1, [r0, #0]
   111c8:	a805      	add	r0, sp, #20
   111ca:	f016 fee3 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   111ce:	8869      	ldrh	r1, [r5, #2]
   111d0:	a805      	add	r0, sp, #20
   111d2:	f016 fedf 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   111d6:	88a9      	ldrh	r1, [r5, #4]
   111d8:	a805      	add	r0, sp, #20
   111da:	f016 fedb 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   111de:	210a      	movs	r1, #10
   111e0:	a805      	add	r0, sp, #20
   111e2:	f016 fed7 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   111e6:	2107      	movs	r1, #7
   111e8:	a805      	add	r0, sp, #20
   111ea:	f016 fed3 	bl	27f94 <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   111ee:	2600      	movs	r6, #0
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   111f0:	f04f 0b02 	mov.w	fp, #2
		net_buf_simple_add_le16(buf, mod->id);
   111f4:	f04f 081c 	mov.w	r8, #28
	for (i = 0; i < comp->elem_count; i++) {
   111f8:	68ab      	ldr	r3, [r5, #8]
   111fa:	42b3      	cmp	r3, r6
   111fc:	d80a      	bhi.n	11214 <dev_comp_data_get+0x80>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   111fe:	2300      	movs	r3, #0
   11200:	9300      	str	r3, [sp, #0]
   11202:	aa05      	add	r2, sp, #20
   11204:	4651      	mov	r1, sl
   11206:	4648      	mov	r0, r9
   11208:	f015 f895 	bl	26336 <bt_mesh_model_send>
   1120c:	b1c0      	cbz	r0, 11240 <dev_comp_data_get+0xac>
		BT_ERR("Unable to send Device Composition Status response");
   1120e:	2145      	movs	r1, #69	; 0x45
   11210:	4824      	ldr	r0, [pc, #144]	; (112a4 <dev_comp_data_get+0x110>)
   11212:	e013      	b.n	1123c <dev_comp_data_get+0xa8>
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   11214:	68ec      	ldr	r4, [r5, #12]
   11216:	eb04 1406 	add.w	r4, r4, r6, lsl #4
	if (net_buf_simple_tailroom(buf) <
   1121a:	a805      	add	r0, sp, #20
   1121c:	f016 fe9f 	bl	27f5e <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   11220:	7922      	ldrb	r2, [r4, #4]
   11222:	7963      	ldrb	r3, [r4, #5]
   11224:	3202      	adds	r2, #2
   11226:	fb1b 2303 	smlabb	r3, fp, r3, r2
	if (net_buf_simple_tailroom(buf) <
   1122a:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   1122e:	d20a      	bcs.n	11246 <dev_comp_data_get+0xb2>
		BT_ERR("Too large device composition");
   11230:	2145      	movs	r1, #69	; 0x45
   11232:	481d      	ldr	r0, [pc, #116]	; (112a8 <dev_comp_data_get+0x114>)
   11234:	f010 fe49 	bl	21eca <printk>
		BT_ERR("Unable to get composition page 0");
   11238:	481c      	ldr	r0, [pc, #112]	; (112ac <dev_comp_data_get+0x118>)
   1123a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to send Device Composition Status response");
   1123c:	f010 fe45 	bl	21eca <printk>
}
   11240:	b027      	add	sp, #156	; 0x9c
   11242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_simple_add_le16(buf, elem->loc);
   11246:	8861      	ldrh	r1, [r4, #2]
   11248:	a805      	add	r0, sp, #20
   1124a:	f016 fea3 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   1124e:	7921      	ldrb	r1, [r4, #4]
   11250:	a805      	add	r0, sp, #20
   11252:	f016 fe98 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   11256:	7961      	ldrb	r1, [r4, #5]
   11258:	a805      	add	r0, sp, #20
   1125a:	f016 fe94 	bl	27f86 <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   1125e:	2700      	movs	r7, #0
   11260:	7923      	ldrb	r3, [r4, #4]
   11262:	429f      	cmp	r7, r3
   11264:	db05      	blt.n	11272 <dev_comp_data_get+0xde>
	for (i = 0; i < elem->vnd_model_count; i++) {
   11266:	2700      	movs	r7, #0
   11268:	7963      	ldrb	r3, [r4, #5]
   1126a:	429f      	cmp	r7, r3
   1126c:	db0a      	blt.n	11284 <dev_comp_data_get+0xf0>
	for (i = 0; i < comp->elem_count; i++) {
   1126e:	3601      	adds	r6, #1
   11270:	e7c2      	b.n	111f8 <dev_comp_data_get+0x64>
		net_buf_simple_add_le16(buf, mod->id);
   11272:	fb08 f307 	mul.w	r3, r8, r7
   11276:	68a2      	ldr	r2, [r4, #8]
   11278:	a805      	add	r0, sp, #20
   1127a:	5ad1      	ldrh	r1, [r2, r3]
   1127c:	f016 fe8a 	bl	27f94 <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   11280:	3701      	adds	r7, #1
   11282:	e7ed      	b.n	11260 <dev_comp_data_get+0xcc>
		mod = &elem->vnd_models[i];
   11284:	fb08 f307 	mul.w	r3, r8, r7
   11288:	68e1      	ldr	r1, [r4, #12]
		net_buf_simple_add_le16(buf, mod->vnd.company);
   1128a:	a805      	add	r0, sp, #20
		mod = &elem->vnd_models[i];
   1128c:	18ca      	adds	r2, r1, r3
		net_buf_simple_add_le16(buf, mod->vnd.company);
   1128e:	5ac9      	ldrh	r1, [r1, r3]
		mod = &elem->vnd_models[i];
   11290:	9203      	str	r2, [sp, #12]
		net_buf_simple_add_le16(buf, mod->vnd.company);
   11292:	f016 fe7f 	bl	27f94 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   11296:	9a03      	ldr	r2, [sp, #12]
   11298:	a805      	add	r0, sp, #20
   1129a:	8851      	ldrh	r1, [r2, #2]
   1129c:	f016 fe7a 	bl	27f94 <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   112a0:	3701      	adds	r7, #1
   112a2:	e7e1      	b.n	11268 <dev_comp_data_get+0xd4>
   112a4:	0002d6d3 	.word	0x0002d6d3
   112a8:	0002d68b 	.word	0x0002d68b
   112ac:	0002d6ad 	.word	0x0002d6ad

000112b0 <_mod_pub_set.constprop.29>:
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   112b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112b4:	4605      	mov	r5, r0
	if (!model->pub) {
   112b6:	6880      	ldr	r0, [r0, #8]
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   112b8:	f89d 601c 	ldrb.w	r6, [sp, #28]
   112bc:	4688      	mov	r8, r1
   112be:	4617      	mov	r7, r2
   112c0:	461c      	mov	r4, r3
	if (!model->pub) {
   112c2:	2800      	cmp	r0, #0
   112c4:	d062      	beq.n	1138c <_mod_pub_set.constprop.29+0xdc>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
   112c6:	2b00      	cmp	r3, #0
   112c8:	d15e      	bne.n	11388 <_mod_pub_set.constprop.29+0xd8>
	if (!model->pub->update && period) {
   112ca:	6942      	ldr	r2, [r0, #20]
   112cc:	b90a      	cbnz	r2, 112d2 <_mod_pub_set.constprop.29+0x22>
   112ce:	2e00      	cmp	r6, #0
   112d0:	d15c      	bne.n	1138c <_mod_pub_set.constprop.29+0xdc>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
   112d2:	f1b8 0f00 	cmp.w	r8, #0
   112d6:	d113      	bne.n	11300 <_mod_pub_set.constprop.29+0x50>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   112d8:	8883      	ldrh	r3, [r0, #4]
   112da:	b173      	cbz	r3, 112fa <_mod_pub_set.constprop.29+0x4a>
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   112dc:	6843      	ldr	r3, [r0, #4]
   112de:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   112e2:	6043      	str	r3, [r0, #4]
		model->pub->ttl = 0U;
   112e4:	6883      	ldr	r3, [r0, #8]
   112e6:	f003 53f8 	and.w	r3, r3, #520093696	; 0x1f000000
   112ea:	6083      	str	r3, [r0, #8]
		if (model->pub->update) {
   112ec:	b112      	cbz	r2, 112f4 <_mod_pub_set.constprop.29+0x44>
			k_delayed_work_cancel(&model->pub->timer);
   112ee:	3018      	adds	r0, #24
   112f0:	f00e ffa2 	bl	20238 <k_delayed_work_cancel>
			bt_mesh_model_pub_store(model);
   112f4:	4628      	mov	r0, r5
   112f6:	f015 f873 	bl	263e0 <bt_mesh_model_pub_store>
}
   112fa:	4620      	mov	r0, r4
   112fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_mesh_app_key_exists(app_idx)) {
   11300:	4638      	mov	r0, r7
   11302:	f7fc f81d 	bl	d340 <bt_mesh_app_key_exists>
   11306:	2800      	cmp	r0, #0
   11308:	d042      	beq.n	11390 <_mod_pub_set.constprop.29+0xe0>
	if (BT_MESH_ADDR_IS_VIRTUAL(model->pub->addr)) {
   1130a:	68ab      	ldr	r3, [r5, #8]
   1130c:	8898      	ldrh	r0, [r3, #4]
   1130e:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   11312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   11316:	d205      	bcs.n	11324 <_mod_pub_set.constprop.29+0x74>
		uint8_t *uuid = bt_mesh_va_label_get(model->pub->addr);
   11318:	f7fc fe82 	bl	e020 <bt_mesh_va_label_get>
		if (uuid) {
   1131c:	b110      	cbz	r0, 11324 <_mod_pub_set.constprop.29+0x74>
			bt_mesh_va_del(uuid, NULL);
   1131e:	2100      	movs	r1, #0
   11320:	f7fc fe5a 	bl	dfd8 <bt_mesh_va_del>
	model->pub->addr = pub_addr;
   11324:	68ab      	ldr	r3, [r5, #8]
	model->pub->key = app_idx;
   11326:	88da      	ldrh	r2, [r3, #6]
	model->pub->addr = pub_addr;
   11328:	f8a3 8004 	strh.w	r8, [r3, #4]
	model->pub->key = app_idx;
   1132c:	f367 020b 	bfi	r2, r7, #0, #12
   11330:	80da      	strh	r2, [r3, #6]
	model->pub->cred = cred_flag;
   11332:	f3c2 2207 	ubfx	r2, r2, #8, #8
   11336:	f36f 1204 	bfc	r2, #4, #1
   1133a:	71da      	strb	r2, [r3, #7]
	model->pub->ttl = ttl;
   1133c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   11340:	721a      	strb	r2, [r3, #8]
	model->pub->retransmit = retransmit;
   11342:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->period = period;
   11346:	729e      	strb	r6, [r3, #10]
	model->pub->retransmit = retransmit;
   11348:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
   1134a:	695b      	ldr	r3, [r3, #20]
   1134c:	2b00      	cmp	r3, #0
   1134e:	d0d1      	beq.n	112f4 <_mod_pub_set.constprop.29+0x44>
		period_ms = bt_mesh_model_pub_period_get(model);
   11350:	4628      	mov	r0, r5
   11352:	f7fe f93f 	bl	f5d4 <bt_mesh_model_pub_period_get>
		if (period_ms > 0) {
   11356:	f1b0 0c00 	subs.w	ip, r0, #0
   1135a:	68a8      	ldr	r0, [r5, #8]
   1135c:	ddc7      	ble.n	112ee <_mod_pub_set.constprop.29+0x3e>
			k_delayed_work_submit(&model->pub->timer,
   1135e:	f100 0618 	add.w	r6, r0, #24
			return (t * to_hz + off) / from_hz;
   11362:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   11366:	f240 30e7 	movw	r0, #999	; 0x3e7
   1136a:	2100      	movs	r1, #0
   1136c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11370:	2300      	movs	r3, #0
   11372:	fbc7 010c 	smlal	r0, r1, r7, ip
   11376:	f7ee fec3 	bl	100 <__aeabi_uldivmod>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1137a:	4602      	mov	r2, r0
   1137c:	460b      	mov	r3, r1
   1137e:	4805      	ldr	r0, [pc, #20]	; (11394 <_mod_pub_set.constprop.29+0xe4>)
   11380:	4631      	mov	r1, r6
   11382:	f00e fee9 	bl	20158 <k_delayed_work_submit_to_queue>
   11386:	e7b5      	b.n	112f4 <_mod_pub_set.constprop.29+0x44>
		return STATUS_FEAT_NOT_SUPP;
   11388:	240a      	movs	r4, #10
   1138a:	e7b6      	b.n	112fa <_mod_pub_set.constprop.29+0x4a>
		return STATUS_NVAL_PUB_PARAM;
   1138c:	2407      	movs	r4, #7
   1138e:	e7b4      	b.n	112fa <_mod_pub_set.constprop.29+0x4a>
		return STATUS_INVALID_APPKEY;
   11390:	2403      	movs	r4, #3
   11392:	e7b2      	b.n	112fa <_mod_pub_set.constprop.29+0x4a>
   11394:	20002170 	.word	0x20002170

00011398 <mod_app_unbind>:
{
   11398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1139c:	4614      	mov	r4, r2
   1139e:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   113a0:	ab06      	add	r3, sp, #24
   113a2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   113a6:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   113a8:	4620      	mov	r0, r4
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   113aa:	9303      	str	r3, [sp, #12]
   113ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   113b0:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   113b2:	f016 fdb4 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   113b6:	b203      	sxth	r3, r0
   113b8:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   113ba:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   113bc:	dc06      	bgt.n	113cc <mod_app_unbind+0x34>
		BT_WARN("Prohibited element address");
   113be:	4820      	ldr	r0, [pc, #128]	; (11440 <mod_app_unbind+0xa8>)
   113c0:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model App Unbind Status response");
   113c2:	f010 fd82 	bl	21eca <printk>
}
   113c6:	b00b      	add	sp, #44	; 0x2c
   113c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
   113cc:	4620      	mov	r0, r4
   113ce:	f016 fda6 	bl	27f1e <net_buf_simple_pull_le16>
   113d2:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   113d4:	4628      	mov	r0, r5
	mod_id = buf->data;
   113d6:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   113da:	f7fe facf 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   113de:	b9d8      	cbnz	r0, 11418 <mod_app_unbind+0x80>
		vnd = (buf->len == 4U);
   113e0:	88a3      	ldrh	r3, [r4, #4]
   113e2:	1f1a      	subs	r2, r3, #4
   113e4:	4253      	negs	r3, r2
   113e6:	4153      	adcs	r3, r2
   113e8:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   113ec:	2001      	movs	r0, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   113ee:	e9cd 0900 	strd	r0, r9, [sp]
   113f2:	4633      	mov	r3, r6
   113f4:	462a      	mov	r2, r5
   113f6:	f89d 100b 	ldrb.w	r1, [sp, #11]
   113fa:	a803      	add	r0, sp, #12
   113fc:	f015 f8b8 	bl	26570 <create_mod_app_status.isra.13>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11400:	2300      	movs	r3, #0
   11402:	9300      	str	r3, [sp, #0]
   11404:	aa03      	add	r2, sp, #12
   11406:	4641      	mov	r1, r8
   11408:	4638      	mov	r0, r7
   1140a:	f014 ff94 	bl	26336 <bt_mesh_model_send>
   1140e:	2800      	cmp	r0, #0
   11410:	d0d9      	beq.n	113c6 <mod_app_unbind+0x2e>
		BT_ERR("Unable to send Model App Unbind Status response");
   11412:	2145      	movs	r1, #69	; 0x45
   11414:	480b      	ldr	r0, [pc, #44]	; (11444 <mod_app_unbind+0xac>)
   11416:	e7d4      	b.n	113c2 <mod_app_unbind+0x2a>
	mod = get_model(elem, buf, &vnd);
   11418:	4621      	mov	r1, r4
   1141a:	f10d 020b 	add.w	r2, sp, #11
   1141e:	f015 f886 	bl	2652e <get_model>
	if (!mod) {
   11422:	4604      	mov	r4, r0
   11424:	b140      	cbz	r0, 11438 <mod_app_unbind+0xa0>
	if (!bt_mesh_app_key_exists(key_idx)) {
   11426:	4630      	mov	r0, r6
   11428:	f7fb ff8a 	bl	d340 <bt_mesh_app_key_exists>
   1142c:	b130      	cbz	r0, 1143c <mod_app_unbind+0xa4>
   1142e:	4631      	mov	r1, r6
   11430:	4620      	mov	r0, r4
   11432:	f015 f8c9 	bl	265c8 <mod_unbind.part.2.constprop.28>
   11436:	e7da      	b.n	113ee <mod_app_unbind+0x56>
		status = STATUS_INVALID_MODEL;
   11438:	2002      	movs	r0, #2
   1143a:	e7d8      	b.n	113ee <mod_app_unbind+0x56>
		return STATUS_INVALID_APPKEY;
   1143c:	2003      	movs	r0, #3
   1143e:	e7d6      	b.n	113ee <mod_app_unbind+0x56>
   11440:	0002d974 	.word	0x0002d974
   11444:	0002d8f5 	.word	0x0002d8f5

00011448 <mod_pub_set>:
{
   11448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1144c:	4681      	mov	r9, r0
   1144e:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   11450:	4610      	mov	r0, r2
{
   11452:	468a      	mov	sl, r1
   11454:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   11456:	f016 fd62 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1145a:	b203      	sxth	r3, r0
   1145c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1145e:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11460:	dc06      	bgt.n	11470 <mod_pub_set+0x28>
		BT_WARN("Prohibited element address");
   11462:	2157      	movs	r1, #87	; 0x57
   11464:	482b      	ldr	r0, [pc, #172]	; (11514 <mod_pub_set+0xcc>)
   11466:	f010 fd30 	bl	21eca <printk>
}
   1146a:	b00b      	add	sp, #44	; 0x2c
   1146c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pub_addr = net_buf_simple_pull_le16(buf);
   11470:	4620      	mov	r0, r4
   11472:	f016 fd54 	bl	27f1e <net_buf_simple_pull_le16>
   11476:	4607      	mov	r7, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   11478:	4620      	mov	r0, r4
   1147a:	f016 fd50 	bl	27f1e <net_buf_simple_pull_le16>
   1147e:	4680      	mov	r8, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   11480:	4620      	mov	r0, r4
   11482:	f016 fd44 	bl	27f0e <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   11486:	f1a0 0280 	sub.w	r2, r0, #128	; 0x80
   1148a:	b2d2      	uxtb	r2, r2
   1148c:	2a7e      	cmp	r2, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   1148e:	4683      	mov	fp, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   11490:	d805      	bhi.n	1149e <mod_pub_set+0x56>
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   11492:	4602      	mov	r2, r0
   11494:	2145      	movs	r1, #69	; 0x45
   11496:	4820      	ldr	r0, [pc, #128]	; (11518 <mod_pub_set+0xd0>)
   11498:	f010 fd17 	bl	21eca <printk>
		return;
   1149c:	e7e5      	b.n	1146a <mod_pub_set+0x22>
	pub_period = net_buf_simple_pull_u8(buf);
   1149e:	4620      	mov	r0, r4
   114a0:	f016 fd35 	bl	27f0e <net_buf_simple_pull_u8>
   114a4:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   114a6:	4620      	mov	r0, r4
   114a8:	f016 fd31 	bl	27f0e <net_buf_simple_pull_u8>
	mod_id = buf->data;
   114ac:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   114ae:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   114b0:	4630      	mov	r0, r6
	mod_id = buf->data;
   114b2:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   114b4:	f7fe fa62 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   114b8:	4605      	mov	r5, r0
   114ba:	b9a8      	cbnz	r0, 114e8 <mod_pub_set+0xa0>
		vnd = (buf->len == 4U);
   114bc:	88a3      	ldrh	r3, [r4, #4]
   114be:	1f1a      	subs	r2, r3, #4
   114c0:	4253      	negs	r3, r2
   114c2:	4153      	adcs	r3, r2
   114c4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		status = STATUS_INVALID_ADDRESS;
   114c8:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   114ca:	9b05      	ldr	r3, [sp, #20]
   114cc:	3508      	adds	r5, #8
   114ce:	e9cd 0302 	strd	r0, r3, [sp, #8]
   114d2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   114d6:	9300      	str	r3, [sp, #0]
   114d8:	9501      	str	r5, [sp, #4]
   114da:	463b      	mov	r3, r7
   114dc:	4632      	mov	r2, r6
   114de:	4651      	mov	r1, sl
   114e0:	4648      	mov	r0, r9
   114e2:	f7ff fc6d 	bl	10dc0 <send_mod_pub_status.isra.17>
   114e6:	e7c0      	b.n	1146a <mod_pub_set+0x22>
	mod = get_model(elem, buf, &vnd);
   114e8:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   114ec:	4621      	mov	r1, r4
   114ee:	f015 f81e 	bl	2652e <get_model>
	if (!mod) {
   114f2:	4605      	mov	r5, r0
   114f4:	b160      	cbz	r0, 11510 <mod_pub_set+0xc8>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   114f6:	9b07      	ldr	r3, [sp, #28]
   114f8:	9302      	str	r3, [sp, #8]
   114fa:	9b06      	ldr	r3, [sp, #24]
   114fc:	f3c8 020b 	ubfx	r2, r8, #0, #12
   11500:	e9cd b300 	strd	fp, r3, [sp]
   11504:	4639      	mov	r1, r7
   11506:	f3c8 3300 	ubfx	r3, r8, #12, #1
   1150a:	f7ff fed1 	bl	112b0 <_mod_pub_set.constprop.29>
   1150e:	e7dc      	b.n	114ca <mod_pub_set+0x82>
		status = STATUS_INVALID_MODEL;
   11510:	2002      	movs	r0, #2
   11512:	e7da      	b.n	114ca <mod_pub_set+0x82>
   11514:	0002d974 	.word	0x0002d974
   11518:	0002d92a 	.word	0x0002d92a

0001151c <mod_pub_va_set>:
{
   1151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11520:	4682      	mov	sl, r0
   11522:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   11524:	4610      	mov	r0, r2
{
   11526:	468b      	mov	fp, r1
   11528:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1152a:	f016 fcf8 	bl	27f1e <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1152e:	b203      	sxth	r3, r0
   11530:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   11532:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11534:	dc06      	bgt.n	11544 <mod_pub_va_set+0x28>
		BT_WARN("Prohibited element address");
   11536:	2157      	movs	r1, #87	; 0x57
   11538:	4838      	ldr	r0, [pc, #224]	; (1161c <mod_pub_va_set+0x100>)
   1153a:	f010 fcc6 	bl	21eca <printk>
}
   1153e:	b00b      	add	sp, #44	; 0x2c
   11540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   11544:	2110      	movs	r1, #16
   11546:	4620      	mov	r0, r4
   11548:	f00b fac0 	bl	1cacc <net_buf_simple_pull_mem>
   1154c:	4680      	mov	r8, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   1154e:	4620      	mov	r0, r4
   11550:	f016 fce5 	bl	27f1e <net_buf_simple_pull_le16>
   11554:	4681      	mov	r9, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   11556:	4620      	mov	r0, r4
   11558:	f016 fcd9 	bl	27f0e <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   1155c:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   11560:	b2db      	uxtb	r3, r3
   11562:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   11564:	4607      	mov	r7, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   11566:	d805      	bhi.n	11574 <mod_pub_va_set+0x58>
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   11568:	4602      	mov	r2, r0
   1156a:	2145      	movs	r1, #69	; 0x45
   1156c:	482c      	ldr	r0, [pc, #176]	; (11620 <mod_pub_va_set+0x104>)
   1156e:	f010 fcac 	bl	21eca <printk>
		return;
   11572:	e7e4      	b.n	1153e <mod_pub_va_set+0x22>
	pub_period = net_buf_simple_pull_u8(buf);
   11574:	4620      	mov	r0, r4
   11576:	f016 fcca 	bl	27f0e <net_buf_simple_pull_u8>
   1157a:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   1157c:	4620      	mov	r0, r4
   1157e:	f016 fcc6 	bl	27f0e <net_buf_simple_pull_u8>
	mod_id = buf->data;
   11582:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   11584:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   11586:	4630      	mov	r0, r6
	mod_id = buf->data;
   11588:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   1158a:	f7fe f9f7 	bl	f97c <bt_mesh_elem_find>
	if (!elem) {
   1158e:	4605      	mov	r5, r0
   11590:	b9c0      	cbnz	r0, 115c4 <mod_pub_va_set+0xa8>
		vnd = (buf->len == 4U);
   11592:	88a3      	ldrh	r3, [r4, #4]
		pub_addr = 0U;
   11594:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		vnd = (buf->len == 4U);
   11598:	1f1a      	subs	r2, r3, #4
   1159a:	4253      	negs	r3, r2
   1159c:	4153      	adcs	r3, r2
   1159e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		status = STATUS_INVALID_ADDRESS;
   115a2:	2301      	movs	r3, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   115a4:	9a05      	ldr	r2, [sp, #20]
   115a6:	3508      	adds	r5, #8
   115a8:	e9cd 3202 	strd	r3, r2, [sp, #8]
   115ac:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   115b0:	9300      	str	r3, [sp, #0]
   115b2:	9501      	str	r5, [sp, #4]
   115b4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   115b8:	4632      	mov	r2, r6
   115ba:	4659      	mov	r1, fp
   115bc:	4650      	mov	r0, sl
   115be:	f7ff fbff 	bl	10dc0 <send_mod_pub_status.isra.17>
   115c2:	e7bc      	b.n	1153e <mod_pub_va_set+0x22>
	mod = get_model(elem, buf, &vnd);
   115c4:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   115c8:	4621      	mov	r1, r4
   115ca:	f014 ffb0 	bl	2652e <get_model>
	if (!mod) {
   115ce:	4605      	mov	r5, r0
   115d0:	b918      	cbnz	r0, 115da <mod_pub_va_set+0xbe>
		pub_addr = 0U;
   115d2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		status = STATUS_INVALID_MODEL;
   115d6:	2302      	movs	r3, #2
		goto send_status;
   115d8:	e7e4      	b.n	115a4 <mod_pub_va_set+0x88>
	status = bt_mesh_va_add(label_uuid, &pub_addr);
   115da:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   115de:	4640      	mov	r0, r8
   115e0:	f7fc fcc0 	bl	df64 <bt_mesh_va_add>
   115e4:	4603      	mov	r3, r0
   115e6:	4604      	mov	r4, r0
	if (status != STATUS_SUCCESS) {
   115e8:	2800      	cmp	r0, #0
   115ea:	d1db      	bne.n	115a4 <mod_pub_va_set+0x88>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   115ec:	9b07      	ldr	r3, [sp, #28]
   115ee:	9302      	str	r3, [sp, #8]
   115f0:	9b06      	ldr	r3, [sp, #24]
   115f2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   115f6:	e9cd 7300 	strd	r7, r3, [sp]
   115fa:	f3c9 020b 	ubfx	r2, r9, #0, #12
   115fe:	f3c9 3300 	ubfx	r3, r9, #12, #1
   11602:	4628      	mov	r0, r5
   11604:	f7ff fe54 	bl	112b0 <_mod_pub_set.constprop.29>
	if (status != STATUS_SUCCESS) {
   11608:	4603      	mov	r3, r0
   1160a:	2800      	cmp	r0, #0
   1160c:	d0ca      	beq.n	115a4 <mod_pub_va_set+0x88>
   1160e:	9006      	str	r0, [sp, #24]
		bt_mesh_va_del(label_uuid, NULL);
   11610:	4621      	mov	r1, r4
   11612:	4640      	mov	r0, r8
   11614:	f7fc fce0 	bl	dfd8 <bt_mesh_va_del>
   11618:	9b06      	ldr	r3, [sp, #24]
   1161a:	e7c3      	b.n	115a4 <mod_pub_va_set+0x88>
   1161c:	0002d974 	.word	0x0002d974
   11620:	0002d92a 	.word	0x0002d92a

00011624 <hb_sub_send_status>:
{
   11624:	b570      	push	{r4, r5, r6, lr}
   11626:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   11628:	ab06      	add	r3, sp, #24
{
   1162a:	4614      	mov	r4, r2
   1162c:	4605      	mov	r5, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   1162e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   11632:	a803      	add	r0, sp, #12
{
   11634:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   11636:	f248 013c 	movw	r1, #32828	; 0x803c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   1163a:	9303      	str	r3, [sp, #12]
   1163c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   11640:	f014 fe50 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   11644:	2100      	movs	r1, #0
   11646:	a803      	add	r0, sp, #12
   11648:	f016 fc9d 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, sub->src);
   1164c:	8921      	ldrh	r1, [r4, #8]
   1164e:	a803      	add	r0, sp, #12
   11650:	f016 fca0 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub->dst);
   11654:	8961      	ldrh	r1, [r4, #10]
   11656:	a803      	add	r0, sp, #12
   11658:	f016 fc9c 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->remaining));
   1165c:	6861      	ldr	r1, [r4, #4]
	if (!val) {
   1165e:	b149      	cbz	r1, 11674 <hb_sub_send_status+0x50>
	} else if (val == 0xffff) {
   11660:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11664:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   11666:	bf1d      	ittte	ne
   11668:	fab1 f181 	clzne	r1, r1
   1166c:	f1c1 0120 	rsbne	r1, r1, #32
   11670:	b2c9      	uxtbne	r1, r1
		return 0xff;
   11672:	21ff      	moveq	r1, #255	; 0xff
   11674:	a803      	add	r0, sp, #12
   11676:	f016 fc86 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->count));
   1167a:	89a1      	ldrh	r1, [r4, #12]
	if (!val) {
   1167c:	b149      	cbz	r1, 11692 <hb_sub_send_status+0x6e>
	} else if (val == 0xffff) {
   1167e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11682:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   11684:	bf1d      	ittte	ne
   11686:	fab1 f181 	clzne	r1, r1
   1168a:	f1c1 0120 	rsbne	r1, r1, #32
   1168e:	b2c9      	uxtbne	r1, r1
		return 0xff;
   11690:	21ff      	moveq	r1, #255	; 0xff
   11692:	a803      	add	r0, sp, #12
   11694:	f016 fc77 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->min_hops);
   11698:	7ba1      	ldrb	r1, [r4, #14]
   1169a:	a803      	add	r0, sp, #12
   1169c:	f016 fc73 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->max_hops);
   116a0:	7be1      	ldrb	r1, [r4, #15]
   116a2:	a803      	add	r0, sp, #12
   116a4:	f016 fc6f 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   116a8:	2300      	movs	r3, #0
   116aa:	9300      	str	r3, [sp, #0]
   116ac:	aa03      	add	r2, sp, #12
   116ae:	4631      	mov	r1, r6
   116b0:	4628      	mov	r0, r5
   116b2:	f014 fe40 	bl	26336 <bt_mesh_model_send>
   116b6:	b118      	cbz	r0, 116c0 <hb_sub_send_status+0x9c>
		BT_ERR("Unable to send Heartbeat Subscription Status");
   116b8:	2145      	movs	r1, #69	; 0x45
   116ba:	4802      	ldr	r0, [pc, #8]	; (116c4 <hb_sub_send_status+0xa0>)
   116bc:	f010 fc05 	bl	21eca <printk>
}
   116c0:	b00a      	add	sp, #40	; 0x28
   116c2:	bd70      	pop	{r4, r5, r6, pc}
   116c4:	0002d781 	.word	0x0002d781

000116c8 <heartbeat_sub_set>:
{
   116c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   116cc:	4606      	mov	r6, r0
   116ce:	b085      	sub	sp, #20
	sub_src = net_buf_simple_pull_le16(buf);
   116d0:	4610      	mov	r0, r2
{
   116d2:	4614      	mov	r4, r2
   116d4:	460f      	mov	r7, r1
	sub_src = net_buf_simple_pull_le16(buf);
   116d6:	f016 fc22 	bl	27f1e <net_buf_simple_pull_le16>
   116da:	4680      	mov	r8, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   116dc:	4620      	mov	r0, r4
   116de:	f016 fc1e 	bl	27f1e <net_buf_simple_pull_le16>
   116e2:	4681      	mov	r9, r0
	period_log = net_buf_simple_pull_u8(buf);
   116e4:	4620      	mov	r0, r4
   116e6:	f016 fc12 	bl	27f0e <net_buf_simple_pull_u8>
	if (period_log > 0x11) {
   116ea:	2811      	cmp	r0, #17
	period_log = net_buf_simple_pull_u8(buf);
   116ec:	4604      	mov	r4, r0
	if (period_log > 0x11) {
   116ee:	d907      	bls.n	11700 <heartbeat_sub_set+0x38>
		BT_WARN("Prohibited subscription period 0x%02x", period_log);
   116f0:	4602      	mov	r2, r0
   116f2:	2157      	movs	r1, #87	; 0x57
   116f4:	4815      	ldr	r0, [pc, #84]	; (1174c <heartbeat_sub_set+0x84>)
   116f6:	f010 fbe8 	bl	21eca <printk>
}
   116fa:	b005      	add	sp, #20
   116fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	period = bt_mesh_hb_pwr2(period_log);
   11700:	f014 fe97 	bl	26432 <bt_mesh_hb_pwr2>
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   11704:	4649      	mov	r1, r9
	period = bt_mesh_hb_pwr2(period_log);
   11706:	4605      	mov	r5, r0
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   11708:	4602      	mov	r2, r0
   1170a:	4640      	mov	r0, r8
   1170c:	f7fd fbc6 	bl	ee9c <bt_mesh_hb_sub_set>
	if (status != STATUS_SUCCESS) {
   11710:	2800      	cmp	r0, #0
   11712:	d1f2      	bne.n	116fa <heartbeat_sub_set+0x32>
	bt_mesh_hb_sub_get(&sub);
   11714:	4668      	mov	r0, sp
   11716:	f7fd fc2d 	bl	ef74 <bt_mesh_hb_sub_get>
	if (sub.src == BT_MESH_ADDR_UNASSIGNED || !period_log) {
   1171a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1171e:	b103      	cbz	r3, 11722 <heartbeat_sub_set+0x5a>
   11720:	b914      	cbnz	r4, 11728 <heartbeat_sub_set+0x60>
		sub.min_hops = BT_MESH_TTL_MAX;
   11722:	237f      	movs	r3, #127	; 0x7f
   11724:	f88d 300e 	strb.w	r3, [sp, #14]
	hb_sub_send_status(model, ctx, &sub);
   11728:	466a      	mov	r2, sp
   1172a:	4639      	mov	r1, r7
   1172c:	4630      	mov	r0, r6
   1172e:	f7ff ff79 	bl	11624 <hb_sub_send_status>
	if (sub.src != BT_MESH_ADDR_UNASSIGNED &&
   11732:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   11736:	2b00      	cmp	r3, #0
   11738:	d0df      	beq.n	116fa <heartbeat_sub_set+0x32>
   1173a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1173e:	2b00      	cmp	r3, #0
   11740:	d0db      	beq.n	116fa <heartbeat_sub_set+0x32>
	    sub.dst != BT_MESH_ADDR_UNASSIGNED && !period) {
   11742:	2d00      	cmp	r5, #0
   11744:	d1d9      	bne.n	116fa <heartbeat_sub_set+0x32>
		bt_mesh_hb_sub_reset_count();
   11746:	f7fd fc0f 	bl	ef68 <bt_mesh_hb_sub_reset_count>
   1174a:	e7d6      	b.n	116fa <heartbeat_sub_set+0x32>
   1174c:	0002d7b3 	.word	0x0002d7b3

00011750 <hb_pub_send_status>:
{
   11750:	b5f0      	push	{r4, r5, r6, r7, lr}
   11752:	b08b      	sub	sp, #44	; 0x2c
   11754:	461c      	mov	r4, r3
   11756:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   11758:	ab06      	add	r3, sp, #24
   1175a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   1175e:	4605      	mov	r5, r0
   11760:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   11762:	a803      	add	r0, sp, #12
   11764:	2106      	movs	r1, #6
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   11766:	9303      	str	r3, [sp, #12]
   11768:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   1176c:	f014 fdba 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   11770:	4639      	mov	r1, r7
   11772:	a803      	add	r0, sp, #12
   11774:	f016 fc07 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->dst);
   11778:	8821      	ldrh	r1, [r4, #0]
   1177a:	a803      	add	r0, sp, #12
   1177c:	f016 fc0a 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   11780:	8861      	ldrh	r1, [r4, #2]
	if (!val) {
   11782:	b171      	cbz	r1, 117a2 <hb_pub_send_status+0x52>
	} else if (val == 0x01) {
   11784:	2901      	cmp	r1, #1
   11786:	d00c      	beq.n	117a2 <hb_pub_send_status+0x52>
	} else if (val == 0xffff) {
   11788:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1178c:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
   1178e:	bf1f      	itttt	ne
   11790:	f101 31ff 	addne.w	r1, r1, #4294967295
   11794:	fab1 f181 	clzne	r1, r1
   11798:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
   1179c:	b2c9      	uxtbne	r1, r1
		return 0xff;
   1179e:	bf08      	it	eq
   117a0:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   117a2:	a803      	add	r0, sp, #12
   117a4:	f016 fbef 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(pub->period));
   117a8:	68e1      	ldr	r1, [r4, #12]
	if (!val) {
   117aa:	b149      	cbz	r1, 117c0 <hb_pub_send_status+0x70>
	} else if (val == 0xffff) {
   117ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   117b0:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   117b2:	bf1d      	ittte	ne
   117b4:	fab1 f181 	clzne	r1, r1
   117b8:	f1c1 0120 	rsbne	r1, r1, #32
   117bc:	b2c9      	uxtbne	r1, r1
		return 0xff;
   117be:	21ff      	moveq	r1, #255	; 0xff
   117c0:	a803      	add	r0, sp, #12
   117c2:	f016 fbe0 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, pub->ttl);
   117c6:	7921      	ldrb	r1, [r4, #4]
   117c8:	a803      	add	r0, sp, #12
   117ca:	f016 fbdc 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->feat);
   117ce:	88e1      	ldrh	r1, [r4, #6]
   117d0:	a803      	add	r0, sp, #12
   117d2:	f016 fbdf 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, pub->net_idx);
   117d6:	8921      	ldrh	r1, [r4, #8]
   117d8:	a803      	add	r0, sp, #12
   117da:	f016 fbdb 	bl	27f94 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   117de:	2300      	movs	r3, #0
   117e0:	9300      	str	r3, [sp, #0]
   117e2:	aa03      	add	r2, sp, #12
   117e4:	4631      	mov	r1, r6
   117e6:	4628      	mov	r0, r5
   117e8:	f014 fda5 	bl	26336 <bt_mesh_model_send>
   117ec:	b118      	cbz	r0, 117f6 <hb_pub_send_status+0xa6>
		BT_ERR("Unable to send Heartbeat Publication Status");
   117ee:	2145      	movs	r1, #69	; 0x45
   117f0:	4802      	ldr	r0, [pc, #8]	; (117fc <hb_pub_send_status+0xac>)
   117f2:	f010 fb6a 	bl	21eca <printk>
}
   117f6:	b00b      	add	sp, #44	; 0x2c
   117f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117fa:	bf00      	nop
   117fc:	0002d750 	.word	0x0002d750

00011800 <heartbeat_pub_set>:
{
   11800:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11804:	460e      	mov	r6, r1
	struct hb_pub_param *param = (void *)buf->data;
   11806:	6811      	ldr	r1, [r2, #0]
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   11808:	788c      	ldrb	r4, [r1, #2]
	pub.dst = sys_le16_to_cpu(param->dst);
   1180a:	880b      	ldrh	r3, [r1, #0]
   1180c:	f8ad 3000 	strh.w	r3, [sp]
{
   11810:	4605      	mov	r5, r0
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   11812:	4620      	mov	r0, r4
	pub.dst = sys_le16_to_cpu(param->dst);
   11814:	b29f      	uxth	r7, r3
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   11816:	f014 fe0c 	bl	26432 <bt_mesh_hb_pwr2>
   1181a:	f8ad 0002 	strh.w	r0, [sp, #2]
	pub.period = bt_mesh_hb_pwr2(param->period_log);
   1181e:	f891 8003 	ldrb.w	r8, [r1, #3]
   11822:	4640      	mov	r0, r8
   11824:	f014 fe05 	bl	26432 <bt_mesh_hb_pwr2>
   11828:	9003      	str	r0, [sp, #12]
	pub.ttl = param->ttl;
   1182a:	790b      	ldrb	r3, [r1, #4]
   1182c:	f88d 3004 	strb.w	r3, [sp, #4]
	pub.feat = sys_le16_to_cpu(param->feat);
   11830:	794a      	ldrb	r2, [r1, #5]
   11832:	7988      	ldrb	r0, [r1, #6]
   11834:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   11838:	f8ad 2006 	strh.w	r2, [sp, #6]
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   1183c:	f8b1 1007 	ldrh.w	r1, [r1, #7]
   11840:	f8ad 1008 	strh.w	r1, [sp, #8]
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   11844:	f487 4700 	eor.w	r7, r7, #32768	; 0x8000
   11848:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   1184c:	b28a      	uxth	r2, r1
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   1184e:	d322      	bcc.n	11896 <heartbeat_pub_set+0x96>
	if (param->count_log > 0x11 && param->count_log != 0xff) {
   11850:	3c12      	subs	r4, #18
   11852:	b2e4      	uxtb	r4, r4
   11854:	2cec      	cmp	r4, #236	; 0xec
   11856:	d920      	bls.n	1189a <heartbeat_pub_set+0x9a>
	if (param->period_log > 0x10) {
   11858:	f1b8 0f10 	cmp.w	r8, #16
   1185c:	d81d      	bhi.n	1189a <heartbeat_pub_set+0x9a>
	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
   1185e:	f083 0180 	eor.w	r1, r3, #128	; 0x80
   11862:	297e      	cmp	r1, #126	; 0x7e
   11864:	d807      	bhi.n	11876 <heartbeat_pub_set+0x76>
		BT_ERR("Invalid TTL value 0x%02x", param->ttl);
   11866:	480e      	ldr	r0, [pc, #56]	; (118a0 <heartbeat_pub_set+0xa0>)
   11868:	461a      	mov	r2, r3
   1186a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid NetKeyIndex 0x%04x", pub.net_idx);
   1186c:	f010 fb2d 	bl	21eca <printk>
}
   11870:	b004      	add	sp, #16
   11872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pub.net_idx > 0xfff) {
   11876:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   1187a:	d302      	bcc.n	11882 <heartbeat_pub_set+0x82>
		BT_ERR("Invalid NetKeyIndex 0x%04x", pub.net_idx);
   1187c:	2145      	movs	r1, #69	; 0x45
   1187e:	4809      	ldr	r0, [pc, #36]	; (118a4 <heartbeat_pub_set+0xa4>)
   11880:	e7f4      	b.n	1186c <heartbeat_pub_set+0x6c>
	status = bt_mesh_hb_pub_set(&pub);
   11882:	4668      	mov	r0, sp
   11884:	f7fd fa7e 	bl	ed84 <bt_mesh_hb_pub_set>
   11888:	4602      	mov	r2, r0
	hb_pub_send_status(model, ctx, status, &pub);
   1188a:	466b      	mov	r3, sp
   1188c:	4631      	mov	r1, r6
   1188e:	4628      	mov	r0, r5
   11890:	f7ff ff5e 	bl	11750 <hb_pub_send_status>
   11894:	e7ec      	b.n	11870 <heartbeat_pub_set+0x70>
		status = STATUS_INVALID_ADDRESS;
   11896:	2201      	movs	r2, #1
   11898:	e7f7      	b.n	1188a <heartbeat_pub_set+0x8a>
		status = STATUS_CANNOT_SET;
   1189a:	220f      	movs	r2, #15
   1189c:	e7f5      	b.n	1188a <heartbeat_pub_set+0x8a>
   1189e:	bf00      	nop
   118a0:	0002d92a 	.word	0x0002d92a
   118a4:	0002d55e 	.word	0x0002d55e

000118a8 <bt_mesh_cfg_reset>:
	}
}

void bt_mesh_cfg_reset(void)
{
	bt_mesh_model_foreach(mod_reset, NULL);
   118a8:	2100      	movs	r1, #0
   118aa:	4801      	ldr	r0, [pc, #4]	; (118b0 <bt_mesh_cfg_reset+0x8>)
   118ac:	f7fd be58 	b.w	f560 <bt_mesh_model_foreach>
   118b0:	0002645b 	.word	0x0002645b

000118b4 <health_period_set_unrel>:
}

static void health_period_set_unrel(struct bt_mesh_model *model,
				    struct bt_mesh_msg_ctx *ctx,
				    struct net_buf_simple *buf)
{
   118b4:	b510      	push	{r4, lr}
   118b6:	4604      	mov	r4, r0
	uint8_t period;

	period = net_buf_simple_pull_u8(buf);
   118b8:	4610      	mov	r0, r2
   118ba:	f016 fb28 	bl	27f0e <net_buf_simple_pull_u8>
	if (period > 15) {
   118be:	280f      	cmp	r0, #15
	period = net_buf_simple_pull_u8(buf);
   118c0:	4602      	mov	r2, r0
	if (period > 15) {
   118c2:	d905      	bls.n	118d0 <health_period_set_unrel+0x1c>
		BT_WARN("Prohibited period value %u", period);
   118c4:	2157      	movs	r1, #87	; 0x57
   118c6:	4805      	ldr	r0, [pc, #20]	; (118dc <health_period_set_unrel+0x28>)
	}

	BT_DBG("period %u", period);

	model->pub->period_div = period;
}
   118c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Prohibited period value %u", period);
   118cc:	f010 bafd 	b.w	21eca <printk>
	model->pub->period_div = period;
   118d0:	68a3      	ldr	r3, [r4, #8]
   118d2:	7ad9      	ldrb	r1, [r3, #11]
   118d4:	f360 0103 	bfi	r1, r0, #0, #4
   118d8:	72d9      	strb	r1, [r3, #11]
}
   118da:	bd10      	pop	{r4, pc}
   118dc:	0002dd5b 	.word	0x0002dd5b

000118e0 <health_get_registered>:
{
   118e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   118e4:	4614      	mov	r4, r2
	struct bt_mesh_health_srv *srv = mod->user_data;
   118e6:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
   118ea:	460f      	mov	r7, r1
   118ec:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_FAULT_STATUS);
   118ee:	2105      	movs	r1, #5
   118f0:	4610      	mov	r0, r2
   118f2:	f014 fcf7 	bl	262e4 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   118f6:	2101      	movs	r1, #1
   118f8:	4620      	mov	r0, r4
   118fa:	f00b f905 	bl	1cb08 <net_buf_simple_add>
	net_buf_simple_add_le16(msg, company_id);
   118fe:	4639      	mov	r1, r7
	test_id = net_buf_simple_add(msg, 1);
   11900:	4605      	mov	r5, r0
	net_buf_simple_add_le16(msg, company_id);
   11902:	4620      	mov	r0, r4
   11904:	f016 fb46 	bl	27f94 <net_buf_simple_add_le16>
	if (srv->cb && srv->cb->fault_get_reg) {
   11908:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1190c:	b333      	cbz	r3, 1195c <health_get_registered+0x7c>
   1190e:	685b      	ldr	r3, [r3, #4]
   11910:	b323      	cbz	r3, 1195c <health_get_registered+0x7c>
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   11912:	4620      	mov	r0, r4
   11914:	f016 fb23 	bl	27f5e <net_buf_simple_tailroom>
   11918:	3804      	subs	r0, #4
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   1191a:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return buf->data + buf->len;
   1191e:	6822      	ldr	r2, [r4, #0]
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   11920:	f88d 000f 	strb.w	r0, [sp, #15]
   11924:	88a3      	ldrh	r3, [r4, #4]
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   11926:	f10d 000f 	add.w	r0, sp, #15
   1192a:	9000      	str	r0, [sp, #0]
   1192c:	f8d1 8004 	ldr.w	r8, [r1, #4]
   11930:	4413      	add	r3, r2
   11932:	4639      	mov	r1, r7
   11934:	462a      	mov	r2, r5
   11936:	4630      	mov	r0, r6
   11938:	47c0      	blx	r8
		if (err) {
   1193a:	4602      	mov	r2, r0
   1193c:	b130      	cbz	r0, 1194c <health_get_registered+0x6c>
			BT_ERR("Failed to get faults (err %d)", err);
   1193e:	2145      	movs	r1, #69	; 0x45
   11940:	4809      	ldr	r0, [pc, #36]	; (11968 <health_get_registered+0x88>)
   11942:	f010 fac2 	bl	21eca <printk>
		*test_id = HEALTH_TEST_STANDARD;
   11946:	2300      	movs	r3, #0
   11948:	702b      	strb	r3, [r5, #0]
}
   1194a:	e004      	b.n	11956 <health_get_registered+0x76>
			net_buf_simple_add(msg, fault_count);
   1194c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   11950:	4620      	mov	r0, r4
   11952:	f00b f8d9 	bl	1cb08 <net_buf_simple_add>
}
   11956:	b004      	add	sp, #16
   11958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No callback for getting faults");
   1195c:	2157      	movs	r1, #87	; 0x57
   1195e:	4803      	ldr	r0, [pc, #12]	; (1196c <health_get_registered+0x8c>)
   11960:	f010 fab3 	bl	21eca <printk>
   11964:	e7ef      	b.n	11946 <health_get_registered+0x66>
   11966:	bf00      	nop
   11968:	0002dd14 	.word	0x0002dd14
   1196c:	0002dd37 	.word	0x0002dd37

00011970 <health_fault_test>:
{
   11970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11974:	4615      	mov	r5, r2
   11976:	b0a4      	sub	sp, #144	; 0x90
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11978:	ab06      	add	r3, sp, #24
   1197a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
	struct bt_mesh_health_srv *srv = model->user_data;
   1197e:	f8d0 8018 	ldr.w	r8, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11982:	9303      	str	r3, [sp, #12]
{
   11984:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   11986:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11988:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   1198c:	460e      	mov	r6, r1
	test_id = net_buf_simple_pull_u8(buf);
   1198e:	f016 fabe 	bl	27f0e <net_buf_simple_pull_u8>
   11992:	4607      	mov	r7, r0
	company_id = net_buf_simple_pull_le16(buf);
   11994:	4628      	mov	r0, r5
   11996:	f016 fac2 	bl	27f1e <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   1199a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1199e:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_test) {
   119a0:	b173      	cbz	r3, 119c0 <health_fault_test+0x50>
   119a2:	68db      	ldr	r3, [r3, #12]
   119a4:	b163      	cbz	r3, 119c0 <health_fault_test+0x50>
		err = srv->cb->fault_test(model, test_id, company_id);
   119a6:	4602      	mov	r2, r0
   119a8:	4639      	mov	r1, r7
   119aa:	4620      	mov	r0, r4
   119ac:	4798      	blx	r3
		if (err) {
   119ae:	4602      	mov	r2, r0
   119b0:	b130      	cbz	r0, 119c0 <health_fault_test+0x50>
			BT_WARN("Running fault test failed with err %d", err);
   119b2:	2157      	movs	r1, #87	; 0x57
   119b4:	480c      	ldr	r0, [pc, #48]	; (119e8 <health_fault_test+0x78>)
   119b6:	f010 fa88 	bl	21eca <printk>
}
   119ba:	b024      	add	sp, #144	; 0x90
   119bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	health_get_registered(model, company_id, &sdu);
   119c0:	aa03      	add	r2, sp, #12
   119c2:	4629      	mov	r1, r5
   119c4:	4620      	mov	r0, r4
   119c6:	f7ff ff8b 	bl	118e0 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   119ca:	2300      	movs	r3, #0
   119cc:	9300      	str	r3, [sp, #0]
   119ce:	aa03      	add	r2, sp, #12
   119d0:	4631      	mov	r1, r6
   119d2:	4620      	mov	r0, r4
   119d4:	f014 fcaf 	bl	26336 <bt_mesh_model_send>
   119d8:	2800      	cmp	r0, #0
   119da:	d0ee      	beq.n	119ba <health_fault_test+0x4a>
		BT_ERR("Unable to send Health Current Status response");
   119dc:	2145      	movs	r1, #69	; 0x45
   119de:	4803      	ldr	r0, [pc, #12]	; (119ec <health_fault_test+0x7c>)
   119e0:	f010 fa73 	bl	21eca <printk>
   119e4:	e7e9      	b.n	119ba <health_fault_test+0x4a>
   119e6:	bf00      	nop
   119e8:	0002dcb6 	.word	0x0002dcb6
   119ec:	0002dce1 	.word	0x0002dce1

000119f0 <health_pub_update>:
	{ OP_ATTENTION_SET_UNREL,      1,   attention_set_unrel },
	BT_MESH_MODEL_OP_END,
};

static int health_pub_update(struct bt_mesh_model *mod)
{
   119f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
   119f4:	6886      	ldr	r6, [r0, #8]
	struct bt_mesh_health_srv *srv = mod->user_data;
   119f6:	f8d0 a018 	ldr.w	sl, [r0, #24]
	size_t count;

	BT_DBG("");

	count = health_get_current(mod, pub->msg);
   119fa:	6934      	ldr	r4, [r6, #16]
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   119fc:	2104      	movs	r1, #4
{
   119fe:	4680      	mov	r8, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   11a00:	4620      	mov	r0, r4
   11a02:	f014 fc6f 	bl	262e4 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   11a06:	2101      	movs	r1, #1
   11a08:	4620      	mov	r0, r4
   11a0a:	f00b f87d 	bl	1cb08 <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   11a0e:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
   11a10:	4607      	mov	r7, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   11a12:	4620      	mov	r0, r4
   11a14:	f00b f878 	bl	1cb08 <net_buf_simple_add>
   11a18:	4605      	mov	r5, r0
	comp = bt_mesh_comp_get();
   11a1a:	f7fe f9cb 	bl	fdb4 <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
   11a1e:	f8da 3004 	ldr.w	r3, [sl, #4]
	comp = bt_mesh_comp_get();
   11a22:	4681      	mov	r9, r0
	if (srv->cb && srv->cb->fault_get_cur) {
   11a24:	2b00      	cmp	r3, #0
   11a26:	d03d      	beq.n	11aa4 <health_pub_update+0xb4>
   11a28:	681b      	ldr	r3, [r3, #0]
   11a2a:	2b00      	cmp	r3, #0
   11a2c:	d03a      	beq.n	11aa4 <health_pub_update+0xb4>
		fault_count = net_buf_simple_tailroom(msg);
   11a2e:	4620      	mov	r0, r4
   11a30:	f016 fa95 	bl	27f5e <net_buf_simple_tailroom>
   11a34:	f88d 000d 	strb.w	r0, [sp, #13]
   11a38:	6822      	ldr	r2, [r4, #0]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
   11a3a:	f8da 1004 	ldr.w	r1, [sl, #4]
   11a3e:	88a3      	ldrh	r3, [r4, #4]
   11a40:	f10d 000d 	add.w	r0, sp, #13
   11a44:	9000      	str	r0, [sp, #0]
   11a46:	f8d1 a000 	ldr.w	sl, [r1]
   11a4a:	4413      	add	r3, r2
   11a4c:	4639      	mov	r1, r7
   11a4e:	f10d 020e 	add.w	r2, sp, #14
   11a52:	4640      	mov	r0, r8
   11a54:	47d0      	blx	sl
		if (err) {
   11a56:	4602      	mov	r2, r0
   11a58:	b168      	cbz	r0, 11a76 <health_pub_update+0x86>
			BT_ERR("Failed to get faults (err %d)", err);
   11a5a:	2145      	movs	r1, #69	; 0x45
   11a5c:	4814      	ldr	r0, [pc, #80]	; (11ab0 <health_pub_update+0xc0>)
   11a5e:	f010 fa34 	bl	21eca <printk>
		sys_put_le16(comp->cid, company_ptr);
   11a62:	f8b9 3000 	ldrh.w	r3, [r9]
	dst[0] = val;
   11a66:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   11a68:	0a1b      	lsrs	r3, r3, #8
   11a6a:	706b      	strb	r3, [r5, #1]
		*test_id = HEALTH_TEST_STANDARD;
   11a6c:	2300      	movs	r3, #0
   11a6e:	703b      	strb	r3, [r7, #0]
		fault_count = 0U;
   11a70:	f88d 300d 	strb.w	r3, [sp, #13]
   11a74:	e009      	b.n	11a8a <health_pub_update+0x9a>
			sys_put_le16(company_id, company_ptr);
   11a76:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	dst[0] = val;
   11a7a:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   11a7c:	0a1b      	lsrs	r3, r3, #8
   11a7e:	706b      	strb	r3, [r5, #1]
			net_buf_simple_add(msg, fault_count);
   11a80:	f89d 100d 	ldrb.w	r1, [sp, #13]
   11a84:	4620      	mov	r0, r4
   11a86:	f00b f83f 	bl	1cb08 <net_buf_simple_add>
	return fault_count;
   11a8a:	f89d 300d 	ldrb.w	r3, [sp, #13]
	if (count) {
   11a8e:	7af2      	ldrb	r2, [r6, #11]
   11a90:	3300      	adds	r3, #0
   11a92:	bf18      	it	ne
   11a94:	2301      	movne	r3, #1
   11a96:	f363 1204 	bfi	r2, r3, #4, #1
	} else {
		pub->fast_period = 0U;
	}

	return 0;
}
   11a9a:	2000      	movs	r0, #0
   11a9c:	72f2      	strb	r2, [r6, #11]
   11a9e:	b004      	add	sp, #16
   11aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No callback for getting faults");
   11aa4:	2157      	movs	r1, #87	; 0x57
   11aa6:	4803      	ldr	r0, [pc, #12]	; (11ab4 <health_pub_update+0xc4>)
   11aa8:	f010 fa0f 	bl	21eca <printk>
   11aac:	e7d9      	b.n	11a62 <health_pub_update+0x72>
   11aae:	bf00      	nop
   11ab0:	0002dd14 	.word	0x0002dd14
   11ab4:	0002dd37 	.word	0x0002dd37

00011ab8 <send_health_period_status>:
{
   11ab8:	b530      	push	{r4, r5, lr}
   11aba:	4604      	mov	r4, r0
   11abc:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   11abe:	ab03      	add	r3, sp, #12
   11ac0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   11ac4:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   11ac6:	a805      	add	r0, sp, #20
   11ac8:	f248 0137 	movw	r1, #32823	; 0x8037
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   11acc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11ad0:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   11ad2:	f014 fc07 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, model->pub->period_div);
   11ad6:	68a3      	ldr	r3, [r4, #8]
   11ad8:	7ad9      	ldrb	r1, [r3, #11]
   11ada:	a805      	add	r0, sp, #20
   11adc:	f001 010f 	and.w	r1, r1, #15
   11ae0:	f016 fa51 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11ae4:	2300      	movs	r3, #0
   11ae6:	9300      	str	r3, [sp, #0]
   11ae8:	aa05      	add	r2, sp, #20
   11aea:	4629      	mov	r1, r5
   11aec:	4620      	mov	r0, r4
   11aee:	f014 fc22 	bl	26336 <bt_mesh_model_send>
   11af2:	b118      	cbz	r0, 11afc <send_health_period_status+0x44>
		BT_ERR("Unable to send Health Period Status");
   11af4:	2145      	movs	r1, #69	; 0x45
   11af6:	4802      	ldr	r0, [pc, #8]	; (11b00 <send_health_period_status+0x48>)
   11af8:	f010 f9e7 	bl	21eca <printk>
}
   11afc:	b009      	add	sp, #36	; 0x24
   11afe:	bd30      	pop	{r4, r5, pc}
   11b00:	0002ddf5 	.word	0x0002ddf5

00011b04 <send_attention_status>:
{
   11b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b06:	4605      	mov	r5, r0
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   11b08:	6980      	ldr	r0, [r0, #24]
   11b0a:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_ATTENTION_STATUS, 1);
   11b0c:	ab03      	add	r3, sp, #12
   11b0e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   11b12:	3018      	adds	r0, #24
   11b14:	9305      	str	r3, [sp, #20]
   11b16:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   11b1a:	460f      	mov	r7, r1
   11b1c:	f00e fd58 	bl	205d0 <z_timeout_remaining>
	bt_mesh_model_msg_init(&msg, OP_ATTENTION_STATUS);
   11b20:	f248 0107 	movw	r1, #32775	; 0x8007
   11b24:	4604      	mov	r4, r0
   11b26:	a805      	add	r0, sp, #20
   11b28:	f014 fbdc 	bl	262e4 <bt_mesh_model_msg_init>
			return (uint32_t)((t * to_hz + off) / from_hz);
   11b2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   11b30:	fba4 2300 	umull	r2, r3, r4, r0
   11b34:	0bd1      	lsrs	r1, r2, #15
   11b36:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
   11b3a:	2600      	movs	r6, #0
	time = k_delayed_work_remaining_get(&srv->attn_timer) / 1000;
   11b3c:	fbb1 f1f0 	udiv	r1, r1, r0
	net_buf_simple_add_u8(&msg, time);
   11b40:	a805      	add	r0, sp, #20
   11b42:	b2c9      	uxtb	r1, r1
   11b44:	f016 fa1f 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11b48:	9600      	str	r6, [sp, #0]
   11b4a:	4633      	mov	r3, r6
   11b4c:	aa05      	add	r2, sp, #20
   11b4e:	4639      	mov	r1, r7
   11b50:	4628      	mov	r0, r5
   11b52:	f014 fbf0 	bl	26336 <bt_mesh_model_send>
   11b56:	b118      	cbz	r0, 11b60 <send_attention_status+0x5c>
		BT_ERR("Unable to send Attention Status");
   11b58:	2145      	movs	r1, #69	; 0x45
   11b5a:	4802      	ldr	r0, [pc, #8]	; (11b64 <send_attention_status+0x60>)
   11b5c:	f010 f9b5 	bl	21eca <printk>
}
   11b60:	b009      	add	sp, #36	; 0x24
   11b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b64:	0002ddd0 	.word	0x0002ddd0

00011b68 <health_fault_clear>:
{
   11b68:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b6a:	b0a5      	sub	sp, #148	; 0x94
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11b6c:	ab06      	add	r3, sp, #24
	struct bt_mesh_health_srv *srv = model->user_data;
   11b6e:	6987      	ldr	r7, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11b70:	9303      	str	r3, [sp, #12]
{
   11b72:	4604      	mov	r4, r0
   11b74:	460e      	mov	r6, r1
	company_id = net_buf_simple_pull_le16(buf);
   11b76:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11b78:	f44f 01f0 	mov.w	r1, #7864320	; 0x780000
   11b7c:	e9cd 1304 	strd	r1, r3, [sp, #16]
	company_id = net_buf_simple_pull_le16(buf);
   11b80:	f016 f9cd 	bl	27f1e <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   11b84:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   11b86:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_clear) {
   11b88:	b123      	cbz	r3, 11b94 <health_fault_clear+0x2c>
   11b8a:	689b      	ldr	r3, [r3, #8]
   11b8c:	b113      	cbz	r3, 11b94 <health_fault_clear+0x2c>
		srv->cb->fault_clear(model, company_id);
   11b8e:	4601      	mov	r1, r0
   11b90:	4620      	mov	r0, r4
   11b92:	4798      	blx	r3
	health_get_registered(model, company_id, &sdu);
   11b94:	aa03      	add	r2, sp, #12
   11b96:	4629      	mov	r1, r5
   11b98:	4620      	mov	r0, r4
   11b9a:	f7ff fea1 	bl	118e0 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   11b9e:	2300      	movs	r3, #0
   11ba0:	9300      	str	r3, [sp, #0]
   11ba2:	aa03      	add	r2, sp, #12
   11ba4:	4631      	mov	r1, r6
   11ba6:	4620      	mov	r0, r4
   11ba8:	f014 fbc5 	bl	26336 <bt_mesh_model_send>
   11bac:	b118      	cbz	r0, 11bb6 <health_fault_clear+0x4e>
		BT_ERR("Unable to send Health Current Status response");
   11bae:	2145      	movs	r1, #69	; 0x45
   11bb0:	4802      	ldr	r0, [pc, #8]	; (11bbc <health_fault_clear+0x54>)
   11bb2:	f010 f98a 	bl	21eca <printk>
}
   11bb6:	b025      	add	sp, #148	; 0x94
   11bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11bba:	bf00      	nop
   11bbc:	0002dce1 	.word	0x0002dce1

00011bc0 <health_srv_init>:
		srv->cb->attn_off(srv->model);
	}
}

static int health_srv_init(struct bt_mesh_model *model)
{
   11bc0:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   11bc2:	6984      	ldr	r4, [r0, #24]
{
   11bc4:	4605      	mov	r5, r0

	if (!srv) {
   11bc6:	b934      	cbnz	r4, 11bd6 <health_srv_init+0x16>
		BT_ERR("No Health Server context provided");
   11bc8:	480e      	ldr	r0, [pc, #56]	; (11c04 <health_srv_init+0x44>)
   11bca:	2145      	movs	r1, #69	; 0x45
		return -EINVAL;
	}

	if (!model->pub) {
		BT_ERR("Health Server has no publication support");
   11bcc:	f010 f97d 	bl	21eca <printk>
		return -EINVAL;
   11bd0:	f06f 0015 	mvn.w	r0, #21
	if (bt_mesh_model_in_primary(model)) {
		health_srv = srv;
	}

	return 0;
}
   11bd4:	bd38      	pop	{r3, r4, r5, pc}
	if (!model->pub) {
   11bd6:	6883      	ldr	r3, [r0, #8]
   11bd8:	b913      	cbnz	r3, 11be0 <health_srv_init+0x20>
		BT_ERR("Health Server has no publication support");
   11bda:	2145      	movs	r1, #69	; 0x45
   11bdc:	480a      	ldr	r0, [pc, #40]	; (11c08 <health_srv_init+0x48>)
   11bde:	e7f5      	b.n	11bcc <health_srv_init+0xc>
	model->pub->update = health_pub_update;
   11be0:	4a0a      	ldr	r2, [pc, #40]	; (11c0c <health_srv_init+0x4c>)
   11be2:	615a      	str	r2, [r3, #20]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11be4:	2100      	movs	r1, #0
   11be6:	2230      	movs	r2, #48	; 0x30
   11be8:	f104 0008 	add.w	r0, r4, #8
   11bec:	f012 fad9 	bl	241a2 <memset>
   11bf0:	4b07      	ldr	r3, [pc, #28]	; (11c10 <health_srv_init+0x50>)
   11bf2:	60e3      	str	r3, [r4, #12]
	srv->model = model;
   11bf4:	6025      	str	r5, [r4, #0]
	if (bt_mesh_model_in_primary(model)) {
   11bf6:	7928      	ldrb	r0, [r5, #4]
   11bf8:	b910      	cbnz	r0, 11c00 <health_srv_init+0x40>
		health_srv = srv;
   11bfa:	4b06      	ldr	r3, [pc, #24]	; (11c14 <health_srv_init+0x54>)
   11bfc:	601c      	str	r4, [r3, #0]
   11bfe:	e7e9      	b.n	11bd4 <health_srv_init+0x14>
	return 0;
   11c00:	2000      	movs	r0, #0
   11c02:	e7e7      	b.n	11bd4 <health_srv_init+0x14>
   11c04:	0002dd7b 	.word	0x0002dd7b
   11c08:	0002dda2 	.word	0x0002dda2
   11c0c:	000119f1 	.word	0x000119f1
   11c10:	0002665d 	.word	0x0002665d
   11c14:	20002b50 	.word	0x20002b50

00011c18 <health_fault_get>:
{
   11c18:	b530      	push	{r4, r5, lr}
   11c1a:	b0a5      	sub	sp, #148	; 0x94
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11c1c:	ab06      	add	r3, sp, #24
{
   11c1e:	4604      	mov	r4, r0
   11c20:	460d      	mov	r5, r1
	company_id = net_buf_simple_pull_le16(buf);
   11c22:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11c24:	f44f 01f0 	mov.w	r1, #7864320	; 0x780000
   11c28:	e9cd 1304 	strd	r1, r3, [sp, #16]
   11c2c:	9303      	str	r3, [sp, #12]
	company_id = net_buf_simple_pull_le16(buf);
   11c2e:	f016 f976 	bl	27f1e <net_buf_simple_pull_le16>
	health_get_registered(model, company_id, &sdu);
   11c32:	aa03      	add	r2, sp, #12
   11c34:	4601      	mov	r1, r0
   11c36:	4620      	mov	r0, r4
   11c38:	f7ff fe52 	bl	118e0 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   11c3c:	2300      	movs	r3, #0
   11c3e:	9300      	str	r3, [sp, #0]
   11c40:	aa03      	add	r2, sp, #12
   11c42:	4629      	mov	r1, r5
   11c44:	4620      	mov	r0, r4
   11c46:	f014 fb76 	bl	26336 <bt_mesh_model_send>
   11c4a:	b118      	cbz	r0, 11c54 <health_fault_get+0x3c>
		BT_ERR("Unable to send Health Current Status response");
   11c4c:	2145      	movs	r1, #69	; 0x45
   11c4e:	4802      	ldr	r0, [pc, #8]	; (11c58 <health_fault_get+0x40>)
   11c50:	f010 f93b 	bl	21eca <printk>
}
   11c54:	b025      	add	sp, #148	; 0x94
   11c56:	bd30      	pop	{r4, r5, pc}
   11c58:	0002dce1 	.word	0x0002dce1

00011c5c <bt_mesh_attention>:
const struct bt_mesh_model_cb bt_mesh_health_srv_cb = {
	.init = health_srv_init,
};

void bt_mesh_attention(struct bt_mesh_model *model, uint8_t time)
{
   11c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c60:	460f      	mov	r7, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
   11c62:	4605      	mov	r5, r0
   11c64:	bb60      	cbnz	r0, 11cc0 <bt_mesh_attention+0x64>
		srv = health_srv;
   11c66:	4b1e      	ldr	r3, [pc, #120]	; (11ce0 <bt_mesh_attention+0x84>)
   11c68:	681c      	ldr	r4, [r3, #0]
		if (!srv) {
   11c6a:	b92c      	cbnz	r4, 11c78 <bt_mesh_attention+0x1c>
			BT_WARN("No Health Server available");
   11c6c:	2157      	movs	r1, #87	; 0x57
   11c6e:	481d      	ldr	r0, [pc, #116]	; (11ce4 <bt_mesh_attention+0x88>)

		if (srv->cb && srv->cb->attn_off) {
			srv->cb->attn_off(model);
		}
	}
}
   11c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("No Health Server available");
   11c74:	f010 b929 	b.w	21eca <printk>
		model = srv->model;
   11c78:	6825      	ldr	r5, [r4, #0]
	if (time > 0) {
   11c7a:	f104 0608 	add.w	r6, r4, #8
   11c7e:	b30f      	cbz	r7, 11cc4 <bt_mesh_attention+0x68>
		if (srv->cb && srv->cb->attn_on) {
   11c80:	6863      	ldr	r3, [r4, #4]
   11c82:	b11b      	cbz	r3, 11c8c <bt_mesh_attention+0x30>
   11c84:	691b      	ldr	r3, [r3, #16]
   11c86:	b10b      	cbz	r3, 11c8c <bt_mesh_attention+0x30>
			srv->cb->attn_on(model);
   11c88:	4628      	mov	r0, r5
   11c8a:	4798      	blx	r3
		k_delayed_work_submit(&srv->attn_timer, K_SECONDS(time));
   11c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11c90:	fb03 f107 	mul.w	r1, r3, r7
			return (t * to_hz + off) / from_hz;
   11c94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11c98:	f240 34e7 	movw	r4, #999	; 0x3e7
   11c9c:	2500      	movs	r5, #0
   11c9e:	fbe0 4501 	umlal	r4, r5, r0, r1
   11ca2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11ca6:	2300      	movs	r3, #0
   11ca8:	4620      	mov	r0, r4
   11caa:	4629      	mov	r1, r5
   11cac:	f7ee fa28 	bl	100 <__aeabi_uldivmod>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11cb0:	4602      	mov	r2, r0
   11cb2:	460b      	mov	r3, r1
   11cb4:	480c      	ldr	r0, [pc, #48]	; (11ce8 <bt_mesh_attention+0x8c>)
   11cb6:	4631      	mov	r1, r6
}
   11cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11cbc:	f00e ba4c 	b.w	20158 <k_delayed_work_submit_to_queue>
		srv = model->user_data;
   11cc0:	6984      	ldr	r4, [r0, #24]
   11cc2:	e7da      	b.n	11c7a <bt_mesh_attention+0x1e>
		k_delayed_work_cancel(&srv->attn_timer);
   11cc4:	4630      	mov	r0, r6
   11cc6:	f00e fab7 	bl	20238 <k_delayed_work_cancel>
		if (srv->cb && srv->cb->attn_off) {
   11cca:	6863      	ldr	r3, [r4, #4]
   11ccc:	b12b      	cbz	r3, 11cda <bt_mesh_attention+0x7e>
   11cce:	695b      	ldr	r3, [r3, #20]
   11cd0:	b11b      	cbz	r3, 11cda <bt_mesh_attention+0x7e>
			srv->cb->attn_off(model);
   11cd2:	4628      	mov	r0, r5
}
   11cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			srv->cb->attn_off(model);
   11cd8:	4718      	bx	r3
}
   11cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11cde:	bf00      	nop
   11ce0:	20002b50 	.word	0x20002b50
   11ce4:	0002dc96 	.word	0x0002dc96
   11ce8:	20002170 	.word	0x20002170

00011cec <adv_thread>:

	BT_DBG("Advertising stopped (%u ms)", (uint32_t) k_uptime_delta(&time));
}

static void adv_thread(void *p1, void *p2, void *p3)
{
   11cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cf0:	f240 36e7 	movw	r6, #999	; 0x3e7
   11cf4:	b08b      	sub	sp, #44	; 0x2c
   11cf6:	2700      	movs	r7, #0

	while (1) {
		struct net_buf *buf;

		if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
			buf = net_buf_get(&bt_mesh_adv_queue, K_NO_WAIT);
   11cf8:	2200      	movs	r2, #0
   11cfa:	2300      	movs	r3, #0
   11cfc:	485b      	ldr	r0, [pc, #364]	; (11e6c <adv_thread+0x180>)
			while (!buf) {

				/* Adv timeout may be set by a call from proxy
				 * to bt_mesh_adv_start:
				 */
				adv_timeout = SYS_FOREVER_MS;
   11cfe:	4c5c      	ldr	r4, [pc, #368]	; (11e70 <adv_thread+0x184>)
			buf = net_buf_get(&bt_mesh_adv_queue, K_NO_WAIT);
   11d00:	f00a fc98 	bl	1c634 <net_buf_get>
   11d04:	4605      	mov	r5, r0
			while (!buf) {
   11d06:	2d00      	cmp	r5, #0
   11d08:	d065      	beq.n	11dd6 <adv_thread+0xea>
		if (!buf) {
			continue;
		}

		/* busy == 0 means this was canceled */
		if (BT_MESH_ADV(buf)->busy) {
   11d0a:	696a      	ldr	r2, [r5, #20]
   11d0c:	7a13      	ldrb	r3, [r2, #8]
   11d0e:	0759      	lsls	r1, r3, #29
   11d10:	f140 80a8 	bpl.w	11e64 <adv_thread+0x178>
			BT_MESH_ADV(buf)->busy = 0U;
   11d14:	f36f 0382 	bfc	r3, #2, #1
   11d18:	7213      	strb	r3, [r2, #8]
		((bt_dev.hci_version >= BT_HCI_VERSION_5_0) ?
   11d1a:	4b56      	ldr	r3, [pc, #344]	; (11e74 <adv_thread+0x188>)
	const struct bt_mesh_send_cb *cb = BT_MESH_ADV(buf)->cb;
   11d1c:	f8d5 a014 	ldr.w	sl, [r5, #20]
			       ADV_INT_FAST_MS :
   11d20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	struct bt_le_adv_param param = {};
   11d24:	2214      	movs	r2, #20
			       ADV_INT_FAST_MS :
   11d26:	2b08      	cmp	r3, #8
	struct bt_le_adv_param param = {};
   11d28:	eb0d 0002 	add.w	r0, sp, r2
   11d2c:	f04f 0100 	mov.w	r1, #0
			       ADV_INT_FAST_MS :
   11d30:	bf8c      	ite	hi
   11d32:	f04f 0b14 	movhi.w	fp, #20
   11d36:	f04f 0b64 	movls.w	fp, #100	; 0x64
	void *cb_data = BT_MESH_ADV(buf)->cb_data;
   11d3a:	e9da 8900 	ldrd	r8, r9, [sl]
	struct bt_le_adv_param param = {};
   11d3e:	f012 fa30 	bl	241a2 <memset>
	adv_int = MAX(adv_int_min,
   11d42:	f89a 4009 	ldrb.w	r4, [sl, #9]
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   11d46:	494c      	ldr	r1, [pc, #304]	; (11e78 <adv_thread+0x18c>)
	adv_int = MAX(adv_int_min,
   11d48:	08e3      	lsrs	r3, r4, #3
   11d4a:	3301      	adds	r3, #1
   11d4c:	220a      	movs	r2, #10
   11d4e:	435a      	muls	r2, r3
   11d50:	455a      	cmp	r2, fp
   11d52:	bfa6      	itte	ge
   11d54:	eb03 0383 	addge.w	r3, r3, r3, lsl #2
   11d58:	005b      	lslge	r3, r3, #1
   11d5a:	fa1f f38b 	uxthlt.w	r3, fp
		    ((BT_MESH_TRANSMIT_COUNT(BT_MESH_ADV(buf)->xmit) + 1) *
   11d5e:	f004 0207 	and.w	r2, r4, #7
		     (adv_int + 10)));
   11d62:	f103 040a 	add.w	r4, r3, #10
	duration = (BT_MESH_SCAN_WINDOW_MS +
   11d66:	fb02 4404 	mla	r4, r2, r4, r4
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   11d6a:	f89a 2008 	ldrb.w	r2, [sl, #8]
   11d6e:	f002 0203 	and.w	r2, r2, #3
	duration = (BT_MESH_SCAN_WINDOW_MS +
   11d72:	341e      	adds	r4, #30
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   11d74:	5c8a      	ldrb	r2, [r1, r2]
   11d76:	f88d 200c 	strb.w	r2, [sp, #12]
	ad.data_len = buf->len;
   11d7a:	89aa      	ldrh	r2, [r5, #12]
   11d7c:	f88d 200d 	strb.w	r2, [sp, #13]
	ad.data = buf->data;
   11d80:	68aa      	ldr	r2, [r5, #8]
   11d82:	9204      	str	r2, [sp, #16]
	duration = (BT_MESH_SCAN_WINDOW_MS +
   11d84:	b224      	sxth	r4, r4
	param.interval_min = BT_MESH_ADV_SCAN_UNIT(adv_int);
   11d86:	2205      	movs	r2, #5
   11d88:	00db      	lsls	r3, r3, #3
   11d8a:	fbb3 f3f2 	udiv	r3, r3, r2
	param.interval_max = param.interval_min;
   11d8e:	e9cd 3307 	strd	r3, r3, [sp, #28]
   11d92:	f016 fd6a 	bl	2886a <z_impl_k_uptime_ticks>
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
   11d96:	2300      	movs	r3, #0
   11d98:	9300      	str	r3, [sp, #0]
   11d9a:	2201      	movs	r2, #1
   11d9c:	a903      	add	r1, sp, #12
   11d9e:	a805      	add	r0, sp, #20
   11da0:	f7f5 fb9e 	bl	74e0 <bt_le_adv_start>
   11da4:	4682      	mov	sl, r0
	net_buf_unref(buf);
   11da6:	4628      	mov	r0, r5
   11da8:	f00a fd5e 	bl	1c868 <net_buf_unref>

static inline void bt_mesh_adv_send_start(uint16_t duration, int err,
					  const struct bt_mesh_send_cb *cb,
					  void *cb_data)
{
	if (cb && cb->start) {
   11dac:	f1b8 0f00 	cmp.w	r8, #0
   11db0:	d006      	beq.n	11dc0 <adv_thread+0xd4>
   11db2:	f8d8 3000 	ldr.w	r3, [r8]
   11db6:	b11b      	cbz	r3, 11dc0 <adv_thread+0xd4>
		cb->start(duration, err, cb_data);
   11db8:	b2a0      	uxth	r0, r4
   11dba:	464a      	mov	r2, r9
   11dbc:	4651      	mov	r1, sl
   11dbe:	4798      	blx	r3
	if (err) {
   11dc0:	f1ba 0f00 	cmp.w	sl, #0
   11dc4:	d02c      	beq.n	11e20 <adv_thread+0x134>
		BT_ERR("Advertising failed: err %d", err);
   11dc6:	482d      	ldr	r0, [pc, #180]	; (11e7c <adv_thread+0x190>)
   11dc8:	4652      	mov	r2, sl
   11dca:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Stopping advertising failed: err %d", err);
   11dcc:	f010 f87d 	bl	21eca <printk>
	z_impl_k_yield();
   11dd0:	f00d fe10 	bl	1f9f4 <z_impl_k_yield>
   11dd4:	e790      	b.n	11cf8 <adv_thread+0xc>
				adv_timeout = SYS_FOREVER_MS;
   11dd6:	f04f 33ff 	mov.w	r3, #4294967295
   11dda:	6023      	str	r3, [r4, #0]
				bt_mesh_proxy_adv_start();
   11ddc:	f003 fbac 	bl	15538 <bt_mesh_proxy_adv_start>
						  SYS_TIMEOUT_MS(adv_timeout));
   11de0:	6821      	ldr	r1, [r4, #0]
				buf = net_buf_get(&bt_mesh_adv_queue,
   11de2:	1c48      	adds	r0, r1, #1
   11de4:	d017      	beq.n	11e16 <adv_thread+0x12a>
						  SYS_TIMEOUT_MS(adv_timeout));
   11de6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   11dea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11dee:	46b0      	mov	r8, r6
   11df0:	46b9      	mov	r9, r7
   11df2:	fbc0 8901 	smlal	r8, r9, r0, r1
   11df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11dfa:	2300      	movs	r3, #0
   11dfc:	4640      	mov	r0, r8
   11dfe:	4649      	mov	r1, r9
   11e00:	f7ee f97e 	bl	100 <__aeabi_uldivmod>
   11e04:	4602      	mov	r2, r0
   11e06:	460b      	mov	r3, r1
				buf = net_buf_get(&bt_mesh_adv_queue,
   11e08:	4818      	ldr	r0, [pc, #96]	; (11e6c <adv_thread+0x180>)
   11e0a:	f00a fc13 	bl	1c634 <net_buf_get>
   11e0e:	4605      	mov	r5, r0
				bt_le_adv_stop();
   11e10:	f7f5 fb74 	bl	74fc <bt_le_adv_stop>
   11e14:	e777      	b.n	11d06 <adv_thread+0x1a>
				buf = net_buf_get(&bt_mesh_adv_queue,
   11e16:	f04f 32ff 	mov.w	r2, #4294967295
   11e1a:	f04f 33ff 	mov.w	r3, #4294967295
   11e1e:	e7f3      	b.n	11e08 <adv_thread+0x11c>
	k_sleep(K_MSEC(duration));
   11e20:	b224      	sxth	r4, r4
   11e22:	17e5      	asrs	r5, r4, #31
   11e24:	03e9      	lsls	r1, r5, #15
   11e26:	03e0      	lsls	r0, r4, #15
   11e28:	1980      	adds	r0, r0, r6
   11e2a:	ea41 4154 	orr.w	r1, r1, r4, lsr #17
   11e2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11e32:	f04f 0300 	mov.w	r3, #0
   11e36:	eb47 0101 	adc.w	r1, r7, r1
   11e3a:	f7ee f961 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   11e3e:	f00d fee7 	bl	1fc10 <z_impl_k_sleep>
	err = bt_le_adv_stop();
   11e42:	f7f5 fb5b 	bl	74fc <bt_le_adv_stop>
   11e46:	4604      	mov	r4, r0
}

static inline void bt_mesh_adv_send_end(
	int err, const struct bt_mesh_send_cb *cb, void *cb_data)
{
	if (cb && cb->end) {
   11e48:	f1b8 0f00 	cmp.w	r8, #0
   11e4c:	d004      	beq.n	11e58 <adv_thread+0x16c>
   11e4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   11e52:	b10b      	cbz	r3, 11e58 <adv_thread+0x16c>
		cb->end(err, cb_data);
   11e54:	4649      	mov	r1, r9
   11e56:	4798      	blx	r3
	if (err) {
   11e58:	2c00      	cmp	r4, #0
   11e5a:	d0b9      	beq.n	11dd0 <adv_thread+0xe4>
		BT_ERR("Stopping advertising failed: err %d", err);
   11e5c:	4622      	mov	r2, r4
   11e5e:	2145      	movs	r1, #69	; 0x45
   11e60:	4807      	ldr	r0, [pc, #28]	; (11e80 <adv_thread+0x194>)
   11e62:	e7b3      	b.n	11dcc <adv_thread+0xe0>
			adv_send(buf);
		} else {
			net_buf_unref(buf);
   11e64:	4628      	mov	r0, r5
   11e66:	f00a fcff 	bl	1c868 <net_buf_unref>
   11e6a:	e7b1      	b.n	11dd0 <adv_thread+0xe4>
   11e6c:	20000fa4 	.word	0x20000fa4
   11e70:	20002b54 	.word	0x20002b54
   11e74:	20000198 	.word	0x20000198
   11e78:	0002bec7 	.word	0x0002bec7
   11e7c:	0002de31 	.word	0x0002de31
   11e80:	0002de51 	.word	0x0002de51

00011e84 <bt_mesh_adv_update>:
	z_impl_k_queue_cancel_wait(queue);
   11e84:	4801      	ldr	r0, [pc, #4]	; (11e8c <bt_mesh_adv_update+0x8>)
   11e86:	f00c bdfd 	b.w	1ea84 <z_impl_k_queue_cancel_wait>
   11e8a:	bf00      	nop
   11e8c:	20000fa4 	.word	0x20000fa4

00011e90 <bt_mesh_adv_init>:
{
	/* Will be handled automatically */
}

void bt_mesh_adv_init(void)
{
   11e90:	b510      	push	{r4, lr}
   11e92:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11e94:	4c0e      	ldr	r4, [pc, #56]	; (11ed0 <bt_mesh_adv_init+0x40>)
   11e96:	490f      	ldr	r1, [pc, #60]	; (11ed4 <bt_mesh_adv_init+0x44>)
   11e98:	f04f 32ff 	mov.w	r2, #4294967295
   11e9c:	f04f 33ff 	mov.w	r3, #4294967295
   11ea0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11ea4:	2300      	movs	r3, #0
   11ea6:	f06f 0208 	mvn.w	r2, #8
   11eaa:	e9cd 2303 	strd	r2, r3, [sp, #12]
   11eae:	e9cd 3301 	strd	r3, r3, [sp, #4]
   11eb2:	9300      	str	r3, [sp, #0]
   11eb4:	f44f 7240 	mov.w	r2, #768	; 0x300
   11eb8:	4b07      	ldr	r3, [pc, #28]	; (11ed8 <bt_mesh_adv_init+0x48>)
   11eba:	4620      	mov	r0, r4
   11ebc:	f00e f80e 	bl	1fedc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   11ec0:	4906      	ldr	r1, [pc, #24]	; (11edc <bt_mesh_adv_init+0x4c>)
   11ec2:	4620      	mov	r0, r4
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_KERNEL_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_FOREVER);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}
   11ec4:	b008      	add	sp, #32
   11ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11eca:	f016 bc53 	b.w	28774 <z_impl_k_thread_name_set>
   11ece:	bf00      	nop
   11ed0:	20001e30 	.word	0x20001e30
   11ed4:	20004ca0 	.word	0x20004ca0
   11ed8:	00011ced 	.word	0x00011ced
   11edc:	0002de7a 	.word	0x0002de7a

00011ee0 <bt_mesh_adv_enable>:

int bt_mesh_adv_enable(void)
{
   11ee0:	b508      	push	{r3, lr}
	z_impl_k_thread_start(thread);
   11ee2:	4802      	ldr	r0, [pc, #8]	; (11eec <bt_mesh_adv_enable+0xc>)
   11ee4:	f016 fc4b 	bl	2877e <z_impl_k_thread_start>
	k_thread_start(&adv_thread_data);
	return 0;
}
   11ee8:	2000      	movs	r0, #0
   11eea:	bd08      	pop	{r3, pc}
   11eec:	20001e30 	.word	0x20001e30

00011ef0 <bt_mesh_adv_start>:

int bt_mesh_adv_start(const struct bt_le_adv_param *param, int32_t duration,
		      const struct bt_data *ad, size_t ad_len,
		      const struct bt_data *sd, size_t sd_len)
{
   11ef0:	b430      	push	{r4, r5}
	adv_timeout = duration;
   11ef2:	4d05      	ldr	r5, [pc, #20]	; (11f08 <bt_mesh_adv_start+0x18>)
{
   11ef4:	4614      	mov	r4, r2
	adv_timeout = duration;
   11ef6:	6029      	str	r1, [r5, #0]
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   11ef8:	9903      	ldr	r1, [sp, #12]
{
   11efa:	461a      	mov	r2, r3
   11efc:	9b02      	ldr	r3, [sp, #8]
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   11efe:	9102      	str	r1, [sp, #8]
   11f00:	4621      	mov	r1, r4
}
   11f02:	bc30      	pop	{r4, r5}
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   11f04:	f7f5 baec 	b.w	74e0 <bt_le_adv_start>
   11f08:	20002b54 	.word	0x20002b54

00011f0c <atomic_test_and_clear_bit.constprop.5>:
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
   11f0c:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   11f0e:	2301      	movs	r3, #1
   11f10:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11f14:	4b0a      	ldr	r3, [pc, #40]	; (11f40 <atomic_test_and_clear_bit.constprop.5+0x34>)
   11f16:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11f1a:	43c1      	mvns	r1, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11f1c:	e853 2f00 	ldrex	r2, [r3]
   11f20:	ea02 0c01 	and.w	ip, r2, r1
   11f24:	e843 ce00 	strex	lr, ip, [r3]
   11f28:	f1be 0f00 	cmp.w	lr, #0
   11f2c:	d1f6      	bne.n	11f1c <atomic_test_and_clear_bit.constprop.5+0x10>
   11f2e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   11f32:	4202      	tst	r2, r0
}
   11f34:	bf14      	ite	ne
   11f36:	2001      	movne	r0, #1
   11f38:	2000      	moveq	r0, #0
   11f3a:	f85d fb04 	ldr.w	pc, [sp], #4
   11f3e:	bf00      	nop
   11f40:	20002b58 	.word	0x20002b58

00011f44 <mesh_commit>:

	return 0;
}

static int mesh_commit(void)
{
   11f44:	b508      	push	{r3, lr}
	if (!bt_mesh_subnet_next(NULL)) {
   11f46:	2000      	movs	r0, #0
   11f48:	f7fa ff50 	bl	cdec <bt_mesh_subnet_next>
   11f4c:	b1a8      	cbz	r0, 11f7a <mesh_commit+0x36>
		/* Nothing to do since we're not yet provisioned */
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		bt_mesh_proxy_prov_disable(true);
   11f4e:	2001      	movs	r0, #1
   11f50:	f003 f9fc 	bl	1534c <bt_mesh_proxy_prov_disable>
	}

	bt_mesh_net_settings_commit();
   11f54:	f7fa fd26 	bl	c9a4 <bt_mesh_net_settings_commit>
	bt_mesh_model_settings_commit();
   11f58:	f7fd ff38 	bl	fdcc <bt_mesh_model_settings_commit>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11f5c:	f3bf 8f5b 	dmb	ish
   11f60:	4b07      	ldr	r3, [pc, #28]	; (11f80 <mesh_commit+0x3c>)
   11f62:	e853 2f00 	ldrex	r2, [r3]
   11f66:	f042 0201 	orr.w	r2, r2, #1
   11f6a:	e843 2100 	strex	r1, r2, [r3]
   11f6e:	2900      	cmp	r1, #0
   11f70:	d1f7      	bne.n	11f62 <mesh_commit+0x1e>
   11f72:	f3bf 8f5b 	dmb	ish

	atomic_set_bit(bt_mesh.flags, BT_MESH_VALID);

	bt_mesh_start();
   11f76:	f7f9 f92f 	bl	b1d8 <bt_mesh_start>

	return 0;
}
   11f7a:	2000      	movs	r0, #0
   11f7c:	bd08      	pop	{r3, pc}
   11f7e:	bf00      	nop
   11f80:	20001ac0 	.word	0x20001ac0

00011f84 <bt_mesh_settings_set>:
{
   11f84:	b538      	push	{r3, r4, r5, lr}
   11f86:	4604      	mov	r4, r0
   11f88:	4608      	mov	r0, r1
   11f8a:	4611      	mov	r1, r2
	len = read_cb(cb_arg, out, read_len);
   11f8c:	461a      	mov	r2, r3
{
   11f8e:	461d      	mov	r5, r3
	len = read_cb(cb_arg, out, read_len);
   11f90:	47a0      	blx	r4
	if (len < 0) {
   11f92:	1e04      	subs	r4, r0, #0
   11f94:	da06      	bge.n	11fa4 <bt_mesh_settings_set+0x20>
		BT_ERR("Failed to read value (err %zd)", len);
   11f96:	4622      	mov	r2, r4
   11f98:	2145      	movs	r1, #69	; 0x45
   11f9a:	4809      	ldr	r0, [pc, #36]	; (11fc0 <bt_mesh_settings_set+0x3c>)
   11f9c:	f00f ff95 	bl	21eca <printk>
}
   11fa0:	4620      	mov	r0, r4
   11fa2:	bd38      	pop	{r3, r4, r5, pc}
	if (len != read_len) {
   11fa4:	42a5      	cmp	r5, r4
   11fa6:	d008      	beq.n	11fba <bt_mesh_settings_set+0x36>
		BT_ERR("Unexpected value length (%zd != %zu)", len, read_len);
   11fa8:	4622      	mov	r2, r4
   11faa:	462b      	mov	r3, r5
   11fac:	2145      	movs	r1, #69	; 0x45
   11fae:	4805      	ldr	r0, [pc, #20]	; (11fc4 <bt_mesh_settings_set+0x40>)
   11fb0:	f00f ff8b 	bl	21eca <printk>
		return -EINVAL;
   11fb4:	f06f 0415 	mvn.w	r4, #21
   11fb8:	e7f2      	b.n	11fa0 <bt_mesh_settings_set+0x1c>
	return 0;
   11fba:	2400      	movs	r4, #0
   11fbc:	e7f0      	b.n	11fa0 <bt_mesh_settings_set+0x1c>
   11fbe:	bf00      	nop
   11fc0:	0002d3aa 	.word	0x0002d3aa
   11fc4:	0002de99 	.word	0x0002de99

00011fc8 <bt_mesh_settings_store_schedule>:
			      BIT(BT_MESH_SETTINGS_HB_PUB_PENDING)   |      \
			      BIT(BT_MESH_SETTINGS_CFG_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_MOD_PENDING))

void bt_mesh_settings_store_schedule(enum bt_mesh_settings_flag flag)
{
   11fc8:	b570      	push	{r4, r5, r6, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11fca:	4a2a      	ldr	r2, [pc, #168]	; (12074 <bt_mesh_settings_store_schedule+0xac>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11fcc:	f3bf 8f5b 	dmb	ish
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11fd0:	0943      	lsrs	r3, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   11fd2:	2101      	movs	r1, #1
   11fd4:	f000 001f 	and.w	r0, r0, #31
   11fd8:	fa01 f000 	lsl.w	r0, r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11fdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11fe0:	e853 1f00 	ldrex	r1, [r3]
   11fe4:	4301      	orrs	r1, r0
   11fe6:	e843 1400 	strex	r4, r1, [r3]
   11fea:	2c00      	cmp	r4, #0
   11fec:	d1f8      	bne.n	11fe0 <bt_mesh_settings_store_schedule+0x18>
   11fee:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11ff2:	f3bf 8f5b 	dmb	ish
   11ff6:	6813      	ldr	r3, [r2, #0]
   11ff8:	f3bf 8f5b 	dmb	ish
	int32_t timeout_ms, remaining;

	atomic_set_bit(pending_flags, flag);

	if (atomic_get(pending_flags) & NO_WAIT_PENDING_BITS) {
   11ffc:	f413 6f87 	tst.w	r3, #1080	; 0x438
   12000:	d132      	bne.n	12068 <bt_mesh_settings_store_schedule+0xa0>
   12002:	f3bf 8f5b 	dmb	ish
   12006:	6813      	ldr	r3, [r2, #0]
   12008:	f3bf 8f5b 	dmb	ish
		timeout_ms = 0;
	} else if (atomic_test_bit(pending_flags,
   1200c:	07db      	lsls	r3, r3, #31
   1200e:	d508      	bpl.n	12022 <bt_mesh_settings_store_schedule+0x5a>
   12010:	f3bf 8f5b 	dmb	ish
   12014:	4b18      	ldr	r3, [pc, #96]	; (12078 <bt_mesh_settings_store_schedule+0xb0>)
   12016:	681b      	ldr	r3, [r3, #0]
   12018:	f3bf 8f5b 	dmb	ish
				   BT_MESH_SETTINGS_RPL_PENDING) &&
   1201c:	f413 7fe3 	tst.w	r3, #454	; 0x1c6
   12020:	d024      	beq.n	1206c <bt_mesh_settings_store_schedule+0xa4>
		   (!(atomic_get(bt_mesh.flags) & GENERIC_PENDING_BITS) ||
		    (CONFIG_BT_MESH_RPL_STORE_TIMEOUT <
		     CONFIG_BT_MESH_STORE_TIMEOUT))) {
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
	} else {
		timeout_ms = CONFIG_BT_MESH_STORE_TIMEOUT * MSEC_PER_SEC;
   12022:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   12026:	4815      	ldr	r0, [pc, #84]	; (1207c <bt_mesh_settings_store_schedule+0xb4>)
   12028:	f00e fad2 	bl	205d0 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1202c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12030:	fba0 0103 	umull	r0, r1, r0, r3
   12034:	0bc3      	lsrs	r3, r0, #15
	}

	remaining = k_delayed_work_remaining_get(&pending_store);
	if ((remaining > 0) && remaining < timeout_ms) {
   12036:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   1203a:	d001      	beq.n	12040 <bt_mesh_settings_store_schedule+0x78>
   1203c:	429c      	cmp	r4, r3
   1203e:	dc18      	bgt.n	12072 <bt_mesh_settings_store_schedule+0xaa>
			return (t * to_hz + off) / from_hz;
   12040:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   12044:	f240 30e7 	movw	r0, #999	; 0x3e7
   12048:	2100      	movs	r1, #0
   1204a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1204e:	2300      	movs	r3, #0
   12050:	fbc5 0104 	smlal	r0, r1, r5, r4
   12054:	f7ee f854 	bl	100 <__aeabi_uldivmod>
	}

	BT_DBG("Waiting %d seconds", timeout_ms / MSEC_PER_SEC);

	k_delayed_work_submit(&pending_store, K_MSEC(timeout_ms));
}
   12058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1205c:	4602      	mov	r2, r0
   1205e:	460b      	mov	r3, r1
   12060:	4807      	ldr	r0, [pc, #28]	; (12080 <bt_mesh_settings_store_schedule+0xb8>)
   12062:	4908      	ldr	r1, [pc, #32]	; (12084 <bt_mesh_settings_store_schedule+0xbc>)
   12064:	f00e b878 	b.w	20158 <k_delayed_work_submit_to_queue>
		timeout_ms = 0;
   12068:	2400      	movs	r4, #0
   1206a:	e7dc      	b.n	12026 <bt_mesh_settings_store_schedule+0x5e>
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
   1206c:	f241 3488 	movw	r4, #5000	; 0x1388
   12070:	e7d9      	b.n	12026 <bt_mesh_settings_store_schedule+0x5e>
}
   12072:	bd70      	pop	{r4, r5, r6, pc}
   12074:	20002b58 	.word	0x20002b58
   12078:	20001ac0 	.word	0x20001ac0
   1207c:	20001ed0 	.word	0x20001ed0
   12080:	20002170 	.word	0x20002170
   12084:	20001ec0 	.word	0x20001ec0

00012088 <bt_mesh_settings_init>:
		bt_mesh_cdb_pending_store();
	}
}

void bt_mesh_settings_init(void)
{
   12088:	b508      	push	{r3, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1208a:	4b04      	ldr	r3, [pc, #16]	; (1209c <bt_mesh_settings_init+0x14>)
   1208c:	2230      	movs	r2, #48	; 0x30
   1208e:	2100      	movs	r1, #0
   12090:	4618      	mov	r0, r3
   12092:	f012 f886 	bl	241a2 <memset>
   12096:	4a02      	ldr	r2, [pc, #8]	; (120a0 <bt_mesh_settings_init+0x18>)
   12098:	6042      	str	r2, [r0, #4]
	k_delayed_work_init(&pending_store, store_pending);
}
   1209a:	bd08      	pop	{r3, pc}
   1209c:	20001ec0 	.word	0x20001ec0
   120a0:	0002670b 	.word	0x0002670b

000120a4 <adv_alloc>:
	uint16_t app_idx;
} adv_pool[FRIEND_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	adv_pool[id].app_idx = BT_MESH_KEY_UNUSED;
   120a4:	4b03      	ldr	r3, [pc, #12]	; (120b4 <adv_alloc+0x10>)
   120a6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   120aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   120ae:	8183      	strh	r3, [r0, #12]
	return &adv_pool[id].adv;
}
   120b0:	4770      	bx	lr
   120b2:	bf00      	nop
   120b4:	20002b5c 	.word	0x20002b5c

000120b8 <send_friend_clear>:
static const struct bt_mesh_send_cb clear_sent_cb = {
	.end = friend_clear_sent,
};

static void send_friend_clear(struct bt_mesh_friend *frnd)
{
   120b8:	b510      	push	{r4, lr}
	struct bt_mesh_msg_ctx ctx = {
		.net_idx  = frnd->subnet->net_idx,
   120ba:	6902      	ldr	r2, [r0, #16]
{
   120bc:	b08a      	sub	sp, #40	; 0x28
	struct bt_mesh_msg_ctx ctx = {
   120be:	8b91      	ldrh	r1, [r2, #28]
   120c0:	f8ad 1010 	strh.w	r1, [sp, #16]
   120c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   120c8:	2300      	movs	r3, #0
   120ca:	f8ad 1012 	strh.w	r1, [sp, #18]
   120ce:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
   120d2:	f8ad 301a 	strh.w	r3, [sp, #26]
   120d6:	f8cd 3016 	str.w	r3, [sp, #22]
   120da:	f8ad 1014 	strh.w	r1, [sp, #20]
		.app_idx  = BT_MESH_KEY_UNUSED,
		.addr     = frnd->clear.frnd,
		.send_ttl = BT_MESH_TTL_MAX,
	};
	struct bt_mesh_net_tx tx = {
   120de:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
   120e0:	217f      	movs	r1, #127	; 0x7f
	struct bt_mesh_net_tx tx = {
   120e2:	ab04      	add	r3, sp, #16
{
   120e4:	4604      	mov	r4, r0
	struct bt_mesh_msg_ctx ctx = {
   120e6:	f88d 101b 	strb.w	r1, [sp, #27]
	struct bt_mesh_net_tx tx = {
   120ea:	9207      	str	r2, [sp, #28]
   120ec:	9308      	str	r3, [sp, #32]
		.sub  = frnd->subnet,
		.ctx  = &ctx,
		.src  = bt_mesh_primary_addr(),
   120ee:	f7fd fc3f 	bl	f970 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   120f2:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   120f6:	f7f9 f991 	bl	b41c <bt_mesh_net_transmit_get>
	};
	struct bt_mesh_ctl_friend_clear req = {
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
   120fa:	8822      	ldrh	r2, [r4, #0]
	struct bt_mesh_net_tx tx = {
   120fc:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
   12100:	0213      	lsls	r3, r2, #8
   12102:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
   12106:	8962      	ldrh	r2, [r4, #10]
	struct bt_mesh_ctl_friend_clear req = {
   12108:	f8ad 300c 	strh.w	r3, [sp, #12]
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
   1210c:	0213      	lsls	r3, r2, #8
   1210e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	struct bt_mesh_ctl_friend_clear req = {
   12112:	f8ad 300e 	strh.w	r3, [sp, #14]
	};

	BT_DBG("");

	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR, &req,
   12116:	4b05      	ldr	r3, [pc, #20]	; (1212c <send_friend_clear+0x74>)
   12118:	9300      	str	r3, [sp, #0]
   1211a:	9401      	str	r4, [sp, #4]
   1211c:	2304      	movs	r3, #4
   1211e:	aa03      	add	r2, sp, #12
   12120:	2105      	movs	r1, #5
   12122:	a807      	add	r0, sp, #28
   12124:	f7fb fe4c 	bl	ddc0 <bt_mesh_ctl_send>
			 sizeof(req), &clear_sent_cb, frnd);
}
   12128:	b00a      	add	sp, #40	; 0x28
   1212a:	bd10      	pop	{r4, pc}
   1212c:	00029888 	.word	0x00029888

00012130 <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12130:	4601      	mov	r1, r0
   12132:	4801      	ldr	r0, [pc, #4]	; (12138 <k_delayed_work_submit+0x8>)
   12134:	f00e b810 	b.w	20158 <k_delayed_work_submit_to_queue>
   12138:	20002170 	.word	0x20002170

0001213c <buf_send_end>:
{
	struct bt_mesh_friend *frnd = user_data;

	BT_DBG("err %d", err);

	if (frnd->pending_req) {
   1213c:	78cb      	ldrb	r3, [r1, #3]
   1213e:	075a      	lsls	r2, r3, #29
{
   12140:	b5d0      	push	{r4, r6, r7, lr}
	if (frnd->pending_req) {
   12142:	d505      	bpl.n	12150 <buf_send_end+0x14>
		BT_WARN("Another request before previous completed sending");
   12144:	2157      	movs	r1, #87	; 0x57
   12146:	4812      	ldr	r0, [pc, #72]	; (12190 <buf_send_end+0x54>)
	} else {
		/* Friend offer timeout is 1 second */
		k_delayed_work_submit(&frnd->timer, K_SECONDS(1));
		BT_DBG("Waiting for first poll");
	}
}
   12148:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		BT_WARN("Another request before previous completed sending");
   1214c:	f00f bebd 	b.w	21eca <printk>
	if (frnd->established) {
   12150:	06db      	lsls	r3, r3, #27
   12152:	f101 0460 	add.w	r4, r1, #96	; 0x60
   12156:	d517      	bpl.n	12188 <buf_send_end+0x4c>
		k_delayed_work_submit(&frnd->timer, K_MSEC(frnd->poll_to));
   12158:	6849      	ldr	r1, [r1, #4]
   1215a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1215e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   12162:	f240 36e7 	movw	r6, #999	; 0x3e7
   12166:	2700      	movs	r7, #0
   12168:	fbc0 6701 	smlal	r6, r7, r0, r1
   1216c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12170:	2300      	movs	r3, #0
   12172:	4630      	mov	r0, r6
   12174:	4639      	mov	r1, r7
   12176:	f7ed ffc3 	bl	100 <__aeabi_uldivmod>
   1217a:	4602      	mov	r2, r0
   1217c:	460b      	mov	r3, r1
		k_delayed_work_submit(&frnd->timer, K_SECONDS(1));
   1217e:	4620      	mov	r0, r4
}
   12180:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		k_delayed_work_submit(&frnd->timer, K_SECONDS(1));
   12184:	f7ff bfd4 	b.w	12130 <k_delayed_work_submit>
   12188:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1218c:	2300      	movs	r3, #0
   1218e:	e7f6      	b.n	1217e <buf_send_end+0x42>
   12190:	0002e313 	.word	0x0002e313

00012194 <atomic_test_bit.constprop.26>:
   12194:	4b04      	ldr	r3, [pc, #16]	; (121a8 <atomic_test_bit.constprop.26+0x14>)
   12196:	f3bf 8f5b 	dmb	ish
   1219a:	6818      	ldr	r0, [r3, #0]
   1219c:	f3bf 8f5b 	dmb	ish
}
   121a0:	f3c0 0080 	ubfx	r0, r0, #2, #1
   121a4:	4770      	bx	lr
   121a6:	bf00      	nop
   121a8:	20001ac0 	.word	0x20001ac0

000121ac <encrypt_friend_pdu>:
{
   121ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121b0:	6903      	ldr	r3, [r0, #16]
   121b2:	7f9d      	ldrb	r5, [r3, #30]
   121b4:	460e      	mov	r6, r1
   121b6:	1ea9      	subs	r1, r5, #2
   121b8:	424d      	negs	r5, r1
   121ba:	b08e      	sub	sp, #56	; 0x38
   121bc:	4604      	mov	r4, r0
   121be:	414d      	adcs	r5, r1
	if (master_cred) {
   121c0:	2a00      	cmp	r2, #0
   121c2:	d05d      	beq.n	12280 <encrypt_friend_pdu+0xd4>
		cred = &frnd->subnet->keys[SUBNET_KEY_TX_IDX(frnd->subnet)]
   121c4:	225a      	movs	r2, #90	; 0x5a
   121c6:	fb02 3505 	mla	r5, r2, r5, r3
   121ca:	353d      	adds	r5, #61	; 0x3d
	src = sys_get_be16(&buf->data[5]);
   121cc:	4637      	mov	r7, r6
   121ce:	f857 3f08 	ldr.w	r3, [r7, #8]!
	return ((uint16_t)src[0] << 8) | src[1];
   121d2:	7958      	ldrb	r0, [r3, #5]
   121d4:	799b      	ldrb	r3, [r3, #6]
	if (bt_mesh_elem_find(src)) {
   121d6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   121da:	f7fd fbcf 	bl	f97c <bt_mesh_elem_find>
   121de:	2800      	cmp	r0, #0
   121e0:	f000 80b5 	beq.w	1234e <encrypt_friend_pdu+0x1a2>
		if (FRIEND_ADV(buf)->app_idx != BT_MESH_KEY_UNUSED) {
   121e4:	6973      	ldr	r3, [r6, #20]
   121e6:	f8b3 800c 	ldrh.w	r8, [r3, #12]
   121ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   121ee:	4598      	cmp	r8, r3
   121f0:	f000 8087 	beq.w	12302 <encrypt_friend_pdu+0x156>
	err = unseg_app_sdu_unpack(frnd, buf, &meta);
   121f4:	6924      	ldr	r4, [r4, #16]
	struct bt_mesh_net_rx net = {
   121f6:	2218      	movs	r2, #24
   121f8:	2100      	movs	r1, #0
   121fa:	4668      	mov	r0, sp
   121fc:	f011 ffd1 	bl	241a2 <memset>
   12200:	8ba3      	ldrh	r3, [r4, #28]
   12202:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_mesh_net_header_parse(&buf->b, &net);
   12206:	4669      	mov	r1, sp
   12208:	4638      	mov	r0, r7
	meta->subnet = frnd->subnet;
   1220a:	940c      	str	r4, [sp, #48]	; 0x30
	struct bt_mesh_net_rx net = {
   1220c:	f8ad 8006 	strh.w	r8, [sp, #6]
	bt_mesh_net_header_parse(&buf->b, &net);
   12210:	f7fa f946 	bl	c4a0 <bt_mesh_net_header_parse>
	err = bt_mesh_keys_resolve(&net.ctx, &net.sub, &meta->key, &meta->aid);
   12214:	ab0d      	add	r3, sp, #52	; 0x34
   12216:	aa0b      	add	r2, sp, #44	; 0x2c
   12218:	4669      	mov	r1, sp
   1221a:	a801      	add	r0, sp, #4
   1221c:	f7fb f8b8 	bl	d390 <bt_mesh_keys_resolve>
	if (err) {
   12220:	4604      	mov	r4, r0
   12222:	bb48      	cbnz	r0, 12278 <encrypt_friend_pdu+0xcc>
	meta->crypto.src = net.ctx.addr;
   12224:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   12228:	4954      	ldr	r1, [pc, #336]	; (1237c <encrypt_friend_pdu+0x1d0>)
	meta->crypto.src = net.ctx.addr;
   1222a:	f8ad 301a 	strh.w	r3, [sp, #26]
	meta->crypto.dst = net.ctx.recv_dst;
   1222e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   12232:	f8ad 301c 	strh.w	r3, [sp, #28]
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   12236:	680a      	ldr	r2, [r1, #0]
   12238:	f7ff ffac 	bl	12194 <atomic_test_bit.constprop.26>
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
   1223c:	f108 0303 	add.w	r3, r8, #3
   12240:	b29b      	uxth	r3, r3
   12242:	2b01      	cmp	r3, #1
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   12244:	eba2 0000 	sub.w	r0, r2, r0
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
   12248:	bf8c      	ite	hi
   1224a:	2300      	movhi	r3, #0
   1224c:	2301      	movls	r3, #1
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   1224e:	9009      	str	r0, [sp, #36]	; 0x24
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
   12250:	f8bd 001c 	ldrh.w	r0, [sp, #28]
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
   12254:	f88d 3018 	strb.w	r3, [sp, #24]
	meta->crypto.seq_num = net.seq;
   12258:	9b04      	ldr	r3, [sp, #16]
   1225a:	9308      	str	r3, [sp, #32]
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
   1225c:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   12260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
	meta->crypto.aszmic = 0;
   12264:	f88d 4019 	strb.w	r4, [sp, #25]
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
   12268:	4688      	mov	r8, r1
   1226a:	d20e      	bcs.n	1228a <encrypt_friend_pdu+0xde>
		meta->crypto.ad = bt_mesh_va_label_get(meta->crypto.dst);
   1226c:	f7fb fed8 	bl	e020 <bt_mesh_va_label_get>
   12270:	900a      	str	r0, [sp, #40]	; 0x28
		if (!meta->crypto.ad) {
   12272:	b958      	cbnz	r0, 1228c <encrypt_friend_pdu+0xe0>
			return -ENOENT;
   12274:	f06f 0401 	mvn.w	r4, #1
}
   12278:	4620      	mov	r0, r4
   1227a:	b00e      	add	sp, #56	; 0x38
   1227c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cred = &frnd->cred[SUBNET_KEY_TX_IDX(frnd->subnet)];
   12280:	016b      	lsls	r3, r5, #5
   12282:	441d      	add	r5, r3
   12284:	3514      	adds	r5, #20
   12286:	4405      	add	r5, r0
   12288:	e7a0      	b.n	121cc <encrypt_friend_pdu+0x20>
		meta->crypto.ad = NULL;
   1228a:	940a      	str	r4, [sp, #40]	; 0x28
	if (meta.crypto.seq_num == bt_mesh.seq) {
   1228c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   12290:	9a08      	ldr	r2, [sp, #32]
   12292:	429a      	cmp	r2, r3
   12294:	d035      	beq.n	12302 <encrypt_friend_pdu+0x156>
	net_buf_simple_clone(&buf->b, &sdu);
   12296:	4669      	mov	r1, sp
   12298:	4638      	mov	r0, r7
   1229a:	f015 fe16 	bl	27eca <net_buf_simple_clone>
	net_buf_simple_pull(&sdu, 10);
   1229e:	210a      	movs	r1, #10
   122a0:	4668      	mov	r0, sp
   122a2:	f00a fbf7 	bl	1ca94 <net_buf_simple_pull>
	sdu.len -= 4;
   122a6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_mesh_app_decrypt(meta->key, &meta->crypto, &sdu, &sdu);
   122aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
	sdu.len -= 4;
   122ac:	3b04      	subs	r3, #4
   122ae:	f8ad 3004 	strh.w	r3, [sp, #4]
	return bt_mesh_app_decrypt(meta->key, &meta->crypto, &sdu, &sdu);
   122b2:	466a      	mov	r2, sp
   122b4:	466b      	mov	r3, sp
   122b6:	a906      	add	r1, sp, #24
   122b8:	f013 ff77 	bl	261aa <bt_mesh_app_decrypt>
	if (err) {
   122bc:	4604      	mov	r4, r0
   122be:	b128      	cbz	r0, 122cc <encrypt_friend_pdu+0x120>
		BT_WARN("Decryption failed! %d", err);
   122c0:	4602      	mov	r2, r0
   122c2:	482f      	ldr	r0, [pc, #188]	; (12380 <encrypt_friend_pdu+0x1d4>)
   122c4:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Re-encryption failed! %d", err);
   122c6:	f00f fe00 	bl	21eca <printk>
   122ca:	e7d5      	b.n	12278 <encrypt_friend_pdu+0xcc>
	meta.crypto.seq_num = bt_mesh.seq;
   122cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   122d0:	9308      	str	r3, [sp, #32]
	net_buf_simple_clone(&buf->b, &sdu);
   122d2:	4669      	mov	r1, sp
   122d4:	4638      	mov	r0, r7
   122d6:	f015 fdf8 	bl	27eca <net_buf_simple_clone>
	net_buf_simple_pull(&sdu, 10);
   122da:	210a      	movs	r1, #10
   122dc:	4668      	mov	r0, sp
   122de:	f00a fbd9 	bl	1ca94 <net_buf_simple_pull>
	sdu.len -= 4;
   122e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
   122e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
	sdu.len -= 4;
   122e8:	3b04      	subs	r3, #4
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
   122ea:	466a      	mov	r2, sp
   122ec:	a906      	add	r1, sp, #24
	sdu.len -= 4;
   122ee:	f8ad 3004 	strh.w	r3, [sp, #4]
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
   122f2:	f013 ff31 	bl	26158 <bt_mesh_app_encrypt>
	if (err) {
   122f6:	4604      	mov	r4, r0
   122f8:	b118      	cbz	r0, 12302 <encrypt_friend_pdu+0x156>
		BT_WARN("Re-encryption failed! %d", err);
   122fa:	4602      	mov	r2, r0
   122fc:	2157      	movs	r1, #87	; 0x57
   122fe:	4821      	ldr	r0, [pc, #132]	; (12384 <encrypt_friend_pdu+0x1d8>)
   12300:	e7e1      	b.n	122c6 <encrypt_friend_pdu+0x11a>
		seq = bt_mesh_next_seq();
   12302:	f7f9 ff65 	bl	c1d0 <bt_mesh_next_seq>
		sys_put_be24(seq, &buf->data[2]);
   12306:	68b3      	ldr	r3, [r6, #8]
	dst[0] = val >> 16;
   12308:	0c02      	lsrs	r2, r0, #16
   1230a:	709a      	strb	r2, [r3, #2]
	dst[0] = val >> 8;
   1230c:	f3c0 2207 	ubfx	r2, r0, #8, #8
   12310:	70da      	strb	r2, [r3, #3]
	dst[1] = val;
   12312:	7118      	strb	r0, [r3, #4]
		iv_index = BT_MESH_NET_IVI_TX;
   12314:	4b19      	ldr	r3, [pc, #100]	; (1237c <encrypt_friend_pdu+0x1d0>)
   12316:	681c      	ldr	r4, [r3, #0]
   12318:	f7ff ff3c 	bl	12194 <atomic_test_bit.constprop.26>
		FRIEND_ADV(buf)->app_idx = BT_MESH_KEY_UNUSED;
   1231c:	6973      	ldr	r3, [r6, #20]
   1231e:	f64f 72ff 	movw	r2, #65535	; 0xffff
		iv_index = BT_MESH_NET_IVI_TX;
   12322:	1a24      	subs	r4, r4, r0
		FRIEND_ADV(buf)->app_idx = BT_MESH_KEY_UNUSED;
   12324:	819a      	strh	r2, [r3, #12]
	buf->data[0] = (cred->nid | (iv_index & 1) << 7);
   12326:	4628      	mov	r0, r5
   12328:	68b2      	ldr	r2, [r6, #8]
   1232a:	f810 3b01 	ldrb.w	r3, [r0], #1
   1232e:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
   12332:	7013      	strb	r3, [r2, #0]
	if (bt_mesh_net_encrypt(cred->enc, &buf->b, iv_index, false)) {
   12334:	4639      	mov	r1, r7
   12336:	2300      	movs	r3, #0
   12338:	4622      	mov	r2, r4
   1233a:	f013 fe6b 	bl	26014 <bt_mesh_net_encrypt>
   1233e:	b180      	cbz	r0, 12362 <encrypt_friend_pdu+0x1b6>
		BT_ERR("Encrypting failed");
   12340:	4811      	ldr	r0, [pc, #68]	; (12388 <encrypt_friend_pdu+0x1dc>)
   12342:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Obfuscating failed");
   12344:	f00f fdc1 	bl	21eca <printk>
		return -EINVAL;
   12348:	f06f 0415 	mvn.w	r4, #21
   1234c:	e794      	b.n	12278 <encrypt_friend_pdu+0xcc>
		iv_index = (bt_mesh.iv_index - ((bt_mesh.iv_index & 1) != ivi));
   1234e:	4b0b      	ldr	r3, [pc, #44]	; (1237c <encrypt_friend_pdu+0x1d0>)
   12350:	681c      	ldr	r4, [r3, #0]
		uint8_t ivi = (buf->data[0] >> 7);
   12352:	68b3      	ldr	r3, [r6, #8]
   12354:	781a      	ldrb	r2, [r3, #0]
		iv_index = (bt_mesh.iv_index - ((bt_mesh.iv_index & 1) != ivi));
   12356:	f004 0301 	and.w	r3, r4, #1
   1235a:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
   1235e:	1ae4      	subs	r4, r4, r3
   12360:	e7e1      	b.n	12326 <encrypt_friend_pdu+0x17a>
	if (bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy)) {
   12362:	4621      	mov	r1, r4
   12364:	f105 0211 	add.w	r2, r5, #17
   12368:	68b0      	ldr	r0, [r6, #8]
   1236a:	f013 fe2a 	bl	25fc2 <bt_mesh_net_obfuscate>
   1236e:	4604      	mov	r4, r0
   12370:	2800      	cmp	r0, #0
   12372:	d081      	beq.n	12278 <encrypt_friend_pdu+0xcc>
		BT_ERR("Obfuscating failed");
   12374:	2145      	movs	r1, #69	; 0x45
   12376:	4805      	ldr	r0, [pc, #20]	; (1238c <encrypt_friend_pdu+0x1e0>)
   12378:	e7e4      	b.n	12344 <encrypt_friend_pdu+0x198>
   1237a:	bf00      	nop
   1237c:	20001ab8 	.word	0x20001ab8
   12380:	0002e34a 	.word	0x0002e34a
   12384:	0002e365 	.word	0x0002e365
   12388:	0002e383 	.word	0x0002e383
   1238c:	0002e39a 	.word	0x0002e39a

00012390 <friend_clear>:
{
   12390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12394:	4604      	mov	r4, r0
	k_delayed_work_cancel(&frnd->timer);
   12396:	3060      	adds	r0, #96	; 0x60
   12398:	f00d ff4e 	bl	20238 <k_delayed_work_cancel>
	memset(frnd->cred, 0, sizeof(frnd->cred));
   1239c:	2242      	movs	r2, #66	; 0x42
   1239e:	2100      	movs	r1, #0
   123a0:	f104 0014 	add.w	r0, r4, #20
   123a4:	f011 fefd 	bl	241a2 <memset>
	if (frnd->last) {
   123a8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   123ac:	b160      	cbz	r0, 123c8 <friend_clear+0x38>
		if (frnd->pending_buf) {
   123ae:	78e3      	ldrb	r3, [r4, #3]
   123b0:	071a      	lsls	r2, r3, #28
			BT_MESH_ADV(frnd->last)->busy = 0U;
   123b2:	bf41      	itttt	mi
   123b4:	6943      	ldrmi	r3, [r0, #20]
   123b6:	7a1a      	ldrbmi	r2, [r3, #8]
   123b8:	f36f 0282 	bfcmi	r2, #2, #1
   123bc:	721a      	strbmi	r2, [r3, #8]
		net_buf_unref(frnd->last);
   123be:	f00a fa53 	bl	1c868 <net_buf_unref>
		frnd->last = NULL;
   123c2:	2300      	movs	r3, #0
   123c4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	purge_buffers(&frnd->queue);
   123c8:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   123cc:	f014 faf5 	bl	269ba <purge_buffers>
	Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   123d0:	4e1a      	ldr	r6, [pc, #104]	; (1243c <friend_clear+0xac>)
   123d2:	4d1b      	ldr	r5, [pc, #108]	; (12440 <friend_clear+0xb0>)
   123d4:	4f1b      	ldr	r7, [pc, #108]	; (12444 <friend_clear+0xb4>)
		purge_buffers(&seg->queue);
   123d6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   123da:	f014 faee 	bl	269ba <purge_buffers>
		seg->seg_count = 0U;
   123de:	2300      	movs	r3, #0
   123e0:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
   123e4:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   123e6:	42b5      	cmp	r5, r6
   123e8:	d908      	bls.n	123fc <friend_clear+0x6c>
   123ea:	4639      	mov	r1, r7
   123ec:	4816      	ldr	r0, [pc, #88]	; (12448 <friend_clear+0xb8>)
   123ee:	22af      	movs	r2, #175	; 0xaf
   123f0:	f00f fd6b 	bl	21eca <printk>
   123f4:	21af      	movs	r1, #175	; 0xaf
   123f6:	4638      	mov	r0, r7
   123f8:	f010 f819 	bl	2242e <assert_post_action>
   123fc:	4545      	cmp	r5, r8
   123fe:	d311      	bcc.n	12424 <friend_clear+0x94>
	frnd->counter++;
   12400:	89a3      	ldrh	r3, [r4, #12]
   12402:	3301      	adds	r3, #1
   12404:	81a3      	strh	r3, [r4, #12]
	frnd->fsn = 0U;
   12406:	78e3      	ldrb	r3, [r4, #3]
	frnd->subnet = NULL;
   12408:	2100      	movs	r1, #0
	frnd->fsn = 0U;
   1240a:	f023 031d 	bic.w	r3, r3, #29
	frnd->subnet = NULL;
   1240e:	6121      	str	r1, [r4, #16]
	frnd->queue_size = 0U;
   12410:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
	frnd->fsn = 0U;
   12414:	70e3      	strb	r3, [r4, #3]
	(void)memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
   12416:	f104 0056 	add.w	r0, r4, #86	; 0x56
   1241a:	2206      	movs	r2, #6
}
   1241c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
   12420:	f011 bebf 	b.w	241a2 <memset>
		if (frnd->established && cb->terminated) {
   12424:	78e3      	ldrb	r3, [r4, #3]
   12426:	06db      	lsls	r3, r3, #27
   12428:	d505      	bpl.n	12436 <friend_clear+0xa6>
   1242a:	686b      	ldr	r3, [r5, #4]
   1242c:	b11b      	cbz	r3, 12436 <friend_clear+0xa6>
			cb->terminated(frnd->subnet->net_idx, frnd->lpn);
   1242e:	6922      	ldr	r2, [r4, #16]
   12430:	8821      	ldrh	r1, [r4, #0]
   12432:	8b90      	ldrh	r0, [r2, #28]
   12434:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   12436:	3508      	adds	r5, #8
   12438:	e7d5      	b.n	123e6 <friend_clear+0x56>
   1243a:	bf00      	nop
   1243c:	00028bd0 	.word	0x00028bd0
   12440:	00028bd0 	.word	0x00028bd0
   12444:	0002e442 	.word	0x0002e442
   12448:	0002a026 	.word	0x0002a026

0001244c <friend_queue_prepare_space>:
				   const uint64_t *seq_auth, uint8_t seg_count)
{
	uint32_t total = 0;
	int i;

	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   1244c:	2b10      	cmp	r3, #16
	return someone_has_space;
}

static bool friend_queue_prepare_space(struct bt_mesh_friend *frnd, uint16_t addr,
				       const uint64_t *seq_auth, uint8_t seg_count)
{
   1244e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12452:	4605      	mov	r5, r0
   12454:	461f      	mov	r7, r3
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   12456:	d904      	bls.n	12462 <friend_queue_prepare_space+0x16>
	bool pending_segments;
	uint8_t avail_space;

	if (!friend_queue_has_space(frnd, addr, seq_auth, seg_count)) {
		return false;
   12458:	f04f 0800 	mov.w	r8, #0

		net_buf_unref(buf);
	}

	return true;
}
   1245c:	4640      	mov	r0, r8
   1245e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12462:	f014 faee 	bl	26a42 <friend_queue_has_space.part.18>
	if (!friend_queue_has_space(frnd, addr, seq_auth, seg_count)) {
   12466:	4680      	mov	r8, r0
   12468:	2800      	cmp	r0, #0
   1246a:	d0f5      	beq.n	12458 <friend_queue_prepare_space+0xc>
	avail_space = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - frnd->queue_size;
   1246c:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
	pending_segments = false;
   12470:	2600      	movs	r6, #0
	avail_space = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - frnd->queue_size;
   12472:	f1c4 0410 	rsb	r4, r4, #16
   12476:	b2e4      	uxtb	r4, r4
		buf->frags = NULL;
   12478:	46b2      	mov	sl, r6
	while (pending_segments || avail_space < seg_count) {
   1247a:	b90e      	cbnz	r6, 12480 <friend_queue_prepare_space+0x34>
   1247c:	42bc      	cmp	r4, r7
   1247e:	d2ed      	bcs.n	1245c <friend_queue_prepare_space+0x10>
Z_GENLIST_IS_EMPTY(slist)
   12480:	f8d5 90a0 	ldr.w	r9, [r5, #160]	; 0xa0
Z_GENLIST_GET(slist, snode)
   12484:	f1b9 0f00 	cmp.w	r9, #0
   12488:	d104      	bne.n	12494 <friend_queue_prepare_space+0x48>
			BT_ERR("Unable to free up enough buffers");
   1248a:	2145      	movs	r1, #69	; 0x45
   1248c:	4811      	ldr	r0, [pc, #68]	; (124d4 <friend_queue_prepare_space+0x88>)
   1248e:	f00f fd1c 	bl	21eca <printk>
			return false;
   12492:	e7e1      	b.n	12458 <friend_queue_prepare_space+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12494:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   12498:	f8d9 3000 	ldr.w	r3, [r9]
	list->head = node;
   1249c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   124a0:	4591      	cmp	r9, r2
   124a2:	d101      	bne.n	124a8 <friend_queue_prepare_space+0x5c>
	list->tail = node;
   124a4:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		frnd->queue_size--;
   124a8:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   124ac:	3b01      	subs	r3, #1
   124ae:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
		pending_segments = (buf->flags & NET_BUF_FRAGS);
   124b2:	f899 3005 	ldrb.w	r3, [r9, #5]
		buf->frags = NULL;
   124b6:	f8c9 a000 	str.w	sl, [r9]
		pending_segments = (buf->flags & NET_BUF_FRAGS);
   124ba:	f003 0601 	and.w	r6, r3, #1
		buf->flags &= ~NET_BUF_FRAGS;
   124be:	f023 0301 	bic.w	r3, r3, #1
		avail_space++;
   124c2:	3401      	adds	r4, #1
		buf->flags &= ~NET_BUF_FRAGS;
   124c4:	f889 3005 	strb.w	r3, [r9, #5]
		net_buf_unref(buf);
   124c8:	4648      	mov	r0, r9
		avail_space++;
   124ca:	b2e4      	uxtb	r4, r4
		net_buf_unref(buf);
   124cc:	f00a f9cc 	bl	1c868 <net_buf_unref>
   124d0:	e7d3      	b.n	1247a <friend_queue_prepare_space+0x2e>
   124d2:	bf00      	nop
   124d4:	0002e474 	.word	0x0002e474

000124d8 <enqueue_friend_pdu.part.20>:
static void enqueue_friend_pdu(struct bt_mesh_friend *frnd,
   124d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   124dc:	9d08      	ldr	r5, [sp, #32]
   124de:	4699      	mov	r9, r3
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   124e0:	68ab      	ldr	r3, [r5, #8]
static void enqueue_friend_pdu(struct bt_mesh_friend *frnd,
   124e2:	4617      	mov	r7, r2
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   124e4:	895a      	ldrh	r2, [r3, #10]
		struct bt_mesh_friend_seg *seg = &frnd->seg[i];
   124e6:	f100 0690 	add.w	r6, r0, #144	; 0x90
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   124ea:	ba52      	rev16	r2, r2
static void enqueue_friend_pdu(struct bt_mesh_friend *frnd,
   124ec:	4604      	mov	r4, r0
   124ee:	4688      	mov	r8, r1
		if (is_seg(seg, src, seq_zero)) {
   124f0:	f3c2 028c 	ubfx	r2, r2, #2, #13
   124f4:	4639      	mov	r1, r7
   124f6:	4630      	mov	r0, r6
   124f8:	f014 fa73 	bl	269e2 <is_seg>
   124fc:	b920      	cbnz	r0, 12508 <enqueue_friend_pdu.part.20+0x30>
		if (!unassigned && !sys_slist_peek_head(&seg->queue)) {
   124fe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   12502:	b9fb      	cbnz	r3, 12544 <enqueue_friend_pdu.part.20+0x6c>
		unassigned->seg_count = seg_count;
   12504:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98
	net_buf_slist_put(&seg->queue, buf);
   12508:	4629      	mov	r1, r5
   1250a:	4630      	mov	r0, r6
   1250c:	f00a f8e6 	bl	1c6dc <net_buf_slist_put>
	if (type == BT_MESH_FRIEND_PDU_COMPLETE) {
   12510:	f1b8 0f02 	cmp.w	r8, #2
   12514:	d122      	bne.n	1255c <enqueue_friend_pdu.part.20+0x84>
Z_GENLIST_APPEND_LIST(slist, snode)
   12516:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
Z_GENLIST_MERGE_LIST(slist, snode)
   1251a:	e9d4 2124 	ldrd	r2, r1, [r4, #144]	; 0x90
Z_GENLIST_APPEND_LIST(slist, snode)
   1251e:	b9db      	cbnz	r3, 12558 <enqueue_friend_pdu.part.20+0x80>
	list->head = node;
   12520:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
	list->head = NULL;
   12524:	2300      	movs	r3, #0
		frnd->queue_size += seg->seg_count;
   12526:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
	list->tail = node;
   1252a:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
   1252e:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
		seg->seg_count = 0U;
   12532:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
	list->tail = NULL;
   12536:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
		frnd->queue_size += seg->seg_count;
   1253a:	440a      	add	r2, r1
   1253c:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
}
   12540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("No free friend segment RX contexts for 0x%04x", src);
   12544:	463a      	mov	r2, r7
   12546:	4808      	ldr	r0, [pc, #32]	; (12568 <enqueue_friend_pdu.part.20+0x90>)
   12548:	2145      	movs	r1, #69	; 0x45
   1254a:	f00f fcbe 	bl	21eca <printk>
		net_buf_unref(buf);
   1254e:	4628      	mov	r0, r5
}
   12550:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		net_buf_unref(buf);
   12554:	f00a b988 	b.w	1c868 <net_buf_unref>
	parent->next = child;
   12558:	601a      	str	r2, [r3, #0]
   1255a:	e7e3      	b.n	12524 <enqueue_friend_pdu.part.20+0x4c>
		buf->flags |= NET_BUF_FRAGS;
   1255c:	796b      	ldrb	r3, [r5, #5]
   1255e:	f043 0301 	orr.w	r3, r3, #1
   12562:	716b      	strb	r3, [r5, #5]
   12564:	e7ec      	b.n	12540 <enqueue_friend_pdu.part.20+0x68>
   12566:	bf00      	nop
   12568:	0002e3b2 	.word	0x0002e3b2

0001256c <create_friend_pdu.isra.10>:
static struct net_buf *create_friend_pdu(struct bt_mesh_friend *frnd,
   1256c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
					   FRIEND_XMIT, K_NO_WAIT);
   1256e:	2300      	movs	r3, #0
   12570:	2200      	movs	r2, #0
	buf = bt_mesh_adv_create_from_pool(&friend_buf_pool, adv_alloc,
   12572:	e9cd 2300 	strd	r2, r3, [sp]
static struct net_buf *create_friend_pdu(struct bt_mesh_friend *frnd,
   12576:	4605      	mov	r5, r0
   12578:	460f      	mov	r7, r1
	buf = bt_mesh_adv_create_from_pool(&friend_buf_pool, adv_alloc,
   1257a:	2308      	movs	r3, #8
   1257c:	2201      	movs	r2, #1
   1257e:	4918      	ldr	r1, [pc, #96]	; (125e0 <create_friend_pdu.isra.10+0x74>)
   12580:	4818      	ldr	r0, [pc, #96]	; (125e4 <create_friend_pdu.isra.10+0x78>)
   12582:	f7f9 f85b 	bl	b63c <bt_mesh_adv_create_from_pool>
	if (!buf) {
   12586:	4606      	mov	r6, r0
   12588:	b330      	cbz	r0, 125d8 <create_friend_pdu.isra.10+0x6c>
	net_buf_add_u8(buf, (info->iv_index & 1) << 7); /* Will be reset in encryption */
   1258a:	68a9      	ldr	r1, [r5, #8]
	return net_buf_simple_add_u8(&buf->b, val);
   1258c:	f100 0408 	add.w	r4, r0, #8
   12590:	01c9      	lsls	r1, r1, #7
   12592:	f001 0180 	and.w	r1, r1, #128	; 0x80
   12596:	4620      	mov	r0, r4
   12598:	f015 fcf5 	bl	27f86 <net_buf_simple_add_u8>
	if (info->ctl) {
   1259c:	f995 3007 	ldrsb.w	r3, [r5, #7]
   125a0:	79e9      	ldrb	r1, [r5, #7]
   125a2:	2b00      	cmp	r3, #0
		net_buf_add_u8(buf, info->ttl | 0x80);
   125a4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   125a8:	bfb8      	it	lt
   125aa:	f041 0180 	orrlt.w	r1, r1, #128	; 0x80
   125ae:	4620      	mov	r0, r4
   125b0:	f015 fce9 	bl	27f86 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   125b4:	2203      	movs	r2, #3
   125b6:	1d29      	adds	r1, r5, #4
   125b8:	4620      	mov	r0, r4
   125ba:	f015 fcd8 	bl	27f6e <net_buf_simple_add_mem>
	net_buf_simple_add_be16(&buf->b, val);
   125be:	8829      	ldrh	r1, [r5, #0]
   125c0:	4620      	mov	r0, r4
   125c2:	f015 fcf0 	bl	27fa6 <net_buf_simple_add_be16>
   125c6:	8869      	ldrh	r1, [r5, #2]
   125c8:	4620      	mov	r0, r4
   125ca:	f015 fcec 	bl	27fa6 <net_buf_simple_add_be16>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   125ce:	88ba      	ldrh	r2, [r7, #4]
   125d0:	6839      	ldr	r1, [r7, #0]
   125d2:	4620      	mov	r0, r4
   125d4:	f015 fccb 	bl	27f6e <net_buf_simple_add_mem>
}
   125d8:	4630      	mov	r0, r6
   125da:	b003      	add	sp, #12
   125dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   125de:	bf00      	nop
   125e0:	000120a5 	.word	0x000120a5
   125e4:	200010a8 	.word	0x200010a8

000125e8 <encode_friend_ctl.isra.11>:
static struct net_buf *encode_friend_ctl(struct bt_mesh_friend *frnd,
   125e8:	b530      	push	{r4, r5, lr}
   125ea:	4605      	mov	r5, r0
   125ec:	b085      	sub	sp, #20
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
   125ee:	4610      	mov	r0, r2
static struct net_buf *encode_friend_ctl(struct bt_mesh_friend *frnd,
   125f0:	4614      	mov	r4, r2
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
   125f2:	f015 fc79 	bl	27ee8 <net_buf_simple_push_u8>
	info.src = bt_mesh_primary_addr();
   125f6:	f7fd f9bb 	bl	f970 <bt_mesh_primary_addr>
	info.dst = frnd->lpn;
   125fa:	882b      	ldrh	r3, [r5, #0]
	info.src = bt_mesh_primary_addr();
   125fc:	f8ad 0004 	strh.w	r0, [sp, #4]
	info.dst = frnd->lpn;
   12600:	f8ad 3006 	strh.w	r3, [sp, #6]
	memset(info.seq, 0, sizeof(info.seq));
   12604:	2100      	movs	r1, #0
	info.ttl = 0U;
   12606:	2380      	movs	r3, #128	; 0x80
	memset(info.seq, 0, sizeof(info.seq));
   12608:	2203      	movs	r2, #3
   1260a:	a802      	add	r0, sp, #8
	info.ttl = 0U;
   1260c:	f88d 300b 	strb.w	r3, [sp, #11]
	memset(info.seq, 0, sizeof(info.seq));
   12610:	f011 fdc7 	bl	241a2 <memset>
	info.iv_index = BT_MESH_NET_IVI_TX;
   12614:	4b05      	ldr	r3, [pc, #20]	; (1262c <encode_friend_ctl.isra.11+0x44>)
   12616:	681a      	ldr	r2, [r3, #0]
   12618:	f7ff fdbc 	bl	12194 <atomic_test_bit.constprop.26>
   1261c:	1a10      	subs	r0, r2, r0
   1261e:	9003      	str	r0, [sp, #12]
	return create_friend_pdu(frnd, &info, sdu);
   12620:	4621      	mov	r1, r4
   12622:	a801      	add	r0, sp, #4
   12624:	f7ff ffa2 	bl	1256c <create_friend_pdu.isra.10>
}
   12628:	b005      	add	sp, #20
   1262a:	bd30      	pop	{r4, r5, pc}
   1262c:	20001ab8 	.word	0x20001ab8

00012630 <enqueue_sub_cfm>:
{
   12630:	b530      	push	{r4, r5, lr}
   12632:	b085      	sub	sp, #20
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*cfm));
   12634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
{
   12638:	460d      	mov	r5, r1
   1263a:	4604      	mov	r4, r0
	net_buf_simple_reserve(&sdu, 1);
   1263c:	2101      	movs	r1, #1
   1263e:	a801      	add	r0, sp, #4
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*cfm));
   12640:	9302      	str	r3, [sp, #8]
   12642:	f8cd d004 	str.w	sp, [sp, #4]
   12646:	f8cd d00c 	str.w	sp, [sp, #12]
	net_buf_simple_reserve(&sdu, 1);
   1264a:	f00a f823 	bl	1c694 <net_buf_simple_reserve>
	cfm = net_buf_simple_add(&sdu, sizeof(*cfm));
   1264e:	2101      	movs	r1, #1
   12650:	a801      	add	r0, sp, #4
   12652:	f00a fa59 	bl	1cb08 <net_buf_simple_add>
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, &sdu);
   12656:	aa01      	add	r2, sp, #4
	cfm->xact = xact;
   12658:	7005      	strb	r5, [r0, #0]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, &sdu);
   1265a:	2109      	movs	r1, #9
   1265c:	4620      	mov	r0, r4
   1265e:	f7ff ffc3 	bl	125e8 <encode_friend_ctl.isra.11>
	if (!buf) {
   12662:	4605      	mov	r5, r0
   12664:	b928      	cbnz	r0, 12672 <enqueue_sub_cfm+0x42>
		BT_ERR("Unable to encode Subscription List Confirmation");
   12666:	2145      	movs	r1, #69	; 0x45
   12668:	480b      	ldr	r0, [pc, #44]	; (12698 <enqueue_sub_cfm+0x68>)
   1266a:	f00f fc2e 	bl	21eca <printk>
}
   1266e:	b005      	add	sp, #20
   12670:	bd30      	pop	{r4, r5, pc}
	if (encrypt_friend_pdu(frnd, buf, false)) {
   12672:	4601      	mov	r1, r0
   12674:	2200      	movs	r2, #0
   12676:	4620      	mov	r0, r4
   12678:	f7ff fd98 	bl	121ac <encrypt_friend_pdu>
   1267c:	2800      	cmp	r0, #0
   1267e:	d1f6      	bne.n	1266e <enqueue_sub_cfm+0x3e>
	if (frnd->last) {
   12680:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   12684:	b108      	cbz	r0, 1268a <enqueue_sub_cfm+0x5a>
		net_buf_unref(frnd->last);
   12686:	f00a f8ef 	bl	1c868 <net_buf_unref>
	frnd->send_last = 1U;
   1268a:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
   1268c:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
	frnd->send_last = 1U;
   12690:	f043 0302 	orr.w	r3, r3, #2
   12694:	70e3      	strb	r3, [r4, #3]
   12696:	e7ea      	b.n	1266e <enqueue_sub_cfm+0x3e>
   12698:	0002e3e5 	.word	0x0002e3e5

0001269c <friend_timeout>:
	__ASSERT_NO_MSG(frnd->pending_buf == 0U);
   1269c:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   126a0:	0719      	lsls	r1, r3, #28
{
   126a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   126a6:	4604      	mov	r4, r0
	struct bt_mesh_friend *frnd = CONTAINER_OF(work, struct bt_mesh_friend,
   126a8:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	__ASSERT_NO_MSG(frnd->pending_buf == 0U);
   126ac:	d50a      	bpl.n	126c4 <friend_timeout+0x28>
   126ae:	4941      	ldr	r1, [pc, #260]	; (127b4 <friend_timeout+0x118>)
   126b0:	4841      	ldr	r0, [pc, #260]	; (127b8 <friend_timeout+0x11c>)
   126b2:	f240 42aa 	movw	r2, #1194	; 0x4aa
   126b6:	f00f fc08 	bl	21eca <printk>
   126ba:	f240 41aa 	movw	r1, #1194	; 0x4aa
   126be:	483d      	ldr	r0, [pc, #244]	; (127b4 <friend_timeout+0x118>)
   126c0:	f00f feb5 	bl	2242e <assert_post_action>
	if (frnd->send_last && frnd->last) {
   126c4:	f814 3c5d 	ldrb.w	r3, [r4, #-93]
   126c8:	079a      	lsls	r2, r3, #30
   126ca:	d514      	bpl.n	126f6 <friend_timeout+0x5a>
   126cc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   126ce:	b192      	cbz	r2, 126f6 <friend_timeout+0x5a>
		frnd->send_last = 0U;
   126d0:	f36f 0341 	bfc	r3, #1, #1
   126d4:	f804 3c5d 	strb.w	r3, [r4, #-93]
	frnd->pending_req = 0U;
   126d8:	f814 3c5d 	ldrb.w	r3, [r4, #-93]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
   126dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   126de:	4937      	ldr	r1, [pc, #220]	; (127bc <friend_timeout+0x120>)
	frnd->pending_buf = 1U;
   126e0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   126e4:	f043 0308 	orr.w	r3, r3, #8
   126e8:	f804 3c5d 	strb.w	r3, [r4, #-93]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
   126ec:	4632      	mov	r2, r6
}
   126ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
   126f2:	f7f8 bfe3 	b.w	b6bc <bt_mesh_adv_send>
	if (frnd->established && !frnd->pending_req) {
   126f6:	f003 0314 	and.w	r3, r3, #20
   126fa:	2b10      	cmp	r3, #16
   126fc:	d10a      	bne.n	12714 <friend_timeout+0x78>
		BT_WARN("Friendship lost with 0x%04x", frnd->lpn);
   126fe:	f834 2c60 	ldrh.w	r2, [r4, #-96]
   12702:	482f      	ldr	r0, [pc, #188]	; (127c0 <friend_timeout+0x124>)
   12704:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Friendship not established with 0x%04x",
   12706:	f00f fbe0 	bl	21eca <printk>
		friend_clear(frnd);
   1270a:	4630      	mov	r0, r6
}
   1270c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		friend_clear(frnd);
   12710:	f7ff be3e 	b.w	12390 <friend_clear>
Z_GENLIST_IS_EMPTY(slist)
   12714:	6c25      	ldr	r5, [r4, #64]	; 0x40
Z_GENLIST_GET(slist, snode)
   12716:	b92d      	cbnz	r5, 12724 <friend_timeout+0x88>
	frnd->last = (void *)sys_slist_get(&frnd->queue);
   12718:	63e5      	str	r5, [r4, #60]	; 0x3c
		BT_WARN("Friendship not established with 0x%04x",
   1271a:	f834 2c60 	ldrh.w	r2, [r4, #-96]
   1271e:	4829      	ldr	r0, [pc, #164]	; (127c4 <friend_timeout+0x128>)
   12720:	2157      	movs	r1, #87	; 0x57
   12722:	e7f0      	b.n	12706 <friend_timeout+0x6a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12724:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12726:	682f      	ldr	r7, [r5, #0]
	list->head = node;
   12728:	6427      	str	r7, [r4, #64]	; 0x40
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1272a:	429d      	cmp	r5, r3
	if (buf->len != 16) {
   1272c:	89ab      	ldrh	r3, [r5, #12]
	list->tail = node;
   1272e:	bf08      	it	eq
   12730:	6467      	streq	r7, [r4, #68]	; 0x44
   12732:	2b10      	cmp	r3, #16
	frnd->last = (void *)sys_slist_get(&frnd->queue);
   12734:	63e5      	str	r5, [r4, #60]	; 0x3c
	if (buf->len != 16) {
   12736:	d12b      	bne.n	12790 <friend_timeout+0xf4>
	net_buf_simple_save(&buf->b, &state);
   12738:	f105 0808 	add.w	r8, r5, #8
	state->offset = net_buf_simple_headroom(buf);
   1273c:	4640      	mov	r0, r8
   1273e:	f015 fc0a 	bl	27f56 <net_buf_simple_headroom>
	net_buf_skip(buf, 1); /* skip IVI, NID */
   12742:	2101      	movs	r1, #1
   12744:	4681      	mov	r9, r0
   12746:	4628      	mov	r0, r5
	state->len = buf->len;
   12748:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
   1274c:	f014 f87b 	bl	26846 <net_buf_skip>
	return net_buf_simple_pull_u8(&buf->b);
   12750:	4640      	mov	r0, r8
   12752:	f015 fbdc 	bl	27f0e <net_buf_simple_pull_u8>
	if (!(net_buf_pull_u8(buf) >> 7)) {
   12756:	0603      	lsls	r3, r0, #24
   12758:	d514      	bpl.n	12784 <friend_timeout+0xe8>
	net_buf_skip(buf, 7); /* skip seqnum src dec*/
   1275a:	2107      	movs	r1, #7
   1275c:	4628      	mov	r0, r5
   1275e:	f014 f872 	bl	26846 <net_buf_skip>
	return net_buf_simple_pull_mem(&buf->b, len);
   12762:	2101      	movs	r1, #1
   12764:	4640      	mov	r0, r8
   12766:	f00a f9b1 	bl	1cacc <net_buf_simple_pull_mem>
	if (TRANS_CTL_OP((uint8_t *) net_buf_pull_mem(buf, 1))
   1276a:	7803      	ldrb	r3, [r0, #0]
   1276c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   12770:	2b02      	cmp	r3, #2
   12772:	d107      	bne.n	12784 <friend_timeout+0xe8>
   12774:	2106      	movs	r1, #6
   12776:	4640      	mov	r0, r8
   12778:	f00a f9a8 	bl	1cacc <net_buf_simple_pull_mem>
	md = (uint8_t)(sys_slist_peek_head(&frnd->queue) != NULL);
   1277c:	3700      	adds	r7, #0
   1277e:	bf18      	it	ne
   12780:	2701      	movne	r7, #1
   12782:	7147      	strb	r7, [r0, #5]
	buf->data = buf->__buf + state->offset;
   12784:	692b      	ldr	r3, [r5, #16]
	buf->len = state->len;
   12786:	f8a5 a00c 	strh.w	sl, [r5, #12]
	buf->data = buf->__buf + state->offset;
   1278a:	fa13 f389 	uxtah	r3, r3, r9
   1278e:	60ab      	str	r3, [r5, #8]
	if (encrypt_friend_pdu(frnd, frnd->last, false)) {
   12790:	2200      	movs	r2, #0
   12792:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   12794:	4630      	mov	r0, r6
   12796:	f7ff fd09 	bl	121ac <encrypt_friend_pdu>
   1279a:	b948      	cbnz	r0, 127b0 <friend_timeout+0x114>
	frnd->last->flags &= ~NET_BUF_FRAGS;
   1279c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1279e:	795a      	ldrb	r2, [r3, #5]
	frnd->last->frags = NULL;
   127a0:	6018      	str	r0, [r3, #0]
	frnd->last->flags &= ~NET_BUF_FRAGS;
   127a2:	f022 0201 	bic.w	r2, r2, #1
   127a6:	715a      	strb	r2, [r3, #5]
	frnd->queue_size--;
   127a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   127aa:	3b01      	subs	r3, #1
   127ac:	64a3      	str	r3, [r4, #72]	; 0x48
   127ae:	e793      	b.n	126d8 <friend_timeout+0x3c>
}
   127b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   127b4:	0002e442 	.word	0x0002e442
   127b8:	0002a026 	.word	0x0002a026
   127bc:	00029880 	.word	0x00029880
   127c0:	0002e49a 	.word	0x0002e49a
   127c4:	0002e4bb 	.word	0x0002e4bb

000127c8 <enqueue_update.constprop.24>:
static void enqueue_update(struct bt_mesh_friend *frnd, uint8_t md)
   127c8:	b530      	push	{r4, r5, lr}
   127ca:	b087      	sub	sp, #28
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*upd));
   127cc:	ab01      	add	r3, sp, #4
   127ce:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   127d2:	9303      	str	r3, [sp, #12]
   127d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	__ASSERT_NO_MSG(frnd->subnet);
   127d8:	6903      	ldr	r3, [r0, #16]
static void enqueue_update(struct bt_mesh_friend *frnd, uint8_t md)
   127da:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frnd->subnet);
   127dc:	b953      	cbnz	r3, 127f4 <enqueue_update.constprop.24+0x2c>
   127de:	491b      	ldr	r1, [pc, #108]	; (1284c <enqueue_update.constprop.24+0x84>)
   127e0:	481b      	ldr	r0, [pc, #108]	; (12850 <enqueue_update.constprop.24+0x88>)
   127e2:	f240 2216 	movw	r2, #534	; 0x216
   127e6:	f00f fb70 	bl	21eca <printk>
   127ea:	f240 2116 	movw	r1, #534	; 0x216
   127ee:	4817      	ldr	r0, [pc, #92]	; (1284c <enqueue_update.constprop.24+0x84>)
   127f0:	f00f fe1d 	bl	2242e <assert_post_action>
	net_buf_simple_reserve(&sdu, 1);
   127f4:	2101      	movs	r1, #1
   127f6:	a803      	add	r0, sp, #12
   127f8:	f009 ff4c 	bl	1c694 <net_buf_simple_reserve>
	upd = net_buf_simple_add(&sdu, sizeof(*upd));
   127fc:	2106      	movs	r1, #6
   127fe:	a803      	add	r0, sp, #12
   12800:	f00a f982 	bl	1cb08 <net_buf_simple_add>
   12804:	4605      	mov	r5, r0
	upd->flags = bt_mesh_net_flags(frnd->subnet);
   12806:	6920      	ldr	r0, [r4, #16]
   12808:	f7fa f9de 	bl	cbc8 <bt_mesh_net_flags>
   1280c:	4b11      	ldr	r3, [pc, #68]	; (12854 <enqueue_update.constprop.24+0x8c>)
   1280e:	7028      	strb	r0, [r5, #0]
	upd->iv_index = sys_cpu_to_be32(bt_mesh.iv_index);
   12810:	681b      	ldr	r3, [r3, #0]
   12812:	ba1b      	rev	r3, r3
   12814:	f8c5 3001 	str.w	r3, [r5, #1]
	upd->md = md;
   12818:	2300      	movs	r3, #0
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, &sdu);
   1281a:	2102      	movs	r1, #2
	upd->md = md;
   1281c:	716b      	strb	r3, [r5, #5]
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, &sdu);
   1281e:	aa03      	add	r2, sp, #12
   12820:	4620      	mov	r0, r4
   12822:	f7ff fee1 	bl	125e8 <encode_friend_ctl.isra.11>
	if (!buf) {
   12826:	4601      	mov	r1, r0
   12828:	b928      	cbnz	r0, 12836 <enqueue_update.constprop.24+0x6e>
		BT_ERR("Unable to encode Friend Update");
   1282a:	2145      	movs	r1, #69	; 0x45
   1282c:	480a      	ldr	r0, [pc, #40]	; (12858 <enqueue_update.constprop.24+0x90>)
   1282e:	f00f fb4c 	bl	21eca <printk>
}
   12832:	b007      	add	sp, #28
   12834:	bd30      	pop	{r4, r5, pc}
	net_buf_slist_put(&frnd->queue, buf);
   12836:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1283a:	f009 ff4f 	bl	1c6dc <net_buf_slist_put>
	frnd->queue_size++;
   1283e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   12842:	3301      	adds	r3, #1
   12844:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   12848:	e7f3      	b.n	12832 <enqueue_update.constprop.24+0x6a>
   1284a:	bf00      	nop
   1284c:	0002e442 	.word	0x0002e442
   12850:	0002a026 	.word	0x0002a026
   12854:	20001ab8 	.word	0x20001ab8
   12858:	0002e41a 	.word	0x0002e41a

0001285c <subnet_evt>:
{
   1285c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12860:	4681      	mov	r9, r0
	if (evt == BT_MESH_KEY_ADDED) {
   12862:	b379      	cbz	r1, 128c4 <subnet_evt+0x68>
   12864:	4c21      	ldr	r4, [pc, #132]	; (128ec <subnet_evt+0x90>)
				BT_ERR("Failed updating friend cred for 0x%04x",
   12866:	f8df a088 	ldr.w	sl, [pc, #136]	; 128f0 <subnet_evt+0x94>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1286a:	f04f 0800 	mov.w	r8, #0
		switch (evt) {
   1286e:	1e4d      	subs	r5, r1, #1
		if (frnd->subnet != sub) {
   12870:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12872:	4599      	cmp	r9, r3
   12874:	d122      	bne.n	128bc <subnet_evt+0x60>
   12876:	f104 0620 	add.w	r6, r4, #32
		switch (evt) {
   1287a:	2d03      	cmp	r5, #3
   1287c:	d81e      	bhi.n	128bc <subnet_evt+0x60>
   1287e:	e8df f005 	tbb	[pc, r5]
   12882:	051a      	.short	0x051a
   12884:	2431      	.short	0x2431
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   12886:	f04f 0801 	mov.w	r8, #1
   1288a:	e7f1      	b.n	12870 <subnet_evt+0x14>
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   1288c:	8c27      	ldrh	r7, [r4, #32]
   1288e:	f7fd f86f 	bl	f970 <bt_mesh_primary_addr>
					  frnd->subnet->keys[idx].net);
   12892:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12894:	3387      	adds	r3, #135	; 0x87
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   12896:	9301      	str	r3, [sp, #4]
   12898:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1289a:	9300      	str	r3, [sp, #0]
   1289c:	4602      	mov	r2, r0
   1289e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   128a0:	4639      	mov	r1, r7
   128a2:	f104 0055 	add.w	r0, r4, #85	; 0x55
   128a6:	f013 f92e 	bl	25b06 <bt_mesh_friend_cred_create>
			if (err) {
   128aa:	b138      	cbz	r0, 128bc <subnet_evt+0x60>
				BT_ERR("Failed updating friend cred for 0x%04x",
   128ac:	8c22      	ldrh	r2, [r4, #32]
   128ae:	2145      	movs	r1, #69	; 0x45
   128b0:	4650      	mov	r0, sl
   128b2:	f00f fb0a 	bl	21eca <printk>
				friend_clear(frnd);
   128b6:	4630      	mov	r0, r6
   128b8:	f7ff fd6a 	bl	12390 <friend_clear>
   128bc:	34e8      	adds	r4, #232	; 0xe8
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   128be:	f1b8 0f00 	cmp.w	r8, #0
   128c2:	d0e0      	beq.n	12886 <subnet_evt+0x2a>
}
   128c4:	b002      	add	sp, #8
   128c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			memcpy(&frnd->cred[0], &frnd->cred[1],
   128ca:	f104 0755 	add.w	r7, r4, #85	; 0x55
   128ce:	2221      	movs	r2, #33	; 0x21
   128d0:	4639      	mov	r1, r7
   128d2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   128d6:	f011 fc3a 	bl	2414e <memcpy>
			memset(&frnd->cred[1], 0, sizeof(frnd->cred[1]));
   128da:	2221      	movs	r2, #33	; 0x21
   128dc:	2100      	movs	r1, #0
   128de:	4638      	mov	r0, r7
   128e0:	f011 fc5f 	bl	241a2 <memset>
			enqueue_update(frnd, 0);
   128e4:	4630      	mov	r0, r6
   128e6:	f7ff ff6f 	bl	127c8 <enqueue_update.constprop.24>
			break;
   128ea:	e7e7      	b.n	128bc <subnet_evt+0x60>
   128ec:	20001ab8 	.word	0x20001ab8
   128f0:	0002e4f6 	.word	0x0002e4f6

000128f4 <bt_mesh_friend_find.part.21>:
struct bt_mesh_friend *bt_mesh_friend_find(uint16_t net_idx, uint16_t lpn_addr,
   128f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128f8:	4d16      	ldr	r5, [pc, #88]	; (12954 <bt_mesh_friend_find.part.21+0x60>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   128fa:	2400      	movs	r4, #0
   128fc:	46ac      	mov	ip, r5
		if (net_idx != BT_MESH_KEY_ANY &&
   128fe:	f64f 7eff 	movw	lr, #65535	; 0xffff
		if (established && !frnd->established) {
   12902:	f04f 08e8 	mov.w	r8, #232	; 0xe8
		if (valid && !frnd->subnet) {
   12906:	b10a      	cbz	r2, 1290c <bt_mesh_friend_find.part.21+0x18>
   12908:	6b2e      	ldr	r6, [r5, #48]	; 0x30
   1290a:	b1b6      	cbz	r6, 1293a <bt_mesh_friend_find.part.21+0x46>
		if (established && !frnd->established) {
   1290c:	b12b      	cbz	r3, 1291a <bt_mesh_friend_find.part.21+0x26>
   1290e:	fb08 c604 	mla	r6, r8, r4, ip
   12912:	f896 6023 	ldrb.w	r6, [r6, #35]	; 0x23
   12916:	06f6      	lsls	r6, r6, #27
   12918:	d50f      	bpl.n	1293a <bt_mesh_friend_find.part.21+0x46>
		if (net_idx != BT_MESH_KEY_ANY &&
   1291a:	4570      	cmp	r0, lr
   1291c:	d004      	beq.n	12928 <bt_mesh_friend_find.part.21+0x34>
		    (!frnd->subnet || frnd->subnet->net_idx != net_idx)) {
   1291e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
		if (net_idx != BT_MESH_KEY_ANY &&
   12920:	b15e      	cbz	r6, 1293a <bt_mesh_friend_find.part.21+0x46>
		    (!frnd->subnet || frnd->subnet->net_idx != net_idx)) {
   12922:	8bb6      	ldrh	r6, [r6, #28]
   12924:	4286      	cmp	r6, r0
   12926:	d108      	bne.n	1293a <bt_mesh_friend_find.part.21+0x46>
	if (frnd->lpn == BT_MESH_ADDR_UNASSIGNED) {
   12928:	8c2f      	ldrh	r7, [r5, #32]
   1292a:	b137      	cbz	r7, 1293a <bt_mesh_friend_find.part.21+0x46>
	return (addr >= frnd->lpn && addr < (frnd->lpn + frnd->num_elem));
   1292c:	42b9      	cmp	r1, r7
   1292e:	d304      	bcc.n	1293a <bt_mesh_friend_find.part.21+0x46>
   12930:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
   12934:	443e      	add	r6, r7
   12936:	42b1      	cmp	r1, r6
   12938:	db06      	blt.n	12948 <bt_mesh_friend_find.part.21+0x54>
   1293a:	35e8      	adds	r5, #232	; 0xe8
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1293c:	b114      	cbz	r4, 12944 <bt_mesh_friend_find.part.21+0x50>
	return NULL;
   1293e:	2000      	movs	r0, #0
}
   12940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   12944:	2401      	movs	r4, #1
   12946:	e7de      	b.n	12906 <bt_mesh_friend_find.part.21+0x12>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   12948:	20e8      	movs	r0, #232	; 0xe8
   1294a:	fb00 c004 	mla	r0, r0, r4, ip
   1294e:	3020      	adds	r0, #32
   12950:	e7f6      	b.n	12940 <bt_mesh_friend_find.part.21+0x4c>
   12952:	bf00      	nop
   12954:	20001ab8 	.word	0x20001ab8

00012958 <bt_mesh_friends_clear>:
{
   12958:	b510      	push	{r4, lr}
		if (!frnd->subnet) {
   1295a:	4c08      	ldr	r4, [pc, #32]	; (1297c <bt_mesh_friends_clear+0x24>)
   1295c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1295e:	b11b      	cbz	r3, 12968 <bt_mesh_friends_clear+0x10>
		friend_clear(frnd);
   12960:	f104 0020 	add.w	r0, r4, #32
   12964:	f7ff fd14 	bl	12390 <friend_clear>
		if (!frnd->subnet) {
   12968:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   1296c:	b123      	cbz	r3, 12978 <bt_mesh_friends_clear+0x20>
		friend_clear(frnd);
   1296e:	4804      	ldr	r0, [pc, #16]	; (12980 <bt_mesh_friends_clear+0x28>)
}
   12970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		friend_clear(frnd);
   12974:	f7ff bd0c 	b.w	12390 <friend_clear>
}
   12978:	bd10      	pop	{r4, pc}
   1297a:	bf00      	nop
   1297c:	20001ab8 	.word	0x20001ab8
   12980:	20001bc0 	.word	0x20001bc0

00012984 <bt_mesh_friend_sec_update>:
{
   12984:	b538      	push	{r3, r4, r5, lr}
		if (!frnd->subnet) {
   12986:	4d0f      	ldr	r5, [pc, #60]	; (129c4 <bt_mesh_friend_sec_update+0x40>)
   12988:	6b2a      	ldr	r2, [r5, #48]	; 0x30
{
   1298a:	4604      	mov	r4, r0
		if (!frnd->subnet) {
   1298c:	b132      	cbz	r2, 1299c <bt_mesh_friend_sec_update+0x18>
		if (net_idx == BT_MESH_KEY_ANY ||
   1298e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12992:	4298      	cmp	r0, r3
   12994:	d10e      	bne.n	129b4 <bt_mesh_friend_sec_update+0x30>
			enqueue_update(frnd, 0x00);
   12996:	480c      	ldr	r0, [pc, #48]	; (129c8 <bt_mesh_friend_sec_update+0x44>)
   12998:	f7ff ff16 	bl	127c8 <enqueue_update.constprop.24>
		if (!frnd->subnet) {
   1299c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   129a0:	b17b      	cbz	r3, 129c2 <bt_mesh_friend_sec_update+0x3e>
		if (net_idx == BT_MESH_KEY_ANY ||
   129a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   129a6:	4294      	cmp	r4, r2
   129a8:	d108      	bne.n	129bc <bt_mesh_friend_sec_update+0x38>
			enqueue_update(frnd, 0x00);
   129aa:	4808      	ldr	r0, [pc, #32]	; (129cc <bt_mesh_friend_sec_update+0x48>)
}
   129ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			enqueue_update(frnd, 0x00);
   129b0:	f7ff bf0a 	b.w	127c8 <enqueue_update.constprop.24>
		if (net_idx == BT_MESH_KEY_ANY ||
   129b4:	8b93      	ldrh	r3, [r2, #28]
   129b6:	4283      	cmp	r3, r0
   129b8:	d1f0      	bne.n	1299c <bt_mesh_friend_sec_update+0x18>
   129ba:	e7ec      	b.n	12996 <bt_mesh_friend_sec_update+0x12>
   129bc:	8b9b      	ldrh	r3, [r3, #28]
   129be:	42a3      	cmp	r3, r4
   129c0:	d0f3      	beq.n	129aa <bt_mesh_friend_sec_update+0x26>
}
   129c2:	bd38      	pop	{r3, r4, r5, pc}
   129c4:	20001ab8 	.word	0x20001ab8
   129c8:	20001ad8 	.word	0x20001ad8
   129cc:	20001bc0 	.word	0x20001bc0

000129d0 <bt_mesh_friend_clear>:
{
   129d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_net_tx tx = {
   129d4:	4603      	mov	r3, r0
{
   129d6:	b087      	sub	sp, #28
	struct bt_mesh_net_tx tx = {
   129d8:	f853 2b04 	ldr.w	r2, [r3], #4
	struct bt_mesh_ctl_friend_clear *msg = (void *)buf->data;
   129dc:	680d      	ldr	r5, [r1, #0]
	struct bt_mesh_net_tx tx = {
   129de:	2400      	movs	r4, #0
{
   129e0:	460e      	mov	r6, r1
	struct bt_mesh_net_tx tx = {
   129e2:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
   129e6:	4607      	mov	r7, r0
	struct bt_mesh_net_tx tx = {
   129e8:	9405      	str	r4, [sp, #20]
		.src  = bt_mesh_primary_addr(),
   129ea:	f7fc ffc1 	bl	f970 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   129ee:	f8ad 0014 	strh.w	r0, [sp, #20]
		.xmit = bt_mesh_net_transmit_get(),
   129f2:	f7f8 fd13 	bl	b41c <bt_mesh_net_transmit_get>
	if (buf->len < sizeof(*msg)) {
   129f6:	88b3      	ldrh	r3, [r6, #4]
	struct bt_mesh_net_tx tx = {
   129f8:	f88d 0016 	strb.w	r0, [sp, #22]
	if (buf->len < sizeof(*msg)) {
   129fc:	2b03      	cmp	r3, #3
   129fe:	d808      	bhi.n	12a12 <bt_mesh_friend_clear+0x42>
		BT_WARN("Too short Friend Clear");
   12a00:	4822      	ldr	r0, [pc, #136]	; (12a8c <bt_mesh_friend_clear+0xbc>)
   12a02:	2157      	movs	r1, #87	; 0x57
   12a04:	f00f fa61 	bl	21eca <printk>
		return -EINVAL;
   12a08:	f06f 0015 	mvn.w	r0, #21
}
   12a0c:	b007      	add	sp, #28
   12a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   12a12:	f8b5 9000 	ldrh.w	r9, [r5]
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
   12a16:	6838      	ldr	r0, [r7, #0]
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   12a18:	f8b5 8002 	ldrh.w	r8, [r5, #2]
   12a1c:	8b80      	ldrh	r0, [r0, #28]
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   12a1e:	ea4f 2609 	mov.w	r6, r9, lsl #8
   12a22:	ea46 2619 	orr.w	r6, r6, r9, lsr #8
   12a26:	b2b6      	uxth	r6, r6
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   12a28:	4623      	mov	r3, r4
   12a2a:	4622      	mov	r2, r4
   12a2c:	4631      	mov	r1, r6
   12a2e:	f7ff ff61 	bl	128f4 <bt_mesh_friend_find.part.21>
   12a32:	ea4f 2508 	mov.w	r5, r8, lsl #8
   12a36:	ea45 2518 	orr.w	r5, r5, r8, lsr #8
   12a3a:	b2ad      	uxth	r5, r5
	if (!frnd) {
   12a3c:	4607      	mov	r7, r0
   12a3e:	b930      	cbnz	r0, 12a4e <bt_mesh_friend_clear+0x7e>
		BT_WARN("No matching LPN addr 0x%04x", lpn_addr);
   12a40:	4813      	ldr	r0, [pc, #76]	; (12a90 <bt_mesh_friend_clear+0xc0>)
   12a42:	4632      	mov	r2, r6
   12a44:	2157      	movs	r1, #87	; 0x57
   12a46:	f00f fa40 	bl	21eca <printk>
		return 0;
   12a4a:	4638      	mov	r0, r7
   12a4c:	e7de      	b.n	12a0c <bt_mesh_friend_clear+0x3c>
	if (lpn_counter - frnd->lpn_counter > 255) {
   12a4e:	8942      	ldrh	r2, [r0, #10]
   12a50:	1aab      	subs	r3, r5, r2
   12a52:	2bff      	cmp	r3, #255	; 0xff
   12a54:	dd06      	ble.n	12a64 <bt_mesh_friend_clear+0x94>
		BT_WARN("LPN Counter out of range (old %u new %u)",
   12a56:	462b      	mov	r3, r5
   12a58:	2157      	movs	r1, #87	; 0x57
   12a5a:	480e      	ldr	r0, [pc, #56]	; (12a94 <bt_mesh_friend_clear+0xc4>)
   12a5c:	f00f fa35 	bl	21eca <printk>
	return 0;
   12a60:	4620      	mov	r0, r4
   12a62:	e7d3      	b.n	12a0c <bt_mesh_friend_clear+0x3c>
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
   12a64:	9b04      	ldr	r3, [sp, #16]
	cfm.lpn_addr    = msg->lpn_addr;
   12a66:	f8ad 9008 	strh.w	r9, [sp, #8]
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
   12a6a:	227f      	movs	r2, #127	; 0x7f
   12a6c:	72da      	strb	r2, [r3, #11]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   12a6e:	2106      	movs	r1, #6
   12a70:	e9cd 4400 	strd	r4, r4, [sp]
   12a74:	2304      	movs	r3, #4
   12a76:	aa02      	add	r2, sp, #8
   12a78:	a803      	add	r0, sp, #12
	cfm.lpn_counter = msg->lpn_counter;
   12a7a:	f8ad 800a 	strh.w	r8, [sp, #10]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   12a7e:	f7fb f99f 	bl	ddc0 <bt_mesh_ctl_send>
	friend_clear(frnd);
   12a82:	4638      	mov	r0, r7
   12a84:	f7ff fc84 	bl	12390 <friend_clear>
   12a88:	e7ea      	b.n	12a60 <bt_mesh_friend_clear+0x90>
   12a8a:	bf00      	nop
   12a8c:	0002dedc 	.word	0x0002dedc
   12a90:	0002def8 	.word	0x0002def8
   12a94:	0002df19 	.word	0x0002df19

00012a98 <bt_mesh_friend_sub_add>:
{
   12a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   12a9a:	888b      	ldrh	r3, [r1, #4]
   12a9c:	2b02      	cmp	r3, #2
{
   12a9e:	460d      	mov	r5, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   12aa0:	d806      	bhi.n	12ab0 <bt_mesh_friend_sub_add+0x18>
		BT_WARN("Too short Friend Subscription Add");
   12aa2:	4824      	ldr	r0, [pc, #144]	; (12b34 <bt_mesh_friend_sub_add+0x9c>)
   12aa4:	2157      	movs	r1, #87	; 0x57
   12aa6:	f00f fa10 	bl	21eca <printk>
		return -EINVAL;
   12aaa:	f06f 0015 	mvn.w	r0, #21
}
   12aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
   12ab0:	8906      	ldrh	r6, [r0, #8]
   12ab2:	6800      	ldr	r0, [r0, #0]
   12ab4:	2301      	movs	r3, #1
   12ab6:	461a      	mov	r2, r3
   12ab8:	4631      	mov	r1, r6
   12aba:	8b80      	ldrh	r0, [r0, #28]
   12abc:	f7ff ff1a 	bl	128f4 <bt_mesh_friend_find.part.21>
	if (!frnd) {
   12ac0:	4604      	mov	r4, r0
   12ac2:	b930      	cbnz	r0, 12ad2 <bt_mesh_friend_sub_add+0x3a>
		BT_WARN("No matching LPN addr 0x%04x", rx->ctx.addr);
   12ac4:	4632      	mov	r2, r6
   12ac6:	2157      	movs	r1, #87	; 0x57
   12ac8:	481b      	ldr	r0, [pc, #108]	; (12b38 <bt_mesh_friend_sub_add+0xa0>)
   12aca:	f00f f9fe 	bl	21eca <printk>
	return 0;
   12ace:	2000      	movs	r0, #0
   12ad0:	e7ed      	b.n	12aae <bt_mesh_friend_sub_add+0x16>
	if (frnd->pending_buf) {
   12ad2:	78c3      	ldrb	r3, [r0, #3]
   12ad4:	071b      	lsls	r3, r3, #28
   12ad6:	d504      	bpl.n	12ae2 <bt_mesh_friend_sub_add+0x4a>
		BT_WARN("Previous buffer not yet sent!");
   12ad8:	2157      	movs	r1, #87	; 0x57
   12ada:	4818      	ldr	r0, [pc, #96]	; (12b3c <bt_mesh_friend_sub_add+0xa4>)
   12adc:	f00f f9f5 	bl	21eca <printk>
		return 0;
   12ae0:	e7f5      	b.n	12ace <bt_mesh_friend_sub_add+0x36>
	friend_recv_delay(frnd);
   12ae2:	f013 fe52 	bl	2678a <friend_recv_delay>
	xact = net_buf_simple_pull_u8(buf);
   12ae6:	4628      	mov	r0, r5
   12ae8:	f015 fa11 	bl	27f0e <net_buf_simple_pull_u8>
	BT_WARN("No space in friend subscription list");
   12aec:	4f14      	ldr	r7, [pc, #80]	; (12b40 <bt_mesh_friend_sub_add+0xa8>)
	xact = net_buf_simple_pull_u8(buf);
   12aee:	4606      	mov	r6, r0
	while (buf->len >= 2U) {
   12af0:	88ab      	ldrh	r3, [r5, #4]
   12af2:	2b01      	cmp	r3, #1
   12af4:	d804      	bhi.n	12b00 <bt_mesh_friend_sub_add+0x68>
	enqueue_sub_cfm(frnd, xact);
   12af6:	4631      	mov	r1, r6
   12af8:	4620      	mov	r0, r4
   12afa:	f7ff fd99 	bl	12630 <enqueue_sub_cfm>
   12afe:	e7e6      	b.n	12ace <bt_mesh_friend_sub_add+0x36>
		friend_sub_add(frnd, net_buf_simple_pull_be16(buf));
   12b00:	4628      	mov	r0, r5
   12b02:	f015 fa14 	bl	27f2e <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == BT_MESH_ADDR_UNASSIGNED) {
   12b06:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   12b0a:	b133      	cbz	r3, 12b1a <bt_mesh_friend_sub_add+0x82>
   12b0c:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   12b10:	b143      	cbz	r3, 12b24 <bt_mesh_friend_sub_add+0x8c>
   12b12:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   12b16:	b93b      	cbnz	r3, 12b28 <bt_mesh_friend_sub_add+0x90>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   12b18:	2302      	movs	r3, #2
			frnd->sub_list[i] = addr;
   12b1a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   12b1e:	f8a3 0056 	strh.w	r0, [r3, #86]	; 0x56
			return;
   12b22:	e7e5      	b.n	12af0 <bt_mesh_friend_sub_add+0x58>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   12b24:	2301      	movs	r3, #1
   12b26:	e7f8      	b.n	12b1a <bt_mesh_friend_sub_add+0x82>
	BT_WARN("No space in friend subscription list");
   12b28:	2157      	movs	r1, #87	; 0x57
   12b2a:	4638      	mov	r0, r7
   12b2c:	f00f f9cd 	bl	21eca <printk>
   12b30:	e7de      	b.n	12af0 <bt_mesh_friend_sub_add+0x58>
   12b32:	bf00      	nop
   12b34:	0002e275 	.word	0x0002e275
   12b38:	0002def8 	.word	0x0002def8
   12b3c:	0002e29c 	.word	0x0002e29c
   12b40:	0002e2bf 	.word	0x0002e2bf

00012b44 <bt_mesh_friend_sub_rem>:
{
   12b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   12b46:	888b      	ldrh	r3, [r1, #4]
   12b48:	2b02      	cmp	r3, #2
{
   12b4a:	460e      	mov	r6, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   12b4c:	d806      	bhi.n	12b5c <bt_mesh_friend_sub_rem+0x18>
		BT_WARN("Too short Friend Subscription Remove");
   12b4e:	4824      	ldr	r0, [pc, #144]	; (12be0 <bt_mesh_friend_sub_rem+0x9c>)
   12b50:	2157      	movs	r1, #87	; 0x57
   12b52:	f00f f9ba 	bl	21eca <printk>
		return -EINVAL;
   12b56:	f06f 0015 	mvn.w	r0, #21
}
   12b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
   12b5c:	8905      	ldrh	r5, [r0, #8]
   12b5e:	6800      	ldr	r0, [r0, #0]
   12b60:	2301      	movs	r3, #1
   12b62:	461a      	mov	r2, r3
   12b64:	4629      	mov	r1, r5
   12b66:	8b80      	ldrh	r0, [r0, #28]
   12b68:	f7ff fec4 	bl	128f4 <bt_mesh_friend_find.part.21>
	if (!frnd) {
   12b6c:	4604      	mov	r4, r0
   12b6e:	b930      	cbnz	r0, 12b7e <bt_mesh_friend_sub_rem+0x3a>
		BT_WARN("No matching LPN addr 0x%04x", rx->ctx.addr);
   12b70:	462a      	mov	r2, r5
   12b72:	2157      	movs	r1, #87	; 0x57
   12b74:	481b      	ldr	r0, [pc, #108]	; (12be4 <bt_mesh_friend_sub_rem+0xa0>)
   12b76:	f00f f9a8 	bl	21eca <printk>
	return 0;
   12b7a:	2000      	movs	r0, #0
   12b7c:	e7ed      	b.n	12b5a <bt_mesh_friend_sub_rem+0x16>
	if (frnd->pending_buf) {
   12b7e:	78c3      	ldrb	r3, [r0, #3]
   12b80:	f013 0508 	ands.w	r5, r3, #8
   12b84:	d004      	beq.n	12b90 <bt_mesh_friend_sub_rem+0x4c>
		BT_WARN("Previous buffer not yet sent!");
   12b86:	2157      	movs	r1, #87	; 0x57
   12b88:	4817      	ldr	r0, [pc, #92]	; (12be8 <bt_mesh_friend_sub_rem+0xa4>)
   12b8a:	f00f f99e 	bl	21eca <printk>
		return 0;
   12b8e:	e7f4      	b.n	12b7a <bt_mesh_friend_sub_rem+0x36>
	friend_recv_delay(frnd);
   12b90:	f013 fdfb 	bl	2678a <friend_recv_delay>
	xact = net_buf_simple_pull_u8(buf);
   12b94:	4630      	mov	r0, r6
   12b96:	f015 f9ba 	bl	27f0e <net_buf_simple_pull_u8>
   12b9a:	4607      	mov	r7, r0
	while (buf->len >= 2U) {
   12b9c:	88b3      	ldrh	r3, [r6, #4]
   12b9e:	2b01      	cmp	r3, #1
   12ba0:	d804      	bhi.n	12bac <bt_mesh_friend_sub_rem+0x68>
	enqueue_sub_cfm(frnd, xact);
   12ba2:	4639      	mov	r1, r7
   12ba4:	4620      	mov	r0, r4
   12ba6:	f7ff fd43 	bl	12630 <enqueue_sub_cfm>
   12baa:	e7e6      	b.n	12b7a <bt_mesh_friend_sub_rem+0x36>
		friend_sub_rem(frnd, net_buf_simple_pull_be16(buf));
   12bac:	4630      	mov	r0, r6
   12bae:	f015 f9be 	bl	27f2e <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == addr) {
   12bb2:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   12bb6:	4283      	cmp	r3, r0
   12bb8:	d00d      	beq.n	12bd6 <bt_mesh_friend_sub_rem+0x92>
   12bba:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   12bbe:	4283      	cmp	r3, r0
   12bc0:	d00b      	beq.n	12bda <bt_mesh_friend_sub_rem+0x96>
   12bc2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   12bc6:	4283      	cmp	r3, r0
   12bc8:	d1e8      	bne.n	12b9c <bt_mesh_friend_sub_rem+0x58>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   12bca:	2302      	movs	r3, #2
			frnd->sub_list[i] = BT_MESH_ADDR_UNASSIGNED;
   12bcc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   12bd0:	f8a3 5056 	strh.w	r5, [r3, #86]	; 0x56
			return;
   12bd4:	e7e2      	b.n	12b9c <bt_mesh_friend_sub_rem+0x58>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   12bd6:	2300      	movs	r3, #0
   12bd8:	e7f8      	b.n	12bcc <bt_mesh_friend_sub_rem+0x88>
   12bda:	2301      	movs	r3, #1
   12bdc:	e7f6      	b.n	12bcc <bt_mesh_friend_sub_rem+0x88>
   12bde:	bf00      	nop
   12be0:	0002e2e9 	.word	0x0002e2e9
   12be4:	0002def8 	.word	0x0002def8
   12be8:	0002e29c 	.word	0x0002e29c

00012bec <bt_mesh_friend_poll>:
{
   12bec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*msg)) {
   12bf0:	888b      	ldrh	r3, [r1, #4]
	struct bt_mesh_ctl_friend_poll *msg = (void *)buf->data;
   12bf2:	680f      	ldr	r7, [r1, #0]
	if (buf->len < sizeof(*msg)) {
   12bf4:	b933      	cbnz	r3, 12c04 <bt_mesh_friend_poll+0x18>
		BT_WARN("Too short Friend Poll");
   12bf6:	4839      	ldr	r0, [pc, #228]	; (12cdc <bt_mesh_friend_poll+0xf0>)
   12bf8:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Prohibited (non-zero) padding bits");
   12bfa:	f00f f966 	bl	21eca <printk>
		return -EINVAL;
   12bfe:	f06f 0515 	mvn.w	r5, #21
   12c02:	e00f      	b.n	12c24 <bt_mesh_friend_poll+0x38>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
   12c04:	8905      	ldrh	r5, [r0, #8]
   12c06:	6800      	ldr	r0, [r0, #0]
   12c08:	2300      	movs	r3, #0
   12c0a:	2201      	movs	r2, #1
   12c0c:	4629      	mov	r1, r5
   12c0e:	8b80      	ldrh	r0, [r0, #28]
   12c10:	f7ff fe70 	bl	128f4 <bt_mesh_friend_find.part.21>
	if (!frnd) {
   12c14:	4604      	mov	r4, r0
   12c16:	b940      	cbnz	r0, 12c2a <bt_mesh_friend_poll+0x3e>
		BT_WARN("No matching LPN addr 0x%04x", rx->ctx.addr);
   12c18:	462a      	mov	r2, r5
   12c1a:	2157      	movs	r1, #87	; 0x57
   12c1c:	4830      	ldr	r0, [pc, #192]	; (12ce0 <bt_mesh_friend_poll+0xf4>)
   12c1e:	f00f f954 	bl	21eca <printk>
		return 0;
   12c22:	4625      	mov	r5, r4
}
   12c24:	4628      	mov	r0, r5
   12c26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (msg->fsn & ~1) {
   12c2a:	783d      	ldrb	r5, [r7, #0]
   12c2c:	f035 0501 	bics.w	r5, r5, #1
   12c30:	d002      	beq.n	12c38 <bt_mesh_friend_poll+0x4c>
		BT_WARN("Prohibited (non-zero) padding bits");
   12c32:	2157      	movs	r1, #87	; 0x57
   12c34:	482b      	ldr	r0, [pc, #172]	; (12ce4 <bt_mesh_friend_poll+0xf8>)
   12c36:	e7e0      	b.n	12bfa <bt_mesh_friend_poll+0xe>
	if (frnd->pending_buf) {
   12c38:	78c3      	ldrb	r3, [r0, #3]
   12c3a:	0719      	lsls	r1, r3, #28
   12c3c:	d504      	bpl.n	12c48 <bt_mesh_friend_poll+0x5c>
		BT_WARN("Previous buffer not yet sent");
   12c3e:	2157      	movs	r1, #87	; 0x57
   12c40:	4829      	ldr	r0, [pc, #164]	; (12ce8 <bt_mesh_friend_poll+0xfc>)
   12c42:	f00f f942 	bl	21eca <printk>
		return 0;
   12c46:	e7ed      	b.n	12c24 <bt_mesh_friend_poll+0x38>
	friend_recv_delay(frnd);
   12c48:	f013 fd9f 	bl	2678a <friend_recv_delay>
	if (!frnd->established) {
   12c4c:	78e3      	ldrb	r3, [r4, #3]
   12c4e:	06da      	lsls	r2, r3, #27
   12c50:	d50c      	bpl.n	12c6c <bt_mesh_friend_poll+0x80>
	if (msg->fsn == frnd->fsn && frnd->last) {
   12c52:	78e3      	ldrb	r3, [r4, #3]
   12c54:	7839      	ldrb	r1, [r7, #0]
   12c56:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   12c5a:	f003 0201 	and.w	r2, r3, #1
   12c5e:	4291      	cmp	r1, r2
   12c60:	d129      	bne.n	12cb6 <bt_mesh_friend_poll+0xca>
   12c62:	b370      	cbz	r0, 12cc2 <bt_mesh_friend_poll+0xd6>
		frnd->send_last = 1U;
   12c64:	f043 0302 	orr.w	r3, r3, #2
   12c68:	70e3      	strb	r3, [r4, #3]
   12c6a:	e7db      	b.n	12c24 <bt_mesh_friend_poll+0x38>
		Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   12c6c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 12cf4 <bt_mesh_friend_poll+0x108>
   12c70:	4e1e      	ldr	r6, [pc, #120]	; (12cec <bt_mesh_friend_poll+0x100>)
   12c72:	f8df 9084 	ldr.w	r9, [pc, #132]	; 12cf8 <bt_mesh_friend_poll+0x10c>
		frnd->established = 1U;
   12c76:	f043 0310 	orr.w	r3, r3, #16
   12c7a:	70e3      	strb	r3, [r4, #3]
		Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   12c7c:	46c3      	mov	fp, r8
   12c7e:	4546      	cmp	r6, r8
   12c80:	d90a      	bls.n	12c98 <bt_mesh_friend_poll+0xac>
   12c82:	4649      	mov	r1, r9
   12c84:	481a      	ldr	r0, [pc, #104]	; (12cf0 <bt_mesh_friend_poll+0x104>)
   12c86:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   12c8a:	f00f f91e 	bl	21eca <printk>
   12c8e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
   12c92:	4648      	mov	r0, r9
   12c94:	f00f fbcb 	bl	2242e <assert_post_action>
   12c98:	455e      	cmp	r6, fp
   12c9a:	d2da      	bcs.n	12c52 <bt_mesh_friend_poll+0x66>
			if (cb->established) {
   12c9c:	f8d6 a000 	ldr.w	sl, [r6]
   12ca0:	f1ba 0f00 	cmp.w	sl, #0
   12ca4:	d005      	beq.n	12cb2 <bt_mesh_friend_poll+0xc6>
				cb->established(frnd->subnet->net_idx, frnd->lpn, frnd->recv_delay,
   12ca6:	6920      	ldr	r0, [r4, #16]
   12ca8:	6863      	ldr	r3, [r4, #4]
   12caa:	78a2      	ldrb	r2, [r4, #2]
   12cac:	8821      	ldrh	r1, [r4, #0]
   12cae:	8b80      	ldrh	r0, [r0, #28]
   12cb0:	47d0      	blx	sl
		Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   12cb2:	3608      	adds	r6, #8
   12cb4:	e7e3      	b.n	12c7e <bt_mesh_friend_poll+0x92>
		if (frnd->last) {
   12cb6:	b120      	cbz	r0, 12cc2 <bt_mesh_friend_poll+0xd6>
			net_buf_unref(frnd->last);
   12cb8:	f009 fdd6 	bl	1c868 <net_buf_unref>
			frnd->last = NULL;
   12cbc:	2300      	movs	r3, #0
   12cbe:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		frnd->fsn = msg->fsn;
   12cc2:	78e3      	ldrb	r3, [r4, #3]
   12cc4:	783a      	ldrb	r2, [r7, #0]
   12cc6:	f362 0300 	bfi	r3, r2, #0, #1
   12cca:	70e3      	strb	r3, [r4, #3]
		if (sys_slist_is_empty(&frnd->queue)) {
   12ccc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   12cd0:	2b00      	cmp	r3, #0
   12cd2:	d1a7      	bne.n	12c24 <bt_mesh_friend_poll+0x38>
			enqueue_update(frnd, 0);
   12cd4:	4620      	mov	r0, r4
   12cd6:	f7ff fd77 	bl	127c8 <enqueue_update.constprop.24>
			BT_DBG("Enqueued Friend Update to empty queue");
   12cda:	e7a3      	b.n	12c24 <bt_mesh_friend_poll+0x38>
   12cdc:	0002e041 	.word	0x0002e041
   12ce0:	0002def8 	.word	0x0002def8
   12ce4:	0002e05c 	.word	0x0002e05c
   12ce8:	0002e084 	.word	0x0002e084
   12cec:	00028bd0 	.word	0x00028bd0
   12cf0:	0002a026 	.word	0x0002a026
   12cf4:	00028bd0 	.word	0x00028bd0
   12cf8:	0002e442 	.word	0x0002e442

00012cfc <bt_mesh_friend_clear_cfm>:
{
   12cfc:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*msg)) {
   12cfe:	888b      	ldrh	r3, [r1, #4]
	struct bt_mesh_ctl_friend_clear_confirm *msg = (void *)buf->data;
   12d00:	680d      	ldr	r5, [r1, #0]
	if (buf->len < sizeof(*msg)) {
   12d02:	2b03      	cmp	r3, #3
   12d04:	d806      	bhi.n	12d14 <bt_mesh_friend_clear_cfm+0x18>
		BT_WARN("Too short Friend Clear Confirm");
   12d06:	481d      	ldr	r0, [pc, #116]	; (12d7c <bt_mesh_friend_clear_cfm+0x80>)
   12d08:	2157      	movs	r1, #87	; 0x57
   12d0a:	f00f f8de 	bl	21eca <printk>
		return -EINVAL;
   12d0e:	f06f 0015 	mvn.w	r0, #21
}
   12d12:	bd38      	pop	{r3, r4, r5, pc}
		if (frnd->clear.frnd == prev_friend) {
   12d14:	4c1a      	ldr	r4, [pc, #104]	; (12d80 <bt_mesh_friend_clear_cfm+0x84>)
	frnd = find_clear(rx->ctx.addr);
   12d16:	8902      	ldrh	r2, [r0, #8]
		if (frnd->clear.frnd == prev_friend) {
   12d18:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   12d1c:	4293      	cmp	r3, r2
   12d1e:	d01c      	beq.n	12d5a <bt_mesh_friend_clear_cfm+0x5e>
   12d20:	f8b4 31bc 	ldrh.w	r3, [r4, #444]	; 0x1bc
   12d24:	4293      	cmp	r3, r2
   12d26:	d026      	beq.n	12d76 <bt_mesh_friend_clear_cfm+0x7a>
		BT_WARN("No pending clear procedure for 0x%02x", rx->ctx.addr);
   12d28:	2157      	movs	r1, #87	; 0x57
   12d2a:	4816      	ldr	r0, [pc, #88]	; (12d84 <bt_mesh_friend_clear_cfm+0x88>)
   12d2c:	f00f f8cd 	bl	21eca <printk>
		return 0;
   12d30:	2000      	movs	r0, #0
   12d32:	e7ee      	b.n	12d12 <bt_mesh_friend_clear_cfm+0x16>
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   12d34:	886b      	ldrh	r3, [r5, #2]
   12d36:	021a      	lsls	r2, r3, #8
   12d38:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
	if (lpn_counter != frnd->lpn_counter) {
   12d3c:	8963      	ldrh	r3, [r4, #10]
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   12d3e:	b292      	uxth	r2, r2
	if (lpn_counter != frnd->lpn_counter) {
   12d40:	4293      	cmp	r3, r2
   12d42:	d002      	beq.n	12d4a <bt_mesh_friend_clear_cfm+0x4e>
		BT_WARN("LPN counter mismatch (0x%04x != 0x%04x)",
   12d44:	2157      	movs	r1, #87	; 0x57
   12d46:	4810      	ldr	r0, [pc, #64]	; (12d88 <bt_mesh_friend_clear_cfm+0x8c>)
   12d48:	e012      	b.n	12d70 <bt_mesh_friend_clear_cfm+0x74>
	k_delayed_work_cancel(&frnd->clear.timer);
   12d4a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   12d4e:	f00d fa73 	bl	20238 <k_delayed_work_cancel>
	frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
   12d52:	2000      	movs	r0, #0
   12d54:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
	return 0;
   12d58:	e7db      	b.n	12d12 <bt_mesh_friend_clear_cfm+0x16>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   12d5a:	3420      	adds	r4, #32
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   12d5c:	882b      	ldrh	r3, [r5, #0]
   12d5e:	021a      	lsls	r2, r3, #8
   12d60:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
	if (lpn_addr != frnd->lpn) {
   12d64:	8823      	ldrh	r3, [r4, #0]
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   12d66:	b292      	uxth	r2, r2
	if (lpn_addr != frnd->lpn) {
   12d68:	4293      	cmp	r3, r2
   12d6a:	d0e3      	beq.n	12d34 <bt_mesh_friend_clear_cfm+0x38>
		BT_WARN("LPN address mismatch (0x%04x != 0x%04x)",
   12d6c:	4807      	ldr	r0, [pc, #28]	; (12d8c <bt_mesh_friend_clear_cfm+0x90>)
   12d6e:	2157      	movs	r1, #87	; 0x57
		BT_WARN("LPN counter mismatch (0x%04x != 0x%04x)",
   12d70:	f00f f8ab 	bl	21eca <printk>
   12d74:	e7dc      	b.n	12d30 <bt_mesh_friend_clear_cfm+0x34>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   12d76:	f504 7484 	add.w	r4, r4, #264	; 0x108
   12d7a:	e7ef      	b.n	12d5c <bt_mesh_friend_clear_cfm+0x60>
   12d7c:	0002df47 	.word	0x0002df47
   12d80:	20001ab8 	.word	0x20001ab8
   12d84:	0002df6b 	.word	0x0002df6b
   12d88:	0002dfc3 	.word	0x0002dfc3
   12d8c:	0002df96 	.word	0x0002df96

00012d90 <bt_mesh_friend_req>:
{
   12d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   12d94:	7d03      	ldrb	r3, [r0, #20]
   12d96:	f003 0330 	and.w	r3, r3, #48	; 0x30
   12d9a:	2b10      	cmp	r3, #16
{
   12d9c:	b089      	sub	sp, #36	; 0x24
   12d9e:	4606      	mov	r6, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   12da0:	d046      	beq.n	12e30 <bt_mesh_friend_req+0xa0>
	if (buf->len < sizeof(*msg)) {
   12da2:	888b      	ldrh	r3, [r1, #4]
   12da4:	2b09      	cmp	r3, #9
   12da6:	d804      	bhi.n	12db2 <bt_mesh_friend_req+0x22>
		BT_WARN("Too short Friend Request");
   12da8:	4895      	ldr	r0, [pc, #596]	; (13000 <bt_mesh_friend_req+0x270>)
   12daa:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Prohibited NumElements value (0x00)");
   12dac:	f00f f88d 	bl	21eca <printk>
		return -EINVAL;
   12db0:	e007      	b.n	12dc2 <bt_mesh_friend_req+0x32>
	struct bt_mesh_ctl_friend_req *msg = (void *)buf->data;
   12db2:	680d      	ldr	r5, [r1, #0]
	if (msg->recv_delay <= 0x09) {
   12db4:	786a      	ldrb	r2, [r5, #1]
   12db6:	2a09      	cmp	r2, #9
   12db8:	d809      	bhi.n	12dce <bt_mesh_friend_req+0x3e>
		BT_WARN("Prohibited ReceiveDelay (0x%02x)", msg->recv_delay);
   12dba:	4892      	ldr	r0, [pc, #584]	; (13004 <bt_mesh_friend_req+0x274>)
   12dbc:	2157      	movs	r1, #87	; 0x57
   12dbe:	f00f f884 	bl	21eca <printk>
		return -EINVAL;
   12dc2:	f06f 0515 	mvn.w	r5, #21
}
   12dc6:	4628      	mov	r0, r5
   12dc8:	b009      	add	sp, #36	; 0x24
   12dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return ((uint16_t)src[0] << 8) | src[1];
   12dce:	78eb      	ldrb	r3, [r5, #3]
   12dd0:	792f      	ldrb	r7, [r5, #4]
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   12dd2:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
   12dd6:	78ab      	ldrb	r3, [r5, #2]
   12dd8:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
	if (poll_to <= 0x000009 || poll_to >= 0x34bc00) {
   12ddc:	4b8a      	ldr	r3, [pc, #552]	; (13008 <bt_mesh_friend_req+0x278>)
   12dde:	f1a7 020a 	sub.w	r2, r7, #10
   12de2:	429a      	cmp	r2, r3
   12de4:	d903      	bls.n	12dee <bt_mesh_friend_req+0x5e>
		BT_WARN("Prohibited PollTimeout (0x%06x)", poll_to);
   12de6:	463a      	mov	r2, r7
   12de8:	2157      	movs	r1, #87	; 0x57
   12dea:	4888      	ldr	r0, [pc, #544]	; (1300c <bt_mesh_friend_req+0x27c>)
   12dec:	e7e7      	b.n	12dbe <bt_mesh_friend_req+0x2e>
	if (msg->num_elem == 0x00) {
   12dee:	79eb      	ldrb	r3, [r5, #7]
   12df0:	b913      	cbnz	r3, 12df8 <bt_mesh_friend_req+0x68>
		BT_WARN("Prohibited NumElements value (0x00)");
   12df2:	2157      	movs	r1, #87	; 0x57
   12df4:	4886      	ldr	r0, [pc, #536]	; (13010 <bt_mesh_friend_req+0x280>)
   12df6:	e7d9      	b.n	12dac <bt_mesh_friend_req+0x1c>
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr + msg->num_elem - 1)) {
   12df8:	8901      	ldrh	r1, [r0, #8]
   12dfa:	440b      	add	r3, r1
   12dfc:	2b01      	cmp	r3, #1
   12dfe:	d003      	beq.n	12e08 <bt_mesh_friend_req+0x78>
   12e00:	3b01      	subs	r3, #1
   12e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12e06:	db02      	blt.n	12e0e <bt_mesh_friend_req+0x7e>
		BT_WARN("LPN elements stretch outside of unicast range");
   12e08:	2157      	movs	r1, #87	; 0x57
   12e0a:	4882      	ldr	r0, [pc, #520]	; (13014 <bt_mesh_friend_req+0x284>)
   12e0c:	e7ce      	b.n	12dac <bt_mesh_friend_req+0x1c>
	if (!MIN_QUEUE_SIZE_LOG(msg->criteria)) {
   12e0e:	782b      	ldrb	r3, [r5, #0]
   12e10:	f013 0307 	ands.w	r3, r3, #7
   12e14:	d102      	bne.n	12e1c <bt_mesh_friend_req+0x8c>
		BT_WARN("Prohibited Minimum Queue Size in Friend Request");
   12e16:	2157      	movs	r1, #87	; 0x57
   12e18:	487f      	ldr	r0, [pc, #508]	; (13018 <bt_mesh_friend_req+0x288>)
   12e1a:	e7c7      	b.n	12dac <bt_mesh_friend_req+0x1c>
	if (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE < MIN_QUEUE_SIZE(msg->criteria)) {
   12e1c:	2201      	movs	r2, #1
   12e1e:	fa02 f303 	lsl.w	r3, r2, r3
   12e22:	2b10      	cmp	r3, #16
   12e24:	d906      	bls.n	12e34 <bt_mesh_friend_req+0xa4>
		BT_WARN("We have a too small Friend Queue size (%u < %u)",
   12e26:	2210      	movs	r2, #16
   12e28:	2157      	movs	r1, #87	; 0x57
   12e2a:	487c      	ldr	r0, [pc, #496]	; (1301c <bt_mesh_friend_req+0x28c>)
   12e2c:	f00f f84d 	bl	21eca <printk>
		return 0;
   12e30:	2500      	movs	r5, #0
   12e32:	e7c8      	b.n	12dc6 <bt_mesh_friend_req+0x36>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
   12e34:	6800      	ldr	r0, [r0, #0]
   12e36:	2300      	movs	r3, #0
   12e38:	8b80      	ldrh	r0, [r0, #28]
   12e3a:	f7ff fd5b 	bl	128f4 <bt_mesh_friend_find.part.21>
	if (frnd) {
   12e3e:	4604      	mov	r4, r0
   12e40:	b968      	cbnz	r0, 12e5e <bt_mesh_friend_req+0xce>
		if (!bt_mesh.frnd[i].subnet) {
   12e42:	4b77      	ldr	r3, [pc, #476]	; (13020 <bt_mesh_friend_req+0x290>)
   12e44:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   12e46:	461a      	mov	r2, r3
   12e48:	b124      	cbz	r4, 12e54 <bt_mesh_friend_req+0xc4>
   12e4a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   12e4e:	2b00      	cmp	r3, #0
   12e50:	d14c      	bne.n	12eec <bt_mesh_friend_req+0x15c>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   12e52:	2401      	movs	r4, #1
			frnd = &bt_mesh.frnd[i];
   12e54:	23e8      	movs	r3, #232	; 0xe8
   12e56:	fb03 2404 	mla	r4, r3, r4, r2
   12e5a:	3420      	adds	r4, #32
	if (!frnd) {
   12e5c:	e006      	b.n	12e6c <bt_mesh_friend_req+0xdc>
		BT_WARN("Existing LPN re-requesting Friendship");
   12e5e:	4871      	ldr	r0, [pc, #452]	; (13024 <bt_mesh_friend_req+0x294>)
   12e60:	2157      	movs	r1, #87	; 0x57
   12e62:	f00f f832 	bl	21eca <printk>
		friend_clear(frnd);
   12e66:	4620      	mov	r0, r4
   12e68:	f7ff fa92 	bl	12390 <friend_clear>
	frnd->lpn = rx->ctx.addr;
   12e6c:	f8b6 8008 	ldrh.w	r8, [r6, #8]
   12e70:	f8a4 8000 	strh.w	r8, [r4]
	frnd->num_elem = msg->num_elem;
   12e74:	79eb      	ldrb	r3, [r5, #7]
   12e76:	7223      	strb	r3, [r4, #8]
	frnd->subnet = rx->sub;
   12e78:	6832      	ldr	r2, [r6, #0]
   12e7a:	6122      	str	r2, [r4, #16]
	frnd->recv_delay = msg->recv_delay;
   12e7c:	786b      	ldrb	r3, [r5, #1]
   12e7e:	70a3      	strb	r3, [r4, #2]
	frnd->poll_to = poll_to * 100U;
   12e80:	2364      	movs	r3, #100	; 0x64
   12e82:	435f      	muls	r7, r3
   12e84:	6067      	str	r7, [r4, #4]
	frnd->lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   12e86:	8929      	ldrh	r1, [r5, #8]
   12e88:	020b      	lsls	r3, r1, #8
   12e8a:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   12e8e:	8163      	strh	r3, [r4, #10]
	frnd->clear.frnd = sys_be16_to_cpu(msg->prev_addr);
   12e90:	f8b5 1005 	ldrh.w	r1, [r5, #5]
   12e94:	020b      	lsls	r3, r1, #8
   12e96:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   12e9a:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	err = friend_cred_create(frnd, SUBNET_KEY_TX_IDX(frnd->subnet));
   12e9e:	7f92      	ldrb	r2, [r2, #30]
   12ea0:	1e93      	subs	r3, r2, #2
   12ea2:	f1d3 0900 	rsbs	r9, r3, #0
   12ea6:	eb49 0903 	adc.w	r9, r9, r3
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   12eaa:	f7fc fd61 	bl	f970 <bt_mesh_primary_addr>
					  frnd->subnet->keys[idx].net);
   12eae:	225a      	movs	r2, #90	; 0x5a
   12eb0:	6921      	ldr	r1, [r4, #16]
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   12eb2:	8963      	ldrh	r3, [r4, #10]
					  frnd->subnet->keys[idx].net);
   12eb4:	fb02 f209 	mul.w	r2, r2, r9
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   12eb8:	ea4f 1749 	mov.w	r7, r9, lsl #5
					  frnd->subnet->keys[idx].net);
   12ebc:	322d      	adds	r2, #45	; 0x2d
   12ebe:	440a      	add	r2, r1
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   12ec0:	444f      	add	r7, r9
   12ec2:	3714      	adds	r7, #20
   12ec4:	9201      	str	r2, [sp, #4]
   12ec6:	89a2      	ldrh	r2, [r4, #12]
   12ec8:	9200      	str	r2, [sp, #0]
   12eca:	4427      	add	r7, r4
   12ecc:	4602      	mov	r2, r0
   12ece:	4641      	mov	r1, r8
   12ed0:	4638      	mov	r0, r7
   12ed2:	f012 fe18 	bl	25b06 <bt_mesh_friend_cred_create>
	if (err) {
   12ed6:	b180      	cbz	r0, 12efa <bt_mesh_friend_req+0x16a>
		BT_ERR("Failed to create friend credentials");
   12ed8:	2145      	movs	r1, #69	; 0x45
   12eda:	4853      	ldr	r0, [pc, #332]	; (13028 <bt_mesh_friend_req+0x298>)
   12edc:	f00e fff5 	bl	21eca <printk>
		friend_clear(frnd);
   12ee0:	4620      	mov	r0, r4
   12ee2:	f7ff fa55 	bl	12390 <friend_clear>
		return -EIO;
   12ee6:	f06f 0504 	mvn.w	r5, #4
   12eea:	e76c      	b.n	12dc6 <bt_mesh_friend_req+0x36>
		BT_WARN("No free Friend contexts for new LPN");
   12eec:	2157      	movs	r1, #87	; 0x57
   12eee:	484f      	ldr	r0, [pc, #316]	; (1302c <bt_mesh_friend_req+0x29c>)
   12ef0:	f00e ffeb 	bl	21eca <printk>
		return -ENOMEM;
   12ef4:	f06f 050b 	mvn.w	r5, #11
   12ef8:	e765      	b.n	12dc6 <bt_mesh_friend_req+0x36>
	if (BT_MESH_ADDR_IS_UNICAST(frnd->clear.frnd) &&
   12efa:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
   12efe:	b203      	sxth	r3, r0
   12f00:	2b00      	cmp	r3, #0
   12f02:	dd16      	ble.n	12f32 <bt_mesh_friend_req+0x1a2>
	    !bt_mesh_elem_find(frnd->clear.frnd)) {
   12f04:	f7fc fd3a 	bl	f97c <bt_mesh_elem_find>
	if (BT_MESH_ADDR_IS_UNICAST(frnd->clear.frnd) &&
   12f08:	b998      	cbnz	r0, 12f32 <bt_mesh_friend_req+0x1a2>
	return z_impl_k_uptime_ticks();
   12f0a:	f015 fcae 	bl	2886a <z_impl_k_uptime_ticks>
   12f0e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   12f12:	fba0 8907 	umull	r8, r9, r0, r7
   12f16:	fb07 9901 	mla	r9, r7, r1, r9
   12f1a:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   12f1e:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	frnd->clear.repeat_sec = 1U;
   12f22:	2301      	movs	r3, #1
	return (uint32_t)k_uptime_get();
   12f24:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
   12f28:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
	send_friend_clear(frnd);
   12f2c:	4620      	mov	r0, r4
   12f2e:	f7ff f8c3 	bl	120b8 <send_friend_clear>
	delay = offer_delay(frnd, rx->ctx.recv_rssi, msg->criteria);
   12f32:	782a      	ldrb	r2, [r5, #0]
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
   12f34:	483e      	ldr	r0, [pc, #248]	; (13030 <bt_mesh_friend_req+0x2a0>)
   12f36:	f3c2 03c1 	ubfx	r3, r2, #3, #2
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
   12f3a:	f3c2 1241 	ubfx	r2, r2, #5, #2
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
   12f3e:	5cc1      	ldrb	r1, [r0, r3]
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
   12f40:	5c82      	ldrb	r2, [r0, r2]
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
   12f42:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
   12f46:	f996 100c 	ldrsb.w	r1, [r6, #12]
   12f4a:	fb02 3111 	mls	r1, r2, r1, r3
	delay /= 10;
   12f4e:	230a      	movs	r3, #10
   12f50:	fb91 f1f3 	sdiv	r1, r1, r3
	return MAX(delay, 100);
   12f54:	2964      	cmp	r1, #100	; 0x64
   12f56:	bfb8      	it	lt
   12f58:	2164      	movlt	r1, #100	; 0x64
   12f5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12f5e:	f240 38e7 	movw	r8, #999	; 0x3e7
   12f62:	f04f 0900 	mov.w	r9, #0
   12f66:	fbc0 8901 	smlal	r8, r9, r0, r1
   12f6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12f6e:	2300      	movs	r3, #0
   12f70:	4640      	mov	r0, r8
   12f72:	4649      	mov	r1, r9
   12f74:	f7ed f8c4 	bl	100 <__aeabi_uldivmod>
	k_delayed_work_submit(&frnd->timer, K_MSEC(delay));
   12f78:	4602      	mov	r2, r0
   12f7a:	460b      	mov	r3, r1
   12f7c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   12f80:	f7ff f8d6 	bl	12130 <k_delayed_work_submit>
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
   12f84:	ab03      	add	r3, sp, #12
   12f86:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
	net_buf_simple_reserve(&sdu, 1);
   12f8a:	2101      	movs	r1, #1
   12f8c:	a805      	add	r0, sp, #20
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
   12f8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	enqueue_offer(frnd, rx->ctx.recv_rssi);
   12f92:	f996 500c 	ldrsb.w	r5, [r6, #12]
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
   12f96:	9305      	str	r3, [sp, #20]
	net_buf_simple_reserve(&sdu, 1);
   12f98:	f009 fb7c 	bl	1c694 <net_buf_simple_reserve>
	off = net_buf_simple_add(&sdu, sizeof(*off));
   12f9c:	2106      	movs	r1, #6
   12f9e:	a805      	add	r0, sp, #20
   12fa0:	f009 fdb2 	bl	1cb08 <net_buf_simple_add>
	off->recv_win = CONFIG_BT_MESH_FRIEND_RECV_WIN,
   12fa4:	23ff      	movs	r3, #255	; 0xff
   12fa6:	7003      	strb	r3, [r0, #0]
	off->queue_size = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE,
   12fa8:	2310      	movs	r3, #16
   12faa:	7043      	strb	r3, [r0, #1]
	off->sub_list_size = ARRAY_SIZE(frnd->sub_list),
   12fac:	2303      	movs	r3, #3
   12fae:	7083      	strb	r3, [r0, #2]
	off->rssi = rssi,
   12fb0:	70c5      	strb	r5, [r0, #3]
	off->frnd_counter = sys_cpu_to_be16(frnd->counter);
   12fb2:	89a2      	ldrh	r2, [r4, #12]
   12fb4:	0213      	lsls	r3, r2, #8
   12fb6:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   12fba:	8083      	strh	r3, [r0, #4]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_OFFER, &sdu);
   12fbc:	aa05      	add	r2, sp, #20
   12fbe:	2104      	movs	r1, #4
   12fc0:	4620      	mov	r0, r4
   12fc2:	f7ff fb11 	bl	125e8 <encode_friend_ctl.isra.11>
	if (!buf) {
   12fc6:	4606      	mov	r6, r0
   12fc8:	b920      	cbnz	r0, 12fd4 <bt_mesh_friend_req+0x244>
		BT_ERR("Unable to encode Friend Offer");
   12fca:	2145      	movs	r1, #69	; 0x45
   12fcc:	4819      	ldr	r0, [pc, #100]	; (13034 <bt_mesh_friend_req+0x2a4>)
   12fce:	f00e ff7c 	bl	21eca <printk>
		return;
   12fd2:	e72d      	b.n	12e30 <bt_mesh_friend_req+0xa0>
	if (encrypt_friend_pdu(frnd, buf, true)) {
   12fd4:	4601      	mov	r1, r0
   12fd6:	2201      	movs	r2, #1
   12fd8:	4620      	mov	r0, r4
   12fda:	f7ff f8e7 	bl	121ac <encrypt_friend_pdu>
   12fde:	4605      	mov	r5, r0
   12fe0:	2800      	cmp	r0, #0
   12fe2:	f47f af25 	bne.w	12e30 <bt_mesh_friend_req+0xa0>
	if (frnd->last) {
   12fe6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   12fea:	b108      	cbz	r0, 12ff0 <bt_mesh_friend_req+0x260>
		net_buf_unref(frnd->last);
   12fec:	f009 fc3c 	bl	1c868 <net_buf_unref>
	frnd->send_last = 1U;
   12ff0:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
   12ff2:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
	frnd->send_last = 1U;
   12ff6:	f043 0302 	orr.w	r3, r3, #2
   12ffa:	70e3      	strb	r3, [r4, #3]
   12ffc:	e6e3      	b.n	12dc6 <bt_mesh_friend_req+0x36>
   12ffe:	bf00      	nop
   13000:	0002e0a6 	.word	0x0002e0a6
   13004:	0002e0c4 	.word	0x0002e0c4
   13008:	0034bbf5 	.word	0x0034bbf5
   1300c:	0002e0ea 	.word	0x0002e0ea
   13010:	0002e10f 	.word	0x0002e10f
   13014:	0002e138 	.word	0x0002e138
   13018:	0002e16b 	.word	0x0002e16b
   1301c:	0002e1a0 	.word	0x0002e1a0
   13020:	20001ab8 	.word	0x20001ab8
   13024:	0002e1d5 	.word	0x0002e1d5
   13028:	0002e229 	.word	0x0002e229
   1302c:	0002e200 	.word	0x0002e200
   13030:	0002e43e 	.word	0x0002e43e
   13034:	0002e252 	.word	0x0002e252

00013038 <bt_mesh_friend_init>:
{
   13038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	list->head = NULL;
   1303c:	4c18      	ldr	r4, [pc, #96]	; (130a0 <bt_mesh_friend_init+0x68>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1303e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 130a8 <bt_mesh_friend_init+0x70>
   13042:	4f18      	ldr	r7, [pc, #96]	; (130a4 <bt_mesh_friend_init+0x6c>)
   13044:	2500      	movs	r5, #0
   13046:	2630      	movs	r6, #48	; 0x30
   13048:	4632      	mov	r2, r6
   1304a:	4629      	mov	r1, r5
   1304c:	f104 0080 	add.w	r0, r4, #128	; 0x80
	list->tail = NULL;
   13050:	e9c4 5530 	strd	r5, r5, [r4, #192]	; 0xc0
   13054:	f011 f8a5 	bl	241a2 <memset>
   13058:	4632      	mov	r2, r6
   1305a:	4629      	mov	r1, r5
   1305c:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   13060:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
   13064:	f011 f89d 	bl	241a2 <memset>
   13068:	4632      	mov	r2, r6
   1306a:	4629      	mov	r1, r5
   1306c:	f504 70b4 	add.w	r0, r4, #360	; 0x168
   13070:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
   13074:	e9c4 552c 	strd	r5, r5, [r4, #176]	; 0xb0
   13078:	e9c4 556a 	strd	r5, r5, [r4, #424]	; 0x1a8
   1307c:	f011 f891 	bl	241a2 <memset>
   13080:	4632      	mov	r2, r6
   13082:	4629      	mov	r1, r5
   13084:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   13088:	f8c4 816c 	str.w	r8, [r4, #364]	; 0x16c
   1308c:	f011 f889 	bl	241a2 <memset>
   13090:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
   13094:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
}
   13098:	4628      	mov	r0, r5
   1309a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1309e:	bf00      	nop
   130a0:	20001ab8 	.word	0x20001ab8
   130a4:	00026809 	.word	0x00026809
   130a8:	0001269d 	.word	0x0001269d

000130ac <bt_mesh_friend_match>:
{
   130ac:	b538      	push	{r3, r4, r5, lr}
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   130ae:	460a      	mov	r2, r1
   130b0:	4601      	mov	r1, r0
   130b2:	4805      	ldr	r0, [pc, #20]	; (130c8 <bt_mesh_friend_match+0x1c>)
   130b4:	f013 fbdb 	bl	2686e <friend_lpn_matches>
   130b8:	b920      	cbnz	r0, 130c4 <bt_mesh_friend_match+0x18>
   130ba:	4804      	ldr	r0, [pc, #16]	; (130cc <bt_mesh_friend_match+0x20>)
}
   130bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   130c0:	f013 bbd5 	b.w	2686e <friend_lpn_matches>
}
   130c4:	bd38      	pop	{r3, r4, r5, pc}
   130c6:	bf00      	nop
   130c8:	20001ad8 	.word	0x20001ad8
   130cc:	20001bc0 	.word	0x20001bc0

000130d0 <bt_mesh_friend_queue_has_space>:
{
   130d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   130d4:	4681      	mov	r9, r0
   130d6:	460f      	mov	r7, r1
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   130d8:	4601      	mov	r1, r0
   130da:	4816      	ldr	r0, [pc, #88]	; (13134 <bt_mesh_friend_queue_has_space+0x64>)
{
   130dc:	f89d 5020 	ldrb.w	r5, [sp, #32]
   130e0:	4692      	mov	sl, r2
   130e2:	4698      	mov	r8, r3
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   130e4:	f013 fbc3 	bl	2686e <friend_lpn_matches>
   130e8:	4606      	mov	r6, r0
   130ea:	b1e0      	cbz	r0, 13126 <bt_mesh_friend_queue_has_space+0x56>
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   130ec:	2d10      	cmp	r5, #16
   130ee:	d81a      	bhi.n	13126 <bt_mesh_friend_queue_has_space+0x56>
   130f0:	462b      	mov	r3, r5
   130f2:	4642      	mov	r2, r8
   130f4:	4639      	mov	r1, r7
   130f6:	480f      	ldr	r0, [pc, #60]	; (13134 <bt_mesh_friend_queue_has_space+0x64>)
   130f8:	f013 fca3 	bl	26a42 <friend_queue_has_space.part.18>
   130fc:	4604      	mov	r4, r0
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   130fe:	4652      	mov	r2, sl
   13100:	4649      	mov	r1, r9
   13102:	480d      	ldr	r0, [pc, #52]	; (13138 <bt_mesh_friend_queue_has_space+0x68>)
   13104:	f013 fbb3 	bl	2686e <friend_lpn_matches>
   13108:	b178      	cbz	r0, 1312a <bt_mesh_friend_queue_has_space+0x5a>
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   1310a:	2d10      	cmp	r5, #16
   1310c:	d808      	bhi.n	13120 <bt_mesh_friend_queue_has_space+0x50>
   1310e:	462b      	mov	r3, r5
   13110:	4642      	mov	r2, r8
   13112:	4639      	mov	r1, r7
   13114:	4808      	ldr	r0, [pc, #32]	; (13138 <bt_mesh_friend_queue_has_space+0x68>)
   13116:	f013 fc94 	bl	26a42 <friend_queue_has_space.part.18>
			someone_has_space = true;
   1311a:	2800      	cmp	r0, #0
   1311c:	bf18      	it	ne
   1311e:	4604      	movne	r4, r0
}
   13120:	4620      	mov	r0, r4
   13122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bool someone_has_space = false, friend_match = false;
   13126:	2400      	movs	r4, #0
   13128:	e7e9      	b.n	130fe <bt_mesh_friend_queue_has_space+0x2e>
	if (!friend_match) {
   1312a:	2e00      	cmp	r6, #0
		return true;
   1312c:	bf08      	it	eq
   1312e:	2401      	moveq	r4, #1
   13130:	e7f6      	b.n	13120 <bt_mesh_friend_queue_has_space+0x50>
   13132:	bf00      	nop
   13134:	20001ad8 	.word	0x20001ad8
   13138:	20001bc0 	.word	0x20001bc0

0001313c <bt_mesh_friend_enqueue_rx>:

void bt_mesh_friend_enqueue_rx(struct bt_mesh_net_rx *rx,
			       enum bt_mesh_friend_pdu_type type,
			       const uint64_t *seq_auth, uint8_t seg_count,
			       struct net_buf_simple *sbuf)
{
   1313c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13140:	4699      	mov	r9, r3
	int i;

	if (!rx->friend_match ||
   13142:	7d03      	ldrb	r3, [r0, #20]
{
   13144:	4617      	mov	r7, r2
	if (!rx->friend_match ||
   13146:	061a      	lsls	r2, r3, #24
{
   13148:	b089      	sub	sp, #36	; 0x24
   1314a:	4605      	mov	r5, r0
   1314c:	460e      	mov	r6, r1
	if (!rx->friend_match ||
   1314e:	d56c      	bpl.n	1322a <bt_mesh_friend_enqueue_rx+0xee>
   13150:	7b42      	ldrb	r2, [r0, #13]
   13152:	2a01      	cmp	r2, #1
   13154:	d803      	bhi.n	1315e <bt_mesh_friend_enqueue_rx+0x22>
	    (rx->ctx.recv_ttl <= 1U && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
   13156:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1315a:	2b10      	cmp	r3, #16
   1315c:	d165      	bne.n	1322a <bt_mesh_friend_enqueue_rx+0xee>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
   1315e:	f012 fbc1 	bl	258e4 <bt_mesh_friend_get>
	    (rx->ctx.recv_ttl <= 1U && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
   13162:	2801      	cmp	r0, #1
   13164:	d161      	bne.n	1322a <bt_mesh_friend_enqueue_rx+0xee>
   13166:	4c3e      	ldr	r4, [pc, #248]	; (13260 <bt_mesh_friend_enqueue_rx+0x124>)

	BT_DBG("recv_ttl %u net_idx 0x%04x src 0x%04x dst 0x%04x",
	       rx->ctx.recv_ttl, rx->sub->net_idx, rx->ctx.addr,
	       rx->ctx.recv_dst);

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   13168:	f04f 0800 	mov.w	r8, #0
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   1316c:	f1a4 0b20 	sub.w	fp, r4, #32
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];

		if (!friend_lpn_matches(frnd, rx->sub->net_idx,
   13170:	682b      	ldr	r3, [r5, #0]
   13172:	896a      	ldrh	r2, [r5, #10]
   13174:	8b9b      	ldrh	r3, [r3, #28]
   13176:	9303      	str	r3, [sp, #12]
   13178:	4619      	mov	r1, r3
   1317a:	4620      	mov	r0, r4
   1317c:	f013 fb77 	bl	2686e <friend_lpn_matches>
   13180:	2800      	cmp	r0, #0
   13182:	d04e      	beq.n	13222 <bt_mesh_friend_enqueue_rx+0xe6>
					rx->ctx.recv_dst)) {
			continue;
		}

		if (friend_lpn_matches(frnd, rx->sub->net_idx,
   13184:	f8b5 a008 	ldrh.w	sl, [r5, #8]
   13188:	9b03      	ldr	r3, [sp, #12]
   1318a:	4652      	mov	r2, sl
   1318c:	4619      	mov	r1, r3
   1318e:	4620      	mov	r0, r4
   13190:	f013 fb6d 	bl	2686e <friend_lpn_matches>
   13194:	2800      	cmp	r0, #0
   13196:	d144      	bne.n	13222 <bt_mesh_friend_enqueue_rx+0xe6>
					rx->ctx.addr)) {
			continue;
		}

		if (!friend_queue_prepare_space(frnd, rx->ctx.addr, seq_auth,
   13198:	464b      	mov	r3, r9
   1319a:	463a      	mov	r2, r7
   1319c:	4651      	mov	r1, sl
   1319e:	4620      	mov	r0, r4
   131a0:	f7ff f954 	bl	1244c <friend_queue_prepare_space>
   131a4:	2800      	cmp	r0, #0
   131a6:	d03c      	beq.n	13222 <bt_mesh_friend_enqueue_rx+0xe6>
	if (bt_mesh_elem_find(rx->ctx.addr)) {
   131a8:	8928      	ldrh	r0, [r5, #8]
   131aa:	f7fc fbe7 	bl	f97c <bt_mesh_elem_find>
   131ae:	2800      	cmp	r0, #0
   131b0:	d137      	bne.n	13222 <bt_mesh_friend_enqueue_rx+0xe6>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
   131b2:	b92e      	cbnz	r6, 131c0 <bt_mesh_friend_enqueue_rx+0x84>
   131b4:	b127      	cbz	r7, 131c0 <bt_mesh_friend_enqueue_rx+0x84>
		friend_purge_old_ack(frnd, seq_auth, rx->ctx.addr);
   131b6:	892a      	ldrh	r2, [r5, #8]
   131b8:	4639      	mov	r1, r7
   131ba:	4620      	mov	r0, r4
   131bc:	f013 fb93 	bl	268e6 <friend_purge_old_ack>
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   131c0:	7d2a      	ldrb	r2, [r5, #20]
	info.src = rx->ctx.addr;
   131c2:	68ab      	ldr	r3, [r5, #8]
   131c4:	9305      	str	r3, [sp, #20]
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   131c6:	f002 0130 	and.w	r1, r2, #48	; 0x30
   131ca:	7b6b      	ldrb	r3, [r5, #13]
   131cc:	2910      	cmp	r1, #16
		info.ttl = rx->ctx.recv_ttl - 1U;
   131ce:	bf18      	it	ne
   131d0:	f103 33ff 	addne.w	r3, r3, #4294967295
   131d4:	f89d 101b 	ldrb.w	r1, [sp, #27]
   131d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   131dc:	f363 0106 	bfi	r1, r3, #0, #7
	info.ctl = rx->ctl;
   131e0:	f3c2 00c0 	ubfx	r0, r2, #3, #1
   131e4:	460b      	mov	r3, r1
   131e6:	f360 13c7 	bfi	r3, r0, #7, #1
   131ea:	f88d 301b 	strb.w	r3, [sp, #27]
	sys_put_be24(rx->seq, info.seq);
   131ee:	692b      	ldr	r3, [r5, #16]
	dst[1] = val;
   131f0:	f88d 301a 	strb.w	r3, [sp, #26]
	dst[0] = val >> 16;
   131f4:	0c19      	lsrs	r1, r3, #16
   131f6:	f88d 1018 	strb.w	r1, [sp, #24]
	dst[0] = val >> 8;
   131fa:	f3c3 2107 	ubfx	r1, r3, #8, #8
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   131fe:	f8db 3000 	ldr.w	r3, [fp]
   13202:	f88d 1019 	strb.w	r1, [sp, #25]
   13206:	f002 0201 	and.w	r2, r2, #1
   1320a:	1a9a      	subs	r2, r3, r2
	buf = create_friend_pdu(frnd, &info, sbuf);
   1320c:	9912      	ldr	r1, [sp, #72]	; 0x48
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   1320e:	9207      	str	r2, [sp, #28]
	buf = create_friend_pdu(frnd, &info, sbuf);
   13210:	a805      	add	r0, sp, #20
   13212:	f7ff f9ab 	bl	1256c <create_friend_pdu.isra.10>
	if (!buf) {
   13216:	4601      	mov	r1, r0
   13218:	b968      	cbnz	r0, 13236 <bt_mesh_friend_enqueue_rx+0xfa>
		BT_ERR("Failed to encode Friend buffer");
   1321a:	2145      	movs	r1, #69	; 0x45
   1321c:	4811      	ldr	r0, [pc, #68]	; (13264 <bt_mesh_friend_enqueue_rx+0x128>)
   1321e:	f00e fe54 	bl	21eca <printk>
		return;
   13222:	34e8      	adds	r4, #232	; 0xe8
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   13224:	f1b8 0f00 	cmp.w	r8, #0
   13228:	d002      	beq.n	13230 <bt_mesh_friend_enqueue_rx+0xf4>
		}

		friend_lpn_enqueue_rx(frnd, rx, type, seq_auth, seg_count,
				      sbuf);
	}
}
   1322a:	b009      	add	sp, #36	; 0x24
   1322c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13230:	f04f 0801 	mov.w	r8, #1
   13234:	e79c      	b.n	13170 <bt_mesh_friend_enqueue_rx+0x34>
	if (type == BT_MESH_FRIEND_PDU_SINGLE) {
   13236:	b94e      	cbnz	r6, 1324c <bt_mesh_friend_enqueue_rx+0x110>
	net_buf_slist_put(&frnd->queue, buf);
   13238:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1323c:	f009 fa4e 	bl	1c6dc <net_buf_slist_put>
	frnd->queue_size++;
   13240:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   13244:	3301      	adds	r3, #1
   13246:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   1324a:	e7ea      	b.n	13222 <bt_mesh_friend_enqueue_rx+0xe6>
   1324c:	9000      	str	r0, [sp, #0]
   1324e:	464b      	mov	r3, r9
   13250:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   13254:	4631      	mov	r1, r6
   13256:	4620      	mov	r0, r4
   13258:	f7ff f93e 	bl	124d8 <enqueue_friend_pdu.part.20>
	BT_DBG("Queued message for LPN 0x%04x, queue_size %u",
   1325c:	e7e1      	b.n	13222 <bt_mesh_friend_enqueue_rx+0xe6>
   1325e:	bf00      	nop
   13260:	20001ad8 	.word	0x20001ad8
   13264:	0002e01d 	.word	0x0002e01d

00013268 <bt_mesh_friend_enqueue_tx>:

bool bt_mesh_friend_enqueue_tx(struct bt_mesh_net_tx *tx,
			       enum bt_mesh_friend_pdu_type type,
			       const uint64_t *seq_auth, uint8_t seg_count,
			       struct net_buf_simple *sbuf)
{
   13268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1326c:	b089      	sub	sp, #36	; 0x24
   1326e:	4605      	mov	r5, r0
   13270:	9303      	str	r3, [sp, #12]
	bool matched = false;
	int i;

	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   13272:	6803      	ldr	r3, [r0, #0]
   13274:	8b9c      	ldrh	r4, [r3, #28]
   13276:	6843      	ldr	r3, [r0, #4]
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   13278:	4847      	ldr	r0, [pc, #284]	; (13398 <bt_mesh_friend_enqueue_tx+0x130>)
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   1327a:	889e      	ldrh	r6, [r3, #4]
{
   1327c:	460f      	mov	r7, r1
   1327e:	4692      	mov	sl, r2
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   13280:	4621      	mov	r1, r4
   13282:	4632      	mov	r2, r6
   13284:	f013 faf3 	bl	2686e <friend_lpn_matches>
   13288:	b940      	cbnz	r0, 1329c <bt_mesh_friend_enqueue_tx+0x34>
   1328a:	4844      	ldr	r0, [pc, #272]	; (1339c <bt_mesh_friend_enqueue_tx+0x134>)
   1328c:	f013 faef 	bl	2686e <friend_lpn_matches>
   13290:	b920      	cbnz	r0, 1329c <bt_mesh_friend_enqueue_tx+0x34>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
		return matched;
   13292:	2600      	movs	r6, #0
				      sbuf);
		matched = true;
	}

	return matched;
}
   13294:	4630      	mov	r0, r6
   13296:	b009      	add	sp, #36	; 0x24
   13298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
   1329c:	f012 fb22 	bl	258e4 <bt_mesh_friend_get>
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   132a0:	2801      	cmp	r0, #1
   132a2:	d1f6      	bne.n	13292 <bt_mesh_friend_enqueue_tx+0x2a>
   132a4:	4c3c      	ldr	r4, [pc, #240]	; (13398 <bt_mesh_friend_enqueue_tx+0x130>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   132a6:	f04f 0900 	mov.w	r9, #0
	bool matched = false;
   132aa:	464e      	mov	r6, r9
	sys_put_be24(bt_mesh.seq, info.seq);
   132ac:	f1a4 0b20 	sub.w	fp, r4, #32
		if (!friend_lpn_matches(frnd, tx->sub->net_idx,
   132b0:	e9d5 3200 	ldrd	r3, r2, [r5]
   132b4:	4620      	mov	r0, r4
   132b6:	8892      	ldrh	r2, [r2, #4]
   132b8:	8b99      	ldrh	r1, [r3, #28]
   132ba:	f013 fad8 	bl	2686e <friend_lpn_matches>
   132be:	2800      	cmp	r0, #0
   132c0:	d047      	beq.n	13352 <bt_mesh_friend_enqueue_tx+0xea>
		if (!friend_queue_prepare_space(frnd, tx->src, seq_auth,
   132c2:	9b03      	ldr	r3, [sp, #12]
   132c4:	8929      	ldrh	r1, [r5, #8]
   132c6:	4652      	mov	r2, sl
   132c8:	4620      	mov	r0, r4
   132ca:	f7ff f8bf 	bl	1244c <friend_queue_prepare_space>
   132ce:	4680      	mov	r8, r0
   132d0:	2800      	cmp	r0, #0
   132d2:	d03e      	beq.n	13352 <bt_mesh_friend_enqueue_tx+0xea>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
   132d4:	b93f      	cbnz	r7, 132e6 <bt_mesh_friend_enqueue_tx+0x7e>
   132d6:	f1ba 0f00 	cmp.w	sl, #0
   132da:	d004      	beq.n	132e6 <bt_mesh_friend_enqueue_tx+0x7e>
		friend_purge_old_ack(frnd, seq_auth, tx->src);
   132dc:	892a      	ldrh	r2, [r5, #8]
   132de:	4651      	mov	r1, sl
   132e0:	4620      	mov	r0, r4
   132e2:	f013 fb00 	bl	268e6 <friend_purge_old_ack>
	info.src = tx->src;
   132e6:	892b      	ldrh	r3, [r5, #8]
   132e8:	f8ad 3014 	strh.w	r3, [sp, #20]
	info.dst = tx->ctx->addr;
   132ec:	686b      	ldr	r3, [r5, #4]
   132ee:	889a      	ldrh	r2, [r3, #4]
	info.ttl = tx->ctx->send_ttl;
   132f0:	7ad9      	ldrb	r1, [r3, #11]
	info.dst = tx->ctx->addr;
   132f2:	f8ad 2016 	strh.w	r2, [sp, #22]
	info.ttl = tx->ctx->send_ttl;
   132f6:	f89d 201b 	ldrb.w	r2, [sp, #27]
   132fa:	f361 0206 	bfi	r2, r1, #0, #7
   132fe:	f88d 201b 	strb.w	r2, [sp, #27]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
   13302:	885b      	ldrh	r3, [r3, #2]
   13304:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13308:	1a9a      	subs	r2, r3, r2
   1330a:	4253      	negs	r3, r2
   1330c:	4153      	adcs	r3, r2
   1330e:	f89d 201b 	ldrb.w	r2, [sp, #27]
   13312:	f363 12c7 	bfi	r2, r3, #7, #1
	sys_put_be24(bt_mesh.seq, info.seq);
   13316:	f8db 3004 	ldr.w	r3, [fp, #4]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
   1331a:	f88d 201b 	strb.w	r2, [sp, #27]
	dst[0] = val >> 16;
   1331e:	0c1a      	lsrs	r2, r3, #16
   13320:	f88d 2018 	strb.w	r2, [sp, #24]
	dst[0] = val >> 8;
   13324:	f3c3 2207 	ubfx	r2, r3, #8, #8
   13328:	f88d 2019 	strb.w	r2, [sp, #25]
	dst[1] = val;
   1332c:	f88d 301a 	strb.w	r3, [sp, #26]
	info.iv_index = BT_MESH_NET_IVI_TX;
   13330:	f8db 2000 	ldr.w	r2, [fp]
   13334:	f7fe ff2e 	bl	12194 <atomic_test_bit.constprop.26>
   13338:	1a10      	subs	r0, r2, r0
   1333a:	9007      	str	r0, [sp, #28]
	buf = create_friend_pdu(frnd, &info, sbuf);
   1333c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1333e:	a805      	add	r0, sp, #20
   13340:	f7ff f914 	bl	1256c <create_friend_pdu.isra.10>
	if (!buf) {
   13344:	4601      	mov	r1, r0
   13346:	b958      	cbnz	r0, 13360 <bt_mesh_friend_enqueue_tx+0xf8>
		BT_ERR("Failed to encode Friend buffer");
   13348:	2145      	movs	r1, #69	; 0x45
   1334a:	4815      	ldr	r0, [pc, #84]	; (133a0 <bt_mesh_friend_enqueue_tx+0x138>)
   1334c:	f00e fdbd 	bl	21eca <printk>
		matched = true;
   13350:	4646      	mov	r6, r8
   13352:	34e8      	adds	r4, #232	; 0xe8
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   13354:	f1b9 0f00 	cmp.w	r9, #0
   13358:	d19c      	bne.n	13294 <bt_mesh_friend_enqueue_tx+0x2c>
   1335a:	f04f 0901 	mov.w	r9, #1
   1335e:	e7a7      	b.n	132b0 <bt_mesh_friend_enqueue_tx+0x48>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && !info.ctl) {
   13360:	b98f      	cbnz	r7, 13386 <bt_mesh_friend_enqueue_tx+0x11e>
   13362:	f99d 301b 	ldrsb.w	r3, [sp, #27]
   13366:	2b00      	cmp	r3, #0
   13368:	db03      	blt.n	13372 <bt_mesh_friend_enqueue_tx+0x10a>
		FRIEND_ADV(buf)->app_idx = tx->ctx->app_idx;
   1336a:	686a      	ldr	r2, [r5, #4]
   1336c:	6943      	ldr	r3, [r0, #20]
   1336e:	8852      	ldrh	r2, [r2, #2]
   13370:	819a      	strh	r2, [r3, #12]
	net_buf_slist_put(&frnd->queue, buf);
   13372:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   13376:	f009 f9b1 	bl	1c6dc <net_buf_slist_put>
	frnd->queue_size++;
   1337a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1337e:	3301      	adds	r3, #1
   13380:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   13384:	e7e4      	b.n	13350 <bt_mesh_friend_enqueue_tx+0xe8>
	if (type == BT_MESH_FRIEND_PDU_SINGLE) {
   13386:	9000      	str	r0, [sp, #0]
   13388:	9b03      	ldr	r3, [sp, #12]
   1338a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1338e:	4639      	mov	r1, r7
   13390:	4620      	mov	r0, r4
   13392:	f7ff f8a1 	bl	124d8 <enqueue_friend_pdu.part.20>
   13396:	e7db      	b.n	13350 <bt_mesh_friend_enqueue_tx+0xe8>
   13398:	20001ad8 	.word	0x20001ad8
   1339c:	20001bc0 	.word	0x20001bc0
   133a0:	0002e01d 	.word	0x0002e01d

000133a4 <bt_mesh_friend_clear_incomplete>:
	return 0;
}

void bt_mesh_friend_clear_incomplete(struct bt_mesh_subnet *sub, uint16_t src,
				     uint16_t dst, uint64_t *seq_auth)
{
   133a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   133a6:	4606      	mov	r6, r0
   133a8:	460c      	mov	r4, r1

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
		int j;

		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
   133aa:	8b81      	ldrh	r1, [r0, #28]
   133ac:	481a      	ldr	r0, [pc, #104]	; (13418 <bt_mesh_friend_clear_incomplete+0x74>)
{
   133ae:	4617      	mov	r7, r2
   133b0:	461d      	mov	r5, r3
		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
   133b2:	f013 fa5c 	bl	2686e <friend_lpn_matches>
   133b6:	b198      	cbz	r0, 133e0 <bt_mesh_friend_clear_incomplete+0x3c>
		}

		for (j = 0; j < ARRAY_SIZE(frnd->seg); j++) {
			struct bt_mesh_friend_seg *seg = &frnd->seg[j];

			if (!is_seg(seg, src, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   133b8:	882a      	ldrh	r2, [r5, #0]
   133ba:	4818      	ldr	r0, [pc, #96]	; (1341c <bt_mesh_friend_clear_incomplete+0x78>)
   133bc:	f3c2 020c 	ubfx	r2, r2, #0, #13
   133c0:	4621      	mov	r1, r4
   133c2:	f013 fb0e 	bl	269e2 <is_seg>
   133c6:	b158      	cbz	r0, 133e0 <bt_mesh_friend_clear_incomplete+0x3c>
				continue;
			}

			BT_WARN("Clearing incomplete segments for 0x%04x", src);
   133c8:	4622      	mov	r2, r4
   133ca:	2157      	movs	r1, #87	; 0x57
   133cc:	4814      	ldr	r0, [pc, #80]	; (13420 <bt_mesh_friend_clear_incomplete+0x7c>)
   133ce:	f00e fd7c 	bl	21eca <printk>

			purge_buffers(&seg->queue);
   133d2:	4812      	ldr	r0, [pc, #72]	; (1341c <bt_mesh_friend_clear_incomplete+0x78>)
   133d4:	f013 faf1 	bl	269ba <purge_buffers>
			seg->seg_count = 0U;
   133d8:	4b12      	ldr	r3, [pc, #72]	; (13424 <bt_mesh_friend_clear_incomplete+0x80>)
   133da:	2200      	movs	r2, #0
   133dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
   133e0:	463a      	mov	r2, r7
   133e2:	8bb1      	ldrh	r1, [r6, #28]
   133e4:	4810      	ldr	r0, [pc, #64]	; (13428 <bt_mesh_friend_clear_incomplete+0x84>)
   133e6:	f013 fa42 	bl	2686e <friend_lpn_matches>
   133ea:	b198      	cbz	r0, 13414 <bt_mesh_friend_clear_incomplete+0x70>
			if (!is_seg(seg, src, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   133ec:	882a      	ldrh	r2, [r5, #0]
   133ee:	480f      	ldr	r0, [pc, #60]	; (1342c <bt_mesh_friend_clear_incomplete+0x88>)
   133f0:	f3c2 020c 	ubfx	r2, r2, #0, #13
   133f4:	4621      	mov	r1, r4
   133f6:	f013 faf4 	bl	269e2 <is_seg>
   133fa:	b158      	cbz	r0, 13414 <bt_mesh_friend_clear_incomplete+0x70>
			BT_WARN("Clearing incomplete segments for 0x%04x", src);
   133fc:	4622      	mov	r2, r4
   133fe:	2157      	movs	r1, #87	; 0x57
   13400:	4807      	ldr	r0, [pc, #28]	; (13420 <bt_mesh_friend_clear_incomplete+0x7c>)
   13402:	f00e fd62 	bl	21eca <printk>
			purge_buffers(&seg->queue);
   13406:	4809      	ldr	r0, [pc, #36]	; (1342c <bt_mesh_friend_clear_incomplete+0x88>)
   13408:	f013 fad7 	bl	269ba <purge_buffers>
			seg->seg_count = 0U;
   1340c:	4b05      	ldr	r3, [pc, #20]	; (13424 <bt_mesh_friend_clear_incomplete+0x80>)
   1340e:	2200      	movs	r2, #0
   13410:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
			break;
		}
	}
}
   13414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13416:	bf00      	nop
   13418:	20001ad8 	.word	0x20001ad8
   1341c:	20001b68 	.word	0x20001b68
   13420:	0002dff0 	.word	0x0002dff0
   13424:	20001ab8 	.word	0x20001ab8
   13428:	20001bc0 	.word	0x20001bc0
   1342c:	20001c50 	.word	0x20001c50

00013430 <prov_link_closed>:
static void prov_link_closed(const struct prov_bearer *bearer, void *cb_data,
			     enum prov_bearer_link_status reason)
{
	BT_DBG("%u", reason);

	if (bt_mesh_prov_link.role->link_closed) {
   13430:	4b07      	ldr	r3, [pc, #28]	; (13450 <prov_link_closed+0x20>)
   13432:	689b      	ldr	r3, [r3, #8]
   13434:	685b      	ldr	r3, [r3, #4]
{
   13436:	b510      	push	{r4, lr}
   13438:	4604      	mov	r4, r0
	if (bt_mesh_prov_link.role->link_closed) {
   1343a:	b103      	cbz	r3, 1343e <prov_link_closed+0xe>
		bt_mesh_prov_link.role->link_closed();
   1343c:	4798      	blx	r3
	}

	if (bt_mesh_prov->link_close) {
   1343e:	4b05      	ldr	r3, [pc, #20]	; (13454 <prov_link_closed+0x24>)
   13440:	681b      	ldr	r3, [r3, #0]
   13442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13444:	b11b      	cbz	r3, 1344e <prov_link_closed+0x1e>
		bt_mesh_prov->link_close(bearer->type);
   13446:	7820      	ldrb	r0, [r4, #0]
	}
}
   13448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->link_close(bearer->type);
   1344c:	4718      	bx	r3
}
   1344e:	bd10      	pop	{r4, pc}
   13450:	20002d80 	.word	0x20002d80
   13454:	20002d7c 	.word	0x20002d7c

00013458 <prov_bearer_error>:

static void prov_bearer_error(const struct prov_bearer *bearer, void *cb_data,
			      uint8_t err)
{
	if (bt_mesh_prov_link.role->error) {
   13458:	4b03      	ldr	r3, [pc, #12]	; (13468 <prov_bearer_error+0x10>)
   1345a:	689b      	ldr	r3, [r3, #8]
   1345c:	689b      	ldr	r3, [r3, #8]
   1345e:	b10b      	cbz	r3, 13464 <prov_bearer_error+0xc>
		bt_mesh_prov_link.role->error(err);
   13460:	4610      	mov	r0, r2
   13462:	4718      	bx	r3
	}
}
   13464:	4770      	bx	lr
   13466:	bf00      	nop
   13468:	20002d80 	.word	0x20002d80

0001346c <prov_recv>:
{
   1346c:	b570      	push	{r4, r5, r6, lr}
	uint8_t type = buf->data[0];
   1346e:	6810      	ldr	r0, [r2, #0]
   13470:	4c19      	ldr	r4, [pc, #100]	; (134d8 <prov_recv+0x6c>)
{
   13472:	4613      	mov	r3, r2
	uint8_t type = buf->data[0];
   13474:	7802      	ldrb	r2, [r0, #0]
	if (type >= ARRAY_SIZE(bt_mesh_prov_link.role->op)) {
   13476:	2a09      	cmp	r2, #9
   13478:	d907      	bls.n	1348a <prov_recv+0x1e>
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
   1347a:	2145      	movs	r1, #69	; 0x45
   1347c:	4817      	ldr	r0, [pc, #92]	; (134dc <prov_recv+0x70>)
   1347e:	f00e fd24 	bl	21eca <printk>
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_FMT);
   13482:	68a3      	ldr	r3, [r4, #8]
   13484:	2002      	movs	r0, #2
   13486:	689b      	ldr	r3, [r3, #8]
   13488:	e012      	b.n	134b0 <prov_recv+0x44>
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   1348a:	d003      	beq.n	13494 <prov_recv+0x28>
   1348c:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
   13490:	4291      	cmp	r1, r2
   13492:	d104      	bne.n	1349e <prov_recv+0x32>
	    !bt_mesh_prov_link.role->op[type]) {
   13494:	68a1      	ldr	r1, [r4, #8]
   13496:	1d15      	adds	r5, r2, #4
   13498:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   1349c:	b959      	cbnz	r1, 134b6 <prov_recv+0x4a>
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, bt_mesh_prov_link.expect);
   1349e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   134a2:	480f      	ldr	r0, [pc, #60]	; (134e0 <prov_recv+0x74>)
   134a4:	2157      	movs	r1, #87	; 0x57
   134a6:	f00e fd10 	bl	21eca <printk>
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   134aa:	68a3      	ldr	r3, [r4, #8]
   134ac:	689b      	ldr	r3, [r3, #8]
   134ae:	2003      	movs	r0, #3
}
   134b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   134b4:	4718      	bx	r3
	if (1 + op_len[type] != buf->len) {
   134b6:	889d      	ldrh	r5, [r3, #4]
   134b8:	4b0a      	ldr	r3, [pc, #40]	; (134e4 <prov_recv+0x78>)
   134ba:	5c9b      	ldrb	r3, [r3, r2]
   134bc:	3301      	adds	r3, #1
   134be:	42ab      	cmp	r3, r5
   134c0:	d006      	beq.n	134d0 <prov_recv+0x64>
		BT_ERR("Invalid length %u for type 0x%02x", buf->len, type);
   134c2:	4613      	mov	r3, r2
   134c4:	2145      	movs	r1, #69	; 0x45
   134c6:	462a      	mov	r2, r5
   134c8:	4807      	ldr	r0, [pc, #28]	; (134e8 <prov_recv+0x7c>)
   134ca:	f00e fcfe 	bl	21eca <printk>
   134ce:	e7d8      	b.n	13482 <prov_recv+0x16>
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   134d0:	3001      	adds	r0, #1
}
   134d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   134d6:	4708      	bx	r1
   134d8:	20002d80 	.word	0x20002d80
   134dc:	0002e583 	.word	0x0002e583
   134e0:	0002e5ad 	.word	0x0002e5ad
   134e4:	0002e579 	.word	0x0002e579
   134e8:	0002e5d2 	.word	0x0002e5d2

000134ec <pub_key_ready>:
	if (!pkey) {
   134ec:	b918      	cbnz	r0, 134f6 <pub_key_ready+0xa>
		BT_WARN("Public key not available");
   134ee:	2157      	movs	r1, #87	; 0x57
   134f0:	4801      	ldr	r0, [pc, #4]	; (134f8 <pub_key_ready+0xc>)
   134f2:	f00e bcea 	b.w	21eca <printk>
}
   134f6:	4770      	bx	lr
   134f8:	0002e5f9 	.word	0x0002e5f9

000134fc <atomic_or.constprop.4>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   134fc:	4b07      	ldr	r3, [pc, #28]	; (1351c <atomic_or.constprop.4+0x20>)
}
   134fe:	f3bf 8f5b 	dmb	ish
   13502:	4602      	mov	r2, r0
   13504:	e853 0f00 	ldrex	r0, [r3]
   13508:	ea40 0102 	orr.w	r1, r0, r2
   1350c:	e843 1c00 	strex	ip, r1, [r3]
   13510:	f1bc 0f00 	cmp.w	ip, #0
   13514:	d1f6      	bne.n	13504 <atomic_or.constprop.4+0x8>
   13516:	f3bf 8f5b 	dmb	ish
   1351a:	4770      	bx	lr
   1351c:	20002d80 	.word	0x20002d80

00013520 <prov_link_opened>:
{
   13520:	b510      	push	{r4, lr}
   13522:	4604      	mov	r4, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13524:	2002      	movs	r0, #2
   13526:	f7ff ffe9 	bl	134fc <atomic_or.constprop.4>
	if (bt_mesh_prov->link_open) {
   1352a:	4b07      	ldr	r3, [pc, #28]	; (13548 <prov_link_opened+0x28>)
   1352c:	681b      	ldr	r3, [r3, #0]
   1352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13530:	b10b      	cbz	r3, 13536 <prov_link_opened+0x16>
		bt_mesh_prov->link_open(bearer->type);
   13532:	7820      	ldrb	r0, [r4, #0]
   13534:	4798      	blx	r3
	bt_mesh_prov_link.bearer = bearer;
   13536:	4b05      	ldr	r3, [pc, #20]	; (1354c <prov_link_opened+0x2c>)
   13538:	605c      	str	r4, [r3, #4]
	if (bt_mesh_prov_link.role->link_opened) {
   1353a:	689b      	ldr	r3, [r3, #8]
   1353c:	681b      	ldr	r3, [r3, #0]
   1353e:	b113      	cbz	r3, 13546 <prov_link_opened+0x26>
}
   13540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov_link.role->link_opened();
   13544:	4718      	bx	r3
}
   13546:	bd10      	pop	{r4, pc}
   13548:	20002d7c 	.word	0x20002d7c
   1354c:	20002d80 	.word	0x20002d80

00013550 <bt_mesh_prov_reset_state>:
{
   13550:	b510      	push	{r4, lr}
	pub_key_cb.func = func ? func : pub_key_ready;
   13552:	4b15      	ldr	r3, [pc, #84]	; (135a8 <bt_mesh_prov_reset_state+0x58>)
	if (bt_mesh_prov_link.conf_inputs[0]) {
   13554:	4c15      	ldr	r4, [pc, #84]	; (135ac <bt_mesh_prov_reset_state+0x5c>)
	pub_key_cb.func = func ? func : pub_key_ready;
   13556:	2800      	cmp	r0, #0
   13558:	bf08      	it	eq
   1355a:	4618      	moveq	r0, r3
   1355c:	4b14      	ldr	r3, [pc, #80]	; (135b0 <bt_mesh_prov_reset_state+0x60>)
   1355e:	6018      	str	r0, [r3, #0]
	if (bt_mesh_prov_link.conf_inputs[0]) {
   13560:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   13564:	b11b      	cbz	r3, 1356e <bt_mesh_prov_reset_state+0x1e>
		bt_mesh_attention(NULL, 0);
   13566:	2100      	movs	r1, #0
   13568:	4608      	mov	r0, r1
   1356a:	f7fe fb77 	bl	11c5c <bt_mesh_attention>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1356e:	f3bf 8f5b 	dmb	ish
   13572:	2100      	movs	r1, #0
   13574:	e854 3f00 	ldrex	r3, [r4]
   13578:	e844 1200 	strex	r2, r1, [r4]
   1357c:	2a00      	cmp	r2, #0
   1357e:	d1f9      	bne.n	13574 <bt_mesh_prov_reset_state+0x24>
   13580:	f3bf 8f5b 	dmb	ish
	(void)memset((uint8_t *)&bt_mesh_prov_link + offset, 0,
   13584:	f240 1205 	movw	r2, #261	; 0x105
   13588:	480a      	ldr	r0, [pc, #40]	; (135b4 <bt_mesh_prov_reset_state+0x64>)
   1358a:	f010 fe0a 	bl	241a2 <memset>
	err = bt_pub_key_gen(&pub_key_cb);
   1358e:	4808      	ldr	r0, [pc, #32]	; (135b0 <bt_mesh_prov_reset_state+0x60>)
   13590:	f7f4 f9ca 	bl	7928 <bt_pub_key_gen>
	if (err) {
   13594:	4604      	mov	r4, r0
   13596:	b120      	cbz	r0, 135a2 <bt_mesh_prov_reset_state+0x52>
		BT_ERR("Failed to generate public key (%d)", err);
   13598:	4602      	mov	r2, r0
   1359a:	2145      	movs	r1, #69	; 0x45
   1359c:	4806      	ldr	r0, [pc, #24]	; (135b8 <bt_mesh_prov_reset_state+0x68>)
   1359e:	f00e fc94 	bl	21eca <printk>
}
   135a2:	4620      	mov	r0, r4
   135a4:	bd10      	pop	{r4, pc}
   135a6:	bf00      	nop
   135a8:	000134ed 	.word	0x000134ed
   135ac:	20002d80 	.word	0x20002d80
   135b0:	20002ea4 	.word	0x20002ea4
   135b4:	20002d9f 	.word	0x20002d9f
   135b8:	0002e551 	.word	0x0002e551

000135bc <bt_mesh_prov_auth>:
{
   135bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   135c0:	4614      	mov	r4, r2
   135c2:	b08a      	sub	sp, #40	; 0x28
	switch (method) {
   135c4:	2803      	cmp	r0, #3
   135c6:	f200 80a8 	bhi.w	1371a <bt_mesh_prov_auth+0x15e>
   135ca:	e8df f000 	tbb	[pc, r0]
   135ce:	0f02      	.short	0x0f02
   135d0:	8d18      	.short	0x8d18
		if (action || size) {
   135d2:	ea51 0402 	orrs.w	r4, r1, r2
   135d6:	f040 80a0 	bne.w	1371a <bt_mesh_prov_auth+0x15e>
		(void)memset(bt_mesh_prov_link.auth, 0, sizeof(bt_mesh_prov_link.auth));
   135da:	2210      	movs	r2, #16
   135dc:	4621      	mov	r1, r4
   135de:	4850      	ldr	r0, [pc, #320]	; (13720 <bt_mesh_prov_auth+0x164>)
   135e0:	f010 fddf 	bl	241a2 <memset>
		return 0;
   135e4:	4620      	mov	r0, r4
}
   135e6:	b00a      	add	sp, #40	; 0x28
   135e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (action || size) {
   135ec:	ea51 0402 	orrs.w	r4, r1, r2
   135f0:	f040 8093 	bne.w	1371a <bt_mesh_prov_auth+0x15e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   135f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   135f8:	f7ff ff80 	bl	134fc <atomic_or.constprop.4>
   135fc:	e7f2      	b.n	135e4 <bt_mesh_prov_auth+0x28>
	switch (action) {
   135fe:	2904      	cmp	r1, #4
   13600:	f200 808b 	bhi.w	1371a <bt_mesh_prov_auth+0x15e>
   13604:	4b47      	ldr	r3, [pc, #284]	; (13724 <bt_mesh_prov_auth+0x168>)
   13606:	5c5f      	ldrb	r7, [r3, r1]
		if (!output) {
   13608:	2f00      	cmp	r7, #0
   1360a:	f000 8086 	beq.w	1371a <bt_mesh_prov_auth+0x15e>
		if (!(bt_mesh_prov->output_actions & output)) {
   1360e:	f8df 8124 	ldr.w	r8, [pc, #292]	; 13734 <bt_mesh_prov_auth+0x178>
   13612:	f8d8 3000 	ldr.w	r3, [r8]
   13616:	8a5a      	ldrh	r2, [r3, #18]
   13618:	423a      	tst	r2, r7
   1361a:	4645      	mov	r5, r8
   1361c:	d07d      	beq.n	1371a <bt_mesh_prov_auth+0x15e>
		if (size > bt_mesh_prov->output_size) {
   1361e:	7c5b      	ldrb	r3, [r3, #17]
   13620:	42a3      	cmp	r3, r4
   13622:	d37a      	bcc.n	1371a <bt_mesh_prov_auth+0x15e>
   13624:	2010      	movs	r0, #16
   13626:	f7ff ff69 	bl	134fc <atomic_or.constprop.4>
		if (output == BT_MESH_DISPLAY_STRING) {
   1362a:	2f10      	cmp	r7, #16
   1362c:	d12f      	bne.n	1368e <bt_mesh_prov_auth+0xd2>
			bt_rand(str, size);
   1362e:	4621      	mov	r1, r4
   13630:	a802      	add	r0, sp, #8
   13632:	f013 fe70 	bl	27316 <bt_rand>
				str[i] %= 36;
   13636:	2624      	movs	r6, #36	; 0x24
   13638:	a802      	add	r0, sp, #8
			for (i = 0U; i < size; i++) {
   1363a:	2100      	movs	r1, #0
   1363c:	b2cb      	uxtb	r3, r1
   1363e:	42a3      	cmp	r3, r4
   13640:	d315      	bcc.n	1366e <bt_mesh_prov_auth+0xb2>
			memcpy(bt_mesh_prov_link.auth, str, size);
   13642:	4e37      	ldr	r6, [pc, #220]	; (13720 <bt_mesh_prov_auth+0x164>)
			str[size] = '\0';
   13644:	ab0a      	add	r3, sp, #40	; 0x28
   13646:	4423      	add	r3, r4
   13648:	2700      	movs	r7, #0
			memcpy(bt_mesh_prov_link.auth, str, size);
   1364a:	4622      	mov	r2, r4
   1364c:	a902      	add	r1, sp, #8
   1364e:	4630      	mov	r0, r6
			str[size] = '\0';
   13650:	f803 7c20 	strb.w	r7, [r3, #-32]
			memcpy(bt_mesh_prov_link.auth, str, size);
   13654:	f010 fd7b 	bl	2414e <memcpy>
			(void)memset(bt_mesh_prov_link.auth + size, 0,
   13658:	f1c4 0210 	rsb	r2, r4, #16
   1365c:	4639      	mov	r1, r7
   1365e:	1930      	adds	r0, r6, r4
   13660:	f010 fd9f 	bl	241a2 <memset>
			return bt_mesh_prov->output_string((char *)str);
   13664:	682b      	ldr	r3, [r5, #0]
   13666:	a802      	add	r0, sp, #8
   13668:	6a1b      	ldr	r3, [r3, #32]
   1366a:	4798      	blx	r3
   1366c:	e7bb      	b.n	135e6 <bt_mesh_prov_auth+0x2a>
				str[i] %= 36;
   1366e:	7803      	ldrb	r3, [r0, #0]
   13670:	fbb3 f2f6 	udiv	r2, r3, r6
   13674:	fb06 3212 	mls	r2, r6, r2, r3
   13678:	b2d2      	uxtb	r2, r2
				if (str[i] < 10) {
   1367a:	b253      	sxtb	r3, r2
   1367c:	2a09      	cmp	r2, #9
					str[i] += '0';
   1367e:	bf94      	ite	ls
   13680:	3330      	addls	r3, #48	; 0x30
					str[i] += 'A' - 10;
   13682:	3337      	addhi	r3, #55	; 0x37
   13684:	b2db      	uxtb	r3, r3
   13686:	f800 3b01 	strb.w	r3, [r0], #1
   1368a:	3101      	adds	r1, #1
   1368c:	e7d6      	b.n	1363c <bt_mesh_prov_auth+0x80>
			uint32_t div[8] = { 10, 100, 1000, 10000, 100000,
   1368e:	4e26      	ldr	r6, [pc, #152]	; (13728 <bt_mesh_prov_auth+0x16c>)
   13690:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13692:	ad02      	add	r5, sp, #8
   13694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13696:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1369a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			bt_rand(&num, sizeof(num));
   1369e:	2104      	movs	r1, #4
   136a0:	eb0d 0001 	add.w	r0, sp, r1
   136a4:	f013 fe37 	bl	27316 <bt_rand>
			num %= div[size - 1];
   136a8:	ab0a      	add	r3, sp, #40	; 0x28
   136aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   136ae:	9d01      	ldr	r5, [sp, #4]
   136b0:	f854 2c24 	ldr.w	r2, [r4, #-36]
	dst[0] = val >> 8;
   136b4:	481d      	ldr	r0, [pc, #116]	; (1372c <bt_mesh_prov_auth+0x170>)
   136b6:	fbb5 f3f2 	udiv	r3, r5, r2
   136ba:	fb02 5313 	mls	r3, r2, r3, r5
	sys_put_be16(val >> 16, dst);
   136be:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   136c0:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   136c2:	7702      	strb	r2, [r0, #28]
	dst[0] = val >> 8;
   136c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
   136c8:	76c1      	strb	r1, [r0, #27]
   136ca:	7742      	strb	r2, [r0, #29]
	dst[1] = val;
   136cc:	7783      	strb	r3, [r0, #30]
			(void)memset(bt_mesh_prov_link.auth, 0, 12);
   136ce:	220c      	movs	r2, #12
   136d0:	2100      	movs	r1, #0
   136d2:	300f      	adds	r0, #15
			num %= div[size - 1];
   136d4:	9301      	str	r3, [sp, #4]
			(void)memset(bt_mesh_prov_link.auth, 0, 12);
   136d6:	f010 fd64 	bl	241a2 <memset>
			return bt_mesh_prov->output_number(output, num);
   136da:	f8d8 3000 	ldr.w	r3, [r8]
   136de:	9901      	ldr	r1, [sp, #4]
   136e0:	69db      	ldr	r3, [r3, #28]
   136e2:	4638      	mov	r0, r7
   136e4:	4798      	blx	r3
   136e6:	e77e      	b.n	135e6 <bt_mesh_prov_auth+0x2a>
	switch (action) {
   136e8:	2903      	cmp	r1, #3
   136ea:	d816      	bhi.n	1371a <bt_mesh_prov_auth+0x15e>
   136ec:	4b10      	ldr	r3, [pc, #64]	; (13730 <bt_mesh_prov_auth+0x174>)
   136ee:	5c5d      	ldrb	r5, [r3, r1]
		if (!input) {
   136f0:	b19d      	cbz	r5, 1371a <bt_mesh_prov_auth+0x15e>
		if (!(bt_mesh_prov->input_actions & input)) {
   136f2:	4e10      	ldr	r6, [pc, #64]	; (13734 <bt_mesh_prov_auth+0x178>)
   136f4:	6832      	ldr	r2, [r6, #0]
   136f6:	8ad1      	ldrh	r1, [r2, #22]
   136f8:	4229      	tst	r1, r5
   136fa:	d00e      	beq.n	1371a <bt_mesh_prov_auth+0x15e>
		if (size > bt_mesh_prov->input_size) {
   136fc:	7d13      	ldrb	r3, [r2, #20]
   136fe:	42a3      	cmp	r3, r4
   13700:	d30b      	bcc.n	1371a <bt_mesh_prov_auth+0x15e>
		if (input == BT_MESH_ENTER_STRING) {
   13702:	2d08      	cmp	r5, #8
   13704:	bf0c      	ite	eq
   13706:	4628      	moveq	r0, r5
   13708:	2004      	movne	r0, #4
   1370a:	f7ff fef7 	bl	134fc <atomic_or.constprop.4>
		return bt_mesh_prov->input(input, size);
   1370e:	6833      	ldr	r3, [r6, #0]
   13710:	4621      	mov	r1, r4
   13712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13714:	4628      	mov	r0, r5
   13716:	4798      	blx	r3
   13718:	e765      	b.n	135e6 <bt_mesh_prov_auth+0x2a>
			return -EINVAL;
   1371a:	f06f 0015 	mvn.w	r0, #21
   1371e:	e762      	b.n	135e6 <bt_mesh_prov_auth+0x2a>
   13720:	20002d8f 	.word	0x20002d8f
   13724:	0002e522 	.word	0x0002e522
   13728:	00028f5c 	.word	0x00028f5c
   1372c:	20002d80 	.word	0x20002d80
   13730:	0002e527 	.word	0x0002e527
   13734:	20002d7c 	.word	0x20002d7c

00013738 <bt_mesh_prov_get>:
}
   13738:	4b01      	ldr	r3, [pc, #4]	; (13740 <bt_mesh_prov_get+0x8>)
   1373a:	6818      	ldr	r0, [r3, #0]
   1373c:	4770      	bx	lr
   1373e:	bf00      	nop
   13740:	20002d7c 	.word	0x20002d7c

00013744 <bt_mesh_prov_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13744:	4b04      	ldr	r3, [pc, #16]	; (13758 <bt_mesh_prov_active+0x14>)
   13746:	f3bf 8f5b 	dmb	ish
   1374a:	6818      	ldr	r0, [r3, #0]
   1374c:	f3bf 8f5b 	dmb	ish
}
   13750:	f3c0 0040 	ubfx	r0, r0, #1, #1
   13754:	4770      	bx	lr
   13756:	bf00      	nop
   13758:	20002d80 	.word	0x20002d80

0001375c <bt_mesh_prov_bearer_cb_get>:
};

const struct prov_bearer_cb *bt_mesh_prov_bearer_cb_get(void)
{
	return &prov_bearer_cb;
}
   1375c:	4800      	ldr	r0, [pc, #0]	; (13760 <bt_mesh_prov_bearer_cb_get+0x4>)
   1375e:	4770      	bx	lr
   13760:	000298a0 	.word	0x000298a0

00013764 <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(uint16_t net_idx, uint16_t addr)
{
	if (bt_mesh_prov->complete) {
   13764:	4b02      	ldr	r3, [pc, #8]	; (13770 <bt_mesh_prov_complete+0xc>)
   13766:	681b      	ldr	r3, [r3, #0]
   13768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1376a:	b103      	cbz	r3, 1376e <bt_mesh_prov_complete+0xa>
		bt_mesh_prov->complete(net_idx, addr);
   1376c:	4718      	bx	r3
	}
}
   1376e:	4770      	bx	lr
   13770:	20002d7c 	.word	0x20002d7c

00013774 <bt_mesh_prov_reset>:

void bt_mesh_prov_reset(void)
{
   13774:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_reset();
   13776:	f013 f98d 	bl	26a94 <pb_adv_reset>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_reset();
   1377a:	f013 f991 	bl	26aa0 <pb_gatt_reset>
	}

	bt_mesh_prov_reset_state(NULL);
   1377e:	2000      	movs	r0, #0
   13780:	f7ff fee6 	bl	13550 <bt_mesh_prov_reset_state>

	if (bt_mesh_prov->reset) {
   13784:	4b03      	ldr	r3, [pc, #12]	; (13794 <bt_mesh_prov_reset+0x20>)
   13786:	681b      	ldr	r3, [r3, #0]
   13788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1378a:	b113      	cbz	r3, 13792 <bt_mesh_prov_reset+0x1e>
		bt_mesh_prov->reset();
	}
}
   1378c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->reset();
   13790:	4718      	bx	r3
}
   13792:	bd10      	pop	{r4, pc}
   13794:	20002d7c 	.word	0x20002d7c

00013798 <bt_mesh_prov_init>:

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
   13798:	b508      	push	{r3, lr}
	if (!prov_info) {
   1379a:	b150      	cbz	r0, 137b2 <bt_mesh_prov_init+0x1a>
		BT_ERR("No provisioning context provided");
		return -EINVAL;
	}

	bt_mesh_prov = prov_info;
   1379c:	4b08      	ldr	r3, [pc, #32]	; (137c0 <bt_mesh_prov_init+0x28>)
   1379e:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_init();
   137a0:	f001 f972 	bl	14a88 <pb_adv_init>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_init();
   137a4:	f001 fa3c 	bl	14c20 <pb_gatt_init>
	}

	return bt_mesh_prov_reset_state(NULL);
   137a8:	2000      	movs	r0, #0
}
   137aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_mesh_prov_reset_state(NULL);
   137ae:	f7ff becf 	b.w	13550 <bt_mesh_prov_reset_state>
		BT_ERR("No provisioning context provided");
   137b2:	2145      	movs	r1, #69	; 0x45
   137b4:	4803      	ldr	r0, [pc, #12]	; (137c4 <bt_mesh_prov_init+0x2c>)
   137b6:	f00e fb88 	bl	21eca <printk>
}
   137ba:	f06f 0015 	mvn.w	r0, #21
   137be:	bd08      	pop	{r3, pc}
   137c0:	20002d7c 	.word	0x20002d7c
   137c4:	0002e52b 	.word	0x0002e52b

000137c8 <bt_mesh_prov_send>:
extern const struct bt_mesh_prov *bt_mesh_prov;

static inline int bt_mesh_prov_send(struct net_buf_simple *buf,
				    prov_bearer_send_complete_t cb)
{
	return bt_mesh_prov_link.bearer->send(buf, cb, NULL);
   137c8:	4b02      	ldr	r3, [pc, #8]	; (137d4 <bt_mesh_prov_send+0xc>)
   137ca:	685b      	ldr	r3, [r3, #4]
   137cc:	2200      	movs	r2, #0
   137ce:	689b      	ldr	r3, [r3, #8]
   137d0:	4718      	bx	r3
   137d2:	bf00      	nop
   137d4:	20002d80 	.word	0x20002d80

000137d8 <prov_link_opened>:
	reset_state();
}

static void prov_link_opened(void)
{
	bt_mesh_prov_link.expect = PROV_INVITE;
   137d8:	4b02      	ldr	r3, [pc, #8]	; (137e4 <prov_link_opened+0xc>)
   137da:	2200      	movs	r2, #0
   137dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   137e0:	4770      	bx	lr
   137e2:	bf00      	nop
   137e4:	20002d80 	.word	0x20002d80

000137e8 <send_input_complete>:
{
   137e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	PROV_BUF(buf, 1);
   137ea:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   137ee:	ab01      	add	r3, sp, #4
	bt_mesh_prov_buf_init(&buf, PROV_INPUT_COMPLETE);
   137f0:	2104      	movs	r1, #4
   137f2:	a803      	add	r0, sp, #12
	PROV_BUF(buf, 1);
   137f4:	9303      	str	r3, [sp, #12]
   137f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_prov_buf_init(&buf, PROV_INPUT_COMPLETE);
   137fa:	f013 f93a 	bl	26a72 <bt_mesh_prov_buf_init>
	if (bt_mesh_prov_send(&buf, NULL)) {
   137fe:	2100      	movs	r1, #0
   13800:	a803      	add	r0, sp, #12
   13802:	f7ff ffe1 	bl	137c8 <bt_mesh_prov_send>
   13806:	b118      	cbz	r0, 13810 <send_input_complete+0x28>
		BT_ERR("Failed to send Provisioning Input Complete");
   13808:	2145      	movs	r1, #69	; 0x45
   1380a:	4805      	ldr	r0, [pc, #20]	; (13820 <send_input_complete+0x38>)
   1380c:	f00e fb5d 	bl	21eca <printk>
	bt_mesh_prov_link.expect = PROV_CONFIRM;
   13810:	4b04      	ldr	r3, [pc, #16]	; (13824 <send_input_complete+0x3c>)
   13812:	2205      	movs	r2, #5
   13814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   13818:	b007      	add	sp, #28
   1381a:	f85d fb04 	ldr.w	pc, [sp], #4
   1381e:	bf00      	nop
   13820:	0002ea23 	.word	0x0002ea23
   13824:	20002d80 	.word	0x20002d80

00013828 <prov_send_fail_msg>:
{
   13828:	b510      	push	{r4, lr}
   1382a:	b086      	sub	sp, #24
	PROV_BUF(buf, 2);
   1382c:	ab01      	add	r3, sp, #4
   1382e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   13832:	e9cd 2304 	strd	r2, r3, [sp, #16]
   13836:	9303      	str	r3, [sp, #12]
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   13838:	4b0b      	ldr	r3, [pc, #44]	; (13868 <prov_send_fail_msg+0x40>)
   1383a:	22ff      	movs	r2, #255	; 0xff
{
   1383c:	4604      	mov	r4, r0
	bt_mesh_prov_buf_init(&buf, PROV_FAILED);
   1383e:	2109      	movs	r1, #9
   13840:	a803      	add	r0, sp, #12
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   13842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	bt_mesh_prov_buf_init(&buf, PROV_FAILED);
   13846:	f013 f914 	bl	26a72 <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&buf, err);
   1384a:	4621      	mov	r1, r4
   1384c:	a803      	add	r0, sp, #12
   1384e:	f014 fb9a 	bl	27f86 <net_buf_simple_add_u8>
	if (bt_mesh_prov_send(&buf, NULL)) {
   13852:	2100      	movs	r1, #0
   13854:	a803      	add	r0, sp, #12
   13856:	f7ff ffb7 	bl	137c8 <bt_mesh_prov_send>
   1385a:	b118      	cbz	r0, 13864 <prov_send_fail_msg+0x3c>
		BT_ERR("Failed to send Provisioning Failed message");
   1385c:	2145      	movs	r1, #69	; 0x45
   1385e:	4803      	ldr	r0, [pc, #12]	; (1386c <prov_send_fail_msg+0x44>)
   13860:	f00e fb33 	bl	21eca <printk>
}
   13864:	b006      	add	sp, #24
   13866:	bd10      	pop	{r4, pc}
   13868:	20002d80 	.word	0x20002d80
   1386c:	0002e967 	.word	0x0002e967

00013870 <prov_invite>:
{
   13870:	b530      	push	{r4, r5, lr}
   13872:	b089      	sub	sp, #36	; 0x24
	if (data[0]) {
   13874:	7801      	ldrb	r1, [r0, #0]
	PROV_BUF(buf, 12);
   13876:	ab03      	add	r3, sp, #12
   13878:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   1387c:	4604      	mov	r4, r0
	PROV_BUF(buf, 12);
   1387e:	9300      	str	r3, [sp, #0]
   13880:	e9cd 2301 	strd	r2, r3, [sp, #4]
	if (data[0]) {
   13884:	b111      	cbz	r1, 1388c <prov_invite+0x1c>
		bt_mesh_attention(NULL, data[0]);
   13886:	2000      	movs	r0, #0
   13888:	f7fe f9e8 	bl	11c5c <bt_mesh_attention>
	bt_mesh_prov_link.conf_inputs[0] = data[0];
   1388c:	4d24      	ldr	r5, [pc, #144]	; (13920 <prov_invite+0xb0>)
   1388e:	7823      	ldrb	r3, [r4, #0]
   13890:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
	bt_mesh_prov_buf_init(&buf, PROV_CAPABILITIES);
   13894:	2101      	movs	r1, #1
   13896:	4668      	mov	r0, sp
   13898:	f013 f8eb 	bl	26a72 <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&buf, bt_mesh_elem_count());
   1389c:	f7fc f8a8 	bl	f9f0 <bt_mesh_elem_count>
   138a0:	4601      	mov	r1, r0
   138a2:	4668      	mov	r0, sp
   138a4:	f014 fb6f 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->static_val ? BIT(0) : 0x00);
   138a8:	4c1e      	ldr	r4, [pc, #120]	; (13924 <prov_invite+0xb4>)
	net_buf_simple_add_be16(&buf, BIT(PROV_ALG_P256));
   138aa:	2101      	movs	r1, #1
   138ac:	4668      	mov	r0, sp
   138ae:	f014 fb7a 	bl	27fa6 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, PUB_KEY_NO_OOB);
   138b2:	2100      	movs	r1, #0
   138b4:	4668      	mov	r0, sp
   138b6:	f014 fb66 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->static_val ? BIT(0) : 0x00);
   138ba:	6823      	ldr	r3, [r4, #0]
   138bc:	68d9      	ldr	r1, [r3, #12]
   138be:	3100      	adds	r1, #0
   138c0:	bf18      	it	ne
   138c2:	2101      	movne	r1, #1
   138c4:	4668      	mov	r0, sp
   138c6:	f014 fb5e 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->output_size);
   138ca:	6823      	ldr	r3, [r4, #0]
   138cc:	4668      	mov	r0, sp
   138ce:	7c59      	ldrb	r1, [r3, #17]
   138d0:	f014 fb59 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, bt_mesh_prov->output_actions);
   138d4:	6823      	ldr	r3, [r4, #0]
   138d6:	4668      	mov	r0, sp
   138d8:	8a59      	ldrh	r1, [r3, #18]
   138da:	f014 fb64 	bl	27fa6 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->input_size);
   138de:	6823      	ldr	r3, [r4, #0]
   138e0:	4668      	mov	r0, sp
   138e2:	7d19      	ldrb	r1, [r3, #20]
   138e4:	f014 fb4f 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, bt_mesh_prov->input_actions);
   138e8:	6823      	ldr	r3, [r4, #0]
   138ea:	4668      	mov	r0, sp
   138ec:	8ad9      	ldrh	r1, [r3, #22]
   138ee:	f014 fb5a 	bl	27fa6 <net_buf_simple_add_be16>
	memcpy(&bt_mesh_prov_link.conf_inputs[1], &buf.data[1], 11);
   138f2:	9900      	ldr	r1, [sp, #0]
   138f4:	220b      	movs	r2, #11
   138f6:	3101      	adds	r1, #1
   138f8:	f105 0081 	add.w	r0, r5, #129	; 0x81
   138fc:	f010 fc27 	bl	2414e <memcpy>
	if (bt_mesh_prov_send(&buf, NULL)) {
   13900:	2100      	movs	r1, #0
   13902:	4668      	mov	r0, sp
   13904:	f7ff ff60 	bl	137c8 <bt_mesh_prov_send>
   13908:	b128      	cbz	r0, 13916 <prov_invite+0xa6>
		BT_ERR("Failed to send capabilities");
   1390a:	2145      	movs	r1, #69	; 0x45
   1390c:	4806      	ldr	r0, [pc, #24]	; (13928 <prov_invite+0xb8>)
   1390e:	f00e fadc 	bl	21eca <printk>
}
   13912:	b009      	add	sp, #36	; 0x24
   13914:	bd30      	pop	{r4, r5, pc}
	bt_mesh_prov_link.expect = PROV_START;
   13916:	2302      	movs	r3, #2
   13918:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
   1391c:	e7f9      	b.n	13912 <prov_invite+0xa2>
   1391e:	bf00      	nop
   13920:	20002d80 	.word	0x20002d80
   13924:	20002d7c 	.word	0x20002d7c
   13928:	0002e84c 	.word	0x0002e84c

0001392c <prov_link_closed>:
	return bt_mesh_prov_reset_state(pub_key_ready);
   1392c:	4801      	ldr	r0, [pc, #4]	; (13934 <prov_link_closed+0x8>)
   1392e:	f7ff be0f 	b.w	13550 <bt_mesh_prov_reset_state>
   13932:	bf00      	nop
   13934:	00013c0d 	.word	0x00013c0d

00013938 <prov_random>:
{
   13938:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   1393a:	4c31      	ldr	r4, [pc, #196]	; (13a00 <prov_random+0xc8>)
{
   1393c:	b08f      	sub	sp, #60	; 0x3c
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   1393e:	2210      	movs	r2, #16
   13940:	4621      	mov	r1, r4
{
   13942:	4606      	mov	r6, r0
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   13944:	f010 fbdc 	bl	24100 <memcmp>
   13948:	b940      	cbnz	r0, 1395c <prov_random+0x24>
		BT_ERR("Random value is identical to ours, rejecting.");
   1394a:	482e      	ldr	r0, [pc, #184]	; (13a04 <prov_random+0xcc>)
   1394c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid confirmation value");
   1394e:	f00e fabc 	bl	21eca <printk>
	prov_send_fail_msg(reason);
   13952:	2004      	movs	r0, #4
   13954:	f7ff ff68 	bl	13828 <prov_send_fail_msg>
}
   13958:	b00f      	add	sp, #60	; 0x3c
   1395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, data,
   1395c:	466b      	mov	r3, sp
   1395e:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   13962:	4631      	mov	r1, r6
   13964:	f104 0020 	add.w	r0, r4, #32
   13968:	f012 fc57 	bl	2621a <bt_mesh_prov_conf>
   1396c:	b128      	cbz	r0, 1397a <prov_random+0x42>
		BT_ERR("Unable to calculate confirmation verification");
   1396e:	4826      	ldr	r0, [pc, #152]	; (13a08 <prov_random+0xd0>)
   13970:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to generate provisioning salt");
   13972:	f00e faaa 	bl	21eca <printk>
	prov_send_fail_msg(reason);
   13976:	2007      	movs	r0, #7
   13978:	e7ec      	b.n	13954 <prov_random+0x1c>
	if (memcmp(conf_verify, bt_mesh_prov_link.conf, 16)) {
   1397a:	f1a4 0110 	sub.w	r1, r4, #16
   1397e:	2210      	movs	r2, #16
   13980:	4668      	mov	r0, sp
   13982:	f010 fbbd 	bl	24100 <memcmp>
   13986:	4601      	mov	r1, r0
   13988:	b110      	cbz	r0, 13990 <prov_random+0x58>
		BT_ERR("Invalid confirmation value");
   1398a:	2145      	movs	r1, #69	; 0x45
   1398c:	481f      	ldr	r0, [pc, #124]	; (13a0c <prov_random+0xd4>)
   1398e:	e7de      	b.n	1394e <prov_random+0x16>
static inline int bt_mesh_prov_salt(const uint8_t conf_salt[16],
				    const uint8_t prov_rand[16],
				    const uint8_t dev_rand[16],
				    uint8_t prov_salt[16])
{
	const uint8_t prov_salt_key[16] = { 0 };
   13990:	2510      	movs	r5, #16
   13992:	462a      	mov	r2, r5
   13994:	eb0d 0005 	add.w	r0, sp, r5
   13998:	f010 fc03 	bl	241a2 <memset>
	struct bt_mesh_sg sg[] = {
   1399c:	1963      	adds	r3, r4, r5
   1399e:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
		{ conf_salt, 16 },
		{ prov_rand, 16 },
		{ dev_rand, 16 },
	};

	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   139a2:	ae08      	add	r6, sp, #32
	struct bt_mesh_sg sg[] = {
   139a4:	e9cd 3508 	strd	r3, r5, [sp, #32]
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   139a8:	2203      	movs	r2, #3
   139aa:	f104 03c1 	add.w	r3, r4, #193	; 0xc1
   139ae:	4631      	mov	r1, r6
   139b0:	eb0d 0005 	add.w	r0, sp, r5
	struct bt_mesh_sg sg[] = {
   139b4:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   139b8:	f012 faa8 	bl	25f0c <bt_mesh_aes_cmac>
	if (bt_mesh_prov_salt(bt_mesh_prov_link.conf_salt, data,
   139bc:	4607      	mov	r7, r0
   139be:	b110      	cbz	r0, 139c6 <prov_random+0x8e>
		BT_ERR("Failed to generate provisioning salt");
   139c0:	2145      	movs	r1, #69	; 0x45
   139c2:	4813      	ldr	r0, [pc, #76]	; (13a10 <prov_random+0xd8>)
   139c4:	e7d5      	b.n	13972 <prov_random+0x3a>
	PROV_BUF(rnd, 17);
   139c6:	f44f 13b0 	mov.w	r3, #1441792	; 0x160000
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   139ca:	2106      	movs	r1, #6
   139cc:	a804      	add	r0, sp, #16
	PROV_BUF(rnd, 17);
   139ce:	e9cd 3605 	strd	r3, r6, [sp, #20]
   139d2:	9604      	str	r6, [sp, #16]
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   139d4:	f013 f84d 	bl	26a72 <bt_mesh_prov_buf_init>
	net_buf_simple_add_mem(&rnd, bt_mesh_prov_link.rand, 16);
   139d8:	4621      	mov	r1, r4
   139da:	462a      	mov	r2, r5
   139dc:	a804      	add	r0, sp, #16
   139de:	f014 fac6 	bl	27f6e <net_buf_simple_add_mem>
	if (bt_mesh_prov_send(&rnd, NULL)) {
   139e2:	4639      	mov	r1, r7
   139e4:	a804      	add	r0, sp, #16
   139e6:	f7ff feef 	bl	137c8 <bt_mesh_prov_send>
   139ea:	b120      	cbz	r0, 139f6 <prov_random+0xbe>
		BT_ERR("Failed to send Provisioning Random");
   139ec:	2145      	movs	r1, #69	; 0x45
   139ee:	4809      	ldr	r0, [pc, #36]	; (13a14 <prov_random+0xdc>)
   139f0:	f00e fa6b 	bl	21eca <printk>
		return;
   139f4:	e7b0      	b.n	13958 <prov_random+0x20>
	bt_mesh_prov_link.expect = PROV_DATA;
   139f6:	2307      	movs	r3, #7
   139f8:	f804 3c11 	strb.w	r3, [r4, #-17]
   139fc:	e7ac      	b.n	13958 <prov_random+0x20>
   139fe:	bf00      	nop
   13a00:	20002dd0 	.word	0x20002dd0
   13a04:	0002e88f 	.word	0x0002e88f
   13a08:	0002e8c2 	.word	0x0002e8c2
   13a0c:	0002e8f5 	.word	0x0002e8f5
   13a10:	0002e915 	.word	0x0002e915
   13a14:	0002e93f 	.word	0x0002e93f

00013a18 <prov_data>:
{
   13a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a1c:	b09f      	sub	sp, #124	; 0x7c
	PROV_BUF(msg, 1);
   13a1e:	ab06      	add	r3, sp, #24
   13a20:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   13a24:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
   13a28:	4a49      	ldr	r2, [pc, #292]	; (13b50 <prov_data+0x138>)
   13a2a:	9308      	str	r3, [sp, #32]
   13a2c:	ac0f      	add	r4, sp, #60	; 0x3c
{
   13a2e:	4606      	mov	r6, r0
   13a30:	9400      	str	r4, [sp, #0]
   13a32:	4b48      	ldr	r3, [pc, #288]	; (13b54 <prov_data+0x13c>)
   13a34:	2120      	movs	r1, #32
   13a36:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   13a3a:	f012 faaa 	bl	25f92 <bt_mesh_k1>
	if (err) {
   13a3e:	b128      	cbz	r0, 13a4c <prov_data+0x34>
		BT_ERR("Unable to generate session key");
   13a40:	4845      	ldr	r0, [pc, #276]	; (13b58 <prov_data+0x140>)
   13a42:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to generate session nonce");
   13a44:	f00e fa41 	bl	21eca <printk>
	prov_send_fail_msg(reason);
   13a48:	2007      	movs	r0, #7
   13a4a:	e01c      	b.n	13a86 <prov_data+0x6e>
	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
   13a4c:	4a40      	ldr	r2, [pc, #256]	; (13b50 <prov_data+0x138>)
   13a4e:	4b43      	ldr	r3, [pc, #268]	; (13b5c <prov_data+0x144>)
   13a50:	ad17      	add	r5, sp, #92	; 0x5c
   13a52:	9500      	str	r5, [sp, #0]
   13a54:	2120      	movs	r1, #32
   13a56:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   13a5a:	f012 fa9a 	bl	25f92 <bt_mesh_k1>
	if (!err) {
   13a5e:	2800      	cmp	r0, #0
   13a60:	d172      	bne.n	13b48 <prov_data+0x130>
		memcpy(nonce, tmp + 3, 13);
   13a62:	220d      	movs	r2, #13
   13a64:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
   13a68:	a80b      	add	r0, sp, #44	; 0x2c
   13a6a:	f010 fb70 	bl	2414e <memcpy>
	err = bt_mesh_prov_decrypt(session_key, nonce, data, pdu);
   13a6e:	462b      	mov	r3, r5
   13a70:	4632      	mov	r2, r6
   13a72:	a90b      	add	r1, sp, #44	; 0x2c
   13a74:	4620      	mov	r0, r4
   13a76:	f012 fbdd 	bl	26234 <bt_mesh_prov_decrypt>
	if (err) {
   13a7a:	b138      	cbz	r0, 13a8c <prov_data+0x74>
		BT_ERR("Unable to decrypt provisioning data");
   13a7c:	4838      	ldr	r0, [pc, #224]	; (13b60 <prov_data+0x148>)
   13a7e:	2145      	movs	r1, #69	; 0x45
   13a80:	f00e fa23 	bl	21eca <printk>
	prov_send_fail_msg(reason);
   13a84:	2006      	movs	r0, #6
   13a86:	f7ff fecf 	bl	13828 <prov_send_fail_msg>
		return;
   13a8a:	e033      	b.n	13af4 <prov_data+0xdc>
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
   13a8c:	4a30      	ldr	r2, [pc, #192]	; (13b50 <prov_data+0x138>)
   13a8e:	4b35      	ldr	r3, [pc, #212]	; (13b64 <prov_data+0x14c>)
   13a90:	af13      	add	r7, sp, #76	; 0x4c
   13a92:	9700      	str	r7, [sp, #0]
   13a94:	2120      	movs	r1, #32
   13a96:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   13a9a:	f012 fa7a 	bl	25f92 <bt_mesh_k1>
	if (err) {
   13a9e:	4604      	mov	r4, r0
   13aa0:	b110      	cbz	r0, 13aa8 <prov_data+0x90>
		BT_ERR("Unable to generate device key");
   13aa2:	2145      	movs	r1, #69	; 0x45
   13aa4:	4830      	ldr	r0, [pc, #192]	; (13b68 <prov_data+0x150>)
   13aa6:	e7cd      	b.n	13a44 <prov_data+0x2c>
	flags = pdu[18];
   13aa8:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
   13aac:	9302      	str	r3, [sp, #8]
	return ((uint16_t)src[0] << 8) | src[1];
   13aae:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
   13ab2:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
   13ab6:	9305      	str	r3, [sp, #20]
	bt_mesh_prov_buf_init(&msg, PROV_COMPLETE);
   13ab8:	2108      	movs	r1, #8
   13aba:	f89d 3071 	ldrb.w	r3, [sp, #113]	; 0x71
   13abe:	9303      	str	r3, [sp, #12]
   13ac0:	a808      	add	r0, sp, #32
   13ac2:	9204      	str	r2, [sp, #16]
   13ac4:	f89d a06c 	ldrb.w	sl, [sp, #108]	; 0x6c
   13ac8:	f89d 906d 	ldrb.w	r9, [sp, #109]	; 0x6d
   13acc:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
   13ad0:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
   13ad4:	f89d b073 	ldrb.w	fp, [sp, #115]	; 0x73
   13ad8:	f012 ffcb 	bl	26a72 <bt_mesh_prov_buf_init>
	if (bt_mesh_prov_send(&msg, NULL)) {
   13adc:	4621      	mov	r1, r4
   13ade:	a808      	add	r0, sp, #32
   13ae0:	f7ff fe72 	bl	137c8 <bt_mesh_prov_send>
   13ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13ae8:	4604      	mov	r4, r0
   13aea:	b130      	cbz	r0, 13afa <prov_data+0xe2>
		BT_ERR("Failed to send Provisioning Complete");
   13aec:	2145      	movs	r1, #69	; 0x45
   13aee:	481f      	ldr	r0, [pc, #124]	; (13b6c <prov_data+0x154>)
   13af0:	f00e f9eb 	bl	21eca <printk>
}
   13af4:	b01f      	add	sp, #124	; 0x7c
   13af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   13afa:	491d      	ldr	r1, [pc, #116]	; (13b70 <prov_data+0x158>)
   13afc:	20ff      	movs	r0, #255	; 0xff
   13afe:	f881 003f 	strb.w	r0, [r1, #63]	; 0x3f
	return bt_mesh_prov_link.bearer &&
   13b02:	6849      	ldr	r1, [r1, #4]
   13b04:	b119      	cbz	r1, 13b0e <prov_data+0xf6>
   13b06:	780c      	ldrb	r4, [r1, #0]
   13b08:	1ea1      	subs	r1, r4, #2
   13b0a:	424c      	negs	r4, r1
   13b0c:	414c      	adcs	r4, r1
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   13b0e:	9903      	ldr	r1, [sp, #12]
	err = bt_mesh_provision(pdu, net_idx, flags, iv_index, addr, dev_key);
   13b10:	9701      	str	r7, [sp, #4]
   13b12:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
   13b16:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
   13b1a:	ea48 2303 	orr.w	r3, r8, r3, lsl #8
   13b1e:	9200      	str	r2, [sp, #0]
   13b20:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
   13b24:	9a02      	ldr	r2, [sp, #8]
   13b26:	ea49 210a 	orr.w	r1, r9, sl, lsl #8
   13b2a:	4628      	mov	r0, r5
   13b2c:	f7f7 fb88 	bl	b240 <bt_mesh_provision>
	if (err) {
   13b30:	4602      	mov	r2, r0
   13b32:	b120      	cbz	r0, 13b3e <prov_data+0x126>
		BT_ERR("Failed to provision (err %d)", err);
   13b34:	2145      	movs	r1, #69	; 0x45
   13b36:	480f      	ldr	r0, [pc, #60]	; (13b74 <prov_data+0x15c>)
   13b38:	f00e f9c7 	bl	21eca <printk>
		return;
   13b3c:	e7da      	b.n	13af4 <prov_data+0xdc>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) && identity_enable) {
   13b3e:	2c00      	cmp	r4, #0
   13b40:	d0d8      	beq.n	13af4 <prov_data+0xdc>
		bt_mesh_proxy_identity_enable();
   13b42:	f001 fbb9 	bl	152b8 <bt_mesh_proxy_identity_enable>
   13b46:	e7d5      	b.n	13af4 <prov_data+0xdc>
		BT_ERR("Unable to generate session nonce");
   13b48:	2145      	movs	r1, #69	; 0x45
   13b4a:	480b      	ldr	r0, [pc, #44]	; (13b78 <prov_data+0x160>)
   13b4c:	e77a      	b.n	13a44 <prov_data+0x2c>
   13b4e:	bf00      	nop
   13b50:	20002e91 	.word	0x20002e91
   13b54:	0002e6e4 	.word	0x0002e6e4
   13b58:	0002e6e9 	.word	0x0002e6e9
   13b5c:	0002e70d 	.word	0x0002e70d
   13b60:	0002e712 	.word	0x0002e712
   13b64:	0002e73b 	.word	0x0002e73b
   13b68:	0002e740 	.word	0x0002e740
   13b6c:	0002e763 	.word	0x0002e763
   13b70:	20002d80 	.word	0x20002d80
   13b74:	0002e78d 	.word	0x0002e78d
   13b78:	0002e7af 	.word	0x0002e7af

00013b7c <sys_memcpy_swap.constprop.10>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   13b7c:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   13b7e:	b570      	push	{r4, r5, r6, lr}
   13b80:	4604      	mov	r4, r0
   13b82:	460e      	mov	r6, r1
   13b84:	f101 0520 	add.w	r5, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   13b88:	d915      	bls.n	13bb6 <sys_memcpy_swap.constprop.10+0x3a>
   13b8a:	42a8      	cmp	r0, r5
   13b8c:	d20a      	bcs.n	13ba4 <sys_memcpy_swap.constprop.10+0x28>
   13b8e:	490c      	ldr	r1, [pc, #48]	; (13bc0 <sys_memcpy_swap.constprop.10+0x44>)
   13b90:	480c      	ldr	r0, [pc, #48]	; (13bc4 <sys_memcpy_swap.constprop.10+0x48>)
   13b92:	f240 2219 	movw	r2, #537	; 0x219
   13b96:	f00e f998 	bl	21eca <printk>
   13b9a:	f240 2119 	movw	r1, #537	; 0x219
   13b9e:	4808      	ldr	r0, [pc, #32]	; (13bc0 <sys_memcpy_swap.constprop.10+0x44>)
   13ba0:	f00e fc45 	bl	2242e <assert_post_action>
	for (; length > 0; length--) {
   13ba4:	462b      	mov	r3, r5
   13ba6:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   13ba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   13bac:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   13bb0:	42b3      	cmp	r3, r6
   13bb2:	d1f9      	bne.n	13ba8 <sys_memcpy_swap.constprop.10+0x2c>
}
   13bb4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   13bb6:	d0ea      	beq.n	13b8e <sys_memcpy_swap.constprop.10+0x12>
   13bb8:	f100 0320 	add.w	r3, r0, #32
   13bbc:	4299      	cmp	r1, r3
   13bbe:	e7e5      	b.n	13b8c <sys_memcpy_swap.constprop.10+0x10>
   13bc0:	0002ab48 	.word	0x0002ab48
   13bc4:	0002a026 	.word	0x0002a026

00013bc8 <prov_dh_key_gen>:
{
   13bc8:	b500      	push	{lr}
   13bca:	b091      	sub	sp, #68	; 0x44
	sys_memcpy_swap(remote_pk_le, remote_pk, 32);
   13bcc:	490b      	ldr	r1, [pc, #44]	; (13bfc <prov_dh_key_gen+0x34>)
   13bce:	4668      	mov	r0, sp
   13bd0:	f7ff ffd4 	bl	13b7c <sys_memcpy_swap.constprop.10>
	sys_memcpy_swap(&remote_pk_le[32], &remote_pk[32], 32);
   13bd4:	490a      	ldr	r1, [pc, #40]	; (13c00 <prov_dh_key_gen+0x38>)
   13bd6:	a808      	add	r0, sp, #32
   13bd8:	f7ff ffd0 	bl	13b7c <sys_memcpy_swap.constprop.10>
	if (bt_dh_key_gen(remote_pk_le, prov_dh_key_cb)) {
   13bdc:	4909      	ldr	r1, [pc, #36]	; (13c04 <prov_dh_key_gen+0x3c>)
   13bde:	4668      	mov	r0, sp
   13be0:	f7f3 fef0 	bl	79c4 <bt_dh_key_gen>
   13be4:	b130      	cbz	r0, 13bf4 <prov_dh_key_gen+0x2c>
		BT_ERR("Failed to generate DHKey");
   13be6:	4808      	ldr	r0, [pc, #32]	; (13c08 <prov_dh_key_gen+0x40>)
   13be8:	2145      	movs	r1, #69	; 0x45
   13bea:	f00e f96e 	bl	21eca <printk>
	prov_send_fail_msg(reason);
   13bee:	2007      	movs	r0, #7
   13bf0:	f7ff fe1a 	bl	13828 <prov_send_fail_msg>
}
   13bf4:	b011      	add	sp, #68	; 0x44
   13bf6:	f85d fb04 	ldr.w	pc, [sp], #4
   13bfa:	bf00      	nop
   13bfc:	20002e11 	.word	0x20002e11
   13c00:	20002e31 	.word	0x20002e31
   13c04:	00013d11 	.word	0x00013d11
   13c08:	0002e82e 	.word	0x0002e82e

00013c0c <pub_key_ready>:
	if (!pkey) {
   13c0c:	b918      	cbnz	r0, 13c16 <pub_key_ready+0xa>
		BT_WARN("Public key not available");
   13c0e:	2157      	movs	r1, #87	; 0x57
   13c10:	480a      	ldr	r0, [pc, #40]	; (13c3c <pub_key_ready+0x30>)
   13c12:	f00e b95a 	b.w	21eca <printk>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13c16:	4b0a      	ldr	r3, [pc, #40]	; (13c40 <pub_key_ready+0x34>)
   13c18:	f3bf 8f5b 	dmb	ish
   13c1c:	e853 2f00 	ldrex	r2, [r3]
   13c20:	f022 0101 	bic.w	r1, r2, #1
   13c24:	e843 1000 	strex	r0, r1, [r3]
   13c28:	2800      	cmp	r0, #0
   13c2a:	d1f7      	bne.n	13c1c <pub_key_ready+0x10>
   13c2c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_PUB_KEY)) {
   13c30:	07d3      	lsls	r3, r2, #31
   13c32:	d501      	bpl.n	13c38 <pub_key_ready+0x2c>
		prov_dh_key_gen();
   13c34:	f7ff bfc8 	b.w	13bc8 <prov_dh_key_gen>
}
   13c38:	4770      	bx	lr
   13c3a:	bf00      	nop
   13c3c:	0002e5f9 	.word	0x0002e5f9
   13c40:	20002d80 	.word	0x20002d80

00013c44 <atomic_test_bit.constprop.12>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13c44:	4b05      	ldr	r3, [pc, #20]	; (13c5c <atomic_test_bit.constprop.12+0x18>)
   13c46:	f3bf 8f5b 	dmb	ish
   13c4a:	681b      	ldr	r3, [r3, #0]
   13c4c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13c50:	fa43 f000 	asr.w	r0, r3, r0
}
   13c54:	f000 0001 	and.w	r0, r0, #1
   13c58:	4770      	bx	lr
   13c5a:	bf00      	nop
   13c5c:	20002d80 	.word	0x20002d80

00013c60 <prov_start>:
{
   13c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (data[0] != PROV_ALG_P256) {
   13c62:	7802      	ldrb	r2, [r0, #0]
{
   13c64:	4604      	mov	r4, r0
	if (data[0] != PROV_ALG_P256) {
   13c66:	b14a      	cbz	r2, 13c7c <prov_start+0x1c>
		BT_ERR("Unknown algorithm 0x%02x", data[0]);
   13c68:	4822      	ldr	r0, [pc, #136]	; (13cf4 <prov_start+0x94>)
   13c6a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid public key type: 0x%02x", data[1]);
   13c6c:	f00e f92d 	bl	21eca <printk>
	prov_send_fail_msg(reason);
   13c70:	2002      	movs	r0, #2
}
   13c72:	b003      	add	sp, #12
   13c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	prov_send_fail_msg(reason);
   13c78:	f7ff bdd6 	b.w	13828 <prov_send_fail_msg>
	if (data[1] != PUB_KEY_NO_OOB) {
   13c7c:	7842      	ldrb	r2, [r0, #1]
   13c7e:	b112      	cbz	r2, 13c86 <prov_start+0x26>
		BT_ERR("Invalid public key type: 0x%02x", data[1]);
   13c80:	2145      	movs	r1, #69	; 0x45
   13c82:	481d      	ldr	r0, [pc, #116]	; (13cf8 <prov_start+0x98>)
   13c84:	e7f2      	b.n	13c6c <prov_start+0xc>
	memcpy(&bt_mesh_prov_link.conf_inputs[12], data, 5);
   13c86:	4601      	mov	r1, r0
   13c88:	2205      	movs	r2, #5
   13c8a:	481c      	ldr	r0, [pc, #112]	; (13cfc <prov_start+0x9c>)
   13c8c:	f010 fa5f 	bl	2414e <memcpy>
	bt_mesh_prov_link.expect = PROV_PUB_KEY;
   13c90:	4b1b      	ldr	r3, [pc, #108]	; (13d00 <prov_start+0xa0>)
   13c92:	2203      	movs	r2, #3
   13c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	if (bt_mesh_prov_auth(data[2], data[3], data[4]) < 0) {
   13c98:	7922      	ldrb	r2, [r4, #4]
   13c9a:	78e1      	ldrb	r1, [r4, #3]
   13c9c:	78a0      	ldrb	r0, [r4, #2]
   13c9e:	f7ff fc8d 	bl	135bc <bt_mesh_prov_auth>
   13ca2:	2800      	cmp	r0, #0
   13ca4:	da0a      	bge.n	13cbc <prov_start+0x5c>
		BT_ERR("Invalid authentication method: 0x%02x; "
   13ca6:	7923      	ldrb	r3, [r4, #4]
   13ca8:	9300      	str	r3, [sp, #0]
   13caa:	4816      	ldr	r0, [pc, #88]	; (13d04 <prov_start+0xa4>)
   13cac:	78e3      	ldrb	r3, [r4, #3]
   13cae:	78a2      	ldrb	r2, [r4, #2]
   13cb0:	2145      	movs	r1, #69	; 0x45
   13cb2:	f00e f90a 	bl	21eca <printk>
	prov_send_fail_msg(reason);
   13cb6:	2002      	movs	r0, #2
   13cb8:	f7ff fdb6 	bl	13828 <prov_send_fail_msg>
	if (atomic_test_bit(bt_mesh_prov_link.flags, OOB_STATIC_KEY)) {
   13cbc:	200c      	movs	r0, #12
   13cbe:	f7ff ffc1 	bl	13c44 <atomic_test_bit.constprop.12>
   13cc2:	b1a0      	cbz	r0, 13cee <prov_start+0x8e>
		memcpy(bt_mesh_prov_link.auth + 16 - bt_mesh_prov->static_val_len,
   13cc4:	4d10      	ldr	r5, [pc, #64]	; (13d08 <prov_start+0xa8>)
   13cc6:	4c11      	ldr	r4, [pc, #68]	; (13d0c <prov_start+0xac>)
   13cc8:	682b      	ldr	r3, [r5, #0]
   13cca:	7c1a      	ldrb	r2, [r3, #16]
   13ccc:	68d9      	ldr	r1, [r3, #12]
   13cce:	f1c2 0010 	rsb	r0, r2, #16
   13cd2:	4420      	add	r0, r4
   13cd4:	f010 fa3b 	bl	2414e <memcpy>
			     sizeof(bt_mesh_prov_link.auth) - bt_mesh_prov->static_val_len);
   13cd8:	682b      	ldr	r3, [r5, #0]
   13cda:	7c1a      	ldrb	r2, [r3, #16]
		(void)memset(bt_mesh_prov_link.auth, 0,
   13cdc:	2100      	movs	r1, #0
   13cde:	f1c2 0210 	rsb	r2, r2, #16
   13ce2:	4620      	mov	r0, r4
}
   13ce4:	b003      	add	sp, #12
   13ce6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		(void)memset(bt_mesh_prov_link.auth, 0,
   13cea:	f010 ba5a 	b.w	241a2 <memset>
}
   13cee:	b003      	add	sp, #12
   13cf0:	bd30      	pop	{r4, r5, pc}
   13cf2:	bf00      	nop
   13cf4:	0002e997 	.word	0x0002e997
   13cf8:	0002e9b5 	.word	0x0002e9b5
   13cfc:	20002e0c 	.word	0x20002e0c
   13d00:	20002d80 	.word	0x20002d80
   13d04:	0002e9da 	.word	0x0002e9da
   13d08:	20002d7c 	.word	0x20002d7c
   13d0c:	20002d8f 	.word	0x20002d8f

00013d10 <prov_dh_key_cb>:
{
   13d10:	b510      	push	{r4, lr}
	if (!dhkey) {
   13d12:	4601      	mov	r1, r0
{
   13d14:	b096      	sub	sp, #88	; 0x58
	if (!dhkey) {
   13d16:	b940      	cbnz	r0, 13d2a <prov_dh_key_cb+0x1a>
		BT_ERR("DHKey generation failed");
   13d18:	4825      	ldr	r0, [pc, #148]	; (13db0 <prov_dh_key_cb+0xa0>)
   13d1a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("No public key available");
   13d1c:	f00e f8d5 	bl	21eca <printk>
	prov_send_fail_msg(reason);
   13d20:	2007      	movs	r0, #7
   13d22:	f7ff fd81 	bl	13828 <prov_send_fail_msg>
}
   13d26:	b016      	add	sp, #88	; 0x58
   13d28:	bd10      	pop	{r4, pc}
	sys_memcpy_swap(bt_mesh_prov_link.dhkey, dhkey, 32);
   13d2a:	4822      	ldr	r0, [pc, #136]	; (13db4 <prov_dh_key_cb+0xa4>)
   13d2c:	f7ff ff26 	bl	13b7c <sys_memcpy_swap.constprop.10>
	PROV_BUF(buf, 65);
   13d30:	ab04      	add	r3, sp, #16
   13d32:	f44f 028c 	mov.w	r2, #4587520	; 0x460000
   13d36:	9301      	str	r3, [sp, #4]
   13d38:	e9cd 2302 	strd	r2, r3, [sp, #8]
	key = bt_pub_key_get();
   13d3c:	f7f3 fe34 	bl	79a8 <bt_pub_key_get>
	if (!key) {
   13d40:	4604      	mov	r4, r0
   13d42:	b910      	cbnz	r0, 13d4a <prov_dh_key_cb+0x3a>
		BT_ERR("No public key available");
   13d44:	2145      	movs	r1, #69	; 0x45
   13d46:	481c      	ldr	r0, [pc, #112]	; (13db8 <prov_dh_key_cb+0xa8>)
   13d48:	e7e8      	b.n	13d1c <prov_dh_key_cb+0xc>
	bt_mesh_prov_buf_init(&buf, PROV_PUB_KEY);
   13d4a:	2103      	movs	r1, #3
   13d4c:	a801      	add	r0, sp, #4
   13d4e:	f012 fe90 	bl	26a72 <bt_mesh_prov_buf_init>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), key, 32);
   13d52:	2120      	movs	r1, #32
   13d54:	a801      	add	r0, sp, #4
   13d56:	f008 fed7 	bl	1cb08 <net_buf_simple_add>
   13d5a:	4621      	mov	r1, r4
   13d5c:	f7ff ff0e 	bl	13b7c <sys_memcpy_swap.constprop.10>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), &key[32], 32);
   13d60:	2120      	movs	r1, #32
   13d62:	a801      	add	r0, sp, #4
   13d64:	f008 fed0 	bl	1cb08 <net_buf_simple_add>
   13d68:	f104 0120 	add.w	r1, r4, #32
   13d6c:	f7ff ff06 	bl	13b7c <sys_memcpy_swap.constprop.10>
	memcpy(&bt_mesh_prov_link.conf_inputs[81], &buf.data[1], 64);
   13d70:	9901      	ldr	r1, [sp, #4]
   13d72:	4812      	ldr	r0, [pc, #72]	; (13dbc <prov_dh_key_cb+0xac>)
   13d74:	3101      	adds	r1, #1
   13d76:	2240      	movs	r2, #64	; 0x40
   13d78:	f010 f9e9 	bl	2414e <memcpy>
	if (bt_mesh_prov_send(&buf, public_key_sent)) {
   13d7c:	4910      	ldr	r1, [pc, #64]	; (13dc0 <prov_dh_key_cb+0xb0>)
   13d7e:	a801      	add	r0, sp, #4
   13d80:	f7ff fd22 	bl	137c8 <bt_mesh_prov_send>
   13d84:	b120      	cbz	r0, 13d90 <prov_dh_key_cb+0x80>
		BT_ERR("Failed to send Public Key");
   13d86:	2145      	movs	r1, #69	; 0x45
   13d88:	480e      	ldr	r0, [pc, #56]	; (13dc4 <prov_dh_key_cb+0xb4>)
   13d8a:	f00e f89e 	bl	21eca <printk>
		return;
   13d8e:	e7ca      	b.n	13d26 <prov_dh_key_cb+0x16>
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_NUMBER) ||
   13d90:	2002      	movs	r0, #2
   13d92:	f7ff ff57 	bl	13c44 <atomic_test_bit.constprop.12>
   13d96:	b918      	cbnz	r0, 13da0 <prov_dh_key_cb+0x90>
	    atomic_test_bit(bt_mesh_prov_link.flags, WAIT_STRING)) {
   13d98:	2003      	movs	r0, #3
   13d9a:	f7ff ff53 	bl	13c44 <atomic_test_bit.constprop.12>
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_NUMBER) ||
   13d9e:	b120      	cbz	r0, 13daa <prov_dh_key_cb+0x9a>
		bt_mesh_prov_link.expect = PROV_NO_PDU; /* Wait for input */
   13da0:	23ff      	movs	r3, #255	; 0xff
   13da2:	4a09      	ldr	r2, [pc, #36]	; (13dc8 <prov_dh_key_cb+0xb8>)
   13da4:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
   13da8:	e7bd      	b.n	13d26 <prov_dh_key_cb+0x16>
		bt_mesh_prov_link.expect = PROV_CONFIRM;
   13daa:	2305      	movs	r3, #5
   13dac:	e7f9      	b.n	13da2 <prov_dh_key_cb+0x92>
   13dae:	bf00      	nop
   13db0:	0002e7d5 	.word	0x0002e7d5
   13db4:	20002d9f 	.word	0x20002d9f
   13db8:	0002e7f2 	.word	0x0002e7f2
   13dbc:	20002e51 	.word	0x20002e51
   13dc0:	00013e55 	.word	0x00013e55
   13dc4:	0002e80f 	.word	0x0002e80f
   13dc8:	20002d80 	.word	0x20002d80

00013dcc <prov_pub_key>:
{
   13dcc:	b510      	push	{r4, lr}
	memcpy(&bt_mesh_prov_link.conf_inputs[17], data, 64);
   13dce:	4601      	mov	r1, r0
   13dd0:	2240      	movs	r2, #64	; 0x40
   13dd2:	4810      	ldr	r0, [pc, #64]	; (13e14 <prov_pub_key+0x48>)
   13dd4:	f010 f9bb 	bl	2414e <memcpy>
	if (!bt_pub_key_get()) {
   13dd8:	f7f3 fde6 	bl	79a8 <bt_pub_key_get>
   13ddc:	b9a8      	cbnz	r0, 13e0a <prov_pub_key+0x3e>
		bt_mesh_prov_link.bearer->clear_tx();
   13dde:	4c0e      	ldr	r4, [pc, #56]	; (13e18 <prov_pub_key+0x4c>)
   13de0:	6863      	ldr	r3, [r4, #4]
   13de2:	68db      	ldr	r3, [r3, #12]
   13de4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13de6:	f3bf 8f5b 	dmb	ish
   13dea:	e854 3f00 	ldrex	r3, [r4]
   13dee:	f043 0301 	orr.w	r3, r3, #1
   13df2:	e844 3200 	strex	r2, r3, [r4]
   13df6:	2a00      	cmp	r2, #0
   13df8:	d1f7      	bne.n	13dea <prov_pub_key+0x1e>
   13dfa:	f3bf 8f5b 	dmb	ish
		BT_WARN("Waiting for local public key");
   13dfe:	2157      	movs	r1, #87	; 0x57
   13e00:	4806      	ldr	r0, [pc, #24]	; (13e1c <prov_pub_key+0x50>)
}
   13e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Waiting for local public key");
   13e06:	f00e b860 	b.w	21eca <printk>
}
   13e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prov_dh_key_gen();
   13e0e:	f7ff bedb 	b.w	13bc8 <prov_dh_key_gen>
   13e12:	bf00      	nop
   13e14:	20002e11 	.word	0x20002e11
   13e18:	20002d80 	.word	0x20002d80
   13e1c:	0002e86d 	.word	0x0002e86d

00013e20 <local_input_complete>:
{
   13e20:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_mesh_prov_link.flags, PUB_KEY_SENT)) {
   13e22:	2007      	movs	r0, #7
   13e24:	f7ff ff0e 	bl	13c44 <atomic_test_bit.constprop.12>
   13e28:	b118      	cbz	r0, 13e32 <local_input_complete+0x12>
}
   13e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_input_complete();
   13e2e:	f7ff bcdb 	b.w	137e8 <send_input_complete>
   13e32:	4b07      	ldr	r3, [pc, #28]	; (13e50 <local_input_complete+0x30>)
   13e34:	f3bf 8f5b 	dmb	ish
   13e38:	e853 2f00 	ldrex	r2, [r3]
   13e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   13e40:	e843 2100 	strex	r1, r2, [r3]
   13e44:	2900      	cmp	r1, #0
   13e46:	d1f7      	bne.n	13e38 <local_input_complete+0x18>
   13e48:	f3bf 8f5b 	dmb	ish
}
   13e4c:	bd08      	pop	{r3, pc}
   13e4e:	bf00      	nop
   13e50:	20002d80 	.word	0x20002d80

00013e54 <public_key_sent>:
{
   13e54:	b508      	push	{r3, lr}
   13e56:	4b0b      	ldr	r3, [pc, #44]	; (13e84 <public_key_sent+0x30>)
   13e58:	f3bf 8f5b 	dmb	ish
   13e5c:	e853 2f00 	ldrex	r2, [r3]
   13e60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13e64:	e843 2100 	strex	r1, r2, [r3]
   13e68:	2900      	cmp	r1, #0
   13e6a:	d1f7      	bne.n	13e5c <public_key_sent+0x8>
   13e6c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, INPUT_COMPLETE)) {
   13e70:	2009      	movs	r0, #9
   13e72:	f7ff fee7 	bl	13c44 <atomic_test_bit.constprop.12>
   13e76:	b118      	cbz	r0, 13e80 <public_key_sent+0x2c>
}
   13e78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_input_complete();
   13e7c:	f7ff bcb4 	b.w	137e8 <send_input_complete>
}
   13e80:	bd08      	pop	{r3, pc}
   13e82:	bf00      	nop
   13e84:	20002d80 	.word	0x20002d80

00013e88 <prov_confirm>:
{
   13e88:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13e8a:	4c32      	ldr	r4, [pc, #200]	; (13f54 <prov_confirm+0xcc>)
	memcpy(bt_mesh_prov_link.conf, data, 16);
   13e8c:	4601      	mov	r1, r0
{
   13e8e:	b08a      	sub	sp, #40	; 0x28
	memcpy(bt_mesh_prov_link.conf, data, 16);
   13e90:	2210      	movs	r2, #16
   13e92:	4831      	ldr	r0, [pc, #196]	; (13f58 <prov_confirm+0xd0>)
   13e94:	f010 f95b 	bl	2414e <memcpy>
   13e98:	f3bf 8f5b 	dmb	ish
   13e9c:	e854 2f00 	ldrex	r2, [r4]
   13ea0:	f022 0310 	bic.w	r3, r2, #16
   13ea4:	e844 3100 	strex	r1, r3, [r4]
   13ea8:	2900      	cmp	r1, #0
   13eaa:	d1f7      	bne.n	13e9c <prov_confirm+0x14>
   13eac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags,
   13eb0:	06d3      	lsls	r3, r2, #27
   13eb2:	d504      	bpl.n	13ebe <prov_confirm+0x36>
	    bt_mesh_prov->input_complete) {
   13eb4:	4b29      	ldr	r3, [pc, #164]	; (13f5c <prov_confirm+0xd4>)
   13eb6:	681b      	ldr	r3, [r3, #0]
   13eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				      NOTIFY_INPUT_COMPLETE) &&
   13eba:	b103      	cbz	r3, 13ebe <prov_confirm+0x36>
		bt_mesh_prov->input_complete();
   13ebc:	4798      	blx	r3
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   13ebe:	4928      	ldr	r1, [pc, #160]	; (13f60 <prov_confirm+0xd8>)
	PROV_BUF(cfm, 17);
   13ec0:	ab04      	add	r3, sp, #16
   13ec2:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   13ec6:	f101 0020 	add.w	r0, r1, #32
	PROV_BUF(cfm, 17);
   13eca:	9301      	str	r3, [sp, #4]
   13ecc:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   13ed0:	f012 f992 	bl	261f8 <bt_mesh_prov_conf_salt>
   13ed4:	b140      	cbz	r0, 13ee8 <prov_confirm+0x60>
		BT_ERR("Unable to generate confirmation salt");
   13ed6:	4823      	ldr	r0, [pc, #140]	; (13f64 <prov_confirm+0xdc>)
   13ed8:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to generate confirmation value");
   13eda:	f00d fff6 	bl	21eca <printk>
	prov_send_fail_msg(reason);
   13ede:	2007      	movs	r0, #7
   13ee0:	f7ff fca2 	bl	13828 <prov_send_fail_msg>
}
   13ee4:	b00a      	add	sp, #40	; 0x28
   13ee6:	bd10      	pop	{r4, pc}
	if (bt_mesh_prov_conf_key(bt_mesh_prov_link.dhkey, bt_mesh_prov_link.conf_salt,
   13ee8:	4a1f      	ldr	r2, [pc, #124]	; (13f68 <prov_confirm+0xe0>)
   13eea:	f1a2 0110 	sub.w	r1, r2, #16
   13eee:	f1a2 0051 	sub.w	r0, r2, #81	; 0x51
   13ef2:	f7fb f9df 	bl	f2b4 <bt_mesh_prov_conf_key>
   13ef6:	b110      	cbz	r0, 13efe <prov_confirm+0x76>
		BT_ERR("Unable to generate confirmation key");
   13ef8:	2145      	movs	r1, #69	; 0x45
   13efa:	481c      	ldr	r0, [pc, #112]	; (13f6c <prov_confirm+0xe4>)
   13efc:	e7ed      	b.n	13eda <prov_confirm+0x52>
	if (bt_rand(bt_mesh_prov_link.rand, 16)) {
   13efe:	2110      	movs	r1, #16
   13f00:	481b      	ldr	r0, [pc, #108]	; (13f70 <prov_confirm+0xe8>)
   13f02:	f013 fa08 	bl	27316 <bt_rand>
   13f06:	b110      	cbz	r0, 13f0e <prov_confirm+0x86>
		BT_ERR("Unable to generate random number");
   13f08:	2145      	movs	r1, #69	; 0x45
   13f0a:	481a      	ldr	r0, [pc, #104]	; (13f74 <prov_confirm+0xec>)
   13f0c:	e7e5      	b.n	13eda <prov_confirm+0x52>
	bt_mesh_prov_buf_init(&cfm, PROV_CONFIRM);
   13f0e:	2105      	movs	r1, #5
   13f10:	a801      	add	r0, sp, #4
   13f12:	f012 fdae 	bl	26a72 <bt_mesh_prov_buf_init>
			      bt_mesh_prov_link.auth, net_buf_simple_add(&cfm, 16))) {
   13f16:	2110      	movs	r1, #16
   13f18:	a801      	add	r0, sp, #4
   13f1a:	f008 fdf5 	bl	1cb08 <net_buf_simple_add>
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, bt_mesh_prov_link.rand,
   13f1e:	4a16      	ldr	r2, [pc, #88]	; (13f78 <prov_confirm+0xf0>)
   13f20:	4603      	mov	r3, r0
   13f22:	f102 0141 	add.w	r1, r2, #65	; 0x41
   13f26:	f102 0061 	add.w	r0, r2, #97	; 0x61
   13f2a:	f012 f976 	bl	2621a <bt_mesh_prov_conf>
   13f2e:	4601      	mov	r1, r0
   13f30:	b110      	cbz	r0, 13f38 <prov_confirm+0xb0>
		BT_ERR("Unable to generate confirmation value");
   13f32:	2145      	movs	r1, #69	; 0x45
   13f34:	4811      	ldr	r0, [pc, #68]	; (13f7c <prov_confirm+0xf4>)
   13f36:	e7d0      	b.n	13eda <prov_confirm+0x52>
	if (bt_mesh_prov_send(&cfm, NULL)) {
   13f38:	a801      	add	r0, sp, #4
   13f3a:	f7ff fc45 	bl	137c8 <bt_mesh_prov_send>
   13f3e:	b120      	cbz	r0, 13f4a <prov_confirm+0xc2>
		BT_ERR("Failed to send Provisioning Confirm");
   13f40:	2145      	movs	r1, #69	; 0x45
   13f42:	480f      	ldr	r0, [pc, #60]	; (13f80 <prov_confirm+0xf8>)
   13f44:	f00d ffc1 	bl	21eca <printk>
		return;
   13f48:	e7cc      	b.n	13ee4 <prov_confirm+0x5c>
	bt_mesh_prov_link.expect = PROV_RANDOM;
   13f4a:	2306      	movs	r3, #6
   13f4c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
   13f50:	e7c8      	b.n	13ee4 <prov_confirm+0x5c>
   13f52:	bf00      	nop
   13f54:	20002d80 	.word	0x20002d80
   13f58:	20002dc0 	.word	0x20002dc0
   13f5c:	20002d7c 	.word	0x20002d7c
   13f60:	20002de0 	.word	0x20002de0
   13f64:	0002e617 	.word	0x0002e617
   13f68:	20002df0 	.word	0x20002df0
   13f6c:	0002e641 	.word	0x0002e641
   13f70:	20002dd0 	.word	0x20002dd0
   13f74:	0002e66a 	.word	0x0002e66a
   13f78:	20002d8f 	.word	0x20002d8f
   13f7c:	0002e690 	.word	0x0002e690
   13f80:	0002e6bb 	.word	0x0002e6bb

00013f84 <bt_mesh_prov_enable>:
		[PROV_DATA] = prov_data,
	},
};

int bt_mesh_prov_enable(bt_mesh_prov_bearer_t bearers)
{
   13f84:	b538      	push	{r3, r4, r5, lr}
   13f86:	4604      	mov	r4, r0
	if (bt_mesh_is_provisioned()) {
   13f88:	f011 fc4d 	bl	25826 <bt_mesh_is_provisioned>
   13f8c:	4605      	mov	r5, r0
   13f8e:	b9a0      	cbnz	r0, 13fba <bt_mesh_prov_enable+0x36>

		memcpy(uuid.val, bt_mesh_prov->uuid, 16);
		BT_INFO("Device UUID: %s", bt_uuid_str(&uuid.uuid));
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) &&
   13f90:	07e2      	lsls	r2, r4, #31
   13f92:	d505      	bpl.n	13fa0 <bt_mesh_prov_enable+0x1c>
	    (bearers & BT_MESH_PROV_ADV)) {
		pb_adv.link_accept(bt_mesh_prov_bearer_cb_get(), NULL);
   13f94:	f7ff fbe2 	bl	1375c <bt_mesh_prov_bearer_cb_get>
   13f98:	4b09      	ldr	r3, [pc, #36]	; (13fc0 <bt_mesh_prov_enable+0x3c>)
   13f9a:	4629      	mov	r1, r5
   13f9c:	685b      	ldr	r3, [r3, #4]
   13f9e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   13fa0:	07a3      	lsls	r3, r4, #30
   13fa2:	d505      	bpl.n	13fb0 <bt_mesh_prov_enable+0x2c>
	    (bearers & BT_MESH_PROV_GATT)) {
		pb_gatt.link_accept(bt_mesh_prov_bearer_cb_get(), NULL);
   13fa4:	f7ff fbda 	bl	1375c <bt_mesh_prov_bearer_cb_get>
   13fa8:	4b06      	ldr	r3, [pc, #24]	; (13fc4 <bt_mesh_prov_enable+0x40>)
   13faa:	2100      	movs	r1, #0
   13fac:	685b      	ldr	r3, [r3, #4]
   13fae:	4798      	blx	r3
	}

	bt_mesh_prov_link.role = &role_device;
   13fb0:	4b05      	ldr	r3, [pc, #20]	; (13fc8 <bt_mesh_prov_enable+0x44>)
   13fb2:	4a06      	ldr	r2, [pc, #24]	; (13fcc <bt_mesh_prov_enable+0x48>)
   13fb4:	609a      	str	r2, [r3, #8]

	return 0;
   13fb6:	2000      	movs	r0, #0
}
   13fb8:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   13fba:	f06f 0044 	mvn.w	r0, #68	; 0x44
   13fbe:	e7fb      	b.n	13fb8 <bt_mesh_prov_enable+0x34>
   13fc0:	00029910 	.word	0x00029910
   13fc4:	00029928 	.word	0x00029928
   13fc8:	20002d80 	.word	0x20002d80
   13fcc:	000298b0 	.word	0x000298b0

00013fd0 <free_segments>:

	return 1 + (len / CONT_PAYLOAD_MAX);
}

static void free_segments(void)
{
   13fd0:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   13fd2:	2400      	movs	r4, #0
   13fd4:	4d08      	ldr	r5, [pc, #32]	; (13ff8 <free_segments+0x28>)

		if (!buf) {
			break;
		}

		link.tx.buf[i] = NULL;
   13fd6:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
   13fd8:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
   13fdc:	b158      	cbz	r0, 13ff6 <free_segments+0x26>
		/* Mark as canceled */
		BT_MESH_ADV(buf)->busy = 0U;
   13fde:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
   13fe0:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
   13fe4:	7a1a      	ldrb	r2, [r3, #8]
   13fe6:	f366 0282 	bfi	r2, r6, #2, #1
   13fea:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   13fec:	3401      	adds	r4, #1
		net_buf_unref(buf);
   13fee:	f008 fc3b 	bl	1c868 <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   13ff2:	2c03      	cmp	r4, #3
   13ff4:	d1f0      	bne.n	13fd8 <free_segments+0x8>
	}
}
   13ff6:	bd70      	pop	{r4, r5, r6, pc}
   13ff8:	200002dc 	.word	0x200002dc

00013ffc <prov_clear_tx>:
{
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
}

static void prov_clear_tx(void)
{
   13ffc:	b508      	push	{r3, lr}
	BT_DBG("");

	k_delayed_work_cancel(&link.tx.retransmit);
   13ffe:	4803      	ldr	r0, [pc, #12]	; (1400c <prov_clear_tx+0x10>)
   14000:	f00c f91a 	bl	20238 <k_delayed_work_cancel>

	free_segments();
}
   14004:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
   14008:	f7ff bfe2 	b.w	13fd0 <free_segments>
   1400c:	200002f0 	.word	0x200002f0

00014010 <adv_buf_create>:
	reset_adv_link();
	cb->link_closed(&pb_adv, cb_data, reason);
}

static struct net_buf *adv_buf_create(uint8_t retransmits)
{
   14010:	b510      	push	{r4, lr}
	struct net_buf *buf;

	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV,
   14012:	f040 0108 	orr.w	r1, r0, #8
   14016:	f243 3234 	movw	r2, #13108	; 0x3334
   1401a:	2300      	movs	r3, #0
   1401c:	2000      	movs	r0, #0
   1401e:	f7f7 fb3d 	bl	b69c <bt_mesh_adv_create>
				 BT_MESH_TRANSMIT(retransmits, 20),
				 BUF_TIMEOUT);
	if (!buf) {
   14022:	4604      	mov	r4, r0
   14024:	b918      	cbnz	r0, 1402e <adv_buf_create+0x1e>
		BT_ERR("Out of provisioning buffers");
   14026:	2145      	movs	r1, #69	; 0x45
   14028:	4802      	ldr	r0, [pc, #8]	; (14034 <adv_buf_create+0x24>)
   1402a:	f00d ff4e 	bl	21eca <printk>
		return NULL;
	}

	return buf;
}
   1402e:	4620      	mov	r0, r4
   14030:	bd10      	pop	{r4, pc}
   14032:	bf00      	nop
   14034:	0002ea67 	.word	0x0002ea67

00014038 <atomic_test_bit.constprop.16>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14038:	4b05      	ldr	r3, [pc, #20]	; (14050 <atomic_test_bit.constprop.16+0x18>)
   1403a:	f3bf 8f5b 	dmb	ish
   1403e:	685b      	ldr	r3, [r3, #4]
   14040:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14044:	fa43 f000 	asr.w	r0, r3, r0
}
   14048:	f000 0001 	and.w	r0, r0, #1
   1404c:	4770      	bx	lr
   1404e:	bf00      	nop
   14050:	200002b8 	.word	0x200002b8

00014054 <prov_link_accept>:

	return 0;
}

static int prov_link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   14054:	b570      	push	{r4, r5, r6, lr}
   14056:	4606      	mov	r6, r0
   14058:	460d      	mov	r5, r1
	int err;

	err = bt_mesh_adv_enable();
   1405a:	f7fd ff41 	bl	11ee0 <bt_mesh_adv_enable>
	if (err) {
   1405e:	4604      	mov	r4, r0
   14060:	b128      	cbz	r0, 1406e <prov_link_accept+0x1a>
		BT_ERR("Failed enabling advertiser");
   14062:	2145      	movs	r1, #69	; 0x45
   14064:	480b      	ldr	r0, [pc, #44]	; (14094 <prov_link_accept+0x40>)
   14066:	f00d ff30 	bl	21eca <printk>
	bt_mesh_scan_enable();
	/* Enable unprovisioned beacon sending */
	bt_mesh_beacon_enable();

	return 0;
}
   1406a:	4620      	mov	r0, r4
   1406c:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   1406e:	f7ff ffe3 	bl	14038 <atomic_test_bit.constprop.16>
   14072:	b960      	cbnz	r0, 1408e <prov_link_accept+0x3a>
	link.rx.id = XACT_ID_MAX;
   14074:	4b08      	ldr	r3, [pc, #32]	; (14098 <prov_link_accept+0x44>)
   14076:	227f      	movs	r2, #127	; 0x7f
   14078:	741a      	strb	r2, [r3, #16]
	link.tx.id = XACT_ID_NVAL;
   1407a:	22ff      	movs	r2, #255	; 0xff
   1407c:	f883 2020 	strb.w	r2, [r3, #32]
	link.cb_data = cb_data;
   14080:	e9c3 6502 	strd	r6, r5, [r3, #8]
	bt_mesh_scan_enable();
   14084:	f7f7 fb30 	bl	b6e8 <bt_mesh_scan_enable>
	bt_mesh_beacon_enable();
   14088:	f7f7 fde8 	bl	bc5c <bt_mesh_beacon_enable>
	return 0;
   1408c:	e7ed      	b.n	1406a <prov_link_accept+0x16>
		return -EBUSY;
   1408e:	f06f 040f 	mvn.w	r4, #15
   14092:	e7ea      	b.n	1406a <prov_link_accept+0x16>
   14094:	0002bdec 	.word	0x0002bdec
   14098:	200002b8 	.word	0x200002b8

0001409c <reset_adv_link>:
{
   1409c:	b510      	push	{r4, lr}
	k_delayed_work_cancel(&link.prot_timer);
   1409e:	4c17      	ldr	r4, [pc, #92]	; (140fc <reset_adv_link+0x60>)
	prov_clear_tx();
   140a0:	f7ff ffac 	bl	13ffc <prov_clear_tx>
	k_delayed_work_cancel(&link.prot_timer);
   140a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   140a8:	f00c f8c6 	bl	20238 <k_delayed_work_cancel>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   140ac:	2005      	movs	r0, #5
   140ae:	f7ff ffc3 	bl	14038 <atomic_test_bit.constprop.16>
   140b2:	b180      	cbz	r0, 140d6 <reset_adv_link+0x3a>
		(void)memset(&link, 0, offsetof(struct pb_adv, tx.retransmit));
   140b4:	2238      	movs	r2, #56	; 0x38
   140b6:	2100      	movs	r1, #0
   140b8:	4620      	mov	r0, r4
   140ba:	f010 f872 	bl	241a2 <memset>
		link.rx.id = XACT_ID_NVAL;
   140be:	23ff      	movs	r3, #255	; 0xff
   140c0:	7423      	strb	r3, [r4, #16]
	link.tx.pending_ack = XACT_ID_NVAL;
   140c2:	23ff      	movs	r3, #255	; 0xff
   140c4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	link.rx.buf = &rx_buf;
   140c8:	4b0d      	ldr	r3, [pc, #52]	; (14100 <reset_adv_link+0x64>)
   140ca:	6163      	str	r3, [r4, #20]
	buf->len  = 0U;
   140cc:	2200      	movs	r2, #0
   140ce:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   140d0:	689a      	ldr	r2, [r3, #8]
   140d2:	601a      	str	r2, [r3, #0]
}
   140d4:	bd10      	pop	{r4, pc}
		link.id = 0;
   140d6:	4623      	mov	r3, r4
   140d8:	f843 0b04 	str.w	r0, [r3], #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   140dc:	f3bf 8f5b 	dmb	ish
   140e0:	e853 2f00 	ldrex	r2, [r3]
   140e4:	e843 0100 	strex	r1, r0, [r3]
   140e8:	2900      	cmp	r1, #0
   140ea:	d1f9      	bne.n	140e0 <reset_adv_link+0x44>
   140ec:	f3bf 8f5b 	dmb	ish
		link.rx.id = XACT_ID_MAX;
   140f0:	237f      	movs	r3, #127	; 0x7f
   140f2:	7423      	strb	r3, [r4, #16]
		link.tx.id = XACT_ID_NVAL;
   140f4:	23ff      	movs	r3, #255	; 0xff
   140f6:	f884 3020 	strb.w	r3, [r4, #32]
   140fa:	e7e2      	b.n	140c2 <reset_adv_link+0x26>
   140fc:	200002b8 	.word	0x200002b8
   14100:	200007b0 	.word	0x200007b0

00014104 <close_link>:
{
   14104:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
   14106:	4b06      	ldr	r3, [pc, #24]	; (14120 <close_link+0x1c>)
	void *cb_data = link.cb_data;
   14108:	e9d3 6402 	ldrd	r6, r4, [r3, #8]
{
   1410c:	4605      	mov	r5, r0
	reset_adv_link();
   1410e:	f7ff ffc5 	bl	1409c <reset_adv_link>
	cb->link_closed(&pb_adv, cb_data, reason);
   14112:	6873      	ldr	r3, [r6, #4]
   14114:	4803      	ldr	r0, [pc, #12]	; (14124 <close_link+0x20>)
   14116:	462a      	mov	r2, r5
   14118:	4621      	mov	r1, r4
}
   1411a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_adv, cb_data, reason);
   1411e:	4718      	bx	r3
   14120:	200002b8 	.word	0x200002b8
   14124:	00029910 	.word	0x00029910

00014128 <prov_retransmit>:
{
   14128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   1412c:	2000      	movs	r0, #0
   1412e:	f7ff ff83 	bl	14038 <atomic_test_bit.constprop.16>
   14132:	b928      	cbnz	r0, 14140 <prov_retransmit+0x18>
		BT_WARN("Link not active");
   14134:	2157      	movs	r1, #87	; 0x57
   14136:	482a      	ldr	r0, [pc, #168]	; (141e0 <prov_retransmit+0xb8>)
}
   14138:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Link not active");
   1413c:	f00d bec5 	b.w	21eca <printk>
	if (atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   14140:	2002      	movs	r0, #2
   14142:	f7ff ff79 	bl	14038 <atomic_test_bit.constprop.16>
		timeout_ms = TRANSACTION_TIMEOUT;
   14146:	f640 35b8 	movw	r5, #3000	; 0xbb8
   1414a:	f247 5330 	movw	r3, #30000	; 0x7530
   1414e:	2800      	cmp	r0, #0
   14150:	bf08      	it	eq
   14152:	461d      	moveq	r5, r3
   14154:	f014 fb89 	bl	2886a <z_impl_k_uptime_ticks>
	if (k_uptime_get() - link.tx.start > timeout_ms) {
   14158:	4c22      	ldr	r4, [pc, #136]	; (141e4 <prov_retransmit+0xbc>)
   1415a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1415e:	fba0 8903 	umull	r8, r9, r0, r3
   14162:	fb03 9901 	mla	r9, r3, r1, r9
   14166:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
   1416a:	ea4f 33d8 	mov.w	r3, r8, lsr #15
   1416e:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
   14172:	1a5e      	subs	r6, r3, r1
   14174:	ea4f 32d9 	mov.w	r2, r9, lsr #15
   14178:	eb62 0700 	sbc.w	r7, r2, r0
   1417c:	17e9      	asrs	r1, r5, #31
   1417e:	42b5      	cmp	r5, r6
   14180:	eb71 0307 	sbcs.w	r3, r1, r7
   14184:	da0e      	bge.n	141a4 <prov_retransmit+0x7c>
		if (atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   14186:	2002      	movs	r0, #2
   14188:	f7ff ff56 	bl	14038 <atomic_test_bit.constprop.16>
   1418c:	b120      	cbz	r0, 14198 <prov_retransmit+0x70>
			close_link(PROV_BEARER_LINK_STATUS_SUCCESS);
   1418e:	2000      	movs	r0, #0
}
   14190:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   14194:	f7ff bfb6 	b.w	14104 <close_link>
			BT_WARN("Giving up transaction");
   14198:	4813      	ldr	r0, [pc, #76]	; (141e8 <prov_retransmit+0xc0>)
   1419a:	2157      	movs	r1, #87	; 0x57
   1419c:	f00d fe95 	bl	21eca <printk>
			close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   141a0:	2001      	movs	r0, #1
   141a2:	e7f5      	b.n	14190 <prov_retransmit+0x68>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   141a4:	4e11      	ldr	r6, [pc, #68]	; (141ec <prov_retransmit+0xc4>)
   141a6:	3424      	adds	r4, #36	; 0x24
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   141a8:	2500      	movs	r5, #0
		struct net_buf *buf = link.tx.buf[i];
   141aa:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   141ae:	b1a0      	cbz	r0, 141da <prov_retransmit+0xb2>
		if (BT_MESH_ADV(buf)->busy) {
   141b0:	6943      	ldr	r3, [r0, #20]
   141b2:	7a1a      	ldrb	r2, [r3, #8]
   141b4:	f012 0204 	ands.w	r2, r2, #4
   141b8:	f105 0501 	add.w	r5, r5, #1
   141bc:	d10b      	bne.n	141d6 <prov_retransmit+0xae>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   141be:	2d03      	cmp	r5, #3
   141c0:	d005      	beq.n	141ce <prov_retransmit+0xa6>
   141c2:	6823      	ldr	r3, [r4, #0]
   141c4:	b11b      	cbz	r3, 141ce <prov_retransmit+0xa6>
			bt_mesh_adv_send(buf, NULL, NULL);
   141c6:	4611      	mov	r1, r2
   141c8:	f7f7 fa78 	bl	b6bc <bt_mesh_adv_send>
   141cc:	e7ed      	b.n	141aa <prov_retransmit+0x82>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   141ce:	2200      	movs	r2, #0
   141d0:	4631      	mov	r1, r6
   141d2:	f7f7 fa73 	bl	b6bc <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   141d6:	2d03      	cmp	r5, #3
   141d8:	d1e7      	bne.n	141aa <prov_retransmit+0x82>
}
   141da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   141de:	bf00      	nop
   141e0:	0002ec8e 	.word	0x0002ec8e
   141e4:	200002b8 	.word	0x200002b8
   141e8:	0002eca3 	.word	0x0002eca3
   141ec:	200007a8 	.word	0x200007a8

000141f0 <protocol_timeout>:
	link.rx.seg = 0U;
   141f0:	4b02      	ldr	r3, [pc, #8]	; (141fc <protocol_timeout+0xc>)
   141f2:	2200      	movs	r2, #0
	close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   141f4:	2001      	movs	r0, #1
	link.rx.seg = 0U;
   141f6:	745a      	strb	r2, [r3, #17]
	close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   141f8:	f7ff bf84 	b.w	14104 <close_link>
   141fc:	200002b8 	.word	0x200002b8

00014200 <gen_prov_ack>:
{
   14200:	b510      	push	{r4, lr}
	if (!link.tx.buf[0]) {
   14202:	4c0b      	ldr	r4, [pc, #44]	; (14230 <gen_prov_ack+0x30>)
   14204:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14206:	b18b      	cbz	r3, 1422c <gen_prov_ack+0x2c>
	if (rx->xact_id == link.tx.id) {
   14208:	7902      	ldrb	r2, [r0, #4]
   1420a:	f894 3020 	ldrb.w	r3, [r4, #32]
   1420e:	429a      	cmp	r2, r3
   14210:	d10c      	bne.n	1422c <gen_prov_ack+0x2c>
		if (!atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   14212:	2002      	movs	r0, #2
   14214:	f7ff ff10 	bl	14038 <atomic_test_bit.constprop.16>
   14218:	b908      	cbnz	r0, 1421e <gen_prov_ack+0x1e>
			prov_clear_tx();
   1421a:	f7ff feef 	bl	13ffc <prov_clear_tx>
		if (link.tx.cb) {
   1421e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14220:	b123      	cbz	r3, 1422c <gen_prov_ack+0x2c>
			link.tx.cb(0, link.tx.cb_data);
   14222:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14224:	2000      	movs	r0, #0
}
   14226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			link.tx.cb(0, link.tx.cb_data);
   1422a:	4718      	bx	r3
}
   1422c:	bd10      	pop	{r4, pc}
   1422e:	bf00      	nop
   14230:	200002b8 	.word	0x200002b8

00014234 <ack_complete>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14234:	4b06      	ldr	r3, [pc, #24]	; (14250 <ack_complete+0x1c>)
   14236:	f3bf 8f5b 	dmb	ish
   1423a:	e853 2f00 	ldrex	r2, [r3]
   1423e:	f022 0210 	bic.w	r2, r2, #16
   14242:	e843 2100 	strex	r1, r2, [r3]
   14246:	2900      	cmp	r1, #0
   14248:	d1f7      	bne.n	1423a <ack_complete+0x6>
   1424a:	f3bf 8f5b 	dmb	ish
}
   1424e:	4770      	bx	lr
   14250:	200002bc 	.word	0x200002bc

00014254 <buf_sent>:
	if (!link.tx.buf[0]) {
   14254:	4905      	ldr	r1, [pc, #20]	; (1426c <buf_sent+0x18>)
   14256:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   14258:	b133      	cbz	r3, 14268 <buf_sent+0x14>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1425a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1425e:	2300      	movs	r3, #0
   14260:	3138      	adds	r1, #56	; 0x38
   14262:	4803      	ldr	r0, [pc, #12]	; (14270 <buf_sent+0x1c>)
   14264:	f00b bf78 	b.w	20158 <k_delayed_work_submit_to_queue>
}
   14268:	4770      	bx	lr
   1426a:	bf00      	nop
   1426c:	200002b8 	.word	0x200002b8
   14270:	20002170 	.word	0x20002170

00014274 <prov_failed>:
{
   14274:	b510      	push	{r4, lr}
	link.cb->error(&pb_adv, link.cb_data, err);
   14276:	4c0a      	ldr	r4, [pc, #40]	; (142a0 <prov_failed+0x2c>)
   14278:	68a3      	ldr	r3, [r4, #8]
   1427a:	68e1      	ldr	r1, [r4, #12]
   1427c:	689b      	ldr	r3, [r3, #8]
   1427e:	4602      	mov	r2, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14280:	3404      	adds	r4, #4
   14282:	4808      	ldr	r0, [pc, #32]	; (142a4 <prov_failed+0x30>)
   14284:	4798      	blx	r3
   14286:	f3bf 8f5b 	dmb	ish
   1428a:	e854 3f00 	ldrex	r3, [r4]
   1428e:	f043 0308 	orr.w	r3, r3, #8
   14292:	e844 3200 	strex	r2, r3, [r4]
   14296:	2a00      	cmp	r2, #0
   14298:	d1f7      	bne.n	1428a <prov_failed+0x16>
   1429a:	f3bf 8f5b 	dmb	ish
}
   1429e:	bd10      	pop	{r4, pc}
   142a0:	200002b8 	.word	0x200002b8
   142a4:	00029910 	.word	0x00029910

000142a8 <gen_prov_ack_send>:
{
   142a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142ac:	4e23      	ldr	r6, [pc, #140]	; (1433c <gen_prov_ack_send+0x94>)
   142ae:	f3bf 8f5b 	dmb	ish
   142b2:	4680      	mov	r8, r0
   142b4:	1d33      	adds	r3, r6, #4
   142b6:	e853 2f00 	ldrex	r2, [r3]
   142ba:	f042 0110 	orr.w	r1, r2, #16
   142be:	e843 1000 	strex	r0, r1, [r3]
   142c2:	2800      	cmp	r0, #0
   142c4:	d1f7      	bne.n	142b6 <gen_prov_ack_send+0xe>
   142c6:	f3bf 8f5b 	dmb	ish
	if (pending && link.tx.pending_ack == xact_id) {
   142ca:	f012 0710 	ands.w	r7, r2, #16
   142ce:	461c      	mov	r4, r3
   142d0:	d003      	beq.n	142da <gen_prov_ack_send+0x32>
   142d2:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   142d6:	4543      	cmp	r3, r8
   142d8:	d010      	beq.n	142fc <gen_prov_ack_send+0x54>
	buf = adv_buf_create(RETRANSMITS_ACK);
   142da:	2002      	movs	r0, #2
   142dc:	f7ff fe98 	bl	14010 <adv_buf_create>
	if (!buf) {
   142e0:	4605      	mov	r5, r0
   142e2:	b968      	cbnz	r0, 14300 <gen_prov_ack_send+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   142e4:	f3bf 8f5b 	dmb	ish
   142e8:	e854 3f00 	ldrex	r3, [r4]
   142ec:	f023 0310 	bic.w	r3, r3, #16
   142f0:	e844 3200 	strex	r2, r3, [r4]
   142f4:	2a00      	cmp	r2, #0
   142f6:	d1f7      	bne.n	142e8 <gen_prov_ack_send+0x40>
   142f8:	f3bf 8f5b 	dmb	ish
}
   142fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pending) {
   14300:	b9cf      	cbnz	r7, 14336 <gen_prov_ack_send+0x8e>
		complete = &cb;
   14302:	4c0f      	ldr	r4, [pc, #60]	; (14340 <gen_prov_ack_send+0x98>)
		link.tx.pending_ack = xact_id;
   14304:	f886 8021 	strb.w	r8, [r6, #33]	; 0x21
	net_buf_simple_add_be32(&buf->b, val);
   14308:	6831      	ldr	r1, [r6, #0]
   1430a:	f105 0008 	add.w	r0, r5, #8
   1430e:	f013 fe5f 	bl	27fd0 <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
   14312:	4641      	mov	r1, r8
   14314:	4628      	mov	r0, r5
   14316:	f012 fbba 	bl	26a8e <net_buf_add_u8>
	net_buf_add_u8(buf, GPC_ACK);
   1431a:	2101      	movs	r1, #1
   1431c:	4628      	mov	r0, r5
   1431e:	f012 fbb6 	bl	26a8e <net_buf_add_u8>
	bt_mesh_adv_send(buf, complete, NULL);
   14322:	4628      	mov	r0, r5
   14324:	4621      	mov	r1, r4
   14326:	2200      	movs	r2, #0
   14328:	f7f7 f9c8 	bl	b6bc <bt_mesh_adv_send>
	net_buf_unref(buf);
   1432c:	4628      	mov	r0, r5
}
   1432e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	net_buf_unref(buf);
   14332:	f008 ba99 	b.w	1c868 <net_buf_unref>
		complete = NULL;
   14336:	2400      	movs	r4, #0
   14338:	e7e6      	b.n	14308 <gen_prov_ack_send+0x60>
   1433a:	bf00      	nop
   1433c:	200002b8 	.word	0x200002b8
   14340:	000298e8 	.word	0x000298e8

00014344 <prov_msg_recv>:
{
   14344:	b510      	push	{r4, lr}
   14346:	4c17      	ldr	r4, [pc, #92]	; (143a4 <prov_msg_recv+0x60>)
   14348:	4817      	ldr	r0, [pc, #92]	; (143a8 <prov_msg_recv+0x64>)
   1434a:	f104 0168 	add.w	r1, r4, #104	; 0x68
   1434e:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   14352:	2300      	movs	r3, #0
   14354:	f00b ff00 	bl	20158 <k_delayed_work_submit_to_queue>
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   14358:	7ce1      	ldrb	r1, [r4, #19]
   1435a:	6960      	ldr	r0, [r4, #20]
   1435c:	f7fa ff70 	bl	f240 <bt_mesh_fcs_check>
   14360:	b928      	cbnz	r0, 1436e <prov_msg_recv+0x2a>
		BT_ERR("Incorrect FCS");
   14362:	2145      	movs	r1, #69	; 0x45
   14364:	4811      	ldr	r0, [pc, #68]	; (143ac <prov_msg_recv+0x68>)
}
   14366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Incorrect FCS");
   1436a:	f00d bdae 	b.w	21eca <printk>
	gen_prov_ack_send(link.rx.id);
   1436e:	7c20      	ldrb	r0, [r4, #16]
   14370:	f7ff ff9a 	bl	142a8 <gen_prov_ack_send>
	if (atomic_test_bit(link.flags, ADV_LINK_INVALID)) {
   14374:	2003      	movs	r0, #3
   14376:	f7ff fe5f 	bl	14038 <atomic_test_bit.constprop.16>
   1437a:	b158      	cbz	r0, 14394 <prov_msg_recv+0x50>
		BT_WARN("Unexpected msg 0x%02x on invalidated link",
   1437c:	6963      	ldr	r3, [r4, #20]
   1437e:	480c      	ldr	r0, [pc, #48]	; (143b0 <prov_msg_recv+0x6c>)
   14380:	681b      	ldr	r3, [r3, #0]
   14382:	2157      	movs	r1, #87	; 0x57
   14384:	781a      	ldrb	r2, [r3, #0]
   14386:	f00d fda0 	bl	21eca <printk>
		prov_failed(PROV_ERR_UNEXP_PDU);
   1438a:	2003      	movs	r0, #3
}
   1438c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_failed(PROV_ERR_UNEXP_PDU);
   14390:	f7ff bf70 	b.w	14274 <prov_failed>
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   14394:	68a3      	ldr	r3, [r4, #8]
   14396:	6962      	ldr	r2, [r4, #20]
   14398:	68e1      	ldr	r1, [r4, #12]
   1439a:	68db      	ldr	r3, [r3, #12]
   1439c:	4805      	ldr	r0, [pc, #20]	; (143b4 <prov_msg_recv+0x70>)
}
   1439e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   143a2:	4718      	bx	r3
   143a4:	200002b8 	.word	0x200002b8
   143a8:	20002170 	.word	0x20002170
   143ac:	0002ec4c 	.word	0x0002ec4c
   143b0:	0002ec5f 	.word	0x0002ec5f
   143b4:	00029910 	.word	0x00029910

000143b8 <gen_prov_cont>:
{
   143b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   143bc:	4d3a      	ldr	r5, [pc, #232]	; (144a8 <gen_prov_cont+0xf0>)
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   143be:	7944      	ldrb	r4, [r0, #5]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   143c0:	f895 c011 	ldrb.w	ip, [r5, #17]
   143c4:	7c2b      	ldrb	r3, [r5, #16]
   143c6:	7902      	ldrb	r2, [r0, #4]
{
   143c8:	4607      	mov	r7, r0
   143ca:	460e      	mov	r6, r1
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   143cc:	f1bc 0f00 	cmp.w	ip, #0
   143d0:	d12d      	bne.n	1442e <gen_prov_cont+0x76>
   143d2:	4293      	cmp	r3, r2
   143d4:	d109      	bne.n	143ea <gen_prov_cont+0x32>
	return atomic_test_bit(link.flags, ADV_ACK_PENDING);
   143d6:	2004      	movs	r0, #4
   143d8:	f7ff fe2e 	bl	14038 <atomic_test_bit.constprop.16>
		if (!ack_pending()) {
   143dc:	2800      	cmp	r0, #0
   143de:	d161      	bne.n	144a4 <gen_prov_cont+0xec>
			gen_prov_ack_send(rx->xact_id);
   143e0:	7938      	ldrb	r0, [r7, #4]
}
   143e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			gen_prov_ack_send(rx->xact_id);
   143e6:	f7ff bf5f 	b.w	142a8 <gen_prov_ack_send>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   143ea:	b259      	sxtb	r1, r3
   143ec:	1c48      	adds	r0, r1, #1
   143ee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   143f2:	f001 0180 	and.w	r1, r1, #128	; 0x80
	if (!link.rx.seg &&
   143f6:	4301      	orrs	r1, r0
   143f8:	428a      	cmp	r2, r1
   143fa:	d11a      	bne.n	14432 <gen_prov_cont+0x7a>
		net_buf_simple_reset(link.rx.buf);
   143fc:	696b      	ldr	r3, [r5, #20]
		link.rx.id = rx->xact_id;
   143fe:	742a      	strb	r2, [r5, #16]
	buf->data = buf->__buf;
   14400:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   14402:	f8a3 c004 	strh.w	ip, [r3, #4]
	buf->data = buf->__buf;
   14406:	601a      	str	r2, [r3, #0]
		link.rx.seg = SEG_NVAL;
   14408:	23ff      	movs	r3, #255	; 0xff
   1440a:	746b      	strb	r3, [r5, #17]
		link.rx.last_seg = SEG_NVAL;
   1440c:	74ab      	strb	r3, [r5, #18]
		prov_clear_tx();
   1440e:	f7ff fdf5 	bl	13ffc <prov_clear_tx>
	if (seg > link.rx.last_seg) {
   14412:	7cab      	ldrb	r3, [r5, #18]
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   14414:	08a4      	lsrs	r4, r4, #2
	if (seg > link.rx.last_seg) {
   14416:	42a3      	cmp	r3, r4
   14418:	d211      	bcs.n	1443e <gen_prov_cont+0x86>
		BT_ERR("Invalid segment index %u", seg);
   1441a:	4622      	mov	r2, r4
   1441c:	2145      	movs	r1, #69	; 0x45
   1441e:	4823      	ldr	r0, [pc, #140]	; (144ac <gen_prov_cont+0xf4>)
   14420:	f00d fd53 	bl	21eca <printk>
			prov_failed(PROV_ERR_NVAL_FMT);
   14424:	2002      	movs	r0, #2
}
   14426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			prov_failed(PROV_ERR_NVAL_FMT);
   1442a:	f7ff bf23 	b.w	14274 <prov_failed>
	} else if (rx->xact_id != link.rx.id) {
   1442e:	4293      	cmp	r3, r2
   14430:	d0ef      	beq.n	14412 <gen_prov_cont+0x5a>
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
   14432:	2157      	movs	r1, #87	; 0x57
   14434:	481e      	ldr	r0, [pc, #120]	; (144b0 <gen_prov_cont+0xf8>)
}
   14436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
   1443a:	f00d bd46 	b.w	21eca <printk>
	if (!(link.rx.seg & BIT(seg))) {
   1443e:	7c6b      	ldrb	r3, [r5, #17]
   14440:	40e3      	lsrs	r3, r4
   14442:	07da      	lsls	r2, r3, #31
   14444:	d52e      	bpl.n	144a4 <gen_prov_cont+0xec>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
   14446:	696a      	ldr	r2, [r5, #20]
   14448:	6831      	ldr	r1, [r6, #0]
   1444a:	1e60      	subs	r0, r4, #1
   1444c:	2317      	movs	r3, #23
   1444e:	4343      	muls	r3, r0
   14450:	6810      	ldr	r0, [r2, #0]
   14452:	88b2      	ldrh	r2, [r6, #4]
   14454:	3314      	adds	r3, #20
   14456:	4418      	add	r0, r3
   14458:	f00f fe79 	bl	2414e <memcpy>
	XACT_SEG_RECV(seg);
   1445c:	2101      	movs	r1, #1
   1445e:	fa01 f304 	lsl.w	r3, r1, r4
   14462:	7c69      	ldrb	r1, [r5, #17]
   14464:	ea21 0103 	bic.w	r1, r1, r3
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   14468:	7cab      	ldrb	r3, [r5, #18]
	XACT_SEG_RECV(seg);
   1446a:	7469      	strb	r1, [r5, #17]
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   1446c:	429c      	cmp	r4, r3
   1446e:	d114      	bne.n	1449a <gen_prov_cont+0xe2>
   14470:	07cb      	lsls	r3, r1, #31
   14472:	d417      	bmi.n	144a4 <gen_prov_cont+0xec>
		expect_len = (link.rx.buf->len - 20U -
   14474:	696b      	ldr	r3, [r5, #20]
   14476:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   1447a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1447e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   14482:	791c      	ldrb	r4, [r3, #4]
		if (expect_len != buf->len) {
   14484:	88b3      	ldrh	r3, [r6, #4]
		expect_len = (link.rx.buf->len - 20U -
   14486:	3203      	adds	r2, #3
   14488:	4422      	add	r2, r4
   1448a:	b2d2      	uxtb	r2, r2
		if (expect_len != buf->len) {
   1448c:	429a      	cmp	r2, r3
   1448e:	d004      	beq.n	1449a <gen_prov_cont+0xe2>
			BT_ERR("Incorrect last seg len: %u != %u", expect_len,
   14490:	2145      	movs	r1, #69	; 0x45
   14492:	4808      	ldr	r0, [pc, #32]	; (144b4 <gen_prov_cont+0xfc>)
   14494:	f00d fd19 	bl	21eca <printk>
   14498:	e7c4      	b.n	14424 <gen_prov_cont+0x6c>
	if (!link.rx.seg) {
   1449a:	b919      	cbnz	r1, 144a4 <gen_prov_cont+0xec>
}
   1449c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   144a0:	f7ff bf50 	b.w	14344 <prov_msg_recv>
}
   144a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   144a8:	200002b8 	.word	0x200002b8
   144ac:	0002eb08 	.word	0x0002eb08
   144b0:	0002ead7 	.word	0x0002ead7
   144b4:	0002eb26 	.word	0x0002eb26

000144b8 <send_reliable>:
{
   144b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   144ba:	f014 f9d6 	bl	2886a <z_impl_k_uptime_ticks>
   144be:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   144c2:	fba0 6705 	umull	r6, r7, r0, r5
   144c6:	fb05 7701 	mla	r7, r5, r1, r7
	link.tx.start = k_uptime_get();
   144ca:	4c0f      	ldr	r4, [pc, #60]	; (14508 <send_reliable+0x50>)
   144cc:	0bf2      	lsrs	r2, r6, #15
   144ce:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
   144d2:	0bfb      	lsrs	r3, r7, #15
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   144d4:	4e0d      	ldr	r6, [pc, #52]	; (1450c <send_reliable+0x54>)
	link.tx.start = k_uptime_get();
   144d6:	e9c4 2306 	strd	r2, r3, [r4, #24]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   144da:	2500      	movs	r5, #0
   144dc:	3424      	adds	r4, #36	; 0x24
		struct net_buf *buf = link.tx.buf[i];
   144de:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   144e2:	b178      	cbz	r0, 14504 <send_reliable+0x4c>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   144e4:	3501      	adds	r5, #1
   144e6:	2d03      	cmp	r5, #3
			bt_mesh_adv_send(buf, NULL, NULL);
   144e8:	f04f 0200 	mov.w	r2, #0
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   144ec:	d005      	beq.n	144fa <send_reliable+0x42>
   144ee:	6823      	ldr	r3, [r4, #0]
   144f0:	b11b      	cbz	r3, 144fa <send_reliable+0x42>
			bt_mesh_adv_send(buf, NULL, NULL);
   144f2:	4611      	mov	r1, r2
   144f4:	f7f7 f8e2 	bl	b6bc <bt_mesh_adv_send>
   144f8:	e7f1      	b.n	144de <send_reliable+0x26>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   144fa:	4631      	mov	r1, r6
   144fc:	f7f7 f8de 	bl	b6bc <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   14500:	2d03      	cmp	r5, #3
   14502:	d1ec      	bne.n	144de <send_reliable+0x26>
}
   14504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14506:	bf00      	nop
   14508:	200002b8 	.word	0x200002b8
   1450c:	200007a8 	.word	0x200007a8

00014510 <bearer_ctl_send>:
{
   14510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14514:	461c      	mov	r4, r3
   14516:	4606      	mov	r6, r0
   14518:	4688      	mov	r8, r1
   1451a:	4691      	mov	r9, r2
	prov_clear_tx();
   1451c:	f7ff fd6e 	bl	13ffc <prov_clear_tx>
   14520:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   14524:	2300      	movs	r3, #0
   14526:	491c      	ldr	r1, [pc, #112]	; (14598 <bearer_ctl_send+0x88>)
   14528:	481c      	ldr	r0, [pc, #112]	; (1459c <bearer_ctl_send+0x8c>)
   1452a:	f00b fe15 	bl	20158 <k_delayed_work_submit_to_queue>
	buf = adv_buf_create(reliable ? RETRANSMITS_RELIABLE :
   1452e:	2c00      	cmp	r4, #0
   14530:	bf0c      	ite	eq
   14532:	2002      	moveq	r0, #2
   14534:	2000      	movne	r0, #0
   14536:	f7ff fd6b 	bl	14010 <adv_buf_create>
	if (!buf) {
   1453a:	4605      	mov	r5, r0
   1453c:	b348      	cbz	r0, 14592 <bearer_ctl_send+0x82>
	net_buf_add_be32(buf, link.id);
   1453e:	f8df a064 	ldr.w	sl, [pc, #100]	; 145a4 <bearer_ctl_send+0x94>
	net_buf_simple_add_be32(&buf->b, val);
   14542:	f100 0708 	add.w	r7, r0, #8
   14546:	f8da 1000 	ldr.w	r1, [sl]
   1454a:	4638      	mov	r0, r7
   1454c:	f013 fd40 	bl	27fd0 <net_buf_simple_add_be32>
	net_buf_add_u8(buf, 0x00);
   14550:	2100      	movs	r1, #0
   14552:	4628      	mov	r0, r5
   14554:	f012 fa9b 	bl	26a8e <net_buf_add_u8>
	net_buf_add_u8(buf, GPC_CTL(op));
   14558:	00b1      	lsls	r1, r6, #2
   1455a:	f041 0103 	orr.w	r1, r1, #3
   1455e:	b2c9      	uxtb	r1, r1
   14560:	4628      	mov	r0, r5
   14562:	f012 fa94 	bl	26a8e <net_buf_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14566:	464a      	mov	r2, r9
   14568:	4641      	mov	r1, r8
   1456a:	4638      	mov	r0, r7
   1456c:	f013 fcff 	bl	27f6e <net_buf_simple_add_mem>
	if (reliable) {
   14570:	b134      	cbz	r4, 14580 <bearer_ctl_send+0x70>
		link.tx.buf[0] = buf;
   14572:	f8ca 5024 	str.w	r5, [sl, #36]	; 0x24
		send_reliable();
   14576:	f7ff ff9f 	bl	144b8 <send_reliable>
	return 0;
   1457a:	2000      	movs	r0, #0
}
   1457c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   14580:	4628      	mov	r0, r5
   14582:	4622      	mov	r2, r4
   14584:	4906      	ldr	r1, [pc, #24]	; (145a0 <bearer_ctl_send+0x90>)
   14586:	f7f7 f899 	bl	b6bc <bt_mesh_adv_send>
		net_buf_unref(buf);
   1458a:	4628      	mov	r0, r5
   1458c:	f008 f96c 	bl	1c868 <net_buf_unref>
   14590:	e7f3      	b.n	1457a <bearer_ctl_send+0x6a>
		return -ENOBUFS;
   14592:	f06f 0036 	mvn.w	r0, #54	; 0x36
   14596:	e7f1      	b.n	1457c <bearer_ctl_send+0x6c>
   14598:	20000320 	.word	0x20000320
   1459c:	20002170 	.word	0x20002170
   145a0:	200007a8 	.word	0x200007a8
   145a4:	200002b8 	.word	0x200002b8

000145a8 <gen_prov_ctl>:
{
   145a8:	b570      	push	{r4, r5, r6, lr}
	switch (BEARER_CTL(rx->gpc)) {
   145aa:	7942      	ldrb	r2, [r0, #5]
   145ac:	0892      	lsrs	r2, r2, #2
   145ae:	2a01      	cmp	r2, #1
{
   145b0:	4604      	mov	r4, r0
	switch (BEARER_CTL(rx->gpc)) {
   145b2:	d04c      	beq.n	1464e <gen_prov_ctl+0xa6>
   145b4:	b255      	sxtb	r5, r2
   145b6:	b125      	cbz	r5, 145c2 <gen_prov_ctl+0x1a>
   145b8:	2a02      	cmp	r2, #2
   145ba:	d063      	beq.n	14684 <gen_prov_ctl+0xdc>
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   145bc:	2145      	movs	r1, #69	; 0x45
   145be:	4839      	ldr	r0, [pc, #228]	; (146a4 <gen_prov_ctl+0xfc>)
   145c0:	e004      	b.n	145cc <gen_prov_ctl+0x24>
	if (buf->len < 16) {
   145c2:	888a      	ldrh	r2, [r1, #4]
   145c4:	2a0f      	cmp	r2, #15
   145c6:	d805      	bhi.n	145d4 <gen_prov_ctl+0x2c>
		BT_ERR("Too short bearer open message (len %u)", buf->len);
   145c8:	4837      	ldr	r0, [pc, #220]	; (146a8 <gen_prov_ctl+0x100>)
   145ca:	2145      	movs	r1, #69	; 0x45
}
   145cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   145d0:	f00d bc7b 	b.w	21eca <printk>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   145d4:	4628      	mov	r0, r5
   145d6:	f7ff fd2f 	bl	14038 <atomic_test_bit.constprop.16>
   145da:	b160      	cbz	r0, 145f6 <gen_prov_ctl+0x4e>
		if (link.id == rx->link_id) {
   145dc:	4b33      	ldr	r3, [pc, #204]	; (146ac <gen_prov_ctl+0x104>)
   145de:	681a      	ldr	r2, [r3, #0]
   145e0:	6823      	ldr	r3, [r4, #0]
   145e2:	429a      	cmp	r2, r3
   145e4:	d15c      	bne.n	146a0 <gen_prov_ctl+0xf8>
			bearer_ctl_send(LINK_ACK, NULL, 0, false);
   145e6:	462b      	mov	r3, r5
   145e8:	462a      	mov	r2, r5
   145ea:	4629      	mov	r1, r5
   145ec:	2001      	movs	r0, #1
}
   145ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bearer_ctl_send(LINK_ACK, NULL, 0, false);
   145f2:	f7ff bf8d 	b.w	14510 <bearer_ctl_send>
	if (memcmp(buf->data, bt_mesh_prov_get()->uuid, 16)) {
   145f6:	680d      	ldr	r5, [r1, #0]
   145f8:	f7ff f89e 	bl	13738 <bt_mesh_prov_get>
   145fc:	2210      	movs	r2, #16
   145fe:	6801      	ldr	r1, [r0, #0]
   14600:	4628      	mov	r0, r5
   14602:	f00f fd7d 	bl	24100 <memcmp>
   14606:	4603      	mov	r3, r0
   14608:	2800      	cmp	r0, #0
   1460a:	d149      	bne.n	146a0 <gen_prov_ctl+0xf8>
	link.id = rx->link_id;
   1460c:	6821      	ldr	r1, [r4, #0]
   1460e:	4c27      	ldr	r4, [pc, #156]	; (146ac <gen_prov_ctl+0x104>)
   14610:	4622      	mov	r2, r4
   14612:	f842 1b04 	str.w	r1, [r2], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14616:	f3bf 8f5b 	dmb	ish
   1461a:	e852 1f00 	ldrex	r1, [r2]
   1461e:	f041 0101 	orr.w	r1, r1, #1
   14622:	e842 1000 	strex	r0, r1, [r2]
   14626:	2800      	cmp	r0, #0
   14628:	d1f7      	bne.n	1461a <gen_prov_ctl+0x72>
   1462a:	f3bf 8f5b 	dmb	ish
	net_buf_simple_reset(link.rx.buf);
   1462e:	6962      	ldr	r2, [r4, #20]
	buf->data = buf->__buf;
   14630:	6891      	ldr	r1, [r2, #8]
   14632:	6011      	str	r1, [r2, #0]
	buf->len  = 0U;
   14634:	8093      	strh	r3, [r2, #4]
	bearer_ctl_send(LINK_ACK, NULL, 0, false);
   14636:	4619      	mov	r1, r3
   14638:	461a      	mov	r2, r3
   1463a:	2001      	movs	r0, #1
   1463c:	f7ff ff68 	bl	14510 <bearer_ctl_send>
		link.cb->link_opened(&pb_adv, link.cb_data);
   14640:	68a3      	ldr	r3, [r4, #8]
   14642:	68e1      	ldr	r1, [r4, #12]
   14644:	681b      	ldr	r3, [r3, #0]
   14646:	481a      	ldr	r0, [pc, #104]	; (146b0 <gen_prov_ctl+0x108>)
}
   14648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		link.cb->link_opened(&pb_adv, link.cb_data);
   1464c:	4718      	bx	r3
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   1464e:	2000      	movs	r0, #0
   14650:	f7ff fcf2 	bl	14038 <atomic_test_bit.constprop.16>
   14654:	b320      	cbz	r0, 146a0 <gen_prov_ctl+0xf8>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   14656:	2005      	movs	r0, #5
   14658:	f7ff fcee 	bl	14038 <atomic_test_bit.constprop.16>
   1465c:	b300      	cbz	r0, 146a0 <gen_prov_ctl+0xf8>
   1465e:	f3bf 8f5b 	dmb	ish
   14662:	4c12      	ldr	r4, [pc, #72]	; (146ac <gen_prov_ctl+0x104>)
   14664:	1d23      	adds	r3, r4, #4
   14666:	e853 2f00 	ldrex	r2, [r3]
   1466a:	f042 0102 	orr.w	r1, r2, #2
   1466e:	e843 1000 	strex	r0, r1, [r3]
   14672:	2800      	cmp	r0, #0
   14674:	d1f7      	bne.n	14666 <gen_prov_ctl+0xbe>
   14676:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACK_RECVD)) {
   1467a:	0793      	lsls	r3, r2, #30
   1467c:	d410      	bmi.n	146a0 <gen_prov_ctl+0xf8>
		prov_clear_tx();
   1467e:	f7ff fcbd 	bl	13ffc <prov_clear_tx>
   14682:	e7dd      	b.n	14640 <gen_prov_ctl+0x98>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   14684:	2000      	movs	r0, #0
   14686:	f7ff fcd7 	bl	14038 <atomic_test_bit.constprop.16>
   1468a:	b148      	cbz	r0, 146a0 <gen_prov_ctl+0xf8>
	if (buf->len != 1) {
   1468c:	888b      	ldrh	r3, [r1, #4]
   1468e:	2b01      	cmp	r3, #1
   14690:	d106      	bne.n	146a0 <gen_prov_ctl+0xf8>
	close_link(net_buf_simple_pull_u8(buf));
   14692:	4608      	mov	r0, r1
   14694:	f013 fc3b 	bl	27f0e <net_buf_simple_pull_u8>
}
   14698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	close_link(net_buf_simple_pull_u8(buf));
   1469c:	f7ff bd32 	b.w	14104 <close_link>
}
   146a0:	bd70      	pop	{r4, r5, r6, pc}
   146a2:	bf00      	nop
   146a4:	0002eb78 	.word	0x0002eb78
   146a8:	0002eb4c 	.word	0x0002eb4c
   146ac:	200002b8 	.word	0x200002b8
   146b0:	00029910 	.word	0x00029910

000146b4 <prov_link_close>:

static void prov_link_close(enum prov_bearer_link_status status)
{
   146b4:	b507      	push	{r0, r1, r2, lr}
   146b6:	4b0d      	ldr	r3, [pc, #52]	; (146ec <prov_link_close+0x38>)
   146b8:	f88d 0007 	strb.w	r0, [sp, #7]
   146bc:	f3bf 8f5b 	dmb	ish
   146c0:	e853 2f00 	ldrex	r2, [r3]
   146c4:	f042 0104 	orr.w	r1, r2, #4
   146c8:	e843 1000 	strex	r0, r1, [r3]
   146cc:	2800      	cmp	r0, #0
   146ce:	d1f7      	bne.n	146c0 <prov_link_close+0xc>
   146d0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_CLOSING)) {
   146d4:	0753      	lsls	r3, r2, #29
   146d6:	d406      	bmi.n	146e6 <prov_link_close+0x32>
		return;
	}

	bearer_ctl_send(LINK_CLOSE, &status, 1, true);
   146d8:	2301      	movs	r3, #1
   146da:	461a      	mov	r2, r3
   146dc:	f10d 0107 	add.w	r1, sp, #7
   146e0:	2002      	movs	r0, #2
   146e2:	f7ff ff15 	bl	14510 <bearer_ctl_send>
}
   146e6:	b003      	add	sp, #12
   146e8:	f85d fb04 	ldr.w	pc, [sp], #4
   146ec:	200002bc 	.word	0x200002bc

000146f0 <prov_link_open>:
{
   146f0:	b570      	push	{r4, r5, r6, lr}
   146f2:	4606      	mov	r6, r0
	err = bt_mesh_adv_enable();
   146f4:	f7fd fbf4 	bl	11ee0 <bt_mesh_adv_enable>
	if (err) {
   146f8:	4604      	mov	r4, r0
   146fa:	b128      	cbz	r0, 14708 <prov_link_open+0x18>
		BT_ERR("Failed enabling advertiser");
   146fc:	2145      	movs	r1, #69	; 0x45
   146fe:	481e      	ldr	r0, [pc, #120]	; (14778 <prov_link_open+0x88>)
   14700:	f00d fbe3 	bl	21eca <printk>
}
   14704:	4620      	mov	r0, r4
   14706:	bd70      	pop	{r4, r5, r6, pc}
   14708:	4d1c      	ldr	r5, [pc, #112]	; (1477c <prov_link_open+0x8c>)
   1470a:	f3bf 8f5b 	dmb	ish
   1470e:	1d2b      	adds	r3, r5, #4
   14710:	e853 4f00 	ldrex	r4, [r3]
   14714:	f044 0201 	orr.w	r2, r4, #1
   14718:	e843 2100 	strex	r1, r2, [r3]
   1471c:	2900      	cmp	r1, #0
   1471e:	d1f7      	bne.n	14710 <prov_link_open+0x20>
   14720:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACTIVE)) {
   14724:	f014 0401 	ands.w	r4, r4, #1
   14728:	d123      	bne.n	14772 <prov_link_open+0x82>
   1472a:	f3bf 8f5b 	dmb	ish
   1472e:	e853 2f00 	ldrex	r2, [r3]
   14732:	f042 0220 	orr.w	r2, r2, #32
   14736:	e843 2100 	strex	r1, r2, [r3]
   1473a:	2900      	cmp	r1, #0
   1473c:	d1f7      	bne.n	1472e <prov_link_open+0x3e>
   1473e:	f3bf 8f5b 	dmb	ish
	bt_rand(&link.id, sizeof(link.id));
   14742:	2104      	movs	r1, #4
   14744:	4628      	mov	r0, r5
   14746:	f012 fde6 	bl	27316 <bt_rand>
	link.tx.id = XACT_ID_MAX;
   1474a:	237f      	movs	r3, #127	; 0x7f
   1474c:	f885 3020 	strb.w	r3, [r5, #32]
	link.rx.id = XACT_ID_NVAL;
   14750:	23ff      	movs	r3, #255	; 0xff
   14752:	742b      	strb	r3, [r5, #16]
	link.cb = cb;
   14754:	9b04      	ldr	r3, [sp, #16]
   14756:	60ab      	str	r3, [r5, #8]
	link.cb_data = cb_data;
   14758:	9b05      	ldr	r3, [sp, #20]
   1475a:	60eb      	str	r3, [r5, #12]
	net_buf_simple_reset(link.rx.buf);
   1475c:	696b      	ldr	r3, [r5, #20]
	buf->data = buf->__buf;
   1475e:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   14760:	809c      	strh	r4, [r3, #4]
	buf->data = buf->__buf;
   14762:	601a      	str	r2, [r3, #0]
	bearer_ctl_send(LINK_OPEN, uuid, 16, true);
   14764:	4631      	mov	r1, r6
   14766:	2301      	movs	r3, #1
   14768:	2210      	movs	r2, #16
   1476a:	4620      	mov	r0, r4
   1476c:	f7ff fed0 	bl	14510 <bearer_ctl_send>
	return 0;
   14770:	e7c8      	b.n	14704 <prov_link_open+0x14>
		return -EBUSY;
   14772:	f06f 040f 	mvn.w	r4, #15
   14776:	e7c5      	b.n	14704 <prov_link_open+0x14>
   14778:	0002bdec 	.word	0x0002bdec
   1477c:	200002b8 	.word	0x200002b8

00014780 <prov_send_adv>:
{
   14780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14784:	4c4e      	ldr	r4, [pc, #312]	; (148c0 <prov_send_adv+0x140>)
   14786:	4605      	mov	r5, r0
   14788:	4689      	mov	r9, r1
   1478a:	4690      	mov	r8, r2
	prov_clear_tx();
   1478c:	f7ff fc36 	bl	13ffc <prov_clear_tx>
   14790:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   14794:	2300      	movs	r3, #0
   14796:	f104 0168 	add.w	r1, r4, #104	; 0x68
   1479a:	484a      	ldr	r0, [pc, #296]	; (148c4 <prov_send_adv+0x144>)
   1479c:	f00b fcdc 	bl	20158 <k_delayed_work_submit_to_queue>
	start = adv_buf_create(RETRANSMITS_RELIABLE);
   147a0:	2000      	movs	r0, #0
   147a2:	f7ff fc35 	bl	14010 <adv_buf_create>
	if (!start) {
   147a6:	4606      	mov	r6, r0
   147a8:	2800      	cmp	r0, #0
   147aa:	d061      	beq.n	14870 <prov_send_adv+0xf0>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   147ac:	f994 2020 	ldrsb.w	r2, [r4, #32]
	net_buf_simple_add_be32(&buf->b, val);
   147b0:	6821      	ldr	r1, [r4, #0]
   147b2:	1c53      	adds	r3, r2, #1
   147b4:	f100 0708 	add.w	r7, r0, #8
   147b8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   147bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   147c0:	4313      	orrs	r3, r2
   147c2:	4638      	mov	r0, r7
	link.tx.id = next_transaction_id(link.tx.id);
   147c4:	f884 3020 	strb.w	r3, [r4, #32]
   147c8:	f013 fc02 	bl	27fd0 <net_buf_simple_add_be32>
	net_buf_add_u8(start, link.tx.id);
   147cc:	f894 1020 	ldrb.w	r1, [r4, #32]
   147d0:	4630      	mov	r0, r6
   147d2:	f012 f95c 	bl	26a8e <net_buf_add_u8>
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   147d6:	88ab      	ldrh	r3, [r5, #4]
	if (len <= START_PAYLOAD_MAX) {
   147d8:	b2da      	uxtb	r2, r3
   147da:	2a14      	cmp	r2, #20
	len -= START_PAYLOAD_MAX;
   147dc:	bf81      	itttt	hi
   147de:	f1a3 0114 	subhi.w	r1, r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   147e2:	b2c9      	uxtbhi	r1, r1
   147e4:	2317      	movhi	r3, #23
   147e6:	fbb1 f1f3 	udivhi	r1, r1, r3
   147ea:	bf86      	itte	hi
   147ec:	3101      	addhi	r1, #1
   147ee:	b2c9      	uxtbhi	r1, r1
		return 0;
   147f0:	2100      	movls	r1, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   147f2:	0089      	lsls	r1, r1, #2
   147f4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   147f8:	4630      	mov	r0, r6
   147fa:	f012 f948 	bl	26a8e <net_buf_add_u8>
	net_buf_simple_add_be16(&buf->b, val);
   147fe:	4638      	mov	r0, r7
   14800:	88a9      	ldrh	r1, [r5, #4]
   14802:	f013 fbd0 	bl	27fa6 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
   14806:	7929      	ldrb	r1, [r5, #4]
   14808:	6828      	ldr	r0, [r5, #0]
   1480a:	f7fa fd09 	bl	f220 <bt_mesh_fcs_calc>
   1480e:	4601      	mov	r1, r0
   14810:	4630      	mov	r0, r6
   14812:	f012 f93c 	bl	26a8e <net_buf_add_u8>
	link.tx.buf[0] = start;
   14816:	6266      	str	r6, [r4, #36]	; 0x24
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
   14818:	88ae      	ldrh	r6, [r5, #4]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1481a:	6829      	ldr	r1, [r5, #0]
	net_buf_add_mem(start, msg->data, seg_len);
   1481c:	2e14      	cmp	r6, #20
   1481e:	bf28      	it	cs
   14820:	2614      	movcs	r6, #20
   14822:	4632      	mov	r2, r6
   14824:	4638      	mov	r0, r7
	link.tx.cb_data = cb_data;
   14826:	e9c4 980c 	strd	r9, r8, [r4, #48]	; 0x30
   1482a:	f013 fba0 	bl	27f6e <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
   1482e:	4631      	mov	r1, r6
   14830:	4628      	mov	r0, r5
   14832:	f008 f92f 	bl	1ca94 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   14836:	f8df 9094 	ldr.w	r9, [pc, #148]	; 148cc <prov_send_adv+0x14c>
   1483a:	2700      	movs	r7, #0
   1483c:	88ae      	ldrh	r6, [r5, #4]
   1483e:	b91e      	cbnz	r6, 14848 <prov_send_adv+0xc8>
	send_reliable();
   14840:	f7ff fe3a 	bl	144b8 <send_reliable>
	return 0;
   14844:	4630      	mov	r0, r6
   14846:	e009      	b.n	1485c <prov_send_adv+0xdc>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
   14848:	2f08      	cmp	r7, #8
   1484a:	d109      	bne.n	14860 <prov_send_adv+0xe0>
			BT_ERR("Too big message");
   1484c:	481e      	ldr	r0, [pc, #120]	; (148c8 <prov_send_adv+0x148>)
   1484e:	2145      	movs	r1, #69	; 0x45
   14850:	f00d fb3b 	bl	21eca <printk>
			free_segments();
   14854:	f7ff fbbc 	bl	13fd0 <free_segments>
			return -E2BIG;
   14858:	f06f 0006 	mvn.w	r0, #6
}
   1485c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create(RETRANSMITS_RELIABLE);
   14860:	2000      	movs	r0, #0
   14862:	f7ff fbd5 	bl	14010 <adv_buf_create>
		if (!buf) {
   14866:	3704      	adds	r7, #4
   14868:	4606      	mov	r6, r0
   1486a:	b920      	cbnz	r0, 14876 <prov_send_adv+0xf6>
			free_segments();
   1486c:	f7ff fbb0 	bl	13fd0 <free_segments>
		return -ENOBUFS;
   14870:	f06f 0036 	mvn.w	r0, #54	; 0x36
   14874:	e7f2      	b.n	1485c <prov_send_adv+0xdc>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   14876:	f8b5 8004 	ldrh.w	r8, [r5, #4]
		link.tx.buf[seg_id] = buf;
   1487a:	f849 0b04 	str.w	r0, [r9], #4
	net_buf_simple_add_be32(&buf->b, val);
   1487e:	f100 0a08 	add.w	sl, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   14882:	f1b8 0f17 	cmp.w	r8, #23
   14886:	6821      	ldr	r1, [r4, #0]
   14888:	4650      	mov	r0, sl
   1488a:	bf28      	it	cs
   1488c:	f04f 0817 	movcs.w	r8, #23
   14890:	f013 fb9e 	bl	27fd0 <net_buf_simple_add_be32>
		net_buf_add_u8(buf, link.tx.id);
   14894:	f894 1020 	ldrb.w	r1, [r4, #32]
   14898:	4630      	mov	r0, r6
   1489a:	f012 f8f8 	bl	26a8e <net_buf_add_u8>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
   1489e:	f047 0102 	orr.w	r1, r7, #2
   148a2:	b2c9      	uxtb	r1, r1
   148a4:	4630      	mov	r0, r6
   148a6:	f012 f8f2 	bl	26a8e <net_buf_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   148aa:	6829      	ldr	r1, [r5, #0]
   148ac:	4642      	mov	r2, r8
   148ae:	4650      	mov	r0, sl
   148b0:	f013 fb5d 	bl	27f6e <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
   148b4:	4641      	mov	r1, r8
   148b6:	4628      	mov	r0, r5
   148b8:	f008 f8ec 	bl	1ca94 <net_buf_simple_pull>
   148bc:	e7be      	b.n	1483c <prov_send_adv+0xbc>
   148be:	bf00      	nop
   148c0:	200002b8 	.word	0x200002b8
   148c4:	20002170 	.word	0x20002170
   148c8:	0002d481 	.word	0x0002d481
   148cc:	200002e0 	.word	0x200002e0

000148d0 <gen_prov_start>:
{
   148d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (rx->xact_id == link.rx.id) {
   148d4:	4b3f      	ldr	r3, [pc, #252]	; (149d4 <gen_prov_start+0x104>)
   148d6:	7902      	ldrb	r2, [r0, #4]
{
   148d8:	460d      	mov	r5, r1
	if (rx->xact_id == link.rx.id) {
   148da:	7c19      	ldrb	r1, [r3, #16]
   148dc:	428a      	cmp	r2, r1
{
   148de:	4606      	mov	r6, r0
   148e0:	461c      	mov	r4, r3
	if (rx->xact_id == link.rx.id) {
   148e2:	d10e      	bne.n	14902 <gen_prov_start+0x32>
		if (!link.rx.seg) {
   148e4:	7c5b      	ldrb	r3, [r3, #17]
   148e6:	b943      	cbnz	r3, 148fa <gen_prov_start+0x2a>
	return atomic_test_bit(link.flags, ADV_ACK_PENDING);
   148e8:	2004      	movs	r0, #4
   148ea:	f7ff fba5 	bl	14038 <atomic_test_bit.constprop.16>
			if (!ack_pending()) {
   148ee:	b930      	cbnz	r0, 148fe <gen_prov_start+0x2e>
				gen_prov_ack_send(rx->xact_id);
   148f0:	7930      	ldrb	r0, [r6, #4]
}
   148f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				gen_prov_ack_send(rx->xact_id);
   148f6:	f7ff bcd7 	b.w	142a8 <gen_prov_ack_send>
		if (!(link.rx.seg & BIT(0))) {
   148fa:	07da      	lsls	r2, r3, #31
   148fc:	d410      	bmi.n	14920 <gen_prov_start+0x50>
}
   148fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   14902:	b249      	sxtb	r1, r1
   14904:	1c4b      	adds	r3, r1, #1
   14906:	f003 007f 	and.w	r0, r3, #127	; 0x7f
   1490a:	f001 0380 	and.w	r3, r1, #128	; 0x80
   1490e:	4303      	orrs	r3, r0
	} else if (rx->xact_id != next_transaction_id(link.rx.id)) {
   14910:	429a      	cmp	r2, r3
   14912:	d005      	beq.n	14920 <gen_prov_start+0x50>
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
   14914:	2157      	movs	r1, #87	; 0x57
   14916:	4830      	ldr	r0, [pc, #192]	; (149d8 <gen_prov_start+0x108>)
}
   14918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
   1491c:	f00d bad5 	b.w	21eca <printk>
	net_buf_simple_reset(link.rx.buf);
   14920:	6967      	ldr	r7, [r4, #20]
	buf->len  = 0U;
   14922:	2300      	movs	r3, #0
   14924:	80bb      	strh	r3, [r7, #4]
	buf->data = buf->__buf;
   14926:	68bb      	ldr	r3, [r7, #8]
   14928:	603b      	str	r3, [r7, #0]
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
   1492a:	4628      	mov	r0, r5
   1492c:	f013 faff 	bl	27f2e <net_buf_simple_pull_be16>
   14930:	80b8      	strh	r0, [r7, #4]
	link.rx.id = rx->xact_id;
   14932:	7933      	ldrb	r3, [r6, #4]
   14934:	7423      	strb	r3, [r4, #16]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   14936:	4628      	mov	r0, r5
   14938:	f013 fae9 	bl	27f0e <net_buf_simple_pull_u8>
	if (link.rx.buf->len < 1) {
   1493c:	6963      	ldr	r3, [r4, #20]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   1493e:	74e0      	strb	r0, [r4, #19]
	if (link.rx.buf->len < 1) {
   14940:	889a      	ldrh	r2, [r3, #4]
   14942:	b922      	cbnz	r2, 1494e <gen_prov_start+0x7e>
		BT_ERR("Ignoring zero-length provisioning PDU");
   14944:	4825      	ldr	r0, [pc, #148]	; (149dc <gen_prov_start+0x10c>)
   14946:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Too small total length for multi-segment PDU");
   14948:	f00d fabf 	bl	21eca <printk>
		prov_failed(PROV_ERR_NVAL_FMT);
   1494c:	e006      	b.n	1495c <gen_prov_start+0x8c>
	if (link.rx.buf->len > link.rx.buf->size) {
   1494e:	88db      	ldrh	r3, [r3, #6]
   14950:	4293      	cmp	r3, r2
   14952:	d208      	bcs.n	14966 <gen_prov_start+0x96>
		BT_ERR("Too large provisioning PDU (%u bytes)",
   14954:	4822      	ldr	r0, [pc, #136]	; (149e0 <gen_prov_start+0x110>)
   14956:	2145      	movs	r1, #69	; 0x45
   14958:	f00d fab7 	bl	21eca <printk>
		prov_failed(PROV_ERR_NVAL_FMT);
   1495c:	2002      	movs	r0, #2
}
   1495e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
   14962:	f7ff bc87 	b.w	14274 <prov_failed>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20U) {
   14966:	7973      	ldrb	r3, [r6, #5]
   14968:	089b      	lsrs	r3, r3, #2
   1496a:	d004      	beq.n	14976 <gen_prov_start+0xa6>
   1496c:	2a14      	cmp	r2, #20
   1496e:	d802      	bhi.n	14976 <gen_prov_start+0xa6>
		BT_ERR("Too small total length for multi-segment PDU");
   14970:	2145      	movs	r1, #69	; 0x45
   14972:	481c      	ldr	r0, [pc, #112]	; (149e4 <gen_prov_start+0x114>)
   14974:	e7e8      	b.n	14948 <gen_prov_start+0x78>
	prov_clear_tx();
   14976:	f7ff fb41 	bl	13ffc <prov_clear_tx>
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   1497a:	7972      	ldrb	r2, [r6, #5]
	if ((link.rx.seg & BIT(0)) &&
   1497c:	7c61      	ldrb	r1, [r4, #17]
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   1497e:	0892      	lsrs	r2, r2, #2
	if ((link.rx.seg & BIT(0)) &&
   14980:	07cb      	lsls	r3, r1, #31
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   14982:	74a2      	strb	r2, [r4, #18]
	if ((link.rx.seg & BIT(0)) &&
   14984:	d50d      	bpl.n	149a2 <gen_prov_start+0xd2>
	    (find_msb_set((~link.rx.seg) & SEG_NVAL) - 1 > link.rx.last_seg)) {
   14986:	43cb      	mvns	r3, r1
	if (op == 0) {
   14988:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   1498c:	d005      	beq.n	1499a <gen_prov_start+0xca>
	return 32 - __builtin_clz(op);
   1498e:	fab3 f383 	clz	r3, r3
   14992:	f1c3 031f 	rsb	r3, r3, #31
	if ((link.rx.seg & BIT(0)) &&
   14996:	4293      	cmp	r3, r2
   14998:	d906      	bls.n	149a8 <gen_prov_start+0xd8>
		BT_ERR("Invalid segment index %u", seg);
   1499a:	22ff      	movs	r2, #255	; 0xff
   1499c:	2145      	movs	r1, #69	; 0x45
   1499e:	4812      	ldr	r0, [pc, #72]	; (149e8 <gen_prov_start+0x118>)
   149a0:	e7da      	b.n	14958 <gen_prov_start+0x88>
	uint8_t seg = SEG_NVAL;
   149a2:	2900      	cmp	r1, #0
   149a4:	bf08      	it	eq
   149a6:	21ff      	moveq	r1, #255	; 0xff
	link.rx.seg = seg & ((1 << (START_LAST_SEG(rx->gpc) + 1)) - 1);
   149a8:	3201      	adds	r2, #1
   149aa:	2301      	movs	r3, #1
   149ac:	4093      	lsls	r3, r2
   149ae:	3b01      	subs	r3, #1
   149b0:	400b      	ands	r3, r1
   149b2:	7463      	strb	r3, [r4, #17]
	memcpy(link.rx.buf->data, buf->data, buf->len);
   149b4:	6963      	ldr	r3, [r4, #20]
   149b6:	88aa      	ldrh	r2, [r5, #4]
   149b8:	6818      	ldr	r0, [r3, #0]
   149ba:	6829      	ldr	r1, [r5, #0]
   149bc:	f00f fbc7 	bl	2414e <memcpy>
	XACT_SEG_RECV(0);
   149c0:	7c63      	ldrb	r3, [r4, #17]
   149c2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   149c6:	7463      	strb	r3, [r4, #17]
	if (!link.rx.seg) {
   149c8:	2b00      	cmp	r3, #0
   149ca:	d198      	bne.n	148fe <gen_prov_start+0x2e>
}
   149cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   149d0:	f7ff bcb8 	b.w	14344 <prov_msg_recv>
   149d4:	200002b8 	.word	0x200002b8
   149d8:	0002eb9b 	.word	0x0002eb9b
   149dc:	0002ebc4 	.word	0x0002ebc4
   149e0:	0002ebef 	.word	0x0002ebef
   149e4:	0002ec1a 	.word	0x0002ec1a
   149e8:	0002eb08 	.word	0x0002eb08

000149ec <bt_mesh_pb_adv_recv>:
{
   149ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!link.cb) {
   149ee:	4d22      	ldr	r5, [pc, #136]	; (14a78 <bt_mesh_pb_adv_recv+0x8c>)
   149f0:	68ab      	ldr	r3, [r5, #8]
{
   149f2:	4604      	mov	r4, r0
	if (!link.cb) {
   149f4:	b133      	cbz	r3, 14a04 <bt_mesh_pb_adv_recv+0x18>
	if (buf->len < 6) {
   149f6:	8882      	ldrh	r2, [r0, #4]
   149f8:	2a05      	cmp	r2, #5
   149fa:	d805      	bhi.n	14a08 <bt_mesh_pb_adv_recv+0x1c>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   149fc:	481f      	ldr	r0, [pc, #124]	; (14a7c <bt_mesh_pb_adv_recv+0x90>)
   149fe:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   14a00:	f00d fa63 	bl	21eca <printk>
}
   14a04:	b003      	add	sp, #12
   14a06:	bd30      	pop	{r4, r5, pc}
	rx.link_id = net_buf_simple_pull_be32(buf);
   14a08:	f013 fa9c 	bl	27f44 <net_buf_simple_pull_be32>
   14a0c:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
   14a0e:	4620      	mov	r0, r4
   14a10:	f013 fa7d 	bl	27f0e <net_buf_simple_pull_u8>
   14a14:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
   14a18:	4620      	mov	r0, r4
   14a1a:	f013 fa78 	bl	27f0e <net_buf_simple_pull_u8>
   14a1e:	f88d 0005 	strb.w	r0, [sp, #5]
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE) && link.id != rx.link_id) {
   14a22:	2000      	movs	r0, #0
   14a24:	f7ff fb08 	bl	14038 <atomic_test_bit.constprop.16>
   14a28:	b118      	cbz	r0, 14a32 <bt_mesh_pb_adv_recv+0x46>
   14a2a:	682a      	ldr	r2, [r5, #0]
   14a2c:	9b00      	ldr	r3, [sp, #0]
   14a2e:	429a      	cmp	r2, r3
   14a30:	d1e8      	bne.n	14a04 <bt_mesh_pb_adv_recv+0x18>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
   14a32:	f89d 2005 	ldrb.w	r2, [sp, #5]
   14a36:	4912      	ldr	r1, [pc, #72]	; (14a80 <bt_mesh_pb_adv_recv+0x94>)
   14a38:	88a0      	ldrh	r0, [r4, #4]
   14a3a:	f002 0203 	and.w	r2, r2, #3
   14a3e:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   14a42:	795b      	ldrb	r3, [r3, #5]
   14a44:	4298      	cmp	r0, r3
   14a46:	d202      	bcs.n	14a4e <bt_mesh_pb_adv_recv+0x62>
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   14a48:	2145      	movs	r1, #69	; 0x45
   14a4a:	480e      	ldr	r0, [pc, #56]	; (14a84 <bt_mesh_pb_adv_recv+0x98>)
   14a4c:	e7d8      	b.n	14a00 <bt_mesh_pb_adv_recv+0x14>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   14a4e:	2000      	movs	r0, #0
   14a50:	f7ff faf2 	bl	14038 <atomic_test_bit.constprop.16>
   14a54:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14a58:	b930      	cbnz	r0, 14a68 <bt_mesh_pb_adv_recv+0x7c>
	    gen_prov[GPCF(rx->gpc)].require_link) {
   14a5a:	f003 0203 	and.w	r2, r3, #3
   14a5e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   14a62:	7912      	ldrb	r2, [r2, #4]
   14a64:	2a00      	cmp	r2, #0
   14a66:	d1cd      	bne.n	14a04 <bt_mesh_pb_adv_recv+0x18>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
   14a68:	f003 0303 	and.w	r3, r3, #3
   14a6c:	4668      	mov	r0, sp
   14a6e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   14a72:	4621      	mov	r1, r4
   14a74:	4798      	blx	r3
   14a76:	e7c5      	b.n	14a04 <bt_mesh_pb_adv_recv+0x18>
   14a78:	200002b8 	.word	0x200002b8
   14a7c:	0002ea88 	.word	0x0002ea88
   14a80:	000298f0 	.word	0x000298f0
   14a84:	0002eab4 	.word	0x0002eab4

00014a88 <pb_adv_init>:

void pb_adv_init(void)
{
   14a88:	b538      	push	{r3, r4, r5, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   14a8a:	4c09      	ldr	r4, [pc, #36]	; (14ab0 <pb_adv_init+0x28>)
   14a8c:	2530      	movs	r5, #48	; 0x30
   14a8e:	462a      	mov	r2, r5
   14a90:	2100      	movs	r1, #0
   14a92:	f104 0068 	add.w	r0, r4, #104	; 0x68
   14a96:	f00f fb84 	bl	241a2 <memset>
   14a9a:	4b06      	ldr	r3, [pc, #24]	; (14ab4 <pb_adv_init+0x2c>)
   14a9c:	66e3      	str	r3, [r4, #108]	; 0x6c
   14a9e:	462a      	mov	r2, r5
   14aa0:	2100      	movs	r1, #0
   14aa2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14aa6:	f00f fb7c 	bl	241a2 <memset>
   14aaa:	4b03      	ldr	r3, [pc, #12]	; (14ab8 <pb_adv_init+0x30>)
   14aac:	63e3      	str	r3, [r4, #60]	; 0x3c
	k_delayed_work_init(&link.prot_timer, protocol_timeout);
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
}
   14aae:	bd38      	pop	{r3, r4, r5, pc}
   14ab0:	200002b8 	.word	0x200002b8
   14ab4:	000141f1 	.word	0x000141f1
   14ab8:	00014129 	.word	0x00014129

00014abc <reset_state>:
};

static struct prov_link link;

static void reset_state(void)
{
   14abc:	b510      	push	{r4, lr}
	if (link.conn) {
   14abe:	4c07      	ldr	r4, [pc, #28]	; (14adc <reset_state+0x20>)
   14ac0:	6820      	ldr	r0, [r4, #0]
   14ac2:	b118      	cbz	r0, 14acc <reset_state+0x10>
		bt_conn_unref(link.conn);
   14ac4:	f7f3 fa5c 	bl	7f80 <bt_conn_unref>
		link.conn = NULL;
   14ac8:	2300      	movs	r3, #0
   14aca:	6023      	str	r3, [r4, #0]
	}

	k_delayed_work_cancel(&link.prot_timer);
   14acc:	4804      	ldr	r0, [pc, #16]	; (14ae0 <reset_state+0x24>)
   14ace:	f00b fbb3 	bl	20238 <k_delayed_work_cancel>

	link.rx_buf = bt_mesh_proxy_get_buf();
   14ad2:	f000 fc03 	bl	152dc <bt_mesh_proxy_get_buf>
   14ad6:	60e0      	str	r0, [r4, #12]
}
   14ad8:	bd10      	pop	{r4, pc}
   14ada:	bf00      	nop
   14adc:	20001ef0 	.word	0x20001ef0
   14ae0:	20001f00 	.word	0x20001f00

00014ae4 <link_closed>:

static void link_closed(enum prov_bearer_link_status status)
{
   14ae4:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
   14ae6:	4b06      	ldr	r3, [pc, #24]	; (14b00 <link_closed+0x1c>)
	void *cb_data = link.cb_data;
   14ae8:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
{
   14aec:	4605      	mov	r5, r0

	reset_state();
   14aee:	f7ff ffe5 	bl	14abc <reset_state>

	cb->link_closed(&pb_gatt, cb_data, status);
   14af2:	6873      	ldr	r3, [r6, #4]
   14af4:	4803      	ldr	r0, [pc, #12]	; (14b04 <link_closed+0x20>)
   14af6:	462a      	mov	r2, r5
   14af8:	4621      	mov	r1, r4
}
   14afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_gatt, cb_data, status);
   14afe:	4718      	bx	r3
   14b00:	20001ef0 	.word	0x20001ef0
   14b04:	00029928 	.word	0x00029928

00014b08 <link_accept>:

	return 0;
}

static int link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   14b08:	b538      	push	{r3, r4, r5, lr}
   14b0a:	460c      	mov	r4, r1
   14b0c:	4605      	mov	r5, r0
	bt_mesh_proxy_prov_enable();
   14b0e:	f000 fbef 	bl	152f0 <bt_mesh_proxy_prov_enable>
	bt_mesh_adv_update();
   14b12:	f7fd f9b7 	bl	11e84 <bt_mesh_adv_update>

	link.cb = cb;
   14b16:	4b02      	ldr	r3, [pc, #8]	; (14b20 <link_accept+0x18>)
	link.cb_data = cb_data;

	return 0;
}
   14b18:	2000      	movs	r0, #0
	link.cb_data = cb_data;
   14b1a:	e9c3 5401 	strd	r5, r4, [r3, #4]
}
   14b1e:	bd38      	pop	{r3, r4, r5, pc}
   14b20:	20001ef0 	.word	0x20001ef0

00014b24 <buf_send>:

static int buf_send(struct net_buf_simple *buf, prov_bearer_send_complete_t cb,
		    void *cb_data)
{
   14b24:	b538      	push	{r3, r4, r5, lr}
	if (!link.conn) {
   14b26:	4c0b      	ldr	r4, [pc, #44]	; (14b54 <buf_send+0x30>)
   14b28:	6823      	ldr	r3, [r4, #0]
{
   14b2a:	4605      	mov	r5, r0
	if (!link.conn) {
   14b2c:	b173      	cbz	r3, 14b4c <buf_send+0x28>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   14b2e:	f104 0110 	add.w	r1, r4, #16
   14b32:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   14b36:	2300      	movs	r3, #0
   14b38:	4807      	ldr	r0, [pc, #28]	; (14b58 <buf_send+0x34>)
   14b3a:	f00b fb0d 	bl	20158 <k_delayed_work_submit_to_queue>
		return -ENOTCONN;
	}

	k_delayed_work_submit(&link.prot_timer, PROTOCOL_TIMEOUT);

	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, buf);
   14b3e:	462a      	mov	r2, r5
   14b40:	6820      	ldr	r0, [r4, #0]
   14b42:	2103      	movs	r1, #3
}
   14b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, buf);
   14b48:	f000 bc88 	b.w	1545c <bt_mesh_proxy_send>
}
   14b4c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14b50:	bd38      	pop	{r3, r4, r5, pc}
   14b52:	bf00      	nop
   14b54:	20001ef0 	.word	0x20001ef0
   14b58:	20002170 	.word	0x20002170

00014b5c <bt_mesh_pb_gatt_recv>:
{
   14b5c:	b538      	push	{r3, r4, r5, lr}
	if (link.conn != conn || !link.cb) {
   14b5e:	4c13      	ldr	r4, [pc, #76]	; (14bac <bt_mesh_pb_gatt_recv+0x50>)
   14b60:	6823      	ldr	r3, [r4, #0]
   14b62:	4283      	cmp	r3, r0
{
   14b64:	460d      	mov	r5, r1
	if (link.conn != conn || !link.cb) {
   14b66:	d101      	bne.n	14b6c <bt_mesh_pb_gatt_recv+0x10>
   14b68:	6863      	ldr	r3, [r4, #4]
   14b6a:	b933      	cbnz	r3, 14b7a <bt_mesh_pb_gatt_recv+0x1e>
		BT_WARN("Data for unexpected connection");
   14b6c:	4810      	ldr	r0, [pc, #64]	; (14bb0 <bt_mesh_pb_gatt_recv+0x54>)
   14b6e:	2157      	movs	r1, #87	; 0x57
   14b70:	f00d f9ab 	bl	21eca <printk>
		return -ENOTCONN;
   14b74:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   14b78:	bd38      	pop	{r3, r4, r5, pc}
	if (buf->len < 1) {
   14b7a:	888a      	ldrh	r2, [r1, #4]
   14b7c:	b932      	cbnz	r2, 14b8c <bt_mesh_pb_gatt_recv+0x30>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   14b7e:	480d      	ldr	r0, [pc, #52]	; (14bb4 <bt_mesh_pb_gatt_recv+0x58>)
   14b80:	2157      	movs	r1, #87	; 0x57
   14b82:	f00d f9a2 	bl	21eca <printk>
		return -EINVAL;
   14b86:	f06f 0015 	mvn.w	r0, #21
   14b8a:	e7f5      	b.n	14b78 <bt_mesh_pb_gatt_recv+0x1c>
   14b8c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   14b90:	2300      	movs	r3, #0
   14b92:	f104 0110 	add.w	r1, r4, #16
   14b96:	4808      	ldr	r0, [pc, #32]	; (14bb8 <bt_mesh_pb_gatt_recv+0x5c>)
   14b98:	f00b fade 	bl	20158 <k_delayed_work_submit_to_queue>
	link.cb->recv(&pb_gatt, link.cb_data, buf);
   14b9c:	6863      	ldr	r3, [r4, #4]
   14b9e:	4807      	ldr	r0, [pc, #28]	; (14bbc <bt_mesh_pb_gatt_recv+0x60>)
   14ba0:	68db      	ldr	r3, [r3, #12]
   14ba2:	68a1      	ldr	r1, [r4, #8]
   14ba4:	462a      	mov	r2, r5
   14ba6:	4798      	blx	r3
	return 0;
   14ba8:	2000      	movs	r0, #0
   14baa:	e7e5      	b.n	14b78 <bt_mesh_pb_gatt_recv+0x1c>
   14bac:	20001ef0 	.word	0x20001ef0
   14bb0:	0002eccd 	.word	0x0002eccd
   14bb4:	0002ea88 	.word	0x0002ea88
   14bb8:	20002170 	.word	0x20002170
   14bbc:	00029928 	.word	0x00029928

00014bc0 <bt_mesh_pb_gatt_open>:
{
   14bc0:	b538      	push	{r3, r4, r5, lr}
	if (link.conn) {
   14bc2:	4d0c      	ldr	r5, [pc, #48]	; (14bf4 <bt_mesh_pb_gatt_open+0x34>)
   14bc4:	682c      	ldr	r4, [r5, #0]
   14bc6:	b98c      	cbnz	r4, 14bec <bt_mesh_pb_gatt_open+0x2c>
	link.conn = bt_conn_ref(conn);
   14bc8:	f00f ff39 	bl	24a3e <bt_conn_ref>
   14bcc:	4629      	mov	r1, r5
   14bce:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   14bd2:	f841 0b10 	str.w	r0, [r1], #16
   14bd6:	2300      	movs	r3, #0
   14bd8:	4807      	ldr	r0, [pc, #28]	; (14bf8 <bt_mesh_pb_gatt_open+0x38>)
   14bda:	f00b fabd 	bl	20158 <k_delayed_work_submit_to_queue>
	link.cb->link_opened(&pb_gatt, link.cb_data);
   14bde:	686b      	ldr	r3, [r5, #4]
   14be0:	4806      	ldr	r0, [pc, #24]	; (14bfc <bt_mesh_pb_gatt_open+0x3c>)
   14be2:	681b      	ldr	r3, [r3, #0]
   14be4:	68a9      	ldr	r1, [r5, #8]
   14be6:	4798      	blx	r3
	return 0;
   14be8:	4620      	mov	r0, r4
}
   14bea:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   14bec:	f06f 000f 	mvn.w	r0, #15
   14bf0:	e7fb      	b.n	14bea <bt_mesh_pb_gatt_open+0x2a>
   14bf2:	bf00      	nop
   14bf4:	20001ef0 	.word	0x20001ef0
   14bf8:	20002170 	.word	0x20002170
   14bfc:	00029928 	.word	0x00029928

00014c00 <bt_mesh_pb_gatt_close>:
{
   14c00:	b508      	push	{r3, lr}
	if (link.conn != conn) {
   14c02:	4b06      	ldr	r3, [pc, #24]	; (14c1c <bt_mesh_pb_gatt_close+0x1c>)
   14c04:	681b      	ldr	r3, [r3, #0]
   14c06:	4283      	cmp	r3, r0
   14c08:	d104      	bne.n	14c14 <bt_mesh_pb_gatt_close+0x14>
	link_closed(PROV_BEARER_LINK_STATUS_SUCCESS);
   14c0a:	2000      	movs	r0, #0
   14c0c:	f7ff ff6a 	bl	14ae4 <link_closed>
	return 0;
   14c10:	2000      	movs	r0, #0
}
   14c12:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
   14c14:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14c18:	e7fb      	b.n	14c12 <bt_mesh_pb_gatt_close+0x12>
   14c1a:	bf00      	nop
   14c1c:	20001ef0 	.word	0x20001ef0

00014c20 <pb_gatt_init>:
{
	/* No action */
}

void pb_gatt_init(void)
{
   14c20:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   14c22:	4c05      	ldr	r4, [pc, #20]	; (14c38 <pb_gatt_init+0x18>)
   14c24:	2230      	movs	r2, #48	; 0x30
   14c26:	2100      	movs	r1, #0
   14c28:	f104 0010 	add.w	r0, r4, #16
   14c2c:	f00f fab9 	bl	241a2 <memset>
   14c30:	4b02      	ldr	r3, [pc, #8]	; (14c3c <pb_gatt_init+0x1c>)
   14c32:	6163      	str	r3, [r4, #20]
	k_delayed_work_init(&link.prot_timer, protocol_timeout);
}
   14c34:	bd10      	pop	{r4, pc}
   14c36:	bf00      	nop
   14c38:	20001ef0 	.word	0x20001ef0
   14c3c:	00026a9b 	.word	0x00026a9b

00014c40 <find_client>:
static struct bt_mesh_proxy_client *find_client(struct bt_conn *conn)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		if (clients[i].conn == conn) {
   14c40:	4a0a      	ldr	r2, [pc, #40]	; (14c6c <find_client+0x2c>)
   14c42:	6813      	ldr	r3, [r2, #0]
   14c44:	4298      	cmp	r0, r3
   14c46:	d00b      	beq.n	14c60 <find_client+0x20>
   14c48:	6d93      	ldr	r3, [r2, #88]	; 0x58
   14c4a:	4298      	cmp	r0, r3
   14c4c:	d00a      	beq.n	14c64 <find_client+0x24>
   14c4e:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   14c52:	4298      	cmp	r0, r3
   14c54:	d108      	bne.n	14c68 <find_client+0x28>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   14c56:	2302      	movs	r3, #2
			return &clients[i];
   14c58:	2058      	movs	r0, #88	; 0x58
   14c5a:	fb00 2003 	mla	r0, r0, r3, r2
   14c5e:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   14c60:	2300      	movs	r3, #0
   14c62:	e7f9      	b.n	14c58 <find_client+0x18>
   14c64:	2301      	movs	r3, #1
   14c66:	e7f7      	b.n	14c58 <find_client+0x18>
		}
	}

	return NULL;
   14c68:	2000      	movs	r0, #0
}
   14c6a:	4770      	bx	lr
   14c6c:	20000350 	.word	0x20000350

00014c70 <proxy_send_beacons>:
{
	struct bt_mesh_proxy_client *client;

	client = CONTAINER_OF(work, struct bt_mesh_proxy_client, send_beacons);

	(void)bt_mesh_subnet_find(send_beacon_cb, client);
   14c70:	f1a0 010c 	sub.w	r1, r0, #12
   14c74:	4801      	ldr	r0, [pc, #4]	; (14c7c <proxy_send_beacons+0xc>)
   14c76:	f7f8 b897 	b.w	cda8 <bt_mesh_subnet_find>
   14c7a:	bf00      	nop
   14c7c:	00026bbd 	.word	0x00026bbd

00014c80 <proxy_sar_timeout>:
{
   14c80:	b510      	push	{r4, lr}
   14c82:	4604      	mov	r4, r0
	BT_WARN("Proxy SAR timeout");
   14c84:	2157      	movs	r1, #87	; 0x57
   14c86:	4806      	ldr	r0, [pc, #24]	; (14ca0 <proxy_sar_timeout+0x20>)
   14c88:	f00d f91f 	bl	21eca <printk>
	if (client->conn) {
   14c8c:	f854 0c18 	ldr.w	r0, [r4, #-24]
   14c90:	b120      	cbz	r0, 14c9c <proxy_sar_timeout+0x1c>
		bt_conn_disconnect(client->conn,
   14c92:	2113      	movs	r1, #19
}
   14c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(client->conn,
   14c98:	f7f3 baec 	b.w	8274 <bt_conn_disconnect>
}
   14c9c:	bd10      	pop	{r4, pc}
   14c9e:	bf00      	nop
   14ca0:	0002f0c5 	.word	0x0002f0c5

00014ca4 <proxy_disconnected>:
{
	int i;

	BT_DBG("conn %p reason 0x%02x", conn, reason);

	conn_count--;
   14ca4:	4a15      	ldr	r2, [pc, #84]	; (14cfc <proxy_disconnected+0x58>)
   14ca6:	6813      	ldr	r3, [r2, #0]
{
   14ca8:	b570      	push	{r4, r5, r6, lr}

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		if (client->conn == conn) {
   14caa:	4c15      	ldr	r4, [pc, #84]	; (14d00 <proxy_disconnected+0x5c>)
	conn_count--;
   14cac:	3b01      	subs	r3, #1
   14cae:	6013      	str	r3, [r2, #0]
		if (client->conn == conn) {
   14cb0:	6823      	ldr	r3, [r4, #0]
   14cb2:	4298      	cmp	r0, r3
   14cb4:	d01e      	beq.n	14cf4 <proxy_disconnected+0x50>
   14cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
   14cb8:	4298      	cmp	r0, r3
   14cba:	d01d      	beq.n	14cf8 <proxy_disconnected+0x54>
   14cbc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   14cc0:	4298      	cmp	r0, r3
   14cc2:	d113      	bne.n	14cec <proxy_disconnected+0x48>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   14cc4:	2602      	movs	r6, #2
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
			    client->filter_type == PROV) {
   14cc6:	2558      	movs	r5, #88	; 0x58
   14cc8:	fb05 4306 	mla	r3, r5, r6, r4
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   14ccc:	7a9b      	ldrb	r3, [r3, #10]
   14cce:	2b03      	cmp	r3, #3
   14cd0:	d101      	bne.n	14cd6 <proxy_disconnected+0x32>
				bt_mesh_pb_gatt_close(conn);
   14cd2:	f7ff ff95 	bl	14c00 <bt_mesh_pb_gatt_close>
			}

			k_delayed_work_cancel(&client->sar_timer);
   14cd6:	4375      	muls	r5, r6
   14cd8:	f105 0018 	add.w	r0, r5, #24
   14cdc:	4420      	add	r0, r4
   14cde:	f00b faab 	bl	20238 <k_delayed_work_cancel>
			bt_conn_unref(client->conn);
   14ce2:	5960      	ldr	r0, [r4, r5]
   14ce4:	f7f3 f94c 	bl	7f80 <bt_conn_unref>
			client->conn = NULL;
   14ce8:	2300      	movs	r3, #0
   14cea:	5163      	str	r3, [r4, r5]
			break;
		}
	}

	bt_mesh_adv_update();
}
   14cec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_mesh_adv_update();
   14cf0:	f7fd b8c8 	b.w	11e84 <bt_mesh_adv_update>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   14cf4:	2600      	movs	r6, #0
   14cf6:	e7e6      	b.n	14cc6 <proxy_disconnected+0x22>
   14cf8:	2601      	movs	r6, #1
   14cfa:	e7e4      	b.n	14cc6 <proxy_disconnected+0x22>
   14cfc:	20002eb0 	.word	0x20002eb0
   14d00:	20000350 	.word	0x20000350

00014d04 <prov_ccc_write>:
{
	struct bt_mesh_proxy_client *client;

	BT_DBG("value 0x%04x", value);

	if (value != BT_GATT_CCC_NOTIFY) {
   14d04:	2a01      	cmp	r2, #1
{
   14d06:	b538      	push	{r3, r4, r5, lr}
   14d08:	4605      	mov	r5, r0
	if (value != BT_GATT_CCC_NOTIFY) {
   14d0a:	d006      	beq.n	14d1a <prov_ccc_write+0x16>
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
   14d0c:	480f      	ldr	r0, [pc, #60]	; (14d4c <prov_ccc_write+0x48>)
   14d0e:	2157      	movs	r1, #87	; 0x57
   14d10:	f00d f8db 	bl	21eca <printk>
   14d14:	f06f 0012 	mvn.w	r0, #18
		client->filter_type = PROV;
		bt_mesh_pb_gatt_open(conn);
	}

	return sizeof(value);
}
   14d18:	bd38      	pop	{r3, r4, r5, pc}
	client = find_client(conn);
   14d1a:	f7ff ff91 	bl	14c40 <find_client>
	__ASSERT(client, "No client for connection");
   14d1e:	4604      	mov	r4, r0
   14d20:	b950      	cbnz	r0, 14d38 <prov_ccc_write+0x34>
   14d22:	490b      	ldr	r1, [pc, #44]	; (14d50 <prov_ccc_write+0x4c>)
   14d24:	480b      	ldr	r0, [pc, #44]	; (14d54 <prov_ccc_write+0x50>)
   14d26:	f240 226e 	movw	r2, #622	; 0x26e
   14d2a:	f00d f8ce 	bl	21eca <printk>
   14d2e:	f240 216e 	movw	r1, #622	; 0x26e
   14d32:	4807      	ldr	r0, [pc, #28]	; (14d50 <prov_ccc_write+0x4c>)
   14d34:	f00d fb7b 	bl	2242e <assert_post_action>
	if (client->filter_type == NONE) {
   14d38:	7aa3      	ldrb	r3, [r4, #10]
   14d3a:	b923      	cbnz	r3, 14d46 <prov_ccc_write+0x42>
		client->filter_type = PROV;
   14d3c:	2303      	movs	r3, #3
   14d3e:	72a3      	strb	r3, [r4, #10]
		bt_mesh_pb_gatt_open(conn);
   14d40:	4628      	mov	r0, r5
   14d42:	f7ff ff3d 	bl	14bc0 <bt_mesh_pb_gatt_open>
	return sizeof(value);
   14d46:	2002      	movs	r0, #2
   14d48:	e7e6      	b.n	14d18 <prov_ccc_write+0x14>
   14d4a:	bf00      	nop
   14d4c:	0002edf2 	.word	0x0002edf2
   14d50:	0002ee23 	.word	0x0002ee23
   14d54:	0002a026 	.word	0x0002a026

00014d58 <proxy_connected>:
	conn_count++;
   14d58:	4a17      	ldr	r2, [pc, #92]	; (14db8 <proxy_connected+0x60>)
{
   14d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn_count++;
   14d5c:	6813      	ldr	r3, [r2, #0]
   14d5e:	3301      	adds	r3, #1
	if (conn_count < CONFIG_BT_MAX_CONN) {
   14d60:	2b02      	cmp	r3, #2
{
   14d62:	4607      	mov	r7, r0
	conn_count++;
   14d64:	6013      	str	r3, [r2, #0]
	if (conn_count < CONFIG_BT_MAX_CONN) {
   14d66:	dc01      	bgt.n	14d6c <proxy_connected+0x14>
		bt_mesh_adv_update();
   14d68:	f7fd f88c 	bl	11e84 <bt_mesh_adv_update>
		if (!clients[i].conn) {
   14d6c:	4c13      	ldr	r4, [pc, #76]	; (14dbc <proxy_connected+0x64>)
   14d6e:	6823      	ldr	r3, [r4, #0]
   14d70:	b12b      	cbz	r3, 14d7e <proxy_connected+0x26>
   14d72:	6da3      	ldr	r3, [r4, #88]	; 0x58
   14d74:	b1bb      	cbz	r3, 14da6 <proxy_connected+0x4e>
   14d76:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   14d7a:	b9b3      	cbnz	r3, 14daa <proxy_connected+0x52>
	for (client = NULL, i = 0; i < ARRAY_SIZE(clients); i++) {
   14d7c:	2302      	movs	r3, #2
	client->conn = bt_conn_ref(conn);
   14d7e:	4638      	mov	r0, r7
   14d80:	2558      	movs	r5, #88	; 0x58
   14d82:	435d      	muls	r5, r3
   14d84:	f00f fe5b 	bl	24a3e <bt_conn_ref>
			client = &clients[i];
   14d88:	1966      	adds	r6, r4, r5
	client->filter_type = NONE;
   14d8a:	2700      	movs	r7, #0
	client->conn = bt_conn_ref(conn);
   14d8c:	5160      	str	r0, [r4, r5]
	(void)memset(client->filter, 0, sizeof(client->filter));
   14d8e:	1d28      	adds	r0, r5, #4
	client->filter_type = NONE;
   14d90:	72b7      	strb	r7, [r6, #10]
	(void)memset(client->filter, 0, sizeof(client->filter));
   14d92:	2206      	movs	r2, #6
   14d94:	4639      	mov	r1, r7
   14d96:	4420      	add	r0, r4
   14d98:	f00f fa03 	bl	241a2 <memset>
   14d9c:	6d33      	ldr	r3, [r6, #80]	; 0x50
	buf->len  = 0U;
   14d9e:	f8a6 704c 	strh.w	r7, [r6, #76]	; 0x4c
	buf->data = buf->__buf;
   14da2:	64b3      	str	r3, [r6, #72]	; 0x48
}
   14da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (client = NULL, i = 0; i < ARRAY_SIZE(clients); i++) {
   14da6:	2301      	movs	r3, #1
   14da8:	e7e9      	b.n	14d7e <proxy_connected+0x26>
		BT_ERR("No free Proxy Client objects");
   14daa:	2145      	movs	r1, #69	; 0x45
   14dac:	4804      	ldr	r0, [pc, #16]	; (14dc0 <proxy_connected+0x68>)
}
   14dae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("No free Proxy Client objects");
   14db2:	f00d b88a 	b.w	21eca <printk>
   14db6:	bf00      	nop
   14db8:	20002eb0 	.word	0x20002eb0
   14dbc:	20000350 	.word	0x20000350
   14dc0:	0002ef41 	.word	0x0002ef41

00014dc4 <notify_complete>:
}

#endif /* CONFIG_BT_MESH_GATT_PROXY */

static void notify_complete(struct bt_conn *conn, void *user_data)
{
   14dc4:	b510      	push	{r4, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14dc6:	4b0d      	ldr	r3, [pc, #52]	; (14dfc <notify_complete+0x38>)
   14dc8:	f3bf 8f5b 	dmb	ish
   14dcc:	e853 2f00 	ldrex	r2, [r3]
   14dd0:	1e51      	subs	r1, r2, #1
   14dd2:	e843 1000 	strex	r0, r1, [r3]
   14dd6:	2800      	cmp	r0, #0
   14dd8:	d1f8      	bne.n	14dcc <notify_complete+0x8>
   14dda:	f3bf 8f5b 	dmb	ish
	sys_snode_t *n;

	if (atomic_dec(&pending_notifications) > 1) {
   14dde:	2a01      	cmp	r2, #1
   14de0:	dc0b      	bgt.n	14dfa <notify_complete+0x36>
Z_GENLIST_IS_EMPTY(slist)
   14de2:	4c07      	ldr	r4, [pc, #28]	; (14e00 <notify_complete+0x3c>)
   14de4:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   14de6:	b143      	cbz	r3, 14dfa <notify_complete+0x36>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14de8:	6861      	ldr	r1, [r4, #4]
   14dea:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   14dec:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14dee:	428b      	cmp	r3, r1
	list->tail = node;
   14df0:	bf08      	it	eq
   14df2:	6062      	streq	r2, [r4, #4]
	}

	BT_DBG("");

	while ((n = sys_slist_get(&idle_waiters))) {
		CONTAINER_OF(n, struct bt_mesh_proxy_idle_cb, n)->cb();
   14df4:	685b      	ldr	r3, [r3, #4]
   14df6:	4798      	blx	r3
   14df8:	e7f4      	b.n	14de4 <notify_complete+0x20>
	}
}
   14dfa:	bd10      	pop	{r4, pc}
   14dfc:	20002ebc 	.word	0x20002ebc
   14e00:	20002eb4 	.word	0x20002eb4

00014e04 <proxy_send>:

static int proxy_send(struct bt_conn *conn, const void *data,
		      uint16_t len)
{
   14e04:	b570      	push	{r4, r5, r6, lr}
   14e06:	b086      	sub	sp, #24
   14e08:	460e      	mov	r6, r1
   14e0a:	4615      	mov	r5, r2
   14e0c:	4604      	mov	r4, r0
	struct bt_gatt_notify_params params = {
   14e0e:	2218      	movs	r2, #24
   14e10:	2100      	movs	r1, #0
   14e12:	4668      	mov	r0, sp
   14e14:	f00f f9c5 	bl	241a2 <memset>
   14e18:	4b12      	ldr	r3, [pc, #72]	; (14e64 <proxy_send+0x60>)
   14e1a:	9304      	str	r3, [sp, #16]
	int err;

	BT_DBG("%u bytes: %s", len, bt_hex(data, len));

#if defined(CONFIG_BT_MESH_GATT_PROXY)
	if (gatt_svc == MESH_GATT_PROXY) {
   14e1c:	4b12      	ldr	r3, [pc, #72]	; (14e68 <proxy_send+0x64>)
	struct bt_gatt_notify_params params = {
   14e1e:	9602      	str	r6, [sp, #8]
	if (gatt_svc == MESH_GATT_PROXY) {
   14e20:	781b      	ldrb	r3, [r3, #0]
	struct bt_gatt_notify_params params = {
   14e22:	f8ad 500c 	strh.w	r5, [sp, #12]
	if (gatt_svc == MESH_GATT_PROXY) {
   14e26:	2b02      	cmp	r3, #2
   14e28:	d108      	bne.n	14e3c <proxy_send+0x38>
		params.attr = &proxy_attrs[3];
   14e2a:	4b10      	ldr	r3, [pc, #64]	; (14e6c <proxy_send+0x68>)
	}
#endif
#if defined(CONFIG_BT_MESH_PB_GATT)
	if (gatt_svc == MESH_GATT_PROV) {
		params.attr = &prov_attrs[3];
   14e2c:	9301      	str	r3, [sp, #4]

	if (!params.attr) {
		return 0;
	}

	err = bt_gatt_notify_cb(conn, &params);
   14e2e:	4669      	mov	r1, sp
   14e30:	4620      	mov	r0, r4
   14e32:	f7f5 fdf1 	bl	aa18 <bt_gatt_notify_cb>
	if (!err) {
   14e36:	b128      	cbz	r0, 14e44 <proxy_send+0x40>
		atomic_inc(&pending_notifications);
	}

	return err;
}
   14e38:	b006      	add	sp, #24
   14e3a:	bd70      	pop	{r4, r5, r6, pc}
	if (gatt_svc == MESH_GATT_PROV) {
   14e3c:	2b01      	cmp	r3, #1
   14e3e:	d10e      	bne.n	14e5e <proxy_send+0x5a>
		params.attr = &prov_attrs[3];
   14e40:	4b0b      	ldr	r3, [pc, #44]	; (14e70 <proxy_send+0x6c>)
   14e42:	e7f3      	b.n	14e2c <proxy_send+0x28>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14e44:	4b0b      	ldr	r3, [pc, #44]	; (14e74 <proxy_send+0x70>)
   14e46:	f3bf 8f5b 	dmb	ish
   14e4a:	e853 2f00 	ldrex	r2, [r3]
   14e4e:	3201      	adds	r2, #1
   14e50:	e843 2100 	strex	r1, r2, [r3]
   14e54:	2900      	cmp	r1, #0
   14e56:	d1f8      	bne.n	14e4a <proxy_send+0x46>
   14e58:	f3bf 8f5b 	dmb	ish
   14e5c:	e7ec      	b.n	14e38 <proxy_send+0x34>
		return 0;
   14e5e:	2000      	movs	r0, #0
   14e60:	e7ea      	b.n	14e38 <proxy_send+0x34>
   14e62:	bf00      	nop
   14e64:	00014dc5 	.word	0x00014dc5
   14e68:	20004522 	.word	0x20004522
   14e6c:	200008dc 	.word	0x200008dc
   14e70:	2000082c 	.word	0x2000082c
   14e74:	20002ebc 	.word	0x20002ebc

00014e78 <bt_mesh_proxy_beacon_send>:
{
   14e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!sub) {
   14e7a:	4605      	mov	r5, r0
   14e7c:	b920      	cbnz	r0, 14e88 <bt_mesh_proxy_beacon_send+0x10>
		bt_mesh_subnet_foreach(bt_mesh_proxy_beacon_send);
   14e7e:	4809      	ldr	r0, [pc, #36]	; (14ea4 <bt_mesh_proxy_beacon_send+0x2c>)
}
   14e80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_mesh_subnet_foreach(bt_mesh_proxy_beacon_send);
   14e84:	f7f7 bfa2 	b.w	cdcc <bt_mesh_subnet_foreach>
		if (clients[i].conn) {
   14e88:	4e07      	ldr	r6, [pc, #28]	; (14ea8 <bt_mesh_proxy_beacon_send+0x30>)
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   14e8a:	2400      	movs	r4, #0
		if (clients[i].conn) {
   14e8c:	2758      	movs	r7, #88	; 0x58
   14e8e:	fb07 f304 	mul.w	r3, r7, r4
   14e92:	5998      	ldr	r0, [r3, r6]
   14e94:	b110      	cbz	r0, 14e9c <bt_mesh_proxy_beacon_send+0x24>
			beacon_send(clients[i].conn, sub);
   14e96:	4629      	mov	r1, r5
   14e98:	f011 fe77 	bl	26b8a <beacon_send>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   14e9c:	3401      	adds	r4, #1
   14e9e:	2c03      	cmp	r4, #3
   14ea0:	d1f5      	bne.n	14e8e <bt_mesh_proxy_beacon_send+0x16>
}
   14ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14ea4:	00014e79 	.word	0x00014e79
   14ea8:	20000350 	.word	0x20000350

00014eac <subnet_evt>:
}

#if defined(CONFIG_BT_MESH_GATT_PROXY)
static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_DELETED) {
   14eac:	2901      	cmp	r1, #1
{
   14eae:	b410      	push	{r4}
	if (evt == BT_MESH_KEY_DELETED) {
   14eb0:	d107      	bne.n	14ec2 <subnet_evt+0x16>
		if (sub == beacon_sub) {
   14eb2:	4b05      	ldr	r3, [pc, #20]	; (14ec8 <subnet_evt+0x1c>)
   14eb4:	681a      	ldr	r2, [r3, #0]
   14eb6:	4290      	cmp	r0, r2
   14eb8:	d101      	bne.n	14ebe <subnet_evt+0x12>
			beacon_sub = NULL;
   14eba:	2200      	movs	r2, #0
   14ebc:	601a      	str	r2, [r3, #0]
		}
	} else {
		bt_mesh_proxy_beacon_send(sub);
	}
}
   14ebe:	bc10      	pop	{r4}
   14ec0:	4770      	bx	lr
   14ec2:	bc10      	pop	{r4}
		bt_mesh_proxy_beacon_send(sub);
   14ec4:	f7ff bfd8 	b.w	14e78 <bt_mesh_proxy_beacon_send>
   14ec8:	20002eac 	.word	0x20002eac

00014ecc <send_filter_status>:
{
   14ecc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
   14ece:	f851 3b04 	ldr.w	r3, [r1], #4
   14ed2:	2600      	movs	r6, #0
{
   14ed4:	4614      	mov	r4, r2
   14ed6:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
   14ed8:	e9cd 3101 	strd	r3, r1, [sp, #4]
   14edc:	9603      	str	r6, [sp, #12]
		.src = bt_mesh_primary_addr(),
   14ede:	f7fa fd47 	bl	f970 <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   14ee2:	9b02      	ldr	r3, [sp, #8]
	struct bt_mesh_net_tx tx = {
   14ee4:	f8ad 000c 	strh.w	r0, [sp, #12]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   14ee8:	809e      	strh	r6, [r3, #4]
   14eea:	68a3      	ldr	r3, [r4, #8]
   14eec:	6023      	str	r3, [r4, #0]
	net_buf_simple_reserve(buf, 10);
   14eee:	210a      	movs	r1, #10
   14ef0:	4620      	mov	r0, r4
	buf->len  = 0U;
   14ef2:	80a6      	strh	r6, [r4, #4]
   14ef4:	f007 fbce 	bl	1c694 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
   14ef8:	2103      	movs	r1, #3
   14efa:	4620      	mov	r0, r4
   14efc:	f013 f843 	bl	27f86 <net_buf_simple_add_u8>
	if (client->filter_type == WHITELIST) {
   14f00:	7aab      	ldrb	r3, [r5, #10]
   14f02:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
   14f04:	bf0c      	ite	eq
   14f06:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
   14f08:	2101      	movne	r1, #1
   14f0a:	4620      	mov	r0, r4
   14f0c:	f013 f83b 	bl	27f86 <net_buf_simple_add_u8>
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   14f10:	88a9      	ldrh	r1, [r5, #4]
   14f12:	88eb      	ldrh	r3, [r5, #6]
	for (filter_size = 0U, i = 0; i < ARRAY_SIZE(client->filter); i++) {
   14f14:	3100      	adds	r1, #0
   14f16:	bf18      	it	ne
   14f18:	2101      	movne	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   14f1a:	b103      	cbz	r3, 14f1e <send_filter_status+0x52>
			filter_size++;
   14f1c:	3101      	adds	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   14f1e:	892b      	ldrh	r3, [r5, #8]
   14f20:	b10b      	cbz	r3, 14f26 <send_filter_status+0x5a>
			filter_size++;
   14f22:	3101      	adds	r1, #1
   14f24:	b289      	uxth	r1, r1
	net_buf_simple_add_be16(buf, filter_size);
   14f26:	4620      	mov	r0, r4
   14f28:	f013 f83d 	bl	27fa6 <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
   14f2c:	2201      	movs	r2, #1
   14f2e:	4621      	mov	r1, r4
   14f30:	a801      	add	r0, sp, #4
   14f32:	f7f7 f9bd 	bl	c2b0 <bt_mesh_net_encode>
	if (err) {
   14f36:	4602      	mov	r2, r0
   14f38:	b128      	cbz	r0, 14f46 <send_filter_status+0x7a>
		BT_ERR("Encoding Proxy cfg message failed (err %d)", err);
   14f3a:	4808      	ldr	r0, [pc, #32]	; (14f5c <send_filter_status+0x90>)
   14f3c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   14f3e:	f00c ffc4 	bl	21eca <printk>
}
   14f42:	b004      	add	sp, #16
   14f44:	bd70      	pop	{r4, r5, r6, pc}
	err = proxy_segment_and_send(client->conn, BT_MESH_PROXY_CONFIG, buf);
   14f46:	4622      	mov	r2, r4
   14f48:	2102      	movs	r1, #2
   14f4a:	6828      	ldr	r0, [r5, #0]
   14f4c:	f011 fdd4 	bl	26af8 <proxy_segment_and_send>
	if (err) {
   14f50:	4602      	mov	r2, r0
   14f52:	2800      	cmp	r0, #0
   14f54:	d0f5      	beq.n	14f42 <send_filter_status+0x76>
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   14f56:	2145      	movs	r1, #69	; 0x45
   14f58:	4801      	ldr	r0, [pc, #4]	; (14f60 <send_filter_status+0x94>)
   14f5a:	e7f0      	b.n	14f3e <send_filter_status+0x72>
   14f5c:	0002f0dc 	.word	0x0002f0dc
   14f60:	0002f10c 	.word	0x0002f10c

00014f64 <proxy_complete_pdu>:
{
   14f64:	b570      	push	{r4, r5, r6, lr}
	switch (client->msg_type) {
   14f66:	7ac2      	ldrb	r2, [r0, #11]
{
   14f68:	b094      	sub	sp, #80	; 0x50
   14f6a:	4604      	mov	r4, r0
	switch (client->msg_type) {
   14f6c:	2a03      	cmp	r2, #3
   14f6e:	f200 80ac 	bhi.w	150ca <proxy_complete_pdu+0x166>
   14f72:	e8df f002 	tbb	[pc, r2]
   14f76:	0e02      	.short	0x0e02
   14f78:	a412      	.short	0xa412
		bt_mesh_net_recv(&client->buf, 0, BT_MESH_NET_IF_PROXY);
   14f7a:	2202      	movs	r2, #2
   14f7c:	2100      	movs	r1, #0
   14f7e:	3048      	adds	r0, #72	; 0x48
   14f80:	f7f7 fb6a 	bl	c658 <bt_mesh_net_recv>
   14f84:	2300      	movs	r3, #0
   14f86:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	buf->data = buf->__buf;
   14f8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   14f8c:	64a3      	str	r3, [r4, #72]	; 0x48
}
   14f8e:	b014      	add	sp, #80	; 0x50
   14f90:	bd70      	pop	{r4, r5, r6, pc}
		bt_mesh_beacon_recv(&client->buf);
   14f92:	3048      	adds	r0, #72	; 0x48
   14f94:	f7f6 fda6 	bl	bae4 <bt_mesh_beacon_recv>
		break;
   14f98:	e7f4      	b.n	14f84 <proxy_complete_pdu+0x20>
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
   14f9a:	ab0c      	add	r3, sp, #48	; 0x30
   14f9c:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
   14fa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   14fa4:	9303      	str	r3, [sp, #12]
	err = bt_mesh_net_decode(&client->buf, BT_MESH_NET_IF_PROXY_CFG,
   14fa6:	aa06      	add	r2, sp, #24
   14fa8:	ab03      	add	r3, sp, #12
   14faa:	2103      	movs	r1, #3
   14fac:	3048      	adds	r0, #72	; 0x48
   14fae:	f7f7 fa9f 	bl	c4f0 <bt_mesh_net_decode>
	if (err) {
   14fb2:	4602      	mov	r2, r0
   14fb4:	b120      	cbz	r0, 14fc0 <proxy_complete_pdu+0x5c>
		BT_ERR("Failed to decode Proxy Configuration (err %d)", err);
   14fb6:	4846      	ldr	r0, [pc, #280]	; (150d0 <proxy_complete_pdu+0x16c>)
   14fb8:	2145      	movs	r1, #69	; 0x45
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
   14fba:	f00c ff86 	bl	21eca <printk>
   14fbe:	e7e1      	b.n	14f84 <proxy_complete_pdu+0x20>
	rx.local_match = 1U;
   14fc0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_rpl_check(&rx, NULL)) {
   14fc4:	4601      	mov	r1, r0
	rx.local_match = 1U;
   14fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	if (bt_mesh_rpl_check(&rx, NULL)) {
   14fca:	a806      	add	r0, sp, #24
	rx.local_match = 1U;
   14fcc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_rpl_check(&rx, NULL)) {
   14fd0:	f7f9 fce6 	bl	e9a0 <bt_mesh_rpl_check>
   14fd4:	4605      	mov	r5, r0
   14fd6:	b150      	cbz	r0, 14fee <proxy_complete_pdu+0x8a>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
   14fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14fda:	9300      	str	r3, [sp, #0]
   14fdc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   14fe0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   14fe4:	483b      	ldr	r0, [pc, #236]	; (150d4 <proxy_complete_pdu+0x170>)
   14fe6:	2157      	movs	r1, #87	; 0x57
   14fe8:	f00c ff6f 	bl	21eca <printk>
		return;
   14fec:	e7ca      	b.n	14f84 <proxy_complete_pdu+0x20>
	net_buf_simple_pull(&buf, BT_MESH_NET_HDR_LEN);
   14fee:	2109      	movs	r1, #9
   14ff0:	a803      	add	r0, sp, #12
   14ff2:	f007 fd4f 	bl	1ca94 <net_buf_simple_pull>
	if (buf.len < 1) {
   14ff6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   14ffa:	b923      	cbnz	r3, 15006 <proxy_complete_pdu+0xa2>
		BT_WARN("Too short proxy configuration PDU");
   14ffc:	2157      	movs	r1, #87	; 0x57
   14ffe:	4836      	ldr	r0, [pc, #216]	; (150d8 <proxy_complete_pdu+0x174>)
   15000:	f00c ff63 	bl	21eca <printk>
		return;
   15004:	e7be      	b.n	14f84 <proxy_complete_pdu+0x20>
	opcode = net_buf_simple_pull_u8(&buf);
   15006:	a803      	add	r0, sp, #12
   15008:	f012 ff81 	bl	27f0e <net_buf_simple_pull_u8>
	switch (opcode) {
   1500c:	2801      	cmp	r0, #1
	opcode = net_buf_simple_pull_u8(&buf);
   1500e:	4602      	mov	r2, r0
	switch (opcode) {
   15010:	d049      	beq.n	150a6 <proxy_complete_pdu+0x142>
   15012:	b246      	sxtb	r6, r0
   15014:	b1c6      	cbz	r6, 15048 <proxy_complete_pdu+0xe4>
   15016:	2802      	cmp	r0, #2
   15018:	d14e      	bne.n	150b8 <proxy_complete_pdu+0x154>
		while (buf.len >= 2) {
   1501a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1501e:	2b01      	cmp	r3, #1
   15020:	d919      	bls.n	15056 <proxy_complete_pdu+0xf2>
			addr = net_buf_simple_pull_be16(&buf);
   15022:	a803      	add	r0, sp, #12
   15024:	f012 ff83 	bl	27f2e <net_buf_simple_pull_be16>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   15028:	2800      	cmp	r0, #0
   1502a:	d0f6      	beq.n	1501a <proxy_complete_pdu+0xb6>
		if (client->filter[i] == addr) {
   1502c:	88a3      	ldrh	r3, [r4, #4]
   1502e:	4283      	cmp	r3, r0
   15030:	d03e      	beq.n	150b0 <proxy_complete_pdu+0x14c>
   15032:	88e3      	ldrh	r3, [r4, #6]
   15034:	4283      	cmp	r3, r0
   15036:	d03d      	beq.n	150b4 <proxy_complete_pdu+0x150>
   15038:	8923      	ldrh	r3, [r4, #8]
   1503a:	4283      	cmp	r3, r0
   1503c:	d1ed      	bne.n	1501a <proxy_complete_pdu+0xb6>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1503e:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   15040:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   15044:	809d      	strh	r5, [r3, #4]
			return;
   15046:	e7e8      	b.n	1501a <proxy_complete_pdu+0xb6>
	if (buf->len < 1) {
   15048:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1504c:	b94b      	cbnz	r3, 15062 <proxy_complete_pdu+0xfe>
		BT_WARN("Too short Filter Set message");
   1504e:	2157      	movs	r1, #87	; 0x57
   15050:	4822      	ldr	r0, [pc, #136]	; (150dc <proxy_complete_pdu+0x178>)
   15052:	f00c ff3a 	bl	21eca <printk>
		send_filter_status(client, &rx, &buf);
   15056:	aa03      	add	r2, sp, #12
   15058:	a906      	add	r1, sp, #24
   1505a:	4620      	mov	r0, r4
   1505c:	f7ff ff36 	bl	14ecc <send_filter_status>
		break;
   15060:	e790      	b.n	14f84 <proxy_complete_pdu+0x20>
	type = net_buf_simple_pull_u8(buf);
   15062:	a803      	add	r0, sp, #12
   15064:	f012 ff53 	bl	27f0e <net_buf_simple_pull_u8>
	switch (type) {
   15068:	b138      	cbz	r0, 1507a <proxy_complete_pdu+0x116>
   1506a:	2801      	cmp	r0, #1
   1506c:	d00d      	beq.n	1508a <proxy_complete_pdu+0x126>
		BT_WARN("Prohibited Filter Type 0x%02x", type);
   1506e:	4602      	mov	r2, r0
   15070:	2157      	movs	r1, #87	; 0x57
   15072:	481b      	ldr	r0, [pc, #108]	; (150e0 <proxy_complete_pdu+0x17c>)
   15074:	f00c ff29 	bl	21eca <printk>
		return -EINVAL;
   15078:	e7ed      	b.n	15056 <proxy_complete_pdu+0xf2>
		(void)memset(client->filter, 0, sizeof(client->filter));
   1507a:	4601      	mov	r1, r0
   1507c:	2206      	movs	r2, #6
   1507e:	1d20      	adds	r0, r4, #4
   15080:	f00f f88f 	bl	241a2 <memset>
		client->filter_type = WHITELIST;
   15084:	2301      	movs	r3, #1
		client->filter_type = BLACKLIST;
   15086:	72a3      	strb	r3, [r4, #10]
		break;
   15088:	e7e5      	b.n	15056 <proxy_complete_pdu+0xf2>
		(void)memset(client->filter, 0, sizeof(client->filter));
   1508a:	2206      	movs	r2, #6
   1508c:	4631      	mov	r1, r6
   1508e:	1d20      	adds	r0, r4, #4
   15090:	f00f f887 	bl	241a2 <memset>
		client->filter_type = BLACKLIST;
   15094:	2302      	movs	r3, #2
   15096:	e7f6      	b.n	15086 <proxy_complete_pdu+0x122>
			addr = net_buf_simple_pull_be16(&buf);
   15098:	a803      	add	r0, sp, #12
   1509a:	f012 ff48 	bl	27f2e <net_buf_simple_pull_be16>
			filter_add(client, addr);
   1509e:	4601      	mov	r1, r0
   150a0:	4620      	mov	r0, r4
   150a2:	f011 fd14 	bl	26ace <filter_add>
		while (buf.len >= 2) {
   150a6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   150aa:	2b01      	cmp	r3, #1
   150ac:	d8f4      	bhi.n	15098 <proxy_complete_pdu+0x134>
   150ae:	e7d2      	b.n	15056 <proxy_complete_pdu+0xf2>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   150b0:	2300      	movs	r3, #0
   150b2:	e7c5      	b.n	15040 <proxy_complete_pdu+0xdc>
   150b4:	2301      	movs	r3, #1
   150b6:	e7c3      	b.n	15040 <proxy_complete_pdu+0xdc>
		BT_WARN("Unhandled configuration OpCode 0x%02x", opcode);
   150b8:	2157      	movs	r1, #87	; 0x57
   150ba:	480a      	ldr	r0, [pc, #40]	; (150e4 <proxy_complete_pdu+0x180>)
   150bc:	e77d      	b.n	14fba <proxy_complete_pdu+0x56>
		bt_mesh_pb_gatt_recv(client->conn, &client->buf);
   150be:	f100 0148 	add.w	r1, r0, #72	; 0x48
   150c2:	6800      	ldr	r0, [r0, #0]
   150c4:	f7ff fd4a 	bl	14b5c <bt_mesh_pb_gatt_recv>
		break;
   150c8:	e75c      	b.n	14f84 <proxy_complete_pdu+0x20>
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
   150ca:	2157      	movs	r1, #87	; 0x57
   150cc:	4806      	ldr	r0, [pc, #24]	; (150e8 <proxy_complete_pdu+0x184>)
   150ce:	e774      	b.n	14fba <proxy_complete_pdu+0x56>
   150d0:	0002ee54 	.word	0x0002ee54
   150d4:	0002c814 	.word	0x0002c814
   150d8:	0002ee87 	.word	0x0002ee87
   150dc:	0002eeae 	.word	0x0002eeae
   150e0:	0002eed0 	.word	0x0002eed0
   150e4:	0002eef3 	.word	0x0002eef3
   150e8:	0002ef1e 	.word	0x0002ef1e

000150ec <proxy_recv>:
{
   150ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150f0:	4616      	mov	r6, r2
   150f2:	461c      	mov	r4, r3
	struct bt_mesh_proxy_client *client = find_client(conn);
   150f4:	f7ff fda4 	bl	14c40 <find_client>
	if (!client) {
   150f8:	4605      	mov	r5, r0
   150fa:	2800      	cmp	r0, #0
   150fc:	d07c      	beq.n	151f8 <proxy_recv+0x10c>
	if (len < 1) {
   150fe:	b934      	cbnz	r4, 1510e <proxy_recv+0x22>
		BT_WARN("Too small Proxy PDU");
   15100:	483f      	ldr	r0, [pc, #252]	; (15200 <proxy_recv+0x114>)
   15102:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unexpected message type in last SAR PDU");
   15104:	f00c fee1 	bl	21eca <printk>
			return -EINVAL;
   15108:	f06f 0415 	mvn.w	r4, #21
   1510c:	e049      	b.n	151a2 <proxy_recv+0xb6>
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
   1510e:	7832      	ldrb	r2, [r6, #0]
   15110:	68c9      	ldr	r1, [r1, #12]
   15112:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   15116:	3100      	adds	r1, #0
   15118:	f1a2 0303 	sub.w	r3, r2, #3
   1511c:	bf18      	it	ne
   1511e:	2101      	movne	r1, #1
   15120:	425a      	negs	r2, r3
   15122:	415a      	adcs	r2, r3
   15124:	4291      	cmp	r1, r2
   15126:	d002      	beq.n	1512e <proxy_recv+0x42>
		BT_WARN("Proxy PDU type doesn't match GATT service");
   15128:	2157      	movs	r1, #87	; 0x57
   1512a:	4836      	ldr	r0, [pc, #216]	; (15204 <proxy_recv+0x118>)
   1512c:	e7ea      	b.n	15104 <proxy_recv+0x18>
	if (len - 1 > net_buf_simple_tailroom(&client->buf)) {
   1512e:	f100 0748 	add.w	r7, r0, #72	; 0x48
   15132:	4638      	mov	r0, r7
   15134:	f012 ff13 	bl	27f5e <net_buf_simple_tailroom>
   15138:	f104 38ff 	add.w	r8, r4, #4294967295
   1513c:	4580      	cmp	r8, r0
   1513e:	d902      	bls.n	15146 <proxy_recv+0x5a>
		BT_WARN("Too big proxy PDU");
   15140:	2157      	movs	r1, #87	; 0x57
   15142:	4831      	ldr	r0, [pc, #196]	; (15208 <proxy_recv+0x11c>)
   15144:	e7de      	b.n	15104 <proxy_recv+0x18>
	switch (PDU_SAR(data)) {
   15146:	7833      	ldrb	r3, [r6, #0]
   15148:	f8b5 204c 	ldrh.w	r2, [r5, #76]	; 0x4c
   1514c:	0999      	lsrs	r1, r3, #6
   1514e:	2902      	cmp	r1, #2
   15150:	d02a      	beq.n	151a8 <proxy_recv+0xbc>
   15152:	2903      	cmp	r1, #3
   15154:	d03f      	beq.n	151d6 <proxy_recv+0xea>
   15156:	2901      	cmp	r1, #1
   15158:	d00d      	beq.n	15176 <proxy_recv+0x8a>
		if (client->buf.len) {
   1515a:	b112      	cbz	r2, 15162 <proxy_recv+0x76>
			BT_WARN("Complete PDU while a pending incomplete one");
   1515c:	2157      	movs	r1, #87	; 0x57
   1515e:	482b      	ldr	r0, [pc, #172]	; (1520c <proxy_recv+0x120>)
   15160:	e7d0      	b.n	15104 <proxy_recv+0x18>
		client->msg_type = PDU_TYPE(data);
   15162:	72eb      	strb	r3, [r5, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   15164:	4642      	mov	r2, r8
   15166:	1c71      	adds	r1, r6, #1
   15168:	4638      	mov	r0, r7
   1516a:	f012 ff00 	bl	27f6e <net_buf_simple_add_mem>
		proxy_complete_pdu(client);
   1516e:	4628      	mov	r0, r5
   15170:	f7ff fef8 	bl	14f64 <proxy_complete_pdu>
		break;
   15174:	e015      	b.n	151a2 <proxy_recv+0xb6>
		if (client->buf.len) {
   15176:	b112      	cbz	r2, 1517e <proxy_recv+0x92>
			BT_WARN("First PDU while a pending incomplete one");
   15178:	2157      	movs	r1, #87	; 0x57
   1517a:	4825      	ldr	r0, [pc, #148]	; (15210 <proxy_recv+0x124>)
   1517c:	e7c2      	b.n	15104 <proxy_recv+0x18>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1517e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   15182:	2300      	movs	r3, #0
   15184:	f105 0118 	add.w	r1, r5, #24
   15188:	4822      	ldr	r0, [pc, #136]	; (15214 <proxy_recv+0x128>)
   1518a:	f00a ffe5 	bl	20158 <k_delayed_work_submit_to_queue>
		client->msg_type = PDU_TYPE(data);
   1518e:	4631      	mov	r1, r6
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   15190:	4642      	mov	r2, r8
		client->msg_type = PDU_TYPE(data);
   15192:	f811 3b01 	ldrb.w	r3, [r1], #1
   15196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1519a:	72eb      	strb	r3, [r5, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   1519c:	4638      	mov	r0, r7
   1519e:	f012 fee6 	bl	27f6e <net_buf_simple_add_mem>
}
   151a2:	4620      	mov	r0, r4
   151a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!client->buf.len) {
   151a8:	b912      	cbnz	r2, 151b0 <proxy_recv+0xc4>
			BT_WARN("Continuation with no prior data");
   151aa:	2157      	movs	r1, #87	; 0x57
   151ac:	481a      	ldr	r0, [pc, #104]	; (15218 <proxy_recv+0x12c>)
   151ae:	e7a9      	b.n	15104 <proxy_recv+0x18>
		if (client->msg_type != PDU_TYPE(data)) {
   151b0:	7aea      	ldrb	r2, [r5, #11]
   151b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   151b6:	429a      	cmp	r2, r3
   151b8:	d002      	beq.n	151c0 <proxy_recv+0xd4>
			BT_WARN("Unexpected message type in continuation");
   151ba:	2157      	movs	r1, #87	; 0x57
   151bc:	4817      	ldr	r0, [pc, #92]	; (1521c <proxy_recv+0x130>)
   151be:	e7a1      	b.n	15104 <proxy_recv+0x18>
   151c0:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   151c4:	f105 0118 	add.w	r1, r5, #24
   151c8:	2300      	movs	r3, #0
   151ca:	4812      	ldr	r0, [pc, #72]	; (15214 <proxy_recv+0x128>)
   151cc:	f00a ffc4 	bl	20158 <k_delayed_work_submit_to_queue>
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   151d0:	4642      	mov	r2, r8
   151d2:	1c71      	adds	r1, r6, #1
   151d4:	e7e2      	b.n	1519c <proxy_recv+0xb0>
		if (!client->buf.len) {
   151d6:	b912      	cbnz	r2, 151de <proxy_recv+0xf2>
			BT_WARN("Last SAR PDU with no prior data");
   151d8:	2157      	movs	r1, #87	; 0x57
   151da:	4811      	ldr	r0, [pc, #68]	; (15220 <proxy_recv+0x134>)
   151dc:	e792      	b.n	15104 <proxy_recv+0x18>
		if (client->msg_type != PDU_TYPE(data)) {
   151de:	7aea      	ldrb	r2, [r5, #11]
   151e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   151e4:	429a      	cmp	r2, r3
   151e6:	d002      	beq.n	151ee <proxy_recv+0x102>
			BT_WARN("Unexpected message type in last SAR PDU");
   151e8:	2157      	movs	r1, #87	; 0x57
   151ea:	480e      	ldr	r0, [pc, #56]	; (15224 <proxy_recv+0x138>)
   151ec:	e78a      	b.n	15104 <proxy_recv+0x18>
		k_delayed_work_cancel(&client->sar_timer);
   151ee:	f105 0018 	add.w	r0, r5, #24
   151f2:	f00b f821 	bl	20238 <k_delayed_work_cancel>
   151f6:	e7b5      	b.n	15164 <proxy_recv+0x78>
		return -ENOTCONN;
   151f8:	f06f 0438 	mvn.w	r4, #56	; 0x38
   151fc:	e7d1      	b.n	151a2 <proxy_recv+0xb6>
   151fe:	bf00      	nop
   15200:	0002ef63 	.word	0x0002ef63
   15204:	0002ef7c 	.word	0x0002ef7c
   15208:	0002efab 	.word	0x0002efab
   1520c:	0002efc2 	.word	0x0002efc2
   15210:	0002eff3 	.word	0x0002eff3
   15214:	20002170 	.word	0x20002170
   15218:	0002f021 	.word	0x0002f021
   1521c:	0002f046 	.word	0x0002f046
   15220:	0002f073 	.word	0x0002f073
   15224:	0002f098 	.word	0x0002f098

00015228 <proxy_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   15228:	2a01      	cmp	r2, #1
{
   1522a:	b510      	push	{r4, lr}
	if (value != BT_GATT_CCC_NOTIFY) {
   1522c:	d006      	beq.n	1523c <proxy_ccc_write+0x14>
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
   1522e:	4819      	ldr	r0, [pc, #100]	; (15294 <proxy_ccc_write+0x6c>)
   15230:	2157      	movs	r1, #87	; 0x57
   15232:	f00c fe4a 	bl	21eca <printk>
   15236:	f06f 0012 	mvn.w	r0, #18
}
   1523a:	bd10      	pop	{r4, pc}
	client = find_client(conn);
   1523c:	f7ff fd00 	bl	14c40 <find_client>
	__ASSERT(client, "No client for connection");
   15240:	4604      	mov	r4, r0
   15242:	b950      	cbnz	r0, 1525a <proxy_ccc_write+0x32>
   15244:	4914      	ldr	r1, [pc, #80]	; (15298 <proxy_ccc_write+0x70>)
   15246:	4815      	ldr	r0, [pc, #84]	; (1529c <proxy_ccc_write+0x74>)
   15248:	f240 22e5 	movw	r2, #741	; 0x2e5
   1524c:	f00c fe3d 	bl	21eca <printk>
   15250:	f240 21e5 	movw	r1, #741	; 0x2e5
   15254:	4810      	ldr	r0, [pc, #64]	; (15298 <proxy_ccc_write+0x70>)
   15256:	f00d f8ea 	bl	2242e <assert_post_action>
	if (client->filter_type == NONE) {
   1525a:	7aa3      	ldrb	r3, [r4, #10]
   1525c:	b10b      	cbz	r3, 15262 <proxy_ccc_write+0x3a>
	return sizeof(value);
   1525e:	2002      	movs	r0, #2
   15260:	e7eb      	b.n	1523a <proxy_ccc_write+0x12>
		client->filter_type = WHITELIST;
   15262:	2301      	movs	r3, #1
   15264:	72a3      	strb	r3, [r4, #10]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15266:	f104 0314 	add.w	r3, r4, #20
   1526a:	f3bf 8f5b 	dmb	ish
   1526e:	e853 2f00 	ldrex	r2, [r3]
   15272:	f042 0101 	orr.w	r1, r2, #1
   15276:	e843 1000 	strex	r0, r1, [r3]
   1527a:	2800      	cmp	r0, #0
   1527c:	d1f7      	bne.n	1526e <proxy_ccc_write+0x46>
   1527e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   15282:	07d3      	lsls	r3, r2, #31
   15284:	d4eb      	bmi.n	1525e <proxy_ccc_write+0x36>
		k_queue_append(&work_q->queue, work);
   15286:	f104 010c 	add.w	r1, r4, #12
   1528a:	4805      	ldr	r0, [pc, #20]	; (152a0 <proxy_ccc_write+0x78>)
   1528c:	f013 f9ff 	bl	2868e <k_queue_append>
   15290:	e7e5      	b.n	1525e <proxy_ccc_write+0x36>
   15292:	bf00      	nop
   15294:	0002edf2 	.word	0x0002edf2
   15298:	0002ee23 	.word	0x0002ee23
   1529c:	0002a026 	.word	0x0002a026
   152a0:	20002170 	.word	0x20002170

000152a4 <bt_mesh_proxy_identity_start>:
{
   152a4:	b510      	push	{r4, lr}
   152a6:	4604      	mov	r4, r0
	node_id_start(sub);
   152a8:	f011 fc8e 	bl	26bc8 <node_id_start>
	beacon_sub = sub;
   152ac:	4b01      	ldr	r3, [pc, #4]	; (152b4 <bt_mesh_proxy_identity_start+0x10>)
   152ae:	601c      	str	r4, [r3, #0]
}
   152b0:	bd10      	pop	{r4, pc}
   152b2:	bf00      	nop
   152b4:	20002eac 	.word	0x20002eac

000152b8 <bt_mesh_proxy_identity_enable>:
{
   152b8:	b508      	push	{r3, lr}
	if (!bt_mesh_is_provisioned()) {
   152ba:	f010 fab4 	bl	25826 <bt_mesh_is_provisioned>
   152be:	b138      	cbz	r0, 152d0 <bt_mesh_proxy_identity_enable+0x18>
	if (bt_mesh_subnet_foreach(node_id_start)) {
   152c0:	4805      	ldr	r0, [pc, #20]	; (152d8 <bt_mesh_proxy_identity_enable+0x20>)
   152c2:	f7f7 fd83 	bl	cdcc <bt_mesh_subnet_foreach>
   152c6:	b110      	cbz	r0, 152ce <bt_mesh_proxy_identity_enable+0x16>
		bt_mesh_adv_update();
   152c8:	f7fc fddc 	bl	11e84 <bt_mesh_adv_update>
	return 0;
   152cc:	2000      	movs	r0, #0
}
   152ce:	bd08      	pop	{r3, pc}
		return -EAGAIN;
   152d0:	f06f 000a 	mvn.w	r0, #10
   152d4:	e7fb      	b.n	152ce <bt_mesh_proxy_identity_enable+0x16>
   152d6:	bf00      	nop
   152d8:	00026bc9 	.word	0x00026bc9

000152dc <bt_mesh_proxy_get_buf>:
	buf->len  = 0U;
   152dc:	4803      	ldr	r0, [pc, #12]	; (152ec <bt_mesh_proxy_get_buf+0x10>)
   152de:	2300      	movs	r3, #0
   152e0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	buf->data = buf->__buf;
   152e4:	6d03      	ldr	r3, [r0, #80]	; 0x50
   152e6:	f840 3f48 	str.w	r3, [r0, #72]!
}
   152ea:	4770      	bx	lr
   152ec:	20000350 	.word	0x20000350

000152f0 <bt_mesh_proxy_prov_enable>:
{
   152f0:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_PROV) {
   152f2:	4c12      	ldr	r4, [pc, #72]	; (1533c <bt_mesh_proxy_prov_enable+0x4c>)
   152f4:	7823      	ldrb	r3, [r4, #0]
   152f6:	2b01      	cmp	r3, #1
   152f8:	d019      	beq.n	1532e <bt_mesh_proxy_prov_enable+0x3e>
	if (gatt_svc != MESH_GATT_NONE) {
   152fa:	b9db      	cbnz	r3, 15334 <bt_mesh_proxy_prov_enable+0x44>
	bt_gatt_service_register(&prov_svc);
   152fc:	4810      	ldr	r0, [pc, #64]	; (15340 <bt_mesh_proxy_prov_enable+0x50>)
   152fe:	f7f5 fa2b 	bl	a758 <bt_gatt_service_register>
	prov_fast_adv = true;
   15302:	4a10      	ldr	r2, [pc, #64]	; (15344 <bt_mesh_proxy_prov_enable+0x54>)
	gatt_svc = MESH_GATT_PROV;
   15304:	2301      	movs	r3, #1
	prov_fast_adv = true;
   15306:	7013      	strb	r3, [r2, #0]
	gatt_svc = MESH_GATT_PROV;
   15308:	7023      	strb	r3, [r4, #0]
		if (clients[i].conn) {
   1530a:	4b0f      	ldr	r3, [pc, #60]	; (15348 <bt_mesh_proxy_prov_enable+0x58>)
   1530c:	681a      	ldr	r2, [r3, #0]
   1530e:	b10a      	cbz	r2, 15314 <bt_mesh_proxy_prov_enable+0x24>
			clients[i].filter_type = PROV;
   15310:	2203      	movs	r2, #3
   15312:	729a      	strb	r2, [r3, #10]
		if (clients[i].conn) {
   15314:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   15316:	b112      	cbz	r2, 1531e <bt_mesh_proxy_prov_enable+0x2e>
			clients[i].filter_type = PROV;
   15318:	2203      	movs	r2, #3
   1531a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		if (clients[i].conn) {
   1531e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   15322:	b112      	cbz	r2, 1532a <bt_mesh_proxy_prov_enable+0x3a>
			clients[i].filter_type = PROV;
   15324:	2203      	movs	r2, #3
   15326:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	return 0;
   1532a:	2000      	movs	r0, #0
}
   1532c:	bd10      	pop	{r4, pc}
		return -EALREADY;
   1532e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   15332:	e7fb      	b.n	1532c <bt_mesh_proxy_prov_enable+0x3c>
		return -EBUSY;
   15334:	f06f 000f 	mvn.w	r0, #15
   15338:	e7f8      	b.n	1532c <bt_mesh_proxy_prov_enable+0x3c>
   1533a:	bf00      	nop
   1533c:	20004522 	.word	0x20004522
   15340:	20000894 	.word	0x20000894
   15344:	20004523 	.word	0x20004523
   15348:	20000350 	.word	0x20000350

0001534c <bt_mesh_proxy_prov_disable>:
{
   1534c:	b570      	push	{r4, r5, r6, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   1534e:	4d14      	ldr	r5, [pc, #80]	; (153a0 <bt_mesh_proxy_prov_disable+0x54>)
   15350:	782b      	ldrb	r3, [r5, #0]
{
   15352:	4606      	mov	r6, r0
	if (gatt_svc == MESH_GATT_NONE) {
   15354:	b1eb      	cbz	r3, 15392 <bt_mesh_proxy_prov_disable+0x46>
	if (gatt_svc != MESH_GATT_PROV) {
   15356:	2b01      	cmp	r3, #1
   15358:	d11e      	bne.n	15398 <bt_mesh_proxy_prov_disable+0x4c>
	bt_gatt_service_unregister(&prov_svc);
   1535a:	4812      	ldr	r0, [pc, #72]	; (153a4 <bt_mesh_proxy_prov_disable+0x58>)
	gatt_svc = MESH_GATT_NONE;
   1535c:	2400      	movs	r4, #0
	bt_gatt_service_unregister(&prov_svc);
   1535e:	f7f5 fdcd 	bl	aefc <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   15362:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   15364:	4d10      	ldr	r5, [pc, #64]	; (153a8 <bt_mesh_proxy_prov_disable+0x5c>)
		if (!client->conn || client->filter_type != PROV) {
   15366:	6828      	ldr	r0, [r5, #0]
   15368:	b130      	cbz	r0, 15378 <bt_mesh_proxy_prov_disable+0x2c>
   1536a:	7aab      	ldrb	r3, [r5, #10]
   1536c:	2b03      	cmp	r3, #3
   1536e:	d103      	bne.n	15378 <bt_mesh_proxy_prov_disable+0x2c>
		if (disconnect) {
   15370:	b15e      	cbz	r6, 1538a <bt_mesh_proxy_prov_disable+0x3e>
			bt_conn_disconnect(client->conn,
   15372:	2113      	movs	r1, #19
   15374:	f7f2 ff7e 	bl	8274 <bt_conn_disconnect>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   15378:	3401      	adds	r4, #1
   1537a:	2c03      	cmp	r4, #3
   1537c:	f105 0558 	add.w	r5, r5, #88	; 0x58
   15380:	d1f1      	bne.n	15366 <bt_mesh_proxy_prov_disable+0x1a>
	bt_mesh_adv_update();
   15382:	f7fc fd7f 	bl	11e84 <bt_mesh_adv_update>
	return 0;
   15386:	2000      	movs	r0, #0
}
   15388:	bd70      	pop	{r4, r5, r6, pc}
			bt_mesh_pb_gatt_close(client->conn);
   1538a:	f7ff fc39 	bl	14c00 <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
   1538e:	72ae      	strb	r6, [r5, #10]
   15390:	e7f2      	b.n	15378 <bt_mesh_proxy_prov_disable+0x2c>
		return -EALREADY;
   15392:	f06f 0044 	mvn.w	r0, #68	; 0x44
   15396:	e7f7      	b.n	15388 <bt_mesh_proxy_prov_disable+0x3c>
		return -EBUSY;
   15398:	f06f 000f 	mvn.w	r0, #15
   1539c:	e7f4      	b.n	15388 <bt_mesh_proxy_prov_disable+0x3c>
   1539e:	bf00      	nop
   153a0:	20004522 	.word	0x20004522
   153a4:	20000894 	.word	0x20000894
   153a8:	20000350 	.word	0x20000350

000153ac <bt_mesh_proxy_gatt_enable>:
{
   153ac:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_PROXY) {
   153ae:	4c11      	ldr	r4, [pc, #68]	; (153f4 <bt_mesh_proxy_gatt_enable+0x48>)
   153b0:	7823      	ldrb	r3, [r4, #0]
   153b2:	2b02      	cmp	r3, #2
   153b4:	d017      	beq.n	153e6 <bt_mesh_proxy_gatt_enable+0x3a>
	if (gatt_svc != MESH_GATT_NONE) {
   153b6:	b9cb      	cbnz	r3, 153ec <bt_mesh_proxy_gatt_enable+0x40>
	bt_gatt_service_register(&proxy_svc);
   153b8:	480f      	ldr	r0, [pc, #60]	; (153f8 <bt_mesh_proxy_gatt_enable+0x4c>)
   153ba:	f7f5 f9cd 	bl	a758 <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROXY;
   153be:	2302      	movs	r3, #2
   153c0:	7023      	strb	r3, [r4, #0]
		if (clients[i].conn) {
   153c2:	4b0e      	ldr	r3, [pc, #56]	; (153fc <bt_mesh_proxy_gatt_enable+0x50>)
   153c4:	681a      	ldr	r2, [r3, #0]
   153c6:	b10a      	cbz	r2, 153cc <bt_mesh_proxy_gatt_enable+0x20>
			clients[i].filter_type = WHITELIST;
   153c8:	2201      	movs	r2, #1
   153ca:	729a      	strb	r2, [r3, #10]
		if (clients[i].conn) {
   153cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   153ce:	b112      	cbz	r2, 153d6 <bt_mesh_proxy_gatt_enable+0x2a>
			clients[i].filter_type = WHITELIST;
   153d0:	2201      	movs	r2, #1
   153d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		if (clients[i].conn) {
   153d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   153da:	b112      	cbz	r2, 153e2 <bt_mesh_proxy_gatt_enable+0x36>
			clients[i].filter_type = WHITELIST;
   153dc:	2201      	movs	r2, #1
   153de:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	return 0;
   153e2:	2000      	movs	r0, #0
}
   153e4:	bd10      	pop	{r4, pc}
		return -EALREADY;
   153e6:	f06f 0044 	mvn.w	r0, #68	; 0x44
   153ea:	e7fb      	b.n	153e4 <bt_mesh_proxy_gatt_enable+0x38>
		return -EBUSY;
   153ec:	f06f 000f 	mvn.w	r0, #15
   153f0:	e7f8      	b.n	153e4 <bt_mesh_proxy_gatt_enable+0x38>
   153f2:	bf00      	nop
   153f4:	20004522 	.word	0x20004522
   153f8:	20000944 	.word	0x20000944
   153fc:	20000350 	.word	0x20000350

00015400 <bt_mesh_proxy_gatt_disconnect>:
{
   15400:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   15402:	2500      	movs	r5, #0
   15404:	4c08      	ldr	r4, [pc, #32]	; (15428 <bt_mesh_proxy_gatt_disconnect+0x28>)
			client->filter_type = NONE;
   15406:	462e      	mov	r6, r5
		if (client->conn && (client->filter_type == WHITELIST ||
   15408:	6820      	ldr	r0, [r4, #0]
   1540a:	b138      	cbz	r0, 1541c <bt_mesh_proxy_gatt_disconnect+0x1c>
   1540c:	7aa3      	ldrb	r3, [r4, #10]
   1540e:	3b01      	subs	r3, #1
   15410:	2b01      	cmp	r3, #1
   15412:	d803      	bhi.n	1541c <bt_mesh_proxy_gatt_disconnect+0x1c>
			bt_conn_disconnect(client->conn,
   15414:	2113      	movs	r1, #19
			client->filter_type = NONE;
   15416:	72a6      	strb	r6, [r4, #10]
			bt_conn_disconnect(client->conn,
   15418:	f7f2 ff2c 	bl	8274 <bt_conn_disconnect>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   1541c:	3501      	adds	r5, #1
   1541e:	2d03      	cmp	r5, #3
   15420:	f104 0458 	add.w	r4, r4, #88	; 0x58
   15424:	d1f0      	bne.n	15408 <bt_mesh_proxy_gatt_disconnect+0x8>
}
   15426:	bd70      	pop	{r4, r5, r6, pc}
   15428:	20000350 	.word	0x20000350

0001542c <bt_mesh_proxy_gatt_disable>:
{
   1542c:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   1542e:	4c09      	ldr	r4, [pc, #36]	; (15454 <bt_mesh_proxy_gatt_disable+0x28>)
   15430:	7823      	ldrb	r3, [r4, #0]
   15432:	b14b      	cbz	r3, 15448 <bt_mesh_proxy_gatt_disable+0x1c>
	if (gatt_svc != MESH_GATT_PROXY) {
   15434:	2b02      	cmp	r3, #2
   15436:	d10a      	bne.n	1544e <bt_mesh_proxy_gatt_disable+0x22>
	bt_mesh_proxy_gatt_disconnect();
   15438:	f7ff ffe2 	bl	15400 <bt_mesh_proxy_gatt_disconnect>
	bt_gatt_service_unregister(&proxy_svc);
   1543c:	4806      	ldr	r0, [pc, #24]	; (15458 <bt_mesh_proxy_gatt_disable+0x2c>)
   1543e:	f7f5 fd5d 	bl	aefc <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   15442:	2000      	movs	r0, #0
   15444:	7020      	strb	r0, [r4, #0]
}
   15446:	bd10      	pop	{r4, pc}
		return -EALREADY;
   15448:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1544c:	e7fb      	b.n	15446 <bt_mesh_proxy_gatt_disable+0x1a>
		return -EBUSY;
   1544e:	f06f 000f 	mvn.w	r0, #15
   15452:	e7f8      	b.n	15446 <bt_mesh_proxy_gatt_disable+0x1a>
   15454:	20004522 	.word	0x20004522
   15458:	20000944 	.word	0x20000944

0001545c <bt_mesh_proxy_send>:
{
   1545c:	b538      	push	{r3, r4, r5, lr}
   1545e:	4604      	mov	r4, r0
   15460:	4615      	mov	r5, r2
	struct bt_mesh_proxy_client *client = find_client(conn);
   15462:	f7ff fbed 	bl	14c40 <find_client>
	if (!client) {
   15466:	b930      	cbnz	r0, 15476 <bt_mesh_proxy_send+0x1a>
		BT_ERR("No Proxy Client found");
   15468:	480f      	ldr	r0, [pc, #60]	; (154a8 <bt_mesh_proxy_send+0x4c>)
   1546a:	2145      	movs	r1, #69	; 0x45
   1546c:	f00c fd2d 	bl	21eca <printk>
   15470:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   15474:	bd38      	pop	{r3, r4, r5, pc}
	if ((client->filter_type == PROV) != (type == BT_MESH_PROXY_PROV)) {
   15476:	7a83      	ldrb	r3, [r0, #10]
   15478:	1ed8      	subs	r0, r3, #3
   1547a:	4243      	negs	r3, r0
   1547c:	f1a1 0c03 	sub.w	ip, r1, #3
   15480:	4143      	adcs	r3, r0
   15482:	f1dc 0200 	rsbs	r2, ip, #0
   15486:	eb42 020c 	adc.w	r2, r2, ip
   1548a:	4293      	cmp	r3, r2
   1548c:	d006      	beq.n	1549c <bt_mesh_proxy_send+0x40>
		BT_ERR("Invalid PDU type for Proxy Client");
   1548e:	4807      	ldr	r0, [pc, #28]	; (154ac <bt_mesh_proxy_send+0x50>)
   15490:	2145      	movs	r1, #69	; 0x45
   15492:	f00c fd1a 	bl	21eca <printk>
		return -EINVAL;
   15496:	f06f 0015 	mvn.w	r0, #21
   1549a:	e7eb      	b.n	15474 <bt_mesh_proxy_send+0x18>
	return proxy_segment_and_send(conn, type, msg);
   1549c:	462a      	mov	r2, r5
   1549e:	4620      	mov	r0, r4
}
   154a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return proxy_segment_and_send(conn, type, msg);
   154a4:	f011 bb28 	b.w	26af8 <proxy_segment_and_send>
   154a8:	0002edb0 	.word	0x0002edb0
   154ac:	0002edcb 	.word	0x0002edcb

000154b0 <bt_mesh_proxy_relay>:
{
   154b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   154b4:	4c1f      	ldr	r4, [pc, #124]	; (15534 <bt_mesh_proxy_relay+0x84>)
   154b6:	b08d      	sub	sp, #52	; 0x34
   154b8:	4606      	mov	r6, r0
   154ba:	460d      	mov	r5, r1
   154bc:	f504 7884 	add.w	r8, r4, #264	; 0x108
	bool relayed = false;
   154c0:	2000      	movs	r0, #0
		NET_BUF_SIMPLE_DEFINE(msg, 32);
   154c2:	af04      	add	r7, sp, #16
   154c4:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
		if (!client->conn) {
   154c8:	6823      	ldr	r3, [r4, #0]
		NET_BUF_SIMPLE_DEFINE(msg, 32);
   154ca:	9703      	str	r7, [sp, #12]
   154cc:	e9cd 7901 	strd	r7, r9, [sp, #4]
		if (!client->conn) {
   154d0:	b15b      	cbz	r3, 154ea <bt_mesh_proxy_relay+0x3a>
	if (client->filter_type == BLACKLIST) {
   154d2:	7aa3      	ldrb	r3, [r4, #10]
   154d4:	2b02      	cmp	r3, #2
   154d6:	d10e      	bne.n	154f6 <bt_mesh_proxy_relay+0x46>
			if (client->filter[i] == addr) {
   154d8:	88a3      	ldrh	r3, [r4, #4]
   154da:	42ab      	cmp	r3, r5
   154dc:	d005      	beq.n	154ea <bt_mesh_proxy_relay+0x3a>
   154de:	88e3      	ldrh	r3, [r4, #6]
   154e0:	42ab      	cmp	r3, r5
   154e2:	d002      	beq.n	154ea <bt_mesh_proxy_relay+0x3a>
   154e4:	8923      	ldrh	r3, [r4, #8]
   154e6:	42ab      	cmp	r3, r5
   154e8:	d114      	bne.n	15514 <bt_mesh_proxy_relay+0x64>
   154ea:	3458      	adds	r4, #88	; 0x58
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   154ec:	45a0      	cmp	r8, r4
   154ee:	d1eb      	bne.n	154c8 <bt_mesh_proxy_relay+0x18>
}
   154f0:	b00d      	add	sp, #52	; 0x34
   154f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (addr == BT_MESH_ADDR_ALL_NODES) {
   154f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   154fa:	4295      	cmp	r5, r2
   154fc:	d00a      	beq.n	15514 <bt_mesh_proxy_relay+0x64>
	if (client->filter_type == WHITELIST) {
   154fe:	2b01      	cmp	r3, #1
   15500:	d1f3      	bne.n	154ea <bt_mesh_proxy_relay+0x3a>
			if (client->filter[i] == addr) {
   15502:	88a3      	ldrh	r3, [r4, #4]
   15504:	42ab      	cmp	r3, r5
   15506:	d005      	beq.n	15514 <bt_mesh_proxy_relay+0x64>
   15508:	88e3      	ldrh	r3, [r4, #6]
   1550a:	42ab      	cmp	r3, r5
   1550c:	d002      	beq.n	15514 <bt_mesh_proxy_relay+0x64>
   1550e:	8923      	ldrh	r3, [r4, #8]
   15510:	42ab      	cmp	r3, r5
   15512:	d1ea      	bne.n	154ea <bt_mesh_proxy_relay+0x3a>
		net_buf_simple_reserve(&msg, 1);
   15514:	2101      	movs	r1, #1
   15516:	a801      	add	r0, sp, #4
   15518:	f007 f8bc 	bl	1c694 <net_buf_simple_reserve>
		net_buf_simple_add_mem(&msg, buf->data, buf->len);
   1551c:	88b2      	ldrh	r2, [r6, #4]
   1551e:	6831      	ldr	r1, [r6, #0]
   15520:	a801      	add	r0, sp, #4
   15522:	f012 fd24 	bl	27f6e <net_buf_simple_add_mem>
		bt_mesh_proxy_send(client->conn, BT_MESH_PROXY_NET_PDU, &msg);
   15526:	aa01      	add	r2, sp, #4
   15528:	2100      	movs	r1, #0
   1552a:	6820      	ldr	r0, [r4, #0]
   1552c:	f7ff ff96 	bl	1545c <bt_mesh_proxy_send>
		relayed = true;
   15530:	2001      	movs	r0, #1
   15532:	e7da      	b.n	154ea <bt_mesh_proxy_relay+0x3a>
   15534:	20000350 	.word	0x20000350

00015538 <bt_mesh_proxy_adv_start>:
{
   15538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   1553c:	4ba2      	ldr	r3, [pc, #648]	; (157c8 <bt_mesh_proxy_adv_start+0x290>)
   1553e:	781b      	ldrb	r3, [r3, #0]
{
   15540:	b087      	sub	sp, #28
	if (gatt_svc == MESH_GATT_NONE) {
   15542:	2b00      	cmp	r3, #0
   15544:	f000 808c 	beq.w	15660 <bt_mesh_proxy_adv_start+0x128>
	if (!bt_mesh_is_provisioned()) {
   15548:	f010 f96d 	bl	25826 <bt_mesh_is_provisioned>
   1554c:	4680      	mov	r8, r0
   1554e:	2800      	cmp	r0, #0
   15550:	d15e      	bne.n	15610 <bt_mesh_proxy_adv_start+0xd8>
	const struct bt_mesh_prov *prov = bt_mesh_prov_get();
   15552:	f7fe f8f1 	bl	13738 <bt_mesh_prov_get>
   15556:	4607      	mov	r7, r0
	const char *name = bt_get_name();
   15558:	f7f1 fdac 	bl	70b4 <bt_get_name>
   1555c:	4606      	mov	r6, r0
	size_t name_len = strlen(name);
   1555e:	f00e fda4 	bl	240aa <strlen>
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   15562:	4c9a      	ldr	r4, [pc, #616]	; (157cc <bt_mesh_proxy_adv_start+0x294>)
   15564:	6839      	ldr	r1, [r7, #0]
   15566:	2210      	movs	r2, #16
	size_t name_len = strlen(name);
   15568:	4605      	mov	r5, r0
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   1556a:	1ca0      	adds	r0, r4, #2
   1556c:	f00e fdef 	bl	2414e <memcpy>
	sys_put_be16(prov->oob_info, prov_svc_data + 18);
   15570:	893b      	ldrh	r3, [r7, #8]
	dst[1] = val;
   15572:	74e3      	strb	r3, [r4, #19]
	dst[0] = val >> 8;
   15574:	0a1a      	lsrs	r2, r3, #8
   15576:	74a2      	strb	r2, [r4, #18]
	if (prov->uri) {
   15578:	6878      	ldr	r0, [r7, #4]
   1557a:	ac02      	add	r4, sp, #8
   1557c:	2800      	cmp	r0, #0
   1557e:	d039      	beq.n	155f4 <bt_mesh_proxy_adv_start+0xbc>
		size_t uri_len = strlen(prov->uri);
   15580:	f00e fd93 	bl	240aa <strlen>
		if (uri_len > 29) {
   15584:	281d      	cmp	r0, #29
   15586:	d917      	bls.n	155b8 <bt_mesh_proxy_adv_start+0x80>
			BT_WARN("Too long URI to fit advertising packet");
   15588:	4891      	ldr	r0, [pc, #580]	; (157d0 <bt_mesh_proxy_adv_start+0x298>)
   1558a:	2157      	movs	r1, #87	; 0x57
   1558c:	f00c fc9d 	bl	21eca <printk>
	size_t sd_space = 31;
   15590:	231f      	movs	r3, #31
	size_t prov_sd_len = 0;
   15592:	4640      	mov	r0, r8
	if (sd_space > 2 && name_len > 0) {
   15594:	b1ed      	cbz	r5, 155d2 <bt_mesh_proxy_adv_start+0x9a>
		sd_space -= 2;
   15596:	3b02      	subs	r3, #2
		if (sd_space < name_len) {
   15598:	429d      	cmp	r5, r3
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   1559a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
   1559e:	bf8b      	itete	hi
   155a0:	2108      	movhi	r1, #8
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   155a2:	2309      	movls	r3, #9
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   155a4:	f804 1030 	strbhi.w	r1, [r4, r0, lsl #3]
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   155a8:	f804 3030 	strbls.w	r3, [r4, r0, lsl #3]
			prov_sd[prov_sd_len].data_len = sd_space;
   155ac:	bf8c      	ite	hi
   155ae:	7053      	strbhi	r3, [r2, #1]
			prov_sd[prov_sd_len].data_len = name_len;
   155b0:	7055      	strbls	r5, [r2, #1]
		prov_sd[prov_sd_len].data = name;
   155b2:	6056      	str	r6, [r2, #4]
		prov_sd_len++;
   155b4:	3001      	adds	r0, #1
   155b6:	e00c      	b.n	155d2 <bt_mesh_proxy_adv_start+0x9a>
			prov_sd[0].type = BT_DATA_URI;
   155b8:	2324      	movs	r3, #36	; 0x24
			prov_sd[0].data_len = uri_len;
   155ba:	f88d 0009 	strb.w	r0, [sp, #9]
			prov_sd[0].type = BT_DATA_URI;
   155be:	f88d 3008 	strb.w	r3, [sp, #8]
			prov_sd[0].data = prov->uri;
   155c2:	687b      	ldr	r3, [r7, #4]
   155c4:	9303      	str	r3, [sp, #12]
			sd_space -= 2 + uri_len;
   155c6:	f1c0 031d 	rsb	r3, r0, #29
	if (sd_space > 2 && name_len > 0) {
   155ca:	2b02      	cmp	r3, #2
			prov_sd_len++;
   155cc:	f04f 0001 	mov.w	r0, #1
	if (sd_space > 2 && name_len > 0) {
   155d0:	d8e0      	bhi.n	15594 <bt_mesh_proxy_adv_start+0x5c>
		if (!prov_fast_adv) {
   155d2:	4d80      	ldr	r5, [pc, #512]	; (157d4 <bt_mesh_proxy_adv_start+0x29c>)
   155d4:	782b      	ldrb	r3, [r5, #0]
			return bt_mesh_adv_start(&slow_adv_param,
   155d6:	e9cd 4000 	strd	r4, r0, [sp]
		if (!prov_fast_adv) {
   155da:	b96b      	cbnz	r3, 155f8 <bt_mesh_proxy_adv_start+0xc0>
			return bt_mesh_adv_start(&slow_adv_param,
   155dc:	2303      	movs	r3, #3
   155de:	4a7e      	ldr	r2, [pc, #504]	; (157d8 <bt_mesh_proxy_adv_start+0x2a0>)
   155e0:	487e      	ldr	r0, [pc, #504]	; (157dc <bt_mesh_proxy_adv_start+0x2a4>)
   155e2:	f04f 31ff 	mov.w	r1, #4294967295
   155e6:	f7fc fc83 	bl	11ef0 <bt_mesh_adv_start>
   155ea:	4604      	mov	r4, r0
}
   155ec:	4620      	mov	r0, r4
   155ee:	b007      	add	sp, #28
   155f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t sd_space = 31;
   155f4:	231f      	movs	r3, #31
   155f6:	e7cd      	b.n	15594 <bt_mesh_proxy_adv_start+0x5c>
		err = bt_mesh_adv_start(&fast_adv_param, (60 * MSEC_PER_SEC),
   155f8:	2303      	movs	r3, #3
   155fa:	4a77      	ldr	r2, [pc, #476]	; (157d8 <bt_mesh_proxy_adv_start+0x2a0>)
   155fc:	4878      	ldr	r0, [pc, #480]	; (157e0 <bt_mesh_proxy_adv_start+0x2a8>)
   155fe:	f64e 2160 	movw	r1, #60000	; 0xea60
   15602:	f7fc fc75 	bl	11ef0 <bt_mesh_adv_start>
		if (!err) {
   15606:	4604      	mov	r4, r0
   15608:	2800      	cmp	r0, #0
   1560a:	d1ef      	bne.n	155ec <bt_mesh_proxy_adv_start+0xb4>
			prov_fast_adv = false;
   1560c:	7028      	strb	r0, [r5, #0]
   1560e:	e7ed      	b.n	155ec <bt_mesh_proxy_adv_start+0xb4>
	if (bt_mesh_is_provisioned()) {
   15610:	f010 f909 	bl	25826 <bt_mesh_is_provisioned>
   15614:	2800      	cmp	r0, #0
   15616:	f000 80d1 	beq.w	157bc <bt_mesh_proxy_adv_start+0x284>
	if (!beacon_sub) {
   1561a:	4e72      	ldr	r6, [pc, #456]	; (157e4 <bt_mesh_proxy_adv_start+0x2ac>)
   1561c:	6830      	ldr	r0, [r6, #0]
   1561e:	b150      	cbz	r0, 15636 <bt_mesh_proxy_adv_start+0xfe>
	sub = beacon_sub;
   15620:	6834      	ldr	r4, [r6, #0]
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   15622:	f64f 75ff 	movw	r5, #65535	; 0xffff
   15626:	8ba3      	ldrh	r3, [r4, #28]
   15628:	42ab      	cmp	r3, r5
   1562a:	d020      	beq.n	1566e <bt_mesh_proxy_adv_start+0x136>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   1562c:	7fe3      	ldrb	r3, [r4, #31]
   1562e:	2b01      	cmp	r3, #1
   15630:	d119      	bne.n	15666 <bt_mesh_proxy_adv_start+0x12e>
			beacon_sub = sub;
   15632:	6034      	str	r4, [r6, #0]
			return sub;
   15634:	e004      	b.n	15640 <bt_mesh_proxy_adv_start+0x108>
		beacon_sub = bt_mesh_subnet_next(NULL);
   15636:	f7f7 fbd9 	bl	cdec <bt_mesh_subnet_next>
   1563a:	6030      	str	r0, [r6, #0]
		if (!beacon_sub) {
   1563c:	2800      	cmp	r0, #0
   1563e:	d1ef      	bne.n	15620 <bt_mesh_proxy_adv_start+0xe8>
	if (conn_count == CONFIG_BT_MAX_CONN) {
   15640:	4b69      	ldr	r3, [pc, #420]	; (157e8 <bt_mesh_proxy_adv_start+0x2b0>)
   15642:	681b      	ldr	r3, [r3, #0]
   15644:	2b03      	cmp	r3, #3
   15646:	f000 80bc 	beq.w	157c2 <bt_mesh_proxy_adv_start+0x28a>
	sub = beacon_sub ? beacon_sub : bt_mesh_subnet_next(beacon_sub);
   1564a:	6835      	ldr	r5, [r6, #0]
   1564c:	b9bd      	cbnz	r5, 1567e <bt_mesh_proxy_adv_start+0x146>
   1564e:	4628      	mov	r0, r5
   15650:	f7f7 fbcc 	bl	cdec <bt_mesh_subnet_next>
	if (!sub) {
   15654:	4605      	mov	r5, r0
   15656:	b990      	cbnz	r0, 1567e <bt_mesh_proxy_adv_start+0x146>
		BT_WARN("No subnets to advertise on");
   15658:	2157      	movs	r1, #87	; 0x57
   1565a:	4864      	ldr	r0, [pc, #400]	; (157ec <bt_mesh_proxy_adv_start+0x2b4>)
   1565c:	f00c fc35 	bl	21eca <printk>
		return -ENOENT;
   15660:	f06f 0401 	mvn.w	r4, #1
   15664:	e7c2      	b.n	155ec <bt_mesh_proxy_adv_start+0xb4>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   15666:	f010 f923 	bl	258b0 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   1566a:	2801      	cmp	r0, #1
   1566c:	d0e1      	beq.n	15632 <bt_mesh_proxy_adv_start+0xfa>
		sub = bt_mesh_subnet_next(sub);
   1566e:	4620      	mov	r0, r4
   15670:	f7f7 fbbc 	bl	cdec <bt_mesh_subnet_next>
	} while (sub != beacon_sub);
   15674:	6833      	ldr	r3, [r6, #0]
   15676:	4298      	cmp	r0, r3
		sub = bt_mesh_subnet_next(sub);
   15678:	4604      	mov	r4, r0
	} while (sub != beacon_sub);
   1567a:	d1d4      	bne.n	15626 <bt_mesh_proxy_adv_start+0xee>
   1567c:	e7e0      	b.n	15640 <bt_mesh_proxy_adv_start+0x108>
	int count = 0;
   1567e:	2300      	movs	r3, #0
	(void)bt_mesh_subnet_find(sub_count_cb, &count);
   15680:	a902      	add	r1, sp, #8
   15682:	485b      	ldr	r0, [pc, #364]	; (157f0 <bt_mesh_proxy_adv_start+0x2b8>)
	int count = 0;
   15684:	9302      	str	r3, [sp, #8]
	(void)bt_mesh_subnet_find(sub_count_cb, &count);
   15686:	f7f7 fb8f 	bl	cda8 <bt_mesh_subnet_find>
	return count;
   1568a:	9f02      	ldr	r7, [sp, #8]
	if (subnet_count > 1) {
   1568c:	2f01      	cmp	r7, #1
   1568e:	f340 808b 	ble.w	157a8 <bt_mesh_proxy_adv_start+0x270>
		max_timeout = NODE_ID_TIMEOUT / MAX(subnet_count, 6);
   15692:	2f06      	cmp	r7, #6
   15694:	bfb8      	it	lt
   15696:	2706      	movlt	r7, #6
   15698:	f64e 2360 	movw	r3, #60000	; 0xea60
   1569c:	fbb3 f7f7 	udiv	r7, r3, r7
		max_timeout = MAX(max_timeout, 1 * MSEC_PER_SEC);
   156a0:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   156a4:	bf38      	it	cc
   156a6:	f44f 777a 	movcc.w	r7, #1000	; 0x3e8
	if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
   156aa:	7fec      	ldrb	r4, [r5, #31]
   156ac:	2c01      	cmp	r4, #1
   156ae:	f040 8082 	bne.w	157b6 <bt_mesh_proxy_adv_start+0x27e>
   156b2:	f013 f8da 	bl	2886a <z_impl_k_uptime_ticks>
   156b6:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   156ba:	fba0 890e 	umull	r8, r9, r0, lr
   156be:	fb0e 9901 	mla	r9, lr, r1, r9
   156c2:	ea4f 32d8 	mov.w	r2, r8, lsr #15
		uint32_t active = k_uptime_get_32() - sub->node_id_start;
   156c6:	6a2b      	ldr	r3, [r5, #32]
   156c8:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
   156cc:	1ad0      	subs	r0, r2, r3
		if (active < NODE_ID_TIMEOUT) {
   156ce:	f64e 215f 	movw	r1, #59999	; 0xea5f
   156d2:	4288      	cmp	r0, r1
   156d4:	f04f 0c00 	mov.w	ip, #0
   156d8:	d869      	bhi.n	157ae <bt_mesh_proxy_adv_start+0x276>
	proxy_svc_data[2] = ID_TYPE_NODE;
   156da:	f8df 8120 	ldr.w	r8, [pc, #288]	; 157fc <bt_mesh_proxy_adv_start+0x2c4>
			remaining = NODE_ID_TIMEOUT - active;
   156de:	f503 476a 	add.w	r7, r3, #59904	; 0xea00
   156e2:	3760      	adds	r7, #96	; 0x60
	err = bt_rand(proxy_svc_data + 11, 8);
   156e4:	2108      	movs	r1, #8
   156e6:	f108 000b 	add.w	r0, r8, #11
	proxy_svc_data[2] = ID_TYPE_NODE;
   156ea:	f888 4002 	strb.w	r4, [r8, #2]
			remaining = NODE_ID_TIMEOUT - active;
   156ee:	1abf      	subs	r7, r7, r2
	err = bt_rand(proxy_svc_data + 11, 8);
   156f0:	f011 fe11 	bl	27316 <bt_rand>
	if (err) {
   156f4:	4604      	mov	r4, r0
   156f6:	bb88      	cbnz	r0, 1575c <bt_mesh_proxy_adv_start+0x224>
	(void)memset(tmp, 0, 6);
   156f8:	4601      	mov	r1, r0
   156fa:	2206      	movs	r2, #6
   156fc:	a802      	add	r0, sp, #8
   156fe:	f00e fd50 	bl	241a2 <memset>
	memcpy(tmp + 6, proxy_svc_data + 11, 8);
   15702:	2208      	movs	r2, #8
   15704:	f108 010b 	add.w	r1, r8, #11
   15708:	f10d 000e 	add.w	r0, sp, #14
   1570c:	f00e fd1f 	bl	2414e <memcpy>
	sys_put_be16(bt_mesh_primary_addr(), tmp + 14);
   15710:	f7fa f92e 	bl	f970 <bt_mesh_primary_addr>
   15714:	ba40      	rev16	r0, r0
   15716:	f8ad 0016 	strh.w	r0, [sp, #22]
	err = bt_encrypt_be(sub->keys[SUBNET_KEY_TX_IDX(sub)].identity, tmp,
   1571a:	7fa8      	ldrb	r0, [r5, #30]
   1571c:	aa02      	add	r2, sp, #8
   1571e:	2802      	cmp	r0, #2
   15720:	bf0c      	ite	eq
   15722:	20c0      	moveq	r0, #192	; 0xc0
   15724:	2066      	movne	r0, #102	; 0x66
   15726:	4611      	mov	r1, r2
   15728:	4428      	add	r0, r5
   1572a:	f011 fdf6 	bl	2731a <bt_encrypt_be>
	if (err) {
   1572e:	4604      	mov	r4, r0
   15730:	b9a0      	cbnz	r0, 1575c <bt_mesh_proxy_adv_start+0x224>
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
   15732:	2208      	movs	r2, #8
   15734:	a904      	add	r1, sp, #16
   15736:	f108 0003 	add.w	r0, r8, #3
   1573a:	f00e fd08 	bl	2414e <memcpy>
	err = bt_mesh_adv_start(&fast_adv_param, duration, node_id_ad,
   1573e:	e9cd 4400 	strd	r4, r4, [sp]
   15742:	2303      	movs	r3, #3
   15744:	4a2b      	ldr	r2, [pc, #172]	; (157f4 <bt_mesh_proxy_adv_start+0x2bc>)
   15746:	4826      	ldr	r0, [pc, #152]	; (157e0 <bt_mesh_proxy_adv_start+0x2a8>)
   15748:	4639      	mov	r1, r7
   1574a:	f7fc fbd1 	bl	11ef0 <bt_mesh_adv_start>
	if (err) {
   1574e:	4604      	mov	r4, r0
   15750:	b120      	cbz	r0, 1575c <bt_mesh_proxy_adv_start+0x224>
		BT_WARN("Failed to advertise using Node ID (err %d)", err);
   15752:	4602      	mov	r2, r0
   15754:	2157      	movs	r1, #87	; 0x57
   15756:	4828      	ldr	r0, [pc, #160]	; (157f8 <bt_mesh_proxy_adv_start+0x2c0>)
   15758:	f00c fbb7 	bl	21eca <printk>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED) {
   1575c:	f895 801f 	ldrb.w	r8, [r5, #31]
   15760:	f1b8 0f00 	cmp.w	r8, #0
   15764:	d11b      	bne.n	1579e <bt_mesh_proxy_adv_start+0x266>
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
   15766:	7fa9      	ldrb	r1, [r5, #30]
	proxy_svc_data[2] = ID_TYPE_NET;
   15768:	4824      	ldr	r0, [pc, #144]	; (157fc <bt_mesh_proxy_adv_start+0x2c4>)
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
   1576a:	2902      	cmp	r1, #2
   1576c:	bf0c      	ite	eq
   1576e:	21b8      	moveq	r1, #184	; 0xb8
   15770:	215e      	movne	r1, #94	; 0x5e
	proxy_svc_data[2] = ID_TYPE_NET;
   15772:	f880 8002 	strb.w	r8, [r0, #2]
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
   15776:	2208      	movs	r2, #8
   15778:	4429      	add	r1, r5
   1577a:	3003      	adds	r0, #3
   1577c:	f00e fce7 	bl	2414e <memcpy>
	err = bt_mesh_adv_start(&slow_adv_param, duration, net_id_ad,
   15780:	e9cd 8800 	strd	r8, r8, [sp]
   15784:	2303      	movs	r3, #3
   15786:	4a1e      	ldr	r2, [pc, #120]	; (15800 <bt_mesh_proxy_adv_start+0x2c8>)
   15788:	4814      	ldr	r0, [pc, #80]	; (157dc <bt_mesh_proxy_adv_start+0x2a4>)
   1578a:	4639      	mov	r1, r7
   1578c:	f7fc fbb0 	bl	11ef0 <bt_mesh_adv_start>
	if (err) {
   15790:	4604      	mov	r4, r0
   15792:	b120      	cbz	r0, 1579e <bt_mesh_proxy_adv_start+0x266>
		BT_WARN("Failed to advertise using Network ID (err %d)", err);
   15794:	4602      	mov	r2, r0
   15796:	2157      	movs	r1, #87	; 0x57
   15798:	481a      	ldr	r0, [pc, #104]	; (15804 <bt_mesh_proxy_adv_start+0x2cc>)
   1579a:	f00c fb96 	bl	21eca <printk>
	beacon_sub = bt_mesh_subnet_next(beacon_sub);
   1579e:	6830      	ldr	r0, [r6, #0]
   157a0:	f7f7 fb24 	bl	cdec <bt_mesh_subnet_next>
   157a4:	6030      	str	r0, [r6, #0]
	return err;
   157a6:	e721      	b.n	155ec <bt_mesh_proxy_adv_start+0xb4>
	int32_t remaining = SYS_FOREVER_MS;
   157a8:	f04f 37ff 	mov.w	r7, #4294967295
   157ac:	e77d      	b.n	156aa <bt_mesh_proxy_adv_start+0x172>
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   157ae:	f885 c01f 	strb.w	ip, [r5, #31]
	sub->node_id_start = 0U;
   157b2:	f8c5 c020 	str.w	ip, [r5, #32]
	int err = -EBUSY;
   157b6:	f06f 040f 	mvn.w	r4, #15
   157ba:	e7cf      	b.n	1575c <bt_mesh_proxy_adv_start+0x224>
	return -ENOTSUP;
   157bc:	f06f 0422 	mvn.w	r4, #34	; 0x22
   157c0:	e714      	b.n	155ec <bt_mesh_proxy_adv_start+0xb4>
		return -ENOMEM;
   157c2:	f06f 040b 	mvn.w	r4, #11
   157c6:	e711      	b.n	155ec <bt_mesh_proxy_adv_start+0xb4>
   157c8:	20004522 	.word	0x20004522
   157cc:	20000df3 	.word	0x20000df3
   157d0:	0002ed01 	.word	0x0002ed01
   157d4:	20004523 	.word	0x20004523
   157d8:	00029984 	.word	0x00029984
   157dc:	0002999c 	.word	0x0002999c
   157e0:	00029940 	.word	0x00029940
   157e4:	20002eac 	.word	0x20002eac
   157e8:	20002eb0 	.word	0x20002eb0
   157ec:	0002ed2d 	.word	0x0002ed2d
   157f0:	00026aa7 	.word	0x00026aa7
   157f4:	0002996c 	.word	0x0002996c
   157f8:	0002ed4d 	.word	0x0002ed4d
   157fc:	20000e07 	.word	0x20000e07
   15800:	00029954 	.word	0x00029954
   15804:	0002ed7d 	.word	0x0002ed7d

00015808 <bt_mesh_proxy_init>:
	.connected = proxy_connected,
	.disconnected = proxy_disconnected,
};

int bt_mesh_proxy_init(void)
{
   15808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Initialize the client receive buffers */
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		client->buf.size = CLIENT_BUF_SIZE;
   1580c:	4c17      	ldr	r4, [pc, #92]	; (1586c <bt_mesh_proxy_init+0x64>)
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   1580e:	4d18      	ldr	r5, [pc, #96]	; (15870 <bt_mesh_proxy_init+0x68>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15810:	4e18      	ldr	r6, [pc, #96]	; (15874 <bt_mesh_proxy_init+0x6c>)
   15812:	6525      	str	r5, [r4, #80]	; 0x50
   15814:	2730      	movs	r7, #48	; 0x30
		client->buf.size = CLIENT_BUF_SIZE;
   15816:	f04f 0844 	mov.w	r8, #68	; 0x44
   1581a:	463a      	mov	r2, r7
   1581c:	2100      	movs	r1, #0
   1581e:	f104 0018 	add.w	r0, r4, #24
   15822:	f8a4 804e 	strh.w	r8, [r4, #78]	; 0x4e
   15826:	f00e fcbc 	bl	241a2 <memset>
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   1582a:	eb05 0308 	add.w	r3, r5, r8
   1582e:	463a      	mov	r2, r7
   15830:	2100      	movs	r1, #0
   15832:	f104 0070 	add.w	r0, r4, #112	; 0x70
   15836:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   1583a:	61e6      	str	r6, [r4, #28]
		client->buf.size = CLIENT_BUF_SIZE;
   1583c:	f8a4 80a6 	strh.w	r8, [r4, #166]	; 0xa6
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   15840:	3588      	adds	r5, #136	; 0x88
   15842:	f00e fcae 	bl	241a2 <memset>
   15846:	463a      	mov	r2, r7
   15848:	2100      	movs	r1, #0
   1584a:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   1584e:	6766      	str	r6, [r4, #116]	; 0x74
		client->buf.size = CLIENT_BUF_SIZE;
   15850:	f8a4 80fe 	strh.w	r8, [r4, #254]	; 0xfe
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   15854:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   15858:	f00e fca3 	bl	241a2 <memset>

		k_delayed_work_init(&client->sar_timer, proxy_sar_timeout);
	}

	bt_conn_cb_register(&conn_callbacks);
   1585c:	4806      	ldr	r0, [pc, #24]	; (15878 <bt_mesh_proxy_init+0x70>)
   1585e:	f8c4 60cc 	str.w	r6, [r4, #204]	; 0xcc
   15862:	f7f2 fa11 	bl	7c88 <bt_conn_cb_register>

	return 0;
}
   15866:	2000      	movs	r0, #0
   15868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1586c:	20000350 	.word	0x20000350
   15870:	20008d6c 	.word	0x20008d6c
   15874:	00014c81 	.word	0x00014c81
   15878:	200007dc 	.word	0x200007dc

0001587c <bt_mesh_proxy_on_idle>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1587c:	4b09      	ldr	r3, [pc, #36]	; (158a4 <bt_mesh_proxy_on_idle+0x28>)
   1587e:	f3bf 8f5b 	dmb	ish
   15882:	681b      	ldr	r3, [r3, #0]
   15884:	f3bf 8f5b 	dmb	ish

void bt_mesh_proxy_on_idle(struct bt_mesh_proxy_idle_cb *cb)
{
	if (!atomic_get(&pending_notifications)) {
   15888:	b90b      	cbnz	r3, 1588e <bt_mesh_proxy_on_idle+0x12>
		cb->cb();
   1588a:	6843      	ldr	r3, [r0, #4]
   1588c:	4718      	bx	r3
	parent->next = child;
   1588e:	2300      	movs	r3, #0
   15890:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   15892:	4b05      	ldr	r3, [pc, #20]	; (158a8 <bt_mesh_proxy_on_idle+0x2c>)
   15894:	685a      	ldr	r2, [r3, #4]
   15896:	b912      	cbnz	r2, 1589e <bt_mesh_proxy_on_idle+0x22>
	list->head = node;
   15898:	e9c3 0000 	strd	r0, r0, [r3]
   1589c:	4770      	bx	lr
	parent->next = child;
   1589e:	6010      	str	r0, [r2, #0]
	list->tail = node;
   158a0:	6058      	str	r0, [r3, #4]
		return;
	}

	sys_slist_append(&idle_waiters, &cb->n);
}
   158a2:	4770      	bx	lr
   158a4:	20002ebc 	.word	0x20002ebc
   158a8:	20002eb4 	.word	0x20002eb4

000158ac <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   158ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
   158b0:	4f11      	ldr	r7, [pc, #68]	; (158f8 <mayfly_init+0x4c>)
   158b2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 158fc <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
   158b6:	2604      	movs	r6, #4
	while (callee_id--) {
   158b8:	3e01      	subs	r6, #1
   158ba:	b2f6      	uxtb	r6, r6
   158bc:	2eff      	cmp	r6, #255	; 0xff
   158be:	d019      	beq.n	158f4 <mayfly_init+0x48>
   158c0:	b233      	sxth	r3, r6
   158c2:	ea4f 0883 	mov.w	r8, r3, lsl #2
   158c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   158ca:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
   158cc:	2404      	movs	r4, #4
   158ce:	f04f 0a0c 	mov.w	sl, #12
   158d2:	e00a      	b.n	158ea <mayfly_init+0x3e>
			memq_init(&mfl[callee_id][caller_id],
   158d4:	fb1a 5104 	smlabb	r1, sl, r4, r5
   158d8:	1d0a      	adds	r2, r1, #4
   158da:	eb04 0008 	add.w	r0, r4, r8
   158de:	443a      	add	r2, r7
   158e0:	4439      	add	r1, r7
   158e2:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
   158e6:	f011 fa1c 	bl	26d22 <memq_init>
		while (caller_id--) {
   158ea:	3c01      	subs	r4, #1
   158ec:	b2e4      	uxtb	r4, r4
   158ee:	2cff      	cmp	r4, #255	; 0xff
   158f0:	d1f0      	bne.n	158d4 <mayfly_init+0x28>
   158f2:	e7e1      	b.n	158b8 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   158f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   158f8:	20002f40 	.word	0x20002f40
   158fc:	20002ec0 	.word	0x20002ec0

00015900 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   15900:	b4f0      	push	{r4, r5, r6, r7}
   15902:	2430      	movs	r4, #48	; 0x30
   15904:	4b10      	ldr	r3, [pc, #64]	; (15948 <mayfly_enable+0x48>)
   15906:	270c      	movs	r7, #12
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   15908:	434c      	muls	r4, r1
   1590a:	fb07 4400 	mla	r4, r7, r0, r4
{
   1590e:	4605      	mov	r5, r0
   15910:	460e      	mov	r6, r1
		if (mft[callee_id][caller_id].enable_req ==
   15912:	4423      	add	r3, r4
	if (enable) {
   15914:	b152      	cbz	r2, 1592c <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
   15916:	7a59      	ldrb	r1, [r3, #9]
   15918:	7a18      	ldrb	r0, [r3, #8]
   1591a:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   1591c:	bf04      	itt	eq
   1591e:	3101      	addeq	r1, #1
   15920:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   15922:	4628      	mov	r0, r5
   15924:	4631      	mov	r1, r6

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   15926:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
   15928:	f006 bcaa 	b.w	1c280 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   1592c:	7a9c      	ldrb	r4, [r3, #10]
   1592e:	7ada      	ldrb	r2, [r3, #11]
   15930:	42a2      	cmp	r2, r4
   15932:	d107      	bne.n	15944 <mayfly_enable+0x44>
			mft[callee_id][caller_id].disable_req++;
   15934:	3201      	adds	r2, #1
   15936:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   15938:	4b04      	ldr	r3, [pc, #16]	; (1594c <mayfly_enable+0x4c>)
   1593a:	2201      	movs	r2, #1
   1593c:	545a      	strb	r2, [r3, r1]
}
   1593e:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
   15940:	f006 bcda 	b.w	1c2f8 <mayfly_pend>
}
   15944:	bcf0      	pop	{r4, r5, r6, r7}
   15946:	4770      	bx	lr
   15948:	20002f40 	.word	0x20002f40
   1594c:	20004524 	.word	0x20004524

00015950 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   15950:	b570      	push	{r4, r5, r6, lr}
   15952:	4606      	mov	r6, r0
   15954:	460d      	mov	r5, r1
   15956:	461c      	mov	r4, r3
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   15958:	b1a2      	cbz	r2, 15984 <mayfly_enqueue+0x34>
   1595a:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
   1595c:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   1595e:	7820      	ldrb	r0, [r4, #0]
   15960:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
   15962:	f010 0003 	ands.w	r0, r0, #3
   15966:	d02c      	beq.n	159c2 <mayfly_enqueue+0x72>
		if (chain) {
   15968:	b31b      	cbz	r3, 159b2 <mayfly_enqueue+0x62>
			if (state != 1U) {
   1596a:	2801      	cmp	r0, #1
   1596c:	d028      	beq.n	159c0 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
   1596e:	3201      	adds	r2, #1
   15970:	b2d2      	uxtb	r2, r2
   15972:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   15974:	4b1c      	ldr	r3, [pc, #112]	; (159e8 <mayfly_enqueue+0x98>)
   15976:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   15978:	4629      	mov	r1, r5
   1597a:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   1597c:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   1597e:	f006 fcbb 	bl	1c2f8 <mayfly_pend>
   15982:	e01c      	b.n	159be <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   15984:	f012 f9e2 	bl	27d4c <mayfly_prio_is_equal>
   15988:	2800      	cmp	r0, #0
   1598a:	d0e6      	beq.n	1595a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   1598c:	4629      	mov	r1, r5
   1598e:	4630      	mov	r0, r6
   15990:	f006 fc94 	bl	1c2bc <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   15994:	2800      	cmp	r0, #0
   15996:	d0e0      	beq.n	1595a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   15998:	2330      	movs	r3, #48	; 0x30
   1599a:	220c      	movs	r2, #12
   1599c:	436b      	muls	r3, r5
   1599e:	fb02 3306 	mla	r3, r2, r6, r3
   159a2:	4a12      	ldr	r2, [pc, #72]	; (159ec <mayfly_enqueue+0x9c>)
   159a4:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
   159a6:	7a93      	ldrb	r3, [r2, #10]
   159a8:	7ad2      	ldrb	r2, [r2, #11]
   159aa:	1a9b      	subs	r3, r3, r2
   159ac:	bf18      	it	ne
   159ae:	2301      	movne	r3, #1
   159b0:	e7d4      	b.n	1595c <mayfly_enqueue+0xc>
		m->_req = ack + 2;
   159b2:	3202      	adds	r2, #2
   159b4:	b2d2      	uxtb	r2, r2
   159b6:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
   159b8:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   159bc:	4798      	blx	r3

	return 0;
   159be:	2000      	movs	r0, #0
}
   159c0:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
   159c2:	2b00      	cmp	r3, #0
   159c4:	d0f8      	beq.n	159b8 <mayfly_enqueue+0x68>
	m->_req = ack + 1;
   159c6:	3201      	adds	r2, #1
   159c8:	b2d2      	uxtb	r2, r2
   159ca:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   159cc:	2304      	movs	r3, #4
   159ce:	2230      	movs	r2, #48	; 0x30
   159d0:	fb12 3205 	smlabb	r2, r2, r5, r3
   159d4:	230c      	movs	r3, #12
   159d6:	fb13 2306 	smlabb	r3, r3, r6, r2
   159da:	4a04      	ldr	r2, [pc, #16]	; (159ec <mayfly_enqueue+0x9c>)
   159dc:	6860      	ldr	r0, [r4, #4]
   159de:	441a      	add	r2, r3
   159e0:	4621      	mov	r1, r4
   159e2:	f011 f9ac 	bl	26d3e <memq_enqueue>
   159e6:	e7c5      	b.n	15974 <mayfly_enqueue+0x24>
   159e8:	20004524 	.word	0x20004524
   159ec:	20002f40 	.word	0x20002f40

000159f0 <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
   159f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   159f4:	4b57      	ldr	r3, [pc, #348]	; (15b54 <mayfly_run+0x164>)
   159f6:	5c1a      	ldrb	r2, [r3, r0]
{
   159f8:	b089      	sub	sp, #36	; 0x24
   159fa:	4605      	mov	r5, r0
	if (!mfp[callee_id]) {
   159fc:	2a00      	cmp	r2, #0
   159fe:	f000 80a2 	beq.w	15b46 <mayfly_run+0x156>
		return;
	}
	mfp[callee_id] = 0U;
   15a02:	2600      	movs	r6, #0
   15a04:	541e      	strb	r6, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   15a06:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   15a0a:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   15a0c:	f8df b148 	ldr.w	fp, [pc, #328]	; 15b58 <mayfly_run+0x168>
   15a10:	9304      	str	r3, [sp, #16]
   15a12:	2404      	movs	r4, #4
   15a14:	233c      	movs	r3, #60	; 0x3c
   15a16:	fb13 4300 	smlabb	r3, r3, r0, r4
   15a1a:	445b      	add	r3, fp
   15a1c:	9303      	str	r3, [sp, #12]
	uint8_t disable = 0U;
   15a1e:	9600      	str	r6, [sp, #0]
   15a20:	46d9      	mov	r9, fp
	while (caller_id--) {
   15a22:	3c01      	subs	r4, #1
   15a24:	b2e4      	uxtb	r4, r4
   15a26:	2cff      	cmp	r4, #255	; 0xff
   15a28:	d10c      	bne.n	15a44 <mayfly_run+0x54>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   15a2a:	9b00      	ldr	r3, [sp, #0]
   15a2c:	2b00      	cmp	r3, #0
   15a2e:	f000 808a 	beq.w	15b46 <mayfly_run+0x156>
   15a32:	2e00      	cmp	r6, #0
   15a34:	f040 8087 	bne.w	15b46 <mayfly_run+0x156>
		mayfly_enable_cb(callee_id, callee_id, 0);
   15a38:	4632      	mov	r2, r6
   15a3a:	4629      	mov	r1, r5
   15a3c:	4628      	mov	r0, r5
   15a3e:	f006 fc1f 	bl	1c280 <mayfly_enable_cb>
   15a42:	e080      	b.n	15b46 <mayfly_run+0x156>
		struct mayfly *m = 0;
   15a44:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   15a46:	270c      	movs	r7, #12
		struct mayfly *m = 0;
   15a48:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   15a4a:	4367      	muls	r7, r4
   15a4c:	2330      	movs	r3, #48	; 0x30
   15a4e:	fb03 7305 	mla	r3, r3, r5, r7
   15a52:	eb09 0103 	add.w	r1, r9, r3
   15a56:	aa07      	add	r2, sp, #28
   15a58:	f859 0003 	ldr.w	r0, [r9, r3]
   15a5c:	6849      	ldr	r1, [r1, #4]
   15a5e:	f011 f975 	bl	26d4c <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
   15a62:	9a04      	ldr	r2, [sp, #16]
   15a64:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   15a68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   15a6c:	444b      	add	r3, r9
   15a6e:	e9cd 7301 	strd	r7, r3, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
   15a72:	4682      	mov	sl, r0
		while (link) {
   15a74:	f1ba 0f00 	cmp.w	sl, #0
   15a78:	d047      	beq.n	15b0a <mayfly_run+0x11a>
			state = (m->_req - m->_ack) & 0x03;
   15a7a:	9b07      	ldr	r3, [sp, #28]
   15a7c:	f893 8000 	ldrb.w	r8, [r3]
   15a80:	785a      	ldrb	r2, [r3, #1]
   15a82:	eba8 0802 	sub.w	r8, r8, r2
   15a86:	f008 0803 	and.w	r8, r8, #3
			if (state == 1U) {
   15a8a:	f1b8 0f01 	cmp.w	r8, #1
   15a8e:	d104      	bne.n	15a9a <mayfly_run+0xaa>
				m->_ack--;
   15a90:	3a01      	subs	r2, #1
   15a92:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
   15a94:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
   15a98:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
   15a9a:	9f07      	ldr	r7, [sp, #28]
	req = m->_req;
   15a9c:	783b      	ldrb	r3, [r7, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   15a9e:	787a      	ldrb	r2, [r7, #1]
	req = m->_req;
   15aa0:	b2db      	uxtb	r3, r3
	if (((req - m->_ack) & 0x03) != 1U) {
   15aa2:	1a9a      	subs	r2, r3, r2
   15aa4:	f002 0203 	and.w	r2, r2, #3
   15aa8:	2a01      	cmp	r2, #1
   15aaa:	9305      	str	r3, [sp, #20]
   15aac:	d01b      	beq.n	15ae6 <mayfly_run+0xf6>
		memq_dequeue(mft[callee_id][caller_id].tail,
   15aae:	9b01      	ldr	r3, [sp, #4]
   15ab0:	9902      	ldr	r1, [sp, #8]
   15ab2:	2030      	movs	r0, #48	; 0x30
   15ab4:	fb00 3005 	mla	r0, r0, r5, r3
   15ab8:	4b27      	ldr	r3, [pc, #156]	; (15b58 <mayfly_run+0x168>)
   15aba:	4418      	add	r0, r3
   15abc:	2200      	movs	r2, #0
   15abe:	6840      	ldr	r0, [r0, #4]
   15ac0:	f011 f94c 	bl	26d5c <memq_dequeue>
		m->_ack = req;
   15ac4:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
   15ac6:	787a      	ldrb	r2, [r7, #1]
		m->_ack = req;
   15ac8:	707b      	strb	r3, [r7, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   15aca:	783b      	ldrb	r3, [r7, #0]
		m->_link = link;
   15acc:	f8c7 a004 	str.w	sl, [r7, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   15ad0:	1a9b      	subs	r3, r3, r2
   15ad2:	f003 0303 	and.w	r3, r3, #3
   15ad6:	2b01      	cmp	r3, #1
   15ad8:	d105      	bne.n	15ae6 <mayfly_run+0xf6>
			m->_ack = ack;
   15ada:	707a      	strb	r2, [r7, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   15adc:	4639      	mov	r1, r7
   15ade:	9a03      	ldr	r2, [sp, #12]
   15ae0:	4650      	mov	r0, sl
   15ae2:	f011 f92c 	bl	26d3e <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
   15ae6:	9a01      	ldr	r2, [sp, #4]
   15ae8:	2330      	movs	r3, #48	; 0x30
   15aea:	fb03 2305 	mla	r3, r3, r5, r2
   15aee:	eb09 0103 	add.w	r1, r9, r3
   15af2:	aa07      	add	r2, sp, #28
   15af4:	6849      	ldr	r1, [r1, #4]
   15af6:	f859 0003 	ldr.w	r0, [r9, r3]
   15afa:	f011 f927 	bl	26d4c <memq_peek>
			if (state == 1U) {
   15afe:	f1b8 0f01 	cmp.w	r8, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   15b02:	4682      	mov	sl, r0
			if (state == 1U) {
   15b04:	d1b6      	bne.n	15a74 <mayfly_run+0x84>
				if (caller_id || link) {
   15b06:	b9bc      	cbnz	r4, 15b38 <mayfly_run+0x148>
   15b08:	b9b0      	cbnz	r0, 15b38 <mayfly_run+0x148>
		if (mft[callee_id][caller_id].disable_req !=
   15b0a:	2230      	movs	r2, #48	; 0x30
   15b0c:	4912      	ldr	r1, [pc, #72]	; (15b58 <mayfly_run+0x168>)
   15b0e:	230c      	movs	r3, #12
   15b10:	436a      	muls	r2, r5
   15b12:	fb03 2204 	mla	r2, r3, r4, r2
   15b16:	440a      	add	r2, r1
   15b18:	7a91      	ldrb	r1, [r2, #10]
   15b1a:	7ad0      	ldrb	r0, [r2, #11]
   15b1c:	4288      	cmp	r0, r1
   15b1e:	d115      	bne.n	15b4c <mayfly_run+0x15c>
		if (mft[callee_id][caller_id].enable_req !=
   15b20:	2230      	movs	r2, #48	; 0x30
   15b22:	436a      	muls	r2, r5
   15b24:	fb03 2304 	mla	r3, r3, r4, r2
   15b28:	445b      	add	r3, fp
   15b2a:	7a1a      	ldrb	r2, [r3, #8]
   15b2c:	7a59      	ldrb	r1, [r3, #9]
   15b2e:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
   15b30:	bf1c      	itt	ne
   15b32:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
   15b34:	2601      	movne	r6, #1
   15b36:	e774      	b.n	15a22 <mayfly_run+0x32>
					mfp[callee_id] = 1U;
   15b38:	4b06      	ldr	r3, [pc, #24]	; (15b54 <mayfly_run+0x164>)
   15b3a:	2201      	movs	r2, #1
					mayfly_pend(callee_id, callee_id);
   15b3c:	4629      	mov	r1, r5
   15b3e:	4628      	mov	r0, r5
					mfp[callee_id] = 1U;
   15b40:	555a      	strb	r2, [r3, r5]
					mayfly_pend(callee_id, callee_id);
   15b42:	f006 fbd9 	bl	1c2f8 <mayfly_pend>
	}
}
   15b46:	b009      	add	sp, #36	; 0x24
   15b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
   15b4c:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
   15b4e:	2201      	movs	r2, #1
   15b50:	9200      	str	r2, [sp, #0]
   15b52:	e7e5      	b.n	15b20 <mayfly_run+0x130>
   15b54:	20004524 	.word	0x20004524
   15b58:	20002f40 	.word	0x20002f40

00015b5c <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
   15b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b60:	b08f      	sub	sp, #60	; 0x3c
	uint8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
   15b62:	7fc3      	ldrb	r3, [r0, #31]
   15b64:	9304      	str	r3, [sp, #16]
{
   15b66:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
   15b68:	2b00      	cmp	r3, #0
   15b6a:	f040 83cf 	bne.w	1630c <ticker_job+0x7b0>
		return;
	}
	instance->job_guard = 1U;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
   15b6e:	6943      	ldr	r3, [r0, #20]
   15b70:	9307      	str	r3, [sp, #28]

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   15b72:	7ac1      	ldrb	r1, [r0, #11]
   15b74:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
   15b76:	2201      	movs	r2, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   15b78:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
   15b7a:	7782      	strb	r2, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   15b7c:	d059      	beq.n	15c32 <ticker_job+0xd6>
	uint8_t idx = *ticks_elapsed_index + 1;
   15b7e:	4413      	add	r3, r2
   15b80:	b2db      	uxtb	r3, r3
		idx = 0U;
   15b82:	2b02      	cmp	r3, #2
   15b84:	bf08      	it	eq
   15b86:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   15b88:	7283      	strb	r3, [r0, #10]
		ticker_next_elapsed(&instance->ticks_elapsed_first);

		ticks_elapsed =
   15b8a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;

		flag_elapsed = 1U;
   15b8e:	9205      	str	r2, [sp, #20]
		ticks_elapsed =
   15b90:	68db      	ldr	r3, [r3, #12]
   15b92:	9301      	str	r3, [sp, #4]
		instance->ticks_current += ticks_elapsed;
   15b94:	9901      	ldr	r1, [sp, #4]
   15b96:	9b07      	ldr	r3, [sp, #28]
   15b98:	440b      	add	r3, r1
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   15b9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   15b9e:	6143      	str	r3, [r0, #20]
	flag_compare_update = 0U;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
   15ba0:	7f63      	ldrb	r3, [r4, #29]
   15ba2:	9306      	str	r3, [sp, #24]
	node = &instance->nodes[0];
   15ba4:	6823      	ldr	r3, [r4, #0]
   15ba6:	9309      	str	r3, [sp, #36]	; 0x24
	users = &instance->users[0];
   15ba8:	6863      	ldr	r3, [r4, #4]
   15baa:	930d      	str	r3, [sp, #52]	; 0x34
	pending = 0U;
   15bac:	2300      	movs	r3, #0
   15bae:	9308      	str	r3, [sp, #32]
	count_user = instance->count_user;
   15bb0:	f894 b009 	ldrb.w	fp, [r4, #9]
	insert_head = TICKER_NULL;
   15bb4:	23ff      	movs	r3, #255	; 0xff
   15bb6:	9303      	str	r3, [sp, #12]
	while (count_user--) {
   15bb8:	f10b 33ff 	add.w	r3, fp, #4294967295
   15bbc:	fa5f fb83 	uxtb.w	fp, r3
   15bc0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   15bc4:	d139      	bne.n	15c3a <ticker_job+0xde>

	/* Manage user operations (updates and deletions) in ticker list */
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
   15bc6:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
   15bc8:	9a06      	ldr	r2, [sp, #24]
   15bca:	1a9b      	subs	r3, r3, r2
   15bcc:	bf18      	it	ne
   15bce:	2301      	movne	r3, #1
   15bd0:	9302      	str	r3, [sp, #8]
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
   15bd2:	9b05      	ldr	r3, [sp, #20]
   15bd4:	2b00      	cmp	r3, #0
   15bd6:	f000 8299 	beq.w	1610c <ticker_job+0x5b0>
	ticks_now = cntr_cnt_get();
   15bda:	f005 ffa5 	bl	1bb28 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15bde:	9b07      	ldr	r3, [sp, #28]
	node = &instance->nodes[0];
   15be0:	f8dd 8004 	ldr.w	r8, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15be4:	1ac0      	subs	r0, r0, r3
	node = &instance->nodes[0];
   15be6:	6823      	ldr	r3, [r4, #0]
   15be8:	9309      	str	r3, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15bea:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	ticks_expired = 0U;
   15bee:	f04f 0a00 	mov.w	sl, #0
	while (instance->ticker_id_head != TICKER_NULL) {
   15bf2:	7f67      	ldrb	r7, [r4, #29]
   15bf4:	2fff      	cmp	r7, #255	; 0xff
   15bf6:	d00e      	beq.n	15c16 <ticker_job+0xba>
		ticker = &node[id_expired];
   15bf8:	b23e      	sxth	r6, r7
   15bfa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   15bfe:	0133      	lsls	r3, r6, #4
   15c00:	930a      	str	r3, [sp, #40]	; 0x28
   15c02:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   15c06:	189d      	adds	r5, r3, r2
		ticks_to_expire = ticker->ticks_to_expire;
   15c08:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   15c0a:	4543      	cmp	r3, r8
   15c0c:	f240 8137 	bls.w	15e7e <ticker_job+0x322>
			ticker->ticks_to_expire -= ticks_elapsed;
   15c10:	eba3 0308 	sub.w	r3, r3, r8
   15c14:	60ab      	str	r3, [r5, #8]
			flag_compare_update = 1U;
   15c16:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   15c1a:	9b02      	ldr	r3, [sp, #8]
		ticker_job_list_insert(instance, insert_head);
   15c1c:	4620      	mov	r0, r4
			flag_compare_update = 1U;
   15c1e:	42b9      	cmp	r1, r7
   15c20:	bf18      	it	ne
   15c22:	4613      	movne	r3, r2
		ticker_job_list_insert(instance, insert_head);
   15c24:	9903      	ldr	r1, [sp, #12]
			flag_compare_update = 1U;
   15c26:	9302      	str	r3, [sp, #8]
		ticker_job_list_insert(instance, insert_head);
   15c28:	f011 f8e2 	bl	26df0 <ticker_job_list_insert>
	nodes = &instance->nodes[0];
   15c2c:	6820      	ldr	r0, [r4, #0]
		ticker_id_head = instance->ticker_id_head;
   15c2e:	7f66      	ldrb	r6, [r4, #29]
		while (ticker_id_head != TICKER_NULL) {
   15c30:	e1e9      	b.n	16006 <ticker_job+0x4aa>
		flag_elapsed = 0U;
   15c32:	9b04      	ldr	r3, [sp, #16]
   15c34:	9305      	str	r3, [sp, #20]
		ticks_elapsed = 0U;
   15c36:	9301      	str	r3, [sp, #4]
   15c38:	e7b2      	b.n	15ba0 <ticker_job+0x44>
		user = &users[count_user];
   15c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15c3c:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
		user_ops = &user->user_op[0];
   15c40:	f8d8 3004 	ldr.w	r3, [r8, #4]
   15c44:	930a      	str	r3, [sp, #40]	; 0x28
		while (user->middle != user->last) {
   15c46:	f898 2003 	ldrb.w	r2, [r8, #3]
			user_op = &user_ops[user->middle];
   15c4a:	2134      	movs	r1, #52	; 0x34
		while (user->middle != user->last) {
   15c4c:	f898 7002 	ldrb.w	r7, [r8, #2]
   15c50:	4297      	cmp	r7, r2
   15c52:	d0b1      	beq.n	15bb8 <ticker_job+0x5c>
			user_op = &user_ops[user->middle];
   15c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			if (middle == user->count_user_op) {
   15c56:	f898 5000 	ldrb.w	r5, [r8]
			user_op = &user_ops[user->middle];
   15c5a:	fb17 f001 	smulbb	r0, r7, r1
   15c5e:	181e      	adds	r6, r3, r0
			middle = user->middle + 1;
   15c60:	1c7b      	adds	r3, r7, #1
   15c62:	b2db      	uxtb	r3, r3
				middle = 0U;
   15c64:	429d      	cmp	r5, r3
   15c66:	bf08      	it	eq
   15c68:	2300      	moveq	r3, #0
			user->middle = middle;
   15c6a:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   15c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15c70:	5c18      	ldrb	r0, [r3, r0]
   15c72:	2804      	cmp	r0, #4
   15c74:	d9ea      	bls.n	15c4c <ticker_job+0xf0>
			ticker = &node[user_op->id];
   15c76:	7871      	ldrb	r1, [r6, #1]
   15c78:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   15c7c:	011b      	lsls	r3, r3, #4
   15c7e:	930c      	str	r3, [sp, #48]	; 0x30
   15c80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15c84:	189d      	adds	r5, r3, r2
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   15c86:	2807      	cmp	r0, #7
			state = (ticker->req - ticker->ack) & 0xff;
   15c88:	f895 c002 	ldrb.w	ip, [r5, #2]
   15c8c:	786a      	ldrb	r2, [r5, #1]
   15c8e:	eba2 020c 	sub.w	r2, r2, ip
   15c92:	b2d2      	uxtb	r2, r2
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   15c94:	d80e      	bhi.n	15cb4 <ticker_job+0x158>
   15c96:	b16a      	cbz	r2, 15cb4 <ticker_job+0x158>
			    (state == 0U) ||
   15c98:	2805      	cmp	r0, #5
   15c9a:	d110      	bne.n	15cbe <ticker_job+0x162>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   15c9c:	6873      	ldr	r3, [r6, #4]
   15c9e:	b973      	cbnz	r3, 15cbe <ticker_job+0x162>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   15ca0:	68b3      	ldr	r3, [r6, #8]
   15ca2:	b963      	cbnz	r3, 15cbe <ticker_job+0x162>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   15ca4:	68f3      	ldr	r3, [r6, #12]
   15ca6:	b953      	cbnz	r3, 15cbe <ticker_job+0x162>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   15ca8:	6933      	ldr	r3, [r6, #16]
   15caa:	b943      	cbnz	r3, 15cbe <ticker_job+0x162>
			     (user_op->params.update.lazy == 0U) &&
   15cac:	6973      	ldr	r3, [r6, #20]
   15cae:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
   15cb2:	d104      	bne.n	15cbe <ticker_job+0x162>
				ticker_job_op_cb(user_op,
   15cb4:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   15cb6:	4630      	mov	r0, r6
   15cb8:	f011 f890 	bl	26ddc <ticker_job_op_cb>
   15cbc:	e7c3      	b.n	15c46 <ticker_job+0xea>
			if (state == 1U) {
   15cbe:	2a01      	cmp	r2, #1
   15cc0:	f040 80d2 	bne.w	15e68 <ticker_job+0x30c>
	previous = instance->ticker_id_head;
   15cc4:	7f63      	ldrb	r3, [r4, #29]
	node = &instance->nodes[0];
   15cc6:	f8d4 e000 	ldr.w	lr, [r4]
	previous = instance->ticker_id_head;
   15cca:	9302      	str	r3, [sp, #8]
	total = 0U;
   15ccc:	2700      	movs	r7, #0
	while (current != TICKER_NULL) {
   15cce:	2bff      	cmp	r3, #255	; 0xff
   15cd0:	d12e      	bne.n	15d30 <ticker_job+0x1d4>
		return 0;
   15cd2:	2700      	movs	r7, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   15cd4:	2805      	cmp	r0, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   15cd6:	60af      	str	r7, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   15cd8:	f040 80a3 	bne.w	15e22 <ticker_job+0x2c6>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   15cdc:	f8d4 9014 	ldr.w	r9, [r4, #20]
	ticks_now = cntr_cnt_get();
   15ce0:	f005 ff22 	bl	1bb28 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   15ce4:	9901      	ldr	r1, [sp, #4]
	ticks_now = cntr_cnt_get();
   15ce6:	9002      	str	r0, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15ce8:	eba0 0309 	sub.w	r3, r0, r9
   15cec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   15cf0:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_elapsed) {
   15cf2:	429f      	cmp	r7, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
   15cf4:	bf98      	it	ls
   15cf6:	6969      	ldrls	r1, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   15cf8:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   15cfa:	bf9d      	ittte	ls
   15cfc:	1bcf      	subls	r7, r1, r7
   15cfe:	19db      	addls	r3, r3, r7
   15d00:	616b      	strls	r3, [r5, #20]
		ticks_to_expire -= ticks_elapsed;
   15d02:	1afb      	subhi	r3, r7, r3
		ticks_to_expire = 0U;
   15d04:	bf98      	it	ls
   15d06:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0U) &&
   15d08:	2800      	cmp	r0, #0
   15d0a:	d05b      	beq.n	15dc4 <ticker_job+0x268>
	    (user_op->params.update.lazy != 0U)) {
   15d0c:	8ab1      	ldrh	r1, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
   15d0e:	2900      	cmp	r1, #0
   15d10:	d058      	beq.n	15dc4 <ticker_job+0x268>
		user_op->params.update.lazy--;
   15d12:	f101 3cff 	add.w	ip, r1, #4294967295
   15d16:	fa1f fc8c 	uxth.w	ip, ip
   15d1a:	f8a6 c014 	strh.w	ip, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   15d1e:	4298      	cmp	r0, r3
   15d20:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   15d24:	d201      	bcs.n	15d2a <ticker_job+0x1ce>
   15d26:	45f4      	cmp	ip, lr
   15d28:	d314      	bcc.n	15d54 <ticker_job+0x1f8>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15d2a:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 15fe8 <ticker_job+0x48c>
   15d2e:	e043      	b.n	15db8 <ticker_job+0x25c>
		ticker_current = &node[current];
   15d30:	eb03 0943 	add.w	r9, r3, r3, lsl #1
   15d34:	ea4f 1909 	mov.w	r9, r9, lsl #4
   15d38:	eb0e 0a09 	add.w	sl, lr, r9
		if (current == id) {
   15d3c:	4299      	cmp	r1, r3
   15d3e:	f8da 2008 	ldr.w	r2, [sl, #8]
   15d42:	920b      	str	r2, [sp, #44]	; 0x2c
   15d44:	4417      	add	r7, r2
   15d46:	f81e 9009 	ldrb.w	r9, [lr, r9]
   15d4a:	f000 82bd 	beq.w	162c8 <ticker_job+0x76c>
   15d4e:	9302      	str	r3, [sp, #8]
   15d50:	464b      	mov	r3, r9
   15d52:	e7bc      	b.n	15cce <ticker_job+0x172>
	if ((ticker->remainder_current >= BIT(31)) ||
   15d54:	6a69      	ldr	r1, [r5, #36]	; 0x24
   15d56:	4fa2      	ldr	r7, [pc, #648]	; (15fe0 <ticker_job+0x484>)
   15d58:	4aa2      	ldr	r2, [pc, #648]	; (15fe4 <ticker_job+0x488>)
   15d5a:	19cf      	adds	r7, r1, r7
   15d5c:	4297      	cmp	r7, r2
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   15d5e:	bf81      	itttt	hi
   15d60:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   15d64:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   15d68:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
   15d6c:	6269      	strhi	r1, [r5, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
   15d6e:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
		decrement++;
   15d72:	bf8c      	ite	hi
   15d74:	f04f 0a01 	movhi.w	sl, #1
	uint8_t decrement = 0U;
   15d78:	f04f 0a00 	movls.w	sl, #0
	ticker->remainder_current -= ticker->remainder_periodic;
   15d7c:	1a7f      	subs	r7, r7, r1
			ticks_to_expire -= ticker->ticks_periodic +
   15d7e:	4482      	add	sl, r0
			ticker->lazy_current--;
   15d80:	f10e 3eff 	add.w	lr, lr, #4294967295
	ticker->remainder_current -= ticker->remainder_periodic;
   15d84:	626f      	str	r7, [r5, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
   15d86:	eba3 030a 	sub.w	r3, r3, sl
			ticker->lazy_current--;
   15d8a:	f8a5 e01e 	strh.w	lr, [r5, #30]
   15d8e:	e7c6      	b.n	15d1e <ticker_job+0x1c2>
	ticker->remainder_current += ticker->remainder_periodic;
   15d90:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
   15d94:	440f      	add	r7, r1
	if ((ticker->remainder_current < BIT(31)) &&
   15d96:	4992      	ldr	r1, [pc, #584]	; (15fe0 <ticker_job+0x484>)
   15d98:	4a92      	ldr	r2, [pc, #584]	; (15fe4 <ticker_job+0x488>)
   15d9a:	1879      	adds	r1, r7, r1
   15d9c:	4291      	cmp	r1, r2
	return 0;
   15d9e:	bf8e      	itee	hi
   15da0:	2100      	movhi	r1, #0
		return 1;
   15da2:	2101      	movls	r1, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15da4:	4457      	addls	r7, sl
			ticks_to_expire += ticker->ticks_periodic +
   15da6:	4401      	add	r1, r0
			ticker->lazy_current++;
   15da8:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
   15dac:	bf8c      	ite	hi
   15dae:	626f      	strhi	r7, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15db0:	626f      	strls	r7, [r5, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
   15db2:	440b      	add	r3, r1
			ticker->lazy_current++;
   15db4:	f8a5 e01e 	strh.w	lr, [r5, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15db8:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   15dbc:	45f4      	cmp	ip, lr
   15dbe:	d8e7      	bhi.n	15d90 <ticker_job+0x234>
		ticker->lazy_periodic = user_op->params.update.lazy;
   15dc0:	f8a5 c01c 	strh.w	ip, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   15dc4:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
   15dc6:	68b0      	ldr	r0, [r6, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   15dc8:	6aaf      	ldr	r7, [r5, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   15dca:	440b      	add	r3, r1
   15dcc:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
   15dce:	696b      	ldr	r3, [r5, #20]
   15dd0:	4403      	add	r3, r0
   15dd2:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   15dd4:	b11f      	cbz	r7, 15dde <ticker_job+0x282>
   15dd6:	683b      	ldr	r3, [r7, #0]
   15dd8:	b10b      	cbz	r3, 15dde <ticker_job+0x282>
			user_op->params.update.ticks_drift_plus -
   15dda:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   15ddc:	6079      	str	r1, [r7, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   15dde:	9a02      	ldr	r2, [sp, #8]
   15de0:	4649      	mov	r1, r9
   15de2:	4628      	mov	r0, r5
   15de4:	f010 ffdc 	bl	26da0 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   15de8:	68f2      	ldr	r2, [r6, #12]
   15dea:	69ab      	ldr	r3, [r5, #24]
   15dec:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   15dee:	6932      	ldr	r2, [r6, #16]
   15df0:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   15df2:	bf8c      	ite	hi
   15df4:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   15df6:	2300      	movls	r3, #0
   15df8:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   15dfa:	7db3      	ldrb	r3, [r6, #22]
   15dfc:	b103      	cbz	r3, 15e00 <ticker_job+0x2a4>
		ticker->force = user_op->params.update.force;
   15dfe:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   15e00:	7df3      	ldrb	r3, [r6, #23]
   15e02:	b113      	cbz	r3, 15e0a <ticker_job+0x2ae>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   15e04:	3b01      	subs	r3, #1
   15e06:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   15e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15e0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15e0e:	4619      	mov	r1, r3
   15e10:	9b03      	ldr	r3, [sp, #12]
   15e12:	548b      	strb	r3, [r1, r2]
	*insert_head = user_op->id;
   15e14:	7873      	ldrb	r3, [r6, #1]
   15e16:	9303      	str	r3, [sp, #12]
		ticker->req++;
   15e18:	786b      	ldrb	r3, [r5, #1]
   15e1a:	3301      	adds	r3, #1
   15e1c:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   15e1e:	2100      	movs	r1, #0
   15e20:	e749      	b.n	15cb6 <ticker_job+0x15a>
		ticker->req = ticker->ack;
   15e22:	f885 c001 	strb.w	ip, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   15e26:	7f23      	ldrb	r3, [r4, #28]
   15e28:	428b      	cmp	r3, r1
   15e2a:	d1f8      	bne.n	15e1e <ticker_job+0x2c2>
			instance->ticker_id_slot_previous = TICKER_NULL;
   15e2c:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   15e2e:	2807      	cmp	r0, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   15e30:	7723      	strb	r3, [r4, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   15e32:	d10d      	bne.n	15e50 <ticker_job+0x2f4>
				ticks_at_stop =
   15e34:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
   15e36:	6963      	ldr	r3, [r4, #20]
			if (!((ticks_at_stop - ticks_current) &
   15e38:	1ac2      	subs	r2, r0, r3
   15e3a:	0211      	lsls	r1, r2, #8
   15e3c:	d40b      	bmi.n	15e56 <ticker_job+0x2fa>
				ticks_used = ticks_elapsed +
   15e3e:	9b01      	ldr	r3, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15e40:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   15e44:	4418      	add	r0, r3
			if (instance->ticks_slot_previous > ticks_used) {
   15e46:	69a3      	ldr	r3, [r4, #24]
   15e48:	4283      	cmp	r3, r0
				instance->ticks_slot_previous = ticks_used;
   15e4a:	bf88      	it	hi
   15e4c:	61a0      	strhi	r0, [r4, #24]
   15e4e:	e7e6      	b.n	15e1e <ticker_job+0x2c2>
				ticks_at_stop = cntr_cnt_get();
   15e50:	f005 fe6a 	bl	1bb28 <cntr_cnt_get>
   15e54:	e7ef      	b.n	15e36 <ticker_job+0x2da>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15e56:	1a18      	subs	r0, r3, r0
				if (ticks_elapsed > ticks_used) {
   15e58:	9b01      	ldr	r3, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15e5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   15e5e:	4283      	cmp	r3, r0
					ticks_used = ticks_elapsed -
   15e60:	bf8c      	ite	hi
   15e62:	1a18      	subhi	r0, r3, r0
					ticks_used = 0;
   15e64:	2000      	movls	r0, #0
   15e66:	e7ee      	b.n	15e46 <ticker_job+0x2ea>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   15e68:	2104      	movs	r1, #4
   15e6a:	4623      	mov	r3, r4
   15e6c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   15e6e:	2201      	movs	r2, #1
   15e70:	4608      	mov	r0, r1
   15e72:	47a8      	blx	r5
				pending = 1U;
   15e74:	2301      	movs	r3, #1
				user->middle = prev;
   15e76:	f888 7002 	strb.w	r7, [r8, #2]
				pending = 1U;
   15e7a:	9308      	str	r3, [sp, #32]
   15e7c:	e69c      	b.n	15bb8 <ticker_job+0x5c>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   15e7e:	69a2      	ldr	r2, [r4, #24]
		skip_collision = (ticker->lazy_current != 0U);
   15e80:	f8b5 901e 	ldrh.w	r9, [r5, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   15e84:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   15e86:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
   15e8a:	449a      	add	sl, r3
		ticks_latency -= ticks_to_expire;
   15e8c:	ebab 0b03 	sub.w	fp, fp, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   15e90:	bf25      	ittet	cs
   15e92:	23ff      	movcs	r3, #255	; 0xff
   15e94:	7723      	strbcs	r3, [r4, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   15e96:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   15e98:	2300      	movcs	r3, #0
   15e9a:	61a3      	str	r3, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   15e9c:	78a9      	ldrb	r1, [r5, #2]
   15e9e:	786b      	ldrb	r3, [r5, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   15ea0:	f8d5 c018 	ldr.w	ip, [r5, #24]
   15ea4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
		state = (ticker->req - ticker->ack) & 0xff;
   15ea6:	1a5b      	subs	r3, r3, r1
   15ea8:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   15eaa:	f1bc 0f00 	cmp.w	ip, #0
   15eae:	d00d      	beq.n	15ecc <ticker_job+0x370>
   15eb0:	2b02      	cmp	r3, #2
   15eb2:	d10b      	bne.n	15ecc <ticker_job+0x370>
   15eb4:	f1b9 0f00 	cmp.w	r9, #0
   15eb8:	d108      	bne.n	15ecc <ticker_job+0x370>
   15eba:	b122      	cbz	r2, 15ec6 <ticker_job+0x36a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   15ebc:	f892 e008 	ldrb.w	lr, [r2, #8]
   15ec0:	f1be 0f01 	cmp.w	lr, #1
   15ec4:	d002      	beq.n	15ecc <ticker_job+0x370>
			instance->ticker_id_slot_previous = id_expired;
   15ec6:	7727      	strb	r7, [r4, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   15ec8:	f8c4 c018 	str.w	ip, [r4, #24]
		instance->ticker_id_head = ticker->next;
   15ecc:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
		ticker->ticks_to_expire = 0U;
   15ed0:	f04f 0c00 	mov.w	ip, #0
   15ed4:	f8c5 c008 	str.w	ip, [r5, #8]
		instance->ticker_id_head = ticker->next;
   15ed8:	f816 c000 	ldrb.w	ip, [r6, r0]
   15edc:	f884 c01d 	strb.w	ip, [r4, #29]
		if ((ticker->ticks_periodic != 0U) ||
   15ee0:	f8d5 c004 	ldr.w	ip, [r5, #4]
   15ee4:	f1bc 0f00 	cmp.w	ip, #0
   15ee8:	d11d      	bne.n	15f26 <ticker_job+0x3ca>
   15eea:	2a00      	cmp	r2, #0
   15eec:	d068      	beq.n	15fc0 <ticker_job+0x464>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   15eee:	f892 e008 	ldrb.w	lr, [r2, #8]
   15ef2:	f1be 0f01 	cmp.w	lr, #1
   15ef6:	d163      	bne.n	15fc0 <ticker_job+0x464>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   15ef8:	7a13      	ldrb	r3, [r2, #8]
   15efa:	2b01      	cmp	r3, #1
   15efc:	d115      	bne.n	15f2a <ticker_job+0x3ce>
				ticker->ticks_to_expire = ticks_elapsed;
   15efe:	f8c5 8008 	str.w	r8, [r5, #8]
				ticker->req = ticker->ack;
   15f02:	7069      	strb	r1, [r5, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   15f04:	9b07      	ldr	r3, [sp, #28]
   15f06:	6961      	ldr	r1, [r4, #20]
   15f08:	eb03 020a 	add.w	r2, r3, sl
   15f0c:	4628      	mov	r0, r5
   15f0e:	f010 ff47 	bl	26da0 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   15f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15f14:	990a      	ldr	r1, [sp, #40]	; 0x28
   15f16:	461a      	mov	r2, r3
   15f18:	9b03      	ldr	r3, [sp, #12]
   15f1a:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   15f1c:	786b      	ldrb	r3, [r5, #1]
   15f1e:	3301      	adds	r3, #1
   15f20:	706b      	strb	r3, [r5, #1]
			ticker->req = ticker->ack;
   15f22:	9703      	str	r7, [sp, #12]
   15f24:	e665      	b.n	15bf2 <ticker_job+0x96>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   15f26:	2a00      	cmp	r2, #0
   15f28:	d1e6      	bne.n	15ef8 <ticker_job+0x39c>
				if (!ticker->lazy_current) {
   15f2a:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   15f2e:	f1be 0f00 	cmp.w	lr, #0
   15f32:	d124      	bne.n	15f7e <ticker_job+0x422>
					lazy_periodic = ticker->lazy_periodic;
   15f34:	8bab      	ldrh	r3, [r5, #28]
				while (count--) {
   15f36:	4699      	mov	r9, r3
				ticks_to_expire = 0U;
   15f38:	2000      	movs	r0, #0
	ticker->remainder_current += ticker->remainder_periodic;
   15f3a:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
   15f3e:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   15f40:	4927      	ldr	r1, [pc, #156]	; (15fe0 <ticker_job+0x484>)
   15f42:	4e28      	ldr	r6, [pc, #160]	; (15fe4 <ticker_job+0x488>)
   15f44:	1851      	adds	r1, r2, r1
   15f46:	42b1      	cmp	r1, r6
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15f48:	bf9f      	itttt	ls
   15f4a:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   15f4e:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
   15f52:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
   15f56:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
   15f58:	bf92      	itee	ls
   15f5a:	9a05      	ldrls	r2, [sp, #20]
	ticker->remainder_current += ticker->remainder_periodic;
   15f5c:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
   15f5e:	2200      	movhi	r2, #0
					ticks_to_expire +=
   15f60:	4462      	add	r2, ip
				while (count--) {
   15f62:	f119 39ff 	adds.w	r9, r9, #4294967295
					ticks_to_expire +=
   15f66:	4410      	add	r0, r2
				while (count--) {
   15f68:	d2e7      	bcs.n	15f3a <ticker_job+0x3de>
				if (!ticker->must_expire) {
   15f6a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   15f6e:	b32a      	cbz	r2, 15fbc <ticker_job+0x460>
				lazy = 0U;
   15f70:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   15f72:	4413      	add	r3, r2
   15f74:	449e      	add	lr, r3
				ticker->ticks_to_expire = ticks_to_expire;
   15f76:	60a8      	str	r0, [r5, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   15f78:	f8a5 e01e 	strh.w	lr, [r5, #30]
   15f7c:	e7c2      	b.n	15f04 <ticker_job+0x3a8>
					ticker->req = ticker->ack;
   15f7e:	7069      	strb	r1, [r5, #1]
					lazy_periodic = 0U;
   15f80:	2300      	movs	r3, #0
   15f82:	e7d8      	b.n	15f36 <ticker_job+0x3da>
	ticker->remainder_current += ticker->remainder_periodic;
   15f84:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
   15f88:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   15f8a:	4915      	ldr	r1, [pc, #84]	; (15fe0 <ticker_job+0x484>)
   15f8c:	4e15      	ldr	r6, [pc, #84]	; (15fe4 <ticker_job+0x488>)
   15f8e:	1851      	adds	r1, r2, r1
   15f90:	42b1      	cmp	r1, r6
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15f92:	bf9f      	itttt	ls
   15f94:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   15f98:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
   15f9c:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
   15fa0:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
   15fa2:	bf92      	itee	ls
   15fa4:	9a05      	ldrls	r2, [sp, #20]
	ticker->remainder_current += ticker->remainder_periodic;
   15fa6:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
   15fa8:	2200      	movhi	r2, #0
						ticks_to_expire +=
   15faa:	4462      	add	r2, ip
   15fac:	4410      	add	r0, r2
						lazy++;
   15fae:	f109 0901 	add.w	r9, r9, #1
					while (ticks_to_expire <
   15fb2:	4583      	cmp	fp, r0
   15fb4:	fa1f f289 	uxth.w	r2, r9
   15fb8:	d8e4      	bhi.n	15f84 <ticker_job+0x428>
   15fba:	e7da      	b.n	15f72 <ticker_job+0x416>
				if (!ticker->must_expire) {
   15fbc:	4691      	mov	r9, r2
   15fbe:	e7f8      	b.n	15fb2 <ticker_job+0x456>
			if (state && ((state == 1U) || skip_collision) &&
   15fc0:	b14b      	cbz	r3, 15fd6 <ticker_job+0x47a>
   15fc2:	2b01      	cmp	r3, #1
   15fc4:	d002      	beq.n	15fcc <ticker_job+0x470>
   15fc6:	f1b9 0f00 	cmp.w	r9, #0
   15fca:	d004      	beq.n	15fd6 <ticker_job+0x47a>
			    ticker->fp_op_func) {
   15fcc:	6a2b      	ldr	r3, [r5, #32]
			if (state && ((state == 1U) || skip_collision) &&
   15fce:	b113      	cbz	r3, 15fd6 <ticker_job+0x47a>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   15fd0:	6a69      	ldr	r1, [r5, #36]	; 0x24
   15fd2:	2001      	movs	r0, #1
   15fd4:	4798      	blx	r3
			ticker->req = ticker->ack;
   15fd6:	78ab      	ldrb	r3, [r5, #2]
   15fd8:	706b      	strb	r3, [r5, #1]
   15fda:	9f03      	ldr	r7, [sp, #12]
   15fdc:	e7a1      	b.n	15f22 <ticker_job+0x3c6>
   15fde:	bf00      	nop
   15fe0:	ff172b5a 	.word	0xff172b5a
   15fe4:	7f172b59 	.word	0x7f172b59
   15fe8:	fe2e56b6 	.word	0xfe2e56b6
			ticker = &nodes[ticker_id_head];
   15fec:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   15ff0:	011b      	lsls	r3, r3, #4
   15ff2:	18c5      	adds	r5, r0, r3
			ext_data = ticker->ext_data;
   15ff4:	f810 e003 	ldrb.w	lr, [r0, r3]
   15ff8:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   15ffa:	b11f      	cbz	r7, 16004 <ticker_job+0x4a8>
   15ffc:	7a3b      	ldrb	r3, [r7, #8]
   15ffe:	2b01      	cmp	r3, #1
   16000:	f000 817e 	beq.w	16300 <ticker_job+0x7a4>
			ticker_id_head = ticker->next;
   16004:	4676      	mov	r6, lr
		while (ticker_id_head != TICKER_NULL) {
   16006:	2eff      	cmp	r6, #255	; 0xff
   16008:	d1f0      	bne.n	15fec <ticker_job+0x490>
			flag_compare_update = 1U;
   1600a:	9a02      	ldr	r2, [sp, #8]
   1600c:	9b04      	ldr	r3, [sp, #16]
   1600e:	2b00      	cmp	r3, #0
   16010:	bf08      	it	eq
   16012:	4613      	moveq	r3, r2
   16014:	9302      	str	r3, [sp, #8]
   16016:	e07d      	b.n	16114 <ticker_job+0x5b8>
			instance->ticks_slot_previous > ticks_elapsed) {
   16018:	69a1      	ldr	r1, [r4, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1601a:	9b01      	ldr	r3, [sp, #4]
   1601c:	428b      	cmp	r3, r1
   1601e:	f080 8173 	bcs.w	16308 <ticker_job+0x7ac>
			window_start_ticks = instance->ticks_slot_previous -
   16022:	1acb      	subs	r3, r1, r3
		window_start_ticks = 0U;
   16024:	9303      	str	r3, [sp, #12]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   16026:	e9d7 2300 	ldrd	r2, r3, [r7]
   1602a:	4293      	cmp	r3, r2
   1602c:	d254      	bcs.n	160d8 <ticker_job+0x57c>
			ticks_slot_window = ext_data->ticks_slot_window -
   1602e:	f04f 0c00 	mov.w	ip, #0
   16032:	eba2 0b03 	sub.w	fp, r2, r3
		ticker_id_iter = nodes[ticker_id_head].next;
   16036:	4672      	mov	r2, lr
			ticks_slot_window = ext_data->ticks_slot_window -
   16038:	4663      	mov	r3, ip
		while (ticker_id_iter != TICKER_NULL &&
   1603a:	2aff      	cmp	r2, #255	; 0xff
   1603c:	d006      	beq.n	1604c <ticker_job+0x4f0>
		       ticks_start_offset + ticker->ticks_slot <=
   1603e:	f8d5 8018 	ldr.w	r8, [r5, #24]
   16042:	eb0c 0108 	add.w	r1, ip, r8
		while (ticker_id_iter != TICKER_NULL &&
   16046:	458b      	cmp	fp, r1
		       ticks_start_offset + ticker->ticks_slot <=
   16048:	9104      	str	r1, [sp, #16]
		while (ticker_id_iter != TICKER_NULL &&
   1604a:	d217      	bcs.n	1607c <ticker_job+0x520>
		ticker->ticks_to_expire = ticks_to_expire;
   1604c:	60ab      	str	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   1604e:	4672      	mov	r2, lr
		ticker_id_prev = TICKER_NULL;
   16050:	23ff      	movs	r3, #255	; 0xff
		while (ticker_id_iter != TICKER_NULL) {
   16052:	2aff      	cmp	r2, #255	; 0xff
   16054:	d046      	beq.n	160e4 <ticker_job+0x588>
			node = &nodes[ticker_id_iter];
   16056:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   1605a:	ea4f 1808 	mov.w	r8, r8, lsl #4
   1605e:	eb00 0908 	add.w	r9, r0, r8
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   16062:	f8d5 c008 	ldr.w	ip, [r5, #8]
   16066:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1606a:	458c      	cmp	ip, r1
   1606c:	d936      	bls.n	160dc <ticker_job+0x580>
				ticker->ticks_to_expire -=
   1606e:	ebac 0101 	sub.w	r1, ip, r1
   16072:	60a9      	str	r1, [r5, #8]
			ticker_id_iter = node->next;
   16074:	4613      	mov	r3, r2
   16076:	f810 2008 	ldrb.w	r2, [r0, r8]
   1607a:	e7ea      	b.n	16052 <ticker_job+0x4f6>
			node = &nodes[ticker_id_iter];
   1607c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   16080:	0112      	lsls	r2, r2, #4
   16082:	eb00 0a02 	add.w	sl, r0, r2
			if (node->ext_data &&
   16086:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
   1608a:	f1b9 0f00 	cmp.w	r9, #0
   1608e:	d006      	beq.n	1609e <ticker_job+0x542>
   16090:	f899 9008 	ldrb.w	r9, [r9, #8]
   16094:	f1b9 0f01 	cmp.w	r9, #1
   16098:	d101      	bne.n	1609e <ticker_job+0x542>
			ticker_id_iter = node->next;
   1609a:	5c82      	ldrb	r2, [r0, r2]
   1609c:	e7cd      	b.n	1603a <ticker_job+0x4de>
			if (node->ticks_to_expire >
   1609e:	f8da 9008 	ldr.w	r9, [sl, #8]
   160a2:	f1b9 0f04 	cmp.w	r9, #4
   160a6:	d90e      	bls.n	160c6 <ticker_job+0x56a>
					MIN(ticks_slot_window,
   160a8:	f1ac 0304 	sub.w	r3, ip, #4
   160ac:	444b      	add	r3, r9
				window_end_ticks =
   160ae:	455b      	cmp	r3, fp
			if (window_end_ticks > ticks_start_offset +
   160b0:	9904      	ldr	r1, [sp, #16]
				window_end_ticks =
   160b2:	bf28      	it	cs
   160b4:	465b      	movcs	r3, fp
			if (window_end_ticks > ticks_start_offset +
   160b6:	428b      	cmp	r3, r1
   160b8:	d905      	bls.n	160c6 <ticker_job+0x56a>
			if (ticks_to_expire != 0U &&
   160ba:	ebb3 0308 	subs.w	r3, r3, r8
   160be:	d002      	beq.n	160c6 <ticker_job+0x56a>
   160c0:	9903      	ldr	r1, [sp, #12]
   160c2:	428b      	cmp	r3, r1
   160c4:	d2c2      	bcs.n	1604c <ticker_job+0x4f0>
			window_start_ticks  = node->ticks_to_expire +
   160c6:	f8da 1018 	ldr.w	r1, [sl, #24]
   160ca:	eb01 0309 	add.w	r3, r1, r9
   160ce:	9303      	str	r3, [sp, #12]
			ticks_start_offset += node->ticks_to_expire;
   160d0:	44cc      	add	ip, r9
			ticks_to_expire     = ticks_slot_window -
   160d2:	ebab 0308 	sub.w	r3, fp, r8
   160d6:	e7e0      	b.n	1609a <ticker_job+0x53e>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   160d8:	2300      	movs	r3, #0
   160da:	e7b7      	b.n	1604c <ticker_job+0x4f0>
				node->ticks_to_expire -=
   160dc:	eba1 010c 	sub.w	r1, r1, ip
   160e0:	f8c9 1008 	str.w	r1, [r9, #8]
		if (ticker_id_prev != TICKER_NULL) {
   160e4:	2bff      	cmp	r3, #255	; 0xff
   160e6:	d008      	beq.n	160fa <ticker_job+0x59e>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   160e8:	b21b      	sxth	r3, r3
   160ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   160ee:	011b      	lsls	r3, r3, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   160f0:	f884 e01d 	strb.w	lr, [r4, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   160f4:	5cc2      	ldrb	r2, [r0, r3]
   160f6:	702a      	strb	r2, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   160f8:	54c6      	strb	r6, [r0, r3]
		ticker->lazy_current--;
   160fa:	8beb      	ldrh	r3, [r5, #30]
   160fc:	3b01      	subs	r3, #1
   160fe:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   16100:	f04f 0302 	mov.w	r3, #2
   16104:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   16106:	2301      	movs	r3, #1
   16108:	9304      	str	r3, [sp, #16]
   1610a:	e590      	b.n	15c2e <ticker_job+0xd2>
		ticker_job_list_insert(instance, insert_head);
   1610c:	9903      	ldr	r1, [sp, #12]
   1610e:	4620      	mov	r0, r4
   16110:	f010 fe6e 	bl	26df0 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   16114:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
   16116:	9a02      	ldr	r2, [sp, #8]
   16118:	9906      	ldr	r1, [sp, #24]
   1611a:	428b      	cmp	r3, r1
   1611c:	bf18      	it	ne
   1611e:	2201      	movne	r2, #1
	if (!pending) {
   16120:	9b08      	ldr	r3, [sp, #32]
		flag_compare_update = 1U;
   16122:	9202      	str	r2, [sp, #8]
	if (!pending) {
   16124:	b1e3      	cbz	r3, 16160 <ticker_job+0x604>
	instance->job_guard = 0U;
   16126:	2300      	movs	r3, #0
   16128:	77a3      	strb	r3, [r4, #30]
	if (flag_compare_update) {
   1612a:	9b02      	ldr	r3, [sp, #8]
   1612c:	b153      	cbz	r3, 16144 <ticker_job+0x5e8>
	if (instance->ticker_id_head == TICKER_NULL) {
   1612e:	7f63      	ldrb	r3, [r4, #29]
   16130:	2bff      	cmp	r3, #255	; 0xff
   16132:	f040 8082 	bne.w	1623a <ticker_job+0x6de>
		if (cntr_stop() == 0) {
   16136:	f005 fcd5 	bl	1bae4 <cntr_stop>
   1613a:	b918      	cbnz	r0, 16144 <ticker_job+0x5e8>
			instance->ticks_slot_previous = 0U;
   1613c:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
   1613e:	f005 fcf3 	bl	1bb28 <cntr_cnt_get>
   16142:	6160      	str	r0, [r4, #20]
	if (instance->worker_trigger) {
   16144:	7fe3      	ldrb	r3, [r4, #31]
   16146:	2b00      	cmp	r3, #0
   16148:	f000 80e0 	beq.w	1630c <ticker_job+0x7b0>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   1614c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1614e:	4623      	mov	r3, r4
   16150:	2201      	movs	r2, #1
   16152:	2103      	movs	r1, #3
   16154:	2004      	movs	r0, #4
   16156:	46ac      	mov	ip, r5
}
   16158:	b00f      	add	sp, #60	; 0x3c
   1615a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   1615e:	4760      	bx	ip
	users = &instance->users[0];
   16160:	6863      	ldr	r3, [r4, #4]
   16162:	9303      	str	r3, [sp, #12]
	count_user = instance->count_user;
   16164:	7a65      	ldrb	r5, [r4, #9]
		uop->status = TICKER_STATUS_SUCCESS;
   16166:	9b08      	ldr	r3, [sp, #32]
   16168:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   1616a:	3d01      	subs	r5, #1
   1616c:	b2ed      	uxtb	r5, r5
   1616e:	2dff      	cmp	r5, #255	; 0xff
   16170:	d0d9      	beq.n	16126 <ticker_job+0x5ca>
		user = &users[count_user];
   16172:	9b03      	ldr	r3, [sp, #12]
   16174:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
   16178:	f8d6 8004 	ldr.w	r8, [r6, #4]
		while (user->first != user->last) {
   1617c:	7873      	ldrb	r3, [r6, #1]
   1617e:	78f2      	ldrb	r2, [r6, #3]
   16180:	429a      	cmp	r2, r3
   16182:	d0f2      	beq.n	1616a <ticker_job+0x60e>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   16184:	2234      	movs	r2, #52	; 0x34
   16186:	fb13 f202 	smulbb	r2, r3, r2
   1618a:	eb08 0302 	add.w	r3, r8, r2
	switch (uop->op) {
   1618e:	f818 2002 	ldrb.w	r2, [r8, r2]
   16192:	2a02      	cmp	r2, #2
   16194:	d013      	beq.n	161be <ticker_job+0x662>
   16196:	2a03      	cmp	r2, #3
   16198:	d040      	beq.n	1621c <ticker_job+0x6c0>
   1619a:	2a01      	cmp	r2, #1
   1619c:	d106      	bne.n	161ac <ticker_job+0x650>
			uop->status = TICKER_STATUS_SUCCESS;
   1619e:	9a01      	ldr	r2, [sp, #4]
			uop->status = TICKER_STATUS_FAILURE;
   161a0:	629a      	str	r2, [r3, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   161a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (fp_op_func) {
   161a4:	b112      	cbz	r2, 161ac <ticker_job+0x650>
		fp_op_func(uop->status, uop->op_context);
   161a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   161a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
   161aa:	4790      	blx	r2
			first = user->first + 1;
   161ac:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
   161ae:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
   161b0:	3301      	adds	r3, #1
   161b2:	b2db      	uxtb	r3, r3
				first = 0U;
   161b4:	429a      	cmp	r2, r3
   161b6:	bf08      	it	eq
   161b8:	2300      	moveq	r3, #0
			user->first = first;
   161ba:	7073      	strb	r3, [r6, #1]
   161bc:	e7de      	b.n	1617c <ticker_job+0x620>
		ticker_by_next_slot_get(instance,
   161be:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
   161c2:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
   161c6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
   161ca:	f8d4 c000 	ldr.w	ip, [r4]
	if ((_ticker_id_head == TICKER_NULL) ||
   161ce:	6961      	ldr	r1, [r4, #20]
   161d0:	2aff      	cmp	r2, #255	; 0xff
   161d2:	d002      	beq.n	161da <ticker_job+0x67e>
   161d4:	6807      	ldr	r7, [r0, #0]
   161d6:	428f      	cmp	r7, r1
   161d8:	d015      	beq.n	16206 <ticker_job+0x6aa>
		_ticker_id_head = instance->ticker_id_head;
   161da:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
   161dc:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
   161de:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   161e0:	2aff      	cmp	r2, #255	; 0xff
   161e2:	d00b      	beq.n	161fc <ticker_job+0x6a0>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   161e4:	eb02 0a42 	add.w	sl, r2, r2, lsl #1
   161e8:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   161ec:	eb0c 0b0a 	add.w	fp, ip, sl
   161f0:	f8db 0008 	ldr.w	r0, [fp, #8]
   161f4:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
   161f6:	f8db 0018 	ldr.w	r0, [fp, #24]
   161fa:	b160      	cbz	r0, 16216 <ticker_job+0x6ba>
	*ticker_id_head = _ticker_id_head;
   161fc:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
   16200:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
   16204:	e7cb      	b.n	1619e <ticker_job+0x642>
		ticker = &node[_ticker_id_head];
   16206:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1620a:	0112      	lsls	r2, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   1620c:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
   16210:	f81c 2002 	ldrb.w	r2, [ip, r2]
   16214:	e7e4      	b.n	161e0 <ticker_job+0x684>
		_ticker_id_head = ticker->next;
   16216:	f81c 200a 	ldrb.w	r2, [ip, sl]
   1621a:	e7e1      	b.n	161e0 <ticker_job+0x684>
		if (uop->id < instance->count_node) {
   1621c:	785a      	ldrb	r2, [r3, #1]
   1621e:	7a21      	ldrb	r1, [r4, #8]
   16220:	4291      	cmp	r1, r2
   16222:	d908      	bls.n	16236 <ticker_job+0x6da>
			node[uop->id].priority =
   16224:	6821      	ldr	r1, [r4, #0]
   16226:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1622a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1622e:	7919      	ldrb	r1, [r3, #4]
   16230:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
   16234:	e7b3      	b.n	1619e <ticker_job+0x642>
			uop->status = TICKER_STATUS_FAILURE;
   16236:	2201      	movs	r2, #1
   16238:	e7b2      	b.n	161a0 <ticker_job+0x644>
	if (ticker_id_old_head == TICKER_NULL) {
   1623a:	9b06      	ldr	r3, [sp, #24]
   1623c:	2bff      	cmp	r3, #255	; 0xff
   1623e:	d106      	bne.n	1624e <ticker_job+0x6f2>
		ticks_current = cntr_cnt_get();
   16240:	f005 fc72 	bl	1bb28 <cntr_cnt_get>
   16244:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
   16246:	f005 fc3f 	bl	1bac8 <cntr_start>
   1624a:	b900      	cbnz	r0, 1624e <ticker_job+0x6f2>
			instance->ticks_current = ticks_current;
   1624c:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
   1624e:	7f63      	ldrb	r3, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
   16250:	6822      	ldr	r2, [r4, #0]
		LL_ASSERT(i);
   16252:	4f30      	ldr	r7, [pc, #192]	; (16314 <ticker_job+0x7b8>)
   16254:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 16318 <ticker_job+0x7bc>
	ticker = &instance->nodes[instance->ticker_id_head];
   16258:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   1625c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	i = 10U;
   16260:	f04f 090a 	mov.w	r9, #10
	ticks_to_expire = ticker->ticks_to_expire;
   16264:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   16266:	f005 fc5f 	bl	1bb28 <cntr_cnt_get>
		cc = instance->ticks_current;
   1626a:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1626c:	1b43      	subs	r3, r0, r5
   1626e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   16272:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   16274:	42b3      	cmp	r3, r6
   16276:	bf2c      	ite	cs
   16278:	18ed      	addcs	r5, r5, r3
   1627a:	19ad      	addcc	r5, r5, r6
		cc &= HAL_TICKER_CNTR_MASK;
   1627c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   16280:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   16282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16284:	4628      	mov	r0, r5
   16286:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   16288:	f005 fc4e 	bl	1bb28 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1628c:	eba0 000a 	sub.w	r0, r0, sl
   16290:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   16294:	eba5 050a 	sub.w	r5, r5, sl
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   16298:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1629a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   1629e:	42a8      	cmp	r0, r5
		i--;
   162a0:	f109 39ff 	add.w	r9, r9, #4294967295
		  ticker_ticks_diff_get(cc, ctr));
   162a4:	f67f af4e 	bls.w	16144 <ticker_job+0x5e8>
		LL_ASSERT(i);
   162a8:	f1b9 0f00 	cmp.w	r9, #0
   162ac:	d1db      	bne.n	16266 <ticker_job+0x70a>
   162ae:	f640 02ba 	movw	r2, #2234	; 0x8ba
   162b2:	4639      	mov	r1, r7
   162b4:	4640      	mov	r0, r8
   162b6:	f00b fe08 	bl	21eca <printk>
   162ba:	4040      	eors	r0, r0
   162bc:	f380 8811 	msr	BASEPRI, r0
   162c0:	f04f 0003 	mov.w	r0, #3
   162c4:	df02      	svc	2
   162c6:	e7ce      	b.n	16266 <ticker_job+0x70a>
	if (previous == current) {
   162c8:	9b02      	ldr	r3, [sp, #8]
   162ca:	4299      	cmp	r1, r3
   162cc:	d101      	bne.n	162d2 <ticker_job+0x776>
		instance->ticker_id_head = ticker_current->next;
   162ce:	f884 901d 	strb.w	r9, [r4, #29]
	node[previous].next = ticker_current->next;
   162d2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   162d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   162da:	0112      	lsls	r2, r2, #4
   162dc:	f80e 9002 	strb.w	r9, [lr, r2]
	if (ticker_current->next != TICKER_NULL) {
   162e0:	f89a 3000 	ldrb.w	r3, [sl]
   162e4:	2bff      	cmp	r3, #255	; 0xff
   162e6:	f43f acf5 	beq.w	15cd4 <ticker_job+0x178>
		node[ticker_current->next].ticks_to_expire += timeout;
   162ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   162ee:	eb0e 1e03 	add.w	lr, lr, r3, lsl #4
   162f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   162f4:	f8de 2008 	ldr.w	r2, [lr, #8]
   162f8:	441a      	add	r2, r3
   162fa:	f8ce 2008 	str.w	r2, [lr, #8]
	return (total + timeout);
   162fe:	e4e9      	b.n	15cd4 <ticker_job+0x178>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   16300:	7f23      	ldrb	r3, [r4, #28]
   16302:	2bff      	cmp	r3, #255	; 0xff
   16304:	f47f ae88 	bne.w	16018 <ticker_job+0x4bc>
		window_start_ticks = 0U;
   16308:	2300      	movs	r3, #0
   1630a:	e68b      	b.n	16024 <ticker_job+0x4c8>
}
   1630c:	b00f      	add	sp, #60	; 0x3c
   1630e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16312:	bf00      	nop
   16314:	0002f158 	.word	0x0002f158
   16318:	0002a026 	.word	0x0002a026

0001631c <ticker_init>:
{
   1631c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1631e:	4694      	mov	ip, r2
   16320:	9f05      	ldr	r7, [sp, #20]
   16322:	f89d 6018 	ldrb.w	r6, [sp, #24]
   16326:	9a07      	ldr	r2, [sp, #28]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   16328:	b108      	cbz	r0, 1632e <ticker_init+0x12>
		return TICKER_STATUS_FAILURE;
   1632a:	2001      	movs	r0, #1
}
   1632c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
   1632e:	4c18      	ldr	r4, [pc, #96]	; (16390 <ticker_init+0x74>)
   16330:	7221      	strb	r1, [r4, #8]
	instance->nodes = node;
   16332:	f8c4 c000 	str.w	ip, [r4]
	while (count_node--) {
   16336:	3901      	subs	r1, #1
   16338:	b2c9      	uxtb	r1, r1
   1633a:	29ff      	cmp	r1, #255	; 0xff
   1633c:	d116      	bne.n	1636c <ticker_init+0x50>
	instance->count_user = count_user;
   1633e:	7263      	strb	r3, [r4, #9]
	instance->users = user;
   16340:	6067      	str	r7, [r4, #4]
		user_op_ += users[count_user].count_user_op;
   16342:	2534      	movs	r5, #52	; 0x34
	while (count_user--) {
   16344:	3b01      	subs	r3, #1
   16346:	b2db      	uxtb	r3, r3
   16348:	2bff      	cmp	r3, #255	; 0xff
   1634a:	d116      	bne.n	1637a <ticker_init+0x5e>
	if (count_op) {
   1634c:	2e00      	cmp	r6, #0
   1634e:	d1ec      	bne.n	1632a <ticker_init+0xe>
	instance->caller_id_get_cb = caller_id_get_cb;
   16350:	9b08      	ldr	r3, [sp, #32]
   16352:	6223      	str	r3, [r4, #32]
	instance->sched_cb = sched_cb;
   16354:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16356:	6263      	str	r3, [r4, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
   16358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1635a:	62a3      	str	r3, [r4, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   1635c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
   16360:	e9c4 6605 	strd	r6, r6, [r4, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   16364:	83a3      	strh	r3, [r4, #28]
	instance->ticks_elapsed_first = 0U;
   16366:	8166      	strh	r6, [r4, #10]
	return TICKER_STATUS_SUCCESS;
   16368:	4630      	mov	r0, r6
   1636a:	e7df      	b.n	1632c <ticker_init+0x10>
		instance->nodes[count_node].priority = 0;
   1636c:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   16370:	eb0c 1505 	add.w	r5, ip, r5, lsl #4
   16374:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
   16378:	e7dd      	b.n	16336 <ticker_init+0x1a>
		users[count_user].user_op = user_op_;
   1637a:	b219      	sxth	r1, r3
   1637c:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
   16380:	6042      	str	r2, [r0, #4]
		user_op_ += users[count_user].count_user_op;
   16382:	f817 0031 	ldrb.w	r0, [r7, r1, lsl #3]
   16386:	fb00 2205 	mla	r2, r0, r5, r2
		count_op -= users[count_user].count_user_op;
   1638a:	1a30      	subs	r0, r6, r0
   1638c:	b2c6      	uxtb	r6, r0
   1638e:	e7d9      	b.n	16344 <ticker_init+0x28>
   16390:	20003000 	.word	0x20003000

00016394 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   16394:	4a04      	ldr	r2, [pc, #16]	; (163a8 <ticker_is_initialized+0x14>)
   16396:	232c      	movs	r3, #44	; 0x2c
   16398:	fb03 2000 	mla	r0, r3, r0, r2
   1639c:	7a00      	ldrb	r0, [r0, #8]
}
   1639e:	3000      	adds	r0, #0
   163a0:	bf18      	it	ne
   163a2:	2001      	movne	r0, #1
   163a4:	4770      	bx	lr
   163a6:	bf00      	nop
   163a8:	20003000 	.word	0x20003000

000163ac <ticker_trigger>:
	if (instance->sched_cb) {
   163ac:	4a07      	ldr	r2, [pc, #28]	; (163cc <ticker_trigger+0x20>)
   163ae:	232c      	movs	r3, #44	; 0x2c
   163b0:	fb03 2100 	mla	r1, r3, r0, r2
{
   163b4:	b410      	push	{r4}
	if (instance->sched_cb) {
   163b6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   163b8:	b134      	cbz	r4, 163c8 <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   163ba:	460b      	mov	r3, r1
   163bc:	46a4      	mov	ip, r4
   163be:	2201      	movs	r2, #1
   163c0:	2103      	movs	r1, #3
   163c2:	2002      	movs	r0, #2
}
   163c4:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   163c6:	4760      	bx	ip
}
   163c8:	bc10      	pop	{r4}
   163ca:	4770      	bx	lr
   163cc:	20003000 	.word	0x20003000

000163d0 <ticker_start_ext>:
{
   163d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   163d4:	4c23      	ldr	r4, [pc, #140]	; (16464 <ticker_start_ext+0x94>)
   163d6:	262c      	movs	r6, #44	; 0x2c
   163d8:	fb00 4906 	mla	r9, r0, r6, r4
	user = &instance->users[user_id];
   163dc:	b20c      	sxth	r4, r1
   163de:	f8d9 0004 	ldr.w	r0, [r9, #4]
   163e2:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
	if (last >= user->count_user_op) {
   163e6:	f810 0034 	ldrb.w	r0, [r0, r4, lsl #3]
	last = user->last + 1;
   163ea:	f89c 7003 	ldrb.w	r7, [ip, #3]
   163ee:	1c7d      	adds	r5, r7, #1
   163f0:	b2ed      	uxtb	r5, r5
		last = 0U;
   163f2:	42a8      	cmp	r0, r5
   163f4:	bf98      	it	ls
   163f6:	2500      	movls	r5, #0
	if (last == user->first) {
   163f8:	f89c 0001 	ldrb.w	r0, [ip, #1]
   163fc:	42a8      	cmp	r0, r5
   163fe:	d02f      	beq.n	16460 <ticker_start_ext+0x90>
	user_op = &user->user_op[user->last];
   16400:	2034      	movs	r0, #52	; 0x34
   16402:	fb17 f700 	smulbb	r7, r7, r0
   16406:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1640a:	19c4      	adds	r4, r0, r7
	user_op->op = TICKER_USER_OP_TYPE_START;
   1640c:	f04f 0804 	mov.w	r8, #4
   16410:	f800 8007 	strb.w	r8, [r0, r7]
	user_op->params.start.ticks_at_start = ticks_anchor;
   16414:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   16416:	9b08      	ldr	r3, [sp, #32]
   16418:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   1641a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1641c:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   1641e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16420:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   16422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16424:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
   16426:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1642a:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.ext_data = ext_data;
   1642c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1642e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   16430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16432:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   16434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16436:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
   16438:	2302      	movs	r3, #2
   1643a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
   1643c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1643e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   16440:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   16442:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   16444:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
   16446:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1644a:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
   1644e:	4608      	mov	r0, r1
   16450:	4798      	blx	r3
   16452:	464b      	mov	r3, r9
   16454:	2200      	movs	r2, #0
   16456:	4641      	mov	r1, r8
   16458:	47a8      	blx	r5
	return user_op->status;
   1645a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   1645c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   16460:	2001      	movs	r0, #1
   16462:	e7fb      	b.n	1645c <ticker_start_ext+0x8c>
   16464:	20003000 	.word	0x20003000

00016468 <ticker_update_ext>:
{
   16468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1646c:	4c22      	ldr	r4, [pc, #136]	; (164f8 <ticker_update_ext+0x90>)
   1646e:	262c      	movs	r6, #44	; 0x2c
   16470:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->users[user_id];
   16474:	b20c      	sxth	r4, r1
   16476:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1647a:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
	if (last >= user->count_user_op) {
   1647e:	f810 0034 	ldrb.w	r0, [r0, r4, lsl #3]
	last = user->last + 1;
   16482:	f89c 7003 	ldrb.w	r7, [ip, #3]
   16486:	1c7d      	adds	r5, r7, #1
   16488:	b2ed      	uxtb	r5, r5
		last = 0U;
   1648a:	42a8      	cmp	r0, r5
   1648c:	bf98      	it	ls
   1648e:	2500      	movls	r5, #0
	if (last == user->first) {
   16490:	f89c 0001 	ldrb.w	r0, [ip, #1]
   16494:	42a8      	cmp	r0, r5
   16496:	d02d      	beq.n	164f4 <ticker_update_ext+0x8c>
	user_op = &user->user_op[user->last];
   16498:	2034      	movs	r0, #52	; 0x34
   1649a:	fb17 f700 	smulbb	r7, r7, r0
   1649e:	f8dc 0004 	ldr.w	r0, [ip, #4]
   164a2:	19c4      	adds	r4, r0, r7
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   164a4:	f04f 0e05 	mov.w	lr, #5
   164a8:	f800 e007 	strb.w	lr, [r0, r7]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   164ac:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   164ae:	9b06      	ldr	r3, [sp, #24]
   164b0:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   164b2:	9b07      	ldr	r3, [sp, #28]
   164b4:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   164b6:	9b08      	ldr	r3, [sp, #32]
   164b8:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
   164ba:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   164be:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
   164c0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   164c4:	75a3      	strb	r3, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   164c6:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   164ca:	75e3      	strb	r3, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
   164cc:	2302      	movs	r3, #2
   164ce:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
   164d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   164d2:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   164d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
   164d6:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   164d8:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
   164da:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   164de:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
   164e2:	4608      	mov	r0, r1
   164e4:	4798      	blx	r3
   164e6:	4643      	mov	r3, r8
   164e8:	2200      	movs	r2, #0
   164ea:	2104      	movs	r1, #4
   164ec:	47a8      	blx	r5
	return user_op->status;
   164ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   164f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   164f4:	2001      	movs	r0, #1
   164f6:	e7fb      	b.n	164f0 <ticker_update_ext+0x88>
   164f8:	20003000 	.word	0x20003000

000164fc <ticker_stop>:
{
   164fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   16500:	4c1a      	ldr	r4, [pc, #104]	; (1656c <ticker_stop+0x70>)
   16502:	252c      	movs	r5, #44	; 0x2c
   16504:	fb00 4805 	mla	r8, r0, r5, r4
	user = &instance->users[user_id];
   16508:	b20e      	sxth	r6, r1
   1650a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1650e:	eb00 0cc6 	add.w	ip, r0, r6, lsl #3
	if (last >= user->count_user_op) {
   16512:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
   16516:	f89c 7003 	ldrb.w	r7, [ip, #3]
   1651a:	1c7c      	adds	r4, r7, #1
   1651c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1651e:	42a0      	cmp	r0, r4
   16520:	bf98      	it	ls
   16522:	2400      	movls	r4, #0
	if (last == user->first) {
   16524:	f89c 0001 	ldrb.w	r0, [ip, #1]
   16528:	42a0      	cmp	r0, r4
   1652a:	d01c      	beq.n	16566 <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
   1652c:	2034      	movs	r0, #52	; 0x34
   1652e:	fb17 f700 	smulbb	r7, r7, r0
   16532:	f8dc 0004 	ldr.w	r0, [ip, #4]
   16536:	19c6      	adds	r6, r0, r7
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   16538:	f04f 0e06 	mov.w	lr, #6
   1653c:	f800 e007 	strb.w	lr, [r0, r7]
	user_op->id = ticker_id;
   16540:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   16542:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
   16544:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	user_op->op_context = op_context;
   16548:	9b06      	ldr	r3, [sp, #24]
   1654a:	6333      	str	r3, [r6, #48]	; 0x30
	user->last = last;
   1654c:	f88c 4003 	strb.w	r4, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   16550:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   16554:	4608      	mov	r0, r1
   16556:	4798      	blx	r3
   16558:	4643      	mov	r3, r8
   1655a:	2200      	movs	r2, #0
   1655c:	2104      	movs	r1, #4
   1655e:	47a0      	blx	r4
	return user_op->status;
   16560:	6ab0      	ldr	r0, [r6, #40]	; 0x28
}
   16562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   16566:	2001      	movs	r0, #1
   16568:	e7fb      	b.n	16562 <ticker_stop+0x66>
   1656a:	bf00      	nop
   1656c:	20003000 	.word	0x20003000

00016570 <ll_addr_get>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
   16570:	b508      	push	{r3, lr}
   16572:	4603      	mov	r3, r0
	if (addr_type > 1) {
   16574:	2b01      	cmp	r3, #1
{
   16576:	4608      	mov	r0, r1
	if (addr_type > 1) {
   16578:	d80e      	bhi.n	16598 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
   1657a:	b133      	cbz	r3, 1658a <ll_addr_get+0x1a>
		if (bdaddr) {
   1657c:	b119      	cbz	r1, 16586 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   1657e:	2206      	movs	r2, #6
   16580:	4906      	ldr	r1, [pc, #24]	; (1659c <ll_addr_get+0x2c>)
   16582:	f00d fde4 	bl	2414e <memcpy>
		}

		return rnd_addr;
   16586:	4805      	ldr	r0, [pc, #20]	; (1659c <ll_addr_get+0x2c>)
   16588:	e007      	b.n	1659a <ll_addr_get+0x2a>
	}

	if (bdaddr) {
   1658a:	b119      	cbz	r1, 16594 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   1658c:	2206      	movs	r2, #6
   1658e:	4904      	ldr	r1, [pc, #16]	; (165a0 <ll_addr_get+0x30>)
   16590:	f00d fddd 	bl	2414e <memcpy>
	}

	return pub_addr;
   16594:	4802      	ldr	r0, [pc, #8]	; (165a0 <ll_addr_get+0x30>)
   16596:	e000      	b.n	1659a <ll_addr_get+0x2a>
		return NULL;
   16598:	2000      	movs	r0, #0
}
   1659a:	bd08      	pop	{r3, pc}
   1659c:	2000452e 	.word	0x2000452e
   165a0:	20004528 	.word	0x20004528

000165a4 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   165a4:	b570      	push	{r4, r5, r6, lr}
   165a6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   165a8:	2000      	movs	r0, #0
{
   165aa:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   165ac:	f010 fefb 	bl	273a6 <ull_adv_is_enabled>
   165b0:	b110      	cbz	r0, 165b8 <ll_addr_set+0x14>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
			return BT_HCI_ERR_CMD_DISALLOWED;
   165b2:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
   165b4:	4620      	mov	r0, r4
   165b6:	bd70      	pop	{r4, r5, r6, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   165b8:	f010 ff76 	bl	274a8 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   165bc:	f010 0606 	ands.w	r6, r0, #6
   165c0:	d1f7      	bne.n	165b2 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   165c2:	2206      	movs	r2, #6
   165c4:	4629      	mov	r1, r5
	if (addr_type) {
   165c6:	b124      	cbz	r4, 165d2 <ll_addr_set+0x2e>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   165c8:	4804      	ldr	r0, [pc, #16]	; (165dc <ll_addr_set+0x38>)
   165ca:	f00d fdc0 	bl	2414e <memcpy>
	return 0;
   165ce:	4634      	mov	r4, r6
   165d0:	e7f0      	b.n	165b4 <ll_addr_set+0x10>
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   165d2:	4803      	ldr	r0, [pc, #12]	; (165e0 <ll_addr_set+0x3c>)
   165d4:	f00d fdbb 	bl	2414e <memcpy>
   165d8:	e7ec      	b.n	165b4 <ll_addr_set+0x10>
   165da:	bf00      	nop
   165dc:	2000452e 	.word	0x2000452e
   165e0:	20004528 	.word	0x20004528

000165e4 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   165e4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   165e6:	4802      	ldr	r0, [pc, #8]	; (165f0 <hci_driver_init+0xc>)
   165e8:	f7f0 fb00 	bl	6bec <bt_hci_driver_register>

	return 0;
}
   165ec:	2000      	movs	r0, #0
   165ee:	bd08      	pop	{r3, pc}
   165f0:	000299b0 	.word	0x000299b0

000165f4 <hci_driver_send>:
	if (!buf->len) {
   165f4:	8983      	ldrh	r3, [r0, #12]
{
   165f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   165f8:	4605      	mov	r5, r0
	if (!buf->len) {
   165fa:	b943      	cbnz	r3, 1660e <hci_driver_send+0x1a>
		BT_ERR("Empty HCI packet");
   165fc:	2145      	movs	r1, #69	; 0x45
   165fe:	481a      	ldr	r0, [pc, #104]	; (16668 <hci_driver_send+0x74>)
   16600:	f00b fc63 	bl	21eca <printk>
		return -EINVAL;
   16604:	f06f 0415 	mvn.w	r4, #21
}
   16608:	4620      	mov	r0, r4
   1660a:	b003      	add	sp, #12
   1660c:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1660e:	7d02      	ldrb	r2, [r0, #20]
	switch (type) {
   16610:	b182      	cbz	r2, 16634 <hci_driver_send+0x40>
   16612:	2a02      	cmp	r2, #2
   16614:	d122      	bne.n	1665c <hci_driver_send+0x68>
	err = hci_acl_handle(buf, &evt);
   16616:	a901      	add	r1, sp, #4
   16618:	f000 fc6c 	bl	16ef4 <hci_acl_handle>
   1661c:	4604      	mov	r4, r0
	if (evt) {
   1661e:	9801      	ldr	r0, [sp, #4]
   16620:	b108      	cbz	r0, 16626 <hci_driver_send+0x32>
		bt_recv_prio(evt);
   16622:	f7f0 fac9 	bl	6bb8 <bt_recv_prio>
	if (!err) {
   16626:	2c00      	cmp	r4, #0
   16628:	d1ee      	bne.n	16608 <hci_driver_send+0x14>
		net_buf_unref(buf);
   1662a:	4628      	mov	r0, r5
   1662c:	f006 f91c 	bl	1c868 <net_buf_unref>
   16630:	2400      	movs	r4, #0
   16632:	e7e9      	b.n	16608 <hci_driver_send+0x14>
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   16634:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   16636:	9201      	str	r2, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   16638:	f000 fa06 	bl	16a48 <hci_cmd_handle>
	if (evt) {
   1663c:	2800      	cmp	r0, #0
   1663e:	d0f4      	beq.n	1662a <hci_driver_send+0x36>
		bt_recv_prio(evt);
   16640:	f7f0 faba 	bl	6bb8 <bt_recv_prio>
		if (node_rx) {
   16644:	9c01      	ldr	r4, [sp, #4]
   16646:	2c00      	cmp	r4, #0
   16648:	d0ef      	beq.n	1662a <hci_driver_send+0x36>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   1664a:	4620      	mov	r0, r4
   1664c:	f010 fe49 	bl	272e2 <hci_get_class>
   16650:	7160      	strb	r0, [r4, #5]
			k_fifo_put(&recv_fifo, node_rx);
   16652:	9901      	ldr	r1, [sp, #4]
   16654:	4805      	ldr	r0, [pc, #20]	; (1666c <hci_driver_send+0x78>)
   16656:	f012 f81a 	bl	2868e <k_queue_append>
	if (!err) {
   1665a:	e7e6      	b.n	1662a <hci_driver_send+0x36>
		BT_ERR("Unknown HCI type %u", type);
   1665c:	2145      	movs	r1, #69	; 0x45
   1665e:	4804      	ldr	r0, [pc, #16]	; (16670 <hci_driver_send+0x7c>)
   16660:	f00b fc33 	bl	21eca <printk>
   16664:	e7ce      	b.n	16604 <hci_driver_send+0x10>
   16666:	bf00      	nop
   16668:	0002f1c9 	.word	0x0002f1c9
   1666c:	20000fdc 	.word	0x20000fdc
   16670:	0002f1df 	.word	0x0002f1df

00016674 <recv_thread>:
{
   16674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   16676:	4d2a      	ldr	r5, [pc, #168]	; (16720 <recv_thread+0xac>)
		LL_ASSERT(0);
   16678:	4e2a      	ldr	r6, [pc, #168]	; (16724 <recv_thread+0xb0>)
   1667a:	4f2b      	ldr	r7, [pc, #172]	; (16728 <recv_thread+0xb4>)
   1667c:	f04f 32ff 	mov.w	r2, #4294967295
   16680:	f04f 33ff 	mov.w	r3, #4294967295
   16684:	4628      	mov	r0, r5
   16686:	f008 fa87 	bl	1eb98 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   1668a:	b368      	cbz	r0, 166e8 <recv_thread+0x74>
	uint8_t class = node_rx->hdr.user_meta;
   1668c:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   1668e:	9001      	str	r0, [sp, #4]
	switch (class) {
   16690:	b11b      	cbz	r3, 1669a <recv_thread+0x26>
   16692:	2b04      	cmp	r3, #4
   16694:	d90e      	bls.n	166b4 <recv_thread+0x40>
   16696:	2b05      	cmp	r3, #5
   16698:	d031      	beq.n	166fe <recv_thread+0x8a>
		LL_ASSERT(0);
   1669a:	22cf      	movs	r2, #207	; 0xcf
   1669c:	4631      	mov	r1, r6
   1669e:	4638      	mov	r0, r7
   166a0:	f00b fc13 	bl	21eca <printk>
   166a4:	4040      	eors	r0, r0
   166a6:	f380 8811 	msr	BASEPRI, r0
   166aa:	f04f 0003 	mov.w	r0, #3
   166ae:	df02      	svc	2
	struct net_buf *buf = NULL;
   166b0:	2400      	movs	r4, #0
   166b2:	e00d      	b.n	166d0 <recv_thread+0x5c>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   166b4:	2b02      	cmp	r3, #2
   166b6:	d11a      	bne.n	166ee <recv_thread+0x7a>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   166b8:	2200      	movs	r2, #0
   166ba:	2300      	movs	r3, #0
   166bc:	2101      	movs	r1, #1
   166be:	2000      	movs	r0, #0
   166c0:	f7ef f944 	bl	594c <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   166c4:	4604      	mov	r4, r0
		if (buf) {
   166c6:	b118      	cbz	r0, 166d0 <recv_thread+0x5c>
			hci_evt_encode(node_rx, buf);
   166c8:	4601      	mov	r1, r0
   166ca:	9801      	ldr	r0, [sp, #4]
   166cc:	f000 fcea 	bl	170a4 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   166d0:	9b01      	ldr	r3, [sp, #4]
   166d2:	2200      	movs	r2, #0
   166d4:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   166d6:	a801      	add	r0, sp, #4
   166d8:	f001 fa20 	bl	17b1c <ll_rx_mem_release>
		if (buf) {
   166dc:	b124      	cbz	r4, 166e8 <recv_thread+0x74>
			if (buf->len) {
   166de:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   166e0:	4620      	mov	r0, r4
			if (buf->len) {
   166e2:	b1cb      	cbz	r3, 16718 <recv_thread+0xa4>
				bt_recv(buf);
   166e4:	f7f0 f9d2 	bl	6a8c <bt_recv>
	z_impl_k_yield();
   166e8:	f009 f984 	bl	1f9f4 <z_impl_k_yield>
   166ec:	e7c6      	b.n	1667c <recv_thread+0x8>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   166ee:	f04f 32ff 	mov.w	r2, #4294967295
   166f2:	f04f 33ff 	mov.w	r3, #4294967295
   166f6:	2001      	movs	r0, #1
   166f8:	f7ef f8d8 	bl	58ac <bt_buf_get_rx>
   166fc:	e7e2      	b.n	166c4 <recv_thread+0x50>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   166fe:	f04f 32ff 	mov.w	r2, #4294967295
   16702:	f04f 33ff 	mov.w	r3, #4294967295
   16706:	2003      	movs	r0, #3
   16708:	f7ef f8d0 	bl	58ac <bt_buf_get_rx>
   1670c:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   1670e:	4601      	mov	r1, r0
   16710:	9801      	ldr	r0, [sp, #4]
   16712:	f000 fc91 	bl	17038 <hci_acl_encode>
		break;
   16716:	e7db      	b.n	166d0 <recv_thread+0x5c>
				net_buf_unref(buf);
   16718:	f006 f8a6 	bl	1c868 <net_buf_unref>
   1671c:	e7e4      	b.n	166e8 <recv_thread+0x74>
   1671e:	bf00      	nop
   16720:	20000fdc 	.word	0x20000fdc
   16724:	0002f1f8 	.word	0x0002f1f8
   16728:	0002a026 	.word	0x0002a026

0001672c <prio_recv_thread>:
{
   1672c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   16730:	4f2a      	ldr	r7, [pc, #168]	; (167dc <prio_recv_thread+0xb0>)
				k_fifo_put(&recv_fifo, node_rx);
   16732:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 167e0 <prio_recv_thread+0xb4>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   16736:	f10d 0102 	add.w	r1, sp, #2
   1673a:	a801      	add	r0, sp, #4
   1673c:	f001 f8fe 	bl	1793c <ll_rx_get>
   16740:	4604      	mov	r4, r0
   16742:	bb78      	cbnz	r0, 167a4 <prio_recv_thread+0x78>
		if (node_rx) {
   16744:	9b01      	ldr	r3, [sp, #4]
   16746:	2b00      	cmp	r3, #0
   16748:	d040      	beq.n	167cc <prio_recv_thread+0xa0>
			ll_rx_dequeue();
   1674a:	f001 f94f 	bl	179ec <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   1674e:	9d01      	ldr	r5, [sp, #4]
   16750:	4628      	mov	r0, r5
   16752:	f010 fdc6 	bl	272e2 <hci_get_class>
   16756:	7168      	strb	r0, [r5, #5]
			buf = process_prio_evt(node_rx, &evt_flags);
   16758:	9d01      	ldr	r5, [sp, #4]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   1675a:	796b      	ldrb	r3, [r5, #5]
   1675c:	2b03      	cmp	r3, #3
   1675e:	d11c      	bne.n	1679a <prio_recv_thread+0x6e>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   16760:	792b      	ldrb	r3, [r5, #4]
   16762:	2b14      	cmp	r3, #20
   16764:	d119      	bne.n	1679a <prio_recv_thread+0x6e>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   16766:	4621      	mov	r1, r4
   16768:	f04f 32ff 	mov.w	r2, #4294967295
   1676c:	f04f 33ff 	mov.w	r3, #4294967295
   16770:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   16772:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   16774:	f7ef f8ea 	bl	594c <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   16778:	4631      	mov	r1, r6
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1677a:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   1677c:	4602      	mov	r2, r0
   1677e:	f105 001c 	add.w	r0, r5, #28
   16782:	f000 fc2f 	bl	16fe4 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   16786:	4630      	mov	r0, r6
   16788:	f000 fc4e 	bl	17028 <hci_disconn_complete_process>
			if (buf) {
   1678c:	b12c      	cbz	r4, 1679a <prio_recv_thread+0x6e>
				bt_recv_prio(buf);
   1678e:	4620      	mov	r0, r4
   16790:	f7f0 fa12 	bl	6bb8 <bt_recv_prio>
					net_buf_unref(buf);
   16794:	4620      	mov	r0, r4
   16796:	f006 f867 	bl	1c868 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   1679a:	9901      	ldr	r1, [sp, #4]
   1679c:	4640      	mov	r0, r8
   1679e:	f011 ff76 	bl	2868e <k_queue_append>
			continue;
   167a2:	e7c8      	b.n	16736 <prio_recv_thread+0xa>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   167a4:	f04f 33ff 	mov.w	r3, #4294967295
   167a8:	f04f 32ff 	mov.w	r2, #4294967295
   167ac:	2100      	movs	r1, #0
   167ae:	2013      	movs	r0, #19
   167b0:	f7ef f8cc 	bl	594c <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   167b4:	4622      	mov	r2, r4
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   167b6:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   167b8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   167bc:	f010 fd7a 	bl	272b4 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   167c0:	4628      	mov	r0, r5
   167c2:	f7f0 f9f9 	bl	6bb8 <bt_recv_prio>
	z_impl_k_yield();
   167c6:	f009 f915 	bl	1f9f4 <z_impl_k_yield>
   167ca:	e7b4      	b.n	16736 <prio_recv_thread+0xa>
	return z_impl_k_sem_take(sem, timeout);
   167cc:	f04f 32ff 	mov.w	r2, #4294967295
   167d0:	f04f 33ff 	mov.w	r3, #4294967295
   167d4:	4638      	mov	r0, r7
   167d6:	f009 fa8d 	bl	1fcf4 <z_impl_k_sem_take>
		BT_DBG("sem taken");
   167da:	e7ac      	b.n	16736 <prio_recv_thread+0xa>
   167dc:	20000f8c 	.word	0x20000f8c
   167e0:	20000fdc 	.word	0x20000fdc

000167e4 <hci_driver_open>:
{
   167e4:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   167e6:	481d      	ldr	r0, [pc, #116]	; (1685c <hci_driver_open+0x78>)
{
   167e8:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   167ea:	f000 ffad 	bl	17748 <ll_init>
	if (err) {
   167ee:	4604      	mov	r4, r0
   167f0:	b138      	cbz	r0, 16802 <hci_driver_open+0x1e>
		BT_ERR("LL initialization failed: %d", err);
   167f2:	4602      	mov	r2, r0
   167f4:	2145      	movs	r1, #69	; 0x45
   167f6:	481a      	ldr	r0, [pc, #104]	; (16860 <hci_driver_open+0x7c>)
   167f8:	f00b fb67 	bl	21eca <printk>
}
   167fc:	4620      	mov	r0, r4
   167fe:	b008      	add	sp, #32
   16800:	bdd0      	pop	{r4, r6, r7, pc}
	hci_init(NULL);
   16802:	f000 fdc3 	bl	1738c <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   16806:	2600      	movs	r6, #0
   16808:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1680a:	f06f 0309 	mvn.w	r3, #9
   1680e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16812:	e9cd 6706 	strd	r6, r7, [sp, #24]
   16816:	9404      	str	r4, [sp, #16]
   16818:	e9cd 4400 	strd	r4, r4, [sp]
   1681c:	4b11      	ldr	r3, [pc, #68]	; (16864 <hci_driver_open+0x80>)
   1681e:	4912      	ldr	r1, [pc, #72]	; (16868 <hci_driver_open+0x84>)
   16820:	4812      	ldr	r0, [pc, #72]	; (1686c <hci_driver_open+0x88>)
   16822:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   16826:	f009 fb59 	bl	1fedc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1682a:	4911      	ldr	r1, [pc, #68]	; (16870 <hci_driver_open+0x8c>)
   1682c:	480f      	ldr	r0, [pc, #60]	; (1686c <hci_driver_open+0x88>)
   1682e:	f011 ffa1 	bl	28774 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16832:	f06f 0307 	mvn.w	r3, #7
   16836:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1683a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1683e:	9404      	str	r4, [sp, #16]
   16840:	e9cd 4400 	strd	r4, r4, [sp]
   16844:	4b0b      	ldr	r3, [pc, #44]	; (16874 <hci_driver_open+0x90>)
   16846:	490c      	ldr	r1, [pc, #48]	; (16878 <hci_driver_open+0x94>)
   16848:	480c      	ldr	r0, [pc, #48]	; (1687c <hci_driver_open+0x98>)
   1684a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1684e:	f009 fb45 	bl	1fedc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   16852:	490b      	ldr	r1, [pc, #44]	; (16880 <hci_driver_open+0x9c>)
   16854:	4809      	ldr	r0, [pc, #36]	; (1687c <hci_driver_open+0x98>)
   16856:	f011 ff8d 	bl	28774 <z_impl_k_thread_name_set>
	return 0;
   1685a:	e7cf      	b.n	167fc <hci_driver_open+0x18>
   1685c:	20000f8c 	.word	0x20000f8c
   16860:	0002f197 	.word	0x0002f197
   16864:	0001672d 	.word	0x0001672d
   16868:	20004fc0 	.word	0x20004fc0
   1686c:	20001f30 	.word	0x20001f30
   16870:	0002f1b9 	.word	0x0002f1b9
   16874:	00016675 	.word	0x00016675
   16878:	200051a0 	.word	0x200051a0
   1687c:	20001fc0 	.word	0x20001fc0
   16880:	0002f1c3 	.word	0x0002f1c3

00016884 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
   16884:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   16886:	4b07      	ldr	r3, [pc, #28]	; (168a4 <cmd_complete_status+0x20>)
{
   16888:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1688a:	2101      	movs	r1, #1
   1688c:	8818      	ldrh	r0, [r3, #0]
   1688e:	f00e f818 	bl	248c2 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   16892:	2101      	movs	r1, #1
   16894:	4604      	mov	r4, r0
   16896:	3008      	adds	r0, #8
   16898:	f006 f936 	bl	1cb08 <net_buf_simple_add>
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;
   1689c:	7005      	strb	r5, [r0, #0]

	return buf;
}
   1689e:	4620      	mov	r0, r4
   168a0:	bd38      	pop	{r3, r4, r5, pc}
   168a2:	bf00      	nop
   168a4:	200043a6 	.word	0x200043a6

000168a8 <cmd_status>:
	return bt_hci_cmd_status_create(_opcode, status);
   168a8:	4b02      	ldr	r3, [pc, #8]	; (168b4 <cmd_status+0xc>)
   168aa:	4601      	mov	r1, r0
   168ac:	8818      	ldrh	r0, [r3, #0]
   168ae:	f00e b81a 	b.w	248e6 <bt_hci_cmd_status_create>
   168b2:	bf00      	nop
   168b4:	200043a6 	.word	0x200043a6

000168b8 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   168b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   168ba:	4605      	mov	r5, r0
   168bc:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   168be:	4b13      	ldr	r3, [pc, #76]	; (1690c <le_remote_feat_complete+0x54>)
{
   168c0:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   168c2:	6859      	ldr	r1, [r3, #4]
   168c4:	2400      	movs	r4, #0
{
   168c6:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   168c8:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   168cc:	4622      	mov	r2, r4
   168ce:	4313      	orrs	r3, r2
   168d0:	d01a      	beq.n	16908 <le_remote_feat_complete+0x50>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   168d2:	4b0f      	ldr	r3, [pc, #60]	; (16910 <le_remote_feat_complete+0x58>)
   168d4:	6819      	ldr	r1, [r3, #0]
   168d6:	4623      	mov	r3, r4
   168d8:	f001 0208 	and.w	r2, r1, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   168dc:	4313      	orrs	r3, r2
   168de:	d013      	beq.n	16908 <le_remote_feat_complete+0x50>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   168e0:	220b      	movs	r2, #11
   168e2:	2104      	movs	r1, #4
   168e4:	f010 fcce 	bl	27284 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
   168e8:	2208      	movs	r2, #8
	sep->status = status;
   168ea:	7005      	strb	r5, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   168ec:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   168f0:	3003      	adds	r0, #3
   168f2:	b925      	cbnz	r5, 168fe <le_remote_feat_complete+0x46>
		memcpy(&sep->features[0],
   168f4:	1d31      	adds	r1, r6, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   168f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   168fa:	f00d bc28 	b.w	2414e <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   168fe:	4621      	mov	r1, r4
}
   16900:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   16904:	f00d bc4d 	b.w	241a2 <memset>
}
   16908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1690a:	bf00      	nop
   1690c:	20000458 	.word	0x20000458
   16910:	20000460 	.word	0x20000460

00016914 <hci_cmd_complete>:
{
   16914:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16916:	4b06      	ldr	r3, [pc, #24]	; (16930 <hci_cmd_complete+0x1c>)
{
   16918:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1691a:	8818      	ldrh	r0, [r3, #0]
{
   1691c:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1691e:	f00d ffd0 	bl	248c2 <bt_hci_cmd_complete_create>
   16922:	4621      	mov	r1, r4
   16924:	6028      	str	r0, [r5, #0]
   16926:	3008      	adds	r0, #8
}
   16928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1692c:	f006 b8ec 	b.w	1cb08 <net_buf_simple_add>
   16930:	200043a6 	.word	0x200043a6

00016934 <hci_vendor_cmd_handle_common>:
{
   16934:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   16936:	3801      	subs	r0, #1
{
   16938:	b087      	sub	sp, #28
   1693a:	4614      	mov	r4, r2
	switch (ocf) {
   1693c:	2809      	cmp	r0, #9
   1693e:	d87d      	bhi.n	16a3c <hci_vendor_cmd_handle_common+0x108>
   16940:	e8df f000 	tbb	[pc, r0]
   16944:	7c331c05 	.word	0x7c331c05
   16948:	3f7c5a7c 	.word	0x3f7c5a7c
   1694c:	7063      	.short	0x7063
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1694e:	210d      	movs	r1, #13
   16950:	4610      	mov	r0, r2
   16952:	f7ff ffdf 	bl	16914 <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   16956:	2302      	movs	r3, #2
   16958:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   1695a:	70c3      	strb	r3, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   1695c:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   1695e:	2304      	movs	r3, #4
	rp->status = 0x00;
   16960:	2100      	movs	r1, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   16962:	71c3      	strb	r3, [r0, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   16964:	2363      	movs	r3, #99	; 0x63
	rp->status = 0x00;
   16966:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   16968:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   1696a:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
   1696c:	7141      	strb	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   1696e:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   16970:	7243      	strb	r3, [r0, #9]
   16972:	7281      	strb	r1, [r0, #10]
   16974:	72c1      	strb	r1, [r0, #11]
   16976:	7301      	strb	r1, [r0, #12]
	return 0;
   16978:	2400      	movs	r4, #0
   1697a:	e013      	b.n	169a4 <hci_vendor_cmd_handle_common+0x70>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1697c:	2141      	movs	r1, #65	; 0x41
   1697e:	4610      	mov	r0, r2
   16980:	f7ff ffc8 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   16984:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16986:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   16988:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1698a:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1698e:	4621      	mov	r1, r4
   16990:	f00d fc07 	bl	241a2 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   16994:	786b      	ldrb	r3, [r5, #1]
   16996:	f063 0358 	orn	r3, r3, #88	; 0x58
   1699a:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   1699c:	78ab      	ldrb	r3, [r5, #2]
   1699e:	f043 0303 	orr.w	r3, r3, #3
   169a2:	70ab      	strb	r3, [r5, #2]
}
   169a4:	4620      	mov	r0, r4
   169a6:	b007      	add	sp, #28
   169a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   169aa:	2109      	movs	r1, #9
   169ac:	4610      	mov	r0, r2
   169ae:	f7ff ffb1 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   169b2:	2400      	movs	r4, #0
   169b4:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   169b8:	2208      	movs	r2, #8
   169ba:	4621      	mov	r1, r4
   169bc:	f00d fbf1 	bl	241a2 <memset>
   169c0:	e7f0      	b.n	169a4 <hci_vendor_cmd_handle_common+0x70>
	const char build_info[] = HCI_VS_BUILD_INFO;
   169c2:	4b20      	ldr	r3, [pc, #128]	; (16a44 <hci_vendor_cmd_handle_common+0x110>)
   169c4:	aa01      	add	r2, sp, #4
   169c6:	f103 0710 	add.w	r7, r3, #16
   169ca:	4616      	mov	r6, r2
   169cc:	6818      	ldr	r0, [r3, #0]
   169ce:	6859      	ldr	r1, [r3, #4]
   169d0:	4615      	mov	r5, r2
   169d2:	c503      	stmia	r5!, {r0, r1}
   169d4:	3308      	adds	r3, #8
   169d6:	42bb      	cmp	r3, r7
   169d8:	462a      	mov	r2, r5
   169da:	d1f7      	bne.n	169cc <hci_vendor_cmd_handle_common+0x98>
   169dc:	881b      	ldrh	r3, [r3, #0]
   169de:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   169e0:	2113      	movs	r1, #19
   169e2:	4620      	mov	r0, r4
   169e4:	f7ff ff96 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   169e8:	2400      	movs	r4, #0
   169ea:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   169ee:	2212      	movs	r2, #18
   169f0:	4631      	mov	r1, r6
   169f2:	f00d fbac 	bl	2414e <memcpy>
   169f6:	e7d5      	b.n	169a4 <hci_vendor_cmd_handle_common+0x70>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   169f8:	6889      	ldr	r1, [r1, #8]
   169fa:	2000      	movs	r0, #0
   169fc:	f7ff fdd2 	bl	165a4 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
   16a00:	2000      	movs	r0, #0
   16a02:	f7ff ff3f 	bl	16884 <cmd_complete_status>
   16a06:	6020      	str	r0, [r4, #0]
   16a08:	e7b6      	b.n	16978 <hci_vendor_cmd_handle_common+0x44>
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   16a0a:	2118      	movs	r1, #24
   16a0c:	4610      	mov	r0, r2
   16a0e:	f7ff ff81 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   16a12:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   16a14:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   16a16:	2101      	movs	r1, #1
	rp->status = 0x00;
   16a18:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   16a1c:	f011 f9bc 	bl	27d98 <hci_vendor_read_static_addr>
   16a20:	7068      	strb	r0, [r5, #1]
   16a22:	e7bf      	b.n	169a4 <hci_vendor_cmd_handle_common+0x70>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16a24:	2121      	movs	r1, #33	; 0x21
   16a26:	4610      	mov	r0, r2
   16a28:	f7ff ff74 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   16a2c:	4601      	mov	r1, r0
   16a2e:	2400      	movs	r4, #0
   16a30:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   16a34:	3001      	adds	r0, #1
   16a36:	f011 fa05 	bl	27e44 <hci_vendor_read_key_hierarchy_roots>
   16a3a:	e7b3      	b.n	169a4 <hci_vendor_cmd_handle_common+0x70>
		return -EINVAL;
   16a3c:	f06f 0415 	mvn.w	r4, #21
   16a40:	e7b0      	b.n	169a4 <hci_vendor_cmd_handle_common+0x70>
   16a42:	bf00      	nop
   16a44:	0002f349 	.word	0x0002f349

00016a48 <hci_cmd_handle>:
{
   16a48:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   16a4a:	8983      	ldrh	r3, [r0, #12]
{
   16a4c:	b08b      	sub	sp, #44	; 0x2c
	struct net_buf *evt = NULL;
   16a4e:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   16a50:	2b02      	cmp	r3, #2
{
   16a52:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
   16a54:	9505      	str	r5, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
   16a56:	d806      	bhi.n	16a66 <hci_cmd_handle+0x1e>
		BT_ERR("No HCI Command header");
   16a58:	48c3      	ldr	r0, [pc, #780]	; (16d68 <hci_cmd_handle+0x320>)
   16a5a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid HCI CMD packet length");
   16a5c:	f00b fa35 	bl	21eca <printk>
		return NULL;
   16a60:	4628      	mov	r0, r5
}
   16a62:	b00b      	add	sp, #44	; 0x2c
   16a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   16a66:	2103      	movs	r1, #3
   16a68:	3008      	adds	r0, #8
   16a6a:	f006 f82f 	bl	1cacc <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   16a6e:	89a2      	ldrh	r2, [r4, #12]
   16a70:	7883      	ldrb	r3, [r0, #2]
   16a72:	429a      	cmp	r2, r3
   16a74:	d202      	bcs.n	16a7c <hci_cmd_handle+0x34>
		BT_ERR("Invalid HCI CMD packet length");
   16a76:	2145      	movs	r1, #69	; 0x45
   16a78:	48bc      	ldr	r0, [pc, #752]	; (16d6c <hci_cmd_handle+0x324>)
   16a7a:	e7ef      	b.n	16a5c <hci_cmd_handle+0x14>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   16a7c:	8802      	ldrh	r2, [r0, #0]
   16a7e:	49bc      	ldr	r1, [pc, #752]	; (16d70 <hci_cmd_handle+0x328>)
   16a80:	b293      	uxth	r3, r2
	ocf = BT_OCF(_opcode);
   16a82:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
   16a86:	0a9b      	lsrs	r3, r3, #10
   16a88:	2b04      	cmp	r3, #4
	_opcode = sys_le16_to_cpu(chdr->opcode);
   16a8a:	800a      	strh	r2, [r1, #0]
	switch (BT_OGF(_opcode)) {
   16a8c:	d061      	beq.n	16b52 <hci_cmd_handle+0x10a>
   16a8e:	d805      	bhi.n	16a9c <hci_cmd_handle+0x54>
   16a90:	2b01      	cmp	r3, #1
   16a92:	d00f      	beq.n	16ab4 <hci_cmd_handle+0x6c>
   16a94:	2b03      	cmp	r3, #3
   16a96:	d01e      	beq.n	16ad6 <hci_cmd_handle+0x8e>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   16a98:	2001      	movs	r0, #1
   16a9a:	e019      	b.n	16ad0 <hci_cmd_handle+0x88>
	switch (BT_OGF(_opcode)) {
   16a9c:	2b08      	cmp	r3, #8
   16a9e:	f000 80de 	beq.w	16c5e <hci_cmd_handle+0x216>
   16aa2:	2b3f      	cmp	r3, #63	; 0x3f
   16aa4:	d1f8      	bne.n	16a98 <hci_cmd_handle+0x50>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   16aa6:	aa05      	add	r2, sp, #20
   16aa8:	4621      	mov	r1, r4
   16aaa:	f7ff ff43 	bl	16934 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   16aae:	3016      	adds	r0, #22
   16ab0:	d0f2      	beq.n	16a98 <hci_cmd_handle+0x50>
   16ab2:	e039      	b.n	16b28 <hci_cmd_handle+0xe0>
	switch (ocf) {
   16ab4:	2806      	cmp	r0, #6
   16ab6:	d006      	beq.n	16ac6 <hci_cmd_handle+0x7e>
   16ab8:	281d      	cmp	r0, #29
   16aba:	d1ed      	bne.n	16a98 <hci_cmd_handle+0x50>
	handle = sys_le16_to_cpu(cmd->handle);
   16abc:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   16abe:	8818      	ldrh	r0, [r3, #0]
   16ac0:	f010 fe55 	bl	2776e <ll_version_ind_send>
	*evt = cmd_status(status);
   16ac4:	e004      	b.n	16ad0 <hci_cmd_handle+0x88>
		disconnect(cmd, evt);
   16ac6:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   16ac8:	7899      	ldrb	r1, [r3, #2]
   16aca:	8818      	ldrh	r0, [r3, #0]
   16acc:	f010 fe0d 	bl	276ea <ll_terminate_ind_send>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   16ad0:	f7ff feea 	bl	168a8 <cmd_status>
   16ad4:	e012      	b.n	16afc <hci_cmd_handle+0xb4>
	switch (ocf) {
   16ad6:	2803      	cmp	r0, #3
   16ad8:	d012      	beq.n	16b00 <hci_cmd_handle+0xb8>
   16ada:	d808      	bhi.n	16aee <hci_cmd_handle+0xa6>
   16adc:	2801      	cmp	r0, #1
   16ade:	d1db      	bne.n	16a98 <hci_cmd_handle+0x50>
	event_mask = sys_get_le64(cmd->events);
   16ae0:	68a0      	ldr	r0, [r4, #8]
   16ae2:	f010 fbcb 	bl	2727c <sys_get_le64>
   16ae6:	4ba3      	ldr	r3, [pc, #652]	; (16d74 <hci_cmd_handle+0x32c>)
	le_event_mask = sys_get_le64(cmd->events);
   16ae8:	e9c3 0100 	strd	r0, r1, [r3]
   16aec:	e003      	b.n	16af6 <hci_cmd_handle+0xae>
	switch (ocf) {
   16aee:	282d      	cmp	r0, #45	; 0x2d
   16af0:	d01c      	beq.n	16b2c <hci_cmd_handle+0xe4>
   16af2:	2863      	cmp	r0, #99	; 0x63
   16af4:	d1d0      	bne.n	16a98 <hci_cmd_handle+0x50>
	*evt = cmd_complete_status(0x00);
   16af6:	2000      	movs	r0, #0
	*evt = cmd_complete_status(status);
   16af8:	f7ff fec4 	bl	16884 <cmd_complete_status>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   16afc:	9005      	str	r0, [sp, #20]
   16afe:	e013      	b.n	16b28 <hci_cmd_handle+0xe0>
	event_mask = DEFAULT_EVENT_MASK;
   16b00:	4b9c      	ldr	r3, [pc, #624]	; (16d74 <hci_cmd_handle+0x32c>)
   16b02:	f04f 30ff 	mov.w	r0, #4294967295
   16b06:	f641 71ff 	movw	r1, #8191	; 0x1fff
   16b0a:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   16b0e:	4b9a      	ldr	r3, [pc, #616]	; (16d78 <hci_cmd_handle+0x330>)
   16b10:	201f      	movs	r0, #31
   16b12:	2100      	movs	r1, #0
   16b14:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   16b18:	f000 fe82 	bl	17820 <ll_reset>
		*evt = cmd_complete_status(0x00);
   16b1c:	4628      	mov	r0, r5
   16b1e:	f7ff feb1 	bl	16884 <cmd_complete_status>
	conn_count = 0U;
   16b22:	4b96      	ldr	r3, [pc, #600]	; (16d7c <hci_cmd_handle+0x334>)
		*evt = cmd_complete_status(0x00);
   16b24:	9005      	str	r0, [sp, #20]
	conn_count = 0U;
   16b26:	601d      	str	r5, [r3, #0]
	return evt;
   16b28:	9805      	ldr	r0, [sp, #20]
   16b2a:	e79a      	b.n	16a62 <hci_cmd_handle+0x1a>
		read_tx_power_level(cmd, evt);
   16b2c:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16b2e:	2104      	movs	r1, #4
   16b30:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   16b32:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   16b34:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16b36:	f7ff feed 	bl	16914 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   16b3a:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16b3c:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   16b3e:	1cc3      	adds	r3, r0, #3
   16b40:	463a      	mov	r2, r7
   16b42:	4631      	mov	r1, r6
   16b44:	2002      	movs	r0, #2
   16b46:	f010 fb86 	bl	27256 <ll_tx_pwr_lvl_get>
	rp->status = status;
   16b4a:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   16b4c:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   16b50:	e7ea      	b.n	16b28 <hci_cmd_handle+0xe0>
	switch (ocf) {
   16b52:	3801      	subs	r0, #1
   16b54:	2808      	cmp	r0, #8
   16b56:	d89f      	bhi.n	16a98 <hci_cmd_handle+0x50>
   16b58:	a301      	add	r3, pc, #4	; (adr r3, 16b60 <hci_cmd_handle+0x118>)
   16b5a:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   16b5e:	bf00      	nop
   16b60:	00016b85 	.word	0x00016b85
   16b64:	00016bab 	.word	0x00016bab
   16b68:	00016c2b 	.word	0x00016c2b
   16b6c:	00016a99 	.word	0x00016a99
   16b70:	00016a99 	.word	0x00016a99
   16b74:	00016a99 	.word	0x00016a99
   16b78:	00016a99 	.word	0x00016a99
   16b7c:	00016a99 	.word	0x00016a99
   16b80:	00016c47 	.word	0x00016c47
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16b84:	2109      	movs	r1, #9
   16b86:	a805      	add	r0, sp, #20
   16b88:	f7ff fec4 	bl	16914 <hci_cmd_complete>
	rp->hci_version = LL_VERSION_NUMBER;
   16b8c:	220b      	movs	r2, #11
	rp->status = 0x00;
   16b8e:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   16b90:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   16b92:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   16b94:	2259      	movs	r2, #89	; 0x59
	rp->status = 0x00;
   16b96:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
   16b98:	7083      	strb	r3, [r0, #2]
   16b9a:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   16b9c:	7183      	strb	r3, [r0, #6]
   16b9e:	7142      	strb	r2, [r0, #5]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   16ba0:	f04f 33ff 	mov.w	r3, #4294967295
	dst[0] = val;
   16ba4:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   16ba6:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   16ba8:	e7be      	b.n	16b28 <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16baa:	2141      	movs	r1, #65	; 0x41
   16bac:	a805      	add	r0, sp, #20
   16bae:	f7ff feb1 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   16bb2:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16bb4:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   16bb6:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   16bb8:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   16bbc:	f00d faf1 	bl	241a2 <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   16bc0:	79a3      	ldrb	r3, [r4, #6]
	rp->commands[26] |= BIT(6) | BIT(7);
   16bc2:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   16bc4:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[28] |= BIT(3);
   16bc6:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[5] |= BIT(6) | BIT(7);
   16bc8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   16bcc:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   16bce:	7ae3      	ldrb	r3, [r4, #11]
   16bd0:	f043 0304 	orr.w	r3, r3, #4
   16bd4:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   16bd6:	7be3      	ldrb	r3, [r4, #15]
   16bd8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   16bdc:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   16bde:	7c23      	ldrb	r3, [r4, #16]
   16be0:	f043 0302 	orr.w	r3, r3, #2
   16be4:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   16be6:	7de3      	ldrb	r3, [r4, #23]
   16be8:	f043 0304 	orr.w	r3, r3, #4
   16bec:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
   16bee:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   16bf0:	f063 0308 	orn	r3, r3, #8
   16bf4:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
   16bf6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(2) | BIT(3);
   16bfa:	f062 0230 	orn	r2, r2, #48	; 0x30
	rp->commands[33] |= BIT(4) | BIT(5);
   16bfe:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[26] |= BIT(2) | BIT(3);
   16c02:	76e2      	strb	r2, [r4, #27]
	rp->commands[33] |= BIT(4) | BIT(5);
   16c04:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   16c08:	7862      	ldrb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   16c0a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
   16c0e:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   16c12:	f061 0108 	orn	r1, r1, #8
	rp->commands[0] |= BIT(5);
   16c16:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[38] |= BIT(7);
   16c1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
   16c1e:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   16c20:	76a1      	strb	r1, [r4, #26]
	rp->commands[0] |= BIT(5);
   16c22:	7062      	strb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   16c24:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   16c28:	e77e      	b.n	16b28 <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16c2a:	2109      	movs	r1, #9
   16c2c:	a805      	add	r0, sp, #20
   16c2e:	f7ff fe71 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   16c32:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16c34:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   16c36:	2208      	movs	r2, #8
	rp->status = 0x00;
   16c38:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   16c3c:	f00d fab1 	bl	241a2 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   16c40:	2360      	movs	r3, #96	; 0x60
   16c42:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   16c44:	e770      	b.n	16b28 <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16c46:	2107      	movs	r1, #7
   16c48:	a805      	add	r0, sp, #20
   16c4a:	f7ff fe63 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   16c4e:	4601      	mov	r1, r0
   16c50:	2300      	movs	r3, #0
   16c52:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   16c56:	4618      	mov	r0, r3
   16c58:	f7ff fc8a 	bl	16570 <ll_addr_get>
	if (err == -EINVAL) {
   16c5c:	e764      	b.n	16b28 <hci_cmd_handle+0xe0>
	switch (ocf) {
   16c5e:	280f      	cmp	r0, #15
   16c60:	f000 80c9 	beq.w	16df6 <hci_cmd_handle+0x3ae>
   16c64:	d848      	bhi.n	16cf8 <hci_cmd_handle+0x2b0>
   16c66:	2807      	cmp	r0, #7
   16c68:	f000 80fc 	beq.w	16e64 <hci_cmd_handle+0x41c>
   16c6c:	d829      	bhi.n	16cc2 <hci_cmd_handle+0x27a>
   16c6e:	2803      	cmp	r0, #3
   16c70:	f000 80ab 	beq.w	16dca <hci_cmd_handle+0x382>
   16c74:	d811      	bhi.n	16c9a <hci_cmd_handle+0x252>
   16c76:	2801      	cmp	r0, #1
   16c78:	f000 80a2 	beq.w	16dc0 <hci_cmd_handle+0x378>
   16c7c:	2802      	cmp	r0, #2
   16c7e:	f47f af0b 	bne.w	16a98 <hci_cmd_handle+0x50>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16c82:	2104      	movs	r1, #4
   16c84:	a805      	add	r0, sp, #20
   16c86:	f7ff fe45 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   16c8a:	2300      	movs	r3, #0
   16c8c:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   16c8e:	221b      	movs	r2, #27
   16c90:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   16c92:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   16c94:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   16c96:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
   16c98:	e746      	b.n	16b28 <hci_cmd_handle+0xe0>
	switch (ocf) {
   16c9a:	2805      	cmp	r0, #5
   16c9c:	f000 80a6 	beq.w	16dec <hci_cmd_handle+0x3a4>
   16ca0:	2806      	cmp	r0, #6
   16ca2:	f47f aef9 	bne.w	16a98 <hci_cmd_handle+0x50>
		le_set_adv_param(cmd, evt);
   16ca6:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   16ca8:	7ba5      	ldrb	r5, [r4, #14]
   16caa:	79a3      	ldrb	r3, [r4, #6]
   16cac:	7962      	ldrb	r2, [r4, #5]
   16cae:	7921      	ldrb	r1, [r4, #4]
   16cb0:	8820      	ldrh	r0, [r4, #0]
   16cb2:	9502      	str	r5, [sp, #8]
   16cb4:	7b65      	ldrb	r5, [r4, #13]
   16cb6:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   16cb8:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   16cba:	9400      	str	r4, [sp, #0]
   16cbc:	f001 fcac 	bl	18618 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
   16cc0:	e71a      	b.n	16af8 <hci_cmd_handle+0xb0>
	switch (ocf) {
   16cc2:	280a      	cmp	r0, #10
   16cc4:	f000 80db 	beq.w	16e7e <hci_cmd_handle+0x436>
   16cc8:	d80b      	bhi.n	16ce2 <hci_cmd_handle+0x29a>
   16cca:	2808      	cmp	r0, #8
   16ccc:	f000 80d1 	beq.w	16e72 <hci_cmd_handle+0x42a>
   16cd0:	2809      	cmp	r0, #9
   16cd2:	f47f aee1 	bne.w	16a98 <hci_cmd_handle+0x50>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   16cd6:	68a1      	ldr	r1, [r4, #8]
   16cd8:	f811 0b01 	ldrb.w	r0, [r1], #1
   16cdc:	f001 fe26 	bl	1892c <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
   16ce0:	e70a      	b.n	16af8 <hci_cmd_handle+0xb0>
	switch (ocf) {
   16ce2:	280b      	cmp	r0, #11
   16ce4:	f000 80d0 	beq.w	16e88 <hci_cmd_handle+0x440>
   16ce8:	280c      	cmp	r0, #12
   16cea:	f47f aed5 	bne.w	16a98 <hci_cmd_handle+0x50>
	status = ll_scan_enable(cmd->enable);
   16cee:	68a3      	ldr	r3, [r4, #8]
   16cf0:	7818      	ldrb	r0, [r3, #0]
   16cf2:	f010 fbb8 	bl	27466 <ll_scan_enable>
   16cf6:	e6ff      	b.n	16af8 <hci_cmd_handle+0xb0>
	switch (ocf) {
   16cf8:	2816      	cmp	r0, #22
   16cfa:	f000 80d1 	beq.w	16ea0 <hci_cmd_handle+0x458>
   16cfe:	d81f      	bhi.n	16d40 <hci_cmd_handle+0x2f8>
   16d00:	2812      	cmp	r0, #18
   16d02:	f000 8085 	beq.w	16e10 <hci_cmd_handle+0x3c8>
   16d06:	d808      	bhi.n	16d1a <hci_cmd_handle+0x2d2>
   16d08:	2810      	cmp	r0, #16
   16d0a:	d07e      	beq.n	16e0a <hci_cmd_handle+0x3c2>
   16d0c:	2811      	cmp	r0, #17
   16d0e:	f47f aec3 	bne.w	16a98 <hci_cmd_handle+0x50>
	status = ll_wl_add(&cmd->addr);
   16d12:	68a0      	ldr	r0, [r4, #8]
   16d14:	f003 f92a 	bl	19f6c <ll_wl_add>
	*evt = cmd_complete_status(status);
   16d18:	e6ee      	b.n	16af8 <hci_cmd_handle+0xb0>
	switch (ocf) {
   16d1a:	2813      	cmp	r0, #19
   16d1c:	f000 80c5 	beq.w	16eaa <hci_cmd_handle+0x462>
   16d20:	2815      	cmp	r0, #21
   16d22:	f47f aeb9 	bne.w	16a98 <hci_cmd_handle+0x50>
	handle = sys_le16_to_cpu(cmd->handle);
   16d26:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16d28:	2108      	movs	r1, #8
   16d2a:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   16d2c:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16d2e:	f7ff fdf1 	bl	16914 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   16d32:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16d34:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   16d36:	1cc1      	adds	r1, r0, #3
   16d38:	4630      	mov	r0, r6
   16d3a:	f010 fcbf 	bl	276bc <ll_chm_get>
   16d3e:	e704      	b.n	16b4a <hci_cmd_handle+0x102>
	switch (ocf) {
   16d40:	281c      	cmp	r0, #28
   16d42:	d07c      	beq.n	16e3e <hci_cmd_handle+0x3f6>
   16d44:	d81c      	bhi.n	16d80 <hci_cmd_handle+0x338>
   16d46:	2817      	cmp	r0, #23
   16d48:	d066      	beq.n	16e18 <hci_cmd_handle+0x3d0>
   16d4a:	2818      	cmp	r0, #24
   16d4c:	f47f aea4 	bne.w	16a98 <hci_cmd_handle+0x50>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16d50:	2109      	movs	r1, #9
   16d52:	a805      	add	r0, sp, #20
   16d54:	f7ff fdde 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   16d58:	2300      	movs	r3, #0
   16d5a:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   16d5e:	2108      	movs	r1, #8
   16d60:	f003 fb46 	bl	1a3f0 <lll_csrand_get>
	if (err == -EINVAL) {
   16d64:	e6e0      	b.n	16b28 <hci_cmd_handle+0xe0>
   16d66:	bf00      	nop
   16d68:	0002f2f9 	.word	0x0002f2f9
   16d6c:	0002f314 	.word	0x0002f314
   16d70:	200043a6 	.word	0x200043a6
   16d74:	20000458 	.word	0x20000458
   16d78:	20000460 	.word	0x20000460
   16d7c:	2000302c 	.word	0x2000302c
	switch (ocf) {
   16d80:	2821      	cmp	r0, #33	; 0x21
   16d82:	f000 80a0 	beq.w	16ec6 <hci_cmd_handle+0x47e>
   16d86:	284b      	cmp	r0, #75	; 0x4b
   16d88:	f000 80a5 	beq.w	16ed6 <hci_cmd_handle+0x48e>
   16d8c:	2820      	cmp	r0, #32
   16d8e:	f47f ae83 	bne.w	16a98 <hci_cmd_handle+0x50>
		le_conn_param_req_reply(cmd, evt);
   16d92:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   16d94:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   16d96:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   16d98:	8853      	ldrh	r3, [r2, #2]
   16d9a:	9102      	str	r1, [sp, #8]
   16d9c:	88d1      	ldrh	r1, [r2, #6]
   16d9e:	9101      	str	r1, [sp, #4]
   16da0:	8892      	ldrh	r2, [r2, #4]
   16da2:	9200      	str	r2, [sp, #0]
   16da4:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   16da6:	2102      	movs	r1, #2
   16da8:	4620      	mov	r0, r4
   16daa:	f010 fc05 	bl	275b8 <ll_conn_update>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16dae:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   16db0:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16db2:	a805      	add	r0, sp, #20
   16db4:	f7ff fdae 	bl	16914 <hci_cmd_complete>
	rp->status = status;
   16db8:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   16dba:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   16dbe:	e6b3      	b.n	16b28 <hci_cmd_handle+0xe0>
	le_event_mask = sys_get_le64(cmd->events);
   16dc0:	68a0      	ldr	r0, [r4, #8]
   16dc2:	f010 fa5b 	bl	2727c <sys_get_le64>
   16dc6:	4b4a      	ldr	r3, [pc, #296]	; (16ef0 <hci_cmd_handle+0x4a8>)
   16dc8:	e68e      	b.n	16ae8 <hci_cmd_handle+0xa0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16dca:	2109      	movs	r1, #9
   16dcc:	a805      	add	r0, sp, #20
   16dce:	f7ff fda1 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   16dd2:	2500      	movs	r5, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16dd4:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   16dd6:	2208      	movs	r2, #8
	rp->status = 0x00;
   16dd8:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   16ddc:	4629      	mov	r1, r5
   16dde:	f00d f9e0 	bl	241a2 <memset>
	dst[0] = val;
   16de2:	238e      	movs	r3, #142	; 0x8e
   16de4:	7063      	strb	r3, [r4, #1]
	dst[1] = val >> 8;
   16de6:	70a5      	strb	r5, [r4, #2]
	dst[2] = val >> 16;
   16de8:	70e5      	strb	r5, [r4, #3]
	if (err == -EINVAL) {
   16dea:	e69d      	b.n	16b28 <hci_cmd_handle+0xe0>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   16dec:	68a1      	ldr	r1, [r4, #8]
   16dee:	2001      	movs	r0, #1
   16df0:	f7ff fbd8 	bl	165a4 <ll_addr_set>
	*evt = cmd_complete_status(status);
   16df4:	e680      	b.n	16af8 <hci_cmd_handle+0xb0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16df6:	2102      	movs	r1, #2
   16df8:	a805      	add	r0, sp, #20
   16dfa:	f7ff fd8b 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   16dfe:	7005      	strb	r5, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16e00:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   16e02:	f010 fd14 	bl	2782e <ll_wl_size_get>
   16e06:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   16e08:	e68e      	b.n	16b28 <hci_cmd_handle+0xe0>
	status = ll_wl_clear();
   16e0a:	f003 f899 	bl	19f40 <ll_wl_clear>
	*evt = cmd_complete_status(status);
   16e0e:	e673      	b.n	16af8 <hci_cmd_handle+0xb0>
	status = ll_wl_remove(&cmd->addr);
   16e10:	68a0      	ldr	r0, [r4, #8]
   16e12:	f003 f8e5 	bl	19fe0 <ll_wl_remove>
	*evt = cmd_complete_status(status);
   16e16:	e66f      	b.n	16af8 <hci_cmd_handle+0xb0>
		le_encrypt(cmd, evt);
   16e18:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   16e1a:	aa06      	add	r2, sp, #24
   16e1c:	2300      	movs	r3, #0
   16e1e:	f100 0110 	add.w	r1, r0, #16
   16e22:	f010 ff47 	bl	27cb4 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16e26:	2111      	movs	r1, #17
   16e28:	a805      	add	r0, sp, #20
   16e2a:	f7ff fd73 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   16e2e:	2300      	movs	r3, #0
   16e30:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   16e34:	2210      	movs	r2, #16
   16e36:	a906      	add	r1, sp, #24
   16e38:	f00d f989 	bl	2414e <memcpy>
	if (err == -EINVAL) {
   16e3c:	e674      	b.n	16b28 <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16e3e:	2109      	movs	r1, #9
   16e40:	a805      	add	r0, sp, #20
   16e42:	f7ff fd67 	bl	16914 <hci_cmd_complete>
	dst[0] = val;
   16e46:	22bf      	movs	r2, #191	; 0xbf
   16e48:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
   16e4a:	22ff      	movs	r2, #255	; 0xff
   16e4c:	7082      	strb	r2, [r0, #2]
	dst[0] = val;
   16e4e:	2230      	movs	r2, #48	; 0x30
   16e50:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   16e52:	22ec      	movs	r2, #236	; 0xec
   16e54:	7102      	strb	r2, [r0, #4]
	dst[0] = val;
   16e56:	22c0      	movs	r2, #192	; 0xc0
	rp->status = 0x00;
   16e58:	2300      	movs	r3, #0
   16e5a:	7142      	strb	r2, [r0, #5]
	dst[1] = val >> 8;
   16e5c:	2201      	movs	r2, #1
   16e5e:	7003      	strb	r3, [r0, #0]
   16e60:	7182      	strb	r2, [r0, #6]
   16e62:	e69f      	b.n	16ba4 <hci_cmd_handle+0x15c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16e64:	2102      	movs	r1, #2
   16e66:	a805      	add	r0, sp, #20
   16e68:	f7ff fd54 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   16e6c:	7005      	strb	r5, [r0, #0]
	rp->tx_power_level = 0;
   16e6e:	7045      	strb	r5, [r0, #1]
	if (err == -EINVAL) {
   16e70:	e65a      	b.n	16b28 <hci_cmd_handle+0xe0>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   16e72:	68a1      	ldr	r1, [r4, #8]
   16e74:	f811 0b01 	ldrb.w	r0, [r1], #1
   16e78:	f001 fd50 	bl	1891c <ll_adv_data_set>
	*evt = cmd_complete_status(status);
   16e7c:	e63c      	b.n	16af8 <hci_cmd_handle+0xb0>
	status = ll_adv_enable(cmd->enable);
   16e7e:	68a3      	ldr	r3, [r4, #8]
   16e80:	7818      	ldrb	r0, [r3, #0]
   16e82:	f7e9 fb0d 	bl	4a0 <ll_adv_enable>
	*evt = cmd_complete_status(status);
   16e86:	e637      	b.n	16af8 <hci_cmd_handle+0xb0>
		le_set_scan_param(cmd, evt);
   16e88:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   16e8a:	7963      	ldrb	r3, [r4, #5]
   16e8c:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   16e90:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   16e94:	7820      	ldrb	r0, [r4, #0]
   16e96:	79a4      	ldrb	r4, [r4, #6]
   16e98:	9400      	str	r4, [sp, #0]
   16e9a:	f7e9 fd41 	bl	920 <ll_scan_params_set>
	*evt = cmd_complete_status(status);
   16e9e:	e62b      	b.n	16af8 <hci_cmd_handle+0xb0>
	handle = sys_le16_to_cpu(cmd->handle);
   16ea0:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   16ea2:	8818      	ldrh	r0, [r3, #0]
   16ea4:	f010 fc48 	bl	27738 <ll_feature_req_send>
	*evt = cmd_status(status);
   16ea8:	e612      	b.n	16ad0 <hci_cmd_handle+0x88>
		le_conn_update(cmd, evt);
   16eaa:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   16eac:	8911      	ldrh	r1, [r2, #8]
   16eae:	8853      	ldrh	r3, [r2, #2]
   16eb0:	8810      	ldrh	r0, [r2, #0]
   16eb2:	9102      	str	r1, [sp, #8]
   16eb4:	88d1      	ldrh	r1, [r2, #6]
   16eb6:	9101      	str	r1, [sp, #4]
   16eb8:	8892      	ldrh	r2, [r2, #4]
   16eba:	9200      	str	r2, [sp, #0]
   16ebc:	2200      	movs	r2, #0
   16ebe:	4611      	mov	r1, r2
   16ec0:	f010 fb7a 	bl	275b8 <ll_conn_update>
	*evt = cmd_status(status);
   16ec4:	e604      	b.n	16ad0 <hci_cmd_handle+0x88>
		le_conn_param_req_neg_reply(cmd, evt);
   16ec6:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   16ec8:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   16eca:	789a      	ldrb	r2, [r3, #2]
   16ecc:	2300      	movs	r3, #0
   16ece:	e9cd 3301 	strd	r3, r3, [sp, #4]
   16ed2:	9300      	str	r3, [sp, #0]
   16ed4:	e767      	b.n	16da6 <hci_cmd_handle+0x35e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   16ed6:	2103      	movs	r1, #3
   16ed8:	a805      	add	r0, sp, #20
   16eda:	f7ff fd1b 	bl	16914 <hci_cmd_complete>
	rp->status = 0x00;
   16ede:	4601      	mov	r1, r0
   16ee0:	2300      	movs	r3, #0
   16ee2:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   16ee6:	3001      	adds	r0, #1
   16ee8:	f010 f9c4 	bl	27274 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   16eec:	e61c      	b.n	16b28 <hci_cmd_handle+0xe0>
   16eee:	bf00      	nop
   16ef0:	20000460 	.word	0x20000460

00016ef4 <hci_acl_handle>:
{
   16ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   16ef8:	2300      	movs	r3, #0
   16efa:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   16efc:	8983      	ldrh	r3, [r0, #12]
   16efe:	2b03      	cmp	r3, #3
{
   16f00:	4605      	mov	r5, r0
   16f02:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
   16f04:	d806      	bhi.n	16f14 <hci_acl_handle+0x20>
		BT_ERR("No HCI ACL header");
   16f06:	4832      	ldr	r0, [pc, #200]	; (16fd0 <hci_acl_handle+0xdc>)
   16f08:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid HCI ACL packet length");
   16f0a:	f00a ffde 	bl	21eca <printk>
		return -EINVAL;
   16f0e:	f06f 0015 	mvn.w	r0, #21
   16f12:	e037      	b.n	16f84 <hci_acl_handle+0x90>
   16f14:	2104      	movs	r1, #4
   16f16:	3008      	adds	r0, #8
   16f18:	f005 fdd8 	bl	1cacc <net_buf_simple_pull_mem>
	if (buf->len < len) {
   16f1c:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   16f1e:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   16f20:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   16f24:	42bb      	cmp	r3, r7
   16f26:	d202      	bcs.n	16f2e <hci_acl_handle+0x3a>
		BT_ERR("Invalid HCI ACL packet length");
   16f28:	2145      	movs	r1, #69	; 0x45
   16f2a:	482a      	ldr	r0, [pc, #168]	; (16fd4 <hci_acl_handle+0xe0>)
   16f2c:	e7ed      	b.n	16f0a <hci_acl_handle+0x16>
	node_tx = ll_tx_mem_acquire();
   16f2e:	f001 ff3f 	bl	18db0 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   16f32:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if (!node_tx) {
   16f36:	4604      	mov	r4, r0
   16f38:	bb30      	cbnz	r0, 16f88 <hci_acl_handle+0x94>
		BT_ERR("Tx Buffer Overflow");
   16f3a:	2145      	movs	r1, #69	; 0x45
   16f3c:	4826      	ldr	r0, [pc, #152]	; (16fd8 <hci_acl_handle+0xe4>)
   16f3e:	f00a ffc4 	bl	21eca <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   16f42:	4b26      	ldr	r3, [pc, #152]	; (16fdc <hci_acl_handle+0xe8>)
   16f44:	6819      	ldr	r1, [r3, #0]
   16f46:	4623      	mov	r3, r4
   16f48:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   16f4c:	4313      	orrs	r3, r2
   16f4e:	d017      	beq.n	16f80 <hci_acl_handle+0x8c>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   16f50:	f04f 32ff 	mov.w	r2, #4294967295
   16f54:	f04f 33ff 	mov.w	r3, #4294967295
   16f58:	2001      	movs	r0, #1
   16f5a:	f7ee fca7 	bl	58ac <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   16f5e:	2102      	movs	r1, #2
   16f60:	f8c8 0000 	str.w	r0, [r8]
   16f64:	3008      	adds	r0, #8
   16f66:	f005 fdcf 	bl	1cb08 <net_buf_simple_add>
	hdr->len = len;
   16f6a:	2401      	movs	r4, #1
	hdr->evt = evt;
   16f6c:	231a      	movs	r3, #26
   16f6e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   16f70:	7044      	strb	r4, [r0, #1]
   16f72:	f8d8 0000 	ldr.w	r0, [r8]
   16f76:	4621      	mov	r1, r4
   16f78:	3008      	adds	r0, #8
   16f7a:	f005 fdc5 	bl	1cb08 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   16f7e:	7004      	strb	r4, [r0, #0]
		return -ENOBUFS;
   16f80:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   16f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   16f88:	08b3      	lsrs	r3, r6, #2
   16f8a:	d1c0      	bne.n	16f0e <hci_acl_handle+0x1a>
	switch (bt_acl_flags_pb(flags)) {
   16f8c:	b12e      	cbz	r6, 16f9a <hci_acl_handle+0xa6>
   16f8e:	2e01      	cmp	r6, #1
   16f90:	d1bd      	bne.n	16f0e <hci_acl_handle+0x1a>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   16f92:	7903      	ldrb	r3, [r0, #4]
   16f94:	f366 0301 	bfi	r3, r6, #0, #2
   16f98:	e003      	b.n	16fa2 <hci_acl_handle+0xae>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   16f9a:	7903      	ldrb	r3, [r0, #4]
   16f9c:	2202      	movs	r2, #2
   16f9e:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data->len = len;
   16fa2:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   16fa4:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   16fa6:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   16fa8:	463a      	mov	r2, r7
   16faa:	1de0      	adds	r0, r4, #7
   16fac:	f00d f8cf 	bl	2414e <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   16fb0:	4621      	mov	r1, r4
   16fb2:	f3c9 000b 	ubfx	r0, r9, #0, #12
   16fb6:	f001 ff07 	bl	18dc8 <ll_tx_mem_enqueue>
   16fba:	2800      	cmp	r0, #0
   16fbc:	d0e2      	beq.n	16f84 <hci_acl_handle+0x90>
		BT_ERR("Invalid Tx Enqueue");
   16fbe:	2145      	movs	r1, #69	; 0x45
   16fc0:	4807      	ldr	r0, [pc, #28]	; (16fe0 <hci_acl_handle+0xec>)
   16fc2:	f00a ff82 	bl	21eca <printk>
		ll_tx_mem_release(node_tx);
   16fc6:	4620      	mov	r0, r4
   16fc8:	f001 fef8 	bl	18dbc <ll_tx_mem_release>
		return -EINVAL;
   16fcc:	e79f      	b.n	16f0e <hci_acl_handle+0x1a>
   16fce:	bf00      	nop
   16fd0:	0002f28f 	.word	0x0002f28f
   16fd4:	0002f2a6 	.word	0x0002f2a6
   16fd8:	0002f2c9 	.word	0x0002f2c9
   16fdc:	20000458 	.word	0x20000458
   16fe0:	0002f2e1 	.word	0x0002f2e1

00016fe4 <hci_disconn_complete_encode>:
{
   16fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   16fe6:	4b0f      	ldr	r3, [pc, #60]	; (17024 <hci_disconn_complete_encode+0x40>)
   16fe8:	681b      	ldr	r3, [r3, #0]
   16fea:	2500      	movs	r5, #0
{
   16fec:	4606      	mov	r6, r0
   16fee:	460f      	mov	r7, r1
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   16ff0:	f003 0010 	and.w	r0, r3, #16
   16ff4:	4629      	mov	r1, r5
   16ff6:	ea50 0301 	orrs.w	r3, r0, r1
   16ffa:	d011      	beq.n	17020 <hci_disconn_complete_encode+0x3c>
   16ffc:	f102 0408 	add.w	r4, r2, #8
   17000:	2102      	movs	r1, #2
   17002:	4620      	mov	r0, r4
   17004:	f005 fd80 	bl	1cb08 <net_buf_simple_add>
	hdr->evt = evt;
   17008:	2305      	movs	r3, #5
	hdr->len = len;
   1700a:	2104      	movs	r1, #4
	hdr->evt = evt;
   1700c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1700e:	7041      	strb	r1, [r0, #1]
   17010:	4620      	mov	r0, r4
   17012:	f005 fd79 	bl	1cb08 <net_buf_simple_add>
	ep->status = 0x00;
   17016:	7005      	strb	r5, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   17018:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   1701c:	7833      	ldrb	r3, [r6, #0]
   1701e:	70c3      	strb	r3, [r0, #3]
}
   17020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17022:	bf00      	nop
   17024:	20000458 	.word	0x20000458

00017028 <hci_disconn_complete_process>:
	conn_count--;
   17028:	4a02      	ldr	r2, [pc, #8]	; (17034 <hci_disconn_complete_process+0xc>)
   1702a:	6813      	ldr	r3, [r2, #0]
   1702c:	3b01      	subs	r3, #1
   1702e:	6013      	str	r3, [r2, #0]
}
   17030:	4770      	bx	lr
   17032:	bf00      	nop
   17034:	2000302c 	.word	0x2000302c

00017038 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   17038:	7f03      	ldrb	r3, [r0, #28]
   1703a:	f003 0303 	and.w	r3, r3, #3
   1703e:	3b01      	subs	r3, #1
   17040:	2b01      	cmp	r3, #1
{
   17042:	b570      	push	{r4, r5, r6, lr}
   17044:	4604      	mov	r4, r0
	switch (pdu_data->ll_id) {
   17046:	d81c      	bhi.n	17082 <hci_acl_encode+0x4a>
   17048:	f101 0608 	add.w	r6, r1, #8
	handle = node_rx->hdr.handle;
   1704c:	88c5      	ldrh	r5, [r0, #6]
   1704e:	2104      	movs	r1, #4
   17050:	4630      	mov	r0, r6
   17052:	f005 fd59 	bl	1cb08 <net_buf_simple_add>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   17056:	7f23      	ldrb	r3, [r4, #28]
   17058:	f003 0303 	and.w	r3, r3, #3
   1705c:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   1705e:	bf0c      	ite	eq
   17060:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   17064:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
   17068:	8005      	strh	r5, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   1706a:	7f61      	ldrb	r1, [r4, #29]
   1706c:	8041      	strh	r1, [r0, #2]
   1706e:	4630      	mov	r0, r6
   17070:	f005 fd4a 	bl	1cb08 <net_buf_simple_add>
		data = (void *)net_buf_add(buf, pdu_data->len);
		memcpy(data, pdu_data->lldata, pdu_data->len);
   17074:	7f62      	ldrb	r2, [r4, #29]
   17076:	f104 011f 	add.w	r1, r4, #31

	default:
		LL_ASSERT(0);
		break;
	}
}
   1707a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1707e:	f00d b866 	b.w	2414e <memcpy>
		LL_ASSERT(0);
   17082:	f241 726b 	movw	r2, #5995	; 0x176b
   17086:	4905      	ldr	r1, [pc, #20]	; (1709c <hci_acl_encode+0x64>)
   17088:	4805      	ldr	r0, [pc, #20]	; (170a0 <hci_acl_encode+0x68>)
   1708a:	f00a ff1e 	bl	21eca <printk>
   1708e:	4040      	eors	r0, r0
   17090:	f380 8811 	msr	BASEPRI, r0
   17094:	f04f 0003 	mov.w	r0, #3
   17098:	df02      	svc	2
}
   1709a:	bd70      	pop	{r4, r5, r6, pc}
   1709c:	0002f256 	.word	0x0002f256
   170a0:	0002a026 	.word	0x0002a026

000170a4 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   170a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   170a8:	4604      	mov	r4, r0
   170aa:	b086      	sub	sp, #24
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   170ac:	7923      	ldrb	r3, [r4, #4]
   170ae:	88e7      	ldrh	r7, [r4, #6]
   170b0:	2b03      	cmp	r3, #3
{
   170b2:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   170b4:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   170b8:	f000 810f 	beq.w	172da <hci_evt_encode+0x236>
	switch (node_rx->hdr.type) {
   170bc:	2b13      	cmp	r3, #19
   170be:	f000 80c0 	beq.w	17242 <hci_evt_encode+0x19e>
   170c2:	d80e      	bhi.n	170e2 <hci_evt_encode+0x3e>
   170c4:	2b04      	cmp	r3, #4
   170c6:	d033      	beq.n	17130 <hci_evt_encode+0x8c>
		LL_ASSERT(0);
   170c8:	f241 6276 	movw	r2, #5750	; 0x1676
		LL_ASSERT(0);
   170cc:	49a8      	ldr	r1, [pc, #672]	; (17370 <hci_evt_encode+0x2cc>)
   170ce:	48a9      	ldr	r0, [pc, #676]	; (17374 <hci_evt_encode+0x2d0>)
   170d0:	f00a fefb 	bl	21eca <printk>
   170d4:	4040      	eors	r0, r0
   170d6:	f380 8811 	msr	BASEPRI, r0
   170da:	f04f 0003 	mov.w	r0, #3
   170de:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   170e0:	e074      	b.n	171cc <hci_evt_encode+0x128>
	switch (node_rx->hdr.type) {
   170e2:	2b14      	cmp	r3, #20
   170e4:	f000 80f2 	beq.w	172cc <hci_evt_encode+0x228>
   170e8:	2b15      	cmp	r3, #21
   170ea:	d1ed      	bne.n	170c8 <hci_evt_encode+0x24>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   170ec:	4ba2      	ldr	r3, [pc, #648]	; (17378 <hci_evt_encode+0x2d4>)
   170ee:	6858      	ldr	r0, [r3, #4]
   170f0:	2100      	movs	r1, #0
   170f2:	460a      	mov	r2, r1
   170f4:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   170f8:	4313      	orrs	r3, r2
   170fa:	d067      	beq.n	171cc <hci_evt_encode+0x128>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   170fc:	4b9f      	ldr	r3, [pc, #636]	; (1737c <hci_evt_encode+0x2d8>)
   170fe:	6818      	ldr	r0, [r3, #0]
   17100:	460b      	mov	r3, r1
   17102:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17106:	4313      	orrs	r3, r2
   17108:	d060      	beq.n	171cc <hci_evt_encode+0x128>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   1710a:	2209      	movs	r2, #9
   1710c:	2103      	movs	r1, #3
   1710e:	4630      	mov	r0, r6
   17110:	f010 f8b8 	bl	27284 <meta_evt>
	sep->status = cu->status;
   17114:	7f23      	ldrb	r3, [r4, #28]
   17116:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   17118:	8be3      	ldrh	r3, [r4, #30]
   1711a:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   1711e:	8c23      	ldrh	r3, [r4, #32]
   17120:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   17124:	8c63      	ldrh	r3, [r4, #34]	; 0x22
	sep->handle = sys_cpu_to_le16(handle);
   17126:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1712a:	f8a0 3007 	strh.w	r3, [r0, #7]
   1712e:	e04d      	b.n	171cc <hci_evt_encode+0x128>
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   17130:	4b93      	ldr	r3, [pc, #588]	; (17380 <hci_evt_encode+0x2dc>)
   17132:	9304      	str	r3, [sp, #16]
   17134:	f64f 7304 	movw	r3, #65284	; 0xff04
   17138:	f8ad 3014 	strh.w	r3, [sp, #20]
   1713c:	2302      	movs	r3, #2
   1713e:	f88d 3016 	strb.w	r3, [sp, #22]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   17142:	4b8d      	ldr	r3, [pc, #564]	; (17378 <hci_evt_encode+0x2d4>)
   17144:	7e27      	ldrb	r7, [r4, #24]
   17146:	6858      	ldr	r0, [r3, #4]
	direct = node_rx->hdr.rx_ftr.direct;
   17148:	7e65      	ldrb	r5, [r4, #25]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   1714a:	427f      	negs	r7, r7
   1714c:	2100      	movs	r1, #0
   1714e:	b27f      	sxtb	r7, r7
	if (direct) {
   17150:	460a      	mov	r2, r1
   17152:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   17156:	2d00      	cmp	r5, #0
   17158:	d03b      	beq.n	171d2 <hci_evt_encode+0x12e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1715a:	4313      	orrs	r3, r2
   1715c:	d036      	beq.n	171cc <hci_evt_encode+0x128>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   1715e:	4b87      	ldr	r3, [pc, #540]	; (1737c <hci_evt_encode+0x2d8>)
   17160:	6818      	ldr	r0, [r3, #0]
   17162:	460b      	mov	r3, r1
   17164:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17168:	4313      	orrs	r3, r2
   1716a:	d02f      	beq.n	171cc <hci_evt_encode+0x128>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   1716c:	7f23      	ldrb	r3, [r4, #28]
   1716e:	f003 030f 	and.w	r3, r3, #15
   17172:	2b01      	cmp	r3, #1
   17174:	d00b      	beq.n	1718e <hci_evt_encode+0xea>
   17176:	f241 0281 	movw	r2, #4225	; 0x1081
   1717a:	497d      	ldr	r1, [pc, #500]	; (17370 <hci_evt_encode+0x2cc>)
   1717c:	487d      	ldr	r0, [pc, #500]	; (17374 <hci_evt_encode+0x2d0>)
   1717e:	f00a fea4 	bl	21eca <printk>
   17182:	4040      	eors	r0, r0
   17184:	f380 8811 	msr	BASEPRI, r0
   17188:	f04f 0003 	mov.w	r0, #3
   1718c:	df02      	svc	2
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   1718e:	2211      	movs	r2, #17
   17190:	210b      	movs	r1, #11
   17192:	4630      	mov	r0, r6
   17194:	f010 f876 	bl	27284 <meta_evt>
	drp->num_reports = 1U;
   17198:	2301      	movs	r3, #1
   1719a:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   1719c:	7043      	strb	r3, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
   1719e:	7f23      	ldrb	r3, [r4, #28]
   171a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   171a4:	4605      	mov	r5, r0
		dir_info->addr.type = adv->tx_addr;
   171a6:	7083      	strb	r3, [r0, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   171a8:	2206      	movs	r2, #6
   171aa:	f104 011e 	add.w	r1, r4, #30
   171ae:	3003      	adds	r0, #3
   171b0:	f00c ffcd 	bl	2414e <memcpy>
	dir_info->dir_addr.type = adv->rx_addr;
   171b4:	7f23      	ldrb	r3, [r4, #28]
   171b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   171ba:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   171bc:	2206      	movs	r2, #6
   171be:	f104 0124 	add.w	r1, r4, #36	; 0x24
   171c2:	f105 000a 	add.w	r0, r5, #10
   171c6:	f00c ffc2 	bl	2414e <memcpy>
	dir_info->rssi = rssi;
   171ca:	742f      	strb	r7, [r5, #16]
}
   171cc:	b006      	add	sp, #24
   171ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   171d2:	4313      	orrs	r3, r2
   171d4:	d0fa      	beq.n	171cc <hci_evt_encode+0x128>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   171d6:	4b69      	ldr	r3, [pc, #420]	; (1737c <hci_evt_encode+0x2d8>)
   171d8:	6819      	ldr	r1, [r3, #0]
   171da:	462b      	mov	r3, r5
   171dc:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   171e0:	4313      	orrs	r3, r2
   171e2:	d0f3      	beq.n	171cc <hci_evt_encode+0x128>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   171e4:	7f23      	ldrb	r3, [r4, #28]
   171e6:	f003 030f 	and.w	r3, r3, #15
   171ea:	2b01      	cmp	r3, #1
		data_len = (adv->len - BDADDR_SIZE);
   171ec:	bf1e      	ittt	ne
   171ee:	7f65      	ldrbne	r5, [r4, #29]
   171f0:	3d06      	subne	r5, #6
   171f2:	b2ed      	uxtbne	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   171f4:	f105 020b 	add.w	r2, r5, #11
   171f8:	b2d2      	uxtb	r2, r2
   171fa:	2102      	movs	r1, #2
   171fc:	4630      	mov	r0, r6
   171fe:	f010 f841 	bl	27284 <meta_evt>
	sep->num_reports = 1U;
   17202:	2301      	movs	r3, #1
   17204:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   17206:	7f23      	ldrb	r3, [r4, #28]
   17208:	aa06      	add	r2, sp, #24
   1720a:	f003 030f 	and.w	r3, r3, #15
   1720e:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   17210:	4606      	mov	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
   17212:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   17216:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
   17218:	7f23      	ldrb	r3, [r4, #28]
   1721a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1721e:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   17220:	2206      	movs	r2, #6
   17222:	f104 011e 	add.w	r1, r4, #30
   17226:	3003      	adds	r0, #3
   17228:	f00c ff91 	bl	2414e <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   1722c:	360a      	adds	r6, #10
	adv_info->length = data_len;
   1722e:	f806 5c01 	strb.w	r5, [r6, #-1]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   17232:	462a      	mov	r2, r5
   17234:	f104 0124 	add.w	r1, r4, #36	; 0x24
   17238:	4630      	mov	r0, r6
   1723a:	f00c ff88 	bl	2414e <memcpy>
	*prssi = rssi;
   1723e:	5577      	strb	r7, [r6, r5]
   17240:	e7c4      	b.n	171cc <hci_evt_encode+0x128>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17242:	4b4d      	ldr	r3, [pc, #308]	; (17378 <hci_evt_encode+0x2d4>)
   17244:	6858      	ldr	r0, [r3, #4]
   17246:	2100      	movs	r1, #0
   17248:	460a      	mov	r2, r1
   1724a:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1724e:	4313      	orrs	r3, r2
   17250:	d0bc      	beq.n	171cc <hci_evt_encode+0x128>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   17252:	4b4a      	ldr	r3, [pc, #296]	; (1737c <hci_evt_encode+0x2d8>)
   17254:	6818      	ldr	r0, [r3, #0]
   17256:	460b      	mov	r3, r1
   17258:	f000 0201 	and.w	r2, r0, #1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1725c:	4313      	orrs	r3, r2
   1725e:	d0b5      	beq.n	171cc <hci_evt_encode+0x128>
	uint8_t status = cc->status;
   17260:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
   17264:	f1b8 0f00 	cmp.w	r8, #0
   17268:	d103      	bne.n	17272 <hci_evt_encode+0x1ce>
		conn_count++;
   1726a:	4a46      	ldr	r2, [pc, #280]	; (17384 <hci_evt_encode+0x2e0>)
   1726c:	6813      	ldr	r3, [r2, #0]
   1726e:	3301      	adds	r3, #1
   17270:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   17272:	2212      	movs	r2, #18
   17274:	2101      	movs	r1, #1
   17276:	4630      	mov	r0, r6
   17278:	f010 f804 	bl	27284 <meta_evt>
   1727c:	4605      	mov	r5, r0
	if (status) {
   1727e:	f1b8 0f00 	cmp.w	r8, #0
   17282:	d006      	beq.n	17292 <hci_evt_encode+0x1ee>
		(void)memset(lecc, 0x00, sizeof(*lecc));
   17284:	2212      	movs	r2, #18
   17286:	2100      	movs	r1, #0
   17288:	f00c ff8b 	bl	241a2 <memset>
		lecc->status = status;
   1728c:	f885 8000 	strb.w	r8, [r5]
		return;
   17290:	e79c      	b.n	171cc <hci_evt_encode+0x128>
	lecc->status = 0x00;
   17292:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   17296:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
   1729a:	7f63      	ldrb	r3, [r4, #29]
   1729c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   1729e:	7fa3      	ldrb	r3, [r4, #30]
   172a0:	f003 0301 	and.w	r3, r3, #1
   172a4:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   172a6:	2206      	movs	r2, #6
   172a8:	f104 011f 	add.w	r1, r4, #31
   172ac:	3005      	adds	r0, #5
   172ae:	f00c ff4e 	bl	2414e <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
   172b2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   172b4:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
   172b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   172ba:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   172be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   172c0:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   172c4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   172c8:	746b      	strb	r3, [r5, #17]
   172ca:	e77f      	b.n	171cc <hci_evt_encode+0x128>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   172cc:	460a      	mov	r2, r1
   172ce:	4639      	mov	r1, r7
}
   172d0:	b006      	add	sp, #24
   172d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   172d6:	f7ff be85 	b.w	16fe4 <hci_disconn_complete_encode>
	switch (pdu_data->llctrl.opcode) {
   172da:	7fe3      	ldrb	r3, [r4, #31]
   172dc:	2b09      	cmp	r3, #9
   172de:	d00c      	beq.n	172fa <hci_evt_encode+0x256>
   172e0:	2b0f      	cmp	r3, #15
   172e2:	d013      	beq.n	1730c <hci_evt_encode+0x268>
   172e4:	2b07      	cmp	r3, #7
   172e6:	d140      	bne.n	1736a <hci_evt_encode+0x2c6>
		le_unknown_rsp(pdu_data, handle, buf);
   172e8:	f894 2020 	ldrb.w	r2, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   172ec:	2a0e      	cmp	r2, #14
   172ee:	d135      	bne.n	1735c <hci_evt_encode+0x2b8>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   172f0:	460b      	mov	r3, r1
   172f2:	463a      	mov	r2, r7
   172f4:	2100      	movs	r1, #0
   172f6:	201a      	movs	r0, #26
   172f8:	e003      	b.n	17302 <hci_evt_encode+0x25e>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   172fa:	460b      	mov	r3, r1
   172fc:	463a      	mov	r2, r7
   172fe:	4601      	mov	r1, r0
   17300:	2000      	movs	r0, #0
}
   17302:	b006      	add	sp, #24
   17304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   17308:	f7ff bad6 	b.w	168b8 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1730c:	4b1a      	ldr	r3, [pc, #104]	; (17378 <hci_evt_encode+0x2d4>)
   1730e:	6858      	ldr	r0, [r3, #4]
   17310:	2100      	movs	r1, #0
   17312:	460a      	mov	r2, r1
   17314:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   17318:	4313      	orrs	r3, r2
   1731a:	d006      	beq.n	1732a <hci_evt_encode+0x286>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1731c:	4b17      	ldr	r3, [pc, #92]	; (1737c <hci_evt_encode+0x2d8>)
   1731e:	6818      	ldr	r0, [r3, #0]
   17320:	460b      	mov	r3, r1
   17322:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17326:	4313      	orrs	r3, r2
   17328:	d109      	bne.n	1733e <hci_evt_encode+0x29a>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   1732a:	2300      	movs	r3, #0
   1732c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17330:	9300      	str	r3, [sp, #0]
   17332:	221a      	movs	r2, #26
   17334:	2102      	movs	r1, #2
   17336:	4638      	mov	r0, r7
   17338:	f010 f93e 	bl	275b8 <ll_conn_update>
		return;
   1733c:	e746      	b.n	171cc <hci_evt_encode+0x128>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   1733e:	220a      	movs	r2, #10
   17340:	2106      	movs	r1, #6
   17342:	4630      	mov	r0, r6
   17344:	f00f ff9e 	bl	27284 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   17348:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   1734a:	8c23      	ldrh	r3, [r4, #32]
   1734c:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   1734e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   17350:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   17352:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   17354:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   17356:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   17358:	8103      	strh	r3, [r0, #8]
   1735a:	e737      	b.n	171cc <hci_evt_encode+0x128>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1735c:	480a      	ldr	r0, [pc, #40]	; (17388 <hci_evt_encode+0x2e4>)
   1735e:	2157      	movs	r1, #87	; 0x57
}
   17360:	b006      	add	sp, #24
   17362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   17366:	f00a bdb0 	b.w	21eca <printk>
		LL_ASSERT(0);
   1736a:	f241 723f 	movw	r2, #5951	; 0x173f
   1736e:	e6ad      	b.n	170cc <hci_evt_encode+0x28>
   17370:	0002f256 	.word	0x0002f256
   17374:	0002a026 	.word	0x0002a026
   17378:	20000458 	.word	0x20000458
   1737c:	20000460 	.word	0x20000460
   17380:	ff030100 	.word	0xff030100
   17384:	2000302c 	.word	0x2000302c
   17388:	0002f337 	.word	0x0002f337

0001738c <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   1738c:	4b07      	ldr	r3, [pc, #28]	; (173ac <hci_init+0x20>)
   1738e:	f04f 30ff 	mov.w	r0, #4294967295
   17392:	f641 71ff 	movw	r1, #8191	; 0x1fff
   17396:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1739a:	4b05      	ldr	r3, [pc, #20]	; (173b0 <hci_init+0x24>)
   1739c:	201f      	movs	r0, #31
   1739e:	2100      	movs	r1, #0
   173a0:	e9c3 0100 	strd	r0, r1, [r3]
	conn_count = 0U;
   173a4:	4b03      	ldr	r3, [pc, #12]	; (173b4 <hci_init+0x28>)
   173a6:	2200      	movs	r2, #0
   173a8:	601a      	str	r2, [r3, #0]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   173aa:	4770      	bx	lr
   173ac:	20000458 	.word	0x20000458
   173b0:	20000460 	.word	0x20000460
   173b4:	2000302c 	.word	0x2000302c

000173b8 <ll_rx_link_inc_quota>:
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   173b8:	2801      	cmp	r0, #1
{
   173ba:	b538      	push	{r3, r4, r5, lr}
   173bc:	4604      	mov	r4, r0
   173be:	4d0a      	ldr	r5, [pc, #40]	; (173e8 <ll_rx_link_inc_quota+0x30>)
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   173c0:	d10e      	bne.n	173e0 <ll_rx_link_inc_quota+0x28>
   173c2:	782b      	ldrb	r3, [r5, #0]
   173c4:	2b05      	cmp	r3, #5
   173c6:	d90b      	bls.n	173e0 <ll_rx_link_inc_quota+0x28>
   173c8:	f240 42a9 	movw	r2, #1193	; 0x4a9
   173cc:	4907      	ldr	r1, [pc, #28]	; (173ec <ll_rx_link_inc_quota+0x34>)
   173ce:	4808      	ldr	r0, [pc, #32]	; (173f0 <ll_rx_link_inc_quota+0x38>)
   173d0:	f00a fd7b 	bl	21eca <printk>
   173d4:	4040      	eors	r0, r0
   173d6:	f380 8811 	msr	BASEPRI, r0
   173da:	f04f 0003 	mov.w	r0, #3
   173de:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   173e0:	782b      	ldrb	r3, [r5, #0]
   173e2:	441c      	add	r4, r3
   173e4:	702c      	strb	r4, [r5, #0]
}
   173e6:	bd38      	pop	{r3, r4, r5, pc}
   173e8:	2000311c 	.word	0x2000311c
   173ec:	0002f376 	.word	0x0002f376
   173f0:	0002a026 	.word	0x0002a026

000173f4 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   173f4:	b510      	push	{r4, lr}
   173f6:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   173f8:	f010 fa31 	bl	2785e <lll_reset>
	LL_ASSERT(!err);
   173fc:	b158      	cbz	r0, 17416 <perform_lll_reset+0x22>
   173fe:	f240 6279 	movw	r2, #1657	; 0x679
   17402:	491e      	ldr	r1, [pc, #120]	; (1747c <perform_lll_reset+0x88>)
   17404:	481e      	ldr	r0, [pc, #120]	; (17480 <perform_lll_reset+0x8c>)
   17406:	f00a fd60 	bl	21eca <printk>
   1740a:	4040      	eors	r0, r0
   1740c:	f380 8811 	msr	BASEPRI, r0
   17410:	f04f 0003 	mov.w	r0, #3
   17414:	df02      	svc	2

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   17416:	f010 fa8c 	bl	27932 <lll_adv_reset>
	LL_ASSERT(!err);
   1741a:	b158      	cbz	r0, 17434 <perform_lll_reset+0x40>
   1741c:	f240 627e 	movw	r2, #1662	; 0x67e
   17420:	4916      	ldr	r1, [pc, #88]	; (1747c <perform_lll_reset+0x88>)
   17422:	4817      	ldr	r0, [pc, #92]	; (17480 <perform_lll_reset+0x8c>)
   17424:	f00a fd51 	bl	21eca <printk>
   17428:	4040      	eors	r0, r0
   1742a:	f380 8811 	msr	BASEPRI, r0
   1742e:	f04f 0003 	mov.w	r0, #3
   17432:	df02      	svc	2
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   17434:	f010 fbaf 	bl	27b96 <lll_scan_reset>
	LL_ASSERT(!err);
   17438:	b158      	cbz	r0, 17452 <perform_lll_reset+0x5e>
   1743a:	f240 6284 	movw	r2, #1668	; 0x684
   1743e:	490f      	ldr	r1, [pc, #60]	; (1747c <perform_lll_reset+0x88>)
   17440:	480f      	ldr	r0, [pc, #60]	; (17480 <perform_lll_reset+0x8c>)
   17442:	f00a fd42 	bl	21eca <printk>
   17446:	4040      	eors	r0, r0
   17448:	f380 8811 	msr	BASEPRI, r0
   1744c:	f04f 0003 	mov.w	r0, #3
   17450:	df02      	svc	2
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   17452:	f010 fbac 	bl	27bae <lll_conn_reset>
	LL_ASSERT(!err);
   17456:	b158      	cbz	r0, 17470 <perform_lll_reset+0x7c>
   17458:	f240 628a 	movw	r2, #1674	; 0x68a
   1745c:	4907      	ldr	r1, [pc, #28]	; (1747c <perform_lll_reset+0x88>)
   1745e:	4808      	ldr	r0, [pc, #32]	; (17480 <perform_lll_reset+0x8c>)
   17460:	f00a fd33 	bl	21eca <printk>
   17464:	4040      	eors	r0, r0
   17466:	f380 8811 	msr	BASEPRI, r0
   1746a:	f04f 0003 	mov.w	r0, #3
   1746e:	df02      	svc	2
	z_impl_k_sem_give(sem);
   17470:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   17472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17476:	f008 bc01 	b.w	1fc7c <z_impl_k_sem_give>
   1747a:	bf00      	nop
   1747c:	0002f376 	.word	0x0002f376
   17480:	0002a026 	.word	0x0002a026

00017484 <rx_alloc>:

	return done;
}

static inline void rx_alloc(uint8_t max)
{
   17484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t idx;

	if (max > mem_link_rx.quota_pdu) {
   17488:	4e37      	ldr	r6, [pc, #220]	; (17568 <rx_alloc+0xe4>)
		max = mem_link_rx.quota_pdu;
	}

	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1748a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 17574 <rx_alloc+0xf0>
   1748e:	7834      	ldrb	r4, [r6, #0]
   17490:	4284      	cmp	r4, r0
   17492:	bf28      	it	cs
   17494:	4604      	movcs	r4, r0
   17496:	3c01      	subs	r4, #1
   17498:	b2e4      	uxtb	r4, r4
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
   1749a:	f106 0904 	add.w	r9, r6, #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1749e:	2cff      	cmp	r4, #255	; 0xff
   174a0:	d030      	beq.n	17504 <rx_alloc+0x80>
 */
static inline bool mfifo_enqueue_idx_get(uint8_t count, uint8_t first, uint8_t last,
					 uint8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
   174a2:	f898 5003 	ldrb.w	r5, [r8, #3]
	if (last == count) {
   174a6:	f898 2001 	ldrb.w	r2, [r8, #1]
   174aa:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   174ae:	3501      	adds	r5, #1
   174b0:	b2ed      	uxtb	r5, r5
		last = 0U;
   174b2:	42aa      	cmp	r2, r5
   174b4:	bf08      	it	eq
   174b6:	2500      	moveq	r5, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
   174b8:	42ab      	cmp	r3, r5
   174ba:	d021      	beq.n	17500 <rx_alloc+0x7c>
		link = mem_acquire(&mem_link_rx.free);
   174bc:	4648      	mov	r0, r9
   174be:	f00f fbe0 	bl	26c82 <mem_acquire>
		if (!link) {
   174c2:	4607      	mov	r7, r0
   174c4:	b908      	cbnz	r0, 174ca <rx_alloc+0x46>
		MFIFO_BY_IDX_ENQUEUE(ll_pdu_rx_free, idx, rx);

		ll_rx_link_inc_quota(-1);
	}
#endif /* CONFIG_BT_CONN */
}
   174c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx = mem_acquire(&mem_pdu_rx.free);
   174ca:	4828      	ldr	r0, [pc, #160]	; (1756c <rx_alloc+0xe8>)
   174cc:	f00f fbd9 	bl	26c82 <mem_acquire>
		if (!rx) {
   174d0:	3c01      	subs	r4, #1
   174d2:	b2e4      	uxtb	r4, r4
   174d4:	b928      	cbnz	r0, 174e2 <rx_alloc+0x5e>
			mem_release(link, &mem_link_rx.free);
   174d6:	4926      	ldr	r1, [pc, #152]	; (17570 <rx_alloc+0xec>)
   174d8:	4638      	mov	r0, r7
}
   174da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
   174de:	f00f bbe9 	b.w	26cb4 <mem_release>
		rx->link = link;
   174e2:	6007      	str	r7, [r0, #0]
 */
static inline void mfifo_by_idx_enqueue(uint8_t *fifo, uint8_t size, uint8_t idx,
					void *mem, uint8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   174e4:	f898 2003 	ldrb.w	r2, [r8, #3]
   174e8:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   174ec:	fb02 8303 	mla	r3, r2, r3, r8
   174f0:	6058      	str	r0, [r3, #4]

	*last = idx; /* Commit: Update write index */
   174f2:	f888 5003 	strb.w	r5, [r8, #3]
		ll_rx_link_inc_quota(-1);
   174f6:	f04f 30ff 	mov.w	r0, #4294967295
   174fa:	f7ff ff5d 	bl	173b8 <ll_rx_link_inc_quota>
   174fe:	e7ce      	b.n	1749e <rx_alloc+0x1a>
	if (!max) {
   17500:	2c00      	cmp	r4, #0
   17502:	d0e0      	beq.n	174c6 <rx_alloc+0x42>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   17504:	f8df 8070 	ldr.w	r8, [pc, #112]	; 17578 <rx_alloc+0xf4>
		link = mem_acquire(&mem_link_rx.free);
   17508:	4f19      	ldr	r7, [pc, #100]	; (17570 <rx_alloc+0xec>)
   1750a:	e00f      	b.n	1752c <rx_alloc+0xa8>
		link->mem = NULL;
   1750c:	2300      	movs	r3, #0
   1750e:	606b      	str	r3, [r5, #4]
		rx->link = link;
   17510:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   17512:	f898 2003 	ldrb.w	r2, [r8, #3]
   17516:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1751a:	fb02 8303 	mla	r3, r2, r3, r8
   1751e:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   17520:	f888 4003 	strb.w	r4, [r8, #3]
		ll_rx_link_inc_quota(-1);
   17524:	f04f 30ff 	mov.w	r0, #4294967295
   17528:	f7ff ff46 	bl	173b8 <ll_rx_link_inc_quota>
	while (mem_link_rx.quota_pdu &&
   1752c:	7833      	ldrb	r3, [r6, #0]
   1752e:	2b00      	cmp	r3, #0
   17530:	d0c9      	beq.n	174c6 <rx_alloc+0x42>
	last = last + 1;
   17532:	f898 4003 	ldrb.w	r4, [r8, #3]
	if (last == count) {
   17536:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1753a:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   1753e:	3401      	adds	r4, #1
   17540:	b2e4      	uxtb	r4, r4
		last = 0U;
   17542:	42a2      	cmp	r2, r4
   17544:	bf08      	it	eq
   17546:	2400      	moveq	r4, #0
	if (last == first) {
   17548:	429c      	cmp	r4, r3
   1754a:	d0bc      	beq.n	174c6 <rx_alloc+0x42>
		link = mem_acquire(&mem_link_rx.free);
   1754c:	4638      	mov	r0, r7
   1754e:	f00f fb98 	bl	26c82 <mem_acquire>
		if (!link) {
   17552:	4605      	mov	r5, r0
   17554:	2800      	cmp	r0, #0
   17556:	d0b6      	beq.n	174c6 <rx_alloc+0x42>
		rx = mem_acquire(&mem_pdu_rx.free);
   17558:	4804      	ldr	r0, [pc, #16]	; (1756c <rx_alloc+0xe8>)
   1755a:	f00f fb92 	bl	26c82 <mem_acquire>
		if (!rx) {
   1755e:	2800      	cmp	r0, #0
   17560:	d1d4      	bne.n	1750c <rx_alloc+0x88>
			mem_release(link, &mem_link_rx.free);
   17562:	4903      	ldr	r1, [pc, #12]	; (17570 <rx_alloc+0xec>)
   17564:	4628      	mov	r0, r5
   17566:	e7b8      	b.n	174da <rx_alloc+0x56>
   17568:	2000311c 	.word	0x2000311c
   1756c:	20003184 	.word	0x20003184
   17570:	20003120 	.word	0x20003120
   17574:	20000974 	.word	0x20000974
   17578:	20000964 	.word	0x20000964

0001757c <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1757c:	4b39      	ldr	r3, [pc, #228]	; (17664 <init_reset+0xe8>)
{
   1757e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   17582:	1d18      	adds	r0, r3, #4
   17584:	2203      	movs	r2, #3
   17586:	2134      	movs	r1, #52	; 0x34
   17588:	f00f fb57 	bl	26c3a <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   1758c:	4b36      	ldr	r3, [pc, #216]	; (17668 <init_reset+0xec>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1758e:	4d37      	ldr	r5, [pc, #220]	; (1766c <init_reset+0xf0>)
		link = mem_acquire(&mem_link_done.free);
   17590:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 17668 <init_reset+0xec>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   17594:	2203      	movs	r2, #3
   17596:	2108      	movs	r1, #8
   17598:	1d18      	adds	r0, r3, #4
   1759a:	f00f fb4e 	bl	26c3a <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1759e:	462e      	mov	r6, r5
	last = last + 1;
   175a0:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   175a2:	786a      	ldrb	r2, [r5, #1]
   175a4:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   175a6:	3401      	adds	r4, #1
   175a8:	b2e4      	uxtb	r4, r4
		last = 0U;
   175aa:	42a2      	cmp	r2, r4
   175ac:	bf08      	it	eq
   175ae:	2400      	moveq	r4, #0
	if (last == first) {
   175b0:	429c      	cmp	r4, r3
   175b2:	d00d      	beq.n	175d0 <init_reset+0x54>
		link = mem_acquire(&mem_link_done.free);
   175b4:	4640      	mov	r0, r8
   175b6:	f00f fb64 	bl	26c82 <mem_acquire>
		if (!link) {
   175ba:	4607      	mov	r7, r0
   175bc:	b140      	cbz	r0, 175d0 <init_reset+0x54>
		rx = mem_acquire(&mem_done.free);
   175be:	4829      	ldr	r0, [pc, #164]	; (17664 <init_reset+0xe8>)
   175c0:	f00f fb5f 	bl	26c82 <mem_acquire>
		if (!rx) {
   175c4:	2800      	cmp	r0, #0
   175c6:	d144      	bne.n	17652 <init_reset+0xd6>
			mem_release(link, &mem_link_done.free);
   175c8:	4927      	ldr	r1, [pc, #156]	; (17668 <init_reset+0xec>)
   175ca:	4638      	mov	r0, r7
   175cc:	f00f fb72 	bl	26cb4 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   175d0:	4b27      	ldr	r3, [pc, #156]	; (17670 <init_reset+0xf4>)
   175d2:	2208      	movs	r2, #8
   175d4:	1d18      	adds	r0, r3, #4
   175d6:	2148      	movs	r1, #72	; 0x48
   175d8:	f00f fb2f 	bl	26c3a <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   175dc:	4b25      	ldr	r3, [pc, #148]	; (17674 <init_reset+0xf8>)
   175de:	220c      	movs	r2, #12
   175e0:	1d18      	adds	r0, r3, #4
   175e2:	2108      	movs	r1, #8
   175e4:	f00f fb29 	bl	26c3a <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   175e8:	4822      	ldr	r0, [pc, #136]	; (17674 <init_reset+0xf8>)
   175ea:	f00f fb4a 	bl	26c82 <mem_acquire>
	LL_ASSERT(link);
   175ee:	4604      	mov	r4, r0
   175f0:	b958      	cbnz	r0, 1760a <init_reset+0x8e>
   175f2:	f44f 62cc 	mov.w	r2, #1632	; 0x660
   175f6:	4920      	ldr	r1, [pc, #128]	; (17678 <init_reset+0xfc>)
   175f8:	4820      	ldr	r0, [pc, #128]	; (1767c <init_reset+0x100>)
   175fa:	f00a fc66 	bl	21eca <printk>
   175fe:	4040      	eors	r0, r0
   17600:	f380 8811 	msr	BASEPRI, r0
   17604:	f04f 0003 	mov.w	r0, #3
   17608:	df02      	svc	2
	MEMQ_INIT(ull_rx, link);
   1760a:	4a1d      	ldr	r2, [pc, #116]	; (17680 <init_reset+0x104>)
   1760c:	4620      	mov	r0, r4
   1760e:	1f11      	subs	r1, r2, #4
   17610:	f00f fb87 	bl	26d22 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   17614:	4817      	ldr	r0, [pc, #92]	; (17674 <init_reset+0xf8>)
   17616:	f00f fb34 	bl	26c82 <mem_acquire>
	LL_ASSERT(link);
   1761a:	4604      	mov	r4, r0
   1761c:	b958      	cbnz	r0, 17636 <init_reset+0xba>
   1761e:	f240 6267 	movw	r2, #1639	; 0x667
   17622:	4915      	ldr	r1, [pc, #84]	; (17678 <init_reset+0xfc>)
   17624:	4815      	ldr	r0, [pc, #84]	; (1767c <init_reset+0x100>)
   17626:	f00a fc50 	bl	21eca <printk>
   1762a:	4040      	eors	r0, r0
   1762c:	f380 8811 	msr	BASEPRI, r0
   17630:	f04f 0003 	mov.w	r0, #3
   17634:	df02      	svc	2
	MEMQ_INIT(ll_rx, link);
   17636:	4a13      	ldr	r2, [pc, #76]	; (17684 <init_reset+0x108>)
   17638:	4620      	mov	r0, r4
   1763a:	1f11      	subs	r1, r2, #4
   1763c:	f00f fb71 	bl	26d22 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   17640:	4b11      	ldr	r3, [pc, #68]	; (17688 <init_reset+0x10c>)
   17642:	2206      	movs	r2, #6
	rx_alloc(UINT8_MAX);
   17644:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   17646:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   17648:	f7ff ff1c 	bl	17484 <rx_alloc>
}
   1764c:	2000      	movs	r0, #0
   1764e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx->link = link;
   17652:	6007      	str	r7, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   17654:	78f2      	ldrb	r2, [r6, #3]
   17656:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   17658:	fb02 6303 	mla	r3, r2, r3, r6
   1765c:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   1765e:	70f4      	strb	r4, [r6, #3]
   17660:	e79e      	b.n	175a0 <init_reset+0x24>
   17662:	bf00      	nop
   17664:	20003060 	.word	0x20003060
   17668:	20003100 	.word	0x20003100
   1766c:	20000950 	.word	0x20000950
   17670:	20003184 	.word	0x20003184
   17674:	20003120 	.word	0x20003120
   17678:	0002f376 	.word	0x0002f376
   1767c:	0002a026 	.word	0x0002a026
   17680:	200033d4 	.word	0x200033d4
   17684:	200033cc 	.word	0x200033cc
   17688:	2000311c 	.word	0x2000311c

0001768c <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   1768c:	6008      	str	r0, [r1, #0]
   1768e:	4801      	ldr	r0, [pc, #4]	; (17694 <ull_ticker_status_give+0x8>)
   17690:	f008 baf4 	b.w	1fc7c <z_impl_k_sem_give>
   17694:	200033dc 	.word	0x200033dc

00017698 <tx_cmplt_get>:
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   17698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1769c:	460d      	mov	r5, r1
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1769e:	4e28      	ldr	r6, [pc, #160]	; (17740 <tx_cmplt_get+0xa8>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   176a0:	782b      	ldrb	r3, [r5, #0]
   176a2:	7871      	ldrb	r1, [r6, #1]
   176a4:	428b      	cmp	r3, r1
   176a6:	bf28      	it	cs
   176a8:	78b3      	ldrbcs	r3, [r6, #2]
{
   176aa:	4680      	mov	r8, r0
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   176ac:	7830      	ldrb	r0, [r6, #0]
		*idx = first;
   176ae:	bf28      	it	cs
   176b0:	702b      	strbcs	r3, [r5, #0]
	}

	if (*idx == last) {
   176b2:	782b      	ldrb	r3, [r5, #0]
   176b4:	429a      	cmp	r2, r3
{
   176b6:	4691      	mov	r9, r2
   176b8:	d103      	bne.n	176c2 <tx_cmplt_get+0x2a>
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
		return 0;
   176ba:	2700      	movs	r7, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);

	return cmplt;
}
   176bc:	4638      	mov	r0, r7
   176be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
	}

	i = *idx + 1;
   176c2:	1c5a      	adds	r2, r3, #1
   176c4:	b2d2      	uxtb	r2, r2
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   176c6:	4c1f      	ldr	r4, [pc, #124]	; (17744 <tx_cmplt_get+0xac>)
		i = 0U;
   176c8:	4291      	cmp	r1, r2
   176ca:	bf08      	it	eq
   176cc:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   176ce:	fb13 f300 	smulbb	r3, r3, r0

	*idx = i;
   176d2:	702a      	strb	r2, [r5, #0]
	if (!tx) {
   176d4:	18e2      	adds	r2, r4, r3
   176d6:	d0f0      	beq.n	176ba <tx_cmplt_get+0x22>
	*handle = tx->handle;
   176d8:	5ae3      	ldrh	r3, [r4, r3]
   176da:	f8a8 3000 	strh.w	r3, [r8]
	cmplt = 0U;
   176de:	2700      	movs	r7, #0
		node_tx = tx->node;
   176e0:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   176e2:	2801      	cmp	r0, #1
   176e4:	f020 0103 	bic.w	r1, r0, #3
   176e8:	d906      	bls.n	176f8 <tx_cmplt_get+0x60>
   176ea:	b331      	cbz	r1, 1773a <tx_cmplt_get+0xa2>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   176ec:	7903      	ldrb	r3, [r0, #4]
   176ee:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   176f2:	3b01      	subs	r3, #1
   176f4:	2b01      	cmp	r3, #1
   176f6:	d820      	bhi.n	1773a <tx_cmplt_get+0xa2>
			cmplt++;
   176f8:	3701      	adds	r7, #1
   176fa:	b2ff      	uxtb	r7, r7
			tx->node = (void *)1;
   176fc:	2301      	movs	r3, #1
   176fe:	6053      	str	r3, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
   17700:	b109      	cbz	r1, 17706 <tx_cmplt_get+0x6e>
			ll_tx_mem_release(node_tx);
   17702:	f001 fb5b 	bl	18dbc <ll_tx_mem_release>
	if (*idx >= count) {
   17706:	782b      	ldrb	r3, [r5, #0]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   17708:	7872      	ldrb	r2, [r6, #1]
   1770a:	7830      	ldrb	r0, [r6, #0]
   1770c:	4293      	cmp	r3, r2
   1770e:	bf24      	itt	cs
   17710:	78b3      	ldrbcs	r3, [r6, #2]
		*idx = first;
   17712:	702b      	strbcs	r3, [r5, #0]
	if (*idx == last) {
   17714:	782b      	ldrb	r3, [r5, #0]
   17716:	4599      	cmp	r9, r3
   17718:	d0d0      	beq.n	176bc <tx_cmplt_get+0x24>
	i = *idx + 1;
   1771a:	1c59      	adds	r1, r3, #1
   1771c:	b2c9      	uxtb	r1, r1
	p = (void *)(fifo + (*idx) * size);
   1771e:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   17722:	428a      	cmp	r2, r1
   17724:	bf08      	it	eq
   17726:	2100      	moveq	r1, #0
	} while (tx && tx->handle == *handle);
   17728:	18e2      	adds	r2, r4, r3
	*idx = i;
   1772a:	7029      	strb	r1, [r5, #0]
   1772c:	d0c6      	beq.n	176bc <tx_cmplt_get+0x24>
   1772e:	5ae3      	ldrh	r3, [r4, r3]
   17730:	f8b8 1000 	ldrh.w	r1, [r8]
   17734:	4299      	cmp	r1, r3
   17736:	d0d3      	beq.n	176e0 <tx_cmplt_get+0x48>
   17738:	e7c0      	b.n	176bc <tx_cmplt_get+0x24>
			tx->node = (void *)2;
   1773a:	2302      	movs	r3, #2
   1773c:	e7df      	b.n	176fe <tx_cmplt_get+0x66>
   1773e:	bf00      	nop
   17740:	20000ab0 	.word	0x20000ab0
   17744:	20000ab4 	.word	0x20000ab4

00017748 <ll_init>:
{
   17748:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
   1774a:	4b2b      	ldr	r3, [pc, #172]	; (177f8 <ll_init+0xb0>)
{
   1774c:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   1774e:	6018      	str	r0, [r3, #0]
	cntr_init();
   17750:	f004 f9ac 	bl	1baac <cntr_init>
	mayfly_init();
   17754:	f7fe f8aa 	bl	158ac <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   17758:	4a28      	ldr	r2, [pc, #160]	; (177fc <ll_init+0xb4>)
   1775a:	2103      	movs	r1, #3
   1775c:	7011      	strb	r1, [r2, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1775e:	7611      	strb	r1, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   17760:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   17762:	4927      	ldr	r1, [pc, #156]	; (17800 <ll_init+0xb8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   17764:	7410      	strb	r0, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   17766:	2304      	movs	r3, #4
   17768:	7213      	strb	r3, [r2, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1776a:	9105      	str	r1, [sp, #20]
   1776c:	4925      	ldr	r1, [pc, #148]	; (17804 <ll_init+0xbc>)
   1776e:	9104      	str	r1, [sp, #16]
   17770:	4925      	ldr	r1, [pc, #148]	; (17808 <ll_init+0xc0>)
   17772:	9103      	str	r1, [sp, #12]
   17774:	4925      	ldr	r1, [pc, #148]	; (1780c <ll_init+0xc4>)
   17776:	9102      	str	r1, [sp, #8]
   17778:	210c      	movs	r1, #12
   1777a:	e9cd 2100 	strd	r2, r1, [sp]
   1777e:	2000      	movs	r0, #0
   17780:	4a23      	ldr	r2, [pc, #140]	; (17810 <ll_init+0xc8>)
   17782:	210a      	movs	r1, #10
   17784:	f7fe fdca 	bl	1631c <ticker_init>
	LL_ASSERT(!err);
   17788:	b158      	cbz	r0, 177a2 <ll_init+0x5a>
   1778a:	f240 126d 	movw	r2, #365	; 0x16d
   1778e:	4921      	ldr	r1, [pc, #132]	; (17814 <ll_init+0xcc>)
   17790:	4821      	ldr	r0, [pc, #132]	; (17818 <ll_init+0xd0>)
   17792:	f00a fb9a 	bl	21eca <printk>
   17796:	4040      	eors	r0, r0
   17798:	f380 8811 	msr	BASEPRI, r0
   1779c:	f04f 0003 	mov.w	r0, #3
   177a0:	df02      	svc	2
	return z_impl_k_sem_init(sem, initial_count, limit);
   177a2:	2201      	movs	r2, #1
   177a4:	2100      	movs	r1, #0
   177a6:	481d      	ldr	r0, [pc, #116]	; (1781c <ll_init+0xd4>)
   177a8:	f010 ffca 	bl	28740 <z_impl_k_sem_init>
	err = lll_init();
   177ac:	f002 fdec 	bl	1a388 <lll_init>
	if (err) {
   177b0:	4604      	mov	r4, r0
   177b2:	b9f0      	cbnz	r0, 177f2 <ll_init+0xaa>
	err = init_reset();
   177b4:	f7ff fee2 	bl	1757c <init_reset>
	if (err) {
   177b8:	4604      	mov	r4, r0
   177ba:	b9d0      	cbnz	r0, 177f2 <ll_init+0xaa>
	err = lll_adv_init();
   177bc:	f003 f872 	bl	1a8a4 <lll_adv_init>
	if (err) {
   177c0:	4604      	mov	r4, r0
   177c2:	b9b0      	cbnz	r0, 177f2 <ll_init+0xaa>
	err = ull_adv_init();
   177c4:	f00f fde5 	bl	27392 <ull_adv_init>
	if (err) {
   177c8:	4604      	mov	r4, r0
   177ca:	b990      	cbnz	r0, 177f2 <ll_init+0xaa>
	err = lll_scan_init();
   177cc:	f010 f9e1 	bl	27b92 <lll_scan_init>
	if (err) {
   177d0:	4604      	mov	r4, r0
   177d2:	b970      	cbnz	r0, 177f2 <ll_init+0xaa>
	err = ull_scan_init();
   177d4:	f00f fe2c 	bl	27430 <ull_scan_init>
	if (err) {
   177d8:	4604      	mov	r4, r0
   177da:	b950      	cbnz	r0, 177f2 <ll_init+0xaa>
	err = lll_conn_init();
   177dc:	f010 f9dd 	bl	27b9a <lll_conn_init>
	if (err) {
   177e0:	4604      	mov	r4, r0
   177e2:	b930      	cbnz	r0, 177f2 <ll_init+0xaa>
	err = ull_conn_init();
   177e4:	f00f ffde 	bl	277a4 <ull_conn_init>
	if (err) {
   177e8:	4604      	mov	r4, r0
   177ea:	b910      	cbnz	r0, 177f2 <ll_init+0xaa>
		ull_filter_reset(true);
   177ec:	2001      	movs	r0, #1
   177ee:	f002 fc3f 	bl	1a070 <ull_filter_reset>
}
   177f2:	4620      	mov	r0, r4
   177f4:	b006      	add	sp, #24
   177f6:	bd10      	pop	{r4, pc}
   177f8:	200033d8 	.word	0x200033d8
   177fc:	20003844 	.word	0x20003844
   17800:	00027d7f 	.word	0x00027d7f
   17804:	0001c389 	.word	0x0001c389
   17808:	0001c33d 	.word	0x0001c33d
   1780c:	200035d4 	.word	0x200035d4
   17810:	200033f4 	.word	0x200033f4
   17814:	0002f376 	.word	0x0002f376
   17818:	0002a026 	.word	0x0002a026
   1781c:	200033dc 	.word	0x200033dc

00017820 <ll_reset>:
{
   17820:	b510      	push	{r4, lr}
   17822:	b086      	sub	sp, #24
	err = ull_adv_reset();
   17824:	f00f fdba 	bl	2739c <ull_adv_reset>
	LL_ASSERT(!err);
   17828:	b158      	cbz	r0, 17842 <ll_reset+0x22>
   1782a:	f240 12f9 	movw	r2, #505	; 0x1f9
   1782e:	493b      	ldr	r1, [pc, #236]	; (1791c <ll_reset+0xfc>)
   17830:	483b      	ldr	r0, [pc, #236]	; (17920 <ll_reset+0x100>)
   17832:	f00a fb4a 	bl	21eca <printk>
   17836:	4040      	eors	r0, r0
   17838:	f380 8811 	msr	BASEPRI, r0
   1783c:	f04f 0003 	mov.w	r0, #3
   17840:	df02      	svc	2
	err = ull_scan_reset();
   17842:	f00f fe0b 	bl	2745c <ull_scan_reset>
	LL_ASSERT(!err);
   17846:	b158      	cbz	r0, 17860 <ll_reset+0x40>
   17848:	f240 12ff 	movw	r2, #511	; 0x1ff
   1784c:	4933      	ldr	r1, [pc, #204]	; (1791c <ll_reset+0xfc>)
   1784e:	4834      	ldr	r0, [pc, #208]	; (17920 <ll_reset+0x100>)
   17850:	f00a fb3b 	bl	21eca <printk>
   17854:	4040      	eors	r0, r0
   17856:	f380 8811 	msr	BASEPRI, r0
   1785a:	f04f 0003 	mov.w	r0, #3
   1785e:	df02      	svc	2
	err = ull_conn_reset();
   17860:	f001 faee 	bl	18e40 <ull_conn_reset>
	LL_ASSERT(!err);
   17864:	b158      	cbz	r0, 1787e <ll_reset+0x5e>
   17866:	f240 2239 	movw	r2, #569	; 0x239
   1786a:	492c      	ldr	r1, [pc, #176]	; (1791c <ll_reset+0xfc>)
   1786c:	482c      	ldr	r0, [pc, #176]	; (17920 <ll_reset+0x100>)
   1786e:	f00a fb2c 	bl	21eca <printk>
   17872:	4040      	eors	r0, r0
   17874:	f380 8811 	msr	BASEPRI, r0
   17878:	f04f 0003 	mov.w	r0, #3
   1787c:	df02      	svc	2
	MFIFO_INIT(tx_ack);
   1787e:	4b29      	ldr	r3, [pc, #164]	; (17924 <ll_reset+0x104>)
   17880:	2400      	movs	r4, #0
   17882:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   17884:	4620      	mov	r0, r4
   17886:	f002 fbf3 	bl	1a070 <ull_filter_reset>
	MFIFO_INIT(prep);
   1788a:	4b27      	ldr	r3, [pc, #156]	; (17928 <ll_reset+0x108>)
   1788c:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(done);
   1788e:	4b27      	ldr	r3, [pc, #156]	; (1792c <ll_reset+0x10c>)
   17890:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   17892:	4b27      	ldr	r3, [pc, #156]	; (17930 <ll_reset+0x110>)
   17894:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   17896:	4b27      	ldr	r3, [pc, #156]	; (17934 <ll_reset+0x114>)
   17898:	805c      	strh	r4, [r3, #2]
   1789a:	2201      	movs	r2, #1
   1789c:	4621      	mov	r1, r4
   1789e:	4668      	mov	r0, sp
   178a0:	f010 ff4e 	bl	28740 <z_impl_k_sem_init>
		mfy.param = &sem;
   178a4:	4b24      	ldr	r3, [pc, #144]	; (17938 <ll_reset+0x118>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   178a6:	4622      	mov	r2, r4
   178a8:	4621      	mov	r1, r4
   178aa:	2003      	movs	r0, #3
		mfy.param = &sem;
   178ac:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   178b0:	f7fe f84e 	bl	15950 <mayfly_enqueue>
		LL_ASSERT(!retval);
   178b4:	b158      	cbz	r0, 178ce <ll_reset+0xae>
   178b6:	f240 226b 	movw	r2, #619	; 0x26b
   178ba:	4918      	ldr	r1, [pc, #96]	; (1791c <ll_reset+0xfc>)
   178bc:	4818      	ldr	r0, [pc, #96]	; (17920 <ll_reset+0x100>)
   178be:	f00a fb04 	bl	21eca <printk>
   178c2:	4040      	eors	r0, r0
   178c4:	f380 8811 	msr	BASEPRI, r0
   178c8:	f04f 0003 	mov.w	r0, #3
   178cc:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   178ce:	f04f 32ff 	mov.w	r2, #4294967295
   178d2:	f04f 33ff 	mov.w	r3, #4294967295
   178d6:	4668      	mov	r0, sp
   178d8:	f008 fa0c 	bl	1fcf4 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   178dc:	f000 ff04 	bl	186e8 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   178e0:	b158      	cbz	r0, 178fa <ll_reset+0xda>
   178e2:	f44f 721e 	mov.w	r2, #632	; 0x278
   178e6:	490d      	ldr	r1, [pc, #52]	; (1791c <ll_reset+0xfc>)
   178e8:	480d      	ldr	r0, [pc, #52]	; (17920 <ll_reset+0x100>)
   178ea:	f00a faee 	bl	21eca <printk>
   178ee:	4040      	eors	r0, r0
   178f0:	f380 8811 	msr	BASEPRI, r0
   178f4:	f04f 0003 	mov.w	r0, #3
   178f8:	df02      	svc	2
	err = init_reset();
   178fa:	f7ff fe3f 	bl	1757c <init_reset>
	LL_ASSERT(!err);
   178fe:	b158      	cbz	r0, 17918 <ll_reset+0xf8>
   17900:	f240 227d 	movw	r2, #637	; 0x27d
   17904:	4905      	ldr	r1, [pc, #20]	; (1791c <ll_reset+0xfc>)
   17906:	4806      	ldr	r0, [pc, #24]	; (17920 <ll_reset+0x100>)
   17908:	f00a fadf 	bl	21eca <printk>
   1790c:	4040      	eors	r0, r0
   1790e:	f380 8811 	msr	BASEPRI, r0
   17912:	f04f 0003 	mov.w	r0, #3
   17916:	df02      	svc	2
}
   17918:	b006      	add	sp, #24
   1791a:	bd10      	pop	{r4, pc}
   1791c:	0002f376 	.word	0x0002f376
   17920:	0002a026 	.word	0x0002a026
   17924:	20000ab0 	.word	0x20000ab0
   17928:	2000098c 	.word	0x2000098c
   1792c:	20000950 	.word	0x20000950
   17930:	20000974 	.word	0x20000974
   17934:	20000964 	.word	0x20000964
   17938:	20000ad4 	.word	0x20000ad4

0001793c <ll_rx_get>:
{
   1793c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   17940:	4d25      	ldr	r5, [pc, #148]	; (179d8 <ll_rx_get+0x9c>)
   17942:	4e26      	ldr	r6, [pc, #152]	; (179dc <ll_rx_get+0xa0>)
{
   17944:	4681      	mov	r9, r0
   17946:	4688      	mov	r8, r1
   17948:	46ab      	mov	fp, r5
	*node_rx = NULL;
   1794a:	2300      	movs	r3, #0
   1794c:	f8c9 3000 	str.w	r3, [r9]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   17950:	aa01      	add	r2, sp, #4
   17952:	e9d5 0100 	ldrd	r0, r1, [r5]
   17956:	f00f f9f9 	bl	26d4c <memq_peek>
	if (link) {
   1795a:	4682      	mov	sl, r0
   1795c:	b3a0      	cbz	r0, 179c8 <ll_rx_get+0x8c>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1795e:	9b01      	ldr	r3, [sp, #4]
   17960:	491f      	ldr	r1, [pc, #124]	; (179e0 <ll_rx_get+0xa4>)
   17962:	781a      	ldrb	r2, [r3, #0]
   17964:	4640      	mov	r0, r8
   17966:	f7ff fe97 	bl	17698 <tx_cmplt_get>
		if (!cmplt) {
   1796a:	4604      	mov	r4, r0
   1796c:	bb40      	cbnz	r0, 179c0 <ll_rx_get+0x84>
			f = mfifo_tx_ack.f;
   1796e:	78b3      	ldrb	r3, [r6, #2]
   17970:	f88d 3001 	strb.w	r3, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
   17974:	78f2      	ldrb	r2, [r6, #3]
   17976:	f10d 0101 	add.w	r1, sp, #1
   1797a:	f10d 0002 	add.w	r0, sp, #2
   1797e:	f7ff fe8b 	bl	17698 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   17982:	b9cc      	cbnz	r4, 179b8 <ll_rx_get+0x7c>
			} while ((cmplt_prev != 0U) ||
   17984:	b9c0      	cbnz	r0, 179b8 <ll_rx_get+0x7c>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   17986:	9b01      	ldr	r3, [sp, #4]
   17988:	791f      	ldrb	r7, [r3, #4]
   1798a:	2f01      	cmp	r7, #1
   1798c:	d116      	bne.n	179bc <ll_rx_get+0x80>
				(void)memq_dequeue(memq_ll_rx.tail,
   1798e:	4622      	mov	r2, r4
   17990:	4629      	mov	r1, r5
   17992:	f8db 0004 	ldr.w	r0, [fp, #4]
   17996:	f00f f9e1 	bl	26d5c <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   1799a:	4912      	ldr	r1, [pc, #72]	; (179e4 <ll_rx_get+0xa8>)
   1799c:	4650      	mov	r0, sl
   1799e:	f00f f989 	bl	26cb4 <mem_release>
				ll_rx_link_inc_quota(1);
   179a2:	4638      	mov	r0, r7
   179a4:	f7ff fd08 	bl	173b8 <ll_rx_link_inc_quota>
				mem_release(rx, &mem_pdu_rx.free);
   179a8:	9801      	ldr	r0, [sp, #4]
   179aa:	490f      	ldr	r1, [pc, #60]	; (179e8 <ll_rx_get+0xac>)
   179ac:	f00f f982 	bl	26cb4 <mem_release>
				rx_alloc(1);
   179b0:	4638      	mov	r0, r7
   179b2:	f7ff fd67 	bl	17484 <rx_alloc>
				goto ll_rx_get_again;
   179b6:	e7c8      	b.n	1794a <ll_rx_get+0xe>
{
   179b8:	4604      	mov	r4, r0
   179ba:	e7db      	b.n	17974 <ll_rx_get+0x38>
			*node_rx = rx;
   179bc:	f8c9 3000 	str.w	r3, [r9]
}
   179c0:	4620      	mov	r0, r4
   179c2:	b003      	add	sp, #12
   179c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   179c8:	78f2      	ldrb	r2, [r6, #3]
   179ca:	4905      	ldr	r1, [pc, #20]	; (179e0 <ll_rx_get+0xa4>)
   179cc:	4640      	mov	r0, r8
   179ce:	f7ff fe63 	bl	17698 <tx_cmplt_get>
   179d2:	4604      	mov	r4, r0
   179d4:	e7f4      	b.n	179c0 <ll_rx_get+0x84>
   179d6:	bf00      	nop
   179d8:	200033c8 	.word	0x200033c8
   179dc:	20000ab0 	.word	0x20000ab0
   179e0:	20000ab2 	.word	0x20000ab2
   179e4:	20003120 	.word	0x20003120
   179e8:	20003184 	.word	0x20003184

000179ec <ll_rx_dequeue>:
{
   179ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   179ee:	4945      	ldr	r1, [pc, #276]	; (17b04 <ll_rx_dequeue+0x118>)
	struct node_rx_hdr *rx = NULL;
   179f0:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   179f2:	aa01      	add	r2, sp, #4
   179f4:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   179f6:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   179f8:	f00f f9b0 	bl	26d5c <memq_dequeue>
	LL_ASSERT(link);
   179fc:	4604      	mov	r4, r0
   179fe:	b958      	cbnz	r0, 17a18 <ll_rx_dequeue+0x2c>
   17a00:	f240 22cf 	movw	r2, #719	; 0x2cf
   17a04:	4940      	ldr	r1, [pc, #256]	; (17b08 <ll_rx_dequeue+0x11c>)
   17a06:	4841      	ldr	r0, [pc, #260]	; (17b0c <ll_rx_dequeue+0x120>)
   17a08:	f00a fa5f 	bl	21eca <printk>
   17a0c:	4040      	eors	r0, r0
   17a0e:	f380 8811 	msr	BASEPRI, r0
   17a12:	f04f 0003 	mov.w	r0, #3
   17a16:	df02      	svc	2
	mem_release(link, &mem_link_rx.free);
   17a18:	493d      	ldr	r1, [pc, #244]	; (17b10 <ll_rx_dequeue+0x124>)
   17a1a:	4620      	mov	r0, r4
   17a1c:	f00f f94a 	bl	26cb4 <mem_release>
	switch (rx->type) {
   17a20:	9b01      	ldr	r3, [sp, #4]
   17a22:	7919      	ldrb	r1, [r3, #4]
   17a24:	2918      	cmp	r1, #24
   17a26:	d869      	bhi.n	17afc <ll_rx_dequeue+0x110>
   17a28:	2201      	movs	r2, #1
   17a2a:	483a      	ldr	r0, [pc, #232]	; (17b14 <ll_rx_dequeue+0x128>)
   17a2c:	408a      	lsls	r2, r1
   17a2e:	4202      	tst	r2, r0
   17a30:	d15f      	bne.n	17af2 <ll_rx_dequeue+0x106>
   17a32:	0312      	lsls	r2, r2, #12
   17a34:	d562      	bpl.n	17afc <ll_rx_dequeue+0x110>
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   17a36:	7f1a      	ldrb	r2, [r3, #28]
   17a38:	2a3c      	cmp	r2, #60	; 0x3c
   17a3a:	d002      	beq.n	17a42 <ll_rx_dequeue+0x56>
   17a3c:	7f59      	ldrb	r1, [r3, #29]
   17a3e:	2900      	cmp	r1, #0
   17a40:	d04a      	beq.n	17ad8 <ll_rx_dequeue+0xec>
			struct lll_adv *lll = ftr->param;
   17a42:	689e      	ldr	r6, [r3, #8]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   17a44:	2a3c      	cmp	r2, #60	; 0x3c
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   17a46:	6835      	ldr	r5, [r6, #0]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   17a48:	d13d      	bne.n	17ac6 <ll_rx_dequeue+0xda>
				conn_lll = lll->conn;
   17a4a:	68b4      	ldr	r4, [r6, #8]
				LL_ASSERT(conn_lll);
   17a4c:	b95c      	cbnz	r4, 17a66 <ll_rx_dequeue+0x7a>
   17a4e:	f240 3236 	movw	r2, #822	; 0x336
   17a52:	492d      	ldr	r1, [pc, #180]	; (17b08 <ll_rx_dequeue+0x11c>)
   17a54:	482d      	ldr	r0, [pc, #180]	; (17b0c <ll_rx_dequeue+0x120>)
   17a56:	f00a fa38 	bl	21eca <printk>
   17a5a:	4040      	eors	r0, r0
   17a5c:	f380 8811 	msr	BASEPRI, r0
   17a60:	f04f 0003 	mov.w	r0, #3
   17a64:	df02      	svc	2
				lll->conn = NULL;
   17a66:	2300      	movs	r3, #0
   17a68:	60b3      	str	r3, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   17a6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   17a6c:	b15b      	cbz	r3, 17a86 <ll_rx_dequeue+0x9a>
   17a6e:	f240 3239 	movw	r2, #825	; 0x339
   17a72:	4925      	ldr	r1, [pc, #148]	; (17b08 <ll_rx_dequeue+0x11c>)
   17a74:	4825      	ldr	r0, [pc, #148]	; (17b0c <ll_rx_dequeue+0x120>)
   17a76:	f00a fa28 	bl	21eca <printk>
   17a7a:	4040      	eors	r0, r0
   17a7c:	f380 8811 	msr	BASEPRI, r0
   17a80:	f04f 0003 	mov.w	r0, #3
   17a84:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   17a86:	f104 0144 	add.w	r1, r4, #68	; 0x44
   17a8a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   17a8e:	f00f f94b 	bl	26d28 <memq_deinit>
				LL_ASSERT(link);
   17a92:	4606      	mov	r6, r0
   17a94:	b958      	cbnz	r0, 17aae <ll_rx_dequeue+0xc2>
   17a96:	f44f 724f 	mov.w	r2, #828	; 0x33c
   17a9a:	491b      	ldr	r1, [pc, #108]	; (17b08 <ll_rx_dequeue+0x11c>)
   17a9c:	481b      	ldr	r0, [pc, #108]	; (17b0c <ll_rx_dequeue+0x120>)
   17a9e:	f00a fa14 	bl	21eca <printk>
   17aa2:	4040      	eors	r0, r0
   17aa4:	f380 8811 	msr	BASEPRI, r0
   17aa8:	f04f 0003 	mov.w	r0, #3
   17aac:	df02      	svc	2
				conn_lll->link_tx_free = link;
   17aae:	6526      	str	r6, [r4, #80]	; 0x50
				ll_conn_release(conn);
   17ab0:	6820      	ldr	r0, [r4, #0]
   17ab2:	f001 f8fb 	bl	18cac <ll_conn_release>
			adv->is_enabled = 0U;
   17ab6:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
   17aba:	f36f 0300 	bfc	r3, #0, #1
   17abe:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
}
   17ac2:	b002      	add	sp, #8
   17ac4:	bd70      	pop	{r4, r5, r6, pc}
				if (adv->node_rx_cc_free) {
   17ac6:	6ca8      	ldr	r0, [r5, #72]	; 0x48
   17ac8:	2800      	cmp	r0, #0
   17aca:	d0f4      	beq.n	17ab6 <ll_rx_dequeue+0xca>
					adv->node_rx_cc_free = NULL;
   17acc:	2300      	movs	r3, #0
   17ace:	64ab      	str	r3, [r5, #72]	; 0x48
					mem_release(rx_free, &mem_pdu_rx.free);
   17ad0:	4911      	ldr	r1, [pc, #68]	; (17b18 <ll_rx_dequeue+0x12c>)
   17ad2:	f00f f8ef 	bl	26cb4 <mem_release>
   17ad6:	e7ee      	b.n	17ab6 <ll_rx_dequeue+0xca>
			LL_ASSERT(0);
   17ad8:	f240 3261 	movw	r2, #865	; 0x361
		LL_ASSERT(0);
   17adc:	490a      	ldr	r1, [pc, #40]	; (17b08 <ll_rx_dequeue+0x11c>)
   17ade:	480b      	ldr	r0, [pc, #44]	; (17b0c <ll_rx_dequeue+0x120>)
   17ae0:	f00a f9f3 	bl	21eca <printk>
   17ae4:	4040      	eors	r0, r0
   17ae6:	f380 8811 	msr	BASEPRI, r0
   17aea:	f04f 0003 	mov.w	r0, #3
   17aee:	df02      	svc	2
}
   17af0:	e7e7      	b.n	17ac2 <ll_rx_dequeue+0xd6>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   17af2:	2900      	cmp	r1, #0
   17af4:	d1e5      	bne.n	17ac2 <ll_rx_dequeue+0xd6>
   17af6:	f240 32b5 	movw	r2, #949	; 0x3b5
   17afa:	e7ef      	b.n	17adc <ll_rx_dequeue+0xf0>
		LL_ASSERT(0);
   17afc:	f240 32b9 	movw	r2, #953	; 0x3b9
   17b00:	e7ec      	b.n	17adc <ll_rx_dequeue+0xf0>
   17b02:	bf00      	nop
   17b04:	200033c8 	.word	0x200033c8
   17b08:	0002f376 	.word	0x0002f376
   17b0c:	0002a026 	.word	0x0002a026
   17b10:	20003120 	.word	0x20003120
   17b14:	01700019 	.word	0x01700019
   17b18:	20003184 	.word	0x20003184

00017b1c <ll_rx_mem_release>:
{
   17b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   17b20:	6804      	ldr	r4, [r0, #0]
			LL_ASSERT(0);
   17b22:	4d3d      	ldr	r5, [pc, #244]	; (17c18 <ll_rx_mem_release+0xfc>)
   17b24:	4e3d      	ldr	r6, [pc, #244]	; (17c1c <ll_rx_mem_release+0x100>)
   17b26:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 17c24 <ll_rx_mem_release+0x108>
{
   17b2a:	4607      	mov	r7, r0
	while (rx) {
   17b2c:	b92c      	cbnz	r4, 17b3a <ll_rx_mem_release+0x1e>
	*node_rx = rx;
   17b2e:	603c      	str	r4, [r7, #0]
	rx_alloc(UINT8_MAX);
   17b30:	20ff      	movs	r0, #255	; 0xff
}
   17b32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   17b36:	f7ff bca5 	b.w	17484 <rx_alloc>
		switch (rx_free->type) {
   17b3a:	7922      	ldrb	r2, [r4, #4]
		rx = rx->next;
   17b3c:	f8d4 9000 	ldr.w	r9, [r4]
		switch (rx_free->type) {
   17b40:	2a18      	cmp	r2, #24
   17b42:	d85c      	bhi.n	17bfe <ll_rx_mem_release+0xe2>
   17b44:	2301      	movs	r3, #1
   17b46:	4093      	lsls	r3, r2
   17b48:	ea13 0f08 	tst.w	r3, r8
   17b4c:	d119      	bne.n	17b82 <ll_rx_mem_release+0x66>
   17b4e:	02da      	lsls	r2, r3, #11
   17b50:	d429      	bmi.n	17ba6 <ll_rx_mem_release+0x8a>
   17b52:	031b      	lsls	r3, r3, #12
   17b54:	d553      	bpl.n	17bfe <ll_rx_mem_release+0xe2>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   17b56:	7f23      	ldrb	r3, [r4, #28]
   17b58:	2b3c      	cmp	r3, #60	; 0x3c
   17b5a:	d105      	bne.n	17b68 <ll_rx_mem_release+0x4c>
			mem_release(rx_free, &mem_pdu_rx.free);
   17b5c:	4930      	ldr	r1, [pc, #192]	; (17c20 <ll_rx_mem_release+0x104>)
   17b5e:	4620      	mov	r0, r4
   17b60:	f00f f8a8 	bl	26cb4 <mem_release>
{
   17b64:	464c      	mov	r4, r9
   17b66:	e7e1      	b.n	17b2c <ll_rx_mem_release+0x10>
				LL_ASSERT(!cc->status);
   17b68:	b15b      	cbz	r3, 17b82 <ll_rx_mem_release+0x66>
   17b6a:	f240 4223 	movw	r2, #1059	; 0x423
   17b6e:	4629      	mov	r1, r5
   17b70:	4630      	mov	r0, r6
   17b72:	f00a f9aa 	bl	21eca <printk>
   17b76:	4040      	eors	r0, r0
   17b78:	f380 8811 	msr	BASEPRI, r0
   17b7c:	f04f 0003 	mov.w	r0, #3
   17b80:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   17b82:	7923      	ldrb	r3, [r4, #4]
   17b84:	b95b      	cbnz	r3, 17b9e <ll_rx_mem_release+0x82>
   17b86:	f240 4269 	movw	r2, #1129	; 0x469
   17b8a:	4629      	mov	r1, r5
   17b8c:	4630      	mov	r0, r6
   17b8e:	f00a f99c 	bl	21eca <printk>
   17b92:	4040      	eors	r0, r0
   17b94:	f380 8811 	msr	BASEPRI, r0
   17b98:	f04f 0003 	mov.w	r0, #3
   17b9c:	df02      	svc	2
			ll_rx_link_inc_quota(1);
   17b9e:	2001      	movs	r0, #1
   17ba0:	f7ff fc0a 	bl	173b8 <ll_rx_link_inc_quota>
   17ba4:	e7da      	b.n	17b5c <ll_rx_mem_release+0x40>
			conn = ll_conn_get(rx_free->handle);
   17ba6:	88e0      	ldrh	r0, [r4, #6]
   17ba8:	f001 f8fa 	bl	18da0 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   17bac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
			conn = ll_conn_get(rx_free->handle);
   17bae:	4604      	mov	r4, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   17bb0:	b15b      	cbz	r3, 17bca <ll_rx_mem_release+0xae>
   17bb2:	f44f 6292 	mov.w	r2, #1168	; 0x490
   17bb6:	4629      	mov	r1, r5
   17bb8:	4630      	mov	r0, r6
   17bba:	f00a f986 	bl	21eca <printk>
   17bbe:	4040      	eors	r0, r0
   17bc0:	f380 8811 	msr	BASEPRI, r0
   17bc4:	f04f 0003 	mov.w	r0, #3
   17bc8:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   17bca:	f104 0160 	add.w	r1, r4, #96	; 0x60
   17bce:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   17bd2:	f00f f8a9 	bl	26d28 <memq_deinit>
			LL_ASSERT(link);
   17bd6:	4682      	mov	sl, r0
   17bd8:	b958      	cbnz	r0, 17bf2 <ll_rx_mem_release+0xd6>
   17bda:	f240 4293 	movw	r2, #1171	; 0x493
   17bde:	4629      	mov	r1, r5
   17be0:	4630      	mov	r0, r6
   17be2:	f00a f972 	bl	21eca <printk>
   17be6:	4040      	eors	r0, r0
   17be8:	f380 8811 	msr	BASEPRI, r0
   17bec:	f04f 0003 	mov.w	r0, #3
   17bf0:	df02      	svc	2
			conn->lll.link_tx_free = link;
   17bf2:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
			ll_conn_release(conn);
   17bf6:	4620      	mov	r0, r4
   17bf8:	f001 f858 	bl	18cac <ll_conn_release>
		break;
   17bfc:	e7b2      	b.n	17b64 <ll_rx_mem_release+0x48>
			LL_ASSERT(0);
   17bfe:	f240 429d 	movw	r2, #1181	; 0x49d
   17c02:	4629      	mov	r1, r5
   17c04:	4630      	mov	r0, r6
   17c06:	f00a f960 	bl	21eca <printk>
   17c0a:	4040      	eors	r0, r0
   17c0c:	f380 8811 	msr	BASEPRI, r0
   17c10:	f04f 0003 	mov.w	r0, #3
   17c14:	df02      	svc	2
			break;
   17c16:	e7a5      	b.n	17b64 <ll_rx_mem_release+0x48>
   17c18:	0002f376 	.word	0x0002f376
   17c1c:	0002a026 	.word	0x0002a026
   17c20:	20003184 	.word	0x20003184
   17c24:	01600019 	.word	0x01600019

00017c28 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   17c28:	4801      	ldr	r0, [pc, #4]	; (17c30 <ll_rx_link_alloc+0x8>)
   17c2a:	f00f b82a 	b.w	26c82 <mem_acquire>
   17c2e:	bf00      	nop
   17c30:	20003120 	.word	0x20003120

00017c34 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   17c34:	4901      	ldr	r1, [pc, #4]	; (17c3c <ll_rx_link_release+0x8>)
   17c36:	f00f b83d 	b.w	26cb4 <mem_release>
   17c3a:	bf00      	nop
   17c3c:	20003120 	.word	0x20003120

00017c40 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   17c40:	4801      	ldr	r0, [pc, #4]	; (17c48 <ll_rx_alloc+0x8>)
   17c42:	f00f b81e 	b.w	26c82 <mem_acquire>
   17c46:	bf00      	nop
   17c48:	20003184 	.word	0x20003184

00017c4c <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   17c4c:	4901      	ldr	r1, [pc, #4]	; (17c54 <ll_rx_release+0x8>)
   17c4e:	f00f b831 	b.w	26cb4 <mem_release>
   17c52:	bf00      	nop
   17c54:	20003184 	.word	0x20003184

00017c58 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   17c58:	4b02      	ldr	r3, [pc, #8]	; (17c64 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   17c5a:	4a03      	ldr	r2, [pc, #12]	; (17c68 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   17c5c:	78db      	ldrb	r3, [r3, #3]
   17c5e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   17c60:	f00f b86d 	b.w	26d3e <memq_enqueue>
   17c64:	20000ab0 	.word	0x20000ab0
   17c68:	200033cc 	.word	0x200033cc

00017c6c <ll_rx_sched>:
	k_sem_give(sem_recv);
   17c6c:	4b01      	ldr	r3, [pc, #4]	; (17c74 <ll_rx_sched+0x8>)
   17c6e:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   17c70:	f008 b804 	b.w	1fc7c <z_impl_k_sem_give>
   17c74:	200033d8 	.word	0x200033d8

00017c78 <ll_pdu_rx_alloc_peek>:
{
   17c78:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   17c7a:	4a0a      	ldr	r2, [pc, #40]	; (17ca4 <ll_pdu_rx_alloc_peek+0x2c>)
   17c7c:	7891      	ldrb	r1, [r2, #2]
   17c7e:	78d4      	ldrb	r4, [r2, #3]
   17c80:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   17c82:	42a1      	cmp	r1, r4
		return count - first + last;
   17c84:	bf8a      	itet	hi
   17c86:	1a5b      	subhi	r3, r3, r1
		return last - first;
   17c88:	1a63      	subls	r3, r4, r1
		return count - first + last;
   17c8a:	191b      	addhi	r3, r3, r4
   17c8c:	b2db      	uxtb	r3, r3
   17c8e:	4298      	cmp	r0, r3
   17c90:	d806      	bhi.n	17ca0 <ll_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   17c92:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   17c94:	7813      	ldrb	r3, [r2, #0]
   17c96:	d003      	beq.n	17ca0 <ll_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   17c98:	fb01 2203 	mla	r2, r1, r3, r2
   17c9c:	6850      	ldr	r0, [r2, #4]
}
   17c9e:	bd10      	pop	{r4, pc}
		return NULL;
   17ca0:	2000      	movs	r0, #0
   17ca2:	e7fc      	b.n	17c9e <ll_pdu_rx_alloc_peek+0x26>
   17ca4:	20000964 	.word	0x20000964

00017ca8 <ll_pdu_rx_alloc>:
{
   17ca8:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   17caa:	4a09      	ldr	r2, [pc, #36]	; (17cd0 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   17cac:	7893      	ldrb	r3, [r2, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   17cae:	78d0      	ldrb	r0, [r2, #3]
   17cb0:	7811      	ldrb	r1, [r2, #0]
   17cb2:	7854      	ldrb	r4, [r2, #1]
   17cb4:	4298      	cmp	r0, r3
   17cb6:	d009      	beq.n	17ccc <ll_pdu_rx_alloc+0x24>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
   17cb8:	fb03 2101 	mla	r1, r3, r1, r2

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   17cbc:	3301      	adds	r3, #1
   17cbe:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
   17cc0:	429c      	cmp	r4, r3
   17cc2:	bf08      	it	eq
   17cc4:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   17cc6:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   17cc8:	7093      	strb	r3, [r2, #2]
}
   17cca:	bd10      	pop	{r4, pc}
		return NULL;
   17ccc:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   17cce:	e7fc      	b.n	17cca <ll_pdu_rx_alloc+0x22>
   17cd0:	20000964 	.word	0x20000964

00017cd4 <ll_tx_ack_put>:
{
   17cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   17cd6:	4a12      	ldr	r2, [pc, #72]	; (17d20 <ll_tx_ack_put+0x4c>)
   17cd8:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   17cda:	7857      	ldrb	r7, [r2, #1]
   17cdc:	7895      	ldrb	r5, [r2, #2]
   17cde:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   17ce0:	1c63      	adds	r3, r4, #1
   17ce2:	b2db      	uxtb	r3, r3
		last = 0U;
   17ce4:	429f      	cmp	r7, r3
   17ce6:	bf08      	it	eq
   17ce8:	2300      	moveq	r3, #0
	if (last == first) {
   17cea:	429d      	cmp	r5, r3
   17cec:	d004      	beq.n	17cf8 <ll_tx_ack_put+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   17cee:	1d15      	adds	r5, r2, #4
   17cf0:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   17cf4:	192e      	adds	r6, r5, r4
   17cf6:	d10e      	bne.n	17d16 <ll_tx_ack_put+0x42>
   17cf8:	f240 42f1 	movw	r2, #1265	; 0x4f1
   17cfc:	4909      	ldr	r1, [pc, #36]	; (17d24 <ll_tx_ack_put+0x50>)
   17cfe:	480a      	ldr	r0, [pc, #40]	; (17d28 <ll_tx_ack_put+0x54>)
   17d00:	f00a f8e3 	bl	21eca <printk>
   17d04:	4040      	eors	r0, r0
   17d06:	f380 8811 	msr	BASEPRI, r0
   17d0a:	f04f 0003 	mov.w	r0, #3
   17d0e:	df02      	svc	2
	tx->handle = handle;
   17d10:	2300      	movs	r3, #0
   17d12:	801b      	strh	r3, [r3, #0]
   17d14:	deff      	udf	#255	; 0xff
   17d16:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   17d18:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   17d1a:	6071      	str	r1, [r6, #4]
}
   17d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d1e:	bf00      	nop
   17d20:	20000ab0 	.word	0x20000ab0
   17d24:	0002f376 	.word	0x0002f376
   17d28:	0002a026 	.word	0x0002a026

00017d2c <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   17d2c:	2200      	movs	r2, #0
{
   17d2e:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   17d30:	4611      	mov	r1, r2
   17d32:	4b09      	ldr	r3, [pc, #36]	; (17d58 <ll_radio_state_abort+0x2c>)
   17d34:	2001      	movs	r0, #1
   17d36:	f7fd fe0b 	bl	15950 <mayfly_enqueue>
	LL_ASSERT(!ret);
   17d3a:	b158      	cbz	r0, 17d54 <ll_radio_state_abort+0x28>
   17d3c:	f240 5209 	movw	r2, #1289	; 0x509
   17d40:	4906      	ldr	r1, [pc, #24]	; (17d5c <ll_radio_state_abort+0x30>)
   17d42:	4807      	ldr	r0, [pc, #28]	; (17d60 <ll_radio_state_abort+0x34>)
   17d44:	f00a f8c1 	bl	21eca <printk>
   17d48:	4040      	eors	r0, r0
   17d4a:	f380 8811 	msr	BASEPRI, r0
   17d4e:	f04f 0003 	mov.w	r0, #3
   17d52:	df02      	svc	2
}
   17d54:	bd08      	pop	{r3, pc}
   17d56:	bf00      	nop
   17d58:	20000ae4 	.word	0x20000ae4
   17d5c:	0002f376 	.word	0x0002f376
   17d60:	0002a026 	.word	0x0002a026

00017d64 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17d64:	f030 0302 	bics.w	r3, r0, #2
{
   17d68:	b510      	push	{r4, lr}
   17d6a:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17d6c:	d00e      	beq.n	17d8c <ull_ticker_status_take+0x28>
   17d6e:	680b      	ldr	r3, [r1, #0]
   17d70:	2b02      	cmp	r3, #2
   17d72:	d10b      	bne.n	17d8c <ull_ticker_status_take+0x28>
   17d74:	f240 5226 	movw	r2, #1318	; 0x526
   17d78:	4909      	ldr	r1, [pc, #36]	; (17da0 <ull_ticker_status_take+0x3c>)
   17d7a:	480a      	ldr	r0, [pc, #40]	; (17da4 <ull_ticker_status_take+0x40>)
   17d7c:	f00a f8a5 	bl	21eca <printk>
   17d80:	4040      	eors	r0, r0
   17d82:	f380 8811 	msr	BASEPRI, r0
   17d86:	f04f 0003 	mov.w	r0, #3
   17d8a:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   17d8c:	f04f 32ff 	mov.w	r2, #4294967295
   17d90:	f04f 33ff 	mov.w	r3, #4294967295
   17d94:	4804      	ldr	r0, [pc, #16]	; (17da8 <ull_ticker_status_take+0x44>)
   17d96:	f007 ffad 	bl	1fcf4 <z_impl_k_sem_take>
	return *ret_cb;
   17d9a:	6820      	ldr	r0, [r4, #0]
}
   17d9c:	bd10      	pop	{r4, pc}
   17d9e:	bf00      	nop
   17da0:	0002f376 	.word	0x0002f376
   17da4:	0002a026 	.word	0x0002a026
   17da8:	200033dc 	.word	0x200033dc

00017dac <ull_disable_mark>:
	if (!*m) {
   17dac:	4b02      	ldr	r3, [pc, #8]	; (17db8 <ull_disable_mark+0xc>)
   17dae:	681a      	ldr	r2, [r3, #0]
   17db0:	b902      	cbnz	r2, 17db4 <ull_disable_mark+0x8>
		*m = param;
   17db2:	6018      	str	r0, [r3, #0]
}
   17db4:	6818      	ldr	r0, [r3, #0]
   17db6:	4770      	bx	lr
   17db8:	20003058 	.word	0x20003058

00017dbc <ull_disable_unmark>:
	if (*m && *m == param) {
   17dbc:	4905      	ldr	r1, [pc, #20]	; (17dd4 <ull_disable_unmark+0x18>)
   17dbe:	680b      	ldr	r3, [r1, #0]
   17dc0:	b12b      	cbz	r3, 17dce <ull_disable_unmark+0x12>
   17dc2:	4298      	cmp	r0, r3
   17dc4:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
   17dc8:	bf0c      	ite	eq
   17dca:	600a      	streq	r2, [r1, #0]
	return NULL;
   17dcc:	4613      	movne	r3, r2
}
   17dce:	4618      	mov	r0, r3
   17dd0:	4770      	bx	lr
   17dd2:	bf00      	nop
   17dd4:	20003058 	.word	0x20003058

00017dd8 <ull_disable_mark_get>:
}
   17dd8:	4b01      	ldr	r3, [pc, #4]	; (17de0 <ull_disable_mark_get+0x8>)
   17dda:	6818      	ldr	r0, [r3, #0]
   17ddc:	4770      	bx	lr
   17dde:	bf00      	nop
   17de0:	20003058 	.word	0x20003058

00017de4 <ull_update_mark>:
	if (!*m) {
   17de4:	4b02      	ldr	r3, [pc, #8]	; (17df0 <ull_update_mark+0xc>)
   17de6:	681a      	ldr	r2, [r3, #0]
   17de8:	b902      	cbnz	r2, 17dec <ull_update_mark+0x8>
		*m = param;
   17dea:	6018      	str	r0, [r3, #0]
}
   17dec:	6818      	ldr	r0, [r3, #0]
   17dee:	4770      	bx	lr
   17df0:	2000305c 	.word	0x2000305c

00017df4 <ull_update_unmark>:
	if (*m && *m == param) {
   17df4:	4905      	ldr	r1, [pc, #20]	; (17e0c <ull_update_unmark+0x18>)
   17df6:	680b      	ldr	r3, [r1, #0]
   17df8:	b12b      	cbz	r3, 17e06 <ull_update_unmark+0x12>
   17dfa:	4298      	cmp	r0, r3
   17dfc:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
   17e00:	bf0c      	ite	eq
   17e02:	600a      	streq	r2, [r1, #0]
	return NULL;
   17e04:	4613      	movne	r3, r2
}
   17e06:	4618      	mov	r0, r3
   17e08:	4770      	bx	lr
   17e0a:	bf00      	nop
   17e0c:	2000305c 	.word	0x2000305c

00017e10 <ull_update_mark_get>:
}
   17e10:	4b01      	ldr	r3, [pc, #4]	; (17e18 <ull_update_mark_get+0x8>)
   17e12:	6818      	ldr	r0, [r3, #0]
   17e14:	4770      	bx	lr
   17e16:	bf00      	nop
   17e18:	2000305c 	.word	0x2000305c

00017e1c <ull_disable>:
{
   17e1c:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   17e1e:	6804      	ldr	r4, [r0, #0]
	if (!hdr) {
   17e20:	f114 0f10 	cmn.w	r4, #16
{
   17e24:	b087      	sub	sp, #28
   17e26:	4605      	mov	r5, r0
	if (!hdr) {
   17e28:	d102      	bne.n	17e30 <ull_disable+0x14>
		return ULL_STATUS_SUCCESS;
   17e2a:	2000      	movs	r0, #0
}
   17e2c:	b007      	add	sp, #28
   17e2e:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   17e30:	2201      	movs	r2, #1
   17e32:	2100      	movs	r1, #0
   17e34:	4668      	mov	r0, sp
   17e36:	f010 fc83 	bl	28740 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
   17e3a:	4b11      	ldr	r3, [pc, #68]	; (17e80 <ull_disable+0x64>)
   17e3c:	6163      	str	r3, [r4, #20]
	return hdr->ref;
   17e3e:	7c23      	ldrb	r3, [r4, #16]
	hdr->disabled_param = &sem;
   17e40:	f8c4 d018 	str.w	sp, [r4, #24]
	if (!ull_ref_get(hdr)) {
   17e44:	2b00      	cmp	r3, #0
   17e46:	d0f0      	beq.n	17e2a <ull_disable+0xe>
	mfy.param = lll;
   17e48:	4b0e      	ldr	r3, [pc, #56]	; (17e84 <ull_disable+0x68>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   17e4a:	2200      	movs	r2, #0
   17e4c:	4611      	mov	r1, r2
   17e4e:	2003      	movs	r0, #3
	mfy.param = lll;
   17e50:	609d      	str	r5, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   17e52:	f7fd fd7d 	bl	15950 <mayfly_enqueue>
	LL_ASSERT(!ret);
   17e56:	b158      	cbz	r0, 17e70 <ull_disable+0x54>
   17e58:	f240 5297 	movw	r2, #1431	; 0x597
   17e5c:	490a      	ldr	r1, [pc, #40]	; (17e88 <ull_disable+0x6c>)
   17e5e:	480b      	ldr	r0, [pc, #44]	; (17e8c <ull_disable+0x70>)
   17e60:	f00a f833 	bl	21eca <printk>
   17e64:	4040      	eors	r0, r0
   17e66:	f380 8811 	msr	BASEPRI, r0
   17e6a:	f04f 0003 	mov.w	r0, #3
   17e6e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   17e70:	f04f 32ff 	mov.w	r2, #4294967295
   17e74:	f04f 33ff 	mov.w	r3, #4294967295
   17e78:	4668      	mov	r0, sp
   17e7a:	f007 ff3b 	bl	1fcf4 <z_impl_k_sem_take>
	return k_sem_take(&sem, K_FOREVER);
   17e7e:	e7d5      	b.n	17e2c <ull_disable+0x10>
   17e80:	00027325 	.word	0x00027325
   17e84:	20000af4 	.word	0x20000af4
   17e88:	0002f376 	.word	0x0002f376
   17e8c:	0002a026 	.word	0x0002a026

00017e90 <ull_ticker_stop_with_mark>:
{
   17e90:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e92:	4607      	mov	r7, r0
   17e94:	b085      	sub	sp, #20
	mark = ull_disable_mark(param);
   17e96:	4608      	mov	r0, r1
{
   17e98:	460c      	mov	r4, r1
   17e9a:	4616      	mov	r6, r2
	mark = ull_disable_mark(param);
   17e9c:	f7ff ff86 	bl	17dac <ull_disable_mark>
	if (mark != param) {
   17ea0:	4281      	cmp	r1, r0
   17ea2:	d121      	bne.n	17ee8 <ull_ticker_stop_with_mark+0x58>
	ret_cb = TICKER_STATUS_BUSY;
   17ea4:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   17ea6:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   17ea8:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   17eaa:	2103      	movs	r1, #3
   17eac:	9500      	str	r5, [sp, #0]
   17eae:	4b11      	ldr	r3, [pc, #68]	; (17ef4 <ull_ticker_stop_with_mark+0x64>)
   17eb0:	463a      	mov	r2, r7
   17eb2:	2000      	movs	r0, #0
   17eb4:	f7fe fb22 	bl	164fc <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   17eb8:	4629      	mov	r1, r5
   17eba:	f7ff ff53 	bl	17d64 <ull_ticker_status_take>
	if (ret) {
   17ebe:	b148      	cbz	r0, 17ed4 <ull_ticker_stop_with_mark+0x44>
		mark = ull_disable_unmark(param);
   17ec0:	4620      	mov	r0, r4
   17ec2:	f7ff ff7b 	bl	17dbc <ull_disable_unmark>
		if (mark != param) {
   17ec6:	4284      	cmp	r4, r0
   17ec8:	d10e      	bne.n	17ee8 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   17eca:	f06f 0544 	mvn.w	r5, #68	; 0x44
}
   17ece:	4628      	mov	r0, r5
   17ed0:	b005      	add	sp, #20
   17ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   17ed4:	4630      	mov	r0, r6
   17ed6:	f7ff ffa1 	bl	17e1c <ull_disable>
	if (ret) {
   17eda:	4605      	mov	r5, r0
   17edc:	b938      	cbnz	r0, 17eee <ull_ticker_stop_with_mark+0x5e>
	mark = ull_disable_unmark(param);
   17ede:	4620      	mov	r0, r4
   17ee0:	f7ff ff6c 	bl	17dbc <ull_disable_unmark>
	if (mark != param) {
   17ee4:	4284      	cmp	r4, r0
   17ee6:	d0f2      	beq.n	17ece <ull_ticker_stop_with_mark+0x3e>
		return -ENOLCK;
   17ee8:	f06f 0521 	mvn.w	r5, #33	; 0x21
   17eec:	e7ef      	b.n	17ece <ull_ticker_stop_with_mark+0x3e>
		return -EBUSY;
   17eee:	f06f 050f 	mvn.w	r5, #15
   17ef2:	e7ec      	b.n	17ece <ull_ticker_stop_with_mark+0x3e>
   17ef4:	0001768d 	.word	0x0001768d

00017ef8 <ull_pdu_rx_alloc_peek>:
{
   17ef8:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   17efa:	4a0a      	ldr	r2, [pc, #40]	; (17f24 <ull_pdu_rx_alloc_peek+0x2c>)
   17efc:	7891      	ldrb	r1, [r2, #2]
   17efe:	78d4      	ldrb	r4, [r2, #3]
   17f00:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   17f02:	42a1      	cmp	r1, r4
		return count - first + last;
   17f04:	bf8a      	itet	hi
   17f06:	1a5b      	subhi	r3, r3, r1
		return last - first;
   17f08:	1a63      	subls	r3, r4, r1
		return count - first + last;
   17f0a:	191b      	addhi	r3, r3, r4
   17f0c:	b2db      	uxtb	r3, r3
   17f0e:	4298      	cmp	r0, r3
   17f10:	d806      	bhi.n	17f20 <ull_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   17f12:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   17f14:	7813      	ldrb	r3, [r2, #0]
   17f16:	d003      	beq.n	17f20 <ull_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   17f18:	fb01 2203 	mla	r2, r1, r3, r2
   17f1c:	6850      	ldr	r0, [r2, #4]
}
   17f1e:	bd10      	pop	{r4, pc}
		return NULL;
   17f20:	2000      	movs	r0, #0
   17f22:	e7fc      	b.n	17f1e <ull_pdu_rx_alloc_peek+0x26>
   17f24:	20000974 	.word	0x20000974

00017f28 <ull_pdu_rx_alloc>:
{
   17f28:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(pdu_rx_free);
   17f2a:	4a09      	ldr	r2, [pc, #36]	; (17f50 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   17f2c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   17f2e:	78d0      	ldrb	r0, [r2, #3]
   17f30:	7811      	ldrb	r1, [r2, #0]
   17f32:	7854      	ldrb	r4, [r2, #1]
   17f34:	4298      	cmp	r0, r3
   17f36:	d009      	beq.n	17f4c <ull_pdu_rx_alloc+0x24>
	mem = *((void **)(fifo + _first * size));
   17f38:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   17f3c:	3301      	adds	r3, #1
   17f3e:	b2db      	uxtb	r3, r3
		_first = 0U;
   17f40:	429c      	cmp	r4, r3
   17f42:	bf08      	it	eq
   17f44:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   17f46:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   17f48:	7093      	strb	r3, [r2, #2]
}
   17f4a:	bd10      	pop	{r4, pc}
		return NULL;
   17f4c:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   17f4e:	e7fc      	b.n	17f4a <ull_pdu_rx_alloc+0x22>
   17f50:	20000974 	.word	0x20000974

00017f54 <ull_rx_put>:
{
   17f54:	b538      	push	{r3, r4, r5, lr}
   17f56:	460c      	mov	r4, r1
   17f58:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   17f5a:	f001 fe61 	bl	19c20 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   17f5e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   17f60:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   17f62:	4a03      	ldr	r2, [pc, #12]	; (17f70 <ull_rx_put+0x1c>)
   17f64:	4628      	mov	r0, r5
}
   17f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   17f6a:	f00e bee8 	b.w	26d3e <memq_enqueue>
   17f6e:	bf00      	nop
   17f70:	200033d4 	.word	0x200033d4

00017f74 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   17f74:	2201      	movs	r2, #1
   17f76:	4b02      	ldr	r3, [pc, #8]	; (17f80 <ull_rx_sched+0xc>)
   17f78:	4611      	mov	r1, r2
   17f7a:	2000      	movs	r0, #0
   17f7c:	f7fd bce8 	b.w	15950 <mayfly_enqueue>
   17f80:	20000b04 	.word	0x20000b04

00017f84 <ull_prepare_enqueue>:
{
   17f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   17f88:	4e16      	ldr	r6, [pc, #88]	; (17fe4 <ull_prepare_enqueue+0x60>)
{
   17f8a:	460f      	mov	r7, r1
   17f8c:	4611      	mov	r1, r2
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   17f8e:	78f2      	ldrb	r2, [r6, #3]
   17f90:	7834      	ldrb	r4, [r6, #0]
{
   17f92:	4680      	mov	r8, r0
	last = last + 1;
   17f94:	1c55      	adds	r5, r2, #1
	if (last == count) {
   17f96:	7870      	ldrb	r0, [r6, #1]
   17f98:	4699      	mov	r9, r3
	last = last + 1;
   17f9a:	b2ed      	uxtb	r5, r5
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   17f9c:	78b3      	ldrb	r3, [r6, #2]
		last = 0U;
   17f9e:	42a8      	cmp	r0, r5
   17fa0:	bf08      	it	eq
   17fa2:	2500      	moveq	r5, #0
	if (last == first) {
   17fa4:	42ab      	cmp	r3, r5
   17fa6:	d01a      	beq.n	17fde <ull_prepare_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   17fa8:	1d33      	adds	r3, r6, #4
   17faa:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
   17fae:	b1b4      	cbz	r4, 17fde <ull_prepare_enqueue+0x5a>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   17fb0:	2210      	movs	r2, #16
   17fb2:	4620      	mov	r0, r4
   17fb4:	f00c f8cb 	bl	2414e <memcpy>
	e->prio = prio;
   17fb8:	9b08      	ldr	r3, [sp, #32]
   17fba:	61e3      	str	r3, [r4, #28]
	e->is_resume = is_resume;
   17fbc:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   17fc0:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->abort_cb = abort_cb;
   17fc4:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   17fc6:	f362 0300 	bfi	r3, r2, #0, #1
	e->is_abort_cb = is_abort_cb;
   17fca:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_aborted = 0U;
   17fce:	f36f 0341 	bfc	r3, #1, #1
   17fd2:	f884 3020 	strb.w	r3, [r4, #32]
	*last = idx; /* Commit: Update write index */
   17fd6:	70f5      	strb	r5, [r6, #3]
	return 0;
   17fd8:	2000      	movs	r0, #0
}
   17fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
   17fde:	f06f 0036 	mvn.w	r0, #54	; 0x36
   17fe2:	e7fa      	b.n	17fda <ull_prepare_enqueue+0x56>
   17fe4:	2000098c 	.word	0x2000098c

00017fe8 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   17fe8:	4b05      	ldr	r3, [pc, #20]	; (18000 <ull_prepare_dequeue_get+0x18>)
   17fea:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   17fec:	78d9      	ldrb	r1, [r3, #3]
   17fee:	7818      	ldrb	r0, [r3, #0]
   17ff0:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   17ff2:	bf1a      	itte	ne
   17ff4:	3304      	addne	r3, #4
   17ff6:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   17ffa:	2000      	moveq	r0, #0
}
   17ffc:	4770      	bx	lr
   17ffe:	bf00      	nop
   18000:	2000098c 	.word	0x2000098c

00018004 <rx_demux>:
{
   18004:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   18008:	4e89      	ldr	r6, [pc, #548]	; (18230 <rx_demux+0x22c>)
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1800a:	4c8a      	ldr	r4, [pc, #552]	; (18234 <rx_demux+0x230>)
   1800c:	aa01      	add	r2, sp, #4
   1800e:	e9d4 0100 	ldrd	r0, r1, [r4]
   18012:	f00e fe9b 	bl	26d4c <memq_peek>
		if (link) {
   18016:	4605      	mov	r5, r0
   18018:	2800      	cmp	r0, #0
   1801a:	f000 80f7 	beq.w	1820c <rx_demux+0x208>
			LL_ASSERT(rx);
   1801e:	9b01      	ldr	r3, [sp, #4]
   18020:	b95b      	cbnz	r3, 1803a <rx_demux+0x36>
   18022:	f44f 62e6 	mov.w	r2, #1840	; 0x730
   18026:	4984      	ldr	r1, [pc, #528]	; (18238 <rx_demux+0x234>)
   18028:	4884      	ldr	r0, [pc, #528]	; (1823c <rx_demux+0x238>)
   1802a:	f009 ff4e 	bl	21eca <printk>
   1802e:	4040      	eors	r0, r0
   18030:	f380 8811 	msr	BASEPRI, r0
   18034:	f04f 0003 	mov.w	r0, #3
   18038:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1803a:	9b01      	ldr	r3, [sp, #4]
   1803c:	aa02      	add	r2, sp, #8
   1803e:	f10d 0102 	add.w	r1, sp, #2
   18042:	7818      	ldrb	r0, [r3, #0]
   18044:	f001 fe0a 	bl	19c5c <ull_conn_ack_by_last_peek>
			if (link_tx) {
   18048:	4602      	mov	r2, r0
   1804a:	9801      	ldr	r0, [sp, #4]
   1804c:	b132      	cbz	r2, 1805c <rx_demux+0x58>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   1804e:	9b02      	ldr	r3, [sp, #8]
   18050:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18054:	7800      	ldrb	r0, [r0, #0]
				rx_demux_conn_tx_ack(ack_last, handle,
   18056:	f00f f967 	bl	27328 <rx_demux_conn_tx_ack>
   1805a:	e7d6      	b.n	1800a <rx_demux+0x6>
	switch (rx->type) {
   1805c:	7903      	ldrb	r3, [r0, #4]
   1805e:	9003      	str	r0, [sp, #12]
   18060:	2b03      	cmp	r3, #3
   18062:	f000 80bf 	beq.w	181e4 <rx_demux+0x1e0>
   18066:	d810      	bhi.n	1808a <rx_demux+0x86>
   18068:	2b01      	cmp	r3, #1
   1806a:	d015      	beq.n	18098 <rx_demux+0x94>
   1806c:	2b02      	cmp	r3, #2
   1806e:	d01a      	beq.n	180a6 <rx_demux+0xa2>
		LL_ASSERT(0);
   18070:	f640 0225 	movw	r2, #2085	; 0x825
   18074:	4970      	ldr	r1, [pc, #448]	; (18238 <rx_demux+0x234>)
   18076:	4871      	ldr	r0, [pc, #452]	; (1823c <rx_demux+0x238>)
   18078:	f009 ff27 	bl	21eca <printk>
   1807c:	4040      	eors	r0, r0
   1807e:	f380 8811 	msr	BASEPRI, r0
   18082:	f04f 0003 	mov.w	r0, #3
   18086:	df02      	svc	2
			if (nack) {
   18088:	e7bf      	b.n	1800a <rx_demux+0x6>
	switch (rx->type) {
   1808a:	2b13      	cmp	r3, #19
   1808c:	f000 80a1 	beq.w	181d2 <rx_demux+0x1ce>
   18090:	2b14      	cmp	r3, #20
   18092:	d001      	beq.n	18098 <rx_demux+0x94>
   18094:	2b04      	cmp	r3, #4
   18096:	d1eb      	bne.n	18070 <rx_demux+0x6c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   18098:	4966      	ldr	r1, [pc, #408]	; (18234 <rx_demux+0x230>)
   1809a:	6860      	ldr	r0, [r4, #4]
   1809c:	2200      	movs	r2, #0
   1809e:	f00e fe5d 	bl	26d5c <memq_dequeue>
		ll_rx_put(link, rx);
   180a2:	9903      	ldr	r1, [sp, #12]
   180a4:	e0ac      	b.n	18200 <rx_demux+0x1fc>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   180a6:	6860      	ldr	r0, [r4, #4]
   180a8:	4962      	ldr	r1, [pc, #392]	; (18234 <rx_demux+0x230>)
   180aa:	f00e fe57 	bl	26d5c <memq_dequeue>
		rx_demux_event_done(link, rx);
   180ae:	9f03      	ldr	r7, [sp, #12]
	switch (done->extra.type) {
   180b0:	f897 3020 	ldrb.w	r3, [r7, #32]
	ull_hdr = done->param;
   180b4:	69fc      	ldr	r4, [r7, #28]
	switch (done->extra.type) {
   180b6:	b123      	cbz	r3, 180c2 <rx_demux+0xbe>
   180b8:	2b01      	cmp	r3, #1
   180ba:	d16d      	bne.n	18198 <rx_demux+0x194>
		ull_conn_done(done);
   180bc:	4638      	mov	r0, r7
   180be:	f001 fc97 	bl	199f0 <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   180c2:	4a5f      	ldr	r2, [pc, #380]	; (18240 <rx_demux+0x23c>)
   180c4:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   180c6:	f892 c001 	ldrb.w	ip, [r2, #1]
   180ca:	7890      	ldrb	r0, [r2, #2]
	done->extra.type = 0U;
   180cc:	2300      	movs	r3, #0
   180ce:	f887 3020 	strb.w	r3, [r7, #32]
	last = last + 1;
   180d2:	1c4b      	adds	r3, r1, #1
   180d4:	b2db      	uxtb	r3, r3
		last = 0U;
   180d6:	459c      	cmp	ip, r3
   180d8:	bf08      	it	eq
   180da:	2300      	moveq	r3, #0
	if (last == first) {
   180dc:	4298      	cmp	r0, r3
   180de:	d168      	bne.n	181b2 <rx_demux+0x1ae>
	LL_ASSERT(release == done);
   180e0:	f640 026c 	movw	r2, #2156	; 0x86c
   180e4:	4954      	ldr	r1, [pc, #336]	; (18238 <rx_demux+0x234>)
   180e6:	4855      	ldr	r0, [pc, #340]	; (1823c <rx_demux+0x238>)
   180e8:	f009 feef 	bl	21eca <printk>
   180ec:	4040      	eors	r0, r0
   180ee:	f380 8811 	msr	BASEPRI, r0
   180f2:	f04f 0003 	mov.w	r0, #3
   180f6:	df02      	svc	2
	next = ull_prepare_dequeue_get();
   180f8:	f7ff ff76 	bl	17fe8 <ull_prepare_dequeue_get>
			mfy.param = next;
   180fc:	f8df 8144 	ldr.w	r8, [pc, #324]	; 18244 <rx_demux+0x240>
	while (next) {
   18100:	b350      	cbz	r0, 18158 <rx_demux+0x154>
		uint8_t is_aborted = next->is_aborted;
   18102:	f890 5020 	ldrb.w	r5, [r0, #32]
   18106:	f3c5 0740 	ubfx	r7, r5, #1, #1
		uint8_t is_resume = next->is_resume;
   1810a:	f005 0501 	and.w	r5, r5, #1
		if (!is_aborted) {
   1810e:	b9a7      	cbnz	r7, 1813a <rx_demux+0x136>
			mfy.param = next;
   18110:	f8c8 0008 	str.w	r0, [r8, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   18114:	4b4b      	ldr	r3, [pc, #300]	; (18244 <rx_demux+0x240>)
   18116:	463a      	mov	r2, r7
   18118:	4639      	mov	r1, r7
   1811a:	2001      	movs	r0, #1
   1811c:	f7fd fc18 	bl	15950 <mayfly_enqueue>
			LL_ASSERT(!ret);
   18120:	b158      	cbz	r0, 1813a <rx_demux+0x136>
   18122:	f640 027d 	movw	r2, #2173	; 0x87d
   18126:	4944      	ldr	r1, [pc, #272]	; (18238 <rx_demux+0x234>)
   18128:	4844      	ldr	r0, [pc, #272]	; (1823c <rx_demux+0x238>)
   1812a:	f009 fece 	bl	21eca <printk>
   1812e:	4040      	eors	r0, r0
   18130:	f380 8811 	msr	BASEPRI, r0
   18134:	f04f 0003 	mov.w	r0, #3
   18138:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1813a:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1813c:	78f1      	ldrb	r1, [r6, #3]
		MFIFO_DEQUEUE(prep);
   1813e:	7872      	ldrb	r2, [r6, #1]
   18140:	4299      	cmp	r1, r3
   18142:	d005      	beq.n	18150 <rx_demux+0x14c>
	_first += 1U;
   18144:	3301      	adds	r3, #1
   18146:	b2db      	uxtb	r3, r3
		_first = 0U;
   18148:	429a      	cmp	r2, r3
   1814a:	bf08      	it	eq
   1814c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1814e:	70b3      	strb	r3, [r6, #2]

		next = ull_prepare_dequeue_get();
   18150:	f7ff ff4a 	bl	17fe8 <ull_prepare_dequeue_get>

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   18154:	2800      	cmp	r0, #0
   18156:	d133      	bne.n	181c0 <rx_demux+0x1bc>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   18158:	2c00      	cmp	r4, #0
   1815a:	f43f af56 	beq.w	1800a <rx_demux+0x6>
   1815e:	7823      	ldrb	r3, [r4, #0]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   18160:	b95b      	cbnz	r3, 1817a <rx_demux+0x176>
   18162:	f640 028f 	movw	r2, #2191	; 0x88f
   18166:	4934      	ldr	r1, [pc, #208]	; (18238 <rx_demux+0x234>)
   18168:	4834      	ldr	r0, [pc, #208]	; (1823c <rx_demux+0x238>)
   1816a:	f009 feae 	bl	21eca <printk>
   1816e:	4040      	eors	r0, r0
   18170:	f380 8811 	msr	BASEPRI, r0
   18174:	f04f 0003 	mov.w	r0, #3
   18178:	df02      	svc	2
	return hdr->ref--;
   1817a:	7823      	ldrb	r3, [r4, #0]
   1817c:	3b01      	subs	r3, #1
   1817e:	b2db      	uxtb	r3, r3
   18180:	7023      	strb	r3, [r4, #0]
	return hdr->ref;
   18182:	7823      	ldrb	r3, [r4, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   18184:	2b00      	cmp	r3, #0
   18186:	f47f af40 	bne.w	1800a <rx_demux+0x6>
   1818a:	6863      	ldr	r3, [r4, #4]
   1818c:	2b00      	cmp	r3, #0
   1818e:	f43f af3c 	beq.w	1800a <rx_demux+0x6>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   18192:	68a0      	ldr	r0, [r4, #8]
   18194:	4798      	blx	r3
			if (nack) {
   18196:	e738      	b.n	1800a <rx_demux+0x6>
		LL_ASSERT(0);
   18198:	f640 0265 	movw	r2, #2149	; 0x865
   1819c:	4926      	ldr	r1, [pc, #152]	; (18238 <rx_demux+0x234>)
   1819e:	4827      	ldr	r0, [pc, #156]	; (1823c <rx_demux+0x238>)
   181a0:	f009 fe93 	bl	21eca <printk>
   181a4:	4040      	eors	r0, r0
   181a6:	f380 8811 	msr	BASEPRI, r0
   181aa:	f04f 0003 	mov.w	r0, #3
   181ae:	df02      	svc	2
		break;
   181b0:	e787      	b.n	180c2 <rx_demux+0xbe>
	done->hdr.link = link;
   181b2:	603d      	str	r5, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   181b4:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   181b6:	fb00 2101 	mla	r1, r0, r1, r2
   181ba:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   181bc:	70d3      	strb	r3, [r2, #3]
	LL_ASSERT(release == done);
   181be:	e79b      	b.n	180f8 <rx_demux+0xf4>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   181c0:	2f00      	cmp	r7, #0
   181c2:	d19d      	bne.n	18100 <rx_demux+0xfc>
   181c4:	2d00      	cmp	r5, #0
   181c6:	d0c7      	beq.n	18158 <rx_demux+0x154>
   181c8:	f890 3020 	ldrb.w	r3, [r0, #32]
   181cc:	07db      	lsls	r3, r3, #31
   181ce:	d4c3      	bmi.n	18158 <rx_demux+0x154>
   181d0:	e796      	b.n	18100 <rx_demux+0xfc>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   181d2:	4918      	ldr	r1, [pc, #96]	; (18234 <rx_demux+0x230>)
   181d4:	6860      	ldr	r0, [r4, #4]
   181d6:	f00e fdc1 	bl	26d5c <memq_dequeue>
		ull_conn_setup(link, rx);
   181da:	9903      	ldr	r1, [sp, #12]
   181dc:	4628      	mov	r0, r5
   181de:	f000 fe67 	bl	18eb0 <ull_conn_setup>
			if (nack) {
   181e2:	e712      	b.n	1800a <rx_demux+0x6>
		nack = ull_conn_rx(link, (void *)&rx);
   181e4:	a903      	add	r1, sp, #12
   181e6:	4628      	mov	r0, r5
   181e8:	f000 fe80 	bl	18eec <ull_conn_rx>
		if (nack) {
   181ec:	4602      	mov	r2, r0
   181ee:	b9d8      	cbnz	r0, 18228 <rx_demux+0x224>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   181f0:	4910      	ldr	r1, [pc, #64]	; (18234 <rx_demux+0x230>)
   181f2:	6860      	ldr	r0, [r4, #4]
   181f4:	f00e fdb2 	bl	26d5c <memq_dequeue>
		if (rx) {
   181f8:	9903      	ldr	r1, [sp, #12]
   181fa:	2900      	cmp	r1, #0
   181fc:	f43f af05 	beq.w	1800a <rx_demux+0x6>
		ll_rx_put(link, rx);
   18200:	4628      	mov	r0, r5
   18202:	f7ff fd29 	bl	17c58 <ll_rx_put>
		ll_rx_sched();
   18206:	f7ff fd31 	bl	17c6c <ll_rx_sched>
			if (nack) {
   1820a:	e6fe      	b.n	1800a <rx_demux+0x6>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   1820c:	aa03      	add	r2, sp, #12
   1820e:	a902      	add	r1, sp, #8
   18210:	f10d 0002 	add.w	r0, sp, #2
   18214:	f001 fd0a 	bl	19c2c <ull_conn_ack_peek>
			if (link) {
   18218:	4602      	mov	r2, r0
   1821a:	b128      	cbz	r0, 18228 <rx_demux+0x224>
				rx_demux_conn_tx_ack(ack_last, handle,
   1821c:	9b03      	ldr	r3, [sp, #12]
   1821e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   18222:	f89d 0002 	ldrb.w	r0, [sp, #2]
   18226:	e716      	b.n	18056 <rx_demux+0x52>
}
   18228:	b004      	add	sp, #16
   1822a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1822e:	bf00      	nop
   18230:	2000098c 	.word	0x2000098c
   18234:	200033d0 	.word	0x200033d0
   18238:	0002f376 	.word	0x0002f376
   1823c:	0002a026 	.word	0x0002a026
   18240:	20000950 	.word	0x20000950
   18244:	20000b14 	.word	0x20000b14

00018248 <ull_prepare_dequeue_iter>:
{
   18248:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1824a:	4b0c      	ldr	r3, [pc, #48]	; (1827c <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   1824c:	7801      	ldrb	r1, [r0, #0]
   1824e:	785c      	ldrb	r4, [r3, #1]
   18250:	78dd      	ldrb	r5, [r3, #3]
   18252:	781a      	ldrb	r2, [r3, #0]
   18254:	42a1      	cmp	r1, r4
   18256:	bf24      	itt	cs
   18258:	789b      	ldrbcs	r3, [r3, #2]
		*idx = first;
   1825a:	7003      	strbcs	r3, [r0, #0]
	if (*idx == last) {
   1825c:	7801      	ldrb	r1, [r0, #0]
   1825e:	428d      	cmp	r5, r1
   18260:	d00a      	beq.n	18278 <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
   18262:	1c4b      	adds	r3, r1, #1
   18264:	b2db      	uxtb	r3, r3
		i = 0U;
   18266:	429c      	cmp	r4, r3
   18268:	bf08      	it	eq
   1826a:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   1826c:	4c04      	ldr	r4, [pc, #16]	; (18280 <ull_prepare_dequeue_iter+0x38>)
	*idx = i;
   1826e:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   18270:	fb01 4202 	mla	r2, r1, r2, r4
}
   18274:	4610      	mov	r0, r2
   18276:	bd30      	pop	{r4, r5, pc}
		return NULL;
   18278:	2200      	movs	r2, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1827a:	e7fb      	b.n	18274 <ull_prepare_dequeue_iter+0x2c>
   1827c:	2000098c 	.word	0x2000098c
   18280:	20000990 	.word	0x20000990

00018284 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   18284:	4b06      	ldr	r3, [pc, #24]	; (182a0 <ull_event_done_extra_get+0x1c>)
   18286:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   18288:	78d8      	ldrb	r0, [r3, #3]
   1828a:	781a      	ldrb	r2, [r3, #0]
   1828c:	4288      	cmp	r0, r1
   1828e:	d005      	beq.n	1829c <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   18290:	fb01 3302 	mla	r3, r1, r2, r3
   18294:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   18296:	b110      	cbz	r0, 1829e <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   18298:	3020      	adds	r0, #32
   1829a:	4770      	bx	lr
		return NULL;
   1829c:	2000      	movs	r0, #0
}
   1829e:	4770      	bx	lr
   182a0:	20000950 	.word	0x20000950

000182a4 <ull_event_done>:
{
   182a4:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   182a6:	4a10      	ldr	r2, [pc, #64]	; (182e8 <ull_event_done+0x44>)
	uint8_t _first = *first; /* Copy read-index */
   182a8:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   182aa:	78d4      	ldrb	r4, [r2, #3]
   182ac:	7811      	ldrb	r1, [r2, #0]
   182ae:	7855      	ldrb	r5, [r2, #1]
   182b0:	429c      	cmp	r4, r3
   182b2:	d017      	beq.n	182e4 <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
   182b4:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   182b8:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   182ba:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   182bc:	b2db      	uxtb	r3, r3
		_first = 0U;
   182be:	429d      	cmp	r5, r3
   182c0:	bf08      	it	eq
   182c2:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   182c4:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   182c6:	b15c      	cbz	r4, 182e0 <ull_event_done+0x3c>
	link = evdone->hdr.link;
   182c8:	6823      	ldr	r3, [r4, #0]
	evdone->param = param;
   182ca:	61e0      	str	r0, [r4, #28]
	evdone->hdr.link = NULL;
   182cc:	2200      	movs	r2, #0
   182ce:	6022      	str	r2, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   182d0:	2202      	movs	r2, #2
   182d2:	7122      	strb	r2, [r4, #4]
	ull_rx_put(link, evdone);
   182d4:	4621      	mov	r1, r4
   182d6:	4618      	mov	r0, r3
   182d8:	f7ff fe3c 	bl	17f54 <ull_rx_put>
	ull_rx_sched();
   182dc:	f7ff fe4a 	bl	17f74 <ull_rx_sched>
}
   182e0:	4620      	mov	r0, r4
   182e2:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   182e4:	2400      	movs	r4, #0
   182e6:	e7fb      	b.n	182e0 <ull_event_done+0x3c>
   182e8:	20000950 	.word	0x20000950

000182ec <disabled_cb>:
		LL_ASSERT(!ret);
	}
}

static void disabled_cb(void *param)
{
   182ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ll_adv_set *adv;
	struct node_rx_pdu *rx;
	struct node_rx_cc *cc;
	memq_link_t *link;

	adv = ((struct lll_hdr *)param)->parent;
   182ee:	6805      	ldr	r5, [r0, #0]

	LL_ASSERT(adv->link_cc_free);
   182f0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
{
   182f2:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   182f4:	b95b      	cbnz	r3, 1830e <disabled_cb+0x22>
   182f6:	f240 7213 	movw	r2, #1811	; 0x713
   182fa:	4919      	ldr	r1, [pc, #100]	; (18360 <disabled_cb+0x74>)
   182fc:	4819      	ldr	r0, [pc, #100]	; (18364 <disabled_cb+0x78>)
   182fe:	f009 fde4 	bl	21eca <printk>
   18302:	4040      	eors	r0, r0
   18304:	f380 8811 	msr	BASEPRI, r0
   18308:	f04f 0003 	mov.w	r0, #3
   1830c:	df02      	svc	2
	link = adv->link_cc_free;
	adv->link_cc_free = NULL;
   1830e:	2300      	movs	r3, #0
	link = adv->link_cc_free;
   18310:	6c6f      	ldr	r7, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   18312:	646b      	str	r3, [r5, #68]	; 0x44

	LL_ASSERT(adv->node_rx_cc_free);
   18314:	6cab      	ldr	r3, [r5, #72]	; 0x48
   18316:	b95b      	cbnz	r3, 18330 <disabled_cb+0x44>
   18318:	f240 7217 	movw	r2, #1815	; 0x717
   1831c:	4910      	ldr	r1, [pc, #64]	; (18360 <disabled_cb+0x74>)
   1831e:	4811      	ldr	r0, [pc, #68]	; (18364 <disabled_cb+0x78>)
   18320:	f009 fdd3 	bl	21eca <printk>
   18324:	4040      	eors	r0, r0
   18326:	f380 8811 	msr	BASEPRI, r0
   1832a:	f04f 0003 	mov.w	r0, #3
   1832e:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   18330:	6cac      	ldr	r4, [r5, #72]	; 0x48
	adv->node_rx_cc_free = NULL;
   18332:	2100      	movs	r1, #0

	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   18334:	2313      	movs	r3, #19
	adv->node_rx_cc_free = NULL;
   18336:	64a9      	str	r1, [r5, #72]	; 0x48
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   18338:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   1833a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1833e:	80e3      	strh	r3, [r4, #6]

	cc = (void *)rx->pdu;
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   18340:	2212      	movs	r2, #18
   18342:	f104 001c 	add.w	r0, r4, #28
   18346:	f00b ff2c 	bl	241a2 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1834a:	233c      	movs	r3, #60	; 0x3c
   1834c:	7723      	strb	r3, [r4, #28]

	rx->hdr.rx_ftr.param = param;
   1834e:	60a6      	str	r6, [r4, #8]

		link = rx->hdr.link;
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	ll_rx_put(link, rx);
   18350:	4621      	mov	r1, r4
   18352:	4638      	mov	r0, r7
   18354:	f7ff fc80 	bl	17c58 <ll_rx_put>
	ll_rx_sched();
}
   18358:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   1835c:	f7ff bc86 	b.w	17c6c <ll_rx_sched>
   18360:	0002f3bd 	.word	0x0002f3bd
   18364:	0002a026 	.word	0x0002a026

00018368 <ticker_cb>:
{
   18368:	b5f0      	push	{r4, r5, r6, r7, lr}
   1836a:	461d      	mov	r5, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   1836c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18370:	429a      	cmp	r2, r3
{
   18372:	b08b      	sub	sp, #44	; 0x2c
   18374:	4607      	mov	r7, r0
   18376:	460e      	mov	r6, r1
   18378:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   1837a:	d02b      	beq.n	183d4 <ticker_cb+0x6c>
	return ++hdr->ref;
   1837c:	7c2b      	ldrb	r3, [r5, #16]
   1837e:	3301      	adds	r3, #1
   18380:	b2db      	uxtb	r3, r3
   18382:	742b      	strb	r3, [r5, #16]
		LL_ASSERT(ref);
   18384:	b95b      	cbnz	r3, 1839e <ticker_cb+0x36>
   18386:	f240 6287 	movw	r2, #1671	; 0x687
   1838a:	492d      	ldr	r1, [pc, #180]	; (18440 <ticker_cb+0xd8>)
   1838c:	482d      	ldr	r0, [pc, #180]	; (18444 <ticker_cb+0xdc>)
   1838e:	f009 fd9c 	bl	21eca <printk>
   18392:	4040      	eors	r0, r0
   18394:	f380 8811 	msr	BASEPRI, r0
   18398:	f04f 0003 	mov.w	r0, #3
   1839c:	df02      	svc	2
		p.ticks_at_expire = ticks_at_expire;
   1839e:	4a2a      	ldr	r2, [pc, #168]	; (18448 <ticker_cb+0xe0>)
	lll = &adv->lll;
   183a0:	f105 031c 	add.w	r3, r5, #28
		p.param = lll;
   183a4:	60d3      	str	r3, [r2, #12]
		mfy.param = &p;
   183a6:	4b29      	ldr	r3, [pc, #164]	; (1844c <ticker_cb+0xe4>)
		p.lazy = lazy;
   183a8:	8114      	strh	r4, [r2, #8]
		p.remainder = remainder;
   183aa:	e9c2 7600 	strd	r7, r6, [r2]
		mfy.param = &p;
   183ae:	609a      	str	r2, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   183b0:	2200      	movs	r2, #0
   183b2:	4611      	mov	r1, r2
   183b4:	2001      	movs	r0, #1
   183b6:	f7fd facb 	bl	15950 <mayfly_enqueue>
		LL_ASSERT(!ret);
   183ba:	b158      	cbz	r0, 183d4 <ticker_cb+0x6c>
   183bc:	f240 6293 	movw	r2, #1683	; 0x693
   183c0:	491f      	ldr	r1, [pc, #124]	; (18440 <ticker_cb+0xd8>)
   183c2:	4820      	ldr	r0, [pc, #128]	; (18444 <ticker_cb+0xdc>)
   183c4:	f009 fd81 	bl	21eca <printk>
   183c8:	4040      	eors	r0, r0
   183ca:	f380 8811 	msr	BASEPRI, r0
   183ce:	f04f 0003 	mov.w	r0, #3
   183d2:	df02      	svc	2
	if (!lll->is_hdcd)
   183d4:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
   183d8:	f014 0401 	ands.w	r4, r4, #1
   183dc:	d12e      	bne.n	1843c <ticker_cb+0xd4>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   183de:	2104      	movs	r1, #4
   183e0:	a809      	add	r0, sp, #36	; 0x24
   183e2:	f00f fa3a 	bl	2785a <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   183e6:	9909      	ldr	r1, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   183e8:	9506      	str	r5, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   183ea:	f240 1247 	movw	r2, #327	; 0x147
   183ee:	fbb1 f3f2 	udiv	r3, r1, r2
   183f2:	fb02 1313 	mls	r3, r2, r3, r1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   183f6:	4a16      	ldr	r2, [pc, #88]	; (18450 <ticker_cb+0xe8>)
   183f8:	2150      	movs	r1, #80	; 0x50
   183fa:	1aaa      	subs	r2, r5, r2
   183fc:	fbb2 f2f1 	udiv	r2, r2, r1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   18400:	4914      	ldr	r1, [pc, #80]	; (18454 <ticker_cb+0xec>)
				    (TICKER_ID_ADV_BASE +
   18402:	3202      	adds	r2, #2
		random_delay += 1;
   18404:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   18406:	e9cd 4104 	strd	r4, r1, [sp, #16]
   1840a:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1840e:	e9cd 4400 	strd	r4, r4, [sp]
   18412:	b2d2      	uxtb	r2, r2
   18414:	2101      	movs	r1, #1
   18416:	4620      	mov	r0, r4
		random_delay += 1;
   18418:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1841a:	f00e fefe 	bl	2721a <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1841e:	f030 0302 	bics.w	r3, r0, #2
   18422:	d00b      	beq.n	1843c <ticker_cb+0xd4>
   18424:	f240 62aa 	movw	r2, #1706	; 0x6aa
   18428:	4905      	ldr	r1, [pc, #20]	; (18440 <ticker_cb+0xd8>)
   1842a:	4806      	ldr	r0, [pc, #24]	; (18444 <ticker_cb+0xdc>)
   1842c:	f009 fd4d 	bl	21eca <printk>
   18430:	4040      	eors	r0, r0
   18432:	f380 8811 	msr	BASEPRI, r0
   18436:	f04f 0003 	mov.w	r0, #3
   1843a:	df02      	svc	2
}
   1843c:	b00b      	add	sp, #44	; 0x2c
   1843e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18440:	0002f3bd 	.word	0x0002f3bd
   18444:	0002a026 	.word	0x0002a026
   18448:	200038d0 	.word	0x200038d0
   1844c:	20000b24 	.word	0x20000b24
   18450:	20003874 	.word	0x20003874
   18454:	0001855d 	.word	0x0001855d

00018458 <conn_release>:

static void conn_release(struct ll_adv_set *adv)
{
   18458:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   1845a:	6a45      	ldr	r5, [r0, #36]	; 0x24
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   1845c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
{
   1845e:	4604      	mov	r4, r0
	LL_ASSERT(!lll->link_tx_free);
   18460:	b15b      	cbz	r3, 1847a <conn_release+0x22>
   18462:	f240 7241 	movw	r2, #1857	; 0x741
   18466:	4916      	ldr	r1, [pc, #88]	; (184c0 <conn_release+0x68>)
   18468:	4816      	ldr	r0, [pc, #88]	; (184c4 <conn_release+0x6c>)
   1846a:	f009 fd2e 	bl	21eca <printk>
   1846e:	4040      	eors	r0, r0
   18470:	f380 8811 	msr	BASEPRI, r0
   18474:	f04f 0003 	mov.w	r0, #3
   18478:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   1847a:	f105 0144 	add.w	r1, r5, #68	; 0x44
   1847e:	f105 0040 	add.w	r0, r5, #64	; 0x40
   18482:	f00e fc51 	bl	26d28 <memq_deinit>
	LL_ASSERT(link);
   18486:	4606      	mov	r6, r0
   18488:	b958      	cbnz	r0, 184a2 <conn_release+0x4a>
   1848a:	f240 7243 	movw	r2, #1859	; 0x743
   1848e:	490c      	ldr	r1, [pc, #48]	; (184c0 <conn_release+0x68>)
   18490:	480c      	ldr	r0, [pc, #48]	; (184c4 <conn_release+0x6c>)
   18492:	f009 fd1a 	bl	21eca <printk>
   18496:	4040      	eors	r0, r0
   18498:	f380 8811 	msr	BASEPRI, r0
   1849c:	f04f 0003 	mov.w	r0, #3
   184a0:	df02      	svc	2
	lll->link_tx_free = link;

	ll_conn_release(lll->hdr.parent);
   184a2:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   184a4:	652e      	str	r6, [r5, #80]	; 0x50
	adv->lll.conn = NULL;
   184a6:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   184a8:	f000 fc00 	bl	18cac <ll_conn_release>

	ll_rx_release(adv->node_rx_cc_free);
   184ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	adv->lll.conn = NULL;
   184ae:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   184b0:	f7ff fbcc 	bl	17c4c <ll_rx_release>
	adv->node_rx_cc_free = NULL;
   184b4:	64a5      	str	r5, [r4, #72]	; 0x48
	ll_rx_link_release(adv->link_cc_free);
   184b6:	6c60      	ldr	r0, [r4, #68]	; 0x44
   184b8:	f7ff fbbc 	bl	17c34 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   184bc:	6465      	str	r5, [r4, #68]	; 0x44
}
   184be:	bd70      	pop	{r4, r5, r6, pc}
   184c0:	0002f3bd 	.word	0x0002f3bd
   184c4:	0002a026 	.word	0x0002a026

000184c8 <ticker_op_stop_cb>:
{
   184c8:	b570      	push	{r4, r5, r6, lr}
   184ca:	460c      	mov	r4, r1
	if (status != TICKER_STATUS_SUCCESS) {
   184cc:	2800      	cmp	r0, #0
   184ce:	d12f      	bne.n	18530 <ticker_op_stop_cb+0x68>
	mfy.param = &adv->lll;
   184d0:	f101 021c 	add.w	r2, r1, #28
   184d4:	4b1c      	ldr	r3, [pc, #112]	; (18548 <ticker_op_stop_cb+0x80>)
	return hdr->ref;
   184d6:	7c09      	ldrb	r1, [r1, #16]
   184d8:	609a      	str	r2, [r3, #8]
   184da:	461e      	mov	r6, r3
	if (ull_ref_get(hdr)) {
   184dc:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   184e0:	4d1a      	ldr	r5, [pc, #104]	; (1854c <ticker_op_stop_cb+0x84>)
   184e2:	b331      	cbz	r1, 18532 <ticker_op_stop_cb+0x6a>
		LL_ASSERT(!hdr->disabled_cb);
   184e4:	6963      	ldr	r3, [r4, #20]
   184e6:	b15b      	cbz	r3, 18500 <ticker_op_stop_cb+0x38>
   184e8:	f240 62fa 	movw	r2, #1786	; 0x6fa
   184ec:	4918      	ldr	r1, [pc, #96]	; (18550 <ticker_op_stop_cb+0x88>)
   184ee:	4819      	ldr	r0, [pc, #100]	; (18554 <ticker_op_stop_cb+0x8c>)
   184f0:	f009 fceb 	bl	21eca <printk>
   184f4:	4040      	eors	r0, r0
   184f6:	f380 8811 	msr	BASEPRI, r0
   184fa:	f04f 0003 	mov.w	r0, #3
   184fe:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   18500:	68b3      	ldr	r3, [r6, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   18502:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   18504:	e9c4 5305 	strd	r5, r3, [r4, #20]
		mfy.fp = lll_disable;
   18508:	4b13      	ldr	r3, [pc, #76]	; (18558 <ticker_op_stop_cb+0x90>)
   1850a:	60f3      	str	r3, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1850c:	4611      	mov	r1, r2
   1850e:	4b0e      	ldr	r3, [pc, #56]	; (18548 <ticker_op_stop_cb+0x80>)
   18510:	2002      	movs	r0, #2
   18512:	f7fd fa1d 	bl	15950 <mayfly_enqueue>
		LL_ASSERT(!ret);
   18516:	b158      	cbz	r0, 18530 <ticker_op_stop_cb+0x68>
   18518:	f240 7201 	movw	r2, #1793	; 0x701
		LL_ASSERT(!ret);
   1851c:	490c      	ldr	r1, [pc, #48]	; (18550 <ticker_op_stop_cb+0x88>)
   1851e:	480d      	ldr	r0, [pc, #52]	; (18554 <ticker_op_stop_cb+0x8c>)
   18520:	f009 fcd3 	bl	21eca <printk>
   18524:	4040      	eors	r0, r0
   18526:	f380 8811 	msr	BASEPRI, r0
   1852a:	f04f 0003 	mov.w	r0, #3
   1852e:	df02      	svc	2
}
   18530:	bd70      	pop	{r4, r5, r6, pc}
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   18532:	2101      	movs	r1, #1
   18534:	2002      	movs	r0, #2
		mfy.fp = disabled_cb;
   18536:	60dd      	str	r5, [r3, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   18538:	f7fd fa0a 	bl	15950 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1853c:	2800      	cmp	r0, #0
   1853e:	d0f7      	beq.n	18530 <ticker_op_stop_cb+0x68>
   18540:	f240 7206 	movw	r2, #1798	; 0x706
   18544:	e7ea      	b.n	1851c <ticker_op_stop_cb+0x54>
   18546:	bf00      	nop
   18548:	20000b34 	.word	0x20000b34
   1854c:	000182ed 	.word	0x000182ed
   18550:	0002f3bd 	.word	0x0002f3bd
   18554:	0002a026 	.word	0x0002a026
   18558:	0001a49d 	.word	0x0001a49d

0001855c <ticker_op_update_cb>:
{
   1855c:	b510      	push	{r4, lr}
   1855e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   18560:	b178      	cbz	r0, 18582 <ticker_op_update_cb+0x26>
   18562:	f7ff fc39 	bl	17dd8 <ull_disable_mark_get>
   18566:	4284      	cmp	r4, r0
   18568:	d00b      	beq.n	18582 <ticker_op_update_cb+0x26>
   1856a:	f240 62cb 	movw	r2, #1739	; 0x6cb
   1856e:	4905      	ldr	r1, [pc, #20]	; (18584 <ticker_op_update_cb+0x28>)
   18570:	4805      	ldr	r0, [pc, #20]	; (18588 <ticker_op_update_cb+0x2c>)
   18572:	f009 fcaa 	bl	21eca <printk>
   18576:	4040      	eors	r0, r0
   18578:	f380 8811 	msr	BASEPRI, r0
   1857c:	f04f 0003 	mov.w	r0, #3
   18580:	df02      	svc	2
}
   18582:	bd10      	pop	{r4, pc}
   18584:	0002f3bd 	.word	0x0002f3bd
   18588:	0002a026 	.word	0x0002a026

0001858c <init_reset.part.3>:
static int init_reset(void)
   1858c:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1858e:	4c05      	ldr	r4, [pc, #20]	; (185a4 <init_reset.part.3+0x18>)
   18590:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   18594:	f002 f99e 	bl	1a8d4 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   18598:	f104 0038 	add.w	r0, r4, #56	; 0x38
}
   1859c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   185a0:	f002 b998 	b.w	1a8d4 <lll_adv_data_init>
   185a4:	20003874 	.word	0x20003874

000185a8 <ticker_stop_cb>:
{
   185a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   185aa:	4c17      	ldr	r4, [pc, #92]	; (18608 <ticker_stop_cb+0x60>)
   185ac:	2250      	movs	r2, #80	; 0x50
   185ae:	1b1c      	subs	r4, r3, r4
   185b0:	fbb4 f4f2 	udiv	r4, r4, r2
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   185b4:	f014 0fff 	tst.w	r4, #255	; 0xff
{
   185b8:	461d      	mov	r5, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   185ba:	d00b      	beq.n	185d4 <ticker_stop_cb+0x2c>
   185bc:	f240 62d7 	movw	r2, #1751	; 0x6d7
   185c0:	4912      	ldr	r1, [pc, #72]	; (1860c <ticker_stop_cb+0x64>)
   185c2:	4813      	ldr	r0, [pc, #76]	; (18610 <ticker_stop_cb+0x68>)
   185c4:	f009 fc81 	bl	21eca <printk>
   185c8:	4040      	eors	r0, r0
   185ca:	f380 8811 	msr	BASEPRI, r0
   185ce:	f04f 0003 	mov.w	r0, #3
   185d2:	df02      	svc	2
			  TICKER_ID_ADV_BASE + handle,
   185d4:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   185d6:	4b0f      	ldr	r3, [pc, #60]	; (18614 <ticker_stop_cb+0x6c>)
   185d8:	9500      	str	r5, [sp, #0]
   185da:	b2d2      	uxtb	r2, r2
   185dc:	2101      	movs	r1, #1
   185de:	2000      	movs	r0, #0
   185e0:	f7fd ff8c 	bl	164fc <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   185e4:	f030 0302 	bics.w	r3, r0, #2
   185e8:	d00b      	beq.n	18602 <ticker_stop_cb+0x5a>
   185ea:	f240 62dd 	movw	r2, #1757	; 0x6dd
   185ee:	4907      	ldr	r1, [pc, #28]	; (1860c <ticker_stop_cb+0x64>)
   185f0:	4807      	ldr	r0, [pc, #28]	; (18610 <ticker_stop_cb+0x68>)
   185f2:	f009 fc6a 	bl	21eca <printk>
   185f6:	4040      	eors	r0, r0
   185f8:	f380 8811 	msr	BASEPRI, r0
   185fc:	f04f 0003 	mov.w	r0, #3
   18600:	df02      	svc	2
}
   18602:	b003      	add	sp, #12
   18604:	bd30      	pop	{r4, r5, pc}
   18606:	bf00      	nop
   18608:	20003874 	.word	0x20003874
   1860c:	0002f3bd 	.word	0x0002f3bd
   18610:	0002a026 	.word	0x0002a026
   18614:	000184c9 	.word	0x000184c9

00018618 <ll_adv_params_set>:
{
   18618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1861a:	4c31      	ldr	r4, [pc, #196]	; (186e0 <ll_adv_params_set+0xc8>)
   1861c:	9400      	str	r4, [sp, #0]
   1861e:	2401      	movs	r4, #1
   18620:	f88d 4004 	strb.w	r4, [sp, #4]
	if (!adv || adv->is_enabled) {
   18624:	4c2f      	ldr	r4, [pc, #188]	; (186e4 <ll_adv_params_set+0xcc>)
   18626:	f894 504e 	ldrb.w	r5, [r4, #78]	; 0x4e
   1862a:	f015 0501 	ands.w	r5, r5, #1
   1862e:	d155      	bne.n	186dc <ll_adv_params_set+0xc4>
		adv->interval = 0;
   18630:	2901      	cmp	r1, #1
   18632:	bf08      	it	eq
   18634:	2000      	moveq	r0, #0
   18636:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	adv->lll.chan_map = chan_map;
   1863a:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1863e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   18642:	f366 0043 	bfi	r0, r6, #1, #3
   18646:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	adv->lll.filter_policy = filter_policy;
   1864a:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1864e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
   18652:	f366 0001 	bfi	r0, r6, #0, #2
   18656:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1865a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1865e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   18662:	f002 0701 	and.w	r7, r2, #1
   18666:	6b06      	ldr	r6, [r0, #48]	; 0x30
	pdu->type = pdu_adv_type[adv_type];
   18668:	a802      	add	r0, sp, #8
   1866a:	4408      	add	r0, r1
   1866c:	7831      	ldrb	r1, [r6, #0]
   1866e:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   18672:	f360 0103 	bfi	r1, r0, #0, #4
	pdu->rfu = 0;
   18676:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1867a:	f001 020f 	and.w	r2, r1, #15
   1867e:	2a01      	cmp	r2, #1
	pdu->rfu = 0;
   18680:	7031      	strb	r1, [r6, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   18682:	d121      	bne.n	186c8 <ll_adv_params_set+0xb0>
		pdu->rx_addr = direct_addr_type;
   18684:	4630      	mov	r0, r6
		pdu->tx_addr = own_addr_type & 0x1;
   18686:	f367 1186 	bfi	r1, r7, #6, #1
		pdu->rx_addr = direct_addr_type;
   1868a:	f363 11c7 	bfi	r1, r3, #7, #1
   1868e:	f800 1b08 	strb.w	r1, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   18692:	2206      	movs	r2, #6
   18694:	9908      	ldr	r1, [sp, #32]
   18696:	f00b fd5a 	bl	2414e <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   1869a:	230c      	movs	r3, #12
		pdu->len = BDADDR_SIZE;
   1869c:	7073      	strb	r3, [r6, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1869e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   186a2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   186a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
		pdu->tx_addr = own_addr_type & 0x1;
   186a8:	7813      	ldrb	r3, [r2, #0]
   186aa:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   186ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
   186b2:	f043 0304 	orr.w	r3, r3, #4
   186b6:	7013      	strb	r3, [r2, #0]
		if (pdu->len == 0) {
   186b8:	7853      	ldrb	r3, [r2, #1]
   186ba:	b913      	cbnz	r3, 186c2 <ll_adv_params_set+0xaa>
			pdu->len = BDADDR_SIZE;
   186bc:	2106      	movs	r1, #6
   186be:	7051      	strb	r1, [r2, #1]
	return 0;
   186c0:	461d      	mov	r5, r3
}
   186c2:	4628      	mov	r0, r5
   186c4:	b003      	add	sp, #12
   186c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   186c8:	f367 1186 	bfi	r1, r7, #6, #1
	} else if (pdu->len == 0) {
   186cc:	7873      	ldrb	r3, [r6, #1]
		pdu->rx_addr = 0;
   186ce:	f365 11c7 	bfi	r1, r5, #7, #1
   186d2:	7031      	strb	r1, [r6, #0]
	} else if (pdu->len == 0) {
   186d4:	2b00      	cmp	r3, #0
   186d6:	d1e2      	bne.n	1869e <ll_adv_params_set+0x86>
		pdu->len = BDADDR_SIZE;
   186d8:	2306      	movs	r3, #6
   186da:	e7df      	b.n	1869c <ll_adv_params_set+0x84>
		return BT_HCI_ERR_CMD_DISALLOWED;
   186dc:	250c      	movs	r5, #12
   186de:	e7f0      	b.n	186c2 <ll_adv_params_set+0xaa>
   186e0:	02060100 	.word	0x02060100
   186e4:	20003874 	.word	0x20003874

000186e8 <ull_adv_reset_finalize>:
{
   186e8:	b510      	push	{r4, lr}
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   186ea:	4c06      	ldr	r4, [pc, #24]	; (18704 <ull_adv_reset_finalize+0x1c>)
   186ec:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   186f0:	f00f f921 	bl	27936 <lll_adv_data_reset>
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   186f4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   186f8:	f00f f91d 	bl	27936 <lll_adv_data_reset>
	for (handle = 0U; handle < BT_CTLR_ADV_SET; handle++) {
   186fc:	f7ff ff46 	bl	1858c <init_reset.part.3>
}
   18700:	2000      	movs	r0, #0
   18702:	bd10      	pop	{r4, pc}
   18704:	20003874 	.word	0x20003874

00018708 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   18708:	4b03      	ldr	r3, [pc, #12]	; (18718 <ull_adv_handle_get+0x10>)
   1870a:	1ac0      	subs	r0, r0, r3
   1870c:	2350      	movs	r3, #80	; 0x50
   1870e:	fbb0 f0f3 	udiv	r0, r0, r3
}
   18712:	b280      	uxth	r0, r0
   18714:	4770      	bx	lr
   18716:	bf00      	nop
   18718:	20003874 	.word	0x20003874

0001871c <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1871c:	6800      	ldr	r0, [r0, #0]
   1871e:	4b03      	ldr	r3, [pc, #12]	; (1872c <ull_adv_lll_handle_get+0x10>)
   18720:	1ac0      	subs	r0, r0, r3
   18722:	2350      	movs	r3, #80	; 0x50
   18724:	fbb0 f0f3 	udiv	r0, r0, r3
}
   18728:	b280      	uxth	r0, r0
   1872a:	4770      	bx	lr
   1872c:	20003874 	.word	0x20003874

00018730 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   18730:	b938      	cbnz	r0, 18742 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   18732:	4805      	ldr	r0, [pc, #20]	; (18748 <ull_adv_is_enabled_get+0x18>)
   18734:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return &ll_adv[handle];
   18738:	f013 0f01 	tst.w	r3, #1
   1873c:	bf08      	it	eq
   1873e:	2000      	moveq	r0, #0
   18740:	4770      	bx	lr
		return NULL;
   18742:	2000      	movs	r0, #0
}
   18744:	4770      	bx	lr
   18746:	bf00      	nop
   18748:	20003874 	.word	0x20003874

0001874c <disable.constprop.6>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static inline uint8_t disable(uint8_t handle)
   1874c:	b530      	push	{r4, r5, lr}
	uint32_t volatile ret_cb;
	struct ll_adv_set *adv;
	void *mark;
	uint32_t ret;

	adv = ull_adv_is_enabled_get(handle);
   1874e:	2000      	movs	r0, #0
static inline uint8_t disable(uint8_t handle)
   18750:	b085      	sub	sp, #20
	adv = ull_adv_is_enabled_get(handle);
   18752:	f7ff ffed 	bl	18730 <ull_adv_is_enabled_get>
	if (!adv) {
   18756:	4604      	mov	r4, r0
   18758:	b910      	cbnz	r0, 18760 <disable.constprop.6+0x14>
		ret = ull_ticker_status_take(ret, &ret_cb);
		if (ret) {
			mark = ull_disable_unmark(adv);
			LL_ASSERT(mark == adv);

			return BT_HCI_ERR_CMD_DISALLOWED;
   1875a:	200c      	movs	r0, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
}
   1875c:	b005      	add	sp, #20
   1875e:	bd30      	pop	{r4, r5, pc}
	mark = ull_disable_mark(adv);
   18760:	f7ff fb24 	bl	17dac <ull_disable_mark>
	LL_ASSERT(mark == adv);
   18764:	4284      	cmp	r4, r0
   18766:	d00b      	beq.n	18780 <disable.constprop.6+0x34>
   18768:	f240 7296 	movw	r2, #1942	; 0x796
   1876c:	4938      	ldr	r1, [pc, #224]	; (18850 <disable.constprop.6+0x104>)
   1876e:	4839      	ldr	r0, [pc, #228]	; (18854 <disable.constprop.6+0x108>)
   18770:	f009 fbab 	bl	21eca <printk>
   18774:	4040      	eors	r0, r0
   18776:	f380 8811 	msr	BASEPRI, r0
   1877a:	f04f 0003 	mov.w	r0, #3
   1877e:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   18780:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   18784:	f013 0f01 	tst.w	r3, #1
   18788:	ad03      	add	r5, sp, #12
   1878a:	d01e      	beq.n	187ca <disable.constprop.6+0x7e>
		ret_cb = TICKER_STATUS_BUSY;
   1878c:	2302      	movs	r3, #2
   1878e:	9303      	str	r3, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   18790:	2103      	movs	r1, #3
   18792:	9500      	str	r5, [sp, #0]
   18794:	4b30      	ldr	r3, [pc, #192]	; (18858 <disable.constprop.6+0x10c>)
   18796:	2201      	movs	r2, #1
   18798:	2000      	movs	r0, #0
   1879a:	f7fd feaf 	bl	164fc <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   1879e:	4629      	mov	r1, r5
   187a0:	f7ff fae0 	bl	17d64 <ull_ticker_status_take>
		if (ret) {
   187a4:	b188      	cbz	r0, 187ca <disable.constprop.6+0x7e>
			mark = ull_disable_unmark(adv);
   187a6:	4620      	mov	r0, r4
   187a8:	f7ff fb08 	bl	17dbc <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   187ac:	4284      	cmp	r4, r0
   187ae:	d0d4      	beq.n	1875a <disable.constprop.6+0xe>
   187b0:	f240 72a1 	movw	r2, #1953	; 0x7a1
   187b4:	4926      	ldr	r1, [pc, #152]	; (18850 <disable.constprop.6+0x104>)
   187b6:	4827      	ldr	r0, [pc, #156]	; (18854 <disable.constprop.6+0x108>)
   187b8:	f009 fb87 	bl	21eca <printk>
   187bc:	4040      	eors	r0, r0
   187be:	f380 8811 	msr	BASEPRI, r0
   187c2:	f04f 0003 	mov.w	r0, #3
   187c6:	df02      	svc	2
   187c8:	e7c7      	b.n	1875a <disable.constprop.6+0xe>
	ret_cb = TICKER_STATUS_BUSY;
   187ca:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   187cc:	2103      	movs	r1, #3
   187ce:	9500      	str	r5, [sp, #0]
   187d0:	4b21      	ldr	r3, [pc, #132]	; (18858 <disable.constprop.6+0x10c>)
	ret_cb = TICKER_STATUS_BUSY;
   187d2:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   187d4:	2000      	movs	r0, #0
   187d6:	f7fd fe91 	bl	164fc <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   187da:	4629      	mov	r1, r5
   187dc:	f7ff fac2 	bl	17d64 <ull_ticker_status_take>
	if (ret) {
   187e0:	b138      	cbz	r0, 187f2 <disable.constprop.6+0xa6>
		mark = ull_disable_unmark(adv);
   187e2:	4620      	mov	r0, r4
   187e4:	f7ff faea 	bl	17dbc <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   187e8:	4284      	cmp	r4, r0
   187ea:	d0b6      	beq.n	1875a <disable.constprop.6+0xe>
   187ec:	f240 72af 	movw	r2, #1967	; 0x7af
   187f0:	e7e0      	b.n	187b4 <disable.constprop.6+0x68>
	ret = ull_disable(&adv->lll);
   187f2:	f104 001c 	add.w	r0, r4, #28
   187f6:	f7ff fb11 	bl	17e1c <ull_disable>
	LL_ASSERT(!ret);
   187fa:	b158      	cbz	r0, 18814 <disable.constprop.6+0xc8>
   187fc:	f240 72b5 	movw	r2, #1973	; 0x7b5
   18800:	4913      	ldr	r1, [pc, #76]	; (18850 <disable.constprop.6+0x104>)
   18802:	4814      	ldr	r0, [pc, #80]	; (18854 <disable.constprop.6+0x108>)
   18804:	f009 fb61 	bl	21eca <printk>
   18808:	4040      	eors	r0, r0
   1880a:	f380 8811 	msr	BASEPRI, r0
   1880e:	f04f 0003 	mov.w	r0, #3
   18812:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   18814:	4620      	mov	r0, r4
   18816:	f7ff fad1 	bl	17dbc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1881a:	4284      	cmp	r4, r0
   1881c:	d00b      	beq.n	18836 <disable.constprop.6+0xea>
   1881e:	f44f 62f7 	mov.w	r2, #1976	; 0x7b8
   18822:	490b      	ldr	r1, [pc, #44]	; (18850 <disable.constprop.6+0x104>)
   18824:	480b      	ldr	r0, [pc, #44]	; (18854 <disable.constprop.6+0x108>)
   18826:	f009 fb50 	bl	21eca <printk>
   1882a:	4040      	eors	r0, r0
   1882c:	f380 8811 	msr	BASEPRI, r0
   18830:	f04f 0003 	mov.w	r0, #3
   18834:	df02      	svc	2
	if (adv->lll.conn) {
   18836:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18838:	b113      	cbz	r3, 18840 <disable.constprop.6+0xf4>
		conn_release(adv);
   1883a:	4620      	mov	r0, r4
   1883c:	f7ff fe0c 	bl	18458 <conn_release>
	adv->is_enabled = 0U;
   18840:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   18844:	f36f 0300 	bfc	r3, #0, #1
   18848:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	return 0;
   1884c:	2000      	movs	r0, #0
   1884e:	e785      	b.n	1875c <disable.constprop.6+0x10>
   18850:	0002f3bd 	.word	0x0002f3bd
   18854:	0002a026 	.word	0x0002a026
   18858:	0001768d 	.word	0x0001768d

0001885c <ull_adv_data_set>:
{
   1885c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   18860:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   18864:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   18868:	4607      	mov	r7, r0
   1886a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   1886c:	782b      	ldrb	r3, [r5, #0]
   1886e:	f003 030f 	and.w	r3, r3, #15
   18872:	2b01      	cmp	r3, #1
{
   18874:	460e      	mov	r6, r1
   18876:	4690      	mov	r8, r2
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   18878:	d046      	beq.n	18908 <ull_adv_data_set+0xac>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1887a:	291f      	cmp	r1, #31
   1887c:	d848      	bhi.n	18910 <ull_adv_data_set+0xb4>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1887e:	f100 092c 	add.w	r9, r0, #44	; 0x2c
   18882:	f10d 0106 	add.w	r1, sp, #6
   18886:	4648      	mov	r0, r9
   18888:	f002 f834 	bl	1a8f4 <lll_adv_pdu_alloc>
   1888c:	f10d 0107 	add.w	r1, sp, #7
   18890:	4604      	mov	r4, r0
   18892:	4648      	mov	r0, r9
   18894:	f002 f82e 	bl	1a8f4 <lll_adv_pdu_alloc>
		__ASSERT((idx == idx_test), "Probable AD Data Corruption.\n");
   18898:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1889c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   188a0:	429a      	cmp	r2, r3
   188a2:	d00a      	beq.n	188ba <ull_adv_data_set+0x5e>
   188a4:	491b      	ldr	r1, [pc, #108]	; (18914 <ull_adv_data_set+0xb8>)
   188a6:	481c      	ldr	r0, [pc, #112]	; (18918 <ull_adv_data_set+0xbc>)
   188a8:	f240 52e4 	movw	r2, #1508	; 0x5e4
   188ac:	f009 fb0d 	bl	21eca <printk>
   188b0:	f240 51e4 	movw	r1, #1508	; 0x5e4
   188b4:	4817      	ldr	r0, [pc, #92]	; (18914 <ull_adv_data_set+0xb8>)
   188b6:	f009 fdba 	bl	2242e <assert_post_action>
	pdu->type = prev->type;
   188ba:	782a      	ldrb	r2, [r5, #0]
   188bc:	7823      	ldrb	r3, [r4, #0]
   188be:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0U;
   188c2:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   188c6:	7023      	strb	r3, [r4, #0]
	pdu->tx_addr = prev->tx_addr;
   188c8:	782b      	ldrb	r3, [r5, #0]
   188ca:	7822      	ldrb	r2, [r4, #0]
   188cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
   188d0:	f363 1286 	bfi	r2, r3, #6, #1
	pdu->rx_addr = prev->rx_addr;
   188d4:	4629      	mov	r1, r5
	pdu->tx_addr = prev->tx_addr;
   188d6:	7022      	strb	r2, [r4, #0]
	pdu->rx_addr = prev->rx_addr;
   188d8:	f811 3b02 	ldrb.w	r3, [r1], #2
   188dc:	4620      	mov	r0, r4
   188de:	09db      	lsrs	r3, r3, #7
   188e0:	b2d2      	uxtb	r2, r2
   188e2:	f363 12c7 	bfi	r2, r3, #7, #1
   188e6:	f800 2b02 	strb.w	r2, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   188ea:	2206      	movs	r2, #6
   188ec:	f00b fc2f 	bl	2414e <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   188f0:	4632      	mov	r2, r6
   188f2:	4641      	mov	r1, r8
   188f4:	f104 0008 	add.w	r0, r4, #8
   188f8:	f00b fc29 	bl	2414e <memcpy>
	pdu->len = BDADDR_SIZE + len;
   188fc:	3606      	adds	r6, #6
	pdu->last = idx;
   188fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
   18902:	7066      	strb	r6, [r4, #1]
   18904:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		return 0;
   18908:	2000      	movs	r0, #0
}
   1890a:	b003      	add	sp, #12
   1890c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   18910:	2012      	movs	r0, #18
   18912:	e7fa      	b.n	1890a <ull_adv_data_set+0xae>
   18914:	0002f3bd 	.word	0x0002f3bd
   18918:	0002a026 	.word	0x0002a026

0001891c <ll_adv_data_set>:
	return ull_adv_data_set(adv, len, data);
   1891c:	460a      	mov	r2, r1
   1891e:	4601      	mov	r1, r0
   18920:	4801      	ldr	r0, [pc, #4]	; (18928 <ll_adv_data_set+0xc>)
   18922:	f7ff bf9b 	b.w	1885c <ull_adv_data_set>
   18926:	bf00      	nop
   18928:	20003874 	.word	0x20003874

0001892c <ll_adv_scan_rsp_set>:
	return ull_scan_rsp_set(adv, len, data);
   1892c:	460a      	mov	r2, r1
   1892e:	4601      	mov	r1, r0
   18930:	4801      	ldr	r0, [pc, #4]	; (18938 <ll_adv_scan_rsp_set+0xc>)
   18932:	f00e bd48 	b.w	273c6 <ull_scan_rsp_set>
   18936:	bf00      	nop
   18938:	20003874 	.word	0x20003874

0001893c <ticker_cb>:
	return 0;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, void *param)
{
   1893c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1893e:	4614      	mov	r4, r2
	return ++hdr->ref;
   18940:	7c1a      	ldrb	r2, [r3, #16]
   18942:	3201      	adds	r2, #1
   18944:	b2d2      	uxtb	r2, r2
   18946:	4606      	mov	r6, r0
   18948:	460d      	mov	r5, r1
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   1894a:	f103 071c 	add.w	r7, r3, #28
   1894e:	741a      	strb	r2, [r3, #16]
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   18950:	b95a      	cbnz	r2, 1896a <ticker_cb+0x2e>
   18952:	f240 22c5 	movw	r2, #709	; 0x2c5
   18956:	4912      	ldr	r1, [pc, #72]	; (189a0 <ticker_cb+0x64>)
   18958:	4812      	ldr	r0, [pc, #72]	; (189a4 <ticker_cb+0x68>)
   1895a:	f009 fab6 	bl	21eca <printk>
   1895e:	4040      	eors	r0, r0
   18960:	f380 8811 	msr	BASEPRI, r0
   18964:	f04f 0003 	mov.w	r0, #3
   18968:	df02      	svc	2

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   1896a:	4a0f      	ldr	r2, [pc, #60]	; (189a8 <ticker_cb+0x6c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	mfy.param = &p;
   1896c:	4b0f      	ldr	r3, [pc, #60]	; (189ac <ticker_cb+0x70>)
	p.lazy = lazy;
   1896e:	8114      	strh	r4, [r2, #8]
	p.remainder = remainder;
   18970:	e9c2 6500 	strd	r6, r5, [r2]
	p.param = lll;
   18974:	60d7      	str	r7, [r2, #12]
	mfy.param = &p;
   18976:	609a      	str	r2, [r3, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   18978:	2200      	movs	r2, #0
   1897a:	4611      	mov	r1, r2
   1897c:	2001      	movs	r0, #1
   1897e:	f7fc ffe7 	bl	15950 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   18982:	b158      	cbz	r0, 1899c <ticker_cb+0x60>
   18984:	f240 22d1 	movw	r2, #721	; 0x2d1
   18988:	4905      	ldr	r1, [pc, #20]	; (189a0 <ticker_cb+0x64>)
   1898a:	4806      	ldr	r0, [pc, #24]	; (189a4 <ticker_cb+0x68>)
   1898c:	f009 fa9d 	bl	21eca <printk>
   18990:	4040      	eors	r0, r0
   18992:	f380 8811 	msr	BASEPRI, r0
   18996:	f04f 0003 	mov.w	r0, #3
   1899a:	df02      	svc	2

	DEBUG_RADIO_PREPARE_O(1);
}
   1899c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1899e:	bf00      	nop
   189a0:	0002f41d 	.word	0x0002f41d
   189a4:	0002a026 	.word	0x0002a026
   189a8:	20003924 	.word	0x20003924
   189ac:	20000b44 	.word	0x20000b44

000189b0 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   189b0:	3004      	adds	r0, #4
{
   189b2:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   189b4:	f101 021c 	add.w	r2, r1, #28
   189b8:	b2c0      	uxtb	r0, r0
   189ba:	f7ff fa69 	bl	17e90 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   189be:	b170      	cbz	r0, 189de <ull_scan_disable+0x2e>
   189c0:	3045      	adds	r0, #69	; 0x45
   189c2:	d00b      	beq.n	189dc <ull_scan_disable+0x2c>
   189c4:	f240 12c7 	movw	r2, #455	; 0x1c7
   189c8:	4905      	ldr	r1, [pc, #20]	; (189e0 <ull_scan_disable+0x30>)
   189ca:	4806      	ldr	r0, [pc, #24]	; (189e4 <ull_scan_disable+0x34>)
   189cc:	f009 fa7d 	bl	21eca <printk>
   189d0:	4040      	eors	r0, r0
   189d2:	f380 8811 	msr	BASEPRI, r0
   189d6:	f04f 0003 	mov.w	r0, #3
   189da:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   189dc:	200c      	movs	r0, #12
}
   189de:	bd08      	pop	{r3, pc}
   189e0:	0002f41d 	.word	0x0002f41d
   189e4:	0002a026 	.word	0x0002a026

000189e8 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   189e8:	6800      	ldr	r0, [r0, #0]
   189ea:	4b03      	ldr	r3, [pc, #12]	; (189f8 <ull_scan_lll_handle_get+0x10>)
   189ec:	1ac0      	subs	r0, r0, r3
   189ee:	233c      	movs	r3, #60	; 0x3c
   189f0:	fbb0 f0f3 	udiv	r0, r0, r3
}
   189f4:	b2c0      	uxtb	r0, r0
   189f6:	4770      	bx	lr
   189f8:	200038e8 	.word	0x200038e8

000189fc <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   189fc:	b938      	cbnz	r0, 18a0e <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   189fe:	4805      	ldr	r0, [pc, #20]	; (18a14 <ull_scan_is_enabled_get+0x18>)
   18a00:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
	return &ll_scan[handle];
   18a04:	f013 0f01 	tst.w	r3, #1
   18a08:	bf08      	it	eq
   18a0a:	2000      	moveq	r0, #0
   18a0c:	4770      	bx	lr
		return NULL;
   18a0e:	2000      	movs	r0, #0
}
   18a10:	4770      	bx	lr
   18a12:	bf00      	nop
   18a14:	200038e8 	.word	0x200038e8

00018a18 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   18a18:	4a04      	ldr	r2, [pc, #16]	; (18a2c <ull_scan_is_disabled_get+0x14>)
   18a1a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
   18a1e:	f003 0301 	and.w	r3, r3, #1
   18a22:	4303      	orrs	r3, r0
}
   18a24:	bf0c      	ite	eq
   18a26:	4610      	moveq	r0, r2
   18a28:	2000      	movne	r0, #0
   18a2a:	4770      	bx	lr
   18a2c:	200038e8 	.word	0x200038e8

00018a30 <pdu_len_cmp>:
		break;
	}
}

static inline bool pdu_len_cmp(uint8_t opcode, uint8_t len)
{
   18a30:	b5f0      	push	{r4, r5, r6, r7, lr}
	const uint8_t ctrl_len_lut[] = {
   18a32:	4b0d      	ldr	r3, [pc, #52]	; (18a68 <pdu_len_cmp+0x38>)
{
   18a34:	b089      	sub	sp, #36	; 0x24
   18a36:	4605      	mov	r5, r0
   18a38:	460e      	mov	r6, r1
	const uint8_t ctrl_len_lut[] = {
   18a3a:	aa01      	add	r2, sp, #4
   18a3c:	f103 0718 	add.w	r7, r3, #24
   18a40:	6818      	ldr	r0, [r3, #0]
   18a42:	6859      	ldr	r1, [r3, #4]
   18a44:	4614      	mov	r4, r2
   18a46:	c403      	stmia	r4!, {r0, r1}
   18a48:	3308      	adds	r3, #8
   18a4a:	42bb      	cmp	r3, r7
   18a4c:	4622      	mov	r2, r4
   18a4e:	d1f7      	bne.n	18a40 <pdu_len_cmp+0x10>
   18a50:	881b      	ldrh	r3, [r3, #0]
   18a52:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
   18a54:	ab08      	add	r3, sp, #32
   18a56:	441d      	add	r5, r3
   18a58:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
   18a5c:	1b83      	subs	r3, r0, r6
   18a5e:	4258      	negs	r0, r3
   18a60:	4158      	adcs	r0, r3
   18a62:	b009      	add	sp, #36	; 0x24
   18a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a66:	bf00      	nop
   18a68:	00028faa 	.word	0x00028faa

00018a6c <init_reset>:
{
   18a6c:	b508      	push	{r3, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   18a6e:	2203      	movs	r2, #3
   18a70:	4b0c      	ldr	r3, [pc, #48]	; (18aa4 <init_reset+0x38>)
   18a72:	480d      	ldr	r0, [pc, #52]	; (18aa8 <init_reset+0x3c>)
   18a74:	f44f 7196 	mov.w	r1, #300	; 0x12c
   18a78:	f00e f8df 	bl	26c3a <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   18a7c:	4b0b      	ldr	r3, [pc, #44]	; (18aac <init_reset+0x40>)
   18a7e:	2203      	movs	r2, #3
   18a80:	1d18      	adds	r0, r3, #4
   18a82:	2124      	movs	r1, #36	; 0x24
   18a84:	f00e f8d9 	bl	26c3a <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   18a88:	4b09      	ldr	r3, [pc, #36]	; (18ab0 <init_reset+0x44>)
   18a8a:	220c      	movs	r2, #12
   18a8c:	1d18      	adds	r0, r3, #4
   18a8e:	2120      	movs	r1, #32
   18a90:	f00e f8d3 	bl	26c3a <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   18a94:	4b07      	ldr	r3, [pc, #28]	; (18ab4 <init_reset+0x48>)
   18a96:	220f      	movs	r2, #15
   18a98:	1d18      	adds	r0, r3, #4
   18a9a:	2108      	movs	r1, #8
   18a9c:	f00e f8cd 	bl	26c3a <mem_init>
}
   18aa0:	2000      	movs	r0, #0
   18aa2:	bd08      	pop	{r3, pc}
   18aa4:	20003934 	.word	0x20003934
   18aa8:	20003938 	.word	0x20003938
   18aac:	20003cd0 	.word	0x20003cd0
   18ab0:	20003d40 	.word	0x20003d40
   18ab4:	20003ec4 	.word	0x20003ec4

00018ab8 <ticker_op_stop_cb>:
{
   18ab8:	b510      	push	{r4, lr}
   18aba:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18abc:	b158      	cbz	r0, 18ad6 <ticker_op_stop_cb+0x1e>
   18abe:	f240 62aa 	movw	r2, #1706	; 0x6aa
   18ac2:	490f      	ldr	r1, [pc, #60]	; (18b00 <ticker_op_stop_cb+0x48>)
   18ac4:	480f      	ldr	r0, [pc, #60]	; (18b04 <ticker_op_stop_cb+0x4c>)
   18ac6:	f009 fa00 	bl	21eca <printk>
   18aca:	4040      	eors	r0, r0
   18acc:	f380 8811 	msr	BASEPRI, r0
   18ad0:	f04f 0003 	mov.w	r0, #3
   18ad4:	df02      	svc	2
	mfy.param = param;
   18ad6:	4b0c      	ldr	r3, [pc, #48]	; (18b08 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   18ad8:	2200      	movs	r2, #0
   18ada:	4611      	mov	r1, r2
   18adc:	2002      	movs	r0, #2
	mfy.param = param;
   18ade:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   18ae0:	f7fc ff36 	bl	15950 <mayfly_enqueue>
	LL_ASSERT(!retval);
   18ae4:	b158      	cbz	r0, 18afe <ticker_op_stop_cb+0x46>
   18ae6:	f240 62b1 	movw	r2, #1713	; 0x6b1
   18aea:	4905      	ldr	r1, [pc, #20]	; (18b00 <ticker_op_stop_cb+0x48>)
   18aec:	4805      	ldr	r0, [pc, #20]	; (18b04 <ticker_op_stop_cb+0x4c>)
   18aee:	f009 f9ec 	bl	21eca <printk>
   18af2:	4040      	eors	r0, r0
   18af4:	f380 8811 	msr	BASEPRI, r0
   18af8:	f04f 0003 	mov.w	r0, #3
   18afc:	df02      	svc	2
}
   18afe:	bd10      	pop	{r4, pc}
   18b00:	0002f46e 	.word	0x0002f46e
   18b04:	0002a026 	.word	0x0002a026
   18b08:	20000c0c 	.word	0x20000c0c

00018b0c <ticker_start_conn_op_cb>:
{
   18b0c:	b510      	push	{r4, lr}
   18b0e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18b10:	b158      	cbz	r0, 18b2a <ticker_start_conn_op_cb+0x1e>
   18b12:	f240 629e 	movw	r2, #1694	; 0x69e
   18b16:	490e      	ldr	r1, [pc, #56]	; (18b50 <ticker_start_conn_op_cb+0x44>)
   18b18:	480e      	ldr	r0, [pc, #56]	; (18b54 <ticker_start_conn_op_cb+0x48>)
   18b1a:	f009 f9d6 	bl	21eca <printk>
   18b1e:	4040      	eors	r0, r0
   18b20:	f380 8811 	msr	BASEPRI, r0
   18b24:	f04f 0003 	mov.w	r0, #3
   18b28:	df02      	svc	2
	p = ull_update_unmark(param);
   18b2a:	4620      	mov	r0, r4
   18b2c:	f7ff f962 	bl	17df4 <ull_update_unmark>
	LL_ASSERT(p == param);
   18b30:	4284      	cmp	r4, r0
   18b32:	d00b      	beq.n	18b4c <ticker_start_conn_op_cb+0x40>
   18b34:	f240 62a1 	movw	r2, #1697	; 0x6a1
   18b38:	4905      	ldr	r1, [pc, #20]	; (18b50 <ticker_start_conn_op_cb+0x44>)
   18b3a:	4806      	ldr	r0, [pc, #24]	; (18b54 <ticker_start_conn_op_cb+0x48>)
   18b3c:	f009 f9c5 	bl	21eca <printk>
   18b40:	4040      	eors	r0, r0
   18b42:	f380 8811 	msr	BASEPRI, r0
   18b46:	f04f 0003 	mov.w	r0, #3
   18b4a:	df02      	svc	2
}
   18b4c:	bd10      	pop	{r4, pc}
   18b4e:	bf00      	nop
   18b50:	0002f46e 	.word	0x0002f46e
   18b54:	0002a026 	.word	0x0002a026

00018b58 <ticker_stop_conn_op_cb>:
{
   18b58:	b510      	push	{r4, lr}
   18b5a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18b5c:	b158      	cbz	r0, 18b76 <ticker_stop_conn_op_cb+0x1e>
   18b5e:	f240 6294 	movw	r2, #1684	; 0x694
   18b62:	490e      	ldr	r1, [pc, #56]	; (18b9c <ticker_stop_conn_op_cb+0x44>)
   18b64:	480e      	ldr	r0, [pc, #56]	; (18ba0 <ticker_stop_conn_op_cb+0x48>)
   18b66:	f009 f9b0 	bl	21eca <printk>
   18b6a:	4040      	eors	r0, r0
   18b6c:	f380 8811 	msr	BASEPRI, r0
   18b70:	f04f 0003 	mov.w	r0, #3
   18b74:	df02      	svc	2
	p = ull_update_mark(param);
   18b76:	4620      	mov	r0, r4
   18b78:	f7ff f934 	bl	17de4 <ull_update_mark>
	LL_ASSERT(p == param);
   18b7c:	4284      	cmp	r4, r0
   18b7e:	d00b      	beq.n	18b98 <ticker_stop_conn_op_cb+0x40>
   18b80:	f240 6297 	movw	r2, #1687	; 0x697
   18b84:	4905      	ldr	r1, [pc, #20]	; (18b9c <ticker_stop_conn_op_cb+0x44>)
   18b86:	4806      	ldr	r0, [pc, #24]	; (18ba0 <ticker_stop_conn_op_cb+0x48>)
   18b88:	f009 f99f 	bl	21eca <printk>
   18b8c:	4040      	eors	r0, r0
   18b8e:	f380 8811 	msr	BASEPRI, r0
   18b92:	f04f 0003 	mov.w	r0, #3
   18b96:	df02      	svc	2
}
   18b98:	bd10      	pop	{r4, pc}
   18b9a:	bf00      	nop
   18b9c:	0002f46e 	.word	0x0002f46e
   18ba0:	0002a026 	.word	0x0002a026

00018ba4 <ticker_update_conn_op_cb>:
{
   18ba4:	b510      	push	{r4, lr}
   18ba6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   18ba8:	b198      	cbz	r0, 18bd2 <ticker_update_conn_op_cb+0x2e>
   18baa:	f7ff f931 	bl	17e10 <ull_update_mark_get>
   18bae:	4284      	cmp	r4, r0
   18bb0:	d00f      	beq.n	18bd2 <ticker_update_conn_op_cb+0x2e>
   18bb2:	f7ff f911 	bl	17dd8 <ull_disable_mark_get>
   18bb6:	4284      	cmp	r4, r0
   18bb8:	d00b      	beq.n	18bd2 <ticker_update_conn_op_cb+0x2e>
   18bba:	f240 628d 	movw	r2, #1677	; 0x68d
   18bbe:	4905      	ldr	r1, [pc, #20]	; (18bd4 <ticker_update_conn_op_cb+0x30>)
   18bc0:	4805      	ldr	r0, [pc, #20]	; (18bd8 <ticker_update_conn_op_cb+0x34>)
   18bc2:	f009 f982 	bl	21eca <printk>
   18bc6:	4040      	eors	r0, r0
   18bc8:	f380 8811 	msr	BASEPRI, r0
   18bcc:	f04f 0003 	mov.w	r0, #3
   18bd0:	df02      	svc	2
}
   18bd2:	bd10      	pop	{r4, pc}
   18bd4:	0002f46e 	.word	0x0002f46e
   18bd8:	0002a026 	.word	0x0002a026

00018bdc <feature_rsp_send.isra.9>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   18bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18bde:	4605      	mov	r5, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18be0:	481d      	ldr	r0, [pc, #116]	; (18c58 <feature_rsp_send.isra.9+0x7c>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   18be2:	460f      	mov	r7, r1
   18be4:	4616      	mov	r6, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18be6:	f00e f84c 	bl	26c82 <mem_acquire>
	if (!tx) {
   18bea:	4604      	mov	r4, r0
   18bec:	b388      	cbz	r0, 18c52 <feature_rsp_send.isra.9+0x76>
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   18bee:	3604      	adds	r6, #4
   18bf0:	4630      	mov	r0, r6
   18bf2:	f00e fca3 	bl	2753c <feat_get>
   18bf6:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   18bfa:	4018      	ands	r0, r3
   18bfc:	f8c5 00b8 	str.w	r0, [r5, #184]	; 0xb8
		feat_land_octet0(feat_get(&req->features[0]), LL_FEAT);
   18c00:	4630      	mov	r0, r6
   18c02:	f00e fc9b 	bl	2753c <feat_get>
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   18c06:	4b15      	ldr	r3, [pc, #84]	; (18c5c <feature_rsp_send.isra.9+0x80>)
   18c08:	4003      	ands	r3, r0
	conn->llcp_feature.features_peer =
   18c0a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	conn->common.fex_valid = 1U;
   18c0e:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
   18c12:	f043 0301 	orr.w	r3, r3, #1
   18c16:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   18c1a:	7923      	ldrb	r3, [r4, #4]
   18c1c:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   18c20:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   18c22:	7123      	strb	r3, [r4, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   18c24:	2309      	movs	r3, #9
   18c26:	7163      	strb	r3, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   18c28:	71e3      	strb	r3, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   18c2a:	2100      	movs	r1, #0
   18c2c:	18a0      	adds	r0, r4, r2
   18c2e:	f00b fab8 	bl	241a2 <memset>
	feat_result = feat_to_keep & feat_octet0;
   18c32:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   18c36:	2600      	movs	r6, #0
   18c38:	f003 038e 	and.w	r3, r3, #142	; 0x8e
	dst[0] = val;
   18c3c:	7223      	strb	r3, [r4, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   18c3e:	4628      	mov	r0, r5
	dst[1] = val >> 8;
   18c40:	7266      	strb	r6, [r4, #9]
	dst[2] = val >> 16;
   18c42:	72a6      	strb	r6, [r4, #10]
   18c44:	4621      	mov	r1, r4
   18c46:	f00e fc87 	bl	27558 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   18c4a:	2301      	movs	r3, #1
   18c4c:	703b      	strb	r3, [r7, #0]
	return 0;
   18c4e:	4630      	mov	r0, r6
}
   18c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   18c52:	f06f 0036 	mvn.w	r0, #54	; 0x36
   18c56:	e7fb      	b.n	18c50 <feature_rsp_send.isra.9+0x74>
   18c58:	20003d40 	.word	0x20003d40
   18c5c:	0001ff8e 	.word	0x0001ff8e

00018c60 <reject_ext_ind_send.isra.5>:
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   18c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c62:	4605      	mov	r5, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18c64:	480d      	ldr	r0, [pc, #52]	; (18c9c <reject_ext_ind_send.isra.5+0x3c>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   18c66:	460c      	mov	r4, r1
   18c68:	4617      	mov	r7, r2
   18c6a:	461e      	mov	r6, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18c6c:	f00e f809 	bl	26c82 <mem_acquire>
	if (!tx) {
   18c70:	4601      	mov	r1, r0
   18c72:	b180      	cbz	r0, 18c96 <reject_ext_ind_send.isra.5+0x36>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18c74:	7900      	ldrb	r0, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   18c76:	720f      	strb	r7, [r1, #8]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   18c78:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18c7a:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   18c7e:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   18c80:	2311      	movs	r3, #17
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18c82:	7108      	strb	r0, [r1, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   18c84:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, tx);
   18c86:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   18c88:	724e      	strb	r6, [r1, #9]
	ctrl_tx_enqueue(conn, tx);
   18c8a:	f00e fc65 	bl	27558 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   18c8e:	2301      	movs	r3, #1
   18c90:	7023      	strb	r3, [r4, #0]
	return 0;
   18c92:	2000      	movs	r0, #0
}
   18c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   18c96:	f06f 0036 	mvn.w	r0, #54	; 0x36
   18c9a:	e7fb      	b.n	18c94 <reject_ext_ind_send.isra.5+0x34>
   18c9c:	20003d40 	.word	0x20003d40

00018ca0 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   18ca0:	4801      	ldr	r0, [pc, #4]	; (18ca8 <ll_conn_acquire+0x8>)
   18ca2:	f00d bfee 	b.w	26c82 <mem_acquire>
   18ca6:	bf00      	nop
   18ca8:	20003934 	.word	0x20003934

00018cac <ll_conn_release>:
	mem_release(conn, &conn_free);
   18cac:	4901      	ldr	r1, [pc, #4]	; (18cb4 <ll_conn_release+0x8>)
   18cae:	f00e b801 	b.w	26cb4 <mem_release>
   18cb2:	bf00      	nop
   18cb4:	20003934 	.word	0x20003934

00018cb8 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   18cb8:	f44f 7296 	mov.w	r2, #300	; 0x12c
   18cbc:	4901      	ldr	r1, [pc, #4]	; (18cc4 <ll_conn_handle_get+0xc>)
   18cbe:	f00e b811 	b.w	26ce4 <mem_index_get>
   18cc2:	bf00      	nop
   18cc4:	20003938 	.word	0x20003938

00018cc8 <tx_lll_flush>:
{
   18cc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   18ccc:	6805      	ldr	r5, [r0, #0]
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   18cce:	4c31      	ldr	r4, [pc, #196]	; (18d94 <tx_lll_flush+0xcc>)
{
   18cd0:	4606      	mov	r6, r0
	uint16_t handle = ll_conn_handle_get(conn);
   18cd2:	4628      	mov	r0, r5
   18cd4:	f7ff fff0 	bl	18cb8 <ll_conn_handle_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   18cd8:	f106 0740 	add.w	r7, r6, #64	; 0x40
	lll_conn_flush(handle, lll);
   18cdc:	4631      	mov	r1, r6
   18cde:	f00e ff68 	bl	27bb2 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   18ce2:	aa01      	add	r2, sp, #4
   18ce4:	4639      	mov	r1, r7
   18ce6:	6c70      	ldr	r0, [r6, #68]	; 0x44
   18ce8:	f00e f838 	bl	26d5c <memq_dequeue>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   18cec:	f104 0804 	add.w	r8, r4, #4
	while (link) {
   18cf0:	b9e8      	cbnz	r0, 18d2e <tx_lll_flush+0x66>
	LL_ASSERT(rx->hdr.link);
   18cf2:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
	rx = (void *)&conn->llcp_terminate.node_rx;
   18cf6:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
	LL_ASSERT(rx->hdr.link);
   18cfa:	b95b      	cbnz	r3, 18d14 <tx_lll_flush+0x4c>
   18cfc:	f240 725d 	movw	r2, #1885	; 0x75d
   18d00:	4925      	ldr	r1, [pc, #148]	; (18d98 <tx_lll_flush+0xd0>)
   18d02:	4826      	ldr	r0, [pc, #152]	; (18d9c <tx_lll_flush+0xd4>)
   18d04:	f009 f8e1 	bl	21eca <printk>
   18d08:	4040      	eors	r0, r0
   18d0a:	f380 8811 	msr	BASEPRI, r0
   18d0e:	f04f 0003 	mov.w	r0, #3
   18d12:	df02      	svc	2
	rx->hdr.link = NULL;
   18d14:	2300      	movs	r3, #0
	link = rx->hdr.link;
   18d16:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
	rx->hdr.link = NULL;
   18d1a:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	ull_rx_put(link, rx);
   18d1e:	4621      	mov	r1, r4
   18d20:	f7ff f918 	bl	17f54 <ull_rx_put>
	ull_rx_sched();
   18d24:	f7ff f926 	bl	17f74 <ull_rx_sched>
}
   18d28:	b002      	add	sp, #8
   18d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   18d2e:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   18d30:	f894 e001 	ldrb.w	lr, [r4, #1]
   18d34:	f894 c002 	ldrb.w	ip, [r4, #2]
   18d38:	7821      	ldrb	r1, [r4, #0]
	last = last + 1;
   18d3a:	1c53      	adds	r3, r2, #1
   18d3c:	b2db      	uxtb	r3, r3
		last = 0U;
   18d3e:	459e      	cmp	lr, r3
   18d40:	bf08      	it	eq
   18d42:	2300      	moveq	r3, #0
	if (last == first) {
   18d44:	459c      	cmp	ip, r3
   18d46:	d004      	beq.n	18d52 <tx_lll_flush+0x8a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   18d48:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   18d4c:	eb18 0c02 	adds.w	ip, r8, r2
   18d50:	d10e      	bne.n	18d70 <tx_lll_flush+0xa8>
   18d52:	f240 7249 	movw	r2, #1865	; 0x749
   18d56:	4910      	ldr	r1, [pc, #64]	; (18d98 <tx_lll_flush+0xd0>)
   18d58:	4810      	ldr	r0, [pc, #64]	; (18d9c <tx_lll_flush+0xd4>)
   18d5a:	f009 f8b6 	bl	21eca <printk>
   18d5e:	4040      	eors	r0, r0
   18d60:	f380 8811 	msr	BASEPRI, r0
   18d64:	f04f 0003 	mov.w	r0, #3
   18d68:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   18d6a:	2300      	movs	r3, #0
   18d6c:	801b      	strh	r3, [r3, #0]
   18d6e:	deff      	udf	#255	; 0xff
   18d70:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18d74:	f828 1002 	strh.w	r1, [r8, r2]
		lll_tx->node = tx;
   18d78:	9901      	ldr	r1, [sp, #4]
   18d7a:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   18d7e:	680a      	ldr	r2, [r1, #0]
   18d80:	6002      	str	r2, [r0, #0]
		tx->next = link;
   18d82:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   18d84:	aa01      	add	r2, sp, #4
	*last = idx; /* Commit: Update write index */
   18d86:	70e3      	strb	r3, [r4, #3]
   18d88:	4639      	mov	r1, r7
   18d8a:	6c70      	ldr	r0, [r6, #68]	; 0x44
   18d8c:	f00d ffe6 	bl	26d5c <memq_dequeue>
   18d90:	e7ae      	b.n	18cf0 <tx_lll_flush+0x28>
   18d92:	bf00      	nop
   18d94:	20000b54 	.word	0x20000b54
   18d98:	0002f46e 	.word	0x0002f46e
   18d9c:	0002a026 	.word	0x0002a026

00018da0 <ll_conn_get>:
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18da0:	4602      	mov	r2, r0
   18da2:	f44f 7196 	mov.w	r1, #300	; 0x12c
   18da6:	4801      	ldr	r0, [pc, #4]	; (18dac <ll_conn_get+0xc>)
   18da8:	f00d bf99 	b.w	26cde <mem_get>
   18dac:	20003938 	.word	0x20003938

00018db0 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   18db0:	4801      	ldr	r0, [pc, #4]	; (18db8 <ll_tx_mem_acquire+0x8>)
   18db2:	f00d bf66 	b.w	26c82 <mem_acquire>
   18db6:	bf00      	nop
   18db8:	20003cd0 	.word	0x20003cd0

00018dbc <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   18dbc:	4901      	ldr	r1, [pc, #4]	; (18dc4 <ll_tx_mem_release+0x8>)
   18dbe:	f00d bf79 	b.w	26cb4 <mem_release>
   18dc2:	bf00      	nop
   18dc4:	20003cd0 	.word	0x20003cd0

00018dc8 <ll_tx_mem_enqueue>:
{
   18dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18dcc:	4606      	mov	r6, r0
   18dce:	4688      	mov	r8, r1
	conn = ll_connected_get(handle);
   18dd0:	f00e fbe7 	bl	275a2 <ll_connected_get>
	if (!conn) {
   18dd4:	4604      	mov	r4, r0
   18dd6:	b338      	cbz	r0, 18e28 <ll_tx_mem_enqueue+0x60>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   18dd8:	4a17      	ldr	r2, [pc, #92]	; (18e38 <ll_tx_mem_enqueue+0x70>)
   18dda:	78d0      	ldrb	r0, [r2, #3]
	if (last == count) {
   18ddc:	7857      	ldrb	r7, [r2, #1]
   18dde:	7895      	ldrb	r5, [r2, #2]
   18de0:	7811      	ldrb	r1, [r2, #0]
	last = last + 1;
   18de2:	1c43      	adds	r3, r0, #1
   18de4:	b2db      	uxtb	r3, r3
		last = 0U;
   18de6:	429f      	cmp	r7, r3
   18de8:	bf08      	it	eq
   18dea:	2300      	moveq	r3, #0
	if (last == first) {
   18dec:	429d      	cmp	r5, r3
   18dee:	d01f      	beq.n	18e30 <ll_tx_mem_enqueue+0x68>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   18df0:	1d15      	adds	r5, r2, #4
   18df2:	fb10 f001 	smulbb	r0, r0, r1
	if (!lll_tx) {
   18df6:	182f      	adds	r7, r5, r0
   18df8:	d01a      	beq.n	18e30 <ll_tx_mem_enqueue+0x68>
	lll_tx->handle = handle;
   18dfa:	522e      	strh	r6, [r5, r0]
	lll_tx->node = tx;
   18dfc:	f8c7 8004 	str.w	r8, [r7, #4]
	*last = idx; /* Commit: Update write index */
   18e00:	70d3      	strb	r3, [r2, #3]
	return hdr->ref;
   18e02:	7c23      	ldrb	r3, [r4, #16]
	if (ull_ref_get(&conn->ull)) {
   18e04:	b133      	cbz	r3, 18e14 <ll_tx_mem_enqueue+0x4c>
		mfy.param = conn;
   18e06:	4b0d      	ldr	r3, [pc, #52]	; (18e3c <ll_tx_mem_enqueue+0x74>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   18e08:	2200      	movs	r2, #0
   18e0a:	2101      	movs	r1, #1
   18e0c:	2003      	movs	r0, #3
		mfy.param = conn;
   18e0e:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   18e10:	f7fc fd9e 	bl	15950 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   18e14:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   18e18:	2b00      	cmp	r3, #0
   18e1a:	da03      	bge.n	18e24 <ll_tx_mem_enqueue+0x5c>
		ull_slave_latency_cancel(conn, handle);
   18e1c:	4631      	mov	r1, r6
   18e1e:	4620      	mov	r0, r4
   18e20:	f001 f85a 	bl	19ed8 <ull_slave_latency_cancel>
	return 0;
   18e24:	2000      	movs	r0, #0
   18e26:	e001      	b.n	18e2c <ll_tx_mem_enqueue+0x64>
		return -EINVAL;
   18e28:	f06f 0015 	mvn.w	r0, #21
}
   18e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   18e30:	f06f 0036 	mvn.w	r0, #54	; 0x36
   18e34:	e7fa      	b.n	18e2c <ll_tx_mem_enqueue+0x64>
   18e36:	bf00      	nop
   18e38:	20000bd8 	.word	0x20000bd8
   18e3c:	20000bfc 	.word	0x20000bfc

00018e40 <ull_conn_reset>:
{
   18e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(err == 0 || err == -EALREADY);
   18e42:	4e16      	ldr	r6, [pc, #88]	; (18e9c <ull_conn_reset+0x5c>)
   18e44:	4f16      	ldr	r7, [pc, #88]	; (18ea0 <ull_conn_reset+0x60>)
{
   18e46:	2400      	movs	r4, #0
	conn = ll_conn_get(handle);
   18e48:	b2a0      	uxth	r0, r4
   18e4a:	f7ff ffa9 	bl	18da0 <ll_conn_get>
   18e4e:	4605      	mov	r5, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   18e50:	1d60      	adds	r0, r4, #5
   18e52:	f105 021c 	add.w	r2, r5, #28
   18e56:	4629      	mov	r1, r5
   18e58:	b2c0      	uxtb	r0, r0
   18e5a:	f7ff f819 	bl	17e90 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   18e5e:	b168      	cbz	r0, 18e7c <ull_conn_reset+0x3c>
   18e60:	3045      	adds	r0, #69	; 0x45
   18e62:	d00b      	beq.n	18e7c <ull_conn_reset+0x3c>
   18e64:	f240 62bd 	movw	r2, #1725	; 0x6bd
   18e68:	4631      	mov	r1, r6
   18e6a:	4638      	mov	r0, r7
   18e6c:	f009 f82d 	bl	21eca <printk>
   18e70:	4040      	eors	r0, r0
   18e72:	f380 8811 	msr	BASEPRI, r0
   18e76:	f04f 0003 	mov.w	r0, #3
   18e7a:	df02      	svc	2
	conn->lll.link_tx_free = NULL;
   18e7c:	3401      	adds	r4, #1
   18e7e:	2300      	movs	r3, #0
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   18e80:	2c03      	cmp	r4, #3
	conn->lll.link_tx_free = NULL;
   18e82:	66eb      	str	r3, [r5, #108]	; 0x6c
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   18e84:	d1e0      	bne.n	18e48 <ull_conn_reset+0x8>
	MFIFO_INIT(conn_tx);
   18e86:	4a07      	ldr	r2, [pc, #28]	; (18ea4 <ull_conn_reset+0x64>)
   18e88:	8053      	strh	r3, [r2, #2]
	MFIFO_INIT(conn_ack);
   18e8a:	4a07      	ldr	r2, [pc, #28]	; (18ea8 <ull_conn_reset+0x68>)
   18e8c:	8053      	strh	r3, [r2, #2]
	conn_upd_curr = NULL;
   18e8e:	4a07      	ldr	r2, [pc, #28]	; (18eac <ull_conn_reset+0x6c>)
   18e90:	6013      	str	r3, [r2, #0]
}
   18e92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	err = init_reset();
   18e96:	f7ff bde9 	b.w	18a6c <init_reset>
   18e9a:	bf00      	nop
   18e9c:	0002f46e 	.word	0x0002f46e
   18ea0:	0002a026 	.word	0x0002a026
   18ea4:	20000bd8 	.word	0x20000bd8
   18ea8:	20000b54 	.word	0x20000b54
   18eac:	20003cbc 	.word	0x20003cbc

00018eb0 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   18eb0:	688b      	ldr	r3, [r1, #8]
   18eb2:	689b      	ldr	r3, [r3, #8]
{
   18eb4:	b510      	push	{r4, lr}
	switch (lll->role) {
   18eb6:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   18eba:	09e4      	lsrs	r4, r4, #7
{
   18ebc:	460a      	mov	r2, r1
	switch (lll->role) {
   18ebe:	d004      	beq.n	18eca <ull_conn_setup+0x1a>
		ull_slave_setup(link, rx, ftr, lll);
   18ec0:	3208      	adds	r2, #8
}
   18ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   18ec6:	f7e8 ba1b 	b.w	1300 <ull_slave_setup>
		LL_ASSERT(0);
   18eca:	f240 321b 	movw	r2, #795	; 0x31b
   18ece:	4905      	ldr	r1, [pc, #20]	; (18ee4 <ull_conn_setup+0x34>)
   18ed0:	4805      	ldr	r0, [pc, #20]	; (18ee8 <ull_conn_setup+0x38>)
   18ed2:	f008 fffa 	bl	21eca <printk>
   18ed6:	4040      	eors	r0, r0
   18ed8:	f380 8811 	msr	BASEPRI, r0
   18edc:	f04f 0003 	mov.w	r0, #3
   18ee0:	df02      	svc	2
}
   18ee2:	bd10      	pop	{r4, pc}
   18ee4:	0002f46e 	.word	0x0002f46e
   18ee8:	0002a026 	.word	0x0002a026

00018eec <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   18eec:	680b      	ldr	r3, [r1, #0]
{
   18eee:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ef2:	4607      	mov	r7, r0
	conn = ll_connected_get((*rx)->hdr.handle);
   18ef4:	88d8      	ldrh	r0, [r3, #6]
{
   18ef6:	460e      	mov	r6, r1
	conn = ll_connected_get((*rx)->hdr.handle);
   18ef8:	f00e fb53 	bl	275a2 <ll_connected_get>
	if (!conn) {
   18efc:	6835      	ldr	r5, [r6, #0]
   18efe:	4604      	mov	r4, r0
   18f00:	b910      	cbnz	r0, 18f08 <ull_conn_rx+0x1c>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   18f02:	2301      	movs	r3, #1
   18f04:	712b      	strb	r3, [r5, #4]
	return 0;
   18f06:	e049      	b.n	18f9c <ull_conn_rx+0xb0>
	switch (pdu_rx->ll_id) {
   18f08:	7f28      	ldrb	r0, [r5, #28]
   18f0a:	f3c0 0001 	ubfx	r0, r0, #0, #2
   18f0e:	b2c3      	uxtb	r3, r0
   18f10:	b240      	sxtb	r0, r0
   18f12:	2800      	cmp	r0, #0
   18f14:	f000 846c 	beq.w	197f0 <ull_conn_rx+0x904>
   18f18:	2b02      	cmp	r3, #2
   18f1a:	d93f      	bls.n	18f9c <ull_conn_rx+0xb0>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   18f1c:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   18f20:	f105 091c 	add.w	r9, r5, #28

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   18f24:	f1b8 0f11 	cmp.w	r8, #17
   18f28:	f200 844c 	bhi.w	197c4 <ull_conn_rx+0x8d8>
   18f2c:	e8df f018 	tbh	[pc, r8, lsl #1]
   18f30:	008a0012 	.word	0x008a0012
   18f34:	044a00bd 	.word	0x044a00bd
   18f38:	044a044a 	.word	0x044a044a
   18f3c:	03be044a 	.word	0x03be044a
   18f40:	00e500c9 	.word	0x00e500c9
   18f44:	044a044a 	.word	0x044a044a
   18f48:	044a0107 	.word	0x044a0107
   18f4c:	015f00dd 	.word	0x015f00dd
   18f50:	036002ce 	.word	0x036002ce
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   18f54:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   18f58:	2b00      	cmp	r3, #0
   18f5a:	f280 8433 	bge.w	197c4 <ull_conn_rx+0x8d8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   18f5e:	7f69      	ldrb	r1, [r5, #29]
   18f60:	2000      	movs	r0, #0
   18f62:	f7ff fd65 	bl	18a30 <pdu_len_cmp>
		if (!conn->lll.role ||
   18f66:	2800      	cmp	r0, #0
   18f68:	f000 842c 	beq.w	197c4 <ull_conn_rx+0x8d8>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   18f6c:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   18f70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   18f72:	1ad3      	subs	r3, r2, r3
   18f74:	041b      	lsls	r3, r3, #16
   18f76:	d503      	bpl.n	18f80 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   18f78:	2301      	movs	r3, #1
   18f7a:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   18f7c:	2328      	movs	r3, #40	; 0x28
   18f7e:	e00b      	b.n	18f98 <ull_conn_rx+0xac>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   18f80:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   18f84:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
   18f88:	1a5b      	subs	r3, r3, r1
   18f8a:	f003 0303 	and.w	r3, r3, #3
   18f8e:	2b02      	cmp	r3, #2
   18f90:	d106      	bne.n	18fa0 <ull_conn_rx+0xb4>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   18f92:	2301      	movs	r3, #1
   18f94:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   18f96:	232a      	movs	r3, #42	; 0x2a
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = chan_map_upd_recv(conn, *rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_peer = err;
   18f98:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
	return 0;
   18f9c:	2000      	movs	r0, #0
   18f9e:	e0e1      	b.n	19164 <ull_conn_rx+0x278>
	if (!conn_upd_curr) {
   18fa0:	4bc4      	ldr	r3, [pc, #784]	; (192b4 <ull_conn_rx+0x3c8>)
   18fa2:	6819      	ldr	r1, [r3, #0]
   18fa4:	b901      	cbnz	r1, 18fa8 <ull_conn_rx+0xbc>
		conn_upd_curr = conn;
   18fa6:	601c      	str	r4, [r3, #0]
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   18fa8:	f895 3020 	ldrb.w	r3, [r5, #32]
   18fac:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   18fb0:	f8b5 1021 	ldrh.w	r1, [r5, #33]	; 0x21
   18fb4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   18fb8:	434b      	muls	r3, r1
	conn->llcp_cu.win_offset_us =
   18fba:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   18fbe:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   18fc2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   18fc6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   18fca:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   18fce:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   18fd2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   18fd6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   18fda:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   18fde:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   18fe2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   18fe6:	f8a4 2090 	strh.w	r2, [r4, #144]	; 0x90
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   18fea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.timeout =
   18fee:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   18ff2:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
   18ff6:	f023 0307 	bic.w	r3, r3, #7
   18ffa:	f043 0304 	orr.w	r3, r3, #4
   18ffe:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
	conn->llcp_cu.ack--;
   19002:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   19006:	3b01      	subs	r3, #1
   19008:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
	link->mem = conn->llcp_rx;
   1900c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   19010:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   19012:	6833      	ldr	r3, [r6, #0]
   19014:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   19016:	6833      	ldr	r3, [r6, #0]
   19018:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	*rx = NULL;
   1901c:	2300      	movs	r3, #0
   1901e:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   19020:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   19024:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   19028:	4293      	cmp	r3, r2
   1902a:	d007      	beq.n	1903c <ull_conn_rx+0x150>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   1902c:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   19030:	f003 0307 	and.w	r3, r3, #7
   19034:	2b04      	cmp	r3, #4
   19036:	d101      	bne.n	1903c <ull_conn_rx+0x150>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   19038:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   1903c:	2000      	movs	r0, #0
   1903e:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
		break;
   19042:	e08f      	b.n	19164 <ull_conn_rx+0x278>
		if (!conn->lll.role ||
   19044:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   19048:	2b00      	cmp	r3, #0
   1904a:	f280 83bb 	bge.w	197c4 <ull_conn_rx+0x8d8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   1904e:	7f69      	ldrb	r1, [r5, #29]
   19050:	2001      	movs	r0, #1
   19052:	f7ff fced 	bl	18a30 <pdu_len_cmp>
		if (!conn->lll.role ||
   19056:	2800      	cmp	r0, #0
   19058:	f000 83b4 	beq.w	197c4 <ull_conn_rx+0x8d8>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1905c:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   19060:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   19062:	1af3      	subs	r3, r6, r3
   19064:	0418      	lsls	r0, r3, #16
   19066:	d487      	bmi.n	18f78 <ull_conn_rx+0x8c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   19068:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1906c:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
   19070:	1a9b      	subs	r3, r3, r2
   19072:	f003 0303 	and.w	r3, r3, #3
   19076:	2b02      	cmp	r3, #2
   19078:	d08b      	beq.n	18f92 <ull_conn_rx+0xa6>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   1907a:	2205      	movs	r2, #5
   1907c:	f105 0120 	add.w	r1, r5, #32
   19080:	f104 0091 	add.w	r0, r4, #145	; 0x91
   19084:	f00b f863 	bl	2414e <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   19088:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
	conn->llcp.chan_map.instant = instant;
   1908c:	f8a4 6096 	strh.w	r6, [r4, #150]	; 0x96
	conn->llcp.chan_map.initiate = 0U;
   19090:	f36f 0300 	bfc	r3, #0, #1
   19094:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
	conn->llcp_type = LLCP_CHAN_MAP;
   19098:	2302      	movs	r3, #2
   1909a:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	conn->llcp_ack -= 2U;
   1909e:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
   190a2:	3b02      	subs	r3, #2
   190a4:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   190a8:	e72b      	b.n	18f02 <ull_conn_rx+0x16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   190aa:	7f69      	ldrb	r1, [r5, #29]
   190ac:	2002      	movs	r0, #2
   190ae:	f7ff fcbf 	bl	18a30 <pdu_len_cmp>
   190b2:	2800      	cmp	r0, #0
   190b4:	f000 8386 	beq.w	197c4 <ull_conn_rx+0x8d8>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   190b8:	f895 3020 	ldrb.w	r3, [r5, #32]
   190bc:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   190c0:	e71f      	b.n	18f02 <ull_conn_rx+0x16>
		if (!conn->lll.role ||
   190c2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   190c6:	2b00      	cmp	r3, #0
   190c8:	f280 837c 	bge.w	197c4 <ull_conn_rx+0x8d8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   190cc:	7f69      	ldrb	r1, [r5, #29]
   190ce:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   190d0:	f7ff fcae 	bl	18a30 <pdu_len_cmp>
		if (conn->lll.role ||
   190d4:	2800      	cmp	r0, #0
   190d6:	f000 8375 	beq.w	197c4 <ull_conn_rx+0x8d8>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   190da:	464a      	mov	r2, r9
   190dc:	1d29      	adds	r1, r5, #4
   190de:	4620      	mov	r0, r4
}
   190e0:	b001      	add	sp, #4
   190e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   190e6:	f7ff bd79 	b.w	18bdc <feature_rsp_send.isra.9>
		if (conn->lll.role ||
   190ea:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   190ee:	2b00      	cmp	r3, #0
   190f0:	f2c0 8368 	blt.w	197c4 <ull_conn_rx+0x8d8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   190f4:	7f69      	ldrb	r1, [r5, #29]
   190f6:	200e      	movs	r0, #14
   190f8:	e7ea      	b.n	190d0 <ull_conn_rx+0x1e4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   190fa:	7f69      	ldrb	r1, [r5, #29]
   190fc:	2009      	movs	r0, #9
   190fe:	f7ff fc97 	bl	18a30 <pdu_len_cmp>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   19102:	2800      	cmp	r0, #0
   19104:	f000 835e 	beq.w	197c4 <ull_conn_rx+0x8d8>
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   19108:	3520      	adds	r5, #32
   1910a:	4628      	mov	r0, r5
   1910c:	f00e fa16 	bl	2753c <feat_get>
   19110:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   19114:	4018      	ands	r0, r3
   19116:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		feat_land_octet0(feat_get(&rsp->features[0]), LL_FEAT);
   1911a:	4628      	mov	r0, r5
   1911c:	f00e fa0e 	bl	2753c <feat_get>
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   19120:	4b65      	ldr	r3, [pc, #404]	; (192b8 <ull_conn_rx+0x3cc>)
   19122:	4003      	ands	r3, r0
	conn->llcp_feature.features_peer =
   19124:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	conn->common.fex_valid = 1U;
   19128:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   1912c:	f043 0301 	orr.w	r3, r3, #1
   19130:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
	conn->llcp_feature.ack = conn->llcp_feature.req;
   19134:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   19138:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
	conn->procedure_expire = 0U;
   1913c:	e77e      	b.n	1903c <ull_conn_rx+0x150>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   1913e:	7f69      	ldrb	r1, [r5, #29]
   19140:	200c      	movs	r0, #12
   19142:	f7ff fc75 	bl	18a30 <pdu_len_cmp>
   19146:	2800      	cmp	r0, #0
   19148:	f000 833c 	beq.w	197c4 <ull_conn_rx+0x8d8>
	if (!conn->llcp_version.tx) {
   1914c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   19150:	f013 0601 	ands.w	r6, r3, #1
   19154:	d140      	bne.n	191d8 <ull_conn_rx+0x2ec>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19156:	4859      	ldr	r0, [pc, #356]	; (192bc <ull_conn_rx+0x3d0>)
   19158:	f00d fd93 	bl	26c82 <mem_acquire>
		if (!tx) {
   1915c:	4601      	mov	r1, r0
   1915e:	b920      	cbnz	r0, 1916a <ull_conn_rx+0x27e>
			return -ENOBUFS;
   19160:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   19164:	b001      	add	sp, #4
   19166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->llcp_version.tx = 1U;
   1916a:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   1916e:	f043 0301 	orr.w	r3, r3, #1
   19172:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19176:	7903      	ldrb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   19178:	7286      	strb	r6, [r0, #10]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1917a:	f043 0303 	orr.w	r3, r3, #3
   1917e:	7103      	strb	r3, [r0, #4]
		pdu_tx->len =
   19180:	2306      	movs	r3, #6
   19182:	7143      	strb	r3, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   19184:	230c      	movs	r3, #12
   19186:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   19188:	230b      	movs	r3, #11
   1918a:	7203      	strb	r3, [r0, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1918c:	2359      	movs	r3, #89	; 0x59
   1918e:	7243      	strb	r3, [r0, #9]
		v->sub_version_number =
   19190:	f04f 33ff 	mov.w	r3, #4294967295
   19194:	72c3      	strb	r3, [r0, #11]
   19196:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, tx);
   19198:	4620      	mov	r0, r4
   1919a:	f00e f9dd 	bl	27558 <ctrl_tx_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1919e:	2301      	movs	r3, #1
   191a0:	712b      	strb	r3, [r5, #4]
	conn->llcp_version.version_number = v->version_number;
   191a2:	f895 3020 	ldrb.w	r3, [r5, #32]
   191a6:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   191aa:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   191ae:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   191b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   191b6:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
		sys_le16_to_cpu(v->sub_version_number);
   191ba:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   191be:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   191c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_version.sub_version_number =
   191c6:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
	conn->llcp_version.rx = 1U;
   191ca:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   191ce:	f043 0302 	orr.w	r3, r3, #2
   191d2:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	return 0;
   191d6:	e6e1      	b.n	18f9c <ull_conn_rx+0xb0>
	} else if (!conn->llcp_version.rx) {
   191d8:	f013 0302 	ands.w	r3, r3, #2
   191dc:	f47f ae91 	bne.w	18f02 <ull_conn_rx+0x16>
		conn->llcp_version.ack = conn->llcp_version.req;
   191e0:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   191e4:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
		conn->procedure_expire = 0U;
   191e8:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
   191ec:	e7d9      	b.n	191a2 <ull_conn_rx+0x2b6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   191ee:	7f69      	ldrb	r1, [r5, #29]
   191f0:	200f      	movs	r0, #15
   191f2:	f7ff fc1d 	bl	18a30 <pdu_len_cmp>
   191f6:	2800      	cmp	r0, #0
   191f8:	f000 82e4 	beq.w	197c4 <ull_conn_rx+0x8d8>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   191fc:	4b2d      	ldr	r3, [pc, #180]	; (192b4 <ull_conn_rx+0x3c8>)
   191fe:	6818      	ldr	r0, [r3, #0]
   19200:	b150      	cbz	r0, 19218 <ull_conn_rx+0x32c>
   19202:	4284      	cmp	r4, r0
   19204:	d008      	beq.n	19218 <ull_conn_rx+0x32c>
			nack = reject_ext_ind_send(conn, *rx,
   19206:	2320      	movs	r3, #32
				nack = reject_ext_ind_send(conn, *rx,
   19208:	220f      	movs	r2, #15
				nack = reject_ext_ind_send(conn, *rx,
   1920a:	1d29      	adds	r1, r5, #4
   1920c:	4620      	mov	r0, r4
}
   1920e:	b001      	add	sp, #4
   19210:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   19214:	f7ff bd24 	b.w	18c60 <reject_ext_ind_send.isra.5>
		if (!conn->lll.role) {
   19218:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   1921c:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   19220:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   19224:	2900      	cmp	r1, #0
   19226:	f2c0 80b3 	blt.w	19390 <ull_conn_rx+0x4a4>
			if ((conn->llcp_conn_param.req !=
   1922a:	429a      	cmp	r2, r3
   1922c:	d009      	beq.n	19242 <ull_conn_rx+0x356>
			    ((conn->llcp_conn_param.state ==
   1922e:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
					conn->llcp_conn_param.ack) &&
   19232:	f013 0307 	ands.w	r3, r3, #7
   19236:	d002      	beq.n	1923e <ull_conn_rx+0x352>
			      LLCP_CPR_STATE_REQ) ||
   19238:	3b04      	subs	r3, #4
   1923a:	2b01      	cmp	r3, #1
   1923c:	d801      	bhi.n	19242 <ull_conn_rx+0x356>
				nack = reject_ext_ind_send(conn, *rx,
   1923e:	2323      	movs	r3, #35	; 0x23
   19240:	e7e2      	b.n	19208 <ull_conn_rx+0x31c>
			} else if (((conn->llcp_req - conn->llcp_ack) &
   19242:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   19246:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
   1924a:	1a5b      	subs	r3, r3, r1
   1924c:	f003 0303 	and.w	r3, r3, #3
   19250:	2b02      	cmp	r3, #2
   19252:	d101      	bne.n	19258 <ull_conn_rx+0x36c>
				nack = reject_ext_ind_send(conn, *rx,
   19254:	232a      	movs	r3, #42	; 0x2a
   19256:	e7d7      	b.n	19208 <ull_conn_rx+0x31c>
				uint16_t interval_min =
   19258:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   1925c:	fa1f f38a 	uxth.w	r3, sl
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   19260:	2b05      	cmp	r3, #5
   19262:	d924      	bls.n	192ae <ull_conn_rx+0x3c2>
				uint16_t interval_max =
   19264:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   19268:	fa1f f189 	uxth.w	r1, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1926c:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   19270:	d81d      	bhi.n	192ae <ull_conn_rx+0x3c2>
				    (interval_max > 3200) ||
   19272:	428b      	cmp	r3, r1
   19274:	d81b      	bhi.n	192ae <ull_conn_rx+0x3c2>
				uint16_t latency =
   19276:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   1927a:	fa1f f788 	uxth.w	r7, r8
				    (interval_min > interval_max) ||
   1927e:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   19282:	d214      	bcs.n	192ae <ull_conn_rx+0x3c2>
				uint16_t timeout =
   19284:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   19288:	fa1f f38e 	uxth.w	r3, lr
				    (latency > 499) ||
   1928c:	f1a3 0c0a 	sub.w	ip, r3, #10
   19290:	fa1f fc8c 	uxth.w	ip, ip
   19294:	f640 4b76 	movw	fp, #3190	; 0xc76
   19298:	45dc      	cmp	ip, fp
   1929a:	d808      	bhi.n	192ae <ull_conn_rx+0x3c2>
				     ((latency + 1) * interval_max)) ||
   1929c:	fb07 1c01 	mla	ip, r7, r1, r1
				    (timeout > 3200) ||
   192a0:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   192a4:	d203      	bcs.n	192ae <ull_conn_rx+0x3c2>
					cpr->preferred_periodicity;
   192a6:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
				     ((latency + 1) * interval_max)) ||
   192aa:	4561      	cmp	r1, ip
   192ac:	d208      	bcs.n	192c0 <ull_conn_rx+0x3d4>
				nack = reject_ext_ind_send(conn, *rx,
   192ae:	231e      	movs	r3, #30
   192b0:	e7aa      	b.n	19208 <ull_conn_rx+0x31c>
   192b2:	bf00      	nop
   192b4:	20003cbc 	.word	0x20003cbc
   192b8:	0001ff8e 	.word	0x0001ff8e
   192bc:	20003d40 	.word	0x20003d40
				conn->llcp_conn_param.interval_min =
   192c0:	f8a4 a0f0 	strh.w	sl, [r4, #240]	; 0xf0
				conn->llcp_conn_param.interval_max =
   192c4:	f8a4 90f2 	strh.w	r9, [r4, #242]	; 0xf2
				conn->llcp_conn_param.latency =	latency;
   192c8:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
				conn->llcp_conn_param.timeout =	timeout;
   192cc:	f8a4 e0f6 	strh.w	lr, [r4, #246]	; 0xf6
				conn->llcp_conn_param.preferred_periodicity =
   192d0:	f884 c0f8 	strb.w	ip, [r4, #248]	; 0xf8
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   192d4:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   192d8:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
   192dc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   192e0:	f8a4 c0fa 	strh.w	ip, [r4, #250]	; 0xfa
					sys_le16_to_cpu(cpr->offset0);
   192e4:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   192e8:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
   192ec:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   192f0:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
					sys_le16_to_cpu(cpr->offset1);
   192f4:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   192f8:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   192fc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   19300:	f8a4 c0fe 	strh.w	ip, [r4, #254]	; 0xfe
					sys_le16_to_cpu(cpr->offset2);
   19304:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   19308:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
   1930c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   19310:	f8a4 c100 	strh.w	ip, [r4, #256]	; 0x100
					sys_le16_to_cpu(cpr->offset3);
   19314:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   19318:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
   1931c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   19320:	f8a4 c102 	strh.w	ip, [r4, #258]	; 0x102
					sys_le16_to_cpu(cpr->offset4);
   19324:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
   19328:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1932c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   19330:	f8a4 c104 	strh.w	ip, [r4, #260]	; 0x104
					sys_le16_to_cpu(cpr->offset5);
   19334:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
   19338:	f895 5036 	ldrb.w	r5, [r5, #54]	; 0x36
   1933c:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
				conn->llcp_conn_param.offset5 =
   19340:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
				     lll->interval) ||
   19344:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
				if ((conn->llcp_conn_param.interval_max !=
   19346:	42a9      	cmp	r1, r5
   19348:	d112      	bne.n	19370 <ull_conn_rx+0x484>
				     lll->interval) ||
   1934a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1934c:	42b9      	cmp	r1, r7
   1934e:	d10f      	bne.n	19370 <ull_conn_rx+0x484>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   19350:	f240 41e2 	movw	r1, #1250	; 0x4e2
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   19354:	4369      	muls	r1, r5
   19356:	f242 7510 	movw	r5, #10000	; 0x2710
   1935a:	fb05 1303 	mla	r3, r5, r3, r1
   1935e:	3b01      	subs	r3, #1
   19360:	fbb3 f3f1 	udiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   19364:	f8b4 1076 	ldrh.w	r1, [r4, #118]	; 0x76
   19368:	b29b      	uxth	r3, r3
   1936a:	4299      	cmp	r1, r3
   1936c:	f000 8095 	beq.w	1949a <ull_conn_rx+0x5ae>
				conn->llcp_conn_param.state =
   19370:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   19374:	2103      	movs	r1, #3
   19376:	f361 0302 	bfi	r3, r1, #0, #3
   1937a:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
			conn->llcp_conn_param.ack--;
   1937e:	3a01      	subs	r2, #1
   19380:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
			if (!conn_upd_curr) {
   19384:	2800      	cmp	r0, #0
   19386:	f47f ae09 	bne.w	18f9c <ull_conn_rx+0xb0>
				conn_upd_curr = conn;
   1938a:	4bc5      	ldr	r3, [pc, #788]	; (196a0 <ull_conn_rx+0x7b4>)
   1938c:	601c      	str	r4, [r3, #0]
   1938e:	e6e9      	b.n	19164 <ull_conn_rx+0x278>
		} else if ((conn->llcp_conn_param.req ==
   19390:	429a      	cmp	r2, r3
   19392:	d004      	beq.n	1939e <ull_conn_rx+0x4b2>
			    conn->llcp_conn_param.ack) ||
   19394:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   19398:	0799      	lsls	r1, r3, #30
   1939a:	f040 808a 	bne.w	194b2 <ull_conn_rx+0x5c6>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1939e:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   193a2:	fa1f f38a 	uxth.w	r3, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   193a6:	2b05      	cmp	r3, #5
   193a8:	d981      	bls.n	192ae <ull_conn_rx+0x3c2>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   193aa:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   193ae:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   193b2:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   193b6:	f63f af7a 	bhi.w	192ae <ull_conn_rx+0x3c2>
			    (interval_max > 3200) ||
   193ba:	428b      	cmp	r3, r1
   193bc:	f63f af77 	bhi.w	192ae <ull_conn_rx+0x3c2>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   193c0:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   193c4:	fa1f f788 	uxth.w	r7, r8
			    (interval_min > interval_max) ||
   193c8:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   193cc:	f4bf af6f 	bcs.w	192ae <ull_conn_rx+0x3c2>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   193d0:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   193d4:	fa1f f38e 	uxth.w	r3, lr
			    (latency > 499) ||
   193d8:	f1a3 0c0a 	sub.w	ip, r3, #10
   193dc:	fa1f fc8c 	uxth.w	ip, ip
   193e0:	f640 4b76 	movw	fp, #3190	; 0xc76
   193e4:	45dc      	cmp	ip, fp
   193e6:	f63f af62 	bhi.w	192ae <ull_conn_rx+0x3c2>
			     ((latency + 1) * interval_max)) ||
   193ea:	fb07 1c01 	mla	ip, r7, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   193ee:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   193f2:	f4bf af5c 	bcs.w	192ae <ull_conn_rx+0x3c2>
				cpr->preferred_periodicity;
   193f6:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   193fa:	4561      	cmp	r1, ip
   193fc:	f4ff af57 	bcc.w	192ae <ull_conn_rx+0x3c2>
			conn->llcp_conn_param.interval_min = interval_min;
   19400:	f8a4 a0f0 	strh.w	sl, [r4, #240]	; 0xf0
			conn->llcp_conn_param.interval_max = interval_max;
   19404:	f8a4 90f2 	strh.w	r9, [r4, #242]	; 0xf2
			conn->llcp_conn_param.latency =	latency;
   19408:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
			conn->llcp_conn_param.timeout =	timeout;
   1940c:	f8a4 e0f6 	strh.w	lr, [r4, #246]	; 0xf6
			conn->llcp_conn_param.preferred_periodicity =
   19410:	f884 c0f8 	strb.w	ip, [r4, #248]	; 0xf8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   19414:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   19418:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
   1941c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   19420:	f8a4 c0fa 	strh.w	ip, [r4, #250]	; 0xfa
				sys_le16_to_cpu(cpr->offset0);
   19424:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   19428:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
   1942c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   19430:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
				sys_le16_to_cpu(cpr->offset1);
   19434:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   19438:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   1943c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   19440:	f8a4 c0fe 	strh.w	ip, [r4, #254]	; 0xfe
				sys_le16_to_cpu(cpr->offset2);
   19444:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   19448:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
   1944c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   19450:	f8a4 c100 	strh.w	ip, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->offset3);
   19454:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   19458:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
   1945c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   19460:	f8a4 c102 	strh.w	ip, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset4);
   19464:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
   19468:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1946c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   19470:	f8a4 c104 	strh.w	ip, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset5);
   19474:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
   19478:	f895 5036 	ldrb.w	r5, [r5, #54]	; 0x36
   1947c:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
			conn->llcp_conn_param.offset5 =
   19480:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
			     lll->interval) ||
   19484:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
			if ((conn->llcp_conn_param.interval_max !=
   19486:	42a9      	cmp	r1, r5
   19488:	f47f af72 	bne.w	19370 <ull_conn_rx+0x484>
			     lll->interval) ||
   1948c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
   1948e:	42bd      	cmp	r5, r7
   19490:	f47f af6e 	bne.w	19370 <ull_conn_rx+0x484>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   19494:	f240 45e2 	movw	r5, #1250	; 0x4e2
   19498:	e75c      	b.n	19354 <ull_conn_rx+0x468>
				conn->llcp_conn_param.state =
   1949a:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   1949e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   194a2:	f043 0301 	orr.w	r3, r3, #1
   194a6:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   194aa:	6833      	ldr	r3, [r6, #0]
   194ac:	2101      	movs	r1, #1
   194ae:	7119      	strb	r1, [r3, #4]
   194b0:	e765      	b.n	1937e <ull_conn_rx+0x492>
			LL_ASSERT(0);
   194b2:	f241 7205 	movw	r2, #5893	; 0x1705
   194b6:	497b      	ldr	r1, [pc, #492]	; (196a4 <ull_conn_rx+0x7b8>)
   194b8:	487b      	ldr	r0, [pc, #492]	; (196a8 <ull_conn_rx+0x7bc>)
   194ba:	f008 fd06 	bl	21eca <printk>
   194be:	4040      	eors	r0, r0
   194c0:	f380 8811 	msr	BASEPRI, r0
   194c4:	f04f 0003 	mov.w	r0, #3
   194c8:	df02      	svc	2
   194ca:	e567      	b.n	18f9c <ull_conn_rx+0xb0>
		if (conn->lll.role ||
   194cc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   194d0:	2b00      	cmp	r3, #0
   194d2:	f2c0 8177 	blt.w	197c4 <ull_conn_rx+0x8d8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   194d6:	7f69      	ldrb	r1, [r5, #29]
   194d8:	2010      	movs	r0, #16
   194da:	f7ff faa9 	bl	18a30 <pdu_len_cmp>
		if (conn->lll.role ||
   194de:	2800      	cmp	r0, #0
   194e0:	f000 8170 	beq.w	197c4 <ull_conn_rx+0x8d8>
		if (!conn->lll.role &&
   194e4:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   194e8:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   194ec:	429a      	cmp	r2, r3
   194ee:	d07b      	beq.n	195e8 <ull_conn_rx+0x6fc>
		    (conn->llcp_conn_param.state ==
   194f0:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
		     conn->llcp_conn_param.ack) &&
   194f4:	f003 0307 	and.w	r3, r3, #7
   194f8:	2b04      	cmp	r3, #4
   194fa:	d175      	bne.n	195e8 <ull_conn_rx+0x6fc>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   194fc:	f8b5 e020 	ldrh.w	lr, [r5, #32]
   19500:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   19504:	2a05      	cmp	r2, #5
   19506:	d920      	bls.n	1954a <ull_conn_rx+0x65e>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   19508:	f8b5 c022 	ldrh.w	ip, [r5, #34]	; 0x22
   1950c:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   19510:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   19514:	d819      	bhi.n	1954a <ull_conn_rx+0x65e>
			    (interval_max > 3200) ||
   19516:	429a      	cmp	r2, r3
   19518:	d817      	bhi.n	1954a <ull_conn_rx+0x65e>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1951a:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   1951c:	b2ba      	uxth	r2, r7
			    (interval_min > interval_max) ||
   1951e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   19522:	d212      	bcs.n	1954a <ull_conn_rx+0x65e>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   19524:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   19526:	fa1f f880 	uxth.w	r8, r0
			    (latency > 499) ||
   1952a:	f1a8 010a 	sub.w	r1, r8, #10
   1952e:	b289      	uxth	r1, r1
   19530:	f640 4976 	movw	r9, #3190	; 0xc76
   19534:	4549      	cmp	r1, r9
   19536:	d808      	bhi.n	1954a <ull_conn_rx+0x65e>
			     ((latency + 1) * interval_max)) ||
   19538:	fb02 3203 	mla	r2, r2, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   1953c:	ebb2 0f88 	cmp.w	r2, r8, lsl #2
   19540:	d203      	bcs.n	1954a <ull_conn_rx+0x65e>
				cpr->preferred_periodicity;
   19542:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   19546:	4293      	cmp	r3, r2
   19548:	d202      	bcs.n	19550 <ull_conn_rx+0x664>
				nack = reject_ext_ind_send(conn, *rx,
   1954a:	231e      	movs	r3, #30
   1954c:	2210      	movs	r2, #16
   1954e:	e65c      	b.n	1920a <ull_conn_rx+0x31e>
			conn->procedure_expire = 0U;
   19550:	2300      	movs	r3, #0
   19552:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
			conn->llcp_conn_param.interval_min = interval_min;
   19556:	f8a4 e0f0 	strh.w	lr, [r4, #240]	; 0xf0
			conn->llcp_conn_param.interval_max = interval_max;
   1955a:	f8a4 c0f2 	strh.w	ip, [r4, #242]	; 0xf2
			conn->llcp_conn_param.latency =	latency;
   1955e:	f8a4 70f4 	strh.w	r7, [r4, #244]	; 0xf4
			conn->llcp_conn_param.timeout =	timeout;
   19562:	f8a4 00f6 	strh.w	r0, [r4, #246]	; 0xf6
			conn->llcp_conn_param.preferred_periodicity =
   19566:	f884 20f8 	strb.w	r2, [r4, #248]	; 0xf8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1956a:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
   1956e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   19572:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   19576:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
				sys_le16_to_cpu(cpr->offset0);
   1957a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   1957e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   19582:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset0 =
   19586:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
				sys_le16_to_cpu(cpr->offset1);
   1958a:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
   1958e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   19592:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset1 =
   19596:	f8a4 30fe 	strh.w	r3, [r4, #254]	; 0xfe
				sys_le16_to_cpu(cpr->offset2);
   1959a:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   1959e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   195a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset2 =
   195a6:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->offset3);
   195aa:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
   195ae:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   195b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset3 =
   195b6:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset4);
   195ba:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
   195be:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   195c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset4 =
   195c6:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset5);
   195ca:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
   195ce:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   195d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset5 =
   195d6:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   195da:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   195de:	2201      	movs	r2, #1
   195e0:	f362 0302 	bfi	r3, r2, #0, #3
   195e4:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   195e8:	6833      	ldr	r3, [r6, #0]
   195ea:	2201      	movs	r2, #1
   195ec:	711a      	strb	r2, [r3, #4]
		break;
   195ee:	e4d5      	b.n	18f9c <ull_conn_rx+0xb0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   195f0:	7f69      	ldrb	r1, [r5, #29]
   195f2:	2011      	movs	r0, #17
   195f4:	f7ff fa1c 	bl	18a30 <pdu_len_cmp>
   195f8:	2800      	cmp	r0, #0
   195fa:	f000 80e3 	beq.w	197c4 <ull_conn_rx+0x8d8>
	switch (rej_ext_ind->reject_opcode) {
   195fe:	f895 3020 	ldrb.w	r3, [r5, #32]
   19602:	2b0f      	cmp	r3, #15
   19604:	f47f ac7d 	bne.w	18f02 <ull_conn_rx+0x16>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   19608:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   1960c:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   19610:	429a      	cmp	r2, r3
   19612:	f43f ac76 	beq.w	18f02 <ull_conn_rx+0x16>
	if (!lll->role && (rej_ext_ind->error_code ==
   19616:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   1961a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1961e:	2a00      	cmp	r2, #0
   19620:	f2c0 80e9 	blt.w	197f6 <ull_conn_rx+0x90a>
   19624:	2b1a      	cmp	r3, #26
   19626:	f040 80ec 	bne.w	19802 <ull_conn_rx+0x916>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1962a:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   1962e:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   19632:	429a      	cmp	r2, r3
   19634:	d00b      	beq.n	1964e <ull_conn_rx+0x762>
   19636:	f241 02f5 	movw	r2, #4341	; 0x10f5
   1963a:	491a      	ldr	r1, [pc, #104]	; (196a4 <ull_conn_rx+0x7b8>)
   1963c:	481a      	ldr	r0, [pc, #104]	; (196a8 <ull_conn_rx+0x7bc>)
   1963e:	f008 fc44 	bl	21eca <printk>
   19642:	4040      	eors	r0, r0
   19644:	f380 8811 	msr	BASEPRI, r0
   19648:	f04f 0003 	mov.w	r0, #3
   1964c:	df02      	svc	2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1964e:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
   19652:	2305      	movs	r3, #5
   19654:	f363 0202 	bfi	r2, r3, #0, #3
		conn->llcp_cu.win_offset_us = 0U;
   19658:	2300      	movs	r3, #0
   1965a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1965e:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   19662:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   19666:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   1966a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1966e:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   19672:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   19676:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1967a:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
		conn->llcp_cu.win_size = 1U;
   1967e:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   19680:	f361 0301 	bfi	r3, r1, #0, #2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   19684:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   19688:	f362 0382 	bfi	r3, r2, #2, #1
   1968c:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.ack--;
   19690:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
		conn->llcp_cu.win_size = 1U;
   19694:	f884 10b0 	strb.w	r1, [r4, #176]	; 0xb0
		conn->llcp_cu.ack--;
   19698:	3b01      	subs	r3, #1
   1969a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
	if (err) {
   1969e:	e430      	b.n	18f02 <ull_conn_rx+0x16>
   196a0:	20003cbc 	.word	0x20003cbc
   196a4:	0002f46e 	.word	0x0002f46e
   196a8:	0002a026 	.word	0x0002a026
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   196ac:	7f69      	ldrb	r1, [r5, #29]
   196ae:	2007      	movs	r0, #7
   196b0:	f7ff f9be 	bl	18a30 <pdu_len_cmp>
   196b4:	2800      	cmp	r0, #0
   196b6:	f000 8085 	beq.w	197c4 <ull_conn_rx+0x8d8>
		} else if ((conn->llcp_conn_param.ack !=
   196ba:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   196be:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   196c2:	429a      	cmp	r2, r3
   196c4:	f43f acba 	beq.w	1903c <ull_conn_rx+0x150>
			    conn->llcp_conn_param.req) &&
   196c8:	f895 3020 	ldrb.w	r3, [r5, #32]
   196cc:	2b0f      	cmp	r3, #15
   196ce:	f47f acb5 	bne.w	1903c <ull_conn_rx+0x150>
			conn->llcp_conn_param.disabled = 1U;
   196d2:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   196d6:	f043 0310 	orr.w	r3, r3, #16
   196da:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
			if (!conn->lll.role) {
   196de:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   196e2:	2b00      	cmp	r3, #0
   196e4:	db3c      	blt.n	19760 <ull_conn_rx+0x874>
				LL_ASSERT(conn->llcp_cu.req ==
   196e6:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   196ea:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   196ee:	429a      	cmp	r2, r3
   196f0:	d00b      	beq.n	1970a <ull_conn_rx+0x81e>
   196f2:	f241 728a 	movw	r2, #6026	; 0x178a
   196f6:	495f      	ldr	r1, [pc, #380]	; (19874 <ull_conn_rx+0x988>)
   196f8:	485f      	ldr	r0, [pc, #380]	; (19878 <ull_conn_rx+0x98c>)
   196fa:	f008 fbe6 	bl	21eca <printk>
   196fe:	4040      	eors	r0, r0
   19700:	f380 8811 	msr	BASEPRI, r0
   19704:	f04f 0003 	mov.w	r0, #3
   19708:	df02      	svc	2
				conn->llcp_conn_param.state =
   1970a:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
   1970e:	2305      	movs	r3, #5
   19710:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_cu.interval =
   19714:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   19718:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
				conn->llcp_cu.latency =
   1971c:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   19720:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
				conn->llcp_cu.timeout =
   19724:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   19728:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1972c:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
				conn->llcp_conn_param.state =
   19730:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
				conn->llcp_cu.win_size = 1U;
   19734:	2101      	movs	r1, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   19736:	f361 0301 	bfi	r3, r1, #0, #2
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1973a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1973e:	f362 0382 	bfi	r3, r2, #2, #1
   19742:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
				conn->llcp_cu.ack--;
   19746:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
				conn->llcp_cu.win_size = 1U;
   1974a:	f884 10b0 	strb.w	r1, [r4, #176]	; 0xb0
				conn->llcp_cu.ack--;
   1974e:	3b01      	subs	r3, #1
   19750:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   19754:	6833      	ldr	r3, [r6, #0]
				conn->llcp_cu.win_offset_us = 0U;
   19756:	2000      	movs	r0, #0
   19758:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1975c:	7119      	strb	r1, [r3, #4]
				break;
   1975e:	e501      	b.n	19164 <ull_conn_rx+0x278>
			LL_ASSERT(conn_upd_curr == conn);
   19760:	4f46      	ldr	r7, [pc, #280]	; (1987c <ull_conn_rx+0x990>)
   19762:	683a      	ldr	r2, [r7, #0]
   19764:	4294      	cmp	r4, r2
   19766:	d00b      	beq.n	19780 <ull_conn_rx+0x894>
   19768:	f241 72a1 	movw	r2, #6049	; 0x17a1
   1976c:	4941      	ldr	r1, [pc, #260]	; (19874 <ull_conn_rx+0x988>)
   1976e:	4842      	ldr	r0, [pc, #264]	; (19878 <ull_conn_rx+0x98c>)
   19770:	f008 fbab 	bl	21eca <printk>
   19774:	4040      	eors	r0, r0
   19776:	f380 8811 	msr	BASEPRI, r0
   1977a:	f04f 0003 	mov.w	r0, #3
   1977e:	df02      	svc	2
	conn_upd_curr = NULL;
   19780:	2300      	movs	r3, #0
			if (!conn->llcp_conn_param.cmd) {
   19782:	f894 00ee 	ldrb.w	r0, [r4, #238]	; 0xee
	conn_upd_curr = NULL;
   19786:	603b      	str	r3, [r7, #0]
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   19788:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1978c:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
			if (!conn->llcp_conn_param.cmd) {
   19790:	f010 0008 	ands.w	r0, r0, #8
   19794:	6833      	ldr	r3, [r6, #0]
   19796:	d102      	bne.n	1979e <ull_conn_rx+0x8b2>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   19798:	2201      	movs	r2, #1
   1979a:	711a      	strb	r2, [r3, #4]
				break;
   1979c:	e4e2      	b.n	19164 <ull_conn_rx+0x278>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1979e:	2215      	movs	r2, #21
   197a0:	711a      	strb	r2, [r3, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   197a2:	231a      	movs	r3, #26
   197a4:	772b      	strb	r3, [r5, #28]
			cu->latency = lll->latency;
   197a6:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   197a8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			cu->latency = lll->latency;
   197aa:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->supervision_reload *
   197ac:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
			cu->interval = lll->interval;
   197b0:	83eb      	strh	r3, [r5, #30]
			cu->timeout = conn->supervision_reload *
   197b2:	435a      	muls	r2, r3
				      lll->interval * 125U / 1000;
   197b4:	237d      	movs	r3, #125	; 0x7d
   197b6:	4353      	muls	r3, r2
   197b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   197bc:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   197c0:	846b      	strh	r3, [r5, #34]	; 0x22
   197c2:	e43b      	b.n	1903c <ull_conn_rx+0x150>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   197c4:	482e      	ldr	r0, [pc, #184]	; (19880 <ull_conn_rx+0x994>)
   197c6:	f00d fa5c 	bl	26c82 <mem_acquire>
	if (!tx) {
   197ca:	4601      	mov	r1, r0
   197cc:	2800      	cmp	r0, #0
   197ce:	f43f acc7 	beq.w	19160 <ull_conn_rx+0x274>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   197d2:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   197d4:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   197d8:	f043 0303 	orr.w	r3, r3, #3
   197dc:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   197de:	2302      	movs	r3, #2
   197e0:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   197e2:	2307      	movs	r3, #7
   197e4:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, tx);
   197e6:	4620      	mov	r0, r4
   197e8:	f00d feb6 	bl	27558 <ctrl_tx_enqueue>
   197ec:	f7ff bb89 	b.w	18f02 <ull_conn_rx+0x16>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   197f0:	2301      	movs	r3, #1
   197f2:	712b      	strb	r3, [r5, #4]
		break;
   197f4:	e4b6      	b.n	19164 <ull_conn_rx+0x278>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   197f6:	2b23      	cmp	r3, #35	; 0x23
   197f8:	d003      	beq.n	19802 <ull_conn_rx+0x916>
			conn->slave.ticks_to_offset =
   197fa:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   197fe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   19802:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   19806:	f003 0307 	and.w	r3, r3, #7
   1980a:	2b04      	cmp	r3, #4
   1980c:	d117      	bne.n	1983e <ull_conn_rx+0x952>
		LL_ASSERT(conn_upd_curr == conn);
   1980e:	4e1b      	ldr	r6, [pc, #108]	; (1987c <ull_conn_rx+0x990>)
   19810:	6832      	ldr	r2, [r6, #0]
   19812:	4294      	cmp	r4, r2
   19814:	d00b      	beq.n	1982e <ull_conn_rx+0x942>
   19816:	f241 1210 	movw	r2, #4368	; 0x1110
   1981a:	4916      	ldr	r1, [pc, #88]	; (19874 <ull_conn_rx+0x988>)
   1981c:	4816      	ldr	r0, [pc, #88]	; (19878 <ull_conn_rx+0x98c>)
   1981e:	f008 fb54 	bl	21eca <printk>
   19822:	4040      	eors	r0, r0
   19824:	f380 8811 	msr	BASEPRI, r0
   19828:	f04f 0003 	mov.w	r0, #3
   1982c:	df02      	svc	2
	conn_upd_curr = NULL;
   1982e:	2300      	movs	r3, #0
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   19830:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn_upd_curr = NULL;
   19834:	6033      	str	r3, [r6, #0]
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   19836:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
		conn->procedure_expire = 0U;
   1983a:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
	if (!conn->llcp_conn_param.cmd) {
   1983e:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   19842:	071b      	lsls	r3, r3, #28
   19844:	f57f ab5d 	bpl.w	18f02 <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   19848:	2315      	movs	r3, #21
   1984a:	712b      	strb	r3, [r5, #4]
	cu->status = rej_ext_ind->error_code;
   1984c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   19850:	772b      	strb	r3, [r5, #28]
	cu->latency = lll->latency;
   19852:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	cu->interval = lll->interval;
   19854:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	cu->latency = lll->latency;
   19856:	842a      	strh	r2, [r5, #32]
	cu->timeout = conn->supervision_reload *
   19858:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
	cu->interval = lll->interval;
   1985c:	83eb      	strh	r3, [r5, #30]
	cu->timeout = conn->supervision_reload *
   1985e:	435a      	muls	r2, r3
		      lll->interval * 125U / 1000;
   19860:	237d      	movs	r3, #125	; 0x7d
   19862:	4353      	muls	r3, r2
   19864:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19868:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   1986c:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   1986e:	f7ff bb95 	b.w	18f9c <ull_conn_rx+0xb0>
   19872:	bf00      	nop
   19874:	0002f46e 	.word	0x0002f46e
   19878:	0002a026 	.word	0x0002a026
   1987c:	20003cbc 	.word	0x20003cbc
   19880:	20003d40 	.word	0x20003d40

00019884 <ull_conn_tx_demux>:
{
   19884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   19888:	4e20      	ldr	r6, [pc, #128]	; (1990c <ull_conn_tx_demux+0x88>)
{
   1988a:	4604      	mov	r4, r0
   1988c:	4637      	mov	r7, r6
	return (void *)(fifo + first * size);
   1988e:	1d35      	adds	r5, r6, #4
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   19890:	78b3      	ldrb	r3, [r6, #2]
	if (first == last) {
   19892:	78f1      	ldrb	r1, [r6, #3]
   19894:	7832      	ldrb	r2, [r6, #0]
   19896:	4299      	cmp	r1, r3
   19898:	d02d      	beq.n	198f6 <ull_conn_tx_demux+0x72>
	return (void *)(fifo + first * size);
   1989a:	fb13 f302 	smulbb	r3, r3, r2
		if (!lll_tx) {
   1989e:	eb15 0803 	adds.w	r8, r5, r3
   198a2:	d028      	beq.n	198f6 <ull_conn_tx_demux+0x72>
		conn = ll_connected_get(lll_tx->handle);
   198a4:	5ae8      	ldrh	r0, [r5, r3]
   198a6:	f00d fe7c 	bl	275a2 <ll_connected_get>
		if (conn) {
   198aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
   198ae:	b320      	cbz	r0, 198fa <ull_conn_tx_demux+0x76>
			tx->next = NULL;
   198b0:	2300      	movs	r3, #0
   198b2:	600b      	str	r3, [r1, #0]
			if (!conn->tx_data) {
   198b4:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   198b8:	b943      	cbnz	r3, 198cc <ull_conn_tx_demux+0x48>
				if (!conn->tx_head) {
   198ba:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
				conn->tx_data = tx;
   198be:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
				if (!conn->tx_head) {
   198c2:	b91b      	cbnz	r3, 198cc <ull_conn_tx_demux+0x48>
					conn->tx_head = tx;
   198c4:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
					conn->tx_data_last = NULL;
   198c8:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
			if (conn->tx_data_last) {
   198cc:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   198d0:	b103      	cbz	r3, 198d4 <ull_conn_tx_demux+0x50>
				conn->tx_data_last->next = tx;
   198d2:	6019      	str	r1, [r3, #0]
			conn->tx_data_last = tx;
   198d4:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
	uint8_t _first = *first; /* Copy read-index */
   198d8:	78bb      	ldrb	r3, [r7, #2]
	if (_first == last) {
   198da:	78f9      	ldrb	r1, [r7, #3]
		MFIFO_DEQUEUE(conn_tx);
   198dc:	787a      	ldrb	r2, [r7, #1]
   198de:	4299      	cmp	r1, r3
   198e0:	d005      	beq.n	198ee <ull_conn_tx_demux+0x6a>
	_first += 1U;
   198e2:	3301      	adds	r3, #1
   198e4:	b2db      	uxtb	r3, r3
		_first = 0U;
   198e6:	429a      	cmp	r2, r3
   198e8:	bf08      	it	eq
   198ea:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   198ec:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   198ee:	3c01      	subs	r4, #1
   198f0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   198f4:	d1cc      	bne.n	19890 <ull_conn_tx_demux+0xc>
}
   198f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p->ll_id = PDU_DATA_LLID_RESV;
   198fa:	790b      	ldrb	r3, [r1, #4]
   198fc:	f360 0301 	bfi	r3, r0, #0, #2
   19900:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   19902:	f64f 70ff 	movw	r0, #65535	; 0xffff
   19906:	f7fe f9e5 	bl	17cd4 <ll_tx_ack_put>
   1990a:	e7e5      	b.n	198d8 <ull_conn_tx_demux+0x54>
   1990c:	20000bd8 	.word	0x20000bd8

00019910 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   19910:	4b32      	ldr	r3, [pc, #200]	; (199dc <conn_cleanup+0xcc>)
   19912:	681a      	ldr	r2, [r3, #0]
   19914:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   19916:	bf08      	it	eq
   19918:	2200      	moveq	r2, #0
{
   1991a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	conn_upd_curr = NULL;
   1991e:	bf08      	it	eq
   19920:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   19922:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   19924:	f8a0 30d2 	strh.w	r3, [r0, #210]	; 0xd2
	*((uint8_t *)rx->pdu) = reason;
   19928:	f880 10e8 	strb.w	r1, [r0, #232]	; 0xe8
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1992c:	2314      	movs	r3, #20
	rx = conn->llcp_rx;
   1992e:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   19932:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
{
   19936:	4604      	mov	r4, r0
	struct lll_conn *lll = &conn->lll;
   19938:	f100 061c 	add.w	r6, r0, #28
		hdr->type = NODE_RX_TYPE_RELEASE;
   1993c:	2501      	movs	r5, #1
	while (rx) {
   1993e:	bb41      	cbnz	r1, 19992 <conn_cleanup+0x82>
		link = mem_acquire(&mem_link_tx.free);
   19940:	4f27      	ldr	r7, [pc, #156]	; (199e0 <conn_cleanup+0xd0>)
		LL_ASSERT(link);
   19942:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 199e8 <conn_cleanup+0xd8>
   19946:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 199ec <conn_cleanup+0xdc>
	while (conn->tx_head) {
   1994a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1994e:	bb38      	cbnz	r0, 199a0 <conn_cleanup+0x90>
				    TICKER_ID_CONN_BASE + lll->handle,
   19950:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   19954:	4b23      	ldr	r3, [pc, #140]	; (199e4 <conn_cleanup+0xd4>)
   19956:	9600      	str	r6, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
   19958:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1995a:	b2d2      	uxtb	r2, r2
   1995c:	2101      	movs	r1, #1
   1995e:	f7fc fdcd 	bl	164fc <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19962:	f030 0302 	bics.w	r3, r0, #2
   19966:	d00b      	beq.n	19980 <conn_cleanup+0x70>
   19968:	f240 62f1 	movw	r2, #1777	; 0x6f1
   1996c:	491e      	ldr	r1, [pc, #120]	; (199e8 <conn_cleanup+0xd8>)
   1996e:	481f      	ldr	r0, [pc, #124]	; (199ec <conn_cleanup+0xdc>)
   19970:	f008 faab 	bl	21eca <printk>
   19974:	4040      	eors	r0, r0
   19976:	f380 8811 	msr	BASEPRI, r0
   1997a:	f04f 0003 	mov.w	r0, #3
   1997e:	df02      	svc	2
	lll->handle = 0xFFFF;
   19980:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   19984:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   19986:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
   19988:	b002      	add	sp, #8
   1998a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   1998e:	f7ff bf79 	b.w	19884 <ull_conn_tx_demux>
		rx = hdr->link->mem;
   19992:	6808      	ldr	r0, [r1, #0]
   19994:	6847      	ldr	r7, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   19996:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   19998:	f7fe f95e 	bl	17c58 <ll_rx_put>
		rx = hdr->link->mem;
   1999c:	4639      	mov	r1, r7
   1999e:	e7ce      	b.n	1993e <conn_cleanup+0x2e>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   199a0:	4601      	mov	r1, r0
   199a2:	4620      	mov	r0, r4
   199a4:	f00d fd97 	bl	274d6 <tx_ull_dequeue>
   199a8:	4682      	mov	sl, r0
		link = mem_acquire(&mem_link_tx.free);
   199aa:	4638      	mov	r0, r7
   199ac:	f00d f969 	bl	26c82 <mem_acquire>
		LL_ASSERT(link);
   199b0:	4605      	mov	r5, r0
   199b2:	b958      	cbnz	r0, 199cc <conn_cleanup+0xbc>
   199b4:	f240 7231 	movw	r2, #1841	; 0x731
   199b8:	4641      	mov	r1, r8
   199ba:	4648      	mov	r0, r9
   199bc:	f008 fa85 	bl	21eca <printk>
   199c0:	4040      	eors	r0, r0
   199c2:	f380 8811 	msr	BASEPRI, r0
   199c6:	f04f 0003 	mov.w	r0, #3
   199ca:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   199cc:	f104 0260 	add.w	r2, r4, #96	; 0x60
   199d0:	4651      	mov	r1, sl
   199d2:	4628      	mov	r0, r5
   199d4:	f00d f9b3 	bl	26d3e <memq_enqueue>
   199d8:	e7b7      	b.n	1994a <conn_cleanup+0x3a>
   199da:	bf00      	nop
   199dc:	20003cbc 	.word	0x20003cbc
   199e0:	20003ec4 	.word	0x20003ec4
   199e4:	00018ab9 	.word	0x00018ab9
   199e8:	0002f46e 	.word	0x0002f46e
   199ec:	0002a026 	.word	0x0002a026

000199f0 <ull_conn_done>:
{
   199f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   199f4:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   199f6:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   199f8:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   199fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   199fe:	429a      	cmp	r2, r3
{
   19a00:	b08b      	sub	sp, #44	; 0x2c
   19a02:	4681      	mov	r9, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   19a04:	d006      	beq.n	19a14 <ull_conn_done+0x24>
	reason_peer = conn->llcp_terminate.reason_peer;
   19a06:	f894 60cb 	ldrb.w	r6, [r4, #203]	; 0xcb
	if (reason_peer && (
   19a0a:	b136      	cbz	r6, 19a1a <ull_conn_done+0x2a>
		conn_cleanup(conn, reason_peer);
   19a0c:	4631      	mov	r1, r6
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   19a0e:	4620      	mov	r0, r4
   19a10:	f7ff ff7e 	bl	19910 <conn_cleanup>
}
   19a14:	b00b      	add	sp, #44	; 0x2c
   19a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	latency_event = lll->latency_event;
   19a1a:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   19a1e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
	elapsed_event = latency_event + 1;
   19a20:	f108 0701 	add.w	r7, r8, #1
   19a24:	b2bf      	uxth	r7, r7
	ticks_drift_minus = 0U;
   19a26:	e9cd 6608 	strd	r6, r6, [sp, #32]
	if (done->extra.trx_cnt) {
   19a2a:	b17b      	cbz	r3, 19a4c <ull_conn_done+0x5c>
		} else if (lll->role) {
   19a2c:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   19a30:	2b00      	cmp	r3, #0
   19a32:	da08      	bge.n	19a46 <ull_conn_done+0x56>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   19a34:	aa08      	add	r2, sp, #32
   19a36:	a909      	add	r1, sp, #36	; 0x24
   19a38:	f7e6 fcfa 	bl	430 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   19a3c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   19a40:	b15b      	cbz	r3, 19a5a <ull_conn_done+0x6a>
				lll->latency_event = 0;
   19a42:	2300      	movs	r3, #0
				lll->latency_event = lll->latency;
   19a44:	84ab      	strh	r3, [r5, #36]	; 0x24
		conn->connect_expire = 0U;
   19a46:	2300      	movs	r3, #0
   19a48:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	if (done->extra.crc_valid) {
   19a4c:	f899 3026 	ldrb.w	r3, [r9, #38]	; 0x26
   19a50:	b1bb      	cbz	r3, 19a82 <ull_conn_done+0x92>
		conn->supervision_expire = 0U;
   19a52:	2300      	movs	r3, #0
			conn->supervision_expire = conn->supervision_reload;
   19a54:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
   19a58:	e01c      	b.n	19a94 <ull_conn_done+0xa4>
				ull_conn_tx_demux(UINT8_MAX);
   19a5a:	20ff      	movs	r0, #255	; 0xff
   19a5c:	f7ff ff12 	bl	19884 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   19a60:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   19a64:	2b00      	cmp	r3, #0
   19a66:	d1ec      	bne.n	19a42 <ull_conn_done+0x52>
   19a68:	4632      	mov	r2, r6
   19a6a:	e9d5 0113 	ldrd	r0, r1, [r5, #76]	; 0x4c
   19a6e:	f00d f96d 	bl	26d4c <memq_peek>
   19a72:	2800      	cmp	r0, #0
   19a74:	d1e5      	bne.n	19a42 <ull_conn_done+0x52>
			} else if (lll->slave.latency_enabled) {
   19a76:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   19a7a:	07db      	lsls	r3, r3, #31
   19a7c:	d5e3      	bpl.n	19a46 <ull_conn_done+0x56>
				lll->latency_event = lll->latency;
   19a7e:	8c2b      	ldrh	r3, [r5, #32]
   19a80:	e7e0      	b.n	19a44 <ull_conn_done+0x54>
	else if (conn->connect_expire) {
   19a82:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   19a86:	2b00      	cmp	r3, #0
   19a88:	d07a      	beq.n	19b80 <ull_conn_done+0x190>
		if (conn->connect_expire > elapsed_event) {
   19a8a:	42bb      	cmp	r3, r7
   19a8c:	d976      	bls.n	19b7c <ull_conn_done+0x18c>
			conn->connect_expire -= elapsed_event;
   19a8e:	1bdb      	subs	r3, r3, r7
   19a90:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	if (conn->supervision_expire) {
   19a94:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   19a98:	b1eb      	cbz	r3, 19ad6 <ull_conn_done+0xe6>
		if (conn->supervision_expire > elapsed_event) {
   19a9a:	42bb      	cmp	r3, r7
   19a9c:	d977      	bls.n	19b8e <ull_conn_done+0x19e>
			conn->supervision_expire -= elapsed_event;
   19a9e:	1bdb      	subs	r3, r3, r7
   19aa0:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   19aa2:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   19aa4:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   19aa6:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
			lll->latency_event = 0U;
   19aaa:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   19aac:	d971      	bls.n	19b92 <ull_conn_done+0x1a2>
			else if (lll->role) {
   19aae:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   19ab2:	4293      	cmp	r3, r2
   19ab4:	da0f      	bge.n	19ad6 <ull_conn_done+0xe6>
				if (latency_event) {
   19ab6:	f1b8 0f00 	cmp.w	r8, #0
   19aba:	d16a      	bne.n	19b92 <ull_conn_done+0x1a2>
					force = conn->slave.force & 0x01;
   19abc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
					conn->slave.force >>= 1U;
   19ac0:	085a      	lsrs	r2, r3, #1
					if (force) {
   19ac2:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   19ac6:	bf17      	itett	ne
   19ac8:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   19acc:	f8c4 2084 	streq.w	r2, [r4, #132]	; 0x84
						conn->slave.force |= BIT(31);
   19ad0:	f8c4 2084 	strne.w	r2, [r4, #132]	; 0x84
					force = conn->slave.force & 0x01;
   19ad4:	461e      	movne	r6, r3
	if (conn->procedure_expire != 0U) {
   19ad6:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
   19ada:	b123      	cbz	r3, 19ae6 <ull_conn_done+0xf6>
		if (conn->procedure_expire > elapsed_event) {
   19adc:	42bb      	cmp	r3, r7
   19ade:	d95a      	bls.n	19b96 <ull_conn_done+0x1a6>
			conn->procedure_expire -= elapsed_event;
   19ae0:	1bdf      	subs	r7, r3, r7
   19ae2:	f8a4 707c 	strh.w	r7, [r4, #124]	; 0x7c
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19ae6:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   19aea:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
   19aee:	1a9b      	subs	r3, r3, r2
   19af0:	f003 0303 	and.w	r3, r3, #3
   19af4:	2b02      	cmp	r3, #2
   19af6:	d104      	bne.n	19b02 <ull_conn_done+0x112>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   19af8:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19afc:	3b01      	subs	r3, #1
   19afe:	2b01      	cmp	r3, #1
   19b00:	d905      	bls.n	19b0e <ull_conn_done+0x11e>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   19b02:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   19b06:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   19b0a:	429a      	cmp	r2, r3
   19b0c:	d001      	beq.n	19b12 <ull_conn_done+0x122>
		lll->latency_event = 0U;
   19b0e:	2300      	movs	r3, #0
   19b10:	84ab      	strh	r3, [r5, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   19b12:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   19b14:	b90e      	cbnz	r6, 19b1a <ull_conn_done+0x12a>
   19b16:	4541      	cmp	r1, r8
   19b18:	d03f      	beq.n	19b9a <ull_conn_done+0x1aa>
		lazy = lll->latency_event + 1U;
   19b1a:	3101      	adds	r1, #1
   19b1c:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   19b1e:	e9dd 7308 	ldrd	r7, r3, [sp, #32]
   19b22:	ea53 0207 	orrs.w	r2, r3, r7
   19b26:	d103      	bne.n	19b30 <ull_conn_done+0x140>
   19b28:	b911      	cbnz	r1, 19b30 <ull_conn_done+0x140>
   19b2a:	2e00      	cmp	r6, #0
   19b2c:	f43f af72 	beq.w	19a14 <ull_conn_done+0x24>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   19b30:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19b32:	481b      	ldr	r0, [pc, #108]	; (19ba0 <ull_conn_done+0x1b0>)
		struct ll_conn *conn = lll->hdr.parent;
   19b34:	68ec      	ldr	r4, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19b36:	9406      	str	r4, [sp, #24]
   19b38:	e9cd 6004 	strd	r6, r0, [sp, #16]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   19b3c:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19b3e:	2000      	movs	r0, #0
   19b40:	9103      	str	r1, [sp, #12]
   19b42:	e9cd 0001 	strd	r0, r0, [sp, #4]
   19b46:	9700      	str	r7, [sp, #0]
   19b48:	b2d2      	uxtb	r2, r2
   19b4a:	2101      	movs	r1, #1
   19b4c:	f00d fb65 	bl	2721a <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19b50:	f030 0302 	bics.w	r3, r0, #2
   19b54:	f43f af5e 	beq.w	19a14 <ull_conn_done+0x24>
   19b58:	f7fe f93e 	bl	17dd8 <ull_disable_mark_get>
   19b5c:	4284      	cmp	r4, r0
   19b5e:	f43f af59 	beq.w	19a14 <ull_conn_done+0x24>
   19b62:	f240 5241 	movw	r2, #1345	; 0x541
   19b66:	490f      	ldr	r1, [pc, #60]	; (19ba4 <ull_conn_done+0x1b4>)
   19b68:	480f      	ldr	r0, [pc, #60]	; (19ba8 <ull_conn_done+0x1b8>)
   19b6a:	f008 f9ae 	bl	21eca <printk>
   19b6e:	4040      	eors	r0, r0
   19b70:	f380 8811 	msr	BASEPRI, r0
   19b74:	f04f 0003 	mov.w	r0, #3
   19b78:	df02      	svc	2
   19b7a:	e74b      	b.n	19a14 <ull_conn_done+0x24>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   19b7c:	213e      	movs	r1, #62	; 0x3e
   19b7e:	e746      	b.n	19a0e <ull_conn_done+0x1e>
		if (!conn->supervision_expire) {
   19b80:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   19b84:	2b00      	cmp	r3, #0
   19b86:	d185      	bne.n	19a94 <ull_conn_done+0xa4>
			conn->supervision_expire = conn->supervision_reload;
   19b88:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   19b8c:	e762      	b.n	19a54 <ull_conn_done+0x64>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   19b8e:	2108      	movs	r1, #8
   19b90:	e73d      	b.n	19a0e <ull_conn_done+0x1e>
				force = 1U;
   19b92:	2601      	movs	r6, #1
   19b94:	e79f      	b.n	19ad6 <ull_conn_done+0xe6>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   19b96:	2122      	movs	r1, #34	; 0x22
   19b98:	e739      	b.n	19a0e <ull_conn_done+0x1e>
	lazy = 0U;
   19b9a:	4631      	mov	r1, r6
   19b9c:	e7bf      	b.n	19b1e <ull_conn_done+0x12e>
   19b9e:	bf00      	nop
   19ba0:	00018ba5 	.word	0x00018ba5
   19ba4:	0002f46e 	.word	0x0002f46e
   19ba8:	0002a026 	.word	0x0002a026

00019bac <ull_conn_tx_lll_enqueue>:
{
   19bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   19bb0:	4f15      	ldr	r7, [pc, #84]	; (19c08 <ull_conn_tx_lll_enqueue+0x5c>)
		LL_ASSERT(link);
   19bb2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 19c0c <ull_conn_tx_lll_enqueue+0x60>
   19bb6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 19c10 <ull_conn_tx_lll_enqueue+0x64>
{
   19bba:	4605      	mov	r5, r0
   19bbc:	460c      	mov	r4, r1
	while (conn->tx_head &&
   19bbe:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   19bc2:	b101      	cbz	r1, 19bc6 <ull_conn_tx_lll_enqueue+0x1a>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   19bc4:	b90c      	cbnz	r4, 19bca <ull_conn_tx_lll_enqueue+0x1e>
}
   19bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tx = tx_ull_dequeue(conn, conn->tx_head);
   19bca:	4628      	mov	r0, r5
   19bcc:	f00d fc83 	bl	274d6 <tx_ull_dequeue>
   19bd0:	4682      	mov	sl, r0
		link = mem_acquire(&mem_link_tx.free);
   19bd2:	4638      	mov	r0, r7
   19bd4:	f00d f855 	bl	26c82 <mem_acquire>
		LL_ASSERT(link);
   19bd8:	4606      	mov	r6, r0
   19bda:	b958      	cbnz	r0, 19bf4 <ull_conn_tx_lll_enqueue+0x48>
   19bdc:	f240 5293 	movw	r2, #1427	; 0x593
   19be0:	4641      	mov	r1, r8
   19be2:	4648      	mov	r0, r9
   19be4:	f008 f971 	bl	21eca <printk>
   19be8:	4040      	eors	r0, r0
   19bea:	f380 8811 	msr	BASEPRI, r0
   19bee:	f04f 0003 	mov.w	r0, #3
   19bf2:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   19bf4:	f105 0260 	add.w	r2, r5, #96	; 0x60
   19bf8:	4651      	mov	r1, sl
   19bfa:	4630      	mov	r0, r6
   19bfc:	3c01      	subs	r4, #1
   19bfe:	f00d f89e 	bl	26d3e <memq_enqueue>
   19c02:	b2e4      	uxtb	r4, r4
   19c04:	e7db      	b.n	19bbe <ull_conn_tx_lll_enqueue+0x12>
   19c06:	bf00      	nop
   19c08:	20003ec4 	.word	0x20003ec4
   19c0c:	0002f46e 	.word	0x0002f46e
   19c10:	0002a026 	.word	0x0002a026

00019c14 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   19c14:	4901      	ldr	r1, [pc, #4]	; (19c1c <ull_conn_link_tx_release+0x8>)
   19c16:	f00d b84d 	b.w	26cb4 <mem_release>
   19c1a:	bf00      	nop
   19c1c:	20003ec4 	.word	0x20003ec4

00019c20 <ull_conn_ack_last_idx_get>:
}
   19c20:	4b01      	ldr	r3, [pc, #4]	; (19c28 <ull_conn_ack_last_idx_get+0x8>)
   19c22:	78d8      	ldrb	r0, [r3, #3]
   19c24:	4770      	bx	lr
   19c26:	bf00      	nop
   19c28:	20000b54 	.word	0x20000b54

00019c2c <ull_conn_ack_peek>:
{
   19c2c:	b570      	push	{r4, r5, r6, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   19c2e:	4b0a      	ldr	r3, [pc, #40]	; (19c58 <ull_conn_ack_peek+0x2c>)
   19c30:	789c      	ldrb	r4, [r3, #2]
   19c32:	78dd      	ldrb	r5, [r3, #3]
	if (first == last) {
   19c34:	42ac      	cmp	r4, r5
{
   19c36:	4606      	mov	r6, r0
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   19c38:	7818      	ldrb	r0, [r3, #0]
   19c3a:	d00b      	beq.n	19c54 <ull_conn_ack_peek+0x28>
	return (void *)(fifo + first * size);
   19c3c:	3304      	adds	r3, #4
   19c3e:	fb14 f400 	smulbb	r4, r4, r0
	if (!lll_tx) {
   19c42:	1918      	adds	r0, r3, r4
   19c44:	d005      	beq.n	19c52 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   19c46:	7035      	strb	r5, [r6, #0]
	*handle = lll_tx->handle;
   19c48:	5b1b      	ldrh	r3, [r3, r4]
   19c4a:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   19c4c:	6843      	ldr	r3, [r0, #4]
   19c4e:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   19c50:	6818      	ldr	r0, [r3, #0]
}
   19c52:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   19c54:	2000      	movs	r0, #0
   19c56:	e7fc      	b.n	19c52 <ull_conn_ack_peek+0x26>
   19c58:	20000b54 	.word	0x20000b54

00019c5c <ull_conn_ack_by_last_peek>:
{
   19c5c:	b530      	push	{r4, r5, lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   19c5e:	4b09      	ldr	r3, [pc, #36]	; (19c84 <ull_conn_ack_by_last_peek+0x28>)
   19c60:	789c      	ldrb	r4, [r3, #2]
   19c62:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   19c64:	4284      	cmp	r4, r0
   19c66:	d00a      	beq.n	19c7e <ull_conn_ack_by_last_peek+0x22>
	return (void *)(fifo + first * size);
   19c68:	3304      	adds	r3, #4
   19c6a:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   19c6e:	1918      	adds	r0, r3, r4
   19c70:	d004      	beq.n	19c7c <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   19c72:	5b1b      	ldrh	r3, [r3, r4]
   19c74:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   19c76:	6843      	ldr	r3, [r0, #4]
   19c78:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   19c7a:	6818      	ldr	r0, [r3, #0]
}
   19c7c:	bd30      	pop	{r4, r5, pc}
		return NULL;
   19c7e:	2000      	movs	r0, #0
   19c80:	e7fc      	b.n	19c7c <ull_conn_ack_by_last_peek+0x20>
   19c82:	bf00      	nop
   19c84:	20000b54 	.word	0x20000b54

00019c88 <ull_conn_ack_dequeue>:
{
   19c88:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(conn_ack);
   19c8a:	4a09      	ldr	r2, [pc, #36]	; (19cb0 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   19c8c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   19c8e:	78d0      	ldrb	r0, [r2, #3]
   19c90:	7811      	ldrb	r1, [r2, #0]
   19c92:	7854      	ldrb	r4, [r2, #1]
   19c94:	4298      	cmp	r0, r3
   19c96:	d009      	beq.n	19cac <ull_conn_ack_dequeue+0x24>
	mem = *((void **)(fifo + _first * size));
   19c98:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   19c9c:	3301      	adds	r3, #1
   19c9e:	b2db      	uxtb	r3, r3
		_first = 0U;
   19ca0:	429c      	cmp	r4, r3
   19ca2:	bf08      	it	eq
   19ca4:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   19ca6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   19ca8:	7093      	strb	r3, [r2, #2]
}
   19caa:	bd10      	pop	{r4, pc}
		return NULL;
   19cac:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   19cae:	e7fc      	b.n	19caa <ull_conn_ack_dequeue+0x22>
   19cb0:	20000b54 	.word	0x20000b54

00019cb4 <ull_conn_lll_ack_enqueue>:
{
   19cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   19cb6:	4a12      	ldr	r2, [pc, #72]	; (19d00 <ull_conn_lll_ack_enqueue+0x4c>)
   19cb8:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   19cba:	7857      	ldrb	r7, [r2, #1]
   19cbc:	7895      	ldrb	r5, [r2, #2]
   19cbe:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   19cc0:	1c63      	adds	r3, r4, #1
   19cc2:	b2db      	uxtb	r3, r3
		last = 0U;
   19cc4:	429f      	cmp	r7, r3
   19cc6:	bf08      	it	eq
   19cc8:	2300      	moveq	r3, #0
	if (last == first) {
   19cca:	429d      	cmp	r5, r3
   19ccc:	d004      	beq.n	19cd8 <ull_conn_lll_ack_enqueue+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19cce:	1d15      	adds	r5, r2, #4
   19cd0:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   19cd4:	192e      	adds	r6, r5, r4
   19cd6:	d10e      	bne.n	19cf6 <ull_conn_lll_ack_enqueue+0x42>
   19cd8:	f240 52d1 	movw	r2, #1489	; 0x5d1
   19cdc:	4909      	ldr	r1, [pc, #36]	; (19d04 <ull_conn_lll_ack_enqueue+0x50>)
   19cde:	480a      	ldr	r0, [pc, #40]	; (19d08 <ull_conn_lll_ack_enqueue+0x54>)
   19ce0:	f008 f8f3 	bl	21eca <printk>
   19ce4:	4040      	eors	r0, r0
   19ce6:	f380 8811 	msr	BASEPRI, r0
   19cea:	f04f 0003 	mov.w	r0, #3
   19cee:	df02      	svc	2
	lll_tx->handle = handle;
   19cf0:	2300      	movs	r3, #0
   19cf2:	801b      	strh	r3, [r3, #0]
   19cf4:	deff      	udf	#255	; 0xff
   19cf6:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   19cf8:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   19cfa:	6071      	str	r1, [r6, #4]
}
   19cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19cfe:	bf00      	nop
   19d00:	20000b54 	.word	0x20000b54
   19d04:	0002f46e 	.word	0x0002f46e
   19d08:	0002a026 	.word	0x0002a026

00019d0c <ull_conn_tx_ack>:
{
   19d0c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   19d0e:	7953      	ldrb	r3, [r2, #5]
{
   19d10:	4605      	mov	r5, r0
   19d12:	460e      	mov	r6, r1
   19d14:	4614      	mov	r4, r2
	LL_ASSERT(pdu_tx->len);
   19d16:	b95b      	cbnz	r3, 19d30 <ull_conn_tx_ack+0x24>
   19d18:	f240 52de 	movw	r2, #1502	; 0x5de
   19d1c:	4920      	ldr	r1, [pc, #128]	; (19da0 <ull_conn_tx_ack+0x94>)
   19d1e:	4821      	ldr	r0, [pc, #132]	; (19da4 <ull_conn_tx_ack+0x98>)
   19d20:	f008 f8d3 	bl	21eca <printk>
   19d24:	4040      	eors	r0, r0
   19d26:	f380 8811 	msr	BASEPRI, r0
   19d2a:	f04f 0003 	mov.w	r0, #3
   19d2e:	df02      	svc	2
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   19d30:	7923      	ldrb	r3, [r4, #4]
   19d32:	f003 0203 	and.w	r2, r3, #3
   19d36:	2a03      	cmp	r2, #3
   19d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19d3c:	d129      	bne.n	19d92 <ull_conn_tx_ack+0x86>
		if (handle != 0xFFFF) {
   19d3e:	4295      	cmp	r5, r2
   19d40:	d00b      	beq.n	19d5a <ull_conn_tx_ack+0x4e>
			struct ll_conn *conn = ll_conn_get(handle);
   19d42:	4628      	mov	r0, r5
   19d44:	f7ff f82c 	bl	18da0 <ll_conn_get>
	switch (pdu_tx->llctrl.opcode) {
   19d48:	79e3      	ldrb	r3, [r4, #7]
   19d4a:	2b02      	cmp	r3, #2
   19d4c:	d105      	bne.n	19d5a <ull_conn_tx_ack+0x4e>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   19d4e:	7a21      	ldrb	r1, [r4, #8]
   19d50:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   19d52:	bf08      	it	eq
   19d54:	2116      	moveq	r1, #22
   19d56:	f7ff fddb 	bl	19910 <conn_cleanup>
		if (link->next == (void *)tx) {
   19d5a:	6833      	ldr	r3, [r6, #0]
   19d5c:	42a3      	cmp	r3, r4
   19d5e:	d105      	bne.n	19d6c <ull_conn_tx_ack+0x60>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   19d60:	4620      	mov	r0, r4
   19d62:	4911      	ldr	r1, [pc, #68]	; (19da8 <ull_conn_tx_ack+0x9c>)
}
   19d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   19d68:	f00c bfa4 	b.w	26cb4 <mem_release>
			LL_ASSERT(!link->next);
   19d6c:	b15b      	cbz	r3, 19d86 <ull_conn_tx_ack+0x7a>
   19d6e:	f240 52f1 	movw	r2, #1521	; 0x5f1
   19d72:	490b      	ldr	r1, [pc, #44]	; (19da0 <ull_conn_tx_ack+0x94>)
   19d74:	480b      	ldr	r0, [pc, #44]	; (19da4 <ull_conn_tx_ack+0x98>)
   19d76:	f008 f8a8 	bl	21eca <printk>
   19d7a:	4040      	eors	r0, r0
   19d7c:	f380 8811 	msr	BASEPRI, r0
   19d80:	f04f 0003 	mov.w	r0, #3
   19d84:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   19d86:	4621      	mov	r1, r4
   19d88:	4628      	mov	r0, r5
}
   19d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   19d8e:	f7fd bfa1 	b.w	17cd4 <ll_tx_ack_put>
	} else if (handle == 0xFFFF) {
   19d92:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   19d94:	bf04      	itt	eq
   19d96:	f36f 0301 	bfceq	r3, #0, #2
   19d9a:	7123      	strbeq	r3, [r4, #4]
   19d9c:	e7f3      	b.n	19d86 <ull_conn_tx_ack+0x7a>
   19d9e:	bf00      	nop
   19da0:	0002f46e 	.word	0x0002f46e
   19da4:	0002a026 	.word	0x0002a026
   19da8:	20003d40 	.word	0x20003d40

00019dac <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   19dac:	b510      	push	{r4, lr}
   19dae:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   19db0:	b158      	cbz	r0, 19dca <ticker_update_latency_cancel_op_cb+0x1e>
   19db2:	f240 220d 	movw	r2, #525	; 0x20d
   19db6:	4908      	ldr	r1, [pc, #32]	; (19dd8 <ticker_update_latency_cancel_op_cb+0x2c>)
   19db8:	4808      	ldr	r0, [pc, #32]	; (19ddc <ticker_update_latency_cancel_op_cb+0x30>)
   19dba:	f008 f886 	bl	21eca <printk>
   19dbe:	4040      	eors	r0, r0
   19dc0:	f380 8811 	msr	BASEPRI, r0
   19dc4:	f04f 0003 	mov.w	r0, #3
   19dc8:	df02      	svc	2

	conn->slave.latency_cancel = 0U;
   19dca:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   19dce:	f36f 0341 	bfc	r3, #1, #1
   19dd2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
   19dd6:	bd10      	pop	{r4, pc}
   19dd8:	0002f4c0 	.word	0x0002f4c0
   19ddc:	0002a026 	.word	0x0002a026

00019de0 <ticker_op_cb>:
{
   19de0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19de2:	b158      	cbz	r0, 19dfc <ticker_op_cb+0x1c>
   19de4:	f240 2205 	movw	r2, #517	; 0x205
   19de8:	4905      	ldr	r1, [pc, #20]	; (19e00 <ticker_op_cb+0x20>)
   19dea:	4806      	ldr	r0, [pc, #24]	; (19e04 <ticker_op_cb+0x24>)
   19dec:	f008 f86d 	bl	21eca <printk>
   19df0:	4040      	eors	r0, r0
   19df2:	f380 8811 	msr	BASEPRI, r0
   19df6:	f04f 0003 	mov.w	r0, #3
   19dfa:	df02      	svc	2
}
   19dfc:	bd08      	pop	{r3, pc}
   19dfe:	bf00      	nop
   19e00:	0002f4c0 	.word	0x0002f4c0
   19e04:	0002a026 	.word	0x0002a026

00019e08 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   19e08:	2801      	cmp	r0, #1
{
   19e0a:	b510      	push	{r4, lr}
   19e0c:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   19e0e:	d10f      	bne.n	19e30 <ticker_op_stop_adv_cb+0x28>
   19e10:	f7fd ffe2 	bl	17dd8 <ull_disable_mark_get>
   19e14:	4284      	cmp	r4, r0
   19e16:	d00b      	beq.n	19e30 <ticker_op_stop_adv_cb+0x28>
   19e18:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   19e1c:	4905      	ldr	r1, [pc, #20]	; (19e34 <ticker_op_stop_adv_cb+0x2c>)
   19e1e:	4806      	ldr	r0, [pc, #24]	; (19e38 <ticker_op_stop_adv_cb+0x30>)
   19e20:	f008 f853 	bl	21eca <printk>
   19e24:	4040      	eors	r0, r0
   19e26:	f380 8811 	msr	BASEPRI, r0
   19e2a:	f04f 0003 	mov.w	r0, #3
   19e2e:	df02      	svc	2
}
   19e30:	bd10      	pop	{r4, pc}
   19e32:	bf00      	nop
   19e34:	0002f4c0 	.word	0x0002f4c0
   19e38:	0002a026 	.word	0x0002a026

00019e3c <ull_slave_ticker_cb>:
{
   19e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e3e:	460f      	mov	r7, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   19e40:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
{
   19e42:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   19e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19e48:	4299      	cmp	r1, r3
{
   19e4a:	4605      	mov	r5, r0
   19e4c:	4616      	mov	r6, r2
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   19e4e:	d03a      	beq.n	19ec6 <ull_slave_ticker_cb+0x8a>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   19e50:	4601      	mov	r1, r0
   19e52:	4620      	mov	r0, r4
   19e54:	f7e6 fd98 	bl	988 <ull_conn_llcp>
		if (ret) {
   19e58:	2800      	cmp	r0, #0
   19e5a:	d134      	bne.n	19ec6 <ull_slave_ticker_cb+0x8a>
	return ++hdr->ref;
   19e5c:	7c23      	ldrb	r3, [r4, #16]
   19e5e:	3301      	adds	r3, #1
   19e60:	b2db      	uxtb	r3, r3
   19e62:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   19e64:	b95b      	cbnz	r3, 19e7e <ull_slave_ticker_cb+0x42>
   19e66:	f240 12b5 	movw	r2, #437	; 0x1b5
   19e6a:	4917      	ldr	r1, [pc, #92]	; (19ec8 <ull_slave_ticker_cb+0x8c>)
   19e6c:	4817      	ldr	r0, [pc, #92]	; (19ecc <ull_slave_ticker_cb+0x90>)
   19e6e:	f008 f82c 	bl	21eca <printk>
   19e72:	4040      	eors	r0, r0
   19e74:	f380 8811 	msr	BASEPRI, r0
   19e78:	f04f 0003 	mov.w	r0, #3
   19e7c:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
   19e7e:	4a14      	ldr	r2, [pc, #80]	; (19ed0 <ull_slave_ticker_cb+0x94>)
	p.param = &conn->lll;
   19e80:	f104 031c 	add.w	r3, r4, #28
   19e84:	60d3      	str	r3, [r2, #12]
	mfy.param = &p;
   19e86:	4b13      	ldr	r3, [pc, #76]	; (19ed4 <ull_slave_ticker_cb+0x98>)
	p.lazy = lazy;
   19e88:	8116      	strh	r6, [r2, #8]
	p.remainder = remainder;
   19e8a:	e9c2 5700 	strd	r5, r7, [r2]
	mfy.param = &p;
   19e8e:	609a      	str	r2, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19e90:	2200      	movs	r2, #0
   19e92:	4611      	mov	r1, r2
   19e94:	2001      	movs	r0, #1
   19e96:	f7fb fd5b 	bl	15950 <mayfly_enqueue>
	LL_ASSERT(!err);
   19e9a:	b158      	cbz	r0, 19eb4 <ull_slave_ticker_cb+0x78>
   19e9c:	f240 12c1 	movw	r2, #449	; 0x1c1
   19ea0:	4909      	ldr	r1, [pc, #36]	; (19ec8 <ull_slave_ticker_cb+0x8c>)
   19ea2:	480a      	ldr	r0, [pc, #40]	; (19ecc <ull_slave_ticker_cb+0x90>)
   19ea4:	f008 f811 	bl	21eca <printk>
   19ea8:	4040      	eors	r0, r0
   19eaa:	f380 8811 	msr	BASEPRI, r0
   19eae:	f04f 0003 	mov.w	r0, #3
   19eb2:	df02      	svc	2
	ull_conn_tx_demux(UINT8_MAX);
   19eb4:	20ff      	movs	r0, #255	; 0xff
   19eb6:	f7ff fce5 	bl	19884 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   19eba:	4620      	mov	r0, r4
   19ebc:	21ff      	movs	r1, #255	; 0xff
}
   19ebe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   19ec2:	f7ff be73 	b.w	19bac <ull_conn_tx_lll_enqueue>
}
   19ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19ec8:	0002f4c0 	.word	0x0002f4c0
   19ecc:	0002a026 	.word	0x0002a026
   19ed0:	20003f48 	.word	0x20003f48
   19ed4:	20000c1c 	.word	0x20000c1c

00019ed8 <ull_slave_latency_cancel>:
{
   19ed8:	b510      	push	{r4, lr}
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   19eda:	8e83      	ldrh	r3, [r0, #52]	; 0x34
{
   19edc:	b088      	sub	sp, #32
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   19ede:	b333      	cbz	r3, 19f2e <ull_slave_latency_cancel+0x56>
   19ee0:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
   19ee4:	f014 0302 	ands.w	r3, r4, #2
   19ee8:	d121      	bne.n	19f2e <ull_slave_latency_cancel+0x56>
				      (TICKER_ID_CONN_BASE + handle),
   19eea:	1d4a      	adds	r2, r1, #5
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   19eec:	4911      	ldr	r1, [pc, #68]	; (19f34 <ull_slave_latency_cancel+0x5c>)
		conn->slave.latency_cancel = 1U;
   19eee:	f044 0402 	orr.w	r4, r4, #2
   19ef2:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   19ef6:	e9cd 3104 	strd	r3, r1, [sp, #16]
   19efa:	2101      	movs	r1, #1
   19efc:	e9cd 3102 	strd	r3, r1, [sp, #8]
   19f00:	9006      	str	r0, [sp, #24]
   19f02:	e9cd 3300 	strd	r3, r3, [sp]
   19f06:	4618      	mov	r0, r3
   19f08:	b2d2      	uxtb	r2, r2
   19f0a:	2103      	movs	r1, #3
   19f0c:	f00d f985 	bl	2721a <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19f10:	f030 0302 	bics.w	r3, r0, #2
   19f14:	d00b      	beq.n	19f2e <ull_slave_latency_cancel+0x56>
   19f16:	f44f 72c4 	mov.w	r2, #392	; 0x188
   19f1a:	4907      	ldr	r1, [pc, #28]	; (19f38 <ull_slave_latency_cancel+0x60>)
   19f1c:	4807      	ldr	r0, [pc, #28]	; (19f3c <ull_slave_latency_cancel+0x64>)
   19f1e:	f007 ffd4 	bl	21eca <printk>
   19f22:	4040      	eors	r0, r0
   19f24:	f380 8811 	msr	BASEPRI, r0
   19f28:	f04f 0003 	mov.w	r0, #3
   19f2c:	df02      	svc	2
}
   19f2e:	b008      	add	sp, #32
   19f30:	bd10      	pop	{r4, pc}
   19f32:	bf00      	nop
   19f34:	00019dad 	.word	0x00019dad
   19f38:	0002f4c0 	.word	0x0002f4c0
   19f3c:	0002a026 	.word	0x0002a026

00019f40 <ll_wl_clear>:
{
	return WL_SIZE;
}

uint8_t ll_wl_clear(void)
{
   19f40:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_BROADCASTER)
	if (ull_adv_filter_pol_get(0)) {
   19f42:	2000      	movs	r0, #0
   19f44:	f00d fa36 	bl	273b4 <ull_adv_filter_pol_get>
   19f48:	b108      	cbz	r0, 19f4e <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19f4a:	200c      	movs	r0, #12
#endif /* CONFIG_BT_CTLR_PRIVACY */

	wl_anon = 0U;

	return 0;
}
   19f4c:	bd08      	pop	{r3, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   19f4e:	f00d fab9 	bl	274c4 <ull_scan_filter_pol_get>
   19f52:	f010 0001 	ands.w	r0, r0, #1
   19f56:	d1f8      	bne.n	19f4a <ll_wl_clear+0xa>
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   19f58:	4b02      	ldr	r3, [pc, #8]	; (19f64 <ll_wl_clear+0x24>)
   19f5a:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
   19f5c:	7058      	strb	r0, [r3, #1]
	wl_anon = 0U;
   19f5e:	4b02      	ldr	r3, [pc, #8]	; (19f68 <ll_wl_clear+0x28>)
   19f60:	7018      	strb	r0, [r3, #0]
	return 0;
   19f62:	e7f3      	b.n	19f4c <ll_wl_clear+0xc>
   19f64:	20004535 	.word	0x20004535
   19f68:	20004534 	.word	0x20004534

00019f6c <ll_wl_add>:
{
   19f6c:	b570      	push	{r4, r5, r6, lr}
   19f6e:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
   19f70:	2000      	movs	r0, #0
   19f72:	f00d fa1f 	bl	273b4 <ull_adv_filter_pol_get>
   19f76:	b108      	cbz	r0, 19f7c <ll_wl_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19f78:	200c      	movs	r0, #12
}
   19f7a:	bd70      	pop	{r4, r5, r6, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   19f7c:	f00d faa2 	bl	274c4 <ull_scan_filter_pol_get>
   19f80:	f010 0001 	ands.w	r0, r0, #1
   19f84:	d1f8      	bne.n	19f78 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   19f86:	7823      	ldrb	r3, [r4, #0]
   19f88:	2bff      	cmp	r3, #255	; 0xff
   19f8a:	d103      	bne.n	19f94 <ll_wl_add+0x28>
		wl_anon = 1U;
   19f8c:	4b12      	ldr	r3, [pc, #72]	; (19fd8 <ll_wl_add+0x6c>)
   19f8e:	2201      	movs	r2, #1
   19f90:	701a      	strb	r2, [r3, #0]
		return 0;
   19f92:	e7f2      	b.n	19f7a <ll_wl_add+0xe>
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   19f94:	4d11      	ldr	r5, [pc, #68]	; (19fdc <ll_wl_add+0x70>)
   19f96:	782a      	ldrb	r2, [r5, #0]
   19f98:	2aff      	cmp	r2, #255	; 0xff
	return filter_add(&wl_filter, addr->type, addr->a.val);
   19f9a:	f104 0101 	add.w	r1, r4, #1
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   19f9e:	d018      	beq.n	19fd2 <ll_wl_add+0x66>
	     (filter->enable_bitmask & BIT(index));
   19fa0:	fa22 f400 	lsr.w	r4, r2, r0
	for (index = 0;
   19fa4:	f014 0401 	ands.w	r4, r4, #1
   19fa8:	d111      	bne.n	19fce <ll_wl_add+0x62>
	filter->enable_bitmask |= BIT(index);
   19faa:	2601      	movs	r6, #1
   19fac:	4086      	lsls	r6, r0
   19fae:	4332      	orrs	r2, r6
   19fb0:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19fb2:	f003 0301 	and.w	r3, r3, #1
   19fb6:	786a      	ldrb	r2, [r5, #1]
   19fb8:	4083      	lsls	r3, r0
   19fba:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19fbc:	2206      	movs	r2, #6
   19fbe:	fb02 5000 	mla	r0, r2, r0, r5
   19fc2:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19fc4:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19fc6:	f00a f8c2 	bl	2414e <memcpy>
	return filter_add(&wl_filter, addr->type, addr->a.val);
   19fca:	b2e0      	uxtb	r0, r4
   19fcc:	e7d5      	b.n	19f7a <ll_wl_add+0xe>
	     index++) {
   19fce:	3001      	adds	r0, #1
   19fd0:	e7e6      	b.n	19fa0 <ll_wl_add+0x34>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19fd2:	2407      	movs	r4, #7
   19fd4:	e7f9      	b.n	19fca <ll_wl_add+0x5e>
   19fd6:	bf00      	nop
   19fd8:	20004534 	.word	0x20004534
   19fdc:	20004535 	.word	0x20004535

00019fe0 <ll_wl_remove>:
{
   19fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19fe4:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   19fe6:	2000      	movs	r0, #0
   19fe8:	f00d f9e4 	bl	273b4 <ull_adv_filter_pol_get>
   19fec:	b110      	cbz	r0, 19ff4 <ll_wl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19fee:	200c      	movs	r0, #12
}
   19ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   19ff4:	f00d fa66 	bl	274c4 <ull_scan_filter_pol_get>
   19ff8:	f010 0501 	ands.w	r5, r0, #1
   19ffc:	d1f7      	bne.n	19fee <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   19ffe:	f897 8000 	ldrb.w	r8, [r7]
   1a002:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1a006:	d103      	bne.n	1a010 <ll_wl_remove+0x30>
		wl_anon = 0U;
   1a008:	4b17      	ldr	r3, [pc, #92]	; (1a068 <ll_wl_remove+0x88>)
		return 0;
   1a00a:	4628      	mov	r0, r5
		wl_anon = 0U;
   1a00c:	701d      	strb	r5, [r3, #0]
		return 0;
   1a00e:	e7ef      	b.n	19ff0 <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
   1a010:	4c16      	ldr	r4, [pc, #88]	; (1a06c <ll_wl_remove+0x8c>)
   1a012:	7823      	ldrb	r3, [r4, #0]
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   1a014:	3701      	adds	r7, #1
	if (!filter->enable_bitmask) {
   1a016:	b913      	cbnz	r3, 1a01e <ll_wl_remove+0x3e>
		return BT_HCI_ERR_INVALID_PARAM;
   1a018:	2512      	movs	r5, #18
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   1a01a:	b2e8      	uxtb	r0, r5
   1a01c:	e7e8      	b.n	19ff0 <ll_wl_remove+0x10>
	index = WL_SIZE;
   1a01e:	2608      	movs	r6, #8
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1a020:	f104 0902 	add.w	r9, r4, #2
   1a024:	f04f 0a06 	mov.w	sl, #6
	while (index--) {
   1a028:	f116 36ff 	adds.w	r6, r6, #4294967295
   1a02c:	d3f4      	bcc.n	1a018 <ll_wl_remove+0x38>
		if ((filter->enable_bitmask & BIT(index)) &&
   1a02e:	7823      	ldrb	r3, [r4, #0]
   1a030:	40f3      	lsrs	r3, r6
   1a032:	07da      	lsls	r2, r3, #31
   1a034:	d5f8      	bpl.n	1a028 <ll_wl_remove+0x48>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   1a036:	7863      	ldrb	r3, [r4, #1]
   1a038:	4133      	asrs	r3, r6
   1a03a:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
   1a03e:	07db      	lsls	r3, r3, #31
   1a040:	d4f2      	bmi.n	1a028 <ll_wl_remove+0x48>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1a042:	2206      	movs	r2, #6
   1a044:	4639      	mov	r1, r7
   1a046:	fb0a 9006 	mla	r0, sl, r6, r9
   1a04a:	f00a f859 	bl	24100 <memcmp>
		     (addr_type & 0x01)) &&
   1a04e:	2800      	cmp	r0, #0
   1a050:	d1ea      	bne.n	1a028 <ll_wl_remove+0x48>
			filter->enable_bitmask &= ~BIT(index);
   1a052:	2301      	movs	r3, #1
   1a054:	40b3      	lsls	r3, r6
   1a056:	7822      	ldrb	r2, [r4, #0]
   1a058:	43db      	mvns	r3, r3
   1a05a:	b2db      	uxtb	r3, r3
   1a05c:	401a      	ands	r2, r3
   1a05e:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
   1a060:	7862      	ldrb	r2, [r4, #1]
   1a062:	4013      	ands	r3, r2
   1a064:	7063      	strb	r3, [r4, #1]
			return 0;
   1a066:	e7d8      	b.n	1a01a <ll_wl_remove+0x3a>
   1a068:	20004534 	.word	0x20004534
   1a06c:	20004535 	.word	0x20004535

0001a070 <ull_filter_reset>:
	wl_anon = 0U;
   1a070:	4a03      	ldr	r2, [pc, #12]	; (1a080 <ull_filter_reset+0x10>)
   1a072:	2300      	movs	r3, #0
   1a074:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
   1a076:	4a03      	ldr	r2, [pc, #12]	; (1a084 <ull_filter_reset+0x14>)
   1a078:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   1a07a:	7053      	strb	r3, [r2, #1]
}
   1a07c:	4770      	bx	lr
   1a07e:	bf00      	nop
   1a080:	20004534 	.word	0x20004534
   1a084:	20004535 	.word	0x20004535

0001a088 <ull_filter_lll_get>:
{
   1a088:	b508      	push	{r3, lr}
	LL_ASSERT(whitelist);
   1a08a:	b958      	cbnz	r0, 1a0a4 <ull_filter_lll_get+0x1c>
   1a08c:	f240 22d5 	movw	r2, #725	; 0x2d5
   1a090:	4905      	ldr	r1, [pc, #20]	; (1a0a8 <ull_filter_lll_get+0x20>)
   1a092:	4806      	ldr	r0, [pc, #24]	; (1a0ac <ull_filter_lll_get+0x24>)
   1a094:	f007 ff19 	bl	21eca <printk>
   1a098:	4040      	eors	r0, r0
   1a09a:	f380 8811 	msr	BASEPRI, r0
   1a09e:	f04f 0003 	mov.w	r0, #3
   1a0a2:	df02      	svc	2
}
   1a0a4:	4802      	ldr	r0, [pc, #8]	; (1a0b0 <ull_filter_lll_get+0x28>)
   1a0a6:	bd08      	pop	{r3, pc}
   1a0a8:	0002f525 	.word	0x0002f525
   1a0ac:	0002a026 	.word	0x0002a026
   1a0b0:	20004535 	.word	0x20004535

0001a0b4 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1a0b4:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1a0b6:	4b08      	ldr	r3, [pc, #32]	; (1a0d8 <rtc0_nrf5_isr+0x24>)
   1a0b8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1a0bc:	b122      	cbz	r2, 1a0c8 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1a0be:	2000      	movs	r0, #0
   1a0c0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   1a0c4:	f7fc f972 	bl	163ac <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1a0c8:	2001      	movs	r0, #1
   1a0ca:	f7fb fc91 	bl	159f0 <mayfly_run>

#if !defined(CONFIG_BT_CTLR_LOW_LAT) && \
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1a0ce:	2002      	movs	r0, #2
#endif

	DEBUG_TICKER_ISR(0);
}
   1a0d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1a0d4:	f7fb bc8c 	b.w	159f0 <mayfly_run>
   1a0d8:	4000b000 	.word	0x4000b000

0001a0dc <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a0dc:	2801      	cmp	r0, #1
{
   1a0de:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a0e0:	d90b      	bls.n	1a0fa <ticker_stop_op_cb+0x1e>
   1a0e2:	f240 228f 	movw	r2, #655	; 0x28f
   1a0e6:	4905      	ldr	r1, [pc, #20]	; (1a0fc <ticker_stop_op_cb+0x20>)
   1a0e8:	4805      	ldr	r0, [pc, #20]	; (1a100 <ticker_stop_op_cb+0x24>)
   1a0ea:	f007 feee 	bl	21eca <printk>
   1a0ee:	4040      	eors	r0, r0
   1a0f0:	f380 8811 	msr	BASEPRI, r0
   1a0f4:	f04f 0003 	mov.w	r0, #3
   1a0f8:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1a0fa:	bd08      	pop	{r3, pc}
   1a0fc:	0002f5a4 	.word	0x0002f5a4
   1a100:	0002a026 	.word	0x0002a026

0001a104 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a104:	2801      	cmp	r0, #1
{
   1a106:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a108:	d90b      	bls.n	1a122 <ticker_start_op_cb+0x1e>
   1a10a:	f240 229a 	movw	r2, #666	; 0x29a
   1a10e:	4905      	ldr	r1, [pc, #20]	; (1a124 <ticker_start_op_cb+0x20>)
   1a110:	4805      	ldr	r0, [pc, #20]	; (1a128 <ticker_start_op_cb+0x24>)
   1a112:	f007 feda 	bl	21eca <printk>
   1a116:	4040      	eors	r0, r0
   1a118:	f380 8811 	msr	BASEPRI, r0
   1a11c:	f04f 0003 	mov.w	r0, #3
   1a120:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1a122:	bd08      	pop	{r3, pc}
   1a124:	0002f5a4 	.word	0x0002f5a4
   1a128:	0002a026 	.word	0x0002a026

0001a12c <preempt_ticker_start>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
{
   1a12c:	b530      	push	{r4, r5, lr}
	struct evt_hdr *evt;
	uint32_t preempt_to;
	uint32_t ret;

	/* Calc the preempt timeout */
	evt = HDR_LLL2EVT(prepare_param->param);
   1a12e:	68c3      	ldr	r3, [r0, #12]
   1a130:	6819      	ldr	r1, [r3, #0]
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a132:	4b15      	ldr	r3, [pc, #84]	; (1a188 <preempt_ticker_start+0x5c>)
   1a134:	2200      	movs	r2, #0
{
   1a136:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a138:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a13c:	4b13      	ldr	r3, [pc, #76]	; (1a18c <preempt_ticker_start+0x60>)
   1a13e:	9208      	str	r2, [sp, #32]
   1a140:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1a144:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1a148:	9201      	str	r2, [sp, #4]
	preempt_to = MAX(evt->ticks_active_to_start,
   1a14a:	e9d1 5400 	ldrd	r5, r4, [r1]
   1a14e:	688b      	ldr	r3, [r1, #8]
   1a150:	42a5      	cmp	r5, r4
   1a152:	bf2c      	ite	cs
   1a154:	ebc3 0305 	rsbcs	r3, r3, r5
   1a158:	ebc3 0304 	rsbcc	r3, r3, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a15c:	9300      	str	r3, [sp, #0]
   1a15e:	6803      	ldr	r3, [r0, #0]
   1a160:	4611      	mov	r1, r2
   1a162:	4610      	mov	r0, r2
   1a164:	f00d f83e 	bl	271e4 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a168:	2802      	cmp	r0, #2
   1a16a:	d90b      	bls.n	1a184 <preempt_ticker_start+0x58>
   1a16c:	f240 22b9 	movw	r2, #697	; 0x2b9
   1a170:	4907      	ldr	r1, [pc, #28]	; (1a190 <preempt_ticker_start+0x64>)
   1a172:	4808      	ldr	r0, [pc, #32]	; (1a194 <preempt_ticker_start+0x68>)
   1a174:	f007 fea9 	bl	21eca <printk>
   1a178:	4040      	eors	r0, r0
   1a17a:	f380 8811 	msr	BASEPRI, r0
   1a17e:	f04f 0003 	mov.w	r0, #3
   1a182:	df02      	svc	2
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   1a184:	b00b      	add	sp, #44	; 0x2c
   1a186:	bd30      	pop	{r4, r5, pc}
   1a188:	0001a105 	.word	0x0001a105
   1a18c:	0001a351 	.word	0x0001a351
   1a190:	0002f5a4 	.word	0x0002f5a4
   1a194:	0002a026 	.word	0x0002a026

0001a198 <prepare>:
{
   1a198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a19c:	b085      	sub	sp, #20
   1a19e:	4699      	mov	r9, r3
   1a1a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1a1a2:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   1a1a6:	23ff      	movs	r3, #255	; 0xff
{
   1a1a8:	4680      	mov	r8, r0
   1a1aa:	460f      	mov	r7, r1
   1a1ac:	4616      	mov	r6, r2
	idx = UINT8_MAX;
   1a1ae:	f88d 300f 	strb.w	r3, [sp, #15]
		p = ull_prepare_dequeue_iter(&idx);
   1a1b2:	f10d 000f 	add.w	r0, sp, #15
   1a1b6:	f7fe f847 	bl	18248 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1a1ba:	b118      	cbz	r0, 1a1c4 <prepare+0x2c>
   1a1bc:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a1c0:	079b      	lsls	r3, r3, #30
   1a1c2:	d1f6      	bne.n	1a1b2 <prepare+0x1a>
	if (event.curr.abort_cb || (p && is_resume)) {
   1a1c4:	4b20      	ldr	r3, [pc, #128]	; (1a248 <prepare+0xb0>)
   1a1c6:	689a      	ldr	r2, [r3, #8]
   1a1c8:	b90a      	cbnz	r2, 1a1ce <prepare+0x36>
   1a1ca:	b1e0      	cbz	r0, 1a206 <prepare+0x6e>
   1a1cc:	b1dd      	cbz	r5, 1a206 <prepare+0x6e>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1a1ce:	e9cd 9500 	strd	r9, r5, [sp]
   1a1d2:	4633      	mov	r3, r6
   1a1d4:	4622      	mov	r2, r4
   1a1d6:	4639      	mov	r1, r7
   1a1d8:	4640      	mov	r0, r8
   1a1da:	f7fd fed3 	bl	17f84 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1a1de:	b158      	cbz	r0, 1a1f8 <prepare+0x60>
   1a1e0:	f240 2233 	movw	r2, #563	; 0x233
   1a1e4:	4919      	ldr	r1, [pc, #100]	; (1a24c <prepare+0xb4>)
   1a1e6:	481a      	ldr	r0, [pc, #104]	; (1a250 <prepare+0xb8>)
   1a1e8:	f007 fe6f 	bl	21eca <printk>
   1a1ec:	4040      	eors	r0, r0
   1a1ee:	f380 8811 	msr	BASEPRI, r0
   1a1f2:	f04f 0003 	mov.w	r0, #3
   1a1f6:	df02      	svc	2
		if (is_resume) {
   1a1f8:	b915      	cbnz	r5, 1a200 <prepare+0x68>
		preempt_ticker_start(prepare_param);
   1a1fa:	4620      	mov	r0, r4
   1a1fc:	f7ff ff96 	bl	1a12c <preempt_ticker_start>
			return -EINPROGRESS;
   1a200:	f06f 0443 	mvn.w	r4, #67	; 0x43
   1a204:	e01b      	b.n	1a23e <prepare+0xa6>
	event.curr.param = prepare_param->param;
   1a206:	68e2      	ldr	r2, [r4, #12]
	event.curr.abort_cb = abort_cb;
   1a208:	609f      	str	r7, [r3, #8]
	event.curr.is_abort_cb = is_abort_cb;
   1a20a:	e9c3 2800 	strd	r2, r8, [r3]
	err = prepare_cb(prepare_param);
   1a20e:	4620      	mov	r0, r4
   1a210:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a212:	2200      	movs	r2, #0
	err = prepare_cb(prepare_param);
   1a214:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a216:	9200      	str	r2, [sp, #0]
   1a218:	4b0e      	ldr	r3, [pc, #56]	; (1a254 <prepare+0xbc>)
   1a21a:	4611      	mov	r1, r2
   1a21c:	4610      	mov	r0, r2
   1a21e:	f7fc f96d 	bl	164fc <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a222:	2802      	cmp	r0, #2
   1a224:	d90b      	bls.n	1a23e <prepare+0xa6>
   1a226:	f240 226f 	movw	r2, #623	; 0x26f
   1a22a:	4908      	ldr	r1, [pc, #32]	; (1a24c <prepare+0xb4>)
   1a22c:	4808      	ldr	r0, [pc, #32]	; (1a250 <prepare+0xb8>)
   1a22e:	f007 fe4c 	bl	21eca <printk>
   1a232:	4040      	eors	r0, r0
   1a234:	f380 8811 	msr	BASEPRI, r0
   1a238:	f04f 0003 	mov.w	r0, #3
   1a23c:	df02      	svc	2
}
   1a23e:	4620      	mov	r0, r4
   1a240:	b005      	add	sp, #20
   1a242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a246:	bf00      	nop
   1a248:	20003f5c 	.word	0x20003f5c
   1a24c:	0002f5a4 	.word	0x0002f5a4
   1a250:	0002a026 	.word	0x0002a026
   1a254:	0001a0dd 	.word	0x0001a0dd

0001a258 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   1a258:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1a25a:	4c3a      	ldr	r4, [pc, #232]	; (1a344 <preempt+0xec>)
   1a25c:	68a3      	ldr	r3, [r4, #8]
{
   1a25e:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   1a260:	b373      	cbz	r3, 1a2c0 <preempt+0x68>
   1a262:	6823      	ldr	r3, [r4, #0]
   1a264:	b363      	cbz	r3, 1a2c0 <preempt+0x68>
		return;
	}

	idx = UINT8_MAX;
   1a266:	23ff      	movs	r3, #255	; 0xff
   1a268:	f88d 300e 	strb.w	r3, [sp, #14]
	if (!next) {
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
		next = ull_prepare_dequeue_iter(&idx);
   1a26c:	f10d 000e 	add.w	r0, sp, #14
   1a270:	f7fd ffea 	bl	18248 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1a274:	4605      	mov	r5, r0
   1a276:	b318      	cbz	r0, 1a2c0 <preempt+0x68>
   1a278:	f890 0020 	ldrb.w	r0, [r0, #32]
   1a27c:	f010 0603 	ands.w	r6, r0, #3
   1a280:	d1f4      	bne.n	1a26c <preempt+0x14>

	if (!next) {
		return;
	}

	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   1a282:	ab05      	add	r3, sp, #20
   1a284:	9300      	str	r3, [sp, #0]
   1a286:	6867      	ldr	r7, [r4, #4]
   1a288:	6822      	ldr	r2, [r4, #0]
   1a28a:	69e9      	ldr	r1, [r5, #28]
   1a28c:	68e8      	ldr	r0, [r5, #12]
   1a28e:	ab04      	add	r3, sp, #16
   1a290:	47b8      	blx	r7
				     event.curr.param,
				     &resume_cb, &resume_prio);
	if (!ret) {
   1a292:	4607      	mov	r7, r0
   1a294:	b9b0      	cbnz	r0, 1a2c4 <preempt+0x6c>
		/* Let LLL know about the cancelled prepare */
		next->is_aborted = 1;
   1a296:	f895 3020 	ldrb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1a29a:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1a29c:	f043 0302 	orr.w	r3, r3, #2
   1a2a0:	f885 3020 	strb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1a2a4:	4628      	mov	r0, r5
   1a2a6:	69ab      	ldr	r3, [r5, #24]
   1a2a8:	4798      	blx	r3
		LL_ASSERT(ret == -ECANCELED);
	}

preempt_next:
	do {
		next = ull_prepare_dequeue_iter(&idx);
   1a2aa:	f10d 000e 	add.w	r0, sp, #14
   1a2ae:	f7fd ffcb 	bl	18248 <ull_prepare_dequeue_iter>
		if (!next) {
   1a2b2:	b128      	cbz	r0, 1a2c0 <preempt+0x68>
			return;
		}
	} while (next->is_aborted || next->is_resume);
   1a2b4:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a2b8:	079b      	lsls	r3, r3, #30
   1a2ba:	d1f6      	bne.n	1a2aa <preempt+0x52>

	preempt_ticker_start(&next->prepare_param);
   1a2bc:	f7ff ff36 	bl	1a12c <preempt_ticker_start>
}
   1a2c0:	b00b      	add	sp, #44	; 0x2c
   1a2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event.curr.abort_cb(NULL, event.curr.param);
   1a2c4:	68a3      	ldr	r3, [r4, #8]
   1a2c6:	6821      	ldr	r1, [r4, #0]
   1a2c8:	4630      	mov	r0, r6
   1a2ca:	4798      	blx	r3
	if (ret == -EAGAIN) {
   1a2cc:	f117 0f0b 	cmn.w	r7, #11
   1a2d0:	d132      	bne.n	1a338 <preempt+0xe0>
		iter_idx = UINT8_MAX;
   1a2d2:	23ff      	movs	r3, #255	; 0xff
   1a2d4:	f88d 300f 	strb.w	r3, [sp, #15]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1a2d8:	f10d 000f 	add.w	r0, sp, #15
   1a2dc:	f7fd ffb4 	bl	18248 <ull_prepare_dequeue_iter>
		while (iter) {
   1a2e0:	b9d8      	cbnz	r0, 1a31a <preempt+0xc2>
	prepare_param.param = event.curr.param;
   1a2e2:	6823      	ldr	r3, [r4, #0]
   1a2e4:	9309      	str	r3, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1a2e6:	2301      	movs	r3, #1
   1a2e8:	9301      	str	r3, [sp, #4]
   1a2ea:	9b05      	ldr	r3, [sp, #20]
	event.curr.param = NULL;
   1a2ec:	6020      	str	r0, [r4, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1a2ee:	9300      	str	r3, [sp, #0]
   1a2f0:	aa06      	add	r2, sp, #24
   1a2f2:	9b04      	ldr	r3, [sp, #16]
   1a2f4:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   1a2f8:	f7fd fe44 	bl	17f84 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1a2fc:	2800      	cmp	r0, #0
   1a2fe:	d0d4      	beq.n	1a2aa <preempt+0x52>
   1a300:	f240 3201 	movw	r2, #769	; 0x301
		LL_ASSERT(ret == -ECANCELED);
   1a304:	4910      	ldr	r1, [pc, #64]	; (1a348 <preempt+0xf0>)
   1a306:	4811      	ldr	r0, [pc, #68]	; (1a34c <preempt+0xf4>)
   1a308:	f007 fddf 	bl	21eca <printk>
   1a30c:	4040      	eors	r0, r0
   1a30e:	f380 8811 	msr	BASEPRI, r0
   1a312:	f04f 0003 	mov.w	r0, #3
   1a316:	df02      	svc	2
   1a318:	e7c7      	b.n	1a2aa <preempt+0x52>
			if (!iter->is_aborted &&
   1a31a:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a31e:	079a      	lsls	r2, r3, #30
   1a320:	d4da      	bmi.n	1a2d8 <preempt+0x80>
			    event.curr.param == iter->prepare_param.param) {
   1a322:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1a324:	6821      	ldr	r1, [r4, #0]
   1a326:	4291      	cmp	r1, r2
   1a328:	d1d6      	bne.n	1a2d8 <preempt+0x80>
				iter->is_aborted = 1;
   1a32a:	f043 0302 	orr.w	r3, r3, #2
   1a32e:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   1a332:	6983      	ldr	r3, [r0, #24]
   1a334:	4798      	blx	r3
   1a336:	e7cf      	b.n	1a2d8 <preempt+0x80>
		LL_ASSERT(ret == -ECANCELED);
   1a338:	3748      	adds	r7, #72	; 0x48
   1a33a:	d0b6      	beq.n	1a2aa <preempt+0x52>
   1a33c:	f240 3203 	movw	r2, #771	; 0x303
   1a340:	e7e0      	b.n	1a304 <preempt+0xac>
   1a342:	bf00      	nop
   1a344:	20003f5c 	.word	0x20003f5c
   1a348:	0002f5a4 	.word	0x0002f5a4
   1a34c:	0002a026 	.word	0x0002a026

0001a350 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a350:	2200      	movs	r2, #0
{
   1a352:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a354:	4611      	mov	r1, r2
   1a356:	4b09      	ldr	r3, [pc, #36]	; (1a37c <preempt_ticker_cb+0x2c>)
   1a358:	2001      	movs	r0, #1
   1a35a:	f7fb faf9 	bl	15950 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1a35e:	b158      	cbz	r0, 1a378 <preempt_ticker_cb+0x28>
   1a360:	f240 22c5 	movw	r2, #709	; 0x2c5
   1a364:	4906      	ldr	r1, [pc, #24]	; (1a380 <preempt_ticker_cb+0x30>)
   1a366:	4807      	ldr	r0, [pc, #28]	; (1a384 <preempt_ticker_cb+0x34>)
   1a368:	f007 fdaf 	bl	21eca <printk>
   1a36c:	4040      	eors	r0, r0
   1a36e:	f380 8811 	msr	BASEPRI, r0
   1a372:	f04f 0003 	mov.w	r0, #3
   1a376:	df02      	svc	2
}
   1a378:	bd08      	pop	{r3, pc}
   1a37a:	bf00      	nop
   1a37c:	20000c2c 	.word	0x20000c2c
   1a380:	0002f5a4 	.word	0x0002f5a4
   1a384:	0002a026 	.word	0x0002a026

0001a388 <lll_init>:
{
   1a388:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1a38a:	4816      	ldr	r0, [pc, #88]	; (1a3e4 <lll_init+0x5c>)
   1a38c:	f003 fe48 	bl	1e020 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1a390:	4b15      	ldr	r3, [pc, #84]	; (1a3e8 <lll_init+0x60>)
   1a392:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1a394:	b310      	cbz	r0, 1a3dc <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1a396:	4b15      	ldr	r3, [pc, #84]	; (1a3ec <lll_init+0x64>)
   1a398:	2400      	movs	r4, #0
   1a39a:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1a39c:	f000 f984 	bl	1a6a8 <lll_clock_init>
	if (err < 0) {
   1a3a0:	2800      	cmp	r0, #0
   1a3a2:	db1a      	blt.n	1a3da <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1a3a4:	4622      	mov	r2, r4
   1a3a6:	4621      	mov	r1, r4
   1a3a8:	2001      	movs	r0, #1
   1a3aa:	f7ea fa51 	bl	4850 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1a3ae:	4622      	mov	r2, r4
   1a3b0:	4621      	mov	r1, r4
   1a3b2:	200b      	movs	r0, #11
   1a3b4:	f7ea fa4c 	bl	4850 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1a3b8:	4622      	mov	r2, r4
   1a3ba:	4621      	mov	r1, r4
   1a3bc:	2018      	movs	r0, #24
   1a3be:	f7ea fa47 	bl	4850 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1a3c2:	2001      	movs	r0, #1
   1a3c4:	f7ea fa12 	bl	47ec <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1a3c8:	200b      	movs	r0, #11
   1a3ca:	f7ea fa0f 	bl	47ec <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1a3ce:	2018      	movs	r0, #24
   1a3d0:	f7ea fa0c 	bl	47ec <arch_irq_enable>
	radio_setup();
   1a3d4:	f00d fc8f 	bl	27cf6 <radio_setup>
	return 0;
   1a3d8:	4620      	mov	r0, r4
}
   1a3da:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1a3dc:	f06f 0012 	mvn.w	r0, #18
   1a3e0:	e7fb      	b.n	1a3da <lll_init+0x52>
   1a3e2:	bf00      	nop
   1a3e4:	0002f594 	.word	0x0002f594
   1a3e8:	20003f58 	.word	0x20003f58
   1a3ec:	20003f5c 	.word	0x20003f5c

0001a3f0 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1a3f0:	4b0c      	ldr	r3, [pc, #48]	; (1a424 <lll_csrand_get+0x34>)
{
   1a3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3f6:	4606      	mov	r6, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1a3f8:	681c      	ldr	r4, [r3, #0]
   1a3fa:	b28f      	uxth	r7, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1a3fc:	68a5      	ldr	r5, [r4, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1a3fe:	682b      	ldr	r3, [r5, #0]
   1a400:	b943      	cbnz	r3, 1a414 <lll_csrand_get+0x24>
   1a402:	4909      	ldr	r1, [pc, #36]	; (1a428 <lll_csrand_get+0x38>)
   1a404:	4809      	ldr	r0, [pc, #36]	; (1a42c <lll_csrand_get+0x3c>)
   1a406:	224c      	movs	r2, #76	; 0x4c
   1a408:	f007 fd5f 	bl	21eca <printk>
   1a40c:	214c      	movs	r1, #76	; 0x4c
   1a40e:	4806      	ldr	r0, [pc, #24]	; (1a428 <lll_csrand_get+0x38>)
   1a410:	f008 f80d 	bl	2242e <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1a414:	682b      	ldr	r3, [r5, #0]
   1a416:	463a      	mov	r2, r7
   1a418:	4631      	mov	r1, r6
   1a41a:	4620      	mov	r0, r4
}
   1a41c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a420:	4718      	bx	r3
   1a422:	bf00      	nop
   1a424:	20003f58 	.word	0x20003f58
   1a428:	0002f567 	.word	0x0002f567
   1a42c:	0002a026 	.word	0x0002a026

0001a430 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1a430:	4b08      	ldr	r3, [pc, #32]	; (1a454 <lll_csrand_isr_get+0x24>)
{
   1a432:	b430      	push	{r4, r5}
   1a434:	4605      	mov	r5, r0
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1a436:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1a438:	6883      	ldr	r3, [r0, #8]
   1a43a:	685c      	ldr	r4, [r3, #4]
   1a43c:	b28a      	uxth	r2, r1
   1a43e:	b124      	cbz	r4, 1a44a <lll_csrand_isr_get+0x1a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1a440:	4629      	mov	r1, r5
   1a442:	46a4      	mov	ip, r4
   1a444:	2300      	movs	r3, #0
}
   1a446:	bc30      	pop	{r4, r5}
   1a448:	4760      	bx	ip
   1a44a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a44e:	bc30      	pop	{r4, r5}
   1a450:	4770      	bx	lr
   1a452:	bf00      	nop
   1a454:	20003f58 	.word	0x20003f58

0001a458 <lll_resume>:
{
   1a458:	b507      	push	{r0, r1, r2, lr}
		      next->prio, &next->prepare_param, next->is_resume);
   1a45a:	f890 3020 	ldrb.w	r3, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1a45e:	f003 0301 	and.w	r3, r3, #1
   1a462:	e9cd 0300 	strd	r0, r3, [sp]
   1a466:	69c3      	ldr	r3, [r0, #28]
   1a468:	6902      	ldr	r2, [r0, #16]
   1a46a:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1a46e:	f7ff fe93 	bl	1a198 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1a472:	b160      	cbz	r0, 1a48e <lll_resume+0x36>
   1a474:	3044      	adds	r0, #68	; 0x44
   1a476:	d00a      	beq.n	1a48e <lll_resume+0x36>
   1a478:	22e9      	movs	r2, #233	; 0xe9
   1a47a:	4906      	ldr	r1, [pc, #24]	; (1a494 <lll_resume+0x3c>)
   1a47c:	4806      	ldr	r0, [pc, #24]	; (1a498 <lll_resume+0x40>)
   1a47e:	f007 fd24 	bl	21eca <printk>
   1a482:	4040      	eors	r0, r0
   1a484:	f380 8811 	msr	BASEPRI, r0
   1a488:	f04f 0003 	mov.w	r0, #3
   1a48c:	df02      	svc	2
}
   1a48e:	b003      	add	sp, #12
   1a490:	f85d fb04 	ldr.w	pc, [sp], #4
   1a494:	0002f5a4 	.word	0x0002f5a4
   1a498:	0002a026 	.word	0x0002a026

0001a49c <lll_disable>:
{
   1a49c:	b513      	push	{r0, r1, r4, lr}
   1a49e:	4b1a      	ldr	r3, [pc, #104]	; (1a508 <lll_disable+0x6c>)
	if (!param || (param == event.curr.param)) {
   1a4a0:	4604      	mov	r4, r0
   1a4a2:	b110      	cbz	r0, 1a4aa <lll_disable+0xe>
   1a4a4:	681a      	ldr	r2, [r3, #0]
   1a4a6:	4282      	cmp	r2, r0
   1a4a8:	d105      	bne.n	1a4b6 <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
   1a4aa:	689a      	ldr	r2, [r3, #8]
   1a4ac:	b16a      	cbz	r2, 1a4ca <lll_disable+0x2e>
   1a4ae:	6819      	ldr	r1, [r3, #0]
   1a4b0:	b159      	cbz	r1, 1a4ca <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
   1a4b2:	2000      	movs	r0, #0
   1a4b4:	4790      	blx	r2
		idx = UINT8_MAX;
   1a4b6:	23ff      	movs	r3, #255	; 0xff
   1a4b8:	f88d 3007 	strb.w	r3, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   1a4bc:	f10d 0007 	add.w	r0, sp, #7
   1a4c0:	f7fd fec2 	bl	18248 <ull_prepare_dequeue_iter>
		while (next) {
   1a4c4:	b978      	cbnz	r0, 1a4e6 <lll_disable+0x4a>
}
   1a4c6:	b002      	add	sp, #8
   1a4c8:	bd10      	pop	{r4, pc}
			LL_ASSERT(!param);
   1a4ca:	2c00      	cmp	r4, #0
   1a4cc:	d0f3      	beq.n	1a4b6 <lll_disable+0x1a>
   1a4ce:	22f3      	movs	r2, #243	; 0xf3
   1a4d0:	490e      	ldr	r1, [pc, #56]	; (1a50c <lll_disable+0x70>)
   1a4d2:	480f      	ldr	r0, [pc, #60]	; (1a510 <lll_disable+0x74>)
   1a4d4:	f007 fcf9 	bl	21eca <printk>
   1a4d8:	4040      	eors	r0, r0
   1a4da:	f380 8811 	msr	BASEPRI, r0
   1a4de:	f04f 0003 	mov.w	r0, #3
   1a4e2:	df02      	svc	2
   1a4e4:	e7e7      	b.n	1a4b6 <lll_disable+0x1a>
			if (!next->is_aborted &&
   1a4e6:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a4ea:	079b      	lsls	r3, r3, #30
   1a4ec:	d4e6      	bmi.n	1a4bc <lll_disable+0x20>
   1a4ee:	68c1      	ldr	r1, [r0, #12]
   1a4f0:	b10c      	cbz	r4, 1a4f6 <lll_disable+0x5a>
			    (!param || (param == next->prepare_param.param))) {
   1a4f2:	428c      	cmp	r4, r1
   1a4f4:	d1e2      	bne.n	1a4bc <lll_disable+0x20>
				next->is_aborted = 1;
   1a4f6:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a4fa:	f043 0302 	orr.w	r3, r3, #2
   1a4fe:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1a502:	6983      	ldr	r3, [r0, #24]
   1a504:	4798      	blx	r3
   1a506:	e7d9      	b.n	1a4bc <lll_disable+0x20>
   1a508:	20003f5c 	.word	0x20003f5c
   1a50c:	0002f5a4 	.word	0x0002f5a4
   1a510:	0002a026 	.word	0x0002a026

0001a514 <lll_done>:
{
   1a514:	b510      	push	{r4, lr}
   1a516:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1a518:	f7fd fd66 	bl	17fe8 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1a51c:	b174      	cbz	r4, 1a53c <lll_done+0x28>
   1a51e:	b958      	cbnz	r0, 1a538 <lll_done+0x24>
   1a520:	f44f 7293 	mov.w	r2, #294	; 0x126
   1a524:	4919      	ldr	r1, [pc, #100]	; (1a58c <lll_done+0x78>)
   1a526:	481a      	ldr	r0, [pc, #104]	; (1a590 <lll_done+0x7c>)
   1a528:	f007 fccf 	bl	21eca <printk>
   1a52c:	4040      	eors	r0, r0
   1a52e:	f380 8811 	msr	BASEPRI, r0
   1a532:	f04f 0003 	mov.w	r0, #3
   1a536:	df02      	svc	2
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1a538:	6820      	ldr	r0, [r4, #0]
   1a53a:	e014      	b.n	1a566 <lll_done+0x52>
		LL_ASSERT(event.curr.abort_cb);
   1a53c:	4c15      	ldr	r4, [pc, #84]	; (1a594 <lll_done+0x80>)
   1a53e:	68a3      	ldr	r3, [r4, #8]
   1a540:	b95b      	cbnz	r3, 1a55a <lll_done+0x46>
   1a542:	f44f 7296 	mov.w	r2, #300	; 0x12c
   1a546:	4911      	ldr	r1, [pc, #68]	; (1a58c <lll_done+0x78>)
   1a548:	4811      	ldr	r0, [pc, #68]	; (1a590 <lll_done+0x7c>)
   1a54a:	f007 fcbe 	bl	21eca <printk>
   1a54e:	4040      	eors	r0, r0
   1a550:	f380 8811 	msr	BASEPRI, r0
   1a554:	f04f 0003 	mov.w	r0, #3
   1a558:	df02      	svc	2
		param = event.curr.param;
   1a55a:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1a55c:	2300      	movs	r3, #0
   1a55e:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1a560:	6023      	str	r3, [r4, #0]
		if (param) {
   1a562:	b108      	cbz	r0, 1a568 <lll_done+0x54>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1a564:	6800      	ldr	r0, [r0, #0]
   1a566:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1a568:	f7fd fe9c 	bl	182a4 <ull_event_done>
	LL_ASSERT(evdone);
   1a56c:	b958      	cbnz	r0, 1a586 <lll_done+0x72>
   1a56e:	f44f 72a2 	mov.w	r2, #324	; 0x144
   1a572:	4906      	ldr	r1, [pc, #24]	; (1a58c <lll_done+0x78>)
   1a574:	4806      	ldr	r0, [pc, #24]	; (1a590 <lll_done+0x7c>)
   1a576:	f007 fca8 	bl	21eca <printk>
   1a57a:	4040      	eors	r0, r0
   1a57c:	f380 8811 	msr	BASEPRI, r0
   1a580:	f04f 0003 	mov.w	r0, #3
   1a584:	df02      	svc	2
}
   1a586:	2000      	movs	r0, #0
   1a588:	bd10      	pop	{r4, pc}
   1a58a:	bf00      	nop
   1a58c:	0002f5a4 	.word	0x0002f5a4
   1a590:	0002a026 	.word	0x0002a026
   1a594:	20003f5c 	.word	0x20003f5c

0001a598 <lll_is_done>:
	return !event.curr.abort_cb;
   1a598:	4b02      	ldr	r3, [pc, #8]	; (1a5a4 <lll_is_done+0xc>)
   1a59a:	6898      	ldr	r0, [r3, #8]
}
   1a59c:	fab0 f080 	clz	r0, r0
   1a5a0:	0940      	lsrs	r0, r0, #5
   1a5a2:	4770      	bx	lr
   1a5a4:	20003f5c 	.word	0x20003f5c

0001a5a8 <lll_chan_set>:
	switch (chan) {
   1a5a8:	2826      	cmp	r0, #38	; 0x26
{
   1a5aa:	b510      	push	{r4, lr}
   1a5ac:	4604      	mov	r4, r0
	switch (chan) {
   1a5ae:	d00b      	beq.n	1a5c8 <lll_chan_set+0x20>
   1a5b0:	2827      	cmp	r0, #39	; 0x27
   1a5b2:	d00b      	beq.n	1a5cc <lll_chan_set+0x24>
   1a5b4:	2825      	cmp	r0, #37	; 0x25
   1a5b6:	d10b      	bne.n	1a5d0 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1a5b8:	2002      	movs	r0, #2
		radio_freq_chan_set(26);
   1a5ba:	f001 fbd3 	bl	1bd64 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a5be:	4620      	mov	r0, r4
}
   1a5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a5c4:	f001 bbd4 	b.w	1bd70 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1a5c8:	201a      	movs	r0, #26
   1a5ca:	e7f6      	b.n	1a5ba <lll_chan_set+0x12>
		radio_freq_chan_set(80);
   1a5cc:	2050      	movs	r0, #80	; 0x50
   1a5ce:	e7f4      	b.n	1a5ba <lll_chan_set+0x12>
		if (chan < 11) {
   1a5d0:	280a      	cmp	r0, #10
   1a5d2:	d802      	bhi.n	1a5da <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
   1a5d4:	3002      	adds	r0, #2
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1a5d6:	0040      	lsls	r0, r0, #1
   1a5d8:	e7ef      	b.n	1a5ba <lll_chan_set+0x12>
		} else if (chan < 40) {
   1a5da:	2827      	cmp	r0, #39	; 0x27
   1a5dc:	d801      	bhi.n	1a5e2 <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1a5de:	3003      	adds	r0, #3
   1a5e0:	e7f9      	b.n	1a5d6 <lll_chan_set+0x2e>
			LL_ASSERT(0);
   1a5e2:	f240 12a7 	movw	r2, #423	; 0x1a7
   1a5e6:	4905      	ldr	r1, [pc, #20]	; (1a5fc <lll_chan_set+0x54>)
   1a5e8:	4805      	ldr	r0, [pc, #20]	; (1a600 <lll_chan_set+0x58>)
   1a5ea:	f007 fc6e 	bl	21eca <printk>
   1a5ee:	4040      	eors	r0, r0
   1a5f0:	f380 8811 	msr	BASEPRI, r0
   1a5f4:	f04f 0003 	mov.w	r0, #3
   1a5f8:	df02      	svc	2
   1a5fa:	e7e0      	b.n	1a5be <lll_chan_set+0x16>
   1a5fc:	0002f5a4 	.word	0x0002f5a4
   1a600:	0002a026 	.word	0x0002a026

0001a604 <lll_isr_cleanup>:
{
   1a604:	b508      	push	{r3, lr}
	radio_isr_set(isr_race, param);
   1a606:	4601      	mov	r1, r0
   1a608:	480f      	ldr	r0, [pc, #60]	; (1a648 <lll_isr_cleanup+0x44>)
   1a60a:	f001 fb51 	bl	1bcb0 <radio_isr_set>
	if (!radio_is_idle()) {
   1a60e:	f001 fc4f 	bl	1beb0 <radio_is_idle>
   1a612:	b908      	cbnz	r0, 1a618 <lll_isr_cleanup+0x14>
		radio_disable();
   1a614:	f001 fc1a 	bl	1be4c <radio_disable>
	radio_tmr_stop();
   1a618:	f001 fdae 	bl	1c178 <radio_tmr_stop>
	err = lll_hfclock_off();
   1a61c:	f000 f886 	bl	1a72c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1a620:	2800      	cmp	r0, #0
   1a622:	da0b      	bge.n	1a63c <lll_isr_cleanup+0x38>
   1a624:	f240 220a 	movw	r2, #522	; 0x20a
   1a628:	4908      	ldr	r1, [pc, #32]	; (1a64c <lll_isr_cleanup+0x48>)
   1a62a:	4809      	ldr	r0, [pc, #36]	; (1a650 <lll_isr_cleanup+0x4c>)
   1a62c:	f007 fc4d 	bl	21eca <printk>
   1a630:	4040      	eors	r0, r0
   1a632:	f380 8811 	msr	BASEPRI, r0
   1a636:	f04f 0003 	mov.w	r0, #3
   1a63a:	df02      	svc	2
	lll_done(NULL);
   1a63c:	2000      	movs	r0, #0
}
   1a63e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1a642:	f7ff bf67 	b.w	1a514 <lll_done>
   1a646:	bf00      	nop
   1a648:	00027839 	.word	0x00027839
   1a64c:	0002f5a4 	.word	0x0002f5a4
   1a650:	0002a026 	.word	0x0002a026

0001a654 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1a654:	b530      	push	{r4, r5, lr}
   1a656:	4604      	mov	r4, r0
   1a658:	b08b      	sub	sp, #44	; 0x2c
   1a65a:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a65c:	2201      	movs	r2, #1
   1a65e:	2100      	movs	r1, #0
   1a660:	a804      	add	r0, sp, #16
   1a662:	f00e f86d 	bl	28740 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1a666:	2300      	movs	r3, #0
   1a668:	9303      	str	r3, [sp, #12]
   1a66a:	4b0e      	ldr	r3, [pc, #56]	; (1a6a4 <blocking_on+0x50>)
   1a66c:	9301      	str	r3, [sp, #4]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1a66e:	4669      	mov	r1, sp
   1a670:	2303      	movs	r3, #3
   1a672:	4620      	mov	r0, r4
   1a674:	9302      	str	r3, [sp, #8]
   1a676:	f7e7 ff75 	bl	2564 <onoff_request>
	if (err < 0) {
   1a67a:	2800      	cmp	r0, #0
   1a67c:	db10      	blt.n	1a6a0 <blocking_on+0x4c>
   1a67e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   1a682:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a686:	2100      	movs	r1, #0
   1a688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a68c:	2300      	movs	r3, #0
   1a68e:	fbe4 0105 	umlal	r0, r1, r4, r5
   1a692:	f7e5 fd35 	bl	100 <__aeabi_uldivmod>
   1a696:	4602      	mov	r2, r0
   1a698:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1a69a:	a804      	add	r0, sp, #16
   1a69c:	f005 fb2a 	bl	1fcf4 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1a6a0:	b00b      	add	sp, #44	; 0x2c
   1a6a2:	bd30      	pop	{r4, r5, pc}
   1a6a4:	00027911 	.word	0x00027911

0001a6a8 <lll_clock_init>:

int lll_clock_init(void)
{
   1a6a8:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1a6aa:	2001      	movs	r0, #1
   1a6ac:	f7e9 fbe0 	bl	3e70 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1a6b0:	4904      	ldr	r1, [pc, #16]	; (1a6c4 <lll_clock_init+0x1c>)
   1a6b2:	2300      	movs	r3, #0
   1a6b4:	604b      	str	r3, [r1, #4]
   1a6b6:	60cb      	str	r3, [r1, #12]
   1a6b8:	2301      	movs	r3, #1
   1a6ba:	608b      	str	r3, [r1, #8]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1a6bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_request(mgr, &lf_cli);
   1a6c0:	f7e7 bf50 	b.w	2564 <onoff_request>
   1a6c4:	20003f74 	.word	0x20003f74

0001a6c8 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1a6c8:	4b0c      	ldr	r3, [pc, #48]	; (1a6fc <lll_clock_wait+0x34>)
   1a6ca:	781a      	ldrb	r2, [r3, #0]
{
   1a6cc:	b510      	push	{r4, lr}
	if (done) {
   1a6ce:	b10a      	cbz	r2, 1a6d4 <lll_clock_wait+0xc>
		return 0;
   1a6d0:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1a6d2:	bd10      	pop	{r4, pc}
	done = true;
   1a6d4:	2001      	movs	r0, #1
   1a6d6:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1a6d8:	f7e9 fbca 	bl	3e70 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1a6dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1a6e0:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1a6e2:	f7ff ffb7 	bl	1a654 <blocking_on>
	if (err) {
   1a6e6:	2800      	cmp	r0, #0
   1a6e8:	d1f3      	bne.n	1a6d2 <lll_clock_wait+0xa>
	err = onoff_release(mgr);
   1a6ea:	4620      	mov	r0, r4
   1a6ec:	f7e7 ffbc 	bl	2668 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1a6f0:	2802      	cmp	r0, #2
   1a6f2:	d0ed      	beq.n	1a6d0 <lll_clock_wait+0x8>
		return -EIO;
   1a6f4:	f06f 0004 	mvn.w	r0, #4
   1a6f8:	e7eb      	b.n	1a6d2 <lll_clock_wait+0xa>
   1a6fa:	bf00      	nop
   1a6fc:	20004567 	.word	0x20004567

0001a700 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1a700:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a702:	4b09      	ldr	r3, [pc, #36]	; (1a728 <lll_hfclock_on+0x28>)
   1a704:	f3bf 8f5b 	dmb	ish
   1a708:	e853 2f00 	ldrex	r2, [r3]
   1a70c:	1c51      	adds	r1, r2, #1
   1a70e:	e843 1000 	strex	r0, r1, [r3]
   1a712:	2800      	cmp	r0, #0
   1a714:	d1f8      	bne.n	1a708 <lll_hfclock_on+0x8>
   1a716:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1a71a:	2a00      	cmp	r2, #0
   1a71c:	dc01      	bgt.n	1a722 <lll_hfclock_on+0x22>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_request();
   1a71e:	f7e9 fbaf 	bl	3e80 <z_nrf_clock_bt_ctlr_hf_request>
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1a722:	2000      	movs	r0, #0
   1a724:	bd08      	pop	{r3, pc}
   1a726:	bf00      	nop
   1a728:	20003f70 	.word	0x20003f70

0001a72c <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1a72c:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1a72e:	4b0c      	ldr	r3, [pc, #48]	; (1a760 <lll_hfclock_off+0x34>)
   1a730:	681a      	ldr	r2, [r3, #0]
   1a732:	2a00      	cmp	r2, #0
   1a734:	dd10      	ble.n	1a758 <lll_hfclock_off+0x2c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a736:	f3bf 8f5b 	dmb	ish
   1a73a:	e853 2f00 	ldrex	r2, [r3]
   1a73e:	1e51      	subs	r1, r2, #1
   1a740:	e843 1000 	strex	r0, r1, [r3]
   1a744:	2800      	cmp	r0, #0
   1a746:	d1f8      	bne.n	1a73a <lll_hfclock_off+0xe>
   1a748:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1a74c:	2a01      	cmp	r2, #1
   1a74e:	dc01      	bgt.n	1a754 <lll_hfclock_off+0x28>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_release();
   1a750:	f7e9 fbac 	bl	3eac <z_nrf_clock_bt_ctlr_hf_release>
		return 0;
   1a754:	2000      	movs	r0, #0
   1a756:	e001      	b.n	1a75c <lll_hfclock_off+0x30>
		return -EALREADY;
   1a758:	f06f 0044 	mvn.w	r0, #68	; 0x44
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1a75c:	bd08      	pop	{r3, pc}
   1a75e:	bf00      	nop
   1a760:	20003f70 	.word	0x20003f70

0001a764 <lll_clock_ppm_get>:
}

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
}
   1a764:	4b01      	ldr	r3, [pc, #4]	; (1a76c <lll_clock_ppm_get+0x8>)
   1a766:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1a76a:	4770      	bx	lr
   1a76c:	00029bd8 	.word	0x00029bd8

0001a770 <is_abort_cb>:
	struct lll_adv *lll = curr;
	struct pdu_adv *pdu;
#endif /* CONFIG_BT_PERIPHERAL */

	/* TODO: prio check */
	if (next != curr) {
   1a770:	4282      	cmp	r2, r0
{
   1a772:	b508      	push	{r3, lr}
	if (next != curr) {
   1a774:	d01a      	beq.n	1a7ac <is_abort_cb+0x3c>
		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->is_hdcd) {
   1a776:	7b12      	ldrb	r2, [r2, #12]
   1a778:	07d2      	lsls	r2, r2, #31
   1a77a:	d524      	bpl.n	1a7c6 <is_abort_cb+0x56>
			int err;

			/* wrap back after the pre-empter */
			*resume_cb = resume_prepare_cb;
   1a77c:	4a13      	ldr	r2, [pc, #76]	; (1a7cc <is_abort_cb+0x5c>)
   1a77e:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1a780:	9b02      	ldr	r3, [sp, #8]
   1a782:	2200      	movs	r2, #0
   1a784:	601a      	str	r2, [r3, #0]

			/* Retain HF clk */
			err = lll_hfclock_on();
   1a786:	f7ff ffbb 	bl	1a700 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1a78a:	2800      	cmp	r0, #0
   1a78c:	da0b      	bge.n	1a7a6 <is_abort_cb+0x36>
   1a78e:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1a792:	490f      	ldr	r1, [pc, #60]	; (1a7d0 <is_abort_cb+0x60>)
   1a794:	480f      	ldr	r0, [pc, #60]	; (1a7d4 <is_abort_cb+0x64>)
   1a796:	f007 fb98 	bl	21eca <printk>
   1a79a:	4040      	eors	r0, r0
   1a79c:	f380 8811 	msr	BASEPRI, r0
   1a7a0:	f04f 0003 	mov.w	r0, #3
   1a7a4:	df02      	svc	2
   1a7a6:	f06f 000a 	mvn.w	r0, #10
   1a7aa:	e00b      	b.n	1a7c4 <is_abort_cb+0x54>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1a7ac:	7c13      	ldrb	r3, [r2, #16]
   1a7ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		}
	}

#if defined(CONFIG_BT_PERIPHERAL)
	pdu = lll_adv_data_curr_get(lll);
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1a7b2:	6953      	ldr	r3, [r2, #20]
   1a7b4:	781b      	ldrb	r3, [r3, #0]
   1a7b6:	f003 030f 	and.w	r3, r3, #15
   1a7ba:	2b01      	cmp	r3, #1
		return 0;
   1a7bc:	bf14      	ite	ne
   1a7be:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   1a7c2:	2000      	moveq	r0, #0
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return -ECANCELED;
}
   1a7c4:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   1a7c6:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1a7ca:	e7fb      	b.n	1a7c4 <is_abort_cb+0x54>
   1a7cc:	00027943 	.word	0x00027943
   1a7d0:	0002f5fc 	.word	0x0002f5fc
   1a7d4:	0002a026 	.word	0x0002a026

0001a7d8 <abort_cb>:

static void abort_cb(struct lll_prepare_param *prepare_param, void *param)
{
   1a7d8:	b510      	push	{r4, lr}
   1a7da:	460c      	mov	r4, r1
	int err;

	/* NOTE: This is not a prepare being cancelled */
	if (!prepare_param) {
   1a7dc:	b930      	cbnz	r0, 1a7ec <abort_cb+0x14>
		/* Perform event abort here.
		 * After event has been cleanly aborted, clean up resources
		 * and dispatch event done.
		 */
		radio_isr_set(isr_abort, param);
   1a7de:	480e      	ldr	r0, [pc, #56]	; (1a818 <abort_cb+0x40>)
   1a7e0:	f001 fa66 	bl	1bcb0 <radio_isr_set>
	 */
	err = lll_hfclock_off();
	LL_ASSERT(err >= 0);

	lll_done(param);
}
   1a7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1a7e8:	f001 bb30 	b.w	1be4c <radio_disable>
	err = lll_hfclock_off();
   1a7ec:	f7ff ff9e 	bl	1a72c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1a7f0:	2800      	cmp	r0, #0
   1a7f2:	da0b      	bge.n	1a80c <abort_cb+0x34>
   1a7f4:	f240 2272 	movw	r2, #626	; 0x272
   1a7f8:	4908      	ldr	r1, [pc, #32]	; (1a81c <abort_cb+0x44>)
   1a7fa:	4809      	ldr	r0, [pc, #36]	; (1a820 <abort_cb+0x48>)
   1a7fc:	f007 fb65 	bl	21eca <printk>
   1a800:	4040      	eors	r0, r0
   1a802:	f380 8811 	msr	BASEPRI, r0
   1a806:	f04f 0003 	mov.w	r0, #3
   1a80a:	df02      	svc	2
	lll_done(param);
   1a80c:	4620      	mov	r0, r4
}
   1a80e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1a812:	f7ff be7f 	b.w	1a514 <lll_done>
   1a816:	bf00      	nop
   1a818:	0002791d 	.word	0x0002791d
   1a81c:	0002f5fc 	.word	0x0002f5fc
   1a820:	0002a026 	.word	0x0002a026

0001a824 <isr_tx>:

static void isr_tx(void *param)
{
   1a824:	b538      	push	{r3, r4, r5, lr}
   1a826:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_latency_capture();
	}

	/* Clear radio tx status and events */
	lll_isr_tx_status_reset();
   1a828:	f00d f84c 	bl	278c4 <lll_isr_tx_status_reset>

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   1a82c:	2096      	movs	r0, #150	; 0x96
   1a82e:	f001 fbfb 	bl	1c028 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   1a832:	2300      	movs	r3, #0
   1a834:	461a      	mov	r2, r3
   1a836:	4619      	mov	r1, r3
   1a838:	4618      	mov	r0, r3
   1a83a:	f001 fb6d 	bl	1bf18 <radio_switch_complete_and_tx>

	radio_pkt_rx_set(radio_pkt_scratch_get());
   1a83e:	f001 fb5b 	bl	1bef8 <radio_pkt_scratch_get>
   1a842:	f001 faeb 	bl	1be1c <radio_pkt_rx_set>
	/* assert if radio packet ptr is not set and radio started rx */
	LL_ASSERT(!radio_is_ready());
   1a846:	f001 fb1f 	bl	1be88 <radio_is_ready>
   1a84a:	b158      	cbz	r0, 1a864 <isr_tx+0x40>
   1a84c:	f240 228e 	movw	r2, #654	; 0x28e
   1a850:	4911      	ldr	r1, [pc, #68]	; (1a898 <isr_tx+0x74>)
   1a852:	4812      	ldr	r0, [pc, #72]	; (1a89c <isr_tx+0x78>)
   1a854:	f007 fb39 	bl	21eca <printk>
   1a858:	4040      	eors	r0, r0
   1a85a:	f380 8811 	msr	BASEPRI, r0
   1a85e:	f04f 0003 	mov.w	r0, #3
   1a862:	df02      	svc	2

	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_cputime_capture();
	}

	radio_isr_set(isr_rx, param);
   1a864:	4621      	mov	r1, r4
   1a866:	480e      	ldr	r0, [pc, #56]	; (1a8a0 <isr_tx+0x7c>)
   1a868:	f001 fa22 	bl	1bcb0 <radio_isr_set>
		radio_ar_configure(count, irks, 0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	/* +/- 2us active clock jitter, +1 us hcto compensation */
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1a86c:	f001 fcd6 	bl	1c21c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1a870:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1a872:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1a874:	4608      	mov	r0, r1
   1a876:	f00d fa64 	bl	27d42 <radio_rx_chain_delay_get>
	hcto += addr_us_get(phy_p);
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1a87a:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1a87c:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1a87e:	4608      	mov	r0, r1
   1a880:	f00d fa5b 	bl	27d3a <radio_tx_chain_delay_get>
   1a884:	442c      	add	r4, r5
   1a886:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1a888:	1a20      	subs	r0, r4, r0
   1a88a:	f001 fc81 	bl	1c190 <radio_tmr_hcto_configure>
		/* NOTE: as scratch packet is used to receive, it is safe to
		 * generate profile event using rx nodes.
		 */
		lll_prof_send();
	}
}
   1a88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   1a892:	f001 bcb5 	b.w	1c200 <radio_tmr_end_capture>
   1a896:	bf00      	nop
   1a898:	0002f5fc 	.word	0x0002f5fc
   1a89c:	0002a026 	.word	0x0002a026
   1a8a0:	0001acad 	.word	0x0001acad

0001a8a4 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1a8a4:	4b08      	ldr	r3, [pc, #32]	; (1a8c8 <lll_adv_init+0x24>)
{
   1a8a6:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1a8a8:	1d18      	adds	r0, r3, #4
   1a8aa:	2205      	movs	r2, #5
   1a8ac:	2128      	movs	r1, #40	; 0x28
   1a8ae:	f00c f9c4 	bl	26c3a <mem_init>
	MFIFO_INIT(pdu_free);
   1a8b2:	4b06      	ldr	r3, [pc, #24]	; (1a8cc <lll_adv_init+0x28>)
   1a8b4:	2400      	movs	r4, #0
   1a8b6:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a8b8:	2203      	movs	r2, #3
   1a8ba:	4621      	mov	r1, r4
   1a8bc:	4804      	ldr	r0, [pc, #16]	; (1a8d0 <lll_adv_init+0x2c>)
   1a8be:	f00d ff3f 	bl	28740 <z_impl_k_sem_init>
}
   1a8c2:	4620      	mov	r0, r4
   1a8c4:	bd10      	pop	{r4, pc}
   1a8c6:	bf00      	nop
   1a8c8:	20003f84 	.word	0x20003f84
   1a8cc:	20000c3c 	.word	0x20000c3c
   1a8d0:	20004050 	.word	0x20004050

0001a8d4 <lll_adv_data_init>:
{
   1a8d4:	b510      	push	{r4, lr}
   1a8d6:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1a8d8:	4805      	ldr	r0, [pc, #20]	; (1a8f0 <lll_adv_data_init+0x1c>)
   1a8da:	f00c f9d2 	bl	26c82 <mem_acquire>
	if (!p) {
   1a8de:	b120      	cbz	r0, 1a8ea <lll_adv_data_init+0x16>
	p->len = 0U;
   1a8e0:	2300      	movs	r3, #0
   1a8e2:	7043      	strb	r3, [r0, #1]
	pdu->pdu[0] = (void *)p;
   1a8e4:	6060      	str	r0, [r4, #4]
	return 0;
   1a8e6:	4618      	mov	r0, r3
}
   1a8e8:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1a8ea:	f06f 000b 	mvn.w	r0, #11
   1a8ee:	e7fb      	b.n	1a8e8 <lll_adv_data_init+0x14>
   1a8f0:	20003f84 	.word	0x20003f84

0001a8f4 <lll_adv_pdu_alloc>:
{
   1a8f4:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   1a8f6:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   1a8f8:	7843      	ldrb	r3, [r0, #1]
	first = pdu->first;
   1a8fa:	b2d2      	uxtb	r2, r2
	if (first == last) {
   1a8fc:	429a      	cmp	r2, r3
   1a8fe:	d132      	bne.n	1a966 <lll_adv_pdu_alloc+0x72>
		last++;
   1a900:	3301      	adds	r3, #1
   1a902:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1a904:	2b02      	cmp	r3, #2
   1a906:	d100      	bne.n	1a90a <lll_adv_pdu_alloc+0x16>
			last = 0U;
   1a908:	2300      	movs	r3, #0
	*idx = last;
   1a90a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
   1a90e:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1a910:	6875      	ldr	r5, [r6, #4]
	if (p) {
   1a912:	2d00      	cmp	r5, #0
   1a914:	d134      	bne.n	1a980 <lll_adv_pdu_alloc+0x8c>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1a916:	4c35      	ldr	r4, [pc, #212]	; (1a9ec <lll_adv_pdu_alloc+0xf8>)
   1a918:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   1a91a:	78e1      	ldrb	r1, [r4, #3]
   1a91c:	7823      	ldrb	r3, [r4, #0]
   1a91e:	4291      	cmp	r1, r2
   1a920:	d028      	beq.n	1a974 <lll_adv_pdu_alloc+0x80>
	return *((void **)(fifo + first * size));
   1a922:	fb02 4303 	mla	r3, r2, r3, r4
   1a926:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1a928:	b325      	cbz	r5, 1a974 <lll_adv_pdu_alloc+0x80>
	return z_impl_k_sem_take(sem, timeout);
   1a92a:	2200      	movs	r2, #0
   1a92c:	2300      	movs	r3, #0
   1a92e:	4830      	ldr	r0, [pc, #192]	; (1a9f0 <lll_adv_pdu_alloc+0xfc>)
   1a930:	f005 f9e0 	bl	1fcf4 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1a934:	b150      	cbz	r0, 1a94c <lll_adv_pdu_alloc+0x58>
   1a936:	22f7      	movs	r2, #247	; 0xf7
   1a938:	492e      	ldr	r1, [pc, #184]	; (1a9f4 <lll_adv_pdu_alloc+0x100>)
   1a93a:	482f      	ldr	r0, [pc, #188]	; (1a9f8 <lll_adv_pdu_alloc+0x104>)
   1a93c:	f007 fac5 	bl	21eca <printk>
   1a940:	4040      	eors	r0, r0
   1a942:	f380 8811 	msr	BASEPRI, r0
   1a946:	f04f 0003 	mov.w	r0, #3
   1a94a:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1a94c:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1a94e:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   1a950:	7862      	ldrb	r2, [r4, #1]
   1a952:	4299      	cmp	r1, r3
   1a954:	d005      	beq.n	1a962 <lll_adv_pdu_alloc+0x6e>
	_first += 1U;
   1a956:	3301      	adds	r3, #1
   1a958:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a95a:	429a      	cmp	r2, r3
   1a95c:	bf08      	it	eq
   1a95e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1a960:	70a3      	strb	r3, [r4, #2]
	pdu->pdu[last] = (void *)p;
   1a962:	6075      	str	r5, [r6, #4]
	return p;
   1a964:	e00c      	b.n	1a980 <lll_adv_pdu_alloc+0x8c>
		pdu->last = first;
   1a966:	7042      	strb	r2, [r0, #1]
   1a968:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   1a96c:	7804      	ldrb	r4, [r0, #0]
		if (first_latest != first) {
   1a96e:	42a2      	cmp	r2, r4
   1a970:	d1c6      	bne.n	1a900 <lll_adv_pdu_alloc+0xc>
   1a972:	e7ca      	b.n	1a90a <lll_adv_pdu_alloc+0x16>
	p = mem_acquire(&mem_pdu.free);
   1a974:	4821      	ldr	r0, [pc, #132]	; (1a9fc <lll_adv_pdu_alloc+0x108>)
   1a976:	f00c f984 	bl	26c82 <mem_acquire>
	if (p) {
   1a97a:	b118      	cbz	r0, 1a984 <lll_adv_pdu_alloc+0x90>
		pdu->pdu[last] = (void *)p;
   1a97c:	6070      	str	r0, [r6, #4]
		return p;
   1a97e:	4605      	mov	r5, r0
}
   1a980:	4628      	mov	r0, r5
   1a982:	bd70      	pop	{r4, r5, r6, pc}
   1a984:	f04f 32ff 	mov.w	r2, #4294967295
   1a988:	f04f 33ff 	mov.w	r3, #4294967295
   1a98c:	4818      	ldr	r0, [pc, #96]	; (1a9f0 <lll_adv_pdu_alloc+0xfc>)
   1a98e:	f005 f9b1 	bl	1fcf4 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1a992:	b158      	cbz	r0, 1a9ac <lll_adv_pdu_alloc+0xb8>
   1a994:	f240 1207 	movw	r2, #263	; 0x107
   1a998:	4916      	ldr	r1, [pc, #88]	; (1a9f4 <lll_adv_pdu_alloc+0x100>)
   1a99a:	4817      	ldr	r0, [pc, #92]	; (1a9f8 <lll_adv_pdu_alloc+0x104>)
   1a99c:	f007 fa95 	bl	21eca <printk>
   1a9a0:	4040      	eors	r0, r0
   1a9a2:	f380 8811 	msr	BASEPRI, r0
   1a9a6:	f04f 0003 	mov.w	r0, #3
   1a9aa:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1a9ac:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1a9ae:	78e0      	ldrb	r0, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1a9b0:	7822      	ldrb	r2, [r4, #0]
   1a9b2:	7861      	ldrb	r1, [r4, #1]
   1a9b4:	4298      	cmp	r0, r3
   1a9b6:	d10d      	bne.n	1a9d4 <lll_adv_pdu_alloc+0xe0>
	LL_ASSERT(p);
   1a9b8:	f44f 7285 	mov.w	r2, #266	; 0x10a
   1a9bc:	490d      	ldr	r1, [pc, #52]	; (1a9f4 <lll_adv_pdu_alloc+0x100>)
   1a9be:	480e      	ldr	r0, [pc, #56]	; (1a9f8 <lll_adv_pdu_alloc+0x104>)
   1a9c0:	f007 fa83 	bl	21eca <printk>
   1a9c4:	4040      	eors	r0, r0
   1a9c6:	f380 8811 	msr	BASEPRI, r0
   1a9ca:	f04f 0003 	mov.w	r0, #3
   1a9ce:	df02      	svc	2
   1a9d0:	2500      	movs	r5, #0
   1a9d2:	e7c6      	b.n	1a962 <lll_adv_pdu_alloc+0x6e>
	mem = *((void **)(fifo + _first * size));
   1a9d4:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   1a9d8:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1a9da:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   1a9dc:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a9de:	4299      	cmp	r1, r3
   1a9e0:	bf08      	it	eq
   1a9e2:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1a9e4:	70a3      	strb	r3, [r4, #2]
   1a9e6:	2d00      	cmp	r5, #0
   1a9e8:	d1bb      	bne.n	1a962 <lll_adv_pdu_alloc+0x6e>
   1a9ea:	e7e5      	b.n	1a9b8 <lll_adv_pdu_alloc+0xc4>
   1a9ec:	20000c3c 	.word	0x20000c3c
   1a9f0:	20004050 	.word	0x20004050
   1a9f4:	0002f5fc 	.word	0x0002f5fc
   1a9f8:	0002a026 	.word	0x0002a026
   1a9fc:	20003f84 	.word	0x20003f84

0001aa00 <lll_adv_pdu_latest_get>:
{
   1aa00:	b570      	push	{r4, r5, r6, lr}
   1aa02:	4604      	mov	r4, r0
	first = pdu->first;
   1aa04:	7800      	ldrb	r0, [r0, #0]
	if (first != pdu->last) {
   1aa06:	7863      	ldrb	r3, [r4, #1]
	first = pdu->first;
   1aa08:	b2c0      	uxtb	r0, r0
	if (first != pdu->last) {
   1aa0a:	4283      	cmp	r3, r0
   1aa0c:	d02f      	beq.n	1aa6e <lll_adv_pdu_latest_get+0x6e>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1aa0e:	4e1a      	ldr	r6, [pc, #104]	; (1aa78 <lll_adv_pdu_latest_get+0x78>)
	last = last + 1;
   1aa10:	78f3      	ldrb	r3, [r6, #3]
	if (last == count) {
   1aa12:	7875      	ldrb	r5, [r6, #1]
   1aa14:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
   1aa16:	3301      	adds	r3, #1
   1aa18:	b2db      	uxtb	r3, r3
		last = 0U;
   1aa1a:	429d      	cmp	r5, r3
   1aa1c:	bf08      	it	eq
   1aa1e:	2300      	moveq	r3, #0
	if (last == first) {
   1aa20:	429a      	cmp	r2, r3
   1aa22:	d10d      	bne.n	1aa40 <lll_adv_pdu_latest_get+0x40>
			LL_ASSERT(false);
   1aa24:	f240 121d 	movw	r2, #285	; 0x11d
   1aa28:	4914      	ldr	r1, [pc, #80]	; (1aa7c <lll_adv_pdu_latest_get+0x7c>)
   1aa2a:	4815      	ldr	r0, [pc, #84]	; (1aa80 <lll_adv_pdu_latest_get+0x80>)
   1aa2c:	f007 fa4d 	bl	21eca <printk>
   1aa30:	4040      	eors	r0, r0
   1aa32:	f380 8811 	msr	BASEPRI, r0
   1aa36:	f04f 0003 	mov.w	r0, #3
   1aa3a:	df02      	svc	2
   1aa3c:	2000      	movs	r0, #0
}
   1aa3e:	bd70      	pop	{r4, r5, r6, pc}
		first += 1U;
   1aa40:	1c45      	adds	r5, r0, #1
   1aa42:	b2ed      	uxtb	r5, r5
			first = 0U;
   1aa44:	2d02      	cmp	r5, #2
   1aa46:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1aa4a:	bf08      	it	eq
   1aa4c:	2500      	moveq	r5, #0
		*is_modified = 1U;
   1aa4e:	2201      	movs	r2, #1
		pdu->first = first;
   1aa50:	7025      	strb	r5, [r4, #0]
		*is_modified = 1U;
   1aa52:	700a      	strb	r2, [r1, #0]
		pdu->pdu[pdu_idx] = NULL;
   1aa54:	2200      	movs	r2, #0
		p = pdu->pdu[pdu_idx];
   1aa56:	6841      	ldr	r1, [r0, #4]
		pdu->pdu[pdu_idx] = NULL;
   1aa58:	6042      	str	r2, [r0, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1aa5a:	78f0      	ldrb	r0, [r6, #3]
   1aa5c:	7832      	ldrb	r2, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1aa5e:	fb00 6202 	mla	r2, r0, r2, r6
   1aa62:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   1aa64:	70f3      	strb	r3, [r6, #3]
	z_impl_k_sem_give(sem);
   1aa66:	4807      	ldr	r0, [pc, #28]	; (1aa84 <lll_adv_pdu_latest_get+0x84>)
   1aa68:	f005 f908 	bl	1fc7c <z_impl_k_sem_give>
   1aa6c:	4628      	mov	r0, r5
	return (void *)pdu->pdu[first];
   1aa6e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1aa72:	6840      	ldr	r0, [r0, #4]
   1aa74:	e7e3      	b.n	1aa3e <lll_adv_pdu_latest_get+0x3e>
   1aa76:	bf00      	nop
   1aa78:	20000c3c 	.word	0x20000c3c
   1aa7c:	0002f5fc 	.word	0x0002f5fc
   1aa80:	0002a026 	.word	0x0002a026
   1aa84:	20004050 	.word	0x20004050

0001aa88 <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1aa88:	7b03      	ldrb	r3, [r0, #12]
	return __builtin_ffs(op);
   1aa8a:	f3c3 1302 	ubfx	r3, r3, #4, #3
{
   1aa8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1aa90:	2b00      	cmp	r3, #0
   1aa92:	4604      	mov	r4, r0
   1aa94:	fa93 f0a3 	rbit	r0, r3
   1aa98:	fab0 f080 	clz	r0, r0
   1aa9c:	bf08      	it	eq
   1aa9e:	f04f 30ff 	moveq.w	r0, #4294967295
	LL_ASSERT(chan);
   1aaa2:	1c45      	adds	r5, r0, #1
   1aaa4:	d10b      	bne.n	1aabe <chan_prepare+0x36>
   1aaa6:	f240 3287 	movw	r2, #903	; 0x387
   1aaaa:	4920      	ldr	r1, [pc, #128]	; (1ab2c <chan_prepare+0xa4>)
   1aaac:	4820      	ldr	r0, [pc, #128]	; (1ab30 <chan_prepare+0xa8>)
   1aaae:	f007 fa0c 	bl	21eca <printk>
   1aab2:	4040      	eors	r0, r0
   1aab4:	f380 8811 	msr	BASEPRI, r0
   1aab8:	f04f 0003 	mov.w	r0, #3
   1aabc:	df02      	svc	2

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1aabe:	7b23      	ldrb	r3, [r4, #12]
   1aac0:	f3c3 1202 	ubfx	r2, r3, #4, #3
   1aac4:	1e51      	subs	r1, r2, #1
   1aac6:	400a      	ands	r2, r1
   1aac8:	f362 1306 	bfi	r3, r2, #4, #3
   1aacc:	7323      	strb	r3, [r4, #12]

	lll_chan_set(36 + chan);
   1aace:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1aad2:	f7ff fd69 	bl	1a5a8 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1aad6:	2600      	movs	r6, #0
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1aad8:	f10d 0107 	add.w	r1, sp, #7
   1aadc:	f104 0010 	add.w	r0, r4, #16
   1aae0:	f88d 6007 	strb.w	r6, [sp, #7]
   1aae4:	f7ff ff8c 	bl	1aa00 <lll_adv_pdu_latest_get>
   1aae8:	4605      	mov	r5, r0
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   1aaea:	f001 f99d 	bl	1be28 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1aaee:	782b      	ldrb	r3, [r5, #0]
   1aaf0:	f003 030f 	and.w	r3, r3, #15
   1aaf4:	2b02      	cmp	r3, #2
   1aaf6:	d012      	beq.n	1ab1e <chan_prepare+0x96>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1aaf8:	f10d 0107 	add.w	r1, sp, #7
   1aafc:	f104 001c 	add.w	r0, r4, #28
   1ab00:	f7ff ff7e 	bl	1aa00 <lll_adv_pdu_latest_get>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1ab04:	4621      	mov	r1, r4
   1ab06:	480b      	ldr	r0, [pc, #44]	; (1ab34 <chan_prepare+0xac>)
   1ab08:	f001 f8d2 	bl	1bcb0 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1ab0c:	2096      	movs	r0, #150	; 0x96
   1ab0e:	f001 fa8b 	bl	1c028 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1ab12:	4630      	mov	r0, r6
   1ab14:	f001 f9f4 	bl	1bf00 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1ab18:	4628      	mov	r0, r5
   1ab1a:	b002      	add	sp, #8
   1ab1c:	bd70      	pop	{r4, r5, r6, pc}
		radio_isr_set(isr_done, lll);
   1ab1e:	4621      	mov	r1, r4
   1ab20:	4805      	ldr	r0, [pc, #20]	; (1ab38 <chan_prepare+0xb0>)
   1ab22:	f001 f8c5 	bl	1bcb0 <radio_isr_set>
		radio_switch_complete_and_disable();
   1ab26:	f001 fa01 	bl	1bf2c <radio_switch_complete_and_disable>
	return pdu;
   1ab2a:	e7f5      	b.n	1ab18 <chan_prepare+0x90>
   1ab2c:	0002f5fc 	.word	0x0002f5fc
   1ab30:	0002a026 	.word	0x0002a026
   1ab34:	0001a825 	.word	0x0001a825
   1ab38:	0002796b 	.word	0x0002796b

0001ab3c <prepare_cb>:
{
   1ab3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lll = p->param;
   1ab3e:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1ab40:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1ab42:	f015 0501 	ands.w	r5, r5, #1
{
   1ab46:	4606      	mov	r6, r0
	if (unlikely(lll_is_stop(lll))) {
   1ab48:	d015      	beq.n	1ab76 <prepare_cb+0x3a>
		err = lll_hfclock_off();
   1ab4a:	f7ff fdef 	bl	1a72c <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1ab4e:	2800      	cmp	r0, #0
   1ab50:	da0b      	bge.n	1ab6a <prepare_cb+0x2e>
   1ab52:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
   1ab56:	4936      	ldr	r1, [pc, #216]	; (1ac30 <prepare_cb+0xf4>)
   1ab58:	4836      	ldr	r0, [pc, #216]	; (1ac34 <prepare_cb+0xf8>)
   1ab5a:	f007 f9b6 	bl	21eca <printk>
   1ab5e:	4040      	eors	r0, r0
   1ab60:	f380 8811 	msr	BASEPRI, r0
   1ab64:	f04f 0003 	mov.w	r0, #3
   1ab68:	df02      	svc	2
		lll_done(NULL);
   1ab6a:	2000      	movs	r0, #0
   1ab6c:	f7ff fcd2 	bl	1a514 <lll_done>
}
   1ab70:	2000      	movs	r0, #0
   1ab72:	b003      	add	sp, #12
   1ab74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
   1ab76:	f001 f8bb 	bl	1bcf0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1ab7a:	4628      	mov	r0, r5
   1ab7c:	f001 f8ec 	bl	1bd58 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1ab80:	4629      	mov	r1, r5
   1ab82:	4628      	mov	r0, r5
   1ab84:	f001 f8d8 	bl	1bd38 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1ab88:	462a      	mov	r2, r5
   1ab8a:	2125      	movs	r1, #37	; 0x25
   1ab8c:	2008      	movs	r0, #8
   1ab8e:	f001 f919 	bl	1bdc4 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1ab92:	4b29      	ldr	r3, [pc, #164]	; (1ac38 <prepare_cb+0xfc>)
   1ab94:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1ab96:	a801      	add	r0, sp, #4
   1ab98:	f001 f8fc 	bl	1bd94 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1ab9c:	4927      	ldr	r1, [pc, #156]	; (1ac3c <prepare_cb+0x100>)
   1ab9e:	f240 605b 	movw	r0, #1627	; 0x65b
   1aba2:	f001 f98f 	bl	1bec4 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1aba6:	7b23      	ldrb	r3, [r4, #12]
   1aba8:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1abac:	f362 1306 	bfi	r3, r2, #4, #3
   1abb0:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   1abb2:	4620      	mov	r0, r4
   1abb4:	f7ff ff68 	bl	1aa88 <chan_prepare>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1abb8:	7b63      	ldrb	r3, [r4, #13]
   1abba:	079b      	lsls	r3, r3, #30
   1abbc:	d007      	beq.n	1abce <prepare_cb+0x92>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1abbe:	2001      	movs	r0, #1
   1abc0:	f7ff fa62 	bl	1a088 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1abc4:	1c82      	adds	r2, r0, #2
   1abc6:	7841      	ldrb	r1, [r0, #1]
   1abc8:	7800      	ldrb	r0, [r0, #0]
   1abca:	f001 f9df 	bl	1bf8c <radio_filter_configure>
	evt = HDR_LLL2EVT(lll);
   1abce:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1abd0:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1abd2:	4638      	mov	r0, r7
   1abd4:	f00c fe53 	bl	2787e <lll_evt_offset_get>
   1abd8:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1abda:	6872      	ldr	r2, [r6, #4]
   1abdc:	f105 0109 	add.w	r1, r5, #9
   1abe0:	2001      	movs	r0, #1
   1abe2:	f001 fa2d 	bl	1c040 <radio_tmr_start>
	radio_tmr_end_capture();
   1abe6:	f001 fb0b 	bl	1c200 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1abea:	4620      	mov	r0, r4
   1abec:	f7fd fd96 	bl	1871c <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1abf0:	1c81      	adds	r1, r0, #2
   1abf2:	462a      	mov	r2, r5
   1abf4:	b2c9      	uxtb	r1, r1
   1abf6:	4638      	mov	r0, r7
   1abf8:	f00c fe4f 	bl	2789a <lll_preempt_calc>
   1abfc:	b130      	cbz	r0, 1ac0c <prepare_cb+0xd0>
		radio_isr_set(isr_abort, lll);
   1abfe:	4621      	mov	r1, r4
   1ac00:	480f      	ldr	r0, [pc, #60]	; (1ac40 <prepare_cb+0x104>)
   1ac02:	f001 f855 	bl	1bcb0 <radio_isr_set>
		radio_disable();
   1ac06:	f001 f921 	bl	1be4c <radio_disable>
   1ac0a:	e7b1      	b.n	1ab70 <prepare_cb+0x34>
		ret = lll_prepare_done(lll);
   1ac0c:	4620      	mov	r0, r4
   1ac0e:	f00c fe31 	bl	27874 <lll_prepare_done>
		LL_ASSERT(!ret);
   1ac12:	2800      	cmp	r0, #0
   1ac14:	d0ac      	beq.n	1ab70 <prepare_cb+0x34>
   1ac16:	f240 2221 	movw	r2, #545	; 0x221
   1ac1a:	4905      	ldr	r1, [pc, #20]	; (1ac30 <prepare_cb+0xf4>)
   1ac1c:	4805      	ldr	r0, [pc, #20]	; (1ac34 <prepare_cb+0xf8>)
   1ac1e:	f007 f954 	bl	21eca <printk>
   1ac22:	4040      	eors	r0, r0
   1ac24:	f380 8811 	msr	BASEPRI, r0
   1ac28:	f04f 0003 	mov.w	r0, #3
   1ac2c:	df02      	svc	2
   1ac2e:	e79f      	b.n	1ab70 <prepare_cb+0x34>
   1ac30:	0002f5fc 	.word	0x0002f5fc
   1ac34:	0002a026 	.word	0x0002a026
   1ac38:	8e89bed6 	.word	0x8e89bed6
   1ac3c:	00555555 	.word	0x00555555
   1ac40:	0002791d 	.word	0x0002791d

0001ac44 <lll_adv_prepare>:
{
   1ac44:	b513      	push	{r0, r1, r4, lr}
   1ac46:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1ac48:	f7ff fd5a 	bl	1a700 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1ac4c:	2800      	cmp	r0, #0
   1ac4e:	da0b      	bge.n	1ac68 <lll_adv_prepare+0x24>
   1ac50:	f44f 729d 	mov.w	r2, #314	; 0x13a
   1ac54:	4910      	ldr	r1, [pc, #64]	; (1ac98 <lll_adv_prepare+0x54>)
   1ac56:	4811      	ldr	r0, [pc, #68]	; (1ac9c <lll_adv_prepare+0x58>)
   1ac58:	f007 f937 	bl	21eca <printk>
   1ac5c:	4040      	eors	r0, r0
   1ac5e:	f380 8811 	msr	BASEPRI, r0
   1ac62:	f04f 0003 	mov.w	r0, #3
   1ac66:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1ac68:	9400      	str	r4, [sp, #0]
   1ac6a:	2300      	movs	r3, #0
   1ac6c:	4a0c      	ldr	r2, [pc, #48]	; (1aca0 <lll_adv_prepare+0x5c>)
   1ac6e:	490d      	ldr	r1, [pc, #52]	; (1aca4 <lll_adv_prepare+0x60>)
   1ac70:	480d      	ldr	r0, [pc, #52]	; (1aca8 <lll_adv_prepare+0x64>)
   1ac72:	f00c fdf6 	bl	27862 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1ac76:	b168      	cbz	r0, 1ac94 <lll_adv_prepare+0x50>
   1ac78:	3044      	adds	r0, #68	; 0x44
   1ac7a:	d00b      	beq.n	1ac94 <lll_adv_prepare+0x50>
   1ac7c:	f240 123d 	movw	r2, #317	; 0x13d
   1ac80:	4905      	ldr	r1, [pc, #20]	; (1ac98 <lll_adv_prepare+0x54>)
   1ac82:	4806      	ldr	r0, [pc, #24]	; (1ac9c <lll_adv_prepare+0x58>)
   1ac84:	f007 f921 	bl	21eca <printk>
   1ac88:	4040      	eors	r0, r0
   1ac8a:	f380 8811 	msr	BASEPRI, r0
   1ac8e:	f04f 0003 	mov.w	r0, #3
   1ac92:	df02      	svc	2
}
   1ac94:	b002      	add	sp, #8
   1ac96:	bd10      	pop	{r4, pc}
   1ac98:	0002f5fc 	.word	0x0002f5fc
   1ac9c:	0002a026 	.word	0x0002a026
   1aca0:	0001ab3d 	.word	0x0001ab3d
   1aca4:	0001a7d9 	.word	0x0001a7d9
   1aca8:	0001a771 	.word	0x0001a771

0001acac <isr_rx>:
{
   1acac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1acb0:	b086      	sub	sp, #24
   1acb2:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1acb4:	f001 f8f2 	bl	1be9c <radio_is_done>
   1acb8:	b2c5      	uxtb	r5, r0
	if (trx_done) {
   1acba:	2d00      	cmp	r5, #0
   1acbc:	d062      	beq.n	1ad84 <isr_rx+0xd8>
		crc_ok = radio_crc_is_valid();
   1acbe:	f001 f90d 	bl	1bedc <radio_crc_is_valid>
   1acc2:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
   1acc4:	f001 f990 	bl	1bfe8 <radio_filter_has_match>
   1acc8:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
   1accc:	f001 f996 	bl	1bffc <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1acd0:	f001 fac2 	bl	1c258 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   1acd4:	f001 faa8 	bl	1c228 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   1acd8:	f001 f94e 	bl	1bf78 <radio_rssi_is_ready>
	lll_isr_status_reset();
   1acdc:	f00c fe02 	bl	278e4 <lll_isr_status_reset>
	if (!trx_done) {
   1ace0:	2d00      	cmp	r5, #0
   1ace2:	f000 80b8 	beq.w	1ae56 <isr_rx+0x1aa>
	if (crc_ok) {
   1ace6:	2e00      	cmp	r6, #0
   1ace8:	f000 80b5 	beq.w	1ae56 <isr_rx+0x1aa>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
				    FILTER_IDX_NONE;
#else
	uint8_t rl_idx = FILTER_IDX_NONE;
   1acec:	23ff      	movs	r3, #255	; 0xff
   1acee:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
   1acf2:	f001 f901 	bl	1bef8 <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1acf6:	7c23      	ldrb	r3, [r4, #16]
   1acf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1acfc:	4606      	mov	r6, r0
   1acfe:	695d      	ldr	r5, [r3, #20]
	pdu_adv = lll_adv_data_curr_get(lll);

	addr = pdu_adv->adv_ind.addr;
   1ad00:	46a8      	mov	r8, r5
	tx_addr = pdu_adv->tx_addr;
   1ad02:	f818 7b02 	ldrb.w	r7, [r8], #2

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1ad06:	f007 030f 	and.w	r3, r7, #15
   1ad0a:	2b01      	cmp	r3, #1
	} else {
		tgt_addr = NULL;
	}
	rx_addr = pdu_adv->rx_addr;

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1ad0c:	7803      	ldrb	r3, [r0, #0]
   1ad0e:	f003 030f 	and.w	r3, r3, #15
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1ad12:	bf0c      	ite	eq
   1ad14:	3508      	addeq	r5, #8
		tgt_addr = NULL;
   1ad16:	2500      	movne	r5, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1ad18:	2b03      	cmp	r3, #3
	tx_addr = pdu_adv->tx_addr;
   1ad1a:	f3c7 1a80 	ubfx	sl, r7, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1ad1e:	ea4f 17d7 	mov.w	r7, r7, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1ad22:	d132      	bne.n	1ad8a <isr_rx+0xde>
   1ad24:	7843      	ldrb	r3, [r0, #1]
   1ad26:	2b0c      	cmp	r3, #12
   1ad28:	f040 8095 	bne.w	1ae56 <isr_rx+0x1aa>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1ad2c:	2d00      	cmp	r5, #0
   1ad2e:	f040 8092 	bne.w	1ae56 <isr_rx+0x1aa>
	    (tgt_addr == NULL) &&
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1ad32:	f10d 0317 	add.w	r3, sp, #23
   1ad36:	e9cd 9300 	strd	r9, r3, [sp]
   1ad3a:	4601      	mov	r1, r0
   1ad3c:	4643      	mov	r3, r8
   1ad3e:	4652      	mov	r2, sl
   1ad40:	4620      	mov	r0, r4
   1ad42:	f00c fe34 	bl	279ae <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   1ad46:	b300      	cbz	r0, 1ad8a <isr_rx+0xde>
				    &rl_idx)) {
		radio_isr_set(isr_done, lll);
   1ad48:	4621      	mov	r1, r4
   1ad4a:	4846      	ldr	r0, [pc, #280]	; (1ae64 <isr_rx+0x1b8>)
   1ad4c:	f000 ffb0 	bl	1bcb0 <radio_isr_set>
		radio_switch_complete_and_disable();
   1ad50:	f001 f8ec 	bl	1bf2c <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1ad54:	7f23      	ldrb	r3, [r4, #28]
   1ad56:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1ad5a:	6a20      	ldr	r0, [r4, #32]
   1ad5c:	f001 f864 	bl	1be28 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   1ad60:	f001 f892 	bl	1be88 <radio_is_ready>
   1ad64:	b158      	cbz	r0, 1ad7e <isr_rx+0xd2>
   1ad66:	f240 32dd 	movw	r2, #989	; 0x3dd
   1ad6a:	493f      	ldr	r1, [pc, #252]	; (1ae68 <isr_rx+0x1bc>)
   1ad6c:	483f      	ldr	r0, [pc, #252]	; (1ae6c <isr_rx+0x1c0>)
   1ad6e:	f007 f8ac 	bl	21eca <printk>
   1ad72:	4040      	eors	r0, r0
   1ad74:	f380 8811 	msr	BASEPRI, r0
   1ad78:	f04f 0003 	mov.w	r0, #3
   1ad7c:	df02      	svc	2
}
   1ad7e:	b006      	add	sp, #24
   1ad80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   1ad84:	462e      	mov	r6, r5
   1ad86:	46a9      	mov	r9, r5
   1ad88:	e7a8      	b.n	1acdc <isr_rx+0x30>
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */
		return 0;

#if defined(CONFIG_BT_PERIPHERAL)
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1ad8a:	7833      	ldrb	r3, [r6, #0]
   1ad8c:	f003 030f 	and.w	r3, r3, #15
   1ad90:	2b05      	cmp	r3, #5
   1ad92:	d160      	bne.n	1ae56 <isr_rx+0x1aa>
   1ad94:	7873      	ldrb	r3, [r6, #1]
   1ad96:	2b22      	cmp	r3, #34	; 0x22
   1ad98:	d15d      	bne.n	1ae56 <isr_rx+0x1aa>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1ad9a:	f10d 0317 	add.w	r3, sp, #23
   1ad9e:	e9cd 9302 	strd	r9, r3, [sp, #8]
   1ada2:	e9cd 7500 	strd	r7, r5, [sp]
   1ada6:	4643      	mov	r3, r8
   1ada8:	4652      	mov	r2, sl
   1adaa:	4631      	mov	r1, r6
   1adac:	4620      	mov	r0, r4
   1adae:	f00c fe16 	bl	279de <lll_adv_connect_ind_check>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1adb2:	2800      	cmp	r0, #0
   1adb4:	d04f      	beq.n	1ae56 <isr_rx+0x1aa>
					     rx_addr, tgt_addr,
					     devmatch_ok, &rl_idx) &&
   1adb6:	68a3      	ldr	r3, [r4, #8]
   1adb8:	2b00      	cmp	r3, #0
   1adba:	d04c      	beq.n	1ae56 <isr_rx+0x1aa>
		int ret;

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			rx = ull_pdu_rx_alloc_peek(4);
		} else {
			rx = ull_pdu_rx_alloc_peek(3);
   1adbc:	2003      	movs	r0, #3
   1adbe:	f7fd f89b 	bl	17ef8 <ull_pdu_rx_alloc_peek>
		}

		if (!rx) {
   1adc2:	2800      	cmp	r0, #0
   1adc4:	d047      	beq.n	1ae56 <isr_rx+0x1aa>
			return -ENOBUFS;
		}

		radio_isr_set(isr_abort, lll);
   1adc6:	4621      	mov	r1, r4
   1adc8:	4829      	ldr	r0, [pc, #164]	; (1ae70 <isr_rx+0x1c4>)
   1adca:	f000 ff71 	bl	1bcb0 <radio_isr_set>
		radio_disable();
   1adce:	f001 f83d 	bl	1be4c <radio_disable>

		/* assert if radio started tx */
		LL_ASSERT(!radio_is_ready());
   1add2:	f001 f859 	bl	1be88 <radio_is_ready>
   1add6:	b158      	cbz	r0, 1adf0 <isr_rx+0x144>
   1add8:	f240 421b 	movw	r2, #1051	; 0x41b
   1addc:	4922      	ldr	r1, [pc, #136]	; (1ae68 <isr_rx+0x1bc>)
   1adde:	4823      	ldr	r0, [pc, #140]	; (1ae6c <isr_rx+0x1c0>)
   1ade0:	f007 f873 	bl	21eca <printk>
   1ade4:	4040      	eors	r0, r0
   1ade6:	f380 8811 	msr	BASEPRI, r0
   1adea:	f04f 0003 	mov.w	r0, #3
   1adee:	df02      	svc	2
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   1adf0:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
   1adf2:	f043 0201 	orr.w	r2, r3, #1
		}
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

		/* Stop further LLL radio events */
		ret = lll_stop(lll);
		LL_ASSERT(!ret);
   1adf6:	07db      	lsls	r3, r3, #31
   1adf8:	7122      	strb	r2, [r4, #4]
   1adfa:	d50b      	bpl.n	1ae14 <isr_rx+0x168>
   1adfc:	f240 4229 	movw	r2, #1065	; 0x429
   1ae00:	4919      	ldr	r1, [pc, #100]	; (1ae68 <isr_rx+0x1bc>)
   1ae02:	481a      	ldr	r0, [pc, #104]	; (1ae6c <isr_rx+0x1c0>)
   1ae04:	f007 f861 	bl	21eca <printk>
   1ae08:	4040      	eors	r0, r0
   1ae0a:	f380 8811 	msr	BASEPRI, r0
   1ae0e:	f04f 0003 	mov.w	r0, #3
   1ae12:	df02      	svc	2

		rx = ull_pdu_rx_alloc();
   1ae14:	f7fd f888 	bl	17f28 <ull_pdu_rx_alloc>

		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1ae18:	2313      	movs	r3, #19
		rx = ull_pdu_rx_alloc();
   1ae1a:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1ae1c:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   1ae1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ae22:	80c3      	strh	r3, [r0, #6]

		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1ae24:	2224      	movs	r2, #36	; 0x24
   1ae26:	4631      	mov	r1, r6
   1ae28:	301c      	adds	r0, #28
   1ae2a:	f009 f990 	bl	2414e <memcpy>
					 sizeof(struct pdu_adv_connect_ind)));

		ftr = &(rx->hdr.rx_ftr);
		ftr->param = lll;
   1ae2e:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1ae30:	f001 f99c 	bl	1c16c <radio_tmr_start_get>
   1ae34:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1ae36:	f001 f9eb 	bl	1c210 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1ae3a:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1ae3c:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   1ae3e:	4608      	mov	r0, r1
   1ae40:	f00c ff7b 	bl	27d3a <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1ae44:	1a20      	subs	r0, r4, r0
   1ae46:	6168      	str	r0, [r5, #20]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			ftr->extra = ull_pdu_rx_alloc();
		}

		ull_rx_put(rx->hdr.link, rx);
   1ae48:	4629      	mov	r1, r5
   1ae4a:	6828      	ldr	r0, [r5, #0]
   1ae4c:	f7fd f882 	bl	17f54 <ull_rx_put>
		ull_rx_sched();
   1ae50:	f7fd f890 	bl	17f74 <ull_rx_sched>
		if (!err) {
   1ae54:	e793      	b.n	1ad7e <isr_rx+0xd2>
	radio_isr_set(isr_done, param);
   1ae56:	4621      	mov	r1, r4
   1ae58:	4802      	ldr	r0, [pc, #8]	; (1ae64 <isr_rx+0x1b8>)
   1ae5a:	f000 ff29 	bl	1bcb0 <radio_isr_set>
	radio_disable();
   1ae5e:	f000 fff5 	bl	1be4c <radio_disable>
   1ae62:	e78c      	b.n	1ad7e <isr_rx+0xd2>
   1ae64:	0002796b 	.word	0x0002796b
   1ae68:	0002f5fc 	.word	0x0002f5fc
   1ae6c:	0002a026 	.word	0x0002a026
   1ae70:	0002791d 	.word	0x0002791d

0001ae74 <ticker_stop_cb>:
	lll_done(param);
}

static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t remainder, uint16_t lazy,
			   void *param)
{
   1ae74:	b508      	push	{r3, lr}
	radio_isr_set(isr_done_cleanup, param);
   1ae76:	4619      	mov	r1, r3
   1ae78:	4803      	ldr	r0, [pc, #12]	; (1ae88 <ticker_stop_cb+0x14>)
   1ae7a:	f000 ff19 	bl	1bcb0 <radio_isr_set>
	radio_disable();
}
   1ae7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   1ae82:	f000 bfe3 	b.w	1be4c <radio_disable>
   1ae86:	bf00      	nop
   1ae88:	00027a57 	.word	0x00027a57

0001ae8c <prepare_cb>:
{
   1ae8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1ae8e:	68c4      	ldr	r4, [r0, #12]
   1ae90:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1ae92:	f015 0501 	ands.w	r5, r5, #1
{
   1ae96:	b08d      	sub	sp, #52	; 0x34
   1ae98:	4606      	mov	r6, r0
	if (unlikely(lll_is_stop(lll))) {
   1ae9a:	d014      	beq.n	1aec6 <prepare_cb+0x3a>
		err = lll_hfclock_off();
   1ae9c:	f7ff fc46 	bl	1a72c <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1aea0:	2800      	cmp	r0, #0
   1aea2:	da0a      	bge.n	1aeba <prepare_cb+0x2e>
   1aea4:	2290      	movs	r2, #144	; 0x90
   1aea6:	495b      	ldr	r1, [pc, #364]	; (1b014 <prepare_cb+0x188>)
   1aea8:	485b      	ldr	r0, [pc, #364]	; (1b018 <prepare_cb+0x18c>)
   1aeaa:	f007 f80e 	bl	21eca <printk>
   1aeae:	4040      	eors	r0, r0
   1aeb0:	f380 8811 	msr	BASEPRI, r0
   1aeb4:	f04f 0003 	mov.w	r0, #3
   1aeb8:	df02      	svc	2
		lll_done(NULL);
   1aeba:	2000      	movs	r0, #0
   1aebc:	f7ff fb2a 	bl	1a514 <lll_done>
}
   1aec0:	2000      	movs	r0, #0
   1aec2:	b00d      	add	sp, #52	; 0x34
   1aec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lll->state = 0U;
   1aec6:	7a23      	ldrb	r3, [r4, #8]
   1aec8:	f365 0300 	bfi	r3, r5, #0, #1
   1aecc:	7223      	strb	r3, [r4, #8]
	radio_reset();
   1aece:	f000 ff0f 	bl	1bcf0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1aed2:	4628      	mov	r0, r5
   1aed4:	f000 ff40 	bl	1bd58 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1aed8:	4629      	mov	r1, r5
   1aeda:	4628      	mov	r0, r5
   1aedc:	f000 ff2c 	bl	1bd38 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1aee0:	462a      	mov	r2, r5
   1aee2:	2125      	movs	r1, #37	; 0x25
   1aee4:	2008      	movs	r0, #8
   1aee6:	f000 ff6d 	bl	1bdc4 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1aeea:	2001      	movs	r0, #1
   1aeec:	f7fd f804 	bl	17ef8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1aef0:	4605      	mov	r5, r0
   1aef2:	b950      	cbnz	r0, 1af0a <prepare_cb+0x7e>
   1aef4:	22af      	movs	r2, #175	; 0xaf
   1aef6:	4947      	ldr	r1, [pc, #284]	; (1b014 <prepare_cb+0x188>)
   1aef8:	4847      	ldr	r0, [pc, #284]	; (1b018 <prepare_cb+0x18c>)
   1aefa:	f006 ffe6 	bl	21eca <printk>
   1aefe:	4040      	eors	r0, r0
   1af00:	f380 8811 	msr	BASEPRI, r0
   1af04:	f04f 0003 	mov.w	r0, #3
   1af08:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1af0a:	f105 001c 	add.w	r0, r5, #28
   1af0e:	f000 ff85 	bl	1be1c <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1af12:	4b42      	ldr	r3, [pc, #264]	; (1b01c <prepare_cb+0x190>)
   1af14:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1af16:	a80b      	add	r0, sp, #44	; 0x2c
   1af18:	f000 ff3c 	bl	1bd94 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1af1c:	4940      	ldr	r1, [pc, #256]	; (1b020 <prepare_cb+0x194>)
   1af1e:	f240 605b 	movw	r0, #1627	; 0x65b
   1af22:	f000 ffcf 	bl	1bec4 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1af26:	7a20      	ldrb	r0, [r4, #8]
   1af28:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1af2c:	3025      	adds	r0, #37	; 0x25
   1af2e:	f7ff fb3b 	bl	1a5a8 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1af32:	4621      	mov	r1, r4
   1af34:	483b      	ldr	r0, [pc, #236]	; (1b024 <prepare_cb+0x198>)
   1af36:	f000 febb 	bl	1bcb0 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1af3a:	2096      	movs	r0, #150	; 0x96
   1af3c:	f001 f874 	bl	1c028 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1af40:	2300      	movs	r3, #0
   1af42:	461a      	mov	r2, r3
   1af44:	4619      	mov	r1, r3
   1af46:	4618      	mov	r0, r3
   1af48:	f000 ffe6 	bl	1bf18 <radio_switch_complete_and_tx>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1af4c:	7a23      	ldrb	r3, [r4, #8]
   1af4e:	f013 0f18 	tst.w	r3, #24
   1af52:	d007      	beq.n	1af64 <prepare_cb+0xd8>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1af54:	2001      	movs	r0, #1
   1af56:	f7ff f897 	bl	1a088 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1af5a:	1c82      	adds	r2, r0, #2
   1af5c:	7841      	ldrb	r1, [r0, #1]
   1af5e:	7800      	ldrb	r0, [r0, #0]
   1af60:	f001 f814 	bl	1bf8c <radio_filter_configure>
	evt = HDR_LLL2EVT(lll);
   1af64:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1af66:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1af68:	4638      	mov	r0, r7
   1af6a:	f00c fc88 	bl	2787e <lll_evt_offset_get>
   1af6e:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1af70:	6872      	ldr	r2, [r6, #4]
   1af72:	f105 0109 	add.w	r1, r5, #9
   1af76:	2000      	movs	r0, #0
   1af78:	f001 f862 	bl	1c040 <radio_tmr_start>
	radio_tmr_end_capture();
   1af7c:	f001 f940 	bl	1c200 <radio_tmr_end_capture>
	radio_rssi_measure();
   1af80:	f000 ffe2 	bl	1bf48 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1af84:	4620      	mov	r0, r4
   1af86:	f7fd fd2f 	bl	189e8 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_SCAN_BASE +
   1af8a:	1d01      	adds	r1, r0, #4
   1af8c:	b2c9      	uxtb	r1, r1
   1af8e:	462a      	mov	r2, r5
   1af90:	4638      	mov	r0, r7
   1af92:	f00c fc82 	bl	2789a <lll_preempt_calc>
   1af96:	4601      	mov	r1, r0
   1af98:	b130      	cbz	r0, 1afa8 <prepare_cb+0x11c>
		radio_isr_set(isr_abort, lll);
   1af9a:	4621      	mov	r1, r4
   1af9c:	4822      	ldr	r0, [pc, #136]	; (1b028 <prepare_cb+0x19c>)
   1af9e:	f000 fe87 	bl	1bcb0 <radio_isr_set>
		radio_disable();
   1afa2:	f000 ff53 	bl	1be4c <radio_disable>
   1afa6:	e78b      	b.n	1aec0 <prepare_cb+0x34>
		if (lll->ticks_window) {
   1afa8:	69a3      	ldr	r3, [r4, #24]
   1afaa:	b1fb      	cbz	r3, 1afec <prepare_cb+0x160>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1afac:	f240 120f 	movw	r2, #271	; 0x10f
   1afb0:	9208      	str	r2, [sp, #32]
   1afb2:	4a1e      	ldr	r2, [pc, #120]	; (1b02c <prepare_cb+0x1a0>)
   1afb4:	e9cd 4206 	strd	r4, r2, [sp, #24]
   1afb8:	4a1d      	ldr	r2, [pc, #116]	; (1b030 <prepare_cb+0x1a4>)
   1afba:	e9cd 3000 	strd	r3, r0, [sp]
   1afbe:	e9cd 0204 	strd	r0, r2, [sp, #16]
   1afc2:	462b      	mov	r3, r5
   1afc4:	e9cd 0002 	strd	r0, r0, [sp, #8]
   1afc8:	2203      	movs	r2, #3
   1afca:	f00c f90b 	bl	271e4 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1afce:	f030 0302 	bics.w	r3, r0, #2
   1afd2:	d00b      	beq.n	1afec <prepare_cb+0x160>
   1afd4:	f240 1211 	movw	r2, #273	; 0x111
   1afd8:	490e      	ldr	r1, [pc, #56]	; (1b014 <prepare_cb+0x188>)
   1afda:	480f      	ldr	r0, [pc, #60]	; (1b018 <prepare_cb+0x18c>)
   1afdc:	f006 ff75 	bl	21eca <printk>
   1afe0:	4040      	eors	r0, r0
   1afe2:	f380 8811 	msr	BASEPRI, r0
   1afe6:	f04f 0003 	mov.w	r0, #3
   1afea:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1afec:	4620      	mov	r0, r4
   1afee:	f00c fc41 	bl	27874 <lll_prepare_done>
		LL_ASSERT(!ret);
   1aff2:	2800      	cmp	r0, #0
   1aff4:	f43f af64 	beq.w	1aec0 <prepare_cb+0x34>
   1aff8:	f240 1229 	movw	r2, #297	; 0x129
   1affc:	4905      	ldr	r1, [pc, #20]	; (1b014 <prepare_cb+0x188>)
   1affe:	4806      	ldr	r0, [pc, #24]	; (1b018 <prepare_cb+0x18c>)
   1b000:	f006 ff63 	bl	21eca <printk>
   1b004:	4040      	eors	r0, r0
   1b006:	f380 8811 	msr	BASEPRI, r0
   1b00a:	f04f 0003 	mov.w	r0, #3
   1b00e:	df02      	svc	2
   1b010:	e756      	b.n	1aec0 <prepare_cb+0x34>
   1b012:	bf00      	nop
   1b014:	0002f656 	.word	0x0002f656
   1b018:	0002a026 	.word	0x0002a026
   1b01c:	8e89bed6 	.word	0x8e89bed6
   1b020:	00555555 	.word	0x00555555
   1b024:	0001b209 	.word	0x0001b209
   1b028:	00027b4d 	.word	0x00027b4d
   1b02c:	0001b13d 	.word	0x0001b13d
   1b030:	0001ae75 	.word	0x0001ae75

0001b034 <isr_common_done>:

	radio_isr_set(isr_rx, param);
}

static void isr_common_done(void *param)
{
   1b034:	b538      	push	{r3, r4, r5, lr}
   1b036:	4604      	mov	r4, r0
	struct node_rx_pdu *node_rx;
	struct lll_scan *lll;

	/* Clear radio status and events */
	lll_isr_status_reset();
   1b038:	f00c fc54 	bl	278e4 <lll_isr_status_reset>

	/* Reset scanning state */
	lll = param;
	lll->state = 0U;
   1b03c:	7a23      	ldrb	r3, [r4, #8]
   1b03e:	f36f 0300 	bfc	r3, #0, #1
   1b042:	7223      	strb	r3, [r4, #8]
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	lll->is_adv_ind = 0U;
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b044:	2096      	movs	r0, #150	; 0x96
   1b046:	f000 ffef 	bl	1c028 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1b04a:	2300      	movs	r3, #0
   1b04c:	4618      	mov	r0, r3
   1b04e:	461a      	mov	r2, r3
   1b050:	4619      	mov	r1, r3
   1b052:	f000 ff61 	bl	1bf18 <radio_switch_complete_and_tx>

	node_rx = ull_pdu_rx_alloc_peek(1);
   1b056:	2001      	movs	r0, #1
   1b058:	f7fc ff4e 	bl	17ef8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b05c:	4605      	mov	r5, r0
   1b05e:	b958      	cbnz	r0, 1b078 <isr_common_done+0x44>
   1b060:	f240 222f 	movw	r2, #559	; 0x22f
   1b064:	490a      	ldr	r1, [pc, #40]	; (1b090 <isr_common_done+0x5c>)
   1b066:	480b      	ldr	r0, [pc, #44]	; (1b094 <isr_common_done+0x60>)
   1b068:	f006 ff2f 	bl	21eca <printk>
   1b06c:	4040      	eors	r0, r0
   1b06e:	f380 8811 	msr	BASEPRI, r0
   1b072:	f04f 0003 	mov.w	r0, #3
   1b076:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1b078:	f105 001c 	add.w	r0, r5, #28
   1b07c:	f000 fece 	bl	1be1c <radio_pkt_rx_set>
		radio_ar_configure(count, irks, 0);
#endif
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	radio_rssi_measure();
   1b080:	f000 ff62 	bl	1bf48 <radio_rssi_measure>

	radio_isr_set(isr_rx, param);
   1b084:	4621      	mov	r1, r4
   1b086:	4804      	ldr	r0, [pc, #16]	; (1b098 <isr_common_done+0x64>)
}
   1b088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(isr_rx, param);
   1b08c:	f000 be10 	b.w	1bcb0 <radio_isr_set>
   1b090:	0002f656 	.word	0x0002f656
   1b094:	0002a026 	.word	0x0002a026
   1b098:	0001b209 	.word	0x0001b209

0001b09c <isr_tx>:
{
   1b09c:	b570      	push	{r4, r5, r6, lr}
   1b09e:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1b0a0:	f00c fc10 	bl	278c4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b0a4:	2096      	movs	r0, #150	; 0x96
   1b0a6:	f000 ffbf 	bl	1c028 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1b0aa:	2300      	movs	r3, #0
   1b0ac:	4618      	mov	r0, r3
   1b0ae:	461a      	mov	r2, r3
   1b0b0:	4619      	mov	r1, r3
   1b0b2:	f000 ff31 	bl	1bf18 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b0b6:	2001      	movs	r0, #1
   1b0b8:	f7fc ff1e 	bl	17ef8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b0bc:	4604      	mov	r4, r0
   1b0be:	b958      	cbnz	r0, 1b0d8 <isr_tx+0x3c>
   1b0c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1b0c4:	491a      	ldr	r1, [pc, #104]	; (1b130 <isr_tx+0x94>)
   1b0c6:	481b      	ldr	r0, [pc, #108]	; (1b134 <isr_tx+0x98>)
   1b0c8:	f006 feff 	bl	21eca <printk>
   1b0cc:	4040      	eors	r0, r0
   1b0ce:	f380 8811 	msr	BASEPRI, r0
   1b0d2:	f04f 0003 	mov.w	r0, #3
   1b0d6:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1b0d8:	f104 001c 	add.w	r0, r4, #28
   1b0dc:	f000 fe9e 	bl	1be1c <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1b0e0:	f000 fed2 	bl	1be88 <radio_is_ready>
   1b0e4:	b158      	cbz	r0, 1b0fe <isr_tx+0x62>
   1b0e6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1b0ea:	4911      	ldr	r1, [pc, #68]	; (1b130 <isr_tx+0x94>)
   1b0ec:	4811      	ldr	r0, [pc, #68]	; (1b134 <isr_tx+0x98>)
   1b0ee:	f006 feec 	bl	21eca <printk>
   1b0f2:	4040      	eors	r0, r0
   1b0f4:	f380 8811 	msr	BASEPRI, r0
   1b0f8:	f04f 0003 	mov.w	r0, #3
   1b0fc:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b0fe:	f001 f88d 	bl	1c21c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1b102:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b104:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1b106:	4608      	mov	r0, r1
   1b108:	f00c fe1b 	bl	27d42 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1b10c:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1b10e:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1b110:	4608      	mov	r0, r1
   1b112:	f00c fe12 	bl	27d3a <radio_tx_chain_delay_get>
   1b116:	4434      	add	r4, r6
   1b118:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1b11a:	1a20      	subs	r0, r4, r0
   1b11c:	f001 f838 	bl	1c190 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1b120:	f000 ff12 	bl	1bf48 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1b124:	4629      	mov	r1, r5
   1b126:	4804      	ldr	r0, [pc, #16]	; (1b138 <isr_tx+0x9c>)
}
   1b128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1b12c:	f000 bdc0 	b.w	1bcb0 <radio_isr_set>
   1b130:	0002f656 	.word	0x0002f656
   1b134:	0002a026 	.word	0x0002a026
   1b138:	0001b209 	.word	0x0001b209

0001b13c <ticker_op_start_cb>:
{
   1b13c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b13e:	b158      	cbz	r0, 1b158 <ticker_op_start_cb+0x1c>
   1b140:	f240 128d 	movw	r2, #397	; 0x18d
   1b144:	4905      	ldr	r1, [pc, #20]	; (1b15c <ticker_op_start_cb+0x20>)
   1b146:	4806      	ldr	r0, [pc, #24]	; (1b160 <ticker_op_start_cb+0x24>)
   1b148:	f006 febf 	bl	21eca <printk>
   1b14c:	4040      	eors	r0, r0
   1b14e:	f380 8811 	msr	BASEPRI, r0
   1b152:	f04f 0003 	mov.w	r0, #3
   1b156:	df02      	svc	2
}
   1b158:	bd08      	pop	{r3, pc}
   1b15a:	bf00      	nop
   1b15c:	0002f656 	.word	0x0002f656
   1b160:	0002a026 	.word	0x0002a026

0001b164 <abort_cb>:
{
   1b164:	b510      	push	{r4, lr}
   1b166:	460c      	mov	r4, r1
	if (!prepare_param) {
   1b168:	b930      	cbnz	r0, 1b178 <abort_cb+0x14>
			radio_isr_set(isr_abort, param);
   1b16a:	480e      	ldr	r0, [pc, #56]	; (1b1a4 <abort_cb+0x40>)
   1b16c:	f000 fda0 	bl	1bcb0 <radio_isr_set>
}
   1b170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1b174:	f000 be6a 	b.w	1be4c <radio_disable>
	err = lll_hfclock_off();
   1b178:	f7ff fad8 	bl	1a72c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b17c:	2800      	cmp	r0, #0
   1b17e:	da0b      	bge.n	1b198 <abort_cb+0x34>
   1b180:	f240 127d 	movw	r2, #381	; 0x17d
   1b184:	4908      	ldr	r1, [pc, #32]	; (1b1a8 <abort_cb+0x44>)
   1b186:	4809      	ldr	r0, [pc, #36]	; (1b1ac <abort_cb+0x48>)
   1b188:	f006 fe9f 	bl	21eca <printk>
   1b18c:	4040      	eors	r0, r0
   1b18e:	f380 8811 	msr	BASEPRI, r0
   1b192:	f04f 0003 	mov.w	r0, #3
   1b196:	df02      	svc	2
	lll_done(param);
   1b198:	4620      	mov	r0, r4
}
   1b19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b19e:	f7ff b9b9 	b.w	1a514 <lll_done>
   1b1a2:	bf00      	nop
   1b1a4:	00027b4d 	.word	0x00027b4d
   1b1a8:	0002f656 	.word	0x0002f656
   1b1ac:	0002a026 	.word	0x0002a026

0001b1b0 <is_abort_cb>:
	if (next != curr) {
   1b1b0:	4282      	cmp	r2, r0
{
   1b1b2:	b508      	push	{r3, lr}
	if (next != curr) {
   1b1b4:	d017      	beq.n	1b1e6 <is_abort_cb+0x36>
			*resume_cb = resume_prepare_cb;
   1b1b6:	4a10      	ldr	r2, [pc, #64]	; (1b1f8 <is_abort_cb+0x48>)
   1b1b8:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1b1ba:	9b02      	ldr	r3, [sp, #8]
   1b1bc:	2200      	movs	r2, #0
   1b1be:	601a      	str	r2, [r3, #0]
			err = lll_hfclock_on();
   1b1c0:	f7ff fa9e 	bl	1a700 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1b1c4:	2800      	cmp	r0, #0
   1b1c6:	da0b      	bge.n	1b1e0 <is_abort_cb+0x30>
   1b1c8:	f44f 72a8 	mov.w	r2, #336	; 0x150
   1b1cc:	490b      	ldr	r1, [pc, #44]	; (1b1fc <is_abort_cb+0x4c>)
   1b1ce:	480c      	ldr	r0, [pc, #48]	; (1b200 <is_abort_cb+0x50>)
   1b1d0:	f006 fe7b 	bl	21eca <printk>
   1b1d4:	4040      	eors	r0, r0
   1b1d6:	f380 8811 	msr	BASEPRI, r0
   1b1da:	f04f 0003 	mov.w	r0, #3
   1b1de:	df02      	svc	2
   1b1e0:	f06f 000a 	mvn.w	r0, #10
   1b1e4:	e006      	b.n	1b1f4 <is_abort_cb+0x44>
		radio_isr_set(isr_window, lll);
   1b1e6:	4807      	ldr	r0, [pc, #28]	; (1b204 <is_abort_cb+0x54>)
   1b1e8:	4611      	mov	r1, r2
   1b1ea:	f000 fd61 	bl	1bcb0 <radio_isr_set>
	radio_disable();
   1b1ee:	f000 fe2d 	bl	1be4c <radio_disable>
	return 0;
   1b1f2:	2000      	movs	r0, #0
}
   1b1f4:	bd08      	pop	{r3, pc}
   1b1f6:	bf00      	nop
   1b1f8:	00027a9f 	.word	0x00027a9f
   1b1fc:	0002f656 	.word	0x0002f656
   1b200:	0002a026 	.word	0x0002a026
   1b204:	00027ac7 	.word	0x00027ac7

0001b208 <isr_rx>:
{
   1b208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b20c:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   1b20e:	f000 fe45 	bl	1be9c <radio_is_done>
   1b212:	b2c4      	uxtb	r4, r0
	if (trx_done) {
   1b214:	2c00      	cmp	r4, #0
   1b216:	f000 8089 	beq.w	1b32c <isr_rx+0x124>
		crc_ok = radio_crc_is_valid();
   1b21a:	f000 fe5f 	bl	1bedc <radio_crc_is_valid>
   1b21e:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
   1b222:	f000 fee1 	bl	1bfe8 <radio_filter_has_match>
   1b226:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
   1b228:	f000 fee8 	bl	1bffc <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1b22c:	f001 f814 	bl	1c258 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   1b230:	f000 fffa 	bl	1c228 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   1b234:	f000 fea0 	bl	1bf78 <radio_rssi_is_ready>
   1b238:	b2c6      	uxtb	r6, r0
	lll_isr_status_reset();
   1b23a:	f00c fb53 	bl	278e4 <lll_isr_status_reset>
	if (!trx_done) {
   1b23e:	2c00      	cmp	r4, #0
   1b240:	f000 808e 	beq.w	1b360 <isr_rx+0x158>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b244:	2001      	movs	r0, #1
   1b246:	f7fc fe57 	bl	17ef8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b24a:	4604      	mov	r4, r0
   1b24c:	b958      	cbnz	r0, 1b266 <isr_rx+0x5e>
   1b24e:	f240 12bb 	movw	r2, #443	; 0x1bb
   1b252:	4966      	ldr	r1, [pc, #408]	; (1b3ec <isr_rx+0x1e4>)
   1b254:	4866      	ldr	r0, [pc, #408]	; (1b3f0 <isr_rx+0x1e8>)
   1b256:	f006 fe38 	bl	21eca <printk>
   1b25a:	4040      	eors	r0, r0
   1b25c:	f380 8811 	msr	BASEPRI, r0
   1b260:	f04f 0003 	mov.w	r0, #3
   1b264:	df02      	svc	2
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   1b266:	f1b8 0f00 	cmp.w	r8, #0
   1b26a:	d079      	beq.n	1b360 <isr_rx+0x158>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
		(((lll->filter_policy & 0x01) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
#else
	return ((lll->filter_policy & 0x01) == 0U) ||
   1b26c:	7a29      	ldrb	r1, [r5, #8]
   1b26e:	0708      	lsls	r0, r1, #28
   1b270:	d501      	bpl.n	1b276 <isr_rx+0x6e>
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   1b272:	2f00      	cmp	r7, #0
   1b274:	d074      	beq.n	1b360 <isr_rx+0x158>

		return 0;
#endif /* CONFIG_BT_CENTRAL */

	/* Active scanner */
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1b276:	7f23      	ldrb	r3, [r4, #28]
   1b278:	f013 020f 	ands.w	r2, r3, #15
   1b27c:	d002      	beq.n	1b284 <isr_rx+0x7c>
   1b27e:	2a06      	cmp	r2, #6
   1b280:	f040 80b1 	bne.w	1b3e6 <isr_rx+0x1de>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1b284:	7f60      	ldrb	r0, [r4, #29]
   1b286:	2825      	cmp	r0, #37	; 0x25
   1b288:	d854      	bhi.n	1b334 <isr_rx+0x12c>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
		   lll->type &&
   1b28a:	f995 0008 	ldrsb.w	r0, [r5, #8]
   1b28e:	2800      	cmp	r0, #0
   1b290:	da50      	bge.n	1b334 <isr_rx+0x12c>
		bt_addr_t *lrpa;
#endif /* CONFIG_BT_CTLR_PRIVACY */
		int err;

		/* setup tIFS switching */
		radio_tmr_tifs_set(EVENT_IFS_US);
   1b292:	2096      	movs	r0, #150	; 0x96
   1b294:	f000 fec8 	bl	1c028 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1b298:	2000      	movs	r0, #0
   1b29a:	f000 fe31 	bl	1bf00 <radio_switch_complete_and_rx>

		/* save the adv packet */
		err = isr_rx_scan_report(lll, rssi_ready,
   1b29e:	2100      	movs	r1, #0
   1b2a0:	4630      	mov	r0, r6
   1b2a2:	f00c fc31 	bl	27b08 <isr_rx_scan_report.isra.5>
					 irkmatch_ok ? rl_idx : FILTER_IDX_NONE,
					 false);
		if (err) {
   1b2a6:	2800      	cmp	r0, #0
   1b2a8:	d15a      	bne.n	1b360 <isr_rx+0x158>
			return err;
		}

		/* prepare the scan request packet */
		pdu_tx = (void *)radio_pkt_scratch_get();
   1b2aa:	f000 fe25 	bl	1bef8 <radio_pkt_scratch_get>
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1b2ae:	7803      	ldrb	r3, [r0, #0]
   1b2b0:	2203      	movs	r2, #3
   1b2b2:	f362 0303 	bfi	r3, r2, #0, #4
   1b2b6:	7003      	strb	r3, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   1b2b8:	7f22      	ldrb	r2, [r4, #28]
   1b2ba:	b2db      	uxtb	r3, r3
   1b2bc:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1b2c0:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   1b2c4:	220c      	movs	r2, #12
   1b2c6:	7042      	strb	r2, [r0, #1]
			       BDADDR_SIZE);
		} else {
#else
		if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
			pdu_tx->tx_addr = lll->init_addr_type;
   1b2c8:	7a2a      	ldrb	r2, [r5, #8]
   1b2ca:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1b2ce:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
   1b2d2:	4606      	mov	r6, r0
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   1b2d4:	2206      	movs	r2, #6
			pdu_tx->tx_addr = lll->init_addr_type;
   1b2d6:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   1b2da:	f105 0109 	add.w	r1, r5, #9
   1b2de:	f008 ff36 	bl	2414e <memcpy>
			       &lll->init_addr[0], BDADDR_SIZE);
		}
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   1b2e2:	2206      	movs	r2, #6
   1b2e4:	f104 011e 	add.w	r1, r4, #30
   1b2e8:	f106 0008 	add.w	r0, r6, #8
   1b2ec:	f008 ff2f 	bl	2414e <memcpy>
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);

		radio_pkt_tx_set(pdu_tx);
   1b2f0:	4630      	mov	r0, r6
   1b2f2:	f000 fd99 	bl	1be28 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   1b2f6:	f000 fdc7 	bl	1be88 <radio_is_ready>
   1b2fa:	b158      	cbz	r0, 1b314 <isr_rx+0x10c>
   1b2fc:	f240 32f9 	movw	r2, #1017	; 0x3f9
   1b300:	493a      	ldr	r1, [pc, #232]	; (1b3ec <isr_rx+0x1e4>)
   1b302:	483b      	ldr	r0, [pc, #236]	; (1b3f0 <isr_rx+0x1e8>)
   1b304:	f006 fde1 	bl	21eca <printk>
   1b308:	4040      	eors	r0, r0
   1b30a:	f380 8811 	msr	BASEPRI, r0
   1b30e:	f04f 0003 	mov.w	r0, #3
   1b312:	df02      	svc	2
			lll_prof_cputime_capture();

		}

		/* capture end of Tx-ed PDU, used to calculate HCTO. */
		radio_tmr_end_capture();
   1b314:	f000 ff74 	bl	1c200 <radio_tmr_end_capture>
					 radio_rx_chain_delay_get(0, 0) -
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */

		/* switch scanner state to active */
		lll->state = 1U;
   1b318:	7a2b      	ldrb	r3, [r5, #8]
		if (pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) {
			lll->is_adv_ind = 1U;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		radio_isr_set(isr_tx, lll);
   1b31a:	4836      	ldr	r0, [pc, #216]	; (1b3f4 <isr_rx+0x1ec>)
		lll->state = 1U;
   1b31c:	f043 0301 	orr.w	r3, r3, #1
   1b320:	722b      	strb	r3, [r5, #8]
		radio_isr_set(isr_tx, lll);
   1b322:	4629      	mov	r1, r5
}
   1b324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_isr_set(isr_tx, lll);
   1b328:	f000 bcc2 	b.w	1bcb0 <radio_isr_set>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   1b32c:	46a0      	mov	r8, r4
   1b32e:	4626      	mov	r6, r4
   1b330:	4627      	mov	r7, r4
   1b332:	e782      	b.n	1b23a <isr_rx+0x32>

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1b334:	f013 0f0d 	tst.w	r3, #13
   1b338:	d001      	beq.n	1b33e <isr_rx+0x136>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1b33a:	2a06      	cmp	r2, #6
   1b33c:	d109      	bne.n	1b352 <isr_rx+0x14a>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1b33e:	7f60      	ldrb	r0, [r4, #29]
   1b340:	2825      	cmp	r0, #37	; 0x25
   1b342:	d806      	bhi.n	1b352 <isr_rx+0x14a>
	bool dir_report = false;
   1b344:	2100      	movs	r1, #0
		   (lll->phy)) ||
#endif /* CONFIG_BT_CTLR_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
		   (lll->state != 0U) &&
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   1b346:	7f63      	ldrb	r3, [r4, #29]
   1b348:	b153      	cbz	r3, 1b360 <isr_rx+0x158>
		   1) {
#endif /* !CONFIG_BT_CENTRAL */
		uint32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(lll, rssi_ready,
   1b34a:	4630      	mov	r0, r6
   1b34c:	f00c fbdc 	bl	27b08 <isr_rx_scan_report.isra.5>
					 irkmatch_ok ? rl_idx :
						       FILTER_IDX_NONE,
					 dir_report);
		if (err) {
   1b350:	e006      	b.n	1b360 <isr_rx+0x158>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   1b352:	2a01      	cmp	r2, #1
   1b354:	d00c      	beq.n	1b370 <isr_rx+0x168>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1b356:	7f23      	ldrb	r3, [r4, #28]
					&dir_report))) ||
   1b358:	f003 030f 	and.w	r3, r3, #15
   1b35c:	2b04      	cmp	r3, #4
   1b35e:	d02a      	beq.n	1b3b6 <isr_rx+0x1ae>
	radio_isr_set(isr_done, lll);
   1b360:	4629      	mov	r1, r5
   1b362:	4825      	ldr	r0, [pc, #148]	; (1b3f8 <isr_rx+0x1f0>)
   1b364:	f000 fca4 	bl	1bcb0 <radio_isr_set>
}
   1b368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	radio_disable();
   1b36c:	f000 bd6e 	b.w	1be4c <radio_disable>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1b370:	7f62      	ldrb	r2, [r4, #29]
   1b372:	2a0c      	cmp	r2, #12
   1b374:	d1f4      	bne.n	1b360 <isr_rx+0x158>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == pdu->rx_addr) &&
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
			BDADDR_SIZE))) ||
   1b376:	f3c1 1180 	ubfx	r1, r1, #6, #1
   1b37a:	ebb1 1fd3 	cmp.w	r1, r3, lsr #7
   1b37e:	d010      	beq.n	1b3a2 <isr_rx+0x19a>

static inline bool isr_scan_tgta_rpa_check(struct lll_scan *lll,
					   struct pdu_adv *pdu,
					   bool *dir_report)
{
	if (((lll->filter_policy & 0x02) != 0U) &&
   1b380:	7a2b      	ldrb	r3, [r5, #8]
   1b382:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   1b386:	079a      	lsls	r2, r3, #30
   1b388:	d5e5      	bpl.n	1b356 <isr_rx+0x14e>
   1b38a:	f994 301c 	ldrsb.w	r3, [r4, #28]
   1b38e:	2b00      	cmp	r3, #0
   1b390:	dae1      	bge.n	1b356 <isr_rx+0x14e>
	    (pdu->rx_addr != 0) &&
   1b392:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1b396:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b39a:	2b40      	cmp	r3, #64	; 0x40
   1b39c:	d1db      	bne.n	1b356 <isr_rx+0x14e>

		if (dir_report) {
			*dir_report = true;
		}

		return true;
   1b39e:	2101      	movs	r1, #1
   1b3a0:	e7d1      	b.n	1b346 <isr_rx+0x13e>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
   1b3a2:	2206      	movs	r2, #6
   1b3a4:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1b3a8:	f105 0009 	add.w	r0, r5, #9
   1b3ac:	f008 fea8 	bl	24100 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
   1b3b0:	2800      	cmp	r0, #0
   1b3b2:	d0c7      	beq.n	1b344 <isr_rx+0x13c>
   1b3b4:	e7e4      	b.n	1b380 <isr_rx+0x178>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1b3b6:	7f63      	ldrb	r3, [r4, #29]
   1b3b8:	2b25      	cmp	r3, #37	; 0x25
   1b3ba:	d8d1      	bhi.n	1b360 <isr_rx+0x158>
		   (lll->state != 0U) &&
   1b3bc:	7a2b      	ldrb	r3, [r5, #8]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   1b3be:	07db      	lsls	r3, r3, #31
   1b3c0:	d5ce      	bpl.n	1b360 <isr_rx+0x158>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   1b3c2:	f000 fd99 	bl	1bef8 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
   1b3c6:	7f23      	ldrb	r3, [r4, #28]
   1b3c8:	7802      	ldrb	r2, [r0, #0]
   1b3ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1b3ce:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1b3d2:	d1c5      	bne.n	1b360 <isr_rx+0x158>
		(memcmp(&sreq->scan_req.adv_addr[0],
   1b3d4:	2206      	movs	r2, #6
   1b3d6:	f104 011e 	add.w	r1, r4, #30
   1b3da:	3008      	adds	r0, #8
   1b3dc:	f008 fe90 	bl	24100 <memcmp>
		   (lll->state != 0U) &&
   1b3e0:	2800      	cmp	r0, #0
   1b3e2:	d0af      	beq.n	1b344 <isr_rx+0x13c>
   1b3e4:	e7bc      	b.n	1b360 <isr_rx+0x158>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1b3e6:	2a02      	cmp	r2, #2
   1b3e8:	e7a8      	b.n	1b33c <isr_rx+0x134>
   1b3ea:	bf00      	nop
   1b3ec:	0002f656 	.word	0x0002f656
   1b3f0:	0002a026 	.word	0x0002a026
   1b3f4:	0001b09d 	.word	0x0001b09d
   1b3f8:	00027a8d 	.word	0x00027a8d

0001b3fc <lll_scan_prepare>:
{
   1b3fc:	b513      	push	{r0, r1, r4, lr}
   1b3fe:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1b400:	f7ff f97e 	bl	1a700 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1b404:	2800      	cmp	r0, #0
   1b406:	da0a      	bge.n	1b41e <lll_scan_prepare+0x22>
   1b408:	2270      	movs	r2, #112	; 0x70
   1b40a:	4910      	ldr	r1, [pc, #64]	; (1b44c <lll_scan_prepare+0x50>)
   1b40c:	4810      	ldr	r0, [pc, #64]	; (1b450 <lll_scan_prepare+0x54>)
   1b40e:	f006 fd5c 	bl	21eca <printk>
   1b412:	4040      	eors	r0, r0
   1b414:	f380 8811 	msr	BASEPRI, r0
   1b418:	f04f 0003 	mov.w	r0, #3
   1b41c:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1b41e:	9400      	str	r4, [sp, #0]
   1b420:	2300      	movs	r3, #0
   1b422:	4a0c      	ldr	r2, [pc, #48]	; (1b454 <lll_scan_prepare+0x58>)
   1b424:	490c      	ldr	r1, [pc, #48]	; (1b458 <lll_scan_prepare+0x5c>)
   1b426:	480d      	ldr	r0, [pc, #52]	; (1b45c <lll_scan_prepare+0x60>)
   1b428:	f00c fa1b 	bl	27862 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b42c:	b160      	cbz	r0, 1b448 <lll_scan_prepare+0x4c>
   1b42e:	3044      	adds	r0, #68	; 0x44
   1b430:	d00a      	beq.n	1b448 <lll_scan_prepare+0x4c>
   1b432:	2273      	movs	r2, #115	; 0x73
   1b434:	4905      	ldr	r1, [pc, #20]	; (1b44c <lll_scan_prepare+0x50>)
   1b436:	4806      	ldr	r0, [pc, #24]	; (1b450 <lll_scan_prepare+0x54>)
   1b438:	f006 fd47 	bl	21eca <printk>
   1b43c:	4040      	eors	r0, r0
   1b43e:	f380 8811 	msr	BASEPRI, r0
   1b442:	f04f 0003 	mov.w	r0, #3
   1b446:	df02      	svc	2
}
   1b448:	b002      	add	sp, #8
   1b44a:	bd10      	pop	{r4, pc}
   1b44c:	0002f656 	.word	0x0002f656
   1b450:	0002a026 	.word	0x0002a026
   1b454:	0001ae8d 	.word	0x0001ae8d
   1b458:	0001b165 	.word	0x0001b165
   1b45c:	0001b1b1 	.word	0x0001b1b1

0001b460 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1b460:	b570      	push	{r4, r5, r6, lr}
   1b462:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1b464:	f00c fa3e 	bl	278e4 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1b468:	f7fc ff0c 	bl	18284 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1b46c:	4604      	mov	r4, r0
   1b46e:	b958      	cbnz	r0, 1b488 <isr_done+0x28>
   1b470:	f240 226d 	movw	r2, #621	; 0x26d
   1b474:	4914      	ldr	r1, [pc, #80]	; (1b4c8 <isr_done+0x68>)
   1b476:	4815      	ldr	r0, [pc, #84]	; (1b4cc <isr_done+0x6c>)
   1b478:	f006 fd27 	bl	21eca <printk>
   1b47c:	4040      	eors	r0, r0
   1b47e:	f380 8811 	msr	BASEPRI, r0
   1b482:	f04f 0003 	mov.w	r0, #3
   1b486:	df02      	svc	2

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1b488:	2301      	movs	r3, #1
   1b48a:	7023      	strb	r3, [r4, #0]
	e->trx_cnt = trx_cnt;
   1b48c:	4b10      	ldr	r3, [pc, #64]	; (1b4d0 <isr_done+0x70>)
	e->crc_valid = crc_valid;
   1b48e:	4a11      	ldr	r2, [pc, #68]	; (1b4d4 <isr_done+0x74>)
	e->trx_cnt = trx_cnt;
   1b490:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1b492:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   1b494:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = crc_valid;
   1b496:	71a2      	strb	r2, [r4, #6]
#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1b498:	b18b      	cbz	r3, 1b4be <isr_done+0x5e>
		struct lll_conn *lll = param;

		if (lll->role) {
   1b49a:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   1b49e:	2b00      	cmp	r3, #0
   1b4a0:	da0d      	bge.n	1b4be <isr_done+0x5e>
			preamble_to_addr_us =
				addr_us_get(0);
#endif /* !CONFIG_BT_CTLR_PHY */

			e->drift.start_to_address_actual_us =
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1b4a2:	f000 fea1 	bl	1c1e8 <radio_tmr_aa_restore>
   1b4a6:	4606      	mov	r6, r0
   1b4a8:	f000 fea4 	bl	1c1f4 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1b4ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1b4ae:	60e3      	str	r3, [r4, #12]
				lll->slave.window_widening_event_us;
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1b4b0:	2328      	movs	r3, #40	; 0x28
   1b4b2:	6123      	str	r3, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1b4b4:	1a30      	subs	r0, r6, r0

			/* Reset window widening, as anchor point sync-ed */
			lll->slave.window_widening_event_us = 0;
   1b4b6:	2300      	movs	r3, #0
			e->drift.start_to_address_actual_us =
   1b4b8:	60a0      	str	r0, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   1b4ba:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   1b4bc:	63eb      	str	r3, [r5, #60]	; 0x3c
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1b4be:	4628      	mov	r0, r5
}
   1b4c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lll_isr_cleanup(param);
   1b4c4:	f7ff b89e 	b.w	1a604 <lll_isr_cleanup>
   1b4c8:	0002f6b2 	.word	0x0002f6b2
   1b4cc:	0002a026 	.word	0x0002a026
   1b4d0:	200043a8 	.word	0x200043a8
   1b4d4:	20004569 	.word	0x20004569

0001b4d8 <lll_conn_prepare_reset>:
	trx_cnt = 0U;
   1b4d8:	4a03      	ldr	r2, [pc, #12]	; (1b4e8 <lll_conn_prepare_reset+0x10>)
   1b4da:	2300      	movs	r3, #0
   1b4dc:	8013      	strh	r3, [r2, #0]
	crc_valid = 0U;
   1b4de:	4a03      	ldr	r2, [pc, #12]	; (1b4ec <lll_conn_prepare_reset+0x14>)
   1b4e0:	7013      	strb	r3, [r2, #0]
	crc_expire = 0U;
   1b4e2:	4a03      	ldr	r2, [pc, #12]	; (1b4f0 <lll_conn_prepare_reset+0x18>)
   1b4e4:	7013      	strb	r3, [r2, #0]
}
   1b4e6:	4770      	bx	lr
   1b4e8:	200043a8 	.word	0x200043a8
   1b4ec:	20004569 	.word	0x20004569
   1b4f0:	20004568 	.word	0x20004568

0001b4f4 <lll_conn_abort_cb>:
{
   1b4f4:	b510      	push	{r4, lr}
   1b4f6:	460c      	mov	r4, r1
	if (!prepare_param) {
   1b4f8:	b930      	cbnz	r0, 1b508 <lll_conn_abort_cb+0x14>
		radio_isr_set(isr_done, param);
   1b4fa:	480d      	ldr	r0, [pc, #52]	; (1b530 <lll_conn_abort_cb+0x3c>)
   1b4fc:	f000 fbd8 	bl	1bcb0 <radio_isr_set>
}
   1b500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1b504:	f000 bca2 	b.w	1be4c <radio_disable>
	err = lll_hfclock_off();
   1b508:	f7ff f910 	bl	1a72c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b50c:	2800      	cmp	r0, #0
   1b50e:	da0a      	bge.n	1b526 <lll_conn_abort_cb+0x32>
   1b510:	229b      	movs	r2, #155	; 0x9b
   1b512:	4908      	ldr	r1, [pc, #32]	; (1b534 <lll_conn_abort_cb+0x40>)
   1b514:	4808      	ldr	r0, [pc, #32]	; (1b538 <lll_conn_abort_cb+0x44>)
   1b516:	f006 fcd8 	bl	21eca <printk>
   1b51a:	4040      	eors	r0, r0
   1b51c:	f380 8811 	msr	BASEPRI, r0
   1b520:	f04f 0003 	mov.w	r0, #3
   1b524:	df02      	svc	2
	lll_done(param);
   1b526:	4620      	mov	r0, r4
}
   1b528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b52c:	f7fe bff2 	b.w	1a514 <lll_done>
   1b530:	0001b461 	.word	0x0001b461
   1b534:	0002f6b2 	.word	0x0002f6b2
   1b538:	0002a026 	.word	0x0002a026

0001b53c <lll_conn_rx_pkt_set>:
{
   1b53c:	b510      	push	{r4, lr}
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b53e:	2001      	movs	r0, #1
   1b540:	f7fc fcda 	bl	17ef8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b544:	4604      	mov	r4, r0
   1b546:	b958      	cbnz	r0, 1b560 <lll_conn_rx_pkt_set+0x24>
   1b548:	f240 12d5 	movw	r2, #469	; 0x1d5
   1b54c:	490c      	ldr	r1, [pc, #48]	; (1b580 <lll_conn_rx_pkt_set+0x44>)
   1b54e:	480d      	ldr	r0, [pc, #52]	; (1b584 <lll_conn_rx_pkt_set+0x48>)
   1b550:	f006 fcbb 	bl	21eca <printk>
   1b554:	4040      	eors	r0, r0
   1b556:	f380 8811 	msr	BASEPRI, r0
   1b55a:	f04f 0003 	mov.w	r0, #3
   1b55e:	df02      	svc	2
	radio_phy_set(phy, 0);
   1b560:	2100      	movs	r1, #0
   1b562:	4608      	mov	r0, r1
   1b564:	f000 fbe8 	bl	1bd38 <radio_phy_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1b568:	2008      	movs	r0, #8
   1b56a:	2201      	movs	r2, #1
   1b56c:	211b      	movs	r1, #27
   1b56e:	f000 fc29 	bl	1bdc4 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1b572:	f104 001c 	add.w	r0, r4, #28
}
   1b576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1b57a:	f000 bc4f 	b.w	1be1c <radio_pkt_rx_set>
   1b57e:	bf00      	nop
   1b580:	0002f6b2 	.word	0x0002f6b2
   1b584:	0002a026 	.word	0x0002a026

0001b588 <lll_conn_isr_tx>:
{
   1b588:	b570      	push	{r4, r5, r6, lr}
   1b58a:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1b58c:	f00c f99a 	bl	278c4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b590:	2096      	movs	r0, #150	; 0x96
   1b592:	f000 fd49 	bl	1c028 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1b596:	2300      	movs	r3, #0
   1b598:	4618      	mov	r0, r3
   1b59a:	461a      	mov	r2, r3
   1b59c:	4619      	mov	r1, r3
   1b59e:	f000 fcbb 	bl	1bf18 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1b5a2:	4628      	mov	r0, r5
   1b5a4:	f7ff ffca 	bl	1b53c <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1b5a8:	f000 fc6e 	bl	1be88 <radio_is_ready>
   1b5ac:	b158      	cbz	r0, 1b5c6 <lll_conn_isr_tx+0x3e>
   1b5ae:	f240 12a1 	movw	r2, #417	; 0x1a1
   1b5b2:	4910      	ldr	r1, [pc, #64]	; (1b5f4 <lll_conn_isr_tx+0x6c>)
   1b5b4:	4810      	ldr	r0, [pc, #64]	; (1b5f8 <lll_conn_isr_tx+0x70>)
   1b5b6:	f006 fc88 	bl	21eca <printk>
   1b5ba:	4040      	eors	r0, r0
   1b5bc:	f380 8811 	msr	BASEPRI, r0
   1b5c0:	f04f 0003 	mov.w	r0, #3
   1b5c4:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1b5c6:	f000 fe29 	bl	1c21c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1b5ca:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1b5cc:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1b5ce:	4608      	mov	r0, r1
   1b5d0:	f00c fbb7 	bl	27d42 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1b5d4:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1b5d6:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1b5d8:	4608      	mov	r0, r1
   1b5da:	f00c fbae 	bl	27d3a <radio_tx_chain_delay_get>
   1b5de:	4434      	add	r4, r6
   1b5e0:	34cb      	adds	r4, #203	; 0xcb
	radio_tmr_hcto_configure(hcto);
   1b5e2:	1a20      	subs	r0, r4, r0
   1b5e4:	f000 fdd4 	bl	1c190 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1b5e8:	4629      	mov	r1, r5
   1b5ea:	4804      	ldr	r0, [pc, #16]	; (1b5fc <lll_conn_isr_tx+0x74>)
}
   1b5ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1b5f0:	f000 bb5e 	b.w	1bcb0 <radio_isr_set>
   1b5f4:	0002f6b2 	.word	0x0002f6b2
   1b5f8:	0002a026 	.word	0x0002a026
   1b5fc:	0001b601 	.word	0x0001b601

0001b600 <lll_conn_isr_rx>:
{
   1b600:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1b604:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1b606:	f000 fc49 	bl	1be9c <radio_is_done>
   1b60a:	b2c5      	uxtb	r5, r0
	if (trx_done) {
   1b60c:	b185      	cbz	r5, 1b630 <lll_conn_isr_rx+0x30>
		crc_ok = radio_crc_is_valid();
   1b60e:	f000 fc65 	bl	1bedc <radio_crc_is_valid>
   1b612:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   1b614:	f000 fcb0 	bl	1bf78 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1b618:	f00c f95b 	bl	278d2 <lll_isr_rx_status_reset>
	if (!trx_done) {
   1b61c:	b955      	cbnz	r5, 1b634 <lll_conn_isr_rx+0x34>
		radio_isr_set(isr_done, param);
   1b61e:	4621      	mov	r1, r4
   1b620:	4893      	ldr	r0, [pc, #588]	; (1b870 <lll_conn_isr_rx+0x270>)
   1b622:	f000 fb45 	bl	1bcb0 <radio_isr_set>
		radio_disable();
   1b626:	f000 fc11 	bl	1be4c <radio_disable>
}
   1b62a:	b002      	add	sp, #8
   1b62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = rssi_ready = 0U;
   1b630:	462f      	mov	r7, r5
   1b632:	e7f1      	b.n	1b618 <lll_conn_isr_rx+0x18>
	trx_cnt++;
   1b634:	4a8f      	ldr	r2, [pc, #572]	; (1b874 <lll_conn_isr_rx+0x274>)
   1b636:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b638:	2001      	movs	r0, #1
	trx_cnt++;
   1b63a:	3301      	adds	r3, #1
   1b63c:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b63e:	f7fc fc5b 	bl	17ef8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b642:	4606      	mov	r6, r0
   1b644:	b950      	cbnz	r0, 1b65c <lll_conn_isr_rx+0x5c>
   1b646:	22d0      	movs	r2, #208	; 0xd0
   1b648:	498b      	ldr	r1, [pc, #556]	; (1b878 <lll_conn_isr_rx+0x278>)
   1b64a:	488c      	ldr	r0, [pc, #560]	; (1b87c <lll_conn_isr_rx+0x27c>)
   1b64c:	f006 fc3d 	bl	21eca <printk>
   1b650:	4040      	eors	r0, r0
   1b652:	f380 8811 	msr	BASEPRI, r0
   1b656:	f04f 0003 	mov.w	r0, #3
   1b65a:	df02      	svc	2
	if (crc_ok) {
   1b65c:	f8df 8228 	ldr.w	r8, [pc, #552]	; 1b888 <lll_conn_isr_rx+0x288>
   1b660:	2f00      	cmp	r7, #0
   1b662:	f000 80e6 	beq.w	1b832 <lll_conn_isr_rx+0x232>
		       offsetof(struct pdu_data, lldata));
	}
#endif

	/* Ack for tx-ed data */
	if (pdu_data_rx->nesn != lll->sn) {
   1b666:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1b66a:	7f31      	ldrb	r1, [r6, #28]
   1b66c:	f003 0201 	and.w	r2, r3, #1
   1b670:	f3c1 0180 	ubfx	r1, r1, #2, #1
   1b674:	4291      	cmp	r1, r2
   1b676:	f000 80a6 	beq.w	1b7c6 <lll_conn_isr_rx+0x1c6>
		struct pdu_data *pdu_data_tx;
		struct node_tx *tx;
		memq_link_t *link;

		/* Increment sequence number */
		lll->sn++;
   1b67a:	f082 0201 	eor.w	r2, r2, #1
   1b67e:	f362 0300 	bfi	r3, r2, #0, #1
   1b682:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56

#if defined(CONFIG_BT_PERIPHERAL)
		/* First ack (and redundantly any other ack) enable use of
		 * slave latency.
		 */
		if (lll->role) {
   1b686:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1b68a:	2b00      	cmp	r3, #0
			lll->slave.latency_enabled = 1;
   1b68c:	bfbe      	ittt	lt
   1b68e:	f894 3024 	ldrblt.w	r3, [r4, #36]	; 0x24
   1b692:	f043 0301 	orrlt.w	r3, r3, #1
   1b696:	f884 3024 	strblt.w	r3, [r4, #36]	; 0x24
		}
#endif /* CONFIG_BT_PERIPHERAL */

		FORCE_MD_CNT_DEC();

		if (!lll->empty) {
   1b69a:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1b69e:	f013 0504 	ands.w	r5, r3, #4
   1b6a2:	f040 808a 	bne.w	1b7ba <lll_conn_isr_rx+0x1ba>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1b6a6:	aa01      	add	r2, sp, #4
   1b6a8:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   1b6ac:	f00b fb4e 	bl	26d4c <memq_peek>
			}

			link = NULL;
		}

		if (link) {
   1b6b0:	4681      	mov	r9, r0
   1b6b2:	2800      	cmp	r0, #0
   1b6b4:	f040 808a 	bne.w	1b7cc <lll_conn_isr_rx+0x1cc>
			}
		}
	}

	/* process received data */
	if ((pdu_data_rx->sn == lll->nesn) &&
   1b6b8:	7f32      	ldrb	r2, [r6, #28]
   1b6ba:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1b6be:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1b6c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1b6c6:	429a      	cmp	r2, r3
   1b6c8:	f000 809f 	beq.w	1b80a <lll_conn_isr_rx+0x20a>
	is_rx_enqueue = 0U;
   1b6cc:	f04f 0a00 	mov.w	sl, #0
		crc_valid = 1U;
   1b6d0:	4b6b      	ldr	r3, [pc, #428]	; (1b880 <lll_conn_isr_rx+0x280>)
		crc_expire = 0U;
   1b6d2:	2500      	movs	r5, #0
		crc_valid = 1U;
   1b6d4:	2201      	movs	r2, #1
		crc_expire = 0U;
   1b6d6:	f888 5000 	strb.w	r5, [r8]
		crc_valid = 1U;
   1b6da:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b6dc:	a901      	add	r1, sp, #4
   1b6de:	4620      	mov	r0, r4
   1b6e0:	f00c fa78 	bl	27bd4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1b6e4:	2d00      	cmp	r5, #0
   1b6e6:	f040 80b7 	bne.w	1b858 <lll_conn_isr_rx+0x258>
   1b6ea:	b157      	cbz	r7, 1b702 <lll_conn_isr_rx+0x102>
   1b6ec:	7f33      	ldrb	r3, [r6, #28]
   1b6ee:	06d9      	lsls	r1, r3, #27
   1b6f0:	d407      	bmi.n	1b702 <lll_conn_isr_rx+0x102>
			      (pdu_data_tx->md == 0) &&
   1b6f2:	9b01      	ldr	r3, [sp, #4]
   1b6f4:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1b6f6:	06d2      	lsls	r2, r2, #27
   1b6f8:	d403      	bmi.n	1b702 <lll_conn_isr_rx+0x102>
			      (pdu_data_tx->md == 0) &&
   1b6fa:	785b      	ldrb	r3, [r3, #1]
   1b6fc:	2b00      	cmp	r3, #0
   1b6fe:	f000 80ab 	beq.w	1b858 <lll_conn_isr_rx+0x258>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1b702:	2096      	movs	r0, #150	; 0x96
   1b704:	f000 fc90 	bl	1c028 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1b708:	2000      	movs	r0, #0
   1b70a:	f000 fbf9 	bl	1bf00 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1b70e:	4621      	mov	r1, r4
   1b710:	485c      	ldr	r0, [pc, #368]	; (1b884 <lll_conn_isr_rx+0x284>)
   1b712:	f000 facd 	bl	1bcb0 <radio_isr_set>
		radio_tmr_end_capture();
   1b716:	f000 fd73 	bl	1c200 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1b71a:	9901      	ldr	r1, [sp, #4]
   1b71c:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
   1b720:	780b      	ldrb	r3, [r1, #0]
   1b722:	f3c2 0200 	ubfx	r2, r2, #0, #1
   1b726:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = lll->nesn;
   1b72a:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
   1b72e:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1b732:	f362 0382 	bfi	r3, r2, #2, #1
   1b736:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1b738:	4620      	mov	r0, r4
   1b73a:	f00c fa3b 	bl	27bb4 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1b73e:	f000 fba3 	bl	1be88 <radio_is_ready>
   1b742:	b158      	cbz	r0, 1b75c <lll_conn_isr_rx+0x15c>
   1b744:	f44f 729e 	mov.w	r2, #316	; 0x13c
   1b748:	494b      	ldr	r1, [pc, #300]	; (1b878 <lll_conn_isr_rx+0x278>)
   1b74a:	484c      	ldr	r0, [pc, #304]	; (1b87c <lll_conn_isr_rx+0x27c>)
   1b74c:	f006 fbbd 	bl	21eca <printk>
   1b750:	4040      	eors	r0, r0
   1b752:	f380 8811 	msr	BASEPRI, r0
   1b756:	f04f 0003 	mov.w	r0, #3
   1b75a:	df02      	svc	2
	if (!radio_tmr_aa_restore()) {
   1b75c:	f000 fd44 	bl	1c1e8 <radio_tmr_aa_restore>
   1b760:	b918      	cbnz	r0, 1b76a <lll_conn_isr_rx+0x16a>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1b762:	f000 fd35 	bl	1c1d0 <radio_tmr_aa_get>
   1b766:	f000 fd39 	bl	1c1dc <radio_tmr_aa_save>
	if (tx_release) {
   1b76a:	f1b9 0f00 	cmp.w	r9, #0
   1b76e:	d07a      	beq.n	1b866 <lll_conn_isr_rx+0x266>
		LL_ASSERT(lll->handle != 0xFFFF);
   1b770:	8a22      	ldrh	r2, [r4, #16]
   1b772:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b776:	429a      	cmp	r2, r3
   1b778:	d10b      	bne.n	1b792 <lll_conn_isr_rx+0x192>
   1b77a:	f240 124b 	movw	r2, #331	; 0x14b
   1b77e:	493e      	ldr	r1, [pc, #248]	; (1b878 <lll_conn_isr_rx+0x278>)
   1b780:	483e      	ldr	r0, [pc, #248]	; (1b87c <lll_conn_isr_rx+0x27c>)
   1b782:	f006 fba2 	bl	21eca <printk>
   1b786:	4040      	eors	r0, r0
   1b788:	f380 8811 	msr	BASEPRI, r0
   1b78c:	f04f 0003 	mov.w	r0, #3
   1b790:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1b792:	4649      	mov	r1, r9
   1b794:	8a20      	ldrh	r0, [r4, #16]
   1b796:	f7fe fa8d 	bl	19cb4 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1b79a:	f1ba 0f00 	cmp.w	sl, #0
   1b79e:	d009      	beq.n	1b7b4 <lll_conn_isr_rx+0x1b4>
		ull_pdu_rx_alloc();
   1b7a0:	f7fc fbc2 	bl	17f28 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1b7a4:	2303      	movs	r3, #3
   1b7a6:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1b7a8:	8a23      	ldrh	r3, [r4, #16]
   1b7aa:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1b7ac:	4631      	mov	r1, r6
   1b7ae:	6830      	ldr	r0, [r6, #0]
   1b7b0:	f7fc fbd0 	bl	17f54 <ull_rx_put>
		ull_rx_sched();
   1b7b4:	f7fc fbde 	bl	17f74 <ull_rx_sched>
	ARG_UNUSED(rssi_ready);
   1b7b8:	e737      	b.n	1b62a <lll_conn_isr_rx+0x2a>
			lll->empty = 0;
   1b7ba:	f36f 0382 	bfc	r3, #2, #1
   1b7be:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1b7c2:	f000 fb95 	bl	1bef0 <radio_pkt_empty_get>
	tx_release = NULL;
   1b7c6:	f04f 0900 	mov.w	r9, #0
   1b7ca:	e775      	b.n	1b6b8 <lll_conn_isr_rx+0xb8>
					       lll->packet_tx_head_offset);
   1b7cc:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
			pdu_data_tx_len = pdu_data_tx->len;
   1b7d0:	9a01      	ldr	r2, [sp, #4]
   1b7d2:	441a      	add	r2, r3
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1b7d4:	7952      	ldrb	r2, [r2, #5]
   1b7d6:	4413      	add	r3, r2
			if (offset < lll->packet_tx_head_len) {
   1b7d8:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1b7dc:	b2db      	uxtb	r3, r3
			if (offset < lll->packet_tx_head_len) {
   1b7de:	4293      	cmp	r3, r2
   1b7e0:	d202      	bcs.n	1b7e8 <lll_conn_isr_rx+0x1e8>
				lll->packet_tx_head_offset = offset;
   1b7e2:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
   1b7e6:	e7ee      	b.n	1b7c6 <lll_conn_isr_rx+0x1c6>
			} else if (offset == lll->packet_tx_head_len) {
   1b7e8:	d1ed      	bne.n	1b7c6 <lll_conn_isr_rx+0x1c6>
				memq_dequeue(lll->memq_tx.tail,
   1b7ea:	462a      	mov	r2, r5
				lll->packet_tx_head_len = 0;
   1b7ec:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
				memq_dequeue(lll->memq_tx.tail,
   1b7f0:	f104 0140 	add.w	r1, r4, #64	; 0x40
   1b7f4:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1b7f6:	f00b fab1 	bl	26d5c <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1b7fa:	9b01      	ldr	r3, [sp, #4]
   1b7fc:	681a      	ldr	r2, [r3, #0]
   1b7fe:	f8c9 2000 	str.w	r2, [r9]
				tx->next = link;
   1b802:	f8c3 9000 	str.w	r9, [r3]
   1b806:	4699      	mov	r9, r3
   1b808:	e756      	b.n	1b6b8 <lll_conn_isr_rx+0xb8>
	    /* check so that we will NEVER use the rx buffer reserved for empty
	     * packet and internal control enqueue
	     */
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1b80a:	2003      	movs	r0, #3
   1b80c:	f7fc fb74 	bl	17ef8 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1b810:	2800      	cmp	r0, #0
   1b812:	f43f af5b 	beq.w	1b6cc <lll_conn_isr_rx+0xcc>
		/* Increment next expected serial number */
		lll->nesn++;
   1b816:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1b81a:	f083 0302 	eor.w	r3, r3, #2
   1b81e:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56

		if (pdu_data_rx->len != 0) {
   1b822:	f896 a01d 	ldrb.w	sl, [r6, #29]
	is_rx_enqueue = 0U;
   1b826:	f11a 0a00 	adds.w	sl, sl, #0
   1b82a:	bf18      	it	ne
   1b82c:	f04f 0a01 	movne.w	sl, #1
   1b830:	e74e      	b.n	1b6d0 <lll_conn_isr_rx+0xd0>
		if (crc_expire == 0U) {
   1b832:	f898 3000 	ldrb.w	r3, [r8]
   1b836:	b913      	cbnz	r3, 1b83e <lll_conn_isr_rx+0x23e>
			crc_expire = 2U;
   1b838:	2302      	movs	r3, #2
   1b83a:	f888 3000 	strb.w	r3, [r8]
		crc_expire--;
   1b83e:	f898 5000 	ldrb.w	r5, [r8]
   1b842:	3d01      	subs	r5, #1
   1b844:	b2ed      	uxtb	r5, r5
   1b846:	f888 5000 	strb.w	r5, [r8]
	is_rx_enqueue = 0U;
   1b84a:	f04f 0a00 	mov.w	sl, #0
		is_done = (crc_expire == 0U);
   1b84e:	fab5 f585 	clz	r5, r5
   1b852:	096d      	lsrs	r5, r5, #5
	tx_release = NULL;
   1b854:	46d1      	mov	r9, sl
   1b856:	e741      	b.n	1b6dc <lll_conn_isr_rx+0xdc>
		radio_isr_set(isr_done, param);
   1b858:	4621      	mov	r1, r4
   1b85a:	4805      	ldr	r0, [pc, #20]	; (1b870 <lll_conn_isr_rx+0x270>)
   1b85c:	f000 fa28 	bl	1bcb0 <radio_isr_set>
			radio_switch_complete_and_disable();
   1b860:	f000 fb64 	bl	1bf2c <radio_switch_complete_and_disable>
   1b864:	e759      	b.n	1b71a <lll_conn_isr_rx+0x11a>
	if (is_rx_enqueue) {
   1b866:	f1ba 0f00 	cmp.w	sl, #0
   1b86a:	f43f aede 	beq.w	1b62a <lll_conn_isr_rx+0x2a>
   1b86e:	e797      	b.n	1b7a0 <lll_conn_isr_rx+0x1a0>
   1b870:	0001b461 	.word	0x0001b461
   1b874:	200043a8 	.word	0x200043a8
   1b878:	0002f6b2 	.word	0x0002f6b2
   1b87c:	0002a026 	.word	0x0002a026
   1b880:	20004569 	.word	0x20004569
   1b884:	0001b589 	.word	0x0001b589
   1b888:	20004568 	.word	0x20004568

0001b88c <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1b88c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1b890:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1b892:	8a22      	ldrh	r2, [r4, #16]
   1b894:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b898:	429a      	cmp	r2, r3
{
   1b89a:	4681      	mov	r9, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   1b89c:	d115      	bne.n	1b8ca <prepare_cb+0x3e>
		int err;

		err = lll_hfclock_off();
   1b89e:	f7fe ff45 	bl	1a72c <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1b8a2:	2800      	cmp	r0, #0
   1b8a4:	da0a      	bge.n	1b8bc <prepare_cb+0x30>
   1b8a6:	227d      	movs	r2, #125	; 0x7d
   1b8a8:	495b      	ldr	r1, [pc, #364]	; (1ba18 <prepare_cb+0x18c>)
   1b8aa:	485c      	ldr	r0, [pc, #368]	; (1ba1c <prepare_cb+0x190>)
   1b8ac:	f006 fb0d 	bl	21eca <printk>
   1b8b0:	4040      	eors	r0, r0
   1b8b2:	f380 8811 	msr	BASEPRI, r0
   1b8b6:	f04f 0003 	mov.w	r0, #3
   1b8ba:	df02      	svc	2

		lll_done(NULL);
   1b8bc:	2000      	movs	r0, #0
   1b8be:	f7fe fe29 	bl	1a514 <lll_done>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1b8c2:	2000      	movs	r0, #0
   1b8c4:	b003      	add	sp, #12
   1b8c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	lll_conn_prepare_reset();
   1b8ca:	f7ff fe05 	bl	1b4d8 <lll_conn_prepare_reset>
	lll->latency_event = lll->latency_prepare - 1;
   1b8ce:	8ae3      	ldrh	r3, [r4, #22]
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1b8d0:	8b61      	ldrh	r1, [r4, #26]
	lll->latency_event = lll->latency_prepare - 1;
   1b8d2:	1e5a      	subs	r2, r3, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1b8d4:	440b      	add	r3, r1
   1b8d6:	8363      	strh	r3, [r4, #26]
	if (lll->data_chan_sel) {
   1b8d8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1b8dc:	b292      	uxth	r2, r2
	lll->latency_prepare = 0;
   1b8de:	2600      	movs	r6, #0
	if (lll->data_chan_sel) {
   1b8e0:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   1b8e2:	8322      	strh	r2, [r4, #24]
	lll->latency_prepare = 0;
   1b8e4:	82e6      	strh	r6, [r4, #22]
	if (lll->data_chan_sel) {
   1b8e6:	d577      	bpl.n	1b9d8 <prepare_cb+0x14c>
		LL_ASSERT(0);
   1b8e8:	229b      	movs	r2, #155	; 0x9b
   1b8ea:	494b      	ldr	r1, [pc, #300]	; (1ba18 <prepare_cb+0x18c>)
   1b8ec:	484b      	ldr	r0, [pc, #300]	; (1ba1c <prepare_cb+0x190>)
   1b8ee:	f006 faec 	bl	21eca <printk>
   1b8f2:	4040      	eors	r0, r0
   1b8f4:	f380 8811 	msr	BASEPRI, r0
   1b8f8:	f04f 0003 	mov.w	r0, #3
   1b8fc:	df02      	svc	2
	lll->slave.window_widening_event_us +=
   1b8fe:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1b902:	4413      	add	r3, r2
	    lll->slave.window_widening_max_us) {
   1b904:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
   1b906:	429a      	cmp	r2, r3
   1b908:	bf94      	ite	ls
   1b90a:	6362      	strls	r2, [r4, #52]	; 0x34
   1b90c:	6363      	strhi	r3, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   1b90e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1b912:	2500      	movs	r5, #0
	lll->slave.window_size_event_us +=
   1b914:	4413      	add	r3, r2
	lll->slave.window_size_prepare_us = 0;
   1b916:	e9c4 530e 	strd	r5, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1b91a:	6325      	str	r5, [r4, #48]	; 0x30
	radio_reset();
   1b91c:	f000 f9e8 	bl	1bcf0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1b920:	4628      	mov	r0, r5
   1b922:	f000 fa19 	bl	1bd58 <radio_tx_power_set>
	lll_conn_rx_pkt_set(lll);
   1b926:	4620      	mov	r0, r4
   1b928:	f7ff fe08 	bl	1b53c <lll_conn_rx_pkt_set>
	radio_aa_set(lll->access_addr);
   1b92c:	f104 0008 	add.w	r0, r4, #8
   1b930:	f000 fa30 	bl	1bd94 <radio_aa_set>
			     ((uint32_t)lll->crc_init[1] << 8) |
   1b934:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1b936:	7ba1      	ldrb	r1, [r4, #14]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1b938:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1b93a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   1b93e:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1b940:	f240 605b 	movw	r0, #1627	; 0x65b
   1b944:	4319      	orrs	r1, r3
   1b946:	f000 fabd 	bl	1bec4 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   1b94a:	4630      	mov	r0, r6
   1b94c:	f7fe fe2c 	bl	1a5a8 <lll_chan_set>
	radio_isr_set(lll_conn_isr_rx, lll);
   1b950:	4621      	mov	r1, r4
   1b952:	4833      	ldr	r0, [pc, #204]	; (1ba20 <prepare_cb+0x194>)
   1b954:	f000 f9ac 	bl	1bcb0 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b958:	2096      	movs	r0, #150	; 0x96
   1b95a:	f000 fb65 	bl	1c028 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1b95e:	462b      	mov	r3, r5
   1b960:	462a      	mov	r2, r5
   1b962:	4629      	mov	r1, r5
   1b964:	4628      	mov	r0, r5
   1b966:	f000 fad7 	bl	1bf18 <radio_switch_complete_and_tx>
	evt = HDR_LLL2EVT(lll);
   1b96a:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1b96e:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_at_event += lll_evt_offset_get(evt);
   1b972:	4640      	mov	r0, r8
   1b974:	f00b ff83 	bl	2787e <lll_evt_offset_get>
   1b978:	4407      	add	r7, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1b97a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1b97e:	f107 0109 	add.w	r1, r7, #9
   1b982:	4628      	mov	r0, r5
   1b984:	f000 fb5c 	bl	1c040 <radio_tmr_start>
   1b988:	4681      	mov	r9, r0
	radio_tmr_aa_capture();
   1b98a:	f000 fc0d 	bl	1c1a8 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1b98e:	4628      	mov	r0, r5
   1b990:	f000 fc24 	bl	1c1dc <radio_tmr_aa_save>
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1b994:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1b996:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	hcto += radio_rx_ready_delay_get(0, 0);
   1b998:	4629      	mov	r1, r5
   1b99a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   1b99e:	4628      	mov	r0, r5
   1b9a0:	f103 0688 	add.w	r6, r3, #136	; 0x88
   1b9a4:	f00c f9cb 	bl	27d3e <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
   1b9a8:	444e      	add	r6, r9
	hcto += radio_rx_chain_delay_get(0, 0);
   1b9aa:	4629      	mov	r1, r5
	hcto += addr_us_get(0);
   1b9ac:	4406      	add	r6, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1b9ae:	4628      	mov	r0, r5
   1b9b0:	f00c f9c7 	bl	27d42 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1b9b4:	4430      	add	r0, r6
   1b9b6:	f000 fbeb 	bl	1c190 <radio_tmr_hcto_configure>
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1b9ba:	7c21      	ldrb	r1, [r4, #16]
   1b9bc:	3105      	adds	r1, #5
   1b9be:	463a      	mov	r2, r7
   1b9c0:	b2c9      	uxtb	r1, r1
   1b9c2:	4640      	mov	r0, r8
   1b9c4:	f00b ff69 	bl	2789a <lll_preempt_calc>
   1b9c8:	b198      	cbz	r0, 1b9f2 <prepare_cb+0x166>
		radio_isr_set(lll_isr_abort, lll);
   1b9ca:	4621      	mov	r1, r4
   1b9cc:	4815      	ldr	r0, [pc, #84]	; (1ba24 <prepare_cb+0x198>)
   1b9ce:	f000 f96f 	bl	1bcb0 <radio_isr_set>
		radio_disable();
   1b9d2:	f000 fa3b 	bl	1be4c <radio_disable>
   1b9d6:	e774      	b.n	1b8c2 <prepare_cb+0x36>
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1b9d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b9dc:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1b9e0:	9300      	str	r3, [sp, #0]
   1b9e2:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1b9e6:	f104 031c 	add.w	r3, r4, #28
   1b9ea:	f00b feea 	bl	277c2 <lll_chan_sel_1>
   1b9ee:	4606      	mov	r6, r0
   1b9f0:	e785      	b.n	1b8fe <prepare_cb+0x72>
		ret = lll_prepare_done(lll);
   1b9f2:	4620      	mov	r0, r4
   1b9f4:	f00b ff3e 	bl	27874 <lll_prepare_done>
		LL_ASSERT(!ret);
   1b9f8:	2800      	cmp	r0, #0
   1b9fa:	f43f af62 	beq.w	1b8c2 <prepare_cb+0x36>
   1b9fe:	f240 1213 	movw	r2, #275	; 0x113
   1ba02:	4905      	ldr	r1, [pc, #20]	; (1ba18 <prepare_cb+0x18c>)
   1ba04:	4805      	ldr	r0, [pc, #20]	; (1ba1c <prepare_cb+0x190>)
   1ba06:	f006 fa60 	bl	21eca <printk>
   1ba0a:	4040      	eors	r0, r0
   1ba0c:	f380 8811 	msr	BASEPRI, r0
   1ba10:	f04f 0003 	mov.w	r0, #3
   1ba14:	df02      	svc	2
   1ba16:	e754      	b.n	1b8c2 <prepare_cb+0x36>
   1ba18:	0002f70e 	.word	0x0002f70e
   1ba1c:	0002a026 	.word	0x0002a026
   1ba20:	0001b601 	.word	0x0001b601
   1ba24:	000278ff 	.word	0x000278ff

0001ba28 <lll_slave_prepare>:
{
   1ba28:	b513      	push	{r0, r1, r4, lr}
   1ba2a:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1ba2c:	f7fe fe68 	bl	1a700 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1ba30:	2800      	cmp	r0, #0
   1ba32:	da0a      	bge.n	1ba4a <lll_slave_prepare+0x22>
   1ba34:	2248      	movs	r2, #72	; 0x48
   1ba36:	4918      	ldr	r1, [pc, #96]	; (1ba98 <lll_slave_prepare+0x70>)
   1ba38:	4818      	ldr	r0, [pc, #96]	; (1ba9c <lll_slave_prepare+0x74>)
   1ba3a:	f006 fa46 	bl	21eca <printk>
   1ba3e:	4040      	eors	r0, r0
   1ba40:	f380 8811 	msr	BASEPRI, r0
   1ba44:	f04f 0003 	mov.w	r0, #3
   1ba48:	df02      	svc	2
	lll = p->param;
   1ba4a:	68e2      	ldr	r2, [r4, #12]
	elapsed = p->lazy + 1;
   1ba4c:	8923      	ldrh	r3, [r4, #8]
	lll->latency_prepare += elapsed;
   1ba4e:	8ad1      	ldrh	r1, [r2, #22]
	    lll->slave.window_widening_periodic_us * elapsed;
   1ba50:	6a90      	ldr	r0, [r2, #40]	; 0x28
	elapsed = p->lazy + 1;
   1ba52:	3301      	adds	r3, #1
   1ba54:	b29b      	uxth	r3, r3
	lll->latency_prepare += elapsed;
   1ba56:	4419      	add	r1, r3
   1ba58:	82d1      	strh	r1, [r2, #22]
	lll->slave.window_widening_prepare_us +=
   1ba5a:	6b11      	ldr	r1, [r2, #48]	; 0x30
   1ba5c:	fb00 1303 	mla	r3, r0, r3, r1
	    lll->slave.window_widening_max_us) {
   1ba60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
		lll->slave.window_widening_prepare_us =
   1ba62:	4299      	cmp	r1, r3
   1ba64:	bf94      	ite	ls
   1ba66:	6311      	strls	r1, [r2, #48]	; 0x30
   1ba68:	6313      	strhi	r3, [r2, #48]	; 0x30
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1ba6a:	480d      	ldr	r0, [pc, #52]	; (1baa0 <lll_slave_prepare+0x78>)
   1ba6c:	9400      	str	r4, [sp, #0]
   1ba6e:	2300      	movs	r3, #0
   1ba70:	4a0c      	ldr	r2, [pc, #48]	; (1baa4 <lll_slave_prepare+0x7c>)
   1ba72:	490d      	ldr	r1, [pc, #52]	; (1baa8 <lll_slave_prepare+0x80>)
   1ba74:	f00b fef5 	bl	27862 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1ba78:	b160      	cbz	r0, 1ba94 <lll_slave_prepare+0x6c>
   1ba7a:	3044      	adds	r0, #68	; 0x44
   1ba7c:	d00a      	beq.n	1ba94 <lll_slave_prepare+0x6c>
   1ba7e:	225f      	movs	r2, #95	; 0x5f
   1ba80:	4905      	ldr	r1, [pc, #20]	; (1ba98 <lll_slave_prepare+0x70>)
   1ba82:	4806      	ldr	r0, [pc, #24]	; (1ba9c <lll_slave_prepare+0x74>)
   1ba84:	f006 fa21 	bl	21eca <printk>
   1ba88:	4040      	eors	r0, r0
   1ba8a:	f380 8811 	msr	BASEPRI, r0
   1ba8e:	f04f 0003 	mov.w	r0, #3
   1ba92:	df02      	svc	2
}
   1ba94:	b002      	add	sp, #8
   1ba96:	bd10      	pop	{r4, pc}
   1ba98:	0002f70e 	.word	0x0002f70e
   1ba9c:	0002a026 	.word	0x0002a026
   1baa0:	00027879 	.word	0x00027879
   1baa4:	0001b88d 	.word	0x0001b88d
   1baa8:	0001b4f5 	.word	0x0001b4f5

0001baac <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1baac:	4b05      	ldr	r3, [pc, #20]	; (1bac4 <cntr_init+0x18>)
   1baae:	2200      	movs	r2, #0
   1bab0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->EVTENSET = mask;
   1bab4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1bab8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1babc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1bac0:	4770      	bx	lr
   1bac2:	bf00      	nop
   1bac4:	4000b000 	.word	0x4000b000

0001bac8 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1bac8:	4a04      	ldr	r2, [pc, #16]	; (1badc <cntr_start+0x14>)
   1baca:	7813      	ldrb	r3, [r2, #0]
   1bacc:	1c59      	adds	r1, r3, #1
   1bace:	7011      	strb	r1, [r2, #0]
   1bad0:	2001      	movs	r0, #1
   1bad2:	b913      	cbnz	r3, 1bada <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1bad4:	4a02      	ldr	r2, [pc, #8]	; (1bae0 <cntr_start+0x18>)
   1bad6:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1bad8:	4618      	mov	r0, r3
}
   1bada:	4770      	bx	lr
   1badc:	2000456a 	.word	0x2000456a
   1bae0:	4000b000 	.word	0x4000b000

0001bae4 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1bae4:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1bae6:	4c0c      	ldr	r4, [pc, #48]	; (1bb18 <cntr_stop+0x34>)
   1bae8:	7823      	ldrb	r3, [r4, #0]
   1baea:	b953      	cbnz	r3, 1bb02 <cntr_stop+0x1e>
   1baec:	222d      	movs	r2, #45	; 0x2d
   1baee:	490b      	ldr	r1, [pc, #44]	; (1bb1c <cntr_stop+0x38>)
   1baf0:	480b      	ldr	r0, [pc, #44]	; (1bb20 <cntr_stop+0x3c>)
   1baf2:	f006 f9ea 	bl	21eca <printk>
   1baf6:	4040      	eors	r0, r0
   1baf8:	f380 8811 	msr	BASEPRI, r0
   1bafc:	f04f 0003 	mov.w	r0, #3
   1bb00:	df02      	svc	2

	if (--_refcount) {
   1bb02:	7820      	ldrb	r0, [r4, #0]
   1bb04:	3801      	subs	r0, #1
   1bb06:	b2c0      	uxtb	r0, r0
   1bb08:	7020      	strb	r0, [r4, #0]
   1bb0a:	2301      	movs	r3, #1
   1bb0c:	b910      	cbnz	r0, 1bb14 <cntr_stop+0x30>
   1bb0e:	4a05      	ldr	r2, [pc, #20]	; (1bb24 <cntr_stop+0x40>)
   1bb10:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1bb12:	bd10      	pop	{r4, pc}
		return 1;
   1bb14:	4618      	mov	r0, r3
   1bb16:	e7fc      	b.n	1bb12 <cntr_stop+0x2e>
   1bb18:	2000456a 	.word	0x2000456a
   1bb1c:	0002f76c 	.word	0x0002f76c
   1bb20:	0002a026 	.word	0x0002a026
   1bb24:	4000b004 	.word	0x4000b004

0001bb28 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1bb28:	4b01      	ldr	r3, [pc, #4]	; (1bb30 <cntr_cnt_get+0x8>)
   1bb2a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1bb2e:	4770      	bx	lr
   1bb30:	4000b000 	.word	0x4000b000

0001bb34 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1bb34:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1bb38:	4b01      	ldr	r3, [pc, #4]	; (1bb40 <cntr_cmp_set+0xc>)
   1bb3a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1bb3e:	4770      	bx	lr
   1bb40:	4000b000 	.word	0x4000b000

0001bb44 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1bb44:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1bb46:	4b13      	ldr	r3, [pc, #76]	; (1bb94 <do_ecb+0x50>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bb48:	4c13      	ldr	r4, [pc, #76]	; (1bb98 <do_ecb+0x54>)
   1bb4a:	2501      	movs	r5, #1
{
   1bb4c:	4684      	mov	ip, r0
   1bb4e:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   1bb50:	2700      	movs	r7, #0
   1bb52:	46a6      	mov	lr, r4
   1bb54:	461a      	mov	r2, r3
   1bb56:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1bb58:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1bb5c:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1bb60:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   1bb64:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1bb66:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   1bb6a:	b931      	cbnz	r1, 1bb7a <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1bb6c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1bb70:	b919      	cbnz	r1, 1bb7a <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1bb72:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1bb76:	2900      	cmp	r1, #0
   1bb78:	d1f5      	bne.n	1bb66 <do_ecb+0x22>
   1bb7a:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1bb7e:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   1bb82:	2900      	cmp	r1, #0
   1bb84:	d1e7      	bne.n	1bb56 <do_ecb+0x12>
   1bb86:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
   1bb8a:	2800      	cmp	r0, #0
   1bb8c:	d0e3      	beq.n	1bb56 <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
   1bb8e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   1bb92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bb94:	4000e000 	.word	0x4000e000
   1bb98:	4000e004 	.word	0x4000e004

0001bb9c <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(uint8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   1bb9c:	2800      	cmp	r0, #0
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1bb9e:	4b08      	ldr	r3, [pc, #32]	; (1bbc0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   1bba0:	bf14      	ite	ne
   1bba2:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   1bba6:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   1bbaa:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   1bbae:	bf14      	ite	ne
   1bbb0:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   1bbb4:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1bbb8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   1bbbc:	4770      	bx	lr
   1bbbe:	bf00      	nop
   1bbc0:	4001f000 	.word	0x4001f000

0001bbc4 <sw_switch.isra.10>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1bbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1bbc6:	4e2d      	ldr	r6, [pc, #180]	; (1bc7c <sw_switch.isra.10+0xb8>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1bbc8:	4f2d      	ldr	r7, [pc, #180]	; (1bc80 <sw_switch.isra.10+0xbc>)
   1bbca:	7835      	ldrb	r5, [r6, #0]
   1bbcc:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 1bc8c <sw_switch.isra.10+0xc8>
   1bbd0:	f8c7 c568 	str.w	ip, [r7, #1384]	; 0x568
	 */
	nrf_ppi_channel_endpoint_setup(
		NRF_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1bbd4:	b22b      	sxth	r3, r5
   1bbd6:	00dc      	lsls	r4, r3, #3
   1bbd8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1bbdc:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1bbe0:	f8c7 456c 	str.w	r4, [r7, #1388]	; 0x56c
   1bbe4:	f105 040c 	add.w	r4, r5, #12
   1bbe8:	b2e4      	uxtb	r4, r4
   1bbea:	00e4      	lsls	r4, r4, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1bbec:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   1bbf0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1bbf4:	3fc0      	subs	r7, #192	; 0xc0
   1bbf6:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1bbfa:	eb07 0783 	add.w	r7, r7, r3, lsl #2

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1bbfe:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1bc02:	2800      	cmp	r0, #0
   1bc04:	d034      	beq.n	1bc70 <sw_switch.isra.10+0xac>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_NS;
   1bc06:	f649 4740 	movw	r7, #40000	; 0x9c40
   1bc0a:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   1bc0e:	2a02      	cmp	r2, #2
   1bc10:	bf08      	it	eq
   1bc12:	4638      	moveq	r0, r7
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1bc14:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1bc18:	f241 3788 	movw	r7, #5000	; 0x1388
   1bc1c:	2902      	cmp	r1, #2
   1bc1e:	bf14      	ite	ne
   1bc20:	4611      	movne	r1, r2
   1bc22:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1bc24:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   1bc28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bc2c:	4401      	add	r1, r0
   1bc2e:	fbb1 f1f2 	udiv	r1, r1, r2

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1bc32:	4a14      	ldr	r2, [pc, #80]	; (1bc84 <sw_switch.isra.10+0xc0>)
   1bc34:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1bc38:	009b      	lsls	r3, r3, #2
   1bc3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1bc3e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   1bc42:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   1bc46:	428a      	cmp	r2, r1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1bc48:	bf8b      	itete	hi
   1bc4a:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1bc4e:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1bc50:	1a51      	subhi	r1, r2, r1
   1bc52:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
   1bc56:	bf88      	it	hi
   1bc58:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1bc5c:	4b08      	ldr	r3, [pc, #32]	; (1bc80 <sw_switch.isra.10+0xbc>)
   1bc5e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1bc62:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1bc66:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   1bc68:	f003 0301 	and.w	r3, r3, #1
   1bc6c:	7033      	strb	r3, [r6, #0]
}
   1bc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1bc70:	4a05      	ldr	r2, [pc, #20]	; (1bc88 <sw_switch.isra.10+0xc4>)
   1bc72:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1bc76:	2128      	movs	r1, #40	; 0x28
   1bc78:	e7de      	b.n	1bc38 <sw_switch.isra.10+0x74>
   1bc7a:	bf00      	nop
   1bc7c:	2000456b 	.word	0x2000456b
   1bc80:	4001f000 	.word	0x4001f000
   1bc84:	40001000 	.word	0x40001000
   1bc88:	40001004 	.word	0x40001004
   1bc8c:	4000110c 	.word	0x4000110c

0001bc90 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1bc90:	4b04      	ldr	r3, [pc, #16]	; (1bca4 <isr_radio+0x14>)
   1bc92:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1bc96:	b123      	cbz	r3, 1bca2 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1bc98:	4b03      	ldr	r3, [pc, #12]	; (1bca8 <isr_radio+0x18>)
   1bc9a:	4a04      	ldr	r2, [pc, #16]	; (1bcac <isr_radio+0x1c>)
   1bc9c:	681b      	ldr	r3, [r3, #0]
   1bc9e:	6810      	ldr	r0, [r2, #0]
   1bca0:	4718      	bx	r3
}
   1bca2:	4770      	bx	lr
   1bca4:	40001000 	.word	0x40001000
   1bca8:	20004170 	.word	0x20004170
   1bcac:	20004174 	.word	0x20004174

0001bcb0 <radio_isr_set>:
{
   1bcb0:	b538      	push	{r3, r4, r5, lr}
   1bcb2:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1bcb4:	2001      	movs	r0, #1
{
   1bcb6:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1bcb8:	f7e8 fda8 	bl	480c <arch_irq_disable>
	isr_cb_param = param;
   1bcbc:	4b08      	ldr	r3, [pc, #32]	; (1bce0 <radio_isr_set+0x30>)
   1bcbe:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   1bcc0:	4b08      	ldr	r3, [pc, #32]	; (1bce4 <radio_isr_set+0x34>)
   1bcc2:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1bcc4:	4b08      	ldr	r3, [pc, #32]	; (1bce8 <radio_isr_set+0x38>)
   1bcc6:	2210      	movs	r2, #16
   1bcc8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bccc:	4b07      	ldr	r3, [pc, #28]	; (1bcec <radio_isr_set+0x3c>)
   1bcce:	2202      	movs	r2, #2
   1bcd0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1bcd4:	2001      	movs	r0, #1
}
   1bcd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1bcda:	f7e8 bd87 	b.w	47ec <arch_irq_enable>
   1bcde:	bf00      	nop
   1bce0:	20004174 	.word	0x20004174
   1bce4:	20004170 	.word	0x20004170
   1bce8:	40001000 	.word	0x40001000
   1bcec:	e000e100 	.word	0xe000e100

0001bcf0 <radio_reset>:
{
   1bcf0:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1bcf2:	2001      	movs	r0, #1
   1bcf4:	f7e8 fd8a 	bl	480c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1bcf8:	4b0c      	ldr	r3, [pc, #48]	; (1bd2c <radio_reset+0x3c>)
   1bcfa:	2200      	movs	r2, #0
   1bcfc:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   1bd00:	2201      	movs	r2, #1
   1bd02:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1bd06:	4a0a      	ldr	r2, [pc, #40]	; (1bd30 <radio_reset+0x40>)
   1bd08:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1bd0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1bd0e:	f023 0301 	bic.w	r3, r3, #1
   1bd12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1bd16:	6013      	str	r3, [r2, #0]
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1bd18:	4b06      	ldr	r3, [pc, #24]	; (1bd34 <radio_reset+0x44>)
   1bd1a:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   1bd1e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1bd22:	f44f 5210 	mov.w	r2, #9216	; 0x2400
   1bd26:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   1bd2a:	bd08      	pop	{r3, pc}
   1bd2c:	40001000 	.word	0x40001000
   1bd30:	40001774 	.word	0x40001774
   1bd34:	4001f000 	.word	0x4001f000

0001bd38 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1bd38:	4b06      	ldr	r3, [pc, #24]	; (1bd54 <radio_phy_set+0x1c>)
	switch (phy) {
   1bd3a:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1bd3c:	bf14      	ite	ne
   1bd3e:	2203      	movne	r2, #3
   1bd40:	2204      	moveq	r2, #4
   1bd42:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1bd46:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1bd4a:	f042 0201 	orr.w	r2, r2, #1
   1bd4e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1bd52:	4770      	bx	lr
   1bd54:	40001000 	.word	0x40001000

0001bd58 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1bd58:	4b01      	ldr	r3, [pc, #4]	; (1bd60 <radio_tx_power_set+0x8>)
   1bd5a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1bd5e:	4770      	bx	lr
   1bd60:	40001000 	.word	0x40001000

0001bd64 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1bd64:	4b01      	ldr	r3, [pc, #4]	; (1bd6c <radio_freq_chan_set+0x8>)
   1bd66:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1bd6a:	4770      	bx	lr
   1bd6c:	40001000 	.word	0x40001000

0001bd70 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1bd70:	4b07      	ldr	r3, [pc, #28]	; (1bd90 <radio_whiten_iv_set+0x20>)
   1bd72:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1bd76:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1bd7a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1bd7e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1bd82:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1bd86:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1bd8a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1bd8e:	4770      	bx	lr
   1bd90:	40001000 	.word	0x40001000

0001bd94 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1bd94:	4a0a      	ldr	r2, [pc, #40]	; (1bdc0 <radio_aa_set+0x2c>)
   1bd96:	2300      	movs	r3, #0
   1bd98:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1bd9c:	2301      	movs	r3, #1
   1bd9e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1bda2:	78c3      	ldrb	r3, [r0, #3]
   1bda4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1bda8:	7843      	ldrb	r3, [r0, #1]
   1bdaa:	7881      	ldrb	r1, [r0, #2]
   1bdac:	041b      	lsls	r3, r3, #16
   1bdae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1bdb2:	7801      	ldrb	r1, [r0, #0]
   1bdb4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1bdb8:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1bdbc:	4770      	bx	lr
   1bdbe:	bf00      	nop
   1bdc0:	40001000 	.word	0x40001000

0001bdc4 <radio_pkt_configure>:
	switch (phy) {
   1bdc4:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1bdc8:	2b02      	cmp	r3, #2
{
   1bdca:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1bdcc:	bf14      	ite	ne
   1bdce:	2400      	movne	r4, #0
   1bdd0:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   1bdd4:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1bdd6:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1bdda:	bf48      	it	mi
   1bddc:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1bde0:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1bde2:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1bde6:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1bde8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1bdec:	4a09      	ldr	r2, [pc, #36]	; (1be14 <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1bdee:	4303      	orrs	r3, r0
   1bdf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1bdf4:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1bdf8:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1bdfc:	4b06      	ldr	r3, [pc, #24]	; (1be18 <radio_pkt_configure+0x54>)
   1bdfe:	4003      	ands	r3, r0
   1be00:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1be04:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1be08:	4319      	orrs	r1, r3
   1be0a:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1be0e:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1be12:	bd10      	pop	{r4, pc}
   1be14:	40001000 	.word	0x40001000
   1be18:	fef80000 	.word	0xfef80000

0001be1c <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1be1c:	4b01      	ldr	r3, [pc, #4]	; (1be24 <radio_pkt_rx_set+0x8>)
   1be1e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1be22:	4770      	bx	lr
   1be24:	40001000 	.word	0x40001000

0001be28 <radio_pkt_tx_set>:
   1be28:	4b01      	ldr	r3, [pc, #4]	; (1be30 <radio_pkt_tx_set+0x8>)
   1be2a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1be2e:	4770      	bx	lr
   1be30:	40001000 	.word	0x40001000

0001be34 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1be34:	4b01      	ldr	r3, [pc, #4]	; (1be3c <radio_rx_enable+0x8>)
   1be36:	2201      	movs	r2, #1
   1be38:	601a      	str	r2, [r3, #0]
}
   1be3a:	4770      	bx	lr
   1be3c:	40001004 	.word	0x40001004

0001be40 <radio_tx_enable>:
   1be40:	4b01      	ldr	r3, [pc, #4]	; (1be48 <radio_tx_enable+0x8>)
   1be42:	2201      	movs	r2, #1
   1be44:	601a      	str	r2, [r3, #0]
}
   1be46:	4770      	bx	lr
   1be48:	40001000 	.word	0x40001000

0001be4c <radio_disable>:
    p_reg->CHENCLR = mask;
   1be4c:	4a07      	ldr	r2, [pc, #28]	; (1be6c <radio_disable+0x20>)
   1be4e:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1be52:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1be56:	2301      	movs	r3, #1
   1be58:	6053      	str	r3, [r2, #4]
   1be5a:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1be5c:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1be60:	2100      	movs	r1, #0
   1be62:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   1be66:	6113      	str	r3, [r2, #16]
}
   1be68:	4770      	bx	lr
   1be6a:	bf00      	nop
   1be6c:	4001f000 	.word	0x4001f000

0001be70 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1be70:	4b04      	ldr	r3, [pc, #16]	; (1be84 <radio_status_reset+0x14>)
   1be72:	2200      	movs	r2, #0
   1be74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1be78:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1be7c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1be80:	4770      	bx	lr
   1be82:	bf00      	nop
   1be84:	40001000 	.word	0x40001000

0001be88 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1be88:	4b03      	ldr	r3, [pc, #12]	; (1be98 <radio_is_ready+0x10>)
   1be8a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1be8e:	3000      	adds	r0, #0
   1be90:	bf18      	it	ne
   1be92:	2001      	movne	r0, #1
   1be94:	4770      	bx	lr
   1be96:	bf00      	nop
   1be98:	40001000 	.word	0x40001000

0001be9c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1be9c:	4b03      	ldr	r3, [pc, #12]	; (1beac <radio_is_done+0x10>)
   1be9e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1bea2:	3000      	adds	r0, #0
   1bea4:	bf18      	it	ne
   1bea6:	2001      	movne	r0, #1
   1bea8:	4770      	bx	lr
   1beaa:	bf00      	nop
   1beac:	40001000 	.word	0x40001000

0001beb0 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1beb0:	4b03      	ldr	r3, [pc, #12]	; (1bec0 <radio_is_idle+0x10>)
   1beb2:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1beb6:	fab0 f080 	clz	r0, r0
   1beba:	0940      	lsrs	r0, r0, #5
   1bebc:	4770      	bx	lr
   1bebe:	bf00      	nop
   1bec0:	40001000 	.word	0x40001000

0001bec4 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1bec4:	4b04      	ldr	r3, [pc, #16]	; (1bed8 <radio_crc_configure+0x14>)
   1bec6:	f240 1203 	movw	r2, #259	; 0x103
   1beca:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1bece:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1bed2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1bed6:	4770      	bx	lr
   1bed8:	40001000 	.word	0x40001000

0001bedc <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1bedc:	4b03      	ldr	r3, [pc, #12]	; (1beec <radio_crc_is_valid+0x10>)
   1bede:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1bee2:	3000      	adds	r0, #0
   1bee4:	bf18      	it	ne
   1bee6:	2001      	movne	r0, #1
   1bee8:	4770      	bx	lr
   1beea:	bf00      	nop
   1beec:	40001000 	.word	0x40001000

0001bef0 <radio_pkt_empty_get>:
}
   1bef0:	4800      	ldr	r0, [pc, #0]	; (1bef4 <radio_pkt_empty_get+0x4>)
   1bef2:	4770      	bx	lr
   1bef4:	20004068 	.word	0x20004068

0001bef8 <radio_pkt_scratch_get>:
}
   1bef8:	4800      	ldr	r0, [pc, #0]	; (1befc <radio_pkt_scratch_get+0x4>)
   1befa:	4770      	bx	lr
   1befc:	2000406c 	.word	0x2000406c

0001bf00 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1bf00:	4b04      	ldr	r3, [pc, #16]	; (1bf14 <radio_switch_complete_and_rx+0x14>)
   1bf02:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1bf04:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1bf06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1bf0a:	4602      	mov	r2, r0
   1bf0c:	4608      	mov	r0, r1
   1bf0e:	f7ff be59 	b.w	1bbc4 <sw_switch.isra.10>
   1bf12:	bf00      	nop
   1bf14:	40001000 	.word	0x40001000

0001bf18 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1bf18:	4b03      	ldr	r3, [pc, #12]	; (1bf28 <radio_switch_complete_and_tx+0x10>)
   1bf1a:	2103      	movs	r1, #3
   1bf1c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1bf20:	4601      	mov	r1, r0
   1bf22:	2001      	movs	r0, #1
   1bf24:	f7ff be4e 	b.w	1bbc4 <sw_switch.isra.10>
   1bf28:	40001000 	.word	0x40001000

0001bf2c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1bf2c:	4b05      	ldr	r3, [pc, #20]	; (1bf44 <radio_switch_complete_and_disable+0x18>)
   1bf2e:	2203      	movs	r2, #3
   1bf30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
   1bf34:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1bf38:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1bf3c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1bf40:	4770      	bx	lr
   1bf42:	bf00      	nop
   1bf44:	40001000 	.word	0x40001000

0001bf48 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1bf48:	4a03      	ldr	r2, [pc, #12]	; (1bf58 <radio_rssi_measure+0x10>)
   1bf4a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1bf4e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1bf52:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1bf56:	4770      	bx	lr
   1bf58:	40001000 	.word	0x40001000

0001bf5c <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1bf5c:	4b01      	ldr	r3, [pc, #4]	; (1bf64 <radio_rssi_get+0x8>)
   1bf5e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1bf62:	4770      	bx	lr
   1bf64:	40001000 	.word	0x40001000

0001bf68 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1bf68:	4b02      	ldr	r3, [pc, #8]	; (1bf74 <radio_rssi_status_reset+0xc>)
   1bf6a:	2200      	movs	r2, #0
   1bf6c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1bf70:	4770      	bx	lr
   1bf72:	bf00      	nop
   1bf74:	40001000 	.word	0x40001000

0001bf78 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1bf78:	4b03      	ldr	r3, [pc, #12]	; (1bf88 <radio_rssi_is_ready+0x10>)
   1bf7a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1bf7e:	3000      	adds	r0, #0
   1bf80:	bf18      	it	ne
   1bf82:	2001      	movne	r0, #1
   1bf84:	4770      	bx	lr
   1bf86:	bf00      	nop
   1bf88:	40001000 	.word	0x40001000

0001bf8c <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1bf8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf8e:	2400      	movs	r4, #0
   1bf90:	2706      	movs	r7, #6
   1bf92:	00a3      	lsls	r3, r4, #2
   1bf94:	fb07 2504 	mla	r5, r7, r4, r2
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1bf98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1bf9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1bfa0:	682e      	ldr	r6, [r5, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1bfa2:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1bfa6:	3401      	adds	r4, #1
   1bfa8:	88ad      	ldrh	r5, [r5, #4]
   1bfaa:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1bfae:	2c08      	cmp	r4, #8
   1bfb0:	d1ef      	bne.n	1bf92 <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1bfb2:	4b03      	ldr	r3, [pc, #12]	; (1bfc0 <radio_filter_configure+0x34>)
   1bfb4:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1bfb8:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1bfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bfbe:	bf00      	nop
   1bfc0:	40001000 	.word	0x40001000

0001bfc4 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1bfc4:	4a03      	ldr	r2, [pc, #12]	; (1bfd4 <radio_filter_disable+0x10>)
   1bfc6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1bfca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1bfce:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1bfd2:	4770      	bx	lr
   1bfd4:	40001000 	.word	0x40001000

0001bfd8 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1bfd8:	4b02      	ldr	r3, [pc, #8]	; (1bfe4 <radio_filter_status_reset+0xc>)
   1bfda:	2200      	movs	r2, #0
   1bfdc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1bfe0:	4770      	bx	lr
   1bfe2:	bf00      	nop
   1bfe4:	40001000 	.word	0x40001000

0001bfe8 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1bfe8:	4b03      	ldr	r3, [pc, #12]	; (1bff8 <radio_filter_has_match+0x10>)
   1bfea:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1bfee:	3000      	adds	r0, #0
   1bff0:	bf18      	it	ne
   1bff2:	2001      	movne	r0, #1
   1bff4:	4770      	bx	lr
   1bff6:	bf00      	nop
   1bff8:	40001000 	.word	0x40001000

0001bffc <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1bffc:	4b01      	ldr	r3, [pc, #4]	; (1c004 <radio_filter_match_get+0x8>)
   1bffe:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1c002:	4770      	bx	lr
   1c004:	40001000 	.word	0x40001000

0001c008 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   1c008:	4b05      	ldr	r3, [pc, #20]	; (1c020 <radio_tmr_status_reset+0x18>)
   1c00a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1c00e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   1c012:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1c016:	4a03      	ldr	r2, [pc, #12]	; (1c024 <radio_tmr_status_reset+0x1c>)
   1c018:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1c01c:	4770      	bx	lr
   1c01e:	bf00      	nop
   1c020:	4000b000 	.word	0x4000b000
   1c024:	0e7000c0 	.word	0x0e7000c0

0001c028 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1c028:	4b03      	ldr	r3, [pc, #12]	; (1c038 <radio_tmr_tifs_set+0x10>)
   1c02a:	4a04      	ldr	r2, [pc, #16]	; (1c03c <radio_tmr_tifs_set+0x14>)
   1c02c:	781b      	ldrb	r3, [r3, #0]
   1c02e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1c032:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c036:	4770      	bx	lr
   1c038:	2000456b 	.word	0x2000456b
   1c03c:	40009000 	.word	0x40009000

0001c040 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1c040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1c042:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1c046:	4c2f      	ldr	r4, [pc, #188]	; (1c104 <radio_tmr_start+0xc4>)
   1c048:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1c04c:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   1c04e:	bf88      	it	hi
   1c050:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c054:	4b2c      	ldr	r3, [pc, #176]	; (1c108 <radio_tmr_start+0xc8>)
	}
	remainder /= 1000000UL;
   1c056:	4c2d      	ldr	r4, [pc, #180]	; (1c10c <radio_tmr_start+0xcc>)
		remainder += 30517578UL;
   1c058:	bf84      	itt	hi
   1c05a:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   1c05e:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   1c062:	f04f 0501 	mov.w	r5, #1
	remainder /= 1000000UL;
   1c066:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1c06a:	f04f 0600 	mov.w	r6, #0
	EVENT_TIMER->PRESCALER = 4;
   1c06e:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1c072:	f04f 0202 	mov.w	r2, #2
   1c076:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   1c078:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   1c07c:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1c080:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
   1c084:	4a22      	ldr	r2, [pc, #136]	; (1c110 <radio_tmr_start+0xd0>)
    p_reg->CC[cc_channel] = cc_value;
   1c086:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
   1c08a:	bf88      	it	hi
   1c08c:	f101 31ff 	addhi.w	r1, r1, #4294967295
   1c090:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1c094:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1c098:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c09c:	491d      	ldr	r1, [pc, #116]	; (1c114 <radio_tmr_start+0xd4>)
   1c09e:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
   1c0a2:	3b0c      	subs	r3, #12
   1c0a4:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c0a8:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1c0ac:	2340      	movs	r3, #64	; 0x40
   1c0ae:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1c0b2:	f7ff fd73 	bl	1bb9c <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1c0b6:	4b18      	ldr	r3, [pc, #96]	; (1c118 <radio_tmr_start+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c0b8:	4a18      	ldr	r2, [pc, #96]	; (1c11c <radio_tmr_start+0xdc>)
   1c0ba:	6015      	str	r5, [r2, #0]
   1c0bc:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1c0c0:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1c0c4:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   1c0c8:	601d      	str	r5, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c0ca:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1c0ce:	3b74      	subs	r3, #116	; 0x74
   1c0d0:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
   1c0d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1c0d8:	3334      	adds	r3, #52	; 0x34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c0da:	f8c1 2554 	str.w	r2, [r1, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c0de:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c0e2:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1c0e6:	33c4      	adds	r3, #196	; 0xc4
   1c0e8:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c0ec:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1c0f0:	3bc0      	subs	r3, #192	; 0xc0
   1c0f2:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c0f6:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1c0fa:	33c8      	adds	r3, #200	; 0xc8
   1c0fc:	f8c1 3564 	str.w	r3, [r1, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1c100:	4620      	mov	r0, r4
   1c102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c104:	7ff0bdbf 	.word	0x7ff0bdbf
   1c108:	4000800c 	.word	0x4000800c
   1c10c:	000f4240 	.word	0x000f4240
   1c110:	4000b000 	.word	0x4000b000
   1c114:	4001f000 	.word	0x4001f000
   1c118:	40009000 	.word	0x40009000
   1c11c:	4000900c 	.word	0x4000900c

0001c120 <radio_tmr_start_tick>:
   1c120:	4b0e      	ldr	r3, [pc, #56]	; (1c15c <radio_tmr_start_tick+0x3c>)
    p_reg->CC[cc_channel] = cc_value;
   1c122:	4a0f      	ldr	r2, [pc, #60]	; (1c160 <radio_tmr_start_tick+0x40>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1c124:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c126:	2401      	movs	r4, #1
   1c128:	601c      	str	r4, [r3, #0]
   1c12a:	609c      	str	r4, [r3, #8]
    p_reg->CC[ch] = cc_val;
   1c12c:	4b0d      	ldr	r3, [pc, #52]	; (1c164 <radio_tmr_start_tick+0x44>)
    p_reg->CC[cc_channel] = cc_value;
   1c12e:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
   1c132:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1c136:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1c13a:	f8c3 1344 	str.w	r1, [r3, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c13e:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1c142:	4909      	ldr	r1, [pc, #36]	; (1c168 <radio_tmr_start_tick+0x48>)
   1c144:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c148:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1c14c:	2240      	movs	r2, #64	; 0x40
   1c14e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1c152:	f7ff fd23 	bl	1bb9c <hal_radio_enable_on_tick_ppi_config_and_enable>
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1c156:	4620      	mov	r0, r4
   1c158:	bd10      	pop	{r4, pc}
   1c15a:	bf00      	nop
   1c15c:	40008004 	.word	0x40008004
   1c160:	40008000 	.word	0x40008000
   1c164:	4000b000 	.word	0x4000b000
   1c168:	4000b148 	.word	0x4000b148

0001c16c <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1c16c:	4b01      	ldr	r3, [pc, #4]	; (1c174 <radio_tmr_start_get+0x8>)
   1c16e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1c172:	4770      	bx	lr
   1c174:	4000b000 	.word	0x4000b000

0001c178 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c178:	4a04      	ldr	r2, [pc, #16]	; (1c18c <radio_tmr_stop+0x14>)
   1c17a:	2301      	movs	r3, #1
   1c17c:	6013      	str	r3, [r2, #0]
   1c17e:	60d3      	str	r3, [r2, #12]
   1c180:	320c      	adds	r2, #12
   1c182:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   1c186:	6013      	str	r3, [r2, #0]
   1c188:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c18a:	4770      	bx	lr
   1c18c:	40008004 	.word	0x40008004

0001c190 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1c190:	4b04      	ldr	r3, [pc, #16]	; (1c1a4 <radio_tmr_hcto_configure+0x14>)
   1c192:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
   1c196:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1c19a:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1c19e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1c1a2:	4770      	bx	lr
   1c1a4:	40008000 	.word	0x40008000

0001c1a8 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c1a8:	4b06      	ldr	r3, [pc, #24]	; (1c1c4 <radio_tmr_aa_capture+0x1c>)
   1c1aa:	4a07      	ldr	r2, [pc, #28]	; (1c1c8 <radio_tmr_aa_capture+0x20>)
   1c1ac:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c1b0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1c1b4:	3240      	adds	r2, #64	; 0x40
   1c1b6:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1c1ba:	4a04      	ldr	r2, [pc, #16]	; (1c1cc <radio_tmr_aa_capture+0x24>)
   1c1bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1c1c0:	4770      	bx	lr
   1c1c2:	bf00      	nop
   1c1c4:	4001f000 	.word	0x4001f000
   1c1c8:	40001100 	.word	0x40001100
   1c1cc:	04000080 	.word	0x04000080

0001c1d0 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1c1d0:	4b01      	ldr	r3, [pc, #4]	; (1c1d8 <radio_tmr_aa_get+0x8>)
   1c1d2:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1c1d6:	4770      	bx	lr
   1c1d8:	40008000 	.word	0x40008000

0001c1dc <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1c1dc:	4b01      	ldr	r3, [pc, #4]	; (1c1e4 <radio_tmr_aa_save+0x8>)
   1c1de:	6018      	str	r0, [r3, #0]
}
   1c1e0:	4770      	bx	lr
   1c1e2:	bf00      	nop
   1c1e4:	20004178 	.word	0x20004178

0001c1e8 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   1c1e8:	4b01      	ldr	r3, [pc, #4]	; (1c1f0 <radio_tmr_aa_restore+0x8>)
   1c1ea:	6818      	ldr	r0, [r3, #0]
   1c1ec:	4770      	bx	lr
   1c1ee:	bf00      	nop
   1c1f0:	20004178 	.word	0x20004178

0001c1f4 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1c1f4:	4b01      	ldr	r3, [pc, #4]	; (1c1fc <radio_tmr_ready_get+0x8>)
   1c1f6:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1c1fa:	4770      	bx	lr
   1c1fc:	40008000 	.word	0x40008000

0001c200 <radio_tmr_end_capture>:
   1c200:	4b02      	ldr	r3, [pc, #8]	; (1c20c <radio_tmr_end_capture+0xc>)
   1c202:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1c206:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1c20a:	4770      	bx	lr
   1c20c:	4001f000 	.word	0x4001f000

0001c210 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1c210:	4b01      	ldr	r3, [pc, #4]	; (1c218 <radio_tmr_end_get+0x8>)
   1c212:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1c216:	4770      	bx	lr
   1c218:	40008000 	.word	0x40008000

0001c21c <radio_tmr_tifs_base_get>:
   1c21c:	4b01      	ldr	r3, [pc, #4]	; (1c224 <radio_tmr_tifs_base_get+0x8>)
   1c21e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1c222:	4770      	bx	lr
   1c224:	40008000 	.word	0x40008000

0001c228 <radio_ar_match_get>:
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1c228:	4b01      	ldr	r3, [pc, #4]	; (1c230 <radio_ar_match_get+0x8>)
   1c22a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1c22e:	4770      	bx	lr
   1c230:	4000f000 	.word	0x4000f000

0001c234 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1c234:	4a06      	ldr	r2, [pc, #24]	; (1c250 <radio_ar_status_reset+0x1c>)
   1c236:	2300      	movs	r3, #0
   1c238:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1c23c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1c240:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    p_reg->CHENCLR = mask;
   1c244:	4b03      	ldr	r3, [pc, #12]	; (1c254 <radio_ar_status_reset+0x20>)
   1c246:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1c24a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1c24e:	4770      	bx	lr
   1c250:	40001000 	.word	0x40001000
   1c254:	4001f000 	.word	0x4001f000

0001c258 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1c258:	4b08      	ldr	r3, [pc, #32]	; (1c27c <radio_ar_has_match+0x24>)
   1c25a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1c25e:	b160      	cbz	r0, 1c27a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1c260:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1c264:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1c268:	b138      	cbz	r0, 1c27a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1c26a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1c26e:	b120      	cbz	r0, 1c27a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1c270:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1c274:	fab0 f080 	clz	r0, r0
   1c278:	0940      	lsrs	r0, r0, #5
}
   1c27a:	4770      	bx	lr
   1c27c:	40001000 	.word	0x40001000

0001c280 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1c280:	2902      	cmp	r1, #2
{
   1c282:	b510      	push	{r4, lr}
   1c284:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1c286:	d00a      	beq.n	1c29e <mayfly_enable_cb+0x1e>
   1c288:	221e      	movs	r2, #30
   1c28a:	490a      	ldr	r1, [pc, #40]	; (1c2b4 <mayfly_enable_cb+0x34>)
   1c28c:	480a      	ldr	r0, [pc, #40]	; (1c2b8 <mayfly_enable_cb+0x38>)
   1c28e:	f005 fe1c 	bl	21eca <printk>
   1c292:	4040      	eors	r0, r0
   1c294:	f380 8811 	msr	BASEPRI, r0
   1c298:	f04f 0003 	mov.w	r0, #3
   1c29c:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1c29e:	200b      	movs	r0, #11
	if (enable) {
   1c2a0:	b11c      	cbz	r4, 1c2aa <mayfly_enable_cb+0x2a>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1c2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1c2a6:	f7e8 baa1 	b.w	47ec <arch_irq_enable>
}
   1c2aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1c2ae:	f7e8 baad 	b.w	480c <arch_irq_disable>
   1c2b2:	bf00      	nop
   1c2b4:	0002f7d9 	.word	0x0002f7d9
   1c2b8:	0002a026 	.word	0x0002a026

0001c2bc <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1c2bc:	2901      	cmp	r1, #1
{
   1c2be:	b508      	push	{r3, lr}
	switch (callee_id) {
   1c2c0:	d014      	beq.n	1c2ec <mayfly_is_enabled+0x30>
   1c2c2:	b171      	cbz	r1, 1c2e2 <mayfly_is_enabled+0x26>
   1c2c4:	2902      	cmp	r1, #2
   1c2c6:	d011      	beq.n	1c2ec <mayfly_is_enabled+0x30>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1c2c8:	2236      	movs	r2, #54	; 0x36
   1c2ca:	4909      	ldr	r1, [pc, #36]	; (1c2f0 <mayfly_is_enabled+0x34>)
   1c2cc:	4809      	ldr	r0, [pc, #36]	; (1c2f4 <mayfly_is_enabled+0x38>)
   1c2ce:	f005 fdfc 	bl	21eca <printk>
   1c2d2:	4040      	eors	r0, r0
   1c2d4:	f380 8811 	msr	BASEPRI, r0
   1c2d8:	f04f 0003 	mov.w	r0, #3
   1c2dc:	df02      	svc	2
		break;
	}

	return 0;
}
   1c2de:	2000      	movs	r0, #0
   1c2e0:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1c2e2:	2018      	movs	r0, #24
}
   1c2e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1c2e8:	f7e8 baa4 	b.w	4834 <arch_irq_is_enabled>
   1c2ec:	200b      	movs	r0, #11
   1c2ee:	e7f9      	b.n	1c2e4 <mayfly_is_enabled+0x28>
   1c2f0:	0002f7d9 	.word	0x0002f7d9
   1c2f4:	0002a026 	.word	0x0002a026

0001c2f8 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1c2f8:	2901      	cmp	r1, #1
{
   1c2fa:	b508      	push	{r3, lr}
	switch (callee_id) {
   1c2fc:	d014      	beq.n	1c328 <mayfly_pend+0x30>
   1c2fe:	b169      	cbz	r1, 1c31c <mayfly_pend+0x24>
   1c300:	2902      	cmp	r1, #2
   1c302:	d011      	beq.n	1c328 <mayfly_pend+0x30>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1c304:	2267      	movs	r2, #103	; 0x67
   1c306:	490a      	ldr	r1, [pc, #40]	; (1c330 <mayfly_pend+0x38>)
   1c308:	480a      	ldr	r0, [pc, #40]	; (1c334 <mayfly_pend+0x3c>)
   1c30a:	f005 fdde 	bl	21eca <printk>
   1c30e:	4040      	eors	r0, r0
   1c310:	f380 8811 	msr	BASEPRI, r0
   1c314:	f04f 0003 	mov.w	r0, #3
   1c318:	df02      	svc	2
		break;
	}
}
   1c31a:	e004      	b.n	1c326 <mayfly_pend+0x2e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c31c:	4b06      	ldr	r3, [pc, #24]	; (1c338 <mayfly_pend+0x40>)
   1c31e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1c322:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1c326:	bd08      	pop	{r3, pc}
   1c328:	4b03      	ldr	r3, [pc, #12]	; (1c338 <mayfly_pend+0x40>)
   1c32a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1c32e:	e7f8      	b.n	1c322 <mayfly_pend+0x2a>
   1c330:	0002f7d9 	.word	0x0002f7d9
   1c334:	0002a026 	.word	0x0002a026
   1c338:	e000e100 	.word	0xe000e100

0001c33c <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1c33c:	2803      	cmp	r0, #3
{
   1c33e:	b510      	push	{r4, lr}
   1c340:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1c342:	d90a      	bls.n	1c35a <hal_ticker_instance0_caller_id_get+0x1e>
   1c344:	222b      	movs	r2, #43	; 0x2b
   1c346:	490d      	ldr	r1, [pc, #52]	; (1c37c <hal_ticker_instance0_caller_id_get+0x40>)
   1c348:	480d      	ldr	r0, [pc, #52]	; (1c380 <hal_ticker_instance0_caller_id_get+0x44>)
   1c34a:	f005 fdbe 	bl	21eca <printk>
   1c34e:	4040      	eors	r0, r0
   1c350:	f380 8811 	msr	BASEPRI, r0
   1c354:	f04f 0003 	mov.w	r0, #3
   1c358:	df02      	svc	2

	caller_id = caller_id_lut[user_id];
   1c35a:	4b0a      	ldr	r3, [pc, #40]	; (1c384 <hal_ticker_instance0_caller_id_get+0x48>)
   1c35c:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1c35e:	b954      	cbnz	r4, 1c376 <hal_ticker_instance0_caller_id_get+0x3a>
   1c360:	222e      	movs	r2, #46	; 0x2e
   1c362:	4906      	ldr	r1, [pc, #24]	; (1c37c <hal_ticker_instance0_caller_id_get+0x40>)
   1c364:	4806      	ldr	r0, [pc, #24]	; (1c380 <hal_ticker_instance0_caller_id_get+0x44>)
   1c366:	f005 fdb0 	bl	21eca <printk>
   1c36a:	4040      	eors	r0, r0
   1c36c:	f380 8811 	msr	BASEPRI, r0
   1c370:	f04f 0003 	mov.w	r0, #3
   1c374:	df02      	svc	2

	return caller_id;
}
   1c376:	4620      	mov	r0, r4
   1c378:	bd10      	pop	{r4, pc}
   1c37a:	bf00      	nop
   1c37c:	0002f83e 	.word	0x0002f83e
   1c380:	0002a026 	.word	0x0002a026
   1c384:	0002f83a 	.word	0x0002f83a

0001c388 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1c388:	3801      	subs	r0, #1
{
   1c38a:	b510      	push	{r4, lr}
   1c38c:	461c      	mov	r4, r3
	switch (caller_id) {
   1c38e:	2804      	cmp	r0, #4
   1c390:	d844      	bhi.n	1c41c <hal_ticker_instance0_sched+0x94>
   1c392:	e8df f000 	tbb	[pc, r0]
   1c396:	1903      	.short	0x1903
   1c398:	2b22      	.short	0x2b22
   1c39a:	3a          	.byte	0x3a
   1c39b:	00          	.byte	0x00
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   1c39c:	2904      	cmp	r1, #4
   1c39e:	d107      	bne.n	1c3b0 <hal_ticker_instance0_sched+0x28>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
   1c3a0:	4b1f      	ldr	r3, [pc, #124]	; (1c420 <hal_ticker_instance0_sched+0x98>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1c3a2:	2102      	movs	r1, #2
			m.param = instance;
   1c3a4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1c3a6:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1c3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1c3ac:	f7f9 bad0 	b.w	15950 <mayfly_enqueue>
			LL_ASSERT(0);
   1c3b0:	224e      	movs	r2, #78	; 0x4e
		LL_ASSERT(0);
   1c3b2:	491c      	ldr	r1, [pc, #112]	; (1c424 <hal_ticker_instance0_sched+0x9c>)
   1c3b4:	481c      	ldr	r0, [pc, #112]	; (1c428 <hal_ticker_instance0_sched+0xa0>)
   1c3b6:	f005 fd88 	bl	21eca <printk>
   1c3ba:	4040      	eors	r0, r0
   1c3bc:	f380 8811 	msr	BASEPRI, r0
   1c3c0:	f04f 0003 	mov.w	r0, #3
   1c3c4:	df02      	svc	2
}
   1c3c6:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1c3c8:	2903      	cmp	r1, #3
   1c3ca:	d104      	bne.n	1c3d6 <hal_ticker_instance0_sched+0x4e>
			m.param = instance;
   1c3cc:	4b17      	ldr	r3, [pc, #92]	; (1c42c <hal_ticker_instance0_sched+0xa4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1c3ce:	2101      	movs	r1, #1
			m.param = instance;
   1c3d0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1c3d2:	4608      	mov	r0, r1
   1c3d4:	e7e8      	b.n	1c3a8 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1c3d6:	2265      	movs	r2, #101	; 0x65
   1c3d8:	e7eb      	b.n	1c3b2 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1c3da:	2904      	cmp	r1, #4
   1c3dc:	d104      	bne.n	1c3e8 <hal_ticker_instance0_sched+0x60>
			m.param = instance;
   1c3de:	4b14      	ldr	r3, [pc, #80]	; (1c430 <hal_ticker_instance0_sched+0xa8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1c3e0:	2102      	movs	r1, #2
			m.param = instance;
   1c3e2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1c3e4:	2001      	movs	r0, #1
   1c3e6:	e7df      	b.n	1c3a8 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1c3e8:	227c      	movs	r2, #124	; 0x7c
   1c3ea:	e7e2      	b.n	1c3b2 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1c3ec:	2903      	cmp	r1, #3
   1c3ee:	d003      	beq.n	1c3f8 <hal_ticker_instance0_sched+0x70>
   1c3f0:	2904      	cmp	r1, #4
   1c3f2:	d006      	beq.n	1c402 <hal_ticker_instance0_sched+0x7a>
			LL_ASSERT(0);
   1c3f4:	22a2      	movs	r2, #162	; 0xa2
   1c3f6:	e7dc      	b.n	1c3b2 <hal_ticker_instance0_sched+0x2a>
			m.param = instance;
   1c3f8:	4b0e      	ldr	r3, [pc, #56]	; (1c434 <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1c3fa:	2101      	movs	r1, #1
			m.param = instance;
   1c3fc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1c3fe:	2002      	movs	r0, #2
   1c400:	e7d2      	b.n	1c3a8 <hal_ticker_instance0_sched+0x20>
			m.param = instance;
   1c402:	4b0d      	ldr	r3, [pc, #52]	; (1c438 <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1c404:	2102      	movs	r1, #2
			m.param = instance;
   1c406:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1c408:	e7e3      	b.n	1c3d2 <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
   1c40a:	2904      	cmp	r1, #4
   1c40c:	d104      	bne.n	1c418 <hal_ticker_instance0_sched+0x90>
			m.param = instance;
   1c40e:	4b0b      	ldr	r3, [pc, #44]	; (1c43c <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1c410:	2102      	movs	r1, #2
			m.param = instance;
   1c412:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1c414:	2003      	movs	r0, #3
   1c416:	e7c7      	b.n	1c3a8 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1c418:	22ba      	movs	r2, #186	; 0xba
   1c41a:	e7ca      	b.n	1c3b2 <hal_ticker_instance0_sched+0x2a>
		LL_ASSERT(0);
   1c41c:	22c0      	movs	r2, #192	; 0xc0
   1c41e:	e7c8      	b.n	1c3b2 <hal_ticker_instance0_sched+0x2a>
   1c420:	20000c50 	.word	0x20000c50
   1c424:	0002f83e 	.word	0x0002f83e
   1c428:	0002a026 	.word	0x0002a026
   1c42c:	20000c60 	.word	0x20000c60
   1c430:	20000c70 	.word	0x20000c70
   1c434:	20000c80 	.word	0x20000c80
   1c438:	20000c90 	.word	0x20000c90
   1c43c:	20000ca0 	.word	0x20000ca0

0001c440 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1c440:	4b02      	ldr	r3, [pc, #8]	; (1c44c <net_buf_pool_get+0xc>)
   1c442:	222c      	movs	r2, #44	; 0x2c
   1c444:	fb02 3000 	mla	r0, r2, r0, r3
   1c448:	4770      	bx	lr
   1c44a:	bf00      	nop
   1c44c:	20000ff8 	.word	0x20000ff8

0001c450 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c450:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1c452:	4a05      	ldr	r2, [pc, #20]	; (1c468 <net_buf_id+0x18>)
   1c454:	212c      	movs	r1, #44	; 0x2c
   1c456:	fb01 2303 	mla	r3, r1, r3, r2
   1c45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c45c:	1ac0      	subs	r0, r0, r3
}
   1c45e:	4b03      	ldr	r3, [pc, #12]	; (1c46c <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1c460:	10c0      	asrs	r0, r0, #3
}
   1c462:	4358      	muls	r0, r3
   1c464:	4770      	bx	lr
   1c466:	bf00      	nop
   1c468:	20000ff8 	.word	0x20000ff8
   1c46c:	aaaaaaab 	.word	0xaaaaaaab

0001c470 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1c470:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c472:	4a0a      	ldr	r2, [pc, #40]	; (1c49c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c474:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c476:	242c      	movs	r4, #44	; 0x2c
   1c478:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1c47c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c480:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1c482:	6823      	ldr	r3, [r4, #0]
   1c484:	429a      	cmp	r2, r3
   1c486:	bf94      	ite	ls
   1c488:	600a      	strls	r2, [r1, #0]
   1c48a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1c48c:	f7ff ffe0 	bl	1c450 <net_buf_id>
   1c490:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1c494:	fb02 3000 	mla	r0, r2, r0, r3
   1c498:	bd10      	pop	{r4, pc}
   1c49a:	bf00      	nop
   1c49c:	20000ff8 	.word	0x20000ff8

0001c4a0 <net_buf_reset>:
{
   1c4a0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1c4a2:	7943      	ldrb	r3, [r0, #5]
{
   1c4a4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1c4a6:	b143      	cbz	r3, 1c4ba <net_buf_reset+0x1a>
   1c4a8:	490c      	ldr	r1, [pc, #48]	; (1c4dc <net_buf_reset+0x3c>)
   1c4aa:	480d      	ldr	r0, [pc, #52]	; (1c4e0 <net_buf_reset+0x40>)
   1c4ac:	224f      	movs	r2, #79	; 0x4f
   1c4ae:	f005 fd0c 	bl	21eca <printk>
   1c4b2:	214f      	movs	r1, #79	; 0x4f
   1c4b4:	4809      	ldr	r0, [pc, #36]	; (1c4dc <net_buf_reset+0x3c>)
   1c4b6:	f005 ffba 	bl	2242e <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1c4ba:	6823      	ldr	r3, [r4, #0]
   1c4bc:	b143      	cbz	r3, 1c4d0 <net_buf_reset+0x30>
   1c4be:	4907      	ldr	r1, [pc, #28]	; (1c4dc <net_buf_reset+0x3c>)
   1c4c0:	4807      	ldr	r0, [pc, #28]	; (1c4e0 <net_buf_reset+0x40>)
   1c4c2:	2250      	movs	r2, #80	; 0x50
   1c4c4:	f005 fd01 	bl	21eca <printk>
   1c4c8:	2150      	movs	r1, #80	; 0x50
   1c4ca:	4804      	ldr	r0, [pc, #16]	; (1c4dc <net_buf_reset+0x3c>)
   1c4cc:	f005 ffaf 	bl	2242e <assert_post_action>
	buf->len  = 0U;
   1c4d0:	2300      	movs	r3, #0
   1c4d2:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1c4d4:	6923      	ldr	r3, [r4, #16]
   1c4d6:	60a3      	str	r3, [r4, #8]
}
   1c4d8:	bd10      	pop	{r4, pc}
   1c4da:	bf00      	nop
   1c4dc:	0002f89f 	.word	0x0002f89f
   1c4e0:	0002a026 	.word	0x0002a026

0001c4e4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1c4e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c4e8:	4605      	mov	r5, r0
   1c4ea:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1c4ec:	4610      	mov	r0, r2
   1c4ee:	4619      	mov	r1, r3
{
   1c4f0:	4616      	mov	r6, r2
   1c4f2:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1c4f4:	f00c f9bb 	bl	2886e <z_timeout_end_calc>
   1c4f8:	4680      	mov	r8, r0
   1c4fa:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1c4fc:	b945      	cbnz	r5, 1c510 <net_buf_alloc_len+0x2c>
   1c4fe:	4949      	ldr	r1, [pc, #292]	; (1c624 <net_buf_alloc_len+0x140>)
   1c500:	4849      	ldr	r0, [pc, #292]	; (1c628 <net_buf_alloc_len+0x144>)
   1c502:	22ed      	movs	r2, #237	; 0xed
   1c504:	f005 fce1 	bl	21eca <printk>
   1c508:	21ed      	movs	r1, #237	; 0xed
   1c50a:	4846      	ldr	r0, [pc, #280]	; (1c624 <net_buf_alloc_len+0x140>)
   1c50c:	f005 ff8f 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1c510:	f04f 0320 	mov.w	r3, #32
   1c514:	f3ef 8a11 	mrs	sl, BASEPRI
   1c518:	f383 8811 	msr	BASEPRI, r3
   1c51c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1c520:	8beb      	ldrh	r3, [r5, #30]
   1c522:	2b00      	cmp	r3, #0
   1c524:	d054      	beq.n	1c5d0 <net_buf_alloc_len+0xec>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1c526:	8baa      	ldrh	r2, [r5, #28]
   1c528:	429a      	cmp	r2, r3
   1c52a:	d93d      	bls.n	1c5a8 <net_buf_alloc_len+0xc4>
	return z_impl_k_queue_get(queue, timeout);
   1c52c:	2200      	movs	r2, #0
   1c52e:	2300      	movs	r3, #0
   1c530:	4628      	mov	r0, r5
   1c532:	f002 fb31 	bl	1eb98 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1c536:	4604      	mov	r4, r0
   1c538:	2800      	cmp	r0, #0
   1c53a:	d035      	beq.n	1c5a8 <net_buf_alloc_len+0xc4>
	__asm__ volatile(
   1c53c:	f38a 8811 	msr	BASEPRI, sl
   1c540:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1c544:	9d01      	ldr	r5, [sp, #4]
   1c546:	2d00      	cmp	r5, #0
   1c548:	d06a      	beq.n	1c620 <net_buf_alloc_len+0x13c>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1c54a:	ea56 0307 	orrs.w	r3, r6, r7
   1c54e:	d010      	beq.n	1c572 <net_buf_alloc_len+0x8e>
   1c550:	1c7b      	adds	r3, r7, #1
   1c552:	bf08      	it	eq
   1c554:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1c558:	d00b      	beq.n	1c572 <net_buf_alloc_len+0x8e>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1c55a:	f004 f997 	bl	2088c <z_tick_get>
   1c55e:	ebb8 0600 	subs.w	r6, r8, r0
   1c562:	eb69 0701 	sbc.w	r7, r9, r1
   1c566:	2e00      	cmp	r6, #0
   1c568:	f177 0300 	sbcs.w	r3, r7, #0
   1c56c:	bfbc      	itt	lt
   1c56e:	2600      	movlt	r6, #0
   1c570:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c572:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1c574:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1c62c <net_buf_alloc_len+0x148>
   1c578:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1c57c:	fb09 8303 	mla	r3, r9, r3, r8
   1c580:	4632      	mov	r2, r6
   1c582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c584:	681b      	ldr	r3, [r3, #0]
   1c586:	a901      	add	r1, sp, #4
   1c588:	f8d3 a000 	ldr.w	sl, [r3]
   1c58c:	4620      	mov	r0, r4
   1c58e:	463b      	mov	r3, r7
   1c590:	47d0      	blx	sl
   1c592:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1c594:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1c596:	bb58      	cbnz	r0, 1c5f0 <net_buf_alloc_len+0x10c>
	k_lifo_put(&pool->free, buf);
   1c598:	79a0      	ldrb	r0, [r4, #6]
   1c59a:	4621      	mov	r1, r4
   1c59c:	fb00 8009 	mla	r0, r0, r9, r8
   1c5a0:	f00c f880 	bl	286a4 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1c5a4:	4634      	mov	r4, r6
   1c5a6:	e01f      	b.n	1c5e8 <net_buf_alloc_len+0x104>
		uninit_count = pool->uninit_count--;
   1c5a8:	8beb      	ldrh	r3, [r5, #30]
   1c5aa:	1e5a      	subs	r2, r3, #1
   1c5ac:	83ea      	strh	r2, [r5, #30]
   1c5ae:	f38a 8811 	msr	BASEPRI, sl
   1c5b2:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1c5b6:	8bac      	ldrh	r4, [r5, #28]
   1c5b8:	1ae4      	subs	r4, r4, r3
   1c5ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c5bc:	2218      	movs	r2, #24
   1c5be:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   1c5c2:	4b1a      	ldr	r3, [pc, #104]	; (1c62c <net_buf_alloc_len+0x148>)
   1c5c4:	1aed      	subs	r5, r5, r3
   1c5c6:	4b1a      	ldr	r3, [pc, #104]	; (1c630 <net_buf_alloc_len+0x14c>)
   1c5c8:	10ad      	asrs	r5, r5, #2
   1c5ca:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1c5cc:	71a5      	strb	r5, [r4, #6]
		goto success;
   1c5ce:	e7b9      	b.n	1c544 <net_buf_alloc_len+0x60>
   1c5d0:	f38a 8811 	msr	BASEPRI, sl
   1c5d4:	f3bf 8f6f 	isb	sy
   1c5d8:	4632      	mov	r2, r6
   1c5da:	463b      	mov	r3, r7
   1c5dc:	4628      	mov	r0, r5
   1c5de:	f002 fadb 	bl	1eb98 <z_impl_k_queue_get>
	if (!buf) {
   1c5e2:	4604      	mov	r4, r0
   1c5e4:	2800      	cmp	r0, #0
   1c5e6:	d1ad      	bne.n	1c544 <net_buf_alloc_len+0x60>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1c5e8:	4620      	mov	r0, r4
   1c5ea:	b002      	add	sp, #8
   1c5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   1c5f0:	9b01      	ldr	r3, [sp, #4]
   1c5f2:	429d      	cmp	r5, r3
   1c5f4:	d90a      	bls.n	1c60c <net_buf_alloc_len+0x128>
   1c5f6:	490b      	ldr	r1, [pc, #44]	; (1c624 <net_buf_alloc_len+0x140>)
   1c5f8:	480b      	ldr	r0, [pc, #44]	; (1c628 <net_buf_alloc_len+0x144>)
   1c5fa:	f240 124d 	movw	r2, #333	; 0x14d
   1c5fe:	f005 fc64 	bl	21eca <printk>
   1c602:	f240 114d 	movw	r1, #333	; 0x14d
   1c606:	4807      	ldr	r0, [pc, #28]	; (1c624 <net_buf_alloc_len+0x140>)
   1c608:	f005 ff11 	bl	2242e <assert_post_action>
	buf->frags = NULL;
   1c60c:	2300      	movs	r3, #0
   1c60e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1c610:	2301      	movs	r3, #1
   1c612:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1c614:	9b01      	ldr	r3, [sp, #4]
   1c616:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1c618:	4620      	mov	r0, r4
   1c61a:	f7ff ff41 	bl	1c4a0 <net_buf_reset>
	return buf;
   1c61e:	e7e3      	b.n	1c5e8 <net_buf_alloc_len+0x104>
		buf->__buf = NULL;
   1c620:	6125      	str	r5, [r4, #16]
   1c622:	e7f3      	b.n	1c60c <net_buf_alloc_len+0x128>
   1c624:	0002f89f 	.word	0x0002f89f
   1c628:	0002a026 	.word	0x0002a026
   1c62c:	20000ff8 	.word	0x20000ff8
   1c630:	ba2e8ba3 	.word	0xba2e8ba3

0001c634 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1c634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c638:	4607      	mov	r7, r0
   1c63a:	f002 faad 	bl	1eb98 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1c63e:	4605      	mov	r5, r0
   1c640:	b140      	cbz	r0, 1c654 <net_buf_get+0x20>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1c642:	4e12      	ldr	r6, [pc, #72]	; (1c68c <net_buf_get+0x58>)
   1c644:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1c690 <net_buf_get+0x5c>
   1c648:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c64a:	7963      	ldrb	r3, [r4, #5]
   1c64c:	f013 0301 	ands.w	r3, r3, #1
   1c650:	d103      	bne.n	1c65a <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1c652:	6023      	str	r3, [r4, #0]

	return buf;
}
   1c654:	4628      	mov	r0, r5
   1c656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c65a:	2200      	movs	r2, #0
   1c65c:	2300      	movs	r3, #0
   1c65e:	4638      	mov	r0, r7
   1c660:	f002 fa9a 	bl	1eb98 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1c664:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1c666:	b950      	cbnz	r0, 1c67e <net_buf_get+0x4a>
   1c668:	4631      	mov	r1, r6
   1c66a:	4640      	mov	r0, r8
   1c66c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   1c670:	f005 fc2b 	bl	21eca <printk>
   1c674:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   1c678:	4630      	mov	r0, r6
   1c67a:	f005 fed8 	bl	2242e <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1c67e:	7963      	ldrb	r3, [r4, #5]
   1c680:	f023 0301 	bic.w	r3, r3, #1
   1c684:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c686:	6824      	ldr	r4, [r4, #0]
   1c688:	e7df      	b.n	1c64a <net_buf_get+0x16>
   1c68a:	bf00      	nop
   1c68c:	0002f89f 	.word	0x0002f89f
   1c690:	0002a026 	.word	0x0002a026

0001c694 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1c694:	b538      	push	{r3, r4, r5, lr}
   1c696:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1c698:	4604      	mov	r4, r0
   1c69a:	b950      	cbnz	r0, 1c6b2 <net_buf_simple_reserve+0x1e>
   1c69c:	490d      	ldr	r1, [pc, #52]	; (1c6d4 <net_buf_simple_reserve+0x40>)
   1c69e:	480e      	ldr	r0, [pc, #56]	; (1c6d8 <net_buf_simple_reserve+0x44>)
   1c6a0:	f240 12bb 	movw	r2, #443	; 0x1bb
   1c6a4:	f005 fc11 	bl	21eca <printk>
   1c6a8:	f240 11bb 	movw	r1, #443	; 0x1bb
   1c6ac:	4809      	ldr	r0, [pc, #36]	; (1c6d4 <net_buf_simple_reserve+0x40>)
   1c6ae:	f005 febe 	bl	2242e <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1c6b2:	88a3      	ldrh	r3, [r4, #4]
   1c6b4:	b153      	cbz	r3, 1c6cc <net_buf_simple_reserve+0x38>
   1c6b6:	4907      	ldr	r1, [pc, #28]	; (1c6d4 <net_buf_simple_reserve+0x40>)
   1c6b8:	4807      	ldr	r0, [pc, #28]	; (1c6d8 <net_buf_simple_reserve+0x44>)
   1c6ba:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   1c6be:	f005 fc04 	bl	21eca <printk>
   1c6c2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1c6c6:	4803      	ldr	r0, [pc, #12]	; (1c6d4 <net_buf_simple_reserve+0x40>)
   1c6c8:	f005 feb1 	bl	2242e <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1c6cc:	68a1      	ldr	r1, [r4, #8]
   1c6ce:	4429      	add	r1, r5
   1c6d0:	6021      	str	r1, [r4, #0]
}
   1c6d2:	bd38      	pop	{r3, r4, r5, pc}
   1c6d4:	0002f89f 	.word	0x0002f89f
   1c6d8:	0002a026 	.word	0x0002a026

0001c6dc <net_buf_slist_put>:

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1c6dc:	b538      	push	{r3, r4, r5, lr}
   1c6de:	460d      	mov	r5, r1
	struct net_buf *tail;
	unsigned int key;

	__ASSERT_NO_MSG(list);
   1c6e0:	4604      	mov	r4, r0
   1c6e2:	b950      	cbnz	r0, 1c6fa <net_buf_slist_put+0x1e>
   1c6e4:	4919      	ldr	r1, [pc, #100]	; (1c74c <net_buf_slist_put+0x70>)
   1c6e6:	481a      	ldr	r0, [pc, #104]	; (1c750 <net_buf_slist_put+0x74>)
   1c6e8:	f240 12c7 	movw	r2, #455	; 0x1c7
   1c6ec:	f005 fbed 	bl	21eca <printk>
   1c6f0:	f240 11c7 	movw	r1, #455	; 0x1c7
   1c6f4:	4815      	ldr	r0, [pc, #84]	; (1c74c <net_buf_slist_put+0x70>)
   1c6f6:	f005 fe9a 	bl	2242e <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1c6fa:	b955      	cbnz	r5, 1c712 <net_buf_slist_put+0x36>
   1c6fc:	4913      	ldr	r1, [pc, #76]	; (1c74c <net_buf_slist_put+0x70>)
   1c6fe:	4814      	ldr	r0, [pc, #80]	; (1c750 <net_buf_slist_put+0x74>)
   1c700:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   1c704:	f005 fbe1 	bl	21eca <printk>
   1c708:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1c70c:	480f      	ldr	r0, [pc, #60]	; (1c74c <net_buf_slist_put+0x70>)
   1c70e:	f005 fe8e 	bl	2242e <assert_post_action>
{
   1c712:	462b      	mov	r3, r5

	for (tail = buf; tail->frags; tail = tail->frags) {
   1c714:	6819      	ldr	r1, [r3, #0]
   1c716:	b981      	cbnz	r1, 1c73a <net_buf_slist_put+0x5e>
	__asm__ volatile(
   1c718:	f04f 0220 	mov.w	r2, #32
   1c71c:	f3ef 8111 	mrs	r1, BASEPRI
   1c720:	f382 8811 	msr	BASEPRI, r2
   1c724:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   1c728:	6862      	ldr	r2, [r4, #4]
   1c72a:	b962      	cbnz	r2, 1c746 <net_buf_slist_put+0x6a>
	list->head = node;
   1c72c:	6025      	str	r5, [r4, #0]
	list->tail = node;
   1c72e:	6063      	str	r3, [r4, #4]
	__asm__ volatile(
   1c730:	f381 8811 	msr	BASEPRI, r1
   1c734:	f3bf 8f6f 	isb	sy
	}

	key = irq_lock();
	sys_slist_append_list(list, &buf->node, &tail->node);
	irq_unlock(key);
}
   1c738:	bd38      	pop	{r3, r4, r5, pc}
		tail->flags |= NET_BUF_FRAGS;
   1c73a:	795a      	ldrb	r2, [r3, #5]
   1c73c:	f042 0201 	orr.w	r2, r2, #1
   1c740:	715a      	strb	r2, [r3, #5]
   1c742:	460b      	mov	r3, r1
   1c744:	e7e6      	b.n	1c714 <net_buf_slist_put+0x38>
	parent->next = child;
   1c746:	6015      	str	r5, [r2, #0]
   1c748:	e7f1      	b.n	1c72e <net_buf_slist_put+0x52>
   1c74a:	bf00      	nop
   1c74c:	0002f89f 	.word	0x0002f89f
   1c750:	0002a026 	.word	0x0002a026

0001c754 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1c754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_buf *buf, *frag;
	unsigned int key;

	__ASSERT_NO_MSG(list);
   1c758:	4604      	mov	r4, r0
   1c75a:	b950      	cbnz	r0, 1c772 <net_buf_slist_get+0x1e>
   1c75c:	4929      	ldr	r1, [pc, #164]	; (1c804 <net_buf_slist_get+0xb0>)
   1c75e:	482a      	ldr	r0, [pc, #168]	; (1c808 <net_buf_slist_get+0xb4>)
   1c760:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
   1c764:	f005 fbb1 	bl	21eca <printk>
   1c768:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
   1c76c:	4825      	ldr	r0, [pc, #148]	; (1c804 <net_buf_slist_get+0xb0>)
   1c76e:	f005 fe5e 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1c772:	f04f 0320 	mov.w	r3, #32
   1c776:	f3ef 8211 	mrs	r2, BASEPRI
   1c77a:	f383 8811 	msr	BASEPRI, r3
   1c77e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1c782:	6826      	ldr	r6, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1c784:	b12e      	cbz	r6, 1c792 <net_buf_slist_get+0x3e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c786:	6861      	ldr	r1, [r4, #4]
   1c788:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   1c78a:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c78c:	428e      	cmp	r6, r1
	list->tail = node;
   1c78e:	bf08      	it	eq
   1c790:	6063      	streq	r3, [r4, #4]
	__asm__ volatile(
   1c792:	f382 8811 	msr	BASEPRI, r2
   1c796:	f3bf 8f6f 	isb	sy

	key = irq_lock();
	buf = (void *)sys_slist_get(list);
	irq_unlock(key);

	if (!buf) {
   1c79a:	b146      	cbz	r6, 1c7ae <net_buf_slist_get+0x5a>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		key = irq_lock();
		frag->frags = (void *)sys_slist_get(list);
		irq_unlock(key);

		__ASSERT_NO_MSG(frag->frags);
   1c79c:	4f19      	ldr	r7, [pc, #100]	; (1c804 <net_buf_slist_get+0xb0>)
   1c79e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1c808 <net_buf_slist_get+0xb4>
   1c7a2:	4635      	mov	r5, r6
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c7a4:	796b      	ldrb	r3, [r5, #5]
   1c7a6:	f013 0301 	ands.w	r3, r3, #1
   1c7aa:	d103      	bne.n	1c7b4 <net_buf_slist_get+0x60>
		/* The fragments flag is only for list-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1c7ac:	602b      	str	r3, [r5, #0]

	return buf;
}
   1c7ae:	4630      	mov	r0, r6
   1c7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c7b4:	f04f 0320 	mov.w	r3, #32
   1c7b8:	f3ef 8011 	mrs	r0, BASEPRI
   1c7bc:	f383 8811 	msr	BASEPRI, r3
   1c7c0:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1c7c4:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1c7c6:	b12b      	cbz	r3, 1c7d4 <net_buf_slist_get+0x80>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c7c8:	6861      	ldr	r1, [r4, #4]
   1c7ca:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1c7cc:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c7ce:	428b      	cmp	r3, r1
	list->tail = node;
   1c7d0:	bf08      	it	eq
   1c7d2:	6062      	streq	r2, [r4, #4]
		frag->frags = (void *)sys_slist_get(list);
   1c7d4:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1c7d6:	f380 8811 	msr	BASEPRI, r0
   1c7da:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(frag->frags);
   1c7de:	682b      	ldr	r3, [r5, #0]
   1c7e0:	b953      	cbnz	r3, 1c7f8 <net_buf_slist_get+0xa4>
   1c7e2:	4639      	mov	r1, r7
   1c7e4:	4640      	mov	r0, r8
   1c7e6:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
   1c7ea:	f005 fb6e 	bl	21eca <printk>
   1c7ee:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   1c7f2:	4638      	mov	r0, r7
   1c7f4:	f005 fe1b 	bl	2242e <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1c7f8:	796b      	ldrb	r3, [r5, #5]
   1c7fa:	f023 0301 	bic.w	r3, r3, #1
   1c7fe:	716b      	strb	r3, [r5, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c800:	682d      	ldr	r5, [r5, #0]
   1c802:	e7cf      	b.n	1c7a4 <net_buf_slist_get+0x50>
   1c804:	0002f89f 	.word	0x0002f89f
   1c808:	0002a026 	.word	0x0002a026

0001c80c <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1c80c:	b538      	push	{r3, r4, r5, lr}
   1c80e:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1c810:	4605      	mov	r5, r0
   1c812:	b950      	cbnz	r0, 1c82a <net_buf_put+0x1e>
   1c814:	4912      	ldr	r1, [pc, #72]	; (1c860 <net_buf_put+0x54>)
   1c816:	4813      	ldr	r0, [pc, #76]	; (1c864 <net_buf_put+0x58>)
   1c818:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1c81c:	f005 fb55 	bl	21eca <printk>
   1c820:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   1c824:	480e      	ldr	r0, [pc, #56]	; (1c860 <net_buf_put+0x54>)
   1c826:	f005 fe02 	bl	2242e <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1c82a:	b954      	cbnz	r4, 1c842 <net_buf_put+0x36>
   1c82c:	490c      	ldr	r1, [pc, #48]	; (1c860 <net_buf_put+0x54>)
   1c82e:	480d      	ldr	r0, [pc, #52]	; (1c864 <net_buf_put+0x58>)
   1c830:	f240 12f9 	movw	r2, #505	; 0x1f9
   1c834:	f005 fb49 	bl	21eca <printk>
   1c838:	f240 11f9 	movw	r1, #505	; 0x1f9
   1c83c:	4808      	ldr	r0, [pc, #32]	; (1c860 <net_buf_put+0x54>)
   1c83e:	f005 fdf6 	bl	2242e <assert_post_action>
{
   1c842:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1c844:	6811      	ldr	r1, [r2, #0]
   1c846:	b929      	cbnz	r1, 1c854 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1c848:	4621      	mov	r1, r4
   1c84a:	4628      	mov	r0, r5
}
   1c84c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1c850:	f002 b94e 	b.w	1eaf0 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1c854:	7953      	ldrb	r3, [r2, #5]
   1c856:	f043 0301 	orr.w	r3, r3, #1
   1c85a:	7153      	strb	r3, [r2, #5]
   1c85c:	460a      	mov	r2, r1
   1c85e:	e7f1      	b.n	1c844 <net_buf_put+0x38>
   1c860:	0002f89f 	.word	0x0002f89f
   1c864:	0002a026 	.word	0x0002a026

0001c868 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1c868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1c86c:	4604      	mov	r4, r0
   1c86e:	b328      	cbz	r0, 1c8bc <net_buf_unref+0x54>
   1c870:	4d1c      	ldr	r5, [pc, #112]	; (1c8e4 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1c872:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1c874:	272c      	movs	r7, #44	; 0x2c
		if (--buf->ref > 0) {
   1c876:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1c878:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1c87c:	3b01      	subs	r3, #1
   1c87e:	b2db      	uxtb	r3, r3
   1c880:	7123      	strb	r3, [r4, #4]
   1c882:	b9cb      	cbnz	r3, 1c8b8 <net_buf_unref+0x50>
		if (buf->__buf) {
   1c884:	6921      	ldr	r1, [r4, #16]
   1c886:	b159      	cbz	r1, 1c8a0 <net_buf_unref+0x38>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1c888:	7963      	ldrb	r3, [r4, #5]
   1c88a:	079b      	lsls	r3, r3, #30
   1c88c:	d407      	bmi.n	1c89e <net_buf_unref+0x36>
	pool->alloc->cb->unref(buf, data);
   1c88e:	79a3      	ldrb	r3, [r4, #6]
   1c890:	fb07 5303 	mla	r3, r7, r3, r5
   1c894:	4620      	mov	r0, r4
   1c896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c898:	681b      	ldr	r3, [r3, #0]
   1c89a:	689b      	ldr	r3, [r3, #8]
   1c89c:	4798      	blx	r3
			buf->__buf = NULL;
   1c89e:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1c8a0:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1c8a2:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1c8a4:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1c8a8:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1c8aa:	6a1b      	ldr	r3, [r3, #32]
   1c8ac:	b19b      	cbz	r3, 1c8d6 <net_buf_unref+0x6e>
			pool->destroy(buf);
   1c8ae:	4620      	mov	r0, r4
   1c8b0:	4798      	blx	r3
	while (buf) {
   1c8b2:	4644      	mov	r4, r8
   1c8b4:	2c00      	cmp	r4, #0
   1c8b6:	d1de      	bne.n	1c876 <net_buf_unref+0xe>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1c8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1c8bc:	490a      	ldr	r1, [pc, #40]	; (1c8e8 <net_buf_unref+0x80>)
   1c8be:	480b      	ldr	r0, [pc, #44]	; (1c8ec <net_buf_unref+0x84>)
   1c8c0:	f44f 7202 	mov.w	r2, #520	; 0x208
   1c8c4:	f005 fb01 	bl	21eca <printk>
   1c8c8:	f44f 7102 	mov.w	r1, #520	; 0x208
   1c8cc:	4806      	ldr	r0, [pc, #24]	; (1c8e8 <net_buf_unref+0x80>)
}
   1c8ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1c8d2:	f005 bdac 	b.w	2242e <assert_post_action>
   1c8d6:	4621      	mov	r1, r4
   1c8d8:	fb00 5007 	mla	r0, r0, r7, r5
   1c8dc:	f00b fee2 	bl	286a4 <k_queue_prepend>
   1c8e0:	e7e7      	b.n	1c8b2 <net_buf_unref+0x4a>
   1c8e2:	bf00      	nop
   1c8e4:	20000ff8 	.word	0x20000ff8
   1c8e8:	0002f89f 	.word	0x0002f89f
   1c8ec:	0002a026 	.word	0x0002a026

0001c8f0 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1c8f0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1c8f2:	4604      	mov	r4, r0
   1c8f4:	b950      	cbnz	r0, 1c90c <net_buf_ref+0x1c>
   1c8f6:	4908      	ldr	r1, [pc, #32]	; (1c918 <net_buf_ref+0x28>)
   1c8f8:	4808      	ldr	r0, [pc, #32]	; (1c91c <net_buf_ref+0x2c>)
   1c8fa:	f240 2237 	movw	r2, #567	; 0x237
   1c8fe:	f005 fae4 	bl	21eca <printk>
   1c902:	f240 2137 	movw	r1, #567	; 0x237
   1c906:	4804      	ldr	r0, [pc, #16]	; (1c918 <net_buf_ref+0x28>)
   1c908:	f005 fd91 	bl	2242e <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1c90c:	7923      	ldrb	r3, [r4, #4]
   1c90e:	3301      	adds	r3, #1
   1c910:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1c912:	4620      	mov	r0, r4
   1c914:	bd10      	pop	{r4, pc}
   1c916:	bf00      	nop
   1c918:	0002f89f 	.word	0x0002f89f
   1c91c:	0002a026 	.word	0x0002a026

0001c920 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1c920:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1c922:	4604      	mov	r4, r0
   1c924:	b950      	cbnz	r0, 1c93c <net_buf_frag_last+0x1c>
   1c926:	4908      	ldr	r1, [pc, #32]	; (1c948 <net_buf_frag_last+0x28>)
   1c928:	4808      	ldr	r0, [pc, #32]	; (1c94c <net_buf_frag_last+0x2c>)
   1c92a:	f44f 721d 	mov.w	r2, #628	; 0x274
   1c92e:	f005 facc 	bl	21eca <printk>
   1c932:	f44f 711d 	mov.w	r1, #628	; 0x274
   1c936:	4804      	ldr	r0, [pc, #16]	; (1c948 <net_buf_frag_last+0x28>)
   1c938:	f005 fd79 	bl	2242e <assert_post_action>

	while (buf->frags) {
   1c93c:	6823      	ldr	r3, [r4, #0]
   1c93e:	b90b      	cbnz	r3, 1c944 <net_buf_frag_last+0x24>
		buf = buf->frags;
	}

	return buf;
}
   1c940:	4620      	mov	r0, r4
   1c942:	bd10      	pop	{r4, pc}
   1c944:	461c      	mov	r4, r3
   1c946:	e7f9      	b.n	1c93c <net_buf_frag_last+0x1c>
   1c948:	0002f89f 	.word	0x0002f89f
   1c94c:	0002a026 	.word	0x0002a026

0001c950 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1c950:	b538      	push	{r3, r4, r5, lr}
   1c952:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1c954:	4604      	mov	r4, r0
   1c956:	b950      	cbnz	r0, 1c96e <net_buf_frag_insert+0x1e>
   1c958:	490f      	ldr	r1, [pc, #60]	; (1c998 <net_buf_frag_insert+0x48>)
   1c95a:	4810      	ldr	r0, [pc, #64]	; (1c99c <net_buf_frag_insert+0x4c>)
   1c95c:	f240 227f 	movw	r2, #639	; 0x27f
   1c960:	f005 fab3 	bl	21eca <printk>
   1c964:	f240 217f 	movw	r1, #639	; 0x27f
   1c968:	480b      	ldr	r0, [pc, #44]	; (1c998 <net_buf_frag_insert+0x48>)
   1c96a:	f005 fd60 	bl	2242e <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1c96e:	b955      	cbnz	r5, 1c986 <net_buf_frag_insert+0x36>
   1c970:	4909      	ldr	r1, [pc, #36]	; (1c998 <net_buf_frag_insert+0x48>)
   1c972:	480a      	ldr	r0, [pc, #40]	; (1c99c <net_buf_frag_insert+0x4c>)
   1c974:	f44f 7220 	mov.w	r2, #640	; 0x280
   1c978:	f005 faa7 	bl	21eca <printk>
   1c97c:	f44f 7120 	mov.w	r1, #640	; 0x280
   1c980:	4805      	ldr	r0, [pc, #20]	; (1c998 <net_buf_frag_insert+0x48>)
   1c982:	f005 fd54 	bl	2242e <assert_post_action>

	if (parent->frags) {
   1c986:	6823      	ldr	r3, [r4, #0]
   1c988:	b123      	cbz	r3, 1c994 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   1c98a:	4628      	mov	r0, r5
   1c98c:	f7ff ffc8 	bl	1c920 <net_buf_frag_last>
   1c990:	6823      	ldr	r3, [r4, #0]
   1c992:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1c994:	6025      	str	r5, [r4, #0]
}
   1c996:	bd38      	pop	{r3, r4, r5, pc}
   1c998:	0002f89f 	.word	0x0002f89f
   1c99c:	0002a026 	.word	0x0002a026

0001c9a0 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1c9a0:	b538      	push	{r3, r4, r5, lr}
   1c9a2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1c9a4:	460d      	mov	r5, r1
   1c9a6:	b951      	cbnz	r1, 1c9be <net_buf_frag_add+0x1e>
   1c9a8:	490c      	ldr	r1, [pc, #48]	; (1c9dc <net_buf_frag_add+0x3c>)
   1c9aa:	480d      	ldr	r0, [pc, #52]	; (1c9e0 <net_buf_frag_add+0x40>)
   1c9ac:	f240 228b 	movw	r2, #651	; 0x28b
   1c9b0:	f005 fa8b 	bl	21eca <printk>
   1c9b4:	f240 218b 	movw	r1, #651	; 0x28b
   1c9b8:	4808      	ldr	r0, [pc, #32]	; (1c9dc <net_buf_frag_add+0x3c>)
   1c9ba:	f005 fd38 	bl	2242e <assert_post_action>

	if (!head) {
   1c9be:	b924      	cbnz	r4, 1c9ca <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   1c9c0:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1c9c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1c9c6:	f7ff bf93 	b.w	1c8f0 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1c9ca:	4620      	mov	r0, r4
   1c9cc:	f7ff ffa8 	bl	1c920 <net_buf_frag_last>
   1c9d0:	4629      	mov	r1, r5
   1c9d2:	f7ff ffbd 	bl	1c950 <net_buf_frag_insert>
}
   1c9d6:	4620      	mov	r0, r4
   1c9d8:	bd38      	pop	{r3, r4, r5, pc}
   1c9da:	bf00      	nop
   1c9dc:	0002f89f 	.word	0x0002f89f
   1c9e0:	0002a026 	.word	0x0002a026

0001c9e4 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1c9e4:	b538      	push	{r3, r4, r5, lr}
   1c9e6:	4605      	mov	r5, r0
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);
   1c9e8:	460c      	mov	r4, r1
   1c9ea:	b951      	cbnz	r1, 1ca02 <net_buf_frag_del+0x1e>
   1c9ec:	4918      	ldr	r1, [pc, #96]	; (1ca50 <net_buf_frag_del+0x6c>)
   1c9ee:	4819      	ldr	r0, [pc, #100]	; (1ca54 <net_buf_frag_del+0x70>)
   1c9f0:	f44f 7228 	mov.w	r2, #672	; 0x2a0
   1c9f4:	f005 fa69 	bl	21eca <printk>
   1c9f8:	f44f 7128 	mov.w	r1, #672	; 0x2a0
   1c9fc:	4814      	ldr	r0, [pc, #80]	; (1ca50 <net_buf_frag_del+0x6c>)
   1c9fe:	f005 fd16 	bl	2242e <assert_post_action>

	if (parent) {
   1ca02:	b1e5      	cbz	r5, 1ca3e <net_buf_frag_del+0x5a>
		__ASSERT_NO_MSG(parent->frags);
   1ca04:	682b      	ldr	r3, [r5, #0]
   1ca06:	b953      	cbnz	r3, 1ca1e <net_buf_frag_del+0x3a>
   1ca08:	4911      	ldr	r1, [pc, #68]	; (1ca50 <net_buf_frag_del+0x6c>)
   1ca0a:	4812      	ldr	r0, [pc, #72]	; (1ca54 <net_buf_frag_del+0x70>)
   1ca0c:	f240 22a3 	movw	r2, #675	; 0x2a3
   1ca10:	f005 fa5b 	bl	21eca <printk>
   1ca14:	f240 21a3 	movw	r1, #675	; 0x2a3
   1ca18:	480d      	ldr	r0, [pc, #52]	; (1ca50 <net_buf_frag_del+0x6c>)
   1ca1a:	f005 fd08 	bl	2242e <assert_post_action>
		__ASSERT_NO_MSG(parent->frags == frag);
   1ca1e:	682b      	ldr	r3, [r5, #0]
   1ca20:	42a3      	cmp	r3, r4
   1ca22:	d00a      	beq.n	1ca3a <net_buf_frag_del+0x56>
   1ca24:	490a      	ldr	r1, [pc, #40]	; (1ca50 <net_buf_frag_del+0x6c>)
   1ca26:	480b      	ldr	r0, [pc, #44]	; (1ca54 <net_buf_frag_del+0x70>)
   1ca28:	f44f 7229 	mov.w	r2, #676	; 0x2a4
   1ca2c:	f005 fa4d 	bl	21eca <printk>
   1ca30:	f44f 7129 	mov.w	r1, #676	; 0x2a4
   1ca34:	4806      	ldr	r0, [pc, #24]	; (1ca50 <net_buf_frag_del+0x6c>)
   1ca36:	f005 fcfa 	bl	2242e <assert_post_action>
		parent->frags = frag->frags;
   1ca3a:	6823      	ldr	r3, [r4, #0]
   1ca3c:	602b      	str	r3, [r5, #0]
	}

	next_frag = frag->frags;
   1ca3e:	6825      	ldr	r5, [r4, #0]

	frag->frags = NULL;
   1ca40:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1ca42:	4620      	mov	r0, r4
	frag->frags = NULL;
   1ca44:	6023      	str	r3, [r4, #0]
	net_buf_unref(frag);
   1ca46:	f7ff ff0f 	bl	1c868 <net_buf_unref>
#endif

	return next_frag;
}
   1ca4a:	4628      	mov	r0, r5
   1ca4c:	bd38      	pop	{r3, r4, r5, pc}
   1ca4e:	bf00      	nop
   1ca50:	0002f89f 	.word	0x0002f89f
   1ca54:	0002a026 	.word	0x0002a026

0001ca58 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1ca58:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1ca5a:	6882      	ldr	r2, [r0, #8]
   1ca5c:	6803      	ldr	r3, [r0, #0]
   1ca5e:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1ca60:	4299      	cmp	r1, r3
{
   1ca62:	4604      	mov	r4, r0
   1ca64:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1ca66:	d90a      	bls.n	1ca7e <net_buf_simple_push+0x26>
   1ca68:	4908      	ldr	r1, [pc, #32]	; (1ca8c <net_buf_simple_push+0x34>)
   1ca6a:	4809      	ldr	r0, [pc, #36]	; (1ca90 <net_buf_simple_push+0x38>)
   1ca6c:	f240 4204 	movw	r2, #1028	; 0x404
   1ca70:	f005 fa2b 	bl	21eca <printk>
   1ca74:	f240 4104 	movw	r1, #1028	; 0x404
   1ca78:	4804      	ldr	r0, [pc, #16]	; (1ca8c <net_buf_simple_push+0x34>)
   1ca7a:	f005 fcd8 	bl	2242e <assert_post_action>
	buf->data -= len;
   1ca7e:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1ca80:	88a3      	ldrh	r3, [r4, #4]
	buf->data -= len;
   1ca82:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1ca84:	441d      	add	r5, r3
	buf->data -= len;
   1ca86:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1ca88:	80a5      	strh	r5, [r4, #4]
}
   1ca8a:	bd38      	pop	{r3, r4, r5, pc}
   1ca8c:	0002f89f 	.word	0x0002f89f
   1ca90:	0002a026 	.word	0x0002a026

0001ca94 <net_buf_simple_pull>:
{
   1ca94:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1ca96:	8883      	ldrh	r3, [r0, #4]
   1ca98:	428b      	cmp	r3, r1
{
   1ca9a:	4604      	mov	r4, r0
   1ca9c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1ca9e:	d20a      	bcs.n	1cab6 <net_buf_simple_pull+0x22>
   1caa0:	4908      	ldr	r1, [pc, #32]	; (1cac4 <net_buf_simple_pull+0x30>)
   1caa2:	4809      	ldr	r0, [pc, #36]	; (1cac8 <net_buf_simple_pull+0x34>)
   1caa4:	f240 4264 	movw	r2, #1124	; 0x464
   1caa8:	f005 fa0f 	bl	21eca <printk>
   1caac:	f240 4164 	movw	r1, #1124	; 0x464
   1cab0:	4804      	ldr	r0, [pc, #16]	; (1cac4 <net_buf_simple_pull+0x30>)
   1cab2:	f005 fcbc 	bl	2242e <assert_post_action>
	buf->len -= len;
   1cab6:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1cab8:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1caba:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1cabc:	4428      	add	r0, r5
	buf->len -= len;
   1cabe:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1cac0:	6020      	str	r0, [r4, #0]
}
   1cac2:	bd38      	pop	{r3, r4, r5, pc}
   1cac4:	0002f89f 	.word	0x0002f89f
   1cac8:	0002a026 	.word	0x0002a026

0001cacc <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1cacc:	8883      	ldrh	r3, [r0, #4]
   1cace:	428b      	cmp	r3, r1
{
   1cad0:	b570      	push	{r4, r5, r6, lr}
   1cad2:	4604      	mov	r4, r0
   1cad4:	460d      	mov	r5, r1
	void *data = buf->data;
   1cad6:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1cad8:	d20a      	bcs.n	1caf0 <net_buf_simple_pull_mem+0x24>
   1cada:	4909      	ldr	r1, [pc, #36]	; (1cb00 <net_buf_simple_pull_mem+0x34>)
   1cadc:	4809      	ldr	r0, [pc, #36]	; (1cb04 <net_buf_simple_pull_mem+0x38>)
   1cade:	f44f 628e 	mov.w	r2, #1136	; 0x470
   1cae2:	f005 f9f2 	bl	21eca <printk>
   1cae6:	f44f 618e 	mov.w	r1, #1136	; 0x470
   1caea:	4805      	ldr	r0, [pc, #20]	; (1cb00 <net_buf_simple_pull_mem+0x34>)
   1caec:	f005 fc9f 	bl	2242e <assert_post_action>
	buf->len -= len;
   1caf0:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1caf2:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1caf4:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1caf6:	4429      	add	r1, r5
	buf->len -= len;
   1caf8:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1cafa:	6021      	str	r1, [r4, #0]
}
   1cafc:	4630      	mov	r0, r6
   1cafe:	bd70      	pop	{r4, r5, r6, pc}
   1cb00:	0002f89f 	.word	0x0002f89f
   1cb04:	0002a026 	.word	0x0002a026

0001cb08 <net_buf_simple_add>:
{
   1cb08:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1cb0a:	6803      	ldr	r3, [r0, #0]
   1cb0c:	8886      	ldrh	r6, [r0, #4]
   1cb0e:	4604      	mov	r4, r0
   1cb10:	460d      	mov	r5, r1
   1cb12:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1cb14:	f00b fa23 	bl	27f5e <net_buf_simple_tailroom>
   1cb18:	4288      	cmp	r0, r1
   1cb1a:	d20a      	bcs.n	1cb32 <net_buf_simple_add+0x2a>
   1cb1c:	4907      	ldr	r1, [pc, #28]	; (1cb3c <net_buf_simple_add+0x34>)
   1cb1e:	4808      	ldr	r0, [pc, #32]	; (1cb40 <net_buf_simple_add+0x38>)
   1cb20:	f240 3215 	movw	r2, #789	; 0x315
   1cb24:	f005 f9d1 	bl	21eca <printk>
   1cb28:	f240 3115 	movw	r1, #789	; 0x315
   1cb2c:	4803      	ldr	r0, [pc, #12]	; (1cb3c <net_buf_simple_add+0x34>)
   1cb2e:	f005 fc7e 	bl	2242e <assert_post_action>
	buf->len += len;
   1cb32:	88a3      	ldrh	r3, [r4, #4]
   1cb34:	441d      	add	r5, r3
   1cb36:	80a5      	strh	r5, [r4, #4]
}
   1cb38:	4630      	mov	r0, r6
   1cb3a:	bd70      	pop	{r4, r5, r6, pc}
   1cb3c:	0002f89f 	.word	0x0002f89f
   1cb40:	0002a026 	.word	0x0002a026

0001cb44 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1cb44:	b570      	push	{r4, r5, r6, lr}
   1cb46:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1cb48:	68c4      	ldr	r4, [r0, #12]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1cb4a:	460d      	mov	r5, r1
   1cb4c:	b941      	cbnz	r1, 1cb60 <gpio_nrfx_manage_callback+0x1c>
   1cb4e:	491e      	ldr	r1, [pc, #120]	; (1cbc8 <gpio_nrfx_manage_callback+0x84>)
   1cb50:	481e      	ldr	r0, [pc, #120]	; (1cbcc <gpio_nrfx_manage_callback+0x88>)
   1cb52:	2224      	movs	r2, #36	; 0x24
   1cb54:	f005 f9b9 	bl	21eca <printk>
   1cb58:	2124      	movs	r1, #36	; 0x24
   1cb5a:	481b      	ldr	r0, [pc, #108]	; (1cbc8 <gpio_nrfx_manage_callback+0x84>)
   1cb5c:	f005 fc67 	bl	2242e <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1cb60:	686b      	ldr	r3, [r5, #4]
   1cb62:	b943      	cbnz	r3, 1cb76 <gpio_nrfx_manage_callback+0x32>
   1cb64:	4918      	ldr	r1, [pc, #96]	; (1cbc8 <gpio_nrfx_manage_callback+0x84>)
   1cb66:	4819      	ldr	r0, [pc, #100]	; (1cbcc <gpio_nrfx_manage_callback+0x88>)
   1cb68:	2225      	movs	r2, #37	; 0x25
   1cb6a:	f005 f9ae 	bl	21eca <printk>
   1cb6e:	2125      	movs	r1, #37	; 0x25
   1cb70:	4815      	ldr	r0, [pc, #84]	; (1cbc8 <gpio_nrfx_manage_callback+0x84>)
   1cb72:	f005 fc5c 	bl	2242e <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1cb76:	6863      	ldr	r3, [r4, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1cb78:	b15b      	cbz	r3, 1cb92 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cb7a:	2200      	movs	r2, #0
   1cb7c:	429d      	cmp	r5, r3
   1cb7e:	d113      	bne.n	1cba8 <gpio_nrfx_manage_callback+0x64>
Z_GENLIST_REMOVE(slist, snode)
   1cb80:	682b      	ldr	r3, [r5, #0]
   1cb82:	b95a      	cbnz	r2, 1cb9c <gpio_nrfx_manage_callback+0x58>
   1cb84:	68a2      	ldr	r2, [r4, #8]
	list->head = node;
   1cb86:	6063      	str	r3, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
   1cb88:	4295      	cmp	r5, r2
   1cb8a:	d100      	bne.n	1cb8e <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   1cb8c:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   1cb8e:	2300      	movs	r3, #0
   1cb90:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1cb92:	b976      	cbnz	r6, 1cbb2 <gpio_nrfx_manage_callback+0x6e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1cb94:	2000      	movs	r0, #0
				     callback, set);
}
   1cb96:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cb98:	460b      	mov	r3, r1
   1cb9a:	e7ef      	b.n	1cb7c <gpio_nrfx_manage_callback+0x38>
	parent->next = child;
   1cb9c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cb9e:	68a3      	ldr	r3, [r4, #8]
   1cba0:	429d      	cmp	r5, r3
	list->tail = node;
   1cba2:	bf08      	it	eq
   1cba4:	60a2      	streq	r2, [r4, #8]
   1cba6:	e7f2      	b.n	1cb8e <gpio_nrfx_manage_callback+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cba8:	6819      	ldr	r1, [r3, #0]
	return node->next;
   1cbaa:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cbac:	2900      	cmp	r1, #0
   1cbae:	d1f3      	bne.n	1cb98 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1cbb0:	b13e      	cbz	r6, 1cbc2 <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_PREPEND(slist, snode)
   1cbb2:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1cbb4:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cbb6:	68a0      	ldr	r0, [r4, #8]
	list->head = node;
   1cbb8:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cbba:	2800      	cmp	r0, #0
   1cbbc:	d1ea      	bne.n	1cb94 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1cbbe:	60a5      	str	r5, [r4, #8]
   1cbc0:	e7e9      	b.n	1cb96 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   1cbc2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1cbc6:	e7e6      	b.n	1cb96 <gpio_nrfx_manage_callback+0x52>
   1cbc8:	0002f8cb 	.word	0x0002f8cb
   1cbcc:	0002a026 	.word	0x0002a026

0001cbd0 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1cbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cbd4:	6804      	ldr	r4, [r0, #0]
{
   1cbd6:	4688      	mov	r8, r1
   1cbd8:	4616      	mov	r6, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cbda:	b1dc      	cbz	r4, 1cc14 <gpio_fire_callbacks+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cbdc:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   1cbde:	4f0e      	ldr	r7, [pc, #56]	; (1cc18 <gpio_fire_callbacks+0x48>)
   1cbe0:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1cc1c <gpio_fire_callbacks+0x4c>
		if (cb->pin_mask & pins) {
   1cbe4:	68a3      	ldr	r3, [r4, #8]
   1cbe6:	421e      	tst	r6, r3
   1cbe8:	d010      	beq.n	1cc0c <gpio_fire_callbacks+0x3c>
			__ASSERT(cb->handler, "No callback handler!");
   1cbea:	6863      	ldr	r3, [r4, #4]
   1cbec:	b943      	cbnz	r3, 1cc00 <gpio_fire_callbacks+0x30>
   1cbee:	4639      	mov	r1, r7
   1cbf0:	4648      	mov	r0, r9
   1cbf2:	2245      	movs	r2, #69	; 0x45
   1cbf4:	f005 f969 	bl	21eca <printk>
   1cbf8:	2145      	movs	r1, #69	; 0x45
   1cbfa:	4638      	mov	r0, r7
   1cbfc:	f005 fc17 	bl	2242e <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1cc00:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1cc04:	4621      	mov	r1, r4
   1cc06:	4032      	ands	r2, r6
   1cc08:	4640      	mov	r0, r8
   1cc0a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cc0c:	b115      	cbz	r5, 1cc14 <gpio_fire_callbacks+0x44>
   1cc0e:	462c      	mov	r4, r5
   1cc10:	682d      	ldr	r5, [r5, #0]
   1cc12:	e7e7      	b.n	1cbe4 <gpio_fire_callbacks+0x14>
		}
	}
}
   1cc14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cc18:	0002f8cb 	.word	0x0002f8cb
   1cc1c:	0002a026 	.word	0x0002a026

0001cc20 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1cc20:	6802      	ldr	r2, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1cc22:	0953      	lsrs	r3, r2, #5
{
   1cc24:	b510      	push	{r4, lr}
   1cc26:	4604      	mov	r4, r0
    switch (port)
   1cc28:	d02a      	beq.n	1cc80 <nrf_gpio_pin_port_decode+0x60>
   1cc2a:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   1cc2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cc30:	bf18      	it	ne
   1cc32:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1cc34:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1cc38:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1cc3a:	07db      	lsls	r3, r3, #31
   1cc3c:	d40a      	bmi.n	1cc54 <nrf_gpio_pin_port_decode+0x34>
   1cc3e:	4913      	ldr	r1, [pc, #76]	; (1cc8c <nrf_gpio_pin_port_decode+0x6c>)
   1cc40:	4813      	ldr	r0, [pc, #76]	; (1cc90 <nrf_gpio_pin_port_decode+0x70>)
   1cc42:	f240 221a 	movw	r2, #538	; 0x21a
   1cc46:	f005 f940 	bl	21eca <printk>
   1cc4a:	f240 211a 	movw	r1, #538	; 0x21a
   1cc4e:	480f      	ldr	r0, [pc, #60]	; (1cc8c <nrf_gpio_pin_port_decode+0x6c>)
   1cc50:	f005 fbed 	bl	2242e <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   1cc54:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1cc56:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1cc5a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1cc5c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1cc5e:	d00c      	beq.n	1cc7a <nrf_gpio_pin_port_decode+0x5a>
   1cc60:	2b01      	cmp	r3, #1
   1cc62:	d010      	beq.n	1cc86 <nrf_gpio_pin_port_decode+0x66>
            NRFX_ASSERT(0);
   1cc64:	4909      	ldr	r1, [pc, #36]	; (1cc8c <nrf_gpio_pin_port_decode+0x6c>)
   1cc66:	480a      	ldr	r0, [pc, #40]	; (1cc90 <nrf_gpio_pin_port_decode+0x70>)
   1cc68:	f240 221f 	movw	r2, #543	; 0x21f
   1cc6c:	f005 f92d 	bl	21eca <printk>
   1cc70:	f240 211f 	movw	r1, #543	; 0x21f
   1cc74:	4805      	ldr	r0, [pc, #20]	; (1cc8c <nrf_gpio_pin_port_decode+0x6c>)
   1cc76:	f005 fbda 	bl	2242e <assert_post_action>
        case 0: return NRF_P0;
   1cc7a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1cc7e:	bd10      	pop	{r4, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   1cc80:	f04f 33ff 	mov.w	r3, #4294967295
   1cc84:	e7d6      	b.n	1cc34 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   1cc86:	4803      	ldr	r0, [pc, #12]	; (1cc94 <nrf_gpio_pin_port_decode+0x74>)
   1cc88:	e7f9      	b.n	1cc7e <nrf_gpio_pin_port_decode+0x5e>
   1cc8a:	bf00      	nop
   1cc8c:	0002f8f8 	.word	0x0002f8f8
   1cc90:	0002a026 	.word	0x0002a026
   1cc94:	50000300 	.word	0x50000300

0001cc98 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1cc98:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1cc9a:	4b09      	ldr	r3, [pc, #36]	; (1ccc0 <gpio_nrfx_init+0x28>)
   1cc9c:	781a      	ldrb	r2, [r3, #0]
   1cc9e:	b96a      	cbnz	r2, 1ccbc <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1cca0:	2101      	movs	r1, #1
   1cca2:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1cca4:	2006      	movs	r0, #6
   1cca6:	2105      	movs	r1, #5
   1cca8:	f7e7 fdd2 	bl	4850 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1ccac:	2006      	movs	r0, #6
   1ccae:	f7e7 fd9d 	bl	47ec <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1ccb2:	4b04      	ldr	r3, [pc, #16]	; (1ccc4 <gpio_nrfx_init+0x2c>)
   1ccb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1ccb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1ccbc:	2000      	movs	r0, #0
   1ccbe:	bd08      	pop	{r3, pc}
   1ccc0:	2000456c 	.word	0x2000456c
   1ccc4:	40006000 	.word	0x40006000

0001ccc8 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1ccc8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   1cccc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ccd0:	4680      	mov	r8, r0
   1ccd2:	460e      	mov	r6, r1
   1ccd4:	4617      	mov	r7, r2
   1ccd6:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   1ccd8:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   1ccda:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1ccde:	f040 80a6 	bne.w	1ce2e <gpio_nrfx_pin_interrupt_configure+0x166>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1cce2:	6843      	ldr	r3, [r0, #4]
   1cce4:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cce6:	a801      	add	r0, sp, #4
   1cce8:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   1ccec:	9301      	str	r3, [sp, #4]
   1ccee:	f7ff ff97 	bl	1cc20 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1ccf2:	9b01      	ldr	r3, [sp, #4]
   1ccf4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ccf8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1ccfc:	07d8      	lsls	r0, r3, #31
   1ccfe:	f100 80b7 	bmi.w	1ce70 <gpio_nrfx_pin_interrupt_configure+0x1a8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1cd02:	2101      	movs	r1, #1
   1cd04:	68e3      	ldr	r3, [r4, #12]
   1cd06:	40b1      	lsls	r1, r6
   1cd08:	4319      	orrs	r1, r3
   1cd0a:	6963      	ldr	r3, [r4, #20]
   1cd0c:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1cd0e:	2101      	movs	r1, #1
   1cd10:	40b1      	lsls	r1, r6
   1cd12:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   1cd16:	bf0c      	ite	eq
   1cd18:	430b      	orreq	r3, r1
   1cd1a:	438b      	bicne	r3, r1
   1cd1c:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1cd1e:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1cd20:	4a55      	ldr	r2, [pc, #340]	; (1ce78 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
	struct gpio_nrfx_data *data = get_port_data(port);
   1cd22:	f8d8 700c 	ldr.w	r7, [r8, #12]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1cd26:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   1cd2a:	bf0c      	ite	eq
   1cd2c:	430b      	orreq	r3, r1
   1cd2e:	438b      	bicne	r3, r1
   1cd30:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1cd32:	6923      	ldr	r3, [r4, #16]
   1cd34:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   1cd38:	bf0c      	ite	eq
   1cd3a:	4319      	orreq	r1, r3
   1cd3c:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cd40:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1cd44:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cd46:	7a1b      	ldrb	r3, [r3, #8]
   1cd48:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   1cd4c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1cd50:	2000      	movs	r0, #0
   1cd52:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1cd54:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1cd58:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1cd5c:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1cd60:	428d      	cmp	r5, r1
   1cd62:	d16f      	bne.n	1ce44 <gpio_nrfx_pin_interrupt_configure+0x17c>
		    && (intenset & BIT(i))) {
   1cd64:	fa23 f100 	lsr.w	r1, r3, r0
   1cd68:	07c9      	lsls	r1, r1, #31
   1cd6a:	d56b      	bpl.n	1ce44 <gpio_nrfx_pin_interrupt_configure+0x17c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1cd6c:	0083      	lsls	r3, r0, #2
   1cd6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cd72:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1cd76:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1cd7a:	f021 0101 	bic.w	r1, r1, #1
   1cd7e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1cd82:	2301      	movs	r3, #1
   1cd84:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1cd86:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1cd8a:	b2c0      	uxtb	r0, r0
   1cd8c:	f001 f840 	bl	1de10 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1cd90:	4628      	mov	r0, r5
   1cd92:	2100      	movs	r1, #0
   1cd94:	f00b f951 	bl	2803a <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1cd98:	68f8      	ldr	r0, [r7, #12]
   1cd9a:	40f0      	lsrs	r0, r6
   1cd9c:	f010 0001 	ands.w	r0, r0, #1
   1cda0:	d042      	beq.n	1ce28 <gpio_nrfx_pin_interrupt_configure+0x160>
		if (data->trig_edge & BIT(pin)) {
   1cda2:	6978      	ldr	r0, [r7, #20]
   1cda4:	40f0      	lsrs	r0, r6
   1cda6:	f010 0401 	ands.w	r4, r0, #1
   1cdaa:	d054      	beq.n	1ce56 <gpio_nrfx_pin_interrupt_configure+0x18e>
			if (data->double_edge & BIT(pin)) {
   1cdac:	69bb      	ldr	r3, [r7, #24]
   1cdae:	40f3      	lsrs	r3, r6
   1cdb0:	07db      	lsls	r3, r3, #31
   1cdb2:	d44b      	bmi.n	1ce4c <gpio_nrfx_pin_interrupt_configure+0x184>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1cdb4:	693b      	ldr	r3, [r7, #16]
   1cdb6:	fa23 f606 	lsr.w	r6, r3, r6
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   1cdba:	f016 0f01 	tst.w	r6, #1
   1cdbe:	bf14      	ite	ne
   1cdc0:	2401      	movne	r4, #1
   1cdc2:	2402      	moveq	r4, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1cdc4:	a801      	add	r0, sp, #4
   1cdc6:	f001 f845 	bl	1de54 <nrfx_gpiote_channel_alloc>
   1cdca:	4b2c      	ldr	r3, [pc, #176]	; (1ce7c <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   1cdcc:	4298      	cmp	r0, r3
   1cdce:	d13f      	bne.n	1ce50 <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1cdd0:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1cdd4:	008b      	lsls	r3, r1, #2
   1cdd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cdda:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cdde:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1cde0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1cde4:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   1cde8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1cdec:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cdf0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1cdf4:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1cdf8:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   1cdfa:	008a      	lsls	r2, r1, #2
   1cdfc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ce00:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ce04:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ce08:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ce0a:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ce0e:	6010      	str	r0, [r2, #0]
   1ce10:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1ce12:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1ce16:	f042 0201 	orr.w	r2, r2, #1
   1ce1a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1ce1e:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   1ce20:	4a15      	ldr	r2, [pc, #84]	; (1ce78 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   1ce22:	408b      	lsls	r3, r1
   1ce24:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1ce28:	b003      	add	sp, #12
   1ce2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1ce2e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1ce32:	f47f af66 	bne.w	1cd02 <gpio_nrfx_pin_interrupt_configure+0x3a>
   1ce36:	2101      	movs	r1, #1
   1ce38:	fa01 f306 	lsl.w	r3, r1, r6
   1ce3c:	68e1      	ldr	r1, [r4, #12]
   1ce3e:	ea21 0103 	bic.w	r1, r1, r3
   1ce42:	e762      	b.n	1cd0a <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1ce44:	3001      	adds	r0, #1
   1ce46:	2808      	cmp	r0, #8
   1ce48:	d184      	bne.n	1cd54 <gpio_nrfx_pin_interrupt_configure+0x8c>
   1ce4a:	e7a1      	b.n	1cd90 <gpio_nrfx_pin_interrupt_configure+0xc8>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1ce4c:	2403      	movs	r4, #3
   1ce4e:	e7b9      	b.n	1cdc4 <gpio_nrfx_pin_interrupt_configure+0xfc>
		return -ENODEV;
   1ce50:	f06f 0012 	mvn.w	r0, #18
   1ce54:	e7e8      	b.n	1ce28 <gpio_nrfx_pin_interrupt_configure+0x160>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ce56:	693b      	ldr	r3, [r7, #16]
   1ce58:	fa23 f606 	lsr.w	r6, r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
   1ce5c:	f016 0f01 	tst.w	r6, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ce60:	4628      	mov	r0, r5
   1ce62:	bf0c      	ite	eq
   1ce64:	2103      	moveq	r1, #3
   1ce66:	2102      	movne	r1, #2
   1ce68:	f00b f8e7 	bl	2803a <nrf_gpio_cfg_sense_set>
	int res = 0;
   1ce6c:	4620      	mov	r0, r4
   1ce6e:	e7db      	b.n	1ce28 <gpio_nrfx_pin_interrupt_configure+0x160>
		return -ENOTSUP;
   1ce70:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1ce74:	e7d8      	b.n	1ce28 <gpio_nrfx_pin_interrupt_configure+0x160>
   1ce76:	bf00      	nop
   1ce78:	40006000 	.word	0x40006000
   1ce7c:	0bad0000 	.word	0x0bad0000

0001ce80 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ce80:	4b2e      	ldr	r3, [pc, #184]	; (1cf3c <gpio_nrfx_config+0xbc>)
   1ce82:	4013      	ands	r3, r2
   1ce84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
{
   1ce88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ce8a:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ce8c:	d045      	beq.n	1cf1a <gpio_nrfx_config+0x9a>
   1ce8e:	d808      	bhi.n	1cea2 <gpio_nrfx_config+0x22>
   1ce90:	2b02      	cmp	r3, #2
   1ce92:	d044      	beq.n	1cf1e <gpio_nrfx_config+0x9e>
   1ce94:	2b06      	cmp	r3, #6
   1ce96:	d044      	beq.n	1cf22 <gpio_nrfx_config+0xa2>
   1ce98:	2b00      	cmp	r3, #0
   1ce9a:	d042      	beq.n	1cf22 <gpio_nrfx_config+0xa2>
		return -EINVAL;
   1ce9c:	f06f 0015 	mvn.w	r0, #21
   1cea0:	e039      	b.n	1cf16 <gpio_nrfx_config+0x96>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1cea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1cea6:	d03e      	beq.n	1cf26 <gpio_nrfx_config+0xa6>
   1cea8:	d804      	bhi.n	1ceb4 <gpio_nrfx_config+0x34>
   1ceaa:	4c25      	ldr	r4, [pc, #148]	; (1cf40 <gpio_nrfx_config+0xc0>)
   1ceac:	42a3      	cmp	r3, r4
   1ceae:	d1f5      	bne.n	1ce9c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0D1;
   1ceb0:	2407      	movs	r4, #7
   1ceb2:	e006      	b.n	1cec2 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ceb4:	4c23      	ldr	r4, [pc, #140]	; (1cf44 <gpio_nrfx_config+0xc4>)
   1ceb6:	42a3      	cmp	r3, r4
   1ceb8:	d037      	beq.n	1cf2a <gpio_nrfx_config+0xaa>
   1ceba:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1cebe:	d1ed      	bne.n	1ce9c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0H1;
   1cec0:	2403      	movs	r4, #3
	if ((flags & GPIO_PULL_UP) != 0) {
   1cec2:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1cec4:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
   1cec8:	bf54      	ite	pl
   1ceca:	f3c2 1740 	ubfxpl	r7, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1cece:	2703      	movmi	r7, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ced0:	f3c3 2600 	ubfx	r6, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1ced4:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1ced6:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1ceda:	d507      	bpl.n	1ceec <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1cedc:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1cede:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1cee2:	d524      	bpl.n	1cf2e <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1cee4:	2301      	movs	r3, #1
   1cee6:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   1cee8:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1ceec:	7a03      	ldrb	r3, [r0, #8]
   1ceee:	f001 011f 	and.w	r1, r1, #31
   1cef2:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cef6:	a801      	add	r0, sp, #4
   1cef8:	9101      	str	r1, [sp, #4]
   1cefa:	f7ff fe91 	bl	1cc20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cefe:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1cf00:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   1cf04:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cf08:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1cf0c:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cf10:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   1cf14:	2000      	movs	r0, #0
}
   1cf16:	b003      	add	sp, #12
   1cf18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0S1;
   1cf1a:	2401      	movs	r4, #1
   1cf1c:	e7d1      	b.n	1cec2 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   1cf1e:	2404      	movs	r4, #4
   1cf20:	e7cf      	b.n	1cec2 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_S0S1;
   1cf22:	461c      	mov	r4, r3
   1cf24:	e7cd      	b.n	1cec2 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_S0H1;
   1cf26:	2402      	movs	r4, #2
   1cf28:	e7cb      	b.n	1cec2 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   1cf2a:	2405      	movs	r4, #5
   1cf2c:	e7c9      	b.n	1cec2 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1cf2e:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1cf30:	bf42      	ittt	mi
   1cf32:	2201      	movmi	r2, #1
   1cf34:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1cf36:	f8cc 250c 	strmi.w	r2, [ip, #1292]	; 0x50c
   1cf3a:	e7d7      	b.n	1ceec <gpio_nrfx_config+0x6c>
   1cf3c:	00f00006 	.word	0x00f00006
   1cf40:	00100006 	.word	0x00100006
   1cf44:	00400002 	.word	0x00400002

0001cf48 <gpiote_event_handler>:
{
   1cf48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1cf4a:	2600      	movs	r6, #0
   1cf4c:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cf50:	4d26      	ldr	r5, [pc, #152]	; (1cfec <gpiote_event_handler+0xa4>)
   1cf52:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
   1cf54:	b14c      	cbz	r4, 1cf6a <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   1cf56:	4826      	ldr	r0, [pc, #152]	; (1cff0 <gpiote_event_handler+0xa8>)
   1cf58:	f00b f882 	bl	28060 <check_level_trigger_pins>
		fired_triggers[0] =
   1cf5c:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   1cf5e:	4825      	ldr	r0, [pc, #148]	; (1cff4 <gpiote_event_handler+0xac>)
   1cf60:	f00b f87e 	bl	28060 <check_level_trigger_pins>
		fired_triggers[1] =
   1cf64:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cf66:	602e      	str	r6, [r5, #0]
   1cf68:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   1cf6a:	4d23      	ldr	r5, [pc, #140]	; (1cff8 <gpiote_event_handler+0xb0>)
{
   1cf6c:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1cf6e:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cf70:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1cf72:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1cf76:	fa06 f102 	lsl.w	r1, r6, r2
   1cf7a:	4219      	tst	r1, r3
   1cf7c:	d01b      	beq.n	1cfb6 <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cf7e:	0091      	lsls	r1, r2, #2
   1cf80:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1cf84:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1cf88:	680b      	ldr	r3, [r1, #0]
   1cf8a:	b1a3      	cbz	r3, 1cfb6 <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1cf8c:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1cf90:	af02      	add	r7, sp, #8
   1cf92:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cf96:	f8c1 c000 	str.w	ip, [r1]
   1cf9a:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1cf9e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1cfa2:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1cfa6:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1cfaa:	fa06 f303 	lsl.w	r3, r6, r3
   1cfae:	433b      	orrs	r3, r7
   1cfb0:	f840 3c08 	str.w	r3, [r0, #-8]
   1cfb4:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1cfb6:	3201      	adds	r2, #1
   1cfb8:	2a08      	cmp	r2, #8
   1cfba:	d1da      	bne.n	1cf72 <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
   1cfbc:	9a00      	ldr	r2, [sp, #0]
   1cfbe:	b11a      	cbz	r2, 1cfc8 <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
   1cfc0:	490b      	ldr	r1, [pc, #44]	; (1cff0 <gpiote_event_handler+0xa8>)
   1cfc2:	480e      	ldr	r0, [pc, #56]	; (1cffc <gpiote_event_handler+0xb4>)
   1cfc4:	f7ff fe04 	bl	1cbd0 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1cfc8:	9a01      	ldr	r2, [sp, #4]
   1cfca:	b11a      	cbz	r2, 1cfd4 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
   1cfcc:	4909      	ldr	r1, [pc, #36]	; (1cff4 <gpiote_event_handler+0xac>)
   1cfce:	480c      	ldr	r0, [pc, #48]	; (1d000 <gpiote_event_handler+0xb8>)
   1cfd0:	f7ff fdfe 	bl	1cbd0 <gpio_fire_callbacks>
	if (port_event) {
   1cfd4:	b144      	cbz	r4, 1cfe8 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1cfd6:	4806      	ldr	r0, [pc, #24]	; (1cff0 <gpiote_event_handler+0xa8>)
   1cfd8:	f00b f86b 	bl	280b2 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1cfdc:	4805      	ldr	r0, [pc, #20]	; (1cff4 <gpiote_event_handler+0xac>)
}
   1cfde:	b003      	add	sp, #12
   1cfe0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1cfe4:	f00b b865 	b.w	280b2 <cfg_level_pins>
}
   1cfe8:	b003      	add	sp, #12
   1cfea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cfec:	4000617c 	.word	0x4000617c
   1cff0:	20000e4c 	.word	0x20000e4c
   1cff4:	20000e5c 	.word	0x20000e5c
   1cff8:	40006000 	.word	0x40006000
   1cffc:	200041b0 	.word	0x200041b0
   1d000:	200041cc 	.word	0x200041cc

0001d004 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1d004:	4b02      	ldr	r3, [pc, #8]	; (1d010 <flash_nrf_pages_layout+0xc>)
   1d006:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1d008:	2301      	movs	r3, #1
   1d00a:	6013      	str	r3, [r2, #0]
}
   1d00c:	4770      	bx	lr
   1d00e:	bf00      	nop
   1d010:	200041e4 	.word	0x200041e4

0001d014 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1d014:	4800      	ldr	r0, [pc, #0]	; (1d018 <flash_nrf_get_parameters+0x4>)
   1d016:	4770      	bx	lr
   1d018:	00029a24 	.word	0x00029a24

0001d01c <flash_nrf_read>:
{
   1d01c:	b570      	push	{r4, r5, r6, lr}
   1d01e:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1d020:	4628      	mov	r0, r5
   1d022:	4619      	mov	r1, r3
{
   1d024:	4616      	mov	r6, r2
   1d026:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1d028:	f00b f86b 	bl	28102 <is_regular_addr_valid>
   1d02c:	b940      	cbnz	r0, 1d040 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d02e:	4809      	ldr	r0, [pc, #36]	; (1d054 <flash_nrf_read+0x38>)
   1d030:	4623      	mov	r3, r4
   1d032:	462a      	mov	r2, r5
   1d034:	2145      	movs	r1, #69	; 0x45
   1d036:	f004 ff48 	bl	21eca <printk>
   1d03a:	f06f 0015 	mvn.w	r0, #21
}
   1d03e:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1d040:	b134      	cbz	r4, 1d050 <flash_nrf_read+0x34>
	memcpy(data, (void *)addr, len);
   1d042:	4622      	mov	r2, r4
   1d044:	4629      	mov	r1, r5
   1d046:	4630      	mov	r0, r6
   1d048:	f007 f881 	bl	2414e <memcpy>
	return 0;
   1d04c:	2000      	movs	r0, #0
   1d04e:	e7f6      	b.n	1d03e <flash_nrf_read+0x22>
		return 0;
   1d050:	4620      	mov	r0, r4
   1d052:	e7f4      	b.n	1d03e <flash_nrf_read+0x22>
   1d054:	0002f94f 	.word	0x0002f94f

0001d058 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1d058:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d05a:	2201      	movs	r2, #1
   1d05c:	4611      	mov	r1, r2
   1d05e:	4807      	ldr	r0, [pc, #28]	; (1d07c <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d060:	4c07      	ldr	r4, [pc, #28]	; (1d080 <nrf_flash_init+0x28>)
   1d062:	f00b fb6d 	bl	28740 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1d066:	f000 fa27 	bl	1d4b8 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d06a:	f00b fac7 	bl	285fc <nrfx_nvmc_flash_page_count_get>
   1d06e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1d070:	f00b fac0 	bl	285f4 <nrfx_nvmc_flash_page_size_get>
   1d074:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1d076:	2000      	movs	r0, #0
   1d078:	bd10      	pop	{r4, pc}
   1d07a:	bf00      	nop
   1d07c:	200041ec 	.word	0x200041ec
   1d080:	200041e4 	.word	0x200041e4

0001d084 <nrf_power_pofcon_set.constprop.10>:
NRF_STATIC_INLINE void nrf_power_pofcon_set(NRF_POWER_Type *    p_reg,
   1d084:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(thr == (thr & (POWER_POFCON_THRESHOLD_Msk >> POWER_POFCON_THRESHOLD_Pos)));
   1d086:	f031 030f 	bics.w	r3, r1, #15
NRF_STATIC_INLINE void nrf_power_pofcon_set(NRF_POWER_Type *    p_reg,
   1d08a:	4605      	mov	r5, r0
   1d08c:	460c      	mov	r4, r1
    NRFX_ASSERT(thr == (thr & (POWER_POFCON_THRESHOLD_Msk >> POWER_POFCON_THRESHOLD_Pos)));
   1d08e:	d00a      	beq.n	1d0a6 <nrf_power_pofcon_set.constprop.10+0x22>
   1d090:	490b      	ldr	r1, [pc, #44]	; (1d0c0 <nrf_power_pofcon_set.constprop.10+0x3c>)
   1d092:	480c      	ldr	r0, [pc, #48]	; (1d0c4 <nrf_power_pofcon_set.constprop.10+0x40>)
   1d094:	f240 32e7 	movw	r2, #999	; 0x3e7
   1d098:	f004 ff17 	bl	21eca <printk>
   1d09c:	f240 31e7 	movw	r1, #999	; 0x3e7
   1d0a0:	4807      	ldr	r0, [pc, #28]	; (1d0c0 <nrf_power_pofcon_set.constprop.10+0x3c>)
   1d0a2:	f005 f9c4 	bl	2242e <assert_post_action>
    uint32_t pofcon = p_reg->POFCON;
   1d0a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d0aa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1d0ae:	f021 011f 	bic.w	r1, r1, #31
   1d0b2:	4329      	orrs	r1, r5
    pofcon |=
   1d0b4:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    p_reg->POFCON = pofcon;
   1d0b8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
}
   1d0bc:	bd38      	pop	{r3, r4, r5, pc}
   1d0be:	bf00      	nop
   1d0c0:	0002f994 	.word	0x0002f994
   1d0c4:	0002a026 	.word	0x0002a026

0001d0c8 <restore_pofwarn.part.2>:
	}

	return 0;
}

static void restore_pofwarn(void)
   1d0c8:	b508      	push	{r3, lr}
    uint32_t pofcon = p_reg->POFCON;
   1d0ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1d0ce:	2001      	movs	r0, #1
   1d0d0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1d0d4:	f3c1 0143 	ubfx	r1, r1, #1, #4
   1d0d8:	f7ff ffd4 	bl	1d084 <nrf_power_pofcon_set.constprop.10>
		pofcon_enabled = false;
   1d0dc:	4b01      	ldr	r3, [pc, #4]	; (1d0e4 <restore_pofwarn.part.2+0x1c>)
   1d0de:	2200      	movs	r2, #0
   1d0e0:	701a      	strb	r2, [r3, #0]
	}
}
   1d0e2:	bd08      	pop	{r3, pc}
   1d0e4:	2000456d 	.word	0x2000456d

0001d0e8 <suspend_pofwarn.part.1>:
   1d0e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
static int suspend_pofwarn(void)
   1d0ec:	b510      	push	{r4, lr}
   1d0ee:	f8d3 4510 	ldr.w	r4, [r3, #1296]	; 0x510
	if (enabled) {
   1d0f2:	f014 0001 	ands.w	r0, r4, #1
   1d0f6:	d00e      	beq.n	1d116 <suspend_pofwarn.part.1+0x2e>
    return (nrf_power_pof_thr_t)((pofcon & POWER_POFCON_THRESHOLD_Msk) >>
   1d0f8:	f3c4 0443 	ubfx	r4, r4, #1, #4
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);
   1d0fc:	2000      	movs	r0, #0
   1d0fe:	4621      	mov	r1, r4
   1d100:	f7ff ffc0 	bl	1d084 <nrf_power_pofcon_set.constprop.10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d104:	4b06      	ldr	r3, [pc, #24]	; (1d120 <suspend_pofwarn.part.1+0x38>)
   1d106:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1d108:	b130      	cbz	r0, 1d118 <suspend_pofwarn.part.1+0x30>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1d10a:	2001      	movs	r0, #1
   1d10c:	4621      	mov	r1, r4
   1d10e:	f7ff ffb9 	bl	1d084 <nrf_power_pofcon_set.constprop.10>
			return -ECANCELED;
   1d112:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   1d116:	bd10      	pop	{r4, pc}
		pofcon_enabled = enabled;
   1d118:	4b02      	ldr	r3, [pc, #8]	; (1d124 <suspend_pofwarn.part.1+0x3c>)
   1d11a:	2201      	movs	r2, #1
   1d11c:	701a      	strb	r2, [r3, #0]
   1d11e:	e7fa      	b.n	1d116 <suspend_pofwarn.part.1+0x2e>
   1d120:	40000108 	.word	0x40000108
   1d124:	2000456d 	.word	0x2000456d

0001d128 <erase_op>:
{
   1d128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d12c:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d12e:	f00b fa61 	bl	285f4 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1d132:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d134:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
   1d136:	b10b      	cbz	r3, 1d13c <erase_op+0x14>
		nrf_flash_sync_get_timestamp_begin();
   1d138:	f000 f9d0 	bl	1d4dc <nrf_flash_sync_get_timestamp_begin>
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d13c:	4f16      	ldr	r7, [pc, #88]	; (1d198 <erase_op+0x70>)
	if (pofcon_enabled) {
   1d13e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1d19c <erase_op+0x74>
{
   1d142:	2500      	movs	r5, #0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1d144:	683b      	ldr	r3, [r7, #0]
   1d146:	2b08      	cmp	r3, #8
   1d148:	d019      	beq.n	1d17e <erase_op+0x56>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1d14a:	6860      	ldr	r0, [r4, #4]
   1d14c:	f000 fec4 	bl	1ded8 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1d150:	68a3      	ldr	r3, [r4, #8]
   1d152:	1b9b      	subs	r3, r3, r6
   1d154:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1d156:	6863      	ldr	r3, [r4, #4]
   1d158:	4433      	add	r3, r6
   1d15a:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   1d15c:	f898 3000 	ldrb.w	r3, [r8]
   1d160:	b10b      	cbz	r3, 1d166 <erase_op+0x3e>
   1d162:	f7ff ffb1 	bl	1d0c8 <restore_pofwarn.part.2>
		if (e_ctx->enable_time_limit) {
   1d166:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1d168:	3501      	adds	r5, #1
		if (e_ctx->enable_time_limit) {
   1d16a:	b97b      	cbnz	r3, 1d18c <erase_op+0x64>
	} while (e_ctx->len > 0);
   1d16c:	68a3      	ldr	r3, [r4, #8]
   1d16e:	2b00      	cmp	r3, #0
   1d170:	d1e8      	bne.n	1d144 <erase_op+0x1c>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1d172:	68a0      	ldr	r0, [r4, #8]
   1d174:	3000      	adds	r0, #0
   1d176:	bf18      	it	ne
   1d178:	2001      	movne	r0, #1
}
   1d17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                switch(var2)
   1d17e:	f7ff ffb3 	bl	1d0e8 <suspend_pofwarn.part.1>
		if (SUSPEND_POFWARN()) {
   1d182:	2800      	cmp	r0, #0
   1d184:	d0e1      	beq.n	1d14a <erase_op+0x22>
			return -ECANCELED;
   1d186:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1d18a:	e7f6      	b.n	1d17a <erase_op+0x52>
			if (nrf_flash_sync_check_time_limit(i)) {
   1d18c:	4628      	mov	r0, r5
   1d18e:	f7e4 faab 	bl	16e8 <nrf_flash_sync_check_time_limit>
   1d192:	2800      	cmp	r0, #0
   1d194:	d0ea      	beq.n	1d16c <erase_op+0x44>
   1d196:	e7ec      	b.n	1d172 <erase_op+0x4a>
   1d198:	10000130 	.word	0x10000130
   1d19c:	2000456d 	.word	0x2000456d

0001d1a0 <flash_nrf_erase>:
{
   1d1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1a2:	b087      	sub	sp, #28
   1d1a4:	460e      	mov	r6, r1
   1d1a6:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d1a8:	f00b fa24 	bl	285f4 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1d1ac:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d1ae:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1d1b0:	4630      	mov	r0, r6
   1d1b2:	f00a ffa6 	bl	28102 <is_regular_addr_valid>
   1d1b6:	b358      	cbz	r0, 1d210 <flash_nrf_erase+0x70>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1d1b8:	fbb6 f3f7 	udiv	r3, r6, r7
   1d1bc:	fb07 6313 	mls	r3, r7, r3, r6
   1d1c0:	b923      	cbnz	r3, 1d1cc <flash_nrf_erase+0x2c>
   1d1c2:	fbb5 f4f7 	udiv	r4, r5, r7
   1d1c6:	fb07 5414 	mls	r4, r7, r4, r5
   1d1ca:	b154      	cbz	r4, 1d1e2 <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1d1cc:	481f      	ldr	r0, [pc, #124]	; (1d24c <flash_nrf_erase+0xac>)
   1d1ce:	462b      	mov	r3, r5
   1d1d0:	4632      	mov	r2, r6
   1d1d2:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d1d4:	f004 fe79 	bl	21eca <printk>
		return -EINVAL;
   1d1d8:	f06f 0415 	mvn.w	r4, #21
}
   1d1dc:	4620      	mov	r0, r4
   1d1de:	b007      	add	sp, #28
   1d1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1d1e2:	42bd      	cmp	r5, r7
   1d1e4:	d3fa      	bcc.n	1d1dc <flash_nrf_erase+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1d1e6:	f04f 33ff 	mov.w	r3, #4294967295
   1d1ea:	f04f 32ff 	mov.w	r2, #4294967295
   1d1ee:	4818      	ldr	r0, [pc, #96]	; (1d250 <flash_nrf_erase+0xb0>)
   1d1f0:	f002 fd80 	bl	1fcf4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1d1f4:	f00a ff98 	bl	28128 <nrf_flash_sync_is_required>
   1d1f8:	ab02      	add	r3, sp, #8
   1d1fa:	4601      	mov	r1, r0
   1d1fc:	b968      	cbnz	r0, 1d21a <flash_nrf_erase+0x7a>
	struct flash_context context = {
   1d1fe:	2210      	movs	r2, #16
   1d200:	4618      	mov	r0, r3
   1d202:	f006 ffce 	bl	241a2 <memset>
   1d206:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   1d20a:	f7ff ff8d 	bl	1d128 <erase_op>
   1d20e:	e017      	b.n	1d240 <flash_nrf_erase+0xa0>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d210:	462b      	mov	r3, r5
   1d212:	4632      	mov	r2, r6
   1d214:	2145      	movs	r1, #69	; 0x45
   1d216:	480f      	ldr	r0, [pc, #60]	; (1d254 <flash_nrf_erase+0xb4>)
   1d218:	e7dc      	b.n	1d1d4 <flash_nrf_erase+0x34>
	struct flash_context context = {
   1d21a:	2210      	movs	r2, #16
   1d21c:	4621      	mov	r1, r4
   1d21e:	4618      	mov	r0, r3
   1d220:	f006 ffbf 	bl	241a2 <memset>
   1d224:	2201      	movs	r2, #1
   1d226:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1d22a:	4a0b      	ldr	r2, [pc, #44]	; (1d258 <flash_nrf_erase+0xb8>)
   1d22c:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1d230:	480a      	ldr	r0, [pc, #40]	; (1d25c <flash_nrf_erase+0xbc>)
	struct flash_context context = {
   1d232:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1d236:	f000 f949 	bl	1d4cc <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1d23a:	4668      	mov	r0, sp
   1d23c:	f7e4 f9d8 	bl	15f0 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1d240:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1d242:	4803      	ldr	r0, [pc, #12]	; (1d250 <flash_nrf_erase+0xb0>)
   1d244:	f002 fd1a 	bl	1fc7c <z_impl_k_sem_give>
   1d248:	e7c8      	b.n	1d1dc <flash_nrf_erase+0x3c>
   1d24a:	bf00      	nop
   1d24c:	0002f92b 	.word	0x0002f92b
   1d250:	200041ec 	.word	0x200041ec
   1d254:	0002f94f 	.word	0x0002f94f
   1d258:	0001d129 	.word	0x0001d129
   1d25c:	00015e64 	.word	0x00015e64

0001d260 <write_op>:
{
   1d260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (w_ctx->enable_time_limit) {
   1d262:	7b03      	ldrb	r3, [r0, #12]
{
   1d264:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1d266:	b10b      	cbz	r3, 1d26c <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1d268:	f000 f938 	bl	1d4dc <nrf_flash_sync_get_timestamp_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d26c:	4e1c      	ldr	r6, [pc, #112]	; (1d2e0 <write_op+0x80>)
	if (pofcon_enabled) {
   1d26e:	4f1d      	ldr	r7, [pc, #116]	; (1d2e4 <write_op+0x84>)
{
   1d270:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1d272:	68a3      	ldr	r3, [r4, #8]
   1d274:	2b03      	cmp	r3, #3
   1d276:	d806      	bhi.n	1d286 <write_op+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1d278:	4a1b      	ldr	r2, [pc, #108]	; (1d2e8 <write_op+0x88>)
   1d27a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d27e:	07db      	lsls	r3, r3, #31
   1d280:	d5fb      	bpl.n	1d27a <write_op+0x1a>
	return FLASH_OP_DONE;
   1d282:	2000      	movs	r0, #0
}
   1d284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (var1 == 0x08)
   1d286:	6833      	ldr	r3, [r6, #0]
   1d288:	2b08      	cmp	r3, #8
   1d28a:	d021      	beq.n	1d2d0 <write_op+0x70>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1d28c:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1d28e:	6860      	ldr	r0, [r4, #4]
   1d290:	6819      	ldr	r1, [r3, #0]
   1d292:	f000 fe55 	bl	1df40 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   1d296:	783b      	ldrb	r3, [r7, #0]
   1d298:	b10b      	cbz	r3, 1d29e <write_op+0x3e>
   1d29a:	f7ff ff15 	bl	1d0c8 <restore_pofwarn.part.2>
	w_ctx->flash_addr += shift;
   1d29e:	6863      	ldr	r3, [r4, #4]
   1d2a0:	3304      	adds	r3, #4
   1d2a2:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1d2a4:	6823      	ldr	r3, [r4, #0]
   1d2a6:	3304      	adds	r3, #4
   1d2a8:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1d2aa:	68a3      	ldr	r3, [r4, #8]
   1d2ac:	3b04      	subs	r3, #4
   1d2ae:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1d2b0:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1d2b2:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1d2b4:	2b00      	cmp	r3, #0
   1d2b6:	d0dc      	beq.n	1d272 <write_op+0x12>
			if (nrf_flash_sync_check_time_limit(i)) {
   1d2b8:	4628      	mov	r0, r5
   1d2ba:	f7e4 fa15 	bl	16e8 <nrf_flash_sync_check_time_limit>
   1d2be:	2800      	cmp	r0, #0
   1d2c0:	d0d7      	beq.n	1d272 <write_op+0x12>
   1d2c2:	4a09      	ldr	r2, [pc, #36]	; (1d2e8 <write_op+0x88>)
   1d2c4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d2c8:	07d9      	lsls	r1, r3, #31
   1d2ca:	d5fb      	bpl.n	1d2c4 <write_op+0x64>
				return FLASH_OP_ONGOING;
   1d2cc:	2001      	movs	r0, #1
   1d2ce:	e7d9      	b.n	1d284 <write_op+0x24>
                switch(var2)
   1d2d0:	f7ff ff0a 	bl	1d0e8 <suspend_pofwarn.part.1>
		if (SUSPEND_POFWARN()) {
   1d2d4:	2800      	cmp	r0, #0
   1d2d6:	d0d9      	beq.n	1d28c <write_op+0x2c>
			return -ECANCELED;
   1d2d8:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1d2dc:	e7d2      	b.n	1d284 <write_op+0x24>
   1d2de:	bf00      	nop
   1d2e0:	10000130 	.word	0x10000130
   1d2e4:	2000456d 	.word	0x2000456d
   1d2e8:	4001e000 	.word	0x4001e000

0001d2ec <flash_nrf_write>:
{
   1d2ec:	b570      	push	{r4, r5, r6, lr}
   1d2ee:	460d      	mov	r5, r1
   1d2f0:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1d2f2:	4619      	mov	r1, r3
   1d2f4:	4628      	mov	r0, r5
{
   1d2f6:	4616      	mov	r6, r2
   1d2f8:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1d2fa:	f00a ff02 	bl	28102 <is_regular_addr_valid>
   1d2fe:	b950      	cbnz	r0, 1d316 <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d300:	481d      	ldr	r0, [pc, #116]	; (1d378 <flash_nrf_write+0x8c>)
   1d302:	4623      	mov	r3, r4
   1d304:	462a      	mov	r2, r5
   1d306:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1d308:	f004 fddf 	bl	21eca <printk>
		return -EINVAL;
   1d30c:	f06f 0415 	mvn.w	r4, #21
}
   1d310:	4620      	mov	r0, r4
   1d312:	b006      	add	sp, #24
   1d314:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1d316:	ea44 0305 	orr.w	r3, r4, r5
   1d31a:	079b      	lsls	r3, r3, #30
   1d31c:	d004      	beq.n	1d328 <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1d31e:	4623      	mov	r3, r4
   1d320:	462a      	mov	r2, r5
   1d322:	2145      	movs	r1, #69	; 0x45
   1d324:	4815      	ldr	r0, [pc, #84]	; (1d37c <flash_nrf_write+0x90>)
   1d326:	e7ef      	b.n	1d308 <flash_nrf_write+0x1c>
	if (!len) {
   1d328:	2c00      	cmp	r4, #0
   1d32a:	d0f1      	beq.n	1d310 <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
   1d32c:	f04f 33ff 	mov.w	r3, #4294967295
   1d330:	f04f 32ff 	mov.w	r2, #4294967295
   1d334:	4812      	ldr	r0, [pc, #72]	; (1d380 <flash_nrf_write+0x94>)
   1d336:	f002 fcdd 	bl	1fcf4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1d33a:	f00a fef5 	bl	28128 <nrf_flash_sync_is_required>
   1d33e:	ab02      	add	r3, sp, #8
	struct flash_context context = {
   1d340:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1d344:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1d346:	b188      	cbz	r0, 1d36c <flash_nrf_write+0x80>
	struct flash_context context = {
   1d348:	2201      	movs	r2, #1
   1d34a:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1d34e:	4a0d      	ldr	r2, [pc, #52]	; (1d384 <flash_nrf_write+0x98>)
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1d350:	f641 504c 	movw	r0, #7500	; 0x1d4c
	struct flash_op_desc flash_op_desc = {
   1d354:	e9cd 2300 	strd	r2, r3, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1d358:	f000 f8b8 	bl	1d4cc <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1d35c:	4668      	mov	r0, sp
   1d35e:	f7e4 f947 	bl	15f0 <nrf_flash_sync_exe>
	return write_op(&context);
   1d362:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1d364:	4806      	ldr	r0, [pc, #24]	; (1d380 <flash_nrf_write+0x94>)
   1d366:	f002 fc89 	bl	1fc7c <z_impl_k_sem_give>
	return ret;
   1d36a:	e7d1      	b.n	1d310 <flash_nrf_write+0x24>
	struct flash_context context = {
   1d36c:	f88d 0014 	strb.w	r0, [sp, #20]
	return write_op(&context);
   1d370:	4618      	mov	r0, r3
   1d372:	f7ff ff75 	bl	1d260 <write_op>
   1d376:	e7f4      	b.n	1d362 <flash_nrf_write+0x76>
   1d378:	0002f94f 	.word	0x0002f94f
   1d37c:	0002f971 	.word	0x0002f971
   1d380:	200041ec 	.word	0x200041ec
   1d384:	0001d261 	.word	0x0001d261

0001d388 <_ticker_stop>:
{
   1d388:	b513      	push	{r0, r1, r4, lr}
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1d38a:	2300      	movs	r3, #0
   1d38c:	9300      	str	r3, [sp, #0]
   1d38e:	f7f9 f8b5 	bl	164fc <ticker_stop>
	if (ret != TICKER_STATUS_SUCCESS &&
   1d392:	f030 0302 	bics.w	r3, r0, #2
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1d396:	4604      	mov	r4, r0
	if (ret != TICKER_STATUS_SUCCESS &&
   1d398:	d008      	beq.n	1d3ac <_ticker_stop+0x24>
		__ASSERT(0, "Failed to stop ticker.\n");
   1d39a:	4906      	ldr	r1, [pc, #24]	; (1d3b4 <_ticker_stop+0x2c>)
   1d39c:	4806      	ldr	r0, [pc, #24]	; (1d3b8 <_ticker_stop+0x30>)
   1d39e:	2230      	movs	r2, #48	; 0x30
   1d3a0:	f004 fd93 	bl	21eca <printk>
   1d3a4:	2130      	movs	r1, #48	; 0x30
   1d3a6:	4803      	ldr	r0, [pc, #12]	; (1d3b4 <_ticker_stop+0x2c>)
   1d3a8:	f005 f841 	bl	2242e <assert_post_action>
}
   1d3ac:	4620      	mov	r0, r4
   1d3ae:	b002      	add	sp, #8
   1d3b0:	bd10      	pop	{r4, pc}
   1d3b2:	bf00      	nop
   1d3b4:	0002f9d2 	.word	0x0002f9d2
   1d3b8:	0002a026 	.word	0x0002a026

0001d3bc <time_slot_delay>:
{
   1d3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d3c0:	b08c      	sub	sp, #48	; 0x30
   1d3c2:	4605      	mov	r5, r0
   1d3c4:	460e      	mov	r6, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1d3c6:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1d3ca:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   1d3ce:	4617      	mov	r7, r2
   1d3d0:	4698      	mov	r8, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1d3d2:	f009 ffc7 	bl	27364 <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   1d3d6:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   1d3da:	9600      	str	r6, [sp, #0]
   1d3dc:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   1d3de:	3101      	adds	r1, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   1d3e0:	462b      	mov	r3, r5
   1d3e2:	b2ca      	uxtb	r2, r1
   1d3e4:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1d3e8:	e9cd 7805 	strd	r7, r8, [sp, #20]
   1d3ec:	e9cd 4403 	strd	r4, r4, [sp, #12]
   1d3f0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1d3f4:	4621      	mov	r1, r4
   1d3f6:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1d3fa:	f009 fef3 	bl	271e4 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1d3fe:	f030 0302 	bics.w	r3, r0, #2
   1d402:	d00b      	beq.n	1d41c <time_slot_delay+0x60>
		_ticker_sync_context.result = 0;
   1d404:	4b07      	ldr	r3, [pc, #28]	; (1d424 <time_slot_delay+0x68>)
		_ticker_stop(instance_index, 0, ticker_id);
   1d406:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1d40a:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
		_ticker_sync_context.result = 0;
   1d40e:	60dc      	str	r4, [r3, #12]
		_ticker_stop(instance_index, 0, ticker_id);
   1d410:	4621      	mov	r1, r4
   1d412:	f7ff ffb9 	bl	1d388 <_ticker_stop>
   1d416:	4804      	ldr	r0, [pc, #16]	; (1d428 <time_slot_delay+0x6c>)
   1d418:	f002 fc30 	bl	1fc7c <z_impl_k_sem_give>
}
   1d41c:	b00c      	add	sp, #48	; 0x30
   1d41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d422:	bf00      	nop
   1d424:	20004204 	.word	0x20004204
   1d428:	20004214 	.word	0x20004214

0001d42c <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   1d42c:	4a01      	ldr	r2, [pc, #4]	; (1d434 <time_slot_callback_prepare+0x8>)
   1d42e:	2131      	movs	r1, #49	; 0x31
   1d430:	f7ff bfc4 	b.w	1d3bc <time_slot_delay>
   1d434:	0001d439 	.word	0x0001d439

0001d438 <time_slot_callback_abort>:
{
   1d438:	b570      	push	{r4, r5, r6, lr}
   1d43a:	4604      	mov	r4, r0
   1d43c:	461d      	mov	r5, r3
	ll_radio_state_abort();
   1d43e:	f7fa fc75 	bl	17d2c <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   1d442:	462b      	mov	r3, r5
   1d444:	4620      	mov	r0, r4
   1d446:	4a03      	ldr	r2, [pc, #12]	; (1d454 <time_slot_callback_abort+0x1c>)
   1d448:	2106      	movs	r1, #6
}
   1d44a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   1d44e:	f7ff bfb5 	b.w	1d3bc <time_slot_delay>
   1d452:	bf00      	nop
   1d454:	0001d459 	.word	0x0001d459

0001d458 <time_slot_callback_work>:
{
   1d458:	b513      	push	{r0, r1, r4, lr}
   1d45a:	461c      	mov	r4, r3
	__ASSERT(ll_radio_state_is_idle(),
   1d45c:	f009 ff87 	bl	2736e <ll_radio_state_is_idle>
   1d460:	b940      	cbnz	r0, 1d474 <time_slot_callback_work+0x1c>
   1d462:	4911      	ldr	r1, [pc, #68]	; (1d4a8 <time_slot_callback_work+0x50>)
   1d464:	4811      	ldr	r0, [pc, #68]	; (1d4ac <time_slot_callback_work+0x54>)
   1d466:	2240      	movs	r2, #64	; 0x40
   1d468:	f004 fd2f 	bl	21eca <printk>
   1d46c:	2140      	movs	r1, #64	; 0x40
   1d46e:	480e      	ldr	r0, [pc, #56]	; (1d4a8 <time_slot_callback_work+0x50>)
   1d470:	f004 ffdd 	bl	2242e <assert_post_action>
	rc = op_desc->handler(op_desc->context);
   1d474:	e9d4 3000 	ldrd	r3, r0, [r4]
   1d478:	4798      	blx	r3
	if (rc != FLASH_OP_ONGOING) {
   1d47a:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   1d47c:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   1d47e:	d011      	beq.n	1d4a4 <time_slot_callback_work+0x4c>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1d480:	f10d 0107 	add.w	r1, sp, #7
   1d484:	f10d 0006 	add.w	r0, sp, #6
   1d488:	f009 ff6c 	bl	27364 <ll_timeslice_ticker_id_get>
		_ticker_stop(instance_index, 0, ticker_id);
   1d48c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1d490:	f89d 0006 	ldrb.w	r0, [sp, #6]
   1d494:	2100      	movs	r1, #0
   1d496:	f7ff ff77 	bl	1d388 <_ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   1d49a:	4b05      	ldr	r3, [pc, #20]	; (1d4b0 <time_slot_callback_work+0x58>)
   1d49c:	60dc      	str	r4, [r3, #12]
   1d49e:	4805      	ldr	r0, [pc, #20]	; (1d4b4 <time_slot_callback_work+0x5c>)
   1d4a0:	f002 fbec 	bl	1fc7c <z_impl_k_sem_give>
}
   1d4a4:	b002      	add	sp, #8
   1d4a6:	bd10      	pop	{r4, pc}
   1d4a8:	0002f9d2 	.word	0x0002f9d2
   1d4ac:	0002a026 	.word	0x0002a026
   1d4b0:	20004204 	.word	0x20004204
   1d4b4:	20004214 	.word	0x20004214

0001d4b8 <nrf_flash_sync_init>:
{
   1d4b8:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d4ba:	2201      	movs	r2, #1
   1d4bc:	2100      	movs	r1, #0
   1d4be:	4802      	ldr	r0, [pc, #8]	; (1d4c8 <nrf_flash_sync_init+0x10>)
   1d4c0:	f00b f93e 	bl	28740 <z_impl_k_sem_init>
}
   1d4c4:	2000      	movs	r0, #0
   1d4c6:	bd08      	pop	{r3, pc}
   1d4c8:	20004214 	.word	0x20004214

0001d4cc <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   1d4cc:	4b02      	ldr	r3, [pc, #8]	; (1d4d8 <nrf_flash_sync_set_context+0xc>)
   1d4ce:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   1d4d2:	e9c3 2000 	strd	r2, r0, [r3]
}
   1d4d6:	4770      	bx	lr
   1d4d8:	20004204 	.word	0x20004204

0001d4dc <nrf_flash_sync_get_timestamp_begin>:
{
   1d4dc:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   1d4de:	f009 feb4 	bl	2724a <ticker_ticks_now_get>
   1d4e2:	4b01      	ldr	r3, [pc, #4]	; (1d4e8 <nrf_flash_sync_get_timestamp_begin+0xc>)
   1d4e4:	6098      	str	r0, [r3, #8]
}
   1d4e6:	bd08      	pop	{r3, pc}
   1d4e8:	20004204 	.word	0x20004204

0001d4ec <random_byte_get>:
	__asm__ volatile(
   1d4ec:	f04f 0320 	mov.w	r3, #32
   1d4f0:	f3ef 8211 	mrs	r2, BASEPRI
   1d4f4:	f383 8811 	msr	BASEPRI, r3
   1d4f8:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1d4fc:	4b08      	ldr	r3, [pc, #32]	; (1d520 <random_byte_get+0x34>)
   1d4fe:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1d500:	b159      	cbz	r1, 1d51a <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1d502:	4908      	ldr	r1, [pc, #32]	; (1d524 <random_byte_get+0x38>)
   1d504:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d508:	2100      	movs	r1, #0
   1d50a:	6019      	str	r1, [r3, #0]
   1d50c:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1d50e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1d510:	f382 8811 	msr	BASEPRI, r2
   1d514:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1d518:	4770      	bx	lr
	int retval = -EAGAIN;
   1d51a:	f06f 000a 	mvn.w	r0, #10
   1d51e:	e7f7      	b.n	1d510 <random_byte_get+0x24>
   1d520:	4000d100 	.word	0x4000d100
   1d524:	4000d000 	.word	0x4000d000

0001d528 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1d528:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t last  = rngp->last;
   1d52a:	7883      	ldrb	r3, [r0, #2]
	uint32_t mask  = rngp->mask;
   1d52c:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1d52e:	f04f 0420 	mov.w	r4, #32
   1d532:	f3ef 8e11 	mrs	lr, BASEPRI
   1d536:	f384 8811 	msr	BASEPRI, r4
   1d53a:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1d53e:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1d540:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   1d544:	1b9b      	subs	r3, r3, r6
   1d546:	403b      	ands	r3, r7
	if (available < len) {
   1d548:	429a      	cmp	r2, r3
		len = available;
   1d54a:	bf88      	it	hi
   1d54c:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1d54e:	18b4      	adds	r4, r6, r2
   1d550:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   1d552:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1d554:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
   1d556:	f38e 8811 	msr	BASEPRI, lr
   1d55a:	f3bf 8f6f 	isb	sy
   1d55e:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1d560:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   1d562:	42a2      	cmp	r2, r4
   1d564:	d11a      	bne.n	1d59c <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1d566:	4566      	cmp	r6, ip
   1d568:	d10d      	bne.n	1d586 <rng_pool_get+0x5e>
	__asm__ volatile(
   1d56a:	f04f 0520 	mov.w	r5, #32
   1d56e:	f3ef 8211 	mrs	r2, BASEPRI
   1d572:	f385 8811 	msr	BASEPRI, r5
   1d576:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1d57a:	7805      	ldrb	r5, [r0, #0]
   1d57c:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
   1d57e:	f382 8811 	msr	BASEPRI, r2
   1d582:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1d586:	1a64      	subs	r4, r4, r1
   1d588:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   1d58a:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   1d58c:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   1d58e:	42a1      	cmp	r1, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1d590:	bf22      	ittt	cs
   1d592:	4b07      	ldrcs	r3, [pc, #28]	; (1d5b0 <rng_pool_get+0x88>)
   1d594:	2101      	movcs	r1, #1
   1d596:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1d598:	4610      	mov	r0, r2
   1d59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1d59c:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   1d5a0:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1d5a2:	f89e e005 	ldrb.w	lr, [lr, #5]
   1d5a6:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   1d5aa:	403d      	ands	r5, r7
   1d5ac:	e7d9      	b.n	1d562 <rng_pool_get+0x3a>
   1d5ae:	bf00      	nop
   1d5b0:	4000d000 	.word	0x4000d000

0001d5b4 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1d5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d5b8:	4614      	mov	r4, r2
   1d5ba:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1d5bc:	68c2      	ldr	r2, [r0, #12]
   1d5be:	4b2c      	ldr	r3, [pc, #176]	; (1d670 <entropy_nrf5_get_entropy_isr+0xbc>)
   1d5c0:	429a      	cmp	r2, r3
{
   1d5c2:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1d5c4:	d00a      	beq.n	1d5dc <entropy_nrf5_get_entropy_isr+0x28>
   1d5c6:	492b      	ldr	r1, [pc, #172]	; (1d674 <entropy_nrf5_get_entropy_isr+0xc0>)
   1d5c8:	482b      	ldr	r0, [pc, #172]	; (1d678 <entropy_nrf5_get_entropy_isr+0xc4>)
   1d5ca:	f44f 7284 	mov.w	r2, #264	; 0x108
   1d5ce:	f004 fc7c 	bl	21eca <printk>
   1d5d2:	f44f 7184 	mov.w	r1, #264	; 0x108
   1d5d6:	4827      	ldr	r0, [pc, #156]	; (1d674 <entropy_nrf5_get_entropy_isr+0xc0>)
   1d5d8:	f004 ff29 	bl	2242e <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1d5dc:	07eb      	lsls	r3, r5, #31
   1d5de:	d406      	bmi.n	1d5ee <entropy_nrf5_get_entropy_isr+0x3a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1d5e0:	4622      	mov	r2, r4
   1d5e2:	4641      	mov	r1, r8
   1d5e4:	4825      	ldr	r0, [pc, #148]	; (1d67c <entropy_nrf5_get_entropy_isr+0xc8>)
   1d5e6:	f7ff ff9f 	bl	1d528 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1d5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1d5ee:	2c00      	cmp	r4, #0
   1d5f0:	d035      	beq.n	1d65e <entropy_nrf5_get_entropy_isr+0xaa>
	__asm__ volatile(
   1d5f2:	f04f 0320 	mov.w	r3, #32
   1d5f6:	f3ef 8511 	mrs	r5, BASEPRI
   1d5fa:	f383 8811 	msr	BASEPRI, r3
   1d5fe:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1d602:	200d      	movs	r0, #13
   1d604:	f7e7 f916 	bl	4834 <arch_irq_is_enabled>
   1d608:	4681      	mov	r9, r0
		irq_disable(IRQN);
   1d60a:	200d      	movs	r0, #13
   1d60c:	f7e7 f8fe 	bl	480c <arch_irq_disable>
	__asm__ volatile(
   1d610:	f385 8811 	msr	BASEPRI, r5
   1d614:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d618:	4919      	ldr	r1, [pc, #100]	; (1d680 <entropy_nrf5_get_entropy_isr+0xcc>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d61a:	4e1a      	ldr	r6, [pc, #104]	; (1d684 <entropy_nrf5_get_entropy_isr+0xd0>)
   1d61c:	2300      	movs	r3, #0
   1d61e:	600b      	str	r3, [r1, #0]
   1d620:	680b      	ldr	r3, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1d622:	4b19      	ldr	r3, [pc, #100]	; (1d688 <entropy_nrf5_get_entropy_isr+0xd4>)
   1d624:	2201      	movs	r2, #1
   1d626:	f44f 5700 	mov.w	r7, #8192	; 0x2000
   1d62a:	601a      	str	r2, [r3, #0]
   1d62c:	4625      	mov	r5, r4
   1d62e:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1d632:	468a      	mov	sl, r1
   1d634:	f8da 3000 	ldr.w	r3, [sl]
			while (!nrf_rng_event_check(NRF_RNG,
   1d638:	b19b      	cbz	r3, 1d662 <entropy_nrf5_get_entropy_isr+0xae>
			byte = random_byte_get();
   1d63a:	f7ff ff57 	bl	1d4ec <random_byte_get>
			if (byte < 0) {
   1d63e:	2800      	cmp	r0, #0
   1d640:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
   1d644:	dbf6      	blt.n	1d634 <entropy_nrf5_get_entropy_isr+0x80>
   1d646:	3d01      	subs	r5, #1
   1d648:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1d64a:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
   1d64e:	2d00      	cmp	r5, #0
   1d650:	d1f0      	bne.n	1d634 <entropy_nrf5_get_entropy_isr+0x80>
		if (irq_enabled) {
   1d652:	f1b9 0f00 	cmp.w	r9, #0
   1d656:	d002      	beq.n	1d65e <entropy_nrf5_get_entropy_isr+0xaa>
			irq_enable(IRQN);
   1d658:	200d      	movs	r0, #13
   1d65a:	f7e7 f8c7 	bl	47ec <arch_irq_enable>
	return cnt;
   1d65e:	4620      	mov	r0, r4
   1d660:	e7c3      	b.n	1d5ea <entropy_nrf5_get_entropy_isr+0x36>
   1d662:	f3bf 8f4f 	dsb	sy
				__WFE();
   1d666:	bf20      	wfe
				__SEV();
   1d668:	bf40      	sev
				__WFE();
   1d66a:	bf20      	wfe
   1d66c:	e7e2      	b.n	1d634 <entropy_nrf5_get_entropy_isr+0x80>
   1d66e:	bf00      	nop
   1d670:	2000422c 	.word	0x2000422c
   1d674:	0002fa0a 	.word	0x0002fa0a
   1d678:	0002a026 	.word	0x0002a026
   1d67c:	2000425c 	.word	0x2000425c
   1d680:	4000d100 	.word	0x4000d100
   1d684:	e000e100 	.word	0xe000e100
   1d688:	4000d000 	.word	0x4000d000

0001d68c <entropy_nrf5_get_entropy>:
{
   1d68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d690:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   1d692:	4b1a      	ldr	r3, [pc, #104]	; (1d6fc <entropy_nrf5_get_entropy+0x70>)
   1d694:	68c2      	ldr	r2, [r0, #12]
   1d696:	429a      	cmp	r2, r3
{
   1d698:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   1d69a:	d008      	beq.n	1d6ae <entropy_nrf5_get_entropy+0x22>
   1d69c:	4918      	ldr	r1, [pc, #96]	; (1d700 <entropy_nrf5_get_entropy+0x74>)
   1d69e:	4819      	ldr	r0, [pc, #100]	; (1d704 <entropy_nrf5_get_entropy+0x78>)
   1d6a0:	22ea      	movs	r2, #234	; 0xea
   1d6a2:	f004 fc12 	bl	21eca <printk>
   1d6a6:	21ea      	movs	r1, #234	; 0xea
   1d6a8:	4815      	ldr	r0, [pc, #84]	; (1d700 <entropy_nrf5_get_entropy+0x74>)
   1d6aa:	f004 fec0 	bl	2242e <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1d6ae:	4d13      	ldr	r5, [pc, #76]	; (1d6fc <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1d6b0:	f105 0845 	add.w	r8, r5, #69	; 0x45
   1d6b4:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   1d6b8:	b914      	cbnz	r4, 1d6c0 <entropy_nrf5_get_entropy+0x34>
}
   1d6ba:	4620      	mov	r0, r4
   1d6bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d6c0:	f04f 33ff 	mov.w	r3, #4294967295
   1d6c4:	f04f 32ff 	mov.w	r2, #4294967295
   1d6c8:	4628      	mov	r0, r5
   1d6ca:	f002 fb13 	bl	1fcf4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1d6ce:	4622      	mov	r2, r4
   1d6d0:	4631      	mov	r1, r6
   1d6d2:	4640      	mov	r0, r8
   1d6d4:	f7ff ff28 	bl	1d528 <rng_pool_get>
   1d6d8:	4607      	mov	r7, r0
	z_impl_k_sem_give(sem);
   1d6da:	4628      	mov	r0, r5
   1d6dc:	f002 face 	bl	1fc7c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1d6e0:	b93f      	cbnz	r7, 1d6f2 <entropy_nrf5_get_entropy+0x66>
	return z_impl_k_sem_take(sem, timeout);
   1d6e2:	f04f 32ff 	mov.w	r2, #4294967295
   1d6e6:	f04f 33ff 	mov.w	r3, #4294967295
   1d6ea:	4648      	mov	r0, r9
   1d6ec:	f002 fb02 	bl	1fcf4 <z_impl_k_sem_take>
			continue;
   1d6f0:	e7e2      	b.n	1d6b8 <entropy_nrf5_get_entropy+0x2c>
		len -= bytes;
   1d6f2:	1be4      	subs	r4, r4, r7
   1d6f4:	b2a4      	uxth	r4, r4
		buf += bytes;
   1d6f6:	443e      	add	r6, r7
   1d6f8:	e7de      	b.n	1d6b8 <entropy_nrf5_get_entropy+0x2c>
   1d6fa:	bf00      	nop
   1d6fc:	2000422c 	.word	0x2000422c
   1d700:	0002fa0a 	.word	0x0002fa0a
   1d704:	0002a026 	.word	0x0002a026

0001d708 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   1d708:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   1d70a:	4c1f      	ldr	r4, [pc, #124]	; (1d788 <entropy_nrf5_init+0x80>)
   1d70c:	68c3      	ldr	r3, [r0, #12]
   1d70e:	42a3      	cmp	r3, r4
   1d710:	d00a      	beq.n	1d728 <entropy_nrf5_init+0x20>
   1d712:	491e      	ldr	r1, [pc, #120]	; (1d78c <entropy_nrf5_init+0x84>)
   1d714:	481e      	ldr	r0, [pc, #120]	; (1d790 <entropy_nrf5_init+0x88>)
   1d716:	f240 1257 	movw	r2, #343	; 0x157
   1d71a:	f004 fbd6 	bl	21eca <printk>
   1d71e:	f240 1157 	movw	r1, #343	; 0x157
   1d722:	481a      	ldr	r0, [pc, #104]	; (1d78c <entropy_nrf5_init+0x84>)
   1d724:	f004 fe83 	bl	2242e <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d728:	2201      	movs	r2, #1
   1d72a:	4611      	mov	r1, r2
   1d72c:	4816      	ldr	r0, [pc, #88]	; (1d788 <entropy_nrf5_init+0x80>)
   1d72e:	f00b f807 	bl	28740 <z_impl_k_sem_init>
   1d732:	2201      	movs	r2, #1
   1d734:	2100      	movs	r1, #0
   1d736:	4817      	ldr	r0, [pc, #92]	; (1d794 <entropy_nrf5_init+0x8c>)
   1d738:	f00b f802 	bl	28740 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1d73c:	f240 4307 	movw	r3, #1031	; 0x407
   1d740:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1d744:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d748:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1d74a:	230c      	movs	r3, #12
   1d74c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1d750:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1d752:	4b11      	ldr	r3, [pc, #68]	; (1d798 <entropy_nrf5_init+0x90>)
   1d754:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1d758:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1d75c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1d760:	f042 0201 	orr.w	r2, r2, #1
   1d764:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d768:	4a0c      	ldr	r2, [pc, #48]	; (1d79c <entropy_nrf5_init+0x94>)
    p_reg->INTENSET = mask;
   1d76a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d76c:	6015      	str	r5, [r2, #0]
   1d76e:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1d770:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1d774:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1d776:	6019      	str	r1, [r3, #0]
   1d778:	200d      	movs	r0, #13
   1d77a:	f7e7 f869 	bl	4850 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1d77e:	200d      	movs	r0, #13
   1d780:	f7e7 f834 	bl	47ec <arch_irq_enable>

	return 0;
}
   1d784:	4628      	mov	r0, r5
   1d786:	bd38      	pop	{r3, r4, r5, pc}
   1d788:	2000422c 	.word	0x2000422c
   1d78c:	0002fa0a 	.word	0x0002fa0a
   1d790:	0002a026 	.word	0x0002a026
   1d794:	20004244 	.word	0x20004244
   1d798:	4000d000 	.word	0x4000d000
   1d79c:	4000d100 	.word	0x4000d100

0001d7a0 <isr>:
{
   1d7a0:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1d7a2:	f7ff fea3 	bl	1d4ec <random_byte_get>
	if (byte < 0) {
   1d7a6:	2800      	cmp	r0, #0
   1d7a8:	db20      	blt.n	1d7ec <isr+0x4c>
	uint8_t last  = rngp->last;
   1d7aa:	4b17      	ldr	r3, [pc, #92]	; (1d808 <isr+0x68>)
   1d7ac:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1d7b0:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1d7b4:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1d7b8:	1a51      	subs	r1, r2, r1
   1d7ba:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1d7be:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1d7c0:	d10d      	bne.n	1d7de <isr+0x3e>
	uint8_t last  = rngp->last;
   1d7c2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1d7c6:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1d7ca:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1d7ce:	1a51      	subs	r1, r2, r1
   1d7d0:	ea34 0101 	bics.w	r1, r4, r1
   1d7d4:	d10b      	bne.n	1d7ee <isr+0x4e>
   1d7d6:	4b0d      	ldr	r3, [pc, #52]	; (1d80c <isr+0x6c>)
   1d7d8:	2201      	movs	r2, #1
   1d7da:	601a      	str	r2, [r3, #0]
   1d7dc:	e00e      	b.n	1d7fc <isr+0x5c>
	rngp->buffer[last] = byte;
   1d7de:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1d7e0:	3201      	adds	r2, #1
   1d7e2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1d7e4:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1d7e8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1d7ec:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1d7ee:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1d7f0:	3201      	adds	r2, #1
   1d7f2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1d7f4:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1d7f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1d7fc:	4804      	ldr	r0, [pc, #16]	; (1d810 <isr+0x70>)
}
   1d7fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d802:	f002 ba3b 	b.w	1fc7c <z_impl_k_sem_give>
   1d806:	bf00      	nop
   1d808:	2000422c 	.word	0x2000422c
   1d80c:	4000d004 	.word	0x4000d004
   1d810:	20004244 	.word	0x20004244

0001d814 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   1d814:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d816:	460d      	mov	r5, r1
   1d818:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   1d81a:	b940      	cbnz	r0, 1d82e <entropy_cc3xx_rng_get_entropy+0x1a>
   1d81c:	490f      	ldr	r1, [pc, #60]	; (1d85c <entropy_cc3xx_rng_get_entropy+0x48>)
   1d81e:	4810      	ldr	r0, [pc, #64]	; (1d860 <entropy_cc3xx_rng_get_entropy+0x4c>)
   1d820:	221f      	movs	r2, #31
   1d822:	f004 fb52 	bl	21eca <printk>
   1d826:	211f      	movs	r1, #31
   1d828:	480c      	ldr	r0, [pc, #48]	; (1d85c <entropy_cc3xx_rng_get_entropy+0x48>)
   1d82a:	f004 fe00 	bl	2242e <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1d82e:	b945      	cbnz	r5, 1d842 <entropy_cc3xx_rng_get_entropy+0x2e>
   1d830:	490a      	ldr	r1, [pc, #40]	; (1d85c <entropy_cc3xx_rng_get_entropy+0x48>)
   1d832:	480b      	ldr	r0, [pc, #44]	; (1d860 <entropy_cc3xx_rng_get_entropy+0x4c>)
   1d834:	2220      	movs	r2, #32
   1d836:	f004 fb48 	bl	21eca <printk>
   1d83a:	2120      	movs	r1, #32
   1d83c:	4807      	ldr	r0, [pc, #28]	; (1d85c <entropy_cc3xx_rng_get_entropy+0x48>)
   1d83e:	f004 fdf6 	bl	2242e <assert_post_action>
#else
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	res = nrf_cc3xx_platform_entropy_get(buffer, length, &olen);
   1d842:	aa01      	add	r2, sp, #4
   1d844:	4621      	mov	r1, r4
   1d846:	4628      	mov	r0, r5
   1d848:	f003 fc08 	bl	2105c <nrf_cc3xx_platform_entropy_get>
	if (olen != length) {
   1d84c:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   1d84e:	429c      	cmp	r4, r3
	}
#endif

	return res;
}
   1d850:	bf18      	it	ne
   1d852:	f06f 0015 	mvnne.w	r0, #21
   1d856:	b003      	add	sp, #12
   1d858:	bd30      	pop	{r4, r5, pc}
   1d85a:	bf00      	nop
   1d85c:	0002fa3c 	.word	0x0002fa3c
   1d860:	0002a026 	.word	0x0002a026

0001d864 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   1d864:	4803      	ldr	r0, [pc, #12]	; (1d874 <k_sys_fatal_error_handler+0x10>)
{
   1d866:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   1d868:	2145      	movs	r1, #69	; 0x45
   1d86a:	f004 fb2e 	bl	21eca <printk>
	sys_arch_reboot(0);
   1d86e:	2000      	movs	r0, #0
   1d870:	f7e7 fc7c 	bl	516c <sys_arch_reboot>

	CODE_UNREACHABLE;
   1d874:	0002fa8b 	.word	0x0002fa8b

0001d878 <model_transition_decode>:
	60 * 10 * MSEC_PER_SEC,
};

int32_t model_transition_decode(uint8_t encoded_transition)
{
	uint8_t steps = (encoded_transition & 0x3f);
   1d878:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	uint8_t res = (encoded_transition >> 6);

	return (steps == TRANSITION_TIME_UNKNOWN) ?
		       SYS_FOREVER_MS :
   1d87c:	2b3f      	cmp	r3, #63	; 0x3f
	uint8_t res = (encoded_transition >> 6);
   1d87e:	ea4f 1090 	mov.w	r0, r0, lsr #6
		       (model_transition_res[res] * steps);
   1d882:	bf1d      	ittte	ne
   1d884:	4a03      	ldrne	r2, [pc, #12]	; (1d894 <model_transition_decode+0x1c>)
   1d886:	f852 0020 	ldrne.w	r0, [r2, r0, lsl #2]
   1d88a:	4358      	mulne	r0, r3
		       SYS_FOREVER_MS :
   1d88c:	f04f 30ff 	moveq.w	r0, #4294967295
}
   1d890:	4770      	bx	lr
   1d892:	bf00      	nop
   1d894:	00029a3c 	.word	0x00029a3c

0001d898 <model_transition_encode>:

uint8_t model_transition_encode(int32_t transition_time)
{
   1d898:	b530      	push	{r4, r5, lr}
	if (transition_time == 0) {
   1d89a:	4604      	mov	r4, r0
{
   1d89c:	b085      	sub	sp, #20
	if (transition_time == 0) {
   1d89e:	b110      	cbz	r0, 1d8a6 <model_transition_encode+0xe>
		return 0;
	}
	if (transition_time == SYS_FOREVER_MS) {
   1d8a0:	1c43      	adds	r3, r0, #1
   1d8a2:	d102      	bne.n	1d8aa <model_transition_encode+0x12>
		return TRANSITION_TIME_UNKNOWN;
   1d8a4:	203f      	movs	r0, #63	; 0x3f
		steps = MIN(0x3e, steps);
		return (i << 6) | steps;
	}

	return TRANSITION_TIME_UNKNOWN;
}
   1d8a6:	b005      	add	sp, #20
   1d8a8:	bd30      	pop	{r4, r5, pc}
	const int32_t limits[] = {
   1d8aa:	4b10      	ldr	r3, [pc, #64]	; (1d8ec <model_transition_encode+0x54>)
   1d8ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d8ae:	466d      	mov	r5, sp
   1d8b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1d8b4:	2000      	movs	r0, #0
		if (transition_time > limits[i]) {
   1d8b6:	f855 3b04 	ldr.w	r3, [r5], #4
   1d8ba:	42a3      	cmp	r3, r4
   1d8bc:	da03      	bge.n	1d8c6 <model_transition_encode+0x2e>
			continue;
   1d8be:	3001      	adds	r0, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(model_transition_res); ++i) {
   1d8c0:	2804      	cmp	r0, #4
   1d8c2:	d0ef      	beq.n	1d8a4 <model_transition_encode+0xc>
   1d8c4:	e7f7      	b.n	1d8b6 <model_transition_encode+0x1e>
		uint8_t steps = ((transition_time + model_transition_res[i] / 2) /
   1d8c6:	4b0a      	ldr	r3, [pc, #40]	; (1d8f0 <model_transition_encode+0x58>)
   1d8c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1d8cc:	eb04 0453 	add.w	r4, r4, r3, lsr #1
   1d8d0:	fbb4 f4f3 	udiv	r4, r4, r3
		steps = MAX(1, steps);
   1d8d4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1d8d8:	bf08      	it	eq
   1d8da:	2401      	moveq	r4, #1
		steps = MIN(0x3e, steps);
   1d8dc:	2c3e      	cmp	r4, #62	; 0x3e
   1d8de:	bf28      	it	cs
   1d8e0:	243e      	movcs	r4, #62	; 0x3e
		return (i << 6) | steps;
   1d8e2:	ea44 1480 	orr.w	r4, r4, r0, lsl #6
   1d8e6:	b2e0      	uxtb	r0, r4
   1d8e8:	e7dd      	b.n	1d8a6 <model_transition_encode+0xe>
   1d8ea:	bf00      	nop
   1d8ec:	00028f7c 	.word	0x00028f7c
   1d8f0:	00029a3c 	.word	0x00029a3c

0001d8f4 <bt_mesh_onoff_srv_init>:

	return 0;
}

static int bt_mesh_onoff_srv_init(struct bt_mesh_model *model)
{
   1d8f4:	b508      	push	{r3, lr}
	struct bt_mesh_onoff_srv *srv = model->user_data;
   1d8f6:	6981      	ldr	r1, [r0, #24]

	srv->model = model;
	srv->pub.msg = &srv->pub_buf;
	srv->pub.update = update_handler;
   1d8f8:	4b05      	ldr	r3, [pc, #20]	; (1d910 <bt_mesh_onoff_srv_init+0x1c>)
	srv->model = model;
   1d8fa:	61c8      	str	r0, [r1, #28]
	srv->pub.msg = &srv->pub_buf;
   1d8fc:	f101 0068 	add.w	r0, r1, #104	; 0x68
   1d900:	6308      	str	r0, [r1, #48]	; 0x30
	srv->pub.update = update_handler;
   1d902:	634b      	str	r3, [r1, #52]	; 0x34
	net_buf_simple_init_with_data(&srv->pub_buf, srv->pub_data,
   1d904:	2209      	movs	r2, #9
   1d906:	3174      	adds	r1, #116	; 0x74
   1d908:	f00a fad9 	bl	27ebe <net_buf_simple_init_with_data>
	if (IS_ENABLED(CONFIG_BT_MESH_SCENE_SRV)) {
		bt_mesh_scene_entry_add(model, &srv->scene, &scene_type, false);
	}

	return 0;
}
   1d90c:	2000      	movs	r0, #0
   1d90e:	bd08      	pop	{r3, pc}
   1d910:	00028327 	.word	0x00028327

0001d914 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
   1d914:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);
   1d916:	b940      	cbnz	r0, 1d92a <hw_cc3xx_init+0x16>
   1d918:	4908      	ldr	r1, [pc, #32]	; (1d93c <hw_cc3xx_init+0x28>)
   1d91a:	4809      	ldr	r0, [pc, #36]	; (1d940 <hw_cc3xx_init+0x2c>)
   1d91c:	2218      	movs	r2, #24
   1d91e:	f004 fad4 	bl	21eca <printk>
   1d922:	2118      	movs	r1, #24
   1d924:	4805      	ldr	r0, [pc, #20]	; (1d93c <hw_cc3xx_init+0x28>)
   1d926:	f004 fd82 	bl	2242e <assert_post_action>

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1d92a:	f7e6 fca7 	bl	427c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1d92e:	f7e6 fd59 	bl	43e4 <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
   1d932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   1d936:	f003 bb35 	b.w	20fa4 <nrf_cc3xx_platform_init>
   1d93a:	bf00      	nop
   1d93c:	0002fac9 	.word	0x0002fac9
   1d940:	0002a026 	.word	0x0002a026

0001d944 <__NVIC_SystemReset>:
   1d944:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1d948:	4905      	ldr	r1, [pc, #20]	; (1d960 <__NVIC_SystemReset+0x1c>)
   1d94a:	4b06      	ldr	r3, [pc, #24]	; (1d964 <__NVIC_SystemReset+0x20>)
   1d94c:	68ca      	ldr	r2, [r1, #12]
   1d94e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1d952:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1d954:	60cb      	str	r3, [r1, #12]
   1d956:	f3bf 8f4f 	dsb	sy
    __NOP();
   1d95a:	bf00      	nop
   1d95c:	e7fd      	b.n	1d95a <__NVIC_SystemReset+0x16>
   1d95e:	bf00      	nop
   1d960:	e000ed00 	.word	0xe000ed00
   1d964:	05fa0004 	.word	0x05fa0004

0001d968 <nrf52_errata_136>:
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1d968:	4b06      	ldr	r3, [pc, #24]	; (1d984 <nrf52_errata_136+0x1c>)
   1d96a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d96c:	3b04      	subs	r3, #4
            if (var1 == 0x08)
   1d96e:	681b      	ldr	r3, [r3, #0]
   1d970:	2b08      	cmp	r3, #8
   1d972:	d104      	bne.n	1d97e <nrf52_errata_136+0x16>
                switch(var2)
   1d974:	2803      	cmp	r0, #3
   1d976:	bf8c      	ite	hi
   1d978:	2000      	movhi	r0, #0
   1d97a:	2001      	movls	r0, #1
   1d97c:	4770      	bx	lr
        return false;
   1d97e:	2000      	movs	r0, #0
}
   1d980:	4770      	bx	lr
   1d982:	bf00      	nop
   1d984:	10000134 	.word	0x10000134

0001d988 <nrf52_errata_103>:
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1d988:	4b05      	ldr	r3, [pc, #20]	; (1d9a0 <nrf52_errata_103+0x18>)
   1d98a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d98c:	3b04      	subs	r3, #4
            if (var1 == 0x08)
   1d98e:	681b      	ldr	r3, [r3, #0]
   1d990:	2b08      	cmp	r3, #8
                switch(var2)
   1d992:	bf06      	itte	eq
   1d994:	fab0 f080 	clzeq	r0, r0
   1d998:	0940      	lsreq	r0, r0, #5
        return false;
   1d99a:	2000      	movne	r0, #0
}
   1d99c:	4770      	bx	lr
   1d99e:	bf00      	nop
   1d9a0:	10000134 	.word	0x10000134

0001d9a4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1d9a4:	4a02      	ldr	r2, [pc, #8]	; (1d9b0 <nvmc_wait+0xc>)
   1d9a6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1d9aa:	2b00      	cmp	r3, #0
   1d9ac:	d0fb      	beq.n	1d9a6 <nvmc_wait+0x2>
}
   1d9ae:	4770      	bx	lr
   1d9b0:	4001e000 	.word	0x4001e000

0001d9b4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1d9b4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1d9b6:	f7ff ffd7 	bl	1d968 <nrf52_errata_136>
   1d9ba:	b140      	cbz	r0, 1d9ce <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1d9bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d9c0:	2200      	movs	r2, #0
   1d9c2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1d9c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1d9ca:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1d9ce:	f7ff ffcb 	bl	1d968 <nrf52_errata_136>
   1d9d2:	2800      	cmp	r0, #0
   1d9d4:	d046      	beq.n	1da64 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1d9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d9da:	4b57      	ldr	r3, [pc, #348]	; (1db38 <SystemInit+0x184>)
   1d9dc:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1d9e0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1d9e4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1d9e8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1d9ec:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1d9f0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1d9f4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1d9f8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1d9fc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1da00:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1da04:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1da08:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1da0c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1da10:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1da14:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1da18:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1da1c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1da20:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1da24:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1da28:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1da2c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1da30:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1da34:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1da38:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1da3c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1da40:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1da44:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1da48:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1da4c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1da50:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1da54:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1da58:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1da5c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1da60:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1da64:	f7ff ff90 	bl	1d988 <nrf52_errata_103>
   1da68:	b110      	cbz	r0, 1da70 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1da6a:	4b34      	ldr	r3, [pc, #208]	; (1db3c <SystemInit+0x188>)
   1da6c:	4a34      	ldr	r2, [pc, #208]	; (1db40 <SystemInit+0x18c>)
   1da6e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1da70:	f7ff ff8a 	bl	1d988 <nrf52_errata_103>
   1da74:	b118      	cbz	r0, 1da7e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1da76:	4b33      	ldr	r3, [pc, #204]	; (1db44 <SystemInit+0x190>)
   1da78:	22fb      	movs	r2, #251	; 0xfb
   1da7a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1da7e:	f7ff ff83 	bl	1d988 <nrf52_errata_103>
   1da82:	b148      	cbz	r0, 1da98 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1da84:	4930      	ldr	r1, [pc, #192]	; (1db48 <SystemInit+0x194>)
   1da86:	4b31      	ldr	r3, [pc, #196]	; (1db4c <SystemInit+0x198>)
   1da88:	680a      	ldr	r2, [r1, #0]
   1da8a:	681b      	ldr	r3, [r3, #0]
   1da8c:	f022 020f 	bic.w	r2, r2, #15
   1da90:	f003 030f 	and.w	r3, r3, #15
   1da94:	4313      	orrs	r3, r2
   1da96:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1da98:	f7ff ff76 	bl	1d988 <nrf52_errata_103>
   1da9c:	b118      	cbz	r0, 1daa6 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1da9e:	4b2c      	ldr	r3, [pc, #176]	; (1db50 <SystemInit+0x19c>)
   1daa0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1daa4:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1daa6:	f7ff ff5f 	bl	1d968 <nrf52_errata_136>
   1daaa:	b148      	cbz	r0, 1dac0 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1daac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dab0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1dab4:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1dab6:	bf44      	itt	mi
   1dab8:	f06f 0201 	mvnmi.w	r2, #1
   1dabc:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   1dac0:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   1dac4:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1dac8:	07db      	lsls	r3, r3, #31
   1daca:	d514      	bpl.n	1daf6 <SystemInit+0x142>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1dacc:	4821      	ldr	r0, [pc, #132]	; (1db54 <SystemInit+0x1a0>)
   1dace:	2301      	movs	r3, #1
   1dad0:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1dad4:	f7ff ff66 	bl	1d9a4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   1dad8:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1dadc:	f023 0301 	bic.w	r3, r3, #1
   1dae0:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   1dae4:	f7ff ff5e 	bl	1d9a4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1dae8:	2300      	movs	r3, #0
   1daea:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1daee:	f7ff ff59 	bl	1d9a4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   1daf2:	f7ff ff27 	bl	1d944 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1daf6:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   1dafa:	2b00      	cmp	r3, #0
   1dafc:	db03      	blt.n	1db06 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1dafe:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1db02:	2b00      	cmp	r3, #0
   1db04:	da14      	bge.n	1db30 <SystemInit+0x17c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1db06:	4913      	ldr	r1, [pc, #76]	; (1db54 <SystemInit+0x1a0>)
   1db08:	2301      	movs	r3, #1
   1db0a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1db0e:	f7ff ff49 	bl	1d9a4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1db12:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1db16:	2412      	movs	r4, #18
   1db18:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1db1c:	f7ff ff42 	bl	1d9a4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1db20:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1db24:	f7ff ff3e 	bl	1d9a4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1db28:	2300      	movs	r3, #0
   1db2a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   1db2e:	e7de      	b.n	1daee <SystemInit+0x13a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1db30:	4b09      	ldr	r3, [pc, #36]	; (1db58 <SystemInit+0x1a4>)
   1db32:	4a0a      	ldr	r2, [pc, #40]	; (1db5c <SystemInit+0x1a8>)
   1db34:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1db36:	bd10      	pop	{r4, pc}
   1db38:	4000c000 	.word	0x4000c000
   1db3c:	4000568c 	.word	0x4000568c
   1db40:	00038148 	.word	0x00038148
   1db44:	4000f000 	.word	0x4000f000
   1db48:	40000ee4 	.word	0x40000ee4
   1db4c:	10000258 	.word	0x10000258
   1db50:	40029640 	.word	0x40029640
   1db54:	4001e000 	.word	0x4001e000
   1db58:	20000cb0 	.word	0x20000cb0
   1db5c:	03d09000 	.word	0x03d09000

0001db60 <nrf_clock_is_running.constprop.2>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   1db60:	b508      	push	{r3, lr}
    switch (domain)
   1db62:	b170      	cbz	r0, 1db82 <nrf_clock_is_running.constprop.2+0x22>
   1db64:	2801      	cmp	r0, #1
   1db66:	d01b      	beq.n	1dba0 <nrf_clock_is_running.constprop.2+0x40>
            NRFX_ASSERT(0);
   1db68:	f240 3242 	movw	r2, #834	; 0x342
   1db6c:	4913      	ldr	r1, [pc, #76]	; (1dbbc <nrf_clock_is_running.constprop.2+0x5c>)
   1db6e:	4814      	ldr	r0, [pc, #80]	; (1dbc0 <nrf_clock_is_running.constprop.2+0x60>)
   1db70:	f004 f9ab 	bl	21eca <printk>
   1db74:	4811      	ldr	r0, [pc, #68]	; (1dbbc <nrf_clock_is_running.constprop.2+0x5c>)
   1db76:	f240 3142 	movw	r1, #834	; 0x342
   1db7a:	f004 fc58 	bl	2242e <assert_post_action>
            return false;
   1db7e:	2000      	movs	r0, #0
   1db80:	e00d      	b.n	1db9e <nrf_clock_is_running.constprop.2+0x3e>
            if (p_clk_src != NULL)
   1db82:	b131      	cbz	r1, 1db92 <nrf_clock_is_running.constprop.2+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1db84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1db88:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1db8c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1db90:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1db92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1db96:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1db9a:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   1db9e:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   1dba0:	b131      	cbz	r1, 1dbb0 <nrf_clock_is_running.constprop.2+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1dba2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dba6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   1dbaa:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1dbae:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1dbb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dbb4:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
   1dbb8:	e7ef      	b.n	1db9a <nrf_clock_is_running.constprop.2+0x3a>
   1dbba:	bf00      	nop
   1dbbc:	0002fb00 	.word	0x0002fb00
   1dbc0:	0002a026 	.word	0x0002a026

0001dbc4 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1dbc4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   1dbc6:	4604      	mov	r4, r0
   1dbc8:	b940      	cbnz	r0, 1dbdc <nrfx_clock_init+0x18>
   1dbca:	4909      	ldr	r1, [pc, #36]	; (1dbf0 <nrfx_clock_init+0x2c>)
   1dbcc:	4809      	ldr	r0, [pc, #36]	; (1dbf4 <nrfx_clock_init+0x30>)
   1dbce:	22b3      	movs	r2, #179	; 0xb3
   1dbd0:	f004 f97b 	bl	21eca <printk>
   1dbd4:	21b3      	movs	r1, #179	; 0xb3
   1dbd6:	4806      	ldr	r0, [pc, #24]	; (1dbf0 <nrfx_clock_init+0x2c>)
   1dbd8:	f004 fc29 	bl	2242e <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1dbdc:	4b06      	ldr	r3, [pc, #24]	; (1dbf8 <nrfx_clock_init+0x34>)
   1dbde:	791a      	ldrb	r2, [r3, #4]
   1dbe0:	b922      	cbnz	r2, 1dbec <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1dbe2:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   1dbe4:	4805      	ldr	r0, [pc, #20]	; (1dbfc <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   1dbe6:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   1dbe8:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1dbea:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1dbec:	4804      	ldr	r0, [pc, #16]	; (1dc00 <nrfx_clock_init+0x3c>)
    return err_code;
   1dbee:	e7fc      	b.n	1dbea <nrfx_clock_init+0x26>
   1dbf0:	0002fb34 	.word	0x0002fb34
   1dbf4:	0002a026 	.word	0x0002a026
   1dbf8:	20004280 	.word	0x20004280
   1dbfc:	0bad0000 	.word	0x0bad0000
   1dc00:	0bad000c 	.word	0x0bad000c

0001dc04 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1dc04:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1dc06:	4b0a      	ldr	r3, [pc, #40]	; (1dc30 <nrfx_clock_enable+0x2c>)
   1dc08:	791b      	ldrb	r3, [r3, #4]
   1dc0a:	b943      	cbnz	r3, 1dc1e <nrfx_clock_enable+0x1a>
   1dc0c:	4909      	ldr	r1, [pc, #36]	; (1dc34 <nrfx_clock_enable+0x30>)
   1dc0e:	480a      	ldr	r0, [pc, #40]	; (1dc38 <nrfx_clock_enable+0x34>)
   1dc10:	22cc      	movs	r2, #204	; 0xcc
   1dc12:	f004 f95a 	bl	21eca <printk>
   1dc16:	21cc      	movs	r1, #204	; 0xcc
   1dc18:	4806      	ldr	r0, [pc, #24]	; (1dc34 <nrfx_clock_enable+0x30>)
   1dc1a:	f004 fc08 	bl	2242e <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1dc1e:	2000      	movs	r0, #0
   1dc20:	f7e6 fe08 	bl	4834 <arch_irq_is_enabled>
   1dc24:	b918      	cbnz	r0, 1dc2e <nrfx_clock_enable+0x2a>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1dc26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1dc2a:	f7e6 bddf 	b.w	47ec <arch_irq_enable>
   1dc2e:	bd08      	pop	{r3, pc}
   1dc30:	20004280 	.word	0x20004280
   1dc34:	0002fb34 	.word	0x0002fb34
   1dc38:	0002a026 	.word	0x0002a026

0001dc3c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1dc3c:	4b21      	ldr	r3, [pc, #132]	; (1dcc4 <nrfx_clock_start+0x88>)
   1dc3e:	791b      	ldrb	r3, [r3, #4]
{
   1dc40:	b513      	push	{r0, r1, r4, lr}
   1dc42:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1dc44:	b953      	cbnz	r3, 1dc5c <nrfx_clock_start+0x20>
   1dc46:	4920      	ldr	r1, [pc, #128]	; (1dcc8 <nrfx_clock_start+0x8c>)
   1dc48:	4820      	ldr	r0, [pc, #128]	; (1dccc <nrfx_clock_start+0x90>)
   1dc4a:	f44f 7284 	mov.w	r2, #264	; 0x108
   1dc4e:	f004 f93c 	bl	21eca <printk>
   1dc52:	f44f 7184 	mov.w	r1, #264	; 0x108
   1dc56:	481c      	ldr	r0, [pc, #112]	; (1dcc8 <nrfx_clock_start+0x8c>)
   1dc58:	f004 fbe9 	bl	2242e <assert_post_action>
    switch (domain)
   1dc5c:	b16c      	cbz	r4, 1dc7a <nrfx_clock_start+0x3e>
   1dc5e:	2c01      	cmp	r4, #1
   1dc60:	d026      	beq.n	1dcb0 <nrfx_clock_start+0x74>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1dc62:	f44f 729d 	mov.w	r2, #314	; 0x13a
   1dc66:	4918      	ldr	r1, [pc, #96]	; (1dcc8 <nrfx_clock_start+0x8c>)
   1dc68:	4818      	ldr	r0, [pc, #96]	; (1dccc <nrfx_clock_start+0x90>)
   1dc6a:	f004 f92e 	bl	21eca <printk>
   1dc6e:	f44f 719d 	mov.w	r1, #314	; 0x13a
   1dc72:	4815      	ldr	r0, [pc, #84]	; (1dcc8 <nrfx_clock_start+0x8c>)
   1dc74:	f004 fbdb 	bl	2242e <assert_post_action>
            break;
    }
}
   1dc78:	e016      	b.n	1dca8 <nrfx_clock_start+0x6c>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1dc7a:	a901      	add	r1, sp, #4
   1dc7c:	4620      	mov	r0, r4
   1dc7e:	f7ff ff6f 	bl	1db60 <nrf_clock_is_running.constprop.2>
   1dc82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dc86:	b188      	cbz	r0, 1dcac <nrfx_clock_start+0x70>
   1dc88:	9a01      	ldr	r2, [sp, #4]
   1dc8a:	2a01      	cmp	r2, #1
   1dc8c:	d10e      	bne.n	1dcac <nrfx_clock_start+0x70>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1dc8e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc92:	4b0f      	ldr	r3, [pc, #60]	; (1dcd0 <nrfx_clock_start+0x94>)
   1dc94:	2200      	movs	r2, #0
   1dc96:	601a      	str	r2, [r3, #0]
   1dc98:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1dc9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dc9e:	2202      	movs	r2, #2
   1dca0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dca4:	2201      	movs	r2, #1
   1dca6:	609a      	str	r2, [r3, #8]
}
   1dca8:	b002      	add	sp, #8
   1dcaa:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   1dcac:	2200      	movs	r2, #0
   1dcae:	e7ee      	b.n	1dc8e <nrfx_clock_start+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dcb0:	4b08      	ldr	r3, [pc, #32]	; (1dcd4 <nrfx_clock_start+0x98>)
   1dcb2:	2200      	movs	r2, #0
   1dcb4:	601a      	str	r2, [r3, #0]
   1dcb6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1dcb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dcbc:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dcc0:	601c      	str	r4, [r3, #0]
   1dcc2:	e7f1      	b.n	1dca8 <nrfx_clock_start+0x6c>
   1dcc4:	20004280 	.word	0x20004280
   1dcc8:	0002fb34 	.word	0x0002fb34
   1dccc:	0002a026 	.word	0x0002a026
   1dcd0:	40000104 	.word	0x40000104
   1dcd4:	40000100 	.word	0x40000100

0001dcd8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1dcd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1dcda:	4d2e      	ldr	r5, [pc, #184]	; (1dd94 <nrfx_clock_stop+0xbc>)
   1dcdc:	792a      	ldrb	r2, [r5, #4]
{
   1dcde:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1dce0:	b952      	cbnz	r2, 1dcf8 <nrfx_clock_stop+0x20>
   1dce2:	492d      	ldr	r1, [pc, #180]	; (1dd98 <nrfx_clock_stop+0xc0>)
   1dce4:	482d      	ldr	r0, [pc, #180]	; (1dd9c <nrfx_clock_stop+0xc4>)
   1dce6:	f240 1241 	movw	r2, #321	; 0x141
   1dcea:	f004 f8ee 	bl	21eca <printk>
   1dcee:	f240 1141 	movw	r1, #321	; 0x141
   1dcf2:	4829      	ldr	r0, [pc, #164]	; (1dd98 <nrfx_clock_stop+0xc0>)
   1dcf4:	f004 fb9b 	bl	2242e <assert_post_action>
    switch (domain)
   1dcf8:	b174      	cbz	r4, 1dd18 <nrfx_clock_stop+0x40>
   1dcfa:	2c01      	cmp	r4, #1
   1dcfc:	d027      	beq.n	1dd4e <nrfx_clock_stop+0x76>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1dcfe:	4926      	ldr	r1, [pc, #152]	; (1dd98 <nrfx_clock_stop+0xc0>)
   1dd00:	4826      	ldr	r0, [pc, #152]	; (1dd9c <nrfx_clock_stop+0xc4>)
   1dd02:	f240 125d 	movw	r2, #349	; 0x15d
   1dd06:	f004 f8e0 	bl	21eca <printk>
   1dd0a:	f240 115d 	movw	r1, #349	; 0x15d
   1dd0e:	4822      	ldr	r0, [pc, #136]	; (1dd98 <nrfx_clock_stop+0xc0>)
   1dd10:	f004 fb8d 	bl	2242e <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1dd14:	b003      	add	sp, #12
   1dd16:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
   1dd18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dd1c:	2202      	movs	r2, #2
   1dd1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dd22:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
   1dd26:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dd2a:	2201      	movs	r2, #1
   1dd2c:	681b      	ldr	r3, [r3, #0]
   1dd2e:	4b1c      	ldr	r3, [pc, #112]	; (1dda0 <nrfx_clock_stop+0xc8>)
   1dd30:	f242 7410 	movw	r4, #10000	; 0x2710
   1dd34:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   1dd36:	2100      	movs	r1, #0
   1dd38:	4608      	mov	r0, r1
   1dd3a:	f7ff ff11 	bl	1db60 <nrf_clock_is_running.constprop.2>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1dd3e:	2800      	cmp	r0, #0
   1dd40:	d0e8      	beq.n	1dd14 <nrfx_clock_stop+0x3c>
   1dd42:	2001      	movs	r0, #1
   1dd44:	f00a fc3a 	bl	285bc <nrfx_busy_wait>
   1dd48:	3c01      	subs	r4, #1
   1dd4a:	d1f4      	bne.n	1dd36 <nrfx_clock_stop+0x5e>
   1dd4c:	e7e2      	b.n	1dd14 <nrfx_clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   1dd4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dd52:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   1dd54:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dd58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1dd5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1dd60:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dd62:	4b10      	ldr	r3, [pc, #64]	; (1dda4 <nrfx_clock_stop+0xcc>)
   1dd64:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1dd66:	f88d 4007 	strb.w	r4, [sp, #7]
   1dd6a:	f242 7410 	movw	r4, #10000	; 0x2710
   1dd6e:	f10d 0107 	add.w	r1, sp, #7
   1dd72:	2001      	movs	r0, #1
   1dd74:	f7ff fef4 	bl	1db60 <nrf_clock_is_running.constprop.2>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1dd78:	b910      	cbnz	r0, 1dd80 <nrfx_clock_stop+0xa8>
            m_clock_cb.hfclk_started = false;
   1dd7a:	2300      	movs	r3, #0
   1dd7c:	716b      	strb	r3, [r5, #5]
   1dd7e:	e7c9      	b.n	1dd14 <nrfx_clock_stop+0x3c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1dd80:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1dd84:	2801      	cmp	r0, #1
   1dd86:	d1f8      	bne.n	1dd7a <nrfx_clock_stop+0xa2>
   1dd88:	f00a fc18 	bl	285bc <nrfx_busy_wait>
   1dd8c:	3c01      	subs	r4, #1
   1dd8e:	d1ee      	bne.n	1dd6e <nrfx_clock_stop+0x96>
   1dd90:	e7f3      	b.n	1dd7a <nrfx_clock_stop+0xa2>
   1dd92:	bf00      	nop
   1dd94:	20004280 	.word	0x20004280
   1dd98:	0002fb34 	.word	0x0002fb34
   1dd9c:	0002a026 	.word	0x0002a026
   1dda0:	4000000c 	.word	0x4000000c
   1dda4:	40000004 	.word	0x40000004

0001dda8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1dda8:	4b16      	ldr	r3, [pc, #88]	; (1de04 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1ddaa:	b507      	push	{r0, r1, r2, lr}
   1ddac:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1ddae:	b16a      	cbz	r2, 1ddcc <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ddb0:	2200      	movs	r2, #0
   1ddb2:	601a      	str	r2, [r3, #0]
   1ddb4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1ddb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ddba:	2201      	movs	r2, #1
   1ddbc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1ddc0:	4b11      	ldr	r3, [pc, #68]	; (1de08 <nrfx_power_clock_irq_handler+0x60>)
   1ddc2:	7958      	ldrb	r0, [r3, #5]
   1ddc4:	b910      	cbnz	r0, 1ddcc <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   1ddc6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1ddc8:	681b      	ldr	r3, [r3, #0]
   1ddca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ddcc:	4b0f      	ldr	r3, [pc, #60]	; (1de0c <nrfx_power_clock_irq_handler+0x64>)
   1ddce:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1ddd0:	b16a      	cbz	r2, 1ddee <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ddd2:	2000      	movs	r0, #0
   1ddd4:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   1ddd6:	a901      	add	r1, sp, #4
   1ddd8:	681b      	ldr	r3, [r3, #0]
   1ddda:	f7ff fec1 	bl	1db60 <nrf_clock_is_running.constprop.2>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1ddde:	9a01      	ldr	r2, [sp, #4]
   1dde0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dde4:	b932      	cbnz	r2, 1ddf4 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1dde6:	2201      	movs	r2, #1
   1dde8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ddec:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1ddee:	b003      	add	sp, #12
   1ddf0:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   1ddf4:	2202      	movs	r2, #2
   1ddf6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1ddfa:	4b03      	ldr	r3, [pc, #12]	; (1de08 <nrfx_power_clock_irq_handler+0x60>)
   1ddfc:	2001      	movs	r0, #1
   1ddfe:	681b      	ldr	r3, [r3, #0]
   1de00:	4798      	blx	r3
}
   1de02:	e7f4      	b.n	1ddee <nrfx_power_clock_irq_handler+0x46>
   1de04:	40000100 	.word	0x40000100
   1de08:	20004280 	.word	0x20004280
   1de0c:	40000104 	.word	0x40000104

0001de10 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1de10:	2301      	movs	r3, #1
   1de12:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1de16:	f010 0fff 	tst.w	r0, #255	; 0xff
   1de1a:	d012      	beq.n	1de42 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   1de1c:	f04f 0320 	mov.w	r3, #32
   1de20:	f3ef 8111 	mrs	r1, BASEPRI
   1de24:	f383 8811 	msr	BASEPRI, r3
   1de28:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1de2c:	4a06      	ldr	r2, [pc, #24]	; (1de48 <nrfx_gpiote_channel_free+0x38>)
   1de2e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1de30:	ea23 0000 	bic.w	r0, r3, r0
   1de34:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1de36:	f381 8811 	msr	BASEPRI, r1
   1de3a:	f3bf 8f6f 	isb	sy
   1de3e:	4803      	ldr	r0, [pc, #12]	; (1de4c <nrfx_gpiote_channel_free+0x3c>)
   1de40:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1de42:	4803      	ldr	r0, [pc, #12]	; (1de50 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1de44:	4770      	bx	lr
   1de46:	bf00      	nop
   1de48:	20004288 	.word	0x20004288
   1de4c:	0bad0000 	.word	0x0bad0000
   1de50:	0bad0004 	.word	0x0bad0004

0001de54 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1de54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de58:	4686      	mov	lr, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1de5a:	4e16      	ldr	r6, [pc, #88]	; (1deb4 <nrfx_gpiote_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1de5c:	4816      	ldr	r0, [pc, #88]	; (1deb8 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1de5e:	4f17      	ldr	r7, [pc, #92]	; (1debc <nrfx_gpiote_channel_alloc+0x68>)
{
   1de60:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1de62:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1de64:	2501      	movs	r5, #1
   1de66:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1de68:	f04f 0120 	mov.w	r1, #32
   1de6c:	f3ef 8811 	mrs	r8, BASEPRI
   1de70:	f381 8811 	msr	BASEPRI, r1
   1de74:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1de78:	fa22 f103 	lsr.w	r1, r2, r3
   1de7c:	07c9      	lsls	r1, r1, #31
   1de7e:	d50b      	bpl.n	1de98 <nrfx_gpiote_channel_alloc+0x44>
    return m_cb.allocated_channels_mask & (1UL << index);
   1de80:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   1de82:	fa05 fc03 	lsl.w	ip, r5, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1de86:	ea11 0f0c 	tst.w	r1, ip
    m_cb.allocated_channels_mask |= (1UL << index);
   1de8a:	bf01      	itttt	eq
   1de8c:	ea41 010c 	orreq.w	r1, r1, ip
   1de90:	65f1      	streq	r1, [r6, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   1de92:	4638      	moveq	r0, r7
            *p_channel = ch_idx;
   1de94:	f88e 3000 	strbeq.w	r3, [lr]
	__asm__ volatile(
   1de98:	f388 8811 	msr	BASEPRI, r8
   1de9c:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1dea0:	42b8      	cmp	r0, r7
   1dea2:	d005      	beq.n	1deb0 <nrfx_gpiote_channel_alloc+0x5c>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1dea4:	fa05 f303 	lsl.w	r3, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1dea8:	439a      	bics	r2, r3
   1deaa:	f104 0401 	add.w	r4, r4, #1
   1deae:	d1da      	bne.n	1de66 <nrfx_gpiote_channel_alloc+0x12>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1deb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1deb4:	20004288 	.word	0x20004288
   1deb8:	0bad0002 	.word	0x0bad0002
   1debc:	0bad0000 	.word	0x0bad0000

0001dec0 <nvmc_word_write>:
   1dec0:	4a04      	ldr	r2, [pc, #16]	; (1ded4 <nvmc_word_write+0x14>)
   1dec2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1dec6:	07db      	lsls	r3, r3, #31
   1dec8:	d5fb      	bpl.n	1dec2 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1deca:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1decc:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1ded0:	4770      	bx	lr
   1ded2:	bf00      	nop
   1ded4:	4001e000 	.word	0x4001e000

0001ded8 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1ded8:	b510      	push	{r4, lr}
    NRFX_ASSERT(is_valid_address(addr, false));
   1deda:	2100      	movs	r1, #0
{
   1dedc:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));
   1dede:	f00a fb6f 	bl	285c0 <is_valid_address>
   1dee2:	b950      	cbnz	r0, 1defa <nrfx_nvmc_page_erase+0x22>
   1dee4:	4911      	ldr	r1, [pc, #68]	; (1df2c <nrfx_nvmc_page_erase+0x54>)
   1dee6:	4812      	ldr	r0, [pc, #72]	; (1df30 <nrfx_nvmc_page_erase+0x58>)
   1dee8:	f44f 7282 	mov.w	r2, #260	; 0x104
   1deec:	f003 ffed 	bl	21eca <printk>
   1def0:	f44f 7182 	mov.w	r1, #260	; 0x104
   1def4:	480d      	ldr	r0, [pc, #52]	; (1df2c <nrfx_nvmc_page_erase+0x54>)
   1def6:	f004 fa9a 	bl	2242e <assert_post_action>
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1defa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1defe:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1df00:	fbb4 f3f2 	udiv	r3, r4, r2
   1df04:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   1df08:	b973      	cbnz	r3, 1df28 <nrfx_nvmc_page_erase+0x50>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1df0a:	4b0a      	ldr	r3, [pc, #40]	; (1df34 <nrfx_nvmc_page_erase+0x5c>)
   1df0c:	2202      	movs	r2, #2
   1df0e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1df12:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1df16:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1df1a:	07d2      	lsls	r2, r2, #31
   1df1c:	d5fb      	bpl.n	1df16 <nrfx_nvmc_page_erase+0x3e>
    p_reg->CONFIG = (uint32_t)mode;
   1df1e:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1df20:	4805      	ldr	r0, [pc, #20]	; (1df38 <nrfx_nvmc_page_erase+0x60>)
   1df22:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1df26:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1df28:	4804      	ldr	r0, [pc, #16]	; (1df3c <nrfx_nvmc_page_erase+0x64>)
   1df2a:	e7fc      	b.n	1df26 <nrfx_nvmc_page_erase+0x4e>
   1df2c:	0002fb71 	.word	0x0002fb71
   1df30:	0002a026 	.word	0x0002a026
   1df34:	4001e000 	.word	0x4001e000
   1df38:	0bad0000 	.word	0x0bad0000
   1df3c:	0bad000a 	.word	0x0bad000a

0001df40 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1df40:	b570      	push	{r4, r5, r6, lr}
   1df42:	460e      	mov	r6, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   1df44:	2101      	movs	r1, #1
{
   1df46:	4605      	mov	r5, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   1df48:	f00a fb3a 	bl	285c0 <is_valid_address>
   1df4c:	b950      	cbnz	r0, 1df64 <nrfx_nvmc_word_write+0x24>
   1df4e:	4912      	ldr	r1, [pc, #72]	; (1df98 <nrfx_nvmc_word_write+0x58>)
   1df50:	4812      	ldr	r0, [pc, #72]	; (1df9c <nrfx_nvmc_word_write+0x5c>)
   1df52:	f44f 72c9 	mov.w	r2, #402	; 0x192
   1df56:	f003 ffb8 	bl	21eca <printk>
   1df5a:	f44f 71c9 	mov.w	r1, #402	; 0x192
   1df5e:	480e      	ldr	r0, [pc, #56]	; (1df98 <nrfx_nvmc_word_write+0x58>)
   1df60:	f004 fa65 	bl	2242e <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1df64:	07ab      	lsls	r3, r5, #30
   1df66:	d00a      	beq.n	1df7e <nrfx_nvmc_word_write+0x3e>
   1df68:	490b      	ldr	r1, [pc, #44]	; (1df98 <nrfx_nvmc_word_write+0x58>)
   1df6a:	480c      	ldr	r0, [pc, #48]	; (1df9c <nrfx_nvmc_word_write+0x5c>)
   1df6c:	f240 1293 	movw	r2, #403	; 0x193
   1df70:	f003 ffab 	bl	21eca <printk>
   1df74:	f240 1193 	movw	r1, #403	; 0x193
   1df78:	4807      	ldr	r0, [pc, #28]	; (1df98 <nrfx_nvmc_word_write+0x58>)
   1df7a:	f004 fa58 	bl	2242e <assert_post_action>
   1df7e:	4c08      	ldr	r4, [pc, #32]	; (1dfa0 <nrfx_nvmc_word_write+0x60>)
   1df80:	2301      	movs	r3, #1
   1df82:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1df86:	4631      	mov	r1, r6
   1df88:	4628      	mov	r0, r5
   1df8a:	f7ff ff99 	bl	1dec0 <nvmc_word_write>
   1df8e:	2300      	movs	r3, #0
   1df90:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   1df94:	bd70      	pop	{r4, r5, r6, pc}
   1df96:	bf00      	nop
   1df98:	0002fb71 	.word	0x0002fb71
   1df9c:	0002a026 	.word	0x0002a026
   1dfa0:	4001e000 	.word	0x4001e000

0001dfa4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1dfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1dfa6:	4b10      	ldr	r3, [pc, #64]	; (1dfe8 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1dfa8:	4f10      	ldr	r7, [pc, #64]	; (1dfec <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1dfaa:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1dfae:	3001      	adds	r0, #1
   1dfb0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1dfb4:	42ae      	cmp	r6, r5
   1dfb6:	d800      	bhi.n	1dfba <z_sys_init_run_level+0x16>
		}
	}
}
   1dfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1dfba:	e9d5 3400 	ldrd	r3, r4, [r5]
   1dfbe:	4620      	mov	r0, r4
   1dfc0:	4798      	blx	r3
   1dfc2:	b170      	cbz	r0, 1dfe2 <z_sys_init_run_level+0x3e>
   1dfc4:	b16c      	cbz	r4, 1dfe2 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1dfc6:	1be4      	subs	r4, r4, r7
   1dfc8:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1dfca:	0961      	lsrs	r1, r4, #5
   1dfcc:	4a08      	ldr	r2, [pc, #32]	; (1dff0 <z_sys_init_run_level+0x4c>)
   1dfce:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1dfd2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1dfd6:	2301      	movs	r3, #1
   1dfd8:	fa03 f404 	lsl.w	r4, r3, r4
   1dfdc:	4304      	orrs	r4, r0
   1dfde:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1dfe2:	3508      	adds	r5, #8
   1dfe4:	e7e6      	b.n	1dfb4 <z_sys_init_run_level+0x10>
   1dfe6:	bf00      	nop
   1dfe8:	00029ab4 	.word	0x00029ab4
   1dfec:	20000e1c 	.word	0x20000e1c
   1dff0:	20000e9c 	.word	0x20000e9c

0001dff4 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1dff4:	4b08      	ldr	r3, [pc, #32]	; (1e018 <z_device_ready+0x24>)
   1dff6:	1ac0      	subs	r0, r0, r3
   1dff8:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1dffa:	0942      	lsrs	r2, r0, #5
   1dffc:	4b07      	ldr	r3, [pc, #28]	; (1e01c <z_device_ready+0x28>)
   1dffe:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1e002:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1e006:	2301      	movs	r3, #1
   1e008:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1e00c:	4210      	tst	r0, r2
}
   1e00e:	bf0c      	ite	eq
   1e010:	4618      	moveq	r0, r3
   1e012:	2000      	movne	r0, #0
   1e014:	4770      	bx	lr
   1e016:	bf00      	nop
   1e018:	20000e1c 	.word	0x20000e1c
   1e01c:	20000e9c 	.word	0x20000e9c

0001e020 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1e020:	4911      	ldr	r1, [pc, #68]	; (1e068 <z_impl_device_get_binding+0x48>)
{
   1e022:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1e024:	4c11      	ldr	r4, [pc, #68]	; (1e06c <z_impl_device_get_binding+0x4c>)
{
   1e026:	4605      	mov	r5, r0
   1e028:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1e02a:	428c      	cmp	r4, r1
   1e02c:	d104      	bne.n	1e038 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1e02e:	4c0f      	ldr	r4, [pc, #60]	; (1e06c <z_impl_device_get_binding+0x4c>)
   1e030:	42b4      	cmp	r4, r6
   1e032:	d10a      	bne.n	1e04a <z_impl_device_get_binding+0x2a>
	return NULL;
   1e034:	2400      	movs	r4, #0
   1e036:	e014      	b.n	1e062 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1e038:	4620      	mov	r0, r4
   1e03a:	f7ff ffdb 	bl	1dff4 <z_device_ready>
   1e03e:	b110      	cbz	r0, 1e046 <z_impl_device_get_binding+0x26>
   1e040:	6823      	ldr	r3, [r4, #0]
   1e042:	42ab      	cmp	r3, r5
   1e044:	d00d      	beq.n	1e062 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1e046:	3410      	adds	r4, #16
   1e048:	e7ef      	b.n	1e02a <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1e04a:	4620      	mov	r0, r4
   1e04c:	f7ff ffd2 	bl	1dff4 <z_device_ready>
   1e050:	b908      	cbnz	r0, 1e056 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1e052:	3410      	adds	r4, #16
   1e054:	e7ec      	b.n	1e030 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1e056:	6821      	ldr	r1, [r4, #0]
   1e058:	4628      	mov	r0, r5
   1e05a:	f006 f836 	bl	240ca <strcmp>
   1e05e:	2800      	cmp	r0, #0
   1e060:	d1f7      	bne.n	1e052 <z_impl_device_get_binding+0x32>
}
   1e062:	4620      	mov	r0, r4
   1e064:	bd70      	pop	{r4, r5, r6, pc}
   1e066:	bf00      	nop
   1e068:	20000e9c 	.word	0x20000e9c
   1e06c:	20000e1c 	.word	0x20000e1c

0001e070 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1e070:	4b01      	ldr	r3, [pc, #4]	; (1e078 <z_impl_z_errno+0x8>)
   1e072:	6898      	ldr	r0, [r3, #8]
}
   1e074:	3070      	adds	r0, #112	; 0x70
   1e076:	4770      	bx	lr
   1e078:	200042f0 	.word	0x200042f0

0001e07c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1e07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e07e:	4604      	mov	r4, r0
   1e080:	460e      	mov	r6, r1
	__asm__ volatile(
   1e082:	f04f 0320 	mov.w	r3, #32
   1e086:	f3ef 8711 	mrs	r7, BASEPRI
   1e08a:	f383 8811 	msr	BASEPRI, r3
   1e08e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1e092:	f001 fded 	bl	1fc70 <z_impl_k_current_get>
   1e096:	2c04      	cmp	r4, #4
   1e098:	bf96      	itet	ls
   1e09a:	4b1e      	ldrls	r3, [pc, #120]	; (1e114 <z_fatal_error+0x98>)
   1e09c:	4b1e      	ldrhi	r3, [pc, #120]	; (1e118 <z_fatal_error+0x9c>)
   1e09e:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1e0a2:	2200      	movs	r2, #0
   1e0a4:	4605      	mov	r5, r0
   1e0a6:	9200      	str	r2, [sp, #0]
   1e0a8:	2145      	movs	r1, #69	; 0x45
   1e0aa:	4622      	mov	r2, r4
   1e0ac:	481b      	ldr	r0, [pc, #108]	; (1e11c <z_fatal_error+0xa0>)
   1e0ae:	f003 ff0c 	bl	21eca <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1e0b2:	b13e      	cbz	r6, 1e0c4 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1e0b4:	69f3      	ldr	r3, [r6, #28]
   1e0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1e0ba:	b11b      	cbz	r3, 1e0c4 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   1e0bc:	2145      	movs	r1, #69	; 0x45
   1e0be:	4818      	ldr	r0, [pc, #96]	; (1e120 <z_fatal_error+0xa4>)
   1e0c0:	f003 ff03 	bl	21eca <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1e0c4:	b135      	cbz	r5, 1e0d4 <z_fatal_error+0x58>
   1e0c6:	4628      	mov	r0, r5
   1e0c8:	f00a fb57 	bl	2877a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1e0cc:	4603      	mov	r3, r0
   1e0ce:	b108      	cbz	r0, 1e0d4 <z_fatal_error+0x58>
   1e0d0:	7802      	ldrb	r2, [r0, #0]
   1e0d2:	b902      	cbnz	r2, 1e0d6 <z_fatal_error+0x5a>
		thread_name = "unknown";
   1e0d4:	4b13      	ldr	r3, [pc, #76]	; (1e124 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1e0d6:	4814      	ldr	r0, [pc, #80]	; (1e128 <z_fatal_error+0xac>)
   1e0d8:	462a      	mov	r2, r5
   1e0da:	2145      	movs	r1, #69	; 0x45
   1e0dc:	f003 fef5 	bl	21eca <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1e0e0:	4631      	mov	r1, r6
   1e0e2:	4620      	mov	r0, r4
   1e0e4:	f7ff fbbe 	bl	1d864 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1e0e8:	2c04      	cmp	r4, #4
   1e0ea:	d108      	bne.n	1e0fe <z_fatal_error+0x82>
   1e0ec:	490f      	ldr	r1, [pc, #60]	; (1e12c <z_fatal_error+0xb0>)
   1e0ee:	4810      	ldr	r0, [pc, #64]	; (1e130 <z_fatal_error+0xb4>)
   1e0f0:	228f      	movs	r2, #143	; 0x8f
   1e0f2:	f003 feea 	bl	21eca <printk>
   1e0f6:	218f      	movs	r1, #143	; 0x8f
   1e0f8:	480c      	ldr	r0, [pc, #48]	; (1e12c <z_fatal_error+0xb0>)
   1e0fa:	f004 f998 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1e0fe:	f387 8811 	msr	BASEPRI, r7
   1e102:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1e106:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1e108:	b003      	add	sp, #12
   1e10a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1e10e:	f7e6 bee7 	b.w	4ee0 <z_impl_k_thread_abort>
   1e112:	bf00      	nop
   1e114:	00029acc 	.word	0x00029acc
   1e118:	0002fbf7 	.word	0x0002fbf7
   1e11c:	0002fc0d 	.word	0x0002fc0d
   1e120:	0002fc3a 	.word	0x0002fc3a
   1e124:	0002fc05 	.word	0x0002fc05
   1e128:	0002fc60 	.word	0x0002fc60
   1e12c:	0002fc7d 	.word	0x0002fc7d
   1e130:	0002a026 	.word	0x0002a026

0001e134 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1e134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   1e136:	4e16      	ldr	r6, [pc, #88]	; (1e190 <idle+0x5c>)
{
   1e138:	4605      	mov	r5, r0
			cpu->pending_abort = NULL;
   1e13a:	2700      	movs	r7, #0
	__asm__ volatile(
   1e13c:	f04f 0220 	mov.w	r2, #32
   1e140:	f3ef 8311 	mrs	r3, BASEPRI
   1e144:	f382 8811 	msr	BASEPRI, r2
   1e148:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1e14c:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1e14e:	b188      	cbz	r0, 1e174 <idle+0x40>
			cpu->pending_abort = NULL;
   1e150:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1e152:	f383 8811 	msr	BASEPRI, r3
   1e156:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   1e15a:	f001 f989 	bl	1f470 <z_thread_single_abort>
	__asm__ volatile(
   1e15e:	f04f 0320 	mov.w	r3, #32
   1e162:	f3ef 8011 	mrs	r0, BASEPRI
   1e166:	f383 8811 	msr	BASEPRI, r3
   1e16a:	f3bf 8f6f 	isb	sy
   1e16e:	f00a faac 	bl	286ca <z_reschedule_irqlock>
   1e172:	e7e3      	b.n	1e13c <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   1e174:	f002 fa66 	bl	20644 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1e178:	2101      	movs	r1, #1
   1e17a:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
   1e17c:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1e17e:	bfd8      	it	le
   1e180:	4608      	movle	r0, r1
   1e182:	f002 fa95 	bl	206b0 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   1e186:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   1e188:	f7e6 fbee 	bl	4968 <arch_cpu_idle>
   1e18c:	e7d6      	b.n	1e13c <idle+0x8>
   1e18e:	bf00      	nop
   1e190:	200042f0 	.word	0x200042f0

0001e194 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1e194:	4802      	ldr	r0, [pc, #8]	; (1e1a0 <z_bss_zero+0xc>)
   1e196:	4a03      	ldr	r2, [pc, #12]	; (1e1a4 <z_bss_zero+0x10>)
   1e198:	2100      	movs	r1, #0
   1e19a:	1a12      	subs	r2, r2, r0
   1e19c:	f006 b801 	b.w	241a2 <memset>
   1e1a0:	20001188 	.word	0x20001188
   1e1a4:	20004570 	.word	0x20004570

0001e1a8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1e1a8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   1e1aa:	4b0a      	ldr	r3, [pc, #40]	; (1e1d4 <bg_thread_main+0x2c>)
   1e1ac:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1e1ae:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1e1b0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1e1b2:	f7ff fef7 	bl	1dfa4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1e1b6:	f00a fb53 	bl	28860 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1e1ba:	2003      	movs	r0, #3
   1e1bc:	f7ff fef2 	bl	1dfa4 <z_sys_init_run_level>

	z_init_static_threads();
   1e1c0:	f001 fed2 	bl	1ff68 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1e1c4:	f7e3 ff6a 	bl	209c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1e1c8:	4a03      	ldr	r2, [pc, #12]	; (1e1d8 <bg_thread_main+0x30>)
   1e1ca:	7b13      	ldrb	r3, [r2, #12]
   1e1cc:	f023 0301 	bic.w	r3, r3, #1
   1e1d0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1e1d2:	bd08      	pop	{r3, pc}
   1e1d4:	2000456e 	.word	0x2000456e
   1e1d8:	200020e0 	.word	0x200020e0

0001e1dc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1e1dc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1e1e0:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1e2d8 <z_cstart+0xfc>
   1e1e4:	b0ab      	sub	sp, #172	; 0xac
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1e1e6:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1e1ea:	4d33      	ldr	r5, [pc, #204]	; (1e2b8 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1e1ec:	4e33      	ldr	r6, [pc, #204]	; (1e2bc <z_cstart+0xe0>)
   1e1ee:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e1f0:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 1e2dc <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
   1e1f4:	4f32      	ldr	r7, [pc, #200]	; (1e2c0 <z_cstart+0xe4>)
   1e1f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e1fa:	2400      	movs	r4, #0
   1e1fc:	616b      	str	r3, [r5, #20]
   1e1fe:	23e0      	movs	r3, #224	; 0xe0
   1e200:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1e204:	77ec      	strb	r4, [r5, #31]
   1e206:	762c      	strb	r4, [r5, #24]
   1e208:	766c      	strb	r4, [r5, #25]
   1e20a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1e20c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e20e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1e212:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1e214:	f7e6 fe42 	bl	4e9c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1e218:	f7e6 fba0 	bl	495c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1e21c:	f04f 33ff 	mov.w	r3, #4294967295
   1e220:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1e222:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1e224:	4d27      	ldr	r5, [pc, #156]	; (1e2c4 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1e226:	f240 1301 	movw	r3, #257	; 0x101
   1e22a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1e22e:	ab06      	add	r3, sp, #24
   1e230:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1e232:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1e234:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   1e238:	f7ff feb4 	bl	1dfa4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1e23c:	2001      	movs	r0, #1
   1e23e:	f7ff feb1 	bl	1dfa4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e242:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1e246:	f001 fbc9 	bl	1f9dc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e24a:	4b1f      	ldr	r3, [pc, #124]	; (1e2c8 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   1e24c:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e24e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e252:	491e      	ldr	r1, [pc, #120]	; (1e2cc <z_cstart+0xf0>)
   1e254:	9305      	str	r3, [sp, #20]
   1e256:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1e25a:	4643      	mov	r3, r8
   1e25c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1e260:	9400      	str	r4, [sp, #0]
   1e262:	4630      	mov	r0, r6
   1e264:	f001 fdc8 	bl	1fdf8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e268:	7b73      	ldrb	r3, [r6, #13]
   1e26a:	4682      	mov	sl, r0
   1e26c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1e270:	4630      	mov	r0, r6
   1e272:	7373      	strb	r3, [r6, #13]
   1e274:	f000 ff36 	bl	1f0e4 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1e278:	230f      	movs	r3, #15
   1e27a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1e27e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1e282:	4b13      	ldr	r3, [pc, #76]	; (1e2d0 <z_cstart+0xf4>)
   1e284:	4913      	ldr	r1, [pc, #76]	; (1e2d4 <z_cstart+0xf8>)
   1e286:	e9cd b404 	strd	fp, r4, [sp, #16]
   1e28a:	e9cd 5400 	strd	r5, r4, [sp]
   1e28e:	4638      	mov	r0, r7
   1e290:	f001 fdb2 	bl	1fdf8 <z_setup_new_thread>
   1e294:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1e296:	60ef      	str	r7, [r5, #12]
   1e298:	f023 0304 	bic.w	r3, r3, #4
   1e29c:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1e29e:	f105 031c 	add.w	r3, r5, #28
		_kernel.cpus[i].id = i;
   1e2a2:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1e2a4:	f8c5 9004 	str.w	r9, [r5, #4]
	list->tail = (sys_dnode_t *)list;
   1e2a8:	e9c5 3307 	strd	r3, r3, [r5, #28]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1e2ac:	4642      	mov	r2, r8
   1e2ae:	4651      	mov	r1, sl
   1e2b0:	4630      	mov	r0, r6
   1e2b2:	f7e6 fb39 	bl	4928 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1e2b6:	bf00      	nop
   1e2b8:	e000ed00 	.word	0xe000ed00
   1e2bc:	200020e0 	.word	0x200020e0
   1e2c0:	20002050 	.word	0x20002050
   1e2c4:	200042f0 	.word	0x200042f0
   1e2c8:	0002be14 	.word	0x0002be14
   1e2cc:	200059c0 	.word	0x200059c0
   1e2d0:	0001e135 	.word	0x0001e135
   1e2d4:	20005de0 	.word	0x20005de0
   1e2d8:	20006760 	.word	0x20006760
   1e2dc:	0001e1a9 	.word	0x0001e1a9

0001e2e0 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1e2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1e2e2:	4d0d      	ldr	r5, [pc, #52]	; (1e318 <statics_init+0x38>)
   1e2e4:	4c0d      	ldr	r4, [pc, #52]	; (1e31c <statics_init+0x3c>)
   1e2e6:	4e0e      	ldr	r6, [pc, #56]	; (1e320 <statics_init+0x40>)
   1e2e8:	462f      	mov	r7, r5
   1e2ea:	42ac      	cmp	r4, r5
   1e2ec:	d908      	bls.n	1e300 <statics_init+0x20>
   1e2ee:	4631      	mov	r1, r6
   1e2f0:	480c      	ldr	r0, [pc, #48]	; (1e324 <statics_init+0x44>)
   1e2f2:	2215      	movs	r2, #21
   1e2f4:	f003 fde9 	bl	21eca <printk>
   1e2f8:	2115      	movs	r1, #21
   1e2fa:	4630      	mov	r0, r6
   1e2fc:	f004 f897 	bl	2242e <assert_post_action>
   1e300:	42bc      	cmp	r4, r7
   1e302:	d301      	bcc.n	1e308 <statics_init+0x28>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1e304:	2000      	movs	r0, #0
   1e306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1e308:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1e30c:	4620      	mov	r0, r4
   1e30e:	f00a f97b 	bl	28608 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1e312:	3418      	adds	r4, #24
   1e314:	e7e9      	b.n	1e2ea <statics_init+0xa>
   1e316:	bf00      	nop
   1e318:	20000f10 	.word	0x20000f10
   1e31c:	20000f10 	.word	0x20000f10
   1e320:	0002fca2 	.word	0x0002fca2
   1e324:	0002a026 	.word	0x0002a026

0001e328 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1e328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e32c:	b087      	sub	sp, #28
   1e32e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   1e332:	4606      	mov	r6, r0
   1e334:	460f      	mov	r7, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   1e336:	4640      	mov	r0, r8
   1e338:	4649      	mov	r1, r9
{
   1e33a:	4692      	mov	sl, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   1e33c:	f00a fa97 	bl	2886e <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1e340:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   1e344:	9005      	str	r0, [sp, #20]
   1e346:	468b      	mov	fp, r1
   1e348:	f04f 0320 	mov.w	r3, #32
   1e34c:	f3ef 8411 	mrs	r4, BASEPRI
   1e350:	f383 8811 	msr	BASEPRI, r3
   1e354:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e358:	4628      	mov	r0, r5
   1e35a:	f001 fe85 	bl	20068 <z_spin_lock_valid>
   1e35e:	b940      	cbnz	r0, 1e372 <k_heap_aligned_alloc+0x4a>
   1e360:	4936      	ldr	r1, [pc, #216]	; (1e43c <k_heap_aligned_alloc+0x114>)
   1e362:	4837      	ldr	r0, [pc, #220]	; (1e440 <k_heap_aligned_alloc+0x118>)
   1e364:	227c      	movs	r2, #124	; 0x7c
   1e366:	f003 fdb0 	bl	21eca <printk>
   1e36a:	217c      	movs	r1, #124	; 0x7c
   1e36c:	4833      	ldr	r0, [pc, #204]	; (1e43c <k_heap_aligned_alloc+0x114>)
   1e36e:	f004 f85e 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1e372:	4628      	mov	r0, r5
   1e374:	f001 fe96 	bl	200a4 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e378:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1e37c:	b15b      	cbz	r3, 1e396 <k_heap_aligned_alloc+0x6e>
   1e37e:	ea58 0309 	orrs.w	r3, r8, r9
   1e382:	d008      	beq.n	1e396 <k_heap_aligned_alloc+0x6e>
   1e384:	492f      	ldr	r1, [pc, #188]	; (1e444 <k_heap_aligned_alloc+0x11c>)
   1e386:	482e      	ldr	r0, [pc, #184]	; (1e440 <k_heap_aligned_alloc+0x118>)
   1e388:	2224      	movs	r2, #36	; 0x24
   1e38a:	f003 fd9e 	bl	21eca <printk>
   1e38e:	2124      	movs	r1, #36	; 0x24
   1e390:	482c      	ldr	r0, [pc, #176]	; (1e444 <k_heap_aligned_alloc+0x11c>)
   1e392:	f004 f84c 	bl	2242e <assert_post_action>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1e396:	f106 030c 	add.w	r3, r6, #12
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e39a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1e43c <k_heap_aligned_alloc+0x114>
   1e39e:	9304      	str	r3, [sp, #16]
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1e3a0:	4652      	mov	r2, sl
   1e3a2:	4639      	mov	r1, r7
   1e3a4:	4630      	mov	r0, r6
   1e3a6:	f7e4 fa2f 	bl	2808 <sys_heap_aligned_alloc>
   1e3aa:	4680      	mov	r8, r0
		now = z_tick_get();
   1e3ac:	f002 fa6e 	bl	2088c <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   1e3b0:	f1b8 0f00 	cmp.w	r8, #0
   1e3b4:	d014      	beq.n	1e3e0 <k_heap_aligned_alloc+0xb8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e3b6:	4628      	mov	r0, r5
   1e3b8:	f001 fe64 	bl	20084 <z_spin_unlock_valid>
   1e3bc:	b940      	cbnz	r0, 1e3d0 <k_heap_aligned_alloc+0xa8>
   1e3be:	491f      	ldr	r1, [pc, #124]	; (1e43c <k_heap_aligned_alloc+0x114>)
   1e3c0:	481f      	ldr	r0, [pc, #124]	; (1e440 <k_heap_aligned_alloc+0x118>)
   1e3c2:	22a7      	movs	r2, #167	; 0xa7
   1e3c4:	f003 fd81 	bl	21eca <printk>
   1e3c8:	21a7      	movs	r1, #167	; 0xa7
   1e3ca:	481c      	ldr	r0, [pc, #112]	; (1e43c <k_heap_aligned_alloc+0x114>)
   1e3cc:	f004 f82f 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1e3d0:	f384 8811 	msr	BASEPRI, r4
   1e3d4:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1e3d8:	4640      	mov	r0, r8
   1e3da:	b007      	add	sp, #28
   1e3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   1e3e0:	9b05      	ldr	r3, [sp, #20]
   1e3e2:	1a1b      	subs	r3, r3, r0
   1e3e4:	9302      	str	r3, [sp, #8]
   1e3e6:	eb6b 0301 	sbc.w	r3, fp, r1
   1e3ea:	9303      	str	r3, [sp, #12]
   1e3ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1e3f0:	2a01      	cmp	r2, #1
   1e3f2:	f173 0300 	sbcs.w	r3, r3, #0
   1e3f6:	dbde      	blt.n	1e3b6 <k_heap_aligned_alloc+0x8e>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1e3f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1e3fc:	4621      	mov	r1, r4
   1e3fe:	e9cd 2300 	strd	r2, r3, [sp]
   1e402:	4628      	mov	r0, r5
   1e404:	9a04      	ldr	r2, [sp, #16]
   1e406:	f001 f9df 	bl	1f7c8 <z_pend_curr>
	__asm__ volatile(
   1e40a:	f04f 0320 	mov.w	r3, #32
   1e40e:	f3ef 8411 	mrs	r4, BASEPRI
   1e412:	f383 8811 	msr	BASEPRI, r3
   1e416:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e41a:	4628      	mov	r0, r5
   1e41c:	f001 fe24 	bl	20068 <z_spin_lock_valid>
   1e420:	b940      	cbnz	r0, 1e434 <k_heap_aligned_alloc+0x10c>
   1e422:	4649      	mov	r1, r9
   1e424:	4806      	ldr	r0, [pc, #24]	; (1e440 <k_heap_aligned_alloc+0x118>)
   1e426:	227c      	movs	r2, #124	; 0x7c
   1e428:	f003 fd4f 	bl	21eca <printk>
   1e42c:	217c      	movs	r1, #124	; 0x7c
   1e42e:	4648      	mov	r0, r9
   1e430:	f003 fffd 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1e434:	4628      	mov	r0, r5
   1e436:	f001 fe35 	bl	200a4 <z_spin_lock_set_owner>
	return k;
   1e43a:	e7b1      	b.n	1e3a0 <k_heap_aligned_alloc+0x78>
   1e43c:	0002a0e8 	.word	0x0002a0e8
   1e440:	0002a026 	.word	0x0002a026
   1e444:	0002fca2 	.word	0x0002fca2

0001e448 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   1e448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e44a:	4605      	mov	r5, r0
   1e44c:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1e44e:	f100 0414 	add.w	r4, r0, #20
   1e452:	f04f 0320 	mov.w	r3, #32
   1e456:	f3ef 8611 	mrs	r6, BASEPRI
   1e45a:	f383 8811 	msr	BASEPRI, r3
   1e45e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e462:	4620      	mov	r0, r4
   1e464:	f001 fe00 	bl	20068 <z_spin_lock_valid>
   1e468:	b940      	cbnz	r0, 1e47c <k_heap_free+0x34>
   1e46a:	4916      	ldr	r1, [pc, #88]	; (1e4c4 <k_heap_free+0x7c>)
   1e46c:	4816      	ldr	r0, [pc, #88]	; (1e4c8 <k_heap_free+0x80>)
   1e46e:	227c      	movs	r2, #124	; 0x7c
   1e470:	f003 fd2b 	bl	21eca <printk>
   1e474:	217c      	movs	r1, #124	; 0x7c
   1e476:	4813      	ldr	r0, [pc, #76]	; (1e4c4 <k_heap_free+0x7c>)
   1e478:	f003 ffd9 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1e47c:	4620      	mov	r0, r4
   1e47e:	f001 fe11 	bl	200a4 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   1e482:	4628      	mov	r0, r5
   1e484:	4639      	mov	r1, r7
   1e486:	f7e4 f97f 	bl	2788 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   1e48a:	f105 000c 	add.w	r0, r5, #12
   1e48e:	f00a f947 	bl	28720 <z_unpend_all>
   1e492:	b128      	cbz	r0, 1e4a0 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   1e494:	4631      	mov	r1, r6
   1e496:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1e498:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1e49c:	f000 bc50 	b.w	1ed40 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e4a0:	4620      	mov	r0, r4
   1e4a2:	f001 fdef 	bl	20084 <z_spin_unlock_valid>
   1e4a6:	b940      	cbnz	r0, 1e4ba <k_heap_free+0x72>
   1e4a8:	4906      	ldr	r1, [pc, #24]	; (1e4c4 <k_heap_free+0x7c>)
   1e4aa:	4807      	ldr	r0, [pc, #28]	; (1e4c8 <k_heap_free+0x80>)
   1e4ac:	22a7      	movs	r2, #167	; 0xa7
   1e4ae:	f003 fd0c 	bl	21eca <printk>
   1e4b2:	21a7      	movs	r1, #167	; 0xa7
   1e4b4:	4803      	ldr	r0, [pc, #12]	; (1e4c4 <k_heap_free+0x7c>)
   1e4b6:	f003 ffba 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1e4ba:	f386 8811 	msr	BASEPRI, r6
   1e4be:	f3bf 8f6f 	isb	sy
}
   1e4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e4c4:	0002a0e8 	.word	0x0002a0e8
   1e4c8:	0002a026 	.word	0x0002a026

0001e4cc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1e4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e4d0:	4d14      	ldr	r5, [pc, #80]	; (1e524 <init_mem_slab_module+0x58>)
   1e4d2:	4c15      	ldr	r4, [pc, #84]	; (1e528 <init_mem_slab_module+0x5c>)
   1e4d4:	4e15      	ldr	r6, [pc, #84]	; (1e52c <init_mem_slab_module+0x60>)
   1e4d6:	46a8      	mov	r8, r5
   1e4d8:	42ac      	cmp	r4, r5
   1e4da:	d908      	bls.n	1e4ee <init_mem_slab_module+0x22>
   1e4dc:	4631      	mov	r1, r6
   1e4de:	4814      	ldr	r0, [pc, #80]	; (1e530 <init_mem_slab_module+0x64>)
   1e4e0:	2242      	movs	r2, #66	; 0x42
   1e4e2:	f003 fcf2 	bl	21eca <printk>
   1e4e6:	2142      	movs	r1, #66	; 0x42
   1e4e8:	4630      	mov	r0, r6
   1e4ea:	f003 ffa0 	bl	2242e <assert_post_action>
   1e4ee:	4544      	cmp	r4, r8
   1e4f0:	d302      	bcc.n	1e4f8 <init_mem_slab_module+0x2c>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1e4f2:	2000      	movs	r0, #0
	return rc;
}
   1e4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1e4f8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1e4fc:	ea42 0301 	orr.w	r3, r2, r1
   1e500:	f013 0303 	ands.w	r3, r3, #3
   1e504:	d10b      	bne.n	1e51e <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
   1e506:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   1e508:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e50a:	4283      	cmp	r3, r0
   1e50c:	d101      	bne.n	1e512 <init_mem_slab_module+0x46>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e50e:	341c      	adds	r4, #28
   1e510:	e7e2      	b.n	1e4d8 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   1e512:	6967      	ldr	r7, [r4, #20]
   1e514:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e516:	3301      	adds	r3, #1
		slab->free_list = p;
   1e518:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   1e51a:	440a      	add	r2, r1
   1e51c:	e7f5      	b.n	1e50a <init_mem_slab_module+0x3e>
		return -EINVAL;
   1e51e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1e522:	e7e7      	b.n	1e4f4 <init_mem_slab_module+0x28>
   1e524:	20000f10 	.word	0x20000f10
   1e528:	20000ea0 	.word	0x20000ea0
   1e52c:	0002fcc4 	.word	0x0002fcc4
   1e530:	0002a026 	.word	0x0002a026

0001e534 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1e534:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e538:	4604      	mov	r4, r0
   1e53a:	460d      	mov	r5, r1
   1e53c:	4616      	mov	r6, r2
   1e53e:	461f      	mov	r7, r3
	__asm__ volatile(
   1e540:	f04f 0320 	mov.w	r3, #32
   1e544:	f3ef 8811 	mrs	r8, BASEPRI
   1e548:	f383 8811 	msr	BASEPRI, r3
   1e54c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e550:	4821      	ldr	r0, [pc, #132]	; (1e5d8 <k_mem_slab_alloc+0xa4>)
   1e552:	f001 fd89 	bl	20068 <z_spin_lock_valid>
   1e556:	b940      	cbnz	r0, 1e56a <k_mem_slab_alloc+0x36>
   1e558:	4920      	ldr	r1, [pc, #128]	; (1e5dc <k_mem_slab_alloc+0xa8>)
   1e55a:	4821      	ldr	r0, [pc, #132]	; (1e5e0 <k_mem_slab_alloc+0xac>)
   1e55c:	227c      	movs	r2, #124	; 0x7c
   1e55e:	f003 fcb4 	bl	21eca <printk>
   1e562:	217c      	movs	r1, #124	; 0x7c
   1e564:	481d      	ldr	r0, [pc, #116]	; (1e5dc <k_mem_slab_alloc+0xa8>)
   1e566:	f003 ff62 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1e56a:	481b      	ldr	r0, [pc, #108]	; (1e5d8 <k_mem_slab_alloc+0xa4>)
   1e56c:	f001 fd9a 	bl	200a4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1e570:	6963      	ldr	r3, [r4, #20]
   1e572:	b1c3      	cbz	r3, 1e5a6 <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   1e574:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   1e576:	681b      	ldr	r3, [r3, #0]
   1e578:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   1e57a:	69a3      	ldr	r3, [r4, #24]
   1e57c:	3301      	adds	r3, #1
   1e57e:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1e580:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e582:	4815      	ldr	r0, [pc, #84]	; (1e5d8 <k_mem_slab_alloc+0xa4>)
   1e584:	f001 fd7e 	bl	20084 <z_spin_unlock_valid>
   1e588:	b940      	cbnz	r0, 1e59c <k_mem_slab_alloc+0x68>
   1e58a:	4914      	ldr	r1, [pc, #80]	; (1e5dc <k_mem_slab_alloc+0xa8>)
   1e58c:	4814      	ldr	r0, [pc, #80]	; (1e5e0 <k_mem_slab_alloc+0xac>)
   1e58e:	22a7      	movs	r2, #167	; 0xa7
   1e590:	f003 fc9b 	bl	21eca <printk>
   1e594:	21a7      	movs	r1, #167	; 0xa7
   1e596:	4811      	ldr	r0, [pc, #68]	; (1e5dc <k_mem_slab_alloc+0xa8>)
   1e598:	f003 ff49 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1e59c:	f388 8811 	msr	BASEPRI, r8
   1e5a0:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1e5a4:	e013      	b.n	1e5ce <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e5a6:	ea56 0207 	orrs.w	r2, r6, r7
   1e5aa:	d103      	bne.n	1e5b4 <k_mem_slab_alloc+0x80>
		*mem = NULL;
   1e5ac:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   1e5ae:	f06f 040b 	mvn.w	r4, #11
   1e5b2:	e7e6      	b.n	1e582 <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1e5b4:	4622      	mov	r2, r4
   1e5b6:	e9cd 6700 	strd	r6, r7, [sp]
   1e5ba:	4641      	mov	r1, r8
   1e5bc:	4806      	ldr	r0, [pc, #24]	; (1e5d8 <k_mem_slab_alloc+0xa4>)
   1e5be:	f001 f903 	bl	1f7c8 <z_pend_curr>
		if (result == 0) {
   1e5c2:	4604      	mov	r4, r0
   1e5c4:	b918      	cbnz	r0, 1e5ce <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   1e5c6:	4b07      	ldr	r3, [pc, #28]	; (1e5e4 <k_mem_slab_alloc+0xb0>)
   1e5c8:	689b      	ldr	r3, [r3, #8]
   1e5ca:	695b      	ldr	r3, [r3, #20]
   1e5cc:	602b      	str	r3, [r5, #0]
}
   1e5ce:	4620      	mov	r0, r4
   1e5d0:	b002      	add	sp, #8
   1e5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e5d6:	bf00      	nop
   1e5d8:	200042e8 	.word	0x200042e8
   1e5dc:	0002a0e8 	.word	0x0002a0e8
   1e5e0:	0002a026 	.word	0x0002a026
   1e5e4:	200042f0 	.word	0x200042f0

0001e5e8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1e5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e5ea:	4604      	mov	r4, r0
   1e5ec:	460d      	mov	r5, r1
	__asm__ volatile(
   1e5ee:	f04f 0320 	mov.w	r3, #32
   1e5f2:	f3ef 8611 	mrs	r6, BASEPRI
   1e5f6:	f383 8811 	msr	BASEPRI, r3
   1e5fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e5fe:	481e      	ldr	r0, [pc, #120]	; (1e678 <k_mem_slab_free+0x90>)
   1e600:	f001 fd32 	bl	20068 <z_spin_lock_valid>
   1e604:	b940      	cbnz	r0, 1e618 <k_mem_slab_free+0x30>
   1e606:	491d      	ldr	r1, [pc, #116]	; (1e67c <k_mem_slab_free+0x94>)
   1e608:	481d      	ldr	r0, [pc, #116]	; (1e680 <k_mem_slab_free+0x98>)
   1e60a:	227c      	movs	r2, #124	; 0x7c
   1e60c:	f003 fc5d 	bl	21eca <printk>
   1e610:	217c      	movs	r1, #124	; 0x7c
   1e612:	481a      	ldr	r0, [pc, #104]	; (1e67c <k_mem_slab_free+0x94>)
   1e614:	f003 ff0b 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1e618:	4817      	ldr	r0, [pc, #92]	; (1e678 <k_mem_slab_free+0x90>)
   1e61a:	f001 fd43 	bl	200a4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1e61e:	6967      	ldr	r7, [r4, #20]
   1e620:	b97f      	cbnz	r7, 1e642 <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1e622:	4620      	mov	r0, r4
   1e624:	f001 f972 	bl	1f90c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1e628:	b158      	cbz	r0, 1e642 <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1e62a:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1e62c:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1e62e:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
			z_ready_thread(pending_thread);
   1e632:	f000 fd57 	bl	1f0e4 <z_ready_thread>
			z_reschedule(&lock, key);
   1e636:	4631      	mov	r1, r6
   1e638:	480f      	ldr	r0, [pc, #60]	; (1e678 <k_mem_slab_free+0x90>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1e63a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1e63e:	f000 bb7f 	b.w	1ed40 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1e642:	682b      	ldr	r3, [r5, #0]
   1e644:	6962      	ldr	r2, [r4, #20]
   1e646:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1e648:	682b      	ldr	r3, [r5, #0]
   1e64a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1e64c:	69a3      	ldr	r3, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e64e:	480a      	ldr	r0, [pc, #40]	; (1e678 <k_mem_slab_free+0x90>)
   1e650:	3b01      	subs	r3, #1
   1e652:	61a3      	str	r3, [r4, #24]
   1e654:	f001 fd16 	bl	20084 <z_spin_unlock_valid>
   1e658:	b940      	cbnz	r0, 1e66c <k_mem_slab_free+0x84>
   1e65a:	4908      	ldr	r1, [pc, #32]	; (1e67c <k_mem_slab_free+0x94>)
   1e65c:	4808      	ldr	r0, [pc, #32]	; (1e680 <k_mem_slab_free+0x98>)
   1e65e:	22a7      	movs	r2, #167	; 0xa7
   1e660:	f003 fc33 	bl	21eca <printk>
   1e664:	21a7      	movs	r1, #167	; 0xa7
   1e666:	4805      	ldr	r0, [pc, #20]	; (1e67c <k_mem_slab_free+0x94>)
   1e668:	f003 fee1 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1e66c:	f386 8811 	msr	BASEPRI, r6
   1e670:	f3bf 8f6f 	isb	sy
}
   1e674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e676:	bf00      	nop
   1e678:	200042e8 	.word	0x200042e8
   1e67c:	0002a0e8 	.word	0x0002a0e8
   1e680:	0002a026 	.word	0x0002a026

0001e684 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1e684:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e688:	4604      	mov	r4, r0
   1e68a:	4616      	mov	r6, r2
   1e68c:	461f      	mov	r7, r3
   1e68e:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1e692:	b143      	cbz	r3, 1e6a6 <z_impl_k_mutex_lock+0x22>
   1e694:	4960      	ldr	r1, [pc, #384]	; (1e818 <z_impl_k_mutex_lock+0x194>)
   1e696:	4861      	ldr	r0, [pc, #388]	; (1e81c <z_impl_k_mutex_lock+0x198>)
   1e698:	227d      	movs	r2, #125	; 0x7d
   1e69a:	f003 fc16 	bl	21eca <printk>
   1e69e:	217d      	movs	r1, #125	; 0x7d
   1e6a0:	485d      	ldr	r0, [pc, #372]	; (1e818 <z_impl_k_mutex_lock+0x194>)
   1e6a2:	f003 fec4 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1e6a6:	f04f 0320 	mov.w	r3, #32
   1e6aa:	f3ef 8511 	mrs	r5, BASEPRI
   1e6ae:	f383 8811 	msr	BASEPRI, r3
   1e6b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e6b6:	485a      	ldr	r0, [pc, #360]	; (1e820 <z_impl_k_mutex_lock+0x19c>)
   1e6b8:	f001 fcd6 	bl	20068 <z_spin_lock_valid>
   1e6bc:	b940      	cbnz	r0, 1e6d0 <z_impl_k_mutex_lock+0x4c>
   1e6be:	4959      	ldr	r1, [pc, #356]	; (1e824 <z_impl_k_mutex_lock+0x1a0>)
   1e6c0:	4856      	ldr	r0, [pc, #344]	; (1e81c <z_impl_k_mutex_lock+0x198>)
   1e6c2:	227c      	movs	r2, #124	; 0x7c
   1e6c4:	f003 fc01 	bl	21eca <printk>
   1e6c8:	217c      	movs	r1, #124	; 0x7c
   1e6ca:	4856      	ldr	r0, [pc, #344]	; (1e824 <z_impl_k_mutex_lock+0x1a0>)
   1e6cc:	f003 feaf 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1e6d0:	4853      	ldr	r0, [pc, #332]	; (1e820 <z_impl_k_mutex_lock+0x19c>)
   1e6d2:	f001 fce7 	bl	200a4 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1e6d6:	68e3      	ldr	r3, [r4, #12]
   1e6d8:	4a53      	ldr	r2, [pc, #332]	; (1e828 <z_impl_k_mutex_lock+0x1a4>)
   1e6da:	b1d3      	cbz	r3, 1e712 <z_impl_k_mutex_lock+0x8e>
   1e6dc:	68a0      	ldr	r0, [r4, #8]
   1e6de:	6891      	ldr	r1, [r2, #8]
   1e6e0:	4288      	cmp	r0, r1
   1e6e2:	d033      	beq.n	1e74c <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1e6e4:	ea56 0307 	orrs.w	r3, r6, r7
   1e6e8:	d132      	bne.n	1e750 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e6ea:	484d      	ldr	r0, [pc, #308]	; (1e820 <z_impl_k_mutex_lock+0x19c>)
   1e6ec:	f001 fcca 	bl	20084 <z_spin_unlock_valid>
   1e6f0:	b940      	cbnz	r0, 1e704 <z_impl_k_mutex_lock+0x80>
   1e6f2:	494c      	ldr	r1, [pc, #304]	; (1e824 <z_impl_k_mutex_lock+0x1a0>)
   1e6f4:	4849      	ldr	r0, [pc, #292]	; (1e81c <z_impl_k_mutex_lock+0x198>)
   1e6f6:	22a7      	movs	r2, #167	; 0xa7
   1e6f8:	f003 fbe7 	bl	21eca <printk>
   1e6fc:	21a7      	movs	r1, #167	; 0xa7
   1e6fe:	4849      	ldr	r0, [pc, #292]	; (1e824 <z_impl_k_mutex_lock+0x1a0>)
   1e700:	f003 fe95 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1e704:	f385 8811 	msr	BASEPRI, r5
   1e708:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1e70c:	f06f 000f 	mvn.w	r0, #15
   1e710:	e019      	b.n	1e746 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   1e712:	6891      	ldr	r1, [r2, #8]
   1e714:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1e718:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1e71a:	3301      	adds	r3, #1
   1e71c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1e71e:	6893      	ldr	r3, [r2, #8]
   1e720:	60a3      	str	r3, [r4, #8]
   1e722:	483f      	ldr	r0, [pc, #252]	; (1e820 <z_impl_k_mutex_lock+0x19c>)
   1e724:	f001 fcae 	bl	20084 <z_spin_unlock_valid>
   1e728:	b940      	cbnz	r0, 1e73c <z_impl_k_mutex_lock+0xb8>
   1e72a:	493e      	ldr	r1, [pc, #248]	; (1e824 <z_impl_k_mutex_lock+0x1a0>)
   1e72c:	483b      	ldr	r0, [pc, #236]	; (1e81c <z_impl_k_mutex_lock+0x198>)
   1e72e:	22a7      	movs	r2, #167	; 0xa7
   1e730:	f003 fbcb 	bl	21eca <printk>
   1e734:	21a7      	movs	r1, #167	; 0xa7
   1e736:	483b      	ldr	r0, [pc, #236]	; (1e824 <z_impl_k_mutex_lock+0x1a0>)
   1e738:	f003 fe79 	bl	2242e <assert_post_action>
   1e73c:	f385 8811 	msr	BASEPRI, r5
   1e740:	f3bf 8f6f 	isb	sy
		return 0;
   1e744:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1e746:	b002      	add	sp, #8
   1e748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1e74c:	6921      	ldr	r1, [r4, #16]
   1e74e:	e7e3      	b.n	1e718 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1e750:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e754:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1e758:	4299      	cmp	r1, r3
   1e75a:	bfa8      	it	ge
   1e75c:	4619      	movge	r1, r3
   1e75e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1e762:	4299      	cmp	r1, r3
   1e764:	da3e      	bge.n	1e7e4 <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   1e766:	f001 f855 	bl	1f814 <z_set_prio>
   1e76a:	4680      	mov	r8, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1e76c:	e9cd 6700 	strd	r6, r7, [sp]
   1e770:	4622      	mov	r2, r4
   1e772:	4629      	mov	r1, r5
   1e774:	482a      	ldr	r0, [pc, #168]	; (1e820 <z_impl_k_mutex_lock+0x19c>)
   1e776:	f001 f827 	bl	1f7c8 <z_pend_curr>
	if (got_mutex == 0) {
   1e77a:	2800      	cmp	r0, #0
   1e77c:	d0e3      	beq.n	1e746 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   1e77e:	f04f 0320 	mov.w	r3, #32
   1e782:	f3ef 8511 	mrs	r5, BASEPRI
   1e786:	f383 8811 	msr	BASEPRI, r3
   1e78a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e78e:	4824      	ldr	r0, [pc, #144]	; (1e820 <z_impl_k_mutex_lock+0x19c>)
   1e790:	f001 fc6a 	bl	20068 <z_spin_lock_valid>
   1e794:	b940      	cbnz	r0, 1e7a8 <z_impl_k_mutex_lock+0x124>
   1e796:	4923      	ldr	r1, [pc, #140]	; (1e824 <z_impl_k_mutex_lock+0x1a0>)
   1e798:	4820      	ldr	r0, [pc, #128]	; (1e81c <z_impl_k_mutex_lock+0x198>)
   1e79a:	227c      	movs	r2, #124	; 0x7c
   1e79c:	f003 fb95 	bl	21eca <printk>
   1e7a0:	217c      	movs	r1, #124	; 0x7c
   1e7a2:	4820      	ldr	r0, [pc, #128]	; (1e824 <z_impl_k_mutex_lock+0x1a0>)
   1e7a4:	f003 fe43 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1e7a8:	481d      	ldr	r0, [pc, #116]	; (1e820 <z_impl_k_mutex_lock+0x19c>)
   1e7aa:	f001 fc7b 	bl	200a4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1e7ae:	6823      	ldr	r3, [r4, #0]
   1e7b0:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e7b2:	42a3      	cmp	r3, r4
   1e7b4:	d007      	beq.n	1e7c6 <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1e7b6:	b133      	cbz	r3, 1e7c6 <z_impl_k_mutex_lock+0x142>
   1e7b8:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1e7bc:	4299      	cmp	r1, r3
   1e7be:	bfa8      	it	ge
   1e7c0:	4619      	movge	r1, r3
   1e7c2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1e7c6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1e7c8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e7cc:	4299      	cmp	r1, r3
   1e7ce:	d10c      	bne.n	1e7ea <z_impl_k_mutex_lock+0x166>
	if (resched) {
   1e7d0:	f1b8 0f00 	cmp.w	r8, #0
   1e7d4:	d00e      	beq.n	1e7f4 <z_impl_k_mutex_lock+0x170>
		z_reschedule(&lock, key);
   1e7d6:	4629      	mov	r1, r5
   1e7d8:	4811      	ldr	r0, [pc, #68]	; (1e820 <z_impl_k_mutex_lock+0x19c>)
   1e7da:	f000 fab1 	bl	1ed40 <z_reschedule>
	return -EAGAIN;
   1e7de:	f06f 000a 	mvn.w	r0, #10
   1e7e2:	e7b0      	b.n	1e746 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   1e7e4:	f04f 0800 	mov.w	r8, #0
   1e7e8:	e7c0      	b.n	1e76c <z_impl_k_mutex_lock+0xe8>
		return z_set_prio(mutex->owner, new_prio);
   1e7ea:	f001 f813 	bl	1f814 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1e7ee:	2800      	cmp	r0, #0
   1e7f0:	d1f1      	bne.n	1e7d6 <z_impl_k_mutex_lock+0x152>
   1e7f2:	e7ed      	b.n	1e7d0 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e7f4:	480a      	ldr	r0, [pc, #40]	; (1e820 <z_impl_k_mutex_lock+0x19c>)
   1e7f6:	f001 fc45 	bl	20084 <z_spin_unlock_valid>
   1e7fa:	b940      	cbnz	r0, 1e80e <z_impl_k_mutex_lock+0x18a>
   1e7fc:	4909      	ldr	r1, [pc, #36]	; (1e824 <z_impl_k_mutex_lock+0x1a0>)
   1e7fe:	4807      	ldr	r0, [pc, #28]	; (1e81c <z_impl_k_mutex_lock+0x198>)
   1e800:	22a7      	movs	r2, #167	; 0xa7
   1e802:	f003 fb62 	bl	21eca <printk>
   1e806:	21a7      	movs	r1, #167	; 0xa7
   1e808:	4806      	ldr	r0, [pc, #24]	; (1e824 <z_impl_k_mutex_lock+0x1a0>)
   1e80a:	f003 fe10 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1e80e:	f385 8811 	msr	BASEPRI, r5
   1e812:	f3bf 8f6f 	isb	sy
   1e816:	e7e2      	b.n	1e7de <z_impl_k_mutex_lock+0x15a>
   1e818:	0002fce9 	.word	0x0002fce9
   1e81c:	0002a026 	.word	0x0002a026
   1e820:	200042ec 	.word	0x200042ec
   1e824:	0002a0e8 	.word	0x0002a0e8
   1e828:	200042f0 	.word	0x200042f0

0001e82c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1e82c:	b538      	push	{r3, r4, r5, lr}
   1e82e:	4604      	mov	r4, r0
   1e830:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1e834:	b143      	cbz	r3, 1e848 <z_impl_k_mutex_unlock+0x1c>
   1e836:	4948      	ldr	r1, [pc, #288]	; (1e958 <z_impl_k_mutex_unlock+0x12c>)
   1e838:	4848      	ldr	r0, [pc, #288]	; (1e95c <z_impl_k_mutex_unlock+0x130>)
   1e83a:	22d8      	movs	r2, #216	; 0xd8
   1e83c:	f003 fb45 	bl	21eca <printk>
   1e840:	21d8      	movs	r1, #216	; 0xd8
   1e842:	4845      	ldr	r0, [pc, #276]	; (1e958 <z_impl_k_mutex_unlock+0x12c>)
   1e844:	f003 fdf3 	bl	2242e <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   1e848:	68a3      	ldr	r3, [r4, #8]
   1e84a:	2b00      	cmp	r3, #0
   1e84c:	d07d      	beq.n	1e94a <z_impl_k_mutex_unlock+0x11e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1e84e:	4d44      	ldr	r5, [pc, #272]	; (1e960 <z_impl_k_mutex_unlock+0x134>)
   1e850:	68aa      	ldr	r2, [r5, #8]
   1e852:	4293      	cmp	r3, r2
   1e854:	d17c      	bne.n	1e950 <z_impl_k_mutex_unlock+0x124>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1e856:	68e3      	ldr	r3, [r4, #12]
   1e858:	b943      	cbnz	r3, 1e86c <z_impl_k_mutex_unlock+0x40>
   1e85a:	493f      	ldr	r1, [pc, #252]	; (1e958 <z_impl_k_mutex_unlock+0x12c>)
   1e85c:	483f      	ldr	r0, [pc, #252]	; (1e95c <z_impl_k_mutex_unlock+0x130>)
   1e85e:	22ea      	movs	r2, #234	; 0xea
   1e860:	f003 fb33 	bl	21eca <printk>
   1e864:	21ea      	movs	r1, #234	; 0xea
   1e866:	483c      	ldr	r0, [pc, #240]	; (1e958 <z_impl_k_mutex_unlock+0x12c>)
   1e868:	f003 fde1 	bl	2242e <assert_post_action>
   1e86c:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   1e870:	b153      	cbz	r3, 1e888 <z_impl_k_mutex_unlock+0x5c>
   1e872:	493c      	ldr	r1, [pc, #240]	; (1e964 <z_impl_k_mutex_unlock+0x138>)
   1e874:	4839      	ldr	r0, [pc, #228]	; (1e95c <z_impl_k_mutex_unlock+0x130>)
   1e876:	f44f 7289 	mov.w	r2, #274	; 0x112
   1e87a:	f003 fb26 	bl	21eca <printk>
   1e87e:	f44f 7189 	mov.w	r1, #274	; 0x112
   1e882:	4838      	ldr	r0, [pc, #224]	; (1e964 <z_impl_k_mutex_unlock+0x138>)
   1e884:	f003 fdd3 	bl	2242e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1e888:	68ab      	ldr	r3, [r5, #8]
   1e88a:	7bdb      	ldrb	r3, [r3, #15]
   1e88c:	2b01      	cmp	r3, #1
   1e88e:	d10a      	bne.n	1e8a6 <z_impl_k_mutex_unlock+0x7a>
   1e890:	4934      	ldr	r1, [pc, #208]	; (1e964 <z_impl_k_mutex_unlock+0x138>)
   1e892:	4832      	ldr	r0, [pc, #200]	; (1e95c <z_impl_k_mutex_unlock+0x130>)
   1e894:	f240 1213 	movw	r2, #275	; 0x113
   1e898:	f003 fb17 	bl	21eca <printk>
   1e89c:	f240 1113 	movw	r1, #275	; 0x113
   1e8a0:	4830      	ldr	r0, [pc, #192]	; (1e964 <z_impl_k_mutex_unlock+0x138>)
   1e8a2:	f003 fdc4 	bl	2242e <assert_post_action>

	--_current->base.sched_locked;
   1e8a6:	68aa      	ldr	r2, [r5, #8]
   1e8a8:	7bd3      	ldrb	r3, [r2, #15]
   1e8aa:	3b01      	subs	r3, #1
   1e8ac:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1e8ae:	68e3      	ldr	r3, [r4, #12]
   1e8b0:	2b01      	cmp	r3, #1
   1e8b2:	d005      	beq.n	1e8c0 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   1e8b4:	3b01      	subs	r3, #1
   1e8b6:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1e8b8:	f000 fb70 	bl	1ef9c <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1e8bc:	2000      	movs	r0, #0
}
   1e8be:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1e8c0:	f04f 0320 	mov.w	r3, #32
   1e8c4:	f3ef 8511 	mrs	r5, BASEPRI
   1e8c8:	f383 8811 	msr	BASEPRI, r3
   1e8cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e8d0:	4825      	ldr	r0, [pc, #148]	; (1e968 <z_impl_k_mutex_unlock+0x13c>)
   1e8d2:	f001 fbc9 	bl	20068 <z_spin_lock_valid>
   1e8d6:	b940      	cbnz	r0, 1e8ea <z_impl_k_mutex_unlock+0xbe>
   1e8d8:	4924      	ldr	r1, [pc, #144]	; (1e96c <z_impl_k_mutex_unlock+0x140>)
   1e8da:	4820      	ldr	r0, [pc, #128]	; (1e95c <z_impl_k_mutex_unlock+0x130>)
   1e8dc:	227c      	movs	r2, #124	; 0x7c
   1e8de:	f003 faf4 	bl	21eca <printk>
   1e8e2:	217c      	movs	r1, #124	; 0x7c
   1e8e4:	4821      	ldr	r0, [pc, #132]	; (1e96c <z_impl_k_mutex_unlock+0x140>)
   1e8e6:	f003 fda2 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1e8ea:	481f      	ldr	r0, [pc, #124]	; (1e968 <z_impl_k_mutex_unlock+0x13c>)
   1e8ec:	f001 fbda 	bl	200a4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1e8f0:	68a0      	ldr	r0, [r4, #8]
   1e8f2:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   1e8f4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e8f8:	4299      	cmp	r1, r3
   1e8fa:	d001      	beq.n	1e900 <z_impl_k_mutex_unlock+0xd4>
		return z_set_prio(mutex->owner, new_prio);
   1e8fc:	f000 ff8a 	bl	1f814 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1e900:	4620      	mov	r0, r4
   1e902:	f001 f803 	bl	1f90c <z_unpend_first_thread>
	mutex->owner = new_owner;
   1e906:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1e908:	b160      	cbz	r0, 1e924 <z_impl_k_mutex_unlock+0xf8>
		mutex->owner_orig_prio = new_owner->base.prio;
   1e90a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1e90e:	6122      	str	r2, [r4, #16]
   1e910:	2200      	movs	r2, #0
   1e912:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   1e916:	f000 fbe5 	bl	1f0e4 <z_ready_thread>
		z_reschedule(&lock, key);
   1e91a:	4629      	mov	r1, r5
   1e91c:	4812      	ldr	r0, [pc, #72]	; (1e968 <z_impl_k_mutex_unlock+0x13c>)
   1e91e:	f000 fa0f 	bl	1ed40 <z_reschedule>
   1e922:	e7c9      	b.n	1e8b8 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   1e924:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e926:	4810      	ldr	r0, [pc, #64]	; (1e968 <z_impl_k_mutex_unlock+0x13c>)
   1e928:	f001 fbac 	bl	20084 <z_spin_unlock_valid>
   1e92c:	b940      	cbnz	r0, 1e940 <z_impl_k_mutex_unlock+0x114>
   1e92e:	490f      	ldr	r1, [pc, #60]	; (1e96c <z_impl_k_mutex_unlock+0x140>)
   1e930:	480a      	ldr	r0, [pc, #40]	; (1e95c <z_impl_k_mutex_unlock+0x130>)
   1e932:	22a7      	movs	r2, #167	; 0xa7
   1e934:	f003 fac9 	bl	21eca <printk>
   1e938:	21a7      	movs	r1, #167	; 0xa7
   1e93a:	480c      	ldr	r0, [pc, #48]	; (1e96c <z_impl_k_mutex_unlock+0x140>)
   1e93c:	f003 fd77 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1e940:	f385 8811 	msr	BASEPRI, r5
   1e944:	f3bf 8f6f 	isb	sy
   1e948:	e7b6      	b.n	1e8b8 <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   1e94a:	f06f 0015 	mvn.w	r0, #21
   1e94e:	e7b6      	b.n	1e8be <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   1e950:	f04f 30ff 	mov.w	r0, #4294967295
   1e954:	e7b3      	b.n	1e8be <z_impl_k_mutex_unlock+0x92>
   1e956:	bf00      	nop
   1e958:	0002fce9 	.word	0x0002fce9
   1e95c:	0002a026 	.word	0x0002a026
   1e960:	200042f0 	.word	0x200042f0
   1e964:	0002fd0b 	.word	0x0002fd0b
   1e968:	200042ec 	.word	0x200042ec
   1e96c:	0002a0e8 	.word	0x0002a0e8

0001e970 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1e970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e974:	4604      	mov	r4, r0
   1e976:	460e      	mov	r6, r1
   1e978:	4690      	mov	r8, r2
   1e97a:	4699      	mov	r9, r3
   1e97c:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e980:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1e984:	f04f 0320 	mov.w	r3, #32
   1e988:	f3ef 8711 	mrs	r7, BASEPRI
   1e98c:	f383 8811 	msr	BASEPRI, r3
   1e990:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e994:	4628      	mov	r0, r5
   1e996:	f001 fb67 	bl	20068 <z_spin_lock_valid>
   1e99a:	b940      	cbnz	r0, 1e9ae <queue_insert+0x3e>
   1e99c:	4937      	ldr	r1, [pc, #220]	; (1ea7c <queue_insert+0x10c>)
   1e99e:	4838      	ldr	r0, [pc, #224]	; (1ea80 <queue_insert+0x110>)
   1e9a0:	227c      	movs	r2, #124	; 0x7c
   1e9a2:	f003 fa92 	bl	21eca <printk>
   1e9a6:	217c      	movs	r1, #124	; 0x7c
   1e9a8:	4834      	ldr	r0, [pc, #208]	; (1ea7c <queue_insert+0x10c>)
   1e9aa:	f003 fd40 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1e9ae:	4628      	mov	r0, r5
   1e9b0:	f001 fb78 	bl	200a4 <z_spin_lock_set_owner>

	if (is_append) {
   1e9b4:	f1ba 0f00 	cmp.w	sl, #0
   1e9b8:	d000      	beq.n	1e9bc <queue_insert+0x4c>
		prev = sys_sflist_peek_tail(&queue->data_q);
   1e9ba:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1e9bc:	f104 000c 	add.w	r0, r4, #12
   1e9c0:	f000 ffa4 	bl	1f90c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1e9c4:	b160      	cbz	r0, 1e9e0 <queue_insert+0x70>
   1e9c6:	2400      	movs	r4, #0
   1e9c8:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
   1e9cc:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1e9d0:	f000 fb88 	bl	1f0e4 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1e9d4:	4628      	mov	r0, r5
   1e9d6:	4639      	mov	r1, r7
   1e9d8:	f000 f9b2 	bl	1ed40 <z_reschedule>
	return 0;
   1e9dc:	2000      	movs	r0, #0
   1e9de:	e019      	b.n	1ea14 <queue_insert+0xa4>
	if (alloc) {
   1e9e0:	f1b9 0f00 	cmp.w	r9, #0
   1e9e4:	d028      	beq.n	1ea38 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   1e9e6:	2108      	movs	r1, #8
   1e9e8:	f002 fab2 	bl	20f50 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1e9ec:	b9a0      	cbnz	r0, 1ea18 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e9ee:	4628      	mov	r0, r5
   1e9f0:	f001 fb48 	bl	20084 <z_spin_unlock_valid>
   1e9f4:	b940      	cbnz	r0, 1ea08 <queue_insert+0x98>
   1e9f6:	4921      	ldr	r1, [pc, #132]	; (1ea7c <queue_insert+0x10c>)
   1e9f8:	4821      	ldr	r0, [pc, #132]	; (1ea80 <queue_insert+0x110>)
   1e9fa:	22a7      	movs	r2, #167	; 0xa7
   1e9fc:	f003 fa65 	bl	21eca <printk>
   1ea00:	21a7      	movs	r1, #167	; 0xa7
   1ea02:	481e      	ldr	r0, [pc, #120]	; (1ea7c <queue_insert+0x10c>)
   1ea04:	f003 fd13 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1ea08:	f387 8811 	msr	BASEPRI, r7
   1ea0c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1ea10:	f06f 000b 	mvn.w	r0, #11
}
   1ea14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1ea18:	2301      	movs	r3, #1
		anode->data = data;
   1ea1a:	f8c0 8004 	str.w	r8, [r0, #4]
   1ea1e:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1ea20:	6803      	ldr	r3, [r0, #0]
   1ea22:	f003 0303 	and.w	r3, r3, #3
   1ea26:	b95e      	cbnz	r6, 1ea40 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ea28:	6822      	ldr	r2, [r4, #0]
   1ea2a:	4313      	orrs	r3, r2
   1ea2c:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1ea2e:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1ea30:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1ea32:	b973      	cbnz	r3, 1ea52 <queue_insert+0xe2>
	list->tail = node;
   1ea34:	6060      	str	r0, [r4, #4]
   1ea36:	e00c      	b.n	1ea52 <queue_insert+0xe2>
	node->next_and_flags = flags;
   1ea38:	f8c8 9000 	str.w	r9, [r8]
   1ea3c:	4640      	mov	r0, r8
   1ea3e:	e7ef      	b.n	1ea20 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ea40:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1ea42:	f032 0203 	bics.w	r2, r2, #3
   1ea46:	d110      	bne.n	1ea6a <queue_insert+0xfa>
Z_GENLIST_APPEND(sflist, sfnode)
   1ea48:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ea4a:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1ea4c:	b93a      	cbnz	r2, 1ea5e <queue_insert+0xee>
	list->head = node;
   1ea4e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1ea52:	2104      	movs	r1, #4
   1ea54:	f104 0014 	add.w	r0, r4, #20
   1ea58:	f009 ff7c 	bl	28954 <z_handle_obj_poll_events>
   1ea5c:	e7ba      	b.n	1e9d4 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ea5e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ea60:	f003 0303 	and.w	r3, r3, #3
   1ea64:	4303      	orrs	r3, r0
   1ea66:	6013      	str	r3, [r2, #0]
   1ea68:	e7e4      	b.n	1ea34 <queue_insert+0xc4>
   1ea6a:	4313      	orrs	r3, r2
   1ea6c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ea6e:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ea70:	f003 0303 	and.w	r3, r3, #3
   1ea74:	4318      	orrs	r0, r3
   1ea76:	6030      	str	r0, [r6, #0]
   1ea78:	e7eb      	b.n	1ea52 <queue_insert+0xe2>
   1ea7a:	bf00      	nop
   1ea7c:	0002a0e8 	.word	0x0002a0e8
   1ea80:	0002a026 	.word	0x0002a026

0001ea84 <z_impl_k_queue_cancel_wait>:
{
   1ea84:	b570      	push	{r4, r5, r6, lr}
   1ea86:	4605      	mov	r5, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1ea88:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   1ea8c:	f04f 0320 	mov.w	r3, #32
   1ea90:	f3ef 8611 	mrs	r6, BASEPRI
   1ea94:	f383 8811 	msr	BASEPRI, r3
   1ea98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ea9c:	4620      	mov	r0, r4
   1ea9e:	f001 fae3 	bl	20068 <z_spin_lock_valid>
   1eaa2:	b940      	cbnz	r0, 1eab6 <z_impl_k_queue_cancel_wait+0x32>
   1eaa4:	4910      	ldr	r1, [pc, #64]	; (1eae8 <z_impl_k_queue_cancel_wait+0x64>)
   1eaa6:	4811      	ldr	r0, [pc, #68]	; (1eaec <z_impl_k_queue_cancel_wait+0x68>)
   1eaa8:	227c      	movs	r2, #124	; 0x7c
   1eaaa:	f003 fa0e 	bl	21eca <printk>
   1eaae:	217c      	movs	r1, #124	; 0x7c
   1eab0:	480d      	ldr	r0, [pc, #52]	; (1eae8 <z_impl_k_queue_cancel_wait+0x64>)
   1eab2:	f003 fcbc 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1eab6:	4620      	mov	r0, r4
   1eab8:	f001 faf4 	bl	200a4 <z_spin_lock_set_owner>
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1eabc:	f105 000c 	add.w	r0, r5, #12
   1eac0:	f000 ff24 	bl	1f90c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1eac4:	b128      	cbz	r0, 1ead2 <z_impl_k_queue_cancel_wait+0x4e>
   1eac6:	2200      	movs	r2, #0
   1eac8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
	thread->base.swap_data = data;
   1eacc:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   1eace:	f000 fb09 	bl	1f0e4 <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1ead2:	f105 0014 	add.w	r0, r5, #20
   1ead6:	2108      	movs	r1, #8
   1ead8:	f009 ff3c 	bl	28954 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1eadc:	4631      	mov	r1, r6
   1eade:	4620      	mov	r0, r4
}
   1eae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   1eae4:	f000 b92c 	b.w	1ed40 <z_reschedule>
   1eae8:	0002a0e8 	.word	0x0002a0e8
   1eaec:	0002a026 	.word	0x0002a026

0001eaf0 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1eaf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eaf4:	4605      	mov	r5, r0
   1eaf6:	4617      	mov	r7, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   1eaf8:	460c      	mov	r4, r1
   1eafa:	2900      	cmp	r1, #0
   1eafc:	d045      	beq.n	1eb8a <k_queue_append_list+0x9a>
   1eafe:	2a00      	cmp	r2, #0
   1eb00:	d043      	beq.n	1eb8a <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1eb02:	f100 0608 	add.w	r6, r0, #8
   1eb06:	f04f 0320 	mov.w	r3, #32
   1eb0a:	f3ef 8811 	mrs	r8, BASEPRI
   1eb0e:	f383 8811 	msr	BASEPRI, r3
   1eb12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1eb16:	4630      	mov	r0, r6
   1eb18:	f001 faa6 	bl	20068 <z_spin_lock_valid>
   1eb1c:	b940      	cbnz	r0, 1eb30 <k_queue_append_list+0x40>
   1eb1e:	491c      	ldr	r1, [pc, #112]	; (1eb90 <k_queue_append_list+0xa0>)
   1eb20:	481c      	ldr	r0, [pc, #112]	; (1eb94 <k_queue_append_list+0xa4>)
   1eb22:	227c      	movs	r2, #124	; 0x7c
   1eb24:	f003 f9d1 	bl	21eca <printk>
   1eb28:	217c      	movs	r1, #124	; 0x7c
   1eb2a:	4819      	ldr	r0, [pc, #100]	; (1eb90 <k_queue_append_list+0xa0>)
   1eb2c:	f003 fc7f 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1eb30:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   1eb32:	f105 090c 	add.w	r9, r5, #12
   1eb36:	f001 fab5 	bl	200a4 <z_spin_lock_set_owner>
   1eb3a:	4648      	mov	r0, r9
   1eb3c:	f000 fee6 	bl	1f90c <z_unpend_first_thread>
   1eb40:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   1eb44:	b920      	cbnz	r0, 1eb50 <k_queue_append_list+0x60>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1eb46:	686a      	ldr	r2, [r5, #4]
   1eb48:	b9ca      	cbnz	r2, 1eb7e <k_queue_append_list+0x8e>
	list->head = node;
   1eb4a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1eb4c:	606f      	str	r7, [r5, #4]
   1eb4e:	e00a      	b.n	1eb66 <k_queue_append_list+0x76>
   1eb50:	6144      	str	r4, [r0, #20]
   1eb52:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   1eb56:	f000 fac5 	bl	1f0e4 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   1eb5a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1eb5c:	4648      	mov	r0, r9
   1eb5e:	f000 fed5 	bl	1f90c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1eb62:	2c00      	cmp	r4, #0
   1eb64:	d1ee      	bne.n	1eb44 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1eb66:	2104      	movs	r1, #4
   1eb68:	f105 0014 	add.w	r0, r5, #20
   1eb6c:	f009 fef2 	bl	28954 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1eb70:	4630      	mov	r0, r6
   1eb72:	4641      	mov	r1, r8
   1eb74:	f000 f8e4 	bl	1ed40 <z_reschedule>
	return 0;
   1eb78:	2000      	movs	r0, #0
}
   1eb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1eb7e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1eb80:	f003 0303 	and.w	r3, r3, #3
   1eb84:	431c      	orrs	r4, r3
   1eb86:	6014      	str	r4, [r2, #0]
   1eb88:	e7e0      	b.n	1eb4c <k_queue_append_list+0x5c>
		return -EINVAL;
   1eb8a:	f06f 0015 	mvn.w	r0, #21
   1eb8e:	e7f4      	b.n	1eb7a <k_queue_append_list+0x8a>
   1eb90:	0002a0e8 	.word	0x0002a0e8
   1eb94:	0002a026 	.word	0x0002a026

0001eb98 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1eb98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1eb9c:	4605      	mov	r5, r0
   1eb9e:	4690      	mov	r8, r2
   1eba0:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1eba2:	f100 0608 	add.w	r6, r0, #8
   1eba6:	f04f 0320 	mov.w	r3, #32
   1ebaa:	f3ef 8711 	mrs	r7, BASEPRI
   1ebae:	f383 8811 	msr	BASEPRI, r3
   1ebb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ebb6:	4630      	mov	r0, r6
   1ebb8:	f001 fa56 	bl	20068 <z_spin_lock_valid>
   1ebbc:	b940      	cbnz	r0, 1ebd0 <z_impl_k_queue_get+0x38>
   1ebbe:	4920      	ldr	r1, [pc, #128]	; (1ec40 <z_impl_k_queue_get+0xa8>)
   1ebc0:	4820      	ldr	r0, [pc, #128]	; (1ec44 <z_impl_k_queue_get+0xac>)
   1ebc2:	227c      	movs	r2, #124	; 0x7c
   1ebc4:	f003 f981 	bl	21eca <printk>
   1ebc8:	217c      	movs	r1, #124	; 0x7c
   1ebca:	481d      	ldr	r0, [pc, #116]	; (1ec40 <z_impl_k_queue_get+0xa8>)
   1ebcc:	f003 fc2f 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1ebd0:	4630      	mov	r0, r6
   1ebd2:	f001 fa67 	bl	200a4 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   1ebd6:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1ebd8:	b30c      	cbz	r4, 1ec1e <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ebda:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ebdc:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ebde:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ebe2:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1ebe4:	4620      	mov	r0, r4
	list->head = node;
   1ebe6:	602b      	str	r3, [r5, #0]
	list->tail = node;
   1ebe8:	bf08      	it	eq
   1ebea:	606b      	streq	r3, [r5, #4]
   1ebec:	2101      	movs	r1, #1
   1ebee:	f009 fd35 	bl	2865c <z_queue_node_peek>
   1ebf2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ebf4:	4630      	mov	r0, r6
   1ebf6:	f001 fa45 	bl	20084 <z_spin_unlock_valid>
   1ebfa:	b940      	cbnz	r0, 1ec0e <z_impl_k_queue_get+0x76>
   1ebfc:	4910      	ldr	r1, [pc, #64]	; (1ec40 <z_impl_k_queue_get+0xa8>)
   1ebfe:	4811      	ldr	r0, [pc, #68]	; (1ec44 <z_impl_k_queue_get+0xac>)
   1ec00:	22a7      	movs	r2, #167	; 0xa7
   1ec02:	f003 f962 	bl	21eca <printk>
   1ec06:	21a7      	movs	r1, #167	; 0xa7
   1ec08:	480d      	ldr	r0, [pc, #52]	; (1ec40 <z_impl_k_queue_get+0xa8>)
   1ec0a:	f003 fc10 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1ec0e:	f387 8811 	msr	BASEPRI, r7
   1ec12:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1ec16:	4620      	mov	r0, r4
   1ec18:	b003      	add	sp, #12
   1ec1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ec1e:	ea58 0309 	orrs.w	r3, r8, r9
   1ec22:	d0e7      	beq.n	1ebf4 <z_impl_k_queue_get+0x5c>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1ec24:	e9cd 8900 	strd	r8, r9, [sp]
   1ec28:	f105 020c 	add.w	r2, r5, #12
   1ec2c:	4639      	mov	r1, r7
   1ec2e:	4630      	mov	r0, r6
   1ec30:	f000 fdca 	bl	1f7c8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1ec34:	2800      	cmp	r0, #0
   1ec36:	d1ee      	bne.n	1ec16 <z_impl_k_queue_get+0x7e>
   1ec38:	4b03      	ldr	r3, [pc, #12]	; (1ec48 <z_impl_k_queue_get+0xb0>)
   1ec3a:	689b      	ldr	r3, [r3, #8]
   1ec3c:	695c      	ldr	r4, [r3, #20]
   1ec3e:	e7ea      	b.n	1ec16 <z_impl_k_queue_get+0x7e>
   1ec40:	0002a0e8 	.word	0x0002a0e8
   1ec44:	0002a026 	.word	0x0002a026
   1ec48:	200042f0 	.word	0x200042f0

0001ec4c <pended_on.isra.19>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   1ec4c:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   1ec4e:	b510      	push	{r4, lr}
   1ec50:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1ec52:	b953      	cbnz	r3, 1ec6a <pended_on.isra.19+0x1e>
   1ec54:	4906      	ldr	r1, [pc, #24]	; (1ec70 <pended_on.isra.19+0x24>)
   1ec56:	4807      	ldr	r0, [pc, #28]	; (1ec74 <pended_on.isra.19+0x28>)
   1ec58:	f44f 7201 	mov.w	r2, #516	; 0x204
   1ec5c:	f003 f935 	bl	21eca <printk>
   1ec60:	f44f 7101 	mov.w	r1, #516	; 0x204
   1ec64:	4802      	ldr	r0, [pc, #8]	; (1ec70 <pended_on.isra.19+0x24>)
   1ec66:	f003 fbe2 	bl	2242e <assert_post_action>

	return thread->base.pended_on;
}
   1ec6a:	6820      	ldr	r0, [r4, #0]
   1ec6c:	bd10      	pop	{r4, pc}
   1ec6e:	bf00      	nop
   1ec70:	0002fd36 	.word	0x0002fd36
   1ec74:	0002a026 	.word	0x0002a026

0001ec78 <z_reset_time_slice>:
{
   1ec78:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   1ec7a:	4c08      	ldr	r4, [pc, #32]	; (1ec9c <z_reset_time_slice+0x24>)
   1ec7c:	6823      	ldr	r3, [r4, #0]
   1ec7e:	b15b      	cbz	r3, 1ec98 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1ec80:	f7e5 fabe 	bl	4200 <z_clock_elapsed>
   1ec84:	6823      	ldr	r3, [r4, #0]
   1ec86:	4a06      	ldr	r2, [pc, #24]	; (1eca0 <z_reset_time_slice+0x28>)
   1ec88:	4418      	add	r0, r3
   1ec8a:	6150      	str	r0, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1ec8c:	2100      	movs	r1, #0
   1ec8e:	4618      	mov	r0, r3
}
   1ec90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1ec94:	f001 bd0c 	b.w	206b0 <z_set_timeout_expiry>
}
   1ec98:	bd10      	pop	{r4, pc}
   1ec9a:	bf00      	nop
   1ec9c:	20004330 	.word	0x20004330
   1eca0:	200042f0 	.word	0x200042f0

0001eca4 <k_sched_time_slice_set>:
{
   1eca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eca6:	4607      	mov	r7, r0
   1eca8:	460d      	mov	r5, r1
	__asm__ volatile(
   1ecaa:	f04f 0320 	mov.w	r3, #32
   1ecae:	f3ef 8411 	mrs	r4, BASEPRI
   1ecb2:	f383 8811 	msr	BASEPRI, r3
   1ecb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ecba:	481b      	ldr	r0, [pc, #108]	; (1ed28 <k_sched_time_slice_set+0x84>)
   1ecbc:	f001 f9d4 	bl	20068 <z_spin_lock_valid>
   1ecc0:	b940      	cbnz	r0, 1ecd4 <k_sched_time_slice_set+0x30>
   1ecc2:	491a      	ldr	r1, [pc, #104]	; (1ed2c <k_sched_time_slice_set+0x88>)
   1ecc4:	481a      	ldr	r0, [pc, #104]	; (1ed30 <k_sched_time_slice_set+0x8c>)
   1ecc6:	227c      	movs	r2, #124	; 0x7c
   1ecc8:	f003 f8ff 	bl	21eca <printk>
   1eccc:	217c      	movs	r1, #124	; 0x7c
   1ecce:	4817      	ldr	r0, [pc, #92]	; (1ed2c <k_sched_time_slice_set+0x88>)
   1ecd0:	f003 fbad 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1ecd4:	4814      	ldr	r0, [pc, #80]	; (1ed28 <k_sched_time_slice_set+0x84>)
   1ecd6:	f001 f9e5 	bl	200a4 <z_spin_lock_set_owner>
		_current_cpu->slice_ticks = 0;
   1ecda:	4b16      	ldr	r3, [pc, #88]	; (1ed34 <k_sched_time_slice_set+0x90>)
   1ecdc:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1ecde:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1ece2:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ece6:	2100      	movs	r1, #0
   1ece8:	615a      	str	r2, [r3, #20]
   1ecea:	fbe6 0107 	umlal	r0, r1, r6, r7
   1ecee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ecf2:	2300      	movs	r3, #0
   1ecf4:	f7e1 fa04 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1ecf8:	4b0f      	ldr	r3, [pc, #60]	; (1ed38 <k_sched_time_slice_set+0x94>)
   1ecfa:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1ecfc:	4b0f      	ldr	r3, [pc, #60]	; (1ed3c <k_sched_time_slice_set+0x98>)
   1ecfe:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1ed00:	f7ff ffba 	bl	1ec78 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ed04:	4808      	ldr	r0, [pc, #32]	; (1ed28 <k_sched_time_slice_set+0x84>)
   1ed06:	f001 f9bd 	bl	20084 <z_spin_unlock_valid>
   1ed0a:	b940      	cbnz	r0, 1ed1e <k_sched_time_slice_set+0x7a>
   1ed0c:	4907      	ldr	r1, [pc, #28]	; (1ed2c <k_sched_time_slice_set+0x88>)
   1ed0e:	4808      	ldr	r0, [pc, #32]	; (1ed30 <k_sched_time_slice_set+0x8c>)
   1ed10:	22a7      	movs	r2, #167	; 0xa7
   1ed12:	f003 f8da 	bl	21eca <printk>
   1ed16:	21a7      	movs	r1, #167	; 0xa7
   1ed18:	4804      	ldr	r0, [pc, #16]	; (1ed2c <k_sched_time_slice_set+0x88>)
   1ed1a:	f003 fb88 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1ed1e:	f384 8811 	msr	BASEPRI, r4
   1ed22:	f3bf 8f6f 	isb	sy
}
   1ed26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ed28:	20004328 	.word	0x20004328
   1ed2c:	0002a0e8 	.word	0x0002a0e8
   1ed30:	0002a026 	.word	0x0002a026
   1ed34:	200042f0 	.word	0x200042f0
   1ed38:	20004330 	.word	0x20004330
   1ed3c:	2000432c 	.word	0x2000432c

0001ed40 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1ed40:	b510      	push	{r4, lr}
   1ed42:	4602      	mov	r2, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1ed44:	460c      	mov	r4, r1
   1ed46:	b9c1      	cbnz	r1, 1ed7a <z_reschedule+0x3a>
   1ed48:	f3ef 8305 	mrs	r3, IPSR
   1ed4c:	b9ab      	cbnz	r3, 1ed7a <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   1ed4e:	4b14      	ldr	r3, [pc, #80]	; (1eda0 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   1ed50:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1ed52:	689b      	ldr	r3, [r3, #8]
   1ed54:	4299      	cmp	r1, r3
   1ed56:	d010      	beq.n	1ed7a <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ed58:	f001 f994 	bl	20084 <z_spin_unlock_valid>
   1ed5c:	b940      	cbnz	r0, 1ed70 <z_reschedule+0x30>
   1ed5e:	4911      	ldr	r1, [pc, #68]	; (1eda4 <z_reschedule+0x64>)
   1ed60:	4811      	ldr	r0, [pc, #68]	; (1eda8 <z_reschedule+0x68>)
   1ed62:	22be      	movs	r2, #190	; 0xbe
   1ed64:	f003 f8b1 	bl	21eca <printk>
   1ed68:	21be      	movs	r1, #190	; 0xbe
   1ed6a:	480e      	ldr	r0, [pc, #56]	; (1eda4 <z_reschedule+0x64>)
   1ed6c:	f003 fb5f 	bl	2242e <assert_post_action>
	ret = arch_swap(key);
   1ed70:	2000      	movs	r0, #0
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1ed72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ed76:	f7e5 bce1 	b.w	473c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ed7a:	4610      	mov	r0, r2
   1ed7c:	f001 f982 	bl	20084 <z_spin_unlock_valid>
   1ed80:	b940      	cbnz	r0, 1ed94 <z_reschedule+0x54>
   1ed82:	4908      	ldr	r1, [pc, #32]	; (1eda4 <z_reschedule+0x64>)
   1ed84:	4808      	ldr	r0, [pc, #32]	; (1eda8 <z_reschedule+0x68>)
   1ed86:	22a7      	movs	r2, #167	; 0xa7
   1ed88:	f003 f89f 	bl	21eca <printk>
   1ed8c:	21a7      	movs	r1, #167	; 0xa7
   1ed8e:	4805      	ldr	r0, [pc, #20]	; (1eda4 <z_reschedule+0x64>)
   1ed90:	f003 fb4d 	bl	2242e <assert_post_action>
   1ed94:	f384 8811 	msr	BASEPRI, r4
   1ed98:	f3bf 8f6f 	isb	sy
   1ed9c:	bd10      	pop	{r4, pc}
   1ed9e:	bf00      	nop
   1eda0:	200042f0 	.word	0x200042f0
   1eda4:	0002a0e8 	.word	0x0002a0e8
   1eda8:	0002a026 	.word	0x0002a026

0001edac <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   1edac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1edae:	f04f 0320 	mov.w	r3, #32
   1edb2:	f3ef 8511 	mrs	r5, BASEPRI
   1edb6:	f383 8811 	msr	BASEPRI, r3
   1edba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1edbe:	4822      	ldr	r0, [pc, #136]	; (1ee48 <k_sched_lock+0x9c>)
   1edc0:	f001 f952 	bl	20068 <z_spin_lock_valid>
   1edc4:	b940      	cbnz	r0, 1edd8 <k_sched_lock+0x2c>
   1edc6:	4921      	ldr	r1, [pc, #132]	; (1ee4c <k_sched_lock+0xa0>)
   1edc8:	4821      	ldr	r0, [pc, #132]	; (1ee50 <k_sched_lock+0xa4>)
   1edca:	227c      	movs	r2, #124	; 0x7c
   1edcc:	f003 f87d 	bl	21eca <printk>
   1edd0:	217c      	movs	r1, #124	; 0x7c
   1edd2:	481e      	ldr	r0, [pc, #120]	; (1ee4c <k_sched_lock+0xa0>)
   1edd4:	f003 fb2b 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1edd8:	481b      	ldr	r0, [pc, #108]	; (1ee48 <k_sched_lock+0x9c>)
   1edda:	f001 f963 	bl	200a4 <z_spin_lock_set_owner>
   1edde:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1ede2:	b153      	cbz	r3, 1edfa <k_sched_lock+0x4e>
   1ede4:	491b      	ldr	r1, [pc, #108]	; (1ee54 <k_sched_lock+0xa8>)
   1ede6:	481a      	ldr	r0, [pc, #104]	; (1ee50 <k_sched_lock+0xa4>)
   1ede8:	f44f 7289 	mov.w	r2, #274	; 0x112
   1edec:	f003 f86d 	bl	21eca <printk>
   1edf0:	f44f 7189 	mov.w	r1, #274	; 0x112
   1edf4:	4817      	ldr	r0, [pc, #92]	; (1ee54 <k_sched_lock+0xa8>)
   1edf6:	f003 fb1a 	bl	2242e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1edfa:	4c17      	ldr	r4, [pc, #92]	; (1ee58 <k_sched_lock+0xac>)
   1edfc:	68a2      	ldr	r2, [r4, #8]
   1edfe:	7bd2      	ldrb	r2, [r2, #15]
   1ee00:	2a01      	cmp	r2, #1
   1ee02:	d10a      	bne.n	1ee1a <k_sched_lock+0x6e>
   1ee04:	4913      	ldr	r1, [pc, #76]	; (1ee54 <k_sched_lock+0xa8>)
   1ee06:	4812      	ldr	r0, [pc, #72]	; (1ee50 <k_sched_lock+0xa4>)
   1ee08:	f240 1213 	movw	r2, #275	; 0x113
   1ee0c:	f003 f85d 	bl	21eca <printk>
   1ee10:	f240 1113 	movw	r1, #275	; 0x113
   1ee14:	480f      	ldr	r0, [pc, #60]	; (1ee54 <k_sched_lock+0xa8>)
   1ee16:	f003 fb0a 	bl	2242e <assert_post_action>
	--_current->base.sched_locked;
   1ee1a:	68a2      	ldr	r2, [r4, #8]
   1ee1c:	7bd3      	ldrb	r3, [r2, #15]
   1ee1e:	3b01      	subs	r3, #1
   1ee20:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ee22:	4809      	ldr	r0, [pc, #36]	; (1ee48 <k_sched_lock+0x9c>)
   1ee24:	f001 f92e 	bl	20084 <z_spin_unlock_valid>
   1ee28:	b940      	cbnz	r0, 1ee3c <k_sched_lock+0x90>
   1ee2a:	4908      	ldr	r1, [pc, #32]	; (1ee4c <k_sched_lock+0xa0>)
   1ee2c:	4808      	ldr	r0, [pc, #32]	; (1ee50 <k_sched_lock+0xa4>)
   1ee2e:	22a7      	movs	r2, #167	; 0xa7
   1ee30:	f003 f84b 	bl	21eca <printk>
   1ee34:	21a7      	movs	r1, #167	; 0xa7
   1ee36:	4805      	ldr	r0, [pc, #20]	; (1ee4c <k_sched_lock+0xa0>)
   1ee38:	f003 faf9 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1ee3c:	f385 8811 	msr	BASEPRI, r5
   1ee40:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1ee44:	bd38      	pop	{r3, r4, r5, pc}
   1ee46:	bf00      	nop
   1ee48:	20004328 	.word	0x20004328
   1ee4c:	0002a0e8 	.word	0x0002a0e8
   1ee50:	0002a026 	.word	0x0002a026
   1ee54:	0002fd0b 	.word	0x0002fd0b
   1ee58:	200042f0 	.word	0x200042f0

0001ee5c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1ee5c:	4b11      	ldr	r3, [pc, #68]	; (1eea4 <z_priq_dumb_remove+0x48>)
   1ee5e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1ee62:	4282      	cmp	r2, r0
{
   1ee64:	b510      	push	{r4, lr}
   1ee66:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1ee68:	d105      	bne.n	1ee76 <z_priq_dumb_remove+0x1a>
   1ee6a:	689b      	ldr	r3, [r3, #8]
   1ee6c:	428b      	cmp	r3, r1
   1ee6e:	d102      	bne.n	1ee76 <z_priq_dumb_remove+0x1a>
   1ee70:	7b4b      	ldrb	r3, [r1, #13]
   1ee72:	06db      	lsls	r3, r3, #27
   1ee74:	d114      	bne.n	1eea0 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ee76:	4b0c      	ldr	r3, [pc, #48]	; (1eea8 <z_priq_dumb_remove+0x4c>)
   1ee78:	429c      	cmp	r4, r3
   1ee7a:	d10a      	bne.n	1ee92 <z_priq_dumb_remove+0x36>
   1ee7c:	490b      	ldr	r1, [pc, #44]	; (1eeac <z_priq_dumb_remove+0x50>)
   1ee7e:	480c      	ldr	r0, [pc, #48]	; (1eeb0 <z_priq_dumb_remove+0x54>)
   1ee80:	f240 32da 	movw	r2, #986	; 0x3da
   1ee84:	f003 f821 	bl	21eca <printk>
   1ee88:	f240 31da 	movw	r1, #986	; 0x3da
   1ee8c:	4807      	ldr	r0, [pc, #28]	; (1eeac <z_priq_dumb_remove+0x50>)
   1ee8e:	f003 face 	bl	2242e <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1ee92:	e9d4 3200 	ldrd	r3, r2, [r4]
   1ee96:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1ee98:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ee9a:	2300      	movs	r3, #0
	node->prev = NULL;
   1ee9c:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1eea0:	bd10      	pop	{r4, pc}
   1eea2:	bf00      	nop
   1eea4:	200042f0 	.word	0x200042f0
   1eea8:	20002050 	.word	0x20002050
   1eeac:	0002fd36 	.word	0x0002fd36
   1eeb0:	0002a026 	.word	0x0002a026

0001eeb4 <z_unpend_thread>:
{
   1eeb4:	b538      	push	{r3, r4, r5, lr}
   1eeb6:	4604      	mov	r4, r0
	__asm__ volatile(
   1eeb8:	f04f 0320 	mov.w	r3, #32
   1eebc:	f3ef 8511 	mrs	r5, BASEPRI
   1eec0:	f383 8811 	msr	BASEPRI, r3
   1eec4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1eec8:	4814      	ldr	r0, [pc, #80]	; (1ef1c <z_unpend_thread+0x68>)
   1eeca:	f001 f8cd 	bl	20068 <z_spin_lock_valid>
   1eece:	b940      	cbnz	r0, 1eee2 <z_unpend_thread+0x2e>
   1eed0:	4913      	ldr	r1, [pc, #76]	; (1ef20 <z_unpend_thread+0x6c>)
   1eed2:	4814      	ldr	r0, [pc, #80]	; (1ef24 <z_unpend_thread+0x70>)
   1eed4:	227c      	movs	r2, #124	; 0x7c
   1eed6:	f002 fff8 	bl	21eca <printk>
   1eeda:	217c      	movs	r1, #124	; 0x7c
   1eedc:	4810      	ldr	r0, [pc, #64]	; (1ef20 <z_unpend_thread+0x6c>)
   1eede:	f003 faa6 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1eee2:	480e      	ldr	r0, [pc, #56]	; (1ef1c <z_unpend_thread+0x68>)
   1eee4:	f001 f8de 	bl	200a4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1eee8:	4620      	mov	r0, r4
   1eeea:	f009 fc04 	bl	286f6 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eeee:	480b      	ldr	r0, [pc, #44]	; (1ef1c <z_unpend_thread+0x68>)
   1eef0:	f001 f8c8 	bl	20084 <z_spin_unlock_valid>
   1eef4:	b940      	cbnz	r0, 1ef08 <z_unpend_thread+0x54>
   1eef6:	490a      	ldr	r1, [pc, #40]	; (1ef20 <z_unpend_thread+0x6c>)
   1eef8:	480a      	ldr	r0, [pc, #40]	; (1ef24 <z_unpend_thread+0x70>)
   1eefa:	22a7      	movs	r2, #167	; 0xa7
   1eefc:	f002 ffe5 	bl	21eca <printk>
   1ef00:	21a7      	movs	r1, #167	; 0xa7
   1ef02:	4807      	ldr	r0, [pc, #28]	; (1ef20 <z_unpend_thread+0x6c>)
   1ef04:	f003 fa93 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1ef08:	f385 8811 	msr	BASEPRI, r5
   1ef0c:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1ef10:	f104 0018 	add.w	r0, r4, #24
}
   1ef14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ef18:	f001 bb1e 	b.w	20558 <z_abort_timeout>
   1ef1c:	20004328 	.word	0x20004328
   1ef20:	0002a0e8 	.word	0x0002a0e8
   1ef24:	0002a026 	.word	0x0002a026

0001ef28 <update_cache>:
{
   1ef28:	b538      	push	{r3, r4, r5, lr}
   1ef2a:	4c19      	ldr	r4, [pc, #100]	; (1ef90 <update_cache+0x68>)
	if (_current_cpu->pending_abort != NULL) {
   1ef2c:	6923      	ldr	r3, [r4, #16]
   1ef2e:	68a2      	ldr	r2, [r4, #8]
{
   1ef30:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1ef32:	b143      	cbz	r3, 1ef46 <update_cache+0x1e>
		return _current_cpu->idle_thread;
   1ef34:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1ef36:	b1a8      	cbz	r0, 1ef64 <update_cache+0x3c>
		if (thread != _current) {
   1ef38:	68a3      	ldr	r3, [r4, #8]
   1ef3a:	42ab      	cmp	r3, r5
   1ef3c:	d001      	beq.n	1ef42 <update_cache+0x1a>
			z_reset_time_slice();
   1ef3e:	f7ff fe9b 	bl	1ec78 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1ef42:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1ef44:	e023      	b.n	1ef8e <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1ef46:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1ef4a:	f009 fbe3 	bl	28714 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1ef4e:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1ef50:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1ef52:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1ef54:	bf44      	itt	mi
   1ef56:	f043 0308 	orrmi.w	r3, r3, #8
   1ef5a:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1ef5c:	b905      	cbnz	r5, 1ef60 <update_cache+0x38>
   1ef5e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1ef60:	b151      	cbz	r1, 1ef78 <update_cache+0x50>
   1ef62:	e7e9      	b.n	1ef38 <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   1ef64:	b942      	cbnz	r2, 1ef78 <update_cache+0x50>
   1ef66:	490b      	ldr	r1, [pc, #44]	; (1ef94 <update_cache+0x6c>)
   1ef68:	480b      	ldr	r0, [pc, #44]	; (1ef98 <update_cache+0x70>)
   1ef6a:	2283      	movs	r2, #131	; 0x83
   1ef6c:	f002 ffad 	bl	21eca <printk>
   1ef70:	2183      	movs	r1, #131	; 0x83
   1ef72:	4808      	ldr	r0, [pc, #32]	; (1ef94 <update_cache+0x6c>)
   1ef74:	f003 fa5b 	bl	2242e <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1ef78:	68a3      	ldr	r3, [r4, #8]
   1ef7a:	7b5a      	ldrb	r2, [r3, #13]
   1ef7c:	06d2      	lsls	r2, r2, #27
   1ef7e:	d1db      	bne.n	1ef38 <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1ef80:	69aa      	ldr	r2, [r5, #24]
   1ef82:	2a00      	cmp	r2, #0
   1ef84:	d1d8      	bne.n	1ef38 <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   1ef86:	89da      	ldrh	r2, [r3, #14]
   1ef88:	2a7f      	cmp	r2, #127	; 0x7f
   1ef8a:	d9d5      	bls.n	1ef38 <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   1ef8c:	62a3      	str	r3, [r4, #40]	; 0x28
}
   1ef8e:	bd38      	pop	{r3, r4, r5, pc}
   1ef90:	200042f0 	.word	0x200042f0
   1ef94:	0002fd36 	.word	0x0002fd36
   1ef98:	0002a026 	.word	0x0002a026

0001ef9c <k_sched_unlock>:
{
   1ef9c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ef9e:	f04f 0320 	mov.w	r3, #32
   1efa2:	f3ef 8511 	mrs	r5, BASEPRI
   1efa6:	f383 8811 	msr	BASEPRI, r3
   1efaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1efae:	4824      	ldr	r0, [pc, #144]	; (1f040 <k_sched_unlock+0xa4>)
   1efb0:	f001 f85a 	bl	20068 <z_spin_lock_valid>
   1efb4:	b940      	cbnz	r0, 1efc8 <k_sched_unlock+0x2c>
   1efb6:	4923      	ldr	r1, [pc, #140]	; (1f044 <k_sched_unlock+0xa8>)
   1efb8:	4823      	ldr	r0, [pc, #140]	; (1f048 <k_sched_unlock+0xac>)
   1efba:	227c      	movs	r2, #124	; 0x7c
   1efbc:	f002 ff85 	bl	21eca <printk>
   1efc0:	217c      	movs	r1, #124	; 0x7c
   1efc2:	4820      	ldr	r0, [pc, #128]	; (1f044 <k_sched_unlock+0xa8>)
   1efc4:	f003 fa33 	bl	2242e <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   1efc8:	4c20      	ldr	r4, [pc, #128]	; (1f04c <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   1efca:	481d      	ldr	r0, [pc, #116]	; (1f040 <k_sched_unlock+0xa4>)
   1efcc:	f001 f86a 	bl	200a4 <z_spin_lock_set_owner>
   1efd0:	68a2      	ldr	r2, [r4, #8]
   1efd2:	7bd2      	ldrb	r2, [r2, #15]
   1efd4:	b952      	cbnz	r2, 1efec <k_sched_unlock+0x50>
   1efd6:	491e      	ldr	r1, [pc, #120]	; (1f050 <k_sched_unlock+0xb4>)
   1efd8:	481b      	ldr	r0, [pc, #108]	; (1f048 <k_sched_unlock+0xac>)
   1efda:	f44f 725d 	mov.w	r2, #884	; 0x374
   1efde:	f002 ff74 	bl	21eca <printk>
   1efe2:	f44f 715d 	mov.w	r1, #884	; 0x374
   1efe6:	481a      	ldr	r0, [pc, #104]	; (1f050 <k_sched_unlock+0xb4>)
   1efe8:	f003 fa21 	bl	2242e <assert_post_action>
   1efec:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1eff0:	b153      	cbz	r3, 1f008 <k_sched_unlock+0x6c>
   1eff2:	4917      	ldr	r1, [pc, #92]	; (1f050 <k_sched_unlock+0xb4>)
   1eff4:	4814      	ldr	r0, [pc, #80]	; (1f048 <k_sched_unlock+0xac>)
   1eff6:	f240 3275 	movw	r2, #885	; 0x375
   1effa:	f002 ff66 	bl	21eca <printk>
   1effe:	f240 3175 	movw	r1, #885	; 0x375
   1f002:	4813      	ldr	r0, [pc, #76]	; (1f050 <k_sched_unlock+0xb4>)
   1f004:	f003 fa13 	bl	2242e <assert_post_action>
		++_current->base.sched_locked;
   1f008:	68a2      	ldr	r2, [r4, #8]
   1f00a:	7bd3      	ldrb	r3, [r2, #15]
   1f00c:	3301      	adds	r3, #1
		update_cache(0);
   1f00e:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1f010:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1f012:	f7ff ff89 	bl	1ef28 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f016:	480a      	ldr	r0, [pc, #40]	; (1f040 <k_sched_unlock+0xa4>)
   1f018:	f001 f834 	bl	20084 <z_spin_unlock_valid>
   1f01c:	b940      	cbnz	r0, 1f030 <k_sched_unlock+0x94>
   1f01e:	4909      	ldr	r1, [pc, #36]	; (1f044 <k_sched_unlock+0xa8>)
   1f020:	4809      	ldr	r0, [pc, #36]	; (1f048 <k_sched_unlock+0xac>)
   1f022:	22a7      	movs	r2, #167	; 0xa7
   1f024:	f002 ff51 	bl	21eca <printk>
   1f028:	21a7      	movs	r1, #167	; 0xa7
   1f02a:	4806      	ldr	r0, [pc, #24]	; (1f044 <k_sched_unlock+0xa8>)
   1f02c:	f003 f9ff 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1f030:	f385 8811 	msr	BASEPRI, r5
   1f034:	f3bf 8f6f 	isb	sy
}
   1f038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   1f03c:	f009 bb51 	b.w	286e2 <z_reschedule_unlocked>
   1f040:	20004328 	.word	0x20004328
   1f044:	0002a0e8 	.word	0x0002a0e8
   1f048:	0002a026 	.word	0x0002a026
   1f04c:	200042f0 	.word	0x200042f0
   1f050:	0002fd36 	.word	0x0002fd36

0001f054 <ready_thread>:
{
   1f054:	b570      	push	{r4, r5, r6, lr}
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1f056:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1f058:	061a      	lsls	r2, r3, #24
{
   1f05a:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1f05c:	d439      	bmi.n	1f0d2 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1f05e:	06db      	lsls	r3, r3, #27
   1f060:	d137      	bne.n	1f0d2 <ready_thread+0x7e>
   1f062:	6983      	ldr	r3, [r0, #24]
   1f064:	2b00      	cmp	r3, #0
   1f066:	d134      	bne.n	1f0d2 <ready_thread+0x7e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1f068:	4b1a      	ldr	r3, [pc, #104]	; (1f0d4 <ready_thread+0x80>)
   1f06a:	4298      	cmp	r0, r3
   1f06c:	d10a      	bne.n	1f084 <ready_thread+0x30>
   1f06e:	491a      	ldr	r1, [pc, #104]	; (1f0d8 <ready_thread+0x84>)
   1f070:	481a      	ldr	r0, [pc, #104]	; (1f0dc <ready_thread+0x88>)
   1f072:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1f076:	f002 ff28 	bl	21eca <printk>
   1f07a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1f07e:	4816      	ldr	r0, [pc, #88]	; (1f0d8 <ready_thread+0x84>)
   1f080:	f003 f9d5 	bl	2242e <assert_post_action>
	return list->head == list;
   1f084:	4a16      	ldr	r2, [pc, #88]	; (1f0e0 <ready_thread+0x8c>)
   1f086:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f08a:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   1f08e:	428b      	cmp	r3, r1
   1f090:	d019      	beq.n	1f0c6 <ready_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f092:	b1c3      	cbz	r3, 1f0c6 <ready_thread+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   1f094:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1f098:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1f09c:	42ae      	cmp	r6, r5
   1f09e:	dd0d      	ble.n	1f0bc <ready_thread+0x68>
	node->prev = successor->prev;
   1f0a0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1f0a2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1f0a6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1f0a8:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   1f0aa:	7b63      	ldrb	r3, [r4, #13]
   1f0ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1f0b0:	7363      	strb	r3, [r4, #13]
		update_cache(0);
   1f0b2:	2000      	movs	r0, #0
}
   1f0b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   1f0b8:	f7ff bf36 	b.w	1ef28 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1f0bc:	4298      	cmp	r0, r3
   1f0be:	d002      	beq.n	1f0c6 <ready_thread+0x72>
   1f0c0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f0c2:	2b00      	cmp	r3, #0
   1f0c4:	d1e8      	bne.n	1f098 <ready_thread+0x44>
	node->prev = list->tail;
   1f0c6:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1f0ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1f0cc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f0ce:	6314      	str	r4, [r2, #48]	; 0x30
   1f0d0:	e7eb      	b.n	1f0aa <ready_thread+0x56>
}
   1f0d2:	bd70      	pop	{r4, r5, r6, pc}
   1f0d4:	20002050 	.word	0x20002050
   1f0d8:	0002fd36 	.word	0x0002fd36
   1f0dc:	0002a026 	.word	0x0002a026
   1f0e0:	200042f0 	.word	0x200042f0

0001f0e4 <z_ready_thread>:
{
   1f0e4:	b538      	push	{r3, r4, r5, lr}
   1f0e6:	4605      	mov	r5, r0
	__asm__ volatile(
   1f0e8:	f04f 0320 	mov.w	r3, #32
   1f0ec:	f3ef 8411 	mrs	r4, BASEPRI
   1f0f0:	f383 8811 	msr	BASEPRI, r3
   1f0f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f0f8:	4812      	ldr	r0, [pc, #72]	; (1f144 <z_ready_thread+0x60>)
   1f0fa:	f000 ffb5 	bl	20068 <z_spin_lock_valid>
   1f0fe:	b940      	cbnz	r0, 1f112 <z_ready_thread+0x2e>
   1f100:	4911      	ldr	r1, [pc, #68]	; (1f148 <z_ready_thread+0x64>)
   1f102:	4812      	ldr	r0, [pc, #72]	; (1f14c <z_ready_thread+0x68>)
   1f104:	227c      	movs	r2, #124	; 0x7c
   1f106:	f002 fee0 	bl	21eca <printk>
   1f10a:	217c      	movs	r1, #124	; 0x7c
   1f10c:	480e      	ldr	r0, [pc, #56]	; (1f148 <z_ready_thread+0x64>)
   1f10e:	f003 f98e 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1f112:	480c      	ldr	r0, [pc, #48]	; (1f144 <z_ready_thread+0x60>)
   1f114:	f000 ffc6 	bl	200a4 <z_spin_lock_set_owner>
		ready_thread(thread);
   1f118:	4628      	mov	r0, r5
   1f11a:	f7ff ff9b 	bl	1f054 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f11e:	4809      	ldr	r0, [pc, #36]	; (1f144 <z_ready_thread+0x60>)
   1f120:	f000 ffb0 	bl	20084 <z_spin_unlock_valid>
   1f124:	b940      	cbnz	r0, 1f138 <z_ready_thread+0x54>
   1f126:	4908      	ldr	r1, [pc, #32]	; (1f148 <z_ready_thread+0x64>)
   1f128:	4808      	ldr	r0, [pc, #32]	; (1f14c <z_ready_thread+0x68>)
   1f12a:	22a7      	movs	r2, #167	; 0xa7
   1f12c:	f002 fecd 	bl	21eca <printk>
   1f130:	21a7      	movs	r1, #167	; 0xa7
   1f132:	4805      	ldr	r0, [pc, #20]	; (1f148 <z_ready_thread+0x64>)
   1f134:	f003 f97b 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1f138:	f384 8811 	msr	BASEPRI, r4
   1f13c:	f3bf 8f6f 	isb	sy
}
   1f140:	bd38      	pop	{r3, r4, r5, pc}
   1f142:	bf00      	nop
   1f144:	20004328 	.word	0x20004328
   1f148:	0002a0e8 	.word	0x0002a0e8
   1f14c:	0002a026 	.word	0x0002a026

0001f150 <z_sched_start>:
{
   1f150:	b538      	push	{r3, r4, r5, lr}
   1f152:	4604      	mov	r4, r0
	__asm__ volatile(
   1f154:	f04f 0320 	mov.w	r3, #32
   1f158:	f3ef 8511 	mrs	r5, BASEPRI
   1f15c:	f383 8811 	msr	BASEPRI, r3
   1f160:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f164:	4818      	ldr	r0, [pc, #96]	; (1f1c8 <z_sched_start+0x78>)
   1f166:	f000 ff7f 	bl	20068 <z_spin_lock_valid>
   1f16a:	b940      	cbnz	r0, 1f17e <z_sched_start+0x2e>
   1f16c:	4917      	ldr	r1, [pc, #92]	; (1f1cc <z_sched_start+0x7c>)
   1f16e:	4818      	ldr	r0, [pc, #96]	; (1f1d0 <z_sched_start+0x80>)
   1f170:	227c      	movs	r2, #124	; 0x7c
   1f172:	f002 feaa 	bl	21eca <printk>
   1f176:	217c      	movs	r1, #124	; 0x7c
   1f178:	4814      	ldr	r0, [pc, #80]	; (1f1cc <z_sched_start+0x7c>)
   1f17a:	f003 f958 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1f17e:	4812      	ldr	r0, [pc, #72]	; (1f1c8 <z_sched_start+0x78>)
   1f180:	f000 ff90 	bl	200a4 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   1f184:	7b63      	ldrb	r3, [r4, #13]
   1f186:	075a      	lsls	r2, r3, #29
   1f188:	d411      	bmi.n	1f1ae <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f18a:	480f      	ldr	r0, [pc, #60]	; (1f1c8 <z_sched_start+0x78>)
   1f18c:	f000 ff7a 	bl	20084 <z_spin_unlock_valid>
   1f190:	b940      	cbnz	r0, 1f1a4 <z_sched_start+0x54>
   1f192:	490e      	ldr	r1, [pc, #56]	; (1f1cc <z_sched_start+0x7c>)
   1f194:	480e      	ldr	r0, [pc, #56]	; (1f1d0 <z_sched_start+0x80>)
   1f196:	22a7      	movs	r2, #167	; 0xa7
   1f198:	f002 fe97 	bl	21eca <printk>
   1f19c:	21a7      	movs	r1, #167	; 0xa7
   1f19e:	480b      	ldr	r0, [pc, #44]	; (1f1cc <z_sched_start+0x7c>)
   1f1a0:	f003 f945 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1f1a4:	f385 8811 	msr	BASEPRI, r5
   1f1a8:	f3bf 8f6f 	isb	sy
}
   1f1ac:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f1ae:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   1f1b2:	4620      	mov	r0, r4
   1f1b4:	7363      	strb	r3, [r4, #13]
   1f1b6:	f7ff ff4d 	bl	1f054 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1f1ba:	4629      	mov	r1, r5
   1f1bc:	4802      	ldr	r0, [pc, #8]	; (1f1c8 <z_sched_start+0x78>)
}
   1f1be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   1f1c2:	f7ff bdbd 	b.w	1ed40 <z_reschedule>
   1f1c6:	bf00      	nop
   1f1c8:	20004328 	.word	0x20004328
   1f1cc:	0002a0e8 	.word	0x0002a0e8
   1f1d0:	0002a026 	.word	0x0002a026

0001f1d4 <z_thread_timeout>:
{
   1f1d4:	b570      	push	{r4, r5, r6, lr}
   1f1d6:	4604      	mov	r4, r0
	__asm__ volatile(
   1f1d8:	f04f 0320 	mov.w	r3, #32
   1f1dc:	f3ef 8611 	mrs	r6, BASEPRI
   1f1e0:	f383 8811 	msr	BASEPRI, r3
   1f1e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f1e8:	4819      	ldr	r0, [pc, #100]	; (1f250 <z_thread_timeout+0x7c>)
   1f1ea:	f000 ff3d 	bl	20068 <z_spin_lock_valid>
   1f1ee:	b940      	cbnz	r0, 1f202 <z_thread_timeout+0x2e>
   1f1f0:	4918      	ldr	r1, [pc, #96]	; (1f254 <z_thread_timeout+0x80>)
   1f1f2:	4819      	ldr	r0, [pc, #100]	; (1f258 <z_thread_timeout+0x84>)
   1f1f4:	227c      	movs	r2, #124	; 0x7c
   1f1f6:	f002 fe68 	bl	21eca <printk>
   1f1fa:	217c      	movs	r1, #124	; 0x7c
   1f1fc:	4815      	ldr	r0, [pc, #84]	; (1f254 <z_thread_timeout+0x80>)
   1f1fe:	f003 f916 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1f202:	4813      	ldr	r0, [pc, #76]	; (1f250 <z_thread_timeout+0x7c>)
   1f204:	f000 ff4e 	bl	200a4 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   1f208:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1f20c:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   1f210:	b113      	cbz	r3, 1f218 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   1f212:	4628      	mov	r0, r5
   1f214:	f009 fa6f 	bl	286f6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1f218:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1f21c:	f023 0314 	bic.w	r3, r3, #20
		ready_thread(thread);
   1f220:	4628      	mov	r0, r5
   1f222:	f804 3c0b 	strb.w	r3, [r4, #-11]
   1f226:	f7ff ff15 	bl	1f054 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f22a:	4809      	ldr	r0, [pc, #36]	; (1f250 <z_thread_timeout+0x7c>)
   1f22c:	f000 ff2a 	bl	20084 <z_spin_unlock_valid>
   1f230:	b940      	cbnz	r0, 1f244 <z_thread_timeout+0x70>
   1f232:	4908      	ldr	r1, [pc, #32]	; (1f254 <z_thread_timeout+0x80>)
   1f234:	4808      	ldr	r0, [pc, #32]	; (1f258 <z_thread_timeout+0x84>)
   1f236:	22a7      	movs	r2, #167	; 0xa7
   1f238:	f002 fe47 	bl	21eca <printk>
   1f23c:	21a7      	movs	r1, #167	; 0xa7
   1f23e:	4805      	ldr	r0, [pc, #20]	; (1f254 <z_thread_timeout+0x80>)
   1f240:	f003 f8f5 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1f244:	f386 8811 	msr	BASEPRI, r6
   1f248:	f3bf 8f6f 	isb	sy
}
   1f24c:	bd70      	pop	{r4, r5, r6, pc}
   1f24e:	bf00      	nop
   1f250:	20004328 	.word	0x20004328
   1f254:	0002a0e8 	.word	0x0002a0e8
   1f258:	0002a026 	.word	0x0002a026

0001f25c <move_thread_to_end_of_prio_q>:
{
   1f25c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1f25e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1f262:	2b00      	cmp	r3, #0
{
   1f264:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1f266:	da03      	bge.n	1f270 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f268:	4601      	mov	r1, r0
   1f26a:	481d      	ldr	r0, [pc, #116]	; (1f2e0 <move_thread_to_end_of_prio_q+0x84>)
   1f26c:	f7ff fdf6 	bl	1ee5c <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1f270:	4b1c      	ldr	r3, [pc, #112]	; (1f2e4 <move_thread_to_end_of_prio_q+0x88>)
   1f272:	429c      	cmp	r4, r3
   1f274:	d10a      	bne.n	1f28c <move_thread_to_end_of_prio_q+0x30>
   1f276:	491c      	ldr	r1, [pc, #112]	; (1f2e8 <move_thread_to_end_of_prio_q+0x8c>)
   1f278:	481c      	ldr	r0, [pc, #112]	; (1f2ec <move_thread_to_end_of_prio_q+0x90>)
   1f27a:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1f27e:	f002 fe24 	bl	21eca <printk>
   1f282:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1f286:	4818      	ldr	r0, [pc, #96]	; (1f2e8 <move_thread_to_end_of_prio_q+0x8c>)
   1f288:	f003 f8d1 	bl	2242e <assert_post_action>
	return list->head == list;
   1f28c:	4a18      	ldr	r2, [pc, #96]	; (1f2f0 <move_thread_to_end_of_prio_q+0x94>)
   1f28e:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f292:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   1f296:	428b      	cmp	r3, r1
   1f298:	d01c      	beq.n	1f2d4 <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f29a:	b1db      	cbz	r3, 1f2d4 <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   1f29c:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1f2a0:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1f2a4:	42ae      	cmp	r6, r5
   1f2a6:	dd10      	ble.n	1f2ca <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   1f2a8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1f2aa:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1f2ae:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1f2b0:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   1f2b2:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   1f2b4:	6890      	ldr	r0, [r2, #8]
   1f2b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1f2ba:	7363      	strb	r3, [r4, #13]
   1f2bc:	1b03      	subs	r3, r0, r4
   1f2be:	4258      	negs	r0, r3
   1f2c0:	4158      	adcs	r0, r3
}
   1f2c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1f2c6:	f7ff be2f 	b.w	1ef28 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1f2ca:	4298      	cmp	r0, r3
   1f2cc:	d002      	beq.n	1f2d4 <move_thread_to_end_of_prio_q+0x78>
   1f2ce:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f2d0:	2b00      	cmp	r3, #0
   1f2d2:	d1e5      	bne.n	1f2a0 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   1f2d4:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1f2d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1f2da:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f2dc:	6314      	str	r4, [r2, #48]	; 0x30
   1f2de:	e7e8      	b.n	1f2b2 <move_thread_to_end_of_prio_q+0x56>
   1f2e0:	2000431c 	.word	0x2000431c
   1f2e4:	20002050 	.word	0x20002050
   1f2e8:	0002fd36 	.word	0x0002fd36
   1f2ec:	0002a026 	.word	0x0002a026
   1f2f0:	200042f0 	.word	0x200042f0

0001f2f4 <z_time_slice>:
{
   1f2f4:	b570      	push	{r4, r5, r6, lr}
   1f2f6:	4605      	mov	r5, r0
	__asm__ volatile(
   1f2f8:	f04f 0320 	mov.w	r3, #32
   1f2fc:	f3ef 8411 	mrs	r4, BASEPRI
   1f300:	f383 8811 	msr	BASEPRI, r3
   1f304:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f308:	4825      	ldr	r0, [pc, #148]	; (1f3a0 <z_time_slice+0xac>)
   1f30a:	f000 fead 	bl	20068 <z_spin_lock_valid>
   1f30e:	b940      	cbnz	r0, 1f322 <z_time_slice+0x2e>
   1f310:	4924      	ldr	r1, [pc, #144]	; (1f3a4 <z_time_slice+0xb0>)
   1f312:	4825      	ldr	r0, [pc, #148]	; (1f3a8 <z_time_slice+0xb4>)
   1f314:	227c      	movs	r2, #124	; 0x7c
   1f316:	f002 fdd8 	bl	21eca <printk>
   1f31a:	217c      	movs	r1, #124	; 0x7c
   1f31c:	4821      	ldr	r0, [pc, #132]	; (1f3a4 <z_time_slice+0xb0>)
   1f31e:	f003 f886 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1f322:	481f      	ldr	r0, [pc, #124]	; (1f3a0 <z_time_slice+0xac>)
   1f324:	f000 febe 	bl	200a4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   1f328:	4b20      	ldr	r3, [pc, #128]	; (1f3ac <z_time_slice+0xb8>)
   1f32a:	4a21      	ldr	r2, [pc, #132]	; (1f3b0 <z_time_slice+0xbc>)
   1f32c:	6898      	ldr	r0, [r3, #8]
   1f32e:	6811      	ldr	r1, [r2, #0]
   1f330:	4288      	cmp	r0, r1
   1f332:	4619      	mov	r1, r3
   1f334:	d113      	bne.n	1f35e <z_time_slice+0x6a>
			z_reset_time_slice();
   1f336:	f7ff fc9f 	bl	1ec78 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f33a:	4819      	ldr	r0, [pc, #100]	; (1f3a0 <z_time_slice+0xac>)
   1f33c:	f000 fea2 	bl	20084 <z_spin_unlock_valid>
   1f340:	b940      	cbnz	r0, 1f354 <z_time_slice+0x60>
   1f342:	4918      	ldr	r1, [pc, #96]	; (1f3a4 <z_time_slice+0xb0>)
   1f344:	4818      	ldr	r0, [pc, #96]	; (1f3a8 <z_time_slice+0xb4>)
   1f346:	22a7      	movs	r2, #167	; 0xa7
   1f348:	f002 fdbf 	bl	21eca <printk>
   1f34c:	21a7      	movs	r1, #167	; 0xa7
   1f34e:	4815      	ldr	r0, [pc, #84]	; (1f3a4 <z_time_slice+0xb0>)
   1f350:	f003 f86d 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1f354:	f384 8811 	msr	BASEPRI, r4
   1f358:	f3bf 8f6f 	isb	sy
}
   1f35c:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1f35e:	2600      	movs	r6, #0
   1f360:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1f362:	4a14      	ldr	r2, [pc, #80]	; (1f3b4 <z_time_slice+0xc0>)
   1f364:	6812      	ldr	r2, [r2, #0]
   1f366:	b1ba      	cbz	r2, 1f398 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   1f368:	89c2      	ldrh	r2, [r0, #14]
   1f36a:	2a7f      	cmp	r2, #127	; 0x7f
   1f36c:	d814      	bhi.n	1f398 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
   1f36e:	7b42      	ldrb	r2, [r0, #13]
   1f370:	06d2      	lsls	r2, r2, #27
   1f372:	d111      	bne.n	1f398 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1f374:	4a10      	ldr	r2, [pc, #64]	; (1f3b8 <z_time_slice+0xc4>)
   1f376:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1f37a:	6812      	ldr	r2, [r2, #0]
   1f37c:	4296      	cmp	r6, r2
   1f37e:	db0b      	blt.n	1f398 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   1f380:	4a0e      	ldr	r2, [pc, #56]	; (1f3bc <z_time_slice+0xc8>)
   1f382:	4290      	cmp	r0, r2
   1f384:	d008      	beq.n	1f398 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
   1f386:	695a      	ldr	r2, [r3, #20]
   1f388:	42aa      	cmp	r2, r5
   1f38a:	dc02      	bgt.n	1f392 <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
   1f38c:	f7ff ff66 	bl	1f25c <move_thread_to_end_of_prio_q>
   1f390:	e7d1      	b.n	1f336 <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
   1f392:	1b52      	subs	r2, r2, r5
   1f394:	615a      	str	r2, [r3, #20]
   1f396:	e7d0      	b.n	1f33a <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
   1f398:	2300      	movs	r3, #0
   1f39a:	614b      	str	r3, [r1, #20]
   1f39c:	e7cd      	b.n	1f33a <z_time_slice+0x46>
   1f39e:	bf00      	nop
   1f3a0:	20004328 	.word	0x20004328
   1f3a4:	0002a0e8 	.word	0x0002a0e8
   1f3a8:	0002a026 	.word	0x0002a026
   1f3ac:	200042f0 	.word	0x200042f0
   1f3b0:	20004324 	.word	0x20004324
   1f3b4:	20004330 	.word	0x20004330
   1f3b8:	2000432c 	.word	0x2000432c
   1f3bc:	20002050 	.word	0x20002050

0001f3c0 <z_impl_k_thread_suspend>:
{
   1f3c0:	b570      	push	{r4, r5, r6, lr}
   1f3c2:	4604      	mov	r4, r0
   1f3c4:	3018      	adds	r0, #24
   1f3c6:	f001 f8c7 	bl	20558 <z_abort_timeout>
	__asm__ volatile(
   1f3ca:	f04f 0320 	mov.w	r3, #32
   1f3ce:	f3ef 8611 	mrs	r6, BASEPRI
   1f3d2:	f383 8811 	msr	BASEPRI, r3
   1f3d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f3da:	4820      	ldr	r0, [pc, #128]	; (1f45c <z_impl_k_thread_suspend+0x9c>)
   1f3dc:	f000 fe44 	bl	20068 <z_spin_lock_valid>
   1f3e0:	b940      	cbnz	r0, 1f3f4 <z_impl_k_thread_suspend+0x34>
   1f3e2:	491f      	ldr	r1, [pc, #124]	; (1f460 <z_impl_k_thread_suspend+0xa0>)
   1f3e4:	481f      	ldr	r0, [pc, #124]	; (1f464 <z_impl_k_thread_suspend+0xa4>)
   1f3e6:	227c      	movs	r2, #124	; 0x7c
   1f3e8:	f002 fd6f 	bl	21eca <printk>
   1f3ec:	217c      	movs	r1, #124	; 0x7c
   1f3ee:	481c      	ldr	r0, [pc, #112]	; (1f460 <z_impl_k_thread_suspend+0xa0>)
   1f3f0:	f003 f81d 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1f3f4:	4819      	ldr	r0, [pc, #100]	; (1f45c <z_impl_k_thread_suspend+0x9c>)
   1f3f6:	f000 fe55 	bl	200a4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1f3fa:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1f3fe:	2b00      	cmp	r3, #0
   1f400:	da07      	bge.n	1f412 <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f402:	4621      	mov	r1, r4
   1f404:	4818      	ldr	r0, [pc, #96]	; (1f468 <z_impl_k_thread_suspend+0xa8>)
   1f406:	f7ff fd29 	bl	1ee5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1f40a:	7b63      	ldrb	r3, [r4, #13]
   1f40c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f410:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1f412:	4d16      	ldr	r5, [pc, #88]	; (1f46c <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1f414:	7b63      	ldrb	r3, [r4, #13]
   1f416:	68a8      	ldr	r0, [r5, #8]
   1f418:	f043 0310 	orr.w	r3, r3, #16
   1f41c:	7363      	strb	r3, [r4, #13]
   1f41e:	1b03      	subs	r3, r0, r4
   1f420:	4258      	negs	r0, r3
   1f422:	4158      	adcs	r0, r3
   1f424:	f7ff fd80 	bl	1ef28 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f428:	480c      	ldr	r0, [pc, #48]	; (1f45c <z_impl_k_thread_suspend+0x9c>)
   1f42a:	f000 fe2b 	bl	20084 <z_spin_unlock_valid>
   1f42e:	b940      	cbnz	r0, 1f442 <z_impl_k_thread_suspend+0x82>
   1f430:	490b      	ldr	r1, [pc, #44]	; (1f460 <z_impl_k_thread_suspend+0xa0>)
   1f432:	480c      	ldr	r0, [pc, #48]	; (1f464 <z_impl_k_thread_suspend+0xa4>)
   1f434:	22a7      	movs	r2, #167	; 0xa7
   1f436:	f002 fd48 	bl	21eca <printk>
   1f43a:	21a7      	movs	r1, #167	; 0xa7
   1f43c:	4808      	ldr	r0, [pc, #32]	; (1f460 <z_impl_k_thread_suspend+0xa0>)
   1f43e:	f002 fff6 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1f442:	f386 8811 	msr	BASEPRI, r6
   1f446:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1f44a:	68ab      	ldr	r3, [r5, #8]
   1f44c:	42a3      	cmp	r3, r4
   1f44e:	d103      	bne.n	1f458 <z_impl_k_thread_suspend+0x98>
}
   1f450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1f454:	f009 b945 	b.w	286e2 <z_reschedule_unlocked>
}
   1f458:	bd70      	pop	{r4, r5, r6, pc}
   1f45a:	bf00      	nop
   1f45c:	20004328 	.word	0x20004328
   1f460:	0002a0e8 	.word	0x0002a0e8
   1f464:	0002a026 	.word	0x0002a026
   1f468:	2000431c 	.word	0x2000431c
   1f46c:	200042f0 	.word	0x200042f0

0001f470 <z_thread_single_abort>:
{
   1f470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   1f474:	7b03      	ldrb	r3, [r0, #12]
   1f476:	07dd      	lsls	r5, r3, #31
{
   1f478:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   1f47a:	d50a      	bpl.n	1f492 <z_thread_single_abort+0x22>
   1f47c:	4979      	ldr	r1, [pc, #484]	; (1f664 <z_thread_single_abort+0x1f4>)
   1f47e:	487a      	ldr	r0, [pc, #488]	; (1f668 <z_thread_single_abort+0x1f8>)
   1f480:	f240 220e 	movw	r2, #526	; 0x20e
   1f484:	f002 fd21 	bl	21eca <printk>
   1f488:	f240 210e 	movw	r1, #526	; 0x20e
   1f48c:	4875      	ldr	r0, [pc, #468]	; (1f664 <z_thread_single_abort+0x1f4>)
   1f48e:	f002 ffce 	bl	2242e <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   1f492:	4e76      	ldr	r6, [pc, #472]	; (1f66c <z_thread_single_abort+0x1fc>)
   1f494:	68b3      	ldr	r3, [r6, #8]
   1f496:	42a3      	cmp	r3, r4
   1f498:	d10d      	bne.n	1f4b6 <z_thread_single_abort+0x46>
   1f49a:	f3ef 8305 	mrs	r3, IPSR
   1f49e:	b953      	cbnz	r3, 1f4b6 <z_thread_single_abort+0x46>
   1f4a0:	4970      	ldr	r1, [pc, #448]	; (1f664 <z_thread_single_abort+0x1f4>)
   1f4a2:	4871      	ldr	r0, [pc, #452]	; (1f668 <z_thread_single_abort+0x1f8>)
   1f4a4:	f44f 7204 	mov.w	r2, #528	; 0x210
   1f4a8:	f002 fd0f 	bl	21eca <printk>
   1f4ac:	f44f 7104 	mov.w	r1, #528	; 0x210
   1f4b0:	486c      	ldr	r0, [pc, #432]	; (1f664 <z_thread_single_abort+0x1f4>)
   1f4b2:	f002 ffbc 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1f4b6:	f04f 0320 	mov.w	r3, #32
   1f4ba:	f3ef 8511 	mrs	r5, BASEPRI
   1f4be:	f383 8811 	msr	BASEPRI, r3
   1f4c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f4c6:	486a      	ldr	r0, [pc, #424]	; (1f670 <z_thread_single_abort+0x200>)
   1f4c8:	f000 fdce 	bl	20068 <z_spin_lock_valid>
   1f4cc:	b940      	cbnz	r0, 1f4e0 <z_thread_single_abort+0x70>
   1f4ce:	4969      	ldr	r1, [pc, #420]	; (1f674 <z_thread_single_abort+0x204>)
   1f4d0:	4865      	ldr	r0, [pc, #404]	; (1f668 <z_thread_single_abort+0x1f8>)
   1f4d2:	227c      	movs	r2, #124	; 0x7c
   1f4d4:	f002 fcf9 	bl	21eca <printk>
   1f4d8:	217c      	movs	r1, #124	; 0x7c
   1f4da:	4866      	ldr	r0, [pc, #408]	; (1f674 <z_thread_single_abort+0x204>)
   1f4dc:	f002 ffa7 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1f4e0:	4863      	ldr	r0, [pc, #396]	; (1f670 <z_thread_single_abort+0x200>)
   1f4e2:	f000 fddf 	bl	200a4 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   1f4e6:	7b63      	ldrb	r3, [r4, #13]
   1f4e8:	f013 0f28 	tst.w	r3, #40	; 0x28
   1f4ec:	d012      	beq.n	1f514 <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f4ee:	4860      	ldr	r0, [pc, #384]	; (1f670 <z_thread_single_abort+0x200>)
   1f4f0:	f000 fdc8 	bl	20084 <z_spin_unlock_valid>
   1f4f4:	b940      	cbnz	r0, 1f508 <z_thread_single_abort+0x98>
   1f4f6:	495f      	ldr	r1, [pc, #380]	; (1f674 <z_thread_single_abort+0x204>)
   1f4f8:	485b      	ldr	r0, [pc, #364]	; (1f668 <z_thread_single_abort+0x1f8>)
   1f4fa:	22a7      	movs	r2, #167	; 0xa7
   1f4fc:	f002 fce5 	bl	21eca <printk>
   1f500:	21a7      	movs	r1, #167	; 0xa7
   1f502:	485c      	ldr	r0, [pc, #368]	; (1f674 <z_thread_single_abort+0x204>)
   1f504:	f002 ff93 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1f508:	f385 8811 	msr	BASEPRI, r5
   1f50c:	f3bf 8f6f 	isb	sy
}
   1f510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1f514:	f043 0320 	orr.w	r3, r3, #32
   1f518:	7363      	strb	r3, [r4, #13]
   1f51a:	4855      	ldr	r0, [pc, #340]	; (1f670 <z_thread_single_abort+0x200>)
   1f51c:	f000 fdb2 	bl	20084 <z_spin_unlock_valid>
   1f520:	b940      	cbnz	r0, 1f534 <z_thread_single_abort+0xc4>
   1f522:	4954      	ldr	r1, [pc, #336]	; (1f674 <z_thread_single_abort+0x204>)
   1f524:	4850      	ldr	r0, [pc, #320]	; (1f668 <z_thread_single_abort+0x1f8>)
   1f526:	22a7      	movs	r2, #167	; 0xa7
   1f528:	f002 fccf 	bl	21eca <printk>
   1f52c:	21a7      	movs	r1, #167	; 0xa7
   1f52e:	4851      	ldr	r0, [pc, #324]	; (1f674 <z_thread_single_abort+0x204>)
   1f530:	f002 ff7d 	bl	2242e <assert_post_action>
   1f534:	f385 8811 	msr	BASEPRI, r5
   1f538:	f3bf 8f6f 	isb	sy
   1f53c:	f104 0018 	add.w	r0, r4, #24
   1f540:	f001 f80a 	bl	20558 <z_abort_timeout>
	__asm__ volatile(
   1f544:	f04f 0320 	mov.w	r3, #32
   1f548:	f3ef 8711 	mrs	r7, BASEPRI
   1f54c:	f383 8811 	msr	BASEPRI, r3
   1f550:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f554:	4846      	ldr	r0, [pc, #280]	; (1f670 <z_thread_single_abort+0x200>)
   1f556:	f000 fd87 	bl	20068 <z_spin_lock_valid>
   1f55a:	b940      	cbnz	r0, 1f56e <z_thread_single_abort+0xfe>
   1f55c:	4945      	ldr	r1, [pc, #276]	; (1f674 <z_thread_single_abort+0x204>)
   1f55e:	4842      	ldr	r0, [pc, #264]	; (1f668 <z_thread_single_abort+0x1f8>)
   1f560:	227c      	movs	r2, #124	; 0x7c
   1f562:	f002 fcb2 	bl	21eca <printk>
   1f566:	217c      	movs	r1, #124	; 0x7c
   1f568:	4842      	ldr	r0, [pc, #264]	; (1f674 <z_thread_single_abort+0x204>)
   1f56a:	f002 ff60 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1f56e:	4840      	ldr	r0, [pc, #256]	; (1f670 <z_thread_single_abort+0x200>)
   1f570:	f000 fd98 	bl	200a4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1f574:	7b63      	ldrb	r3, [r4, #13]
   1f576:	06d8      	lsls	r0, r3, #27
   1f578:	d116      	bne.n	1f5a8 <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   1f57a:	69a2      	ldr	r2, [r4, #24]
   1f57c:	b9a2      	cbnz	r2, 1f5a8 <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   1f57e:	0619      	lsls	r1, r3, #24
   1f580:	d507      	bpl.n	1f592 <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   1f582:	4621      	mov	r1, r4
   1f584:	483c      	ldr	r0, [pc, #240]	; (1f678 <z_thread_single_abort+0x208>)
   1f586:	f7ff fc69 	bl	1ee5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1f58a:	7b63      	ldrb	r3, [r4, #13]
   1f58c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f590:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1f592:	68b0      	ldr	r0, [r6, #8]
   1f594:	1b02      	subs	r2, r0, r4
   1f596:	4250      	negs	r0, r2
   1f598:	4150      	adcs	r0, r2
   1f59a:	f7ff fcc5 	bl	1ef28 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1f59e:	f104 0930 	add.w	r9, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1f5a2:	f04f 0800 	mov.w	r8, #0
   1f5a6:	e025      	b.n	1f5f4 <z_thread_single_abort+0x184>
			if (z_is_thread_pending(thread)) {
   1f5a8:	079b      	lsls	r3, r3, #30
   1f5aa:	d5f8      	bpl.n	1f59e <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1f5ac:	f104 0008 	add.w	r0, r4, #8
   1f5b0:	f7ff fb4c 	bl	1ec4c <pended_on.isra.19>
   1f5b4:	4621      	mov	r1, r4
   1f5b6:	f7ff fc51 	bl	1ee5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f5ba:	7b63      	ldrb	r3, [r4, #13]
   1f5bc:	f023 0302 	bic.w	r3, r3, #2
   1f5c0:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1f5c2:	2300      	movs	r3, #0
   1f5c4:	60a3      	str	r3, [r4, #8]
   1f5c6:	e7ea      	b.n	1f59e <z_thread_single_abort+0x12e>
   1f5c8:	f105 0018 	add.w	r0, r5, #24
   1f5cc:	f000 ffc4 	bl	20558 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1f5d0:	f105 0008 	add.w	r0, r5, #8
   1f5d4:	f7ff fb3a 	bl	1ec4c <pended_on.isra.19>
   1f5d8:	4629      	mov	r1, r5
   1f5da:	f7ff fc3f 	bl	1ee5c <z_priq_dumb_remove>
   1f5de:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1f5e0:	f8c5 8008 	str.w	r8, [r5, #8]
   1f5e4:	f023 0302 	bic.w	r3, r3, #2
   1f5e8:	736b      	strb	r3, [r5, #13]
   1f5ea:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   1f5ee:	4628      	mov	r0, r5
   1f5f0:	f7ff fd30 	bl	1f054 <ready_thread>
	return list->head == list;
   1f5f4:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f5f6:	454d      	cmp	r5, r9
   1f5f8:	d001      	beq.n	1f5fe <z_thread_single_abort+0x18e>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1f5fa:	2d00      	cmp	r5, #0
   1f5fc:	d1e4      	bne.n	1f5c8 <z_thread_single_abort+0x158>
		if (z_is_idle_thread_object(_current)) {
   1f5fe:	68b2      	ldr	r2, [r6, #8]
   1f600:	4b1e      	ldr	r3, [pc, #120]	; (1f67c <z_thread_single_abort+0x20c>)
   1f602:	429a      	cmp	r2, r3
   1f604:	d102      	bne.n	1f60c <z_thread_single_abort+0x19c>
			update_cache(1);
   1f606:	2001      	movs	r0, #1
   1f608:	f7ff fc8e 	bl	1ef28 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1f60c:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1f60e:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   1f610:	f043 0308 	orr.w	r3, r3, #8
   1f614:	7363      	strb	r3, [r4, #13]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f616:	2200      	movs	r2, #0
   1f618:	f104 0338 	add.w	r3, r4, #56	; 0x38
   1f61c:	f3bf 8f5b 	dmb	ish
   1f620:	e853 1f00 	ldrex	r1, [r3]
   1f624:	e843 2000 	strex	r0, r2, [r3]
   1f628:	2800      	cmp	r0, #0
   1f62a:	d1f9      	bne.n	1f620 <z_thread_single_abort+0x1b0>
   1f62c:	f3bf 8f5b 	dmb	ish
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f630:	480f      	ldr	r0, [pc, #60]	; (1f670 <z_thread_single_abort+0x200>)
   1f632:	f000 fd27 	bl	20084 <z_spin_unlock_valid>
   1f636:	b940      	cbnz	r0, 1f64a <z_thread_single_abort+0x1da>
   1f638:	490e      	ldr	r1, [pc, #56]	; (1f674 <z_thread_single_abort+0x204>)
   1f63a:	480b      	ldr	r0, [pc, #44]	; (1f668 <z_thread_single_abort+0x1f8>)
   1f63c:	22a7      	movs	r2, #167	; 0xa7
   1f63e:	f002 fc44 	bl	21eca <printk>
   1f642:	21a7      	movs	r1, #167	; 0xa7
   1f644:	480b      	ldr	r0, [pc, #44]	; (1f674 <z_thread_single_abort+0x204>)
   1f646:	f002 fef2 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1f64a:	f387 8811 	msr	BASEPRI, r7
   1f64e:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1f652:	2d00      	cmp	r5, #0
   1f654:	f43f af5c 	beq.w	1f510 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   1f658:	4620      	mov	r0, r4
   1f65a:	462b      	mov	r3, r5
}
   1f65c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   1f660:	4718      	bx	r3
   1f662:	bf00      	nop
   1f664:	0002fd36 	.word	0x0002fd36
   1f668:	0002a026 	.word	0x0002a026
   1f66c:	200042f0 	.word	0x200042f0
   1f670:	20004328 	.word	0x20004328
   1f674:	0002a0e8 	.word	0x0002a0e8
   1f678:	2000431c 	.word	0x2000431c
   1f67c:	20002050 	.word	0x20002050

0001f680 <unready_thread>:
{
   1f680:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1f682:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1f686:	2b00      	cmp	r3, #0
{
   1f688:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1f68a:	da07      	bge.n	1f69c <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f68c:	4601      	mov	r1, r0
   1f68e:	4808      	ldr	r0, [pc, #32]	; (1f6b0 <unready_thread+0x30>)
   1f690:	f7ff fbe4 	bl	1ee5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1f694:	7b63      	ldrb	r3, [r4, #13]
   1f696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f69a:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   1f69c:	4b05      	ldr	r3, [pc, #20]	; (1f6b4 <unready_thread+0x34>)
   1f69e:	6898      	ldr	r0, [r3, #8]
   1f6a0:	1b03      	subs	r3, r0, r4
   1f6a2:	4258      	negs	r0, r3
   1f6a4:	4158      	adcs	r0, r3
}
   1f6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   1f6aa:	f7ff bc3d 	b.w	1ef28 <update_cache>
   1f6ae:	bf00      	nop
   1f6b0:	2000431c 	.word	0x2000431c
   1f6b4:	200042f0 	.word	0x200042f0

0001f6b8 <add_to_waitq_locked>:
{
   1f6b8:	b538      	push	{r3, r4, r5, lr}
   1f6ba:	4604      	mov	r4, r0
   1f6bc:	460d      	mov	r5, r1
	unready_thread(thread);
   1f6be:	f7ff ffdf 	bl	1f680 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1f6c2:	7b63      	ldrb	r3, [r4, #13]
   1f6c4:	f043 0302 	orr.w	r3, r3, #2
   1f6c8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1f6ca:	b1ed      	cbz	r5, 1f708 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1f6cc:	4b15      	ldr	r3, [pc, #84]	; (1f724 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   1f6ce:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1f6d0:	429c      	cmp	r4, r3
   1f6d2:	d10a      	bne.n	1f6ea <add_to_waitq_locked+0x32>
   1f6d4:	4914      	ldr	r1, [pc, #80]	; (1f728 <add_to_waitq_locked+0x70>)
   1f6d6:	4815      	ldr	r0, [pc, #84]	; (1f72c <add_to_waitq_locked+0x74>)
   1f6d8:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1f6dc:	f002 fbf5 	bl	21eca <printk>
   1f6e0:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1f6e4:	4810      	ldr	r0, [pc, #64]	; (1f728 <add_to_waitq_locked+0x70>)
   1f6e6:	f002 fea2 	bl	2242e <assert_post_action>
	return list->head == list;
   1f6ea:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f6ec:	429d      	cmp	r5, r3
   1f6ee:	d012      	beq.n	1f716 <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f6f0:	b18b      	cbz	r3, 1f716 <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   1f6f2:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1f6f6:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1f6fa:	4291      	cmp	r1, r2
   1f6fc:	dd05      	ble.n	1f70a <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   1f6fe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1f700:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1f704:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1f706:	605c      	str	r4, [r3, #4]
}
   1f708:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1f70a:	6869      	ldr	r1, [r5, #4]
   1f70c:	428b      	cmp	r3, r1
   1f70e:	d002      	beq.n	1f716 <add_to_waitq_locked+0x5e>
   1f710:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f712:	2b00      	cmp	r3, #0
   1f714:	d1ef      	bne.n	1f6f6 <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   1f716:	686b      	ldr	r3, [r5, #4]
   1f718:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1f71a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1f71c:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   1f71e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f720:	606c      	str	r4, [r5, #4]
}
   1f722:	e7f1      	b.n	1f708 <add_to_waitq_locked+0x50>
   1f724:	20002050 	.word	0x20002050
   1f728:	0002fd36 	.word	0x0002fd36
   1f72c:	0002a026 	.word	0x0002a026

0001f730 <pend>:
{
   1f730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f734:	4604      	mov	r4, r0
   1f736:	4688      	mov	r8, r1
   1f738:	4616      	mov	r6, r2
   1f73a:	461f      	mov	r7, r3
	__asm__ volatile(
   1f73c:	f04f 0320 	mov.w	r3, #32
   1f740:	f3ef 8511 	mrs	r5, BASEPRI
   1f744:	f383 8811 	msr	BASEPRI, r3
   1f748:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f74c:	481a      	ldr	r0, [pc, #104]	; (1f7b8 <pend+0x88>)
   1f74e:	f000 fc8b 	bl	20068 <z_spin_lock_valid>
   1f752:	b940      	cbnz	r0, 1f766 <pend+0x36>
   1f754:	4919      	ldr	r1, [pc, #100]	; (1f7bc <pend+0x8c>)
   1f756:	481a      	ldr	r0, [pc, #104]	; (1f7c0 <pend+0x90>)
   1f758:	227c      	movs	r2, #124	; 0x7c
   1f75a:	f002 fbb6 	bl	21eca <printk>
   1f75e:	217c      	movs	r1, #124	; 0x7c
   1f760:	4816      	ldr	r0, [pc, #88]	; (1f7bc <pend+0x8c>)
   1f762:	f002 fe64 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1f766:	4814      	ldr	r0, [pc, #80]	; (1f7b8 <pend+0x88>)
   1f768:	f000 fc9c 	bl	200a4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   1f76c:	4620      	mov	r0, r4
   1f76e:	4641      	mov	r1, r8
   1f770:	f7ff ffa2 	bl	1f6b8 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f774:	4810      	ldr	r0, [pc, #64]	; (1f7b8 <pend+0x88>)
   1f776:	f000 fc85 	bl	20084 <z_spin_unlock_valid>
   1f77a:	b940      	cbnz	r0, 1f78e <pend+0x5e>
   1f77c:	490f      	ldr	r1, [pc, #60]	; (1f7bc <pend+0x8c>)
   1f77e:	4810      	ldr	r0, [pc, #64]	; (1f7c0 <pend+0x90>)
   1f780:	22a7      	movs	r2, #167	; 0xa7
   1f782:	f002 fba2 	bl	21eca <printk>
   1f786:	21a7      	movs	r1, #167	; 0xa7
   1f788:	480c      	ldr	r0, [pc, #48]	; (1f7bc <pend+0x8c>)
   1f78a:	f002 fe50 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1f78e:	f385 8811 	msr	BASEPRI, r5
   1f792:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f796:	1c7b      	adds	r3, r7, #1
   1f798:	bf08      	it	eq
   1f79a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1f79e:	d008      	beq.n	1f7b2 <pend+0x82>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1f7a0:	4632      	mov	r2, r6
   1f7a2:	463b      	mov	r3, r7
   1f7a4:	f104 0018 	add.w	r0, r4, #24
   1f7a8:	4906      	ldr	r1, [pc, #24]	; (1f7c4 <pend+0x94>)
}
   1f7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f7ae:	f000 be11 	b.w	203d4 <z_add_timeout>
   1f7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f7b6:	bf00      	nop
   1f7b8:	20004328 	.word	0x20004328
   1f7bc:	0002a0e8 	.word	0x0002a0e8
   1f7c0:	0002a026 	.word	0x0002a026
   1f7c4:	0001f1d5 	.word	0x0001f1d5

0001f7c8 <z_pend_curr>:
{
   1f7c8:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   1f7ca:	4b0e      	ldr	r3, [pc, #56]	; (1f804 <z_pend_curr+0x3c>)
{
   1f7cc:	4605      	mov	r5, r0
	pending_current = _current;
   1f7ce:	6898      	ldr	r0, [r3, #8]
   1f7d0:	4b0d      	ldr	r3, [pc, #52]	; (1f808 <z_pend_curr+0x40>)
{
   1f7d2:	460c      	mov	r4, r1
	pending_current = _current;
   1f7d4:	6018      	str	r0, [r3, #0]
{
   1f7d6:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1f7d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1f7dc:	f7ff ffa8 	bl	1f730 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f7e0:	4628      	mov	r0, r5
   1f7e2:	f000 fc4f 	bl	20084 <z_spin_unlock_valid>
   1f7e6:	b940      	cbnz	r0, 1f7fa <z_pend_curr+0x32>
   1f7e8:	4908      	ldr	r1, [pc, #32]	; (1f80c <z_pend_curr+0x44>)
   1f7ea:	4809      	ldr	r0, [pc, #36]	; (1f810 <z_pend_curr+0x48>)
   1f7ec:	22be      	movs	r2, #190	; 0xbe
   1f7ee:	f002 fb6c 	bl	21eca <printk>
   1f7f2:	21be      	movs	r1, #190	; 0xbe
   1f7f4:	4805      	ldr	r0, [pc, #20]	; (1f80c <z_pend_curr+0x44>)
   1f7f6:	f002 fe1a 	bl	2242e <assert_post_action>
   1f7fa:	4620      	mov	r0, r4
}
   1f7fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f800:	f7e4 bf9c 	b.w	473c <arch_swap>
   1f804:	200042f0 	.word	0x200042f0
   1f808:	20004324 	.word	0x20004324
   1f80c:	0002a0e8 	.word	0x0002a0e8
   1f810:	0002a026 	.word	0x0002a026

0001f814 <z_set_prio>:
{
   1f814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f816:	4604      	mov	r4, r0
   1f818:	460d      	mov	r5, r1
	__asm__ volatile(
   1f81a:	f04f 0320 	mov.w	r3, #32
   1f81e:	f3ef 8611 	mrs	r6, BASEPRI
   1f822:	f383 8811 	msr	BASEPRI, r3
   1f826:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f82a:	4831      	ldr	r0, [pc, #196]	; (1f8f0 <z_set_prio+0xdc>)
   1f82c:	f000 fc1c 	bl	20068 <z_spin_lock_valid>
   1f830:	b940      	cbnz	r0, 1f844 <z_set_prio+0x30>
   1f832:	4930      	ldr	r1, [pc, #192]	; (1f8f4 <z_set_prio+0xe0>)
   1f834:	4830      	ldr	r0, [pc, #192]	; (1f8f8 <z_set_prio+0xe4>)
   1f836:	227c      	movs	r2, #124	; 0x7c
   1f838:	f002 fb47 	bl	21eca <printk>
   1f83c:	217c      	movs	r1, #124	; 0x7c
   1f83e:	482d      	ldr	r0, [pc, #180]	; (1f8f4 <z_set_prio+0xe0>)
   1f840:	f002 fdf5 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1f844:	482a      	ldr	r0, [pc, #168]	; (1f8f0 <z_set_prio+0xdc>)
   1f846:	f000 fc2d 	bl	200a4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1f84a:	7b63      	ldrb	r3, [r4, #13]
   1f84c:	06db      	lsls	r3, r3, #27
   1f84e:	b26d      	sxtb	r5, r5
   1f850:	d14a      	bne.n	1f8e8 <z_set_prio+0xd4>
		if (need_sched) {
   1f852:	69a3      	ldr	r3, [r4, #24]
   1f854:	2b00      	cmp	r3, #0
   1f856:	d147      	bne.n	1f8e8 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f858:	4621      	mov	r1, r4
   1f85a:	4828      	ldr	r0, [pc, #160]	; (1f8fc <z_set_prio+0xe8>)
   1f85c:	f7ff fafe 	bl	1ee5c <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1f860:	4b27      	ldr	r3, [pc, #156]	; (1f900 <z_set_prio+0xec>)
				thread->base.prio = prio;
   1f862:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1f864:	429c      	cmp	r4, r3
   1f866:	d10a      	bne.n	1f87e <z_set_prio+0x6a>
   1f868:	4926      	ldr	r1, [pc, #152]	; (1f904 <z_set_prio+0xf0>)
   1f86a:	4823      	ldr	r0, [pc, #140]	; (1f8f8 <z_set_prio+0xe4>)
   1f86c:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1f870:	f002 fb2b 	bl	21eca <printk>
   1f874:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1f878:	4822      	ldr	r0, [pc, #136]	; (1f904 <z_set_prio+0xf0>)
   1f87a:	f002 fdd8 	bl	2242e <assert_post_action>
	return list->head == list;
   1f87e:	4a22      	ldr	r2, [pc, #136]	; (1f908 <z_set_prio+0xf4>)
   1f880:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f884:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   1f888:	428b      	cmp	r3, r1
   1f88a:	d027      	beq.n	1f8dc <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f88c:	b333      	cbz	r3, 1f8dc <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   1f88e:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1f892:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1f896:	42af      	cmp	r7, r5
   1f898:	dd1b      	ble.n	1f8d2 <z_set_prio+0xbe>
	node->prev = successor->prev;
   1f89a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1f89c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1f8a0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1f8a2:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1f8a4:	2001      	movs	r0, #1
   1f8a6:	f7ff fb3f 	bl	1ef28 <update_cache>
   1f8aa:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f8ac:	4810      	ldr	r0, [pc, #64]	; (1f8f0 <z_set_prio+0xdc>)
   1f8ae:	f000 fbe9 	bl	20084 <z_spin_unlock_valid>
   1f8b2:	b940      	cbnz	r0, 1f8c6 <z_set_prio+0xb2>
   1f8b4:	490f      	ldr	r1, [pc, #60]	; (1f8f4 <z_set_prio+0xe0>)
   1f8b6:	4810      	ldr	r0, [pc, #64]	; (1f8f8 <z_set_prio+0xe4>)
   1f8b8:	22a7      	movs	r2, #167	; 0xa7
   1f8ba:	f002 fb06 	bl	21eca <printk>
   1f8be:	21a7      	movs	r1, #167	; 0xa7
   1f8c0:	480c      	ldr	r0, [pc, #48]	; (1f8f4 <z_set_prio+0xe0>)
   1f8c2:	f002 fdb4 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1f8c6:	f386 8811 	msr	BASEPRI, r6
   1f8ca:	f3bf 8f6f 	isb	sy
}
   1f8ce:	4620      	mov	r0, r4
   1f8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1f8d2:	4298      	cmp	r0, r3
   1f8d4:	d002      	beq.n	1f8dc <z_set_prio+0xc8>
   1f8d6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f8d8:	2b00      	cmp	r3, #0
   1f8da:	d1da      	bne.n	1f892 <z_set_prio+0x7e>
	node->prev = list->tail;
   1f8dc:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1f8e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1f8e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f8e4:	6314      	str	r4, [r2, #48]	; 0x30
   1f8e6:	e7dd      	b.n	1f8a4 <z_set_prio+0x90>
			thread->base.prio = prio;
   1f8e8:	73a5      	strb	r5, [r4, #14]
   1f8ea:	2400      	movs	r4, #0
   1f8ec:	e7de      	b.n	1f8ac <z_set_prio+0x98>
   1f8ee:	bf00      	nop
   1f8f0:	20004328 	.word	0x20004328
   1f8f4:	0002a0e8 	.word	0x0002a0e8
   1f8f8:	0002a026 	.word	0x0002a026
   1f8fc:	2000431c 	.word	0x2000431c
   1f900:	20002050 	.word	0x20002050
   1f904:	0002fd36 	.word	0x0002fd36
   1f908:	200042f0 	.word	0x200042f0

0001f90c <z_unpend_first_thread>:
{
   1f90c:	b538      	push	{r3, r4, r5, lr}
   1f90e:	4604      	mov	r4, r0
	__asm__ volatile(
   1f910:	f04f 0320 	mov.w	r3, #32
   1f914:	f3ef 8511 	mrs	r5, BASEPRI
   1f918:	f383 8811 	msr	BASEPRI, r3
   1f91c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f920:	482b      	ldr	r0, [pc, #172]	; (1f9d0 <z_unpend_first_thread+0xc4>)
   1f922:	f000 fba1 	bl	20068 <z_spin_lock_valid>
   1f926:	b940      	cbnz	r0, 1f93a <z_unpend_first_thread+0x2e>
   1f928:	492a      	ldr	r1, [pc, #168]	; (1f9d4 <z_unpend_first_thread+0xc8>)
   1f92a:	482b      	ldr	r0, [pc, #172]	; (1f9d8 <z_unpend_first_thread+0xcc>)
   1f92c:	227c      	movs	r2, #124	; 0x7c
   1f92e:	f002 facc 	bl	21eca <printk>
   1f932:	217c      	movs	r1, #124	; 0x7c
   1f934:	4827      	ldr	r0, [pc, #156]	; (1f9d4 <z_unpend_first_thread+0xc8>)
   1f936:	f002 fd7a 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1f93a:	4825      	ldr	r0, [pc, #148]	; (1f9d0 <z_unpend_first_thread+0xc4>)
   1f93c:	f000 fbb2 	bl	200a4 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   1f940:	4620      	mov	r0, r4
   1f942:	f008 fee7 	bl	28714 <z_priq_dumb_best>
   1f946:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f948:	4821      	ldr	r0, [pc, #132]	; (1f9d0 <z_unpend_first_thread+0xc4>)
   1f94a:	f000 fb9b 	bl	20084 <z_spin_unlock_valid>
   1f94e:	b940      	cbnz	r0, 1f962 <z_unpend_first_thread+0x56>
   1f950:	4920      	ldr	r1, [pc, #128]	; (1f9d4 <z_unpend_first_thread+0xc8>)
   1f952:	4821      	ldr	r0, [pc, #132]	; (1f9d8 <z_unpend_first_thread+0xcc>)
   1f954:	22a7      	movs	r2, #167	; 0xa7
   1f956:	f002 fab8 	bl	21eca <printk>
   1f95a:	21a7      	movs	r1, #167	; 0xa7
   1f95c:	481d      	ldr	r0, [pc, #116]	; (1f9d4 <z_unpend_first_thread+0xc8>)
   1f95e:	f002 fd66 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1f962:	f385 8811 	msr	BASEPRI, r5
   1f966:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1f96a:	b37c      	cbz	r4, 1f9cc <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   1f96c:	f04f 0320 	mov.w	r3, #32
   1f970:	f3ef 8511 	mrs	r5, BASEPRI
   1f974:	f383 8811 	msr	BASEPRI, r3
   1f978:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f97c:	4814      	ldr	r0, [pc, #80]	; (1f9d0 <z_unpend_first_thread+0xc4>)
   1f97e:	f000 fb73 	bl	20068 <z_spin_lock_valid>
   1f982:	b940      	cbnz	r0, 1f996 <z_unpend_first_thread+0x8a>
   1f984:	4913      	ldr	r1, [pc, #76]	; (1f9d4 <z_unpend_first_thread+0xc8>)
   1f986:	4814      	ldr	r0, [pc, #80]	; (1f9d8 <z_unpend_first_thread+0xcc>)
   1f988:	227c      	movs	r2, #124	; 0x7c
   1f98a:	f002 fa9e 	bl	21eca <printk>
   1f98e:	217c      	movs	r1, #124	; 0x7c
   1f990:	4810      	ldr	r0, [pc, #64]	; (1f9d4 <z_unpend_first_thread+0xc8>)
   1f992:	f002 fd4c 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1f996:	480e      	ldr	r0, [pc, #56]	; (1f9d0 <z_unpend_first_thread+0xc4>)
   1f998:	f000 fb84 	bl	200a4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1f99c:	4620      	mov	r0, r4
   1f99e:	f008 feaa 	bl	286f6 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f9a2:	480b      	ldr	r0, [pc, #44]	; (1f9d0 <z_unpend_first_thread+0xc4>)
   1f9a4:	f000 fb6e 	bl	20084 <z_spin_unlock_valid>
   1f9a8:	b940      	cbnz	r0, 1f9bc <z_unpend_first_thread+0xb0>
   1f9aa:	490a      	ldr	r1, [pc, #40]	; (1f9d4 <z_unpend_first_thread+0xc8>)
   1f9ac:	480a      	ldr	r0, [pc, #40]	; (1f9d8 <z_unpend_first_thread+0xcc>)
   1f9ae:	22a7      	movs	r2, #167	; 0xa7
   1f9b0:	f002 fa8b 	bl	21eca <printk>
   1f9b4:	21a7      	movs	r1, #167	; 0xa7
   1f9b6:	4807      	ldr	r0, [pc, #28]	; (1f9d4 <z_unpend_first_thread+0xc8>)
   1f9b8:	f002 fd39 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1f9bc:	f385 8811 	msr	BASEPRI, r5
   1f9c0:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1f9c4:	f104 0018 	add.w	r0, r4, #24
   1f9c8:	f000 fdc6 	bl	20558 <z_abort_timeout>
}
   1f9cc:	4620      	mov	r0, r4
   1f9ce:	bd38      	pop	{r3, r4, r5, pc}
   1f9d0:	20004328 	.word	0x20004328
   1f9d4:	0002a0e8 	.word	0x0002a0e8
   1f9d8:	0002a026 	.word	0x0002a026

0001f9dc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1f9dc:	4b04      	ldr	r3, [pc, #16]	; (1f9f0 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1f9de:	2100      	movs	r1, #0
   1f9e0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1f9e4:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1f9e8:	4608      	mov	r0, r1
   1f9ea:	f7ff b95b 	b.w	1eca4 <k_sched_time_slice_set>
   1f9ee:	bf00      	nop
   1f9f0:	200042f0 	.word	0x200042f0

0001f9f4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1f9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f9f6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1f9fa:	b153      	cbz	r3, 1fa12 <z_impl_k_yield+0x1e>
   1f9fc:	493d      	ldr	r1, [pc, #244]	; (1faf4 <z_impl_k_yield+0x100>)
   1f9fe:	483e      	ldr	r0, [pc, #248]	; (1faf8 <z_impl_k_yield+0x104>)
   1fa00:	f240 42cf 	movw	r2, #1231	; 0x4cf
   1fa04:	f002 fa61 	bl	21eca <printk>
   1fa08:	f240 41cf 	movw	r1, #1231	; 0x4cf
   1fa0c:	4839      	ldr	r0, [pc, #228]	; (1faf4 <z_impl_k_yield+0x100>)
   1fa0e:	f002 fd0e 	bl	2242e <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   1fa12:	4c3a      	ldr	r4, [pc, #232]	; (1fafc <z_impl_k_yield+0x108>)
   1fa14:	4e3a      	ldr	r6, [pc, #232]	; (1fb00 <z_impl_k_yield+0x10c>)
   1fa16:	68a2      	ldr	r2, [r4, #8]
   1fa18:	42b2      	cmp	r2, r6
   1fa1a:	d054      	beq.n	1fac6 <z_impl_k_yield+0xd2>
	__asm__ volatile(
   1fa1c:	f04f 0320 	mov.w	r3, #32
   1fa20:	f3ef 8711 	mrs	r7, BASEPRI
   1fa24:	f383 8811 	msr	BASEPRI, r3
   1fa28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fa2c:	4835      	ldr	r0, [pc, #212]	; (1fb04 <z_impl_k_yield+0x110>)
   1fa2e:	f000 fb1b 	bl	20068 <z_spin_lock_valid>
   1fa32:	b940      	cbnz	r0, 1fa46 <z_impl_k_yield+0x52>
   1fa34:	4934      	ldr	r1, [pc, #208]	; (1fb08 <z_impl_k_yield+0x114>)
   1fa36:	4830      	ldr	r0, [pc, #192]	; (1faf8 <z_impl_k_yield+0x104>)
   1fa38:	227c      	movs	r2, #124	; 0x7c
   1fa3a:	f002 fa46 	bl	21eca <printk>
   1fa3e:	217c      	movs	r1, #124	; 0x7c
   1fa40:	4831      	ldr	r0, [pc, #196]	; (1fb08 <z_impl_k_yield+0x114>)
   1fa42:	f002 fcf4 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1fa46:	482f      	ldr	r0, [pc, #188]	; (1fb04 <z_impl_k_yield+0x110>)
   1fa48:	f000 fb2c 	bl	200a4 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   1fa4c:	68a1      	ldr	r1, [r4, #8]
   1fa4e:	482f      	ldr	r0, [pc, #188]	; (1fb0c <z_impl_k_yield+0x118>)
   1fa50:	f7ff fa04 	bl	1ee5c <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1fa54:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1fa56:	42b5      	cmp	r5, r6
   1fa58:	d10a      	bne.n	1fa70 <z_impl_k_yield+0x7c>
   1fa5a:	4926      	ldr	r1, [pc, #152]	; (1faf4 <z_impl_k_yield+0x100>)
   1fa5c:	4826      	ldr	r0, [pc, #152]	; (1faf8 <z_impl_k_yield+0x104>)
   1fa5e:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1fa62:	f002 fa32 	bl	21eca <printk>
   1fa66:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1fa6a:	4822      	ldr	r0, [pc, #136]	; (1faf4 <z_impl_k_yield+0x100>)
   1fa6c:	f002 fcdf 	bl	2242e <assert_post_action>
	return list->head == list;
   1fa70:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fa74:	4a25      	ldr	r2, [pc, #148]	; (1fb0c <z_impl_k_yield+0x118>)
   1fa76:	4293      	cmp	r3, r2
   1fa78:	d036      	beq.n	1fae8 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fa7a:	2b00      	cmp	r3, #0
   1fa7c:	d034      	beq.n	1fae8 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fa7e:	f995 000e 	ldrsb.w	r0, [r5, #14]
   1fa82:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1fa86:	4286      	cmp	r6, r0
   1fa88:	dd29      	ble.n	1fade <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   1fa8a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1fa8c:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   1fa90:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   1fa92:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   1fa94:	68a2      	ldr	r2, [r4, #8]
	thread->base.thread_state |= states;
   1fa96:	7b53      	ldrb	r3, [r2, #13]
   1fa98:	f063 037f 	orn	r3, r3, #127	; 0x7f
			update_cache(1);
   1fa9c:	2001      	movs	r0, #1
   1fa9e:	7353      	strb	r3, [r2, #13]
   1faa0:	f7ff fa42 	bl	1ef28 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1faa4:	4817      	ldr	r0, [pc, #92]	; (1fb04 <z_impl_k_yield+0x110>)
   1faa6:	f000 faed 	bl	20084 <z_spin_unlock_valid>
   1faaa:	b940      	cbnz	r0, 1fabe <z_impl_k_yield+0xca>
   1faac:	4916      	ldr	r1, [pc, #88]	; (1fb08 <z_impl_k_yield+0x114>)
   1faae:	4812      	ldr	r0, [pc, #72]	; (1faf8 <z_impl_k_yield+0x104>)
   1fab0:	22a7      	movs	r2, #167	; 0xa7
   1fab2:	f002 fa0a 	bl	21eca <printk>
   1fab6:	21a7      	movs	r1, #167	; 0xa7
   1fab8:	4813      	ldr	r0, [pc, #76]	; (1fb08 <z_impl_k_yield+0x114>)
   1faba:	f002 fcb8 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1fabe:	f387 8811 	msr	BASEPRI, r7
   1fac2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1fac6:	f04f 0320 	mov.w	r3, #32
   1faca:	f3ef 8011 	mrs	r0, BASEPRI
   1face:	f383 8811 	msr	BASEPRI, r3
   1fad2:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1fad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1fada:	f7e4 be2f 	b.w	473c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1fade:	4299      	cmp	r1, r3
   1fae0:	d002      	beq.n	1fae8 <z_impl_k_yield+0xf4>
   1fae2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fae4:	2b00      	cmp	r3, #0
   1fae6:	d1cc      	bne.n	1fa82 <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   1fae8:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   1faec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1faee:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1faf0:	6325      	str	r5, [r4, #48]	; 0x30
   1faf2:	e7cf      	b.n	1fa94 <z_impl_k_yield+0xa0>
   1faf4:	0002fd36 	.word	0x0002fd36
   1faf8:	0002a026 	.word	0x0002a026
   1fafc:	200042f0 	.word	0x200042f0
   1fb00:	20002050 	.word	0x20002050
   1fb04:	20004328 	.word	0x20004328
   1fb08:	0002a0e8 	.word	0x0002a0e8
   1fb0c:	2000431c 	.word	0x2000431c

0001fb10 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1fb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb14:	4606      	mov	r6, r0
   1fb16:	460f      	mov	r7, r1
   1fb18:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1fb1c:	b153      	cbz	r3, 1fb34 <z_tick_sleep+0x24>
   1fb1e:	4935      	ldr	r1, [pc, #212]	; (1fbf4 <z_tick_sleep+0xe4>)
   1fb20:	4835      	ldr	r0, [pc, #212]	; (1fbf8 <z_tick_sleep+0xe8>)
   1fb22:	f240 42ed 	movw	r2, #1261	; 0x4ed
   1fb26:	f002 f9d0 	bl	21eca <printk>
   1fb2a:	f240 41ed 	movw	r1, #1261	; 0x4ed
   1fb2e:	4831      	ldr	r0, [pc, #196]	; (1fbf4 <z_tick_sleep+0xe4>)
   1fb30:	f002 fc7d 	bl	2242e <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1fb34:	ea56 0307 	orrs.w	r3, r6, r7
   1fb38:	d104      	bne.n	1fb44 <z_tick_sleep+0x34>
	z_impl_k_yield();
   1fb3a:	f7ff ff5b 	bl	1f9f4 <z_impl_k_yield>
		k_yield();
		return 0;
   1fb3e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1fb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1fb44:	f008 fe8d 	bl	28862 <z_tick_get_32>
   1fb48:	1984      	adds	r4, r0, r6
   1fb4a:	f04f 0320 	mov.w	r3, #32
   1fb4e:	f3ef 8811 	mrs	r8, BASEPRI
   1fb52:	f383 8811 	msr	BASEPRI, r3
   1fb56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fb5a:	4828      	ldr	r0, [pc, #160]	; (1fbfc <z_tick_sleep+0xec>)
   1fb5c:	f000 fa84 	bl	20068 <z_spin_lock_valid>
   1fb60:	b940      	cbnz	r0, 1fb74 <z_tick_sleep+0x64>
   1fb62:	4927      	ldr	r1, [pc, #156]	; (1fc00 <z_tick_sleep+0xf0>)
   1fb64:	4824      	ldr	r0, [pc, #144]	; (1fbf8 <z_tick_sleep+0xe8>)
   1fb66:	227c      	movs	r2, #124	; 0x7c
   1fb68:	f002 f9af 	bl	21eca <printk>
   1fb6c:	217c      	movs	r1, #124	; 0x7c
   1fb6e:	4824      	ldr	r0, [pc, #144]	; (1fc00 <z_tick_sleep+0xf0>)
   1fb70:	f002 fc5d 	bl	2242e <assert_post_action>
	pending_current = _current;
   1fb74:	4d23      	ldr	r5, [pc, #140]	; (1fc04 <z_tick_sleep+0xf4>)
	z_spin_lock_set_owner(l);
   1fb76:	4821      	ldr	r0, [pc, #132]	; (1fbfc <z_tick_sleep+0xec>)
   1fb78:	f000 fa94 	bl	200a4 <z_spin_lock_set_owner>
   1fb7c:	4b22      	ldr	r3, [pc, #136]	; (1fc08 <z_tick_sleep+0xf8>)
   1fb7e:	68a8      	ldr	r0, [r5, #8]
   1fb80:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1fb82:	f7ff fd7d 	bl	1f680 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1fb86:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1fb88:	4920      	ldr	r1, [pc, #128]	; (1fc0c <z_tick_sleep+0xfc>)
   1fb8a:	4632      	mov	r2, r6
   1fb8c:	463b      	mov	r3, r7
   1fb8e:	3018      	adds	r0, #24
   1fb90:	f000 fc20 	bl	203d4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1fb94:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fb96:	4819      	ldr	r0, [pc, #100]	; (1fbfc <z_tick_sleep+0xec>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1fb98:	7b53      	ldrb	r3, [r2, #13]
   1fb9a:	f043 0310 	orr.w	r3, r3, #16
   1fb9e:	7353      	strb	r3, [r2, #13]
   1fba0:	f000 fa70 	bl	20084 <z_spin_unlock_valid>
   1fba4:	b940      	cbnz	r0, 1fbb8 <z_tick_sleep+0xa8>
   1fba6:	4916      	ldr	r1, [pc, #88]	; (1fc00 <z_tick_sleep+0xf0>)
   1fba8:	4813      	ldr	r0, [pc, #76]	; (1fbf8 <z_tick_sleep+0xe8>)
   1fbaa:	22be      	movs	r2, #190	; 0xbe
   1fbac:	f002 f98d 	bl	21eca <printk>
   1fbb0:	21be      	movs	r1, #190	; 0xbe
   1fbb2:	4813      	ldr	r0, [pc, #76]	; (1fc00 <z_tick_sleep+0xf0>)
   1fbb4:	f002 fc3b 	bl	2242e <assert_post_action>
   1fbb8:	4640      	mov	r0, r8
   1fbba:	f7e4 fdbf 	bl	473c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1fbbe:	68ab      	ldr	r3, [r5, #8]
   1fbc0:	7b5b      	ldrb	r3, [r3, #13]
   1fbc2:	06db      	lsls	r3, r3, #27
   1fbc4:	d50a      	bpl.n	1fbdc <z_tick_sleep+0xcc>
   1fbc6:	490b      	ldr	r1, [pc, #44]	; (1fbf4 <z_tick_sleep+0xe4>)
   1fbc8:	480b      	ldr	r0, [pc, #44]	; (1fbf8 <z_tick_sleep+0xe8>)
   1fbca:	f240 520b 	movw	r2, #1291	; 0x50b
   1fbce:	f002 f97c 	bl	21eca <printk>
   1fbd2:	f240 510b 	movw	r1, #1291	; 0x50b
   1fbd6:	4807      	ldr	r0, [pc, #28]	; (1fbf4 <z_tick_sleep+0xe4>)
   1fbd8:	f002 fc29 	bl	2242e <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1fbdc:	f008 fe41 	bl	28862 <z_tick_get_32>
   1fbe0:	1a20      	subs	r0, r4, r0
   1fbe2:	eb64 0104 	sbc.w	r1, r4, r4
   1fbe6:	2800      	cmp	r0, #0
   1fbe8:	f171 0300 	sbcs.w	r3, r1, #0
   1fbec:	bfb8      	it	lt
   1fbee:	2000      	movlt	r0, #0
   1fbf0:	e7a6      	b.n	1fb40 <z_tick_sleep+0x30>
   1fbf2:	bf00      	nop
   1fbf4:	0002fd36 	.word	0x0002fd36
   1fbf8:	0002a026 	.word	0x0002a026
   1fbfc:	20004328 	.word	0x20004328
   1fc00:	0002a0e8 	.word	0x0002a0e8
   1fc04:	200042f0 	.word	0x200042f0
   1fc08:	20004324 	.word	0x20004324
   1fc0c:	0001f1d5 	.word	0x0001f1d5

0001fc10 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1fc10:	b538      	push	{r3, r4, r5, lr}
   1fc12:	4604      	mov	r4, r0
   1fc14:	460d      	mov	r5, r1
   1fc16:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1fc1a:	b153      	cbz	r3, 1fc32 <z_impl_k_sleep+0x22>
   1fc1c:	4911      	ldr	r1, [pc, #68]	; (1fc64 <z_impl_k_sleep+0x54>)
   1fc1e:	4812      	ldr	r0, [pc, #72]	; (1fc68 <z_impl_k_sleep+0x58>)
   1fc20:	f240 521a 	movw	r2, #1306	; 0x51a
   1fc24:	f002 f951 	bl	21eca <printk>
   1fc28:	f240 511a 	movw	r1, #1306	; 0x51a
   1fc2c:	480d      	ldr	r0, [pc, #52]	; (1fc64 <z_impl_k_sleep+0x54>)
   1fc2e:	f002 fbfe 	bl	2242e <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fc32:	1c6b      	adds	r3, r5, #1
   1fc34:	bf08      	it	eq
   1fc36:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1fc3a:	d106      	bne.n	1fc4a <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
   1fc3c:	4b0b      	ldr	r3, [pc, #44]	; (1fc6c <z_impl_k_sleep+0x5c>)
   1fc3e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1fc40:	f7ff fbbe 	bl	1f3c0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1fc44:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1fc48:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   1fc4a:	4620      	mov	r0, r4
   1fc4c:	4629      	mov	r1, r5
   1fc4e:	f7ff ff5f 	bl	1fb10 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1fc52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1fc56:	fb80 3403 	smull	r3, r4, r0, r3
   1fc5a:	0bd8      	lsrs	r0, r3, #15
   1fc5c:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1fc60:	e7f2      	b.n	1fc48 <z_impl_k_sleep+0x38>
   1fc62:	bf00      	nop
   1fc64:	0002fd36 	.word	0x0002fd36
   1fc68:	0002a026 	.word	0x0002a026
   1fc6c:	200042f0 	.word	0x200042f0

0001fc70 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1fc70:	4b01      	ldr	r3, [pc, #4]	; (1fc78 <z_impl_k_current_get+0x8>)
   1fc72:	6898      	ldr	r0, [r3, #8]
   1fc74:	4770      	bx	lr
   1fc76:	bf00      	nop
   1fc78:	200042f0 	.word	0x200042f0

0001fc7c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1fc7c:	b538      	push	{r3, r4, r5, lr}
   1fc7e:	4604      	mov	r4, r0
   1fc80:	f04f 0320 	mov.w	r3, #32
   1fc84:	f3ef 8511 	mrs	r5, BASEPRI
   1fc88:	f383 8811 	msr	BASEPRI, r3
   1fc8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fc90:	4815      	ldr	r0, [pc, #84]	; (1fce8 <z_impl_k_sem_give+0x6c>)
   1fc92:	f000 f9e9 	bl	20068 <z_spin_lock_valid>
   1fc96:	b940      	cbnz	r0, 1fcaa <z_impl_k_sem_give+0x2e>
   1fc98:	4914      	ldr	r1, [pc, #80]	; (1fcec <z_impl_k_sem_give+0x70>)
   1fc9a:	4815      	ldr	r0, [pc, #84]	; (1fcf0 <z_impl_k_sem_give+0x74>)
   1fc9c:	227c      	movs	r2, #124	; 0x7c
   1fc9e:	f002 f914 	bl	21eca <printk>
   1fca2:	217c      	movs	r1, #124	; 0x7c
   1fca4:	4811      	ldr	r0, [pc, #68]	; (1fcec <z_impl_k_sem_give+0x70>)
   1fca6:	f002 fbc2 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1fcaa:	480f      	ldr	r0, [pc, #60]	; (1fce8 <z_impl_k_sem_give+0x6c>)
   1fcac:	f000 f9fa 	bl	200a4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1fcb0:	4620      	mov	r0, r4
   1fcb2:	f7ff fe2b 	bl	1f90c <z_unpend_first_thread>

	if (thread != NULL) {
   1fcb6:	b150      	cbz	r0, 1fcce <z_impl_k_sem_give+0x52>
   1fcb8:	2200      	movs	r2, #0
   1fcba:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1fcbe:	f7ff fa11 	bl	1f0e4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1fcc2:	4629      	mov	r1, r5
   1fcc4:	4808      	ldr	r0, [pc, #32]	; (1fce8 <z_impl_k_sem_give+0x6c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1fcc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1fcca:	f7ff b839 	b.w	1ed40 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1fcce:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1fcd2:	429a      	cmp	r2, r3
   1fcd4:	bf18      	it	ne
   1fcd6:	3301      	addne	r3, #1
   1fcd8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1fcda:	2102      	movs	r1, #2
   1fcdc:	f104 0010 	add.w	r0, r4, #16
   1fce0:	f008 fe38 	bl	28954 <z_handle_obj_poll_events>
   1fce4:	e7ed      	b.n	1fcc2 <z_impl_k_sem_give+0x46>
   1fce6:	bf00      	nop
   1fce8:	20004334 	.word	0x20004334
   1fcec:	0002a0e8 	.word	0x0002a0e8
   1fcf0:	0002a026 	.word	0x0002a026

0001fcf4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1fcf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fcf6:	4605      	mov	r5, r0
   1fcf8:	4616      	mov	r6, r2
   1fcfa:	461f      	mov	r7, r3
   1fcfc:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1fd00:	b15b      	cbz	r3, 1fd1a <z_impl_k_sem_take+0x26>
   1fd02:	ea56 0307 	orrs.w	r3, r6, r7
   1fd06:	d008      	beq.n	1fd1a <z_impl_k_sem_take+0x26>
   1fd08:	492b      	ldr	r1, [pc, #172]	; (1fdb8 <z_impl_k_sem_take+0xc4>)
   1fd0a:	482c      	ldr	r0, [pc, #176]	; (1fdbc <z_impl_k_sem_take+0xc8>)
   1fd0c:	228d      	movs	r2, #141	; 0x8d
   1fd0e:	f002 f8dc 	bl	21eca <printk>
   1fd12:	218d      	movs	r1, #141	; 0x8d
   1fd14:	4828      	ldr	r0, [pc, #160]	; (1fdb8 <z_impl_k_sem_take+0xc4>)
   1fd16:	f002 fb8a 	bl	2242e <assert_post_action>
   1fd1a:	f04f 0320 	mov.w	r3, #32
   1fd1e:	f3ef 8411 	mrs	r4, BASEPRI
   1fd22:	f383 8811 	msr	BASEPRI, r3
   1fd26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fd2a:	4825      	ldr	r0, [pc, #148]	; (1fdc0 <z_impl_k_sem_take+0xcc>)
   1fd2c:	f000 f99c 	bl	20068 <z_spin_lock_valid>
   1fd30:	b940      	cbnz	r0, 1fd44 <z_impl_k_sem_take+0x50>
   1fd32:	4924      	ldr	r1, [pc, #144]	; (1fdc4 <z_impl_k_sem_take+0xd0>)
   1fd34:	4821      	ldr	r0, [pc, #132]	; (1fdbc <z_impl_k_sem_take+0xc8>)
   1fd36:	227c      	movs	r2, #124	; 0x7c
   1fd38:	f002 f8c7 	bl	21eca <printk>
   1fd3c:	217c      	movs	r1, #124	; 0x7c
   1fd3e:	4821      	ldr	r0, [pc, #132]	; (1fdc4 <z_impl_k_sem_take+0xd0>)
   1fd40:	f002 fb75 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   1fd44:	481e      	ldr	r0, [pc, #120]	; (1fdc0 <z_impl_k_sem_take+0xcc>)
   1fd46:	f000 f9ad 	bl	200a4 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1fd4a:	68ab      	ldr	r3, [r5, #8]
   1fd4c:	b1ab      	cbz	r3, 1fd7a <z_impl_k_sem_take+0x86>
		sem->count--;
   1fd4e:	3b01      	subs	r3, #1
   1fd50:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fd52:	481b      	ldr	r0, [pc, #108]	; (1fdc0 <z_impl_k_sem_take+0xcc>)
   1fd54:	f000 f996 	bl	20084 <z_spin_unlock_valid>
   1fd58:	b940      	cbnz	r0, 1fd6c <z_impl_k_sem_take+0x78>
   1fd5a:	491a      	ldr	r1, [pc, #104]	; (1fdc4 <z_impl_k_sem_take+0xd0>)
   1fd5c:	4817      	ldr	r0, [pc, #92]	; (1fdbc <z_impl_k_sem_take+0xc8>)
   1fd5e:	22a7      	movs	r2, #167	; 0xa7
   1fd60:	f002 f8b3 	bl	21eca <printk>
   1fd64:	21a7      	movs	r1, #167	; 0xa7
   1fd66:	4817      	ldr	r0, [pc, #92]	; (1fdc4 <z_impl_k_sem_take+0xd0>)
   1fd68:	f002 fb61 	bl	2242e <assert_post_action>
	__asm__ volatile(
   1fd6c:	f384 8811 	msr	BASEPRI, r4
   1fd70:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1fd74:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1fd76:	b003      	add	sp, #12
   1fd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fd7a:	ea56 0307 	orrs.w	r3, r6, r7
   1fd7e:	d113      	bne.n	1fda8 <z_impl_k_sem_take+0xb4>
   1fd80:	480f      	ldr	r0, [pc, #60]	; (1fdc0 <z_impl_k_sem_take+0xcc>)
   1fd82:	f000 f97f 	bl	20084 <z_spin_unlock_valid>
   1fd86:	b940      	cbnz	r0, 1fd9a <z_impl_k_sem_take+0xa6>
   1fd88:	490e      	ldr	r1, [pc, #56]	; (1fdc4 <z_impl_k_sem_take+0xd0>)
   1fd8a:	480c      	ldr	r0, [pc, #48]	; (1fdbc <z_impl_k_sem_take+0xc8>)
   1fd8c:	22a7      	movs	r2, #167	; 0xa7
   1fd8e:	f002 f89c 	bl	21eca <printk>
   1fd92:	21a7      	movs	r1, #167	; 0xa7
   1fd94:	480b      	ldr	r0, [pc, #44]	; (1fdc4 <z_impl_k_sem_take+0xd0>)
   1fd96:	f002 fb4a 	bl	2242e <assert_post_action>
   1fd9a:	f384 8811 	msr	BASEPRI, r4
   1fd9e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1fda2:	f06f 000f 	mvn.w	r0, #15
		goto out;
   1fda6:	e7e6      	b.n	1fd76 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1fda8:	e9cd 6700 	strd	r6, r7, [sp]
   1fdac:	462a      	mov	r2, r5
   1fdae:	4621      	mov	r1, r4
   1fdb0:	4803      	ldr	r0, [pc, #12]	; (1fdc0 <z_impl_k_sem_take+0xcc>)
   1fdb2:	f7ff fd09 	bl	1f7c8 <z_pend_curr>
	return ret;
   1fdb6:	e7de      	b.n	1fd76 <z_impl_k_sem_take+0x82>
   1fdb8:	0002fd58 	.word	0x0002fd58
   1fdbc:	0002a026 	.word	0x0002a026
   1fdc0:	20004334 	.word	0x20004334
   1fdc4:	0002a0e8 	.word	0x0002a0e8

0001fdc8 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1fdc8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1fdca:	4c08      	ldr	r4, [pc, #32]	; (1fdec <k_sys_work_q_init+0x24>)
   1fdcc:	4908      	ldr	r1, [pc, #32]	; (1fdf0 <k_sys_work_q_init+0x28>)
   1fdce:	f04f 33ff 	mov.w	r3, #4294967295
   1fdd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1fdd6:	4620      	mov	r0, r4
   1fdd8:	f000 f998 	bl	2010c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1fddc:	4905      	ldr	r1, [pc, #20]	; (1fdf4 <k_sys_work_q_init+0x2c>)
   1fdde:	f104 0020 	add.w	r0, r4, #32
   1fde2:	f008 fcc7 	bl	28774 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1fde6:	2000      	movs	r0, #0
   1fde8:	bd10      	pop	{r4, pc}
   1fdea:	bf00      	nop
   1fdec:	20002170 	.word	0x20002170
   1fdf0:	20006760 	.word	0x20006760
   1fdf4:	0002fd78 	.word	0x0002fd78

0001fdf8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1fdf8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1fdfc:	4698      	mov	r8, r3
   1fdfe:	4b32      	ldr	r3, [pc, #200]	; (1fec8 <z_setup_new_thread+0xd0>)
   1fe00:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1fe02:	f3bf 8f5b 	dmb	ish
   1fe06:	4616      	mov	r6, r2
   1fe08:	4604      	mov	r4, r0
   1fe0a:	460f      	mov	r7, r1
   1fe0c:	f100 0238 	add.w	r2, r0, #56	; 0x38
   1fe10:	e852 1f00 	ldrex	r1, [r2]
   1fe14:	e842 3000 	strex	r0, r3, [r2]
   1fe18:	2800      	cmp	r0, #0
   1fe1a:	d1f9      	bne.n	1fe10 <z_setup_new_thread+0x18>
   1fe1c:	f3bf 8f5b 	dmb	ish
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   1fe20:	4299      	cmp	r1, r3
   1fe22:	d10a      	bne.n	1fe3a <z_setup_new_thread+0x42>
   1fe24:	4929      	ldr	r1, [pc, #164]	; (1fecc <z_setup_new_thread+0xd4>)
   1fe26:	482a      	ldr	r0, [pc, #168]	; (1fed0 <z_setup_new_thread+0xd8>)
   1fe28:	f44f 7209 	mov.w	r2, #548	; 0x224
   1fe2c:	f002 f84d 	bl	21eca <printk>
   1fe30:	f44f 7109 	mov.w	r1, #548	; 0x224
   1fe34:	4825      	ldr	r0, [pc, #148]	; (1fecc <z_setup_new_thread+0xd4>)
   1fe36:	f002 fafa 	bl	2242e <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   1fe3a:	2d0f      	cmp	r5, #15
   1fe3c:	d133      	bne.n	1fea6 <z_setup_new_thread+0xae>
   1fe3e:	4b25      	ldr	r3, [pc, #148]	; (1fed4 <z_setup_new_thread+0xdc>)
   1fe40:	4598      	cmp	r8, r3
   1fe42:	d134      	bne.n	1feae <z_setup_new_thread+0xb6>
	sys_dlist_init(&w->waitq);
   1fe44:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1fe48:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1fe4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fe4e:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1fe50:	2304      	movs	r3, #4
   1fe52:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1fe54:	1df3      	adds	r3, r6, #7
   1fe56:	f023 0307 	bic.w	r3, r3, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1fe5a:	f107 0220 	add.w	r2, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   1fe5e:	e9c4 231d 	strd	r2, r3, [r4, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1fe62:	f103 0620 	add.w	r6, r3, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fe66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fe68:	9302      	str	r3, [sp, #8]
   1fe6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

	thread_base->prio = priority;
   1fe6c:	73a5      	strb	r5, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fe6e:	9301      	str	r3, [sp, #4]

	thread_base->sched_locked = 0U;
   1fe70:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fe72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fe74:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   1fe76:	443e      	add	r6, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fe78:	4643      	mov	r3, r8
	thread_base->sched_locked = 0U;
   1fe7a:	73e5      	strb	r5, [r4, #15]
	node->prev = NULL;
   1fe7c:	e9c4 5506 	strd	r5, r5, [r4, #24]
	new_thread->stack_info.delta = delta;
   1fe80:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fe82:	4632      	mov	r2, r6
   1fe84:	4639      	mov	r1, r7
   1fe86:	4620      	mov	r0, r4
   1fe88:	f7e4 fd18 	bl	48bc <arch_new_thread>
	if (!_current) {
   1fe8c:	4b12      	ldr	r3, [pc, #72]	; (1fed8 <z_setup_new_thread+0xe0>)
   1fe8e:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1fe90:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   1fe94:	b10b      	cbz	r3, 1fe9a <z_setup_new_thread+0xa2>
	new_thread->resource_pool = _current->resource_pool;
   1fe96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	return stack_ptr;
   1fe9a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
   1fe9e:	4630      	mov	r0, r6
   1fea0:	b004      	add	sp, #16
   1fea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1fea6:	f105 0310 	add.w	r3, r5, #16
   1feaa:	2b1e      	cmp	r3, #30
   1feac:	d9ca      	bls.n	1fe44 <z_setup_new_thread+0x4c>
   1feae:	f240 2226 	movw	r2, #550	; 0x226
   1feb2:	4906      	ldr	r1, [pc, #24]	; (1fecc <z_setup_new_thread+0xd4>)
   1feb4:	4806      	ldr	r0, [pc, #24]	; (1fed0 <z_setup_new_thread+0xd8>)
   1feb6:	f002 f808 	bl	21eca <printk>
   1feba:	f240 2126 	movw	r1, #550	; 0x226
   1febe:	4803      	ldr	r0, [pc, #12]	; (1fecc <z_setup_new_thread+0xd4>)
   1fec0:	f002 fab5 	bl	2242e <assert_post_action>
   1fec4:	e7be      	b.n	1fe44 <z_setup_new_thread+0x4c>
   1fec6:	bf00      	nop
   1fec8:	1337c0d3 	.word	0x1337c0d3
   1fecc:	0002fd81 	.word	0x0002fd81
   1fed0:	0002a026 	.word	0x0002a026
   1fed4:	0001e135 	.word	0x0001e135
   1fed8:	200042f0 	.word	0x200042f0

0001fedc <z_impl_k_thread_create>:
{
   1fedc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fee0:	b087      	sub	sp, #28
   1fee2:	4604      	mov	r4, r0
   1fee4:	460d      	mov	r5, r1
   1fee6:	4690      	mov	r8, r2
   1fee8:	4699      	mov	r9, r3
   1feea:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   1feee:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1fef2:	b153      	cbz	r3, 1ff0a <z_impl_k_thread_create+0x2e>
   1fef4:	4919      	ldr	r1, [pc, #100]	; (1ff5c <z_impl_k_thread_create+0x80>)
   1fef6:	481a      	ldr	r0, [pc, #104]	; (1ff60 <z_impl_k_thread_create+0x84>)
   1fef8:	f240 228f 	movw	r2, #655	; 0x28f
   1fefc:	f001 ffe5 	bl	21eca <printk>
   1ff00:	f240 218f 	movw	r1, #655	; 0x28f
   1ff04:	4815      	ldr	r0, [pc, #84]	; (1ff5c <z_impl_k_thread_create+0x80>)
   1ff06:	f002 fa92 	bl	2242e <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ff0a:	2300      	movs	r3, #0
   1ff0c:	9305      	str	r3, [sp, #20]
   1ff0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ff10:	9304      	str	r3, [sp, #16]
   1ff12:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ff14:	9303      	str	r3, [sp, #12]
   1ff16:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ff18:	9302      	str	r3, [sp, #8]
   1ff1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ff1c:	9301      	str	r3, [sp, #4]
   1ff1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ff20:	9300      	str	r3, [sp, #0]
   1ff22:	4642      	mov	r2, r8
   1ff24:	464b      	mov	r3, r9
   1ff26:	4629      	mov	r1, r5
   1ff28:	4620      	mov	r0, r4
   1ff2a:	f7ff ff65 	bl	1fdf8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1ff2e:	1c7b      	adds	r3, r7, #1
   1ff30:	bf08      	it	eq
   1ff32:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1ff36:	d005      	beq.n	1ff44 <z_impl_k_thread_create+0x68>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ff38:	ea56 0307 	orrs.w	r3, r6, r7
   1ff3c:	d106      	bne.n	1ff4c <z_impl_k_thread_create+0x70>
	z_sched_start(thread);
   1ff3e:	4620      	mov	r0, r4
   1ff40:	f7ff f906 	bl	1f150 <z_sched_start>
}
   1ff44:	4620      	mov	r0, r4
   1ff46:	b007      	add	sp, #28
   1ff48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ff4c:	4632      	mov	r2, r6
   1ff4e:	463b      	mov	r3, r7
   1ff50:	4904      	ldr	r1, [pc, #16]	; (1ff64 <z_impl_k_thread_create+0x88>)
   1ff52:	f104 0018 	add.w	r0, r4, #24
   1ff56:	f000 fa3d 	bl	203d4 <z_add_timeout>
   1ff5a:	e7f3      	b.n	1ff44 <z_impl_k_thread_create+0x68>
   1ff5c:	0002fd81 	.word	0x0002fd81
   1ff60:	0002a026 	.word	0x0002a026
   1ff64:	0001f1d5 	.word	0x0001f1d5

0001ff68 <z_init_static_threads>:
{
   1ff68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1ff6c:	4f39      	ldr	r7, [pc, #228]	; (20054 <z_init_static_threads+0xec>)
   1ff6e:	4d3a      	ldr	r5, [pc, #232]	; (20058 <z_init_static_threads+0xf0>)
   1ff70:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 20060 <z_init_static_threads+0xf8>
{
   1ff74:	b086      	sub	sp, #24
   1ff76:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   1ff78:	42bd      	cmp	r5, r7
   1ff7a:	d90a      	bls.n	1ff92 <z_init_static_threads+0x2a>
   1ff7c:	4641      	mov	r1, r8
   1ff7e:	4837      	ldr	r0, [pc, #220]	; (2005c <z_init_static_threads+0xf4>)
   1ff80:	f240 22fd 	movw	r2, #765	; 0x2fd
   1ff84:	f001 ffa1 	bl	21eca <printk>
   1ff88:	f240 21fd 	movw	r1, #765	; 0x2fd
   1ff8c:	4640      	mov	r0, r8
   1ff8e:	f002 fa4e 	bl	2242e <assert_post_action>
   1ff92:	42b5      	cmp	r5, r6
   1ff94:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1ff98:	d31d      	bcc.n	1ffd6 <z_init_static_threads+0x6e>
	k_sched_lock();
   1ff9a:	f7fe ff07 	bl	1edac <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ff9e:	4c2e      	ldr	r4, [pc, #184]	; (20058 <z_init_static_threads+0xf0>)
   1ffa0:	4d2f      	ldr	r5, [pc, #188]	; (20060 <z_init_static_threads+0xf8>)
   1ffa2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 2005c <z_init_static_threads+0xf4>
   1ffa6:	f240 38e7 	movw	r8, #999	; 0x3e7
   1ffaa:	f04f 0900 	mov.w	r9, #0
   1ffae:	42b4      	cmp	r4, r6
   1ffb0:	d90a      	bls.n	1ffc8 <z_init_static_threads+0x60>
   1ffb2:	4629      	mov	r1, r5
   1ffb4:	4650      	mov	r0, sl
   1ffb6:	f44f 7247 	mov.w	r2, #796	; 0x31c
   1ffba:	f001 ff86 	bl	21eca <printk>
   1ffbe:	f44f 7147 	mov.w	r1, #796	; 0x31c
   1ffc2:	4628      	mov	r0, r5
   1ffc4:	f002 fa33 	bl	2242e <assert_post_action>
   1ffc8:	42b4      	cmp	r4, r6
   1ffca:	d321      	bcc.n	20010 <z_init_static_threads+0xa8>
}
   1ffcc:	b006      	add	sp, #24
   1ffce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1ffd2:	f7fe bfe3 	b.w	1ef9c <k_sched_unlock>
		z_setup_new_thread(
   1ffd6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1ffda:	9305      	str	r3, [sp, #20]
   1ffdc:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1ffe0:	9304      	str	r3, [sp, #16]
   1ffe2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1ffe6:	9303      	str	r3, [sp, #12]
   1ffe8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1ffec:	9302      	str	r3, [sp, #8]
   1ffee:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1fff2:	9301      	str	r3, [sp, #4]
   1fff4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1fff8:	9300      	str	r3, [sp, #0]
   1fffa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1fffe:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   20002:	f7ff fef9 	bl	1fdf8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   20006:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2000a:	665d      	str	r5, [r3, #100]	; 0x64
   2000c:	4625      	mov	r5, r4
   2000e:	e7b3      	b.n	1ff78 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   20010:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20012:	1c5a      	adds	r2, r3, #1
   20014:	d00f      	beq.n	20036 <z_init_static_threads+0xce>
					    K_MSEC(thread_data->init_delay));
   20016:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2001a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2001e:	4640      	mov	r0, r8
   20020:	4649      	mov	r1, r9
   20022:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20026:	4549      	cmp	r1, r9
   20028:	bf08      	it	eq
   2002a:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
   2002c:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2002e:	d104      	bne.n	2003a <z_init_static_threads+0xd2>
	z_sched_start(thread);
   20030:	4638      	mov	r0, r7
   20032:	f7ff f88d 	bl	1f150 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   20036:	3430      	adds	r4, #48	; 0x30
   20038:	e7b9      	b.n	1ffae <z_init_static_threads+0x46>
   2003a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2003e:	2300      	movs	r3, #0
   20040:	f7e0 f85e 	bl	100 <__aeabi_uldivmod>
   20044:	4602      	mov	r2, r0
   20046:	460b      	mov	r3, r1
   20048:	f107 0018 	add.w	r0, r7, #24
   2004c:	4905      	ldr	r1, [pc, #20]	; (20064 <z_init_static_threads+0xfc>)
   2004e:	f000 f9c1 	bl	203d4 <z_add_timeout>
   20052:	e7f0      	b.n	20036 <z_init_static_threads+0xce>
   20054:	20000ea0 	.word	0x20000ea0
   20058:	20000ea0 	.word	0x20000ea0
   2005c:	0002a026 	.word	0x0002a026
   20060:	0002fd81 	.word	0x0002fd81
   20064:	0001f1d5 	.word	0x0001f1d5

00020068 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   20068:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   2006a:	b138      	cbz	r0, 2007c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   2006c:	4b04      	ldr	r3, [pc, #16]	; (20080 <z_spin_lock_valid+0x18>)
   2006e:	7e1b      	ldrb	r3, [r3, #24]
   20070:	f000 0003 	and.w	r0, r0, #3
   20074:	1ac0      	subs	r0, r0, r3
   20076:	bf18      	it	ne
   20078:	2001      	movne	r0, #1
   2007a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2007c:	2001      	movs	r0, #1
}
   2007e:	4770      	bx	lr
   20080:	200042f0 	.word	0x200042f0

00020084 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   20084:	4a06      	ldr	r2, [pc, #24]	; (200a0 <z_spin_unlock_valid+0x1c>)
   20086:	7e11      	ldrb	r1, [r2, #24]
   20088:	6893      	ldr	r3, [r2, #8]
   2008a:	6802      	ldr	r2, [r0, #0]
   2008c:	430b      	orrs	r3, r1
   2008e:	429a      	cmp	r2, r3
   20090:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   20094:	bf06      	itte	eq
   20096:	6003      	streq	r3, [r0, #0]
	return true;
   20098:	2001      	moveq	r0, #1
		return false;
   2009a:	4618      	movne	r0, r3
}
   2009c:	4770      	bx	lr
   2009e:	bf00      	nop
   200a0:	200042f0 	.word	0x200042f0

000200a4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   200a4:	4a02      	ldr	r2, [pc, #8]	; (200b0 <z_spin_lock_set_owner+0xc>)
   200a6:	7e11      	ldrb	r1, [r2, #24]
   200a8:	6893      	ldr	r3, [r2, #8]
   200aa:	430b      	orrs	r3, r1
   200ac:	6003      	str	r3, [r0, #0]
}
   200ae:	4770      	bx	lr
   200b0:	200042f0 	.word	0x200042f0

000200b4 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   200b4:	b508      	push	{r3, lr}
	__asm__ volatile(
   200b6:	f04f 0320 	mov.w	r3, #32
   200ba:	f3ef 8511 	mrs	r5, BASEPRI
   200be:	f383 8811 	msr	BASEPRI, r3
   200c2:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   200c6:	4c0e      	ldr	r4, [pc, #56]	; (20100 <z_self_abort+0x4c>)
   200c8:	6923      	ldr	r3, [r4, #16]
   200ca:	b143      	cbz	r3, 200de <z_self_abort+0x2a>
   200cc:	490d      	ldr	r1, [pc, #52]	; (20104 <z_self_abort+0x50>)
   200ce:	480e      	ldr	r0, [pc, #56]	; (20108 <z_self_abort+0x54>)
   200d0:	2228      	movs	r2, #40	; 0x28
   200d2:	f001 fefa 	bl	21eca <printk>
   200d6:	2128      	movs	r1, #40	; 0x28
   200d8:	480a      	ldr	r0, [pc, #40]	; (20104 <z_self_abort+0x50>)
   200da:	f002 f9a8 	bl	2242e <assert_post_action>
	cpu->pending_abort = _current;
   200de:	68a0      	ldr	r0, [r4, #8]
   200e0:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   200e2:	f7ff f96d 	bl	1f3c0 <z_impl_k_thread_suspend>
   200e6:	4628      	mov	r0, r5
   200e8:	f7e4 fb28 	bl	473c <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   200ec:	4905      	ldr	r1, [pc, #20]	; (20104 <z_self_abort+0x50>)
   200ee:	4806      	ldr	r0, [pc, #24]	; (20108 <z_self_abort+0x54>)
   200f0:	2230      	movs	r2, #48	; 0x30
   200f2:	f001 feea 	bl	21eca <printk>
   200f6:	2130      	movs	r1, #48	; 0x30
   200f8:	4802      	ldr	r0, [pc, #8]	; (20104 <z_self_abort+0x50>)
   200fa:	f002 f998 	bl	2242e <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   200fe:	bf00      	nop
   20100:	200042f0 	.word	0x200042f0
   20104:	0002fda4 	.word	0x0002fda4
   20108:	0002a026 	.word	0x0002a026

0002010c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   2010c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20110:	4605      	mov	r5, r0
   20112:	b088      	sub	sp, #32
   20114:	460e      	mov	r6, r1
   20116:	4617      	mov	r7, r2
   20118:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   2011a:	f008 faab 	bl	28674 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   2011e:	f105 0420 	add.w	r4, r5, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20122:	2000      	movs	r0, #0
   20124:	2200      	movs	r2, #0
   20126:	2300      	movs	r3, #0
   20128:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2012c:	e9cd 8003 	strd	r8, r0, [sp, #12]
   20130:	e9cd 0001 	strd	r0, r0, [sp, #4]
   20134:	9500      	str	r5, [sp, #0]
   20136:	4b06      	ldr	r3, [pc, #24]	; (20150 <k_work_q_start+0x44>)
   20138:	463a      	mov	r2, r7
   2013a:	4631      	mov	r1, r6
   2013c:	4620      	mov	r0, r4
   2013e:	f7ff fecd 	bl	1fedc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   20142:	4904      	ldr	r1, [pc, #16]	; (20154 <k_work_q_start+0x48>)
   20144:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   20146:	b008      	add	sp, #32
   20148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2014c:	f008 bb12 	b.w	28774 <z_impl_k_thread_name_set>
   20150:	00002721 	.word	0x00002721
   20154:	0002fdcd 	.word	0x0002fdcd

00020158 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   20158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2015c:	4606      	mov	r6, r0
   2015e:	460d      	mov	r5, r1
   20160:	4690      	mov	r8, r2
   20162:	4699      	mov	r9, r3
   20164:	f04f 0320 	mov.w	r3, #32
   20168:	f3ef 8711 	mrs	r7, BASEPRI
   2016c:	f383 8811 	msr	BASEPRI, r3
   20170:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20174:	482c      	ldr	r0, [pc, #176]	; (20228 <k_delayed_work_submit_to_queue+0xd0>)
   20176:	f7ff ff77 	bl	20068 <z_spin_lock_valid>
   2017a:	b940      	cbnz	r0, 2018e <k_delayed_work_submit_to_queue+0x36>
   2017c:	492b      	ldr	r1, [pc, #172]	; (2022c <k_delayed_work_submit_to_queue+0xd4>)
   2017e:	482c      	ldr	r0, [pc, #176]	; (20230 <k_delayed_work_submit_to_queue+0xd8>)
   20180:	227c      	movs	r2, #124	; 0x7c
   20182:	f001 fea2 	bl	21eca <printk>
   20186:	217c      	movs	r1, #124	; 0x7c
   20188:	4828      	ldr	r0, [pc, #160]	; (2022c <k_delayed_work_submit_to_queue+0xd4>)
   2018a:	f002 f950 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   2018e:	4826      	ldr	r0, [pc, #152]	; (20228 <k_delayed_work_submit_to_queue+0xd0>)
   20190:	f7ff ff88 	bl	200a4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   20194:	6aab      	ldr	r3, [r5, #40]	; 0x28
   20196:	b1e3      	cbz	r3, 201d2 <k_delayed_work_submit_to_queue+0x7a>
   20198:	42b3      	cmp	r3, r6
   2019a:	d142      	bne.n	20222 <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   2019c:	4628      	mov	r0, r5
   2019e:	f008 fb0d 	bl	287bc <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   201a2:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   201a6:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   201a8:	d015      	beq.n	201d6 <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   201aa:	2800      	cmp	r0, #0
   201ac:	da14      	bge.n	201d8 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   201ae:	481e      	ldr	r0, [pc, #120]	; (20228 <k_delayed_work_submit_to_queue+0xd0>)
   201b0:	f7ff ff68 	bl	20084 <z_spin_unlock_valid>
   201b4:	b940      	cbnz	r0, 201c8 <k_delayed_work_submit_to_queue+0x70>
   201b6:	491d      	ldr	r1, [pc, #116]	; (2022c <k_delayed_work_submit_to_queue+0xd4>)
   201b8:	481d      	ldr	r0, [pc, #116]	; (20230 <k_delayed_work_submit_to_queue+0xd8>)
   201ba:	22a7      	movs	r2, #167	; 0xa7
   201bc:	f001 fe85 	bl	21eca <printk>
   201c0:	21a7      	movs	r1, #167	; 0xa7
   201c2:	481a      	ldr	r0, [pc, #104]	; (2022c <k_delayed_work_submit_to_queue+0xd4>)
   201c4:	f002 f933 	bl	2242e <assert_post_action>
	__asm__ volatile(
   201c8:	f387 8811 	msr	BASEPRI, r7
   201cc:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   201d0:	e01c      	b.n	2020c <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   201d2:	2e00      	cmp	r6, #0
   201d4:	d0e2      	beq.n	2019c <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   201d6:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   201d8:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   201dc:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   201de:	d118      	bne.n	20212 <k_delayed_work_submit_to_queue+0xba>
   201e0:	4811      	ldr	r0, [pc, #68]	; (20228 <k_delayed_work_submit_to_queue+0xd0>)
   201e2:	f7ff ff4f 	bl	20084 <z_spin_unlock_valid>
   201e6:	b940      	cbnz	r0, 201fa <k_delayed_work_submit_to_queue+0xa2>
   201e8:	4910      	ldr	r1, [pc, #64]	; (2022c <k_delayed_work_submit_to_queue+0xd4>)
   201ea:	4811      	ldr	r0, [pc, #68]	; (20230 <k_delayed_work_submit_to_queue+0xd8>)
   201ec:	22a7      	movs	r2, #167	; 0xa7
   201ee:	f001 fe6c 	bl	21eca <printk>
   201f2:	21a7      	movs	r1, #167	; 0xa7
   201f4:	480d      	ldr	r0, [pc, #52]	; (2022c <k_delayed_work_submit_to_queue+0xd4>)
   201f6:	f002 f91a 	bl	2242e <assert_post_action>
   201fa:	f387 8811 	msr	BASEPRI, r7
   201fe:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   20202:	4629      	mov	r1, r5
   20204:	4630      	mov	r0, r6
   20206:	f008 fabc 	bl	28782 <k_work_submit_to_queue>
		return 0;
   2020a:	2400      	movs	r4, #0
}
   2020c:	4620      	mov	r0, r4
   2020e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   20212:	4642      	mov	r2, r8
   20214:	464b      	mov	r3, r9
   20216:	4907      	ldr	r1, [pc, #28]	; (20234 <k_delayed_work_submit_to_queue+0xdc>)
   20218:	f105 0010 	add.w	r0, r5, #16
   2021c:	f000 f8da 	bl	203d4 <z_add_timeout>
   20220:	e7c5      	b.n	201ae <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   20222:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   20226:	e7c2      	b.n	201ae <k_delayed_work_submit_to_queue+0x56>
   20228:	20004338 	.word	0x20004338
   2022c:	0002a0e8 	.word	0x0002a0e8
   20230:	0002a026 	.word	0x0002a026
   20234:	000287b3 	.word	0x000287b3

00020238 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   20238:	b538      	push	{r3, r4, r5, lr}
   2023a:	4604      	mov	r4, r0
	__asm__ volatile(
   2023c:	f04f 0320 	mov.w	r3, #32
   20240:	f3ef 8511 	mrs	r5, BASEPRI
   20244:	f383 8811 	msr	BASEPRI, r3
   20248:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2024c:	4815      	ldr	r0, [pc, #84]	; (202a4 <k_delayed_work_cancel+0x6c>)
   2024e:	f7ff ff0b 	bl	20068 <z_spin_lock_valid>
   20252:	b940      	cbnz	r0, 20266 <k_delayed_work_cancel+0x2e>
   20254:	4914      	ldr	r1, [pc, #80]	; (202a8 <k_delayed_work_cancel+0x70>)
   20256:	4815      	ldr	r0, [pc, #84]	; (202ac <k_delayed_work_cancel+0x74>)
   20258:	227c      	movs	r2, #124	; 0x7c
   2025a:	f001 fe36 	bl	21eca <printk>
   2025e:	217c      	movs	r1, #124	; 0x7c
   20260:	4811      	ldr	r0, [pc, #68]	; (202a8 <k_delayed_work_cancel+0x70>)
   20262:	f002 f8e4 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   20266:	480f      	ldr	r0, [pc, #60]	; (202a4 <k_delayed_work_cancel+0x6c>)
   20268:	f7ff ff1c 	bl	200a4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   2026c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2026e:	b1b3      	cbz	r3, 2029e <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   20270:	4620      	mov	r0, r4
   20272:	f008 faa3 	bl	287bc <work_cancel>
   20276:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20278:	480a      	ldr	r0, [pc, #40]	; (202a4 <k_delayed_work_cancel+0x6c>)
   2027a:	f7ff ff03 	bl	20084 <z_spin_unlock_valid>
   2027e:	b940      	cbnz	r0, 20292 <k_delayed_work_cancel+0x5a>
   20280:	4909      	ldr	r1, [pc, #36]	; (202a8 <k_delayed_work_cancel+0x70>)
   20282:	480a      	ldr	r0, [pc, #40]	; (202ac <k_delayed_work_cancel+0x74>)
   20284:	22a7      	movs	r2, #167	; 0xa7
   20286:	f001 fe20 	bl	21eca <printk>
   2028a:	21a7      	movs	r1, #167	; 0xa7
   2028c:	4806      	ldr	r0, [pc, #24]	; (202a8 <k_delayed_work_cancel+0x70>)
   2028e:	f002 f8ce 	bl	2242e <assert_post_action>
	__asm__ volatile(
   20292:	f385 8811 	msr	BASEPRI, r5
   20296:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   2029a:	4620      	mov	r0, r4
   2029c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2029e:	f06f 0415 	mvn.w	r4, #21
   202a2:	e7e9      	b.n	20278 <k_delayed_work_cancel+0x40>
   202a4:	20004338 	.word	0x20004338
   202a8:	0002a0e8 	.word	0x0002a0e8
   202ac:	0002a026 	.word	0x0002a026

000202b0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   202b0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   202b2:	4806      	ldr	r0, [pc, #24]	; (202cc <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   202b4:	4a06      	ldr	r2, [pc, #24]	; (202d0 <z_data_copy+0x20>)
   202b6:	4907      	ldr	r1, [pc, #28]	; (202d4 <z_data_copy+0x24>)
   202b8:	1a12      	subs	r2, r2, r0
   202ba:	f003 ff48 	bl	2414e <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   202be:	4a06      	ldr	r2, [pc, #24]	; (202d8 <z_data_copy+0x28>)
   202c0:	4906      	ldr	r1, [pc, #24]	; (202dc <z_data_copy+0x2c>)
   202c2:	4807      	ldr	r0, [pc, #28]	; (202e0 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   202c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   202c8:	f003 bf41 	b.w	2414e <memcpy>
   202cc:	20000000 	.word	0x20000000
   202d0:	20001184 	.word	0x20001184
   202d4:	0002fe1c 	.word	0x0002fe1c
   202d8:	00000000 	.word	0x00000000
   202dc:	0002fe1c 	.word	0x0002fe1c
   202e0:	20000000 	.word	0x20000000

000202e4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   202e4:	4b03      	ldr	r3, [pc, #12]	; (202f4 <elapsed+0x10>)
   202e6:	681b      	ldr	r3, [r3, #0]
   202e8:	b90b      	cbnz	r3, 202ee <elapsed+0xa>
   202ea:	f7e3 bf89 	b.w	4200 <z_clock_elapsed>
}
   202ee:	2000      	movs	r0, #0
   202f0:	4770      	bx	lr
   202f2:	bf00      	nop
   202f4:	2000433c 	.word	0x2000433c

000202f8 <remove_timeout>:
{
   202f8:	b530      	push	{r4, r5, lr}
   202fa:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   202fc:	b168      	cbz	r0, 2031a <remove_timeout+0x22>
   202fe:	4a0a      	ldr	r2, [pc, #40]	; (20328 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   20300:	6852      	ldr	r2, [r2, #4]
   20302:	4290      	cmp	r0, r2
   20304:	d009      	beq.n	2031a <remove_timeout+0x22>
	if (next(t) != NULL) {
   20306:	b143      	cbz	r3, 2031a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   20308:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2030c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   20310:	1912      	adds	r2, r2, r4
   20312:	eb45 0101 	adc.w	r1, r5, r1
   20316:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   2031a:	6842      	ldr	r2, [r0, #4]
   2031c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2031e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20320:	2300      	movs	r3, #0
	node->prev = NULL;
   20322:	e9c0 3300 	strd	r3, r3, [r0]
}
   20326:	bd30      	pop	{r4, r5, pc}
   20328:	20000cb4 	.word	0x20000cb4

0002032c <next_timeout>:

static int32_t next_timeout(void)
{
   2032c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2032e:	4b13      	ldr	r3, [pc, #76]	; (2037c <next_timeout+0x50>)
   20330:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20332:	429c      	cmp	r4, r3
   20334:	bf08      	it	eq
   20336:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   20338:	f7ff ffd4 	bl	202e4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   2033c:	b1c4      	cbz	r4, 20370 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   2033e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   20342:	1a14      	subs	r4, r2, r0
   20344:	eb63 75e0 	sbc.w	r5, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   20348:	2c01      	cmp	r4, #1
   2034a:	f175 0300 	sbcs.w	r3, r5, #0
   2034e:	db12      	blt.n	20376 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   20350:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   20354:	2300      	movs	r3, #0
   20356:	42a2      	cmp	r2, r4
   20358:	4620      	mov	r0, r4
   2035a:	eb73 0405 	sbcs.w	r4, r3, r5
   2035e:	da00      	bge.n	20362 <next_timeout+0x36>
   20360:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   20362:	4b07      	ldr	r3, [pc, #28]	; (20380 <next_timeout+0x54>)
   20364:	695b      	ldr	r3, [r3, #20]
   20366:	b113      	cbz	r3, 2036e <next_timeout+0x42>
   20368:	4298      	cmp	r0, r3
   2036a:	bfa8      	it	ge
   2036c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2036e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   20370:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20374:	e7f5      	b.n	20362 <next_timeout+0x36>
   20376:	2000      	movs	r0, #0
   20378:	e7f3      	b.n	20362 <next_timeout+0x36>
   2037a:	bf00      	nop
   2037c:	20000cb4 	.word	0x20000cb4
   20380:	200042f0 	.word	0x200042f0

00020384 <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   20384:	6803      	ldr	r3, [r0, #0]
{
   20386:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   20388:	b1fb      	cbz	r3, 203ca <timeout_rem+0x46>
	return list->head == list;
   2038a:	4a11      	ldr	r2, [pc, #68]	; (203d0 <timeout_rem+0x4c>)
   2038c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2038e:	4293      	cmp	r3, r2
   20390:	d018      	beq.n	203c4 <timeout_rem+0x40>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20392:	6851      	ldr	r1, [r2, #4]
   20394:	2400      	movs	r4, #0
   20396:	2500      	movs	r5, #0
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   20398:	b93b      	cbnz	r3, 203aa <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   2039a:	f7ff ffa3 	bl	202e4 <elapsed>
   2039e:	1a22      	subs	r2, r4, r0
   203a0:	eb65 73e0 	sbc.w	r3, r5, r0, asr #31
   203a4:	4619      	mov	r1, r3
   203a6:	4610      	mov	r0, r2
}
   203a8:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   203aa:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   203ae:	18a4      	adds	r4, r4, r2
   203b0:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   203b4:	4283      	cmp	r3, r0
   203b6:	d0f0      	beq.n	2039a <timeout_rem+0x16>
   203b8:	2b00      	cmp	r3, #0
   203ba:	d0ee      	beq.n	2039a <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   203bc:	428b      	cmp	r3, r1
   203be:	d0ec      	beq.n	2039a <timeout_rem+0x16>
   203c0:	681b      	ldr	r3, [r3, #0]
   203c2:	e7e9      	b.n	20398 <timeout_rem+0x14>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   203c4:	2400      	movs	r4, #0
   203c6:	2500      	movs	r5, #0
   203c8:	e7e7      	b.n	2039a <timeout_rem+0x16>
		return 0;
   203ca:	2000      	movs	r0, #0
   203cc:	2100      	movs	r1, #0
   203ce:	e7eb      	b.n	203a8 <timeout_rem+0x24>
   203d0:	20000cb4 	.word	0x20000cb4

000203d4 <z_add_timeout>:
{
   203d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   203d8:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   203da:	1c59      	adds	r1, r3, #1
   203dc:	bf08      	it	eq
   203de:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   203e2:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   203e4:	f000 809d 	beq.w	20522 <z_add_timeout+0x14e>
	k_ticks_t ticks = timeout.ticks + 1;
   203e8:	1c54      	adds	r4, r2, #1
   203ea:	f143 0500 	adc.w	r5, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   203ee:	f06f 0301 	mvn.w	r3, #1
   203f2:	ebb3 0804 	subs.w	r8, r3, r4
   203f6:	f04f 3bff 	mov.w	fp, #4294967295
   203fa:	eb6b 0905 	sbc.w	r9, fp, r5
   203fe:	f1b8 0f00 	cmp.w	r8, #0
   20402:	f179 0300 	sbcs.w	r3, r9, #0
   20406:	db0f      	blt.n	20428 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   20408:	f7ff ff6c 	bl	202e4 <elapsed>
   2040c:	4a4b      	ldr	r2, [pc, #300]	; (2053c <z_add_timeout+0x168>)
   2040e:	e9d2 1c00 	ldrd	r1, ip, [r2]
   20412:	f06f 0301 	mvn.w	r3, #1
   20416:	1a5b      	subs	r3, r3, r1
   20418:	eb6b 020c 	sbc.w	r2, fp, ip
   2041c:	1b1e      	subs	r6, r3, r4
   2041e:	eb62 0705 	sbc.w	r7, r2, r5
   20422:	1a34      	subs	r4, r6, r0
   20424:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   20428:	f8da 3000 	ldr.w	r3, [sl]
   2042c:	b143      	cbz	r3, 20440 <z_add_timeout+0x6c>
   2042e:	4944      	ldr	r1, [pc, #272]	; (20540 <z_add_timeout+0x16c>)
   20430:	4844      	ldr	r0, [pc, #272]	; (20544 <z_add_timeout+0x170>)
   20432:	2268      	movs	r2, #104	; 0x68
   20434:	f001 fd49 	bl	21eca <printk>
   20438:	2168      	movs	r1, #104	; 0x68
   2043a:	4841      	ldr	r0, [pc, #260]	; (20540 <z_add_timeout+0x16c>)
   2043c:	f001 fff7 	bl	2242e <assert_post_action>
	to->fn = fn;
   20440:	9b01      	ldr	r3, [sp, #4]
   20442:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
   20446:	2c01      	cmp	r4, #1
   20448:	f175 0300 	sbcs.w	r3, r5, #0
   2044c:	4627      	mov	r7, r4
   2044e:	46a8      	mov	r8, r5
   20450:	bfbc      	itt	lt
   20452:	2701      	movlt	r7, #1
   20454:	f04f 0800 	movlt.w	r8, #0
	__asm__ volatile(
   20458:	f04f 0320 	mov.w	r3, #32
   2045c:	f3ef 8611 	mrs	r6, BASEPRI
   20460:	f383 8811 	msr	BASEPRI, r3
   20464:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20468:	4837      	ldr	r0, [pc, #220]	; (20548 <z_add_timeout+0x174>)
   2046a:	f7ff fdfd 	bl	20068 <z_spin_lock_valid>
   2046e:	b940      	cbnz	r0, 20482 <z_add_timeout+0xae>
   20470:	4936      	ldr	r1, [pc, #216]	; (2054c <z_add_timeout+0x178>)
   20472:	4834      	ldr	r0, [pc, #208]	; (20544 <z_add_timeout+0x170>)
   20474:	227c      	movs	r2, #124	; 0x7c
   20476:	f001 fd28 	bl	21eca <printk>
   2047a:	217c      	movs	r1, #124	; 0x7c
   2047c:	4833      	ldr	r0, [pc, #204]	; (2054c <z_add_timeout+0x178>)
   2047e:	f001 ffd6 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   20482:	4831      	ldr	r0, [pc, #196]	; (20548 <z_add_timeout+0x174>)
   20484:	f7ff fe0e 	bl	200a4 <z_spin_lock_set_owner>
		to->dticks = ticks + elapsed();
   20488:	f7ff ff2c 	bl	202e4 <elapsed>
	return list->head == list;
   2048c:	4b30      	ldr	r3, [pc, #192]	; (20550 <z_add_timeout+0x17c>)
   2048e:	681a      	ldr	r2, [r3, #0]
   20490:	183c      	adds	r4, r7, r0
   20492:	eb48 75e0 	adc.w	r5, r8, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20496:	429a      	cmp	r2, r3
   20498:	e9ca 4504 	strd	r4, r5, [sl, #16]
   2049c:	d001      	beq.n	204a2 <z_add_timeout+0xce>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2049e:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   204a0:	b952      	cbnz	r2, 204b8 <z_add_timeout+0xe4>
	node->prev = list->tail;
   204a2:	685a      	ldr	r2, [r3, #4]
   204a4:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   204a8:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   204aa:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   204ae:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   204b2:	f8c3 a004 	str.w	sl, [r3, #4]
   204b6:	e014      	b.n	204e2 <z_add_timeout+0x10e>
			if (t->dticks > to->dticks) {
   204b8:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   204bc:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   204c0:	4544      	cmp	r4, r8
   204c2:	eb75 0109 	sbcs.w	r1, r5, r9
   204c6:	da2f      	bge.n	20528 <z_add_timeout+0x154>
				t->dticks -= to->dticks;
   204c8:	ebb8 0004 	subs.w	r0, r8, r4
   204cc:	eb69 0105 	sbc.w	r1, r9, r5
   204d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   204d4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   204d6:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   204da:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   204de:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   204e2:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   204e4:	429a      	cmp	r2, r3
   204e6:	d00b      	beq.n	20500 <z_add_timeout+0x12c>
		if (to == first()) {
   204e8:	4592      	cmp	sl, r2
   204ea:	d109      	bne.n	20500 <z_add_timeout+0x12c>
			int32_t next_time = next_timeout();
   204ec:	f7ff ff1e 	bl	2032c <next_timeout>
			if (next_time == 0 ||
   204f0:	b118      	cbz	r0, 204fa <z_add_timeout+0x126>
			    _current_cpu->slice_ticks != next_time) {
   204f2:	4b18      	ldr	r3, [pc, #96]	; (20554 <z_add_timeout+0x180>)
			if (next_time == 0 ||
   204f4:	695b      	ldr	r3, [r3, #20]
   204f6:	4283      	cmp	r3, r0
   204f8:	d002      	beq.n	20500 <z_add_timeout+0x12c>
				z_clock_set_timeout(next_time, false);
   204fa:	2100      	movs	r1, #0
   204fc:	f7e3 fe4e 	bl	419c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20500:	4811      	ldr	r0, [pc, #68]	; (20548 <z_add_timeout+0x174>)
   20502:	f7ff fdbf 	bl	20084 <z_spin_unlock_valid>
   20506:	b940      	cbnz	r0, 2051a <z_add_timeout+0x146>
   20508:	4910      	ldr	r1, [pc, #64]	; (2054c <z_add_timeout+0x178>)
   2050a:	480e      	ldr	r0, [pc, #56]	; (20544 <z_add_timeout+0x170>)
   2050c:	22a7      	movs	r2, #167	; 0xa7
   2050e:	f001 fcdc 	bl	21eca <printk>
   20512:	21a7      	movs	r1, #167	; 0xa7
   20514:	480d      	ldr	r0, [pc, #52]	; (2054c <z_add_timeout+0x178>)
   20516:	f001 ff8a 	bl	2242e <assert_post_action>
	__asm__ volatile(
   2051a:	f386 8811 	msr	BASEPRI, r6
   2051e:	f3bf 8f6f 	isb	sy
}
   20522:	b003      	add	sp, #12
   20524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   20528:	ebb4 0008 	subs.w	r0, r4, r8
   2052c:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   20530:	42ba      	cmp	r2, r7
   20532:	e9ca 0104 	strd	r0, r1, [sl, #16]
   20536:	d0b4      	beq.n	204a2 <z_add_timeout+0xce>
   20538:	6812      	ldr	r2, [r2, #0]
   2053a:	e7b1      	b.n	204a0 <z_add_timeout+0xcc>
   2053c:	20002220 	.word	0x20002220
   20540:	0002fdd7 	.word	0x0002fdd7
   20544:	0002a026 	.word	0x0002a026
   20548:	20004340 	.word	0x20004340
   2054c:	0002a0e8 	.word	0x0002a0e8
   20550:	20000cb4 	.word	0x20000cb4
   20554:	200042f0 	.word	0x200042f0

00020558 <z_abort_timeout>:
{
   20558:	b538      	push	{r3, r4, r5, lr}
   2055a:	4604      	mov	r4, r0
	__asm__ volatile(
   2055c:	f04f 0320 	mov.w	r3, #32
   20560:	f3ef 8511 	mrs	r5, BASEPRI
   20564:	f383 8811 	msr	BASEPRI, r3
   20568:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2056c:	4815      	ldr	r0, [pc, #84]	; (205c4 <z_abort_timeout+0x6c>)
   2056e:	f7ff fd7b 	bl	20068 <z_spin_lock_valid>
   20572:	b940      	cbnz	r0, 20586 <z_abort_timeout+0x2e>
   20574:	4914      	ldr	r1, [pc, #80]	; (205c8 <z_abort_timeout+0x70>)
   20576:	4815      	ldr	r0, [pc, #84]	; (205cc <z_abort_timeout+0x74>)
   20578:	227c      	movs	r2, #124	; 0x7c
   2057a:	f001 fca6 	bl	21eca <printk>
   2057e:	217c      	movs	r1, #124	; 0x7c
   20580:	4811      	ldr	r0, [pc, #68]	; (205c8 <z_abort_timeout+0x70>)
   20582:	f001 ff54 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   20586:	480f      	ldr	r0, [pc, #60]	; (205c4 <z_abort_timeout+0x6c>)
   20588:	f7ff fd8c 	bl	200a4 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   2058c:	6823      	ldr	r3, [r4, #0]
   2058e:	b1b3      	cbz	r3, 205be <z_abort_timeout+0x66>
			remove_timeout(to);
   20590:	4620      	mov	r0, r4
   20592:	f7ff feb1 	bl	202f8 <remove_timeout>
			ret = 0;
   20596:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20598:	480a      	ldr	r0, [pc, #40]	; (205c4 <z_abort_timeout+0x6c>)
   2059a:	f7ff fd73 	bl	20084 <z_spin_unlock_valid>
   2059e:	b940      	cbnz	r0, 205b2 <z_abort_timeout+0x5a>
   205a0:	4909      	ldr	r1, [pc, #36]	; (205c8 <z_abort_timeout+0x70>)
   205a2:	480a      	ldr	r0, [pc, #40]	; (205cc <z_abort_timeout+0x74>)
   205a4:	22a7      	movs	r2, #167	; 0xa7
   205a6:	f001 fc90 	bl	21eca <printk>
   205aa:	21a7      	movs	r1, #167	; 0xa7
   205ac:	4806      	ldr	r0, [pc, #24]	; (205c8 <z_abort_timeout+0x70>)
   205ae:	f001 ff3e 	bl	2242e <assert_post_action>
	__asm__ volatile(
   205b2:	f385 8811 	msr	BASEPRI, r5
   205b6:	f3bf 8f6f 	isb	sy
}
   205ba:	4620      	mov	r0, r4
   205bc:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   205be:	f06f 0415 	mvn.w	r4, #21
   205c2:	e7e9      	b.n	20598 <z_abort_timeout+0x40>
   205c4:	20004340 	.word	0x20004340
   205c8:	0002a0e8 	.word	0x0002a0e8
   205cc:	0002a026 	.word	0x0002a026

000205d0 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
   205d0:	b570      	push	{r4, r5, r6, lr}
   205d2:	4604      	mov	r4, r0
	__asm__ volatile(
   205d4:	f04f 0320 	mov.w	r3, #32
   205d8:	f3ef 8611 	mrs	r6, BASEPRI
   205dc:	f383 8811 	msr	BASEPRI, r3
   205e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   205e4:	4814      	ldr	r0, [pc, #80]	; (20638 <z_timeout_remaining+0x68>)
   205e6:	f7ff fd3f 	bl	20068 <z_spin_lock_valid>
   205ea:	b940      	cbnz	r0, 205fe <z_timeout_remaining+0x2e>
   205ec:	4913      	ldr	r1, [pc, #76]	; (2063c <z_timeout_remaining+0x6c>)
   205ee:	4814      	ldr	r0, [pc, #80]	; (20640 <z_timeout_remaining+0x70>)
   205f0:	227c      	movs	r2, #124	; 0x7c
   205f2:	f001 fc6a 	bl	21eca <printk>
   205f6:	217c      	movs	r1, #124	; 0x7c
   205f8:	4810      	ldr	r0, [pc, #64]	; (2063c <z_timeout_remaining+0x6c>)
   205fa:	f001 ff18 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   205fe:	480e      	ldr	r0, [pc, #56]	; (20638 <z_timeout_remaining+0x68>)
   20600:	f7ff fd50 	bl	200a4 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   20604:	4620      	mov	r0, r4
   20606:	f7ff febd 	bl	20384 <timeout_rem>
   2060a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2060c:	480a      	ldr	r0, [pc, #40]	; (20638 <z_timeout_remaining+0x68>)
   2060e:	460d      	mov	r5, r1
   20610:	f7ff fd38 	bl	20084 <z_spin_unlock_valid>
   20614:	b940      	cbnz	r0, 20628 <z_timeout_remaining+0x58>
   20616:	4909      	ldr	r1, [pc, #36]	; (2063c <z_timeout_remaining+0x6c>)
   20618:	4809      	ldr	r0, [pc, #36]	; (20640 <z_timeout_remaining+0x70>)
   2061a:	22a7      	movs	r2, #167	; 0xa7
   2061c:	f001 fc55 	bl	21eca <printk>
   20620:	21a7      	movs	r1, #167	; 0xa7
   20622:	4806      	ldr	r0, [pc, #24]	; (2063c <z_timeout_remaining+0x6c>)
   20624:	f001 ff03 	bl	2242e <assert_post_action>
	__asm__ volatile(
   20628:	f386 8811 	msr	BASEPRI, r6
   2062c:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   20630:	4620      	mov	r0, r4
   20632:	4629      	mov	r1, r5
   20634:	bd70      	pop	{r4, r5, r6, pc}
   20636:	bf00      	nop
   20638:	20004340 	.word	0x20004340
   2063c:	0002a0e8 	.word	0x0002a0e8
   20640:	0002a026 	.word	0x0002a026

00020644 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   20644:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20646:	f04f 0320 	mov.w	r3, #32
   2064a:	f3ef 8511 	mrs	r5, BASEPRI
   2064e:	f383 8811 	msr	BASEPRI, r3
   20652:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20656:	4813      	ldr	r0, [pc, #76]	; (206a4 <z_get_next_timeout_expiry+0x60>)
   20658:	f7ff fd06 	bl	20068 <z_spin_lock_valid>
   2065c:	b940      	cbnz	r0, 20670 <z_get_next_timeout_expiry+0x2c>
   2065e:	4912      	ldr	r1, [pc, #72]	; (206a8 <z_get_next_timeout_expiry+0x64>)
   20660:	4812      	ldr	r0, [pc, #72]	; (206ac <z_get_next_timeout_expiry+0x68>)
   20662:	227c      	movs	r2, #124	; 0x7c
   20664:	f001 fc31 	bl	21eca <printk>
   20668:	217c      	movs	r1, #124	; 0x7c
   2066a:	480f      	ldr	r0, [pc, #60]	; (206a8 <z_get_next_timeout_expiry+0x64>)
   2066c:	f001 fedf 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   20670:	480c      	ldr	r0, [pc, #48]	; (206a4 <z_get_next_timeout_expiry+0x60>)
   20672:	f7ff fd17 	bl	200a4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   20676:	f7ff fe59 	bl	2032c <next_timeout>
   2067a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2067c:	4809      	ldr	r0, [pc, #36]	; (206a4 <z_get_next_timeout_expiry+0x60>)
   2067e:	f7ff fd01 	bl	20084 <z_spin_unlock_valid>
   20682:	b940      	cbnz	r0, 20696 <z_get_next_timeout_expiry+0x52>
   20684:	4908      	ldr	r1, [pc, #32]	; (206a8 <z_get_next_timeout_expiry+0x64>)
   20686:	4809      	ldr	r0, [pc, #36]	; (206ac <z_get_next_timeout_expiry+0x68>)
   20688:	22a7      	movs	r2, #167	; 0xa7
   2068a:	f001 fc1e 	bl	21eca <printk>
   2068e:	21a7      	movs	r1, #167	; 0xa7
   20690:	4805      	ldr	r0, [pc, #20]	; (206a8 <z_get_next_timeout_expiry+0x64>)
   20692:	f001 fecc 	bl	2242e <assert_post_action>
	__asm__ volatile(
   20696:	f385 8811 	msr	BASEPRI, r5
   2069a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2069e:	4620      	mov	r0, r4
   206a0:	bd38      	pop	{r3, r4, r5, pc}
   206a2:	bf00      	nop
   206a4:	20004340 	.word	0x20004340
   206a8:	0002a0e8 	.word	0x0002a0e8
   206ac:	0002a026 	.word	0x0002a026

000206b0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   206b0:	b570      	push	{r4, r5, r6, lr}
   206b2:	4604      	mov	r4, r0
   206b4:	460e      	mov	r6, r1
	__asm__ volatile(
   206b6:	f04f 0320 	mov.w	r3, #32
   206ba:	f3ef 8511 	mrs	r5, BASEPRI
   206be:	f383 8811 	msr	BASEPRI, r3
   206c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   206c6:	4816      	ldr	r0, [pc, #88]	; (20720 <z_set_timeout_expiry+0x70>)
   206c8:	f7ff fcce 	bl	20068 <z_spin_lock_valid>
   206cc:	b940      	cbnz	r0, 206e0 <z_set_timeout_expiry+0x30>
   206ce:	4915      	ldr	r1, [pc, #84]	; (20724 <z_set_timeout_expiry+0x74>)
   206d0:	4815      	ldr	r0, [pc, #84]	; (20728 <z_set_timeout_expiry+0x78>)
   206d2:	227c      	movs	r2, #124	; 0x7c
   206d4:	f001 fbf9 	bl	21eca <printk>
   206d8:	217c      	movs	r1, #124	; 0x7c
   206da:	4812      	ldr	r0, [pc, #72]	; (20724 <z_set_timeout_expiry+0x74>)
   206dc:	f001 fea7 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   206e0:	480f      	ldr	r0, [pc, #60]	; (20720 <z_set_timeout_expiry+0x70>)
   206e2:	f7ff fcdf 	bl	200a4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   206e6:	f7ff fe21 	bl	2032c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   206ea:	2801      	cmp	r0, #1
   206ec:	dd05      	ble.n	206fa <z_set_timeout_expiry+0x4a>
   206ee:	42a0      	cmp	r0, r4
   206f0:	dd03      	ble.n	206fa <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   206f2:	4631      	mov	r1, r6
   206f4:	4620      	mov	r0, r4
   206f6:	f7e3 fd51 	bl	419c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   206fa:	4809      	ldr	r0, [pc, #36]	; (20720 <z_set_timeout_expiry+0x70>)
   206fc:	f7ff fcc2 	bl	20084 <z_spin_unlock_valid>
   20700:	b940      	cbnz	r0, 20714 <z_set_timeout_expiry+0x64>
   20702:	4908      	ldr	r1, [pc, #32]	; (20724 <z_set_timeout_expiry+0x74>)
   20704:	4808      	ldr	r0, [pc, #32]	; (20728 <z_set_timeout_expiry+0x78>)
   20706:	22a7      	movs	r2, #167	; 0xa7
   20708:	f001 fbdf 	bl	21eca <printk>
   2070c:	21a7      	movs	r1, #167	; 0xa7
   2070e:	4805      	ldr	r0, [pc, #20]	; (20724 <z_set_timeout_expiry+0x74>)
   20710:	f001 fe8d 	bl	2242e <assert_post_action>
	__asm__ volatile(
   20714:	f385 8811 	msr	BASEPRI, r5
   20718:	f3bf 8f6f 	isb	sy
		}
	}
}
   2071c:	bd70      	pop	{r4, r5, r6, pc}
   2071e:	bf00      	nop
   20720:	20004340 	.word	0x20004340
   20724:	0002a0e8 	.word	0x0002a0e8
   20728:	0002a026 	.word	0x0002a026

0002072c <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   2072c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20730:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   20732:	f7fe fddf 	bl	1f2f4 <z_time_slice>
	__asm__ volatile(
   20736:	f04f 0320 	mov.w	r3, #32
   2073a:	f3ef 8911 	mrs	r9, BASEPRI
   2073e:	f383 8811 	msr	BASEPRI, r3
   20742:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20746:	484b      	ldr	r0, [pc, #300]	; (20874 <z_clock_announce+0x148>)
   20748:	f7ff fc8e 	bl	20068 <z_spin_lock_valid>
   2074c:	b940      	cbnz	r0, 20760 <z_clock_announce+0x34>
   2074e:	494a      	ldr	r1, [pc, #296]	; (20878 <z_clock_announce+0x14c>)
   20750:	484a      	ldr	r0, [pc, #296]	; (2087c <z_clock_announce+0x150>)
   20752:	227c      	movs	r2, #124	; 0x7c
   20754:	f001 fbb9 	bl	21eca <printk>
   20758:	217c      	movs	r1, #124	; 0x7c
   2075a:	4847      	ldr	r0, [pc, #284]	; (20878 <z_clock_announce+0x14c>)
   2075c:	f001 fe67 	bl	2242e <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   20760:	4e47      	ldr	r6, [pc, #284]	; (20880 <z_clock_announce+0x154>)
   20762:	4f48      	ldr	r7, [pc, #288]	; (20884 <z_clock_announce+0x158>)
	z_spin_lock_set_owner(l);
   20764:	4843      	ldr	r0, [pc, #268]	; (20874 <z_clock_announce+0x148>)
	return list->head == list;
   20766:	f8df a120 	ldr.w	sl, [pc, #288]	; 20888 <z_clock_announce+0x15c>
   2076a:	f7ff fc9b 	bl	200a4 <z_spin_lock_set_owner>
   2076e:	46bb      	mov	fp, r7
   20770:	6034      	str	r4, [r6, #0]
   20772:	e9d7 3400 	ldrd	r3, r4, [r7]
   20776:	f8da 8000 	ldr.w	r8, [sl]
   2077a:	f8d6 c000 	ldr.w	ip, [r6]
   2077e:	e9cd 3400 	strd	r3, r4, [sp]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20782:	45d0      	cmp	r8, sl
   20784:	4664      	mov	r4, ip
   20786:	ea4f 75e4 	mov.w	r5, r4, asr #31
   2078a:	d00e      	beq.n	207aa <z_clock_announce+0x7e>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2078c:	f1b8 0f00 	cmp.w	r8, #0
   20790:	d00b      	beq.n	207aa <z_clock_announce+0x7e>
   20792:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
   20796:	458c      	cmp	ip, r1
   20798:	eb75 0302 	sbcs.w	r3, r5, r2
   2079c:	da28      	bge.n	207f0 <z_clock_announce+0xc4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2079e:	ebb1 000c 	subs.w	r0, r1, ip
   207a2:	eb62 0105 	sbc.w	r1, r2, r5
   207a6:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
   207aa:	9b00      	ldr	r3, [sp, #0]
   207ac:	18e2      	adds	r2, r4, r3
   207ae:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   207b0:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   207b4:	eb45 0303 	adc.w	r3, r5, r3
   207b8:	e9cb 2300 	strd	r2, r3, [fp]
	announce_remaining = 0;
   207bc:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   207be:	f7ff fdb5 	bl	2032c <next_timeout>
   207c2:	4621      	mov	r1, r4
   207c4:	f7e3 fcea 	bl	419c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   207c8:	482a      	ldr	r0, [pc, #168]	; (20874 <z_clock_announce+0x148>)
   207ca:	f7ff fc5b 	bl	20084 <z_spin_unlock_valid>
   207ce:	b940      	cbnz	r0, 207e2 <z_clock_announce+0xb6>
   207d0:	4929      	ldr	r1, [pc, #164]	; (20878 <z_clock_announce+0x14c>)
   207d2:	482a      	ldr	r0, [pc, #168]	; (2087c <z_clock_announce+0x150>)
   207d4:	22a7      	movs	r2, #167	; 0xa7
   207d6:	f001 fb78 	bl	21eca <printk>
   207da:	21a7      	movs	r1, #167	; 0xa7
   207dc:	4826      	ldr	r0, [pc, #152]	; (20878 <z_clock_announce+0x14c>)
   207de:	f001 fe26 	bl	2242e <assert_post_action>
	__asm__ volatile(
   207e2:	f389 8811 	msr	BASEPRI, r9
   207e6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   207ea:	b003      	add	sp, #12
   207ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   207f0:	e9dd 4500 	ldrd	r4, r5, [sp]
		announce_remaining -= dt;
   207f4:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   207f8:	1864      	adds	r4, r4, r1
		t->dticks = 0;
   207fa:	f04f 0200 	mov.w	r2, #0
   207fe:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   20802:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
   20806:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
   20808:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
   2080c:	4640      	mov	r0, r8
		curr_tick += dt;
   2080e:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
   20812:	f7ff fd71 	bl	202f8 <remove_timeout>
   20816:	4817      	ldr	r0, [pc, #92]	; (20874 <z_clock_announce+0x148>)
   20818:	f7ff fc34 	bl	20084 <z_spin_unlock_valid>
   2081c:	b940      	cbnz	r0, 20830 <z_clock_announce+0x104>
   2081e:	4916      	ldr	r1, [pc, #88]	; (20878 <z_clock_announce+0x14c>)
   20820:	4816      	ldr	r0, [pc, #88]	; (2087c <z_clock_announce+0x150>)
   20822:	22a7      	movs	r2, #167	; 0xa7
   20824:	f001 fb51 	bl	21eca <printk>
   20828:	21a7      	movs	r1, #167	; 0xa7
   2082a:	4813      	ldr	r0, [pc, #76]	; (20878 <z_clock_announce+0x14c>)
   2082c:	f001 fdff 	bl	2242e <assert_post_action>
   20830:	f389 8811 	msr	BASEPRI, r9
   20834:	f3bf 8f6f 	isb	sy
		t->fn(t);
   20838:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2083c:	4640      	mov	r0, r8
   2083e:	4798      	blx	r3
	__asm__ volatile(
   20840:	f04f 0320 	mov.w	r3, #32
   20844:	f3ef 8911 	mrs	r9, BASEPRI
   20848:	f383 8811 	msr	BASEPRI, r3
   2084c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20850:	4808      	ldr	r0, [pc, #32]	; (20874 <z_clock_announce+0x148>)
   20852:	f7ff fc09 	bl	20068 <z_spin_lock_valid>
   20856:	b940      	cbnz	r0, 2086a <z_clock_announce+0x13e>
   20858:	4907      	ldr	r1, [pc, #28]	; (20878 <z_clock_announce+0x14c>)
   2085a:	4808      	ldr	r0, [pc, #32]	; (2087c <z_clock_announce+0x150>)
   2085c:	227c      	movs	r2, #124	; 0x7c
   2085e:	f001 fb34 	bl	21eca <printk>
   20862:	217c      	movs	r1, #124	; 0x7c
   20864:	4804      	ldr	r0, [pc, #16]	; (20878 <z_clock_announce+0x14c>)
   20866:	f001 fde2 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   2086a:	4802      	ldr	r0, [pc, #8]	; (20874 <z_clock_announce+0x148>)
   2086c:	f7ff fc1a 	bl	200a4 <z_spin_lock_set_owner>
	return k;
   20870:	e77f      	b.n	20772 <z_clock_announce+0x46>
   20872:	bf00      	nop
   20874:	20004340 	.word	0x20004340
   20878:	0002a0e8 	.word	0x0002a0e8
   2087c:	0002a026 	.word	0x0002a026
   20880:	2000433c 	.word	0x2000433c
   20884:	20002220 	.word	0x20002220
   20888:	20000cb4 	.word	0x20000cb4

0002088c <z_tick_get>:

int64_t z_tick_get(void)
{
   2088c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20890:	f04f 0320 	mov.w	r3, #32
   20894:	f3ef 8611 	mrs	r6, BASEPRI
   20898:	f383 8811 	msr	BASEPRI, r3
   2089c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   208a0:	4816      	ldr	r0, [pc, #88]	; (208fc <z_tick_get+0x70>)
   208a2:	f7ff fbe1 	bl	20068 <z_spin_lock_valid>
   208a6:	b940      	cbnz	r0, 208ba <z_tick_get+0x2e>
   208a8:	4915      	ldr	r1, [pc, #84]	; (20900 <z_tick_get+0x74>)
   208aa:	4816      	ldr	r0, [pc, #88]	; (20904 <z_tick_get+0x78>)
   208ac:	227c      	movs	r2, #124	; 0x7c
   208ae:	f001 fb0c 	bl	21eca <printk>
   208b2:	217c      	movs	r1, #124	; 0x7c
   208b4:	4812      	ldr	r0, [pc, #72]	; (20900 <z_tick_get+0x74>)
   208b6:	f001 fdba 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   208ba:	4810      	ldr	r0, [pc, #64]	; (208fc <z_tick_get+0x70>)
   208bc:	f7ff fbf2 	bl	200a4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   208c0:	f7e3 fc9e 	bl	4200 <z_clock_elapsed>
   208c4:	4b10      	ldr	r3, [pc, #64]	; (20908 <z_tick_get+0x7c>)
   208c6:	e9d3 4500 	ldrd	r4, r5, [r3]
   208ca:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   208cc:	480b      	ldr	r0, [pc, #44]	; (208fc <z_tick_get+0x70>)
   208ce:	f145 0800 	adc.w	r8, r5, #0
   208d2:	f7ff fbd7 	bl	20084 <z_spin_unlock_valid>
   208d6:	b940      	cbnz	r0, 208ea <z_tick_get+0x5e>
   208d8:	4909      	ldr	r1, [pc, #36]	; (20900 <z_tick_get+0x74>)
   208da:	480a      	ldr	r0, [pc, #40]	; (20904 <z_tick_get+0x78>)
   208dc:	22a7      	movs	r2, #167	; 0xa7
   208de:	f001 faf4 	bl	21eca <printk>
   208e2:	21a7      	movs	r1, #167	; 0xa7
   208e4:	4806      	ldr	r0, [pc, #24]	; (20900 <z_tick_get+0x74>)
   208e6:	f001 fda2 	bl	2242e <assert_post_action>
	__asm__ volatile(
   208ea:	f386 8811 	msr	BASEPRI, r6
   208ee:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   208f2:	4638      	mov	r0, r7
   208f4:	4641      	mov	r1, r8
   208f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   208fa:	bf00      	nop
   208fc:	20004340 	.word	0x20004340
   20900:	0002a0e8 	.word	0x0002a0e8
   20904:	0002a026 	.word	0x0002a026
   20908:	20002220 	.word	0x20002220

0002090c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   2090c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20910:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   20912:	4d3d      	ldr	r5, [pc, #244]	; (20a08 <clear_event_registrations+0xfc>)
   20914:	4e3d      	ldr	r6, [pc, #244]	; (20a0c <clear_event_registrations+0x100>)
   20916:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 20a14 <clear_event_registrations+0x108>
{
   2091a:	4681      	mov	r9, r0
   2091c:	4617      	mov	r7, r2
	while (num_events--) {
   2091e:	fb04 0401 	mla	r4, r4, r1, r0
   20922:	454c      	cmp	r4, r9
   20924:	d101      	bne.n	2092a <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   20926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   2092a:	2300      	movs	r3, #0
   2092c:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   20930:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   20934:	f003 030f 	and.w	r3, r3, #15
   20938:	2b04      	cmp	r3, #4
   2093a:	d831      	bhi.n	209a0 <clear_event_registrations+0x94>
   2093c:	e8df f003 	tbb	[pc, r3]
   20940:	30032539 	.word	0x30032539
   20944:	1a          	.byte	0x1a
   20945:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   20946:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2094a:	b943      	cbnz	r3, 2095e <clear_event_registrations+0x52>
   2094c:	4629      	mov	r1, r5
   2094e:	229d      	movs	r2, #157	; 0x9d
   20950:	4630      	mov	r0, r6
   20952:	f001 faba 	bl	21eca <printk>
   20956:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   20958:	4628      	mov	r0, r5
   2095a:	f001 fd68 	bl	2242e <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2095e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   20962:	b333      	cbz	r3, 209b2 <clear_event_registrations+0xa6>
	node->prev->next = node->next;
   20964:	f854 2c10 	ldr.w	r2, [r4, #-16]
   20968:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2096a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2096c:	2300      	movs	r3, #0
	node->prev = NULL;
   2096e:	e944 3305 	strd	r3, r3, [r4, #-20]
   20972:	e01e      	b.n	209b2 <clear_event_registrations+0xa6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   20974:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20978:	2b00      	cmp	r3, #0
   2097a:	d1f0      	bne.n	2095e <clear_event_registrations+0x52>
   2097c:	4629      	mov	r1, r5
   2097e:	22a1      	movs	r2, #161	; 0xa1
   20980:	4630      	mov	r0, r6
   20982:	f001 faa2 	bl	21eca <printk>
   20986:	21a1      	movs	r1, #161	; 0xa1
   20988:	e7e6      	b.n	20958 <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2098a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2098e:	2b00      	cmp	r3, #0
   20990:	d1e5      	bne.n	2095e <clear_event_registrations+0x52>
   20992:	4629      	mov	r1, r5
   20994:	22a5      	movs	r2, #165	; 0xa5
   20996:	4630      	mov	r0, r6
   20998:	f001 fa97 	bl	21eca <printk>
   2099c:	21a5      	movs	r1, #165	; 0xa5
   2099e:	e7db      	b.n	20958 <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   209a0:	4629      	mov	r1, r5
   209a2:	4630      	mov	r0, r6
   209a4:	22ac      	movs	r2, #172	; 0xac
   209a6:	f001 fa90 	bl	21eca <printk>
   209aa:	21ac      	movs	r1, #172	; 0xac
   209ac:	4628      	mov	r0, r5
   209ae:	f001 fd3e 	bl	2242e <assert_post_action>
   209b2:	4640      	mov	r0, r8
   209b4:	f7ff fb66 	bl	20084 <z_spin_unlock_valid>
   209b8:	b940      	cbnz	r0, 209cc <clear_event_registrations+0xc0>
   209ba:	4915      	ldr	r1, [pc, #84]	; (20a10 <clear_event_registrations+0x104>)
   209bc:	4630      	mov	r0, r6
   209be:	22a7      	movs	r2, #167	; 0xa7
   209c0:	f001 fa83 	bl	21eca <printk>
   209c4:	21a7      	movs	r1, #167	; 0xa7
   209c6:	4812      	ldr	r0, [pc, #72]	; (20a10 <clear_event_registrations+0x104>)
   209c8:	f001 fd31 	bl	2242e <assert_post_action>
   209cc:	f387 8811 	msr	BASEPRI, r7
   209d0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   209d4:	f04f 0320 	mov.w	r3, #32
   209d8:	f3ef 8711 	mrs	r7, BASEPRI
   209dc:	f383 8811 	msr	BASEPRI, r3
   209e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   209e4:	4640      	mov	r0, r8
   209e6:	f7ff fb3f 	bl	20068 <z_spin_lock_valid>
   209ea:	b940      	cbnz	r0, 209fe <clear_event_registrations+0xf2>
   209ec:	4908      	ldr	r1, [pc, #32]	; (20a10 <clear_event_registrations+0x104>)
   209ee:	4630      	mov	r0, r6
   209f0:	227c      	movs	r2, #124	; 0x7c
   209f2:	f001 fa6a 	bl	21eca <printk>
   209f6:	217c      	movs	r1, #124	; 0x7c
   209f8:	4805      	ldr	r0, [pc, #20]	; (20a10 <clear_event_registrations+0x104>)
   209fa:	f001 fd18 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   209fe:	4640      	mov	r0, r8
   20a00:	f7ff fb50 	bl	200a4 <z_spin_lock_set_owner>
	return k;
   20a04:	3c14      	subs	r4, #20
   20a06:	e78c      	b.n	20922 <clear_event_registrations+0x16>
   20a08:	0002fdfb 	.word	0x0002fdfb
   20a0c:	0002a026 	.word	0x0002a026
   20a10:	0002a0e8 	.word	0x0002a0e8
   20a14:	20004344 	.word	0x20004344

00020a18 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   20a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   20a1c:	6884      	ldr	r4, [r0, #8]
{
   20a1e:	4605      	mov	r5, r0
   20a20:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   20a22:	b1b4      	cbz	r4, 20a52 <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   20a24:	7863      	ldrb	r3, [r4, #1]
   20a26:	2b01      	cmp	r3, #1
   20a28:	d147      	bne.n	20aba <signal_poll_event+0xa2>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   20a2a:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   20a2e:	d10a      	bne.n	20a46 <signal_poll_event+0x2e>
   20a30:	22e3      	movs	r2, #227	; 0xe3
   20a32:	492e      	ldr	r1, [pc, #184]	; (20aec <signal_poll_event+0xd4>)
   20a34:	482e      	ldr	r0, [pc, #184]	; (20af0 <signal_poll_event+0xd8>)
   20a36:	f001 fa48 	bl	21eca <printk>
   20a3a:	21e3      	movs	r1, #227	; 0xe3
   20a3c:	482b      	ldr	r0, [pc, #172]	; (20aec <signal_poll_event+0xd4>)
   20a3e:	f001 fcf6 	bl	2242e <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   20a42:	7b7b      	ldrb	r3, [r7, #13]
   20a44:	deff      	udf	#255	; 0xff
   20a46:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   20a4a:	f013 0302 	ands.w	r3, r3, #2
   20a4e:	d10a      	bne.n	20a66 <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   20a50:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   20a52:	68eb      	ldr	r3, [r5, #12]
   20a54:	f3c3 3204 	ubfx	r2, r3, #12, #5
   20a58:	4316      	orrs	r6, r2
	event->poller = NULL;
   20a5a:	2000      	movs	r0, #0
	event->state |= state;
   20a5c:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   20a60:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   20a62:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   20a64:	e00d      	b.n	20a82 <signal_poll_event+0x6a>
	if (z_is_thread_timeout_expired(thread)) {
   20a66:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   20a6a:	f04f 31ff 	mov.w	r1, #4294967295
   20a6e:	f06f 0001 	mvn.w	r0, #1
   20a72:	428b      	cmp	r3, r1
   20a74:	bf08      	it	eq
   20a76:	4282      	cmpeq	r2, r0
   20a78:	d105      	bne.n	20a86 <signal_poll_event+0x6e>
		poller->is_polling = false;
   20a7a:	2300      	movs	r3, #0
   20a7c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   20a7e:	f06f 000a 	mvn.w	r0, #10
}
   20a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   20a86:	4638      	mov	r0, r7
   20a88:	f7fe fa14 	bl	1eeb4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   20a8c:	2e08      	cmp	r6, #8
   20a8e:	bf0c      	ite	eq
   20a90:	f06f 0303 	mvneq.w	r3, #3
   20a94:	2300      	movne	r3, #0
   20a96:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20a98:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   20a9c:	06db      	lsls	r3, r3, #27
   20a9e:	d104      	bne.n	20aaa <signal_poll_event+0x92>
	if (!z_is_thread_ready(thread)) {
   20aa0:	f854 8c54 	ldr.w	r8, [r4, #-84]
   20aa4:	f1b8 0f00 	cmp.w	r8, #0
   20aa8:	d001      	beq.n	20aae <signal_poll_event+0x96>
		poller->is_polling = false;
   20aaa:	2300      	movs	r3, #0
   20aac:	e7d0      	b.n	20a50 <signal_poll_event+0x38>
	z_ready_thread(thread);
   20aae:	4638      	mov	r0, r7
   20ab0:	f7fe fb18 	bl	1f0e4 <z_ready_thread>
		poller->is_polling = false;
   20ab4:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   20ab8:	e7cb      	b.n	20a52 <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   20aba:	2b02      	cmp	r3, #2
   20abc:	d1f5      	bne.n	20aaa <signal_poll_event+0x92>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   20abe:	7823      	ldrb	r3, [r4, #0]
   20ac0:	2b00      	cmp	r3, #0
   20ac2:	d0c6      	beq.n	20a52 <signal_poll_event+0x3a>
   20ac4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   20ac8:	b177      	cbz	r7, 20ae8 <signal_poll_event+0xd0>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   20aca:	f1a4 0910 	sub.w	r9, r4, #16
   20ace:	f104 0010 	add.w	r0, r4, #16
		twork->poll_result = 0;
   20ad2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   20ad6:	f7ff fd3f 	bl	20558 <z_abort_timeout>
		twork->poll_result = 0;
   20ada:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   20ade:	4649      	mov	r1, r9
   20ae0:	4638      	mov	r0, r7
   20ae2:	f007 feed 	bl	288c0 <k_work_submit_to_queue>
   20ae6:	e7e5      	b.n	20ab4 <signal_poll_event+0x9c>
		poller->is_polling = false;
   20ae8:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   20aea:	e7b2      	b.n	20a52 <signal_poll_event+0x3a>
   20aec:	0002fdfb 	.word	0x0002fdfb
   20af0:	0002a026 	.word	0x0002a026

00020af4 <register_events>:
{
   20af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   20af8:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20afa:	f8df 919c 	ldr.w	r9, [pc, #412]	; 20c98 <register_events+0x1a4>
   20afe:	4f63      	ldr	r7, [pc, #396]	; (20c8c <register_events+0x198>)
   20b00:	4c63      	ldr	r4, [pc, #396]	; (20c90 <register_events+0x19c>)
{
   20b02:	9100      	str	r1, [sp, #0]
   20b04:	4615      	mov	r5, r2
   20b06:	9301      	str	r3, [sp, #4]
   20b08:	4682      	mov	sl, r0
	int events_registered = 0;
   20b0a:	46b0      	mov	r8, r6
	for (int ii = 0; ii < num_events; ii++) {
   20b0c:	9b00      	ldr	r3, [sp, #0]
   20b0e:	429e      	cmp	r6, r3
   20b10:	db03      	blt.n	20b1a <register_events+0x26>
}
   20b12:	4640      	mov	r0, r8
   20b14:	b003      	add	sp, #12
   20b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b1a:	f04f 0220 	mov.w	r2, #32
   20b1e:	f3ef 8b11 	mrs	fp, BASEPRI
   20b22:	f382 8811 	msr	BASEPRI, r2
   20b26:	f3bf 8f6f 	isb	sy
   20b2a:	4648      	mov	r0, r9
   20b2c:	f7ff fa9c 	bl	20068 <z_spin_lock_valid>
   20b30:	b940      	cbnz	r0, 20b44 <register_events+0x50>
   20b32:	4639      	mov	r1, r7
   20b34:	4620      	mov	r0, r4
   20b36:	227c      	movs	r2, #124	; 0x7c
   20b38:	f001 f9c7 	bl	21eca <printk>
   20b3c:	217c      	movs	r1, #124	; 0x7c
   20b3e:	4638      	mov	r0, r7
   20b40:	f001 fc75 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   20b44:	4648      	mov	r0, r9
   20b46:	f7ff faad 	bl	200a4 <z_spin_lock_set_owner>
	switch (event->type) {
   20b4a:	f89a 200d 	ldrb.w	r2, [sl, #13]
   20b4e:	f002 020f 	and.w	r2, r2, #15
   20b52:	2a04      	cmp	r2, #4
   20b54:	d848      	bhi.n	20be8 <register_events+0xf4>
   20b56:	e8df f002 	tbb	[pc, r2]
   20b5a:	402f      	.short	0x402f
   20b5c:	4703      	.short	0x4703
   20b5e:	2b          	.byte	0x2b
   20b5f:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   20b60:	f8da 2010 	ldr.w	r2, [sl, #16]
   20b64:	6892      	ldr	r2, [r2, #8]
   20b66:	b33a      	cbz	r2, 20bb8 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   20b68:	2102      	movs	r1, #2
	event->state |= state;
   20b6a:	f8da 200c 	ldr.w	r2, [sl, #12]
   20b6e:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   20b72:	ea41 010c 	orr.w	r1, r1, ip
	event->poller = NULL;
   20b76:	2000      	movs	r0, #0
	event->state |= state;
   20b78:	f361 3210 	bfi	r2, r1, #12, #5
	event->poller = NULL;
   20b7c:	f8ca 0008 	str.w	r0, [sl, #8]
	event->state |= state;
   20b80:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   20b84:	7028      	strb	r0, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b86:	4648      	mov	r0, r9
   20b88:	f7ff fa7c 	bl	20084 <z_spin_unlock_valid>
   20b8c:	b940      	cbnz	r0, 20ba0 <register_events+0xac>
   20b8e:	4639      	mov	r1, r7
   20b90:	4620      	mov	r0, r4
   20b92:	22a7      	movs	r2, #167	; 0xa7
   20b94:	f001 f999 	bl	21eca <printk>
   20b98:	21a7      	movs	r1, #167	; 0xa7
   20b9a:	4638      	mov	r0, r7
   20b9c:	f001 fc47 	bl	2242e <assert_post_action>
	__asm__ volatile(
   20ba0:	f38b 8811 	msr	BASEPRI, fp
   20ba4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   20ba8:	3601      	adds	r6, #1
   20baa:	f10a 0a14 	add.w	sl, sl, #20
   20bae:	e7ad      	b.n	20b0c <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   20bb0:	f8da 2010 	ldr.w	r2, [sl, #16]
   20bb4:	6812      	ldr	r2, [r2, #0]
   20bb6:	bb0a      	cbnz	r2, 20bfc <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   20bb8:	9b01      	ldr	r3, [sp, #4]
   20bba:	2b00      	cmp	r3, #0
   20bbc:	d1e3      	bne.n	20b86 <register_events+0x92>
   20bbe:	782a      	ldrb	r2, [r5, #0]
   20bc0:	2a00      	cmp	r2, #0
   20bc2:	d0e0      	beq.n	20b86 <register_events+0x92>
	switch (event->type) {
   20bc4:	f89a 200d 	ldrb.w	r2, [sl, #13]
   20bc8:	f002 020f 	and.w	r2, r2, #15
   20bcc:	2a04      	cmp	r2, #4
   20bce:	d852      	bhi.n	20c76 <register_events+0x182>
   20bd0:	e8df f002 	tbb	[pc, r2]
   20bd4:	51164029 	.word	0x51164029
   20bd8:	2e          	.byte	0x2e
   20bd9:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   20bda:	f8da 2010 	ldr.w	r2, [sl, #16]
   20bde:	6892      	ldr	r2, [r2, #8]
   20be0:	2a00      	cmp	r2, #0
   20be2:	d0e9      	beq.n	20bb8 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   20be4:	2101      	movs	r1, #1
   20be6:	e7c0      	b.n	20b6a <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   20be8:	4620      	mov	r0, r4
   20bea:	2254      	movs	r2, #84	; 0x54
   20bec:	4929      	ldr	r1, [pc, #164]	; (20c94 <register_events+0x1a0>)
   20bee:	f001 f96c 	bl	21eca <printk>
   20bf2:	2154      	movs	r1, #84	; 0x54
   20bf4:	4827      	ldr	r0, [pc, #156]	; (20c94 <register_events+0x1a0>)
   20bf6:	f001 fc1a 	bl	2242e <assert_post_action>
		break;
   20bfa:	e7dd      	b.n	20bb8 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   20bfc:	2104      	movs	r1, #4
   20bfe:	e7b4      	b.n	20b6a <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   20c00:	f8da 2010 	ldr.w	r2, [sl, #16]
   20c04:	b942      	cbnz	r2, 20c18 <register_events+0x124>
   20c06:	4923      	ldr	r1, [pc, #140]	; (20c94 <register_events+0x1a0>)
   20c08:	4620      	mov	r0, r4
   20c0a:	227e      	movs	r2, #126	; 0x7e
   20c0c:	f001 f95d 	bl	21eca <printk>
   20c10:	217e      	movs	r1, #126	; 0x7e
   20c12:	4820      	ldr	r0, [pc, #128]	; (20c94 <register_events+0x1a0>)
   20c14:	f001 fc0b 	bl	2242e <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   20c18:	f8da 0010 	ldr.w	r0, [sl, #16]
   20c1c:	462a      	mov	r2, r5
   20c1e:	4651      	mov	r1, sl
   20c20:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   20c22:	f007 fe65 	bl	288f0 <add_event>
	event->poller = poller;
   20c26:	f8ca 5008 	str.w	r5, [sl, #8]
			events_registered += 1;
   20c2a:	f108 0801 	add.w	r8, r8, #1
   20c2e:	e7aa      	b.n	20b86 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   20c30:	f8da 2010 	ldr.w	r2, [sl, #16]
   20c34:	b942      	cbnz	r2, 20c48 <register_events+0x154>
   20c36:	4917      	ldr	r1, [pc, #92]	; (20c94 <register_events+0x1a0>)
   20c38:	4620      	mov	r0, r4
   20c3a:	2282      	movs	r2, #130	; 0x82
   20c3c:	f001 f945 	bl	21eca <printk>
   20c40:	2182      	movs	r1, #130	; 0x82
   20c42:	4814      	ldr	r0, [pc, #80]	; (20c94 <register_events+0x1a0>)
   20c44:	f001 fbf3 	bl	2242e <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   20c48:	f8da 0010 	ldr.w	r0, [sl, #16]
   20c4c:	462a      	mov	r2, r5
   20c4e:	4651      	mov	r1, sl
   20c50:	3014      	adds	r0, #20
   20c52:	e7e6      	b.n	20c22 <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   20c54:	f8da 2010 	ldr.w	r2, [sl, #16]
   20c58:	b942      	cbnz	r2, 20c6c <register_events+0x178>
   20c5a:	490e      	ldr	r1, [pc, #56]	; (20c94 <register_events+0x1a0>)
   20c5c:	4620      	mov	r0, r4
   20c5e:	2286      	movs	r2, #134	; 0x86
   20c60:	f001 f933 	bl	21eca <printk>
   20c64:	2186      	movs	r1, #134	; 0x86
   20c66:	480b      	ldr	r0, [pc, #44]	; (20c94 <register_events+0x1a0>)
   20c68:	f001 fbe1 	bl	2242e <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   20c6c:	462a      	mov	r2, r5
   20c6e:	4651      	mov	r1, sl
   20c70:	f8da 0010 	ldr.w	r0, [sl, #16]
   20c74:	e7d5      	b.n	20c22 <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   20c76:	4620      	mov	r0, r4
   20c78:	228d      	movs	r2, #141	; 0x8d
   20c7a:	4906      	ldr	r1, [pc, #24]	; (20c94 <register_events+0x1a0>)
   20c7c:	f001 f925 	bl	21eca <printk>
   20c80:	218d      	movs	r1, #141	; 0x8d
   20c82:	4804      	ldr	r0, [pc, #16]	; (20c94 <register_events+0x1a0>)
   20c84:	f001 fbd3 	bl	2242e <assert_post_action>
		break;
   20c88:	e7cd      	b.n	20c26 <register_events+0x132>
   20c8a:	bf00      	nop
   20c8c:	0002a0e8 	.word	0x0002a0e8
   20c90:	0002a026 	.word	0x0002a026
   20c94:	0002fdfb 	.word	0x0002fdfb
   20c98:	20004344 	.word	0x20004344

00020c9c <k_poll_event_init>:
{
   20c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20c9e:	4604      	mov	r4, r0
   20ca0:	460f      	mov	r7, r1
   20ca2:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   20ca4:	4616      	mov	r6, r2
   20ca6:	b142      	cbz	r2, 20cba <k_poll_event_init+0x1e>
   20ca8:	4916      	ldr	r1, [pc, #88]	; (20d04 <k_poll_event_init+0x68>)
   20caa:	4817      	ldr	r0, [pc, #92]	; (20d08 <k_poll_event_init+0x6c>)
   20cac:	222e      	movs	r2, #46	; 0x2e
   20cae:	f001 f90c 	bl	21eca <printk>
   20cb2:	212e      	movs	r1, #46	; 0x2e
   20cb4:	4813      	ldr	r0, [pc, #76]	; (20d04 <k_poll_event_init+0x68>)
   20cb6:	f001 fbba 	bl	2242e <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   20cba:	2f0f      	cmp	r7, #15
   20cbc:	d908      	bls.n	20cd0 <k_poll_event_init+0x34>
   20cbe:	4911      	ldr	r1, [pc, #68]	; (20d04 <k_poll_event_init+0x68>)
   20cc0:	4811      	ldr	r0, [pc, #68]	; (20d08 <k_poll_event_init+0x6c>)
   20cc2:	222f      	movs	r2, #47	; 0x2f
   20cc4:	f001 f901 	bl	21eca <printk>
   20cc8:	212f      	movs	r1, #47	; 0x2f
   20cca:	480e      	ldr	r0, [pc, #56]	; (20d04 <k_poll_event_init+0x68>)
   20ccc:	f001 fbaf 	bl	2242e <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   20cd0:	b945      	cbnz	r5, 20ce4 <k_poll_event_init+0x48>
   20cd2:	490c      	ldr	r1, [pc, #48]	; (20d04 <k_poll_event_init+0x68>)
   20cd4:	480c      	ldr	r0, [pc, #48]	; (20d08 <k_poll_event_init+0x6c>)
   20cd6:	2230      	movs	r2, #48	; 0x30
   20cd8:	f001 f8f7 	bl	21eca <printk>
   20cdc:	2130      	movs	r1, #48	; 0x30
   20cde:	4809      	ldr	r0, [pc, #36]	; (20d04 <k_poll_event_init+0x68>)
   20ce0:	f001 fba5 	bl	2242e <assert_post_action>
	event->type = type;
   20ce4:	7b63      	ldrb	r3, [r4, #13]
   20ce6:	f367 0303 	bfi	r3, r7, #0, #4
   20cea:	7363      	strb	r3, [r4, #13]
	event->mode = mode;
   20cec:	7ba3      	ldrb	r3, [r4, #14]
   20cee:	f366 0341 	bfi	r3, r6, #1, #1
   20cf2:	73a3      	strb	r3, [r4, #14]
	event->poller = NULL;
   20cf4:	2300      	movs	r3, #0
	event->state = K_POLL_STATE_NOT_READY;
   20cf6:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   20cf8:	60a3      	str	r3, [r4, #8]
	event->state = K_POLL_STATE_NOT_READY;
   20cfa:	4b04      	ldr	r3, [pc, #16]	; (20d0c <k_poll_event_init+0x70>)
   20cfc:	4013      	ands	r3, r2
	event->obj = obj;
   20cfe:	e9c4 3503 	strd	r3, r5, [r4, #12]
}
   20d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20d04:	0002fdfb 	.word	0x0002fdfb
   20d08:	0002a026 	.word	0x0002a026
   20d0c:	00020fff 	.word	0x00020fff

00020d10 <z_impl_k_poll>:
{
   20d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20d14:	4699      	mov	r9, r3
	struct z_poller *poller = &_current->poller;
   20d16:	4b64      	ldr	r3, [pc, #400]	; (20ea8 <z_impl_k_poll+0x198>)
   20d18:	689c      	ldr	r4, [r3, #8]
	poller->is_polling = true;
   20d1a:	2301      	movs	r3, #1
{
   20d1c:	b085      	sub	sp, #20
   20d1e:	4605      	mov	r5, r0
   20d20:	460e      	mov	r6, r1
   20d22:	4690      	mov	r8, r2
	struct z_poller *poller = &_current->poller;
   20d24:	f104 076c 	add.w	r7, r4, #108	; 0x6c
	poller->is_polling = true;
   20d28:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	poller->mode = MODE_POLL;
   20d2c:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
   20d30:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   20d34:	b153      	cbz	r3, 20d4c <z_impl_k_poll+0x3c>
   20d36:	495d      	ldr	r1, [pc, #372]	; (20eac <z_impl_k_poll+0x19c>)
   20d38:	485d      	ldr	r0, [pc, #372]	; (20eb0 <z_impl_k_poll+0x1a0>)
   20d3a:	f44f 7282 	mov.w	r2, #260	; 0x104
   20d3e:	f001 f8c4 	bl	21eca <printk>
   20d42:	f44f 7182 	mov.w	r1, #260	; 0x104
   20d46:	4859      	ldr	r0, [pc, #356]	; (20eac <z_impl_k_poll+0x19c>)
   20d48:	f001 fb71 	bl	2242e <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   20d4c:	b955      	cbnz	r5, 20d64 <z_impl_k_poll+0x54>
   20d4e:	4957      	ldr	r1, [pc, #348]	; (20eac <z_impl_k_poll+0x19c>)
   20d50:	4857      	ldr	r0, [pc, #348]	; (20eb0 <z_impl_k_poll+0x1a0>)
   20d52:	f240 1205 	movw	r2, #261	; 0x105
   20d56:	f001 f8b8 	bl	21eca <printk>
   20d5a:	f240 1105 	movw	r1, #261	; 0x105
   20d5e:	4853      	ldr	r0, [pc, #332]	; (20eac <z_impl_k_poll+0x19c>)
   20d60:	f001 fb65 	bl	2242e <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   20d64:	2e00      	cmp	r6, #0
   20d66:	da0a      	bge.n	20d7e <z_impl_k_poll+0x6e>
   20d68:	4950      	ldr	r1, [pc, #320]	; (20eac <z_impl_k_poll+0x19c>)
   20d6a:	4851      	ldr	r0, [pc, #324]	; (20eb0 <z_impl_k_poll+0x1a0>)
   20d6c:	f44f 7283 	mov.w	r2, #262	; 0x106
   20d70:	f001 f8ab 	bl	21eca <printk>
   20d74:	f44f 7183 	mov.w	r1, #262	; 0x106
   20d78:	484c      	ldr	r0, [pc, #304]	; (20eac <z_impl_k_poll+0x19c>)
   20d7a:	f001 fb58 	bl	2242e <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   20d7e:	ea58 0309 	orrs.w	r3, r8, r9
   20d82:	bf0c      	ite	eq
   20d84:	2301      	moveq	r3, #1
   20d86:	2300      	movne	r3, #0
   20d88:	463a      	mov	r2, r7
   20d8a:	4631      	mov	r1, r6
   20d8c:	4628      	mov	r0, r5
   20d8e:	f7ff feb1 	bl	20af4 <register_events>
   20d92:	4607      	mov	r7, r0
	__asm__ volatile(
   20d94:	f04f 0320 	mov.w	r3, #32
   20d98:	f3ef 8611 	mrs	r6, BASEPRI
   20d9c:	f383 8811 	msr	BASEPRI, r3
   20da0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20da4:	4843      	ldr	r0, [pc, #268]	; (20eb4 <z_impl_k_poll+0x1a4>)
   20da6:	f7ff f95f 	bl	20068 <z_spin_lock_valid>
   20daa:	b940      	cbnz	r0, 20dbe <z_impl_k_poll+0xae>
   20dac:	4942      	ldr	r1, [pc, #264]	; (20eb8 <z_impl_k_poll+0x1a8>)
   20dae:	4840      	ldr	r0, [pc, #256]	; (20eb0 <z_impl_k_poll+0x1a0>)
   20db0:	227c      	movs	r2, #124	; 0x7c
   20db2:	f001 f88a 	bl	21eca <printk>
   20db6:	217c      	movs	r1, #124	; 0x7c
   20db8:	483f      	ldr	r0, [pc, #252]	; (20eb8 <z_impl_k_poll+0x1a8>)
   20dba:	f001 fb38 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   20dbe:	483d      	ldr	r0, [pc, #244]	; (20eb4 <z_impl_k_poll+0x1a4>)
   20dc0:	f7ff f970 	bl	200a4 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   20dc4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   20dc8:	b9d3      	cbnz	r3, 20e00 <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   20dca:	4628      	mov	r0, r5
   20dcc:	4632      	mov	r2, r6
   20dce:	4639      	mov	r1, r7
   20dd0:	f7ff fd9c 	bl	2090c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20dd4:	4837      	ldr	r0, [pc, #220]	; (20eb4 <z_impl_k_poll+0x1a4>)
   20dd6:	f7ff f955 	bl	20084 <z_spin_unlock_valid>
   20dda:	b940      	cbnz	r0, 20dee <z_impl_k_poll+0xde>
   20ddc:	4936      	ldr	r1, [pc, #216]	; (20eb8 <z_impl_k_poll+0x1a8>)
   20dde:	4834      	ldr	r0, [pc, #208]	; (20eb0 <z_impl_k_poll+0x1a0>)
   20de0:	22a7      	movs	r2, #167	; 0xa7
   20de2:	f001 f872 	bl	21eca <printk>
   20de6:	21a7      	movs	r1, #167	; 0xa7
   20de8:	4833      	ldr	r0, [pc, #204]	; (20eb8 <z_impl_k_poll+0x1a8>)
   20dea:	f001 fb20 	bl	2242e <assert_post_action>
	__asm__ volatile(
   20dee:	f386 8811 	msr	BASEPRI, r6
   20df2:	f3bf 8f6f 	isb	sy
		return 0;
   20df6:	2400      	movs	r4, #0
}
   20df8:	4620      	mov	r0, r4
   20dfa:	b005      	add	sp, #20
   20dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   20e00:	2300      	movs	r3, #0
   20e02:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20e06:	ea58 0309 	orrs.w	r3, r8, r9
   20e0a:	d113      	bne.n	20e34 <z_impl_k_poll+0x124>
   20e0c:	4829      	ldr	r0, [pc, #164]	; (20eb4 <z_impl_k_poll+0x1a4>)
   20e0e:	f7ff f939 	bl	20084 <z_spin_unlock_valid>
   20e12:	b940      	cbnz	r0, 20e26 <z_impl_k_poll+0x116>
   20e14:	4928      	ldr	r1, [pc, #160]	; (20eb8 <z_impl_k_poll+0x1a8>)
   20e16:	4826      	ldr	r0, [pc, #152]	; (20eb0 <z_impl_k_poll+0x1a0>)
   20e18:	22a7      	movs	r2, #167	; 0xa7
   20e1a:	f001 f856 	bl	21eca <printk>
   20e1e:	21a7      	movs	r1, #167	; 0xa7
   20e20:	4825      	ldr	r0, [pc, #148]	; (20eb8 <z_impl_k_poll+0x1a8>)
   20e22:	f001 fb04 	bl	2242e <assert_post_action>
   20e26:	f386 8811 	msr	BASEPRI, r6
   20e2a:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   20e2e:	f06f 040a 	mvn.w	r4, #10
   20e32:	e7e1      	b.n	20df8 <z_impl_k_poll+0xe8>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   20e34:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20e36:	e9cd 8900 	strd	r8, r9, [sp]
   20e3a:	4631      	mov	r1, r6
   20e3c:	481d      	ldr	r0, [pc, #116]	; (20eb4 <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   20e3e:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20e42:	f7fe fcc1 	bl	1f7c8 <z_pend_curr>
   20e46:	4604      	mov	r4, r0
	__asm__ volatile(
   20e48:	f04f 0320 	mov.w	r3, #32
   20e4c:	f3ef 8611 	mrs	r6, BASEPRI
   20e50:	f383 8811 	msr	BASEPRI, r3
   20e54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e58:	4816      	ldr	r0, [pc, #88]	; (20eb4 <z_impl_k_poll+0x1a4>)
   20e5a:	f7ff f905 	bl	20068 <z_spin_lock_valid>
   20e5e:	b940      	cbnz	r0, 20e72 <z_impl_k_poll+0x162>
   20e60:	4915      	ldr	r1, [pc, #84]	; (20eb8 <z_impl_k_poll+0x1a8>)
   20e62:	4813      	ldr	r0, [pc, #76]	; (20eb0 <z_impl_k_poll+0x1a0>)
   20e64:	227c      	movs	r2, #124	; 0x7c
   20e66:	f001 f830 	bl	21eca <printk>
   20e6a:	217c      	movs	r1, #124	; 0x7c
   20e6c:	4812      	ldr	r0, [pc, #72]	; (20eb8 <z_impl_k_poll+0x1a8>)
   20e6e:	f001 fade 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   20e72:	4810      	ldr	r0, [pc, #64]	; (20eb4 <z_impl_k_poll+0x1a4>)
   20e74:	f7ff f916 	bl	200a4 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   20e78:	4628      	mov	r0, r5
   20e7a:	4632      	mov	r2, r6
   20e7c:	4639      	mov	r1, r7
   20e7e:	f7ff fd45 	bl	2090c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e82:	480c      	ldr	r0, [pc, #48]	; (20eb4 <z_impl_k_poll+0x1a4>)
   20e84:	f7ff f8fe 	bl	20084 <z_spin_unlock_valid>
   20e88:	b940      	cbnz	r0, 20e9c <z_impl_k_poll+0x18c>
   20e8a:	490b      	ldr	r1, [pc, #44]	; (20eb8 <z_impl_k_poll+0x1a8>)
   20e8c:	4808      	ldr	r0, [pc, #32]	; (20eb0 <z_impl_k_poll+0x1a0>)
   20e8e:	22a7      	movs	r2, #167	; 0xa7
   20e90:	f001 f81b 	bl	21eca <printk>
   20e94:	21a7      	movs	r1, #167	; 0xa7
   20e96:	4808      	ldr	r0, [pc, #32]	; (20eb8 <z_impl_k_poll+0x1a8>)
   20e98:	f001 fac9 	bl	2242e <assert_post_action>
	__asm__ volatile(
   20e9c:	f386 8811 	msr	BASEPRI, r6
   20ea0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   20ea4:	e7a8      	b.n	20df8 <z_impl_k_poll+0xe8>
   20ea6:	bf00      	nop
   20ea8:	200042f0 	.word	0x200042f0
   20eac:	0002fdfb 	.word	0x0002fdfb
   20eb0:	0002a026 	.word	0x0002a026
   20eb4:	20004344 	.word	0x20004344
   20eb8:	0002a0e8 	.word	0x0002a0e8

00020ebc <z_impl_k_poll_signal_raise>:
{
   20ebc:	b570      	push	{r4, r5, r6, lr}
   20ebe:	4604      	mov	r4, r0
   20ec0:	460e      	mov	r6, r1
	__asm__ volatile(
   20ec2:	f04f 0320 	mov.w	r3, #32
   20ec6:	f3ef 8511 	mrs	r5, BASEPRI
   20eca:	f383 8811 	msr	BASEPRI, r3
   20ece:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ed2:	481c      	ldr	r0, [pc, #112]	; (20f44 <z_impl_k_poll_signal_raise+0x88>)
   20ed4:	f7ff f8c8 	bl	20068 <z_spin_lock_valid>
   20ed8:	b940      	cbnz	r0, 20eec <z_impl_k_poll_signal_raise+0x30>
   20eda:	491b      	ldr	r1, [pc, #108]	; (20f48 <z_impl_k_poll_signal_raise+0x8c>)
   20edc:	481b      	ldr	r0, [pc, #108]	; (20f4c <z_impl_k_poll_signal_raise+0x90>)
   20ede:	227c      	movs	r2, #124	; 0x7c
   20ee0:	f000 fff3 	bl	21eca <printk>
   20ee4:	217c      	movs	r1, #124	; 0x7c
   20ee6:	4818      	ldr	r0, [pc, #96]	; (20f48 <z_impl_k_poll_signal_raise+0x8c>)
   20ee8:	f001 faa1 	bl	2242e <assert_post_action>
	z_spin_lock_set_owner(l);
   20eec:	4815      	ldr	r0, [pc, #84]	; (20f44 <z_impl_k_poll_signal_raise+0x88>)
   20eee:	f7ff f8d9 	bl	200a4 <z_spin_lock_set_owner>
	return list->head == list;
   20ef2:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   20ef4:	60e6      	str	r6, [r4, #12]
	signal->signaled = 1U;
   20ef6:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   20ef8:	4284      	cmp	r4, r0
   20efa:	60a1      	str	r1, [r4, #8]
   20efc:	d112      	bne.n	20f24 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20efe:	4811      	ldr	r0, [pc, #68]	; (20f44 <z_impl_k_poll_signal_raise+0x88>)
   20f00:	f7ff f8c0 	bl	20084 <z_spin_unlock_valid>
   20f04:	b940      	cbnz	r0, 20f18 <z_impl_k_poll_signal_raise+0x5c>
   20f06:	4910      	ldr	r1, [pc, #64]	; (20f48 <z_impl_k_poll_signal_raise+0x8c>)
   20f08:	4810      	ldr	r0, [pc, #64]	; (20f4c <z_impl_k_poll_signal_raise+0x90>)
   20f0a:	22a7      	movs	r2, #167	; 0xa7
   20f0c:	f000 ffdd 	bl	21eca <printk>
   20f10:	21a7      	movs	r1, #167	; 0xa7
   20f12:	480d      	ldr	r0, [pc, #52]	; (20f48 <z_impl_k_poll_signal_raise+0x8c>)
   20f14:	f001 fa8b 	bl	2242e <assert_post_action>
	__asm__ volatile(
   20f18:	f385 8811 	msr	BASEPRI, r5
   20f1c:	f3bf 8f6f 	isb	sy
		return 0;
   20f20:	2400      	movs	r4, #0
   20f22:	e00d      	b.n	20f40 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   20f24:	e9d0 3200 	ldrd	r3, r2, [r0]
   20f28:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20f2a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20f2c:	2300      	movs	r3, #0
	node->prev = NULL;
   20f2e:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20f32:	f7ff fd71 	bl	20a18 <signal_poll_event>
	z_reschedule(&lock, key);
   20f36:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20f38:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   20f3a:	4802      	ldr	r0, [pc, #8]	; (20f44 <z_impl_k_poll_signal_raise+0x88>)
   20f3c:	f7fd ff00 	bl	1ed40 <z_reschedule>
}
   20f40:	4620      	mov	r0, r4
   20f42:	bd70      	pop	{r4, r5, r6, pc}
   20f44:	20004344 	.word	0x20004344
   20f48:	0002a0e8 	.word	0x0002a0e8
   20f4c:	0002a026 	.word	0x0002a026

00020f50 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   20f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20f52:	4607      	mov	r7, r0
   20f54:	460c      	mov	r4, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   20f56:	f007 fc03 	bl	28760 <k_is_in_isr>
   20f5a:	b110      	cbz	r0, 20f62 <z_thread_aligned_alloc+0x12>
	}

	if (heap) {
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   20f5c:	2000      	movs	r0, #0
	}

	return ret;
}
   20f5e:	b003      	add	sp, #12
   20f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		heap = _current->resource_pool;
   20f62:	4b0f      	ldr	r3, [pc, #60]	; (20fa0 <z_thread_aligned_alloc+0x50>)
   20f64:	689b      	ldr	r3, [r3, #8]
   20f66:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	if (heap) {
   20f6a:	2e00      	cmp	r6, #0
   20f6c:	d0f6      	beq.n	20f5c <z_thread_aligned_alloc+0xc>
	size_t excess = MAX(sizeof(struct k_heap *), align);
   20f6e:	2f04      	cmp	r7, #4
   20f70:	463d      	mov	r5, r7
   20f72:	bf38      	it	cc
   20f74:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   20f76:	1962      	adds	r2, r4, r5
   20f78:	d2f0      	bcs.n	20f5c <z_thread_aligned_alloc+0xc>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   20f7a:	2000      	movs	r0, #0
   20f7c:	2100      	movs	r1, #0
   20f7e:	e9cd 0100 	strd	r0, r1, [sp]
   20f82:	4639      	mov	r1, r7
   20f84:	4630      	mov	r0, r6
   20f86:	f7fd f9cf 	bl	1e328 <k_heap_aligned_alloc>
	if (mem == NULL) {
   20f8a:	4604      	mov	r4, r0
   20f8c:	2800      	cmp	r0, #0
   20f8e:	d0e5      	beq.n	20f5c <z_thread_aligned_alloc+0xc>
	memset(mem, 0xff, excess);
   20f90:	462a      	mov	r2, r5
   20f92:	21ff      	movs	r1, #255	; 0xff
   20f94:	f003 f905 	bl	241a2 <memset>
	*heap_ref = heap;
   20f98:	6026      	str	r6, [r4, #0]
	return mem + excess;
   20f9a:	1960      	adds	r0, r4, r5
	return ret;
   20f9c:	e7df      	b.n	20f5e <z_thread_aligned_alloc+0xe>
   20f9e:	bf00      	nop
   20fa0:	200042f0 	.word	0x200042f0

00020fa4 <nrf_cc3xx_platform_init>:
   20fa4:	b510      	push	{r4, lr}
   20fa6:	4c0c      	ldr	r4, [pc, #48]	; (20fd8 <nrf_cc3xx_platform_init+0x34>)
   20fa8:	6823      	ldr	r3, [r4, #0]
   20faa:	b113      	cbz	r3, 20fb2 <nrf_cc3xx_platform_init+0xe>
   20fac:	4b0b      	ldr	r3, [pc, #44]	; (20fdc <nrf_cc3xx_platform_init+0x38>)
   20fae:	681b      	ldr	r3, [r3, #0]
   20fb0:	b92b      	cbnz	r3, 20fbe <nrf_cc3xx_platform_init+0x1a>
   20fb2:	f000 f943 	bl	2123c <CC_LibInit>
   20fb6:	b930      	cbnz	r0, 20fc6 <nrf_cc3xx_platform_init+0x22>
   20fb8:	4b08      	ldr	r3, [pc, #32]	; (20fdc <nrf_cc3xx_platform_init+0x38>)
   20fba:	2201      	movs	r2, #1
   20fbc:	601a      	str	r2, [r3, #0]
   20fbe:	2301      	movs	r3, #1
   20fc0:	6023      	str	r3, [r4, #0]
   20fc2:	2000      	movs	r0, #0
   20fc4:	bd10      	pop	{r4, pc}
   20fc6:	3801      	subs	r0, #1
   20fc8:	2806      	cmp	r0, #6
   20fca:	d901      	bls.n	20fd0 <nrf_cc3xx_platform_init+0x2c>
   20fcc:	4804      	ldr	r0, [pc, #16]	; (20fe0 <nrf_cc3xx_platform_init+0x3c>)
   20fce:	bd10      	pop	{r4, pc}
   20fd0:	4b04      	ldr	r3, [pc, #16]	; (20fe4 <nrf_cc3xx_platform_init+0x40>)
   20fd2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   20fd6:	bd10      	pop	{r4, pc}
   20fd8:	20004348 	.word	0x20004348
   20fdc:	2000434c 	.word	0x2000434c
   20fe0:	ffff8ffe 	.word	0xffff8ffe
   20fe4:	00029ae0 	.word	0x00029ae0

00020fe8 <nrf_cc3xx_platform_abort>:
   20fe8:	f3bf 8f4f 	dsb	sy
   20fec:	4905      	ldr	r1, [pc, #20]	; (21004 <nrf_cc3xx_platform_abort+0x1c>)
   20fee:	4b06      	ldr	r3, [pc, #24]	; (21008 <nrf_cc3xx_platform_abort+0x20>)
   20ff0:	68ca      	ldr	r2, [r1, #12]
   20ff2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20ff6:	4313      	orrs	r3, r2
   20ff8:	60cb      	str	r3, [r1, #12]
   20ffa:	f3bf 8f4f 	dsb	sy
   20ffe:	bf00      	nop
   21000:	e7fd      	b.n	20ffe <nrf_cc3xx_platform_abort+0x16>
   21002:	bf00      	nop
   21004:	e000ed00 	.word	0xe000ed00
   21008:	05fa0004 	.word	0x05fa0004

0002100c <CC_PalAbort>:
   2100c:	b4f0      	push	{r4, r5, r6, r7}
   2100e:	4f09      	ldr	r7, [pc, #36]	; (21034 <CC_PalAbort+0x28>)
   21010:	4e09      	ldr	r6, [pc, #36]	; (21038 <CC_PalAbort+0x2c>)
   21012:	4c0a      	ldr	r4, [pc, #40]	; (2103c <CC_PalAbort+0x30>)
   21014:	4a0a      	ldr	r2, [pc, #40]	; (21040 <CC_PalAbort+0x34>)
   21016:	4d0b      	ldr	r5, [pc, #44]	; (21044 <CC_PalAbort+0x38>)
   21018:	490b      	ldr	r1, [pc, #44]	; (21048 <CC_PalAbort+0x3c>)
   2101a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   2101e:	603b      	str	r3, [r7, #0]
   21020:	6852      	ldr	r2, [r2, #4]
   21022:	6033      	str	r3, [r6, #0]
   21024:	6023      	str	r3, [r4, #0]
   21026:	2400      	movs	r4, #0
   21028:	602b      	str	r3, [r5, #0]
   2102a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   2102e:	bcf0      	pop	{r4, r5, r6, r7}
   21030:	4710      	bx	r2
   21032:	bf00      	nop
   21034:	5002b400 	.word	0x5002b400
   21038:	5002b404 	.word	0x5002b404
   2103c:	5002b408 	.word	0x5002b408
   21040:	20000cbc 	.word	0x20000cbc
   21044:	5002b40c 	.word	0x5002b40c
   21048:	5002a000 	.word	0x5002a000

0002104c <nrf_cc3xx_platform_set_abort>:
   2104c:	e9d0 1200 	ldrd	r1, r2, [r0]
   21050:	4b01      	ldr	r3, [pc, #4]	; (21058 <nrf_cc3xx_platform_set_abort+0xc>)
   21052:	e9c3 1200 	strd	r1, r2, [r3]
   21056:	4770      	bx	lr
   21058:	20000cbc 	.word	0x20000cbc

0002105c <nrf_cc3xx_platform_entropy_get>:
   2105c:	2990      	cmp	r1, #144	; 0x90
   2105e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21062:	460c      	mov	r4, r1
   21064:	4607      	mov	r7, r0
   21066:	4616      	mov	r6, r2
   21068:	d917      	bls.n	2109a <nrf_cc3xx_platform_entropy_get+0x3e>
   2106a:	2500      	movs	r5, #0
   2106c:	e003      	b.n	21076 <nrf_cc3xx_platform_entropy_get+0x1a>
   2106e:	6831      	ldr	r1, [r6, #0]
   21070:	1a64      	subs	r4, r4, r1
   21072:	440d      	add	r5, r1
   21074:	d00e      	beq.n	21094 <nrf_cc3xx_platform_entropy_get+0x38>
   21076:	2c90      	cmp	r4, #144	; 0x90
   21078:	4622      	mov	r2, r4
   2107a:	4633      	mov	r3, r6
   2107c:	bf28      	it	cs
   2107e:	2290      	movcs	r2, #144	; 0x90
   21080:	1979      	adds	r1, r7, r5
   21082:	2000      	movs	r0, #0
   21084:	f000 fd26 	bl	21ad4 <mbedtls_hardware_poll>
   21088:	2800      	cmp	r0, #0
   2108a:	d0f0      	beq.n	2106e <nrf_cc3xx_platform_entropy_get+0x12>
   2108c:	2300      	movs	r3, #0
   2108e:	6033      	str	r3, [r6, #0]
   21090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21094:	6035      	str	r5, [r6, #0]
   21096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2109a:	4613      	mov	r3, r2
   2109c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   210a0:	460a      	mov	r2, r1
   210a2:	4601      	mov	r1, r0
   210a4:	2000      	movs	r0, #0
   210a6:	f000 bd15 	b.w	21ad4 <mbedtls_hardware_poll>
   210aa:	bf00      	nop

000210ac <mutex_unlock>:
   210ac:	b148      	cbz	r0, 210c2 <mutex_unlock+0x16>
   210ae:	6843      	ldr	r3, [r0, #4]
   210b0:	b12b      	cbz	r3, 210be <mutex_unlock+0x12>
   210b2:	f3bf 8f5f 	dmb	sy
   210b6:	2300      	movs	r3, #0
   210b8:	6003      	str	r3, [r0, #0]
   210ba:	4618      	mov	r0, r3
   210bc:	4770      	bx	lr
   210be:	4802      	ldr	r0, [pc, #8]	; (210c8 <mutex_unlock+0x1c>)
   210c0:	4770      	bx	lr
   210c2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   210c6:	4770      	bx	lr
   210c8:	ffff8fea 	.word	0xffff8fea

000210cc <mutex_free>:
   210cc:	b510      	push	{r4, lr}
   210ce:	4604      	mov	r4, r0
   210d0:	b128      	cbz	r0, 210de <mutex_free+0x12>
   210d2:	6863      	ldr	r3, [r4, #4]
   210d4:	b113      	cbz	r3, 210dc <mutex_free+0x10>
   210d6:	2300      	movs	r3, #0
   210d8:	6023      	str	r3, [r4, #0]
   210da:	6063      	str	r3, [r4, #4]
   210dc:	bd10      	pop	{r4, pc}
   210de:	4b02      	ldr	r3, [pc, #8]	; (210e8 <mutex_free+0x1c>)
   210e0:	4802      	ldr	r0, [pc, #8]	; (210ec <mutex_free+0x20>)
   210e2:	685b      	ldr	r3, [r3, #4]
   210e4:	4798      	blx	r3
   210e6:	e7f4      	b.n	210d2 <mutex_free+0x6>
   210e8:	20000cbc 	.word	0x20000cbc
   210ec:	00029afc 	.word	0x00029afc

000210f0 <mutex_init>:
   210f0:	b510      	push	{r4, lr}
   210f2:	4604      	mov	r4, r0
   210f4:	b130      	cbz	r0, 21104 <mutex_init+0x14>
   210f6:	6863      	ldr	r3, [r4, #4]
   210f8:	2200      	movs	r2, #0
   210fa:	f043 0301 	orr.w	r3, r3, #1
   210fe:	6063      	str	r3, [r4, #4]
   21100:	6022      	str	r2, [r4, #0]
   21102:	bd10      	pop	{r4, pc}
   21104:	4801      	ldr	r0, [pc, #4]	; (2110c <mutex_init+0x1c>)
   21106:	f7ff ff81 	bl	2100c <CC_PalAbort>
   2110a:	e7f4      	b.n	210f6 <mutex_init+0x6>
   2110c:	00029b24 	.word	0x00029b24

00021110 <mutex_lock>:
   21110:	b1a0      	cbz	r0, 2113c <mutex_lock+0x2c>
   21112:	6843      	ldr	r3, [r0, #4]
   21114:	b183      	cbz	r3, 21138 <mutex_lock+0x28>
   21116:	2201      	movs	r2, #1
   21118:	f3bf 8f5b 	dmb	ish
   2111c:	e850 3f00 	ldrex	r3, [r0]
   21120:	e840 2100 	strex	r1, r2, [r0]
   21124:	2900      	cmp	r1, #0
   21126:	d1f9      	bne.n	2111c <mutex_lock+0xc>
   21128:	f3bf 8f5b 	dmb	ish
   2112c:	2b01      	cmp	r3, #1
   2112e:	d0f3      	beq.n	21118 <mutex_lock+0x8>
   21130:	f3bf 8f5f 	dmb	sy
   21134:	2000      	movs	r0, #0
   21136:	4770      	bx	lr
   21138:	4802      	ldr	r0, [pc, #8]	; (21144 <mutex_lock+0x34>)
   2113a:	4770      	bx	lr
   2113c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   21140:	4770      	bx	lr
   21142:	bf00      	nop
   21144:	ffff8fea 	.word	0xffff8fea

00021148 <nrf_cc3xx_platform_set_mutexes>:
   21148:	b470      	push	{r4, r5, r6}
   2114a:	e9d0 6500 	ldrd	r6, r5, [r0]
   2114e:	e9d0 4202 	ldrd	r4, r2, [r0, #8]
   21152:	4b09      	ldr	r3, [pc, #36]	; (21178 <nrf_cc3xx_platform_set_mutexes+0x30>)
   21154:	e9c3 4202 	strd	r4, r2, [r3, #8]
   21158:	e9c3 6500 	strd	r6, r5, [r3]
   2115c:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
   21160:	e9d1 6500 	ldrd	r6, r5, [r1]
   21164:	4b05      	ldr	r3, [pc, #20]	; (2117c <nrf_cc3xx_platform_set_mutexes+0x34>)
   21166:	690a      	ldr	r2, [r1, #16]
   21168:	611a      	str	r2, [r3, #16]
   2116a:	e9c3 6500 	strd	r6, r5, [r3]
   2116e:	e9c3 4002 	strd	r4, r0, [r3, #8]
   21172:	bc70      	pop	{r4, r5, r6}
   21174:	4770      	bx	lr
   21176:	bf00      	nop
   21178:	20000ccc 	.word	0x20000ccc
   2117c:	20000cdc 	.word	0x20000cdc

00021180 <CC_LibInitRngModule>:
   21180:	b530      	push	{r4, r5, lr}
   21182:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   21186:	f44f 7208 	mov.w	r2, #544	; 0x220
   2118a:	2100      	movs	r1, #0
   2118c:	a80c      	add	r0, sp, #48	; 0x30
   2118e:	f003 f808 	bl	241a2 <memset>
   21192:	2100      	movs	r1, #0
   21194:	a802      	add	r0, sp, #8
   21196:	2228      	movs	r2, #40	; 0x28
   21198:	9101      	str	r1, [sp, #4]
   2119a:	f003 f802 	bl	241a2 <memset>
   2119e:	a802      	add	r0, sp, #8
   211a0:	f000 fcee 	bl	21b80 <RNG_PLAT_SetUserRngParameters>
   211a4:	b120      	cbz	r0, 211b0 <CC_LibInitRngModule+0x30>
   211a6:	2405      	movs	r4, #5
   211a8:	4620      	mov	r0, r4
   211aa:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   211ae:	bd30      	pop	{r4, r5, pc}
   211b0:	4d1d      	ldr	r5, [pc, #116]	; (21228 <CC_LibInitRngModule+0xa8>)
   211b2:	f04f 31ff 	mov.w	r1, #4294967295
   211b6:	6828      	ldr	r0, [r5, #0]
   211b8:	f000 f918 	bl	213ec <CC_PalMutexLock>
   211bc:	4604      	mov	r4, r0
   211be:	b9e8      	cbnz	r0, 211fc <CC_LibInitRngModule+0x7c>
   211c0:	2000      	movs	r0, #0
   211c2:	f000 f943 	bl	2144c <CC_PalPowerSaveModeSelect>
   211c6:	bb58      	cbnz	r0, 21220 <CC_LibInitRngModule+0xa0>
   211c8:	aa0c      	add	r2, sp, #48	; 0x30
   211ca:	a902      	add	r1, sp, #8
   211cc:	a801      	add	r0, sp, #4
   211ce:	f000 fc73 	bl	21ab8 <LLF_RND_RunTrngStartupTest>
   211d2:	4604      	mov	r4, r0
   211d4:	2001      	movs	r0, #1
   211d6:	f000 f939 	bl	2144c <CC_PalPowerSaveModeSelect>
   211da:	b9e8      	cbnz	r0, 21218 <CC_LibInitRngModule+0x98>
   211dc:	6828      	ldr	r0, [r5, #0]
   211de:	f000 f90d 	bl	213fc <CC_PalMutexUnlock>
   211e2:	b928      	cbnz	r0, 211f0 <CC_LibInitRngModule+0x70>
   211e4:	2c00      	cmp	r4, #0
   211e6:	d1de      	bne.n	211a6 <CC_LibInitRngModule+0x26>
   211e8:	4620      	mov	r0, r4
   211ea:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   211ee:	bd30      	pop	{r4, r5, pc}
   211f0:	480e      	ldr	r0, [pc, #56]	; (2122c <CC_LibInitRngModule+0xac>)
   211f2:	f7ff ff0b 	bl	2100c <CC_PalAbort>
   211f6:	2c00      	cmp	r4, #0
   211f8:	d0f6      	beq.n	211e8 <CC_LibInitRngModule+0x68>
   211fa:	e7d4      	b.n	211a6 <CC_LibInitRngModule+0x26>
   211fc:	480c      	ldr	r0, [pc, #48]	; (21230 <CC_LibInitRngModule+0xb0>)
   211fe:	f7ff ff05 	bl	2100c <CC_PalAbort>
   21202:	2c01      	cmp	r4, #1
   21204:	d1dc      	bne.n	211c0 <CC_LibInitRngModule+0x40>
   21206:	6828      	ldr	r0, [r5, #0]
   21208:	f000 f8f8 	bl	213fc <CC_PalMutexUnlock>
   2120c:	2800      	cmp	r0, #0
   2120e:	d0ca      	beq.n	211a6 <CC_LibInitRngModule+0x26>
   21210:	4806      	ldr	r0, [pc, #24]	; (2122c <CC_LibInitRngModule+0xac>)
   21212:	f7ff fefb 	bl	2100c <CC_PalAbort>
   21216:	e7c6      	b.n	211a6 <CC_LibInitRngModule+0x26>
   21218:	4806      	ldr	r0, [pc, #24]	; (21234 <CC_LibInitRngModule+0xb4>)
   2121a:	f7ff fef7 	bl	2100c <CC_PalAbort>
   2121e:	e7dd      	b.n	211dc <CC_LibInitRngModule+0x5c>
   21220:	4805      	ldr	r0, [pc, #20]	; (21238 <CC_LibInitRngModule+0xb8>)
   21222:	f7ff fef3 	bl	2100c <CC_PalAbort>
   21226:	e7cf      	b.n	211c8 <CC_LibInitRngModule+0x48>
   21228:	20000d18 	.word	0x20000d18
   2122c:	00029b60 	.word	0x00029b60
   21230:	00029b48 	.word	0x00029b48
   21234:	00029b98 	.word	0x00029b98
   21238:	00029b78 	.word	0x00029b78

0002123c <CC_LibInit>:
   2123c:	b508      	push	{r3, lr}
   2123e:	f000 f83d 	bl	212bc <CC_HalInit>
   21242:	b118      	cbz	r0, 2124c <CC_LibInit+0x10>
   21244:	f000 f886 	bl	21354 <CC_PalTerminate>
   21248:	2003      	movs	r0, #3
   2124a:	bd08      	pop	{r3, pc}
   2124c:	f000 f854 	bl	212f8 <CC_PalInit>
   21250:	b9c0      	cbnz	r0, 21284 <CC_LibInit+0x48>
   21252:	f000 f8fb 	bl	2144c <CC_PalPowerSaveModeSelect>
   21256:	b9b8      	cbnz	r0, 21288 <CC_LibInit+0x4c>
   21258:	4b14      	ldr	r3, [pc, #80]	; (212ac <CC_LibInit+0x70>)
   2125a:	681b      	ldr	r3, [r3, #0]
   2125c:	0e1b      	lsrs	r3, r3, #24
   2125e:	2bf0      	cmp	r3, #240	; 0xf0
   21260:	d10a      	bne.n	21278 <CC_LibInit+0x3c>
   21262:	4a13      	ldr	r2, [pc, #76]	; (212b0 <CC_LibInit+0x74>)
   21264:	4b13      	ldr	r3, [pc, #76]	; (212b4 <CC_LibInit+0x78>)
   21266:	6812      	ldr	r2, [r2, #0]
   21268:	429a      	cmp	r2, r3
   2126a:	d017      	beq.n	2129c <CC_LibInit+0x60>
   2126c:	f000 f828 	bl	212c0 <CC_HalTerminate>
   21270:	f000 f870 	bl	21354 <CC_PalTerminate>
   21274:	2007      	movs	r0, #7
   21276:	bd08      	pop	{r3, pc}
   21278:	f000 f822 	bl	212c0 <CC_HalTerminate>
   2127c:	f000 f86a 	bl	21354 <CC_PalTerminate>
   21280:	2006      	movs	r0, #6
   21282:	bd08      	pop	{r3, pc}
   21284:	2004      	movs	r0, #4
   21286:	bd08      	pop	{r3, pc}
   21288:	f000 f81a 	bl	212c0 <CC_HalTerminate>
   2128c:	f000 f862 	bl	21354 <CC_PalTerminate>
   21290:	f7ff ff76 	bl	21180 <CC_LibInitRngModule>
   21294:	2800      	cmp	r0, #0
   21296:	bf18      	it	ne
   21298:	2005      	movne	r0, #5
   2129a:	bd08      	pop	{r3, pc}
   2129c:	2001      	movs	r0, #1
   2129e:	f000 f8d5 	bl	2144c <CC_PalPowerSaveModeSelect>
   212a2:	2800      	cmp	r0, #0
   212a4:	d1f0      	bne.n	21288 <CC_LibInit+0x4c>
   212a6:	4b04      	ldr	r3, [pc, #16]	; (212b8 <CC_LibInit+0x7c>)
   212a8:	6018      	str	r0, [r3, #0]
   212aa:	e7f1      	b.n	21290 <CC_LibInit+0x54>
   212ac:	5002b928 	.word	0x5002b928
   212b0:	5002ba24 	.word	0x5002ba24
   212b4:	20e00000 	.word	0x20e00000
   212b8:	5002ba0c 	.word	0x5002ba0c

000212bc <CC_HalInit>:
   212bc:	2000      	movs	r0, #0
   212be:	4770      	bx	lr

000212c0 <CC_HalTerminate>:
   212c0:	2000      	movs	r0, #0
   212c2:	4770      	bx	lr

000212c4 <CC_HalClearInterruptBit>:
   212c4:	0543      	lsls	r3, r0, #21
   212c6:	d503      	bpl.n	212d0 <CC_HalClearInterruptBit+0xc>
   212c8:	4b03      	ldr	r3, [pc, #12]	; (212d8 <CC_HalClearInterruptBit+0x14>)
   212ca:	f04f 32ff 	mov.w	r2, #4294967295
   212ce:	601a      	str	r2, [r3, #0]
   212d0:	4b02      	ldr	r3, [pc, #8]	; (212dc <CC_HalClearInterruptBit+0x18>)
   212d2:	6018      	str	r0, [r3, #0]
   212d4:	4770      	bx	lr
   212d6:	bf00      	nop
   212d8:	5002b108 	.word	0x5002b108
   212dc:	5002ba08 	.word	0x5002ba08

000212e0 <CC_HalMaskInterrupt>:
   212e0:	4b01      	ldr	r3, [pc, #4]	; (212e8 <CC_HalMaskInterrupt+0x8>)
   212e2:	6018      	str	r0, [r3, #0]
   212e4:	4770      	bx	lr
   212e6:	bf00      	nop
   212e8:	5002ba04 	.word	0x5002ba04

000212ec <CC_HalWaitInterruptRND>:
   212ec:	b108      	cbz	r0, 212f2 <CC_HalWaitInterruptRND+0x6>
   212ee:	f000 b84f 	b.w	21390 <CC_PalWaitInterruptRND>
   212f2:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   212f6:	4770      	bx	lr

000212f8 <CC_PalInit>:
   212f8:	b510      	push	{r4, lr}
   212fa:	4811      	ldr	r0, [pc, #68]	; (21340 <CC_PalInit+0x48>)
   212fc:	f000 f862 	bl	213c4 <CC_PalMutexCreate>
   21300:	b100      	cbz	r0, 21304 <CC_PalInit+0xc>
   21302:	bd10      	pop	{r4, pc}
   21304:	480f      	ldr	r0, [pc, #60]	; (21344 <CC_PalInit+0x4c>)
   21306:	f000 f85d 	bl	213c4 <CC_PalMutexCreate>
   2130a:	2800      	cmp	r0, #0
   2130c:	d1f9      	bne.n	21302 <CC_PalInit+0xa>
   2130e:	4c0e      	ldr	r4, [pc, #56]	; (21348 <CC_PalInit+0x50>)
   21310:	4620      	mov	r0, r4
   21312:	f000 f857 	bl	213c4 <CC_PalMutexCreate>
   21316:	2800      	cmp	r0, #0
   21318:	d1f3      	bne.n	21302 <CC_PalInit+0xa>
   2131a:	4b0c      	ldr	r3, [pc, #48]	; (2134c <CC_PalInit+0x54>)
   2131c:	480c      	ldr	r0, [pc, #48]	; (21350 <CC_PalInit+0x58>)
   2131e:	601c      	str	r4, [r3, #0]
   21320:	f000 f850 	bl	213c4 <CC_PalMutexCreate>
   21324:	4601      	mov	r1, r0
   21326:	2800      	cmp	r0, #0
   21328:	d1eb      	bne.n	21302 <CC_PalInit+0xa>
   2132a:	f000 f82d 	bl	21388 <CC_PalDmaInit>
   2132e:	4604      	mov	r4, r0
   21330:	b108      	cbz	r0, 21336 <CC_PalInit+0x3e>
   21332:	4620      	mov	r0, r4
   21334:	bd10      	pop	{r4, pc}
   21336:	f000 f86b 	bl	21410 <CC_PalPowerSaveModeInit>
   2133a:	4620      	mov	r0, r4
   2133c:	e7fa      	b.n	21334 <CC_PalInit+0x3c>
   2133e:	bf00      	nop
   21340:	20000d14 	.word	0x20000d14
   21344:	20000d08 	.word	0x20000d08
   21348:	20000d10 	.word	0x20000d10
   2134c:	20000d18 	.word	0x20000d18
   21350:	20000d0c 	.word	0x20000d0c

00021354 <CC_PalTerminate>:
   21354:	b508      	push	{r3, lr}
   21356:	4808      	ldr	r0, [pc, #32]	; (21378 <CC_PalTerminate+0x24>)
   21358:	f000 f83e 	bl	213d8 <CC_PalMutexDestroy>
   2135c:	4807      	ldr	r0, [pc, #28]	; (2137c <CC_PalTerminate+0x28>)
   2135e:	f000 f83b 	bl	213d8 <CC_PalMutexDestroy>
   21362:	4807      	ldr	r0, [pc, #28]	; (21380 <CC_PalTerminate+0x2c>)
   21364:	f000 f838 	bl	213d8 <CC_PalMutexDestroy>
   21368:	4806      	ldr	r0, [pc, #24]	; (21384 <CC_PalTerminate+0x30>)
   2136a:	f000 f835 	bl	213d8 <CC_PalMutexDestroy>
   2136e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   21372:	f000 b80b 	b.w	2138c <CC_PalDmaTerminate>
   21376:	bf00      	nop
   21378:	20000d14 	.word	0x20000d14
   2137c:	20000d08 	.word	0x20000d08
   21380:	20000d10 	.word	0x20000d10
   21384:	20000d0c 	.word	0x20000d0c

00021388 <CC_PalDmaInit>:
   21388:	2000      	movs	r0, #0
   2138a:	4770      	bx	lr

0002138c <CC_PalDmaTerminate>:
   2138c:	4770      	bx	lr
   2138e:	bf00      	nop

00021390 <CC_PalWaitInterruptRND>:
   21390:	b410      	push	{r4}
   21392:	4c08      	ldr	r4, [pc, #32]	; (213b4 <CC_PalWaitInterruptRND+0x24>)
   21394:	4602      	mov	r2, r0
   21396:	6823      	ldr	r3, [r4, #0]
   21398:	4213      	tst	r3, r2
   2139a:	d0fc      	beq.n	21396 <CC_PalWaitInterruptRND+0x6>
   2139c:	b121      	cbz	r1, 213a8 <CC_PalWaitInterruptRND+0x18>
   2139e:	4b06      	ldr	r3, [pc, #24]	; (213b8 <CC_PalWaitInterruptRND+0x28>)
   213a0:	4806      	ldr	r0, [pc, #24]	; (213bc <CC_PalWaitInterruptRND+0x2c>)
   213a2:	681b      	ldr	r3, [r3, #0]
   213a4:	600b      	str	r3, [r1, #0]
   213a6:	6003      	str	r3, [r0, #0]
   213a8:	4b05      	ldr	r3, [pc, #20]	; (213c0 <CC_PalWaitInterruptRND+0x30>)
   213aa:	601a      	str	r2, [r3, #0]
   213ac:	2000      	movs	r0, #0
   213ae:	bc10      	pop	{r4}
   213b0:	4770      	bx	lr
   213b2:	bf00      	nop
   213b4:	5002ba00 	.word	0x5002ba00
   213b8:	5002b104 	.word	0x5002b104
   213bc:	5002b108 	.word	0x5002b108
   213c0:	5002ba08 	.word	0x5002ba08

000213c4 <CC_PalMutexCreate>:
   213c4:	b508      	push	{r3, lr}
   213c6:	4b03      	ldr	r3, [pc, #12]	; (213d4 <CC_PalMutexCreate+0x10>)
   213c8:	6802      	ldr	r2, [r0, #0]
   213ca:	681b      	ldr	r3, [r3, #0]
   213cc:	6810      	ldr	r0, [r2, #0]
   213ce:	4798      	blx	r3
   213d0:	2000      	movs	r0, #0
   213d2:	bd08      	pop	{r3, pc}
   213d4:	20000ccc 	.word	0x20000ccc

000213d8 <CC_PalMutexDestroy>:
   213d8:	b508      	push	{r3, lr}
   213da:	4b03      	ldr	r3, [pc, #12]	; (213e8 <CC_PalMutexDestroy+0x10>)
   213dc:	6802      	ldr	r2, [r0, #0]
   213de:	685b      	ldr	r3, [r3, #4]
   213e0:	6810      	ldr	r0, [r2, #0]
   213e2:	4798      	blx	r3
   213e4:	2000      	movs	r0, #0
   213e6:	bd08      	pop	{r3, pc}
   213e8:	20000ccc 	.word	0x20000ccc

000213ec <CC_PalMutexLock>:
   213ec:	4b02      	ldr	r3, [pc, #8]	; (213f8 <CC_PalMutexLock+0xc>)
   213ee:	6802      	ldr	r2, [r0, #0]
   213f0:	689b      	ldr	r3, [r3, #8]
   213f2:	6810      	ldr	r0, [r2, #0]
   213f4:	4718      	bx	r3
   213f6:	bf00      	nop
   213f8:	20000ccc 	.word	0x20000ccc

000213fc <CC_PalMutexUnlock>:
   213fc:	b508      	push	{r3, lr}
   213fe:	4b03      	ldr	r3, [pc, #12]	; (2140c <CC_PalMutexUnlock+0x10>)
   21400:	6802      	ldr	r2, [r0, #0]
   21402:	68db      	ldr	r3, [r3, #12]
   21404:	6810      	ldr	r0, [r2, #0]
   21406:	4798      	blx	r3
   21408:	2000      	movs	r0, #0
   2140a:	bd08      	pop	{r3, pc}
   2140c:	20000ccc 	.word	0x20000ccc

00021410 <CC_PalPowerSaveModeInit>:
   21410:	b570      	push	{r4, r5, r6, lr}
   21412:	4c09      	ldr	r4, [pc, #36]	; (21438 <CC_PalPowerSaveModeInit+0x28>)
   21414:	4d09      	ldr	r5, [pc, #36]	; (2143c <CC_PalPowerSaveModeInit+0x2c>)
   21416:	6920      	ldr	r0, [r4, #16]
   21418:	68ab      	ldr	r3, [r5, #8]
   2141a:	4798      	blx	r3
   2141c:	b118      	cbz	r0, 21426 <CC_PalPowerSaveModeInit+0x16>
   2141e:	4b08      	ldr	r3, [pc, #32]	; (21440 <CC_PalPowerSaveModeInit+0x30>)
   21420:	4808      	ldr	r0, [pc, #32]	; (21444 <CC_PalPowerSaveModeInit+0x34>)
   21422:	685b      	ldr	r3, [r3, #4]
   21424:	4798      	blx	r3
   21426:	4a08      	ldr	r2, [pc, #32]	; (21448 <CC_PalPowerSaveModeInit+0x38>)
   21428:	68eb      	ldr	r3, [r5, #12]
   2142a:	6920      	ldr	r0, [r4, #16]
   2142c:	2100      	movs	r1, #0
   2142e:	6011      	str	r1, [r2, #0]
   21430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21434:	4718      	bx	r3
   21436:	bf00      	nop
   21438:	20000cdc 	.word	0x20000cdc
   2143c:	20000ccc 	.word	0x20000ccc
   21440:	20000cbc 	.word	0x20000cbc
   21444:	00029bb8 	.word	0x00029bb8
   21448:	20004360 	.word	0x20004360

0002144c <CC_PalPowerSaveModeSelect>:
   2144c:	b570      	push	{r4, r5, r6, lr}
   2144e:	4d1a      	ldr	r5, [pc, #104]	; (214b8 <CC_PalPowerSaveModeSelect+0x6c>)
   21450:	4e1a      	ldr	r6, [pc, #104]	; (214bc <CC_PalPowerSaveModeSelect+0x70>)
   21452:	4604      	mov	r4, r0
   21454:	68b2      	ldr	r2, [r6, #8]
   21456:	6928      	ldr	r0, [r5, #16]
   21458:	4790      	blx	r2
   2145a:	b9f0      	cbnz	r0, 2149a <CC_PalPowerSaveModeSelect+0x4e>
   2145c:	b15c      	cbz	r4, 21476 <CC_PalPowerSaveModeSelect+0x2a>
   2145e:	4c18      	ldr	r4, [pc, #96]	; (214c0 <CC_PalPowerSaveModeSelect+0x74>)
   21460:	6823      	ldr	r3, [r4, #0]
   21462:	b1ab      	cbz	r3, 21490 <CC_PalPowerSaveModeSelect+0x44>
   21464:	2b01      	cmp	r3, #1
   21466:	d01a      	beq.n	2149e <CC_PalPowerSaveModeSelect+0x52>
   21468:	3b01      	subs	r3, #1
   2146a:	6023      	str	r3, [r4, #0]
   2146c:	6928      	ldr	r0, [r5, #16]
   2146e:	68f3      	ldr	r3, [r6, #12]
   21470:	4798      	blx	r3
   21472:	2000      	movs	r0, #0
   21474:	bd70      	pop	{r4, r5, r6, pc}
   21476:	4c12      	ldr	r4, [pc, #72]	; (214c0 <CC_PalPowerSaveModeSelect+0x74>)
   21478:	6821      	ldr	r1, [r4, #0]
   2147a:	b939      	cbnz	r1, 2148c <CC_PalPowerSaveModeSelect+0x40>
   2147c:	4b11      	ldr	r3, [pc, #68]	; (214c4 <CC_PalPowerSaveModeSelect+0x78>)
   2147e:	4a12      	ldr	r2, [pc, #72]	; (214c8 <CC_PalPowerSaveModeSelect+0x7c>)
   21480:	2001      	movs	r0, #1
   21482:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   21486:	6813      	ldr	r3, [r2, #0]
   21488:	2b00      	cmp	r3, #0
   2148a:	d1fc      	bne.n	21486 <CC_PalPowerSaveModeSelect+0x3a>
   2148c:	3101      	adds	r1, #1
   2148e:	6021      	str	r1, [r4, #0]
   21490:	68f3      	ldr	r3, [r6, #12]
   21492:	6928      	ldr	r0, [r5, #16]
   21494:	4798      	blx	r3
   21496:	2000      	movs	r0, #0
   21498:	bd70      	pop	{r4, r5, r6, pc}
   2149a:	480c      	ldr	r0, [pc, #48]	; (214cc <CC_PalPowerSaveModeSelect+0x80>)
   2149c:	bd70      	pop	{r4, r5, r6, pc}
   2149e:	4a0a      	ldr	r2, [pc, #40]	; (214c8 <CC_PalPowerSaveModeSelect+0x7c>)
   214a0:	6813      	ldr	r3, [r2, #0]
   214a2:	2b00      	cmp	r3, #0
   214a4:	d1fc      	bne.n	214a0 <CC_PalPowerSaveModeSelect+0x54>
   214a6:	4a07      	ldr	r2, [pc, #28]	; (214c4 <CC_PalPowerSaveModeSelect+0x78>)
   214a8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   214ac:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   214b0:	f7ff ff16 	bl	212e0 <CC_HalMaskInterrupt>
   214b4:	6823      	ldr	r3, [r4, #0]
   214b6:	e7d7      	b.n	21468 <CC_PalPowerSaveModeSelect+0x1c>
   214b8:	20000cdc 	.word	0x20000cdc
   214bc:	20000ccc 	.word	0x20000ccc
   214c0:	20004360 	.word	0x20004360
   214c4:	5002a000 	.word	0x5002a000
   214c8:	5002b910 	.word	0x5002b910
   214cc:	ffff8fe9 	.word	0xffff8fe9

000214d0 <startTrngHW>:
   214d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   214d4:	2800      	cmp	r0, #0
   214d6:	d076      	beq.n	215c6 <startTrngHW+0xf6>
   214d8:	460c      	mov	r4, r1
   214da:	2900      	cmp	r1, #0
   214dc:	d073      	beq.n	215c6 <startTrngHW+0xf6>
   214de:	461d      	mov	r5, r3
   214e0:	2b00      	cmp	r3, #0
   214e2:	d070      	beq.n	215c6 <startTrngHW+0xf6>
   214e4:	4606      	mov	r6, r0
   214e6:	b11a      	cbz	r2, 214f0 <startTrngHW+0x20>
   214e8:	2201      	movs	r2, #1
   214ea:	2300      	movs	r3, #0
   214ec:	602a      	str	r2, [r5, #0]
   214ee:	6003      	str	r3, [r0, #0]
   214f0:	682b      	ldr	r3, [r5, #0]
   214f2:	2b00      	cmp	r3, #0
   214f4:	d063      	beq.n	215be <startTrngHW+0xee>
   214f6:	4629      	mov	r1, r5
   214f8:	4620      	mov	r0, r4
   214fa:	f000 fc05 	bl	21d08 <LLF_RND_GetFastestRosc>
   214fe:	4607      	mov	r7, r0
   21500:	2800      	cmp	r0, #0
   21502:	d15d      	bne.n	215c0 <startTrngHW+0xf0>
   21504:	6828      	ldr	r0, [r5, #0]
   21506:	4621      	mov	r1, r4
   21508:	f000 fbe0 	bl	21ccc <LLF_RND_GetRoscSampleCnt>
   2150c:	4607      	mov	r7, r0
   2150e:	2800      	cmp	r0, #0
   21510:	d156      	bne.n	215c0 <startTrngHW+0xf0>
   21512:	682b      	ldr	r3, [r5, #0]
   21514:	2b08      	cmp	r3, #8
   21516:	d065      	beq.n	215e4 <startTrngHW+0x114>
   21518:	2b04      	cmp	r3, #4
   2151a:	d066      	beq.n	215ea <startTrngHW+0x11a>
   2151c:	f1a3 0802 	sub.w	r8, r3, #2
   21520:	fab8 f888 	clz	r8, r8
   21524:	ea4f 1858 	mov.w	r8, r8, lsr #5
   21528:	4b31      	ldr	r3, [pc, #196]	; (215f0 <startTrngHW+0x120>)
   2152a:	4932      	ldr	r1, [pc, #200]	; (215f4 <startTrngHW+0x124>)
   2152c:	4a32      	ldr	r2, [pc, #200]	; (215f8 <startTrngHW+0x128>)
   2152e:	2001      	movs	r0, #1
   21530:	6018      	str	r0, [r3, #0]
   21532:	469c      	mov	ip, r3
   21534:	6008      	str	r0, [r1, #0]
   21536:	f8cc 0000 	str.w	r0, [ip]
   2153a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2153c:	6013      	str	r3, [r2, #0]
   2153e:	6811      	ldr	r1, [r2, #0]
   21540:	428b      	cmp	r3, r1
   21542:	d1f8      	bne.n	21536 <startTrngHW+0x66>
   21544:	4b2d      	ldr	r3, [pc, #180]	; (215fc <startTrngHW+0x12c>)
   21546:	f04f 0900 	mov.w	r9, #0
   2154a:	f8c3 9000 	str.w	r9, [r3]
   2154e:	f04f 30ff 	mov.w	r0, #4294967295
   21552:	f7ff feb7 	bl	212c4 <CC_HalClearInterruptBit>
   21556:	4b2a      	ldr	r3, [pc, #168]	; (21600 <startTrngHW+0x130>)
   21558:	4a2a      	ldr	r2, [pc, #168]	; (21604 <startTrngHW+0x134>)
   2155a:	601a      	str	r2, [r3, #0]
   2155c:	4648      	mov	r0, r9
   2155e:	f7ff febf 	bl	212e0 <CC_HalMaskInterrupt>
   21562:	4a29      	ldr	r2, [pc, #164]	; (21608 <startTrngHW+0x138>)
   21564:	4b29      	ldr	r3, [pc, #164]	; (2160c <startTrngHW+0x13c>)
   21566:	f8c2 8000 	str.w	r8, [r2]
   2156a:	6818      	ldr	r0, [r3, #0]
   2156c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   21570:	f7ff feb6 	bl	212e0 <CC_HalMaskInterrupt>
   21574:	4b26      	ldr	r3, [pc, #152]	; (21610 <startTrngHW+0x140>)
   21576:	220a      	movs	r2, #10
   21578:	601a      	str	r2, [r3, #0]
   2157a:	9908      	ldr	r1, [sp, #32]
   2157c:	6923      	ldr	r3, [r4, #16]
   2157e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   21580:	2901      	cmp	r1, #1
   21582:	d024      	beq.n	215ce <startTrngHW+0xfe>
   21584:	4923      	ldr	r1, [pc, #140]	; (21614 <startTrngHW+0x144>)
   21586:	fba1 1303 	umull	r1, r3, r1, r3
   2158a:	091b      	lsrs	r3, r3, #4
   2158c:	fb03 f302 	mul.w	r3, r3, r2
   21590:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   21594:	4920      	ldr	r1, [pc, #128]	; (21618 <startTrngHW+0x148>)
   21596:	4a19      	ldr	r2, [pc, #100]	; (215fc <startTrngHW+0x12c>)
   21598:	03db      	lsls	r3, r3, #15
   2159a:	099b      	lsrs	r3, r3, #6
   2159c:	600b      	str	r3, [r1, #0]
   2159e:	2301      	movs	r3, #1
   215a0:	6013      	str	r3, [r2, #0]
   215a2:	6833      	ldr	r3, [r6, #0]
   215a4:	682a      	ldr	r2, [r5, #0]
   215a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   215aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   215ae:	6033      	str	r3, [r6, #0]
   215b0:	682a      	ldr	r2, [r5, #0]
   215b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   215b6:	6033      	str	r3, [r6, #0]
   215b8:	4638      	mov	r0, r7
   215ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   215be:	4f17      	ldr	r7, [pc, #92]	; (2161c <startTrngHW+0x14c>)
   215c0:	4638      	mov	r0, r7
   215c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   215c6:	4f16      	ldr	r7, [pc, #88]	; (21620 <startTrngHW+0x150>)
   215c8:	4638      	mov	r0, r7
   215ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   215ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   215d2:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   215d6:	3101      	adds	r1, #1
   215d8:	d002      	beq.n	215e0 <startTrngHW+0x110>
   215da:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   215de:	e7d1      	b.n	21584 <startTrngHW+0xb4>
   215e0:	2316      	movs	r3, #22
   215e2:	e7d3      	b.n	2158c <startTrngHW+0xbc>
   215e4:	f04f 0803 	mov.w	r8, #3
   215e8:	e79e      	b.n	21528 <startTrngHW+0x58>
   215ea:	f04f 0802 	mov.w	r8, #2
   215ee:	e79b      	b.n	21528 <startTrngHW+0x58>
   215f0:	5002b1c4 	.word	0x5002b1c4
   215f4:	5002b140 	.word	0x5002b140
   215f8:	5002b130 	.word	0x5002b130
   215fc:	5002b12c 	.word	0x5002b12c
   21600:	5002b100 	.word	0x5002b100
   21604:	0ffffffe 	.word	0x0ffffffe
   21608:	5002b10c 	.word	0x5002b10c
   2160c:	5002ba04 	.word	0x5002ba04
   21610:	5002b138 	.word	0x5002b138
   21614:	aaaaaaab 	.word	0xaaaaaaab
   21618:	5002b1d8 	.word	0x5002b1d8
   2161c:	00f10c31 	.word	0x00f10c31
   21620:	00f10c35 	.word	0x00f10c35

00021624 <LLF_RND_RepetitionCounterTest.part.0>:
   21624:	b4f0      	push	{r4, r5, r6, r7}
   21626:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   2162a:	2400      	movs	r4, #0
   2162c:	f10c 3cff 	add.w	ip, ip, #4294967295
   21630:	4626      	mov	r6, r4
   21632:	4627      	mov	r7, r4
   21634:	e006      	b.n	21644 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   21636:	429f      	cmp	r7, r3
   21638:	d016      	beq.n	21668 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   2163a:	2601      	movs	r6, #1
   2163c:	4565      	cmp	r5, ip
   2163e:	d819      	bhi.n	21674 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   21640:	462c      	mov	r4, r5
   21642:	461f      	mov	r7, r3
   21644:	0963      	lsrs	r3, r4, #5
   21646:	f004 011f 	and.w	r1, r4, #31
   2164a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2164e:	291f      	cmp	r1, #31
   21650:	fa23 f301 	lsr.w	r3, r3, r1
   21654:	f104 0501 	add.w	r5, r4, #1
   21658:	bf18      	it	ne
   2165a:	f003 0301 	andne.w	r3, r3, #1
   2165e:	2c00      	cmp	r4, #0
   21660:	d1e9      	bne.n	21636 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   21662:	2601      	movs	r6, #1
   21664:	4635      	mov	r5, r6
   21666:	e7eb      	b.n	21640 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   21668:	3601      	adds	r6, #1
   2166a:	4296      	cmp	r6, r2
   2166c:	d1e6      	bne.n	2163c <LLF_RND_RepetitionCounterTest.part.0+0x18>
   2166e:	4803      	ldr	r0, [pc, #12]	; (2167c <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   21670:	bcf0      	pop	{r4, r5, r6, r7}
   21672:	4770      	bx	lr
   21674:	2000      	movs	r0, #0
   21676:	bcf0      	pop	{r4, r5, r6, r7}
   21678:	4770      	bx	lr
   2167a:	bf00      	nop
   2167c:	00f10c36 	.word	0x00f10c36

00021680 <LLF_RND_AdaptiveProportionTest>:
   21680:	2800      	cmp	r0, #0
   21682:	d061      	beq.n	21748 <LLF_RND_AdaptiveProportionTest+0xc8>
   21684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21688:	1e4c      	subs	r4, r1, #1
   2168a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   2168e:	d227      	bcs.n	216e0 <LLF_RND_AdaptiveProportionTest+0x60>
   21690:	b333      	cbz	r3, 216e0 <LLF_RND_AdaptiveProportionTest+0x60>
   21692:	b32a      	cbz	r2, 216e0 <LLF_RND_AdaptiveProportionTest+0x60>
   21694:	00cd      	lsls	r5, r1, #3
   21696:	2b01      	cmp	r3, #1
   21698:	f105 3eff 	add.w	lr, r5, #4294967295
   2169c:	d030      	beq.n	21700 <LLF_RND_AdaptiveProportionTest+0x80>
   2169e:	2100      	movs	r1, #0
   216a0:	468c      	mov	ip, r1
   216a2:	460f      	mov	r7, r1
   216a4:	460e      	mov	r6, r1
   216a6:	f103 38ff 	add.w	r8, r3, #4294967295
   216aa:	094c      	lsrs	r4, r1, #5
   216ac:	f001 051f 	and.w	r5, r1, #31
   216b0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   216b4:	2d1f      	cmp	r5, #31
   216b6:	fa24 f405 	lsr.w	r4, r4, r5
   216ba:	bf18      	it	ne
   216bc:	f004 0401 	andne.w	r4, r4, #1
   216c0:	b921      	cbnz	r1, 216cc <LLF_RND_AdaptiveProportionTest+0x4c>
   216c2:	2601      	movs	r6, #1
   216c4:	46b4      	mov	ip, r6
   216c6:	4631      	mov	r1, r6
   216c8:	4627      	mov	r7, r4
   216ca:	e7ee      	b.n	216aa <LLF_RND_AdaptiveProportionTest+0x2a>
   216cc:	42b3      	cmp	r3, r6
   216ce:	d013      	beq.n	216f8 <LLF_RND_AdaptiveProportionTest+0x78>
   216d0:	42a7      	cmp	r7, r4
   216d2:	d101      	bne.n	216d8 <LLF_RND_AdaptiveProportionTest+0x58>
   216d4:	f10c 0c01 	add.w	ip, ip, #1
   216d8:	4546      	cmp	r6, r8
   216da:	d104      	bne.n	216e6 <LLF_RND_AdaptiveProportionTest+0x66>
   216dc:	4562      	cmp	r2, ip
   216de:	d202      	bcs.n	216e6 <LLF_RND_AdaptiveProportionTest+0x66>
   216e0:	481a      	ldr	r0, [pc, #104]	; (2174c <LLF_RND_AdaptiveProportionTest+0xcc>)
   216e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   216e6:	463c      	mov	r4, r7
   216e8:	3101      	adds	r1, #1
   216ea:	458e      	cmp	lr, r1
   216ec:	f106 0601 	add.w	r6, r6, #1
   216f0:	d2ea      	bcs.n	216c8 <LLF_RND_AdaptiveProportionTest+0x48>
   216f2:	2000      	movs	r0, #0
   216f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   216f8:	2600      	movs	r6, #0
   216fa:	f04f 0c01 	mov.w	ip, #1
   216fe:	e7f3      	b.n	216e8 <LLF_RND_AdaptiveProportionTest+0x68>
   21700:	2600      	movs	r6, #0
   21702:	46b4      	mov	ip, r6
   21704:	4637      	mov	r7, r6
   21706:	4634      	mov	r4, r6
   21708:	0961      	lsrs	r1, r4, #5
   2170a:	f004 031f 	and.w	r3, r4, #31
   2170e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   21712:	2b1f      	cmp	r3, #31
   21714:	fa21 f103 	lsr.w	r1, r1, r3
   21718:	bf18      	it	ne
   2171a:	f001 0101 	andne.w	r1, r1, #1
   2171e:	b13c      	cbz	r4, 21730 <LLF_RND_AdaptiveProportionTest+0xb0>
   21720:	b95f      	cbnz	r7, 2173a <LLF_RND_AdaptiveProportionTest+0xba>
   21722:	458c      	cmp	ip, r1
   21724:	d001      	beq.n	2172a <LLF_RND_AdaptiveProportionTest+0xaa>
   21726:	4661      	mov	r1, ip
   21728:	e008      	b.n	2173c <LLF_RND_AdaptiveProportionTest+0xbc>
   2172a:	3601      	adds	r6, #1
   2172c:	4661      	mov	r1, ip
   2172e:	e005      	b.n	2173c <LLF_RND_AdaptiveProportionTest+0xbc>
   21730:	2601      	movs	r6, #1
   21732:	4634      	mov	r4, r6
   21734:	468c      	mov	ip, r1
   21736:	2701      	movs	r7, #1
   21738:	e7e6      	b.n	21708 <LLF_RND_AdaptiveProportionTest+0x88>
   2173a:	463e      	mov	r6, r7
   2173c:	42b2      	cmp	r2, r6
   2173e:	d3cf      	bcc.n	216e0 <LLF_RND_AdaptiveProportionTest+0x60>
   21740:	3401      	adds	r4, #1
   21742:	42ac      	cmp	r4, r5
   21744:	d1f6      	bne.n	21734 <LLF_RND_AdaptiveProportionTest+0xb4>
   21746:	e7d4      	b.n	216f2 <LLF_RND_AdaptiveProportionTest+0x72>
   21748:	4800      	ldr	r0, [pc, #0]	; (2174c <LLF_RND_AdaptiveProportionTest+0xcc>)
   2174a:	4770      	bx	lr
   2174c:	00f10c37 	.word	0x00f10c37

00021750 <getTrngSource>:
   21750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21754:	b08d      	sub	sp, #52	; 0x34
   21756:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   2175a:	4607      	mov	r7, r0
   2175c:	460c      	mov	r4, r1
   2175e:	2d00      	cmp	r5, #0
   21760:	d14c      	bne.n	217fc <getTrngSource+0xac>
   21762:	f8d1 a010 	ldr.w	sl, [r1, #16]
   21766:	601e      	str	r6, [r3, #0]
   21768:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2176a:	2100      	movs	r1, #0
   2176c:	6019      	str	r1, [r3, #0]
   2176e:	2a00      	cmp	r2, #0
   21770:	f000 811b 	beq.w	219aa <getTrngSource+0x25a>
   21774:	4a99      	ldr	r2, [pc, #612]	; (219dc <getTrngSource+0x28c>)
   21776:	4b9a      	ldr	r3, [pc, #616]	; (219e0 <getTrngSource+0x290>)
   21778:	6811      	ldr	r1, [r2, #0]
   2177a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2177c:	681b      	ldr	r3, [r3, #0]
   2177e:	429a      	cmp	r2, r3
   21780:	d147      	bne.n	21812 <getTrngSource+0xc2>
   21782:	290a      	cmp	r1, #10
   21784:	d145      	bne.n	21812 <getTrngSource+0xc2>
   21786:	78fb      	ldrb	r3, [r7, #3]
   21788:	9304      	str	r3, [sp, #16]
   2178a:	4b96      	ldr	r3, [pc, #600]	; (219e4 <getTrngSource+0x294>)
   2178c:	fba3 230a 	umull	r2, r3, r3, sl
   21790:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   21794:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   21798:	f106 0208 	add.w	r2, r6, #8
   2179c:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   217a0:	2304      	movs	r3, #4
   217a2:	9203      	str	r2, [sp, #12]
   217a4:	9302      	str	r3, [sp, #8]
   217a6:	46b8      	mov	r8, r7
   217a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   217aa:	f8c3 a000 	str.w	sl, [r3]
   217ae:	f1ba 0f00 	cmp.w	sl, #0
   217b2:	f000 80c0 	beq.w	21936 <getTrngSource+0x1e6>
   217b6:	9e03      	ldr	r6, [sp, #12]
   217b8:	4655      	mov	r5, sl
   217ba:	f04f 0900 	mov.w	r9, #0
   217be:	f000 fab3 	bl	21d28 <LLF_RND_TurnOffTrng>
   217c2:	2300      	movs	r3, #0
   217c4:	9305      	str	r3, [sp, #20]
   217c6:	f1b8 0f00 	cmp.w	r8, #0
   217ca:	f000 80e2 	beq.w	21992 <getTrngSource+0x242>
   217ce:	2c00      	cmp	r4, #0
   217d0:	f000 80df 	beq.w	21992 <getTrngSource+0x242>
   217d4:	9b04      	ldr	r3, [sp, #16]
   217d6:	2b00      	cmp	r3, #0
   217d8:	f000 80d9 	beq.w	2198e <getTrngSource+0x23e>
   217dc:	a904      	add	r1, sp, #16
   217de:	4620      	mov	r0, r4
   217e0:	f000 fa92 	bl	21d08 <LLF_RND_GetFastestRosc>
   217e4:	b1b8      	cbz	r0, 21816 <getTrngSource+0xc6>
   217e6:	4b80      	ldr	r3, [pc, #512]	; (219e8 <getTrngSource+0x298>)
   217e8:	4298      	cmp	r0, r3
   217ea:	f040 80a4 	bne.w	21936 <getTrngSource+0x1e6>
   217ee:	9002      	str	r0, [sp, #8]
   217f0:	f000 fa9a 	bl	21d28 <LLF_RND_TurnOffTrng>
   217f4:	9802      	ldr	r0, [sp, #8]
   217f6:	b00d      	add	sp, #52	; 0x34
   217f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   21800:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   21804:	3001      	adds	r0, #1
   21806:	bf14      	ite	ne
   21808:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   2180c:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   21810:	e7a9      	b.n	21766 <getTrngSource+0x16>
   21812:	4876      	ldr	r0, [pc, #472]	; (219ec <getTrngSource+0x29c>)
   21814:	e7eb      	b.n	217ee <getTrngSource+0x9e>
   21816:	9804      	ldr	r0, [sp, #16]
   21818:	4621      	mov	r1, r4
   2181a:	f000 fa57 	bl	21ccc <LLF_RND_GetRoscSampleCnt>
   2181e:	2800      	cmp	r0, #0
   21820:	d1e1      	bne.n	217e6 <getTrngSource+0x96>
   21822:	9f04      	ldr	r7, [sp, #16]
   21824:	2f08      	cmp	r7, #8
   21826:	f000 80b6 	beq.w	21996 <getTrngSource+0x246>
   2182a:	2f04      	cmp	r7, #4
   2182c:	f000 80b5 	beq.w	2199a <getTrngSource+0x24a>
   21830:	f1a7 0702 	sub.w	r7, r7, #2
   21834:	fab7 f787 	clz	r7, r7
   21838:	097f      	lsrs	r7, r7, #5
   2183a:	496d      	ldr	r1, [pc, #436]	; (219f0 <getTrngSource+0x2a0>)
   2183c:	2301      	movs	r3, #1
   2183e:	600b      	str	r3, [r1, #0]
   21840:	f841 3c84 	str.w	r3, [r1, #-132]
   21844:	4619      	mov	r1, r3
   21846:	4b6a      	ldr	r3, [pc, #424]	; (219f0 <getTrngSource+0x2a0>)
   21848:	4865      	ldr	r0, [pc, #404]	; (219e0 <getTrngSource+0x290>)
   2184a:	6019      	str	r1, [r3, #0]
   2184c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2184e:	6003      	str	r3, [r0, #0]
   21850:	6800      	ldr	r0, [r0, #0]
   21852:	4283      	cmp	r3, r0
   21854:	d1f7      	bne.n	21846 <getTrngSource+0xf6>
   21856:	4a67      	ldr	r2, [pc, #412]	; (219f4 <getTrngSource+0x2a4>)
   21858:	2300      	movs	r3, #0
   2185a:	6013      	str	r3, [r2, #0]
   2185c:	f04f 30ff 	mov.w	r0, #4294967295
   21860:	f7ff fd30 	bl	212c4 <CC_HalClearInterruptBit>
   21864:	4864      	ldr	r0, [pc, #400]	; (219f8 <getTrngSource+0x2a8>)
   21866:	4965      	ldr	r1, [pc, #404]	; (219fc <getTrngSource+0x2ac>)
   21868:	6001      	str	r1, [r0, #0]
   2186a:	2300      	movs	r3, #0
   2186c:	4618      	mov	r0, r3
   2186e:	f7ff fd37 	bl	212e0 <CC_HalMaskInterrupt>
   21872:	4963      	ldr	r1, [pc, #396]	; (21a00 <getTrngSource+0x2b0>)
   21874:	4b63      	ldr	r3, [pc, #396]	; (21a04 <getTrngSource+0x2b4>)
   21876:	600f      	str	r7, [r1, #0]
   21878:	6818      	ldr	r0, [r3, #0]
   2187a:	4f5a      	ldr	r7, [pc, #360]	; (219e4 <getTrngSource+0x294>)
   2187c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   21880:	f7ff fd2e 	bl	212e0 <CC_HalMaskInterrupt>
   21884:	4b55      	ldr	r3, [pc, #340]	; (219dc <getTrngSource+0x28c>)
   21886:	4860      	ldr	r0, [pc, #384]	; (21a08 <getTrngSource+0x2b8>)
   21888:	210a      	movs	r1, #10
   2188a:	6019      	str	r1, [r3, #0]
   2188c:	6921      	ldr	r1, [r4, #16]
   2188e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21890:	fba7 c101 	umull	ip, r1, r7, r1
   21894:	0909      	lsrs	r1, r1, #4
   21896:	fb03 f301 	mul.w	r3, r3, r1
   2189a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2189e:	03db      	lsls	r3, r3, #15
   218a0:	099b      	lsrs	r3, r3, #6
   218a2:	6003      	str	r3, [r0, #0]
   218a4:	4b53      	ldr	r3, [pc, #332]	; (219f4 <getTrngSource+0x2a4>)
   218a6:	2201      	movs	r2, #1
   218a8:	601a      	str	r2, [r3, #0]
   218aa:	9904      	ldr	r1, [sp, #16]
   218ac:	f8d8 2000 	ldr.w	r2, [r8]
   218b0:	020b      	lsls	r3, r1, #8
   218b2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   218b6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   218ba:	4313      	orrs	r3, r2
   218bc:	f8c8 3000 	str.w	r3, [r8]
   218c0:	a805      	add	r0, sp, #20
   218c2:	f000 f9f3 	bl	21cac <LLF_RND_WaitRngInterrupt>
   218c6:	2800      	cmp	r0, #0
   218c8:	d18d      	bne.n	217e6 <getTrngSource+0x96>
   218ca:	4a50      	ldr	r2, [pc, #320]	; (21a0c <getTrngSource+0x2bc>)
   218cc:	4b50      	ldr	r3, [pc, #320]	; (21a10 <getTrngSource+0x2c0>)
   218ce:	6812      	ldr	r2, [r2, #0]
   218d0:	9206      	str	r2, [sp, #24]
   218d2:	681a      	ldr	r2, [r3, #0]
   218d4:	9207      	str	r2, [sp, #28]
   218d6:	685a      	ldr	r2, [r3, #4]
   218d8:	9208      	str	r2, [sp, #32]
   218da:	689a      	ldr	r2, [r3, #8]
   218dc:	9209      	str	r2, [sp, #36]	; 0x24
   218de:	68da      	ldr	r2, [r3, #12]
   218e0:	920a      	str	r2, [sp, #40]	; 0x28
   218e2:	3310      	adds	r3, #16
   218e4:	fba7 2705 	umull	r2, r7, r7, r5
   218e8:	681b      	ldr	r3, [r3, #0]
   218ea:	930b      	str	r3, [sp, #44]	; 0x2c
   218ec:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   218f0:	d102      	bne.n	218f8 <getTrngSource+0x1a8>
   218f2:	f1bb 0f00 	cmp.w	fp, #0
   218f6:	d141      	bne.n	2197c <getTrngSource+0x22c>
   218f8:	2218      	movs	r2, #24
   218fa:	4630      	mov	r0, r6
   218fc:	eb0d 0102 	add.w	r1, sp, r2
   21900:	f000 f97a 	bl	21bf8 <CC_PalMemCopyPlat>
   21904:	3d18      	subs	r5, #24
   21906:	3618      	adds	r6, #24
   21908:	f109 0901 	add.w	r9, r9, #1
   2190c:	2d00      	cmp	r5, #0
   2190e:	f47f af56 	bne.w	217be <getTrngSource+0x6e>
   21912:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   21916:	d85d      	bhi.n	219d4 <getTrngSource+0x284>
   21918:	9d03      	ldr	r5, [sp, #12]
   2191a:	6962      	ldr	r2, [r4, #20]
   2191c:	4651      	mov	r1, sl
   2191e:	4628      	mov	r0, r5
   21920:	f7ff fe80 	bl	21624 <LLF_RND_RepetitionCounterTest.part.0>
   21924:	2800      	cmp	r0, #0
   21926:	d04b      	beq.n	219c0 <getTrngSource+0x270>
   21928:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2192a:	2300      	movs	r3, #0
   2192c:	6013      	str	r3, [r2, #0]
   2192e:	4b2e      	ldr	r3, [pc, #184]	; (219e8 <getTrngSource+0x298>)
   21930:	4298      	cmp	r0, r3
   21932:	f43f af5c 	beq.w	217ee <getTrngSource+0x9e>
   21936:	9d04      	ldr	r5, [sp, #16]
   21938:	2d08      	cmp	r5, #8
   2193a:	d034      	beq.n	219a6 <getTrngSource+0x256>
   2193c:	2200      	movs	r2, #0
   2193e:	ab04      	add	r3, sp, #16
   21940:	006d      	lsls	r5, r5, #1
   21942:	9200      	str	r2, [sp, #0]
   21944:	4621      	mov	r1, r4
   21946:	4640      	mov	r0, r8
   21948:	9504      	str	r5, [sp, #16]
   2194a:	f7ff fdc1 	bl	214d0 <startTrngHW>
   2194e:	4b31      	ldr	r3, [pc, #196]	; (21a14 <getTrngSource+0x2c4>)
   21950:	4298      	cmp	r0, r3
   21952:	d024      	beq.n	2199e <getTrngSource+0x24e>
   21954:	2800      	cmp	r0, #0
   21956:	f47f af4a 	bne.w	217ee <getTrngSource+0x9e>
   2195a:	f8d8 2000 	ldr.w	r2, [r8]
   2195e:	0a13      	lsrs	r3, r2, #8
   21960:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   21964:	4313      	orrs	r3, r2
   21966:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2196a:	f8c8 3000 	str.w	r3, [r8]
   2196e:	9b02      	ldr	r3, [sp, #8]
   21970:	3b01      	subs	r3, #1
   21972:	9302      	str	r3, [sp, #8]
   21974:	f47f af18 	bne.w	217a8 <getTrngSource+0x58>
   21978:	2000      	movs	r0, #0
   2197a:	e738      	b.n	217ee <getTrngSource+0x9e>
   2197c:	4630      	mov	r0, r6
   2197e:	465a      	mov	r2, fp
   21980:	a906      	add	r1, sp, #24
   21982:	f000 f939 	bl	21bf8 <CC_PalMemCopyPlat>
   21986:	eba5 050b 	sub.w	r5, r5, fp
   2198a:	445e      	add	r6, fp
   2198c:	e7bc      	b.n	21908 <getTrngSource+0x1b8>
   2198e:	4821      	ldr	r0, [pc, #132]	; (21a14 <getTrngSource+0x2c4>)
   21990:	e729      	b.n	217e6 <getTrngSource+0x96>
   21992:	4821      	ldr	r0, [pc, #132]	; (21a18 <getTrngSource+0x2c8>)
   21994:	e727      	b.n	217e6 <getTrngSource+0x96>
   21996:	2703      	movs	r7, #3
   21998:	e74f      	b.n	2183a <getTrngSource+0xea>
   2199a:	2702      	movs	r7, #2
   2199c:	e74d      	b.n	2183a <getTrngSource+0xea>
   2199e:	6a23      	ldr	r3, [r4, #32]
   219a0:	2b00      	cmp	r3, #0
   219a2:	f43f af24 	beq.w	217ee <getTrngSource+0x9e>
   219a6:	481d      	ldr	r0, [pc, #116]	; (21a1c <getTrngSource+0x2cc>)
   219a8:	e721      	b.n	217ee <getTrngSource+0x9e>
   219aa:	9500      	str	r5, [sp, #0]
   219ac:	ab04      	add	r3, sp, #16
   219ae:	2201      	movs	r2, #1
   219b0:	4621      	mov	r1, r4
   219b2:	4638      	mov	r0, r7
   219b4:	f7ff fd8c 	bl	214d0 <startTrngHW>
   219b8:	2800      	cmp	r0, #0
   219ba:	f43f aee6 	beq.w	2178a <getTrngSource+0x3a>
   219be:	e716      	b.n	217ee <getTrngSource+0x9e>
   219c0:	69a2      	ldr	r2, [r4, #24]
   219c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   219c6:	4651      	mov	r1, sl
   219c8:	4628      	mov	r0, r5
   219ca:	f7ff fe59 	bl	21680 <LLF_RND_AdaptiveProportionTest>
   219ce:	2800      	cmp	r0, #0
   219d0:	d1aa      	bne.n	21928 <getTrngSource+0x1d8>
   219d2:	e7d1      	b.n	21978 <getTrngSource+0x228>
   219d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   219d6:	601d      	str	r5, [r3, #0]
   219d8:	e7ad      	b.n	21936 <getTrngSource+0x1e6>
   219da:	bf00      	nop
   219dc:	5002b138 	.word	0x5002b138
   219e0:	5002b130 	.word	0x5002b130
   219e4:	aaaaaaab 	.word	0xaaaaaaab
   219e8:	00f10c02 	.word	0x00f10c02
   219ec:	00f10c30 	.word	0x00f10c30
   219f0:	5002b1c4 	.word	0x5002b1c4
   219f4:	5002b12c 	.word	0x5002b12c
   219f8:	5002b100 	.word	0x5002b100
   219fc:	0ffffffe 	.word	0x0ffffffe
   21a00:	5002b10c 	.word	0x5002b10c
   21a04:	5002ba04 	.word	0x5002ba04
   21a08:	5002b1d8 	.word	0x5002b1d8
   21a0c:	5002b114 	.word	0x5002b114
   21a10:	5002b118 	.word	0x5002b118
   21a14:	00f10c31 	.word	0x00f10c31
   21a18:	00f10c35 	.word	0x00f10c35
   21a1c:	00f10c32 	.word	0x00f10c32

00021a20 <LLF_RND_GetTrngSource>:
   21a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a24:	4e1f      	ldr	r6, [pc, #124]	; (21aa4 <LLF_RND_GetTrngSource+0x84>)
   21a26:	b084      	sub	sp, #16
   21a28:	4604      	mov	r4, r0
   21a2a:	460d      	mov	r5, r1
   21a2c:	6830      	ldr	r0, [r6, #0]
   21a2e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   21a30:	f04f 31ff 	mov.w	r1, #4294967295
   21a34:	4690      	mov	r8, r2
   21a36:	f7ff fcd9 	bl	213ec <CC_PalMutexLock>
   21a3a:	b9d8      	cbnz	r0, 21a74 <LLF_RND_GetTrngSource+0x54>
   21a3c:	2000      	movs	r0, #0
   21a3e:	f7ff fd05 	bl	2144c <CC_PalPowerSaveModeSelect>
   21a42:	b9f8      	cbnz	r0, 21a84 <LLF_RND_GetTrngSource+0x64>
   21a44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21a46:	9200      	str	r2, [sp, #0]
   21a48:	2300      	movs	r3, #0
   21a4a:	4620      	mov	r0, r4
   21a4c:	9302      	str	r3, [sp, #8]
   21a4e:	9701      	str	r7, [sp, #4]
   21a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21a52:	4642      	mov	r2, r8
   21a54:	4629      	mov	r1, r5
   21a56:	f7ff fe7b 	bl	21750 <getTrngSource>
   21a5a:	4604      	mov	r4, r0
   21a5c:	2001      	movs	r0, #1
   21a5e:	f7ff fcf5 	bl	2144c <CC_PalPowerSaveModeSelect>
   21a62:	b9d0      	cbnz	r0, 21a9a <LLF_RND_GetTrngSource+0x7a>
   21a64:	6830      	ldr	r0, [r6, #0]
   21a66:	f7ff fcc9 	bl	213fc <CC_PalMutexUnlock>
   21a6a:	b978      	cbnz	r0, 21a8c <LLF_RND_GetTrngSource+0x6c>
   21a6c:	4620      	mov	r0, r4
   21a6e:	b004      	add	sp, #16
   21a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21a74:	480c      	ldr	r0, [pc, #48]	; (21aa8 <LLF_RND_GetTrngSource+0x88>)
   21a76:	f7ff fac9 	bl	2100c <CC_PalAbort>
   21a7a:	2000      	movs	r0, #0
   21a7c:	f7ff fce6 	bl	2144c <CC_PalPowerSaveModeSelect>
   21a80:	2800      	cmp	r0, #0
   21a82:	d0df      	beq.n	21a44 <LLF_RND_GetTrngSource+0x24>
   21a84:	4809      	ldr	r0, [pc, #36]	; (21aac <LLF_RND_GetTrngSource+0x8c>)
   21a86:	f7ff fac1 	bl	2100c <CC_PalAbort>
   21a8a:	e7db      	b.n	21a44 <LLF_RND_GetTrngSource+0x24>
   21a8c:	4808      	ldr	r0, [pc, #32]	; (21ab0 <LLF_RND_GetTrngSource+0x90>)
   21a8e:	f7ff fabd 	bl	2100c <CC_PalAbort>
   21a92:	4620      	mov	r0, r4
   21a94:	b004      	add	sp, #16
   21a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21a9a:	4806      	ldr	r0, [pc, #24]	; (21ab4 <LLF_RND_GetTrngSource+0x94>)
   21a9c:	f7ff fab6 	bl	2100c <CC_PalAbort>
   21aa0:	e7e0      	b.n	21a64 <LLF_RND_GetTrngSource+0x44>
   21aa2:	bf00      	nop
   21aa4:	20000d18 	.word	0x20000d18
   21aa8:	00029b48 	.word	0x00029b48
   21aac:	00029b78 	.word	0x00029b78
   21ab0:	00029b60 	.word	0x00029b60
   21ab4:	00029b98 	.word	0x00029b98

00021ab8 <LLF_RND_RunTrngStartupTest>:
   21ab8:	b510      	push	{r4, lr}
   21aba:	b086      	sub	sp, #24
   21abc:	ab05      	add	r3, sp, #20
   21abe:	2401      	movs	r4, #1
   21ac0:	e9cd 2401 	strd	r2, r4, [sp, #4]
   21ac4:	9300      	str	r3, [sp, #0]
   21ac6:	2200      	movs	r2, #0
   21ac8:	ab04      	add	r3, sp, #16
   21aca:	f7ff fe41 	bl	21750 <getTrngSource>
   21ace:	b006      	add	sp, #24
   21ad0:	bd10      	pop	{r4, pc}
   21ad2:	bf00      	nop

00021ad4 <mbedtls_hardware_poll>:
   21ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ad8:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
   21adc:	460f      	mov	r7, r1
   21ade:	9205      	str	r2, [sp, #20]
   21ae0:	2100      	movs	r1, #0
   21ae2:	4614      	mov	r4, r2
   21ae4:	a812      	add	r0, sp, #72	; 0x48
   21ae6:	f44f 7208 	mov.w	r2, #544	; 0x220
   21aea:	461e      	mov	r6, r3
   21aec:	f002 fb59 	bl	241a2 <memset>
   21af0:	2100      	movs	r1, #0
   21af2:	a808      	add	r0, sp, #32
   21af4:	2228      	movs	r2, #40	; 0x28
   21af6:	9106      	str	r1, [sp, #24]
   21af8:	f002 fb53 	bl	241a2 <memset>
   21afc:	2f00      	cmp	r7, #0
   21afe:	d03c      	beq.n	21b7a <mbedtls_hardware_poll+0xa6>
   21b00:	2e00      	cmp	r6, #0
   21b02:	d03a      	beq.n	21b7a <mbedtls_hardware_poll+0xa6>
   21b04:	2c00      	cmp	r4, #0
   21b06:	d038      	beq.n	21b7a <mbedtls_hardware_poll+0xa6>
   21b08:	2104      	movs	r1, #4
   21b0a:	a806      	add	r0, sp, #24
   21b0c:	f000 f876 	bl	21bfc <CC_PalMemSetZeroPlat>
   21b10:	a808      	add	r0, sp, #32
   21b12:	2128      	movs	r1, #40	; 0x28
   21b14:	f000 f872 	bl	21bfc <CC_PalMemSetZeroPlat>
   21b18:	a808      	add	r0, sp, #32
   21b1a:	f000 f831 	bl	21b80 <RNG_PLAT_SetUserRngParameters>
   21b1e:	b178      	cbz	r0, 21b40 <mbedtls_hardware_poll+0x6c>
   21b20:	f04f 35ff 	mov.w	r5, #4294967295
   21b24:	a812      	add	r0, sp, #72	; 0x48
   21b26:	f44f 7108 	mov.w	r1, #544	; 0x220
   21b2a:	f000 f90b 	bl	21d44 <mbedtls_platform_zeroize>
   21b2e:	a806      	add	r0, sp, #24
   21b30:	2104      	movs	r1, #4
   21b32:	f000 f907 	bl	21d44 <mbedtls_platform_zeroize>
   21b36:	4628      	mov	r0, r5
   21b38:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   21b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21b40:	ab12      	add	r3, sp, #72	; 0x48
   21b42:	f10d 081c 	add.w	r8, sp, #28
   21b46:	e9cd 6301 	strd	r6, r3, [sp, #4]
   21b4a:	9003      	str	r0, [sp, #12]
   21b4c:	4602      	mov	r2, r0
   21b4e:	ab05      	add	r3, sp, #20
   21b50:	a908      	add	r1, sp, #32
   21b52:	f8cd 8000 	str.w	r8, [sp]
   21b56:	a806      	add	r0, sp, #24
   21b58:	f7ff ff62 	bl	21a20 <LLF_RND_GetTrngSource>
   21b5c:	4605      	mov	r5, r0
   21b5e:	2800      	cmp	r0, #0
   21b60:	d1de      	bne.n	21b20 <mbedtls_hardware_poll+0x4c>
   21b62:	6833      	ldr	r3, [r6, #0]
   21b64:	42a3      	cmp	r3, r4
   21b66:	d3db      	bcc.n	21b20 <mbedtls_hardware_poll+0x4c>
   21b68:	f8d8 1000 	ldr.w	r1, [r8]
   21b6c:	4638      	mov	r0, r7
   21b6e:	3108      	adds	r1, #8
   21b70:	4622      	mov	r2, r4
   21b72:	f000 f841 	bl	21bf8 <CC_PalMemCopyPlat>
   21b76:	6034      	str	r4, [r6, #0]
   21b78:	e7d4      	b.n	21b24 <mbedtls_hardware_poll+0x50>
   21b7a:	f04f 35ff 	mov.w	r5, #4294967295
   21b7e:	e7da      	b.n	21b36 <mbedtls_hardware_poll+0x62>

00021b80 <RNG_PLAT_SetUserRngParameters>:
   21b80:	b530      	push	{r4, r5, lr}
   21b82:	b083      	sub	sp, #12
   21b84:	231c      	movs	r3, #28
   21b86:	a901      	add	r1, sp, #4
   21b88:	4604      	mov	r4, r0
   21b8a:	9301      	str	r3, [sp, #4]
   21b8c:	f000 f83a 	bl	21c04 <CC_PalTrngParamGet>
   21b90:	4605      	mov	r5, r0
   21b92:	b938      	cbnz	r0, 21ba4 <RNG_PLAT_SetUserRngParameters+0x24>
   21b94:	9b01      	ldr	r3, [sp, #4]
   21b96:	2b1c      	cmp	r3, #28
   21b98:	d007      	beq.n	21baa <RNG_PLAT_SetUserRngParameters+0x2a>
   21b9a:	4d15      	ldr	r5, [pc, #84]	; (21bf0 <RNG_PLAT_SetUserRngParameters+0x70>)
   21b9c:	4620      	mov	r0, r4
   21b9e:	211c      	movs	r1, #28
   21ba0:	f000 f82c 	bl	21bfc <CC_PalMemSetZeroPlat>
   21ba4:	4628      	mov	r0, r5
   21ba6:	b003      	add	sp, #12
   21ba8:	bd30      	pop	{r4, r5, pc}
   21baa:	e9d4 3200 	ldrd	r3, r2, [r4]
   21bae:	2101      	movs	r1, #1
   21bb0:	3b00      	subs	r3, #0
   21bb2:	bf18      	it	ne
   21bb4:	2301      	movne	r3, #1
   21bb6:	61e1      	str	r1, [r4, #28]
   21bb8:	b10a      	cbz	r2, 21bbe <RNG_PLAT_SetUserRngParameters+0x3e>
   21bba:	f043 0302 	orr.w	r3, r3, #2
   21bbe:	68a2      	ldr	r2, [r4, #8]
   21bc0:	b932      	cbnz	r2, 21bd0 <RNG_PLAT_SetUserRngParameters+0x50>
   21bc2:	68e2      	ldr	r2, [r4, #12]
   21bc4:	b942      	cbnz	r2, 21bd8 <RNG_PLAT_SetUserRngParameters+0x58>
   21bc6:	e9c4 3208 	strd	r3, r2, [r4, #32]
   21bca:	b97b      	cbnz	r3, 21bec <RNG_PLAT_SetUserRngParameters+0x6c>
   21bcc:	4d09      	ldr	r5, [pc, #36]	; (21bf4 <RNG_PLAT_SetUserRngParameters+0x74>)
   21bce:	e7e5      	b.n	21b9c <RNG_PLAT_SetUserRngParameters+0x1c>
   21bd0:	68e2      	ldr	r2, [r4, #12]
   21bd2:	f043 0304 	orr.w	r3, r3, #4
   21bd6:	b13a      	cbz	r2, 21be8 <RNG_PLAT_SetUserRngParameters+0x68>
   21bd8:	f043 0308 	orr.w	r3, r3, #8
   21bdc:	2200      	movs	r2, #0
   21bde:	4628      	mov	r0, r5
   21be0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   21be4:	b003      	add	sp, #12
   21be6:	bd30      	pop	{r4, r5, pc}
   21be8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   21bec:	4615      	mov	r5, r2
   21bee:	e7d9      	b.n	21ba4 <RNG_PLAT_SetUserRngParameters+0x24>
   21bf0:	00f00c37 	.word	0x00f00c37
   21bf4:	00f00c0e 	.word	0x00f00c0e

00021bf8 <CC_PalMemCopyPlat>:
   21bf8:	f002 ba92 	b.w	24120 <memmove>

00021bfc <CC_PalMemSetZeroPlat>:
   21bfc:	460a      	mov	r2, r1
   21bfe:	2100      	movs	r1, #0
   21c00:	f002 bacf 	b.w	241a2 <memset>

00021c04 <CC_PalTrngParamGet>:
   21c04:	b118      	cbz	r0, 21c0e <CC_PalTrngParamGet+0xa>
   21c06:	b111      	cbz	r1, 21c0e <CC_PalTrngParamGet+0xa>
   21c08:	680b      	ldr	r3, [r1, #0]
   21c0a:	2b1c      	cmp	r3, #28
   21c0c:	d001      	beq.n	21c12 <CC_PalTrngParamGet+0xe>
   21c0e:	2001      	movs	r0, #1
   21c10:	4770      	bx	lr
   21c12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21c16:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   21c1a:	3201      	adds	r2, #1
   21c1c:	bf14      	ite	ne
   21c1e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   21c22:	f241 225c 	movweq	r2, #4700	; 0x125c
   21c26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21c2a:	6002      	str	r2, [r0, #0]
   21c2c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   21c30:	3201      	adds	r2, #1
   21c32:	bf14      	ite	ne
   21c34:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   21c38:	f641 1264 	movweq	r2, #6500	; 0x1964
   21c3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21c40:	6042      	str	r2, [r0, #4]
   21c42:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   21c46:	3201      	adds	r2, #1
   21c48:	bf14      	ite	ne
   21c4a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   21c4e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   21c52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21c56:	6082      	str	r2, [r0, #8]
   21c58:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   21c5c:	3201      	adds	r2, #1
   21c5e:	bf14      	ite	ne
   21c60:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   21c64:	f241 3288 	movweq	r2, #5000	; 0x1388
   21c68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21c6c:	60c2      	str	r2, [r0, #12]
   21c6e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   21c72:	3201      	adds	r2, #1
   21c74:	bf14      	ite	ne
   21c76:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   21c7a:	2290      	moveq	r2, #144	; 0x90
   21c7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21c80:	6102      	str	r2, [r0, #16]
   21c82:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   21c86:	3201      	adds	r2, #1
   21c88:	bf14      	ite	ne
   21c8a:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   21c8e:	2251      	moveq	r2, #81	; 0x51
   21c90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21c94:	6142      	str	r2, [r0, #20]
   21c96:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   21c9a:	3201      	adds	r2, #1
   21c9c:	bf14      	ite	ne
   21c9e:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   21ca2:	f240 3337 	movweq	r3, #823	; 0x337
   21ca6:	6183      	str	r3, [r0, #24]
   21ca8:	2000      	movs	r0, #0
   21caa:	4770      	bx	lr

00021cac <LLF_RND_WaitRngInterrupt>:
   21cac:	b508      	push	{r3, lr}
   21cae:	4601      	mov	r1, r0
   21cb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   21cb4:	f7ff fb1a 	bl	212ec <CC_HalWaitInterruptRND>
   21cb8:	4902      	ldr	r1, [pc, #8]	; (21cc4 <LLF_RND_WaitRngInterrupt+0x18>)
   21cba:	4a03      	ldr	r2, [pc, #12]	; (21cc8 <LLF_RND_WaitRngInterrupt+0x1c>)
   21cbc:	2300      	movs	r3, #0
   21cbe:	600b      	str	r3, [r1, #0]
   21cc0:	6013      	str	r3, [r2, #0]
   21cc2:	bd08      	pop	{r3, pc}
   21cc4:	5002b1c8 	.word	0x5002b1c8
   21cc8:	5002b12c 	.word	0x5002b12c

00021ccc <LLF_RND_GetRoscSampleCnt>:
   21ccc:	3801      	subs	r0, #1
   21cce:	2807      	cmp	r0, #7
   21cd0:	d805      	bhi.n	21cde <LLF_RND_GetRoscSampleCnt+0x12>
   21cd2:	e8df f000 	tbb	[pc, r0]
   21cd6:	0e0a      	.short	0x0e0a
   21cd8:	04041204 	.word	0x04041204
   21cdc:	0604      	.short	0x0604
   21cde:	4809      	ldr	r0, [pc, #36]	; (21d04 <LLF_RND_GetRoscSampleCnt+0x38>)
   21ce0:	4770      	bx	lr
   21ce2:	68cb      	ldr	r3, [r1, #12]
   21ce4:	624b      	str	r3, [r1, #36]	; 0x24
   21ce6:	2000      	movs	r0, #0
   21ce8:	4770      	bx	lr
   21cea:	680b      	ldr	r3, [r1, #0]
   21cec:	624b      	str	r3, [r1, #36]	; 0x24
   21cee:	2000      	movs	r0, #0
   21cf0:	4770      	bx	lr
   21cf2:	684b      	ldr	r3, [r1, #4]
   21cf4:	624b      	str	r3, [r1, #36]	; 0x24
   21cf6:	2000      	movs	r0, #0
   21cf8:	4770      	bx	lr
   21cfa:	688b      	ldr	r3, [r1, #8]
   21cfc:	624b      	str	r3, [r1, #36]	; 0x24
   21cfe:	2000      	movs	r0, #0
   21d00:	4770      	bx	lr
   21d02:	bf00      	nop
   21d04:	00f10c31 	.word	0x00f10c31

00021d08 <LLF_RND_GetFastestRosc>:
   21d08:	680b      	ldr	r3, [r1, #0]
   21d0a:	e002      	b.n	21d12 <LLF_RND_GetFastestRosc+0xa>
   21d0c:	2b08      	cmp	r3, #8
   21d0e:	600b      	str	r3, [r1, #0]
   21d10:	d806      	bhi.n	21d20 <LLF_RND_GetFastestRosc+0x18>
   21d12:	6a02      	ldr	r2, [r0, #32]
   21d14:	4213      	tst	r3, r2
   21d16:	ea4f 0343 	mov.w	r3, r3, lsl #1
   21d1a:	d0f7      	beq.n	21d0c <LLF_RND_GetFastestRosc+0x4>
   21d1c:	2000      	movs	r0, #0
   21d1e:	4770      	bx	lr
   21d20:	4800      	ldr	r0, [pc, #0]	; (21d24 <LLF_RND_GetFastestRosc+0x1c>)
   21d22:	4770      	bx	lr
   21d24:	00f10c31 	.word	0x00f10c31

00021d28 <LLF_RND_TurnOffTrng>:
   21d28:	4904      	ldr	r1, [pc, #16]	; (21d3c <LLF_RND_TurnOffTrng+0x14>)
   21d2a:	4a05      	ldr	r2, [pc, #20]	; (21d40 <LLF_RND_TurnOffTrng+0x18>)
   21d2c:	2300      	movs	r3, #0
   21d2e:	600b      	str	r3, [r1, #0]
   21d30:	f44f 6080 	mov.w	r0, #1024	; 0x400
   21d34:	6013      	str	r3, [r2, #0]
   21d36:	f7ff bac5 	b.w	212c4 <CC_HalClearInterruptBit>
   21d3a:	bf00      	nop
   21d3c:	5002b12c 	.word	0x5002b12c
   21d40:	5002b1c4 	.word	0x5002b1c4

00021d44 <mbedtls_platform_zeroize>:
   21d44:	b138      	cbz	r0, 21d56 <mbedtls_platform_zeroize+0x12>
   21d46:	b131      	cbz	r1, 21d56 <mbedtls_platform_zeroize+0x12>
   21d48:	4401      	add	r1, r0
   21d4a:	2200      	movs	r2, #0
   21d4c:	4603      	mov	r3, r0
   21d4e:	3001      	adds	r0, #1
   21d50:	4281      	cmp	r1, r0
   21d52:	701a      	strb	r2, [r3, #0]
   21d54:	d1fa      	bne.n	21d4c <mbedtls_platform_zeroize+0x8>
   21d56:	4770      	bx	lr

00021d58 <prov_reset>:
	bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
   21d58:	2003      	movs	r0, #3
   21d5a:	f7f2 b913 	b.w	13f84 <bt_mesh_prov_enable>

00021d5e <status_handler_onoff_cli>:
}
   21d5e:	4770      	bx	lr

00021d60 <led_get>:
{
   21d60:	b510      	push	{r4, lr}
   21d62:	4614      	mov	r4, r2
	rsp->present_on_off = bm_switch_get();
   21d64:	f7e0 f96a 	bl	203c <bm_switch_get>
   21d68:	7020      	strb	r0, [r4, #0]
}
   21d6a:	bd10      	pop	{r4, pc}

00021d6c <signal_cb>:
{
   21d6c:	b508      	push	{r3, lr}
	bm_led1_set(!bm_led1_get()); // Toggle the Red LED
   21d6e:	f7e0 f939 	bl	1fe4 <bm_led1_get>
   21d72:	f080 0001 	eor.w	r0, r0, #1
   21d76:	b2c0      	uxtb	r0, r0
}
   21d78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bm_led1_set(!bm_led1_get()); // Toggle the Red LED
   21d7c:	f7e0 b922 	b.w	1fc4 <bm_led1_set>

00021d80 <gpio_add_callback>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   21d80:	6883      	ldr	r3, [r0, #8]
   21d82:	69db      	ldr	r3, [r3, #28]
   21d84:	b10b      	cbz	r3, 21d8a <gpio_add_callback+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   21d86:	2201      	movs	r2, #1
   21d88:	4718      	bx	r3
}
   21d8a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   21d8e:	4770      	bx	lr

00021d90 <device_get_binding>:
   21d90:	f7fc b946 	b.w	1e020 <z_impl_device_get_binding>

00021d94 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   21d94:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
	uint8_t num_digits = 0;
   21d96:	2300      	movs	r3, #0
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   21d98:	2504      	movs	r5, #4
	uint8_t divisor = 100;
   21d9a:	2464      	movs	r4, #100	; 0x64
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   21d9c:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   21da0:	b111      	cbz	r1, 21da8 <u8_to_dec+0x14>
   21da2:	3d01      	subs	r5, #1
   21da4:	d102      	bne.n	21dac <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   21da6:	7005      	strb	r5, [r0, #0]
	}

	return num_digits;
}
   21da8:	4618      	mov	r0, r3
   21daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   21dac:	42a2      	cmp	r2, r4
		digit = value / divisor;
   21dae:	fbb2 f7f4 	udiv	r7, r2, r4
   21db2:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   21db4:	d202      	bcs.n	21dbc <u8_to_dec+0x28>
   21db6:	2c01      	cmp	r4, #1
   21db8:	d000      	beq.n	21dbc <u8_to_dec+0x28>
   21dba:	b133      	cbz	r3, 21dca <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   21dbc:	3630      	adds	r6, #48	; 0x30
			buflen--;
   21dbe:	3901      	subs	r1, #1
			num_digits++;
   21dc0:	3301      	adds	r3, #1
			*buf = (char)digit + '0';
   21dc2:	f800 6b01 	strb.w	r6, [r0], #1
			buflen--;
   21dc6:	b2c9      	uxtb	r1, r1
			num_digits++;
   21dc8:	b2db      	uxtb	r3, r3
		value -= digit * divisor;
   21dca:	fb04 2217 	mls	r2, r4, r7, r2
   21dce:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   21dd0:	fbb4 f4fc 	udiv	r4, r4, ip
   21dd4:	e7e4      	b.n	21da0 <u8_to_dec+0xc>

00021dd6 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   21dd6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   21dda:	b2db      	uxtb	r3, r3
   21ddc:	2b09      	cmp	r3, #9
   21dde:	d802      	bhi.n	21de6 <char2hex+0x10>
		*x = c - '0';
   21de0:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   21de2:	2000      	movs	r0, #0
   21de4:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   21de6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   21dea:	2b05      	cmp	r3, #5
   21dec:	d802      	bhi.n	21df4 <char2hex+0x1e>
		*x = c - 'a' + 10;
   21dee:	3857      	subs	r0, #87	; 0x57
   21df0:	7008      	strb	r0, [r1, #0]
   21df2:	e7f6      	b.n	21de2 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   21df4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   21df8:	2b05      	cmp	r3, #5
   21dfa:	d801      	bhi.n	21e00 <char2hex+0x2a>
		*x = c - 'A' + 10;
   21dfc:	3837      	subs	r0, #55	; 0x37
   21dfe:	e7f7      	b.n	21df0 <char2hex+0x1a>
		return -EINVAL;
   21e00:	f06f 0015 	mvn.w	r0, #21
}
   21e04:	4770      	bx	lr

00021e06 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   21e06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   21e08:	084e      	lsrs	r6, r1, #1
   21e0a:	f001 0101 	and.w	r1, r1, #1
   21e0e:	1875      	adds	r5, r6, r1
   21e10:	429d      	cmp	r5, r3
{
   21e12:	4604      	mov	r4, r0
	if (buflen < hexlen / 2 + hexlen % 2) {
   21e14:	d903      	bls.n	21e1e <hex2bin+0x18>
		return 0;
   21e16:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   21e18:	4628      	mov	r0, r5
   21e1a:	b003      	add	sp, #12
   21e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   21e1e:	b159      	cbz	r1, 21e38 <hex2bin+0x32>
		if (char2hex(hex[0], &dec) < 0) {
   21e20:	f10d 0107 	add.w	r1, sp, #7
   21e24:	7800      	ldrb	r0, [r0, #0]
   21e26:	f7ff ffd6 	bl	21dd6 <char2hex>
   21e2a:	2800      	cmp	r0, #0
   21e2c:	dbf3      	blt.n	21e16 <hex2bin+0x10>
		buf[0] = dec;
   21e2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21e32:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   21e36:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   21e38:	3a01      	subs	r2, #1
   21e3a:	eb04 0646 	add.w	r6, r4, r6, lsl #1
   21e3e:	42b4      	cmp	r4, r6
   21e40:	d0ea      	beq.n	21e18 <hex2bin+0x12>
		if (char2hex(hex[2 * i], &dec) < 0) {
   21e42:	f10d 0107 	add.w	r1, sp, #7
   21e46:	7820      	ldrb	r0, [r4, #0]
   21e48:	f7ff ffc5 	bl	21dd6 <char2hex>
   21e4c:	2800      	cmp	r0, #0
   21e4e:	dbe2      	blt.n	21e16 <hex2bin+0x10>
		buf[i] = dec << 4;
   21e50:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21e54:	011b      	lsls	r3, r3, #4
   21e56:	7053      	strb	r3, [r2, #1]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   21e58:	7860      	ldrb	r0, [r4, #1]
   21e5a:	f10d 0107 	add.w	r1, sp, #7
   21e5e:	f7ff ffba 	bl	21dd6 <char2hex>
   21e62:	2800      	cmp	r0, #0
   21e64:	f104 0402 	add.w	r4, r4, #2
   21e68:	dbd5      	blt.n	21e16 <hex2bin+0x10>
		buf[i] += dec;
   21e6a:	7853      	ldrb	r3, [r2, #1]
   21e6c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   21e70:	440b      	add	r3, r1
   21e72:	f802 3f01 	strb.w	r3, [r2, #1]!
   21e76:	e7e2      	b.n	21e3e <hex2bin+0x38>

00021e78 <sys_notify_validate>:
	if (notify == NULL) {
   21e78:	b140      	cbz	r0, 21e8c <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21e7a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21e7c:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   21e80:	2b02      	cmp	r3, #2
   21e82:	d006      	beq.n	21e92 <sys_notify_validate+0x1a>
   21e84:	2b03      	cmp	r3, #3
   21e86:	d004      	beq.n	21e92 <sys_notify_validate+0x1a>
   21e88:	2b01      	cmp	r3, #1
   21e8a:	d005      	beq.n	21e98 <sys_notify_validate+0x20>
		return -EINVAL;
   21e8c:	f06f 0015 	mvn.w	r0, #21
}
   21e90:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   21e92:	6803      	ldr	r3, [r0, #0]
   21e94:	2b00      	cmp	r3, #0
   21e96:	d0f9      	beq.n	21e8c <sys_notify_validate+0x14>
		notify->result = 0;
   21e98:	2300      	movs	r3, #0
   21e9a:	6083      	str	r3, [r0, #8]
   21e9c:	4618      	mov	r0, r3
   21e9e:	4770      	bx	lr

00021ea0 <arch_printk_char_out>:
}
   21ea0:	2000      	movs	r0, #0
   21ea2:	4770      	bx	lr

00021ea4 <str_out>:
{
   21ea4:	b530      	push	{r4, r5, lr}
   21ea6:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   21ea8:	680c      	ldr	r4, [r1, #0]
   21eaa:	1c55      	adds	r5, r2, #1
   21eac:	b114      	cbz	r4, 21eb4 <str_out+0x10>
   21eae:	684b      	ldr	r3, [r1, #4]
   21eb0:	4293      	cmp	r3, r2
   21eb2:	dc01      	bgt.n	21eb8 <str_out+0x14>
		ctx->count++;
   21eb4:	608d      	str	r5, [r1, #8]
}
   21eb6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   21eb8:	3b01      	subs	r3, #1
   21eba:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   21ebc:	bf08      	it	eq
   21ebe:	2200      	moveq	r2, #0
   21ec0:	608d      	str	r5, [r1, #8]
   21ec2:	bf0c      	ite	eq
   21ec4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   21ec6:	54a0      	strbne	r0, [r4, r2]
   21ec8:	e7f5      	b.n	21eb6 <str_out+0x12>

00021eca <printk>:
{
   21eca:	b40f      	push	{r0, r1, r2, r3}
   21ecc:	b507      	push	{r0, r1, r2, lr}
   21ece:	a904      	add	r1, sp, #16
   21ed0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   21ed4:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   21ed6:	f7e0 f943 	bl	2160 <vprintk>
}
   21eda:	b003      	add	sp, #12
   21edc:	f85d eb04 	ldr.w	lr, [sp], #4
   21ee0:	b004      	add	sp, #16
   21ee2:	4770      	bx	lr

00021ee4 <snprintk>:
{
   21ee4:	b40c      	push	{r2, r3}
   21ee6:	b507      	push	{r0, r1, r2, lr}
   21ee8:	ab04      	add	r3, sp, #16
   21eea:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   21eee:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   21ef0:	f7e0 f944 	bl	217c <vsnprintk>
}
   21ef4:	b003      	add	sp, #12
   21ef6:	f85d eb04 	ldr.w	lr, [sp], #4
   21efa:	b002      	add	sp, #8
   21efc:	4770      	bx	lr

00021efe <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21efe:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   21f00:	f013 0307 	ands.w	r3, r3, #7
   21f04:	d105      	bne.n	21f12 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   21f06:	6803      	ldr	r3, [r0, #0]
   21f08:	2b00      	cmp	r3, #0
		evt = EVT_START;
   21f0a:	bf0c      	ite	eq
   21f0c:	2000      	moveq	r0, #0
   21f0e:	2003      	movne	r0, #3
   21f10:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   21f12:	2b02      	cmp	r3, #2
   21f14:	d105      	bne.n	21f22 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   21f16:	8bc3      	ldrh	r3, [r0, #30]
   21f18:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   21f1a:	bf14      	ite	ne
   21f1c:	2000      	movne	r0, #0
   21f1e:	2004      	moveq	r0, #4
   21f20:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   21f22:	2b01      	cmp	r3, #1
   21f24:	d105      	bne.n	21f32 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   21f26:	6803      	ldr	r3, [r0, #0]
   21f28:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   21f2a:	bf0c      	ite	eq
   21f2c:	2000      	moveq	r0, #0
   21f2e:	2005      	movne	r0, #5
   21f30:	4770      	bx	lr
	int evt = EVT_NOP;
   21f32:	2000      	movs	r0, #0
}
   21f34:	4770      	bx	lr

00021f36 <notify_one>:
{
   21f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f3a:	460d      	mov	r5, r1
   21f3c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21f3e:	4619      	mov	r1, r3
   21f40:	1d28      	adds	r0, r5, #4
{
   21f42:	4690      	mov	r8, r2
   21f44:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21f46:	f7e0 f8d7 	bl	20f8 <sys_notify_finalize>
	if (cb) {
   21f4a:	4604      	mov	r4, r0
   21f4c:	b138      	cbz	r0, 21f5e <notify_one+0x28>
		cb(mgr, cli, state, res);
   21f4e:	4633      	mov	r3, r6
   21f50:	4642      	mov	r2, r8
   21f52:	4629      	mov	r1, r5
   21f54:	4638      	mov	r0, r7
   21f56:	46a4      	mov	ip, r4
}
   21f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   21f5c:	4760      	bx	ip
}
   21f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021f62 <validate_args>:
{
   21f62:	b510      	push	{r4, lr}
   21f64:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   21f66:	b140      	cbz	r0, 21f7a <validate_args+0x18>
   21f68:	b139      	cbz	r1, 21f7a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   21f6a:	1d08      	adds	r0, r1, #4
   21f6c:	f7ff ff84 	bl	21e78 <sys_notify_validate>
	if ((rv == 0)
   21f70:	b928      	cbnz	r0, 21f7e <validate_args+0x1c>
	    && ((cli->notify.flags
   21f72:	68a3      	ldr	r3, [r4, #8]
   21f74:	f033 0303 	bics.w	r3, r3, #3
   21f78:	d001      	beq.n	21f7e <validate_args+0x1c>
		rv = -EINVAL;
   21f7a:	f06f 0015 	mvn.w	r0, #21
}
   21f7e:	bd10      	pop	{r4, pc}

00021f80 <onoff_manager_init>:
{
   21f80:	b538      	push	{r3, r4, r5, lr}
   21f82:	460c      	mov	r4, r1
	if ((mgr == NULL)
   21f84:	4605      	mov	r5, r0
   21f86:	b158      	cbz	r0, 21fa0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   21f88:	b151      	cbz	r1, 21fa0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   21f8a:	680b      	ldr	r3, [r1, #0]
   21f8c:	b143      	cbz	r3, 21fa0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   21f8e:	684b      	ldr	r3, [r1, #4]
   21f90:	b133      	cbz	r3, 21fa0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   21f92:	2220      	movs	r2, #32
   21f94:	2100      	movs	r1, #0
   21f96:	f002 f904 	bl	241a2 <memset>
   21f9a:	612c      	str	r4, [r5, #16]
	return 0;
   21f9c:	2000      	movs	r0, #0
}
   21f9e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   21fa0:	f06f 0015 	mvn.w	r0, #21
   21fa4:	e7fb      	b.n	21f9e <onoff_manager_init+0x1e>

00021fa6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   21fa6:	4604      	mov	r4, r0
   21fa8:	b508      	push	{r3, lr}
   21faa:	4608      	mov	r0, r1
   21fac:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   21fae:	461a      	mov	r2, r3
   21fb0:	47a0      	blx	r4
	return z_impl_k_current_get();
   21fb2:	f7fd fe5d 	bl	1fc70 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   21fb6:	f7e2 ff93 	bl	4ee0 <z_impl_k_thread_abort>

00021fba <chunk_field>:
	if (big_heap(h)) {
   21fba:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   21fbc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   21fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   21fc4:	bf2c      	ite	cs
   21fc6:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   21fca:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   21fce:	4770      	bx	lr

00021fd0 <chunk_set>:
	void *cmem = &buf[c];
   21fd0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   21fd4:	6880      	ldr	r0, [r0, #8]
   21fd6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   21fda:	bf2c      	ite	cs
   21fdc:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   21fe0:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   21fe4:	4770      	bx	lr

00021fe6 <chunk_used>:
{
   21fe6:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   21fe8:	2201      	movs	r2, #1
   21fea:	f7ff ffe6 	bl	21fba <chunk_field>
}
   21fee:	f000 0001 	and.w	r0, r0, #1
   21ff2:	bd08      	pop	{r3, pc}

00021ff4 <chunk_size>:
{
   21ff4:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   21ff6:	2201      	movs	r2, #1
   21ff8:	f7ff ffdf 	bl	21fba <chunk_field>
}
   21ffc:	0840      	lsrs	r0, r0, #1
   21ffe:	bd08      	pop	{r3, pc}

00022000 <set_chunk_used>:
	if (big_heap(h)) {
   22000:	6883      	ldr	r3, [r0, #8]
   22002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   22006:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2200a:	d308      	bcc.n	2201e <set_chunk_used+0x1e>
		if (used) {
   2200c:	684b      	ldr	r3, [r1, #4]
   2200e:	b11a      	cbz	r2, 22018 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   22010:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   22014:	604b      	str	r3, [r1, #4]
   22016:	4770      	bx	lr
   22018:	f023 0301 	bic.w	r3, r3, #1
   2201c:	e7fa      	b.n	22014 <set_chunk_used+0x14>
		if (used) {
   2201e:	884b      	ldrh	r3, [r1, #2]
   22020:	b11a      	cbz	r2, 2202a <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   22022:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   22026:	804b      	strh	r3, [r1, #2]
}
   22028:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2202a:	f023 0301 	bic.w	r3, r3, #1
   2202e:	e7fa      	b.n	22026 <set_chunk_used+0x26>

00022030 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   22030:	0053      	lsls	r3, r2, #1
   22032:	2201      	movs	r2, #1
   22034:	f7ff bfcc 	b.w	21fd0 <chunk_set>

00022038 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   22038:	6883      	ldr	r3, [r0, #8]
   2203a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2203e:	bf2c      	ite	cs
   22040:	2008      	movcs	r0, #8
   22042:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   22044:	3107      	adds	r1, #7
   22046:	4408      	add	r0, r1
}
   22048:	08c0      	lsrs	r0, r0, #3
   2204a:	4770      	bx	lr

0002204c <bucket_idx>:
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
   2204c:	460a      	mov	r2, r1
   2204e:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   22050:	2101      	movs	r1, #1
   22052:	f7ff fff1 	bl	22038 <bytes_to_chunksz>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   22056:	3201      	adds	r2, #1
   22058:	1a10      	subs	r0, r2, r0
	return 31 - __builtin_clz(usable_sz);
   2205a:	fab0 f080 	clz	r0, r0
}
   2205e:	f1c0 001f 	rsb	r0, r0, #31
   22062:	bd08      	pop	{r3, pc}

00022064 <merge_chunks>:
{
   22064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22068:	4616      	mov	r6, r2
   2206a:	4604      	mov	r4, r0
   2206c:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2206e:	f7ff ffc1 	bl	21ff4 <chunk_size>
   22072:	4631      	mov	r1, r6
   22074:	4605      	mov	r5, r0
   22076:	4620      	mov	r0, r4
   22078:	f7ff ffbc 	bl	21ff4 <chunk_size>
   2207c:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   2207e:	462a      	mov	r2, r5
   22080:	4639      	mov	r1, r7
   22082:	4620      	mov	r0, r4
   22084:	f7ff ffd4 	bl	22030 <set_chunk_size>
	return c + chunk_size(h, c);
   22088:	4631      	mov	r1, r6
   2208a:	4620      	mov	r0, r4
   2208c:	f7ff ffb2 	bl	21ff4 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   22090:	462b      	mov	r3, r5
   22092:	1831      	adds	r1, r6, r0
   22094:	2200      	movs	r2, #0
   22096:	4620      	mov	r0, r4
}
   22098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2209c:	f7ff bf98 	b.w	21fd0 <chunk_set>

000220a0 <split_chunks>:
{
   220a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220a4:	4614      	mov	r4, r2
   220a6:	4605      	mov	r5, r0
   220a8:	460f      	mov	r7, r1
	size_t sz0 = chunk_size(h, lc);
   220aa:	f7ff ffa3 	bl	21ff4 <chunk_size>
	size_t lsz = rc - lc;
   220ae:	eba4 0807 	sub.w	r8, r4, r7
	size_t rsz = sz0 - lsz;
   220b2:	1b3e      	subs	r6, r7, r4
   220b4:	4406      	add	r6, r0
	set_chunk_size(h, lc, lsz);
   220b6:	4642      	mov	r2, r8
   220b8:	4639      	mov	r1, r7
   220ba:	4628      	mov	r0, r5
   220bc:	f7ff ffb8 	bl	22030 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   220c0:	4632      	mov	r2, r6
   220c2:	4621      	mov	r1, r4
   220c4:	4628      	mov	r0, r5
   220c6:	f7ff ffb3 	bl	22030 <set_chunk_size>
   220ca:	4643      	mov	r3, r8
   220cc:	2200      	movs	r2, #0
   220ce:	4621      	mov	r1, r4
   220d0:	4628      	mov	r0, r5
   220d2:	f7ff ff7d 	bl	21fd0 <chunk_set>
	return c + chunk_size(h, c);
   220d6:	4621      	mov	r1, r4
   220d8:	4628      	mov	r0, r5
   220da:	f7ff ff8b 	bl	21ff4 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   220de:	4633      	mov	r3, r6
   220e0:	1821      	adds	r1, r4, r0
   220e2:	2200      	movs	r2, #0
   220e4:	4628      	mov	r0, r5
}
   220e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   220ea:	f7ff bf71 	b.w	21fd0 <chunk_set>

000220ee <free_list_remove_bidx>:
{
   220ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220f2:	4690      	mov	r8, r2
	return chunk_field(h, c, FREE_NEXT);
   220f4:	2203      	movs	r2, #3
   220f6:	460e      	mov	r6, r1
   220f8:	4604      	mov	r4, r0
   220fa:	f7ff ff5e 	bl	21fba <chunk_field>
	if (next_free_chunk(h, c) == c) {
   220fe:	4286      	cmp	r6, r0
   22100:	4605      	mov	r5, r0
   22102:	f108 0704 	add.w	r7, r8, #4
   22106:	d10b      	bne.n	22120 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   22108:	2301      	movs	r3, #1
   2210a:	fa03 f208 	lsl.w	r2, r3, r8
   2210e:	68e3      	ldr	r3, [r4, #12]
   22110:	ea23 0302 	bic.w	r3, r3, r2
   22114:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   22116:	2300      	movs	r3, #0
   22118:	f844 3027 	str.w	r3, [r4, r7, lsl #2]
}
   2211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   22120:	4631      	mov	r1, r6
   22122:	2202      	movs	r2, #2
   22124:	4620      	mov	r0, r4
   22126:	f7ff ff48 	bl	21fba <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   2212a:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   2212c:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   2212e:	4601      	mov	r1, r0
		b->next = second;
   22130:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
   22134:	4620      	mov	r0, r4
   22136:	2203      	movs	r2, #3
   22138:	f7ff ff4a 	bl	21fd0 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2213c:	4633      	mov	r3, r6
   2213e:	4629      	mov	r1, r5
   22140:	4620      	mov	r0, r4
   22142:	2202      	movs	r2, #2
}
   22144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22148:	f7ff bf42 	b.w	21fd0 <chunk_set>

0002214c <free_list_remove>:
{
   2214c:	b538      	push	{r3, r4, r5, lr}
   2214e:	4604      	mov	r4, r0
   22150:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   22152:	f7ff ff4f 	bl	21ff4 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   22156:	68a3      	ldr	r3, [r4, #8]
   22158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2215c:	4601      	mov	r1, r0
   2215e:	d301      	bcc.n	22164 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   22160:	2801      	cmp	r0, #1
   22162:	d009      	beq.n	22178 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   22164:	4620      	mov	r0, r4
   22166:	f7ff ff71 	bl	2204c <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   2216a:	4629      	mov	r1, r5
   2216c:	4602      	mov	r2, r0
   2216e:	4620      	mov	r0, r4
}
   22170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   22174:	f7ff bfbb 	b.w	220ee <free_list_remove_bidx>
}
   22178:	bd38      	pop	{r3, r4, r5, pc}

0002217a <alloc_chunk>:
{
   2217a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2217e:	4604      	mov	r4, r0
   22180:	468a      	mov	sl, r1
	int bi = bucket_idx(h, sz);
   22182:	f7ff ff63 	bl	2204c <bucket_idx>
	if (bi > bucket_idx(h, h->len)) {
   22186:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   22188:	4606      	mov	r6, r0
	if (bi > bucket_idx(h, h->len)) {
   2218a:	4620      	mov	r0, r4
   2218c:	f7ff ff5e 	bl	2204c <bucket_idx>
   22190:	42b0      	cmp	r0, r6
   22192:	da03      	bge.n	2219c <alloc_chunk+0x22>
		return 0;
   22194:	2500      	movs	r5, #0
}
   22196:	4628      	mov	r0, r5
   22198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   2219c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   221a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
   221a4:	f1b9 0f00 	cmp.w	r9, #0
   221a8:	d019      	beq.n	221de <alloc_chunk+0x64>
   221aa:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   221ae:	693d      	ldr	r5, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   221b0:	4620      	mov	r0, r4
   221b2:	4629      	mov	r1, r5
   221b4:	f7ff ff1e 	bl	21ff4 <chunk_size>
   221b8:	4550      	cmp	r0, sl
   221ba:	d305      	bcc.n	221c8 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   221bc:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   221be:	4629      	mov	r1, r5
   221c0:	4620      	mov	r0, r4
   221c2:	f7ff ff94 	bl	220ee <free_list_remove_bidx>
		return c;
   221c6:	e7e6      	b.n	22196 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   221c8:	2203      	movs	r2, #3
   221ca:	4629      	mov	r1, r5
   221cc:	4620      	mov	r0, r4
   221ce:	f7ff fef4 	bl	21fba <chunk_field>
		} while (--i && b->next != first);
   221d2:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   221d6:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   221d8:	d001      	beq.n	221de <alloc_chunk+0x64>
   221da:	4581      	cmp	r9, r0
   221dc:	d1e7      	bne.n	221ae <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   221de:	3601      	adds	r6, #1
   221e0:	f04f 32ff 	mov.w	r2, #4294967295
   221e4:	68e3      	ldr	r3, [r4, #12]
   221e6:	40b2      	lsls	r2, r6
	if ((bmask & h->avail_buckets) != 0U) {
   221e8:	401a      	ands	r2, r3
   221ea:	d0d3      	beq.n	22194 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   221ec:	fa92 f2a2 	rbit	r2, r2
   221f0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   221f4:	1d13      	adds	r3, r2, #4
   221f6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   221fa:	e7e0      	b.n	221be <alloc_chunk+0x44>

000221fc <free_list_add>:
{
   221fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22200:	4604      	mov	r4, r0
   22202:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   22204:	f7ff fef6 	bl	21ff4 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   22208:	68a3      	ldr	r3, [r4, #8]
   2220a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2220e:	4601      	mov	r1, r0
   22210:	d301      	bcc.n	22216 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   22212:	2801      	cmp	r0, #1
   22214:	d035      	beq.n	22282 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   22216:	4620      	mov	r0, r4
   22218:	f7ff ff18 	bl	2204c <bucket_idx>
	if (b->next == 0U) {
   2221c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   22220:	6916      	ldr	r6, [r2, #16]
   22222:	b99e      	cbnz	r6, 2224c <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   22224:	2301      	movs	r3, #1
   22226:	fa03 f000 	lsl.w	r0, r3, r0
   2222a:	68e3      	ldr	r3, [r4, #12]
   2222c:	4303      	orrs	r3, r0
   2222e:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   22230:	4629      	mov	r1, r5
		b->next = c;
   22232:	6115      	str	r5, [r2, #16]
   22234:	462b      	mov	r3, r5
   22236:	2202      	movs	r2, #2
   22238:	4620      	mov	r0, r4
   2223a:	f7ff fec9 	bl	21fd0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2223e:	2203      	movs	r2, #3
   22240:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   22242:	4620      	mov	r0, r4
}
   22244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22248:	f7ff bec2 	b.w	21fd0 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   2224c:	2202      	movs	r2, #2
   2224e:	4631      	mov	r1, r6
   22250:	4620      	mov	r0, r4
   22252:	f7ff feb2 	bl	21fba <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   22256:	2202      	movs	r2, #2
   22258:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   2225a:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   2225c:	4629      	mov	r1, r5
   2225e:	4620      	mov	r0, r4
   22260:	f7ff feb6 	bl	21fd0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   22264:	4633      	mov	r3, r6
   22266:	2203      	movs	r2, #3
   22268:	4629      	mov	r1, r5
   2226a:	4620      	mov	r0, r4
   2226c:	f7ff feb0 	bl	21fd0 <chunk_set>
   22270:	2203      	movs	r2, #3
   22272:	4639      	mov	r1, r7
   22274:	462b      	mov	r3, r5
   22276:	4620      	mov	r0, r4
   22278:	f7ff feaa 	bl	21fd0 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2227c:	2202      	movs	r2, #2
   2227e:	4631      	mov	r1, r6
   22280:	e7df      	b.n	22242 <free_list_add+0x46>
   22282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022286 <free_chunk>:
{
   22286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22288:	460c      	mov	r4, r1
   2228a:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2228c:	f7ff feb2 	bl	21ff4 <chunk_size>
   22290:	1826      	adds	r6, r4, r0
	if (!chunk_used(h, right_chunk(h, c))) {
   22292:	4631      	mov	r1, r6
   22294:	4628      	mov	r0, r5
   22296:	f7ff fea6 	bl	21fe6 <chunk_used>
   2229a:	b960      	cbnz	r0, 222b6 <free_chunk+0x30>
		free_list_remove(h, right_chunk(h, c));
   2229c:	4631      	mov	r1, r6
   2229e:	4628      	mov	r0, r5
   222a0:	f7ff ff54 	bl	2214c <free_list_remove>
   222a4:	4621      	mov	r1, r4
   222a6:	4628      	mov	r0, r5
   222a8:	f7ff fea4 	bl	21ff4 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   222ac:	4621      	mov	r1, r4
   222ae:	1822      	adds	r2, r4, r0
   222b0:	4628      	mov	r0, r5
   222b2:	f7ff fed7 	bl	22064 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   222b6:	2200      	movs	r2, #0
   222b8:	4621      	mov	r1, r4
   222ba:	4628      	mov	r0, r5
   222bc:	f7ff fe7d 	bl	21fba <chunk_field>
   222c0:	1a27      	subs	r7, r4, r0
	if (!chunk_used(h, left_chunk(h, c))) {
   222c2:	4639      	mov	r1, r7
   222c4:	4628      	mov	r0, r5
   222c6:	f7ff fe8e 	bl	21fe6 <chunk_used>
   222ca:	4606      	mov	r6, r0
   222cc:	b998      	cbnz	r0, 222f6 <free_chunk+0x70>
		free_list_remove(h, left_chunk(h, c));
   222ce:	4639      	mov	r1, r7
   222d0:	4628      	mov	r0, r5
   222d2:	f7ff ff3b 	bl	2214c <free_list_remove>
   222d6:	4621      	mov	r1, r4
   222d8:	4632      	mov	r2, r6
   222da:	4628      	mov	r0, r5
   222dc:	f7ff fe6d 	bl	21fba <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   222e0:	4622      	mov	r2, r4
   222e2:	1a21      	subs	r1, r4, r0
   222e4:	4628      	mov	r0, r5
   222e6:	f7ff febd 	bl	22064 <merge_chunks>
   222ea:	4621      	mov	r1, r4
   222ec:	4632      	mov	r2, r6
   222ee:	4628      	mov	r0, r5
   222f0:	f7ff fe63 	bl	21fba <chunk_field>
   222f4:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   222f6:	4621      	mov	r1, r4
   222f8:	4628      	mov	r0, r5
}
   222fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   222fe:	f7ff bf7d 	b.w	221fc <free_list_add>

00022302 <sys_heap_alloc>:
{
   22302:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   22304:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   22306:	b909      	cbnz	r1, 2230c <sys_heap_alloc+0xa>
		return NULL;
   22308:	2000      	movs	r0, #0
}
   2230a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2230c:	68a3      	ldr	r3, [r4, #8]
   2230e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   22312:	d9f9      	bls.n	22308 <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   22314:	4620      	mov	r0, r4
   22316:	f7ff fe8f 	bl	22038 <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2231a:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   2231c:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2231e:	4620      	mov	r0, r4
   22320:	f7ff ff2b 	bl	2217a <alloc_chunk>
	if (c == 0U) {
   22324:	4605      	mov	r5, r0
   22326:	2800      	cmp	r0, #0
   22328:	d0ee      	beq.n	22308 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2232a:	4601      	mov	r1, r0
   2232c:	4620      	mov	r0, r4
   2232e:	f7ff fe61 	bl	21ff4 <chunk_size>
   22332:	42b0      	cmp	r0, r6
   22334:	d909      	bls.n	2234a <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   22336:	442e      	add	r6, r5
   22338:	4629      	mov	r1, r5
   2233a:	4620      	mov	r0, r4
   2233c:	4632      	mov	r2, r6
   2233e:	f7ff feaf 	bl	220a0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   22342:	4631      	mov	r1, r6
   22344:	4620      	mov	r0, r4
   22346:	f7ff ff59 	bl	221fc <free_list_add>
	set_chunk_used(h, c, true);
   2234a:	4620      	mov	r0, r4
   2234c:	2201      	movs	r2, #1
   2234e:	4629      	mov	r1, r5
   22350:	f7ff fe56 	bl	22000 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   22354:	68a3      	ldr	r3, [r4, #8]
   22356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2235a:	bf2c      	ite	cs
   2235c:	2008      	movcs	r0, #8
   2235e:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   22360:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   22364:	4420      	add	r0, r4
	return chunk_mem(h, c);
   22366:	e7d0      	b.n	2230a <sys_heap_alloc+0x8>

00022368 <encode_uint>:
{
   22368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2236c:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   2236e:	78d3      	ldrb	r3, [r2, #3]
{
   22370:	4614      	mov	r4, r2
	switch (specifier) {
   22372:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   22374:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   22378:	4606      	mov	r6, r0
   2237a:	460f      	mov	r7, r1
   2237c:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   2237e:	d02d      	beq.n	223dc <encode_uint+0x74>
   22380:	d828      	bhi.n	223d4 <encode_uint+0x6c>
		return 10;
   22382:	2b58      	cmp	r3, #88	; 0x58
   22384:	bf0c      	ite	eq
   22386:	2510      	moveq	r5, #16
   22388:	250a      	movne	r5, #10
	char *bp = bps + (bpe - bps);
   2238a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   2238e:	46aa      	mov	sl, r5
   22390:	f04f 0b00 	mov.w	fp, #0
   22394:	4652      	mov	r2, sl
   22396:	465b      	mov	r3, fp
   22398:	4630      	mov	r0, r6
   2239a:	4639      	mov	r1, r7
   2239c:	f7dd feb0 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   223a0:	2a09      	cmp	r2, #9
   223a2:	b2d3      	uxtb	r3, r2
   223a4:	d821      	bhi.n	223ea <encode_uint+0x82>
   223a6:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   223a8:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   223aa:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   223ac:	bf08      	it	eq
   223ae:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   223b0:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   223b4:	d301      	bcc.n	223ba <encode_uint+0x52>
   223b6:	45c8      	cmp	r8, r9
   223b8:	d814      	bhi.n	223e4 <encode_uint+0x7c>
	if (conv->flag_hash) {
   223ba:	7823      	ldrb	r3, [r4, #0]
   223bc:	069b      	lsls	r3, r3, #26
   223be:	d505      	bpl.n	223cc <encode_uint+0x64>
		if (radix == 8) {
   223c0:	2d08      	cmp	r5, #8
   223c2:	d118      	bne.n	223f6 <encode_uint+0x8e>
			conv->altform_0 = true;
   223c4:	78a3      	ldrb	r3, [r4, #2]
   223c6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   223ca:	70a3      	strb	r3, [r4, #2]
}
   223cc:	4640      	mov	r0, r8
   223ce:	b003      	add	sp, #12
   223d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   223d4:	2b70      	cmp	r3, #112	; 0x70
   223d6:	d003      	beq.n	223e0 <encode_uint+0x78>
		return 10;
   223d8:	2b78      	cmp	r3, #120	; 0x78
   223da:	e7d3      	b.n	22384 <encode_uint+0x1c>
		return 8;
   223dc:	2508      	movs	r5, #8
   223de:	e7d4      	b.n	2238a <encode_uint+0x22>
		return 16;
   223e0:	2510      	movs	r5, #16
   223e2:	e7d2      	b.n	2238a <encode_uint+0x22>
		value /= radix;
   223e4:	4606      	mov	r6, r0
   223e6:	460f      	mov	r7, r1
   223e8:	e7d4      	b.n	22394 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   223ea:	9a01      	ldr	r2, [sp, #4]
   223ec:	2a19      	cmp	r2, #25
   223ee:	bf94      	ite	ls
   223f0:	3337      	addls	r3, #55	; 0x37
   223f2:	3357      	addhi	r3, #87	; 0x57
   223f4:	e7d8      	b.n	223a8 <encode_uint+0x40>
		} else if (radix == 16) {
   223f6:	2d10      	cmp	r5, #16
   223f8:	d1e8      	bne.n	223cc <encode_uint+0x64>
			conv->altform_0c = true;
   223fa:	78a3      	ldrb	r3, [r4, #2]
   223fc:	f043 0310 	orr.w	r3, r3, #16
   22400:	e7e3      	b.n	223ca <encode_uint+0x62>

00022402 <outs>:
{
   22402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22406:	4607      	mov	r7, r0
   22408:	4688      	mov	r8, r1
   2240a:	4615      	mov	r5, r2
   2240c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2240e:	4614      	mov	r4, r2
   22410:	42b4      	cmp	r4, r6
   22412:	eba4 0005 	sub.w	r0, r4, r5
   22416:	d302      	bcc.n	2241e <outs+0x1c>
   22418:	b93e      	cbnz	r6, 2242a <outs+0x28>
   2241a:	7823      	ldrb	r3, [r4, #0]
   2241c:	b12b      	cbz	r3, 2242a <outs+0x28>
		int rc = out((int)*sp++, ctx);
   2241e:	4641      	mov	r1, r8
   22420:	f814 0b01 	ldrb.w	r0, [r4], #1
   22424:	47b8      	blx	r7
		if (rc < 0) {
   22426:	2800      	cmp	r0, #0
   22428:	daf2      	bge.n	22410 <outs+0xe>
}
   2242a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002242e <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2242e:	4040      	eors	r0, r0
   22430:	f380 8811 	msr	BASEPRI, r0
   22434:	f04f 0004 	mov.w	r0, #4
   22438:	df02      	svc	2
}
   2243a:	4770      	bx	lr

0002243c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2243c:	4770      	bx	lr

0002243e <fcb_append_to_scratch>:
{
   2243e:	b538      	push	{r3, r4, r5, lr}
		cur = fcb_getnext_sector(fcb, cur);
   22440:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
   22442:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   22444:	f000 fa45 	bl	228d2 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   22448:	6a23      	ldr	r3, [r4, #32]
   2244a:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   2244c:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   2244e:	d00f      	beq.n	22470 <fcb_append_to_scratch+0x32>
	if (!sector) {
   22450:	b170      	cbz	r0, 22470 <fcb_append_to_scratch+0x32>
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   22452:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   22454:	3201      	adds	r2, #1
   22456:	4601      	mov	r1, r0
   22458:	b292      	uxth	r2, r2
   2245a:	4620      	mov	r0, r4
   2245c:	f000 f8c9 	bl	225f2 <fcb_sector_hdr_init>
	if (rc) {
   22460:	b928      	cbnz	r0, 2246e <fcb_append_to_scratch+0x30>
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   22462:	2308      	movs	r3, #8
   22464:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   22466:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   22468:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   2246a:	3301      	adds	r3, #1
   2246c:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   2246e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSPC;
   22470:	f06f 001b 	mvn.w	r0, #27
   22474:	e7fb      	b.n	2246e <fcb_append_to_scratch+0x30>

00022476 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   22476:	b5f0      	push	{r4, r5, r6, r7, lr}
   22478:	b083      	sub	sp, #12
	int rc;
	uint8_t crc8[fcb->f_align];
   2247a:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
   2247e:	1dd3      	adds	r3, r2, #7
   22480:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
{
   22484:	af02      	add	r7, sp, #8
	uint8_t crc8[fcb->f_align];
   22486:	ebad 0d03 	sub.w	sp, sp, r3
   2248a:	ae02      	add	r6, sp, #8
{
   2248c:	4604      	mov	r4, r0
   2248e:	460d      	mov	r5, r1
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));
   22490:	4630      	mov	r0, r6
   22492:	21ff      	movs	r1, #255	; 0xff
   22494:	f001 fe85 	bl	241a2 <memset>

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   22498:	4632      	mov	r2, r6
   2249a:	4629      	mov	r1, r5
   2249c:	4620      	mov	r0, r4
   2249e:	f000 f96f 	bl	22780 <fcb_elem_crc8>
	if (rc) {
   224a2:	b9a8      	cbnz	r0, 224d0 <fcb_append_finish+0x5a>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   224a4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   224a8:	89aa      	ldrh	r2, [r5, #12]
   224aa:	68a9      	ldr	r1, [r5, #8]

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   224ac:	9300      	str	r3, [sp, #0]
	if (fcb->f_align <= 1U) {
   224ae:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   224b0:	bf81      	itttt	hi
   224b2:	f102 32ff 	addhi.w	r2, r2, #4294967295
   224b6:	18d2      	addhi	r2, r2, r3
   224b8:	4258      	neghi	r0, r3
   224ba:	4002      	andhi	r2, r0
   224bc:	440a      	add	r2, r1
   224be:	4633      	mov	r3, r6
   224c0:	6829      	ldr	r1, [r5, #0]
   224c2:	4620      	mov	r0, r4
   224c4:	f000 f821 	bl	2250a <fcb_flash_write>
	if (rc) {
   224c8:	2800      	cmp	r0, #0
		return -EIO;
   224ca:	bf18      	it	ne
   224cc:	f06f 0004 	mvnne.w	r0, #4
	}
	return 0;
}
   224d0:	3704      	adds	r7, #4
   224d2:	46bd      	mov	sp, r7
   224d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000224d6 <fcb_get_align>:
uint8_t
fcb_get_align(const struct fcb *fcb)
{
	uint8_t align;

	if (fcb->fap == NULL) {
   224d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
   224d8:	b108      	cbz	r0, 224de <fcb_get_align+0x8>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   224da:	f000 bb27 	b.w	22b2c <flash_area_align>

	return align;
}
   224de:	4770      	bx	lr

000224e0 <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   224e0:	b570      	push	{r4, r5, r6, lr}
   224e2:	4614      	mov	r4, r2
   224e4:	461a      	mov	r2, r3
   224e6:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   224e8:	684d      	ldr	r5, [r1, #4]
   224ea:	18e6      	adds	r6, r4, r3
   224ec:	42ae      	cmp	r6, r5
   224ee:	d809      	bhi.n	22504 <fcb_flash_read+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   224f0:	6b80      	ldr	r0, [r0, #56]	; 0x38
   224f2:	b120      	cbz	r0, 224fe <fcb_flash_read+0x1e>
		return -EIO;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   224f4:	6809      	ldr	r1, [r1, #0]
   224f6:	4421      	add	r1, r4
   224f8:	f000 faac 	bl	22a54 <flash_area_read>

	if (rc != 0) {
   224fc:	b108      	cbz	r0, 22502 <fcb_flash_read+0x22>
		return -EIO;
   224fe:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   22502:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22504:	f06f 0015 	mvn.w	r0, #21
   22508:	e7fb      	b.n	22502 <fcb_flash_read+0x22>

0002250a <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   2250a:	b570      	push	{r4, r5, r6, lr}
   2250c:	4614      	mov	r4, r2
   2250e:	461a      	mov	r2, r3
   22510:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   22512:	684d      	ldr	r5, [r1, #4]
   22514:	18e6      	adds	r6, r4, r3
   22516:	42ae      	cmp	r6, r5
   22518:	d809      	bhi.n	2252e <fcb_flash_write+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   2251a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2251c:	b120      	cbz	r0, 22528 <fcb_flash_write+0x1e>
		return -EIO;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   2251e:	6809      	ldr	r1, [r1, #0]
   22520:	4421      	add	r1, r4
   22522:	f000 fab4 	bl	22a8e <flash_area_write>

	if (rc != 0) {
   22526:	b108      	cbz	r0, 2252c <fcb_flash_write+0x22>
		return -EIO;
   22528:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   2252c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2252e:	f06f 0015 	mvn.w	r0, #21
   22532:	e7fb      	b.n	2252c <fcb_flash_write+0x22>

00022534 <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   22534:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   22536:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   22538:	b120      	cbz	r0, 22544 <fcb_erase_sector+0x10>
		return -EIO;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   2253a:	e9d1 1200 	ldrd	r1, r2, [r1]
   2253e:	f000 facf 	bl	22ae0 <flash_area_erase>

	if (rc != 0) {
   22542:	b108      	cbz	r0, 22548 <fcb_erase_sector+0x14>
		return -EIO;
   22544:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   22548:	bd08      	pop	{r3, pc}

0002254a <fcb_free_sector_cnt>:
fcb_free_sector_cnt(struct fcb *fcb)
{
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
   2254a:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
   2254c:	b538      	push	{r3, r4, r5, lr}
   2254e:	4605      	mov	r5, r0
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   22550:	2400      	movs	r4, #0
   22552:	796b      	ldrb	r3, [r5, #5]
   22554:	42a3      	cmp	r3, r4
   22556:	dc01      	bgt.n	2255c <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   22558:	4620      	mov	r0, r4
   2255a:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   2255c:	4628      	mov	r0, r5
   2255e:	f000 f9b8 	bl	228d2 <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   22562:	6a2b      	ldr	r3, [r5, #32]
   22564:	4283      	cmp	r3, r0
		fa = fcb_getnext_sector(fcb, fa);
   22566:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   22568:	d0f6      	beq.n	22558 <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   2256a:	3401      	adds	r4, #1
   2256c:	e7f1      	b.n	22552 <fcb_free_sector_cnt+0x8>

0002256e <fcb_put_len>:
 * and if there is any data at all or both bytes are equal to erase value.
 */
int
fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len)
{
	if (len < 0x80) {
   2256e:	2a7f      	cmp	r2, #127	; 0x7f
{
   22570:	b510      	push	{r4, lr}
	if (len < 0x80) {
   22572:	d806      	bhi.n	22582 <fcb_put_len+0x14>
		buf[0] = len ^ ~fcb->f_erase_value;
   22574:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   22578:	4053      	eors	r3, r2
   2257a:	43db      	mvns	r3, r3
   2257c:	700b      	strb	r3, [r1, #0]
		return 1;
   2257e:	2001      	movs	r0, #1
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
		return 2;
	} else {
		return -EINVAL;
	}
}
   22580:	bd10      	pop	{r4, pc}
	} else if (len < FCB_MAX_LEN) {
   22582:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   22586:	429a      	cmp	r2, r3
   22588:	d80e      	bhi.n	225a8 <fcb_put_len+0x3a>
		buf[0] = (len | 0x80) ^ ~fcb->f_erase_value;
   2258a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   2258e:	f062 047f 	orn	r4, r2, #127	; 0x7f
   22592:	4063      	eors	r3, r4
   22594:	43db      	mvns	r3, r3
   22596:	700b      	strb	r3, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   22598:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   2259c:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
   225a0:	43db      	mvns	r3, r3
   225a2:	704b      	strb	r3, [r1, #1]
		return 2;
   225a4:	2002      	movs	r0, #2
   225a6:	e7eb      	b.n	22580 <fcb_put_len+0x12>
		return -EINVAL;
   225a8:	f06f 0015 	mvn.w	r0, #21
   225ac:	e7e8      	b.n	22580 <fcb_put_len+0x12>

000225ae <fcb_get_len>:

int
fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len)
{
   225ae:	b530      	push	{r4, r5, lr}
	int rc;

	if ((buf[0] ^ ~fcb->f_erase_value) & 0x80) {
   225b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   225b4:	780d      	ldrb	r5, [r1, #0]
   225b6:	ea83 0005 	eor.w	r0, r3, r5
   225ba:	b2c4      	uxtb	r4, r0
   225bc:	f014 0f80 	tst.w	r4, #128	; 0x80
   225c0:	d10f      	bne.n	225e2 <fcb_get_len+0x34>
		if ((buf[0] == fcb->f_erase_value) &&
   225c2:	42ab      	cmp	r3, r5
   225c4:	7849      	ldrb	r1, [r1, #1]
   225c6:	d101      	bne.n	225cc <fcb_get_len+0x1e>
   225c8:	428b      	cmp	r3, r1
   225ca:	d00f      	beq.n	225ec <fcb_get_len+0x3e>
		    (buf[1] == fcb->f_erase_value)) {
			return -ENOTSUP;
		}
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   225cc:	404b      	eors	r3, r1
   225ce:	01db      	lsls	r3, r3, #7
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   225d0:	43e4      	mvns	r4, r4
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   225d2:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   225d6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   225da:	4323      	orrs	r3, r4
   225dc:	8013      	strh	r3, [r2, #0]
		rc = 2;
   225de:	2002      	movs	r0, #2
	} else {
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
		rc = 1;
	}
	return rc;
}
   225e0:	bd30      	pop	{r4, r5, pc}
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   225e2:	43c0      	mvns	r0, r0
   225e4:	b2c0      	uxtb	r0, r0
   225e6:	8010      	strh	r0, [r2, #0]
		rc = 1;
   225e8:	2001      	movs	r0, #1
   225ea:	e7f9      	b.n	225e0 <fcb_get_len+0x32>
			return -ENOTSUP;
   225ec:	f06f 0022 	mvn.w	r0, #34	; 0x22
   225f0:	e7f6      	b.n	225e0 <fcb_get_len+0x32>

000225f2 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, uint16_t id)
{
   225f2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const uint8_t ev = fcb->f_erase_value;
   225f4:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
	return (fcb->f_magic ^ ~MK32(ev));
   225f8:	6806      	ldr	r6, [r0, #0]
	int rc;

	fda.fd_magic = fcb_flash_magic(fcb);
	fda.fd_ver = fcb->f_version;
	fda._pad = fcb->f_erase_value;
	fda.fd_id = id;
   225fa:	f8ad 200e 	strh.w	r2, [sp, #14]
   225fe:	0423      	lsls	r3, r4, #16
   22600:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   22604:	4323      	orrs	r3, r4
   22606:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   2260a:	4073      	eors	r3, r6
   2260c:	43db      	mvns	r3, r3
	fda.fd_magic = fcb_flash_magic(fcb);
   2260e:	9302      	str	r3, [sp, #8]
	fda.fd_ver = fcb->f_version;
   22610:	7903      	ldrb	r3, [r0, #4]
   22612:	f88d 300c 	strb.w	r3, [sp, #12]

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   22616:	2308      	movs	r3, #8
   22618:	9300      	str	r3, [sp, #0]
   2261a:	2200      	movs	r2, #0
   2261c:	446b      	add	r3, sp
	fda._pad = fcb->f_erase_value;
   2261e:	f88d 400d 	strb.w	r4, [sp, #13]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   22622:	f7ff ff72 	bl	2250a <fcb_flash_write>
	if (rc != 0) {
   22626:	2800      	cmp	r0, #0
		return -EIO;
	}
	return 0;
}
   22628:	bf18      	it	ne
   2262a:	f06f 0004 	mvnne.w	r0, #4
   2262e:	b004      	add	sp, #16
   22630:	bd70      	pop	{r4, r5, r6, pc}

00022632 <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   22632:	b530      	push	{r4, r5, lr}
   22634:	4605      	mov	r5, r0
   22636:	b085      	sub	sp, #20
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   22638:	4614      	mov	r4, r2
   2263a:	b902      	cbnz	r2, 2263e <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   2263c:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   2263e:	2308      	movs	r3, #8
   22640:	9300      	str	r3, [sp, #0]
   22642:	2200      	movs	r2, #0
   22644:	4623      	mov	r3, r4
   22646:	4628      	mov	r0, r5
   22648:	f7ff ff4a 	bl	224e0 <fcb_flash_read>
	if (rc) {
   2264c:	b9a0      	cbnz	r0, 22678 <fcb_sector_hdr_read+0x46>
		return -EIO;
	}
	if (fdap->fd_magic == MK32(fcb->f_erase_value)) {
   2264e:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
   22652:	6821      	ldr	r1, [r4, #0]
   22654:	0413      	lsls	r3, r2, #16
   22656:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2265a:	4313      	orrs	r3, r2
   2265c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22660:	4299      	cmp	r1, r3
   22662:	d007      	beq.n	22674 <fcb_sector_hdr_read+0x42>
   22664:	682a      	ldr	r2, [r5, #0]
   22666:	4053      	eors	r3, r2
   22668:	43db      	mvns	r3, r3
		return 0;
	}
	if (fdap->fd_magic != fcb_flash_magic(fcb)) {
   2266a:	4299      	cmp	r1, r3
		return -ENOMSG;
   2266c:	bf0c      	ite	eq
   2266e:	2001      	moveq	r0, #1
   22670:	f06f 004f 	mvnne.w	r0, #79	; 0x4f
	}
	return 1;
}
   22674:	b005      	add	sp, #20
   22676:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   22678:	f06f 0004 	mvn.w	r0, #4
   2267c:	e7fa      	b.n	22674 <fcb_sector_hdr_read+0x42>

0002267e <fcb_init>:
{
   2267e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   22682:	688b      	ldr	r3, [r1, #8]
{
   22684:	b085      	sub	sp, #20
   22686:	460c      	mov	r4, r1
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   22688:	b92b      	cbnz	r3, 22696 <fcb_init+0x18>
		return -EINVAL;
   2268a:	f06f 0515 	mvn.w	r5, #21
}
   2268e:	4628      	mov	r0, r5
   22690:	b005      	add	sp, #20
   22692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   22696:	794b      	ldrb	r3, [r1, #5]
   22698:	798a      	ldrb	r2, [r1, #6]
   2269a:	1a9b      	subs	r3, r3, r2
   2269c:	2b00      	cmp	r3, #0
   2269e:	ddf4      	ble.n	2268a <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   226a0:	3138      	adds	r1, #56	; 0x38
   226a2:	b2c0      	uxtb	r0, r0
   226a4:	f7e0 fdd0 	bl	3248 <flash_area_open>
	if (rc != 0) {
   226a8:	4606      	mov	r6, r0
   226aa:	2800      	cmp	r0, #0
   226ac:	d1ed      	bne.n	2268a <fcb_init+0xc>
	dev = device_get_binding(fcb->fap->fa_dev_name);
   226ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   226b0:	68d8      	ldr	r0, [r3, #12]
   226b2:	f7fb fcb5 	bl	1e020 <z_impl_device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   226b6:	6883      	ldr	r3, [r0, #8]
   226b8:	691b      	ldr	r3, [r3, #16]
   226ba:	4798      	blx	r3
	fcb->f_erase_value = fparam->erase_value;
   226bc:	7903      	ldrb	r3, [r0, #4]
   226be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	align = fcb_get_align(fcb);
   226c2:	4620      	mov	r0, r4
   226c4:	f7ff ff07 	bl	224d6 <fcb_get_align>
	if (align == 0U) {
   226c8:	4683      	mov	fp, r0
   226ca:	2800      	cmp	r0, #0
   226cc:	d0dd      	beq.n	2268a <fcb_init+0xc>
	int oldest = -1, newest = -1;
   226ce:	f04f 33ff 	mov.w	r3, #4294967295
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   226d2:	46b2      	mov	sl, r6
   226d4:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   226d6:	4698      	mov	r8, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   226d8:	7962      	ldrb	r2, [r4, #5]
   226da:	42b2      	cmp	r2, r6
   226dc:	dc24      	bgt.n	22728 <fcb_init+0xaa>
	if (oldest < 0) {
   226de:	f1b8 3fff 	cmp.w	r8, #4294967295
   226e2:	d149      	bne.n	22778 <fcb_init+0xfa>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   226e4:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   226e6:	2200      	movs	r2, #0
   226e8:	4639      	mov	r1, r7
   226ea:	4620      	mov	r0, r4
   226ec:	f7ff ff81 	bl	225f2 <fcb_sector_hdr_init>
		if (rc) {
   226f0:	4605      	mov	r5, r0
   226f2:	2800      	cmp	r0, #0
   226f4:	d1cb      	bne.n	2268e <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   226f6:	46ba      	mov	sl, r7
	fcb->f_active.fe_sector = newest_sector;
   226f8:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   226fc:	2308      	movs	r3, #8
	fcb->f_align = align;
   226fe:	f884 b036 	strb.w	fp, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   22702:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   22704:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   22706:	f104 0624 	add.w	r6, r4, #36	; 0x24
   2270a:	4631      	mov	r1, r6
   2270c:	4620      	mov	r0, r4
   2270e:	f000 f8be 	bl	2288e <fcb_getnext_in_sector>
		if (rc == -ENOTSUP) {
   22712:	f110 0f23 	cmn.w	r0, #35	; 0x23
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   22716:	4605      	mov	r5, r0
		if (rc == -ENOTSUP) {
   22718:	d030      	beq.n	2277c <fcb_init+0xfe>
		if (rc != 0) {
   2271a:	2800      	cmp	r0, #0
   2271c:	d0f5      	beq.n	2270a <fcb_init+0x8c>
	return z_impl_k_mutex_init(mutex);
   2271e:	f104 000c 	add.w	r0, r4, #12
   22722:	f005 ff94 	bl	2864e <z_impl_k_mutex_init>
   22726:	e7b2      	b.n	2268e <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   22728:	68a2      	ldr	r2, [r4, #8]
   2272a:	9301      	str	r3, [sp, #4]
   2272c:	eb02 09c6 	add.w	r9, r2, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   22730:	4649      	mov	r1, r9
   22732:	aa02      	add	r2, sp, #8
   22734:	4620      	mov	r0, r4
   22736:	f7ff ff7c 	bl	22632 <fcb_sector_hdr_read>
		if (rc < 0) {
   2273a:	1e05      	subs	r5, r0, #0
   2273c:	dba7      	blt.n	2268e <fcb_init+0x10>
		if (rc == 0) {
   2273e:	9b01      	ldr	r3, [sp, #4]
   22740:	d008      	beq.n	22754 <fcb_init+0xd6>
		if (oldest < 0) {
   22742:	f1b8 3fff 	cmp.w	r8, #4294967295
   22746:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2274a:	d105      	bne.n	22758 <fcb_init+0xda>
			oldest = newest = fda.fd_id;
   2274c:	4690      	mov	r8, r2
			oldest_sector = newest_sector = sector;
   2274e:	46ca      	mov	sl, r9
   22750:	464f      	mov	r7, r9
			oldest = newest = fda.fd_id;
   22752:	4613      	mov	r3, r2
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   22754:	3601      	adds	r6, #1
   22756:	e7bf      	b.n	226d8 <fcb_init+0x5a>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   22758:	b215      	sxth	r5, r2
   2275a:	b218      	sxth	r0, r3
   2275c:	1a28      	subs	r0, r5, r0
   2275e:	2800      	cmp	r0, #0
   22760:	dd02      	ble.n	22768 <fcb_init+0xea>
			newest = fda.fd_id;
   22762:	4613      	mov	r3, r2
			newest_sector = sector;
   22764:	46ca      	mov	sl, r9
   22766:	e7f5      	b.n	22754 <fcb_init+0xd6>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   22768:	fa0f f188 	sxth.w	r1, r8
   2276c:	1b49      	subs	r1, r1, r5
			oldest = fda.fd_id;
   2276e:	2900      	cmp	r1, #0
   22770:	bfc4      	itt	gt
   22772:	4690      	movgt	r8, r2
   22774:	464f      	movgt	r7, r9
   22776:	e7ed      	b.n	22754 <fcb_init+0xd6>
   22778:	461d      	mov	r5, r3
   2277a:	e7bd      	b.n	226f8 <fcb_init+0x7a>
			rc = 0;
   2277c:	2500      	movs	r5, #0
   2277e:	e7ce      	b.n	2271e <fcb_init+0xa0>

00022780 <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   22780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22784:	460c      	mov	r4, r1
   22786:	4617      	mov	r7, r2
	uint16_t len;
	uint32_t off;
	uint32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   22788:	e9d1 1200 	ldrd	r1, r2, [r1]
   2278c:	684b      	ldr	r3, [r1, #4]
   2278e:	1c95      	adds	r5, r2, #2
   22790:	429d      	cmp	r5, r3
{
   22792:	b08c      	sub	sp, #48	; 0x30
   22794:	4606      	mov	r6, r0
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   22796:	d84c      	bhi.n	22832 <fcb_elem_crc8+0xb2>
		return -ENOTSUP;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   22798:	2302      	movs	r3, #2
   2279a:	9300      	str	r3, [sp, #0]
   2279c:	ab04      	add	r3, sp, #16
   2279e:	f7ff fe9f 	bl	224e0 <fcb_flash_read>
	if (rc) {
   227a2:	b120      	cbz	r0, 227ae <fcb_elem_crc8+0x2e>
		return -EIO;
   227a4:	f06f 0004 	mvn.w	r0, #4
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   227a8:	b00c      	add	sp, #48	; 0x30
   227aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(fcb, tmp_str, &len);
   227ae:	f10d 020e 	add.w	r2, sp, #14
   227b2:	a904      	add	r1, sp, #16
   227b4:	4630      	mov	r0, r6
   227b6:	f7ff fefa 	bl	225ae <fcb_get_len>
	if (cnt < 0) {
   227ba:	2800      	cmp	r0, #0
   227bc:	dbf4      	blt.n	227a8 <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   227be:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
   227c2:	6861      	ldr	r1, [r4, #4]
	if (fcb->f_align <= 1U) {
   227c4:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   227c6:	bf88      	it	hi
   227c8:	f102 35ff 	addhi.w	r5, r2, #4294967295
   227cc:	b283      	uxth	r3, r0
   227ce:	bf82      	ittt	hi
   227d0:	195b      	addhi	r3, r3, r5
   227d2:	4252      	neghi	r2, r2
   227d4:	4013      	andhi	r3, r2
   227d6:	440b      	add	r3, r1
   227d8:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   227da:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   227de:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   227e0:	4602      	mov	r2, r0
   227e2:	a904      	add	r1, sp, #16
   227e4:	20ff      	movs	r0, #255	; 0xff
   227e6:	f7df fc71 	bl	20cc <crc8_ccitt>
	off = loc->fe_data_off;
   227ea:	68a5      	ldr	r5, [r4, #8]
	end = loc->fe_data_off + len;
   227ec:	f8bd 900e 	ldrh.w	r9, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   227f0:	4682      	mov	sl, r0
	end = loc->fe_data_off + len;
   227f2:	44a9      	add	r9, r5
	for (; off < end; off += blk_sz) {
   227f4:	454d      	cmp	r5, r9
   227f6:	d303      	bcc.n	22800 <fcb_elem_crc8+0x80>
	*c8p = crc8;
   227f8:	f887 a000 	strb.w	sl, [r7]
	return 0;
   227fc:	2000      	movs	r0, #0
   227fe:	e7d3      	b.n	227a8 <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   22800:	eba9 0805 	sub.w	r8, r9, r5
   22804:	f1b8 0f20 	cmp.w	r8, #32
   22808:	bf28      	it	cs
   2280a:	f04f 0820 	movcs.w	r8, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   2280e:	f8cd 8000 	str.w	r8, [sp]
   22812:	ab04      	add	r3, sp, #16
   22814:	462a      	mov	r2, r5
   22816:	6821      	ldr	r1, [r4, #0]
   22818:	4630      	mov	r0, r6
   2281a:	f7ff fe61 	bl	224e0 <fcb_flash_read>
		if (rc) {
   2281e:	2800      	cmp	r0, #0
   22820:	d1c0      	bne.n	227a4 <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   22822:	4650      	mov	r0, sl
   22824:	4642      	mov	r2, r8
   22826:	a904      	add	r1, sp, #16
   22828:	f7df fc50 	bl	20cc <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   2282c:	4445      	add	r5, r8
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   2282e:	4682      	mov	sl, r0
   22830:	e7e0      	b.n	227f4 <fcb_elem_crc8+0x74>
		return -ENOTSUP;
   22832:	f06f 0022 	mvn.w	r0, #34	; 0x22
   22836:	e7b7      	b.n	227a8 <fcb_elem_crc8+0x28>

00022838 <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   22838:	b530      	push	{r4, r5, lr}
   2283a:	b085      	sub	sp, #20
	int rc;
	uint8_t crc8;
	uint8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   2283c:	f10d 020e 	add.w	r2, sp, #14
{
   22840:	4605      	mov	r5, r0
   22842:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   22844:	f7ff ff9c 	bl	22780 <fcb_elem_crc8>
	if (rc) {
   22848:	b9e0      	cbnz	r0, 22884 <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   2284a:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   2284e:	89a2      	ldrh	r2, [r4, #12]
   22850:	68a1      	ldr	r1, [r4, #8]
	if (fcb->f_align <= 1U) {
   22852:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   22854:	bf81      	itttt	hi
   22856:	f102 32ff 	addhi.w	r2, r2, #4294967295
   2285a:	18d2      	addhi	r2, r2, r3
   2285c:	425b      	neghi	r3, r3
   2285e:	401a      	andhi	r2, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   22860:	2301      	movs	r3, #1
   22862:	9300      	str	r3, [sp, #0]
   22864:	440a      	add	r2, r1
   22866:	f10d 030f 	add.w	r3, sp, #15
   2286a:	6821      	ldr	r1, [r4, #0]
   2286c:	4628      	mov	r0, r5
   2286e:	f7ff fe37 	bl	224e0 <fcb_flash_read>
	if (rc) {
   22872:	b948      	cbnz	r0, 22888 <fcb_elem_info+0x50>
		return -EIO;
	}

	if (fl_crc8 != crc8) {
   22874:	f89d 200f 	ldrb.w	r2, [sp, #15]
   22878:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2287c:	429a      	cmp	r2, r3
		return -EBADMSG;
   2287e:	bf18      	it	ne
   22880:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}
	return 0;
}
   22884:	b005      	add	sp, #20
   22886:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   22888:	f06f 0004 	mvn.w	r0, #4
   2288c:	e7fa      	b.n	22884 <fcb_elem_info+0x4c>

0002288e <fcb_getnext_in_sector>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   2288e:	b538      	push	{r3, r4, r5, lr}
   22890:	4604      	mov	r4, r0
   22892:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   22894:	f7ff ffd0 	bl	22838 <fcb_elem_info>
	if (rc == 0 || rc == -EBADMSG) {
   22898:	b110      	cbz	r0, 228a0 <fcb_getnext_in_sector+0x12>
   2289a:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   2289e:	d117      	bne.n	228d0 <fcb_getnext_in_sector+0x42>
		do {
			loc->fe_elem_off = loc->fe_data_off +
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   228a0:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
   228a4:	89ab      	ldrh	r3, [r5, #12]
			loc->fe_elem_off = loc->fe_data_off +
   228a6:	68aa      	ldr	r2, [r5, #8]
	if (fcb->f_align <= 1U) {
   228a8:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   228aa:	bf81      	itttt	hi
   228ac:	f103 33ff 	addhi.w	r3, r3, #4294967295
   228b0:	185b      	addhi	r3, r3, r1
   228b2:	4248      	neghi	r0, r1
   228b4:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1U) {
   228b6:	2901      	cmp	r1, #1
   228b8:	4413      	add	r3, r2
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   228ba:	bf86      	itte	hi
   228bc:	424a      	neghi	r2, r1
   228be:	400a      	andhi	r2, r1
		return len;
   228c0:	2201      	movls	r2, #1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   228c2:	4413      	add	r3, r2
			loc->fe_elem_off = loc->fe_data_off +
   228c4:	606b      	str	r3, [r5, #4]
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   228c6:	4629      	mov	r1, r5
   228c8:	4620      	mov	r0, r4
   228ca:	f7ff ffb5 	bl	22838 <fcb_elem_info>
			if (rc != -EBADMSG) {
   228ce:	e7e4      	b.n	2289a <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == -EBADMSG);
	}
	return rc;
}
   228d0:	bd38      	pop	{r3, r4, r5, pc}

000228d2 <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   228d2:	6882      	ldr	r2, [r0, #8]
   228d4:	7943      	ldrb	r3, [r0, #5]
	sector++;
   228d6:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   228d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   228dc:	4299      	cmp	r1, r3
   228de:	bf34      	ite	cc
   228e0:	4608      	movcc	r0, r1
   228e2:	4610      	movcs	r0, r2
   228e4:	4770      	bx	lr

000228e6 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   228e6:	680b      	ldr	r3, [r1, #0]
{
   228e8:	b570      	push	{r4, r5, r6, lr}
   228ea:	4605      	mov	r5, r0
   228ec:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   228ee:	b90b      	cbnz	r3, 228f4 <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   228f0:	6a03      	ldr	r3, [r0, #32]
   228f2:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0U) {
   228f4:	6863      	ldr	r3, [r4, #4]
   228f6:	b95b      	cbnz	r3, 22910 <fcb_getnext_nolock+0x2a>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   228f8:	2308      	movs	r3, #8
   228fa:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   228fc:	4621      	mov	r1, r4
   228fe:	4628      	mov	r0, r5
   22900:	f7ff ff9a 	bl	22838 <fcb_elem_info>
		switch (rc) {
   22904:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   22908:	d021      	beq.n	2294e <fcb_getnext_nolock+0x68>
   2290a:	b950      	cbnz	r0, 22922 <fcb_getnext_nolock+0x3c>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   2290c:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   2290e:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   22910:	4621      	mov	r1, r4
   22912:	4628      	mov	r0, r5
   22914:	f7ff ffbb 	bl	2288e <fcb_getnext_in_sector>
		if (rc == 0) {
   22918:	2800      	cmp	r0, #0
   2291a:	d0f7      	beq.n	2290c <fcb_getnext_nolock+0x26>
		if (rc == -ENOTSUP) {
   2291c:	f110 0f23 	cmn.w	r0, #35	; 0x23
   22920:	d113      	bne.n	2294a <fcb_getnext_nolock+0x64>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   22922:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   22924:	6821      	ldr	r1, [r4, #0]
   22926:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   22928:	4299      	cmp	r1, r3
   2292a:	d019      	beq.n	22960 <fcb_getnext_nolock+0x7a>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   2292c:	4628      	mov	r0, r5
   2292e:	f7ff ffd0 	bl	228d2 <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   22932:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   22934:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   22938:	4628      	mov	r0, r5
   2293a:	f7ff ff7d 	bl	22838 <fcb_elem_info>
			switch (rc) {
   2293e:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   22942:	d004      	beq.n	2294e <fcb_getnext_nolock+0x68>
   22944:	2800      	cmp	r0, #0
   22946:	d0e1      	beq.n	2290c <fcb_getnext_nolock+0x26>
   22948:	e7ec      	b.n	22924 <fcb_getnext_nolock+0x3e>
	while (rc == -EBADMSG) {
   2294a:	304d      	adds	r0, #77	; 0x4d
   2294c:	d1de      	bne.n	2290c <fcb_getnext_nolock+0x26>
		rc = fcb_getnext_in_sector(fcb, loc);
   2294e:	4621      	mov	r1, r4
   22950:	4628      	mov	r0, r5
   22952:	f7ff ff9c 	bl	2288e <fcb_getnext_in_sector>
		if (rc == 0) {
   22956:	2800      	cmp	r0, #0
   22958:	d0d8      	beq.n	2290c <fcb_getnext_nolock+0x26>
		if (rc != -EBADMSG) {
   2295a:	304d      	adds	r0, #77	; 0x4d
   2295c:	d0f7      	beq.n	2294e <fcb_getnext_nolock+0x68>
next_sector:
   2295e:	e7e0      	b.n	22922 <fcb_getnext_nolock+0x3c>
				return -ENOTSUP;
   22960:	f06f 0022 	mvn.w	r0, #34	; 0x22
   22964:	e7d3      	b.n	2290e <fcb_getnext_nolock+0x28>

00022966 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   22966:	b570      	push	{r4, r5, r6, lr}
   22968:	4604      	mov	r4, r0
   2296a:	460e      	mov	r6, r1
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   2296c:	f100 050c 	add.w	r5, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   22970:	f04f 32ff 	mov.w	r2, #4294967295
   22974:	f04f 33ff 	mov.w	r3, #4294967295
   22978:	4628      	mov	r0, r5
   2297a:	f7fb fe83 	bl	1e684 <z_impl_k_mutex_lock>
	if (rc) {
   2297e:	b948      	cbnz	r0, 22994 <fcb_getnext+0x2e>
		return -EINVAL;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   22980:	4631      	mov	r1, r6
   22982:	4620      	mov	r0, r4
   22984:	f7ff ffaf 	bl	228e6 <fcb_getnext_nolock>
   22988:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2298a:	4628      	mov	r0, r5
   2298c:	f7fb ff4e 	bl	1e82c <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   22990:	4620      	mov	r0, r4
   22992:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22994:	f06f 0415 	mvn.w	r4, #21
   22998:	e7fa      	b.n	22990 <fcb_getnext+0x2a>

0002299a <fcb_rotate>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   2299a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2299c:	4604      	mov	r4, r0
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   2299e:	f100 060c 	add.w	r6, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   229a2:	f04f 32ff 	mov.w	r2, #4294967295
   229a6:	f04f 33ff 	mov.w	r3, #4294967295
   229aa:	4630      	mov	r0, r6
   229ac:	f7fb fe6a 	bl	1e684 <z_impl_k_mutex_lock>
	if (rc) {
   229b0:	bb48      	cbnz	r0, 22a06 <fcb_rotate+0x6c>
		return -EINVAL;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   229b2:	6a21      	ldr	r1, [r4, #32]
   229b4:	4620      	mov	r0, r4
   229b6:	f7ff fdbd 	bl	22534 <fcb_erase_sector>
	if (rc) {
   229ba:	bb08      	cbnz	r0, 22a00 <fcb_rotate+0x66>
		rc = -EIO;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   229bc:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   229c0:	4299      	cmp	r1, r3
   229c2:	d112      	bne.n	229ea <fcb_rotate+0x50>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   229c4:	4620      	mov	r0, r4
   229c6:	f7ff ff84 	bl	228d2 <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   229ca:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   229cc:	3201      	adds	r2, #1
   229ce:	4601      	mov	r1, r0
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   229d0:	4607      	mov	r7, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   229d2:	b292      	uxth	r2, r2
   229d4:	4620      	mov	r0, r4
   229d6:	f7ff fe0c 	bl	225f2 <fcb_sector_hdr_init>
		if (rc) {
   229da:	4605      	mov	r5, r0
   229dc:	b958      	cbnz	r0, 229f6 <fcb_rotate+0x5c>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   229de:	2308      	movs	r3, #8
   229e0:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   229e2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   229e4:	6267      	str	r7, [r4, #36]	; 0x24
		fcb->f_active_id++;
   229e6:	3301      	adds	r3, #1
   229e8:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   229ea:	6a21      	ldr	r1, [r4, #32]
   229ec:	4620      	mov	r0, r4
   229ee:	f7ff ff70 	bl	228d2 <fcb_getnext_sector>
   229f2:	2500      	movs	r5, #0
   229f4:	6220      	str	r0, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   229f6:	4630      	mov	r0, r6
   229f8:	f7fb ff18 	bl	1e82c <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   229fc:	4628      	mov	r0, r5
   229fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = -EIO;
   22a00:	f06f 0504 	mvn.w	r5, #4
   22a04:	e7f7      	b.n	229f6 <fcb_rotate+0x5c>
		return -EINVAL;
   22a06:	f06f 0515 	mvn.w	r5, #21
   22a0a:	e7f7      	b.n	229fc <fcb_rotate+0x62>

00022a0c <z_impl_flash_write_protection_set>:
	return api->write_protection(dev, enable);
   22a0c:	6883      	ldr	r3, [r0, #8]
   22a0e:	68db      	ldr	r3, [r3, #12]
   22a10:	4718      	bx	r3

00022a12 <device_get_binding>:
   22a12:	f7fb bb05 	b.w	1e020 <z_impl_device_get_binding>

00022a16 <get_sectors_cb>:
{
   22a16:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   22a18:	6802      	ldr	r2, [r0, #0]
   22a1a:	684c      	ldr	r4, [r1, #4]
   22a1c:	42a2      	cmp	r2, r4
   22a1e:	d316      	bcc.n	22a4e <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   22a20:	688b      	ldr	r3, [r1, #8]
   22a22:	4423      	add	r3, r4
   22a24:	429a      	cmp	r2, r3
   22a26:	d206      	bcs.n	22a36 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   22a28:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   22a2c:	42ab      	cmp	r3, r5
   22a2e:	d304      	bcc.n	22a3a <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   22a30:	f06f 030b 	mvn.w	r3, #11
   22a34:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   22a36:	2000      	movs	r0, #0
   22a38:	e00a      	b.n	22a50 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   22a3a:	68cd      	ldr	r5, [r1, #12]
   22a3c:	1b12      	subs	r2, r2, r4
   22a3e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   22a42:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   22a46:	6842      	ldr	r2, [r0, #4]
   22a48:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   22a4a:	3301      	adds	r3, #1
   22a4c:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   22a4e:	2001      	movs	r0, #1
}
   22a50:	bd70      	pop	{r4, r5, r6, pc}

00022a52 <flash_area_close>:
}
   22a52:	4770      	bx	lr

00022a54 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   22a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a58:	461e      	mov	r6, r3
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   22a5a:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   22a5c:	428b      	cmp	r3, r1
{
   22a5e:	4605      	mov	r5, r0
   22a60:	460c      	mov	r4, r1
   22a62:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   22a64:	d30f      	bcc.n	22a86 <flash_area_read+0x32>
   22a66:	1872      	adds	r2, r6, r1
   22a68:	4293      	cmp	r3, r2
   22a6a:	d30c      	bcc.n	22a86 <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   22a6c:	68c0      	ldr	r0, [r0, #12]
   22a6e:	f7ff ffd0 	bl	22a12 <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   22a72:	6869      	ldr	r1, [r5, #4]
   22a74:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   22a76:	6883      	ldr	r3, [r0, #8]
   22a78:	681c      	ldr	r4, [r3, #0]
   22a7a:	463a      	mov	r2, r7
   22a7c:	4633      	mov	r3, r6
   22a7e:	46a4      	mov	ip, r4
}
   22a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22a84:	4760      	bx	ip
   22a86:	f06f 0015 	mvn.w	r0, #21
   22a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022a8e <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   22a8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22a92:	4698      	mov	r8, r3
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   22a94:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   22a96:	428b      	cmp	r3, r1
{
   22a98:	4607      	mov	r7, r0
   22a9a:	460d      	mov	r5, r1
   22a9c:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   22a9e:	d31c      	bcc.n	22ada <flash_area_write+0x4c>
   22aa0:	eb08 0201 	add.w	r2, r8, r1
   22aa4:	4293      	cmp	r3, r2
   22aa6:	d318      	bcc.n	22ada <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   22aa8:	68c0      	ldr	r0, [r0, #12]
   22aaa:	f7ff ffb2 	bl	22a12 <device_get_binding>
   22aae:	4606      	mov	r6, r0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&enable, K_SYSCALL_FLASH_WRITE_PROTECTION_SET);
	}
#endif
	compiler_barrier();
	return z_impl_flash_write_protection_set(dev, enable);
   22ab0:	2100      	movs	r1, #0
   22ab2:	f7ff ffab 	bl	22a0c <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   22ab6:	4604      	mov	r4, r0
   22ab8:	b960      	cbnz	r0, 22ad4 <flash_area_write+0x46>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   22aba:	6879      	ldr	r1, [r7, #4]
   22abc:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   22abe:	68b3      	ldr	r3, [r6, #8]
   22ac0:	464a      	mov	r2, r9
   22ac2:	685c      	ldr	r4, [r3, #4]
   22ac4:	4630      	mov	r0, r6
   22ac6:	4643      	mov	r3, r8
   22ac8:	47a0      	blx	r4
   22aca:	4604      	mov	r4, r0
   22acc:	2101      	movs	r1, #1
   22ace:	4630      	mov	r0, r6
   22ad0:	f7ff ff9c 	bl	22a0c <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   22ad4:	4620      	mov	r0, r4
   22ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   22ada:	f06f 0415 	mvn.w	r4, #21
   22ade:	e7f9      	b.n	22ad4 <flash_area_write+0x46>

00022ae0 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   22ae0:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   22ae2:	428b      	cmp	r3, r1
{
   22ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ae8:	4607      	mov	r7, r0
   22aea:	460d      	mov	r5, r1
   22aec:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   22aee:	d31a      	bcc.n	22b26 <flash_area_erase+0x46>
   22af0:	440a      	add	r2, r1
   22af2:	4293      	cmp	r3, r2
   22af4:	d317      	bcc.n	22b26 <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   22af6:	68c0      	ldr	r0, [r0, #12]
   22af8:	f7ff ff8b 	bl	22a12 <device_get_binding>
   22afc:	4606      	mov	r6, r0
   22afe:	2100      	movs	r1, #0
   22b00:	f7ff ff84 	bl	22a0c <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   22b04:	4604      	mov	r4, r0
   22b06:	b958      	cbnz	r0, 22b20 <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   22b08:	6879      	ldr	r1, [r7, #4]
   22b0a:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
   22b0c:	68b3      	ldr	r3, [r6, #8]
   22b0e:	4642      	mov	r2, r8
   22b10:	689b      	ldr	r3, [r3, #8]
   22b12:	4630      	mov	r0, r6
   22b14:	4798      	blx	r3
   22b16:	4604      	mov	r4, r0
   22b18:	2101      	movs	r1, #1
   22b1a:	4630      	mov	r0, r6
   22b1c:	f7ff ff76 	bl	22a0c <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   22b20:	4620      	mov	r0, r4
   22b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   22b26:	f06f 0415 	mvn.w	r4, #21
   22b2a:	e7f9      	b.n	22b20 <flash_area_erase+0x40>

00022b2c <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
   22b2c:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   22b2e:	68c0      	ldr	r0, [r0, #12]
   22b30:	f7ff ff6f 	bl	22a12 <device_get_binding>
	return api->get_parameters(dev)->write_block_size;
   22b34:	6883      	ldr	r3, [r0, #8]
   22b36:	691b      	ldr	r3, [r3, #16]
   22b38:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   22b3a:	7800      	ldrb	r0, [r0, #0]
   22b3c:	bd08      	pop	{r3, pc}

00022b3e <settings_load>:
	return settings_load_subtree(NULL);
   22b3e:	2000      	movs	r0, #0
   22b40:	f7e0 bbf6 	b.w	3330 <settings_load_subtree>

00022b44 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   22b44:	2200      	movs	r2, #0
   22b46:	4611      	mov	r1, r2
   22b48:	f7e0 bbba 	b.w	32c0 <settings_save_one>

00022b4c <settings_name_steq>:
{
   22b4c:	b530      	push	{r4, r5, lr}
	if (next) {
   22b4e:	b10a      	cbz	r2, 22b54 <settings_name_steq+0x8>
		*next = NULL;
   22b50:	2300      	movs	r3, #0
   22b52:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   22b54:	b190      	cbz	r0, 22b7c <settings_name_steq+0x30>
   22b56:	b151      	cbz	r1, 22b6e <settings_name_steq+0x22>
   22b58:	1e4d      	subs	r5, r1, #1
	while ((*key != '\0') && (*key == *name) &&
   22b5a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   22b5e:	4603      	mov	r3, r0
   22b60:	f810 1b01 	ldrb.w	r1, [r0], #1
   22b64:	b15c      	cbz	r4, 22b7e <settings_name_steq+0x32>
   22b66:	428c      	cmp	r4, r1
   22b68:	d101      	bne.n	22b6e <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   22b6a:	2c3d      	cmp	r4, #61	; 0x3d
   22b6c:	d1f5      	bne.n	22b5a <settings_name_steq+0xe>
	return 0;
   22b6e:	2000      	movs	r0, #0
   22b70:	e004      	b.n	22b7c <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   22b72:	293d      	cmp	r1, #61	; 0x3d
   22b74:	d008      	beq.n	22b88 <settings_name_steq+0x3c>
   22b76:	fab1 f081 	clz	r0, r1
   22b7a:	0940      	lsrs	r0, r0, #5
}
   22b7c:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   22b7e:	292f      	cmp	r1, #47	; 0x2f
   22b80:	d1f7      	bne.n	22b72 <settings_name_steq+0x26>
		if (next) {
   22b82:	b10a      	cbz	r2, 22b88 <settings_name_steq+0x3c>
			*next = name + 1;
   22b84:	3301      	adds	r3, #1
   22b86:	6013      	str	r3, [r2, #0]
		return 1;
   22b88:	2001      	movs	r0, #1
   22b8a:	e7f7      	b.n	22b7c <settings_name_steq+0x30>

00022b8c <settings_name_next>:
{
   22b8c:	b530      	push	{r4, r5, lr}
   22b8e:	4603      	mov	r3, r0
	if (next) {
   22b90:	b109      	cbz	r1, 22b96 <settings_name_next+0xa>
		*next = NULL;
   22b92:	2200      	movs	r2, #0
   22b94:	600a      	str	r2, [r1, #0]
	if (!name) {
   22b96:	b16b      	cbz	r3, 22bb4 <settings_name_next+0x28>
   22b98:	461a      	mov	r2, r3
   22b9a:	4614      	mov	r4, r2
   22b9c:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   22b9e:	f812 5b01 	ldrb.w	r5, [r2], #1
   22ba2:	b135      	cbz	r5, 22bb2 <settings_name_next+0x26>
   22ba4:	2d3d      	cmp	r5, #61	; 0x3d
   22ba6:	d004      	beq.n	22bb2 <settings_name_next+0x26>
   22ba8:	2d2f      	cmp	r5, #47	; 0x2f
   22baa:	d1f6      	bne.n	22b9a <settings_name_next+0xe>
		if (next) {
   22bac:	b109      	cbz	r1, 22bb2 <settings_name_next+0x26>
			*next = name + 1;
   22bae:	3401      	adds	r4, #1
   22bb0:	600c      	str	r4, [r1, #0]
}
   22bb2:	bd30      	pop	{r4, r5, pc}
		return 0;
   22bb4:	4618      	mov	r0, r3
   22bb6:	e7fc      	b.n	22bb2 <settings_name_next+0x26>

00022bb8 <settings_line_len_calc>:
{
   22bb8:	b510      	push	{r4, lr}
   22bba:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   22bbc:	f001 fa75 	bl	240aa <strlen>
   22bc0:	3401      	adds	r4, #1
}
   22bc2:	4420      	add	r0, r4
   22bc4:	bd10      	pop	{r4, pc}

00022bc6 <settings_line_raw_read>:
{
   22bc6:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   22bc8:	9c04      	ldr	r4, [sp, #16]
   22bca:	9401      	str	r4, [sp, #4]
   22bcc:	2400      	movs	r4, #0
   22bce:	9400      	str	r4, [sp, #0]
   22bd0:	f7e0 fcf0 	bl	35b4 <settings_line_raw_read_until>
}
   22bd4:	b002      	add	sp, #8
   22bd6:	bd10      	pop	{r4, pc}

00022bd8 <settings_line_read_cb>:
{
   22bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   22bda:	6803      	ldr	r3, [r0, #0]
   22bdc:	9300      	str	r3, [sp, #0]
   22bde:	6840      	ldr	r0, [r0, #4]
   22be0:	ab03      	add	r3, sp, #12
   22be2:	f7ff fff0 	bl	22bc6 <settings_line_raw_read>
	if (rc == 0) {
   22be6:	b918      	cbnz	r0, 22bf0 <settings_line_read_cb+0x18>
		return len_read;
   22be8:	9803      	ldr	r0, [sp, #12]
}
   22bea:	b005      	add	sp, #20
   22bec:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   22bf0:	f04f 30ff 	mov.w	r0, #4294967295
   22bf4:	e7f9      	b.n	22bea <settings_line_read_cb+0x12>

00022bf6 <settings_line_name_read>:
{
   22bf6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read_until(0, out, len_req, len_read,
   22bf8:	9301      	str	r3, [sp, #4]
   22bfa:	f10d 030f 	add.w	r3, sp, #15
   22bfe:	9300      	str	r3, [sp, #0]
	char const until_char = '=';
   22c00:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   22c02:	4613      	mov	r3, r2
   22c04:	460a      	mov	r2, r1
   22c06:	4601      	mov	r1, r0
   22c08:	2000      	movs	r0, #0
	char const until_char = '=';
   22c0a:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   22c0e:	f7e0 fcd1 	bl	35b4 <settings_line_raw_read_until>
}
   22c12:	b004      	add	sp, #16
   22c14:	bd10      	pop	{r4, pc}

00022c16 <settings_line_dup_check_cb>:
{
   22c16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22c1a:	4689      	mov	r9, r1
   22c1c:	b088      	sub	sp, #32
	if (strcmp(name, cdca->name)) {
   22c1e:	6819      	ldr	r1, [r3, #0]
{
   22c20:	4692      	mov	sl, r2
   22c22:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   22c24:	f001 fa51 	bl	240ca <strcmp>
   22c28:	4606      	mov	r6, r0
   22c2a:	b940      	cbnz	r0, 22c3e <settings_line_dup_check_cb+0x28>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   22c2c:	4649      	mov	r1, r9
   22c2e:	4650      	mov	r0, sl
   22c30:	f7e0 fd7e 	bl	3730 <settings_line_val_get_len>
	if (len_read != cdca->val_len) {
   22c34:	68a3      	ldr	r3, [r4, #8]
   22c36:	4283      	cmp	r3, r0
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   22c38:	4605      	mov	r5, r0
	if (len_read != cdca->val_len) {
   22c3a:	d004      	beq.n	22c46 <settings_line_dup_check_cb+0x30>
		cdca->is_dup = 0;
   22c3c:	60e6      	str	r6, [r4, #12]
}
   22c3e:	2000      	movs	r0, #0
   22c40:	b008      	add	sp, #32
   22c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (len_read == 0) {
   22c46:	b913      	cbnz	r3, 22c4e <settings_line_dup_check_cb+0x38>
			cdca->is_dup = 1;
   22c48:	2301      	movs	r3, #1
			cdca->is_dup = 0;
   22c4a:	60e3      	str	r3, [r4, #12]
   22c4c:	e7f7      	b.n	22c3e <settings_line_dup_check_cb+0x28>
		if (!settings_line_cmp(cdca->val, cdca->val_len,
   22c4e:	f8d4 8004 	ldr.w	r8, [r4, #4]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   22c52:	f8cd 9000 	str.w	r9, [sp]
		len_read = exp_len = MIN(sizeof(buf), rem);
   22c56:	2d10      	cmp	r5, #16
   22c58:	462f      	mov	r7, r5
   22c5a:	bf28      	it	cs
   22c5c:	2710      	movcs	r7, #16
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   22c5e:	ab03      	add	r3, sp, #12
   22c60:	463a      	mov	r2, r7
   22c62:	a904      	add	r1, sp, #16
   22c64:	eb0a 0006 	add.w	r0, sl, r6
		len_read = exp_len = MIN(sizeof(buf), rem);
   22c68:	9703      	str	r7, [sp, #12]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   22c6a:	f7ff ffac 	bl	22bc6 <settings_line_raw_read>
		if (rc) {
   22c6e:	b970      	cbnz	r0, 22c8e <settings_line_dup_check_cb+0x78>
		if (len_read != exp_len) {
   22c70:	9b03      	ldr	r3, [sp, #12]
   22c72:	429f      	cmp	r7, r3
   22c74:	d10b      	bne.n	22c8e <settings_line_dup_check_cb+0x78>
		rc = memcmp(val, buf, len_read);
   22c76:	463a      	mov	r2, r7
   22c78:	a904      	add	r1, sp, #16
   22c7a:	4640      	mov	r0, r8
   22c7c:	f001 fa40 	bl	24100 <memcmp>
		if (rc) {
   22c80:	b928      	cbnz	r0, 22c8e <settings_line_dup_check_cb+0x78>
		val += len_read;
   22c82:	9b03      	ldr	r3, [sp, #12]
	for (rem = val_len; rem > 0; rem -= len_read) {
   22c84:	1aed      	subs	r5, r5, r3
		val += len_read;
   22c86:	4498      	add	r8, r3
		off += len_read;
   22c88:	441e      	add	r6, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   22c8a:	d1e2      	bne.n	22c52 <settings_line_dup_check_cb+0x3c>
   22c8c:	e7dc      	b.n	22c48 <settings_line_dup_check_cb+0x32>
			cdca->is_dup = 0;
   22c8e:	2300      	movs	r3, #0
   22c90:	e7db      	b.n	22c4a <settings_line_dup_check_cb+0x34>

00022c92 <get_len_cb>:
}
   22c92:	8980      	ldrh	r0, [r0, #12]
   22c94:	4770      	bx	lr

00022c96 <write_handler>:
{
   22c96:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   22c98:	6805      	ldr	r5, [r0, #0]
   22c9a:	6884      	ldr	r4, [r0, #8]
	return flash_area_write(entry_ctx->fap,
   22c9c:	6900      	ldr	r0, [r0, #16]
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   22c9e:	4421      	add	r1, r4
   22ca0:	682c      	ldr	r4, [r5, #0]
	return flash_area_write(entry_ctx->fap,
   22ca2:	4421      	add	r1, r4
}
   22ca4:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   22ca6:	f7ff bef2 	b.w	22a8e <flash_area_write>

00022caa <read_handler>:
{
   22caa:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   22cac:	8984      	ldrh	r4, [r0, #12]
   22cae:	428c      	cmp	r4, r1
   22cb0:	dd0f      	ble.n	22cd2 <read_handler+0x28>
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   22cb2:	681d      	ldr	r5, [r3, #0]
   22cb4:	440d      	add	r5, r1
   22cb6:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   22cb8:	bf84      	itt	hi
   22cba:	1a64      	subhi	r4, r4, r1
   22cbc:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   22cbe:	6804      	ldr	r4, [r0, #0]
   22cc0:	6885      	ldr	r5, [r0, #8]
   22cc2:	6824      	ldr	r4, [r4, #0]
	return flash_area_read(entry_ctx->fap,
   22cc4:	681b      	ldr	r3, [r3, #0]
   22cc6:	6900      	ldr	r0, [r0, #16]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   22cc8:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   22cca:	4421      	add	r1, r4
}
   22ccc:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   22cce:	f7ff bec1 	b.w	22a54 <flash_area_read>
		*len = 0;
   22cd2:	2000      	movs	r0, #0
   22cd4:	6018      	str	r0, [r3, #0]
}
   22cd6:	bc30      	pop	{r4, r5}
   22cd8:	4770      	bx	lr

00022cda <set_starting_state>:
{
   22cda:	b510      	push	{r4, lr}
	__asm__ volatile(
   22cdc:	f04f 0320 	mov.w	r3, #32
   22ce0:	f3ef 8211 	mrs	r2, BASEPRI
   22ce4:	f383 8811 	msr	BASEPRI, r3
   22ce8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22cec:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   22cee:	f003 0407 	and.w	r4, r3, #7
   22cf2:	2c01      	cmp	r4, #1
   22cf4:	d106      	bne.n	22d04 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   22cf6:	6001      	str	r1, [r0, #0]
	int err = 0;
   22cf8:	2000      	movs	r0, #0
	__asm__ volatile(
   22cfa:	f382 8811 	msr	BASEPRI, r2
   22cfe:	f3bf 8f6f 	isb	sy
}
   22d02:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   22d04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   22d08:	428b      	cmp	r3, r1
		err = -EALREADY;
   22d0a:	bf14      	ite	ne
   22d0c:	f04f 30ff 	movne.w	r0, #4294967295
   22d10:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   22d14:	e7f1      	b.n	22cfa <set_starting_state+0x20>

00022d16 <set_on_state>:
	__asm__ volatile(
   22d16:	f04f 0320 	mov.w	r3, #32
   22d1a:	f3ef 8211 	mrs	r2, BASEPRI
   22d1e:	f383 8811 	msr	BASEPRI, r3
   22d22:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   22d26:	6803      	ldr	r3, [r0, #0]
   22d28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   22d2c:	f043 0302 	orr.w	r3, r3, #2
   22d30:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   22d32:	f382 8811 	msr	BASEPRI, r2
   22d36:	f3bf 8f6f 	isb	sy
}
   22d3a:	4770      	bx	lr

00022d3c <onoff_started_callback>:
	return &data->mgr[type];
   22d3c:	68c0      	ldr	r0, [r0, #12]
   22d3e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   22d40:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   22d44:	2100      	movs	r1, #0
   22d46:	4710      	bx	r2

00022d48 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   22d48:	2000      	movs	r0, #0
   22d4a:	f7fa bf77 	b.w	1dc3c <nrfx_clock_start>

00022d4e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   22d4e:	2000      	movs	r0, #0
   22d50:	f7fa bfc2 	b.w	1dcd8 <nrfx_clock_stop>

00022d54 <api_stop>:
	return stop(dev, subsys, CTX_API);
   22d54:	2280      	movs	r2, #128	; 0x80
   22d56:	f7e0 bf5f 	b.w	3c18 <stop>

00022d5a <blocking_start_callback>:
	z_impl_k_sem_give(sem);
   22d5a:	4610      	mov	r0, r2
   22d5c:	f7fc bf8e 	b.w	1fc7c <z_impl_k_sem_give>

00022d60 <api_start>:
{
   22d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d64:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   22d66:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   22d68:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   22d6a:	434c      	muls	r4, r1
{
   22d6c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   22d6e:	f104 0048 	add.w	r0, r4, #72	; 0x48
   22d72:	2180      	movs	r1, #128	; 0x80
   22d74:	4428      	add	r0, r5
{
   22d76:	4690      	mov	r8, r2
   22d78:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   22d7a:	f7ff ffae 	bl	22cda <set_starting_state>
	if (err < 0) {
   22d7e:	2800      	cmp	r0, #0
   22d80:	db06      	blt.n	22d90 <api_start+0x30>
	subdata->cb = cb;
   22d82:	4425      	add	r5, r4
	subdata->user_data = user_data;
   22d84:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   22d88:	6873      	ldr	r3, [r6, #4]
   22d8a:	591b      	ldr	r3, [r3, r4]
   22d8c:	4798      	blx	r3
	return 0;
   22d8e:	2000      	movs	r0, #0
}
   22d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022d94 <z_impl_hwinfo_get_device_id>:
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   22d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   22d98:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22d9a:	6e56      	ldr	r6, [r2, #100]	; 0x64
   22d9c:	6e55      	ldr	r5, [r2, #100]	; 0x64
   22d9e:	6e54      	ldr	r4, [r2, #100]	; 0x64
   22da0:	6e53      	ldr	r3, [r2, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   22da2:	0a2d      	lsrs	r5, r5, #8
   22da4:	061b      	lsls	r3, r3, #24
   22da6:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   22daa:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   22dae:	0224      	lsls	r4, r4, #8
   22db0:	432b      	orrs	r3, r5
   22db2:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   22db6:	4323      	orrs	r3, r4
   22db8:	9300      	str	r3, [sp, #0]
   22dba:	6e16      	ldr	r6, [r2, #96]	; 0x60
   22dbc:	6e15      	ldr	r5, [r2, #96]	; 0x60
   22dbe:	6e14      	ldr	r4, [r2, #96]	; 0x60
   22dc0:	6e13      	ldr	r3, [r2, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   22dc2:	0a2a      	lsrs	r2, r5, #8
   22dc4:	061b      	lsls	r3, r3, #24
   22dc6:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   22dca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   22dce:	2908      	cmp	r1, #8
   22dd0:	ea43 0302 	orr.w	r3, r3, r2
   22dd4:	ea4f 2204 	mov.w	r2, r4, lsl #8
   22dd8:	bf28      	it	cs
   22dda:	2108      	movcs	r1, #8
   22ddc:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   22de0:	4313      	orrs	r3, r2
   22de2:	460c      	mov	r4, r1

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   22de4:	460a      	mov	r2, r1
   22de6:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   22de8:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   22dea:	f001 f9b0 	bl	2414e <memcpy>

	return length;
}
   22dee:	4620      	mov	r0, r4
   22df0:	b002      	add	sp, #8
   22df2:	bd70      	pop	{r4, r5, r6, pc}

00022df4 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   22df4:	4770      	bx	lr

00022df6 <sys_clock_disable>:
   22df6:	4770      	bx	lr

00022df8 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   22df8:	2000      	movs	r0, #0
   22dfa:	f7e0 beb5 	b.w	3b68 <sys_reboot>

00022dfe <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   22dfe:	428b      	cmp	r3, r1
{
   22e00:	b538      	push	{r3, r4, r5, lr}
   22e02:	4615      	mov	r5, r2
   22e04:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   22e06:	d805      	bhi.n	22e14 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   22e08:	461a      	mov	r2, r3
   22e0a:	4629      	mov	r1, r5
   22e0c:	f001 f99f 	bl	2414e <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   22e10:	4620      	mov	r0, r4
   22e12:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   22e14:	2400      	movs	r4, #0
   22e16:	e7fb      	b.n	22e10 <_copy+0x12>

00022e18 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   22e18:	f001 b9c3 	b.w	241a2 <memset>

00022e1c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   22e1c:	09c3      	lsrs	r3, r0, #7
   22e1e:	005a      	lsls	r2, r3, #1
   22e20:	4413      	add	r3, r2
   22e22:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   22e26:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   22e2a:	b2c0      	uxtb	r0, r0
   22e2c:	4770      	bx	lr

00022e2e <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   22e2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e32:	4607      	mov	r7, r0
   22e34:	b0a9      	sub	sp, #164	; 0xa4
   22e36:	4688      	mov	r8, r1
   22e38:	4614      	mov	r4, r2
   22e3a:	2640      	movs	r6, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   22e3c:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   22e40:	f7e1 fae6 	bl	4410 <uECC_get_rng>
		if (!rng_function ||
   22e44:	4603      	mov	r3, r0
   22e46:	2800      	cmp	r0, #0
   22e48:	d03e      	beq.n	22ec8 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   22e4a:	2140      	movs	r1, #64	; 0x40
   22e4c:	a808      	add	r0, sp, #32
   22e4e:	4798      	blx	r3
		if (!rng_function ||
   22e50:	b3d0      	cbz	r0, 22ec8 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   22e52:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   22e56:	f112 031f 	adds.w	r3, r2, #31
   22e5a:	bf48      	it	mi
   22e5c:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   22e60:	466d      	mov	r5, sp
   22e62:	464a      	mov	r2, r9
   22e64:	a908      	add	r1, sp, #32
   22e66:	4628      	mov	r0, r5
   22e68:	f343 1347 	sbfx	r3, r3, #5, #8
   22e6c:	f000 fa00 	bl	23270 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   22e70:	4622      	mov	r2, r4
   22e72:	4629      	mov	r1, r5
   22e74:	a818      	add	r0, sp, #96	; 0x60
   22e76:	f000 fe16 	bl	23aa6 <EccPoint_compute_public_key>
   22e7a:	b318      	cbz	r0, 22ec4 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   22e7c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   22e80:	1dd9      	adds	r1, r3, #7
   22e82:	bf48      	it	mi
   22e84:	f103 010e 	addmi.w	r1, r3, #14
   22e88:	462a      	mov	r2, r5
   22e8a:	4640      	mov	r0, r8
   22e8c:	10c9      	asrs	r1, r1, #3
   22e8e:	f000 fe32 	bl	23af6 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   22e92:	aa18      	add	r2, sp, #96	; 0x60
   22e94:	f994 1001 	ldrsb.w	r1, [r4, #1]
   22e98:	4638      	mov	r0, r7
   22e9a:	f000 fe2c 	bl	23af6 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   22e9e:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   22ea2:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   22ea6:	ab18      	add	r3, sp, #96	; 0x60
   22ea8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   22eac:	1878      	adds	r0, r7, r1
   22eae:	f000 fe22 	bl	23af6 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   22eb2:	2220      	movs	r2, #32
   22eb4:	2100      	movs	r1, #0
   22eb6:	4628      	mov	r0, r5
   22eb8:	f001 f973 	bl	241a2 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   22ebc:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   22ebe:	b029      	add	sp, #164	; 0xa4
   22ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   22ec4:	3e01      	subs	r6, #1
   22ec6:	d1bb      	bne.n	22e40 <uECC_make_key+0x12>
        		return 0;
   22ec8:	2000      	movs	r0, #0
   22eca:	e7f8      	b.n	22ebe <uECC_make_key+0x90>

00022ecc <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   22ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22ed0:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   22ed2:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   22ed6:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   22eda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   22ede:	b0a4      	sub	sp, #144	; 0x90
   22ee0:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   22ee2:	1dda      	adds	r2, r3, #7
   22ee4:	bf48      	it	mi
   22ee6:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   22eea:	ad04      	add	r5, sp, #16
{
   22eec:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   22eee:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   22ef0:	4628      	mov	r0, r5
   22ef2:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   22ef4:	9502      	str	r5, [sp, #8]
   22ef6:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   22ef8:	f000 fe11 	bl	23b1e <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   22efc:	463a      	mov	r2, r7
   22efe:	4649      	mov	r1, r9
   22f00:	a814      	add	r0, sp, #80	; 0x50
   22f02:	f000 fe0c 	bl	23b1e <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   22f06:	ab14      	add	r3, sp, #80	; 0x50
   22f08:	eb09 0107 	add.w	r1, r9, r7
   22f0c:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   22f10:	463a      	mov	r2, r7
   22f12:	f000 fe04 	bl	23b1e <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   22f16:	4623      	mov	r3, r4
   22f18:	4632      	mov	r2, r6
   22f1a:	4629      	mov	r1, r5
   22f1c:	4628      	mov	r0, r5
   22f1e:	f000 fd95 	bl	23a4c <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   22f22:	fab0 f080 	clz	r0, r0
   22f26:	9401      	str	r4, [sp, #4]
   22f28:	ab24      	add	r3, sp, #144	; 0x90
   22f2a:	0940      	lsrs	r0, r0, #5
   22f2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   22f30:	8863      	ldrh	r3, [r4, #2]
   22f32:	3301      	adds	r3, #1
   22f34:	b21b      	sxth	r3, r3
   22f36:	9300      	str	r3, [sp, #0]
   22f38:	a914      	add	r1, sp, #80	; 0x50
   22f3a:	2300      	movs	r3, #0
   22f3c:	f850 2c88 	ldr.w	r2, [r0, #-136]
   22f40:	4608      	mov	r0, r1
   22f42:	f000 fcb4 	bl	238ae <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   22f46:	aa14      	add	r2, sp, #80	; 0x50
   22f48:	4639      	mov	r1, r7
   22f4a:	4640      	mov	r0, r8
   22f4c:	f000 fdd3 	bl	23af6 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   22f50:	4621      	mov	r1, r4
   22f52:	a814      	add	r0, sp, #80	; 0x50
   22f54:	f000 fc22 	bl	2379c <EccPoint_isZero>
   22f58:	ac02      	add	r4, sp, #8
   22f5a:	4607      	mov	r7, r0
   22f5c:	2208      	movs	r2, #8
   22f5e:	2100      	movs	r1, #0
   22f60:	4620      	mov	r0, r4
   22f62:	f001 f91e 	bl	241a2 <memset>
   22f66:	2220      	movs	r2, #32
   22f68:	2100      	movs	r1, #0
   22f6a:	4630      	mov	r0, r6
   22f6c:	f001 f919 	bl	241a2 <memset>
   22f70:	2220      	movs	r2, #32
   22f72:	2100      	movs	r1, #0
   22f74:	4628      	mov	r0, r5
   22f76:	f001 f914 	bl	241a2 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   22f7a:	fab7 f087 	clz	r0, r7
   22f7e:	0940      	lsrs	r0, r0, #5
   22f80:	b024      	add	sp, #144	; 0x90
   22f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022f86 <uECC_vli_add>:
{
   22f86:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   22f88:	2400      	movs	r4, #0
{
   22f8a:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   22f8c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   22f8e:	b265      	sxtb	r5, r4
   22f90:	42ab      	cmp	r3, r5
   22f92:	dc00      	bgt.n	22f96 <uECC_vli_add+0x10>
}
   22f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   22f96:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   22f9a:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   22f9e:	4435      	add	r5, r6
   22fa0:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   22fa2:	42ae      	cmp	r6, r5
		uECC_word_t val = (sum < left[i]);
   22fa4:	bf8c      	ite	hi
   22fa6:	2601      	movhi	r6, #1
   22fa8:	2600      	movls	r6, #0
		result[i] = sum;
   22faa:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   22fae:	bf18      	it	ne
   22fb0:	4630      	movne	r0, r6
		result[i] = sum;
   22fb2:	3401      	adds	r4, #1
   22fb4:	e7eb      	b.n	22f8e <uECC_vli_add+0x8>

00022fb6 <uECC_vli_rshift1>:
	vli += num_words;
   22fb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   22fba:	2300      	movs	r3, #0
	while (vli-- > end) {
   22fbc:	4288      	cmp	r0, r1
   22fbe:	d300      	bcc.n	22fc2 <uECC_vli_rshift1+0xc>
}
   22fc0:	4770      	bx	lr
		uECC_word_t temp = *vli;
   22fc2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   22fc6:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   22fca:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   22fcc:	07d3      	lsls	r3, r2, #31
   22fce:	e7f5      	b.n	22fbc <uECC_vli_rshift1+0x6>

00022fd0 <vli_modInv_update>:
	if (!EVEN(uv)) {
   22fd0:	6803      	ldr	r3, [r0, #0]
{
   22fd2:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   22fd4:	f013 0601 	ands.w	r6, r3, #1
{
   22fd8:	4605      	mov	r5, r0
   22fda:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   22fdc:	d005      	beq.n	22fea <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   22fde:	4613      	mov	r3, r2
   22fe0:	460a      	mov	r2, r1
   22fe2:	4601      	mov	r1, r0
   22fe4:	f7ff ffcf 	bl	22f86 <uECC_vli_add>
   22fe8:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   22fea:	4621      	mov	r1, r4
   22fec:	4628      	mov	r0, r5
   22fee:	f7ff ffe2 	bl	22fb6 <uECC_vli_rshift1>
	if (carry) {
   22ff2:	b146      	cbz	r6, 23006 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   22ff4:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   22ff8:	3a01      	subs	r2, #1
   22ffa:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   22ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   23002:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   23006:	bd70      	pop	{r4, r5, r6, pc}

00023008 <uECC_vli_mult>:
{
   23008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   2300c:	2500      	movs	r5, #0
{
   2300e:	b087      	sub	sp, #28
   23010:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   23014:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   23016:	462a      	mov	r2, r5
   23018:	fa4f f885 	sxtb.w	r8, r5
	for (k = 0; k < num_words; ++k) {
   2301c:	4543      	cmp	r3, r8
   2301e:	dc16      	bgt.n	2304e <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   23020:	f04f 35ff 	mov.w	r5, #4294967295
   23024:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   23028:	9502      	str	r5, [sp, #8]
   2302a:	f04f 0a00 	mov.w	sl, #0
   2302e:	fa5f f58a 	uxtb.w	r5, sl
   23032:	eb05 0c03 	add.w	ip, r5, r3
   23036:	9e02      	ldr	r6, [sp, #8]
   23038:	fa4f fc8c 	sxtb.w	ip, ip
   2303c:	45b4      	cmp	ip, r6
   2303e:	db2d      	blt.n	2309c <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   23040:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   23044:	f840 2c04 	str.w	r2, [r0, #-4]
}
   23048:	b007      	add	sp, #28
   2304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2304e:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   23050:	f04f 0c00 	mov.w	ip, #0
   23054:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   23058:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   2305a:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   2305e:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   23060:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   23064:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   23068:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   2306c:	fba7 ab06 	umull	sl, fp, r7, r6
   23070:	eb1a 0601 	adds.w	r6, sl, r1
   23074:	f10c 0c01 	add.w	ip, ip, #1
   23078:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   2307c:	fa4f fa8c 	sxtb.w	sl, ip
   23080:	bf2c      	ite	cs
   23082:	2201      	movcs	r2, #1
   23084:	2200      	movcc	r2, #0
   23086:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   23088:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   2308a:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   2308c:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   2308e:	dde4      	ble.n	2305a <uECC_vli_mult+0x52>
		result[k] = r0;
   23090:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   23094:	463a      	mov	r2, r7
   23096:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   23098:	4674      	mov	r4, lr
   2309a:	e7bd      	b.n	23018 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2309c:	3501      	adds	r5, #1
   2309e:	b26d      	sxtb	r5, r5
   230a0:	9e01      	ldr	r6, [sp, #4]
   230a2:	9900      	ldr	r1, [sp, #0]
   230a4:	ebac 0e05 	sub.w	lr, ip, r5
   230a8:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   230ac:	eb01 0b85 	add.w	fp, r1, r5, lsl #2
   230b0:	4626      	mov	r6, r4
   230b2:	2400      	movs	r4, #0
   230b4:	429d      	cmp	r5, r3
   230b6:	db05      	blt.n	230c4 <uECC_vli_mult+0xbc>
		result[k] = r0;
   230b8:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
		r2 = 0;
   230bc:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   230c0:	4632      	mov	r2, r6
   230c2:	e7b4      	b.n	2302e <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   230c4:	e9cd 2604 	strd	r2, r6, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   230c8:	f85e 7904 	ldr.w	r7, [lr], #-4
   230cc:	f85b 8b04 	ldr.w	r8, [fp], #4
	r01 += p;
   230d0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   230d4:	fba8 8907 	umull	r8, r9, r8, r7
   230d8:	eb18 0601 	adds.w	r6, r8, r1
   230dc:	eb59 0702 	adcs.w	r7, r9, r2
   230e0:	bf2c      	ite	cs
   230e2:	2201      	movcs	r2, #1
   230e4:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   230e6:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   230e8:	4414      	add	r4, r2
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   230ea:	b26d      	sxtb	r5, r5
	*r0 = (uECC_word_t)r01;
   230ec:	4632      	mov	r2, r6
	*r1 = r01 >> uECC_WORD_BITS;
   230ee:	463e      	mov	r6, r7
   230f0:	e7e0      	b.n	230b4 <uECC_vli_mult+0xac>

000230f2 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   230f2:	2300      	movs	r3, #0
{
   230f4:	b510      	push	{r4, lr}
		 vli[i] = 0;
   230f6:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   230f8:	b25a      	sxtb	r2, r3
   230fa:	4291      	cmp	r1, r2
   230fc:	dc00      	bgt.n	23100 <uECC_vli_clear+0xe>
}
   230fe:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   23100:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   23104:	3301      	adds	r3, #1
   23106:	e7f7      	b.n	230f8 <uECC_vli_clear+0x6>

00023108 <uECC_vli_isZero>:
{
   23108:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2310a:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   2310c:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   2310e:	b25c      	sxtb	r4, r3
   23110:	42a1      	cmp	r1, r4
   23112:	dc03      	bgt.n	2311c <uECC_vli_isZero+0x14>
}
   23114:	fab2 f082 	clz	r0, r2
   23118:	0940      	lsrs	r0, r0, #5
   2311a:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   2311c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   23120:	3301      	adds	r3, #1
   23122:	4322      	orrs	r2, r4
   23124:	e7f3      	b.n	2310e <uECC_vli_isZero+0x6>

00023126 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23126:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   23128:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2312a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2312e:	f001 011f 	and.w	r1, r1, #31
   23132:	fa03 f101 	lsl.w	r1, r3, r1
}
   23136:	4008      	ands	r0, r1
   23138:	4770      	bx	lr

0002313a <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2313a:	3901      	subs	r1, #1
   2313c:	b249      	sxtb	r1, r1
   2313e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   23142:	2900      	cmp	r1, #0
   23144:	da04      	bge.n	23150 <uECC_vli_numBits+0x16>
	return (i + 1);
   23146:	3101      	adds	r1, #1
   23148:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
   2314a:	b941      	cbnz	r1, 2315e <uECC_vli_numBits+0x24>
		return 0;
   2314c:	4608      	mov	r0, r1
}
   2314e:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   23150:	f853 2904 	ldr.w	r2, [r3], #-4
   23154:	2a00      	cmp	r2, #0
   23156:	d1f6      	bne.n	23146 <uECC_vli_numBits+0xc>
   23158:	3901      	subs	r1, #1
   2315a:	b249      	sxtb	r1, r1
   2315c:	e7f1      	b.n	23142 <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
   2315e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   23162:	3b01      	subs	r3, #1
   23164:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
   23168:	2000      	movs	r0, #0
   2316a:	b923      	cbnz	r3, 23176 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   2316c:	3901      	subs	r1, #1
   2316e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   23172:	b208      	sxth	r0, r1
   23174:	4770      	bx	lr
		digit >>= 1;
   23176:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   23178:	3001      	adds	r0, #1
   2317a:	e7f6      	b.n	2316a <uECC_vli_numBits+0x30>

0002317c <uECC_vli_set>:
{
   2317c:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2317e:	2300      	movs	r3, #0
   23180:	b25c      	sxtb	r4, r3
   23182:	42a2      	cmp	r2, r4
   23184:	dc00      	bgt.n	23188 <uECC_vli_set+0xc>
}
   23186:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   23188:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   2318c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   23190:	3301      	adds	r3, #1
   23192:	e7f5      	b.n	23180 <uECC_vli_set+0x4>

00023194 <uECC_vli_cmp_unsafe>:
{
   23194:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   23196:	3a01      	subs	r2, #1
   23198:	b252      	sxtb	r2, r2
   2319a:	0093      	lsls	r3, r2, #2
   2319c:	2a00      	cmp	r2, #0
   2319e:	da01      	bge.n	231a4 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   231a0:	2000      	movs	r0, #0
}
   231a2:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   231a4:	58c5      	ldr	r5, [r0, r3]
   231a6:	58cc      	ldr	r4, [r1, r3]
   231a8:	42a5      	cmp	r5, r4
   231aa:	d805      	bhi.n	231b8 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   231ac:	f1a3 0304 	sub.w	r3, r3, #4
   231b0:	d304      	bcc.n	231bc <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   231b2:	3a01      	subs	r2, #1
   231b4:	b252      	sxtb	r2, r2
   231b6:	e7f1      	b.n	2319c <uECC_vli_cmp_unsafe+0x8>
			return 1;
   231b8:	2001      	movs	r0, #1
   231ba:	e7f2      	b.n	231a2 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   231bc:	f04f 30ff 	mov.w	r0, #4294967295
   231c0:	e7ef      	b.n	231a2 <uECC_vli_cmp_unsafe+0xe>

000231c2 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   231c2:	3a01      	subs	r2, #1
   231c4:	b252      	sxtb	r2, r2
{
   231c6:	b570      	push	{r4, r5, r6, lr}
   231c8:	0093      	lsls	r3, r2, #2
	uECC_word_t diff = 0;
   231ca:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   231cc:	2a00      	cmp	r2, #0
   231ce:	da03      	bge.n	231d8 <uECC_vli_equal+0x16>
}
   231d0:	1c20      	adds	r0, r4, #0
   231d2:	bf18      	it	ne
   231d4:	2001      	movne	r0, #1
   231d6:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   231d8:	58c5      	ldr	r5, [r0, r3]
   231da:	58ce      	ldr	r6, [r1, r3]
	for (i = num_words - 1; i >= 0; --i) {
   231dc:	3a01      	subs	r2, #1
		diff |= (left[i] ^ right[i]);
   231de:	4075      	eors	r5, r6
   231e0:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   231e2:	b252      	sxtb	r2, r2
   231e4:	3b04      	subs	r3, #4
   231e6:	e7f1      	b.n	231cc <uECC_vli_equal+0xa>

000231e8 <uECC_vli_sub>:
{
   231e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   231ea:	2400      	movs	r4, #0
{
   231ec:	4607      	mov	r7, r0
   231ee:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   231f0:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   231f2:	b265      	sxtb	r5, r4
   231f4:	45ac      	cmp	ip, r5
   231f6:	dc00      	bgt.n	231fa <uECC_vli_sub+0x12>
}
   231f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   231fa:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   231fe:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   23202:	1a35      	subs	r5, r6, r0
   23204:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   23206:	42ae      	cmp	r6, r5
		uECC_word_t val = (diff > left[i]);
   23208:	bf34      	ite	cc
   2320a:	2601      	movcc	r6, #1
   2320c:	2600      	movcs	r6, #0
		result[i] = diff;
   2320e:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   23212:	bf18      	it	ne
   23214:	4630      	movne	r0, r6
		result[i] = diff;
   23216:	3401      	adds	r4, #1
   23218:	e7eb      	b.n	231f2 <uECC_vli_sub+0xa>

0002321a <uECC_vli_modAdd>:
{
   2321a:	b570      	push	{r4, r5, r6, lr}
   2321c:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   23220:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   23222:	4623      	mov	r3, r4
{
   23224:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   23226:	f7ff feae 	bl	22f86 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   2322a:	b930      	cbnz	r0, 2323a <uECC_vli_modAdd+0x20>
   2322c:	4622      	mov	r2, r4
   2322e:	4629      	mov	r1, r5
   23230:	4630      	mov	r0, r6
   23232:	f7ff ffaf 	bl	23194 <uECC_vli_cmp_unsafe>
   23236:	2801      	cmp	r0, #1
   23238:	d007      	beq.n	2324a <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   2323a:	4623      	mov	r3, r4
   2323c:	4632      	mov	r2, r6
   2323e:	4629      	mov	r1, r5
   23240:	4628      	mov	r0, r5
}
   23242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   23246:	f7ff bfcf 	b.w	231e8 <uECC_vli_sub>
}
   2324a:	bd70      	pop	{r4, r5, r6, pc}

0002324c <uECC_vli_modSub>:
{
   2324c:	b570      	push	{r4, r5, r6, lr}
   2324e:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   23252:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   23254:	4623      	mov	r3, r4
{
   23256:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   23258:	f7ff ffc6 	bl	231e8 <uECC_vli_sub>
	if (l_borrow) {
   2325c:	b138      	cbz	r0, 2326e <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   2325e:	4623      	mov	r3, r4
   23260:	4632      	mov	r2, r6
   23262:	4629      	mov	r1, r5
   23264:	4628      	mov	r0, r5
}
   23266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   2326a:	f7ff be8c 	b.w	22f86 <uECC_vli_add>
}
   2326e:	bd70      	pop	{r4, r5, r6, pc}

00023270 <uECC_vli_mmod>:
{
   23270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23274:	b0a5      	sub	sp, #148	; 0x94
   23276:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   23278:	ab14      	add	r3, sp, #80	; 0x50
   2327a:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   2327e:	4681      	mov	r9, r0
			   uECC_vli_numBits(mod, num_words);
   23280:	4629      	mov	r1, r5
   23282:	4610      	mov	r0, r2
{
   23284:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   23286:	f7ff ff58 	bl	2313a <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   2328a:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   2328e:	b204      	sxth	r4, r0
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   23290:	2c00      	cmp	r4, #0
   23292:	4626      	mov	r6, r4
   23294:	bfb8      	it	lt
   23296:	f104 061f 	addlt.w	r6, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2329a:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2329c:	f346 1647 	sbfx	r6, r6, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   232a0:	f003 031f 	and.w	r3, r3, #31
   232a4:	f004 081f 	and.w	r8, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   232a8:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   232aa:	bf58      	it	pl
   232ac:	f1c3 0800 	rsbpl	r8, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
   232b0:	4631      	mov	r1, r6
   232b2:	f7ff ff1e 	bl	230f2 <uECC_vli_clear>
	if (bit_shift > 0) {
   232b6:	f1b8 0f00 	cmp.w	r8, #0
   232ba:	b230      	sxth	r0, r6
   232bc:	dd2d      	ble.n	2331a <uECC_vli_mmod+0xaa>
   232be:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   232c0:	2200      	movs	r2, #0
   232c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   232c6:	f1c8 0c20 	rsb	ip, r8, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   232ca:	4613      	mov	r3, r2
   232cc:	429d      	cmp	r5, r3
   232ce:	d819      	bhi.n	23304 <uECC_vli_mmod+0x94>
		for (i = 0; i < num_words * 2; ++i) {
   232d0:	b22f      	sxth	r7, r5
   232d2:	007b      	lsls	r3, r7, #1
   232d4:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   232d6:	ab04      	add	r3, sp, #16
   232d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   232dc:	f105 38ff 	add.w	r8, r5, #4294967295
   232e0:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   232e2:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   232e4:	eb03 0888 	add.w	r8, r3, r8, lsl #2
	for (index = 1; shift >= 0; --shift) {
   232e8:	2c00      	cmp	r4, #0
   232ea:	da54      	bge.n	23396 <uECC_vli_mmod+0x126>
	uECC_vli_set(result, v[index], num_words);
   232ec:	ab24      	add	r3, sp, #144	; 0x90
   232ee:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   232f2:	462a      	mov	r2, r5
   232f4:	f856 1c88 	ldr.w	r1, [r6, #-136]
   232f8:	4648      	mov	r0, r9
   232fa:	f7ff ff3f 	bl	2317c <uECC_vli_set>
}
   232fe:	b025      	add	sp, #148	; 0x94
   23300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   23304:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
   23308:	fa06 f108 	lsl.w	r1, r6, r8
   2330c:	430a      	orrs	r2, r1
   2330e:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23312:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   23314:	fa26 f20c 	lsr.w	r2, r6, ip
   23318:	e7d8      	b.n	232cc <uECC_vli_mmod+0x5c>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   2331a:	ab04      	add	r3, sp, #16
   2331c:	462a      	mov	r2, r5
   2331e:	4639      	mov	r1, r7
   23320:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23324:	f7ff ff2a 	bl	2317c <uECC_vli_set>
   23328:	e7d2      	b.n	232d0 <uECC_vli_mmod+0x60>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2332a:	fa0f fe82 	sxth.w	lr, r2
   2332e:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   23332:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   23336:	ab24      	add	r3, sp, #144	; 0x90
   23338:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2333c:	3001      	adds	r0, #1
   2333e:	f852 3c80 	ldr.w	r3, [r2, #-128]
   23342:	440b      	add	r3, r1
   23344:	ebbb 0303 	subs.w	r3, fp, r3
   23348:	bf34      	ite	cc
   2334a:	2201      	movcc	r2, #1
   2334c:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   2334e:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   23350:	bf18      	it	ne
   23352:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   23354:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   23358:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   2335c:	9b01      	ldr	r3, [sp, #4]
   2335e:	b242      	sxtb	r2, r0
   23360:	429a      	cmp	r2, r3
   23362:	dbe2      	blt.n	2332a <uECC_vli_mmod+0xba>
		index = !(index ^ borrow);
   23364:	1a73      	subs	r3, r6, r1
   23366:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   23368:	4629      	mov	r1, r5
   2336a:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   2336c:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   2336e:	f7ff fe22 	bl	22fb6 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23372:	ab24      	add	r3, sp, #144	; 0x90
   23374:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23378:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2337a:	f853 2c80 	ldr.w	r2, [r3, #-128]
   2337e:	f858 3c80 	ldr.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23382:	4638      	mov	r0, r7
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23384:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   23388:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2338a:	f848 3c80 	str.w	r3, [r8, #-128]
	for (index = 1; shift >= 0; --shift) {
   2338e:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23390:	f7ff fe11 	bl	22fb6 <uECC_vli_rshift1>
   23394:	e7a8      	b.n	232e8 <uECC_vli_mmod+0x78>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   23396:	ab24      	add	r3, sp, #144	; 0x90
   23398:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   2339a:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   2339e:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   233a0:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   233a4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   233a8:	e7d8      	b.n	2335c <uECC_vli_mmod+0xec>

000233aa <uECC_vli_modMult_fast>:
{
   233aa:	b530      	push	{r4, r5, lr}
   233ac:	461c      	mov	r4, r3
   233ae:	b091      	sub	sp, #68	; 0x44
   233b0:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   233b2:	f993 3000 	ldrsb.w	r3, [r3]
   233b6:	4668      	mov	r0, sp
   233b8:	f7ff fe26 	bl	23008 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   233bc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   233c0:	4669      	mov	r1, sp
   233c2:	4628      	mov	r0, r5
   233c4:	4798      	blx	r3
}
   233c6:	b011      	add	sp, #68	; 0x44
   233c8:	bd30      	pop	{r4, r5, pc}

000233ca <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
   233ca:	4613      	mov	r3, r2
   233cc:	460a      	mov	r2, r1
   233ce:	f7ff bfec 	b.w	233aa <uECC_vli_modMult_fast>

000233d2 <double_jacobian_default>:
{
   233d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   233d6:	f993 6000 	ldrsb.w	r6, [r3]
{
   233da:	b092      	sub	sp, #72	; 0x48
   233dc:	4604      	mov	r4, r0
   233de:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   233e0:	4610      	mov	r0, r2
   233e2:	4631      	mov	r1, r6
{
   233e4:	4615      	mov	r5, r2
   233e6:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   233e8:	f7ff fe8e 	bl	23108 <uECC_vli_isZero>
   233ec:	2800      	cmp	r0, #0
   233ee:	f040 8091 	bne.w	23514 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   233f2:	4642      	mov	r2, r8
   233f4:	4649      	mov	r1, r9
   233f6:	a802      	add	r0, sp, #8
   233f8:	f7ff ffe7 	bl	233ca <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   233fc:	4643      	mov	r3, r8
   233fe:	aa02      	add	r2, sp, #8
   23400:	4621      	mov	r1, r4
   23402:	a80a      	add	r0, sp, #40	; 0x28
   23404:	f7ff ffd1 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   23408:	a902      	add	r1, sp, #8
   2340a:	4608      	mov	r0, r1
   2340c:	4642      	mov	r2, r8
   2340e:	f7ff ffdc 	bl	233ca <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   23412:	4643      	mov	r3, r8
   23414:	462a      	mov	r2, r5
   23416:	4649      	mov	r1, r9
   23418:	4648      	mov	r0, r9
   2341a:	f7ff ffc6 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2341e:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   23422:	4642      	mov	r2, r8
   23424:	4629      	mov	r1, r5
   23426:	4628      	mov	r0, r5
   23428:	f7ff ffcf 	bl	233ca <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2342c:	463b      	mov	r3, r7
   2342e:	462a      	mov	r2, r5
   23430:	4621      	mov	r1, r4
   23432:	4620      	mov	r0, r4
   23434:	9600      	str	r6, [sp, #0]
   23436:	f7ff fef0 	bl	2321a <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   2343a:	463b      	mov	r3, r7
   2343c:	462a      	mov	r2, r5
   2343e:	4629      	mov	r1, r5
   23440:	4628      	mov	r0, r5
   23442:	9600      	str	r6, [sp, #0]
   23444:	f7ff fee9 	bl	2321a <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   23448:	463b      	mov	r3, r7
   2344a:	462a      	mov	r2, r5
   2344c:	4621      	mov	r1, r4
   2344e:	4628      	mov	r0, r5
   23450:	9600      	str	r6, [sp, #0]
   23452:	f7ff fefb 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   23456:	4643      	mov	r3, r8
   23458:	462a      	mov	r2, r5
   2345a:	4621      	mov	r1, r4
   2345c:	4620      	mov	r0, r4
   2345e:	f7ff ffa4 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   23462:	463b      	mov	r3, r7
   23464:	4622      	mov	r2, r4
   23466:	4621      	mov	r1, r4
   23468:	4628      	mov	r0, r5
   2346a:	9600      	str	r6, [sp, #0]
   2346c:	f7ff fed5 	bl	2321a <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   23470:	463b      	mov	r3, r7
   23472:	9600      	str	r6, [sp, #0]
   23474:	462a      	mov	r2, r5
   23476:	4621      	mov	r1, r4
   23478:	4620      	mov	r0, r4
   2347a:	f7ff fece 	bl	2321a <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2347e:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   23480:	07db      	lsls	r3, r3, #31
   23482:	d54a      	bpl.n	2351a <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   23484:	4633      	mov	r3, r6
   23486:	463a      	mov	r2, r7
   23488:	4621      	mov	r1, r4
   2348a:	4620      	mov	r0, r4
   2348c:	f7ff fd7b 	bl	22f86 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   23490:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   23492:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   23494:	4620      	mov	r0, r4
   23496:	f7ff fd8e 	bl	22fb6 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   2349a:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   2349e:	3b01      	subs	r3, #1
   234a0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   234a4:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   234a8:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   234ac:	4642      	mov	r2, r8
   234ae:	4621      	mov	r1, r4
   234b0:	4628      	mov	r0, r5
   234b2:	f7ff ff8a 	bl	233ca <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   234b6:	463b      	mov	r3, r7
   234b8:	aa0a      	add	r2, sp, #40	; 0x28
   234ba:	4629      	mov	r1, r5
   234bc:	4628      	mov	r0, r5
   234be:	9600      	str	r6, [sp, #0]
   234c0:	f7ff fec4 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   234c4:	463b      	mov	r3, r7
   234c6:	aa0a      	add	r2, sp, #40	; 0x28
   234c8:	4629      	mov	r1, r5
   234ca:	4628      	mov	r0, r5
   234cc:	9600      	str	r6, [sp, #0]
   234ce:	f7ff febd 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   234d2:	a90a      	add	r1, sp, #40	; 0x28
   234d4:	4608      	mov	r0, r1
   234d6:	463b      	mov	r3, r7
   234d8:	462a      	mov	r2, r5
   234da:	9600      	str	r6, [sp, #0]
   234dc:	f7ff feb6 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   234e0:	4643      	mov	r3, r8
   234e2:	aa0a      	add	r2, sp, #40	; 0x28
   234e4:	4621      	mov	r1, r4
   234e6:	4620      	mov	r0, r4
   234e8:	f7ff ff5f 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   234ec:	aa02      	add	r2, sp, #8
   234ee:	463b      	mov	r3, r7
   234f0:	4610      	mov	r0, r2
   234f2:	4621      	mov	r1, r4
   234f4:	9600      	str	r6, [sp, #0]
   234f6:	f7ff fea9 	bl	2324c <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   234fa:	4632      	mov	r2, r6
   234fc:	4629      	mov	r1, r5
   234fe:	4620      	mov	r0, r4
   23500:	f7ff fe3c 	bl	2317c <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   23504:	4649      	mov	r1, r9
   23506:	4628      	mov	r0, r5
   23508:	f7ff fe38 	bl	2317c <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   2350c:	a902      	add	r1, sp, #8
   2350e:	4648      	mov	r0, r9
   23510:	f7ff fe34 	bl	2317c <uECC_vli_set>
}
   23514:	b012      	add	sp, #72	; 0x48
   23516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   2351a:	4631      	mov	r1, r6
   2351c:	4620      	mov	r0, r4
   2351e:	f7ff fd4a 	bl	22fb6 <uECC_vli_rshift1>
   23522:	e7c3      	b.n	234ac <double_jacobian_default+0xda>

00023524 <x_side_default>:
{
   23524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23528:	4615      	mov	r5, r2
   2352a:	b08a      	sub	sp, #40	; 0x28
   2352c:	4604      	mov	r4, r0
   2352e:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23530:	221c      	movs	r2, #28
   23532:	2100      	movs	r1, #0
   23534:	a803      	add	r0, sp, #12
   23536:	f000 fe34 	bl	241a2 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2353a:	1d2e      	adds	r6, r5, #4
	wordcount_t num_words = curve->num_words;
   2353c:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23540:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   23542:	462a      	mov	r2, r5
   23544:	4641      	mov	r1, r8
   23546:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23548:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2354a:	f7ff ff3e 	bl	233ca <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2354e:	4633      	mov	r3, r6
   23550:	aa02      	add	r2, sp, #8
   23552:	4621      	mov	r1, r4
   23554:	4620      	mov	r0, r4
   23556:	9700      	str	r7, [sp, #0]
   23558:	f7ff fe78 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   2355c:	462b      	mov	r3, r5
   2355e:	4642      	mov	r2, r8
   23560:	4621      	mov	r1, r4
   23562:	4620      	mov	r0, r4
   23564:	f7ff ff21 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   23568:	9700      	str	r7, [sp, #0]
   2356a:	4633      	mov	r3, r6
   2356c:	f105 0284 	add.w	r2, r5, #132	; 0x84
   23570:	4621      	mov	r1, r4
   23572:	4620      	mov	r0, r4
   23574:	f7ff fe51 	bl	2321a <uECC_vli_modAdd>
}
   23578:	b00a      	add	sp, #40	; 0x28
   2357a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002357e <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   2357e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23582:	b09b      	sub	sp, #108	; 0x6c
   23584:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   23586:	9c22      	ldr	r4, [sp, #136]	; 0x88
   23588:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2358c:	9500      	str	r5, [sp, #0]
{
   2358e:	4698      	mov	r8, r3
   23590:	4607      	mov	r7, r0
   23592:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23594:	4623      	mov	r3, r4
   23596:	4602      	mov	r2, r0
   23598:	4631      	mov	r1, r6
   2359a:	a802      	add	r0, sp, #8
   2359c:	f7ff fe56 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   235a0:	a902      	add	r1, sp, #8
   235a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   235a4:	4608      	mov	r0, r1
   235a6:	f7ff ff10 	bl	233ca <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   235aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   235ac:	aa02      	add	r2, sp, #8
   235ae:	4639      	mov	r1, r7
   235b0:	4638      	mov	r0, r7
   235b2:	f7ff fefa 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   235b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   235b8:	aa02      	add	r2, sp, #8
   235ba:	4631      	mov	r1, r6
   235bc:	4630      	mov	r0, r6
   235be:	f7ff fef4 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   235c2:	4623      	mov	r3, r4
   235c4:	464a      	mov	r2, r9
   235c6:	4641      	mov	r1, r8
   235c8:	a802      	add	r0, sp, #8
   235ca:	9500      	str	r5, [sp, #0]
   235cc:	f7ff fe25 	bl	2321a <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   235d0:	4623      	mov	r3, r4
   235d2:	464a      	mov	r2, r9
   235d4:	4641      	mov	r1, r8
   235d6:	4640      	mov	r0, r8
   235d8:	9500      	str	r5, [sp, #0]
   235da:	f7ff fe37 	bl	2324c <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   235de:	4623      	mov	r3, r4
   235e0:	463a      	mov	r2, r7
   235e2:	4631      	mov	r1, r6
   235e4:	a80a      	add	r0, sp, #40	; 0x28
   235e6:	9500      	str	r5, [sp, #0]
   235e8:	f7ff fe30 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   235ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
   235ee:	aa0a      	add	r2, sp, #40	; 0x28
   235f0:	4649      	mov	r1, r9
   235f2:	4648      	mov	r0, r9
   235f4:	f7ff fed9 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   235f8:	4623      	mov	r3, r4
   235fa:	4632      	mov	r2, r6
   235fc:	4639      	mov	r1, r7
   235fe:	a80a      	add	r0, sp, #40	; 0x28
   23600:	9500      	str	r5, [sp, #0]
   23602:	f7ff fe0a 	bl	2321a <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   23606:	9a22      	ldr	r2, [sp, #136]	; 0x88
   23608:	4641      	mov	r1, r8
   2360a:	4630      	mov	r0, r6
   2360c:	f7ff fedd 	bl	233ca <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   23610:	4623      	mov	r3, r4
   23612:	aa0a      	add	r2, sp, #40	; 0x28
   23614:	4631      	mov	r1, r6
   23616:	4630      	mov	r0, r6
   23618:	9500      	str	r5, [sp, #0]
   2361a:	f7ff fe17 	bl	2324c <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   2361e:	4623      	mov	r3, r4
   23620:	4632      	mov	r2, r6
   23622:	4639      	mov	r1, r7
   23624:	a812      	add	r0, sp, #72	; 0x48
   23626:	9500      	str	r5, [sp, #0]
   23628:	f7ff fe10 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   2362c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2362e:	aa12      	add	r2, sp, #72	; 0x48
   23630:	4641      	mov	r1, r8
   23632:	4640      	mov	r0, r8
   23634:	f7ff feb9 	bl	233aa <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   23638:	4623      	mov	r3, r4
   2363a:	464a      	mov	r2, r9
   2363c:	4641      	mov	r1, r8
   2363e:	4640      	mov	r0, r8
   23640:	9500      	str	r5, [sp, #0]
   23642:	f7ff fe03 	bl	2324c <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   23646:	9a22      	ldr	r2, [sp, #136]	; 0x88
   23648:	a902      	add	r1, sp, #8
   2364a:	a812      	add	r0, sp, #72	; 0x48
   2364c:	f7ff febd 	bl	233ca <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   23650:	a912      	add	r1, sp, #72	; 0x48
   23652:	4623      	mov	r3, r4
   23654:	aa0a      	add	r2, sp, #40	; 0x28
   23656:	4608      	mov	r0, r1
   23658:	9500      	str	r5, [sp, #0]
   2365a:	f7ff fdf7 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   2365e:	4623      	mov	r3, r4
   23660:	463a      	mov	r2, r7
   23662:	a912      	add	r1, sp, #72	; 0x48
   23664:	a80a      	add	r0, sp, #40	; 0x28
   23666:	9500      	str	r5, [sp, #0]
   23668:	f7ff fdf0 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   2366c:	a90a      	add	r1, sp, #40	; 0x28
   2366e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   23670:	aa02      	add	r2, sp, #8
   23672:	4608      	mov	r0, r1
   23674:	f7ff fe99 	bl	233aa <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   23678:	4623      	mov	r3, r4
   2367a:	464a      	mov	r2, r9
   2367c:	a90a      	add	r1, sp, #40	; 0x28
   2367e:	4648      	mov	r0, r9
   23680:	9500      	str	r5, [sp, #0]
   23682:	f7ff fde3 	bl	2324c <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   23686:	462a      	mov	r2, r5
   23688:	a912      	add	r1, sp, #72	; 0x48
   2368a:	4638      	mov	r0, r7
   2368c:	f7ff fd76 	bl	2317c <uECC_vli_set>
}
   23690:	b01b      	add	sp, #108	; 0x6c
   23692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00023696 <uECC_vli_modInv>:
{
   23696:	b5f0      	push	{r4, r5, r6, r7, lr}
   23698:	460f      	mov	r7, r1
   2369a:	b0a1      	sub	sp, #132	; 0x84
   2369c:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   2369e:	4619      	mov	r1, r3
   236a0:	4638      	mov	r0, r7
{
   236a2:	4615      	mov	r5, r2
   236a4:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   236a6:	f7ff fd2f 	bl	23108 <uECC_vli_isZero>
   236aa:	b120      	cbz	r0, 236b6 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   236ac:	4630      	mov	r0, r6
   236ae:	f7ff fd20 	bl	230f2 <uECC_vli_clear>
}
   236b2:	b021      	add	sp, #132	; 0x84
   236b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   236b6:	4622      	mov	r2, r4
   236b8:	4639      	mov	r1, r7
   236ba:	4668      	mov	r0, sp
   236bc:	f7ff fd5e 	bl	2317c <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   236c0:	4629      	mov	r1, r5
   236c2:	a808      	add	r0, sp, #32
   236c4:	f7ff fd5a 	bl	2317c <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   236c8:	a810      	add	r0, sp, #64	; 0x40
   236ca:	4621      	mov	r1, r4
   236cc:	f7ff fd11 	bl	230f2 <uECC_vli_clear>
	u[0] = 1;
   236d0:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   236d2:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   236d4:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   236d6:	f7ff fd0c 	bl	230f2 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   236da:	4622      	mov	r2, r4
   236dc:	a908      	add	r1, sp, #32
   236de:	4668      	mov	r0, sp
   236e0:	f7ff fd58 	bl	23194 <uECC_vli_cmp_unsafe>
   236e4:	b928      	cbnz	r0, 236f2 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   236e6:	4622      	mov	r2, r4
   236e8:	a910      	add	r1, sp, #64	; 0x40
   236ea:	4630      	mov	r0, r6
   236ec:	f7ff fd46 	bl	2317c <uECC_vli_set>
   236f0:	e7df      	b.n	236b2 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   236f2:	9b00      	ldr	r3, [sp, #0]
   236f4:	07da      	lsls	r2, r3, #31
   236f6:	d409      	bmi.n	2370c <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   236f8:	4621      	mov	r1, r4
   236fa:	4668      	mov	r0, sp
   236fc:	f7ff fc5b 	bl	22fb6 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   23700:	4622      	mov	r2, r4
   23702:	4629      	mov	r1, r5
   23704:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   23706:	f7ff fc63 	bl	22fd0 <vli_modInv_update>
   2370a:	e7e6      	b.n	236da <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   2370c:	9b08      	ldr	r3, [sp, #32]
   2370e:	07db      	lsls	r3, r3, #31
   23710:	d407      	bmi.n	23722 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   23712:	4621      	mov	r1, r4
   23714:	a808      	add	r0, sp, #32
   23716:	f7ff fc4e 	bl	22fb6 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   2371a:	4622      	mov	r2, r4
   2371c:	4629      	mov	r1, r5
   2371e:	a818      	add	r0, sp, #96	; 0x60
   23720:	e7f1      	b.n	23706 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   23722:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   23724:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   23726:	dd1c      	ble.n	23762 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   23728:	aa08      	add	r2, sp, #32
   2372a:	4669      	mov	r1, sp
   2372c:	4668      	mov	r0, sp
   2372e:	f7ff fd5b 	bl	231e8 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   23732:	4621      	mov	r1, r4
   23734:	4668      	mov	r0, sp
   23736:	f7ff fc3e 	bl	22fb6 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   2373a:	4622      	mov	r2, r4
   2373c:	a918      	add	r1, sp, #96	; 0x60
   2373e:	a810      	add	r0, sp, #64	; 0x40
   23740:	f7ff fd28 	bl	23194 <uECC_vli_cmp_unsafe>
   23744:	2800      	cmp	r0, #0
   23746:	da05      	bge.n	23754 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   23748:	a910      	add	r1, sp, #64	; 0x40
   2374a:	4623      	mov	r3, r4
   2374c:	462a      	mov	r2, r5
   2374e:	4608      	mov	r0, r1
   23750:	f7ff fc19 	bl	22f86 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   23754:	a910      	add	r1, sp, #64	; 0x40
   23756:	4623      	mov	r3, r4
   23758:	aa18      	add	r2, sp, #96	; 0x60
   2375a:	4608      	mov	r0, r1
   2375c:	f7ff fd44 	bl	231e8 <uECC_vli_sub>
   23760:	e7ce      	b.n	23700 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   23762:	a908      	add	r1, sp, #32
   23764:	466a      	mov	r2, sp
   23766:	4608      	mov	r0, r1
   23768:	f7ff fd3e 	bl	231e8 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   2376c:	4621      	mov	r1, r4
   2376e:	a808      	add	r0, sp, #32
   23770:	f7ff fc21 	bl	22fb6 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   23774:	4622      	mov	r2, r4
   23776:	a910      	add	r1, sp, #64	; 0x40
   23778:	a818      	add	r0, sp, #96	; 0x60
   2377a:	f7ff fd0b 	bl	23194 <uECC_vli_cmp_unsafe>
   2377e:	2800      	cmp	r0, #0
   23780:	da05      	bge.n	2378e <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   23782:	a918      	add	r1, sp, #96	; 0x60
   23784:	4623      	mov	r3, r4
   23786:	462a      	mov	r2, r5
   23788:	4608      	mov	r0, r1
   2378a:	f7ff fbfc 	bl	22f86 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   2378e:	a918      	add	r1, sp, #96	; 0x60
   23790:	4623      	mov	r3, r4
   23792:	aa10      	add	r2, sp, #64	; 0x40
   23794:	4608      	mov	r0, r1
   23796:	f7ff fd27 	bl	231e8 <uECC_vli_sub>
   2379a:	e7be      	b.n	2371a <uECC_vli_modInv+0x84>

0002379c <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   2379c:	7809      	ldrb	r1, [r1, #0]
   2379e:	0049      	lsls	r1, r1, #1
   237a0:	b249      	sxtb	r1, r1
   237a2:	f7ff bcb1 	b.w	23108 <uECC_vli_isZero>

000237a6 <apply_z>:
{
   237a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   237a8:	4615      	mov	r5, r2
   237aa:	b089      	sub	sp, #36	; 0x24
   237ac:	461c      	mov	r4, r3
   237ae:	4607      	mov	r7, r0
   237b0:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   237b2:	461a      	mov	r2, r3
   237b4:	4629      	mov	r1, r5
   237b6:	4668      	mov	r0, sp
   237b8:	f7ff fe07 	bl	233ca <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   237bc:	4623      	mov	r3, r4
   237be:	466a      	mov	r2, sp
   237c0:	4639      	mov	r1, r7
   237c2:	4638      	mov	r0, r7
   237c4:	f7ff fdf1 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   237c8:	4623      	mov	r3, r4
   237ca:	462a      	mov	r2, r5
   237cc:	4669      	mov	r1, sp
   237ce:	4668      	mov	r0, sp
   237d0:	f7ff fdeb 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   237d4:	4623      	mov	r3, r4
   237d6:	466a      	mov	r2, sp
   237d8:	4631      	mov	r1, r6
   237da:	4630      	mov	r0, r6
   237dc:	f7ff fde5 	bl	233aa <uECC_vli_modMult_fast>
}
   237e0:	b009      	add	sp, #36	; 0x24
   237e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000237e4 <XYcZ_add>:
{
   237e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   237e8:	b08b      	sub	sp, #44	; 0x2c
   237ea:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
   237ec:	9d12      	ldr	r5, [sp, #72]	; 0x48
   237ee:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   237f2:	9600      	str	r6, [sp, #0]
{
   237f4:	461f      	mov	r7, r3
   237f6:	4680      	mov	r8, r0
   237f8:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   237fa:	462b      	mov	r3, r5
   237fc:	4602      	mov	r2, r0
   237fe:	4621      	mov	r1, r4
   23800:	a802      	add	r0, sp, #8
   23802:	f7ff fd23 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   23806:	a902      	add	r1, sp, #8
   23808:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2380a:	4608      	mov	r0, r1
   2380c:	f7ff fddd 	bl	233ca <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   23810:	9b12      	ldr	r3, [sp, #72]	; 0x48
   23812:	aa02      	add	r2, sp, #8
   23814:	4641      	mov	r1, r8
   23816:	4640      	mov	r0, r8
   23818:	f7ff fdc7 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2381c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2381e:	aa02      	add	r2, sp, #8
   23820:	4621      	mov	r1, r4
   23822:	4620      	mov	r0, r4
   23824:	f7ff fdc1 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   23828:	462b      	mov	r3, r5
   2382a:	464a      	mov	r2, r9
   2382c:	4639      	mov	r1, r7
   2382e:	4638      	mov	r0, r7
   23830:	9600      	str	r6, [sp, #0]
   23832:	f7ff fd0b 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   23836:	9a12      	ldr	r2, [sp, #72]	; 0x48
   23838:	4639      	mov	r1, r7
   2383a:	a802      	add	r0, sp, #8
   2383c:	f7ff fdc5 	bl	233ca <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   23840:	a902      	add	r1, sp, #8
   23842:	462b      	mov	r3, r5
   23844:	4642      	mov	r2, r8
   23846:	4608      	mov	r0, r1
   23848:	9600      	str	r6, [sp, #0]
   2384a:	f7ff fcff 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   2384e:	a902      	add	r1, sp, #8
   23850:	462b      	mov	r3, r5
   23852:	4622      	mov	r2, r4
   23854:	4608      	mov	r0, r1
   23856:	9600      	str	r6, [sp, #0]
   23858:	f7ff fcf8 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   2385c:	462b      	mov	r3, r5
   2385e:	4642      	mov	r2, r8
   23860:	4621      	mov	r1, r4
   23862:	4620      	mov	r0, r4
   23864:	9600      	str	r6, [sp, #0]
   23866:	f7ff fcf1 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   2386a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2386c:	4622      	mov	r2, r4
   2386e:	4649      	mov	r1, r9
   23870:	4648      	mov	r0, r9
   23872:	f7ff fd9a 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   23876:	462b      	mov	r3, r5
   23878:	aa02      	add	r2, sp, #8
   2387a:	4641      	mov	r1, r8
   2387c:	4620      	mov	r0, r4
   2387e:	9600      	str	r6, [sp, #0]
   23880:	f7ff fce4 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   23884:	9b12      	ldr	r3, [sp, #72]	; 0x48
   23886:	4622      	mov	r2, r4
   23888:	4639      	mov	r1, r7
   2388a:	4638      	mov	r0, r7
   2388c:	f7ff fd8d 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   23890:	462b      	mov	r3, r5
   23892:	464a      	mov	r2, r9
   23894:	4639      	mov	r1, r7
   23896:	4638      	mov	r0, r7
   23898:	9600      	str	r6, [sp, #0]
   2389a:	f7ff fcd7 	bl	2324c <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2389e:	4632      	mov	r2, r6
   238a0:	a902      	add	r1, sp, #8
   238a2:	4620      	mov	r0, r4
   238a4:	f7ff fc6a 	bl	2317c <uECC_vli_set>
}
   238a8:	b00b      	add	sp, #44	; 0x2c
   238aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000238ae <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   238ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238b2:	b0b1      	sub	sp, #196	; 0xc4
   238b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   238b8:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   238ba:	9206      	str	r2, [sp, #24]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   238bc:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   238c0:	a818      	add	r0, sp, #96	; 0x60
   238c2:	463a      	mov	r2, r7
{
   238c4:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   238c6:	f7ff fc59 	bl	2317c <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   238ca:	00bb      	lsls	r3, r7, #2
   238cc:	9307      	str	r3, [sp, #28]
   238ce:	9b05      	ldr	r3, [sp, #20]
   238d0:	00ba      	lsls	r2, r7, #2
   238d2:	4413      	add	r3, r2
   238d4:	4619      	mov	r1, r3
   238d6:	463a      	mov	r2, r7
   238d8:	a828      	add	r0, sp, #160	; 0xa0
   238da:	9302      	str	r3, [sp, #8]
   238dc:	f7ff fc4e 	bl	2317c <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   238e0:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   238e4:	2e00      	cmp	r6, #0
   238e6:	f000 8087 	beq.w	239f8 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   238ea:	462a      	mov	r2, r5
   238ec:	4631      	mov	r1, r6
   238ee:	a808      	add	r0, sp, #32
   238f0:	f7ff fc44 	bl	2317c <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   238f4:	ae10      	add	r6, sp, #64	; 0x40
   238f6:	462a      	mov	r2, r5
   238f8:	a918      	add	r1, sp, #96	; 0x60
   238fa:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
   238fc:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   23900:	f7ff fc3c 	bl	2317c <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   23904:	a928      	add	r1, sp, #160	; 0xa0
   23906:	4648      	mov	r0, r9
   23908:	f7ff fc38 	bl	2317c <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   2390c:	4623      	mov	r3, r4
   2390e:	aa08      	add	r2, sp, #32
   23910:	a928      	add	r1, sp, #160	; 0xa0
   23912:	a818      	add	r0, sp, #96	; 0x60
   23914:	f7ff ff47 	bl	237a6 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   23918:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   2391c:	4623      	mov	r3, r4
   2391e:	aa08      	add	r2, sp, #32
   23920:	a928      	add	r1, sp, #160	; 0xa0
   23922:	a818      	add	r0, sp, #96	; 0x60
   23924:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   23926:	4623      	mov	r3, r4
   23928:	aa08      	add	r2, sp, #32
   2392a:	4649      	mov	r1, r9
   2392c:	4630      	mov	r0, r6
   2392e:	f7ff ff3a 	bl	237a6 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   23932:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   23936:	3d02      	subs	r5, #2
   23938:	b22d      	sxth	r5, r5
   2393a:	2d00      	cmp	r5, #0
   2393c:	dc63      	bgt.n	23a06 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2393e:	9b06      	ldr	r3, [sp, #24]
   23940:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23942:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23944:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23948:	ab10      	add	r3, sp, #64	; 0x40
   2394a:	0176      	lsls	r6, r6, #5
   2394c:	43ed      	mvns	r5, r5
   2394e:	eb03 0806 	add.w	r8, r3, r6
   23952:	f005 0501 	and.w	r5, r5, #1
   23956:	ab20      	add	r3, sp, #128	; 0x80
   23958:	441e      	add	r6, r3
   2395a:	016d      	lsls	r5, r5, #5
   2395c:	ab10      	add	r3, sp, #64	; 0x40
   2395e:	eb03 0905 	add.w	r9, r3, r5
   23962:	ab20      	add	r3, sp, #128	; 0x80
   23964:	441d      	add	r5, r3

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   23966:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2396a:	462b      	mov	r3, r5
   2396c:	464a      	mov	r2, r9
   2396e:	4631      	mov	r1, r6
   23970:	4640      	mov	r0, r8
   23972:	f7ff fe04 	bl	2357e <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   23976:	4653      	mov	r3, sl
   23978:	aa10      	add	r2, sp, #64	; 0x40
   2397a:	a918      	add	r1, sp, #96	; 0x60
   2397c:	a808      	add	r0, sp, #32
   2397e:	9700      	str	r7, [sp, #0]
   23980:	f7ff fc64 	bl	2324c <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   23984:	a908      	add	r1, sp, #32
   23986:	4623      	mov	r3, r4
   23988:	4632      	mov	r2, r6
   2398a:	4608      	mov	r0, r1
   2398c:	f7ff fd0d 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   23990:	a908      	add	r1, sp, #32
   23992:	4623      	mov	r3, r4
   23994:	9a05      	ldr	r2, [sp, #20]
   23996:	4608      	mov	r0, r1
   23998:	f7ff fd07 	bl	233aa <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2399c:	a908      	add	r1, sp, #32
   2399e:	463b      	mov	r3, r7
   239a0:	4652      	mov	r2, sl
   239a2:	4608      	mov	r0, r1
   239a4:	f7ff fe77 	bl	23696 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   239a8:	a908      	add	r1, sp, #32
   239aa:	4623      	mov	r3, r4
   239ac:	9a02      	ldr	r2, [sp, #8]
   239ae:	4608      	mov	r0, r1
   239b0:	f7ff fcfb 	bl	233aa <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   239b4:	a908      	add	r1, sp, #32
   239b6:	4623      	mov	r3, r4
   239b8:	4642      	mov	r2, r8
   239ba:	4608      	mov	r0, r1
   239bc:	f7ff fcf5 	bl	233aa <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   239c0:	9400      	str	r4, [sp, #0]
   239c2:	4633      	mov	r3, r6
   239c4:	4642      	mov	r2, r8
   239c6:	4629      	mov	r1, r5
   239c8:	4648      	mov	r0, r9
   239ca:	f7ff ff0b 	bl	237e4 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   239ce:	4623      	mov	r3, r4
   239d0:	aa08      	add	r2, sp, #32
   239d2:	a920      	add	r1, sp, #128	; 0x80
   239d4:	a810      	add	r0, sp, #64	; 0x40
   239d6:	f7ff fee6 	bl	237a6 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   239da:	463a      	mov	r2, r7
   239dc:	a910      	add	r1, sp, #64	; 0x40
   239de:	9804      	ldr	r0, [sp, #16]
   239e0:	f7ff fbcc 	bl	2317c <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   239e4:	9b04      	ldr	r3, [sp, #16]
   239e6:	9c07      	ldr	r4, [sp, #28]
   239e8:	4423      	add	r3, r4
   239ea:	a920      	add	r1, sp, #128	; 0x80
   239ec:	4618      	mov	r0, r3
   239ee:	f7ff fbc5 	bl	2317c <uECC_vli_set>
}
   239f2:	b031      	add	sp, #196	; 0xc4
   239f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   239f8:	4629      	mov	r1, r5
   239fa:	a808      	add	r0, sp, #32
   239fc:	f7ff fb79 	bl	230f2 <uECC_vli_clear>
		z[0] = 1;
   23a00:	2301      	movs	r3, #1
   23a02:	9308      	str	r3, [sp, #32]
   23a04:	e776      	b.n	238f4 <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
   23a06:	4629      	mov	r1, r5
   23a08:	9806      	ldr	r0, [sp, #24]
   23a0a:	f7ff fb8c 	bl	23126 <uECC_vli_testBit>
   23a0e:	fab0 f080 	clz	r0, r0
   23a12:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23a14:	f1c0 0801 	rsb	r8, r0, #1
   23a18:	ea4f 1848 	mov.w	r8, r8, lsl #5
   23a1c:	0140      	lsls	r0, r0, #5
   23a1e:	eb06 0b08 	add.w	fp, r6, r8
   23a22:	eb06 0a00 	add.w	sl, r6, r0
   23a26:	44c8      	add	r8, r9
   23a28:	eb09 0300 	add.w	r3, r9, r0
   23a2c:	4652      	mov	r2, sl
   23a2e:	4641      	mov	r1, r8
   23a30:	4658      	mov	r0, fp
   23a32:	9400      	str	r4, [sp, #0]
   23a34:	9303      	str	r3, [sp, #12]
   23a36:	f7ff fda2 	bl	2357e <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   23a3a:	9400      	str	r4, [sp, #0]
   23a3c:	4643      	mov	r3, r8
   23a3e:	465a      	mov	r2, fp
   23a40:	9903      	ldr	r1, [sp, #12]
   23a42:	4650      	mov	r0, sl
   23a44:	f7ff fece 	bl	237e4 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   23a48:	3d01      	subs	r5, #1
   23a4a:	e775      	b.n	23938 <EccPoint_mult+0x8a>

00023a4c <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   23a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   23a50:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
   23a54:	f114 051f 	adds.w	r5, r4, #31
   23a58:	bf48      	it	mi
   23a5a:	f104 053e 	addmi.w	r5, r4, #62	; 0x3e
{
   23a5e:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   23a60:	f103 0624 	add.w	r6, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   23a64:	f345 1547 	sbfx	r5, r5, #5, #8
{
   23a68:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   23a6a:	4601      	mov	r1, r0
   23a6c:	462b      	mov	r3, r5
   23a6e:	4632      	mov	r2, r6
   23a70:	4638      	mov	r0, r7
   23a72:	f7ff fa88 	bl	22f86 <uECC_vli_add>
   23a76:	b990      	cbnz	r0, 23a9e <regularize_k+0x52>
   23a78:	ebb4 1f45 	cmp.w	r4, r5, lsl #5
   23a7c:	da11      	bge.n	23aa2 <regularize_k+0x56>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   23a7e:	4621      	mov	r1, r4
   23a80:	4638      	mov	r0, r7
   23a82:	f7ff fb50 	bl	23126 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   23a86:	1c04      	adds	r4, r0, #0
   23a88:	bf18      	it	ne
   23a8a:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   23a8c:	462b      	mov	r3, r5
   23a8e:	4632      	mov	r2, r6
   23a90:	4639      	mov	r1, r7
   23a92:	4640      	mov	r0, r8
   23a94:	f7ff fa77 	bl	22f86 <uECC_vli_add>

	return carry;
}
   23a98:	4620      	mov	r0, r4
   23a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   23a9e:	2401      	movs	r4, #1
   23aa0:	e7f4      	b.n	23a8c <regularize_k+0x40>
   23aa2:	4604      	mov	r4, r0
   23aa4:	e7f2      	b.n	23a8c <regularize_k+0x40>

00023aa6 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   23aa6:	b530      	push	{r4, r5, lr}
   23aa8:	4614      	mov	r4, r2
   23aaa:	b095      	sub	sp, #84	; 0x54
   23aac:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   23aae:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   23ab0:	4623      	mov	r3, r4
{
   23ab2:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   23ab4:	a904      	add	r1, sp, #16
   23ab6:	9102      	str	r1, [sp, #8]
   23ab8:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   23aba:	f7ff ffc7 	bl	23a4c <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   23abe:	fab0 f080 	clz	r0, r0
   23ac2:	ab14      	add	r3, sp, #80	; 0x50
   23ac4:	0940      	lsrs	r0, r0, #5
   23ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23aca:	8863      	ldrh	r3, [r4, #2]
   23acc:	9401      	str	r4, [sp, #4]
   23ace:	3301      	adds	r3, #1
   23ad0:	b21b      	sxth	r3, r3
   23ad2:	9300      	str	r3, [sp, #0]
   23ad4:	f850 2c48 	ldr.w	r2, [r0, #-72]
   23ad8:	2300      	movs	r3, #0
   23ada:	f104 0144 	add.w	r1, r4, #68	; 0x44
   23ade:	4628      	mov	r0, r5
   23ae0:	f7ff fee5 	bl	238ae <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   23ae4:	4621      	mov	r1, r4
   23ae6:	4628      	mov	r0, r5
   23ae8:	f7ff fe58 	bl	2379c <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   23aec:	fab0 f080 	clz	r0, r0
   23af0:	0940      	lsrs	r0, r0, #5
   23af2:	b015      	add	sp, #84	; 0x54
   23af4:	bd30      	pop	{r4, r5, pc}

00023af6 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   23af6:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   23af8:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   23afa:	1e4f      	subs	r7, r1, #1
   23afc:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   23afe:	428c      	cmp	r4, r1
   23b00:	f105 0501 	add.w	r5, r5, #1
   23b04:	db00      	blt.n	23b08 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   23b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   23b08:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   23b0a:	f023 0603 	bic.w	r6, r3, #3
   23b0e:	f003 0303 	and.w	r3, r3, #3
   23b12:	5996      	ldr	r6, [r2, r6]
   23b14:	00db      	lsls	r3, r3, #3
   23b16:	fa26 f303 	lsr.w	r3, r6, r3
   23b1a:	5503      	strb	r3, [r0, r4]
   23b1c:	e7ee      	b.n	23afc <uECC_vli_nativeToBytes+0x6>

00023b1e <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   23b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23b20:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   23b22:	1cd1      	adds	r1, r2, #3
   23b24:	bf48      	it	mi
   23b26:	1d91      	addmi	r1, r2, #6
{
   23b28:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   23b2a:	f341 0187 	sbfx	r1, r1, #2, #8
{
   23b2e:	4605      	mov	r5, r0
	for (i = 0; i < num_bytes; ++i) {
		unsigned b = num_bytes - 1 - i;
   23b30:	1e67      	subs	r7, r4, #1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   23b32:	f7ff fade 	bl	230f2 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   23b36:	2100      	movs	r1, #0
   23b38:	b24a      	sxtb	r2, r1
   23b3a:	42a2      	cmp	r2, r4
   23b3c:	f101 0101 	add.w	r1, r1, #1
   23b40:	db00      	blt.n	23b44 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   23b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   23b44:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   23b46:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   23b4a:	5cb2      	ldrb	r2, [r6, r2]
   23b4c:	f003 0303 	and.w	r3, r3, #3
   23b50:	00db      	lsls	r3, r3, #3
   23b52:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   23b56:	582a      	ldr	r2, [r5, r0]
   23b58:	431a      	orrs	r2, r3
   23b5a:	502a      	str	r2, [r5, r0]
   23b5c:	e7ec      	b.n	23b38 <uECC_vli_bytesToNative+0x1a>

00023b5e <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   23b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23b62:	b090      	sub	sp, #64	; 0x40
   23b64:	4606      	mov	r6, r0
   23b66:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   23b68:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   23b6c:	f7ff fe16 	bl	2379c <EccPoint_isZero>
   23b70:	bb40      	cbnz	r0, 23bc4 <uECC_valid_point+0x66>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   23b72:	f104 0804 	add.w	r8, r4, #4
   23b76:	462a      	mov	r2, r5
   23b78:	4631      	mov	r1, r6
   23b7a:	4640      	mov	r0, r8
   23b7c:	f7ff fb0a 	bl	23194 <uECC_vli_cmp_unsafe>
   23b80:	2801      	cmp	r0, #1
   23b82:	d122      	bne.n	23bca <uECC_valid_point+0x6c>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   23b84:	eb06 0785 	add.w	r7, r6, r5, lsl #2
   23b88:	462a      	mov	r2, r5
   23b8a:	4639      	mov	r1, r7
   23b8c:	4640      	mov	r0, r8
   23b8e:	f7ff fb01 	bl	23194 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   23b92:	2801      	cmp	r0, #1
   23b94:	d119      	bne.n	23bca <uECC_valid_point+0x6c>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   23b96:	4622      	mov	r2, r4
   23b98:	4668      	mov	r0, sp
   23b9a:	f7ff fc16 	bl	233ca <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   23b9e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   23ba2:	4622      	mov	r2, r4
   23ba4:	4631      	mov	r1, r6
   23ba6:	a808      	add	r0, sp, #32
   23ba8:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   23baa:	462a      	mov	r2, r5
   23bac:	a908      	add	r1, sp, #32
   23bae:	4668      	mov	r0, sp
   23bb0:	f7ff fb07 	bl	231c2 <uECC_vli_equal>
   23bb4:	2800      	cmp	r0, #0
		return -3;
   23bb6:	bf0c      	ite	eq
   23bb8:	2000      	moveq	r0, #0
   23bba:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   23bbe:	b010      	add	sp, #64	; 0x40
   23bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   23bc4:	f04f 30ff 	mov.w	r0, #4294967295
   23bc8:	e7f9      	b.n	23bbe <uECC_valid_point+0x60>
		return -2;
   23bca:	f06f 0001 	mvn.w	r0, #1
   23bce:	e7f6      	b.n	23bbe <uECC_valid_point+0x60>

00023bd0 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   23bd0:	b570      	push	{r4, r5, r6, lr}
   23bd2:	460c      	mov	r4, r1
   23bd4:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   23bd6:	4625      	mov	r5, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   23bd8:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   23bdc:	4606      	mov	r6, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   23bde:	4601      	mov	r1, r0
   23be0:	4668      	mov	r0, sp
   23be2:	f7ff ff9c 	bl	23b1e <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   23be6:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   23bea:	f915 0b44 	ldrsb.w	r0, [r5], #68
	uECC_vli_bytesToNative(
   23bee:	18b1      	adds	r1, r6, r2
   23bf0:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   23bf4:	f7ff ff93 	bl	23b1e <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   23bf8:	2210      	movs	r2, #16
   23bfa:	4629      	mov	r1, r5
   23bfc:	4668      	mov	r0, sp
   23bfe:	f7ff fac9 	bl	23194 <uECC_vli_cmp_unsafe>
   23c02:	b128      	cbz	r0, 23c10 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   23c04:	4621      	mov	r1, r4
   23c06:	4668      	mov	r0, sp
   23c08:	f7ff ffa9 	bl	23b5e <uECC_valid_point>
}
   23c0c:	b010      	add	sp, #64	; 0x40
   23c0e:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   23c10:	f06f 0003 	mvn.w	r0, #3
   23c14:	e7fa      	b.n	23c0c <uECC_valid_public_key+0x3c>

00023c16 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   23c16:	78cb      	ldrb	r3, [r1, #3]
   23c18:	7802      	ldrb	r2, [r0, #0]
   23c1a:	4053      	eors	r3, r2
   23c1c:	7003      	strb	r3, [r0, #0]
   23c1e:	884b      	ldrh	r3, [r1, #2]
   23c20:	7842      	ldrb	r2, [r0, #1]
   23c22:	4053      	eors	r3, r2
   23c24:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   23c26:	680a      	ldr	r2, [r1, #0]
   23c28:	7883      	ldrb	r3, [r0, #2]
   23c2a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23c2e:	7083      	strb	r3, [r0, #2]
   23c30:	680a      	ldr	r2, [r1, #0]
   23c32:	78c3      	ldrb	r3, [r0, #3]
   23c34:	4053      	eors	r3, r2
   23c36:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   23c38:	79cb      	ldrb	r3, [r1, #7]
   23c3a:	7902      	ldrb	r2, [r0, #4]
   23c3c:	4053      	eors	r3, r2
   23c3e:	7103      	strb	r3, [r0, #4]
   23c40:	88cb      	ldrh	r3, [r1, #6]
   23c42:	7942      	ldrb	r2, [r0, #5]
   23c44:	4053      	eors	r3, r2
   23c46:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   23c48:	684a      	ldr	r2, [r1, #4]
   23c4a:	7983      	ldrb	r3, [r0, #6]
   23c4c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23c50:	7183      	strb	r3, [r0, #6]
   23c52:	684a      	ldr	r2, [r1, #4]
   23c54:	79c3      	ldrb	r3, [r0, #7]
   23c56:	4053      	eors	r3, r2
   23c58:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   23c5a:	7acb      	ldrb	r3, [r1, #11]
   23c5c:	7a02      	ldrb	r2, [r0, #8]
   23c5e:	4053      	eors	r3, r2
   23c60:	7203      	strb	r3, [r0, #8]
   23c62:	7a42      	ldrb	r2, [r0, #9]
   23c64:	894b      	ldrh	r3, [r1, #10]
   23c66:	4053      	eors	r3, r2
   23c68:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   23c6a:	688a      	ldr	r2, [r1, #8]
   23c6c:	7a83      	ldrb	r3, [r0, #10]
   23c6e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23c72:	7283      	strb	r3, [r0, #10]
   23c74:	688a      	ldr	r2, [r1, #8]
   23c76:	7ac3      	ldrb	r3, [r0, #11]
   23c78:	4053      	eors	r3, r2
   23c7a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   23c7c:	7bcb      	ldrb	r3, [r1, #15]
   23c7e:	7b02      	ldrb	r2, [r0, #12]
   23c80:	4053      	eors	r3, r2
   23c82:	7303      	strb	r3, [r0, #12]
   23c84:	89cb      	ldrh	r3, [r1, #14]
   23c86:	7b42      	ldrb	r2, [r0, #13]
   23c88:	4053      	eors	r3, r2
   23c8a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   23c8c:	68ca      	ldr	r2, [r1, #12]
   23c8e:	7b83      	ldrb	r3, [r0, #14]
   23c90:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23c94:	7383      	strb	r3, [r0, #14]
   23c96:	68ca      	ldr	r2, [r1, #12]
   23c98:	7bc3      	ldrb	r3, [r0, #15]
   23c9a:	4053      	eors	r3, r2
   23c9c:	73c3      	strb	r3, [r0, #15]
}
   23c9e:	4770      	bx	lr

00023ca0 <shift_rows>:
{
   23ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   23ca2:	7802      	ldrb	r2, [r0, #0]
   23ca4:	f88d 2000 	strb.w	r2, [sp]
   23ca8:	7942      	ldrb	r2, [r0, #5]
   23caa:	f88d 2001 	strb.w	r2, [sp, #1]
   23cae:	7a82      	ldrb	r2, [r0, #10]
   23cb0:	f88d 2002 	strb.w	r2, [sp, #2]
   23cb4:	7bc2      	ldrb	r2, [r0, #15]
   23cb6:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   23cba:	7902      	ldrb	r2, [r0, #4]
   23cbc:	f88d 2004 	strb.w	r2, [sp, #4]
   23cc0:	7a42      	ldrb	r2, [r0, #9]
   23cc2:	f88d 2005 	strb.w	r2, [sp, #5]
   23cc6:	7b82      	ldrb	r2, [r0, #14]
   23cc8:	f88d 2006 	strb.w	r2, [sp, #6]
   23ccc:	78c2      	ldrb	r2, [r0, #3]
   23cce:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   23cd2:	7a02      	ldrb	r2, [r0, #8]
   23cd4:	f88d 2008 	strb.w	r2, [sp, #8]
   23cd8:	7b42      	ldrb	r2, [r0, #13]
   23cda:	f88d 2009 	strb.w	r2, [sp, #9]
   23cde:	7882      	ldrb	r2, [r0, #2]
   23ce0:	f88d 200a 	strb.w	r2, [sp, #10]
   23ce4:	79c2      	ldrb	r2, [r0, #7]
   23ce6:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   23cea:	7b02      	ldrb	r2, [r0, #12]
   23cec:	f88d 200c 	strb.w	r2, [sp, #12]
   23cf0:	7842      	ldrb	r2, [r0, #1]
   23cf2:	f88d 200d 	strb.w	r2, [sp, #13]
   23cf6:	7ac3      	ldrb	r3, [r0, #11]
   23cf8:	7982      	ldrb	r2, [r0, #6]
   23cfa:	f88d 200e 	strb.w	r2, [sp, #14]
   23cfe:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   23d02:	2310      	movs	r3, #16
   23d04:	466a      	mov	r2, sp
   23d06:	4619      	mov	r1, r3
   23d08:	f7ff f879 	bl	22dfe <_copy>
}
   23d0c:	b005      	add	sp, #20
   23d0e:	f85d fb04 	ldr.w	pc, [sp], #4

00023d12 <mult_row_column>:
{
   23d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23d14:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   23d16:	7808      	ldrb	r0, [r1, #0]
{
   23d18:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   23d1a:	f7ff f87f 	bl	22e1c <_double_byte>
   23d1e:	4605      	mov	r5, r0
   23d20:	7860      	ldrb	r0, [r4, #1]
   23d22:	f7ff f87b 	bl	22e1c <_double_byte>
   23d26:	78a2      	ldrb	r2, [r4, #2]
   23d28:	7863      	ldrb	r3, [r4, #1]
   23d2a:	4053      	eors	r3, r2
   23d2c:	78e2      	ldrb	r2, [r4, #3]
   23d2e:	4053      	eors	r3, r2
   23d30:	405d      	eors	r5, r3
   23d32:	4045      	eors	r5, r0
   23d34:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   23d36:	7860      	ldrb	r0, [r4, #1]
   23d38:	7827      	ldrb	r7, [r4, #0]
   23d3a:	f7ff f86f 	bl	22e1c <_double_byte>
   23d3e:	4605      	mov	r5, r0
   23d40:	78a0      	ldrb	r0, [r4, #2]
   23d42:	f7ff f86b 	bl	22e1c <_double_byte>
   23d46:	78a3      	ldrb	r3, [r4, #2]
   23d48:	405f      	eors	r7, r3
   23d4a:	78e3      	ldrb	r3, [r4, #3]
   23d4c:	405f      	eors	r7, r3
   23d4e:	407d      	eors	r5, r7
   23d50:	4045      	eors	r5, r0
   23d52:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   23d54:	78a0      	ldrb	r0, [r4, #2]
   23d56:	7865      	ldrb	r5, [r4, #1]
   23d58:	7827      	ldrb	r7, [r4, #0]
   23d5a:	f7ff f85f 	bl	22e1c <_double_byte>
   23d5e:	406f      	eors	r7, r5
   23d60:	4605      	mov	r5, r0
   23d62:	78e0      	ldrb	r0, [r4, #3]
   23d64:	f7ff f85a 	bl	22e1c <_double_byte>
   23d68:	78e3      	ldrb	r3, [r4, #3]
   23d6a:	405f      	eors	r7, r3
   23d6c:	407d      	eors	r5, r7
   23d6e:	4045      	eors	r5, r0
   23d70:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   23d72:	7820      	ldrb	r0, [r4, #0]
   23d74:	f7ff f852 	bl	22e1c <_double_byte>
   23d78:	7863      	ldrb	r3, [r4, #1]
   23d7a:	7825      	ldrb	r5, [r4, #0]
   23d7c:	405d      	eors	r5, r3
   23d7e:	78a3      	ldrb	r3, [r4, #2]
   23d80:	405d      	eors	r5, r3
   23d82:	4045      	eors	r5, r0
   23d84:	78e0      	ldrb	r0, [r4, #3]
   23d86:	f7ff f849 	bl	22e1c <_double_byte>
   23d8a:	b2ed      	uxtb	r5, r5
   23d8c:	4068      	eors	r0, r5
   23d8e:	70f0      	strb	r0, [r6, #3]
}
   23d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023d92 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   23d92:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   23d94:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   23d96:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   23d98:	f912 3b10 	ldrsb.w	r3, [r2], #16
   23d9c:	2b00      	cmp	r3, #0
   23d9e:	bfb4      	ite	lt
   23da0:	2387      	movlt	r3, #135	; 0x87
   23da2:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   23da4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   23da8:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   23dac:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   23dae:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   23db2:	d002      	beq.n	23dba <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   23db4:	7813      	ldrb	r3, [r2, #0]
   23db6:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   23db8:	e7f4      	b.n	23da4 <gf_double+0x12>
	}
}
   23dba:	bd10      	pop	{r4, pc}

00023dbc <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   23dbc:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   23dbe:	b120      	cbz	r0, 23dca <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   23dc0:	2258      	movs	r2, #88	; 0x58
   23dc2:	2100      	movs	r1, #0
   23dc4:	f7ff f828 	bl	22e18 <_set>
   23dc8:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   23dca:	bd08      	pop	{r3, pc}

00023dcc <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   23dcc:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   23dce:	4604      	mov	r4, r0
   23dd0:	b188      	cbz	r0, 23df6 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   23dd2:	2210      	movs	r2, #16
   23dd4:	2100      	movs	r1, #0
   23dd6:	f7ff f81f 	bl	22e18 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   23dda:	2210      	movs	r2, #16
   23ddc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   23de0:	2100      	movs	r1, #0
   23de2:	f7ff f819 	bl	22e18 <_set>
	s->leftover_offset = 0;
   23de6:	2300      	movs	r3, #0
   23de8:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   23dea:	2200      	movs	r2, #0
   23dec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   23df0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   23df4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   23df6:	bd10      	pop	{r4, pc}

00023df8 <tc_cmac_setup>:
{
   23df8:	b570      	push	{r4, r5, r6, lr}
   23dfa:	460d      	mov	r5, r1
   23dfc:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   23dfe:	4604      	mov	r4, r0
   23e00:	b310      	cbz	r0, 23e48 <tc_cmac_setup+0x50>
   23e02:	b311      	cbz	r1, 23e4a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   23e04:	2258      	movs	r2, #88	; 0x58
   23e06:	2100      	movs	r1, #0
   23e08:	f7ff f806 	bl	22e18 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   23e0c:	4629      	mov	r1, r5
	s->sched = sched;
   23e0e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   23e10:	4630      	mov	r0, r6
   23e12:	f7e0 fbd3 	bl	45bc <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   23e16:	2210      	movs	r2, #16
   23e18:	2100      	movs	r1, #0
   23e1a:	4620      	mov	r0, r4
   23e1c:	f7fe fffc 	bl	22e18 <_set>
	gf_double (s->K1, s->iv);
   23e20:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   23e24:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23e26:	4621      	mov	r1, r4
   23e28:	4620      	mov	r0, r4
   23e2a:	f7e0 fc1d 	bl	4668 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   23e2e:	4621      	mov	r1, r4
   23e30:	4628      	mov	r0, r5
   23e32:	f7ff ffae 	bl	23d92 <gf_double>
	gf_double (s->K2, s->K1);
   23e36:	4629      	mov	r1, r5
   23e38:	f104 0020 	add.w	r0, r4, #32
   23e3c:	f7ff ffa9 	bl	23d92 <gf_double>
	tc_cmac_init(s);
   23e40:	4620      	mov	r0, r4
   23e42:	f7ff ffc3 	bl	23dcc <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   23e46:	2001      	movs	r0, #1
}
   23e48:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   23e4a:	4608      	mov	r0, r1
   23e4c:	e7fc      	b.n	23e48 <tc_cmac_setup+0x50>

00023e4e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   23e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e52:	460d      	mov	r5, r1
   23e54:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   23e56:	4604      	mov	r4, r0
   23e58:	2800      	cmp	r0, #0
   23e5a:	d060      	beq.n	23f1e <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   23e5c:	b912      	cbnz	r2, 23e64 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   23e5e:	2001      	movs	r0, #1
}
   23e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   23e64:	2900      	cmp	r1, #0
   23e66:	d05a      	beq.n	23f1e <tc_cmac_update+0xd0>
	if (s->countdown == 0) {
   23e68:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   23e6c:	ea50 0301 	orrs.w	r3, r0, r1
   23e70:	d055      	beq.n	23f1e <tc_cmac_update+0xd0>
	s->countdown--;
   23e72:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   23e76:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   23e7a:	f141 33ff 	adc.w	r3, r1, #4294967295
   23e7e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   23e82:	f1b8 0f00 	cmp.w	r8, #0
   23e86:	d029      	beq.n	23edc <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   23e88:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   23e8c:	f108 0030 	add.w	r0, r8, #48	; 0x30
   23e90:	42be      	cmp	r6, r7
   23e92:	4420      	add	r0, r4
   23e94:	d208      	bcs.n	23ea8 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   23e96:	4633      	mov	r3, r6
   23e98:	4631      	mov	r1, r6
   23e9a:	462a      	mov	r2, r5
   23e9c:	f7fe ffaf 	bl	22dfe <_copy>
			s->leftover_offset += data_length;
   23ea0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   23ea2:	441e      	add	r6, r3
		s->leftover_offset = data_length;
   23ea4:	6466      	str	r6, [r4, #68]	; 0x44
   23ea6:	e7da      	b.n	23e5e <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   23ea8:	463b      	mov	r3, r7
   23eaa:	462a      	mov	r2, r5
   23eac:	4639      	mov	r1, r7
   23eae:	f7fe ffa6 	bl	22dfe <_copy>
		data_length -= remaining_space;
   23eb2:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   23eb4:	2300      	movs	r3, #0
   23eb6:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   23eb8:	4446      	add	r6, r8
		data += remaining_space;
   23eba:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23ebc:	1e63      	subs	r3, r4, #1
   23ebe:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
   23ec2:	785a      	ldrb	r2, [r3, #1]
   23ec4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
   23ec8:	404a      	eors	r2, r1
   23eca:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23ece:	4283      	cmp	r3, r0
   23ed0:	d1f7      	bne.n	23ec2 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   23ed2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23ed4:	4621      	mov	r1, r4
   23ed6:	4620      	mov	r0, r4
   23ed8:	f7e0 fbc6 	bl	4668 <tc_aes_encrypt>
   23edc:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   23ee0:	2e10      	cmp	r6, #16
   23ee2:	d809      	bhi.n	23ef8 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   23ee4:	2e00      	cmp	r6, #0
   23ee6:	d0ba      	beq.n	23e5e <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   23ee8:	4633      	mov	r3, r6
   23eea:	462a      	mov	r2, r5
   23eec:	4631      	mov	r1, r6
   23eee:	f104 0030 	add.w	r0, r4, #48	; 0x30
   23ef2:	f7fe ff84 	bl	22dfe <_copy>
   23ef6:	e7d5      	b.n	23ea4 <tc_cmac_update+0x56>
   23ef8:	1e63      	subs	r3, r4, #1
   23efa:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   23efc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23f00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23f04:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   23f06:	ea82 0200 	eor.w	r2, r2, r0
   23f0a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23f0c:	d1f6      	bne.n	23efc <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   23f0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23f10:	4621      	mov	r1, r4
   23f12:	4620      	mov	r0, r4
   23f14:	f7e0 fba8 	bl	4668 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   23f18:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   23f1a:	3e10      	subs	r6, #16
   23f1c:	e7e0      	b.n	23ee0 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   23f1e:	2000      	movs	r0, #0
   23f20:	e79e      	b.n	23e60 <tc_cmac_update+0x12>

00023f22 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   23f22:	b570      	push	{r4, r5, r6, lr}
   23f24:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   23f26:	4605      	mov	r5, r0
   23f28:	b1e8      	cbz	r0, 23f66 <tc_cmac_final+0x44>
   23f2a:	b369      	cbz	r1, 23f88 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   23f2c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   23f2e:	2a10      	cmp	r2, #16
   23f30:	d11a      	bne.n	23f68 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   23f32:	f101 0210 	add.w	r2, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23f36:	1e61      	subs	r1, r4, #1
   23f38:	3a01      	subs	r2, #1
   23f3a:	f104 060f 	add.w	r6, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   23f3e:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
   23f42:	784b      	ldrb	r3, [r1, #1]
   23f44:	4043      	eors	r3, r0
   23f46:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   23f4a:	4043      	eors	r3, r0
   23f4c:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23f50:	428e      	cmp	r6, r1
   23f52:	d1f4      	bne.n	23f3e <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   23f54:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23f56:	4621      	mov	r1, r4
   23f58:	4628      	mov	r0, r5
   23f5a:	f7e0 fb85 	bl	4668 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   23f5e:	4620      	mov	r0, r4
   23f60:	f7ff ff2c 	bl	23dbc <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   23f64:	2001      	movs	r0, #1
}
   23f66:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   23f68:	f102 0030 	add.w	r0, r2, #48	; 0x30
   23f6c:	2100      	movs	r1, #0
   23f6e:	f1c2 0210 	rsb	r2, r2, #16
   23f72:	4420      	add	r0, r4
   23f74:	f7fe ff50 	bl	22e18 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   23f78:	6c63      	ldr	r3, [r4, #68]	; 0x44
   23f7a:	4423      	add	r3, r4
   23f7c:	2280      	movs	r2, #128	; 0x80
   23f7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   23f82:	f104 0220 	add.w	r2, r4, #32
   23f86:	e7d6      	b.n	23f36 <tc_cmac_final+0x14>
		return TC_CRYPTO_FAIL;
   23f88:	4608      	mov	r0, r1
   23f8a:	e7ec      	b.n	23f66 <tc_cmac_final+0x44>

00023f8c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   23f8c:	2100      	movs	r1, #0
   23f8e:	2001      	movs	r0, #1
   23f90:	f7e0 bd02 	b.w	4998 <z_arm_fatal_error>

00023f94 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   23f94:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   23f96:	6800      	ldr	r0, [r0, #0]
   23f98:	f7e0 bcfe 	b.w	4998 <z_arm_fatal_error>

00023f9c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   23f9c:	b508      	push	{r3, lr}
	handler();
   23f9e:	f7e0 fd29 	bl	49f4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   23fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   23fa6:	f7e0 bf81 	b.w	4eac <z_arm_exc_exit>

00023faa <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   23faa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23fae:	4684      	mov	ip, r0
   23fb0:	460f      	mov	r7, r1
	register const char *s = nptr;
   23fb2:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   23fb4:	462c      	mov	r4, r5
   23fb6:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   23fba:	2b20      	cmp	r3, #32
   23fbc:	d036      	beq.n	2402c <strtol+0x82>
   23fbe:	f1a3 0109 	sub.w	r1, r3, #9
   23fc2:	2904      	cmp	r1, #4
   23fc4:	d932      	bls.n	2402c <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   23fc6:	2b2d      	cmp	r3, #45	; 0x2d
   23fc8:	d132      	bne.n	24030 <strtol+0x86>
		neg = 1;
		c = *s++;
   23fca:	786b      	ldrb	r3, [r5, #1]
   23fcc:	1cac      	adds	r4, r5, #2
		neg = 1;
   23fce:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   23fd0:	2a00      	cmp	r2, #0
   23fd2:	d05c      	beq.n	2408e <strtol+0xe4>
   23fd4:	2a10      	cmp	r2, #16
   23fd6:	d109      	bne.n	23fec <strtol+0x42>
   23fd8:	2b30      	cmp	r3, #48	; 0x30
   23fda:	d107      	bne.n	23fec <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   23fdc:	7823      	ldrb	r3, [r4, #0]
   23fde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   23fe2:	2b58      	cmp	r3, #88	; 0x58
   23fe4:	d14e      	bne.n	24084 <strtol+0xda>
		c = s[1];
   23fe6:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   23fe8:	2210      	movs	r2, #16
		s += 2;
   23fea:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   23fec:	2900      	cmp	r1, #0
   23fee:	bf14      	ite	ne
   23ff0:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   23ff4:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   23ff8:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   23ffa:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   23ffe:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   24000:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   24004:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   24008:	2d09      	cmp	r5, #9
   2400a:	d817      	bhi.n	2403c <strtol+0x92>
			c -= '0';
   2400c:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   2400e:	429a      	cmp	r2, r3
   24010:	dd24      	ble.n	2405c <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   24012:	1c75      	adds	r5, r6, #1
   24014:	d007      	beq.n	24026 <strtol+0x7c>
   24016:	4570      	cmp	r0, lr
   24018:	d81d      	bhi.n	24056 <strtol+0xac>
   2401a:	d101      	bne.n	24020 <strtol+0x76>
   2401c:	454b      	cmp	r3, r9
   2401e:	dc1a      	bgt.n	24056 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   24020:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   24024:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   24026:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   2402a:	e7eb      	b.n	24004 <strtol+0x5a>
{
   2402c:	4625      	mov	r5, r4
   2402e:	e7c1      	b.n	23fb4 <strtol+0xa>
	} else if (c == '+') {
   24030:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   24032:	bf04      	itt	eq
   24034:	1cac      	addeq	r4, r5, #2
   24036:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   24038:	2100      	movs	r1, #0
   2403a:	e7c9      	b.n	23fd0 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2403c:	f043 0520 	orr.w	r5, r3, #32
   24040:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   24042:	2d19      	cmp	r5, #25
   24044:	d80a      	bhi.n	2405c <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   24046:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   2404a:	2d1a      	cmp	r5, #26
   2404c:	bf34      	ite	cc
   2404e:	2537      	movcc	r5, #55	; 0x37
   24050:	2557      	movcs	r5, #87	; 0x57
   24052:	1b5b      	subs	r3, r3, r5
   24054:	e7db      	b.n	2400e <strtol+0x64>
			any = -1;
   24056:	f04f 36ff 	mov.w	r6, #4294967295
   2405a:	e7e4      	b.n	24026 <strtol+0x7c>
		}
	}

	if (any < 0) {
   2405c:	1c73      	adds	r3, r6, #1
   2405e:	d107      	bne.n	24070 <strtol+0xc6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   24060:	f7fa f806 	bl	1e070 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   24064:	2326      	movs	r3, #38	; 0x26
   24066:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   24068:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   2406a:	b937      	cbnz	r7, 2407a <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2406c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   24070:	b101      	cbz	r1, 24074 <strtol+0xca>
		acc = -acc;
   24072:	4240      	negs	r0, r0
	if (endptr != NULL) {
   24074:	2f00      	cmp	r7, #0
   24076:	d0f9      	beq.n	2406c <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   24078:	b10e      	cbz	r6, 2407e <strtol+0xd4>
   2407a:	f104 3cff 	add.w	ip, r4, #4294967295
   2407e:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   24082:	e7f3      	b.n	2406c <strtol+0xc2>
	if (base == 0) {
   24084:	2330      	movs	r3, #48	; 0x30
   24086:	2a00      	cmp	r2, #0
   24088:	d1b0      	bne.n	23fec <strtol+0x42>
		base = c == '0' ? 8 : 10;
   2408a:	2208      	movs	r2, #8
   2408c:	e7ae      	b.n	23fec <strtol+0x42>
	if ((base == 0 || base == 16) &&
   2408e:	2b30      	cmp	r3, #48	; 0x30
   24090:	d0a4      	beq.n	23fdc <strtol+0x32>
		base = c == '0' ? 8 : 10;
   24092:	220a      	movs	r2, #10
   24094:	e7aa      	b.n	23fec <strtol+0x42>

00024096 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   24096:	3901      	subs	r1, #1
   24098:	4603      	mov	r3, r0
   2409a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2409e:	b90a      	cbnz	r2, 240a4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   240a0:	701a      	strb	r2, [r3, #0]

	return dest;
}
   240a2:	4770      	bx	lr
		*d = *s;
   240a4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   240a8:	e7f7      	b.n	2409a <strcpy+0x4>

000240aa <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   240aa:	2300      	movs	r3, #0

	while (*s != '\0') {
   240ac:	5cc2      	ldrb	r2, [r0, r3]
   240ae:	b90a      	cbnz	r2, 240b4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   240b0:	4618      	mov	r0, r3
   240b2:	4770      	bx	lr
		n++;
   240b4:	3301      	adds	r3, #1
   240b6:	e7f9      	b.n	240ac <strlen+0x2>

000240b8 <strnlen>:
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
	size_t n = 0;
   240b8:	2300      	movs	r3, #0

	while (*s != '\0' && n < maxlen) {
   240ba:	5cc2      	ldrb	r2, [r0, r3]
   240bc:	b10a      	cbz	r2, 240c2 <strnlen+0xa>
   240be:	428b      	cmp	r3, r1
   240c0:	d101      	bne.n	240c6 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   240c2:	4618      	mov	r0, r3
   240c4:	4770      	bx	lr
		n++;
   240c6:	3301      	adds	r3, #1
   240c8:	e7f7      	b.n	240ba <strnlen+0x2>

000240ca <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   240ca:	3801      	subs	r0, #1
   240cc:	3901      	subs	r1, #1
   240ce:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   240d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   240d6:	4293      	cmp	r3, r2
   240d8:	d101      	bne.n	240de <strcmp+0x14>
   240da:	2b00      	cmp	r3, #0
   240dc:	d1f7      	bne.n	240ce <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   240de:	1a98      	subs	r0, r3, r2
   240e0:	4770      	bx	lr

000240e2 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   240e2:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   240e4:	2400      	movs	r4, #0
   240e6:	42a2      	cmp	r2, r4
   240e8:	d008      	beq.n	240fc <strncmp+0x1a>
   240ea:	5d03      	ldrb	r3, [r0, r4]
   240ec:	5d0d      	ldrb	r5, [r1, r4]
   240ee:	42ab      	cmp	r3, r5
   240f0:	d102      	bne.n	240f8 <strncmp+0x16>
   240f2:	3401      	adds	r4, #1
   240f4:	2b00      	cmp	r3, #0
   240f6:	d1f6      	bne.n	240e6 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   240f8:	1b58      	subs	r0, r3, r5
   240fa:	e000      	b.n	240fe <strncmp+0x1c>
   240fc:	2000      	movs	r0, #0
}
   240fe:	bd30      	pop	{r4, r5, pc}

00024100 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   24100:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   24102:	b15a      	cbz	r2, 2411c <memcmp+0x1c>
   24104:	3901      	subs	r1, #1
   24106:	1884      	adds	r4, r0, r2
   24108:	f810 2b01 	ldrb.w	r2, [r0], #1
   2410c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   24110:	42a0      	cmp	r0, r4
   24112:	d001      	beq.n	24118 <memcmp+0x18>
   24114:	429a      	cmp	r2, r3
   24116:	d0f7      	beq.n	24108 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   24118:	1ad0      	subs	r0, r2, r3
}
   2411a:	bd10      	pop	{r4, pc}
		return 0;
   2411c:	4610      	mov	r0, r2
   2411e:	e7fc      	b.n	2411a <memcmp+0x1a>

00024120 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   24120:	1a43      	subs	r3, r0, r1
   24122:	4293      	cmp	r3, r2
{
   24124:	b510      	push	{r4, lr}
   24126:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   2412a:	d308      	bcc.n	2413e <memmove+0x1e>
   2412c:	3901      	subs	r1, #1
	char *dest = d;
   2412e:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   24130:	429a      	cmp	r2, r3
   24132:	d00b      	beq.n	2414c <memmove+0x2c>
			*dest = *src;
   24134:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   24138:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2413c:	e7f8      	b.n	24130 <memmove+0x10>
   2413e:	440a      	add	r2, r1
			dest[n] = src[n];
   24140:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   24144:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   24148:	428a      	cmp	r2, r1
   2414a:	d1f9      	bne.n	24140 <memmove+0x20>
		}
	}

	return d;
}
   2414c:	bd10      	pop	{r4, pc}

0002414e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   2414e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   24150:	ea81 0400 	eor.w	r4, r1, r0
   24154:	07a5      	lsls	r5, r4, #30
   24156:	4603      	mov	r3, r0
   24158:	d00b      	beq.n	24172 <memcpy+0x24>
   2415a:	3b01      	subs	r3, #1
   2415c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   2415e:	4291      	cmp	r1, r2
   24160:	d11a      	bne.n	24198 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   24162:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   24164:	2a00      	cmp	r2, #0
   24166:	d0fc      	beq.n	24162 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   24168:	f811 4b01 	ldrb.w	r4, [r1], #1
   2416c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   24170:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   24172:	079c      	lsls	r4, r3, #30
   24174:	d1f6      	bne.n	24164 <memcpy+0x16>
   24176:	0895      	lsrs	r5, r2, #2
   24178:	00ac      	lsls	r4, r5, #2
   2417a:	1f1e      	subs	r6, r3, #4
   2417c:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   2417e:	42b9      	cmp	r1, r7
   24180:	d105      	bne.n	2418e <memcpy+0x40>
   24182:	f06f 0603 	mvn.w	r6, #3
   24186:	fb06 2205 	mla	r2, r6, r5, r2
   2418a:	4423      	add	r3, r4
   2418c:	e7e5      	b.n	2415a <memcpy+0xc>
			*(d_word++) = *(s_word++);
   2418e:	f851 cb04 	ldr.w	ip, [r1], #4
   24192:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   24196:	e7f2      	b.n	2417e <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   24198:	f811 4b01 	ldrb.w	r4, [r1], #1
   2419c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   241a0:	e7dd      	b.n	2415e <memcpy+0x10>

000241a2 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   241a2:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   241a4:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   241a6:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   241a8:	079c      	lsls	r4, r3, #30
   241aa:	d110      	bne.n	241ce <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   241ac:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   241b0:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   241b4:	0894      	lsrs	r4, r2, #2
   241b6:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   241ba:	42b3      	cmp	r3, r6
   241bc:	d10d      	bne.n	241da <memset+0x38>
   241be:	f06f 0503 	mvn.w	r5, #3
   241c2:	fb05 2404 	mla	r4, r5, r4, r2
   241c6:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   241c8:	42a3      	cmp	r3, r4
   241ca:	d109      	bne.n	241e0 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   241cc:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   241ce:	2a00      	cmp	r2, #0
   241d0:	d0fc      	beq.n	241cc <memset+0x2a>
		*(d_byte++) = c_byte;
   241d2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   241d6:	3a01      	subs	r2, #1
   241d8:	e7e6      	b.n	241a8 <memset+0x6>
		*(d_word++) = c_word;
   241da:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   241de:	e7ec      	b.n	241ba <memset+0x18>
		*(d_byte++) = c_byte;
   241e0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   241e4:	e7f0      	b.n	241c8 <memset+0x26>

000241e6 <memchr>:
 *
 * @return pointer to start of found byte
 */

void *memchr(const void *s, int c, size_t n)
{
   241e6:	b510      	push	{r4, lr}
	if (n != 0) {
   241e8:	b15a      	cbz	r2, 24202 <memchr+0x1c>
   241ea:	4402      	add	r2, r0
		const unsigned char *p = s;

		do {
			if (*p++ == (unsigned char)c) {
   241ec:	b2c9      	uxtb	r1, r1
   241ee:	4603      	mov	r3, r0
   241f0:	f813 4b01 	ldrb.w	r4, [r3], #1
   241f4:	428c      	cmp	r4, r1
   241f6:	d003      	beq.n	24200 <memchr+0x1a>
				return ((void *)(p - 1));
			}

		} while (--n != 0);
   241f8:	429a      	cmp	r2, r3
   241fa:	4618      	mov	r0, r3
   241fc:	d1f7      	bne.n	241ee <memchr+0x8>
	}

	return NULL;
   241fe:	2000      	movs	r0, #0
}
   24200:	bd10      	pop	{r4, pc}
	return NULL;
   24202:	4610      	mov	r0, r2
   24204:	e7fc      	b.n	24200 <memchr+0x1a>

00024206 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   24206:	f7f9 bbd5 	b.w	1d9b4 <SystemInit>

0002420a <send_cmd_status>:
{
   2420a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2420e:	f04f 32ff 	mov.w	r2, #4294967295
{
   24212:	4680      	mov	r8, r0
   24214:	460f      	mov	r7, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   24216:	f04f 33ff 	mov.w	r3, #4294967295
   2421a:	2100      	movs	r1, #0
   2421c:	200f      	movs	r0, #15
   2421e:	f7e1 fb95 	bl	594c <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   24222:	2501      	movs	r5, #1
	return net_buf_simple_add(&buf->b, len);
   24224:	f100 0608 	add.w	r6, r0, #8
   24228:	4604      	mov	r4, r0
   2422a:	7505      	strb	r5, [r0, #20]
   2422c:	2102      	movs	r1, #2
   2422e:	4630      	mov	r0, r6
   24230:	f7f8 fc6a 	bl	1cb08 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   24234:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   24236:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   24238:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   2423a:	7041      	strb	r1, [r0, #1]
   2423c:	4630      	mov	r0, r6
   2423e:	f7f8 fc63 	bl	1cb08 <net_buf_simple_add>
	evt->ncmd = 1U;
   24242:	7045      	strb	r5, [r0, #1]
	evt->status = status;
   24244:	7007      	strb	r7, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   24246:	f8a0 8002 	strh.w	r8, [r0, #2]
		bt_recv_prio(buf);
   2424a:	4620      	mov	r0, r4
}
   2424c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   24250:	f7e2 bcb2 	b.w	6bb8 <bt_recv_prio>

00024254 <default_CSPRNG>:
{
   24254:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   24256:	f003 f85e 	bl	27316 <bt_rand>
}
   2425a:	fab0 f080 	clz	r0, r0
   2425e:	0940      	lsrs	r0, r0, #5
   24260:	bd08      	pop	{r3, pc}

00024262 <bt_settings_decode_key>:
{
   24262:	b570      	push	{r4, r5, r6, lr}
   24264:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   24266:	2100      	movs	r1, #0
{
   24268:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   2426a:	f7fe fc8f 	bl	22b8c <settings_name_next>
   2426e:	280d      	cmp	r0, #13
   24270:	d118      	bne.n	242a4 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   24272:	7b23      	ldrb	r3, [r4, #12]
   24274:	2b30      	cmp	r3, #48	; 0x30
   24276:	d111      	bne.n	2429c <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   24278:	2300      	movs	r3, #0
   2427a:	702b      	strb	r3, [r5, #0]
   2427c:	f104 060c 	add.w	r6, r4, #12
   24280:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   24282:	462a      	mov	r2, r5
   24284:	4620      	mov	r0, r4
   24286:	2301      	movs	r3, #1
   24288:	2102      	movs	r1, #2
   2428a:	3402      	adds	r4, #2
   2428c:	f7fd fdbb 	bl	21e06 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   24290:	42b4      	cmp	r4, r6
   24292:	f105 35ff 	add.w	r5, r5, #4294967295
   24296:	d1f4      	bne.n	24282 <bt_settings_decode_key+0x20>
	return 0;
   24298:	2000      	movs	r0, #0
}
   2429a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   2429c:	2b31      	cmp	r3, #49	; 0x31
   2429e:	d101      	bne.n	242a4 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   242a0:	2301      	movs	r3, #1
   242a2:	e7ea      	b.n	2427a <bt_settings_decode_key+0x18>
		return -EINVAL;
   242a4:	f06f 0015 	mvn.w	r0, #21
   242a8:	e7f7      	b.n	2429a <bt_settings_decode_key+0x38>

000242aa <xor16>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_HCI_CORE)
#define LOG_MODULE_NAME bt_aes_ccm
#include "common/log.h"

static inline void xor16(uint8_t *dst, const uint8_t *a, const uint8_t *b)
{
   242aa:	b510      	push	{r4, lr}
	dst[0] = a[0] ^ b[0];
   242ac:	780b      	ldrb	r3, [r1, #0]
   242ae:	7814      	ldrb	r4, [r2, #0]
   242b0:	4063      	eors	r3, r4
   242b2:	7003      	strb	r3, [r0, #0]
	dst[1] = a[1] ^ b[1];
   242b4:	7854      	ldrb	r4, [r2, #1]
   242b6:	784b      	ldrb	r3, [r1, #1]
   242b8:	4063      	eors	r3, r4
   242ba:	7043      	strb	r3, [r0, #1]
	dst[2] = a[2] ^ b[2];
   242bc:	7894      	ldrb	r4, [r2, #2]
   242be:	788b      	ldrb	r3, [r1, #2]
   242c0:	4063      	eors	r3, r4
   242c2:	7083      	strb	r3, [r0, #2]
	dst[3] = a[3] ^ b[3];
   242c4:	78d4      	ldrb	r4, [r2, #3]
   242c6:	78cb      	ldrb	r3, [r1, #3]
   242c8:	4063      	eors	r3, r4
   242ca:	70c3      	strb	r3, [r0, #3]
	dst[4] = a[4] ^ b[4];
   242cc:	7914      	ldrb	r4, [r2, #4]
   242ce:	790b      	ldrb	r3, [r1, #4]
   242d0:	4063      	eors	r3, r4
   242d2:	7103      	strb	r3, [r0, #4]
	dst[5] = a[5] ^ b[5];
   242d4:	7954      	ldrb	r4, [r2, #5]
   242d6:	794b      	ldrb	r3, [r1, #5]
   242d8:	4063      	eors	r3, r4
   242da:	7143      	strb	r3, [r0, #5]
	dst[6] = a[6] ^ b[6];
   242dc:	7994      	ldrb	r4, [r2, #6]
   242de:	798b      	ldrb	r3, [r1, #6]
   242e0:	4063      	eors	r3, r4
   242e2:	7183      	strb	r3, [r0, #6]
	dst[7] = a[7] ^ b[7];
   242e4:	79d4      	ldrb	r4, [r2, #7]
   242e6:	79cb      	ldrb	r3, [r1, #7]
   242e8:	4063      	eors	r3, r4
   242ea:	71c3      	strb	r3, [r0, #7]
	dst[8] = a[8] ^ b[8];
   242ec:	7a14      	ldrb	r4, [r2, #8]
   242ee:	7a0b      	ldrb	r3, [r1, #8]
   242f0:	4063      	eors	r3, r4
   242f2:	7203      	strb	r3, [r0, #8]
	dst[9] = a[9] ^ b[9];
   242f4:	7a54      	ldrb	r4, [r2, #9]
   242f6:	7a4b      	ldrb	r3, [r1, #9]
   242f8:	4063      	eors	r3, r4
   242fa:	7243      	strb	r3, [r0, #9]
	dst[10] = a[10] ^ b[10];
   242fc:	7a8b      	ldrb	r3, [r1, #10]
   242fe:	7a94      	ldrb	r4, [r2, #10]
   24300:	4063      	eors	r3, r4
   24302:	7283      	strb	r3, [r0, #10]
	dst[11] = a[11] ^ b[11];
   24304:	7ad4      	ldrb	r4, [r2, #11]
   24306:	7acb      	ldrb	r3, [r1, #11]
   24308:	4063      	eors	r3, r4
   2430a:	72c3      	strb	r3, [r0, #11]
	dst[12] = a[12] ^ b[12];
   2430c:	7b14      	ldrb	r4, [r2, #12]
   2430e:	7b0b      	ldrb	r3, [r1, #12]
   24310:	4063      	eors	r3, r4
   24312:	7303      	strb	r3, [r0, #12]
	dst[13] = a[13] ^ b[13];
   24314:	7b54      	ldrb	r4, [r2, #13]
   24316:	7b4b      	ldrb	r3, [r1, #13]
   24318:	4063      	eors	r3, r4
   2431a:	7343      	strb	r3, [r0, #13]
	dst[14] = a[14] ^ b[14];
   2431c:	7b94      	ldrb	r4, [r2, #14]
   2431e:	7b8b      	ldrb	r3, [r1, #14]
   24320:	4063      	eors	r3, r4
   24322:	7383      	strb	r3, [r0, #14]
	dst[15] = a[15] ^ b[15];
   24324:	7bcb      	ldrb	r3, [r1, #15]
   24326:	7bd2      	ldrb	r2, [r2, #15]
   24328:	4053      	eors	r3, r2
   2432a:	73c3      	strb	r3, [r0, #15]
}
   2432c:	bd10      	pop	{r4, pc}

0002432e <ccm_crypt>:
	return 0;
}

static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
		     const uint8_t *in_msg, uint8_t *out_msg, size_t msg_len)
{
   2432e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24332:	b089      	sub	sp, #36	; 0x24
   24334:	4698      	mov	r8, r3
   24336:	9d12      	ldr	r5, [sp, #72]	; 0x48
	blk_cnt = (msg_len + 15) / 16;
	if (!last_blk) {
		last_blk = 16U;
	}

	a_i[0] = 0x01;
   24338:	2301      	movs	r3, #1
	blk_cnt = (msg_len + 15) / 16;
   2433a:	f105 060f 	add.w	r6, r5, #15
{
   2433e:	4681      	mov	r9, r0
		last_blk = 16U;
   24340:	f015 050f 	ands.w	r5, r5, #15
{
   24344:	4617      	mov	r7, r2
	memcpy(&a_i[1], nonce, 13);
   24346:	eb0d 0003 	add.w	r0, sp, r3
   2434a:	f04f 020d 	mov.w	r2, #13
	blk_cnt = (msg_len + 15) / 16;
   2434e:	ea4f 1616 	mov.w	r6, r6, lsr #4
		last_blk = 16U;
   24352:	bf08      	it	eq
   24354:	2510      	moveq	r5, #16
	a_i[0] = 0x01;
   24356:	f88d 3000 	strb.w	r3, [sp]
	memcpy(&a_i[1], nonce, 13);
   2435a:	f7ff fef8 	bl	2414e <memcpy>

	for (j = 0; j < blk_cnt; j++) {
   2435e:	b2b6      	uxth	r6, r6
   24360:	2400      	movs	r4, #0
		if (err) {
			return err;
		}

		/* Encrypted = Payload[0-15] ^ C_1 */
		if (j < blk_cnt - 1) {
   24362:	f106 3aff 	add.w	sl, r6, #4294967295
	for (j = 0; j < blk_cnt; j++) {
   24366:	42b4      	cmp	r4, r6
   24368:	d303      	bcc.n	24372 <ccm_crypt+0x44>
				out_msg[(j * 16) + i] =
					in_msg[(j * 16) + i] ^ s_i[i];
			}
		}
	}
	return 0;
   2436a:	2000      	movs	r0, #0
}
   2436c:	b009      	add	sp, #36	; 0x24
   2436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dst[0] = val >> 8;
   24372:	f104 0b01 	add.w	fp, r4, #1
   24376:	f3cb 2307 	ubfx	r3, fp, #8, #8
		err = bt_encrypt_be(key, a_i, s_i);
   2437a:	aa04      	add	r2, sp, #16
   2437c:	4669      	mov	r1, sp
   2437e:	4648      	mov	r0, r9
   24380:	f88d 300e 	strb.w	r3, [sp, #14]
	dst[1] = val;
   24384:	f88d b00f 	strb.w	fp, [sp, #15]
   24388:	f002 ffc7 	bl	2731a <bt_encrypt_be>
		if (err) {
   2438c:	2800      	cmp	r0, #0
   2438e:	d1ed      	bne.n	2436c <ccm_crypt+0x3e>
		if (j < blk_cnt - 1) {
   24390:	45a2      	cmp	sl, r4
   24392:	ea4f 1404 	mov.w	r4, r4, lsl #4
   24396:	d907      	bls.n	243a8 <ccm_crypt+0x7a>
			xor16(&out_msg[j * 16], s_i, &in_msg[j * 16]);
   24398:	193a      	adds	r2, r7, r4
   2439a:	a904      	add	r1, sp, #16
   2439c:	eb08 0004 	add.w	r0, r8, r4
   243a0:	f7ff ff83 	bl	242aa <xor16>
	for (j = 0; j < blk_cnt; j++) {
   243a4:	465c      	mov	r4, fp
   243a6:	e7de      	b.n	24366 <ccm_crypt+0x38>
   243a8:	1939      	adds	r1, r7, r4
   243aa:	aa04      	add	r2, sp, #16
   243ac:	4444      	add	r4, r8
					in_msg[(j * 16) + i] ^ s_i[i];
   243ae:	f811 3b01 	ldrb.w	r3, [r1], #1
   243b2:	f812 cb01 	ldrb.w	ip, [r2], #1
			for (i = 0; i < last_blk; i++) {
   243b6:	3001      	adds	r0, #1
				out_msg[(j * 16) + i] =
   243b8:	ea83 030c 	eor.w	r3, r3, ip
			for (i = 0; i < last_blk; i++) {
   243bc:	4285      	cmp	r5, r0
				out_msg[(j * 16) + i] =
   243be:	f804 3b01 	strb.w	r3, [r4], #1
			for (i = 0; i < last_blk; i++) {
   243c2:	d8f4      	bhi.n	243ae <ccm_crypt+0x80>
   243c4:	e7ee      	b.n	243a4 <ccm_crypt+0x76>

000243c6 <ccm_auth>:
{
   243c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   243ca:	b091      	sub	sp, #68	; 0x44
		last_blk = 16U;
   243cc:	f013 070f 	ands.w	r7, r3, #15
{
   243d0:	4680      	mov	r8, r0
   243d2:	9201      	str	r2, [sp, #4]
   243d4:	461e      	mov	r6, r3
	memcpy(b + 1, nonce, 13);
   243d6:	f04f 020d 	mov.w	r2, #13
	b[0] = 0x01;
   243da:	f04f 0301 	mov.w	r3, #1
	memcpy(b + 1, nonce, 13);
   243de:	f10d 0a10 	add.w	sl, sp, #16
   243e2:	f10d 0011 	add.w	r0, sp, #17
	err = bt_encrypt_be(key, b, s0);
   243e6:	f10d 0930 	add.w	r9, sp, #48	; 0x30
		last_blk = 16U;
   243ea:	bf08      	it	eq
   243ec:	2710      	moveq	r7, #16
	b[0] = 0x01;
   243ee:	f88d 3010 	strb.w	r3, [sp, #16]
{
   243f2:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
	memcpy(b + 1, nonce, 13);
   243f4:	f7ff feab 	bl	2414e <memcpy>
	dst[0] = val >> 8;
   243f8:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, b, s0);
   243fa:	464a      	mov	r2, r9
   243fc:	4651      	mov	r1, sl
   243fe:	4640      	mov	r0, r8
   24400:	f8ad 301e 	strh.w	r3, [sp, #30]
   24404:	f002 ff89 	bl	2731a <bt_encrypt_be>
	if (err) {
   24408:	4605      	mov	r5, r0
   2440a:	2800      	cmp	r0, #0
   2440c:	d165      	bne.n	244da <ccm_auth+0x114>
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   2440e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   24410:	f88d 001e 	strb.w	r0, [sp, #30]
   24414:	3b02      	subs	r3, #2
   24416:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   2441a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   2441e:	bf14      	ite	ne
   24420:	2240      	movne	r2, #64	; 0x40
   24422:	2200      	moveq	r2, #0
   24424:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   24428:	4313      	orrs	r3, r2
	err = bt_encrypt_be(key, b, X0);
   2442a:	f10d 0b20 	add.w	fp, sp, #32
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   2442e:	f043 0301 	orr.w	r3, r3, #1
	err = bt_encrypt_be(key, b, X0);
   24432:	465a      	mov	r2, fp
   24434:	4651      	mov	r1, sl
   24436:	4640      	mov	r0, r8
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   24438:	f88d 3010 	strb.w	r3, [sp, #16]
	dst[1] = val;
   2443c:	f88d 601f 	strb.w	r6, [sp, #31]
	err = bt_encrypt_be(key, b, X0);
   24440:	f002 ff6b 	bl	2731a <bt_encrypt_be>
	if (err) {
   24444:	4603      	mov	r3, r0
   24446:	bbb8      	cbnz	r0, 244b8 <ccm_auth+0xf2>
	if (aad_len) {
   24448:	b3b4      	cbz	r4, 244b8 <ccm_auth+0xf2>
			b[i] = X0[i] ^ b[i];
   2444a:	f89d 2020 	ldrb.w	r2, [sp, #32]
   2444e:	f88d 2010 	strb.w	r2, [sp, #16]
   24452:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   24456:	4062      	eors	r2, r4
		aad_len += sizeof(uint16_t);
   24458:	3402      	adds	r4, #2
			b[i] = X0[i] ^ b[i];
   2445a:	f88d 2011 	strb.w	r2, [sp, #17]
		aad_len += sizeof(uint16_t);
   2445e:	b2e4      	uxtb	r4, r4
   24460:	2002      	movs	r0, #2
   24462:	9a1a      	ldr	r2, [sp, #104]	; 0x68
		while (aad_len > 16) {
   24464:	2c10      	cmp	r4, #16
   24466:	441a      	add	r2, r3
   24468:	d80b      	bhi.n	24482 <ccm_auth+0xbc>
   2446a:	4613      	mov	r3, r2
   2446c:	aa08      	add	r2, sp, #32
		for (; i < aad_len; i++, j++) {
   2446e:	42a0      	cmp	r0, r4
   24470:	4621      	mov	r1, r4
   24472:	db36      	blt.n	244e2 <ccm_auth+0x11c>
		for (i = aad_len; i < 16; i++) {
   24474:	290f      	cmp	r1, #15
   24476:	dd40      	ble.n	244fa <ccm_auth+0x134>
		err = bt_encrypt_be(key, b, X0);
   24478:	a904      	add	r1, sp, #16
   2447a:	4640      	mov	r0, r8
   2447c:	f002 ff4d 	bl	2731a <bt_encrypt_be>
		if (err) {
   24480:	e01a      	b.n	244b8 <ccm_auth+0xf2>
		while (aad_len > 16) {
   24482:	4601      	mov	r1, r0
				b[i] = X0[i] ^ aad[j];
   24484:	f811 e00b 	ldrb.w	lr, [r1, fp]
   24488:	f812 cb01 	ldrb.w	ip, [r2], #1
   2448c:	ea8c 0c0e 	eor.w	ip, ip, lr
   24490:	f801 c00a 	strb.w	ip, [r1, sl]
				i++, j++;
   24494:	3101      	adds	r1, #1
			} while (i < 16);
   24496:	2910      	cmp	r1, #16
   24498:	d1f4      	bne.n	24484 <ccm_auth+0xbe>
   2449a:	f1c0 0010 	rsb	r0, r0, #16
   2449e:	4403      	add	r3, r0
			err = bt_encrypt_be(key, b, X0);
   244a0:	465a      	mov	r2, fp
   244a2:	4651      	mov	r1, sl
   244a4:	4640      	mov	r0, r8
   244a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
   244aa:	f002 ff36 	bl	2731a <bt_encrypt_be>
   244ae:	3c10      	subs	r4, #16
   244b0:	b2e4      	uxtb	r4, r4
			if (err) {
   244b2:	9b02      	ldr	r3, [sp, #8]
   244b4:	2800      	cmp	r0, #0
   244b6:	d0d4      	beq.n	24462 <ccm_auth+0x9c>
	blk_cnt = (msg_len + 15) / 16;
   244b8:	f106 040f 	add.w	r4, r6, #15
			memcpy(&b[i], &Xn[i], 16 - i);
   244bc:	ab08      	add	r3, sp, #32
   244be:	f8dd a004 	ldr.w	sl, [sp, #4]
	for (j = 0; j < blk_cnt; j++) {
   244c2:	f3c4 140f 	ubfx	r4, r4, #4, #16
   244c6:	2600      	movs	r6, #0
			memcpy(&b[i], &Xn[i], 16 - i);
   244c8:	eb03 0b07 	add.w	fp, r3, r7
	for (j = 0; j < blk_cnt; j++) {
   244cc:	42b4      	cmp	r4, r6
   244ce:	dc19      	bgt.n	24504 <ccm_auth+0x13e>
	for (i = 0; i < mic_size; i++) {
   244d0:	2300      	movs	r3, #0
		mic[i] = s0[i] ^ Xn[i];
   244d2:	a908      	add	r1, sp, #32
	for (i = 0; i < mic_size; i++) {
   244d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   244d6:	4293      	cmp	r3, r2
   244d8:	d13f      	bne.n	2455a <ccm_auth+0x194>
}
   244da:	4628      	mov	r0, r5
   244dc:	b011      	add	sp, #68	; 0x44
   244de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			b[i] = X0[i] ^ aad[j];
   244e2:	f812 c000 	ldrb.w	ip, [r2, r0]
   244e6:	f813 1b01 	ldrb.w	r1, [r3], #1
   244ea:	ea81 010c 	eor.w	r1, r1, ip
   244ee:	f10d 0c10 	add.w	ip, sp, #16
   244f2:	f80c 1000 	strb.w	r1, [ip, r0]
		for (; i < aad_len; i++, j++) {
   244f6:	3001      	adds	r0, #1
   244f8:	e7b9      	b.n	2446e <ccm_auth+0xa8>
			b[i] = X0[i];
   244fa:	a804      	add	r0, sp, #16
   244fc:	5c53      	ldrb	r3, [r2, r1]
   244fe:	5443      	strb	r3, [r0, r1]
		for (i = aad_len; i < 16; i++) {
   24500:	3101      	adds	r1, #1
   24502:	e7b7      	b.n	24474 <ccm_auth+0xae>
		if (j + 1 == blk_cnt) {
   24504:	3601      	adds	r6, #1
   24506:	42a6      	cmp	r6, r4
   24508:	d121      	bne.n	2454e <ccm_auth+0x188>
   2450a:	f10d 0c20 	add.w	ip, sp, #32
   2450e:	a904      	add	r1, sp, #16
   24510:	4650      	mov	r0, sl
			for (i = 0; i < last_blk; i++) {
   24512:	2300      	movs	r3, #0
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   24514:	f81c 2b01 	ldrb.w	r2, [ip], #1
   24518:	f810 eb01 	ldrb.w	lr, [r0], #1
			for (i = 0; i < last_blk; i++) {
   2451c:	3301      	adds	r3, #1
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   2451e:	ea82 020e 	eor.w	r2, r2, lr
			for (i = 0; i < last_blk; i++) {
   24522:	429f      	cmp	r7, r3
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   24524:	f801 2b01 	strb.w	r2, [r1], #1
			for (i = 0; i < last_blk; i++) {
   24528:	dcf4      	bgt.n	24514 <ccm_auth+0x14e>
			memcpy(&b[i], &Xn[i], 16 - i);
   2452a:	ab04      	add	r3, sp, #16
   2452c:	f1c7 0210 	rsb	r2, r7, #16
   24530:	4659      	mov	r1, fp
   24532:	19d8      	adds	r0, r3, r7
   24534:	f7ff fe0b 	bl	2414e <memcpy>
		err = bt_encrypt_be(key, b, Xn);
   24538:	aa08      	add	r2, sp, #32
   2453a:	a904      	add	r1, sp, #16
   2453c:	4640      	mov	r0, r8
   2453e:	f002 feec 	bl	2731a <bt_encrypt_be>
		if (err) {
   24542:	f10a 0a10 	add.w	sl, sl, #16
   24546:	2800      	cmp	r0, #0
   24548:	d0c0      	beq.n	244cc <ccm_auth+0x106>
		err = bt_encrypt_be(key, b, Xn);
   2454a:	4605      	mov	r5, r0
   2454c:	e7c5      	b.n	244da <ccm_auth+0x114>
			xor16(b, Xn, &cleartext_msg[j * 16]);
   2454e:	4652      	mov	r2, sl
   24550:	a908      	add	r1, sp, #32
   24552:	a804      	add	r0, sp, #16
   24554:	f7ff fea9 	bl	242aa <xor16>
   24558:	e7ee      	b.n	24538 <ccm_auth+0x172>
		mic[i] = s0[i] ^ Xn[i];
   2455a:	5c58      	ldrb	r0, [r3, r1]
   2455c:	f819 2003 	ldrb.w	r2, [r9, r3]
   24560:	4042      	eors	r2, r0
   24562:	981c      	ldr	r0, [sp, #112]	; 0x70
   24564:	54c2      	strb	r2, [r0, r3]
	for (i = 0; i < mic_size; i++) {
   24566:	3301      	adds	r3, #1
   24568:	e7b4      	b.n	244d4 <ccm_auth+0x10e>

0002456a <bt_ccm_decrypt>:

int bt_ccm_decrypt(const uint8_t key[16], uint8_t nonce[13], const uint8_t *enc_msg,
		   size_t msg_len, const uint8_t *aad, size_t aad_len,
		   uint8_t *out_msg, size_t mic_size)
{
   2456a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2456e:	b088      	sub	sp, #32
   24570:	4681      	mov	r9, r0
   24572:	9f11      	ldr	r7, [sp, #68]	; 0x44
   24574:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	uint8_t mic[16];

	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   24576:	f5b7 4f7f 	cmp.w	r7, #65280	; 0xff00
{
   2457a:	468a      	mov	sl, r1
   2457c:	4690      	mov	r8, r2
   2457e:	461c      	mov	r4, r3
	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   24580:	d21e      	bcs.n	245c0 <bt_ccm_decrypt+0x56>
   24582:	2d10      	cmp	r5, #16
   24584:	d81c      	bhi.n	245c0 <bt_ccm_decrypt+0x56>
		return -EINVAL;
	}

	ccm_crypt(key, nonce, enc_msg, out_msg, msg_len);
   24586:	9300      	str	r3, [sp, #0]
   24588:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2458a:	f7ff fed0 	bl	2432e <ccm_crypt>

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   2458e:	ae04      	add	r6, sp, #16
   24590:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24592:	9300      	str	r3, [sp, #0]
   24594:	9a12      	ldr	r2, [sp, #72]	; 0x48
   24596:	9503      	str	r5, [sp, #12]
   24598:	4623      	mov	r3, r4
   2459a:	4651      	mov	r1, sl
   2459c:	e9cd 7601 	strd	r7, r6, [sp, #4]
   245a0:	4648      	mov	r0, r9
   245a2:	f7ff ff10 	bl	243c6 <ccm_auth>

	if (memcmp(mic, enc_msg + msg_len, mic_size)) {
   245a6:	462a      	mov	r2, r5
   245a8:	eb08 0104 	add.w	r1, r8, r4
   245ac:	4630      	mov	r0, r6
   245ae:	f7ff fda7 	bl	24100 <memcmp>
   245b2:	2800      	cmp	r0, #0
		return -EBADMSG;
   245b4:	bf18      	it	ne
   245b6:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}

	return 0;
}
   245ba:	b008      	add	sp, #32
   245bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   245c0:	f06f 0015 	mvn.w	r0, #21
   245c4:	e7f9      	b.n	245ba <bt_ccm_decrypt+0x50>

000245c6 <bt_ccm_encrypt>:

int bt_ccm_encrypt(const uint8_t key[16], uint8_t nonce[13], const uint8_t *msg,
		   size_t msg_len, const uint8_t *aad, size_t aad_len,
		   uint8_t *out_msg, size_t mic_size)
{
   245c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   245ca:	b085      	sub	sp, #20
   245cc:	4691      	mov	r9, r2
   245ce:	e9dd 240d 	ldrd	r2, r4, [sp, #52]	; 0x34
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", msg_len, bt_hex(msg, msg_len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00 || mic_size > 16) {
   245d2:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
{
   245d6:	4607      	mov	r7, r0
   245d8:	4688      	mov	r8, r1
   245da:	461d      	mov	r5, r3
   245dc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	uint8_t *mic = out_msg + msg_len;
   245de:	eb04 0c03 	add.w	ip, r4, r3
	if (aad_len >= 0xff00 || mic_size > 16) {
   245e2:	d214      	bcs.n	2460e <bt_ccm_encrypt+0x48>
   245e4:	2e10      	cmp	r6, #16
   245e6:	d812      	bhi.n	2460e <bt_ccm_encrypt+0x48>
		return -EINVAL;
	}

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   245e8:	9201      	str	r2, [sp, #4]
   245ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   245ec:	9200      	str	r2, [sp, #0]
   245ee:	e9cd c602 	strd	ip, r6, [sp, #8]
   245f2:	4622      	mov	r2, r4
   245f4:	f7ff fee7 	bl	243c6 <ccm_auth>

	ccm_crypt(key, nonce, msg, out_msg, msg_len);
   245f8:	9500      	str	r5, [sp, #0]
   245fa:	4623      	mov	r3, r4
   245fc:	464a      	mov	r2, r9
   245fe:	4641      	mov	r1, r8
   24600:	4638      	mov	r0, r7
   24602:	f7ff fe94 	bl	2432e <ccm_crypt>

	return 0;
   24606:	2000      	movs	r0, #0
}
   24608:	b005      	add	sp, #20
   2460a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   2460e:	f06f 0015 	mvn.w	r0, #21
   24612:	e7f9      	b.n	24608 <bt_ccm_encrypt+0x42>

00024614 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24614:	b510      	push	{r4, lr}
   24616:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24618:	7801      	ldrb	r1, [r0, #0]
   2461a:	7822      	ldrb	r2, [r4, #0]
   2461c:	428a      	cmp	r2, r1
{
   2461e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24620:	d00e      	beq.n	24640 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   24622:	4669      	mov	r1, sp
   24624:	f7e1 f904 	bl	5830 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24628:	a905      	add	r1, sp, #20
   2462a:	4620      	mov	r0, r4
   2462c:	f7e1 f900 	bl	5830 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24630:	2210      	movs	r2, #16
   24632:	f10d 0115 	add.w	r1, sp, #21
   24636:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2463a:	f7ff fd61 	bl	24100 <memcmp>
   2463e:	e006      	b.n	2464e <bt_uuid_cmp+0x3a>
	switch (u1->type) {
   24640:	2a01      	cmp	r2, #1
   24642:	d00a      	beq.n	2465a <bt_uuid_cmp+0x46>
   24644:	b12a      	cbz	r2, 24652 <bt_uuid_cmp+0x3e>
   24646:	2a02      	cmp	r2, #2
   24648:	d00a      	beq.n	24660 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
   2464a:	f06f 0015 	mvn.w	r0, #21
}
   2464e:	b00a      	add	sp, #40	; 0x28
   24650:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   24652:	8840      	ldrh	r0, [r0, #2]
   24654:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24656:	1ac0      	subs	r0, r0, r3
   24658:	e7f9      	b.n	2464e <bt_uuid_cmp+0x3a>
   2465a:	6840      	ldr	r0, [r0, #4]
   2465c:	6863      	ldr	r3, [r4, #4]
   2465e:	e7fa      	b.n	24656 <bt_uuid_cmp+0x42>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24660:	2210      	movs	r2, #16
   24662:	1c61      	adds	r1, r4, #1
   24664:	3001      	adds	r0, #1
   24666:	e7e8      	b.n	2463a <bt_uuid_cmp+0x26>

00024668 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   24668:	2a04      	cmp	r2, #4
{
   2466a:	b538      	push	{r3, r4, r5, lr}
   2466c:	460c      	mov	r4, r1
	switch (data_len) {
   2466e:	d00d      	beq.n	2468c <bt_uuid_create+0x24>
   24670:	2a10      	cmp	r2, #16
   24672:	d019      	beq.n	246a8 <bt_uuid_create+0x40>
   24674:	2a02      	cmp	r2, #2
   24676:	f04f 0300 	mov.w	r3, #0
   2467a:	d11b      	bne.n	246b4 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   2467c:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2467e:	784a      	ldrb	r2, [r1, #1]
   24680:	780b      	ldrb	r3, [r1, #0]
   24682:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   24686:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   24688:	2001      	movs	r0, #1
}
   2468a:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   2468c:	2301      	movs	r3, #1
   2468e:	7003      	strb	r3, [r0, #0]
   24690:	78a2      	ldrb	r2, [r4, #2]
   24692:	78c9      	ldrb	r1, [r1, #3]
   24694:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24696:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   2469a:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2469c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   246a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   246a4:	6042      	str	r2, [r0, #4]
		break;
   246a6:	e7ef      	b.n	24688 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   246a8:	2302      	movs	r3, #2
   246aa:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   246ae:	f7ff fd4e 	bl	2414e <memcpy>
		break;
   246b2:	e7e9      	b.n	24688 <bt_uuid_create+0x20>
		return false;
   246b4:	4618      	mov	r0, r3
   246b6:	e7e8      	b.n	2468a <bt_uuid_create+0x22>

000246b8 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   246b8:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   246ba:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   246bc:	2106      	movs	r1, #6
{
   246be:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   246c0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   246c4:	f002 fe27 	bl	27316 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   246c8:	b918      	cbnz	r0, 246d2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   246ca:	79a3      	ldrb	r3, [r4, #6]
   246cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   246d0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   246d2:	bd10      	pop	{r4, pc}

000246d4 <get_adv_channel_map>:
		channel_map &= ~0x01;
   246d4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   246d8:	bf0c      	ite	eq
   246da:	2307      	moveq	r3, #7
   246dc:	2306      	movne	r3, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   246de:	03c1      	lsls	r1, r0, #15
		channel_map &= ~0x02;
   246e0:	bf48      	it	mi
   246e2:	f003 0305 	andmi.w	r3, r3, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   246e6:	0382      	lsls	r2, r0, #14
		channel_map &= ~0x04;
   246e8:	bf48      	it	mi
   246ea:	f003 03fb 	andmi.w	r3, r3, #251	; 0xfb
}
   246ee:	4618      	mov	r0, r3
   246f0:	4770      	bx	lr

000246f2 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   246f2:	2207      	movs	r2, #7
   246f4:	f7ff bd2b 	b.w	2414e <memcpy>

000246f8 <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   246f8:	f3bf 8f5b 	dmb	ish
   246fc:	e850 3f00 	ldrex	r3, [r0]
   24700:	ea43 0201 	orr.w	r2, r3, r1
   24704:	e840 2c00 	strex	ip, r2, [r0]
   24708:	f1bc 0f00 	cmp.w	ip, #0
   2470c:	d1f6      	bne.n	246fc <atomic_or+0x4>
   2470e:	f3bf 8f5b 	dmb	ish
}
   24712:	4618      	mov	r0, r3
   24714:	4770      	bx	lr

00024716 <atomic_test_and_set_bit>:
{
   24716:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   24718:	2401      	movs	r4, #1
   2471a:	408c      	lsls	r4, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2471c:	4621      	mov	r1, r4
   2471e:	f7ff ffeb 	bl	246f8 <atomic_or>
	return (old & mask) != 0;
   24722:	4204      	tst	r4, r0
}
   24724:	bf14      	ite	ne
   24726:	2001      	movne	r0, #1
   24728:	2000      	moveq	r0, #0
   2472a:	bd10      	pop	{r4, pc}

0002472c <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2472c:	f3bf 8f5b 	dmb	ish
   24730:	e850 3f00 	ldrex	r3, [r0]
   24734:	ea03 0201 	and.w	r2, r3, r1
   24738:	e840 2c00 	strex	ip, r2, [r0]
   2473c:	f1bc 0f00 	cmp.w	ip, #0
   24740:	d1f6      	bne.n	24730 <atomic_and+0x4>
   24742:	f3bf 8f5b 	dmb	ish
}
   24746:	4618      	mov	r0, r3
   24748:	4770      	bx	lr

0002474a <atomic_set_bit_to>:
{
   2474a:	460b      	mov	r3, r1
   2474c:	b410      	push	{r4}
   2474e:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   24750:	f001 041f 	and.w	r4, r1, #31
   24754:	2101      	movs	r1, #1
   24756:	40a1      	lsls	r1, r4
	if (val) {
   24758:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2475c:	b112      	cbz	r2, 24764 <atomic_set_bit_to+0x1a>
}
   2475e:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   24760:	f7ff bfca 	b.w	246f8 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24764:	43c9      	mvns	r1, r1
}
   24766:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24768:	f7ff bfe0 	b.w	2472c <atomic_and>

0002476c <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   2476c:	2207      	movs	r2, #7
   2476e:	f7ff bcc7 	b.w	24100 <memcmp>

00024772 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24772:	f3bf 8f5b 	dmb	ish
   24776:	6800      	ldr	r0, [r0, #0]
   24778:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2477c:	4108      	asrs	r0, r1
}
   2477e:	f000 0001 	and.w	r0, r0, #1
   24782:	4770      	bx	lr

00024784 <le_adv_set_private_addr.isra.27>:
static int le_adv_set_private_addr(struct bt_le_ext_adv *adv)
   24784:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   24786:	2106      	movs	r1, #6
   24788:	4668      	mov	r0, sp
   2478a:	f002 fdc4 	bl	27316 <bt_rand>
	if (err) {
   2478e:	b940      	cbnz	r0, 247a2 <le_adv_set_private_addr.isra.27+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   24790:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   24794:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   24796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2479a:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   2479e:	f7e2 f833 	bl	6808 <set_random_address>
}
   247a2:	b003      	add	sp, #12
   247a4:	f85d fb04 	ldr.w	pc, [sp], #4

000247a8 <bt_hci_disconnect>:
{
   247a8:	b570      	push	{r4, r5, r6, lr}
   247aa:	4606      	mov	r6, r0
   247ac:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   247ae:	f240 4006 	movw	r0, #1030	; 0x406
   247b2:	2103      	movs	r1, #3
   247b4:	f7e1 fd7e 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
   247b8:	4604      	mov	r4, r0
   247ba:	b168      	cbz	r0, 247d8 <bt_hci_disconnect+0x30>
   247bc:	2103      	movs	r1, #3
   247be:	3008      	adds	r0, #8
   247c0:	f7f8 f9a2 	bl	1cb08 <net_buf_simple_add>
	disconn->reason = reason;
   247c4:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   247c6:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   247c8:	4621      	mov	r1, r4
   247ca:	2200      	movs	r2, #0
   247cc:	f240 4006 	movw	r0, #1030	; 0x406
}
   247d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   247d4:	f7e1 beaa 	b.w	652c <bt_hci_cmd_send_sync>
}
   247d8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   247dc:	bd70      	pop	{r4, r5, r6, pc}

000247de <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   247de:	8802      	ldrh	r2, [r0, #0]
   247e0:	8843      	ldrh	r3, [r0, #2]
   247e2:	429a      	cmp	r2, r3
{
   247e4:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   247e6:	d818      	bhi.n	2481a <bt_le_conn_params_valid+0x3c>
   247e8:	2a05      	cmp	r2, #5
   247ea:	d916      	bls.n	2481a <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   247ec:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   247f0:	d813      	bhi.n	2481a <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   247f2:	8884      	ldrh	r4, [r0, #4]
   247f4:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   247f8:	d20f      	bcs.n	2481a <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   247fa:	88c1      	ldrh	r1, [r0, #6]
   247fc:	f1a1 020a 	sub.w	r2, r1, #10
   24800:	b292      	uxth	r2, r2
   24802:	f640 4076 	movw	r0, #3190	; 0xc76
   24806:	4282      	cmp	r2, r0
   24808:	d807      	bhi.n	2481a <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   2480a:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2480e:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   24812:	bf34      	ite	cc
   24814:	2001      	movcc	r0, #1
   24816:	2000      	movcs	r0, #0
}
   24818:	bd10      	pop	{r4, pc}
		return false;
   2481a:	2000      	movs	r0, #0
   2481c:	e7fc      	b.n	24818 <bt_le_conn_params_valid+0x3a>

0002481e <bt_send>:
		return bt_hci_ecc_send(buf);
   2481e:	f7e0 be63 	b.w	54e8 <bt_hci_ecc_send>

00024822 <bt_addr_le_is_bonded>:
}
   24822:	2000      	movs	r0, #0
   24824:	4770      	bx	lr

00024826 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   24826:	6880      	ldr	r0, [r0, #8]
   24828:	f7e2 befc 	b.w	7624 <enh_conn_complete>

0002482c <le_legacy_conn_complete>:
{
   2482c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2482e:	6881      	ldr	r1, [r0, #8]
{
   24830:	b08c      	sub	sp, #48	; 0x30
	enh.status         = evt->status;
   24832:	780b      	ldrb	r3, [r1, #0]
   24834:	f88d 3010 	strb.w	r3, [sp, #16]
	enh.handle         = evt->handle;
   24838:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2483c:	f8ad 3011 	strh.w	r3, [sp, #17]
	enh.role           = evt->role;
   24840:	78cb      	ldrb	r3, [r1, #3]
   24842:	f88d 3013 	strb.w	r3, [sp, #19]
	enh.interval       = evt->interval;
   24846:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2484a:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
	enh.latency        = evt->latency;
   2484e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   24852:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.supv_timeout   = evt->supv_timeout;
   24856:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   2485a:	f8ad 302b 	strh.w	r3, [sp, #43]	; 0x2b
	enh.clock_accuracy = evt->clock_accuracy;
   2485e:	7c4b      	ldrb	r3, [r1, #17]
   24860:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   24864:	a805      	add	r0, sp, #20
   24866:	3104      	adds	r1, #4
   24868:	f7ff ff43 	bl	246f2 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2486c:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   2486e:	4669      	mov	r1, sp
   24870:	2206      	movs	r2, #6
   24872:	f10d 001b 	add.w	r0, sp, #27
   24876:	9400      	str	r4, [sp, #0]
   24878:	f8ad 4004 	strh.w	r4, [sp, #4]
   2487c:	f7ff fc67 	bl	2414e <memcpy>
   24880:	2206      	movs	r2, #6
   24882:	a902      	add	r1, sp, #8
   24884:	f10d 0021 	add.w	r0, sp, #33	; 0x21
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   24888:	9402      	str	r4, [sp, #8]
   2488a:	f8ad 400c 	strh.w	r4, [sp, #12]
   2488e:	f7ff fc5e 	bl	2414e <memcpy>
	enh_conn_complete(&enh);
   24892:	a804      	add	r0, sp, #16
   24894:	f7e2 fec6 	bl	7624 <enh_conn_complete>
}
   24898:	b00c      	add	sp, #48	; 0x30
   2489a:	bd10      	pop	{r4, pc}

0002489c <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   2489c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2489e:	f04f 32ff 	mov.w	r2, #4294967295
{
   248a2:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   248a4:	f04f 33ff 	mov.w	r3, #4294967295
   248a8:	2100      	movs	r1, #0
{
   248aa:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   248ac:	f7e1 f84e 	bl	594c <bt_buf_get_evt>
   248b0:	2102      	movs	r1, #2
   248b2:	4604      	mov	r4, r0
   248b4:	3008      	adds	r0, #8
   248b6:	f7f8 f927 	bl	1cb08 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   248ba:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   248bc:	7045      	strb	r5, [r0, #1]

	return buf;
}
   248be:	4620      	mov	r0, r4
   248c0:	bd70      	pop	{r4, r5, r6, pc}

000248c2 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   248c2:	3103      	adds	r1, #3
{
   248c4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   248c6:	b2c9      	uxtb	r1, r1
{
   248c8:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   248ca:	200e      	movs	r0, #14
   248cc:	f7ff ffe6 	bl	2489c <bt_hci_evt_create>
   248d0:	2103      	movs	r1, #3
   248d2:	4604      	mov	r4, r0
   248d4:	3008      	adds	r0, #8
   248d6:	f7f8 f917 	bl	1cb08 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   248da:	2301      	movs	r3, #1
   248dc:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   248de:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   248e2:	4620      	mov	r0, r4
   248e4:	bd38      	pop	{r3, r4, r5, pc}

000248e6 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   248e6:	b570      	push	{r4, r5, r6, lr}
   248e8:	4605      	mov	r5, r0
   248ea:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   248ec:	200f      	movs	r0, #15
   248ee:	2104      	movs	r1, #4
   248f0:	f7ff ffd4 	bl	2489c <bt_hci_evt_create>
   248f4:	2104      	movs	r1, #4
   248f6:	4604      	mov	r4, r0
   248f8:	3008      	adds	r0, #8
   248fa:	f7f8 f905 	bl	1cb08 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   248fe:	2301      	movs	r3, #1
	cs->status = status;
   24900:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   24902:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   24904:	8045      	strh	r5, [r0, #2]

	return buf;
}
   24906:	4620      	mov	r0, r4
   24908:	bd70      	pop	{r4, r5, r6, pc}

0002490a <bt_conn_new.part.10>:
struct bt_conn *bt_conn_new(struct bt_conn *conns, size_t size)
   2490a:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   2490c:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2490e:	2501      	movs	r5, #1
   24910:	428b      	cmp	r3, r1
   24912:	d102      	bne.n	2491a <bt_conn_new.part.10+0x10>
		return NULL;
   24914:	2400      	movs	r4, #0
}
   24916:	4620      	mov	r0, r4
   24918:	bd38      	pop	{r3, r4, r5, pc}
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2491a:	4604      	mov	r4, r0
   2491c:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   24920:	f3bf 8f5b 	dmb	ish
   24924:	e852 0f00 	ldrex	r0, [r2]
   24928:	2800      	cmp	r0, #0
   2492a:	d104      	bne.n	24936 <bt_conn_new.part.10+0x2c>
   2492c:	e842 5c00 	strex	ip, r5, [r2]
   24930:	f1bc 0f00 	cmp.w	ip, #0
   24934:	d1f6      	bne.n	24924 <bt_conn_new.part.10+0x1a>
   24936:	f3bf 8f5b 	dmb	ish
   2493a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   2493e:	d001      	beq.n	24944 <bt_conn_new.part.10+0x3a>
	for (i = 0; i < size; i++) {
   24940:	3301      	adds	r3, #1
   24942:	e7e5      	b.n	24910 <bt_conn_new.part.10+0x6>
	if (!conn) {
   24944:	2c00      	cmp	r4, #0
   24946:	d0e6      	beq.n	24916 <bt_conn_new.part.10+0xc>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   24948:	22b8      	movs	r2, #184	; 0xb8
   2494a:	2100      	movs	r1, #0
   2494c:	4620      	mov	r0, r4
   2494e:	f7ff fc28 	bl	241a2 <memset>
	return conn;
   24952:	e7e0      	b.n	24916 <bt_conn_new.part.10+0xc>

00024954 <tx_notify>:
{
   24954:	b570      	push	{r4, r5, r6, lr}
   24956:	4604      	mov	r4, r0
	__asm__ volatile(
   24958:	f04f 0220 	mov.w	r2, #32
   2495c:	f3ef 8311 	mrs	r3, BASEPRI
   24960:	f382 8811 	msr	BASEPRI, r2
   24964:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   24968:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2496a:	b920      	cbnz	r0, 24976 <tx_notify+0x22>
	__asm__ volatile(
   2496c:	f383 8811 	msr	BASEPRI, r3
   24970:	f3bf 8f6f 	isb	sy
}
   24974:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24976:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24978:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2497a:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2497c:	4288      	cmp	r0, r1
	list->tail = node;
   2497e:	bf08      	it	eq
   24980:	6262      	streq	r2, [r4, #36]	; 0x24
   24982:	f383 8811 	msr	BASEPRI, r3
   24986:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2498a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2498e:	f7e3 f859 	bl	7a44 <tx_free>
		cb(conn, user_data);
   24992:	4631      	mov	r1, r6
   24994:	4620      	mov	r0, r4
   24996:	47a8      	blx	r5
	while (1) {
   24998:	e7de      	b.n	24958 <tx_notify+0x4>

0002499a <tx_complete_work>:
	tx_notify(conn);
   2499a:	3828      	subs	r0, #40	; 0x28
   2499c:	f7ff bfda 	b.w	24954 <tx_notify>

000249a0 <bt_conn_ref.part.12>:
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
   249a0:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   249a2:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   249a6:	f3bf 8f5b 	dmb	ish
   249aa:	6813      	ldr	r3, [r2, #0]
   249ac:	f3bf 8f5b 	dmb	ish
		if (!old) {
   249b0:	b17b      	cbz	r3, 249d2 <bt_conn_ref.part.12+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   249b2:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   249b6:	1c59      	adds	r1, r3, #1
   249b8:	e852 4f00 	ldrex	r4, [r2]
   249bc:	429c      	cmp	r4, r3
   249be:	d104      	bne.n	249ca <bt_conn_ref.part.12+0x2a>
   249c0:	e842 1c00 	strex	ip, r1, [r2]
   249c4:	f1bc 0f00 	cmp.w	ip, #0
   249c8:	d1f6      	bne.n	249b8 <bt_conn_ref.part.12+0x18>
   249ca:	f3bf 8f5b 	dmb	ish
   249ce:	d1ea      	bne.n	249a6 <bt_conn_ref.part.12+0x6>
}
   249d0:	bd10      	pop	{r4, pc}
			return NULL;
   249d2:	4618      	mov	r0, r3
   249d4:	e7fc      	b.n	249d0 <bt_conn_ref.part.12+0x30>

000249d6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   249d6:	f3bf 8f5b 	dmb	ish
   249da:	6800      	ldr	r0, [r0, #0]
   249dc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   249e0:	4108      	asrs	r0, r1
}
   249e2:	f000 0001 	and.w	r0, r0, #1
   249e6:	4770      	bx	lr

000249e8 <bt_conn_get_security>:
}
   249e8:	2001      	movs	r0, #1
   249ea:	4770      	bx	lr

000249ec <bt_conn_reset_rx_state>:
{
   249ec:	b510      	push	{r4, lr}
   249ee:	4604      	mov	r4, r0
	if (!conn->rx) {
   249f0:	6900      	ldr	r0, [r0, #16]
   249f2:	b118      	cbz	r0, 249fc <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   249f4:	f7f7 ff38 	bl	1c868 <net_buf_unref>
	conn->rx = NULL;
   249f8:	2300      	movs	r3, #0
   249fa:	6123      	str	r3, [r4, #16]
}
   249fc:	bd10      	pop	{r4, pc}

000249fe <bt_conn_is_peer_addr_le>:
{
   249fe:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   24a00:	7a03      	ldrb	r3, [r0, #8]
   24a02:	428b      	cmp	r3, r1
{
   24a04:	4604      	mov	r4, r0
   24a06:	4615      	mov	r5, r2
	if (id != conn->id) {
   24a08:	d115      	bne.n	24a36 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   24a0a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   24a0e:	2207      	movs	r2, #7
   24a10:	4628      	mov	r0, r5
   24a12:	f7ff fb75 	bl	24100 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   24a16:	b180      	cbz	r0, 24a3a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   24a18:	78e3      	ldrb	r3, [r4, #3]
   24a1a:	2207      	movs	r2, #7
   24a1c:	b943      	cbnz	r3, 24a30 <bt_conn_is_peer_addr_le+0x32>
   24a1e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   24a22:	4628      	mov	r0, r5
   24a24:	f7ff fb6c 	bl	24100 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   24a28:	fab0 f080 	clz	r0, r0
   24a2c:	0940      	lsrs	r0, r0, #5
}
   24a2e:	bd38      	pop	{r3, r4, r5, pc}
   24a30:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   24a34:	e7f5      	b.n	24a22 <bt_conn_is_peer_addr_le+0x24>
		return false;
   24a36:	2000      	movs	r0, #0
   24a38:	e7f9      	b.n	24a2e <bt_conn_is_peer_addr_le+0x30>
		return true;
   24a3a:	2001      	movs	r0, #1
   24a3c:	e7f7      	b.n	24a2e <bt_conn_is_peer_addr_le+0x30>

00024a3e <bt_conn_ref>:
{
   24a3e:	f7ff bfaf 	b.w	249a0 <bt_conn_ref.part.12>

00024a42 <conn_lookup_handle>:
{
   24a42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24a46:	4606      	mov	r6, r0
   24a48:	460d      	mov	r5, r1
   24a4a:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   24a4c:	2400      	movs	r4, #0
   24a4e:	f04f 08c0 	mov.w	r8, #192	; 0xc0
   24a52:	f04f 0901 	mov.w	r9, #1
   24a56:	42ac      	cmp	r4, r5
   24a58:	d103      	bne.n	24a62 <conn_lookup_handle+0x20>
	return NULL;
   24a5a:	2300      	movs	r3, #0
}
   24a5c:	4618      	mov	r0, r3
   24a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
   24a62:	fb08 6004 	mla	r0, r8, r4, r6
   24a66:	f7ff ff9b 	bl	249a0 <bt_conn_ref.part.12>
		if (!conn) {
   24a6a:	4603      	mov	r3, r0
   24a6c:	b160      	cbz	r0, 24a88 <conn_lookup_handle+0x46>
		if (!bt_conn_is_handle_valid(conn)) {
   24a6e:	7a82      	ldrb	r2, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   24a70:	2a08      	cmp	r2, #8
   24a72:	d80b      	bhi.n	24a8c <conn_lookup_handle+0x4a>
   24a74:	fa09 f202 	lsl.w	r2, r9, r2
   24a78:	f412 7fc1 	tst.w	r2, #386	; 0x182
   24a7c:	d006      	beq.n	24a8c <conn_lookup_handle+0x4a>
		if (conn->handle != handle) {
   24a7e:	8802      	ldrh	r2, [r0, #0]
   24a80:	42ba      	cmp	r2, r7
   24a82:	d0eb      	beq.n	24a5c <conn_lookup_handle+0x1a>
			bt_conn_unref(conn);
   24a84:	f7e3 fa7c 	bl	7f80 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   24a88:	3401      	adds	r4, #1
   24a8a:	e7e4      	b.n	24a56 <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   24a8c:	4618      	mov	r0, r3
   24a8e:	e7f9      	b.n	24a84 <conn_lookup_handle+0x42>

00024a90 <bt_conn_lookup_addr_le>:
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   24a90:	f7e3 bb80 	b.w	8194 <bt_conn_lookup_addr_le.part.13>

00024a94 <bt_conn_le_conn_update>:
{
   24a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24a96:	4607      	mov	r7, r0
   24a98:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   24a9a:	f242 0013 	movw	r0, #8211	; 0x2013
   24a9e:	210e      	movs	r1, #14
   24aa0:	f7e1 fc08 	bl	62b4 <bt_hci_cmd_create>
	if (!buf) {
   24aa4:	4606      	mov	r6, r0
   24aa6:	b1d0      	cbz	r0, 24ade <bt_conn_le_conn_update+0x4a>
   24aa8:	210e      	movs	r1, #14
   24aaa:	3008      	adds	r0, #8
   24aac:	f7f8 f82c 	bl	1cb08 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   24ab0:	220e      	movs	r2, #14
   24ab2:	4604      	mov	r4, r0
   24ab4:	2100      	movs	r1, #0
   24ab6:	f7ff fb74 	bl	241a2 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   24aba:	883b      	ldrh	r3, [r7, #0]
   24abc:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   24abe:	882b      	ldrh	r3, [r5, #0]
   24ac0:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   24ac2:	886b      	ldrh	r3, [r5, #2]
   24ac4:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   24ac6:	88ab      	ldrh	r3, [r5, #4]
   24ac8:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   24aca:	88eb      	ldrh	r3, [r5, #6]
   24acc:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24ace:	4631      	mov	r1, r6
   24ad0:	2200      	movs	r2, #0
   24ad2:	f242 0013 	movw	r0, #8211	; 0x2013
}
   24ad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24ada:	f7e1 bd27 	b.w	652c <bt_hci_cmd_send_sync>
}
   24ade:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024ae4 <l2cap_connected>:
}
   24ae4:	4770      	bx	lr

00024ae6 <l2cap_disconnected>:
   24ae6:	4770      	bx	lr

00024ae8 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24ae8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   24aea:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24aec:	b17b      	cbz	r3, 24b0e <bt_l2cap_chan_remove+0x26>
   24aee:	3b08      	subs	r3, #8
   24af0:	2200      	movs	r2, #0
   24af2:	b163      	cbz	r3, 24b0e <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   24af4:	428b      	cmp	r3, r1
   24af6:	f103 0408 	add.w	r4, r3, #8
   24afa:	d10f      	bne.n	24b1c <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   24afc:	688b      	ldr	r3, [r1, #8]
   24afe:	b93a      	cbnz	r2, 24b10 <bt_l2cap_chan_remove+0x28>
   24b00:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   24b02:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   24b04:	4294      	cmp	r4, r2
   24b06:	d100      	bne.n	24b0a <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   24b08:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   24b0a:	2300      	movs	r3, #0
   24b0c:	608b      	str	r3, [r1, #8]
}
   24b0e:	bd10      	pop	{r4, pc}
   24b10:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   24b12:	6d43      	ldr	r3, [r0, #84]	; 0x54
   24b14:	429c      	cmp	r4, r3
	list->tail = node;
   24b16:	bf08      	it	eq
   24b18:	6542      	streq	r2, [r0, #84]	; 0x54
   24b1a:	e7f6      	b.n	24b0a <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24b1c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24b1e:	2b00      	cmp	r3, #0
   24b20:	d0f5      	beq.n	24b0e <bt_l2cap_chan_remove+0x26>
   24b22:	3b08      	subs	r3, #8
   24b24:	4622      	mov	r2, r4
   24b26:	e7e4      	b.n	24af2 <bt_l2cap_chan_remove+0xa>

00024b28 <bt_l2cap_chan_del>:
{
   24b28:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   24b2a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   24b2e:	4604      	mov	r4, r0
	if (!chan->conn) {
   24b30:	b123      	cbz	r3, 24b3c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   24b32:	686b      	ldr	r3, [r5, #4]
   24b34:	b103      	cbz	r3, 24b38 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   24b36:	4798      	blx	r3
	chan->conn = NULL;
   24b38:	2300      	movs	r3, #0
   24b3a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   24b3c:	68e3      	ldr	r3, [r4, #12]
   24b3e:	b10b      	cbz	r3, 24b44 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   24b40:	4620      	mov	r0, r4
   24b42:	4798      	blx	r3
	if (ops->released) {
   24b44:	69eb      	ldr	r3, [r5, #28]
   24b46:	b11b      	cbz	r3, 24b50 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   24b48:	4620      	mov	r0, r4
}
   24b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   24b4e:	4718      	bx	r3
}
   24b50:	bd70      	pop	{r4, r5, r6, pc}

00024b52 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24b52:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   24b54:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24b56:	b173      	cbz	r3, 24b76 <bt_l2cap_disconnected+0x24>
   24b58:	f1b3 0008 	subs.w	r0, r3, #8
   24b5c:	d00b      	beq.n	24b76 <bt_l2cap_disconnected+0x24>
   24b5e:	681c      	ldr	r4, [r3, #0]
   24b60:	b104      	cbz	r4, 24b64 <bt_l2cap_disconnected+0x12>
   24b62:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   24b64:	f7ff ffe0 	bl	24b28 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24b68:	b12c      	cbz	r4, 24b76 <bt_l2cap_disconnected+0x24>
   24b6a:	68a3      	ldr	r3, [r4, #8]
   24b6c:	b103      	cbz	r3, 24b70 <bt_l2cap_disconnected+0x1e>
   24b6e:	3b08      	subs	r3, #8
{
   24b70:	4620      	mov	r0, r4
   24b72:	461c      	mov	r4, r3
   24b74:	e7f6      	b.n	24b64 <bt_l2cap_disconnected+0x12>
}
   24b76:	bd10      	pop	{r4, pc}

00024b78 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   24b78:	3104      	adds	r1, #4
   24b7a:	f7e3 bc2b 	b.w	83d4 <bt_conn_create_pdu_timeout>

00024b7e <bt_l2cap_send_cb>:
{
   24b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b82:	4614      	mov	r4, r2
   24b84:	4605      	mov	r5, r0
   24b86:	4688      	mov	r8, r1
	return net_buf_simple_push(&buf->b, len);
   24b88:	f102 0008 	add.w	r0, r2, #8
   24b8c:	2104      	movs	r1, #4
   24b8e:	461e      	mov	r6, r3
   24b90:	9f06      	ldr	r7, [sp, #24]
   24b92:	f7f7 ff61 	bl	1ca58 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24b96:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   24b98:	f8a0 8002 	strh.w	r8, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24b9c:	3904      	subs	r1, #4
   24b9e:	8001      	strh	r1, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24ba0:	463b      	mov	r3, r7
   24ba2:	4632      	mov	r2, r6
   24ba4:	4621      	mov	r1, r4
   24ba6:	4628      	mov	r0, r5
}
   24ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24bac:	f7e3 b91a 	b.w	7de4 <bt_conn_send_cb>

00024bb0 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24bb0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   24bb2:	b108      	cbz	r0, 24bb8 <bt_l2cap_le_lookup_tx_cid+0x8>
   24bb4:	3808      	subs	r0, #8
   24bb6:	b900      	cbnz	r0, 24bba <bt_l2cap_le_lookup_tx_cid+0xa>
}
   24bb8:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   24bba:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   24bbe:	428b      	cmp	r3, r1
   24bc0:	d0fa      	beq.n	24bb8 <bt_l2cap_le_lookup_tx_cid+0x8>
   24bc2:	6880      	ldr	r0, [r0, #8]
   24bc4:	e7f5      	b.n	24bb2 <bt_l2cap_le_lookup_tx_cid+0x2>

00024bc6 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24bc6:	6d00      	ldr	r0, [r0, #80]	; 0x50
   24bc8:	b108      	cbz	r0, 24bce <bt_l2cap_le_lookup_rx_cid+0x8>
   24bca:	3808      	subs	r0, #8
   24bcc:	b900      	cbnz	r0, 24bd0 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   24bce:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   24bd0:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   24bd4:	428b      	cmp	r3, r1
   24bd6:	d0fa      	beq.n	24bce <bt_l2cap_le_lookup_rx_cid+0x8>
   24bd8:	6880      	ldr	r0, [r0, #8]
   24bda:	e7f5      	b.n	24bc8 <bt_l2cap_le_lookup_rx_cid+0x2>

00024bdc <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   24bdc:	4770      	bx	lr

00024bde <sys_slist_get>:
Z_GENLIST_IS_EMPTY(slist)
   24bde:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET(slist, snode)
   24be0:	b12b      	cbz	r3, 24bee <sys_slist_get+0x10>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24be2:	6841      	ldr	r1, [r0, #4]
   24be4:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   24be6:	6002      	str	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24be8:	428b      	cmp	r3, r1
	list->tail = node;
   24bea:	bf08      	it	eq
   24bec:	6042      	streq	r2, [r0, #4]
Z_GENLIST_GET(slist, snode)
   24bee:	4618      	mov	r0, r3
   24bf0:	4770      	bx	lr

00024bf2 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24bf2:	6803      	ldr	r3, [r0, #0]
   24bf4:	2200      	movs	r2, #0
   24bf6:	b90b      	cbnz	r3, 24bfc <sys_slist_find_and_remove+0xa>
   24bf8:	4618      	mov	r0, r3
   24bfa:	4770      	bx	lr
   24bfc:	428b      	cmp	r3, r1
   24bfe:	d110      	bne.n	24c22 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   24c00:	680b      	ldr	r3, [r1, #0]
   24c02:	b942      	cbnz	r2, 24c16 <sys_slist_find_and_remove+0x24>
   24c04:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   24c06:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   24c08:	4291      	cmp	r1, r2
   24c0a:	d100      	bne.n	24c0e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   24c0c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   24c0e:	2300      	movs	r3, #0
   24c10:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24c12:	2001      	movs	r0, #1
   24c14:	4770      	bx	lr
	parent->next = child;
   24c16:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   24c18:	6843      	ldr	r3, [r0, #4]
   24c1a:	4299      	cmp	r1, r3
	list->tail = node;
   24c1c:	bf08      	it	eq
   24c1e:	6042      	streq	r2, [r0, #4]
   24c20:	e7f5      	b.n	24c0e <sys_slist_find_and_remove+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24c22:	461a      	mov	r2, r3
   24c24:	681b      	ldr	r3, [r3, #0]
   24c26:	e7e6      	b.n	24bf6 <sys_slist_find_and_remove+0x4>

00024c28 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   24c28:	4603      	mov	r3, r0
	size_t bytes = 0;
   24c2a:	2000      	movs	r0, #0

	while (buf) {
   24c2c:	b903      	cbnz	r3, 24c30 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   24c2e:	4770      	bx	lr
		bytes += buf->len;
   24c30:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   24c32:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   24c34:	4410      	add	r0, r2
		buf = buf->frags;
   24c36:	e7f9      	b.n	24c2c <net_buf_frags_len+0x4>

00024c38 <att_sent>:
	if (chan->ops->sent) {
   24c38:	684b      	ldr	r3, [r1, #4]
   24c3a:	695b      	ldr	r3, [r3, #20]
   24c3c:	b10b      	cbz	r3, 24c42 <att_sent+0xa>
		chan->ops->sent(chan);
   24c3e:	4608      	mov	r0, r1
   24c40:	4718      	bx	r3
}
   24c42:	4770      	bx	lr

00024c44 <attr_read_type_cb>:
{
   24c44:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   24c46:	68d4      	ldr	r4, [r2, #12]
   24c48:	7823      	ldrb	r3, [r4, #0]
   24c4a:	3102      	adds	r1, #2
   24c4c:	b913      	cbnz	r3, 24c54 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   24c4e:	7021      	strb	r1, [r4, #0]
	return true;
   24c50:	2001      	movs	r0, #1
   24c52:	e006      	b.n	24c62 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   24c54:	428b      	cmp	r3, r1
   24c56:	d0fb      	beq.n	24c50 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   24c58:	8983      	ldrh	r3, [r0, #12]
   24c5a:	3b02      	subs	r3, #2
   24c5c:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   24c5e:	2000      	movs	r0, #0
   24c60:	6110      	str	r0, [r2, #16]
}
   24c62:	bd10      	pop	{r4, pc}

00024c64 <att_prepare_write_req>:
}
   24c64:	2006      	movs	r0, #6
   24c66:	4770      	bx	lr

00024c68 <att_op_get_type>:
	switch (op) {
   24c68:	280e      	cmp	r0, #14
   24c6a:	d00a      	beq.n	24c82 <att_op_get_type+0x1a>
   24c6c:	d81e      	bhi.n	24cac <att_op_get_type+0x44>
   24c6e:	2807      	cmp	r0, #7
   24c70:	d015      	beq.n	24c9e <att_op_get_type+0x36>
   24c72:	d80d      	bhi.n	24c90 <att_op_get_type+0x28>
   24c74:	2803      	cmp	r0, #3
   24c76:	d012      	beq.n	24c9e <att_op_get_type+0x36>
   24c78:	d805      	bhi.n	24c86 <att_op_get_type+0x1e>
   24c7a:	2801      	cmp	r0, #1
   24c7c:	d00f      	beq.n	24c9e <att_op_get_type+0x36>
   24c7e:	2802      	cmp	r0, #2
   24c80:	d12b      	bne.n	24cda <att_op_get_type+0x72>
		return ATT_REQUEST;
   24c82:	2001      	movs	r0, #1
   24c84:	4770      	bx	lr
	switch (op) {
   24c86:	2805      	cmp	r0, #5
		return ATT_REQUEST;
   24c88:	bf0c      	ite	eq
   24c8a:	2002      	moveq	r0, #2
   24c8c:	2001      	movne	r0, #1
   24c8e:	4770      	bx	lr
	switch (op) {
   24c90:	280a      	cmp	r0, #10
   24c92:	d0f6      	beq.n	24c82 <att_op_get_type+0x1a>
   24c94:	d805      	bhi.n	24ca2 <att_op_get_type+0x3a>
   24c96:	2808      	cmp	r0, #8
   24c98:	d0f3      	beq.n	24c82 <att_op_get_type+0x1a>
   24c9a:	2809      	cmp	r0, #9
   24c9c:	d11d      	bne.n	24cda <att_op_get_type+0x72>
		return ATT_RESPONSE;
   24c9e:	2002      	movs	r0, #2
   24ca0:	4770      	bx	lr
	switch (op) {
   24ca2:	280c      	cmp	r0, #12
		return ATT_RESPONSE;
   24ca4:	bf0c      	ite	eq
   24ca6:	2001      	moveq	r0, #1
   24ca8:	2002      	movne	r0, #2
   24caa:	4770      	bx	lr
	switch (op) {
   24cac:	2817      	cmp	r0, #23
   24cae:	d0f6      	beq.n	24c9e <att_op_get_type+0x36>
   24cb0:	d80b      	bhi.n	24cca <att_op_get_type+0x62>
   24cb2:	2811      	cmp	r0, #17
   24cb4:	d0f3      	beq.n	24c9e <att_op_get_type+0x36>
   24cb6:	d803      	bhi.n	24cc0 <att_op_get_type+0x58>
   24cb8:	280f      	cmp	r0, #15
   24cba:	d0f0      	beq.n	24c9e <att_op_get_type+0x36>
   24cbc:	2810      	cmp	r0, #16
   24cbe:	e7df      	b.n	24c80 <att_op_get_type+0x18>
   24cc0:	2813      	cmp	r0, #19
   24cc2:	d0ec      	beq.n	24c9e <att_op_get_type+0x36>
   24cc4:	d3dd      	bcc.n	24c82 <att_op_get_type+0x1a>
   24cc6:	2816      	cmp	r0, #22
   24cc8:	e7da      	b.n	24c80 <att_op_get_type+0x18>
   24cca:	281d      	cmp	r0, #29
   24ccc:	d013      	beq.n	24cf6 <att_op_get_type+0x8e>
   24cce:	d80a      	bhi.n	24ce6 <att_op_get_type+0x7e>
   24cd0:	2819      	cmp	r0, #25
   24cd2:	d0e4      	beq.n	24c9e <att_op_get_type+0x36>
   24cd4:	d3d5      	bcc.n	24c82 <att_op_get_type+0x1a>
   24cd6:	281b      	cmp	r0, #27
   24cd8:	d00f      	beq.n	24cfa <att_op_get_type+0x92>
	if (op & ATT_CMD_MASK) {
   24cda:	f010 0f40 	tst.w	r0, #64	; 0x40
		return ATT_COMMAND;
   24cde:	bf0c      	ite	eq
   24ce0:	2006      	moveq	r0, #6
   24ce2:	2000      	movne	r0, #0
   24ce4:	4770      	bx	lr
	switch (op) {
   24ce6:	2852      	cmp	r0, #82	; 0x52
   24ce8:	d009      	beq.n	24cfe <att_op_get_type+0x96>
   24cea:	28d2      	cmp	r0, #210	; 0xd2
   24cec:	d007      	beq.n	24cfe <att_op_get_type+0x96>
   24cee:	281e      	cmp	r0, #30
   24cf0:	d1f3      	bne.n	24cda <att_op_get_type+0x72>
		return ATT_CONFIRMATION;
   24cf2:	2004      	movs	r0, #4
}
   24cf4:	4770      	bx	lr
		return ATT_INDICATION;
   24cf6:	2005      	movs	r0, #5
   24cf8:	4770      	bx	lr
		return ATT_NOTIFICATION;
   24cfa:	2003      	movs	r0, #3
   24cfc:	4770      	bx	lr
		return ATT_COMMAND;
   24cfe:	2000      	movs	r0, #0
   24d00:	4770      	bx	lr

00024d02 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24d02:	f3bf 8f5b 	dmb	ish
   24d06:	6800      	ldr	r0, [r0, #0]
   24d08:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   24d0c:	4108      	asrs	r0, r1
}
   24d0e:	f000 0001 	and.w	r0, r0, #1
   24d12:	4770      	bx	lr

00024d14 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   24d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   24d16:	e9cd 2301 	strd	r2, r3, [sp, #4]
   24d1a:	2300      	movs	r3, #0
   24d1c:	9300      	str	r3, [sp, #0]
   24d1e:	461a      	mov	r2, r3
   24d20:	f7e5 fbfc 	bl	a51c <bt_gatt_foreach_attr_type>
				  user_data);
}
   24d24:	b005      	add	sp, #20
   24d26:	f85d fb04 	ldr.w	pc, [sp], #4

00024d2a <att_chan_read>:
{
   24d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d2e:	4680      	mov	r8, r0
   24d30:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   24d32:	4610      	mov	r0, r2
{
   24d34:	469a      	mov	sl, r3
   24d36:	468b      	mov	fp, r1
   24d38:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   24d3a:	f7ff ff75 	bl	24c28 <net_buf_frags_len>
   24d3e:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   24d42:	4283      	cmp	r3, r0
   24d44:	d97a      	bls.n	24e3c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   24d46:	f8d8 3008 	ldr.w	r3, [r8, #8]
   24d4a:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   24d4c:	4630      	mov	r0, r6
   24d4e:	f7f7 fde7 	bl	1c920 <net_buf_frag_last>
	size_t len, total = 0;
   24d52:	f04f 0900 	mov.w	r9, #0
	frag = net_buf_frag_last(buf);
   24d56:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   24d58:	4630      	mov	r0, r6
   24d5a:	f7ff ff65 	bl	24c28 <net_buf_frags_len>
   24d5e:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   24d62:	f105 0708 	add.w	r7, r5, #8
   24d66:	1a24      	subs	r4, r4, r0
   24d68:	4638      	mov	r0, r7
   24d6a:	f003 f8f8 	bl	27f5e <net_buf_simple_tailroom>
   24d6e:	4284      	cmp	r4, r0
   24d70:	d211      	bcs.n	24d96 <att_chan_read+0x6c>
   24d72:	4630      	mov	r0, r6
   24d74:	f7ff ff58 	bl	24c28 <net_buf_frags_len>
   24d78:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   24d7c:	1a24      	subs	r4, r4, r0
		if (!len) {
   24d7e:	bb34      	cbnz	r4, 24dce <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   24d80:	79b0      	ldrb	r0, [r6, #6]
   24d82:	f7f7 fb5d 	bl	1c440 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   24d86:	2200      	movs	r2, #0
   24d88:	2300      	movs	r3, #0
   24d8a:	f003 f893 	bl	27eb4 <net_buf_alloc_fixed>
			if (!frag) {
   24d8e:	4605      	mov	r5, r0
   24d90:	b930      	cbnz	r0, 24da0 <att_chan_read+0x76>
	return total;
   24d92:	464f      	mov	r7, r9
   24d94:	e02c      	b.n	24df0 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   24d96:	4638      	mov	r0, r7
   24d98:	f003 f8e1 	bl	27f5e <net_buf_simple_tailroom>
   24d9c:	4604      	mov	r4, r0
   24d9e:	e7ee      	b.n	24d7e <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   24da0:	4601      	mov	r1, r0
   24da2:	4630      	mov	r0, r6
   24da4:	f7f7 fdfc 	bl	1c9a0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   24da8:	4630      	mov	r0, r6
   24daa:	f7ff ff3d 	bl	24c28 <net_buf_frags_len>
   24dae:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   24db2:	f105 0708 	add.w	r7, r5, #8
   24db6:	1a24      	subs	r4, r4, r0
   24db8:	4638      	mov	r0, r7
   24dba:	f003 f8d0 	bl	27f5e <net_buf_simple_tailroom>
   24dbe:	4284      	cmp	r4, r0
   24dc0:	d21a      	bcs.n	24df8 <att_chan_read+0xce>
   24dc2:	4630      	mov	r0, r6
   24dc4:	f7ff ff30 	bl	24c28 <net_buf_frags_len>
   24dc8:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   24dcc:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   24dce:	68a9      	ldr	r1, [r5, #8]
   24dd0:	89aa      	ldrh	r2, [r5, #12]
   24dd2:	f8db 7004 	ldr.w	r7, [fp, #4]
   24dd6:	f8cd a000 	str.w	sl, [sp]
   24dda:	440a      	add	r2, r1
   24ddc:	b2a3      	uxth	r3, r4
   24dde:	4659      	mov	r1, fp
   24de0:	9803      	ldr	r0, [sp, #12]
   24de2:	47b8      	blx	r7
		if (read < 0) {
   24de4:	1e07      	subs	r7, r0, #0
   24de6:	da0c      	bge.n	24e02 <att_chan_read+0xd8>
				return total;
   24de8:	f1b9 0f00 	cmp.w	r9, #0
   24dec:	bf18      	it	ne
   24dee:	464f      	movne	r7, r9
}
   24df0:	4638      	mov	r0, r7
   24df2:	b005      	add	sp, #20
   24df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24df8:	4638      	mov	r0, r7
   24dfa:	f003 f8b0 	bl	27f5e <net_buf_simple_tailroom>
   24dfe:	4604      	mov	r4, r0
   24e00:	e7e5      	b.n	24dce <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   24e02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24e04:	b993      	cbnz	r3, 24e2c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   24e06:	4639      	mov	r1, r7
   24e08:	f105 0008 	add.w	r0, r5, #8
   24e0c:	f7f7 fe7c 	bl	1cb08 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   24e10:	4630      	mov	r0, r6
   24e12:	f7ff ff09 	bl	24c28 <net_buf_frags_len>
   24e16:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   24e1a:	44ba      	add	sl, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   24e1c:	4283      	cmp	r3, r0
		total += read;
   24e1e:	44b9      	add	r9, r7
		offset += read;
   24e20:	fa1f fa8a 	uxth.w	sl, sl
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   24e24:	d9b5      	bls.n	24d92 <att_chan_read+0x68>
   24e26:	42a7      	cmp	r7, r4
   24e28:	d096      	beq.n	24d58 <att_chan_read+0x2e>
   24e2a:	e7b2      	b.n	24d92 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   24e2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   24e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24e30:	4639      	mov	r1, r7
   24e32:	4628      	mov	r0, r5
   24e34:	4798      	blx	r3
   24e36:	2800      	cmp	r0, #0
   24e38:	d1e5      	bne.n	24e06 <att_chan_read+0xdc>
   24e3a:	e7aa      	b.n	24d92 <att_chan_read+0x68>
		return 0;
   24e3c:	2700      	movs	r7, #0
   24e3e:	e7d7      	b.n	24df0 <att_chan_read+0xc6>

00024e40 <find_info_cb>:
{
   24e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   24e42:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   24e44:	6816      	ldr	r6, [r2, #0]
{
   24e46:	4605      	mov	r5, r0
   24e48:	460f      	mov	r7, r1
   24e4a:	4614      	mov	r4, r2
	if (!data->rsp) {
   24e4c:	b963      	cbnz	r3, 24e68 <find_info_cb+0x28>
   24e4e:	6850      	ldr	r0, [r2, #4]
   24e50:	2101      	movs	r1, #1
   24e52:	3008      	adds	r0, #8
   24e54:	f7f7 fe58 	bl	1cb08 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   24e58:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   24e5a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   24e5c:	781b      	ldrb	r3, [r3, #0]
   24e5e:	2b00      	cmp	r3, #0
   24e60:	bf0c      	ite	eq
   24e62:	2301      	moveq	r3, #1
   24e64:	2302      	movne	r3, #2
   24e66:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   24e68:	68a3      	ldr	r3, [r4, #8]
   24e6a:	781b      	ldrb	r3, [r3, #0]
   24e6c:	2b01      	cmp	r3, #1
   24e6e:	d003      	beq.n	24e78 <find_info_cb+0x38>
   24e70:	2b02      	cmp	r3, #2
   24e72:	d019      	beq.n	24ea8 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   24e74:	2000      	movs	r0, #0
   24e76:	e016      	b.n	24ea6 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   24e78:	682b      	ldr	r3, [r5, #0]
   24e7a:	781b      	ldrb	r3, [r3, #0]
   24e7c:	2b00      	cmp	r3, #0
   24e7e:	d1f9      	bne.n	24e74 <find_info_cb+0x34>
   24e80:	6860      	ldr	r0, [r4, #4]
   24e82:	2104      	movs	r1, #4
   24e84:	3008      	adds	r0, #8
   24e86:	f7f7 fe3f 	bl	1cb08 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   24e8a:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   24e8c:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   24e8e:	885b      	ldrh	r3, [r3, #2]
   24e90:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   24e92:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   24e94:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   24e96:	899b      	ldrh	r3, [r3, #12]
   24e98:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   24e9c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   24e9e:	2804      	cmp	r0, #4
   24ea0:	bf94      	ite	ls
   24ea2:	2000      	movls	r0, #0
   24ea4:	2001      	movhi	r0, #1
}
   24ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   24ea8:	682b      	ldr	r3, [r5, #0]
   24eaa:	781b      	ldrb	r3, [r3, #0]
   24eac:	2b02      	cmp	r3, #2
   24eae:	d1e1      	bne.n	24e74 <find_info_cb+0x34>
   24eb0:	6860      	ldr	r0, [r4, #4]
   24eb2:	2112      	movs	r1, #18
   24eb4:	3008      	adds	r0, #8
   24eb6:	f7f7 fe27 	bl	1cb08 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24eba:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   24ebc:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24ebe:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   24ec0:	f820 7b02 	strh.w	r7, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24ec4:	3101      	adds	r1, #1
   24ec6:	f7ff f942 	bl	2414e <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   24eca:	6863      	ldr	r3, [r4, #4]
   24ecc:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   24ed0:	899b      	ldrh	r3, [r3, #12]
   24ed2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   24ed4:	2812      	cmp	r0, #18
   24ed6:	e7e3      	b.n	24ea0 <find_info_cb+0x60>

00024ed8 <attr_read_group_cb>:
	if (!data->rsp->len) {
   24ed8:	68d0      	ldr	r0, [r2, #12]
   24eda:	7803      	ldrb	r3, [r0, #0]
   24edc:	3104      	adds	r1, #4
   24ede:	b913      	cbnz	r3, 24ee6 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   24ee0:	7001      	strb	r1, [r0, #0]
	return true;
   24ee2:	2001      	movs	r0, #1
}
   24ee4:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   24ee6:	428b      	cmp	r3, r1
   24ee8:	d0fb      	beq.n	24ee2 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   24eea:	6891      	ldr	r1, [r2, #8]
   24eec:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   24eee:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   24ef0:	3b04      	subs	r3, #4
   24ef2:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   24ef4:	6110      	str	r0, [r2, #16]
		return false;
   24ef6:	4770      	bx	lr

00024ef8 <process_queue>:
{
   24ef8:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   24efa:	2200      	movs	r2, #0
{
   24efc:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   24efe:	2300      	movs	r3, #0
   24f00:	4608      	mov	r0, r1
{
   24f02:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   24f04:	f7f7 fb96 	bl	1c634 <net_buf_get>
	if (buf) {
   24f08:	4605      	mov	r5, r0
   24f0a:	b160      	cbz	r0, 24f26 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   24f0c:	4601      	mov	r1, r0
   24f0e:	2200      	movs	r2, #0
   24f10:	4620      	mov	r0, r4
   24f12:	f7e3 fe47 	bl	8ba4 <chan_send>
		if (err) {
   24f16:	4604      	mov	r4, r0
   24f18:	b118      	cbz	r0, 24f22 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   24f1a:	4629      	mov	r1, r5
   24f1c:	4630      	mov	r0, r6
   24f1e:	f003 fbc1 	bl	286a4 <k_queue_prepend>
}
   24f22:	4620      	mov	r0, r4
   24f24:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   24f26:	f06f 0401 	mvn.w	r4, #1
   24f2a:	e7fa      	b.n	24f22 <process_queue+0x2a>

00024f2c <att_exec_write_req>:
   24f2c:	2006      	movs	r0, #6
   24f2e:	4770      	bx	lr

00024f30 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24f30:	30c8      	adds	r0, #200	; 0xc8
   24f32:	f3bf 8f5b 	dmb	ish
   24f36:	e850 3f00 	ldrex	r3, [r0]
   24f3a:	f023 0301 	bic.w	r3, r3, #1
   24f3e:	e840 3200 	strex	r2, r3, [r0]
   24f42:	2a00      	cmp	r2, #0
   24f44:	d1f7      	bne.n	24f36 <chan_rsp_sent+0x6>
   24f46:	f3bf 8f5b 	dmb	ish
}
   24f4a:	4770      	bx	lr

00024f4c <chan_cfm_sent>:
   24f4c:	30c8      	adds	r0, #200	; 0xc8
   24f4e:	f3bf 8f5b 	dmb	ish
   24f52:	e850 3f00 	ldrex	r3, [r0]
   24f56:	f023 0302 	bic.w	r3, r3, #2
   24f5a:	e840 3200 	strex	r2, r3, [r0]
   24f5e:	2a00      	cmp	r2, #0
   24f60:	d1f7      	bne.n	24f52 <chan_cfm_sent+0x6>
   24f62:	f3bf 8f5b 	dmb	ish
}
   24f66:	4770      	bx	lr

00024f68 <chan_req_send>:
{
   24f68:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24f6a:	690e      	ldr	r6, [r1, #16]
{
   24f6c:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24f6e:	4630      	mov	r0, r6
{
   24f70:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24f72:	f7ff fe59 	bl	24c28 <net_buf_frags_len>
   24f76:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   24f7a:	4283      	cmp	r3, r0
   24f7c:	d317      	bcc.n	24fae <chan_req_send+0x46>
	chan->req = req;
   24f7e:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   24f82:	f106 0008 	add.w	r0, r6, #8
   24f86:	f002 ffe6 	bl	27f56 <net_buf_simple_headroom>
	state->len = buf->len;
   24f8a:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   24f8c:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   24f8e:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   24f90:	6920      	ldr	r0, [r4, #16]
   24f92:	f7f7 fcad 	bl	1c8f0 <net_buf_ref>
   24f96:	2200      	movs	r2, #0
   24f98:	4601      	mov	r1, r0
   24f9a:	4628      	mov	r0, r5
   24f9c:	f7e3 fe02 	bl	8ba4 <chan_send>
	if (err) {
   24fa0:	4605      	mov	r5, r0
   24fa2:	b110      	cbz	r0, 24faa <chan_req_send+0x42>
		net_buf_unref(req->buf);
   24fa4:	6920      	ldr	r0, [r4, #16]
   24fa6:	f7f7 fc5f 	bl	1c868 <net_buf_unref>
}
   24faa:	4628      	mov	r0, r5
   24fac:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   24fae:	f06f 0523 	mvn.w	r5, #35	; 0x23
   24fb2:	e7fa      	b.n	24faa <chan_req_send+0x42>

00024fb4 <bt_att_status>:
{
   24fb4:	b538      	push	{r3, r4, r5, lr}
   24fb6:	4605      	mov	r5, r0
   24fb8:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   24fba:	2100      	movs	r1, #0
   24fbc:	f7ff fea1 	bl	24d02 <atomic_test_bit>
   24fc0:	b1c8      	cbz	r0, 24ff6 <bt_att_status+0x42>
	if (!chan->att) {
   24fc2:	f855 0c08 	ldr.w	r0, [r5, #-8]
   24fc6:	b1b0      	cbz	r0, 24ff6 <bt_att_status+0x42>
	if (chan->req) {
   24fc8:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   24fcc:	b99b      	cbnz	r3, 24ff6 <bt_att_status+0x42>
	node = sys_slist_get(&chan->att->reqs);
   24fce:	3004      	adds	r0, #4
   24fd0:	f7ff fe05 	bl	24bde <sys_slist_get>
	if (!node) {
   24fd4:	4604      	mov	r4, r0
   24fd6:	b170      	cbz	r0, 24ff6 <bt_att_status+0x42>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   24fd8:	4601      	mov	r1, r0
   24fda:	f1a5 0008 	sub.w	r0, r5, #8
   24fde:	f7e3 ff2f 	bl	8e40 <bt_att_chan_req_send>
   24fe2:	2800      	cmp	r0, #0
   24fe4:	da07      	bge.n	24ff6 <bt_att_status+0x42>
	sys_slist_prepend(&chan->att->reqs, node);
   24fe6:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   24fea:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   24fec:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   24fee:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   24ff0:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   24ff2:	b902      	cbnz	r2, 24ff6 <bt_att_status+0x42>
	list->tail = node;
   24ff4:	609c      	str	r4, [r3, #8]
}
   24ff6:	bd38      	pop	{r3, r4, r5, pc}

00024ff8 <write_cb>:
{
   24ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24ffa:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   24ffc:	4601      	mov	r1, r0
{
   24ffe:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   25000:	222a      	movs	r2, #42	; 0x2a
   25002:	6820      	ldr	r0, [r4, #0]
   25004:	f000 fb96 	bl	25734 <bt_gatt_check_perm>
   25008:	4605      	mov	r5, r0
   2500a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2500c:	bb00      	cbnz	r0, 25050 <write_cb+0x58>
	if (!data->req) {
   2500e:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   25010:	68b7      	ldr	r7, [r6, #8]
   25012:	68e2      	ldr	r2, [r4, #12]
   25014:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   25016:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   25018:	bf14      	ite	ne
   2501a:	2300      	movne	r3, #0
   2501c:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2501e:	9301      	str	r3, [sp, #4]
   25020:	8a63      	ldrh	r3, [r4, #18]
   25022:	9300      	str	r3, [sp, #0]
   25024:	4631      	mov	r1, r6
   25026:	8a23      	ldrh	r3, [r4, #16]
   25028:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2502a:	2800      	cmp	r0, #0
   2502c:	db05      	blt.n	2503a <write_cb+0x42>
   2502e:	8a23      	ldrh	r3, [r4, #16]
   25030:	4298      	cmp	r0, r3
   25032:	d10b      	bne.n	2504c <write_cb+0x54>
	data->err = 0U;
   25034:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   25036:	2501      	movs	r5, #1
   25038:	e005      	b.n	25046 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   2503a:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2503e:	d305      	bcc.n	2504c <write_cb+0x54>
		return -err;
   25040:	4240      	negs	r0, r0
   25042:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   25044:	7520      	strb	r0, [r4, #20]
}
   25046:	4628      	mov	r0, r5
   25048:	b003      	add	sp, #12
   2504a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2504c:	200e      	movs	r0, #14
   2504e:	e7f9      	b.n	25044 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   25050:	2500      	movs	r5, #0
   25052:	e7f8      	b.n	25046 <write_cb+0x4e>

00025054 <bt_att_sent>:
{
   25054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   25056:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
	struct bt_att *att = chan->att;
   2505a:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2505e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   25060:	f1a0 0608 	sub.w	r6, r0, #8
	if (chan->sent) {
   25064:	b10b      	cbz	r3, 2506a <bt_att_sent+0x16>
		chan->sent(chan);
   25066:	4630      	mov	r0, r6
   25068:	4798      	blx	r3
   2506a:	f3bf 8f5b 	dmb	ish
   2506e:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   25072:	e853 2f00 	ldrex	r2, [r3]
   25076:	f022 0210 	bic.w	r2, r2, #16
   2507a:	e843 2100 	strex	r1, r2, [r3]
   2507e:	2900      	cmp	r1, #0
   25080:	d1f7      	bne.n	25072 <bt_att_sent+0x1e>
   25082:	f3bf 8f5b 	dmb	ish
	if (!att) {
   25086:	b334      	cbz	r4, 250d6 <bt_att_sent+0x82>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   25088:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   2508c:	b98b      	cbnz	r3, 250b2 <bt_att_sent+0x5e>
   2508e:	6863      	ldr	r3, [r4, #4]
   25090:	b17b      	cbz	r3, 250b2 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25092:	1d20      	adds	r0, r4, #4
   25094:	f7ff fda3 	bl	24bde <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25098:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2509a:	4607      	mov	r7, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2509c:	4630      	mov	r0, r6
   2509e:	f7ff ff63 	bl	24f68 <chan_req_send>
   250a2:	2800      	cmp	r0, #0
   250a4:	da17      	bge.n	250d6 <bt_att_sent+0x82>
Z_GENLIST_PREPEND(slist, snode)
   250a6:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   250a8:	603b      	str	r3, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
   250aa:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   250ac:	6067      	str	r7, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   250ae:	b903      	cbnz	r3, 250b2 <bt_att_sent+0x5e>
	list->tail = node;
   250b0:	60a7      	str	r7, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   250b2:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
   250b6:	4630      	mov	r0, r6
   250b8:	f7ff ff1e 	bl	24ef8 <process_queue>
	if (!err) {
   250bc:	b158      	cbz	r0, 250d6 <bt_att_sent+0x82>
	err = process_queue(chan, &att->tx_queue);
   250be:	f104 010c 	add.w	r1, r4, #12
   250c2:	4630      	mov	r0, r6
   250c4:	f7ff ff18 	bl	24ef8 <process_queue>
	if (!err) {
   250c8:	b128      	cbz	r0, 250d6 <bt_att_sent+0x82>
   250ca:	f505 708c 	add.w	r0, r5, #280	; 0x118
}
   250ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   250d2:	f7fa bdd3 	b.w	1fc7c <z_impl_k_sem_give>
   250d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000250d8 <read_cb>:
{
   250d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   250dc:	6817      	ldr	r7, [r2, #0]
{
   250de:	4680      	mov	r8, r0
	data->err = 0x00;
   250e0:	2600      	movs	r6, #0
{
   250e2:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   250e4:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   250e6:	7316      	strb	r6, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   250e8:	4641      	mov	r1, r8
   250ea:	2215      	movs	r2, #21
   250ec:	f000 fb22 	bl	25734 <bt_gatt_check_perm>
   250f0:	4604      	mov	r4, r0
   250f2:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   250f4:	b9a0      	cbnz	r0, 25120 <read_cb+0x48>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   250f6:	e9cd 0000 	strd	r0, r0, [sp]
   250fa:	88ab      	ldrh	r3, [r5, #4]
   250fc:	68aa      	ldr	r2, [r5, #8]
   250fe:	4641      	mov	r1, r8
   25100:	4638      	mov	r0, r7
   25102:	f7ff fe12 	bl	24d2a <att_chan_read>
	if (ret < 0) {
   25106:	2800      	cmp	r0, #0
   25108:	da0c      	bge.n	25124 <read_cb+0x4c>
	if (err < 0 && err >= -0xff) {
   2510a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2510e:	bf26      	itte	cs
   25110:	4240      	negcs	r0, r0
   25112:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   25114:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   25116:	7328      	strb	r0, [r5, #12]
}
   25118:	4620      	mov	r0, r4
   2511a:	b002      	add	sp, #8
   2511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   25120:	4634      	mov	r4, r6
   25122:	e7f9      	b.n	25118 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   25124:	2401      	movs	r4, #1
   25126:	e7f7      	b.n	25118 <read_cb+0x40>

00025128 <send_err_rsp.part.12>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2512c:	4688      	mov	r8, r1
   2512e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25130:	2101      	movs	r1, #1
   25132:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25134:	4605      	mov	r5, r0
   25136:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25138:	f7e3 ff10 	bl	8f5c <bt_att_chan_create_pdu>
	if (!buf) {
   2513c:	4604      	mov	r4, r0
   2513e:	b170      	cbz	r0, 2515e <send_err_rsp.part.12+0x36>
	return net_buf_simple_add(&buf->b, len);
   25140:	2104      	movs	r1, #4
   25142:	3008      	adds	r0, #8
   25144:	f7f7 fce0 	bl	1cb08 <net_buf_simple_add>
	rsp->request = req;
   25148:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2514c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2514e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   25152:	4621      	mov	r1, r4
   25154:	4628      	mov	r0, r5
}
   25156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2515a:	f7e3 be1f 	b.w	8d9c <bt_att_chan_send_rsp.constprop.24>
}
   2515e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025162 <att_read_blob_req>:
{
   25162:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   25164:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   25166:	8813      	ldrh	r3, [r2, #0]
   25168:	8852      	ldrh	r2, [r2, #2]
   2516a:	9200      	str	r2, [sp, #0]
   2516c:	210c      	movs	r1, #12
   2516e:	220d      	movs	r2, #13
   25170:	f7e4 f8fe 	bl	9370 <att_read_rsp>
}
   25174:	b003      	add	sp, #12
   25176:	f85d fb04 	ldr.w	pc, [sp], #4

0002517a <att_read_req>:
{
   2517a:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2517c:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2517e:	2200      	movs	r2, #0
   25180:	881b      	ldrh	r3, [r3, #0]
   25182:	9200      	str	r2, [sp, #0]
   25184:	210a      	movs	r1, #10
   25186:	220b      	movs	r2, #11
   25188:	f7e4 f8f2 	bl	9370 <att_read_rsp>
}
   2518c:	b003      	add	sp, #12
   2518e:	f85d fb04 	ldr.w	pc, [sp], #4

00025192 <att_mtu_req>:
{
   25192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25194:	4606      	mov	r6, r0
	struct bt_conn *conn = chan->att->conn;
   25196:	f850 3bc8 	ldr.w	r3, [r0], #200
{
   2519a:	460a      	mov	r2, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2519c:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2519e:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   251a0:	f7ff fdaf 	bl	24d02 <atomic_test_bit>
   251a4:	4604      	mov	r4, r0
   251a6:	b9f0      	cbnz	r0, 251e6 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   251a8:	6892      	ldr	r2, [r2, #8]
   251aa:	8815      	ldrh	r5, [r2, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   251ac:	2d16      	cmp	r5, #22
   251ae:	d91c      	bls.n	251ea <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   251b0:	2202      	movs	r2, #2
   251b2:	2103      	movs	r1, #3
   251b4:	4618      	mov	r0, r3
   251b6:	f7e3 ffeb 	bl	9190 <bt_att_create_pdu>
	if (!pdu) {
   251ba:	4607      	mov	r7, r0
   251bc:	b1b8      	cbz	r0, 251ee <att_mtu_req+0x5c>
   251be:	2102      	movs	r1, #2
   251c0:	3008      	adds	r0, #8
   251c2:	f7f7 fca1 	bl	1cb08 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   251c6:	2345      	movs	r3, #69	; 0x45
   251c8:	7003      	strb	r3, [r0, #0]
   251ca:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   251cc:	4639      	mov	r1, r7
   251ce:	4630      	mov	r0, r6
   251d0:	f7e3 fde4 	bl	8d9c <bt_att_chan_send_rsp.constprop.24>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   251d4:	2d45      	cmp	r5, #69	; 0x45
   251d6:	bf28      	it	cs
   251d8:	2545      	movcs	r5, #69	; 0x45
   251da:	f8a6 5052 	strh.w	r5, [r6, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   251de:	f8a6 505e 	strh.w	r5, [r6, #94]	; 0x5e
	return 0;
   251e2:	4620      	mov	r0, r4
}
   251e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   251e6:	2006      	movs	r0, #6
   251e8:	e7fc      	b.n	251e4 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   251ea:	2004      	movs	r0, #4
   251ec:	e7fa      	b.n	251e4 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   251ee:	200e      	movs	r0, #14
   251f0:	e7f8      	b.n	251e4 <att_mtu_req+0x52>

000251f2 <bt_att_init>:
	bt_gatt_init();
   251f2:	f7e5 b8fb 	b.w	a3ec <bt_gatt_init>

000251f6 <bt_att_get_mtu>:
{
   251f6:	b508      	push	{r3, lr}
	att = att_get(conn);
   251f8:	f7e3 fd40 	bl	8c7c <att_get>
	if (!att) {
   251fc:	b1c0      	cbz	r0, 25230 <bt_att_get_mtu+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   251fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
   25200:	b1b0      	cbz	r0, 25230 <bt_att_get_mtu+0x3a>
   25202:	f5b0 719e 	subs.w	r1, r0, #316	; 0x13c
   25206:	d012      	beq.n	2522e <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25208:	6803      	ldr	r3, [r0, #0]
   2520a:	b10b      	cbz	r3, 25210 <bt_att_get_mtu+0x1a>
   2520c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   25210:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   25212:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   25216:	4290      	cmp	r0, r2
   25218:	bf38      	it	cc
   2521a:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2521c:	b143      	cbz	r3, 25230 <bt_att_get_mtu+0x3a>
   2521e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   25222:	b10a      	cbz	r2, 25228 <bt_att_get_mtu+0x32>
   25224:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   25228:	4619      	mov	r1, r3
   2522a:	4613      	mov	r3, r2
   2522c:	e7f1      	b.n	25212 <bt_att_get_mtu+0x1c>
		return 0;
   2522e:	4608      	mov	r0, r1
}
   25230:	bd08      	pop	{r3, pc}

00025232 <att_req_destroy>:
{
   25232:	b510      	push	{r4, lr}
   25234:	4604      	mov	r4, r0
	if (req->buf) {
   25236:	6900      	ldr	r0, [r0, #16]
   25238:	b108      	cbz	r0, 2523e <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   2523a:	f7f7 fb15 	bl	1c868 <net_buf_unref>
	if (req->destroy) {
   2523e:	68a3      	ldr	r3, [r4, #8]
   25240:	b10b      	cbz	r3, 25246 <att_req_destroy+0x14>
		req->destroy(req);
   25242:	4620      	mov	r0, r4
   25244:	4798      	blx	r3
	bt_att_req_free(req);
   25246:	4620      	mov	r0, r4
}
   25248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   2524c:	f7e4 b9ee 	b.w	962c <bt_att_req_free>

00025250 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   25250:	898a      	ldrh	r2, [r1, #12]
   25252:	6889      	ldr	r1, [r1, #8]
   25254:	2300      	movs	r3, #0
   25256:	f7e4 b9f5 	b.w	9644 <att_handle_rsp>

0002525a <att_chan_detach.part.15>:
static void att_chan_detach(struct bt_att_chan *chan)
   2525a:	b570      	push	{r4, r5, r6, lr}
   2525c:	4604      	mov	r4, r0
   2525e:	2508      	movs	r5, #8
		k_sem_give(&chan->tx_sem);
   25260:	f500 7690 	add.w	r6, r0, #288	; 0x120
   25264:	4630      	mov	r0, r6
   25266:	f7fa fd09 	bl	1fc7c <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   2526a:	3d01      	subs	r5, #1
   2526c:	d1fa      	bne.n	25264 <att_chan_detach.part.15+0xa>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2526e:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   25272:	2200      	movs	r2, #0
   25274:	2300      	movs	r3, #0
   25276:	4628      	mov	r0, r5
   25278:	f7f7 f9dc 	bl	1c634 <net_buf_get>
   2527c:	4602      	mov	r2, r0
   2527e:	b950      	cbnz	r0, 25296 <att_chan_detach.part.15+0x3c>
	if (chan->req) {
   25280:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   25284:	b123      	cbz	r3, 25290 <att_chan_detach.part.15+0x36>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   25286:	4601      	mov	r1, r0
   25288:	230e      	movs	r3, #14
   2528a:	4620      	mov	r0, r4
   2528c:	f7e4 f9da 	bl	9644 <att_handle_rsp>
	chan->att = NULL;
   25290:	2300      	movs	r3, #0
   25292:	6023      	str	r3, [r4, #0]
}
   25294:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   25296:	f7f7 fae7 	bl	1c868 <net_buf_unref>
   2529a:	e7ea      	b.n	25272 <att_chan_detach.part.15+0x18>

0002529c <bt_att_disconnected>:
{
   2529c:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = att_chan->att;
   2529e:	4606      	mov	r6, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   252a0:	f500 719a 	add.w	r1, r0, #308	; 0x134
	struct bt_att *att = att_chan->att;
   252a4:	f856 5d08 	ldr.w	r5, [r6, #-8]!
{
   252a8:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   252aa:	f105 0028 	add.w	r0, r5, #40	; 0x28
   252ae:	f7ff fca0 	bl	24bf2 <sys_slist_find_and_remove>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   252b2:	4630      	mov	r0, r6
   252b4:	f7ff ffd1 	bl	2525a <att_chan_detach.part.15>
	if (!sys_slist_is_empty(&att->chans)) {
   252b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   252ba:	b93b      	cbnz	r3, 252cc <bt_att_disconnected+0x30>
	att_reset(att);
   252bc:	4628      	mov	r0, r5
   252be:	f7e4 fa29 	bl	9714 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   252c2:	6820      	ldr	r0, [r4, #0]
}
   252c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_gatt_disconnected(ch->chan.conn);
   252c8:	f7e5 bea6 	b.w	b018 <bt_gatt_disconnected>
}
   252cc:	bd70      	pop	{r4, r5, r6, pc}

000252ce <found_attr>:
	*found = attr;
   252ce:	6010      	str	r0, [r2, #0]
}
   252d0:	2000      	movs	r0, #0
   252d2:	4770      	bx	lr

000252d4 <gatt_ccc_changed>:
{
   252d4:	460b      	mov	r3, r1
   252d6:	8909      	ldrh	r1, [r1, #8]
   252d8:	8a5a      	ldrh	r2, [r3, #18]
   252da:	428a      	cmp	r2, r1
   252dc:	bf38      	it	cc
   252de:	460a      	movcc	r2, r1
		if (ccc->cfg[i].value > value) {
   252e0:	8b99      	ldrh	r1, [r3, #28]
   252e2:	4291      	cmp	r1, r2
   252e4:	bf38      	it	cc
   252e6:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   252e8:	8bda      	ldrh	r2, [r3, #30]
   252ea:	428a      	cmp	r2, r1
   252ec:	d003      	beq.n	252f6 <gatt_ccc_changed+0x22>
		ccc->value = value;
   252ee:	83d9      	strh	r1, [r3, #30]
		if (ccc->cfg_changed) {
   252f0:	6a1b      	ldr	r3, [r3, #32]
   252f2:	b103      	cbz	r3, 252f6 <gatt_ccc_changed+0x22>
			ccc->cfg_changed(attr, value);
   252f4:	4718      	bx	r3
}
   252f6:	4770      	bx	lr

000252f8 <gatt_indicate_rsp>:
{
   252f8:	b510      	push	{r4, lr}
   252fa:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   252fc:	7da3      	ldrb	r3, [r4, #22]
   252fe:	3b01      	subs	r3, #1
   25300:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   25302:	460a      	mov	r2, r1
   25304:	68a3      	ldr	r3, [r4, #8]
   25306:	4621      	mov	r1, r4
   25308:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   2530a:	68e3      	ldr	r3, [r4, #12]
   2530c:	b12b      	cbz	r3, 2531a <gatt_indicate_rsp+0x22>
   2530e:	7da2      	ldrb	r2, [r4, #22]
   25310:	b91a      	cbnz	r2, 2531a <gatt_indicate_rsp+0x22>
		params->destroy(params);
   25312:	4620      	mov	r0, r4
}
   25314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   25318:	4718      	bx	r3
}
   2531a:	bd10      	pop	{r4, pc}

0002531c <match_uuid>:
	data->attr = attr;
   2531c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2531e:	8091      	strh	r1, [r2, #4]
}
   25320:	2000      	movs	r0, #0
   25322:	4770      	bx	lr

00025324 <ccc_set_cb>:
}
   25324:	2000      	movs	r0, #0
   25326:	4770      	bx	lr

00025328 <gen_hash_m>:
{
   25328:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2532a:	6806      	ldr	r6, [r0, #0]
   2532c:	7835      	ldrb	r5, [r6, #0]
{
   2532e:	b089      	sub	sp, #36	; 0x24
   25330:	4607      	mov	r7, r0
   25332:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25334:	b10d      	cbz	r5, 2533a <gen_hash_m+0x12>
		return BT_GATT_ITER_CONTINUE;
   25336:	2501      	movs	r5, #1
   25338:	e014      	b.n	25364 <gen_hash_m+0x3c>
	switch (u16->val) {
   2533a:	8873      	ldrh	r3, [r6, #2]
   2533c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   25340:	d004      	beq.n	2534c <gen_hash_m+0x24>
   25342:	d812      	bhi.n	2536a <gen_hash_m+0x42>
   25344:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   25348:	2b03      	cmp	r3, #3
   2534a:	d8f4      	bhi.n	25336 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2534c:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25350:	2202      	movs	r2, #2
   25352:	f10d 010e 	add.w	r1, sp, #14
   25356:	4620      	mov	r0, r4
   25358:	f7fe fd79 	bl	23e4e <tc_cmac_update>
   2535c:	b9d0      	cbnz	r0, 25394 <gen_hash_m+0x6c>
			state->err = -EINVAL;
   2535e:	f06f 0315 	mvn.w	r3, #21
   25362:	65a3      	str	r3, [r4, #88]	; 0x58
}
   25364:	4628      	mov	r0, r5
   25366:	b009      	add	sp, #36	; 0x24
   25368:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2536a:	f642 1205 	movw	r2, #10501	; 0x2905
   2536e:	4293      	cmp	r3, r2
   25370:	d8e1      	bhi.n	25336 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   25372:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25376:	2202      	movs	r2, #2
   25378:	f10d 010e 	add.w	r1, sp, #14
   2537c:	4620      	mov	r0, r4
   2537e:	f7fe fd66 	bl	23e4e <tc_cmac_update>
   25382:	2800      	cmp	r0, #0
   25384:	d0eb      	beq.n	2535e <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   25386:	8873      	ldrh	r3, [r6, #2]
   25388:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2538c:	2202      	movs	r2, #2
   2538e:	f10d 010e 	add.w	r1, sp, #14
   25392:	e017      	b.n	253c4 <gen_hash_m+0x9c>
		value = sys_cpu_to_le16(u16->val);
   25394:	8873      	ldrh	r3, [r6, #2]
   25396:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2539a:	2202      	movs	r2, #2
   2539c:	f10d 010e 	add.w	r1, sp, #14
   253a0:	4620      	mov	r0, r4
   253a2:	f7fe fd54 	bl	23e4e <tc_cmac_update>
   253a6:	2800      	cmp	r0, #0
   253a8:	d0d9      	beq.n	2535e <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   253aa:	2000      	movs	r0, #0
   253ac:	2310      	movs	r3, #16
   253ae:	eb0d 0203 	add.w	r2, sp, r3
   253b2:	9000      	str	r0, [sp, #0]
   253b4:	687e      	ldr	r6, [r7, #4]
   253b6:	4639      	mov	r1, r7
   253b8:	47b0      	blx	r6
		if (len < 0) {
   253ba:	1e02      	subs	r2, r0, #0
   253bc:	da01      	bge.n	253c2 <gen_hash_m+0x9a>
			state->err = len;
   253be:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   253c0:	e7d0      	b.n	25364 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   253c2:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   253c4:	4620      	mov	r0, r4
   253c6:	f7fe fd42 	bl	23e4e <tc_cmac_update>
   253ca:	2800      	cmp	r0, #0
   253cc:	d1b3      	bne.n	25336 <gen_hash_m+0xe>
   253ce:	e7c6      	b.n	2535e <gen_hash_m+0x36>

000253d0 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   253d0:	2207      	movs	r2, #7
   253d2:	f7fe bebc 	b.w	2414e <memcpy>

000253d6 <clear_ccc_cfg>:
{
   253d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   253d8:	2400      	movs	r4, #0
{
   253da:	4605      	mov	r5, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   253dc:	4669      	mov	r1, sp
   253de:	3001      	adds	r0, #1
   253e0:	9400      	str	r4, [sp, #0]
   253e2:	f8cd 4003 	str.w	r4, [sp, #3]
   253e6:	f7ff fff3 	bl	253d0 <bt_addr_le_copy>
	cfg->id = 0U;
   253ea:	702c      	strb	r4, [r5, #0]
	cfg->value = 0U;
   253ec:	812c      	strh	r4, [r5, #8]
}
   253ee:	b003      	add	sp, #12
   253f0:	bd30      	pop	{r4, r5, pc}

000253f2 <atomic_and>:
   253f2:	f3bf 8f5b 	dmb	ish
   253f6:	e850 3f00 	ldrex	r3, [r0]
   253fa:	ea03 0201 	and.w	r2, r3, r1
   253fe:	e840 2c00 	strex	ip, r2, [r0]
   25402:	f1bc 0f00 	cmp.w	ip, #0
   25406:	d1f6      	bne.n	253f6 <atomic_and+0x4>
   25408:	f3bf 8f5b 	dmb	ish
}
   2540c:	4618      	mov	r0, r3
   2540e:	4770      	bx	lr

00025410 <clear_cf_cfg>:
{
   25410:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25412:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25414:	2500      	movs	r5, #0
   25416:	4669      	mov	r1, sp
   25418:	3001      	adds	r0, #1
   2541a:	9500      	str	r5, [sp, #0]
   2541c:	f8cd 5003 	str.w	r5, [sp, #3]
   25420:	f7ff ffd6 	bl	253d0 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   25424:	f104 0008 	add.w	r0, r4, #8
   25428:	2201      	movs	r2, #1
   2542a:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2542c:	340c      	adds	r4, #12
   2542e:	f7fe feb8 	bl	241a2 <memset>
   25432:	f3bf 8f5b 	dmb	ish
   25436:	e854 3f00 	ldrex	r3, [r4]
   2543a:	e844 5200 	strex	r2, r5, [r4]
   2543e:	2a00      	cmp	r2, #0
   25440:	d1f9      	bne.n	25436 <clear_cf_cfg+0x26>
   25442:	f3bf 8f5b 	dmb	ish
}
   25446:	b003      	add	sp, #12
   25448:	bd30      	pop	{r4, r5, pc}

0002544a <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2544a:	f3bf 8f5b 	dmb	ish
   2544e:	6800      	ldr	r0, [r0, #0]
   25450:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25454:	4108      	asrs	r0, r1
}
   25456:	f000 0001 	and.w	r0, r0, #1
   2545a:	4770      	bx	lr

0002545c <ccc_find_cfg>:
{
   2545c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25460:	4604      	mov	r4, r0
   25462:	460f      	mov	r7, r1
   25464:	4690      	mov	r8, r2
   25466:	f100 061e 	add.w	r6, r0, #30
   2546a:	4605      	mov	r5, r0
		if (id == ccc->cfg[i].id &&
   2546c:	782b      	ldrb	r3, [r5, #0]
   2546e:	4543      	cmp	r3, r8
   25470:	d10b      	bne.n	2548a <ccc_find_cfg+0x2e>
	return memcmp(a, b, sizeof(*a));
   25472:	2207      	movs	r2, #7
   25474:	4639      	mov	r1, r7
   25476:	1c68      	adds	r0, r5, #1
   25478:	eba5 0904 	sub.w	r9, r5, r4
   2547c:	f7fe fe40 	bl	24100 <memcmp>
   25480:	b918      	cbnz	r0, 2548a <ccc_find_cfg+0x2e>
			return &ccc->cfg[i];
   25482:	eb04 0009 	add.w	r0, r4, r9
}
   25486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2548a:	350a      	adds	r5, #10
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2548c:	42b5      	cmp	r5, r6
   2548e:	d1ed      	bne.n	2546c <ccc_find_cfg+0x10>
	return NULL;
   25490:	2000      	movs	r0, #0
   25492:	e7f8      	b.n	25486 <ccc_find_cfg+0x2a>

00025494 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25494:	2301      	movs	r3, #1
   25496:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2549a:	f3bf 8f5b 	dmb	ish
   2549e:	e850 3f00 	ldrex	r3, [r0]
   254a2:	430b      	orrs	r3, r1
   254a4:	e840 3200 	strex	r2, r3, [r0]
   254a8:	2a00      	cmp	r2, #0
   254aa:	d1f8      	bne.n	2549e <atomic_set_bit+0xa>
   254ac:	f3bf 8f5b 	dmb	ish
}
   254b0:	4770      	bx	lr

000254b2 <find_ccc_cfg>:
{
   254b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   254b4:	4605      	mov	r5, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   254b6:	1c4c      	adds	r4, r1, #1
   254b8:	f101 061f 	add.w	r6, r1, #31
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   254bc:	1e67      	subs	r7, r4, #1
		if (conn) {
   254be:	b16d      	cbz	r5, 254dc <find_ccc_cfg+0x2a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   254c0:	4622      	mov	r2, r4
   254c2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   254c6:	4628      	mov	r0, r5
   254c8:	f7ff fa99 	bl	249fe <bt_conn_is_peer_addr_le>
   254cc:	b918      	cbnz	r0, 254d6 <find_ccc_cfg+0x24>
   254ce:	340a      	adds	r4, #10
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   254d0:	42b4      	cmp	r4, r6
   254d2:	d1f3      	bne.n	254bc <find_ccc_cfg+0xa>
	return NULL;
   254d4:	2700      	movs	r7, #0
}
   254d6:	4638      	mov	r0, r7
   254d8:	b003      	add	sp, #12
   254da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   254dc:	2207      	movs	r2, #7
   254de:	4669      	mov	r1, sp
   254e0:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   254e2:	9500      	str	r5, [sp, #0]
   254e4:	f8cd 5003 	str.w	r5, [sp, #3]
   254e8:	f7fe fe0a 	bl	24100 <memcmp>
   254ec:	2800      	cmp	r0, #0
   254ee:	d1ee      	bne.n	254ce <find_ccc_cfg+0x1c>
   254f0:	e7f1      	b.n	254d6 <find_ccc_cfg+0x24>

000254f2 <sc_restore_rsp>:
{
   254f2:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   254f4:	f7e4 fc60 	bl	9db8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   254f8:	b140      	cbz	r0, 2550c <sc_restore_rsp+0x1a>
   254fa:	7a03      	ldrb	r3, [r0, #8]
   254fc:	07db      	lsls	r3, r3, #31
   254fe:	d505      	bpl.n	2550c <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   25500:	2100      	movs	r1, #0
   25502:	300c      	adds	r0, #12
}
   25504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   25508:	f7ff bfc4 	b.w	25494 <atomic_set_bit>
}
   2550c:	bd08      	pop	{r3, pc}

0002550e <read_appearance>:
{
   2550e:	b513      	push	{r0, r1, r4, lr}
   25510:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   25514:	4610      	mov	r0, r2
	if (offset > value_len) {
   25516:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   25518:	f04f 0200 	mov.w	r2, #0
   2551c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   25520:	d80d      	bhi.n	2553e <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   25522:	f1c1 0402 	rsb	r4, r1, #2
   25526:	429c      	cmp	r4, r3
   25528:	bfa8      	it	ge
   2552a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2552c:	f10d 0306 	add.w	r3, sp, #6
   25530:	4622      	mov	r2, r4
   25532:	4419      	add	r1, r3
   25534:	f7fe fe0b 	bl	2414e <memcpy>
}
   25538:	4620      	mov	r0, r4
   2553a:	b002      	add	sp, #8
   2553c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2553e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   25542:	e7f9      	b.n	25538 <read_appearance+0x2a>

00025544 <read_name>:
{
   25544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25548:	4698      	mov	r8, r3
   2554a:	4616      	mov	r6, r2
   2554c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	const char *name = bt_get_name();
   25550:	f7e1 fdb0 	bl	70b4 <bt_get_name>
   25554:	4607      	mov	r7, r0
				 strlen(name));
   25556:	f7fe fda8 	bl	240aa <strlen>
	if (offset > value_len) {
   2555a:	b283      	uxth	r3, r0
   2555c:	42ab      	cmp	r3, r5
   2555e:	d30c      	bcc.n	2557a <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   25560:	1b5c      	subs	r4, r3, r5
   25562:	4544      	cmp	r4, r8
   25564:	bfa8      	it	ge
   25566:	4644      	movge	r4, r8
   25568:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2556a:	4622      	mov	r2, r4
   2556c:	1979      	adds	r1, r7, r5
   2556e:	4630      	mov	r0, r6
   25570:	f7fe fded 	bl	2414e <memcpy>
}
   25574:	4620      	mov	r0, r4
   25576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2557a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2557e:	e7f9      	b.n	25574 <read_name+0x30>

00025580 <cf_read>:
{
   25580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25582:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   25584:	2300      	movs	r3, #0
{
   25586:	4616      	mov	r6, r2
   25588:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	uint8_t data[1] = {};
   2558c:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   25590:	f7e4 fc12 	bl	9db8 <find_cf_cfg>
	if (cfg) {
   25594:	b128      	cbz	r0, 255a2 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   25596:	f100 0108 	add.w	r1, r0, #8
   2559a:	2201      	movs	r2, #1
   2559c:	a801      	add	r0, sp, #4
   2559e:	f7fe fdd6 	bl	2414e <memcpy>
	if (offset > value_len) {
   255a2:	2d01      	cmp	r5, #1
   255a4:	d80d      	bhi.n	255c2 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   255a6:	f1c5 0401 	rsb	r4, r5, #1
   255aa:	42bc      	cmp	r4, r7
   255ac:	bfa8      	it	ge
   255ae:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   255b0:	ab01      	add	r3, sp, #4
   255b2:	4622      	mov	r2, r4
   255b4:	1959      	adds	r1, r3, r5
   255b6:	4630      	mov	r0, r6
   255b8:	f7fe fdc9 	bl	2414e <memcpy>
}
   255bc:	4620      	mov	r0, r4
   255be:	b003      	add	sp, #12
   255c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   255c2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   255c6:	e7f9      	b.n	255bc <cf_read+0x3c>

000255c8 <bt_gatt_attr_read_ccc>:
{
   255c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   255ca:	68c9      	ldr	r1, [r1, #12]
{
   255cc:	f8bd 5020 	ldrh.w	r5, [sp, #32]
   255d0:	4616      	mov	r6, r2
   255d2:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   255d4:	f7ff ff6d 	bl	254b2 <find_ccc_cfg>
	if (cfg) {
   255d8:	b100      	cbz	r0, 255dc <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   255da:	8900      	ldrh	r0, [r0, #8]
   255dc:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   255e0:	2d02      	cmp	r5, #2
   255e2:	d80e      	bhi.n	25602 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   255e4:	f1c5 0402 	rsb	r4, r5, #2
   255e8:	42bc      	cmp	r4, r7
   255ea:	bfa8      	it	ge
   255ec:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   255ee:	f10d 0306 	add.w	r3, sp, #6
   255f2:	4622      	mov	r2, r4
   255f4:	1959      	adds	r1, r3, r5
   255f6:	4630      	mov	r0, r6
   255f8:	f7fe fda9 	bl	2414e <memcpy>
}
   255fc:	4620      	mov	r0, r4
   255fe:	b003      	add	sp, #12
   25600:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25602:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   25606:	e7f9      	b.n	255fc <bt_gatt_attr_read_ccc+0x34>

00025608 <bt_gatt_attr_read_service>:
{
   25608:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   2560a:	68c9      	ldr	r1, [r1, #12]
{
   2560c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   25610:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   25612:	780a      	ldrb	r2, [r1, #0]
   25614:	b992      	cbnz	r2, 2563c <bt_gatt_attr_read_service+0x34>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   25616:	884a      	ldrh	r2, [r1, #2]
   25618:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2561c:	2d02      	cmp	r5, #2
   2561e:	d819      	bhi.n	25654 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   25620:	f1c5 0402 	rsb	r4, r5, #2
   25624:	429c      	cmp	r4, r3
   25626:	bfa8      	it	ge
   25628:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2562a:	f10d 0306 	add.w	r3, sp, #6
   2562e:	4622      	mov	r2, r4
   25630:	1959      	adds	r1, r3, r5
   25632:	f7fe fd8c 	bl	2414e <memcpy>
}
   25636:	4620      	mov	r0, r4
   25638:	b003      	add	sp, #12
   2563a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2563c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2563e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   25642:	d807      	bhi.n	25654 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   25644:	f1c5 0410 	rsb	r4, r5, #16
   25648:	429c      	cmp	r4, r3
   2564a:	bfa8      	it	ge
   2564c:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2564e:	4622      	mov	r2, r4
   25650:	4429      	add	r1, r5
   25652:	e7ee      	b.n	25632 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25654:	f06f 0406 	mvn.w	r4, #6
   25658:	e7ed      	b.n	25636 <bt_gatt_attr_read_service+0x2e>

0002565a <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2565a:	2a02      	cmp	r2, #2
{
   2565c:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2565e:	d108      	bne.n	25672 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   25660:	2300      	movs	r3, #0
   25662:	f100 0188 	add.w	r1, r0, #136	; 0x88
   25666:	461a      	mov	r2, r3
   25668:	7a00      	ldrb	r0, [r0, #8]
   2566a:	f7e4 faaf 	bl	9bcc <sc_save>
}
   2566e:	2002      	movs	r0, #2
   25670:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   25672:	f7e4 fd49 	bl	a108 <sc_clear>
   25676:	e7fa      	b.n	2566e <sc_ccc_cfg_write+0x14>

00025678 <bt_gatt_attr_value_handle>:
{
   25678:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2567a:	4604      	mov	r4, r0
   2567c:	b910      	cbnz	r0, 25684 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2567e:	2000      	movs	r0, #0
}
   25680:	b002      	add	sp, #8
   25682:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25684:	2300      	movs	r3, #0
   25686:	f88d 3004 	strb.w	r3, [sp, #4]
   2568a:	a901      	add	r1, sp, #4
   2568c:	f642 0303 	movw	r3, #10243	; 0x2803
   25690:	6800      	ldr	r0, [r0, #0]
   25692:	f8ad 3006 	strh.w	r3, [sp, #6]
   25696:	f7fe ffbd 	bl	24614 <bt_uuid_cmp>
   2569a:	2800      	cmp	r0, #0
   2569c:	d1ef      	bne.n	2567e <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2569e:	68e3      	ldr	r3, [r4, #12]
   256a0:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   256a2:	2800      	cmp	r0, #0
   256a4:	d1ec      	bne.n	25680 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   256a6:	4620      	mov	r0, r4
   256a8:	f7e4 fef4 	bl	a494 <bt_gatt_attr_get_handle>
   256ac:	3001      	adds	r0, #1
   256ae:	b280      	uxth	r0, r0
	return handle;
   256b0:	e7e6      	b.n	25680 <bt_gatt_attr_value_handle+0x8>

000256b2 <bt_gatt_attr_read_chrc>:
{
   256b2:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   256b4:	68ce      	ldr	r6, [r1, #12]
{
   256b6:	b087      	sub	sp, #28
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   256b8:	4608      	mov	r0, r1
{
   256ba:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   256bc:	79b3      	ldrb	r3, [r6, #6]
   256be:	f88d 3004 	strb.w	r3, [sp, #4]
{
   256c2:	4617      	mov	r7, r2
   256c4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   256c8:	f7ff ffd6 	bl	25678 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   256cc:	6831      	ldr	r1, [r6, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   256ce:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   256d2:	780b      	ldrb	r3, [r1, #0]
   256d4:	b99b      	cbnz	r3, 256fe <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   256d6:	884b      	ldrh	r3, [r1, #2]
   256d8:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   256dc:	2305      	movs	r3, #5
	if (offset > value_len) {
   256de:	42ab      	cmp	r3, r5
   256e0:	d315      	bcc.n	2570e <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   256e2:	1b5b      	subs	r3, r3, r5
   256e4:	42a3      	cmp	r3, r4
   256e6:	bfa8      	it	ge
   256e8:	4623      	movge	r3, r4
   256ea:	b29c      	uxth	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   256ec:	ab01      	add	r3, sp, #4
   256ee:	4622      	mov	r2, r4
   256f0:	1959      	adds	r1, r3, r5
   256f2:	4638      	mov	r0, r7
   256f4:	f7fe fd2b 	bl	2414e <memcpy>
}
   256f8:	4620      	mov	r0, r4
   256fa:	b007      	add	sp, #28
   256fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   256fe:	2210      	movs	r2, #16
   25700:	3101      	adds	r1, #1
   25702:	f10d 0007 	add.w	r0, sp, #7
   25706:	f7fe fd22 	bl	2414e <memcpy>
		value_len += 16U;
   2570a:	2313      	movs	r3, #19
   2570c:	e7e7      	b.n	256de <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2570e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   25712:	e7f1      	b.n	256f8 <bt_gatt_attr_read_chrc+0x46>

00025714 <bt_gatt_foreach_attr>:
{
   25714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   25716:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2571a:	2300      	movs	r3, #0
   2571c:	9300      	str	r3, [sp, #0]
   2571e:	461a      	mov	r2, r3
   25720:	f7e4 fefc 	bl	a51c <bt_gatt_foreach_attr_type>
}
   25724:	b005      	add	sp, #20
   25726:	f85d fb04 	ldr.w	pc, [sp], #4

0002572a <db_hash_process>:
	db_hash_gen(true);
   2572a:	2001      	movs	r0, #1
   2572c:	f7e4 bfac 	b.w	a688 <db_hash_gen>

00025730 <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   25730:	f7ff bd61 	b.w	251f6 <bt_att_get_mtu>

00025734 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   25734:	07d3      	lsls	r3, r2, #31
{
   25736:	b510      	push	{r4, lr}
   25738:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2573a:	d504      	bpl.n	25746 <bt_gatt_check_perm+0x12>
   2573c:	f014 0f15 	tst.w	r4, #21
   25740:	d017      	beq.n	25772 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25742:	684b      	ldr	r3, [r1, #4]
   25744:	b1ab      	cbz	r3, 25772 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   25746:	0793      	lsls	r3, r2, #30
   25748:	d504      	bpl.n	25754 <bt_gatt_check_perm+0x20>
   2574a:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   2574e:	d012      	beq.n	25776 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   25750:	688b      	ldr	r3, [r1, #8]
   25752:	b183      	cbz	r3, 25776 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   25754:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   25756:	f014 0f30 	tst.w	r4, #48	; 0x30
   2575a:	d104      	bne.n	25766 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2575c:	f014 000c 	ands.w	r0, r4, #12
   25760:	bf18      	it	ne
   25762:	200f      	movne	r0, #15
}
   25764:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   25766:	f7ff f93f 	bl	249e8 <bt_conn_get_security>
   2576a:	2802      	cmp	r0, #2
   2576c:	d8f6      	bhi.n	2575c <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   2576e:	2005      	movs	r0, #5
   25770:	e7f8      	b.n	25764 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   25772:	2002      	movs	r0, #2
   25774:	e7f6      	b.n	25764 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   25776:	2003      	movs	r0, #3
   25778:	e7f4      	b.n	25764 <bt_gatt_check_perm+0x30>

0002577a <bt_gatt_change_aware>:
{
   2577a:	b570      	push	{r4, r5, r6, lr}
   2577c:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   2577e:	f7e4 fb1b 	bl	9db8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25782:	b910      	cbnz	r0, 2578a <bt_gatt_change_aware+0x10>
		return true;
   25784:	2501      	movs	r5, #1
}
   25786:	4628      	mov	r0, r5
   25788:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2578a:	7a03      	ldrb	r3, [r0, #8]
   2578c:	07db      	lsls	r3, r3, #31
   2578e:	d5f9      	bpl.n	25784 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   25790:	f100 040c 	add.w	r4, r0, #12
   25794:	2100      	movs	r1, #0
   25796:	4620      	mov	r0, r4
   25798:	f7ff fe57 	bl	2544a <atomic_test_bit>
   2579c:	4606      	mov	r6, r0
   2579e:	2800      	cmp	r0, #0
   257a0:	d1f0      	bne.n	25784 <bt_gatt_change_aware+0xa>
	if (!req) {
   257a2:	2d00      	cmp	r5, #0
   257a4:	d0ef      	beq.n	25786 <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   257a6:	2101      	movs	r1, #1
   257a8:	4620      	mov	r0, r4
   257aa:	f7ff fe4e 	bl	2544a <atomic_test_bit>
   257ae:	4605      	mov	r5, r0
   257b0:	b148      	cbz	r0, 257c6 <bt_gatt_change_aware+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   257b2:	f06f 0102 	mvn.w	r1, #2
   257b6:	4620      	mov	r0, r4
   257b8:	f7ff fe1b 	bl	253f2 <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   257bc:	4631      	mov	r1, r6
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   257be:	4620      	mov	r0, r4
   257c0:	f7ff fe68 	bl	25494 <atomic_set_bit>
	return false;
   257c4:	e7df      	b.n	25786 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   257c6:	2101      	movs	r1, #1
   257c8:	e7f9      	b.n	257be <bt_gatt_change_aware+0x44>

000257ca <bt_smp_recv>:
{
   257ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   257cc:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   257ce:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   257d0:	f04f 32ff 	mov.w	r2, #4294967295
   257d4:	f04f 33ff 	mov.w	r3, #4294967295
   257d8:	4608      	mov	r0, r1
   257da:	f7ff f9cd 	bl	24b78 <bt_l2cap_create_pdu_timeout>
   257de:	f100 0608 	add.w	r6, r0, #8
   257e2:	4605      	mov	r5, r0
   257e4:	2101      	movs	r1, #1
   257e6:	4630      	mov	r0, r6
   257e8:	f7f7 f98e 	bl	1cb08 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   257ec:	2405      	movs	r4, #5
   257ee:	7004      	strb	r4, [r0, #0]
   257f0:	2101      	movs	r1, #1
   257f2:	4630      	mov	r0, r6
   257f4:	f7f7 f988 	bl	1cb08 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   257f8:	7004      	strb	r4, [r0, #0]
   257fa:	2400      	movs	r4, #0
   257fc:	9400      	str	r4, [sp, #0]
   257fe:	4623      	mov	r3, r4
   25800:	462a      	mov	r2, r5
   25802:	2106      	movs	r1, #6
   25804:	4638      	mov	r0, r7
   25806:	f7ff f9ba 	bl	24b7e <bt_l2cap_send_cb>
}
   2580a:	4620      	mov	r0, r4
   2580c:	b003      	add	sp, #12
   2580e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025810 <bt_smp_sign>:
   25810:	f06f 0022 	mvn.w	r0, #34	; 0x22
   25814:	4770      	bx	lr

00025816 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   25816:	2000      	movs	r0, #0
   25818:	4770      	bx	lr

0002581a <model_start>:
	if (mod->cb && mod->cb->start) {
   2581a:	6943      	ldr	r3, [r0, #20]
   2581c:	b113      	cbz	r3, 25824 <model_start+0xa>
   2581e:	685b      	ldr	r3, [r3, #4]
   25820:	b103      	cbz	r3, 25824 <model_start+0xa>
		mod->cb->start(mod);
   25822:	4718      	bx	r3
}
   25824:	4770      	bx	lr

00025826 <bt_mesh_is_provisioned>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
   25826:	f7e5 bc93 	b.w	b150 <atomic_test_bit.constprop.4>

0002582a <bt_mesh_init>:
{
   2582a:	b538      	push	{r3, r4, r5, lr}
   2582c:	4605      	mov	r5, r0
	err = bt_mesh_comp_register(comp);
   2582e:	4608      	mov	r0, r1
   25830:	f7ea f86c 	bl	f90c <bt_mesh_comp_register>
	if (err) {
   25834:	4604      	mov	r4, r0
   25836:	b9a0      	cbnz	r0, 25862 <bt_mesh_init+0x38>
		bt_mesh_proxy_init();
   25838:	f7ef ffe6 	bl	15808 <bt_mesh_proxy_init>
		err = bt_mesh_prov_init(prov);
   2583c:	4628      	mov	r0, r5
   2583e:	f7ed ffab 	bl	13798 <bt_mesh_prov_init>
		if (err) {
   25842:	4604      	mov	r4, r0
   25844:	b968      	cbnz	r0, 25862 <bt_mesh_init+0x38>
	bt_mesh_cfg_init();
   25846:	f7e5 fe4b 	bl	b4e0 <bt_mesh_cfg_init>
	bt_mesh_net_init();
   2584a:	f7e7 f819 	bl	c880 <bt_mesh_net_init>
	bt_mesh_trans_init();
   2584e:	f7e8 fb6d 	bl	df2c <bt_mesh_trans_init>
	bt_mesh_hb_init();
   25852:	f7e9 fba7 	bl	efa4 <bt_mesh_hb_init>
	bt_mesh_beacon_init();
   25856:	f7e6 f90b 	bl	ba70 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   2585a:	f7ec fb19 	bl	11e90 <bt_mesh_adv_init>
		bt_mesh_settings_init();
   2585e:	f7ec fc13 	bl	12088 <bt_mesh_settings_init>
}
   25862:	4620      	mov	r0, r4
   25864:	bd38      	pop	{r3, r4, r5, pc}

00025866 <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25866:	f3bf 8f5b 	dmb	ish
   2586a:	e850 3f00 	ldrex	r3, [r0]
   2586e:	ea43 0201 	orr.w	r2, r3, r1
   25872:	e840 2c00 	strex	ip, r2, [r0]
   25876:	f1bc 0f00 	cmp.w	ip, #0
   2587a:	d1f6      	bne.n	2586a <atomic_or+0x4>
   2587c:	f3bf 8f5b 	dmb	ish
}
   25880:	4618      	mov	r0, r3
   25882:	4770      	bx	lr

00025884 <bt_mesh_beacon_enabled>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
   25884:	2007      	movs	r0, #7
   25886:	f7e5 bd2f 	b.w	b2e8 <atomic_test_bit.constprop.7>

0002588a <bt_mesh_gatt_proxy_set>:
{
   2588a:	b510      	push	{r4, lr}
	err = feature_set(BT_MESH_GATT_PROXY, gatt_proxy);
   2588c:	4601      	mov	r1, r0
   2588e:	2008      	movs	r0, #8
   25890:	f7e5 fd38 	bl	b304 <feature_set>
	if (err) {
   25894:	4604      	mov	r4, r0
   25896:	b948      	cbnz	r0, 258ac <bt_mesh_gatt_proxy_set+0x22>
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_PROXY);
   25898:	2002      	movs	r0, #2
   2589a:	f7e9 fb77 	bl	ef8c <bt_mesh_hb_feature_changed>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   2589e:	4620      	mov	r0, r4
   258a0:	f7e5 fd22 	bl	b2e8 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   258a4:	b110      	cbz	r0, 258ac <bt_mesh_gatt_proxy_set+0x22>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   258a6:	2007      	movs	r0, #7
   258a8:	f7ec fb8e 	bl	11fc8 <bt_mesh_settings_store_schedule>
}
   258ac:	4620      	mov	r0, r4
   258ae:	bd10      	pop	{r4, pc}

000258b0 <bt_mesh_gatt_proxy_get>:
	return atomic_test_bit(bt_mesh.flags, feature_flag) ?
   258b0:	2008      	movs	r0, #8
   258b2:	f7e5 bd19 	b.w	b2e8 <atomic_test_bit.constprop.7>

000258b6 <bt_mesh_friend_set>:
{
   258b6:	b538      	push	{r3, r4, r5, lr}
	err = feature_set(BT_MESH_FRIEND, friendship);
   258b8:	4601      	mov	r1, r0
{
   258ba:	4605      	mov	r5, r0
	err = feature_set(BT_MESH_FRIEND, friendship);
   258bc:	2009      	movs	r0, #9
   258be:	f7e5 fd21 	bl	b304 <feature_set>
	if (err) {
   258c2:	4604      	mov	r4, r0
   258c4:	b960      	cbnz	r0, 258e0 <bt_mesh_friend_set+0x2a>
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_FRIEND);
   258c6:	2004      	movs	r0, #4
   258c8:	f7e9 fb60 	bl	ef8c <bt_mesh_hb_feature_changed>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   258cc:	4620      	mov	r0, r4
   258ce:	f7e5 fd0b 	bl	b2e8 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   258d2:	b110      	cbz	r0, 258da <bt_mesh_friend_set+0x24>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   258d4:	2007      	movs	r0, #7
   258d6:	f7ec fb77 	bl	11fc8 <bt_mesh_settings_store_schedule>
	if (friendship == BT_MESH_FEATURE_DISABLED) {
   258da:	b90d      	cbnz	r5, 258e0 <bt_mesh_friend_set+0x2a>
		bt_mesh_friends_clear();
   258dc:	f7ed f83c 	bl	12958 <bt_mesh_friends_clear>
}
   258e0:	4620      	mov	r0, r4
   258e2:	bd38      	pop	{r3, r4, r5, pc}

000258e4 <bt_mesh_friend_get>:
	return atomic_test_bit(bt_mesh.flags, feature_flag) ?
   258e4:	2009      	movs	r0, #9
   258e6:	f7e5 bcff 	b.w	b2e8 <atomic_test_bit.constprop.7>

000258ea <bt_mesh_relay_get>:
   258ea:	2006      	movs	r0, #6
   258ec:	f7e5 bcfc 	b.w	b2e8 <atomic_test_bit.constprop.7>

000258f0 <bt_mesh_fixed_group_match>:
	switch (addr) {
   258f0:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
   258f4:	38fc      	subs	r0, #252	; 0xfc
{
   258f6:	b508      	push	{r3, lr}
	switch (addr) {
   258f8:	2803      	cmp	r0, #3
   258fa:	d803      	bhi.n	25904 <bt_mesh_fixed_group_match+0x14>
   258fc:	e8df f000 	tbb	[pc, r0]
   25900:	100d0a04 	.word	0x100d0a04
		return false;
   25904:	2000      	movs	r0, #0
}
   25906:	bd08      	pop	{r3, pc}
		return (bt_mesh_gatt_proxy_get() == BT_MESH_FEATURE_ENABLED);
   25908:	f7ff ffd2 	bl	258b0 <bt_mesh_gatt_proxy_get>
		return (bt_mesh_friend_get() == BT_MESH_FEATURE_ENABLED);
   2590c:	1e43      	subs	r3, r0, #1
   2590e:	4258      	negs	r0, r3
   25910:	4158      	adcs	r0, r3
   25912:	e7f8      	b.n	25906 <bt_mesh_fixed_group_match+0x16>
   25914:	f7ff ffe6 	bl	258e4 <bt_mesh_friend_get>
   25918:	e7f8      	b.n	2590c <bt_mesh_fixed_group_match+0x1c>
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   2591a:	f7ff ffe6 	bl	258ea <bt_mesh_relay_get>
   2591e:	e7f5      	b.n	2590c <bt_mesh_fixed_group_match+0x1c>
		return true;
   25920:	2001      	movs	r0, #1
   25922:	e7f0      	b.n	25906 <bt_mesh_fixed_group_match+0x16>

00025924 <sub_update_beacon_observation>:
	sub->beacons_last = sub->beacons_cur;
   25924:	7943      	ldrb	r3, [r0, #5]
   25926:	7103      	strb	r3, [r0, #4]
	sub->beacons_cur = 0U;
   25928:	2300      	movs	r3, #0
   2592a:	7143      	strb	r3, [r0, #5]
}
   2592c:	4770      	bx	lr

0002592e <cache_check>:
{
   2592e:	b508      	push	{r3, lr}
	return !memcmp(sub->beacon_cache, beacon_data, 21);
   25930:	2215      	movs	r2, #21
   25932:	3006      	adds	r0, #6
   25934:	f7fe fbe4 	bl	24100 <memcmp>
}
   25938:	fab0 f080 	clz	r0, r0
   2593c:	0940      	lsrs	r0, r0, #5
   2593e:	bd08      	pop	{r3, pc}

00025940 <beacon_complete>:
{
   25940:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   25944:	460d      	mov	r5, r1
	return z_impl_k_uptime_ticks();
   25946:	f002 ff90 	bl	2886a <z_impl_k_uptime_ticks>
   2594a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2594e:	fba0 bc04 	umull	fp, ip, r0, r4
   25952:	fb04 cc01 	mla	ip, r4, r1, ip
   25956:	ea4f 32db 	mov.w	r2, fp, lsr #15
   2595a:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
	return (uint32_t)k_uptime_get();
   2595e:	602a      	str	r2, [r5, #0]
}
   25960:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

00025964 <subnet_evt>:
	if (evt != BT_MESH_KEY_DELETED) {
   25964:	2901      	cmp	r1, #1
   25966:	d001      	beq.n	2596c <subnet_evt+0x8>
		bt_mesh_beacon_update(sub);
   25968:	f7e6 b85a 	b.w	ba20 <bt_mesh_beacon_update>
}
   2596c:	4770      	bx	lr

0002596e <subnet_beacon_enable>:
	sub->beacons_last = 0U;
   2596e:	2200      	movs	r2, #0
   25970:	8082      	strh	r2, [r0, #4]
	bt_mesh_beacon_update(sub);
   25972:	f7e6 b855 	b.w	ba20 <bt_mesh_beacon_update>

00025976 <sys_get_be24>:
	return ((uint16_t)src[0] << 8) | src[1];
   25976:	7842      	ldrb	r2, [r0, #1]
   25978:	7883      	ldrb	r3, [r0, #2]
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   2597a:	7800      	ldrb	r0, [r0, #0]
   2597c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
}
   25980:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   25984:	4770      	bx	lr

00025986 <send_cb_finalize>:
void bt_mesh_net_clear(void);
void bt_mesh_net_settings_commit(void);

static inline void send_cb_finalize(const struct bt_mesh_send_cb *cb,
				    void *cb_data)
{
   25986:	b570      	push	{r4, r5, r6, lr}
   25988:	460d      	mov	r5, r1
	if (!cb) {
   2598a:	4604      	mov	r4, r0
   2598c:	b160      	cbz	r0, 259a8 <send_cb_finalize+0x22>
		return;
	}

	if (cb->start) {
   2598e:	6803      	ldr	r3, [r0, #0]
   25990:	b11b      	cbz	r3, 2599a <send_cb_finalize+0x14>
		cb->start(0, 0, cb_data);
   25992:	460a      	mov	r2, r1
   25994:	2100      	movs	r1, #0
   25996:	4608      	mov	r0, r1
   25998:	4798      	blx	r3
	}

	if (cb->end) {
   2599a:	6863      	ldr	r3, [r4, #4]
   2599c:	b123      	cbz	r3, 259a8 <send_cb_finalize+0x22>
		cb->end(0, cb_data);
   2599e:	4629      	mov	r1, r5
   259a0:	2000      	movs	r0, #0
	}
}
   259a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb->end(0, cb_data);
   259a6:	4718      	bx	r3
}
   259a8:	bd70      	pop	{r4, r5, r6, pc}

000259aa <net_encrypt>:
{
   259aa:	b570      	push	{r4, r5, r6, lr}
   259ac:	460d      	mov	r5, r1
   259ae:	4604      	mov	r4, r0
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   259b0:	4601      	mov	r1, r0
   259b2:	1c68      	adds	r0, r5, #1
{
   259b4:	4616      	mov	r6, r2
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   259b6:	f000 fb2d 	bl	26014 <bt_mesh_net_encrypt>
	if (err) {
   259ba:	b938      	cbnz	r0, 259cc <net_encrypt+0x22>
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   259bc:	f105 0211 	add.w	r2, r5, #17
   259c0:	4631      	mov	r1, r6
   259c2:	6820      	ldr	r0, [r4, #0]
}
   259c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   259c8:	f000 bafb 	b.w	25fc2 <bt_mesh_net_obfuscate>
}
   259cc:	bd70      	pop	{r4, r5, r6, pc}

000259ce <bt_mesh_net_clear>:
{
   259ce:	b508      	push	{r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_NET_PENDING);
   259d0:	2003      	movs	r0, #3
   259d2:	f7ec faf9 	bl	11fc8 <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
   259d6:	2004      	movs	r0, #4
   259d8:	f7ec faf6 	bl	11fc8 <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   259dc:	2007      	movs	r0, #7
}
   259de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   259e2:	f7ec baf1 	b.w	11fc8 <bt_mesh_settings_store_schedule>

000259e6 <subnet_del>:
{
   259e6:	b510      	push	{r4, lr}
   259e8:	4604      	mov	r4, r0
		update_subnet_settings(sub->net_idx, false);
   259ea:	2100      	movs	r1, #0
   259ec:	8b80      	ldrh	r0, [r0, #28]
   259ee:	f7e7 f8c5 	bl	cb7c <update_subnet_settings>
	bt_mesh_net_loopback_clear(sub->net_idx);
   259f2:	8ba0      	ldrh	r0, [r4, #28]
   259f4:	f7e6 fd30 	bl	c458 <bt_mesh_net_loopback_clear>
	subnet_evt(sub, BT_MESH_KEY_DELETED);
   259f8:	2101      	movs	r1, #1
   259fa:	4620      	mov	r0, r4
   259fc:	f7e6 fffe 	bl	c9fc <subnet_evt>
	(void)memset(sub, 0, sizeof(*sub));
   25a00:	22e0      	movs	r2, #224	; 0xe0
   25a02:	2100      	movs	r1, #0
   25a04:	4620      	mov	r0, r4
   25a06:	f7fe fbcc 	bl	241a2 <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   25a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25a0e:	83a3      	strh	r3, [r4, #28]
}
   25a10:	bd10      	pop	{r4, pc}

00025a12 <bt_mesh_subnet_store>:
	update_subnet_settings(net_idx, true);
   25a12:	2101      	movs	r1, #1
   25a14:	f7e7 b8b2 	b.w	cb7c <update_subnet_settings>

00025a18 <key_refresh>:
{
   25a18:	b538      	push	{r3, r4, r5, lr}
   25a1a:	4604      	mov	r4, r0
	switch (new_phase) {
   25a1c:	2903      	cmp	r1, #3
   25a1e:	d809      	bhi.n	25a34 <key_refresh+0x1c>
   25a20:	e8df f001 	tbb	[pc, r1]
   25a24:	110d0213 	.word	0x110d0213
		sub->kr_phase = new_phase;
   25a28:	2301      	movs	r3, #1
   25a2a:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_UPDATED);
   25a2c:	2102      	movs	r1, #2
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   25a2e:	4620      	mov	r0, r4
   25a30:	f7e6 ffe4 	bl	c9fc <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
   25a34:	8ba0      	ldrh	r0, [r4, #28]
}
   25a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_subnet_store(sub->net_idx);
   25a3a:	f7ff bfea 	b.w	25a12 <bt_mesh_subnet_store>
		sub->kr_phase = new_phase;
   25a3e:	2302      	movs	r3, #2
   25a40:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_SWAPPED);
   25a42:	2103      	movs	r1, #3
   25a44:	e7f3      	b.n	25a2e <key_refresh+0x16>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
   25a46:	7f83      	ldrb	r3, [r0, #30]
   25a48:	b163      	cbz	r3, 25a64 <key_refresh+0x4c>
		sub->kr_phase = BT_MESH_KR_NORMAL;
   25a4a:	2500      	movs	r5, #0
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   25a4c:	f104 0186 	add.w	r1, r4, #134	; 0x86
		sub->kr_phase = BT_MESH_KR_NORMAL;
   25a50:	77a5      	strb	r5, [r4, #30]
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   25a52:	225a      	movs	r2, #90	; 0x5a
   25a54:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   25a58:	f7fe fb79 	bl	2414e <memcpy>
		sub->keys[1].valid = 0U;
   25a5c:	f884 5086 	strb.w	r5, [r4, #134]	; 0x86
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   25a60:	2104      	movs	r1, #4
   25a62:	e7e4      	b.n	25a2e <key_refresh+0x16>
}
   25a64:	bd38      	pop	{r3, r4, r5, pc}

00025a66 <bt_mesh_kr_update>:
	if (!new_key) {
   25a66:	b16a      	cbz	r2, 25a84 <bt_mesh_kr_update+0x1e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
   25a68:	7f83      	ldrb	r3, [r0, #30]
   25a6a:	2b01      	cmp	r3, #1
   25a6c:	d105      	bne.n	25a7a <bt_mesh_kr_update+0x14>
		key_refresh(sub, (kr_flag ? BT_MESH_KR_PHASE_2 :
   25a6e:	2900      	cmp	r1, #0
   25a70:	bf14      	ite	ne
   25a72:	2102      	movne	r1, #2
   25a74:	2103      	moveq	r1, #3
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   25a76:	f7ff bfcf 	b.w	25a18 <key_refresh>
	} else if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !kr_flag) {
   25a7a:	2b02      	cmp	r3, #2
   25a7c:	d102      	bne.n	25a84 <bt_mesh_kr_update+0x1e>
   25a7e:	b909      	cbnz	r1, 25a84 <bt_mesh_kr_update+0x1e>
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   25a80:	2103      	movs	r1, #3
   25a82:	e7f8      	b.n	25a76 <bt_mesh_kr_update+0x10>
}
   25a84:	4770      	bx	lr

00025a86 <bt_mesh_subnet_exists>:
{
   25a86:	b508      	push	{r3, lr}
   25a88:	f7e7 f830 	bl	caec <bt_mesh_subnet_get.part.1>
}
   25a8c:	3000      	adds	r0, #0
   25a8e:	bf18      	it	ne
   25a90:	2001      	movne	r0, #1
   25a92:	bd08      	pop	{r3, pc}

00025a94 <bt_mesh_subnet_update>:
{
   25a94:	b538      	push	{r3, r4, r5, lr}
   25a96:	460c      	mov	r4, r1
   25a98:	f7e7 f828 	bl	caec <bt_mesh_subnet_get.part.1>
	if (!sub) {
   25a9c:	4605      	mov	r5, r0
   25a9e:	b330      	cbz	r0, 25aee <bt_mesh_subnet_update+0x5a>
	switch (sub->kr_phase) {
   25aa0:	7f83      	ldrb	r3, [r0, #30]
   25aa2:	2b03      	cmp	r3, #3
   25aa4:	d815      	bhi.n	25ad2 <bt_mesh_subnet_update+0x3e>
   25aa6:	e8df f003 	tbb	[pc, r3]
   25aaa:	0b02      	.short	0x0b02
   25aac:	1212      	.short	0x1212
		if (!memcmp(key, sub->keys[0].net, 16)) {
   25aae:	f100 012d 	add.w	r1, r0, #45	; 0x2d
   25ab2:	2210      	movs	r2, #16
   25ab4:	4620      	mov	r0, r4
   25ab6:	f7fe fb23 	bl	24100 <memcmp>
   25aba:	b950      	cbnz	r0, 25ad2 <bt_mesh_subnet_update+0x3e>
			return STATUS_IDX_ALREADY_STORED;
   25abc:	2006      	movs	r0, #6
   25abe:	e015      	b.n	25aec <bt_mesh_subnet_update+0x58>
		if (!memcmp(key, sub->keys[1].net, 16)) {
   25ac0:	f100 0187 	add.w	r1, r0, #135	; 0x87
   25ac4:	2210      	movs	r2, #16
   25ac6:	4620      	mov	r0, r4
   25ac8:	f7fe fb1a 	bl	24100 <memcmp>
   25acc:	b170      	cbz	r0, 25aec <bt_mesh_subnet_update+0x58>
		return STATUS_CANNOT_UPDATE;
   25ace:	200b      	movs	r0, #11
   25ad0:	e00c      	b.n	25aec <bt_mesh_subnet_update+0x58>
	err = net_keys_create(&sub->keys[1], key);
   25ad2:	4621      	mov	r1, r4
   25ad4:	f105 0086 	add.w	r0, r5, #134	; 0x86
   25ad8:	f7e6 ffb6 	bl	ca48 <net_keys_create>
	if (err) {
   25adc:	4604      	mov	r4, r0
   25ade:	2800      	cmp	r0, #0
   25ae0:	d1f5      	bne.n	25ace <bt_mesh_subnet_update+0x3a>
	key_refresh(sub, BT_MESH_KR_PHASE_1);
   25ae2:	4628      	mov	r0, r5
   25ae4:	2101      	movs	r1, #1
   25ae6:	f7ff ff97 	bl	25a18 <key_refresh>
	return STATUS_SUCCESS;
   25aea:	4620      	mov	r0, r4
}
   25aec:	bd38      	pop	{r3, r4, r5, pc}
		return STATUS_INVALID_NETKEY;
   25aee:	2004      	movs	r0, #4
   25af0:	e7fc      	b.n	25aec <bt_mesh_subnet_update+0x58>

00025af2 <bt_mesh_subnet_del>:
{
   25af2:	b508      	push	{r3, lr}
   25af4:	f7e6 fffa 	bl	caec <bt_mesh_subnet_get.part.1>
	if (!sub) {
   25af8:	b118      	cbz	r0, 25b02 <bt_mesh_subnet_del+0x10>
	subnet_del(sub);
   25afa:	f7ff ff74 	bl	259e6 <subnet_del>
	return STATUS_SUCCESS;
   25afe:	2000      	movs	r0, #0
}
   25b00:	bd08      	pop	{r3, pc}
		return STATUS_INVALID_NETKEY;
   25b02:	2004      	movs	r0, #4
   25b04:	e7fc      	b.n	25b00 <bt_mesh_subnet_del+0xe>

00025b06 <bt_mesh_friend_cred_create>:
{
   25b06:	b530      	push	{r4, r5, lr}
   25b08:	b087      	sub	sp, #28
	p[0] = 0x01;
   25b0a:	2501      	movs	r5, #1
{
   25b0c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	p[0] = 0x01;
   25b10:	f88d 500c 	strb.w	r5, [sp, #12]
	dst[1] = val;
   25b14:	f88d 100e 	strb.w	r1, [sp, #14]
	dst[0] = val >> 8;
   25b18:	0a0d      	lsrs	r5, r1, #8
	dst[1] = val;
   25b1a:	f88d 2010 	strb.w	r2, [sp, #16]
	dst[0] = val >> 8;
   25b1e:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   25b20:	f88d 3012 	strb.w	r3, [sp, #18]
	dst[0] = val >> 8;
   25b24:	0a1a      	lsrs	r2, r3, #8
   25b26:	0a23      	lsrs	r3, r4, #8
   25b28:	f88d 3013 	strb.w	r3, [sp, #19]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
   25b2c:	f100 0311 	add.w	r3, r0, #17
   25b30:	9301      	str	r3, [sp, #4]
   25b32:	1c43      	adds	r3, r0, #1
   25b34:	f88d 100f 	strb.w	r1, [sp, #15]
   25b38:	f88d 2011 	strb.w	r2, [sp, #17]
   25b3c:	9300      	str	r3, [sp, #0]
   25b3e:	2209      	movs	r2, #9
   25b40:	4603      	mov	r3, r0
   25b42:	a903      	add	r1, sp, #12
   25b44:	980b      	ldr	r0, [sp, #44]	; 0x2c
   25b46:	f88d 500d 	strb.w	r5, [sp, #13]
	dst[1] = val;
   25b4a:	f88d 4014 	strb.w	r4, [sp, #20]
   25b4e:	f7e9 faa3 	bl	f098 <bt_mesh_k2>
}
   25b52:	b007      	add	sp, #28
   25b54:	bd30      	pop	{r4, r5, pc}

00025b56 <bt_mesh_subnet_kr_phase_get>:
{
   25b56:	b508      	push	{r3, lr}
   25b58:	f7e6 ffc8 	bl	caec <bt_mesh_subnet_get.part.1>
	if (!sub) {
   25b5c:	b118      	cbz	r0, 25b66 <bt_mesh_subnet_kr_phase_get+0x10>
	*phase = sub->kr_phase;
   25b5e:	7f83      	ldrb	r3, [r0, #30]
	return STATUS_SUCCESS;
   25b60:	2000      	movs	r0, #0
   25b62:	700b      	strb	r3, [r1, #0]
}
   25b64:	bd08      	pop	{r3, pc}
		*phase = BT_MESH_KR_NORMAL;
   25b66:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   25b68:	2004      	movs	r0, #4
   25b6a:	e7fa      	b.n	25b62 <bt_mesh_subnet_kr_phase_get+0xc>

00025b6c <bt_mesh_subnet_node_id_set>:
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   25b6c:	2902      	cmp	r1, #2
{
   25b6e:	b508      	push	{r3, lr}
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   25b70:	d00c      	beq.n	25b8c <bt_mesh_subnet_node_id_set+0x20>
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
   25b72:	f7e6 ffbb 	bl	caec <bt_mesh_subnet_get.part.1>
	if (!sub) {
   25b76:	b158      	cbz	r0, 25b90 <bt_mesh_subnet_node_id_set+0x24>
	if (node_id) {
   25b78:	b129      	cbz	r1, 25b86 <bt_mesh_subnet_node_id_set+0x1a>
		bt_mesh_proxy_identity_start(sub);
   25b7a:	f7ef fb93 	bl	152a4 <bt_mesh_proxy_identity_start>
	bt_mesh_adv_update();
   25b7e:	f7ec f981 	bl	11e84 <bt_mesh_adv_update>
	return STATUS_SUCCESS;
   25b82:	2000      	movs	r0, #0
}
   25b84:	bd08      	pop	{r3, pc}
		bt_mesh_proxy_identity_stop(sub);
   25b86:	f001 f833 	bl	26bf0 <bt_mesh_proxy_identity_stop>
   25b8a:	e7f8      	b.n	25b7e <bt_mesh_subnet_node_id_set+0x12>
		return STATUS_CANNOT_SET;
   25b8c:	200f      	movs	r0, #15
   25b8e:	e7f9      	b.n	25b84 <bt_mesh_subnet_node_id_set+0x18>
		return STATUS_INVALID_NETKEY;
   25b90:	2004      	movs	r0, #4
   25b92:	e7f7      	b.n	25b84 <bt_mesh_subnet_node_id_set+0x18>

00025b94 <bt_mesh_subnet_node_id_get>:
{
   25b94:	b508      	push	{r3, lr}
   25b96:	f7e6 ffa9 	bl	caec <bt_mesh_subnet_get.part.1>
	if (!sub) {
   25b9a:	b118      	cbz	r0, 25ba4 <bt_mesh_subnet_node_id_get+0x10>
	*node_id = sub->node_id;
   25b9c:	7fc3      	ldrb	r3, [r0, #31]
	return STATUS_SUCCESS;
   25b9e:	2000      	movs	r0, #0
   25ba0:	700b      	strb	r3, [r1, #0]
}
   25ba2:	bd08      	pop	{r3, pc}
		*node_id = 0x00;
   25ba4:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   25ba6:	2004      	movs	r0, #4
   25ba8:	e7fa      	b.n	25ba0 <bt_mesh_subnet_node_id_get+0xc>

00025baa <bt_mesh_subnet_get>:
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
   25baa:	f7e6 bf9f 	b.w	caec <bt_mesh_subnet_get.part.1>

00025bae <app_key_del>:
{
   25bae:	b510      	push	{r4, lr}
		update_app_key_settings(app->app_idx, false);
   25bb0:	2100      	movs	r1, #0
{
   25bb2:	4604      	mov	r4, r0
		update_app_key_settings(app->app_idx, false);
   25bb4:	8840      	ldrh	r0, [r0, #2]
   25bb6:	f7e7 fa41 	bl	d03c <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_DELETED);
   25bba:	4620      	mov	r0, r4
   25bbc:	2101      	movs	r1, #1
   25bbe:	f7e7 f9dd 	bl	cf7c <app_key_evt>
	app->net_idx = BT_MESH_KEY_UNUSED;
   25bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25bc6:	8023      	strh	r3, [r4, #0]
	app->app_idx = BT_MESH_KEY_UNUSED;
   25bc8:	8063      	strh	r3, [r4, #2]
	(void)memset(app->keys, 0, sizeof(app->keys));
   25bca:	1d60      	adds	r0, r4, #5
   25bcc:	2222      	movs	r2, #34	; 0x22
   25bce:	2100      	movs	r1, #0
}
   25bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(app->keys, 0, sizeof(app->keys));
   25bd4:	f7fe bae5 	b.w	241a2 <memset>

00025bd8 <send_cb_finalize>:
{
   25bd8:	b570      	push	{r4, r5, r6, lr}
   25bda:	460d      	mov	r5, r1
	if (!cb) {
   25bdc:	4604      	mov	r4, r0
   25bde:	b160      	cbz	r0, 25bfa <send_cb_finalize+0x22>
	if (cb->start) {
   25be0:	6803      	ldr	r3, [r0, #0]
   25be2:	b11b      	cbz	r3, 25bec <send_cb_finalize+0x14>
		cb->start(0, 0, cb_data);
   25be4:	460a      	mov	r2, r1
   25be6:	2100      	movs	r1, #0
   25be8:	4608      	mov	r0, r1
   25bea:	4798      	blx	r3
	if (cb->end) {
   25bec:	6863      	ldr	r3, [r4, #4]
   25bee:	b123      	cbz	r3, 25bfa <send_cb_finalize+0x22>
		cb->end(0, cb_data);
   25bf0:	4629      	mov	r1, r5
   25bf2:	2000      	movs	r0, #0
}
   25bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb->end(0, cb_data);
   25bf8:	4718      	bx	r3
}
   25bfa:	bd70      	pop	{r4, r5, r6, pc}

00025bfc <seg_tx_buf_build>:
{
   25bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   25c00:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
   25c04:	f8b0 8030 	ldrh.w	r8, [r0, #48]	; 0x30
		return BT_MESH_APP_SEG_SDU_MAX;
   25c08:	f013 0f02 	tst.w	r3, #2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   25c0c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
		return BT_MESH_APP_SEG_SDU_MAX;
   25c0e:	bf14      	ite	ne
   25c10:	2608      	movne	r6, #8
   25c12:	260c      	moveq	r6, #12
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   25c14:	fb06 3311 	mls	r3, r6, r1, r3
{
   25c18:	4604      	mov	r4, r0
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   25c1a:	429e      	cmp	r6, r3
{
   25c1c:	460f      	mov	r7, r1
	net_buf_simple_add_u8(buf, tx->hdr);
   25c1e:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
   25c22:	4610      	mov	r0, r2
{
   25c24:	4615      	mov	r5, r2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   25c26:	bfa8      	it	ge
   25c28:	b2de      	uxtbge	r6, r3
	net_buf_simple_add_u8(buf, tx->hdr);
   25c2a:	f002 f9ac 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   25c2e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
   25c32:	f3c8 080c 	ubfx	r8, r8, #0, #13
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   25c36:	f3c3 0380 	ubfx	r3, r3, #2, #1
   25c3a:	ea4f 1198 	mov.w	r1, r8, lsr #6
   25c3e:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
   25c42:	4628      	mov	r0, r5
   25c44:	f002 f99f 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
   25c48:	08f9      	lsrs	r1, r7, #3
   25c4a:	ea41 0188 	orr.w	r1, r1, r8, lsl #2
   25c4e:	b2c9      	uxtb	r1, r1
   25c50:	4628      	mov	r0, r5
   25c52:	f002 f998 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
   25c56:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   25c5a:	eb04 0487 	add.w	r4, r4, r7, lsl #2
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
   25c5e:	ea41 1147 	orr.w	r1, r1, r7, lsl #5
   25c62:	b2c9      	uxtb	r1, r1
   25c64:	4628      	mov	r0, r5
   25c66:	f002 f98e 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   25c6a:	4632      	mov	r2, r6
   25c6c:	6861      	ldr	r1, [r4, #4]
   25c6e:	4628      	mov	r0, r5
}
   25c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   25c74:	f002 b97b 	b.w	27f6e <net_buf_simple_add_mem>

00025c78 <ack_timeout>:
{
   25c78:	b538      	push	{r3, r4, r5, lr}
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   25c7a:	f890 4020 	ldrb.w	r4, [r0, #32]
   25c7e:	2cff      	cmp	r4, #255	; 0xff
{
   25c80:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   25c82:	d102      	bne.n	25c8a <ack_timeout+0x12>
		ttl = bt_mesh_default_ttl_get();
   25c84:	f7e5 fbb0 	bl	b3e8 <bt_mesh_default_ttl_get>
   25c88:	4604      	mov	r4, r0
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   25c8a:	6a68      	ldr	r0, [r5, #36]	; 0x24
   25c8c:	f7da fa50 	bl	130 <__popcountsi2>
   25c90:	7feb      	ldrb	r3, [r5, #31]
   25c92:	f003 031f 	and.w	r3, r3, #31
   25c96:	1a18      	subs	r0, r3, r0
   25c98:	2364      	movs	r3, #100	; 0x64
   25c9a:	fb00 3303 	mla	r3, r0, r3, r3
	to = 150 + (ttl * 50U);
   25c9e:	2296      	movs	r2, #150	; 0x96
   25ca0:	2032      	movs	r0, #50	; 0x32
   25ca2:	fb10 2004 	smlabb	r0, r0, r4, r2
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   25ca6:	4418      	add	r0, r3
}
   25ca8:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   25cac:	bfb8      	it	lt
   25cae:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   25cb2:	bd38      	pop	{r3, r4, r5, pc}

00025cb4 <seg_rx_assemble>:
{
   25cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->data = buf->__buf;
   25cb8:	688b      	ldr	r3, [r1, #8]
   25cba:	600b      	str	r3, [r1, #0]
	buf->len  = 0U;
   25cbc:	2400      	movs	r4, #0
   25cbe:	4606      	mov	r6, r0
   25cc0:	460d      	mov	r5, r1
   25cc2:	4617      	mov	r7, r2
   25cc4:	808c      	strh	r4, [r1, #4]
	for (i = 0; i <= rx->seg_n; i++) {
   25cc6:	f100 0804 	add.w	r8, r0, #4
				       MIN(seg_len(rx->ctl),
   25cca:	7ff3      	ldrb	r3, [r6, #31]
		net_buf_simple_add_mem(buf, rx->seg[i],
   25ccc:	f858 1b04 	ldr.w	r1, [r8], #4
		return BT_MESH_APP_SEG_SDU_MAX;
   25cd0:	f013 0f20 	tst.w	r3, #32
				       MIN(seg_len(rx->ctl),
   25cd4:	8bb3      	ldrh	r3, [r6, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
   25cd6:	bf14      	ite	ne
   25cd8:	2208      	movne	r2, #8
   25cda:	220c      	moveq	r2, #12
				       MIN(seg_len(rx->ctl),
   25cdc:	fb04 3312 	mls	r3, r4, r2, r3
		net_buf_simple_add_mem(buf, rx->seg[i],
   25ce0:	429a      	cmp	r2, r3
   25ce2:	bfa8      	it	ge
   25ce4:	461a      	movge	r2, r3
   25ce6:	4628      	mov	r0, r5
   25ce8:	f002 f941 	bl	27f6e <net_buf_simple_add_mem>
	for (i = 0; i <= rx->seg_n; i++) {
   25cec:	7ff3      	ldrb	r3, [r6, #31]
   25cee:	3401      	adds	r4, #1
   25cf0:	461a      	mov	r2, r3
   25cf2:	f003 031f 	and.w	r3, r3, #31
   25cf6:	42a3      	cmp	r3, r4
   25cf8:	dae7      	bge.n	25cca <seg_rx_assemble+0x16>
	if (!rx->ctl) {
   25cfa:	0693      	lsls	r3, r2, #26
   25cfc:	d407      	bmi.n	25d0e <seg_rx_assemble+0x5a>
		buf->len -= APP_MIC_LEN(aszmic);
   25cfe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   25d02:	2f00      	cmp	r7, #0
   25d04:	bf14      	ite	ne
   25d06:	2208      	movne	r2, #8
   25d08:	2204      	moveq	r2, #4
   25d0a:	1a9b      	subs	r3, r3, r2
   25d0c:	80ab      	strh	r3, [r5, #4]
}
   25d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025d12 <sdu_try_decrypt>:
	if (ctx->seg) {
   25d12:	69d0      	ldr	r0, [r2, #28]
{
   25d14:	b570      	push	{r4, r5, r6, lr}
   25d16:	460d      	mov	r5, r1
   25d18:	4614      	mov	r4, r2
	if (ctx->seg) {
   25d1a:	b118      	cbz	r0, 25d24 <sdu_try_decrypt+0x12>
		seg_rx_assemble(ctx->seg, ctx->buf, ctx->crypto.aszmic);
   25d1c:	7852      	ldrb	r2, [r2, #1]
   25d1e:	6961      	ldr	r1, [r4, #20]
   25d20:	f7ff ffc8 	bl	25cb4 <seg_rx_assemble>
	net_buf_simple_reset(ctx->sdu);
   25d24:	69a3      	ldr	r3, [r4, #24]
   25d26:	2200      	movs	r2, #0
   25d28:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   25d2a:	689a      	ldr	r2, [r3, #8]
   25d2c:	601a      	str	r2, [r3, #0]
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   25d2e:	4621      	mov	r1, r4
   25d30:	6962      	ldr	r2, [r4, #20]
   25d32:	4628      	mov	r0, r5
}
   25d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   25d38:	f000 ba37 	b.w	261aa <bt_mesh_app_decrypt>

00025d3c <schedule_retransmit>:
{
   25d3c:	b570      	push	{r4, r5, r6, lr}
	if (!tx->nack_count) {
   25d3e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   25d42:	2b00      	cmp	r3, #0
   25d44:	d039      	beq.n	25dba <schedule_retransmit+0x7e>
	if (--tx->seg_pending || tx->sending) {
   25d46:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
   25d4a:	3b01      	subs	r3, #1
   25d4c:	b2db      	uxtb	r3, r3
   25d4e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   25d52:	bb93      	cbnz	r3, 25dba <schedule_retransmit+0x7e>
   25d54:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   25d58:	06db      	lsls	r3, r3, #27
   25d5a:	d42e      	bmi.n	25dba <schedule_retransmit+0x7e>
	k_delayed_work_submit(&tx->retransmit,
   25d5c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
   25d60:	f100 0450 	add.w	r4, r0, #80	; 0x50
   25d64:	b133      	cbz	r3, 25d74 <schedule_retransmit+0x38>
   25d66:	2200      	movs	r2, #0
   25d68:	2300      	movs	r3, #0
   25d6a:	4620      	mov	r0, r4
}
   25d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit(&tx->retransmit,
   25d70:	f7e7 bbbe 	b.w	d4f0 <k_delayed_work_submit>
					  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
   25d74:	f9b0 303a 	ldrsh.w	r3, [r0, #58]	; 0x3a
   25d78:	2b00      	cmp	r3, #0
   25d7a:	bfc1      	itttt	gt
   25d7c:	f890 1044 	ldrbgt.w	r1, [r0, #68]	; 0x44
   25d80:	2232      	movgt	r2, #50	; 0x32
   25d82:	f44f 73c8 	movgt.w	r3, #400	; 0x190
   25d86:	fb12 3201 	smlabbgt	r2, r2, r1, r3
   25d8a:	bfce      	itee	gt
   25d8c:	17d3      	asrgt	r3, r2, #31
   25d8e:	2232      	movle	r2, #50	; 0x32
   25d90:	2300      	movle	r3, #0
   25d92:	03d9      	lsls	r1, r3, #15
   25d94:	03d0      	lsls	r0, r2, #15
   25d96:	f240 35e7 	movw	r5, #999	; 0x3e7
   25d9a:	1940      	adds	r0, r0, r5
   25d9c:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
   25da0:	f04f 0500 	mov.w	r5, #0
   25da4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25da8:	f04f 0300 	mov.w	r3, #0
   25dac:	eb45 0101 	adc.w	r1, r5, r1
   25db0:	f7da f9a6 	bl	100 <__aeabi_uldivmod>
   25db4:	4602      	mov	r2, r0
   25db6:	460b      	mov	r3, r1
   25db8:	e7d7      	b.n	25d6a <schedule_retransmit+0x2e>
}
   25dba:	bd70      	pop	{r4, r5, r6, pc}

00025dbc <seg_sent>:
	schedule_retransmit(tx);
   25dbc:	4608      	mov	r0, r1
   25dbe:	f7ff bfbd 	b.w	25d3c <schedule_retransmit>

00025dc2 <seg_send_start>:
{
   25dc2:	b538      	push	{r3, r4, r5, lr}
	if (!tx->started && tx->cb && tx->cb->start) {
   25dc4:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
   25dc8:	071b      	lsls	r3, r3, #28
{
   25dca:	460d      	mov	r5, r1
   25dcc:	4614      	mov	r4, r2
	if (!tx->started && tx->cb && tx->cb->start) {
   25dce:	d40b      	bmi.n	25de8 <seg_send_start+0x26>
   25dd0:	6c93      	ldr	r3, [r2, #72]	; 0x48
   25dd2:	b14b      	cbz	r3, 25de8 <seg_send_start+0x26>
   25dd4:	681b      	ldr	r3, [r3, #0]
   25dd6:	b13b      	cbz	r3, 25de8 <seg_send_start+0x26>
		tx->cb->start(duration, err, tx->cb_data);
   25dd8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   25dda:	4798      	blx	r3
		tx->started = 1U;
   25ddc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   25de0:	f043 0308 	orr.w	r3, r3, #8
   25de4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (err) {
   25de8:	b125      	cbz	r5, 25df4 <seg_send_start+0x32>
		schedule_retransmit(tx);
   25dea:	4620      	mov	r0, r4
}
   25dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		schedule_retransmit(tx);
   25df0:	f7ff bfa4 	b.w	25d3c <schedule_retransmit>
}
   25df4:	bd38      	pop	{r3, r4, r5, pc}

00025df6 <seg_retransmit>:
	seg_tx_send_unacked(tx);
   25df6:	3850      	subs	r0, #80	; 0x50
   25df8:	f7e7 bc92 	b.w	d720 <seg_tx_send_unacked>

00025dfc <send_ack>:
{
   25dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   25dfe:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   25e00:	8b87      	ldrh	r7, [r0, #28]
{
   25e02:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
   25e06:	f8ad 7010 	strh.w	r7, [sp, #16]
{
   25e0a:	460e      	mov	r6, r1
	struct bt_mesh_msg_ctx ctx = {
   25e0c:	2100      	movs	r1, #0
   25e0e:	f8ad 101a 	strh.w	r1, [sp, #26]
   25e12:	f64f 77ff 	movw	r7, #65535	; 0xffff
   25e16:	f88d 301b 	strb.w	r3, [sp, #27]
	struct bt_mesh_net_tx tx = {
   25e1a:	ab04      	add	r3, sp, #16
{
   25e1c:	9d11      	ldr	r5, [sp, #68]	; 0x44
	struct bt_mesh_msg_ctx ctx = {
   25e1e:	f8cd 1016 	str.w	r1, [sp, #22]
   25e22:	f8ad 7012 	strh.w	r7, [sp, #18]
   25e26:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
   25e2a:	9109      	str	r1, [sp, #36]	; 0x24
   25e2c:	9007      	str	r0, [sp, #28]
   25e2e:	9308      	str	r3, [sp, #32]
   25e30:	b33c      	cbz	r4, 25e82 <send_ack+0x86>
		.src = obo ? bt_mesh_primary_addr() : src,
   25e32:	f7e9 fd9d 	bl	f970 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   25e36:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   25e3a:	f7e5 faef 	bl	b41c <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   25e3e:	b236      	sxth	r6, r6
   25e40:	2e00      	cmp	r6, #0
	struct bt_mesh_net_tx tx = {
   25e42:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   25e46:	dd1e      	ble.n	25e86 <send_ack+0x8a>
	uint16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
   25e48:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25e4a:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
   25e4c:	03e4      	lsls	r4, r4, #15
   25e4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
   25e52:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	sys_put_be16(val >> 16, dst);
   25e56:	0c2b      	lsrs	r3, r5, #16
	dst[0] = val >> 8;
   25e58:	0a1a      	lsrs	r2, r3, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
   25e5a:	2100      	movs	r1, #0
   25e5c:	ba64      	rev16	r4, r4
   25e5e:	f88d 200a 	strb.w	r2, [sp, #10]
	dst[1] = val;
   25e62:	f88d 300b 	strb.w	r3, [sp, #11]
	dst[0] = val >> 8;
   25e66:	ba6d      	rev16	r5, r5
   25e68:	e9cd 1100 	strd	r1, r1, [sp]
   25e6c:	2306      	movs	r3, #6
   25e6e:	aa02      	add	r2, sp, #8
   25e70:	a807      	add	r0, sp, #28
   25e72:	f8ad 4008 	strh.w	r4, [sp, #8]
   25e76:	f8ad 500c 	strh.w	r5, [sp, #12]
   25e7a:	f7e7 ffa1 	bl	ddc0 <bt_mesh_ctl_send>
}
   25e7e:	b00b      	add	sp, #44	; 0x2c
   25e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
   25e82:	4630      	mov	r0, r6
   25e84:	e7d7      	b.n	25e36 <send_ack+0x3a>
		return 0;
   25e86:	2000      	movs	r0, #0
   25e88:	e7f9      	b.n	25e7e <send_ack+0x82>

00025e8a <bt_mesh_rpl_update>:
	rpl->src = rx->ctx.addr;
   25e8a:	890b      	ldrh	r3, [r1, #8]
   25e8c:	8003      	strh	r3, [r0, #0]
	rpl->seq = rx->seq;
   25e8e:	690b      	ldr	r3, [r1, #16]
   25e90:	6043      	str	r3, [r0, #4]
	rpl->old_iv = rx->old_iv;
   25e92:	7d0b      	ldrb	r3, [r1, #20]
   25e94:	f3c3 0300 	ubfx	r3, r3, #0, #1
   25e98:	7083      	strb	r3, [r0, #2]
	entry->store = true;
   25e9a:	2301      	movs	r3, #1
   25e9c:	70c3      	strb	r3, [r0, #3]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   25e9e:	2000      	movs	r0, #0
   25ea0:	f7ec b892 	b.w	11fc8 <bt_mesh_settings_store_schedule>

00025ea4 <bt_mesh_rpl_clear>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   25ea4:	2000      	movs	r0, #0
   25ea6:	f7ec b88f 	b.w	11fc8 <bt_mesh_settings_store_schedule>

00025eaa <sub_end>:
	notify_sub_end();
   25eaa:	f7e8 be29 	b.w	eb00 <notify_sub_end>

00025eae <hb_publish_start_cb>:
	if (err) {
   25eae:	4608      	mov	r0, r1
   25eb0:	b111      	cbz	r1, 25eb8 <hb_publish_start_cb+0xa>
		hb_publish_end_cb(err, cb_data);
   25eb2:	4611      	mov	r1, r2
   25eb4:	f7e8 be50 	b.w	eb58 <hb_publish_end_cb>
}
   25eb8:	4770      	bx	lr

00025eba <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   25eba:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   25ebc:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   25ebe:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   25ec0:	f3c0 2307 	ubfx	r3, r0, #8, #8
   25ec4:	700a      	strb	r2, [r1, #0]
   25ec6:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   25ec8:	70c8      	strb	r0, [r1, #3]
}
   25eca:	4770      	bx	lr

00025ecc <create_app_nonce>:
{
   25ecc:	b538      	push	{r3, r4, r5, lr}
	if (ctx->dev_key) {
   25ece:	780b      	ldrb	r3, [r1, #0]
{
   25ed0:	460c      	mov	r4, r1
	if (ctx->dev_key) {
   25ed2:	2b00      	cmp	r3, #0
   25ed4:	4601      	mov	r1, r0
		nonce[0] = 0x01;
   25ed6:	bf14      	ite	ne
   25ed8:	2302      	movne	r3, #2
   25eda:	2301      	moveq	r3, #1
   25edc:	f801 3b01 	strb.w	r3, [r1], #1
{
   25ee0:	4605      	mov	r5, r0
	sys_put_be32((ctx->seq_num | ((uint32_t)ctx->aszmic << 31)), &nonce[1]);
   25ee2:	68a3      	ldr	r3, [r4, #8]
   25ee4:	7860      	ldrb	r0, [r4, #1]
   25ee6:	ea43 70c0 	orr.w	r0, r3, r0, lsl #31
   25eea:	f7ff ffe6 	bl	25eba <sys_put_be32>
	sys_put_be16(ctx->src, &nonce[5]);
   25eee:	8863      	ldrh	r3, [r4, #2]
	dst[1] = val;
   25ef0:	71ab      	strb	r3, [r5, #6]
	dst[0] = val >> 8;
   25ef2:	0a1a      	lsrs	r2, r3, #8
   25ef4:	716a      	strb	r2, [r5, #5]
	sys_put_be16(ctx->dst, &nonce[7]);
   25ef6:	88a3      	ldrh	r3, [r4, #4]
	dst[1] = val;
   25ef8:	722b      	strb	r3, [r5, #8]
	dst[0] = val >> 8;
   25efa:	0a1a      	lsrs	r2, r3, #8
   25efc:	71ea      	strb	r2, [r5, #7]
	sys_put_be32(ctx->iv_index, &nonce[9]);
   25efe:	f105 0109 	add.w	r1, r5, #9
   25f02:	68e0      	ldr	r0, [r4, #12]
}
   25f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_put_be32(ctx->iv_index, &nonce[9]);
   25f08:	f7ff bfd7 	b.w	25eba <sys_put_be32>

00025f0c <bt_mesh_aes_cmac>:
{
   25f0c:	b570      	push	{r4, r5, r6, lr}
   25f0e:	b0c2      	sub	sp, #264	; 0x108
   25f10:	460d      	mov	r5, r1
   25f12:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   25f14:	4601      	mov	r1, r0
   25f16:	aa16      	add	r2, sp, #88	; 0x58
   25f18:	4668      	mov	r0, sp
{
   25f1a:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   25f1c:	f7fd ff6c 	bl	23df8 <tc_cmac_setup>
   25f20:	b130      	cbz	r0, 25f30 <bt_mesh_aes_cmac+0x24>
   25f22:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   25f24:	b944      	cbnz	r4, 25f38 <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   25f26:	4669      	mov	r1, sp
   25f28:	4630      	mov	r0, r6
   25f2a:	f7fd fffa 	bl	23f22 <tc_cmac_final>
   25f2e:	b968      	cbnz	r0, 25f4c <bt_mesh_aes_cmac+0x40>
		return -EIO;
   25f30:	f06f 0004 	mvn.w	r0, #4
}
   25f34:	b042      	add	sp, #264	; 0x108
   25f36:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   25f38:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   25f3c:	4668      	mov	r0, sp
   25f3e:	f7fd ff86 	bl	23e4e <tc_cmac_update>
   25f42:	3508      	adds	r5, #8
   25f44:	2800      	cmp	r0, #0
   25f46:	d0f3      	beq.n	25f30 <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   25f48:	3c01      	subs	r4, #1
   25f4a:	e7eb      	b.n	25f24 <bt_mesh_aes_cmac+0x18>
	return 0;
   25f4c:	4620      	mov	r0, r4
   25f4e:	e7f1      	b.n	25f34 <bt_mesh_aes_cmac+0x28>

00025f50 <bt_mesh_aes_cmac_one>:
{
   25f50:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   25f52:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   25f56:	2201      	movs	r2, #1
   25f58:	4669      	mov	r1, sp
   25f5a:	f7ff ffd7 	bl	25f0c <bt_mesh_aes_cmac>
}
   25f5e:	b003      	add	sp, #12
   25f60:	f85d fb04 	ldr.w	pc, [sp], #4

00025f64 <bt_mesh_s1>:
{
   25f64:	b530      	push	{r4, r5, lr}
   25f66:	b085      	sub	sp, #20
   25f68:	4604      	mov	r4, r0
   25f6a:	460d      	mov	r5, r1
	const uint8_t zero[16] = { 0 };
   25f6c:	2210      	movs	r2, #16
   25f6e:	2100      	movs	r1, #0
   25f70:	4668      	mov	r0, sp
   25f72:	f7fe f916 	bl	241a2 <memset>
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   25f76:	4620      	mov	r0, r4
   25f78:	f7fe f897 	bl	240aa <strlen>
   25f7c:	462b      	mov	r3, r5
   25f7e:	4602      	mov	r2, r0
   25f80:	4621      	mov	r1, r4
   25f82:	4668      	mov	r0, sp
   25f84:	f7ff ffe4 	bl	25f50 <bt_mesh_aes_cmac_one>
}
   25f88:	3000      	adds	r0, #0
   25f8a:	bf18      	it	ne
   25f8c:	2001      	movne	r0, #1
   25f8e:	b005      	add	sp, #20
   25f90:	bd30      	pop	{r4, r5, pc}

00025f92 <bt_mesh_k1>:
{
   25f92:	b570      	push	{r4, r5, r6, lr}
   25f94:	9d04      	ldr	r5, [sp, #16]
   25f96:	4616      	mov	r6, r2
   25f98:	461c      	mov	r4, r3
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   25f9a:	460a      	mov	r2, r1
   25f9c:	462b      	mov	r3, r5
   25f9e:	4601      	mov	r1, r0
   25fa0:	4630      	mov	r0, r6
   25fa2:	f7ff ffd5 	bl	25f50 <bt_mesh_aes_cmac_one>
	if (err < 0) {
   25fa6:	2800      	cmp	r0, #0
   25fa8:	db0a      	blt.n	25fc0 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   25faa:	4620      	mov	r0, r4
   25fac:	f7fe f87d 	bl	240aa <strlen>
   25fb0:	462b      	mov	r3, r5
   25fb2:	4602      	mov	r2, r0
   25fb4:	4621      	mov	r1, r4
   25fb6:	4628      	mov	r0, r5
}
   25fb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   25fbc:	f7ff bfc8 	b.w	25f50 <bt_mesh_aes_cmac_one>
}
   25fc0:	bd70      	pop	{r4, r5, r6, pc}

00025fc2 <bt_mesh_net_obfuscate>:
{
   25fc2:	b570      	push	{r4, r5, r6, lr}
   25fc4:	b088      	sub	sp, #32
   25fc6:	4604      	mov	r4, r0
   25fc8:	460e      	mov	r6, r1
   25fca:	4615      	mov	r5, r2
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   25fcc:	2100      	movs	r1, #0
   25fce:	2210      	movs	r2, #16
   25fd0:	4668      	mov	r0, sp
   25fd2:	f7fe f8e6 	bl	241a2 <memset>
	sys_put_be32(iv_index, &priv_rand[5]);
   25fd6:	f10d 0105 	add.w	r1, sp, #5
   25fda:	4630      	mov	r0, r6
   25fdc:	f7ff ff6d 	bl	25eba <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
   25fe0:	2207      	movs	r2, #7
   25fe2:	18a1      	adds	r1, r4, r2
   25fe4:	f10d 0009 	add.w	r0, sp, #9
   25fe8:	f7fe f8b1 	bl	2414e <memcpy>
	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
   25fec:	aa04      	add	r2, sp, #16
   25fee:	4669      	mov	r1, sp
   25ff0:	4628      	mov	r0, r5
   25ff2:	f001 f992 	bl	2731a <bt_encrypt_be>
	if (err) {
   25ff6:	b958      	cbnz	r0, 26010 <bt_mesh_net_obfuscate+0x4e>
   25ff8:	4623      	mov	r3, r4
   25ffa:	aa04      	add	r2, sp, #16
   25ffc:	3406      	adds	r4, #6
		pdu[1 + i] ^= tmp[i];
   25ffe:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   26002:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
   26006:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
   26008:	ea81 0105 	eor.w	r1, r1, r5
   2600c:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
   2600e:	d1f6      	bne.n	25ffe <bt_mesh_net_obfuscate+0x3c>
}
   26010:	b008      	add	sp, #32
   26012:	bd70      	pop	{r4, r5, r6, pc}

00026014 <bt_mesh_net_encrypt>:
{
   26014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26018:	460c      	mov	r4, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2601a:	6809      	ldr	r1, [r1, #0]
   2601c:	f891 9001 	ldrb.w	r9, [r1, #1]
   26020:	f891 8002 	ldrb.w	r8, [r1, #2]
   26024:	f891 e003 	ldrb.w	lr, [r1, #3]
   26028:	f891 c004 	ldrb.w	ip, [r1, #4]
   2602c:	794f      	ldrb	r7, [r1, #5]
   2602e:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   26032:	4605      	mov	r5, r0
   26034:	b089      	sub	sp, #36	; 0x24
   26036:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   26038:	bf14      	ite	ne
   2603a:	2608      	movne	r6, #8
   2603c:	2604      	moveq	r6, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   2603e:	798a      	ldrb	r2, [r1, #6]
   26040:	b363      	cbz	r3, 2609c <bt_mesh_net_encrypt+0x88>
	nonce[0] = 0x03;
   26042:	2303      	movs	r3, #3
   26044:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   26048:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2604c:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   26050:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   26054:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   26058:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   2605c:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   2605e:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   26062:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   26066:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   2606a:	f7ff ff26 	bl	25eba <sys_put_be32>
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2606e:	6822      	ldr	r2, [r4, #0]
   26070:	88a3      	ldrh	r3, [r4, #4]
   26072:	3207      	adds	r2, #7
   26074:	2100      	movs	r1, #0
   26076:	e9cd 1100 	strd	r1, r1, [sp]
   2607a:	4628      	mov	r0, r5
   2607c:	e9cd 2602 	strd	r2, r6, [sp, #8]
   26080:	3b07      	subs	r3, #7
   26082:	a904      	add	r1, sp, #16
   26084:	f7fe fa9f 	bl	245c6 <bt_ccm_encrypt>
	if (!err) {
   26088:	4605      	mov	r5, r0
   2608a:	b918      	cbnz	r0, 26094 <bt_mesh_net_encrypt+0x80>
		net_buf_simple_add(buf, mic_len);
   2608c:	4631      	mov	r1, r6
   2608e:	4620      	mov	r0, r4
   26090:	f7f6 fd3a 	bl	1cb08 <net_buf_simple_add>
}
   26094:	4628      	mov	r0, r5
   26096:	b009      	add	sp, #36	; 0x24
   26098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   2609c:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   260a0:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   260a4:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   260a8:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   260ac:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   260b0:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   260b4:	f88d 2016 	strb.w	r2, [sp, #22]
   260b8:	e7d1      	b.n	2605e <bt_mesh_net_encrypt+0x4a>

000260ba <bt_mesh_net_decrypt>:
{
   260ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   260be:	460e      	mov	r6, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   260c0:	6809      	ldr	r1, [r1, #0]
   260c2:	f891 9001 	ldrb.w	r9, [r1, #1]
   260c6:	f891 8002 	ldrb.w	r8, [r1, #2]
   260ca:	f891 e003 	ldrb.w	lr, [r1, #3]
   260ce:	f891 c004 	ldrb.w	ip, [r1, #4]
   260d2:	794f      	ldrb	r7, [r1, #5]
   260d4:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   260d8:	4605      	mov	r5, r0
   260da:	b089      	sub	sp, #36	; 0x24
   260dc:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   260de:	bf14      	ite	ne
   260e0:	2408      	movne	r4, #8
   260e2:	2404      	moveq	r4, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   260e4:	798a      	ldrb	r2, [r1, #6]
   260e6:	b343      	cbz	r3, 2613a <bt_mesh_net_decrypt+0x80>
	nonce[0] = 0x03;
   260e8:	2303      	movs	r3, #3
   260ea:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   260ee:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   260f2:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   260f6:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   260fa:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   260fe:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   26102:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   26104:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   26108:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   2610c:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   26110:	f7ff fed3 	bl	25eba <sys_put_be32>
	buf->len -= mic_len;
   26114:	88b3      	ldrh	r3, [r6, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   26116:	6832      	ldr	r2, [r6, #0]
	buf->len -= mic_len;
   26118:	1b1b      	subs	r3, r3, r4
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2611a:	3207      	adds	r2, #7
	buf->len -= mic_len;
   2611c:	b29b      	uxth	r3, r3
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2611e:	2100      	movs	r1, #0
	buf->len -= mic_len;
   26120:	80b3      	strh	r3, [r6, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   26122:	e9cd 1100 	strd	r1, r1, [sp]
   26126:	e9cd 2402 	strd	r2, r4, [sp, #8]
   2612a:	3b07      	subs	r3, #7
   2612c:	a904      	add	r1, sp, #16
   2612e:	4628      	mov	r0, r5
   26130:	f7fe fa1b 	bl	2456a <bt_ccm_decrypt>
}
   26134:	b009      	add	sp, #36	; 0x24
   26136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   2613a:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   2613e:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   26142:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   26146:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2614a:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2614e:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   26152:	f88d 2016 	strb.w	r2, [sp, #22]
   26156:	e7d5      	b.n	26104 <bt_mesh_net_decrypt+0x4a>

00026158 <bt_mesh_app_encrypt>:
{
   26158:	b570      	push	{r4, r5, r6, lr}
   2615a:	460d      	mov	r5, r1
   2615c:	b088      	sub	sp, #32
   2615e:	4606      	mov	r6, r0
	create_app_nonce(nonce, ctx);
   26160:	a804      	add	r0, sp, #16
{
   26162:	4614      	mov	r4, r2
	create_app_nonce(nonce, ctx);
   26164:	f7ff feb2 	bl	25ecc <create_app_nonce>
	err = bt_ccm_encrypt(key, nonce, buf->data, buf->len, ctx->ad,
   26168:	692b      	ldr	r3, [r5, #16]
   2616a:	7868      	ldrb	r0, [r5, #1]
   2616c:	6822      	ldr	r2, [r4, #0]
   2616e:	2b00      	cmp	r3, #0
   26170:	bf14      	ite	ne
   26172:	2110      	movne	r1, #16
   26174:	2100      	moveq	r1, #0
   26176:	2800      	cmp	r0, #0
   26178:	bf14      	ite	ne
   2617a:	2008      	movne	r0, #8
   2617c:	2004      	moveq	r0, #4
   2617e:	e9cd 3100 	strd	r3, r1, [sp]
   26182:	e9cd 2002 	strd	r2, r0, [sp, #8]
   26186:	88a3      	ldrh	r3, [r4, #4]
   26188:	4630      	mov	r0, r6
   2618a:	a904      	add	r1, sp, #16
   2618c:	f7fe fa1b 	bl	245c6 <bt_ccm_encrypt>
	if (!err) {
   26190:	4606      	mov	r6, r0
   26192:	b938      	cbnz	r0, 261a4 <bt_mesh_app_encrypt+0x4c>
		net_buf_simple_add(buf, APP_MIC_LEN(ctx->aszmic));
   26194:	786b      	ldrb	r3, [r5, #1]
   26196:	2b00      	cmp	r3, #0
   26198:	bf14      	ite	ne
   2619a:	2108      	movne	r1, #8
   2619c:	2104      	moveq	r1, #4
   2619e:	4620      	mov	r0, r4
   261a0:	f7f6 fcb2 	bl	1cb08 <net_buf_simple_add>
}
   261a4:	4630      	mov	r0, r6
   261a6:	b008      	add	sp, #32
   261a8:	bd70      	pop	{r4, r5, r6, pc}

000261aa <bt_mesh_app_decrypt>:
{
   261aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   261ac:	460d      	mov	r5, r1
   261ae:	b089      	sub	sp, #36	; 0x24
   261b0:	4607      	mov	r7, r0
	create_app_nonce(nonce, ctx);
   261b2:	a804      	add	r0, sp, #16
{
   261b4:	4614      	mov	r4, r2
   261b6:	461e      	mov	r6, r3
	create_app_nonce(nonce, ctx);
   261b8:	f7ff fe88 	bl	25ecc <create_app_nonce>
	err = bt_ccm_decrypt(key, nonce, buf->data, buf->len, ctx->ad,
   261bc:	692b      	ldr	r3, [r5, #16]
   261be:	7868      	ldrb	r0, [r5, #1]
   261c0:	6831      	ldr	r1, [r6, #0]
   261c2:	2b00      	cmp	r3, #0
   261c4:	bf14      	ite	ne
   261c6:	2210      	movne	r2, #16
   261c8:	2200      	moveq	r2, #0
   261ca:	2800      	cmp	r0, #0
   261cc:	bf14      	ite	ne
   261ce:	2008      	movne	r0, #8
   261d0:	2004      	moveq	r0, #4
   261d2:	e9cd 1002 	strd	r1, r0, [sp, #8]
   261d6:	e9cd 3200 	strd	r3, r2, [sp]
   261da:	a904      	add	r1, sp, #16
   261dc:	88a3      	ldrh	r3, [r4, #4]
   261de:	6822      	ldr	r2, [r4, #0]
   261e0:	4638      	mov	r0, r7
   261e2:	f7fe f9c2 	bl	2456a <bt_ccm_decrypt>
	if (!err) {
   261e6:	4605      	mov	r5, r0
   261e8:	b918      	cbnz	r0, 261f2 <bt_mesh_app_decrypt+0x48>
		net_buf_simple_add(out, buf->len);
   261ea:	88a1      	ldrh	r1, [r4, #4]
   261ec:	4630      	mov	r0, r6
   261ee:	f7f6 fc8b 	bl	1cb08 <net_buf_simple_add>
}
   261f2:	4628      	mov	r0, r5
   261f4:	b009      	add	sp, #36	; 0x24
   261f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000261f8 <bt_mesh_prov_conf_salt>:
{
   261f8:	b530      	push	{r4, r5, lr}
   261fa:	b085      	sub	sp, #20
   261fc:	4604      	mov	r4, r0
   261fe:	460d      	mov	r5, r1
	const uint8_t conf_salt_key[16] = { 0 };
   26200:	2210      	movs	r2, #16
   26202:	2100      	movs	r1, #0
   26204:	4668      	mov	r0, sp
   26206:	f7fd ffcc 	bl	241a2 <memset>
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
   2620a:	462b      	mov	r3, r5
   2620c:	2291      	movs	r2, #145	; 0x91
   2620e:	4621      	mov	r1, r4
   26210:	4668      	mov	r0, sp
   26212:	f7ff fe9d 	bl	25f50 <bt_mesh_aes_cmac_one>
}
   26216:	b005      	add	sp, #20
   26218:	bd30      	pop	{r4, r5, pc}

0002621a <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const uint8_t conf_key[16], const uint8_t rand[16],
		      const uint8_t auth[16], uint8_t conf[16])
{
   2621a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
   2621c:	9100      	str	r1, [sp, #0]
   2621e:	2110      	movs	r1, #16
   26220:	e9cd 1201 	strd	r1, r2, [sp, #4]
   26224:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
   26226:	2202      	movs	r2, #2
   26228:	4669      	mov	r1, sp
   2622a:	f7ff fe6f 	bl	25f0c <bt_mesh_aes_cmac>
}
   2622e:	b005      	add	sp, #20
   26230:	f85d fb04 	ldr.w	pc, [sp], #4

00026234 <bt_mesh_prov_decrypt>:

int bt_mesh_prov_decrypt(const uint8_t key[16], uint8_t nonce[13],
			 const uint8_t data[25 + 8], uint8_t out[25])
{
   26234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
   26236:	2408      	movs	r4, #8
   26238:	e9cd 3402 	strd	r3, r4, [sp, #8]
   2623c:	2300      	movs	r3, #0
   2623e:	e9cd 3300 	strd	r3, r3, [sp]
   26242:	2319      	movs	r3, #25
   26244:	f7fe f991 	bl	2456a <bt_ccm_decrypt>
}
   26248:	b004      	add	sp, #16
   2624a:	bd10      	pop	{r4, pc}

0002624c <bt_mesh_beacon_auth>:
}

int bt_mesh_beacon_auth(const uint8_t beacon_key[16], uint8_t flags,
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8])
{
   2624c:	b530      	push	{r4, r5, lr}
   2624e:	b089      	sub	sp, #36	; 0x24
   26250:	4604      	mov	r4, r0
   26252:	4610      	mov	r0, r2
   26254:	461d      	mov	r5, r3
	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
	memcpy(&msg[1], net_id, 8);
   26256:	2208      	movs	r2, #8
	msg[0] = flags;
   26258:	f88d 1000 	strb.w	r1, [sp]
	memcpy(&msg[1], net_id, 8);
   2625c:	4601      	mov	r1, r0
   2625e:	f10d 0001 	add.w	r0, sp, #1
   26262:	f7fd ff74 	bl	2414e <memcpy>
	sys_put_be32(iv_index, &msg[9]);
   26266:	f10d 0109 	add.w	r1, sp, #9
   2626a:	4628      	mov	r0, r5
   2626c:	f7ff fe25 	bl	25eba <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   26270:	4620      	mov	r0, r4
   26272:	ab04      	add	r3, sp, #16
   26274:	220d      	movs	r2, #13
   26276:	4669      	mov	r1, sp
   26278:	f7ff fe6a 	bl	25f50 <bt_mesh_aes_cmac_one>
	if (!err) {
   2627c:	4604      	mov	r4, r0
   2627e:	b920      	cbnz	r0, 2628a <bt_mesh_beacon_auth+0x3e>
		memcpy(auth, tmp, 8);
   26280:	2208      	movs	r2, #8
   26282:	a904      	add	r1, sp, #16
   26284:	980c      	ldr	r0, [sp, #48]	; 0x30
   26286:	f7fd ff62 	bl	2414e <memcpy>
	}

	return err;
}
   2628a:	4620      	mov	r0, r4
   2628c:	b009      	add	sp, #36	; 0x24
   2628e:	bd30      	pop	{r4, r5, pc}

00026290 <k_uptime_get_32>:
{
   26290:	b510      	push	{r4, lr}
   26292:	f002 faea 	bl	2886a <z_impl_k_uptime_ticks>
   26296:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2629a:	fba0 2304 	umull	r2, r3, r0, r4
   2629e:	fb04 3301 	mla	r3, r4, r1, r3
   262a2:	0bd0      	lsrs	r0, r2, #15
}
   262a4:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   262a8:	bd10      	pop	{r4, pc}

000262aa <sig_mod_set>:
{
   262aa:	b507      	push	{r0, r1, r2, lr}
	return mod_set(false, name, len_rd, read_cb, cb_arg);
   262ac:	9300      	str	r3, [sp, #0]
   262ae:	4613      	mov	r3, r2
   262b0:	460a      	mov	r2, r1
   262b2:	4601      	mov	r1, r0
   262b4:	2000      	movs	r0, #0
   262b6:	f7e9 fa51 	bl	f75c <mod_set>
}
   262ba:	b003      	add	sp, #12
   262bc:	f85d fb04 	ldr.w	pc, [sp], #4

000262c0 <vnd_mod_set>:
{
   262c0:	b507      	push	{r0, r1, r2, lr}
	return mod_set(true, name, len_rd, read_cb, cb_arg);
   262c2:	9300      	str	r3, [sp, #0]
   262c4:	4613      	mov	r3, r2
   262c6:	460a      	mov	r2, r1
   262c8:	4601      	mov	r1, r0
   262ca:	2001      	movs	r0, #1
   262cc:	f7e9 fa46 	bl	f75c <mod_set>
}
   262d0:	b003      	add	sp, #12
   262d2:	f85d fb04 	ldr.w	pc, [sp], #4

000262d6 <bt_mesh_model_find_group>:
		.mod = *mod,
   262d6:	6800      	ldr	r0, [r0, #0]
		if (mod->groups[i] == addr) {
   262d8:	89c3      	ldrh	r3, [r0, #14]
   262da:	428b      	cmp	r3, r1
			return &mod->groups[i];
   262dc:	bf0c      	ite	eq
   262de:	300e      	addeq	r0, #14
	ctx->entry = model_group_get(mod, ctx->addr);
   262e0:	2000      	movne	r0, #0
}
   262e2:	4770      	bx	lr

000262e4 <bt_mesh_model_msg_init>:
{
   262e4:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   262e6:	6883      	ldr	r3, [r0, #8]
   262e8:	4604      	mov	r4, r0
   262ea:	b913      	cbnz	r3, 262f2 <bt_mesh_model_msg_init+0xe>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   262ec:	f100 030c 	add.w	r3, r0, #12
   262f0:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   262f2:	68a3      	ldr	r3, [r4, #8]
   262f4:	6023      	str	r3, [r4, #0]
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   262f6:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0U;
   262f8:	f04f 0300 	mov.w	r3, #0
   262fc:	80a3      	strh	r3, [r4, #4]
   262fe:	d805      	bhi.n	2630c <bt_mesh_model_msg_init+0x28>
		net_buf_simple_add_u8(msg, opcode);
   26300:	4620      	mov	r0, r4
   26302:	b2c9      	uxtb	r1, r1
}
   26304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   26308:	f001 be3d 	b.w	27f86 <net_buf_simple_add_u8>
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   2630c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   26310:	b28d      	uxth	r5, r1
   26312:	d205      	bcs.n	26320 <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   26314:	4629      	mov	r1, r5
   26316:	4620      	mov	r0, r4
}
   26318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   2631c:	f001 be43 	b.w	27fa6 <net_buf_simple_add_be16>
		net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   26320:	f3c1 4107 	ubfx	r1, r1, #16, #8
   26324:	4620      	mov	r0, r4
   26326:	f001 fe2e 	bl	27f86 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   2632a:	4629      	mov	r1, r5
   2632c:	4620      	mov	r0, r4
}
   2632e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   26332:	f001 be2f 	b.w	27f94 <net_buf_simple_add_le16>

00026336 <bt_mesh_model_send>:
{
   26336:	b570      	push	{r4, r5, r6, lr}
   26338:	b086      	sub	sp, #24
   2633a:	4615      	mov	r5, r2
	struct bt_mesh_net_tx tx = {
   2633c:	2200      	movs	r2, #0
{
   2633e:	461e      	mov	r6, r3
	struct bt_mesh_net_tx tx = {
   26340:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   26344:	4604      	mov	r4, r0
	struct bt_mesh_net_tx tx = {
   26346:	9203      	str	r2, [sp, #12]
		.src = bt_mesh_model_elem(model)->addr,
   26348:	f7e9 f9ce 	bl	f6e8 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   2634c:	8803      	ldrh	r3, [r0, #0]
   2634e:	f8ad 3014 	strh.w	r3, [sp, #20]
	return model_send(model, &tx, false, msg, cb, cb_data);
   26352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26354:	a903      	add	r1, sp, #12
   26356:	e9cd 6300 	strd	r6, r3, [sp]
   2635a:	4620      	mov	r0, r4
   2635c:	462b      	mov	r3, r5
   2635e:	f7e8 ffcb 	bl	f2f8 <model_send>
}
   26362:	b006      	add	sp, #24
   26364:	bd70      	pop	{r4, r5, r6, pc}

00026366 <bt_mesh_model_find_vnd>:
{
   26366:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   26368:	7947      	ldrb	r7, [r0, #5]
{
   2636a:	4605      	mov	r5, r0
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2636c:	2300      	movs	r3, #0
		if (elem->vnd_models[i].vnd.company == company &&
   2636e:	f04f 0c1c 	mov.w	ip, #28
	for (i = 0U; i < elem->vnd_model_count; i++) {
   26372:	b2d8      	uxtb	r0, r3
   26374:	4287      	cmp	r7, r0
   26376:	d801      	bhi.n	2637c <bt_mesh_model_find_vnd+0x16>
	return NULL;
   26378:	2000      	movs	r0, #0
}
   2637a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   2637c:	fb0c f403 	mul.w	r4, ip, r3
   26380:	68ee      	ldr	r6, [r5, #12]
   26382:	1930      	adds	r0, r6, r4
   26384:	5b34      	ldrh	r4, [r6, r4]
   26386:	428c      	cmp	r4, r1
   26388:	d102      	bne.n	26390 <bt_mesh_model_find_vnd+0x2a>
   2638a:	8844      	ldrh	r4, [r0, #2]
   2638c:	4294      	cmp	r4, r2
   2638e:	d0f4      	beq.n	2637a <bt_mesh_model_find_vnd+0x14>
   26390:	3301      	adds	r3, #1
   26392:	e7ee      	b.n	26372 <bt_mesh_model_find_vnd+0xc>

00026394 <bt_mesh_model_find>:
{
   26394:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->model_count; i++) {
   26396:	7906      	ldrb	r6, [r0, #4]
   26398:	2300      	movs	r3, #0
		if (elem->models[i].id == id) {
   2639a:	271c      	movs	r7, #28
	for (i = 0U; i < elem->model_count; i++) {
   2639c:	b2da      	uxtb	r2, r3
   2639e:	4296      	cmp	r6, r2
   263a0:	d801      	bhi.n	263a6 <bt_mesh_model_find+0x12>
	return NULL;
   263a2:	2200      	movs	r2, #0
   263a4:	e008      	b.n	263b8 <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
   263a6:	fb07 f403 	mul.w	r4, r7, r3
   263aa:	6885      	ldr	r5, [r0, #8]
   263ac:	192a      	adds	r2, r5, r4
   263ae:	5b2c      	ldrh	r4, [r5, r4]
   263b0:	428c      	cmp	r4, r1
   263b2:	f103 0301 	add.w	r3, r3, #1
   263b6:	d1f1      	bne.n	2639c <bt_mesh_model_find+0x8>
}
   263b8:	4610      	mov	r0, r2
   263ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000263bc <bt_mesh_model_root>:
}
   263bc:	4770      	bx	lr

000263be <bt_mesh_model_tree_walk>:
{
   263be:	460b      	mov	r3, r1
		    cb(m, (uint32_t)depth, user_data) == BT_MESH_WALK_STOP) {
   263c0:	2100      	movs	r1, #0
   263c2:	4718      	bx	r3

000263c4 <bt_mesh_model_bind_store>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   263c4:	88c3      	ldrh	r3, [r0, #6]
   263c6:	f043 0301 	orr.w	r3, r3, #1
   263ca:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   263cc:	2008      	movs	r0, #8
   263ce:	f7eb bdfb 	b.w	11fc8 <bt_mesh_settings_store_schedule>

000263d2 <bt_mesh_model_sub_store>:
	mod->flags |= BT_MESH_MOD_SUB_PENDING;
   263d2:	88c3      	ldrh	r3, [r0, #6]
   263d4:	f043 0302 	orr.w	r3, r3, #2
   263d8:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   263da:	2008      	movs	r0, #8
   263dc:	f7eb bdf4 	b.w	11fc8 <bt_mesh_settings_store_schedule>

000263e0 <bt_mesh_model_pub_store>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   263e0:	88c3      	ldrh	r3, [r0, #6]
   263e2:	f043 0304 	orr.w	r3, r3, #4
   263e6:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   263e8:	2008      	movs	r0, #8
   263ea:	f7eb bded 	b.w	11fc8 <bt_mesh_settings_store_schedule>

000263ee <key_idx_pack>:

#include <sys/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				uint16_t idx1, uint16_t idx2)
{
   263ee:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   263f0:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   263f4:	4605      	mov	r5, r0
   263f6:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   263f8:	b289      	uxth	r1, r1
   263fa:	f001 fdcb 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   263fe:	f3c4 1107 	ubfx	r1, r4, #4, #8
   26402:	4628      	mov	r0, r5
}
   26404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   26408:	f001 bdbd 	b.w	27f86 <net_buf_simple_add_u8>

0002640c <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  uint16_t *idx1, uint16_t *idx2)
{
   2640c:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   2640e:	6804      	ldr	r4, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   26410:	7865      	ldrb	r5, [r4, #1]
   26412:	7823      	ldrb	r3, [r4, #0]
   26414:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   26418:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2641c:	800b      	strh	r3, [r1, #0]
   2641e:	78a1      	ldrb	r1, [r4, #2]
   26420:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   26422:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   26426:	091b      	lsrs	r3, r3, #4
   26428:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   2642a:	2103      	movs	r1, #3
}
   2642c:	bc30      	pop	{r4, r5}
	net_buf_simple_pull(buf, 3);
   2642e:	f7f6 bb31 	b.w	1ca94 <net_buf_simple_pull>

00026432 <bt_mesh_hb_pwr2>:
	if (!val) {
   26432:	b158      	cbz	r0, 2644c <bt_mesh_hb_pwr2+0x1a>
	} else if (val == 0xff || val == 0x11) {
   26434:	28ff      	cmp	r0, #255	; 0xff
   26436:	d007      	beq.n	26448 <bt_mesh_hb_pwr2+0x16>
   26438:	2811      	cmp	r0, #17
   2643a:	d005      	beq.n	26448 <bt_mesh_hb_pwr2+0x16>
		return (1 << (val - 1));
   2643c:	2301      	movs	r3, #1
   2643e:	3801      	subs	r0, #1
   26440:	fa03 f000 	lsl.w	r0, r3, r0
   26444:	b280      	uxth	r0, r0
   26446:	4770      	bx	lr
		return 0xffff;
   26448:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   2644c:	4770      	bx	lr

0002644e <mod_sub_clear_visitor>:
{
   2644e:	b508      	push	{r3, lr}
   26450:	300e      	adds	r0, #14
   26452:	f7e9 ff43 	bl	102dc <mod_sub_list_clear.isra.3.part.4>
}
   26456:	2001      	movs	r0, #1
   26458:	bd08      	pop	{r3, pc}

0002645a <mod_reset>:
{
   2645a:	b510      	push	{r4, lr}
   2645c:	4604      	mov	r4, r0
   2645e:	300e      	adds	r0, #14
   26460:	f7e9 ff3c 	bl	102dc <mod_sub_list_clear.isra.3.part.4>
		if (clear_count) {
   26464:	b110      	cbz	r0, 2646c <mod_reset+0x12>
			bt_mesh_model_sub_store(mod);
   26466:	4620      	mov	r0, r4
   26468:	f7ff ffb3 	bl	263d2 <bt_mesh_model_sub_store>
	if (mod->cb && mod->cb->reset) {
   2646c:	6963      	ldr	r3, [r4, #20]
   2646e:	b12b      	cbz	r3, 2647c <mod_reset+0x22>
   26470:	68db      	ldr	r3, [r3, #12]
   26472:	b11b      	cbz	r3, 2647c <mod_reset+0x22>
		mod->cb->reset(mod);
   26474:	4620      	mov	r0, r4
}
   26476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mod->cb->reset(mod);
   2647a:	4718      	bx	r3
}
   2647c:	bd10      	pop	{r4, pc}

0002647e <app_key_del>:
{
   2647e:	b530      	push	{r4, r5, lr}
   26480:	b085      	sub	sp, #20
   26482:	4604      	mov	r4, r0
   26484:	460d      	mov	r5, r1
   26486:	4610      	mov	r0, r2
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   26488:	a903      	add	r1, sp, #12
   2648a:	f10d 020e 	add.w	r2, sp, #14
   2648e:	f7ff ffbd 	bl	2640c <key_idx_unpack>
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   26492:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   26496:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2649a:	f7e6 feb7 	bl	d20c <bt_mesh_app_key_del>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2649e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   264a2:	9300      	str	r3, [sp, #0]
   264a4:	4602      	mov	r2, r0
   264a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   264aa:	4629      	mov	r1, r5
   264ac:	4620      	mov	r0, r4
   264ae:	f7ea f8d9 	bl	10664 <send_app_key_status>
}
   264b2:	b005      	add	sp, #20
   264b4:	bd30      	pop	{r4, r5, pc}

000264b6 <app_key_update>:
{
   264b6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   264b8:	4614      	mov	r4, r2
   264ba:	4605      	mov	r5, r0
   264bc:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   264be:	f10d 020e 	add.w	r2, sp, #14
   264c2:	a903      	add	r1, sp, #12
   264c4:	4620      	mov	r0, r4
   264c6:	f7ff ffa1 	bl	2640c <key_idx_unpack>
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   264ca:	6822      	ldr	r2, [r4, #0]
   264cc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   264d0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   264d4:	f7e6 fe54 	bl	d180 <bt_mesh_app_key_update>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   264d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   264dc:	9300      	str	r3, [sp, #0]
   264de:	4602      	mov	r2, r0
   264e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   264e4:	4631      	mov	r1, r6
   264e6:	4628      	mov	r0, r5
   264e8:	f7ea f8bc 	bl	10664 <send_app_key_status>
}
   264ec:	b004      	add	sp, #16
   264ee:	bd70      	pop	{r4, r5, r6, pc}

000264f0 <app_key_add>:
{
   264f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   264f2:	4614      	mov	r4, r2
   264f4:	4605      	mov	r5, r0
   264f6:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   264f8:	f10d 020e 	add.w	r2, sp, #14
   264fc:	a903      	add	r1, sp, #12
   264fe:	4620      	mov	r0, r4
   26500:	f7ff ff84 	bl	2640c <key_idx_unpack>
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   26504:	6822      	ldr	r2, [r4, #0]
   26506:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2650a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2650e:	f7e6 fdf5 	bl	d0fc <bt_mesh_app_key_add>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   26512:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   26516:	9300      	str	r3, [sp, #0]
   26518:	4602      	mov	r2, r0
   2651a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2651e:	4631      	mov	r1, r6
   26520:	4628      	mov	r0, r5
   26522:	f7ea f89f 	bl	10664 <send_app_key_status>
}
   26526:	b004      	add	sp, #16
   26528:	bd70      	pop	{r4, r5, r6, pc}

0002652a <friend_get>:
	send_friend_status(model, ctx);
   2652a:	f7ea b8c7 	b.w	106bc <send_friend_status>

0002652e <get_model>:
{
   2652e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   26530:	888b      	ldrh	r3, [r1, #4]
   26532:	2b03      	cmp	r3, #3
{
   26534:	4605      	mov	r5, r0
   26536:	460c      	mov	r4, r1
   26538:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   2653a:	4608      	mov	r0, r1
	if (buf->len < 4) {
   2653c:	d809      	bhi.n	26552 <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   2653e:	f001 fcee 	bl	27f1e <net_buf_simple_pull_le16>
		*vnd = false;
   26542:	2300      	movs	r3, #0
   26544:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
   26546:	4601      	mov	r1, r0
   26548:	4628      	mov	r0, r5
}
   2654a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   2654e:	f7ff bf21 	b.w	26394 <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   26552:	f001 fce4 	bl	27f1e <net_buf_simple_pull_le16>
   26556:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   26558:	4620      	mov	r0, r4
   2655a:	f001 fce0 	bl	27f1e <net_buf_simple_pull_le16>
		*vnd = true;
   2655e:	2301      	movs	r3, #1
   26560:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
   26562:	4602      	mov	r2, r0
   26564:	4639      	mov	r1, r7
   26566:	4628      	mov	r0, r5
}
   26568:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   2656c:	f7ff befb 	b.w	26366 <bt_mesh_model_find_vnd>

00026570 <create_mod_app_status.isra.13>:
static void create_mod_app_status(struct net_buf_simple *msg,
   26570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26574:	f89d 9020 	ldrb.w	r9, [sp, #32]
   26578:	9d09      	ldr	r5, [sp, #36]	; 0x24
   2657a:	4604      	mov	r4, r0
   2657c:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   2657e:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   26582:	4690      	mov	r8, r2
   26584:	461f      	mov	r7, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   26586:	f7ff fead 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   2658a:	4649      	mov	r1, r9
   2658c:	4620      	mov	r0, r4
   2658e:	f001 fcfa 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   26592:	4641      	mov	r1, r8
   26594:	4620      	mov	r0, r4
   26596:	f001 fcfd 	bl	27f94 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   2659a:	4639      	mov	r1, r7
   2659c:	4620      	mov	r0, r4
   2659e:	f001 fcf9 	bl	27f94 <net_buf_simple_add_le16>
	if (vnd) {
   265a2:	b14e      	cbz	r6, 265b8 <create_mod_app_status.isra.13+0x48>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   265a4:	2104      	movs	r1, #4
   265a6:	4620      	mov	r0, r4
   265a8:	f7f6 faae 	bl	1cb08 <net_buf_simple_add>
   265ac:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   265ae:	4629      	mov	r1, r5
}
   265b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   265b4:	f7fd bdcb 	b.w	2414e <memcpy>
   265b8:	2102      	movs	r1, #2
   265ba:	4620      	mov	r0, r4
   265bc:	f7f6 faa4 	bl	1cb08 <net_buf_simple_add>
   265c0:	2202      	movs	r2, #2
   265c2:	e7f4      	b.n	265ae <create_mod_app_status.isra.13+0x3e>

000265c4 <gatt_proxy_get>:
	send_gatt_proxy_status(model, ctx);
   265c4:	f7ea bd26 	b.w	11014 <send_gatt_proxy_status>

000265c8 <mod_unbind.part.2.constprop.28>:
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   265c8:	b530      	push	{r4, r5, lr}
		if (model->keys[i] != key_idx) {
   265ca:	8985      	ldrh	r5, [r0, #12]
   265cc:	428d      	cmp	r5, r1
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   265ce:	b085      	sub	sp, #20
   265d0:	4604      	mov	r4, r0
		if (model->keys[i] != key_idx) {
   265d2:	d114      	bne.n	265fe <mod_unbind.part.2.constprop.28+0x36>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   265d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   265d8:	8183      	strh	r3, [r0, #12]
			bt_mesh_model_bind_store(model);
   265da:	f7ff fef3 	bl	263c4 <bt_mesh_model_bind_store>
		if (model->pub && model->pub->key == key_idx) {
   265de:	68a3      	ldr	r3, [r4, #8]
   265e0:	b16b      	cbz	r3, 265fe <mod_unbind.part.2.constprop.28+0x36>
   265e2:	88db      	ldrh	r3, [r3, #6]
   265e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
   265e8:	42ab      	cmp	r3, r5
   265ea:	d108      	bne.n	265fe <mod_unbind.part.2.constprop.28+0x36>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   265ec:	2300      	movs	r3, #0
   265ee:	e9cd 3301 	strd	r3, r3, [sp, #4]
   265f2:	9300      	str	r3, [sp, #0]
   265f4:	461a      	mov	r2, r3
   265f6:	4619      	mov	r1, r3
   265f8:	4620      	mov	r0, r4
   265fa:	f7ea fe59 	bl	112b0 <_mod_pub_set.constprop.29>
}
   265fe:	2000      	movs	r0, #0
   26600:	b005      	add	sp, #20
   26602:	bd30      	pop	{r4, r5, pc}

00026604 <heartbeat_sub_get>:
{
   26604:	b530      	push	{r4, r5, lr}
   26606:	b085      	sub	sp, #20
   26608:	4604      	mov	r4, r0
   2660a:	460d      	mov	r5, r1
	bt_mesh_hb_sub_get(&sub);
   2660c:	4668      	mov	r0, sp
   2660e:	f7e8 fcb1 	bl	ef74 <bt_mesh_hb_sub_get>
	hb_sub_send_status(model, ctx, &sub);
   26612:	466a      	mov	r2, sp
   26614:	4629      	mov	r1, r5
   26616:	4620      	mov	r0, r4
   26618:	f7eb f804 	bl	11624 <hb_sub_send_status>
}
   2661c:	b005      	add	sp, #20
   2661e:	bd30      	pop	{r4, r5, pc}

00026620 <heartbeat_pub_get>:
{
   26620:	b530      	push	{r4, r5, lr}
   26622:	b085      	sub	sp, #20
   26624:	4604      	mov	r4, r0
   26626:	460d      	mov	r5, r1
	bt_mesh_hb_pub_get(&pub);
   26628:	4668      	mov	r0, sp
   2662a:	f7e8 fc2d 	bl	ee88 <bt_mesh_hb_pub_get>
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, &pub);
   2662e:	466b      	mov	r3, sp
   26630:	2200      	movs	r2, #0
   26632:	4629      	mov	r1, r5
   26634:	4620      	mov	r0, r4
   26636:	f7eb f88b 	bl	11750 <hb_pub_send_status>
}
   2663a:	b005      	add	sp, #20
   2663c:	bd30      	pop	{r4, r5, pc}

0002663e <mod_app_key_del>:
{
   2663e:	b538      	push	{r3, r4, r5, lr}
	mod_unbind(mod, *app_idx, true);
   26640:	9b04      	ldr	r3, [sp, #16]
   26642:	881c      	ldrh	r4, [r3, #0]
{
   26644:	4605      	mov	r5, r0
	if (!bt_mesh_app_key_exists(key_idx)) {
   26646:	4620      	mov	r0, r4
   26648:	f7e6 fe7a 	bl	d340 <bt_mesh_app_key_exists>
   2664c:	b128      	cbz	r0, 2665a <mod_app_key_del+0x1c>
   2664e:	4621      	mov	r1, r4
   26650:	4628      	mov	r0, r5
}
   26652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26656:	f7ff bfb7 	b.w	265c8 <mod_unbind.part.2.constprop.28>
   2665a:	bd38      	pop	{r3, r4, r5, pc}

0002665c <attention_off>:
	if (srv->cb && srv->cb->attn_off) {
   2665c:	f850 3c04 	ldr.w	r3, [r0, #-4]
   26660:	b123      	cbz	r3, 2666c <attention_off+0x10>
   26662:	695b      	ldr	r3, [r3, #20]
   26664:	b113      	cbz	r3, 2666c <attention_off+0x10>
		srv->cb->attn_off(srv->model);
   26666:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2666a:	4718      	bx	r3
}
   2666c:	4770      	bx	lr

0002666e <health_fault_test_unrel>:
{
   2666e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   26672:	6987      	ldr	r7, [r0, #24]
{
   26674:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   26676:	4610      	mov	r0, r2
{
   26678:	4615      	mov	r5, r2
	test_id = net_buf_simple_pull_u8(buf);
   2667a:	f001 fc48 	bl	27f0e <net_buf_simple_pull_u8>
   2667e:	4606      	mov	r6, r0
	company_id = net_buf_simple_pull_le16(buf);
   26680:	4628      	mov	r0, r5
   26682:	f001 fc4c 	bl	27f1e <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   26686:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   26688:	4602      	mov	r2, r0
	if (srv->cb && srv->cb->fault_test) {
   2668a:	b133      	cbz	r3, 2669a <health_fault_test_unrel+0x2c>
   2668c:	68db      	ldr	r3, [r3, #12]
   2668e:	b123      	cbz	r3, 2669a <health_fault_test_unrel+0x2c>
		srv->cb->fault_test(model, test_id, company_id);
   26690:	4631      	mov	r1, r6
   26692:	4620      	mov	r0, r4
}
   26694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		srv->cb->fault_test(model, test_id, company_id);
   26698:	4718      	bx	r3
}
   2669a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002669e <health_fault_clear_unrel>:
{
   2669e:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   266a0:	6985      	ldr	r5, [r0, #24]
{
   266a2:	4604      	mov	r4, r0
	company_id = net_buf_simple_pull_le16(buf);
   266a4:	4610      	mov	r0, r2
   266a6:	f001 fc3a 	bl	27f1e <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   266aa:	686b      	ldr	r3, [r5, #4]
	company_id = net_buf_simple_pull_le16(buf);
   266ac:	4601      	mov	r1, r0
	if (srv->cb && srv->cb->fault_clear) {
   266ae:	b12b      	cbz	r3, 266bc <health_fault_clear_unrel+0x1e>
   266b0:	689b      	ldr	r3, [r3, #8]
   266b2:	b11b      	cbz	r3, 266bc <health_fault_clear_unrel+0x1e>
		srv->cb->fault_clear(model, company_id);
   266b4:	4620      	mov	r0, r4
}
   266b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		srv->cb->fault_clear(model, company_id);
   266ba:	4718      	bx	r3
}
   266bc:	bd70      	pop	{r4, r5, r6, pc}

000266be <health_period_set>:
{
   266be:	b538      	push	{r3, r4, r5, lr}
   266c0:	4604      	mov	r4, r0
   266c2:	460d      	mov	r5, r1
	health_period_set_unrel(model, ctx, buf);
   266c4:	f7eb f8f6 	bl	118b4 <health_period_set_unrel>
	send_health_period_status(model, ctx);
   266c8:	4629      	mov	r1, r5
   266ca:	4620      	mov	r0, r4
}
   266cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_health_period_status(model, ctx);
   266d0:	f7eb b9f2 	b.w	11ab8 <send_health_period_status>

000266d4 <health_period_get>:
	send_health_period_status(model, ctx);
   266d4:	f7eb b9f0 	b.w	11ab8 <send_health_period_status>

000266d8 <attention_get>:
	send_attention_status(model, ctx);
   266d8:	f7eb ba14 	b.w	11b04 <send_attention_status>

000266dc <attention_set_unrel>:
{
   266dc:	b510      	push	{r4, lr}
   266de:	4604      	mov	r4, r0
	time = net_buf_simple_pull_u8(buf);
   266e0:	4610      	mov	r0, r2
   266e2:	f001 fc14 	bl	27f0e <net_buf_simple_pull_u8>
	bt_mesh_attention(model, time);
   266e6:	4601      	mov	r1, r0
   266e8:	4620      	mov	r0, r4
}
   266ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_attention(model, time);
   266ee:	f7eb bab5 	b.w	11c5c <bt_mesh_attention>

000266f2 <attention_set>:
{
   266f2:	b538      	push	{r3, r4, r5, lr}
   266f4:	4604      	mov	r4, r0
   266f6:	460d      	mov	r5, r1
	attention_set_unrel(model, ctx, buf);
   266f8:	f7ff fff0 	bl	266dc <attention_set_unrel>
	send_attention_status(model, ctx);
   266fc:	4629      	mov	r1, r5
   266fe:	4620      	mov	r0, r4
}
   26700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_attention_status(model, ctx);
   26704:	f7eb b9fe 	b.w	11b04 <send_attention_status>

00026708 <bt_mesh_adv_buf_ready>:
}
   26708:	4770      	bx	lr

0002670a <store_pending>:
{
   2670a:	b508      	push	{r3, lr}
	if (atomic_test_and_clear_bit(pending_flags,
   2670c:	2000      	movs	r0, #0
   2670e:	f7eb fbfd 	bl	11f0c <atomic_test_and_clear_bit.constprop.5>
   26712:	b108      	cbz	r0, 26718 <store_pending+0xe>
		bt_mesh_rpl_pending_store();
   26714:	f7e8 f99a 	bl	ea4c <bt_mesh_rpl_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   26718:	2001      	movs	r0, #1
   2671a:	f7eb fbf7 	bl	11f0c <atomic_test_and_clear_bit.constprop.5>
   2671e:	b108      	cbz	r0, 26724 <store_pending+0x1a>
		bt_mesh_subnet_pending_store();
   26720:	f7e6 fbfe 	bl	cf20 <bt_mesh_subnet_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   26724:	2002      	movs	r0, #2
   26726:	f7eb fbf1 	bl	11f0c <atomic_test_and_clear_bit.constprop.5>
   2672a:	b108      	cbz	r0, 26730 <store_pending+0x26>
		bt_mesh_app_key_pending_store();
   2672c:	f7e6 feca 	bl	d4c4 <bt_mesh_app_key_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   26730:	2003      	movs	r0, #3
   26732:	f7eb fbeb 	bl	11f0c <atomic_test_and_clear_bit.constprop.5>
   26736:	b108      	cbz	r0, 2673c <store_pending+0x32>
		bt_mesh_net_pending_net_store();
   26738:	f7e6 f8ec 	bl	c914 <bt_mesh_net_pending_net_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2673c:	2004      	movs	r0, #4
   2673e:	f7eb fbe5 	bl	11f0c <atomic_test_and_clear_bit.constprop.5>
   26742:	b108      	cbz	r0, 26748 <store_pending+0x3e>
		bt_mesh_net_pending_iv_store();
   26744:	f7e6 f8b4 	bl	c8b0 <bt_mesh_net_pending_iv_store>
	if (atomic_test_and_clear_bit(pending_flags,
   26748:	2005      	movs	r0, #5
   2674a:	f7eb fbdf 	bl	11f0c <atomic_test_and_clear_bit.constprop.5>
   2674e:	b108      	cbz	r0, 26754 <store_pending+0x4a>
		bt_mesh_net_pending_seq_store();
   26750:	f7e6 f90c 	bl	c96c <bt_mesh_net_pending_seq_store>
	if (atomic_test_and_clear_bit(pending_flags,
   26754:	2006      	movs	r0, #6
   26756:	f7eb fbd9 	bl	11f0c <atomic_test_and_clear_bit.constprop.5>
   2675a:	b108      	cbz	r0, 26760 <store_pending+0x56>
		bt_mesh_hb_pub_pending_store();
   2675c:	f7e8 fc54 	bl	f008 <bt_mesh_hb_pub_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   26760:	2007      	movs	r0, #7
   26762:	f7eb fbd3 	bl	11f0c <atomic_test_and_clear_bit.constprop.5>
   26766:	b108      	cbz	r0, 2676c <store_pending+0x62>
		bt_mesh_cfg_pending_store();
   26768:	f7e4 feda 	bl	b520 <bt_mesh_cfg_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2676c:	2008      	movs	r0, #8
   2676e:	f7eb fbcd 	bl	11f0c <atomic_test_and_clear_bit.constprop.5>
   26772:	b108      	cbz	r0, 26778 <store_pending+0x6e>
		bt_mesh_model_pending_store();
   26774:	f7e9 fb24 	bl	fdc0 <bt_mesh_model_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   26778:	2009      	movs	r0, #9
   2677a:	f7eb fbc7 	bl	11f0c <atomic_test_and_clear_bit.constprop.5>
   2677e:	b118      	cbz	r0, 26788 <store_pending+0x7e>
}
   26780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_va_pending_store();
   26784:	f7e8 b862 	b.w	e84c <bt_mesh_va_pending_store>
}
   26788:	bd08      	pop	{r3, pc}

0002678a <friend_recv_delay>:
{
   2678a:	b5d0      	push	{r4, r6, r7, lr}
	frnd->pending_req = 1U;
   2678c:	78c3      	ldrb	r3, [r0, #3]
	return (int32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
   2678e:	7881      	ldrb	r1, [r0, #2]
	frnd->pending_req = 1U;
   26790:	f043 0304 	orr.w	r3, r3, #4
{
   26794:	4604      	mov	r4, r0
	frnd->pending_req = 1U;
   26796:	70c3      	strb	r3, [r0, #3]
	return (int32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
   26798:	3133      	adds	r1, #51	; 0x33
   2679a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2679e:	f240 36e7 	movw	r6, #999	; 0x3e7
   267a2:	2700      	movs	r7, #0
   267a4:	fbc0 6701 	smlal	r6, r7, r0, r1
   267a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   267ac:	2300      	movs	r3, #0
   267ae:	4630      	mov	r0, r6
   267b0:	4639      	mov	r1, r7
   267b2:	f7d9 fca5 	bl	100 <__aeabi_uldivmod>
	k_delayed_work_submit(&frnd->timer, K_MSEC(delay));
   267b6:	4602      	mov	r2, r0
   267b8:	460b      	mov	r3, r1
   267ba:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   267be:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit(&frnd->timer, K_MSEC(delay));
   267c2:	f7eb bcb5 	b.w	12130 <k_delayed_work_submit>

000267c6 <friend_clear_sent>:
			      K_SECONDS(frnd->clear.repeat_sec));
   267c6:	f8b1 30b6 	ldrh.w	r3, [r1, #182]	; 0xb6
{
   267ca:	b5d0      	push	{r4, r6, r7, lr}
   267cc:	460c      	mov	r4, r1
			      K_SECONDS(frnd->clear.repeat_sec));
   267ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   267d2:	4359      	muls	r1, r3
   267d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   267d8:	f240 36e7 	movw	r6, #999	; 0x3e7
   267dc:	2700      	movs	r7, #0
   267de:	fbe0 6701 	umlal	r6, r7, r0, r1
   267e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   267e6:	2300      	movs	r3, #0
   267e8:	4630      	mov	r0, r6
   267ea:	4639      	mov	r1, r7
   267ec:	f7d9 fc88 	bl	100 <__aeabi_uldivmod>
	k_delayed_work_submit(&frnd->clear.timer,
   267f0:	4602      	mov	r2, r0
   267f2:	460b      	mov	r3, r1
   267f4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   267f8:	f7eb fc9a 	bl	12130 <k_delayed_work_submit>
	frnd->clear.repeat_sec *= 2U;
   267fc:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
   26800:	005b      	lsls	r3, r3, #1
   26802:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
}
   26806:	bdd0      	pop	{r4, r6, r7, pc}

00026808 <clear_timeout>:
{
   26808:	b5d0      	push	{r4, r6, r7, lr}
   2680a:	4604      	mov	r4, r0
   2680c:	f002 f82d 	bl	2886a <z_impl_k_uptime_ticks>
   26810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   26814:	fba0 6703 	umull	r6, r7, r0, r3
   26818:	fb03 7701 	mla	r7, r3, r1, r7
   2681c:	0bf3      	lsrs	r3, r6, #15
	duration = k_uptime_get_32() - frnd->clear.start;
   2681e:	f854 1c08 	ldr.w	r1, [r4, #-8]
	if (duration > 2 * frnd->poll_to) {
   26822:	f854 2cb4 	ldr.w	r2, [r4, #-180]
   26826:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
	duration = k_uptime_get_32() - frnd->clear.start;
   2682a:	1a5b      	subs	r3, r3, r1
	if (duration > 2 * frnd->poll_to) {
   2682c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   26830:	d903      	bls.n	2683a <clear_timeout+0x32>
		frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
   26832:	2300      	movs	r3, #0
   26834:	f824 3c04 	strh.w	r3, [r4, #-4]
}
   26838:	bdd0      	pop	{r4, r6, r7, pc}
	send_friend_clear(frnd);
   2683a:	f1a4 00b8 	sub.w	r0, r4, #184	; 0xb8
}
   2683e:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	send_friend_clear(frnd);
   26842:	f7eb bc39 	b.w	120b8 <send_friend_clear>

00026846 <net_buf_skip>:
{
   26846:	b538      	push	{r3, r4, r5, lr}
   26848:	460d      	mov	r5, r1
			buf = net_buf_frag_del(NULL, buf);
   2684a:	4604      	mov	r4, r0
	while (buf && len--) {
   2684c:	b114      	cbz	r4, 26854 <net_buf_skip+0xe>
   2684e:	f115 35ff 	adds.w	r5, r5, #4294967295
   26852:	d201      	bcs.n	26858 <net_buf_skip+0x12>
}
   26854:	4620      	mov	r0, r4
   26856:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_simple_pull_u8(&buf->b);
   26858:	f104 0008 	add.w	r0, r4, #8
   2685c:	f001 fb57 	bl	27f0e <net_buf_simple_pull_u8>
		if (!buf->len) {
   26860:	89a0      	ldrh	r0, [r4, #12]
   26862:	2800      	cmp	r0, #0
   26864:	d1f2      	bne.n	2684c <net_buf_skip+0x6>
			buf = net_buf_frag_del(NULL, buf);
   26866:	4621      	mov	r1, r4
   26868:	f7f6 f8bc 	bl	1c9e4 <net_buf_frag_del>
   2686c:	e7ed      	b.n	2684a <net_buf_skip+0x4>

0002686e <friend_lpn_matches>:
{
   2686e:	b510      	push	{r4, lr}
	if (!frnd->established) {
   26870:	78c4      	ldrb	r4, [r0, #3]
   26872:	f014 0410 	ands.w	r4, r4, #16
   26876:	d01f      	beq.n	268b8 <friend_lpn_matches+0x4a>
	if (net_idx != frnd->subnet->net_idx) {
   26878:	6903      	ldr	r3, [r0, #16]
   2687a:	8b9b      	ldrh	r3, [r3, #28]
   2687c:	428b      	cmp	r3, r1
   2687e:	d11b      	bne.n	268b8 <friend_lpn_matches+0x4a>
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   26880:	b213      	sxth	r3, r2
   26882:	2b00      	cmp	r3, #0
   26884:	dc0d      	bgt.n	268a2 <friend_lpn_matches+0x34>
		if (frnd->sub_list[i] == addr) {
   26886:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
   2688a:	4293      	cmp	r3, r2
   2688c:	d016      	beq.n	268bc <friend_lpn_matches+0x4e>
   2688e:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
   26892:	4293      	cmp	r3, r2
   26894:	d012      	beq.n	268bc <friend_lpn_matches+0x4e>
   26896:	f8b0 005a 	ldrh.w	r0, [r0, #90]	; 0x5a
   2689a:	1a83      	subs	r3, r0, r2
   2689c:	4258      	negs	r0, r3
   2689e:	4158      	adcs	r0, r3
}
   268a0:	bd10      	pop	{r4, pc}
	if (frnd->lpn == BT_MESH_ADDR_UNASSIGNED) {
   268a2:	8803      	ldrh	r3, [r0, #0]
   268a4:	b163      	cbz	r3, 268c0 <friend_lpn_matches+0x52>
	return (addr >= frnd->lpn && addr < (frnd->lpn + frnd->num_elem));
   268a6:	429a      	cmp	r2, r3
   268a8:	d306      	bcc.n	268b8 <friend_lpn_matches+0x4a>
   268aa:	7a00      	ldrb	r0, [r0, #8]
   268ac:	4418      	add	r0, r3
   268ae:	4282      	cmp	r2, r0
   268b0:	bfac      	ite	ge
   268b2:	2000      	movge	r0, #0
   268b4:	2001      	movlt	r0, #1
   268b6:	e7f3      	b.n	268a0 <friend_lpn_matches+0x32>
		return false;
   268b8:	2000      	movs	r0, #0
   268ba:	e7f1      	b.n	268a0 <friend_lpn_matches+0x32>
			return true;
   268bc:	2001      	movs	r0, #1
   268be:	e7ef      	b.n	268a0 <friend_lpn_matches+0x32>
		return false;
   268c0:	4618      	mov	r0, r3
   268c2:	e7ed      	b.n	268a0 <friend_lpn_matches+0x32>

000268c4 <buf_send_start>:
{
   268c4:	b538      	push	{r3, r4, r5, lr}
	frnd->pending_buf = 0U;
   268c6:	78d3      	ldrb	r3, [r2, #3]
   268c8:	f36f 03c3 	bfc	r3, #3, #1
	if (!frnd->established && frnd->last) {
   268cc:	f013 0410 	ands.w	r4, r3, #16
{
   268d0:	4615      	mov	r5, r2
	frnd->pending_buf = 0U;
   268d2:	70d3      	strb	r3, [r2, #3]
	if (!frnd->established && frnd->last) {
   268d4:	d106      	bne.n	268e4 <buf_send_start+0x20>
   268d6:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   268da:	b118      	cbz	r0, 268e4 <buf_send_start+0x20>
		net_buf_unref(frnd->last);
   268dc:	f7f5 ffc4 	bl	1c868 <net_buf_unref>
		frnd->last = NULL;
   268e0:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
}
   268e4:	bd38      	pop	{r3, r4, r5, pc}

000268e6 <friend_purge_old_ack>:
{
   268e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (cur = sys_slist_peek_head(&frnd->queue);
   268ea:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
{
   268ee:	4682      	mov	sl, r0
   268f0:	460f      	mov	r7, r1
   268f2:	4690      	mov	r8, r2
	sys_snode_t *cur, *prev = NULL;
   268f4:	2500      	movs	r5, #0
	for (cur = sys_slist_peek_head(&frnd->queue);
   268f6:	b90c      	cbnz	r4, 268fc <friend_purge_old_ack+0x16>
}
   268f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (buf->len != 16) {
   268fc:	89a3      	ldrh	r3, [r4, #12]
   268fe:	2b10      	cmp	r3, #16
   26900:	d158      	bne.n	269b4 <friend_purge_old_ack+0xce>
	net_buf_simple_save(&buf->b, &state);
   26902:	f104 0b08 	add.w	fp, r4, #8
	state->offset = net_buf_simple_headroom(buf);
   26906:	4658      	mov	r0, fp
   26908:	f001 fb25 	bl	27f56 <net_buf_simple_headroom>
	net_buf_skip(buf, 1); /* skip IVI, NID */
   2690c:	2101      	movs	r1, #1
   2690e:	4606      	mov	r6, r0
   26910:	4620      	mov	r0, r4
	state->len = buf->len;
   26912:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   26916:	f7ff ff96 	bl	26846 <net_buf_skip>
	return net_buf_simple_pull_u8(&buf->b);
   2691a:	4658      	mov	r0, fp
   2691c:	f001 faf7 	bl	27f0e <net_buf_simple_pull_u8>
	if (!(net_buf_pull_u8(buf) >> 7)) {
   26920:	0602      	lsls	r2, r0, #24
   26922:	d41e      	bmi.n	26962 <friend_purge_old_ack+0x7c>
	bool found = false;
   26924:	2300      	movs	r3, #0
	buf->data = buf->__buf + state->offset;
   26926:	6922      	ldr	r2, [r4, #16]
	buf->len = state->len;
   26928:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2692c:	fa12 f686 	uxtah	r6, r2, r6
   26930:	60a6      	str	r6, [r4, #8]
		if (is_segack(buf, seq_auth, src)) {
   26932:	2b00      	cmp	r3, #0
   26934:	d03e      	beq.n	269b4 <friend_purge_old_ack+0xce>
Z_GENLIST_REMOVE(slist, snode)
   26936:	6823      	ldr	r3, [r4, #0]
   26938:	bba5      	cbnz	r5, 269a4 <friend_purge_old_ack+0xbe>
   2693a:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
	list->head = node;
   2693e:	f8ca 30a0 	str.w	r3, [sl, #160]	; 0xa0
Z_GENLIST_REMOVE(slist, snode)
   26942:	4294      	cmp	r4, r2
   26944:	d101      	bne.n	2694a <friend_purge_old_ack+0x64>
	list->tail = node;
   26946:	f8ca 30a4 	str.w	r3, [sl, #164]	; 0xa4
			frnd->queue_size--;
   2694a:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
   2694e:	3b01      	subs	r3, #1
   26950:	f8ca 30a8 	str.w	r3, [sl, #168]	; 0xa8
			buf->frags = NULL;
   26954:	2300      	movs	r3, #0
   26956:	6023      	str	r3, [r4, #0]
			net_buf_unref(buf);
   26958:	4620      	mov	r0, r4
}
   2695a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			net_buf_unref(buf);
   2695e:	f7f5 bf83 	b.w	1c868 <net_buf_unref>
	return net_buf_simple_pull(&buf->b, len);
   26962:	2103      	movs	r1, #3
   26964:	4658      	mov	r0, fp
   26966:	f7f6 f895 	bl	1ca94 <net_buf_simple_pull>
	return net_buf_simple_pull_be16(&buf->b);
   2696a:	4658      	mov	r0, fp
   2696c:	f001 fadf 	bl	27f2e <net_buf_simple_pull_be16>
	if (src != net_buf_pull_be16(buf)) {
   26970:	4580      	cmp	r8, r0
   26972:	d1d7      	bne.n	26924 <friend_purge_old_ack+0x3e>
	net_buf_skip(buf, 2); /* skip dst */
   26974:	2102      	movs	r1, #2
   26976:	4620      	mov	r0, r4
   26978:	f7ff ff65 	bl	26846 <net_buf_skip>
	return net_buf_simple_pull_mem(&buf->b, len);
   2697c:	2101      	movs	r1, #1
   2697e:	4658      	mov	r0, fp
   26980:	f7f6 f8a4 	bl	1cacc <net_buf_simple_pull_mem>
	if (TRANS_CTL_OP((uint8_t *) net_buf_pull_mem(buf, 1)) != TRANS_CTL_OP_ACK) {
   26984:	7803      	ldrb	r3, [r0, #0]
   26986:	065b      	lsls	r3, r3, #25
   26988:	d1cc      	bne.n	26924 <friend_purge_old_ack+0x3e>
	return net_buf_simple_pull_be16(&buf->b);
   2698a:	4658      	mov	r0, fp
   2698c:	f001 facf 	bl	27f2e <net_buf_simple_pull_be16>
	found = ((net_buf_pull_be16(buf) >> 2) & TRANS_SEQ_ZERO_MASK) ==
   26990:	f3c0 038f 	ubfx	r3, r0, #2, #16
   26994:	6838      	ldr	r0, [r7, #0]
   26996:	4043      	eors	r3, r0
   26998:	f3c3 030c 	ubfx	r3, r3, #0, #13
   2699c:	fab3 f383 	clz	r3, r3
   269a0:	095b      	lsrs	r3, r3, #5
   269a2:	e7c0      	b.n	26926 <friend_purge_old_ack+0x40>
	parent->next = child;
   269a4:	602b      	str	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   269a6:	f8da 30a4 	ldr.w	r3, [sl, #164]	; 0xa4
   269aa:	429c      	cmp	r4, r3
	list->tail = node;
   269ac:	bf08      	it	eq
   269ae:	f8ca 50a4 	streq.w	r5, [sl, #164]	; 0xa4
   269b2:	e7ca      	b.n	2694a <friend_purge_old_ack+0x64>
	     cur != NULL; prev = cur, cur = sys_slist_peek_next(cur)) {
   269b4:	4625      	mov	r5, r4
   269b6:	6824      	ldr	r4, [r4, #0]
   269b8:	e79d      	b.n	268f6 <friend_purge_old_ack+0x10>

000269ba <purge_buffers>:
{
   269ba:	b538      	push	{r3, r4, r5, lr}
   269bc:	4604      	mov	r4, r0
		buf->frags = NULL;
   269be:	2500      	movs	r5, #0
Z_GENLIST_IS_EMPTY(slist)
   269c0:	6820      	ldr	r0, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   269c2:	b900      	cbnz	r0, 269c6 <purge_buffers+0xc>
}
   269c4:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   269c6:	6862      	ldr	r2, [r4, #4]
   269c8:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   269ca:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   269cc:	4290      	cmp	r0, r2
	list->tail = node;
   269ce:	bf08      	it	eq
   269d0:	6063      	streq	r3, [r4, #4]
		buf->flags &= ~NET_BUF_FRAGS;
   269d2:	7943      	ldrb	r3, [r0, #5]
		buf->frags = NULL;
   269d4:	6005      	str	r5, [r0, #0]
		buf->flags &= ~NET_BUF_FRAGS;
   269d6:	f023 0301 	bic.w	r3, r3, #1
   269da:	7143      	strb	r3, [r0, #5]
		net_buf_unref(buf);
   269dc:	f7f5 ff44 	bl	1c868 <net_buf_unref>
   269e0:	e7ee      	b.n	269c0 <purge_buffers+0x6>

000269e2 <is_seg>:
{
   269e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *buf = (void *)sys_slist_peek_head(&seg->queue);
   269e6:	6804      	ldr	r4, [r0, #0]
{
   269e8:	4689      	mov	r9, r1
   269ea:	4617      	mov	r7, r2
	if (!buf) {
   269ec:	b33c      	cbz	r4, 26a3e <is_seg+0x5c>
	net_buf_simple_save(&buf->b, &state);
   269ee:	f104 0608 	add.w	r6, r4, #8
	state->offset = net_buf_simple_headroom(buf);
   269f2:	4630      	mov	r0, r6
   269f4:	f001 faaf 	bl	27f56 <net_buf_simple_headroom>
	net_buf_skip(buf, 5);   /* skip IVI, NID, CTL, TTL, SEQ */
   269f8:	2105      	movs	r1, #5
   269fa:	4605      	mov	r5, r0
   269fc:	4620      	mov	r0, r4
	state->len = buf->len;
   269fe:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   26a02:	f7ff ff20 	bl	26846 <net_buf_skip>
	return net_buf_simple_pull_be16(&buf->b);
   26a06:	4630      	mov	r0, r6
   26a08:	f001 fa91 	bl	27f2e <net_buf_simple_pull_be16>
	net_buf_skip(buf, 3);   /* skip DST, OP/AID */
   26a0c:	2103      	movs	r1, #3
   26a0e:	4680      	mov	r8, r0
   26a10:	4620      	mov	r0, r4
   26a12:	f7ff ff18 	bl	26846 <net_buf_skip>
   26a16:	4630      	mov	r0, r6
   26a18:	f001 fa89 	bl	27f2e <net_buf_simple_pull_be16>
	buf->data = buf->__buf + state->offset;
   26a1c:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   26a1e:	f8a4 a00c 	strh.w	sl, [r4, #12]
	buf->data = buf->__buf + state->offset;
   26a22:	fa13 f585 	uxtah	r5, r3, r5
	return ((src == buf_src) && (seq_zero == buf_seq_zero));
   26a26:	45c1      	cmp	r9, r8
   26a28:	60a5      	str	r5, [r4, #8]
   26a2a:	d106      	bne.n	26a3a <is_seg+0x58>
   26a2c:	f3c0 008c 	ubfx	r0, r0, #2, #13
   26a30:	1bc3      	subs	r3, r0, r7
   26a32:	4258      	negs	r0, r3
   26a34:	4158      	adcs	r0, r3
}
   26a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return ((src == buf_src) && (seq_zero == buf_seq_zero));
   26a3a:	2000      	movs	r0, #0
   26a3c:	e7fb      	b.n	26a36 <is_seg+0x54>
		return false;
   26a3e:	4620      	mov	r0, r4
   26a40:	e7f9      	b.n	26a36 <is_seg+0x54>

00026a42 <friend_queue_has_space.part.18>:
static bool friend_queue_has_space(struct bt_mesh_friend *frnd, uint16_t addr,
   26a42:	b538      	push	{r3, r4, r5, lr}
   26a44:	4604      	mov	r4, r0
   26a46:	461d      	mov	r5, r3
		if (seq_auth && is_seg(seg, addr, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   26a48:	b942      	cbnz	r2, 26a5c <friend_queue_has_space.part.18+0x1a>
		total += seg->seg_count;
   26a4a:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
	return (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - total) > seg_count;
   26a4e:	f1c0 0010 	rsb	r0, r0, #16
   26a52:	42a8      	cmp	r0, r5
   26a54:	bf94      	ite	ls
   26a56:	2000      	movls	r0, #0
   26a58:	2001      	movhi	r0, #1
}
   26a5a:	bd38      	pop	{r3, r4, r5, pc}
		if (seq_auth && is_seg(seg, addr, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   26a5c:	8812      	ldrh	r2, [r2, #0]
   26a5e:	3090      	adds	r0, #144	; 0x90
   26a60:	f3c2 020c 	ubfx	r2, r2, #0, #13
   26a64:	f7ff ffbd 	bl	269e2 <is_seg>
   26a68:	2800      	cmp	r0, #0
   26a6a:	d0ee      	beq.n	26a4a <friend_queue_has_space.part.18+0x8>
   26a6c:	e7f5      	b.n	26a5a <friend_queue_has_space.part.18+0x18>

00026a6e <bt_mesh_friend_find>:
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   26a6e:	f7eb bf41 	b.w	128f4 <bt_mesh_friend_find.part.21>

00026a72 <bt_mesh_prov_buf_init>:
}

static inline void bt_mesh_prov_buf_init(struct net_buf_simple *buf, uint8_t type)
{
   26a72:	b538      	push	{r3, r4, r5, lr}
   26a74:	4604      	mov	r4, r0
   26a76:	460d      	mov	r5, r1
	net_buf_simple_reserve(buf, PROV_BEARER_BUF_HEADROOM);
   26a78:	2105      	movs	r1, #5
   26a7a:	f7f5 fe0b 	bl	1c694 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, type);
   26a7e:	4629      	mov	r1, r5
   26a80:	4620      	mov	r0, r4
}
   26a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, type);
   26a86:	f001 ba7e 	b.w	27f86 <net_buf_simple_add_u8>

00026a8a <prov_fail>:
	prov_send_fail_msg(reason);
   26a8a:	f7ec becd 	b.w	13828 <prov_send_fail_msg>

00026a8e <net_buf_add_u8>:
	return net_buf_simple_add_u8(&buf->b, val);
   26a8e:	3008      	adds	r0, #8
   26a90:	f001 ba79 	b.w	27f86 <net_buf_simple_add_u8>

00026a94 <pb_adv_reset>:

void pb_adv_reset(void)
{
	reset_adv_link();
   26a94:	f7ed bb02 	b.w	1409c <reset_adv_link>

00026a98 <clear_tx>:
}
   26a98:	4770      	bx	lr

00026a9a <protocol_timeout>:
	link_closed(PROV_BEARER_LINK_STATUS_TIMEOUT);
   26a9a:	2001      	movs	r0, #1
   26a9c:	f7ee b822 	b.w	14ae4 <link_closed>

00026aa0 <pb_gatt_reset>:

void pb_gatt_reset(void)
{
	reset_state();
   26aa0:	f7ee b80c 	b.w	14abc <reset_state>

00026aa4 <prov_ccc_changed>:
}
   26aa4:	4770      	bx	lr

00026aa6 <sub_count_cb>:
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   26aa6:	8b82      	ldrh	r2, [r0, #28]
   26aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26aac:	429a      	cmp	r2, r3
{
   26aae:	b510      	push	{r4, lr}
   26ab0:	460c      	mov	r4, r1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   26ab2:	d005      	beq.n	26ac0 <sub_count_cb+0x1a>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   26ab4:	7fc3      	ldrb	r3, [r0, #31]
   26ab6:	2b01      	cmp	r3, #1
   26ab8:	d104      	bne.n	26ac4 <sub_count_cb+0x1e>
		(*count)++;
   26aba:	6823      	ldr	r3, [r4, #0]
   26abc:	3301      	adds	r3, #1
   26abe:	6023      	str	r3, [r4, #0]
}
   26ac0:	2000      	movs	r0, #0
   26ac2:	bd10      	pop	{r4, pc}
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   26ac4:	f7fe fef4 	bl	258b0 <bt_mesh_gatt_proxy_get>
	if (advertise_subnet(sub)) {
   26ac8:	2801      	cmp	r0, #1
   26aca:	d1f9      	bne.n	26ac0 <sub_count_cb+0x1a>
   26acc:	e7f5      	b.n	26aba <sub_count_cb+0x14>

00026ace <filter_add>:
{
   26ace:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   26ad0:	b179      	cbz	r1, 26af2 <filter_add+0x24>
		if (client->filter[i] == addr) {
   26ad2:	8883      	ldrh	r3, [r0, #4]
   26ad4:	4299      	cmp	r1, r3
   26ad6:	d00c      	beq.n	26af2 <filter_add+0x24>
   26ad8:	88c4      	ldrh	r4, [r0, #6]
   26ada:	42a1      	cmp	r1, r4
   26adc:	d009      	beq.n	26af2 <filter_add+0x24>
   26ade:	8902      	ldrh	r2, [r0, #8]
   26ae0:	4291      	cmp	r1, r2
   26ae2:	d006      	beq.n	26af2 <filter_add+0x24>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
   26ae4:	b113      	cbz	r3, 26aec <filter_add+0x1e>
   26ae6:	b12c      	cbz	r4, 26af4 <filter_add+0x26>
   26ae8:	b91a      	cbnz	r2, 26af2 <filter_add+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   26aea:	2302      	movs	r3, #2
			client->filter[i] = addr;
   26aec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   26af0:	8081      	strh	r1, [r0, #4]
}
   26af2:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   26af4:	2301      	movs	r3, #1
   26af6:	e7f9      	b.n	26aec <filter_add+0x1e>

00026af8 <proxy_segment_and_send>:
{
   26af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26afc:	4688      	mov	r8, r1
   26afe:	4614      	mov	r4, r2
   26b00:	4607      	mov	r7, r0
	mtu = bt_gatt_get_mtu(conn) - 3;
   26b02:	f7fe fe15 	bl	25730 <bt_gatt_get_mtu>
	if (mtu > msg->len) {
   26b06:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
   26b08:	3803      	subs	r0, #3
   26b0a:	b285      	uxth	r5, r0
	if (mtu > msg->len) {
   26b0c:	42ab      	cmp	r3, r5
   26b0e:	f008 063f 	and.w	r6, r8, #63	; 0x3f
   26b12:	d20a      	bcs.n	26b2a <proxy_segment_and_send+0x32>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   26b14:	4631      	mov	r1, r6
   26b16:	4620      	mov	r0, r4
   26b18:	f001 f9e6 	bl	27ee8 <net_buf_simple_push_u8>
		return proxy_send(conn, msg->data, msg->len);
   26b1c:	88a2      	ldrh	r2, [r4, #4]
   26b1e:	6821      	ldr	r1, [r4, #0]
   26b20:	4638      	mov	r0, r7
}
   26b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return proxy_send(conn, msg->data, msg->len);
   26b26:	f7ee b96d 	b.w	14e04 <proxy_send>
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
   26b2a:	f046 0140 	orr.w	r1, r6, #64	; 0x40
   26b2e:	4620      	mov	r0, r4
   26b30:	f001 f9da 	bl	27ee8 <net_buf_simple_push_u8>
	proxy_send(conn, msg->data, mtu);
   26b34:	462a      	mov	r2, r5
   26b36:	6821      	ldr	r1, [r4, #0]
   26b38:	4638      	mov	r0, r7
   26b3a:	f7ee f963 	bl	14e04 <proxy_send>
	net_buf_simple_pull(msg, mtu);
   26b3e:	4629      	mov	r1, r5
   26b40:	4620      	mov	r0, r4
   26b42:	f7f5 ffa7 	bl	1ca94 <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   26b46:	f046 0680 	orr.w	r6, r6, #128	; 0x80
	while (msg->len) {
   26b4a:	88a3      	ldrh	r3, [r4, #4]
   26b4c:	b163      	cbz	r3, 26b68 <proxy_segment_and_send+0x70>
		if (msg->len + 1 < mtu) {
   26b4e:	3301      	adds	r3, #1
   26b50:	42ab      	cmp	r3, r5
   26b52:	da0c      	bge.n	26b6e <proxy_segment_and_send+0x76>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   26b54:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
   26b58:	4620      	mov	r0, r4
   26b5a:	f001 f9c5 	bl	27ee8 <net_buf_simple_push_u8>
			proxy_send(conn, msg->data, msg->len);
   26b5e:	88a2      	ldrh	r2, [r4, #4]
   26b60:	6821      	ldr	r1, [r4, #0]
   26b62:	4638      	mov	r0, r7
   26b64:	f7ee f94e 	bl	14e04 <proxy_send>
}
   26b68:	2000      	movs	r0, #0
   26b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   26b6e:	4631      	mov	r1, r6
   26b70:	4620      	mov	r0, r4
   26b72:	f001 f9b9 	bl	27ee8 <net_buf_simple_push_u8>
		proxy_send(conn, msg->data, mtu);
   26b76:	6821      	ldr	r1, [r4, #0]
   26b78:	462a      	mov	r2, r5
   26b7a:	4638      	mov	r0, r7
   26b7c:	f7ee f942 	bl	14e04 <proxy_send>
		net_buf_simple_pull(msg, mtu);
   26b80:	4629      	mov	r1, r5
   26b82:	4620      	mov	r0, r4
   26b84:	f7f5 ff86 	bl	1ca94 <net_buf_simple_pull>
   26b88:	e7df      	b.n	26b4a <proxy_segment_and_send+0x52>

00026b8a <beacon_send>:
{
   26b8a:	b530      	push	{r4, r5, lr}
   26b8c:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   26b8e:	ab04      	add	r3, sp, #16
   26b90:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
{
   26b94:	4604      	mov	r4, r0
   26b96:	460d      	mov	r5, r1
	net_buf_simple_reserve(&buf, 1);
   26b98:	a801      	add	r0, sp, #4
   26b9a:	2101      	movs	r1, #1
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   26b9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   26ba0:	9301      	str	r3, [sp, #4]
	net_buf_simple_reserve(&buf, 1);
   26ba2:	f7f5 fd77 	bl	1c694 <net_buf_simple_reserve>
	bt_mesh_beacon_create(sub, &buf);
   26ba6:	a901      	add	r1, sp, #4
   26ba8:	4628      	mov	r0, r5
   26baa:	f7e4 fecf 	bl	b94c <bt_mesh_beacon_create>
	return proxy_segment_and_send(conn, BT_MESH_PROXY_BEACON, &buf);
   26bae:	aa01      	add	r2, sp, #4
   26bb0:	2101      	movs	r1, #1
   26bb2:	4620      	mov	r0, r4
   26bb4:	f7ff ffa0 	bl	26af8 <proxy_segment_and_send>
}
   26bb8:	b00b      	add	sp, #44	; 0x2c
   26bba:	bd30      	pop	{r4, r5, pc}

00026bbc <send_beacon_cb>:
{
   26bbc:	460b      	mov	r3, r1
	return beacon_send(client->conn, sub);
   26bbe:	4601      	mov	r1, r0
   26bc0:	6818      	ldr	r0, [r3, #0]
   26bc2:	f7ff bfe2 	b.w	26b8a <beacon_send>

00026bc6 <proxy_ccc_changed>:
   26bc6:	4770      	bx	lr

00026bc8 <node_id_start>:
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   26bc8:	2301      	movs	r3, #1
{
   26bca:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   26bce:	4604      	mov	r4, r0
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   26bd0:	77c3      	strb	r3, [r0, #31]
   26bd2:	f001 fe4a 	bl	2886a <z_impl_k_uptime_ticks>
   26bd6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   26bda:	fba0 bc05 	umull	fp, ip, r0, r5
   26bde:	fb05 cc01 	mla	ip, r5, r1, ip
   26be2:	ea4f 32db 	mov.w	r2, fp, lsr #15
   26be6:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
	return (uint32_t)k_uptime_get();
   26bea:	6222      	str	r2, [r4, #32]
}
   26bec:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

00026bf0 <bt_mesh_proxy_identity_stop>:
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   26bf0:	2300      	movs	r3, #0
   26bf2:	77c3      	strb	r3, [r0, #31]
	sub->node_id_start = 0U;
   26bf4:	6203      	str	r3, [r0, #32]
}
   26bf6:	4770      	bx	lr

00026bf8 <bt_mesh_proxy_addr_add>:
	if (client->filter_type == WHITELIST) {
   26bf8:	f810 3c3e 	ldrb.w	r3, [r0, #-62]
   26bfc:	2b01      	cmp	r3, #1
{
   26bfe:	460a      	mov	r2, r1
	if (client->filter_type == WHITELIST) {
   26c00:	d102      	bne.n	26c08 <bt_mesh_proxy_addr_add+0x10>
		filter_add(client, addr);
   26c02:	3848      	subs	r0, #72	; 0x48
   26c04:	f7ff bf63 	b.w	26ace <filter_add>
	} else if (client->filter_type == BLACKLIST) {
   26c08:	2b02      	cmp	r3, #2
   26c0a:	d111      	bne.n	26c30 <bt_mesh_proxy_addr_add+0x38>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   26c0c:	b181      	cbz	r1, 26c30 <bt_mesh_proxy_addr_add+0x38>
		if (client->filter[i] == addr) {
   26c0e:	f830 1c44 	ldrh.w	r1, [r0, #-68]
   26c12:	4291      	cmp	r1, r2
   26c14:	d00d      	beq.n	26c32 <bt_mesh_proxy_addr_add+0x3a>
   26c16:	f830 1c42 	ldrh.w	r1, [r0, #-66]
   26c1a:	4291      	cmp	r1, r2
   26c1c:	d00b      	beq.n	26c36 <bt_mesh_proxy_addr_add+0x3e>
   26c1e:	f830 1c40 	ldrh.w	r1, [r0, #-64]
   26c22:	4291      	cmp	r1, r2
   26c24:	d104      	bne.n	26c30 <bt_mesh_proxy_addr_add+0x38>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   26c26:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   26c2a:	2300      	movs	r3, #0
   26c2c:	f820 3c44 	strh.w	r3, [r0, #-68]
}
   26c30:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   26c32:	2300      	movs	r3, #0
   26c34:	e7f7      	b.n	26c26 <bt_mesh_proxy_addr_add+0x2e>
   26c36:	2301      	movs	r3, #1
   26c38:	e7f5      	b.n	26c26 <bt_mesh_proxy_addr_add+0x2e>

00026c3a <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   26c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   26c3c:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   26c3e:	1dc3      	adds	r3, r0, #7
   26c40:	f023 0303 	bic.w	r3, r3, #3
{
   26c44:	460e      	mov	r6, r1
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   26c46:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   26c48:	3a01      	subs	r2, #1
   26c4a:	b294      	uxth	r4, r2
{
   26c4c:	4605      	mov	r5, r0
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   26c4e:	2204      	movs	r2, #4
   26c50:	2100      	movs	r1, #0
   26c52:	fb06 0004 	mla	r0, r6, r4, r0
   26c56:	f7fd faa4 	bl	241a2 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   26c5a:	f64f 77ff 	movw	r7, #65535	; 0xffff
   26c5e:	3c01      	subs	r4, #1
   26c60:	b2a4      	uxth	r4, r4
   26c62:	42bc      	cmp	r4, r7
   26c64:	d101      	bne.n	26c6a <mem_init+0x30>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   26c66:	b003      	add	sp, #12
   26c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   26c6a:	fb04 6006 	mla	r0, r4, r6, r6
		next = (uint32_t)((uint8_t *) mem_pool +
   26c6e:	182b      	adds	r3, r5, r0
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   26c70:	2204      	movs	r2, #4
   26c72:	1b80      	subs	r0, r0, r6
   26c74:	eb0d 0102 	add.w	r1, sp, r2
   26c78:	4428      	add	r0, r5
		next = (uint32_t)((uint8_t *) mem_pool +
   26c7a:	9301      	str	r3, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   26c7c:	f7fd fa67 	bl	2414e <memcpy>
   26c80:	e7ed      	b.n	26c5e <mem_init+0x24>

00026c82 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   26c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   26c84:	6804      	ldr	r4, [r0, #0]
{
   26c86:	4606      	mov	r6, r0
	if (*mem_head) {
   26c88:	b18c      	cbz	r4, 26cae <mem_acquire+0x2c>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   26c8a:	1de3      	adds	r3, r4, #7
   26c8c:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   26c90:	2204      	movs	r2, #4
   26c92:	4621      	mov	r1, r4
   26c94:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   26c98:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   26c9a:	f7fd fa58 	bl	2414e <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   26c9e:	9b01      	ldr	r3, [sp, #4]
   26ca0:	b123      	cbz	r3, 26cac <mem_acquire+0x2a>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   26ca2:	1dda      	adds	r2, r3, #7
   26ca4:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   26ca8:	3d01      	subs	r5, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   26caa:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
   26cac:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
   26cae:	4620      	mov	r0, r4
   26cb0:	b002      	add	sp, #8
   26cb2:	bd70      	pop	{r4, r5, r6, pc}

00026cb4 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   26cb4:	b570      	push	{r4, r5, r6, lr}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   26cb6:	680c      	ldr	r4, [r1, #0]
{
   26cb8:	4606      	mov	r6, r0
   26cba:	460d      	mov	r5, r1
	if (*mem_head) {
   26cbc:	b11c      	cbz	r4, 26cc6 <mem_release+0x12>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   26cbe:	1de3      	adds	r3, r4, #7
   26cc0:	f023 0303 	bic.w	r3, r3, #3
   26cc4:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   26cc6:	2204      	movs	r2, #4
   26cc8:	4629      	mov	r1, r5
   26cca:	4630      	mov	r0, r6
   26ccc:	f7fd fa3f 	bl	2414e <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   26cd0:	1df2      	adds	r2, r6, #7
   26cd2:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   26cd6:	1c63      	adds	r3, r4, #1
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   26cd8:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   26cda:	602e      	str	r6, [r5, #0]
}
   26cdc:	bd70      	pop	{r4, r5, r6, pc}

00026cde <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   26cde:	fb02 0001 	mla	r0, r2, r1, r0
   26ce2:	4770      	bx	lr

00026ce4 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   26ce4:	1a40      	subs	r0, r0, r1
   26ce6:	b280      	uxth	r0, r0
}
   26ce8:	fbb0 f0f2 	udiv	r0, r0, r2
   26cec:	4770      	bx	lr

00026cee <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
   26cee:	b510      	push	{r4, lr}
	src += len;
   26cf0:	4411      	add	r1, r2
	while (len--) {
   26cf2:	3801      	subs	r0, #1
   26cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26cf8:	3a01      	subs	r2, #1
   26cfa:	b292      	uxth	r2, r2
   26cfc:	429a      	cmp	r2, r3
   26cfe:	d100      	bne.n	26d02 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   26d00:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   26d02:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   26d06:	f800 4f01 	strb.w	r4, [r0, #1]!
   26d0a:	e7f5      	b.n	26cf8 <mem_rcopy+0xa>

00026d0c <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   26d0c:	4401      	add	r1, r0
   26d0e:	4288      	cmp	r0, r1
   26d10:	d101      	bne.n	26d16 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   26d12:	2000      	movs	r0, #0
   26d14:	4770      	bx	lr
		if (*src++) {
   26d16:	f810 3b01 	ldrb.w	r3, [r0], #1
   26d1a:	2b00      	cmp	r3, #0
   26d1c:	d0f7      	beq.n	26d0e <mem_nz+0x2>
			return 1;
   26d1e:	2001      	movs	r0, #1
}
   26d20:	4770      	bx	lr

00026d22 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   26d22:	6010      	str	r0, [r2, #0]
   26d24:	6008      	str	r0, [r1, #0]

	return link;
}
   26d26:	4770      	bx	lr

00026d28 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   26d28:	6803      	ldr	r3, [r0, #0]
   26d2a:	680a      	ldr	r2, [r1, #0]
   26d2c:	4293      	cmp	r3, r2
   26d2e:	f04f 0200 	mov.w	r2, #0
		return NULL;
   26d32:	bf12      	itee	ne
   26d34:	4613      	movne	r3, r2
	}

	old_head = *head;
	*head = *tail = NULL;
   26d36:	600a      	streq	r2, [r1, #0]
   26d38:	6002      	streq	r2, [r0, #0]

	return old_head;
}
   26d3a:	4618      	mov	r0, r3
   26d3c:	4770      	bx	lr

00026d3e <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   26d3e:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   26d40:	6814      	ldr	r4, [r2, #0]
   26d42:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   26d44:	6814      	ldr	r4, [r2, #0]
   26d46:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
   26d48:	6010      	str	r0, [r2, #0]

	return link;
}
   26d4a:	bd10      	pop	{r4, pc}

00026d4c <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   26d4c:	4288      	cmp	r0, r1
   26d4e:	d003      	beq.n	26d58 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   26d50:	b11a      	cbz	r2, 26d5a <memq_peek+0xe>
		*mem = head->mem;
   26d52:	6843      	ldr	r3, [r0, #4]
   26d54:	6013      	str	r3, [r2, #0]
   26d56:	4770      	bx	lr
		return NULL;
   26d58:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   26d5a:	4770      	bx	lr

00026d5c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   26d5c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   26d5e:	4283      	cmp	r3, r0
   26d60:	d009      	beq.n	26d76 <memq_dequeue+0x1a>
	if (mem) {
   26d62:	b122      	cbz	r2, 26d6e <memq_dequeue+0x12>
		*mem = head->mem;
   26d64:	6858      	ldr	r0, [r3, #4]
   26d66:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   26d68:	681a      	ldr	r2, [r3, #0]
   26d6a:	600a      	str	r2, [r1, #0]

	return old_head;
   26d6c:	e001      	b.n	26d72 <memq_dequeue+0x16>
	if (old_head == NULL) {
   26d6e:	2b00      	cmp	r3, #0
   26d70:	d1fa      	bne.n	26d68 <memq_dequeue+0xc>
}
   26d72:	4618      	mov	r0, r3
   26d74:	4770      	bx	lr
		return NULL; /* queue is empty */
   26d76:	2300      	movs	r3, #0
   26d78:	e7fb      	b.n	26d72 <memq_dequeue+0x16>

00026d7a <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
   26d7a:	b510      	push	{r4, lr}
   26d7c:	1e42      	subs	r2, r0, #1
	uint8_t one_count = 0U;
   26d7e:	2000      	movs	r0, #0

	while (octets_len--) {
   26d80:	3901      	subs	r1, #1
   26d82:	b2c9      	uxtb	r1, r1
   26d84:	29ff      	cmp	r1, #255	; 0xff
   26d86:	d100      	bne.n	26d8a <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   26d88:	bd10      	pop	{r4, pc}
		bite = *octets;
   26d8a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   26d8e:	2b00      	cmp	r3, #0
   26d90:	d0f6      	beq.n	26d80 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   26d92:	b25b      	sxtb	r3, r3
   26d94:	1e5c      	subs	r4, r3, #1
   26d96:	4023      	ands	r3, r4
			one_count++;
   26d98:	3001      	adds	r0, #1
			bite &= (bite - 1);
   26d9a:	b2db      	uxtb	r3, r3
			one_count++;
   26d9c:	b2c0      	uxtb	r0, r0
   26d9e:	e7f6      	b.n	26d8e <util_ones_count_get+0x14>

00026da0 <ticks_to_expire_prep>:
{
   26da0:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   26da2:	1a55      	subs	r5, r2, r1
   26da4:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   26da8:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   26daa:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   26dac:	d109      	bne.n	26dc2 <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   26dae:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   26db2:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   26db4:	42a2      	cmp	r2, r4
   26db6:	d90e      	bls.n	26dd6 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   26db8:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0U;
   26dba:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   26dbc:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   26dbe:	6144      	str	r4, [r0, #20]
}
   26dc0:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   26dc2:	1a8a      	subs	r2, r1, r2
   26dc4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   26dc8:	4293      	cmp	r3, r2
   26dca:	d901      	bls.n	26dd0 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   26dcc:	1a9a      	subs	r2, r3, r2
   26dce:	e7f1      	b.n	26db4 <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   26dd0:	4422      	add	r2, r4
   26dd2:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0U;
   26dd4:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   26dd6:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0U;
   26dd8:	2200      	movs	r2, #0
   26dda:	e7ef      	b.n	26dbc <ticks_to_expire_prep+0x1c>

00026ddc <ticker_job_op_cb>:
{
   26ddc:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   26dde:	2200      	movs	r2, #0
   26de0:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   26de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	user_op->status = status;
   26de4:	6299      	str	r1, [r3, #40]	; 0x28
{
   26de6:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   26de8:	b10a      	cbz	r2, 26dee <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   26dea:	6b19      	ldr	r1, [r3, #48]	; 0x30
   26dec:	4710      	bx	r2
}
   26dee:	4770      	bx	lr

00026df0 <ticker_job_list_insert>:
{
   26df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26df4:	b08b      	sub	sp, #44	; 0x2c
	node = &instance->nodes[0];
   26df6:	6803      	ldr	r3, [r0, #0]
   26df8:	9302      	str	r3, [sp, #8]
	count_user = instance->count_user;
   26dfa:	f890 b009 	ldrb.w	fp, [r0, #9]
	users = &instance->users[0];
   26dfe:	6843      	ldr	r3, [r0, #4]
   26e00:	9307      	str	r3, [sp, #28]
{
   26e02:	4607      	mov	r7, r0
   26e04:	468a      	mov	sl, r1
	while (count_user--) {
   26e06:	f10b 33ff 	add.w	r3, fp, #4294967295
   26e0a:	fa5f fb83 	uxtb.w	fp, r3
   26e0e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   26e12:	d102      	bne.n	26e1a <ticker_job_list_insert+0x2a>
}
   26e14:	b00b      	add	sp, #44	; 0x2c
   26e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		user = &users[count_user];
   26e1a:	9b07      	ldr	r3, [sp, #28]
   26e1c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   26e20:	9301      	str	r3, [sp, #4]
		user_ops = (void *)&user->user_op[0];
   26e22:	685b      	ldr	r3, [r3, #4]
   26e24:	9304      	str	r3, [sp, #16]
		user_ops_first = user->first;
   26e26:	9b01      	ldr	r3, [sp, #4]
   26e28:	785e      	ldrb	r6, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
   26e2a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   26e2e:	d071      	beq.n	26f14 <ticker_job_list_insert+0x124>
				ticker = &node[id_insert];
   26e30:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   26e34:	011b      	lsls	r3, r3, #4
   26e36:	9a02      	ldr	r2, [sp, #8]
   26e38:	46d0      	mov	r8, sl
				insert_head = ticker->next;
   26e3a:	f812 a003 	ldrb.w	sl, [r2, r3]
				ticker = &node[id_insert];
   26e3e:	18d4      	adds	r4, r2, r3
				user_op = NULL;
   26e40:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   26e42:	23ff      	movs	r3, #255	; 0xff
   26e44:	7023      	strb	r3, [r4, #0]
	ticker_new = &node[id];
   26e46:	fa0f f288 	sxth.w	r2, r8
	node = &instance->nodes[0];
   26e4a:	6839      	ldr	r1, [r7, #0]
	previous = TICKER_NULL;
   26e4c:	9303      	str	r3, [sp, #12]
	ticker_new = &node[id];
   26e4e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   26e52:	0112      	lsls	r2, r2, #4
   26e54:	eb01 0902 	add.w	r9, r1, r2
   26e58:	9205      	str	r2, [sp, #20]
	ticks_to_expire = ticker_new->ticks_to_expire;
   26e5a:	f8d9 0008 	ldr.w	r0, [r9, #8]
	current = instance->ticker_id_head;
   26e5e:	7f7a      	ldrb	r2, [r7, #29]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   26e60:	2aff      	cmp	r2, #255	; 0xff
   26e62:	d00b      	beq.n	26e7c <ticker_job_list_insert+0x8c>
		(ticker_current = &node[current])->ticks_to_expire))) {
   26e64:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
   26e68:	ea4f 130e 	mov.w	r3, lr, lsl #4
   26e6c:	9306      	str	r3, [sp, #24]
   26e6e:	18cb      	adds	r3, r1, r3
   26e70:	469e      	mov	lr, r3
		(ticks_to_expire_current =
   26e72:	f8d3 c008 	ldr.w	ip, [r3, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   26e76:	4560      	cmp	r0, ip
   26e78:	f080 8082 	bcs.w	26f80 <ticker_job_list_insert+0x190>
	ticker_new->next = current;
   26e7c:	9b05      	ldr	r3, [sp, #20]
	ticker_new->ticks_to_expire = ticks_to_expire;
   26e7e:	f8c9 0008 	str.w	r0, [r9, #8]
	ticker_new->next = current;
   26e82:	54ca      	strb	r2, [r1, r3]
	if (previous == TICKER_NULL) {
   26e84:	9b03      	ldr	r3, [sp, #12]
   26e86:	2bff      	cmp	r3, #255	; 0xff
		node[previous].next = id;
   26e88:	bf17      	itett	ne
   26e8a:	f9bd 300c 	ldrshne.w	r3, [sp, #12]
		instance->ticker_id_head = id;
   26e8e:	f887 801d 	strbeq.w	r8, [r7, #29]
		node[previous].next = id;
   26e92:	eb03 0343 	addne.w	r3, r3, r3, lsl #1
   26e96:	011b      	lslne	r3, r3, #4
   26e98:	bf18      	it	ne
   26e9a:	f801 8003 	strbne.w	r8, [r1, r3]
	if (current != TICKER_NULL) {
   26e9e:	2aff      	cmp	r2, #255	; 0xff
   26ea0:	d006      	beq.n	26eb0 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   26ea2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   26ea6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   26eaa:	6893      	ldr	r3, [r2, #8]
   26eac:	1a18      	subs	r0, r3, r0
   26eae:	6090      	str	r0, [r2, #8]
	ticker->req = ticker->ack + 1;
   26eb0:	78a3      	ldrb	r3, [r4, #2]
   26eb2:	3301      	adds	r3, #1
   26eb4:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   26eb6:	2d00      	cmp	r5, #0
   26eb8:	d0b7      	beq.n	26e2a <ticker_job_list_insert+0x3a>
				ticker_job_op_cb(user_op, status);
   26eba:	2100      	movs	r1, #0
   26ebc:	4628      	mov	r0, r5
   26ebe:	f7ff ff8d 	bl	26ddc <ticker_job_op_cb>
				if ((ticker->ticks_periodic == 0U) &&
   26ec2:	6863      	ldr	r3, [r4, #4]
   26ec4:	2b00      	cmp	r3, #0
   26ec6:	d1b0      	bne.n	26e2a <ticker_job_list_insert+0x3a>
					ticker->fp_op_func =
   26ec8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   26eca:	6223      	str	r3, [r4, #32]
					ticker->op_context =
   26ecc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   26ece:	6263      	str	r3, [r4, #36]	; 0x24
   26ed0:	e7ab      	b.n	26e2a <ticker_job_list_insert+0x3a>
				user_op = &user_ops[user_ops_first];
   26ed2:	9a04      	ldr	r2, [sp, #16]
   26ed4:	2334      	movs	r3, #52	; 0x34
   26ed6:	fb16 f303 	smulbb	r3, r6, r3
   26eda:	18d5      	adds	r5, r2, r3
				if (first == user->count_user_op) {
   26edc:	9a01      	ldr	r2, [sp, #4]
				first = user_ops_first + 1;
   26ede:	3601      	adds	r6, #1
				if (first == user->count_user_op) {
   26ee0:	7812      	ldrb	r2, [r2, #0]
				first = user_ops_first + 1;
   26ee2:	b2f6      	uxtb	r6, r6
					first = 0U;
   26ee4:	42b2      	cmp	r2, r6
   26ee6:	bf08      	it	eq
   26ee8:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   26eea:	9a04      	ldr	r2, [sp, #16]
   26eec:	5cd3      	ldrb	r3, [r2, r3]
   26eee:	2b04      	cmp	r3, #4
   26ef0:	d110      	bne.n	26f14 <ticker_job_list_insert+0x124>
				id_insert = user_op->id;
   26ef2:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   26ef6:	9b02      	ldr	r3, [sp, #8]
   26ef8:	eb08 0448 	add.w	r4, r8, r8, lsl #1
   26efc:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				if (((ticker->req -
   26f00:	7863      	ldrb	r3, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   26f02:	78a2      	ldrb	r2, [r4, #2]
				if (((ticker->req -
   26f04:	1a9b      	subs	r3, r3, r2
   26f06:	f013 0fff 	tst.w	r3, #255	; 0xff
   26f0a:	d008      	beq.n	26f1e <ticker_job_list_insert+0x12e>
					ticker_job_op_cb(user_op,
   26f0c:	2101      	movs	r1, #1
   26f0e:	4628      	mov	r0, r5
   26f10:	f7ff ff64 	bl	26ddc <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   26f14:	9b01      	ldr	r3, [sp, #4]
   26f16:	789b      	ldrb	r3, [r3, #2]
   26f18:	42b3      	cmp	r3, r6
   26f1a:	d1da      	bne.n	26ed2 <ticker_job_list_insert+0xe2>
   26f1c:	e773      	b.n	26e06 <ticker_job_list_insert+0x16>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   26f1e:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   26f20:	6979      	ldr	r1, [r7, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   26f22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   26f26:	4293      	cmp	r3, r2
   26f28:	d006      	beq.n	26f38 <ticker_job_list_insert+0x148>
		ticker->must_expire =
   26f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   26f2e:	1a98      	subs	r0, r3, r2
   26f30:	4242      	negs	r2, r0
   26f32:	4142      	adcs	r2, r0
   26f34:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   26f38:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   26f3a:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   26f3c:	68ea      	ldr	r2, [r5, #12]
   26f3e:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   26f40:	692a      	ldr	r2, [r5, #16]
   26f42:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   26f44:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   26f48:	4293      	cmp	r3, r2
   26f4a:	bf88      	it	hi
   26f4c:	2300      	movhi	r3, #0
   26f4e:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   26f50:	69ab      	ldr	r3, [r5, #24]
   26f52:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   26f54:	69eb      	ldr	r3, [r5, #28]
   26f56:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   26f58:	6a2b      	ldr	r3, [r5, #32]
   26f5a:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
   26f5c:	f04f 0900 	mov.w	r9, #0
	ticker->ticks_to_expire = start->ticks_first;
   26f60:	68ab      	ldr	r3, [r5, #8]
   26f62:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   26f64:	f8c4 9014 	str.w	r9, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   26f68:	686a      	ldr	r2, [r5, #4]
   26f6a:	4620      	mov	r0, r4
   26f6c:	f7ff ff18 	bl	26da0 <ticks_to_expire_prep>
	ticker->force = 1U;
   26f70:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   26f74:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   26f78:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   26f7c:	70e3      	strb	r3, [r4, #3]
   26f7e:	e760      	b.n	26e42 <ticker_job_list_insert+0x52>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   26f80:	ebb0 000c 	subs.w	r0, r0, ip
   26f84:	d10a      	bne.n	26f9c <ticker_job_list_insert+0x1ac>
   26f86:	f8b9 301e 	ldrh.w	r3, [r9, #30]
   26f8a:	9308      	str	r3, [sp, #32]
   26f8c:	f8be 301e 	ldrh.w	r3, [lr, #30]
   26f90:	9309      	str	r3, [sp, #36]	; 0x24
   26f92:	9b08      	ldr	r3, [sp, #32]
   26f94:	469e      	mov	lr, r3
   26f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26f98:	459e      	cmp	lr, r3
   26f9a:	d803      	bhi.n	26fa4 <ticker_job_list_insert+0x1b4>
		current = ticker_current->next;
   26f9c:	9b06      	ldr	r3, [sp, #24]
   26f9e:	9203      	str	r2, [sp, #12]
   26fa0:	5cca      	ldrb	r2, [r1, r3]
   26fa2:	e75d      	b.n	26e60 <ticker_job_list_insert+0x70>
		(ticks_to_expire_current =
   26fa4:	4660      	mov	r0, ip
   26fa6:	e769      	b.n	26e7c <ticker_job_list_insert+0x8c>

00026fa8 <ticker_worker>:
{
   26fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   26fac:	7f86      	ldrb	r6, [r0, #30]
	instance->worker_trigger = 1U;
   26fae:	2301      	movs	r3, #1
{
   26fb0:	b08b      	sub	sp, #44	; 0x2c
   26fb2:	4605      	mov	r5, r0
	instance->worker_trigger = 1U;
   26fb4:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   26fb6:	b91e      	cbnz	r6, 26fc0 <ticker_worker+0x18>
	if (instance->ticker_id_head == TICKER_NULL) {
   26fb8:	7f43      	ldrb	r3, [r0, #29]
   26fba:	2bff      	cmp	r3, #255	; 0xff
   26fbc:	d103      	bne.n	26fc6 <ticker_worker+0x1e>
		instance->worker_trigger = 0U;
   26fbe:	77c6      	strb	r6, [r0, #31]
}
   26fc0:	b00b      	add	sp, #44	; 0x2c
   26fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   26fc6:	f7f4 fdaf 	bl	1bb28 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   26fca:	696b      	ldr	r3, [r5, #20]
	ticker_id_head = instance->ticker_id_head;
   26fcc:	7f6f      	ldrb	r7, [r5, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   26fce:	1ac0      	subs	r0, r0, r3
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   26fd0:	7f2b      	ldrb	r3, [r5, #28]
   26fd2:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   26fd4:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   26fd8:	d004      	beq.n	26fe4 <ticker_worker+0x3c>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   26fda:	69ae      	ldr	r6, [r5, #24]
	uint8_t slot_reserved = 0;
   26fdc:	455e      	cmp	r6, fp
   26fde:	bf94      	ite	ls
   26fe0:	2600      	movls	r6, #0
   26fe2:	2601      	movhi	r6, #1
	ticks_expired = 0U;
   26fe4:	2300      	movs	r3, #0
	node = &instance->nodes[0];
   26fe6:	f8d5 8000 	ldr.w	r8, [r5]
	ticks_expired = 0U;
   26fea:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
   26fec:	2fff      	cmp	r7, #255	; 0xff
   26fee:	d11a      	bne.n	27026 <ticker_worker+0x7e>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   26ff0:	7aea      	ldrb	r2, [r5, #11]
   26ff2:	7aab      	ldrb	r3, [r5, #10]
   26ff4:	4293      	cmp	r3, r2
   26ff6:	d105      	bne.n	27004 <ticker_worker+0x5c>
	uint8_t idx = *ticks_elapsed_index + 1;
   26ff8:	3301      	adds	r3, #1
   26ffa:	b2db      	uxtb	r3, r3
		idx = 0U;
   26ffc:	2b02      	cmp	r3, #2
   26ffe:	bf08      	it	eq
   27000:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   27002:	72eb      	strb	r3, [r5, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   27004:	7aeb      	ldrb	r3, [r5, #11]
   27006:	9a01      	ldr	r2, [sp, #4]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   27008:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   2700a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2700e:	2104      	movs	r1, #4
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   27010:	60da      	str	r2, [r3, #12]
	instance->worker_trigger = 0U;
   27012:	2300      	movs	r3, #0
   27014:	77eb      	strb	r3, [r5, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   27016:	2201      	movs	r2, #1
   27018:	462b      	mov	r3, r5
   2701a:	2003      	movs	r0, #3
   2701c:	46a4      	mov	ip, r4
}
   2701e:	b00b      	add	sp, #44	; 0x2c
   27020:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   27024:	4760      	bx	ip
		ticker = &node[ticker_id_head];
   27026:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   2702a:	013f      	lsls	r7, r7, #4
   2702c:	eb08 0407 	add.w	r4, r8, r7
		ticks_to_expire = ticker->ticks_to_expire;
   27030:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   27032:	459b      	cmp	fp, r3
   27034:	d3dc      	bcc.n	26ff0 <ticker_worker+0x48>
		ticks_expired += ticks_to_expire;
   27036:	9a01      	ldr	r2, [sp, #4]
		ticker_id_head = ticker->next;
   27038:	f818 7007 	ldrb.w	r7, [r8, r7]
		ticks_expired += ticks_to_expire;
   2703c:	441a      	add	r2, r3
		ticks_elapsed -= ticks_to_expire;
   2703e:	ebab 0b03 	sub.w	fp, fp, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   27042:	78a3      	ldrb	r3, [r4, #2]
   27044:	9302      	str	r3, [sp, #8]
		ticks_expired += ticks_to_expire;
   27046:	9201      	str	r2, [sp, #4]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   27048:	7863      	ldrb	r3, [r4, #1]
   2704a:	9a02      	ldr	r2, [sp, #8]
   2704c:	1a9b      	subs	r3, r3, r2
   2704e:	b2db      	uxtb	r3, r3
   27050:	2b01      	cmp	r3, #1
   27052:	d1cb      	bne.n	26fec <ticker_worker+0x44>
		if (ticker->ticks_slot != 0U &&
   27054:	69a3      	ldr	r3, [r4, #24]
   27056:	9303      	str	r3, [sp, #12]
   27058:	2b00      	cmp	r3, #0
   2705a:	d030      	beq.n	270be <ticker_worker+0x116>
   2705c:	2e00      	cmp	r6, #0
   2705e:	f040 8095 	bne.w	2718c <ticker_worker+0x1e4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   27062:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   27066:	9304      	str	r3, [sp, #16]
   27068:	3380      	adds	r3, #128	; 0x80
   2706a:	d028      	beq.n	270be <ticker_worker+0x116>
   2706c:	2fff      	cmp	r7, #255	; 0xff
   2706e:	d026      	beq.n	270be <ticker_worker+0x116>
		int32_t lazy_current = ticker->lazy_current;
   27070:	8be1      	ldrh	r1, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   27072:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   27074:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
   27076:	2000      	movs	r0, #0
		if (lazy_current >= ticker->lazy_periodic) {
   27078:	4299      	cmp	r1, r3
		uint32_t acc_ticks_to_expire = 0U;
   2707a:	9005      	str	r0, [sp, #20]
				(lazy_current - ticker->priority);
   2707c:	9804      	ldr	r0, [sp, #16]
			lazy_current -= ticker->lazy_periodic;
   2707e:	bf28      	it	cs
   27080:	1ac9      	subcs	r1, r1, r3
		uint32_t current_age = ticker->ticks_periodic +
   27082:	fb01 2302 	mla	r3, r1, r2, r2
				(lazy_current - ticker->priority);
   27086:	1a09      	subs	r1, r1, r0
		uint32_t current_age = ticker->ticks_periodic +
   27088:	9308      	str	r3, [sp, #32]
				(lazy_current - ticker->priority);
   2708a:	9109      	str	r1, [sp, #36]	; 0x24
		uint32_t current_age = ticker->ticks_periodic +
   2708c:	463b      	mov	r3, r7
			struct ticker_node *ticker_next = &nodes[id_head];
   2708e:	b21b      	sxth	r3, r3
   27090:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27094:	011b      	lsls	r3, r3, #4
   27096:	eb08 0a03 	add.w	sl, r8, r3
   2709a:	9307      	str	r3, [sp, #28]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   2709c:	f8da 9008 	ldr.w	r9, [sl, #8]
   270a0:	9b05      	ldr	r3, [sp, #20]
   270a2:	444b      	add	r3, r9
   270a4:	9305      	str	r3, [sp, #20]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   270a6:	9905      	ldr	r1, [sp, #20]
   270a8:	9b03      	ldr	r3, [sp, #12]
   270aa:	428b      	cmp	r3, r1
   270ac:	d307      	bcc.n	270be <ticker_worker+0x116>
			if (ticker_next->ticks_slot == 0U) {
   270ae:	f8da 3018 	ldr.w	r3, [sl, #24]
   270b2:	bb73      	cbnz	r3, 27112 <ticker_worker+0x16a>
			id_head = ticker_next->next;
   270b4:	9b07      	ldr	r3, [sp, #28]
   270b6:	f818 3003 	ldrb.w	r3, [r8, r3]
		while (id_head != TICKER_NULL) {
   270ba:	2bff      	cmp	r3, #255	; 0xff
   270bc:	d1e7      	bne.n	2708e <ticker_worker+0xe6>
		must_expire_skip = 0U;
   270be:	f04f 0900 	mov.w	r9, #0
		if (ticker->ext_data) {
   270c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   270c4:	b113      	cbz	r3, 270cc <ticker_worker+0x124>
			ticker->ext_data->ticks_drift = 0U;
   270c6:	2200      	movs	r2, #0
   270c8:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
   270ca:	721a      	strb	r2, [r3, #8]
		ticker->ack--;
   270cc:	9b02      	ldr	r3, [sp, #8]
		if (ticker->timeout_func) {
   270ce:	f8d4 a00c 	ldr.w	sl, [r4, #12]
		ticker->ack--;
   270d2:	3b01      	subs	r3, #1
   270d4:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   270d6:	f1ba 0f00 	cmp.w	sl, #0
   270da:	d087      	beq.n	26fec <ticker_worker+0x44>
					   ticks_expired -
   270dc:	9b01      	ldr	r3, [sp, #4]
   270de:	6960      	ldr	r0, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   270e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   270e2:	1a18      	subs	r0, r3, r0
   270e4:	696b      	ldr	r3, [r5, #20]
   270e6:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   270e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   270ec:	f1b9 0f00 	cmp.w	r9, #0
   270f0:	d175      	bne.n	271de <ticker_worker+0x236>
   270f2:	8be2      	ldrh	r2, [r4, #30]
   270f4:	6923      	ldr	r3, [r4, #16]
   270f6:	47d0      	blx	sl
			if (must_expire_skip == 0U) {
   270f8:	f1b9 0f00 	cmp.w	r9, #0
   270fc:	f47f af76 	bne.w	26fec <ticker_worker+0x44>
				if (ticker->ticks_slot != 0U) {
   27100:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   27102:	f8a4 901e 	strh.w	r9, [r4, #30]
					slot_reserved = 1U;
   27106:	2b00      	cmp	r3, #0
				ticker->force = 0U;
   27108:	f884 9003 	strb.w	r9, [r4, #3]
					slot_reserved = 1U;
   2710c:	bf18      	it	ne
   2710e:	2601      	movne	r6, #1
   27110:	e76c      	b.n	26fec <ticker_worker+0x44>
			int32_t lazy_next = ticker_next->lazy_current;
   27112:	f8ba 101e 	ldrh.w	r1, [sl, #30]
				ticker_next->lazy_periodic > lazy_next;
   27116:	f8ba c01c 	ldrh.w	ip, [sl, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   2711a:	f8da e004 	ldr.w	lr, [sl, #4]
			int32_t lazy_next = ticker_next->lazy_current;
   2711e:	9106      	str	r1, [sp, #24]
			if (!lazy_next_periodic_skip) {
   27120:	4561      	cmp	r1, ip
				lazy_next -= ticker_next->lazy_periodic;
   27122:	bf24      	itt	cs
   27124:	eba1 030c 	subcs.w	r3, r1, ip
   27128:	9306      	strcs	r3, [sp, #24]
				ticker_next->priority;
   2712a:	f99a 002d 	ldrsb.w	r0, [sl, #45]	; 0x2d
					  0U :
   2712e:	f1be 0f00 	cmp.w	lr, #0
   27132:	d049      	beq.n	271c8 <ticker_worker+0x220>
   27134:	ebae 0909 	sub.w	r9, lr, r9
				(ticker->ticks_periodic == 0U) ||
   27138:	2a00      	cmp	r2, #0
   2713a:	d047      	beq.n	271cc <ticker_worker+0x224>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   2713c:	9b06      	ldr	r3, [sp, #24]
   2713e:	fb0e 9e03 	mla	lr, lr, r3, r9
				(ticker->ticks_periodic == 0U) ||
   27142:	9b08      	ldr	r3, [sp, #32]
   27144:	4573      	cmp	r3, lr
   27146:	bf8c      	ite	hi
   27148:	f04f 0901 	movhi.w	r9, #1
   2714c:	f04f 0900 	movls.w	r9, #0
					(ticker->ticks_periodic != 0U) &&
   27150:	bf34      	ite	cc
   27152:	f04f 0e01 	movcc.w	lr, #1
   27156:	f04f 0e00 	movcs.w	lr, #0
			if (!lazy_next_periodic_skip &&
   2715a:	4561      	cmp	r1, ip
			uint8_t next_force = (ticker_next->force > ticker->force);
   2715c:	f89a 3003 	ldrb.w	r3, [sl, #3]
   27160:	f894 a003 	ldrb.w	sl, [r4, #3]
			if (!lazy_next_periodic_skip &&
   27164:	d3a6      	bcc.n	270b4 <ticker_worker+0x10c>
   27166:	4553      	cmp	r3, sl
   27168:	d810      	bhi.n	2718c <ticker_worker+0x1e4>
			    (next_force ||
   2716a:	f110 0f80 	cmn.w	r0, #128	; 0x80
   2716e:	d00d      	beq.n	2718c <ticker_worker+0x1e4>
				(lazy_next - ticker_next->priority) >
   27170:	9b06      	ldr	r3, [sp, #24]
			     next_is_critical ||
   27172:	9909      	ldr	r1, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   27174:	1a1b      	subs	r3, r3, r0
			     next_is_critical ||
   27176:	428b      	cmp	r3, r1
   27178:	dd02      	ble.n	27180 <ticker_worker+0x1d8>
			     (next_has_priority && !current_is_older) ||
   2717a:	f1b9 0f00 	cmp.w	r9, #0
   2717e:	d005      	beq.n	2718c <ticker_worker+0x1e4>
   27180:	9b04      	ldr	r3, [sp, #16]
   27182:	4283      	cmp	r3, r0
   27184:	d196      	bne.n	270b4 <ticker_worker+0x10c>
			     (equal_priority && next_is_older))) {
   27186:	f1be 0f00 	cmp.w	lr, #0
   2718a:	d093      	beq.n	270b4 <ticker_worker+0x10c>
			struct ticker_ext *ext_data = ticker->ext_data;
   2718c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   2718e:	8be2      	ldrh	r2, [r4, #30]
   27190:	b14b      	cbz	r3, 271a6 <ticker_worker+0x1fe>
   27192:	6819      	ldr	r1, [r3, #0]
   27194:	b1f1      	cbz	r1, 271d4 <ticker_worker+0x22c>
			    ext_data->ticks_slot_window != 0U &&
   27196:	7a19      	ldrb	r1, [r3, #8]
   27198:	b9e1      	cbnz	r1, 271d4 <ticker_worker+0x22c>
			    TICKER_RESCHEDULE_STATE_NONE &&
   2719a:	8ba1      	ldrh	r1, [r4, #28]
   2719c:	4291      	cmp	r1, r2
   2719e:	d819      	bhi.n	271d4 <ticker_worker+0x22c>
				ext_data->reschedule_state =
   271a0:	f04f 0101 	mov.w	r1, #1
				ext_data->reschedule_state =
   271a4:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
   271a6:	3201      	adds	r2, #1
			if ((ticker->must_expire == 0U) ||
   271a8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   271ac:	b292      	uxth	r2, r2
   271ae:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   271b0:	b131      	cbz	r1, 271c0 <ticker_worker+0x218>
   271b2:	8ba1      	ldrh	r1, [r4, #28]
   271b4:	4291      	cmp	r1, r2
   271b6:	d203      	bcs.n	271c0 <ticker_worker+0x218>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   271b8:	b173      	cbz	r3, 271d8 <ticker_worker+0x230>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   271ba:	7a1b      	ldrb	r3, [r3, #8]
   271bc:	2b01      	cmp	r3, #1
   271be:	d10b      	bne.n	271d8 <ticker_worker+0x230>
				ticker->ack--;
   271c0:	9b02      	ldr	r3, [sp, #8]
   271c2:	3b01      	subs	r3, #1
   271c4:	70a3      	strb	r3, [r4, #2]
				continue;
   271c6:	e711      	b.n	26fec <ticker_worker+0x44>
					  0U :
   271c8:	46f1      	mov	r9, lr
   271ca:	e7b5      	b.n	27138 <ticker_worker+0x190>
				(ticker->ticks_periodic == 0U) ||
   271cc:	f04f 0901 	mov.w	r9, #1
					(ticker->ticks_periodic != 0U) &&
   271d0:	4696      	mov	lr, r2
   271d2:	e7c2      	b.n	2715a <ticker_worker+0x1b2>
				ext_data->reschedule_state =
   271d4:	2100      	movs	r1, #0
   271d6:	e7e5      	b.n	271a4 <ticker_worker+0x1fc>
			must_expire_skip = 1U;
   271d8:	f04f 0901 	mov.w	r9, #1
   271dc:	e771      	b.n	270c2 <ticker_worker+0x11a>
			ticker->timeout_func(ticks_at_expire,
   271de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   271e2:	e787      	b.n	270f4 <ticker_worker+0x14c>

000271e4 <ticker_start>:
{
   271e4:	b510      	push	{r4, lr}
   271e6:	b08a      	sub	sp, #40	; 0x28
	return ticker_start_ext(instance_index, user_id, ticker_id,
   271e8:	2400      	movs	r4, #0
   271ea:	9409      	str	r4, [sp, #36]	; 0x24
   271ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
   271ee:	9408      	str	r4, [sp, #32]
   271f0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   271f2:	9407      	str	r4, [sp, #28]
   271f4:	9c12      	ldr	r4, [sp, #72]	; 0x48
   271f6:	9406      	str	r4, [sp, #24]
   271f8:	9c11      	ldr	r4, [sp, #68]	; 0x44
   271fa:	9405      	str	r4, [sp, #20]
   271fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
   271fe:	9404      	str	r4, [sp, #16]
   27200:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
   27204:	9403      	str	r4, [sp, #12]
   27206:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   27208:	9402      	str	r4, [sp, #8]
   2720a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   2720c:	9401      	str	r4, [sp, #4]
   2720e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   27210:	9400      	str	r4, [sp, #0]
   27212:	f7ef f8dd 	bl	163d0 <ticker_start_ext>
}
   27216:	b00a      	add	sp, #40	; 0x28
   27218:	bd10      	pop	{r4, pc}

0002721a <ticker_update>:
{
   2721a:	b510      	push	{r4, lr}
   2721c:	b088      	sub	sp, #32
	return ticker_update_ext(instance_index, user_id, ticker_id,
   2721e:	2400      	movs	r4, #0
   27220:	9407      	str	r4, [sp, #28]
   27222:	9c10      	ldr	r4, [sp, #64]	; 0x40
   27224:	9406      	str	r4, [sp, #24]
   27226:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   27228:	9405      	str	r4, [sp, #20]
   2722a:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   2722e:	9404      	str	r4, [sp, #16]
   27230:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
   27234:	9403      	str	r4, [sp, #12]
   27236:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   27238:	9402      	str	r4, [sp, #8]
   2723a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2723c:	9401      	str	r4, [sp, #4]
   2723e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   27240:	9400      	str	r4, [sp, #0]
   27242:	f7ef f911 	bl	16468 <ticker_update_ext>
}
   27246:	b008      	add	sp, #32
   27248:	bd10      	pop	{r4, pc}

0002724a <ticker_ticks_now_get>:
	return cntr_cnt_get();
   2724a:	f7f4 bc6d 	b.w	1bb28 <cntr_cnt_get>

0002724e <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2724e:	1a40      	subs	r0, r0, r1
}
   27250:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   27254:	4770      	bx	lr

00027256 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   27256:	2802      	cmp	r0, #2
{
   27258:	b538      	push	{r3, r4, r5, lr}
   2725a:	4604      	mov	r4, r0
   2725c:	461d      	mov	r5, r3
	switch (handle_type) {
   2725e:	d107      	bne.n	27270 <ll_tx_pwr_lvl_get+0x1a>
#endif /* CONFIG_BT_OBSERVER && CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL*/
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
   27260:	4608      	mov	r0, r1
   27262:	f000 f99e 	bl	275a2 <ll_connected_get>
			if (!conn) {
   27266:	b108      	cbz	r0, 2726c <ll_tx_pwr_lvl_get+0x16>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
				/* Level desired is maximum available */
				*tx_pwr_lvl = lll_radio_tx_pwr_max_get();
#else  /* !CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
				/* Return default if not multiple TXP */
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   27268:	2400      	movs	r4, #0
   2726a:	702c      	strb	r4, [r5, #0]
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   2726c:	4620      	mov	r0, r4
   2726e:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_UNKNOWN_CMD;
   27270:	2401      	movs	r4, #1
   27272:	e7fb      	b.n	2726c <ll_tx_pwr_lvl_get+0x16>

00027274 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   27274:	2300      	movs	r3, #0
   27276:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   27278:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   2727a:	4770      	bx	lr

0002727c <sys_get_le64>:
{
   2727c:	4603      	mov	r3, r0
}
   2727e:	6800      	ldr	r0, [r0, #0]
   27280:	6859      	ldr	r1, [r3, #4]
   27282:	4770      	bx	lr

00027284 <meta_evt>:
{
   27284:	b570      	push	{r4, r5, r6, lr}
	return net_buf_simple_add(&buf->b, len);
   27286:	f100 0408 	add.w	r4, r0, #8
   2728a:	460e      	mov	r6, r1
   2728c:	4620      	mov	r0, r4
   2728e:	2102      	movs	r1, #2
   27290:	4615      	mov	r5, r2
   27292:	f7f5 fc39 	bl	1cb08 <net_buf_simple_add>
	hdr->evt = evt;
   27296:	233e      	movs	r3, #62	; 0x3e
   27298:	7003      	strb	r3, [r0, #0]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   2729a:	1c6b      	adds	r3, r5, #1
	hdr->len = len;
   2729c:	7043      	strb	r3, [r0, #1]
   2729e:	2101      	movs	r1, #1
   272a0:	4620      	mov	r0, r4
   272a2:	f7f5 fc31 	bl	1cb08 <net_buf_simple_add>
	me->subevent = subevt;
   272a6:	7006      	strb	r6, [r0, #0]
   272a8:	4629      	mov	r1, r5
   272aa:	4620      	mov	r0, r4
}
   272ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   272b0:	f7f5 bc2a 	b.w	1cb08 <net_buf_simple_add>

000272b4 <hci_num_cmplt_encode>:
{
   272b4:	b570      	push	{r4, r5, r6, lr}
   272b6:	f100 0408 	add.w	r4, r0, #8
   272ba:	460e      	mov	r6, r1
   272bc:	4620      	mov	r0, r4
   272be:	2102      	movs	r1, #2
   272c0:	4615      	mov	r5, r2
   272c2:	f7f5 fc21 	bl	1cb08 <net_buf_simple_add>
	hdr->evt = evt;
   272c6:	2313      	movs	r3, #19
	hdr->len = len;
   272c8:	2105      	movs	r1, #5
	hdr->evt = evt;
   272ca:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   272cc:	7041      	strb	r1, [r0, #1]
   272ce:	4620      	mov	r0, r4
   272d0:	f7f5 fc1a 	bl	1cb08 <net_buf_simple_add>
	ep->num_handles = num_handles;
   272d4:	2301      	movs	r3, #1
   272d6:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   272d8:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   272dc:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   272e0:	bd70      	pop	{r4, r5, r6, pc}

000272e2 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   272e2:	7903      	ldrb	r3, [r0, #4]
   272e4:	2b03      	cmp	r3, #3
   272e6:	d00c      	beq.n	27302 <hci_get_class+0x20>
		switch (node_rx->hdr.type) {
   272e8:	2b13      	cmp	r3, #19
   272ea:	d012      	beq.n	27312 <hci_get_class+0x30>
   272ec:	d804      	bhi.n	272f8 <hci_get_class+0x16>
   272ee:	2b04      	cmp	r3, #4
			return HCI_CLASS_NONE;
   272f0:	bf0c      	ite	eq
   272f2:	2002      	moveq	r0, #2
   272f4:	2000      	movne	r0, #0
   272f6:	4770      	bx	lr
		switch (node_rx->hdr.type) {
   272f8:	2b15      	cmp	r3, #21
			return HCI_CLASS_EVT_CONNECTION;
   272fa:	bf8c      	ite	hi
   272fc:	2000      	movhi	r0, #0
   272fe:	2003      	movls	r0, #3
   27300:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   27302:	7f03      	ldrb	r3, [r0, #28]
   27304:	f003 0303 	and.w	r3, r3, #3
   27308:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   2730a:	bf0c      	ite	eq
   2730c:	2004      	moveq	r0, #4
   2730e:	2005      	movne	r0, #5
   27310:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   27312:	2001      	movs	r0, #1
}
   27314:	4770      	bx	lr

00027316 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   27316:	f7f3 b86b 	b.w	1a3f0 <lll_csrand_get>

0002731a <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   2731a:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   2731c:	f000 fcb1 	bl	27c82 <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   27320:	2000      	movs	r0, #0
   27322:	bd08      	pop	{r3, pc}

00027324 <disabled_cb>:
	z_impl_k_sem_give(sem);
   27324:	f7f8 bcaa 	b.w	1fc7c <z_impl_k_sem_give>

00027328 <rx_demux_conn_tx_ack>:
{
   27328:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2732a:	4605      	mov	r5, r0
   2732c:	4614      	mov	r4, r2
   2732e:	9300      	str	r3, [sp, #0]
   27330:	f8ad 1006 	strh.w	r1, [sp, #6]
		ull_conn_ack_dequeue();
   27334:	f7f2 fca8 	bl	19c88 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   27338:	4621      	mov	r1, r4
   2733a:	9a00      	ldr	r2, [sp, #0]
   2733c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   27340:	f7f2 fce4 	bl	19d0c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   27344:	4620      	mov	r0, r4
   27346:	f7f2 fc65 	bl	19c14 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   2734a:	466a      	mov	r2, sp
   2734c:	f10d 0106 	add.w	r1, sp, #6
   27350:	4628      	mov	r0, r5
   27352:	f7f2 fc83 	bl	19c5c <ull_conn_ack_by_last_peek>
	} while (link);
   27356:	4604      	mov	r4, r0
   27358:	2800      	cmp	r0, #0
   2735a:	d1eb      	bne.n	27334 <rx_demux_conn_tx_ack+0xc>
			ll_rx_sched();
   2735c:	f7f0 fc86 	bl	17c6c <ll_rx_sched>
}
   27360:	b003      	add	sp, #12
   27362:	bd30      	pop	{r4, r5, pc}

00027364 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   27364:	2300      	movs	r3, #0
   27366:	7003      	strb	r3, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   27368:	2308      	movs	r3, #8
   2736a:	700b      	strb	r3, [r1, #0]
}
   2736c:	4770      	bx	lr

0002736e <ll_radio_state_is_idle>:
	return lll_radio_is_idle();
   2736e:	f000 baa5 	b.w	278bc <lll_radio_is_idle>

00027372 <adva_update.isra.4>:

	/* All legacy PDUs have AdvA at the same offset */
	return pdu->adv_ind.addr;
}

static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
   27372:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	} else if (ll_adv_cmds_is_ext() && pdu->tx_addr) {
		tx_addr = ll_adv_aux_random_addr_get(adv, NULL);
#endif
	} else {
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
   27374:	4604      	mov	r4, r0
   27376:	2100      	movs	r1, #0
   27378:	f814 0b02 	ldrb.w	r0, [r4], #2
   2737c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   27380:	f7ef f8f6 	bl	16570 <ll_addr_get>
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   27384:	2206      	movs	r2, #6
   27386:	4601      	mov	r1, r0
   27388:	4620      	mov	r0, r4
   2738a:	f7fc fee0 	bl	2414e <memcpy>

	return adv_addr;
}
   2738e:	4620      	mov	r0, r4
   27390:	bd10      	pop	{r4, pc}

00027392 <ull_adv_init>:
{
   27392:	b508      	push	{r3, lr}
   27394:	f7f1 f8fa 	bl	1858c <init_reset.part.3>
}
   27398:	2000      	movs	r0, #0
   2739a:	bd08      	pop	{r3, pc}

0002739c <ull_adv_reset>:
{
   2739c:	b508      	push	{r3, lr}
		(void)disable(handle);
   2739e:	f7f1 f9d5 	bl	1874c <disable.constprop.6>
}
   273a2:	2000      	movs	r0, #0
   273a4:	bd08      	pop	{r3, pc}

000273a6 <ull_adv_is_enabled>:
{
   273a6:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   273a8:	f7f1 f9c2 	bl	18730 <ull_adv_is_enabled_get>
}
   273ac:	3000      	adds	r0, #0
   273ae:	bf18      	it	ne
   273b0:	2001      	movne	r0, #1
   273b2:	bd08      	pop	{r3, pc}

000273b4 <ull_adv_filter_pol_get>:
{
   273b4:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   273b6:	f7f1 f9bb 	bl	18730 <ull_adv_is_enabled_get>
	if (!adv) {
   273ba:	b118      	cbz	r0, 273c4 <ull_adv_filter_pol_get+0x10>
	return adv->lll.filter_policy;
   273bc:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   273c0:	f000 0003 	and.w	r0, r0, #3
}
   273c4:	bd08      	pop	{r3, pc}

000273c6 <ull_scan_rsp_set>:
{
   273c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   273ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   273ce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   273d2:	460f      	mov	r7, r1
   273d4:	4606      	mov	r6, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   273d6:	f10d 0107 	add.w	r1, sp, #7
   273da:	3038      	adds	r0, #56	; 0x38
   273dc:	4690      	mov	r8, r2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   273de:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   273e0:	f7f3 fa88 	bl	1a8f4 <lll_adv_pdu_alloc>
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   273e4:	7803      	ldrb	r3, [r0, #0]
   273e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	pdu->tx_addr = prev->tx_addr;
   273ea:	4629      	mov	r1, r5
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   273ec:	f043 0304 	orr.w	r3, r3, #4
   273f0:	7003      	strb	r3, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
   273f2:	f811 2b02 	ldrb.w	r2, [r1], #2
   273f6:	b2db      	uxtb	r3, r3
   273f8:	f3c2 1280 	ubfx	r2, r2, #6, #1
   273fc:	f362 1386 	bfi	r3, r2, #6, #1
	pdu->rx_addr = 0;
   27400:	f36f 13c7 	bfc	r3, #7, #1
   27404:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   27406:	1dbb      	adds	r3, r7, #6
   27408:	7043      	strb	r3, [r0, #1]
   2740a:	4604      	mov	r4, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   2740c:	2206      	movs	r2, #6
   2740e:	3002      	adds	r0, #2
   27410:	f7fc fe9d 	bl	2414e <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   27414:	463a      	mov	r2, r7
   27416:	4641      	mov	r1, r8
   27418:	f104 0008 	add.w	r0, r4, #8
   2741c:	f7fc fe97 	bl	2414e <memcpy>
	pdu->last = idx;
   27420:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27424:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
}
   27428:	2000      	movs	r0, #0
   2742a:	b002      	add	sp, #8
   2742c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027430 <ull_scan_init>:
}
   27430:	2000      	movs	r0, #0
   27432:	4770      	bx	lr

00027434 <disable.constprop.1>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
   27434:	b510      	push	{r4, lr}
{
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
   27436:	2000      	movs	r0, #0
   27438:	f7f1 fae0 	bl	189fc <ull_scan_is_enabled_get>
	if (!scan) {
   2743c:	4604      	mov	r4, r0
   2743e:	b158      	cbz	r0, 27458 <disable.constprop.1+0x24>
	if (scan->lll.conn) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   27440:	4601      	mov	r1, r0
   27442:	2000      	movs	r0, #0
   27444:	f7f1 fab4 	bl	189b0 <ull_scan_disable>
	if (ret) {
   27448:	b928      	cbnz	r0, 27456 <disable.constprop.1+0x22>
		return ret;
	}

	scan->is_enabled = 0U;
   2744a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2744e:	f360 0300 	bfi	r3, r0, #0, #1
   27452:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   27456:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   27458:	200c      	movs	r0, #12
   2745a:	e7fc      	b.n	27456 <disable.constprop.1+0x22>

0002745c <ull_scan_reset>:
{
   2745c:	b508      	push	{r3, lr}
		(void)disable(handle);
   2745e:	f7ff ffe9 	bl	27434 <disable.constprop.1>
}
   27462:	2000      	movs	r0, #0
   27464:	bd08      	pop	{r3, pc}

00027466 <ll_scan_enable>:
{
   27466:	b510      	push	{r4, lr}
	if (!enable) {
   27468:	b918      	cbnz	r0, 27472 <ll_scan_enable+0xc>
}
   2746a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = disable(SCAN_HANDLE_1M);
   2746e:	f7ff bfe1 	b.w	27434 <disable.constprop.1>
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   27472:	2000      	movs	r0, #0
   27474:	f7f1 fad0 	bl	18a18 <ull_scan_is_disabled_get>
	if (!scan) {
   27478:	4604      	mov	r4, r0
   2747a:	b198      	cbz	r0, 274a4 <ll_scan_enable+0x3e>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   2747c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   27480:	079b      	lsls	r3, r3, #30
   27482:	d404      	bmi.n	2748e <ll_scan_enable+0x28>
		err = ull_scan_enable(scan);
   27484:	4620      	mov	r0, r4
}
   27486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = ull_scan_enable(scan);
   2748a:	f7d9 b9b9 	b.w	800 <ull_scan_enable>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
   2748e:	2100      	movs	r1, #0
   27490:	2001      	movs	r0, #1
   27492:	f7ef f86d 	bl	16570 <ll_addr_get>
   27496:	2106      	movs	r1, #6
   27498:	f7ff fc38 	bl	26d0c <mem_nz>
   2749c:	2800      	cmp	r0, #0
   2749e:	d1f1      	bne.n	27484 <ll_scan_enable+0x1e>
			return BT_HCI_ERR_INVALID_PARAM;
   274a0:	2012      	movs	r0, #18
}
   274a2:	bd10      	pop	{r4, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   274a4:	200c      	movs	r0, #12
   274a6:	e7fc      	b.n	274a2 <ll_scan_enable+0x3c>

000274a8 <ull_scan_is_enabled>:
{
   274a8:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   274aa:	f7f1 faa7 	bl	189fc <ull_scan_is_enabled_get>
	if (!scan) {
   274ae:	b140      	cbz	r0, 274c2 <ull_scan_is_enabled+0x1a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   274b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   274b4:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   274b8:	f003 0301 	and.w	r3, r3, #1
   274bc:	09c0      	lsrs	r0, r0, #7
   274be:	fa03 f000 	lsl.w	r0, r3, r0
}
   274c2:	bd08      	pop	{r3, pc}

000274c4 <ull_scan_filter_pol_get>:
{
   274c4:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   274c6:	f7f1 fa99 	bl	189fc <ull_scan_is_enabled_get>
	if (!scan) {
   274ca:	b118      	cbz	r0, 274d4 <ull_scan_filter_pol_get+0x10>
	return scan->lll.filter_policy;
   274cc:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   274d0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
}
   274d4:	bd08      	pop	{r3, pc}

000274d6 <tx_ull_dequeue>:
{
   274d6:	4603      	mov	r3, r0
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   274d8:	e9d0 2045 	ldrd	r2, r0, [r0, #276]	; 0x114
{
   274dc:	b510      	push	{r4, lr}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   274de:	b978      	cbnz	r0, 27500 <tx_ull_dequeue+0x2a>
   274e0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   274e4:	4290      	cmp	r0, r2
   274e6:	d00b      	beq.n	27500 <tx_ull_dequeue+0x2a>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   274e8:	7910      	ldrb	r0, [r2, #4]
   274ea:	f000 0003 	and.w	r0, r0, #3
   274ee:	2803      	cmp	r0, #3
   274f0:	d104      	bne.n	274fc <tx_ull_dequeue+0x26>
		    ((pdu_data_tx->llctrl.opcode !=
   274f2:	79d0      	ldrb	r0, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   274f4:	2803      	cmp	r0, #3
   274f6:	d003      	beq.n	27500 <tx_ull_dequeue+0x2a>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   274f8:	280a      	cmp	r0, #10
   274fa:	d001      	beq.n	27500 <tx_ull_dequeue+0x2a>
			conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   274fc:	e9c3 2246 	strd	r2, r2, [r3, #280]	; 0x118
	if (conn->tx_head == conn->tx_ctrl) {
   27500:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
   27504:	6810      	ldr	r0, [r2, #0]
   27506:	4294      	cmp	r4, r2
   27508:	d10d      	bne.n	27526 <tx_ull_dequeue+0x50>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   2750a:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
		conn->tx_head = conn->tx_head->next;
   2750e:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   27512:	42a2      	cmp	r2, r4
			conn->tx_ctrl = NULL;
   27514:	bf06      	itte	eq
   27516:	2200      	moveq	r2, #0
			conn->tx_ctrl_last = NULL;
   27518:	e9c3 2246 	strdeq	r2, r2, [r3, #280]	; 0x118
			conn->tx_ctrl = conn->tx_head;
   2751c:	f8c3 0118 	strne.w	r0, [r3, #280]	; 0x118
		tx->next = tx;
   27520:	6009      	str	r1, [r1, #0]
}
   27522:	4608      	mov	r0, r1
   27524:	bd10      	pop	{r4, pc}
		if (conn->tx_head == conn->tx_data) {
   27526:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
		conn->tx_head = conn->tx_head->next;
   2752a:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
		if (conn->tx_head == conn->tx_data) {
   2752e:	4294      	cmp	r4, r2
			conn->tx_data = conn->tx_data->next;
   27530:	bf08      	it	eq
   27532:	f8c3 0120 	streq.w	r0, [r3, #288]	; 0x120
		tx->next = NULL;
   27536:	2300      	movs	r3, #0
   27538:	600b      	str	r3, [r1, #0]
   2753a:	e7f2      	b.n	27522 <tx_ull_dequeue+0x4c>

0002753c <feat_get>:
	       (features[1] << 8) | (features[2] << 16);
   2753c:	7883      	ldrb	r3, [r0, #2]
   2753e:	7842      	ldrb	r2, [r0, #1]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   27540:	7800      	ldrb	r0, [r0, #0]
	       (features[1] << 8) | (features[2] << 16);
   27542:	041b      	lsls	r3, r3, #16
   27544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   27548:	4318      	orrs	r0, r3
   2754a:	f3c0 0010 	ubfx	r0, r0, #0, #17
}
   2754e:	f440 5043 	orr.w	r0, r0, #12480	; 0x30c0
   27552:	f040 0010 	orr.w	r0, r0, #16
   27556:	4770      	bx	lr

00027558 <ctrl_tx_enqueue>:
	if (
   27558:	e9d0 3245 	ldrd	r3, r2, [r0, #276]	; 0x114
{
   2755c:	b510      	push	{r4, lr}
	if (
   2755e:	b18b      	cbz	r3, 27584 <ctrl_tx_enqueue+0x2c>
		if (conn->tx_head == conn->tx_data) {
   27560:	f8d0 4120 	ldr.w	r4, [r0, #288]	; 0x120
   27564:	42a3      	cmp	r3, r4
			conn->tx_data = conn->tx_data->next;
   27566:	bf04      	itt	eq
   27568:	681c      	ldreq	r4, [r3, #0]
   2756a:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
		if (!conn->tx_ctrl) {
   2756e:	b992      	cbnz	r2, 27596 <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head->next;
   27570:	681a      	ldr	r2, [r3, #0]
   27572:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   27574:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl = tx;
   27576:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
	if (!tx->next) {
   2757a:	680b      	ldr	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   2757c:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
	if (!tx->next) {
   27580:	b133      	cbz	r3, 27590 <ctrl_tx_enqueue+0x38>
}
   27582:	bd10      	pop	{r4, pc}
		if (!conn->tx_ctrl) {
   27584:	b93a      	cbnz	r2, 27596 <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head;
   27586:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl = tx;
   27588:	e9c0 1145 	strd	r1, r1, [r0, #276]	; 0x114
				conn->tx_ctrl_last = tx;
   2758c:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
		conn->tx_data_last = tx;
   27590:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
}
   27594:	e7f5      	b.n	27582 <ctrl_tx_enqueue+0x2a>
	tx->next = conn->tx_ctrl_last->next;
   27596:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   2759a:	681a      	ldr	r2, [r3, #0]
   2759c:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   2759e:	6019      	str	r1, [r3, #0]
   275a0:	e7eb      	b.n	2757a <ctrl_tx_enqueue+0x22>

000275a2 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   275a2:	2802      	cmp	r0, #2
{
   275a4:	b510      	push	{r4, lr}
   275a6:	4604      	mov	r4, r0
	if (handle >= CONFIG_BT_MAX_CONN) {
   275a8:	d804      	bhi.n	275b4 <ll_connected_get+0x12>
	conn = ll_conn_get(handle);
   275aa:	f7f1 fbf9 	bl	18da0 <ll_conn_get>
	if (conn->lll.handle != handle) {
   275ae:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   275b0:	42a3      	cmp	r3, r4
   275b2:	d000      	beq.n	275b6 <ll_connected_get+0x14>
		return NULL;
   275b4:	2000      	movs	r0, #0
}
   275b6:	bd10      	pop	{r4, pc}

000275b8 <ll_conn_update>:
{
   275b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   275bc:	4680      	mov	r8, r0
   275be:	460c      	mov	r4, r1
   275c0:	4691      	mov	r9, r2
   275c2:	469a      	mov	sl, r3
   275c4:	f8bd 7020 	ldrh.w	r7, [sp, #32]
   275c8:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
   275cc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	conn = ll_connected_get(handle);
   275d0:	f7ff ffe7 	bl	275a2 <ll_connected_get>
	if (!conn) {
   275d4:	2800      	cmp	r0, #0
   275d6:	d06b      	beq.n	276b0 <ll_conn_update+0xf8>
	if (!cmd) {
   275d8:	bb84      	cbnz	r4, 2763c <ll_conn_update+0x84>
		if (!conn->llcp_conn_param.disabled &&
   275da:	f890 30ee 	ldrb.w	r3, [r0, #238]	; 0xee
   275de:	06da      	lsls	r2, r3, #27
   275e0:	d408      	bmi.n	275f4 <ll_conn_update+0x3c>
		    (!conn->common.fex_valid ||
   275e2:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
		if (!conn->llcp_conn_param.disabled &&
   275e6:	f011 0101 	ands.w	r1, r1, #1
   275ea:	d042      	beq.n	27672 <ll_conn_update+0xba>
		     (conn->llcp_feature.features_conn &
   275ec:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
		    (!conn->common.fex_valid ||
   275f0:	0793      	lsls	r3, r2, #30
   275f2:	d424      	bmi.n	2763e <ll_conn_update+0x86>
		} else if (conn->lll.role) {
   275f4:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   275f8:	2b00      	cmp	r3, #0
   275fa:	db5b      	blt.n	276b4 <ll_conn_update+0xfc>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   275fc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
   27600:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
   27604:	429a      	cmp	r2, r3
   27606:	d157      	bne.n	276b8 <ll_conn_update+0x100>
		conn->llcp_cu.win_size = 1U;
   27608:	2301      	movs	r3, #1
   2760a:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2760e:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
		conn->llcp_cu.interval = interval_max;
   27612:	f8a0 70a4 	strh.w	r7, [r0, #164]	; 0xa4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   27616:	f023 0307 	bic.w	r3, r3, #7
		conn->llcp_cu.win_offset_us = 0U;
   2761a:	2400      	movs	r4, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2761c:	f043 0305 	orr.w	r3, r3, #5
		conn->llcp_cu.req++;
   27620:	3201      	adds	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   27622:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		conn->llcp_cu.latency = latency;
   27626:	f8a0 60a6 	strh.w	r6, [r0, #166]	; 0xa6
		conn->llcp_cu.timeout = timeout;
   2762a:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2762e:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
		conn->llcp_cu.req++;
   27632:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
}
   27636:	4620      	mov	r0, r4
   27638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2763c:	4621      	mov	r1, r4
		cmd--;
   2763e:	3901      	subs	r1, #1
		if (cmd) {
   27640:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
   27644:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   27648:	f890 20ed 	ldrb.w	r2, [r0, #237]	; 0xed
   2764c:	d013      	beq.n	27676 <ll_conn_update+0xbe>
			if ((conn->llcp_conn_param.req ==
   2764e:	4293      	cmp	r3, r2
   27650:	d032      	beq.n	276b8 <ll_conn_update+0x100>
			    (conn->llcp_conn_param.state !=
   27652:	f890 30ee 	ldrb.w	r3, [r0, #238]	; 0xee
			     conn->llcp_conn_param.ack) ||
   27656:	f003 0207 	and.w	r2, r3, #7
   2765a:	2a03      	cmp	r2, #3
   2765c:	d12c      	bne.n	276b8 <ll_conn_update+0x100>
			conn->llcp_conn_param.state = cmd;
   2765e:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1U;
   27662:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   27666:	f880 90ef 	strb.w	r9, [r0, #239]	; 0xef
			conn->llcp_conn_param.cmd = 1U;
   2766a:	f880 30ee 	strb.w	r3, [r0, #238]	; 0xee
	return 0;
   2766e:	2400      	movs	r4, #0
   27670:	e7e1      	b.n	27636 <ll_conn_update+0x7e>
			cmd++;
   27672:	2101      	movs	r1, #1
   27674:	e7e3      	b.n	2763e <ll_conn_update+0x86>
			if (conn->llcp_conn_param.req !=
   27676:	4293      	cmp	r3, r2
   27678:	d11e      	bne.n	276b8 <ll_conn_update+0x100>
			conn->llcp_conn_param.state = cmd;
   2767a:	f8b0 20ee 	ldrh.w	r2, [r0, #238]	; 0xee
			conn->llcp_conn_param.interval_min = interval_min;
   2767e:	f8a0 a0f0 	strh.w	sl, [r0, #240]	; 0xf0
			conn->llcp_conn_param.req++;
   27682:	3301      	adds	r3, #1
   27684:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   27688:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
			conn->llcp_conn_param.interval_max = interval_max;
   2768c:	f8a0 70f2 	strh.w	r7, [r0, #242]	; 0xf2
			conn->llcp_conn_param.state = cmd;
   27690:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   27694:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   27698:	2b00      	cmp	r3, #0
			conn->llcp_conn_param.latency = latency;
   2769a:	f8a0 60f4 	strh.w	r6, [r0, #244]	; 0xf4
			conn->llcp_conn_param.timeout = timeout;
   2769e:	f8a0 50f6 	strh.w	r5, [r0, #246]	; 0xf6
			conn->llcp_conn_param.state = cmd;
   276a2:	f8a0 20ee 	strh.w	r2, [r0, #238]	; 0xee
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   276a6:	dac6      	bge.n	27636 <ll_conn_update+0x7e>
				ull_slave_latency_cancel(conn, handle);
   276a8:	4641      	mov	r1, r8
   276aa:	f7f2 fc15 	bl	19ed8 <ull_slave_latency_cancel>
   276ae:	e7c2      	b.n	27636 <ll_conn_update+0x7e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   276b0:	2402      	movs	r4, #2
   276b2:	e7c0      	b.n	27636 <ll_conn_update+0x7e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   276b4:	241a      	movs	r4, #26
   276b6:	e7be      	b.n	27636 <ll_conn_update+0x7e>
			return BT_HCI_ERR_CMD_DISALLOWED;
   276b8:	240c      	movs	r4, #12
   276ba:	e7bc      	b.n	27636 <ll_conn_update+0x7e>

000276bc <ll_chm_get>:
{
   276bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   276be:	460d      	mov	r5, r1
	conn = ll_connected_get(handle);
   276c0:	f7ff ff6f 	bl	275a2 <ll_connected_get>
	if (!conn) {
   276c4:	4604      	mov	r4, r0
   276c6:	b170      	cbz	r0, 276e6 <ll_chm_get+0x2a>
		conn->chm_updated = 0U;
   276c8:	2700      	movs	r7, #0
		memcpy(chm, conn->lll.data_chan_map,
   276ca:	f100 0638 	add.w	r6, r0, #56	; 0x38
		conn->chm_updated = 0U;
   276ce:	f884 7128 	strb.w	r7, [r4, #296]	; 0x128
		memcpy(chm, conn->lll.data_chan_map,
   276d2:	2205      	movs	r2, #5
   276d4:	4631      	mov	r1, r6
   276d6:	4628      	mov	r0, r5
   276d8:	f7fc fd39 	bl	2414e <memcpy>
	} while (conn->chm_updated);
   276dc:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   276e0:	2800      	cmp	r0, #0
   276e2:	d1f4      	bne.n	276ce <ll_chm_get+0x12>
}
   276e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   276e6:	2002      	movs	r0, #2
   276e8:	e7fc      	b.n	276e4 <ll_chm_get+0x28>

000276ea <ll_terminate_ind_send>:
	switch (reason) {
   276ea:	2915      	cmp	r1, #21
{
   276ec:	b538      	push	{r3, r4, r5, lr}
   276ee:	4605      	mov	r5, r0
   276f0:	460c      	mov	r4, r1
	switch (reason) {
   276f2:	d817      	bhi.n	27724 <ll_terminate_ind_send+0x3a>
   276f4:	2913      	cmp	r1, #19
   276f6:	d201      	bcs.n	276fc <ll_terminate_ind_send+0x12>
   276f8:	2905      	cmp	r1, #5
   276fa:	d119      	bne.n	27730 <ll_terminate_ind_send+0x46>
	conn = ll_connected_get(handle);
   276fc:	4628      	mov	r0, r5
   276fe:	f7ff ff50 	bl	275a2 <ll_connected_get>
	if (!conn) {
   27702:	b1b8      	cbz	r0, 27734 <ll_terminate_ind_send+0x4a>
	conn->llcp_terminate.req++;
   27704:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   27708:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   2770c:	f880 40ca 	strb.w	r4, [r0, #202]	; 0xca
	conn->llcp_terminate.req++;
   27710:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   27712:	2b00      	cmp	r3, #0
	conn->llcp_terminate.req++;
   27714:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   27718:	da02      	bge.n	27720 <ll_terminate_ind_send+0x36>
		ull_slave_latency_cancel(conn, handle);
   2771a:	4629      	mov	r1, r5
   2771c:	f7f2 fbdc 	bl	19ed8 <ull_slave_latency_cancel>
	return 0;
   27720:	2000      	movs	r0, #0
   27722:	e006      	b.n	27732 <ll_terminate_ind_send+0x48>
	switch (reason) {
   27724:	2929      	cmp	r1, #41	; 0x29
   27726:	d0e9      	beq.n	276fc <ll_terminate_ind_send+0x12>
   27728:	293b      	cmp	r1, #59	; 0x3b
   2772a:	d0e7      	beq.n	276fc <ll_terminate_ind_send+0x12>
   2772c:	291a      	cmp	r1, #26
   2772e:	e7e4      	b.n	276fa <ll_terminate_ind_send+0x10>
		return BT_HCI_ERR_INVALID_PARAM;
   27730:	2012      	movs	r0, #18
}
   27732:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   27734:	2002      	movs	r0, #2
   27736:	e7fc      	b.n	27732 <ll_terminate_ind_send+0x48>

00027738 <ll_feature_req_send>:
{
   27738:	b510      	push	{r4, lr}
   2773a:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   2773c:	f7ff ff31 	bl	275a2 <ll_connected_get>
	if (!conn) {
   27740:	b188      	cbz	r0, 27766 <ll_feature_req_send+0x2e>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   27742:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
   27746:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   2774a:	428a      	cmp	r2, r1
   2774c:	d10d      	bne.n	2776a <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2774e:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   27752:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   27754:	2b00      	cmp	r3, #0
	conn->llcp_feature.req++;
   27756:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2775a:	da02      	bge.n	27762 <ll_feature_req_send+0x2a>
		ull_slave_latency_cancel(conn, handle);
   2775c:	4621      	mov	r1, r4
   2775e:	f7f2 fbbb 	bl	19ed8 <ull_slave_latency_cancel>
	return 0;
   27762:	2000      	movs	r0, #0
   27764:	e000      	b.n	27768 <ll_feature_req_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   27766:	2002      	movs	r0, #2
}
   27768:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2776a:	200c      	movs	r0, #12
   2776c:	e7fc      	b.n	27768 <ll_feature_req_send+0x30>

0002776e <ll_version_ind_send>:
{
   2776e:	b510      	push	{r4, lr}
   27770:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   27772:	f7ff ff16 	bl	275a2 <ll_connected_get>
	if (!conn) {
   27776:	b188      	cbz	r0, 2779c <ll_version_ind_send+0x2e>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   27778:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   2777c:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   27780:	428a      	cmp	r2, r1
   27782:	d10d      	bne.n	277a0 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   27784:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   27788:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2778a:	2b00      	cmp	r3, #0
	conn->llcp_version.req++;
   2778c:	f880 20c0 	strb.w	r2, [r0, #192]	; 0xc0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   27790:	da02      	bge.n	27798 <ll_version_ind_send+0x2a>
		ull_slave_latency_cancel(conn, handle);
   27792:	4621      	mov	r1, r4
   27794:	f7f2 fba0 	bl	19ed8 <ull_slave_latency_cancel>
	return 0;
   27798:	2000      	movs	r0, #0
   2779a:	e000      	b.n	2779e <ll_version_ind_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2779c:	2002      	movs	r0, #2
}
   2779e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   277a0:	200c      	movs	r0, #12
   277a2:	e7fc      	b.n	2779e <ll_version_ind_send+0x30>

000277a4 <ull_conn_init>:
	err = init_reset();
   277a4:	f7f1 b962 	b.w	18a6c <init_reset>

000277a8 <tx_demux>:
{
   277a8:	b510      	push	{r4, lr}
   277aa:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   277ac:	2001      	movs	r0, #1
   277ae:	f7f2 f869 	bl	19884 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   277b2:	4620      	mov	r0, r4
   277b4:	2101      	movs	r1, #1
}
   277b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   277ba:	f7f2 b9f7 	b.w	19bac <ull_conn_tx_lll_enqueue>

000277be <ull_conn_lll_max_tx_octets_get>:
}
   277be:	201b      	movs	r0, #27
   277c0:	4770      	bx	lr

000277c2 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   277c2:	b570      	push	{r4, r5, r6, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   277c4:	fb02 1101 	mla	r1, r2, r1, r1
   277c8:	7802      	ldrb	r2, [r0, #0]
{
   277ca:	f89d 5010 	ldrb.w	r5, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   277ce:	440a      	add	r2, r1
   277d0:	2125      	movs	r1, #37	; 0x25
   277d2:	fbb2 f4f1 	udiv	r4, r2, r1
   277d6:	fb01 2414 	mls	r4, r1, r4, r2
   277da:	b2e1      	uxtb	r1, r4
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   277dc:	08ca      	lsrs	r2, r1, #3
	*chan_use = chan_next;
   277de:	7001      	strb	r1, [r0, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   277e0:	5c9a      	ldrb	r2, [r3, r2]
   277e2:	f004 0407 	and.w	r4, r4, #7
   277e6:	4122      	asrs	r2, r4
   277e8:	f012 0201 	ands.w	r2, r2, #1
   277ec:	d109      	bne.n	27802 <lll_chan_sel_1+0x40>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   277ee:	fbb1 f0f5 	udiv	r0, r1, r5
   277f2:	fb05 1010 	mls	r0, r5, r0, r1
   277f6:	b2c0      	uxtb	r0, r0
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   277f8:	1e5d      	subs	r5, r3, #1
	chan_next = 0U;
   277fa:	4611      	mov	r1, r2
   277fc:	3304      	adds	r3, #4
	while (byte_count--) {
   277fe:	42ab      	cmp	r3, r5
   27800:	d101      	bne.n	27806 <lll_chan_sel_1+0x44>
}
   27802:	4608      	mov	r0, r1
   27804:	bd70      	pop	{r4, r5, r6, pc}
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   27806:	f101 0408 	add.w	r4, r1, #8
   2780a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   2780e:	b2e4      	uxtb	r4, r4
		bite = *chan_map;
   27810:	460a      	mov	r2, r1
		while (bit_count--) {
   27812:	42a2      	cmp	r2, r4
   27814:	4621      	mov	r1, r4
   27816:	d0f2      	beq.n	277fe <lll_chan_sel_1+0x3c>
			if (bite & 0x01) {
   27818:	07f1      	lsls	r1, r6, #31
   2781a:	d502      	bpl.n	27822 <lll_chan_sel_1+0x60>
				if (chan_index == 0U) {
   2781c:	b128      	cbz	r0, 2782a <lll_chan_sel_1+0x68>
					break;
				}
				chan_index--;
   2781e:	3801      	subs	r0, #1
   27820:	b2c0      	uxtb	r0, r0
			}
			chan_next++;
   27822:	3201      	adds	r2, #1
   27824:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   27826:	0876      	lsrs	r6, r6, #1
   27828:	e7f3      	b.n	27812 <lll_chan_sel_1+0x50>
				if (chan_index == 0U) {
   2782a:	4611      	mov	r1, r2
   2782c:	e7e9      	b.n	27802 <lll_chan_sel_1+0x40>

0002782e <ll_wl_size_get>:
}
   2782e:	2008      	movs	r0, #8
   27830:	4770      	bx	lr

00027832 <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   27832:	2000      	movs	r0, #0
   27834:	f7ee b8dc 	b.w	159f0 <mayfly_run>

00027838 <isr_race>:
	radio_status_reset();
   27838:	f7f4 bb1a 	b.w	1be70 <radio_status_reset>

0002783c <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   2783c:	4668      	mov	r0, sp
   2783e:	f020 0107 	bic.w	r1, r0, #7
   27842:	468d      	mov	sp, r1
   27844:	b501      	push	{r0, lr}
	isr_radio();
   27846:	f7f4 fa23 	bl	1bc90 <isr_radio>
	ISR_DIRECT_PM();
   2784a:	f7dd f829 	bl	48a0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   2784e:	f7dd fb2d 	bl	4eac <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   27852:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   27856:	4685      	mov	sp, r0
   27858:	4770      	bx	lr

0002785a <lll_rand_isr_get>:
   2785a:	f7f2 bde9 	b.w	1a430 <lll_csrand_isr_get>

0002785e <lll_reset>:
}
   2785e:	2000      	movs	r0, #0
   27860:	4770      	bx	lr

00027862 <lll_prepare>:
{
   27862:	b513      	push	{r0, r1, r4, lr}
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   27864:	2400      	movs	r4, #0
   27866:	9401      	str	r4, [sp, #4]
   27868:	9c04      	ldr	r4, [sp, #16]
   2786a:	9400      	str	r4, [sp, #0]
   2786c:	f7f2 fc94 	bl	1a198 <prepare>
}
   27870:	b002      	add	sp, #8
   27872:	bd10      	pop	{r4, pc}

00027874 <lll_prepare_done>:
}
   27874:	2000      	movs	r0, #0
   27876:	4770      	bx	lr

00027878 <lll_is_abort_cb>:
}
   27878:	f06f 0047 	mvn.w	r0, #71	; 0x47
   2787c:	4770      	bx	lr

0002787e <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   2787e:	e9d0 2300 	ldrd	r2, r3, [r0]
   27882:	2a00      	cmp	r2, #0
   27884:	da04      	bge.n	27890 <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   27886:	6880      	ldr	r0, [r0, #8]
   27888:	4298      	cmp	r0, r3
   2788a:	bf38      	it	cc
   2788c:	4618      	movcc	r0, r3
   2788e:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   27890:	429a      	cmp	r2, r3
   27892:	bf38      	it	cc
   27894:	461a      	movcc	r2, r3
   27896:	4610      	mov	r0, r2
}
   27898:	4770      	bx	lr

0002789a <lll_preempt_calc>:
{
   2789a:	b510      	push	{r4, lr}
   2789c:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   2789e:	f7ff fcd4 	bl	2724a <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   278a2:	4621      	mov	r1, r4
   278a4:	f7ff fcd3 	bl	2724e <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   278a8:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   278aa:	0203      	lsls	r3, r0, #8
   278ac:	d404      	bmi.n	278b8 <lll_preempt_calc+0x1e>
   278ae:	2809      	cmp	r0, #9
   278b0:	bf94      	ite	ls
   278b2:	2000      	movls	r0, #0
   278b4:	2001      	movhi	r0, #1
}
   278b6:	bd10      	pop	{r4, pc}
	return 0;
   278b8:	2000      	movs	r0, #0
   278ba:	e7fc      	b.n	278b6 <lll_preempt_calc+0x1c>

000278bc <lll_radio_is_idle>:
	return radio_is_idle();
   278bc:	f7f4 baf8 	b.w	1beb0 <radio_is_idle>

000278c0 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   278c0:	f000 ba3d 	b.w	27d3e <radio_rx_ready_delay_get>

000278c4 <lll_isr_tx_status_reset>:
{
   278c4:	b508      	push	{r3, lr}
	radio_status_reset();
   278c6:	f7f4 fad3 	bl	1be70 <radio_status_reset>
}
   278ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   278ce:	f7f4 bb9b 	b.w	1c008 <radio_tmr_status_reset>

000278d2 <lll_isr_rx_status_reset>:
{
   278d2:	b508      	push	{r3, lr}
	radio_status_reset();
   278d4:	f7f4 facc 	bl	1be70 <radio_status_reset>
	radio_tmr_status_reset();
   278d8:	f7f4 fb96 	bl	1c008 <radio_tmr_status_reset>
}
   278dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   278e0:	f7f4 bb42 	b.w	1bf68 <radio_rssi_status_reset>

000278e4 <lll_isr_status_reset>:
{
   278e4:	b508      	push	{r3, lr}
	radio_status_reset();
   278e6:	f7f4 fac3 	bl	1be70 <radio_status_reset>
	radio_tmr_status_reset();
   278ea:	f7f4 fb8d 	bl	1c008 <radio_tmr_status_reset>
	radio_filter_status_reset();
   278ee:	f7f4 fb73 	bl	1bfd8 <radio_filter_status_reset>
	radio_ar_status_reset();
   278f2:	f7f4 fc9f 	bl	1c234 <radio_ar_status_reset>
}
   278f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   278fa:	f7f4 bb35 	b.w	1bf68 <radio_rssi_status_reset>

000278fe <lll_isr_abort>:
{
   278fe:	b510      	push	{r4, lr}
   27900:	4604      	mov	r4, r0
	lll_isr_status_reset();
   27902:	f7ff ffef 	bl	278e4 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   27906:	4620      	mov	r0, r4
}
   27908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2790c:	f7f2 be7a 	b.w	1a604 <lll_isr_cleanup>

00027910 <clock_ready>:
   27910:	f101 0010 	add.w	r0, r1, #16
   27914:	f7f8 b9b2 	b.w	1fc7c <z_impl_k_sem_give>

00027918 <lll_clock_ppm_local_get>:
}
   27918:	2014      	movs	r0, #20
   2791a:	4770      	bx	lr

0002791c <isr_abort>:
{
   2791c:	b510      	push	{r4, lr}
   2791e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   27920:	f7ff ffe0 	bl	278e4 <lll_isr_status_reset>
	radio_filter_disable();
   27924:	f7f4 fb4e 	bl	1bfc4 <radio_filter_disable>
	lll_isr_cleanup(param);
   27928:	4620      	mov	r0, r4
}
   2792a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2792e:	f7f2 be69 	b.w	1a604 <lll_isr_cleanup>

00027932 <lll_adv_reset>:
   27932:	f7f2 bfb7 	b.w	1a8a4 <lll_adv_init>

00027936 <lll_adv_data_reset>:
	pdu->first = 0U;
   27936:	2300      	movs	r3, #0
   27938:	7003      	strb	r3, [r0, #0]
	pdu->last = 0U;
   2793a:	7043      	strb	r3, [r0, #1]
	pdu->pdu[1] = NULL;
   2793c:	6083      	str	r3, [r0, #8]
}
   2793e:	4618      	mov	r0, r3
   27940:	4770      	bx	lr

00027942 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   27942:	68c3      	ldr	r3, [r0, #12]
{
   27944:	b570      	push	{r4, r5, r6, lr}
   27946:	4604      	mov	r4, r0
	evt = HDR_LLL2EVT(p->param);
   27948:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   2794a:	f7ff fc7e 	bl	2724a <ticker_ticks_now_get>
   2794e:	4605      	mov	r5, r0
   27950:	4630      	mov	r0, r6
   27952:	f7ff ff94 	bl	2787e <lll_evt_offset_get>
	p->remainder = 0;
   27956:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   27958:	1a28      	subs	r0, r5, r0
   2795a:	6020      	str	r0, [r4, #0]
	p->remainder = 0;
   2795c:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   2795e:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   27960:	4620      	mov	r0, r4
}
   27962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   27966:	f7f3 b8e9 	b.w	1ab3c <prepare_cb>

0002796a <isr_done>:
{
   2796a:	b510      	push	{r4, lr}
   2796c:	4604      	mov	r4, r0
	lll_isr_status_reset();
   2796e:	f7ff ffb9 	bl	278e4 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   27972:	7b23      	ldrb	r3, [r4, #12]
   27974:	f003 0271 	and.w	r2, r3, #113	; 0x71
   27978:	2a01      	cmp	r2, #1
		lll->chan_map_curr = lll->chan_map;
   2797a:	bf02      	ittt	eq
   2797c:	f3c3 0242 	ubfxeq	r2, r3, #1, #3
   27980:	f362 1306 	bfieq	r3, r2, #4, #3
   27984:	7323      	strbeq	r3, [r4, #12]
	if (lll->chan_map_curr) {
   27986:	7b23      	ldrb	r3, [r4, #12]
   27988:	f013 0f70 	tst.w	r3, #112	; 0x70
   2798c:	d008      	beq.n	279a0 <isr_done+0x36>
		pdu = chan_prepare(lll);
   2798e:	4620      	mov	r0, r4
   27990:	f7f3 f87a 	bl	1aa88 <chan_prepare>
		radio_tx_enable();
   27994:	f7f4 fa54 	bl	1be40 <radio_tx_enable>
}
   27998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   2799c:	f7f4 bc30 	b.w	1c200 <radio_tmr_end_capture>
	radio_filter_disable();
   279a0:	f7f4 fb10 	bl	1bfc4 <radio_filter_disable>
	lll_isr_cleanup(param);
   279a4:	4620      	mov	r0, r4
}
   279a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   279aa:	f7f2 be2b 	b.w	1a604 <lll_isr_cleanup>

000279ae <lll_adv_scan_req_check>:
{
   279ae:	b510      	push	{r4, lr}
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   279b0:	7b40      	ldrb	r0, [r0, #13]
{
   279b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   279b6:	07c0      	lsls	r0, r0, #31
   279b8:	d500      	bpl.n	279bc <lll_adv_scan_req_check+0xe>
   279ba:	b174      	cbz	r4, 279da <lll_adv_scan_req_check+0x2c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   279bc:	7808      	ldrb	r0, [r1, #0]
   279be:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
   279c2:	d108      	bne.n	279d6 <lll_adv_scan_req_check+0x28>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   279c4:	2206      	movs	r2, #6
   279c6:	3108      	adds	r1, #8
   279c8:	4618      	mov	r0, r3
   279ca:	f7fc fb99 	bl	24100 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   279ce:	fab0 f080 	clz	r0, r0
   279d2:	0940      	lsrs	r0, r0, #5
}
   279d4:	bd10      	pop	{r4, pc}
	return (tx_addr == sr->rx_addr) &&
   279d6:	2000      	movs	r0, #0
   279d8:	e7fc      	b.n	279d4 <lll_adv_scan_req_check+0x26>
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   279da:	4620      	mov	r0, r4
   279dc:	e7fa      	b.n	279d4 <lll_adv_scan_req_check+0x26>

000279de <lll_adv_connect_ind_check>:
{
   279de:	b538      	push	{r3, r4, r5, lr}
   279e0:	9d05      	ldr	r5, [sp, #20]
   279e2:	460c      	mov	r4, r1
   279e4:	f89d 1018 	ldrb.w	r1, [sp, #24]
	if (tgt_addr) {
   279e8:	b1fd      	cbz	r5, 27a2a <lll_adv_connect_ind_check+0x4c>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   279ea:	7821      	ldrb	r1, [r4, #0]
   279ec:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   279f0:	d003      	beq.n	279fa <lll_adv_connect_ind_check+0x1c>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   279f2:	2000      	movs	r0, #0
   279f4:	f000 0001 	and.w	r0, r0, #1
}
   279f8:	bd38      	pop	{r3, r4, r5, pc}
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   279fa:	2206      	movs	r2, #6
   279fc:	f104 0108 	add.w	r1, r4, #8
   27a00:	4618      	mov	r0, r3
   27a02:	f7fc fb7d 	bl	24100 <memcmp>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   27a06:	2800      	cmp	r0, #0
   27a08:	d1f3      	bne.n	279f2 <lll_adv_connect_ind_check+0x14>
	return (rx_addr == ci->tx_addr) &&
   27a0a:	7823      	ldrb	r3, [r4, #0]
   27a0c:	f89d 2010 	ldrb.w	r2, [sp, #16]
   27a10:	f3c3 1380 	ubfx	r3, r3, #6, #1
   27a14:	4293      	cmp	r3, r2
   27a16:	d1ed      	bne.n	279f4 <lll_adv_connect_ind_check+0x16>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   27a18:	2206      	movs	r2, #6
   27a1a:	1ca1      	adds	r1, r4, #2
   27a1c:	4628      	mov	r0, r5
   27a1e:	f7fc fb6f 	bl	24100 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   27a22:	fab0 f080 	clz	r0, r0
   27a26:	0940      	lsrs	r0, r0, #5
   27a28:	e7e4      	b.n	279f4 <lll_adv_connect_ind_check+0x16>
	return (((lll->filter_policy & 0x02) == 0) ||
   27a2a:	7b40      	ldrb	r0, [r0, #13]
		(devmatch_ok)) &&
   27a2c:	0780      	lsls	r0, r0, #30
   27a2e:	d500      	bpl.n	27a32 <lll_adv_connect_ind_check+0x54>
	return (((lll->filter_policy & 0x02) == 0) ||
   27a30:	b179      	cbz	r1, 27a52 <lll_adv_connect_ind_check+0x74>
	return (tx_addr == ci->rx_addr) &&
   27a32:	7821      	ldrb	r1, [r4, #0]
   27a34:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   27a38:	d109      	bne.n	27a4e <lll_adv_connect_ind_check+0x70>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   27a3a:	2206      	movs	r2, #6
   27a3c:	f104 0108 	add.w	r1, r4, #8
   27a40:	4618      	mov	r0, r3
   27a42:	f7fc fb5d 	bl	24100 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   27a46:	fab0 f080 	clz	r0, r0
   27a4a:	0940      	lsrs	r0, r0, #5
   27a4c:	e7d4      	b.n	279f8 <lll_adv_connect_ind_check+0x1a>
   27a4e:	2000      	movs	r0, #0
   27a50:	e7d2      	b.n	279f8 <lll_adv_connect_ind_check+0x1a>
		(devmatch_ok)) &&
   27a52:	4608      	mov	r0, r1
   27a54:	e7d0      	b.n	279f8 <lll_adv_connect_ind_check+0x1a>

00027a56 <isr_done_cleanup>:
{
   27a56:	b538      	push	{r3, r4, r5, lr}
   27a58:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   27a5a:	f7f2 fd9d 	bl	1a598 <lll_is_done>
   27a5e:	4605      	mov	r5, r0
   27a60:	b998      	cbnz	r0, 27a8a <isr_done_cleanup+0x34>
	radio_filter_disable();
   27a62:	f7f4 faaf 	bl	1bfc4 <radio_filter_disable>
	if (++lll->chan == 3U) {
   27a66:	7a23      	ldrb	r3, [r4, #8]
   27a68:	f3c3 0241 	ubfx	r2, r3, #1, #2
   27a6c:	3201      	adds	r2, #1
   27a6e:	f002 0203 	and.w	r2, r2, #3
   27a72:	2a03      	cmp	r2, #3
   27a74:	bf14      	ite	ne
   27a76:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   27a7a:	f365 0342 	bfieq	r3, r5, #1, #2
   27a7e:	7223      	strb	r3, [r4, #8]
	lll_isr_cleanup(param);
   27a80:	4620      	mov	r0, r4
}
   27a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   27a86:	f7f2 bdbd 	b.w	1a604 <lll_isr_cleanup>
}
   27a8a:	bd38      	pop	{r3, r4, r5, pc}

00027a8c <isr_done>:
{
   27a8c:	b508      	push	{r3, lr}
	isr_common_done(param);
   27a8e:	f7f3 fad1 	bl	1b034 <isr_common_done>
	radio_rx_enable();
   27a92:	f7f4 f9cf 	bl	1be34 <radio_rx_enable>
}
   27a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   27a9a:	f7f4 bbb1 	b.w	1c200 <radio_tmr_end_capture>

00027a9e <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   27a9e:	68c3      	ldr	r3, [r0, #12]
{
   27aa0:	b570      	push	{r4, r5, r6, lr}
   27aa2:	4604      	mov	r4, r0
	evt = HDR_LLL2EVT(p->param);
   27aa4:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   27aa6:	f7ff fbd0 	bl	2724a <ticker_ticks_now_get>
   27aaa:	4605      	mov	r5, r0
   27aac:	4630      	mov	r0, r6
   27aae:	f7ff fee6 	bl	2787e <lll_evt_offset_get>
	p->remainder = 0;
   27ab2:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   27ab4:	1a28      	subs	r0, r5, r0
   27ab6:	6020      	str	r0, [r4, #0]
	p->remainder = 0;
   27ab8:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   27aba:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   27abc:	4620      	mov	r0, r4
}
   27abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   27ac2:	f7f3 b9e3 	b.w	1ae8c <prepare_cb>

00027ac6 <isr_window>:
{
   27ac6:	b510      	push	{r4, lr}
   27ac8:	4604      	mov	r4, r0
	isr_common_done(param);
   27aca:	f7f3 fab3 	bl	1b034 <isr_common_done>
	if (++lll->chan == 3U) {
   27ace:	7a23      	ldrb	r3, [r4, #8]
   27ad0:	f3c3 0241 	ubfx	r2, r3, #1, #2
   27ad4:	3201      	adds	r2, #1
   27ad6:	f002 0203 	and.w	r2, r2, #3
   27ada:	2a03      	cmp	r2, #3
   27adc:	bf14      	ite	ne
   27ade:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   27ae2:	f36f 0342 	bfceq	r3, #1, #2
   27ae6:	7223      	strb	r3, [r4, #8]
	lll_chan_set(37 + lll->chan);
   27ae8:	7a20      	ldrb	r0, [r4, #8]
   27aea:	f3c0 0041 	ubfx	r0, r0, #1, #2
   27aee:	3025      	adds	r0, #37	; 0x25
   27af0:	f7f2 fd5a 	bl	1a5a8 <lll_chan_set>
	ticks_at_start = ticker_ticks_now_get() +
   27af4:	f7ff fba9 	bl	2724a <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   27af8:	1cc1      	adds	r1, r0, #3
   27afa:	2000      	movs	r0, #0
   27afc:	f7f4 fb10 	bl	1c120 <radio_tmr_start_tick>
}
   27b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   27b04:	f7f4 bb7c 	b.w	1c200 <radio_tmr_end_capture>

00027b08 <isr_rx_scan_report.isra.5>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   27b08:	b570      	push	{r4, r5, r6, lr}
   27b0a:	4606      	mov	r6, r0
				uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   27b0c:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   27b0e:	460d      	mov	r5, r1
	node_rx = ull_pdu_rx_alloc_peek(3);
   27b10:	f7f0 f9f2 	bl	17ef8 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   27b14:	4604      	mov	r4, r0
   27b16:	b1b0      	cbz	r0, 27b46 <isr_rx_scan_report.isra.5+0x3e>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   27b18:	f7f0 fa06 	bl	17f28 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   27b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   27b20:	80e3      	strh	r3, [r4, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   27b22:	2304      	movs	r3, #4
   27b24:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   27b26:	b166      	cbz	r6, 27b42 <isr_rx_scan_report.isra.5+0x3a>
   27b28:	f7f4 fa18 	bl	1bf5c <radio_rssi_get>
   27b2c:	b2c0      	uxtb	r0, r0
   27b2e:	7620      	strb	r0, [r4, #24]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   27b30:	4621      	mov	r1, r4
   27b32:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   27b34:	7665      	strb	r5, [r4, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   27b36:	f7f0 fa0d 	bl	17f54 <ull_rx_put>
	ull_rx_sched();
   27b3a:	f7f0 fa1b 	bl	17f74 <ull_rx_sched>

	return 0;
   27b3e:	2000      	movs	r0, #0
}
   27b40:	bd70      	pop	{r4, r5, r6, pc}
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   27b42:	207f      	movs	r0, #127	; 0x7f
   27b44:	e7f3      	b.n	27b2e <isr_rx_scan_report.isra.5+0x26>
		return -ENOBUFS;
   27b46:	f06f 0036 	mvn.w	r0, #54	; 0x36
   27b4a:	e7f9      	b.n	27b40 <isr_rx_scan_report.isra.5+0x38>

00027b4c <isr_abort>:
{
   27b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27b4e:	4605      	mov	r5, r0
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   27b50:	2400      	movs	r4, #0
	lll_isr_status_reset();
   27b52:	f7ff fec7 	bl	278e4 <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   27b56:	4623      	mov	r3, r4
   27b58:	2203      	movs	r2, #3
   27b5a:	4621      	mov	r1, r4
   27b5c:	9400      	str	r4, [sp, #0]
   27b5e:	4620      	mov	r0, r4
   27b60:	f7ee fccc 	bl	164fc <ticker_stop>
	radio_disable();
   27b64:	f7f4 f972 	bl	1be4c <radio_disable>
	radio_filter_disable();
   27b68:	f7f4 fa2c 	bl	1bfc4 <radio_filter_disable>
	if (++lll->chan == 3U) {
   27b6c:	7a2b      	ldrb	r3, [r5, #8]
   27b6e:	f3c3 0241 	ubfx	r2, r3, #1, #2
   27b72:	3201      	adds	r2, #1
   27b74:	f002 0203 	and.w	r2, r2, #3
   27b78:	2a03      	cmp	r2, #3
   27b7a:	bf14      	ite	ne
   27b7c:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   27b80:	f364 0342 	bfieq	r3, r4, #1, #2
	lll_isr_cleanup(param);
   27b84:	4628      	mov	r0, r5
		lll->chan = 0U;
   27b86:	722b      	strb	r3, [r5, #8]
}
   27b88:	b003      	add	sp, #12
   27b8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	lll_isr_cleanup(param);
   27b8e:	f7f2 bd39 	b.w	1a604 <lll_isr_cleanup>

00027b92 <lll_scan_init>:
}
   27b92:	2000      	movs	r0, #0
   27b94:	4770      	bx	lr

00027b96 <lll_scan_reset>:
   27b96:	2000      	movs	r0, #0
   27b98:	4770      	bx	lr

00027b9a <lll_conn_init>:
{
   27b9a:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   27b9c:	f7f4 f9a8 	bl	1bef0 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   27ba0:	7803      	ldrb	r3, [r0, #0]
   27ba2:	2201      	movs	r2, #1
   27ba4:	f362 0301 	bfi	r3, r2, #0, #2
   27ba8:	7003      	strb	r3, [r0, #0]
}
   27baa:	2000      	movs	r0, #0
   27bac:	bd08      	pop	{r3, pc}

00027bae <lll_conn_reset>:
}
   27bae:	2000      	movs	r0, #0
   27bb0:	4770      	bx	lr

00027bb2 <lll_conn_flush>:
}
   27bb2:	4770      	bx	lr

00027bb4 <lll_conn_tx_pkt_set>:
{
   27bb4:	b510      	push	{r4, lr}
   27bb6:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
   27bb8:	2100      	movs	r1, #0
   27bba:	4608      	mov	r0, r1
   27bbc:	f7f4 f8bc 	bl	1bd38 <radio_phy_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   27bc0:	2008      	movs	r0, #8
   27bc2:	2201      	movs	r2, #1
   27bc4:	211b      	movs	r1, #27
   27bc6:	f7f4 f8fd 	bl	1bdc4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   27bca:	4620      	mov	r0, r4
}
   27bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_tx_set(pdu_data_tx);
   27bd0:	f7f4 b92a 	b.w	1be28 <radio_pkt_tx_set>

00027bd4 <lll_conn_pdu_tx_prep>:
{
   27bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   27bd8:	4606      	mov	r6, r0
   27bda:	4688      	mov	r8, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   27bdc:	aa01      	add	r2, sp, #4
   27bde:	e9d0 0110 	ldrd	r0, r1, [r0, #64]	; 0x40
   27be2:	f7ff f8b3 	bl	26d4c <memq_peek>
	if (lll->empty || !link) {
   27be6:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
   27bea:	075b      	lsls	r3, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   27bec:	4681      	mov	r9, r0
	if (lll->empty || !link) {
   27bee:	d400      	bmi.n	27bf2 <lll_conn_pdu_tx_prep+0x1e>
   27bf0:	b9b8      	cbnz	r0, 27c22 <lll_conn_pdu_tx_prep+0x4e>
		lll->empty = 1U;
   27bf2:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
   27bf6:	f043 0304 	orr.w	r3, r3, #4
   27bfa:	f886 3056 	strb.w	r3, [r6, #86]	; 0x56
		p = (void *)radio_pkt_empty_get();
   27bfe:	f7f4 f977 	bl	1bef0 <radio_pkt_empty_get>
   27c02:	4607      	mov	r7, r0
		if (link || FORCE_MD_CNT_GET()) {
   27c04:	7803      	ldrb	r3, [r0, #0]
   27c06:	f1b9 0f00 	cmp.w	r9, #0
   27c0a:	d007      	beq.n	27c1c <lll_conn_pdu_tx_prep+0x48>
			p->md = 1U;
   27c0c:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   27c10:	703b      	strb	r3, [r7, #0]
	*pdu_data_tx = p;
   27c12:	f8c8 7000 	str.w	r7, [r8]
}
   27c16:	b003      	add	sp, #12
   27c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			p->md = 0U;
   27c1c:	f369 1304 	bfi	r3, r9, #4, #1
   27c20:	e7f6      	b.n	27c10 <lll_conn_pdu_tx_prep+0x3c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   27c22:	9d01      	ldr	r5, [sp, #4]
   27c24:	f896 4055 	ldrb.w	r4, [r6, #85]	; 0x55
		if (!lll->packet_tx_head_len) {
   27c28:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   27c2c:	3504      	adds	r5, #4
   27c2e:	192f      	adds	r7, r5, r4
		if (!lll->packet_tx_head_len) {
   27c30:	b913      	cbnz	r3, 27c38 <lll_conn_pdu_tx_prep+0x64>
			lll->packet_tx_head_len = p->len;
   27c32:	787b      	ldrb	r3, [r7, #1]
   27c34:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
		if (lll->packet_tx_head_offset) {
   27c38:	b124      	cbz	r4, 27c44 <lll_conn_pdu_tx_prep+0x70>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   27c3a:	5d2b      	ldrb	r3, [r5, r4]
   27c3c:	2201      	movs	r2, #1
   27c3e:	f362 0301 	bfi	r3, r2, #0, #2
   27c42:	552b      	strb	r3, [r5, r4]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   27c44:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
   27c48:	1b1b      	subs	r3, r3, r4
   27c4a:	707b      	strb	r3, [r7, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   27c4c:	4630      	mov	r0, r6
   27c4e:	f7ff fdb6 	bl	277be <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   27c52:	787b      	ldrb	r3, [r7, #1]
   27c54:	4283      	cmp	r3, r0
   27c56:	d90b      	bls.n	27c70 <lll_conn_pdu_tx_prep+0x9c>
			p->len = max_tx_octets;
   27c58:	7078      	strb	r0, [r7, #1]
			p->md = 1U;
   27c5a:	5d2b      	ldrb	r3, [r5, r4]
			p->md = 1U;
   27c5c:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   27c60:	552b      	strb	r3, [r5, r4]
		p->rfu = 0U;
   27c62:	5d2b      	ldrb	r3, [r5, r4]
   27c64:	f36f 1347 	bfc	r3, #5, #3
   27c68:	552b      	strb	r3, [r5, r4]
		p->resv = 0U;
   27c6a:	2300      	movs	r3, #0
   27c6c:	70bb      	strb	r3, [r7, #2]
   27c6e:	e7d0      	b.n	27c12 <lll_conn_pdu_tx_prep+0x3e>
		} else if ((link->next != lll->memq_tx.tail) ||
   27c70:	6c73      	ldr	r3, [r6, #68]	; 0x44
   27c72:	f8d9 2000 	ldr.w	r2, [r9]
   27c76:	429a      	cmp	r2, r3
   27c78:	5d2b      	ldrb	r3, [r5, r4]
   27c7a:	d1ef      	bne.n	27c5c <lll_conn_pdu_tx_prep+0x88>
			p->md = 0U;
   27c7c:	f36f 1304 	bfc	r3, #4, #1
   27c80:	e7ee      	b.n	27c60 <lll_conn_pdu_tx_prep+0x8c>

00027c82 <ecb_encrypt_be>:

void ecb_encrypt_be(uint8_t const *const key_be, uint8_t const *const clear_text_be,
		    uint8_t * const cipher_text_be)
{
   27c82:	b530      	push	{r4, r5, lr}
   27c84:	b08d      	sub	sp, #52	; 0x34
   27c86:	460d      	mov	r5, r1
   27c88:	4614      	mov	r4, r2
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   27c8a:	4601      	mov	r1, r0
   27c8c:	2210      	movs	r2, #16
   27c8e:	4668      	mov	r0, sp
   27c90:	f7fc fa5d 	bl	2414e <memcpy>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   27c94:	2210      	movs	r2, #16
   27c96:	4629      	mov	r1, r5
   27c98:	eb0d 0002 	add.w	r0, sp, r2
   27c9c:	f7fc fa57 	bl	2414e <memcpy>

	do_ecb(&ecb);
   27ca0:	4668      	mov	r0, sp
   27ca2:	f7f3 ff4f 	bl	1bb44 <do_ecb>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
   27ca6:	2210      	movs	r2, #16
   27ca8:	a908      	add	r1, sp, #32
   27caa:	4620      	mov	r0, r4
   27cac:	f7fc fa4f 	bl	2414e <memcpy>
}
   27cb0:	b00d      	add	sp, #52	; 0x34
   27cb2:	bd30      	pop	{r4, r5, pc}

00027cb4 <ecb_encrypt>:

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   27cb4:	b570      	push	{r4, r5, r6, lr}
   27cb6:	b08c      	sub	sp, #48	; 0x30
   27cb8:	460e      	mov	r6, r1
   27cba:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   27cbc:	4601      	mov	r1, r0
   27cbe:	2210      	movs	r2, #16
   27cc0:	4668      	mov	r0, sp
{
   27cc2:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   27cc4:	f7ff f813 	bl	26cee <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   27cc8:	2210      	movs	r2, #16
   27cca:	eb0d 0002 	add.w	r0, sp, r2
   27cce:	4631      	mov	r1, r6
   27cd0:	f7ff f80d 	bl	26cee <mem_rcopy>

	do_ecb(&ecb);
   27cd4:	4668      	mov	r0, sp
   27cd6:	f7f3 ff35 	bl	1bb44 <do_ecb>

	if (cipher_text_le) {
   27cda:	b125      	cbz	r5, 27ce6 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   27cdc:	2210      	movs	r2, #16
   27cde:	a908      	add	r1, sp, #32
   27ce0:	4628      	mov	r0, r5
   27ce2:	f7ff f804 	bl	26cee <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   27ce6:	b124      	cbz	r4, 27cf2 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   27ce8:	2210      	movs	r2, #16
   27cea:	a908      	add	r1, sp, #32
   27cec:	4620      	mov	r0, r4
   27cee:	f7fc fa2e 	bl	2414e <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   27cf2:	b00c      	add	sp, #48	; 0x30
   27cf4:	bd70      	pop	{r4, r5, r6, pc}

00027cf6 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   27cf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27cfa:	f04f 32ff 	mov.w	r2, #4294967295
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   27cfe:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   27d00:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   27d04:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   27d08:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   27d0c:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   27d10:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   27d14:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   27d18:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   27d1c:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   27d20:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   27d24:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   27d28:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   27d2c:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   27d30:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   27d34:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   27d38:	4770      	bx	lr

00027d3a <radio_tx_chain_delay_get>:
}
   27d3a:	2001      	movs	r0, #1
   27d3c:	4770      	bx	lr

00027d3e <radio_rx_ready_delay_get>:
}
   27d3e:	2029      	movs	r0, #41	; 0x29
   27d40:	4770      	bx	lr

00027d42 <radio_rx_chain_delay_get>:
	switch (phy) {
   27d42:	2802      	cmp	r0, #2
}
   27d44:	bf14      	ite	ne
   27d46:	200a      	movne	r0, #10
   27d48:	2005      	moveq	r0, #5
   27d4a:	4770      	bx	lr

00027d4c <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   27d4c:	4288      	cmp	r0, r1
   27d4e:	d00c      	beq.n	27d6a <mayfly_prio_is_equal+0x1e>
	return (caller_id == callee_id) ||
   27d50:	b978      	cbnz	r0, 27d72 <mayfly_prio_is_equal+0x26>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   27d52:	1e48      	subs	r0, r1, #1
   27d54:	2801      	cmp	r0, #1
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   27d56:	bf8c      	ite	hi
   27d58:	2000      	movhi	r0, #0
   27d5a:	2001      	movls	r0, #1
   27d5c:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   27d5e:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   27d62:	bf0c      	ite	eq
   27d64:	2001      	moveq	r0, #1
   27d66:	2000      	movne	r0, #0
   27d68:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   27d6a:	2001      	movs	r0, #1
   27d6c:	4770      	bx	lr
   27d6e:	2000      	movs	r0, #0
}
   27d70:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   27d72:	2801      	cmp	r0, #1
   27d74:	d0f3      	beq.n	27d5e <mayfly_prio_is_equal+0x12>
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   27d76:	2802      	cmp	r0, #2
   27d78:	d1f9      	bne.n	27d6e <mayfly_prio_is_equal+0x22>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   27d7a:	2901      	cmp	r1, #1
   27d7c:	e7eb      	b.n	27d56 <mayfly_prio_is_equal+0xa>

00027d7e <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
	cntr_cmp_set(0, value);
   27d7e:	4601      	mov	r1, r0
   27d80:	2000      	movs	r0, #0
   27d82:	f7f3 bed7 	b.w	1bb34 <cntr_cmp_set>

00027d86 <sys_put_le32>:
	dst[1] = val >> 8;
   27d86:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   27d8a:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   27d8c:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   27d8e:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   27d90:	0a00      	lsrs	r0, r0, #8
   27d92:	704b      	strb	r3, [r1, #1]
   27d94:	70c8      	strb	r0, [r1, #3]
}
   27d96:	4770      	bx	lr

00027d98 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   27d9c:	b510      	push	{r4, lr}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27d9e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   27da2:	3201      	adds	r2, #1
{
   27da4:	4604      	mov	r4, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27da6:	d106      	bne.n	27db6 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   27da8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27dac:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   27db0:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27db2:	4293      	cmp	r3, r2
   27db4:	d044      	beq.n	27e40 <hci_vendor_read_static_addr+0xa8>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   27db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   27dba:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   27dbe:	f010 0001 	ands.w	r0, r0, #1
   27dc2:	d036      	beq.n	27e32 <hci_vendor_read_static_addr+0x9a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   27dc4:	4621      	mov	r1, r4
   27dc6:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
   27dca:	f7ff ffdc 	bl	27d86 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   27dce:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   27dd2:	7123      	strb	r3, [r4, #4]
	dst[1] = val >> 8;
   27dd4:	f3c3 2307 	ubfx	r3, r3, #8, #8

		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   27dd8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   27ddc:	7163      	strb	r3, [r4, #5]

		/* If no public address is provided and a static address is
		 * available, then it is recommended to return an identity root
		 * key (if available) from this command.
		 */
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   27dde:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   27de2:	3101      	adds	r1, #1
   27de4:	f104 0306 	add.w	r3, r4, #6
   27de8:	d024      	beq.n	27e34 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   27dea:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   27dee:	3101      	adds	r1, #1
   27df0:	d020      	beq.n	27e34 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   27df2:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   27df6:	3101      	adds	r1, #1
   27df8:	d01c      	beq.n	27e34 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   27dfa:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   27dfe:	3101      	adds	r1, #1
   27e00:	d018      	beq.n	27e34 <hci_vendor_read_static_addr+0x9c>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   27e02:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   27e06:	4619      	mov	r1, r3
   27e08:	f7ff ffbd 	bl	27d86 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   27e0c:	f104 010a 	add.w	r1, r4, #10
   27e10:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   27e14:	f7ff ffb7 	bl	27d86 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   27e18:	f104 010e 	add.w	r1, r4, #14
   27e1c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   27e20:	f7ff ffb1 	bl	27d86 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   27e24:	f104 0112 	add.w	r1, r4, #18
   27e28:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   27e2c:	f7ff ffab 	bl	27d86 <sys_put_le32>
		} else {
			/* Mark IR as invalid */
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
		}

		return 1;
   27e30:	2001      	movs	r0, #1
	}

	return 0;
}
   27e32:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   27e34:	2210      	movs	r2, #16
   27e36:	2100      	movs	r1, #0
   27e38:	4618      	mov	r0, r3
   27e3a:	f7fc f9b2 	bl	241a2 <memset>
   27e3e:	e7f7      	b.n	27e30 <hci_vendor_read_static_addr+0x98>
	return 0;
   27e40:	2000      	movs	r0, #0
   27e42:	e7f6      	b.n	27e32 <hci_vendor_read_static_addr+0x9a>

00027e44 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   27e44:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   27e46:	2210      	movs	r2, #16
{
   27e48:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   27e4a:	2100      	movs	r1, #0
   27e4c:	f7fc f9a9 	bl	241a2 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   27e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   27e54:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   27e58:	3301      	adds	r3, #1
   27e5a:	d023      	beq.n	27ea4 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   27e5c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   27e60:	3301      	adds	r3, #1
   27e62:	d01f      	beq.n	27ea4 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   27e64:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   27e68:	3301      	adds	r3, #1
   27e6a:	d01b      	beq.n	27ea4 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   27e6c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   27e70:	3301      	adds	r3, #1
   27e72:	d017      	beq.n	27ea4 <hci_vendor_read_key_hierarchy_roots+0x60>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   27e74:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   27e78:	4621      	mov	r1, r4
   27e7a:	f7ff ff84 	bl	27d86 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   27e7e:	1d21      	adds	r1, r4, #4
   27e80:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   27e84:	f7ff ff7f 	bl	27d86 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   27e88:	f104 0108 	add.w	r1, r4, #8
   27e8c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   27e90:	f7ff ff79 	bl	27d86 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   27e94:	f104 010c 	add.w	r1, r4, #12
   27e98:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   27e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   27ea0:	f7ff bf71 	b.w	27d86 <sys_put_le32>
		(void)memset(er, 0x00, 16);
   27ea4:	4620      	mov	r0, r4
   27ea6:	2210      	movs	r2, #16
   27ea8:	2100      	movs	r1, #0
}
   27eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   27eae:	f7fc b978 	b.w	241a2 <memset>

00027eb2 <fixed_data_unref>:
}
   27eb2:	4770      	bx	lr

00027eb4 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   27eb4:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   27eb6:	6849      	ldr	r1, [r1, #4]
   27eb8:	6809      	ldr	r1, [r1, #0]
   27eba:	f7f4 bb13 	b.w	1c4e4 <net_buf_alloc_len>

00027ebe <net_buf_simple_init_with_data>:
	buf->size  = size;
   27ebe:	b292      	uxth	r2, r2
	buf->__buf = data;
   27ec0:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   27ec2:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   27ec4:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   27ec6:	8082      	strh	r2, [r0, #4]
}
   27ec8:	4770      	bx	lr

00027eca <net_buf_simple_clone>:
{
   27eca:	460b      	mov	r3, r1
	memcpy(clone, original, sizeof(struct net_buf_simple));
   27ecc:	220c      	movs	r2, #12
   27ece:	4601      	mov	r1, r0
   27ed0:	4618      	mov	r0, r3
   27ed2:	f7fc b93c 	b.w	2414e <memcpy>

00027ed6 <net_buf_simple_push_be16>:
{
   27ed6:	b510      	push	{r4, lr}
   27ed8:	460c      	mov	r4, r1
	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
   27eda:	2102      	movs	r1, #2
   27edc:	f7f4 fdbc 	bl	1ca58 <net_buf_simple_push>
	dst[0] = val >> 8;
   27ee0:	0a23      	lsrs	r3, r4, #8
   27ee2:	7003      	strb	r3, [r0, #0]
	dst[1] = val;
   27ee4:	7044      	strb	r4, [r0, #1]
}
   27ee6:	bd10      	pop	{r4, pc}

00027ee8 <net_buf_simple_push_u8>:
{
   27ee8:	b510      	push	{r4, lr}
   27eea:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   27eec:	2101      	movs	r1, #1
   27eee:	f7f4 fdb3 	bl	1ca58 <net_buf_simple_push>
	*data = val;
   27ef2:	7004      	strb	r4, [r0, #0]
}
   27ef4:	bd10      	pop	{r4, pc}

00027ef6 <net_buf_simple_push_be24>:
{
   27ef6:	b510      	push	{r4, lr}
   27ef8:	460c      	mov	r4, r1
	sys_put_be24(val, net_buf_simple_push(buf, 3));
   27efa:	2103      	movs	r1, #3
   27efc:	f7f4 fdac 	bl	1ca58 <net_buf_simple_push>
	dst[0] = val >> 16;
   27f00:	0c23      	lsrs	r3, r4, #16
   27f02:	7003      	strb	r3, [r0, #0]
	dst[0] = val >> 8;
   27f04:	f3c4 2307 	ubfx	r3, r4, #8, #8
   27f08:	7043      	strb	r3, [r0, #1]
	dst[1] = val;
   27f0a:	7084      	strb	r4, [r0, #2]
}
   27f0c:	bd10      	pop	{r4, pc}

00027f0e <net_buf_simple_pull_u8>:
{
   27f0e:	b510      	push	{r4, lr}
	val = buf->data[0];
   27f10:	6803      	ldr	r3, [r0, #0]
   27f12:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   27f14:	2101      	movs	r1, #1
   27f16:	f7f4 fdbd 	bl	1ca94 <net_buf_simple_pull>
}
   27f1a:	4620      	mov	r0, r4
   27f1c:	bd10      	pop	{r4, pc}

00027f1e <net_buf_simple_pull_le16>:
{
   27f1e:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   27f20:	6803      	ldr	r3, [r0, #0]
   27f22:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   27f24:	2102      	movs	r1, #2
   27f26:	f7f4 fdb5 	bl	1ca94 <net_buf_simple_pull>
}
   27f2a:	4620      	mov	r0, r4
   27f2c:	bd10      	pop	{r4, pc}

00027f2e <net_buf_simple_pull_be16>:
	val = UNALIGNED_GET((uint16_t *)buf->data);
   27f2e:	6803      	ldr	r3, [r0, #0]
{
   27f30:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   27f32:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   27f34:	2102      	movs	r1, #2
   27f36:	f7f4 fdad 	bl	1ca94 <net_buf_simple_pull>
	return sys_be16_to_cpu(val);
   27f3a:	0220      	lsls	r0, r4, #8
   27f3c:	ea40 2014 	orr.w	r0, r0, r4, lsr #8
}
   27f40:	b280      	uxth	r0, r0
   27f42:	bd10      	pop	{r4, pc}

00027f44 <net_buf_simple_pull_be32>:
{
   27f44:	b510      	push	{r4, lr}
   27f46:	6803      	ldr	r3, [r0, #0]
   27f48:	681c      	ldr	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   27f4a:	2104      	movs	r1, #4
   27f4c:	ba24      	rev	r4, r4
   27f4e:	f7f4 fda1 	bl	1ca94 <net_buf_simple_pull>
}
   27f52:	4620      	mov	r0, r4
   27f54:	bd10      	pop	{r4, pc}

00027f56 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   27f56:	6802      	ldr	r2, [r0, #0]
   27f58:	6880      	ldr	r0, [r0, #8]
}
   27f5a:	1a10      	subs	r0, r2, r0
   27f5c:	4770      	bx	lr

00027f5e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   27f5e:	8883      	ldrh	r3, [r0, #4]
   27f60:	88c2      	ldrh	r2, [r0, #6]
   27f62:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   27f64:	6803      	ldr	r3, [r0, #0]
   27f66:	6880      	ldr	r0, [r0, #8]
   27f68:	1a18      	subs	r0, r3, r0
}
   27f6a:	1a10      	subs	r0, r2, r0
   27f6c:	4770      	bx	lr

00027f6e <net_buf_simple_add_mem>:
{
   27f6e:	b538      	push	{r3, r4, r5, lr}
   27f70:	460d      	mov	r5, r1
   27f72:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   27f74:	4611      	mov	r1, r2
   27f76:	f7f4 fdc7 	bl	1cb08 <net_buf_simple_add>
   27f7a:	4622      	mov	r2, r4
   27f7c:	4629      	mov	r1, r5
}
   27f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   27f82:	f7fc b8e4 	b.w	2414e <memcpy>

00027f86 <net_buf_simple_add_u8>:
{
   27f86:	b510      	push	{r4, lr}
   27f88:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   27f8a:	2101      	movs	r1, #1
   27f8c:	f7f4 fdbc 	bl	1cb08 <net_buf_simple_add>
	*u8 = val;
   27f90:	7004      	strb	r4, [r0, #0]
}
   27f92:	bd10      	pop	{r4, pc}

00027f94 <net_buf_simple_add_le16>:
{
   27f94:	b510      	push	{r4, lr}
   27f96:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   27f98:	2102      	movs	r1, #2
   27f9a:	f7f4 fdb5 	bl	1cb08 <net_buf_simple_add>
	dst[0] = val;
   27f9e:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   27fa0:	0a24      	lsrs	r4, r4, #8
   27fa2:	7044      	strb	r4, [r0, #1]
}
   27fa4:	bd10      	pop	{r4, pc}

00027fa6 <net_buf_simple_add_be16>:
{
   27fa6:	b510      	push	{r4, lr}
   27fa8:	460c      	mov	r4, r1
	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
   27faa:	2102      	movs	r1, #2
   27fac:	f7f4 fdac 	bl	1cb08 <net_buf_simple_add>
	dst[0] = val >> 8;
   27fb0:	0a23      	lsrs	r3, r4, #8
   27fb2:	7003      	strb	r3, [r0, #0]
	dst[1] = val;
   27fb4:	7044      	strb	r4, [r0, #1]
}
   27fb6:	bd10      	pop	{r4, pc}

00027fb8 <net_buf_simple_add_le24>:
{
   27fb8:	b510      	push	{r4, lr}
   27fba:	460c      	mov	r4, r1
	sys_put_le24(val, net_buf_simple_add(buf, 3));
   27fbc:	2103      	movs	r1, #3
   27fbe:	f7f4 fda3 	bl	1cb08 <net_buf_simple_add>
	dst[1] = val >> 8;
   27fc2:	f3c4 2307 	ubfx	r3, r4, #8, #8
	dst[0] = val;
   27fc6:	7004      	strb	r4, [r0, #0]
	dst[2] = val >> 16;
   27fc8:	0c24      	lsrs	r4, r4, #16
	dst[1] = val >> 8;
   27fca:	7043      	strb	r3, [r0, #1]
	dst[2] = val >> 16;
   27fcc:	7084      	strb	r4, [r0, #2]
}
   27fce:	bd10      	pop	{r4, pc}

00027fd0 <net_buf_simple_add_be32>:
{
   27fd0:	b510      	push	{r4, lr}
   27fd2:	460c      	mov	r4, r1
	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   27fd4:	2104      	movs	r1, #4
   27fd6:	f7f4 fd97 	bl	1cb08 <net_buf_simple_add>
	sys_put_be16(val >> 16, dst);
   27fda:	0c23      	lsrs	r3, r4, #16
	dst[0] = val >> 8;
   27fdc:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   27fde:	7043      	strb	r3, [r0, #1]
	dst[0] = val >> 8;
   27fe0:	f3c4 2307 	ubfx	r3, r4, #8, #8
   27fe4:	7002      	strb	r2, [r0, #0]
   27fe6:	7083      	strb	r3, [r0, #2]
	dst[1] = val;
   27fe8:	70c4      	strb	r4, [r0, #3]
}
   27fea:	bd10      	pop	{r4, pc}

00027fec <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27fec:	6843      	ldr	r3, [r0, #4]
   27fee:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   27ff0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   27ff4:	600b      	str	r3, [r1, #0]
}
   27ff6:	2000      	movs	r0, #0
   27ff8:	4770      	bx	lr

00027ffa <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27ffa:	6843      	ldr	r3, [r0, #4]
   27ffc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   27ffe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   28002:	4042      	eors	r2, r0
   28004:	400a      	ands	r2, r1
   28006:	4042      	eors	r2, r0
    p_reg->OUT = value;
   28008:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2800c:	2000      	movs	r0, #0
   2800e:	4770      	bx	lr

00028010 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28010:	6843      	ldr	r3, [r0, #4]
   28012:	685b      	ldr	r3, [r3, #4]
}
   28014:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   28016:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2801a:	4770      	bx	lr

0002801c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2801c:	6843      	ldr	r3, [r0, #4]
   2801e:	685b      	ldr	r3, [r3, #4]
}
   28020:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   28022:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   28026:	4770      	bx	lr

00028028 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28028:	6843      	ldr	r3, [r0, #4]
   2802a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2802c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   28030:	4059      	eors	r1, r3
    p_reg->OUT = value;
   28032:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   28036:	2000      	movs	r0, #0
   28038:	4770      	bx	lr

0002803a <nrf_gpio_cfg_sense_set>:
{
   2803a:	b513      	push	{r0, r1, r4, lr}
   2803c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2803e:	a801      	add	r0, sp, #4
{
   28040:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28042:	f7f4 fded 	bl	1cc20 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   28046:	9a01      	ldr	r2, [sp, #4]
   28048:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   2804c:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   28050:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   28054:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   28058:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   2805c:	b002      	add	sp, #8
   2805e:	bd10      	pop	{r4, pc}

00028060 <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   28060:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   28062:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   28066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   2806a:	68dc      	ldr	r4, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2806c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   28070:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   28072:	430a      	orrs	r2, r1
   28074:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   28078:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   2807c:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   28080:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   28082:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   28086:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   28088:	2700      	movs	r7, #0
	while (level_pins) {
   2808a:	b914      	cbnz	r4, 28092 <check_level_trigger_pins+0x32>
}
   2808c:	4628      	mov	r0, r5
   2808e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   28092:	4234      	tst	r4, r6
   28094:	d00a      	beq.n	280ac <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   28096:	f898 3008 	ldrb.w	r3, [r8, #8]
   2809a:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2809e:	2100      	movs	r1, #0
   280a0:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   280a4:	f7ff ffc9 	bl	2803a <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   280a8:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   280ac:	3701      	adds	r7, #1
		bit <<= 1;
   280ae:	0076      	lsls	r6, r6, #1
   280b0:	e7eb      	b.n	2808a <check_level_trigger_pins+0x2a>

000280b2 <cfg_level_pins>:
{
   280b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   280b6:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   280b8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   280bc:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   280be:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   280c2:	4313      	orrs	r3, r2
   280c4:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   280c8:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   280ca:	2500      	movs	r5, #0
	while (level_pins) {
   280cc:	b90c      	cbnz	r4, 280d2 <cfg_level_pins+0x20>
}
   280ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   280d2:	4226      	tst	r6, r4
   280d4:	d010      	beq.n	280f8 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   280d6:	693b      	ldr	r3, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   280d8:	f898 2008 	ldrb.w	r2, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   280dc:	40eb      	lsrs	r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   280de:	f013 0f01 	tst.w	r3, #1
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   280e2:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   280e6:	bf0c      	ite	eq
   280e8:	2103      	moveq	r1, #3
   280ea:	2102      	movne	r1, #2
   280ec:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
   280f0:	f7ff ffa3 	bl	2803a <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   280f4:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   280f8:	3501      	adds	r5, #1
		bit <<= 1;
   280fa:	0076      	lsls	r6, r6, #1
   280fc:	e7e6      	b.n	280cc <cfg_level_pins+0x1a>

000280fe <flash_nrf_write_protection>:
}
   280fe:	2000      	movs	r0, #0
   28100:	4770      	bx	lr

00028102 <is_regular_addr_valid>:
{
   28102:	b538      	push	{r3, r4, r5, lr}
   28104:	4604      	mov	r4, r0
   28106:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   28108:	f000 fa6e 	bl	285e8 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2810c:	4284      	cmp	r4, r0
   2810e:	d209      	bcs.n	28124 <is_regular_addr_valid+0x22>
   28110:	2c00      	cmp	r4, #0
   28112:	db07      	blt.n	28124 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   28114:	42a8      	cmp	r0, r5
   28116:	d305      	bcc.n	28124 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   28118:	442c      	add	r4, r5
	    len > flash_size ||
   2811a:	4284      	cmp	r4, r0
   2811c:	bf8c      	ite	hi
   2811e:	2000      	movhi	r0, #0
   28120:	2001      	movls	r0, #1
}
   28122:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   28124:	2000      	movs	r0, #0
   28126:	e7fc      	b.n	28122 <is_regular_addr_valid+0x20>

00028128 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   28128:	2000      	movs	r0, #0
   2812a:	f7ee b933 	b.w	16394 <ticker_is_initialized>

0002812e <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2812e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   28132:	6883      	ldr	r3, [r0, #8]
{
   28134:	b086      	sub	sp, #24
   28136:	4689      	mov	r9, r1
   28138:	4692      	mov	sl, r2
	api->page_layout(dev, &layout, &num_blocks);
   2813a:	695b      	ldr	r3, [r3, #20]
   2813c:	aa02      	add	r2, sp, #8
   2813e:	a901      	add	r1, sp, #4
   28140:	4798      	blx	r3
	off_t off = 0;
   28142:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   28144:	46a0      	mov	r8, r4

	for (block = 0; block < num_blocks; block++) {
   28146:	4625      	mov	r5, r4
   28148:	9b02      	ldr	r3, [sp, #8]
   2814a:	42ab      	cmp	r3, r5
   2814c:	d802      	bhi.n	28154 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2814e:	b006      	add	sp, #24
   28150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   28154:	9f01      	ldr	r7, [sp, #4]
   28156:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2815a:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2815c:	687b      	ldr	r3, [r7, #4]
   2815e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   28160:	683a      	ldr	r2, [r7, #0]
   28162:	42b2      	cmp	r2, r6
   28164:	eb08 0306 	add.w	r3, r8, r6
   28168:	d802      	bhi.n	28170 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2816a:	3501      	adds	r5, #1
   2816c:	4698      	mov	r8, r3
   2816e:	e7eb      	b.n	28148 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   28170:	4651      	mov	r1, sl
   28172:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   28174:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   28176:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   28178:	47c8      	blx	r9
   2817a:	2800      	cmp	r0, #0
   2817c:	d0e7      	beq.n	2814e <flash_page_foreach+0x20>
			off += page_info.size;
   2817e:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   28180:	3601      	adds	r6, #1
			off += page_info.size;
   28182:	441c      	add	r4, r3
			page++;
   28184:	e7ec      	b.n	28160 <flash_page_foreach+0x32>

00028186 <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   28186:	2000      	movs	r0, #0
   28188:	4770      	bx	lr

0002818a <tid_check_and_update>:
{
   2818a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2818e:	4604      	mov	r4, r0
   28190:	468a      	mov	sl, r1
   28192:	4615      	mov	r5, r2
	return z_impl_k_uptime_ticks();
   28194:	f000 fb69 	bl	2886a <z_impl_k_uptime_ticks>
   28198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2819c:	fba0 6703 	umull	r6, r7, r0, r3
   281a0:	fb03 7701 	mla	r7, r3, r1, r7
   281a4:	0bf3      	lsrs	r3, r6, #15
   281a6:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
   281aa:	0bfa      	lsrs	r2, r7, #15
	if (prev_transaction->src == ctx->addr &&
   281ac:	88a9      	ldrh	r1, [r5, #4]
   281ae:	8827      	ldrh	r7, [r4, #0]
   281b0:	428f      	cmp	r7, r1
	delta = uptime - *reftime;
   281b2:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
	*reftime = uptime;
   281b6:	e9c4 3202 	strd	r3, r2, [r4, #8]
   281ba:	d112      	bne.n	281e2 <tid_check_and_update+0x58>
   281bc:	f8b4 c002 	ldrh.w	ip, [r4, #2]
   281c0:	88ef      	ldrh	r7, [r5, #6]
   281c2:	45bc      	cmp	ip, r7
   281c4:	d10d      	bne.n	281e2 <tid_check_and_update+0x58>
	    prev_transaction->dst == ctx->recv_dst &&
   281c6:	7c27      	ldrb	r7, [r4, #16]
   281c8:	4557      	cmp	r7, sl
   281ca:	d10a      	bne.n	281e2 <tid_check_and_update+0x58>
	delta = uptime - *reftime;
   281cc:	ebb3 0800 	subs.w	r8, r3, r0
   281d0:	eb62 0906 	sbc.w	r9, r2, r6
	    prev_transaction->tid == tid && uptime_delta < 6000) {
   281d4:	f241 726f 	movw	r2, #5999	; 0x176f
   281d8:	2300      	movs	r3, #0
   281da:	4542      	cmp	r2, r8
   281dc:	eb73 0309 	sbcs.w	r3, r3, r9
   281e0:	da07      	bge.n	281f2 <tid_check_and_update+0x68>
	prev_transaction->dst = ctx->recv_dst;
   281e2:	88eb      	ldrh	r3, [r5, #6]
	prev_transaction->src = ctx->addr;
   281e4:	8021      	strh	r1, [r4, #0]
	prev_transaction->dst = ctx->recv_dst;
   281e6:	8063      	strh	r3, [r4, #2]
	prev_transaction->tid = tid;
   281e8:	f884 a010 	strb.w	sl, [r4, #16]
	return 0;
   281ec:	2000      	movs	r0, #0
}
   281ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EALREADY;
   281f2:	f06f 0044 	mvn.w	r0, #68	; 0x44
   281f6:	e7fa      	b.n	281ee <tid_check_and_update+0x64>

000281f8 <model_delay_encode>:

uint8_t model_delay_encode(uint32_t delay)
{
	return delay / DELAY_TIME_STEP_MS;
   281f8:	2305      	movs	r3, #5
   281fa:	fbb0 f0f3 	udiv	r0, r0, r3
}
   281fe:	b2c0      	uxtb	r0, r0
   28200:	4770      	bx	lr

00028202 <model_delay_decode>:

int32_t model_delay_decode(uint8_t encoded_delay)
{
	return encoded_delay * DELAY_TIME_STEP_MS;
}
   28202:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   28206:	4770      	bx	lr

00028208 <model_send>:

int model_send(struct bt_mesh_model *mod, struct bt_mesh_msg_ctx *ctx,
	       struct net_buf_simple *buf)
{
   28208:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2820a:	4613      	mov	r3, r2
   2820c:	4604      	mov	r4, r0
	if (!ctx && !mod->pub) {
   2820e:	b921      	cbnz	r1, 2821a <model_send+0x12>
   28210:	6882      	ldr	r2, [r0, #8]
   28212:	b942      	cbnz	r2, 28226 <model_send+0x1e>
		return -ENOTSUP;
   28214:	f06f 0022 	mvn.w	r0, #34	; 0x22
   28218:	e003      	b.n	28222 <model_send+0x1a>
	}

	if (ctx) {
		return bt_mesh_model_send(mod, ctx, buf, NULL, 0);
   2821a:	2300      	movs	r3, #0
   2821c:	9300      	str	r3, [sp, #0]
   2821e:	f7fe f88a 	bl	26336 <bt_mesh_model_send>

	net_buf_simple_reset(mod->pub->msg);
	net_buf_simple_add_mem(mod->pub->msg, buf->data, buf->len);

	return bt_mesh_model_publish(mod);
}
   28222:	b003      	add	sp, #12
   28224:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reset(mod->pub->msg);
   28226:	6910      	ldr	r0, [r2, #16]
	buf->data = buf->__buf;
   28228:	6882      	ldr	r2, [r0, #8]
	buf->len  = 0U;
   2822a:	8081      	strh	r1, [r0, #4]
	buf->data = buf->__buf;
   2822c:	6002      	str	r2, [r0, #0]
	net_buf_simple_add_mem(mod->pub->msg, buf->data, buf->len);
   2822e:	6819      	ldr	r1, [r3, #0]
   28230:	889a      	ldrh	r2, [r3, #4]
   28232:	f7ff fe9c 	bl	27f6e <net_buf_simple_add_mem>
	return bt_mesh_model_publish(mod);
   28236:	4620      	mov	r0, r4
}
   28238:	b003      	add	sp, #12
   2823a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_mesh_model_publish(mod);
   2823e:	f7e7 bc99 	b.w	fb74 <bt_mesh_model_publish>

00028242 <model_ackd_send>:

int model_ackd_send(struct bt_mesh_model *mod, struct bt_mesh_msg_ctx *ctx,
		    struct net_buf_simple *buf,
		    struct bt_mesh_model_ack_ctx *ack, uint32_t rsp_op,
		    void *user_data)
{
   28242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28244:	4606      	mov	r6, r0
   28246:	460d      	mov	r5, r1
	if (ack &&
   28248:	461c      	mov	r4, r3
   2824a:	b143      	cbz	r3, 2825e <model_ackd_send+0x1c>
	    model_ack_ctx_prepare(ack, rsp_op, ctx ? ctx->addr : mod->pub->addr,
   2824c:	b349      	cbz	r1, 282a2 <model_ackd_send+0x60>
   2824e:	888b      	ldrh	r3, [r1, #4]
}

static inline int model_ack_ctx_prepare(struct bt_mesh_model_ack_ctx *ack,
					uint32_t op, uint16_t dst, void *user_data)
{
	if (ack->op != 0) {
   28250:	69a1      	ldr	r1, [r4, #24]
   28252:	bb61      	cbnz	r1, 282ae <model_ackd_send+0x6c>
		return -EALREADY;
	}
	ack->op = op;
   28254:	9906      	ldr	r1, [sp, #24]
   28256:	61a1      	str	r1, [r4, #24]
	ack->user_data = user_data;
   28258:	9907      	ldr	r1, [sp, #28]
   2825a:	6221      	str	r1, [r4, #32]
	ack->dst = dst;
   2825c:	83a3      	strh	r3, [r4, #28]
				  user_data) != 0) {
		return -EALREADY;
	}

	int retval = model_send(mod, ctx, buf);
   2825e:	4629      	mov	r1, r5
   28260:	4630      	mov	r0, r6
   28262:	f7ff ffd1 	bl	28208 <model_send>

	if (ack) {
   28266:	b1dc      	cbz	r4, 282a0 <model_ackd_send+0x5e>
		if (retval == 0) {
   28268:	b9c0      	cbnz	r0, 2829c <model_ackd_send+0x5a>
			uint8_t ttl = (ctx ? ctx->send_ttl : mod->pub->ttl);
   2826a:	b1ed      	cbz	r5, 282a8 <model_ackd_send+0x66>
   2826c:	7aeb      	ldrb	r3, [r5, #11]
			int32_t time = (MOD_ACKD_TIMEOUT_BASE +
   2826e:	22c8      	movs	r2, #200	; 0xc8
   28270:	2132      	movs	r1, #50	; 0x32
   28272:	fb11 2103 	smlabb	r1, r1, r3, r2
   28276:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2827a:	f240 36e7 	movw	r6, #999	; 0x3e7
   2827e:	2700      	movs	r7, #0
   28280:	fbc0 6701 	smlal	r6, r7, r0, r1
   28284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28288:	2300      	movs	r3, #0
   2828a:	4630      	mov	r0, r6
   2828c:	4639      	mov	r1, r7
   2828e:	f7d7 ff37 	bl	100 <__aeabi_uldivmod>
   28292:	4602      	mov	r2, r0
   28294:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   28296:	4620      	mov	r0, r4
   28298:	f7f7 fd2c 	bl	1fcf4 <z_impl_k_sem_take>
	k_sem_give(&ack->sem);
}

static inline void model_ack_clear(struct bt_mesh_model_ack_ctx *ack)
{
	ack->op = 0;
   2829c:	2300      	movs	r3, #0
   2829e:	61a3      	str	r3, [r4, #24]
		}

		model_ack_clear(ack);
	}
	return retval;
}
   282a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    model_ack_ctx_prepare(ack, rsp_op, ctx ? ctx->addr : mod->pub->addr,
   282a2:	6883      	ldr	r3, [r0, #8]
   282a4:	889b      	ldrh	r3, [r3, #4]
   282a6:	e7d3      	b.n	28250 <model_ackd_send+0xe>
			uint8_t ttl = (ctx ? ctx->send_ttl : mod->pub->ttl);
   282a8:	68b3      	ldr	r3, [r6, #8]
   282aa:	7a1b      	ldrb	r3, [r3, #8]
   282ac:	e7df      	b.n	2826e <model_ackd_send+0x2c>
		return -EALREADY;
   282ae:	f06f 0044 	mvn.w	r0, #68	; 0x44
   282b2:	e7f5      	b.n	282a0 <model_ackd_send+0x5e>

000282b4 <bt_mesh_onoff_srv_reset>:

static void bt_mesh_onoff_srv_reset(struct bt_mesh_model *model)
{
	net_buf_simple_reset(model->pub->msg);
   282b4:	6883      	ldr	r3, [r0, #8]
   282b6:	691b      	ldr	r3, [r3, #16]
	buf->len  = 0U;
   282b8:	2200      	movs	r2, #0
   282ba:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   282bc:	689a      	ldr	r2, [r3, #8]
   282be:	601a      	str	r2, [r3, #0]
}
   282c0:	4770      	bx	lr

000282c2 <encode_status>:
{
   282c2:	b538      	push	{r3, r4, r5, lr}
   282c4:	460c      	mov	r4, r1
   282c6:	4605      	mov	r5, r0
	bt_mesh_model_msg_init(buf, BT_MESH_ONOFF_OP_STATUS);
   282c8:	f248 2104 	movw	r1, #33284	; 0x8204
   282cc:	f7fe f80a 	bl	262e4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(buf, !!status->present_on_off);
   282d0:	7821      	ldrb	r1, [r4, #0]
   282d2:	4628      	mov	r0, r5
   282d4:	f7ff fe57 	bl	27f86 <net_buf_simple_add_u8>
	if (status->remaining_time != 0) {
   282d8:	6863      	ldr	r3, [r4, #4]
   282da:	b163      	cbz	r3, 282f6 <encode_status+0x34>
		net_buf_simple_add_u8(buf, status->target_on_off);
   282dc:	7861      	ldrb	r1, [r4, #1]
   282de:	4628      	mov	r0, r5
   282e0:	f7ff fe51 	bl	27f86 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(
   282e4:	6860      	ldr	r0, [r4, #4]
   282e6:	f7f5 fad7 	bl	1d898 <model_transition_encode>
   282ea:	4601      	mov	r1, r0
   282ec:	4628      	mov	r0, r5
}
   282ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(
   282f2:	f7ff be48 	b.w	27f86 <net_buf_simple_add_u8>
}
   282f6:	bd38      	pop	{r3, r4, r5, pc}

000282f8 <rsp_status>:
{
   282f8:	b530      	push	{r4, r5, lr}
   282fa:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, BT_MESH_ONOFF_OP_STATUS,
   282fc:	ab02      	add	r3, sp, #8
{
   282fe:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, BT_MESH_ONOFF_OP_STATUS,
   28300:	f44f 2110 	mov.w	r1, #589824	; 0x90000
   28304:	e9cd 1306 	strd	r1, r3, [sp, #24]
{
   28308:	4604      	mov	r4, r0
	encode_status(&msg, status);
   2830a:	4611      	mov	r1, r2
   2830c:	a805      	add	r0, sp, #20
	BT_MESH_MODEL_BUF_DEFINE(msg, BT_MESH_ONOFF_OP_STATUS,
   2830e:	9305      	str	r3, [sp, #20]
	encode_status(&msg, status);
   28310:	f7ff ffd7 	bl	282c2 <encode_status>
	(void)bt_mesh_model_send(model, rx_ctx, &msg, NULL, NULL);
   28314:	2300      	movs	r3, #0
   28316:	9300      	str	r3, [sp, #0]
   28318:	aa05      	add	r2, sp, #20
   2831a:	4629      	mov	r1, r5
   2831c:	4620      	mov	r0, r4
   2831e:	f7fe f80a 	bl	26336 <bt_mesh_model_send>
}
   28322:	b009      	add	sp, #36	; 0x24
   28324:	bd30      	pop	{r4, r5, pc}

00028326 <update_handler>:
{
   28326:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28328:	4605      	mov	r5, r0
	struct bt_mesh_onoff_srv *srv = model->user_data;
   2832a:	6980      	ldr	r0, [r0, #24]
	srv->handlers->get(srv, NULL, &status);
   2832c:	6983      	ldr	r3, [r0, #24]
	struct bt_mesh_onoff_status status = { 0 };
   2832e:	2400      	movs	r4, #0
	srv->handlers->get(srv, NULL, &status);
   28330:	466a      	mov	r2, sp
   28332:	4621      	mov	r1, r4
	struct bt_mesh_onoff_status status = { 0 };
   28334:	e9cd 4400 	strd	r4, r4, [sp]
	srv->handlers->get(srv, NULL, &status);
   28338:	685b      	ldr	r3, [r3, #4]
   2833a:	4798      	blx	r3
	encode_status(model->pub->msg, &status);
   2833c:	68ab      	ldr	r3, [r5, #8]
   2833e:	4669      	mov	r1, sp
   28340:	6918      	ldr	r0, [r3, #16]
   28342:	f7ff ffbe 	bl	282c2 <encode_status>
}
   28346:	4620      	mov	r0, r4
   28348:	b003      	add	sp, #12
   2834a:	bd30      	pop	{r4, r5, pc}

0002834c <handle_get>:
	if (buf->len != BT_MESH_ONOFF_MSG_LEN_GET) {
   2834c:	8893      	ldrh	r3, [r2, #4]
{
   2834e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28350:	4604      	mov	r4, r0
   28352:	460d      	mov	r5, r1
	if (buf->len != BT_MESH_ONOFF_MSG_LEN_GET) {
   28354:	b95b      	cbnz	r3, 2836e <handle_get+0x22>
	struct bt_mesh_onoff_srv *srv = model->user_data;
   28356:	6980      	ldr	r0, [r0, #24]
	struct bt_mesh_onoff_status status = { 0 };
   28358:	e9cd 3300 	strd	r3, r3, [sp]
	srv->handlers->get(srv, ctx, &status);
   2835c:	6983      	ldr	r3, [r0, #24]
   2835e:	466a      	mov	r2, sp
   28360:	685b      	ldr	r3, [r3, #4]
   28362:	4798      	blx	r3
	rsp_status(model, ctx, &status);
   28364:	466a      	mov	r2, sp
   28366:	4629      	mov	r1, r5
   28368:	4620      	mov	r0, r4
   2836a:	f7ff ffc5 	bl	282f8 <rsp_status>
}
   2836e:	b003      	add	sp, #12
   28370:	bd30      	pop	{r4, r5, pc}

00028372 <bt_mesh_onoff_srv_pub>:
};

int32_t bt_mesh_onoff_srv_pub(struct bt_mesh_onoff_srv *srv,
			    struct bt_mesh_msg_ctx *ctx,
			    const struct bt_mesh_onoff_status *status)
{
   28372:	b530      	push	{r4, r5, lr}
   28374:	4604      	mov	r4, r0
   28376:	b087      	sub	sp, #28
	BT_MESH_MODEL_BUF_DEFINE(msg, BT_MESH_ONOFF_OP_STATUS,
   28378:	f44f 2310 	mov.w	r3, #589824	; 0x90000
{
   2837c:	460d      	mov	r5, r1
				 BT_MESH_ONOFF_MSG_MAXLEN_STATUS);
	encode_status(&msg, status);
   2837e:	a803      	add	r0, sp, #12
   28380:	4611      	mov	r1, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, BT_MESH_ONOFF_OP_STATUS,
   28382:	9304      	str	r3, [sp, #16]
   28384:	f8cd d00c 	str.w	sp, [sp, #12]
   28388:	f8cd d014 	str.w	sp, [sp, #20]
	encode_status(&msg, status);
   2838c:	f7ff ff99 	bl	282c2 <encode_status>
	return model_send(srv->model, ctx, &msg);
   28390:	aa03      	add	r2, sp, #12
   28392:	4629      	mov	r1, r5
   28394:	69e0      	ldr	r0, [r4, #28]
   28396:	f7ff ff37 	bl	28208 <model_send>
}
   2839a:	b007      	add	sp, #28
   2839c:	bd30      	pop	{r4, r5, pc}

0002839e <onoff_set>:
{
   2839e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   283a2:	4698      	mov	r8, r3
	if (buf->len != BT_MESH_ONOFF_MSG_MINLEN_SET &&
   283a4:	8893      	ldrh	r3, [r2, #4]
   283a6:	2b02      	cmp	r3, #2
{
   283a8:	b086      	sub	sp, #24
   283aa:	4607      	mov	r7, r0
   283ac:	460e      	mov	r6, r1
   283ae:	4615      	mov	r5, r2
	if (buf->len != BT_MESH_ONOFF_MSG_MINLEN_SET &&
   283b0:	d001      	beq.n	283b6 <onoff_set+0x18>
   283b2:	2b04      	cmp	r3, #4
   283b4:	d126      	bne.n	28404 <onoff_set+0x66>
	struct bt_mesh_onoff_status status = { 0 };
   283b6:	f04f 0a00 	mov.w	sl, #0
	uint8_t on_off = net_buf_simple_pull_u8(buf);
   283ba:	4628      	mov	r0, r5
	struct bt_mesh_onoff_srv *srv = model->user_data;
   283bc:	69bc      	ldr	r4, [r7, #24]
	struct bt_mesh_onoff_status status = { 0 };
   283be:	e9cd aa00 	strd	sl, sl, [sp]
	uint8_t on_off = net_buf_simple_pull_u8(buf);
   283c2:	f7ff fda4 	bl	27f0e <net_buf_simple_pull_u8>
   283c6:	4681      	mov	r9, r0
	uint8_t tid = net_buf_simple_pull_u8(buf);
   283c8:	4628      	mov	r0, r5
   283ca:	f7ff fda0 	bl	27f0e <net_buf_simple_pull_u8>
	if (on_off > 1) {
   283ce:	f1b9 0f01 	cmp.w	r9, #1
	uint8_t tid = net_buf_simple_pull_u8(buf);
   283d2:	4601      	mov	r1, r0
	if (on_off > 1) {
   283d4:	d816      	bhi.n	28404 <onoff_set+0x66>
	set.on_off = on_off;
   283d6:	f009 0901 	and.w	r9, r9, #1
	if (tid_check_and_update(&srv->prev_transaction, tid, ctx) != 0) {
   283da:	4632      	mov	r2, r6
   283dc:	4620      	mov	r0, r4
	set.on_off = on_off;
   283de:	f88d 9010 	strb.w	r9, [sp, #16]
	if (tid_check_and_update(&srv->prev_transaction, tid, ctx) != 0) {
   283e2:	f7ff fed2 	bl	2818a <tid_check_and_update>
   283e6:	b180      	cbz	r0, 2840a <onoff_set+0x6c>
		srv->handlers->get(srv, NULL, &status);
   283e8:	69a3      	ldr	r3, [r4, #24]
   283ea:	466a      	mov	r2, sp
   283ec:	685b      	ldr	r3, [r3, #4]
   283ee:	4651      	mov	r1, sl
   283f0:	4620      	mov	r0, r4
   283f2:	4798      	blx	r3
	if (ack) {
   283f4:	f1b8 0f00 	cmp.w	r8, #0
   283f8:	d004      	beq.n	28404 <onoff_set+0x66>
		rsp_status(model, ctx, &status);
   283fa:	466a      	mov	r2, sp
   283fc:	4631      	mov	r1, r6
   283fe:	4638      	mov	r0, r7
   28400:	f7ff ff7a 	bl	282f8 <rsp_status>
}
   28404:	b006      	add	sp, #24
   28406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (buf->len == 2) {
   2840a:	88ab      	ldrh	r3, [r5, #4]
   2840c:	2b02      	cmp	r3, #2
   2840e:	d11a      	bne.n	28446 <onoff_set+0xa8>

static inline void
model_transition_buf_pull(struct net_buf_simple *buf,
			  struct bt_mesh_model_transition *transition)
{
	transition->time = model_transition_decode(net_buf_simple_pull_u8(buf));
   28410:	4628      	mov	r0, r5
   28412:	f7ff fd7c 	bl	27f0e <net_buf_simple_pull_u8>
   28416:	f7f5 fa2f 	bl	1d878 <model_transition_decode>
   2841a:	9002      	str	r0, [sp, #8]
	transition->delay = model_delay_decode(net_buf_simple_pull_u8(buf));
   2841c:	4628      	mov	r0, r5
   2841e:	f7ff fd76 	bl	27f0e <net_buf_simple_pull_u8>
   28422:	f7ff feee 	bl	28202 <model_delay_decode>
   28426:	9003      	str	r0, [sp, #12]
	set.transition = &transition;
   28428:	ab02      	add	r3, sp, #8
   2842a:	9305      	str	r3, [sp, #20]
	srv->handlers->set(srv, ctx, &set, &status);
   2842c:	69a3      	ldr	r3, [r4, #24]
   2842e:	aa04      	add	r2, sp, #16
   28430:	681d      	ldr	r5, [r3, #0]
   28432:	4631      	mov	r1, r6
   28434:	4620      	mov	r0, r4
   28436:	466b      	mov	r3, sp
   28438:	47a8      	blx	r5
	(void)bt_mesh_onoff_srv_pub(srv, NULL, &status);
   2843a:	466a      	mov	r2, sp
   2843c:	2100      	movs	r1, #0
   2843e:	4620      	mov	r0, r4
   28440:	f7ff ff97 	bl	28372 <bt_mesh_onoff_srv_pub>
   28444:	e7d6      	b.n	283f4 <onoff_set+0x56>
static inline bool
bt_mesh_dtt_srv_transition_get(struct bt_mesh_model *mod,
			       struct bt_mesh_model_transition *transition)
{
	struct bt_mesh_dtt_srv *srv =
		bt_mesh_dtt_srv_get(bt_mesh_model_elem(mod));
   28446:	69e0      	ldr	r0, [r4, #28]
   28448:	f7e7 f94e 	bl	f6e8 <bt_mesh_model_elem>
	struct bt_mesh_model *mod = bt_mesh_model_find(
   2844c:	f241 0104 	movw	r1, #4100	; 0x1004
   28450:	f7fd ffa0 	bl	26394 <bt_mesh_model_find>
	return (struct bt_mesh_dtt_srv *)(mod ? mod->user_data : NULL);
   28454:	b110      	cbz	r0, 2845c <onoff_set+0xbe>
   28456:	6980      	ldr	r0, [r0, #24]

	transition->time = srv ? srv->transition_time : 0;
   28458:	b100      	cbz	r0, 2845c <onoff_set+0xbe>
   2845a:	6800      	ldr	r0, [r0, #0]
   2845c:	9002      	str	r0, [sp, #8]
	transition->delay = 0;
   2845e:	2300      	movs	r3, #0
   28460:	9303      	str	r3, [sp, #12]
	return (transition->time != 0);
   28462:	e7e1      	b.n	28428 <onoff_set+0x8a>

00028464 <handle_set_unack>:
	onoff_set(model, ctx, buf, false);
   28464:	2300      	movs	r3, #0
   28466:	f7ff bf9a 	b.w	2839e <onoff_set>

0002846a <handle_set>:
	onoff_set(model, ctx, buf, true);
   2846a:	2301      	movs	r3, #1
   2846c:	f7ff bf97 	b.w	2839e <onoff_set>

00028470 <bt_mesh_onoff_cli_reset>:
	return 0;
}

static void bt_mesh_onoff_cli_reset(struct bt_mesh_model *model)
{
	struct bt_mesh_onoff_cli *cli = model->user_data;
   28470:	6982      	ldr	r2, [r0, #24]

	net_buf_simple_reset(cli->pub.msg);
   28472:	6c13      	ldr	r3, [r2, #64]	; 0x40
	buf->len  = 0U;
   28474:	2100      	movs	r1, #0
	buf->data = buf->__buf;
   28476:	6898      	ldr	r0, [r3, #8]
	buf->len  = 0U;
   28478:	8099      	strh	r1, [r3, #4]
	buf->data = buf->__buf;
   2847a:	6018      	str	r0, [r3, #0]
	sem->count = 0U;
   2847c:	6111      	str	r1, [r2, #16]
	model_ack_reset(&cli->ack_ctx);
}
   2847e:	4770      	bx	lr

00028480 <model_transition_buf_add>:
{
   28480:	b538      	push	{r3, r4, r5, lr}
   28482:	4604      	mov	r4, r0
	net_buf_simple_add_u8(buf, model_transition_encode(transition->time));
   28484:	6808      	ldr	r0, [r1, #0]
{
   28486:	460d      	mov	r5, r1
	net_buf_simple_add_u8(buf, model_transition_encode(transition->time));
   28488:	f7f5 fa06 	bl	1d898 <model_transition_encode>
   2848c:	4601      	mov	r1, r0
   2848e:	4620      	mov	r0, r4
   28490:	f7ff fd79 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, model_delay_encode(transition->delay));
   28494:	6868      	ldr	r0, [r5, #4]
   28496:	f7ff feaf 	bl	281f8 <model_delay_encode>
   2849a:	4601      	mov	r1, r0
   2849c:	4620      	mov	r0, r4
}
   2849e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, model_delay_encode(transition->delay));
   284a2:	f7ff bd70 	b.w	27f86 <net_buf_simple_add_u8>

000284a6 <handle_status>:
	if (buf->len != BT_MESH_ONOFF_MSG_MINLEN_STATUS &&
   284a6:	8893      	ldrh	r3, [r2, #4]
   284a8:	f023 0302 	bic.w	r3, r3, #2
   284ac:	2b01      	cmp	r3, #1
{
   284ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   284b0:	460e      	mov	r6, r1
   284b2:	4615      	mov	r5, r2
	if (buf->len != BT_MESH_ONOFF_MSG_MINLEN_STATUS &&
   284b4:	d135      	bne.n	28522 <handle_status+0x7c>
	struct bt_mesh_onoff_cli *cli = model->user_data;
   284b6:	6984      	ldr	r4, [r0, #24]
	on_off = net_buf_simple_pull_u8(buf);
   284b8:	4610      	mov	r0, r2
   284ba:	f7ff fd28 	bl	27f0e <net_buf_simple_pull_u8>
	if (on_off > 1) {
   284be:	2801      	cmp	r0, #1
   284c0:	d82f      	bhi.n	28522 <handle_status+0x7c>
	if (buf->len == 2) {
   284c2:	88ab      	ldrh	r3, [r5, #4]
	status->present_on_off = on_off;
   284c4:	f000 0001 	and.w	r0, r0, #1
	if (buf->len == 2) {
   284c8:	2b02      	cmp	r3, #2
	status->present_on_off = on_off;
   284ca:	f88d 0000 	strb.w	r0, [sp]
	if (buf->len == 2) {
   284ce:	d12a      	bne.n	28526 <handle_status+0x80>
		on_off = net_buf_simple_pull_u8(buf);
   284d0:	4628      	mov	r0, r5
   284d2:	f7ff fd1c 	bl	27f0e <net_buf_simple_pull_u8>
		if (on_off > 1) {
   284d6:	2801      	cmp	r0, #1
   284d8:	d823      	bhi.n	28522 <handle_status+0x7c>
		status->target_on_off = on_off;
   284da:	f000 0001 	and.w	r0, r0, #1
   284de:	f88d 0001 	strb.w	r0, [sp, #1]
			model_transition_decode(net_buf_simple_pull_u8(buf));
   284e2:	4628      	mov	r0, r5
   284e4:	f7ff fd13 	bl	27f0e <net_buf_simple_pull_u8>
   284e8:	f7f5 f9c6 	bl	1d878 <model_transition_decode>
		status->remaining_time =
   284ec:	9001      	str	r0, [sp, #4]
	return (ack_ctx->op == op &&
   284ee:	6a22      	ldr	r2, [r4, #32]
   284f0:	f248 2304 	movw	r3, #33284	; 0x8204
   284f4:	429a      	cmp	r2, r3
   284f6:	d10e      	bne.n	28516 <handle_status+0x70>
		(ack_ctx->dst == msg_ctx->addr || ack_ctx->dst == 0));
   284f8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	return (ack_ctx->op == op &&
   284fa:	88b2      	ldrh	r2, [r6, #4]
   284fc:	429a      	cmp	r2, r3
   284fe:	d000      	beq.n	28502 <handle_status+0x5c>
		(ack_ctx->dst == msg_ctx->addr || ack_ctx->dst == 0));
   28500:	b94b      	cbnz	r3, 28516 <handle_status+0x70>
		*rsp = status;
   28502:	aa02      	add	r2, sp, #8
   28504:	e912 0003 	ldmdb	r2, {r0, r1}
   28508:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2850a:	e883 0003 	stmia.w	r3, {r0, r1}
	z_impl_k_sem_give(sem);
   2850e:	f104 0008 	add.w	r0, r4, #8
   28512:	f7f7 fbb3 	bl	1fc7c <z_impl_k_sem_give>
	if (cli->status_handler) {
   28516:	6823      	ldr	r3, [r4, #0]
   28518:	b11b      	cbz	r3, 28522 <handle_status+0x7c>
		cli->status_handler(cli, ctx, &status);
   2851a:	466a      	mov	r2, sp
   2851c:	4631      	mov	r1, r6
   2851e:	4620      	mov	r0, r4
   28520:	4798      	blx	r3
}
   28522:	b002      	add	sp, #8
   28524:	bd70      	pop	{r4, r5, r6, pc}
		status->remaining_time = 0;
   28526:	2300      	movs	r3, #0
		status->target_on_off = status->present_on_off;
   28528:	f88d 0001 	strb.w	r0, [sp, #1]
		status->remaining_time = 0;
   2852c:	9301      	str	r3, [sp, #4]
   2852e:	e7de      	b.n	284ee <handle_status+0x48>

00028530 <bt_mesh_onoff_cli_init>:
{
   28530:	b510      	push	{r4, lr}
	struct bt_mesh_onoff_cli *cli = model->user_data;
   28532:	6984      	ldr	r4, [r0, #24]
	cli->model = model;
   28534:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	cli->pub.msg = &cli->pub_buf;
   28538:	f104 0078 	add.w	r0, r4, #120	; 0x78
   2853c:	6420      	str	r0, [r4, #64]	; 0x40
	net_buf_simple_init_with_data(&cli->pub_buf, cli->pub_data,
   2853e:	220a      	movs	r2, #10
   28540:	f104 0184 	add.w	r1, r4, #132	; 0x84
   28544:	f7ff fcbb 	bl	27ebe <net_buf_simple_init_with_data>
	return z_impl_k_sem_init(sem, initial_count, limit);
   28548:	2201      	movs	r2, #1
   2854a:	2100      	movs	r1, #0
   2854c:	f104 0008 	add.w	r0, r4, #8
   28550:	f000 f8f6 	bl	28740 <z_impl_k_sem_init>
}
   28554:	2000      	movs	r0, #0
   28556:	bd10      	pop	{r4, pc}

00028558 <bt_mesh_onoff_cli_set>:

int bt_mesh_onoff_cli_set(struct bt_mesh_onoff_cli *cli,
			  struct bt_mesh_msg_ctx *ctx,
			  const struct bt_mesh_onoff_set *set,
			  struct bt_mesh_onoff_status *rsp)
{
   28558:	b5f0      	push	{r4, r5, r6, r7, lr}
   2855a:	4616      	mov	r6, r2
   2855c:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, BT_MESH_ONOFF_OP_SET,
   2855e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
{
   28562:	4604      	mov	r4, r0
   28564:	460f      	mov	r7, r1
				 BT_MESH_ONOFF_MSG_MAXLEN_SET);
	bt_mesh_model_msg_init(&msg, BT_MESH_ONOFF_OP_SET);
   28566:	a805      	add	r0, sp, #20
   28568:	f248 2102 	movw	r1, #33282	; 0x8202
{
   2856c:	461d      	mov	r5, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, BT_MESH_ONOFF_OP_SET,
   2856e:	ab02      	add	r3, sp, #8
   28570:	e9cd 2306 	strd	r2, r3, [sp, #24]
   28574:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, BT_MESH_ONOFF_OP_SET);
   28576:	f7fd feb5 	bl	262e4 <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(&msg, set->on_off);
   2857a:	7831      	ldrb	r1, [r6, #0]
   2857c:	a805      	add	r0, sp, #20
   2857e:	f7ff fd02 	bl	27f86 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cli->tid++);
   28582:	7921      	ldrb	r1, [r4, #4]
   28584:	1c4b      	adds	r3, r1, #1
   28586:	7123      	strb	r3, [r4, #4]
   28588:	a805      	add	r0, sp, #20
   2858a:	f7ff fcfc 	bl	27f86 <net_buf_simple_add_u8>
	if (set->transition) {
   2858e:	6871      	ldr	r1, [r6, #4]
   28590:	b111      	cbz	r1, 28598 <bt_mesh_onoff_cli_set+0x40>
		model_transition_buf_add(&msg, set->transition);
   28592:	a805      	add	r0, sp, #20
   28594:	f7ff ff74 	bl	28480 <model_transition_buf_add>
	}

	return model_ackd_send(cli->model, ctx, &msg,
   28598:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   2859c:	b15d      	cbz	r5, 285b6 <bt_mesh_onoff_cli_set+0x5e>
   2859e:	3408      	adds	r4, #8
   285a0:	f248 2304 	movw	r3, #33284	; 0x8204
   285a4:	9300      	str	r3, [sp, #0]
   285a6:	9501      	str	r5, [sp, #4]
   285a8:	4623      	mov	r3, r4
   285aa:	aa05      	add	r2, sp, #20
   285ac:	4639      	mov	r1, r7
   285ae:	f7ff fe48 	bl	28242 <model_ackd_send>
			       rsp ? &cli->ack_ctx : NULL,
			       BT_MESH_ONOFF_OP_STATUS, rsp);
}
   285b2:	b009      	add	sp, #36	; 0x24
   285b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return model_ackd_send(cli->model, ctx, &msg,
   285b6:	462c      	mov	r4, r5
   285b8:	e7f2      	b.n	285a0 <bt_mesh_onoff_cli_set+0x48>

000285ba <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   285ba:	4700      	bx	r0

000285bc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   285bc:	f000 b8d6 	b.w	2876c <z_impl_k_busy_wait>

000285c0 <is_valid_address>:
    return p_reg->CODEPAGESIZE;
   285c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
{
   285c4:	b510      	push	{r4, lr}
   285c6:	6914      	ldr	r4, [r2, #16]
    return p_reg->CODESIZE;
   285c8:	6953      	ldr	r3, [r2, #20]
    return flash_page_size_get() * flash_page_count_get();
   285ca:	4363      	muls	r3, r4
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   285cc:	4298      	cmp	r0, r3
   285ce:	d309      	bcc.n	285e4 <is_valid_address+0x24>
    if (uicr_allowed &&
   285d0:	b131      	cbz	r1, 285e0 <is_valid_address+0x20>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   285d2:	f1a0 2110 	sub.w	r1, r0, #268439552	; 0x10001000
    if (uicr_allowed &&
   285d6:	f5b1 7f42 	cmp.w	r1, #776	; 0x308
   285da:	bf2c      	ite	cs
   285dc:	2100      	movcs	r1, #0
   285de:	2101      	movcc	r1, #1
}
   285e0:	4608      	mov	r0, r1
   285e2:	bd10      	pop	{r4, pc}
        return true;
   285e4:	2101      	movs	r1, #1
   285e6:	e7fb      	b.n	285e0 <is_valid_address+0x20>

000285e8 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   285e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   285ec:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   285ee:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   285f0:	4350      	muls	r0, r2
   285f2:	4770      	bx	lr

000285f4 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   285f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   285f8:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   285fa:	4770      	bx	lr

000285fc <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   285fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28600:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   28602:	4770      	bx	lr

00028604 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   28604:	f7fa bbf6 	b.w	22df4 <z_clock_idle_exit>

00028608 <k_heap_init>:
{
   28608:	b410      	push	{r4}
   2860a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2860e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   28612:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   28614:	f7da b96c 	b.w	28f0 <sys_heap_init>

00028618 <k_mem_slab_init>:
{
   28618:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2861a:	2400      	movs	r4, #0
   2861c:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2861e:	ea41 0402 	orr.w	r4, r1, r2
   28622:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   28626:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2862a:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2862c:	d10c      	bne.n	28648 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2862e:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   28630:	42a3      	cmp	r3, r4
   28632:	d103      	bne.n	2863c <k_mem_slab_init+0x24>
   28634:	e9c0 0000 	strd	r0, r0, [r0]
   28638:	2000      	movs	r0, #0
}
   2863a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2863c:	6945      	ldr	r5, [r0, #20]
   2863e:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   28640:	3401      	adds	r4, #1
		slab->free_list = p;
   28642:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   28644:	4411      	add	r1, r2
   28646:	e7f3      	b.n	28630 <k_mem_slab_init+0x18>
		return -EINVAL;
   28648:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2864c:	e7f5      	b.n	2863a <k_mem_slab_init+0x22>

0002864e <z_impl_k_mutex_init>:
{
   2864e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   28650:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   28652:	e9c3 0002 	strd	r0, r0, [r3, #8]
   28656:	e9c3 3300 	strd	r3, r3, [r3]
}
   2865a:	4770      	bx	lr

0002865c <z_queue_node_peek>:
{
   2865c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2865e:	4604      	mov	r4, r0
   28660:	b130      	cbz	r0, 28670 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28662:	6802      	ldr	r2, [r0, #0]
   28664:	0793      	lsls	r3, r2, #30
   28666:	d003      	beq.n	28670 <z_queue_node_peek+0x14>
		ret = anode->data;
   28668:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2866a:	b109      	cbz	r1, 28670 <z_queue_node_peek+0x14>
			k_free(anode);
   2866c:	f000 f980 	bl	28970 <k_free>
}
   28670:	4620      	mov	r0, r4
   28672:	bd10      	pop	{r4, pc}

00028674 <z_impl_k_queue_init>:
	list->head = NULL;
   28674:	2300      	movs	r3, #0
	list->tail = NULL;
   28676:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2867a:	6083      	str	r3, [r0, #8]
   2867c:	f100 030c 	add.w	r3, r0, #12
   28680:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   28684:	f100 0314 	add.w	r3, r0, #20
   28688:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2868c:	4770      	bx	lr

0002868e <k_queue_append>:
{
   2868e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   28690:	2301      	movs	r3, #1
   28692:	9300      	str	r3, [sp, #0]
   28694:	2300      	movs	r3, #0
   28696:	460a      	mov	r2, r1
   28698:	4619      	mov	r1, r3
   2869a:	f7f6 f969 	bl	1e970 <queue_insert>
}
   2869e:	b003      	add	sp, #12
   286a0:	f85d fb04 	ldr.w	pc, [sp], #4

000286a4 <k_queue_prepend>:
{
   286a4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   286a6:	2300      	movs	r3, #0
   286a8:	460a      	mov	r2, r1
   286aa:	9300      	str	r3, [sp, #0]
   286ac:	4619      	mov	r1, r3
   286ae:	f7f6 f95f 	bl	1e970 <queue_insert>
}
   286b2:	b003      	add	sp, #12
   286b4:	f85d fb04 	ldr.w	pc, [sp], #4

000286b8 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   286b8:	f990 000e 	ldrsb.w	r0, [r0, #14]
   286bc:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   286c0:	4298      	cmp	r0, r3
   286c2:	bfac      	ite	ge
   286c4:	2000      	movge	r0, #0
   286c6:	2001      	movlt	r0, #1
   286c8:	4770      	bx	lr

000286ca <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   286ca:	4603      	mov	r3, r0
   286cc:	b920      	cbnz	r0, 286d8 <z_reschedule_irqlock+0xe>
   286ce:	f3ef 8205 	mrs	r2, IPSR
   286d2:	b90a      	cbnz	r2, 286d8 <z_reschedule_irqlock+0xe>
   286d4:	f7dc b832 	b.w	473c <arch_swap>
   286d8:	f383 8811 	msr	BASEPRI, r3
   286dc:	f3bf 8f6f 	isb	sy
}
   286e0:	4770      	bx	lr

000286e2 <z_reschedule_unlocked>:
	__asm__ volatile(
   286e2:	f04f 0320 	mov.w	r3, #32
   286e6:	f3ef 8011 	mrs	r0, BASEPRI
   286ea:	f383 8811 	msr	BASEPRI, r3
   286ee:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   286f2:	f7ff bfea 	b.w	286ca <z_reschedule_irqlock>

000286f6 <unpend_thread_no_timeout>:
{
   286f6:	b510      	push	{r4, lr}
   286f8:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   286fa:	3008      	adds	r0, #8
   286fc:	f7f6 faa6 	bl	1ec4c <pended_on.isra.19>
   28700:	4621      	mov	r1, r4
   28702:	f7f6 fbab 	bl	1ee5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   28706:	7b63      	ldrb	r3, [r4, #13]
   28708:	f023 0302 	bic.w	r3, r3, #2
   2870c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2870e:	2300      	movs	r3, #0
   28710:	60a3      	str	r3, [r4, #8]
}
   28712:	bd10      	pop	{r4, pc}

00028714 <z_priq_dumb_best>:
	return list->head == list;
   28714:	6803      	ldr	r3, [r0, #0]
}
   28716:	4298      	cmp	r0, r3
   28718:	bf14      	ite	ne
   2871a:	4618      	movne	r0, r3
   2871c:	2000      	moveq	r0, #0
   2871e:	4770      	bx	lr

00028720 <z_unpend_all>:
{
   28720:	b538      	push	{r3, r4, r5, lr}
   28722:	4605      	mov	r5, r0
	int need_sched = 0;
   28724:	2000      	movs	r0, #0
   28726:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28728:	42a5      	cmp	r5, r4
   2872a:	d000      	beq.n	2872e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2872c:	b904      	cbnz	r4, 28730 <z_unpend_all+0x10>
}
   2872e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   28730:	4620      	mov	r0, r4
   28732:	f7f6 fbbf 	bl	1eeb4 <z_unpend_thread>
		z_ready_thread(thread);
   28736:	4620      	mov	r0, r4
   28738:	f7f6 fcd4 	bl	1f0e4 <z_ready_thread>
		need_sched = 1;
   2873c:	2001      	movs	r0, #1
   2873e:	e7f2      	b.n	28726 <z_unpend_all+0x6>

00028740 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   28740:	b15a      	cbz	r2, 2875a <z_impl_k_sem_init+0x1a>
   28742:	428a      	cmp	r2, r1
   28744:	d309      	bcc.n	2875a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   28746:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2874a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2874e:	e9c0 0000 	strd	r0, r0, [r0]
   28752:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   28756:	2000      	movs	r0, #0
   28758:	4770      	bx	lr
		return -EINVAL;
   2875a:	f06f 0015 	mvn.w	r0, #21
}
   2875e:	4770      	bx	lr

00028760 <k_is_in_isr>:
   28760:	f3ef 8005 	mrs	r0, IPSR
}
   28764:	3000      	adds	r0, #0
   28766:	bf18      	it	ne
   28768:	2001      	movne	r0, #1
   2876a:	4770      	bx	lr

0002876c <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   2876c:	b108      	cbz	r0, 28772 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   2876e:	f7dc bd13 	b.w	5198 <arch_busy_wait>
}
   28772:	4770      	bx	lr

00028774 <z_impl_k_thread_name_set>:
}
   28774:	f06f 0046 	mvn.w	r0, #70	; 0x46
   28778:	4770      	bx	lr

0002877a <k_thread_name_get>:
}
   2877a:	2000      	movs	r0, #0
   2877c:	4770      	bx	lr

0002877e <z_impl_k_thread_start>:
	z_sched_start(thread);
   2877e:	f7f6 bce7 	b.w	1f150 <z_sched_start>

00028782 <k_work_submit_to_queue>:
{
   28782:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28784:	f101 0308 	add.w	r3, r1, #8
   28788:	f3bf 8f5b 	dmb	ish
   2878c:	e853 2f00 	ldrex	r2, [r3]
   28790:	f042 0c01 	orr.w	ip, r2, #1
   28794:	e843 ce00 	strex	lr, ip, [r3]
   28798:	f1be 0f00 	cmp.w	lr, #0
   2879c:	d1f6      	bne.n	2878c <k_work_submit_to_queue+0xa>
   2879e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   287a2:	07d3      	lsls	r3, r2, #31
   287a4:	d403      	bmi.n	287ae <k_work_submit_to_queue+0x2c>
}
   287a6:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   287aa:	f7ff bf70 	b.w	2868e <k_queue_append>
}
   287ae:	f85d fb04 	ldr.w	pc, [sp], #4

000287b2 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   287b2:	f1a0 0110 	sub.w	r1, r0, #16
   287b6:	6980      	ldr	r0, [r0, #24]
   287b8:	f7ff bfe3 	b.w	28782 <k_work_submit_to_queue>

000287bc <work_cancel>:
{
   287bc:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   287be:	f3bf 8f5b 	dmb	ish
   287c2:	6883      	ldr	r3, [r0, #8]
   287c4:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   287c8:	07db      	lsls	r3, r3, #31
{
   287ca:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   287cc:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   287d0:	d532      	bpl.n	28838 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   287d2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   287d4:	6813      	ldr	r3, [r2, #0]
   287d6:	2100      	movs	r1, #0
   287d8:	b913      	cbnz	r3, 287e0 <work_cancel+0x24>
			return -EINVAL;
   287da:	f06f 0015 	mvn.w	r0, #21
}
   287de:	bd70      	pop	{r4, r5, r6, pc}
   287e0:	429c      	cmp	r4, r3
   287e2:	d124      	bne.n	2882e <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   287e4:	6823      	ldr	r3, [r4, #0]
   287e6:	6856      	ldr	r6, [r2, #4]
   287e8:	f023 0003 	bic.w	r0, r3, #3
   287ec:	b9b1      	cbnz	r1, 2881c <work_cancel+0x60>
   287ee:	42b4      	cmp	r4, r6
	list->head = node;
   287f0:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   287f2:	d100      	bne.n	287f6 <work_cancel+0x3a>
	list->tail = node;
   287f4:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   287f6:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   287f8:	f003 0303 	and.w	r3, r3, #3
   287fc:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   287fe:	2000      	movs	r0, #0
   28800:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28802:	f3bf 8f5b 	dmb	ish
   28806:	e855 3f00 	ldrex	r3, [r5]
   2880a:	f023 0301 	bic.w	r3, r3, #1
   2880e:	e845 3200 	strex	r2, r3, [r5]
   28812:	2a00      	cmp	r2, #0
   28814:	d1f7      	bne.n	28806 <work_cancel+0x4a>
   28816:	f3bf 8f5b 	dmb	ish
   2881a:	e7e0      	b.n	287de <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2881c:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2881e:	f003 0303 	and.w	r3, r3, #3
   28822:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   28824:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   28826:	600b      	str	r3, [r1, #0]
	list->tail = node;
   28828:	bf08      	it	eq
   2882a:	6051      	streq	r1, [r2, #4]
   2882c:	e7e3      	b.n	287f6 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2882e:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   28830:	4619      	mov	r1, r3
   28832:	f020 0303 	bic.w	r3, r0, #3
   28836:	e7cf      	b.n	287d8 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   28838:	3010      	adds	r0, #16
   2883a:	f7f7 fe8d 	bl	20558 <z_abort_timeout>
		if (err) {
   2883e:	2800      	cmp	r0, #0
   28840:	d0dd      	beq.n	287fe <work_cancel+0x42>
			return -EALREADY;
   28842:	f06f 0044 	mvn.w	r0, #68	; 0x44
   28846:	e7ca      	b.n	287de <work_cancel+0x22>

00028848 <k_delayed_work_pending>:

bool k_delayed_work_pending(struct k_delayed_work *work)
{
	return !z_is_inactive_timeout(&work->timeout) ||
   28848:	6903      	ldr	r3, [r0, #16]
   2884a:	b93b      	cbnz	r3, 2885c <k_delayed_work_pending+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2884c:	f3bf 8f5b 	dmb	ish
   28850:	6880      	ldr	r0, [r0, #8]
   28852:	f3bf 8f5b 	dmb	ish
   28856:	f000 0001 	and.w	r0, r0, #1
   2885a:	4770      	bx	lr
   2885c:	2001      	movs	r0, #1
	       k_work_pending(&work->work);
}
   2885e:	4770      	bx	lr

00028860 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   28860:	4770      	bx	lr

00028862 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   28862:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   28864:	f7f8 f812 	bl	2088c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   28868:	bd08      	pop	{r3, pc}

0002886a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2886a:	f7f8 b80f 	b.w	2088c <z_tick_get>

0002886e <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   2886e:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   28870:	1c4b      	adds	r3, r1, #1
   28872:	bf08      	it	eq
   28874:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   28878:	4604      	mov	r4, r0
   2887a:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2887c:	d013      	beq.n	288a6 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2887e:	ea54 0105 	orrs.w	r1, r4, r5
   28882:	d103      	bne.n	2888c <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   28884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   28888:	f7f8 b800 	b.w	2088c <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2888c:	f06f 0101 	mvn.w	r1, #1
   28890:	1a0a      	subs	r2, r1, r0
   28892:	f04f 31ff 	mov.w	r1, #4294967295
   28896:	eb61 0305 	sbc.w	r3, r1, r5
   2889a:	2a00      	cmp	r2, #0
   2889c:	f173 0100 	sbcs.w	r1, r3, #0
   288a0:	db02      	blt.n	288a8 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   288a2:	4610      	mov	r0, r2
   288a4:	4619      	mov	r1, r3
}
   288a6:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   288a8:	f7f7 fff0 	bl	2088c <z_tick_get>
   288ac:	2c01      	cmp	r4, #1
   288ae:	f175 0300 	sbcs.w	r3, r5, #0
   288b2:	bfbc      	itt	lt
   288b4:	2401      	movlt	r4, #1
   288b6:	2500      	movlt	r5, #0
   288b8:	1820      	adds	r0, r4, r0
   288ba:	eb45 0101 	adc.w	r1, r5, r1
   288be:	e7f2      	b.n	288a6 <z_timeout_end_calc+0x38>

000288c0 <k_work_submit_to_queue>:
{
   288c0:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   288c2:	f101 0308 	add.w	r3, r1, #8
   288c6:	f3bf 8f5b 	dmb	ish
   288ca:	e853 2f00 	ldrex	r2, [r3]
   288ce:	f042 0c01 	orr.w	ip, r2, #1
   288d2:	e843 ce00 	strex	lr, ip, [r3]
   288d6:	f1be 0f00 	cmp.w	lr, #0
   288da:	d1f6      	bne.n	288ca <k_work_submit_to_queue+0xa>
   288dc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   288e0:	07d3      	lsls	r3, r2, #31
   288e2:	d403      	bmi.n	288ec <k_work_submit_to_queue+0x2c>
}
   288e4:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   288e8:	f7ff bed1 	b.w	2868e <k_queue_append>
}
   288ec:	f85d fb04 	ldr.w	pc, [sp], #4

000288f0 <add_event>:
{
   288f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   288f2:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   288f4:	e9d0 2300 	ldrd	r2, r3, [r0]
   288f8:	4290      	cmp	r0, r2
   288fa:	4604      	mov	r4, r0
   288fc:	460d      	mov	r5, r1
   288fe:	d106      	bne.n	2890e <add_event+0x1e>
	node->prev = list->tail;
   28900:	6863      	ldr	r3, [r4, #4]
   28902:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   28904:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   28906:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   28908:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2890a:	6065      	str	r5, [r4, #4]
}
   2890c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2890e:	2b00      	cmp	r3, #0
   28910:	d0f6      	beq.n	28900 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   28912:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   28914:	b100      	cbz	r0, 28918 <add_event+0x28>
   28916:	386c      	subs	r0, #108	; 0x6c
   28918:	b107      	cbz	r7, 2891c <add_event+0x2c>
   2891a:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2891c:	4639      	mov	r1, r7
   2891e:	f7ff fecb 	bl	286b8 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   28922:	2800      	cmp	r0, #0
   28924:	d1ec      	bne.n	28900 <add_event+0x10>
	return list->head == list;
   28926:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28928:	42b4      	cmp	r4, r6
   2892a:	d0e9      	beq.n	28900 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2892c:	2e00      	cmp	r6, #0
   2892e:	d0e7      	beq.n	28900 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   28930:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   28932:	b101      	cbz	r1, 28936 <add_event+0x46>
   28934:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   28936:	4638      	mov	r0, r7
   28938:	f7ff febe 	bl	286b8 <z_is_t1_higher_prio_than_t2>
   2893c:	b128      	cbz	r0, 2894a <add_event+0x5a>
	node->prev = successor->prev;
   2893e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   28940:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   28944:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   28946:	6075      	str	r5, [r6, #4]
			return;
   28948:	e7e0      	b.n	2890c <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2894a:	6863      	ldr	r3, [r4, #4]
   2894c:	429e      	cmp	r6, r3
   2894e:	d0d7      	beq.n	28900 <add_event+0x10>
   28950:	6836      	ldr	r6, [r6, #0]
   28952:	e7eb      	b.n	2892c <add_event+0x3c>

00028954 <z_handle_obj_poll_events>:
	return list->head == list;
   28954:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   28956:	4298      	cmp	r0, r3
   28958:	d009      	beq.n	2896e <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2895a:	e9d3 2000 	ldrd	r2, r0, [r3]
   2895e:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   28960:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   28962:	2200      	movs	r2, #0
	node->prev = NULL;
   28964:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
   28968:	4618      	mov	r0, r3
   2896a:	f7f8 b855 	b.w	20a18 <signal_poll_event>
}
   2896e:	4770      	bx	lr

00028970 <k_free>:
	if (ptr != NULL) {
   28970:	b138      	cbz	r0, 28982 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   28972:	1f03      	subs	r3, r0, #4
   28974:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   28976:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   2897a:	1c42      	adds	r2, r0, #1
   2897c:	d0fa      	beq.n	28974 <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   2897e:	f7f5 bd63 	b.w	1e448 <k_heap_free>
}
   28982:	4770      	bx	lr

00028984 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   28984:	4770      	bx	lr
